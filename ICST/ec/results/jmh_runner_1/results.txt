=== Benchmark: org.eclipse.collections.api.factory.bag.MutableBagFactoryTest._Benchmark.benchmark_of$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.api.factory.bag.MutableBagFactoryTest._Benchmark.benchmark_of

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7498295.995 ops/s
# Warmup Iteration   2: 18060148.144 ops/s
# Warmup Iteration   3: 14885236.236 ops/s
# Warmup Iteration   4: 17748179.261 ops/s
# Warmup Iteration   5: 17949216.694 ops/s
# Warmup Iteration   6: 17875296.654 ops/s
# Warmup Iteration   7: 17927767.952 ops/s
# Warmup Iteration   8: 17961000.964 ops/s
# Warmup Iteration   9: 17909757.413 ops/s
# Warmup Iteration  10: 17925955.407 ops/s
# Warmup Iteration  11: 17851558.058 ops/s
# Warmup Iteration  12: 17952527.692 ops/s
# Warmup Iteration  13: 17913969.323 ops/s
# Warmup Iteration  14: 17934245.643 ops/s
# Warmup Iteration  15: 17961653.145 ops/s
# Warmup Iteration  16: 17925051.611 ops/s
# Warmup Iteration  17: 17938156.169 ops/s
# Warmup Iteration  18: 17941197.966 ops/s
# Warmup Iteration  19: 17935545.703 ops/s
# Warmup Iteration  20: 17965205.927 ops/s
# Warmup Iteration  21: 17851051.904 ops/s
# Warmup Iteration  22: 17943504.278 ops/s
# Warmup Iteration  23: 17876926.916 ops/s
# Warmup Iteration  24: 17903877.130 ops/s
# Warmup Iteration  25: 17909895.787 ops/s
# Warmup Iteration  26: 17928958.316 ops/s
# Warmup Iteration  27: 17957210.429 ops/s
# Warmup Iteration  28: 17928972.781 ops/s
# Warmup Iteration  29: 17970956.294 ops/s
# Warmup Iteration  30: 17933685.263 ops/s
Iteration   1: 17943526.817 ops/s
Iteration   2: 17930707.313 ops/s
Iteration   3: 17923354.711 ops/s
Iteration   4: 17866394.247 ops/s
Iteration   5: 17895105.486 ops/s
Iteration   6: 17863382.512 ops/s
Iteration   7: 17843064.239 ops/s
Iteration   8: 17959069.503 ops/s
Iteration   9: 17983023.761 ops/s
Iteration  10: 17856190.551 ops/s
Iteration  11: 18010770.183 ops/s
Iteration  12: 17953995.781 ops/s
Iteration  13: 17948892.187 ops/s
Iteration  14: 17980165.658 ops/s
Iteration  15: 17928118.151 ops/s
Iteration  16: 17980554.458 ops/s
Iteration  17: 17962107.501 ops/s
Iteration  18: 17986705.176 ops/s
Iteration  19: 17966213.362 ops/s
Iteration  20: 17920050.859 ops/s
Iteration  21: 17933770.478 ops/s
Iteration  22: 17983819.875 ops/s
Iteration  23: 17965088.314 ops/s
Iteration  24: 17885266.755 ops/s
Iteration  25: 17920393.222 ops/s
Iteration  26: 17953475.290 ops/s
Iteration  27: 17960273.567 ops/s
Iteration  28: 17960171.904 ops/s
Iteration  29: 17910978.007 ops/s
Iteration  30: 17929686.105 ops/s


Result "org.eclipse.collections.api.factory.bag.MutableBagFactoryTest._Benchmark.benchmark_of":
  17936810.532 ±(99.9%) 28390.106 ops/s [Average]
  (min, avg, max) = (17843064.239, 17936810.532, 18010770.183), stdev = 42492.977
  CI (99.9%): [17908420.427, 17965200.638] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt         Score       Error  Units
MutableBagFactoryTest._Benchmark.benchmark_of  thrpt   30  17936810.532 ± 28390.106  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.api.factory.bag.MutableBagFactoryTest._Benchmark.benchmark_with$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.api.factory.bag.MutableBagFactoryTest._Benchmark.benchmark_with

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7582485.955 ops/s
# Warmup Iteration   2: 18102328.962 ops/s
# Warmup Iteration   3: 14829494.870 ops/s
# Warmup Iteration   4: 18053179.812 ops/s
# Warmup Iteration   5: 18041780.369 ops/s
# Warmup Iteration   6: 18027117.111 ops/s
# Warmup Iteration   7: 18080529.944 ops/s
# Warmup Iteration   8: 18033041.413 ops/s
# Warmup Iteration   9: 17985601.699 ops/s
# Warmup Iteration  10: 18033312.443 ops/s
# Warmup Iteration  11: 18072030.941 ops/s
# Warmup Iteration  12: 17968045.803 ops/s
# Warmup Iteration  13: 17960969.973 ops/s
# Warmup Iteration  14: 17997176.548 ops/s
# Warmup Iteration  15: 18008335.851 ops/s
# Warmup Iteration  16: 17974081.219 ops/s
# Warmup Iteration  17: 18085691.253 ops/s
# Warmup Iteration  18: 17970739.771 ops/s
# Warmup Iteration  19: 18034837.654 ops/s
# Warmup Iteration  20: 18063978.036 ops/s
# Warmup Iteration  21: 18092793.583 ops/s
# Warmup Iteration  22: 18042611.653 ops/s
# Warmup Iteration  23: 18039076.179 ops/s
# Warmup Iteration  24: 18117049.084 ops/s
# Warmup Iteration  25: 18070522.396 ops/s
# Warmup Iteration  26: 18030578.734 ops/s
# Warmup Iteration  27: 18062349.659 ops/s
# Warmup Iteration  28: 18118909.150 ops/s
# Warmup Iteration  29: 18083450.819 ops/s
# Warmup Iteration  30: 18072896.460 ops/s
Iteration   1: 18107756.194 ops/s
Iteration   2: 18102631.709 ops/s
Iteration   3: 18061243.510 ops/s
Iteration   4: 18062973.853 ops/s
Iteration   5: 18021894.020 ops/s
Iteration   6: 18081557.968 ops/s
Iteration   7: 18106290.648 ops/s
Iteration   8: 18020057.837 ops/s
Iteration   9: 18086121.387 ops/s
Iteration  10: 18045931.602 ops/s
Iteration  11: 18099632.127 ops/s
Iteration  12: 18081968.357 ops/s
Iteration  13: 18055731.438 ops/s
Iteration  14: 18066773.045 ops/s
Iteration  15: 18074199.854 ops/s
Iteration  16: 18037967.451 ops/s
Iteration  17: 18062253.287 ops/s
Iteration  18: 18036109.965 ops/s
Iteration  19: 18002752.597 ops/s
Iteration  20: 17936008.306 ops/s
Iteration  21: 18039196.640 ops/s
Iteration  22: 17967355.017 ops/s
Iteration  23: 18018698.982 ops/s
Iteration  24: 18064026.738 ops/s
Iteration  25: 18040919.098 ops/s
Iteration  26: 18086597.612 ops/s
Iteration  27: 18016436.550 ops/s
Iteration  28: 18044445.830 ops/s
Iteration  29: 18078535.015 ops/s
Iteration  30: 17957949.000 ops/s


Result "org.eclipse.collections.api.factory.bag.MutableBagFactoryTest._Benchmark.benchmark_with":
  18048800.521 ±(99.9%) 28728.438 ops/s [Average]
  (min, avg, max) = (17936008.306, 18048800.521, 18107756.194), stdev = 42999.377
  CI (99.9%): [18020072.083, 18077528.959] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt         Score       Error  Units
MutableBagFactoryTest._Benchmark.benchmark_with  thrpt   30  18048800.521 ± 28728.438  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 703036.978 ops/s
# Warmup Iteration   2: 733966.879 ops/s
# Warmup Iteration   3: 930007.016 ops/s
# Warmup Iteration   4: 967555.943 ops/s
# Warmup Iteration   5: 963829.685 ops/s
# Warmup Iteration   6: 966457.009 ops/s
# Warmup Iteration   7: 967553.445 ops/s
# Warmup Iteration   8: 965867.198 ops/s
# Warmup Iteration   9: 967534.101 ops/s
# Warmup Iteration  10: 967702.045 ops/s
# Warmup Iteration  11: 964203.314 ops/s
# Warmup Iteration  12: 902705.525 ops/s
# Warmup Iteration  13: 870638.295 ops/s
# Warmup Iteration  14: 962326.029 ops/s
# Warmup Iteration  15: 962526.003 ops/s
# Warmup Iteration  16: 961433.878 ops/s
# Warmup Iteration  17: 1022061.066 ops/s
# Warmup Iteration  18: 1019781.493 ops/s
# Warmup Iteration  19: 1015958.422 ops/s
# Warmup Iteration  20: 1020261.145 ops/s
# Warmup Iteration  21: 1017685.663 ops/s
# Warmup Iteration  22: 1018875.045 ops/s
# Warmup Iteration  23: 1020461.916 ops/s
# Warmup Iteration  24: 1018843.053 ops/s
# Warmup Iteration  25: 1014587.572 ops/s
# Warmup Iteration  26: 1017322.457 ops/s
# Warmup Iteration  27: 1019292.059 ops/s
# Warmup Iteration  28: 1022376.695 ops/s
# Warmup Iteration  29: 1021439.457 ops/s
# Warmup Iteration  30: 1021468.690 ops/s
Iteration   1: 1023549.495 ops/s
Iteration   2: 1019602.284 ops/s
Iteration   3: 1022042.528 ops/s
Iteration   4: 1024322.709 ops/s
Iteration   5: 1024632.300 ops/s
Iteration   6: 1021058.403 ops/s
Iteration   7: 1015466.219 ops/s
Iteration   8: 1024732.279 ops/s
Iteration   9: 1021806.830 ops/s
Iteration  10: 1021858.217 ops/s
Iteration  11: 1022972.408 ops/s
Iteration  12: 1017688.150 ops/s
Iteration  13: 1024130.085 ops/s
Iteration  14: 1020123.482 ops/s
Iteration  15: 1023471.418 ops/s
Iteration  16: 1024679.271 ops/s
Iteration  17: 1022435.841 ops/s
Iteration  18: 1019217.726 ops/s
Iteration  19: 1017753.864 ops/s
Iteration  20: 1023152.714 ops/s
Iteration  21: 1022187.610 ops/s
Iteration  22: 1019113.254 ops/s
Iteration  23: 1022679.111 ops/s
Iteration  24: 1017523.678 ops/s
Iteration  25: 1026120.458 ops/s
Iteration  26: 1023438.891 ops/s
Iteration  27: 1013411.340 ops/s
Iteration  28: 1018626.482 ops/s
Iteration  29: 1021112.410 ops/s
Iteration  30: 1023102.233 ops/s


Result "org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_add":
  1021400.390 ±(99.9%) 2000.814 ops/s [Average]
  (min, avg, max) = (1013411.340, 1021400.390, 1026120.458), stdev = 2994.724
  CI (99.9%): [1019399.576, 1023401.203] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
UnmodifiableMapEntrySetTest._Benchmark.benchmark_add  thrpt   30  1021400.390 ± 2000.814  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_addAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_addAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 58294.225 ops/s
# Warmup Iteration   2: 56154.378 ops/s
# Warmup Iteration   3: 56270.274 ops/s
# Warmup Iteration   4: 56000.160 ops/s
# Warmup Iteration   5: 56344.382 ops/s
# Warmup Iteration   6: 56204.846 ops/s
# Warmup Iteration   7: 56228.941 ops/s
# Warmup Iteration   8: 56192.192 ops/s
# Warmup Iteration   9: 56317.378 ops/s
# Warmup Iteration  10: 56074.558 ops/s
# Warmup Iteration  11: 56037.440 ops/s
# Warmup Iteration  12: 56083.438 ops/s
# Warmup Iteration  13: 56082.049 ops/s
# Warmup Iteration  14: 56100.311 ops/s
# Warmup Iteration  15: 56303.656 ops/s
# Warmup Iteration  16: 55943.192 ops/s
# Warmup Iteration  17: 56579.114 ops/s
# Warmup Iteration  18: 56613.083 ops/s
# Warmup Iteration  19: 56757.622 ops/s
# Warmup Iteration  20: 56628.192 ops/s
# Warmup Iteration  21: 56355.421 ops/s
# Warmup Iteration  22: 56599.822 ops/s
# Warmup Iteration  23: 56385.920 ops/s
# Warmup Iteration  24: 56646.709 ops/s
# Warmup Iteration  25: 56420.669 ops/s
# Warmup Iteration  26: 56259.600 ops/s
# Warmup Iteration  27: 57034.697 ops/s
# Warmup Iteration  28: 57371.655 ops/s
# Warmup Iteration  29: 57374.785 ops/s
# Warmup Iteration  30: 57281.575 ops/s
Iteration   1: 57468.691 ops/s
Iteration   2: 57400.836 ops/s
Iteration   3: 57832.950 ops/s
Iteration   4: 57878.349 ops/s
Iteration   5: 57319.779 ops/s
Iteration   6: 57195.499 ops/s
Iteration   7: 57229.010 ops/s
Iteration   8: 57472.239 ops/s
Iteration   9: 57405.814 ops/s
Iteration  10: 57519.620 ops/s
Iteration  11: 57478.931 ops/s
Iteration  12: 57223.268 ops/s
Iteration  13: 57322.990 ops/s
Iteration  14: 57735.853 ops/s
Iteration  15: 57579.095 ops/s
Iteration  16: 57513.660 ops/s
Iteration  17: 57547.612 ops/s
Iteration  18: 57587.383 ops/s
Iteration  19: 57105.472 ops/s
Iteration  20: 57375.340 ops/s
Iteration  21: 57561.532 ops/s
Iteration  22: 57331.325 ops/s
Iteration  23: 57223.220 ops/s
Iteration  24: 57322.170 ops/s
Iteration  25: 57585.953 ops/s
Iteration  26: 57275.741 ops/s
Iteration  27: 57447.569 ops/s
Iteration  28: 57359.185 ops/s
Iteration  29: 57108.606 ops/s
Iteration  30: 57288.791 ops/s


Result "org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_addAll":
  57423.216 ±(99.9%) 128.133 ops/s [Average]
  (min, avg, max) = (57105.472, 57423.216, 57878.349), stdev = 191.784
  CI (99.9%): [57295.083, 57551.349] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt      Score     Error  Units
UnmodifiableMapEntrySetTest._Benchmark.benchmark_addAll  thrpt   30  57423.216 ± 128.133  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_addAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_addAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 714898.600 ops/s
# Warmup Iteration   2: 752092.339 ops/s
# Warmup Iteration   3: 968286.255 ops/s
# Warmup Iteration   4: 987922.367 ops/s
# Warmup Iteration   5: 989948.689 ops/s
# Warmup Iteration   6: 985423.380 ops/s
# Warmup Iteration   7: 987984.922 ops/s
# Warmup Iteration   8: 988116.280 ops/s
# Warmup Iteration   9: 987564.773 ops/s
# Warmup Iteration  10: 985139.693 ops/s
# Warmup Iteration  11: 991249.572 ops/s
# Warmup Iteration  12: 859307.191 ops/s
# Warmup Iteration  13: 958491.988 ops/s
# Warmup Iteration  14: 990513.252 ops/s
# Warmup Iteration  15: 988549.237 ops/s
# Warmup Iteration  16: 986991.619 ops/s
# Warmup Iteration  17: 1042017.776 ops/s
# Warmup Iteration  18: 1048632.056 ops/s
# Warmup Iteration  19: 1044692.098 ops/s
# Warmup Iteration  20: 1048836.756 ops/s
# Warmup Iteration  21: 1046627.205 ops/s
# Warmup Iteration  22: 1048780.388 ops/s
# Warmup Iteration  23: 1047201.505 ops/s
# Warmup Iteration  24: 1045632.859 ops/s
# Warmup Iteration  25: 1049597.111 ops/s
# Warmup Iteration  26: 1049541.034 ops/s
# Warmup Iteration  27: 1051148.244 ops/s
# Warmup Iteration  28: 1043483.741 ops/s
# Warmup Iteration  29: 1045580.500 ops/s
# Warmup Iteration  30: 1051756.447 ops/s
Iteration   1: 1047569.940 ops/s
Iteration   2: 1040730.596 ops/s
Iteration   3: 1048023.432 ops/s
Iteration   4: 1047500.720 ops/s
Iteration   5: 1045035.159 ops/s
Iteration   6: 1048713.053 ops/s
Iteration   7: 1047306.293 ops/s
Iteration   8: 1053034.539 ops/s
Iteration   9: 1047027.677 ops/s
Iteration  10: 1048343.896 ops/s
Iteration  11: 1049276.060 ops/s
Iteration  12: 1051346.568 ops/s
Iteration  13: 1046144.310 ops/s
Iteration  14: 1042736.169 ops/s
Iteration  15: 1050493.001 ops/s
Iteration  16: 1047743.795 ops/s
Iteration  17: 1045961.302 ops/s
Iteration  18: 1044685.624 ops/s
Iteration  19: 1046952.090 ops/s
Iteration  20: 1045502.137 ops/s
Iteration  21: 1046457.598 ops/s
Iteration  22: 1047153.966 ops/s
Iteration  23: 1047199.803 ops/s
Iteration  24: 1039696.364 ops/s
Iteration  25: 1049914.661 ops/s
Iteration  26: 1042471.795 ops/s
Iteration  27: 1048617.737 ops/s
Iteration  28: 1050717.677 ops/s
Iteration  29: 1046748.956 ops/s
Iteration  30: 1045286.201 ops/s


Result "org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_addAllIterable":
  1046946.371 ±(99.9%) 1971.484 ops/s [Average]
  (min, avg, max) = (1039696.364, 1046946.371, 1053034.539), stdev = 2950.825
  CI (99.9%): [1044974.887, 1048917.855] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
UnmodifiableMapEntrySetTest._Benchmark.benchmark_addAllIterable  thrpt   30  1046946.371 ± 1971.484  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 704312.140 ops/s
# Warmup Iteration   2: 738126.195 ops/s
# Warmup Iteration   3: 933788.821 ops/s
# Warmup Iteration   4: 969733.270 ops/s
# Warmup Iteration   5: 966880.260 ops/s
# Warmup Iteration   6: 964192.093 ops/s
# Warmup Iteration   7: 966854.976 ops/s
# Warmup Iteration   8: 972322.244 ops/s
# Warmup Iteration   9: 968945.367 ops/s
# Warmup Iteration  10: 969990.269 ops/s
# Warmup Iteration  11: 970187.442 ops/s
# Warmup Iteration  12: 895865.151 ops/s
# Warmup Iteration  13: 884019.517 ops/s
# Warmup Iteration  14: 973210.463 ops/s
# Warmup Iteration  15: 968993.224 ops/s
# Warmup Iteration  16: 971949.902 ops/s
# Warmup Iteration  17: 1026278.550 ops/s
# Warmup Iteration  18: 1026693.162 ops/s
# Warmup Iteration  19: 1029124.698 ops/s
# Warmup Iteration  20: 1030240.820 ops/s
# Warmup Iteration  21: 1029846.946 ops/s
# Warmup Iteration  22: 1026574.167 ops/s
# Warmup Iteration  23: 1026792.166 ops/s
# Warmup Iteration  24: 1030453.853 ops/s
# Warmup Iteration  25: 1023962.505 ops/s
# Warmup Iteration  26: 1025809.617 ops/s
# Warmup Iteration  27: 1024775.981 ops/s
# Warmup Iteration  28: 1022398.860 ops/s
# Warmup Iteration  29: 1018081.088 ops/s
# Warmup Iteration  30: 1028350.543 ops/s
Iteration   1: 1017003.190 ops/s
Iteration   2: 1018388.045 ops/s
Iteration   3: 1024647.259 ops/s
Iteration   4: 1025616.717 ops/s
Iteration   5: 1028558.338 ops/s
Iteration   6: 1027757.286 ops/s
Iteration   7: 1031521.608 ops/s
Iteration   8: 1027597.340 ops/s
Iteration   9: 1027714.363 ops/s
Iteration  10: 1028144.598 ops/s
Iteration  11: 1027751.831 ops/s
Iteration  12: 1018267.652 ops/s
Iteration  13: 1028036.317 ops/s
Iteration  14: 1024474.094 ops/s
Iteration  15: 1025200.047 ops/s
Iteration  16: 1020985.201 ops/s
Iteration  17: 1030732.102 ops/s
Iteration  18: 1029257.667 ops/s
Iteration  19: 1030157.027 ops/s
Iteration  20: 1029566.403 ops/s
Iteration  21: 1025432.484 ops/s
Iteration  22: 1023432.961 ops/s
Iteration  23: 1025892.406 ops/s
Iteration  24: 1030985.231 ops/s
Iteration  25: 1027764.043 ops/s
Iteration  26: 1026798.165 ops/s
Iteration  27: 1026189.261 ops/s
Iteration  28: 1031468.524 ops/s
Iteration  29: 1027399.243 ops/s
Iteration  30: 1025844.020 ops/s


Result "org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_clear":
  1026419.447 ±(99.9%) 2516.323 ops/s [Average]
  (min, avg, max) = (1017003.190, 1026419.447, 1031521.608), stdev = 3766.313
  CI (99.9%): [1023903.125, 1028935.770] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
UnmodifiableMapEntrySetTest._Benchmark.benchmark_clear  thrpt   30  1026419.447 ± 2516.323  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 809000.936 ops/s
# Warmup Iteration   2: 1719687.855 ops/s
# Warmup Iteration   3: 1805045.242 ops/s
# Warmup Iteration   4: 1806959.275 ops/s
# Warmup Iteration   5: 1513411.016 ops/s
# Warmup Iteration   6: 1812311.099 ops/s
# Warmup Iteration   7: 1810156.534 ops/s
# Warmup Iteration   8: 1809966.613 ops/s
# Warmup Iteration   9: 1811707.026 ops/s
# Warmup Iteration  10: 1807809.317 ops/s
# Warmup Iteration  11: 1808101.535 ops/s
# Warmup Iteration  12: 1805243.468 ops/s
# Warmup Iteration  13: 1802900.144 ops/s
# Warmup Iteration  14: 1809041.485 ops/s
# Warmup Iteration  15: 1804238.883 ops/s
# Warmup Iteration  16: 1812680.387 ops/s
# Warmup Iteration  17: 1813337.987 ops/s
# Warmup Iteration  18: 1801682.792 ops/s
# Warmup Iteration  19: 1806210.799 ops/s
# Warmup Iteration  20: 1808936.723 ops/s
# Warmup Iteration  21: 1810165.055 ops/s
# Warmup Iteration  22: 1811728.874 ops/s
# Warmup Iteration  23: 1812953.176 ops/s
# Warmup Iteration  24: 1810561.232 ops/s
# Warmup Iteration  25: 1805501.236 ops/s
# Warmup Iteration  26: 1807986.480 ops/s
# Warmup Iteration  27: 1810207.278 ops/s
# Warmup Iteration  28: 1813287.175 ops/s
# Warmup Iteration  29: 1806269.177 ops/s
# Warmup Iteration  30: 1805823.101 ops/s
Iteration   1: 1809348.736 ops/s
Iteration   2: 1808015.822 ops/s
Iteration   3: 1809176.472 ops/s
Iteration   4: 1806757.080 ops/s
Iteration   5: 1794287.342 ops/s
Iteration   6: 1808309.305 ops/s
Iteration   7: 1814345.797 ops/s
Iteration   8: 1805206.891 ops/s
Iteration   9: 1809678.945 ops/s
Iteration  10: 1815947.741 ops/s
Iteration  11: 1813433.890 ops/s
Iteration  12: 1815304.644 ops/s
Iteration  13: 1814774.379 ops/s
Iteration  14: 1806936.265 ops/s
Iteration  15: 1813087.696 ops/s
Iteration  16: 1813096.384 ops/s
Iteration  17: 1811010.055 ops/s
Iteration  18: 1814486.448 ops/s
Iteration  19: 1801692.550 ops/s
Iteration  20: 1808956.599 ops/s
Iteration  21: 1795586.465 ops/s
Iteration  22: 1808984.431 ops/s
Iteration  23: 1814509.051 ops/s
Iteration  24: 1814937.734 ops/s
Iteration  25: 1812089.699 ops/s
Iteration  26: 1795347.810 ops/s
Iteration  27: 1813919.248 ops/s
Iteration  28: 1785299.074 ops/s
Iteration  29: 1785371.845 ops/s
Iteration  30: 1796521.479 ops/s


Result "org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_collect":
  1807213.996 ±(99.9%) 5790.722 ops/s [Average]
  (min, avg, max) = (1785299.074, 1807213.996, 1815947.741), stdev = 8667.280
  CI (99.9%): [1801423.274, 1813004.718] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
UnmodifiableMapEntrySetTest._Benchmark.benchmark_collect  thrpt   30  1807213.996 ± 5790.722  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_collectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_collectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3195465.948 ops/s
# Warmup Iteration   2: 6324961.710 ops/s
# Warmup Iteration   3: 6655036.208 ops/s
# Warmup Iteration   4: 6698340.224 ops/s
# Warmup Iteration   5: 5608808.955 ops/s
# Warmup Iteration   6: 6708271.411 ops/s
# Warmup Iteration   7: 6714460.705 ops/s
# Warmup Iteration   8: 6710083.163 ops/s
# Warmup Iteration   9: 6719173.081 ops/s
# Warmup Iteration  10: 6709599.949 ops/s
# Warmup Iteration  11: 6714662.434 ops/s
# Warmup Iteration  12: 6697810.551 ops/s
# Warmup Iteration  13: 6707890.341 ops/s
# Warmup Iteration  14: 6696549.807 ops/s
# Warmup Iteration  15: 6713752.872 ops/s
# Warmup Iteration  16: 6698236.877 ops/s
# Warmup Iteration  17: 6705731.544 ops/s
# Warmup Iteration  18: 6690187.062 ops/s
# Warmup Iteration  19: 6702329.702 ops/s
# Warmup Iteration  20: 6703784.232 ops/s
# Warmup Iteration  21: 6698371.171 ops/s
# Warmup Iteration  22: 6717798.683 ops/s
# Warmup Iteration  23: 6715032.759 ops/s
# Warmup Iteration  24: 6694720.963 ops/s
# Warmup Iteration  25: 6721105.478 ops/s
# Warmup Iteration  26: 6709963.460 ops/s
# Warmup Iteration  27: 6696013.784 ops/s
# Warmup Iteration  28: 6717752.599 ops/s
# Warmup Iteration  29: 6698549.404 ops/s
# Warmup Iteration  30: 6690471.532 ops/s
Iteration   1: 6713033.560 ops/s
Iteration   2: 6726177.171 ops/s
Iteration   3: 6712853.229 ops/s
Iteration   4: 6697689.157 ops/s
Iteration   5: 6728562.888 ops/s
Iteration   6: 6718897.171 ops/s
Iteration   7: 6713795.721 ops/s
Iteration   8: 6724361.321 ops/s
Iteration   9: 6717496.984 ops/s
Iteration  10: 6717158.723 ops/s
Iteration  11: 6727993.933 ops/s
Iteration  12: 6714677.078 ops/s
Iteration  13: 6723706.916 ops/s
Iteration  14: 6727875.941 ops/s
Iteration  15: 6699341.651 ops/s
Iteration  16: 6633686.679 ops/s
Iteration  17: 6716258.174 ops/s
Iteration  18: 6699254.401 ops/s
Iteration  19: 6706952.996 ops/s
Iteration  20: 6712027.340 ops/s
Iteration  21: 6692807.484 ops/s
Iteration  22: 6706597.741 ops/s
Iteration  23: 6719349.014 ops/s
Iteration  24: 6738575.699 ops/s
Iteration  25: 6715111.732 ops/s
Iteration  26: 6708709.319 ops/s
Iteration  27: 6737105.685 ops/s
Iteration  28: 6723704.494 ops/s
Iteration  29: 6682854.775 ops/s
Iteration  30: 6693171.506 ops/s


Result "org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_collectBoolean":
  6711659.616 ±(99.9%) 13153.147 ops/s [Average]
  (min, avg, max) = (6633686.679, 6711659.616, 6738575.699), stdev = 19687.013
  CI (99.9%): [6698506.469, 6724812.763] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
UnmodifiableMapEntrySetTest._Benchmark.benchmark_collectBoolean  thrpt   30  6711659.616 ± 13153.147  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_collectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_collectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1326735.860 ops/s
# Warmup Iteration   2: 1481402.631 ops/s
# Warmup Iteration   3: 1955747.126 ops/s
# Warmup Iteration   4: 1946216.417 ops/s
# Warmup Iteration   5: 1940030.192 ops/s
# Warmup Iteration   6: 1946557.331 ops/s
# Warmup Iteration   7: 1946746.317 ops/s
# Warmup Iteration   8: 1952917.749 ops/s
# Warmup Iteration   9: 1946201.029 ops/s
# Warmup Iteration  10: 1950906.841 ops/s
# Warmup Iteration  11: 1627988.227 ops/s
# Warmup Iteration  12: 1951068.477 ops/s
# Warmup Iteration  13: 1957620.211 ops/s
# Warmup Iteration  14: 1953779.101 ops/s
# Warmup Iteration  15: 1956366.555 ops/s
# Warmup Iteration  16: 1958007.289 ops/s
# Warmup Iteration  17: 1947459.857 ops/s
# Warmup Iteration  18: 1955870.993 ops/s
# Warmup Iteration  19: 1950247.833 ops/s
# Warmup Iteration  20: 1951248.540 ops/s
# Warmup Iteration  21: 1952903.195 ops/s
# Warmup Iteration  22: 1952257.592 ops/s
# Warmup Iteration  23: 1950795.161 ops/s
# Warmup Iteration  24: 1954851.412 ops/s
# Warmup Iteration  25: 1951944.658 ops/s
# Warmup Iteration  26: 1950424.595 ops/s
# Warmup Iteration  27: 1943341.969 ops/s
# Warmup Iteration  28: 1951735.961 ops/s
# Warmup Iteration  29: 1950461.491 ops/s
# Warmup Iteration  30: 1943036.001 ops/s
Iteration   1: 1954708.482 ops/s
Iteration   2: 1949481.227 ops/s
Iteration   3: 1952554.611 ops/s
Iteration   4: 1949796.077 ops/s
Iteration   5: 1930016.658 ops/s
Iteration   6: 1943223.810 ops/s
Iteration   7: 1941650.059 ops/s
Iteration   8: 1946411.012 ops/s
Iteration   9: 1939624.387 ops/s
Iteration  10: 1950422.633 ops/s
Iteration  11: 1944007.742 ops/s
Iteration  12: 1950181.721 ops/s
Iteration  13: 1952209.025 ops/s
Iteration  14: 1946813.636 ops/s
Iteration  15: 1946356.686 ops/s
Iteration  16: 1937045.960 ops/s
Iteration  17: 1951749.941 ops/s
Iteration  18: 1952036.780 ops/s
Iteration  19: 1955540.631 ops/s
Iteration  20: 1952894.783 ops/s
Iteration  21: 1956317.845 ops/s
Iteration  22: 1954711.914 ops/s
Iteration  23: 1956574.102 ops/s
Iteration  24: 1953164.617 ops/s
Iteration  25: 1958044.731 ops/s
Iteration  26: 1957149.576 ops/s
Iteration  27: 1952376.090 ops/s
Iteration  28: 1953284.665 ops/s
Iteration  29: 1957935.794 ops/s
Iteration  30: 1958532.441 ops/s


Result "org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_collectByte":
  1950160.588 ±(99.9%) 4517.175 ops/s [Average]
  (min, avg, max) = (1930016.658, 1950160.588, 1958532.441), stdev = 6761.096
  CI (99.9%): [1945643.413, 1954677.763] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
UnmodifiableMapEntrySetTest._Benchmark.benchmark_collectByte  thrpt   30  1950160.588 ± 4517.175  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_collectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_collectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2230524.703 ops/s
# Warmup Iteration   2: 5248516.901 ops/s
# Warmup Iteration   3: 5328997.754 ops/s
# Warmup Iteration   4: 4419458.472 ops/s
# Warmup Iteration   5: 5327771.217 ops/s
# Warmup Iteration   6: 5324710.214 ops/s
# Warmup Iteration   7: 5318152.145 ops/s
# Warmup Iteration   8: 5308180.516 ops/s
# Warmup Iteration   9: 5325524.560 ops/s
# Warmup Iteration  10: 5302156.750 ops/s
# Warmup Iteration  11: 5293232.103 ops/s
# Warmup Iteration  12: 5298459.344 ops/s
# Warmup Iteration  13: 5324581.488 ops/s
# Warmup Iteration  14: 5320191.100 ops/s
# Warmup Iteration  15: 5297277.832 ops/s
# Warmup Iteration  16: 5324016.085 ops/s
# Warmup Iteration  17: 5325444.073 ops/s
# Warmup Iteration  18: 5313316.431 ops/s
# Warmup Iteration  19: 5294174.023 ops/s
# Warmup Iteration  20: 5320181.964 ops/s
# Warmup Iteration  21: 5308231.238 ops/s
# Warmup Iteration  22: 5319782.537 ops/s
# Warmup Iteration  23: 5316358.754 ops/s
# Warmup Iteration  24: 5295261.280 ops/s
# Warmup Iteration  25: 5308416.394 ops/s
# Warmup Iteration  26: 5323353.888 ops/s
# Warmup Iteration  27: 5335997.271 ops/s
# Warmup Iteration  28: 5314758.927 ops/s
# Warmup Iteration  29: 5315177.756 ops/s
# Warmup Iteration  30: 5335238.601 ops/s
Iteration   1: 5337044.048 ops/s
Iteration   2: 5327325.929 ops/s
Iteration   3: 5300974.767 ops/s
Iteration   4: 5336356.215 ops/s
Iteration   5: 5327145.562 ops/s
Iteration   6: 5326718.743 ops/s
Iteration   7: 5318029.596 ops/s
Iteration   8: 5328269.709 ops/s
Iteration   9: 5306008.292 ops/s
Iteration  10: 5327598.735 ops/s
Iteration  11: 5329243.439 ops/s
Iteration  12: 5325411.062 ops/s
Iteration  13: 5292298.765 ops/s
Iteration  14: 5320391.522 ops/s
Iteration  15: 5325870.280 ops/s
Iteration  16: 5310577.255 ops/s
Iteration  17: 5333969.624 ops/s
Iteration  18: 5351885.011 ops/s
Iteration  19: 5328578.591 ops/s
Iteration  20: 5325157.235 ops/s
Iteration  21: 5309085.899 ops/s
Iteration  22: 5313622.946 ops/s
Iteration  23: 5320491.197 ops/s
Iteration  24: 5330636.222 ops/s
Iteration  25: 5331871.779 ops/s
Iteration  26: 5283724.136 ops/s
Iteration  27: 5322943.329 ops/s
Iteration  28: 5331977.868 ops/s
Iteration  29: 5317760.997 ops/s
Iteration  30: 5307430.345 ops/s


Result "org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_collectChar":
  5321613.303 ±(99.9%) 9350.453 ops/s [Average]
  (min, avg, max) = (5283724.136, 5321613.303, 5351885.011), stdev = 13995.319
  CI (99.9%): [5312262.850, 5330963.757] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
UnmodifiableMapEntrySetTest._Benchmark.benchmark_collectChar  thrpt   30  5321613.303 ± 9350.453  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_collectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_collectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1330232.311 ops/s
# Warmup Iteration   2: 3419289.613 ops/s
# Warmup Iteration   3: 3410540.862 ops/s
# Warmup Iteration   4: 2823370.593 ops/s
# Warmup Iteration   5: 3421231.924 ops/s
# Warmup Iteration   6: 3405960.424 ops/s
# Warmup Iteration   7: 3412207.419 ops/s
# Warmup Iteration   8: 3413464.701 ops/s
# Warmup Iteration   9: 3422562.149 ops/s
# Warmup Iteration  10: 3411820.145 ops/s
# Warmup Iteration  11: 3419997.991 ops/s
# Warmup Iteration  12: 3411305.038 ops/s
# Warmup Iteration  13: 3421398.557 ops/s
# Warmup Iteration  14: 3405337.755 ops/s
# Warmup Iteration  15: 3421080.250 ops/s
# Warmup Iteration  16: 3419668.131 ops/s
# Warmup Iteration  17: 3413968.021 ops/s
# Warmup Iteration  18: 3409717.703 ops/s
# Warmup Iteration  19: 3403357.909 ops/s
# Warmup Iteration  20: 3396530.004 ops/s
# Warmup Iteration  21: 3417860.790 ops/s
# Warmup Iteration  22: 3413642.309 ops/s
# Warmup Iteration  23: 3420753.515 ops/s
# Warmup Iteration  24: 3409899.592 ops/s
# Warmup Iteration  25: 3416556.438 ops/s
# Warmup Iteration  26: 3409474.171 ops/s
# Warmup Iteration  27: 3407541.488 ops/s
# Warmup Iteration  28: 3411979.288 ops/s
# Warmup Iteration  29: 3421934.243 ops/s
# Warmup Iteration  30: 3415151.159 ops/s
Iteration   1: 3406761.123 ops/s
Iteration   2: 3418833.534 ops/s
Iteration   3: 3396741.731 ops/s
Iteration   4: 3401223.514 ops/s
Iteration   5: 3404758.590 ops/s
Iteration   6: 3424218.987 ops/s
Iteration   7: 3420068.941 ops/s
Iteration   8: 3416066.761 ops/s
Iteration   9: 3408155.415 ops/s
Iteration  10: 3416643.331 ops/s
Iteration  11: 3421917.413 ops/s
Iteration  12: 3410273.524 ops/s
Iteration  13: 3417116.748 ops/s
Iteration  14: 3409468.080 ops/s
Iteration  15: 3423689.219 ops/s
Iteration  16: 3421770.195 ops/s
Iteration  17: 3372432.724 ops/s
Iteration  18: 3410295.484 ops/s
Iteration  19: 3411557.240 ops/s
Iteration  20: 3413689.125 ops/s
Iteration  21: 3416874.022 ops/s
Iteration  22: 3423000.111 ops/s
Iteration  23: 3416943.778 ops/s
Iteration  24: 3413688.047 ops/s
Iteration  25: 3420582.125 ops/s
Iteration  26: 3414380.950 ops/s
Iteration  27: 3425391.640 ops/s
Iteration  28: 3420320.393 ops/s
Iteration  29: 3405765.711 ops/s
Iteration  30: 3410861.141 ops/s


Result "org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_collectDouble":
  3413116.320 ±(99.9%) 6999.622 ops/s [Average]
  (min, avg, max) = (3372432.724, 3413116.320, 3425391.640), stdev = 10476.706
  CI (99.9%): [3406116.697, 3420115.942] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
UnmodifiableMapEntrySetTest._Benchmark.benchmark_collectDouble  thrpt   30  3413116.320 ± 6999.622  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_collectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_collectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1592369.766 ops/s
# Warmup Iteration   2: 3790572.861 ops/s
# Warmup Iteration   3: 3893624.953 ops/s
# Warmup Iteration   4: 3206338.183 ops/s
# Warmup Iteration   5: 3884113.960 ops/s
# Warmup Iteration   6: 3908802.541 ops/s
# Warmup Iteration   7: 3901901.255 ops/s
# Warmup Iteration   8: 3913595.528 ops/s
# Warmup Iteration   9: 3908643.496 ops/s
# Warmup Iteration  10: 3903356.270 ops/s
# Warmup Iteration  11: 3889323.735 ops/s
# Warmup Iteration  12: 3898997.380 ops/s
# Warmup Iteration  13: 3882025.637 ops/s
# Warmup Iteration  14: 3903555.867 ops/s
# Warmup Iteration  15: 3908243.260 ops/s
# Warmup Iteration  16: 3911360.951 ops/s
# Warmup Iteration  17: 3887256.974 ops/s
# Warmup Iteration  18: 3910647.540 ops/s
# Warmup Iteration  19: 3900825.534 ops/s
# Warmup Iteration  20: 3913694.590 ops/s
# Warmup Iteration  21: 3908578.002 ops/s
# Warmup Iteration  22: 3905458.750 ops/s
# Warmup Iteration  23: 3904835.743 ops/s
# Warmup Iteration  24: 3910509.996 ops/s
# Warmup Iteration  25: 3913865.109 ops/s
# Warmup Iteration  26: 3913499.856 ops/s
# Warmup Iteration  27: 3914759.114 ops/s
# Warmup Iteration  28: 3913312.284 ops/s
# Warmup Iteration  29: 3925980.252 ops/s
# Warmup Iteration  30: 3898537.120 ops/s
Iteration   1: 3902282.775 ops/s
Iteration   2: 3909520.879 ops/s
Iteration   3: 3915569.857 ops/s
Iteration   4: 3897679.867 ops/s
Iteration   5: 3897916.802 ops/s
Iteration   6: 3892286.510 ops/s
Iteration   7: 3916459.314 ops/s
Iteration   8: 3907941.633 ops/s
Iteration   9: 3919163.527 ops/s
Iteration  10: 3876633.808 ops/s
Iteration  11: 3907755.288 ops/s
Iteration  12: 3914476.370 ops/s
Iteration  13: 3884875.435 ops/s
Iteration  14: 3911946.899 ops/s
Iteration  15: 3911675.663 ops/s
Iteration  16: 3880156.162 ops/s
Iteration  17: 3909084.677 ops/s
Iteration  18: 3897580.593 ops/s
Iteration  19: 3906646.132 ops/s
Iteration  20: 3919585.279 ops/s
Iteration  21: 3911358.311 ops/s
Iteration  22: 3916827.500 ops/s
Iteration  23: 3886228.034 ops/s
Iteration  24: 3898928.036 ops/s
Iteration  25: 3915376.517 ops/s
Iteration  26: 3897583.707 ops/s
Iteration  27: 3872364.573 ops/s
Iteration  28: 3914847.377 ops/s
Iteration  29: 3894045.329 ops/s
Iteration  30: 3886582.877 ops/s


Result "org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_collectFloat":
  3902445.991 ±(99.9%) 8952.976 ops/s [Average]
  (min, avg, max) = (3872364.573, 3902445.991, 3919585.279), stdev = 13400.395
  CI (99.9%): [3893493.015, 3911398.967] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
UnmodifiableMapEntrySetTest._Benchmark.benchmark_collectFloat  thrpt   30  3902445.991 ± 8952.976  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_collectIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_collectIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 813006.004 ops/s
# Warmup Iteration   2: 1789146.234 ops/s
# Warmup Iteration   3: 1843921.156 ops/s
# Warmup Iteration   4: 1798325.377 ops/s
# Warmup Iteration   5: 1626103.622 ops/s
# Warmup Iteration   6: 1868217.796 ops/s
# Warmup Iteration   7: 1868853.558 ops/s
# Warmup Iteration   8: 1868916.422 ops/s
# Warmup Iteration   9: 1858396.039 ops/s
# Warmup Iteration  10: 1858665.138 ops/s
# Warmup Iteration  11: 1862622.299 ops/s
# Warmup Iteration  12: 1866178.248 ops/s
# Warmup Iteration  13: 1863884.796 ops/s
# Warmup Iteration  14: 1869056.031 ops/s
# Warmup Iteration  15: 1856729.958 ops/s
# Warmup Iteration  16: 1866106.993 ops/s
# Warmup Iteration  17: 1863703.033 ops/s
# Warmup Iteration  18: 1864187.323 ops/s
# Warmup Iteration  19: 1857694.603 ops/s
# Warmup Iteration  20: 1866738.993 ops/s
# Warmup Iteration  21: 1856801.999 ops/s
# Warmup Iteration  22: 1866161.202 ops/s
# Warmup Iteration  23: 1868042.618 ops/s
# Warmup Iteration  24: 1860079.032 ops/s
# Warmup Iteration  25: 1846026.285 ops/s
# Warmup Iteration  26: 1871093.251 ops/s
# Warmup Iteration  27: 1858283.015 ops/s
# Warmup Iteration  28: 1865654.460 ops/s
# Warmup Iteration  29: 1867906.988 ops/s
# Warmup Iteration  30: 1860149.451 ops/s
Iteration   1: 1856553.401 ops/s
Iteration   2: 1871490.149 ops/s
Iteration   3: 1865291.127 ops/s
Iteration   4: 1857115.376 ops/s
Iteration   5: 1863848.524 ops/s
Iteration   6: 1867923.657 ops/s
Iteration   7: 1861647.767 ops/s
Iteration   8: 1868595.863 ops/s
Iteration   9: 1867379.907 ops/s
Iteration  10: 1861966.607 ops/s
Iteration  11: 1872263.252 ops/s
Iteration  12: 1871815.445 ops/s
Iteration  13: 1869595.251 ops/s
Iteration  14: 1869478.452 ops/s
Iteration  15: 1866090.827 ops/s
Iteration  16: 1861044.708 ops/s
Iteration  17: 1869446.821 ops/s
Iteration  18: 1862815.724 ops/s
Iteration  19: 1869166.472 ops/s
Iteration  20: 1866865.637 ops/s
Iteration  21: 1861558.479 ops/s
Iteration  22: 1861196.492 ops/s
Iteration  23: 1871520.456 ops/s
Iteration  24: 1864803.113 ops/s
Iteration  25: 1874157.758 ops/s
Iteration  26: 1866647.546 ops/s
Iteration  27: 1862427.722 ops/s
Iteration  28: 1864328.859 ops/s
Iteration  29: 1867122.193 ops/s
Iteration  30: 1871171.339 ops/s


Result "org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_collectIf":
  1866177.631 ±(99.9%) 3015.378 ops/s [Average]
  (min, avg, max) = (1856553.401, 1866177.631, 1874157.758), stdev = 4513.276
  CI (99.9%): [1863162.253, 1869193.008] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
UnmodifiableMapEntrySetTest._Benchmark.benchmark_collectIf  thrpt   30  1866177.631 ± 3015.378  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_collectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_collectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2209522.453 ops/s
# Warmup Iteration   2: 5294493.044 ops/s
# Warmup Iteration   3: 5276927.100 ops/s
# Warmup Iteration   4: 4403722.430 ops/s
# Warmup Iteration   5: 5324652.648 ops/s
# Warmup Iteration   6: 5300792.919 ops/s
# Warmup Iteration   7: 5323129.705 ops/s
# Warmup Iteration   8: 5298532.853 ops/s
# Warmup Iteration   9: 5322736.350 ops/s
# Warmup Iteration  10: 5307782.264 ops/s
# Warmup Iteration  11: 5317637.946 ops/s
# Warmup Iteration  12: 5283762.645 ops/s
# Warmup Iteration  13: 5324925.856 ops/s
# Warmup Iteration  14: 5322493.288 ops/s
# Warmup Iteration  15: 5328043.854 ops/s
# Warmup Iteration  16: 5324612.033 ops/s
# Warmup Iteration  17: 5313699.765 ops/s
# Warmup Iteration  18: 5320277.157 ops/s
# Warmup Iteration  19: 5315744.094 ops/s
# Warmup Iteration  20: 5311752.298 ops/s
# Warmup Iteration  21: 5315137.955 ops/s
# Warmup Iteration  22: 5312275.347 ops/s
# Warmup Iteration  23: 5322768.544 ops/s
# Warmup Iteration  24: 5304121.798 ops/s
# Warmup Iteration  25: 5314725.527 ops/s
# Warmup Iteration  26: 5318315.810 ops/s
# Warmup Iteration  27: 5305038.097 ops/s
# Warmup Iteration  28: 5320825.408 ops/s
# Warmup Iteration  29: 5316305.854 ops/s
# Warmup Iteration  30: 5310991.321 ops/s
Iteration   1: 5321192.926 ops/s
Iteration   2: 5294891.640 ops/s
Iteration   3: 5322141.974 ops/s
Iteration   4: 5297001.504 ops/s
Iteration   5: 5317599.359 ops/s
Iteration   6: 5287698.769 ops/s
Iteration   7: 5288051.409 ops/s
Iteration   8: 5296232.261 ops/s
Iteration   9: 5316873.377 ops/s
Iteration  10: 5239585.724 ops/s
Iteration  11: 5311432.995 ops/s
Iteration  12: 5321984.016 ops/s
Iteration  13: 5313416.655 ops/s
Iteration  14: 5319343.742 ops/s
Iteration  15: 5309283.553 ops/s
Iteration  16: 5330886.816 ops/s
Iteration  17: 5266574.169 ops/s
Iteration  18: 5317520.387 ops/s
Iteration  19: 5288985.046 ops/s
Iteration  20: 5328761.777 ops/s
Iteration  21: 5330557.403 ops/s
Iteration  22: 5275453.623 ops/s
Iteration  23: 5328936.236 ops/s
Iteration  24: 5334126.176 ops/s
Iteration  25: 5322543.040 ops/s
Iteration  26: 5300906.256 ops/s
Iteration  27: 5336208.655 ops/s
Iteration  28: 5317360.223 ops/s
Iteration  29: 5310963.584 ops/s
Iteration  30: 5326990.100 ops/s


Result "org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_collectInt":
  5309116.780 ±(99.9%) 14744.039 ops/s [Average]
  (min, avg, max) = (5239585.724, 5309116.780, 5336208.655), stdev = 22068.185
  CI (99.9%): [5294372.741, 5323860.818] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
UnmodifiableMapEntrySetTest._Benchmark.benchmark_collectInt  thrpt   30  5309116.780 ± 14744.039  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_collectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_collectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1853811.492 ops/s
# Warmup Iteration   2: 4444183.629 ops/s
# Warmup Iteration   3: 4501101.520 ops/s
# Warmup Iteration   4: 3722575.947 ops/s
# Warmup Iteration   5: 4499452.110 ops/s
# Warmup Iteration   6: 4504562.390 ops/s
# Warmup Iteration   7: 4486872.059 ops/s
# Warmup Iteration   8: 4510689.166 ops/s
# Warmup Iteration   9: 4485255.987 ops/s
# Warmup Iteration  10: 4498487.702 ops/s
# Warmup Iteration  11: 4502769.480 ops/s
# Warmup Iteration  12: 4480061.808 ops/s
# Warmup Iteration  13: 4500365.403 ops/s
# Warmup Iteration  14: 4507503.863 ops/s
# Warmup Iteration  15: 4489638.272 ops/s
# Warmup Iteration  16: 4471605.065 ops/s
# Warmup Iteration  17: 4519505.634 ops/s
# Warmup Iteration  18: 4477748.289 ops/s
# Warmup Iteration  19: 4501799.037 ops/s
# Warmup Iteration  20: 4497797.980 ops/s
# Warmup Iteration  21: 4510350.510 ops/s
# Warmup Iteration  22: 4493937.174 ops/s
# Warmup Iteration  23: 4509366.274 ops/s
# Warmup Iteration  24: 4484338.516 ops/s
# Warmup Iteration  25: 4509626.672 ops/s
# Warmup Iteration  26: 4508336.629 ops/s
# Warmup Iteration  27: 4495601.742 ops/s
# Warmup Iteration  28: 4501454.927 ops/s
# Warmup Iteration  29: 4521323.644 ops/s
# Warmup Iteration  30: 4491521.273 ops/s
Iteration   1: 4484460.148 ops/s
Iteration   2: 4503006.763 ops/s
Iteration   3: 4515595.773 ops/s
Iteration   4: 4497521.652 ops/s
Iteration   5: 4494058.618 ops/s
Iteration   6: 4505625.299 ops/s
Iteration   7: 4501418.931 ops/s
Iteration   8: 4497690.855 ops/s
Iteration   9: 4498959.633 ops/s
Iteration  10: 4498054.280 ops/s
Iteration  11: 4510370.376 ops/s
Iteration  12: 4489341.343 ops/s
Iteration  13: 4500343.919 ops/s
Iteration  14: 4482247.241 ops/s
Iteration  15: 4494921.808 ops/s
Iteration  16: 4509077.724 ops/s
Iteration  17: 4474558.379 ops/s
Iteration  18: 4506146.028 ops/s
Iteration  19: 4490042.900 ops/s
Iteration  20: 4504206.192 ops/s
Iteration  21: 4496115.049 ops/s
Iteration  22: 4512024.041 ops/s
Iteration  23: 4532828.204 ops/s
Iteration  24: 4495551.236 ops/s
Iteration  25: 4481801.753 ops/s
Iteration  26: 4515286.164 ops/s
Iteration  27: 4501462.040 ops/s
Iteration  28: 4523655.562 ops/s
Iteration  29: 4516560.693 ops/s
Iteration  30: 4517427.000 ops/s


Result "org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_collectLong":
  4501678.653 ±(99.9%) 8686.978 ops/s [Average]
  (min, avg, max) = (4474558.379, 4501678.653, 4532828.204), stdev = 13002.260
  CI (99.9%): [4492991.676, 4510365.631] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
UnmodifiableMapEntrySetTest._Benchmark.benchmark_collectLong  thrpt   30  4501678.653 ± 8686.978  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_collectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_collectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2217035.832 ops/s
# Warmup Iteration   2: 5206974.384 ops/s
# Warmup Iteration   3: 5298165.801 ops/s
# Warmup Iteration   4: 4392419.328 ops/s
# Warmup Iteration   5: 5296891.195 ops/s
# Warmup Iteration   6: 5315920.921 ops/s
# Warmup Iteration   7: 5300139.248 ops/s
# Warmup Iteration   8: 5295133.913 ops/s
# Warmup Iteration   9: 5316238.573 ops/s
# Warmup Iteration  10: 5313817.421 ops/s
# Warmup Iteration  11: 5299051.517 ops/s
# Warmup Iteration  12: 5318038.464 ops/s
# Warmup Iteration  13: 5307613.143 ops/s
# Warmup Iteration  14: 5302918.218 ops/s
# Warmup Iteration  15: 5311961.977 ops/s
# Warmup Iteration  16: 5313001.801 ops/s
# Warmup Iteration  17: 5316484.529 ops/s
# Warmup Iteration  18: 5303960.851 ops/s
# Warmup Iteration  19: 5305761.411 ops/s
# Warmup Iteration  20: 5321789.152 ops/s
# Warmup Iteration  21: 5309194.029 ops/s
# Warmup Iteration  22: 5291495.577 ops/s
# Warmup Iteration  23: 5308928.051 ops/s
# Warmup Iteration  24: 5296170.931 ops/s
# Warmup Iteration  25: 5298850.127 ops/s
# Warmup Iteration  26: 5305508.827 ops/s
# Warmup Iteration  27: 5300348.654 ops/s
# Warmup Iteration  28: 5304842.503 ops/s
# Warmup Iteration  29: 5286730.953 ops/s
# Warmup Iteration  30: 5302807.801 ops/s
Iteration   1: 5288799.170 ops/s
Iteration   2: 5312334.270 ops/s
Iteration   3: 5302081.013 ops/s
Iteration   4: 5268741.017 ops/s
Iteration   5: 5307917.455 ops/s
Iteration   6: 5301299.870 ops/s
Iteration   7: 5290304.427 ops/s
Iteration   8: 5316111.102 ops/s
Iteration   9: 5303891.776 ops/s
Iteration  10: 5274878.925 ops/s
Iteration  11: 5266377.907 ops/s
Iteration  12: 5304826.954 ops/s
Iteration  13: 5292319.208 ops/s
Iteration  14: 5329216.970 ops/s
Iteration  15: 5316944.096 ops/s
Iteration  16: 5295152.363 ops/s
Iteration  17: 5326537.994 ops/s
Iteration  18: 5312022.452 ops/s
Iteration  19: 5303009.051 ops/s
Iteration  20: 5322391.945 ops/s
Iteration  21: 5320064.359 ops/s
Iteration  22: 5324967.569 ops/s
Iteration  23: 5305509.739 ops/s
Iteration  24: 5308924.570 ops/s
Iteration  25: 5288627.044 ops/s
Iteration  26: 5306331.815 ops/s
Iteration  27: 5298127.641 ops/s
Iteration  28: 5308421.266 ops/s
Iteration  29: 5308873.465 ops/s
Iteration  30: 5305478.562 ops/s


Result "org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_collectShort":
  5303682.800 ±(99.9%) 10484.173 ops/s [Average]
  (min, avg, max) = (5266377.907, 5303682.800, 5329216.970), stdev = 15692.217
  CI (99.9%): [5293198.627, 5314166.973] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
UnmodifiableMapEntrySetTest._Benchmark.benchmark_collectShort  thrpt   30  5303682.800 ± 10484.173  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_collectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_collectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 817218.131 ops/s
# Warmup Iteration   2: 1741818.048 ops/s
# Warmup Iteration   3: 1800733.615 ops/s
# Warmup Iteration   4: 1812180.649 ops/s
# Warmup Iteration   5: 1523168.680 ops/s
# Warmup Iteration   6: 1815659.514 ops/s
# Warmup Iteration   7: 1819450.355 ops/s
# Warmup Iteration   8: 1811079.578 ops/s
# Warmup Iteration   9: 1817007.257 ops/s
# Warmup Iteration  10: 1808190.282 ops/s
# Warmup Iteration  11: 1816199.648 ops/s
# Warmup Iteration  12: 1809827.620 ops/s
# Warmup Iteration  13: 1808318.071 ops/s
# Warmup Iteration  14: 1812497.900 ops/s
# Warmup Iteration  15: 1810912.908 ops/s
# Warmup Iteration  16: 1819074.759 ops/s
# Warmup Iteration  17: 1814269.605 ops/s
# Warmup Iteration  18: 1814622.869 ops/s
# Warmup Iteration  19: 1812543.901 ops/s
# Warmup Iteration  20: 1817602.898 ops/s
# Warmup Iteration  21: 1820252.939 ops/s
# Warmup Iteration  22: 1812105.111 ops/s
# Warmup Iteration  23: 1814906.945 ops/s
# Warmup Iteration  24: 1814632.832 ops/s
# Warmup Iteration  25: 1811896.704 ops/s
# Warmup Iteration  26: 1816762.297 ops/s
# Warmup Iteration  27: 1815235.805 ops/s
# Warmup Iteration  28: 1818607.674 ops/s
# Warmup Iteration  29: 1818995.437 ops/s
# Warmup Iteration  30: 1816715.325 ops/s
Iteration   1: 1800773.385 ops/s
Iteration   2: 1810900.493 ops/s
Iteration   3: 1812305.421 ops/s
Iteration   4: 1818077.478 ops/s
Iteration   5: 1817113.059 ops/s
Iteration   6: 1807337.498 ops/s
Iteration   7: 1816090.787 ops/s
Iteration   8: 1819589.434 ops/s
Iteration   9: 1817916.713 ops/s
Iteration  10: 1806282.002 ops/s
Iteration  11: 1816965.484 ops/s
Iteration  12: 1818207.120 ops/s
Iteration  13: 1814728.373 ops/s
Iteration  14: 1812578.505 ops/s
Iteration  15: 1811655.973 ops/s
Iteration  16: 1814446.302 ops/s
Iteration  17: 1808419.859 ops/s
Iteration  18: 1811266.642 ops/s
Iteration  19: 1821906.278 ops/s
Iteration  20: 1804476.938 ops/s
Iteration  21: 1798350.095 ops/s
Iteration  22: 1809236.583 ops/s
Iteration  23: 1818947.712 ops/s
Iteration  24: 1823183.573 ops/s
Iteration  25: 1801799.417 ops/s
Iteration  26: 1813588.251 ops/s
Iteration  27: 1810567.883 ops/s
Iteration  28: 1802791.763 ops/s
Iteration  29: 1801412.376 ops/s
Iteration  30: 1816667.419 ops/s


Result "org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_collectWith":
  1811919.427 ±(99.9%) 4462.478 ops/s [Average]
  (min, avg, max) = (1798350.095, 1811919.427, 1823183.573), stdev = 6679.227
  CI (99.9%): [1807456.949, 1816381.905] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
UnmodifiableMapEntrySetTest._Benchmark.benchmark_collectWith  thrpt   30  1811919.427 ± 4462.478  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2671667.257 ops/s
# Warmup Iteration   2: 5947729.933 ops/s
# Warmup Iteration   3: 4959502.823 ops/s
# Warmup Iteration   4: 5955833.496 ops/s
# Warmup Iteration   5: 5932213.061 ops/s
# Warmup Iteration   6: 5947725.425 ops/s
# Warmup Iteration   7: 5933759.632 ops/s
# Warmup Iteration   8: 5955971.126 ops/s
# Warmup Iteration   9: 5963493.523 ops/s
# Warmup Iteration  10: 5957625.355 ops/s
# Warmup Iteration  11: 5938759.500 ops/s
# Warmup Iteration  12: 5947377.961 ops/s
# Warmup Iteration  13: 5945293.257 ops/s
# Warmup Iteration  14: 5948085.021 ops/s
# Warmup Iteration  15: 5957550.522 ops/s
# Warmup Iteration  16: 5955831.980 ops/s
# Warmup Iteration  17: 5951315.932 ops/s
# Warmup Iteration  18: 5941777.952 ops/s
# Warmup Iteration  19: 5922744.226 ops/s
# Warmup Iteration  20: 5943700.455 ops/s
# Warmup Iteration  21: 5964844.260 ops/s
# Warmup Iteration  22: 5925011.632 ops/s
# Warmup Iteration  23: 5943285.114 ops/s
# Warmup Iteration  24: 5950195.478 ops/s
# Warmup Iteration  25: 5946669.298 ops/s
# Warmup Iteration  26: 5944072.214 ops/s
# Warmup Iteration  27: 5958044.094 ops/s
# Warmup Iteration  28: 5940378.894 ops/s
# Warmup Iteration  29: 5954662.028 ops/s
# Warmup Iteration  30: 5950225.138 ops/s
Iteration   1: 5969364.395 ops/s
Iteration   2: 5961750.375 ops/s
Iteration   3: 5940664.166 ops/s
Iteration   4: 5922316.509 ops/s
Iteration   5: 5945255.305 ops/s
Iteration   6: 5948345.632 ops/s
Iteration   7: 5937527.215 ops/s
Iteration   8: 5961769.800 ops/s
Iteration   9: 5943430.017 ops/s
Iteration  10: 5936849.813 ops/s
Iteration  11: 5946943.972 ops/s
Iteration  12: 5961071.622 ops/s
Iteration  13: 5954397.775 ops/s
Iteration  14: 5941692.794 ops/s
Iteration  15: 5896986.608 ops/s
Iteration  16: 5964520.463 ops/s
Iteration  17: 5960791.060 ops/s
Iteration  18: 5963531.199 ops/s
Iteration  19: 5952157.209 ops/s
Iteration  20: 5943556.754 ops/s
Iteration  21: 5932593.868 ops/s
Iteration  22: 5948909.730 ops/s
Iteration  23: 5948527.125 ops/s
Iteration  24: 5972161.505 ops/s
Iteration  25: 5933731.708 ops/s
Iteration  26: 5965022.426 ops/s
Iteration  27: 5974339.699 ops/s
Iteration  28: 5897336.251 ops/s
Iteration  29: 5940976.445 ops/s
Iteration  30: 5921416.165 ops/s


Result "org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_containsAllArray":
  5946264.587 ±(99.9%) 12787.058 ops/s [Average]
  (min, avg, max) = (5896986.608, 5946264.587, 5974339.699), stdev = 19139.068
  CI (99.9%): [5933477.529, 5959051.645] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
UnmodifiableMapEntrySetTest._Benchmark.benchmark_containsAllArray  thrpt   30  5946264.587 ± 12787.058  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1895500.178 ops/s
# Warmup Iteration   2: 4431470.678 ops/s
# Warmup Iteration   3: 4477332.153 ops/s
# Warmup Iteration   4: 3746091.966 ops/s
# Warmup Iteration   5: 4489929.724 ops/s
# Warmup Iteration   6: 4480223.929 ops/s
# Warmup Iteration   7: 4486378.843 ops/s
# Warmup Iteration   8: 4492795.863 ops/s
# Warmup Iteration   9: 4475310.303 ops/s
# Warmup Iteration  10: 4470157.899 ops/s
# Warmup Iteration  11: 4474154.955 ops/s
# Warmup Iteration  12: 4489257.686 ops/s
# Warmup Iteration  13: 4472816.994 ops/s
# Warmup Iteration  14: 4488896.519 ops/s
# Warmup Iteration  15: 4491996.324 ops/s
# Warmup Iteration  16: 4485739.113 ops/s
# Warmup Iteration  17: 4489075.750 ops/s
# Warmup Iteration  18: 4486687.923 ops/s
# Warmup Iteration  19: 4479759.350 ops/s
# Warmup Iteration  20: 4490212.022 ops/s
# Warmup Iteration  21: 4483076.093 ops/s
# Warmup Iteration  22: 4491765.795 ops/s
# Warmup Iteration  23: 4483125.000 ops/s
# Warmup Iteration  24: 4493919.700 ops/s
# Warmup Iteration  25: 4478063.640 ops/s
# Warmup Iteration  26: 4480197.978 ops/s
# Warmup Iteration  27: 4489469.420 ops/s
# Warmup Iteration  28: 4484444.281 ops/s
# Warmup Iteration  29: 4483004.440 ops/s
# Warmup Iteration  30: 4488488.557 ops/s
Iteration   1: 4499646.696 ops/s
Iteration   2: 4475226.256 ops/s
Iteration   3: 4494482.887 ops/s
Iteration   4: 4510611.019 ops/s
Iteration   5: 4489442.058 ops/s
Iteration   6: 4489769.639 ops/s
Iteration   7: 4480946.742 ops/s
Iteration   8: 4490529.314 ops/s
Iteration   9: 4457425.978 ops/s
Iteration  10: 4460361.594 ops/s
Iteration  11: 4508035.320 ops/s
Iteration  12: 4463888.995 ops/s
Iteration  13: 4485688.405 ops/s
Iteration  14: 4479668.570 ops/s
Iteration  15: 4479925.387 ops/s
Iteration  16: 4485518.378 ops/s
Iteration  17: 4501892.986 ops/s
Iteration  18: 4486149.866 ops/s
Iteration  19: 4487036.168 ops/s
Iteration  20: 4488476.098 ops/s
Iteration  21: 4478459.543 ops/s
Iteration  22: 4483343.459 ops/s
Iteration  23: 4485722.323 ops/s
Iteration  24: 4463429.009 ops/s
Iteration  25: 4501826.459 ops/s
Iteration  26: 4474156.225 ops/s
Iteration  27: 4490927.919 ops/s
Iteration  28: 4494016.495 ops/s
Iteration  29: 4483428.456 ops/s
Iteration  30: 4490759.379 ops/s


Result "org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_containsAllIterable":
  4485359.721 ±(99.9%) 8690.933 ops/s [Average]
  (min, avg, max) = (4457425.978, 4485359.721, 4510611.019), stdev = 13008.180
  CI (99.9%): [4476668.788, 4494050.654] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
UnmodifiableMapEntrySetTest._Benchmark.benchmark_containsAllIterable  thrpt   30  4485359.721 ± 8690.933  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_equalsAndHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_equalsAndHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 676000.476 ops/s
# Warmup Iteration   2: 1750106.636 ops/s
# Warmup Iteration   3: 1760062.676 ops/s
# Warmup Iteration   4: 1461026.497 ops/s
# Warmup Iteration   5: 1749073.331 ops/s
# Warmup Iteration   6: 1756593.375 ops/s
# Warmup Iteration   7: 1751446.901 ops/s
# Warmup Iteration   8: 1752484.701 ops/s
# Warmup Iteration   9: 1754675.586 ops/s
# Warmup Iteration  10: 1756451.148 ops/s
# Warmup Iteration  11: 1756904.206 ops/s
# Warmup Iteration  12: 1754805.680 ops/s
# Warmup Iteration  13: 1750349.011 ops/s
# Warmup Iteration  14: 1756193.367 ops/s
# Warmup Iteration  15: 1747222.895 ops/s
# Warmup Iteration  16: 1761010.516 ops/s
# Warmup Iteration  17: 1758250.554 ops/s
# Warmup Iteration  18: 1753141.305 ops/s
# Warmup Iteration  19: 1745080.006 ops/s
# Warmup Iteration  20: 1748132.565 ops/s
# Warmup Iteration  21: 1741534.499 ops/s
# Warmup Iteration  22: 1747431.970 ops/s
# Warmup Iteration  23: 1747208.357 ops/s
# Warmup Iteration  24: 1750146.060 ops/s
# Warmup Iteration  25: 1742128.224 ops/s
# Warmup Iteration  26: 1750411.730 ops/s
# Warmup Iteration  27: 1760860.501 ops/s
# Warmup Iteration  28: 1749035.652 ops/s
# Warmup Iteration  29: 1758347.414 ops/s
# Warmup Iteration  30: 1752529.658 ops/s
Iteration   1: 1764146.213 ops/s
Iteration   2: 1754928.476 ops/s
Iteration   3: 1750225.286 ops/s
Iteration   4: 1756050.584 ops/s
Iteration   5: 1749697.081 ops/s
Iteration   6: 1749141.493 ops/s
Iteration   7: 1759906.330 ops/s
Iteration   8: 1753144.734 ops/s
Iteration   9: 1748897.199 ops/s
Iteration  10: 1743133.051 ops/s
Iteration  11: 1752715.668 ops/s
Iteration  12: 1761017.849 ops/s
Iteration  13: 1767087.414 ops/s
Iteration  14: 1756189.014 ops/s
Iteration  15: 1757527.207 ops/s
Iteration  16: 1747452.435 ops/s
Iteration  17: 1757387.960 ops/s
Iteration  18: 1752485.996 ops/s
Iteration  19: 1750808.994 ops/s
Iteration  20: 1754280.948 ops/s
Iteration  21: 1745948.988 ops/s
Iteration  22: 1748298.104 ops/s
Iteration  23: 1758412.782 ops/s
Iteration  24: 1758044.041 ops/s
Iteration  25: 1766142.492 ops/s
Iteration  26: 1744201.576 ops/s
Iteration  27: 1745056.625 ops/s
Iteration  28: 1755856.656 ops/s
Iteration  29: 1750597.006 ops/s
Iteration  30: 1745141.339 ops/s


Result "org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_equalsAndHashCode":
  1753464.118 ±(99.9%) 4283.262 ops/s [Average]
  (min, avg, max) = (1743133.051, 1753464.118, 1767087.414), stdev = 6410.985
  CI (99.9%): [1749180.856, 1757747.380] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
UnmodifiableMapEntrySetTest._Benchmark.benchmark_equalsAndHashCode  thrpt   30  1753464.118 ± 4283.262  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_flatCollect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_flatCollect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 672864.073 ops/s
# Warmup Iteration   2: 1271455.913 ops/s
# Warmup Iteration   3: 1480871.542 ops/s
# Warmup Iteration   4: 1492111.965 ops/s
# Warmup Iteration   5: 1488494.484 ops/s
# Warmup Iteration   6: 1231341.776 ops/s
# Warmup Iteration   7: 1488514.967 ops/s
# Warmup Iteration   8: 1486348.087 ops/s
# Warmup Iteration   9: 1488616.200 ops/s
# Warmup Iteration  10: 1486865.350 ops/s
# Warmup Iteration  11: 1483871.456 ops/s
# Warmup Iteration  12: 1489070.217 ops/s
# Warmup Iteration  13: 1488250.664 ops/s
# Warmup Iteration  14: 1487723.727 ops/s
# Warmup Iteration  15: 1488502.240 ops/s
# Warmup Iteration  16: 1487537.577 ops/s
# Warmup Iteration  17: 1494890.723 ops/s
# Warmup Iteration  18: 1488312.631 ops/s
# Warmup Iteration  19: 1498922.477 ops/s
# Warmup Iteration  20: 1494533.631 ops/s
# Warmup Iteration  21: 1497263.183 ops/s
# Warmup Iteration  22: 1491519.456 ops/s
# Warmup Iteration  23: 1489706.617 ops/s
# Warmup Iteration  24: 1492138.428 ops/s
# Warmup Iteration  25: 1489046.746 ops/s
# Warmup Iteration  26: 1495780.912 ops/s
# Warmup Iteration  27: 1493768.113 ops/s
# Warmup Iteration  28: 1496232.003 ops/s
# Warmup Iteration  29: 1491997.964 ops/s
# Warmup Iteration  30: 1472601.772 ops/s
Iteration   1: 1492586.392 ops/s
Iteration   2: 1482836.032 ops/s
Iteration   3: 1495379.092 ops/s
Iteration   4: 1485138.686 ops/s
Iteration   5: 1499034.180 ops/s
Iteration   6: 1502469.952 ops/s
Iteration   7: 1486388.665 ops/s
Iteration   8: 1494199.093 ops/s
Iteration   9: 1494700.250 ops/s
Iteration  10: 1481122.023 ops/s
Iteration  11: 1497872.240 ops/s
Iteration  12: 1488037.788 ops/s
Iteration  13: 1491570.984 ops/s
Iteration  14: 1492110.452 ops/s
Iteration  15: 1497602.304 ops/s
Iteration  16: 1496015.386 ops/s
Iteration  17: 1489747.774 ops/s
Iteration  18: 1493156.713 ops/s
Iteration  19: 1495816.655 ops/s
Iteration  20: 1496556.777 ops/s
Iteration  21: 1486477.241 ops/s
Iteration  22: 1491945.762 ops/s
Iteration  23: 1497834.913 ops/s
Iteration  24: 1486446.844 ops/s
Iteration  25: 1491223.069 ops/s
Iteration  26: 1489067.208 ops/s
Iteration  27: 1496025.182 ops/s
Iteration  28: 1495342.626 ops/s
Iteration  29: 1497551.374 ops/s
Iteration  30: 1496788.707 ops/s


Result "org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_flatCollect":
  1492701.479 ±(99.9%) 3452.603 ops/s [Average]
  (min, avg, max) = (1481122.023, 1492701.479, 1502469.952), stdev = 5167.694
  CI (99.9%): [1489248.876, 1496154.082] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
UnmodifiableMapEntrySetTest._Benchmark.benchmark_flatCollect  thrpt   30  1492701.479 ± 3452.603  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1330611.532 ops/s
# Warmup Iteration   2: 3258214.159 ops/s
# Warmup Iteration   3: 3173620.105 ops/s
# Warmup Iteration   4: 2648225.459 ops/s
# Warmup Iteration   5: 3169740.944 ops/s
# Warmup Iteration   6: 3169383.287 ops/s
# Warmup Iteration   7: 3167974.769 ops/s
# Warmup Iteration   8: 3171794.711 ops/s
# Warmup Iteration   9: 3156858.324 ops/s
# Warmup Iteration  10: 3166861.567 ops/s
# Warmup Iteration  11: 3157863.244 ops/s
# Warmup Iteration  12: 3159785.452 ops/s
# Warmup Iteration  13: 3165380.365 ops/s
# Warmup Iteration  14: 3168438.285 ops/s
# Warmup Iteration  15: 3169353.580 ops/s
# Warmup Iteration  16: 3173113.312 ops/s
# Warmup Iteration  17: 3145841.685 ops/s
# Warmup Iteration  18: 3168508.501 ops/s
# Warmup Iteration  19: 3175521.423 ops/s
# Warmup Iteration  20: 3167701.322 ops/s
# Warmup Iteration  21: 3173158.231 ops/s
# Warmup Iteration  22: 3171892.243 ops/s
# Warmup Iteration  23: 3170831.822 ops/s
# Warmup Iteration  24: 3175012.073 ops/s
# Warmup Iteration  25: 3166992.431 ops/s
# Warmup Iteration  26: 3169567.700 ops/s
# Warmup Iteration  27: 3169825.826 ops/s
# Warmup Iteration  28: 3173403.686 ops/s
# Warmup Iteration  29: 3156837.523 ops/s
# Warmup Iteration  30: 3176287.433 ops/s
Iteration   1: 3171018.305 ops/s
Iteration   2: 3159400.904 ops/s
Iteration   3: 3175975.339 ops/s
Iteration   4: 3162006.997 ops/s
Iteration   5: 3162802.360 ops/s
Iteration   6: 3174952.165 ops/s
Iteration   7: 3164042.156 ops/s
Iteration   8: 3165808.775 ops/s
Iteration   9: 3156928.436 ops/s
Iteration  10: 3162349.031 ops/s
Iteration  11: 3171032.924 ops/s
Iteration  12: 3170795.371 ops/s
Iteration  13: 3178200.389 ops/s
Iteration  14: 3166776.694 ops/s
Iteration  15: 3175537.657 ops/s
Iteration  16: 3161679.059 ops/s
Iteration  17: 3163012.673 ops/s
Iteration  18: 3159085.414 ops/s
Iteration  19: 3162421.384 ops/s
Iteration  20: 3150287.331 ops/s
Iteration  21: 3171327.874 ops/s
Iteration  22: 3157174.362 ops/s
Iteration  23: 3162654.146 ops/s
Iteration  24: 3175708.168 ops/s
Iteration  25: 3170485.620 ops/s
Iteration  26: 3171508.019 ops/s
Iteration  27: 3176535.470 ops/s
Iteration  28: 3174888.219 ops/s
Iteration  29: 3168954.745 ops/s
Iteration  30: 3163929.691 ops/s


Result "org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_forEach":
  3166909.323 ±(99.9%) 4705.133 ops/s [Average]
  (min, avg, max) = (3150287.331, 3166909.323, 3178200.389), stdev = 7042.422
  CI (99.9%): [3162204.190, 3171614.456] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
UnmodifiableMapEntrySetTest._Benchmark.benchmark_forEach  thrpt   30  3166909.323 ± 4705.133  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_groupBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_groupBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1385053.318 ops/s
# Warmup Iteration   2: 3267075.488 ops/s
# Warmup Iteration   3: 3295140.050 ops/s
# Warmup Iteration   4: 2758351.623 ops/s
# Warmup Iteration   5: 3308385.526 ops/s
# Warmup Iteration   6: 3304066.660 ops/s
# Warmup Iteration   7: 3298100.403 ops/s
# Warmup Iteration   8: 3294133.617 ops/s
# Warmup Iteration   9: 3299670.219 ops/s
# Warmup Iteration  10: 3294035.243 ops/s
# Warmup Iteration  11: 3293312.674 ops/s
# Warmup Iteration  12: 3300384.647 ops/s
# Warmup Iteration  13: 3305362.244 ops/s
# Warmup Iteration  14: 3285187.815 ops/s
# Warmup Iteration  15: 3302778.412 ops/s
# Warmup Iteration  16: 3309686.341 ops/s
# Warmup Iteration  17: 3299057.977 ops/s
# Warmup Iteration  18: 3298381.987 ops/s
# Warmup Iteration  19: 3297961.789 ops/s
# Warmup Iteration  20: 3301422.356 ops/s
# Warmup Iteration  21: 3296143.164 ops/s
# Warmup Iteration  22: 3296630.599 ops/s
# Warmup Iteration  23: 3300433.750 ops/s
# Warmup Iteration  24: 3302960.009 ops/s
# Warmup Iteration  25: 3283106.203 ops/s
# Warmup Iteration  26: 3306140.660 ops/s
# Warmup Iteration  27: 3288715.508 ops/s
# Warmup Iteration  28: 3291296.726 ops/s
# Warmup Iteration  29: 3297421.896 ops/s
# Warmup Iteration  30: 3302435.514 ops/s
Iteration   1: 3288350.235 ops/s
Iteration   2: 3304661.955 ops/s
Iteration   3: 3305406.730 ops/s
Iteration   4: 3304478.140 ops/s
Iteration   5: 3291189.493 ops/s
Iteration   6: 3319608.974 ops/s
Iteration   7: 3300957.354 ops/s
Iteration   8: 3279728.549 ops/s
Iteration   9: 3291474.418 ops/s
Iteration  10: 3293849.939 ops/s
Iteration  11: 3281859.923 ops/s
Iteration  12: 3293084.446 ops/s
Iteration  13: 3311932.485 ops/s
Iteration  14: 3305509.281 ops/s
Iteration  15: 3291592.473 ops/s
Iteration  16: 3304645.910 ops/s
Iteration  17: 3299830.413 ops/s
Iteration  18: 3302000.064 ops/s
Iteration  19: 3299681.753 ops/s
Iteration  20: 3301470.165 ops/s
Iteration  21: 3279888.474 ops/s
Iteration  22: 3293985.398 ops/s
Iteration  23: 3300532.880 ops/s
Iteration  24: 3308249.233 ops/s
Iteration  25: 3289563.949 ops/s
Iteration  26: 3309608.702 ops/s
Iteration  27: 3298450.717 ops/s
Iteration  28: 3296225.843 ops/s
Iteration  29: 3294324.143 ops/s
Iteration  30: 3310668.216 ops/s


Result "org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_groupBy":
  3298427.008 ±(99.9%) 6372.280 ops/s [Average]
  (min, avg, max) = (3279728.549, 3298427.008, 3319608.974), stdev = 9537.730
  CI (99.9%): [3292054.728, 3304799.289] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
UnmodifiableMapEntrySetTest._Benchmark.benchmark_groupBy  thrpt   30  3298427.008 ± 6372.280  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1661683.054 ops/s
# Warmup Iteration   2: 3627419.308 ops/s
# Warmup Iteration   3: 3065511.264 ops/s
# Warmup Iteration   4: 3625425.623 ops/s
# Warmup Iteration   5: 3637523.244 ops/s
# Warmup Iteration   6: 3649518.200 ops/s
# Warmup Iteration   7: 3647554.568 ops/s
# Warmup Iteration   8: 3664790.517 ops/s
# Warmup Iteration   9: 3653738.400 ops/s
# Warmup Iteration  10: 3646653.560 ops/s
# Warmup Iteration  11: 3623983.069 ops/s
# Warmup Iteration  12: 3633630.133 ops/s
# Warmup Iteration  13: 3633555.267 ops/s
# Warmup Iteration  14: 3630930.718 ops/s
# Warmup Iteration  15: 3630121.984 ops/s
# Warmup Iteration  16: 3655390.216 ops/s
# Warmup Iteration  17: 3651622.917 ops/s
# Warmup Iteration  18: 3646180.482 ops/s
# Warmup Iteration  19: 3651747.617 ops/s
# Warmup Iteration  20: 3641894.230 ops/s
# Warmup Iteration  21: 3634991.330 ops/s
# Warmup Iteration  22: 3650281.080 ops/s
# Warmup Iteration  23: 3616134.450 ops/s
# Warmup Iteration  24: 3606879.492 ops/s
# Warmup Iteration  25: 3655697.604 ops/s
# Warmup Iteration  26: 3640438.206 ops/s
# Warmup Iteration  27: 3645216.337 ops/s
# Warmup Iteration  28: 3648849.335 ops/s
# Warmup Iteration  29: 3625158.127 ops/s
# Warmup Iteration  30: 3621855.596 ops/s
Iteration   1: 3632875.003 ops/s
Iteration   2: 3638346.493 ops/s
Iteration   3: 3645410.299 ops/s
Iteration   4: 3624981.809 ops/s
Iteration   5: 3655604.710 ops/s
Iteration   6: 3635401.470 ops/s
Iteration   7: 3644127.082 ops/s
Iteration   8: 3586214.986 ops/s
Iteration   9: 3645012.815 ops/s
Iteration  10: 3648241.199 ops/s
Iteration  11: 3626293.342 ops/s
Iteration  12: 3611708.362 ops/s
Iteration  13: 3654563.279 ops/s
Iteration  14: 3635655.618 ops/s
Iteration  15: 3636351.500 ops/s
Iteration  16: 3649918.705 ops/s
Iteration  17: 3634139.693 ops/s
Iteration  18: 3641144.671 ops/s
Iteration  19: 3633595.864 ops/s
Iteration  20: 3617927.979 ops/s
Iteration  21: 3609680.543 ops/s
Iteration  22: 3647053.368 ops/s
Iteration  23: 3612391.533 ops/s
Iteration  24: 3636990.917 ops/s
Iteration  25: 3647845.670 ops/s
Iteration  26: 3630927.603 ops/s
Iteration  27: 3653598.231 ops/s
Iteration  28: 3611083.834 ops/s
Iteration  29: 3648813.627 ops/s
Iteration  30: 3626983.822 ops/s


Result "org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_isEmpty":
  3634096.134 ±(99.9%) 10799.621 ops/s [Average]
  (min, avg, max) = (3586214.986, 3634096.134, 3655604.710), stdev = 16164.365
  CI (99.9%): [3623296.513, 3644895.755] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
UnmodifiableMapEntrySetTest._Benchmark.benchmark_isEmpty  thrpt   30  3634096.134 ± 10799.621  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_iterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_iterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 240588.509 ops/s
# Warmup Iteration   2: 256223.692 ops/s
# Warmup Iteration   3: 304223.693 ops/s
# Warmup Iteration   4: 318798.806 ops/s
# Warmup Iteration   5: 319299.585 ops/s
# Warmup Iteration   6: 318497.485 ops/s
# Warmup Iteration   7: 319509.663 ops/s
# Warmup Iteration   8: 317891.614 ops/s
# Warmup Iteration   9: 320087.522 ops/s
# Warmup Iteration  10: 319237.480 ops/s
# Warmup Iteration  11: 319990.116 ops/s
# Warmup Iteration  12: 317553.417 ops/s
# Warmup Iteration  13: 306421.016 ops/s
# Warmup Iteration  14: 286714.166 ops/s
# Warmup Iteration  15: 318266.878 ops/s
# Warmup Iteration  16: 319022.712 ops/s
# Warmup Iteration  17: 334248.174 ops/s
# Warmup Iteration  18: 336038.746 ops/s
# Warmup Iteration  19: 334998.114 ops/s
# Warmup Iteration  20: 337177.677 ops/s
# Warmup Iteration  21: 336281.290 ops/s
# Warmup Iteration  22: 335818.058 ops/s
# Warmup Iteration  23: 334831.352 ops/s
# Warmup Iteration  24: 335761.375 ops/s
# Warmup Iteration  25: 335643.081 ops/s
# Warmup Iteration  26: 338044.522 ops/s
# Warmup Iteration  27: 338069.256 ops/s
# Warmup Iteration  28: 337049.585 ops/s
# Warmup Iteration  29: 337009.855 ops/s
# Warmup Iteration  30: 336493.938 ops/s
Iteration   1: 336603.069 ops/s
Iteration   2: 339891.236 ops/s
Iteration   3: 338339.795 ops/s
Iteration   4: 337610.226 ops/s
Iteration   5: 335945.907 ops/s
Iteration   6: 337235.626 ops/s
Iteration   7: 334908.101 ops/s
Iteration   8: 336039.846 ops/s
Iteration   9: 337693.954 ops/s
Iteration  10: 337211.600 ops/s
Iteration  11: 335643.439 ops/s
Iteration  12: 335832.108 ops/s
Iteration  13: 335948.564 ops/s
Iteration  14: 334386.505 ops/s
Iteration  15: 336984.351 ops/s
Iteration  16: 337493.838 ops/s
Iteration  17: 336925.186 ops/s
Iteration  18: 337201.955 ops/s
Iteration  19: 337951.227 ops/s
Iteration  20: 338033.737 ops/s
Iteration  21: 336801.352 ops/s
Iteration  22: 336824.057 ops/s
Iteration  23: 339051.462 ops/s
Iteration  24: 336471.653 ops/s
Iteration  25: 334976.694 ops/s
Iteration  26: 333578.859 ops/s
Iteration  27: 333565.375 ops/s
Iteration  28: 333812.915 ops/s
Iteration  29: 336055.893 ops/s
Iteration  30: 335951.312 ops/s


Result "org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_iterator":
  336498.995 ±(99.9%) 1021.943 ops/s [Average]
  (min, avg, max) = (333565.375, 336498.995, 339891.236), stdev = 1529.596
  CI (99.9%): [335477.052, 337520.938] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
UnmodifiableMapEntrySetTest._Benchmark.benchmark_iterator  thrpt   30  336498.995 ± 1021.943  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_iteratorRemove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_iteratorRemove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 679477.720 ops/s
# Warmup Iteration   2: 723423.310 ops/s
# Warmup Iteration   3: 969655.543 ops/s
# Warmup Iteration   4: 975719.171 ops/s
# Warmup Iteration   5: 969635.386 ops/s
# Warmup Iteration   6: 975490.449 ops/s
# Warmup Iteration   7: 978259.257 ops/s
# Warmup Iteration   8: 975874.835 ops/s
# Warmup Iteration   9: 971937.596 ops/s
# Warmup Iteration  10: 976052.168 ops/s
# Warmup Iteration  11: 896245.786 ops/s
# Warmup Iteration  12: 899359.618 ops/s
# Warmup Iteration  13: 977196.538 ops/s
# Warmup Iteration  14: 977064.057 ops/s
# Warmup Iteration  15: 974864.721 ops/s
# Warmup Iteration  16: 978104.404 ops/s
# Warmup Iteration  17: 1040062.165 ops/s
# Warmup Iteration  18: 1029877.432 ops/s
# Warmup Iteration  19: 1035114.301 ops/s
# Warmup Iteration  20: 1035953.295 ops/s
# Warmup Iteration  21: 1036646.147 ops/s
# Warmup Iteration  22: 1037450.499 ops/s
# Warmup Iteration  23: 1032898.080 ops/s
# Warmup Iteration  24: 1037347.202 ops/s
# Warmup Iteration  25: 1027911.661 ops/s
# Warmup Iteration  26: 1036848.088 ops/s
# Warmup Iteration  27: 1032349.209 ops/s
# Warmup Iteration  28: 1034239.031 ops/s
# Warmup Iteration  29: 1031982.114 ops/s
# Warmup Iteration  30: 1034796.862 ops/s
Iteration   1: 1035777.198 ops/s
Iteration   2: 1037430.584 ops/s
Iteration   3: 1036656.886 ops/s
Iteration   4: 1035839.210 ops/s
Iteration   5: 1035562.370 ops/s
Iteration   6: 1038327.133 ops/s
Iteration   7: 1037222.636 ops/s
Iteration   8: 1037176.316 ops/s
Iteration   9: 1037870.054 ops/s
Iteration  10: 1033047.493 ops/s
Iteration  11: 1032749.155 ops/s
Iteration  12: 1032619.280 ops/s
Iteration  13: 1038909.233 ops/s
Iteration  14: 1037122.088 ops/s
Iteration  15: 1035671.733 ops/s
Iteration  16: 1035239.050 ops/s
Iteration  17: 1026588.703 ops/s
Iteration  18: 1036367.117 ops/s
Iteration  19: 1033990.139 ops/s
Iteration  20: 1034473.057 ops/s
Iteration  21: 1036863.470 ops/s
Iteration  22: 1035026.573 ops/s
Iteration  23: 1035025.869 ops/s
Iteration  24: 1039628.228 ops/s
Iteration  25: 1033224.427 ops/s
Iteration  26: 1034143.158 ops/s
Iteration  27: 1032678.658 ops/s
Iteration  28: 1031985.476 ops/s
Iteration  29: 1035041.332 ops/s
Iteration  30: 1022802.986 ops/s


Result "org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_iteratorRemove":
  1034835.320 ±(99.9%) 2285.062 ops/s [Average]
  (min, avg, max) = (1022802.986, 1034835.320, 1039628.228), stdev = 3420.174
  CI (99.9%): [1032550.258, 1037120.383] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
UnmodifiableMapEntrySetTest._Benchmark.benchmark_iteratorRemove  thrpt   30  1034835.320 ± 2285.062  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_newEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_newEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5013626.920 ops/s
# Warmup Iteration   2: 10247359.451 ops/s
# Warmup Iteration   3: 8955472.639 ops/s
# Warmup Iteration   4: 10431355.996 ops/s
# Warmup Iteration   5: 10478899.972 ops/s
# Warmup Iteration   6: 10471302.974 ops/s
# Warmup Iteration   7: 10464594.676 ops/s
# Warmup Iteration   8: 10407147.515 ops/s
# Warmup Iteration   9: 10410761.569 ops/s
# Warmup Iteration  10: 10430236.742 ops/s
# Warmup Iteration  11: 10420732.320 ops/s
# Warmup Iteration  12: 10461384.598 ops/s
# Warmup Iteration  13: 10455641.827 ops/s
# Warmup Iteration  14: 10451466.313 ops/s
# Warmup Iteration  15: 10449103.721 ops/s
# Warmup Iteration  16: 10456947.634 ops/s
# Warmup Iteration  17: 10451069.338 ops/s
# Warmup Iteration  18: 10421361.902 ops/s
# Warmup Iteration  19: 10405863.338 ops/s
# Warmup Iteration  20: 10407285.711 ops/s
# Warmup Iteration  21: 10461004.011 ops/s
# Warmup Iteration  22: 10484610.972 ops/s
# Warmup Iteration  23: 10476928.019 ops/s
# Warmup Iteration  24: 10450953.679 ops/s
# Warmup Iteration  25: 10454224.703 ops/s
# Warmup Iteration  26: 10438230.642 ops/s
# Warmup Iteration  27: 10425205.136 ops/s
# Warmup Iteration  28: 10449403.293 ops/s
# Warmup Iteration  29: 10442098.309 ops/s
# Warmup Iteration  30: 10414683.281 ops/s
Iteration   1: 10433335.220 ops/s
Iteration   2: 10450675.245 ops/s
Iteration   3: 10446601.899 ops/s
Iteration   4: 10457664.383 ops/s
Iteration   5: 10468963.522 ops/s
Iteration   6: 10340522.418 ops/s
Iteration   7: 10095853.666 ops/s
Iteration   8: 10437663.485 ops/s
Iteration   9: 10456277.201 ops/s
Iteration  10: 10486387.260 ops/s
Iteration  11: 10473405.057 ops/s
Iteration  12: 10460966.968 ops/s
Iteration  13: 10477187.038 ops/s
Iteration  14: 10472502.991 ops/s
Iteration  15: 10391938.543 ops/s
Iteration  16: 10477595.331 ops/s
Iteration  17: 10111870.979 ops/s
Iteration  18: 10469598.625 ops/s
Iteration  19: 10442552.814 ops/s
Iteration  20: 10418381.393 ops/s
Iteration  21: 10505331.066 ops/s
Iteration  22: 10509818.753 ops/s
Iteration  23: 10479610.318 ops/s
Iteration  24: 10438713.645 ops/s
Iteration  25: 10456695.096 ops/s
Iteration  26: 10450621.936 ops/s
Iteration  27: 10412891.855 ops/s
Iteration  28: 10460475.532 ops/s
Iteration  29: 10447618.758 ops/s
Iteration  30: 10416692.011 ops/s


Result "org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_newEmpty":
  10428280.434 ±(99.9%) 62966.639 ops/s [Average]
  (min, avg, max) = (10095853.666, 10428280.434, 10509818.753), stdev = 94245.509
  CI (99.9%): [10365313.794, 10491247.073] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
UnmodifiableMapEntrySetTest._Benchmark.benchmark_newEmpty  thrpt   30  10428280.434 ± 62966.639  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_partition$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_partition

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1043244.710 ops/s
# Warmup Iteration   2: 2291038.525 ops/s
# Warmup Iteration   3: 2364119.041 ops/s
# Warmup Iteration   4: 2267525.118 ops/s
# Warmup Iteration   5: 2097860.065 ops/s
# Warmup Iteration   6: 2386395.131 ops/s
# Warmup Iteration   7: 2379830.009 ops/s
# Warmup Iteration   8: 2377436.202 ops/s
# Warmup Iteration   9: 2382068.904 ops/s
# Warmup Iteration  10: 2378631.226 ops/s
# Warmup Iteration  11: 2378802.000 ops/s
# Warmup Iteration  12: 2382229.095 ops/s
# Warmup Iteration  13: 2375040.112 ops/s
# Warmup Iteration  14: 2380828.070 ops/s
# Warmup Iteration  15: 2386228.657 ops/s
# Warmup Iteration  16: 2382096.800 ops/s
# Warmup Iteration  17: 2385234.761 ops/s
# Warmup Iteration  18: 2378506.446 ops/s
# Warmup Iteration  19: 2374502.236 ops/s
# Warmup Iteration  20: 2386718.327 ops/s
# Warmup Iteration  21: 2376436.329 ops/s
# Warmup Iteration  22: 2376940.768 ops/s
# Warmup Iteration  23: 2380310.538 ops/s
# Warmup Iteration  24: 2380691.875 ops/s
# Warmup Iteration  25: 2380005.426 ops/s
# Warmup Iteration  26: 2368303.307 ops/s
# Warmup Iteration  27: 2368674.353 ops/s
# Warmup Iteration  28: 2379555.598 ops/s
# Warmup Iteration  29: 2387337.753 ops/s
# Warmup Iteration  30: 2380218.670 ops/s
Iteration   1: 2384105.817 ops/s
Iteration   2: 2376735.525 ops/s
Iteration   3: 2386095.369 ops/s
Iteration   4: 2387587.481 ops/s
Iteration   5: 2380599.793 ops/s
Iteration   6: 2379940.538 ops/s
Iteration   7: 2387042.270 ops/s
Iteration   8: 2389604.541 ops/s
Iteration   9: 2375764.149 ops/s
Iteration  10: 2380555.091 ops/s
Iteration  11: 2391965.147 ops/s
Iteration  12: 2392940.464 ops/s
Iteration  13: 2389438.475 ops/s
Iteration  14: 2384074.587 ops/s
Iteration  15: 2385681.000 ops/s
Iteration  16: 2383502.504 ops/s
Iteration  17: 2389982.493 ops/s
Iteration  18: 2383576.250 ops/s
Iteration  19: 2385151.671 ops/s
Iteration  20: 2385032.310 ops/s
Iteration  21: 2377549.327 ops/s
Iteration  22: 2387677.069 ops/s
Iteration  23: 2382913.881 ops/s
Iteration  24: 2379188.484 ops/s
Iteration  25: 2386005.527 ops/s
Iteration  26: 2383511.541 ops/s
Iteration  27: 2389227.654 ops/s
Iteration  28: 2389299.470 ops/s
Iteration  29: 2384257.393 ops/s
Iteration  30: 2388853.199 ops/s


Result "org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_partition":
  2384928.634 ±(99.9%) 2961.310 ops/s [Average]
  (min, avg, max) = (2375764.149, 2384928.634, 2392940.464), stdev = 4432.349
  CI (99.9%): [2381967.324, 2387889.944] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
UnmodifiableMapEntrySetTest._Benchmark.benchmark_partition  thrpt   30  2384928.634 ± 2961.310  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_partitionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_partitionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1044531.112 ops/s
# Warmup Iteration   2: 2308475.718 ops/s
# Warmup Iteration   3: 2360611.082 ops/s
# Warmup Iteration   4: 2258969.652 ops/s
# Warmup Iteration   5: 2097113.970 ops/s
# Warmup Iteration   6: 2372614.185 ops/s
# Warmup Iteration   7: 2377113.401 ops/s
# Warmup Iteration   8: 2382845.210 ops/s
# Warmup Iteration   9: 2381311.311 ops/s
# Warmup Iteration  10: 2375326.060 ops/s
# Warmup Iteration  11: 2382209.622 ops/s
# Warmup Iteration  12: 2368226.960 ops/s
# Warmup Iteration  13: 2381415.322 ops/s
# Warmup Iteration  14: 2382997.108 ops/s
# Warmup Iteration  15: 2381536.708 ops/s
# Warmup Iteration  16: 2369654.207 ops/s
# Warmup Iteration  17: 2382197.315 ops/s
# Warmup Iteration  18: 2380356.413 ops/s
# Warmup Iteration  19: 2380078.121 ops/s
# Warmup Iteration  20: 2369125.964 ops/s
# Warmup Iteration  21: 2382806.272 ops/s
# Warmup Iteration  22: 2379340.025 ops/s
# Warmup Iteration  23: 2378332.051 ops/s
# Warmup Iteration  24: 2372489.444 ops/s
# Warmup Iteration  25: 2384723.764 ops/s
# Warmup Iteration  26: 2379990.543 ops/s
# Warmup Iteration  27: 2384003.356 ops/s
# Warmup Iteration  28: 2378921.100 ops/s
# Warmup Iteration  29: 2375462.237 ops/s
# Warmup Iteration  30: 2371814.730 ops/s
Iteration   1: 2359450.807 ops/s
Iteration   2: 2369561.356 ops/s
Iteration   3: 2363611.862 ops/s
Iteration   4: 2375952.500 ops/s
Iteration   5: 2367505.724 ops/s
Iteration   6: 2385967.420 ops/s
Iteration   7: 2379840.159 ops/s
Iteration   8: 2385966.399 ops/s
Iteration   9: 2376515.142 ops/s
Iteration  10: 2381838.178 ops/s
Iteration  11: 2381408.385 ops/s
Iteration  12: 2386173.461 ops/s
Iteration  13: 2369795.487 ops/s
Iteration  14: 2383651.477 ops/s
Iteration  15: 2373597.748 ops/s
Iteration  16: 2376882.442 ops/s
Iteration  17: 2385910.983 ops/s
Iteration  18: 2382090.524 ops/s
Iteration  19: 2367179.556 ops/s
Iteration  20: 2366498.841 ops/s
Iteration  21: 2381942.788 ops/s
Iteration  22: 2375600.804 ops/s
Iteration  23: 2373454.933 ops/s
Iteration  24: 2368906.806 ops/s
Iteration  25: 2368273.889 ops/s
Iteration  26: 2370635.130 ops/s
Iteration  27: 2369991.932 ops/s
Iteration  28: 2369840.503 ops/s
Iteration  29: 2379143.350 ops/s
Iteration  30: 2379588.942 ops/s


Result "org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_partitionWith":
  2375225.918 ±(99.9%) 4944.013 ops/s [Average]
  (min, avg, max) = (2359450.807, 2375225.918, 2386173.461), stdev = 7399.966
  CI (99.9%): [2370281.905, 2380169.931] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
UnmodifiableMapEntrySetTest._Benchmark.benchmark_partitionWith  thrpt   30  2375225.918 ± 4944.013  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 831224.952 ops/s
# Warmup Iteration   2: 1783596.474 ops/s
# Warmup Iteration   3: 1854993.390 ops/s
# Warmup Iteration   4: 1855802.645 ops/s
# Warmup Iteration   5: 1561556.051 ops/s
# Warmup Iteration   6: 1859708.270 ops/s
# Warmup Iteration   7: 1859650.326 ops/s
# Warmup Iteration   8: 1864483.117 ops/s
# Warmup Iteration   9: 1860459.598 ops/s
# Warmup Iteration  10: 1866874.147 ops/s
# Warmup Iteration  11: 1858120.154 ops/s
# Warmup Iteration  12: 1863356.539 ops/s
# Warmup Iteration  13: 1862736.910 ops/s
# Warmup Iteration  14: 1862116.106 ops/s
# Warmup Iteration  15: 1858414.260 ops/s
# Warmup Iteration  16: 1856426.713 ops/s
# Warmup Iteration  17: 1858149.252 ops/s
# Warmup Iteration  18: 1861011.464 ops/s
# Warmup Iteration  19: 1864887.108 ops/s
# Warmup Iteration  20: 1868806.570 ops/s
# Warmup Iteration  21: 1858106.411 ops/s
# Warmup Iteration  22: 1861469.101 ops/s
# Warmup Iteration  23: 1859561.158 ops/s
# Warmup Iteration  24: 1863437.755 ops/s
# Warmup Iteration  25: 1861253.778 ops/s
# Warmup Iteration  26: 1863854.247 ops/s
# Warmup Iteration  27: 1859975.225 ops/s
# Warmup Iteration  28: 1863299.688 ops/s
# Warmup Iteration  29: 1856539.561 ops/s
# Warmup Iteration  30: 1853834.549 ops/s
Iteration   1: 1867498.382 ops/s
Iteration   2: 1856336.732 ops/s
Iteration   3: 1865697.675 ops/s
Iteration   4: 1864723.953 ops/s
Iteration   5: 1868209.356 ops/s
Iteration   6: 1860110.802 ops/s
Iteration   7: 1857465.150 ops/s
Iteration   8: 1866587.424 ops/s
Iteration   9: 1867535.078 ops/s
Iteration  10: 1865410.072 ops/s
Iteration  11: 1864380.895 ops/s
Iteration  12: 1861019.267 ops/s
Iteration  13: 1862836.872 ops/s
Iteration  14: 1850134.068 ops/s
Iteration  15: 1864568.672 ops/s
Iteration  16: 1863391.535 ops/s
Iteration  17: 1861995.883 ops/s
Iteration  18: 1866215.174 ops/s
Iteration  19: 1864621.833 ops/s
Iteration  20: 1858303.210 ops/s
Iteration  21: 1860722.790 ops/s
Iteration  22: 1859796.888 ops/s
Iteration  23: 1855937.396 ops/s
Iteration  24: 1866566.709 ops/s
Iteration  25: 1856437.707 ops/s
Iteration  26: 1856778.689 ops/s
Iteration  27: 1852432.910 ops/s
Iteration  28: 1860856.110 ops/s
Iteration  29: 1867287.203 ops/s
Iteration  30: 1858931.262 ops/s


Result "org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_reject":
  1861759.657 ±(99.9%) 3175.552 ops/s [Average]
  (min, avg, max) = (1850134.068, 1861759.657, 1868209.356), stdev = 4753.017
  CI (99.9%): [1858584.105, 1864935.208] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
UnmodifiableMapEntrySetTest._Benchmark.benchmark_reject  thrpt   30  1861759.657 ± 3175.552  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_rejectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_rejectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 828059.013 ops/s
# Warmup Iteration   2: 1782548.704 ops/s
# Warmup Iteration   3: 1846122.569 ops/s
# Warmup Iteration   4: 1856177.933 ops/s
# Warmup Iteration   5: 1556011.000 ops/s
# Warmup Iteration   6: 1854148.910 ops/s
# Warmup Iteration   7: 1860214.131 ops/s
# Warmup Iteration   8: 1857047.776 ops/s
# Warmup Iteration   9: 1861620.224 ops/s
# Warmup Iteration  10: 1857257.639 ops/s
# Warmup Iteration  11: 1863011.718 ops/s
# Warmup Iteration  12: 1862900.522 ops/s
# Warmup Iteration  13: 1855085.809 ops/s
# Warmup Iteration  14: 1842568.775 ops/s
# Warmup Iteration  15: 1862313.278 ops/s
# Warmup Iteration  16: 1858513.631 ops/s
# Warmup Iteration  17: 1855141.215 ops/s
# Warmup Iteration  18: 1864824.674 ops/s
# Warmup Iteration  19: 1859701.690 ops/s
# Warmup Iteration  20: 1861549.767 ops/s
# Warmup Iteration  21: 1859562.875 ops/s
# Warmup Iteration  22: 1856029.090 ops/s
# Warmup Iteration  23: 1864334.641 ops/s
# Warmup Iteration  24: 1862505.469 ops/s
# Warmup Iteration  25: 1855753.917 ops/s
# Warmup Iteration  26: 1857777.894 ops/s
# Warmup Iteration  27: 1858135.467 ops/s
# Warmup Iteration  28: 1858853.590 ops/s
# Warmup Iteration  29: 1852589.808 ops/s
# Warmup Iteration  30: 1858648.135 ops/s
Iteration   1: 1861975.444 ops/s
Iteration   2: 1857850.181 ops/s
Iteration   3: 1857714.796 ops/s
Iteration   4: 1851075.208 ops/s
Iteration   5: 1862513.562 ops/s
Iteration   6: 1843006.813 ops/s
Iteration   7: 1849907.943 ops/s
Iteration   8: 1862544.774 ops/s
Iteration   9: 1866474.121 ops/s
Iteration  10: 1853890.074 ops/s
Iteration  11: 1852270.949 ops/s
Iteration  12: 1861491.888 ops/s
Iteration  13: 1857455.278 ops/s
Iteration  14: 1863267.978 ops/s
Iteration  15: 1861137.941 ops/s
Iteration  16: 1864914.250 ops/s
Iteration  17: 1855037.216 ops/s
Iteration  18: 1857250.522 ops/s
Iteration  19: 1863446.745 ops/s
Iteration  20: 1854782.961 ops/s
Iteration  21: 1860479.379 ops/s
Iteration  22: 1860440.957 ops/s
Iteration  23: 1859231.151 ops/s
Iteration  24: 1861608.403 ops/s
Iteration  25: 1865408.862 ops/s
Iteration  26: 1867098.775 ops/s
Iteration  27: 1865905.099 ops/s
Iteration  28: 1857521.550 ops/s
Iteration  29: 1864949.208 ops/s
Iteration  30: 1860543.205 ops/s


Result "org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_rejectWith":
  1859373.174 ±(99.9%) 3699.506 ops/s [Average]
  (min, avg, max) = (1843006.813, 1859373.174, 1867098.775), stdev = 5537.247
  CI (99.9%): [1855673.668, 1863072.680] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
UnmodifiableMapEntrySetTest._Benchmark.benchmark_rejectWith  thrpt   30  1859373.174 ± 3699.506  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 700338.424 ops/s
# Warmup Iteration   2: 734737.137 ops/s
# Warmup Iteration   3: 915476.936 ops/s
# Warmup Iteration   4: 958587.975 ops/s
# Warmup Iteration   5: 957139.969 ops/s
# Warmup Iteration   6: 958368.694 ops/s
# Warmup Iteration   7: 950945.914 ops/s
# Warmup Iteration   8: 957916.013 ops/s
# Warmup Iteration   9: 957395.699 ops/s
# Warmup Iteration  10: 953847.888 ops/s
# Warmup Iteration  11: 958146.466 ops/s
# Warmup Iteration  12: 919416.595 ops/s
# Warmup Iteration  13: 841350.115 ops/s
# Warmup Iteration  14: 947407.622 ops/s
# Warmup Iteration  15: 959448.878 ops/s
# Warmup Iteration  16: 957957.321 ops/s
# Warmup Iteration  17: 1009359.519 ops/s
# Warmup Iteration  18: 1011121.642 ops/s
# Warmup Iteration  19: 1007899.812 ops/s
# Warmup Iteration  20: 1010706.490 ops/s
# Warmup Iteration  21: 1012115.772 ops/s
# Warmup Iteration  22: 1011359.014 ops/s
# Warmup Iteration  23: 1008178.573 ops/s
# Warmup Iteration  24: 1013692.638 ops/s
# Warmup Iteration  25: 1011198.923 ops/s
# Warmup Iteration  26: 1011313.848 ops/s
# Warmup Iteration  27: 1010438.658 ops/s
# Warmup Iteration  28: 1008565.737 ops/s
# Warmup Iteration  29: 1009480.280 ops/s
# Warmup Iteration  30: 1011404.368 ops/s
Iteration   1: 1004831.383 ops/s
Iteration   2: 1008447.374 ops/s
Iteration   3: 1012229.520 ops/s
Iteration   4: 1013794.524 ops/s
Iteration   5: 1012478.648 ops/s
Iteration   6: 1010679.660 ops/s
Iteration   7: 1008461.034 ops/s
Iteration   8: 1014120.367 ops/s
Iteration   9: 1009570.958 ops/s
Iteration  10: 1010528.257 ops/s
Iteration  11: 1002474.910 ops/s
Iteration  12: 1011450.272 ops/s
Iteration  13: 1004231.975 ops/s
Iteration  14: 1008789.199 ops/s
Iteration  15: 1008775.837 ops/s
Iteration  16: 1012859.069 ops/s
Iteration  17: 1015247.236 ops/s
Iteration  18: 1002335.975 ops/s
Iteration  19: 1006458.419 ops/s
Iteration  20: 1006593.420 ops/s
Iteration  21: 1012059.374 ops/s
Iteration  22: 1006376.616 ops/s
Iteration  23: 1005212.882 ops/s
Iteration  24: 1016398.519 ops/s
Iteration  25: 1013901.690 ops/s
Iteration  26: 1009214.713 ops/s
Iteration  27: 1011625.661 ops/s
Iteration  28: 1007442.578 ops/s
Iteration  29: 1009683.057 ops/s
Iteration  30: 1010739.965 ops/s


Result "org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_remove":
  1009567.103 ±(99.9%) 2449.289 ops/s [Average]
  (min, avg, max) = (1002335.975, 1009567.103, 1016398.519), stdev = 3665.981
  CI (99.9%): [1007117.814, 1012016.393] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
UnmodifiableMapEntrySetTest._Benchmark.benchmark_remove  thrpt   30  1009567.103 ± 2449.289  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2298946.293 ops/s
# Warmup Iteration   2: 3242561.624 ops/s
# Warmup Iteration   3: 4000156.428 ops/s
# Warmup Iteration   4: 3980834.933 ops/s
# Warmup Iteration   5: 3992887.654 ops/s
# Warmup Iteration   6: 4003272.456 ops/s
# Warmup Iteration   7: 4004255.476 ops/s
# Warmup Iteration   8: 3338241.149 ops/s
# Warmup Iteration   9: 4006215.140 ops/s
# Warmup Iteration  10: 3992894.817 ops/s
# Warmup Iteration  11: 4008413.071 ops/s
# Warmup Iteration  12: 3996725.474 ops/s
# Warmup Iteration  13: 4002419.081 ops/s
# Warmup Iteration  14: 4005555.409 ops/s
# Warmup Iteration  15: 4002312.496 ops/s
# Warmup Iteration  16: 4006308.952 ops/s
# Warmup Iteration  17: 3987553.892 ops/s
# Warmup Iteration  18: 3993676.290 ops/s
# Warmup Iteration  19: 4006313.138 ops/s
# Warmup Iteration  20: 4003192.790 ops/s
# Warmup Iteration  21: 3989963.508 ops/s
# Warmup Iteration  22: 4003263.387 ops/s
# Warmup Iteration  23: 3982951.157 ops/s
# Warmup Iteration  24: 4004738.845 ops/s
# Warmup Iteration  25: 3995050.936 ops/s
# Warmup Iteration  26: 4011496.812 ops/s
# Warmup Iteration  27: 4002125.011 ops/s
# Warmup Iteration  28: 3990901.415 ops/s
# Warmup Iteration  29: 4001660.889 ops/s
# Warmup Iteration  30: 3984177.767 ops/s
Iteration   1: 4004124.368 ops/s
Iteration   2: 4005047.864 ops/s
Iteration   3: 3983116.591 ops/s
Iteration   4: 4012252.725 ops/s
Iteration   5: 4007236.476 ops/s
Iteration   6: 4011653.901 ops/s
Iteration   7: 4006027.819 ops/s
Iteration   8: 4006537.433 ops/s
Iteration   9: 4011333.951 ops/s
Iteration  10: 4003194.959 ops/s
Iteration  11: 4007176.174 ops/s
Iteration  12: 3999140.953 ops/s
Iteration  13: 4002543.498 ops/s
Iteration  14: 4007550.822 ops/s
Iteration  15: 3990279.621 ops/s
Iteration  16: 4001960.504 ops/s
Iteration  17: 4001376.073 ops/s
Iteration  18: 4005224.959 ops/s
Iteration  19: 3991972.176 ops/s
Iteration  20: 4004503.804 ops/s
Iteration  21: 4014571.186 ops/s
Iteration  22: 3987763.671 ops/s
Iteration  23: 4012908.906 ops/s
Iteration  24: 4005115.653 ops/s
Iteration  25: 4002479.992 ops/s
Iteration  26: 3967054.934 ops/s
Iteration  27: 4006758.261 ops/s
Iteration  28: 3990697.951 ops/s
Iteration  29: 4011585.758 ops/s
Iteration  30: 3987475.075 ops/s


Result "org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_removeAll":
  4001622.202 ±(99.9%) 7020.730 ops/s [Average]
  (min, avg, max) = (3967054.934, 4001622.202, 4014571.186), stdev = 10508.299
  CI (99.9%): [3994601.472, 4008642.932] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
UnmodifiableMapEntrySetTest._Benchmark.benchmark_removeAll  thrpt   30  4001622.202 ± 7020.730  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_removeAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_removeAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 55859.452 ops/s
# Warmup Iteration   2: 54078.652 ops/s
# Warmup Iteration   3: 54103.871 ops/s
# Warmup Iteration   4: 53730.917 ops/s
# Warmup Iteration   5: 53743.058 ops/s
# Warmup Iteration   6: 53874.670 ops/s
# Warmup Iteration   7: 54002.245 ops/s
# Warmup Iteration   8: 53979.281 ops/s
# Warmup Iteration   9: 53576.352 ops/s
# Warmup Iteration  10: 53920.382 ops/s
# Warmup Iteration  11: 53340.503 ops/s
# Warmup Iteration  12: 53584.416 ops/s
# Warmup Iteration  13: 53801.175 ops/s
# Warmup Iteration  14: 53728.738 ops/s
# Warmup Iteration  15: 53633.997 ops/s
# Warmup Iteration  16: 53789.934 ops/s
# Warmup Iteration  17: 54167.936 ops/s
# Warmup Iteration  18: 54245.698 ops/s
# Warmup Iteration  19: 53993.735 ops/s
# Warmup Iteration  20: 53826.543 ops/s
# Warmup Iteration  21: 54035.245 ops/s
# Warmup Iteration  22: 54120.050 ops/s
# Warmup Iteration  23: 54069.637 ops/s
# Warmup Iteration  24: 53676.066 ops/s
# Warmup Iteration  25: 54137.392 ops/s
# Warmup Iteration  26: 54086.046 ops/s
# Warmup Iteration  27: 54220.919 ops/s
# Warmup Iteration  28: 53787.971 ops/s
# Warmup Iteration  29: 54744.680 ops/s
# Warmup Iteration  30: 54531.164 ops/s
Iteration   1: 54771.236 ops/s
Iteration   2: 54712.678 ops/s
Iteration   3: 54963.560 ops/s
Iteration   4: 54902.767 ops/s
Iteration   5: 55026.856 ops/s
Iteration   6: 54944.725 ops/s
Iteration   7: 55083.110 ops/s
Iteration   8: 54773.919 ops/s
Iteration   9: 54807.176 ops/s
Iteration  10: 55129.868 ops/s
Iteration  11: 54974.485 ops/s
Iteration  12: 54669.974 ops/s
Iteration  13: 55060.109 ops/s
Iteration  14: 54790.593 ops/s
Iteration  15: 54595.212 ops/s
Iteration  16: 54828.574 ops/s
Iteration  17: 55041.706 ops/s
Iteration  18: 54484.542 ops/s
Iteration  19: 54567.828 ops/s
Iteration  20: 54542.706 ops/s
Iteration  21: 54738.899 ops/s
Iteration  22: 55181.977 ops/s
Iteration  23: 55460.820 ops/s
Iteration  24: 54894.930 ops/s
Iteration  25: 55197.162 ops/s
Iteration  26: 55081.580 ops/s
Iteration  27: 55183.148 ops/s
Iteration  28: 55156.028 ops/s
Iteration  29: 55099.963 ops/s
Iteration  30: 54958.011 ops/s


Result "org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_removeAllIterable":
  54920.805 ±(99.9%) 153.300 ops/s [Average]
  (min, avg, max) = (54484.542, 54920.805, 55460.820), stdev = 229.453
  CI (99.9%): [54767.504, 55074.105] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt      Score     Error  Units
UnmodifiableMapEntrySetTest._Benchmark.benchmark_removeAllIterable  thrpt   30  54920.805 ± 153.300  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_removeIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_removeIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 48749.470 ops/s
# Warmup Iteration   2: 50981.012 ops/s
# Warmup Iteration   3: 51226.312 ops/s
# Warmup Iteration   4: 51142.552 ops/s
# Warmup Iteration   5: 51010.714 ops/s
# Warmup Iteration   6: 51094.057 ops/s
# Warmup Iteration   7: 51091.520 ops/s
# Warmup Iteration   8: 50980.776 ops/s
# Warmup Iteration   9: 51075.989 ops/s
# Warmup Iteration  10: 51060.759 ops/s
# Warmup Iteration  11: 50894.006 ops/s
# Warmup Iteration  12: 50569.850 ops/s
# Warmup Iteration  13: 50810.498 ops/s
# Warmup Iteration  14: 50867.205 ops/s
# Warmup Iteration  15: 51043.303 ops/s
# Warmup Iteration  16: 50908.876 ops/s
# Warmup Iteration  17: 51710.088 ops/s
# Warmup Iteration  18: 51385.259 ops/s
# Warmup Iteration  19: 51779.931 ops/s
# Warmup Iteration  20: 51680.895 ops/s
# Warmup Iteration  21: 51650.224 ops/s
# Warmup Iteration  22: 51664.375 ops/s
# Warmup Iteration  23: 51767.333 ops/s
# Warmup Iteration  24: 51709.905 ops/s
# Warmup Iteration  25: 51664.473 ops/s
# Warmup Iteration  26: 51855.599 ops/s
# Warmup Iteration  27: 52678.033 ops/s
# Warmup Iteration  28: 52738.318 ops/s
# Warmup Iteration  29: 52692.078 ops/s
# Warmup Iteration  30: 52590.948 ops/s
Iteration   1: 52814.535 ops/s
Iteration   2: 52791.275 ops/s
Iteration   3: 52677.041 ops/s
Iteration   4: 52614.364 ops/s
Iteration   5: 52603.746 ops/s
Iteration   6: 52810.779 ops/s
Iteration   7: 52734.160 ops/s
Iteration   8: 52887.035 ops/s
Iteration   9: 52713.498 ops/s
Iteration  10: 52530.335 ops/s
Iteration  11: 52397.515 ops/s
Iteration  12: 52782.098 ops/s
Iteration  13: 52733.272 ops/s
Iteration  14: 52540.059 ops/s
Iteration  15: 52618.241 ops/s
Iteration  16: 52844.470 ops/s
Iteration  17: 52642.406 ops/s
Iteration  18: 52874.025 ops/s
Iteration  19: 52594.144 ops/s
Iteration  20: 52645.519 ops/s
Iteration  21: 52701.091 ops/s
Iteration  22: 52809.515 ops/s
Iteration  23: 52511.265 ops/s
Iteration  24: 52886.046 ops/s
Iteration  25: 52742.767 ops/s
Iteration  26: 52766.865 ops/s
Iteration  27: 52379.012 ops/s
Iteration  28: 52724.233 ops/s
Iteration  29: 52932.636 ops/s
Iteration  30: 52854.872 ops/s


Result "org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_removeIf":
  52705.227 ±(99.9%) 94.945 ops/s [Average]
  (min, avg, max) = (52379.012, 52705.227, 52932.636), stdev = 142.109
  CI (99.9%): [52610.282, 52800.172] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt      Score    Error  Units
UnmodifiableMapEntrySetTest._Benchmark.benchmark_removeIf  thrpt   30  52705.227 ± 94.945  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_removeIfWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_removeIfWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 48841.682 ops/s
# Warmup Iteration   2: 50458.864 ops/s
# Warmup Iteration   3: 50262.200 ops/s
# Warmup Iteration   4: 50167.439 ops/s
# Warmup Iteration   5: 50308.156 ops/s
# Warmup Iteration   6: 50143.392 ops/s
# Warmup Iteration   7: 49868.296 ops/s
# Warmup Iteration   8: 49950.681 ops/s
# Warmup Iteration   9: 50247.581 ops/s
# Warmup Iteration  10: 50221.367 ops/s
# Warmup Iteration  11: 50478.500 ops/s
# Warmup Iteration  12: 50240.016 ops/s
# Warmup Iteration  13: 50359.094 ops/s
# Warmup Iteration  14: 50056.657 ops/s
# Warmup Iteration  15: 50140.924 ops/s
# Warmup Iteration  16: 50177.694 ops/s
# Warmup Iteration  17: 50878.387 ops/s
# Warmup Iteration  18: 50794.250 ops/s
# Warmup Iteration  19: 50845.976 ops/s
# Warmup Iteration  20: 50979.933 ops/s
# Warmup Iteration  21: 50665.450 ops/s
# Warmup Iteration  22: 50826.826 ops/s
# Warmup Iteration  23: 50605.915 ops/s
# Warmup Iteration  24: 50906.446 ops/s
# Warmup Iteration  25: 50833.526 ops/s
# Warmup Iteration  26: 50734.190 ops/s
# Warmup Iteration  27: 51385.930 ops/s
# Warmup Iteration  28: 51802.506 ops/s
# Warmup Iteration  29: 51690.820 ops/s
# Warmup Iteration  30: 51880.479 ops/s
Iteration   1: 51839.347 ops/s
Iteration   2: 51909.209 ops/s
Iteration   3: 51573.303 ops/s
Iteration   4: 51771.713 ops/s
Iteration   5: 51458.747 ops/s
Iteration   6: 51398.210 ops/s
Iteration   7: 51664.801 ops/s
Iteration   8: 51657.825 ops/s
Iteration   9: 51574.096 ops/s
Iteration  10: 51753.643 ops/s
Iteration  11: 51777.366 ops/s
Iteration  12: 51415.980 ops/s
Iteration  13: 51973.531 ops/s
Iteration  14: 51805.832 ops/s
Iteration  15: 51569.557 ops/s
Iteration  16: 51649.441 ops/s
Iteration  17: 51570.801 ops/s
Iteration  18: 51748.316 ops/s
Iteration  19: 51869.760 ops/s
Iteration  20: 51824.028 ops/s
Iteration  21: 51908.571 ops/s
Iteration  22: 51895.049 ops/s
Iteration  23: 52022.833 ops/s
Iteration  24: 51802.678 ops/s
Iteration  25: 51654.990 ops/s
Iteration  26: 51771.129 ops/s
Iteration  27: 51761.378 ops/s
Iteration  28: 51759.139 ops/s
Iteration  29: 51680.983 ops/s
Iteration  30: 51667.184 ops/s


Result "org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_removeIfWith":
  51724.315 ±(99.9%) 104.189 ops/s [Average]
  (min, avg, max) = (51398.210, 51724.315, 52022.833), stdev = 155.945
  CI (99.9%): [51620.126, 51828.503] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt      Score     Error  Units
UnmodifiableMapEntrySetTest._Benchmark.benchmark_removeIfWith  thrpt   30  51724.315 ± 104.189  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2345535.529 ops/s
# Warmup Iteration   2: 3327382.769 ops/s
# Warmup Iteration   3: 4059578.998 ops/s
# Warmup Iteration   4: 4038084.013 ops/s
# Warmup Iteration   5: 4053363.045 ops/s
# Warmup Iteration   6: 4053009.492 ops/s
# Warmup Iteration   7: 3985199.600 ops/s
# Warmup Iteration   8: 3463500.356 ops/s
# Warmup Iteration   9: 4055787.230 ops/s
# Warmup Iteration  10: 4045580.806 ops/s
# Warmup Iteration  11: 4059292.759 ops/s
# Warmup Iteration  12: 4039911.601 ops/s
# Warmup Iteration  13: 4042951.088 ops/s
# Warmup Iteration  14: 4057528.718 ops/s
# Warmup Iteration  15: 4040734.757 ops/s
# Warmup Iteration  16: 4049248.670 ops/s
# Warmup Iteration  17: 4049504.653 ops/s
# Warmup Iteration  18: 4058509.567 ops/s
# Warmup Iteration  19: 4052038.152 ops/s
# Warmup Iteration  20: 4049077.241 ops/s
# Warmup Iteration  21: 4053511.795 ops/s
# Warmup Iteration  22: 4058554.376 ops/s
# Warmup Iteration  23: 4056669.119 ops/s
# Warmup Iteration  24: 4050738.741 ops/s
# Warmup Iteration  25: 4048486.889 ops/s
# Warmup Iteration  26: 4044108.042 ops/s
# Warmup Iteration  27: 4041353.754 ops/s
# Warmup Iteration  28: 4054845.290 ops/s
# Warmup Iteration  29: 4050965.964 ops/s
# Warmup Iteration  30: 4045664.888 ops/s
Iteration   1: 4058977.417 ops/s
Iteration   2: 4050461.997 ops/s
Iteration   3: 4053275.193 ops/s
Iteration   4: 4046409.295 ops/s
Iteration   5: 4036871.407 ops/s
Iteration   6: 4049263.454 ops/s
Iteration   7: 4020000.377 ops/s
Iteration   8: 4052852.543 ops/s
Iteration   9: 4041232.097 ops/s
Iteration  10: 4052272.065 ops/s
Iteration  11: 4041722.950 ops/s
Iteration  12: 4045832.772 ops/s
Iteration  13: 4050888.244 ops/s
Iteration  14: 4039696.885 ops/s
Iteration  15: 4021945.209 ops/s
Iteration  16: 4051913.037 ops/s
Iteration  17: 4033523.387 ops/s
Iteration  18: 4044289.569 ops/s
Iteration  19: 3994959.440 ops/s
Iteration  20: 4052495.643 ops/s
Iteration  21: 4055463.165 ops/s
Iteration  22: 4044743.810 ops/s
Iteration  23: 4038603.207 ops/s
Iteration  24: 4032345.872 ops/s
Iteration  25: 4043136.760 ops/s
Iteration  26: 4042322.208 ops/s
Iteration  27: 4045940.285 ops/s
Iteration  28: 4056939.116 ops/s
Iteration  29: 4044532.557 ops/s
Iteration  30: 4015428.347 ops/s


Result "org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_retainAll":
  4041944.610 ±(99.9%) 9233.453 ops/s [Average]
  (min, avg, max) = (3994959.440, 4041944.610, 4058977.417), stdev = 13820.198
  CI (99.9%): [4032711.157, 4051178.063] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
UnmodifiableMapEntrySetTest._Benchmark.benchmark_retainAll  thrpt   30  4041944.610 ± 9233.453  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_retainAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_retainAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 672030.238 ops/s
# Warmup Iteration   2: 719938.091 ops/s
# Warmup Iteration   3: 897371.733 ops/s
# Warmup Iteration   4: 939360.698 ops/s
# Warmup Iteration   5: 941474.537 ops/s
# Warmup Iteration   6: 932978.421 ops/s
# Warmup Iteration   7: 934952.220 ops/s
# Warmup Iteration   8: 935767.818 ops/s
# Warmup Iteration   9: 940869.454 ops/s
# Warmup Iteration  10: 941561.396 ops/s
# Warmup Iteration  11: 940548.703 ops/s
# Warmup Iteration  12: 939867.383 ops/s
# Warmup Iteration  13: 791443.762 ops/s
# Warmup Iteration  14: 941831.744 ops/s
# Warmup Iteration  15: 939754.416 ops/s
# Warmup Iteration  16: 936968.778 ops/s
# Warmup Iteration  17: 993187.184 ops/s
# Warmup Iteration  18: 991455.085 ops/s
# Warmup Iteration  19: 994444.675 ops/s
# Warmup Iteration  20: 992163.406 ops/s
# Warmup Iteration  21: 994121.212 ops/s
# Warmup Iteration  22: 989317.424 ops/s
# Warmup Iteration  23: 993034.541 ops/s
# Warmup Iteration  24: 991083.837 ops/s
# Warmup Iteration  25: 991713.098 ops/s
# Warmup Iteration  26: 990031.747 ops/s
# Warmup Iteration  27: 994343.266 ops/s
# Warmup Iteration  28: 992161.778 ops/s
# Warmup Iteration  29: 990235.948 ops/s
# Warmup Iteration  30: 991466.705 ops/s
Iteration   1: 986558.095 ops/s
Iteration   2: 990132.978 ops/s
Iteration   3: 990830.390 ops/s
Iteration   4: 991318.512 ops/s
Iteration   5: 994658.336 ops/s
Iteration   6: 994479.898 ops/s
Iteration   7: 994780.641 ops/s
Iteration   8: 982290.884 ops/s
Iteration   9: 993230.808 ops/s
Iteration  10: 995648.767 ops/s
Iteration  11: 993053.649 ops/s
Iteration  12: 987975.357 ops/s
Iteration  13: 995289.472 ops/s
Iteration  14: 991774.675 ops/s
Iteration  15: 993734.851 ops/s
Iteration  16: 994346.177 ops/s
Iteration  17: 994968.061 ops/s
Iteration  18: 993995.732 ops/s
Iteration  19: 996313.588 ops/s
Iteration  20: 996041.944 ops/s
Iteration  21: 989853.394 ops/s
Iteration  22: 992534.338 ops/s
Iteration  23: 990071.791 ops/s
Iteration  24: 990024.483 ops/s
Iteration  25: 988378.185 ops/s
Iteration  26: 994629.506 ops/s
Iteration  27: 994183.898 ops/s
Iteration  28: 989515.117 ops/s
Iteration  29: 992075.541 ops/s
Iteration  30: 994396.152 ops/s


Result "org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_retainAllIterable":
  992236.174 ±(99.9%) 2137.999 ops/s [Average]
  (min, avg, max) = (982290.884, 992236.174, 996313.588), stdev = 3200.057
  CI (99.9%): [990098.175, 994374.173] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
UnmodifiableMapEntrySetTest._Benchmark.benchmark_retainAllIterable  thrpt   30  992236.174 ± 2137.999  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 864113.041 ops/s
# Warmup Iteration   2: 1887242.367 ops/s
# Warmup Iteration   3: 1947958.180 ops/s
# Warmup Iteration   4: 1842286.227 ops/s
# Warmup Iteration   5: 1745739.469 ops/s
# Warmup Iteration   6: 1946192.570 ops/s
# Warmup Iteration   7: 1949917.722 ops/s
# Warmup Iteration   8: 1944208.465 ops/s
# Warmup Iteration   9: 1952732.447 ops/s
# Warmup Iteration  10: 1943420.764 ops/s
# Warmup Iteration  11: 1948916.248 ops/s
# Warmup Iteration  12: 1949677.331 ops/s
# Warmup Iteration  13: 1945700.444 ops/s
# Warmup Iteration  14: 1947910.523 ops/s
# Warmup Iteration  15: 1949830.076 ops/s
# Warmup Iteration  16: 1948686.287 ops/s
# Warmup Iteration  17: 1904969.639 ops/s
# Warmup Iteration  18: 1902952.713 ops/s
# Warmup Iteration  19: 1905774.695 ops/s
# Warmup Iteration  20: 1904514.235 ops/s
# Warmup Iteration  21: 1899381.000 ops/s
# Warmup Iteration  22: 1905247.794 ops/s
# Warmup Iteration  23: 1906151.149 ops/s
# Warmup Iteration  24: 1895925.765 ops/s
# Warmup Iteration  25: 1898689.496 ops/s
# Warmup Iteration  26: 1907349.142 ops/s
# Warmup Iteration  27: 1906280.150 ops/s
# Warmup Iteration  28: 1900651.000 ops/s
# Warmup Iteration  29: 1906013.070 ops/s
# Warmup Iteration  30: 1904137.918 ops/s
Iteration   1: 1908821.627 ops/s
Iteration   2: 1896407.560 ops/s
Iteration   3: 1890733.880 ops/s
Iteration   4: 1914228.167 ops/s
Iteration   5: 1902177.641 ops/s
Iteration   6: 1885178.252 ops/s
Iteration   7: 1908764.481 ops/s
Iteration   8: 1908827.125 ops/s
Iteration   9: 1894073.747 ops/s
Iteration  10: 1906474.076 ops/s
Iteration  11: 1898961.120 ops/s
Iteration  12: 1893458.467 ops/s
Iteration  13: 1910226.893 ops/s
Iteration  14: 1903975.226 ops/s
Iteration  15: 1898534.205 ops/s
Iteration  16: 1895294.206 ops/s
Iteration  17: 1901678.122 ops/s
Iteration  18: 1904306.444 ops/s
Iteration  19: 1898380.258 ops/s
Iteration  20: 1889971.993 ops/s
Iteration  21: 1891403.878 ops/s
Iteration  22: 1912633.732 ops/s
Iteration  23: 1895778.900 ops/s
Iteration  24: 1904857.310 ops/s
Iteration  25: 1907415.863 ops/s
Iteration  26: 1913530.191 ops/s
Iteration  27: 1904604.032 ops/s
Iteration  28: 1911654.305 ops/s
Iteration  29: 1904264.246 ops/s
Iteration  30: 1905508.430 ops/s


Result "org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_select":
  1902070.813 ±(99.9%) 5172.503 ops/s [Average]
  (min, avg, max) = (1885178.252, 1902070.813, 1914228.167), stdev = 7741.960
  CI (99.9%): [1896898.309, 1907243.316] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
UnmodifiableMapEntrySetTest._Benchmark.benchmark_select  thrpt   30  1902070.813 ± 5172.503  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_selectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_selectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 837608.575 ops/s
# Warmup Iteration   2: 1861148.706 ops/s
# Warmup Iteration   3: 1919897.435 ops/s
# Warmup Iteration   4: 1879027.994 ops/s
# Warmup Iteration   5: 1694801.954 ops/s
# Warmup Iteration   6: 1949190.435 ops/s
# Warmup Iteration   7: 1938252.621 ops/s
# Warmup Iteration   8: 1944449.576 ops/s
# Warmup Iteration   9: 1947119.560 ops/s
# Warmup Iteration  10: 1949248.973 ops/s
# Warmup Iteration  11: 1946876.812 ops/s
# Warmup Iteration  12: 1944962.794 ops/s
# Warmup Iteration  13: 1950268.133 ops/s
# Warmup Iteration  14: 1948720.734 ops/s
# Warmup Iteration  15: 1948097.469 ops/s
# Warmup Iteration  16: 1936833.634 ops/s
# Warmup Iteration  17: 1943856.970 ops/s
# Warmup Iteration  18: 1950885.157 ops/s
# Warmup Iteration  19: 1938878.240 ops/s
# Warmup Iteration  20: 1940759.609 ops/s
# Warmup Iteration  21: 1948649.562 ops/s
# Warmup Iteration  22: 1953169.501 ops/s
# Warmup Iteration  23: 1947756.028 ops/s
# Warmup Iteration  24: 1946986.177 ops/s
# Warmup Iteration  25: 1950866.509 ops/s
# Warmup Iteration  26: 1948132.326 ops/s
# Warmup Iteration  27: 1951214.308 ops/s
# Warmup Iteration  28: 1942131.594 ops/s
# Warmup Iteration  29: 1954323.433 ops/s
# Warmup Iteration  30: 1958480.837 ops/s
Iteration   1: 1940065.243 ops/s
Iteration   2: 1938791.471 ops/s
Iteration   3: 1946314.785 ops/s
Iteration   4: 1940985.324 ops/s
Iteration   5: 1942402.663 ops/s
Iteration   6: 1948639.074 ops/s
Iteration   7: 1959026.991 ops/s
Iteration   8: 1944199.372 ops/s
Iteration   9: 1955977.910 ops/s
Iteration  10: 1945452.060 ops/s
Iteration  11: 1948507.173 ops/s
Iteration  12: 1946036.212 ops/s
Iteration  13: 1939185.595 ops/s
Iteration  14: 1942175.601 ops/s
Iteration  15: 1941929.114 ops/s
Iteration  16: 1949012.534 ops/s
Iteration  17: 1941064.521 ops/s
Iteration  18: 1947763.659 ops/s
Iteration  19: 1929697.840 ops/s
Iteration  20: 1929852.902 ops/s
Iteration  21: 1946013.920 ops/s
Iteration  22: 1940216.270 ops/s
Iteration  23: 1951120.817 ops/s
Iteration  24: 1951480.358 ops/s
Iteration  25: 1947479.090 ops/s
Iteration  26: 1953694.092 ops/s
Iteration  27: 1944354.248 ops/s
Iteration  28: 1929028.711 ops/s
Iteration  29: 1945900.688 ops/s
Iteration  30: 1955806.349 ops/s


Result "org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_selectWith":
  1944739.153 ±(99.9%) 4872.482 ops/s [Average]
  (min, avg, max) = (1929028.711, 1944739.153, 1959026.991), stdev = 7292.902
  CI (99.9%): [1939866.671, 1949611.634] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
UnmodifiableMapEntrySetTest._Benchmark.benchmark_selectWith  thrpt   30  1944739.153 ± 4872.482  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_tap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_tap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1982431.555 ops/s
# Warmup Iteration   2: 4103064.859 ops/s
# Warmup Iteration   3: 4364164.760 ops/s
# Warmup Iteration   4: 4394943.350 ops/s
# Warmup Iteration   5: 3667815.095 ops/s
# Warmup Iteration   6: 4392098.206 ops/s
# Warmup Iteration   7: 4406007.284 ops/s
# Warmup Iteration   8: 4388169.848 ops/s
# Warmup Iteration   9: 4413166.947 ops/s
# Warmup Iteration  10: 4397870.355 ops/s
# Warmup Iteration  11: 4393116.580 ops/s
# Warmup Iteration  12: 4410361.032 ops/s
# Warmup Iteration  13: 4400318.996 ops/s
# Warmup Iteration  14: 4413611.602 ops/s
# Warmup Iteration  15: 4399163.078 ops/s
# Warmup Iteration  16: 4388724.824 ops/s
# Warmup Iteration  17: 4401275.110 ops/s
# Warmup Iteration  18: 4412751.841 ops/s
# Warmup Iteration  19: 4407209.251 ops/s
# Warmup Iteration  20: 4409571.235 ops/s
# Warmup Iteration  21: 4407985.482 ops/s
# Warmup Iteration  22: 4398376.799 ops/s
# Warmup Iteration  23: 4405624.470 ops/s
# Warmup Iteration  24: 4411316.271 ops/s
# Warmup Iteration  25: 4401189.267 ops/s
# Warmup Iteration  26: 4399874.057 ops/s
# Warmup Iteration  27: 4408183.474 ops/s
# Warmup Iteration  28: 4386641.085 ops/s
# Warmup Iteration  29: 4414852.905 ops/s
# Warmup Iteration  30: 4389872.895 ops/s
Iteration   1: 4408456.791 ops/s
Iteration   2: 4414132.955 ops/s
Iteration   3: 4393998.234 ops/s
Iteration   4: 4389611.273 ops/s
Iteration   5: 4391955.583 ops/s
Iteration   6: 4404665.546 ops/s
Iteration   7: 4379987.052 ops/s
Iteration   8: 4420944.003 ops/s
Iteration   9: 4375920.048 ops/s
Iteration  10: 4365890.519 ops/s
Iteration  11: 4389226.961 ops/s
Iteration  12: 4409020.255 ops/s
Iteration  13: 4381102.685 ops/s
Iteration  14: 4409191.117 ops/s
Iteration  15: 4418631.926 ops/s
Iteration  16: 4411037.297 ops/s
Iteration  17: 4412761.271 ops/s
Iteration  18: 4386405.842 ops/s
Iteration  19: 4412725.254 ops/s
Iteration  20: 4410582.968 ops/s
Iteration  21: 4396817.073 ops/s
Iteration  22: 4407798.561 ops/s
Iteration  23: 4416549.392 ops/s
Iteration  24: 4398904.426 ops/s
Iteration  25: 4409887.002 ops/s
Iteration  26: 4414235.723 ops/s
Iteration  27: 4371609.118 ops/s
Iteration  28: 4413299.424 ops/s
Iteration  29: 4395347.011 ops/s
Iteration  30: 4398408.836 ops/s


Result "org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_tap":
  4400303.472 ±(99.9%) 9975.118 ops/s [Average]
  (min, avg, max) = (4365890.519, 4400303.472, 4420944.003), stdev = 14930.289
  CI (99.9%): [4390328.353, 4410278.590] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
UnmodifiableMapEntrySetTest._Benchmark.benchmark_tap  thrpt   30  4400303.472 ± 9975.118  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_testAppendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_testAppendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 971152.217 ops/s
# Warmup Iteration   2: 2266933.472 ops/s
# Warmup Iteration   3: 2269104.527 ops/s
# Warmup Iteration   4: 1904742.577 ops/s
# Warmup Iteration   5: 2275599.773 ops/s
# Warmup Iteration   6: 2274910.172 ops/s
# Warmup Iteration   7: 2266915.313 ops/s
# Warmup Iteration   8: 2272762.428 ops/s
# Warmup Iteration   9: 2268966.693 ops/s
# Warmup Iteration  10: 2251867.545 ops/s
# Warmup Iteration  11: 2266474.452 ops/s
# Warmup Iteration  12: 2248801.641 ops/s
# Warmup Iteration  13: 2268587.563 ops/s
# Warmup Iteration  14: 2275745.313 ops/s
# Warmup Iteration  15: 2277123.971 ops/s
# Warmup Iteration  16: 2271248.394 ops/s
# Warmup Iteration  17: 2272643.156 ops/s
# Warmup Iteration  18: 2274170.728 ops/s
# Warmup Iteration  19: 2273877.199 ops/s
# Warmup Iteration  20: 2271656.766 ops/s
# Warmup Iteration  21: 2271334.068 ops/s
# Warmup Iteration  22: 2279971.297 ops/s
# Warmup Iteration  23: 2280232.227 ops/s
# Warmup Iteration  24: 2274227.151 ops/s
# Warmup Iteration  25: 2275956.425 ops/s
# Warmup Iteration  26: 2268618.493 ops/s
# Warmup Iteration  27: 2276762.574 ops/s
# Warmup Iteration  28: 2273345.637 ops/s
# Warmup Iteration  29: 2274946.870 ops/s
# Warmup Iteration  30: 2276091.705 ops/s
Iteration   1: 2279172.211 ops/s
Iteration   2: 2277041.404 ops/s
Iteration   3: 2269690.855 ops/s
Iteration   4: 2265262.254 ops/s
Iteration   5: 2272001.186 ops/s
Iteration   6: 2271650.017 ops/s
Iteration   7: 2269851.088 ops/s
Iteration   8: 2273160.273 ops/s
Iteration   9: 2278939.505 ops/s
Iteration  10: 2278916.196 ops/s
Iteration  11: 2268456.971 ops/s
Iteration  12: 2266347.398 ops/s
Iteration  13: 2261622.854 ops/s
Iteration  14: 2277306.711 ops/s
Iteration  15: 2278642.928 ops/s
Iteration  16: 2282306.304 ops/s
Iteration  17: 2272191.215 ops/s
Iteration  18: 2268023.266 ops/s
Iteration  19: 2271385.475 ops/s
Iteration  20: 2269379.424 ops/s
Iteration  21: 2270004.281 ops/s
Iteration  22: 2251994.765 ops/s
Iteration  23: 2264514.179 ops/s
Iteration  24: 2271636.861 ops/s
Iteration  25: 2268536.133 ops/s
Iteration  26: 2270450.642 ops/s
Iteration  27: 2284301.908 ops/s
Iteration  28: 2277897.890 ops/s
Iteration  29: 2268778.253 ops/s
Iteration  30: 2272821.380 ops/s


Result "org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_testAppendString":
  2271742.794 ±(99.9%) 4392.356 ops/s [Average]
  (min, avg, max) = (2251994.765, 2271742.794, 2284301.908), stdev = 6574.273
  CI (99.9%): [2267350.438, 2276135.151] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
UnmodifiableMapEntrySetTest._Benchmark.benchmark_testAppendString  thrpt   30  2271742.794 ± 4392.356  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_testMakeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_testMakeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 950993.423 ops/s
# Warmup Iteration   2: 2239929.698 ops/s
# Warmup Iteration   3: 2250927.707 ops/s
# Warmup Iteration   4: 1867284.657 ops/s
# Warmup Iteration   5: 2243575.653 ops/s
# Warmup Iteration   6: 2245513.277 ops/s
# Warmup Iteration   7: 2234312.643 ops/s
# Warmup Iteration   8: 2246343.089 ops/s
# Warmup Iteration   9: 2241459.630 ops/s
# Warmup Iteration  10: 2251208.299 ops/s
# Warmup Iteration  11: 2246068.386 ops/s
# Warmup Iteration  12: 2246198.847 ops/s
# Warmup Iteration  13: 2251266.876 ops/s
# Warmup Iteration  14: 2243317.376 ops/s
# Warmup Iteration  15: 2242146.112 ops/s
# Warmup Iteration  16: 2246359.761 ops/s
# Warmup Iteration  17: 2242788.600 ops/s
# Warmup Iteration  18: 2248066.974 ops/s
# Warmup Iteration  19: 2247426.222 ops/s
# Warmup Iteration  20: 2242507.418 ops/s
# Warmup Iteration  21: 2245288.062 ops/s
# Warmup Iteration  22: 2241301.549 ops/s
# Warmup Iteration  23: 2242253.702 ops/s
# Warmup Iteration  24: 2243525.298 ops/s
# Warmup Iteration  25: 2240549.586 ops/s
# Warmup Iteration  26: 2245826.999 ops/s
# Warmup Iteration  27: 2238808.557 ops/s
# Warmup Iteration  28: 2246554.664 ops/s
# Warmup Iteration  29: 2242825.860 ops/s
# Warmup Iteration  30: 2248851.556 ops/s
Iteration   1: 2248660.471 ops/s
Iteration   2: 2242435.540 ops/s
Iteration   3: 2236621.049 ops/s
Iteration   4: 2221554.144 ops/s
Iteration   5: 2244347.414 ops/s
Iteration   6: 2241798.857 ops/s
Iteration   7: 2246906.349 ops/s
Iteration   8: 2246170.201 ops/s
Iteration   9: 2250807.741 ops/s
Iteration  10: 2246886.381 ops/s
Iteration  11: 2249135.775 ops/s
Iteration  12: 2250197.911 ops/s
Iteration  13: 2254507.395 ops/s
Iteration  14: 2244181.384 ops/s
Iteration  15: 2249331.127 ops/s
Iteration  16: 2250148.914 ops/s
Iteration  17: 2238846.804 ops/s
Iteration  18: 2245389.064 ops/s
Iteration  19: 2254168.293 ops/s
Iteration  20: 2247407.858 ops/s
Iteration  21: 2243036.374 ops/s
Iteration  22: 2242487.847 ops/s
Iteration  23: 2247373.756 ops/s
Iteration  24: 2250935.920 ops/s
Iteration  25: 2245732.384 ops/s
Iteration  26: 2239158.650 ops/s
Iteration  27: 2237003.715 ops/s
Iteration  28: 2247467.432 ops/s
Iteration  29: 2249233.660 ops/s
Iteration  30: 2251185.277 ops/s


Result "org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_testMakeString":
  2245437.256 ±(99.9%) 4310.889 ops/s [Average]
  (min, avg, max) = (2221554.144, 2245437.256, 2254507.395), stdev = 6452.336
  CI (99.9%): [2241126.367, 2249748.145] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
UnmodifiableMapEntrySetTest._Benchmark.benchmark_testMakeString  thrpt   30  2245437.256 ± 4310.889  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_testNewCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_testNewCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5129552.277 ops/s
# Warmup Iteration   2: 10692121.502 ops/s
# Warmup Iteration   3: 9064145.946 ops/s
# Warmup Iteration   4: 10692734.861 ops/s
# Warmup Iteration   5: 10710880.739 ops/s
# Warmup Iteration   6: 10682575.465 ops/s
# Warmup Iteration   7: 10754586.022 ops/s
# Warmup Iteration   8: 10703522.870 ops/s
# Warmup Iteration   9: 10674570.347 ops/s
# Warmup Iteration  10: 10706629.091 ops/s
# Warmup Iteration  11: 10685966.160 ops/s
# Warmup Iteration  12: 10687758.623 ops/s
# Warmup Iteration  13: 10705096.697 ops/s
# Warmup Iteration  14: 10652312.187 ops/s
# Warmup Iteration  15: 10676708.764 ops/s
# Warmup Iteration  16: 10710865.187 ops/s
# Warmup Iteration  17: 10714413.923 ops/s
# Warmup Iteration  18: 10703546.751 ops/s
# Warmup Iteration  19: 10726031.992 ops/s
# Warmup Iteration  20: 10686609.241 ops/s
# Warmup Iteration  21: 10718200.297 ops/s
# Warmup Iteration  22: 10718225.880 ops/s
# Warmup Iteration  23: 10706525.246 ops/s
# Warmup Iteration  24: 10701977.983 ops/s
# Warmup Iteration  25: 10684820.218 ops/s
# Warmup Iteration  26: 10675536.820 ops/s
# Warmup Iteration  27: 10696131.763 ops/s
# Warmup Iteration  28: 10696498.596 ops/s
# Warmup Iteration  29: 10735335.841 ops/s
# Warmup Iteration  30: 10691532.940 ops/s
Iteration   1: 10729194.461 ops/s
Iteration   2: 10722163.817 ops/s
Iteration   3: 10701616.443 ops/s
Iteration   4: 10684336.285 ops/s
Iteration   5: 10702901.918 ops/s
Iteration   6: 10695602.349 ops/s
Iteration   7: 10705432.644 ops/s
Iteration   8: 10627887.712 ops/s
Iteration   9: 10635014.428 ops/s
Iteration  10: 10696804.278 ops/s
Iteration  11: 10758418.352 ops/s
Iteration  12: 10642348.469 ops/s
Iteration  13: 10728083.763 ops/s
Iteration  14: 10662222.652 ops/s
Iteration  15: 10607743.689 ops/s
Iteration  16: 10713957.899 ops/s
Iteration  17: 10680365.813 ops/s
Iteration  18: 10765476.555 ops/s
Iteration  19: 10691848.392 ops/s
Iteration  20: 10729274.032 ops/s
Iteration  21: 10648677.212 ops/s
Iteration  22: 10706561.234 ops/s
Iteration  23: 10657970.974 ops/s
Iteration  24: 10701850.670 ops/s
Iteration  25: 10724265.036 ops/s
Iteration  26: 10742404.946 ops/s
Iteration  27: 10720327.818 ops/s
Iteration  28: 10752481.208 ops/s
Iteration  29: 10716208.512 ops/s
Iteration  30: 10698752.284 ops/s


Result "org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_testNewCollection":
  10698339.795 ±(99.9%) 26177.422 ops/s [Average]
  (min, avg, max) = (10607743.689, 10698339.795, 10765476.555), stdev = 39181.136
  CI (99.9%): [10672162.373, 10724517.217] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score       Error  Units
UnmodifiableMapEntrySetTest._Benchmark.benchmark_testNewCollection  thrpt   30  10698339.795 ± 26177.422  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_testNewWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_testNewWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3156740.735 ops/s
# Warmup Iteration   2: 6688632.803 ops/s
# Warmup Iteration   3: 5748443.899 ops/s
# Warmup Iteration   4: 6745088.051 ops/s
# Warmup Iteration   5: 6755447.006 ops/s
# Warmup Iteration   6: 6712004.196 ops/s
# Warmup Iteration   7: 6728434.423 ops/s
# Warmup Iteration   8: 6750636.533 ops/s
# Warmup Iteration   9: 6731882.984 ops/s
# Warmup Iteration  10: 6759260.082 ops/s
# Warmup Iteration  11: 6740498.312 ops/s
# Warmup Iteration  12: 6751487.010 ops/s
# Warmup Iteration  13: 6736431.612 ops/s
# Warmup Iteration  14: 6736327.419 ops/s
# Warmup Iteration  15: 6739909.579 ops/s
# Warmup Iteration  16: 6724452.908 ops/s
# Warmup Iteration  17: 6706917.380 ops/s
# Warmup Iteration  18: 6697240.102 ops/s
# Warmup Iteration  19: 6727964.314 ops/s
# Warmup Iteration  20: 6739556.584 ops/s
# Warmup Iteration  21: 6738039.901 ops/s
# Warmup Iteration  22: 6726583.394 ops/s
# Warmup Iteration  23: 6699891.045 ops/s
# Warmup Iteration  24: 6715982.806 ops/s
# Warmup Iteration  25: 6728753.955 ops/s
# Warmup Iteration  26: 6726238.867 ops/s
# Warmup Iteration  27: 6719528.975 ops/s
# Warmup Iteration  28: 6740997.968 ops/s
# Warmup Iteration  29: 6741209.078 ops/s
# Warmup Iteration  30: 6738169.751 ops/s
Iteration   1: 6728835.663 ops/s
Iteration   2: 6743117.541 ops/s
Iteration   3: 6741441.529 ops/s
Iteration   4: 6725751.737 ops/s
Iteration   5: 6752642.437 ops/s
Iteration   6: 6756298.629 ops/s
Iteration   7: 6746076.674 ops/s
Iteration   8: 6765182.573 ops/s
Iteration   9: 6739100.975 ops/s
Iteration  10: 6677560.038 ops/s
Iteration  11: 6728235.919 ops/s
Iteration  12: 6738923.209 ops/s
Iteration  13: 6705340.378 ops/s
Iteration  14: 6761860.302 ops/s
Iteration  15: 6726735.047 ops/s
Iteration  16: 6639744.431 ops/s
Iteration  17: 6683078.841 ops/s
Iteration  18: 6736155.933 ops/s
Iteration  19: 6741660.412 ops/s
Iteration  20: 6735990.448 ops/s
Iteration  21: 6764768.810 ops/s
Iteration  22: 6729738.586 ops/s
Iteration  23: 6727604.362 ops/s
Iteration  24: 6773827.878 ops/s
Iteration  25: 6739028.951 ops/s
Iteration  26: 6712579.985 ops/s
Iteration  27: 6738485.430 ops/s
Iteration  28: 6690890.363 ops/s
Iteration  29: 6745324.765 ops/s
Iteration  30: 6741937.609 ops/s


Result "org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_testNewWith":
  6731263.982 ±(99.9%) 19051.720 ops/s [Average]
  (min, avg, max) = (6639744.431, 6731263.982, 6773827.878), stdev = 28515.719
  CI (99.9%): [6712212.262, 6750315.702] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
UnmodifiableMapEntrySetTest._Benchmark.benchmark_testNewWith  thrpt   30  6731263.982 ± 19051.720  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_testNewWithVarArgs$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_testNewWithVarArgs

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2000158.712 ops/s
# Warmup Iteration   2: 4346400.723 ops/s
# Warmup Iteration   3: 3678314.185 ops/s
# Warmup Iteration   4: 4340857.800 ops/s
# Warmup Iteration   5: 4327349.241 ops/s
# Warmup Iteration   6: 4337672.616 ops/s
# Warmup Iteration   7: 4346086.484 ops/s
# Warmup Iteration   8: 4353190.098 ops/s
# Warmup Iteration   9: 4353145.409 ops/s
# Warmup Iteration  10: 4343252.553 ops/s
# Warmup Iteration  11: 4338584.446 ops/s
# Warmup Iteration  12: 4351441.531 ops/s
# Warmup Iteration  13: 4343903.685 ops/s
# Warmup Iteration  14: 4343718.664 ops/s
# Warmup Iteration  15: 4349280.069 ops/s
# Warmup Iteration  16: 4337560.207 ops/s
# Warmup Iteration  17: 4350198.095 ops/s
# Warmup Iteration  18: 4346048.025 ops/s
# Warmup Iteration  19: 4338137.856 ops/s
# Warmup Iteration  20: 4343150.574 ops/s
# Warmup Iteration  21: 4343819.772 ops/s
# Warmup Iteration  22: 4335323.971 ops/s
# Warmup Iteration  23: 4351468.349 ops/s
# Warmup Iteration  24: 4336353.988 ops/s
# Warmup Iteration  25: 4350091.189 ops/s
# Warmup Iteration  26: 4347223.120 ops/s
# Warmup Iteration  27: 4336861.970 ops/s
# Warmup Iteration  28: 4324328.836 ops/s
# Warmup Iteration  29: 4306050.206 ops/s
# Warmup Iteration  30: 4328811.099 ops/s
Iteration   1: 4323048.947 ops/s
Iteration   2: 4344712.774 ops/s
Iteration   3: 4344398.986 ops/s
Iteration   4: 4345837.048 ops/s
Iteration   5: 4363214.522 ops/s
Iteration   6: 4347384.448 ops/s
Iteration   7: 4345766.761 ops/s
Iteration   8: 4352934.395 ops/s
Iteration   9: 4354343.793 ops/s
Iteration  10: 4325988.192 ops/s
Iteration  11: 4350294.420 ops/s
Iteration  12: 4345876.750 ops/s
Iteration  13: 4349540.004 ops/s
Iteration  14: 4345069.115 ops/s
Iteration  15: 4349536.602 ops/s
Iteration  16: 4363653.635 ops/s
Iteration  17: 4306914.848 ops/s
Iteration  18: 4330357.068 ops/s
Iteration  19: 4358788.609 ops/s
Iteration  20: 4352456.067 ops/s
Iteration  21: 4338796.340 ops/s
Iteration  22: 4338843.020 ops/s
Iteration  23: 4339823.895 ops/s
Iteration  24: 4327472.947 ops/s
Iteration  25: 4353424.753 ops/s
Iteration  26: 4349635.500 ops/s
Iteration  27: 4352176.475 ops/s
Iteration  28: 4345574.385 ops/s
Iteration  29: 4352734.042 ops/s
Iteration  30: 4343355.229 ops/s


Result "org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_testNewWithVarArgs":
  4344731.786 ±(99.9%) 8113.117 ops/s [Average]
  (min, avg, max) = (4306914.848, 4344731.786, 4363653.635), stdev = 12143.332
  CI (99.9%): [4336618.669, 4352844.903] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
UnmodifiableMapEntrySetTest._Benchmark.benchmark_testNewWithVarArgs  thrpt   30  4344731.786 ± 8113.117  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_testNewWithWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_testNewWithWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2352594.366 ops/s
# Warmup Iteration   2: 5182430.318 ops/s
# Warmup Iteration   3: 4381562.647 ops/s
# Warmup Iteration   4: 5197081.071 ops/s
# Warmup Iteration   5: 5225685.675 ops/s
# Warmup Iteration   6: 5219505.110 ops/s
# Warmup Iteration   7: 5221353.295 ops/s
# Warmup Iteration   8: 5203468.753 ops/s
# Warmup Iteration   9: 5202511.724 ops/s
# Warmup Iteration  10: 5232988.042 ops/s
# Warmup Iteration  11: 5201906.170 ops/s
# Warmup Iteration  12: 5210164.503 ops/s
# Warmup Iteration  13: 5222730.875 ops/s
# Warmup Iteration  14: 5200909.648 ops/s
# Warmup Iteration  15: 5215929.156 ops/s
# Warmup Iteration  16: 5198857.750 ops/s
# Warmup Iteration  17: 5211214.486 ops/s
# Warmup Iteration  18: 5204346.909 ops/s
# Warmup Iteration  19: 5212659.873 ops/s
# Warmup Iteration  20: 5202623.623 ops/s
# Warmup Iteration  21: 5209187.958 ops/s
# Warmup Iteration  22: 5211067.053 ops/s
# Warmup Iteration  23: 5208700.705 ops/s
# Warmup Iteration  24: 5217544.820 ops/s
# Warmup Iteration  25: 5219424.234 ops/s
# Warmup Iteration  26: 5199337.361 ops/s
# Warmup Iteration  27: 5202051.377 ops/s
# Warmup Iteration  28: 5213551.676 ops/s
# Warmup Iteration  29: 5213488.025 ops/s
# Warmup Iteration  30: 5217336.777 ops/s
Iteration   1: 5225267.600 ops/s
Iteration   2: 5227518.874 ops/s
Iteration   3: 5218927.210 ops/s
Iteration   4: 5226540.528 ops/s
Iteration   5: 5211458.452 ops/s
Iteration   6: 5230300.816 ops/s
Iteration   7: 5209436.055 ops/s
Iteration   8: 5215941.233 ops/s
Iteration   9: 5202866.421 ops/s
Iteration  10: 5218126.924 ops/s
Iteration  11: 5213477.448 ops/s
Iteration  12: 5208650.042 ops/s
Iteration  13: 5196281.803 ops/s
Iteration  14: 5198102.449 ops/s
Iteration  15: 5170494.305 ops/s
Iteration  16: 5220220.266 ops/s
Iteration  17: 5210136.724 ops/s
Iteration  18: 5208473.610 ops/s
Iteration  19: 5207150.404 ops/s
Iteration  20: 5196647.428 ops/s
Iteration  21: 5198547.497 ops/s
Iteration  22: 5203925.967 ops/s
Iteration  23: 5229469.291 ops/s
Iteration  24: 5210663.623 ops/s
Iteration  25: 5191708.159 ops/s
Iteration  26: 5206187.960 ops/s
Iteration  27: 5205808.135 ops/s
Iteration  28: 5175551.368 ops/s
Iteration  29: 5184433.390 ops/s
Iteration  30: 5229679.192 ops/s


Result "org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_testNewWithWith":
  5208399.772 ±(99.9%) 10172.396 ops/s [Average]
  (min, avg, max) = (5170494.305, 5208399.772, 5230300.816), stdev = 15225.564
  CI (99.9%): [5198227.377, 5218572.168] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
UnmodifiableMapEntrySetTest._Benchmark.benchmark_testNewWithWith  thrpt   30  5208399.772 ± 10172.396  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_testNewWithWithWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_testNewWithWithWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2299132.518 ops/s
# Warmup Iteration   2: 5075342.965 ops/s
# Warmup Iteration   3: 4315542.410 ops/s
# Warmup Iteration   4: 5109044.485 ops/s
# Warmup Iteration   5: 5110332.801 ops/s
# Warmup Iteration   6: 5094585.042 ops/s
# Warmup Iteration   7: 5099451.463 ops/s
# Warmup Iteration   8: 5099041.730 ops/s
# Warmup Iteration   9: 5087279.737 ops/s
# Warmup Iteration  10: 5097832.667 ops/s
# Warmup Iteration  11: 5089200.180 ops/s
# Warmup Iteration  12: 5089599.511 ops/s
# Warmup Iteration  13: 5102148.762 ops/s
# Warmup Iteration  14: 5088019.935 ops/s
# Warmup Iteration  15: 5100937.535 ops/s
# Warmup Iteration  16: 5095550.197 ops/s
# Warmup Iteration  17: 5101447.372 ops/s
# Warmup Iteration  18: 5092685.027 ops/s
# Warmup Iteration  19: 5078147.619 ops/s
# Warmup Iteration  20: 5114394.688 ops/s
# Warmup Iteration  21: 5096644.375 ops/s
# Warmup Iteration  22: 5107842.441 ops/s
# Warmup Iteration  23: 5086983.428 ops/s
# Warmup Iteration  24: 5093725.940 ops/s
# Warmup Iteration  25: 5099914.119 ops/s
# Warmup Iteration  26: 5082551.464 ops/s
# Warmup Iteration  27: 5102059.952 ops/s
# Warmup Iteration  28: 5077703.233 ops/s
# Warmup Iteration  29: 5096216.409 ops/s
# Warmup Iteration  30: 5115013.004 ops/s
Iteration   1: 5108870.330 ops/s
Iteration   2: 5106483.231 ops/s
Iteration   3: 5112502.148 ops/s
Iteration   4: 5109610.899 ops/s
Iteration   5: 5111951.587 ops/s
Iteration   6: 5084469.336 ops/s
Iteration   7: 5112402.886 ops/s
Iteration   8: 5102551.084 ops/s
Iteration   9: 5103664.718 ops/s
Iteration  10: 5088308.449 ops/s
Iteration  11: 5104850.028 ops/s
Iteration  12: 5055939.657 ops/s
Iteration  13: 5092113.766 ops/s
Iteration  14: 5112671.943 ops/s
Iteration  15: 5092060.547 ops/s
Iteration  16: 5100375.899 ops/s
Iteration  17: 5093306.610 ops/s
Iteration  18: 5107448.522 ops/s
Iteration  19: 5079779.799 ops/s
Iteration  20: 5107992.538 ops/s
Iteration  21: 5098443.857 ops/s
Iteration  22: 5113413.052 ops/s
Iteration  23: 5099631.345 ops/s
Iteration  24: 5101813.340 ops/s
Iteration  25: 5088547.728 ops/s
Iteration  26: 5111177.828 ops/s
Iteration  27: 5073797.700 ops/s
Iteration  28: 5100554.208 ops/s
Iteration  29: 5088512.827 ops/s
Iteration  30: 5103169.930 ops/s


Result "org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_testNewWithWithWith":
  5098880.526 ±(99.9%) 8878.115 ops/s [Average]
  (min, avg, max) = (5055939.657, 5098880.526, 5113413.052), stdev = 13288.345
  CI (99.9%): [5090002.412, 5107758.641] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
UnmodifiableMapEntrySetTest._Benchmark.benchmark_testNewWithWithWith  thrpt   30  5098880.526 ± 8878.115  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2156751.299 ops/s
# Warmup Iteration   2: 5119997.814 ops/s
# Warmup Iteration   3: 4532677.499 ops/s
# Warmup Iteration   4: 4856183.356 ops/s
# Warmup Iteration   5: 5143175.211 ops/s
# Warmup Iteration   6: 5125888.006 ops/s
# Warmup Iteration   7: 5142294.679 ops/s
# Warmup Iteration   8: 5150168.484 ops/s
# Warmup Iteration   9: 5157387.263 ops/s
# Warmup Iteration  10: 5149044.369 ops/s
# Warmup Iteration  11: 5147192.337 ops/s
# Warmup Iteration  12: 5132112.394 ops/s
# Warmup Iteration  13: 5146476.019 ops/s
# Warmup Iteration  14: 5152844.844 ops/s
# Warmup Iteration  15: 5150555.966 ops/s
# Warmup Iteration  16: 5150231.413 ops/s
# Warmup Iteration  17: 5158191.152 ops/s
# Warmup Iteration  18: 5155357.515 ops/s
# Warmup Iteration  19: 5151732.080 ops/s
# Warmup Iteration  20: 5148941.045 ops/s
# Warmup Iteration  21: 5127733.291 ops/s
# Warmup Iteration  22: 5158943.583 ops/s
# Warmup Iteration  23: 5161201.868 ops/s
# Warmup Iteration  24: 5156618.948 ops/s
# Warmup Iteration  25: 5140246.672 ops/s
# Warmup Iteration  26: 5153352.636 ops/s
# Warmup Iteration  27: 5154125.124 ops/s
# Warmup Iteration  28: 5136392.148 ops/s
# Warmup Iteration  29: 5136666.895 ops/s
# Warmup Iteration  30: 5153183.010 ops/s
Iteration   1: 5124678.528 ops/s
Iteration   2: 5152643.518 ops/s
Iteration   3: 5155407.074 ops/s
Iteration   4: 5135429.564 ops/s
Iteration   5: 5168387.991 ops/s
Iteration   6: 5140462.649 ops/s
Iteration   7: 5147590.460 ops/s
Iteration   8: 5146108.261 ops/s
Iteration   9: 5127629.335 ops/s
Iteration  10: 5152649.450 ops/s
Iteration  11: 5089766.329 ops/s
Iteration  12: 5148104.453 ops/s
Iteration  13: 5158678.561 ops/s
Iteration  14: 5142025.347 ops/s
Iteration  15: 5149674.605 ops/s
Iteration  16: 5123489.038 ops/s
Iteration  17: 5125404.980 ops/s
Iteration  18: 5145594.639 ops/s
Iteration  19: 5142651.214 ops/s
Iteration  20: 5157835.094 ops/s
Iteration  21: 5164062.680 ops/s
Iteration  22: 5157840.381 ops/s
Iteration  23: 5147202.825 ops/s
Iteration  24: 5137703.300 ops/s
Iteration  25: 5130364.977 ops/s
Iteration  26: 5155653.333 ops/s
Iteration  27: 5160589.266 ops/s
Iteration  28: 5162428.465 ops/s
Iteration  29: 5151039.451 ops/s
Iteration  30: 5136538.711 ops/s


Result "org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_toArray":
  5144587.816 ±(99.9%) 10720.247 ops/s [Average]
  (min, avg, max) = (5089766.329, 5144587.816, 5168387.991), stdev = 16045.562
  CI (99.9%): [5133867.570, 5155308.063] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
UnmodifiableMapEntrySetTest._Benchmark.benchmark_toArray  thrpt   30  5144587.816 ± 10720.247  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_toImmutable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_toImmutable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4671797.246 ops/s
# Warmup Iteration   2: 6989907.063 ops/s
# Warmup Iteration   3: 6895697.765 ops/s
# Warmup Iteration   4: 6904751.449 ops/s
# Warmup Iteration   5: 6261875.541 ops/s
# Warmup Iteration   6: 6738122.726 ops/s
# Warmup Iteration   7: 6779156.216 ops/s
# Warmup Iteration   8: 6820309.776 ops/s
# Warmup Iteration   9: 6817924.788 ops/s
# Warmup Iteration  10: 6892099.925 ops/s
# Warmup Iteration  11: 6744760.684 ops/s
# Warmup Iteration  12: 6825092.821 ops/s
# Warmup Iteration  13: 6876234.507 ops/s
# Warmup Iteration  14: 6765588.593 ops/s
# Warmup Iteration  15: 6780949.002 ops/s
# Warmup Iteration  16: 6848119.151 ops/s
# Warmup Iteration  17: 6828375.173 ops/s
# Warmup Iteration  18: 6936260.471 ops/s
# Warmup Iteration  19: 6877051.686 ops/s
# Warmup Iteration  20: 6841639.141 ops/s
# Warmup Iteration  21: 6850836.416 ops/s
# Warmup Iteration  22: 6972475.332 ops/s
# Warmup Iteration  23: 6879551.963 ops/s
# Warmup Iteration  24: 6895956.117 ops/s
# Warmup Iteration  25: 6741175.640 ops/s
# Warmup Iteration  26: 6950273.719 ops/s
# Warmup Iteration  27: 6926057.339 ops/s
# Warmup Iteration  28: 6841788.483 ops/s
# Warmup Iteration  29: 6916934.904 ops/s
# Warmup Iteration  30: 6833989.984 ops/s
Iteration   1: 6962130.567 ops/s
Iteration   2: 6915617.514 ops/s
Iteration   3: 6863792.997 ops/s
Iteration   4: 6844817.476 ops/s
Iteration   5: 6782886.125 ops/s
Iteration   6: 6813364.834 ops/s
Iteration   7: 7012486.520 ops/s
Iteration   8: 6903322.121 ops/s
Iteration   9: 6941915.287 ops/s
Iteration  10: 6943878.082 ops/s
Iteration  11: 6908618.529 ops/s
Iteration  12: 6885103.707 ops/s
Iteration  13: 6851757.839 ops/s
Iteration  14: 6815118.374 ops/s
Iteration  15: 6955485.551 ops/s
Iteration  16: 6990043.672 ops/s
Iteration  17: 6923427.023 ops/s
Iteration  18: 6915468.341 ops/s
Iteration  19: 6960863.972 ops/s
Iteration  20: 6872378.477 ops/s
Iteration  21: 6807715.785 ops/s
Iteration  22: 6947150.933 ops/s
Iteration  23: 6904672.200 ops/s
Iteration  24: 6991346.828 ops/s
Iteration  25: 6889434.976 ops/s
Iteration  26: 6929757.285 ops/s
Iteration  27: 6885707.760 ops/s
Iteration  28: 6848042.450 ops/s
Iteration  29: 6923229.483 ops/s
Iteration  30: 6757882.009 ops/s


Result "org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_toImmutable":
  6898247.224 ±(99.9%) 42246.036 ops/s [Average]
  (min, avg, max) = (6757882.009, 6898247.224, 7012486.520), stdev = 63231.883
  CI (99.9%): [6856001.188, 6940493.260] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
UnmodifiableMapEntrySetTest._Benchmark.benchmark_toImmutable  thrpt   30  6898247.224 ± 42246.036  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_with$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_with

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 677195.112 ops/s
# Warmup Iteration   2: 714570.459 ops/s
# Warmup Iteration   3: 874226.887 ops/s
# Warmup Iteration   4: 919051.055 ops/s
# Warmup Iteration   5: 923178.219 ops/s
# Warmup Iteration   6: 921565.853 ops/s
# Warmup Iteration   7: 923590.182 ops/s
# Warmup Iteration   8: 923197.377 ops/s
# Warmup Iteration   9: 926161.464 ops/s
# Warmup Iteration  10: 926235.760 ops/s
# Warmup Iteration  11: 925025.439 ops/s
# Warmup Iteration  12: 925005.300 ops/s
# Warmup Iteration  13: 775307.357 ops/s
# Warmup Iteration  14: 933622.288 ops/s
# Warmup Iteration  15: 930165.591 ops/s
# Warmup Iteration  16: 927122.678 ops/s
# Warmup Iteration  17: 977925.985 ops/s
# Warmup Iteration  18: 975298.494 ops/s
# Warmup Iteration  19: 983593.153 ops/s
# Warmup Iteration  20: 980785.243 ops/s
# Warmup Iteration  21: 980003.034 ops/s
# Warmup Iteration  22: 978536.004 ops/s
# Warmup Iteration  23: 981832.600 ops/s
# Warmup Iteration  24: 980467.391 ops/s
# Warmup Iteration  25: 981700.589 ops/s
# Warmup Iteration  26: 978450.032 ops/s
# Warmup Iteration  27: 979445.606 ops/s
# Warmup Iteration  28: 978960.485 ops/s
# Warmup Iteration  29: 986717.709 ops/s
# Warmup Iteration  30: 984679.784 ops/s
Iteration   1: 982282.194 ops/s
Iteration   2: 981224.039 ops/s
Iteration   3: 976370.214 ops/s
Iteration   4: 979393.743 ops/s
Iteration   5: 966854.007 ops/s
Iteration   6: 978764.730 ops/s
Iteration   7: 983249.545 ops/s
Iteration   8: 981720.916 ops/s
Iteration   9: 980785.699 ops/s
Iteration  10: 983659.780 ops/s
Iteration  11: 980229.403 ops/s
Iteration  12: 976242.749 ops/s
Iteration  13: 968344.172 ops/s
Iteration  14: 984588.948 ops/s
Iteration  15: 984841.960 ops/s
Iteration  16: 988056.247 ops/s
Iteration  17: 970893.161 ops/s
Iteration  18: 927178.052 ops/s
Iteration  19: 990847.347 ops/s
Iteration  20: 991283.700 ops/s
Iteration  21: 988067.527 ops/s
Iteration  22: 982069.260 ops/s
Iteration  23: 990395.693 ops/s
Iteration  24: 983286.686 ops/s
Iteration  25: 991802.919 ops/s
Iteration  26: 982987.150 ops/s
Iteration  27: 978722.725 ops/s
Iteration  28: 982167.309 ops/s
Iteration  29: 981241.328 ops/s
Iteration  30: 978573.882 ops/s


Result "org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_with":
  979870.836 ±(99.9%) 7792.963 ops/s [Average]
  (min, avg, max) = (927178.052, 979870.836, 991802.919), stdev = 11664.140
  CI (99.9%): [972077.874, 987663.799] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
UnmodifiableMapEntrySetTest._Benchmark.benchmark_with  thrpt   30  979870.836 ± 7792.963  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_withAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_withAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 690964.267 ops/s
# Warmup Iteration   2: 725654.505 ops/s
# Warmup Iteration   3: 904170.414 ops/s
# Warmup Iteration   4: 936302.945 ops/s
# Warmup Iteration   5: 937401.841 ops/s
# Warmup Iteration   6: 934328.316 ops/s
# Warmup Iteration   7: 939568.385 ops/s
# Warmup Iteration   8: 933674.657 ops/s
# Warmup Iteration   9: 936895.427 ops/s
# Warmup Iteration  10: 938841.513 ops/s
# Warmup Iteration  11: 937838.440 ops/s
# Warmup Iteration  12: 932166.700 ops/s
# Warmup Iteration  13: 785369.302 ops/s
# Warmup Iteration  14: 939720.822 ops/s
# Warmup Iteration  15: 937391.934 ops/s
# Warmup Iteration  16: 937281.841 ops/s
# Warmup Iteration  17: 996348.567 ops/s
# Warmup Iteration  18: 995767.901 ops/s
# Warmup Iteration  19: 993881.762 ops/s
# Warmup Iteration  20: 995044.014 ops/s
# Warmup Iteration  21: 994651.998 ops/s
# Warmup Iteration  22: 993090.603 ops/s
# Warmup Iteration  23: 995905.619 ops/s
# Warmup Iteration  24: 996557.244 ops/s
# Warmup Iteration  25: 993624.352 ops/s
# Warmup Iteration  26: 996036.222 ops/s
# Warmup Iteration  27: 994829.174 ops/s
# Warmup Iteration  28: 996005.490 ops/s
# Warmup Iteration  29: 994908.761 ops/s
# Warmup Iteration  30: 994388.950 ops/s
Iteration   1: 996810.749 ops/s
Iteration   2: 997071.710 ops/s
Iteration   3: 996683.888 ops/s
Iteration   4: 993872.800 ops/s
Iteration   5: 994567.532 ops/s
Iteration   6: 992524.756 ops/s
Iteration   7: 997976.382 ops/s
Iteration   8: 991579.285 ops/s
Iteration   9: 992843.617 ops/s
Iteration  10: 990963.947 ops/s
Iteration  11: 988199.581 ops/s
Iteration  12: 988597.940 ops/s
Iteration  13: 995947.992 ops/s
Iteration  14: 996039.576 ops/s
Iteration  15: 990966.420 ops/s
Iteration  16: 989832.049 ops/s
Iteration  17: 986210.165 ops/s
Iteration  18: 996443.563 ops/s
Iteration  19: 988040.025 ops/s
Iteration  20: 995365.600 ops/s
Iteration  21: 992124.976 ops/s
Iteration  22: 992405.406 ops/s
Iteration  23: 988244.646 ops/s
Iteration  24: 992213.952 ops/s
Iteration  25: 993553.306 ops/s
Iteration  26: 992755.411 ops/s
Iteration  27: 989507.263 ops/s
Iteration  28: 996769.758 ops/s
Iteration  29: 995915.707 ops/s
Iteration  30: 994546.491 ops/s


Result "org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_withAll":
  992952.483 ±(99.9%) 2162.094 ops/s [Average]
  (min, avg, max) = (986210.165, 992952.483, 997976.382), stdev = 3236.121
  CI (99.9%): [990790.389, 995114.577] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
UnmodifiableMapEntrySetTest._Benchmark.benchmark_withAll  thrpt   30  992952.483 ± 2162.094  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_without$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_without

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 688516.092 ops/s
# Warmup Iteration   2: 717665.311 ops/s
# Warmup Iteration   3: 891711.282 ops/s
# Warmup Iteration   4: 936635.811 ops/s
# Warmup Iteration   5: 939522.116 ops/s
# Warmup Iteration   6: 938003.896 ops/s
# Warmup Iteration   7: 938352.283 ops/s
# Warmup Iteration   8: 936762.853 ops/s
# Warmup Iteration   9: 937681.197 ops/s
# Warmup Iteration  10: 939299.586 ops/s
# Warmup Iteration  11: 935145.737 ops/s
# Warmup Iteration  12: 932752.682 ops/s
# Warmup Iteration  13: 781733.893 ops/s
# Warmup Iteration  14: 938736.643 ops/s
# Warmup Iteration  15: 940177.907 ops/s
# Warmup Iteration  16: 938748.916 ops/s
# Warmup Iteration  17: 998764.041 ops/s
# Warmup Iteration  18: 996580.278 ops/s
# Warmup Iteration  19: 993819.673 ops/s
# Warmup Iteration  20: 995787.892 ops/s
# Warmup Iteration  21: 996962.544 ops/s
# Warmup Iteration  22: 997063.272 ops/s
# Warmup Iteration  23: 994023.101 ops/s
# Warmup Iteration  24: 997910.632 ops/s
# Warmup Iteration  25: 995708.059 ops/s
# Warmup Iteration  26: 997288.922 ops/s
# Warmup Iteration  27: 996682.693 ops/s
# Warmup Iteration  28: 996047.987 ops/s
# Warmup Iteration  29: 996105.817 ops/s
# Warmup Iteration  30: 996689.504 ops/s
Iteration   1: 990389.168 ops/s
Iteration   2: 997061.272 ops/s
Iteration   3: 989387.175 ops/s
Iteration   4: 996448.835 ops/s
Iteration   5: 1001626.749 ops/s
Iteration   6: 1000921.308 ops/s
Iteration   7: 999936.757 ops/s
Iteration   8: 997536.592 ops/s
Iteration   9: 998926.042 ops/s
Iteration  10: 998088.802 ops/s
Iteration  11: 999727.298 ops/s
Iteration  12: 993506.586 ops/s
Iteration  13: 997513.656 ops/s
Iteration  14: 1000222.492 ops/s
Iteration  15: 997995.155 ops/s
Iteration  16: 997821.580 ops/s
Iteration  17: 1000832.873 ops/s
Iteration  18: 996332.759 ops/s
Iteration  19: 997955.020 ops/s
Iteration  20: 995298.823 ops/s
Iteration  21: 998625.839 ops/s
Iteration  22: 1002365.298 ops/s
Iteration  23: 999282.528 ops/s
Iteration  24: 996892.090 ops/s
Iteration  25: 997652.014 ops/s
Iteration  26: 999071.626 ops/s
Iteration  27: 994473.447 ops/s
Iteration  28: 998280.292 ops/s
Iteration  29: 999381.162 ops/s
Iteration  30: 999166.108 ops/s


Result "org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_without":
  997757.312 ±(99.9%) 1945.898 ops/s [Average]
  (min, avg, max) = (989387.175, 997757.312, 1002365.298), stdev = 2912.528
  CI (99.9%): [995811.414, 999703.209] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
UnmodifiableMapEntrySetTest._Benchmark.benchmark_without  thrpt   30  997757.312 ± 1945.898  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_withoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_withoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 692389.332 ops/s
# Warmup Iteration   2: 727912.574 ops/s
# Warmup Iteration   3: 910646.690 ops/s
# Warmup Iteration   4: 945974.749 ops/s
# Warmup Iteration   5: 950455.700 ops/s
# Warmup Iteration   6: 939008.704 ops/s
# Warmup Iteration   7: 950315.305 ops/s
# Warmup Iteration   8: 945404.981 ops/s
# Warmup Iteration   9: 946929.027 ops/s
# Warmup Iteration  10: 945804.937 ops/s
# Warmup Iteration  11: 949655.873 ops/s
# Warmup Iteration  12: 930942.320 ops/s
# Warmup Iteration  13: 812000.188 ops/s
# Warmup Iteration  14: 948136.427 ops/s
# Warmup Iteration  15: 947776.427 ops/s
# Warmup Iteration  16: 947662.170 ops/s
# Warmup Iteration  17: 1001115.208 ops/s
# Warmup Iteration  18: 1003026.397 ops/s
# Warmup Iteration  19: 1002989.334 ops/s
# Warmup Iteration  20: 999878.053 ops/s
# Warmup Iteration  21: 998295.087 ops/s
# Warmup Iteration  22: 1001430.797 ops/s
# Warmup Iteration  23: 1002003.568 ops/s
# Warmup Iteration  24: 999953.223 ops/s
# Warmup Iteration  25: 999967.740 ops/s
# Warmup Iteration  26: 1001725.985 ops/s
# Warmup Iteration  27: 1002796.292 ops/s
# Warmup Iteration  28: 1003948.680 ops/s
# Warmup Iteration  29: 998489.284 ops/s
# Warmup Iteration  30: 1002265.479 ops/s
Iteration   1: 998715.918 ops/s
Iteration   2: 1005268.511 ops/s
Iteration   3: 1001501.153 ops/s
Iteration   4: 1003484.105 ops/s
Iteration   5: 999102.145 ops/s
Iteration   6: 995881.036 ops/s
Iteration   7: 1001061.555 ops/s
Iteration   8: 1005862.371 ops/s
Iteration   9: 1001028.645 ops/s
Iteration  10: 995418.045 ops/s
Iteration  11: 998704.455 ops/s
Iteration  12: 996825.338 ops/s
Iteration  13: 1001215.701 ops/s
Iteration  14: 1005716.551 ops/s
Iteration  15: 1005416.011 ops/s
Iteration  16: 998687.473 ops/s
Iteration  17: 1002332.975 ops/s
Iteration  18: 1003899.240 ops/s
Iteration  19: 1006258.052 ops/s
Iteration  20: 1003181.423 ops/s
Iteration  21: 997935.173 ops/s
Iteration  22: 1000848.454 ops/s
Iteration  23: 999491.999 ops/s
Iteration  24: 966434.658 ops/s
Iteration  25: 1006928.669 ops/s
Iteration  26: 1004395.374 ops/s
Iteration  27: 1002945.471 ops/s
Iteration  28: 1001777.826 ops/s
Iteration  29: 1001439.399 ops/s
Iteration  30: 1004258.830 ops/s


Result "org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_withoutAll":
  1000533.885 ±(99.9%) 4786.922 ops/s [Average]
  (min, avg, max) = (966434.658, 1000533.885, 1006928.669), stdev = 7164.840
  CI (99.9%): [995746.964, 1005320.807] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
UnmodifiableMapEntrySetTest._Benchmark.benchmark_withoutAll  thrpt   30  1000533.885 ± 4786.922  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_zip$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_zip

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 234487.746 ops/s
# Warmup Iteration   2: 465487.677 ops/s
# Warmup Iteration   3: 529885.814 ops/s
# Warmup Iteration   4: 527800.966 ops/s
# Warmup Iteration   5: 491748.340 ops/s
# Warmup Iteration   6: 482414.323 ops/s
# Warmup Iteration   7: 533553.116 ops/s
# Warmup Iteration   8: 533592.389 ops/s
# Warmup Iteration   9: 533235.486 ops/s
# Warmup Iteration  10: 531140.436 ops/s
# Warmup Iteration  11: 531046.683 ops/s
# Warmup Iteration  12: 531452.936 ops/s
# Warmup Iteration  13: 533100.825 ops/s
# Warmup Iteration  14: 530463.841 ops/s
# Warmup Iteration  15: 531990.559 ops/s
# Warmup Iteration  16: 532640.537 ops/s
# Warmup Iteration  17: 531274.917 ops/s
# Warmup Iteration  18: 529400.025 ops/s
# Warmup Iteration  19: 532606.859 ops/s
# Warmup Iteration  20: 530385.626 ops/s
# Warmup Iteration  21: 531295.533 ops/s
# Warmup Iteration  22: 531419.264 ops/s
# Warmup Iteration  23: 528581.120 ops/s
# Warmup Iteration  24: 529923.095 ops/s
# Warmup Iteration  25: 532139.541 ops/s
# Warmup Iteration  26: 530769.237 ops/s
# Warmup Iteration  27: 532593.911 ops/s
# Warmup Iteration  28: 534893.421 ops/s
# Warmup Iteration  29: 533742.626 ops/s
# Warmup Iteration  30: 533859.403 ops/s
Iteration   1: 533968.355 ops/s
Iteration   2: 533499.449 ops/s
Iteration   3: 532358.435 ops/s
Iteration   4: 533583.473 ops/s
Iteration   5: 534814.877 ops/s
Iteration   6: 534122.773 ops/s
Iteration   7: 530045.725 ops/s
Iteration   8: 534228.716 ops/s
Iteration   9: 533060.503 ops/s
Iteration  10: 533346.241 ops/s
Iteration  11: 531217.891 ops/s
Iteration  12: 532874.183 ops/s
Iteration  13: 531317.958 ops/s
Iteration  14: 532647.281 ops/s
Iteration  15: 533068.878 ops/s
Iteration  16: 530673.146 ops/s
Iteration  17: 525904.054 ops/s
Iteration  18: 532092.492 ops/s
Iteration  19: 532709.899 ops/s
Iteration  20: 534790.618 ops/s
Iteration  21: 529352.581 ops/s
Iteration  22: 529671.688 ops/s
Iteration  23: 534567.329 ops/s
Iteration  24: 527362.820 ops/s
Iteration  25: 532847.037 ops/s
Iteration  26: 530862.101 ops/s
Iteration  27: 527122.215 ops/s
Iteration  28: 532504.355 ops/s
Iteration  29: 533511.488 ops/s
Iteration  30: 534324.349 ops/s


Result "org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_zip":
  532081.697 ±(99.9%) 1557.534 ops/s [Average]
  (min, avg, max) = (525904.054, 532081.697, 534814.877), stdev = 2331.244
  CI (99.9%): [530524.163, 533639.231] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
UnmodifiableMapEntrySetTest._Benchmark.benchmark_zip  thrpt   30  532081.697 ± 1557.534  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_zipWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_zipWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 428842.749 ops/s
# Warmup Iteration   2: 768438.379 ops/s
# Warmup Iteration   3: 886602.303 ops/s
# Warmup Iteration   4: 890422.504 ops/s
# Warmup Iteration   5: 894554.645 ops/s
# Warmup Iteration   6: 745022.742 ops/s
# Warmup Iteration   7: 891180.526 ops/s
# Warmup Iteration   8: 892859.409 ops/s
# Warmup Iteration   9: 893626.292 ops/s
# Warmup Iteration  10: 895725.478 ops/s
# Warmup Iteration  11: 893441.012 ops/s
# Warmup Iteration  12: 891322.621 ops/s
# Warmup Iteration  13: 892466.151 ops/s
# Warmup Iteration  14: 896098.165 ops/s
# Warmup Iteration  15: 896508.991 ops/s
# Warmup Iteration  16: 895487.321 ops/s
# Warmup Iteration  17: 891118.113 ops/s
# Warmup Iteration  18: 894906.305 ops/s
# Warmup Iteration  19: 890116.914 ops/s
# Warmup Iteration  20: 894110.648 ops/s
# Warmup Iteration  21: 892445.129 ops/s
# Warmup Iteration  22: 893855.298 ops/s
# Warmup Iteration  23: 893556.030 ops/s
# Warmup Iteration  24: 888461.500 ops/s
# Warmup Iteration  25: 896032.130 ops/s
# Warmup Iteration  26: 891511.085 ops/s
# Warmup Iteration  27: 893838.825 ops/s
# Warmup Iteration  28: 892603.050 ops/s
# Warmup Iteration  29: 892361.246 ops/s
# Warmup Iteration  30: 891418.574 ops/s
Iteration   1: 894220.730 ops/s
Iteration   2: 892324.994 ops/s
Iteration   3: 895814.936 ops/s
Iteration   4: 894847.458 ops/s
Iteration   5: 889220.121 ops/s
Iteration   6: 895171.343 ops/s
Iteration   7: 894909.091 ops/s
Iteration   8: 897136.767 ops/s
Iteration   9: 895266.405 ops/s
Iteration  10: 891194.081 ops/s
Iteration  11: 892951.193 ops/s
Iteration  12: 890245.657 ops/s
Iteration  13: 891023.511 ops/s
Iteration  14: 892907.464 ops/s
Iteration  15: 894144.488 ops/s
Iteration  16: 895929.453 ops/s
Iteration  17: 895071.054 ops/s
Iteration  18: 895349.138 ops/s
Iteration  19: 894161.501 ops/s
Iteration  20: 894440.923 ops/s
Iteration  21: 895944.099 ops/s
Iteration  22: 895322.280 ops/s
Iteration  23: 897201.872 ops/s
Iteration  24: 895752.582 ops/s
Iteration  25: 896406.156 ops/s
Iteration  26: 896123.827 ops/s
Iteration  27: 890162.670 ops/s
Iteration  28: 897819.732 ops/s
Iteration  29: 892494.393 ops/s
Iteration  30: 895767.386 ops/s


Result "org.eclipse.collections.impl.UnmodifiableMapEntrySetTest._Benchmark.benchmark_zipWithIndex":
  894310.844 ±(99.9%) 1490.682 ops/s [Average]
  (min, avg, max) = (889220.121, 894310.844, 897819.732), stdev = 2231.183
  CI (99.9%): [892820.161, 895801.526] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
UnmodifiableMapEntrySetTest._Benchmark.benchmark_zipWithIndex  thrpt   30  894310.844 ± 1490.682  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 504530.576 ops/s
# Warmup Iteration   2: 560247.060 ops/s
# Warmup Iteration   3: 740967.118 ops/s
# Warmup Iteration   4: 740923.276 ops/s
# Warmup Iteration   5: 738321.552 ops/s
# Warmup Iteration   6: 741594.787 ops/s
# Warmup Iteration   7: 742215.071 ops/s
# Warmup Iteration   8: 743444.249 ops/s
# Warmup Iteration   9: 741673.820 ops/s
# Warmup Iteration  10: 686793.807 ops/s
# Warmup Iteration  11: 662006.693 ops/s
# Warmup Iteration  12: 737875.724 ops/s
# Warmup Iteration  13: 740197.421 ops/s
# Warmup Iteration  14: 739992.194 ops/s
# Warmup Iteration  15: 740497.510 ops/s
# Warmup Iteration  16: 738333.261 ops/s
# Warmup Iteration  17: 774858.425 ops/s
# Warmup Iteration  18: 774133.974 ops/s
# Warmup Iteration  19: 776693.364 ops/s
# Warmup Iteration  20: 776756.905 ops/s
# Warmup Iteration  21: 776465.047 ops/s
# Warmup Iteration  22: 776674.951 ops/s
# Warmup Iteration  23: 778145.459 ops/s
# Warmup Iteration  24: 778531.546 ops/s
# Warmup Iteration  25: 777102.274 ops/s
# Warmup Iteration  26: 777670.082 ops/s
# Warmup Iteration  27: 776271.149 ops/s
# Warmup Iteration  28: 777338.290 ops/s
# Warmup Iteration  29: 776717.310 ops/s
# Warmup Iteration  30: 774230.830 ops/s
Iteration   1: 774214.337 ops/s
Iteration   2: 774524.815 ops/s
Iteration   3: 778827.322 ops/s
Iteration   4: 777562.402 ops/s
Iteration   5: 777914.002 ops/s
Iteration   6: 775428.242 ops/s
Iteration   7: 773405.723 ops/s
Iteration   8: 776710.954 ops/s
Iteration   9: 776616.185 ops/s
Iteration  10: 777028.268 ops/s
Iteration  11: 775872.921 ops/s
Iteration  12: 772946.346 ops/s
Iteration  13: 778310.945 ops/s
Iteration  14: 777682.747 ops/s
Iteration  15: 771715.304 ops/s
Iteration  16: 773346.585 ops/s
Iteration  17: 774059.284 ops/s
Iteration  18: 771540.534 ops/s
Iteration  19: 774384.928 ops/s
Iteration  20: 777349.302 ops/s
Iteration  21: 777996.025 ops/s
Iteration  22: 773676.726 ops/s
Iteration  23: 775752.094 ops/s
Iteration  24: 776254.050 ops/s
Iteration  25: 774823.980 ops/s
Iteration  26: 772455.110 ops/s
Iteration  27: 777462.372 ops/s
Iteration  28: 775007.662 ops/s
Iteration  29: 773963.766 ops/s
Iteration  30: 773121.607 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_add":
  775331.818 ±(99.9%) 1387.509 ops/s [Average]
  (min, avg, max) = (771540.534, 775331.818, 778827.322), stdev = 2076.759
  CI (99.9%): [773944.309, 776719.327] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt       Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_add  thrpt   30  775331.818 ± 1387.509  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_addAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_addAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 437427.008 ops/s
# Warmup Iteration   2: 549067.723 ops/s
# Warmup Iteration   3: 691328.652 ops/s
# Warmup Iteration   4: 688219.853 ops/s
# Warmup Iteration   5: 689441.473 ops/s
# Warmup Iteration   6: 691048.983 ops/s
# Warmup Iteration   7: 690656.271 ops/s
# Warmup Iteration   8: 687678.830 ops/s
# Warmup Iteration   9: 578679.162 ops/s
# Warmup Iteration  10: 688705.194 ops/s
# Warmup Iteration  11: 690433.804 ops/s
# Warmup Iteration  12: 689909.788 ops/s
# Warmup Iteration  13: 689423.632 ops/s
# Warmup Iteration  14: 688292.715 ops/s
# Warmup Iteration  15: 688049.761 ops/s
# Warmup Iteration  16: 687986.799 ops/s
# Warmup Iteration  17: 719585.933 ops/s
# Warmup Iteration  18: 720541.641 ops/s
# Warmup Iteration  19: 719667.591 ops/s
# Warmup Iteration  20: 719964.097 ops/s
# Warmup Iteration  21: 719930.613 ops/s
# Warmup Iteration  22: 720949.797 ops/s
# Warmup Iteration  23: 716182.683 ops/s
# Warmup Iteration  24: 718510.387 ops/s
# Warmup Iteration  25: 720179.084 ops/s
# Warmup Iteration  26: 716648.317 ops/s
# Warmup Iteration  27: 720821.124 ops/s
# Warmup Iteration  28: 719349.468 ops/s
# Warmup Iteration  29: 719998.905 ops/s
# Warmup Iteration  30: 720259.819 ops/s
Iteration   1: 720735.738 ops/s
Iteration   2: 720558.048 ops/s
Iteration   3: 716633.793 ops/s
Iteration   4: 718876.269 ops/s
Iteration   5: 719522.066 ops/s
Iteration   6: 721414.323 ops/s
Iteration   7: 719487.559 ops/s
Iteration   8: 716995.721 ops/s
Iteration   9: 720124.334 ops/s
Iteration  10: 721233.032 ops/s
Iteration  11: 722002.033 ops/s
Iteration  12: 721116.683 ops/s
Iteration  13: 719926.793 ops/s
Iteration  14: 721108.871 ops/s
Iteration  15: 720856.723 ops/s
Iteration  16: 721873.306 ops/s
Iteration  17: 722545.954 ops/s
Iteration  18: 720255.999 ops/s
Iteration  19: 721975.040 ops/s
Iteration  20: 720672.596 ops/s
Iteration  21: 720747.720 ops/s
Iteration  22: 719625.260 ops/s
Iteration  23: 715786.224 ops/s
Iteration  24: 717114.799 ops/s
Iteration  25: 720518.310 ops/s
Iteration  26: 721356.910 ops/s
Iteration  27: 721207.944 ops/s
Iteration  28: 721200.330 ops/s
Iteration  29: 717875.037 ops/s
Iteration  30: 719325.222 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_addAll":
  720089.088 ±(99.9%) 1141.509 ops/s [Average]
  (min, avg, max) = (715786.224, 720089.088, 722545.954), stdev = 1708.557
  CI (99.9%): [718947.579, 721230.597] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_addAll  thrpt   30  720089.088 ± 1141.509  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_aggregateByMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_aggregateByMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 757730.195 ops/s
# Warmup Iteration   2: 1537249.424 ops/s
# Warmup Iteration   3: 1661045.969 ops/s
# Warmup Iteration   4: 1665052.893 ops/s
# Warmup Iteration   5: 1350217.338 ops/s
# Warmup Iteration   6: 1656262.716 ops/s
# Warmup Iteration   7: 1661910.453 ops/s
# Warmup Iteration   8: 1669013.816 ops/s
# Warmup Iteration   9: 1663682.078 ops/s
# Warmup Iteration  10: 1673176.334 ops/s
# Warmup Iteration  11: 1672611.840 ops/s
# Warmup Iteration  12: 1661807.509 ops/s
# Warmup Iteration  13: 1672414.635 ops/s
# Warmup Iteration  14: 1668337.837 ops/s
# Warmup Iteration  15: 1658722.194 ops/s
# Warmup Iteration  16: 1666770.083 ops/s
# Warmup Iteration  17: 1675270.313 ops/s
# Warmup Iteration  18: 1673761.320 ops/s
# Warmup Iteration  19: 1669011.997 ops/s
# Warmup Iteration  20: 1667237.434 ops/s
# Warmup Iteration  21: 1671405.167 ops/s
# Warmup Iteration  22: 1670796.255 ops/s
# Warmup Iteration  23: 1652743.830 ops/s
# Warmup Iteration  24: 1671122.832 ops/s
# Warmup Iteration  25: 1658270.568 ops/s
# Warmup Iteration  26: 1673242.554 ops/s
# Warmup Iteration  27: 1670102.647 ops/s
# Warmup Iteration  28: 1668756.008 ops/s
# Warmup Iteration  29: 1670173.998 ops/s
# Warmup Iteration  30: 1660063.787 ops/s
Iteration   1: 1677312.912 ops/s
Iteration   2: 1678009.299 ops/s
Iteration   3: 1653173.215 ops/s
Iteration   4: 1647591.382 ops/s
Iteration   5: 1671913.051 ops/s
Iteration   6: 1664284.995 ops/s
Iteration   7: 1675464.738 ops/s
Iteration   8: 1664175.014 ops/s
Iteration   9: 1678974.135 ops/s
Iteration  10: 1666706.258 ops/s
Iteration  11: 1667441.859 ops/s
Iteration  12: 1665678.645 ops/s
Iteration  13: 1677208.732 ops/s
Iteration  14: 1667446.299 ops/s
Iteration  15: 1674670.280 ops/s
Iteration  16: 1667771.503 ops/s
Iteration  17: 1659797.233 ops/s
Iteration  18: 1666677.149 ops/s
Iteration  19: 1665111.552 ops/s
Iteration  20: 1669948.517 ops/s
Iteration  21: 1659308.626 ops/s
Iteration  22: 1652957.892 ops/s
Iteration  23: 1663317.162 ops/s
Iteration  24: 1658534.400 ops/s
Iteration  25: 1666086.012 ops/s
Iteration  26: 1674929.252 ops/s
Iteration  27: 1648859.505 ops/s
Iteration  28: 1674683.711 ops/s
Iteration  29: 1675120.372 ops/s
Iteration  30: 1664961.405 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_aggregateByMutating":
  1666603.837 ±(99.9%) 5737.749 ops/s [Average]
  (min, avg, max) = (1647591.382, 1666603.837, 1678974.135), stdev = 8587.993
  CI (99.9%): [1660866.088, 1672341.586] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_aggregateByMutating  thrpt   30  1666603.837 ± 5737.749  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_aggregateByNonMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_aggregateByNonMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 602567.661 ops/s
# Warmup Iteration   2: 1088292.759 ops/s
# Warmup Iteration   3: 1236712.124 ops/s
# Warmup Iteration   4: 1243128.430 ops/s
# Warmup Iteration   5: 1246008.658 ops/s
# Warmup Iteration   6: 1015751.144 ops/s
# Warmup Iteration   7: 1247576.936 ops/s
# Warmup Iteration   8: 1247907.392 ops/s
# Warmup Iteration   9: 1247402.272 ops/s
# Warmup Iteration  10: 1244180.877 ops/s
# Warmup Iteration  11: 1244463.518 ops/s
# Warmup Iteration  12: 1243646.281 ops/s
# Warmup Iteration  13: 1245165.807 ops/s
# Warmup Iteration  14: 1240182.135 ops/s
# Warmup Iteration  15: 1241366.824 ops/s
# Warmup Iteration  16: 1246236.904 ops/s
# Warmup Iteration  17: 1247576.281 ops/s
# Warmup Iteration  18: 1235583.059 ops/s
# Warmup Iteration  19: 1248208.883 ops/s
# Warmup Iteration  20: 1242961.951 ops/s
# Warmup Iteration  21: 1247557.106 ops/s
# Warmup Iteration  22: 1240519.598 ops/s
# Warmup Iteration  23: 1245925.625 ops/s
# Warmup Iteration  24: 1241106.631 ops/s
# Warmup Iteration  25: 1243186.492 ops/s
# Warmup Iteration  26: 1243246.831 ops/s
# Warmup Iteration  27: 1247963.434 ops/s
# Warmup Iteration  28: 1245508.063 ops/s
# Warmup Iteration  29: 1245735.218 ops/s
# Warmup Iteration  30: 1245906.048 ops/s
Iteration   1: 1248877.250 ops/s
Iteration   2: 1250635.218 ops/s
Iteration   3: 1251650.075 ops/s
Iteration   4: 1240818.007 ops/s
Iteration   5: 1251437.810 ops/s
Iteration   6: 1249937.637 ops/s
Iteration   7: 1244994.019 ops/s
Iteration   8: 1244516.134 ops/s
Iteration   9: 1244177.015 ops/s
Iteration  10: 1249619.772 ops/s
Iteration  11: 1251242.257 ops/s
Iteration  12: 1244657.061 ops/s
Iteration  13: 1246077.590 ops/s
Iteration  14: 1247090.868 ops/s
Iteration  15: 1246706.054 ops/s
Iteration  16: 1249408.134 ops/s
Iteration  17: 1249183.930 ops/s
Iteration  18: 1245825.984 ops/s
Iteration  19: 1246981.305 ops/s
Iteration  20: 1236680.407 ops/s
Iteration  21: 1245533.854 ops/s
Iteration  22: 1245835.307 ops/s
Iteration  23: 1238087.817 ops/s
Iteration  24: 1245897.006 ops/s
Iteration  25: 1245674.146 ops/s
Iteration  26: 1244539.238 ops/s
Iteration  27: 1252321.673 ops/s
Iteration  28: 1245940.752 ops/s
Iteration  29: 1245012.878 ops/s
Iteration  30: 1251336.122 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_aggregateByNonMutating":
  1246689.844 ±(99.9%) 2524.577 ops/s [Average]
  (min, avg, max) = (1236680.407, 1246689.844, 1252321.673), stdev = 3778.669
  CI (99.9%): [1244165.267, 1249214.421] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_aggregateByNonMutating  thrpt   30  1246689.844 ± 2524.577  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 645608.340 ops/s
# Warmup Iteration   2: 1116146.571 ops/s
# Warmup Iteration   3: 1331529.574 ops/s
# Warmup Iteration   4: 1339817.670 ops/s
# Warmup Iteration   5: 1342553.549 ops/s
# Warmup Iteration   6: 1074945.615 ops/s
# Warmup Iteration   7: 1344177.851 ops/s
# Warmup Iteration   8: 1344870.457 ops/s
# Warmup Iteration   9: 1342994.868 ops/s
# Warmup Iteration  10: 1339492.257 ops/s
# Warmup Iteration  11: 1342807.795 ops/s
# Warmup Iteration  12: 1343914.054 ops/s
# Warmup Iteration  13: 1341062.474 ops/s
# Warmup Iteration  14: 1345100.487 ops/s
# Warmup Iteration  15: 1340137.608 ops/s
# Warmup Iteration  16: 1344704.854 ops/s
# Warmup Iteration  17: 1346165.900 ops/s
# Warmup Iteration  18: 1342537.270 ops/s
# Warmup Iteration  19: 1343321.833 ops/s
# Warmup Iteration  20: 1342754.152 ops/s
# Warmup Iteration  21: 1339681.689 ops/s
# Warmup Iteration  22: 1340866.946 ops/s
# Warmup Iteration  23: 1338075.256 ops/s
# Warmup Iteration  24: 1340450.848 ops/s
# Warmup Iteration  25: 1340353.559 ops/s
# Warmup Iteration  26: 1339838.246 ops/s
# Warmup Iteration  27: 1343458.248 ops/s
# Warmup Iteration  28: 1342015.078 ops/s
# Warmup Iteration  29: 1341350.810 ops/s
# Warmup Iteration  30: 1343832.332 ops/s
Iteration   1: 1337417.230 ops/s
Iteration   2: 1343139.798 ops/s
Iteration   3: 1331985.920 ops/s
Iteration   4: 1342757.080 ops/s
Iteration   5: 1341505.001 ops/s
Iteration   6: 1337449.537 ops/s
Iteration   7: 1340855.870 ops/s
Iteration   8: 1343609.710 ops/s
Iteration   9: 1340661.007 ops/s
Iteration  10: 1341624.203 ops/s
Iteration  11: 1333489.187 ops/s
Iteration  12: 1343877.957 ops/s
Iteration  13: 1347136.740 ops/s
Iteration  14: 1339638.255 ops/s
Iteration  15: 1344279.817 ops/s
Iteration  16: 1343810.382 ops/s
Iteration  17: 1344584.497 ops/s
Iteration  18: 1343999.981 ops/s
Iteration  19: 1345717.447 ops/s
Iteration  20: 1338454.188 ops/s
Iteration  21: 1341982.534 ops/s
Iteration  22: 1346706.601 ops/s
Iteration  23: 1340959.129 ops/s
Iteration  24: 1343593.386 ops/s
Iteration  25: 1346154.660 ops/s
Iteration  26: 1342747.831 ops/s
Iteration  27: 1341506.033 ops/s
Iteration  28: 1343748.104 ops/s
Iteration  29: 1344079.240 ops/s
Iteration  30: 1345363.707 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_allSatisfy":
  1342094.501 ±(99.9%) 2372.468 ops/s [Average]
  (min, avg, max) = (1331985.920, 1342094.501, 1347136.740), stdev = 3550.999
  CI (99.9%): [1339722.033, 1344466.969] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_allSatisfy  thrpt   30  1342094.501 ± 2372.468  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_allSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_allSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1124028.314 ops/s
# Warmup Iteration   2: 2176963.430 ops/s
# Warmup Iteration   3: 2405641.712 ops/s
# Warmup Iteration   4: 2426997.605 ops/s
# Warmup Iteration   5: 1968250.936 ops/s
# Warmup Iteration   6: 2433343.741 ops/s
# Warmup Iteration   7: 2428210.672 ops/s
# Warmup Iteration   8: 2422349.312 ops/s
# Warmup Iteration   9: 2424572.467 ops/s
# Warmup Iteration  10: 2426840.873 ops/s
# Warmup Iteration  11: 2430683.010 ops/s
# Warmup Iteration  12: 2420765.136 ops/s
# Warmup Iteration  13: 2430502.408 ops/s
# Warmup Iteration  14: 2430213.196 ops/s
# Warmup Iteration  15: 2429667.138 ops/s
# Warmup Iteration  16: 2430354.826 ops/s
# Warmup Iteration  17: 2429562.817 ops/s
# Warmup Iteration  18: 2432719.165 ops/s
# Warmup Iteration  19: 2423364.145 ops/s
# Warmup Iteration  20: 2426717.598 ops/s
# Warmup Iteration  21: 2429159.746 ops/s
# Warmup Iteration  22: 2430487.210 ops/s
# Warmup Iteration  23: 2429593.194 ops/s
# Warmup Iteration  24: 2433625.535 ops/s
# Warmup Iteration  25: 2427819.028 ops/s
# Warmup Iteration  26: 2431523.181 ops/s
# Warmup Iteration  27: 2424564.732 ops/s
# Warmup Iteration  28: 2434372.816 ops/s
# Warmup Iteration  29: 2424119.966 ops/s
# Warmup Iteration  30: 2432801.835 ops/s
Iteration   1: 2434462.251 ops/s
Iteration   2: 2430887.834 ops/s
Iteration   3: 2435838.865 ops/s
Iteration   4: 2423117.736 ops/s
Iteration   5: 2433284.369 ops/s
Iteration   6: 2429585.200 ops/s
Iteration   7: 2429890.158 ops/s
Iteration   8: 2417772.615 ops/s
Iteration   9: 2433313.263 ops/s
Iteration  10: 2419799.095 ops/s
Iteration  11: 2433504.489 ops/s
Iteration  12: 2420303.849 ops/s
Iteration  13: 2427041.268 ops/s
Iteration  14: 2435913.372 ops/s
Iteration  15: 2427140.911 ops/s
Iteration  16: 2434829.147 ops/s
Iteration  17: 2431473.947 ops/s
Iteration  18: 2431383.161 ops/s
Iteration  19: 2430686.806 ops/s
Iteration  20: 2425310.609 ops/s
Iteration  21: 2429115.601 ops/s
Iteration  22: 2424549.406 ops/s
Iteration  23: 2436516.677 ops/s
Iteration  24: 2420214.426 ops/s
Iteration  25: 2437968.407 ops/s
Iteration  26: 2437128.963 ops/s
Iteration  27: 2423079.128 ops/s
Iteration  28: 2432461.869 ops/s
Iteration  29: 2437208.975 ops/s
Iteration  30: 2430827.481 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_allSatisfyWith":
  2429820.329 ±(99.9%) 3872.778 ops/s [Average]
  (min, avg, max) = (2417772.615, 2429820.329, 2437968.407), stdev = 5796.592
  CI (99.9%): [2425947.551, 2433693.107] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_allSatisfyWith  thrpt   30  2429820.329 ± 3872.778  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_allSatisfyWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_allSatisfyWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1835963.952 ops/s
# Warmup Iteration   2: 2971954.012 ops/s
# Warmup Iteration   3: 3476535.606 ops/s
# Warmup Iteration   4: 3509773.547 ops/s
# Warmup Iteration   5: 3510373.862 ops/s
# Warmup Iteration   6: 2916246.179 ops/s
# Warmup Iteration   7: 3435533.607 ops/s
# Warmup Iteration   8: 3495920.725 ops/s
# Warmup Iteration   9: 3507790.056 ops/s
# Warmup Iteration  10: 3500148.754 ops/s
# Warmup Iteration  11: 3493194.592 ops/s
# Warmup Iteration  12: 3507830.068 ops/s
# Warmup Iteration  13: 3499032.487 ops/s
# Warmup Iteration  14: 3502596.938 ops/s
# Warmup Iteration  15: 3499577.399 ops/s
# Warmup Iteration  16: 3494416.040 ops/s
# Warmup Iteration  17: 3493593.127 ops/s
# Warmup Iteration  18: 3501630.666 ops/s
# Warmup Iteration  19: 3492108.708 ops/s
# Warmup Iteration  20: 3501005.606 ops/s
# Warmup Iteration  21: 3501060.454 ops/s
# Warmup Iteration  22: 3506667.125 ops/s
# Warmup Iteration  23: 3496150.022 ops/s
# Warmup Iteration  24: 3471983.990 ops/s
# Warmup Iteration  25: 3503690.806 ops/s
# Warmup Iteration  26: 3505271.398 ops/s
# Warmup Iteration  27: 3503342.276 ops/s
# Warmup Iteration  28: 3503039.675 ops/s
# Warmup Iteration  29: 3512292.367 ops/s
# Warmup Iteration  30: 3499947.778 ops/s
Iteration   1: 3472320.998 ops/s
Iteration   2: 3509236.281 ops/s
Iteration   3: 3494819.352 ops/s
Iteration   4: 3513908.134 ops/s
Iteration   5: 3512319.653 ops/s
Iteration   6: 3510728.565 ops/s
Iteration   7: 3516800.206 ops/s
Iteration   8: 3505989.844 ops/s
Iteration   9: 3506171.262 ops/s
Iteration  10: 3508711.217 ops/s
Iteration  11: 3524073.881 ops/s
Iteration  12: 3501870.684 ops/s
Iteration  13: 3512738.216 ops/s
Iteration  14: 3500861.667 ops/s
Iteration  15: 3506204.188 ops/s
Iteration  16: 3505324.708 ops/s
Iteration  17: 3499869.655 ops/s
Iteration  18: 3499880.053 ops/s
Iteration  19: 3499208.873 ops/s
Iteration  20: 3505840.182 ops/s
Iteration  21: 3515408.237 ops/s
Iteration  22: 3505665.970 ops/s
Iteration  23: 3519514.504 ops/s
Iteration  24: 3504583.052 ops/s
Iteration  25: 3496774.255 ops/s
Iteration  26: 3506006.938 ops/s
Iteration  27: 3510394.220 ops/s
Iteration  28: 3503052.712 ops/s
Iteration  29: 3507537.119 ops/s
Iteration  30: 3496799.001 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_allSatisfyWithOccurrences":
  3505753.788 ±(99.9%) 6237.180 ops/s [Average]
  (min, avg, max) = (3472320.998, 3505753.788, 3524073.881), stdev = 9335.518
  CI (99.9%): [3499516.608, 3511990.967] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_allSatisfyWithOccurrences  thrpt   30  3505753.788 ± 6237.180  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 664837.393 ops/s
# Warmup Iteration   2: 1147817.724 ops/s
# Warmup Iteration   3: 1351804.045 ops/s
# Warmup Iteration   4: 1362446.559 ops/s
# Warmup Iteration   5: 1361747.060 ops/s
# Warmup Iteration   6: 1088264.816 ops/s
# Warmup Iteration   7: 1359338.930 ops/s
# Warmup Iteration   8: 1359359.258 ops/s
# Warmup Iteration   9: 1362445.136 ops/s
# Warmup Iteration  10: 1363789.964 ops/s
# Warmup Iteration  11: 1364443.472 ops/s
# Warmup Iteration  12: 1367261.531 ops/s
# Warmup Iteration  13: 1362543.351 ops/s
# Warmup Iteration  14: 1367371.247 ops/s
# Warmup Iteration  15: 1365156.365 ops/s
# Warmup Iteration  16: 1365325.143 ops/s
# Warmup Iteration  17: 1361202.382 ops/s
# Warmup Iteration  18: 1364364.680 ops/s
# Warmup Iteration  19: 1366613.784 ops/s
# Warmup Iteration  20: 1361297.508 ops/s
# Warmup Iteration  21: 1364529.583 ops/s
# Warmup Iteration  22: 1357301.951 ops/s
# Warmup Iteration  23: 1365055.036 ops/s
# Warmup Iteration  24: 1365726.648 ops/s
# Warmup Iteration  25: 1366216.096 ops/s
# Warmup Iteration  26: 1365273.864 ops/s
# Warmup Iteration  27: 1362024.785 ops/s
# Warmup Iteration  28: 1366037.675 ops/s
# Warmup Iteration  29: 1360183.440 ops/s
# Warmup Iteration  30: 1363722.530 ops/s
Iteration   1: 1366794.572 ops/s
Iteration   2: 1366586.343 ops/s
Iteration   3: 1363725.796 ops/s
Iteration   4: 1367273.286 ops/s
Iteration   5: 1368383.467 ops/s
Iteration   6: 1366966.348 ops/s
Iteration   7: 1370688.007 ops/s
Iteration   8: 1358761.018 ops/s
Iteration   9: 1360183.902 ops/s
Iteration  10: 1365302.004 ops/s
Iteration  11: 1361305.381 ops/s
Iteration  12: 1367906.139 ops/s
Iteration  13: 1364536.482 ops/s
Iteration  14: 1351413.864 ops/s
Iteration  15: 1353677.654 ops/s
Iteration  16: 1357970.612 ops/s
Iteration  17: 1359558.089 ops/s
Iteration  18: 1352696.891 ops/s
Iteration  19: 1365085.595 ops/s
Iteration  20: 1350146.020 ops/s
Iteration  21: 1358790.740 ops/s
Iteration  22: 1364951.425 ops/s
Iteration  23: 1365479.276 ops/s
Iteration  24: 1363066.625 ops/s
Iteration  25: 1366529.492 ops/s
Iteration  26: 1365933.900 ops/s
Iteration  27: 1362980.820 ops/s
Iteration  28: 1364015.960 ops/s
Iteration  29: 1361351.905 ops/s
Iteration  30: 1367165.914 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_anySatisfy":
  1362640.918 ±(99.9%) 3531.752 ops/s [Average]
  (min, avg, max) = (1350146.020, 1362640.918, 1370688.007), stdev = 5286.160
  CI (99.9%): [1359109.166, 1366172.669] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_anySatisfy  thrpt   30  1362640.918 ± 3531.752  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_anySatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_anySatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1131536.890 ops/s
# Warmup Iteration   2: 2198945.046 ops/s
# Warmup Iteration   3: 2410977.712 ops/s
# Warmup Iteration   4: 2421264.897 ops/s
# Warmup Iteration   5: 1970206.194 ops/s
# Warmup Iteration   6: 2421436.461 ops/s
# Warmup Iteration   7: 2424201.477 ops/s
# Warmup Iteration   8: 2424056.922 ops/s
# Warmup Iteration   9: 2425510.311 ops/s
# Warmup Iteration  10: 2424655.272 ops/s
# Warmup Iteration  11: 2418744.226 ops/s
# Warmup Iteration  12: 2422969.979 ops/s
# Warmup Iteration  13: 2421996.044 ops/s
# Warmup Iteration  14: 2418671.376 ops/s
# Warmup Iteration  15: 2425342.118 ops/s
# Warmup Iteration  16: 2426407.821 ops/s
# Warmup Iteration  17: 2414119.173 ops/s
# Warmup Iteration  18: 2422871.087 ops/s
# Warmup Iteration  19: 2420206.478 ops/s
# Warmup Iteration  20: 2422466.833 ops/s
# Warmup Iteration  21: 2425362.160 ops/s
# Warmup Iteration  22: 2430828.328 ops/s
# Warmup Iteration  23: 2424873.742 ops/s
# Warmup Iteration  24: 2428612.496 ops/s
# Warmup Iteration  25: 2425500.065 ops/s
# Warmup Iteration  26: 2426137.184 ops/s
# Warmup Iteration  27: 2429868.227 ops/s
# Warmup Iteration  28: 2424858.718 ops/s
# Warmup Iteration  29: 2424378.789 ops/s
# Warmup Iteration  30: 2425437.113 ops/s
Iteration   1: 2426385.364 ops/s
Iteration   2: 2431947.465 ops/s
Iteration   3: 2419298.299 ops/s
Iteration   4: 2428592.646 ops/s
Iteration   5: 2431815.543 ops/s
Iteration   6: 2423699.925 ops/s
Iteration   7: 2421609.487 ops/s
Iteration   8: 2420742.844 ops/s
Iteration   9: 2427755.205 ops/s
Iteration  10: 2422351.418 ops/s
Iteration  11: 2429594.188 ops/s
Iteration  12: 2420873.606 ops/s
Iteration  13: 2427729.470 ops/s
Iteration  14: 2428496.832 ops/s
Iteration  15: 2426657.067 ops/s
Iteration  16: 2426950.874 ops/s
Iteration  17: 2432151.737 ops/s
Iteration  18: 2420557.222 ops/s
Iteration  19: 2428052.800 ops/s
Iteration  20: 2425404.212 ops/s
Iteration  21: 2415897.278 ops/s
Iteration  22: 2428497.199 ops/s
Iteration  23: 2428492.542 ops/s
Iteration  24: 2427621.239 ops/s
Iteration  25: 2411759.784 ops/s
Iteration  26: 2430142.254 ops/s
Iteration  27: 2399187.658 ops/s
Iteration  28: 2423454.369 ops/s
Iteration  29: 2420544.130 ops/s
Iteration  30: 2424469.844 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_anySatisfyWith":
  2424357.750 ±(99.9%) 4516.108 ops/s [Average]
  (min, avg, max) = (2399187.658, 2424357.750, 2432151.737), stdev = 6759.499
  CI (99.9%): [2419841.642, 2428873.858] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_anySatisfyWith  thrpt   30  2424357.750 ± 4516.108  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_anySatisfyWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_anySatisfyWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1880648.585 ops/s
# Warmup Iteration   2: 2996225.293 ops/s
# Warmup Iteration   3: 3584143.444 ops/s
# Warmup Iteration   4: 3593349.939 ops/s
# Warmup Iteration   5: 3588931.936 ops/s
# Warmup Iteration   6: 3264543.492 ops/s
# Warmup Iteration   7: 3191658.099 ops/s
# Warmup Iteration   8: 3586785.615 ops/s
# Warmup Iteration   9: 3583423.826 ops/s
# Warmup Iteration  10: 3596622.008 ops/s
# Warmup Iteration  11: 3581601.850 ops/s
# Warmup Iteration  12: 3594511.505 ops/s
# Warmup Iteration  13: 3593864.072 ops/s
# Warmup Iteration  14: 3601222.182 ops/s
# Warmup Iteration  15: 3592173.554 ops/s
# Warmup Iteration  16: 3565426.925 ops/s
# Warmup Iteration  17: 3608617.895 ops/s
# Warmup Iteration  18: 3588901.894 ops/s
# Warmup Iteration  19: 3598655.607 ops/s
# Warmup Iteration  20: 3587304.679 ops/s
# Warmup Iteration  21: 3604556.852 ops/s
# Warmup Iteration  22: 3589998.480 ops/s
# Warmup Iteration  23: 3579005.412 ops/s
# Warmup Iteration  24: 3582338.853 ops/s
# Warmup Iteration  25: 3609113.523 ops/s
# Warmup Iteration  26: 3584953.583 ops/s
# Warmup Iteration  27: 3584203.767 ops/s
# Warmup Iteration  28: 3603275.032 ops/s
# Warmup Iteration  29: 3595902.495 ops/s
# Warmup Iteration  30: 3596093.026 ops/s
Iteration   1: 3566954.591 ops/s
Iteration   2: 3601750.019 ops/s
Iteration   3: 3611135.891 ops/s
Iteration   4: 3617969.549 ops/s
Iteration   5: 3601277.849 ops/s
Iteration   6: 3596921.461 ops/s
Iteration   7: 3615144.966 ops/s
Iteration   8: 3608764.034 ops/s
Iteration   9: 3585968.434 ops/s
Iteration  10: 3605831.543 ops/s
Iteration  11: 3613888.989 ops/s
Iteration  12: 3573187.723 ops/s
Iteration  13: 3606692.639 ops/s
Iteration  14: 3582899.869 ops/s
Iteration  15: 3587874.265 ops/s
Iteration  16: 3598225.857 ops/s
Iteration  17: 3583121.778 ops/s
Iteration  18: 3608248.306 ops/s
Iteration  19: 3583695.818 ops/s
Iteration  20: 3567990.518 ops/s
Iteration  21: 3601477.044 ops/s
Iteration  22: 3608288.585 ops/s
Iteration  23: 3590690.104 ops/s
Iteration  24: 3594963.727 ops/s
Iteration  25: 3589768.598 ops/s
Iteration  26: 3556362.342 ops/s
Iteration  27: 3592775.630 ops/s
Iteration  28: 3563450.811 ops/s
Iteration  29: 3595694.440 ops/s
Iteration  30: 3590970.074 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_anySatisfyWithOccurrences":
  3593399.515 ±(99.9%) 10748.432 ops/s [Average]
  (min, avg, max) = (3556362.342, 3593399.515, 3617969.549), stdev = 16087.748
  CI (99.9%): [3582651.083, 3604147.947] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_anySatisfyWithOccurrences  thrpt   30  3593399.515 ± 10748.432  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 396404.650 ops/s
# Warmup Iteration   2: 702283.112 ops/s
# Warmup Iteration   3: 797815.253 ops/s
# Warmup Iteration   4: 802942.586 ops/s
# Warmup Iteration   5: 804327.639 ops/s
# Warmup Iteration   6: 664454.534 ops/s
# Warmup Iteration   7: 798073.930 ops/s
# Warmup Iteration   8: 794470.048 ops/s
# Warmup Iteration   9: 798685.595 ops/s
# Warmup Iteration  10: 796550.974 ops/s
# Warmup Iteration  11: 801211.348 ops/s
# Warmup Iteration  12: 794728.871 ops/s
# Warmup Iteration  13: 797060.822 ops/s
# Warmup Iteration  14: 803548.329 ops/s
# Warmup Iteration  15: 800162.330 ops/s
# Warmup Iteration  16: 798567.440 ops/s
# Warmup Iteration  17: 802646.322 ops/s
# Warmup Iteration  18: 801284.896 ops/s
# Warmup Iteration  19: 802780.821 ops/s
# Warmup Iteration  20: 801813.779 ops/s
# Warmup Iteration  21: 802238.802 ops/s
# Warmup Iteration  22: 802935.060 ops/s
# Warmup Iteration  23: 801770.935 ops/s
# Warmup Iteration  24: 801935.264 ops/s
# Warmup Iteration  25: 800149.423 ops/s
# Warmup Iteration  26: 800702.008 ops/s
# Warmup Iteration  27: 801833.828 ops/s
# Warmup Iteration  28: 803023.807 ops/s
# Warmup Iteration  29: 799589.097 ops/s
# Warmup Iteration  30: 797605.407 ops/s
Iteration   1: 802257.969 ops/s
Iteration   2: 802117.195 ops/s
Iteration   3: 800559.156 ops/s
Iteration   4: 801746.730 ops/s
Iteration   5: 798904.672 ops/s
Iteration   6: 803574.818 ops/s
Iteration   7: 798526.996 ops/s
Iteration   8: 798994.727 ops/s
Iteration   9: 801596.868 ops/s
Iteration  10: 795783.848 ops/s
Iteration  11: 800916.852 ops/s
Iteration  12: 800163.758 ops/s
Iteration  13: 797359.243 ops/s
Iteration  14: 803264.211 ops/s
Iteration  15: 800665.756 ops/s
Iteration  16: 804247.292 ops/s
Iteration  17: 802845.954 ops/s
Iteration  18: 802177.117 ops/s
Iteration  19: 796972.502 ops/s
Iteration  20: 800253.399 ops/s
Iteration  21: 802249.583 ops/s
Iteration  22: 803850.439 ops/s
Iteration  23: 802478.478 ops/s
Iteration  24: 800903.861 ops/s
Iteration  25: 804685.096 ops/s
Iteration  26: 802074.397 ops/s
Iteration  27: 798022.662 ops/s
Iteration  28: 796085.510 ops/s
Iteration  29: 803932.282 ops/s
Iteration  30: 801398.799 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_appendString":
  800953.672 ±(99.9%) 1626.845 ops/s [Average]
  (min, avg, max) = (795783.848, 800953.672, 804685.096), stdev = 2434.986
  CI (99.9%): [799326.827, 802580.518] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_appendString  thrpt   30  800953.672 ± 1626.845  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_appendStringThrows$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_appendStringThrows

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 99810.902 ops/s
# Warmup Iteration   2: 106788.019 ops/s
# Warmup Iteration   3: 128856.038 ops/s
# Warmup Iteration   4: 137623.054 ops/s
# Warmup Iteration   5: 138120.581 ops/s
# Warmup Iteration   6: 137177.644 ops/s
# Warmup Iteration   7: 138164.494 ops/s
# Warmup Iteration   8: 137914.667 ops/s
# Warmup Iteration   9: 137519.786 ops/s
# Warmup Iteration  10: 137663.512 ops/s
# Warmup Iteration  11: 137305.116 ops/s
# Warmup Iteration  12: 137907.732 ops/s
# Warmup Iteration  13: 128441.965 ops/s
# Warmup Iteration  14: 124335.024 ops/s
# Warmup Iteration  15: 137677.464 ops/s
# Warmup Iteration  16: 137754.276 ops/s
# Warmup Iteration  17: 144838.501 ops/s
# Warmup Iteration  18: 144655.033 ops/s
# Warmup Iteration  19: 143935.479 ops/s
# Warmup Iteration  20: 144232.165 ops/s
# Warmup Iteration  21: 144246.892 ops/s
# Warmup Iteration  22: 144355.937 ops/s
# Warmup Iteration  23: 143633.296 ops/s
# Warmup Iteration  24: 144945.735 ops/s
# Warmup Iteration  25: 144542.073 ops/s
# Warmup Iteration  26: 144507.753 ops/s
# Warmup Iteration  27: 144310.804 ops/s
# Warmup Iteration  28: 144866.320 ops/s
# Warmup Iteration  29: 144847.980 ops/s
# Warmup Iteration  30: 144691.615 ops/s
Iteration   1: 144297.158 ops/s
Iteration   2: 145147.658 ops/s
Iteration   3: 144674.830 ops/s
Iteration   4: 144746.656 ops/s
Iteration   5: 145289.489 ops/s
Iteration   6: 145236.903 ops/s
Iteration   7: 145171.458 ops/s
Iteration   8: 144408.064 ops/s
Iteration   9: 145135.280 ops/s
Iteration  10: 144882.206 ops/s
Iteration  11: 144933.564 ops/s
Iteration  12: 144485.567 ops/s
Iteration  13: 144742.401 ops/s
Iteration  14: 144653.274 ops/s
Iteration  15: 144481.189 ops/s
Iteration  16: 144780.374 ops/s
Iteration  17: 144462.371 ops/s
Iteration  18: 144190.841 ops/s
Iteration  19: 144712.945 ops/s
Iteration  20: 144582.087 ops/s
Iteration  21: 144800.999 ops/s
Iteration  22: 144605.795 ops/s
Iteration  23: 144807.016 ops/s
Iteration  24: 145101.536 ops/s
Iteration  25: 143650.412 ops/s
Iteration  26: 144840.043 ops/s
Iteration  27: 144274.369 ops/s
Iteration  28: 144300.599 ops/s
Iteration  29: 144754.148 ops/s
Iteration  30: 144110.938 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_appendStringThrows":
  144675.339 ±(99.9%) 248.299 ops/s [Average]
  (min, avg, max) = (143650.412, 144675.339, 145289.489), stdev = 371.642
  CI (99.9%): [144427.040, 144923.638] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score     Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_appendStringThrows  thrpt   30  144675.339 ± 248.299  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_appendStringWithSeparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_appendStringWithSeparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 990873.132 ops/s
# Warmup Iteration   2: 2225056.029 ops/s
# Warmup Iteration   3: 2268048.077 ops/s
# Warmup Iteration   4: 1927781.320 ops/s
# Warmup Iteration   5: 2205409.804 ops/s
# Warmup Iteration   6: 2267292.083 ops/s
# Warmup Iteration   7: 2264016.854 ops/s
# Warmup Iteration   8: 2265259.065 ops/s
# Warmup Iteration   9: 2237343.154 ops/s
# Warmup Iteration  10: 2276642.962 ops/s
# Warmup Iteration  11: 2271301.052 ops/s
# Warmup Iteration  12: 2275773.676 ops/s
# Warmup Iteration  13: 2277212.640 ops/s
# Warmup Iteration  14: 2271370.819 ops/s
# Warmup Iteration  15: 2268929.590 ops/s
# Warmup Iteration  16: 2277546.675 ops/s
# Warmup Iteration  17: 2263569.017 ops/s
# Warmup Iteration  18: 2270877.368 ops/s
# Warmup Iteration  19: 2275010.614 ops/s
# Warmup Iteration  20: 2267664.774 ops/s
# Warmup Iteration  21: 2267093.027 ops/s
# Warmup Iteration  22: 2272959.557 ops/s
# Warmup Iteration  23: 2272863.971 ops/s
# Warmup Iteration  24: 2259772.793 ops/s
# Warmup Iteration  25: 2267167.341 ops/s
# Warmup Iteration  26: 2271208.169 ops/s
# Warmup Iteration  27: 2273199.038 ops/s
# Warmup Iteration  28: 2265389.016 ops/s
# Warmup Iteration  29: 2265645.696 ops/s
# Warmup Iteration  30: 2270196.867 ops/s
Iteration   1: 2267807.943 ops/s
Iteration   2: 2271836.856 ops/s
Iteration   3: 2259854.032 ops/s
Iteration   4: 2255219.318 ops/s
Iteration   5: 2269730.001 ops/s
Iteration   6: 2262789.349 ops/s
Iteration   7: 2252790.283 ops/s
Iteration   8: 2251839.801 ops/s
Iteration   9: 2261156.064 ops/s
Iteration  10: 2270322.070 ops/s
Iteration  11: 2273268.687 ops/s
Iteration  12: 2268706.605 ops/s
Iteration  13: 2270778.971 ops/s
Iteration  14: 2270553.248 ops/s
Iteration  15: 2270894.695 ops/s
Iteration  16: 2271030.454 ops/s
Iteration  17: 2276075.699 ops/s
Iteration  18: 2271605.565 ops/s
Iteration  19: 2257005.125 ops/s
Iteration  20: 2259517.001 ops/s
Iteration  21: 2261641.177 ops/s
Iteration  22: 2275357.400 ops/s
Iteration  23: 2266836.644 ops/s
Iteration  24: 2272592.931 ops/s
Iteration  25: 2262228.283 ops/s
Iteration  26: 2273310.363 ops/s
Iteration  27: 2269180.043 ops/s
Iteration  28: 2278589.983 ops/s
Iteration  29: 2266354.978 ops/s
Iteration  30: 2269806.741 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_appendStringWithSeparator":
  2266956.010 ±(99.9%) 4668.213 ops/s [Average]
  (min, avg, max) = (2251839.801, 2266956.010, 2278589.983), stdev = 6987.162
  CI (99.9%): [2262287.797, 2271624.223] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_appendStringWithSeparator  thrpt   30  2266956.010 ± 4668.213  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1027229.566 ops/s
# Warmup Iteration   2: 2222342.841 ops/s
# Warmup Iteration   3: 2295903.639 ops/s
# Warmup Iteration   4: 2228744.197 ops/s
# Warmup Iteration   5: 1972605.262 ops/s
# Warmup Iteration   6: 2310004.744 ops/s
# Warmup Iteration   7: 2302463.593 ops/s
# Warmup Iteration   8: 2308619.590 ops/s
# Warmup Iteration   9: 2307570.573 ops/s
# Warmup Iteration  10: 2309073.807 ops/s
# Warmup Iteration  11: 2300521.261 ops/s
# Warmup Iteration  12: 2299865.945 ops/s
# Warmup Iteration  13: 2295318.780 ops/s
# Warmup Iteration  14: 2304104.553 ops/s
# Warmup Iteration  15: 2310575.973 ops/s
# Warmup Iteration  16: 2293935.557 ops/s
# Warmup Iteration  17: 2302512.161 ops/s
# Warmup Iteration  18: 2299542.521 ops/s
# Warmup Iteration  19: 2308151.635 ops/s
# Warmup Iteration  20: 2294528.794 ops/s
# Warmup Iteration  21: 2308802.631 ops/s
# Warmup Iteration  22: 2304475.942 ops/s
# Warmup Iteration  23: 2297304.995 ops/s
# Warmup Iteration  24: 2303285.774 ops/s
# Warmup Iteration  25: 2305275.892 ops/s
# Warmup Iteration  26: 2305211.555 ops/s
# Warmup Iteration  27: 2301611.068 ops/s
# Warmup Iteration  28: 2305722.847 ops/s
# Warmup Iteration  29: 2304047.366 ops/s
# Warmup Iteration  30: 2306037.638 ops/s
Iteration   1: 2304906.962 ops/s
Iteration   2: 2312101.006 ops/s
Iteration   3: 2296202.599 ops/s
Iteration   4: 2303741.310 ops/s
Iteration   5: 2301100.790 ops/s
Iteration   6: 2306907.854 ops/s
Iteration   7: 2303094.293 ops/s
Iteration   8: 2308070.816 ops/s
Iteration   9: 2313474.749 ops/s
Iteration  10: 2301225.219 ops/s
Iteration  11: 2302580.687 ops/s
Iteration  12: 2308389.310 ops/s
Iteration  13: 2309808.780 ops/s
Iteration  14: 2303489.855 ops/s
Iteration  15: 2303620.324 ops/s
Iteration  16: 2301704.301 ops/s
Iteration  17: 2305146.305 ops/s
Iteration  18: 2294098.974 ops/s
Iteration  19: 2303294.823 ops/s
Iteration  20: 2306490.390 ops/s
Iteration  21: 2307081.573 ops/s
Iteration  22: 2301567.908 ops/s
Iteration  23: 2301817.497 ops/s
Iteration  24: 2308911.718 ops/s
Iteration  25: 2289456.116 ops/s
Iteration  26: 2309386.241 ops/s
Iteration  27: 2306325.120 ops/s
Iteration  28: 2297783.386 ops/s
Iteration  29: 2304154.019 ops/s
Iteration  30: 2302211.830 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd":
  2303938.159 ±(99.9%) 3415.235 ops/s [Average]
  (min, avg, max) = (2289456.116, 2303938.159, 2313474.749), stdev = 5111.764
  CI (99.9%): [2300522.923, 2307353.394] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd  thrpt   30  2303938.159 ± 3415.235  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_appendString_with_separator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_appendString_with_separator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 700493.458 ops/s
# Warmup Iteration   2: 1158046.718 ops/s
# Warmup Iteration   3: 1308076.176 ops/s
# Warmup Iteration   4: 1322206.256 ops/s
# Warmup Iteration   5: 1315527.912 ops/s
# Warmup Iteration   6: 1088290.548 ops/s
# Warmup Iteration   7: 1321323.830 ops/s
# Warmup Iteration   8: 1318894.760 ops/s
# Warmup Iteration   9: 1315663.742 ops/s
# Warmup Iteration  10: 1321516.376 ops/s
# Warmup Iteration  11: 1322202.232 ops/s
# Warmup Iteration  12: 1321436.101 ops/s
# Warmup Iteration  13: 1320986.948 ops/s
# Warmup Iteration  14: 1318765.854 ops/s
# Warmup Iteration  15: 1319485.073 ops/s
# Warmup Iteration  16: 1315167.427 ops/s
# Warmup Iteration  17: 1322596.858 ops/s
# Warmup Iteration  18: 1318760.112 ops/s
# Warmup Iteration  19: 1319485.244 ops/s
# Warmup Iteration  20: 1319818.074 ops/s
# Warmup Iteration  21: 1318626.093 ops/s
# Warmup Iteration  22: 1320827.918 ops/s
# Warmup Iteration  23: 1318187.369 ops/s
# Warmup Iteration  24: 1318947.650 ops/s
# Warmup Iteration  25: 1314579.653 ops/s
# Warmup Iteration  26: 1314315.900 ops/s
# Warmup Iteration  27: 1319171.205 ops/s
# Warmup Iteration  28: 1321190.753 ops/s
# Warmup Iteration  29: 1319257.605 ops/s
# Warmup Iteration  30: 1315654.904 ops/s
Iteration   1: 1314691.847 ops/s
Iteration   2: 1322466.720 ops/s
Iteration   3: 1314894.374 ops/s
Iteration   4: 1314736.485 ops/s
Iteration   5: 1319462.560 ops/s
Iteration   6: 1321052.234 ops/s
Iteration   7: 1322732.911 ops/s
Iteration   8: 1320696.205 ops/s
Iteration   9: 1317046.956 ops/s
Iteration  10: 1319237.262 ops/s
Iteration  11: 1320856.259 ops/s
Iteration  12: 1305954.534 ops/s
Iteration  13: 1312070.092 ops/s
Iteration  14: 1321973.386 ops/s
Iteration  15: 1324547.431 ops/s
Iteration  16: 1321107.328 ops/s
Iteration  17: 1321925.170 ops/s
Iteration  18: 1323450.555 ops/s
Iteration  19: 1318708.866 ops/s
Iteration  20: 1321579.718 ops/s
Iteration  21: 1319598.054 ops/s
Iteration  22: 1322674.788 ops/s
Iteration  23: 1322317.982 ops/s
Iteration  24: 1322499.323 ops/s
Iteration  25: 1318373.525 ops/s
Iteration  26: 1316997.370 ops/s
Iteration  27: 1320838.261 ops/s
Iteration  28: 1314651.604 ops/s
Iteration  29: 1321641.618 ops/s
Iteration  30: 1323891.445 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_appendString_with_separator":
  1319422.495 ±(99.9%) 2720.655 ops/s [Average]
  (min, avg, max) = (1305954.534, 1319422.495, 1324547.431), stdev = 4072.148
  CI (99.9%): [1316701.841, 1322143.150] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_appendString_with_separator  thrpt   30  1319422.495 ± 2720.655  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_appendString_with_start_separator_end$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_appendString_with_start_separator_end

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 785813.859 ops/s
# Warmup Iteration   2: 1165928.792 ops/s
# Warmup Iteration   3: 1379230.318 ops/s
# Warmup Iteration   4: 1381733.118 ops/s
# Warmup Iteration   5: 1385377.252 ops/s
# Warmup Iteration   6: 1374462.411 ops/s
# Warmup Iteration   7: 1139939.658 ops/s
# Warmup Iteration   8: 1381045.318 ops/s
# Warmup Iteration   9: 1384883.951 ops/s
# Warmup Iteration  10: 1386062.341 ops/s
# Warmup Iteration  11: 1385776.229 ops/s
# Warmup Iteration  12: 1380101.762 ops/s
# Warmup Iteration  13: 1383737.819 ops/s
# Warmup Iteration  14: 1383542.044 ops/s
# Warmup Iteration  15: 1382665.368 ops/s
# Warmup Iteration  16: 1387850.457 ops/s
# Warmup Iteration  17: 1386244.660 ops/s
# Warmup Iteration  18: 1385748.395 ops/s
# Warmup Iteration  19: 1389140.998 ops/s
# Warmup Iteration  20: 1384487.108 ops/s
# Warmup Iteration  21: 1386644.096 ops/s
# Warmup Iteration  22: 1385496.649 ops/s
# Warmup Iteration  23: 1386083.083 ops/s
# Warmup Iteration  24: 1390074.773 ops/s
# Warmup Iteration  25: 1386620.962 ops/s
# Warmup Iteration  26: 1384989.734 ops/s
# Warmup Iteration  27: 1384060.189 ops/s
# Warmup Iteration  28: 1387067.017 ops/s
# Warmup Iteration  29: 1377656.480 ops/s
# Warmup Iteration  30: 1385558.257 ops/s
Iteration   1: 1382224.500 ops/s
Iteration   2: 1390952.034 ops/s
Iteration   3: 1385953.820 ops/s
Iteration   4: 1387813.734 ops/s
Iteration   5: 1387578.933 ops/s
Iteration   6: 1378648.935 ops/s
Iteration   7: 1389247.099 ops/s
Iteration   8: 1385242.499 ops/s
Iteration   9: 1392523.087 ops/s
Iteration  10: 1388030.039 ops/s
Iteration  11: 1384757.306 ops/s
Iteration  12: 1388324.784 ops/s
Iteration  13: 1389762.593 ops/s
Iteration  14: 1385571.245 ops/s
Iteration  15: 1386429.513 ops/s
Iteration  16: 1384567.008 ops/s
Iteration  17: 1382344.612 ops/s
Iteration  18: 1387238.202 ops/s
Iteration  19: 1388865.163 ops/s
Iteration  20: 1391518.774 ops/s
Iteration  21: 1388709.734 ops/s
Iteration  22: 1386070.778 ops/s
Iteration  23: 1383357.091 ops/s
Iteration  24: 1386239.112 ops/s
Iteration  25: 1387347.545 ops/s
Iteration  26: 1389920.630 ops/s
Iteration  27: 1387160.563 ops/s
Iteration  28: 1385164.509 ops/s
Iteration  29: 1380599.494 ops/s
Iteration  30: 1387277.218 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_appendString_with_start_separator_end":
  1386648.018 ±(99.9%) 2095.564 ops/s [Average]
  (min, avg, max) = (1378648.935, 1386648.018, 1392523.087), stdev = 3136.541
  CI (99.9%): [1384552.455, 1388743.582] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_appendString_with_start_separator_end  thrpt   30  1386648.018 ± 2095.564  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_asLazy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_asLazy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1042089.599 ops/s
# Warmup Iteration   2: 1648067.481 ops/s
# Warmup Iteration   3: 2002176.788 ops/s
# Warmup Iteration   4: 2008087.849 ops/s
# Warmup Iteration   5: 2020888.892 ops/s
# Warmup Iteration   6: 2029307.702 ops/s
# Warmup Iteration   7: 1639379.705 ops/s
# Warmup Iteration   8: 2014411.149 ops/s
# Warmup Iteration   9: 2021224.823 ops/s
# Warmup Iteration  10: 2023476.066 ops/s
# Warmup Iteration  11: 2021452.730 ops/s
# Warmup Iteration  12: 2022618.866 ops/s
# Warmup Iteration  13: 2021440.748 ops/s
# Warmup Iteration  14: 2022234.052 ops/s
# Warmup Iteration  15: 2022916.505 ops/s
# Warmup Iteration  16: 2026598.910 ops/s
# Warmup Iteration  17: 2018950.726 ops/s
# Warmup Iteration  18: 2016527.277 ops/s
# Warmup Iteration  19: 2020491.635 ops/s
# Warmup Iteration  20: 2024208.260 ops/s
# Warmup Iteration  21: 2017251.010 ops/s
# Warmup Iteration  22: 2022924.608 ops/s
# Warmup Iteration  23: 2017390.927 ops/s
# Warmup Iteration  24: 2021620.343 ops/s
# Warmup Iteration  25: 2017847.944 ops/s
# Warmup Iteration  26: 2025144.199 ops/s
# Warmup Iteration  27: 2024935.598 ops/s
# Warmup Iteration  28: 2022863.114 ops/s
# Warmup Iteration  29: 2023123.605 ops/s
# Warmup Iteration  30: 2022432.210 ops/s
Iteration   1: 2017852.599 ops/s
Iteration   2: 2017611.794 ops/s
Iteration   3: 2010741.552 ops/s
Iteration   4: 2010386.952 ops/s
Iteration   5: 2016350.656 ops/s
Iteration   6: 2030289.305 ops/s
Iteration   7: 2019579.244 ops/s
Iteration   8: 2026125.199 ops/s
Iteration   9: 2021064.702 ops/s
Iteration  10: 2007288.295 ops/s
Iteration  11: 2019783.883 ops/s
Iteration  12: 2010126.549 ops/s
Iteration  13: 2019955.828 ops/s
Iteration  14: 2017830.653 ops/s
Iteration  15: 2018822.777 ops/s
Iteration  16: 2007383.715 ops/s
Iteration  17: 2022026.202 ops/s
Iteration  18: 2024058.110 ops/s
Iteration  19: 2019846.773 ops/s
Iteration  20: 2013808.600 ops/s
Iteration  21: 2017195.561 ops/s
Iteration  22: 2022783.951 ops/s
Iteration  23: 2022040.050 ops/s
Iteration  24: 2011591.267 ops/s
Iteration  25: 2009691.881 ops/s
Iteration  26: 2025171.413 ops/s
Iteration  27: 2022028.656 ops/s
Iteration  28: 2017425.077 ops/s
Iteration  29: 2021152.896 ops/s
Iteration  30: 2024754.611 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_asLazy":
  2018158.958 ±(99.9%) 3896.243 ops/s [Average]
  (min, avg, max) = (2007288.295, 2018158.958, 2030289.305), stdev = 5831.714
  CI (99.9%): [2014262.715, 2022055.202] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_asLazy  thrpt   30  2018158.958 ± 3896.243  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_bottomOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_bottomOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 79679.047 ops/s
# Warmup Iteration   2: 136961.458 ops/s
# Warmup Iteration   3: 165373.138 ops/s
# Warmup Iteration   4: 166146.337 ops/s
# Warmup Iteration   5: 166737.994 ops/s
# Warmup Iteration   6: 148793.495 ops/s
# Warmup Iteration   7: 155164.420 ops/s
# Warmup Iteration   8: 166987.687 ops/s
# Warmup Iteration   9: 167139.001 ops/s
# Warmup Iteration  10: 166949.500 ops/s
# Warmup Iteration  11: 166566.086 ops/s
# Warmup Iteration  12: 166991.452 ops/s
# Warmup Iteration  13: 166618.905 ops/s
# Warmup Iteration  14: 166882.898 ops/s
# Warmup Iteration  15: 166429.623 ops/s
# Warmup Iteration  16: 166351.036 ops/s
# Warmup Iteration  17: 168242.457 ops/s
# Warmup Iteration  18: 168252.790 ops/s
# Warmup Iteration  19: 167897.304 ops/s
# Warmup Iteration  20: 167820.656 ops/s
# Warmup Iteration  21: 168632.521 ops/s
# Warmup Iteration  22: 168445.325 ops/s
# Warmup Iteration  23: 168592.506 ops/s
# Warmup Iteration  24: 168846.563 ops/s
# Warmup Iteration  25: 168036.684 ops/s
# Warmup Iteration  26: 168272.186 ops/s
# Warmup Iteration  27: 168508.433 ops/s
# Warmup Iteration  28: 168132.775 ops/s
# Warmup Iteration  29: 168053.609 ops/s
# Warmup Iteration  30: 167877.404 ops/s
Iteration   1: 166839.899 ops/s
Iteration   2: 168417.714 ops/s
Iteration   3: 168089.899 ops/s
Iteration   4: 168189.368 ops/s
Iteration   5: 167099.495 ops/s
Iteration   6: 168055.870 ops/s
Iteration   7: 168389.765 ops/s
Iteration   8: 166754.370 ops/s
Iteration   9: 167688.259 ops/s
Iteration  10: 168390.451 ops/s
Iteration  11: 167971.038 ops/s
Iteration  12: 168563.293 ops/s
Iteration  13: 168319.384 ops/s
Iteration  14: 167886.063 ops/s
Iteration  15: 167843.580 ops/s
Iteration  16: 168339.424 ops/s
Iteration  17: 167620.521 ops/s
Iteration  18: 167169.686 ops/s
Iteration  19: 167654.480 ops/s
Iteration  20: 168199.824 ops/s
Iteration  21: 168468.540 ops/s
Iteration  22: 168220.510 ops/s
Iteration  23: 167846.441 ops/s
Iteration  24: 167431.863 ops/s
Iteration  25: 168410.633 ops/s
Iteration  26: 168296.190 ops/s
Iteration  27: 168603.972 ops/s
Iteration  28: 167860.240 ops/s
Iteration  29: 168780.487 ops/s
Iteration  30: 168344.693 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_bottomOccurrences":
  167991.532 ±(99.9%) 348.224 ops/s [Average]
  (min, avg, max) = (166754.370, 167991.532, 168780.487), stdev = 521.205
  CI (99.9%): [167643.308, 168339.755] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score     Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_bottomOccurrences  thrpt   30  167991.532 ± 348.224  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_chunk$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_chunk

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 447203.728 ops/s
# Warmup Iteration   2: 833188.962 ops/s
# Warmup Iteration   3: 960069.938 ops/s
# Warmup Iteration   4: 961963.299 ops/s
# Warmup Iteration   5: 957237.623 ops/s
# Warmup Iteration   6: 792494.654 ops/s
# Warmup Iteration   7: 963064.493 ops/s
# Warmup Iteration   8: 964725.588 ops/s
# Warmup Iteration   9: 966035.154 ops/s
# Warmup Iteration  10: 962623.529 ops/s
# Warmup Iteration  11: 963799.577 ops/s
# Warmup Iteration  12: 962431.473 ops/s
# Warmup Iteration  13: 963205.532 ops/s
# Warmup Iteration  14: 961797.224 ops/s
# Warmup Iteration  15: 961703.837 ops/s
# Warmup Iteration  16: 966568.285 ops/s
# Warmup Iteration  17: 962300.956 ops/s
# Warmup Iteration  18: 960326.967 ops/s
# Warmup Iteration  19: 961119.603 ops/s
# Warmup Iteration  20: 964381.163 ops/s
# Warmup Iteration  21: 966571.432 ops/s
# Warmup Iteration  22: 964376.489 ops/s
# Warmup Iteration  23: 964366.519 ops/s
# Warmup Iteration  24: 965129.079 ops/s
# Warmup Iteration  25: 964895.586 ops/s
# Warmup Iteration  26: 964297.563 ops/s
# Warmup Iteration  27: 964263.931 ops/s
# Warmup Iteration  28: 964163.688 ops/s
# Warmup Iteration  29: 967567.176 ops/s
# Warmup Iteration  30: 965819.500 ops/s
Iteration   1: 960499.175 ops/s
Iteration   2: 966134.862 ops/s
Iteration   3: 966112.945 ops/s
Iteration   4: 967331.338 ops/s
Iteration   5: 966830.946 ops/s
Iteration   6: 963814.341 ops/s
Iteration   7: 966331.316 ops/s
Iteration   8: 964524.112 ops/s
Iteration   9: 954738.546 ops/s
Iteration  10: 968076.006 ops/s
Iteration  11: 962928.237 ops/s
Iteration  12: 967908.170 ops/s
Iteration  13: 964533.338 ops/s
Iteration  14: 964782.667 ops/s
Iteration  15: 965854.718 ops/s
Iteration  16: 958518.690 ops/s
Iteration  17: 966650.594 ops/s
Iteration  18: 963454.228 ops/s
Iteration  19: 958753.031 ops/s
Iteration  20: 967334.638 ops/s
Iteration  21: 962846.501 ops/s
Iteration  22: 965954.450 ops/s
Iteration  23: 964965.359 ops/s
Iteration  24: 957641.068 ops/s
Iteration  25: 964870.864 ops/s
Iteration  26: 963593.723 ops/s
Iteration  27: 963045.429 ops/s
Iteration  28: 962034.405 ops/s
Iteration  29: 964983.259 ops/s
Iteration  30: 968289.434 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_chunk":
  964111.213 ±(99.9%) 2207.223 ops/s [Average]
  (min, avg, max) = (954738.546, 964111.213, 968289.434), stdev = 3303.668
  CI (99.9%): [961903.990, 966318.436] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_chunk  thrpt   30  964111.213 ± 2207.223  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_chunk_empty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_chunk_empty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5280781.810 ops/s
# Warmup Iteration   2: 11998203.518 ops/s
# Warmup Iteration   3: 12059100.071 ops/s
# Warmup Iteration   4: 10089868.896 ops/s
# Warmup Iteration   5: 12093518.721 ops/s
# Warmup Iteration   6: 12055264.587 ops/s
# Warmup Iteration   7: 12064986.299 ops/s
# Warmup Iteration   8: 12111115.831 ops/s
# Warmup Iteration   9: 12108871.202 ops/s
# Warmup Iteration  10: 12095654.007 ops/s
# Warmup Iteration  11: 12092129.177 ops/s
# Warmup Iteration  12: 12088659.244 ops/s
# Warmup Iteration  13: 12107233.729 ops/s
# Warmup Iteration  14: 12111314.007 ops/s
# Warmup Iteration  15: 12082195.791 ops/s
# Warmup Iteration  16: 12087070.047 ops/s
# Warmup Iteration  17: 12098799.049 ops/s
# Warmup Iteration  18: 12099535.135 ops/s
# Warmup Iteration  19: 12119450.076 ops/s
# Warmup Iteration  20: 12098850.766 ops/s
# Warmup Iteration  21: 12055816.207 ops/s
# Warmup Iteration  22: 12082874.762 ops/s
# Warmup Iteration  23: 12090271.844 ops/s
# Warmup Iteration  24: 12081387.148 ops/s
# Warmup Iteration  25: 12102622.213 ops/s
# Warmup Iteration  26: 12075441.911 ops/s
# Warmup Iteration  27: 12073629.659 ops/s
# Warmup Iteration  28: 12009287.495 ops/s
# Warmup Iteration  29: 12074444.183 ops/s
# Warmup Iteration  30: 12055691.248 ops/s
Iteration   1: 12128340.232 ops/s
Iteration   2: 12084212.178 ops/s
Iteration   3: 12050646.737 ops/s
Iteration   4: 12094985.169 ops/s
Iteration   5: 12062360.544 ops/s
Iteration   6: 12141262.770 ops/s
Iteration   7: 12082356.944 ops/s
Iteration   8: 12089467.782 ops/s
Iteration   9: 12011996.266 ops/s
Iteration  10: 12110588.893 ops/s
Iteration  11: 11995470.103 ops/s
Iteration  12: 12099837.421 ops/s
Iteration  13: 12133414.090 ops/s
Iteration  14: 12090056.373 ops/s
Iteration  15: 12084341.503 ops/s
Iteration  16: 12076239.645 ops/s
Iteration  17: 12101333.685 ops/s
Iteration  18: 12060504.718 ops/s
Iteration  19: 12108445.985 ops/s
Iteration  20: 12113481.767 ops/s
Iteration  21: 12104031.057 ops/s
Iteration  22: 12067008.123 ops/s
Iteration  23: 12094828.883 ops/s
Iteration  24: 12091331.792 ops/s
Iteration  25: 12097165.680 ops/s
Iteration  26: 12088683.882 ops/s
Iteration  27: 12096404.334 ops/s
Iteration  28: 12071596.582 ops/s
Iteration  29: 12060271.995 ops/s
Iteration  30: 12110247.128 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_chunk_empty":
  12086697.075 ±(99.9%) 20839.557 ops/s [Average]
  (min, avg, max) = (11995470.103, 12086697.075, 12141262.770), stdev = 31191.671
  CI (99.9%): [12065857.518, 12107536.633] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score       Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_chunk_empty  thrpt   30  12086697.075 ± 20839.557  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_chunk_large_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_chunk_large_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 213622.354 ops/s
# Warmup Iteration   2: 330035.432 ops/s
# Warmup Iteration   3: 403338.903 ops/s
# Warmup Iteration   4: 405190.582 ops/s
# Warmup Iteration   5: 404101.581 ops/s
# Warmup Iteration   6: 405162.570 ops/s
# Warmup Iteration   7: 330817.755 ops/s
# Warmup Iteration   8: 405654.894 ops/s
# Warmup Iteration   9: 404885.460 ops/s
# Warmup Iteration  10: 405848.108 ops/s
# Warmup Iteration  11: 404875.392 ops/s
# Warmup Iteration  12: 404556.578 ops/s
# Warmup Iteration  13: 404526.675 ops/s
# Warmup Iteration  14: 404637.196 ops/s
# Warmup Iteration  15: 406101.157 ops/s
# Warmup Iteration  16: 406116.059 ops/s
# Warmup Iteration  17: 405158.079 ops/s
# Warmup Iteration  18: 406399.444 ops/s
# Warmup Iteration  19: 405478.112 ops/s
# Warmup Iteration  20: 406282.584 ops/s
# Warmup Iteration  21: 405544.778 ops/s
# Warmup Iteration  22: 407364.198 ops/s
# Warmup Iteration  23: 404935.070 ops/s
# Warmup Iteration  24: 404110.473 ops/s
# Warmup Iteration  25: 406234.996 ops/s
# Warmup Iteration  26: 405879.207 ops/s
# Warmup Iteration  27: 404296.245 ops/s
# Warmup Iteration  28: 405353.713 ops/s
# Warmup Iteration  29: 406074.316 ops/s
# Warmup Iteration  30: 405870.985 ops/s
Iteration   1: 406698.818 ops/s
Iteration   2: 406116.816 ops/s
Iteration   3: 404581.720 ops/s
Iteration   4: 405858.076 ops/s
Iteration   5: 405275.373 ops/s
Iteration   6: 405249.167 ops/s
Iteration   7: 404302.098 ops/s
Iteration   8: 402468.106 ops/s
Iteration   9: 406820.654 ops/s
Iteration  10: 404154.445 ops/s
Iteration  11: 404888.900 ops/s
Iteration  12: 405446.794 ops/s
Iteration  13: 406043.950 ops/s
Iteration  14: 405066.671 ops/s
Iteration  15: 402742.058 ops/s
Iteration  16: 404276.917 ops/s
Iteration  17: 406253.595 ops/s
Iteration  18: 401667.682 ops/s
Iteration  19: 406730.308 ops/s
Iteration  20: 405138.029 ops/s
Iteration  21: 404820.192 ops/s
Iteration  22: 406232.252 ops/s
Iteration  23: 403132.655 ops/s
Iteration  24: 407250.656 ops/s
Iteration  25: 403617.920 ops/s
Iteration  26: 405738.656 ops/s
Iteration  27: 403805.245 ops/s
Iteration  28: 405220.007 ops/s
Iteration  29: 404249.140 ops/s
Iteration  30: 406040.625 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_chunk_large_size":
  404996.251 ±(99.9%) 915.121 ops/s [Average]
  (min, avg, max) = (401667.682, 404996.251, 407250.656), stdev = 1369.710
  CI (99.9%): [404081.130, 405911.372] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score     Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_chunk_large_size  thrpt   30  404996.251 ± 915.121  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_chunk_single$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_chunk_single

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1257757.186 ops/s
# Warmup Iteration   2: 2518834.718 ops/s
# Warmup Iteration   3: 2877714.405 ops/s
# Warmup Iteration   4: 2895819.665 ops/s
# Warmup Iteration   5: 2378856.678 ops/s
# Warmup Iteration   6: 2855258.754 ops/s
# Warmup Iteration   7: 2901477.048 ops/s
# Warmup Iteration   8: 2892845.735 ops/s
# Warmup Iteration   9: 2892745.154 ops/s
# Warmup Iteration  10: 2889559.227 ops/s
# Warmup Iteration  11: 2900031.492 ops/s
# Warmup Iteration  12: 2887045.810 ops/s
# Warmup Iteration  13: 2887094.476 ops/s
# Warmup Iteration  14: 2904524.069 ops/s
# Warmup Iteration  15: 2890113.501 ops/s
# Warmup Iteration  16: 2894873.392 ops/s
# Warmup Iteration  17: 2891807.426 ops/s
# Warmup Iteration  18: 2889678.791 ops/s
# Warmup Iteration  19: 2897269.270 ops/s
# Warmup Iteration  20: 2896181.614 ops/s
# Warmup Iteration  21: 2898035.714 ops/s
# Warmup Iteration  22: 2890020.945 ops/s
# Warmup Iteration  23: 2899701.143 ops/s
# Warmup Iteration  24: 2895528.325 ops/s
# Warmup Iteration  25: 2892608.534 ops/s
# Warmup Iteration  26: 2895657.438 ops/s
# Warmup Iteration  27: 2898101.218 ops/s
# Warmup Iteration  28: 2900050.168 ops/s
# Warmup Iteration  29: 2902439.094 ops/s
# Warmup Iteration  30: 2892409.279 ops/s
Iteration   1: 2890905.970 ops/s
Iteration   2: 2895264.772 ops/s
Iteration   3: 2873933.657 ops/s
Iteration   4: 2892381.981 ops/s
Iteration   5: 2887990.037 ops/s
Iteration   6: 2891090.151 ops/s
Iteration   7: 2896403.832 ops/s
Iteration   8: 2892185.770 ops/s
Iteration   9: 2899249.554 ops/s
Iteration  10: 2901613.012 ops/s
Iteration  11: 2898670.318 ops/s
Iteration  12: 2898247.457 ops/s
Iteration  13: 2888695.166 ops/s
Iteration  14: 2900069.980 ops/s
Iteration  15: 2904825.262 ops/s
Iteration  16: 2893459.541 ops/s
Iteration  17: 2892204.742 ops/s
Iteration  18: 2895446.945 ops/s
Iteration  19: 2902523.017 ops/s
Iteration  20: 2895117.182 ops/s
Iteration  21: 2898054.982 ops/s
Iteration  22: 2897733.010 ops/s
Iteration  23: 2907177.093 ops/s
Iteration  24: 2900612.433 ops/s
Iteration  25: 2902783.995 ops/s
Iteration  26: 2896385.378 ops/s
Iteration  27: 2905247.632 ops/s
Iteration  28: 2894545.642 ops/s
Iteration  29: 2899403.762 ops/s
Iteration  30: 2890487.898 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_chunk_single":
  2896090.339 ±(99.9%) 4342.271 ops/s [Average]
  (min, avg, max) = (2873933.657, 2896090.339, 2907177.093), stdev = 6499.307
  CI (99.9%): [2891748.068, 2900432.610] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_chunk_single  thrpt   30  2896090.339 ± 4342.271  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_chunk_zero_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_chunk_zero_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 470415.382 ops/s
# Warmup Iteration   2: 547218.239 ops/s
# Warmup Iteration   3: 705384.281 ops/s
# Warmup Iteration   4: 706296.595 ops/s
# Warmup Iteration   5: 702783.883 ops/s
# Warmup Iteration   6: 704135.245 ops/s
# Warmup Iteration   7: 706823.732 ops/s
# Warmup Iteration   8: 706709.500 ops/s
# Warmup Iteration   9: 689611.969 ops/s
# Warmup Iteration  10: 608947.069 ops/s
# Warmup Iteration  11: 709100.125 ops/s
# Warmup Iteration  12: 706657.599 ops/s
# Warmup Iteration  13: 705574.330 ops/s
# Warmup Iteration  14: 709590.141 ops/s
# Warmup Iteration  15: 708316.847 ops/s
# Warmup Iteration  16: 708230.548 ops/s
# Warmup Iteration  17: 740719.090 ops/s
# Warmup Iteration  18: 741004.711 ops/s
# Warmup Iteration  19: 739031.940 ops/s
# Warmup Iteration  20: 741156.391 ops/s
# Warmup Iteration  21: 740738.845 ops/s
# Warmup Iteration  22: 742375.273 ops/s
# Warmup Iteration  23: 741212.534 ops/s
# Warmup Iteration  24: 741462.183 ops/s
# Warmup Iteration  25: 739634.370 ops/s
# Warmup Iteration  26: 738242.255 ops/s
# Warmup Iteration  27: 739921.125 ops/s
# Warmup Iteration  28: 739160.930 ops/s
# Warmup Iteration  29: 737267.962 ops/s
# Warmup Iteration  30: 740775.204 ops/s
Iteration   1: 739777.730 ops/s
Iteration   2: 740161.776 ops/s
Iteration   3: 738739.368 ops/s
Iteration   4: 738448.336 ops/s
Iteration   5: 739750.220 ops/s
Iteration   6: 739077.436 ops/s
Iteration   7: 742574.357 ops/s
Iteration   8: 742410.407 ops/s
Iteration   9: 740348.125 ops/s
Iteration  10: 741914.897 ops/s
Iteration  11: 737111.835 ops/s
Iteration  12: 738945.904 ops/s
Iteration  13: 740633.382 ops/s
Iteration  14: 740478.176 ops/s
Iteration  15: 741128.586 ops/s
Iteration  16: 738698.547 ops/s
Iteration  17: 742802.622 ops/s
Iteration  18: 738304.815 ops/s
Iteration  19: 742419.593 ops/s
Iteration  20: 742186.556 ops/s
Iteration  21: 740366.020 ops/s
Iteration  22: 740741.503 ops/s
Iteration  23: 740842.807 ops/s
Iteration  24: 741815.464 ops/s
Iteration  25: 742854.861 ops/s
Iteration  26: 742219.029 ops/s
Iteration  27: 742454.379 ops/s
Iteration  28: 739147.852 ops/s
Iteration  29: 741672.242 ops/s
Iteration  30: 740211.887 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_chunk_zero_throws":
  740607.957 ±(99.9%) 1051.944 ops/s [Average]
  (min, avg, max) = (737111.835, 740607.957, 742854.861), stdev = 1574.500
  CI (99.9%): [739556.013, 741659.901] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_chunk_zero_throws  thrpt   30  740607.957 ± 1051.944  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 523192.867 ops/s
# Warmup Iteration   2: 597767.415 ops/s
# Warmup Iteration   3: 779512.174 ops/s
# Warmup Iteration   4: 780342.386 ops/s
# Warmup Iteration   5: 773832.969 ops/s
# Warmup Iteration   6: 777856.907 ops/s
# Warmup Iteration   7: 779944.910 ops/s
# Warmup Iteration   8: 778710.765 ops/s
# Warmup Iteration   9: 776752.367 ops/s
# Warmup Iteration  10: 670023.688 ops/s
# Warmup Iteration  11: 755876.568 ops/s
# Warmup Iteration  12: 780583.263 ops/s
# Warmup Iteration  13: 779844.071 ops/s
# Warmup Iteration  14: 779105.332 ops/s
# Warmup Iteration  15: 780274.664 ops/s
# Warmup Iteration  16: 776763.246 ops/s
# Warmup Iteration  17: 814146.457 ops/s
# Warmup Iteration  18: 815105.375 ops/s
# Warmup Iteration  19: 815304.788 ops/s
# Warmup Iteration  20: 815208.996 ops/s
# Warmup Iteration  21: 816848.794 ops/s
# Warmup Iteration  22: 813973.873 ops/s
# Warmup Iteration  23: 817388.776 ops/s
# Warmup Iteration  24: 813404.549 ops/s
# Warmup Iteration  25: 817809.654 ops/s
# Warmup Iteration  26: 816774.045 ops/s
# Warmup Iteration  27: 816645.854 ops/s
# Warmup Iteration  28: 818656.481 ops/s
# Warmup Iteration  29: 815561.156 ops/s
# Warmup Iteration  30: 819007.550 ops/s
Iteration   1: 816630.814 ops/s
Iteration   2: 816689.701 ops/s
Iteration   3: 818875.387 ops/s
Iteration   4: 812280.030 ops/s
Iteration   5: 815702.380 ops/s
Iteration   6: 817100.019 ops/s
Iteration   7: 815404.053 ops/s
Iteration   8: 816625.416 ops/s
Iteration   9: 815889.019 ops/s
Iteration  10: 815784.925 ops/s
Iteration  11: 815993.894 ops/s
Iteration  12: 817812.567 ops/s
Iteration  13: 813665.843 ops/s
Iteration  14: 807494.133 ops/s
Iteration  15: 815877.169 ops/s
Iteration  16: 815102.527 ops/s
Iteration  17: 814530.201 ops/s
Iteration  18: 819366.698 ops/s
Iteration  19: 812215.255 ops/s
Iteration  20: 814864.833 ops/s
Iteration  21: 818935.948 ops/s
Iteration  22: 817021.066 ops/s
Iteration  23: 817200.190 ops/s
Iteration  24: 817424.403 ops/s
Iteration  25: 818912.937 ops/s
Iteration  26: 819106.035 ops/s
Iteration  27: 816866.677 ops/s
Iteration  28: 816905.923 ops/s
Iteration  29: 814984.627 ops/s
Iteration  30: 816319.679 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_clear":
  816052.745 ±(99.9%) 1617.525 ops/s [Average]
  (min, avg, max) = (807494.133, 816052.745, 819366.698), stdev = 2421.036
  CI (99.9%): [814435.220, 817670.270] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_clear  thrpt   30  816052.745 ± 1617.525  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 251305.502 ops/s
# Warmup Iteration   2: 483151.224 ops/s
# Warmup Iteration   3: 527365.603 ops/s
# Warmup Iteration   4: 533682.411 ops/s
# Warmup Iteration   5: 449211.119 ops/s
# Warmup Iteration   6: 523923.973 ops/s
# Warmup Iteration   7: 535070.694 ops/s
# Warmup Iteration   8: 534852.170 ops/s
# Warmup Iteration   9: 534570.904 ops/s
# Warmup Iteration  10: 535787.037 ops/s
# Warmup Iteration  11: 534052.097 ops/s
# Warmup Iteration  12: 536288.665 ops/s
# Warmup Iteration  13: 535507.975 ops/s
# Warmup Iteration  14: 536093.463 ops/s
# Warmup Iteration  15: 535045.789 ops/s
# Warmup Iteration  16: 536261.986 ops/s
# Warmup Iteration  17: 535894.849 ops/s
# Warmup Iteration  18: 535574.366 ops/s
# Warmup Iteration  19: 535705.058 ops/s
# Warmup Iteration  20: 534998.419 ops/s
# Warmup Iteration  21: 534530.387 ops/s
# Warmup Iteration  22: 535696.914 ops/s
# Warmup Iteration  23: 534084.307 ops/s
# Warmup Iteration  24: 535436.463 ops/s
# Warmup Iteration  25: 535640.476 ops/s
# Warmup Iteration  26: 534542.159 ops/s
# Warmup Iteration  27: 534312.631 ops/s
# Warmup Iteration  28: 535753.856 ops/s
# Warmup Iteration  29: 536022.539 ops/s
# Warmup Iteration  30: 532073.245 ops/s
Iteration   1: 536840.267 ops/s
Iteration   2: 535506.360 ops/s
Iteration   3: 533825.623 ops/s
Iteration   4: 536283.563 ops/s
Iteration   5: 535562.689 ops/s
Iteration   6: 533027.223 ops/s
Iteration   7: 532531.433 ops/s
Iteration   8: 533114.583 ops/s
Iteration   9: 533602.864 ops/s
Iteration  10: 533925.546 ops/s
Iteration  11: 535837.180 ops/s
Iteration  12: 536135.829 ops/s
Iteration  13: 531223.882 ops/s
Iteration  14: 535679.347 ops/s
Iteration  15: 535037.585 ops/s
Iteration  16: 536299.121 ops/s
Iteration  17: 533633.841 ops/s
Iteration  18: 536408.568 ops/s
Iteration  19: 534048.029 ops/s
Iteration  20: 534146.659 ops/s
Iteration  21: 535652.316 ops/s
Iteration  22: 533968.150 ops/s
Iteration  23: 534406.270 ops/s
Iteration  24: 533132.715 ops/s
Iteration  25: 535228.584 ops/s
Iteration  26: 535646.608 ops/s
Iteration  27: 533216.866 ops/s
Iteration  28: 534839.154 ops/s
Iteration  29: 533029.079 ops/s
Iteration  30: 534918.100 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collect":
  534556.934 ±(99.9%) 916.122 ops/s [Average]
  (min, avg, max) = (531223.882, 534556.934, 536840.267), stdev = 1371.208
  CI (99.9%): [533640.813, 535473.056] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score     Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_collect  thrpt   30  534556.934 ± 916.122  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 801207.176 ops/s
# Warmup Iteration   2: 1460898.146 ops/s
# Warmup Iteration   3: 1690516.122 ops/s
# Warmup Iteration   4: 1699599.779 ops/s
# Warmup Iteration   5: 1698389.679 ops/s
# Warmup Iteration   6: 1371063.410 ops/s
# Warmup Iteration   7: 1701070.065 ops/s
# Warmup Iteration   8: 1696526.198 ops/s
# Warmup Iteration   9: 1703695.433 ops/s
# Warmup Iteration  10: 1698706.097 ops/s
# Warmup Iteration  11: 1699032.401 ops/s
# Warmup Iteration  12: 1706761.525 ops/s
# Warmup Iteration  13: 1689088.705 ops/s
# Warmup Iteration  14: 1697473.854 ops/s
# Warmup Iteration  15: 1691141.871 ops/s
# Warmup Iteration  16: 1696454.371 ops/s
# Warmup Iteration  17: 1715261.057 ops/s
# Warmup Iteration  18: 1703744.142 ops/s
# Warmup Iteration  19: 1713500.872 ops/s
# Warmup Iteration  20: 1709238.750 ops/s
# Warmup Iteration  21: 1713880.933 ops/s
# Warmup Iteration  22: 1711851.023 ops/s
# Warmup Iteration  23: 1712104.614 ops/s
# Warmup Iteration  24: 1716886.926 ops/s
# Warmup Iteration  25: 1716857.854 ops/s
# Warmup Iteration  26: 1714691.490 ops/s
# Warmup Iteration  27: 1712536.314 ops/s
# Warmup Iteration  28: 1713610.348 ops/s
# Warmup Iteration  29: 1715004.861 ops/s
# Warmup Iteration  30: 1718146.737 ops/s
Iteration   1: 1708567.443 ops/s
Iteration   2: 1715119.843 ops/s
Iteration   3: 1716014.487 ops/s
Iteration   4: 1712252.504 ops/s
Iteration   5: 1710491.923 ops/s
Iteration   6: 1718072.886 ops/s
Iteration   7: 1714986.845 ops/s
Iteration   8: 1708113.992 ops/s
Iteration   9: 1713162.435 ops/s
Iteration  10: 1722488.810 ops/s
Iteration  11: 1712261.455 ops/s
Iteration  12: 1720607.146 ops/s
Iteration  13: 1714887.198 ops/s
Iteration  14: 1712562.813 ops/s
Iteration  15: 1709516.235 ops/s
Iteration  16: 1712618.523 ops/s
Iteration  17: 1698516.295 ops/s
Iteration  18: 1712418.315 ops/s
Iteration  19: 1715745.893 ops/s
Iteration  20: 1715924.470 ops/s
Iteration  21: 1713946.929 ops/s
Iteration  22: 1715553.853 ops/s
Iteration  23: 1694437.889 ops/s
Iteration  24: 1710674.184 ops/s
Iteration  25: 1715492.080 ops/s
Iteration  26: 1715322.390 ops/s
Iteration  27: 1722092.234 ops/s
Iteration  28: 1702863.345 ops/s
Iteration  29: 1705619.597 ops/s
Iteration  30: 1718677.377 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectBoolean":
  1712633.646 ±(99.9%) 4154.683 ops/s [Average]
  (min, avg, max) = (1694437.889, 1712633.646, 1722488.810), stdev = 6218.535
  CI (99.9%): [1708478.963, 1716788.329] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_collectBoolean  thrpt   30  1712633.646 ± 4154.683  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectBooleanWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectBooleanWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2687166.315 ops/s
# Warmup Iteration   2: 5556409.035 ops/s
# Warmup Iteration   3: 6170295.593 ops/s
# Warmup Iteration   4: 6208139.903 ops/s
# Warmup Iteration   5: 4989262.793 ops/s
# Warmup Iteration   6: 6219779.956 ops/s
# Warmup Iteration   7: 6219784.998 ops/s
# Warmup Iteration   8: 6218003.232 ops/s
# Warmup Iteration   9: 6223197.237 ops/s
# Warmup Iteration  10: 6222258.876 ops/s
# Warmup Iteration  11: 6208791.546 ops/s
# Warmup Iteration  12: 6219863.791 ops/s
# Warmup Iteration  13: 6202978.321 ops/s
# Warmup Iteration  14: 6209733.772 ops/s
# Warmup Iteration  15: 6224163.165 ops/s
# Warmup Iteration  16: 6198258.774 ops/s
# Warmup Iteration  17: 6228220.321 ops/s
# Warmup Iteration  18: 6209988.616 ops/s
# Warmup Iteration  19: 6213123.962 ops/s
# Warmup Iteration  20: 6226754.321 ops/s
# Warmup Iteration  21: 6205822.403 ops/s
# Warmup Iteration  22: 6193259.065 ops/s
# Warmup Iteration  23: 6211690.746 ops/s
# Warmup Iteration  24: 6200781.568 ops/s
# Warmup Iteration  25: 6216825.595 ops/s
# Warmup Iteration  26: 6210527.728 ops/s
# Warmup Iteration  27: 6215732.290 ops/s
# Warmup Iteration  28: 6199416.913 ops/s
# Warmup Iteration  29: 6215303.096 ops/s
# Warmup Iteration  30: 6227546.292 ops/s
Iteration   1: 6234923.297 ops/s
Iteration   2: 6234192.644 ops/s
Iteration   3: 6184269.954 ops/s
Iteration   4: 6223762.336 ops/s
Iteration   5: 6238628.271 ops/s
Iteration   6: 6220004.590 ops/s
Iteration   7: 6212723.902 ops/s
Iteration   8: 6225790.125 ops/s
Iteration   9: 6202137.201 ops/s
Iteration  10: 6222292.792 ops/s
Iteration  11: 6233337.535 ops/s
Iteration  12: 6213882.191 ops/s
Iteration  13: 6216505.492 ops/s
Iteration  14: 6234566.868 ops/s
Iteration  15: 6221598.371 ops/s
Iteration  16: 6222108.266 ops/s
Iteration  17: 6224187.207 ops/s
Iteration  18: 6212441.579 ops/s
Iteration  19: 6226078.064 ops/s
Iteration  20: 6214966.027 ops/s
Iteration  21: 6221111.423 ops/s
Iteration  22: 6233215.251 ops/s
Iteration  23: 6216669.080 ops/s
Iteration  24: 6201011.476 ops/s
Iteration  25: 6222342.333 ops/s
Iteration  26: 6235797.562 ops/s
Iteration  27: 6196727.191 ops/s
Iteration  28: 6171150.248 ops/s
Iteration  29: 6230379.047 ops/s
Iteration  30: 6196850.202 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectBooleanWithBagTarget":
  6218121.684 ±(99.9%) 10618.086 ops/s [Average]
  (min, avg, max) = (6171150.248, 6218121.684, 6238628.271), stdev = 15892.653
  CI (99.9%): [6207503.598, 6228739.771] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_collectBooleanWithBagTarget  thrpt   30  6218121.684 ± 10618.086  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectBooleanWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectBooleanWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 892202.821 ops/s
# Warmup Iteration   2: 1521287.680 ops/s
# Warmup Iteration   3: 1816934.585 ops/s
# Warmup Iteration   4: 1828459.774 ops/s
# Warmup Iteration   5: 1831323.572 ops/s
# Warmup Iteration   6: 1470366.428 ops/s
# Warmup Iteration   7: 1825376.469 ops/s
# Warmup Iteration   8: 1830197.239 ops/s
# Warmup Iteration   9: 1832871.888 ops/s
# Warmup Iteration  10: 1822735.761 ops/s
# Warmup Iteration  11: 1827754.082 ops/s
# Warmup Iteration  12: 1832934.737 ops/s
# Warmup Iteration  13: 1830282.043 ops/s
# Warmup Iteration  14: 1828703.087 ops/s
# Warmup Iteration  15: 1824743.248 ops/s
# Warmup Iteration  16: 1826034.563 ops/s
# Warmup Iteration  17: 1824924.414 ops/s
# Warmup Iteration  18: 1829591.156 ops/s
# Warmup Iteration  19: 1830431.673 ops/s
# Warmup Iteration  20: 1832216.326 ops/s
# Warmup Iteration  21: 1826681.094 ops/s
# Warmup Iteration  22: 1828317.120 ops/s
# Warmup Iteration  23: 1827633.438 ops/s
# Warmup Iteration  24: 1824052.012 ops/s
# Warmup Iteration  25: 1833114.288 ops/s
# Warmup Iteration  26: 1828850.989 ops/s
# Warmup Iteration  27: 1826986.231 ops/s
# Warmup Iteration  28: 1819166.804 ops/s
# Warmup Iteration  29: 1827670.017 ops/s
# Warmup Iteration  30: 1822579.273 ops/s
Iteration   1: 1816728.972 ops/s
Iteration   2: 1826538.776 ops/s
Iteration   3: 1835022.318 ops/s
Iteration   4: 1823395.979 ops/s
Iteration   5: 1836319.588 ops/s
Iteration   6: 1819316.520 ops/s
Iteration   7: 1829921.069 ops/s
Iteration   8: 1828961.162 ops/s
Iteration   9: 1831924.815 ops/s
Iteration  10: 1813155.287 ops/s
Iteration  11: 1826023.166 ops/s
Iteration  12: 1822173.413 ops/s
Iteration  13: 1830837.730 ops/s
Iteration  14: 1823761.788 ops/s
Iteration  15: 1821630.567 ops/s
Iteration  16: 1826536.355 ops/s
Iteration  17: 1826970.644 ops/s
Iteration  18: 1825895.279 ops/s
Iteration  19: 1832332.753 ops/s
Iteration  20: 1825748.673 ops/s
Iteration  21: 1836798.124 ops/s
Iteration  22: 1830840.074 ops/s
Iteration  23: 1836779.223 ops/s
Iteration  24: 1832657.204 ops/s
Iteration  25: 1824319.219 ops/s
Iteration  26: 1828543.354 ops/s
Iteration  27: 1816265.883 ops/s
Iteration  28: 1828852.643 ops/s
Iteration  29: 1836071.275 ops/s
Iteration  30: 1829605.102 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectBooleanWithTarget":
  1827464.232 ±(99.9%) 4144.985 ops/s [Average]
  (min, avg, max) = (1813155.287, 1827464.232, 1836798.124), stdev = 6204.020
  CI (99.9%): [1823319.246, 1831609.217] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_collectBooleanWithTarget  thrpt   30  1827464.232 ± 4144.985  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 312303.148 ops/s
# Warmup Iteration   2: 643563.613 ops/s
# Warmup Iteration   3: 700288.334 ops/s
# Warmup Iteration   4: 703562.433 ops/s
# Warmup Iteration   5: 581035.073 ops/s
# Warmup Iteration   6: 703999.085 ops/s
# Warmup Iteration   7: 705562.652 ops/s
# Warmup Iteration   8: 702661.753 ops/s
# Warmup Iteration   9: 703665.088 ops/s
# Warmup Iteration  10: 704508.485 ops/s
# Warmup Iteration  11: 705540.648 ops/s
# Warmup Iteration  12: 704813.278 ops/s
# Warmup Iteration  13: 705439.619 ops/s
# Warmup Iteration  14: 702239.586 ops/s
# Warmup Iteration  15: 705869.483 ops/s
# Warmup Iteration  16: 703902.066 ops/s
# Warmup Iteration  17: 702347.344 ops/s
# Warmup Iteration  18: 704569.572 ops/s
# Warmup Iteration  19: 702942.749 ops/s
# Warmup Iteration  20: 706358.619 ops/s
# Warmup Iteration  21: 699956.507 ops/s
# Warmup Iteration  22: 705792.458 ops/s
# Warmup Iteration  23: 703922.228 ops/s
# Warmup Iteration  24: 701042.523 ops/s
# Warmup Iteration  25: 704202.417 ops/s
# Warmup Iteration  26: 703669.622 ops/s
# Warmup Iteration  27: 705571.693 ops/s
# Warmup Iteration  28: 704729.481 ops/s
# Warmup Iteration  29: 702268.695 ops/s
# Warmup Iteration  30: 705836.135 ops/s
Iteration   1: 702948.364 ops/s
Iteration   2: 705397.564 ops/s
Iteration   3: 705914.339 ops/s
Iteration   4: 702262.666 ops/s
Iteration   5: 704959.589 ops/s
Iteration   6: 706219.939 ops/s
Iteration   7: 703068.687 ops/s
Iteration   8: 695365.529 ops/s
Iteration   9: 706718.502 ops/s
Iteration  10: 706061.356 ops/s
Iteration  11: 704783.179 ops/s
Iteration  12: 703667.139 ops/s
Iteration  13: 706706.564 ops/s
Iteration  14: 702465.291 ops/s
Iteration  15: 700964.116 ops/s
Iteration  16: 706384.803 ops/s
Iteration  17: 705106.487 ops/s
Iteration  18: 705005.883 ops/s
Iteration  19: 704645.624 ops/s
Iteration  20: 703106.176 ops/s
Iteration  21: 704844.440 ops/s
Iteration  22: 705356.639 ops/s
Iteration  23: 704764.661 ops/s
Iteration  24: 700630.374 ops/s
Iteration  25: 704720.385 ops/s
Iteration  26: 703554.114 ops/s
Iteration  27: 703325.325 ops/s
Iteration  28: 706774.189 ops/s
Iteration  29: 701017.350 ops/s
Iteration  30: 705374.833 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectByte":
  704070.470 ±(99.9%) 1595.637 ops/s [Average]
  (min, avg, max) = (695365.529, 704070.470, 706774.189), stdev = 2388.274
  CI (99.9%): [702474.833, 705666.107] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_collectByte  thrpt   30  704070.470 ± 1595.637  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectByteWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectByteWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1053278.592 ops/s
# Warmup Iteration   2: 2296325.153 ops/s
# Warmup Iteration   3: 2417762.781 ops/s
# Warmup Iteration   4: 2406759.950 ops/s
# Warmup Iteration   5: 2025765.808 ops/s
# Warmup Iteration   6: 2434133.640 ops/s
# Warmup Iteration   7: 2429073.272 ops/s
# Warmup Iteration   8: 2424965.911 ops/s
# Warmup Iteration   9: 2429167.654 ops/s
# Warmup Iteration  10: 2429028.476 ops/s
# Warmup Iteration  11: 2425126.460 ops/s
# Warmup Iteration  12: 2427137.998 ops/s
# Warmup Iteration  13: 2431526.018 ops/s
# Warmup Iteration  14: 2428732.258 ops/s
# Warmup Iteration  15: 2429080.034 ops/s
# Warmup Iteration  16: 2428360.096 ops/s
# Warmup Iteration  17: 2429929.815 ops/s
# Warmup Iteration  18: 2424231.678 ops/s
# Warmup Iteration  19: 2433549.355 ops/s
# Warmup Iteration  20: 2423155.790 ops/s
# Warmup Iteration  21: 2423358.758 ops/s
# Warmup Iteration  22: 2433093.284 ops/s
# Warmup Iteration  23: 2432363.234 ops/s
# Warmup Iteration  24: 2426719.948 ops/s
# Warmup Iteration  25: 2413177.073 ops/s
# Warmup Iteration  26: 2435487.382 ops/s
# Warmup Iteration  27: 2433282.772 ops/s
# Warmup Iteration  28: 2427800.051 ops/s
# Warmup Iteration  29: 2420644.928 ops/s
# Warmup Iteration  30: 2425771.638 ops/s
Iteration   1: 2423735.853 ops/s
Iteration   2: 2433320.149 ops/s
Iteration   3: 2428311.883 ops/s
Iteration   4: 2414854.122 ops/s
Iteration   5: 2430355.785 ops/s
Iteration   6: 2427161.616 ops/s
Iteration   7: 2422889.498 ops/s
Iteration   8: 2430396.505 ops/s
Iteration   9: 2430606.483 ops/s
Iteration  10: 2420155.736 ops/s
Iteration  11: 2432308.557 ops/s
Iteration  12: 2435396.113 ops/s
Iteration  13: 2437840.641 ops/s
Iteration  14: 2433427.603 ops/s
Iteration  15: 2418811.979 ops/s
Iteration  16: 2430211.388 ops/s
Iteration  17: 2435044.568 ops/s
Iteration  18: 2435872.801 ops/s
Iteration  19: 2433925.675 ops/s
Iteration  20: 2431923.093 ops/s
Iteration  21: 2429383.656 ops/s
Iteration  22: 2429080.227 ops/s
Iteration  23: 2432321.747 ops/s
Iteration  24: 2431086.360 ops/s
Iteration  25: 2432536.821 ops/s
Iteration  26: 2435652.298 ops/s
Iteration  27: 2428094.678 ops/s
Iteration  28: 2431181.924 ops/s
Iteration  29: 2432816.726 ops/s
Iteration  30: 2429960.669 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectByteWithBagTarget":
  2429955.505 ±(99.9%) 3530.323 ops/s [Average]
  (min, avg, max) = (2414854.122, 2429955.505, 2437840.641), stdev = 5284.022
  CI (99.9%): [2426425.182, 2433485.828] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_collectByteWithBagTarget  thrpt   30  2429955.505 ± 3530.323  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectByteWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectByteWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 501306.418 ops/s
# Warmup Iteration   2: 909406.420 ops/s
# Warmup Iteration   3: 1034412.809 ops/s
# Warmup Iteration   4: 1036112.820 ops/s
# Warmup Iteration   5: 1037631.390 ops/s
# Warmup Iteration   6: 852623.520 ops/s
# Warmup Iteration   7: 1038828.291 ops/s
# Warmup Iteration   8: 1041575.956 ops/s
# Warmup Iteration   9: 1040792.805 ops/s
# Warmup Iteration  10: 1034469.354 ops/s
# Warmup Iteration  11: 1034769.170 ops/s
# Warmup Iteration  12: 1038583.753 ops/s
# Warmup Iteration  13: 1039397.879 ops/s
# Warmup Iteration  14: 1035929.614 ops/s
# Warmup Iteration  15: 1038239.238 ops/s
# Warmup Iteration  16: 1039000.801 ops/s
# Warmup Iteration  17: 1034924.359 ops/s
# Warmup Iteration  18: 1035684.832 ops/s
# Warmup Iteration  19: 1036544.874 ops/s
# Warmup Iteration  20: 1037377.338 ops/s
# Warmup Iteration  21: 1038334.823 ops/s
# Warmup Iteration  22: 1039103.958 ops/s
# Warmup Iteration  23: 1036736.469 ops/s
# Warmup Iteration  24: 1036929.738 ops/s
# Warmup Iteration  25: 1038204.775 ops/s
# Warmup Iteration  26: 1036759.725 ops/s
# Warmup Iteration  27: 1036559.412 ops/s
# Warmup Iteration  28: 1038642.214 ops/s
# Warmup Iteration  29: 1037649.226 ops/s
# Warmup Iteration  30: 1037955.025 ops/s
Iteration   1: 1038961.494 ops/s
Iteration   2: 1035823.680 ops/s
Iteration   3: 1037972.228 ops/s
Iteration   4: 1039136.165 ops/s
Iteration   5: 1033379.737 ops/s
Iteration   6: 1038282.911 ops/s
Iteration   7: 1034875.926 ops/s
Iteration   8: 1038910.262 ops/s
Iteration   9: 1035025.694 ops/s
Iteration  10: 1031296.424 ops/s
Iteration  11: 1036878.117 ops/s
Iteration  12: 1039731.949 ops/s
Iteration  13: 1039481.528 ops/s
Iteration  14: 1037411.447 ops/s
Iteration  15: 1035136.086 ops/s
Iteration  16: 1037070.217 ops/s
Iteration  17: 1036630.899 ops/s
Iteration  18: 1040270.573 ops/s
Iteration  19: 1036753.085 ops/s
Iteration  20: 1036176.665 ops/s
Iteration  21: 1034740.414 ops/s
Iteration  22: 1039080.774 ops/s
Iteration  23: 1038430.881 ops/s
Iteration  24: 1027857.528 ops/s
Iteration  25: 1036851.325 ops/s
Iteration  26: 1035498.364 ops/s
Iteration  27: 1035593.140 ops/s
Iteration  28: 1039657.637 ops/s
Iteration  29: 1035343.410 ops/s
Iteration  30: 1039433.711 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectByteWithTarget":
  1036723.076 ±(99.9%) 1805.104 ops/s [Average]
  (min, avg, max) = (1027857.528, 1036723.076, 1040270.573), stdev = 2701.795
  CI (99.9%): [1034917.971, 1038528.180] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_collectByteWithTarget  thrpt   30  1036723.076 ± 1805.104  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 316479.749 ops/s
# Warmup Iteration   2: 633016.569 ops/s
# Warmup Iteration   3: 681392.785 ops/s
# Warmup Iteration   4: 684352.461 ops/s
# Warmup Iteration   5: 569953.246 ops/s
# Warmup Iteration   6: 683894.917 ops/s
# Warmup Iteration   7: 685135.630 ops/s
# Warmup Iteration   8: 685683.643 ops/s
# Warmup Iteration   9: 686291.704 ops/s
# Warmup Iteration  10: 686225.710 ops/s
# Warmup Iteration  11: 685321.644 ops/s
# Warmup Iteration  12: 685482.443 ops/s
# Warmup Iteration  13: 685013.494 ops/s
# Warmup Iteration  14: 686939.823 ops/s
# Warmup Iteration  15: 685499.005 ops/s
# Warmup Iteration  16: 686774.378 ops/s
# Warmup Iteration  17: 685316.135 ops/s
# Warmup Iteration  18: 684106.632 ops/s
# Warmup Iteration  19: 686426.359 ops/s
# Warmup Iteration  20: 683729.009 ops/s
# Warmup Iteration  21: 686232.101 ops/s
# Warmup Iteration  22: 685053.000 ops/s
# Warmup Iteration  23: 684810.855 ops/s
# Warmup Iteration  24: 683167.822 ops/s
# Warmup Iteration  25: 682531.061 ops/s
# Warmup Iteration  26: 687022.627 ops/s
# Warmup Iteration  27: 685701.591 ops/s
# Warmup Iteration  28: 685903.683 ops/s
# Warmup Iteration  29: 684040.147 ops/s
# Warmup Iteration  30: 685843.922 ops/s
Iteration   1: 686487.129 ops/s
Iteration   2: 687196.773 ops/s
Iteration   3: 683830.277 ops/s
Iteration   4: 686008.645 ops/s
Iteration   5: 687054.499 ops/s
Iteration   6: 686553.587 ops/s
Iteration   7: 685952.136 ops/s
Iteration   8: 684293.737 ops/s
Iteration   9: 686033.434 ops/s
Iteration  10: 686101.831 ops/s
Iteration  11: 683659.571 ops/s
Iteration  12: 683090.541 ops/s
Iteration  13: 685670.075 ops/s
Iteration  14: 683784.314 ops/s
Iteration  15: 677609.374 ops/s
Iteration  16: 685198.492 ops/s
Iteration  17: 685391.118 ops/s
Iteration  18: 684634.372 ops/s
Iteration  19: 684677.301 ops/s
Iteration  20: 686534.183 ops/s
Iteration  21: 687167.007 ops/s
Iteration  22: 687006.330 ops/s
Iteration  23: 683446.645 ops/s
Iteration  24: 686388.145 ops/s
Iteration  25: 687391.583 ops/s
Iteration  26: 686650.643 ops/s
Iteration  27: 685408.742 ops/s
Iteration  28: 686010.207 ops/s
Iteration  29: 685572.747 ops/s
Iteration  30: 686278.813 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectChar":
  685369.408 ±(99.9%) 1271.792 ops/s [Average]
  (min, avg, max) = (677609.374, 685369.408, 687391.583), stdev = 1903.558
  CI (99.9%): [684097.617, 686641.200] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_collectChar  thrpt   30  685369.408 ± 1271.792  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectCharWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectCharWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1044023.722 ops/s
# Warmup Iteration   2: 2275977.166 ops/s
# Warmup Iteration   3: 2386711.934 ops/s
# Warmup Iteration   4: 2400785.004 ops/s
# Warmup Iteration   5: 1981603.818 ops/s
# Warmup Iteration   6: 2397793.758 ops/s
# Warmup Iteration   7: 2393196.253 ops/s
# Warmup Iteration   8: 2395764.795 ops/s
# Warmup Iteration   9: 2400541.878 ops/s
# Warmup Iteration  10: 2401327.027 ops/s
# Warmup Iteration  11: 2395370.167 ops/s
# Warmup Iteration  12: 2411198.992 ops/s
# Warmup Iteration  13: 2405370.559 ops/s
# Warmup Iteration  14: 2408267.339 ops/s
# Warmup Iteration  15: 2404961.413 ops/s
# Warmup Iteration  16: 2407536.818 ops/s
# Warmup Iteration  17: 2405489.251 ops/s
# Warmup Iteration  18: 2406737.227 ops/s
# Warmup Iteration  19: 2408098.733 ops/s
# Warmup Iteration  20: 2409807.454 ops/s
# Warmup Iteration  21: 2410555.343 ops/s
# Warmup Iteration  22: 2404684.285 ops/s
# Warmup Iteration  23: 2403916.590 ops/s
# Warmup Iteration  24: 2402212.182 ops/s
# Warmup Iteration  25: 2404593.074 ops/s
# Warmup Iteration  26: 2401616.755 ops/s
# Warmup Iteration  27: 2398527.109 ops/s
# Warmup Iteration  28: 2397104.028 ops/s
# Warmup Iteration  29: 2393358.231 ops/s
# Warmup Iteration  30: 2396107.405 ops/s
Iteration   1: 2412158.574 ops/s
Iteration   2: 2407730.169 ops/s
Iteration   3: 2405752.755 ops/s
Iteration   4: 2406105.305 ops/s
Iteration   5: 2407273.219 ops/s
Iteration   6: 2401927.284 ops/s
Iteration   7: 2395058.130 ops/s
Iteration   8: 2398222.530 ops/s
Iteration   9: 2402777.249 ops/s
Iteration  10: 2404116.845 ops/s
Iteration  11: 2402340.887 ops/s
Iteration  12: 2407089.192 ops/s
Iteration  13: 2403340.268 ops/s
Iteration  14: 2399174.310 ops/s
Iteration  15: 2398238.763 ops/s
Iteration  16: 2396632.224 ops/s
Iteration  17: 2403793.324 ops/s
Iteration  18: 2390343.690 ops/s
Iteration  19: 2406563.486 ops/s
Iteration  20: 2396873.659 ops/s
Iteration  21: 2410976.353 ops/s
Iteration  22: 2403285.967 ops/s
Iteration  23: 2406675.299 ops/s
Iteration  24: 2404105.249 ops/s
Iteration  25: 2406244.286 ops/s
Iteration  26: 2413171.721 ops/s
Iteration  27: 2410745.156 ops/s
Iteration  28: 2409036.925 ops/s
Iteration  29: 2402322.860 ops/s
Iteration  30: 2410454.448 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectCharWithBagTarget":
  2404084.338 ±(99.9%) 3608.270 ops/s [Average]
  (min, avg, max) = (2390343.690, 2404084.338, 2413171.721), stdev = 5400.690
  CI (99.9%): [2400476.067, 2407692.608] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_collectCharWithBagTarget  thrpt   30  2404084.338 ± 3608.270  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectCharWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectCharWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 527002.915 ops/s
# Warmup Iteration   2: 1070819.526 ops/s
# Warmup Iteration   3: 1169507.190 ops/s
# Warmup Iteration   4: 1171998.655 ops/s
# Warmup Iteration   5: 970356.763 ops/s
# Warmup Iteration   6: 1177041.254 ops/s
# Warmup Iteration   7: 1168445.980 ops/s
# Warmup Iteration   8: 1175001.454 ops/s
# Warmup Iteration   9: 1174378.346 ops/s
# Warmup Iteration  10: 1172752.068 ops/s
# Warmup Iteration  11: 1173764.047 ops/s
# Warmup Iteration  12: 1174361.365 ops/s
# Warmup Iteration  13: 1175292.533 ops/s
# Warmup Iteration  14: 1171807.785 ops/s
# Warmup Iteration  15: 1168800.878 ops/s
# Warmup Iteration  16: 1170059.006 ops/s
# Warmup Iteration  17: 1175559.201 ops/s
# Warmup Iteration  18: 1176637.558 ops/s
# Warmup Iteration  19: 1169153.094 ops/s
# Warmup Iteration  20: 1171163.839 ops/s
# Warmup Iteration  21: 1176479.985 ops/s
# Warmup Iteration  22: 1172260.311 ops/s
# Warmup Iteration  23: 1176825.877 ops/s
# Warmup Iteration  24: 1176793.782 ops/s
# Warmup Iteration  25: 1174474.426 ops/s
# Warmup Iteration  26: 1171439.961 ops/s
# Warmup Iteration  27: 1177321.454 ops/s
# Warmup Iteration  28: 1171910.749 ops/s
# Warmup Iteration  29: 1173793.695 ops/s
# Warmup Iteration  30: 1176029.696 ops/s
Iteration   1: 1172395.332 ops/s
Iteration   2: 1176782.040 ops/s
Iteration   3: 1177974.150 ops/s
Iteration   4: 1175188.706 ops/s
Iteration   5: 1172621.202 ops/s
Iteration   6: 1173582.275 ops/s
Iteration   7: 1166354.629 ops/s
Iteration   8: 1172855.667 ops/s
Iteration   9: 1174657.387 ops/s
Iteration  10: 1173095.564 ops/s
Iteration  11: 1173354.877 ops/s
Iteration  12: 1176246.950 ops/s
Iteration  13: 1173573.099 ops/s
Iteration  14: 1175533.736 ops/s
Iteration  15: 1173405.956 ops/s
Iteration  16: 1179714.744 ops/s
Iteration  17: 1174848.694 ops/s
Iteration  18: 1175827.011 ops/s
Iteration  19: 1174236.260 ops/s
Iteration  20: 1175488.765 ops/s
Iteration  21: 1169452.359 ops/s
Iteration  22: 1175936.117 ops/s
Iteration  23: 1175759.717 ops/s
Iteration  24: 1175830.318 ops/s
Iteration  25: 1170565.313 ops/s
Iteration  26: 1161241.413 ops/s
Iteration  27: 1170612.833 ops/s
Iteration  28: 1175605.198 ops/s
Iteration  29: 1180679.236 ops/s
Iteration  30: 1175859.015 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectCharWithTarget":
  1173975.952 ±(99.9%) 2498.325 ops/s [Average]
  (min, avg, max) = (1161241.413, 1173975.952, 1180679.236), stdev = 3739.376
  CI (99.9%): [1171477.627, 1176474.277] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_collectCharWithTarget  thrpt   30  1173975.952 ± 2498.325  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 227407.349 ops/s
# Warmup Iteration   2: 470195.946 ops/s
# Warmup Iteration   3: 498929.393 ops/s
# Warmup Iteration   4: 501317.691 ops/s
# Warmup Iteration   5: 422666.758 ops/s
# Warmup Iteration   6: 507004.475 ops/s
# Warmup Iteration   7: 502820.586 ops/s
# Warmup Iteration   8: 503392.204 ops/s
# Warmup Iteration   9: 503606.425 ops/s
# Warmup Iteration  10: 505397.298 ops/s
# Warmup Iteration  11: 502908.672 ops/s
# Warmup Iteration  12: 503904.736 ops/s
# Warmup Iteration  13: 504476.963 ops/s
# Warmup Iteration  14: 504599.028 ops/s
# Warmup Iteration  15: 503623.925 ops/s
# Warmup Iteration  16: 500377.841 ops/s
# Warmup Iteration  17: 503438.556 ops/s
# Warmup Iteration  18: 505242.751 ops/s
# Warmup Iteration  19: 502416.174 ops/s
# Warmup Iteration  20: 501272.323 ops/s
# Warmup Iteration  21: 502903.938 ops/s
# Warmup Iteration  22: 502605.004 ops/s
# Warmup Iteration  23: 504322.118 ops/s
# Warmup Iteration  24: 504126.886 ops/s
# Warmup Iteration  25: 504722.617 ops/s
# Warmup Iteration  26: 504461.399 ops/s
# Warmup Iteration  27: 499615.987 ops/s
# Warmup Iteration  28: 501780.119 ops/s
# Warmup Iteration  29: 503885.695 ops/s
# Warmup Iteration  30: 505638.618 ops/s
Iteration   1: 504015.047 ops/s
Iteration   2: 506275.283 ops/s
Iteration   3: 505408.743 ops/s
Iteration   4: 504095.674 ops/s
Iteration   5: 503480.809 ops/s
Iteration   6: 505451.906 ops/s
Iteration   7: 502248.939 ops/s
Iteration   8: 506424.436 ops/s
Iteration   9: 506475.463 ops/s
Iteration  10: 505302.622 ops/s
Iteration  11: 504079.924 ops/s
Iteration  12: 504643.159 ops/s
Iteration  13: 500896.387 ops/s
Iteration  14: 504886.841 ops/s
Iteration  15: 505702.701 ops/s
Iteration  16: 506419.841 ops/s
Iteration  17: 501992.305 ops/s
Iteration  18: 503359.539 ops/s
Iteration  19: 503094.061 ops/s
Iteration  20: 501443.304 ops/s
Iteration  21: 503464.810 ops/s
Iteration  22: 508887.064 ops/s
Iteration  23: 505730.368 ops/s
Iteration  24: 504182.582 ops/s
Iteration  25: 501492.835 ops/s
Iteration  26: 504619.591 ops/s
Iteration  27: 505970.553 ops/s
Iteration  28: 503170.090 ops/s
Iteration  29: 503965.692 ops/s
Iteration  30: 506394.803 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectDouble":
  504452.512 ±(99.9%) 1213.951 ops/s [Average]
  (min, avg, max) = (500896.387, 504452.512, 508887.064), stdev = 1816.986
  CI (99.9%): [503238.561, 505666.464] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_collectDouble  thrpt   30  504452.512 ± 1213.951  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectDoubleWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectDoubleWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 841303.223 ops/s
# Warmup Iteration   2: 1929043.783 ops/s
# Warmup Iteration   3: 1994423.978 ops/s
# Warmup Iteration   4: 1704946.065 ops/s
# Warmup Iteration   5: 1941693.317 ops/s
# Warmup Iteration   6: 1978993.019 ops/s
# Warmup Iteration   7: 1996113.333 ops/s
# Warmup Iteration   8: 1997922.108 ops/s
# Warmup Iteration   9: 1989080.982 ops/s
# Warmup Iteration  10: 1996023.290 ops/s
# Warmup Iteration  11: 1996734.859 ops/s
# Warmup Iteration  12: 1991432.040 ops/s
# Warmup Iteration  13: 2000200.634 ops/s
# Warmup Iteration  14: 1995822.761 ops/s
# Warmup Iteration  15: 1990702.553 ops/s
# Warmup Iteration  16: 1994604.477 ops/s
# Warmup Iteration  17: 1984922.459 ops/s
# Warmup Iteration  18: 1989552.414 ops/s
# Warmup Iteration  19: 1993866.906 ops/s
# Warmup Iteration  20: 1997918.189 ops/s
# Warmup Iteration  21: 1996723.482 ops/s
# Warmup Iteration  22: 2001740.165 ops/s
# Warmup Iteration  23: 1996631.938 ops/s
# Warmup Iteration  24: 2001425.332 ops/s
# Warmup Iteration  25: 1993984.475 ops/s
# Warmup Iteration  26: 1997142.322 ops/s
# Warmup Iteration  27: 1996828.044 ops/s
# Warmup Iteration  28: 1998931.346 ops/s
# Warmup Iteration  29: 1994696.273 ops/s
# Warmup Iteration  30: 1997509.937 ops/s
Iteration   1: 1997093.246 ops/s
Iteration   2: 2003122.646 ops/s
Iteration   3: 1998405.203 ops/s
Iteration   4: 1997616.640 ops/s
Iteration   5: 1998064.742 ops/s
Iteration   6: 1988428.589 ops/s
Iteration   7: 1994982.674 ops/s
Iteration   8: 2000842.259 ops/s
Iteration   9: 1994993.692 ops/s
Iteration  10: 1991117.842 ops/s
Iteration  11: 1997373.169 ops/s
Iteration  12: 1972863.540 ops/s
Iteration  13: 1990070.386 ops/s
Iteration  14: 1996039.260 ops/s
Iteration  15: 1985399.850 ops/s
Iteration  16: 1986403.079 ops/s
Iteration  17: 1986145.289 ops/s
Iteration  18: 1982869.819 ops/s
Iteration  19: 1974054.351 ops/s
Iteration  20: 1969189.232 ops/s
Iteration  21: 1985249.723 ops/s
Iteration  22: 1995801.758 ops/s
Iteration  23: 1989159.523 ops/s
Iteration  24: 1996210.980 ops/s
Iteration  25: 1992689.843 ops/s
Iteration  26: 1985660.603 ops/s
Iteration  27: 1997650.090 ops/s
Iteration  28: 1993703.250 ops/s
Iteration  29: 1992718.711 ops/s
Iteration  30: 1984447.251 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectDoubleWithBagTarget":
  1990612.241 ±(99.9%) 5520.140 ops/s [Average]
  (min, avg, max) = (1969189.232, 1990612.241, 2003122.646), stdev = 8262.286
  CI (99.9%): [1985092.101, 1996132.381] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_collectDoubleWithBagTarget  thrpt   30  1990612.241 ± 5520.140  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectDoubleWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectDoubleWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 387346.683 ops/s
# Warmup Iteration   2: 770902.769 ops/s
# Warmup Iteration   3: 836455.984 ops/s
# Warmup Iteration   4: 841507.026 ops/s
# Warmup Iteration   5: 700244.541 ops/s
# Warmup Iteration   6: 844687.665 ops/s
# Warmup Iteration   7: 844770.993 ops/s
# Warmup Iteration   8: 843288.223 ops/s
# Warmup Iteration   9: 840691.408 ops/s
# Warmup Iteration  10: 848415.090 ops/s
# Warmup Iteration  11: 838487.082 ops/s
# Warmup Iteration  12: 844514.561 ops/s
# Warmup Iteration  13: 846316.325 ops/s
# Warmup Iteration  14: 842787.384 ops/s
# Warmup Iteration  15: 838574.295 ops/s
# Warmup Iteration  16: 845553.302 ops/s
# Warmup Iteration  17: 838539.213 ops/s
# Warmup Iteration  18: 836069.895 ops/s
# Warmup Iteration  19: 834806.326 ops/s
# Warmup Iteration  20: 841353.254 ops/s
# Warmup Iteration  21: 830570.665 ops/s
# Warmup Iteration  22: 825043.032 ops/s
# Warmup Iteration  23: 838552.669 ops/s
# Warmup Iteration  24: 842378.518 ops/s
# Warmup Iteration  25: 840803.132 ops/s
# Warmup Iteration  26: 838216.888 ops/s
# Warmup Iteration  27: 837376.113 ops/s
# Warmup Iteration  28: 831309.822 ops/s
# Warmup Iteration  29: 837557.959 ops/s
# Warmup Iteration  30: 842089.223 ops/s
Iteration   1: 830193.134 ops/s
Iteration   2: 841800.977 ops/s
Iteration   3: 829845.835 ops/s
Iteration   4: 838874.809 ops/s
Iteration   5: 833411.199 ops/s
Iteration   6: 834084.839 ops/s
Iteration   7: 835960.104 ops/s
Iteration   8: 832670.193 ops/s
Iteration   9: 832434.973 ops/s
Iteration  10: 842622.106 ops/s
Iteration  11: 841756.236 ops/s
Iteration  12: 840110.377 ops/s
Iteration  13: 840205.174 ops/s
Iteration  14: 836643.854 ops/s
Iteration  15: 841713.444 ops/s
Iteration  16: 842270.128 ops/s
Iteration  17: 840868.299 ops/s
Iteration  18: 838606.571 ops/s
Iteration  19: 829283.395 ops/s
Iteration  20: 826953.338 ops/s
Iteration  21: 827240.865 ops/s
Iteration  22: 833257.370 ops/s
Iteration  23: 836987.975 ops/s
Iteration  24: 839107.350 ops/s
Iteration  25: 834195.444 ops/s
Iteration  26: 837071.870 ops/s
Iteration  27: 838098.345 ops/s
Iteration  28: 827620.616 ops/s
Iteration  29: 828406.029 ops/s
Iteration  30: 837319.976 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectDoubleWithTarget":
  835653.828 ±(99.9%) 3326.202 ops/s [Average]
  (min, avg, max) = (826953.338, 835653.828, 842622.106), stdev = 4978.503
  CI (99.9%): [832327.626, 838980.029] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_collectDoubleWithTarget  thrpt   30  835653.828 ± 3326.202  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 252561.233 ops/s
# Warmup Iteration   2: 481135.324 ops/s
# Warmup Iteration   3: 528269.497 ops/s
# Warmup Iteration   4: 532685.313 ops/s
# Warmup Iteration   5: 461712.788 ops/s
# Warmup Iteration   6: 513031.203 ops/s
# Warmup Iteration   7: 533775.508 ops/s
# Warmup Iteration   8: 534590.568 ops/s
# Warmup Iteration   9: 533137.735 ops/s
# Warmup Iteration  10: 535761.295 ops/s
# Warmup Iteration  11: 532260.177 ops/s
# Warmup Iteration  12: 534206.818 ops/s
# Warmup Iteration  13: 533429.096 ops/s
# Warmup Iteration  14: 534749.852 ops/s
# Warmup Iteration  15: 534461.598 ops/s
# Warmup Iteration  16: 534238.723 ops/s
# Warmup Iteration  17: 533778.949 ops/s
# Warmup Iteration  18: 534822.915 ops/s
# Warmup Iteration  19: 534728.589 ops/s
# Warmup Iteration  20: 532961.516 ops/s
# Warmup Iteration  21: 533195.785 ops/s
# Warmup Iteration  22: 533252.789 ops/s
# Warmup Iteration  23: 535085.130 ops/s
# Warmup Iteration  24: 534419.823 ops/s
# Warmup Iteration  25: 534508.484 ops/s
# Warmup Iteration  26: 535005.645 ops/s
# Warmup Iteration  27: 534252.926 ops/s
# Warmup Iteration  28: 531909.618 ops/s
# Warmup Iteration  29: 533609.380 ops/s
# Warmup Iteration  30: 534003.164 ops/s
Iteration   1: 532374.277 ops/s
Iteration   2: 533634.194 ops/s
Iteration   3: 534050.288 ops/s
Iteration   4: 533948.142 ops/s
Iteration   5: 532978.260 ops/s
Iteration   6: 532376.031 ops/s
Iteration   7: 533876.028 ops/s
Iteration   8: 533637.157 ops/s
Iteration   9: 533960.959 ops/s
Iteration  10: 534084.278 ops/s
Iteration  11: 531589.230 ops/s
Iteration  12: 531955.084 ops/s
Iteration  13: 529944.797 ops/s
Iteration  14: 535191.273 ops/s
Iteration  15: 531289.582 ops/s
Iteration  16: 535429.786 ops/s
Iteration  17: 534852.907 ops/s
Iteration  18: 531361.994 ops/s
Iteration  19: 535844.653 ops/s
Iteration  20: 533485.880 ops/s
Iteration  21: 534439.481 ops/s
Iteration  22: 532196.855 ops/s
Iteration  23: 533485.253 ops/s
Iteration  24: 533814.805 ops/s
Iteration  25: 535311.910 ops/s
Iteration  26: 533355.889 ops/s
Iteration  27: 533764.321 ops/s
Iteration  28: 532566.901 ops/s
Iteration  29: 533772.718 ops/s
Iteration  30: 533540.263 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectFloat":
  533403.773 ±(99.9%) 901.572 ops/s [Average]
  (min, avg, max) = (529944.797, 533403.773, 535844.653), stdev = 1349.430
  CI (99.9%): [532502.201, 534305.345] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score     Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_collectFloat  thrpt   30  533403.773 ± 901.572  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectFloatWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectFloatWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 942132.629 ops/s
# Warmup Iteration   2: 2099103.660 ops/s
# Warmup Iteration   3: 2163972.205 ops/s
# Warmup Iteration   4: 2042574.466 ops/s
# Warmup Iteration   5: 1926509.588 ops/s
# Warmup Iteration   6: 2174992.924 ops/s
# Warmup Iteration   7: 2164338.347 ops/s
# Warmup Iteration   8: 2176225.101 ops/s
# Warmup Iteration   9: 2177568.741 ops/s
# Warmup Iteration  10: 2166119.267 ops/s
# Warmup Iteration  11: 2167367.072 ops/s
# Warmup Iteration  12: 2151990.074 ops/s
# Warmup Iteration  13: 2178037.250 ops/s
# Warmup Iteration  14: 2175758.790 ops/s
# Warmup Iteration  15: 2150700.629 ops/s
# Warmup Iteration  16: 2171082.388 ops/s
# Warmup Iteration  17: 2163671.878 ops/s
# Warmup Iteration  18: 2161166.481 ops/s
# Warmup Iteration  19: 2168172.775 ops/s
# Warmup Iteration  20: 2175686.284 ops/s
# Warmup Iteration  21: 2174501.095 ops/s
# Warmup Iteration  22: 2164621.396 ops/s
# Warmup Iteration  23: 2170881.386 ops/s
# Warmup Iteration  24: 2172928.230 ops/s
# Warmup Iteration  25: 2169744.607 ops/s
# Warmup Iteration  26: 2161622.485 ops/s
# Warmup Iteration  27: 2175359.774 ops/s
# Warmup Iteration  28: 2173558.755 ops/s
# Warmup Iteration  29: 2176849.448 ops/s
# Warmup Iteration  30: 2176479.899 ops/s
Iteration   1: 2173422.535 ops/s
Iteration   2: 2168205.463 ops/s
Iteration   3: 2179584.592 ops/s
Iteration   4: 2176546.698 ops/s
Iteration   5: 2175870.666 ops/s
Iteration   6: 2172940.578 ops/s
Iteration   7: 2168697.847 ops/s
Iteration   8: 2163423.351 ops/s
Iteration   9: 2179948.881 ops/s
Iteration  10: 2174366.055 ops/s
Iteration  11: 2177557.020 ops/s
Iteration  12: 2159939.041 ops/s
Iteration  13: 2173698.063 ops/s
Iteration  14: 2182091.967 ops/s
Iteration  15: 2173705.591 ops/s
Iteration  16: 2158367.625 ops/s
Iteration  17: 2174347.080 ops/s
Iteration  18: 2177608.998 ops/s
Iteration  19: 2172181.229 ops/s
Iteration  20: 2166065.318 ops/s
Iteration  21: 2176933.238 ops/s
Iteration  22: 2161269.528 ops/s
Iteration  23: 2164074.434 ops/s
Iteration  24: 2169858.115 ops/s
Iteration  25: 2149787.691 ops/s
Iteration  26: 2173677.204 ops/s
Iteration  27: 2173612.670 ops/s
Iteration  28: 2169656.573 ops/s
Iteration  29: 2169001.402 ops/s
Iteration  30: 2152213.489 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectFloatWithBagTarget":
  2170288.431 ±(99.9%) 5306.715 ops/s [Average]
  (min, avg, max) = (2149787.691, 2170288.431, 2182091.967), stdev = 7942.842
  CI (99.9%): [2164981.717, 2175595.146] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_collectFloatWithBagTarget  thrpt   30  2170288.431 ± 5306.715  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectFloatWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectFloatWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 419611.419 ops/s
# Warmup Iteration   2: 786973.910 ops/s
# Warmup Iteration   3: 881886.139 ops/s
# Warmup Iteration   4: 885399.509 ops/s
# Warmup Iteration   5: 799034.754 ops/s
# Warmup Iteration   6: 815869.790 ops/s
# Warmup Iteration   7: 884660.376 ops/s
# Warmup Iteration   8: 883573.182 ops/s
# Warmup Iteration   9: 884264.255 ops/s
# Warmup Iteration  10: 885226.924 ops/s
# Warmup Iteration  11: 884725.006 ops/s
# Warmup Iteration  12: 883432.658 ops/s
# Warmup Iteration  13: 881427.176 ops/s
# Warmup Iteration  14: 886600.302 ops/s
# Warmup Iteration  15: 886483.683 ops/s
# Warmup Iteration  16: 881118.108 ops/s
# Warmup Iteration  17: 881184.192 ops/s
# Warmup Iteration  18: 878759.612 ops/s
# Warmup Iteration  19: 883024.840 ops/s
# Warmup Iteration  20: 881635.327 ops/s
# Warmup Iteration  21: 880220.265 ops/s
# Warmup Iteration  22: 879567.576 ops/s
# Warmup Iteration  23: 880321.618 ops/s
# Warmup Iteration  24: 878861.415 ops/s
# Warmup Iteration  25: 878481.095 ops/s
# Warmup Iteration  26: 882151.348 ops/s
# Warmup Iteration  27: 878102.107 ops/s
# Warmup Iteration  28: 876700.337 ops/s
# Warmup Iteration  29: 880440.495 ops/s
# Warmup Iteration  30: 882153.919 ops/s
Iteration   1: 877252.022 ops/s
Iteration   2: 868707.118 ops/s
Iteration   3: 874812.999 ops/s
Iteration   4: 880755.664 ops/s
Iteration   5: 880303.179 ops/s
Iteration   6: 878375.953 ops/s
Iteration   7: 879991.662 ops/s
Iteration   8: 878855.998 ops/s
Iteration   9: 879276.341 ops/s
Iteration  10: 878062.272 ops/s
Iteration  11: 882213.546 ops/s
Iteration  12: 881523.080 ops/s
Iteration  13: 881197.270 ops/s
Iteration  14: 881638.545 ops/s
Iteration  15: 877173.222 ops/s
Iteration  16: 879232.719 ops/s
Iteration  17: 881544.452 ops/s
Iteration  18: 883820.463 ops/s
Iteration  19: 882882.324 ops/s
Iteration  20: 880186.161 ops/s
Iteration  21: 881288.576 ops/s
Iteration  22: 879096.321 ops/s
Iteration  23: 879676.765 ops/s
Iteration  24: 881383.643 ops/s
Iteration  25: 885404.551 ops/s
Iteration  26: 877340.618 ops/s
Iteration  27: 881081.177 ops/s
Iteration  28: 872550.952 ops/s
Iteration  29: 880011.714 ops/s
Iteration  30: 878402.951 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectFloatWithTarget":
  879468.075 ±(99.9%) 2175.966 ops/s [Average]
  (min, avg, max) = (868707.118, 879468.075, 885404.551), stdev = 3256.883
  CI (99.9%): [877292.109, 881644.041] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_collectFloatWithTarget  thrpt   30  879468.075 ± 2175.966  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 287836.776 ops/s
# Warmup Iteration   2: 537929.204 ops/s
# Warmup Iteration   3: 604530.738 ops/s
# Warmup Iteration   4: 605808.352 ops/s
# Warmup Iteration   5: 582893.095 ops/s
# Warmup Iteration   6: 521635.339 ops/s
# Warmup Iteration   7: 608943.644 ops/s
# Warmup Iteration   8: 606922.424 ops/s
# Warmup Iteration   9: 608648.276 ops/s
# Warmup Iteration  10: 608114.497 ops/s
# Warmup Iteration  11: 605937.876 ops/s
# Warmup Iteration  12: 608708.322 ops/s
# Warmup Iteration  13: 607976.985 ops/s
# Warmup Iteration  14: 609500.561 ops/s
# Warmup Iteration  15: 609089.046 ops/s
# Warmup Iteration  16: 607985.818 ops/s
# Warmup Iteration  17: 608309.913 ops/s
# Warmup Iteration  18: 608607.611 ops/s
# Warmup Iteration  19: 608308.322 ops/s
# Warmup Iteration  20: 606113.801 ops/s
# Warmup Iteration  21: 607859.096 ops/s
# Warmup Iteration  22: 608879.337 ops/s
# Warmup Iteration  23: 608387.160 ops/s
# Warmup Iteration  24: 605382.507 ops/s
# Warmup Iteration  25: 609486.409 ops/s
# Warmup Iteration  26: 608010.180 ops/s
# Warmup Iteration  27: 608408.780 ops/s
# Warmup Iteration  28: 608427.330 ops/s
# Warmup Iteration  29: 607472.708 ops/s
# Warmup Iteration  30: 607239.310 ops/s
Iteration   1: 608485.380 ops/s
Iteration   2: 608292.686 ops/s
Iteration   3: 607878.609 ops/s
Iteration   4: 608176.065 ops/s
Iteration   5: 607670.425 ops/s
Iteration   6: 608396.707 ops/s
Iteration   7: 608430.847 ops/s
Iteration   8: 609940.555 ops/s
Iteration   9: 607670.742 ops/s
Iteration  10: 608982.190 ops/s
Iteration  11: 606969.792 ops/s
Iteration  12: 607800.418 ops/s
Iteration  13: 608541.860 ops/s
Iteration  14: 605514.482 ops/s
Iteration  15: 607634.321 ops/s
Iteration  16: 608783.712 ops/s
Iteration  17: 607879.274 ops/s
Iteration  18: 609292.763 ops/s
Iteration  19: 606328.041 ops/s
Iteration  20: 609694.035 ops/s
Iteration  21: 606384.867 ops/s
Iteration  22: 607057.142 ops/s
Iteration  23: 605796.076 ops/s
Iteration  24: 605506.547 ops/s
Iteration  25: 607136.662 ops/s
Iteration  26: 608115.206 ops/s
Iteration  27: 607814.259 ops/s
Iteration  28: 606829.917 ops/s
Iteration  29: 607345.069 ops/s
Iteration  30: 603600.437 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectIf":
  607598.303 ±(99.9%) 903.276 ops/s [Average]
  (min, avg, max) = (603600.437, 607598.303, 609940.555), stdev = 1351.981
  CI (99.9%): [606695.027, 608501.579] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score     Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_collectIf  thrpt   30  607598.303 ± 903.276  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectIfWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectIfWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1033211.076 ops/s
# Warmup Iteration   2: 1636593.973 ops/s
# Warmup Iteration   3: 1948042.840 ops/s
# Warmup Iteration   4: 1963035.489 ops/s
# Warmup Iteration   5: 1956549.943 ops/s
# Warmup Iteration   6: 1680004.284 ops/s
# Warmup Iteration   7: 1873839.206 ops/s
# Warmup Iteration   8: 1960986.627 ops/s
# Warmup Iteration   9: 1962748.464 ops/s
# Warmup Iteration  10: 1961939.370 ops/s
# Warmup Iteration  11: 1962822.813 ops/s
# Warmup Iteration  12: 1956572.204 ops/s
# Warmup Iteration  13: 1956733.828 ops/s
# Warmup Iteration  14: 1957759.912 ops/s
# Warmup Iteration  15: 1961967.238 ops/s
# Warmup Iteration  16: 1960227.762 ops/s
# Warmup Iteration  17: 1961374.540 ops/s
# Warmup Iteration  18: 1963345.199 ops/s
# Warmup Iteration  19: 1957763.647 ops/s
# Warmup Iteration  20: 1959868.556 ops/s
# Warmup Iteration  21: 1958720.128 ops/s
# Warmup Iteration  22: 1955195.011 ops/s
# Warmup Iteration  23: 1958137.072 ops/s
# Warmup Iteration  24: 1957664.108 ops/s
# Warmup Iteration  25: 1955253.279 ops/s
# Warmup Iteration  26: 1953315.733 ops/s
# Warmup Iteration  27: 1957237.195 ops/s
# Warmup Iteration  28: 1961258.720 ops/s
# Warmup Iteration  29: 1962637.796 ops/s
# Warmup Iteration  30: 1959931.148 ops/s
Iteration   1: 1959166.621 ops/s
Iteration   2: 1964624.316 ops/s
Iteration   3: 1956992.380 ops/s
Iteration   4: 1967010.986 ops/s
Iteration   5: 1960407.645 ops/s
Iteration   6: 1958151.536 ops/s
Iteration   7: 1953804.857 ops/s
Iteration   8: 1965975.621 ops/s
Iteration   9: 1961701.848 ops/s
Iteration  10: 1965050.909 ops/s
Iteration  11: 1960667.126 ops/s
Iteration  12: 1963285.844 ops/s
Iteration  13: 1958524.980 ops/s
Iteration  14: 1949858.370 ops/s
Iteration  15: 1960016.525 ops/s
Iteration  16: 1968948.788 ops/s
Iteration  17: 1963465.145 ops/s
Iteration  18: 1966385.453 ops/s
Iteration  19: 1962567.756 ops/s
Iteration  20: 1961594.344 ops/s
Iteration  21: 1968468.477 ops/s
Iteration  22: 1960874.636 ops/s
Iteration  23: 1960460.838 ops/s
Iteration  24: 1957088.398 ops/s
Iteration  25: 1964475.502 ops/s
Iteration  26: 1964334.066 ops/s
Iteration  27: 1964187.555 ops/s
Iteration  28: 1956104.073 ops/s
Iteration  29: 1960645.061 ops/s
Iteration  30: 1964197.301 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectIfWithTarget":
  1961634.565 ±(99.9%) 2870.185 ops/s [Average]
  (min, avg, max) = (1949858.370, 1961634.565, 1968948.788), stdev = 4295.958
  CI (99.9%): [1958764.380, 1964504.750] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_collectIfWithTarget  thrpt   30  1961634.565 ± 2870.185  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 303240.074 ops/s
# Warmup Iteration   2: 608959.964 ops/s
# Warmup Iteration   3: 649312.362 ops/s
# Warmup Iteration   4: 652663.008 ops/s
# Warmup Iteration   5: 543292.408 ops/s
# Warmup Iteration   6: 652067.401 ops/s
# Warmup Iteration   7: 655142.566 ops/s
# Warmup Iteration   8: 650509.893 ops/s
# Warmup Iteration   9: 651302.883 ops/s
# Warmup Iteration  10: 650721.615 ops/s
# Warmup Iteration  11: 654646.441 ops/s
# Warmup Iteration  12: 653834.116 ops/s
# Warmup Iteration  13: 653766.191 ops/s
# Warmup Iteration  14: 653118.441 ops/s
# Warmup Iteration  15: 652044.151 ops/s
# Warmup Iteration  16: 651916.243 ops/s
# Warmup Iteration  17: 655082.289 ops/s
# Warmup Iteration  18: 652823.030 ops/s
# Warmup Iteration  19: 655894.738 ops/s
# Warmup Iteration  20: 652304.609 ops/s
# Warmup Iteration  21: 653927.429 ops/s
# Warmup Iteration  22: 653847.189 ops/s
# Warmup Iteration  23: 653749.219 ops/s
# Warmup Iteration  24: 654234.748 ops/s
# Warmup Iteration  25: 652660.923 ops/s
# Warmup Iteration  26: 652786.690 ops/s
# Warmup Iteration  27: 654121.342 ops/s
# Warmup Iteration  28: 654401.988 ops/s
# Warmup Iteration  29: 653574.173 ops/s
# Warmup Iteration  30: 653370.789 ops/s
Iteration   1: 653736.476 ops/s
Iteration   2: 655898.133 ops/s
Iteration   3: 651492.842 ops/s
Iteration   4: 654325.613 ops/s
Iteration   5: 654017.116 ops/s
Iteration   6: 654687.141 ops/s
Iteration   7: 652614.763 ops/s
Iteration   8: 652985.658 ops/s
Iteration   9: 654301.687 ops/s
Iteration  10: 652831.401 ops/s
Iteration  11: 647344.218 ops/s
Iteration  12: 652525.706 ops/s
Iteration  13: 652089.500 ops/s
Iteration  14: 655975.357 ops/s
Iteration  15: 655353.268 ops/s
Iteration  16: 653766.778 ops/s
Iteration  17: 655403.799 ops/s
Iteration  18: 647902.348 ops/s
Iteration  19: 654152.603 ops/s
Iteration  20: 650881.297 ops/s
Iteration  21: 657401.212 ops/s
Iteration  22: 655185.440 ops/s
Iteration  23: 650221.526 ops/s
Iteration  24: 652672.620 ops/s
Iteration  25: 652950.122 ops/s
Iteration  26: 653542.611 ops/s
Iteration  27: 654433.292 ops/s
Iteration  28: 655215.575 ops/s
Iteration  29: 656738.322 ops/s
Iteration  30: 653871.938 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectInt":
  653483.945 ±(99.9%) 1525.894 ops/s [Average]
  (min, avg, max) = (647344.218, 653483.945, 657401.212), stdev = 2283.887
  CI (99.9%): [651958.051, 655009.840] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_collectInt  thrpt   30  653483.945 ± 1525.894  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectIntWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectIntWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1003407.916 ops/s
# Warmup Iteration   2: 2283424.687 ops/s
# Warmup Iteration   3: 2411733.842 ops/s
# Warmup Iteration   4: 2165355.944 ops/s
# Warmup Iteration   5: 2218205.092 ops/s
# Warmup Iteration   6: 2414218.141 ops/s
# Warmup Iteration   7: 2410789.892 ops/s
# Warmup Iteration   8: 2406003.527 ops/s
# Warmup Iteration   9: 2419046.828 ops/s
# Warmup Iteration  10: 2394863.353 ops/s
# Warmup Iteration  11: 2412804.073 ops/s
# Warmup Iteration  12: 2410901.927 ops/s
# Warmup Iteration  13: 2400951.896 ops/s
# Warmup Iteration  14: 2414858.771 ops/s
# Warmup Iteration  15: 2416069.278 ops/s
# Warmup Iteration  16: 2409197.550 ops/s
# Warmup Iteration  17: 2401666.676 ops/s
# Warmup Iteration  18: 2405852.444 ops/s
# Warmup Iteration  19: 2380932.389 ops/s
# Warmup Iteration  20: 2406936.395 ops/s
# Warmup Iteration  21: 2402672.772 ops/s
# Warmup Iteration  22: 2406054.389 ops/s
# Warmup Iteration  23: 2412374.542 ops/s
# Warmup Iteration  24: 2402681.133 ops/s
# Warmup Iteration  25: 2395350.582 ops/s
# Warmup Iteration  26: 2411430.600 ops/s
# Warmup Iteration  27: 2391283.876 ops/s
# Warmup Iteration  28: 2414219.619 ops/s
# Warmup Iteration  29: 2414775.684 ops/s
# Warmup Iteration  30: 2407692.364 ops/s
Iteration   1: 2418027.468 ops/s
Iteration   2: 2415639.266 ops/s
Iteration   3: 2412999.910 ops/s
Iteration   4: 2403999.124 ops/s
Iteration   5: 2416845.377 ops/s
Iteration   6: 2415722.747 ops/s
Iteration   7: 2417883.005 ops/s
Iteration   8: 2410197.323 ops/s
Iteration   9: 2405194.896 ops/s
Iteration  10: 2365407.902 ops/s
Iteration  11: 2407299.313 ops/s
Iteration  12: 2401212.084 ops/s
Iteration  13: 2378661.314 ops/s
Iteration  14: 2319604.895 ops/s
Iteration  15: 2404042.458 ops/s
Iteration  16: 2415366.922 ops/s
Iteration  17: 2400836.810 ops/s
Iteration  18: 2416132.257 ops/s
Iteration  19: 2409550.359 ops/s
Iteration  20: 2415963.735 ops/s
Iteration  21: 2408660.312 ops/s
Iteration  22: 2414462.582 ops/s
Iteration  23: 2406468.007 ops/s
Iteration  24: 2393807.441 ops/s
Iteration  25: 2402589.359 ops/s
Iteration  26: 2406993.861 ops/s
Iteration  27: 2405894.723 ops/s
Iteration  28: 2382556.220 ops/s
Iteration  29: 2402879.090 ops/s
Iteration  30: 2414618.561 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectIntWithBagTarget":
  2402983.911 ±(99.9%) 13292.820 ops/s [Average]
  (min, avg, max) = (2319604.895, 2402983.911, 2418027.468), stdev = 19896.069
  CI (99.9%): [2389691.090, 2416276.731] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_collectIntWithBagTarget  thrpt   30  2402983.911 ± 13292.820  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectIntWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectIntWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 498327.132 ops/s
# Warmup Iteration   2: 994283.734 ops/s
# Warmup Iteration   3: 1088159.246 ops/s
# Warmup Iteration   4: 1089543.196 ops/s
# Warmup Iteration   5: 901753.547 ops/s
# Warmup Iteration   6: 1096585.703 ops/s
# Warmup Iteration   7: 1094451.541 ops/s
# Warmup Iteration   8: 1093933.004 ops/s
# Warmup Iteration   9: 1094586.282 ops/s
# Warmup Iteration  10: 1093435.959 ops/s
# Warmup Iteration  11: 1094150.184 ops/s
# Warmup Iteration  12: 1092502.136 ops/s
# Warmup Iteration  13: 1093797.682 ops/s
# Warmup Iteration  14: 1088683.494 ops/s
# Warmup Iteration  15: 1093518.464 ops/s
# Warmup Iteration  16: 1088778.505 ops/s
# Warmup Iteration  17: 1093640.010 ops/s
# Warmup Iteration  18: 1096424.416 ops/s
# Warmup Iteration  19: 1094410.755 ops/s
# Warmup Iteration  20: 1096560.336 ops/s
# Warmup Iteration  21: 1097094.550 ops/s
# Warmup Iteration  22: 1096605.867 ops/s
# Warmup Iteration  23: 1095645.961 ops/s
# Warmup Iteration  24: 1095030.547 ops/s
# Warmup Iteration  25: 1094867.034 ops/s
# Warmup Iteration  26: 1092851.795 ops/s
# Warmup Iteration  27: 1094018.058 ops/s
# Warmup Iteration  28: 1094647.321 ops/s
# Warmup Iteration  29: 1094388.365 ops/s
# Warmup Iteration  30: 1095111.094 ops/s
Iteration   1: 1093147.919 ops/s
Iteration   2: 1092172.164 ops/s
Iteration   3: 1098178.317 ops/s
Iteration   4: 1085942.799 ops/s
Iteration   5: 1097868.990 ops/s
Iteration   6: 1099250.166 ops/s
Iteration   7: 1096096.664 ops/s
Iteration   8: 1087229.536 ops/s
Iteration   9: 1089959.238 ops/s
Iteration  10: 1090619.716 ops/s
Iteration  11: 1087396.499 ops/s
Iteration  12: 1088716.180 ops/s
Iteration  13: 1083285.902 ops/s
Iteration  14: 1095832.981 ops/s
Iteration  15: 1093256.247 ops/s
Iteration  16: 1096520.677 ops/s
Iteration  17: 1094392.705 ops/s
Iteration  18: 1097216.740 ops/s
Iteration  19: 1093325.892 ops/s
Iteration  20: 1094745.983 ops/s
Iteration  21: 1086838.148 ops/s
Iteration  22: 1090956.554 ops/s
Iteration  23: 1089298.605 ops/s
Iteration  24: 1098137.729 ops/s
Iteration  25: 1094092.499 ops/s
Iteration  26: 1095261.764 ops/s
Iteration  27: 1098440.063 ops/s
Iteration  28: 1097206.612 ops/s
Iteration  29: 1091969.571 ops/s
Iteration  30: 1096977.926 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectIntWithTarget":
  1093144.493 ±(99.9%) 2876.265 ops/s [Average]
  (min, avg, max) = (1083285.902, 1093144.493, 1099250.166), stdev = 4305.058
  CI (99.9%): [1090268.228, 1096020.758] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_collectIntWithTarget  thrpt   30  1093144.493 ± 2876.265  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 268516.717 ops/s
# Warmup Iteration   2: 630864.332 ops/s
# Warmup Iteration   3: 645130.842 ops/s
# Warmup Iteration   4: 538112.456 ops/s
# Warmup Iteration   5: 641349.073 ops/s
# Warmup Iteration   6: 634203.389 ops/s
# Warmup Iteration   7: 644398.230 ops/s
# Warmup Iteration   8: 644864.465 ops/s
# Warmup Iteration   9: 645795.632 ops/s
# Warmup Iteration  10: 645765.394 ops/s
# Warmup Iteration  11: 644336.011 ops/s
# Warmup Iteration  12: 647311.683 ops/s
# Warmup Iteration  13: 646368.050 ops/s
# Warmup Iteration  14: 646988.150 ops/s
# Warmup Iteration  15: 642146.155 ops/s
# Warmup Iteration  16: 641614.869 ops/s
# Warmup Iteration  17: 645238.490 ops/s
# Warmup Iteration  18: 644061.924 ops/s
# Warmup Iteration  19: 646824.789 ops/s
# Warmup Iteration  20: 646946.429 ops/s
# Warmup Iteration  21: 645391.576 ops/s
# Warmup Iteration  22: 646388.302 ops/s
# Warmup Iteration  23: 647638.424 ops/s
# Warmup Iteration  24: 645953.709 ops/s
# Warmup Iteration  25: 646698.233 ops/s
# Warmup Iteration  26: 646185.043 ops/s
# Warmup Iteration  27: 648970.966 ops/s
# Warmup Iteration  28: 646069.703 ops/s
# Warmup Iteration  29: 644406.781 ops/s
# Warmup Iteration  30: 648267.328 ops/s
Iteration   1: 644016.296 ops/s
Iteration   2: 645592.265 ops/s
Iteration   3: 645207.703 ops/s
Iteration   4: 649981.532 ops/s
Iteration   5: 646372.141 ops/s
Iteration   6: 642116.662 ops/s
Iteration   7: 645694.492 ops/s
Iteration   8: 640837.812 ops/s
Iteration   9: 644776.844 ops/s
Iteration  10: 643552.285 ops/s
Iteration  11: 644850.508 ops/s
Iteration  12: 649264.469 ops/s
Iteration  13: 639979.255 ops/s
Iteration  14: 638087.130 ops/s
Iteration  15: 646336.997 ops/s
Iteration  16: 645571.056 ops/s
Iteration  17: 643852.904 ops/s
Iteration  18: 645787.059 ops/s
Iteration  19: 647208.706 ops/s
Iteration  20: 645609.770 ops/s
Iteration  21: 645568.831 ops/s
Iteration  22: 646661.875 ops/s
Iteration  23: 645414.114 ops/s
Iteration  24: 646120.991 ops/s
Iteration  25: 647392.492 ops/s
Iteration  26: 647480.971 ops/s
Iteration  27: 647308.593 ops/s
Iteration  28: 645897.098 ops/s
Iteration  29: 646920.300 ops/s
Iteration  30: 645089.501 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectLong":
  645285.022 ±(99.9%) 1667.349 ops/s [Average]
  (min, avg, max) = (638087.130, 645285.022, 649981.532), stdev = 2495.609
  CI (99.9%): [643617.673, 646952.370] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_collectLong  thrpt   30  645285.022 ± 1667.349  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectLongWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectLongWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 896649.998 ops/s
# Warmup Iteration   2: 2240742.389 ops/s
# Warmup Iteration   3: 2292555.552 ops/s
# Warmup Iteration   4: 1898427.485 ops/s
# Warmup Iteration   5: 2302465.650 ops/s
# Warmup Iteration   6: 2305070.297 ops/s
# Warmup Iteration   7: 2299909.994 ops/s
# Warmup Iteration   8: 2292004.607 ops/s
# Warmup Iteration   9: 2299104.364 ops/s
# Warmup Iteration  10: 2307163.806 ops/s
# Warmup Iteration  11: 2298868.456 ops/s
# Warmup Iteration  12: 2297940.725 ops/s
# Warmup Iteration  13: 2305783.344 ops/s
# Warmup Iteration  14: 2296303.446 ops/s
# Warmup Iteration  15: 2297394.098 ops/s
# Warmup Iteration  16: 2303192.555 ops/s
# Warmup Iteration  17: 2304222.808 ops/s
# Warmup Iteration  18: 2299819.398 ops/s
# Warmup Iteration  19: 2301476.352 ops/s
# Warmup Iteration  20: 2304529.863 ops/s
# Warmup Iteration  21: 2293987.026 ops/s
# Warmup Iteration  22: 2302984.958 ops/s
# Warmup Iteration  23: 2294373.841 ops/s
# Warmup Iteration  24: 2300038.621 ops/s
# Warmup Iteration  25: 2299907.559 ops/s
# Warmup Iteration  26: 2297012.800 ops/s
# Warmup Iteration  27: 2293420.142 ops/s
# Warmup Iteration  28: 2306810.379 ops/s
# Warmup Iteration  29: 2304115.804 ops/s
# Warmup Iteration  30: 2293188.052 ops/s
Iteration   1: 2312963.990 ops/s
Iteration   2: 2303499.775 ops/s
Iteration   3: 2304769.932 ops/s
Iteration   4: 2306485.613 ops/s
Iteration   5: 2306136.186 ops/s
Iteration   6: 2298851.436 ops/s
Iteration   7: 2301292.223 ops/s
Iteration   8: 2308314.337 ops/s
Iteration   9: 2309121.215 ops/s
Iteration  10: 2308216.384 ops/s
Iteration  11: 2310556.472 ops/s
Iteration  12: 2305499.308 ops/s
Iteration  13: 2308558.125 ops/s
Iteration  14: 2296385.017 ops/s
Iteration  15: 2301193.670 ops/s
Iteration  16: 2309328.050 ops/s
Iteration  17: 2308294.857 ops/s
Iteration  18: 2298445.205 ops/s
Iteration  19: 2311155.269 ops/s
Iteration  20: 2290495.830 ops/s
Iteration  21: 2307276.511 ops/s
Iteration  22: 2314660.556 ops/s
Iteration  23: 2305593.734 ops/s
Iteration  24: 2305908.705 ops/s
Iteration  25: 2311291.236 ops/s
Iteration  26: 2309678.942 ops/s
Iteration  27: 2311377.322 ops/s
Iteration  28: 2308836.401 ops/s
Iteration  29: 2295451.443 ops/s
Iteration  30: 2308890.345 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectLongWithBagTarget":
  2305950.936 ±(99.9%) 3738.724 ops/s [Average]
  (min, avg, max) = (2290495.830, 2305950.936, 2314660.556), stdev = 5595.947
  CI (99.9%): [2302212.212, 2309689.661] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_collectLongWithBagTarget  thrpt   30  2305950.936 ± 3738.724  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectLongWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectLongWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 450040.804 ops/s
# Warmup Iteration   2: 950699.523 ops/s
# Warmup Iteration   3: 1001649.377 ops/s
# Warmup Iteration   4: 1005803.022 ops/s
# Warmup Iteration   5: 840807.055 ops/s
# Warmup Iteration   6: 1013590.212 ops/s
# Warmup Iteration   7: 1011508.032 ops/s
# Warmup Iteration   8: 1008170.307 ops/s
# Warmup Iteration   9: 1000373.532 ops/s
# Warmup Iteration  10: 1005337.207 ops/s
# Warmup Iteration  11: 1013355.731 ops/s
# Warmup Iteration  12: 1008024.011 ops/s
# Warmup Iteration  13: 1012388.916 ops/s
# Warmup Iteration  14: 1009910.493 ops/s
# Warmup Iteration  15: 1010139.523 ops/s
# Warmup Iteration  16: 1012228.302 ops/s
# Warmup Iteration  17: 1009197.135 ops/s
# Warmup Iteration  18: 1011866.529 ops/s
# Warmup Iteration  19: 1011848.205 ops/s
# Warmup Iteration  20: 1013272.594 ops/s
# Warmup Iteration  21: 1011489.490 ops/s
# Warmup Iteration  22: 1006123.568 ops/s
# Warmup Iteration  23: 1008792.500 ops/s
# Warmup Iteration  24: 1010807.944 ops/s
# Warmup Iteration  25: 1011363.553 ops/s
# Warmup Iteration  26: 1006812.415 ops/s
# Warmup Iteration  27: 1010771.545 ops/s
# Warmup Iteration  28: 1011534.733 ops/s
# Warmup Iteration  29: 1014260.597 ops/s
# Warmup Iteration  30: 1007339.702 ops/s
Iteration   1: 1011631.219 ops/s
Iteration   2: 1010130.539 ops/s
Iteration   3: 1012872.405 ops/s
Iteration   4: 1011489.495 ops/s
Iteration   5: 1012152.644 ops/s
Iteration   6: 1005228.256 ops/s
Iteration   7: 1012909.522 ops/s
Iteration   8: 1014895.448 ops/s
Iteration   9: 1005844.584 ops/s
Iteration  10: 1012470.778 ops/s
Iteration  11: 1010984.209 ops/s
Iteration  12: 998688.491 ops/s
Iteration  13: 1008531.844 ops/s
Iteration  14: 1012791.096 ops/s
Iteration  15: 1007813.519 ops/s
Iteration  16: 1012627.095 ops/s
Iteration  17: 1011340.165 ops/s
Iteration  18: 1008018.847 ops/s
Iteration  19: 1012190.052 ops/s
Iteration  20: 1006592.961 ops/s
Iteration  21: 1009458.932 ops/s
Iteration  22: 1011996.706 ops/s
Iteration  23: 1007772.562 ops/s
Iteration  24: 1008194.752 ops/s
Iteration  25: 1010486.352 ops/s
Iteration  26: 1010517.504 ops/s
Iteration  27: 1012144.489 ops/s
Iteration  28: 1007749.843 ops/s
Iteration  29: 1008872.049 ops/s
Iteration  30: 1011573.364 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectLongWithTarget":
  1009932.324 ±(99.9%) 2131.986 ops/s [Average]
  (min, avg, max) = (998688.491, 1009932.324, 1014895.448), stdev = 3191.057
  CI (99.9%): [1007800.338, 1012064.310] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_collectLongWithTarget  thrpt   30  1009932.324 ± 2131.986  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 313687.977 ops/s
# Warmup Iteration   2: 654230.800 ops/s
# Warmup Iteration   3: 699595.308 ops/s
# Warmup Iteration   4: 704150.150 ops/s
# Warmup Iteration   5: 584984.959 ops/s
# Warmup Iteration   6: 704232.673 ops/s
# Warmup Iteration   7: 703597.654 ops/s
# Warmup Iteration   8: 704845.196 ops/s
# Warmup Iteration   9: 704829.615 ops/s
# Warmup Iteration  10: 705716.142 ops/s
# Warmup Iteration  11: 704151.620 ops/s
# Warmup Iteration  12: 704206.323 ops/s
# Warmup Iteration  13: 704178.800 ops/s
# Warmup Iteration  14: 702242.601 ops/s
# Warmup Iteration  15: 700620.947 ops/s
# Warmup Iteration  16: 699578.152 ops/s
# Warmup Iteration  17: 702274.599 ops/s
# Warmup Iteration  18: 700277.081 ops/s
# Warmup Iteration  19: 701193.199 ops/s
# Warmup Iteration  20: 702535.236 ops/s
# Warmup Iteration  21: 702460.877 ops/s
# Warmup Iteration  22: 700431.030 ops/s
# Warmup Iteration  23: 704271.523 ops/s
# Warmup Iteration  24: 703651.987 ops/s
# Warmup Iteration  25: 705502.966 ops/s
# Warmup Iteration  26: 703263.727 ops/s
# Warmup Iteration  27: 704789.197 ops/s
# Warmup Iteration  28: 703665.077 ops/s
# Warmup Iteration  29: 704430.440 ops/s
# Warmup Iteration  30: 704817.710 ops/s
Iteration   1: 705178.281 ops/s
Iteration   2: 702314.180 ops/s
Iteration   3: 703610.467 ops/s
Iteration   4: 704297.726 ops/s
Iteration   5: 703324.108 ops/s
Iteration   6: 703921.855 ops/s
Iteration   7: 707110.583 ops/s
Iteration   8: 702116.961 ops/s
Iteration   9: 704582.545 ops/s
Iteration  10: 702950.871 ops/s
Iteration  11: 705260.720 ops/s
Iteration  12: 703312.112 ops/s
Iteration  13: 704244.050 ops/s
Iteration  14: 705842.662 ops/s
Iteration  15: 704927.265 ops/s
Iteration  16: 701604.455 ops/s
Iteration  17: 703838.090 ops/s
Iteration  18: 705160.765 ops/s
Iteration  19: 703188.659 ops/s
Iteration  20: 704038.905 ops/s
Iteration  21: 702432.360 ops/s
Iteration  22: 701016.951 ops/s
Iteration  23: 701917.702 ops/s
Iteration  24: 700409.147 ops/s
Iteration  25: 702956.331 ops/s
Iteration  26: 704788.694 ops/s
Iteration  27: 704046.257 ops/s
Iteration  28: 705977.264 ops/s
Iteration  29: 704397.456 ops/s
Iteration  30: 700748.767 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectShort":
  703650.540 ±(99.9%) 1074.572 ops/s [Average]
  (min, avg, max) = (700409.147, 703650.540, 707110.583), stdev = 1608.369
  CI (99.9%): [702575.967, 704725.112] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_collectShort  thrpt   30  703650.540 ± 1074.572  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectShortWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectShortWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1004058.703 ops/s
# Warmup Iteration   2: 2342479.210 ops/s
# Warmup Iteration   3: 2486536.053 ops/s
# Warmup Iteration   4: 2245059.427 ops/s
# Warmup Iteration   5: 2318135.097 ops/s
# Warmup Iteration   6: 2486357.147 ops/s
# Warmup Iteration   7: 2498860.959 ops/s
# Warmup Iteration   8: 2498494.235 ops/s
# Warmup Iteration   9: 2499426.638 ops/s
# Warmup Iteration  10: 2501448.916 ops/s
# Warmup Iteration  11: 2495440.255 ops/s
# Warmup Iteration  12: 2491483.829 ops/s
# Warmup Iteration  13: 2492264.931 ops/s
# Warmup Iteration  14: 2499991.499 ops/s
# Warmup Iteration  15: 2497419.864 ops/s
# Warmup Iteration  16: 2500685.324 ops/s
# Warmup Iteration  17: 2505157.848 ops/s
# Warmup Iteration  18: 2508540.301 ops/s
# Warmup Iteration  19: 2502846.285 ops/s
# Warmup Iteration  20: 2504852.525 ops/s
# Warmup Iteration  21: 2510012.298 ops/s
# Warmup Iteration  22: 2504622.433 ops/s
# Warmup Iteration  23: 2508048.882 ops/s
# Warmup Iteration  24: 2501707.339 ops/s
# Warmup Iteration  25: 2504191.981 ops/s
# Warmup Iteration  26: 2507935.920 ops/s
# Warmup Iteration  27: 2499223.177 ops/s
# Warmup Iteration  28: 2496145.417 ops/s
# Warmup Iteration  29: 2495395.303 ops/s
# Warmup Iteration  30: 2502415.234 ops/s
Iteration   1: 2508702.307 ops/s
Iteration   2: 2510083.522 ops/s
Iteration   3: 2499567.140 ops/s
Iteration   4: 2498043.656 ops/s
Iteration   5: 2502211.044 ops/s
Iteration   6: 2507091.566 ops/s
Iteration   7: 2504389.160 ops/s
Iteration   8: 2503200.605 ops/s
Iteration   9: 2465516.166 ops/s
Iteration  10: 2503895.762 ops/s
Iteration  11: 2517061.045 ops/s
Iteration  12: 2497417.810 ops/s
Iteration  13: 2501982.613 ops/s
Iteration  14: 2507372.433 ops/s
Iteration  15: 2510183.777 ops/s
Iteration  16: 2509593.472 ops/s
Iteration  17: 2514319.508 ops/s
Iteration  18: 2502158.248 ops/s
Iteration  19: 2508235.742 ops/s
Iteration  20: 2511458.093 ops/s
Iteration  21: 2506508.134 ops/s
Iteration  22: 2504715.342 ops/s
Iteration  23: 2504060.529 ops/s
Iteration  24: 2502934.472 ops/s
Iteration  25: 2502001.313 ops/s
Iteration  26: 2493266.240 ops/s
Iteration  27: 2501837.315 ops/s
Iteration  28: 2507367.511 ops/s
Iteration  29: 2501078.593 ops/s
Iteration  30: 2507635.317 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectShortWithBagTarget":
  2503796.281 ±(99.9%) 5891.242 ops/s [Average]
  (min, avg, max) = (2465516.166, 2503796.281, 2517061.045), stdev = 8817.734
  CI (99.9%): [2497905.039, 2509687.523] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_collectShortWithBagTarget  thrpt   30  2503796.281 ± 5891.242  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectShortWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectShortWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 492996.523 ops/s
# Warmup Iteration   2: 984739.547 ops/s
# Warmup Iteration   3: 1106841.000 ops/s
# Warmup Iteration   4: 1112265.205 ops/s
# Warmup Iteration   5: 912977.650 ops/s
# Warmup Iteration   6: 1112657.934 ops/s
# Warmup Iteration   7: 1110500.976 ops/s
# Warmup Iteration   8: 1108018.288 ops/s
# Warmup Iteration   9: 1116946.031 ops/s
# Warmup Iteration  10: 1115639.121 ops/s
# Warmup Iteration  11: 1103540.850 ops/s
# Warmup Iteration  12: 1113203.780 ops/s
# Warmup Iteration  13: 1118515.870 ops/s
# Warmup Iteration  14: 1114954.574 ops/s
# Warmup Iteration  15: 1115210.397 ops/s
# Warmup Iteration  16: 1116315.709 ops/s
# Warmup Iteration  17: 1114451.991 ops/s
# Warmup Iteration  18: 1114111.674 ops/s
# Warmup Iteration  19: 1107689.042 ops/s
# Warmup Iteration  20: 1115842.469 ops/s
# Warmup Iteration  21: 1115127.192 ops/s
# Warmup Iteration  22: 1115779.945 ops/s
# Warmup Iteration  23: 1115598.688 ops/s
# Warmup Iteration  24: 1115056.361 ops/s
# Warmup Iteration  25: 1114822.331 ops/s
# Warmup Iteration  26: 1111733.801 ops/s
# Warmup Iteration  27: 1114391.173 ops/s
# Warmup Iteration  28: 1114324.813 ops/s
# Warmup Iteration  29: 1115388.074 ops/s
# Warmup Iteration  30: 1113762.132 ops/s
Iteration   1: 1118389.139 ops/s
Iteration   2: 1113672.753 ops/s
Iteration   3: 1112724.463 ops/s
Iteration   4: 1108938.286 ops/s
Iteration   5: 1113443.892 ops/s
Iteration   6: 1118144.300 ops/s
Iteration   7: 1115979.890 ops/s
Iteration   8: 1110390.676 ops/s
Iteration   9: 1116155.069 ops/s
Iteration  10: 1115223.465 ops/s
Iteration  11: 1112357.084 ops/s
Iteration  12: 1111314.353 ops/s
Iteration  13: 1117792.973 ops/s
Iteration  14: 1109195.497 ops/s
Iteration  15: 1115230.033 ops/s
Iteration  16: 1113465.560 ops/s
Iteration  17: 1111371.214 ops/s
Iteration  18: 1112478.735 ops/s
Iteration  19: 1116579.012 ops/s
Iteration  20: 1112657.454 ops/s
Iteration  21: 1110734.642 ops/s
Iteration  22: 1113061.742 ops/s
Iteration  23: 1104123.316 ops/s
Iteration  24: 1114294.990 ops/s
Iteration  25: 1110141.444 ops/s
Iteration  26: 1115255.701 ops/s
Iteration  27: 1112812.949 ops/s
Iteration  28: 1114980.566 ops/s
Iteration  29: 1114064.274 ops/s
Iteration  30: 1116002.226 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectShortWithTarget":
  1113365.857 ±(99.9%) 2053.704 ops/s [Average]
  (min, avg, max) = (1104123.316, 1113365.857, 1118389.139), stdev = 3073.888
  CI (99.9%): [1111312.152, 1115419.561] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_collectShortWithTarget  thrpt   30  1113365.857 ± 2053.704  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 101649.617 ops/s
# Warmup Iteration   2: 178487.763 ops/s
# Warmup Iteration   3: 219977.848 ops/s
# Warmup Iteration   4: 221501.956 ops/s
# Warmup Iteration   5: 221181.004 ops/s
# Warmup Iteration   6: 196778.083 ops/s
# Warmup Iteration   7: 205907.273 ops/s
# Warmup Iteration   8: 221528.931 ops/s
# Warmup Iteration   9: 221271.314 ops/s
# Warmup Iteration  10: 221630.621 ops/s
# Warmup Iteration  11: 221504.758 ops/s
# Warmup Iteration  12: 221811.217 ops/s
# Warmup Iteration  13: 221505.628 ops/s
# Warmup Iteration  14: 221238.149 ops/s
# Warmup Iteration  15: 221546.900 ops/s
# Warmup Iteration  16: 221257.930 ops/s
# Warmup Iteration  17: 221712.053 ops/s
# Warmup Iteration  18: 222164.373 ops/s
# Warmup Iteration  19: 222024.020 ops/s
# Warmup Iteration  20: 222203.945 ops/s
# Warmup Iteration  21: 221026.255 ops/s
# Warmup Iteration  22: 221238.681 ops/s
# Warmup Iteration  23: 221718.979 ops/s
# Warmup Iteration  24: 222037.159 ops/s
# Warmup Iteration  25: 222093.778 ops/s
# Warmup Iteration  26: 221099.422 ops/s
# Warmup Iteration  27: 221606.088 ops/s
# Warmup Iteration  28: 221068.136 ops/s
# Warmup Iteration  29: 221933.966 ops/s
# Warmup Iteration  30: 222208.068 ops/s
Iteration   1: 221284.535 ops/s
Iteration   2: 222273.668 ops/s
Iteration   3: 220554.119 ops/s
Iteration   4: 221792.956 ops/s
Iteration   5: 221719.652 ops/s
Iteration   6: 222450.126 ops/s
Iteration   7: 221544.817 ops/s
Iteration   8: 222373.603 ops/s
Iteration   9: 221511.405 ops/s
Iteration  10: 221491.882 ops/s
Iteration  11: 221941.669 ops/s
Iteration  12: 222480.951 ops/s
Iteration  13: 221714.191 ops/s
Iteration  14: 222077.887 ops/s
Iteration  15: 221721.185 ops/s
Iteration  16: 221974.589 ops/s
Iteration  17: 222001.930 ops/s
Iteration  18: 220862.939 ops/s
Iteration  19: 222165.733 ops/s
Iteration  20: 221441.410 ops/s
Iteration  21: 221124.057 ops/s
Iteration  22: 221452.317 ops/s
Iteration  23: 221567.830 ops/s
Iteration  24: 221869.691 ops/s
Iteration  25: 221813.625 ops/s
Iteration  26: 221187.292 ops/s
Iteration  27: 222394.088 ops/s
Iteration  28: 221283.294 ops/s
Iteration  29: 221812.718 ops/s
Iteration  30: 221990.019 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectTarget":
  221729.139 ±(99.9%) 312.580 ops/s [Average]
  (min, avg, max) = (220554.119, 221729.139, 222480.951), stdev = 467.855
  CI (99.9%): [221416.559, 222041.719] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score     Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_collectTarget  thrpt   30  221729.139 ± 312.580  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 356049.327 ops/s
# Warmup Iteration   2: 644917.414 ops/s
# Warmup Iteration   3: 733157.990 ops/s
# Warmup Iteration   4: 733014.128 ops/s
# Warmup Iteration   5: 734092.440 ops/s
# Warmup Iteration   6: 602320.245 ops/s
# Warmup Iteration   7: 737693.567 ops/s
# Warmup Iteration   8: 738205.299 ops/s
# Warmup Iteration   9: 737780.253 ops/s
# Warmup Iteration  10: 737734.357 ops/s
# Warmup Iteration  11: 737108.674 ops/s
# Warmup Iteration  12: 738346.514 ops/s
# Warmup Iteration  13: 739137.623 ops/s
# Warmup Iteration  14: 736460.552 ops/s
# Warmup Iteration  15: 738142.540 ops/s
# Warmup Iteration  16: 738530.125 ops/s
# Warmup Iteration  17: 738243.410 ops/s
# Warmup Iteration  18: 736118.823 ops/s
# Warmup Iteration  19: 736391.899 ops/s
# Warmup Iteration  20: 738299.014 ops/s
# Warmup Iteration  21: 736524.545 ops/s
# Warmup Iteration  22: 735678.412 ops/s
# Warmup Iteration  23: 737019.999 ops/s
# Warmup Iteration  24: 735574.242 ops/s
# Warmup Iteration  25: 735553.460 ops/s
# Warmup Iteration  26: 737277.626 ops/s
# Warmup Iteration  27: 734550.209 ops/s
# Warmup Iteration  28: 736433.697 ops/s
# Warmup Iteration  29: 736094.065 ops/s
# Warmup Iteration  30: 738892.981 ops/s
Iteration   1: 735854.197 ops/s
Iteration   2: 734712.095 ops/s
Iteration   3: 737544.006 ops/s
Iteration   4: 733364.463 ops/s
Iteration   5: 732460.950 ops/s
Iteration   6: 736941.429 ops/s
Iteration   7: 733217.137 ops/s
Iteration   8: 737008.715 ops/s
Iteration   9: 731191.265 ops/s
Iteration  10: 735636.051 ops/s
Iteration  11: 735352.356 ops/s
Iteration  12: 734602.781 ops/s
Iteration  13: 736897.688 ops/s
Iteration  14: 730710.925 ops/s
Iteration  15: 732901.188 ops/s
Iteration  16: 738009.770 ops/s
Iteration  17: 736680.962 ops/s
Iteration  18: 737545.519 ops/s
Iteration  19: 736312.877 ops/s
Iteration  20: 734632.561 ops/s
Iteration  21: 738459.708 ops/s
Iteration  22: 734566.859 ops/s
Iteration  23: 737572.120 ops/s
Iteration  24: 737516.758 ops/s
Iteration  25: 735849.216 ops/s
Iteration  26: 738484.290 ops/s
Iteration  27: 733898.537 ops/s
Iteration  28: 737061.089 ops/s
Iteration  29: 736923.629 ops/s
Iteration  30: 738800.925 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectWith":
  735690.335 ±(99.9%) 1449.429 ops/s [Average]
  (min, avg, max) = (730710.925, 735690.335, 738800.925), stdev = 2169.437
  CI (99.9%): [734240.906, 737139.764] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_collectWith  thrpt   30  735690.335 ± 1449.429  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 420381.620 ops/s
# Warmup Iteration   2: 640773.653 ops/s
# Warmup Iteration   3: 780513.353 ops/s
# Warmup Iteration   4: 774166.268 ops/s
# Warmup Iteration   5: 781886.004 ops/s
# Warmup Iteration   6: 778841.827 ops/s
# Warmup Iteration   7: 645926.444 ops/s
# Warmup Iteration   8: 776864.576 ops/s
# Warmup Iteration   9: 776445.399 ops/s
# Warmup Iteration  10: 785173.765 ops/s
# Warmup Iteration  11: 776825.299 ops/s
# Warmup Iteration  12: 780970.578 ops/s
# Warmup Iteration  13: 780614.797 ops/s
# Warmup Iteration  14: 780922.692 ops/s
# Warmup Iteration  15: 783825.762 ops/s
# Warmup Iteration  16: 779142.313 ops/s
# Warmup Iteration  17: 776468.424 ops/s
# Warmup Iteration  18: 774042.031 ops/s
# Warmup Iteration  19: 783578.510 ops/s
# Warmup Iteration  20: 782934.466 ops/s
# Warmup Iteration  21: 778063.235 ops/s
# Warmup Iteration  22: 783941.268 ops/s
# Warmup Iteration  23: 778955.976 ops/s
# Warmup Iteration  24: 784094.520 ops/s
# Warmup Iteration  25: 782525.466 ops/s
# Warmup Iteration  26: 782602.921 ops/s
# Warmup Iteration  27: 781921.636 ops/s
# Warmup Iteration  28: 780076.671 ops/s
# Warmup Iteration  29: 784555.742 ops/s
# Warmup Iteration  30: 778358.068 ops/s
Iteration   1: 786750.439 ops/s
Iteration   2: 786215.003 ops/s
Iteration   3: 780437.304 ops/s
Iteration   4: 783398.574 ops/s
Iteration   5: 782920.296 ops/s
Iteration   6: 777295.292 ops/s
Iteration   7: 783945.787 ops/s
Iteration   8: 784851.582 ops/s
Iteration   9: 784253.791 ops/s
Iteration  10: 783276.401 ops/s
Iteration  11: 774621.951 ops/s
Iteration  12: 784608.608 ops/s
Iteration  13: 775254.427 ops/s
Iteration  14: 787796.833 ops/s
Iteration  15: 782727.169 ops/s
Iteration  16: 773679.294 ops/s
Iteration  17: 772080.590 ops/s
Iteration  18: 782265.227 ops/s
Iteration  19: 781923.755 ops/s
Iteration  20: 769186.166 ops/s
Iteration  21: 775776.182 ops/s
Iteration  22: 785875.124 ops/s
Iteration  23: 781499.841 ops/s
Iteration  24: 782664.502 ops/s
Iteration  25: 783334.535 ops/s
Iteration  26: 782489.910 ops/s
Iteration  27: 781501.702 ops/s
Iteration  28: 780974.108 ops/s
Iteration  29: 776841.602 ops/s
Iteration  30: 772654.467 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectWithOccurrences":
  780703.349 ±(99.9%) 3236.154 ops/s [Average]
  (min, avg, max) = (769186.166, 780703.349, 787796.833), stdev = 4843.723
  CI (99.9%): [777467.195, 783939.503] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_collectWithOccurrences  thrpt   30  780703.349 ± 3236.154  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 91661.002 ops/s
# Warmup Iteration   2: 162000.444 ops/s
# Warmup Iteration   3: 201072.329 ops/s
# Warmup Iteration   4: 202778.712 ops/s
# Warmup Iteration   5: 202290.253 ops/s
# Warmup Iteration   6: 172003.915 ops/s
# Warmup Iteration   7: 195944.775 ops/s
# Warmup Iteration   8: 202041.163 ops/s
# Warmup Iteration   9: 202620.663 ops/s
# Warmup Iteration  10: 202696.453 ops/s
# Warmup Iteration  11: 202952.836 ops/s
# Warmup Iteration  12: 202476.546 ops/s
# Warmup Iteration  13: 201769.373 ops/s
# Warmup Iteration  14: 202290.605 ops/s
# Warmup Iteration  15: 202690.019 ops/s
# Warmup Iteration  16: 202619.504 ops/s
# Warmup Iteration  17: 202494.279 ops/s
# Warmup Iteration  18: 202254.390 ops/s
# Warmup Iteration  19: 202585.833 ops/s
# Warmup Iteration  20: 202147.693 ops/s
# Warmup Iteration  21: 201116.266 ops/s
# Warmup Iteration  22: 202298.741 ops/s
# Warmup Iteration  23: 201781.500 ops/s
# Warmup Iteration  24: 202285.848 ops/s
# Warmup Iteration  25: 202183.218 ops/s
# Warmup Iteration  26: 202098.213 ops/s
# Warmup Iteration  27: 202011.497 ops/s
# Warmup Iteration  28: 202203.437 ops/s
# Warmup Iteration  29: 202065.303 ops/s
# Warmup Iteration  30: 201629.638 ops/s
Iteration   1: 202500.896 ops/s
Iteration   2: 202147.184 ops/s
Iteration   3: 202749.103 ops/s
Iteration   4: 202517.682 ops/s
Iteration   5: 202860.123 ops/s
Iteration   6: 202203.517 ops/s
Iteration   7: 202417.137 ops/s
Iteration   8: 202560.744 ops/s
Iteration   9: 201628.992 ops/s
Iteration  10: 202770.174 ops/s
Iteration  11: 202345.205 ops/s
Iteration  12: 202478.752 ops/s
Iteration  13: 202221.049 ops/s
Iteration  14: 203039.270 ops/s
Iteration  15: 202560.487 ops/s
Iteration  16: 202711.747 ops/s
Iteration  17: 202152.091 ops/s
Iteration  18: 203106.989 ops/s
Iteration  19: 202002.711 ops/s
Iteration  20: 203039.094 ops/s
Iteration  21: 202500.083 ops/s
Iteration  22: 202659.354 ops/s
Iteration  23: 200873.764 ops/s
Iteration  24: 202984.139 ops/s
Iteration  25: 202280.494 ops/s
Iteration  26: 202684.989 ops/s
Iteration  27: 202753.506 ops/s
Iteration  28: 202607.367 ops/s
Iteration  29: 202325.446 ops/s
Iteration  30: 201512.793 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collectWith_target":
  202439.829 ±(99.9%) 320.527 ops/s [Average]
  (min, avg, max) = (200873.764, 202439.829, 203106.989), stdev = 479.749
  CI (99.9%): [202119.303, 202760.356] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score     Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_collectWith_target  thrpt   30  202439.829 ± 320.527  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collect_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collect_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 677272.277 ops/s
# Warmup Iteration   2: 1064643.351 ops/s
# Warmup Iteration   3: 1248622.374 ops/s
# Warmup Iteration   4: 1255159.178 ops/s
# Warmup Iteration   5: 1255001.210 ops/s
# Warmup Iteration   6: 1249909.679 ops/s
# Warmup Iteration   7: 1024195.988 ops/s
# Warmup Iteration   8: 1255351.398 ops/s
# Warmup Iteration   9: 1253664.472 ops/s
# Warmup Iteration  10: 1252678.494 ops/s
# Warmup Iteration  11: 1258010.156 ops/s
# Warmup Iteration  12: 1255860.248 ops/s
# Warmup Iteration  13: 1256756.165 ops/s
# Warmup Iteration  14: 1258298.471 ops/s
# Warmup Iteration  15: 1251274.419 ops/s
# Warmup Iteration  16: 1257555.233 ops/s
# Warmup Iteration  17: 1255438.041 ops/s
# Warmup Iteration  18: 1251883.389 ops/s
# Warmup Iteration  19: 1254639.964 ops/s
# Warmup Iteration  20: 1254687.337 ops/s
# Warmup Iteration  21: 1256281.941 ops/s
# Warmup Iteration  22: 1258442.831 ops/s
# Warmup Iteration  23: 1258319.543 ops/s
# Warmup Iteration  24: 1256435.877 ops/s
# Warmup Iteration  25: 1257027.876 ops/s
# Warmup Iteration  26: 1255639.619 ops/s
# Warmup Iteration  27: 1254705.849 ops/s
# Warmup Iteration  28: 1251437.550 ops/s
# Warmup Iteration  29: 1255801.847 ops/s
# Warmup Iteration  30: 1251248.624 ops/s
Iteration   1: 1257420.753 ops/s
Iteration   2: 1248595.644 ops/s
Iteration   3: 1254868.094 ops/s
Iteration   4: 1251335.919 ops/s
Iteration   5: 1243484.686 ops/s
Iteration   6: 1253488.487 ops/s
Iteration   7: 1252132.760 ops/s
Iteration   8: 1249003.325 ops/s
Iteration   9: 1253046.533 ops/s
Iteration  10: 1258881.301 ops/s
Iteration  11: 1256545.354 ops/s
Iteration  12: 1257543.304 ops/s
Iteration  13: 1257726.682 ops/s
Iteration  14: 1255136.665 ops/s
Iteration  15: 1258421.461 ops/s
Iteration  16: 1253215.214 ops/s
Iteration  17: 1253780.259 ops/s
Iteration  18: 1255764.908 ops/s
Iteration  19: 1249992.109 ops/s
Iteration  20: 1251080.299 ops/s
Iteration  21: 1254131.608 ops/s
Iteration  22: 1254454.497 ops/s
Iteration  23: 1254043.540 ops/s
Iteration  24: 1249146.002 ops/s
Iteration  25: 1247126.553 ops/s
Iteration  26: 1251512.670 ops/s
Iteration  27: 1255799.544 ops/s
Iteration  28: 1250999.993 ops/s
Iteration  29: 1253418.917 ops/s
Iteration  30: 1248714.752 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_collect_target":
  1253027.061 ±(99.9%) 2431.944 ops/s [Average]
  (min, avg, max) = (1243484.686, 1253027.061, 1258881.301), stdev = 3640.020
  CI (99.9%): [1250595.117, 1255459.005] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_collect_target  thrpt   30  1253027.061 ± 2431.944  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 838415.129 ops/s
# Warmup Iteration   2: 1333215.406 ops/s
# Warmup Iteration   3: 1584608.702 ops/s
# Warmup Iteration   4: 1590193.734 ops/s
# Warmup Iteration   5: 1592872.858 ops/s
# Warmup Iteration   6: 1546729.567 ops/s
# Warmup Iteration   7: 1344079.028 ops/s
# Warmup Iteration   8: 1589166.590 ops/s
# Warmup Iteration   9: 1593835.813 ops/s
# Warmup Iteration  10: 1594882.413 ops/s
# Warmup Iteration  11: 1590279.163 ops/s
# Warmup Iteration  12: 1592824.592 ops/s
# Warmup Iteration  13: 1583103.361 ops/s
# Warmup Iteration  14: 1595716.017 ops/s
# Warmup Iteration  15: 1593174.466 ops/s
# Warmup Iteration  16: 1592940.270 ops/s
# Warmup Iteration  17: 1591747.518 ops/s
# Warmup Iteration  18: 1594355.135 ops/s
# Warmup Iteration  19: 1594750.738 ops/s
# Warmup Iteration  20: 1591087.877 ops/s
# Warmup Iteration  21: 1592370.200 ops/s
# Warmup Iteration  22: 1592796.775 ops/s
# Warmup Iteration  23: 1592995.949 ops/s
# Warmup Iteration  24: 1591629.614 ops/s
# Warmup Iteration  25: 1593943.771 ops/s
# Warmup Iteration  26: 1596936.058 ops/s
# Warmup Iteration  27: 1590450.829 ops/s
# Warmup Iteration  28: 1598078.382 ops/s
# Warmup Iteration  29: 1592054.677 ops/s
# Warmup Iteration  30: 1590452.235 ops/s
Iteration   1: 1586542.909 ops/s
Iteration   2: 1592316.114 ops/s
Iteration   3: 1599643.590 ops/s
Iteration   4: 1588663.263 ops/s
Iteration   5: 1596504.010 ops/s
Iteration   6: 1599974.342 ops/s
Iteration   7: 1584587.965 ops/s
Iteration   8: 1595357.412 ops/s
Iteration   9: 1601175.181 ops/s
Iteration  10: 1585147.689 ops/s
Iteration  11: 1587158.025 ops/s
Iteration  12: 1597057.122 ops/s
Iteration  13: 1595975.938 ops/s
Iteration  14: 1584372.568 ops/s
Iteration  15: 1600353.217 ops/s
Iteration  16: 1596324.874 ops/s
Iteration  17: 1588328.566 ops/s
Iteration  18: 1589914.031 ops/s
Iteration  19: 1603353.701 ops/s
Iteration  20: 1595934.279 ops/s
Iteration  21: 1587459.727 ops/s
Iteration  22: 1593922.462 ops/s
Iteration  23: 1586863.066 ops/s
Iteration  24: 1589808.381 ops/s
Iteration  25: 1598076.517 ops/s
Iteration  26: 1599467.618 ops/s
Iteration  27: 1595417.628 ops/s
Iteration  28: 1593834.457 ops/s
Iteration  29: 1593660.981 ops/s
Iteration  30: 1584785.499 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_contains":
  1593066.038 ±(99.9%) 3800.364 ops/s [Average]
  (min, avg, max) = (1584372.568, 1593066.038, 1603353.701), stdev = 5688.207
  CI (99.9%): [1589265.673, 1596866.402] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_contains  thrpt   30  1593066.038 ± 3800.364  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 547683.821 ops/s
# Warmup Iteration   2: 835324.015 ops/s
# Warmup Iteration   3: 1011817.846 ops/s
# Warmup Iteration   4: 1019355.643 ops/s
# Warmup Iteration   5: 1018729.129 ops/s
# Warmup Iteration   6: 1019442.987 ops/s
# Warmup Iteration   7: 824252.324 ops/s
# Warmup Iteration   8: 1022574.875 ops/s
# Warmup Iteration   9: 1024929.365 ops/s
# Warmup Iteration  10: 1021395.731 ops/s
# Warmup Iteration  11: 1023503.796 ops/s
# Warmup Iteration  12: 1023487.508 ops/s
# Warmup Iteration  13: 1024877.603 ops/s
# Warmup Iteration  14: 1020545.992 ops/s
# Warmup Iteration  15: 1026804.406 ops/s
# Warmup Iteration  16: 1021789.288 ops/s
# Warmup Iteration  17: 1020814.920 ops/s
# Warmup Iteration  18: 1024351.279 ops/s
# Warmup Iteration  19: 1021077.040 ops/s
# Warmup Iteration  20: 1025476.862 ops/s
# Warmup Iteration  21: 1024959.323 ops/s
# Warmup Iteration  22: 1022179.361 ops/s
# Warmup Iteration  23: 1024104.855 ops/s
# Warmup Iteration  24: 1021737.861 ops/s
# Warmup Iteration  25: 1023988.507 ops/s
# Warmup Iteration  26: 1017748.937 ops/s
# Warmup Iteration  27: 1021668.944 ops/s
# Warmup Iteration  28: 1021560.759 ops/s
# Warmup Iteration  29: 1022422.171 ops/s
# Warmup Iteration  30: 1023923.393 ops/s
Iteration   1: 1026074.095 ops/s
Iteration   2: 1019662.392 ops/s
Iteration   3: 1021740.474 ops/s
Iteration   4: 1023411.389 ops/s
Iteration   5: 1024382.467 ops/s
Iteration   6: 1025039.619 ops/s
Iteration   7: 1024098.808 ops/s
Iteration   8: 1027313.681 ops/s
Iteration   9: 1022614.422 ops/s
Iteration  10: 1023043.043 ops/s
Iteration  11: 1014897.636 ops/s
Iteration  12: 1021776.128 ops/s
Iteration  13: 1018829.450 ops/s
Iteration  14: 1018314.449 ops/s
Iteration  15: 1019020.876 ops/s
Iteration  16: 1022457.927 ops/s
Iteration  17: 1027492.999 ops/s
Iteration  18: 1024066.380 ops/s
Iteration  19: 1021667.939 ops/s
Iteration  20: 1026404.291 ops/s
Iteration  21: 1027560.920 ops/s
Iteration  22: 1023521.829 ops/s
Iteration  23: 1025057.693 ops/s
Iteration  24: 1027782.317 ops/s
Iteration  25: 1024408.101 ops/s
Iteration  26: 1020552.617 ops/s
Iteration  27: 1023898.337 ops/s
Iteration  28: 1018876.072 ops/s
Iteration  29: 1023570.498 ops/s
Iteration  30: 1024581.479 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_containsAllArray":
  1023070.611 ±(99.9%) 2084.645 ops/s [Average]
  (min, avg, max) = (1014897.636, 1023070.611, 1027782.317), stdev = 3120.199
  CI (99.9%): [1020985.966, 1025155.256] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_containsAllArray  thrpt   30  1023070.611 ± 2084.645  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_containsAllCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_containsAllCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1795501.641 ops/s
# Warmup Iteration   2: 3252394.993 ops/s
# Warmup Iteration   3: 3751205.828 ops/s
# Warmup Iteration   4: 3777185.781 ops/s
# Warmup Iteration   5: 3785589.417 ops/s
# Warmup Iteration   6: 3053039.959 ops/s
# Warmup Iteration   7: 3772873.655 ops/s
# Warmup Iteration   8: 3772156.426 ops/s
# Warmup Iteration   9: 3772613.289 ops/s
# Warmup Iteration  10: 3786479.717 ops/s
# Warmup Iteration  11: 3777399.572 ops/s
# Warmup Iteration  12: 3765389.068 ops/s
# Warmup Iteration  13: 3774948.359 ops/s
# Warmup Iteration  14: 3776296.630 ops/s
# Warmup Iteration  15: 3769441.552 ops/s
# Warmup Iteration  16: 3769079.224 ops/s
# Warmup Iteration  17: 3779671.149 ops/s
# Warmup Iteration  18: 3776321.051 ops/s
# Warmup Iteration  19: 3772481.019 ops/s
# Warmup Iteration  20: 3780310.508 ops/s
# Warmup Iteration  21: 3781838.599 ops/s
# Warmup Iteration  22: 3787430.420 ops/s
# Warmup Iteration  23: 3770637.919 ops/s
# Warmup Iteration  24: 3790374.177 ops/s
# Warmup Iteration  25: 3793494.606 ops/s
# Warmup Iteration  26: 3778318.383 ops/s
# Warmup Iteration  27: 3786799.345 ops/s
# Warmup Iteration  28: 3784790.576 ops/s
# Warmup Iteration  29: 3782348.409 ops/s
# Warmup Iteration  30: 3781147.315 ops/s
Iteration   1: 3791218.336 ops/s
Iteration   2: 3787700.456 ops/s
Iteration   3: 3778937.222 ops/s
Iteration   4: 3783346.742 ops/s
Iteration   5: 3787203.908 ops/s
Iteration   6: 3787631.345 ops/s
Iteration   7: 3781605.868 ops/s
Iteration   8: 3780703.012 ops/s
Iteration   9: 3783357.952 ops/s
Iteration  10: 3776942.493 ops/s
Iteration  11: 3792374.049 ops/s
Iteration  12: 3787598.728 ops/s
Iteration  13: 3784057.184 ops/s
Iteration  14: 3788603.983 ops/s
Iteration  15: 3776715.398 ops/s
Iteration  16: 3789605.116 ops/s
Iteration  17: 3783408.666 ops/s
Iteration  18: 3781451.964 ops/s
Iteration  19: 3791249.303 ops/s
Iteration  20: 3784231.677 ops/s
Iteration  21: 3783332.082 ops/s
Iteration  22: 3764255.211 ops/s
Iteration  23: 3756777.653 ops/s
Iteration  24: 3789110.758 ops/s
Iteration  25: 3791465.162 ops/s
Iteration  26: 3768946.329 ops/s
Iteration  27: 3760437.028 ops/s
Iteration  28: 3782689.825 ops/s
Iteration  29: 3741895.689 ops/s
Iteration  30: 3794107.922 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_containsAllCollection":
  3781032.035 ±(99.9%) 7883.543 ops/s [Average]
  (min, avg, max) = (3741895.689, 3781032.035, 3794107.922), stdev = 11799.717
  CI (99.9%): [3773148.492, 3788915.578] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_containsAllCollection  thrpt   30  3781032.035 ± 7883.543  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 516151.513 ops/s
# Warmup Iteration   2: 744420.473 ops/s
# Warmup Iteration   3: 947930.198 ops/s
# Warmup Iteration   4: 939038.212 ops/s
# Warmup Iteration   5: 948886.771 ops/s
# Warmup Iteration   6: 943211.690 ops/s
# Warmup Iteration   7: 807612.214 ops/s
# Warmup Iteration   8: 903045.015 ops/s
# Warmup Iteration   9: 950138.939 ops/s
# Warmup Iteration  10: 949411.760 ops/s
# Warmup Iteration  11: 948786.256 ops/s
# Warmup Iteration  12: 948867.418 ops/s
# Warmup Iteration  13: 951015.411 ops/s
# Warmup Iteration  14: 946587.681 ops/s
# Warmup Iteration  15: 947420.769 ops/s
# Warmup Iteration  16: 949568.494 ops/s
# Warmup Iteration  17: 947458.920 ops/s
# Warmup Iteration  18: 951144.917 ops/s
# Warmup Iteration  19: 948920.884 ops/s
# Warmup Iteration  20: 947305.515 ops/s
# Warmup Iteration  21: 944858.500 ops/s
# Warmup Iteration  22: 953084.533 ops/s
# Warmup Iteration  23: 944658.072 ops/s
# Warmup Iteration  24: 947076.936 ops/s
# Warmup Iteration  25: 949906.989 ops/s
# Warmup Iteration  26: 946183.285 ops/s
# Warmup Iteration  27: 948999.681 ops/s
# Warmup Iteration  28: 948089.185 ops/s
# Warmup Iteration  29: 948915.582 ops/s
# Warmup Iteration  30: 948166.153 ops/s
Iteration   1: 947773.074 ops/s
Iteration   2: 945752.062 ops/s
Iteration   3: 952688.884 ops/s
Iteration   4: 945964.627 ops/s
Iteration   5: 946751.311 ops/s
Iteration   6: 952684.450 ops/s
Iteration   7: 949067.130 ops/s
Iteration   8: 948024.979 ops/s
Iteration   9: 950354.840 ops/s
Iteration  10: 946572.421 ops/s
Iteration  11: 948255.495 ops/s
Iteration  12: 949284.226 ops/s
Iteration  13: 945984.939 ops/s
Iteration  14: 952723.291 ops/s
Iteration  15: 948541.420 ops/s
Iteration  16: 952207.797 ops/s
Iteration  17: 946091.837 ops/s
Iteration  18: 949295.793 ops/s
Iteration  19: 951047.797 ops/s
Iteration  20: 947263.632 ops/s
Iteration  21: 947045.114 ops/s
Iteration  22: 947088.545 ops/s
Iteration  23: 949448.546 ops/s
Iteration  24: 937113.711 ops/s
Iteration  25: 949962.832 ops/s
Iteration  26: 947051.813 ops/s
Iteration  27: 950012.083 ops/s
Iteration  28: 939270.503 ops/s
Iteration  29: 937856.940 ops/s
Iteration  30: 949213.261 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_containsAllIterable":
  947679.778 ±(99.9%) 2582.611 ops/s [Average]
  (min, avg, max) = (937113.711, 947679.778, 952723.291), stdev = 3865.531
  CI (99.9%): [945097.167, 950262.389] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_containsAllIterable  thrpt   30  947679.778 ± 2582.611  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_containsAnyCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_containsAnyCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 47087.199 ops/s
# Warmup Iteration   2: 68244.489 ops/s
# Warmup Iteration   3: 81894.219 ops/s
# Warmup Iteration   4: 81497.820 ops/s
# Warmup Iteration   5: 82229.021 ops/s
# Warmup Iteration   6: 82066.312 ops/s
# Warmup Iteration   7: 79675.220 ops/s
# Warmup Iteration   8: 71764.943 ops/s
# Warmup Iteration   9: 82238.702 ops/s
# Warmup Iteration  10: 81949.950 ops/s
# Warmup Iteration  11: 82051.569 ops/s
# Warmup Iteration  12: 82130.028 ops/s
# Warmup Iteration  13: 81918.100 ops/s
# Warmup Iteration  14: 82078.128 ops/s
# Warmup Iteration  15: 82283.779 ops/s
# Warmup Iteration  16: 82046.413 ops/s
# Warmup Iteration  17: 82393.148 ops/s
# Warmup Iteration  18: 81936.012 ops/s
# Warmup Iteration  19: 82002.745 ops/s
# Warmup Iteration  20: 82193.963 ops/s
# Warmup Iteration  21: 81527.299 ops/s
# Warmup Iteration  22: 81811.516 ops/s
# Warmup Iteration  23: 82361.408 ops/s
# Warmup Iteration  24: 82139.439 ops/s
# Warmup Iteration  25: 82229.012 ops/s
# Warmup Iteration  26: 81972.848 ops/s
# Warmup Iteration  27: 81843.641 ops/s
# Warmup Iteration  28: 82290.757 ops/s
# Warmup Iteration  29: 82304.662 ops/s
# Warmup Iteration  30: 82081.668 ops/s
Iteration   1: 82115.823 ops/s
Iteration   2: 82475.482 ops/s
Iteration   3: 82336.726 ops/s
Iteration   4: 82060.405 ops/s
Iteration   5: 82018.302 ops/s
Iteration   6: 82066.917 ops/s
Iteration   7: 82395.104 ops/s
Iteration   8: 82277.307 ops/s
Iteration   9: 82140.602 ops/s
Iteration  10: 82235.437 ops/s
Iteration  11: 82091.869 ops/s
Iteration  12: 82120.054 ops/s
Iteration  13: 82104.726 ops/s
Iteration  14: 82068.648 ops/s
Iteration  15: 82334.580 ops/s
Iteration  16: 81931.636 ops/s
Iteration  17: 82394.117 ops/s
Iteration  18: 81607.094 ops/s
Iteration  19: 81570.619 ops/s
Iteration  20: 82263.236 ops/s
Iteration  21: 81818.919 ops/s
Iteration  22: 82276.293 ops/s
Iteration  23: 82191.777 ops/s
Iteration  24: 82075.662 ops/s
Iteration  25: 82273.449 ops/s
Iteration  26: 82474.788 ops/s
Iteration  27: 82435.020 ops/s
Iteration  28: 81821.732 ops/s
Iteration  29: 82138.823 ops/s
Iteration  30: 82133.955 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_containsAnyCollection":
  82141.637 ±(99.9%) 151.761 ops/s [Average]
  (min, avg, max) = (81570.619, 82141.637, 82475.482), stdev = 227.149
  CI (99.9%): [81989.876, 82293.398] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt      Score     Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_containsAnyCollection  thrpt   30  82141.637 ± 151.761  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_containsAnyIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_containsAnyIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 45625.023 ops/s
# Warmup Iteration   2: 64354.649 ops/s
# Warmup Iteration   3: 77573.429 ops/s
# Warmup Iteration   4: 77197.071 ops/s
# Warmup Iteration   5: 77528.721 ops/s
# Warmup Iteration   6: 77809.981 ops/s
# Warmup Iteration   7: 77405.316 ops/s
# Warmup Iteration   8: 65668.799 ops/s
# Warmup Iteration   9: 77792.302 ops/s
# Warmup Iteration  10: 77716.942 ops/s
# Warmup Iteration  11: 77806.976 ops/s
# Warmup Iteration  12: 78076.487 ops/s
# Warmup Iteration  13: 77803.152 ops/s
# Warmup Iteration  14: 77850.275 ops/s
# Warmup Iteration  15: 77117.451 ops/s
# Warmup Iteration  16: 77732.196 ops/s
# Warmup Iteration  17: 77430.126 ops/s
# Warmup Iteration  18: 77893.269 ops/s
# Warmup Iteration  19: 77041.058 ops/s
# Warmup Iteration  20: 77626.209 ops/s
# Warmup Iteration  21: 77495.849 ops/s
# Warmup Iteration  22: 77666.506 ops/s
# Warmup Iteration  23: 77129.999 ops/s
# Warmup Iteration  24: 77799.070 ops/s
# Warmup Iteration  25: 77462.520 ops/s
# Warmup Iteration  26: 77486.965 ops/s
# Warmup Iteration  27: 77145.465 ops/s
# Warmup Iteration  28: 77483.825 ops/s
# Warmup Iteration  29: 77795.878 ops/s
# Warmup Iteration  30: 77669.617 ops/s
Iteration   1: 77569.887 ops/s
Iteration   2: 77418.575 ops/s
Iteration   3: 77626.006 ops/s
Iteration   4: 77001.591 ops/s
Iteration   5: 77897.230 ops/s
Iteration   6: 77228.429 ops/s
Iteration   7: 77098.325 ops/s
Iteration   8: 77598.255 ops/s
Iteration   9: 77523.937 ops/s
Iteration  10: 77791.277 ops/s
Iteration  11: 77717.555 ops/s
Iteration  12: 77796.122 ops/s
Iteration  13: 77471.260 ops/s
Iteration  14: 77325.919 ops/s
Iteration  15: 77820.490 ops/s
Iteration  16: 77622.540 ops/s
Iteration  17: 77561.505 ops/s
Iteration  18: 77634.624 ops/s
Iteration  19: 77013.420 ops/s
Iteration  20: 77644.395 ops/s
Iteration  21: 77654.455 ops/s
Iteration  22: 77502.413 ops/s
Iteration  23: 77774.092 ops/s
Iteration  24: 77699.004 ops/s
Iteration  25: 77771.664 ops/s
Iteration  26: 77861.848 ops/s
Iteration  27: 77738.078 ops/s
Iteration  28: 77696.183 ops/s
Iteration  29: 77517.220 ops/s
Iteration  30: 77559.625 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_containsAnyIterable":
  77571.197 ±(99.9%) 157.784 ops/s [Average]
  (min, avg, max) = (77001.591, 77571.197, 77897.230), stdev = 236.164
  CI (99.9%): [77413.413, 77728.982] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt      Score     Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_containsAnyIterable  thrpt   30  77571.197 ± 157.784  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_containsBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_containsBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 668757.198 ops/s
# Warmup Iteration   2: 702919.696 ops/s
# Warmup Iteration   3: 874988.706 ops/s
# Warmup Iteration   4: 919152.217 ops/s
# Warmup Iteration   5: 923357.296 ops/s
# Warmup Iteration   6: 913748.562 ops/s
# Warmup Iteration   7: 914609.218 ops/s
# Warmup Iteration   8: 916832.173 ops/s
# Warmup Iteration   9: 918532.482 ops/s
# Warmup Iteration  10: 921866.200 ops/s
# Warmup Iteration  11: 921493.205 ops/s
# Warmup Iteration  12: 924680.995 ops/s
# Warmup Iteration  13: 771329.005 ops/s
# Warmup Iteration  14: 921543.689 ops/s
# Warmup Iteration  15: 921743.155 ops/s
# Warmup Iteration  16: 920394.452 ops/s
# Warmup Iteration  17: 973920.911 ops/s
# Warmup Iteration  18: 970751.468 ops/s
# Warmup Iteration  19: 971584.973 ops/s
# Warmup Iteration  20: 970044.068 ops/s
# Warmup Iteration  21: 963024.213 ops/s
# Warmup Iteration  22: 973725.531 ops/s
# Warmup Iteration  23: 972531.432 ops/s
# Warmup Iteration  24: 970044.080 ops/s
# Warmup Iteration  25: 972762.421 ops/s
# Warmup Iteration  26: 970577.527 ops/s
# Warmup Iteration  27: 969661.561 ops/s
# Warmup Iteration  28: 972302.800 ops/s
# Warmup Iteration  29: 973838.710 ops/s
# Warmup Iteration  30: 972714.719 ops/s
Iteration   1: 971795.183 ops/s
Iteration   2: 969445.695 ops/s
Iteration   3: 967627.894 ops/s
Iteration   4: 969654.604 ops/s
Iteration   5: 966787.983 ops/s
Iteration   6: 973638.339 ops/s
Iteration   7: 972259.232 ops/s
Iteration   8: 968706.850 ops/s
Iteration   9: 963839.096 ops/s
Iteration  10: 970090.086 ops/s
Iteration  11: 966457.063 ops/s
Iteration  12: 970277.279 ops/s
Iteration  13: 967855.299 ops/s
Iteration  14: 960228.107 ops/s
Iteration  15: 969697.338 ops/s
Iteration  16: 974376.866 ops/s
Iteration  17: 970906.394 ops/s
Iteration  18: 973924.240 ops/s
Iteration  19: 973676.154 ops/s
Iteration  20: 968824.363 ops/s
Iteration  21: 973318.106 ops/s
Iteration  22: 968998.494 ops/s
Iteration  23: 972821.864 ops/s
Iteration  24: 974915.357 ops/s
Iteration  25: 970221.856 ops/s
Iteration  26: 969238.591 ops/s
Iteration  27: 970685.578 ops/s
Iteration  28: 976856.692 ops/s
Iteration  29: 972445.401 ops/s
Iteration  30: 964914.273 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_containsBy":
  970149.476 ±(99.9%) 2367.281 ops/s [Average]
  (min, avg, max) = (960228.107, 970149.476, 976856.692), stdev = 3543.235
  CI (99.9%): [967782.195, 972516.757] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_containsBy  thrpt   30  970149.476 ± 2367.281  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_containsNoneCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_containsNoneCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 48313.305 ops/s
# Warmup Iteration   2: 68957.685 ops/s
# Warmup Iteration   3: 81860.353 ops/s
# Warmup Iteration   4: 81504.200 ops/s
# Warmup Iteration   5: 82071.043 ops/s
# Warmup Iteration   6: 82023.024 ops/s
# Warmup Iteration   7: 78612.465 ops/s
# Warmup Iteration   8: 72979.660 ops/s
# Warmup Iteration   9: 81860.613 ops/s
# Warmup Iteration  10: 82165.732 ops/s
# Warmup Iteration  11: 82035.975 ops/s
# Warmup Iteration  12: 81996.544 ops/s
# Warmup Iteration  13: 81457.832 ops/s
# Warmup Iteration  14: 81605.921 ops/s
# Warmup Iteration  15: 81665.860 ops/s
# Warmup Iteration  16: 81494.964 ops/s
# Warmup Iteration  17: 82005.003 ops/s
# Warmup Iteration  18: 82038.168 ops/s
# Warmup Iteration  19: 81750.850 ops/s
# Warmup Iteration  20: 81913.195 ops/s
# Warmup Iteration  21: 81966.967 ops/s
# Warmup Iteration  22: 82282.963 ops/s
# Warmup Iteration  23: 81899.553 ops/s
# Warmup Iteration  24: 82165.655 ops/s
# Warmup Iteration  25: 81285.889 ops/s
# Warmup Iteration  26: 82086.510 ops/s
# Warmup Iteration  27: 81806.947 ops/s
# Warmup Iteration  28: 82035.730 ops/s
# Warmup Iteration  29: 81830.189 ops/s
# Warmup Iteration  30: 81756.509 ops/s
Iteration   1: 82291.296 ops/s
Iteration   2: 81871.029 ops/s
Iteration   3: 82045.937 ops/s
Iteration   4: 82127.733 ops/s
Iteration   5: 81689.948 ops/s
Iteration   6: 81974.728 ops/s
Iteration   7: 82150.684 ops/s
Iteration   8: 81640.930 ops/s
Iteration   9: 82342.494 ops/s
Iteration  10: 81979.619 ops/s
Iteration  11: 82078.134 ops/s
Iteration  12: 81988.963 ops/s
Iteration  13: 81627.395 ops/s
Iteration  14: 81664.080 ops/s
Iteration  15: 81959.783 ops/s
Iteration  16: 81950.391 ops/s
Iteration  17: 81849.746 ops/s
Iteration  18: 81810.326 ops/s
Iteration  19: 81871.154 ops/s
Iteration  20: 81799.947 ops/s
Iteration  21: 78128.486 ops/s
Iteration  22: 81959.882 ops/s
Iteration  23: 81907.470 ops/s
Iteration  24: 81537.005 ops/s
Iteration  25: 82474.442 ops/s
Iteration  26: 81780.196 ops/s
Iteration  27: 82139.278 ops/s
Iteration  28: 81931.156 ops/s
Iteration  29: 81972.013 ops/s
Iteration  30: 81610.706 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_containsNoneCollection":
  81805.165 ±(99.9%) 486.669 ops/s [Average]
  (min, avg, max) = (78128.486, 81805.165, 82474.442), stdev = 728.423
  CI (99.9%): [81318.496, 82291.834] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt      Score     Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_containsNoneCollection  thrpt   30  81805.165 ± 486.669  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_containsNoneIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_containsNoneIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 46524.354 ops/s
# Warmup Iteration   2: 65502.362 ops/s
# Warmup Iteration   3: 79457.062 ops/s
# Warmup Iteration   4: 78737.712 ops/s
# Warmup Iteration   5: 79076.808 ops/s
# Warmup Iteration   6: 79379.523 ops/s
# Warmup Iteration   7: 79320.808 ops/s
# Warmup Iteration   8: 67051.994 ops/s
# Warmup Iteration   9: 79337.599 ops/s
# Warmup Iteration  10: 79482.632 ops/s
# Warmup Iteration  11: 78495.501 ops/s
# Warmup Iteration  12: 79184.716 ops/s
# Warmup Iteration  13: 79240.773 ops/s
# Warmup Iteration  14: 79264.713 ops/s
# Warmup Iteration  15: 79277.457 ops/s
# Warmup Iteration  16: 79468.392 ops/s
# Warmup Iteration  17: 79283.559 ops/s
# Warmup Iteration  18: 79373.698 ops/s
# Warmup Iteration  19: 79371.462 ops/s
# Warmup Iteration  20: 79158.833 ops/s
# Warmup Iteration  21: 79357.508 ops/s
# Warmup Iteration  22: 79191.281 ops/s
# Warmup Iteration  23: 78987.860 ops/s
# Warmup Iteration  24: 79412.699 ops/s
# Warmup Iteration  25: 79410.876 ops/s
# Warmup Iteration  26: 79264.435 ops/s
# Warmup Iteration  27: 79438.467 ops/s
# Warmup Iteration  28: 79357.757 ops/s
# Warmup Iteration  29: 79343.643 ops/s
# Warmup Iteration  30: 79307.990 ops/s
Iteration   1: 79345.371 ops/s
Iteration   2: 79237.985 ops/s
Iteration   3: 79261.391 ops/s
Iteration   4: 79283.779 ops/s
Iteration   5: 79347.112 ops/s
Iteration   6: 79590.376 ops/s
Iteration   7: 79374.240 ops/s
Iteration   8: 79510.554 ops/s
Iteration   9: 79536.272 ops/s
Iteration  10: 79322.580 ops/s
Iteration  11: 79408.211 ops/s
Iteration  12: 79481.692 ops/s
Iteration  13: 79380.396 ops/s
Iteration  14: 79472.257 ops/s
Iteration  15: 79308.516 ops/s
Iteration  16: 79358.794 ops/s
Iteration  17: 78948.179 ops/s
Iteration  18: 78548.895 ops/s
Iteration  19: 79399.798 ops/s
Iteration  20: 78041.935 ops/s
Iteration  21: 79352.348 ops/s
Iteration  22: 79626.752 ops/s
Iteration  23: 79299.481 ops/s
Iteration  24: 79493.459 ops/s
Iteration  25: 78661.004 ops/s
Iteration  26: 79526.006 ops/s
Iteration  27: 79439.018 ops/s
Iteration  28: 79296.167 ops/s
Iteration  29: 79598.698 ops/s
Iteration  30: 79010.315 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_containsNoneIterable":
  79282.053 ±(99.9%) 227.231 ops/s [Average]
  (min, avg, max) = (78041.935, 79282.053, 79626.752), stdev = 340.108
  CI (99.9%): [79054.822, 79509.283] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt      Score     Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_containsNoneIterable  thrpt   30  79282.053 ± 227.231  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 886565.639 ops/s
# Warmup Iteration   2: 1494270.445 ops/s
# Warmup Iteration   3: 1741998.344 ops/s
# Warmup Iteration   4: 1759114.423 ops/s
# Warmup Iteration   5: 1754740.077 ops/s
# Warmup Iteration   6: 1416070.252 ops/s
# Warmup Iteration   7: 1761156.358 ops/s
# Warmup Iteration   8: 1762524.681 ops/s
# Warmup Iteration   9: 1752669.508 ops/s
# Warmup Iteration  10: 1757699.927 ops/s
# Warmup Iteration  11: 1756291.081 ops/s
# Warmup Iteration  12: 1758081.482 ops/s
# Warmup Iteration  13: 1754807.692 ops/s
# Warmup Iteration  14: 1758628.551 ops/s
# Warmup Iteration  15: 1760402.008 ops/s
# Warmup Iteration  16: 1755222.684 ops/s
# Warmup Iteration  17: 1732346.879 ops/s
# Warmup Iteration  18: 1738897.251 ops/s
# Warmup Iteration  19: 1731926.403 ops/s
# Warmup Iteration  20: 1737569.025 ops/s
# Warmup Iteration  21: 1736767.200 ops/s
# Warmup Iteration  22: 1738174.153 ops/s
# Warmup Iteration  23: 1735174.196 ops/s
# Warmup Iteration  24: 1743412.700 ops/s
# Warmup Iteration  25: 1738682.901 ops/s
# Warmup Iteration  26: 1735883.755 ops/s
# Warmup Iteration  27: 1733121.279 ops/s
# Warmup Iteration  28: 1740553.448 ops/s
# Warmup Iteration  29: 1736224.605 ops/s
# Warmup Iteration  30: 1730902.552 ops/s
Iteration   1: 1739917.634 ops/s
Iteration   2: 1740182.438 ops/s
Iteration   3: 1736603.521 ops/s
Iteration   4: 1737236.285 ops/s
Iteration   5: 1739364.202 ops/s
Iteration   6: 1737084.078 ops/s
Iteration   7: 1742522.329 ops/s
Iteration   8: 1740082.343 ops/s
Iteration   9: 1742968.551 ops/s
Iteration  10: 1738003.798 ops/s
Iteration  11: 1735863.464 ops/s
Iteration  12: 1740786.946 ops/s
Iteration  13: 1739775.796 ops/s
Iteration  14: 1724031.742 ops/s
Iteration  15: 1729584.250 ops/s
Iteration  16: 1736264.313 ops/s
Iteration  17: 1730663.167 ops/s
Iteration  18: 1736241.310 ops/s
Iteration  19: 1734242.540 ops/s
Iteration  20: 1739090.131 ops/s
Iteration  21: 1740298.998 ops/s
Iteration  22: 1733242.848 ops/s
Iteration  23: 1729321.119 ops/s
Iteration  24: 1727510.965 ops/s
Iteration  25: 1730857.259 ops/s
Iteration  26: 1739010.410 ops/s
Iteration  27: 1734785.044 ops/s
Iteration  28: 1741124.342 ops/s
Iteration  29: 1731139.175 ops/s
Iteration  30: 1741501.036 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_count":
  1736310.001 ±(99.9%) 3232.501 ops/s [Average]
  (min, avg, max) = (1724031.742, 1736310.001, 1742968.551), stdev = 4838.256
  CI (99.9%): [1733077.500, 1739542.502] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_count  thrpt   30  1736310.001 ± 3232.501  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_countBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_countBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 328134.475 ops/s
# Warmup Iteration   2: 581674.089 ops/s
# Warmup Iteration   3: 661063.404 ops/s
# Warmup Iteration   4: 664111.252 ops/s
# Warmup Iteration   5: 665131.861 ops/s
# Warmup Iteration   6: 543263.726 ops/s
# Warmup Iteration   7: 665411.794 ops/s
# Warmup Iteration   8: 663878.374 ops/s
# Warmup Iteration   9: 664551.820 ops/s
# Warmup Iteration  10: 665123.485 ops/s
# Warmup Iteration  11: 658822.141 ops/s
# Warmup Iteration  12: 662988.918 ops/s
# Warmup Iteration  13: 662621.962 ops/s
# Warmup Iteration  14: 665294.521 ops/s
# Warmup Iteration  15: 664815.310 ops/s
# Warmup Iteration  16: 660227.847 ops/s
# Warmup Iteration  17: 664308.773 ops/s
# Warmup Iteration  18: 666148.342 ops/s
# Warmup Iteration  19: 660543.880 ops/s
# Warmup Iteration  20: 665506.727 ops/s
# Warmup Iteration  21: 664030.405 ops/s
# Warmup Iteration  22: 665958.353 ops/s
# Warmup Iteration  23: 663490.830 ops/s
# Warmup Iteration  24: 662174.486 ops/s
# Warmup Iteration  25: 665283.173 ops/s
# Warmup Iteration  26: 665980.193 ops/s
# Warmup Iteration  27: 663586.241 ops/s
# Warmup Iteration  28: 664982.751 ops/s
# Warmup Iteration  29: 665138.805 ops/s
# Warmup Iteration  30: 664655.628 ops/s
Iteration   1: 667311.252 ops/s
Iteration   2: 666576.450 ops/s
Iteration   3: 668020.520 ops/s
Iteration   4: 666709.379 ops/s
Iteration   5: 666556.203 ops/s
Iteration   6: 666149.193 ops/s
Iteration   7: 665601.294 ops/s
Iteration   8: 667304.265 ops/s
Iteration   9: 664290.461 ops/s
Iteration  10: 664180.965 ops/s
Iteration  11: 667932.645 ops/s
Iteration  12: 664751.607 ops/s
Iteration  13: 663799.298 ops/s
Iteration  14: 666819.358 ops/s
Iteration  15: 665012.680 ops/s
Iteration  16: 665737.998 ops/s
Iteration  17: 667829.933 ops/s
Iteration  18: 660668.552 ops/s
Iteration  19: 665960.624 ops/s
Iteration  20: 667887.880 ops/s
Iteration  21: 664817.001 ops/s
Iteration  22: 666828.396 ops/s
Iteration  23: 666426.468 ops/s
Iteration  24: 660388.966 ops/s
Iteration  25: 662527.483 ops/s
Iteration  26: 666398.043 ops/s
Iteration  27: 665112.960 ops/s
Iteration  28: 661817.711 ops/s
Iteration  29: 667844.558 ops/s
Iteration  30: 666883.750 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_countBy":
  665604.863 ±(99.9%) 1392.612 ops/s [Average]
  (min, avg, max) = (660388.966, 665604.863, 668020.520), stdev = 2084.396
  CI (99.9%): [664212.251, 666997.475] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_countBy  thrpt   30  665604.863 ± 1392.612  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_countByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_countByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 71712.639 ops/s
# Warmup Iteration   2: 133276.465 ops/s
# Warmup Iteration   3: 147190.263 ops/s
# Warmup Iteration   4: 146887.911 ops/s
# Warmup Iteration   5: 142270.135 ops/s
# Warmup Iteration   6: 129316.534 ops/s
# Warmup Iteration   7: 148119.834 ops/s
# Warmup Iteration   8: 146930.585 ops/s
# Warmup Iteration   9: 146325.882 ops/s
# Warmup Iteration  10: 147555.458 ops/s
# Warmup Iteration  11: 147538.416 ops/s
# Warmup Iteration  12: 148427.134 ops/s
# Warmup Iteration  13: 147612.913 ops/s
# Warmup Iteration  14: 147207.732 ops/s
# Warmup Iteration  15: 148161.345 ops/s
# Warmup Iteration  16: 148501.713 ops/s
# Warmup Iteration  17: 148078.333 ops/s
# Warmup Iteration  18: 147737.872 ops/s
# Warmup Iteration  19: 148448.625 ops/s
# Warmup Iteration  20: 147966.955 ops/s
# Warmup Iteration  21: 147818.465 ops/s
# Warmup Iteration  22: 147841.902 ops/s
# Warmup Iteration  23: 148415.614 ops/s
# Warmup Iteration  24: 147978.224 ops/s
# Warmup Iteration  25: 147651.926 ops/s
# Warmup Iteration  26: 148249.249 ops/s
# Warmup Iteration  27: 148302.317 ops/s
# Warmup Iteration  28: 148331.131 ops/s
# Warmup Iteration  29: 147619.379 ops/s
# Warmup Iteration  30: 147957.209 ops/s
Iteration   1: 147456.790 ops/s
Iteration   2: 148126.808 ops/s
Iteration   3: 147456.445 ops/s
Iteration   4: 146481.586 ops/s
Iteration   5: 148704.100 ops/s
Iteration   6: 147757.032 ops/s
Iteration   7: 147233.586 ops/s
Iteration   8: 148527.054 ops/s
Iteration   9: 147901.512 ops/s
Iteration  10: 148113.071 ops/s
Iteration  11: 147898.227 ops/s
Iteration  12: 148523.504 ops/s
Iteration  13: 147301.892 ops/s
Iteration  14: 148083.313 ops/s
Iteration  15: 146893.319 ops/s
Iteration  16: 147632.284 ops/s
Iteration  17: 148020.083 ops/s
Iteration  18: 148169.623 ops/s
Iteration  19: 148032.418 ops/s
Iteration  20: 148238.528 ops/s
Iteration  21: 147892.592 ops/s
Iteration  22: 148150.307 ops/s
Iteration  23: 148051.954 ops/s
Iteration  24: 147782.816 ops/s
Iteration  25: 147685.866 ops/s
Iteration  26: 149048.652 ops/s
Iteration  27: 147616.816 ops/s
Iteration  28: 148056.152 ops/s
Iteration  29: 148326.970 ops/s
Iteration  30: 147421.796 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_countByEach":
  147886.170 ±(99.9%) 352.339 ops/s [Average]
  (min, avg, max) = (146481.586, 147886.170, 149048.652), stdev = 527.364
  CI (99.9%): [147533.831, 148238.509] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score     Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_countByEach  thrpt   30  147886.170 ± 352.339  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_countByWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_countByWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 313648.387 ops/s
# Warmup Iteration   2: 564399.862 ops/s
# Warmup Iteration   3: 635189.046 ops/s
# Warmup Iteration   4: 639702.560 ops/s
# Warmup Iteration   5: 641186.329 ops/s
# Warmup Iteration   6: 526951.611 ops/s
# Warmup Iteration   7: 642109.053 ops/s
# Warmup Iteration   8: 642856.396 ops/s
# Warmup Iteration   9: 640088.540 ops/s
# Warmup Iteration  10: 640645.569 ops/s
# Warmup Iteration  11: 640886.059 ops/s
# Warmup Iteration  12: 639902.670 ops/s
# Warmup Iteration  13: 641332.428 ops/s
# Warmup Iteration  14: 641903.636 ops/s
# Warmup Iteration  15: 641219.909 ops/s
# Warmup Iteration  16: 640248.858 ops/s
# Warmup Iteration  17: 641724.647 ops/s
# Warmup Iteration  18: 639531.372 ops/s
# Warmup Iteration  19: 642425.046 ops/s
# Warmup Iteration  20: 641686.120 ops/s
# Warmup Iteration  21: 639181.462 ops/s
# Warmup Iteration  22: 640873.614 ops/s
# Warmup Iteration  23: 642539.576 ops/s
# Warmup Iteration  24: 642608.453 ops/s
# Warmup Iteration  25: 640041.961 ops/s
# Warmup Iteration  26: 641860.802 ops/s
# Warmup Iteration  27: 641421.571 ops/s
# Warmup Iteration  28: 642072.807 ops/s
# Warmup Iteration  29: 641157.442 ops/s
# Warmup Iteration  30: 640559.439 ops/s
Iteration   1: 642424.917 ops/s
Iteration   2: 642038.399 ops/s
Iteration   3: 643076.419 ops/s
Iteration   4: 640683.157 ops/s
Iteration   5: 642468.026 ops/s
Iteration   6: 641066.391 ops/s
Iteration   7: 642709.651 ops/s
Iteration   8: 642802.141 ops/s
Iteration   9: 641117.859 ops/s
Iteration  10: 642384.265 ops/s
Iteration  11: 637334.238 ops/s
Iteration  12: 638479.022 ops/s
Iteration  13: 641319.029 ops/s
Iteration  14: 638526.757 ops/s
Iteration  15: 642325.635 ops/s
Iteration  16: 637428.988 ops/s
Iteration  17: 642134.934 ops/s
Iteration  18: 639371.267 ops/s
Iteration  19: 640367.134 ops/s
Iteration  20: 641971.054 ops/s
Iteration  21: 642067.586 ops/s
Iteration  22: 641099.369 ops/s
Iteration  23: 638190.311 ops/s
Iteration  24: 640737.372 ops/s
Iteration  25: 643816.901 ops/s
Iteration  26: 642371.182 ops/s
Iteration  27: 642667.294 ops/s
Iteration  28: 641474.973 ops/s
Iteration  29: 641220.417 ops/s
Iteration  30: 643260.475 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_countByWith":
  641231.172 ±(99.9%) 1170.924 ops/s [Average]
  (min, avg, max) = (637334.238, 641231.172, 643816.901), stdev = 1752.584
  CI (99.9%): [640060.248, 642402.096] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_countByWith  thrpt   30  641231.172 ± 1170.924  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_countWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_countWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 913310.369 ops/s
# Warmup Iteration   2: 1653967.200 ops/s
# Warmup Iteration   3: 1893080.406 ops/s
# Warmup Iteration   4: 1907561.379 ops/s
# Warmup Iteration   5: 1872506.358 ops/s
# Warmup Iteration   6: 1588071.327 ops/s
# Warmup Iteration   7: 1899044.822 ops/s
# Warmup Iteration   8: 1908162.599 ops/s
# Warmup Iteration   9: 1908697.967 ops/s
# Warmup Iteration  10: 1911732.899 ops/s
# Warmup Iteration  11: 1910427.216 ops/s
# Warmup Iteration  12: 1908845.034 ops/s
# Warmup Iteration  13: 1908277.217 ops/s
# Warmup Iteration  14: 1906259.856 ops/s
# Warmup Iteration  15: 1902451.603 ops/s
# Warmup Iteration  16: 1912397.237 ops/s
# Warmup Iteration  17: 1900423.894 ops/s
# Warmup Iteration  18: 1911012.532 ops/s
# Warmup Iteration  19: 1905501.958 ops/s
# Warmup Iteration  20: 1907579.066 ops/s
# Warmup Iteration  21: 1900890.297 ops/s
# Warmup Iteration  22: 1902916.546 ops/s
# Warmup Iteration  23: 1894231.190 ops/s
# Warmup Iteration  24: 1903559.123 ops/s
# Warmup Iteration  25: 1907031.654 ops/s
# Warmup Iteration  26: 1905674.027 ops/s
# Warmup Iteration  27: 1900424.156 ops/s
# Warmup Iteration  28: 1901927.226 ops/s
# Warmup Iteration  29: 1904232.286 ops/s
# Warmup Iteration  30: 1905661.960 ops/s
Iteration   1: 1905957.260 ops/s
Iteration   2: 1906367.031 ops/s
Iteration   3: 1910588.217 ops/s
Iteration   4: 1898869.146 ops/s
Iteration   5: 1905812.840 ops/s
Iteration   6: 1902649.694 ops/s
Iteration   7: 1896864.313 ops/s
Iteration   8: 1905896.697 ops/s
Iteration   9: 1909887.532 ops/s
Iteration  10: 1911652.127 ops/s
Iteration  11: 1906775.412 ops/s
Iteration  12: 1906355.000 ops/s
Iteration  13: 1900138.788 ops/s
Iteration  14: 1907099.061 ops/s
Iteration  15: 1911058.611 ops/s
Iteration  16: 1907371.560 ops/s
Iteration  17: 1902901.912 ops/s
Iteration  18: 1911117.561 ops/s
Iteration  19: 1898941.209 ops/s
Iteration  20: 1902951.903 ops/s
Iteration  21: 1892197.384 ops/s
Iteration  22: 1904418.551 ops/s
Iteration  23: 1914118.031 ops/s
Iteration  24: 1908194.006 ops/s
Iteration  25: 1907339.483 ops/s
Iteration  26: 1904497.104 ops/s
Iteration  27: 1907382.009 ops/s
Iteration  28: 1912591.195 ops/s
Iteration  29: 1899283.143 ops/s
Iteration  30: 1912653.328 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_countWith":
  1905731.004 ±(99.9%) 3449.021 ops/s [Average]
  (min, avg, max) = (1892197.384, 1905731.004, 1914118.031), stdev = 5162.333
  CI (99.9%): [1902281.982, 1909180.025] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_countWith  thrpt   30  1905731.004 ± 3449.021  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_detect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_detect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 501085.993 ops/s
# Warmup Iteration   2: 836641.358 ops/s
# Warmup Iteration   3: 971410.877 ops/s
# Warmup Iteration   4: 977135.437 ops/s
# Warmup Iteration   5: 976337.421 ops/s
# Warmup Iteration   6: 793521.533 ops/s
# Warmup Iteration   7: 977859.304 ops/s
# Warmup Iteration   8: 975744.801 ops/s
# Warmup Iteration   9: 976094.702 ops/s
# Warmup Iteration  10: 972714.296 ops/s
# Warmup Iteration  11: 975811.591 ops/s
# Warmup Iteration  12: 976757.275 ops/s
# Warmup Iteration  13: 977612.289 ops/s
# Warmup Iteration  14: 975499.352 ops/s
# Warmup Iteration  15: 976845.038 ops/s
# Warmup Iteration  16: 972998.448 ops/s
# Warmup Iteration  17: 973521.716 ops/s
# Warmup Iteration  18: 973021.913 ops/s
# Warmup Iteration  19: 977276.427 ops/s
# Warmup Iteration  20: 979396.562 ops/s
# Warmup Iteration  21: 979117.982 ops/s
# Warmup Iteration  22: 977446.378 ops/s
# Warmup Iteration  23: 977475.664 ops/s
# Warmup Iteration  24: 978270.776 ops/s
# Warmup Iteration  25: 976916.896 ops/s
# Warmup Iteration  26: 978155.561 ops/s
# Warmup Iteration  27: 973949.714 ops/s
# Warmup Iteration  28: 974456.504 ops/s
# Warmup Iteration  29: 977687.578 ops/s
# Warmup Iteration  30: 974367.823 ops/s
Iteration   1: 973764.678 ops/s
Iteration   2: 974004.078 ops/s
Iteration   3: 979491.593 ops/s
Iteration   4: 974146.180 ops/s
Iteration   5: 979098.065 ops/s
Iteration   6: 974832.062 ops/s
Iteration   7: 979564.753 ops/s
Iteration   8: 978665.442 ops/s
Iteration   9: 976567.449 ops/s
Iteration  10: 980627.530 ops/s
Iteration  11: 976979.989 ops/s
Iteration  12: 980265.199 ops/s
Iteration  13: 974534.480 ops/s
Iteration  14: 977717.107 ops/s
Iteration  15: 976768.151 ops/s
Iteration  16: 975263.677 ops/s
Iteration  17: 976922.183 ops/s
Iteration  18: 978906.269 ops/s
Iteration  19: 971013.957 ops/s
Iteration  20: 972757.684 ops/s
Iteration  21: 979203.237 ops/s
Iteration  22: 976010.818 ops/s
Iteration  23: 977955.478 ops/s
Iteration  24: 977163.116 ops/s
Iteration  25: 976020.809 ops/s
Iteration  26: 973521.208 ops/s
Iteration  27: 963002.744 ops/s
Iteration  28: 977518.362 ops/s
Iteration  29: 978514.316 ops/s
Iteration  30: 976645.289 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_detect":
  976248.197 ±(99.9%) 2303.999 ops/s [Average]
  (min, avg, max) = (963002.744, 976248.197, 980627.530), stdev = 3448.517
  CI (99.9%): [973944.198, 978552.195] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_detect  thrpt   30  976248.197 ± 2303.999  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 472124.271 ops/s
# Warmup Iteration   2: 779426.331 ops/s
# Warmup Iteration   3: 900997.764 ops/s
# Warmup Iteration   4: 905441.450 ops/s
# Warmup Iteration   5: 905633.387 ops/s
# Warmup Iteration   6: 742818.679 ops/s
# Warmup Iteration   7: 907332.204 ops/s
# Warmup Iteration   8: 907100.716 ops/s
# Warmup Iteration   9: 905803.428 ops/s
# Warmup Iteration  10: 906548.363 ops/s
# Warmup Iteration  11: 905694.469 ops/s
# Warmup Iteration  12: 907861.650 ops/s
# Warmup Iteration  13: 908662.553 ops/s
# Warmup Iteration  14: 907653.156 ops/s
# Warmup Iteration  15: 908052.210 ops/s
# Warmup Iteration  16: 905599.164 ops/s
# Warmup Iteration  17: 906140.188 ops/s
# Warmup Iteration  18: 906667.251 ops/s
# Warmup Iteration  19: 901881.845 ops/s
# Warmup Iteration  20: 904059.204 ops/s
# Warmup Iteration  21: 904878.444 ops/s
# Warmup Iteration  22: 908882.598 ops/s
# Warmup Iteration  23: 909189.407 ops/s
# Warmup Iteration  24: 904251.284 ops/s
# Warmup Iteration  25: 906686.127 ops/s
# Warmup Iteration  26: 909525.249 ops/s
# Warmup Iteration  27: 902464.630 ops/s
# Warmup Iteration  28: 902869.239 ops/s
# Warmup Iteration  29: 904263.425 ops/s
# Warmup Iteration  30: 908100.741 ops/s
Iteration   1: 907444.682 ops/s
Iteration   2: 906012.735 ops/s
Iteration   3: 905987.290 ops/s
Iteration   4: 904517.867 ops/s
Iteration   5: 906803.860 ops/s
Iteration   6: 906937.191 ops/s
Iteration   7: 904556.176 ops/s
Iteration   8: 906501.132 ops/s
Iteration   9: 907414.608 ops/s
Iteration  10: 907702.206 ops/s
Iteration  11: 906593.399 ops/s
Iteration  12: 908351.682 ops/s
Iteration  13: 908632.679 ops/s
Iteration  14: 904043.457 ops/s
Iteration  15: 906996.924 ops/s
Iteration  16: 907092.714 ops/s
Iteration  17: 906037.416 ops/s
Iteration  18: 900766.907 ops/s
Iteration  19: 905597.883 ops/s
Iteration  20: 908870.175 ops/s
Iteration  21: 908985.719 ops/s
Iteration  22: 903523.259 ops/s
Iteration  23: 905821.556 ops/s
Iteration  24: 904328.451 ops/s
Iteration  25: 908720.896 ops/s
Iteration  26: 901149.542 ops/s
Iteration  27: 902346.373 ops/s
Iteration  28: 905590.996 ops/s
Iteration  29: 906857.961 ops/s
Iteration  30: 905572.680 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_detectIfNone":
  905991.947 ±(99.9%) 1419.434 ops/s [Average]
  (min, avg, max) = (900766.907, 905991.947, 908985.719), stdev = 2124.542
  CI (99.9%): [904572.513, 907411.381] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_detectIfNone  thrpt   30  905991.947 ± 1419.434  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_detectOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_detectOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 291077.444 ops/s
# Warmup Iteration   2: 375317.373 ops/s
# Warmup Iteration   3: 464065.791 ops/s
# Warmup Iteration   4: 463309.087 ops/s
# Warmup Iteration   5: 466615.732 ops/s
# Warmup Iteration   6: 467307.098 ops/s
# Warmup Iteration   7: 466847.210 ops/s
# Warmup Iteration   8: 408474.200 ops/s
# Warmup Iteration   9: 447225.673 ops/s
# Warmup Iteration  10: 466985.260 ops/s
# Warmup Iteration  11: 468653.380 ops/s
# Warmup Iteration  12: 467154.434 ops/s
# Warmup Iteration  13: 468211.202 ops/s
# Warmup Iteration  14: 467176.827 ops/s
# Warmup Iteration  15: 468611.863 ops/s
# Warmup Iteration  16: 469354.870 ops/s
# Warmup Iteration  17: 482466.287 ops/s
# Warmup Iteration  18: 482910.006 ops/s
# Warmup Iteration  19: 482741.948 ops/s
# Warmup Iteration  20: 483032.298 ops/s
# Warmup Iteration  21: 482015.111 ops/s
# Warmup Iteration  22: 482350.014 ops/s
# Warmup Iteration  23: 483098.878 ops/s
# Warmup Iteration  24: 482548.267 ops/s
# Warmup Iteration  25: 480446.715 ops/s
# Warmup Iteration  26: 480511.302 ops/s
# Warmup Iteration  27: 482072.738 ops/s
# Warmup Iteration  28: 482689.258 ops/s
# Warmup Iteration  29: 481723.787 ops/s
# Warmup Iteration  30: 480464.931 ops/s
Iteration   1: 482530.912 ops/s
Iteration   2: 481701.082 ops/s
Iteration   3: 479610.898 ops/s
Iteration   4: 481899.630 ops/s
Iteration   5: 482851.918 ops/s
Iteration   6: 482747.766 ops/s
Iteration   7: 482964.616 ops/s
Iteration   8: 480770.688 ops/s
Iteration   9: 478801.694 ops/s
Iteration  10: 480409.640 ops/s
Iteration  11: 482178.393 ops/s
Iteration  12: 484352.388 ops/s
Iteration  13: 480267.067 ops/s
Iteration  14: 482863.418 ops/s
Iteration  15: 479912.445 ops/s
Iteration  16: 482191.344 ops/s
Iteration  17: 483031.388 ops/s
Iteration  18: 482151.562 ops/s
Iteration  19: 481173.070 ops/s
Iteration  20: 480350.639 ops/s
Iteration  21: 482937.517 ops/s
Iteration  22: 479101.300 ops/s
Iteration  23: 481797.022 ops/s
Iteration  24: 483220.921 ops/s
Iteration  25: 481057.391 ops/s
Iteration  26: 481179.761 ops/s
Iteration  27: 482880.086 ops/s
Iteration  28: 480654.143 ops/s
Iteration  29: 481581.057 ops/s
Iteration  30: 479837.360 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_detectOptional":
  481566.904 ±(99.9%) 919.755 ops/s [Average]
  (min, avg, max) = (478801.694, 481566.904, 484352.388), stdev = 1376.646
  CI (99.9%): [480647.149, 482486.659] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score     Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_detectOptional  thrpt   30  481566.904 ± 919.755  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_detectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_detectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 503419.534 ops/s
# Warmup Iteration   2: 810510.252 ops/s
# Warmup Iteration   3: 939250.179 ops/s
# Warmup Iteration   4: 944239.941 ops/s
# Warmup Iteration   5: 946705.569 ops/s
# Warmup Iteration   6: 798940.070 ops/s
# Warmup Iteration   7: 921171.047 ops/s
# Warmup Iteration   8: 943100.821 ops/s
# Warmup Iteration   9: 949523.488 ops/s
# Warmup Iteration  10: 948775.143 ops/s
# Warmup Iteration  11: 946464.101 ops/s
# Warmup Iteration  12: 949083.118 ops/s
# Warmup Iteration  13: 945508.966 ops/s
# Warmup Iteration  14: 945884.587 ops/s
# Warmup Iteration  15: 948398.219 ops/s
# Warmup Iteration  16: 945579.141 ops/s
# Warmup Iteration  17: 948805.883 ops/s
# Warmup Iteration  18: 944165.086 ops/s
# Warmup Iteration  19: 944667.346 ops/s
# Warmup Iteration  20: 948047.457 ops/s
# Warmup Iteration  21: 943792.417 ops/s
# Warmup Iteration  22: 946351.026 ops/s
# Warmup Iteration  23: 945190.266 ops/s
# Warmup Iteration  24: 945728.598 ops/s
# Warmup Iteration  25: 949604.632 ops/s
# Warmup Iteration  26: 949142.399 ops/s
# Warmup Iteration  27: 947192.847 ops/s
# Warmup Iteration  28: 948406.367 ops/s
# Warmup Iteration  29: 948856.356 ops/s
# Warmup Iteration  30: 948086.496 ops/s
Iteration   1: 945396.922 ops/s
Iteration   2: 950426.054 ops/s
Iteration   3: 948475.816 ops/s
Iteration   4: 947109.023 ops/s
Iteration   5: 947599.938 ops/s
Iteration   6: 947515.478 ops/s
Iteration   7: 945270.332 ops/s
Iteration   8: 947390.311 ops/s
Iteration   9: 944999.166 ops/s
Iteration  10: 950054.839 ops/s
Iteration  11: 949626.490 ops/s
Iteration  12: 948865.785 ops/s
Iteration  13: 939859.973 ops/s
Iteration  14: 947241.284 ops/s
Iteration  15: 942366.142 ops/s
Iteration  16: 948242.250 ops/s
Iteration  17: 948114.970 ops/s
Iteration  18: 944180.765 ops/s
Iteration  19: 948857.590 ops/s
Iteration  20: 943840.542 ops/s
Iteration  21: 949225.432 ops/s
Iteration  22: 942820.372 ops/s
Iteration  23: 947690.454 ops/s
Iteration  24: 946745.803 ops/s
Iteration  25: 947985.594 ops/s
Iteration  26: 945910.596 ops/s
Iteration  27: 941807.439 ops/s
Iteration  28: 938273.466 ops/s
Iteration  29: 947811.915 ops/s
Iteration  30: 948957.137 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_detectWith":
  946422.062 ±(99.9%) 2013.403 ops/s [Average]
  (min, avg, max) = (938273.466, 946422.062, 950426.054), stdev = 3013.568
  CI (99.9%): [944408.659, 948435.466] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_detectWith  thrpt   30  946422.062 ± 2013.403  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_detectWithIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_detectWithIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1943783.768 ops/s
# Warmup Iteration   2: 3241441.466 ops/s
# Warmup Iteration   3: 3790572.659 ops/s
# Warmup Iteration   4: 3807913.738 ops/s
# Warmup Iteration   5: 3796010.998 ops/s
# Warmup Iteration   6: 3080039.439 ops/s
# Warmup Iteration   7: 3810230.212 ops/s
# Warmup Iteration   8: 3815932.768 ops/s
# Warmup Iteration   9: 3817980.027 ops/s
# Warmup Iteration  10: 3805059.709 ops/s
# Warmup Iteration  11: 3821989.765 ops/s
# Warmup Iteration  12: 3815645.615 ops/s
# Warmup Iteration  13: 3819064.372 ops/s
# Warmup Iteration  14: 3805902.705 ops/s
# Warmup Iteration  15: 3816422.277 ops/s
# Warmup Iteration  16: 3807037.639 ops/s
# Warmup Iteration  17: 3817587.249 ops/s
# Warmup Iteration  18: 3822709.634 ops/s
# Warmup Iteration  19: 3817351.646 ops/s
# Warmup Iteration  20: 3816295.173 ops/s
# Warmup Iteration  21: 3800727.272 ops/s
# Warmup Iteration  22: 3806859.868 ops/s
# Warmup Iteration  23: 3819123.828 ops/s
# Warmup Iteration  24: 3811420.265 ops/s
# Warmup Iteration  25: 3808185.547 ops/s
# Warmup Iteration  26: 3797000.782 ops/s
# Warmup Iteration  27: 3807126.430 ops/s
# Warmup Iteration  28: 3804584.028 ops/s
# Warmup Iteration  29: 3808782.297 ops/s
# Warmup Iteration  30: 3813005.332 ops/s
Iteration   1: 3812864.273 ops/s
Iteration   2: 3819268.195 ops/s
Iteration   3: 3819047.226 ops/s
Iteration   4: 3811046.342 ops/s
Iteration   5: 3807113.255 ops/s
Iteration   6: 3799738.376 ops/s
Iteration   7: 3817886.905 ops/s
Iteration   8: 3810484.602 ops/s
Iteration   9: 3811162.810 ops/s
Iteration  10: 3814856.294 ops/s
Iteration  11: 3820103.121 ops/s
Iteration  12: 3811039.795 ops/s
Iteration  13: 3823587.178 ops/s
Iteration  14: 3820079.600 ops/s
Iteration  15: 3816595.225 ops/s
Iteration  16: 3804486.777 ops/s
Iteration  17: 3823391.075 ops/s
Iteration  18: 3813673.844 ops/s
Iteration  19: 3820111.875 ops/s
Iteration  20: 3814479.028 ops/s
Iteration  21: 3820617.609 ops/s
Iteration  22: 3815536.029 ops/s
Iteration  23: 3818429.254 ops/s
Iteration  24: 3826318.428 ops/s
Iteration  25: 3812990.078 ops/s
Iteration  26: 3820459.904 ops/s
Iteration  27: 3797509.804 ops/s
Iteration  28: 3814753.238 ops/s
Iteration  29: 3808884.430 ops/s
Iteration  30: 3820376.632 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_detectWithIfNone":
  3814896.373 ±(99.9%) 4514.010 ops/s [Average]
  (min, avg, max) = (3797509.804, 3814896.373, 3826318.428), stdev = 6756.358
  CI (99.9%): [3810382.363, 3819410.383] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_detectWithIfNone  thrpt   30  3814896.373 ± 4514.010  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_detectWithIfNoneBlock$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_detectWithIfNoneBlock

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 728257.529 ops/s
# Warmup Iteration   2: 1279705.177 ops/s
# Warmup Iteration   3: 1447325.306 ops/s
# Warmup Iteration   4: 1457889.494 ops/s
# Warmup Iteration   5: 1457361.952 ops/s
# Warmup Iteration   6: 1184438.382 ops/s
# Warmup Iteration   7: 1458348.419 ops/s
# Warmup Iteration   8: 1454956.772 ops/s
# Warmup Iteration   9: 1459394.282 ops/s
# Warmup Iteration  10: 1456882.565 ops/s
# Warmup Iteration  11: 1461559.187 ops/s
# Warmup Iteration  12: 1451649.899 ops/s
# Warmup Iteration  13: 1456892.393 ops/s
# Warmup Iteration  14: 1454759.191 ops/s
# Warmup Iteration  15: 1460770.174 ops/s
# Warmup Iteration  16: 1457868.351 ops/s
# Warmup Iteration  17: 1459854.092 ops/s
# Warmup Iteration  18: 1460262.422 ops/s
# Warmup Iteration  19: 1457414.210 ops/s
# Warmup Iteration  20: 1459127.441 ops/s
# Warmup Iteration  21: 1458147.554 ops/s
# Warmup Iteration  22: 1461149.613 ops/s
# Warmup Iteration  23: 1458798.938 ops/s
# Warmup Iteration  24: 1458806.680 ops/s
# Warmup Iteration  25: 1457676.701 ops/s
# Warmup Iteration  26: 1460607.309 ops/s
# Warmup Iteration  27: 1457853.692 ops/s
# Warmup Iteration  28: 1456815.542 ops/s
# Warmup Iteration  29: 1459000.140 ops/s
# Warmup Iteration  30: 1462187.493 ops/s
Iteration   1: 1460993.106 ops/s
Iteration   2: 1459234.896 ops/s
Iteration   3: 1459481.540 ops/s
Iteration   4: 1455839.831 ops/s
Iteration   5: 1458149.799 ops/s
Iteration   6: 1461372.741 ops/s
Iteration   7: 1459711.353 ops/s
Iteration   8: 1463120.063 ops/s
Iteration   9: 1452748.999 ops/s
Iteration  10: 1458168.616 ops/s
Iteration  11: 1459890.150 ops/s
Iteration  12: 1456734.535 ops/s
Iteration  13: 1455203.349 ops/s
Iteration  14: 1451161.813 ops/s
Iteration  15: 1439559.094 ops/s
Iteration  16: 1453681.456 ops/s
Iteration  17: 1462035.777 ops/s
Iteration  18: 1454683.731 ops/s
Iteration  19: 1459540.351 ops/s
Iteration  20: 1463002.638 ops/s
Iteration  21: 1459236.715 ops/s
Iteration  22: 1457414.807 ops/s
Iteration  23: 1453869.216 ops/s
Iteration  24: 1454981.111 ops/s
Iteration  25: 1448559.795 ops/s
Iteration  26: 1458151.002 ops/s
Iteration  27: 1459050.353 ops/s
Iteration  28: 1452615.597 ops/s
Iteration  29: 1456201.475 ops/s
Iteration  30: 1458618.845 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_detectWithIfNoneBlock":
  1456767.092 ±(99.9%) 3196.811 ops/s [Average]
  (min, avg, max) = (1439559.094, 1456767.092, 1463120.063), stdev = 4784.837
  CI (99.9%): [1453570.281, 1459963.903] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_detectWithIfNoneBlock  thrpt   30  1456767.092 ± 3196.811  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_detectWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_detectWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1804616.197 ops/s
# Warmup Iteration   2: 2911829.312 ops/s
# Warmup Iteration   3: 3457448.223 ops/s
# Warmup Iteration   4: 3469762.341 ops/s
# Warmup Iteration   5: 3462456.024 ops/s
# Warmup Iteration   6: 2977382.942 ops/s
# Warmup Iteration   7: 3295701.857 ops/s
# Warmup Iteration   8: 3472104.917 ops/s
# Warmup Iteration   9: 3468080.223 ops/s
# Warmup Iteration  10: 3470475.563 ops/s
# Warmup Iteration  11: 3485054.216 ops/s
# Warmup Iteration  12: 3465642.589 ops/s
# Warmup Iteration  13: 3465549.652 ops/s
# Warmup Iteration  14: 3470996.194 ops/s
# Warmup Iteration  15: 3465450.116 ops/s
# Warmup Iteration  16: 3463003.643 ops/s
# Warmup Iteration  17: 3464391.502 ops/s
# Warmup Iteration  18: 3486488.041 ops/s
# Warmup Iteration  19: 3471253.275 ops/s
# Warmup Iteration  20: 3490196.899 ops/s
# Warmup Iteration  21: 3460652.241 ops/s
# Warmup Iteration  22: 3452363.859 ops/s
# Warmup Iteration  23: 3478346.070 ops/s
# Warmup Iteration  24: 3471155.236 ops/s
# Warmup Iteration  25: 3486218.662 ops/s
# Warmup Iteration  26: 3463321.008 ops/s
# Warmup Iteration  27: 3482258.168 ops/s
# Warmup Iteration  28: 3492860.786 ops/s
# Warmup Iteration  29: 3472194.403 ops/s
# Warmup Iteration  30: 3470845.772 ops/s
Iteration   1: 3467380.541 ops/s
Iteration   2: 3476770.730 ops/s
Iteration   3: 3458809.288 ops/s
Iteration   4: 3504481.004 ops/s
Iteration   5: 3471278.919 ops/s
Iteration   6: 3483391.644 ops/s
Iteration   7: 3471315.867 ops/s
Iteration   8: 3456712.279 ops/s
Iteration   9: 3479852.589 ops/s
Iteration  10: 3480612.797 ops/s
Iteration  11: 3483585.204 ops/s
Iteration  12: 3413537.444 ops/s
Iteration  13: 3482713.160 ops/s
Iteration  14: 3486818.648 ops/s
Iteration  15: 3453443.230 ops/s
Iteration  16: 3475544.955 ops/s
Iteration  17: 3487265.232 ops/s
Iteration  18: 3490521.343 ops/s
Iteration  19: 3479426.203 ops/s
Iteration  20: 3503889.107 ops/s
Iteration  21: 3473381.402 ops/s
Iteration  22: 3472756.559 ops/s
Iteration  23: 3496111.277 ops/s
Iteration  24: 3489734.124 ops/s
Iteration  25: 3471071.582 ops/s
Iteration  26: 3445261.849 ops/s
Iteration  27: 3449614.506 ops/s
Iteration  28: 3474810.297 ops/s
Iteration  29: 3424009.917 ops/s
Iteration  30: 3469684.341 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_detectWithOccurrences":
  3472459.535 ±(99.9%) 13641.635 ops/s [Average]
  (min, avg, max) = (3413537.444, 3472459.535, 3504481.004), stdev = 20418.159
  CI (99.9%): [3458817.899, 3486101.170] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_detectWithOccurrences  thrpt   30  3472459.535 ± 13641.635  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_detectWithOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_detectWithOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 291953.411 ops/s
# Warmup Iteration   2: 373391.840 ops/s
# Warmup Iteration   3: 459581.583 ops/s
# Warmup Iteration   4: 456814.775 ops/s
# Warmup Iteration   5: 458944.165 ops/s
# Warmup Iteration   6: 456887.527 ops/s
# Warmup Iteration   7: 459750.453 ops/s
# Warmup Iteration   8: 416734.810 ops/s
# Warmup Iteration   9: 428473.597 ops/s
# Warmup Iteration  10: 459724.331 ops/s
# Warmup Iteration  11: 461794.181 ops/s
# Warmup Iteration  12: 461122.391 ops/s
# Warmup Iteration  13: 461303.691 ops/s
# Warmup Iteration  14: 461917.515 ops/s
# Warmup Iteration  15: 460878.126 ops/s
# Warmup Iteration  16: 461369.003 ops/s
# Warmup Iteration  17: 475566.895 ops/s
# Warmup Iteration  18: 475458.725 ops/s
# Warmup Iteration  19: 475994.810 ops/s
# Warmup Iteration  20: 473585.958 ops/s
# Warmup Iteration  21: 475264.275 ops/s
# Warmup Iteration  22: 472765.068 ops/s
# Warmup Iteration  23: 475909.926 ops/s
# Warmup Iteration  24: 473243.095 ops/s
# Warmup Iteration  25: 474295.445 ops/s
# Warmup Iteration  26: 473496.777 ops/s
# Warmup Iteration  27: 474680.671 ops/s
# Warmup Iteration  28: 475066.007 ops/s
# Warmup Iteration  29: 473424.986 ops/s
# Warmup Iteration  30: 474163.186 ops/s
Iteration   1: 474285.318 ops/s
Iteration   2: 473643.029 ops/s
Iteration   3: 472595.244 ops/s
Iteration   4: 473100.325 ops/s
Iteration   5: 473878.558 ops/s
Iteration   6: 474410.085 ops/s
Iteration   7: 473765.798 ops/s
Iteration   8: 471594.426 ops/s
Iteration   9: 472489.906 ops/s
Iteration  10: 474229.396 ops/s
Iteration  11: 474944.763 ops/s
Iteration  12: 473034.781 ops/s
Iteration  13: 475334.707 ops/s
Iteration  14: 475928.602 ops/s
Iteration  15: 474927.380 ops/s
Iteration  16: 473453.426 ops/s
Iteration  17: 476200.811 ops/s
Iteration  18: 476545.931 ops/s
Iteration  19: 472521.792 ops/s
Iteration  20: 475611.571 ops/s
Iteration  21: 476038.160 ops/s
Iteration  22: 475345.034 ops/s
Iteration  23: 475207.350 ops/s
Iteration  24: 475534.066 ops/s
Iteration  25: 475644.824 ops/s
Iteration  26: 476442.300 ops/s
Iteration  27: 473119.428 ops/s
Iteration  28: 476386.018 ops/s
Iteration  29: 470834.322 ops/s
Iteration  30: 475151.986 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_detectWithOptional":
  474406.645 ±(99.9%) 1017.348 ops/s [Average]
  (min, avg, max) = (470834.322, 474406.645, 476545.931), stdev = 1522.719
  CI (99.9%): [473389.296, 475423.993] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_detectWithOptional  thrpt   30  474406.645 ± 1017.348  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_distinctView$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_distinctView

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1082722.874 ops/s
# Warmup Iteration   2: 2266150.653 ops/s
# Warmup Iteration   3: 2525580.274 ops/s
# Warmup Iteration   4: 2537097.477 ops/s
# Warmup Iteration   5: 2075492.807 ops/s
# Warmup Iteration   6: 2537653.282 ops/s
# Warmup Iteration   7: 2528651.701 ops/s
# Warmup Iteration   8: 2534319.265 ops/s
# Warmup Iteration   9: 2530110.384 ops/s
# Warmup Iteration  10: 2532616.982 ops/s
# Warmup Iteration  11: 2530078.423 ops/s
# Warmup Iteration  12: 2535051.577 ops/s
# Warmup Iteration  13: 2527376.763 ops/s
# Warmup Iteration  14: 2536423.517 ops/s
# Warmup Iteration  15: 2524647.045 ops/s
# Warmup Iteration  16: 2518986.918 ops/s
# Warmup Iteration  17: 2534346.150 ops/s
# Warmup Iteration  18: 2530536.221 ops/s
# Warmup Iteration  19: 2537995.586 ops/s
# Warmup Iteration  20: 2532696.786 ops/s
# Warmup Iteration  21: 2532151.965 ops/s
# Warmup Iteration  22: 2531631.897 ops/s
# Warmup Iteration  23: 2531225.447 ops/s
# Warmup Iteration  24: 2536533.336 ops/s
# Warmup Iteration  25: 2534877.982 ops/s
# Warmup Iteration  26: 2535020.964 ops/s
# Warmup Iteration  27: 2541693.704 ops/s
# Warmup Iteration  28: 2535211.621 ops/s
# Warmup Iteration  29: 2538889.719 ops/s
# Warmup Iteration  30: 2535218.109 ops/s
Iteration   1: 2536844.875 ops/s
Iteration   2: 2540137.106 ops/s
Iteration   3: 2541536.611 ops/s
Iteration   4: 2527148.141 ops/s
Iteration   5: 2520314.549 ops/s
Iteration   6: 2541077.919 ops/s
Iteration   7: 2536344.335 ops/s
Iteration   8: 2539405.301 ops/s
Iteration   9: 2530161.741 ops/s
Iteration  10: 2541042.823 ops/s
Iteration  11: 2533565.191 ops/s
Iteration  12: 2523571.920 ops/s
Iteration  13: 2536042.552 ops/s
Iteration  14: 2538950.078 ops/s
Iteration  15: 2539793.813 ops/s
Iteration  16: 2545365.274 ops/s
Iteration  17: 2532168.925 ops/s
Iteration  18: 2537872.318 ops/s
Iteration  19: 2527813.994 ops/s
Iteration  20: 2527664.585 ops/s
Iteration  21: 2533873.988 ops/s
Iteration  22: 2541863.671 ops/s
Iteration  23: 2536576.245 ops/s
Iteration  24: 2531741.303 ops/s
Iteration  25: 2528351.146 ops/s
Iteration  26: 2536081.774 ops/s
Iteration  27: 2528188.564 ops/s
Iteration  28: 2544958.265 ops/s
Iteration  29: 2533789.328 ops/s
Iteration  30: 2529896.138 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_distinctView":
  2534738.082 ±(99.9%) 4202.276 ops/s [Average]
  (min, avg, max) = (2520314.549, 2534738.082, 2545365.274), stdev = 6289.769
  CI (99.9%): [2530535.807, 2538940.358] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_distinctView  thrpt   30  2534738.082 ± 4202.276  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1546933.707 ops/s
# Warmup Iteration   2: 2902500.166 ops/s
# Warmup Iteration   3: 3185919.901 ops/s
# Warmup Iteration   4: 3208925.583 ops/s
# Warmup Iteration   5: 2713967.014 ops/s
# Warmup Iteration   6: 3097854.091 ops/s
# Warmup Iteration   7: 3212247.332 ops/s
# Warmup Iteration   8: 3215614.562 ops/s
# Warmup Iteration   9: 3206941.078 ops/s
# Warmup Iteration  10: 3215936.466 ops/s
# Warmup Iteration  11: 3214526.434 ops/s
# Warmup Iteration  12: 3194226.478 ops/s
# Warmup Iteration  13: 3200902.347 ops/s
# Warmup Iteration  14: 3208309.420 ops/s
# Warmup Iteration  15: 3202544.521 ops/s
# Warmup Iteration  16: 3206825.954 ops/s
# Warmup Iteration  17: 3215530.760 ops/s
# Warmup Iteration  18: 3207996.816 ops/s
# Warmup Iteration  19: 3215039.261 ops/s
# Warmup Iteration  20: 3208847.746 ops/s
# Warmup Iteration  21: 3206885.811 ops/s
# Warmup Iteration  22: 3209181.270 ops/s
# Warmup Iteration  23: 3214301.178 ops/s
# Warmup Iteration  24: 3201771.576 ops/s
# Warmup Iteration  25: 3206128.110 ops/s
# Warmup Iteration  26: 3206092.561 ops/s
# Warmup Iteration  27: 3212972.471 ops/s
# Warmup Iteration  28: 3204710.572 ops/s
# Warmup Iteration  29: 3194455.571 ops/s
# Warmup Iteration  30: 3204559.664 ops/s
Iteration   1: 3210854.408 ops/s
Iteration   2: 3214158.586 ops/s
Iteration   3: 3213137.309 ops/s
Iteration   4: 3213744.466 ops/s
Iteration   5: 3189732.925 ops/s
Iteration   6: 3202872.658 ops/s
Iteration   7: 3207625.075 ops/s
Iteration   8: 3210555.463 ops/s
Iteration   9: 3199850.408 ops/s
Iteration  10: 3212250.239 ops/s
Iteration  11: 3197280.829 ops/s
Iteration  12: 3207310.178 ops/s
Iteration  13: 3213389.903 ops/s
Iteration  14: 3212268.994 ops/s
Iteration  15: 3215922.304 ops/s
Iteration  16: 3212832.143 ops/s
Iteration  17: 3217081.746 ops/s
Iteration  18: 3214070.861 ops/s
Iteration  19: 3211404.579 ops/s
Iteration  20: 3214176.459 ops/s
Iteration  21: 3202571.883 ops/s
Iteration  22: 3213909.324 ops/s
Iteration  23: 3203282.234 ops/s
Iteration  24: 3211831.922 ops/s
Iteration  25: 3211564.017 ops/s
Iteration  26: 3206958.475 ops/s
Iteration  27: 3210878.697 ops/s
Iteration  28: 3207013.623 ops/s
Iteration  29: 3213722.237 ops/s
Iteration  30: 3217417.609 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_empty":
  3209655.652 ±(99.9%) 4185.262 ops/s [Average]
  (min, avg, max) = (3189732.925, 3209655.652, 3217417.609), stdev = 6264.304
  CI (99.9%): [3205470.390, 3213840.914] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_empty  thrpt   30  3209655.652 ± 4185.262  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_equalsAndHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_equalsAndHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 172213.510 ops/s
# Warmup Iteration   2: 309300.031 ops/s
# Warmup Iteration   3: 363898.304 ops/s
# Warmup Iteration   4: 365638.477 ops/s
# Warmup Iteration   5: 364645.416 ops/s
# Warmup Iteration   6: 300882.321 ops/s
# Warmup Iteration   7: 365642.911 ops/s
# Warmup Iteration   8: 365231.823 ops/s
# Warmup Iteration   9: 366530.546 ops/s
# Warmup Iteration  10: 365603.285 ops/s
# Warmup Iteration  11: 365996.465 ops/s
# Warmup Iteration  12: 366455.157 ops/s
# Warmup Iteration  13: 366417.925 ops/s
# Warmup Iteration  14: 365698.914 ops/s
# Warmup Iteration  15: 366031.824 ops/s
# Warmup Iteration  16: 366451.847 ops/s
# Warmup Iteration  17: 365504.538 ops/s
# Warmup Iteration  18: 366536.796 ops/s
# Warmup Iteration  19: 365851.972 ops/s
# Warmup Iteration  20: 366317.568 ops/s
# Warmup Iteration  21: 366707.253 ops/s
# Warmup Iteration  22: 366466.140 ops/s
# Warmup Iteration  23: 366676.863 ops/s
# Warmup Iteration  24: 366152.044 ops/s
# Warmup Iteration  25: 366516.649 ops/s
# Warmup Iteration  26: 366494.302 ops/s
# Warmup Iteration  27: 365541.839 ops/s
# Warmup Iteration  28: 366759.271 ops/s
# Warmup Iteration  29: 364645.944 ops/s
# Warmup Iteration  30: 366418.386 ops/s
Iteration   1: 366087.983 ops/s
Iteration   2: 364813.929 ops/s
Iteration   3: 365877.735 ops/s
Iteration   4: 366782.370 ops/s
Iteration   5: 365050.826 ops/s
Iteration   6: 366760.431 ops/s
Iteration   7: 365252.818 ops/s
Iteration   8: 364329.158 ops/s
Iteration   9: 365879.041 ops/s
Iteration  10: 365333.331 ops/s
Iteration  11: 366940.876 ops/s
Iteration  12: 365857.493 ops/s
Iteration  13: 366993.323 ops/s
Iteration  14: 364822.077 ops/s
Iteration  15: 363680.717 ops/s
Iteration  16: 365324.488 ops/s
Iteration  17: 364546.422 ops/s
Iteration  18: 364795.476 ops/s
Iteration  19: 365378.547 ops/s
Iteration  20: 364607.636 ops/s
Iteration  21: 364703.239 ops/s
Iteration  22: 366280.336 ops/s
Iteration  23: 365790.850 ops/s
Iteration  24: 363768.657 ops/s
Iteration  25: 366164.944 ops/s
Iteration  26: 363282.583 ops/s
Iteration  27: 366478.000 ops/s
Iteration  28: 365492.466 ops/s
Iteration  29: 365299.157 ops/s
Iteration  30: 366578.986 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_equalsAndHashCode":
  365431.796 ±(99.9%) 658.305 ops/s [Average]
  (min, avg, max) = (363282.583, 365431.796, 366993.323), stdev = 985.320
  CI (99.9%): [364773.492, 366090.101] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score     Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_equalsAndHashCode  thrpt   30  365431.796 ± 658.305  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_flatCollect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_flatCollect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 172283.041 ops/s
# Warmup Iteration   2: 286435.759 ops/s
# Warmup Iteration   3: 347267.764 ops/s
# Warmup Iteration   4: 349655.789 ops/s
# Warmup Iteration   5: 349222.461 ops/s
# Warmup Iteration   6: 338357.792 ops/s
# Warmup Iteration   7: 298832.768 ops/s
# Warmup Iteration   8: 348708.482 ops/s
# Warmup Iteration   9: 350143.664 ops/s
# Warmup Iteration  10: 349257.854 ops/s
# Warmup Iteration  11: 349192.757 ops/s
# Warmup Iteration  12: 349765.796 ops/s
# Warmup Iteration  13: 348559.884 ops/s
# Warmup Iteration  14: 348942.434 ops/s
# Warmup Iteration  15: 348415.105 ops/s
# Warmup Iteration  16: 348856.206 ops/s
# Warmup Iteration  17: 348883.912 ops/s
# Warmup Iteration  18: 348158.487 ops/s
# Warmup Iteration  19: 349364.314 ops/s
# Warmup Iteration  20: 349541.724 ops/s
# Warmup Iteration  21: 349570.558 ops/s
# Warmup Iteration  22: 348897.663 ops/s
# Warmup Iteration  23: 347326.125 ops/s
# Warmup Iteration  24: 348857.301 ops/s
# Warmup Iteration  25: 347558.021 ops/s
# Warmup Iteration  26: 348896.515 ops/s
# Warmup Iteration  27: 349597.146 ops/s
# Warmup Iteration  28: 349247.772 ops/s
# Warmup Iteration  29: 349652.735 ops/s
# Warmup Iteration  30: 349598.229 ops/s
Iteration   1: 350666.757 ops/s
Iteration   2: 349153.557 ops/s
Iteration   3: 350625.132 ops/s
Iteration   4: 349653.135 ops/s
Iteration   5: 349865.435 ops/s
Iteration   6: 349016.274 ops/s
Iteration   7: 348346.401 ops/s
Iteration   8: 349442.281 ops/s
Iteration   9: 349667.615 ops/s
Iteration  10: 347962.992 ops/s
Iteration  11: 349752.801 ops/s
Iteration  12: 348678.745 ops/s
Iteration  13: 349705.025 ops/s
Iteration  14: 349246.903 ops/s
Iteration  15: 350007.498 ops/s
Iteration  16: 349765.297 ops/s
Iteration  17: 350036.314 ops/s
Iteration  18: 349928.837 ops/s
Iteration  19: 348216.735 ops/s
Iteration  20: 349624.843 ops/s
Iteration  21: 349448.852 ops/s
Iteration  22: 348747.675 ops/s
Iteration  23: 350428.861 ops/s
Iteration  24: 348875.813 ops/s
Iteration  25: 350116.594 ops/s
Iteration  26: 350113.478 ops/s
Iteration  27: 349929.479 ops/s
Iteration  28: 348745.100 ops/s
Iteration  29: 350487.942 ops/s
Iteration  30: 348218.358 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_flatCollect":
  349482.491 ±(99.9%) 497.972 ops/s [Average]
  (min, avg, max) = (347962.992, 349482.491, 350666.757), stdev = 745.341
  CI (99.9%): [348984.519, 349980.463] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score     Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_flatCollect  thrpt   30  349482.491 ± 497.972  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_flatCollectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_flatCollectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1446841.278 ops/s
# Warmup Iteration   2: 3837738.670 ops/s
# Warmup Iteration   3: 3834298.381 ops/s
# Warmup Iteration   4: 3160899.491 ops/s
# Warmup Iteration   5: 3823781.062 ops/s
# Warmup Iteration   6: 3836821.458 ops/s
# Warmup Iteration   7: 3842214.937 ops/s
# Warmup Iteration   8: 3847752.644 ops/s
# Warmup Iteration   9: 3827172.908 ops/s
# Warmup Iteration  10: 3838659.438 ops/s
# Warmup Iteration  11: 3844912.659 ops/s
# Warmup Iteration  12: 3844539.309 ops/s
# Warmup Iteration  13: 3848882.115 ops/s
# Warmup Iteration  14: 3848002.086 ops/s
# Warmup Iteration  15: 3842910.788 ops/s
# Warmup Iteration  16: 3847118.338 ops/s
# Warmup Iteration  17: 3845373.071 ops/s
# Warmup Iteration  18: 3829988.382 ops/s
# Warmup Iteration  19: 3848558.176 ops/s
# Warmup Iteration  20: 3837651.621 ops/s
# Warmup Iteration  21: 3840567.675 ops/s
# Warmup Iteration  22: 3844664.002 ops/s
# Warmup Iteration  23: 3850215.420 ops/s
# Warmup Iteration  24: 3843263.671 ops/s
# Warmup Iteration  25: 3834722.395 ops/s
# Warmup Iteration  26: 3832585.406 ops/s
# Warmup Iteration  27: 3839226.255 ops/s
# Warmup Iteration  28: 3848017.604 ops/s
# Warmup Iteration  29: 3833613.049 ops/s
# Warmup Iteration  30: 3847252.836 ops/s
Iteration   1: 3855042.492 ops/s
Iteration   2: 3841656.420 ops/s
Iteration   3: 3848259.349 ops/s
Iteration   4: 3852061.006 ops/s
Iteration   5: 3843223.539 ops/s
Iteration   6: 3831441.225 ops/s
Iteration   7: 3855243.796 ops/s
Iteration   8: 3844364.747 ops/s
Iteration   9: 3823823.542 ops/s
Iteration  10: 3831222.485 ops/s
Iteration  11: 3851537.039 ops/s
Iteration  12: 3841096.885 ops/s
Iteration  13: 3850656.970 ops/s
Iteration  14: 3839692.126 ops/s
Iteration  15: 3844016.170 ops/s
Iteration  16: 3838873.466 ops/s
Iteration  17: 3839977.016 ops/s
Iteration  18: 3831872.061 ops/s
Iteration  19: 3821129.195 ops/s
Iteration  20: 3832813.992 ops/s
Iteration  21: 3851180.909 ops/s
Iteration  22: 3839913.775 ops/s
Iteration  23: 3852316.630 ops/s
Iteration  24: 3853267.892 ops/s
Iteration  25: 3840866.999 ops/s
Iteration  26: 3845888.839 ops/s
Iteration  27: 3833138.224 ops/s
Iteration  28: 3835598.556 ops/s
Iteration  29: 3855653.395 ops/s
Iteration  30: 3824171.747 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_flatCollectBoolean":
  3841666.683 ±(99.9%) 6591.306 ops/s [Average]
  (min, avg, max) = (3821129.195, 3841666.683, 3855653.395), stdev = 9865.557
  CI (99.9%): [3835075.377, 3848257.989] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_flatCollectBoolean  thrpt   30  3841666.683 ± 6591.306  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_flatCollectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_flatCollectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 651190.404 ops/s
# Warmup Iteration   2: 1066882.780 ops/s
# Warmup Iteration   3: 1268252.872 ops/s
# Warmup Iteration   4: 1279523.169 ops/s
# Warmup Iteration   5: 1283842.937 ops/s
# Warmup Iteration   6: 1213757.882 ops/s
# Warmup Iteration   7: 1118923.061 ops/s
# Warmup Iteration   8: 1275063.765 ops/s
# Warmup Iteration   9: 1283299.551 ops/s
# Warmup Iteration  10: 1277371.821 ops/s
# Warmup Iteration  11: 1283765.997 ops/s
# Warmup Iteration  12: 1284434.410 ops/s
# Warmup Iteration  13: 1282552.670 ops/s
# Warmup Iteration  14: 1285674.022 ops/s
# Warmup Iteration  15: 1284637.381 ops/s
# Warmup Iteration  16: 1281086.082 ops/s
# Warmup Iteration  17: 1287089.335 ops/s
# Warmup Iteration  18: 1284184.267 ops/s
# Warmup Iteration  19: 1284775.541 ops/s
# Warmup Iteration  20: 1284946.461 ops/s
# Warmup Iteration  21: 1284019.382 ops/s
# Warmup Iteration  22: 1284637.095 ops/s
# Warmup Iteration  23: 1283422.993 ops/s
# Warmup Iteration  24: 1286102.589 ops/s
# Warmup Iteration  25: 1283297.747 ops/s
# Warmup Iteration  26: 1285511.260 ops/s
# Warmup Iteration  27: 1284216.895 ops/s
# Warmup Iteration  28: 1284940.068 ops/s
# Warmup Iteration  29: 1281348.624 ops/s
# Warmup Iteration  30: 1283969.214 ops/s
Iteration   1: 1282096.667 ops/s
Iteration   2: 1287571.214 ops/s
Iteration   3: 1286448.208 ops/s
Iteration   4: 1283087.971 ops/s
Iteration   5: 1285269.830 ops/s
Iteration   6: 1287233.237 ops/s
Iteration   7: 1284783.088 ops/s
Iteration   8: 1284002.831 ops/s
Iteration   9: 1284538.519 ops/s
Iteration  10: 1286425.843 ops/s
Iteration  11: 1281792.167 ops/s
Iteration  12: 1280562.942 ops/s
Iteration  13: 1284599.362 ops/s
Iteration  14: 1284555.424 ops/s
Iteration  15: 1276995.765 ops/s
Iteration  16: 1283013.783 ops/s
Iteration  17: 1285785.930 ops/s
Iteration  18: 1281354.719 ops/s
Iteration  19: 1281308.676 ops/s
Iteration  20: 1286413.461 ops/s
Iteration  21: 1281572.403 ops/s
Iteration  22: 1285869.707 ops/s
Iteration  23: 1278806.285 ops/s
Iteration  24: 1283639.208 ops/s
Iteration  25: 1282684.760 ops/s
Iteration  26: 1282791.525 ops/s
Iteration  27: 1276294.643 ops/s
Iteration  28: 1287468.627 ops/s
Iteration  29: 1284389.763 ops/s
Iteration  30: 1284590.444 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_flatCollectByte":
  1283531.567 ±(99.9%) 1912.799 ops/s [Average]
  (min, avg, max) = (1276294.643, 1283531.567, 1287571.214), stdev = 2862.988
  CI (99.9%): [1281618.768, 1285444.366] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_flatCollectByte  thrpt   30  1283531.567 ± 1912.799  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_flatCollectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_flatCollectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 731594.205 ops/s
# Warmup Iteration   2: 1831815.942 ops/s
# Warmup Iteration   3: 1880235.141 ops/s
# Warmup Iteration   4: 1565658.119 ops/s
# Warmup Iteration   5: 1880537.385 ops/s
# Warmup Iteration   6: 1879615.117 ops/s
# Warmup Iteration   7: 1887524.848 ops/s
# Warmup Iteration   8: 1875959.481 ops/s
# Warmup Iteration   9: 1887021.687 ops/s
# Warmup Iteration  10: 1884852.918 ops/s
# Warmup Iteration  11: 1890543.998 ops/s
# Warmup Iteration  12: 1879515.015 ops/s
# Warmup Iteration  13: 1882690.274 ops/s
# Warmup Iteration  14: 1887899.048 ops/s
# Warmup Iteration  15: 1889973.870 ops/s
# Warmup Iteration  16: 1882101.561 ops/s
# Warmup Iteration  17: 1884532.644 ops/s
# Warmup Iteration  18: 1883918.292 ops/s
# Warmup Iteration  19: 1889000.957 ops/s
# Warmup Iteration  20: 1889428.404 ops/s
# Warmup Iteration  21: 1886869.595 ops/s
# Warmup Iteration  22: 1885184.021 ops/s
# Warmup Iteration  23: 1884018.399 ops/s
# Warmup Iteration  24: 1885169.899 ops/s
# Warmup Iteration  25: 1877105.510 ops/s
# Warmup Iteration  26: 1880039.085 ops/s
# Warmup Iteration  27: 1886590.444 ops/s
# Warmup Iteration  28: 1880360.415 ops/s
# Warmup Iteration  29: 1877672.399 ops/s
# Warmup Iteration  30: 1883185.205 ops/s
Iteration   1: 1890105.755 ops/s
Iteration   2: 1880622.923 ops/s
Iteration   3: 1885910.961 ops/s
Iteration   4: 1884687.866 ops/s
Iteration   5: 1886172.871 ops/s
Iteration   6: 1871614.361 ops/s
Iteration   7: 1884597.482 ops/s
Iteration   8: 1889286.477 ops/s
Iteration   9: 1886601.124 ops/s
Iteration  10: 1881344.609 ops/s
Iteration  11: 1887601.044 ops/s
Iteration  12: 1873399.720 ops/s
Iteration  13: 1887215.020 ops/s
Iteration  14: 1879951.516 ops/s
Iteration  15: 1891925.171 ops/s
Iteration  16: 1885801.190 ops/s
Iteration  17: 1885062.080 ops/s
Iteration  18: 1884702.384 ops/s
Iteration  19: 1887523.636 ops/s
Iteration  20: 1889264.396 ops/s
Iteration  21: 1880640.671 ops/s
Iteration  22: 1885377.676 ops/s
Iteration  23: 1884207.847 ops/s
Iteration  24: 1885293.084 ops/s
Iteration  25: 1884225.496 ops/s
Iteration  26: 1887684.689 ops/s
Iteration  27: 1892880.594 ops/s
Iteration  28: 1884698.704 ops/s
Iteration  29: 1884652.501 ops/s
Iteration  30: 1879611.747 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_flatCollectChar":
  1884755.453 ±(99.9%) 3097.565 ops/s [Average]
  (min, avg, max) = (1871614.361, 1884755.453, 1892880.594), stdev = 4636.290
  CI (99.9%): [1881657.888, 1887853.019] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_flatCollectChar  thrpt   30  1884755.453 ± 3097.565  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_flatCollectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_flatCollectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 381710.145 ops/s
# Warmup Iteration   2: 867944.963 ops/s
# Warmup Iteration   3: 903601.548 ops/s
# Warmup Iteration   4: 795479.318 ops/s
# Warmup Iteration   5: 861234.975 ops/s
# Warmup Iteration   6: 895302.669 ops/s
# Warmup Iteration   7: 900374.557 ops/s
# Warmup Iteration   8: 901183.457 ops/s
# Warmup Iteration   9: 895081.930 ops/s
# Warmup Iteration  10: 899467.295 ops/s
# Warmup Iteration  11: 903272.884 ops/s
# Warmup Iteration  12: 902862.250 ops/s
# Warmup Iteration  13: 902049.165 ops/s
# Warmup Iteration  14: 896637.527 ops/s
# Warmup Iteration  15: 903301.678 ops/s
# Warmup Iteration  16: 898160.951 ops/s
# Warmup Iteration  17: 902900.826 ops/s
# Warmup Iteration  18: 902721.950 ops/s
# Warmup Iteration  19: 902866.893 ops/s
# Warmup Iteration  20: 902126.512 ops/s
# Warmup Iteration  21: 904457.807 ops/s
# Warmup Iteration  22: 905365.363 ops/s
# Warmup Iteration  23: 900474.658 ops/s
# Warmup Iteration  24: 904929.308 ops/s
# Warmup Iteration  25: 898361.385 ops/s
# Warmup Iteration  26: 902223.911 ops/s
# Warmup Iteration  27: 893494.145 ops/s
# Warmup Iteration  28: 900475.406 ops/s
# Warmup Iteration  29: 903205.235 ops/s
# Warmup Iteration  30: 899471.473 ops/s
Iteration   1: 899658.427 ops/s
Iteration   2: 896752.524 ops/s
Iteration   3: 896949.039 ops/s
Iteration   4: 900194.811 ops/s
Iteration   5: 892756.348 ops/s
Iteration   6: 901723.073 ops/s
Iteration   7: 902037.764 ops/s
Iteration   8: 903790.735 ops/s
Iteration   9: 901511.851 ops/s
Iteration  10: 897849.359 ops/s
Iteration  11: 895181.758 ops/s
Iteration  12: 897744.246 ops/s
Iteration  13: 901932.312 ops/s
Iteration  14: 904500.743 ops/s
Iteration  15: 899231.777 ops/s
Iteration  16: 903961.826 ops/s
Iteration  17: 892694.716 ops/s
Iteration  18: 901051.056 ops/s
Iteration  19: 900718.378 ops/s
Iteration  20: 902010.724 ops/s
Iteration  21: 900750.159 ops/s
Iteration  22: 895482.573 ops/s
Iteration  23: 901089.201 ops/s
Iteration  24: 900453.974 ops/s
Iteration  25: 897880.356 ops/s
Iteration  26: 900008.423 ops/s
Iteration  27: 893064.778 ops/s
Iteration  28: 876805.306 ops/s
Iteration  29: 899629.975 ops/s
Iteration  30: 896693.846 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_flatCollectDouble":
  898470.335 ±(99.9%) 3470.089 ops/s [Average]
  (min, avg, max) = (876805.306, 898470.335, 904500.743), stdev = 5193.866
  CI (99.9%): [895000.247, 901940.424] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_flatCollectDouble  thrpt   30  898470.335 ± 3470.089  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_flatCollectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_flatCollectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 606478.486 ops/s
# Warmup Iteration   2: 1345772.372 ops/s
# Warmup Iteration   3: 1418416.808 ops/s
# Warmup Iteration   4: 1404541.168 ops/s
# Warmup Iteration   5: 1206569.431 ops/s
# Warmup Iteration   6: 1429290.127 ops/s
# Warmup Iteration   7: 1426511.204 ops/s
# Warmup Iteration   8: 1418642.739 ops/s
# Warmup Iteration   9: 1425443.129 ops/s
# Warmup Iteration  10: 1427988.929 ops/s
# Warmup Iteration  11: 1424986.736 ops/s
# Warmup Iteration  12: 1421134.574 ops/s
# Warmup Iteration  13: 1428204.072 ops/s
# Warmup Iteration  14: 1423497.361 ops/s
# Warmup Iteration  15: 1429826.659 ops/s
# Warmup Iteration  16: 1427608.137 ops/s
# Warmup Iteration  17: 1425048.297 ops/s
# Warmup Iteration  18: 1419735.823 ops/s
# Warmup Iteration  19: 1428136.874 ops/s
# Warmup Iteration  20: 1417066.479 ops/s
# Warmup Iteration  21: 1419153.267 ops/s
# Warmup Iteration  22: 1424122.705 ops/s
# Warmup Iteration  23: 1423859.524 ops/s
# Warmup Iteration  24: 1427581.066 ops/s
# Warmup Iteration  25: 1426514.765 ops/s
# Warmup Iteration  26: 1428278.812 ops/s
# Warmup Iteration  27: 1424660.233 ops/s
# Warmup Iteration  28: 1426258.528 ops/s
# Warmup Iteration  29: 1429110.210 ops/s
# Warmup Iteration  30: 1428504.209 ops/s
Iteration   1: 1432126.692 ops/s
Iteration   2: 1428592.447 ops/s
Iteration   3: 1428078.605 ops/s
Iteration   4: 1424622.988 ops/s
Iteration   5: 1431415.324 ops/s
Iteration   6: 1421366.756 ops/s
Iteration   7: 1427276.132 ops/s
Iteration   8: 1425835.925 ops/s
Iteration   9: 1428839.784 ops/s
Iteration  10: 1432288.337 ops/s
Iteration  11: 1428384.138 ops/s
Iteration  12: 1424303.562 ops/s
Iteration  13: 1426426.902 ops/s
Iteration  14: 1424229.794 ops/s
Iteration  15: 1427563.599 ops/s
Iteration  16: 1421323.290 ops/s
Iteration  17: 1429841.239 ops/s
Iteration  18: 1417362.214 ops/s
Iteration  19: 1432372.271 ops/s
Iteration  20: 1425115.482 ops/s
Iteration  21: 1428304.990 ops/s
Iteration  22: 1420838.783 ops/s
Iteration  23: 1428661.497 ops/s
Iteration  24: 1417817.018 ops/s
Iteration  25: 1429766.272 ops/s
Iteration  26: 1429996.202 ops/s
Iteration  27: 1425853.365 ops/s
Iteration  28: 1433976.260 ops/s
Iteration  29: 1429080.332 ops/s
Iteration  30: 1423499.191 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_flatCollectFloat":
  1426838.646 ±(99.9%) 2807.044 ops/s [Average]
  (min, avg, max) = (1417362.214, 1426838.646, 1433976.260), stdev = 4201.452
  CI (99.9%): [1424031.602, 1429645.691] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_flatCollectFloat  thrpt   30  1426838.646 ± 2807.044  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_flatCollectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_flatCollectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 745948.408 ops/s
# Warmup Iteration   2: 1979021.866 ops/s
# Warmup Iteration   3: 1995994.407 ops/s
# Warmup Iteration   4: 1659283.702 ops/s
# Warmup Iteration   5: 2008327.528 ops/s
# Warmup Iteration   6: 2006645.662 ops/s
# Warmup Iteration   7: 2004005.832 ops/s
# Warmup Iteration   8: 2011061.210 ops/s
# Warmup Iteration   9: 2012043.843 ops/s
# Warmup Iteration  10: 2001928.224 ops/s
# Warmup Iteration  11: 2004633.740 ops/s
# Warmup Iteration  12: 2010266.622 ops/s
# Warmup Iteration  13: 2008803.129 ops/s
# Warmup Iteration  14: 2014216.617 ops/s
# Warmup Iteration  15: 2008398.663 ops/s
# Warmup Iteration  16: 2014395.411 ops/s
# Warmup Iteration  17: 2010773.230 ops/s
# Warmup Iteration  18: 2007453.383 ops/s
# Warmup Iteration  19: 2012216.132 ops/s
# Warmup Iteration  20: 2013105.293 ops/s
# Warmup Iteration  21: 2012024.919 ops/s
# Warmup Iteration  22: 2010960.306 ops/s
# Warmup Iteration  23: 2010410.053 ops/s
# Warmup Iteration  24: 2009883.718 ops/s
# Warmup Iteration  25: 2001456.511 ops/s
# Warmup Iteration  26: 2013596.571 ops/s
# Warmup Iteration  27: 2003138.887 ops/s
# Warmup Iteration  28: 2010680.697 ops/s
# Warmup Iteration  29: 2014218.786 ops/s
# Warmup Iteration  30: 2006327.415 ops/s
Iteration   1: 2002326.761 ops/s
Iteration   2: 2004432.307 ops/s
Iteration   3: 2011035.879 ops/s
Iteration   4: 2010212.133 ops/s
Iteration   5: 2018581.624 ops/s
Iteration   6: 2003528.256 ops/s
Iteration   7: 2008646.426 ops/s
Iteration   8: 2017769.743 ops/s
Iteration   9: 2015237.938 ops/s
Iteration  10: 2013823.695 ops/s
Iteration  11: 2011593.238 ops/s
Iteration  12: 1998423.179 ops/s
Iteration  13: 2009024.192 ops/s
Iteration  14: 2002809.764 ops/s
Iteration  15: 2003900.127 ops/s
Iteration  16: 1998692.216 ops/s
Iteration  17: 2008481.328 ops/s
Iteration  18: 2012887.002 ops/s
Iteration  19: 2000784.135 ops/s
Iteration  20: 1992358.257 ops/s
Iteration  21: 2017974.065 ops/s
Iteration  22: 2015232.130 ops/s
Iteration  23: 2005783.372 ops/s
Iteration  24: 2002028.964 ops/s
Iteration  25: 2015445.237 ops/s
Iteration  26: 2004232.645 ops/s
Iteration  27: 2009676.163 ops/s
Iteration  28: 2017002.399 ops/s
Iteration  29: 2013445.737 ops/s
Iteration  30: 1997261.348 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_flatCollectInt":
  2008087.675 ±(99.9%) 4676.197 ops/s [Average]
  (min, avg, max) = (1992358.257, 2008087.675, 2018581.624), stdev = 6999.112
  CI (99.9%): [2003411.478, 2012763.872] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_flatCollectInt  thrpt   30  2008087.675 ± 4676.197  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_flatCollectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_flatCollectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 664579.612 ops/s
# Warmup Iteration   2: 1803632.968 ops/s
# Warmup Iteration   3: 1735911.346 ops/s
# Warmup Iteration   4: 1585171.537 ops/s
# Warmup Iteration   5: 1813826.596 ops/s
# Warmup Iteration   6: 1821249.239 ops/s
# Warmup Iteration   7: 1818653.486 ops/s
# Warmup Iteration   8: 1818862.340 ops/s
# Warmup Iteration   9: 1816850.962 ops/s
# Warmup Iteration  10: 1816987.719 ops/s
# Warmup Iteration  11: 1817853.035 ops/s
# Warmup Iteration  12: 1821722.870 ops/s
# Warmup Iteration  13: 1815113.138 ops/s
# Warmup Iteration  14: 1813811.317 ops/s
# Warmup Iteration  15: 1814202.649 ops/s
# Warmup Iteration  16: 1814475.244 ops/s
# Warmup Iteration  17: 1822428.358 ops/s
# Warmup Iteration  18: 1813188.347 ops/s
# Warmup Iteration  19: 1816067.505 ops/s
# Warmup Iteration  20: 1814008.812 ops/s
# Warmup Iteration  21: 1818202.067 ops/s
# Warmup Iteration  22: 1808131.499 ops/s
# Warmup Iteration  23: 1815837.712 ops/s
# Warmup Iteration  24: 1810429.871 ops/s
# Warmup Iteration  25: 1822627.693 ops/s
# Warmup Iteration  26: 1822442.777 ops/s
# Warmup Iteration  27: 1817167.667 ops/s
# Warmup Iteration  28: 1816879.697 ops/s
# Warmup Iteration  29: 1815529.295 ops/s
# Warmup Iteration  30: 1816539.003 ops/s
Iteration   1: 1815765.556 ops/s
Iteration   2: 1811662.332 ops/s
Iteration   3: 1823012.952 ops/s
Iteration   4: 1809299.739 ops/s
Iteration   5: 1816199.002 ops/s
Iteration   6: 1811355.461 ops/s
Iteration   7: 1806862.970 ops/s
Iteration   8: 1808592.877 ops/s
Iteration   9: 1817548.309 ops/s
Iteration  10: 1818820.132 ops/s
Iteration  11: 1817405.586 ops/s
Iteration  12: 1817480.319 ops/s
Iteration  13: 1811577.332 ops/s
Iteration  14: 1821351.320 ops/s
Iteration  15: 1817091.926 ops/s
Iteration  16: 1819118.022 ops/s
Iteration  17: 1806667.715 ops/s
Iteration  18: 1819701.221 ops/s
Iteration  19: 1820401.493 ops/s
Iteration  20: 1821623.698 ops/s
Iteration  21: 1811160.711 ops/s
Iteration  22: 1812876.759 ops/s
Iteration  23: 1804754.076 ops/s
Iteration  24: 1812925.834 ops/s
Iteration  25: 1818852.669 ops/s
Iteration  26: 1817009.234 ops/s
Iteration  27: 1808034.309 ops/s
Iteration  28: 1810148.765 ops/s
Iteration  29: 1816385.711 ops/s
Iteration  30: 1818250.210 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_flatCollectLong":
  1814731.208 ±(99.9%) 3354.779 ops/s [Average]
  (min, avg, max) = (1804754.076, 1814731.208, 1823012.952), stdev = 5021.275
  CI (99.9%): [1811376.429, 1818085.987] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_flatCollectLong  thrpt   30  1814731.208 ± 3354.779  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_flatCollectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_flatCollectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 801642.028 ops/s
# Warmup Iteration   2: 2111463.884 ops/s
# Warmup Iteration   3: 2159294.198 ops/s
# Warmup Iteration   4: 1791542.309 ops/s
# Warmup Iteration   5: 2168552.483 ops/s
# Warmup Iteration   6: 2164092.521 ops/s
# Warmup Iteration   7: 2163772.893 ops/s
# Warmup Iteration   8: 2166862.709 ops/s
# Warmup Iteration   9: 2164557.249 ops/s
# Warmup Iteration  10: 2164979.317 ops/s
# Warmup Iteration  11: 2163208.701 ops/s
# Warmup Iteration  12: 2164090.553 ops/s
# Warmup Iteration  13: 2172598.841 ops/s
# Warmup Iteration  14: 2171259.383 ops/s
# Warmup Iteration  15: 2170118.677 ops/s
# Warmup Iteration  16: 2172797.432 ops/s
# Warmup Iteration  17: 2163925.953 ops/s
# Warmup Iteration  18: 2164352.707 ops/s
# Warmup Iteration  19: 2163918.482 ops/s
# Warmup Iteration  20: 2168948.790 ops/s
# Warmup Iteration  21: 2163981.123 ops/s
# Warmup Iteration  22: 2157490.817 ops/s
# Warmup Iteration  23: 2167421.978 ops/s
# Warmup Iteration  24: 2165833.246 ops/s
# Warmup Iteration  25: 2156022.878 ops/s
# Warmup Iteration  26: 2155206.740 ops/s
# Warmup Iteration  27: 2167002.741 ops/s
# Warmup Iteration  28: 2167285.592 ops/s
# Warmup Iteration  29: 2172849.260 ops/s
# Warmup Iteration  30: 2170844.657 ops/s
Iteration   1: 2153049.040 ops/s
Iteration   2: 2171976.827 ops/s
Iteration   3: 2165307.614 ops/s
Iteration   4: 2162800.437 ops/s
Iteration   5: 2171778.323 ops/s
Iteration   6: 2172281.606 ops/s
Iteration   7: 2168458.386 ops/s
Iteration   8: 2173100.935 ops/s
Iteration   9: 2170155.540 ops/s
Iteration  10: 2168378.891 ops/s
Iteration  11: 2170807.966 ops/s
Iteration  12: 2151465.391 ops/s
Iteration  13: 2165758.350 ops/s
Iteration  14: 2167098.541 ops/s
Iteration  15: 2172352.123 ops/s
Iteration  16: 2163501.799 ops/s
Iteration  17: 2158992.954 ops/s
Iteration  18: 2159430.735 ops/s
Iteration  19: 2161294.493 ops/s
Iteration  20: 2171815.517 ops/s
Iteration  21: 2172732.108 ops/s
Iteration  22: 2171231.239 ops/s
Iteration  23: 2171720.973 ops/s
Iteration  24: 2171681.043 ops/s
Iteration  25: 2165269.747 ops/s
Iteration  26: 2170521.242 ops/s
Iteration  27: 2167364.404 ops/s
Iteration  28: 2172547.135 ops/s
Iteration  29: 2157570.113 ops/s
Iteration  30: 2163262.808 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_flatCollectShort":
  2166790.209 ±(99.9%) 4039.405 ops/s [Average]
  (min, avg, max) = (2151465.391, 2166790.209, 2173100.935), stdev = 6045.991
  CI (99.9%): [2162750.805, 2170829.614] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_flatCollectShort  thrpt   30  2166790.209 ± 4039.405  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_flatCollectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_flatCollectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 183426.763 ops/s
# Warmup Iteration   2: 377994.497 ops/s
# Warmup Iteration   3: 411839.920 ops/s
# Warmup Iteration   4: 414767.431 ops/s
# Warmup Iteration   5: 343059.334 ops/s
# Warmup Iteration   6: 415913.928 ops/s
# Warmup Iteration   7: 414388.666 ops/s
# Warmup Iteration   8: 412890.900 ops/s
# Warmup Iteration   9: 414730.897 ops/s
# Warmup Iteration  10: 415428.086 ops/s
# Warmup Iteration  11: 414600.831 ops/s
# Warmup Iteration  12: 415219.377 ops/s
# Warmup Iteration  13: 415639.499 ops/s
# Warmup Iteration  14: 415777.540 ops/s
# Warmup Iteration  15: 414275.572 ops/s
# Warmup Iteration  16: 415540.494 ops/s
# Warmup Iteration  17: 412484.146 ops/s
# Warmup Iteration  18: 415813.219 ops/s
# Warmup Iteration  19: 416250.733 ops/s
# Warmup Iteration  20: 415764.636 ops/s
# Warmup Iteration  21: 416340.017 ops/s
# Warmup Iteration  22: 415850.888 ops/s
# Warmup Iteration  23: 415684.906 ops/s
# Warmup Iteration  24: 415594.813 ops/s
# Warmup Iteration  25: 412639.256 ops/s
# Warmup Iteration  26: 415725.435 ops/s
# Warmup Iteration  27: 416385.945 ops/s
# Warmup Iteration  28: 414712.950 ops/s
# Warmup Iteration  29: 415814.145 ops/s
# Warmup Iteration  30: 415202.810 ops/s
Iteration   1: 415789.697 ops/s
Iteration   2: 415854.541 ops/s
Iteration   3: 415202.414 ops/s
Iteration   4: 413615.948 ops/s
Iteration   5: 416202.557 ops/s
Iteration   6: 414572.473 ops/s
Iteration   7: 414776.520 ops/s
Iteration   8: 414578.069 ops/s
Iteration   9: 413471.429 ops/s
Iteration  10: 415257.416 ops/s
Iteration  11: 414540.977 ops/s
Iteration  12: 415721.612 ops/s
Iteration  13: 415431.652 ops/s
Iteration  14: 411223.327 ops/s
Iteration  15: 407315.058 ops/s
Iteration  16: 416317.293 ops/s
Iteration  17: 415409.470 ops/s
Iteration  18: 414872.745 ops/s
Iteration  19: 415501.953 ops/s
Iteration  20: 415835.802 ops/s
Iteration  21: 414572.710 ops/s
Iteration  22: 416278.963 ops/s
Iteration  23: 415703.178 ops/s
Iteration  24: 416124.539 ops/s
Iteration  25: 413737.588 ops/s
Iteration  26: 416980.915 ops/s
Iteration  27: 415220.648 ops/s
Iteration  28: 415070.787 ops/s
Iteration  29: 415638.128 ops/s
Iteration  30: 414494.629 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_flatCollectWith":
  414843.768 ±(99.9%) 1201.311 ops/s [Average]
  (min, avg, max) = (407315.058, 414843.768, 416980.915), stdev = 1798.066
  CI (99.9%): [413642.457, 416045.079] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_flatCollectWith  thrpt   30  414843.768 ± 1201.311  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_flatCollectWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_flatCollectWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 485803.358 ops/s
# Warmup Iteration   2: 892044.668 ops/s
# Warmup Iteration   3: 1009333.945 ops/s
# Warmup Iteration   4: 1014467.960 ops/s
# Warmup Iteration   5: 1011568.005 ops/s
# Warmup Iteration   6: 824868.563 ops/s
# Warmup Iteration   7: 1007100.810 ops/s
# Warmup Iteration   8: 1012702.330 ops/s
# Warmup Iteration   9: 1015212.974 ops/s
# Warmup Iteration  10: 1012226.996 ops/s
# Warmup Iteration  11: 1011953.944 ops/s
# Warmup Iteration  12: 1004756.863 ops/s
# Warmup Iteration  13: 1011496.673 ops/s
# Warmup Iteration  14: 1014511.458 ops/s
# Warmup Iteration  15: 1012805.337 ops/s
# Warmup Iteration  16: 1013432.319 ops/s
# Warmup Iteration  17: 1015379.290 ops/s
# Warmup Iteration  18: 1011367.797 ops/s
# Warmup Iteration  19: 1013180.301 ops/s
# Warmup Iteration  20: 1013536.057 ops/s
# Warmup Iteration  21: 1013524.659 ops/s
# Warmup Iteration  22: 1013749.485 ops/s
# Warmup Iteration  23: 1012414.898 ops/s
# Warmup Iteration  24: 1015186.921 ops/s
# Warmup Iteration  25: 1012852.678 ops/s
# Warmup Iteration  26: 1013596.178 ops/s
# Warmup Iteration  27: 1012592.853 ops/s
# Warmup Iteration  28: 1014261.641 ops/s
# Warmup Iteration  29: 1016409.556 ops/s
# Warmup Iteration  30: 1015383.886 ops/s
Iteration   1: 1016880.254 ops/s
Iteration   2: 1015857.553 ops/s
Iteration   3: 1013766.928 ops/s
Iteration   4: 1015994.951 ops/s
Iteration   5: 1014023.974 ops/s
Iteration   6: 1018368.952 ops/s
Iteration   7: 1010437.956 ops/s
Iteration   8: 1015084.082 ops/s
Iteration   9: 1017121.733 ops/s
Iteration  10: 1010279.626 ops/s
Iteration  11: 1017165.848 ops/s
Iteration  12: 1012709.446 ops/s
Iteration  13: 1013791.156 ops/s
Iteration  14: 1009044.270 ops/s
Iteration  15: 1008872.127 ops/s
Iteration  16: 1015249.354 ops/s
Iteration  17: 1013426.395 ops/s
Iteration  18: 1013151.861 ops/s
Iteration  19: 1017442.132 ops/s
Iteration  20: 1014317.929 ops/s
Iteration  21: 1017491.405 ops/s
Iteration  22: 1013945.331 ops/s
Iteration  23: 1011846.270 ops/s
Iteration  24: 1015950.558 ops/s
Iteration  25: 1014576.924 ops/s
Iteration  26: 1016279.785 ops/s
Iteration  27: 1014340.875 ops/s
Iteration  28: 1013730.642 ops/s
Iteration  29: 1015177.201 ops/s
Iteration  30: 1013585.166 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_flatCollectWithTarget":
  1014330.356 ±(99.9%) 1637.017 ops/s [Average]
  (min, avg, max) = (1008872.127, 1014330.356, 1018368.952), stdev = 2450.210
  CI (99.9%): [1012693.340, 1015967.373] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_flatCollectWithTarget  thrpt   30  1014330.356 ± 1637.017  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 370288.195 ops/s
# Warmup Iteration   2: 671159.055 ops/s
# Warmup Iteration   3: 743171.479 ops/s
# Warmup Iteration   4: 747703.419 ops/s
# Warmup Iteration   5: 747656.828 ops/s
# Warmup Iteration   6: 622690.412 ops/s
# Warmup Iteration   7: 747853.518 ops/s
# Warmup Iteration   8: 745632.382 ops/s
# Warmup Iteration   9: 748879.930 ops/s
# Warmup Iteration  10: 746199.110 ops/s
# Warmup Iteration  11: 745883.266 ops/s
# Warmup Iteration  12: 745531.446 ops/s
# Warmup Iteration  13: 747981.059 ops/s
# Warmup Iteration  14: 748283.412 ops/s
# Warmup Iteration  15: 748887.562 ops/s
# Warmup Iteration  16: 748026.229 ops/s
# Warmup Iteration  17: 749437.968 ops/s
# Warmup Iteration  18: 749861.776 ops/s
# Warmup Iteration  19: 748235.319 ops/s
# Warmup Iteration  20: 746657.170 ops/s
# Warmup Iteration  21: 750154.078 ops/s
# Warmup Iteration  22: 748860.720 ops/s
# Warmup Iteration  23: 747065.147 ops/s
# Warmup Iteration  24: 747491.911 ops/s
# Warmup Iteration  25: 746603.088 ops/s
# Warmup Iteration  26: 748901.355 ops/s
# Warmup Iteration  27: 748874.293 ops/s
# Warmup Iteration  28: 746773.977 ops/s
# Warmup Iteration  29: 743675.902 ops/s
# Warmup Iteration  30: 746008.992 ops/s
Iteration   1: 750500.312 ops/s
Iteration   2: 748747.259 ops/s
Iteration   3: 748268.081 ops/s
Iteration   4: 744907.427 ops/s
Iteration   5: 744302.699 ops/s
Iteration   6: 749989.461 ops/s
Iteration   7: 748222.016 ops/s
Iteration   8: 747520.615 ops/s
Iteration   9: 746046.011 ops/s
Iteration  10: 747342.988 ops/s
Iteration  11: 750244.755 ops/s
Iteration  12: 744962.076 ops/s
Iteration  13: 749893.385 ops/s
Iteration  14: 747026.967 ops/s
Iteration  15: 747585.528 ops/s
Iteration  16: 746160.775 ops/s
Iteration  17: 745472.968 ops/s
Iteration  18: 748821.943 ops/s
Iteration  19: 750105.244 ops/s
Iteration  20: 751060.548 ops/s
Iteration  21: 746565.163 ops/s
Iteration  22: 750049.142 ops/s
Iteration  23: 750522.988 ops/s
Iteration  24: 745574.608 ops/s
Iteration  25: 748075.179 ops/s
Iteration  26: 744403.261 ops/s
Iteration  27: 748710.496 ops/s
Iteration  28: 748755.826 ops/s
Iteration  29: 746572.721 ops/s
Iteration  30: 750048.370 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_forEach":
  747881.960 ±(99.9%) 1359.953 ops/s [Average]
  (min, avg, max) = (744302.699, 747881.960, 751060.548), stdev = 2035.514
  CI (99.9%): [746522.007, 749241.914] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_forEach  thrpt   30  747881.960 ± 1359.953  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_forEachWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_forEachWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 398801.545 ops/s
# Warmup Iteration   2: 739460.618 ops/s
# Warmup Iteration   3: 840731.683 ops/s
# Warmup Iteration   4: 845362.729 ops/s
# Warmup Iteration   5: 840211.889 ops/s
# Warmup Iteration   6: 693962.922 ops/s
# Warmup Iteration   7: 845307.875 ops/s
# Warmup Iteration   8: 846632.264 ops/s
# Warmup Iteration   9: 844967.400 ops/s
# Warmup Iteration  10: 843576.598 ops/s
# Warmup Iteration  11: 843619.187 ops/s
# Warmup Iteration  12: 844476.113 ops/s
# Warmup Iteration  13: 841745.254 ops/s
# Warmup Iteration  14: 841303.760 ops/s
# Warmup Iteration  15: 842010.069 ops/s
# Warmup Iteration  16: 843454.628 ops/s
# Warmup Iteration  17: 844287.868 ops/s
# Warmup Iteration  18: 840616.802 ops/s
# Warmup Iteration  19: 841647.898 ops/s
# Warmup Iteration  20: 839720.070 ops/s
# Warmup Iteration  21: 845844.519 ops/s
# Warmup Iteration  22: 845179.379 ops/s
# Warmup Iteration  23: 844244.468 ops/s
# Warmup Iteration  24: 846238.463 ops/s
# Warmup Iteration  25: 845346.351 ops/s
# Warmup Iteration  26: 845610.342 ops/s
# Warmup Iteration  27: 840854.490 ops/s
# Warmup Iteration  28: 846921.589 ops/s
# Warmup Iteration  29: 844653.809 ops/s
# Warmup Iteration  30: 844695.373 ops/s
Iteration   1: 845010.751 ops/s
Iteration   2: 835507.389 ops/s
Iteration   3: 845757.630 ops/s
Iteration   4: 843235.392 ops/s
Iteration   5: 841208.815 ops/s
Iteration   6: 842837.611 ops/s
Iteration   7: 843323.392 ops/s
Iteration   8: 848628.508 ops/s
Iteration   9: 845333.165 ops/s
Iteration  10: 845597.019 ops/s
Iteration  11: 843178.673 ops/s
Iteration  12: 845993.462 ops/s
Iteration  13: 845911.228 ops/s
Iteration  14: 839984.720 ops/s
Iteration  15: 844336.121 ops/s
Iteration  16: 842982.094 ops/s
Iteration  17: 846368.382 ops/s
Iteration  18: 846657.088 ops/s
Iteration  19: 847776.259 ops/s
Iteration  20: 840568.976 ops/s
Iteration  21: 835089.188 ops/s
Iteration  22: 841382.483 ops/s
Iteration  23: 840914.023 ops/s
Iteration  24: 844443.165 ops/s
Iteration  25: 844003.490 ops/s
Iteration  26: 845922.890 ops/s
Iteration  27: 845105.558 ops/s
Iteration  28: 844566.439 ops/s
Iteration  29: 845183.918 ops/s
Iteration  30: 847685.186 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_forEachWith":
  843816.434 ±(99.9%) 2118.689 ops/s [Average]
  (min, avg, max) = (835089.188, 843816.434, 848628.508), stdev = 3171.154
  CI (99.9%): [841697.745, 845935.123] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_forEachWith  thrpt   30  843816.434 ± 2118.689  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_forEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_forEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 323114.663 ops/s
# Warmup Iteration   2: 541779.162 ops/s
# Warmup Iteration   3: 631303.694 ops/s
# Warmup Iteration   4: 636189.222 ops/s
# Warmup Iteration   5: 634595.446 ops/s
# Warmup Iteration   6: 520004.063 ops/s
# Warmup Iteration   7: 637063.837 ops/s
# Warmup Iteration   8: 633639.918 ops/s
# Warmup Iteration   9: 637365.623 ops/s
# Warmup Iteration  10: 636284.262 ops/s
# Warmup Iteration  11: 634640.133 ops/s
# Warmup Iteration  12: 635799.852 ops/s
# Warmup Iteration  13: 634648.041 ops/s
# Warmup Iteration  14: 637442.690 ops/s
# Warmup Iteration  15: 634773.147 ops/s
# Warmup Iteration  16: 636490.126 ops/s
# Warmup Iteration  17: 636742.426 ops/s
# Warmup Iteration  18: 635799.654 ops/s
# Warmup Iteration  19: 635815.076 ops/s
# Warmup Iteration  20: 635052.919 ops/s
# Warmup Iteration  21: 635546.911 ops/s
# Warmup Iteration  22: 637499.490 ops/s
# Warmup Iteration  23: 634635.387 ops/s
# Warmup Iteration  24: 636843.515 ops/s
# Warmup Iteration  25: 634888.921 ops/s
# Warmup Iteration  26: 637260.004 ops/s
# Warmup Iteration  27: 629456.177 ops/s
# Warmup Iteration  28: 635918.458 ops/s
# Warmup Iteration  29: 636350.958 ops/s
# Warmup Iteration  30: 637653.032 ops/s
Iteration   1: 635830.973 ops/s
Iteration   2: 635079.311 ops/s
Iteration   3: 637338.452 ops/s
Iteration   4: 635396.368 ops/s
Iteration   5: 637200.636 ops/s
Iteration   6: 637594.158 ops/s
Iteration   7: 636062.769 ops/s
Iteration   8: 636866.190 ops/s
Iteration   9: 637030.123 ops/s
Iteration  10: 637266.742 ops/s
Iteration  11: 635114.955 ops/s
Iteration  12: 636098.326 ops/s
Iteration  13: 637858.557 ops/s
Iteration  14: 637232.265 ops/s
Iteration  15: 636878.630 ops/s
Iteration  16: 635942.219 ops/s
Iteration  17: 633413.119 ops/s
Iteration  18: 636544.902 ops/s
Iteration  19: 636649.921 ops/s
Iteration  20: 637158.965 ops/s
Iteration  21: 636417.374 ops/s
Iteration  22: 636616.893 ops/s
Iteration  23: 634032.037 ops/s
Iteration  24: 636961.491 ops/s
Iteration  25: 636494.562 ops/s
Iteration  26: 636060.356 ops/s
Iteration  27: 636814.497 ops/s
Iteration  28: 634731.493 ops/s
Iteration  29: 637264.338 ops/s
Iteration  30: 635925.756 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_forEachWithIndex":
  636329.213 ±(99.9%) 701.337 ops/s [Average]
  (min, avg, max) = (633413.119, 636329.213, 637858.557), stdev = 1049.728
  CI (99.9%): [635627.876, 637030.549] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score     Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_forEachWithIndex  thrpt   30  636329.213 ± 701.337  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_forLoop$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_forLoop

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1850068.781 ops/s
# Warmup Iteration   2: 3119542.265 ops/s
# Warmup Iteration   3: 3672575.200 ops/s
# Warmup Iteration   4: 3693662.634 ops/s
# Warmup Iteration   5: 3675060.161 ops/s
# Warmup Iteration   6: 2946581.762 ops/s
# Warmup Iteration   7: 3700353.027 ops/s
# Warmup Iteration   8: 3688671.889 ops/s
# Warmup Iteration   9: 3704151.707 ops/s
# Warmup Iteration  10: 3690882.152 ops/s
# Warmup Iteration  11: 3695655.806 ops/s
# Warmup Iteration  12: 3684875.069 ops/s
# Warmup Iteration  13: 3702014.398 ops/s
# Warmup Iteration  14: 3692008.890 ops/s
# Warmup Iteration  15: 3694922.653 ops/s
# Warmup Iteration  16: 3707570.484 ops/s
# Warmup Iteration  17: 3698790.959 ops/s
# Warmup Iteration  18: 3707065.922 ops/s
# Warmup Iteration  19: 3706843.224 ops/s
# Warmup Iteration  20: 3705498.008 ops/s
# Warmup Iteration  21: 3707589.940 ops/s
# Warmup Iteration  22: 3701346.747 ops/s
# Warmup Iteration  23: 3702336.695 ops/s
# Warmup Iteration  24: 3706032.890 ops/s
# Warmup Iteration  25: 3697021.712 ops/s
# Warmup Iteration  26: 3711322.164 ops/s
# Warmup Iteration  27: 3705449.017 ops/s
# Warmup Iteration  28: 3708635.641 ops/s
# Warmup Iteration  29: 3698362.246 ops/s
# Warmup Iteration  30: 3710942.458 ops/s
Iteration   1: 3668614.964 ops/s
Iteration   2: 3700611.706 ops/s
Iteration   3: 3700479.245 ops/s
Iteration   4: 3712422.865 ops/s
Iteration   5: 3670016.790 ops/s
Iteration   6: 3699754.054 ops/s
Iteration   7: 3700108.500 ops/s
Iteration   8: 3695963.465 ops/s
Iteration   9: 3701564.396 ops/s
Iteration  10: 3703406.961 ops/s
Iteration  11: 3707196.702 ops/s
Iteration  12: 3686459.121 ops/s
Iteration  13: 3687626.756 ops/s
Iteration  14: 3693914.088 ops/s
Iteration  15: 3686121.520 ops/s
Iteration  16: 3672178.974 ops/s
Iteration  17: 3708901.676 ops/s
Iteration  18: 3699574.759 ops/s
Iteration  19: 3700348.186 ops/s
Iteration  20: 3713107.647 ops/s
Iteration  21: 3694162.618 ops/s
Iteration  22: 3704860.949 ops/s
Iteration  23: 3687057.357 ops/s
Iteration  24: 3709050.695 ops/s
Iteration  25: 3697289.874 ops/s
Iteration  26: 3714670.939 ops/s
Iteration  27: 3697857.311 ops/s
Iteration  28: 3713182.835 ops/s
Iteration  29: 3704118.568 ops/s
Iteration  30: 3697760.205 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_forLoop":
  3697612.791 ±(99.9%) 8108.728 ops/s [Average]
  (min, avg, max) = (3668614.964, 3697612.791, 3714670.939), stdev = 12136.763
  CI (99.9%): [3689504.063, 3705721.519] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_forLoop  thrpt   30  3697612.791 ± 8108.728  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_fusedCollectMakeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_fusedCollectMakeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 915797.593 ops/s
# Warmup Iteration   2: 2023864.427 ops/s
# Warmup Iteration   3: 2108560.883 ops/s
# Warmup Iteration   4: 2130174.591 ops/s
# Warmup Iteration   5: 1757865.440 ops/s
# Warmup Iteration   6: 2129232.707 ops/s
# Warmup Iteration   7: 2122173.368 ops/s
# Warmup Iteration   8: 2124848.254 ops/s
# Warmup Iteration   9: 2125913.364 ops/s
# Warmup Iteration  10: 2122624.431 ops/s
# Warmup Iteration  11: 2118186.567 ops/s
# Warmup Iteration  12: 2122011.857 ops/s
# Warmup Iteration  13: 2126392.927 ops/s
# Warmup Iteration  14: 2123860.547 ops/s
# Warmup Iteration  15: 2126653.816 ops/s
# Warmup Iteration  16: 2128212.940 ops/s
# Warmup Iteration  17: 2126640.542 ops/s
# Warmup Iteration  18: 2118906.622 ops/s
# Warmup Iteration  19: 2120746.671 ops/s
# Warmup Iteration  20: 2128258.885 ops/s
# Warmup Iteration  21: 2131213.716 ops/s
# Warmup Iteration  22: 2130085.448 ops/s
# Warmup Iteration  23: 2125021.979 ops/s
# Warmup Iteration  24: 2126607.777 ops/s
# Warmup Iteration  25: 2129894.173 ops/s
# Warmup Iteration  26: 2126125.160 ops/s
# Warmup Iteration  27: 2133445.931 ops/s
# Warmup Iteration  28: 2125670.302 ops/s
# Warmup Iteration  29: 2127670.737 ops/s
# Warmup Iteration  30: 2128651.318 ops/s
Iteration   1: 2127672.890 ops/s
Iteration   2: 2121343.008 ops/s
Iteration   3: 2130121.857 ops/s
Iteration   4: 2113245.309 ops/s
Iteration   5: 2128865.685 ops/s
Iteration   6: 2126133.298 ops/s
Iteration   7: 2128129.918 ops/s
Iteration   8: 2132228.877 ops/s
Iteration   9: 2131716.783 ops/s
Iteration  10: 2127843.721 ops/s
Iteration  11: 2113324.466 ops/s
Iteration  12: 2121377.714 ops/s
Iteration  13: 2123763.969 ops/s
Iteration  14: 2119206.838 ops/s
Iteration  15: 2132787.693 ops/s
Iteration  16: 2112731.970 ops/s
Iteration  17: 2120293.797 ops/s
Iteration  18: 2117832.457 ops/s
Iteration  19: 2121274.645 ops/s
Iteration  20: 2131978.795 ops/s
Iteration  21: 2128461.499 ops/s
Iteration  22: 2127330.311 ops/s
Iteration  23: 2121386.550 ops/s
Iteration  24: 2135980.675 ops/s
Iteration  25: 2128898.187 ops/s
Iteration  26: 2124805.138 ops/s
Iteration  27: 2115087.721 ops/s
Iteration  28: 2128861.796 ops/s
Iteration  29: 2129141.996 ops/s
Iteration  30: 2124968.342 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_fusedCollectMakeString":
  2124893.197 ±(99.9%) 4197.102 ops/s [Average]
  (min, avg, max) = (2112731.970, 2124893.197, 2135980.675), stdev = 6282.025
  CI (99.9%): [2120696.095, 2129090.298] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_fusedCollectMakeString  thrpt   30  2124893.197 ± 4197.102  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_getAny$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_getAny

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1197623.847 ops/s
# Warmup Iteration   2: 2139769.065 ops/s
# Warmup Iteration   3: 2493245.124 ops/s
# Warmup Iteration   4: 2492655.917 ops/s
# Warmup Iteration   5: 2502500.911 ops/s
# Warmup Iteration   6: 1991106.433 ops/s
# Warmup Iteration   7: 2491426.665 ops/s
# Warmup Iteration   8: 2492446.860 ops/s
# Warmup Iteration   9: 2502805.986 ops/s
# Warmup Iteration  10: 2506570.655 ops/s
# Warmup Iteration  11: 2500169.139 ops/s
# Warmup Iteration  12: 2506142.912 ops/s
# Warmup Iteration  13: 2508207.897 ops/s
# Warmup Iteration  14: 2507388.106 ops/s
# Warmup Iteration  15: 2507850.939 ops/s
# Warmup Iteration  16: 2504362.060 ops/s
# Warmup Iteration  17: 2506775.289 ops/s
# Warmup Iteration  18: 2495470.439 ops/s
# Warmup Iteration  19: 2503743.781 ops/s
# Warmup Iteration  20: 2503906.504 ops/s
# Warmup Iteration  21: 2502660.203 ops/s
# Warmup Iteration  22: 2505978.977 ops/s
# Warmup Iteration  23: 2502431.728 ops/s
# Warmup Iteration  24: 2495064.303 ops/s
# Warmup Iteration  25: 2501488.310 ops/s
# Warmup Iteration  26: 2496001.084 ops/s
# Warmup Iteration  27: 2496692.250 ops/s
# Warmup Iteration  28: 2494846.780 ops/s
# Warmup Iteration  29: 2503499.106 ops/s
# Warmup Iteration  30: 2502255.153 ops/s
Iteration   1: 2486510.098 ops/s
Iteration   2: 2481680.109 ops/s
Iteration   3: 2508931.123 ops/s
Iteration   4: 2494967.708 ops/s
Iteration   5: 2493338.109 ops/s
Iteration   6: 2498799.670 ops/s
Iteration   7: 2499454.376 ops/s
Iteration   8: 2504638.353 ops/s
Iteration   9: 2494523.063 ops/s
Iteration  10: 2506270.891 ops/s
Iteration  11: 2508680.228 ops/s
Iteration  12: 2493182.827 ops/s
Iteration  13: 2497420.250 ops/s
Iteration  14: 2505919.388 ops/s
Iteration  15: 2501379.839 ops/s
Iteration  16: 2494533.379 ops/s
Iteration  17: 2512091.136 ops/s
Iteration  18: 2493645.097 ops/s
Iteration  19: 2505559.969 ops/s
Iteration  20: 2490464.787 ops/s
Iteration  21: 2500821.669 ops/s
Iteration  22: 2506752.757 ops/s
Iteration  23: 2503550.715 ops/s
Iteration  24: 2488246.199 ops/s
Iteration  25: 2507029.795 ops/s
Iteration  26: 2504044.677 ops/s
Iteration  27: 2503204.749 ops/s
Iteration  28: 2508466.616 ops/s
Iteration  29: 2507781.338 ops/s
Iteration  30: 2504283.382 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_getAny":
  2500205.743 ±(99.9%) 5093.862 ops/s [Average]
  (min, avg, max) = (2481680.109, 2500205.743, 2512091.136), stdev = 7624.253
  CI (99.9%): [2495111.881, 2505299.605] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_getAny  thrpt   30  2500205.743 ± 5093.862  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_getFirst$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_getFirst

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 673477.100 ops/s
# Warmup Iteration   2: 1164946.871 ops/s
# Warmup Iteration   3: 1373204.524 ops/s
# Warmup Iteration   4: 1383669.421 ops/s
# Warmup Iteration   5: 1388739.319 ops/s
# Warmup Iteration   6: 1105520.932 ops/s
# Warmup Iteration   7: 1382460.144 ops/s
# Warmup Iteration   8: 1380956.878 ops/s
# Warmup Iteration   9: 1384457.342 ops/s
# Warmup Iteration  10: 1375495.860 ops/s
# Warmup Iteration  11: 1384912.759 ops/s
# Warmup Iteration  12: 1383315.526 ops/s
# Warmup Iteration  13: 1382869.413 ops/s
# Warmup Iteration  14: 1386665.432 ops/s
# Warmup Iteration  15: 1380732.525 ops/s
# Warmup Iteration  16: 1384806.847 ops/s
# Warmup Iteration  17: 1378368.243 ops/s
# Warmup Iteration  18: 1382772.946 ops/s
# Warmup Iteration  19: 1383361.498 ops/s
# Warmup Iteration  20: 1381836.236 ops/s
# Warmup Iteration  21: 1383211.112 ops/s
# Warmup Iteration  22: 1383950.369 ops/s
# Warmup Iteration  23: 1382044.967 ops/s
# Warmup Iteration  24: 1383886.687 ops/s
# Warmup Iteration  25: 1386544.165 ops/s
# Warmup Iteration  26: 1383097.394 ops/s
# Warmup Iteration  27: 1383667.766 ops/s
# Warmup Iteration  28: 1382899.392 ops/s
# Warmup Iteration  29: 1382927.750 ops/s
# Warmup Iteration  30: 1386303.938 ops/s
Iteration   1: 1383207.410 ops/s
Iteration   2: 1386956.680 ops/s
Iteration   3: 1383417.789 ops/s
Iteration   4: 1387713.543 ops/s
Iteration   5: 1386739.930 ops/s
Iteration   6: 1383611.801 ops/s
Iteration   7: 1383765.528 ops/s
Iteration   8: 1373354.079 ops/s
Iteration   9: 1384817.779 ops/s
Iteration  10: 1370314.825 ops/s
Iteration  11: 1378847.586 ops/s
Iteration  12: 1383666.904 ops/s
Iteration  13: 1382497.496 ops/s
Iteration  14: 1385048.858 ops/s
Iteration  15: 1382184.167 ops/s
Iteration  16: 1384822.196 ops/s
Iteration  17: 1371270.587 ops/s
Iteration  18: 1376743.709 ops/s
Iteration  19: 1380871.161 ops/s
Iteration  20: 1385284.743 ops/s
Iteration  21: 1378708.596 ops/s
Iteration  22: 1381900.057 ops/s
Iteration  23: 1377658.019 ops/s
Iteration  24: 1378210.380 ops/s
Iteration  25: 1378624.445 ops/s
Iteration  26: 1377147.767 ops/s
Iteration  27: 1376066.177 ops/s
Iteration  28: 1384019.760 ops/s
Iteration  29: 1372212.010 ops/s
Iteration  30: 1384827.860 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_getFirst":
  1380817.061 ±(99.9%) 3219.196 ops/s [Average]
  (min, avg, max) = (1370314.825, 1380817.061, 1387713.543), stdev = 4818.341
  CI (99.9%): [1377597.866, 1384036.257] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_getFirst  thrpt   30  1380817.061 ± 3219.196  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_getLast$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_getLast

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 667217.752 ops/s
# Warmup Iteration   2: 1114772.153 ops/s
# Warmup Iteration   3: 1304157.662 ops/s
# Warmup Iteration   4: 1316298.973 ops/s
# Warmup Iteration   5: 1312763.357 ops/s
# Warmup Iteration   6: 1054720.405 ops/s
# Warmup Iteration   7: 1313445.269 ops/s
# Warmup Iteration   8: 1316155.344 ops/s
# Warmup Iteration   9: 1321207.065 ops/s
# Warmup Iteration  10: 1319379.464 ops/s
# Warmup Iteration  11: 1312179.472 ops/s
# Warmup Iteration  12: 1311182.231 ops/s
# Warmup Iteration  13: 1315415.562 ops/s
# Warmup Iteration  14: 1319976.531 ops/s
# Warmup Iteration  15: 1316387.852 ops/s
# Warmup Iteration  16: 1311883.304 ops/s
# Warmup Iteration  17: 1315931.037 ops/s
# Warmup Iteration  18: 1315736.644 ops/s
# Warmup Iteration  19: 1315747.874 ops/s
# Warmup Iteration  20: 1318798.855 ops/s
# Warmup Iteration  21: 1308697.975 ops/s
# Warmup Iteration  22: 1315100.406 ops/s
# Warmup Iteration  23: 1316582.661 ops/s
# Warmup Iteration  24: 1315689.936 ops/s
# Warmup Iteration  25: 1317407.173 ops/s
# Warmup Iteration  26: 1317394.614 ops/s
# Warmup Iteration  27: 1313993.426 ops/s
# Warmup Iteration  28: 1315532.869 ops/s
# Warmup Iteration  29: 1319981.323 ops/s
# Warmup Iteration  30: 1312322.846 ops/s
Iteration   1: 1309481.162 ops/s
Iteration   2: 1312514.552 ops/s
Iteration   3: 1314024.516 ops/s
Iteration   4: 1315331.521 ops/s
Iteration   5: 1319665.958 ops/s
Iteration   6: 1317144.049 ops/s
Iteration   7: 1319541.080 ops/s
Iteration   8: 1314017.114 ops/s
Iteration   9: 1319049.330 ops/s
Iteration  10: 1317165.479 ops/s
Iteration  11: 1317884.434 ops/s
Iteration  12: 1316950.856 ops/s
Iteration  13: 1312976.120 ops/s
Iteration  14: 1313131.695 ops/s
Iteration  15: 1317029.043 ops/s
Iteration  16: 1317375.331 ops/s
Iteration  17: 1317568.454 ops/s
Iteration  18: 1317252.852 ops/s
Iteration  19: 1317944.156 ops/s
Iteration  20: 1316575.542 ops/s
Iteration  21: 1313700.015 ops/s
Iteration  22: 1318762.012 ops/s
Iteration  23: 1314941.410 ops/s
Iteration  24: 1319114.631 ops/s
Iteration  25: 1315009.132 ops/s
Iteration  26: 1320633.862 ops/s
Iteration  27: 1315255.669 ops/s
Iteration  28: 1316024.787 ops/s
Iteration  29: 1319925.301 ops/s
Iteration  30: 1314192.350 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_getLast":
  1316339.414 ±(99.9%) 1735.831 ops/s [Average]
  (min, avg, max) = (1309481.162, 1316339.414, 1320633.862), stdev = 2598.111
  CI (99.9%): [1314603.583, 1318075.245] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_getLast  thrpt   30  1316339.414 ± 1735.831  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_getOnly$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_getOnly

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1830041.639 ops/s
# Warmup Iteration   2: 4283947.599 ops/s
# Warmup Iteration   3: 4630806.598 ops/s
# Warmup Iteration   4: 3703372.136 ops/s
# Warmup Iteration   5: 4626384.693 ops/s
# Warmup Iteration   6: 4616331.867 ops/s
# Warmup Iteration   7: 4618387.878 ops/s
# Warmup Iteration   8: 4609403.622 ops/s
# Warmup Iteration   9: 4626851.012 ops/s
# Warmup Iteration  10: 4599529.903 ops/s
# Warmup Iteration  11: 4600186.943 ops/s
# Warmup Iteration  12: 4605837.481 ops/s
# Warmup Iteration  13: 4630398.625 ops/s
# Warmup Iteration  14: 4602823.065 ops/s
# Warmup Iteration  15: 4623951.781 ops/s
# Warmup Iteration  16: 4619541.382 ops/s
# Warmup Iteration  17: 4628580.983 ops/s
# Warmup Iteration  18: 4624150.930 ops/s
# Warmup Iteration  19: 4627951.456 ops/s
# Warmup Iteration  20: 4624104.107 ops/s
# Warmup Iteration  21: 4628830.220 ops/s
# Warmup Iteration  22: 4614938.308 ops/s
# Warmup Iteration  23: 4623402.589 ops/s
# Warmup Iteration  24: 4632574.792 ops/s
# Warmup Iteration  25: 4615843.073 ops/s
# Warmup Iteration  26: 4635737.917 ops/s
# Warmup Iteration  27: 4622267.872 ops/s
# Warmup Iteration  28: 4626298.292 ops/s
# Warmup Iteration  29: 4611674.326 ops/s
# Warmup Iteration  30: 4605523.561 ops/s
Iteration   1: 4633393.585 ops/s
Iteration   2: 4617201.416 ops/s
Iteration   3: 4603461.199 ops/s
Iteration   4: 4626229.814 ops/s
Iteration   5: 4619197.540 ops/s
Iteration   6: 4609099.429 ops/s
Iteration   7: 4631766.069 ops/s
Iteration   8: 4628596.416 ops/s
Iteration   9: 4626937.644 ops/s
Iteration  10: 4577826.355 ops/s
Iteration  11: 4638242.805 ops/s
Iteration  12: 4613375.017 ops/s
Iteration  13: 4616017.374 ops/s
Iteration  14: 4632048.195 ops/s
Iteration  15: 4623873.504 ops/s
Iteration  16: 4641961.053 ops/s
Iteration  17: 4628704.398 ops/s
Iteration  18: 4622701.304 ops/s
Iteration  19: 4641843.430 ops/s
Iteration  20: 4623941.603 ops/s
Iteration  21: 4612820.089 ops/s
Iteration  22: 4632032.534 ops/s
Iteration  23: 4615157.495 ops/s
Iteration  24: 4609523.632 ops/s
Iteration  25: 4613496.686 ops/s
Iteration  26: 4601910.318 ops/s
Iteration  27: 4629266.989 ops/s
Iteration  28: 4608506.750 ops/s
Iteration  29: 4628258.850 ops/s
Iteration  30: 4627977.726 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_getOnly":
  4621178.974 ±(99.9%) 9011.666 ops/s [Average]
  (min, avg, max) = (4577826.355, 4621178.974, 4641961.053), stdev = 13488.239
  CI (99.9%): [4612167.308, 4630190.640] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_getOnly  thrpt   30  4621178.974 ± 9011.666  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_getOnly_empty_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_getOnly_empty_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 715390.281 ops/s
# Warmup Iteration   2: 748924.683 ops/s
# Warmup Iteration   3: 1004915.481 ops/s
# Warmup Iteration   4: 999054.228 ops/s
# Warmup Iteration   5: 992876.869 ops/s
# Warmup Iteration   6: 997856.830 ops/s
# Warmup Iteration   7: 996812.934 ops/s
# Warmup Iteration   8: 994228.397 ops/s
# Warmup Iteration   9: 996703.145 ops/s
# Warmup Iteration  10: 998674.616 ops/s
# Warmup Iteration  11: 904502.604 ops/s
# Warmup Iteration  12: 930342.114 ops/s
# Warmup Iteration  13: 1001709.419 ops/s
# Warmup Iteration  14: 997347.940 ops/s
# Warmup Iteration  15: 1000972.706 ops/s
# Warmup Iteration  16: 999431.924 ops/s
# Warmup Iteration  17: 1068809.254 ops/s
# Warmup Iteration  18: 1065305.343 ops/s
# Warmup Iteration  19: 1067789.905 ops/s
# Warmup Iteration  20: 1067697.112 ops/s
# Warmup Iteration  21: 1062514.755 ops/s
# Warmup Iteration  22: 1066600.720 ops/s
# Warmup Iteration  23: 1067500.169 ops/s
# Warmup Iteration  24: 1070300.156 ops/s
# Warmup Iteration  25: 1067634.584 ops/s
# Warmup Iteration  26: 1072207.084 ops/s
# Warmup Iteration  27: 1068657.732 ops/s
# Warmup Iteration  28: 1065340.241 ops/s
# Warmup Iteration  29: 1069374.191 ops/s
# Warmup Iteration  30: 1067441.767 ops/s
Iteration   1: 1070553.077 ops/s
Iteration   2: 1070187.425 ops/s
Iteration   3: 1071144.991 ops/s
Iteration   4: 1064912.033 ops/s
Iteration   5: 1069758.449 ops/s
Iteration   6: 1071799.138 ops/s
Iteration   7: 1062675.992 ops/s
Iteration   8: 1067660.417 ops/s
Iteration   9: 1073174.810 ops/s
Iteration  10: 1065419.972 ops/s
Iteration  11: 1068430.099 ops/s
Iteration  12: 1069523.860 ops/s
Iteration  13: 1068736.485 ops/s
Iteration  14: 1063906.751 ops/s
Iteration  15: 1067446.555 ops/s
Iteration  16: 1060070.201 ops/s
Iteration  17: 1065321.335 ops/s
Iteration  18: 1063610.958 ops/s
Iteration  19: 1068194.905 ops/s
Iteration  20: 1067793.002 ops/s
Iteration  21: 1068568.227 ops/s
Iteration  22: 1065565.831 ops/s
Iteration  23: 1067988.560 ops/s
Iteration  24: 1068224.780 ops/s
Iteration  25: 1067848.701 ops/s
Iteration  26: 1068305.702 ops/s
Iteration  27: 1060863.827 ops/s
Iteration  28: 1067658.117 ops/s
Iteration  29: 1065446.130 ops/s
Iteration  30: 1070809.734 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_getOnly_empty_throws":
  1067386.669 ±(99.9%) 2076.943 ops/s [Average]
  (min, avg, max) = (1060070.201, 1067386.669, 1073174.810), stdev = 3108.671
  CI (99.9%): [1065309.726, 1069463.612] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_getOnly_empty_throws  thrpt   30  1067386.669 ± 2076.943  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_getOnly_not_only_one_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_getOnly_not_only_one_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 633554.504 ops/s
# Warmup Iteration   2: 659959.379 ops/s
# Warmup Iteration   3: 899888.926 ops/s
# Warmup Iteration   4: 906454.981 ops/s
# Warmup Iteration   5: 897689.143 ops/s
# Warmup Iteration   6: 912252.699 ops/s
# Warmup Iteration   7: 911575.083 ops/s
# Warmup Iteration   8: 909377.214 ops/s
# Warmup Iteration   9: 908164.789 ops/s
# Warmup Iteration  10: 911745.286 ops/s
# Warmup Iteration  11: 858845.190 ops/s
# Warmup Iteration  12: 806167.837 ops/s
# Warmup Iteration  13: 913898.390 ops/s
# Warmup Iteration  14: 912064.016 ops/s
# Warmup Iteration  15: 910722.994 ops/s
# Warmup Iteration  16: 912949.093 ops/s
# Warmup Iteration  17: 965824.612 ops/s
# Warmup Iteration  18: 966254.358 ops/s
# Warmup Iteration  19: 966828.024 ops/s
# Warmup Iteration  20: 962761.602 ops/s
# Warmup Iteration  21: 963433.286 ops/s
# Warmup Iteration  22: 965243.715 ops/s
# Warmup Iteration  23: 963570.498 ops/s
# Warmup Iteration  24: 958661.891 ops/s
# Warmup Iteration  25: 966278.271 ops/s
# Warmup Iteration  26: 965009.204 ops/s
# Warmup Iteration  27: 964061.485 ops/s
# Warmup Iteration  28: 959251.871 ops/s
# Warmup Iteration  29: 960466.020 ops/s
# Warmup Iteration  30: 963581.515 ops/s
Iteration   1: 964262.815 ops/s
Iteration   2: 967777.974 ops/s
Iteration   3: 964631.588 ops/s
Iteration   4: 964421.618 ops/s
Iteration   5: 965647.745 ops/s
Iteration   6: 963102.165 ops/s
Iteration   7: 959786.656 ops/s
Iteration   8: 961095.563 ops/s
Iteration   9: 967193.202 ops/s
Iteration  10: 968037.259 ops/s
Iteration  11: 961986.945 ops/s
Iteration  12: 961732.615 ops/s
Iteration  13: 962914.361 ops/s
Iteration  14: 964298.928 ops/s
Iteration  15: 958889.142 ops/s
Iteration  16: 958435.415 ops/s
Iteration  17: 959531.530 ops/s
Iteration  18: 957194.532 ops/s
Iteration  19: 959812.523 ops/s
Iteration  20: 964793.463 ops/s
Iteration  21: 966629.420 ops/s
Iteration  22: 965389.386 ops/s
Iteration  23: 963989.134 ops/s
Iteration  24: 965869.340 ops/s
Iteration  25: 965350.128 ops/s
Iteration  26: 967323.240 ops/s
Iteration  27: 966162.017 ops/s
Iteration  28: 967609.610 ops/s
Iteration  29: 966641.643 ops/s
Iteration  30: 961688.682 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_getOnly_not_only_one_throws":
  963739.955 ±(99.9%) 2062.317 ops/s [Average]
  (min, avg, max) = (957194.532, 963739.955, 968037.259), stdev = 3086.779
  CI (99.9%): [961677.638, 965802.272] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_getOnly_not_only_one_throws  thrpt   30  963739.955 ± 2062.317  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_groupBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_groupBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 79732.596 ops/s
# Warmup Iteration   2: 117445.967 ops/s
# Warmup Iteration   3: 153659.943 ops/s
# Warmup Iteration   4: 150722.402 ops/s
# Warmup Iteration   5: 153441.854 ops/s
# Warmup Iteration   6: 153456.380 ops/s
# Warmup Iteration   7: 153810.884 ops/s
# Warmup Iteration   8: 126299.586 ops/s
# Warmup Iteration   9: 153820.928 ops/s
# Warmup Iteration  10: 153828.078 ops/s
# Warmup Iteration  11: 153651.414 ops/s
# Warmup Iteration  12: 153085.760 ops/s
# Warmup Iteration  13: 153618.943 ops/s
# Warmup Iteration  14: 153709.011 ops/s
# Warmup Iteration  15: 153768.956 ops/s
# Warmup Iteration  16: 153277.080 ops/s
# Warmup Iteration  17: 153302.726 ops/s
# Warmup Iteration  18: 153548.960 ops/s
# Warmup Iteration  19: 153963.380 ops/s
# Warmup Iteration  20: 153811.339 ops/s
# Warmup Iteration  21: 153671.503 ops/s
# Warmup Iteration  22: 153501.441 ops/s
# Warmup Iteration  23: 153523.047 ops/s
# Warmup Iteration  24: 153352.503 ops/s
# Warmup Iteration  25: 153904.729 ops/s
# Warmup Iteration  26: 153634.359 ops/s
# Warmup Iteration  27: 153115.245 ops/s
# Warmup Iteration  28: 153568.512 ops/s
# Warmup Iteration  29: 153606.731 ops/s
# Warmup Iteration  30: 153730.540 ops/s
Iteration   1: 153079.289 ops/s
Iteration   2: 153933.023 ops/s
Iteration   3: 153678.851 ops/s
Iteration   4: 153686.112 ops/s
Iteration   5: 153629.341 ops/s
Iteration   6: 153248.128 ops/s
Iteration   7: 153924.814 ops/s
Iteration   8: 153272.285 ops/s
Iteration   9: 153608.500 ops/s
Iteration  10: 153394.133 ops/s
Iteration  11: 151417.337 ops/s
Iteration  12: 154097.469 ops/s
Iteration  13: 153449.181 ops/s
Iteration  14: 153438.201 ops/s
Iteration  15: 153407.640 ops/s
Iteration  16: 152468.637 ops/s
Iteration  17: 153720.060 ops/s
Iteration  18: 153365.022 ops/s
Iteration  19: 153116.312 ops/s
Iteration  20: 153577.353 ops/s
Iteration  21: 153187.498 ops/s
Iteration  22: 153734.576 ops/s
Iteration  23: 153985.065 ops/s
Iteration  24: 153560.797 ops/s
Iteration  25: 153908.577 ops/s
Iteration  26: 153561.509 ops/s
Iteration  27: 153874.364 ops/s
Iteration  28: 153945.116 ops/s
Iteration  29: 153099.678 ops/s
Iteration  30: 153973.793 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_groupBy":
  153478.089 ±(99.9%) 351.579 ops/s [Average]
  (min, avg, max) = (151417.337, 153478.089, 154097.469), stdev = 526.227
  CI (99.9%): [153126.509, 153829.668] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score     Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_groupBy  thrpt   30  153478.089 ± 351.579  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_groupByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_groupByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 21683.641 ops/s
# Warmup Iteration   2: 30549.961 ops/s
# Warmup Iteration   3: 41150.901 ops/s
# Warmup Iteration   4: 40945.527 ops/s
# Warmup Iteration   5: 41221.331 ops/s
# Warmup Iteration   6: 41246.948 ops/s
# Warmup Iteration   7: 41229.985 ops/s
# Warmup Iteration   8: 36625.792 ops/s
# Warmup Iteration   9: 38578.204 ops/s
# Warmup Iteration  10: 41340.574 ops/s
# Warmup Iteration  11: 41302.122 ops/s
# Warmup Iteration  12: 41340.791 ops/s
# Warmup Iteration  13: 41290.557 ops/s
# Warmup Iteration  14: 41301.888 ops/s
# Warmup Iteration  15: 41267.223 ops/s
# Warmup Iteration  16: 41340.850 ops/s
# Warmup Iteration  17: 41379.649 ops/s
# Warmup Iteration  18: 41216.337 ops/s
# Warmup Iteration  19: 41228.615 ops/s
# Warmup Iteration  20: 41106.399 ops/s
# Warmup Iteration  21: 41352.809 ops/s
# Warmup Iteration  22: 41282.376 ops/s
# Warmup Iteration  23: 41163.706 ops/s
# Warmup Iteration  24: 41355.390 ops/s
# Warmup Iteration  25: 41253.219 ops/s
# Warmup Iteration  26: 41103.149 ops/s
# Warmup Iteration  27: 41281.611 ops/s
# Warmup Iteration  28: 41162.312 ops/s
# Warmup Iteration  29: 41235.228 ops/s
# Warmup Iteration  30: 41240.878 ops/s
Iteration   1: 41448.228 ops/s
Iteration   2: 41287.803 ops/s
Iteration   3: 41310.024 ops/s
Iteration   4: 41392.304 ops/s
Iteration   5: 41340.408 ops/s
Iteration   6: 41385.098 ops/s
Iteration   7: 41415.126 ops/s
Iteration   8: 41341.850 ops/s
Iteration   9: 41391.097 ops/s
Iteration  10: 41235.308 ops/s
Iteration  11: 41245.511 ops/s
Iteration  12: 41367.809 ops/s
Iteration  13: 41288.030 ops/s
Iteration  14: 41082.939 ops/s
Iteration  15: 41211.149 ops/s
Iteration  16: 41316.370 ops/s
Iteration  17: 41373.246 ops/s
Iteration  18: 41385.574 ops/s
Iteration  19: 41418.281 ops/s
Iteration  20: 41371.079 ops/s
Iteration  21: 41311.235 ops/s
Iteration  22: 41393.885 ops/s
Iteration  23: 41360.877 ops/s
Iteration  24: 41336.287 ops/s
Iteration  25: 41433.345 ops/s
Iteration  26: 41369.234 ops/s
Iteration  27: 41331.428 ops/s
Iteration  28: 41159.308 ops/s
Iteration  29: 41260.430 ops/s
Iteration  30: 41405.343 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_groupByEach":
  41332.287 ±(99.9%) 55.558 ops/s [Average]
  (min, avg, max) = (41082.939, 41332.287, 41448.228), stdev = 83.156
  CI (99.9%): [41276.729, 41387.844] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt      Score    Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_groupByEach  thrpt   30  41332.287 ± 55.558  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_groupByUniqueKey$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_groupByUniqueKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1333083.075 ops/s
# Warmup Iteration   2: 2932308.441 ops/s
# Warmup Iteration   3: 3112874.085 ops/s
# Warmup Iteration   4: 3126308.362 ops/s
# Warmup Iteration   5: 2545014.729 ops/s
# Warmup Iteration   6: 3122874.011 ops/s
# Warmup Iteration   7: 3127802.996 ops/s
# Warmup Iteration   8: 3131548.201 ops/s
# Warmup Iteration   9: 3131219.661 ops/s
# Warmup Iteration  10: 3118647.667 ops/s
# Warmup Iteration  11: 3122719.452 ops/s
# Warmup Iteration  12: 3123141.970 ops/s
# Warmup Iteration  13: 3125631.244 ops/s
# Warmup Iteration  14: 3122677.097 ops/s
# Warmup Iteration  15: 3125183.442 ops/s
# Warmup Iteration  16: 3112758.260 ops/s
# Warmup Iteration  17: 3129751.460 ops/s
# Warmup Iteration  18: 3132134.616 ops/s
# Warmup Iteration  19: 3129861.596 ops/s
# Warmup Iteration  20: 3128194.655 ops/s
# Warmup Iteration  21: 3128172.748 ops/s
# Warmup Iteration  22: 3121153.652 ops/s
# Warmup Iteration  23: 3126831.298 ops/s
# Warmup Iteration  24: 3126629.102 ops/s
# Warmup Iteration  25: 3134319.809 ops/s
# Warmup Iteration  26: 3133323.910 ops/s
# Warmup Iteration  27: 3131019.113 ops/s
# Warmup Iteration  28: 3121835.822 ops/s
# Warmup Iteration  29: 3129837.119 ops/s
# Warmup Iteration  30: 3112477.664 ops/s
Iteration   1: 3124450.714 ops/s
Iteration   2: 3120694.463 ops/s
Iteration   3: 3140719.924 ops/s
Iteration   4: 3131294.827 ops/s
Iteration   5: 3129277.007 ops/s
Iteration   6: 3127831.665 ops/s
Iteration   7: 3132772.358 ops/s
Iteration   8: 3135967.394 ops/s
Iteration   9: 3134711.940 ops/s
Iteration  10: 3135390.928 ops/s
Iteration  11: 3135468.648 ops/s
Iteration  12: 3127374.983 ops/s
Iteration  13: 3120436.316 ops/s
Iteration  14: 3128735.366 ops/s
Iteration  15: 3114193.288 ops/s
Iteration  16: 3110132.745 ops/s
Iteration  17: 3130928.226 ops/s
Iteration  18: 3119311.110 ops/s
Iteration  19: 3113466.525 ops/s
Iteration  20: 3128656.702 ops/s
Iteration  21: 3132906.834 ops/s
Iteration  22: 3126825.885 ops/s
Iteration  23: 3132180.813 ops/s
Iteration  24: 3136229.941 ops/s
Iteration  25: 3127473.125 ops/s
Iteration  26: 3125948.802 ops/s
Iteration  27: 3131359.755 ops/s
Iteration  28: 3137728.811 ops/s
Iteration  29: 3124512.583 ops/s
Iteration  30: 3130464.761 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_groupByUniqueKey":
  3128248.215 ±(99.9%) 4936.493 ops/s [Average]
  (min, avg, max) = (3110132.745, 3128248.215, 3140719.924), stdev = 7388.712
  CI (99.9%): [3123311.721, 3133184.708] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_groupByUniqueKey  thrpt   30  3128248.215 ± 4936.493  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_groupByUniqueKey_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_groupByUniqueKey_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1444592.313 ops/s
# Warmup Iteration   2: 2553262.193 ops/s
# Warmup Iteration   3: 2903219.453 ops/s
# Warmup Iteration   4: 2902386.413 ops/s
# Warmup Iteration   5: 2907412.630 ops/s
# Warmup Iteration   6: 2383634.231 ops/s
# Warmup Iteration   7: 2919379.828 ops/s
# Warmup Iteration   8: 2917584.429 ops/s
# Warmup Iteration   9: 2909831.237 ops/s
# Warmup Iteration  10: 2920260.582 ops/s
# Warmup Iteration  11: 2918376.048 ops/s
# Warmup Iteration  12: 2921308.181 ops/s
# Warmup Iteration  13: 2915591.438 ops/s
# Warmup Iteration  14: 2913938.954 ops/s
# Warmup Iteration  15: 2912545.392 ops/s
# Warmup Iteration  16: 2915043.126 ops/s
# Warmup Iteration  17: 2913227.210 ops/s
# Warmup Iteration  18: 2915745.408 ops/s
# Warmup Iteration  19: 2907135.268 ops/s
# Warmup Iteration  20: 2910412.349 ops/s
# Warmup Iteration  21: 2916596.443 ops/s
# Warmup Iteration  22: 2918019.304 ops/s
# Warmup Iteration  23: 2907203.978 ops/s
# Warmup Iteration  24: 2920690.983 ops/s
# Warmup Iteration  25: 2905764.785 ops/s
# Warmup Iteration  26: 2919459.848 ops/s
# Warmup Iteration  27: 2916766.124 ops/s
# Warmup Iteration  28: 2904770.055 ops/s
# Warmup Iteration  29: 2912701.938 ops/s
# Warmup Iteration  30: 2915135.667 ops/s
Iteration   1: 2911011.800 ops/s
Iteration   2: 2917149.265 ops/s
Iteration   3: 2919355.358 ops/s
Iteration   4: 2914111.476 ops/s
Iteration   5: 2913869.150 ops/s
Iteration   6: 2921519.676 ops/s
Iteration   7: 2915135.714 ops/s
Iteration   8: 2911205.215 ops/s
Iteration   9: 2912918.555 ops/s
Iteration  10: 2912577.923 ops/s
Iteration  11: 2916667.238 ops/s
Iteration  12: 2921018.768 ops/s
Iteration  13: 2906352.022 ops/s
Iteration  14: 2913977.943 ops/s
Iteration  15: 2910597.156 ops/s
Iteration  16: 2902449.327 ops/s
Iteration  17: 2912099.007 ops/s
Iteration  18: 2911861.508 ops/s
Iteration  19: 2911913.997 ops/s
Iteration  20: 2907012.838 ops/s
Iteration  21: 2908692.702 ops/s
Iteration  22: 2918864.453 ops/s
Iteration  23: 2920892.533 ops/s
Iteration  24: 2909256.847 ops/s
Iteration  25: 2916535.376 ops/s
Iteration  26: 2907889.851 ops/s
Iteration  27: 2913341.721 ops/s
Iteration  28: 2916273.633 ops/s
Iteration  29: 2908231.945 ops/s
Iteration  30: 2921297.564 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_groupByUniqueKey_target":
  2913469.352 ±(99.9%) 3251.597 ops/s [Average]
  (min, avg, max) = (2902449.327, 2913469.352, 2921519.676), stdev = 4866.837
  CI (99.9%): [2910217.755, 2916720.949] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_groupByUniqueKey_target  thrpt   30  2913469.352 ± 3251.597  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_groupByUniqueKey_target_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_groupByUniqueKey_target_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 397984.849 ops/s
# Warmup Iteration   2: 437868.303 ops/s
# Warmup Iteration   3: 588126.090 ops/s
# Warmup Iteration   4: 589630.792 ops/s
# Warmup Iteration   5: 588567.075 ops/s
# Warmup Iteration   6: 590925.849 ops/s
# Warmup Iteration   7: 590765.907 ops/s
# Warmup Iteration   8: 590517.875 ops/s
# Warmup Iteration   9: 590369.135 ops/s
# Warmup Iteration  10: 578726.097 ops/s
# Warmup Iteration  11: 500125.878 ops/s
# Warmup Iteration  12: 589985.139 ops/s
# Warmup Iteration  13: 590652.006 ops/s
# Warmup Iteration  14: 593739.238 ops/s
# Warmup Iteration  15: 591891.202 ops/s
# Warmup Iteration  16: 591784.275 ops/s
# Warmup Iteration  17: 612764.277 ops/s
# Warmup Iteration  18: 611273.840 ops/s
# Warmup Iteration  19: 611277.682 ops/s
# Warmup Iteration  20: 611830.920 ops/s
# Warmup Iteration  21: 611559.029 ops/s
# Warmup Iteration  22: 611044.144 ops/s
# Warmup Iteration  23: 612105.058 ops/s
# Warmup Iteration  24: 612509.128 ops/s
# Warmup Iteration  25: 610473.649 ops/s
# Warmup Iteration  26: 611610.747 ops/s
# Warmup Iteration  27: 609295.799 ops/s
# Warmup Iteration  28: 612719.514 ops/s
# Warmup Iteration  29: 612374.295 ops/s
# Warmup Iteration  30: 610593.234 ops/s
Iteration   1: 608392.880 ops/s
Iteration   2: 613118.270 ops/s
Iteration   3: 612977.880 ops/s
Iteration   4: 607599.778 ops/s
Iteration   5: 613571.370 ops/s
Iteration   6: 607131.583 ops/s
Iteration   7: 610486.340 ops/s
Iteration   8: 612218.252 ops/s
Iteration   9: 612075.646 ops/s
Iteration  10: 611027.174 ops/s
Iteration  11: 608856.884 ops/s
Iteration  12: 614690.823 ops/s
Iteration  13: 614117.947 ops/s
Iteration  14: 611096.716 ops/s
Iteration  15: 610405.172 ops/s
Iteration  16: 611061.009 ops/s
Iteration  17: 609540.173 ops/s
Iteration  18: 612688.535 ops/s
Iteration  19: 613367.813 ops/s
Iteration  20: 610723.787 ops/s
Iteration  21: 611338.642 ops/s
Iteration  22: 612141.970 ops/s
Iteration  23: 612351.809 ops/s
Iteration  24: 608776.393 ops/s
Iteration  25: 612112.414 ops/s
Iteration  26: 611423.327 ops/s
Iteration  27: 611268.347 ops/s
Iteration  28: 611460.281 ops/s
Iteration  29: 608859.673 ops/s
Iteration  30: 610649.749 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_groupByUniqueKey_target_throws":
  611184.355 ±(99.9%) 1263.909 ops/s [Average]
  (min, avg, max) = (607131.583, 611184.355, 614690.823), stdev = 1891.760
  CI (99.9%): [609920.446, 612448.264] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_groupByUniqueKey_target_throws  thrpt   30  611184.355 ± 1263.909  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 408567.841 ops/s
# Warmup Iteration   2: 488170.499 ops/s
# Warmup Iteration   3: 642746.436 ops/s
# Warmup Iteration   4: 641022.840 ops/s
# Warmup Iteration   5: 636590.615 ops/s
# Warmup Iteration   6: 639784.321 ops/s
# Warmup Iteration   7: 638405.117 ops/s
# Warmup Iteration   8: 637619.362 ops/s
# Warmup Iteration   9: 586798.616 ops/s
# Warmup Iteration  10: 583216.142 ops/s
# Warmup Iteration  11: 639554.230 ops/s
# Warmup Iteration  12: 640331.575 ops/s
# Warmup Iteration  13: 637439.854 ops/s
# Warmup Iteration  14: 639169.376 ops/s
# Warmup Iteration  15: 635522.967 ops/s
# Warmup Iteration  16: 640644.387 ops/s
# Warmup Iteration  17: 663898.808 ops/s
# Warmup Iteration  18: 662900.642 ops/s
# Warmup Iteration  19: 663985.693 ops/s
# Warmup Iteration  20: 662020.498 ops/s
# Warmup Iteration  21: 663768.704 ops/s
# Warmup Iteration  22: 664245.585 ops/s
# Warmup Iteration  23: 663683.040 ops/s
# Warmup Iteration  24: 663594.081 ops/s
# Warmup Iteration  25: 664475.502 ops/s
# Warmup Iteration  26: 665138.801 ops/s
# Warmup Iteration  27: 664794.627 ops/s
# Warmup Iteration  28: 661453.047 ops/s
# Warmup Iteration  29: 664292.989 ops/s
# Warmup Iteration  30: 661996.628 ops/s
Iteration   1: 658554.338 ops/s
Iteration   2: 661801.644 ops/s
Iteration   3: 663904.834 ops/s
Iteration   4: 662246.334 ops/s
Iteration   5: 661919.921 ops/s
Iteration   6: 665457.198 ops/s
Iteration   7: 660096.146 ops/s
Iteration   8: 663427.827 ops/s
Iteration   9: 662661.773 ops/s
Iteration  10: 664856.280 ops/s
Iteration  11: 662174.024 ops/s
Iteration  12: 663325.803 ops/s
Iteration  13: 663674.556 ops/s
Iteration  14: 663809.723 ops/s
Iteration  15: 665735.755 ops/s
Iteration  16: 663700.737 ops/s
Iteration  17: 660743.090 ops/s
Iteration  18: 664300.178 ops/s
Iteration  19: 665654.820 ops/s
Iteration  20: 664340.928 ops/s
Iteration  21: 664870.859 ops/s
Iteration  22: 665286.915 ops/s
Iteration  23: 662256.116 ops/s
Iteration  24: 661463.587 ops/s
Iteration  25: 659735.916 ops/s
Iteration  26: 662338.956 ops/s
Iteration  27: 661068.834 ops/s
Iteration  28: 659252.512 ops/s
Iteration  29: 662873.654 ops/s
Iteration  30: 664682.730 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate":
  662873.866 ±(99.9%) 1303.278 ops/s [Average]
  (min, avg, max) = (658554.338, 662873.866, 665735.755), stdev = 1950.685
  CI (99.9%): [661570.589, 664177.144] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 Mode  Cnt       Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate  thrpt   30  662873.866 ± 1303.278  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_groupByUniqueKey_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_groupByUniqueKey_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 400658.649 ops/s
# Warmup Iteration   2: 450151.907 ops/s
# Warmup Iteration   3: 602513.650 ops/s
# Warmup Iteration   4: 601321.136 ops/s
# Warmup Iteration   5: 599168.801 ops/s
# Warmup Iteration   6: 602285.995 ops/s
# Warmup Iteration   7: 602608.893 ops/s
# Warmup Iteration   8: 602113.146 ops/s
# Warmup Iteration   9: 601950.422 ops/s
# Warmup Iteration  10: 520871.646 ops/s
# Warmup Iteration  11: 580529.702 ops/s
# Warmup Iteration  12: 603801.530 ops/s
# Warmup Iteration  13: 604122.987 ops/s
# Warmup Iteration  14: 604050.292 ops/s
# Warmup Iteration  15: 602131.805 ops/s
# Warmup Iteration  16: 603556.635 ops/s
# Warmup Iteration  17: 625143.300 ops/s
# Warmup Iteration  18: 624881.932 ops/s
# Warmup Iteration  19: 626341.408 ops/s
# Warmup Iteration  20: 623515.015 ops/s
# Warmup Iteration  21: 625305.085 ops/s
# Warmup Iteration  22: 623648.285 ops/s
# Warmup Iteration  23: 625832.019 ops/s
# Warmup Iteration  24: 623659.187 ops/s
# Warmup Iteration  25: 626739.031 ops/s
# Warmup Iteration  26: 624781.408 ops/s
# Warmup Iteration  27: 622480.823 ops/s
# Warmup Iteration  28: 623031.425 ops/s
# Warmup Iteration  29: 624477.688 ops/s
# Warmup Iteration  30: 624924.265 ops/s
Iteration   1: 626438.438 ops/s
Iteration   2: 622940.666 ops/s
Iteration   3: 623174.136 ops/s
Iteration   4: 624504.035 ops/s
Iteration   5: 619664.811 ops/s
Iteration   6: 627092.208 ops/s
Iteration   7: 626101.258 ops/s
Iteration   8: 621857.750 ops/s
Iteration   9: 622098.144 ops/s
Iteration  10: 625744.477 ops/s
Iteration  11: 623287.340 ops/s
Iteration  12: 624403.612 ops/s
Iteration  13: 627179.416 ops/s
Iteration  14: 623347.718 ops/s
Iteration  15: 624361.747 ops/s
Iteration  16: 627185.657 ops/s
Iteration  17: 624019.603 ops/s
Iteration  18: 623806.695 ops/s
Iteration  19: 625418.183 ops/s
Iteration  20: 625838.799 ops/s
Iteration  21: 625250.743 ops/s
Iteration  22: 624398.249 ops/s
Iteration  23: 621537.588 ops/s
Iteration  24: 624810.521 ops/s
Iteration  25: 627396.847 ops/s
Iteration  26: 627710.750 ops/s
Iteration  27: 623396.282 ops/s
Iteration  28: 624860.513 ops/s
Iteration  29: 627104.953 ops/s
Iteration  30: 624743.676 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_groupByUniqueKey_throws":
  624655.827 ±(99.9%) 1307.618 ops/s [Average]
  (min, avg, max) = (619664.811, 624655.827, 627710.750), stdev = 1957.181
  CI (99.9%): [623348.210, 625963.445] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_groupByUniqueKey_throws  thrpt   30  624655.827 ± 1307.618  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 443055.686 ops/s
# Warmup Iteration   2: 521727.895 ops/s
# Warmup Iteration   3: 685982.242 ops/s
# Warmup Iteration   4: 686878.433 ops/s
# Warmup Iteration   5: 680629.277 ops/s
# Warmup Iteration   6: 684193.691 ops/s
# Warmup Iteration   7: 684906.525 ops/s
# Warmup Iteration   8: 679063.909 ops/s
# Warmup Iteration   9: 660396.865 ops/s
# Warmup Iteration  10: 584826.445 ops/s
# Warmup Iteration  11: 687181.348 ops/s
# Warmup Iteration  12: 685466.809 ops/s
# Warmup Iteration  13: 686252.679 ops/s
# Warmup Iteration  14: 685845.328 ops/s
# Warmup Iteration  15: 685927.996 ops/s
# Warmup Iteration  16: 685520.790 ops/s
# Warmup Iteration  17: 714049.790 ops/s
# Warmup Iteration  18: 714199.913 ops/s
# Warmup Iteration  19: 714359.477 ops/s
# Warmup Iteration  20: 716035.744 ops/s
# Warmup Iteration  21: 713872.255 ops/s
# Warmup Iteration  22: 715365.217 ops/s
# Warmup Iteration  23: 716710.967 ops/s
# Warmup Iteration  24: 711918.220 ops/s
# Warmup Iteration  25: 714688.678 ops/s
# Warmup Iteration  26: 714185.889 ops/s
# Warmup Iteration  27: 714988.172 ops/s
# Warmup Iteration  28: 715747.235 ops/s
# Warmup Iteration  29: 711414.406 ops/s
# Warmup Iteration  30: 711814.434 ops/s
Iteration   1: 713611.813 ops/s
Iteration   2: 713510.982 ops/s
Iteration   3: 712819.179 ops/s
Iteration   4: 710971.455 ops/s
Iteration   5: 710798.889 ops/s
Iteration   6: 711892.389 ops/s
Iteration   7: 712794.297 ops/s
Iteration   8: 709906.883 ops/s
Iteration   9: 714211.694 ops/s
Iteration  10: 714914.975 ops/s
Iteration  11: 713659.769 ops/s
Iteration  12: 713899.850 ops/s
Iteration  13: 711604.628 ops/s
Iteration  14: 712851.137 ops/s
Iteration  15: 712957.593 ops/s
Iteration  16: 716863.365 ops/s
Iteration  17: 715597.474 ops/s
Iteration  18: 716982.071 ops/s
Iteration  19: 709920.102 ops/s
Iteration  20: 714951.050 ops/s
Iteration  21: 710099.874 ops/s
Iteration  22: 713966.496 ops/s
Iteration  23: 713885.442 ops/s
Iteration  24: 710096.268 ops/s
Iteration  25: 715957.945 ops/s
Iteration  26: 709539.667 ops/s
Iteration  27: 712211.605 ops/s
Iteration  28: 710555.684 ops/s
Iteration  29: 715031.498 ops/s
Iteration  30: 713097.175 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate":
  712972.042 ±(99.9%) 1412.553 ops/s [Average]
  (min, avg, max) = (709539.667, 712972.042, 716982.071), stdev = 2114.243
  CI (99.9%): [711559.489, 714384.595] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt       Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate  thrpt   30  712972.042 ± 1412.553  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_groupBy_with_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_groupBy_with_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 335370.079 ops/s
# Warmup Iteration   2: 452290.053 ops/s
# Warmup Iteration   3: 603236.850 ops/s
# Warmup Iteration   4: 601307.127 ops/s
# Warmup Iteration   5: 605835.659 ops/s
# Warmup Iteration   6: 604130.263 ops/s
# Warmup Iteration   7: 602542.741 ops/s
# Warmup Iteration   8: 603893.125 ops/s
# Warmup Iteration   9: 494180.809 ops/s
# Warmup Iteration  10: 605294.895 ops/s
# Warmup Iteration  11: 604886.825 ops/s
# Warmup Iteration  12: 606721.015 ops/s
# Warmup Iteration  13: 606292.145 ops/s
# Warmup Iteration  14: 605980.413 ops/s
# Warmup Iteration  15: 604228.691 ops/s
# Warmup Iteration  16: 603276.588 ops/s
# Warmup Iteration  17: 604396.026 ops/s
# Warmup Iteration  18: 603284.592 ops/s
# Warmup Iteration  19: 603035.570 ops/s
# Warmup Iteration  20: 602205.555 ops/s
# Warmup Iteration  21: 602254.154 ops/s
# Warmup Iteration  22: 603857.556 ops/s
# Warmup Iteration  23: 602792.719 ops/s
# Warmup Iteration  24: 605616.188 ops/s
# Warmup Iteration  25: 605309.783 ops/s
# Warmup Iteration  26: 603827.166 ops/s
# Warmup Iteration  27: 602910.376 ops/s
# Warmup Iteration  28: 602772.270 ops/s
# Warmup Iteration  29: 604052.890 ops/s
# Warmup Iteration  30: 605207.533 ops/s
Iteration   1: 606490.970 ops/s
Iteration   2: 606473.491 ops/s
Iteration   3: 602760.798 ops/s
Iteration   4: 606390.253 ops/s
Iteration   5: 605165.127 ops/s
Iteration   6: 604033.092 ops/s
Iteration   7: 604886.279 ops/s
Iteration   8: 600680.413 ops/s
Iteration   9: 603411.442 ops/s
Iteration  10: 605863.123 ops/s
Iteration  11: 605819.577 ops/s
Iteration  12: 604736.609 ops/s
Iteration  13: 603021.563 ops/s
Iteration  14: 603071.843 ops/s
Iteration  15: 604327.796 ops/s
Iteration  16: 605005.412 ops/s
Iteration  17: 601163.618 ops/s
Iteration  18: 605705.176 ops/s
Iteration  19: 605259.523 ops/s
Iteration  20: 605051.037 ops/s
Iteration  21: 605958.700 ops/s
Iteration  22: 604499.467 ops/s
Iteration  23: 604477.348 ops/s
Iteration  24: 604773.746 ops/s
Iteration  25: 602038.277 ops/s
Iteration  26: 602507.348 ops/s
Iteration  27: 602360.847 ops/s
Iteration  28: 603089.649 ops/s
Iteration  29: 605722.458 ops/s
Iteration  30: 602140.811 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_groupBy_with_target":
  604229.526 ±(99.9%) 1083.960 ops/s [Average]
  (min, avg, max) = (600680.413, 604229.526, 606490.970), stdev = 1622.420
  CI (99.9%): [603145.566, 605313.486] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_groupBy_with_target  thrpt   30  604229.526 ± 1083.960  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 250709.530 ops/s
# Warmup Iteration   2: 416544.392 ops/s
# Warmup Iteration   3: 486999.128 ops/s
# Warmup Iteration   4: 492714.762 ops/s
# Warmup Iteration   5: 490096.213 ops/s
# Warmup Iteration   6: 404891.107 ops/s
# Warmup Iteration   7: 488080.915 ops/s
# Warmup Iteration   8: 490931.707 ops/s
# Warmup Iteration   9: 490607.414 ops/s
# Warmup Iteration  10: 492718.024 ops/s
# Warmup Iteration  11: 492610.700 ops/s
# Warmup Iteration  12: 491877.595 ops/s
# Warmup Iteration  13: 493099.132 ops/s
# Warmup Iteration  14: 491726.538 ops/s
# Warmup Iteration  15: 492318.791 ops/s
# Warmup Iteration  16: 491179.783 ops/s
# Warmup Iteration  17: 491422.697 ops/s
# Warmup Iteration  18: 492389.212 ops/s
# Warmup Iteration  19: 491907.676 ops/s
# Warmup Iteration  20: 491524.759 ops/s
# Warmup Iteration  21: 492219.213 ops/s
# Warmup Iteration  22: 491302.331 ops/s
# Warmup Iteration  23: 492008.957 ops/s
# Warmup Iteration  24: 491767.853 ops/s
# Warmup Iteration  25: 490614.849 ops/s
# Warmup Iteration  26: 492025.689 ops/s
# Warmup Iteration  27: 489873.753 ops/s
# Warmup Iteration  28: 491879.678 ops/s
# Warmup Iteration  29: 492088.077 ops/s
# Warmup Iteration  30: 489680.614 ops/s
Iteration   1: 492121.519 ops/s
Iteration   2: 489224.815 ops/s
Iteration   3: 489453.753 ops/s
Iteration   4: 490462.605 ops/s
Iteration   5: 491771.724 ops/s
Iteration   6: 490077.514 ops/s
Iteration   7: 489960.475 ops/s
Iteration   8: 492229.853 ops/s
Iteration   9: 492257.452 ops/s
Iteration  10: 491997.272 ops/s
Iteration  11: 493202.420 ops/s
Iteration  12: 491505.030 ops/s
Iteration  13: 491982.923 ops/s
Iteration  14: 488883.599 ops/s
Iteration  15: 492032.922 ops/s
Iteration  16: 489733.081 ops/s
Iteration  17: 489284.744 ops/s
Iteration  18: 492068.392 ops/s
Iteration  19: 491355.361 ops/s
Iteration  20: 492807.241 ops/s
Iteration  21: 491651.140 ops/s
Iteration  22: 492581.636 ops/s
Iteration  23: 492112.315 ops/s
Iteration  24: 493287.301 ops/s
Iteration  25: 491465.703 ops/s
Iteration  26: 492980.309 ops/s
Iteration  27: 492472.619 ops/s
Iteration  28: 493036.153 ops/s
Iteration  29: 491407.272 ops/s
Iteration  30: 489041.750 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_injectInto":
  491414.963 ±(99.9%) 903.939 ops/s [Average]
  (min, avg, max) = (488883.599, 491414.963, 493287.301), stdev = 1352.973
  CI (99.9%): [490511.025, 492318.902] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score     Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_injectInto  thrpt   30  491414.963 ± 903.939  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_injectIntoDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_injectIntoDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 807720.621 ops/s
# Warmup Iteration   2: 1410116.080 ops/s
# Warmup Iteration   3: 1678221.606 ops/s
# Warmup Iteration   4: 1685172.253 ops/s
# Warmup Iteration   5: 1682187.260 ops/s
# Warmup Iteration   6: 1352226.759 ops/s
# Warmup Iteration   7: 1687338.027 ops/s
# Warmup Iteration   8: 1684227.876 ops/s
# Warmup Iteration   9: 1687468.285 ops/s
# Warmup Iteration  10: 1687346.288 ops/s
# Warmup Iteration  11: 1683262.340 ops/s
# Warmup Iteration  12: 1684252.442 ops/s
# Warmup Iteration  13: 1689329.631 ops/s
# Warmup Iteration  14: 1683415.398 ops/s
# Warmup Iteration  15: 1680250.819 ops/s
# Warmup Iteration  16: 1686997.826 ops/s
# Warmup Iteration  17: 1681912.227 ops/s
# Warmup Iteration  18: 1683005.317 ops/s
# Warmup Iteration  19: 1688095.965 ops/s
# Warmup Iteration  20: 1688762.084 ops/s
# Warmup Iteration  21: 1682251.123 ops/s
# Warmup Iteration  22: 1692007.746 ops/s
# Warmup Iteration  23: 1683951.190 ops/s
# Warmup Iteration  24: 1680999.271 ops/s
# Warmup Iteration  25: 1686138.277 ops/s
# Warmup Iteration  26: 1689810.199 ops/s
# Warmup Iteration  27: 1689185.002 ops/s
# Warmup Iteration  28: 1687490.014 ops/s
# Warmup Iteration  29: 1688824.808 ops/s
# Warmup Iteration  30: 1683106.061 ops/s
Iteration   1: 1688404.108 ops/s
Iteration   2: 1683175.083 ops/s
Iteration   3: 1679889.649 ops/s
Iteration   4: 1676331.012 ops/s
Iteration   5: 1679885.707 ops/s
Iteration   6: 1679827.894 ops/s
Iteration   7: 1691080.832 ops/s
Iteration   8: 1684543.051 ops/s
Iteration   9: 1688050.339 ops/s
Iteration  10: 1685086.953 ops/s
Iteration  11: 1688609.049 ops/s
Iteration  12: 1680928.674 ops/s
Iteration  13: 1688305.407 ops/s
Iteration  14: 1684557.273 ops/s
Iteration  15: 1681355.350 ops/s
Iteration  16: 1676407.870 ops/s
Iteration  17: 1683246.675 ops/s
Iteration  18: 1684544.571 ops/s
Iteration  19: 1677132.603 ops/s
Iteration  20: 1683739.251 ops/s
Iteration  21: 1683875.273 ops/s
Iteration  22: 1685828.654 ops/s
Iteration  23: 1664808.866 ops/s
Iteration  24: 1685729.809 ops/s
Iteration  25: 1675468.776 ops/s
Iteration  26: 1681386.626 ops/s
Iteration  27: 1691183.251 ops/s
Iteration  28: 1679435.016 ops/s
Iteration  29: 1689457.786 ops/s
Iteration  30: 1681388.460 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_injectIntoDouble":
  1682788.796 ±(99.9%) 3679.724 ops/s [Average]
  (min, avg, max) = (1664808.866, 1682788.796, 1691183.251), stdev = 5507.638
  CI (99.9%): [1679109.072, 1686468.519] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_injectIntoDouble  thrpt   30  1682788.796 ± 3679.724  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_injectIntoFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_injectIntoFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 784251.208 ops/s
# Warmup Iteration   2: 1353185.842 ops/s
# Warmup Iteration   3: 1639555.864 ops/s
# Warmup Iteration   4: 1641334.915 ops/s
# Warmup Iteration   5: 1650493.685 ops/s
# Warmup Iteration   6: 1328802.673 ops/s
# Warmup Iteration   7: 1653736.798 ops/s
# Warmup Iteration   8: 1654717.456 ops/s
# Warmup Iteration   9: 1653920.896 ops/s
# Warmup Iteration  10: 1648681.475 ops/s
# Warmup Iteration  11: 1654405.616 ops/s
# Warmup Iteration  12: 1654036.702 ops/s
# Warmup Iteration  13: 1652847.072 ops/s
# Warmup Iteration  14: 1654377.080 ops/s
# Warmup Iteration  15: 1652347.122 ops/s
# Warmup Iteration  16: 1645937.457 ops/s
# Warmup Iteration  17: 1650823.467 ops/s
# Warmup Iteration  18: 1652359.088 ops/s
# Warmup Iteration  19: 1656218.985 ops/s
# Warmup Iteration  20: 1653013.482 ops/s
# Warmup Iteration  21: 1652241.087 ops/s
# Warmup Iteration  22: 1653999.813 ops/s
# Warmup Iteration  23: 1646182.444 ops/s
# Warmup Iteration  24: 1641080.834 ops/s
# Warmup Iteration  25: 1642181.643 ops/s
# Warmup Iteration  26: 1640847.846 ops/s
# Warmup Iteration  27: 1653450.437 ops/s
# Warmup Iteration  28: 1653307.133 ops/s
# Warmup Iteration  29: 1648433.264 ops/s
# Warmup Iteration  30: 1652361.971 ops/s
Iteration   1: 1653399.569 ops/s
Iteration   2: 1644323.445 ops/s
Iteration   3: 1653627.456 ops/s
Iteration   4: 1652084.302 ops/s
Iteration   5: 1657267.955 ops/s
Iteration   6: 1653536.296 ops/s
Iteration   7: 1656538.029 ops/s
Iteration   8: 1654917.311 ops/s
Iteration   9: 1656826.570 ops/s
Iteration  10: 1650761.762 ops/s
Iteration  11: 1653394.980 ops/s
Iteration  12: 1654890.865 ops/s
Iteration  13: 1651626.056 ops/s
Iteration  14: 1654245.611 ops/s
Iteration  15: 1650752.600 ops/s
Iteration  16: 1640667.552 ops/s
Iteration  17: 1652431.750 ops/s
Iteration  18: 1655670.541 ops/s
Iteration  19: 1653068.881 ops/s
Iteration  20: 1655939.546 ops/s
Iteration  21: 1646897.119 ops/s
Iteration  22: 1651923.196 ops/s
Iteration  23: 1651748.168 ops/s
Iteration  24: 1654877.075 ops/s
Iteration  25: 1659015.371 ops/s
Iteration  26: 1649891.683 ops/s
Iteration  27: 1654373.555 ops/s
Iteration  28: 1649897.026 ops/s
Iteration  29: 1653645.033 ops/s
Iteration  30: 1655392.084 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_injectIntoFloat":
  1652787.713 ±(99.9%) 2533.723 ops/s [Average]
  (min, avg, max) = (1640667.552, 1652787.713, 1659015.371), stdev = 3792.358
  CI (99.9%): [1650253.990, 1655321.436] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_injectIntoFloat  thrpt   30  1652787.713 ± 2533.723  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_injectIntoInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_injectIntoInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 813771.623 ops/s
# Warmup Iteration   2: 1369051.499 ops/s
# Warmup Iteration   3: 1641165.968 ops/s
# Warmup Iteration   4: 1655970.995 ops/s
# Warmup Iteration   5: 1649850.715 ops/s
# Warmup Iteration   6: 1328124.649 ops/s
# Warmup Iteration   7: 1648212.253 ops/s
# Warmup Iteration   8: 1650952.745 ops/s
# Warmup Iteration   9: 1651629.923 ops/s
# Warmup Iteration  10: 1656356.371 ops/s
# Warmup Iteration  11: 1654312.403 ops/s
# Warmup Iteration  12: 1649085.693 ops/s
# Warmup Iteration  13: 1652407.170 ops/s
# Warmup Iteration  14: 1653418.472 ops/s
# Warmup Iteration  15: 1658201.167 ops/s
# Warmup Iteration  16: 1657622.684 ops/s
# Warmup Iteration  17: 1653150.511 ops/s
# Warmup Iteration  18: 1656511.466 ops/s
# Warmup Iteration  19: 1658070.246 ops/s
# Warmup Iteration  20: 1658785.455 ops/s
# Warmup Iteration  21: 1654450.953 ops/s
# Warmup Iteration  22: 1653674.677 ops/s
# Warmup Iteration  23: 1651276.359 ops/s
# Warmup Iteration  24: 1649723.528 ops/s
# Warmup Iteration  25: 1658977.212 ops/s
# Warmup Iteration  26: 1654162.229 ops/s
# Warmup Iteration  27: 1659259.247 ops/s
# Warmup Iteration  28: 1656038.617 ops/s
# Warmup Iteration  29: 1653195.961 ops/s
# Warmup Iteration  30: 1656931.459 ops/s
Iteration   1: 1654928.774 ops/s
Iteration   2: 1652672.514 ops/s
Iteration   3: 1660005.889 ops/s
Iteration   4: 1653894.021 ops/s
Iteration   5: 1657265.928 ops/s
Iteration   6: 1653806.707 ops/s
Iteration   7: 1658156.726 ops/s
Iteration   8: 1652523.228 ops/s
Iteration   9: 1651473.131 ops/s
Iteration  10: 1653686.689 ops/s
Iteration  11: 1653180.106 ops/s
Iteration  12: 1645420.702 ops/s
Iteration  13: 1655116.094 ops/s
Iteration  14: 1662824.392 ops/s
Iteration  15: 1651311.659 ops/s
Iteration  16: 1654034.408 ops/s
Iteration  17: 1651400.165 ops/s
Iteration  18: 1661296.290 ops/s
Iteration  19: 1644645.763 ops/s
Iteration  20: 1652486.745 ops/s
Iteration  21: 1651794.817 ops/s
Iteration  22: 1640715.913 ops/s
Iteration  23: 1660223.421 ops/s
Iteration  24: 1658815.255 ops/s
Iteration  25: 1657951.911 ops/s
Iteration  26: 1656425.232 ops/s
Iteration  27: 1653475.126 ops/s
Iteration  28: 1652722.914 ops/s
Iteration  29: 1656895.990 ops/s
Iteration  30: 1649035.795 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_injectIntoInt":
  1653939.544 ±(99.9%) 3247.895 ops/s [Average]
  (min, avg, max) = (1640715.913, 1653939.544, 1662824.392), stdev = 4861.296
  CI (99.9%): [1650691.649, 1657187.438] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_injectIntoInt  thrpt   30  1653939.544 ± 3247.895  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_injectIntoLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_injectIntoLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 822145.286 ops/s
# Warmup Iteration   2: 1405089.756 ops/s
# Warmup Iteration   3: 1665007.573 ops/s
# Warmup Iteration   4: 1674756.660 ops/s
# Warmup Iteration   5: 1670193.696 ops/s
# Warmup Iteration   6: 1352768.960 ops/s
# Warmup Iteration   7: 1672482.459 ops/s
# Warmup Iteration   8: 1667663.066 ops/s
# Warmup Iteration   9: 1672677.770 ops/s
# Warmup Iteration  10: 1674990.881 ops/s
# Warmup Iteration  11: 1677546.003 ops/s
# Warmup Iteration  12: 1675960.544 ops/s
# Warmup Iteration  13: 1675373.537 ops/s
# Warmup Iteration  14: 1667534.529 ops/s
# Warmup Iteration  15: 1675348.424 ops/s
# Warmup Iteration  16: 1675616.372 ops/s
# Warmup Iteration  17: 1673905.180 ops/s
# Warmup Iteration  18: 1669487.994 ops/s
# Warmup Iteration  19: 1669186.026 ops/s
# Warmup Iteration  20: 1669758.644 ops/s
# Warmup Iteration  21: 1671023.043 ops/s
# Warmup Iteration  22: 1670233.349 ops/s
# Warmup Iteration  23: 1676132.203 ops/s
# Warmup Iteration  24: 1669769.498 ops/s
# Warmup Iteration  25: 1670600.746 ops/s
# Warmup Iteration  26: 1671889.583 ops/s
# Warmup Iteration  27: 1671785.035 ops/s
# Warmup Iteration  28: 1672428.459 ops/s
# Warmup Iteration  29: 1673668.081 ops/s
# Warmup Iteration  30: 1674495.350 ops/s
Iteration   1: 1668715.902 ops/s
Iteration   2: 1676856.334 ops/s
Iteration   3: 1672495.823 ops/s
Iteration   4: 1671196.539 ops/s
Iteration   5: 1673334.048 ops/s
Iteration   6: 1678857.231 ops/s
Iteration   7: 1669989.805 ops/s
Iteration   8: 1678041.652 ops/s
Iteration   9: 1673347.801 ops/s
Iteration  10: 1671950.153 ops/s
Iteration  11: 1680589.439 ops/s
Iteration  12: 1677713.841 ops/s
Iteration  13: 1667999.612 ops/s
Iteration  14: 1658528.219 ops/s
Iteration  15: 1674740.679 ops/s
Iteration  16: 1674039.345 ops/s
Iteration  17: 1674570.468 ops/s
Iteration  18: 1666384.388 ops/s
Iteration  19: 1680336.143 ops/s
Iteration  20: 1676424.005 ops/s
Iteration  21: 1675654.968 ops/s
Iteration  22: 1677182.668 ops/s
Iteration  23: 1669334.123 ops/s
Iteration  24: 1669004.258 ops/s
Iteration  25: 1670860.540 ops/s
Iteration  26: 1678206.284 ops/s
Iteration  27: 1674104.888 ops/s
Iteration  28: 1664908.525 ops/s
Iteration  29: 1660829.697 ops/s
Iteration  30: 1677754.402 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_injectIntoLong":
  1672798.393 ±(99.9%) 3635.816 ops/s [Average]
  (min, avg, max) = (1658528.219, 1672798.393, 1680589.439), stdev = 5441.918
  CI (99.9%): [1669162.577, 1676434.208] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_injectIntoLong  thrpt   30  1672798.393 ± 3635.816  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 588750.324 ops/s
# Warmup Iteration   2: 1210119.630 ops/s
# Warmup Iteration   3: 1289317.724 ops/s
# Warmup Iteration   4: 1297901.451 ops/s
# Warmup Iteration   5: 1059297.373 ops/s
# Warmup Iteration   6: 1301444.108 ops/s
# Warmup Iteration   7: 1294389.400 ops/s
# Warmup Iteration   8: 1297857.354 ops/s
# Warmup Iteration   9: 1296930.705 ops/s
# Warmup Iteration  10: 1293928.025 ops/s
# Warmup Iteration  11: 1300420.870 ops/s
# Warmup Iteration  12: 1302068.589 ops/s
# Warmup Iteration  13: 1299312.539 ops/s
# Warmup Iteration  14: 1300108.687 ops/s
# Warmup Iteration  15: 1301234.907 ops/s
# Warmup Iteration  16: 1300044.954 ops/s
# Warmup Iteration  17: 1298194.115 ops/s
# Warmup Iteration  18: 1301154.887 ops/s
# Warmup Iteration  19: 1298854.673 ops/s
# Warmup Iteration  20: 1301152.990 ops/s
# Warmup Iteration  21: 1297822.552 ops/s
# Warmup Iteration  22: 1293549.703 ops/s
# Warmup Iteration  23: 1302185.612 ops/s
# Warmup Iteration  24: 1298031.989 ops/s
# Warmup Iteration  25: 1299183.521 ops/s
# Warmup Iteration  26: 1298979.481 ops/s
# Warmup Iteration  27: 1297842.379 ops/s
# Warmup Iteration  28: 1291157.513 ops/s
# Warmup Iteration  29: 1297711.575 ops/s
# Warmup Iteration  30: 1292219.950 ops/s
Iteration   1: 1296546.569 ops/s
Iteration   2: 1296133.171 ops/s
Iteration   3: 1297001.700 ops/s
Iteration   4: 1298473.297 ops/s
Iteration   5: 1303606.711 ops/s
Iteration   6: 1302518.272 ops/s
Iteration   7: 1300957.720 ops/s
Iteration   8: 1300359.957 ops/s
Iteration   9: 1294415.139 ops/s
Iteration  10: 1298881.156 ops/s
Iteration  11: 1301180.364 ops/s
Iteration  12: 1295592.982 ops/s
Iteration  13: 1301695.825 ops/s
Iteration  14: 1299285.867 ops/s
Iteration  15: 1301901.715 ops/s
Iteration  16: 1300550.186 ops/s
Iteration  17: 1298450.765 ops/s
Iteration  18: 1299878.865 ops/s
Iteration  19: 1304047.472 ops/s
Iteration  20: 1297582.784 ops/s
Iteration  21: 1302054.223 ops/s
Iteration  22: 1298760.909 ops/s
Iteration  23: 1302197.998 ops/s
Iteration  24: 1300654.875 ops/s
Iteration  25: 1300248.476 ops/s
Iteration  26: 1303202.369 ops/s
Iteration  27: 1300429.972 ops/s
Iteration  28: 1298084.763 ops/s
Iteration  29: 1297720.105 ops/s
Iteration  30: 1299672.141 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_isEmpty":
  1299736.212 ±(99.9%) 1628.056 ops/s [Average]
  (min, avg, max) = (1294415.139, 1299736.212, 1304047.472), stdev = 2436.797
  CI (99.9%): [1298108.156, 1301364.267] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_isEmpty  thrpt   30  1299736.212 ± 1628.056  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_iterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_iterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 345512.107 ops/s
# Warmup Iteration   2: 395670.512 ops/s
# Warmup Iteration   3: 525139.646 ops/s
# Warmup Iteration   4: 523529.012 ops/s
# Warmup Iteration   5: 521606.941 ops/s
# Warmup Iteration   6: 523574.402 ops/s
# Warmup Iteration   7: 524757.224 ops/s
# Warmup Iteration   8: 524062.299 ops/s
# Warmup Iteration   9: 520553.048 ops/s
# Warmup Iteration  10: 431988.619 ops/s
# Warmup Iteration  11: 525107.834 ops/s
# Warmup Iteration  12: 524847.125 ops/s
# Warmup Iteration  13: 524993.157 ops/s
# Warmup Iteration  14: 523026.969 ops/s
# Warmup Iteration  15: 523492.392 ops/s
# Warmup Iteration  16: 523952.998 ops/s
# Warmup Iteration  17: 540236.463 ops/s
# Warmup Iteration  18: 536897.188 ops/s
# Warmup Iteration  19: 539875.121 ops/s
# Warmup Iteration  20: 539478.292 ops/s
# Warmup Iteration  21: 541765.316 ops/s
# Warmup Iteration  22: 541222.198 ops/s
# Warmup Iteration  23: 539648.852 ops/s
# Warmup Iteration  24: 542330.990 ops/s
# Warmup Iteration  25: 543106.178 ops/s
# Warmup Iteration  26: 541951.841 ops/s
# Warmup Iteration  27: 541623.162 ops/s
# Warmup Iteration  28: 540790.836 ops/s
# Warmup Iteration  29: 541834.512 ops/s
# Warmup Iteration  30: 540914.215 ops/s
Iteration   1: 541620.102 ops/s
Iteration   2: 537347.355 ops/s
Iteration   3: 538691.534 ops/s
Iteration   4: 540852.286 ops/s
Iteration   5: 543434.473 ops/s
Iteration   6: 540971.691 ops/s
Iteration   7: 544309.246 ops/s
Iteration   8: 539361.135 ops/s
Iteration   9: 542015.237 ops/s
Iteration  10: 541549.166 ops/s
Iteration  11: 540955.953 ops/s
Iteration  12: 543590.191 ops/s
Iteration  13: 543327.237 ops/s
Iteration  14: 540863.250 ops/s
Iteration  15: 541533.789 ops/s
Iteration  16: 543180.533 ops/s
Iteration  17: 540749.316 ops/s
Iteration  18: 543692.244 ops/s
Iteration  19: 541250.281 ops/s
Iteration  20: 540448.411 ops/s
Iteration  21: 533685.782 ops/s
Iteration  22: 541759.872 ops/s
Iteration  23: 537095.461 ops/s
Iteration  24: 540530.819 ops/s
Iteration  25: 541375.535 ops/s
Iteration  26: 541062.489 ops/s
Iteration  27: 540902.988 ops/s
Iteration  28: 541309.893 ops/s
Iteration  29: 543732.799 ops/s
Iteration  30: 540834.860 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_iterator":
  541067.798 ±(99.9%) 1478.337 ops/s [Average]
  (min, avg, max) = (533685.782, 541067.798, 544309.246), stdev = 2212.706
  CI (99.9%): [539589.460, 542546.135] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_iterator  thrpt   30  541067.798 ± 1478.337  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_iteratorRemove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_iteratorRemove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 522504.471 ops/s
# Warmup Iteration   2: 547168.005 ops/s
# Warmup Iteration   3: 737932.782 ops/s
# Warmup Iteration   4: 742437.543 ops/s
# Warmup Iteration   5: 736108.408 ops/s
# Warmup Iteration   6: 746236.752 ops/s
# Warmup Iteration   7: 743503.319 ops/s
# Warmup Iteration   8: 742215.995 ops/s
# Warmup Iteration   9: 740694.514 ops/s
# Warmup Iteration  10: 744486.361 ops/s
# Warmup Iteration  11: 719162.199 ops/s
# Warmup Iteration  12: 642374.765 ops/s
# Warmup Iteration  13: 744401.253 ops/s
# Warmup Iteration  14: 746147.865 ops/s
# Warmup Iteration  15: 745133.431 ops/s
# Warmup Iteration  16: 744680.745 ops/s
# Warmup Iteration  17: 771340.669 ops/s
# Warmup Iteration  18: 770905.471 ops/s
# Warmup Iteration  19: 771807.830 ops/s
# Warmup Iteration  20: 772273.117 ops/s
# Warmup Iteration  21: 773109.751 ops/s
# Warmup Iteration  22: 771165.261 ops/s
# Warmup Iteration  23: 768955.747 ops/s
# Warmup Iteration  24: 769860.653 ops/s
# Warmup Iteration  25: 772604.650 ops/s
# Warmup Iteration  26: 769830.106 ops/s
# Warmup Iteration  27: 773921.033 ops/s
# Warmup Iteration  28: 771938.714 ops/s
# Warmup Iteration  29: 772550.344 ops/s
# Warmup Iteration  30: 771523.428 ops/s
Iteration   1: 772867.577 ops/s
Iteration   2: 772459.663 ops/s
Iteration   3: 774420.833 ops/s
Iteration   4: 775433.208 ops/s
Iteration   5: 772848.920 ops/s
Iteration   6: 771390.178 ops/s
Iteration   7: 772900.488 ops/s
Iteration   8: 774770.558 ops/s
Iteration   9: 772160.599 ops/s
Iteration  10: 772193.002 ops/s
Iteration  11: 774380.113 ops/s
Iteration  12: 775405.469 ops/s
Iteration  13: 774789.297 ops/s
Iteration  14: 774866.574 ops/s
Iteration  15: 774406.128 ops/s
Iteration  16: 774472.527 ops/s
Iteration  17: 772274.669 ops/s
Iteration  18: 770438.935 ops/s
Iteration  19: 773800.664 ops/s
Iteration  20: 774233.348 ops/s
Iteration  21: 769712.029 ops/s
Iteration  22: 772545.538 ops/s
Iteration  23: 773868.328 ops/s
Iteration  24: 773280.320 ops/s
Iteration  25: 772790.619 ops/s
Iteration  26: 774999.678 ops/s
Iteration  27: 773207.139 ops/s
Iteration  28: 774819.734 ops/s
Iteration  29: 766363.625 ops/s
Iteration  30: 774087.606 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_iteratorRemove":
  773206.246 ±(99.9%) 1279.309 ops/s [Average]
  (min, avg, max) = (766363.625, 773206.246, 775433.208), stdev = 1914.809
  CI (99.9%): [771926.937, 774485.554] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_iteratorRemove  thrpt   30  773206.246 ± 1279.309  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_iterator_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_iterator_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 518582.994 ops/s
# Warmup Iteration   2: 558275.122 ops/s
# Warmup Iteration   3: 719462.254 ops/s
# Warmup Iteration   4: 746210.324 ops/s
# Warmup Iteration   5: 744650.240 ops/s
# Warmup Iteration   6: 737017.273 ops/s
# Warmup Iteration   7: 741542.030 ops/s
# Warmup Iteration   8: 745648.518 ops/s
# Warmup Iteration   9: 745146.424 ops/s
# Warmup Iteration  10: 744090.683 ops/s
# Warmup Iteration  11: 743631.936 ops/s
# Warmup Iteration  12: 634638.605 ops/s
# Warmup Iteration  13: 724024.629 ops/s
# Warmup Iteration  14: 742604.985 ops/s
# Warmup Iteration  15: 745363.345 ops/s
# Warmup Iteration  16: 746330.969 ops/s
# Warmup Iteration  17: 780934.148 ops/s
# Warmup Iteration  18: 780322.276 ops/s
# Warmup Iteration  19: 779183.236 ops/s
# Warmup Iteration  20: 782531.591 ops/s
# Warmup Iteration  21: 781385.110 ops/s
# Warmup Iteration  22: 783740.970 ops/s
# Warmup Iteration  23: 781454.834 ops/s
# Warmup Iteration  24: 782047.430 ops/s
# Warmup Iteration  25: 779251.208 ops/s
# Warmup Iteration  26: 783303.712 ops/s
# Warmup Iteration  27: 779637.043 ops/s
# Warmup Iteration  28: 783022.020 ops/s
# Warmup Iteration  29: 780306.346 ops/s
# Warmup Iteration  30: 779075.726 ops/s
Iteration   1: 779831.429 ops/s
Iteration   2: 781311.843 ops/s
Iteration   3: 778807.794 ops/s
Iteration   4: 784196.992 ops/s
Iteration   5: 774684.546 ops/s
Iteration   6: 781053.227 ops/s
Iteration   7: 779885.824 ops/s
Iteration   8: 783238.490 ops/s
Iteration   9: 775761.307 ops/s
Iteration  10: 781804.187 ops/s
Iteration  11: 782169.166 ops/s
Iteration  12: 778103.930 ops/s
Iteration  13: 781990.696 ops/s
Iteration  14: 781727.301 ops/s
Iteration  15: 783293.079 ops/s
Iteration  16: 785759.529 ops/s
Iteration  17: 783772.250 ops/s
Iteration  18: 783635.877 ops/s
Iteration  19: 781878.613 ops/s
Iteration  20: 778200.877 ops/s
Iteration  21: 781669.914 ops/s
Iteration  22: 778597.252 ops/s
Iteration  23: 778757.405 ops/s
Iteration  24: 779014.160 ops/s
Iteration  25: 780854.989 ops/s
Iteration  26: 782320.045 ops/s
Iteration  27: 782934.862 ops/s
Iteration  28: 784111.820 ops/s
Iteration  29: 776381.431 ops/s
Iteration  30: 779594.349 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_iterator_throws":
  780844.773 ±(99.9%) 1781.131 ops/s [Average]
  (min, avg, max) = (774684.546, 780844.773, 785759.529), stdev = 2665.914
  CI (99.9%): [779063.642, 782625.904] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_iterator_throws  thrpt   30  780844.773 ± 1781.131  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 183299.647 ops/s
# Warmup Iteration   2: 305809.121 ops/s
# Warmup Iteration   3: 351551.241 ops/s
# Warmup Iteration   4: 353340.133 ops/s
# Warmup Iteration   5: 353287.771 ops/s
# Warmup Iteration   6: 294105.564 ops/s
# Warmup Iteration   7: 353202.344 ops/s
# Warmup Iteration   8: 353347.384 ops/s
# Warmup Iteration   9: 352979.237 ops/s
# Warmup Iteration  10: 351817.521 ops/s
# Warmup Iteration  11: 353254.985 ops/s
# Warmup Iteration  12: 352283.317 ops/s
# Warmup Iteration  13: 354036.143 ops/s
# Warmup Iteration  14: 353355.235 ops/s
# Warmup Iteration  15: 353358.815 ops/s
# Warmup Iteration  16: 352897.604 ops/s
# Warmup Iteration  17: 353256.219 ops/s
# Warmup Iteration  18: 350078.070 ops/s
# Warmup Iteration  19: 352865.050 ops/s
# Warmup Iteration  20: 350687.170 ops/s
# Warmup Iteration  21: 349533.894 ops/s
# Warmup Iteration  22: 353265.664 ops/s
# Warmup Iteration  23: 354064.550 ops/s
# Warmup Iteration  24: 353507.592 ops/s
# Warmup Iteration  25: 352352.873 ops/s
# Warmup Iteration  26: 352823.816 ops/s
# Warmup Iteration  27: 354154.640 ops/s
# Warmup Iteration  28: 352687.720 ops/s
# Warmup Iteration  29: 352371.711 ops/s
# Warmup Iteration  30: 352446.042 ops/s
Iteration   1: 352433.009 ops/s
Iteration   2: 353741.989 ops/s
Iteration   3: 354113.786 ops/s
Iteration   4: 352312.809 ops/s
Iteration   5: 352280.431 ops/s
Iteration   6: 352527.161 ops/s
Iteration   7: 354053.415 ops/s
Iteration   8: 353663.535 ops/s
Iteration   9: 352536.506 ops/s
Iteration  10: 353957.826 ops/s
Iteration  11: 353091.027 ops/s
Iteration  12: 353863.579 ops/s
Iteration  13: 351900.875 ops/s
Iteration  14: 351038.664 ops/s
Iteration  15: 352751.297 ops/s
Iteration  16: 353738.765 ops/s
Iteration  17: 349789.815 ops/s
Iteration  18: 353366.882 ops/s
Iteration  19: 352511.210 ops/s
Iteration  20: 353472.125 ops/s
Iteration  21: 352673.493 ops/s
Iteration  22: 354531.864 ops/s
Iteration  23: 353568.547 ops/s
Iteration  24: 353696.222 ops/s
Iteration  25: 353691.711 ops/s
Iteration  26: 351425.493 ops/s
Iteration  27: 350283.593 ops/s
Iteration  28: 352866.971 ops/s
Iteration  29: 354202.453 ops/s
Iteration  30: 352673.328 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_makeString":
  352891.946 ±(99.9%) 766.241 ops/s [Average]
  (min, avg, max) = (349789.815, 352891.946, 354531.864), stdev = 1146.874
  CI (99.9%): [352125.705, 353658.187] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score     Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_makeString  thrpt   30  352891.946 ± 766.241  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_makeStringWithSeparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_makeStringWithSeparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 939790.458 ops/s
# Warmup Iteration   2: 2188550.844 ops/s
# Warmup Iteration   3: 2252709.963 ops/s
# Warmup Iteration   4: 1842120.224 ops/s
# Warmup Iteration   5: 2256924.851 ops/s
# Warmup Iteration   6: 2253282.176 ops/s
# Warmup Iteration   7: 2259636.978 ops/s
# Warmup Iteration   8: 2253090.923 ops/s
# Warmup Iteration   9: 2248263.670 ops/s
# Warmup Iteration  10: 2252763.923 ops/s
# Warmup Iteration  11: 2258677.408 ops/s
# Warmup Iteration  12: 2249585.990 ops/s
# Warmup Iteration  13: 2253787.483 ops/s
# Warmup Iteration  14: 2260102.675 ops/s
# Warmup Iteration  15: 2255952.325 ops/s
# Warmup Iteration  16: 2256303.460 ops/s
# Warmup Iteration  17: 2251285.097 ops/s
# Warmup Iteration  18: 2256673.577 ops/s
# Warmup Iteration  19: 2248200.248 ops/s
# Warmup Iteration  20: 2255498.897 ops/s
# Warmup Iteration  21: 2259898.549 ops/s
# Warmup Iteration  22: 2259972.183 ops/s
# Warmup Iteration  23: 2259369.849 ops/s
# Warmup Iteration  24: 2252924.929 ops/s
# Warmup Iteration  25: 2249214.583 ops/s
# Warmup Iteration  26: 2261417.346 ops/s
# Warmup Iteration  27: 2245868.294 ops/s
# Warmup Iteration  28: 2253439.915 ops/s
# Warmup Iteration  29: 2246059.920 ops/s
# Warmup Iteration  30: 2260402.702 ops/s
Iteration   1: 2232449.864 ops/s
Iteration   2: 2248773.659 ops/s
Iteration   3: 2261379.800 ops/s
Iteration   4: 2232203.154 ops/s
Iteration   5: 2249419.625 ops/s
Iteration   6: 2252505.188 ops/s
Iteration   7: 2249489.650 ops/s
Iteration   8: 2246907.828 ops/s
Iteration   9: 2259851.443 ops/s
Iteration  10: 2250048.900 ops/s
Iteration  11: 2248474.411 ops/s
Iteration  12: 2244074.565 ops/s
Iteration  13: 2255734.611 ops/s
Iteration  14: 2256968.186 ops/s
Iteration  15: 2253721.539 ops/s
Iteration  16: 2252525.456 ops/s
Iteration  17: 2249896.142 ops/s
Iteration  18: 2250910.610 ops/s
Iteration  19: 2262683.977 ops/s
Iteration  20: 2267164.652 ops/s
Iteration  21: 2255337.001 ops/s
Iteration  22: 2265896.158 ops/s
Iteration  23: 2254760.415 ops/s
Iteration  24: 2253759.390 ops/s
Iteration  25: 2255482.434 ops/s
Iteration  26: 2262234.910 ops/s
Iteration  27: 2267268.165 ops/s
Iteration  28: 2254507.230 ops/s
Iteration  29: 2250051.084 ops/s
Iteration  30: 2256221.122 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_makeStringWithSeparator":
  2253356.706 ±(99.9%) 5522.772 ops/s [Average]
  (min, avg, max) = (2232203.154, 2253356.706, 2267268.165), stdev = 8266.226
  CI (99.9%): [2247833.933, 2258879.478] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_makeStringWithSeparator  thrpt   30  2253356.706 ± 5522.772  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1015263.883 ops/s
# Warmup Iteration   2: 2329154.453 ops/s
# Warmup Iteration   3: 2395859.235 ops/s
# Warmup Iteration   4: 1961509.112 ops/s
# Warmup Iteration   5: 2367030.189 ops/s
# Warmup Iteration   6: 2389173.559 ops/s
# Warmup Iteration   7: 2389880.178 ops/s
# Warmup Iteration   8: 2386294.404 ops/s
# Warmup Iteration   9: 2385291.058 ops/s
# Warmup Iteration  10: 2388297.556 ops/s
# Warmup Iteration  11: 2380764.951 ops/s
# Warmup Iteration  12: 2388329.347 ops/s
# Warmup Iteration  13: 2375387.559 ops/s
# Warmup Iteration  14: 2373055.646 ops/s
# Warmup Iteration  15: 2385614.800 ops/s
# Warmup Iteration  16: 2380250.746 ops/s
# Warmup Iteration  17: 2391927.201 ops/s
# Warmup Iteration  18: 2392747.049 ops/s
# Warmup Iteration  19: 2395830.575 ops/s
# Warmup Iteration  20: 2397759.783 ops/s
# Warmup Iteration  21: 2383799.566 ops/s
# Warmup Iteration  22: 2397176.776 ops/s
# Warmup Iteration  23: 2405943.333 ops/s
# Warmup Iteration  24: 2404889.093 ops/s
# Warmup Iteration  25: 2402279.031 ops/s
# Warmup Iteration  26: 2400797.979 ops/s
# Warmup Iteration  27: 2403413.557 ops/s
# Warmup Iteration  28: 2399319.813 ops/s
# Warmup Iteration  29: 2404790.995 ops/s
# Warmup Iteration  30: 2391877.157 ops/s
Iteration   1: 2397362.153 ops/s
Iteration   2: 2403935.400 ops/s
Iteration   3: 2400142.034 ops/s
Iteration   4: 2399099.453 ops/s
Iteration   5: 2399175.902 ops/s
Iteration   6: 2401534.880 ops/s
Iteration   7: 2387257.569 ops/s
Iteration   8: 2399418.122 ops/s
Iteration   9: 2386732.354 ops/s
Iteration  10: 2400008.904 ops/s
Iteration  11: 2398156.989 ops/s
Iteration  12: 2385026.566 ops/s
Iteration  13: 2399798.343 ops/s
Iteration  14: 2403358.309 ops/s
Iteration  15: 2390217.688 ops/s
Iteration  16: 2398856.178 ops/s
Iteration  17: 2391487.585 ops/s
Iteration  18: 2400245.476 ops/s
Iteration  19: 2402284.067 ops/s
Iteration  20: 2399620.046 ops/s
Iteration  21: 2394468.591 ops/s
Iteration  22: 2398466.691 ops/s
Iteration  23: 2403529.594 ops/s
Iteration  24: 2391374.862 ops/s
Iteration  25: 2394119.155 ops/s
Iteration  26: 2395232.185 ops/s
Iteration  27: 2400368.702 ops/s
Iteration  28: 2403952.737 ops/s
Iteration  29: 2405870.735 ops/s
Iteration  30: 2390388.153 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd":
  2397382.981 ±(99.9%) 3707.708 ops/s [Average]
  (min, avg, max) = (2385026.566, 2397382.981, 2405870.735), stdev = 5549.523
  CI (99.9%): [2393675.273, 2401090.689] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd  thrpt   30  2397382.981 ± 3707.708  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_max$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_max

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 956964.426 ops/s
# Warmup Iteration   2: 1614539.936 ops/s
# Warmup Iteration   3: 1916113.494 ops/s
# Warmup Iteration   4: 1943950.670 ops/s
# Warmup Iteration   5: 1916666.836 ops/s
# Warmup Iteration   6: 1551453.944 ops/s
# Warmup Iteration   7: 1951929.684 ops/s
# Warmup Iteration   8: 1950848.998 ops/s
# Warmup Iteration   9: 1950920.156 ops/s
# Warmup Iteration  10: 1948098.601 ops/s
# Warmup Iteration  11: 1948642.748 ops/s
# Warmup Iteration  12: 1950566.024 ops/s
# Warmup Iteration  13: 1951484.544 ops/s
# Warmup Iteration  14: 1951514.842 ops/s
# Warmup Iteration  15: 1932688.137 ops/s
# Warmup Iteration  16: 1948557.351 ops/s
# Warmup Iteration  17: 1952101.756 ops/s
# Warmup Iteration  18: 1951512.563 ops/s
# Warmup Iteration  19: 1955501.805 ops/s
# Warmup Iteration  20: 1952139.220 ops/s
# Warmup Iteration  21: 1947917.692 ops/s
# Warmup Iteration  22: 1955380.310 ops/s
# Warmup Iteration  23: 1947195.972 ops/s
# Warmup Iteration  24: 1947087.444 ops/s
# Warmup Iteration  25: 1946197.403 ops/s
# Warmup Iteration  26: 1947338.776 ops/s
# Warmup Iteration  27: 1945474.860 ops/s
# Warmup Iteration  28: 1949166.964 ops/s
# Warmup Iteration  29: 1947131.018 ops/s
# Warmup Iteration  30: 1951721.245 ops/s
Iteration   1: 1952547.978 ops/s
Iteration   2: 1954885.238 ops/s
Iteration   3: 1940337.821 ops/s
Iteration   4: 1947030.958 ops/s
Iteration   5: 1948247.689 ops/s
Iteration   6: 1944952.547 ops/s
Iteration   7: 1952901.141 ops/s
Iteration   8: 1951011.693 ops/s
Iteration   9: 1950903.523 ops/s
Iteration  10: 1953965.814 ops/s
Iteration  11: 1948052.403 ops/s
Iteration  12: 1952399.012 ops/s
Iteration  13: 1955152.063 ops/s
Iteration  14: 1949764.648 ops/s
Iteration  15: 1959042.431 ops/s
Iteration  16: 1946957.090 ops/s
Iteration  17: 1955129.479 ops/s
Iteration  18: 1951969.451 ops/s
Iteration  19: 1950910.853 ops/s
Iteration  20: 1953070.540 ops/s
Iteration  21: 1946212.167 ops/s
Iteration  22: 1954674.776 ops/s
Iteration  23: 1959843.647 ops/s
Iteration  24: 1946261.791 ops/s
Iteration  25: 1953490.233 ops/s
Iteration  26: 1948843.307 ops/s
Iteration  27: 1954735.653 ops/s
Iteration  28: 1949139.603 ops/s
Iteration  29: 1952613.200 ops/s
Iteration  30: 1947271.169 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_max":
  1951077.264 ±(99.9%) 2823.415 ops/s [Average]
  (min, avg, max) = (1940337.821, 1951077.264, 1959843.647), stdev = 4225.956
  CI (99.9%): [1948253.849, 1953900.679] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_max  thrpt   30  1951077.264 ± 2823.415  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_maxBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_maxBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 879426.600 ops/s
# Warmup Iteration   2: 1613340.138 ops/s
# Warmup Iteration   3: 1838780.268 ops/s
# Warmup Iteration   4: 1844879.540 ops/s
# Warmup Iteration   5: 1730955.298 ops/s
# Warmup Iteration   6: 1600711.822 ops/s
# Warmup Iteration   7: 1849050.554 ops/s
# Warmup Iteration   8: 1847947.012 ops/s
# Warmup Iteration   9: 1850348.758 ops/s
# Warmup Iteration  10: 1853386.451 ops/s
# Warmup Iteration  11: 1844940.112 ops/s
# Warmup Iteration  12: 1852705.077 ops/s
# Warmup Iteration  13: 1852340.859 ops/s
# Warmup Iteration  14: 1840884.321 ops/s
# Warmup Iteration  15: 1852770.345 ops/s
# Warmup Iteration  16: 1851172.570 ops/s
# Warmup Iteration  17: 1849723.242 ops/s
# Warmup Iteration  18: 1850980.050 ops/s
# Warmup Iteration  19: 1853150.203 ops/s
# Warmup Iteration  20: 1852385.669 ops/s
# Warmup Iteration  21: 1852354.522 ops/s
# Warmup Iteration  22: 1852495.369 ops/s
# Warmup Iteration  23: 1849495.047 ops/s
# Warmup Iteration  24: 1847180.632 ops/s
# Warmup Iteration  25: 1854367.379 ops/s
# Warmup Iteration  26: 1855474.255 ops/s
# Warmup Iteration  27: 1845501.321 ops/s
# Warmup Iteration  28: 1848762.499 ops/s
# Warmup Iteration  29: 1846155.603 ops/s
# Warmup Iteration  30: 1849985.679 ops/s
Iteration   1: 1846030.461 ops/s
Iteration   2: 1857230.783 ops/s
Iteration   3: 1852629.917 ops/s
Iteration   4: 1856954.036 ops/s
Iteration   5: 1849534.435 ops/s
Iteration   6: 1844610.641 ops/s
Iteration   7: 1854467.587 ops/s
Iteration   8: 1851089.302 ops/s
Iteration   9: 1838643.385 ops/s
Iteration  10: 1852993.202 ops/s
Iteration  11: 1845728.089 ops/s
Iteration  12: 1846994.435 ops/s
Iteration  13: 1843229.486 ops/s
Iteration  14: 1847877.189 ops/s
Iteration  15: 1854472.655 ops/s
Iteration  16: 1850961.840 ops/s
Iteration  17: 1847455.473 ops/s
Iteration  18: 1852835.887 ops/s
Iteration  19: 1838357.644 ops/s
Iteration  20: 1852179.426 ops/s
Iteration  21: 1854469.139 ops/s
Iteration  22: 1846617.330 ops/s
Iteration  23: 1856806.046 ops/s
Iteration  24: 1852275.869 ops/s
Iteration  25: 1855173.877 ops/s
Iteration  26: 1844983.539 ops/s
Iteration  27: 1844354.494 ops/s
Iteration  28: 1846944.123 ops/s
Iteration  29: 1840045.368 ops/s
Iteration  30: 1851533.153 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_maxBy":
  1849249.294 ±(99.9%) 3564.861 ops/s [Average]
  (min, avg, max) = (1838357.644, 1849249.294, 1857230.783), stdev = 5335.716
  CI (99.9%): [1845684.433, 1852814.155] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_maxBy  thrpt   30  1849249.294 ± 3564.861  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_maxByOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_maxByOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1372603.843 ops/s
# Warmup Iteration   2: 3118268.687 ops/s
# Warmup Iteration   3: 3103656.622 ops/s
# Warmup Iteration   4: 2787487.665 ops/s
# Warmup Iteration   5: 2881491.701 ops/s
# Warmup Iteration   6: 3115789.923 ops/s
# Warmup Iteration   7: 3115852.210 ops/s
# Warmup Iteration   8: 3116612.299 ops/s
# Warmup Iteration   9: 3113421.254 ops/s
# Warmup Iteration  10: 3117862.841 ops/s
# Warmup Iteration  11: 3121228.431 ops/s
# Warmup Iteration  12: 3121866.520 ops/s
# Warmup Iteration  13: 3115740.085 ops/s
# Warmup Iteration  14: 3109389.725 ops/s
# Warmup Iteration  15: 3109136.811 ops/s
# Warmup Iteration  16: 3122131.006 ops/s
# Warmup Iteration  17: 3121300.911 ops/s
# Warmup Iteration  18: 3120245.460 ops/s
# Warmup Iteration  19: 3117435.085 ops/s
# Warmup Iteration  20: 3111963.182 ops/s
# Warmup Iteration  21: 3114397.639 ops/s
# Warmup Iteration  22: 3106051.005 ops/s
# Warmup Iteration  23: 3102744.192 ops/s
# Warmup Iteration  24: 3113193.463 ops/s
# Warmup Iteration  25: 3116381.043 ops/s
# Warmup Iteration  26: 3110283.396 ops/s
# Warmup Iteration  27: 3115712.237 ops/s
# Warmup Iteration  28: 3114133.093 ops/s
# Warmup Iteration  29: 3119104.273 ops/s
# Warmup Iteration  30: 3113580.679 ops/s
Iteration   1: 3103302.041 ops/s
Iteration   2: 3125399.039 ops/s
Iteration   3: 3118294.820 ops/s
Iteration   4: 3122860.020 ops/s
Iteration   5: 3119196.810 ops/s
Iteration   6: 3126729.220 ops/s
Iteration   7: 3122735.385 ops/s
Iteration   8: 3124363.414 ops/s
Iteration   9: 3116128.750 ops/s
Iteration  10: 3115940.884 ops/s
Iteration  11: 3125934.629 ops/s
Iteration  12: 3124987.004 ops/s
Iteration  13: 3104554.335 ops/s
Iteration  14: 3088511.129 ops/s
Iteration  15: 3112666.740 ops/s
Iteration  16: 3108647.002 ops/s
Iteration  17: 3115252.527 ops/s
Iteration  18: 3120140.000 ops/s
Iteration  19: 3122966.390 ops/s
Iteration  20: 3120907.973 ops/s
Iteration  21: 3122888.857 ops/s
Iteration  22: 3116188.215 ops/s
Iteration  23: 3124242.252 ops/s
Iteration  24: 3123281.128 ops/s
Iteration  25: 3115074.207 ops/s
Iteration  26: 3106238.045 ops/s
Iteration  27: 3116238.544 ops/s
Iteration  28: 3114930.554 ops/s
Iteration  29: 3117853.625 ops/s
Iteration  30: 3114197.105 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_maxByOptional":
  3117021.688 ±(99.9%) 5555.776 ops/s [Average]
  (min, avg, max) = (3088511.129, 3117021.688, 3126729.220), stdev = 8315.624
  CI (99.9%): [3111465.912, 3122577.464] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_maxByOptional  thrpt   30  3117021.688 ± 5555.776  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_maxBy_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_maxBy_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2011181.663 ops/s
# Warmup Iteration   2: 3721350.524 ops/s
# Warmup Iteration   3: 4353494.591 ops/s
# Warmup Iteration   4: 4399632.867 ops/s
# Warmup Iteration   5: 4228248.346 ops/s
# Warmup Iteration   6: 3710834.514 ops/s
# Warmup Iteration   7: 4392931.670 ops/s
# Warmup Iteration   8: 4416508.748 ops/s
# Warmup Iteration   9: 4417896.955 ops/s
# Warmup Iteration  10: 4399327.821 ops/s
# Warmup Iteration  11: 4409231.163 ops/s
# Warmup Iteration  12: 4418426.301 ops/s
# Warmup Iteration  13: 4412651.484 ops/s
# Warmup Iteration  14: 4412544.068 ops/s
# Warmup Iteration  15: 4409223.306 ops/s
# Warmup Iteration  16: 4401777.914 ops/s
# Warmup Iteration  17: 4418497.304 ops/s
# Warmup Iteration  18: 4408667.275 ops/s
# Warmup Iteration  19: 4414003.327 ops/s
# Warmup Iteration  20: 4405754.588 ops/s
# Warmup Iteration  21: 4419577.535 ops/s
# Warmup Iteration  22: 4403285.242 ops/s
# Warmup Iteration  23: 4396437.700 ops/s
# Warmup Iteration  24: 4406675.814 ops/s
# Warmup Iteration  25: 4411253.251 ops/s
# Warmup Iteration  26: 4391070.843 ops/s
# Warmup Iteration  27: 4402254.961 ops/s
# Warmup Iteration  28: 4412676.040 ops/s
# Warmup Iteration  29: 4405834.913 ops/s
# Warmup Iteration  30: 4415937.047 ops/s
Iteration   1: 4405795.064 ops/s
Iteration   2: 4383588.135 ops/s
Iteration   3: 4384435.028 ops/s
Iteration   4: 4409867.950 ops/s
Iteration   5: 4383226.223 ops/s
Iteration   6: 4413404.206 ops/s
Iteration   7: 4406152.120 ops/s
Iteration   8: 4400134.669 ops/s
Iteration   9: 4410525.018 ops/s
Iteration  10: 4406854.137 ops/s
Iteration  11: 4396293.235 ops/s
Iteration  12: 4411543.954 ops/s
Iteration  13: 4406011.424 ops/s
Iteration  14: 4407376.710 ops/s
Iteration  15: 4420133.862 ops/s
Iteration  16: 4414494.595 ops/s
Iteration  17: 4422827.359 ops/s
Iteration  18: 4410516.111 ops/s
Iteration  19: 4407908.509 ops/s
Iteration  20: 4417837.771 ops/s
Iteration  21: 4400903.995 ops/s
Iteration  22: 4412249.185 ops/s
Iteration  23: 4404132.857 ops/s
Iteration  24: 4411716.565 ops/s
Iteration  25: 4404142.142 ops/s
Iteration  26: 4405159.361 ops/s
Iteration  27: 4410582.688 ops/s
Iteration  28: 4403026.357 ops/s
Iteration  29: 4410937.178 ops/s
Iteration  30: 4415394.022 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_maxBy_null_throws":
  4406572.348 ±(99.9%) 6441.294 ops/s [Average]
  (min, avg, max) = (4383226.223, 4406572.348, 4422827.359), stdev = 9641.026
  CI (99.9%): [4400131.054, 4413013.641] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_maxBy_null_throws  thrpt   30  4406572.348 ± 6441.294  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_maxOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_maxOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 799854.000 ops/s
# Warmup Iteration   2: 1651643.150 ops/s
# Warmup Iteration   3: 1736899.837 ops/s
# Warmup Iteration   4: 1742985.797 ops/s
# Warmup Iteration   5: 1426403.447 ops/s
# Warmup Iteration   6: 1753520.993 ops/s
# Warmup Iteration   7: 1753689.994 ops/s
# Warmup Iteration   8: 1757473.016 ops/s
# Warmup Iteration   9: 1750596.063 ops/s
# Warmup Iteration  10: 1747754.268 ops/s
# Warmup Iteration  11: 1751460.228 ops/s
# Warmup Iteration  12: 1750298.201 ops/s
# Warmup Iteration  13: 1749253.844 ops/s
# Warmup Iteration  14: 1749095.931 ops/s
# Warmup Iteration  15: 1745833.016 ops/s
# Warmup Iteration  16: 1751717.511 ops/s
# Warmup Iteration  17: 1745646.516 ops/s
# Warmup Iteration  18: 1752623.649 ops/s
# Warmup Iteration  19: 1752608.131 ops/s
# Warmup Iteration  20: 1754526.768 ops/s
# Warmup Iteration  21: 1754955.344 ops/s
# Warmup Iteration  22: 1753104.340 ops/s
# Warmup Iteration  23: 1755915.614 ops/s
# Warmup Iteration  24: 1754612.586 ops/s
# Warmup Iteration  25: 1752309.155 ops/s
# Warmup Iteration  26: 1754642.996 ops/s
# Warmup Iteration  27: 1752566.152 ops/s
# Warmup Iteration  28: 1750200.725 ops/s
# Warmup Iteration  29: 1753149.918 ops/s
# Warmup Iteration  30: 1753399.055 ops/s
Iteration   1: 1745187.047 ops/s
Iteration   2: 1754062.833 ops/s
Iteration   3: 1744696.080 ops/s
Iteration   4: 1748955.643 ops/s
Iteration   5: 1750815.621 ops/s
Iteration   6: 1753908.832 ops/s
Iteration   7: 1749191.918 ops/s
Iteration   8: 1745722.233 ops/s
Iteration   9: 1755820.221 ops/s
Iteration  10: 1753444.895 ops/s
Iteration  11: 1745620.028 ops/s
Iteration  12: 1753586.918 ops/s
Iteration  13: 1747593.102 ops/s
Iteration  14: 1746533.516 ops/s
Iteration  15: 1746948.988 ops/s
Iteration  16: 1759498.266 ops/s
Iteration  17: 1751864.577 ops/s
Iteration  18: 1749838.197 ops/s
Iteration  19: 1746022.542 ops/s
Iteration  20: 1756772.420 ops/s
Iteration  21: 1748146.029 ops/s
Iteration  22: 1735695.086 ops/s
Iteration  23: 1736077.220 ops/s
Iteration  24: 1745087.777 ops/s
Iteration  25: 1746850.830 ops/s
Iteration  26: 1751879.897 ops/s
Iteration  27: 1744058.567 ops/s
Iteration  28: 1750375.832 ops/s
Iteration  29: 1741957.973 ops/s
Iteration  30: 1746732.233 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_maxOptional":
  1748431.511 ±(99.9%) 3597.018 ops/s [Average]
  (min, avg, max) = (1735695.086, 1748431.511, 1759498.266), stdev = 5383.848
  CI (99.9%): [1744834.492, 1752028.529] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_maxOptional  thrpt   30  1748431.511 ± 3597.018  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_max_empty_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_max_empty_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 685973.954 ops/s
# Warmup Iteration   2: 721076.734 ops/s
# Warmup Iteration   3: 956057.424 ops/s
# Warmup Iteration   4: 945285.708 ops/s
# Warmup Iteration   5: 951101.753 ops/s
# Warmup Iteration   6: 948258.117 ops/s
# Warmup Iteration   7: 952204.098 ops/s
# Warmup Iteration   8: 956556.456 ops/s
# Warmup Iteration   9: 954049.239 ops/s
# Warmup Iteration  10: 953012.492 ops/s
# Warmup Iteration  11: 953593.169 ops/s
# Warmup Iteration  12: 796922.119 ops/s
# Warmup Iteration  13: 955644.748 ops/s
# Warmup Iteration  14: 956616.894 ops/s
# Warmup Iteration  15: 953842.846 ops/s
# Warmup Iteration  16: 954602.389 ops/s
# Warmup Iteration  17: 1013555.106 ops/s
# Warmup Iteration  18: 1009243.547 ops/s
# Warmup Iteration  19: 1011135.051 ops/s
# Warmup Iteration  20: 1014462.269 ops/s
# Warmup Iteration  21: 1009667.297 ops/s
# Warmup Iteration  22: 1012942.398 ops/s
# Warmup Iteration  23: 1013405.412 ops/s
# Warmup Iteration  24: 1011230.867 ops/s
# Warmup Iteration  25: 1011272.221 ops/s
# Warmup Iteration  26: 1011786.736 ops/s
# Warmup Iteration  27: 1009860.024 ops/s
# Warmup Iteration  28: 1011041.473 ops/s
# Warmup Iteration  29: 1013051.438 ops/s
# Warmup Iteration  30: 1014794.761 ops/s
Iteration   1: 1010644.628 ops/s
Iteration   2: 1012292.078 ops/s
Iteration   3: 1012104.534 ops/s
Iteration   4: 1015141.973 ops/s
Iteration   5: 1011402.893 ops/s
Iteration   6: 1009946.596 ops/s
Iteration   7: 1014085.379 ops/s
Iteration   8: 1013098.689 ops/s
Iteration   9: 1009845.461 ops/s
Iteration  10: 1010731.425 ops/s
Iteration  11: 1009900.108 ops/s
Iteration  12: 1016566.925 ops/s
Iteration  13: 1014458.516 ops/s
Iteration  14: 1014195.840 ops/s
Iteration  15: 1012926.660 ops/s
Iteration  16: 1011724.223 ops/s
Iteration  17: 1011802.316 ops/s
Iteration  18: 1010475.097 ops/s
Iteration  19: 1009508.614 ops/s
Iteration  20: 1013845.985 ops/s
Iteration  21: 1011669.507 ops/s
Iteration  22: 1013338.530 ops/s
Iteration  23: 1014245.646 ops/s
Iteration  24: 1012779.266 ops/s
Iteration  25: 1015444.992 ops/s
Iteration  26: 1011765.525 ops/s
Iteration  27: 1009178.423 ops/s
Iteration  28: 1015638.356 ops/s
Iteration  29: 1016575.875 ops/s
Iteration  30: 1014182.311 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_max_empty_throws":
  1012650.546 ±(99.9%) 1419.503 ops/s [Average]
  (min, avg, max) = (1009178.423, 1012650.546, 1016575.875), stdev = 2124.646
  CI (99.9%): [1011231.042, 1014070.049] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_max_empty_throws  thrpt   30  1012650.546 ± 1419.503  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_max_null_safe$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_max_null_safe

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1852196.342 ops/s
# Warmup Iteration   2: 3239647.940 ops/s
# Warmup Iteration   3: 3787136.404 ops/s
# Warmup Iteration   4: 3801305.896 ops/s
# Warmup Iteration   5: 3808411.205 ops/s
# Warmup Iteration   6: 3052324.650 ops/s
# Warmup Iteration   7: 3803869.069 ops/s
# Warmup Iteration   8: 3814206.624 ops/s
# Warmup Iteration   9: 3820224.236 ops/s
# Warmup Iteration  10: 3814202.772 ops/s
# Warmup Iteration  11: 3806741.101 ops/s
# Warmup Iteration  12: 3809961.680 ops/s
# Warmup Iteration  13: 3801460.392 ops/s
# Warmup Iteration  14: 3798085.881 ops/s
# Warmup Iteration  15: 3818598.999 ops/s
# Warmup Iteration  16: 3815033.153 ops/s
# Warmup Iteration  17: 3819409.366 ops/s
# Warmup Iteration  18: 3814704.388 ops/s
# Warmup Iteration  19: 3808971.148 ops/s
# Warmup Iteration  20: 3817976.656 ops/s
# Warmup Iteration  21: 3811525.283 ops/s
# Warmup Iteration  22: 3821758.508 ops/s
# Warmup Iteration  23: 3813407.550 ops/s
# Warmup Iteration  24: 3807904.075 ops/s
# Warmup Iteration  25: 3820962.667 ops/s
# Warmup Iteration  26: 3824491.269 ops/s
# Warmup Iteration  27: 3813312.563 ops/s
# Warmup Iteration  28: 3819315.181 ops/s
# Warmup Iteration  29: 3810863.768 ops/s
# Warmup Iteration  30: 3818549.548 ops/s
Iteration   1: 3786734.219 ops/s
Iteration   2: 3818842.301 ops/s
Iteration   3: 3814373.102 ops/s
Iteration   4: 3812236.806 ops/s
Iteration   5: 3800795.025 ops/s
Iteration   6: 3804145.739 ops/s
Iteration   7: 3808938.965 ops/s
Iteration   8: 3827421.741 ops/s
Iteration   9: 3798841.858 ops/s
Iteration  10: 3823997.145 ops/s
Iteration  11: 3812178.601 ops/s
Iteration  12: 3800001.086 ops/s
Iteration  13: 3811155.393 ops/s
Iteration  14: 3813649.229 ops/s
Iteration  15: 3820780.998 ops/s
Iteration  16: 3804107.464 ops/s
Iteration  17: 3820905.693 ops/s
Iteration  18: 3785829.223 ops/s
Iteration  19: 3798302.949 ops/s
Iteration  20: 3796664.718 ops/s
Iteration  21: 3818728.392 ops/s
Iteration  22: 3821997.511 ops/s
Iteration  23: 3801617.597 ops/s
Iteration  24: 3826735.614 ops/s
Iteration  25: 3816050.724 ops/s
Iteration  26: 3817786.369 ops/s
Iteration  27: 3826955.153 ops/s
Iteration  28: 3823720.301 ops/s
Iteration  29: 3813733.262 ops/s
Iteration  30: 3818624.377 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_max_null_safe":
  3811528.385 ±(99.9%) 7685.544 ops/s [Average]
  (min, avg, max) = (3785829.223, 3811528.385, 3827421.741), stdev = 11503.361
  CI (99.9%): [3803842.841, 3819213.929] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_max_null_safe  thrpt   30  3811528.385 ± 7685.544  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_max_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_max_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1530307.668 ops/s
# Warmup Iteration   2: 2755280.026 ops/s
# Warmup Iteration   3: 3194172.135 ops/s
# Warmup Iteration   4: 3209478.415 ops/s
# Warmup Iteration   5: 3204909.424 ops/s
# Warmup Iteration   6: 2589468.575 ops/s
# Warmup Iteration   7: 3227413.885 ops/s
# Warmup Iteration   8: 3221386.303 ops/s
# Warmup Iteration   9: 3226170.866 ops/s
# Warmup Iteration  10: 3219434.649 ops/s
# Warmup Iteration  11: 3217861.817 ops/s
# Warmup Iteration  12: 3218867.829 ops/s
# Warmup Iteration  13: 3197381.496 ops/s
# Warmup Iteration  14: 3209637.320 ops/s
# Warmup Iteration  15: 3201839.670 ops/s
# Warmup Iteration  16: 3224096.824 ops/s
# Warmup Iteration  17: 3215927.091 ops/s
# Warmup Iteration  18: 3216253.046 ops/s
# Warmup Iteration  19: 3216138.811 ops/s
# Warmup Iteration  20: 3216566.073 ops/s
# Warmup Iteration  21: 3213012.050 ops/s
# Warmup Iteration  22: 3201117.284 ops/s
# Warmup Iteration  23: 3221917.377 ops/s
# Warmup Iteration  24: 3216327.625 ops/s
# Warmup Iteration  25: 3222473.596 ops/s
# Warmup Iteration  26: 3223734.430 ops/s
# Warmup Iteration  27: 3215182.377 ops/s
# Warmup Iteration  28: 3225314.104 ops/s
# Warmup Iteration  29: 3222053.774 ops/s
# Warmup Iteration  30: 3226856.456 ops/s
Iteration   1: 3221114.254 ops/s
Iteration   2: 3219517.429 ops/s
Iteration   3: 3222600.239 ops/s
Iteration   4: 3231521.715 ops/s
Iteration   5: 3225395.294 ops/s
Iteration   6: 3227061.665 ops/s
Iteration   7: 3224860.038 ops/s
Iteration   8: 3216334.318 ops/s
Iteration   9: 3221501.339 ops/s
Iteration  10: 3223956.433 ops/s
Iteration  11: 3216020.776 ops/s
Iteration  12: 3208263.537 ops/s
Iteration  13: 3226263.540 ops/s
Iteration  14: 3193283.226 ops/s
Iteration  15: 3228609.063 ops/s
Iteration  16: 3224158.837 ops/s
Iteration  17: 3228969.433 ops/s
Iteration  18: 3230453.430 ops/s
Iteration  19: 3211608.220 ops/s
Iteration  20: 3208944.062 ops/s
Iteration  21: 3220130.862 ops/s
Iteration  22: 3212788.699 ops/s
Iteration  23: 3227156.467 ops/s
Iteration  24: 3217282.571 ops/s
Iteration  25: 3224018.674 ops/s
Iteration  26: 3224929.771 ops/s
Iteration  27: 3213271.510 ops/s
Iteration  28: 3217564.190 ops/s
Iteration  29: 3217543.237 ops/s
Iteration  30: 3212345.966 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_max_null_throws":
  3219915.626 ±(99.9%) 5439.106 ops/s [Average]
  (min, avg, max) = (3193283.226, 3219915.626, 3231521.715), stdev = 8140.998
  CI (99.9%): [3214476.521, 3225354.732] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_max_null_throws  thrpt   30  3219915.626 ± 5439.106  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_max_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_max_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1438387.910 ops/s
# Warmup Iteration   2: 2427741.488 ops/s
# Warmup Iteration   3: 2888600.530 ops/s
# Warmup Iteration   4: 2905132.634 ops/s
# Warmup Iteration   5: 2910082.831 ops/s
# Warmup Iteration   6: 2338818.400 ops/s
# Warmup Iteration   7: 2898086.111 ops/s
# Warmup Iteration   8: 2910982.015 ops/s
# Warmup Iteration   9: 2903792.809 ops/s
# Warmup Iteration  10: 2911683.894 ops/s
# Warmup Iteration  11: 2902782.734 ops/s
# Warmup Iteration  12: 2912164.087 ops/s
# Warmup Iteration  13: 2910353.038 ops/s
# Warmup Iteration  14: 2910875.202 ops/s
# Warmup Iteration  15: 2914004.787 ops/s
# Warmup Iteration  16: 2910018.083 ops/s
# Warmup Iteration  17: 2912396.938 ops/s
# Warmup Iteration  18: 2914136.134 ops/s
# Warmup Iteration  19: 2906172.546 ops/s
# Warmup Iteration  20: 2907304.287 ops/s
# Warmup Iteration  21: 2908766.203 ops/s
# Warmup Iteration  22: 2914298.978 ops/s
# Warmup Iteration  23: 2907191.541 ops/s
# Warmup Iteration  24: 2911764.739 ops/s
# Warmup Iteration  25: 2908903.468 ops/s
# Warmup Iteration  26: 2909525.581 ops/s
# Warmup Iteration  27: 2915645.464 ops/s
# Warmup Iteration  28: 2907822.925 ops/s
# Warmup Iteration  29: 2907101.410 ops/s
# Warmup Iteration  30: 2908806.137 ops/s
Iteration   1: 2912964.154 ops/s
Iteration   2: 2868627.101 ops/s
Iteration   3: 2916744.344 ops/s
Iteration   4: 2908079.696 ops/s
Iteration   5: 2901871.878 ops/s
Iteration   6: 2893891.620 ops/s
Iteration   7: 2901835.938 ops/s
Iteration   8: 2916503.372 ops/s
Iteration   9: 2897322.445 ops/s
Iteration  10: 2903081.641 ops/s
Iteration  11: 2917324.976 ops/s
Iteration  12: 2883400.152 ops/s
Iteration  13: 2912630.067 ops/s
Iteration  14: 2910729.370 ops/s
Iteration  15: 2894285.431 ops/s
Iteration  16: 2899694.915 ops/s
Iteration  17: 2908910.772 ops/s
Iteration  18: 2916232.984 ops/s
Iteration  19: 2907388.348 ops/s
Iteration  20: 2915366.090 ops/s
Iteration  21: 2906735.808 ops/s
Iteration  22: 2905539.581 ops/s
Iteration  23: 2913036.047 ops/s
Iteration  24: 2922783.953 ops/s
Iteration  25: 2906735.871 ops/s
Iteration  26: 2913133.974 ops/s
Iteration  27: 2912153.580 ops/s
Iteration  28: 2917719.976 ops/s
Iteration  29: 2899797.432 ops/s
Iteration  30: 2911041.919 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_max_null_throws_without_comparator":
  2906518.781 ±(99.9%) 7484.885 ops/s [Average]
  (min, avg, max) = (2868627.101, 2906518.781, 2922783.953), stdev = 11203.024
  CI (99.9%): [2899033.896, 2914003.666] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_max_null_throws_without_comparator  thrpt   30  2906518.781 ± 7484.885  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_max_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_max_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 975771.233 ops/s
# Warmup Iteration   2: 1651172.307 ops/s
# Warmup Iteration   3: 1919675.438 ops/s
# Warmup Iteration   4: 1940080.530 ops/s
# Warmup Iteration   5: 1945261.076 ops/s
# Warmup Iteration   6: 1553568.221 ops/s
# Warmup Iteration   7: 1941330.296 ops/s
# Warmup Iteration   8: 1935093.828 ops/s
# Warmup Iteration   9: 1937338.329 ops/s
# Warmup Iteration  10: 1938075.733 ops/s
# Warmup Iteration  11: 1945619.572 ops/s
# Warmup Iteration  12: 1930159.658 ops/s
# Warmup Iteration  13: 1941326.262 ops/s
# Warmup Iteration  14: 1942207.949 ops/s
# Warmup Iteration  15: 1942685.576 ops/s
# Warmup Iteration  16: 1940669.439 ops/s
# Warmup Iteration  17: 1942893.017 ops/s
# Warmup Iteration  18: 1945565.663 ops/s
# Warmup Iteration  19: 1933206.474 ops/s
# Warmup Iteration  20: 1947731.453 ops/s
# Warmup Iteration  21: 1946660.192 ops/s
# Warmup Iteration  22: 1945669.949 ops/s
# Warmup Iteration  23: 1947667.634 ops/s
# Warmup Iteration  24: 1944162.404 ops/s
# Warmup Iteration  25: 1950246.172 ops/s
# Warmup Iteration  26: 1935791.998 ops/s
# Warmup Iteration  27: 1948869.407 ops/s
# Warmup Iteration  28: 1942664.719 ops/s
# Warmup Iteration  29: 1943747.811 ops/s
# Warmup Iteration  30: 1944225.984 ops/s
Iteration   1: 1946460.595 ops/s
Iteration   2: 1948063.938 ops/s
Iteration   3: 1941248.149 ops/s
Iteration   4: 1953493.811 ops/s
Iteration   5: 1946566.591 ops/s
Iteration   6: 1947390.435 ops/s
Iteration   7: 1938345.617 ops/s
Iteration   8: 1941774.465 ops/s
Iteration   9: 1949539.903 ops/s
Iteration  10: 1947326.852 ops/s
Iteration  11: 1947402.262 ops/s
Iteration  12: 1946730.042 ops/s
Iteration  13: 1942462.949 ops/s
Iteration  14: 1943406.999 ops/s
Iteration  15: 1949407.050 ops/s
Iteration  16: 1944811.594 ops/s
Iteration  17: 1941249.448 ops/s
Iteration  18: 1926630.932 ops/s
Iteration  19: 1945613.455 ops/s
Iteration  20: 1939988.925 ops/s
Iteration  21: 1937309.331 ops/s
Iteration  22: 1937445.409 ops/s
Iteration  23: 1938105.491 ops/s
Iteration  24: 1943802.296 ops/s
Iteration  25: 1937800.288 ops/s
Iteration  26: 1945951.310 ops/s
Iteration  27: 1940626.433 ops/s
Iteration  28: 1932183.954 ops/s
Iteration  29: 1932111.192 ops/s
Iteration  30: 1934228.828 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_max_without_comparator":
  1942249.285 ±(99.9%) 4034.028 ops/s [Average]
  (min, avg, max) = (1926630.932, 1942249.285, 1953493.811), stdev = 6037.944
  CI (99.9%): [1938215.257, 1946283.313] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_max_without_comparator  thrpt   30  1942249.285 ± 4034.028  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_min$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_min

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 976887.785 ops/s
# Warmup Iteration   2: 1663787.760 ops/s
# Warmup Iteration   3: 1946292.131 ops/s
# Warmup Iteration   4: 1957725.484 ops/s
# Warmup Iteration   5: 1964776.946 ops/s
# Warmup Iteration   6: 1574704.382 ops/s
# Warmup Iteration   7: 1961269.042 ops/s
# Warmup Iteration   8: 1956545.528 ops/s
# Warmup Iteration   9: 1962744.534 ops/s
# Warmup Iteration  10: 1962571.988 ops/s
# Warmup Iteration  11: 1962662.148 ops/s
# Warmup Iteration  12: 1961448.688 ops/s
# Warmup Iteration  13: 1956674.863 ops/s
# Warmup Iteration  14: 1955627.453 ops/s
# Warmup Iteration  15: 1966936.156 ops/s
# Warmup Iteration  16: 1963842.344 ops/s
# Warmup Iteration  17: 1960612.310 ops/s
# Warmup Iteration  18: 1953648.831 ops/s
# Warmup Iteration  19: 1960736.319 ops/s
# Warmup Iteration  20: 1961825.280 ops/s
# Warmup Iteration  21: 1948853.352 ops/s
# Warmup Iteration  22: 1957009.293 ops/s
# Warmup Iteration  23: 1961793.842 ops/s
# Warmup Iteration  24: 1949303.430 ops/s
# Warmup Iteration  25: 1955897.956 ops/s
# Warmup Iteration  26: 1962101.574 ops/s
# Warmup Iteration  27: 1959928.213 ops/s
# Warmup Iteration  28: 1954560.152 ops/s
# Warmup Iteration  29: 1963526.504 ops/s
# Warmup Iteration  30: 1956339.738 ops/s
Iteration   1: 1959771.114 ops/s
Iteration   2: 1959893.782 ops/s
Iteration   3: 1958453.275 ops/s
Iteration   4: 1968651.499 ops/s
Iteration   5: 1958540.132 ops/s
Iteration   6: 1958797.008 ops/s
Iteration   7: 1966988.085 ops/s
Iteration   8: 1964125.437 ops/s
Iteration   9: 1965010.621 ops/s
Iteration  10: 1954428.353 ops/s
Iteration  11: 1968605.504 ops/s
Iteration  12: 1946739.218 ops/s
Iteration  13: 1962969.273 ops/s
Iteration  14: 1968084.394 ops/s
Iteration  15: 1961849.247 ops/s
Iteration  16: 1965045.604 ops/s
Iteration  17: 1959444.434 ops/s
Iteration  18: 1966423.281 ops/s
Iteration  19: 1963529.994 ops/s
Iteration  20: 1966276.731 ops/s
Iteration  21: 1961247.042 ops/s
Iteration  22: 1961450.285 ops/s
Iteration  23: 1959081.357 ops/s
Iteration  24: 1964921.604 ops/s
Iteration  25: 1964403.056 ops/s
Iteration  26: 1962674.480 ops/s
Iteration  27: 1959609.367 ops/s
Iteration  28: 1962535.612 ops/s
Iteration  29: 1962604.732 ops/s
Iteration  30: 1967367.789 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_min":
  1962317.410 ±(99.9%) 3066.874 ops/s [Average]
  (min, avg, max) = (1946739.218, 1962317.410, 1968651.499), stdev = 4590.352
  CI (99.9%): [1959250.537, 1965384.284] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_min  thrpt   30  1962317.410 ± 3066.874  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_minBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_minBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 896606.952 ops/s
# Warmup Iteration   2: 1615704.582 ops/s
# Warmup Iteration   3: 1821844.065 ops/s
# Warmup Iteration   4: 1839982.344 ops/s
# Warmup Iteration   5: 1831711.631 ops/s
# Warmup Iteration   6: 1513716.028 ops/s
# Warmup Iteration   7: 1835157.723 ops/s
# Warmup Iteration   8: 1832016.363 ops/s
# Warmup Iteration   9: 1837188.462 ops/s
# Warmup Iteration  10: 1839315.472 ops/s
# Warmup Iteration  11: 1842727.071 ops/s
# Warmup Iteration  12: 1843846.831 ops/s
# Warmup Iteration  13: 1842203.171 ops/s
# Warmup Iteration  14: 1834264.669 ops/s
# Warmup Iteration  15: 1843933.209 ops/s
# Warmup Iteration  16: 1842973.677 ops/s
# Warmup Iteration  17: 1842333.702 ops/s
# Warmup Iteration  18: 1838756.355 ops/s
# Warmup Iteration  19: 1840438.254 ops/s
# Warmup Iteration  20: 1843538.672 ops/s
# Warmup Iteration  21: 1843637.578 ops/s
# Warmup Iteration  22: 1842522.857 ops/s
# Warmup Iteration  23: 1831510.755 ops/s
# Warmup Iteration  24: 1845160.368 ops/s
# Warmup Iteration  25: 1834264.672 ops/s
# Warmup Iteration  26: 1839784.969 ops/s
# Warmup Iteration  27: 1839649.756 ops/s
# Warmup Iteration  28: 1839628.508 ops/s
# Warmup Iteration  29: 1833767.860 ops/s
# Warmup Iteration  30: 1842107.642 ops/s
Iteration   1: 1833225.977 ops/s
Iteration   2: 1841592.344 ops/s
Iteration   3: 1842415.997 ops/s
Iteration   4: 1841058.499 ops/s
Iteration   5: 1839502.526 ops/s
Iteration   6: 1841336.713 ops/s
Iteration   7: 1837929.717 ops/s
Iteration   8: 1841522.158 ops/s
Iteration   9: 1845285.685 ops/s
Iteration  10: 1829376.311 ops/s
Iteration  11: 1828058.557 ops/s
Iteration  12: 1844594.630 ops/s
Iteration  13: 1839006.455 ops/s
Iteration  14: 1846566.804 ops/s
Iteration  15: 1841950.403 ops/s
Iteration  16: 1834592.120 ops/s
Iteration  17: 1834046.417 ops/s
Iteration  18: 1844377.157 ops/s
Iteration  19: 1846587.701 ops/s
Iteration  20: 1829043.064 ops/s
Iteration  21: 1845623.632 ops/s
Iteration  22: 1839225.936 ops/s
Iteration  23: 1844204.958 ops/s
Iteration  24: 1843554.116 ops/s
Iteration  25: 1840427.868 ops/s
Iteration  26: 1841521.467 ops/s
Iteration  27: 1841081.229 ops/s
Iteration  28: 1831002.159 ops/s
Iteration  29: 1843899.354 ops/s
Iteration  30: 1844525.440 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_minBy":
  1839904.513 ±(99.9%) 3609.262 ops/s [Average]
  (min, avg, max) = (1828058.557, 1839904.513, 1846587.701), stdev = 5402.173
  CI (99.9%): [1836295.251, 1843513.775] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_minBy  thrpt   30  1839904.513 ± 3609.262  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_minByOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_minByOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1466734.971 ops/s
# Warmup Iteration   2: 3195829.533 ops/s
# Warmup Iteration   3: 3313163.921 ops/s
# Warmup Iteration   4: 3267404.477 ops/s
# Warmup Iteration   5: 2811633.374 ops/s
# Warmup Iteration   6: 3329135.337 ops/s
# Warmup Iteration   7: 3337046.989 ops/s
# Warmup Iteration   8: 3342680.214 ops/s
# Warmup Iteration   9: 3354528.411 ops/s
# Warmup Iteration  10: 3332509.161 ops/s
# Warmup Iteration  11: 3349687.210 ops/s
# Warmup Iteration  12: 3342735.171 ops/s
# Warmup Iteration  13: 3325013.210 ops/s
# Warmup Iteration  14: 3332574.497 ops/s
# Warmup Iteration  15: 3346099.910 ops/s
# Warmup Iteration  16: 3331811.277 ops/s
# Warmup Iteration  17: 3344498.229 ops/s
# Warmup Iteration  18: 3340815.928 ops/s
# Warmup Iteration  19: 3343910.671 ops/s
# Warmup Iteration  20: 3333844.117 ops/s
# Warmup Iteration  21: 3343109.354 ops/s
# Warmup Iteration  22: 3343816.148 ops/s
# Warmup Iteration  23: 3341549.575 ops/s
# Warmup Iteration  24: 3348726.633 ops/s
# Warmup Iteration  25: 3340271.804 ops/s
# Warmup Iteration  26: 3347314.203 ops/s
# Warmup Iteration  27: 3338746.930 ops/s
# Warmup Iteration  28: 3341039.297 ops/s
# Warmup Iteration  29: 3340454.353 ops/s
# Warmup Iteration  30: 3348263.210 ops/s
Iteration   1: 3348261.792 ops/s
Iteration   2: 3335366.701 ops/s
Iteration   3: 3345094.855 ops/s
Iteration   4: 3346433.905 ops/s
Iteration   5: 3352483.158 ops/s
Iteration   6: 3344707.249 ops/s
Iteration   7: 3340845.241 ops/s
Iteration   8: 3349305.648 ops/s
Iteration   9: 3345861.118 ops/s
Iteration  10: 3344334.190 ops/s
Iteration  11: 3341654.444 ops/s
Iteration  12: 3315683.546 ops/s
Iteration  13: 3337146.104 ops/s
Iteration  14: 3350538.508 ops/s
Iteration  15: 3343136.272 ops/s
Iteration  16: 3344373.402 ops/s
Iteration  17: 3344553.207 ops/s
Iteration  18: 3346907.726 ops/s
Iteration  19: 3342889.542 ops/s
Iteration  20: 3340688.629 ops/s
Iteration  21: 3333555.966 ops/s
Iteration  22: 3334794.754 ops/s
Iteration  23: 3340474.344 ops/s
Iteration  24: 3345785.095 ops/s
Iteration  25: 3340192.680 ops/s
Iteration  26: 3346351.717 ops/s
Iteration  27: 3334691.541 ops/s
Iteration  28: 3332827.730 ops/s
Iteration  29: 3328210.305 ops/s
Iteration  30: 3331193.957 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_minByOptional":
  3340944.778 ±(99.9%) 5125.959 ops/s [Average]
  (min, avg, max) = (3315683.546, 3340944.778, 3352483.158), stdev = 7672.295
  CI (99.9%): [3335818.818, 3346070.737] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_minByOptional  thrpt   30  3340944.778 ± 5125.959  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_minBy_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_minBy_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2024485.808 ops/s
# Warmup Iteration   2: 3765149.387 ops/s
# Warmup Iteration   3: 4372344.480 ops/s
# Warmup Iteration   4: 4397466.010 ops/s
# Warmup Iteration   5: 4185354.152 ops/s
# Warmup Iteration   6: 3732098.628 ops/s
# Warmup Iteration   7: 4398087.569 ops/s
# Warmup Iteration   8: 4384435.457 ops/s
# Warmup Iteration   9: 4406501.095 ops/s
# Warmup Iteration  10: 4405855.758 ops/s
# Warmup Iteration  11: 4405910.480 ops/s
# Warmup Iteration  12: 4411800.594 ops/s
# Warmup Iteration  13: 4415198.443 ops/s
# Warmup Iteration  14: 4414946.796 ops/s
# Warmup Iteration  15: 4398636.528 ops/s
# Warmup Iteration  16: 4414301.065 ops/s
# Warmup Iteration  17: 4405107.275 ops/s
# Warmup Iteration  18: 4402782.767 ops/s
# Warmup Iteration  19: 4410673.802 ops/s
# Warmup Iteration  20: 4399245.757 ops/s
# Warmup Iteration  21: 4408875.236 ops/s
# Warmup Iteration  22: 4415326.777 ops/s
# Warmup Iteration  23: 4413714.351 ops/s
# Warmup Iteration  24: 4394043.719 ops/s
# Warmup Iteration  25: 4395775.445 ops/s
# Warmup Iteration  26: 4408693.832 ops/s
# Warmup Iteration  27: 4392761.390 ops/s
# Warmup Iteration  28: 4400856.518 ops/s
# Warmup Iteration  29: 4374257.699 ops/s
# Warmup Iteration  30: 4396352.341 ops/s
Iteration   1: 4412889.004 ops/s
Iteration   2: 4412115.940 ops/s
Iteration   3: 4387927.498 ops/s
Iteration   4: 4416730.244 ops/s
Iteration   5: 4374138.347 ops/s
Iteration   6: 4413579.030 ops/s
Iteration   7: 4422356.125 ops/s
Iteration   8: 4407665.089 ops/s
Iteration   9: 4391873.182 ops/s
Iteration  10: 4409883.138 ops/s
Iteration  11: 4381608.571 ops/s
Iteration  12: 4388107.653 ops/s
Iteration  13: 4405652.922 ops/s
Iteration  14: 4382297.288 ops/s
Iteration  15: 4393635.836 ops/s
Iteration  16: 4411202.277 ops/s
Iteration  17: 4385674.563 ops/s
Iteration  18: 4399251.047 ops/s
Iteration  19: 4407934.409 ops/s
Iteration  20: 4413842.593 ops/s
Iteration  21: 4409174.253 ops/s
Iteration  22: 4414117.881 ops/s
Iteration  23: 4414026.481 ops/s
Iteration  24: 4401194.137 ops/s
Iteration  25: 4396226.634 ops/s
Iteration  26: 4403716.580 ops/s
Iteration  27: 4396656.745 ops/s
Iteration  28: 4375708.450 ops/s
Iteration  29: 4398116.838 ops/s
Iteration  30: 4403495.358 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_minBy_null_throws":
  4401026.604 ±(99.9%) 8649.523 ops/s [Average]
  (min, avg, max) = (4374138.347, 4401026.604, 4422356.125), stdev = 12946.200
  CI (99.9%): [4392377.081, 4409676.127] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_minBy_null_throws  thrpt   30  4401026.604 ± 8649.523  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_minOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_minOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 802832.521 ops/s
# Warmup Iteration   2: 1661823.730 ops/s
# Warmup Iteration   3: 1759221.780 ops/s
# Warmup Iteration   4: 1769625.273 ops/s
# Warmup Iteration   5: 1441646.971 ops/s
# Warmup Iteration   6: 1766779.435 ops/s
# Warmup Iteration   7: 1776032.274 ops/s
# Warmup Iteration   8: 1772735.447 ops/s
# Warmup Iteration   9: 1773758.121 ops/s
# Warmup Iteration  10: 1769002.675 ops/s
# Warmup Iteration  11: 1772176.634 ops/s
# Warmup Iteration  12: 1770874.028 ops/s
# Warmup Iteration  13: 1774652.412 ops/s
# Warmup Iteration  14: 1772606.925 ops/s
# Warmup Iteration  15: 1770598.471 ops/s
# Warmup Iteration  16: 1767304.383 ops/s
# Warmup Iteration  17: 1768320.214 ops/s
# Warmup Iteration  18: 1774286.580 ops/s
# Warmup Iteration  19: 1774515.778 ops/s
# Warmup Iteration  20: 1771075.109 ops/s
# Warmup Iteration  21: 1778117.575 ops/s
# Warmup Iteration  22: 1775012.934 ops/s
# Warmup Iteration  23: 1777725.428 ops/s
# Warmup Iteration  24: 1774553.954 ops/s
# Warmup Iteration  25: 1774266.655 ops/s
# Warmup Iteration  26: 1771433.597 ops/s
# Warmup Iteration  27: 1775035.438 ops/s
# Warmup Iteration  28: 1772399.607 ops/s
# Warmup Iteration  29: 1774755.793 ops/s
# Warmup Iteration  30: 1776713.610 ops/s
Iteration   1: 1763569.659 ops/s
Iteration   2: 1774344.662 ops/s
Iteration   3: 1773350.280 ops/s
Iteration   4: 1772747.065 ops/s
Iteration   5: 1767177.751 ops/s
Iteration   6: 1765988.689 ops/s
Iteration   7: 1768373.302 ops/s
Iteration   8: 1772294.116 ops/s
Iteration   9: 1776340.096 ops/s
Iteration  10: 1777536.280 ops/s
Iteration  11: 1773156.020 ops/s
Iteration  12: 1766505.402 ops/s
Iteration  13: 1772984.005 ops/s
Iteration  14: 1772108.416 ops/s
Iteration  15: 1766984.860 ops/s
Iteration  16: 1771361.068 ops/s
Iteration  17: 1775328.255 ops/s
Iteration  18: 1770057.229 ops/s
Iteration  19: 1775150.261 ops/s
Iteration  20: 1772810.876 ops/s
Iteration  21: 1772059.513 ops/s
Iteration  22: 1755197.265 ops/s
Iteration  23: 1767425.927 ops/s
Iteration  24: 1767047.068 ops/s
Iteration  25: 1772027.547 ops/s
Iteration  26: 1768798.406 ops/s
Iteration  27: 1774546.418 ops/s
Iteration  28: 1773513.051 ops/s
Iteration  29: 1776748.206 ops/s
Iteration  30: 1777631.963 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_minOptional":
  1771105.455 ±(99.9%) 3191.251 ops/s [Average]
  (min, avg, max) = (1755197.265, 1771105.455, 1777631.963), stdev = 4776.514
  CI (99.9%): [1767914.204, 1774296.706] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_minOptional  thrpt   30  1771105.455 ± 3191.251  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_min_empty_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_min_empty_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 693784.406 ops/s
# Warmup Iteration   2: 729241.221 ops/s
# Warmup Iteration   3: 981875.501 ops/s
# Warmup Iteration   4: 966476.354 ops/s
# Warmup Iteration   5: 976787.114 ops/s
# Warmup Iteration   6: 978658.429 ops/s
# Warmup Iteration   7: 979179.202 ops/s
# Warmup Iteration   8: 974348.735 ops/s
# Warmup Iteration   9: 977331.194 ops/s
# Warmup Iteration  10: 971693.825 ops/s
# Warmup Iteration  11: 951819.491 ops/s
# Warmup Iteration  12: 844506.694 ops/s
# Warmup Iteration  13: 977678.719 ops/s
# Warmup Iteration  14: 977253.103 ops/s
# Warmup Iteration  15: 979299.950 ops/s
# Warmup Iteration  16: 977396.745 ops/s
# Warmup Iteration  17: 1028555.909 ops/s
# Warmup Iteration  18: 1031502.973 ops/s
# Warmup Iteration  19: 1033573.567 ops/s
# Warmup Iteration  20: 1029642.833 ops/s
# Warmup Iteration  21: 1028382.474 ops/s
# Warmup Iteration  22: 1030307.277 ops/s
# Warmup Iteration  23: 1031653.744 ops/s
# Warmup Iteration  24: 1032093.391 ops/s
# Warmup Iteration  25: 1032068.289 ops/s
# Warmup Iteration  26: 1035122.280 ops/s
# Warmup Iteration  27: 1034175.175 ops/s
# Warmup Iteration  28: 1032300.603 ops/s
# Warmup Iteration  29: 1033896.170 ops/s
# Warmup Iteration  30: 1026740.723 ops/s
Iteration   1: 1034504.998 ops/s
Iteration   2: 1029375.294 ops/s
Iteration   3: 1034748.186 ops/s
Iteration   4: 1035096.798 ops/s
Iteration   5: 1032968.056 ops/s
Iteration   6: 1028573.095 ops/s
Iteration   7: 1030161.004 ops/s
Iteration   8: 1034724.272 ops/s
Iteration   9: 1030257.337 ops/s
Iteration  10: 1029227.448 ops/s
Iteration  11: 1029530.466 ops/s
Iteration  12: 1032505.448 ops/s
Iteration  13: 1030867.325 ops/s
Iteration  14: 1033828.829 ops/s
Iteration  15: 1035086.435 ops/s
Iteration  16: 1033739.830 ops/s
Iteration  17: 1031930.107 ops/s
Iteration  18: 1034433.196 ops/s
Iteration  19: 1034131.137 ops/s
Iteration  20: 1029923.475 ops/s
Iteration  21: 1035836.618 ops/s
Iteration  22: 1034835.060 ops/s
Iteration  23: 1032279.430 ops/s
Iteration  24: 1030067.199 ops/s
Iteration  25: 1034547.759 ops/s
Iteration  26: 1033245.262 ops/s
Iteration  27: 1031783.726 ops/s
Iteration  28: 1029553.220 ops/s
Iteration  29: 1035086.785 ops/s
Iteration  30: 1031149.373 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_min_empty_throws":
  1032466.572 ±(99.9%) 1505.217 ops/s [Average]
  (min, avg, max) = (1028573.095, 1032466.572, 1035836.618), stdev = 2252.938
  CI (99.9%): [1030961.355, 1033971.790] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_min_empty_throws  thrpt   30  1032466.572 ± 1505.217  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_min_null_safe$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_min_null_safe

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1863566.123 ops/s
# Warmup Iteration   2: 3243819.298 ops/s
# Warmup Iteration   3: 3756642.133 ops/s
# Warmup Iteration   4: 3759933.194 ops/s
# Warmup Iteration   5: 3776315.276 ops/s
# Warmup Iteration   6: 3039804.892 ops/s
# Warmup Iteration   7: 3771447.182 ops/s
# Warmup Iteration   8: 3771807.276 ops/s
# Warmup Iteration   9: 3781792.839 ops/s
# Warmup Iteration  10: 3775648.249 ops/s
# Warmup Iteration  11: 3773326.435 ops/s
# Warmup Iteration  12: 3771027.582 ops/s
# Warmup Iteration  13: 3764595.062 ops/s
# Warmup Iteration  14: 3775234.615 ops/s
# Warmup Iteration  15: 3779982.397 ops/s
# Warmup Iteration  16: 3781345.528 ops/s
# Warmup Iteration  17: 3778008.857 ops/s
# Warmup Iteration  18: 3769082.414 ops/s
# Warmup Iteration  19: 3776429.897 ops/s
# Warmup Iteration  20: 3774341.792 ops/s
# Warmup Iteration  21: 3776410.235 ops/s
# Warmup Iteration  22: 3779154.681 ops/s
# Warmup Iteration  23: 3780424.871 ops/s
# Warmup Iteration  24: 3776454.101 ops/s
# Warmup Iteration  25: 3774054.550 ops/s
# Warmup Iteration  26: 3763437.495 ops/s
# Warmup Iteration  27: 3773221.775 ops/s
# Warmup Iteration  28: 3777229.321 ops/s
# Warmup Iteration  29: 3769014.269 ops/s
# Warmup Iteration  30: 3768830.582 ops/s
Iteration   1: 3765392.674 ops/s
Iteration   2: 3769886.539 ops/s
Iteration   3: 3781440.058 ops/s
Iteration   4: 3738846.873 ops/s
Iteration   5: 3770183.848 ops/s
Iteration   6: 3759426.333 ops/s
Iteration   7: 3773240.938 ops/s
Iteration   8: 3774827.003 ops/s
Iteration   9: 3789427.355 ops/s
Iteration  10: 3772557.518 ops/s
Iteration  11: 3773251.062 ops/s
Iteration  12: 3765239.576 ops/s
Iteration  13: 3764242.570 ops/s
Iteration  14: 3776873.737 ops/s
Iteration  15: 3758395.362 ops/s
Iteration  16: 3784405.286 ops/s
Iteration  17: 3781133.231 ops/s
Iteration  18: 3779568.800 ops/s
Iteration  19: 3780794.423 ops/s
Iteration  20: 3770761.136 ops/s
Iteration  21: 3786717.041 ops/s
Iteration  22: 3769242.977 ops/s
Iteration  23: 3780403.436 ops/s
Iteration  24: 3770891.272 ops/s
Iteration  25: 3755309.494 ops/s
Iteration  26: 3767804.596 ops/s
Iteration  27: 3773387.288 ops/s
Iteration  28: 3784362.802 ops/s
Iteration  29: 3753954.195 ops/s
Iteration  30: 3771381.632 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_min_null_safe":
  3771444.968 ±(99.9%) 7302.855 ops/s [Average]
  (min, avg, max) = (3738846.873, 3771444.968, 3789427.355), stdev = 10930.571
  CI (99.9%): [3764142.113, 3778747.824] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_min_null_safe  thrpt   30  3771444.968 ± 7302.855  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_min_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_min_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1286084.205 ops/s
# Warmup Iteration   2: 1757772.452 ops/s
# Warmup Iteration   3: 2268325.473 ops/s
# Warmup Iteration   4: 2253712.418 ops/s
# Warmup Iteration   5: 2269601.567 ops/s
# Warmup Iteration   6: 2268036.121 ops/s
# Warmup Iteration   7: 2271775.518 ops/s
# Warmup Iteration   8: 1828547.093 ops/s
# Warmup Iteration   9: 2272710.226 ops/s
# Warmup Iteration  10: 2270971.311 ops/s
# Warmup Iteration  11: 2270611.762 ops/s
# Warmup Iteration  12: 2265859.409 ops/s
# Warmup Iteration  13: 2271962.123 ops/s
# Warmup Iteration  14: 2271275.115 ops/s
# Warmup Iteration  15: 2270920.417 ops/s
# Warmup Iteration  16: 2264456.667 ops/s
# Warmup Iteration  17: 2225683.669 ops/s
# Warmup Iteration  18: 2233048.477 ops/s
# Warmup Iteration  19: 2227471.955 ops/s
# Warmup Iteration  20: 2219632.366 ops/s
# Warmup Iteration  21: 2220178.658 ops/s
# Warmup Iteration  22: 2227829.496 ops/s
# Warmup Iteration  23: 2227040.090 ops/s
# Warmup Iteration  24: 2226328.982 ops/s
# Warmup Iteration  25: 2229843.800 ops/s
# Warmup Iteration  26: 2230927.545 ops/s
# Warmup Iteration  27: 2229652.022 ops/s
# Warmup Iteration  28: 2230380.059 ops/s
# Warmup Iteration  29: 2229103.377 ops/s
# Warmup Iteration  30: 2234616.735 ops/s
Iteration   1: 2231769.265 ops/s
Iteration   2: 2232447.111 ops/s
Iteration   3: 2236675.422 ops/s
Iteration   4: 2224719.171 ops/s
Iteration   5: 2227637.720 ops/s
Iteration   6: 2228151.588 ops/s
Iteration   7: 2231393.964 ops/s
Iteration   8: 2233031.303 ops/s
Iteration   9: 2227302.384 ops/s
Iteration  10: 2226842.086 ops/s
Iteration  11: 2232481.245 ops/s
Iteration  12: 2226824.342 ops/s
Iteration  13: 2234613.259 ops/s
Iteration  14: 2231634.304 ops/s
Iteration  15: 2219708.657 ops/s
Iteration  16: 2224400.485 ops/s
Iteration  17: 2234645.759 ops/s
Iteration  18: 2232094.111 ops/s
Iteration  19: 2230267.508 ops/s
Iteration  20: 2232606.706 ops/s
Iteration  21: 2236403.782 ops/s
Iteration  22: 2228269.194 ops/s
Iteration  23: 2224255.676 ops/s
Iteration  24: 2227380.088 ops/s
Iteration  25: 2229659.400 ops/s
Iteration  26: 2237651.586 ops/s
Iteration  27: 2226870.090 ops/s
Iteration  28: 2230014.268 ops/s
Iteration  29: 2230432.600 ops/s
Iteration  30: 2226288.878 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_min_null_throws":
  2229882.398 ±(99.9%) 2760.590 ops/s [Average]
  (min, avg, max) = (2219708.657, 2229882.398, 2237651.586), stdev = 4131.922
  CI (99.9%): [2227121.808, 2232642.989] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_min_null_throws  thrpt   30  2229882.398 ± 2760.590  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_min_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_min_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1448257.800 ops/s
# Warmup Iteration   2: 2467662.691 ops/s
# Warmup Iteration   3: 2951487.643 ops/s
# Warmup Iteration   4: 2961521.014 ops/s
# Warmup Iteration   5: 2954233.293 ops/s
# Warmup Iteration   6: 2362107.371 ops/s
# Warmup Iteration   7: 2979111.435 ops/s
# Warmup Iteration   8: 2963916.604 ops/s
# Warmup Iteration   9: 2972636.105 ops/s
# Warmup Iteration  10: 2973700.795 ops/s
# Warmup Iteration  11: 2979917.295 ops/s
# Warmup Iteration  12: 2971710.639 ops/s
# Warmup Iteration  13: 2974282.234 ops/s
# Warmup Iteration  14: 2982451.375 ops/s
# Warmup Iteration  15: 2973972.988 ops/s
# Warmup Iteration  16: 2973423.379 ops/s
# Warmup Iteration  17: 2976395.055 ops/s
# Warmup Iteration  18: 2974790.416 ops/s
# Warmup Iteration  19: 2975431.617 ops/s
# Warmup Iteration  20: 2968032.171 ops/s
# Warmup Iteration  21: 2970735.558 ops/s
# Warmup Iteration  22: 2966425.583 ops/s
# Warmup Iteration  23: 2980251.314 ops/s
# Warmup Iteration  24: 2973241.807 ops/s
# Warmup Iteration  25: 2970276.352 ops/s
# Warmup Iteration  26: 2969871.495 ops/s
# Warmup Iteration  27: 2970618.722 ops/s
# Warmup Iteration  28: 2974292.670 ops/s
# Warmup Iteration  29: 2973243.535 ops/s
# Warmup Iteration  30: 2972451.807 ops/s
Iteration   1: 2975727.438 ops/s
Iteration   2: 2974257.715 ops/s
Iteration   3: 2972431.827 ops/s
Iteration   4: 2975935.091 ops/s
Iteration   5: 2976177.353 ops/s
Iteration   6: 2968107.917 ops/s
Iteration   7: 2976048.714 ops/s
Iteration   8: 2961511.972 ops/s
Iteration   9: 2969680.474 ops/s
Iteration  10: 2970187.471 ops/s
Iteration  11: 2978892.705 ops/s
Iteration  12: 2974932.433 ops/s
Iteration  13: 2979586.494 ops/s
Iteration  14: 2964571.365 ops/s
Iteration  15: 2985298.103 ops/s
Iteration  16: 2974100.969 ops/s
Iteration  17: 2978864.887 ops/s
Iteration  18: 2967483.238 ops/s
Iteration  19: 2971960.573 ops/s
Iteration  20: 2982516.410 ops/s
Iteration  21: 2976559.332 ops/s
Iteration  22: 2977139.262 ops/s
Iteration  23: 2966548.084 ops/s
Iteration  24: 2983437.435 ops/s
Iteration  25: 2955564.168 ops/s
Iteration  26: 2983165.229 ops/s
Iteration  27: 2979958.051 ops/s
Iteration  28: 2982836.338 ops/s
Iteration  29: 2961442.212 ops/s
Iteration  30: 2981438.756 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_min_null_throws_without_comparator":
  2974212.067 ±(99.9%) 4912.109 ops/s [Average]
  (min, avg, max) = (2955564.168, 2974212.067, 2985298.103), stdev = 7352.214
  CI (99.9%): [2969299.958, 2979124.176] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_min_null_throws_without_comparator  thrpt   30  2974212.067 ± 4912.109  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_min_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_min_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 994540.541 ops/s
# Warmup Iteration   2: 1636703.608 ops/s
# Warmup Iteration   3: 1919838.898 ops/s
# Warmup Iteration   4: 1932503.798 ops/s
# Warmup Iteration   5: 1930178.873 ops/s
# Warmup Iteration   6: 1550377.944 ops/s
# Warmup Iteration   7: 1928754.928 ops/s
# Warmup Iteration   8: 1921537.390 ops/s
# Warmup Iteration   9: 1924666.581 ops/s
# Warmup Iteration  10: 1920452.943 ops/s
# Warmup Iteration  11: 1926060.780 ops/s
# Warmup Iteration  12: 1923605.614 ops/s
# Warmup Iteration  13: 1919558.159 ops/s
# Warmup Iteration  14: 1928586.195 ops/s
# Warmup Iteration  15: 1924103.329 ops/s
# Warmup Iteration  16: 1927882.960 ops/s
# Warmup Iteration  17: 1923583.469 ops/s
# Warmup Iteration  18: 1930041.812 ops/s
# Warmup Iteration  19: 1929045.027 ops/s
# Warmup Iteration  20: 1926759.438 ops/s
# Warmup Iteration  21: 1931961.900 ops/s
# Warmup Iteration  22: 1933397.225 ops/s
# Warmup Iteration  23: 1932526.201 ops/s
# Warmup Iteration  24: 1931572.929 ops/s
# Warmup Iteration  25: 1929699.713 ops/s
# Warmup Iteration  26: 1927844.226 ops/s
# Warmup Iteration  27: 1932309.340 ops/s
# Warmup Iteration  28: 1933594.178 ops/s
# Warmup Iteration  29: 1934437.561 ops/s
# Warmup Iteration  30: 1933672.359 ops/s
Iteration   1: 1936774.861 ops/s
Iteration   2: 1920332.348 ops/s
Iteration   3: 1932334.937 ops/s
Iteration   4: 1938786.362 ops/s
Iteration   5: 1935009.169 ops/s
Iteration   6: 1936976.744 ops/s
Iteration   7: 1934610.406 ops/s
Iteration   8: 1934595.666 ops/s
Iteration   9: 1931930.913 ops/s
Iteration  10: 1931328.989 ops/s
Iteration  11: 1927087.777 ops/s
Iteration  12: 1930085.555 ops/s
Iteration  13: 1930548.491 ops/s
Iteration  14: 1934108.298 ops/s
Iteration  15: 1934263.268 ops/s
Iteration  16: 1929382.835 ops/s
Iteration  17: 1932518.035 ops/s
Iteration  18: 1929345.255 ops/s
Iteration  19: 1935229.419 ops/s
Iteration  20: 1923511.043 ops/s
Iteration  21: 1928996.640 ops/s
Iteration  22: 1932538.831 ops/s
Iteration  23: 1935053.446 ops/s
Iteration  24: 1932246.104 ops/s
Iteration  25: 1935154.265 ops/s
Iteration  26: 1932182.550 ops/s
Iteration  27: 1930929.628 ops/s
Iteration  28: 1923876.850 ops/s
Iteration  29: 1930219.954 ops/s
Iteration  30: 1933446.611 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_min_without_comparator":
  1931780.175 ±(99.9%) 2742.595 ops/s [Average]
  (min, avg, max) = (1920332.348, 1931780.175, 1938786.362), stdev = 4104.987
  CI (99.9%): [1929037.580, 1934522.770] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_min_without_comparator  thrpt   30  1931780.175 ± 2742.595  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_newWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_newWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 106698.759 ops/s
# Warmup Iteration   2: 192382.522 ops/s
# Warmup Iteration   3: 210332.055 ops/s
# Warmup Iteration   4: 210883.108 ops/s
# Warmup Iteration   5: 205246.996 ops/s
# Warmup Iteration   6: 182232.427 ops/s
# Warmup Iteration   7: 211562.393 ops/s
# Warmup Iteration   8: 211584.390 ops/s
# Warmup Iteration   9: 211727.555 ops/s
# Warmup Iteration  10: 211787.705 ops/s
# Warmup Iteration  11: 211917.440 ops/s
# Warmup Iteration  12: 210775.651 ops/s
# Warmup Iteration  13: 211631.757 ops/s
# Warmup Iteration  14: 210568.103 ops/s
# Warmup Iteration  15: 211064.566 ops/s
# Warmup Iteration  16: 211093.917 ops/s
# Warmup Iteration  17: 211206.236 ops/s
# Warmup Iteration  18: 211240.871 ops/s
# Warmup Iteration  19: 211512.086 ops/s
# Warmup Iteration  20: 210363.712 ops/s
# Warmup Iteration  21: 211625.594 ops/s
# Warmup Iteration  22: 210722.040 ops/s
# Warmup Iteration  23: 210594.605 ops/s
# Warmup Iteration  24: 211232.913 ops/s
# Warmup Iteration  25: 210776.583 ops/s
# Warmup Iteration  26: 210512.253 ops/s
# Warmup Iteration  27: 211698.503 ops/s
# Warmup Iteration  28: 210912.513 ops/s
# Warmup Iteration  29: 210361.655 ops/s
# Warmup Iteration  30: 210745.695 ops/s
Iteration   1: 210084.956 ops/s
Iteration   2: 211451.773 ops/s
Iteration   3: 211283.734 ops/s
Iteration   4: 211739.326 ops/s
Iteration   5: 211205.014 ops/s
Iteration   6: 212108.136 ops/s
Iteration   7: 211982.821 ops/s
Iteration   8: 211058.652 ops/s
Iteration   9: 211659.328 ops/s
Iteration  10: 211644.733 ops/s
Iteration  11: 211591.842 ops/s
Iteration  12: 211452.050 ops/s
Iteration  13: 211841.363 ops/s
Iteration  14: 212440.145 ops/s
Iteration  15: 212079.034 ops/s
Iteration  16: 210581.317 ops/s
Iteration  17: 212350.400 ops/s
Iteration  18: 211734.422 ops/s
Iteration  19: 211634.933 ops/s
Iteration  20: 211448.451 ops/s
Iteration  21: 211421.215 ops/s
Iteration  22: 211160.178 ops/s
Iteration  23: 210297.145 ops/s
Iteration  24: 211241.960 ops/s
Iteration  25: 211899.132 ops/s
Iteration  26: 211752.947 ops/s
Iteration  27: 208294.349 ops/s
Iteration  28: 210849.701 ops/s
Iteration  29: 212395.004 ops/s
Iteration  30: 212150.447 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_newWith":
  211427.817 ±(99.9%) 550.024 ops/s [Average]
  (min, avg, max) = (208294.349, 211427.817, 212440.145), stdev = 823.251
  CI (99.9%): [210877.793, 211977.841] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score     Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_newWith  thrpt   30  211427.817 ± 550.024  ops/s
----------------------------------------
=== Benchmark: org.eclipseollections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_newWithAll$ ===
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_newWithout$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_newWithout

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 431729.061 ops/s
# Warmup Iteration   2: 658693.841 ops/s
# Warmup Iteration   3: 786181.164 ops/s
# Warmup Iteration   4: 792439.161 ops/s
# Warmup Iteration   5: 795628.571 ops/s
# Warmup Iteration   6: 792219.157 ops/s
# Warmup Iteration   7: 640768.368 ops/s
# Warmup Iteration   8: 796810.038 ops/s
# Warmup Iteration   9: 795435.895 ops/s
# Warmup Iteration  10: 795551.884 ops/s
# Warmup Iteration  11: 797894.002 ops/s
# Warmup Iteration  12: 790259.413 ops/s
# Warmup Iteration  13: 796460.612 ops/s
# Warmup Iteration  14: 789228.577 ops/s
# Warmup Iteration  15: 798268.602 ops/s
# Warmup Iteration  16: 791563.449 ops/s
# Warmup Iteration  17: 795186.452 ops/s
# Warmup Iteration  18: 797488.209 ops/s
# Warmup Iteration  19: 795549.031 ops/s
# Warmup Iteration  20: 796969.901 ops/s
# Warmup Iteration  21: 793851.880 ops/s
# Warmup Iteration  22: 789313.662 ops/s
# Warmup Iteration  23: 795677.832 ops/s
# Warmup Iteration  24: 795102.782 ops/s
# Warmup Iteration  25: 798557.345 ops/s
# Warmup Iteration  26: 793804.466 ops/s
# Warmup Iteration  27: 796491.941 ops/s
# Warmup Iteration  28: 794669.653 ops/s
# Warmup Iteration  29: 792689.095 ops/s
# Warmup Iteration  30: 795422.503 ops/s
Iteration   1: 790000.265 ops/s
Iteration   2: 784189.645 ops/s
Iteration   3: 796925.260 ops/s
Iteration   4: 795725.514 ops/s
Iteration   5: 799117.499 ops/s
Iteration   6: 799247.925 ops/s
Iteration   7: 793705.895 ops/s
Iteration   8: 792684.256 ops/s
Iteration   9: 795845.136 ops/s
Iteration  10: 798287.761 ops/s
Iteration  11: 796072.373 ops/s
Iteration  12: 790145.736 ops/s
Iteration  13: 798711.294 ops/s
Iteration  14: 790439.318 ops/s
Iteration  15: 784898.097 ops/s
Iteration  16: 796163.484 ops/s
Iteration  17: 794330.908 ops/s
Iteration  18: 791772.318 ops/s
Iteration  19: 792723.296 ops/s
Iteration  20: 797302.342 ops/s
Iteration  21: 796158.955 ops/s
Iteration  22: 795798.964 ops/s
Iteration  23: 791428.876 ops/s
Iteration  24: 798248.305 ops/s
Iteration  25: 787987.205 ops/s
Iteration  26: 797393.102 ops/s
Iteration  27: 795326.088 ops/s
Iteration  28: 795754.915 ops/s
Iteration  29: 793474.739 ops/s
Iteration  30: 801366.895 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_newWithout":
  794374.212 ±(99.9%) 2762.169 ops/s [Average]
  (min, avg, max) = (784189.645, 794374.212, 801366.895), stdev = 4134.285
  CI (99.9%): [791612.043, 797136.381] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_newWithout  thrpt   30  794374.212 ± 2762.169  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_newWithoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_newWithoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 329938.557 ops/s
# Warmup Iteration   2: 514542.136 ops/s
# Warmup Iteration   3: 630543.986 ops/s
# Warmup Iteration   4: 627027.042 ops/s
# Warmup Iteration   5: 629533.889 ops/s
# Warmup Iteration   6: 629000.753 ops/s
# Warmup Iteration   7: 518744.179 ops/s
# Warmup Iteration   8: 629630.830 ops/s
# Warmup Iteration   9: 625496.098 ops/s
# Warmup Iteration  10: 631051.821 ops/s
# Warmup Iteration  11: 630341.664 ops/s
# Warmup Iteration  12: 628912.674 ops/s
# Warmup Iteration  13: 627019.746 ops/s
# Warmup Iteration  14: 630543.133 ops/s
# Warmup Iteration  15: 628662.187 ops/s
# Warmup Iteration  16: 628514.235 ops/s
# Warmup Iteration  17: 629541.878 ops/s
# Warmup Iteration  18: 627744.552 ops/s
# Warmup Iteration  19: 628480.137 ops/s
# Warmup Iteration  20: 628854.629 ops/s
# Warmup Iteration  21: 628039.239 ops/s
# Warmup Iteration  22: 628744.478 ops/s
# Warmup Iteration  23: 628409.201 ops/s
# Warmup Iteration  24: 628210.998 ops/s
# Warmup Iteration  25: 629646.437 ops/s
# Warmup Iteration  26: 630314.310 ops/s
# Warmup Iteration  27: 628618.202 ops/s
# Warmup Iteration  28: 629690.682 ops/s
# Warmup Iteration  29: 630323.515 ops/s
# Warmup Iteration  30: 630236.862 ops/s
Iteration   1: 630727.678 ops/s
Iteration   2: 628763.637 ops/s
Iteration   3: 626600.032 ops/s
Iteration   4: 630671.423 ops/s
Iteration   5: 631439.892 ops/s
Iteration   6: 624410.821 ops/s
Iteration   7: 630728.162 ops/s
Iteration   8: 626175.741 ops/s
Iteration   9: 628904.624 ops/s
Iteration  10: 628167.805 ops/s
Iteration  11: 631791.296 ops/s
Iteration  12: 630290.362 ops/s
Iteration  13: 631788.673 ops/s
Iteration  14: 627338.629 ops/s
Iteration  15: 630897.682 ops/s
Iteration  16: 627520.839 ops/s
Iteration  17: 627441.706 ops/s
Iteration  18: 631556.579 ops/s
Iteration  19: 629037.868 ops/s
Iteration  20: 625568.268 ops/s
Iteration  21: 625750.333 ops/s
Iteration  22: 630603.017 ops/s
Iteration  23: 626921.478 ops/s
Iteration  24: 628830.291 ops/s
Iteration  25: 630115.308 ops/s
Iteration  26: 631850.241 ops/s
Iteration  27: 625996.937 ops/s
Iteration  28: 631266.434 ops/s
Iteration  29: 630697.417 ops/s
Iteration  30: 629010.391 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_newWithoutAll":
  629028.786 ±(99.9%) 1471.397 ops/s [Average]
  (min, avg, max) = (624410.821, 629028.786, 631850.241), stdev = 2202.317
  CI (99.9%): [627557.389, 630500.182] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_newWithoutAll  thrpt   30  629028.786 ± 1471.397  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 593222.549 ops/s
# Warmup Iteration   2: 1056260.881 ops/s
# Warmup Iteration   3: 1208699.410 ops/s
# Warmup Iteration   4: 1206993.214 ops/s
# Warmup Iteration   5: 1212039.505 ops/s
# Warmup Iteration   6: 976639.379 ops/s
# Warmup Iteration   7: 1213324.115 ops/s
# Warmup Iteration   8: 1214536.509 ops/s
# Warmup Iteration   9: 1211887.225 ops/s
# Warmup Iteration  10: 1212720.958 ops/s
# Warmup Iteration  11: 1214447.624 ops/s
# Warmup Iteration  12: 1215541.535 ops/s
# Warmup Iteration  13: 1212115.409 ops/s
# Warmup Iteration  14: 1214394.163 ops/s
# Warmup Iteration  15: 1212550.053 ops/s
# Warmup Iteration  16: 1215111.061 ops/s
# Warmup Iteration  17: 1215611.514 ops/s
# Warmup Iteration  18: 1204673.286 ops/s
# Warmup Iteration  19: 1212427.179 ops/s
# Warmup Iteration  20: 1213603.698 ops/s
# Warmup Iteration  21: 1211249.595 ops/s
# Warmup Iteration  22: 1211603.201 ops/s
# Warmup Iteration  23: 1212749.136 ops/s
# Warmup Iteration  24: 1216184.841 ops/s
# Warmup Iteration  25: 1215028.849 ops/s
# Warmup Iteration  26: 1212601.679 ops/s
# Warmup Iteration  27: 1212713.236 ops/s
# Warmup Iteration  28: 1212216.716 ops/s
# Warmup Iteration  29: 1206983.087 ops/s
# Warmup Iteration  30: 1205101.450 ops/s
Iteration   1: 1211729.847 ops/s
Iteration   2: 1217207.006 ops/s
Iteration   3: 1212538.491 ops/s
Iteration   4: 1215176.041 ops/s
Iteration   5: 1211622.034 ops/s
Iteration   6: 1212573.746 ops/s
Iteration   7: 1216955.024 ops/s
Iteration   8: 1214981.666 ops/s
Iteration   9: 1210587.625 ops/s
Iteration  10: 1211203.269 ops/s
Iteration  11: 1212175.944 ops/s
Iteration  12: 1204609.842 ops/s
Iteration  13: 1213997.018 ops/s
Iteration  14: 1213333.644 ops/s
Iteration  15: 1209718.887 ops/s
Iteration  16: 1214899.020 ops/s
Iteration  17: 1215630.007 ops/s
Iteration  18: 1214233.905 ops/s
Iteration  19: 1211359.184 ops/s
Iteration  20: 1213922.290 ops/s
Iteration  21: 1214597.345 ops/s
Iteration  22: 1211827.504 ops/s
Iteration  23: 1217826.840 ops/s
Iteration  24: 1213090.619 ops/s
Iteration  25: 1214168.690 ops/s
Iteration  26: 1210040.218 ops/s
Iteration  27: 1207386.574 ops/s
Iteration  28: 1214025.798 ops/s
Iteration  29: 1215017.963 ops/s
Iteration  30: 1213800.627 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_noneSatisfy":
  1213007.889 ±(99.9%) 1873.858 ops/s [Average]
  (min, avg, max) = (1204609.842, 1213007.889, 1217826.840), stdev = 2804.703
  CI (99.9%): [1211134.030, 1214881.747] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_noneSatisfy  thrpt   30  1213007.889 ± 1873.858  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_noneSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_noneSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1114764.062 ops/s
# Warmup Iteration   2: 2134015.276 ops/s
# Warmup Iteration   3: 2375786.736 ops/s
# Warmup Iteration   4: 2392833.218 ops/s
# Warmup Iteration   5: 1929470.491 ops/s
# Warmup Iteration   6: 2388928.297 ops/s
# Warmup Iteration   7: 2385281.331 ops/s
# Warmup Iteration   8: 2386766.185 ops/s
# Warmup Iteration   9: 2383959.064 ops/s
# Warmup Iteration  10: 2393515.490 ops/s
# Warmup Iteration  11: 2391641.032 ops/s
# Warmup Iteration  12: 2390000.866 ops/s
# Warmup Iteration  13: 2386634.872 ops/s
# Warmup Iteration  14: 2387994.023 ops/s
# Warmup Iteration  15: 2387797.094 ops/s
# Warmup Iteration  16: 2368003.012 ops/s
# Warmup Iteration  17: 2393886.296 ops/s
# Warmup Iteration  18: 2384099.985 ops/s
# Warmup Iteration  19: 2384118.053 ops/s
# Warmup Iteration  20: 2390033.857 ops/s
# Warmup Iteration  21: 2392400.405 ops/s
# Warmup Iteration  22: 2391975.990 ops/s
# Warmup Iteration  23: 2374901.013 ops/s
# Warmup Iteration  24: 2393472.022 ops/s
# Warmup Iteration  25: 2392758.408 ops/s
# Warmup Iteration  26: 2390404.604 ops/s
# Warmup Iteration  27: 2391878.728 ops/s
# Warmup Iteration  28: 2388051.360 ops/s
# Warmup Iteration  29: 2392118.538 ops/s
# Warmup Iteration  30: 2382660.152 ops/s
Iteration   1: 2388033.167 ops/s
Iteration   2: 2381160.383 ops/s
Iteration   3: 2393393.141 ops/s
Iteration   4: 2388188.470 ops/s
Iteration   5: 2387551.870 ops/s
Iteration   6: 2385523.553 ops/s
Iteration   7: 2393506.525 ops/s
Iteration   8: 2384488.953 ops/s
Iteration   9: 2379107.976 ops/s
Iteration  10: 2389316.526 ops/s
Iteration  11: 2391015.856 ops/s
Iteration  12: 2387586.428 ops/s
Iteration  13: 2379154.750 ops/s
Iteration  14: 2386594.895 ops/s
Iteration  15: 2388021.019 ops/s
Iteration  16: 2384949.605 ops/s
Iteration  17: 2370142.228 ops/s
Iteration  18: 2388192.140 ops/s
Iteration  19: 2379122.996 ops/s
Iteration  20: 2390524.996 ops/s
Iteration  21: 2378283.821 ops/s
Iteration  22: 2375884.528 ops/s
Iteration  23: 2395143.609 ops/s
Iteration  24: 2390415.217 ops/s
Iteration  25: 2383972.444 ops/s
Iteration  26: 2376104.071 ops/s
Iteration  27: 2383958.378 ops/s
Iteration  28: 2389427.501 ops/s
Iteration  29: 2390843.358 ops/s
Iteration  30: 2383648.219 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_noneSatisfyWith":
  2385441.887 ±(99.9%) 3949.590 ops/s [Average]
  (min, avg, max) = (2370142.228, 2385441.887, 2395143.609), stdev = 5911.561
  CI (99.9%): [2381492.297, 2389391.477] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_noneSatisfyWith  thrpt   30  2385441.887 ± 3949.590  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_noneSatisfyWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_noneSatisfyWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1778769.043 ops/s
# Warmup Iteration   2: 2808225.549 ops/s
# Warmup Iteration   3: 3343599.085 ops/s
# Warmup Iteration   4: 3374141.911 ops/s
# Warmup Iteration   5: 3376622.912 ops/s
# Warmup Iteration   6: 3127050.816 ops/s
# Warmup Iteration   7: 3004816.688 ops/s
# Warmup Iteration   8: 3373767.072 ops/s
# Warmup Iteration   9: 3377640.713 ops/s
# Warmup Iteration  10: 3377560.941 ops/s
# Warmup Iteration  11: 3377216.201 ops/s
# Warmup Iteration  12: 3383949.174 ops/s
# Warmup Iteration  13: 3379420.650 ops/s
# Warmup Iteration  14: 3375488.361 ops/s
# Warmup Iteration  15: 3376377.195 ops/s
# Warmup Iteration  16: 3377766.496 ops/s
# Warmup Iteration  17: 3372392.956 ops/s
# Warmup Iteration  18: 3372769.625 ops/s
# Warmup Iteration  19: 3378638.948 ops/s
# Warmup Iteration  20: 3375905.798 ops/s
# Warmup Iteration  21: 3366288.026 ops/s
# Warmup Iteration  22: 3368838.852 ops/s
# Warmup Iteration  23: 3380021.507 ops/s
# Warmup Iteration  24: 3359162.124 ops/s
# Warmup Iteration  25: 3387869.960 ops/s
# Warmup Iteration  26: 3381316.496 ops/s
# Warmup Iteration  27: 3368395.801 ops/s
# Warmup Iteration  28: 3377029.266 ops/s
# Warmup Iteration  29: 3361754.596 ops/s
# Warmup Iteration  30: 3385462.622 ops/s
Iteration   1: 3365050.784 ops/s
Iteration   2: 3390395.278 ops/s
Iteration   3: 3377942.212 ops/s
Iteration   4: 3369559.625 ops/s
Iteration   5: 3386315.240 ops/s
Iteration   6: 3374914.127 ops/s
Iteration   7: 3394243.865 ops/s
Iteration   8: 3385083.056 ops/s
Iteration   9: 3389320.410 ops/s
Iteration  10: 3377942.810 ops/s
Iteration  11: 3349097.117 ops/s
Iteration  12: 3387673.186 ops/s
Iteration  13: 3361640.389 ops/s
Iteration  14: 3381261.933 ops/s
Iteration  15: 3373915.933 ops/s
Iteration  16: 3387274.312 ops/s
Iteration  17: 3373868.216 ops/s
Iteration  18: 3387871.593 ops/s
Iteration  19: 3379313.333 ops/s
Iteration  20: 3368452.610 ops/s
Iteration  21: 3367468.765 ops/s
Iteration  22: 3368307.249 ops/s
Iteration  23: 3345475.386 ops/s
Iteration  24: 3389586.547 ops/s
Iteration  25: 3370462.987 ops/s
Iteration  26: 3385109.228 ops/s
Iteration  27: 3369868.504 ops/s
Iteration  28: 3361935.485 ops/s
Iteration  29: 3355929.199 ops/s
Iteration  30: 3391204.636 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_noneSatisfyWithOccurrences":
  3375549.467 ±(99.9%) 8542.118 ops/s [Average]
  (min, avg, max) = (3345475.386, 3375549.467, 3394243.865), stdev = 12785.442
  CI (99.9%): [3367007.349, 3384091.586] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_noneSatisfyWithOccurrences  thrpt   30  3375549.467 ± 8542.118  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_notEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_notEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2227217.949 ops/s
# Warmup Iteration   2: 5197276.038 ops/s
# Warmup Iteration   3: 4578005.057 ops/s
# Warmup Iteration   4: 5065004.786 ops/s
# Warmup Iteration   5: 5303446.523 ops/s
# Warmup Iteration   6: 5308249.151 ops/s
# Warmup Iteration   7: 5313030.404 ops/s
# Warmup Iteration   8: 5309646.709 ops/s
# Warmup Iteration   9: 5305431.454 ops/s
# Warmup Iteration  10: 5295471.825 ops/s
# Warmup Iteration  11: 5284855.719 ops/s
# Warmup Iteration  12: 5294770.041 ops/s
# Warmup Iteration  13: 5304758.691 ops/s
# Warmup Iteration  14: 5294216.967 ops/s
# Warmup Iteration  15: 5293496.156 ops/s
# Warmup Iteration  16: 5303852.150 ops/s
# Warmup Iteration  17: 5269736.024 ops/s
# Warmup Iteration  18: 5307975.221 ops/s
# Warmup Iteration  19: 5316529.454 ops/s
# Warmup Iteration  20: 5300954.485 ops/s
# Warmup Iteration  21: 5304259.667 ops/s
# Warmup Iteration  22: 5313265.125 ops/s
# Warmup Iteration  23: 5308733.025 ops/s
# Warmup Iteration  24: 5308880.970 ops/s
# Warmup Iteration  25: 5310771.737 ops/s
# Warmup Iteration  26: 5309002.941 ops/s
# Warmup Iteration  27: 5305464.747 ops/s
# Warmup Iteration  28: 5282842.555 ops/s
# Warmup Iteration  29: 5299772.244 ops/s
# Warmup Iteration  30: 5300876.595 ops/s
Iteration   1: 5300507.847 ops/s
Iteration   2: 5304445.197 ops/s
Iteration   3: 5302467.978 ops/s
Iteration   4: 5314273.939 ops/s
Iteration   5: 5311382.689 ops/s
Iteration   6: 5298812.472 ops/s
Iteration   7: 5303239.180 ops/s
Iteration   8: 5298902.768 ops/s
Iteration   9: 5296085.292 ops/s
Iteration  10: 5275847.746 ops/s
Iteration  11: 5297069.104 ops/s
Iteration  12: 5322312.766 ops/s
Iteration  13: 5318183.443 ops/s
Iteration  14: 5281729.580 ops/s
Iteration  15: 5300535.087 ops/s
Iteration  16: 5306599.134 ops/s
Iteration  17: 5305050.703 ops/s
Iteration  18: 5282715.475 ops/s
Iteration  19: 5311762.254 ops/s
Iteration  20: 5311376.402 ops/s
Iteration  21: 5315821.352 ops/s
Iteration  22: 5304855.974 ops/s
Iteration  23: 5315135.919 ops/s
Iteration  24: 5304917.112 ops/s
Iteration  25: 5320036.259 ops/s
Iteration  26: 5320194.928 ops/s
Iteration  27: 5289218.787 ops/s
Iteration  28: 5294084.778 ops/s
Iteration  29: 5320995.916 ops/s
Iteration  30: 5288275.733 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_notEmpty":
  5303894.527 ±(99.9%) 8219.182 ops/s [Average]
  (min, avg, max) = (5275847.746, 5303894.527, 5322312.766), stdev = 12302.085
  CI (99.9%): [5295675.345, 5312113.709] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_notEmpty  thrpt   30  5303894.527 ± 8219.182  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_partition$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_partition

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 138766.952 ops/s
# Warmup Iteration   2: 228626.582 ops/s
# Warmup Iteration   3: 273921.834 ops/s
# Warmup Iteration   4: 276577.106 ops/s
# Warmup Iteration   5: 276176.180 ops/s
# Warmup Iteration   6: 258493.483 ops/s
# Warmup Iteration   7: 245300.389 ops/s
# Warmup Iteration   8: 276112.028 ops/s
# Warmup Iteration   9: 277027.588 ops/s
# Warmup Iteration  10: 276796.148 ops/s
# Warmup Iteration  11: 275992.218 ops/s
# Warmup Iteration  12: 277001.554 ops/s
# Warmup Iteration  13: 276976.180 ops/s
# Warmup Iteration  14: 277102.619 ops/s
# Warmup Iteration  15: 277043.032 ops/s
# Warmup Iteration  16: 276792.098 ops/s
# Warmup Iteration  17: 276294.198 ops/s
# Warmup Iteration  18: 276713.434 ops/s
# Warmup Iteration  19: 276321.430 ops/s
# Warmup Iteration  20: 277217.342 ops/s
# Warmup Iteration  21: 277431.008 ops/s
# Warmup Iteration  22: 276190.578 ops/s
# Warmup Iteration  23: 275319.746 ops/s
# Warmup Iteration  24: 276959.429 ops/s
# Warmup Iteration  25: 276200.428 ops/s
# Warmup Iteration  26: 276532.001 ops/s
# Warmup Iteration  27: 276594.179 ops/s
# Warmup Iteration  28: 277385.184 ops/s
# Warmup Iteration  29: 277198.202 ops/s
# Warmup Iteration  30: 277444.966 ops/s
Iteration   1: 276543.570 ops/s
Iteration   2: 277503.718 ops/s
Iteration   3: 277208.253 ops/s
Iteration   4: 277491.017 ops/s
Iteration   5: 276824.270 ops/s
Iteration   6: 277397.697 ops/s
Iteration   7: 277170.280 ops/s
Iteration   8: 277597.772 ops/s
Iteration   9: 275870.167 ops/s
Iteration  10: 276359.963 ops/s
Iteration  11: 277308.025 ops/s
Iteration  12: 278018.000 ops/s
Iteration  13: 275419.795 ops/s
Iteration  14: 276180.009 ops/s
Iteration  15: 276017.000 ops/s
Iteration  16: 278526.705 ops/s
Iteration  17: 277272.638 ops/s
Iteration  18: 277276.268 ops/s
Iteration  19: 277554.697 ops/s
Iteration  20: 277256.847 ops/s
Iteration  21: 278150.710 ops/s
Iteration  22: 277489.261 ops/s
Iteration  23: 276134.892 ops/s
Iteration  24: 277074.459 ops/s
Iteration  25: 276800.400 ops/s
Iteration  26: 277283.154 ops/s
Iteration  27: 276634.283 ops/s
Iteration  28: 277001.534 ops/s
Iteration  29: 276985.521 ops/s
Iteration  30: 276952.977 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_partition":
  277043.463 ±(99.9%) 458.323 ops/s [Average]
  (min, avg, max) = (275419.795, 277043.463, 278526.705), stdev = 685.996
  CI (99.9%): [276585.140, 277501.785] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score     Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_partition  thrpt   30  277043.463 ± 458.323  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_partitionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_partitionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 133794.584 ops/s
# Warmup Iteration   2: 225650.166 ops/s
# Warmup Iteration   3: 272467.937 ops/s
# Warmup Iteration   4: 275187.978 ops/s
# Warmup Iteration   5: 274050.286 ops/s
# Warmup Iteration   6: 241982.777 ops/s
# Warmup Iteration   7: 257262.695 ops/s
# Warmup Iteration   8: 275197.900 ops/s
# Warmup Iteration   9: 274501.233 ops/s
# Warmup Iteration  10: 275689.163 ops/s
# Warmup Iteration  11: 275509.306 ops/s
# Warmup Iteration  12: 275738.449 ops/s
# Warmup Iteration  13: 275145.874 ops/s
# Warmup Iteration  14: 275295.240 ops/s
# Warmup Iteration  15: 275416.405 ops/s
# Warmup Iteration  16: 275285.116 ops/s
# Warmup Iteration  17: 274584.108 ops/s
# Warmup Iteration  18: 275306.677 ops/s
# Warmup Iteration  19: 274986.831 ops/s
# Warmup Iteration  20: 275102.691 ops/s
# Warmup Iteration  21: 274868.092 ops/s
# Warmup Iteration  22: 274796.339 ops/s
# Warmup Iteration  23: 275848.506 ops/s
# Warmup Iteration  24: 274904.187 ops/s
# Warmup Iteration  25: 274988.034 ops/s
# Warmup Iteration  26: 275740.854 ops/s
# Warmup Iteration  27: 275257.059 ops/s
# Warmup Iteration  28: 274568.357 ops/s
# Warmup Iteration  29: 274941.387 ops/s
# Warmup Iteration  30: 274211.038 ops/s
Iteration   1: 275029.507 ops/s
Iteration   2: 275024.116 ops/s
Iteration   3: 275110.116 ops/s
Iteration   4: 274264.565 ops/s
Iteration   5: 274286.984 ops/s
Iteration   6: 275764.146 ops/s
Iteration   7: 274012.834 ops/s
Iteration   8: 274842.129 ops/s
Iteration   9: 275006.667 ops/s
Iteration  10: 275912.137 ops/s
Iteration  11: 274709.543 ops/s
Iteration  12: 275052.250 ops/s
Iteration  13: 273329.585 ops/s
Iteration  14: 275778.200 ops/s
Iteration  15: 275115.074 ops/s
Iteration  16: 275870.365 ops/s
Iteration  17: 274321.065 ops/s
Iteration  18: 275032.752 ops/s
Iteration  19: 273890.643 ops/s
Iteration  20: 275801.852 ops/s
Iteration  21: 274837.238 ops/s
Iteration  22: 274628.552 ops/s
Iteration  23: 275697.060 ops/s
Iteration  24: 275465.468 ops/s
Iteration  25: 275889.043 ops/s
Iteration  26: 275308.514 ops/s
Iteration  27: 275855.917 ops/s
Iteration  28: 275623.371 ops/s
Iteration  29: 275578.075 ops/s
Iteration  30: 274652.767 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_partitionWith":
  275056.351 ±(99.9%) 452.472 ops/s [Average]
  (min, avg, max) = (273329.585, 275056.351, 275912.137), stdev = 677.238
  CI (99.9%): [274603.880, 275508.823] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score     Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_partitionWith  thrpt   30  275056.351 ± 452.472  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_reduceOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_reduceOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 327740.073 ops/s
# Warmup Iteration   2: 534059.481 ops/s
# Warmup Iteration   3: 609568.343 ops/s
# Warmup Iteration   4: 613807.229 ops/s
# Warmup Iteration   5: 611450.932 ops/s
# Warmup Iteration   6: 503010.713 ops/s
# Warmup Iteration   7: 613315.537 ops/s
# Warmup Iteration   8: 612092.249 ops/s
# Warmup Iteration   9: 611835.877 ops/s
# Warmup Iteration  10: 614118.455 ops/s
# Warmup Iteration  11: 614815.203 ops/s
# Warmup Iteration  12: 614362.099 ops/s
# Warmup Iteration  13: 609925.484 ops/s
# Warmup Iteration  14: 612238.759 ops/s
# Warmup Iteration  15: 611084.463 ops/s
# Warmup Iteration  16: 611907.322 ops/s
# Warmup Iteration  17: 613421.422 ops/s
# Warmup Iteration  18: 611329.088 ops/s
# Warmup Iteration  19: 613640.220 ops/s
# Warmup Iteration  20: 612818.459 ops/s
# Warmup Iteration  21: 611706.834 ops/s
# Warmup Iteration  22: 614842.110 ops/s
# Warmup Iteration  23: 614845.564 ops/s
# Warmup Iteration  24: 614438.103 ops/s
# Warmup Iteration  25: 611958.891 ops/s
# Warmup Iteration  26: 614437.310 ops/s
# Warmup Iteration  27: 615066.336 ops/s
# Warmup Iteration  28: 613056.195 ops/s
# Warmup Iteration  29: 612838.863 ops/s
# Warmup Iteration  30: 609096.776 ops/s
Iteration   1: 611340.730 ops/s
Iteration   2: 613034.893 ops/s
Iteration   3: 615847.684 ops/s
Iteration   4: 614315.039 ops/s
Iteration   5: 612143.882 ops/s
Iteration   6: 609926.307 ops/s
Iteration   7: 612064.381 ops/s
Iteration   8: 615148.508 ops/s
Iteration   9: 613289.929 ops/s
Iteration  10: 613864.917 ops/s
Iteration  11: 610480.529 ops/s
Iteration  12: 612779.837 ops/s
Iteration  13: 612462.288 ops/s
Iteration  14: 613106.068 ops/s
Iteration  15: 614943.141 ops/s
Iteration  16: 610116.383 ops/s
Iteration  17: 612765.132 ops/s
Iteration  18: 611183.507 ops/s
Iteration  19: 606388.362 ops/s
Iteration  20: 616282.124 ops/s
Iteration  21: 613013.057 ops/s
Iteration  22: 614918.609 ops/s
Iteration  23: 614175.325 ops/s
Iteration  24: 612611.742 ops/s
Iteration  25: 611072.999 ops/s
Iteration  26: 616370.299 ops/s
Iteration  27: 608562.702 ops/s
Iteration  28: 615328.441 ops/s
Iteration  29: 612677.106 ops/s
Iteration  30: 613840.364 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_reduceOptional":
  612801.810 ±(99.9%) 1523.303 ops/s [Average]
  (min, avg, max) = (606388.362, 612801.810, 616370.299), stdev = 2280.008
  CI (99.9%): [611278.507, 614325.112] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_reduceOptional  thrpt   30  612801.810 ± 1523.303  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 240345.023 ops/s
# Warmup Iteration   2: 456033.153 ops/s
# Warmup Iteration   3: 522407.273 ops/s
# Warmup Iteration   4: 525214.684 ops/s
# Warmup Iteration   5: 517562.840 ops/s
# Warmup Iteration   6: 442051.096 ops/s
# Warmup Iteration   7: 527262.269 ops/s
# Warmup Iteration   8: 523865.963 ops/s
# Warmup Iteration   9: 527323.315 ops/s
# Warmup Iteration  10: 526211.371 ops/s
# Warmup Iteration  11: 526904.183 ops/s
# Warmup Iteration  12: 527377.109 ops/s
# Warmup Iteration  13: 525763.361 ops/s
# Warmup Iteration  14: 526078.786 ops/s
# Warmup Iteration  15: 527307.648 ops/s
# Warmup Iteration  16: 526634.668 ops/s
# Warmup Iteration  17: 525278.483 ops/s
# Warmup Iteration  18: 527378.440 ops/s
# Warmup Iteration  19: 525916.554 ops/s
# Warmup Iteration  20: 526813.099 ops/s
# Warmup Iteration  21: 524950.278 ops/s
# Warmup Iteration  22: 527766.759 ops/s
# Warmup Iteration  23: 526242.696 ops/s
# Warmup Iteration  24: 524421.303 ops/s
# Warmup Iteration  25: 525136.163 ops/s
# Warmup Iteration  26: 527328.861 ops/s
# Warmup Iteration  27: 525622.892 ops/s
# Warmup Iteration  28: 526359.342 ops/s
# Warmup Iteration  29: 526433.006 ops/s
# Warmup Iteration  30: 526741.021 ops/s
Iteration   1: 525102.213 ops/s
Iteration   2: 525895.936 ops/s
Iteration   3: 525207.067 ops/s
Iteration   4: 527148.160 ops/s
Iteration   5: 527325.438 ops/s
Iteration   6: 526275.191 ops/s
Iteration   7: 525368.539 ops/s
Iteration   8: 527668.869 ops/s
Iteration   9: 524673.969 ops/s
Iteration  10: 527350.542 ops/s
Iteration  11: 527314.568 ops/s
Iteration  12: 527010.362 ops/s
Iteration  13: 527130.607 ops/s
Iteration  14: 527537.066 ops/s
Iteration  15: 525678.524 ops/s
Iteration  16: 526732.300 ops/s
Iteration  17: 527477.305 ops/s
Iteration  18: 528670.374 ops/s
Iteration  19: 525146.455 ops/s
Iteration  20: 525690.111 ops/s
Iteration  21: 525841.683 ops/s
Iteration  22: 527127.270 ops/s
Iteration  23: 526892.817 ops/s
Iteration  24: 525788.630 ops/s
Iteration  25: 526914.547 ops/s
Iteration  26: 528130.928 ops/s
Iteration  27: 525575.395 ops/s
Iteration  28: 527849.657 ops/s
Iteration  29: 527642.213 ops/s
Iteration  30: 526210.564 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_reject":
  526612.577 ±(99.9%) 692.213 ops/s [Average]
  (min, avg, max) = (524673.969, 526612.577, 528670.374), stdev = 1036.072
  CI (99.9%): [525920.364, 527304.790] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score     Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_reject  thrpt   30  526612.577 ± 692.213  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_rejectToTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_rejectToTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 803351.641 ops/s
# Warmup Iteration   2: 1299750.545 ops/s
# Warmup Iteration   3: 1550341.906 ops/s
# Warmup Iteration   4: 1564584.659 ops/s
# Warmup Iteration   5: 1565316.570 ops/s
# Warmup Iteration   6: 1344077.207 ops/s
# Warmup Iteration   7: 1498780.708 ops/s
# Warmup Iteration   8: 1557250.314 ops/s
# Warmup Iteration   9: 1565166.103 ops/s
# Warmup Iteration  10: 1564432.312 ops/s
# Warmup Iteration  11: 1569713.482 ops/s
# Warmup Iteration  12: 1569057.894 ops/s
# Warmup Iteration  13: 1565710.191 ops/s
# Warmup Iteration  14: 1564797.612 ops/s
# Warmup Iteration  15: 1566688.553 ops/s
# Warmup Iteration  16: 1567618.847 ops/s
# Warmup Iteration  17: 1563840.948 ops/s
# Warmup Iteration  18: 1563891.622 ops/s
# Warmup Iteration  19: 1567270.562 ops/s
# Warmup Iteration  20: 1558714.472 ops/s
# Warmup Iteration  21: 1562871.720 ops/s
# Warmup Iteration  22: 1565278.543 ops/s
# Warmup Iteration  23: 1567706.395 ops/s
# Warmup Iteration  24: 1564133.405 ops/s
# Warmup Iteration  25: 1570508.916 ops/s
# Warmup Iteration  26: 1567960.393 ops/s
# Warmup Iteration  27: 1565612.382 ops/s
# Warmup Iteration  28: 1566259.746 ops/s
# Warmup Iteration  29: 1565521.360 ops/s
# Warmup Iteration  30: 1565588.901 ops/s
Iteration   1: 1566840.204 ops/s
Iteration   2: 1567836.418 ops/s
Iteration   3: 1556067.792 ops/s
Iteration   4: 1570748.722 ops/s
Iteration   5: 1559071.551 ops/s
Iteration   6: 1569425.136 ops/s
Iteration   7: 1563990.840 ops/s
Iteration   8: 1567556.136 ops/s
Iteration   9: 1562499.141 ops/s
Iteration  10: 1565245.622 ops/s
Iteration  11: 1554524.754 ops/s
Iteration  12: 1561775.786 ops/s
Iteration  13: 1559446.366 ops/s
Iteration  14: 1557485.855 ops/s
Iteration  15: 1556167.686 ops/s
Iteration  16: 1568203.299 ops/s
Iteration  17: 1569169.366 ops/s
Iteration  18: 1567147.359 ops/s
Iteration  19: 1564174.717 ops/s
Iteration  20: 1560889.418 ops/s
Iteration  21: 1561901.989 ops/s
Iteration  22: 1568231.592 ops/s
Iteration  23: 1567749.762 ops/s
Iteration  24: 1564711.319 ops/s
Iteration  25: 1570708.100 ops/s
Iteration  26: 1564481.957 ops/s
Iteration  27: 1559416.425 ops/s
Iteration  28: 1566746.700 ops/s
Iteration  29: 1571043.214 ops/s
Iteration  30: 1565260.719 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_rejectToTarget":
  1564283.931 ±(99.9%) 3148.681 ops/s [Average]
  (min, avg, max) = (1554524.754, 1564283.931, 1571043.214), stdev = 4712.798
  CI (99.9%): [1561135.251, 1567432.612] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_rejectToTarget  thrpt   30  1564283.931 ± 3148.681  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_rejectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_rejectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 325651.688 ops/s
# Warmup Iteration   2: 601830.053 ops/s
# Warmup Iteration   3: 674236.888 ops/s
# Warmup Iteration   4: 677852.774 ops/s
# Warmup Iteration   5: 648599.600 ops/s
# Warmup Iteration   6: 587166.873 ops/s
# Warmup Iteration   7: 679929.991 ops/s
# Warmup Iteration   8: 677902.076 ops/s
# Warmup Iteration   9: 680274.041 ops/s
# Warmup Iteration  10: 678206.985 ops/s
# Warmup Iteration  11: 678153.892 ops/s
# Warmup Iteration  12: 678452.994 ops/s
# Warmup Iteration  13: 678403.245 ops/s
# Warmup Iteration  14: 677957.404 ops/s
# Warmup Iteration  15: 677079.785 ops/s
# Warmup Iteration  16: 676242.303 ops/s
# Warmup Iteration  17: 677346.982 ops/s
# Warmup Iteration  18: 677700.564 ops/s
# Warmup Iteration  19: 677524.007 ops/s
# Warmup Iteration  20: 677172.738 ops/s
# Warmup Iteration  21: 676378.857 ops/s
# Warmup Iteration  22: 677098.017 ops/s
# Warmup Iteration  23: 678445.180 ops/s
# Warmup Iteration  24: 675649.550 ops/s
# Warmup Iteration  25: 676496.708 ops/s
# Warmup Iteration  26: 679541.254 ops/s
# Warmup Iteration  27: 678994.564 ops/s
# Warmup Iteration  28: 679822.535 ops/s
# Warmup Iteration  29: 677114.733 ops/s
# Warmup Iteration  30: 678761.975 ops/s
Iteration   1: 680401.106 ops/s
Iteration   2: 677828.141 ops/s
Iteration   3: 678720.377 ops/s
Iteration   4: 678361.143 ops/s
Iteration   5: 677935.041 ops/s
Iteration   6: 678585.267 ops/s
Iteration   7: 677656.987 ops/s
Iteration   8: 679671.251 ops/s
Iteration   9: 673462.165 ops/s
Iteration  10: 675670.929 ops/s
Iteration  11: 677298.234 ops/s
Iteration  12: 673237.736 ops/s
Iteration  13: 680329.999 ops/s
Iteration  14: 677196.928 ops/s
Iteration  15: 675830.709 ops/s
Iteration  16: 677275.125 ops/s
Iteration  17: 678667.696 ops/s
Iteration  18: 679045.395 ops/s
Iteration  19: 680331.629 ops/s
Iteration  20: 675008.340 ops/s
Iteration  21: 677138.251 ops/s
Iteration  22: 675986.243 ops/s
Iteration  23: 677893.269 ops/s
Iteration  24: 679209.727 ops/s
Iteration  25: 678111.145 ops/s
Iteration  26: 675927.580 ops/s
Iteration  27: 679428.599 ops/s
Iteration  28: 678663.335 ops/s
Iteration  29: 679289.222 ops/s
Iteration  30: 676199.890 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_rejectWith":
  677678.715 ±(99.9%) 1246.761 ops/s [Average]
  (min, avg, max) = (673237.736, 677678.715, 680401.106), stdev = 1866.093
  CI (99.9%): [676431.955, 678925.476] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_rejectWith  thrpt   30  677678.715 ± 1246.761  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_rejectWithToTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_rejectWithToTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 753552.160 ops/s
# Warmup Iteration   2: 1261150.918 ops/s
# Warmup Iteration   3: 1500398.954 ops/s
# Warmup Iteration   4: 1512108.812 ops/s
# Warmup Iteration   5: 1517666.484 ops/s
# Warmup Iteration   6: 1229760.059 ops/s
# Warmup Iteration   7: 1517798.388 ops/s
# Warmup Iteration   8: 1519507.222 ops/s
# Warmup Iteration   9: 1519008.386 ops/s
# Warmup Iteration  10: 1512163.264 ops/s
# Warmup Iteration  11: 1516958.233 ops/s
# Warmup Iteration  12: 1518568.389 ops/s
# Warmup Iteration  13: 1519403.255 ops/s
# Warmup Iteration  14: 1520433.029 ops/s
# Warmup Iteration  15: 1519972.132 ops/s
# Warmup Iteration  16: 1519098.542 ops/s
# Warmup Iteration  17: 1517757.727 ops/s
# Warmup Iteration  18: 1516431.648 ops/s
# Warmup Iteration  19: 1516297.541 ops/s
# Warmup Iteration  20: 1518227.076 ops/s
# Warmup Iteration  21: 1516152.788 ops/s
# Warmup Iteration  22: 1515873.467 ops/s
# Warmup Iteration  23: 1518349.811 ops/s
# Warmup Iteration  24: 1514736.981 ops/s
# Warmup Iteration  25: 1512578.851 ops/s
# Warmup Iteration  26: 1516527.128 ops/s
# Warmup Iteration  27: 1518844.851 ops/s
# Warmup Iteration  28: 1520033.203 ops/s
# Warmup Iteration  29: 1519055.432 ops/s
# Warmup Iteration  30: 1510034.204 ops/s
Iteration   1: 1519858.168 ops/s
Iteration   2: 1519530.447 ops/s
Iteration   3: 1518103.476 ops/s
Iteration   4: 1502965.801 ops/s
Iteration   5: 1513062.690 ops/s
Iteration   6: 1519004.370 ops/s
Iteration   7: 1520110.357 ops/s
Iteration   8: 1519179.692 ops/s
Iteration   9: 1515902.984 ops/s
Iteration  10: 1523644.348 ops/s
Iteration  11: 1512888.041 ops/s
Iteration  12: 1518994.896 ops/s
Iteration  13: 1513071.586 ops/s
Iteration  14: 1518429.790 ops/s
Iteration  15: 1520117.042 ops/s
Iteration  16: 1516899.662 ops/s
Iteration  17: 1521442.029 ops/s
Iteration  18: 1520622.083 ops/s
Iteration  19: 1519733.507 ops/s
Iteration  20: 1522303.983 ops/s
Iteration  21: 1522329.007 ops/s
Iteration  22: 1514855.118 ops/s
Iteration  23: 1523178.465 ops/s
Iteration  24: 1521594.821 ops/s
Iteration  25: 1522722.853 ops/s
Iteration  26: 1513846.566 ops/s
Iteration  27: 1524525.252 ops/s
Iteration  28: 1519381.590 ops/s
Iteration  29: 1519184.232 ops/s
Iteration  30: 1518709.619 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_rejectWithToTarget":
  1518539.749 ±(99.9%) 2889.529 ops/s [Average]
  (min, avg, max) = (1502965.801, 1518539.749, 1524525.252), stdev = 4324.911
  CI (99.9%): [1515650.220, 1521429.278] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_rejectWithToTarget  thrpt   30  1518539.749 ± 2889.529  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_rejectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_rejectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 612614.749 ops/s
# Warmup Iteration   2: 1383712.198 ops/s
# Warmup Iteration   3: 1449515.879 ops/s
# Warmup Iteration   4: 1321097.882 ops/s
# Warmup Iteration   5: 1314735.942 ops/s
# Warmup Iteration   6: 1451694.989 ops/s
# Warmup Iteration   7: 1447376.676 ops/s
# Warmup Iteration   8: 1449263.694 ops/s
# Warmup Iteration   9: 1443875.193 ops/s
# Warmup Iteration  10: 1449245.407 ops/s
# Warmup Iteration  11: 1448313.327 ops/s
# Warmup Iteration  12: 1447129.804 ops/s
# Warmup Iteration  13: 1442715.072 ops/s
# Warmup Iteration  14: 1448734.553 ops/s
# Warmup Iteration  15: 1442906.963 ops/s
# Warmup Iteration  16: 1448344.665 ops/s
# Warmup Iteration  17: 1448188.653 ops/s
# Warmup Iteration  18: 1451957.688 ops/s
# Warmup Iteration  19: 1454520.796 ops/s
# Warmup Iteration  20: 1452204.804 ops/s
# Warmup Iteration  21: 1453333.966 ops/s
# Warmup Iteration  22: 1454544.056 ops/s
# Warmup Iteration  23: 1452251.969 ops/s
# Warmup Iteration  24: 1452287.392 ops/s
# Warmup Iteration  25: 1452743.127 ops/s
# Warmup Iteration  26: 1453693.792 ops/s
# Warmup Iteration  27: 1451048.259 ops/s
# Warmup Iteration  28: 1453542.531 ops/s
# Warmup Iteration  29: 1451596.632 ops/s
# Warmup Iteration  30: 1452923.806 ops/s
Iteration   1: 1453387.439 ops/s
Iteration   2: 1443441.634 ops/s
Iteration   3: 1452375.826 ops/s
Iteration   4: 1450835.272 ops/s
Iteration   5: 1455188.670 ops/s
Iteration   6: 1452690.517 ops/s
Iteration   7: 1449547.181 ops/s
Iteration   8: 1446755.921 ops/s
Iteration   9: 1454765.143 ops/s
Iteration  10: 1454962.850 ops/s
Iteration  11: 1453195.121 ops/s
Iteration  12: 1456302.972 ops/s
Iteration  13: 1455394.486 ops/s
Iteration  14: 1450712.676 ops/s
Iteration  15: 1444566.578 ops/s
Iteration  16: 1447037.714 ops/s
Iteration  17: 1454189.063 ops/s
Iteration  18: 1451719.715 ops/s
Iteration  19: 1450980.342 ops/s
Iteration  20: 1452704.686 ops/s
Iteration  21: 1454163.526 ops/s
Iteration  22: 1450673.427 ops/s
Iteration  23: 1446069.498 ops/s
Iteration  24: 1447996.383 ops/s
Iteration  25: 1451216.257 ops/s
Iteration  26: 1429275.421 ops/s
Iteration  27: 1454227.908 ops/s
Iteration  28: 1451110.832 ops/s
Iteration  29: 1449067.602 ops/s
Iteration  30: 1449380.967 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_rejectWith_target":
  1450464.521 ±(99.9%) 3468.971 ops/s [Average]
  (min, avg, max) = (1429275.421, 1450464.521, 1456302.972), stdev = 5192.194
  CI (99.9%): [1446995.549, 1453933.492] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_rejectWith_target  thrpt   30  1450464.521 ± 3468.971  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 500252.148 ops/s
# Warmup Iteration   2: 550269.355 ops/s
# Warmup Iteration   3: 731385.759 ops/s
# Warmup Iteration   4: 732862.774 ops/s
# Warmup Iteration   5: 730233.292 ops/s
# Warmup Iteration   6: 732528.125 ops/s
# Warmup Iteration   7: 733599.769 ops/s
# Warmup Iteration   8: 733088.620 ops/s
# Warmup Iteration   9: 732217.090 ops/s
# Warmup Iteration  10: 689593.933 ops/s
# Warmup Iteration  11: 636794.832 ops/s
# Warmup Iteration  12: 732751.369 ops/s
# Warmup Iteration  13: 728866.344 ops/s
# Warmup Iteration  14: 732672.404 ops/s
# Warmup Iteration  15: 733994.581 ops/s
# Warmup Iteration  16: 734337.593 ops/s
# Warmup Iteration  17: 766760.908 ops/s
# Warmup Iteration  18: 766063.581 ops/s
# Warmup Iteration  19: 767306.446 ops/s
# Warmup Iteration  20: 767674.281 ops/s
# Warmup Iteration  21: 767697.985 ops/s
# Warmup Iteration  22: 767311.634 ops/s
# Warmup Iteration  23: 764432.248 ops/s
# Warmup Iteration  24: 767428.692 ops/s
# Warmup Iteration  25: 762810.706 ops/s
# Warmup Iteration  26: 766483.939 ops/s
# Warmup Iteration  27: 765926.457 ops/s
# Warmup Iteration  28: 768226.152 ops/s
# Warmup Iteration  29: 767598.356 ops/s
# Warmup Iteration  30: 765509.922 ops/s
Iteration   1: 768296.118 ops/s
Iteration   2: 764102.052 ops/s
Iteration   3: 764973.238 ops/s
Iteration   4: 768735.745 ops/s
Iteration   5: 765485.833 ops/s
Iteration   6: 767788.435 ops/s
Iteration   7: 770189.413 ops/s
Iteration   8: 767359.915 ops/s
Iteration   9: 764064.895 ops/s
Iteration  10: 769019.514 ops/s
Iteration  11: 768401.873 ops/s
Iteration  12: 770704.396 ops/s
Iteration  13: 767347.045 ops/s
Iteration  14: 768621.384 ops/s
Iteration  15: 766798.349 ops/s
Iteration  16: 767519.625 ops/s
Iteration  17: 768390.965 ops/s
Iteration  18: 765559.988 ops/s
Iteration  19: 766765.435 ops/s
Iteration  20: 764876.742 ops/s
Iteration  21: 765455.974 ops/s
Iteration  22: 767845.947 ops/s
Iteration  23: 758990.149 ops/s
Iteration  24: 765205.341 ops/s
Iteration  25: 764502.410 ops/s
Iteration  26: 762264.304 ops/s
Iteration  27: 764073.569 ops/s
Iteration  28: 767532.149 ops/s
Iteration  29: 764678.356 ops/s
Iteration  30: 765604.994 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_remove":
  766371.805 ±(99.9%) 1636.135 ops/s [Average]
  (min, avg, max) = (758990.149, 766371.805, 770704.396), stdev = 2448.891
  CI (99.9%): [764735.670, 768007.940] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_remove  thrpt   30  766371.805 ± 1636.135  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 478154.337 ops/s
# Warmup Iteration   2: 547021.667 ops/s
# Warmup Iteration   3: 724414.834 ops/s
# Warmup Iteration   4: 724259.530 ops/s
# Warmup Iteration   5: 717291.171 ops/s
# Warmup Iteration   6: 723678.027 ops/s
# Warmup Iteration   7: 723501.432 ops/s
# Warmup Iteration   8: 724704.470 ops/s
# Warmup Iteration   9: 724914.283 ops/s
# Warmup Iteration  10: 614517.463 ops/s
# Warmup Iteration  11: 712742.006 ops/s
# Warmup Iteration  12: 724069.124 ops/s
# Warmup Iteration  13: 724740.636 ops/s
# Warmup Iteration  14: 724436.696 ops/s
# Warmup Iteration  15: 727112.846 ops/s
# Warmup Iteration  16: 726276.876 ops/s
# Warmup Iteration  17: 754552.915 ops/s
# Warmup Iteration  18: 756588.072 ops/s
# Warmup Iteration  19: 755915.456 ops/s
# Warmup Iteration  20: 752302.408 ops/s
# Warmup Iteration  21: 755386.382 ops/s
# Warmup Iteration  22: 754147.883 ops/s
# Warmup Iteration  23: 756420.907 ops/s
# Warmup Iteration  24: 755637.800 ops/s
# Warmup Iteration  25: 753320.691 ops/s
# Warmup Iteration  26: 754385.741 ops/s
# Warmup Iteration  27: 752756.071 ops/s
# Warmup Iteration  28: 756753.902 ops/s
# Warmup Iteration  29: 753630.852 ops/s
# Warmup Iteration  30: 750402.193 ops/s
Iteration   1: 757794.261 ops/s
Iteration   2: 757891.494 ops/s
Iteration   3: 756423.979 ops/s
Iteration   4: 752506.185 ops/s
Iteration   5: 749744.593 ops/s
Iteration   6: 756131.848 ops/s
Iteration   7: 756378.460 ops/s
Iteration   8: 748757.513 ops/s
Iteration   9: 754408.271 ops/s
Iteration  10: 754064.899 ops/s
Iteration  11: 751775.656 ops/s
Iteration  12: 753313.441 ops/s
Iteration  13: 756100.278 ops/s
Iteration  14: 755373.490 ops/s
Iteration  15: 752988.861 ops/s
Iteration  16: 745807.834 ops/s
Iteration  17: 752675.291 ops/s
Iteration  18: 757974.574 ops/s
Iteration  19: 751412.631 ops/s
Iteration  20: 752332.511 ops/s
Iteration  21: 758124.785 ops/s
Iteration  22: 756808.066 ops/s
Iteration  23: 755428.920 ops/s
Iteration  24: 756096.870 ops/s
Iteration  25: 752870.573 ops/s
Iteration  26: 755188.163 ops/s
Iteration  27: 754131.060 ops/s
Iteration  28: 749519.311 ops/s
Iteration  29: 756859.984 ops/s
Iteration  30: 756071.137 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_removeAll":
  754165.165 ±(99.9%) 2024.433 ops/s [Average]
  (min, avg, max) = (745807.834, 754165.165, 758124.785), stdev = 3030.077
  CI (99.9%): [752140.731, 756189.598] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_removeAll  thrpt   30  754165.165 ± 2024.433  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 484647.739 ops/s
# Warmup Iteration   2: 554465.771 ops/s
# Warmup Iteration   3: 727528.065 ops/s
# Warmup Iteration   4: 728508.856 ops/s
# Warmup Iteration   5: 729256.996 ops/s
# Warmup Iteration   6: 729698.979 ops/s
# Warmup Iteration   7: 729777.707 ops/s
# Warmup Iteration   8: 731881.111 ops/s
# Warmup Iteration   9: 733372.202 ops/s
# Warmup Iteration  10: 610964.554 ops/s
# Warmup Iteration  11: 733333.795 ops/s
# Warmup Iteration  12: 734601.251 ops/s
# Warmup Iteration  13: 733885.523 ops/s
# Warmup Iteration  14: 734573.229 ops/s
# Warmup Iteration  15: 734198.870 ops/s
# Warmup Iteration  16: 734955.609 ops/s
# Warmup Iteration  17: 765811.701 ops/s
# Warmup Iteration  18: 761994.871 ops/s
# Warmup Iteration  19: 764090.339 ops/s
# Warmup Iteration  20: 762953.704 ops/s
# Warmup Iteration  21: 763245.817 ops/s
# Warmup Iteration  22: 763363.839 ops/s
# Warmup Iteration  23: 765106.034 ops/s
# Warmup Iteration  24: 762873.612 ops/s
# Warmup Iteration  25: 764339.075 ops/s
# Warmup Iteration  26: 763168.086 ops/s
# Warmup Iteration  27: 766797.494 ops/s
# Warmup Iteration  28: 761820.834 ops/s
# Warmup Iteration  29: 765425.549 ops/s
# Warmup Iteration  30: 764649.243 ops/s
Iteration   1: 765539.845 ops/s
Iteration   2: 765556.867 ops/s
Iteration   3: 763828.150 ops/s
Iteration   4: 767951.812 ops/s
Iteration   5: 758015.596 ops/s
Iteration   6: 763795.988 ops/s
Iteration   7: 763176.425 ops/s
Iteration   8: 762683.164 ops/s
Iteration   9: 764604.880 ops/s
Iteration  10: 761814.541 ops/s
Iteration  11: 765928.691 ops/s
Iteration  12: 766935.133 ops/s
Iteration  13: 762137.404 ops/s
Iteration  14: 766513.853 ops/s
Iteration  15: 767656.190 ops/s
Iteration  16: 763573.974 ops/s
Iteration  17: 762689.830 ops/s
Iteration  18: 765661.431 ops/s
Iteration  19: 765144.970 ops/s
Iteration  20: 765004.752 ops/s
Iteration  21: 763807.526 ops/s
Iteration  22: 764089.197 ops/s
Iteration  23: 764398.027 ops/s
Iteration  24: 764278.620 ops/s
Iteration  25: 761565.219 ops/s
Iteration  26: 765599.221 ops/s
Iteration  27: 767941.623 ops/s
Iteration  28: 766711.105 ops/s
Iteration  29: 764276.916 ops/s
Iteration  30: 767655.771 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_retainAll":
  764617.891 ±(99.9%) 1467.761 ops/s [Average]
  (min, avg, max) = (758015.596, 764617.891, 767951.812), stdev = 2196.875
  CI (99.9%): [763150.130, 766085.651] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_retainAll  thrpt   30  764617.891 ± 1467.761  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 149087.554 ops/s
# Warmup Iteration   2: 272207.235 ops/s
# Warmup Iteration   3: 318674.202 ops/s
# Warmup Iteration   4: 320190.919 ops/s
# Warmup Iteration   5: 322110.066 ops/s
# Warmup Iteration   6: 263732.975 ops/s
# Warmup Iteration   7: 320931.737 ops/s
# Warmup Iteration   8: 321651.066 ops/s
# Warmup Iteration   9: 321640.407 ops/s
# Warmup Iteration  10: 322213.490 ops/s
# Warmup Iteration  11: 321119.142 ops/s
# Warmup Iteration  12: 322711.588 ops/s
# Warmup Iteration  13: 322619.551 ops/s
# Warmup Iteration  14: 321484.842 ops/s
# Warmup Iteration  15: 322037.951 ops/s
# Warmup Iteration  16: 321702.352 ops/s
# Warmup Iteration  17: 320182.115 ops/s
# Warmup Iteration  18: 320644.881 ops/s
# Warmup Iteration  19: 321292.717 ops/s
# Warmup Iteration  20: 321769.445 ops/s
# Warmup Iteration  21: 320623.219 ops/s
# Warmup Iteration  22: 321648.555 ops/s
# Warmup Iteration  23: 321521.434 ops/s
# Warmup Iteration  24: 320517.991 ops/s
# Warmup Iteration  25: 321583.916 ops/s
# Warmup Iteration  26: 322223.085 ops/s
# Warmup Iteration  27: 321242.858 ops/s
# Warmup Iteration  28: 319876.767 ops/s
# Warmup Iteration  29: 320998.689 ops/s
# Warmup Iteration  30: 320544.918 ops/s
Iteration   1: 320489.842 ops/s
Iteration   2: 322417.596 ops/s
Iteration   3: 320822.984 ops/s
Iteration   4: 321647.512 ops/s
Iteration   5: 321633.429 ops/s
Iteration   6: 321519.407 ops/s
Iteration   7: 321104.354 ops/s
Iteration   8: 322141.733 ops/s
Iteration   9: 319688.672 ops/s
Iteration  10: 320670.977 ops/s
Iteration  11: 321715.083 ops/s
Iteration  12: 321549.164 ops/s
Iteration  13: 320881.938 ops/s
Iteration  14: 322780.443 ops/s
Iteration  15: 321353.377 ops/s
Iteration  16: 319920.038 ops/s
Iteration  17: 321012.589 ops/s
Iteration  18: 321864.704 ops/s
Iteration  19: 322314.710 ops/s
Iteration  20: 322151.481 ops/s
Iteration  21: 321785.390 ops/s
Iteration  22: 321003.021 ops/s
Iteration  23: 322067.342 ops/s
Iteration  24: 321529.769 ops/s
Iteration  25: 322350.702 ops/s
Iteration  26: 322038.843 ops/s
Iteration  27: 322142.982 ops/s
Iteration  28: 321497.972 ops/s
Iteration  29: 322192.245 ops/s
Iteration  30: 322345.406 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_select":
  321554.457 ±(99.9%) 498.237 ops/s [Average]
  (min, avg, max) = (319688.672, 321554.457, 322780.443), stdev = 745.737
  CI (99.9%): [321056.220, 322052.694] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score     Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_select  thrpt   30  321554.457 ± 498.237  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_selectByOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_selectByOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 780272.802 ops/s
# Warmup Iteration   2: 1365842.811 ops/s
# Warmup Iteration   3: 1617471.258 ops/s
# Warmup Iteration   4: 1636548.243 ops/s
# Warmup Iteration   5: 1629678.466 ops/s
# Warmup Iteration   6: 1324904.423 ops/s
# Warmup Iteration   7: 1633843.101 ops/s
# Warmup Iteration   8: 1639307.418 ops/s
# Warmup Iteration   9: 1632081.894 ops/s
# Warmup Iteration  10: 1631001.719 ops/s
# Warmup Iteration  11: 1637741.170 ops/s
# Warmup Iteration  12: 1636790.919 ops/s
# Warmup Iteration  13: 1616549.560 ops/s
# Warmup Iteration  14: 1636388.574 ops/s
# Warmup Iteration  15: 1627614.411 ops/s
# Warmup Iteration  16: 1635946.859 ops/s
# Warmup Iteration  17: 1633089.052 ops/s
# Warmup Iteration  18: 1637185.055 ops/s
# Warmup Iteration  19: 1639463.667 ops/s
# Warmup Iteration  20: 1640087.400 ops/s
# Warmup Iteration  21: 1629616.580 ops/s
# Warmup Iteration  22: 1636881.507 ops/s
# Warmup Iteration  23: 1633675.251 ops/s
# Warmup Iteration  24: 1636212.968 ops/s
# Warmup Iteration  25: 1638917.158 ops/s
# Warmup Iteration  26: 1635313.996 ops/s
# Warmup Iteration  27: 1635858.901 ops/s
# Warmup Iteration  28: 1638724.063 ops/s
# Warmup Iteration  29: 1634672.798 ops/s
# Warmup Iteration  30: 1633329.763 ops/s
Iteration   1: 1637332.499 ops/s
Iteration   2: 1641222.192 ops/s
Iteration   3: 1633967.603 ops/s
Iteration   4: 1634962.062 ops/s
Iteration   5: 1631877.329 ops/s
Iteration   6: 1636629.750 ops/s
Iteration   7: 1641783.357 ops/s
Iteration   8: 1634354.978 ops/s
Iteration   9: 1636916.239 ops/s
Iteration  10: 1635266.079 ops/s
Iteration  11: 1637295.302 ops/s
Iteration  12: 1636970.285 ops/s
Iteration  13: 1633040.363 ops/s
Iteration  14: 1631302.638 ops/s
Iteration  15: 1637068.573 ops/s
Iteration  16: 1641094.921 ops/s
Iteration  17: 1635316.046 ops/s
Iteration  18: 1637720.289 ops/s
Iteration  19: 1629040.794 ops/s
Iteration  20: 1638575.664 ops/s
Iteration  21: 1633331.561 ops/s
Iteration  22: 1638051.668 ops/s
Iteration  23: 1633766.700 ops/s
Iteration  24: 1629124.877 ops/s
Iteration  25: 1633950.936 ops/s
Iteration  26: 1635446.708 ops/s
Iteration  27: 1634015.528 ops/s
Iteration  28: 1621038.967 ops/s
Iteration  29: 1632388.146 ops/s
Iteration  30: 1635959.385 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_selectByOccurrences":
  1634960.381 ±(99.9%) 2731.408 ops/s [Average]
  (min, avg, max) = (1621038.967, 1634960.381, 1641783.357), stdev = 4088.243
  CI (99.9%): [1632228.973, 1637691.789] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_selectByOccurrences  thrpt   30  1634960.381 ± 2731.408  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_selectDuplicates$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_selectDuplicates

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 494989.067 ops/s
# Warmup Iteration   2: 992800.430 ops/s
# Warmup Iteration   3: 1070457.035 ops/s
# Warmup Iteration   4: 1079681.743 ops/s
# Warmup Iteration   5: 887304.868 ops/s
# Warmup Iteration   6: 1082043.376 ops/s
# Warmup Iteration   7: 1080200.604 ops/s
# Warmup Iteration   8: 1079798.291 ops/s
# Warmup Iteration   9: 1082573.333 ops/s
# Warmup Iteration  10: 1080219.238 ops/s
# Warmup Iteration  11: 1081281.967 ops/s
# Warmup Iteration  12: 1079405.349 ops/s
# Warmup Iteration  13: 1077071.662 ops/s
# Warmup Iteration  14: 1081499.985 ops/s
# Warmup Iteration  15: 1076651.000 ops/s
# Warmup Iteration  16: 1080120.636 ops/s
# Warmup Iteration  17: 1082363.431 ops/s
# Warmup Iteration  18: 1079825.172 ops/s
# Warmup Iteration  19: 1083964.352 ops/s
# Warmup Iteration  20: 1079914.053 ops/s
# Warmup Iteration  21: 1079826.341 ops/s
# Warmup Iteration  22: 1079858.580 ops/s
# Warmup Iteration  23: 1077045.748 ops/s
# Warmup Iteration  24: 1077226.057 ops/s
# Warmup Iteration  25: 1081959.992 ops/s
# Warmup Iteration  26: 1083536.015 ops/s
# Warmup Iteration  27: 1083228.163 ops/s
# Warmup Iteration  28: 1081736.227 ops/s
# Warmup Iteration  29: 1081582.476 ops/s
# Warmup Iteration  30: 1081471.555 ops/s
Iteration   1: 1083969.547 ops/s
Iteration   2: 1084182.466 ops/s
Iteration   3: 1078718.445 ops/s
Iteration   4: 1079876.081 ops/s
Iteration   5: 1083435.219 ops/s
Iteration   6: 1078989.760 ops/s
Iteration   7: 1083057.557 ops/s
Iteration   8: 1084754.335 ops/s
Iteration   9: 1080228.055 ops/s
Iteration  10: 1079503.522 ops/s
Iteration  11: 1084028.632 ops/s
Iteration  12: 1084411.621 ops/s
Iteration  13: 1082573.024 ops/s
Iteration  14: 1084215.902 ops/s
Iteration  15: 1085837.357 ops/s
Iteration  16: 1083248.694 ops/s
Iteration  17: 1084571.500 ops/s
Iteration  18: 1081999.228 ops/s
Iteration  19: 1077210.744 ops/s
Iteration  20: 1084252.736 ops/s
Iteration  21: 1083824.427 ops/s
Iteration  22: 1084399.368 ops/s
Iteration  23: 1079068.294 ops/s
Iteration  24: 1084204.785 ops/s
Iteration  25: 1082651.370 ops/s
Iteration  26: 1078755.513 ops/s
Iteration  27: 1078560.428 ops/s
Iteration  28: 1083009.217 ops/s
Iteration  29: 1085313.920 ops/s
Iteration  30: 1084138.816 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_selectDuplicates":
  1082433.019 ±(99.9%) 1643.444 ops/s [Average]
  (min, avg, max) = (1077210.744, 1082433.019, 1085837.357), stdev = 2459.830
  CI (99.9%): [1080789.575, 1084076.463] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_selectDuplicates  thrpt   30  1082433.019 ± 1643.444  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_selectInstancesOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_selectInstancesOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 160383.285 ops/s
# Warmup Iteration   2: 286999.457 ops/s
# Warmup Iteration   3: 331342.699 ops/s
# Warmup Iteration   4: 334092.290 ops/s
# Warmup Iteration   5: 334366.364 ops/s
# Warmup Iteration   6: 273427.114 ops/s
# Warmup Iteration   7: 333935.634 ops/s
# Warmup Iteration   8: 333533.435 ops/s
# Warmup Iteration   9: 334147.926 ops/s
# Warmup Iteration  10: 333393.719 ops/s
# Warmup Iteration  11: 334321.449 ops/s
# Warmup Iteration  12: 334170.942 ops/s
# Warmup Iteration  13: 334169.666 ops/s
# Warmup Iteration  14: 333734.435 ops/s
# Warmup Iteration  15: 334426.137 ops/s
# Warmup Iteration  16: 334947.490 ops/s
# Warmup Iteration  17: 334040.035 ops/s
# Warmup Iteration  18: 334249.530 ops/s
# Warmup Iteration  19: 333879.136 ops/s
# Warmup Iteration  20: 333597.964 ops/s
# Warmup Iteration  21: 334384.872 ops/s
# Warmup Iteration  22: 334255.873 ops/s
# Warmup Iteration  23: 333516.428 ops/s
# Warmup Iteration  24: 334367.861 ops/s
# Warmup Iteration  25: 334430.973 ops/s
# Warmup Iteration  26: 331770.704 ops/s
# Warmup Iteration  27: 334557.927 ops/s
# Warmup Iteration  28: 333908.826 ops/s
# Warmup Iteration  29: 334382.199 ops/s
# Warmup Iteration  30: 332669.014 ops/s
Iteration   1: 332802.690 ops/s
Iteration   2: 334583.147 ops/s
Iteration   3: 334643.700 ops/s
Iteration   4: 332528.980 ops/s
Iteration   5: 335000.992 ops/s
Iteration   6: 333886.289 ops/s
Iteration   7: 334407.770 ops/s
Iteration   8: 334191.856 ops/s
Iteration   9: 332686.771 ops/s
Iteration  10: 332017.849 ops/s
Iteration  11: 331932.573 ops/s
Iteration  12: 333516.244 ops/s
Iteration  13: 333353.492 ops/s
Iteration  14: 334147.818 ops/s
Iteration  15: 334354.669 ops/s
Iteration  16: 332097.507 ops/s
Iteration  17: 334535.752 ops/s
Iteration  18: 334281.350 ops/s
Iteration  19: 334949.293 ops/s
Iteration  20: 334532.006 ops/s
Iteration  21: 334022.943 ops/s
Iteration  22: 332667.153 ops/s
Iteration  23: 334031.545 ops/s
Iteration  24: 334933.630 ops/s
Iteration  25: 332483.484 ops/s
Iteration  26: 332947.813 ops/s
Iteration  27: 334251.837 ops/s
Iteration  28: 333222.244 ops/s
Iteration  29: 334857.090 ops/s
Iteration  30: 334108.194 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_selectInstancesOf":
  333732.556 ±(99.9%) 642.181 ops/s [Average]
  (min, avg, max) = (331932.573, 333732.556, 335000.992), stdev = 961.187
  CI (99.9%): [333090.375, 334374.737] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score     Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_selectInstancesOf  thrpt   30  333732.556 ± 642.181  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_selectToTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_selectToTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 786577.571 ops/s
# Warmup Iteration   2: 1256798.268 ops/s
# Warmup Iteration   3: 1480398.808 ops/s
# Warmup Iteration   4: 1496268.124 ops/s
# Warmup Iteration   5: 1494016.311 ops/s
# Warmup Iteration   6: 1428194.962 ops/s
# Warmup Iteration   7: 1304327.473 ops/s
# Warmup Iteration   8: 1494071.089 ops/s
# Warmup Iteration   9: 1502837.725 ops/s
# Warmup Iteration  10: 1502947.230 ops/s
# Warmup Iteration  11: 1501816.549 ops/s
# Warmup Iteration  12: 1502725.742 ops/s
# Warmup Iteration  13: 1500764.900 ops/s
# Warmup Iteration  14: 1498162.696 ops/s
# Warmup Iteration  15: 1498934.598 ops/s
# Warmup Iteration  16: 1496020.863 ops/s
# Warmup Iteration  17: 1503149.875 ops/s
# Warmup Iteration  18: 1499803.924 ops/s
# Warmup Iteration  19: 1496759.906 ops/s
# Warmup Iteration  20: 1499276.836 ops/s
# Warmup Iteration  21: 1494067.906 ops/s
# Warmup Iteration  22: 1502896.205 ops/s
# Warmup Iteration  23: 1502269.634 ops/s
# Warmup Iteration  24: 1501568.756 ops/s
# Warmup Iteration  25: 1500717.378 ops/s
# Warmup Iteration  26: 1503435.776 ops/s
# Warmup Iteration  27: 1500612.273 ops/s
# Warmup Iteration  28: 1499495.728 ops/s
# Warmup Iteration  29: 1504583.835 ops/s
# Warmup Iteration  30: 1503156.003 ops/s
Iteration   1: 1499685.615 ops/s
Iteration   2: 1505155.301 ops/s
Iteration   3: 1501363.481 ops/s
Iteration   4: 1504015.836 ops/s
Iteration   5: 1501931.307 ops/s
Iteration   6: 1498558.678 ops/s
Iteration   7: 1503089.719 ops/s
Iteration   8: 1503081.133 ops/s
Iteration   9: 1501788.185 ops/s
Iteration  10: 1504527.364 ops/s
Iteration  11: 1496491.717 ops/s
Iteration  12: 1490987.015 ops/s
Iteration  13: 1501424.509 ops/s
Iteration  14: 1500070.103 ops/s
Iteration  15: 1504307.118 ops/s
Iteration  16: 1500353.704 ops/s
Iteration  17: 1501000.340 ops/s
Iteration  18: 1499563.515 ops/s
Iteration  19: 1502588.234 ops/s
Iteration  20: 1499005.799 ops/s
Iteration  21: 1504316.759 ops/s
Iteration  22: 1502669.785 ops/s
Iteration  23: 1498475.620 ops/s
Iteration  24: 1497334.889 ops/s
Iteration  25: 1501892.255 ops/s
Iteration  26: 1501476.959 ops/s
Iteration  27: 1498783.616 ops/s
Iteration  28: 1502768.531 ops/s
Iteration  29: 1505118.724 ops/s
Iteration  30: 1498724.234 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_selectToTarget":
  1501018.335 ±(99.9%) 2012.572 ops/s [Average]
  (min, avg, max) = (1490987.015, 1501018.335, 1505155.301), stdev = 3012.323
  CI (99.9%): [1499005.763, 1503030.907] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_selectToTarget  thrpt   30  1501018.335 ± 2012.572  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_selectUnique$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_selectUnique

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 575811.269 ops/s
# Warmup Iteration   2: 993409.427 ops/s
# Warmup Iteration   3: 1150508.242 ops/s
# Warmup Iteration   4: 1157638.849 ops/s
# Warmup Iteration   5: 1155203.370 ops/s
# Warmup Iteration   6: 940774.967 ops/s
# Warmup Iteration   7: 1154013.082 ops/s
# Warmup Iteration   8: 1152410.866 ops/s
# Warmup Iteration   9: 1154870.339 ops/s
# Warmup Iteration  10: 1156513.370 ops/s
# Warmup Iteration  11: 1157052.819 ops/s
# Warmup Iteration  12: 1156362.475 ops/s
# Warmup Iteration  13: 1157778.281 ops/s
# Warmup Iteration  14: 1153800.468 ops/s
# Warmup Iteration  15: 1150507.151 ops/s
# Warmup Iteration  16: 1154484.281 ops/s
# Warmup Iteration  17: 1157856.647 ops/s
# Warmup Iteration  18: 1159787.845 ops/s
# Warmup Iteration  19: 1158611.789 ops/s
# Warmup Iteration  20: 1157892.012 ops/s
# Warmup Iteration  21: 1151319.193 ops/s
# Warmup Iteration  22: 1160092.609 ops/s
# Warmup Iteration  23: 1158412.030 ops/s
# Warmup Iteration  24: 1153503.128 ops/s
# Warmup Iteration  25: 1159382.681 ops/s
# Warmup Iteration  26: 1150170.350 ops/s
# Warmup Iteration  27: 1156381.410 ops/s
# Warmup Iteration  28: 1154924.518 ops/s
# Warmup Iteration  29: 1152712.355 ops/s
# Warmup Iteration  30: 1154587.136 ops/s
Iteration   1: 1152345.346 ops/s
Iteration   2: 1150891.697 ops/s
Iteration   3: 1160122.968 ops/s
Iteration   4: 1156011.470 ops/s
Iteration   5: 1161593.001 ops/s
Iteration   6: 1157307.604 ops/s
Iteration   7: 1149861.367 ops/s
Iteration   8: 1160066.890 ops/s
Iteration   9: 1154406.678 ops/s
Iteration  10: 1161357.515 ops/s
Iteration  11: 1162194.848 ops/s
Iteration  12: 1152981.133 ops/s
Iteration  13: 1152903.425 ops/s
Iteration  14: 1159875.725 ops/s
Iteration  15: 1154209.091 ops/s
Iteration  16: 1152349.051 ops/s
Iteration  17: 1160226.448 ops/s
Iteration  18: 1156448.383 ops/s
Iteration  19: 1160204.834 ops/s
Iteration  20: 1158666.170 ops/s
Iteration  21: 1160343.156 ops/s
Iteration  22: 1157141.891 ops/s
Iteration  23: 1162049.899 ops/s
Iteration  24: 1158693.478 ops/s
Iteration  25: 1154449.360 ops/s
Iteration  26: 1156048.650 ops/s
Iteration  27: 1160993.239 ops/s
Iteration  28: 1150554.726 ops/s
Iteration  29: 1159344.721 ops/s
Iteration  30: 1161994.644 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_selectUnique":
  1157187.914 ±(99.9%) 2579.241 ops/s [Average]
  (min, avg, max) = (1149861.367, 1157187.914, 1162194.848), stdev = 3860.487
  CI (99.9%): [1154608.673, 1159767.155] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_selectUnique  thrpt   30  1157187.914 ± 2579.241  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_selectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_selectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 193954.084 ops/s
# Warmup Iteration   2: 349064.596 ops/s
# Warmup Iteration   3: 395974.896 ops/s
# Warmup Iteration   4: 399583.772 ops/s
# Warmup Iteration   5: 397191.897 ops/s
# Warmup Iteration   6: 326099.384 ops/s
# Warmup Iteration   7: 399189.479 ops/s
# Warmup Iteration   8: 398787.587 ops/s
# Warmup Iteration   9: 397880.846 ops/s
# Warmup Iteration  10: 395499.418 ops/s
# Warmup Iteration  11: 396499.037 ops/s
# Warmup Iteration  12: 397226.654 ops/s
# Warmup Iteration  13: 398424.764 ops/s
# Warmup Iteration  14: 396988.231 ops/s
# Warmup Iteration  15: 396456.597 ops/s
# Warmup Iteration  16: 397912.737 ops/s
# Warmup Iteration  17: 398457.186 ops/s
# Warmup Iteration  18: 398725.695 ops/s
# Warmup Iteration  19: 398772.882 ops/s
# Warmup Iteration  20: 398786.537 ops/s
# Warmup Iteration  21: 398185.487 ops/s
# Warmup Iteration  22: 398827.399 ops/s
# Warmup Iteration  23: 400081.342 ops/s
# Warmup Iteration  24: 397656.567 ops/s
# Warmup Iteration  25: 399281.515 ops/s
# Warmup Iteration  26: 400074.937 ops/s
# Warmup Iteration  27: 398545.451 ops/s
# Warmup Iteration  28: 398943.196 ops/s
# Warmup Iteration  29: 398573.664 ops/s
# Warmup Iteration  30: 399152.979 ops/s
Iteration   1: 399453.812 ops/s
Iteration   2: 400200.442 ops/s
Iteration   3: 399009.216 ops/s
Iteration   4: 398972.643 ops/s
Iteration   5: 399839.683 ops/s
Iteration   6: 399181.792 ops/s
Iteration   7: 397799.568 ops/s
Iteration   8: 399028.731 ops/s
Iteration   9: 399746.471 ops/s
Iteration  10: 399904.818 ops/s
Iteration  11: 396514.158 ops/s
Iteration  12: 400430.674 ops/s
Iteration  13: 398732.653 ops/s
Iteration  14: 399053.312 ops/s
Iteration  15: 397574.844 ops/s
Iteration  16: 398961.699 ops/s
Iteration  17: 398986.995 ops/s
Iteration  18: 397074.983 ops/s
Iteration  19: 395997.823 ops/s
Iteration  20: 397719.419 ops/s
Iteration  21: 398835.660 ops/s
Iteration  22: 400397.976 ops/s
Iteration  23: 397149.114 ops/s
Iteration  24: 397166.907 ops/s
Iteration  25: 397272.010 ops/s
Iteration  26: 401028.544 ops/s
Iteration  27: 398795.770 ops/s
Iteration  28: 397540.091 ops/s
Iteration  29: 400096.512 ops/s
Iteration  30: 400266.937 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_selectWith":
  398757.775 ±(99.9%) 868.319 ops/s [Average]
  (min, avg, max) = (395997.823, 398757.775, 401028.544), stdev = 1299.658
  CI (99.9%): [397889.457, 399626.094] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score     Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_selectWith  thrpt   30  398757.775 ± 868.319  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_selectWithToTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_selectWithToTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 914828.248 ops/s
# Warmup Iteration   2: 1305793.090 ops/s
# Warmup Iteration   3: 1633742.918 ops/s
# Warmup Iteration   4: 1626398.527 ops/s
# Warmup Iteration   5: 1622816.568 ops/s
# Warmup Iteration   6: 1634044.777 ops/s
# Warmup Iteration   7: 1468461.642 ops/s
# Warmup Iteration   8: 1490619.283 ops/s
# Warmup Iteration   9: 1634320.639 ops/s
# Warmup Iteration  10: 1633762.997 ops/s
# Warmup Iteration  11: 1636780.921 ops/s
# Warmup Iteration  12: 1635443.880 ops/s
# Warmup Iteration  13: 1638431.675 ops/s
# Warmup Iteration  14: 1635601.561 ops/s
# Warmup Iteration  15: 1633767.516 ops/s
# Warmup Iteration  16: 1638370.549 ops/s
# Warmup Iteration  17: 1614257.985 ops/s
# Warmup Iteration  18: 1616899.367 ops/s
# Warmup Iteration  19: 1611118.398 ops/s
# Warmup Iteration  20: 1617228.628 ops/s
# Warmup Iteration  21: 1619792.006 ops/s
# Warmup Iteration  22: 1616663.738 ops/s
# Warmup Iteration  23: 1620279.565 ops/s
# Warmup Iteration  24: 1615007.504 ops/s
# Warmup Iteration  25: 1622745.258 ops/s
# Warmup Iteration  26: 1618691.211 ops/s
# Warmup Iteration  27: 1620614.047 ops/s
# Warmup Iteration  28: 1621123.163 ops/s
# Warmup Iteration  29: 1620723.849 ops/s
# Warmup Iteration  30: 1619531.754 ops/s
Iteration   1: 1625225.821 ops/s
Iteration   2: 1620843.798 ops/s
Iteration   3: 1619613.657 ops/s
Iteration   4: 1621893.017 ops/s
Iteration   5: 1624785.847 ops/s
Iteration   6: 1624647.281 ops/s
Iteration   7: 1622422.029 ops/s
Iteration   8: 1619677.131 ops/s
Iteration   9: 1622766.663 ops/s
Iteration  10: 1625882.767 ops/s
Iteration  11: 1626616.980 ops/s
Iteration  12: 1622971.185 ops/s
Iteration  13: 1625014.856 ops/s
Iteration  14: 1624971.693 ops/s
Iteration  15: 1624233.373 ops/s
Iteration  16: 1620369.305 ops/s
Iteration  17: 1619906.386 ops/s
Iteration  18: 1624701.412 ops/s
Iteration  19: 1622896.889 ops/s
Iteration  20: 1626031.840 ops/s
Iteration  21: 1616989.795 ops/s
Iteration  22: 1624984.572 ops/s
Iteration  23: 1613406.974 ops/s
Iteration  24: 1624028.426 ops/s
Iteration  25: 1624706.241 ops/s
Iteration  26: 1618818.321 ops/s
Iteration  27: 1609094.738 ops/s
Iteration  28: 1613126.632 ops/s
Iteration  29: 1623586.996 ops/s
Iteration  30: 1624714.455 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_selectWithToTarget":
  1621964.303 ±(99.9%) 2814.306 ops/s [Average]
  (min, avg, max) = (1609094.738, 1621964.303, 1626616.980), stdev = 4212.321
  CI (99.9%): [1619149.997, 1624778.608] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_selectWithToTarget  thrpt   30  1621964.303 ± 2814.306  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_selectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_selectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 244067.598 ops/s
# Warmup Iteration   2: 487340.970 ops/s
# Warmup Iteration   3: 539448.446 ops/s
# Warmup Iteration   4: 543016.480 ops/s
# Warmup Iteration   5: 446811.142 ops/s
# Warmup Iteration   6: 543571.041 ops/s
# Warmup Iteration   7: 543095.186 ops/s
# Warmup Iteration   8: 543568.891 ops/s
# Warmup Iteration   9: 543495.945 ops/s
# Warmup Iteration  10: 543676.399 ops/s
# Warmup Iteration  11: 543949.783 ops/s
# Warmup Iteration  12: 543248.364 ops/s
# Warmup Iteration  13: 543745.596 ops/s
# Warmup Iteration  14: 543521.296 ops/s
# Warmup Iteration  15: 544159.993 ops/s
# Warmup Iteration  16: 543721.856 ops/s
# Warmup Iteration  17: 544247.822 ops/s
# Warmup Iteration  18: 543143.455 ops/s
# Warmup Iteration  19: 544173.050 ops/s
# Warmup Iteration  20: 544239.191 ops/s
# Warmup Iteration  21: 541768.393 ops/s
# Warmup Iteration  22: 543009.271 ops/s
# Warmup Iteration  23: 542673.357 ops/s
# Warmup Iteration  24: 542949.696 ops/s
# Warmup Iteration  25: 542639.645 ops/s
# Warmup Iteration  26: 542974.794 ops/s
# Warmup Iteration  27: 543452.520 ops/s
# Warmup Iteration  28: 543837.290 ops/s
# Warmup Iteration  29: 542206.359 ops/s
# Warmup Iteration  30: 542929.708 ops/s
Iteration   1: 544086.913 ops/s
Iteration   2: 541978.502 ops/s
Iteration   3: 544183.897 ops/s
Iteration   4: 542911.153 ops/s
Iteration   5: 541740.839 ops/s
Iteration   6: 541147.156 ops/s
Iteration   7: 543837.984 ops/s
Iteration   8: 542551.925 ops/s
Iteration   9: 545043.059 ops/s
Iteration  10: 541834.946 ops/s
Iteration  11: 541572.760 ops/s
Iteration  12: 544429.541 ops/s
Iteration  13: 543598.817 ops/s
Iteration  14: 540754.083 ops/s
Iteration  15: 542328.576 ops/s
Iteration  16: 542833.869 ops/s
Iteration  17: 544824.682 ops/s
Iteration  18: 543208.558 ops/s
Iteration  19: 543410.169 ops/s
Iteration  20: 545087.120 ops/s
Iteration  21: 543667.667 ops/s
Iteration  22: 541481.533 ops/s
Iteration  23: 544099.249 ops/s
Iteration  24: 539819.646 ops/s
Iteration  25: 543941.342 ops/s
Iteration  26: 544750.655 ops/s
Iteration  27: 543133.539 ops/s
Iteration  28: 543853.292 ops/s
Iteration  29: 543465.646 ops/s
Iteration  30: 543893.418 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_selectWith_target":
  543115.685 ±(99.9%) 897.493 ops/s [Average]
  (min, avg, max) = (539819.646, 543115.685, 545087.120), stdev = 1343.326
  CI (99.9%): [542218.191, 544013.178] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score     Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_selectWith_target  thrpt   30  543115.685 ± 897.493  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_serialization$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_serialization

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 85304.295 ops/s
# Warmup Iteration   2: 136296.422 ops/s
# Warmup Iteration   3: 167508.320 ops/s
# Warmup Iteration   4: 168394.980 ops/s
# Warmup Iteration   5: 170088.106 ops/s
# Warmup Iteration   6: 169565.994 ops/s
# Warmup Iteration   7: 145125.846 ops/s
# Warmup Iteration   8: 170073.975 ops/s
# Warmup Iteration   9: 169750.664 ops/s
# Warmup Iteration  10: 170706.101 ops/s
# Warmup Iteration  11: 169476.441 ops/s
# Warmup Iteration  12: 169527.545 ops/s
# Warmup Iteration  13: 169660.380 ops/s
# Warmup Iteration  14: 169055.851 ops/s
# Warmup Iteration  15: 169589.145 ops/s
# Warmup Iteration  16: 169897.771 ops/s
# Warmup Iteration  17: 170279.782 ops/s
# Warmup Iteration  18: 169311.272 ops/s
# Warmup Iteration  19: 170164.078 ops/s
# Warmup Iteration  20: 170306.917 ops/s
# Warmup Iteration  21: 170546.306 ops/s
# Warmup Iteration  22: 169673.698 ops/s
# Warmup Iteration  23: 170545.296 ops/s
# Warmup Iteration  24: 169998.103 ops/s
# Warmup Iteration  25: 170454.796 ops/s
# Warmup Iteration  26: 170517.670 ops/s
# Warmup Iteration  27: 170119.682 ops/s
# Warmup Iteration  28: 169862.995 ops/s
# Warmup Iteration  29: 170541.619 ops/s
# Warmup Iteration  30: 170079.695 ops/s
Iteration   1: 170239.560 ops/s
Iteration   2: 170719.410 ops/s
Iteration   3: 169438.602 ops/s
Iteration   4: 169877.110 ops/s
Iteration   5: 170994.315 ops/s
Iteration   6: 169742.143 ops/s
Iteration   7: 170769.073 ops/s
Iteration   8: 170432.465 ops/s
Iteration   9: 170791.948 ops/s
Iteration  10: 169975.431 ops/s
Iteration  11: 170386.888 ops/s
Iteration  12: 170685.431 ops/s
Iteration  13: 171010.647 ops/s
Iteration  14: 170716.943 ops/s
Iteration  15: 170022.388 ops/s
Iteration  16: 170040.647 ops/s
Iteration  17: 170236.327 ops/s
Iteration  18: 171044.817 ops/s
Iteration  19: 169612.660 ops/s
Iteration  20: 171060.313 ops/s
Iteration  21: 169867.234 ops/s
Iteration  22: 170574.382 ops/s
Iteration  23: 171560.567 ops/s
Iteration  24: 171133.360 ops/s
Iteration  25: 171885.861 ops/s
Iteration  26: 169706.771 ops/s
Iteration  27: 170946.676 ops/s
Iteration  28: 170520.111 ops/s
Iteration  29: 170625.818 ops/s
Iteration  30: 169801.934 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_serialization":
  170480.661 ±(99.9%) 398.594 ops/s [Average]
  (min, avg, max) = (169438.602, 170480.661, 171885.861), stdev = 596.597
  CI (99.9%): [170082.067, 170879.255] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score     Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_serialization  thrpt   30  170480.661 ± 398.594  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_sumByDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_sumByDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 514669.756 ops/s
# Warmup Iteration   2: 875831.142 ops/s
# Warmup Iteration   3: 1017390.806 ops/s
# Warmup Iteration   4: 1017514.994 ops/s
# Warmup Iteration   5: 1020298.834 ops/s
# Warmup Iteration   6: 829062.436 ops/s
# Warmup Iteration   7: 1012959.695 ops/s
# Warmup Iteration   8: 1018031.390 ops/s
# Warmup Iteration   9: 1017757.819 ops/s
# Warmup Iteration  10: 1014011.481 ops/s
# Warmup Iteration  11: 1012854.804 ops/s
# Warmup Iteration  12: 1017554.792 ops/s
# Warmup Iteration  13: 1016615.657 ops/s
# Warmup Iteration  14: 1017822.525 ops/s
# Warmup Iteration  15: 1017772.011 ops/s
# Warmup Iteration  16: 1012198.217 ops/s
# Warmup Iteration  17: 1014168.006 ops/s
# Warmup Iteration  18: 1017986.498 ops/s
# Warmup Iteration  19: 1018187.854 ops/s
# Warmup Iteration  20: 1013175.619 ops/s
# Warmup Iteration  21: 1018207.597 ops/s
# Warmup Iteration  22: 1017753.421 ops/s
# Warmup Iteration  23: 1015846.341 ops/s
# Warmup Iteration  24: 1018212.332 ops/s
# Warmup Iteration  25: 1012209.032 ops/s
# Warmup Iteration  26: 1015788.213 ops/s
# Warmup Iteration  27: 1014495.840 ops/s
# Warmup Iteration  28: 1012552.132 ops/s
# Warmup Iteration  29: 1010511.219 ops/s
# Warmup Iteration  30: 1017988.103 ops/s
Iteration   1: 1012570.820 ops/s
Iteration   2: 1011072.797 ops/s
Iteration   3: 1017309.341 ops/s
Iteration   4: 1010634.958 ops/s
Iteration   5: 1015560.268 ops/s
Iteration   6: 1010348.511 ops/s
Iteration   7: 1015762.628 ops/s
Iteration   8: 1019750.823 ops/s
Iteration   9: 1018769.849 ops/s
Iteration  10: 1016777.459 ops/s
Iteration  11: 1005074.822 ops/s
Iteration  12: 1015552.524 ops/s
Iteration  13: 1017923.444 ops/s
Iteration  14: 1019081.924 ops/s
Iteration  15: 1016007.485 ops/s
Iteration  16: 1016635.550 ops/s
Iteration  17: 1014850.241 ops/s
Iteration  18: 1008969.698 ops/s
Iteration  19: 1018986.534 ops/s
Iteration  20: 1016268.360 ops/s
Iteration  21: 1018493.015 ops/s
Iteration  22: 1014908.828 ops/s
Iteration  23: 1016214.369 ops/s
Iteration  24: 1017170.259 ops/s
Iteration  25: 1016417.413 ops/s
Iteration  26: 1019294.838 ops/s
Iteration  27: 1015849.695 ops/s
Iteration  28: 1019499.122 ops/s
Iteration  29: 1018148.662 ops/s
Iteration  30: 1019369.328 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_sumByDouble":
  1015775.786 ±(99.9%) 2355.767 ops/s [Average]
  (min, avg, max) = (1005074.822, 1015775.786, 1019750.823), stdev = 3526.001
  CI (99.9%): [1013420.019, 1018131.552] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_sumByDouble  thrpt   30  1015775.786 ± 2355.767  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_sumByDoubleConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_sumByDoubleConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 63.419 ops/s
# Warmup Iteration   2: 70.714 ops/s
# Warmup Iteration   3: 99.878 ops/s
# Warmup Iteration   4: 101.134 ops/s
# Warmup Iteration   5: 100.122 ops/s
# Warmup Iteration   6: 100.590 ops/s
# Warmup Iteration   7: 100.048 ops/s
# Warmup Iteration   8: 100.113 ops/s
# Warmup Iteration   9: 100.498 ops/s
# Warmup Iteration  10: 80.730 ops/s
# Warmup Iteration  11: 101.792 ops/s
# Warmup Iteration  12: 100.495 ops/s
# Warmup Iteration  13: 100.559 ops/s
# Warmup Iteration  14: 99.669 ops/s
# Warmup Iteration  15: 99.447 ops/s
# Warmup Iteration  16: 100.449 ops/s
# Warmup Iteration  17: 98.729 ops/s
# Warmup Iteration  18: 99.695 ops/s
# Warmup Iteration  19: 99.470 ops/s
# Warmup Iteration  20: 100.992 ops/s
# Warmup Iteration  21: 100.762 ops/s
# Warmup Iteration  22: 100.883 ops/s
# Warmup Iteration  23: 101.974 ops/s
# Warmup Iteration  24: 100.199 ops/s
# Warmup Iteration  25: 100.282 ops/s
# Warmup Iteration  26: 101.582 ops/s
# Warmup Iteration  27: 99.547 ops/s
# Warmup Iteration  28: 98.792 ops/s
# Warmup Iteration  29: 98.720 ops/s
# Warmup Iteration  30: 96.872 ops/s
Iteration   1: 97.604 ops/s
Iteration   2: 100.375 ops/s
Iteration   3: 98.580 ops/s
Iteration   4: 98.269 ops/s
Iteration   5: 99.615 ops/s
Iteration   6: 99.948 ops/s
Iteration   7: 97.314 ops/s
Iteration   8: 97.170 ops/s
Iteration   9: 99.983 ops/s
Iteration  10: 97.348 ops/s
Iteration  11: 97.928 ops/s
Iteration  12: 99.741 ops/s
Iteration  13: 99.891 ops/s
Iteration  14: 98.538 ops/s
Iteration  15: 99.084 ops/s
Iteration  16: 99.028 ops/s
Iteration  17: 98.126 ops/s
Iteration  18: 98.028 ops/s
Iteration  19: 100.580 ops/s
Iteration  20: 97.441 ops/s
Iteration  21: 98.427 ops/s
Iteration  22: 97.872 ops/s
Iteration  23: 98.484 ops/s
Iteration  24: 99.330 ops/s
Iteration  25: 98.456 ops/s
Iteration  26: 100.877 ops/s
Iteration  27: 99.843 ops/s
Iteration  28: 98.647 ops/s
Iteration  29: 100.428 ops/s
Iteration  30: 99.475 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_sumByDoubleConsistentRounding":
  98.881 ±(99.9%) 0.719 ops/s [Average]
  (min, avg, max) = (97.170, 98.881, 100.877), stdev = 1.075
  CI (99.9%): [98.163, 99.600] (assumes normal distribution)


# Run complete. Total time: 00:01:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt   Score   Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_sumByDoubleConsistentRounding  thrpt   30  98.881 ± 0.719  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_sumByFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_sumByFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 501548.331 ops/s
# Warmup Iteration   2: 861208.510 ops/s
# Warmup Iteration   3: 1003586.823 ops/s
# Warmup Iteration   4: 1006420.950 ops/s
# Warmup Iteration   5: 1009602.884 ops/s
# Warmup Iteration   6: 827586.927 ops/s
# Warmup Iteration   7: 1011207.693 ops/s
# Warmup Iteration   8: 1008683.347 ops/s
# Warmup Iteration   9: 1009007.439 ops/s
# Warmup Iteration  10: 1009733.165 ops/s
# Warmup Iteration  11: 1010427.155 ops/s
# Warmup Iteration  12: 1010641.512 ops/s
# Warmup Iteration  13: 1008103.254 ops/s
# Warmup Iteration  14: 1010292.917 ops/s
# Warmup Iteration  15: 1005074.340 ops/s
# Warmup Iteration  16: 1009776.465 ops/s
# Warmup Iteration  17: 1009883.669 ops/s
# Warmup Iteration  18: 1007101.727 ops/s
# Warmup Iteration  19: 1009508.387 ops/s
# Warmup Iteration  20: 1009536.486 ops/s
# Warmup Iteration  21: 1008384.646 ops/s
# Warmup Iteration  22: 1005572.863 ops/s
# Warmup Iteration  23: 1003939.976 ops/s
# Warmup Iteration  24: 1009587.786 ops/s
# Warmup Iteration  25: 1007577.543 ops/s
# Warmup Iteration  26: 1009051.578 ops/s
# Warmup Iteration  27: 1008769.890 ops/s
# Warmup Iteration  28: 1008725.316 ops/s
# Warmup Iteration  29: 1007919.191 ops/s
# Warmup Iteration  30: 1007447.835 ops/s
Iteration   1: 1007939.793 ops/s
Iteration   2: 1008562.058 ops/s
Iteration   3: 1004685.242 ops/s
Iteration   4: 1008654.089 ops/s
Iteration   5: 1012722.750 ops/s
Iteration   6: 1010061.530 ops/s
Iteration   7: 1010994.468 ops/s
Iteration   8: 1008679.672 ops/s
Iteration   9: 1007934.777 ops/s
Iteration  10: 1009562.706 ops/s
Iteration  11: 1008316.889 ops/s
Iteration  12: 1007774.532 ops/s
Iteration  13: 1008418.729 ops/s
Iteration  14: 1009517.052 ops/s
Iteration  15: 1011634.715 ops/s
Iteration  16: 1011318.633 ops/s
Iteration  17: 1005746.425 ops/s
Iteration  18: 1001277.116 ops/s
Iteration  19: 1009718.233 ops/s
Iteration  20: 1010451.717 ops/s
Iteration  21: 1007326.072 ops/s
Iteration  22: 1006984.242 ops/s
Iteration  23: 1008350.952 ops/s
Iteration  24: 1008848.242 ops/s
Iteration  25: 1006211.584 ops/s
Iteration  26: 1007574.042 ops/s
Iteration  27: 1007448.199 ops/s
Iteration  28: 1008989.648 ops/s
Iteration  29: 1010133.863 ops/s
Iteration  30: 1007867.559 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_sumByFloat":
  1008456.851 ±(99.9%) 1476.107 ops/s [Average]
  (min, avg, max) = (1001277.116, 1008456.851, 1012722.750), stdev = 2209.367
  CI (99.9%): [1006980.744, 1009932.958] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_sumByFloat  thrpt   30  1008456.851 ± 1476.107  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_sumByFloatConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_sumByFloatConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 63.822 ops/s
# Warmup Iteration   2: 70.730 ops/s
# Warmup Iteration   3: 98.979 ops/s
# Warmup Iteration   4: 98.226 ops/s
# Warmup Iteration   5: 98.111 ops/s
# Warmup Iteration   6: 99.650 ops/s
# Warmup Iteration   7: 98.850 ops/s
# Warmup Iteration   8: 100.590 ops/s
# Warmup Iteration   9: 100.614 ops/s
# Warmup Iteration  10: 83.350 ops/s
# Warmup Iteration  11: 98.892 ops/s
# Warmup Iteration  12: 99.635 ops/s
# Warmup Iteration  13: 99.719 ops/s
# Warmup Iteration  14: 100.251 ops/s
# Warmup Iteration  15: 98.347 ops/s
# Warmup Iteration  16: 100.100 ops/s
# Warmup Iteration  17: 99.100 ops/s
# Warmup Iteration  18: 99.207 ops/s
# Warmup Iteration  19: 98.513 ops/s
# Warmup Iteration  20: 99.230 ops/s
# Warmup Iteration  21: 101.723 ops/s
# Warmup Iteration  22: 98.487 ops/s
# Warmup Iteration  23: 99.273 ops/s
# Warmup Iteration  24: 98.844 ops/s
# Warmup Iteration  25: 98.198 ops/s
# Warmup Iteration  26: 100.583 ops/s
# Warmup Iteration  27: 98.590 ops/s
# Warmup Iteration  28: 99.011 ops/s
# Warmup Iteration  29: 96.550 ops/s
# Warmup Iteration  30: 97.238 ops/s
Iteration   1: 95.069 ops/s
Iteration   2: 98.814 ops/s
Iteration   3: 97.060 ops/s
Iteration   4: 94.939 ops/s
Iteration   5: 96.073 ops/s
Iteration   6: 98.230 ops/s
Iteration   7: 96.588 ops/s
Iteration   8: 95.451 ops/s
Iteration   9: 97.812 ops/s
Iteration  10: 97.059 ops/s
Iteration  11: 95.556 ops/s
Iteration  12: 97.911 ops/s
Iteration  13: 97.946 ops/s
Iteration  14: 98.188 ops/s
Iteration  15: 96.375 ops/s
Iteration  16: 98.721 ops/s
Iteration  17: 97.355 ops/s
Iteration  18: 97.215 ops/s
Iteration  19: 98.614 ops/s
Iteration  20: 99.073 ops/s
Iteration  21: 95.100 ops/s
Iteration  22: 96.787 ops/s
Iteration  23: 99.870 ops/s
Iteration  24: 97.852 ops/s
Iteration  25: 96.640 ops/s
Iteration  26: 98.649 ops/s
Iteration  27: 98.302 ops/s
Iteration  28: 98.514 ops/s
Iteration  29: 98.136 ops/s
Iteration  30: 97.408 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_sumByFloatConsistentRounding":
  97.377 ±(99.9%) 0.870 ops/s [Average]
  (min, avg, max) = (94.939, 97.377, 99.870), stdev = 1.302
  CI (99.9%): [96.507, 98.247] (assumes normal distribution)


# Run complete. Total time: 00:01:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt   Score   Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_sumByFloatConsistentRounding  thrpt   30  97.377 ± 0.870  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_sumByInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_sumByInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 603988.953 ops/s
# Warmup Iteration   2: 1068567.968 ops/s
# Warmup Iteration   3: 1207713.014 ops/s
# Warmup Iteration   4: 1211595.378 ops/s
# Warmup Iteration   5: 1208656.265 ops/s
# Warmup Iteration   6: 985917.924 ops/s
# Warmup Iteration   7: 1213365.885 ops/s
# Warmup Iteration   8: 1213722.487 ops/s
# Warmup Iteration   9: 1209927.942 ops/s
# Warmup Iteration  10: 1213677.593 ops/s
# Warmup Iteration  11: 1214243.390 ops/s
# Warmup Iteration  12: 1213295.239 ops/s
# Warmup Iteration  13: 1209960.712 ops/s
# Warmup Iteration  14: 1213479.239 ops/s
# Warmup Iteration  15: 1210360.916 ops/s
# Warmup Iteration  16: 1214746.502 ops/s
# Warmup Iteration  17: 1213043.974 ops/s
# Warmup Iteration  18: 1215350.251 ops/s
# Warmup Iteration  19: 1216687.857 ops/s
# Warmup Iteration  20: 1211125.723 ops/s
# Warmup Iteration  21: 1215015.013 ops/s
# Warmup Iteration  22: 1216805.320 ops/s
# Warmup Iteration  23: 1213325.025 ops/s
# Warmup Iteration  24: 1215672.923 ops/s
# Warmup Iteration  25: 1212576.542 ops/s
# Warmup Iteration  26: 1211471.816 ops/s
# Warmup Iteration  27: 1215344.813 ops/s
# Warmup Iteration  28: 1216777.998 ops/s
# Warmup Iteration  29: 1216555.249 ops/s
# Warmup Iteration  30: 1217760.955 ops/s
Iteration   1: 1212392.644 ops/s
Iteration   2: 1215286.125 ops/s
Iteration   3: 1209478.753 ops/s
Iteration   4: 1214457.898 ops/s
Iteration   5: 1211942.564 ops/s
Iteration   6: 1211977.380 ops/s
Iteration   7: 1218638.202 ops/s
Iteration   8: 1213575.788 ops/s
Iteration   9: 1214331.732 ops/s
Iteration  10: 1209809.569 ops/s
Iteration  11: 1215990.637 ops/s
Iteration  12: 1216289.201 ops/s
Iteration  13: 1214724.648 ops/s
Iteration  14: 1218209.440 ops/s
Iteration  15: 1212281.425 ops/s
Iteration  16: 1214820.731 ops/s
Iteration  17: 1210024.013 ops/s
Iteration  18: 1215042.881 ops/s
Iteration  19: 1215917.525 ops/s
Iteration  20: 1210291.604 ops/s
Iteration  21: 1213549.120 ops/s
Iteration  22: 1208495.690 ops/s
Iteration  23: 1214153.047 ops/s
Iteration  24: 1217726.848 ops/s
Iteration  25: 1211684.407 ops/s
Iteration  26: 1208982.394 ops/s
Iteration  27: 1211937.403 ops/s
Iteration  28: 1214004.616 ops/s
Iteration  29: 1215331.126 ops/s
Iteration  30: 1205188.311 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_sumByInt":
  1213217.857 ±(99.9%) 2069.504 ops/s [Average]
  (min, avg, max) = (1205188.311, 1213217.857, 1218638.202), stdev = 3097.536
  CI (99.9%): [1211148.354, 1215287.361] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_sumByInt  thrpt   30  1213217.857 ± 2069.504  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_sumByLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_sumByLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 597000.589 ops/s
# Warmup Iteration   2: 1062726.176 ops/s
# Warmup Iteration   3: 1213466.604 ops/s
# Warmup Iteration   4: 1217006.646 ops/s
# Warmup Iteration   5: 1217017.793 ops/s
# Warmup Iteration   6: 993010.371 ops/s
# Warmup Iteration   7: 1223272.041 ops/s
# Warmup Iteration   8: 1218267.688 ops/s
# Warmup Iteration   9: 1220438.490 ops/s
# Warmup Iteration  10: 1219925.136 ops/s
# Warmup Iteration  11: 1223269.873 ops/s
# Warmup Iteration  12: 1223888.832 ops/s
# Warmup Iteration  13: 1222832.468 ops/s
# Warmup Iteration  14: 1221099.269 ops/s
# Warmup Iteration  15: 1220020.379 ops/s
# Warmup Iteration  16: 1222718.011 ops/s
# Warmup Iteration  17: 1217788.540 ops/s
# Warmup Iteration  18: 1220530.631 ops/s
# Warmup Iteration  19: 1220717.566 ops/s
# Warmup Iteration  20: 1221749.626 ops/s
# Warmup Iteration  21: 1218615.098 ops/s
# Warmup Iteration  22: 1223046.045 ops/s
# Warmup Iteration  23: 1220045.121 ops/s
# Warmup Iteration  24: 1219936.756 ops/s
# Warmup Iteration  25: 1220171.088 ops/s
# Warmup Iteration  26: 1220547.152 ops/s
# Warmup Iteration  27: 1219946.702 ops/s
# Warmup Iteration  28: 1221063.465 ops/s
# Warmup Iteration  29: 1218976.269 ops/s
# Warmup Iteration  30: 1221467.562 ops/s
Iteration   1: 1220402.931 ops/s
Iteration   2: 1220276.915 ops/s
Iteration   3: 1220030.909 ops/s
Iteration   4: 1221382.902 ops/s
Iteration   5: 1223609.615 ops/s
Iteration   6: 1221001.510 ops/s
Iteration   7: 1220316.949 ops/s
Iteration   8: 1224755.339 ops/s
Iteration   9: 1219708.855 ops/s
Iteration  10: 1220750.126 ops/s
Iteration  11: 1223561.012 ops/s
Iteration  12: 1223548.831 ops/s
Iteration  13: 1219963.480 ops/s
Iteration  14: 1222564.204 ops/s
Iteration  15: 1225227.435 ops/s
Iteration  16: 1217060.612 ops/s
Iteration  17: 1226674.104 ops/s
Iteration  18: 1223103.852 ops/s
Iteration  19: 1220679.883 ops/s
Iteration  20: 1225392.656 ops/s
Iteration  21: 1221702.558 ops/s
Iteration  22: 1225290.717 ops/s
Iteration  23: 1223199.784 ops/s
Iteration  24: 1221309.493 ops/s
Iteration  25: 1221980.071 ops/s
Iteration  26: 1221750.696 ops/s
Iteration  27: 1220209.684 ops/s
Iteration  28: 1217481.608 ops/s
Iteration  29: 1223674.868 ops/s
Iteration  30: 1222973.223 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_sumByLong":
  1221986.161 ±(99.9%) 1526.052 ops/s [Average]
  (min, avg, max) = (1217060.612, 1221986.161, 1226674.104), stdev = 2284.123
  CI (99.9%): [1220460.109, 1223512.213] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_sumByLong  thrpt   30  1221986.161 ± 1526.052  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_sumDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_sumDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 759478.020 ops/s
# Warmup Iteration   2: 1281965.017 ops/s
# Warmup Iteration   3: 1513983.777 ops/s
# Warmup Iteration   4: 1531744.861 ops/s
# Warmup Iteration   5: 1530725.303 ops/s
# Warmup Iteration   6: 1256011.024 ops/s
# Warmup Iteration   7: 1519203.200 ops/s
# Warmup Iteration   8: 1531132.459 ops/s
# Warmup Iteration   9: 1533804.721 ops/s
# Warmup Iteration  10: 1532884.915 ops/s
# Warmup Iteration  11: 1535106.019 ops/s
# Warmup Iteration  12: 1528246.003 ops/s
# Warmup Iteration  13: 1532424.723 ops/s
# Warmup Iteration  14: 1530522.391 ops/s
# Warmup Iteration  15: 1533200.240 ops/s
# Warmup Iteration  16: 1528251.133 ops/s
# Warmup Iteration  17: 1533871.639 ops/s
# Warmup Iteration  18: 1531304.642 ops/s
# Warmup Iteration  19: 1533154.658 ops/s
# Warmup Iteration  20: 1534008.246 ops/s
# Warmup Iteration  21: 1531519.334 ops/s
# Warmup Iteration  22: 1533183.818 ops/s
# Warmup Iteration  23: 1536903.700 ops/s
# Warmup Iteration  24: 1533785.247 ops/s
# Warmup Iteration  25: 1535464.902 ops/s
# Warmup Iteration  26: 1534534.620 ops/s
# Warmup Iteration  27: 1529618.853 ops/s
# Warmup Iteration  28: 1532289.539 ops/s
# Warmup Iteration  29: 1535862.157 ops/s
# Warmup Iteration  30: 1533855.151 ops/s
Iteration   1: 1536535.879 ops/s
Iteration   2: 1533568.748 ops/s
Iteration   3: 1535303.694 ops/s
Iteration   4: 1526103.046 ops/s
Iteration   5: 1534576.241 ops/s
Iteration   6: 1529379.238 ops/s
Iteration   7: 1535380.359 ops/s
Iteration   8: 1537028.064 ops/s
Iteration   9: 1527559.192 ops/s
Iteration  10: 1528132.518 ops/s
Iteration  11: 1532532.994 ops/s
Iteration  12: 1537509.130 ops/s
Iteration  13: 1535708.856 ops/s
Iteration  14: 1535834.448 ops/s
Iteration  15: 1536995.904 ops/s
Iteration  16: 1537938.105 ops/s
Iteration  17: 1528987.164 ops/s
Iteration  18: 1537554.274 ops/s
Iteration  19: 1531884.005 ops/s
Iteration  20: 1530955.575 ops/s
Iteration  21: 1509176.872 ops/s
Iteration  22: 1532053.704 ops/s
Iteration  23: 1533120.799 ops/s
Iteration  24: 1522878.181 ops/s
Iteration  25: 1536193.639 ops/s
Iteration  26: 1533032.346 ops/s
Iteration  27: 1538895.694 ops/s
Iteration  28: 1529240.894 ops/s
Iteration  29: 1531101.377 ops/s
Iteration  30: 1532107.732 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_sumDouble":
  1532242.289 ±(99.9%) 3907.955 ops/s [Average]
  (min, avg, max) = (1509176.872, 1532242.289, 1538895.694), stdev = 5849.243
  CI (99.9%): [1528334.334, 1536150.244] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_sumDouble  thrpt   30  1532242.289 ± 3907.955  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_sumDoubleConsistentRounding1$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_sumDoubleConsistentRounding1

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 75.143 ops/s
# Warmup Iteration   2: 87.259 ops/s
# Warmup Iteration   3: 113.988 ops/s
# Warmup Iteration   4: 114.660 ops/s
# Warmup Iteration   5: 114.670 ops/s
# Warmup Iteration   6: 115.332 ops/s
# Warmup Iteration   7: 114.326 ops/s
# Warmup Iteration   8: 115.275 ops/s
# Warmup Iteration   9: 114.618 ops/s
# Warmup Iteration  10: 97.801 ops/s
# Warmup Iteration  11: 114.900 ops/s
# Warmup Iteration  12: 114.657 ops/s
# Warmup Iteration  13: 114.674 ops/s
# Warmup Iteration  14: 115.247 ops/s
# Warmup Iteration  15: 115.628 ops/s
# Warmup Iteration  16: 115.238 ops/s
# Warmup Iteration  17: 114.626 ops/s
# Warmup Iteration  18: 115.547 ops/s
# Warmup Iteration  19: 114.317 ops/s
# Warmup Iteration  20: 115.033 ops/s
# Warmup Iteration  21: 114.805 ops/s
# Warmup Iteration  22: 115.401 ops/s
# Warmup Iteration  23: 115.906 ops/s
# Warmup Iteration  24: 115.663 ops/s
# Warmup Iteration  25: 110.054 ops/s
# Warmup Iteration  26: 109.600 ops/s
# Warmup Iteration  27: 109.926 ops/s
# Warmup Iteration  28: 108.664 ops/s
# Warmup Iteration  29: 110.258 ops/s
# Warmup Iteration  30: 110.162 ops/s
Iteration   1: 109.474 ops/s
Iteration   2: 109.433 ops/s
Iteration   3: 110.414 ops/s
Iteration   4: 109.436 ops/s
Iteration   5: 109.631 ops/s
Iteration   6: 109.022 ops/s
Iteration   7: 108.749 ops/s
Iteration   8: 109.498 ops/s
Iteration   9: 109.048 ops/s
Iteration  10: 109.293 ops/s
Iteration  11: 109.600 ops/s
Iteration  12: 109.759 ops/s
Iteration  13: 109.652 ops/s
Iteration  14: 110.186 ops/s
Iteration  15: 110.123 ops/s
Iteration  16: 109.452 ops/s
Iteration  17: 108.949 ops/s
Iteration  18: 109.735 ops/s
Iteration  19: 110.043 ops/s
Iteration  20: 109.264 ops/s
Iteration  21: 110.204 ops/s
Iteration  22: 108.943 ops/s
Iteration  23: 109.515 ops/s
Iteration  24: 110.084 ops/s
Iteration  25: 110.538 ops/s
Iteration  26: 110.281 ops/s
Iteration  27: 110.031 ops/s
Iteration  28: 109.061 ops/s
Iteration  29: 110.704 ops/s
Iteration  30: 109.150 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_sumDoubleConsistentRounding1":
  109.642 ±(99.9%) 0.347 ops/s [Average]
  (min, avg, max) = (108.749, 109.642, 110.704), stdev = 0.520
  CI (99.9%): [109.295, 109.990] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt    Score   Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_sumDoubleConsistentRounding1  thrpt   30  109.642 ± 0.347  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_sumDoubleConsistentRounding2$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_sumDoubleConsistentRounding2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 76.985 ops/s
# Warmup Iteration   2: 90.820 ops/s
# Warmup Iteration   3: 119.418 ops/s
# Warmup Iteration   4: 119.627 ops/s
# Warmup Iteration   5: 118.947 ops/s
# Warmup Iteration   6: 119.415 ops/s
# Warmup Iteration   7: 118.983 ops/s
# Warmup Iteration   8: 120.301 ops/s
# Warmup Iteration   9: 118.185 ops/s
# Warmup Iteration  10: 104.400 ops/s
# Warmup Iteration  11: 119.628 ops/s
# Warmup Iteration  12: 119.285 ops/s
# Warmup Iteration  13: 120.040 ops/s
# Warmup Iteration  14: 120.237 ops/s
# Warmup Iteration  15: 118.856 ops/s
# Warmup Iteration  16: 120.306 ops/s
# Warmup Iteration  17: 119.794 ops/s
# Warmup Iteration  18: 120.195 ops/s
# Warmup Iteration  19: 119.541 ops/s
# Warmup Iteration  20: 119.732 ops/s
# Warmup Iteration  21: 120.427 ops/s
# Warmup Iteration  22: 120.212 ops/s
# Warmup Iteration  23: 119.935 ops/s
# Warmup Iteration  24: 114.173 ops/s
# Warmup Iteration  25: 113.539 ops/s
# Warmup Iteration  26: 113.217 ops/s
# Warmup Iteration  27: 113.829 ops/s
# Warmup Iteration  28: 113.606 ops/s
# Warmup Iteration  29: 113.743 ops/s
# Warmup Iteration  30: 113.782 ops/s
Iteration   1: 113.593 ops/s
Iteration   2: 113.074 ops/s
Iteration   3: 113.478 ops/s
Iteration   4: 113.345 ops/s
Iteration   5: 113.760 ops/s
Iteration   6: 113.882 ops/s
Iteration   7: 112.645 ops/s
Iteration   8: 113.267 ops/s
Iteration   9: 114.258 ops/s
Iteration  10: 113.026 ops/s
Iteration  11: 113.709 ops/s
Iteration  12: 112.853 ops/s
Iteration  13: 111.984 ops/s
Iteration  14: 113.976 ops/s
Iteration  15: 113.394 ops/s
Iteration  16: 114.337 ops/s
Iteration  17: 114.477 ops/s
Iteration  18: 113.008 ops/s
Iteration  19: 111.899 ops/s
Iteration  20: 113.606 ops/s
Iteration  21: 113.882 ops/s
Iteration  22: 113.431 ops/s
Iteration  23: 113.545 ops/s
Iteration  24: 114.103 ops/s
Iteration  25: 113.293 ops/s
Iteration  26: 113.774 ops/s
Iteration  27: 113.840 ops/s
Iteration  28: 113.805 ops/s
Iteration  29: 113.555 ops/s
Iteration  30: 113.842 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_sumDoubleConsistentRounding2":
  113.488 ±(99.9%) 0.401 ops/s [Average]
  (min, avg, max) = (111.899, 113.488, 114.477), stdev = 0.600
  CI (99.9%): [113.087, 113.889] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt    Score   Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_sumDoubleConsistentRounding2  thrpt   30  113.488 ± 0.401  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_sumFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_sumFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 766072.816 ops/s
# Warmup Iteration   2: 1270158.208 ops/s
# Warmup Iteration   3: 1508948.592 ops/s
# Warmup Iteration   4: 1521969.145 ops/s
# Warmup Iteration   5: 1523018.572 ops/s
# Warmup Iteration   6: 1261880.751 ops/s
# Warmup Iteration   7: 1493104.870 ops/s
# Warmup Iteration   8: 1526574.059 ops/s
# Warmup Iteration   9: 1527253.309 ops/s
# Warmup Iteration  10: 1527134.287 ops/s
# Warmup Iteration  11: 1526616.687 ops/s
# Warmup Iteration  12: 1526044.898 ops/s
# Warmup Iteration  13: 1527144.915 ops/s
# Warmup Iteration  14: 1526648.856 ops/s
# Warmup Iteration  15: 1526046.809 ops/s
# Warmup Iteration  16: 1525535.951 ops/s
# Warmup Iteration  17: 1522741.841 ops/s
# Warmup Iteration  18: 1529198.291 ops/s
# Warmup Iteration  19: 1525205.106 ops/s
# Warmup Iteration  20: 1522416.798 ops/s
# Warmup Iteration  21: 1527981.292 ops/s
# Warmup Iteration  22: 1527844.284 ops/s
# Warmup Iteration  23: 1529719.815 ops/s
# Warmup Iteration  24: 1528895.176 ops/s
# Warmup Iteration  25: 1524191.303 ops/s
# Warmup Iteration  26: 1527412.468 ops/s
# Warmup Iteration  27: 1526580.952 ops/s
# Warmup Iteration  28: 1526300.761 ops/s
# Warmup Iteration  29: 1524942.089 ops/s
# Warmup Iteration  30: 1526925.247 ops/s
Iteration   1: 1529160.266 ops/s
Iteration   2: 1523570.799 ops/s
Iteration   3: 1524483.724 ops/s
Iteration   4: 1526931.560 ops/s
Iteration   5: 1531930.077 ops/s
Iteration   6: 1524928.451 ops/s
Iteration   7: 1529949.343 ops/s
Iteration   8: 1528399.318 ops/s
Iteration   9: 1531600.626 ops/s
Iteration  10: 1529427.248 ops/s
Iteration  11: 1526277.527 ops/s
Iteration  12: 1525638.638 ops/s
Iteration  13: 1529625.046 ops/s
Iteration  14: 1531515.334 ops/s
Iteration  15: 1525479.551 ops/s
Iteration  16: 1524791.868 ops/s
Iteration  17: 1526667.297 ops/s
Iteration  18: 1527110.840 ops/s
Iteration  19: 1527858.321 ops/s
Iteration  20: 1531729.909 ops/s
Iteration  21: 1524913.980 ops/s
Iteration  22: 1528764.006 ops/s
Iteration  23: 1528196.521 ops/s
Iteration  24: 1523101.533 ops/s
Iteration  25: 1520822.787 ops/s
Iteration  26: 1528454.916 ops/s
Iteration  27: 1522823.395 ops/s
Iteration  28: 1530774.568 ops/s
Iteration  29: 1530258.520 ops/s
Iteration  30: 1520872.273 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_sumFloat":
  1527201.941 ±(99.9%) 2120.575 ops/s [Average]
  (min, avg, max) = (1520822.787, 1527201.941, 1531930.077), stdev = 3173.977
  CI (99.9%): [1525081.366, 1529322.517] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_sumFloat  thrpt   30  1527201.941 ± 2120.575  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_sumFloatConsistentRounding1$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_sumFloatConsistentRounding1

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 73.877 ops/s
# Warmup Iteration   2: 86.156 ops/s
# Warmup Iteration   3: 112.553 ops/s
# Warmup Iteration   4: 113.388 ops/s
# Warmup Iteration   5: 113.272 ops/s
# Warmup Iteration   6: 113.565 ops/s
# Warmup Iteration   7: 113.500 ops/s
# Warmup Iteration   8: 113.676 ops/s
# Warmup Iteration   9: 113.306 ops/s
# Warmup Iteration  10: 96.338 ops/s
# Warmup Iteration  11: 113.745 ops/s
# Warmup Iteration  12: 113.558 ops/s
# Warmup Iteration  13: 114.136 ops/s
# Warmup Iteration  14: 113.477 ops/s
# Warmup Iteration  15: 113.613 ops/s
# Warmup Iteration  16: 113.062 ops/s
# Warmup Iteration  17: 113.577 ops/s
# Warmup Iteration  18: 114.209 ops/s
# Warmup Iteration  19: 113.709 ops/s
# Warmup Iteration  20: 113.461 ops/s
# Warmup Iteration  21: 113.407 ops/s
# Warmup Iteration  22: 113.589 ops/s
# Warmup Iteration  23: 113.645 ops/s
# Warmup Iteration  24: 114.073 ops/s
# Warmup Iteration  25: 106.363 ops/s
# Warmup Iteration  26: 102.070 ops/s
# Warmup Iteration  27: 102.297 ops/s
# Warmup Iteration  28: 101.978 ops/s
# Warmup Iteration  29: 102.430 ops/s
# Warmup Iteration  30: 102.531 ops/s
Iteration   1: 102.981 ops/s
Iteration   2: 102.691 ops/s
Iteration   3: 102.552 ops/s
Iteration   4: 102.280 ops/s
Iteration   5: 102.163 ops/s
Iteration   6: 101.192 ops/s
Iteration   7: 102.529 ops/s
Iteration   8: 102.752 ops/s
Iteration   9: 102.012 ops/s
Iteration  10: 102.276 ops/s
Iteration  11: 102.337 ops/s
Iteration  12: 101.495 ops/s
Iteration  13: 101.471 ops/s
Iteration  14: 101.270 ops/s
Iteration  15: 101.729 ops/s
Iteration  16: 102.870 ops/s
Iteration  17: 101.554 ops/s
Iteration  18: 102.645 ops/s
Iteration  19: 102.079 ops/s
Iteration  20: 103.067 ops/s
Iteration  21: 102.592 ops/s
Iteration  22: 101.157 ops/s
Iteration  23: 101.818 ops/s
Iteration  24: 102.219 ops/s
Iteration  25: 102.642 ops/s
Iteration  26: 101.484 ops/s
Iteration  27: 102.872 ops/s
Iteration  28: 102.436 ops/s
Iteration  29: 103.047 ops/s
Iteration  30: 101.436 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_sumFloatConsistentRounding1":
  102.188 ±(99.9%) 0.399 ops/s [Average]
  (min, avg, max) = (101.157, 102.188, 103.067), stdev = 0.596
  CI (99.9%): [101.790, 102.587] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt    Score   Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_sumFloatConsistentRounding1  thrpt   30  102.188 ± 0.399  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_sumFloatConsistentRounding2$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_sumFloatConsistentRounding2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 77.365 ops/s
# Warmup Iteration   2: 92.127 ops/s
# Warmup Iteration   3: 118.831 ops/s
# Warmup Iteration   4: 120.118 ops/s
# Warmup Iteration   5: 119.245 ops/s
# Warmup Iteration   6: 119.937 ops/s
# Warmup Iteration   7: 120.060 ops/s
# Warmup Iteration   8: 120.254 ops/s
# Warmup Iteration   9: 117.108 ops/s
# Warmup Iteration  10: 106.075 ops/s
# Warmup Iteration  11: 120.071 ops/s
# Warmup Iteration  12: 120.310 ops/s
# Warmup Iteration  13: 120.253 ops/s
# Warmup Iteration  14: 120.411 ops/s
# Warmup Iteration  15: 119.764 ops/s
# Warmup Iteration  16: 119.954 ops/s
# Warmup Iteration  17: 120.461 ops/s
# Warmup Iteration  18: 120.103 ops/s
# Warmup Iteration  19: 119.693 ops/s
# Warmup Iteration  20: 120.541 ops/s
# Warmup Iteration  21: 119.593 ops/s
# Warmup Iteration  22: 120.296 ops/s
# Warmup Iteration  23: 119.608 ops/s
# Warmup Iteration  24: 114.694 ops/s
# Warmup Iteration  25: 114.247 ops/s
# Warmup Iteration  26: 114.047 ops/s
# Warmup Iteration  27: 114.660 ops/s
# Warmup Iteration  28: 113.900 ops/s
# Warmup Iteration  29: 114.121 ops/s
# Warmup Iteration  30: 113.976 ops/s
Iteration   1: 114.113 ops/s
Iteration   2: 115.700 ops/s
Iteration   3: 114.710 ops/s
Iteration   4: 113.493 ops/s
Iteration   5: 113.599 ops/s
Iteration   6: 114.607 ops/s
Iteration   7: 114.456 ops/s
Iteration   8: 113.894 ops/s
Iteration   9: 113.760 ops/s
Iteration  10: 113.921 ops/s
Iteration  11: 114.416 ops/s
Iteration  12: 114.401 ops/s
Iteration  13: 114.226 ops/s
Iteration  14: 115.350 ops/s
Iteration  15: 114.821 ops/s
Iteration  16: 113.942 ops/s
Iteration  17: 114.347 ops/s
Iteration  18: 113.747 ops/s
Iteration  19: 114.294 ops/s
Iteration  20: 112.905 ops/s
Iteration  21: 114.567 ops/s
Iteration  22: 114.699 ops/s
Iteration  23: 114.371 ops/s
Iteration  24: 114.518 ops/s
Iteration  25: 114.707 ops/s
Iteration  26: 113.908 ops/s
Iteration  27: 114.543 ops/s
Iteration  28: 114.493 ops/s
Iteration  29: 114.056 ops/s
Iteration  30: 114.638 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_sumFloatConsistentRounding2":
  114.307 ±(99.9%) 0.366 ops/s [Average]
  (min, avg, max) = (112.905, 114.307, 115.700), stdev = 0.547
  CI (99.9%): [113.941, 114.672] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt    Score   Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_sumFloatConsistentRounding2  thrpt   30  114.307 ± 0.366  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_sumInteger$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_sumInteger

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 820811.083 ops/s
# Warmup Iteration   2: 1420307.497 ops/s
# Warmup Iteration   3: 1685169.049 ops/s
# Warmup Iteration   4: 1689803.098 ops/s
# Warmup Iteration   5: 1695428.514 ops/s
# Warmup Iteration   6: 1369440.675 ops/s
# Warmup Iteration   7: 1694117.486 ops/s
# Warmup Iteration   8: 1696644.245 ops/s
# Warmup Iteration   9: 1696386.695 ops/s
# Warmup Iteration  10: 1695496.567 ops/s
# Warmup Iteration  11: 1693797.070 ops/s
# Warmup Iteration  12: 1696845.058 ops/s
# Warmup Iteration  13: 1695091.219 ops/s
# Warmup Iteration  14: 1694217.024 ops/s
# Warmup Iteration  15: 1694784.439 ops/s
# Warmup Iteration  16: 1694395.205 ops/s
# Warmup Iteration  17: 1688274.949 ops/s
# Warmup Iteration  18: 1690567.150 ops/s
# Warmup Iteration  19: 1691062.280 ops/s
# Warmup Iteration  20: 1692424.597 ops/s
# Warmup Iteration  21: 1694467.634 ops/s
# Warmup Iteration  22: 1694205.951 ops/s
# Warmup Iteration  23: 1693218.530 ops/s
# Warmup Iteration  24: 1691843.361 ops/s
# Warmup Iteration  25: 1693276.794 ops/s
# Warmup Iteration  26: 1693301.347 ops/s
# Warmup Iteration  27: 1696427.734 ops/s
# Warmup Iteration  28: 1695571.095 ops/s
# Warmup Iteration  29: 1689335.846 ops/s
# Warmup Iteration  30: 1692847.497 ops/s
Iteration   1: 1695581.790 ops/s
Iteration   2: 1695346.205 ops/s
Iteration   3: 1697298.548 ops/s
Iteration   4: 1693317.645 ops/s
Iteration   5: 1694099.005 ops/s
Iteration   6: 1690796.303 ops/s
Iteration   7: 1693743.093 ops/s
Iteration   8: 1695468.424 ops/s
Iteration   9: 1694534.563 ops/s
Iteration  10: 1685085.441 ops/s
Iteration  11: 1694793.549 ops/s
Iteration  12: 1696733.420 ops/s
Iteration  13: 1686899.464 ops/s
Iteration  14: 1696858.211 ops/s
Iteration  15: 1690136.064 ops/s
Iteration  16: 1696991.251 ops/s
Iteration  17: 1689521.511 ops/s
Iteration  18: 1697540.360 ops/s
Iteration  19: 1691479.432 ops/s
Iteration  20: 1687893.909 ops/s
Iteration  21: 1697571.456 ops/s
Iteration  22: 1692292.245 ops/s
Iteration  23: 1695979.177 ops/s
Iteration  24: 1694964.868 ops/s
Iteration  25: 1694261.420 ops/s
Iteration  26: 1690525.613 ops/s
Iteration  27: 1687704.509 ops/s
Iteration  28: 1691673.662 ops/s
Iteration  29: 1696644.352 ops/s
Iteration  30: 1699894.086 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_sumInteger":
  1693520.986 ±(99.9%) 2441.473 ops/s [Average]
  (min, avg, max) = (1685085.441, 1693520.986, 1699894.086), stdev = 3654.282
  CI (99.9%): [1691079.513, 1695962.459] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_sumInteger  thrpt   30  1693520.986 ± 2441.473  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_sumLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_sumLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 825103.269 ops/s
# Warmup Iteration   2: 1460253.526 ops/s
# Warmup Iteration   3: 1713261.126 ops/s
# Warmup Iteration   4: 1719765.278 ops/s
# Warmup Iteration   5: 1725002.098 ops/s
# Warmup Iteration   6: 1390398.612 ops/s
# Warmup Iteration   7: 1725146.678 ops/s
# Warmup Iteration   8: 1722898.600 ops/s
# Warmup Iteration   9: 1727050.881 ops/s
# Warmup Iteration  10: 1725105.524 ops/s
# Warmup Iteration  11: 1722719.672 ops/s
# Warmup Iteration  12: 1720693.497 ops/s
# Warmup Iteration  13: 1724810.320 ops/s
# Warmup Iteration  14: 1727802.603 ops/s
# Warmup Iteration  15: 1726908.747 ops/s
# Warmup Iteration  16: 1724779.540 ops/s
# Warmup Iteration  17: 1721344.151 ops/s
# Warmup Iteration  18: 1725308.468 ops/s
# Warmup Iteration  19: 1721861.729 ops/s
# Warmup Iteration  20: 1723598.753 ops/s
# Warmup Iteration  21: 1726445.844 ops/s
# Warmup Iteration  22: 1721663.495 ops/s
# Warmup Iteration  23: 1723775.760 ops/s
# Warmup Iteration  24: 1725304.739 ops/s
# Warmup Iteration  25: 1720318.747 ops/s
# Warmup Iteration  26: 1724298.004 ops/s
# Warmup Iteration  27: 1724123.486 ops/s
# Warmup Iteration  28: 1723555.571 ops/s
# Warmup Iteration  29: 1723558.989 ops/s
# Warmup Iteration  30: 1727636.197 ops/s
Iteration   1: 1723788.696 ops/s
Iteration   2: 1727445.801 ops/s
Iteration   3: 1725414.844 ops/s
Iteration   4: 1723547.291 ops/s
Iteration   5: 1721356.248 ops/s
Iteration   6: 1725938.916 ops/s
Iteration   7: 1718125.888 ops/s
Iteration   8: 1725399.114 ops/s
Iteration   9: 1730726.185 ops/s
Iteration  10: 1721122.270 ops/s
Iteration  11: 1721733.972 ops/s
Iteration  12: 1708285.684 ops/s
Iteration  13: 1698459.727 ops/s
Iteration  14: 1719839.608 ops/s
Iteration  15: 1727510.191 ops/s
Iteration  16: 1725310.188 ops/s
Iteration  17: 1723272.872 ops/s
Iteration  18: 1727815.751 ops/s
Iteration  19: 1716988.389 ops/s
Iteration  20: 1729528.982 ops/s
Iteration  21: 1726918.825 ops/s
Iteration  22: 1720558.316 ops/s
Iteration  23: 1723665.578 ops/s
Iteration  24: 1726691.100 ops/s
Iteration  25: 1731024.776 ops/s
Iteration  26: 1723599.712 ops/s
Iteration  27: 1729440.471 ops/s
Iteration  28: 1728024.150 ops/s
Iteration  29: 1729143.736 ops/s
Iteration  30: 1718296.602 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_sumLong":
  1723299.129 ±(99.9%) 4495.000 ops/s [Average]
  (min, avg, max) = (1698459.727, 1723299.129, 1731024.776), stdev = 6727.905
  CI (99.9%): [1718804.129, 1727794.129] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_sumLong  thrpt   30  1723299.129 ± 4495.000  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_summarizeDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_summarizeDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1849175.775 ops/s
# Warmup Iteration   2: 3508990.298 ops/s
# Warmup Iteration   3: 3919160.782 ops/s
# Warmup Iteration   4: 3951952.587 ops/s
# Warmup Iteration   5: 3345751.275 ops/s
# Warmup Iteration   6: 3791488.496 ops/s
# Warmup Iteration   7: 3944297.442 ops/s
# Warmup Iteration   8: 3954807.927 ops/s
# Warmup Iteration   9: 3945595.583 ops/s
# Warmup Iteration  10: 3942024.887 ops/s
# Warmup Iteration  11: 3946768.610 ops/s
# Warmup Iteration  12: 3944659.020 ops/s
# Warmup Iteration  13: 3947092.915 ops/s
# Warmup Iteration  14: 3947938.486 ops/s
# Warmup Iteration  15: 3949239.078 ops/s
# Warmup Iteration  16: 3951637.144 ops/s
# Warmup Iteration  17: 3957245.614 ops/s
# Warmup Iteration  18: 3947017.587 ops/s
# Warmup Iteration  19: 3949749.952 ops/s
# Warmup Iteration  20: 3950932.207 ops/s
# Warmup Iteration  21: 3946976.930 ops/s
# Warmup Iteration  22: 3955302.686 ops/s
# Warmup Iteration  23: 3947595.220 ops/s
# Warmup Iteration  24: 3951775.041 ops/s
# Warmup Iteration  25: 3960304.486 ops/s
# Warmup Iteration  26: 3954746.169 ops/s
# Warmup Iteration  27: 3958100.608 ops/s
# Warmup Iteration  28: 3951961.430 ops/s
# Warmup Iteration  29: 3955212.339 ops/s
# Warmup Iteration  30: 3944477.527 ops/s
Iteration   1: 3962765.681 ops/s
Iteration   2: 3948364.825 ops/s
Iteration   3: 3959995.730 ops/s
Iteration   4: 3953059.582 ops/s
Iteration   5: 3926156.580 ops/s
Iteration   6: 3953318.488 ops/s
Iteration   7: 3946634.942 ops/s
Iteration   8: 3956498.302 ops/s
Iteration   9: 3962869.409 ops/s
Iteration  10: 3959886.009 ops/s
Iteration  11: 3954538.029 ops/s
Iteration  12: 3951340.138 ops/s
Iteration  13: 3952395.564 ops/s
Iteration  14: 3956636.742 ops/s
Iteration  15: 3945099.979 ops/s
Iteration  16: 3949377.751 ops/s
Iteration  17: 3950202.509 ops/s
Iteration  18: 3953297.441 ops/s
Iteration  19: 3954660.508 ops/s
Iteration  20: 3959103.500 ops/s
Iteration  21: 3953365.352 ops/s
Iteration  22: 3950675.668 ops/s
Iteration  23: 3957334.843 ops/s
Iteration  24: 3960539.345 ops/s
Iteration  25: 3951008.856 ops/s
Iteration  26: 3951036.447 ops/s
Iteration  27: 3943051.624 ops/s
Iteration  28: 3953597.285 ops/s
Iteration  29: 3936956.895 ops/s
Iteration  30: 3954171.545 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_summarizeDouble":
  3952264.652 ±(99.9%) 5050.328 ops/s [Average]
  (min, avg, max) = (3926156.580, 3952264.652, 3962869.409), stdev = 7559.094
  CI (99.9%): [3947214.324, 3957314.980] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_summarizeDouble  thrpt   30  3952264.652 ± 5050.328  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_summarizeFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_summarizeFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1855009.366 ops/s
# Warmup Iteration   2: 3514297.662 ops/s
# Warmup Iteration   3: 3926292.993 ops/s
# Warmup Iteration   4: 3956951.781 ops/s
# Warmup Iteration   5: 3338790.983 ops/s
# Warmup Iteration   6: 3813821.109 ops/s
# Warmup Iteration   7: 3962330.587 ops/s
# Warmup Iteration   8: 3956030.455 ops/s
# Warmup Iteration   9: 3968057.717 ops/s
# Warmup Iteration  10: 3955089.061 ops/s
# Warmup Iteration  11: 3937518.976 ops/s
# Warmup Iteration  12: 3970541.493 ops/s
# Warmup Iteration  13: 3962091.680 ops/s
# Warmup Iteration  14: 3964430.012 ops/s
# Warmup Iteration  15: 3962939.835 ops/s
# Warmup Iteration  16: 3957958.478 ops/s
# Warmup Iteration  17: 3945715.699 ops/s
# Warmup Iteration  18: 3953786.839 ops/s
# Warmup Iteration  19: 3961842.708 ops/s
# Warmup Iteration  20: 3953778.383 ops/s
# Warmup Iteration  21: 3961459.832 ops/s
# Warmup Iteration  22: 3958555.974 ops/s
# Warmup Iteration  23: 3951764.354 ops/s
# Warmup Iteration  24: 3959041.514 ops/s
# Warmup Iteration  25: 3960201.657 ops/s
# Warmup Iteration  26: 3960316.674 ops/s
# Warmup Iteration  27: 3948786.122 ops/s
# Warmup Iteration  28: 3962018.640 ops/s
# Warmup Iteration  29: 3963485.039 ops/s
# Warmup Iteration  30: 3959852.675 ops/s
Iteration   1: 3967151.016 ops/s
Iteration   2: 3957424.385 ops/s
Iteration   3: 3957668.330 ops/s
Iteration   4: 3950534.271 ops/s
Iteration   5: 3960826.813 ops/s
Iteration   6: 3963316.481 ops/s
Iteration   7: 3957341.055 ops/s
Iteration   8: 3933862.161 ops/s
Iteration   9: 3965624.660 ops/s
Iteration  10: 3959808.944 ops/s
Iteration  11: 3956409.638 ops/s
Iteration  12: 3964026.059 ops/s
Iteration  13: 3950297.038 ops/s
Iteration  14: 3959106.718 ops/s
Iteration  15: 3948233.580 ops/s
Iteration  16: 3956746.747 ops/s
Iteration  17: 3959749.702 ops/s
Iteration  18: 3953531.717 ops/s
Iteration  19: 3948841.604 ops/s
Iteration  20: 3963448.051 ops/s
Iteration  21: 3961712.623 ops/s
Iteration  22: 3962924.985 ops/s
Iteration  23: 3958365.973 ops/s
Iteration  24: 3951954.540 ops/s
Iteration  25: 3942968.175 ops/s
Iteration  26: 3963619.397 ops/s
Iteration  27: 3955358.346 ops/s
Iteration  28: 3937682.354 ops/s
Iteration  29: 3961322.971 ops/s
Iteration  30: 3959339.815 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_summarizeFloat":
  3956306.605 ±(99.9%) 5310.874 ops/s [Average]
  (min, avg, max) = (3933862.161, 3956306.605, 3967151.016), stdev = 7949.067
  CI (99.9%): [3950995.731, 3961617.479] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_summarizeFloat  thrpt   30  3956306.605 ± 5310.874  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_summarizeInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_summarizeInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2089399.047 ops/s
# Warmup Iteration   2: 4186482.680 ops/s
# Warmup Iteration   3: 4507582.842 ops/s
# Warmup Iteration   4: 4540154.878 ops/s
# Warmup Iteration   5: 3700787.543 ops/s
# Warmup Iteration   6: 4545538.255 ops/s
# Warmup Iteration   7: 4550036.437 ops/s
# Warmup Iteration   8: 4553913.523 ops/s
# Warmup Iteration   9: 4551822.953 ops/s
# Warmup Iteration  10: 4557971.793 ops/s
# Warmup Iteration  11: 4553925.852 ops/s
# Warmup Iteration  12: 4552722.017 ops/s
# Warmup Iteration  13: 4553495.681 ops/s
# Warmup Iteration  14: 4537402.541 ops/s
# Warmup Iteration  15: 4554669.699 ops/s
# Warmup Iteration  16: 4553020.929 ops/s
# Warmup Iteration  17: 4540434.050 ops/s
# Warmup Iteration  18: 4545598.032 ops/s
# Warmup Iteration  19: 4527472.552 ops/s
# Warmup Iteration  20: 4549401.703 ops/s
# Warmup Iteration  21: 4552753.392 ops/s
# Warmup Iteration  22: 4550390.103 ops/s
# Warmup Iteration  23: 4549720.690 ops/s
# Warmup Iteration  24: 4549407.129 ops/s
# Warmup Iteration  25: 4552697.368 ops/s
# Warmup Iteration  26: 4557263.905 ops/s
# Warmup Iteration  27: 4552790.391 ops/s
# Warmup Iteration  28: 4550791.349 ops/s
# Warmup Iteration  29: 4547577.048 ops/s
# Warmup Iteration  30: 4548142.605 ops/s
Iteration   1: 4547644.218 ops/s
Iteration   2: 4533328.941 ops/s
Iteration   3: 4542672.454 ops/s
Iteration   4: 4564978.384 ops/s
Iteration   5: 4556500.252 ops/s
Iteration   6: 4555534.998 ops/s
Iteration   7: 4548965.379 ops/s
Iteration   8: 4551946.457 ops/s
Iteration   9: 4549221.155 ops/s
Iteration  10: 4552462.822 ops/s
Iteration  11: 4553269.407 ops/s
Iteration  12: 4560261.679 ops/s
Iteration  13: 4535480.972 ops/s
Iteration  14: 4551825.580 ops/s
Iteration  15: 4564073.535 ops/s
Iteration  16: 4563547.509 ops/s
Iteration  17: 4544951.926 ops/s
Iteration  18: 4559708.744 ops/s
Iteration  19: 4559466.262 ops/s
Iteration  20: 4539190.221 ops/s
Iteration  21: 4548406.080 ops/s
Iteration  22: 4566590.804 ops/s
Iteration  23: 4544174.720 ops/s
Iteration  24: 4552779.858 ops/s
Iteration  25: 4547921.883 ops/s
Iteration  26: 4561820.170 ops/s
Iteration  27: 4537776.862 ops/s
Iteration  28: 4548534.038 ops/s
Iteration  29: 4536453.381 ops/s
Iteration  30: 4556022.030 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_summarizeInt":
  4551183.691 ±(99.9%) 6174.244 ops/s [Average]
  (min, avg, max) = (4533328.941, 4551183.691, 4566590.804), stdev = 9241.319
  CI (99.9%): [4545009.447, 4557357.935] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_summarizeInt  thrpt   30  4551183.691 ± 6174.244  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_summarizeLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_summarizeLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1934541.575 ops/s
# Warmup Iteration   2: 3750804.677 ops/s
# Warmup Iteration   3: 4075858.265 ops/s
# Warmup Iteration   4: 4141027.913 ops/s
# Warmup Iteration   5: 3388247.140 ops/s
# Warmup Iteration   6: 4097214.276 ops/s
# Warmup Iteration   7: 4132287.778 ops/s
# Warmup Iteration   8: 4145763.678 ops/s
# Warmup Iteration   9: 4139080.360 ops/s
# Warmup Iteration  10: 4146562.149 ops/s
# Warmup Iteration  11: 4146681.253 ops/s
# Warmup Iteration  12: 4132620.351 ops/s
# Warmup Iteration  13: 4137005.232 ops/s
# Warmup Iteration  14: 4142345.038 ops/s
# Warmup Iteration  15: 4130951.400 ops/s
# Warmup Iteration  16: 4134990.634 ops/s
# Warmup Iteration  17: 4145501.375 ops/s
# Warmup Iteration  18: 4143185.462 ops/s
# Warmup Iteration  19: 4146193.277 ops/s
# Warmup Iteration  20: 4149166.130 ops/s
# Warmup Iteration  21: 4145774.393 ops/s
# Warmup Iteration  22: 4138779.965 ops/s
# Warmup Iteration  23: 4132263.560 ops/s
# Warmup Iteration  24: 4134192.515 ops/s
# Warmup Iteration  25: 4134517.416 ops/s
# Warmup Iteration  26: 4143235.146 ops/s
# Warmup Iteration  27: 4143854.839 ops/s
# Warmup Iteration  28: 4143677.311 ops/s
# Warmup Iteration  29: 4139733.113 ops/s
# Warmup Iteration  30: 4143708.049 ops/s
Iteration   1: 4151463.198 ops/s
Iteration   2: 4140618.172 ops/s
Iteration   3: 4135665.839 ops/s
Iteration   4: 4135025.056 ops/s
Iteration   5: 4143481.944 ops/s
Iteration   6: 4141058.437 ops/s
Iteration   7: 4138218.805 ops/s
Iteration   8: 4130791.385 ops/s
Iteration   9: 4121656.151 ops/s
Iteration  10: 4149448.152 ops/s
Iteration  11: 4139303.240 ops/s
Iteration  12: 4147212.664 ops/s
Iteration  13: 4132193.572 ops/s
Iteration  14: 4134368.995 ops/s
Iteration  15: 4141166.309 ops/s
Iteration  16: 4143957.500 ops/s
Iteration  17: 4126892.787 ops/s
Iteration  18: 4138514.094 ops/s
Iteration  19: 4152160.011 ops/s
Iteration  20: 4136696.058 ops/s
Iteration  21: 4140940.121 ops/s
Iteration  22: 4157128.752 ops/s
Iteration  23: 4139779.189 ops/s
Iteration  24: 4143397.459 ops/s
Iteration  25: 4144550.011 ops/s
Iteration  26: 4142248.541 ops/s
Iteration  27: 4155038.736 ops/s
Iteration  28: 4138643.806 ops/s
Iteration  29: 4128348.017 ops/s
Iteration  30: 4151569.272 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_summarizeLong":
  4140717.876 ±(99.9%) 5563.691 ops/s [Average]
  (min, avg, max) = (4121656.151, 4140717.876, 4157128.752), stdev = 8327.471
  CI (99.9%): [4135154.185, 4146281.567] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_summarizeLong  thrpt   30  4140717.876 ± 5563.691  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_tap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_tap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 686432.663 ops/s
# Warmup Iteration   2: 1181119.816 ops/s
# Warmup Iteration   3: 1380353.700 ops/s
# Warmup Iteration   4: 1386237.795 ops/s
# Warmup Iteration   5: 1388949.706 ops/s
# Warmup Iteration   6: 1130900.175 ops/s
# Warmup Iteration   7: 1391205.062 ops/s
# Warmup Iteration   8: 1390147.223 ops/s
# Warmup Iteration   9: 1392410.899 ops/s
# Warmup Iteration  10: 1387566.348 ops/s
# Warmup Iteration  11: 1391865.560 ops/s
# Warmup Iteration  12: 1392692.933 ops/s
# Warmup Iteration  13: 1388305.867 ops/s
# Warmup Iteration  14: 1388526.787 ops/s
# Warmup Iteration  15: 1390571.548 ops/s
# Warmup Iteration  16: 1392670.351 ops/s
# Warmup Iteration  17: 1391666.665 ops/s
# Warmup Iteration  18: 1393086.648 ops/s
# Warmup Iteration  19: 1394817.911 ops/s
# Warmup Iteration  20: 1393441.133 ops/s
# Warmup Iteration  21: 1392142.010 ops/s
# Warmup Iteration  22: 1390132.924 ops/s
# Warmup Iteration  23: 1388497.646 ops/s
# Warmup Iteration  24: 1392776.328 ops/s
# Warmup Iteration  25: 1393719.218 ops/s
# Warmup Iteration  26: 1391255.293 ops/s
# Warmup Iteration  27: 1391791.052 ops/s
# Warmup Iteration  28: 1388578.874 ops/s
# Warmup Iteration  29: 1390811.501 ops/s
# Warmup Iteration  30: 1391082.924 ops/s
Iteration   1: 1390238.555 ops/s
Iteration   2: 1397215.027 ops/s
Iteration   3: 1389522.420 ops/s
Iteration   4: 1385185.334 ops/s
Iteration   5: 1391350.114 ops/s
Iteration   6: 1390128.415 ops/s
Iteration   7: 1386284.455 ops/s
Iteration   8: 1389338.774 ops/s
Iteration   9: 1386714.890 ops/s
Iteration  10: 1381472.365 ops/s
Iteration  11: 1394947.777 ops/s
Iteration  12: 1370789.956 ops/s
Iteration  13: 1388662.090 ops/s
Iteration  14: 1395703.141 ops/s
Iteration  15: 1392744.310 ops/s
Iteration  16: 1388020.416 ops/s
Iteration  17: 1389256.191 ops/s
Iteration  18: 1394000.608 ops/s
Iteration  19: 1391675.990 ops/s
Iteration  20: 1394753.512 ops/s
Iteration  21: 1391352.956 ops/s
Iteration  22: 1393161.964 ops/s
Iteration  23: 1394997.640 ops/s
Iteration  24: 1392511.719 ops/s
Iteration  25: 1390817.244 ops/s
Iteration  26: 1391323.093 ops/s
Iteration  27: 1390233.681 ops/s
Iteration  28: 1392297.114 ops/s
Iteration  29: 1393227.634 ops/s
Iteration  30: 1392956.812 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_tap":
  1390362.807 ±(99.9%) 3334.631 ops/s [Average]
  (min, avg, max) = (1370789.956, 1390362.807, 1397215.027), stdev = 4991.119
  CI (99.9%): [1387028.175, 1393697.438] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_tap  thrpt   30  1390362.807 ± 3334.631  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_testNewBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_testNewBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13073.000 ops/s
# Warmup Iteration   2: 20682.715 ops/s
# Warmup Iteration   3: 24295.681 ops/s
# Warmup Iteration   4: 24317.127 ops/s
# Warmup Iteration   5: 24454.013 ops/s
# Warmup Iteration   6: 24412.230 ops/s
# Warmup Iteration   7: 20231.922 ops/s
# Warmup Iteration   8: 24427.146 ops/s
# Warmup Iteration   9: 24443.829 ops/s
# Warmup Iteration  10: 24438.896 ops/s
# Warmup Iteration  11: 24429.513 ops/s
# Warmup Iteration  12: 24430.714 ops/s
# Warmup Iteration  13: 24378.600 ops/s
# Warmup Iteration  14: 24443.182 ops/s
# Warmup Iteration  15: 24147.758 ops/s
# Warmup Iteration  16: 24349.817 ops/s
# Warmup Iteration  17: 24474.997 ops/s
# Warmup Iteration  18: 24556.473 ops/s
# Warmup Iteration  19: 24497.961 ops/s
# Warmup Iteration  20: 24516.461 ops/s
# Warmup Iteration  21: 24507.848 ops/s
# Warmup Iteration  22: 24466.592 ops/s
# Warmup Iteration  23: 24443.123 ops/s
# Warmup Iteration  24: 24470.333 ops/s
# Warmup Iteration  25: 24426.878 ops/s
# Warmup Iteration  26: 24422.971 ops/s
# Warmup Iteration  27: 24478.591 ops/s
# Warmup Iteration  28: 24473.285 ops/s
# Warmup Iteration  29: 24533.511 ops/s
# Warmup Iteration  30: 24511.549 ops/s
Iteration   1: 24575.199 ops/s
Iteration   2: 24477.700 ops/s
Iteration   3: 24485.990 ops/s
Iteration   4: 24531.104 ops/s
Iteration   5: 24524.496 ops/s
Iteration   6: 24520.245 ops/s
Iteration   7: 24506.836 ops/s
Iteration   8: 24486.294 ops/s
Iteration   9: 24525.009 ops/s
Iteration  10: 24461.998 ops/s
Iteration  11: 24458.848 ops/s
Iteration  12: 24392.268 ops/s
Iteration  13: 24516.777 ops/s
Iteration  14: 24473.294 ops/s
Iteration  15: 24543.882 ops/s
Iteration  16: 24426.539 ops/s
Iteration  17: 24495.380 ops/s
Iteration  18: 24421.175 ops/s
Iteration  19: 24318.879 ops/s
Iteration  20: 24530.493 ops/s
Iteration  21: 24487.767 ops/s
Iteration  22: 24530.203 ops/s
Iteration  23: 24489.512 ops/s
Iteration  24: 24385.775 ops/s
Iteration  25: 24488.622 ops/s
Iteration  26: 24539.957 ops/s
Iteration  27: 24437.764 ops/s
Iteration  28: 24438.321 ops/s
Iteration  29: 24458.724 ops/s
Iteration  30: 24475.448 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_testNewBag":
  24480.150 ±(99.9%) 36.452 ops/s [Average]
  (min, avg, max) = (24318.879, 24480.150, 24575.199), stdev = 54.559
  CI (99.9%): [24443.698, 24516.602] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt      Score    Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_testNewBag  thrpt   30  24480.150 ± 36.452  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_testNewCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_testNewCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3518282.843 ops/s
# Warmup Iteration   2: 7990797.216 ops/s
# Warmup Iteration   3: 8039864.586 ops/s
# Warmup Iteration   4: 6662607.064 ops/s
# Warmup Iteration   5: 8042504.371 ops/s
# Warmup Iteration   6: 8042697.614 ops/s
# Warmup Iteration   7: 8046100.789 ops/s
# Warmup Iteration   8: 8048914.810 ops/s
# Warmup Iteration   9: 8041901.268 ops/s
# Warmup Iteration  10: 8038691.535 ops/s
# Warmup Iteration  11: 8030910.793 ops/s
# Warmup Iteration  12: 8048436.048 ops/s
# Warmup Iteration  13: 8043064.349 ops/s
# Warmup Iteration  14: 8027177.393 ops/s
# Warmup Iteration  15: 8043944.972 ops/s
# Warmup Iteration  16: 8045137.845 ops/s
# Warmup Iteration  17: 8049410.939 ops/s
# Warmup Iteration  18: 8042072.284 ops/s
# Warmup Iteration  19: 8054574.523 ops/s
# Warmup Iteration  20: 8055575.543 ops/s
# Warmup Iteration  21: 8031868.178 ops/s
# Warmup Iteration  22: 8049351.559 ops/s
# Warmup Iteration  23: 8046716.400 ops/s
# Warmup Iteration  24: 8029832.742 ops/s
# Warmup Iteration  25: 8049094.417 ops/s
# Warmup Iteration  26: 8030862.602 ops/s
# Warmup Iteration  27: 8053406.034 ops/s
# Warmup Iteration  28: 8043102.925 ops/s
# Warmup Iteration  29: 8049712.490 ops/s
# Warmup Iteration  30: 8031475.231 ops/s
Iteration   1: 8031148.344 ops/s
Iteration   2: 8059798.287 ops/s
Iteration   3: 8031305.268 ops/s
Iteration   4: 8046394.950 ops/s
Iteration   5: 8061289.237 ops/s
Iteration   6: 8050000.605 ops/s
Iteration   7: 8050081.635 ops/s
Iteration   8: 8046982.396 ops/s
Iteration   9: 8046928.798 ops/s
Iteration  10: 8048075.084 ops/s
Iteration  11: 8047318.811 ops/s
Iteration  12: 8043863.055 ops/s
Iteration  13: 8036509.988 ops/s
Iteration  14: 8059974.621 ops/s
Iteration  15: 8052060.427 ops/s
Iteration  16: 8056965.623 ops/s
Iteration  17: 8036428.208 ops/s
Iteration  18: 8024631.062 ops/s
Iteration  19: 8041149.932 ops/s
Iteration  20: 8055732.168 ops/s
Iteration  21: 8060657.234 ops/s
Iteration  22: 8034193.081 ops/s
Iteration  23: 8038315.492 ops/s
Iteration  24: 8063672.652 ops/s
Iteration  25: 8055599.585 ops/s
Iteration  26: 8037554.647 ops/s
Iteration  27: 8045876.591 ops/s
Iteration  28: 8051209.428 ops/s
Iteration  29: 8045092.501 ops/s
Iteration  30: 8045179.065 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_testNewCollection":
  8046799.626 ±(99.9%) 6696.421 ops/s [Average]
  (min, avg, max) = (8024631.062, 8046799.626, 8063672.652), stdev = 10022.888
  CI (99.9%): [8040103.205, 8053496.047] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_testNewCollection  thrpt   30  8046799.626 ± 6696.421  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_testSize$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_testSize

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1852943.120 ops/s
# Warmup Iteration   2: 3510742.002 ops/s
# Warmup Iteration   3: 3852263.398 ops/s
# Warmup Iteration   4: 3885183.996 ops/s
# Warmup Iteration   5: 3244626.487 ops/s
# Warmup Iteration   6: 3787635.885 ops/s
# Warmup Iteration   7: 3888332.781 ops/s
# Warmup Iteration   8: 3886360.230 ops/s
# Warmup Iteration   9: 3881040.074 ops/s
# Warmup Iteration  10: 3869336.927 ops/s
# Warmup Iteration  11: 3874220.645 ops/s
# Warmup Iteration  12: 3877496.288 ops/s
# Warmup Iteration  13: 3870944.026 ops/s
# Warmup Iteration  14: 3880668.146 ops/s
# Warmup Iteration  15: 3864536.376 ops/s
# Warmup Iteration  16: 3870930.659 ops/s
# Warmup Iteration  17: 3880114.006 ops/s
# Warmup Iteration  18: 3879950.562 ops/s
# Warmup Iteration  19: 3875080.568 ops/s
# Warmup Iteration  20: 3871692.373 ops/s
# Warmup Iteration  21: 3879501.718 ops/s
# Warmup Iteration  22: 3883570.466 ops/s
# Warmup Iteration  23: 3875670.813 ops/s
# Warmup Iteration  24: 3871168.305 ops/s
# Warmup Iteration  25: 3874901.971 ops/s
# Warmup Iteration  26: 3886096.631 ops/s
# Warmup Iteration  27: 3879985.522 ops/s
# Warmup Iteration  28: 3870271.418 ops/s
# Warmup Iteration  29: 3880960.538 ops/s
# Warmup Iteration  30: 3869382.464 ops/s
Iteration   1: 3852273.673 ops/s
Iteration   2: 3872190.229 ops/s
Iteration   3: 3884006.886 ops/s
Iteration   4: 3882270.060 ops/s
Iteration   5: 3881703.769 ops/s
Iteration   6: 3867808.551 ops/s
Iteration   7: 3869204.779 ops/s
Iteration   8: 3887825.653 ops/s
Iteration   9: 3884436.110 ops/s
Iteration  10: 3884436.989 ops/s
Iteration  11: 3876858.058 ops/s
Iteration  12: 3878611.911 ops/s
Iteration  13: 3869733.420 ops/s
Iteration  14: 3885605.663 ops/s
Iteration  15: 3885308.838 ops/s
Iteration  16: 3875457.392 ops/s
Iteration  17: 3895036.827 ops/s
Iteration  18: 3873415.433 ops/s
Iteration  19: 3878068.623 ops/s
Iteration  20: 3882557.052 ops/s
Iteration  21: 3881161.433 ops/s
Iteration  22: 3847162.778 ops/s
Iteration  23: 3872747.682 ops/s
Iteration  24: 3875475.533 ops/s
Iteration  25: 3877994.674 ops/s
Iteration  26: 3871238.079 ops/s
Iteration  27: 3877867.964 ops/s
Iteration  28: 3880081.878 ops/s
Iteration  29: 3868118.620 ops/s
Iteration  30: 3877825.864 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_testSize":
  3876549.481 ±(99.9%) 6474.693 ops/s [Average]
  (min, avg, max) = (3847162.778, 3876549.481, 3895036.827), stdev = 9691.017
  CI (99.9%): [3870074.787, 3883024.174] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_testSize  thrpt   30  3876549.481 ± 6474.693  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 552666.706 ops/s
# Warmup Iteration   2: 954968.878 ops/s
# Warmup Iteration   3: 1088776.814 ops/s
# Warmup Iteration   4: 1088427.575 ops/s
# Warmup Iteration   5: 1092855.995 ops/s
# Warmup Iteration   6: 891940.357 ops/s
# Warmup Iteration   7: 1092669.514 ops/s
# Warmup Iteration   8: 1093779.294 ops/s
# Warmup Iteration   9: 1084537.351 ops/s
# Warmup Iteration  10: 1094095.635 ops/s
# Warmup Iteration  11: 1090890.186 ops/s
# Warmup Iteration  12: 1091907.480 ops/s
# Warmup Iteration  13: 1092133.489 ops/s
# Warmup Iteration  14: 1093068.046 ops/s
# Warmup Iteration  15: 1092678.068 ops/s
# Warmup Iteration  16: 1094534.652 ops/s
# Warmup Iteration  17: 1096347.095 ops/s
# Warmup Iteration  18: 1094611.387 ops/s
# Warmup Iteration  19: 1089440.832 ops/s
# Warmup Iteration  20: 1094852.564 ops/s
# Warmup Iteration  21: 1094702.324 ops/s
# Warmup Iteration  22: 1091505.002 ops/s
# Warmup Iteration  23: 1090616.596 ops/s
# Warmup Iteration  24: 1094438.367 ops/s
# Warmup Iteration  25: 1089513.672 ops/s
# Warmup Iteration  26: 1093353.142 ops/s
# Warmup Iteration  27: 1091814.690 ops/s
# Warmup Iteration  28: 1091637.595 ops/s
# Warmup Iteration  29: 1092924.735 ops/s
# Warmup Iteration  30: 1092451.079 ops/s
Iteration   1: 1092992.595 ops/s
Iteration   2: 1094778.989 ops/s
Iteration   3: 1091458.760 ops/s
Iteration   4: 1093044.743 ops/s
Iteration   5: 1091765.339 ops/s
Iteration   6: 1098102.125 ops/s
Iteration   7: 1091752.975 ops/s
Iteration   8: 1091656.903 ops/s
Iteration   9: 1091681.593 ops/s
Iteration  10: 1093143.154 ops/s
Iteration  11: 1096843.491 ops/s
Iteration  12: 1092315.025 ops/s
Iteration  13: 1092913.872 ops/s
Iteration  14: 1092624.732 ops/s
Iteration  15: 1096080.744 ops/s
Iteration  16: 1087475.069 ops/s
Iteration  17: 1087648.391 ops/s
Iteration  18: 1094042.840 ops/s
Iteration  19: 1091729.891 ops/s
Iteration  20: 1096696.820 ops/s
Iteration  21: 1095670.202 ops/s
Iteration  22: 1094286.136 ops/s
Iteration  23: 1095075.556 ops/s
Iteration  24: 1093384.642 ops/s
Iteration  25: 1095044.117 ops/s
Iteration  26: 1092426.787 ops/s
Iteration  27: 1092328.652 ops/s
Iteration  28: 1090720.503 ops/s
Iteration  29: 1094369.704 ops/s
Iteration  30: 1093144.306 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_testToString":
  1093173.289 ±(99.9%) 1584.051 ops/s [Average]
  (min, avg, max) = (1087475.069, 1093173.289, 1098102.125), stdev = 2370.934
  CI (99.9%): [1091589.237, 1094757.340] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_testToString  thrpt   30  1093173.289 ± 1584.051  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 656134.362 ops/s
# Warmup Iteration   2: 1220929.926 ops/s
# Warmup Iteration   3: 1375861.032 ops/s
# Warmup Iteration   4: 1382577.704 ops/s
# Warmup Iteration   5: 1269304.210 ops/s
# Warmup Iteration   6: 1233079.175 ops/s
# Warmup Iteration   7: 1378499.217 ops/s
# Warmup Iteration   8: 1378715.310 ops/s
# Warmup Iteration   9: 1380757.119 ops/s
# Warmup Iteration  10: 1375943.894 ops/s
# Warmup Iteration  11: 1378191.484 ops/s
# Warmup Iteration  12: 1382381.184 ops/s
# Warmup Iteration  13: 1380124.019 ops/s
# Warmup Iteration  14: 1381828.060 ops/s
# Warmup Iteration  15: 1379017.352 ops/s
# Warmup Iteration  16: 1384144.049 ops/s
# Warmup Iteration  17: 1381407.270 ops/s
# Warmup Iteration  18: 1381805.028 ops/s
# Warmup Iteration  19: 1377099.665 ops/s
# Warmup Iteration  20: 1379874.133 ops/s
# Warmup Iteration  21: 1383093.960 ops/s
# Warmup Iteration  22: 1381011.300 ops/s
# Warmup Iteration  23: 1382493.974 ops/s
# Warmup Iteration  24: 1381884.202 ops/s
# Warmup Iteration  25: 1384994.704 ops/s
# Warmup Iteration  26: 1381285.382 ops/s
# Warmup Iteration  27: 1380589.508 ops/s
# Warmup Iteration  28: 1378410.698 ops/s
# Warmup Iteration  29: 1384234.089 ops/s
# Warmup Iteration  30: 1383691.040 ops/s
Iteration   1: 1368293.613 ops/s
Iteration   2: 1384421.795 ops/s
Iteration   3: 1378476.996 ops/s
Iteration   4: 1379266.386 ops/s
Iteration   5: 1372857.240 ops/s
Iteration   6: 1381011.665 ops/s
Iteration   7: 1378492.973 ops/s
Iteration   8: 1382061.213 ops/s
Iteration   9: 1380076.721 ops/s
Iteration  10: 1385228.561 ops/s
Iteration  11: 1381403.624 ops/s
Iteration  12: 1380042.188 ops/s
Iteration  13: 1382770.007 ops/s
Iteration  14: 1381916.436 ops/s
Iteration  15: 1384105.531 ops/s
Iteration  16: 1381147.388 ops/s
Iteration  17: 1382469.754 ops/s
Iteration  18: 1384931.235 ops/s
Iteration  19: 1382155.146 ops/s
Iteration  20: 1378298.115 ops/s
Iteration  21: 1383479.121 ops/s
Iteration  22: 1381447.268 ops/s
Iteration  23: 1385437.375 ops/s
Iteration  24: 1383064.353 ops/s
Iteration  25: 1384793.071 ops/s
Iteration  26: 1380479.837 ops/s
Iteration  27: 1374945.212 ops/s
Iteration  28: 1384102.244 ops/s
Iteration  29: 1382000.179 ops/s
Iteration  30: 1382637.696 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toArray":
  1381060.431 ±(99.9%) 2514.469 ops/s [Average]
  (min, avg, max) = (1368293.613, 1381060.431, 1385437.375), stdev = 3763.540
  CI (99.9%): [1378545.962, 1383574.901] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_toArray  thrpt   30  1381060.431 ± 2514.469  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 499252.375 ops/s
# Warmup Iteration   2: 851932.174 ops/s
# Warmup Iteration   3: 977087.228 ops/s
# Warmup Iteration   4: 980971.172 ops/s
# Warmup Iteration   5: 982525.304 ops/s
# Warmup Iteration   6: 797875.465 ops/s
# Warmup Iteration   7: 980169.278 ops/s
# Warmup Iteration   8: 983566.048 ops/s
# Warmup Iteration   9: 982252.913 ops/s
# Warmup Iteration  10: 979780.329 ops/s
# Warmup Iteration  11: 980757.304 ops/s
# Warmup Iteration  12: 981760.038 ops/s
# Warmup Iteration  13: 982614.005 ops/s
# Warmup Iteration  14: 981910.968 ops/s
# Warmup Iteration  15: 981980.581 ops/s
# Warmup Iteration  16: 982849.721 ops/s
# Warmup Iteration  17: 983126.488 ops/s
# Warmup Iteration  18: 984007.766 ops/s
# Warmup Iteration  19: 982298.725 ops/s
# Warmup Iteration  20: 976973.248 ops/s
# Warmup Iteration  21: 982443.412 ops/s
# Warmup Iteration  22: 982495.696 ops/s
# Warmup Iteration  23: 984136.425 ops/s
# Warmup Iteration  24: 983346.152 ops/s
# Warmup Iteration  25: 982704.562 ops/s
# Warmup Iteration  26: 982544.813 ops/s
# Warmup Iteration  27: 981153.658 ops/s
# Warmup Iteration  28: 980198.249 ops/s
# Warmup Iteration  29: 981779.342 ops/s
# Warmup Iteration  30: 983187.533 ops/s
Iteration   1: 984435.685 ops/s
Iteration   2: 982992.509 ops/s
Iteration   3: 985527.310 ops/s
Iteration   4: 981070.873 ops/s
Iteration   5: 983330.877 ops/s
Iteration   6: 983269.282 ops/s
Iteration   7: 981250.109 ops/s
Iteration   8: 984639.658 ops/s
Iteration   9: 979391.681 ops/s
Iteration  10: 981627.794 ops/s
Iteration  11: 978885.116 ops/s
Iteration  12: 982335.733 ops/s
Iteration  13: 980946.020 ops/s
Iteration  14: 983960.343 ops/s
Iteration  15: 981122.064 ops/s
Iteration  16: 980035.400 ops/s
Iteration  17: 981811.392 ops/s
Iteration  18: 982627.996 ops/s
Iteration  19: 984002.073 ops/s
Iteration  20: 980930.087 ops/s
Iteration  21: 984011.445 ops/s
Iteration  22: 983703.734 ops/s
Iteration  23: 981793.436 ops/s
Iteration  24: 983872.600 ops/s
Iteration  25: 985347.608 ops/s
Iteration  26: 980679.737 ops/s
Iteration  27: 977899.416 ops/s
Iteration  28: 984079.985 ops/s
Iteration  29: 981832.225 ops/s
Iteration  30: 984434.316 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toBag":
  982394.883 ±(99.9%) 1294.831 ops/s [Average]
  (min, avg, max) = (977899.416, 982394.883, 985527.310), stdev = 1938.042
  CI (99.9%): [981100.052, 983689.715] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_toBag  thrpt   30  982394.883 ± 1294.831  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toBiMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toBiMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 102629.751 ops/s
# Warmup Iteration   2: 146525.744 ops/s
# Warmup Iteration   3: 178658.286 ops/s
# Warmup Iteration   4: 180079.683 ops/s
# Warmup Iteration   5: 179964.146 ops/s
# Warmup Iteration   6: 179639.830 ops/s
# Warmup Iteration   7: 176110.051 ops/s
# Warmup Iteration   8: 155196.454 ops/s
# Warmup Iteration   9: 179318.415 ops/s
# Warmup Iteration  10: 180311.978 ops/s
# Warmup Iteration  11: 180304.968 ops/s
# Warmup Iteration  12: 179918.468 ops/s
# Warmup Iteration  13: 179363.831 ops/s
# Warmup Iteration  14: 180028.965 ops/s
# Warmup Iteration  15: 179870.770 ops/s
# Warmup Iteration  16: 179993.734 ops/s
# Warmup Iteration  17: 186619.102 ops/s
# Warmup Iteration  18: 186053.273 ops/s
# Warmup Iteration  19: 186377.896 ops/s
# Warmup Iteration  20: 185084.814 ops/s
# Warmup Iteration  21: 185611.561 ops/s
# Warmup Iteration  22: 186223.641 ops/s
# Warmup Iteration  23: 186286.899 ops/s
# Warmup Iteration  24: 186236.389 ops/s
# Warmup Iteration  25: 186491.725 ops/s
# Warmup Iteration  26: 185750.787 ops/s
# Warmup Iteration  27: 186330.265 ops/s
# Warmup Iteration  28: 186059.327 ops/s
# Warmup Iteration  29: 185892.952 ops/s
# Warmup Iteration  30: 185996.901 ops/s
Iteration   1: 185372.885 ops/s
Iteration   2: 186361.412 ops/s
Iteration   3: 185561.187 ops/s
Iteration   4: 186325.250 ops/s
Iteration   5: 186451.189 ops/s
Iteration   6: 186383.269 ops/s
Iteration   7: 185528.435 ops/s
Iteration   8: 186700.368 ops/s
Iteration   9: 186672.136 ops/s
Iteration  10: 186256.987 ops/s
Iteration  11: 186339.937 ops/s
Iteration  12: 185897.471 ops/s
Iteration  13: 186038.182 ops/s
Iteration  14: 186205.160 ops/s
Iteration  15: 186232.563 ops/s
Iteration  16: 186409.800 ops/s
Iteration  17: 186251.932 ops/s
Iteration  18: 186084.001 ops/s
Iteration  19: 185990.690 ops/s
Iteration  20: 185751.143 ops/s
Iteration  21: 185907.789 ops/s
Iteration  22: 186546.336 ops/s
Iteration  23: 180781.137 ops/s
Iteration  24: 184870.671 ops/s
Iteration  25: 186368.844 ops/s
Iteration  26: 186173.103 ops/s
Iteration  27: 185668.168 ops/s
Iteration  28: 186306.240 ops/s
Iteration  29: 186394.558 ops/s
Iteration  30: 186569.290 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toBiMap":
  185946.671 ±(99.9%) 707.400 ops/s [Average]
  (min, avg, max) = (180781.137, 185946.671, 186700.368), stdev = 1058.803
  CI (99.9%): [185239.271, 186654.071] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score     Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_toBiMap  thrpt   30  185946.671 ± 707.400  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1136845.408 ops/s
# Warmup Iteration   2: 2198856.275 ops/s
# Warmup Iteration   3: 2451896.322 ops/s
# Warmup Iteration   4: 2458437.192 ops/s
# Warmup Iteration   5: 2143362.727 ops/s
# Warmup Iteration   6: 2312398.795 ops/s
# Warmup Iteration   7: 2459973.049 ops/s
# Warmup Iteration   8: 2465133.873 ops/s
# Warmup Iteration   9: 2467328.670 ops/s
# Warmup Iteration  10: 2464217.157 ops/s
# Warmup Iteration  11: 2470950.337 ops/s
# Warmup Iteration  12: 2466663.743 ops/s
# Warmup Iteration  13: 2449761.003 ops/s
# Warmup Iteration  14: 2450681.749 ops/s
# Warmup Iteration  15: 2460232.029 ops/s
# Warmup Iteration  16: 2462246.408 ops/s
# Warmup Iteration  17: 2464932.962 ops/s
# Warmup Iteration  18: 2451600.342 ops/s
# Warmup Iteration  19: 2462285.957 ops/s
# Warmup Iteration  20: 2445498.542 ops/s
# Warmup Iteration  21: 2456063.590 ops/s
# Warmup Iteration  22: 2466753.628 ops/s
# Warmup Iteration  23: 2462375.847 ops/s
# Warmup Iteration  24: 2465515.647 ops/s
# Warmup Iteration  25: 2460935.361 ops/s
# Warmup Iteration  26: 2464932.492 ops/s
# Warmup Iteration  27: 2455235.109 ops/s
# Warmup Iteration  28: 2455658.111 ops/s
# Warmup Iteration  29: 2462051.081 ops/s
# Warmup Iteration  30: 2459285.910 ops/s
Iteration   1: 2459060.716 ops/s
Iteration   2: 2466357.172 ops/s
Iteration   3: 2458956.400 ops/s
Iteration   4: 2462514.023 ops/s
Iteration   5: 2468288.838 ops/s
Iteration   6: 2462738.124 ops/s
Iteration   7: 2457032.553 ops/s
Iteration   8: 2461900.168 ops/s
Iteration   9: 2462845.125 ops/s
Iteration  10: 2468543.263 ops/s
Iteration  11: 2465098.155 ops/s
Iteration  12: 2462450.570 ops/s
Iteration  13: 2465223.880 ops/s
Iteration  14: 2462590.447 ops/s
Iteration  15: 2457597.742 ops/s
Iteration  16: 2463159.193 ops/s
Iteration  17: 2463734.990 ops/s
Iteration  18: 2453066.941 ops/s
Iteration  19: 2460128.924 ops/s
Iteration  20: 2453958.640 ops/s
Iteration  21: 2474046.786 ops/s
Iteration  22: 2460170.099 ops/s
Iteration  23: 2464099.683 ops/s
Iteration  24: 2461558.535 ops/s
Iteration  25: 2463750.912 ops/s
Iteration  26: 2456736.367 ops/s
Iteration  27: 2470004.782 ops/s
Iteration  28: 2461248.271 ops/s
Iteration  29: 2465034.015 ops/s
Iteration  30: 2436188.574 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toCollection":
  2461602.796 ±(99.9%) 4398.455 ops/s [Average]
  (min, avg, max) = (2436188.574, 2461602.796, 2474046.786), stdev = 6583.401
  CI (99.9%): [2457204.341, 2466001.251] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_toCollection  thrpt   30  2461602.796 ± 4398.455  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toImmutable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toImmutable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1983783.803 ops/s
# Warmup Iteration   2: 3551204.417 ops/s
# Warmup Iteration   3: 3996102.547 ops/s
# Warmup Iteration   4: 4025810.121 ops/s
# Warmup Iteration   5: 3976787.840 ops/s
# Warmup Iteration   6: 3300596.002 ops/s
# Warmup Iteration   7: 4016802.853 ops/s
# Warmup Iteration   8: 4025158.063 ops/s
# Warmup Iteration   9: 4021477.974 ops/s
# Warmup Iteration  10: 4022132.776 ops/s
# Warmup Iteration  11: 4027110.230 ops/s
# Warmup Iteration  12: 4025400.025 ops/s
# Warmup Iteration  13: 4018294.471 ops/s
# Warmup Iteration  14: 4021981.654 ops/s
# Warmup Iteration  15: 4015469.997 ops/s
# Warmup Iteration  16: 4018361.316 ops/s
# Warmup Iteration  17: 4018129.913 ops/s
# Warmup Iteration  18: 4021336.003 ops/s
# Warmup Iteration  19: 4020141.270 ops/s
# Warmup Iteration  20: 4011111.598 ops/s
# Warmup Iteration  21: 4026024.216 ops/s
# Warmup Iteration  22: 4017546.380 ops/s
# Warmup Iteration  23: 4019909.915 ops/s
# Warmup Iteration  24: 4022691.367 ops/s
# Warmup Iteration  25: 4025618.720 ops/s
# Warmup Iteration  26: 4034747.793 ops/s
# Warmup Iteration  27: 4025589.540 ops/s
# Warmup Iteration  28: 3999923.798 ops/s
# Warmup Iteration  29: 4030237.209 ops/s
# Warmup Iteration  30: 4019840.856 ops/s
Iteration   1: 4021204.590 ops/s
Iteration   2: 4027814.061 ops/s
Iteration   3: 4019711.881 ops/s
Iteration   4: 3985187.085 ops/s
Iteration   5: 4010796.772 ops/s
Iteration   6: 4018696.176 ops/s
Iteration   7: 4010089.395 ops/s
Iteration   8: 4025232.593 ops/s
Iteration   9: 4017136.692 ops/s
Iteration  10: 4018320.236 ops/s
Iteration  11: 4026336.314 ops/s
Iteration  12: 4023763.198 ops/s
Iteration  13: 4005486.418 ops/s
Iteration  14: 4016928.942 ops/s
Iteration  15: 4014628.930 ops/s
Iteration  16: 4022318.390 ops/s
Iteration  17: 4013824.555 ops/s
Iteration  18: 4006572.119 ops/s
Iteration  19: 4021540.169 ops/s
Iteration  20: 4015427.294 ops/s
Iteration  21: 4023878.560 ops/s
Iteration  22: 4021988.296 ops/s
Iteration  23: 4015744.078 ops/s
Iteration  24: 4030708.979 ops/s
Iteration  25: 4023075.130 ops/s
Iteration  26: 4028356.035 ops/s
Iteration  27: 4021738.642 ops/s
Iteration  28: 4024241.058 ops/s
Iteration  29: 4028712.579 ops/s
Iteration  30: 4020946.458 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toImmutable":
  4018680.187 ±(99.9%) 5981.597 ops/s [Average]
  (min, avg, max) = (3985187.085, 4018680.187, 4030708.979), stdev = 8952.973
  CI (99.9%): [4012698.591, 4024661.784] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_toImmutable  thrpt   30  4018680.187 ± 5981.597  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toImmutableBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toImmutableBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 604650.856 ops/s
# Warmup Iteration   2: 1209407.392 ops/s
# Warmup Iteration   3: 1335032.463 ops/s
# Warmup Iteration   4: 1343871.627 ops/s
# Warmup Iteration   5: 1103988.622 ops/s
# Warmup Iteration   6: 1344263.255 ops/s
# Warmup Iteration   7: 1347330.003 ops/s
# Warmup Iteration   8: 1345690.441 ops/s
# Warmup Iteration   9: 1346794.817 ops/s
# Warmup Iteration  10: 1342650.893 ops/s
# Warmup Iteration  11: 1343574.101 ops/s
# Warmup Iteration  12: 1343630.097 ops/s
# Warmup Iteration  13: 1344547.164 ops/s
# Warmup Iteration  14: 1344373.627 ops/s
# Warmup Iteration  15: 1343136.375 ops/s
# Warmup Iteration  16: 1346383.953 ops/s
# Warmup Iteration  17: 1345320.499 ops/s
# Warmup Iteration  18: 1344779.629 ops/s
# Warmup Iteration  19: 1345444.147 ops/s
# Warmup Iteration  20: 1338439.633 ops/s
# Warmup Iteration  21: 1342298.317 ops/s
# Warmup Iteration  22: 1347406.892 ops/s
# Warmup Iteration  23: 1340067.014 ops/s
# Warmup Iteration  24: 1345989.410 ops/s
# Warmup Iteration  25: 1344479.392 ops/s
# Warmup Iteration  26: 1341742.925 ops/s
# Warmup Iteration  27: 1345254.603 ops/s
# Warmup Iteration  28: 1343762.122 ops/s
# Warmup Iteration  29: 1340710.995 ops/s
# Warmup Iteration  30: 1342837.829 ops/s
Iteration   1: 1342389.027 ops/s
Iteration   2: 1347836.612 ops/s
Iteration   3: 1343670.406 ops/s
Iteration   4: 1345349.731 ops/s
Iteration   5: 1337015.788 ops/s
Iteration   6: 1341775.076 ops/s
Iteration   7: 1342001.408 ops/s
Iteration   8: 1347287.301 ops/s
Iteration   9: 1345138.132 ops/s
Iteration  10: 1338012.501 ops/s
Iteration  11: 1345398.741 ops/s
Iteration  12: 1342240.857 ops/s
Iteration  13: 1343675.120 ops/s
Iteration  14: 1348683.347 ops/s
Iteration  15: 1343847.348 ops/s
Iteration  16: 1341880.570 ops/s
Iteration  17: 1347691.577 ops/s
Iteration  18: 1339969.495 ops/s
Iteration  19: 1345687.707 ops/s
Iteration  20: 1348365.491 ops/s
Iteration  21: 1347601.835 ops/s
Iteration  22: 1344140.559 ops/s
Iteration  23: 1346160.978 ops/s
Iteration  24: 1345017.820 ops/s
Iteration  25: 1342531.213 ops/s
Iteration  26: 1347900.003 ops/s
Iteration  27: 1348120.368 ops/s
Iteration  28: 1342551.468 ops/s
Iteration  29: 1340300.678 ops/s
Iteration  30: 1345122.480 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toImmutableBag":
  1344245.455 ±(99.9%) 2063.311 ops/s [Average]
  (min, avg, max) = (1337015.788, 1344245.455, 1348683.347), stdev = 3088.267
  CI (99.9%): [1342182.143, 1346308.766] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_toImmutableBag  thrpt   30  1344245.455 ± 2063.311  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toImmutableBiMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toImmutableBiMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 89133.200 ops/s
# Warmup Iteration   2: 123728.886 ops/s
# Warmup Iteration   3: 151866.079 ops/s
# Warmup Iteration   4: 150842.215 ops/s
# Warmup Iteration   5: 151890.607 ops/s
# Warmup Iteration   6: 152069.679 ops/s
# Warmup Iteration   7: 151710.819 ops/s
# Warmup Iteration   8: 128354.796 ops/s
# Warmup Iteration   9: 151854.763 ops/s
# Warmup Iteration  10: 152482.662 ops/s
# Warmup Iteration  11: 152035.547 ops/s
# Warmup Iteration  12: 152165.075 ops/s
# Warmup Iteration  13: 152399.344 ops/s
# Warmup Iteration  14: 152803.687 ops/s
# Warmup Iteration  15: 152847.451 ops/s
# Warmup Iteration  16: 152279.270 ops/s
# Warmup Iteration  17: 157196.952 ops/s
# Warmup Iteration  18: 157075.177 ops/s
# Warmup Iteration  19: 156820.998 ops/s
# Warmup Iteration  20: 156343.099 ops/s
# Warmup Iteration  21: 157095.747 ops/s
# Warmup Iteration  22: 156548.268 ops/s
# Warmup Iteration  23: 156854.865 ops/s
# Warmup Iteration  24: 157063.164 ops/s
# Warmup Iteration  25: 157040.804 ops/s
# Warmup Iteration  26: 156827.330 ops/s
# Warmup Iteration  27: 156810.941 ops/s
# Warmup Iteration  28: 157456.740 ops/s
# Warmup Iteration  29: 156803.659 ops/s
# Warmup Iteration  30: 156778.599 ops/s
Iteration   1: 157257.110 ops/s
Iteration   2: 156615.720 ops/s
Iteration   3: 157435.693 ops/s
Iteration   4: 156931.622 ops/s
Iteration   5: 157002.305 ops/s
Iteration   6: 157020.316 ops/s
Iteration   7: 157248.127 ops/s
Iteration   8: 157234.254 ops/s
Iteration   9: 156587.565 ops/s
Iteration  10: 156975.685 ops/s
Iteration  11: 157097.887 ops/s
Iteration  12: 157381.279 ops/s
Iteration  13: 156483.913 ops/s
Iteration  14: 157357.737 ops/s
Iteration  15: 157520.340 ops/s
Iteration  16: 157503.926 ops/s
Iteration  17: 156450.468 ops/s
Iteration  18: 157317.636 ops/s
Iteration  19: 155996.890 ops/s
Iteration  20: 156872.086 ops/s
Iteration  21: 156603.825 ops/s
Iteration  22: 157854.719 ops/s
Iteration  23: 157067.064 ops/s
Iteration  24: 156829.001 ops/s
Iteration  25: 157324.134 ops/s
Iteration  26: 157138.647 ops/s
Iteration  27: 156802.187 ops/s
Iteration  28: 157276.049 ops/s
Iteration  29: 156347.106 ops/s
Iteration  30: 156925.158 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toImmutableBiMap":
  157015.282 ±(99.9%) 271.275 ops/s [Average]
  (min, avg, max) = (155996.890, 157015.282, 157854.719), stdev = 406.032
  CI (99.9%): [156744.006, 157286.557] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score     Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_toImmutableBiMap  thrpt   30  157015.282 ± 271.275  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toImmutableList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toImmutableList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 640636.220 ops/s
# Warmup Iteration   2: 1094372.480 ops/s
# Warmup Iteration   3: 1283363.635 ops/s
# Warmup Iteration   4: 1292179.915 ops/s
# Warmup Iteration   5: 1291043.883 ops/s
# Warmup Iteration   6: 1048359.267 ops/s
# Warmup Iteration   7: 1293669.868 ops/s
# Warmup Iteration   8: 1292224.825 ops/s
# Warmup Iteration   9: 1293149.713 ops/s
# Warmup Iteration  10: 1294045.611 ops/s
# Warmup Iteration  11: 1287392.070 ops/s
# Warmup Iteration  12: 1293665.670 ops/s
# Warmup Iteration  13: 1294296.465 ops/s
# Warmup Iteration  14: 1294103.630 ops/s
# Warmup Iteration  15: 1293253.719 ops/s
# Warmup Iteration  16: 1292432.578 ops/s
# Warmup Iteration  17: 1294153.165 ops/s
# Warmup Iteration  18: 1293310.697 ops/s
# Warmup Iteration  19: 1289478.533 ops/s
# Warmup Iteration  20: 1290269.978 ops/s
# Warmup Iteration  21: 1290708.349 ops/s
# Warmup Iteration  22: 1293554.098 ops/s
# Warmup Iteration  23: 1291825.172 ops/s
# Warmup Iteration  24: 1294635.445 ops/s
# Warmup Iteration  25: 1291726.601 ops/s
# Warmup Iteration  26: 1295272.108 ops/s
# Warmup Iteration  27: 1295375.761 ops/s
# Warmup Iteration  28: 1294548.593 ops/s
# Warmup Iteration  29: 1291331.424 ops/s
# Warmup Iteration  30: 1285465.563 ops/s
Iteration   1: 1284359.206 ops/s
Iteration   2: 1292935.525 ops/s
Iteration   3: 1292506.808 ops/s
Iteration   4: 1293730.884 ops/s
Iteration   5: 1288825.382 ops/s
Iteration   6: 1295202.776 ops/s
Iteration   7: 1292285.522 ops/s
Iteration   8: 1283277.373 ops/s
Iteration   9: 1292816.615 ops/s
Iteration  10: 1288666.382 ops/s
Iteration  11: 1292888.901 ops/s
Iteration  12: 1294776.963 ops/s
Iteration  13: 1291587.266 ops/s
Iteration  14: 1290763.590 ops/s
Iteration  15: 1291856.967 ops/s
Iteration  16: 1290574.448 ops/s
Iteration  17: 1293902.347 ops/s
Iteration  18: 1291053.047 ops/s
Iteration  19: 1294499.846 ops/s
Iteration  20: 1291467.835 ops/s
Iteration  21: 1293716.925 ops/s
Iteration  22: 1287666.850 ops/s
Iteration  23: 1295867.220 ops/s
Iteration  24: 1291938.685 ops/s
Iteration  25: 1291454.421 ops/s
Iteration  26: 1291279.706 ops/s
Iteration  27: 1291289.232 ops/s
Iteration  28: 1287879.575 ops/s
Iteration  29: 1292285.772 ops/s
Iteration  30: 1292933.856 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toImmutableList":
  1291476.331 ±(99.9%) 1929.217 ops/s [Average]
  (min, avg, max) = (1283277.373, 1291476.331, 1295867.220), stdev = 2887.562
  CI (99.9%): [1289547.113, 1293405.548] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_toImmutableList  thrpt   30  1291476.331 ± 1929.217  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toImmutableMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toImmutableMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 554112.452 ops/s
# Warmup Iteration   2: 1192829.236 ops/s
# Warmup Iteration   3: 1256259.698 ops/s
# Warmup Iteration   4: 1263849.274 ops/s
# Warmup Iteration   5: 1048090.678 ops/s
# Warmup Iteration   6: 1262413.113 ops/s
# Warmup Iteration   7: 1261907.493 ops/s
# Warmup Iteration   8: 1266789.148 ops/s
# Warmup Iteration   9: 1256993.383 ops/s
# Warmup Iteration  10: 1237915.323 ops/s
# Warmup Iteration  11: 1245794.157 ops/s
# Warmup Iteration  12: 1268457.125 ops/s
# Warmup Iteration  13: 1263585.724 ops/s
# Warmup Iteration  14: 1261921.526 ops/s
# Warmup Iteration  15: 1268748.408 ops/s
# Warmup Iteration  16: 1267575.121 ops/s
# Warmup Iteration  17: 1257215.048 ops/s
# Warmup Iteration  18: 1260017.572 ops/s
# Warmup Iteration  19: 1257179.171 ops/s
# Warmup Iteration  20: 1267717.849 ops/s
# Warmup Iteration  21: 1262688.855 ops/s
# Warmup Iteration  22: 1258569.837 ops/s
# Warmup Iteration  23: 1259352.476 ops/s
# Warmup Iteration  24: 1269844.697 ops/s
# Warmup Iteration  25: 1263202.894 ops/s
# Warmup Iteration  26: 1265963.516 ops/s
# Warmup Iteration  27: 1271912.355 ops/s
# Warmup Iteration  28: 1259567.348 ops/s
# Warmup Iteration  29: 1275629.822 ops/s
# Warmup Iteration  30: 1260337.478 ops/s
Iteration   1: 1263997.649 ops/s
Iteration   2: 1265310.705 ops/s
Iteration   3: 1260535.324 ops/s
Iteration   4: 1265059.523 ops/s
Iteration   5: 1263629.097 ops/s
Iteration   6: 1269856.755 ops/s
Iteration   7: 1265634.196 ops/s
Iteration   8: 1256570.543 ops/s
Iteration   9: 1264182.399 ops/s
Iteration  10: 1256888.994 ops/s
Iteration  11: 1263107.129 ops/s
Iteration  12: 1259045.152 ops/s
Iteration  13: 1262931.379 ops/s
Iteration  14: 1249291.910 ops/s
Iteration  15: 1259792.268 ops/s
Iteration  16: 1273801.888 ops/s
Iteration  17: 1269280.262 ops/s
Iteration  18: 1252610.187 ops/s
Iteration  19: 1267489.032 ops/s
Iteration  20: 1258336.567 ops/s
Iteration  21: 1249629.357 ops/s
Iteration  22: 1262699.113 ops/s
Iteration  23: 1264317.358 ops/s
Iteration  24: 1262345.578 ops/s
Iteration  25: 1272025.847 ops/s
Iteration  26: 1262453.835 ops/s
Iteration  27: 1244835.593 ops/s
Iteration  28: 1261142.743 ops/s
Iteration  29: 1275313.985 ops/s
Iteration  30: 1265929.563 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toImmutableMap":
  1262268.131 ±(99.9%) 4660.709 ops/s [Average]
  (min, avg, max) = (1244835.593, 1262268.131, 1275313.985), stdev = 6975.930
  CI (99.9%): [1257607.422, 1266928.840] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_toImmutableMap  thrpt   30  1262268.131 ± 4660.709  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toImmutableSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toImmutableSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 596620.048 ops/s
# Warmup Iteration   2: 900785.087 ops/s
# Warmup Iteration   3: 1128778.682 ops/s
# Warmup Iteration   4: 1121611.478 ops/s
# Warmup Iteration   5: 1130627.244 ops/s
# Warmup Iteration   6: 1131158.390 ops/s
# Warmup Iteration   7: 915346.056 ops/s
# Warmup Iteration   8: 1130690.272 ops/s
# Warmup Iteration   9: 1130386.896 ops/s
# Warmup Iteration  10: 1131653.076 ops/s
# Warmup Iteration  11: 1129664.506 ops/s
# Warmup Iteration  12: 1128822.752 ops/s
# Warmup Iteration  13: 1132329.678 ops/s
# Warmup Iteration  14: 1130845.189 ops/s
# Warmup Iteration  15: 1128539.448 ops/s
# Warmup Iteration  16: 1131234.958 ops/s
# Warmup Iteration  17: 1130388.452 ops/s
# Warmup Iteration  18: 1131401.903 ops/s
# Warmup Iteration  19: 1130862.536 ops/s
# Warmup Iteration  20: 1132359.131 ops/s
# Warmup Iteration  21: 1125240.140 ops/s
# Warmup Iteration  22: 1127286.840 ops/s
# Warmup Iteration  23: 1128766.919 ops/s
# Warmup Iteration  24: 1126034.439 ops/s
# Warmup Iteration  25: 1131409.660 ops/s
# Warmup Iteration  26: 1129374.366 ops/s
# Warmup Iteration  27: 1131512.470 ops/s
# Warmup Iteration  28: 1128508.115 ops/s
# Warmup Iteration  29: 1130979.971 ops/s
# Warmup Iteration  30: 1130531.707 ops/s
Iteration   1: 1129717.153 ops/s
Iteration   2: 1127868.434 ops/s
Iteration   3: 1131110.726 ops/s
Iteration   4: 1126003.804 ops/s
Iteration   5: 1131835.897 ops/s
Iteration   6: 1130602.014 ops/s
Iteration   7: 1131958.131 ops/s
Iteration   8: 1129420.843 ops/s
Iteration   9: 1130501.611 ops/s
Iteration  10: 1132997.635 ops/s
Iteration  11: 1131835.900 ops/s
Iteration  12: 1128484.611 ops/s
Iteration  13: 1132253.557 ops/s
Iteration  14: 1127891.178 ops/s
Iteration  15: 1133398.863 ops/s
Iteration  16: 1128670.531 ops/s
Iteration  17: 1133333.107 ops/s
Iteration  18: 1128104.098 ops/s
Iteration  19: 1132176.375 ops/s
Iteration  20: 1131380.524 ops/s
Iteration  21: 1133134.236 ops/s
Iteration  22: 1132902.200 ops/s
Iteration  23: 1132234.938 ops/s
Iteration  24: 1134856.645 ops/s
Iteration  25: 1132771.662 ops/s
Iteration  26: 1128017.350 ops/s
Iteration  27: 1128628.342 ops/s
Iteration  28: 1124911.839 ops/s
Iteration  29: 1127325.407 ops/s
Iteration  30: 1130555.288 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toImmutableSet":
  1130496.097 ±(99.9%) 1641.776 ops/s [Average]
  (min, avg, max) = (1124911.839, 1130496.097, 1134856.645), stdev = 2457.334
  CI (99.9%): [1128854.320, 1132137.873] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_toImmutableSet  thrpt   30  1130496.097 ± 1641.776  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 541851.826 ops/s
# Warmup Iteration   2: 1097423.812 ops/s
# Warmup Iteration   3: 1216239.398 ops/s
# Warmup Iteration   4: 1222756.375 ops/s
# Warmup Iteration   5: 1007340.320 ops/s
# Warmup Iteration   6: 1222103.101 ops/s
# Warmup Iteration   7: 1225690.558 ops/s
# Warmup Iteration   8: 1225789.277 ops/s
# Warmup Iteration   9: 1227573.520 ops/s
# Warmup Iteration  10: 1223500.128 ops/s
# Warmup Iteration  11: 1225418.880 ops/s
# Warmup Iteration  12: 1222162.278 ops/s
# Warmup Iteration  13: 1223189.837 ops/s
# Warmup Iteration  14: 1225125.948 ops/s
# Warmup Iteration  15: 1226241.194 ops/s
# Warmup Iteration  16: 1225244.060 ops/s
# Warmup Iteration  17: 1224786.722 ops/s
# Warmup Iteration  18: 1224295.510 ops/s
# Warmup Iteration  19: 1222945.428 ops/s
# Warmup Iteration  20: 1223900.226 ops/s
# Warmup Iteration  21: 1227199.697 ops/s
# Warmup Iteration  22: 1222386.687 ops/s
# Warmup Iteration  23: 1226601.060 ops/s
# Warmup Iteration  24: 1225660.690 ops/s
# Warmup Iteration  25: 1225686.029 ops/s
# Warmup Iteration  26: 1226754.445 ops/s
# Warmup Iteration  27: 1227279.748 ops/s
# Warmup Iteration  28: 1223283.645 ops/s
# Warmup Iteration  29: 1227137.784 ops/s
# Warmup Iteration  30: 1226121.921 ops/s
Iteration   1: 1226727.451 ops/s
Iteration   2: 1223668.985 ops/s
Iteration   3: 1223103.226 ops/s
Iteration   4: 1221453.670 ops/s
Iteration   5: 1223449.859 ops/s
Iteration   6: 1226384.154 ops/s
Iteration   7: 1225396.367 ops/s
Iteration   8: 1224899.123 ops/s
Iteration   9: 1220593.603 ops/s
Iteration  10: 1228361.576 ops/s
Iteration  11: 1220091.770 ops/s
Iteration  12: 1227003.175 ops/s
Iteration  13: 1220622.956 ops/s
Iteration  14: 1222074.923 ops/s
Iteration  15: 1228714.528 ops/s
Iteration  16: 1225890.281 ops/s
Iteration  17: 1226801.368 ops/s
Iteration  18: 1220712.441 ops/s
Iteration  19: 1225563.088 ops/s
Iteration  20: 1226409.782 ops/s
Iteration  21: 1224376.896 ops/s
Iteration  22: 1228995.106 ops/s
Iteration  23: 1220417.524 ops/s
Iteration  24: 1226504.490 ops/s
Iteration  25: 1226651.486 ops/s
Iteration  26: 1222545.985 ops/s
Iteration  27: 1223488.728 ops/s
Iteration  28: 1227326.969 ops/s
Iteration  29: 1223952.993 ops/s
Iteration  30: 1224668.710 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering":
  1224561.707 ±(99.9%) 1763.199 ops/s [Average]
  (min, avg, max) = (1220091.770, 1224561.707, 1228995.106), stdev = 2639.073
  CI (99.9%): [1222798.508, 1226324.906] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering  thrpt   30  1224561.707 ± 1763.199  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toImmutableSortedBagBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toImmutableSortedBagBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 293500.148 ops/s
# Warmup Iteration   2: 647009.602 ops/s
# Warmup Iteration   3: 711560.914 ops/s
# Warmup Iteration   4: 715177.023 ops/s
# Warmup Iteration   5: 595960.534 ops/s
# Warmup Iteration   6: 714623.989 ops/s
# Warmup Iteration   7: 714597.270 ops/s
# Warmup Iteration   8: 715814.739 ops/s
# Warmup Iteration   9: 715415.029 ops/s
# Warmup Iteration  10: 714282.532 ops/s
# Warmup Iteration  11: 714586.469 ops/s
# Warmup Iteration  12: 715366.640 ops/s
# Warmup Iteration  13: 714742.201 ops/s
# Warmup Iteration  14: 714344.598 ops/s
# Warmup Iteration  15: 712792.418 ops/s
# Warmup Iteration  16: 714921.425 ops/s
# Warmup Iteration  17: 714864.158 ops/s
# Warmup Iteration  18: 715411.516 ops/s
# Warmup Iteration  19: 715408.128 ops/s
# Warmup Iteration  20: 713907.255 ops/s
# Warmup Iteration  21: 713932.654 ops/s
# Warmup Iteration  22: 715483.405 ops/s
# Warmup Iteration  23: 715978.962 ops/s
# Warmup Iteration  24: 713802.463 ops/s
# Warmup Iteration  25: 713894.189 ops/s
# Warmup Iteration  26: 714884.911 ops/s
# Warmup Iteration  27: 715214.848 ops/s
# Warmup Iteration  28: 714732.712 ops/s
# Warmup Iteration  29: 713109.332 ops/s
# Warmup Iteration  30: 715306.083 ops/s
Iteration   1: 714105.009 ops/s
Iteration   2: 715007.640 ops/s
Iteration   3: 714837.710 ops/s
Iteration   4: 715700.825 ops/s
Iteration   5: 715064.800 ops/s
Iteration   6: 715487.190 ops/s
Iteration   7: 714754.005 ops/s
Iteration   8: 717927.283 ops/s
Iteration   9: 715074.155 ops/s
Iteration  10: 712755.910 ops/s
Iteration  11: 715037.820 ops/s
Iteration  12: 711575.513 ops/s
Iteration  13: 716519.523 ops/s
Iteration  14: 716378.783 ops/s
Iteration  15: 715770.758 ops/s
Iteration  16: 714367.611 ops/s
Iteration  17: 714895.991 ops/s
Iteration  18: 715575.368 ops/s
Iteration  19: 715629.203 ops/s
Iteration  20: 714548.807 ops/s
Iteration  21: 710092.536 ops/s
Iteration  22: 716346.072 ops/s
Iteration  23: 716047.985 ops/s
Iteration  24: 715173.738 ops/s
Iteration  25: 714828.066 ops/s
Iteration  26: 714262.231 ops/s
Iteration  27: 711833.447 ops/s
Iteration  28: 716298.944 ops/s
Iteration  29: 715975.937 ops/s
Iteration  30: 716926.024 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toImmutableSortedBagBy":
  714959.963 ±(99.9%) 1088.886 ops/s [Average]
  (min, avg, max) = (710092.536, 714959.963, 717927.283), stdev = 1629.794
  CI (99.9%): [713871.077, 716048.849] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_toImmutableSortedBagBy  thrpt   30  714959.963 ± 1088.886  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 270985.685 ops/s
# Warmup Iteration   2: 439973.483 ops/s
# Warmup Iteration   3: 545602.785 ops/s
# Warmup Iteration   4: 541622.127 ops/s
# Warmup Iteration   5: 545266.808 ops/s
# Warmup Iteration   6: 541710.783 ops/s
# Warmup Iteration   7: 449625.964 ops/s
# Warmup Iteration   8: 545069.297 ops/s
# Warmup Iteration   9: 546723.202 ops/s
# Warmup Iteration  10: 545803.528 ops/s
# Warmup Iteration  11: 544890.695 ops/s
# Warmup Iteration  12: 546618.507 ops/s
# Warmup Iteration  13: 546101.378 ops/s
# Warmup Iteration  14: 545795.990 ops/s
# Warmup Iteration  15: 547337.522 ops/s
# Warmup Iteration  16: 545520.100 ops/s
# Warmup Iteration  17: 547178.524 ops/s
# Warmup Iteration  18: 545983.779 ops/s
# Warmup Iteration  19: 545625.584 ops/s
# Warmup Iteration  20: 546379.887 ops/s
# Warmup Iteration  21: 545782.047 ops/s
# Warmup Iteration  22: 546411.436 ops/s
# Warmup Iteration  23: 546084.656 ops/s
# Warmup Iteration  24: 545240.809 ops/s
# Warmup Iteration  25: 545604.639 ops/s
# Warmup Iteration  26: 545710.005 ops/s
# Warmup Iteration  27: 545493.057 ops/s
# Warmup Iteration  28: 544504.733 ops/s
# Warmup Iteration  29: 545442.194 ops/s
# Warmup Iteration  30: 545326.588 ops/s
Iteration   1: 547564.286 ops/s
Iteration   2: 544103.555 ops/s
Iteration   3: 546194.561 ops/s
Iteration   4: 545634.897 ops/s
Iteration   5: 547072.974 ops/s
Iteration   6: 544866.007 ops/s
Iteration   7: 545701.219 ops/s
Iteration   8: 546275.424 ops/s
Iteration   9: 546746.323 ops/s
Iteration  10: 544405.492 ops/s
Iteration  11: 545882.652 ops/s
Iteration  12: 545610.180 ops/s
Iteration  13: 544369.824 ops/s
Iteration  14: 546017.431 ops/s
Iteration  15: 545593.610 ops/s
Iteration  16: 546883.444 ops/s
Iteration  17: 545618.846 ops/s
Iteration  18: 547307.399 ops/s
Iteration  19: 545809.730 ops/s
Iteration  20: 545706.586 ops/s
Iteration  21: 544291.771 ops/s
Iteration  22: 545331.288 ops/s
Iteration  23: 546108.979 ops/s
Iteration  24: 546111.409 ops/s
Iteration  25: 544290.825 ops/s
Iteration  26: 546859.092 ops/s
Iteration  27: 545400.377 ops/s
Iteration  28: 547926.112 ops/s
Iteration  29: 545471.542 ops/s
Iteration  30: 545454.929 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering":
  545820.359 ±(99.9%) 661.037 ops/s [Average]
  (min, avg, max) = (544103.555, 545820.359, 547926.112), stdev = 989.409
  CI (99.9%): [545159.322, 546481.396] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt       Score     Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering  thrpt   30  545820.359 ± 661.037  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 455388.382 ops/s
# Warmup Iteration   2: 839966.597 ops/s
# Warmup Iteration   3: 1002531.883 ops/s
# Warmup Iteration   4: 1011526.142 ops/s
# Warmup Iteration   5: 1010508.764 ops/s
# Warmup Iteration   6: 835972.165 ops/s
# Warmup Iteration   7: 1011991.400 ops/s
# Warmup Iteration   8: 1013402.288 ops/s
# Warmup Iteration   9: 1011886.322 ops/s
# Warmup Iteration  10: 1011005.737 ops/s
# Warmup Iteration  11: 1011435.878 ops/s
# Warmup Iteration  12: 1010846.607 ops/s
# Warmup Iteration  13: 1010424.688 ops/s
# Warmup Iteration  14: 999286.142 ops/s
# Warmup Iteration  15: 1011165.381 ops/s
# Warmup Iteration  16: 1009038.310 ops/s
# Warmup Iteration  17: 1011148.526 ops/s
# Warmup Iteration  18: 1012442.860 ops/s
# Warmup Iteration  19: 1010230.615 ops/s
# Warmup Iteration  20: 1012669.813 ops/s
# Warmup Iteration  21: 1002859.448 ops/s
# Warmup Iteration  22: 1011311.503 ops/s
# Warmup Iteration  23: 1010278.945 ops/s
# Warmup Iteration  24: 1010084.016 ops/s
# Warmup Iteration  25: 1011897.519 ops/s
# Warmup Iteration  26: 1011508.018 ops/s
# Warmup Iteration  27: 1011325.190 ops/s
# Warmup Iteration  28: 1010791.593 ops/s
# Warmup Iteration  29: 1010768.066 ops/s
# Warmup Iteration  30: 1011077.611 ops/s
Iteration   1: 1012729.147 ops/s
Iteration   2: 1007651.424 ops/s
Iteration   3: 1010185.483 ops/s
Iteration   4: 1010700.799 ops/s
Iteration   5: 1010157.675 ops/s
Iteration   6: 1012374.257 ops/s
Iteration   7: 1009288.979 ops/s
Iteration   8: 1010944.976 ops/s
Iteration   9: 1010061.890 ops/s
Iteration  10: 1015148.031 ops/s
Iteration  11: 1012010.584 ops/s
Iteration  12: 1012194.137 ops/s
Iteration  13: 1010593.517 ops/s
Iteration  14: 1010115.297 ops/s
Iteration  15: 1011398.308 ops/s
Iteration  16: 1011891.650 ops/s
Iteration  17: 1011841.016 ops/s
Iteration  18: 1005341.738 ops/s
Iteration  19: 1012130.169 ops/s
Iteration  20: 1010243.925 ops/s
Iteration  21: 1010755.888 ops/s
Iteration  22: 1005162.890 ops/s
Iteration  23: 1007151.168 ops/s
Iteration  24: 1011328.613 ops/s
Iteration  25: 1013849.458 ops/s
Iteration  26: 1012121.013 ops/s
Iteration  27: 1007345.992 ops/s
Iteration  28: 1009345.834 ops/s
Iteration  29: 1007782.663 ops/s
Iteration  30: 1009170.377 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator":
  1010367.230 ±(99.9%) 1538.090 ops/s [Average]
  (min, avg, max) = (1005162.890, 1010367.230, 1015148.031), stdev = 2302.141
  CI (99.9%): [1008829.140, 1011905.320] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator  thrpt   30  1010367.230 ± 1538.090  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toImmutableSortedListBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toImmutableSortedListBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1155517.264 ops/s
# Warmup Iteration   2: 2502477.866 ops/s
# Warmup Iteration   3: 2678917.583 ops/s
# Warmup Iteration   4: 2693165.273 ops/s
# Warmup Iteration   5: 2216349.759 ops/s
# Warmup Iteration   6: 2700209.399 ops/s
# Warmup Iteration   7: 2702113.357 ops/s
# Warmup Iteration   8: 2705000.037 ops/s
# Warmup Iteration   9: 2700890.512 ops/s
# Warmup Iteration  10: 2687777.816 ops/s
# Warmup Iteration  11: 2698911.861 ops/s
# Warmup Iteration  12: 2702136.546 ops/s
# Warmup Iteration  13: 2689432.417 ops/s
# Warmup Iteration  14: 2696164.466 ops/s
# Warmup Iteration  15: 2702537.106 ops/s
# Warmup Iteration  16: 2691594.202 ops/s
# Warmup Iteration  17: 2690200.479 ops/s
# Warmup Iteration  18: 2700051.644 ops/s
# Warmup Iteration  19: 2704044.624 ops/s
# Warmup Iteration  20: 2692700.458 ops/s
# Warmup Iteration  21: 2702840.808 ops/s
# Warmup Iteration  22: 2703341.263 ops/s
# Warmup Iteration  23: 2703078.369 ops/s
# Warmup Iteration  24: 2698202.361 ops/s
# Warmup Iteration  25: 2701472.214 ops/s
# Warmup Iteration  26: 2700943.948 ops/s
# Warmup Iteration  27: 2697223.041 ops/s
# Warmup Iteration  28: 2696103.154 ops/s
# Warmup Iteration  29: 2696863.796 ops/s
# Warmup Iteration  30: 2701974.200 ops/s
Iteration   1: 2704623.492 ops/s
Iteration   2: 2703650.676 ops/s
Iteration   3: 2692716.259 ops/s
Iteration   4: 2684395.575 ops/s
Iteration   5: 2701697.359 ops/s
Iteration   6: 2694275.084 ops/s
Iteration   7: 2695007.319 ops/s
Iteration   8: 2699230.224 ops/s
Iteration   9: 2709356.855 ops/s
Iteration  10: 2698355.145 ops/s
Iteration  11: 2705927.425 ops/s
Iteration  12: 2702163.454 ops/s
Iteration  13: 2709131.202 ops/s
Iteration  14: 2703007.226 ops/s
Iteration  15: 2704755.341 ops/s
Iteration  16: 2706033.772 ops/s
Iteration  17: 2711824.031 ops/s
Iteration  18: 2700628.910 ops/s
Iteration  19: 2699636.904 ops/s
Iteration  20: 2699885.385 ops/s
Iteration  21: 2701264.568 ops/s
Iteration  22: 2689147.149 ops/s
Iteration  23: 2691312.086 ops/s
Iteration  24: 2703760.235 ops/s
Iteration  25: 2699944.129 ops/s
Iteration  26: 2694571.192 ops/s
Iteration  27: 2700567.471 ops/s
Iteration  28: 2696315.870 ops/s
Iteration  29: 2705954.138 ops/s
Iteration  30: 2689362.373 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toImmutableSortedListBy":
  2699950.028 ±(99.9%) 4324.887 ops/s [Average]
  (min, avg, max) = (2684395.575, 2699950.028, 2711824.031), stdev = 6473.288
  CI (99.9%): [2695625.141, 2704274.915] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_toImmutableSortedListBy  thrpt   30  2699950.028 ± 4324.887  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 643789.496 ops/s
# Warmup Iteration   2: 1076496.329 ops/s
# Warmup Iteration   3: 1341949.712 ops/s
# Warmup Iteration   4: 1335026.300 ops/s
# Warmup Iteration   5: 1341090.924 ops/s
# Warmup Iteration   6: 1341089.195 ops/s
# Warmup Iteration   7: 1143636.609 ops/s
# Warmup Iteration   8: 1280154.436 ops/s
# Warmup Iteration   9: 1343612.416 ops/s
# Warmup Iteration  10: 1345847.089 ops/s
# Warmup Iteration  11: 1344910.173 ops/s
# Warmup Iteration  12: 1342930.107 ops/s
# Warmup Iteration  13: 1342943.558 ops/s
# Warmup Iteration  14: 1343078.600 ops/s
# Warmup Iteration  15: 1344373.624 ops/s
# Warmup Iteration  16: 1345253.077 ops/s
# Warmup Iteration  17: 1342239.009 ops/s
# Warmup Iteration  18: 1340590.529 ops/s
# Warmup Iteration  19: 1342969.452 ops/s
# Warmup Iteration  20: 1342210.892 ops/s
# Warmup Iteration  21: 1344159.442 ops/s
# Warmup Iteration  22: 1343049.928 ops/s
# Warmup Iteration  23: 1342062.825 ops/s
# Warmup Iteration  24: 1338330.466 ops/s
# Warmup Iteration  25: 1334498.600 ops/s
# Warmup Iteration  26: 1341871.174 ops/s
# Warmup Iteration  27: 1340926.754 ops/s
# Warmup Iteration  28: 1342013.194 ops/s
# Warmup Iteration  29: 1343375.300 ops/s
# Warmup Iteration  30: 1341366.533 ops/s
Iteration   1: 1340508.182 ops/s
Iteration   2: 1337698.205 ops/s
Iteration   3: 1338156.110 ops/s
Iteration   4: 1341660.033 ops/s
Iteration   5: 1340793.260 ops/s
Iteration   6: 1342360.135 ops/s
Iteration   7: 1343395.406 ops/s
Iteration   8: 1341481.012 ops/s
Iteration   9: 1341616.193 ops/s
Iteration  10: 1333438.329 ops/s
Iteration  11: 1344826.809 ops/s
Iteration  12: 1340751.023 ops/s
Iteration  13: 1343764.567 ops/s
Iteration  14: 1341422.524 ops/s
Iteration  15: 1338898.706 ops/s
Iteration  16: 1344355.607 ops/s
Iteration  17: 1339729.574 ops/s
Iteration  18: 1342937.280 ops/s
Iteration  19: 1336104.940 ops/s
Iteration  20: 1344798.368 ops/s
Iteration  21: 1342027.332 ops/s
Iteration  22: 1341600.992 ops/s
Iteration  23: 1340686.241 ops/s
Iteration  24: 1338545.832 ops/s
Iteration  25: 1342120.843 ops/s
Iteration  26: 1341065.156 ops/s
Iteration  27: 1342604.425 ops/s
Iteration  28: 1341788.531 ops/s
Iteration  29: 1335656.764 ops/s
Iteration  30: 1340554.372 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering":
  1340844.892 ±(99.9%) 1785.287 ops/s [Average]
  (min, avg, max) = (1333438.329, 1340844.892, 1344826.809), stdev = 2672.134
  CI (99.9%): [1339059.604, 1342630.179] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering  thrpt   30  1340844.892 ± 1785.287  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toImmutableSortedList_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toImmutableSortedList_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1604198.447 ops/s
# Warmup Iteration   2: 2780221.143 ops/s
# Warmup Iteration   3: 3289406.423 ops/s
# Warmup Iteration   4: 3321043.998 ops/s
# Warmup Iteration   5: 3303581.371 ops/s
# Warmup Iteration   6: 2664247.956 ops/s
# Warmup Iteration   7: 3323566.976 ops/s
# Warmup Iteration   8: 3315785.921 ops/s
# Warmup Iteration   9: 3316123.124 ops/s
# Warmup Iteration  10: 3324806.153 ops/s
# Warmup Iteration  11: 3305881.713 ops/s
# Warmup Iteration  12: 3323954.254 ops/s
# Warmup Iteration  13: 3314299.017 ops/s
# Warmup Iteration  14: 3318511.879 ops/s
# Warmup Iteration  15: 3318949.937 ops/s
# Warmup Iteration  16: 3321412.650 ops/s
# Warmup Iteration  17: 3326855.465 ops/s
# Warmup Iteration  18: 3313194.385 ops/s
# Warmup Iteration  19: 3319977.164 ops/s
# Warmup Iteration  20: 3323898.681 ops/s
# Warmup Iteration  21: 3309700.710 ops/s
# Warmup Iteration  22: 3325064.904 ops/s
# Warmup Iteration  23: 3324390.630 ops/s
# Warmup Iteration  24: 3313102.005 ops/s
# Warmup Iteration  25: 3315448.811 ops/s
# Warmup Iteration  26: 3319060.581 ops/s
# Warmup Iteration  27: 3322462.736 ops/s
# Warmup Iteration  28: 3324912.186 ops/s
# Warmup Iteration  29: 3328590.377 ops/s
# Warmup Iteration  30: 3322842.958 ops/s
Iteration   1: 3308326.785 ops/s
Iteration   2: 3321740.764 ops/s
Iteration   3: 3319692.248 ops/s
Iteration   4: 3318998.756 ops/s
Iteration   5: 3322322.128 ops/s
Iteration   6: 3321312.530 ops/s
Iteration   7: 3323511.490 ops/s
Iteration   8: 3316887.480 ops/s
Iteration   9: 3327541.306 ops/s
Iteration  10: 3308264.304 ops/s
Iteration  11: 3328536.419 ops/s
Iteration  12: 3316489.670 ops/s
Iteration  13: 3323880.285 ops/s
Iteration  14: 3326921.138 ops/s
Iteration  15: 3315678.541 ops/s
Iteration  16: 3326367.327 ops/s
Iteration  17: 3315411.093 ops/s
Iteration  18: 3292457.028 ops/s
Iteration  19: 3305388.481 ops/s
Iteration  20: 3328759.285 ops/s
Iteration  21: 3317854.966 ops/s
Iteration  22: 3333805.388 ops/s
Iteration  23: 3325914.650 ops/s
Iteration  24: 3331651.506 ops/s
Iteration  25: 3312098.105 ops/s
Iteration  26: 3316984.121 ops/s
Iteration  27: 3317724.455 ops/s
Iteration  28: 3315448.007 ops/s
Iteration  29: 3314514.312 ops/s
Iteration  30: 3326793.388 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toImmutableSortedList_with_comparator":
  3319375.865 ±(99.9%) 5778.452 ops/s [Average]
  (min, avg, max) = (3292457.028, 3319375.865, 3333805.388), stdev = 8648.915
  CI (99.9%): [3313597.413, 3325154.317] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_toImmutableSortedList_with_comparator  thrpt   30  3319375.865 ± 5778.452  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toImmutableSortedSetBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toImmutableSortedSetBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 508145.020 ops/s
# Warmup Iteration   2: 1059731.750 ops/s
# Warmup Iteration   3: 1173929.592 ops/s
# Warmup Iteration   4: 1181249.480 ops/s
# Warmup Iteration   5: 976289.460 ops/s
# Warmup Iteration   6: 1180983.261 ops/s
# Warmup Iteration   7: 1183857.811 ops/s
# Warmup Iteration   8: 1185637.752 ops/s
# Warmup Iteration   9: 1178302.626 ops/s
# Warmup Iteration  10: 1179248.791 ops/s
# Warmup Iteration  11: 1185330.231 ops/s
# Warmup Iteration  12: 1182700.467 ops/s
# Warmup Iteration  13: 1185368.909 ops/s
# Warmup Iteration  14: 1181272.131 ops/s
# Warmup Iteration  15: 1183534.570 ops/s
# Warmup Iteration  16: 1182891.162 ops/s
# Warmup Iteration  17: 1183676.335 ops/s
# Warmup Iteration  18: 1182788.882 ops/s
# Warmup Iteration  19: 1181624.493 ops/s
# Warmup Iteration  20: 1180331.302 ops/s
# Warmup Iteration  21: 1185852.887 ops/s
# Warmup Iteration  22: 1185240.897 ops/s
# Warmup Iteration  23: 1186656.809 ops/s
# Warmup Iteration  24: 1182849.618 ops/s
# Warmup Iteration  25: 1185167.972 ops/s
# Warmup Iteration  26: 1184332.577 ops/s
# Warmup Iteration  27: 1182583.844 ops/s
# Warmup Iteration  28: 1185969.874 ops/s
# Warmup Iteration  29: 1178876.511 ops/s
# Warmup Iteration  30: 1184041.303 ops/s
Iteration   1: 1182803.611 ops/s
Iteration   2: 1183846.368 ops/s
Iteration   3: 1184790.058 ops/s
Iteration   4: 1182647.741 ops/s
Iteration   5: 1176562.929 ops/s
Iteration   6: 1185874.528 ops/s
Iteration   7: 1183787.268 ops/s
Iteration   8: 1179258.286 ops/s
Iteration   9: 1184966.924 ops/s
Iteration  10: 1184917.153 ops/s
Iteration  11: 1185034.932 ops/s
Iteration  12: 1185930.477 ops/s
Iteration  13: 1186050.349 ops/s
Iteration  14: 1177960.665 ops/s
Iteration  15: 1183796.512 ops/s
Iteration  16: 1185205.292 ops/s
Iteration  17: 1184074.173 ops/s
Iteration  18: 1184327.250 ops/s
Iteration  19: 1182219.027 ops/s
Iteration  20: 1186742.310 ops/s
Iteration  21: 1182602.782 ops/s
Iteration  22: 1178334.158 ops/s
Iteration  23: 1185631.283 ops/s
Iteration  24: 1183976.560 ops/s
Iteration  25: 1186631.761 ops/s
Iteration  26: 1183625.079 ops/s
Iteration  27: 1183501.072 ops/s
Iteration  28: 1184252.317 ops/s
Iteration  29: 1185180.978 ops/s
Iteration  30: 1186367.621 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toImmutableSortedSetBy":
  1183696.649 ±(99.9%) 1724.223 ops/s [Average]
  (min, avg, max) = (1176562.929, 1183696.649, 1186742.310), stdev = 2580.735
  CI (99.9%): [1181972.426, 1185420.871] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_toImmutableSortedSetBy  thrpt   30  1183696.649 ± 1724.223  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 589786.646 ops/s
# Warmup Iteration   2: 1076193.966 ops/s
# Warmup Iteration   3: 1247010.676 ops/s
# Warmup Iteration   4: 1254052.854 ops/s
# Warmup Iteration   5: 1256409.305 ops/s
# Warmup Iteration   6: 1031188.127 ops/s
# Warmup Iteration   7: 1256947.167 ops/s
# Warmup Iteration   8: 1252892.829 ops/s
# Warmup Iteration   9: 1255911.352 ops/s
# Warmup Iteration  10: 1254480.776 ops/s
# Warmup Iteration  11: 1254034.695 ops/s
# Warmup Iteration  12: 1256643.328 ops/s
# Warmup Iteration  13: 1255126.486 ops/s
# Warmup Iteration  14: 1254469.138 ops/s
# Warmup Iteration  15: 1253554.213 ops/s
# Warmup Iteration  16: 1251618.988 ops/s
# Warmup Iteration  17: 1255603.317 ops/s
# Warmup Iteration  18: 1253038.833 ops/s
# Warmup Iteration  19: 1255648.118 ops/s
# Warmup Iteration  20: 1253911.364 ops/s
# Warmup Iteration  21: 1255345.681 ops/s
# Warmup Iteration  22: 1256362.244 ops/s
# Warmup Iteration  23: 1252935.294 ops/s
# Warmup Iteration  24: 1256909.595 ops/s
# Warmup Iteration  25: 1258007.348 ops/s
# Warmup Iteration  26: 1253609.328 ops/s
# Warmup Iteration  27: 1257433.545 ops/s
# Warmup Iteration  28: 1257592.712 ops/s
# Warmup Iteration  29: 1254755.446 ops/s
# Warmup Iteration  30: 1254209.049 ops/s
Iteration   1: 1259558.140 ops/s
Iteration   2: 1254962.434 ops/s
Iteration   3: 1259428.258 ops/s
Iteration   4: 1257550.980 ops/s
Iteration   5: 1249353.204 ops/s
Iteration   6: 1258519.038 ops/s
Iteration   7: 1256512.483 ops/s
Iteration   8: 1257947.761 ops/s
Iteration   9: 1253993.643 ops/s
Iteration  10: 1256236.636 ops/s
Iteration  11: 1247956.696 ops/s
Iteration  12: 1243258.932 ops/s
Iteration  13: 1255146.839 ops/s
Iteration  14: 1255288.358 ops/s
Iteration  15: 1259490.031 ops/s
Iteration  16: 1248789.729 ops/s
Iteration  17: 1253852.153 ops/s
Iteration  18: 1254089.245 ops/s
Iteration  19: 1253670.271 ops/s
Iteration  20: 1257611.523 ops/s
Iteration  21: 1257122.885 ops/s
Iteration  22: 1254195.288 ops/s
Iteration  23: 1257339.732 ops/s
Iteration  24: 1254046.620 ops/s
Iteration  25: 1256022.434 ops/s
Iteration  26: 1256798.518 ops/s
Iteration  27: 1254681.760 ops/s
Iteration  28: 1250592.727 ops/s
Iteration  29: 1259946.072 ops/s
Iteration  30: 1253634.140 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator":
  1254919.884 ±(99.9%) 2552.229 ops/s [Average]
  (min, avg, max) = (1243258.932, 1254919.884, 1259946.072), stdev = 3820.056
  CI (99.9%): [1252367.656, 1257472.113] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator  thrpt   30  1254919.884 ± 2552.229  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 573109.287 ops/s
# Warmup Iteration   2: 1131484.899 ops/s
# Warmup Iteration   3: 1266568.751 ops/s
# Warmup Iteration   4: 1275851.786 ops/s
# Warmup Iteration   5: 1083356.793 ops/s
# Warmup Iteration   6: 1235773.673 ops/s
# Warmup Iteration   7: 1272775.407 ops/s
# Warmup Iteration   8: 1275082.512 ops/s
# Warmup Iteration   9: 1274684.610 ops/s
# Warmup Iteration  10: 1277769.537 ops/s
# Warmup Iteration  11: 1274317.202 ops/s
# Warmup Iteration  12: 1275362.709 ops/s
# Warmup Iteration  13: 1274028.409 ops/s
# Warmup Iteration  14: 1273499.241 ops/s
# Warmup Iteration  15: 1276337.988 ops/s
# Warmup Iteration  16: 1274961.476 ops/s
# Warmup Iteration  17: 1272330.376 ops/s
# Warmup Iteration  18: 1273413.621 ops/s
# Warmup Iteration  19: 1274884.791 ops/s
# Warmup Iteration  20: 1273991.172 ops/s
# Warmup Iteration  21: 1273783.421 ops/s
# Warmup Iteration  22: 1274979.317 ops/s
# Warmup Iteration  23: 1273543.327 ops/s
# Warmup Iteration  24: 1274595.364 ops/s
# Warmup Iteration  25: 1275850.842 ops/s
# Warmup Iteration  26: 1275624.913 ops/s
# Warmup Iteration  27: 1275106.926 ops/s
# Warmup Iteration  28: 1271845.753 ops/s
# Warmup Iteration  29: 1275119.696 ops/s
# Warmup Iteration  30: 1271828.913 ops/s
Iteration   1: 1276437.989 ops/s
Iteration   2: 1276272.131 ops/s
Iteration   3: 1275482.946 ops/s
Iteration   4: 1279967.405 ops/s
Iteration   5: 1273639.041 ops/s
Iteration   6: 1276514.986 ops/s
Iteration   7: 1273833.578 ops/s
Iteration   8: 1274677.561 ops/s
Iteration   9: 1279866.950 ops/s
Iteration  10: 1274248.413 ops/s
Iteration  11: 1274065.623 ops/s
Iteration  12: 1274947.948 ops/s
Iteration  13: 1271291.445 ops/s
Iteration  14: 1276098.481 ops/s
Iteration  15: 1279874.000 ops/s
Iteration  16: 1277023.816 ops/s
Iteration  17: 1279468.766 ops/s
Iteration  18: 1274502.344 ops/s
Iteration  19: 1276238.626 ops/s
Iteration  20: 1279563.265 ops/s
Iteration  21: 1273824.522 ops/s
Iteration  22: 1273467.457 ops/s
Iteration  23: 1277974.928 ops/s
Iteration  24: 1274397.565 ops/s
Iteration  25: 1275412.059 ops/s
Iteration  26: 1275708.603 ops/s
Iteration  27: 1274961.043 ops/s
Iteration  28: 1271772.497 ops/s
Iteration  29: 1276645.045 ops/s
Iteration  30: 1275613.949 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toList":
  1275793.099 ±(99.9%) 1534.443 ops/s [Average]
  (min, avg, max) = (1271291.445, 1275793.099, 1279967.405), stdev = 2296.683
  CI (99.9%): [1274258.656, 1277327.543] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_toList  thrpt   30  1275793.099 ± 1534.443  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 302043.394 ops/s
# Warmup Iteration   2: 505738.760 ops/s
# Warmup Iteration   3: 580917.440 ops/s
# Warmup Iteration   4: 583739.688 ops/s
# Warmup Iteration   5: 580889.084 ops/s
# Warmup Iteration   6: 479918.452 ops/s
# Warmup Iteration   7: 583463.729 ops/s
# Warmup Iteration   8: 582120.868 ops/s
# Warmup Iteration   9: 583668.974 ops/s
# Warmup Iteration  10: 583774.318 ops/s
# Warmup Iteration  11: 582030.886 ops/s
# Warmup Iteration  12: 584139.838 ops/s
# Warmup Iteration  13: 584352.211 ops/s
# Warmup Iteration  14: 580273.406 ops/s
# Warmup Iteration  15: 583614.866 ops/s
# Warmup Iteration  16: 583034.837 ops/s
# Warmup Iteration  17: 582089.387 ops/s
# Warmup Iteration  18: 582007.034 ops/s
# Warmup Iteration  19: 578547.583 ops/s
# Warmup Iteration  20: 584007.493 ops/s
# Warmup Iteration  21: 582723.659 ops/s
# Warmup Iteration  22: 585197.876 ops/s
# Warmup Iteration  23: 584442.173 ops/s
# Warmup Iteration  24: 584500.169 ops/s
# Warmup Iteration  25: 582923.759 ops/s
# Warmup Iteration  26: 582627.777 ops/s
# Warmup Iteration  27: 582403.624 ops/s
# Warmup Iteration  28: 585195.839 ops/s
# Warmup Iteration  29: 580769.482 ops/s
# Warmup Iteration  30: 582185.512 ops/s
Iteration   1: 584162.258 ops/s
Iteration   2: 584653.223 ops/s
Iteration   3: 582235.201 ops/s
Iteration   4: 584817.727 ops/s
Iteration   5: 578307.035 ops/s
Iteration   6: 585646.972 ops/s
Iteration   7: 583539.066 ops/s
Iteration   8: 584050.272 ops/s
Iteration   9: 584193.212 ops/s
Iteration  10: 583349.516 ops/s
Iteration  11: 582698.639 ops/s
Iteration  12: 579683.598 ops/s
Iteration  13: 586783.475 ops/s
Iteration  14: 581163.140 ops/s
Iteration  15: 583114.488 ops/s
Iteration  16: 582887.103 ops/s
Iteration  17: 584843.667 ops/s
Iteration  18: 585739.731 ops/s
Iteration  19: 580274.737 ops/s
Iteration  20: 585195.370 ops/s
Iteration  21: 585778.132 ops/s
Iteration  22: 582611.929 ops/s
Iteration  23: 585343.103 ops/s
Iteration  24: 584650.395 ops/s
Iteration  25: 582545.300 ops/s
Iteration  26: 585750.320 ops/s
Iteration  27: 580488.434 ops/s
Iteration  28: 585066.983 ops/s
Iteration  29: 580425.885 ops/s
Iteration  30: 586367.740 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toMap":
  583545.555 ±(99.9%) 1443.493 ops/s [Average]
  (min, avg, max) = (578307.035, 583545.555, 586783.475), stdev = 2160.553
  CI (99.9%): [582102.062, 584989.048] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_toMap  thrpt   30  583545.555 ± 1443.493  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toMapOfItemToCount$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toMapOfItemToCount

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1285965.723 ops/s
# Warmup Iteration   2: 2416692.315 ops/s
# Warmup Iteration   3: 2701882.653 ops/s
# Warmup Iteration   4: 2656804.224 ops/s
# Warmup Iteration   5: 2355485.761 ops/s
# Warmup Iteration   6: 2568713.988 ops/s
# Warmup Iteration   7: 2700435.269 ops/s
# Warmup Iteration   8: 2655600.416 ops/s
# Warmup Iteration   9: 2706158.392 ops/s
# Warmup Iteration  10: 2697462.721 ops/s
# Warmup Iteration  11: 2700590.507 ops/s
# Warmup Iteration  12: 2698525.456 ops/s
# Warmup Iteration  13: 2644782.611 ops/s
# Warmup Iteration  14: 2680485.264 ops/s
# Warmup Iteration  15: 2682889.839 ops/s
# Warmup Iteration  16: 2693487.330 ops/s
# Warmup Iteration  17: 2715882.482 ops/s
# Warmup Iteration  18: 2697618.633 ops/s
# Warmup Iteration  19: 2720412.487 ops/s
# Warmup Iteration  20: 2709013.986 ops/s
# Warmup Iteration  21: 2714485.174 ops/s
# Warmup Iteration  22: 2712095.284 ops/s
# Warmup Iteration  23: 2695205.911 ops/s
# Warmup Iteration  24: 2650494.403 ops/s
# Warmup Iteration  25: 2700434.176 ops/s
# Warmup Iteration  26: 2729813.384 ops/s
# Warmup Iteration  27: 2694945.034 ops/s
# Warmup Iteration  28: 2700158.930 ops/s
# Warmup Iteration  29: 2697283.058 ops/s
# Warmup Iteration  30: 2702854.993 ops/s
Iteration   1: 2731049.231 ops/s
Iteration   2: 2710218.555 ops/s
Iteration   3: 2684358.103 ops/s
Iteration   4: 2678870.695 ops/s
Iteration   5: 2718714.844 ops/s
Iteration   6: 2709326.856 ops/s
Iteration   7: 2685024.371 ops/s
Iteration   8: 2710603.047 ops/s
Iteration   9: 2723273.866 ops/s
Iteration  10: 2679840.445 ops/s
Iteration  11: 2706080.515 ops/s
Iteration  12: 2722519.120 ops/s
Iteration  13: 2723288.769 ops/s
Iteration  14: 2701990.943 ops/s
Iteration  15: 2707197.571 ops/s
Iteration  16: 2716316.009 ops/s
Iteration  17: 2702668.345 ops/s
Iteration  18: 2699342.129 ops/s
Iteration  19: 2683061.915 ops/s
Iteration  20: 2710278.496 ops/s
Iteration  21: 2703383.238 ops/s
Iteration  22: 2702072.794 ops/s
Iteration  23: 2698640.804 ops/s
Iteration  24: 2636777.850 ops/s
Iteration  25: 2618394.216 ops/s
Iteration  26: 2684030.578 ops/s
Iteration  27: 2677480.966 ops/s
Iteration  28: 2553077.214 ops/s
Iteration  29: 2651002.395 ops/s
Iteration  30: 2715117.759 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toMapOfItemToCount":
  2691466.721 ±(99.9%) 24424.673 ops/s [Average]
  (min, avg, max) = (2553077.214, 2691466.721, 2731049.231), stdev = 36557.704
  CI (99.9%): [2667042.048, 2715891.395] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_toMapOfItemToCount  thrpt   30  2691466.721 ± 24424.673  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toMapTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toMapTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 431149.889 ops/s
# Warmup Iteration   2: 841608.723 ops/s
# Warmup Iteration   3: 903944.019 ops/s
# Warmup Iteration   4: 905271.635 ops/s
# Warmup Iteration   5: 750377.620 ops/s
# Warmup Iteration   6: 908725.199 ops/s
# Warmup Iteration   7: 906052.947 ops/s
# Warmup Iteration   8: 906856.061 ops/s
# Warmup Iteration   9: 904681.250 ops/s
# Warmup Iteration  10: 903038.954 ops/s
# Warmup Iteration  11: 907741.627 ops/s
# Warmup Iteration  12: 906154.604 ops/s
# Warmup Iteration  13: 901642.984 ops/s
# Warmup Iteration  14: 908336.255 ops/s
# Warmup Iteration  15: 900246.115 ops/s
# Warmup Iteration  16: 906783.171 ops/s
# Warmup Iteration  17: 906273.804 ops/s
# Warmup Iteration  18: 907967.279 ops/s
# Warmup Iteration  19: 907480.402 ops/s
# Warmup Iteration  20: 902788.732 ops/s
# Warmup Iteration  21: 904590.782 ops/s
# Warmup Iteration  22: 901910.567 ops/s
# Warmup Iteration  23: 911407.979 ops/s
# Warmup Iteration  24: 904913.991 ops/s
# Warmup Iteration  25: 908074.236 ops/s
# Warmup Iteration  26: 909394.258 ops/s
# Warmup Iteration  27: 902722.353 ops/s
# Warmup Iteration  28: 904175.243 ops/s
# Warmup Iteration  29: 902114.681 ops/s
# Warmup Iteration  30: 908120.307 ops/s
Iteration   1: 911317.673 ops/s
Iteration   2: 906015.313 ops/s
Iteration   3: 907363.319 ops/s
Iteration   4: 903752.164 ops/s
Iteration   5: 901946.245 ops/s
Iteration   6: 906839.081 ops/s
Iteration   7: 911645.104 ops/s
Iteration   8: 905863.086 ops/s
Iteration   9: 902211.324 ops/s
Iteration  10: 908542.140 ops/s
Iteration  11: 906311.913 ops/s
Iteration  12: 907134.725 ops/s
Iteration  13: 909018.248 ops/s
Iteration  14: 907165.650 ops/s
Iteration  15: 906751.064 ops/s
Iteration  16: 901627.335 ops/s
Iteration  17: 908170.767 ops/s
Iteration  18: 904294.902 ops/s
Iteration  19: 902713.444 ops/s
Iteration  20: 904456.751 ops/s
Iteration  21: 907085.603 ops/s
Iteration  22: 905029.371 ops/s
Iteration  23: 904896.878 ops/s
Iteration  24: 902665.163 ops/s
Iteration  25: 912645.715 ops/s
Iteration  26: 905975.956 ops/s
Iteration  27: 910649.638 ops/s
Iteration  28: 911399.099 ops/s
Iteration  29: 907949.240 ops/s
Iteration  30: 909881.379 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toMapTarget":
  906710.610 ±(99.9%) 2040.411 ops/s [Average]
  (min, avg, max) = (901627.335, 906710.610, 912645.715), stdev = 3053.991
  CI (99.9%): [904670.199, 908751.021] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_toMapTarget  thrpt   30  906710.610 ± 2040.411  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 532457.982 ops/s
# Warmup Iteration   2: 955749.210 ops/s
# Warmup Iteration   3: 1150568.622 ops/s
# Warmup Iteration   4: 1164376.935 ops/s
# Warmup Iteration   5: 1157737.437 ops/s
# Warmup Iteration   6: 942885.776 ops/s
# Warmup Iteration   7: 1159666.240 ops/s
# Warmup Iteration   8: 1161966.569 ops/s
# Warmup Iteration   9: 1162418.671 ops/s
# Warmup Iteration  10: 1154702.542 ops/s
# Warmup Iteration  11: 1162834.865 ops/s
# Warmup Iteration  12: 1161585.720 ops/s
# Warmup Iteration  13: 1161735.514 ops/s
# Warmup Iteration  14: 1160351.840 ops/s
# Warmup Iteration  15: 1157698.999 ops/s
# Warmup Iteration  16: 1165271.828 ops/s
# Warmup Iteration  17: 1160872.874 ops/s
# Warmup Iteration  18: 1164109.200 ops/s
# Warmup Iteration  19: 1162842.848 ops/s
# Warmup Iteration  20: 1162963.362 ops/s
# Warmup Iteration  21: 1160913.611 ops/s
# Warmup Iteration  22: 1159283.908 ops/s
# Warmup Iteration  23: 1156501.797 ops/s
# Warmup Iteration  24: 1156875.043 ops/s
# Warmup Iteration  25: 1157717.087 ops/s
# Warmup Iteration  26: 1162218.916 ops/s
# Warmup Iteration  27: 1159678.769 ops/s
# Warmup Iteration  28: 1164932.396 ops/s
# Warmup Iteration  29: 1162256.051 ops/s
# Warmup Iteration  30: 1162513.962 ops/s
Iteration   1: 1153622.514 ops/s
Iteration   2: 1165847.973 ops/s
Iteration   3: 1156327.970 ops/s
Iteration   4: 1163317.138 ops/s
Iteration   5: 1157571.610 ops/s
Iteration   6: 1166122.852 ops/s
Iteration   7: 1149498.847 ops/s
Iteration   8: 1161743.345 ops/s
Iteration   9: 1163935.735 ops/s
Iteration  10: 1160598.587 ops/s
Iteration  11: 1159737.078 ops/s
Iteration  12: 1152928.919 ops/s
Iteration  13: 1166974.761 ops/s
Iteration  14: 1158140.545 ops/s
Iteration  15: 1161484.856 ops/s
Iteration  16: 1160306.627 ops/s
Iteration  17: 1163186.652 ops/s
Iteration  18: 1154537.135 ops/s
Iteration  19: 1159910.679 ops/s
Iteration  20: 1165329.266 ops/s
Iteration  21: 1164587.083 ops/s
Iteration  22: 1165682.448 ops/s
Iteration  23: 1160491.486 ops/s
Iteration  24: 1156410.067 ops/s
Iteration  25: 1155006.052 ops/s
Iteration  26: 1164535.006 ops/s
Iteration  27: 1161096.554 ops/s
Iteration  28: 1160062.504 ops/s
Iteration  29: 1159249.433 ops/s
Iteration  30: 1165399.656 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toSet":
  1160454.779 ±(99.9%) 2991.686 ops/s [Average]
  (min, avg, max) = (1149498.847, 1160454.779, 1166974.761), stdev = 4477.815
  CI (99.9%): [1157463.093, 1163446.465] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_toSet  thrpt   30  1160454.779 ± 2991.686  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toSortedBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toSortedBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 231145.374 ops/s
# Warmup Iteration   2: 357352.097 ops/s
# Warmup Iteration   3: 440014.286 ops/s
# Warmup Iteration   4: 438342.864 ops/s
# Warmup Iteration   5: 439719.534 ops/s
# Warmup Iteration   6: 442875.111 ops/s
# Warmup Iteration   7: 403034.322 ops/s
# Warmup Iteration   8: 408837.234 ops/s
# Warmup Iteration   9: 441201.009 ops/s
# Warmup Iteration  10: 441853.389 ops/s
# Warmup Iteration  11: 441125.140 ops/s
# Warmup Iteration  12: 441087.069 ops/s
# Warmup Iteration  13: 441190.432 ops/s
# Warmup Iteration  14: 441368.381 ops/s
# Warmup Iteration  15: 439445.913 ops/s
# Warmup Iteration  16: 441778.272 ops/s
# Warmup Iteration  17: 440044.303 ops/s
# Warmup Iteration  18: 441342.303 ops/s
# Warmup Iteration  19: 441275.001 ops/s
# Warmup Iteration  20: 442580.781 ops/s
# Warmup Iteration  21: 442020.651 ops/s
# Warmup Iteration  22: 438737.728 ops/s
# Warmup Iteration  23: 439486.433 ops/s
# Warmup Iteration  24: 442646.130 ops/s
# Warmup Iteration  25: 440045.578 ops/s
# Warmup Iteration  26: 440066.559 ops/s
# Warmup Iteration  27: 442637.751 ops/s
# Warmup Iteration  28: 439683.660 ops/s
# Warmup Iteration  29: 440617.216 ops/s
# Warmup Iteration  30: 442108.267 ops/s
Iteration   1: 440127.877 ops/s
Iteration   2: 441840.605 ops/s
Iteration   3: 441632.156 ops/s
Iteration   4: 441416.530 ops/s
Iteration   5: 442538.524 ops/s
Iteration   6: 440769.315 ops/s
Iteration   7: 440606.458 ops/s
Iteration   8: 441050.582 ops/s
Iteration   9: 440021.051 ops/s
Iteration  10: 442452.522 ops/s
Iteration  11: 439036.327 ops/s
Iteration  12: 440870.583 ops/s
Iteration  13: 441794.618 ops/s
Iteration  14: 441511.552 ops/s
Iteration  15: 436865.563 ops/s
Iteration  16: 439765.336 ops/s
Iteration  17: 439951.688 ops/s
Iteration  18: 439018.400 ops/s
Iteration  19: 433782.380 ops/s
Iteration  20: 440906.952 ops/s
Iteration  21: 439356.573 ops/s
Iteration  22: 441346.611 ops/s
Iteration  23: 441194.843 ops/s
Iteration  24: 445728.723 ops/s
Iteration  25: 441531.372 ops/s
Iteration  26: 443383.293 ops/s
Iteration  27: 441071.879 ops/s
Iteration  28: 438326.058 ops/s
Iteration  29: 442417.593 ops/s
Iteration  30: 439735.977 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toSortedBag":
  440668.398 ±(99.9%) 1397.289 ops/s [Average]
  (min, avg, max) = (433782.380, 440668.398, 445728.723), stdev = 2091.397
  CI (99.9%): [439271.109, 442065.687] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_toSortedBag  thrpt   30  440668.398 ± 1397.289  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toSortedBagBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toSortedBagBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 134232.345 ops/s
# Warmup Iteration   2: 256116.430 ops/s
# Warmup Iteration   3: 293965.455 ops/s
# Warmup Iteration   4: 295292.036 ops/s
# Warmup Iteration   5: 288163.025 ops/s
# Warmup Iteration   6: 255501.916 ops/s
# Warmup Iteration   7: 295947.167 ops/s
# Warmup Iteration   8: 295972.780 ops/s
# Warmup Iteration   9: 295814.223 ops/s
# Warmup Iteration  10: 295797.958 ops/s
# Warmup Iteration  11: 296169.451 ops/s
# Warmup Iteration  12: 295660.049 ops/s
# Warmup Iteration  13: 295820.696 ops/s
# Warmup Iteration  14: 296349.394 ops/s
# Warmup Iteration  15: 296383.764 ops/s
# Warmup Iteration  16: 295674.190 ops/s
# Warmup Iteration  17: 296056.574 ops/s
# Warmup Iteration  18: 295555.840 ops/s
# Warmup Iteration  19: 296459.260 ops/s
# Warmup Iteration  20: 296281.572 ops/s
# Warmup Iteration  21: 295619.458 ops/s
# Warmup Iteration  22: 295692.577 ops/s
# Warmup Iteration  23: 296164.546 ops/s
# Warmup Iteration  24: 296835.016 ops/s
# Warmup Iteration  25: 295727.749 ops/s
# Warmup Iteration  26: 296076.381 ops/s
# Warmup Iteration  27: 296465.918 ops/s
# Warmup Iteration  28: 296328.477 ops/s
# Warmup Iteration  29: 296390.429 ops/s
# Warmup Iteration  30: 295286.421 ops/s
Iteration   1: 295520.476 ops/s
Iteration   2: 296006.258 ops/s
Iteration   3: 294470.340 ops/s
Iteration   4: 295056.942 ops/s
Iteration   5: 295539.515 ops/s
Iteration   6: 295253.704 ops/s
Iteration   7: 296010.274 ops/s
Iteration   8: 295653.538 ops/s
Iteration   9: 296601.739 ops/s
Iteration  10: 295602.902 ops/s
Iteration  11: 296694.534 ops/s
Iteration  12: 295915.879 ops/s
Iteration  13: 296163.971 ops/s
Iteration  14: 296340.590 ops/s
Iteration  15: 295722.814 ops/s
Iteration  16: 296271.531 ops/s
Iteration  17: 295465.668 ops/s
Iteration  18: 295926.221 ops/s
Iteration  19: 296153.648 ops/s
Iteration  20: 295785.039 ops/s
Iteration  21: 296054.593 ops/s
Iteration  22: 296144.345 ops/s
Iteration  23: 295630.369 ops/s
Iteration  24: 296386.447 ops/s
Iteration  25: 296048.541 ops/s
Iteration  26: 295608.713 ops/s
Iteration  27: 296429.635 ops/s
Iteration  28: 295384.769 ops/s
Iteration  29: 296497.575 ops/s
Iteration  30: 295662.943 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toSortedBagBy":
  295866.784 ±(99.9%) 325.159 ops/s [Average]
  (min, avg, max) = (294470.340, 295866.784, 296694.534), stdev = 486.682
  CI (99.9%): [295541.625, 296191.943] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score     Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_toSortedBagBy  thrpt   30  295866.784 ± 325.159  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toSortedBag_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toSortedBag_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 429516.406 ops/s
# Warmup Iteration   2: 808613.747 ops/s
# Warmup Iteration   3: 941986.493 ops/s
# Warmup Iteration   4: 945441.529 ops/s
# Warmup Iteration   5: 944858.865 ops/s
# Warmup Iteration   6: 786015.449 ops/s
# Warmup Iteration   7: 943512.783 ops/s
# Warmup Iteration   8: 944086.864 ops/s
# Warmup Iteration   9: 944921.386 ops/s
# Warmup Iteration  10: 944970.502 ops/s
# Warmup Iteration  11: 946324.153 ops/s
# Warmup Iteration  12: 946169.234 ops/s
# Warmup Iteration  13: 944921.335 ops/s
# Warmup Iteration  14: 947016.667 ops/s
# Warmup Iteration  15: 945322.769 ops/s
# Warmup Iteration  16: 943778.364 ops/s
# Warmup Iteration  17: 946411.043 ops/s
# Warmup Iteration  18: 945295.187 ops/s
# Warmup Iteration  19: 945655.354 ops/s
# Warmup Iteration  20: 944904.931 ops/s
# Warmup Iteration  21: 945629.724 ops/s
# Warmup Iteration  22: 945452.750 ops/s
# Warmup Iteration  23: 944111.247 ops/s
# Warmup Iteration  24: 944725.717 ops/s
# Warmup Iteration  25: 943718.374 ops/s
# Warmup Iteration  26: 943127.052 ops/s
# Warmup Iteration  27: 943990.023 ops/s
# Warmup Iteration  28: 943370.462 ops/s
# Warmup Iteration  29: 945223.662 ops/s
# Warmup Iteration  30: 944677.337 ops/s
Iteration   1: 943928.388 ops/s
Iteration   2: 947289.072 ops/s
Iteration   3: 943441.351 ops/s
Iteration   4: 946125.598 ops/s
Iteration   5: 945769.759 ops/s
Iteration   6: 940931.596 ops/s
Iteration   7: 943599.601 ops/s
Iteration   8: 946824.508 ops/s
Iteration   9: 946693.836 ops/s
Iteration  10: 944430.240 ops/s
Iteration  11: 943371.825 ops/s
Iteration  12: 948448.683 ops/s
Iteration  13: 945570.549 ops/s
Iteration  14: 945308.714 ops/s
Iteration  15: 942473.787 ops/s
Iteration  16: 947288.967 ops/s
Iteration  17: 944466.329 ops/s
Iteration  18: 943204.302 ops/s
Iteration  19: 947176.017 ops/s
Iteration  20: 945127.539 ops/s
Iteration  21: 943617.737 ops/s
Iteration  22: 946019.936 ops/s
Iteration  23: 944675.784 ops/s
Iteration  24: 944284.926 ops/s
Iteration  25: 946192.080 ops/s
Iteration  26: 947010.795 ops/s
Iteration  27: 944126.859 ops/s
Iteration  28: 941091.723 ops/s
Iteration  29: 942743.722 ops/s
Iteration  30: 939301.000 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toSortedBag_natural_ordering":
  944684.507 ±(99.9%) 1415.715 ops/s [Average]
  (min, avg, max) = (939301.000, 944684.507, 948448.683), stdev = 2118.976
  CI (99.9%): [943268.793, 946100.222] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_toSortedBag_natural_ordering  thrpt   30  944684.507 ± 1415.715  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toSortedBag_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toSortedBag_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 471357.749 ops/s
# Warmup Iteration   2: 892017.319 ops/s
# Warmup Iteration   3: 1049593.777 ops/s
# Warmup Iteration   4: 1055435.714 ops/s
# Warmup Iteration   5: 1056059.506 ops/s
# Warmup Iteration   6: 873696.363 ops/s
# Warmup Iteration   7: 1052955.076 ops/s
# Warmup Iteration   8: 1055462.209 ops/s
# Warmup Iteration   9: 1057138.316 ops/s
# Warmup Iteration  10: 1054749.361 ops/s
# Warmup Iteration  11: 1053518.891 ops/s
# Warmup Iteration  12: 1055920.119 ops/s
# Warmup Iteration  13: 1055625.725 ops/s
# Warmup Iteration  14: 1055928.951 ops/s
# Warmup Iteration  15: 1056166.948 ops/s
# Warmup Iteration  16: 1053959.570 ops/s
# Warmup Iteration  17: 1053356.699 ops/s
# Warmup Iteration  18: 1054429.337 ops/s
# Warmup Iteration  19: 1050257.701 ops/s
# Warmup Iteration  20: 1055058.954 ops/s
# Warmup Iteration  21: 1053850.265 ops/s
# Warmup Iteration  22: 1053407.532 ops/s
# Warmup Iteration  23: 1056558.963 ops/s
# Warmup Iteration  24: 1053931.837 ops/s
# Warmup Iteration  25: 1054494.700 ops/s
# Warmup Iteration  26: 1056552.652 ops/s
# Warmup Iteration  27: 1056934.947 ops/s
# Warmup Iteration  28: 1052497.667 ops/s
# Warmup Iteration  29: 1056268.971 ops/s
# Warmup Iteration  30: 1051475.562 ops/s
Iteration   1: 1057248.942 ops/s
Iteration   2: 1056308.359 ops/s
Iteration   3: 1055990.417 ops/s
Iteration   4: 1057149.579 ops/s
Iteration   5: 1051839.384 ops/s
Iteration   6: 1056664.275 ops/s
Iteration   7: 1054758.727 ops/s
Iteration   8: 1056582.532 ops/s
Iteration   9: 1049616.636 ops/s
Iteration  10: 1054578.558 ops/s
Iteration  11: 1056051.963 ops/s
Iteration  12: 1054562.759 ops/s
Iteration  13: 1057090.859 ops/s
Iteration  14: 1053027.952 ops/s
Iteration  15: 1053708.932 ops/s
Iteration  16: 1057171.523 ops/s
Iteration  17: 1056000.841 ops/s
Iteration  18: 1058597.090 ops/s
Iteration  19: 1055347.925 ops/s
Iteration  20: 1058700.599 ops/s
Iteration  21: 1056019.763 ops/s
Iteration  22: 1058387.187 ops/s
Iteration  23: 1058042.618 ops/s
Iteration  24: 1054066.765 ops/s
Iteration  25: 1055605.756 ops/s
Iteration  26: 1056718.963 ops/s
Iteration  27: 1056779.810 ops/s
Iteration  28: 1055567.176 ops/s
Iteration  29: 1055365.404 ops/s
Iteration  30: 1057524.876 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toSortedBag_with_comparator":
  1055835.872 ±(99.9%) 1333.626 ops/s [Average]
  (min, avg, max) = (1049616.636, 1055835.872, 1058700.599), stdev = 1996.108
  CI (99.9%): [1054502.247, 1057169.498] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_toSortedBag_with_comparator  thrpt   30  1055835.872 ± 1333.626  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toSortedBag_with_null$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toSortedBag_with_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 474806.472 ops/s
# Warmup Iteration   2: 522608.055 ops/s
# Warmup Iteration   3: 697973.232 ops/s
# Warmup Iteration   4: 711813.610 ops/s
# Warmup Iteration   5: 709199.606 ops/s
# Warmup Iteration   6: 713522.669 ops/s
# Warmup Iteration   7: 711696.112 ops/s
# Warmup Iteration   8: 712971.508 ops/s
# Warmup Iteration   9: 713515.371 ops/s
# Warmup Iteration  10: 712816.627 ops/s
# Warmup Iteration  11: 685197.695 ops/s
# Warmup Iteration  12: 616312.065 ops/s
# Warmup Iteration  13: 711088.363 ops/s
# Warmup Iteration  14: 712621.018 ops/s
# Warmup Iteration  15: 713484.869 ops/s
# Warmup Iteration  16: 712876.220 ops/s
# Warmup Iteration  17: 743695.401 ops/s
# Warmup Iteration  18: 744046.816 ops/s
# Warmup Iteration  19: 744619.348 ops/s
# Warmup Iteration  20: 743404.189 ops/s
# Warmup Iteration  21: 745626.916 ops/s
# Warmup Iteration  22: 744531.712 ops/s
# Warmup Iteration  23: 744337.994 ops/s
# Warmup Iteration  24: 744371.999 ops/s
# Warmup Iteration  25: 745646.670 ops/s
# Warmup Iteration  26: 745486.644 ops/s
# Warmup Iteration  27: 742888.558 ops/s
# Warmup Iteration  28: 744213.024 ops/s
# Warmup Iteration  29: 744244.309 ops/s
# Warmup Iteration  30: 744839.132 ops/s
Iteration   1: 744498.549 ops/s
Iteration   2: 744840.072 ops/s
Iteration   3: 741212.995 ops/s
Iteration   4: 741435.300 ops/s
Iteration   5: 740901.742 ops/s
Iteration   6: 747058.548 ops/s
Iteration   7: 740094.300 ops/s
Iteration   8: 743950.336 ops/s
Iteration   9: 742438.047 ops/s
Iteration  10: 744672.652 ops/s
Iteration  11: 743773.860 ops/s
Iteration  12: 743806.272 ops/s
Iteration  13: 743135.936 ops/s
Iteration  14: 745796.019 ops/s
Iteration  15: 745493.153 ops/s
Iteration  16: 746164.831 ops/s
Iteration  17: 745380.522 ops/s
Iteration  18: 745787.307 ops/s
Iteration  19: 744074.177 ops/s
Iteration  20: 741674.177 ops/s
Iteration  21: 746026.191 ops/s
Iteration  22: 745956.855 ops/s
Iteration  23: 740169.433 ops/s
Iteration  24: 742866.220 ops/s
Iteration  25: 739513.800 ops/s
Iteration  26: 740330.269 ops/s
Iteration  27: 743991.029 ops/s
Iteration  28: 742770.639 ops/s
Iteration  29: 742371.199 ops/s
Iteration  30: 743622.804 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toSortedBag_with_null":
  743460.241 ±(99.9%) 1397.857 ops/s [Average]
  (min, avg, max) = (739513.800, 743460.241, 747058.548), stdev = 2092.247
  CI (99.9%): [742062.384, 744858.098] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_toSortedBag_with_null  thrpt   30  743460.241 ± 1397.857  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toSortedList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toSortedList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 635756.082 ops/s
# Warmup Iteration   2: 749856.172 ops/s
# Warmup Iteration   3: 1044874.148 ops/s
# Warmup Iteration   4: 1038032.873 ops/s
# Warmup Iteration   5: 1036330.534 ops/s
# Warmup Iteration   6: 1040118.351 ops/s
# Warmup Iteration   7: 1042790.968 ops/s
# Warmup Iteration   8: 1044467.741 ops/s
# Warmup Iteration   9: 1043033.994 ops/s
# Warmup Iteration  10: 874994.043 ops/s
# Warmup Iteration  11: 1018154.537 ops/s
# Warmup Iteration  12: 1042796.333 ops/s
# Warmup Iteration  13: 1043592.717 ops/s
# Warmup Iteration  14: 1042707.416 ops/s
# Warmup Iteration  15: 1043121.712 ops/s
# Warmup Iteration  16: 1042139.112 ops/s
# Warmup Iteration  17: 1041249.901 ops/s
# Warmup Iteration  18: 1043666.893 ops/s
# Warmup Iteration  19: 1042174.299 ops/s
# Warmup Iteration  20: 1041779.307 ops/s
# Warmup Iteration  21: 1043180.080 ops/s
# Warmup Iteration  22: 1043571.247 ops/s
# Warmup Iteration  23: 1043489.967 ops/s
# Warmup Iteration  24: 1043451.843 ops/s
# Warmup Iteration  25: 1041547.389 ops/s
# Warmup Iteration  26: 1042910.899 ops/s
# Warmup Iteration  27: 1040277.527 ops/s
# Warmup Iteration  28: 1041123.322 ops/s
# Warmup Iteration  29: 1043438.685 ops/s
# Warmup Iteration  30: 1044767.120 ops/s
Iteration   1: 1040981.956 ops/s
Iteration   2: 1043378.275 ops/s
Iteration   3: 1041400.462 ops/s
Iteration   4: 1046312.714 ops/s
Iteration   5: 1039745.215 ops/s
Iteration   6: 1043472.716 ops/s
Iteration   7: 1044220.024 ops/s
Iteration   8: 1042659.993 ops/s
Iteration   9: 1042640.535 ops/s
Iteration  10: 1038783.553 ops/s
Iteration  11: 1039975.768 ops/s
Iteration  12: 1043386.904 ops/s
Iteration  13: 1045277.498 ops/s
Iteration  14: 1043125.722 ops/s
Iteration  15: 1042336.375 ops/s
Iteration  16: 1043588.149 ops/s
Iteration  17: 1044206.153 ops/s
Iteration  18: 1042894.944 ops/s
Iteration  19: 1044687.584 ops/s
Iteration  20: 1044045.543 ops/s
Iteration  21: 1042937.591 ops/s
Iteration  22: 1038743.075 ops/s
Iteration  23: 1040380.777 ops/s
Iteration  24: 1042379.254 ops/s
Iteration  25: 1041226.677 ops/s
Iteration  26: 1045172.933 ops/s
Iteration  27: 1045651.570 ops/s
Iteration  28: 1042872.340 ops/s
Iteration  29: 1045275.628 ops/s
Iteration  30: 1042272.391 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toSortedList":
  1042801.077 ±(99.9%) 1322.179 ops/s [Average]
  (min, avg, max) = (1038743.075, 1042801.077, 1046312.714), stdev = 1978.975
  CI (99.9%): [1041478.899, 1044123.256] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_toSortedList  thrpt   30  1042801.077 ± 1322.179  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toSortedListBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toSortedListBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 312893.137 ops/s
# Warmup Iteration   2: 457872.871 ops/s
# Warmup Iteration   3: 570861.990 ops/s
# Warmup Iteration   4: 568914.908 ops/s
# Warmup Iteration   5: 570480.569 ops/s
# Warmup Iteration   6: 570359.392 ops/s
# Warmup Iteration   7: 511977.188 ops/s
# Warmup Iteration   8: 528481.032 ops/s
# Warmup Iteration   9: 571750.972 ops/s
# Warmup Iteration  10: 571846.151 ops/s
# Warmup Iteration  11: 571351.283 ops/s
# Warmup Iteration  12: 570450.650 ops/s
# Warmup Iteration  13: 572803.011 ops/s
# Warmup Iteration  14: 570781.338 ops/s
# Warmup Iteration  15: 572102.280 ops/s
# Warmup Iteration  16: 570417.604 ops/s
# Warmup Iteration  17: 572487.668 ops/s
# Warmup Iteration  18: 572063.103 ops/s
# Warmup Iteration  19: 571364.741 ops/s
# Warmup Iteration  20: 573449.410 ops/s
# Warmup Iteration  21: 572600.087 ops/s
# Warmup Iteration  22: 570800.318 ops/s
# Warmup Iteration  23: 572483.282 ops/s
# Warmup Iteration  24: 570473.588 ops/s
# Warmup Iteration  25: 571975.564 ops/s
# Warmup Iteration  26: 572087.525 ops/s
# Warmup Iteration  27: 574027.208 ops/s
# Warmup Iteration  28: 572257.322 ops/s
# Warmup Iteration  29: 570192.481 ops/s
# Warmup Iteration  30: 570960.611 ops/s
Iteration   1: 568683.293 ops/s
Iteration   2: 571182.621 ops/s
Iteration   3: 570986.268 ops/s
Iteration   4: 571164.093 ops/s
Iteration   5: 571326.798 ops/s
Iteration   6: 572026.171 ops/s
Iteration   7: 571441.226 ops/s
Iteration   8: 572771.991 ops/s
Iteration   9: 570850.284 ops/s
Iteration  10: 572000.162 ops/s
Iteration  11: 567186.396 ops/s
Iteration  12: 573169.869 ops/s
Iteration  13: 570180.973 ops/s
Iteration  14: 571738.451 ops/s
Iteration  15: 573361.737 ops/s
Iteration  16: 569351.561 ops/s
Iteration  17: 572392.779 ops/s
Iteration  18: 570778.438 ops/s
Iteration  19: 571571.912 ops/s
Iteration  20: 567872.155 ops/s
Iteration  21: 572274.748 ops/s
Iteration  22: 572200.426 ops/s
Iteration  23: 572924.163 ops/s
Iteration  24: 572779.160 ops/s
Iteration  25: 570846.909 ops/s
Iteration  26: 571955.199 ops/s
Iteration  27: 571804.090 ops/s
Iteration  28: 572208.828 ops/s
Iteration  29: 571019.184 ops/s
Iteration  30: 571104.055 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toSortedListBy":
  571305.131 ±(99.9%) 976.915 ops/s [Average]
  (min, avg, max) = (567186.396, 571305.131, 573361.737), stdev = 1462.201
  CI (99.9%): [570328.216, 572282.047] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score     Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_toSortedListBy  thrpt   30  571305.131 ± 976.915  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toSortedListBy_with_null$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toSortedListBy_with_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 779999.993 ops/s
# Warmup Iteration   2: 1067351.791 ops/s
# Warmup Iteration   3: 1405468.460 ops/s
# Warmup Iteration   4: 1396081.878 ops/s
# Warmup Iteration   5: 1404140.340 ops/s
# Warmup Iteration   6: 1405196.056 ops/s
# Warmup Iteration   7: 1404636.495 ops/s
# Warmup Iteration   8: 1135552.030 ops/s
# Warmup Iteration   9: 1408138.479 ops/s
# Warmup Iteration  10: 1403606.350 ops/s
# Warmup Iteration  11: 1405679.524 ops/s
# Warmup Iteration  12: 1403834.415 ops/s
# Warmup Iteration  13: 1406256.205 ops/s
# Warmup Iteration  14: 1409759.246 ops/s
# Warmup Iteration  15: 1406901.420 ops/s
# Warmup Iteration  16: 1404847.303 ops/s
# Warmup Iteration  17: 1397851.281 ops/s
# Warmup Iteration  18: 1401151.414 ops/s
# Warmup Iteration  19: 1403518.360 ops/s
# Warmup Iteration  20: 1399149.845 ops/s
# Warmup Iteration  21: 1402238.649 ops/s
# Warmup Iteration  22: 1403063.912 ops/s
# Warmup Iteration  23: 1404670.086 ops/s
# Warmup Iteration  24: 1402461.008 ops/s
# Warmup Iteration  25: 1403091.595 ops/s
# Warmup Iteration  26: 1402251.943 ops/s
# Warmup Iteration  27: 1403119.724 ops/s
# Warmup Iteration  28: 1404774.031 ops/s
# Warmup Iteration  29: 1399533.553 ops/s
# Warmup Iteration  30: 1403118.715 ops/s
Iteration   1: 1404390.198 ops/s
Iteration   2: 1402008.320 ops/s
Iteration   3: 1402131.881 ops/s
Iteration   4: 1402421.989 ops/s
Iteration   5: 1400264.651 ops/s
Iteration   6: 1403629.571 ops/s
Iteration   7: 1397407.748 ops/s
Iteration   8: 1407425.995 ops/s
Iteration   9: 1401168.795 ops/s
Iteration  10: 1403826.632 ops/s
Iteration  11: 1402610.482 ops/s
Iteration  12: 1400289.519 ops/s
Iteration  13: 1404170.164 ops/s
Iteration  14: 1402876.218 ops/s
Iteration  15: 1405704.991 ops/s
Iteration  16: 1405806.212 ops/s
Iteration  17: 1400389.990 ops/s
Iteration  18: 1405540.532 ops/s
Iteration  19: 1403232.006 ops/s
Iteration  20: 1402694.186 ops/s
Iteration  21: 1398596.894 ops/s
Iteration  22: 1403962.299 ops/s
Iteration  23: 1404304.301 ops/s
Iteration  24: 1404656.320 ops/s
Iteration  25: 1397080.604 ops/s
Iteration  26: 1403368.584 ops/s
Iteration  27: 1399542.926 ops/s
Iteration  28: 1402862.017 ops/s
Iteration  29: 1404358.561 ops/s
Iteration  30: 1400179.973 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toSortedListBy_with_null":
  1402563.419 ±(99.9%) 1665.686 ops/s [Average]
  (min, avg, max) = (1397080.604, 1402563.419, 1407425.995), stdev = 2493.121
  CI (99.9%): [1400897.732, 1404229.105] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_toSortedListBy_with_null  thrpt   30  1402563.419 ± 1665.686  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toSortedList_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toSortedList_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 849867.380 ops/s
# Warmup Iteration   2: 1914215.929 ops/s
# Warmup Iteration   3: 2004671.698 ops/s
# Warmup Iteration   4: 1924314.241 ops/s
# Warmup Iteration   5: 1746910.346 ops/s
# Warmup Iteration   6: 2022270.446 ops/s
# Warmup Iteration   7: 2016376.465 ops/s
# Warmup Iteration   8: 2022464.120 ops/s
# Warmup Iteration   9: 2017617.139 ops/s
# Warmup Iteration  10: 2019210.457 ops/s
# Warmup Iteration  11: 2007590.304 ops/s
# Warmup Iteration  12: 2022061.870 ops/s
# Warmup Iteration  13: 2023068.613 ops/s
# Warmup Iteration  14: 2020702.671 ops/s
# Warmup Iteration  15: 2018104.378 ops/s
# Warmup Iteration  16: 2020211.903 ops/s
# Warmup Iteration  17: 2017161.935 ops/s
# Warmup Iteration  18: 2016437.421 ops/s
# Warmup Iteration  19: 2009350.996 ops/s
# Warmup Iteration  20: 2019783.644 ops/s
# Warmup Iteration  21: 2013252.701 ops/s
# Warmup Iteration  22: 2016855.458 ops/s
# Warmup Iteration  23: 2013053.876 ops/s
# Warmup Iteration  24: 2012432.765 ops/s
# Warmup Iteration  25: 2016649.889 ops/s
# Warmup Iteration  26: 2011556.029 ops/s
# Warmup Iteration  27: 2018557.158 ops/s
# Warmup Iteration  28: 2015557.480 ops/s
# Warmup Iteration  29: 2013839.604 ops/s
# Warmup Iteration  30: 2021463.998 ops/s
Iteration   1: 2001382.586 ops/s
Iteration   2: 2017120.017 ops/s
Iteration   3: 2019011.843 ops/s
Iteration   4: 2018430.950 ops/s
Iteration   5: 2019386.022 ops/s
Iteration   6: 2011066.092 ops/s
Iteration   7: 2018565.475 ops/s
Iteration   8: 2020712.839 ops/s
Iteration   9: 2019484.569 ops/s
Iteration  10: 2014853.932 ops/s
Iteration  11: 2020532.572 ops/s
Iteration  12: 2014162.275 ops/s
Iteration  13: 2012040.526 ops/s
Iteration  14: 2022030.174 ops/s
Iteration  15: 2006736.023 ops/s
Iteration  16: 2017610.194 ops/s
Iteration  17: 2017319.758 ops/s
Iteration  18: 2007857.158 ops/s
Iteration  19: 2009676.273 ops/s
Iteration  20: 2014101.294 ops/s
Iteration  21: 2017342.348 ops/s
Iteration  22: 2014249.942 ops/s
Iteration  23: 2018905.053 ops/s
Iteration  24: 2012452.040 ops/s
Iteration  25: 2011330.440 ops/s
Iteration  26: 2015609.735 ops/s
Iteration  27: 2017107.970 ops/s
Iteration  28: 2020291.132 ops/s
Iteration  29: 2015960.354 ops/s
Iteration  30: 2014095.925 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toSortedList_natural_ordering":
  2015314.184 ±(99.9%) 3141.052 ops/s [Average]
  (min, avg, max) = (2001382.586, 2015314.184, 2022030.174), stdev = 4701.379
  CI (99.9%): [2012173.132, 2018455.236] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_toSortedList_natural_ordering  thrpt   30  2015314.184 ± 3141.052  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toSortedList_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toSortedList_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1285944.658 ops/s
# Warmup Iteration   2: 2531577.128 ops/s
# Warmup Iteration   3: 2865790.371 ops/s
# Warmup Iteration   4: 2890683.776 ops/s
# Warmup Iteration   5: 2327286.905 ops/s
# Warmup Iteration   6: 2889744.858 ops/s
# Warmup Iteration   7: 2880520.935 ops/s
# Warmup Iteration   8: 2886068.245 ops/s
# Warmup Iteration   9: 2879316.922 ops/s
# Warmup Iteration  10: 2885095.734 ops/s
# Warmup Iteration  11: 2875145.158 ops/s
# Warmup Iteration  12: 2884330.644 ops/s
# Warmup Iteration  13: 2896544.431 ops/s
# Warmup Iteration  14: 2878063.098 ops/s
# Warmup Iteration  15: 2888698.027 ops/s
# Warmup Iteration  16: 2881199.949 ops/s
# Warmup Iteration  17: 2890517.823 ops/s
# Warmup Iteration  18: 2885759.353 ops/s
# Warmup Iteration  19: 2884364.438 ops/s
# Warmup Iteration  20: 2890972.580 ops/s
# Warmup Iteration  21: 2884308.138 ops/s
# Warmup Iteration  22: 2888241.317 ops/s
# Warmup Iteration  23: 2887098.782 ops/s
# Warmup Iteration  24: 2885176.710 ops/s
# Warmup Iteration  25: 2893095.999 ops/s
# Warmup Iteration  26: 2881632.491 ops/s
# Warmup Iteration  27: 2885928.821 ops/s
# Warmup Iteration  28: 2884272.470 ops/s
# Warmup Iteration  29: 2882217.665 ops/s
# Warmup Iteration  30: 2882080.588 ops/s
Iteration   1: 2889189.134 ops/s
Iteration   2: 2874748.658 ops/s
Iteration   3: 2878940.203 ops/s
Iteration   4: 2897118.843 ops/s
Iteration   5: 2892043.705 ops/s
Iteration   6: 2889523.043 ops/s
Iteration   7: 2886897.047 ops/s
Iteration   8: 2868095.054 ops/s
Iteration   9: 2883735.437 ops/s
Iteration  10: 2889236.691 ops/s
Iteration  11: 2889760.062 ops/s
Iteration  12: 2856233.990 ops/s
Iteration  13: 2889916.715 ops/s
Iteration  14: 2888281.193 ops/s
Iteration  15: 2887110.923 ops/s
Iteration  16: 2889725.292 ops/s
Iteration  17: 2887748.141 ops/s
Iteration  18: 2878614.107 ops/s
Iteration  19: 2872262.415 ops/s
Iteration  20: 2863634.270 ops/s
Iteration  21: 2881055.347 ops/s
Iteration  22: 2893201.980 ops/s
Iteration  23: 2884907.365 ops/s
Iteration  24: 2889877.863 ops/s
Iteration  25: 2888398.581 ops/s
Iteration  26: 2883573.731 ops/s
Iteration  27: 2884613.736 ops/s
Iteration  28: 2889836.533 ops/s
Iteration  29: 2878199.517 ops/s
Iteration  30: 2884221.945 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toSortedList_with_comparator":
  2883690.051 ±(99.9%) 6082.112 ops/s [Average]
  (min, avg, max) = (2856233.990, 2883690.051, 2897118.843), stdev = 9103.419
  CI (99.9%): [2877607.939, 2889772.162] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_toSortedList_with_comparator  thrpt   30  2883690.051 ± 6082.112  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toSortedList_with_null$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toSortedList_with_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 996580.577 ops/s
# Warmup Iteration   2: 1416017.070 ops/s
# Warmup Iteration   3: 1825509.413 ops/s
# Warmup Iteration   4: 1822552.821 ops/s
# Warmup Iteration   5: 1828877.856 ops/s
# Warmup Iteration   6: 1826262.118 ops/s
# Warmup Iteration   7: 1781913.765 ops/s
# Warmup Iteration   8: 1525179.432 ops/s
# Warmup Iteration   9: 1829221.370 ops/s
# Warmup Iteration  10: 1830937.924 ops/s
# Warmup Iteration  11: 1833588.834 ops/s
# Warmup Iteration  12: 1828784.258 ops/s
# Warmup Iteration  13: 1827531.613 ops/s
# Warmup Iteration  14: 1829001.694 ops/s
# Warmup Iteration  15: 1832105.010 ops/s
# Warmup Iteration  16: 1830540.563 ops/s
# Warmup Iteration  17: 1830303.540 ops/s
# Warmup Iteration  18: 1828629.482 ops/s
# Warmup Iteration  19: 1827981.153 ops/s
# Warmup Iteration  20: 1832014.775 ops/s
# Warmup Iteration  21: 1830242.997 ops/s
# Warmup Iteration  22: 1828147.256 ops/s
# Warmup Iteration  23: 1832273.635 ops/s
# Warmup Iteration  24: 1833399.912 ops/s
# Warmup Iteration  25: 1826002.896 ops/s
# Warmup Iteration  26: 1827804.666 ops/s
# Warmup Iteration  27: 1830970.159 ops/s
# Warmup Iteration  28: 1831255.073 ops/s
# Warmup Iteration  29: 1829048.585 ops/s
# Warmup Iteration  30: 1828620.350 ops/s
Iteration   1: 1829709.355 ops/s
Iteration   2: 1831121.943 ops/s
Iteration   3: 1824652.676 ops/s
Iteration   4: 1814638.869 ops/s
Iteration   5: 1825844.404 ops/s
Iteration   6: 1825135.392 ops/s
Iteration   7: 1834973.725 ops/s
Iteration   8: 1828578.490 ops/s
Iteration   9: 1834377.846 ops/s
Iteration  10: 1828927.974 ops/s
Iteration  11: 1831028.038 ops/s
Iteration  12: 1833448.042 ops/s
Iteration  13: 1832035.210 ops/s
Iteration  14: 1833775.974 ops/s
Iteration  15: 1828535.058 ops/s
Iteration  16: 1832205.185 ops/s
Iteration  17: 1833108.973 ops/s
Iteration  18: 1826264.171 ops/s
Iteration  19: 1831300.906 ops/s
Iteration  20: 1830370.366 ops/s
Iteration  21: 1833039.994 ops/s
Iteration  22: 1829103.408 ops/s
Iteration  23: 1831582.862 ops/s
Iteration  24: 1832258.611 ops/s
Iteration  25: 1826608.528 ops/s
Iteration  26: 1832156.015 ops/s
Iteration  27: 1837324.822 ops/s
Iteration  28: 1824695.954 ops/s
Iteration  29: 1834829.287 ops/s
Iteration  30: 1828532.742 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toSortedList_with_null":
  1830005.494 ±(99.9%) 2932.717 ops/s [Average]
  (min, avg, max) = (1814638.869, 1830005.494, 1837324.822), stdev = 4389.554
  CI (99.9%): [1827072.777, 1832938.211] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_toSortedList_with_null  thrpt   30  1830005.494 ± 2932.717  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toSortedMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toSortedMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 160284.709 ops/s
# Warmup Iteration   2: 274467.115 ops/s
# Warmup Iteration   3: 333046.586 ops/s
# Warmup Iteration   4: 335609.603 ops/s
# Warmup Iteration   5: 334225.866 ops/s
# Warmup Iteration   6: 319846.502 ops/s
# Warmup Iteration   7: 294078.844 ops/s
# Warmup Iteration   8: 334962.939 ops/s
# Warmup Iteration   9: 335956.058 ops/s
# Warmup Iteration  10: 335748.146 ops/s
# Warmup Iteration  11: 335988.272 ops/s
# Warmup Iteration  12: 334827.416 ops/s
# Warmup Iteration  13: 335728.120 ops/s
# Warmup Iteration  14: 334420.927 ops/s
# Warmup Iteration  15: 335411.991 ops/s
# Warmup Iteration  16: 336264.851 ops/s
# Warmup Iteration  17: 334598.559 ops/s
# Warmup Iteration  18: 335677.520 ops/s
# Warmup Iteration  19: 336173.832 ops/s
# Warmup Iteration  20: 334714.679 ops/s
# Warmup Iteration  21: 335674.354 ops/s
# Warmup Iteration  22: 336409.044 ops/s
# Warmup Iteration  23: 335552.630 ops/s
# Warmup Iteration  24: 335324.902 ops/s
# Warmup Iteration  25: 335003.420 ops/s
# Warmup Iteration  26: 335745.631 ops/s
# Warmup Iteration  27: 335683.788 ops/s
# Warmup Iteration  28: 335836.952 ops/s
# Warmup Iteration  29: 335084.095 ops/s
# Warmup Iteration  30: 335736.471 ops/s
Iteration   1: 334893.205 ops/s
Iteration   2: 335319.124 ops/s
Iteration   3: 334011.737 ops/s
Iteration   4: 335134.100 ops/s
Iteration   5: 335652.519 ops/s
Iteration   6: 336246.314 ops/s
Iteration   7: 334602.477 ops/s
Iteration   8: 336183.365 ops/s
Iteration   9: 335124.767 ops/s
Iteration  10: 335824.698 ops/s
Iteration  11: 335703.831 ops/s
Iteration  12: 334200.344 ops/s
Iteration  13: 334700.953 ops/s
Iteration  14: 335221.113 ops/s
Iteration  15: 335374.314 ops/s
Iteration  16: 336707.385 ops/s
Iteration  17: 334799.626 ops/s
Iteration  18: 335102.751 ops/s
Iteration  19: 335071.084 ops/s
Iteration  20: 336022.089 ops/s
Iteration  21: 334059.104 ops/s
Iteration  22: 335766.345 ops/s
Iteration  23: 335002.347 ops/s
Iteration  24: 335542.604 ops/s
Iteration  25: 335533.667 ops/s
Iteration  26: 336028.490 ops/s
Iteration  27: 334787.054 ops/s
Iteration  28: 335753.663 ops/s
Iteration  29: 334841.435 ops/s
Iteration  30: 335995.239 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toSortedMap":
  335306.858 ±(99.9%) 441.847 ops/s [Average]
  (min, avg, max) = (334011.737, 335306.858, 336707.385), stdev = 661.337
  CI (99.9%): [334865.011, 335748.706] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score     Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_toSortedMap  thrpt   30  335306.858 ± 441.847  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toSortedMapBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toSortedMapBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 145570.176 ops/s
# Warmup Iteration   2: 221255.352 ops/s
# Warmup Iteration   3: 282082.448 ops/s
# Warmup Iteration   4: 279880.656 ops/s
# Warmup Iteration   5: 282373.934 ops/s
# Warmup Iteration   6: 282463.758 ops/s
# Warmup Iteration   7: 281837.233 ops/s
# Warmup Iteration   8: 233311.279 ops/s
# Warmup Iteration   9: 282005.807 ops/s
# Warmup Iteration  10: 281728.385 ops/s
# Warmup Iteration  11: 282414.964 ops/s
# Warmup Iteration  12: 281612.083 ops/s
# Warmup Iteration  13: 281162.131 ops/s
# Warmup Iteration  14: 281707.947 ops/s
# Warmup Iteration  15: 281625.706 ops/s
# Warmup Iteration  16: 282364.512 ops/s
# Warmup Iteration  17: 281994.323 ops/s
# Warmup Iteration  18: 281919.202 ops/s
# Warmup Iteration  19: 282522.506 ops/s
# Warmup Iteration  20: 282617.329 ops/s
# Warmup Iteration  21: 282005.407 ops/s
# Warmup Iteration  22: 283210.139 ops/s
# Warmup Iteration  23: 282705.449 ops/s
# Warmup Iteration  24: 281939.775 ops/s
# Warmup Iteration  25: 281863.238 ops/s
# Warmup Iteration  26: 282523.179 ops/s
# Warmup Iteration  27: 282422.653 ops/s
# Warmup Iteration  28: 282356.843 ops/s
# Warmup Iteration  29: 282330.543 ops/s
# Warmup Iteration  30: 282655.505 ops/s
Iteration   1: 282148.230 ops/s
Iteration   2: 282186.578 ops/s
Iteration   3: 282201.402 ops/s
Iteration   4: 282368.797 ops/s
Iteration   5: 282144.886 ops/s
Iteration   6: 282634.774 ops/s
Iteration   7: 282198.845 ops/s
Iteration   8: 282957.861 ops/s
Iteration   9: 281728.201 ops/s
Iteration  10: 282707.622 ops/s
Iteration  11: 282265.679 ops/s
Iteration  12: 282564.014 ops/s
Iteration  13: 282584.485 ops/s
Iteration  14: 282044.580 ops/s
Iteration  15: 282887.169 ops/s
Iteration  16: 282391.764 ops/s
Iteration  17: 283111.630 ops/s
Iteration  18: 283114.724 ops/s
Iteration  19: 281412.715 ops/s
Iteration  20: 282755.940 ops/s
Iteration  21: 281391.575 ops/s
Iteration  22: 282444.313 ops/s
Iteration  23: 282028.020 ops/s
Iteration  24: 281109.857 ops/s
Iteration  25: 283160.545 ops/s
Iteration  26: 282207.614 ops/s
Iteration  27: 282700.103 ops/s
Iteration  28: 281988.981 ops/s
Iteration  29: 282804.072 ops/s
Iteration  30: 282926.022 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toSortedMapBy":
  282372.367 ±(99.9%) 347.423 ops/s [Average]
  (min, avg, max) = (281109.857, 282372.367, 283160.545), stdev = 520.006
  CI (99.9%): [282024.944, 282719.789] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score     Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_toSortedMapBy  thrpt   30  282372.367 ± 347.423  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toSortedMap_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toSortedMap_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 166638.914 ops/s
# Warmup Iteration   2: 280678.490 ops/s
# Warmup Iteration   3: 334658.511 ops/s
# Warmup Iteration   4: 337663.918 ops/s
# Warmup Iteration   5: 336939.120 ops/s
# Warmup Iteration   6: 318807.818 ops/s
# Warmup Iteration   7: 300688.918 ops/s
# Warmup Iteration   8: 339282.867 ops/s
# Warmup Iteration   9: 338953.043 ops/s
# Warmup Iteration  10: 338659.332 ops/s
# Warmup Iteration  11: 338601.639 ops/s
# Warmup Iteration  12: 339475.608 ops/s
# Warmup Iteration  13: 339157.092 ops/s
# Warmup Iteration  14: 339408.200 ops/s
# Warmup Iteration  15: 338495.353 ops/s
# Warmup Iteration  16: 339096.410 ops/s
# Warmup Iteration  17: 338943.821 ops/s
# Warmup Iteration  18: 339417.051 ops/s
# Warmup Iteration  19: 339215.240 ops/s
# Warmup Iteration  20: 338816.938 ops/s
# Warmup Iteration  21: 339374.103 ops/s
# Warmup Iteration  22: 338489.510 ops/s
# Warmup Iteration  23: 339083.115 ops/s
# Warmup Iteration  24: 339165.985 ops/s
# Warmup Iteration  25: 339261.764 ops/s
# Warmup Iteration  26: 339877.052 ops/s
# Warmup Iteration  27: 339322.219 ops/s
# Warmup Iteration  28: 339096.910 ops/s
# Warmup Iteration  29: 339365.582 ops/s
# Warmup Iteration  30: 339610.845 ops/s
Iteration   1: 339464.450 ops/s
Iteration   2: 339943.800 ops/s
Iteration   3: 339722.886 ops/s
Iteration   4: 339663.741 ops/s
Iteration   5: 339267.042 ops/s
Iteration   6: 340207.162 ops/s
Iteration   7: 339624.140 ops/s
Iteration   8: 339619.714 ops/s
Iteration   9: 339326.242 ops/s
Iteration  10: 339553.227 ops/s
Iteration  11: 337235.230 ops/s
Iteration  12: 340046.944 ops/s
Iteration  13: 338954.595 ops/s
Iteration  14: 339254.625 ops/s
Iteration  15: 336270.553 ops/s
Iteration  16: 340475.385 ops/s
Iteration  17: 339708.748 ops/s
Iteration  18: 339527.863 ops/s
Iteration  19: 339303.341 ops/s
Iteration  20: 339202.225 ops/s
Iteration  21: 338795.617 ops/s
Iteration  22: 340445.456 ops/s
Iteration  23: 338824.263 ops/s
Iteration  24: 338719.485 ops/s
Iteration  25: 339048.711 ops/s
Iteration  26: 340257.687 ops/s
Iteration  27: 339194.782 ops/s
Iteration  28: 339746.741 ops/s
Iteration  29: 338796.846 ops/s
Iteration  30: 339680.157 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toSortedMap_with_comparator":
  339329.389 ±(99.9%) 572.203 ops/s [Average]
  (min, avg, max) = (336270.553, 339329.389, 340475.385), stdev = 856.447
  CI (99.9%): [338757.186, 339901.592] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score     Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_toSortedMap_with_comparator  thrpt   30  339329.389 ± 572.203  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toSortedSetBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toSortedSetBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 530694.318 ops/s
# Warmup Iteration   2: 1038283.865 ops/s
# Warmup Iteration   3: 1127144.122 ops/s
# Warmup Iteration   4: 1137777.749 ops/s
# Warmup Iteration   5: 945455.309 ops/s
# Warmup Iteration   6: 1134935.269 ops/s
# Warmup Iteration   7: 1135782.924 ops/s
# Warmup Iteration   8: 1134769.425 ops/s
# Warmup Iteration   9: 1135351.310 ops/s
# Warmup Iteration  10: 1135580.845 ops/s
# Warmup Iteration  11: 1132086.316 ops/s
# Warmup Iteration  12: 1133785.555 ops/s
# Warmup Iteration  13: 1134878.740 ops/s
# Warmup Iteration  14: 1134033.192 ops/s
# Warmup Iteration  15: 1127657.447 ops/s
# Warmup Iteration  16: 1134493.251 ops/s
# Warmup Iteration  17: 1133960.679 ops/s
# Warmup Iteration  18: 1134746.667 ops/s
# Warmup Iteration  19: 1136257.040 ops/s
# Warmup Iteration  20: 1134818.948 ops/s
# Warmup Iteration  21: 1137574.937 ops/s
# Warmup Iteration  22: 1134023.517 ops/s
# Warmup Iteration  23: 1135625.876 ops/s
# Warmup Iteration  24: 1134123.408 ops/s
# Warmup Iteration  25: 1133218.367 ops/s
# Warmup Iteration  26: 1130993.082 ops/s
# Warmup Iteration  27: 1131938.881 ops/s
# Warmup Iteration  28: 1132653.328 ops/s
# Warmup Iteration  29: 1138125.125 ops/s
# Warmup Iteration  30: 1136764.346 ops/s
Iteration   1: 1137099.758 ops/s
Iteration   2: 1131783.789 ops/s
Iteration   3: 1129848.159 ops/s
Iteration   4: 1132666.297 ops/s
Iteration   5: 1131989.586 ops/s
Iteration   6: 1133085.548 ops/s
Iteration   7: 1133827.924 ops/s
Iteration   8: 1131633.237 ops/s
Iteration   9: 1135839.393 ops/s
Iteration  10: 1134342.700 ops/s
Iteration  11: 1139941.954 ops/s
Iteration  12: 1135161.071 ops/s
Iteration  13: 1131529.767 ops/s
Iteration  14: 1137253.677 ops/s
Iteration  15: 1134960.124 ops/s
Iteration  16: 1137445.424 ops/s
Iteration  17: 1135009.959 ops/s
Iteration  18: 1135000.994 ops/s
Iteration  19: 1130285.310 ops/s
Iteration  20: 1135996.095 ops/s
Iteration  21: 1133510.348 ops/s
Iteration  22: 1136609.662 ops/s
Iteration  23: 1136026.599 ops/s
Iteration  24: 1137071.881 ops/s
Iteration  25: 1134909.011 ops/s
Iteration  26: 1139520.695 ops/s
Iteration  27: 1131750.858 ops/s
Iteration  28: 1131703.490 ops/s
Iteration  29: 1132375.923 ops/s
Iteration  30: 1133454.396 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toSortedSetBy":
  1134387.788 ±(99.9%) 1728.667 ops/s [Average]
  (min, avg, max) = (1129848.159, 1134387.788, 1139941.954), stdev = 2587.387
  CI (99.9%): [1132659.121, 1136116.455] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_toSortedSetBy  thrpt   30  1134387.788 ± 1728.667  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toSortedSet_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toSortedSet_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 681875.764 ops/s
# Warmup Iteration   2: 1545575.091 ops/s
# Warmup Iteration   3: 1624609.973 ops/s
# Warmup Iteration   4: 1547328.392 ops/s
# Warmup Iteration   5: 1439349.655 ops/s
# Warmup Iteration   6: 1638392.046 ops/s
# Warmup Iteration   7: 1633225.647 ops/s
# Warmup Iteration   8: 1634039.856 ops/s
# Warmup Iteration   9: 1641029.856 ops/s
# Warmup Iteration  10: 1632770.752 ops/s
# Warmup Iteration  11: 1636321.656 ops/s
# Warmup Iteration  12: 1637016.457 ops/s
# Warmup Iteration  13: 1638618.856 ops/s
# Warmup Iteration  14: 1634828.775 ops/s
# Warmup Iteration  15: 1634932.001 ops/s
# Warmup Iteration  16: 1636802.012 ops/s
# Warmup Iteration  17: 1637382.759 ops/s
# Warmup Iteration  18: 1634633.679 ops/s
# Warmup Iteration  19: 1638943.986 ops/s
# Warmup Iteration  20: 1628992.492 ops/s
# Warmup Iteration  21: 1637633.153 ops/s
# Warmup Iteration  22: 1637841.032 ops/s
# Warmup Iteration  23: 1636980.220 ops/s
# Warmup Iteration  24: 1630749.179 ops/s
# Warmup Iteration  25: 1636976.454 ops/s
# Warmup Iteration  26: 1633098.636 ops/s
# Warmup Iteration  27: 1635810.208 ops/s
# Warmup Iteration  28: 1635641.625 ops/s
# Warmup Iteration  29: 1637360.458 ops/s
# Warmup Iteration  30: 1636396.753 ops/s
Iteration   1: 1638119.333 ops/s
Iteration   2: 1637144.715 ops/s
Iteration   3: 1638608.772 ops/s
Iteration   4: 1637346.009 ops/s
Iteration   5: 1639537.659 ops/s
Iteration   6: 1641021.087 ops/s
Iteration   7: 1635779.689 ops/s
Iteration   8: 1638341.686 ops/s
Iteration   9: 1621041.785 ops/s
Iteration  10: 1629760.795 ops/s
Iteration  11: 1641072.289 ops/s
Iteration  12: 1633957.191 ops/s
Iteration  13: 1634703.446 ops/s
Iteration  14: 1631503.076 ops/s
Iteration  15: 1635666.589 ops/s
Iteration  16: 1638555.849 ops/s
Iteration  17: 1636728.617 ops/s
Iteration  18: 1634786.212 ops/s
Iteration  19: 1632469.466 ops/s
Iteration  20: 1635555.857 ops/s
Iteration  21: 1640053.467 ops/s
Iteration  22: 1634540.698 ops/s
Iteration  23: 1637020.485 ops/s
Iteration  24: 1635192.182 ops/s
Iteration  25: 1639096.578 ops/s
Iteration  26: 1641017.980 ops/s
Iteration  27: 1635742.590 ops/s
Iteration  28: 1636784.143 ops/s
Iteration  29: 1636436.882 ops/s
Iteration  30: 1639665.398 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toSortedSet_natural_ordering":
  1636241.684 ±(99.9%) 2663.930 ops/s [Average]
  (min, avg, max) = (1621041.785, 1636241.684, 1641072.289), stdev = 3987.245
  CI (99.9%): [1633577.754, 1638905.614] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_toSortedSet_natural_ordering  thrpt   30  1636241.684 ± 2663.930  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toSortedSet_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toSortedSet_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 674438.638 ops/s
# Warmup Iteration   2: 1502740.289 ops/s
# Warmup Iteration   3: 1581195.820 ops/s
# Warmup Iteration   4: 1576556.313 ops/s
# Warmup Iteration   5: 1332136.485 ops/s
# Warmup Iteration   6: 1591033.437 ops/s
# Warmup Iteration   7: 1587269.534 ops/s
# Warmup Iteration   8: 1595942.775 ops/s
# Warmup Iteration   9: 1592096.435 ops/s
# Warmup Iteration  10: 1586695.150 ops/s
# Warmup Iteration  11: 1588983.233 ops/s
# Warmup Iteration  12: 1588624.048 ops/s
# Warmup Iteration  13: 1591017.163 ops/s
# Warmup Iteration  14: 1581486.081 ops/s
# Warmup Iteration  15: 1592477.874 ops/s
# Warmup Iteration  16: 1590260.778 ops/s
# Warmup Iteration  17: 1593044.171 ops/s
# Warmup Iteration  18: 1590524.832 ops/s
# Warmup Iteration  19: 1594237.542 ops/s
# Warmup Iteration  20: 1588217.394 ops/s
# Warmup Iteration  21: 1591767.562 ops/s
# Warmup Iteration  22: 1590050.341 ops/s
# Warmup Iteration  23: 1590998.675 ops/s
# Warmup Iteration  24: 1588501.667 ops/s
# Warmup Iteration  25: 1586316.040 ops/s
# Warmup Iteration  26: 1588716.869 ops/s
# Warmup Iteration  27: 1590435.076 ops/s
# Warmup Iteration  28: 1592651.748 ops/s
# Warmup Iteration  29: 1590832.642 ops/s
# Warmup Iteration  30: 1594632.437 ops/s
Iteration   1: 1581850.195 ops/s
Iteration   2: 1588895.153 ops/s
Iteration   3: 1594278.033 ops/s
Iteration   4: 1587975.438 ops/s
Iteration   5: 1587095.974 ops/s
Iteration   6: 1587421.317 ops/s
Iteration   7: 1590289.751 ops/s
Iteration   8: 1593244.432 ops/s
Iteration   9: 1592538.389 ops/s
Iteration  10: 1592480.522 ops/s
Iteration  11: 1583484.469 ops/s
Iteration  12: 1593190.538 ops/s
Iteration  13: 1594702.098 ops/s
Iteration  14: 1593256.731 ops/s
Iteration  15: 1590545.402 ops/s
Iteration  16: 1590325.443 ops/s
Iteration  17: 1595071.576 ops/s
Iteration  18: 1594692.515 ops/s
Iteration  19: 1593507.660 ops/s
Iteration  20: 1592764.198 ops/s
Iteration  21: 1591741.622 ops/s
Iteration  22: 1598014.836 ops/s
Iteration  23: 1592603.674 ops/s
Iteration  24: 1593179.858 ops/s
Iteration  25: 1588075.065 ops/s
Iteration  26: 1585197.427 ops/s
Iteration  27: 1592831.494 ops/s
Iteration  28: 1583675.962 ops/s
Iteration  29: 1590150.680 ops/s
Iteration  30: 1586983.397 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toSortedSet_with_comparator":
  1590668.795 ±(99.9%) 2591.788 ops/s [Average]
  (min, avg, max) = (1581850.195, 1590668.795, 1598014.836), stdev = 3879.267
  CI (99.9%): [1588077.007, 1593260.583] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_toSortedSet_with_comparator  thrpt   30  1590668.795 ± 2591.788  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toStringOfItemToCount$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toStringOfItemToCount

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1550158.239 ops/s
# Warmup Iteration   2: 3582117.528 ops/s
# Warmup Iteration   3: 3674533.853 ops/s
# Warmup Iteration   4: 3078160.732 ops/s
# Warmup Iteration   5: 3619826.527 ops/s
# Warmup Iteration   6: 3673083.406 ops/s
# Warmup Iteration   7: 3679774.836 ops/s
# Warmup Iteration   8: 3617664.813 ops/s
# Warmup Iteration   9: 3674150.472 ops/s
# Warmup Iteration  10: 3642298.609 ops/s
# Warmup Iteration  11: 3668816.595 ops/s
# Warmup Iteration  12: 3679636.520 ops/s
# Warmup Iteration  13: 3691186.145 ops/s
# Warmup Iteration  14: 3663021.277 ops/s
# Warmup Iteration  15: 3679520.395 ops/s
# Warmup Iteration  16: 3690150.079 ops/s
# Warmup Iteration  17: 3692135.337 ops/s
# Warmup Iteration  18: 3692899.267 ops/s
# Warmup Iteration  19: 3666402.497 ops/s
# Warmup Iteration  20: 3672533.235 ops/s
# Warmup Iteration  21: 3684856.616 ops/s
# Warmup Iteration  22: 3686340.010 ops/s
# Warmup Iteration  23: 3661315.529 ops/s
# Warmup Iteration  24: 3703751.271 ops/s
# Warmup Iteration  25: 3686987.883 ops/s
# Warmup Iteration  26: 3675028.964 ops/s
# Warmup Iteration  27: 3671521.198 ops/s
# Warmup Iteration  28: 3684669.948 ops/s
# Warmup Iteration  29: 3654819.549 ops/s
# Warmup Iteration  30: 3678803.090 ops/s
Iteration   1: 3698041.801 ops/s
Iteration   2: 3686338.586 ops/s
Iteration   3: 3686249.607 ops/s
Iteration   4: 3685769.614 ops/s
Iteration   5: 3679672.513 ops/s
Iteration   6: 3655625.254 ops/s
Iteration   7: 3624446.681 ops/s
Iteration   8: 3683115.055 ops/s
Iteration   9: 3686317.656 ops/s
Iteration  10: 3682560.139 ops/s
Iteration  11: 3678577.414 ops/s
Iteration  12: 3682239.342 ops/s
Iteration  13: 3683750.145 ops/s
Iteration  14: 3692008.251 ops/s
Iteration  15: 3682208.683 ops/s
Iteration  16: 3669968.926 ops/s
Iteration  17: 3698213.741 ops/s
Iteration  18: 3718074.359 ops/s
Iteration  19: 3709369.327 ops/s
Iteration  20: 3668148.065 ops/s
Iteration  21: 3694754.350 ops/s
Iteration  22: 3692466.996 ops/s
Iteration  23: 3700705.599 ops/s
Iteration  24: 3669556.784 ops/s
Iteration  25: 3691831.632 ops/s
Iteration  26: 3697313.990 ops/s
Iteration  27: 3677750.093 ops/s
Iteration  28: 3681657.277 ops/s
Iteration  29: 3613070.020 ops/s
Iteration  30: 3613784.214 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_toStringOfItemToCount":
  3679452.870 ±(99.9%) 16385.788 ops/s [Average]
  (min, avg, max) = (3613070.020, 3679452.870, 3718074.359), stdev = 24525.478
  CI (99.9%): [3663067.082, 3695838.659] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_toStringOfItemToCount  thrpt   30  3679452.870 ± 16385.788  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_topOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_topOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 77855.071 ops/s
# Warmup Iteration   2: 131086.570 ops/s
# Warmup Iteration   3: 160400.304 ops/s
# Warmup Iteration   4: 161602.172 ops/s
# Warmup Iteration   5: 161572.916 ops/s
# Warmup Iteration   6: 155911.691 ops/s
# Warmup Iteration   7: 138519.698 ops/s
# Warmup Iteration   8: 161424.728 ops/s
# Warmup Iteration   9: 161588.822 ops/s
# Warmup Iteration  10: 161519.495 ops/s
# Warmup Iteration  11: 161549.907 ops/s
# Warmup Iteration  12: 161604.303 ops/s
# Warmup Iteration  13: 161606.733 ops/s
# Warmup Iteration  14: 161654.952 ops/s
# Warmup Iteration  15: 161463.713 ops/s
# Warmup Iteration  16: 161863.636 ops/s
# Warmup Iteration  17: 163681.681 ops/s
# Warmup Iteration  18: 163637.091 ops/s
# Warmup Iteration  19: 163410.909 ops/s
# Warmup Iteration  20: 163660.398 ops/s
# Warmup Iteration  21: 163272.881 ops/s
# Warmup Iteration  22: 163488.358 ops/s
# Warmup Iteration  23: 163554.332 ops/s
# Warmup Iteration  24: 163240.612 ops/s
# Warmup Iteration  25: 163618.174 ops/s
# Warmup Iteration  26: 163532.298 ops/s
# Warmup Iteration  27: 163532.060 ops/s
# Warmup Iteration  28: 163659.920 ops/s
# Warmup Iteration  29: 163442.429 ops/s
# Warmup Iteration  30: 163322.220 ops/s
Iteration   1: 163488.883 ops/s
Iteration   2: 163937.608 ops/s
Iteration   3: 163219.396 ops/s
Iteration   4: 163652.636 ops/s
Iteration   5: 163036.307 ops/s
Iteration   6: 163881.099 ops/s
Iteration   7: 163430.815 ops/s
Iteration   8: 163638.994 ops/s
Iteration   9: 163425.143 ops/s
Iteration  10: 164770.987 ops/s
Iteration  11: 163517.845 ops/s
Iteration  12: 163836.104 ops/s
Iteration  13: 163135.719 ops/s
Iteration  14: 163832.334 ops/s
Iteration  15: 163734.025 ops/s
Iteration  16: 163848.880 ops/s
Iteration  17: 163379.389 ops/s
Iteration  18: 163986.607 ops/s
Iteration  19: 162664.228 ops/s
Iteration  20: 163805.347 ops/s
Iteration  21: 163199.383 ops/s
Iteration  22: 163091.601 ops/s
Iteration  23: 163824.472 ops/s
Iteration  24: 163568.429 ops/s
Iteration  25: 163569.556 ops/s
Iteration  26: 163916.112 ops/s
Iteration  27: 163015.129 ops/s
Iteration  28: 163986.817 ops/s
Iteration  29: 163375.863 ops/s
Iteration  30: 163322.128 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_topOccurrences":
  163569.728 ±(99.9%) 271.627 ops/s [Average]
  (min, avg, max) = (162664.228, 163569.728, 164770.987), stdev = 406.559
  CI (99.9%): [163298.101, 163841.355] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score     Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_topOccurrences  thrpt   30  163569.728 ± 271.627  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_zip$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_zip

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 47939.020 ops/s
# Warmup Iteration   2: 66380.419 ops/s
# Warmup Iteration   3: 86227.677 ops/s
# Warmup Iteration   4: 85805.729 ops/s
# Warmup Iteration   5: 86164.737 ops/s
# Warmup Iteration   6: 86374.987 ops/s
# Warmup Iteration   7: 86380.093 ops/s
# Warmup Iteration   8: 78513.753 ops/s
# Warmup Iteration   9: 79316.192 ops/s
# Warmup Iteration  10: 86375.910 ops/s
# Warmup Iteration  11: 85893.966 ops/s
# Warmup Iteration  12: 86418.863 ops/s
# Warmup Iteration  13: 86287.167 ops/s
# Warmup Iteration  14: 86376.764 ops/s
# Warmup Iteration  15: 86440.852 ops/s
# Warmup Iteration  16: 86500.091 ops/s
# Warmup Iteration  17: 86415.753 ops/s
# Warmup Iteration  18: 86310.533 ops/s
# Warmup Iteration  19: 86573.102 ops/s
# Warmup Iteration  20: 86272.800 ops/s
# Warmup Iteration  21: 86178.519 ops/s
# Warmup Iteration  22: 86313.826 ops/s
# Warmup Iteration  23: 86557.735 ops/s
# Warmup Iteration  24: 86352.509 ops/s
# Warmup Iteration  25: 86351.368 ops/s
# Warmup Iteration  26: 86460.044 ops/s
# Warmup Iteration  27: 86302.397 ops/s
# Warmup Iteration  28: 86386.158 ops/s
# Warmup Iteration  29: 86194.289 ops/s
# Warmup Iteration  30: 86257.590 ops/s
Iteration   1: 86386.499 ops/s
Iteration   2: 86331.180 ops/s
Iteration   3: 85539.406 ops/s
Iteration   4: 86307.851 ops/s
Iteration   5: 86482.473 ops/s
Iteration   6: 86197.812 ops/s
Iteration   7: 86019.873 ops/s
Iteration   8: 86449.284 ops/s
Iteration   9: 86588.070 ops/s
Iteration  10: 86364.695 ops/s
Iteration  11: 86014.570 ops/s
Iteration  12: 86527.893 ops/s
Iteration  13: 86381.169 ops/s
Iteration  14: 86380.291 ops/s
Iteration  15: 86485.247 ops/s
Iteration  16: 86574.763 ops/s
Iteration  17: 86188.031 ops/s
Iteration  18: 86128.337 ops/s
Iteration  19: 86176.047 ops/s
Iteration  20: 86543.970 ops/s
Iteration  21: 86429.256 ops/s
Iteration  22: 86467.599 ops/s
Iteration  23: 86452.412 ops/s
Iteration  24: 86407.828 ops/s
Iteration  25: 86197.387 ops/s
Iteration  26: 86416.791 ops/s
Iteration  27: 86136.225 ops/s
Iteration  28: 85958.571 ops/s
Iteration  29: 86422.309 ops/s
Iteration  30: 85866.150 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_zip":
  86294.066 ±(99.9%) 158.938 ops/s [Average]
  (min, avg, max) = (85539.406, 86294.066, 86588.070), stdev = 237.891
  CI (99.9%): [86135.128, 86453.004] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt      Score     Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_zip  thrpt   30  86294.066 ± 158.938  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_zipWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_zipWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 95001.481 ops/s
# Warmup Iteration   2: 136891.144 ops/s
# Warmup Iteration   3: 178007.593 ops/s
# Warmup Iteration   4: 175342.694 ops/s
# Warmup Iteration   5: 177983.739 ops/s
# Warmup Iteration   6: 175286.232 ops/s
# Warmup Iteration   7: 176816.955 ops/s
# Warmup Iteration   8: 146818.058 ops/s
# Warmup Iteration   9: 178081.063 ops/s
# Warmup Iteration  10: 177591.069 ops/s
# Warmup Iteration  11: 176237.446 ops/s
# Warmup Iteration  12: 176321.403 ops/s
# Warmup Iteration  13: 177488.703 ops/s
# Warmup Iteration  14: 176975.212 ops/s
# Warmup Iteration  15: 177953.083 ops/s
# Warmup Iteration  16: 177191.144 ops/s
# Warmup Iteration  17: 177619.317 ops/s
# Warmup Iteration  18: 177273.956 ops/s
# Warmup Iteration  19: 174925.950 ops/s
# Warmup Iteration  20: 176295.368 ops/s
# Warmup Iteration  21: 177228.979 ops/s
# Warmup Iteration  22: 178030.059 ops/s
# Warmup Iteration  23: 177565.637 ops/s
# Warmup Iteration  24: 177117.201 ops/s
# Warmup Iteration  25: 175970.217 ops/s
# Warmup Iteration  26: 177277.447 ops/s
# Warmup Iteration  27: 177156.037 ops/s
# Warmup Iteration  28: 175521.263 ops/s
# Warmup Iteration  29: 177242.679 ops/s
# Warmup Iteration  30: 176897.087 ops/s
Iteration   1: 177002.291 ops/s
Iteration   2: 177522.142 ops/s
Iteration   3: 176604.225 ops/s
Iteration   4: 178205.812 ops/s
Iteration   5: 176323.082 ops/s
Iteration   6: 174190.344 ops/s
Iteration   7: 177529.196 ops/s
Iteration   8: 177666.932 ops/s
Iteration   9: 176881.586 ops/s
Iteration  10: 175811.088 ops/s
Iteration  11: 177681.848 ops/s
Iteration  12: 177197.524 ops/s
Iteration  13: 175953.950 ops/s
Iteration  14: 175842.488 ops/s
Iteration  15: 176750.014 ops/s
Iteration  16: 175377.420 ops/s
Iteration  17: 177145.805 ops/s
Iteration  18: 176923.511 ops/s
Iteration  19: 176869.904 ops/s
Iteration  20: 177494.088 ops/s
Iteration  21: 177644.802 ops/s
Iteration  22: 177506.919 ops/s
Iteration  23: 177901.661 ops/s
Iteration  24: 176526.003 ops/s
Iteration  25: 175552.198 ops/s
Iteration  26: 175159.794 ops/s
Iteration  27: 177034.325 ops/s
Iteration  28: 177573.864 ops/s
Iteration  29: 175969.793 ops/s
Iteration  30: 178036.330 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableArrayBagTest._Benchmark.benchmark_zipWithIndex":
  176795.965 ±(99.9%) 641.302 ops/s [Average]
  (min, avg, max) = (174190.344, 176795.965, 178205.812), stdev = 959.871
  CI (99.9%): [176154.663, 177437.267] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score     Error  Units
ImmutableArrayBagTest._Benchmark.benchmark_zipWithIndex  thrpt   30  176795.965 ± 641.302  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 748034.285 ops/s
# Warmup Iteration   2: 803844.001 ops/s
# Warmup Iteration   3: 1029580.699 ops/s
# Warmup Iteration   4: 1039267.524 ops/s
# Warmup Iteration   5: 1042194.186 ops/s
# Warmup Iteration   6: 1031123.183 ops/s
# Warmup Iteration   7: 1042273.795 ops/s
# Warmup Iteration   8: 1040976.759 ops/s
# Warmup Iteration   9: 1040599.887 ops/s
# Warmup Iteration  10: 1040052.439 ops/s
# Warmup Iteration  11: 1043656.675 ops/s
# Warmup Iteration  12: 888300.992 ops/s
# Warmup Iteration  13: 1033701.308 ops/s
# Warmup Iteration  14: 1045297.675 ops/s
# Warmup Iteration  15: 1045576.695 ops/s
# Warmup Iteration  16: 1047076.424 ops/s
# Warmup Iteration  17: 1108563.618 ops/s
# Warmup Iteration  18: 1111494.988 ops/s
# Warmup Iteration  19: 1109625.959 ops/s
# Warmup Iteration  20: 1113130.806 ops/s
# Warmup Iteration  21: 1106019.392 ops/s
# Warmup Iteration  22: 1108594.970 ops/s
# Warmup Iteration  23: 1110742.702 ops/s
# Warmup Iteration  24: 1111393.621 ops/s
# Warmup Iteration  25: 1110709.544 ops/s
# Warmup Iteration  26: 1111281.222 ops/s
# Warmup Iteration  27: 1110247.454 ops/s
# Warmup Iteration  28: 1106287.978 ops/s
# Warmup Iteration  29: 1111684.559 ops/s
# Warmup Iteration  30: 1109610.613 ops/s
Iteration   1: 1106675.027 ops/s
Iteration   2: 1109749.596 ops/s
Iteration   3: 1112014.906 ops/s
Iteration   4: 1109120.987 ops/s
Iteration   5: 1111447.715 ops/s
Iteration   6: 1110459.336 ops/s
Iteration   7: 1111561.411 ops/s
Iteration   8: 1106097.981 ops/s
Iteration   9: 1110772.121 ops/s
Iteration  10: 1112646.725 ops/s
Iteration  11: 1110820.969 ops/s
Iteration  12: 1101528.168 ops/s
Iteration  13: 1110923.259 ops/s
Iteration  14: 1112191.406 ops/s
Iteration  15: 1113025.655 ops/s
Iteration  16: 1109603.370 ops/s
Iteration  17: 1110080.366 ops/s
Iteration  18: 1113605.035 ops/s
Iteration  19: 1109494.145 ops/s
Iteration  20: 1106816.067 ops/s
Iteration  21: 1112191.514 ops/s
Iteration  22: 1111790.744 ops/s
Iteration  23: 1108218.519 ops/s
Iteration  24: 1106811.583 ops/s
Iteration  25: 1113118.028 ops/s
Iteration  26: 1111746.760 ops/s
Iteration  27: 1110245.962 ops/s
Iteration  28: 1099503.070 ops/s
Iteration  29: 1111380.317 ops/s
Iteration  30: 1117018.304 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_add":
  1110021.968 ±(99.9%) 2320.545 ops/s [Average]
  (min, avg, max) = (1099503.070, 1110021.968, 1117018.304), stdev = 3473.282
  CI (99.9%): [1107701.423, 1112342.513] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_add  thrpt   30  1110021.968 ± 2320.545  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_addAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_addAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 604311.391 ops/s
# Warmup Iteration   2: 748474.778 ops/s
# Warmup Iteration   3: 944827.948 ops/s
# Warmup Iteration   4: 939674.437 ops/s
# Warmup Iteration   5: 941634.138 ops/s
# Warmup Iteration   6: 944926.203 ops/s
# Warmup Iteration   7: 945737.970 ops/s
# Warmup Iteration   8: 942613.920 ops/s
# Warmup Iteration   9: 791282.808 ops/s
# Warmup Iteration  10: 946746.389 ops/s
# Warmup Iteration  11: 944675.635 ops/s
# Warmup Iteration  12: 947447.869 ops/s
# Warmup Iteration  13: 945655.379 ops/s
# Warmup Iteration  14: 944368.654 ops/s
# Warmup Iteration  15: 932873.054 ops/s
# Warmup Iteration  16: 948203.106 ops/s
# Warmup Iteration  17: 1003027.374 ops/s
# Warmup Iteration  18: 1004161.556 ops/s
# Warmup Iteration  19: 1002916.709 ops/s
# Warmup Iteration  20: 996916.492 ops/s
# Warmup Iteration  21: 1002261.961 ops/s
# Warmup Iteration  22: 989224.387 ops/s
# Warmup Iteration  23: 1001202.196 ops/s
# Warmup Iteration  24: 1000135.783 ops/s
# Warmup Iteration  25: 1000904.819 ops/s
# Warmup Iteration  26: 1004971.751 ops/s
# Warmup Iteration  27: 1002067.633 ops/s
# Warmup Iteration  28: 1002762.744 ops/s
# Warmup Iteration  29: 1001568.796 ops/s
# Warmup Iteration  30: 1003738.486 ops/s
Iteration   1: 991526.428 ops/s
Iteration   2: 1000042.589 ops/s
Iteration   3: 1005158.633 ops/s
Iteration   4: 999516.863 ops/s
Iteration   5: 1001476.714 ops/s
Iteration   6: 1003925.527 ops/s
Iteration   7: 1002335.864 ops/s
Iteration   8: 1005635.103 ops/s
Iteration   9: 1002609.591 ops/s
Iteration  10: 1003161.547 ops/s
Iteration  11: 1002093.274 ops/s
Iteration  12: 1001306.535 ops/s
Iteration  13: 1004900.505 ops/s
Iteration  14: 998638.205 ops/s
Iteration  15: 999532.546 ops/s
Iteration  16: 1004428.934 ops/s
Iteration  17: 1001779.292 ops/s
Iteration  18: 998421.467 ops/s
Iteration  19: 999537.176 ops/s
Iteration  20: 1001198.477 ops/s
Iteration  21: 1000071.972 ops/s
Iteration  22: 1001825.161 ops/s
Iteration  23: 1000688.029 ops/s
Iteration  24: 1003959.616 ops/s
Iteration  25: 999577.228 ops/s
Iteration  26: 1003468.293 ops/s
Iteration  27: 1003027.740 ops/s
Iteration  28: 1002777.450 ops/s
Iteration  29: 996983.712 ops/s
Iteration  30: 996209.706 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_addAll":
  1001193.806 ±(99.9%) 1995.263 ops/s [Average]
  (min, avg, max) = (991526.428, 1001193.806, 1005635.103), stdev = 2986.416
  CI (99.9%): [999198.543, 1003189.069] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_addAll  thrpt   30  1001193.806 ± 1995.263  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_aggregateByMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_aggregateByMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 783913.613 ops/s
# Warmup Iteration   2: 1620252.535 ops/s
# Warmup Iteration   3: 1744230.353 ops/s
# Warmup Iteration   4: 1737450.507 ops/s
# Warmup Iteration   5: 1436445.384 ops/s
# Warmup Iteration   6: 1748127.481 ops/s
# Warmup Iteration   7: 1750493.832 ops/s
# Warmup Iteration   8: 1754941.602 ops/s
# Warmup Iteration   9: 1745196.383 ops/s
# Warmup Iteration  10: 1750119.047 ops/s
# Warmup Iteration  11: 1744753.793 ops/s
# Warmup Iteration  12: 1749148.073 ops/s
# Warmup Iteration  13: 1747985.258 ops/s
# Warmup Iteration  14: 1747391.831 ops/s
# Warmup Iteration  15: 1754795.385 ops/s
# Warmup Iteration  16: 1751748.724 ops/s
# Warmup Iteration  17: 1735147.433 ops/s
# Warmup Iteration  18: 1744528.772 ops/s
# Warmup Iteration  19: 1744122.385 ops/s
# Warmup Iteration  20: 1755750.391 ops/s
# Warmup Iteration  21: 1742097.168 ops/s
# Warmup Iteration  22: 1732760.408 ops/s
# Warmup Iteration  23: 1741754.093 ops/s
# Warmup Iteration  24: 1753346.883 ops/s
# Warmup Iteration  25: 1747065.497 ops/s
# Warmup Iteration  26: 1751327.648 ops/s
# Warmup Iteration  27: 1750935.904 ops/s
# Warmup Iteration  28: 1748858.222 ops/s
# Warmup Iteration  29: 1746905.771 ops/s
# Warmup Iteration  30: 1747659.924 ops/s
Iteration   1: 1754691.608 ops/s
Iteration   2: 1748205.435 ops/s
Iteration   3: 1749812.053 ops/s
Iteration   4: 1714966.073 ops/s
Iteration   5: 1751160.624 ops/s
Iteration   6: 1740925.466 ops/s
Iteration   7: 1739854.060 ops/s
Iteration   8: 1746373.729 ops/s
Iteration   9: 1746105.913 ops/s
Iteration  10: 1749770.296 ops/s
Iteration  11: 1742026.068 ops/s
Iteration  12: 1756312.313 ops/s
Iteration  13: 1746024.022 ops/s
Iteration  14: 1753592.301 ops/s
Iteration  15: 1753759.047 ops/s
Iteration  16: 1738208.095 ops/s
Iteration  17: 1733658.433 ops/s
Iteration  18: 1751385.100 ops/s
Iteration  19: 1755159.689 ops/s
Iteration  20: 1745395.165 ops/s
Iteration  21: 1743505.937 ops/s
Iteration  22: 1753974.588 ops/s
Iteration  23: 1741407.728 ops/s
Iteration  24: 1750531.953 ops/s
Iteration  25: 1750298.170 ops/s
Iteration  26: 1757473.673 ops/s
Iteration  27: 1747897.742 ops/s
Iteration  28: 1753748.348 ops/s
Iteration  29: 1739673.689 ops/s
Iteration  30: 1747287.451 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_aggregateByMutating":
  1746772.826 ±(99.9%) 5655.266 ops/s [Average]
  (min, avg, max) = (1714966.073, 1746772.826, 1757473.673), stdev = 8464.537
  CI (99.9%): [1741117.560, 1752428.092] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_aggregateByMutating  thrpt   30  1746772.826 ± 5655.266  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_aggregateByNonMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_aggregateByNonMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 649699.642 ops/s
# Warmup Iteration   2: 1216011.256 ops/s
# Warmup Iteration   3: 1341226.525 ops/s
# Warmup Iteration   4: 1351808.467 ops/s
# Warmup Iteration   5: 1213862.041 ops/s
# Warmup Iteration   6: 1252153.259 ops/s
# Warmup Iteration   7: 1352810.197 ops/s
# Warmup Iteration   8: 1352367.830 ops/s
# Warmup Iteration   9: 1353659.007 ops/s
# Warmup Iteration  10: 1354101.178 ops/s
# Warmup Iteration  11: 1349094.088 ops/s
# Warmup Iteration  12: 1354358.235 ops/s
# Warmup Iteration  13: 1353954.163 ops/s
# Warmup Iteration  14: 1348415.635 ops/s
# Warmup Iteration  15: 1354537.210 ops/s
# Warmup Iteration  16: 1349151.933 ops/s
# Warmup Iteration  17: 1350482.047 ops/s
# Warmup Iteration  18: 1346817.462 ops/s
# Warmup Iteration  19: 1350883.971 ops/s
# Warmup Iteration  20: 1352209.542 ops/s
# Warmup Iteration  21: 1349454.771 ops/s
# Warmup Iteration  22: 1352485.520 ops/s
# Warmup Iteration  23: 1355645.016 ops/s
# Warmup Iteration  24: 1352642.029 ops/s
# Warmup Iteration  25: 1340900.872 ops/s
# Warmup Iteration  26: 1350349.901 ops/s
# Warmup Iteration  27: 1348621.610 ops/s
# Warmup Iteration  28: 1357304.245 ops/s
# Warmup Iteration  29: 1342132.494 ops/s
# Warmup Iteration  30: 1338433.057 ops/s
Iteration   1: 1353921.593 ops/s
Iteration   2: 1354043.294 ops/s
Iteration   3: 1355057.829 ops/s
Iteration   4: 1348989.424 ops/s
Iteration   5: 1353340.591 ops/s
Iteration   6: 1354657.062 ops/s
Iteration   7: 1354652.742 ops/s
Iteration   8: 1350616.776 ops/s
Iteration   9: 1350708.584 ops/s
Iteration  10: 1351597.145 ops/s
Iteration  11: 1351562.912 ops/s
Iteration  12: 1343725.748 ops/s
Iteration  13: 1351804.723 ops/s
Iteration  14: 1351182.493 ops/s
Iteration  15: 1338382.844 ops/s
Iteration  16: 1349603.333 ops/s
Iteration  17: 1351714.027 ops/s
Iteration  18: 1353177.853 ops/s
Iteration  19: 1349145.979 ops/s
Iteration  20: 1345809.912 ops/s
Iteration  21: 1349711.146 ops/s
Iteration  22: 1353151.397 ops/s
Iteration  23: 1355696.391 ops/s
Iteration  24: 1351983.239 ops/s
Iteration  25: 1338462.738 ops/s
Iteration  26: 1350902.419 ops/s
Iteration  27: 1348302.501 ops/s
Iteration  28: 1354679.943 ops/s
Iteration  29: 1351091.616 ops/s
Iteration  30: 1333052.055 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_aggregateByNonMutating":
  1350024.277 ±(99.9%) 3558.477 ops/s [Average]
  (min, avg, max) = (1333052.055, 1350024.277, 1355696.391), stdev = 5326.161
  CI (99.9%): [1346465.800, 1353582.754] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_aggregateByNonMutating  thrpt   30  1350024.277 ± 3558.477  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 153481240.478 ops/s
# Warmup Iteration   2: 303900165.508 ops/s
# Warmup Iteration   3: 266429375.438 ops/s
# Warmup Iteration   4: 311503161.634 ops/s
# Warmup Iteration   5: 311379093.661 ops/s
# Warmup Iteration   6: 311448648.042 ops/s
# Warmup Iteration   7: 311328040.081 ops/s
# Warmup Iteration   8: 311435290.117 ops/s
# Warmup Iteration   9: 312274858.181 ops/s
# Warmup Iteration  10: 310310385.803 ops/s
# Warmup Iteration  11: 311778004.083 ops/s
# Warmup Iteration  12: 311675811.669 ops/s
# Warmup Iteration  13: 311117903.808 ops/s
# Warmup Iteration  14: 310974997.673 ops/s
# Warmup Iteration  15: 311964995.926 ops/s
# Warmup Iteration  16: 311668777.984 ops/s
# Warmup Iteration  17: 311058947.702 ops/s
# Warmup Iteration  18: 311866250.177 ops/s
# Warmup Iteration  19: 311417714.837 ops/s
# Warmup Iteration  20: 311505684.794 ops/s
# Warmup Iteration  21: 311421472.292 ops/s
# Warmup Iteration  22: 312364561.468 ops/s
# Warmup Iteration  23: 311960477.926 ops/s
# Warmup Iteration  24: 311682509.410 ops/s
# Warmup Iteration  25: 311003690.140 ops/s
# Warmup Iteration  26: 311110268.102 ops/s
# Warmup Iteration  27: 311171920.416 ops/s
# Warmup Iteration  28: 311739336.583 ops/s
# Warmup Iteration  29: 311491989.671 ops/s
# Warmup Iteration  30: 311792034.853 ops/s
Iteration   1: 311389576.959 ops/s
Iteration   2: 310485919.620 ops/s
Iteration   3: 309715988.123 ops/s
Iteration   4: 311432912.107 ops/s
Iteration   5: 311222663.525 ops/s
Iteration   6: 312486811.771 ops/s
Iteration   7: 310768046.091 ops/s
Iteration   8: 311301800.919 ops/s
Iteration   9: 311036814.810 ops/s
Iteration  10: 311543324.284 ops/s
Iteration  11: 312824677.981 ops/s
Iteration  12: 312265569.254 ops/s
Iteration  13: 312240328.320 ops/s
Iteration  14: 310841618.361 ops/s
Iteration  15: 312508468.976 ops/s
Iteration  16: 311799663.266 ops/s
Iteration  17: 310662258.295 ops/s
Iteration  18: 310484382.703 ops/s
Iteration  19: 310478136.212 ops/s
Iteration  20: 311772462.697 ops/s
Iteration  21: 309979501.570 ops/s
Iteration  22: 310213655.063 ops/s
Iteration  23: 310490366.891 ops/s
Iteration  24: 311707208.439 ops/s
Iteration  25: 310738960.706 ops/s
Iteration  26: 311436340.069 ops/s
Iteration  27: 312104916.904 ops/s
Iteration  28: 310187910.579 ops/s
Iteration  29: 311609862.862 ops/s
Iteration  30: 310708346.449 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_allSatisfy":
  311214616.460 ±(99.9%) 544278.147 ops/s [Average]
  (min, avg, max) = (309715988.123, 311214616.460, 312824677.981), stdev = 814649.969
  CI (99.9%): [310670338.314, 311758894.607] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt          Score        Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_allSatisfy  thrpt   30  311214616.460 ± 544278.147  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_allSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_allSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 153176805.545 ops/s
# Warmup Iteration   2: 303608924.252 ops/s
# Warmup Iteration   3: 266619102.473 ops/s
# Warmup Iteration   4: 311478506.516 ops/s
# Warmup Iteration   5: 310546712.766 ops/s
# Warmup Iteration   6: 309871316.284 ops/s
# Warmup Iteration   7: 312366775.591 ops/s
# Warmup Iteration   8: 311942246.478 ops/s
# Warmup Iteration   9: 311589485.033 ops/s
# Warmup Iteration  10: 311917168.534 ops/s
# Warmup Iteration  11: 312190215.865 ops/s
# Warmup Iteration  12: 310746917.427 ops/s
# Warmup Iteration  13: 311658371.332 ops/s
# Warmup Iteration  14: 310994418.709 ops/s
# Warmup Iteration  15: 312875565.475 ops/s
# Warmup Iteration  16: 312041638.309 ops/s
# Warmup Iteration  17: 311817282.945 ops/s
# Warmup Iteration  18: 312411180.234 ops/s
# Warmup Iteration  19: 311819466.205 ops/s
# Warmup Iteration  20: 311102031.034 ops/s
# Warmup Iteration  21: 311295670.484 ops/s
# Warmup Iteration  22: 311315671.643 ops/s
# Warmup Iteration  23: 311855280.714 ops/s
# Warmup Iteration  24: 311000623.370 ops/s
# Warmup Iteration  25: 311251241.660 ops/s
# Warmup Iteration  26: 311464216.009 ops/s
# Warmup Iteration  27: 310912983.190 ops/s
# Warmup Iteration  28: 311459165.618 ops/s
# Warmup Iteration  29: 311262581.636 ops/s
# Warmup Iteration  30: 312278538.742 ops/s
Iteration   1: 311610096.541 ops/s
Iteration   2: 311250683.107 ops/s
Iteration   3: 311369646.173 ops/s
Iteration   4: 312951110.127 ops/s
Iteration   5: 312486536.805 ops/s
Iteration   6: 310927615.005 ops/s
Iteration   7: 310530759.618 ops/s
Iteration   8: 311917521.725 ops/s
Iteration   9: 311347081.469 ops/s
Iteration  10: 310149014.309 ops/s
Iteration  11: 312543683.734 ops/s
Iteration  12: 310151287.548 ops/s
Iteration  13: 310935705.835 ops/s
Iteration  14: 308816296.907 ops/s
Iteration  15: 310577007.362 ops/s
Iteration  16: 311457573.949 ops/s
Iteration  17: 311240717.755 ops/s
Iteration  18: 311765364.685 ops/s
Iteration  19: 312074011.860 ops/s
Iteration  20: 311779662.285 ops/s
Iteration  21: 310899153.360 ops/s
Iteration  22: 310150682.839 ops/s
Iteration  23: 309780428.707 ops/s
Iteration  24: 309690217.362 ops/s
Iteration  25: 310875509.161 ops/s
Iteration  26: 310996133.395 ops/s
Iteration  27: 311811899.784 ops/s
Iteration  28: 310328725.687 ops/s
Iteration  29: 312362553.486 ops/s
Iteration  30: 312151407.946 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_allSatisfyWith":
  311164269.618 ±(99.9%) 639894.597 ops/s [Average]
  (min, avg, max) = (308816296.907, 311164269.618, 312951110.127), stdev = 957764.181
  CI (99.9%): [310524375.021, 311804164.214] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt          Score        Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_allSatisfyWith  thrpt   30  311164269.618 ± 639894.597  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_allSatisfyWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_allSatisfyWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 152791688.980 ops/s
# Warmup Iteration   2: 303397083.047 ops/s
# Warmup Iteration   3: 265255964.762 ops/s
# Warmup Iteration   4: 311414404.149 ops/s
# Warmup Iteration   5: 311594135.553 ops/s
# Warmup Iteration   6: 311179845.120 ops/s
# Warmup Iteration   7: 311714455.121 ops/s
# Warmup Iteration   8: 312335538.363 ops/s
# Warmup Iteration   9: 312019387.536 ops/s
# Warmup Iteration  10: 310762135.296 ops/s
# Warmup Iteration  11: 312361098.220 ops/s
# Warmup Iteration  12: 311483405.963 ops/s
# Warmup Iteration  13: 311472205.859 ops/s
# Warmup Iteration  14: 311878907.474 ops/s
# Warmup Iteration  15: 311669876.572 ops/s
# Warmup Iteration  16: 311743350.817 ops/s
# Warmup Iteration  17: 310442524.132 ops/s
# Warmup Iteration  18: 311595677.576 ops/s
# Warmup Iteration  19: 310390776.378 ops/s
# Warmup Iteration  20: 310773887.047 ops/s
# Warmup Iteration  21: 311017222.913 ops/s
# Warmup Iteration  22: 310665106.080 ops/s
# Warmup Iteration  23: 310117264.469 ops/s
# Warmup Iteration  24: 311379201.718 ops/s
# Warmup Iteration  25: 312179208.213 ops/s
# Warmup Iteration  26: 310847889.097 ops/s
# Warmup Iteration  27: 311427147.730 ops/s
# Warmup Iteration  28: 310830873.392 ops/s
# Warmup Iteration  29: 311066647.791 ops/s
# Warmup Iteration  30: 311038912.265 ops/s
Iteration   1: 310970032.948 ops/s
Iteration   2: 311445585.826 ops/s
Iteration   3: 311879448.563 ops/s
Iteration   4: 311752078.454 ops/s
Iteration   5: 312039689.699 ops/s
Iteration   6: 302330741.844 ops/s
Iteration   7: 312040594.234 ops/s
Iteration   8: 312138237.559 ops/s
Iteration   9: 310596162.396 ops/s
Iteration  10: 311077720.117 ops/s
Iteration  11: 311839707.077 ops/s
Iteration  12: 312397206.321 ops/s
Iteration  13: 311316094.481 ops/s
Iteration  14: 310756718.133 ops/s
Iteration  15: 313054765.837 ops/s
Iteration  16: 312059780.008 ops/s
Iteration  17: 308572701.563 ops/s
Iteration  18: 308921038.067 ops/s
Iteration  19: 311472367.220 ops/s
Iteration  20: 312098041.412 ops/s
Iteration  21: 311283992.067 ops/s
Iteration  22: 310016881.778 ops/s
Iteration  23: 311664613.100 ops/s
Iteration  24: 312140547.079 ops/s
Iteration  25: 309984262.146 ops/s
Iteration  26: 310922376.239 ops/s
Iteration  27: 313381872.444 ops/s
Iteration  28: 311231937.898 ops/s
Iteration  29: 312333889.225 ops/s
Iteration  30: 312214135.729 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_allSatisfyWithOccurrences":
  311131107.315 ±(99.9%) 1315442.599 ops/s [Average]
  (min, avg, max) = (302330741.844, 311131107.315, 313381872.444), stdev = 1968892.704
  CI (99.9%): [309815664.717, 312446549.914] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt          Score         Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_allSatisfyWithOccurrences  thrpt   30  311131107.315 ± 1315442.599  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 151661766.844 ops/s
# Warmup Iteration   2: 303838578.525 ops/s
# Warmup Iteration   3: 266608746.003 ops/s
# Warmup Iteration   4: 311231850.490 ops/s
# Warmup Iteration   5: 312870105.950 ops/s
# Warmup Iteration   6: 311781175.095 ops/s
# Warmup Iteration   7: 312594370.253 ops/s
# Warmup Iteration   8: 311737112.161 ops/s
# Warmup Iteration   9: 312881295.126 ops/s
# Warmup Iteration  10: 311097974.677 ops/s
# Warmup Iteration  11: 312628080.433 ops/s
# Warmup Iteration  12: 312317840.349 ops/s
# Warmup Iteration  13: 312673620.384 ops/s
# Warmup Iteration  14: 312225874.758 ops/s
# Warmup Iteration  15: 311532414.699 ops/s
# Warmup Iteration  16: 311786237.530 ops/s
# Warmup Iteration  17: 310904392.552 ops/s
# Warmup Iteration  18: 311428215.296 ops/s
# Warmup Iteration  19: 311074577.618 ops/s
# Warmup Iteration  20: 311454996.436 ops/s
# Warmup Iteration  21: 310930254.711 ops/s
# Warmup Iteration  22: 311130920.691 ops/s
# Warmup Iteration  23: 311140660.275 ops/s
# Warmup Iteration  24: 310909843.473 ops/s
# Warmup Iteration  25: 311703725.135 ops/s
# Warmup Iteration  26: 311292360.899 ops/s
# Warmup Iteration  27: 311085613.948 ops/s
# Warmup Iteration  28: 310907987.234 ops/s
# Warmup Iteration  29: 310914013.484 ops/s
# Warmup Iteration  30: 311028059.617 ops/s
Iteration   1: 310594318.490 ops/s
Iteration   2: 311149151.979 ops/s
Iteration   3: 310719278.930 ops/s
Iteration   4: 311796312.877 ops/s
Iteration   5: 311977451.928 ops/s
Iteration   6: 309928992.978 ops/s
Iteration   7: 311894542.282 ops/s
Iteration   8: 311787524.747 ops/s
Iteration   9: 311320894.630 ops/s
Iteration  10: 311707734.541 ops/s
Iteration  11: 312437391.725 ops/s
Iteration  12: 311987848.950 ops/s
Iteration  13: 312109085.421 ops/s
Iteration  14: 311881119.046 ops/s
Iteration  15: 311725095.745 ops/s
Iteration  16: 311150144.805 ops/s
Iteration  17: 310706376.617 ops/s
Iteration  18: 311219409.259 ops/s
Iteration  19: 310751852.932 ops/s
Iteration  20: 312020893.185 ops/s
Iteration  21: 310527199.797 ops/s
Iteration  22: 309903422.592 ops/s
Iteration  23: 311267923.994 ops/s
Iteration  24: 311641333.869 ops/s
Iteration  25: 311339323.410 ops/s
Iteration  26: 309986974.455 ops/s
Iteration  27: 310599245.168 ops/s
Iteration  28: 312736108.379 ops/s
Iteration  29: 309664861.782 ops/s
Iteration  30: 310528232.236 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_anySatisfy":
  311235334.892 ±(99.9%) 532617.370 ops/s [Average]
  (min, avg, max) = (309664861.782, 311235334.892, 312736108.379), stdev = 797196.666
  CI (99.9%): [310702717.522, 311767952.262] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt          Score        Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_anySatisfy  thrpt   30  311235334.892 ± 532617.370  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_anySatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_anySatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 150955939.588 ops/s
# Warmup Iteration   2: 304955953.279 ops/s
# Warmup Iteration   3: 266417491.111 ops/s
# Warmup Iteration   4: 311590362.641 ops/s
# Warmup Iteration   5: 311477610.147 ops/s
# Warmup Iteration   6: 312426337.566 ops/s
# Warmup Iteration   7: 311880732.703 ops/s
# Warmup Iteration   8: 311404908.502 ops/s
# Warmup Iteration   9: 312651989.055 ops/s
# Warmup Iteration  10: 310095887.102 ops/s
# Warmup Iteration  11: 311372260.330 ops/s
# Warmup Iteration  12: 311650157.310 ops/s
# Warmup Iteration  13: 312212899.489 ops/s
# Warmup Iteration  14: 310880256.087 ops/s
# Warmup Iteration  15: 311250673.894 ops/s
# Warmup Iteration  16: 311775578.366 ops/s
# Warmup Iteration  17: 311125833.126 ops/s
# Warmup Iteration  18: 312178871.781 ops/s
# Warmup Iteration  19: 311380052.795 ops/s
# Warmup Iteration  20: 311631133.709 ops/s
# Warmup Iteration  21: 311600056.778 ops/s
# Warmup Iteration  22: 311835401.132 ops/s
# Warmup Iteration  23: 311713772.529 ops/s
# Warmup Iteration  24: 311843098.134 ops/s
# Warmup Iteration  25: 312229725.745 ops/s
# Warmup Iteration  26: 311297874.107 ops/s
# Warmup Iteration  27: 310904242.045 ops/s
# Warmup Iteration  28: 311107776.681 ops/s
# Warmup Iteration  29: 311021933.299 ops/s
# Warmup Iteration  30: 311974995.200 ops/s
Iteration   1: 312333811.389 ops/s
Iteration   2: 312269401.673 ops/s
Iteration   3: 311570714.380 ops/s
Iteration   4: 311290822.069 ops/s
Iteration   5: 312475619.514 ops/s
Iteration   6: 312038871.677 ops/s
Iteration   7: 311088701.485 ops/s
Iteration   8: 311965272.486 ops/s
Iteration   9: 309797875.318 ops/s
Iteration  10: 311769252.872 ops/s
Iteration  11: 310007837.214 ops/s
Iteration  12: 311539983.367 ops/s
Iteration  13: 310639457.832 ops/s
Iteration  14: 310252307.263 ops/s
Iteration  15: 311877451.891 ops/s
Iteration  16: 311054165.999 ops/s
Iteration  17: 310506314.031 ops/s
Iteration  18: 311930485.739 ops/s
Iteration  19: 311730518.167 ops/s
Iteration  20: 311463687.020 ops/s
Iteration  21: 310460152.443 ops/s
Iteration  22: 310952456.261 ops/s
Iteration  23: 309711655.834 ops/s
Iteration  24: 312787955.237 ops/s
Iteration  25: 309700833.091 ops/s
Iteration  26: 310849013.670 ops/s
Iteration  27: 309785259.006 ops/s
Iteration  28: 312718048.168 ops/s
Iteration  29: 310498351.722 ops/s
Iteration  30: 310460229.504 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_anySatisfyWith":
  311184216.877 ±(99.9%) 625800.592 ops/s [Average]
  (min, avg, max) = (309700833.091, 311184216.877, 312787955.237), stdev = 936668.937
  CI (99.9%): [310558416.285, 311810017.470] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt          Score        Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_anySatisfyWith  thrpt   30  311184216.877 ± 625800.592  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_anySatisfyWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_anySatisfyWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 151910964.826 ops/s
# Warmup Iteration   2: 304067935.954 ops/s
# Warmup Iteration   3: 266967580.103 ops/s
# Warmup Iteration   4: 311638619.767 ops/s
# Warmup Iteration   5: 311533808.240 ops/s
# Warmup Iteration   6: 312844142.753 ops/s
# Warmup Iteration   7: 311871551.150 ops/s
# Warmup Iteration   8: 311687906.056 ops/s
# Warmup Iteration   9: 312605886.237 ops/s
# Warmup Iteration  10: 312185834.052 ops/s
# Warmup Iteration  11: 310374083.566 ops/s
# Warmup Iteration  12: 310360486.897 ops/s
# Warmup Iteration  13: 311842686.946 ops/s
# Warmup Iteration  14: 311891529.741 ops/s
# Warmup Iteration  15: 311963484.759 ops/s
# Warmup Iteration  16: 311771795.098 ops/s
# Warmup Iteration  17: 310864164.351 ops/s
# Warmup Iteration  18: 310075575.062 ops/s
# Warmup Iteration  19: 311824334.016 ops/s
# Warmup Iteration  20: 310890781.300 ops/s
# Warmup Iteration  21: 310562278.393 ops/s
# Warmup Iteration  22: 311099007.914 ops/s
# Warmup Iteration  23: 310117856.361 ops/s
# Warmup Iteration  24: 311501181.128 ops/s
# Warmup Iteration  25: 311796355.028 ops/s
# Warmup Iteration  26: 311784726.038 ops/s
# Warmup Iteration  27: 311687498.273 ops/s
# Warmup Iteration  28: 311223566.159 ops/s
# Warmup Iteration  29: 311523205.778 ops/s
# Warmup Iteration  30: 311646811.886 ops/s
Iteration   1: 311313866.314 ops/s
Iteration   2: 312037420.102 ops/s
Iteration   3: 311137250.405 ops/s
Iteration   4: 310556860.350 ops/s
Iteration   5: 310169023.313 ops/s
Iteration   6: 310922873.021 ops/s
Iteration   7: 311772418.790 ops/s
Iteration   8: 311477314.527 ops/s
Iteration   9: 310383170.179 ops/s
Iteration  10: 312166468.210 ops/s
Iteration  11: 312318982.482 ops/s
Iteration  12: 311687154.122 ops/s
Iteration  13: 311971131.523 ops/s
Iteration  14: 312329691.182 ops/s
Iteration  15: 311359242.246 ops/s
Iteration  16: 310047889.924 ops/s
Iteration  17: 311156060.554 ops/s
Iteration  18: 311091226.538 ops/s
Iteration  19: 311506183.600 ops/s
Iteration  20: 311272108.418 ops/s
Iteration  21: 310793431.155 ops/s
Iteration  22: 310631492.010 ops/s
Iteration  23: 308535281.474 ops/s
Iteration  24: 311220012.227 ops/s
Iteration  25: 311741260.701 ops/s
Iteration  26: 311468588.537 ops/s
Iteration  27: 311899728.524 ops/s
Iteration  28: 311533344.308 ops/s
Iteration  29: 310884766.207 ops/s
Iteration  30: 310399996.434 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_anySatisfyWithOccurrences":
  311192807.913 ±(99.9%) 532128.851 ops/s [Average]
  (min, avg, max) = (308535281.474, 311192807.913, 312329691.182), stdev = 796465.474
  CI (99.9%): [310660679.061, 311724936.764] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt          Score        Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_anySatisfyWithOccurrences  thrpt   30  311192807.913 ± 532128.851  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 839477.673 ops/s
# Warmup Iteration   2: 1949205.677 ops/s
# Warmup Iteration   3: 2031833.454 ops/s
# Warmup Iteration   4: 1738158.166 ops/s
# Warmup Iteration   5: 1983634.821 ops/s
# Warmup Iteration   6: 2022834.664 ops/s
# Warmup Iteration   7: 2031162.986 ops/s
# Warmup Iteration   8: 2028212.180 ops/s
# Warmup Iteration   9: 2031879.805 ops/s
# Warmup Iteration  10: 2030046.861 ops/s
# Warmup Iteration  11: 2033854.538 ops/s
# Warmup Iteration  12: 2016847.597 ops/s
# Warmup Iteration  13: 2031033.026 ops/s
# Warmup Iteration  14: 2025290.965 ops/s
# Warmup Iteration  15: 2034577.147 ops/s
# Warmup Iteration  16: 2032209.320 ops/s
# Warmup Iteration  17: 2033419.455 ops/s
# Warmup Iteration  18: 2029872.929 ops/s
# Warmup Iteration  19: 2032379.161 ops/s
# Warmup Iteration  20: 2033968.390 ops/s
# Warmup Iteration  21: 2034415.845 ops/s
# Warmup Iteration  22: 2028786.410 ops/s
# Warmup Iteration  23: 2031428.132 ops/s
# Warmup Iteration  24: 2025979.467 ops/s
# Warmup Iteration  25: 2033686.981 ops/s
# Warmup Iteration  26: 2036322.288 ops/s
# Warmup Iteration  27: 2031786.252 ops/s
# Warmup Iteration  28: 2036927.400 ops/s
# Warmup Iteration  29: 2024464.129 ops/s
# Warmup Iteration  30: 2017581.250 ops/s
Iteration   1: 2032377.195 ops/s
Iteration   2: 2024716.899 ops/s
Iteration   3: 2021671.171 ops/s
Iteration   4: 2017895.703 ops/s
Iteration   5: 2020968.325 ops/s
Iteration   6: 2037332.622 ops/s
Iteration   7: 2024773.863 ops/s
Iteration   8: 2014064.989 ops/s
Iteration   9: 2034033.493 ops/s
Iteration  10: 2035521.662 ops/s
Iteration  11: 2034418.963 ops/s
Iteration  12: 2037414.927 ops/s
Iteration  13: 2027695.925 ops/s
Iteration  14: 2023247.744 ops/s
Iteration  15: 2039533.622 ops/s
Iteration  16: 2032036.197 ops/s
Iteration  17: 2032481.004 ops/s
Iteration  18: 2027885.291 ops/s
Iteration  19: 2034897.918 ops/s
Iteration  20: 2031711.375 ops/s
Iteration  21: 2027180.485 ops/s
Iteration  22: 2030113.517 ops/s
Iteration  23: 2039155.058 ops/s
Iteration  24: 2027079.508 ops/s
Iteration  25: 2028713.450 ops/s
Iteration  26: 2037623.475 ops/s
Iteration  27: 2036006.025 ops/s
Iteration  28: 2028016.075 ops/s
Iteration  29: 2027718.897 ops/s
Iteration  30: 2037554.572 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_appendString":
  2030127.998 ±(99.9%) 4355.814 ops/s [Average]
  (min, avg, max) = (2014064.989, 2030127.998, 2039533.622), stdev = 6519.578
  CI (99.9%): [2025772.184, 2034483.813] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_appendString  thrpt   30  2030127.998 ± 4355.814  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_appendStringThrows$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_appendStringThrows

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 93980.825 ops/s
# Warmup Iteration   2: 101128.637 ops/s
# Warmup Iteration   3: 117401.803 ops/s
# Warmup Iteration   4: 128355.330 ops/s
# Warmup Iteration   5: 127533.764 ops/s
# Warmup Iteration   6: 128137.712 ops/s
# Warmup Iteration   7: 127608.857 ops/s
# Warmup Iteration   8: 127206.477 ops/s
# Warmup Iteration   9: 128023.991 ops/s
# Warmup Iteration  10: 128501.174 ops/s
# Warmup Iteration  11: 128118.701 ops/s
# Warmup Iteration  12: 128185.109 ops/s
# Warmup Iteration  13: 128086.799 ops/s
# Warmup Iteration  14: 115526.469 ops/s
# Warmup Iteration  15: 119742.394 ops/s
# Warmup Iteration  16: 127969.297 ops/s
# Warmup Iteration  17: 132648.896 ops/s
# Warmup Iteration  18: 133094.981 ops/s
# Warmup Iteration  19: 132985.391 ops/s
# Warmup Iteration  20: 132674.785 ops/s
# Warmup Iteration  21: 132797.556 ops/s
# Warmup Iteration  22: 132976.278 ops/s
# Warmup Iteration  23: 132186.192 ops/s
# Warmup Iteration  24: 132754.345 ops/s
# Warmup Iteration  25: 132946.025 ops/s
# Warmup Iteration  26: 133079.071 ops/s
# Warmup Iteration  27: 132756.330 ops/s
# Warmup Iteration  28: 132807.685 ops/s
# Warmup Iteration  29: 132965.658 ops/s
# Warmup Iteration  30: 133234.993 ops/s
Iteration   1: 133064.950 ops/s
Iteration   2: 132627.781 ops/s
Iteration   3: 132107.115 ops/s
Iteration   4: 131759.558 ops/s
Iteration   5: 132603.070 ops/s
Iteration   6: 133131.380 ops/s
Iteration   7: 133048.326 ops/s
Iteration   8: 132808.238 ops/s
Iteration   9: 132824.255 ops/s
Iteration  10: 132731.586 ops/s
Iteration  11: 132930.937 ops/s
Iteration  12: 132721.209 ops/s
Iteration  13: 133191.085 ops/s
Iteration  14: 132804.625 ops/s
Iteration  15: 132817.363 ops/s
Iteration  16: 133012.546 ops/s
Iteration  17: 132531.599 ops/s
Iteration  18: 132941.996 ops/s
Iteration  19: 132701.578 ops/s
Iteration  20: 132499.501 ops/s
Iteration  21: 132002.451 ops/s
Iteration  22: 132752.738 ops/s
Iteration  23: 132967.907 ops/s
Iteration  24: 132551.314 ops/s
Iteration  25: 133060.009 ops/s
Iteration  26: 133045.365 ops/s
Iteration  27: 132585.754 ops/s
Iteration  28: 132685.565 ops/s
Iteration  29: 132934.873 ops/s
Iteration  30: 133380.403 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_appendStringThrows":
  132760.836 ±(99.9%) 232.644 ops/s [Average]
  (min, avg, max) = (131759.558, 132760.836, 133380.403), stdev = 348.210
  CI (99.9%): [132528.192, 132993.479] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score     Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_appendStringThrows  thrpt   30  132760.836 ± 232.644  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_appendStringWithSeparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_appendStringWithSeparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1008354.167 ops/s
# Warmup Iteration   2: 2302857.329 ops/s
# Warmup Iteration   3: 2343544.747 ops/s
# Warmup Iteration   4: 1959616.279 ops/s
# Warmup Iteration   5: 2351295.497 ops/s
# Warmup Iteration   6: 2350592.118 ops/s
# Warmup Iteration   7: 2343740.682 ops/s
# Warmup Iteration   8: 2350516.577 ops/s
# Warmup Iteration   9: 2349303.726 ops/s
# Warmup Iteration  10: 2355729.733 ops/s
# Warmup Iteration  11: 2352341.157 ops/s
# Warmup Iteration  12: 2346340.669 ops/s
# Warmup Iteration  13: 2349124.909 ops/s
# Warmup Iteration  14: 2345750.428 ops/s
# Warmup Iteration  15: 2349779.502 ops/s
# Warmup Iteration  16: 2349767.099 ops/s
# Warmup Iteration  17: 2353220.489 ops/s
# Warmup Iteration  18: 2354727.065 ops/s
# Warmup Iteration  19: 2346263.185 ops/s
# Warmup Iteration  20: 2354537.761 ops/s
# Warmup Iteration  21: 2350428.642 ops/s
# Warmup Iteration  22: 2352523.979 ops/s
# Warmup Iteration  23: 2344582.988 ops/s
# Warmup Iteration  24: 2347706.516 ops/s
# Warmup Iteration  25: 2351254.692 ops/s
# Warmup Iteration  26: 2344936.101 ops/s
# Warmup Iteration  27: 2349560.084 ops/s
# Warmup Iteration  28: 2353303.126 ops/s
# Warmup Iteration  29: 2352562.761 ops/s
# Warmup Iteration  30: 2344172.767 ops/s
Iteration   1: 2347751.919 ops/s
Iteration   2: 2348387.501 ops/s
Iteration   3: 2353336.488 ops/s
Iteration   4: 2355167.152 ops/s
Iteration   5: 2350706.999 ops/s
Iteration   6: 2346057.112 ops/s
Iteration   7: 2346626.105 ops/s
Iteration   8: 2350138.859 ops/s
Iteration   9: 2350120.351 ops/s
Iteration  10: 2349180.910 ops/s
Iteration  11: 2351842.467 ops/s
Iteration  12: 2351456.900 ops/s
Iteration  13: 2355108.969 ops/s
Iteration  14: 2348429.334 ops/s
Iteration  15: 2357377.370 ops/s
Iteration  16: 2350538.682 ops/s
Iteration  17: 2356752.343 ops/s
Iteration  18: 2315538.487 ops/s
Iteration  19: 2330067.025 ops/s
Iteration  20: 2346020.683 ops/s
Iteration  21: 2353236.316 ops/s
Iteration  22: 2356026.771 ops/s
Iteration  23: 2353770.819 ops/s
Iteration  24: 2354927.261 ops/s
Iteration  25: 2357527.441 ops/s
Iteration  26: 2350118.546 ops/s
Iteration  27: 2353484.033 ops/s
Iteration  28: 2349921.529 ops/s
Iteration  29: 2350308.888 ops/s
Iteration  30: 2346291.370 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_appendStringWithSeparator":
  2349540.621 ±(99.9%) 5507.167 ops/s [Average]
  (min, avg, max) = (2315538.487, 2349540.621, 2357527.441), stdev = 8242.869
  CI (99.9%): [2344033.454, 2355047.788] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_appendStringWithSeparator  thrpt   30  2349540.621 ± 5507.167  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1120424.702 ops/s
# Warmup Iteration   2: 2500942.523 ops/s
# Warmup Iteration   3: 2560499.948 ops/s
# Warmup Iteration   4: 2188383.853 ops/s
# Warmup Iteration   5: 2502981.270 ops/s
# Warmup Iteration   6: 2550587.587 ops/s
# Warmup Iteration   7: 2568021.020 ops/s
# Warmup Iteration   8: 2562615.237 ops/s
# Warmup Iteration   9: 2566093.042 ops/s
# Warmup Iteration  10: 2559995.442 ops/s
# Warmup Iteration  11: 2569189.052 ops/s
# Warmup Iteration  12: 2554921.220 ops/s
# Warmup Iteration  13: 2559806.455 ops/s
# Warmup Iteration  14: 2543842.728 ops/s
# Warmup Iteration  15: 2556467.827 ops/s
# Warmup Iteration  16: 2549344.782 ops/s
# Warmup Iteration  17: 2558890.301 ops/s
# Warmup Iteration  18: 2557880.410 ops/s
# Warmup Iteration  19: 2559014.544 ops/s
# Warmup Iteration  20: 2565101.286 ops/s
# Warmup Iteration  21: 2555115.740 ops/s
# Warmup Iteration  22: 2556578.635 ops/s
# Warmup Iteration  23: 2562243.636 ops/s
# Warmup Iteration  24: 2564128.173 ops/s
# Warmup Iteration  25: 2563637.427 ops/s
# Warmup Iteration  26: 2556999.324 ops/s
# Warmup Iteration  27: 2546010.536 ops/s
# Warmup Iteration  28: 2554204.271 ops/s
# Warmup Iteration  29: 2565521.150 ops/s
# Warmup Iteration  30: 2564466.813 ops/s
Iteration   1: 2566518.941 ops/s
Iteration   2: 2558206.869 ops/s
Iteration   3: 2563155.846 ops/s
Iteration   4: 2551976.543 ops/s
Iteration   5: 2559687.336 ops/s
Iteration   6: 2556243.851 ops/s
Iteration   7: 2564628.098 ops/s
Iteration   8: 2551757.222 ops/s
Iteration   9: 2563718.979 ops/s
Iteration  10: 2547517.186 ops/s
Iteration  11: 2560466.700 ops/s
Iteration  12: 2558035.653 ops/s
Iteration  13: 2557973.368 ops/s
Iteration  14: 2567389.561 ops/s
Iteration  15: 2559940.984 ops/s
Iteration  16: 2568558.629 ops/s
Iteration  17: 2563725.211 ops/s
Iteration  18: 2564579.513 ops/s
Iteration  19: 2557433.461 ops/s
Iteration  20: 2563257.508 ops/s
Iteration  21: 2552735.189 ops/s
Iteration  22: 2569346.065 ops/s
Iteration  23: 2557863.998 ops/s
Iteration  24: 2565970.035 ops/s
Iteration  25: 2552567.175 ops/s
Iteration  26: 2561854.709 ops/s
Iteration  27: 2567971.555 ops/s
Iteration  28: 2547250.404 ops/s
Iteration  29: 2554560.532 ops/s
Iteration  30: 2555977.683 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd":
  2559695.627 ±(99.9%) 4095.026 ops/s [Average]
  (min, avg, max) = (2547250.404, 2559695.627, 2569346.065), stdev = 6129.242
  CI (99.9%): [2555600.601, 2563790.653] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd  thrpt   30  2559695.627 ± 4095.026  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_appendString_with_separator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_appendString_with_separator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 21902050.151 ops/s
# Warmup Iteration   2: 38115009.765 ops/s
# Warmup Iteration   3: 45808886.034 ops/s
# Warmup Iteration   4: 45901291.852 ops/s
# Warmup Iteration   5: 45803975.560 ops/s
# Warmup Iteration   6: 45995757.920 ops/s
# Warmup Iteration   7: 46197189.365 ops/s
# Warmup Iteration   8: 46114272.225 ops/s
# Warmup Iteration   9: 46388964.893 ops/s
# Warmup Iteration  10: 46131843.661 ops/s
# Warmup Iteration  11: 45944224.492 ops/s
# Warmup Iteration  12: 45909334.108 ops/s
# Warmup Iteration  13: 45772389.405 ops/s
# Warmup Iteration  14: 46267044.141 ops/s
# Warmup Iteration  15: 46065362.875 ops/s
# Warmup Iteration  16: 45985686.474 ops/s
# Warmup Iteration  17: 45498873.279 ops/s
# Warmup Iteration  18: 45911647.291 ops/s
# Warmup Iteration  19: 46221853.170 ops/s
# Warmup Iteration  20: 46027931.526 ops/s
# Warmup Iteration  21: 46326633.768 ops/s
# Warmup Iteration  22: 45996820.025 ops/s
# Warmup Iteration  23: 45522596.964 ops/s
# Warmup Iteration  24: 45850330.770 ops/s
# Warmup Iteration  25: 45978632.012 ops/s
# Warmup Iteration  26: 45724842.613 ops/s
# Warmup Iteration  27: 45664918.099 ops/s
# Warmup Iteration  28: 45776765.366 ops/s
# Warmup Iteration  29: 45704803.548 ops/s
# Warmup Iteration  30: 45984308.027 ops/s
Iteration   1: 45598142.449 ops/s
Iteration   2: 45285513.828 ops/s
Iteration   3: 45528812.845 ops/s
Iteration   4: 45150535.970 ops/s
Iteration   5: 45875048.479 ops/s
Iteration   6: 45714652.595 ops/s
Iteration   7: 45930999.885 ops/s
Iteration   8: 45220614.642 ops/s
Iteration   9: 46227475.127 ops/s
Iteration  10: 45684215.446 ops/s
Iteration  11: 46124021.176 ops/s
Iteration  12: 45491817.406 ops/s
Iteration  13: 45885873.674 ops/s
Iteration  14: 46007779.802 ops/s
Iteration  15: 46211245.534 ops/s
Iteration  16: 45993330.297 ops/s
Iteration  17: 46289237.387 ops/s
Iteration  18: 46064898.463 ops/s
Iteration  19: 45487970.001 ops/s
Iteration  20: 45877921.625 ops/s
Iteration  21: 46295849.890 ops/s
Iteration  22: 46388302.759 ops/s
Iteration  23: 46167819.415 ops/s
Iteration  24: 45585780.611 ops/s
Iteration  25: 45701846.939 ops/s
Iteration  26: 45998516.821 ops/s
Iteration  27: 45780467.114 ops/s
Iteration  28: 45978720.139 ops/s
Iteration  29: 45791350.703 ops/s
Iteration  30: 45705517.552 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_appendString_with_separator":
  45834809.286 ±(99.9%) 217019.892 ops/s [Average]
  (min, avg, max) = (45150535.970, 45834809.286, 46388302.759), stdev = 324825.182
  CI (99.9%): [45617789.394, 46051829.178] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt         Score        Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_appendString_with_separator  thrpt   30  45834809.286 ± 217019.892  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_appendString_with_start_separator_end$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_appendString_with_start_separator_end

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 14060650.918 ops/s
# Warmup Iteration   2: 32921093.415 ops/s
# Warmup Iteration   3: 27674567.907 ops/s
# Warmup Iteration   4: 29568276.491 ops/s
# Warmup Iteration   5: 29664768.494 ops/s
# Warmup Iteration   6: 29444810.079 ops/s
# Warmup Iteration   7: 29424713.393 ops/s
# Warmup Iteration   8: 29317787.061 ops/s
# Warmup Iteration   9: 29594081.938 ops/s
# Warmup Iteration  10: 29676243.415 ops/s
# Warmup Iteration  11: 29756542.202 ops/s
# Warmup Iteration  12: 29323794.706 ops/s
# Warmup Iteration  13: 29703354.152 ops/s
# Warmup Iteration  14: 29545010.185 ops/s
# Warmup Iteration  15: 29576645.864 ops/s
# Warmup Iteration  16: 29295198.680 ops/s
# Warmup Iteration  17: 29512917.008 ops/s
# Warmup Iteration  18: 29448830.114 ops/s
# Warmup Iteration  19: 29651540.371 ops/s
# Warmup Iteration  20: 29683984.074 ops/s
# Warmup Iteration  21: 29650283.657 ops/s
# Warmup Iteration  22: 29484053.075 ops/s
# Warmup Iteration  23: 29641243.832 ops/s
# Warmup Iteration  24: 29781641.416 ops/s
# Warmup Iteration  25: 29686938.490 ops/s
# Warmup Iteration  26: 29832761.151 ops/s
# Warmup Iteration  27: 29659058.154 ops/s
# Warmup Iteration  28: 29375092.398 ops/s
# Warmup Iteration  29: 29592254.681 ops/s
# Warmup Iteration  30: 29497390.960 ops/s
Iteration   1: 29709084.644 ops/s
Iteration   2: 29643580.647 ops/s
Iteration   3: 29820014.558 ops/s
Iteration   4: 29661979.195 ops/s
Iteration   5: 29661451.262 ops/s
Iteration   6: 29677028.474 ops/s
Iteration   7: 29558876.546 ops/s
Iteration   8: 29684378.051 ops/s
Iteration   9: 29824037.943 ops/s
Iteration  10: 29842118.842 ops/s
Iteration  11: 29011547.410 ops/s
Iteration  12: 29754696.124 ops/s
Iteration  13: 29675663.044 ops/s
Iteration  14: 29433880.582 ops/s
Iteration  15: 29549166.606 ops/s
Iteration  16: 29626442.708 ops/s
Iteration  17: 29751328.648 ops/s
Iteration  18: 29522767.136 ops/s
Iteration  19: 29724168.060 ops/s
Iteration  20: 29639218.388 ops/s
Iteration  21: 29355409.254 ops/s
Iteration  22: 29589762.538 ops/s
Iteration  23: 29721721.546 ops/s
Iteration  24: 29546466.094 ops/s
Iteration  25: 29593063.937 ops/s
Iteration  26: 29450897.662 ops/s
Iteration  27: 29767849.751 ops/s
Iteration  28: 29609617.524 ops/s
Iteration  29: 29691003.029 ops/s
Iteration  30: 29427337.577 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_appendString_with_start_separator_end":
  29617485.259 ±(99.9%) 111181.797 ops/s [Average]
  (min, avg, max) = (29011547.410, 29617485.259, 29842118.842), stdev = 166411.692
  CI (99.9%): [29506303.463, 29728667.056] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt         Score        Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_appendString_with_start_separator_end  thrpt   30  29617485.259 ± 111181.797  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_asLazy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_asLazy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8417874.038 ops/s
# Warmup Iteration   2: 21235860.062 ops/s
# Warmup Iteration   3: 21540045.250 ops/s
# Warmup Iteration   4: 17460413.696 ops/s
# Warmup Iteration   5: 21602255.997 ops/s
# Warmup Iteration   6: 21558711.290 ops/s
# Warmup Iteration   7: 21543778.378 ops/s
# Warmup Iteration   8: 21487281.154 ops/s
# Warmup Iteration   9: 21557638.277 ops/s
# Warmup Iteration  10: 21529840.703 ops/s
# Warmup Iteration  11: 21434388.802 ops/s
# Warmup Iteration  12: 21516093.050 ops/s
# Warmup Iteration  13: 21574304.653 ops/s
# Warmup Iteration  14: 21503586.876 ops/s
# Warmup Iteration  15: 21418516.822 ops/s
# Warmup Iteration  16: 21559745.568 ops/s
# Warmup Iteration  17: 21764855.489 ops/s
# Warmup Iteration  18: 21764096.160 ops/s
# Warmup Iteration  19: 21735345.199 ops/s
# Warmup Iteration  20: 21731733.652 ops/s
# Warmup Iteration  21: 21759116.651 ops/s
# Warmup Iteration  22: 21784344.040 ops/s
# Warmup Iteration  23: 21794438.416 ops/s
# Warmup Iteration  24: 21736476.925 ops/s
# Warmup Iteration  25: 21768821.785 ops/s
# Warmup Iteration  26: 21806390.281 ops/s
# Warmup Iteration  27: 21678937.168 ops/s
# Warmup Iteration  28: 21786516.065 ops/s
# Warmup Iteration  29: 21749766.863 ops/s
# Warmup Iteration  30: 21775608.565 ops/s
Iteration   1: 21784619.250 ops/s
Iteration   2: 21748856.875 ops/s
Iteration   3: 21768070.853 ops/s
Iteration   4: 21781706.259 ops/s
Iteration   5: 21790165.470 ops/s
Iteration   6: 21763115.900 ops/s
Iteration   7: 21777091.677 ops/s
Iteration   8: 21806088.686 ops/s
Iteration   9: 21767910.441 ops/s
Iteration  10: 21810573.387 ops/s
Iteration  11: 21739264.394 ops/s
Iteration  12: 21778837.866 ops/s
Iteration  13: 21778734.274 ops/s
Iteration  14: 21734549.907 ops/s
Iteration  15: 21801876.243 ops/s
Iteration  16: 21820347.050 ops/s
Iteration  17: 21771114.662 ops/s
Iteration  18: 21747293.612 ops/s
Iteration  19: 21665756.311 ops/s
Iteration  20: 21745942.178 ops/s
Iteration  21: 21782185.385 ops/s
Iteration  22: 21759754.884 ops/s
Iteration  23: 21805406.843 ops/s
Iteration  24: 21798465.640 ops/s
Iteration  25: 21815412.818 ops/s
Iteration  26: 21836489.223 ops/s
Iteration  27: 21706514.637 ops/s
Iteration  28: 21787934.820 ops/s
Iteration  29: 21708643.481 ops/s
Iteration  30: 21778237.475 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_asLazy":
  21772032.017 ±(99.9%) 24497.517 ops/s [Average]
  (min, avg, max) = (21665756.311, 21772032.017, 21836489.223), stdev = 36666.733
  CI (99.9%): [21747534.500, 21796529.534] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score       Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_asLazy  thrpt   30  21772032.017 ± 24497.517  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_chunk$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_chunk

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 152721844.960 ops/s
# Warmup Iteration   2: 303503095.573 ops/s
# Warmup Iteration   3: 265582811.742 ops/s
# Warmup Iteration   4: 308446644.354 ops/s
# Warmup Iteration   5: 309842582.144 ops/s
# Warmup Iteration   6: 309345751.598 ops/s
# Warmup Iteration   7: 308313984.049 ops/s
# Warmup Iteration   8: 309138606.714 ops/s
# Warmup Iteration   9: 309327291.126 ops/s
# Warmup Iteration  10: 307957665.736 ops/s
# Warmup Iteration  11: 308977999.823 ops/s
# Warmup Iteration  12: 309785078.486 ops/s
# Warmup Iteration  13: 309164348.978 ops/s
# Warmup Iteration  14: 309294847.576 ops/s
# Warmup Iteration  15: 308927496.991 ops/s
# Warmup Iteration  16: 307675927.887 ops/s
# Warmup Iteration  17: 241359182.567 ops/s
# Warmup Iteration  18: 241213150.283 ops/s
# Warmup Iteration  19: 241135472.972 ops/s
# Warmup Iteration  20: 241379402.775 ops/s
# Warmup Iteration  21: 240594362.543 ops/s
# Warmup Iteration  22: 241605561.368 ops/s
# Warmup Iteration  23: 241135334.120 ops/s
# Warmup Iteration  24: 241565676.592 ops/s
# Warmup Iteration  25: 241357645.034 ops/s
# Warmup Iteration  26: 241181189.412 ops/s
# Warmup Iteration  27: 240581853.649 ops/s
# Warmup Iteration  28: 241230071.837 ops/s
# Warmup Iteration  29: 241562742.956 ops/s
# Warmup Iteration  30: 240383587.608 ops/s
Iteration   1: 242049089.727 ops/s
Iteration   2: 240561920.370 ops/s
Iteration   3: 241490883.558 ops/s
Iteration   4: 240947020.478 ops/s
Iteration   5: 240540550.394 ops/s
Iteration   6: 241787984.063 ops/s
Iteration   7: 241552262.443 ops/s
Iteration   8: 241539119.288 ops/s
Iteration   9: 241424919.996 ops/s
Iteration  10: 241482426.135 ops/s
Iteration  11: 241177015.432 ops/s
Iteration  12: 241125699.547 ops/s
Iteration  13: 241303413.969 ops/s
Iteration  14: 240855053.024 ops/s
Iteration  15: 241551659.937 ops/s
Iteration  16: 240006748.019 ops/s
Iteration  17: 241710524.764 ops/s
Iteration  18: 241382961.148 ops/s
Iteration  19: 240802899.766 ops/s
Iteration  20: 241116012.304 ops/s
Iteration  21: 241265129.286 ops/s
Iteration  22: 240902533.635 ops/s
Iteration  23: 240367944.953 ops/s
Iteration  24: 241001523.647 ops/s
Iteration  25: 240679400.406 ops/s
Iteration  26: 240748508.779 ops/s
Iteration  27: 240800044.306 ops/s
Iteration  28: 241326265.961 ops/s
Iteration  29: 241737994.065 ops/s
Iteration  30: 241212081.973 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_chunk":
  241148319.712 ±(99.9%) 310251.057 ops/s [Average]
  (min, avg, max) = (240006748.019, 241148319.712, 242049089.727), stdev = 464369.211
  CI (99.9%): [240838068.656, 241458570.769] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt          Score        Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_chunk  thrpt   30  241148319.712 ± 310251.057  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_chunk_empty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_chunk_empty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6136576.642 ops/s
# Warmup Iteration   2: 13775122.069 ops/s
# Warmup Iteration   3: 11384171.394 ops/s
# Warmup Iteration   4: 13481695.117 ops/s
# Warmup Iteration   5: 13405415.053 ops/s
# Warmup Iteration   6: 13457223.053 ops/s
# Warmup Iteration   7: 13450181.469 ops/s
# Warmup Iteration   8: 13492934.929 ops/s
# Warmup Iteration   9: 13489753.620 ops/s
# Warmup Iteration  10: 13462343.996 ops/s
# Warmup Iteration  11: 13408365.418 ops/s
# Warmup Iteration  12: 13425659.839 ops/s
# Warmup Iteration  13: 13486061.170 ops/s
# Warmup Iteration  14: 13472482.315 ops/s
# Warmup Iteration  15: 13478476.765 ops/s
# Warmup Iteration  16: 13461012.494 ops/s
# Warmup Iteration  17: 13428270.782 ops/s
# Warmup Iteration  18: 13517072.219 ops/s
# Warmup Iteration  19: 13447913.917 ops/s
# Warmup Iteration  20: 13484468.224 ops/s
# Warmup Iteration  21: 13415994.864 ops/s
# Warmup Iteration  22: 13481528.875 ops/s
# Warmup Iteration  23: 13418143.169 ops/s
# Warmup Iteration  24: 13502301.279 ops/s
# Warmup Iteration  25: 13466697.723 ops/s
# Warmup Iteration  26: 13490430.507 ops/s
# Warmup Iteration  27: 13504843.931 ops/s
# Warmup Iteration  28: 13502017.192 ops/s
# Warmup Iteration  29: 13507708.536 ops/s
# Warmup Iteration  30: 13472930.613 ops/s
Iteration   1: 13494829.744 ops/s
Iteration   2: 13523737.304 ops/s
Iteration   3: 13529189.807 ops/s
Iteration   4: 13465120.880 ops/s
Iteration   5: 13506341.151 ops/s
Iteration   6: 13515908.513 ops/s
Iteration   7: 13473266.072 ops/s
Iteration   8: 13439570.129 ops/s
Iteration   9: 13501956.076 ops/s
Iteration  10: 13504110.879 ops/s
Iteration  11: 13523032.268 ops/s
Iteration  12: 13417078.359 ops/s
Iteration  13: 13520601.888 ops/s
Iteration  14: 13527548.817 ops/s
Iteration  15: 13399952.185 ops/s
Iteration  16: 13509480.835 ops/s
Iteration  17: 13464282.555 ops/s
Iteration  18: 13506132.769 ops/s
Iteration  19: 13470420.701 ops/s
Iteration  20: 13471250.307 ops/s
Iteration  21: 13488598.646 ops/s
Iteration  22: 13417893.025 ops/s
Iteration  23: 13533564.926 ops/s
Iteration  24: 13424589.879 ops/s
Iteration  25: 13452328.636 ops/s
Iteration  26: 13504332.927 ops/s
Iteration  27: 13493323.537 ops/s
Iteration  28: 13436347.108 ops/s
Iteration  29: 13484701.368 ops/s
Iteration  30: 13474994.682 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_chunk_empty":
  13482482.866 ±(99.9%) 25050.675 ops/s [Average]
  (min, avg, max) = (13399952.185, 13482482.866, 13533564.926), stdev = 37494.673
  CI (99.9%): [13457432.191, 13507533.540] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score       Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_chunk_empty  thrpt   30  13482482.866 ± 25050.675  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_chunk_large_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_chunk_large_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 108478547.074 ops/s
# Warmup Iteration   2: 226318933.334 ops/s
# Warmup Iteration   3: 243083480.451 ops/s
# Warmup Iteration   4: 283972898.372 ops/s
# Warmup Iteration   5: 284140273.128 ops/s
# Warmup Iteration   6: 284608944.607 ops/s
# Warmup Iteration   7: 285542203.373 ops/s
# Warmup Iteration   8: 283679712.009 ops/s
# Warmup Iteration   9: 285325491.173 ops/s
# Warmup Iteration  10: 284243189.510 ops/s
# Warmup Iteration  11: 284536936.030 ops/s
# Warmup Iteration  12: 284953027.309 ops/s
# Warmup Iteration  13: 284109683.096 ops/s
# Warmup Iteration  14: 283274269.030 ops/s
# Warmup Iteration  15: 282709024.551 ops/s
# Warmup Iteration  16: 283371490.746 ops/s
# Warmup Iteration  17: 284560567.900 ops/s
# Warmup Iteration  18: 284501707.351 ops/s
# Warmup Iteration  19: 285141501.952 ops/s
# Warmup Iteration  20: 284085957.864 ops/s
# Warmup Iteration  21: 285724482.079 ops/s
# Warmup Iteration  22: 285270868.011 ops/s
# Warmup Iteration  23: 285262618.553 ops/s
# Warmup Iteration  24: 285821350.002 ops/s
# Warmup Iteration  25: 285994890.337 ops/s
# Warmup Iteration  26: 286444021.564 ops/s
# Warmup Iteration  27: 285624626.205 ops/s
# Warmup Iteration  28: 286005006.901 ops/s
# Warmup Iteration  29: 284906007.689 ops/s
# Warmup Iteration  30: 285814773.315 ops/s
Iteration   1: 283040495.768 ops/s
Iteration   2: 284620441.053 ops/s
Iteration   3: 285424338.523 ops/s
Iteration   4: 283985801.761 ops/s
Iteration   5: 284172574.937 ops/s
Iteration   6: 287369321.186 ops/s
Iteration   7: 286453263.671 ops/s
Iteration   8: 284822801.356 ops/s
Iteration   9: 285457638.958 ops/s
Iteration  10: 284489740.569 ops/s
Iteration  11: 285984782.337 ops/s
Iteration  12: 285782088.130 ops/s
Iteration  13: 285328739.584 ops/s
Iteration  14: 285008562.134 ops/s
Iteration  15: 286399807.508 ops/s
Iteration  16: 286347734.120 ops/s
Iteration  17: 283734625.727 ops/s
Iteration  18: 285545149.741 ops/s
Iteration  19: 286214010.636 ops/s
Iteration  20: 285521590.045 ops/s
Iteration  21: 283556568.441 ops/s
Iteration  22: 284800007.939 ops/s
Iteration  23: 285420571.204 ops/s
Iteration  24: 286544050.111 ops/s
Iteration  25: 286185140.861 ops/s
Iteration  26: 283980651.465 ops/s
Iteration  27: 284285443.066 ops/s
Iteration  28: 284557709.892 ops/s
Iteration  29: 287280927.056 ops/s
Iteration  30: 284717286.442 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_chunk_large_size":
  285234395.474 ±(99.9%) 730641.030 ops/s [Average]
  (min, avg, max) = (283040495.768, 285234395.474, 287369321.186), stdev = 1093589.180
  CI (99.9%): [284503754.444, 285965036.504] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt          Score        Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_chunk_large_size  thrpt   30  285234395.474 ± 730641.030  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_chunk_single$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_chunk_single

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1225361.375 ops/s
# Warmup Iteration   2: 2653055.065 ops/s
# Warmup Iteration   3: 2913646.604 ops/s
# Warmup Iteration   4: 2934876.586 ops/s
# Warmup Iteration   5: 2424348.358 ops/s
# Warmup Iteration   6: 2936327.140 ops/s
# Warmup Iteration   7: 2938757.706 ops/s
# Warmup Iteration   8: 2938752.269 ops/s
# Warmup Iteration   9: 2929650.638 ops/s
# Warmup Iteration  10: 2935720.992 ops/s
# Warmup Iteration  11: 2923181.293 ops/s
# Warmup Iteration  12: 2940407.497 ops/s
# Warmup Iteration  13: 2927111.326 ops/s
# Warmup Iteration  14: 2922977.920 ops/s
# Warmup Iteration  15: 2933640.592 ops/s
# Warmup Iteration  16: 2941291.188 ops/s
# Warmup Iteration  17: 2931366.855 ops/s
# Warmup Iteration  18: 2936645.482 ops/s
# Warmup Iteration  19: 2935599.270 ops/s
# Warmup Iteration  20: 2935126.915 ops/s
# Warmup Iteration  21: 2937141.282 ops/s
# Warmup Iteration  22: 2940985.301 ops/s
# Warmup Iteration  23: 2941692.619 ops/s
# Warmup Iteration  24: 2933492.375 ops/s
# Warmup Iteration  25: 2936138.149 ops/s
# Warmup Iteration  26: 2940673.986 ops/s
# Warmup Iteration  27: 2943142.363 ops/s
# Warmup Iteration  28: 2930899.562 ops/s
# Warmup Iteration  29: 2936284.034 ops/s
# Warmup Iteration  30: 2940982.776 ops/s
Iteration   1: 2946829.676 ops/s
Iteration   2: 2937176.165 ops/s
Iteration   3: 2930778.305 ops/s
Iteration   4: 2925067.814 ops/s
Iteration   5: 2933899.101 ops/s
Iteration   6: 2942797.831 ops/s
Iteration   7: 2940801.100 ops/s
Iteration   8: 2940317.538 ops/s
Iteration   9: 2942191.940 ops/s
Iteration  10: 2941216.953 ops/s
Iteration  11: 2940672.842 ops/s
Iteration  12: 2921118.636 ops/s
Iteration  13: 2941853.367 ops/s
Iteration  14: 2932972.398 ops/s
Iteration  15: 2928151.632 ops/s
Iteration  16: 2944195.643 ops/s
Iteration  17: 2939283.700 ops/s
Iteration  18: 2939169.746 ops/s
Iteration  19: 2935659.003 ops/s
Iteration  20: 2927201.004 ops/s
Iteration  21: 2935396.459 ops/s
Iteration  22: 2928471.836 ops/s
Iteration  23: 2933606.786 ops/s
Iteration  24: 2929796.444 ops/s
Iteration  25: 2929666.225 ops/s
Iteration  26: 2938815.633 ops/s
Iteration  27: 2925963.345 ops/s
Iteration  28: 2943471.729 ops/s
Iteration  29: 2943278.146 ops/s
Iteration  30: 2934920.002 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_chunk_single":
  2935824.700 ±(99.9%) 4466.770 ops/s [Average]
  (min, avg, max) = (2921118.636, 2935824.700, 2946829.676), stdev = 6685.651
  CI (99.9%): [2931357.930, 2940291.470] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_chunk_single  thrpt   30  2935824.700 ± 4466.770  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_chunk_zero_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_chunk_zero_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 766753.105 ops/s
# Warmup Iteration   2: 816809.653 ops/s
# Warmup Iteration   3: 1055189.953 ops/s
# Warmup Iteration   4: 1050986.235 ops/s
# Warmup Iteration   5: 1050863.911 ops/s
# Warmup Iteration   6: 1050289.548 ops/s
# Warmup Iteration   7: 1050885.808 ops/s
# Warmup Iteration   8: 1051417.858 ops/s
# Warmup Iteration   9: 1044359.287 ops/s
# Warmup Iteration  10: 1053504.698 ops/s
# Warmup Iteration  11: 1052213.276 ops/s
# Warmup Iteration  12: 897170.046 ops/s
# Warmup Iteration  13: 1044589.906 ops/s
# Warmup Iteration  14: 1048144.355 ops/s
# Warmup Iteration  15: 1053699.531 ops/s
# Warmup Iteration  16: 1048162.112 ops/s
# Warmup Iteration  17: 1110362.657 ops/s
# Warmup Iteration  18: 1116793.645 ops/s
# Warmup Iteration  19: 1119478.740 ops/s
# Warmup Iteration  20: 1119565.615 ops/s
# Warmup Iteration  21: 1119551.224 ops/s
# Warmup Iteration  22: 1115883.500 ops/s
# Warmup Iteration  23: 1120963.074 ops/s
# Warmup Iteration  24: 1119405.393 ops/s
# Warmup Iteration  25: 1117875.480 ops/s
# Warmup Iteration  26: 1118207.216 ops/s
# Warmup Iteration  27: 1119590.541 ops/s
# Warmup Iteration  28: 1116611.637 ops/s
# Warmup Iteration  29: 1114706.465 ops/s
# Warmup Iteration  30: 1117804.585 ops/s
Iteration   1: 1116693.459 ops/s
Iteration   2: 1117762.220 ops/s
Iteration   3: 1112334.082 ops/s
Iteration   4: 1118509.449 ops/s
Iteration   5: 1114758.949 ops/s
Iteration   6: 1120324.495 ops/s
Iteration   7: 1122716.130 ops/s
Iteration   8: 1116953.494 ops/s
Iteration   9: 1120901.859 ops/s
Iteration  10: 1119628.780 ops/s
Iteration  11: 1119421.737 ops/s
Iteration  12: 1117877.542 ops/s
Iteration  13: 1119715.860 ops/s
Iteration  14: 1113064.095 ops/s
Iteration  15: 1116635.734 ops/s
Iteration  16: 1119454.790 ops/s
Iteration  17: 1122995.601 ops/s
Iteration  18: 1117842.876 ops/s
Iteration  19: 1117301.339 ops/s
Iteration  20: 1120507.158 ops/s
Iteration  21: 1120647.742 ops/s
Iteration  22: 1116499.851 ops/s
Iteration  23: 1120188.273 ops/s
Iteration  24: 1120421.739 ops/s
Iteration  25: 1119430.492 ops/s
Iteration  26: 1116805.102 ops/s
Iteration  27: 1118720.185 ops/s
Iteration  28: 1115995.389 ops/s
Iteration  29: 1114731.227 ops/s
Iteration  30: 1110109.366 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_chunk_zero_throws":
  1117964.967 ±(99.9%) 1963.043 ops/s [Average]
  (min, avg, max) = (1110109.366, 1117964.967, 1122995.601), stdev = 2938.190
  CI (99.9%): [1116001.924, 1119928.010] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_chunk_zero_throws  thrpt   30  1117964.967 ± 1963.043  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 626984.816 ops/s
# Warmup Iteration   2: 758316.185 ops/s
# Warmup Iteration   3: 962314.535 ops/s
# Warmup Iteration   4: 960398.015 ops/s
# Warmup Iteration   5: 972174.185 ops/s
# Warmup Iteration   6: 965385.090 ops/s
# Warmup Iteration   7: 965774.366 ops/s
# Warmup Iteration   8: 964579.739 ops/s
# Warmup Iteration   9: 859941.082 ops/s
# Warmup Iteration  10: 919337.565 ops/s
# Warmup Iteration  11: 966301.877 ops/s
# Warmup Iteration  12: 970288.560 ops/s
# Warmup Iteration  13: 962717.448 ops/s
# Warmup Iteration  14: 964352.316 ops/s
# Warmup Iteration  15: 966953.294 ops/s
# Warmup Iteration  16: 966859.946 ops/s
# Warmup Iteration  17: 1027587.328 ops/s
# Warmup Iteration  18: 1026706.043 ops/s
# Warmup Iteration  19: 1025970.451 ops/s
# Warmup Iteration  20: 1022565.210 ops/s
# Warmup Iteration  21: 1022092.331 ops/s
# Warmup Iteration  22: 1026175.366 ops/s
# Warmup Iteration  23: 1027925.570 ops/s
# Warmup Iteration  24: 1029002.535 ops/s
# Warmup Iteration  25: 1028120.214 ops/s
# Warmup Iteration  26: 1027963.288 ops/s
# Warmup Iteration  27: 1026484.264 ops/s
# Warmup Iteration  28: 1025368.557 ops/s
# Warmup Iteration  29: 1027286.506 ops/s
# Warmup Iteration  30: 1025389.307 ops/s
Iteration   1: 1027070.057 ops/s
Iteration   2: 1027425.170 ops/s
Iteration   3: 1025989.136 ops/s
Iteration   4: 1025788.736 ops/s
Iteration   5: 1028653.033 ops/s
Iteration   6: 1023862.085 ops/s
Iteration   7: 1028018.649 ops/s
Iteration   8: 1031216.208 ops/s
Iteration   9: 1024778.440 ops/s
Iteration  10: 1028020.090 ops/s
Iteration  11: 1025560.593 ops/s
Iteration  12: 1021846.615 ops/s
Iteration  13: 1028662.341 ops/s
Iteration  14: 1025699.707 ops/s
Iteration  15: 1028354.274 ops/s
Iteration  16: 1028655.439 ops/s
Iteration  17: 1027820.919 ops/s
Iteration  18: 1023922.082 ops/s
Iteration  19: 1028296.037 ops/s
Iteration  20: 1027601.913 ops/s
Iteration  21: 1027446.407 ops/s
Iteration  22: 1027686.478 ops/s
Iteration  23: 1024975.212 ops/s
Iteration  24: 1025153.198 ops/s
Iteration  25: 1030366.226 ops/s
Iteration  26: 1027065.841 ops/s
Iteration  27: 1025638.129 ops/s
Iteration  28: 1029975.022 ops/s
Iteration  29: 1023977.654 ops/s
Iteration  30: 1028677.384 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_clear":
  1026940.102 ±(99.9%) 1425.155 ops/s [Average]
  (min, avg, max) = (1021846.615, 1026940.102, 1031216.208), stdev = 2133.105
  CI (99.9%): [1025514.948, 1028365.257] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_clear  thrpt   30  1026940.102 ± 1425.155  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collectionsmpl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collect$ ===
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 151078730.510 ops/s
# Warmup Iteration   2: 304045138.179 ops/s
# Warmup Iteration   3: 265376159.037 ops/s
# Warmup Iteration   4: 309161992.362 ops/s
# Warmup Iteration   5: 308486886.801 ops/s
# Warmup Iteration   6: 309229629.086 ops/s
# Warmup Iteration   7: 308866706.181 ops/s
# Warmup Iteration   8: 310365809.427 ops/s
# Warmup Iteration   9: 308661851.002 ops/s
# Warmup Iteration  10: 309770494.187 ops/s
# Warmup Iteration  11: 309845558.294 ops/s
# Warmup Iteration  12: 309049829.051 ops/s
# Warmup Iteration  13: 310434882.481 ops/s
# Warmup Iteration  14: 309682507.620 ops/s
# Warmup Iteration  15: 309150909.529 ops/s
# Warmup Iteration  16: 310179930.754 ops/s
# Warmup Iteration  17: 309344900.740 ops/s
# Warmup Iteration  18: 309786348.168 ops/s
# Warmup Iteration  19: 310048387.978 ops/s
# Warmup Iteration  20: 308973149.972 ops/s
# Warmup Iteration  21: 308334761.141 ops/s
# Warmup Iteration  22: 310151111.402 ops/s
# Warmup Iteration  23: 310142648.493 ops/s
# Warmup Iteration  24: 308973447.026 ops/s
# Warmup Iteration  25: 309474700.255 ops/s
# Warmup Iteration  26: 308137488.743 ops/s
# Warmup Iteration  27: 309355770.047 ops/s
# Warmup Iteration  28: 309420529.545 ops/s
# Warmup Iteration  29: 308729992.424 ops/s
# Warmup Iteration  30: 308153212.991 ops/s
Iteration   1: 310220281.482 ops/s
Iteration   2: 310110333.518 ops/s
Iteration   3: 309569500.949 ops/s
Iteration   4: 309057089.139 ops/s
Iteration   5: 310672842.572 ops/s
Iteration   6: 309997049.936 ops/s
Iteration   7: 309627514.370 ops/s
Iteration   8: 309600716.094 ops/s
Iteration   9: 308304299.666 ops/s
Iteration  10: 307620805.056 ops/s
Iteration  11: 309196157.223 ops/s
Iteration  12: 309765508.650 ops/s
Iteration  13: 308014934.557 ops/s
Iteration  14: 307894586.077 ops/s
Iteration  15: 308880137.147 ops/s
Iteration  16: 309558232.147 ops/s
Iteration  17: 309275856.028 ops/s
Iteration  18: 308984763.146 ops/s
Iteration  19: 308425899.508 ops/s
Iteration  20: 308479377.101 ops/s
Iteration  21: 308658384.239 ops/s
Iteration  22: 307723662.302 ops/s
Iteration  23: 309793728.153 ops/s
Iteration  24: 309007995.711 ops/s
Iteration  25: 308915310.718 ops/s
Iteration  26: 306322707.744 ops/s
Iteration  27: 308887341.419 ops/s
Iteration  28: 305471978.165 ops/s
Iteration  29: 307968984.648 ops/s
Iteration  30: 307434938.629 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectBoolean":
  308781363.870 ±(99.9%) 763697.517 ops/s [Average]
  (min, avg, max) = (305471978.165, 308781363.870, 310672842.572), stdev = 1143066.577
  CI (99.9%): [308017666.353, 309545061.386] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt          Score        Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_collectBoolean  thrpt   30  308781363.870 ± 763697.517  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectBooleanWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectBooleanWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3421908.438 ops/s
# Warmup Iteration   2: 7757662.660 ops/s
# Warmup Iteration   3: 7954322.913 ops/s
# Warmup Iteration   4: 6868077.268 ops/s
# Warmup Iteration   5: 7685213.943 ops/s
# Warmup Iteration   6: 7976740.900 ops/s
# Warmup Iteration   7: 7974043.575 ops/s
# Warmup Iteration   8: 7967130.746 ops/s
# Warmup Iteration   9: 7973006.717 ops/s
# Warmup Iteration  10: 7980746.367 ops/s
# Warmup Iteration  11: 7970392.616 ops/s
# Warmup Iteration  12: 7950463.210 ops/s
# Warmup Iteration  13: 7975244.739 ops/s
# Warmup Iteration  14: 7964961.685 ops/s
# Warmup Iteration  15: 7975327.200 ops/s
# Warmup Iteration  16: 7974516.407 ops/s
# Warmup Iteration  17: 7967937.481 ops/s
# Warmup Iteration  18: 7960966.892 ops/s
# Warmup Iteration  19: 7982979.722 ops/s
# Warmup Iteration  20: 7977535.989 ops/s
# Warmup Iteration  21: 7972005.480 ops/s
# Warmup Iteration  22: 7972429.333 ops/s
# Warmup Iteration  23: 7968391.526 ops/s
# Warmup Iteration  24: 7969234.270 ops/s
# Warmup Iteration  25: 7946855.390 ops/s
# Warmup Iteration  26: 7970348.422 ops/s
# Warmup Iteration  27: 7985253.102 ops/s
# Warmup Iteration  28: 7977738.249 ops/s
# Warmup Iteration  29: 7969499.327 ops/s
# Warmup Iteration  30: 7960254.838 ops/s
Iteration   1: 7954334.298 ops/s
Iteration   2: 7990200.445 ops/s
Iteration   3: 7966198.903 ops/s
Iteration   4: 7976953.010 ops/s
Iteration   5: 7967495.756 ops/s
Iteration   6: 7925070.606 ops/s
Iteration   7: 7981003.209 ops/s
Iteration   8: 7964730.964 ops/s
Iteration   9: 7976180.892 ops/s
Iteration  10: 7982184.452 ops/s
Iteration  11: 7987742.137 ops/s
Iteration  12: 7983380.000 ops/s
Iteration  13: 7983442.788 ops/s
Iteration  14: 7973342.927 ops/s
Iteration  15: 7989449.224 ops/s
Iteration  16: 7981162.261 ops/s
Iteration  17: 7979751.497 ops/s
Iteration  18: 7972289.104 ops/s
Iteration  19: 7965204.739 ops/s
Iteration  20: 7975824.013 ops/s
Iteration  21: 7968708.685 ops/s
Iteration  22: 7972080.046 ops/s
Iteration  23: 7996224.843 ops/s
Iteration  24: 7947536.562 ops/s
Iteration  25: 7986788.387 ops/s
Iteration  26: 7983268.000 ops/s
Iteration  27: 7893294.084 ops/s
Iteration  28: 7983716.442 ops/s
Iteration  29: 7935308.151 ops/s
Iteration  30: 7984977.914 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectBooleanWithBagTarget":
  7970928.145 ±(99.9%) 14443.200 ops/s [Average]
  (min, avg, max) = (7893294.084, 7970928.145, 7996224.843), stdev = 21617.904
  CI (99.9%): [7956484.945, 7985371.345] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_collectBooleanWithBagTarget  thrpt   30  7970928.145 ± 14443.200  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectBooleanWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectBooleanWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 48030366.629 ops/s
# Warmup Iteration   2: 88133070.909 ops/s
# Warmup Iteration   3: 89786525.786 ops/s
# Warmup Iteration   4: 95956738.455 ops/s
# Warmup Iteration   5: 96122482.504 ops/s
# Warmup Iteration   6: 96004503.284 ops/s
# Warmup Iteration   7: 96286274.473 ops/s
# Warmup Iteration   8: 95651481.761 ops/s
# Warmup Iteration   9: 95688887.503 ops/s
# Warmup Iteration  10: 95963199.003 ops/s
# Warmup Iteration  11: 95456719.470 ops/s
# Warmup Iteration  12: 95879203.958 ops/s
# Warmup Iteration  13: 95532390.505 ops/s
# Warmup Iteration  14: 95856264.519 ops/s
# Warmup Iteration  15: 95890377.997 ops/s
# Warmup Iteration  16: 95420003.108 ops/s
# Warmup Iteration  17: 95793658.021 ops/s
# Warmup Iteration  18: 96108970.625 ops/s
# Warmup Iteration  19: 96316018.726 ops/s
# Warmup Iteration  20: 95961132.000 ops/s
# Warmup Iteration  21: 96029859.573 ops/s
# Warmup Iteration  22: 95996795.469 ops/s
# Warmup Iteration  23: 95858898.096 ops/s
# Warmup Iteration  24: 95892184.521 ops/s
# Warmup Iteration  25: 95818773.337 ops/s
# Warmup Iteration  26: 96288377.153 ops/s
# Warmup Iteration  27: 96115599.734 ops/s
# Warmup Iteration  28: 96153346.622 ops/s
# Warmup Iteration  29: 95311436.098 ops/s
# Warmup Iteration  30: 96018362.196 ops/s
Iteration   1: 95959578.720 ops/s
Iteration   2: 95104730.502 ops/s
Iteration   3: 95961399.910 ops/s
Iteration   4: 95639577.793 ops/s
Iteration   5: 96114993.933 ops/s
Iteration   6: 95883256.456 ops/s
Iteration   7: 96674134.351 ops/s
Iteration   8: 96226141.845 ops/s
Iteration   9: 95542639.323 ops/s
Iteration  10: 96241546.545 ops/s
Iteration  11: 96568378.899 ops/s
Iteration  12: 96243094.366 ops/s
Iteration  13: 96162567.860 ops/s
Iteration  14: 96449697.161 ops/s
Iteration  15: 96307849.323 ops/s
Iteration  16: 95342382.652 ops/s
Iteration  17: 95717495.439 ops/s
Iteration  18: 95692256.979 ops/s
Iteration  19: 95977136.306 ops/s
Iteration  20: 95783831.788 ops/s
Iteration  21: 96135748.631 ops/s
Iteration  22: 95379330.579 ops/s
Iteration  23: 95999737.500 ops/s
Iteration  24: 95763536.460 ops/s
Iteration  25: 94576511.308 ops/s
Iteration  26: 95445716.349 ops/s
Iteration  27: 95513984.981 ops/s
Iteration  28: 95308474.746 ops/s
Iteration  29: 95380428.910 ops/s
Iteration  30: 96501283.295 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectBooleanWithTarget":
  95853248.097 ±(99.9%) 318510.664 ops/s [Average]
  (min, avg, max) = (94576511.308, 95853248.097, 96674134.351), stdev = 476731.804
  CI (99.9%): [95534737.433, 96171758.761] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt         Score        Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_collectBooleanWithTarget  thrpt   30  95853248.097 ± 318510.664  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 518866.876 ops/s
# Warmup Iteration   2: 1261200.231 ops/s
# Warmup Iteration   3: 1321428.375 ops/s
# Warmup Iteration   4: 1100067.964 ops/s
# Warmup Iteration   5: 1330056.243 ops/s
# Warmup Iteration   6: 1332122.056 ops/s
# Warmup Iteration   7: 1330930.695 ops/s
# Warmup Iteration   8: 1327698.949 ops/s
# Warmup Iteration   9: 1321881.236 ops/s
# Warmup Iteration  10: 1324432.725 ops/s
# Warmup Iteration  11: 1329977.589 ops/s
# Warmup Iteration  12: 1329100.019 ops/s
# Warmup Iteration  13: 1319030.085 ops/s
# Warmup Iteration  14: 1326540.005 ops/s
# Warmup Iteration  15: 1328450.221 ops/s
# Warmup Iteration  16: 1323190.935 ops/s
# Warmup Iteration  17: 1327899.495 ops/s
# Warmup Iteration  18: 1328651.344 ops/s
# Warmup Iteration  19: 1321853.247 ops/s
# Warmup Iteration  20: 1321727.133 ops/s
# Warmup Iteration  21: 1325773.766 ops/s
# Warmup Iteration  22: 1326537.944 ops/s
# Warmup Iteration  23: 1328208.528 ops/s
# Warmup Iteration  24: 1327544.844 ops/s
# Warmup Iteration  25: 1323095.324 ops/s
# Warmup Iteration  26: 1326956.190 ops/s
# Warmup Iteration  27: 1325402.408 ops/s
# Warmup Iteration  28: 1327706.869 ops/s
# Warmup Iteration  29: 1330090.705 ops/s
# Warmup Iteration  30: 1324031.851 ops/s
Iteration   1: 1324569.863 ops/s
Iteration   2: 1326475.125 ops/s
Iteration   3: 1330269.550 ops/s
Iteration   4: 1327037.616 ops/s
Iteration   5: 1330913.284 ops/s
Iteration   6: 1317017.641 ops/s
Iteration   7: 1325019.406 ops/s
Iteration   8: 1327869.021 ops/s
Iteration   9: 1327393.021 ops/s
Iteration  10: 1326797.015 ops/s
Iteration  11: 1333128.688 ops/s
Iteration  12: 1329294.022 ops/s
Iteration  13: 1326793.413 ops/s
Iteration  14: 1323975.204 ops/s
Iteration  15: 1330515.569 ops/s
Iteration  16: 1325753.671 ops/s
Iteration  17: 1330488.665 ops/s
Iteration  18: 1331831.277 ops/s
Iteration  19: 1325876.704 ops/s
Iteration  20: 1325593.249 ops/s
Iteration  21: 1325086.701 ops/s
Iteration  22: 1330065.622 ops/s
Iteration  23: 1328603.036 ops/s
Iteration  24: 1320966.201 ops/s
Iteration  25: 1311709.149 ops/s
Iteration  26: 1326407.708 ops/s
Iteration  27: 1329240.268 ops/s
Iteration  28: 1319462.861 ops/s
Iteration  29: 1314674.624 ops/s
Iteration  30: 1312053.201 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectByte":
  1325496.046 ±(99.9%) 3715.500 ops/s [Average]
  (min, avg, max) = (1311709.149, 1325496.046, 1333128.688), stdev = 5561.186
  CI (99.9%): [1321780.546, 1329211.546] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_collectByte  thrpt   30  1325496.046 ± 3715.500  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectByteWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectByteWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1118596.672 ops/s
# Warmup Iteration   2: 2511035.193 ops/s
# Warmup Iteration   3: 2649909.069 ops/s
# Warmup Iteration   4: 2427918.311 ops/s
# Warmup Iteration   5: 2422008.502 ops/s
# Warmup Iteration   6: 2658719.202 ops/s
# Warmup Iteration   7: 2661753.465 ops/s
# Warmup Iteration   8: 2656926.202 ops/s
# Warmup Iteration   9: 2661485.965 ops/s
# Warmup Iteration  10: 2651796.761 ops/s
# Warmup Iteration  11: 2657259.539 ops/s
# Warmup Iteration  12: 2658562.600 ops/s
# Warmup Iteration  13: 2654813.656 ops/s
# Warmup Iteration  14: 2660046.071 ops/s
# Warmup Iteration  15: 2657797.733 ops/s
# Warmup Iteration  16: 2658104.571 ops/s
# Warmup Iteration  17: 2642301.108 ops/s
# Warmup Iteration  18: 2640727.507 ops/s
# Warmup Iteration  19: 2639830.324 ops/s
# Warmup Iteration  20: 2648851.203 ops/s
# Warmup Iteration  21: 2637711.159 ops/s
# Warmup Iteration  22: 2645979.683 ops/s
# Warmup Iteration  23: 2641464.752 ops/s
# Warmup Iteration  24: 2647186.495 ops/s
# Warmup Iteration  25: 2644497.060 ops/s
# Warmup Iteration  26: 2636741.029 ops/s
# Warmup Iteration  27: 2648022.066 ops/s
# Warmup Iteration  28: 2644021.235 ops/s
# Warmup Iteration  29: 2647175.683 ops/s
# Warmup Iteration  30: 2645116.578 ops/s
Iteration   1: 2640568.907 ops/s
Iteration   2: 2650404.639 ops/s
Iteration   3: 2641996.936 ops/s
Iteration   4: 2649688.182 ops/s
Iteration   5: 2654377.462 ops/s
Iteration   6: 2654591.913 ops/s
Iteration   7: 2639501.380 ops/s
Iteration   8: 2634574.284 ops/s
Iteration   9: 2612076.756 ops/s
Iteration  10: 2638216.964 ops/s
Iteration  11: 2643395.479 ops/s
Iteration  12: 2636443.773 ops/s
Iteration  13: 2645360.775 ops/s
Iteration  14: 2641760.049 ops/s
Iteration  15: 2651754.686 ops/s
Iteration  16: 2641753.642 ops/s
Iteration  17: 2633514.711 ops/s
Iteration  18: 2643049.270 ops/s
Iteration  19: 2642567.993 ops/s
Iteration  20: 2657872.204 ops/s
Iteration  21: 2639053.219 ops/s
Iteration  22: 2640169.323 ops/s
Iteration  23: 2640306.908 ops/s
Iteration  24: 2634346.218 ops/s
Iteration  25: 2654026.007 ops/s
Iteration  26: 2641535.952 ops/s
Iteration  27: 2653401.856 ops/s
Iteration  28: 2638396.113 ops/s
Iteration  29: 2649168.893 ops/s
Iteration  30: 2649479.659 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectByteWithBagTarget":
  2643111.805 ±(99.9%) 5964.119 ops/s [Average]
  (min, avg, max) = (2612076.756, 2643111.805, 2657872.204), stdev = 8926.814
  CI (99.9%): [2637147.686, 2649075.925] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_collectByteWithBagTarget  thrpt   30  2643111.805 ± 5964.119  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectByteWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectByteWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 827094.515 ops/s
# Warmup Iteration   2: 1951040.370 ops/s
# Warmup Iteration   3: 2060804.792 ops/s
# Warmup Iteration   4: 1814735.132 ops/s
# Warmup Iteration   5: 1959941.802 ops/s
# Warmup Iteration   6: 2064094.126 ops/s
# Warmup Iteration   7: 2066201.273 ops/s
# Warmup Iteration   8: 2063264.568 ops/s
# Warmup Iteration   9: 2066088.135 ops/s
# Warmup Iteration  10: 2065799.486 ops/s
# Warmup Iteration  11: 2061153.590 ops/s
# Warmup Iteration  12: 2064449.512 ops/s
# Warmup Iteration  13: 2062541.313 ops/s
# Warmup Iteration  14: 2066204.447 ops/s
# Warmup Iteration  15: 2061944.919 ops/s
# Warmup Iteration  16: 2068778.426 ops/s
# Warmup Iteration  17: 2073990.122 ops/s
# Warmup Iteration  18: 2075768.716 ops/s
# Warmup Iteration  19: 2074702.362 ops/s
# Warmup Iteration  20: 2066042.674 ops/s
# Warmup Iteration  21: 2075131.857 ops/s
# Warmup Iteration  22: 2070787.979 ops/s
# Warmup Iteration  23: 2074140.038 ops/s
# Warmup Iteration  24: 2072524.552 ops/s
# Warmup Iteration  25: 2073921.674 ops/s
# Warmup Iteration  26: 2074348.839 ops/s
# Warmup Iteration  27: 2075361.546 ops/s
# Warmup Iteration  28: 2071770.971 ops/s
# Warmup Iteration  29: 2072860.261 ops/s
# Warmup Iteration  30: 2074309.156 ops/s
Iteration   1: 2069896.529 ops/s
Iteration   2: 2080580.794 ops/s
Iteration   3: 2073343.599 ops/s
Iteration   4: 2077460.380 ops/s
Iteration   5: 2065743.319 ops/s
Iteration   6: 2072581.472 ops/s
Iteration   7: 2055467.296 ops/s
Iteration   8: 2078175.472 ops/s
Iteration   9: 2073324.439 ops/s
Iteration  10: 2069263.171 ops/s
Iteration  11: 2069948.597 ops/s
Iteration  12: 2074922.111 ops/s
Iteration  13: 2065832.386 ops/s
Iteration  14: 2078311.255 ops/s
Iteration  15: 2077361.974 ops/s
Iteration  16: 2076157.541 ops/s
Iteration  17: 2076526.153 ops/s
Iteration  18: 2072761.769 ops/s
Iteration  19: 2072022.031 ops/s
Iteration  20: 2076255.988 ops/s
Iteration  21: 2075503.869 ops/s
Iteration  22: 2063456.637 ops/s
Iteration  23: 2077289.157 ops/s
Iteration  24: 2078212.570 ops/s
Iteration  25: 2074006.155 ops/s
Iteration  26: 2077676.379 ops/s
Iteration  27: 2073197.242 ops/s
Iteration  28: 2073461.328 ops/s
Iteration  29: 2069827.181 ops/s
Iteration  30: 2078782.332 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectByteWithTarget":
  2073244.971 ±(99.9%) 3599.139 ops/s [Average]
  (min, avg, max) = (2055467.296, 2073244.971, 2080580.794), stdev = 5387.022
  CI (99.9%): [2069645.832, 2076844.110] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_collectByteWithTarget  thrpt   30  2073244.971 ± 3599.139  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 495862.930 ops/s
# Warmup Iteration   2: 1123115.444 ops/s
# Warmup Iteration   3: 1190111.512 ops/s
# Warmup Iteration   4: 1070685.310 ops/s
# Warmup Iteration   5: 1120863.557 ops/s
# Warmup Iteration   6: 1193791.094 ops/s
# Warmup Iteration   7: 1190319.042 ops/s
# Warmup Iteration   8: 1195181.751 ops/s
# Warmup Iteration   9: 1189557.345 ops/s
# Warmup Iteration  10: 1192138.512 ops/s
# Warmup Iteration  11: 1189652.750 ops/s
# Warmup Iteration  12: 1193279.429 ops/s
# Warmup Iteration  13: 1191903.944 ops/s
# Warmup Iteration  14: 1186168.799 ops/s
# Warmup Iteration  15: 1195778.290 ops/s
# Warmup Iteration  16: 1187729.806 ops/s
# Warmup Iteration  17: 1191445.167 ops/s
# Warmup Iteration  18: 1193046.246 ops/s
# Warmup Iteration  19: 1187490.319 ops/s
# Warmup Iteration  20: 1193604.649 ops/s
# Warmup Iteration  21: 1191651.631 ops/s
# Warmup Iteration  22: 1189648.341 ops/s
# Warmup Iteration  23: 1191748.584 ops/s
# Warmup Iteration  24: 1191285.517 ops/s
# Warmup Iteration  25: 1189317.006 ops/s
# Warmup Iteration  26: 1195700.933 ops/s
# Warmup Iteration  27: 1193074.671 ops/s
# Warmup Iteration  28: 1188913.419 ops/s
# Warmup Iteration  29: 1191825.945 ops/s
# Warmup Iteration  30: 1191667.320 ops/s
Iteration   1: 1184755.245 ops/s
Iteration   2: 1181904.593 ops/s
Iteration   3: 1190948.724 ops/s
Iteration   4: 1194303.142 ops/s
Iteration   5: 1193695.878 ops/s
Iteration   6: 1192048.965 ops/s
Iteration   7: 1187338.984 ops/s
Iteration   8: 1185472.091 ops/s
Iteration   9: 1187395.135 ops/s
Iteration  10: 1196627.960 ops/s
Iteration  11: 1193987.345 ops/s
Iteration  12: 1189858.978 ops/s
Iteration  13: 1190801.566 ops/s
Iteration  14: 1191887.619 ops/s
Iteration  15: 1184736.552 ops/s
Iteration  16: 1191708.371 ops/s
Iteration  17: 1190024.749 ops/s
Iteration  18: 1187465.674 ops/s
Iteration  19: 1190886.653 ops/s
Iteration  20: 1192853.036 ops/s
Iteration  21: 1184521.819 ops/s
Iteration  22: 1192050.560 ops/s
Iteration  23: 1190834.033 ops/s
Iteration  24: 1191688.410 ops/s
Iteration  25: 1188384.910 ops/s
Iteration  26: 1189232.314 ops/s
Iteration  27: 1183889.246 ops/s
Iteration  28: 1183660.097 ops/s
Iteration  29: 1188025.782 ops/s
Iteration  30: 1181988.494 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectChar":
  1189099.231 ±(99.9%) 2593.376 ops/s [Average]
  (min, avg, max) = (1181904.593, 1189099.231, 1196627.960), stdev = 3881.644
  CI (99.9%): [1186505.854, 1191692.607] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_collectChar  thrpt   30  1189099.231 ± 2593.376  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectCharWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectCharWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1105258.505 ops/s
# Warmup Iteration   2: 2531436.205 ops/s
# Warmup Iteration   3: 2620871.088 ops/s
# Warmup Iteration   4: 2260963.947 ops/s
# Warmup Iteration   5: 2538441.587 ops/s
# Warmup Iteration   6: 2626544.743 ops/s
# Warmup Iteration   7: 2627894.676 ops/s
# Warmup Iteration   8: 2623120.365 ops/s
# Warmup Iteration   9: 2621735.237 ops/s
# Warmup Iteration  10: 2626827.221 ops/s
# Warmup Iteration  11: 2626247.752 ops/s
# Warmup Iteration  12: 2622898.020 ops/s
# Warmup Iteration  13: 2623763.086 ops/s
# Warmup Iteration  14: 2616143.182 ops/s
# Warmup Iteration  15: 2624358.324 ops/s
# Warmup Iteration  16: 2623026.176 ops/s
# Warmup Iteration  17: 2620603.162 ops/s
# Warmup Iteration  18: 2618661.312 ops/s
# Warmup Iteration  19: 2617101.284 ops/s
# Warmup Iteration  20: 2622363.345 ops/s
# Warmup Iteration  21: 2625029.710 ops/s
# Warmup Iteration  22: 2621730.114 ops/s
# Warmup Iteration  23: 2624569.705 ops/s
# Warmup Iteration  24: 2619303.287 ops/s
# Warmup Iteration  25: 2621617.293 ops/s
# Warmup Iteration  26: 2620124.713 ops/s
# Warmup Iteration  27: 2623111.177 ops/s
# Warmup Iteration  28: 2623723.580 ops/s
# Warmup Iteration  29: 2617150.486 ops/s
# Warmup Iteration  30: 2616036.061 ops/s
Iteration   1: 2628303.112 ops/s
Iteration   2: 2624467.847 ops/s
Iteration   3: 2589887.054 ops/s
Iteration   4: 2622168.956 ops/s
Iteration   5: 2622452.277 ops/s
Iteration   6: 2613742.067 ops/s
Iteration   7: 2625242.346 ops/s
Iteration   8: 2619628.987 ops/s
Iteration   9: 2624198.432 ops/s
Iteration  10: 2615157.247 ops/s
Iteration  11: 2615483.020 ops/s
Iteration  12: 2623711.960 ops/s
Iteration  13: 2614397.752 ops/s
Iteration  14: 2618975.878 ops/s
Iteration  15: 2620288.384 ops/s
Iteration  16: 2626585.221 ops/s
Iteration  17: 2627377.103 ops/s
Iteration  18: 2618875.441 ops/s
Iteration  19: 2621758.235 ops/s
Iteration  20: 2625405.334 ops/s
Iteration  21: 2620116.349 ops/s
Iteration  22: 2622890.762 ops/s
Iteration  23: 2621528.909 ops/s
Iteration  24: 2624242.621 ops/s
Iteration  25: 2619681.871 ops/s
Iteration  26: 2624872.102 ops/s
Iteration  27: 2621437.181 ops/s
Iteration  28: 2625063.164 ops/s
Iteration  29: 2599963.217 ops/s
Iteration  30: 2627423.346 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectCharWithBagTarget":
  2620177.539 ±(99.9%) 5333.676 ops/s [Average]
  (min, avg, max) = (2589887.054, 2620177.539, 2628303.112), stdev = 7983.196
  CI (99.9%): [2614843.863, 2625511.215] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_collectCharWithBagTarget  thrpt   30  2620177.539 ± 5333.676  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectCharWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectCharWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 847985.957 ops/s
# Warmup Iteration   2: 2006301.535 ops/s
# Warmup Iteration   3: 2071261.111 ops/s
# Warmup Iteration   4: 1736339.025 ops/s
# Warmup Iteration   5: 2083661.715 ops/s
# Warmup Iteration   6: 2084325.104 ops/s
# Warmup Iteration   7: 2086122.323 ops/s
# Warmup Iteration   8: 2084038.097 ops/s
# Warmup Iteration   9: 2083504.074 ops/s
# Warmup Iteration  10: 2085136.010 ops/s
# Warmup Iteration  11: 2082069.800 ops/s
# Warmup Iteration  12: 2082946.493 ops/s
# Warmup Iteration  13: 2086492.987 ops/s
# Warmup Iteration  14: 2077740.427 ops/s
# Warmup Iteration  15: 2073220.455 ops/s
# Warmup Iteration  16: 2078792.123 ops/s
# Warmup Iteration  17: 2101208.560 ops/s
# Warmup Iteration  18: 2099045.961 ops/s
# Warmup Iteration  19: 2096998.291 ops/s
# Warmup Iteration  20: 2089904.699 ops/s
# Warmup Iteration  21: 2098815.849 ops/s
# Warmup Iteration  22: 2101325.766 ops/s
# Warmup Iteration  23: 2100534.635 ops/s
# Warmup Iteration  24: 2100475.372 ops/s
# Warmup Iteration  25: 2094708.783 ops/s
# Warmup Iteration  26: 2097560.777 ops/s
# Warmup Iteration  27: 2084924.106 ops/s
# Warmup Iteration  28: 2078028.845 ops/s
# Warmup Iteration  29: 2095009.042 ops/s
# Warmup Iteration  30: 2095698.459 ops/s
Iteration   1: 2080002.760 ops/s
Iteration   2: 2107472.620 ops/s
Iteration   3: 2092701.895 ops/s
Iteration   4: 2097884.965 ops/s
Iteration   5: 2092937.353 ops/s
Iteration   6: 2097534.583 ops/s
Iteration   7: 2089866.720 ops/s
Iteration   8: 2095274.916 ops/s
Iteration   9: 2096462.283 ops/s
Iteration  10: 2096317.193 ops/s
Iteration  11: 2100036.990 ops/s
Iteration  12: 2090382.573 ops/s
Iteration  13: 2098942.038 ops/s
Iteration  14: 2091600.299 ops/s
Iteration  15: 2094367.262 ops/s
Iteration  16: 2097609.396 ops/s
Iteration  17: 2097872.335 ops/s
Iteration  18: 2095486.199 ops/s
Iteration  19: 2104106.804 ops/s
Iteration  20: 2101224.953 ops/s
Iteration  21: 2097444.751 ops/s
Iteration  22: 2094411.902 ops/s
Iteration  23: 2093615.890 ops/s
Iteration  24: 2100799.943 ops/s
Iteration  25: 2098777.747 ops/s
Iteration  26: 2087128.634 ops/s
Iteration  27: 2095872.708 ops/s
Iteration  28: 2100057.405 ops/s
Iteration  29: 2086484.533 ops/s
Iteration  30: 2087296.111 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectCharWithTarget":
  2095332.459 ±(99.9%) 3761.514 ops/s [Average]
  (min, avg, max) = (2080002.760, 2095332.459, 2107472.620), stdev = 5630.058
  CI (99.9%): [2091570.945, 2099093.973] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_collectCharWithTarget  thrpt   30  2095332.459 ± 3761.514  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 373317.272 ops/s
# Warmup Iteration   2: 886062.858 ops/s
# Warmup Iteration   3: 936269.578 ops/s
# Warmup Iteration   4: 779373.600 ops/s
# Warmup Iteration   5: 937222.111 ops/s
# Warmup Iteration   6: 931493.373 ops/s
# Warmup Iteration   7: 936851.136 ops/s
# Warmup Iteration   8: 936940.418 ops/s
# Warmup Iteration   9: 933063.968 ops/s
# Warmup Iteration  10: 935640.284 ops/s
# Warmup Iteration  11: 935172.546 ops/s
# Warmup Iteration  12: 938444.638 ops/s
# Warmup Iteration  13: 934552.422 ops/s
# Warmup Iteration  14: 937428.697 ops/s
# Warmup Iteration  15: 936452.333 ops/s
# Warmup Iteration  16: 932949.749 ops/s
# Warmup Iteration  17: 935229.597 ops/s
# Warmup Iteration  18: 934424.455 ops/s
# Warmup Iteration  19: 928483.406 ops/s
# Warmup Iteration  20: 934063.906 ops/s
# Warmup Iteration  21: 930534.986 ops/s
# Warmup Iteration  22: 936748.173 ops/s
# Warmup Iteration  23: 932854.122 ops/s
# Warmup Iteration  24: 933168.445 ops/s
# Warmup Iteration  25: 934324.201 ops/s
# Warmup Iteration  26: 935246.197 ops/s
# Warmup Iteration  27: 936369.381 ops/s
# Warmup Iteration  28: 936321.243 ops/s
# Warmup Iteration  29: 938552.558 ops/s
# Warmup Iteration  30: 933076.256 ops/s
Iteration   1: 933497.161 ops/s
Iteration   2: 934360.552 ops/s
Iteration   3: 937326.680 ops/s
Iteration   4: 921921.004 ops/s
Iteration   5: 929998.823 ops/s
Iteration   6: 937949.132 ops/s
Iteration   7: 934001.145 ops/s
Iteration   8: 935122.578 ops/s
Iteration   9: 937228.566 ops/s
Iteration  10: 933521.316 ops/s
Iteration  11: 928759.537 ops/s
Iteration  12: 933109.439 ops/s
Iteration  13: 936118.379 ops/s
Iteration  14: 934165.893 ops/s
Iteration  15: 936362.786 ops/s
Iteration  16: 932098.609 ops/s
Iteration  17: 938320.031 ops/s
Iteration  18: 940762.077 ops/s
Iteration  19: 933711.657 ops/s
Iteration  20: 938569.207 ops/s
Iteration  21: 937747.706 ops/s
Iteration  22: 936262.526 ops/s
Iteration  23: 933420.679 ops/s
Iteration  24: 937624.667 ops/s
Iteration  25: 927258.930 ops/s
Iteration  26: 935891.918 ops/s
Iteration  27: 932432.802 ops/s
Iteration  28: 938984.880 ops/s
Iteration  29: 937594.758 ops/s
Iteration  30: 931152.853 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectDouble":
  934509.210 ±(99.9%) 2633.001 ops/s [Average]
  (min, avg, max) = (921921.004, 934509.210, 940762.077), stdev = 3940.952
  CI (99.9%): [931876.209, 937142.210] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_collectDouble  thrpt   30  934509.210 ± 2633.001  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectDoubleWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectDoubleWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 888834.813 ops/s
# Warmup Iteration   2: 2181471.632 ops/s
# Warmup Iteration   3: 2227573.368 ops/s
# Warmup Iteration   4: 1843519.149 ops/s
# Warmup Iteration   5: 2225615.088 ops/s
# Warmup Iteration   6: 2232745.749 ops/s
# Warmup Iteration   7: 2232491.112 ops/s
# Warmup Iteration   8: 2227903.166 ops/s
# Warmup Iteration   9: 2230285.275 ops/s
# Warmup Iteration  10: 2226538.586 ops/s
# Warmup Iteration  11: 2236798.461 ops/s
# Warmup Iteration  12: 2225036.693 ops/s
# Warmup Iteration  13: 2225737.118 ops/s
# Warmup Iteration  14: 2236569.635 ops/s
# Warmup Iteration  15: 2235330.657 ops/s
# Warmup Iteration  16: 2230800.259 ops/s
# Warmup Iteration  17: 2226588.995 ops/s
# Warmup Iteration  18: 2234511.871 ops/s
# Warmup Iteration  19: 2247537.312 ops/s
# Warmup Iteration  20: 2234608.645 ops/s
# Warmup Iteration  21: 2238797.116 ops/s
# Warmup Iteration  22: 2223217.168 ops/s
# Warmup Iteration  23: 2233768.976 ops/s
# Warmup Iteration  24: 2232494.912 ops/s
# Warmup Iteration  25: 2234584.481 ops/s
# Warmup Iteration  26: 2234319.456 ops/s
# Warmup Iteration  27: 2231924.498 ops/s
# Warmup Iteration  28: 2233914.799 ops/s
# Warmup Iteration  29: 2234092.969 ops/s
# Warmup Iteration  30: 2226875.203 ops/s
Iteration   1: 2240912.652 ops/s
Iteration   2: 2221171.129 ops/s
Iteration   3: 2227970.845 ops/s
Iteration   4: 2229236.859 ops/s
Iteration   5: 2225282.729 ops/s
Iteration   6: 2238134.570 ops/s
Iteration   7: 2233340.210 ops/s
Iteration   8: 2234471.692 ops/s
Iteration   9: 2210288.607 ops/s
Iteration  10: 2222039.922 ops/s
Iteration  11: 2234681.705 ops/s
Iteration  12: 2232383.458 ops/s
Iteration  13: 2231753.165 ops/s
Iteration  14: 2244490.049 ops/s
Iteration  15: 2237450.444 ops/s
Iteration  16: 2227770.808 ops/s
Iteration  17: 2239136.783 ops/s
Iteration  18: 2231184.633 ops/s
Iteration  19: 2241343.809 ops/s
Iteration  20: 2232564.704 ops/s
Iteration  21: 2233326.623 ops/s
Iteration  22: 2230708.177 ops/s
Iteration  23: 2229255.749 ops/s
Iteration  24: 2233414.412 ops/s
Iteration  25: 2237905.438 ops/s
Iteration  26: 2244395.210 ops/s
Iteration  27: 2250087.221 ops/s
Iteration  28: 2232543.515 ops/s
Iteration  29: 2228534.794 ops/s
Iteration  30: 2236572.654 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectDoubleWithBagTarget":
  2233078.419 ±(99.9%) 5203.331 ops/s [Average]
  (min, avg, max) = (2210288.607, 2233078.419, 2250087.221), stdev = 7788.101
  CI (99.9%): [2227875.088, 2238281.749] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_collectDoubleWithBagTarget  thrpt   30  2233078.419 ± 5203.331  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectDoubleWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectDoubleWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 634885.605 ops/s
# Warmup Iteration   2: 1595714.131 ops/s
# Warmup Iteration   3: 1651293.350 ops/s
# Warmup Iteration   4: 1363900.707 ops/s
# Warmup Iteration   5: 1644585.863 ops/s
# Warmup Iteration   6: 1646091.815 ops/s
# Warmup Iteration   7: 1644327.208 ops/s
# Warmup Iteration   8: 1644485.649 ops/s
# Warmup Iteration   9: 1645758.552 ops/s
# Warmup Iteration  10: 1646283.465 ops/s
# Warmup Iteration  11: 1644328.260 ops/s
# Warmup Iteration  12: 1644026.316 ops/s
# Warmup Iteration  13: 1644116.894 ops/s
# Warmup Iteration  14: 1647020.458 ops/s
# Warmup Iteration  15: 1642778.762 ops/s
# Warmup Iteration  16: 1641413.648 ops/s
# Warmup Iteration  17: 1650899.133 ops/s
# Warmup Iteration  18: 1647275.580 ops/s
# Warmup Iteration  19: 1647134.682 ops/s
# Warmup Iteration  20: 1646436.406 ops/s
# Warmup Iteration  21: 1650566.095 ops/s
# Warmup Iteration  22: 1649175.233 ops/s
# Warmup Iteration  23: 1647445.087 ops/s
# Warmup Iteration  24: 1650200.557 ops/s
# Warmup Iteration  25: 1648913.687 ops/s
# Warmup Iteration  26: 1648382.130 ops/s
# Warmup Iteration  27: 1648780.951 ops/s
# Warmup Iteration  28: 1643156.361 ops/s
# Warmup Iteration  29: 1653062.038 ops/s
# Warmup Iteration  30: 1652074.596 ops/s
Iteration   1: 1653166.605 ops/s
Iteration   2: 1650914.280 ops/s
Iteration   3: 1647934.752 ops/s
Iteration   4: 1630761.809 ops/s
Iteration   5: 1642907.780 ops/s
Iteration   6: 1652031.081 ops/s
Iteration   7: 1649852.618 ops/s
Iteration   8: 1654040.831 ops/s
Iteration   9: 1644928.630 ops/s
Iteration  10: 1642521.466 ops/s
Iteration  11: 1654418.007 ops/s
Iteration  12: 1652395.267 ops/s
Iteration  13: 1650733.980 ops/s
Iteration  14: 1652355.624 ops/s
Iteration  15: 1646783.145 ops/s
Iteration  16: 1646993.688 ops/s
Iteration  17: 1653445.784 ops/s
Iteration  18: 1647869.749 ops/s
Iteration  19: 1651384.434 ops/s
Iteration  20: 1649606.501 ops/s
Iteration  21: 1651856.950 ops/s
Iteration  22: 1649930.953 ops/s
Iteration  23: 1649534.852 ops/s
Iteration  24: 1650964.095 ops/s
Iteration  25: 1637838.468 ops/s
Iteration  26: 1650456.170 ops/s
Iteration  27: 1649602.019 ops/s
Iteration  28: 1651135.549 ops/s
Iteration  29: 1654194.045 ops/s
Iteration  30: 1653572.207 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectDoubleWithTarget":
  1649137.711 ±(99.9%) 3440.605 ops/s [Average]
  (min, avg, max) = (1630761.809, 1649137.711, 1654418.007), stdev = 5149.736
  CI (99.9%): [1645697.107, 1652578.316] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_collectDoubleWithTarget  thrpt   30  1649137.711 ± 3440.605  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 433820.941 ops/s
# Warmup Iteration   2: 1005681.424 ops/s
# Warmup Iteration   3: 1058759.344 ops/s
# Warmup Iteration   4: 962061.902 ops/s
# Warmup Iteration   5: 987688.853 ops/s
# Warmup Iteration   6: 1061388.685 ops/s
# Warmup Iteration   7: 1062953.729 ops/s
# Warmup Iteration   8: 1062749.427 ops/s
# Warmup Iteration   9: 1056086.192 ops/s
# Warmup Iteration  10: 1064486.181 ops/s
# Warmup Iteration  11: 1060082.298 ops/s
# Warmup Iteration  12: 1062586.762 ops/s
# Warmup Iteration  13: 1060985.401 ops/s
# Warmup Iteration  14: 1062358.129 ops/s
# Warmup Iteration  15: 1061108.098 ops/s
# Warmup Iteration  16: 1062612.709 ops/s
# Warmup Iteration  17: 1061361.692 ops/s
# Warmup Iteration  18: 1055623.930 ops/s
# Warmup Iteration  19: 1058032.102 ops/s
# Warmup Iteration  20: 1061055.473 ops/s
# Warmup Iteration  21: 1057625.689 ops/s
# Warmup Iteration  22: 1058115.063 ops/s
# Warmup Iteration  23: 1058779.254 ops/s
# Warmup Iteration  24: 1059979.108 ops/s
# Warmup Iteration  25: 1064620.427 ops/s
# Warmup Iteration  26: 1062437.372 ops/s
# Warmup Iteration  27: 1058927.341 ops/s
# Warmup Iteration  28: 1058990.054 ops/s
# Warmup Iteration  29: 1064648.685 ops/s
# Warmup Iteration  30: 1061012.067 ops/s
Iteration   1: 1057069.654 ops/s
Iteration   2: 1065158.387 ops/s
Iteration   3: 1062515.559 ops/s
Iteration   4: 1062982.417 ops/s
Iteration   5: 1060814.209 ops/s
Iteration   6: 1065666.831 ops/s
Iteration   7: 1056948.278 ops/s
Iteration   8: 1066835.471 ops/s
Iteration   9: 1061674.467 ops/s
Iteration  10: 1058772.489 ops/s
Iteration  11: 1047652.553 ops/s
Iteration  12: 1051423.542 ops/s
Iteration  13: 1062515.712 ops/s
Iteration  14: 1060255.013 ops/s
Iteration  15: 1059261.703 ops/s
Iteration  16: 1062974.600 ops/s
Iteration  17: 1060592.491 ops/s
Iteration  18: 1054424.437 ops/s
Iteration  19: 1061209.558 ops/s
Iteration  20: 1057405.345 ops/s
Iteration  21: 1058367.986 ops/s
Iteration  22: 1062129.115 ops/s
Iteration  23: 1057598.355 ops/s
Iteration  24: 1067363.721 ops/s
Iteration  25: 1058993.584 ops/s
Iteration  26: 1060702.113 ops/s
Iteration  27: 1062003.415 ops/s
Iteration  28: 1061685.222 ops/s
Iteration  29: 1066201.366 ops/s
Iteration  30: 1060682.141 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectFloat":
  1060395.991 ±(99.9%) 2868.955 ops/s [Average]
  (min, avg, max) = (1047652.553, 1060395.991, 1067363.721), stdev = 4294.117
  CI (99.9%): [1057527.036, 1063264.946] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_collectFloat  thrpt   30  1060395.991 ± 2868.955  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectFloatWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectFloatWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1021522.065 ops/s
# Warmup Iteration   2: 2410990.955 ops/s
# Warmup Iteration   3: 2455382.227 ops/s
# Warmup Iteration   4: 2039076.731 ops/s
# Warmup Iteration   5: 2454307.401 ops/s
# Warmup Iteration   6: 2458837.421 ops/s
# Warmup Iteration   7: 2443898.284 ops/s
# Warmup Iteration   8: 2447800.076 ops/s
# Warmup Iteration   9: 2452579.397 ops/s
# Warmup Iteration  10: 2457803.590 ops/s
# Warmup Iteration  11: 2453023.567 ops/s
# Warmup Iteration  12: 2456409.997 ops/s
# Warmup Iteration  13: 2452919.413 ops/s
# Warmup Iteration  14: 2452709.476 ops/s
# Warmup Iteration  15: 2456932.034 ops/s
# Warmup Iteration  16: 2447850.799 ops/s
# Warmup Iteration  17: 2452103.296 ops/s
# Warmup Iteration  18: 2449258.295 ops/s
# Warmup Iteration  19: 2460356.187 ops/s
# Warmup Iteration  20: 2451017.321 ops/s
# Warmup Iteration  21: 2456612.260 ops/s
# Warmup Iteration  22: 2445931.131 ops/s
# Warmup Iteration  23: 2460003.679 ops/s
# Warmup Iteration  24: 2448567.202 ops/s
# Warmup Iteration  25: 2461485.572 ops/s
# Warmup Iteration  26: 2456039.527 ops/s
# Warmup Iteration  27: 2457360.306 ops/s
# Warmup Iteration  28: 2455974.768 ops/s
# Warmup Iteration  29: 2455177.127 ops/s
# Warmup Iteration  30: 2459135.379 ops/s
Iteration   1: 2460866.142 ops/s
Iteration   2: 2452728.818 ops/s
Iteration   3: 2452478.625 ops/s
Iteration   4: 2460412.462 ops/s
Iteration   5: 2453721.704 ops/s
Iteration   6: 2454623.222 ops/s
Iteration   7: 2458821.078 ops/s
Iteration   8: 2446488.848 ops/s
Iteration   9: 2438155.429 ops/s
Iteration  10: 2455116.926 ops/s
Iteration  11: 2447998.012 ops/s
Iteration  12: 2454751.171 ops/s
Iteration  13: 2457465.748 ops/s
Iteration  14: 2456962.114 ops/s
Iteration  15: 2457020.713 ops/s
Iteration  16: 2452279.424 ops/s
Iteration  17: 2457986.371 ops/s
Iteration  18: 2452048.694 ops/s
Iteration  19: 2460897.895 ops/s
Iteration  20: 2455936.082 ops/s
Iteration  21: 2459577.801 ops/s
Iteration  22: 2457104.381 ops/s
Iteration  23: 2456923.907 ops/s
Iteration  24: 2457440.352 ops/s
Iteration  25: 2445823.328 ops/s
Iteration  26: 2458117.619 ops/s
Iteration  27: 2456840.775 ops/s
Iteration  28: 2459829.442 ops/s
Iteration  29: 2450368.736 ops/s
Iteration  30: 2442948.709 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectFloatWithBagTarget":
  2454391.151 ±(99.9%) 3686.292 ops/s [Average]
  (min, avg, max) = (2438155.429, 2454391.151, 2460897.895), stdev = 5517.469
  CI (99.9%): [2450704.859, 2458077.443] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_collectFloatWithBagTarget  thrpt   30  2454391.151 ± 3686.292  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectFloatWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectFloatWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 737499.765 ops/s
# Warmup Iteration   2: 1771299.106 ops/s
# Warmup Iteration   3: 1847455.363 ops/s
# Warmup Iteration   4: 1537676.819 ops/s
# Warmup Iteration   5: 1862686.689 ops/s
# Warmup Iteration   6: 1866229.517 ops/s
# Warmup Iteration   7: 1858213.470 ops/s
# Warmup Iteration   8: 1864128.017 ops/s
# Warmup Iteration   9: 1859305.920 ops/s
# Warmup Iteration  10: 1861951.449 ops/s
# Warmup Iteration  11: 1865271.815 ops/s
# Warmup Iteration  12: 1864247.623 ops/s
# Warmup Iteration  13: 1861596.916 ops/s
# Warmup Iteration  14: 1861917.743 ops/s
# Warmup Iteration  15: 1865152.762 ops/s
# Warmup Iteration  16: 1864498.473 ops/s
# Warmup Iteration  17: 1860812.224 ops/s
# Warmup Iteration  18: 1857893.972 ops/s
# Warmup Iteration  19: 1859572.544 ops/s
# Warmup Iteration  20: 1863841.365 ops/s
# Warmup Iteration  21: 1859918.804 ops/s
# Warmup Iteration  22: 1856454.935 ops/s
# Warmup Iteration  23: 1853606.354 ops/s
# Warmup Iteration  24: 1861659.313 ops/s
# Warmup Iteration  25: 1858305.545 ops/s
# Warmup Iteration  26: 1857764.935 ops/s
# Warmup Iteration  27: 1862327.477 ops/s
# Warmup Iteration  28: 1858399.606 ops/s
# Warmup Iteration  29: 1859907.925 ops/s
# Warmup Iteration  30: 1855357.506 ops/s
Iteration   1: 1856434.135 ops/s
Iteration   2: 1859976.788 ops/s
Iteration   3: 1858607.573 ops/s
Iteration   4: 1857828.905 ops/s
Iteration   5: 1860063.930 ops/s
Iteration   6: 1861824.552 ops/s
Iteration   7: 1863650.986 ops/s
Iteration   8: 1859062.445 ops/s
Iteration   9: 1862180.012 ops/s
Iteration  10: 1856551.643 ops/s
Iteration  11: 1853358.340 ops/s
Iteration  12: 1860608.230 ops/s
Iteration  13: 1865737.085 ops/s
Iteration  14: 1861591.316 ops/s
Iteration  15: 1860890.279 ops/s
Iteration  16: 1863797.858 ops/s
Iteration  17: 1864279.117 ops/s
Iteration  18: 1862259.764 ops/s
Iteration  19: 1856185.823 ops/s
Iteration  20: 1864596.508 ops/s
Iteration  21: 1862019.090 ops/s
Iteration  22: 1852229.367 ops/s
Iteration  23: 1861332.913 ops/s
Iteration  24: 1857193.523 ops/s
Iteration  25: 1855576.843 ops/s
Iteration  26: 1860710.827 ops/s
Iteration  27: 1859705.086 ops/s
Iteration  28: 1858660.082 ops/s
Iteration  29: 1863366.364 ops/s
Iteration  30: 1862480.521 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectFloatWithTarget":
  1860091.997 ±(99.9%) 2223.117 ops/s [Average]
  (min, avg, max) = (1852229.367, 1860091.997, 1865737.085), stdev = 3327.458
  CI (99.9%): [1857868.879, 1862315.114] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_collectFloatWithTarget  thrpt   30  1860091.997 ± 2223.117  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 424422.267 ops/s
# Warmup Iteration   2: 904522.399 ops/s
# Warmup Iteration   3: 980804.658 ops/s
# Warmup Iteration   4: 984102.753 ops/s
# Warmup Iteration   5: 821184.862 ops/s
# Warmup Iteration   6: 982992.609 ops/s
# Warmup Iteration   7: 986521.857 ops/s
# Warmup Iteration   8: 986125.096 ops/s
# Warmup Iteration   9: 984404.319 ops/s
# Warmup Iteration  10: 986421.795 ops/s
# Warmup Iteration  11: 986099.065 ops/s
# Warmup Iteration  12: 983589.749 ops/s
# Warmup Iteration  13: 987310.207 ops/s
# Warmup Iteration  14: 988934.783 ops/s
# Warmup Iteration  15: 989585.212 ops/s
# Warmup Iteration  16: 987919.084 ops/s
# Warmup Iteration  17: 987002.317 ops/s
# Warmup Iteration  18: 985181.648 ops/s
# Warmup Iteration  19: 986520.952 ops/s
# Warmup Iteration  20: 987713.158 ops/s
# Warmup Iteration  21: 986833.916 ops/s
# Warmup Iteration  22: 986770.648 ops/s
# Warmup Iteration  23: 985971.290 ops/s
# Warmup Iteration  24: 985995.500 ops/s
# Warmup Iteration  25: 983119.899 ops/s
# Warmup Iteration  26: 986508.752 ops/s
# Warmup Iteration  27: 985506.075 ops/s
# Warmup Iteration  28: 988981.552 ops/s
# Warmup Iteration  29: 988179.559 ops/s
# Warmup Iteration  30: 987296.453 ops/s
Iteration   1: 986733.526 ops/s
Iteration   2: 987617.340 ops/s
Iteration   3: 986874.655 ops/s
Iteration   4: 981210.165 ops/s
Iteration   5: 988176.098 ops/s
Iteration   6: 986276.808 ops/s
Iteration   7: 987282.658 ops/s
Iteration   8: 986284.281 ops/s
Iteration   9: 988416.795 ops/s
Iteration  10: 987280.680 ops/s
Iteration  11: 986495.182 ops/s
Iteration  12: 990411.532 ops/s
Iteration  13: 985814.095 ops/s
Iteration  14: 987375.024 ops/s
Iteration  15: 985796.901 ops/s
Iteration  16: 988803.706 ops/s
Iteration  17: 983457.841 ops/s
Iteration  18: 983422.260 ops/s
Iteration  19: 987940.832 ops/s
Iteration  20: 989441.678 ops/s
Iteration  21: 985600.597 ops/s
Iteration  22: 985304.099 ops/s
Iteration  23: 987839.873 ops/s
Iteration  24: 981740.241 ops/s
Iteration  25: 982926.603 ops/s
Iteration  26: 987883.831 ops/s
Iteration  27: 980994.082 ops/s
Iteration  28: 983351.205 ops/s
Iteration  29: 990173.609 ops/s
Iteration  30: 986607.950 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectIf":
  986251.138 ±(99.9%) 1674.997 ops/s [Average]
  (min, avg, max) = (980994.082, 986251.138, 990411.532), stdev = 2507.057
  CI (99.9%): [984576.141, 987926.136] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_collectIf  thrpt   30  986251.138 ± 1674.997  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectIfWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectIfWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 21713332.349 ops/s
# Warmup Iteration   2: 37654041.783 ops/s
# Warmup Iteration   3: 43425936.340 ops/s
# Warmup Iteration   4: 43216635.254 ops/s
# Warmup Iteration   5: 43156619.923 ops/s
# Warmup Iteration   6: 43278707.607 ops/s
# Warmup Iteration   7: 43313191.958 ops/s
# Warmup Iteration   8: 43401381.401 ops/s
# Warmup Iteration   9: 43487566.170 ops/s
# Warmup Iteration  10: 43588972.701 ops/s
# Warmup Iteration  11: 43470206.574 ops/s
# Warmup Iteration  12: 43381815.841 ops/s
# Warmup Iteration  13: 43451904.771 ops/s
# Warmup Iteration  14: 43564457.010 ops/s
# Warmup Iteration  15: 43370147.256 ops/s
# Warmup Iteration  16: 43341303.691 ops/s
# Warmup Iteration  17: 43436212.536 ops/s
# Warmup Iteration  18: 43497642.161 ops/s
# Warmup Iteration  19: 43425252.552 ops/s
# Warmup Iteration  20: 43578721.306 ops/s
# Warmup Iteration  21: 43346457.322 ops/s
# Warmup Iteration  22: 43462598.719 ops/s
# Warmup Iteration  23: 43500371.898 ops/s
# Warmup Iteration  24: 43446051.743 ops/s
# Warmup Iteration  25: 43264898.012 ops/s
# Warmup Iteration  26: 43474953.990 ops/s
# Warmup Iteration  27: 43253124.385 ops/s
# Warmup Iteration  28: 43291914.961 ops/s
# Warmup Iteration  29: 43565732.463 ops/s
# Warmup Iteration  30: 43462326.005 ops/s
Iteration   1: 43542764.019 ops/s
Iteration   2: 43442688.098 ops/s
Iteration   3: 43420682.277 ops/s
Iteration   4: 43596413.575 ops/s
Iteration   5: 43500274.451 ops/s
Iteration   6: 43344578.827 ops/s
Iteration   7: 43347927.155 ops/s
Iteration   8: 43580344.092 ops/s
Iteration   9: 43257633.154 ops/s
Iteration  10: 43309117.682 ops/s
Iteration  11: 43354735.261 ops/s
Iteration  12: 43281185.531 ops/s
Iteration  13: 43415271.474 ops/s
Iteration  14: 43304693.176 ops/s
Iteration  15: 43611965.058 ops/s
Iteration  16: 43337579.349 ops/s
Iteration  17: 43559296.897 ops/s
Iteration  18: 43314029.646 ops/s
Iteration  19: 43653508.125 ops/s
Iteration  20: 43536775.257 ops/s
Iteration  21: 43490738.574 ops/s
Iteration  22: 43611563.429 ops/s
Iteration  23: 43435670.140 ops/s
Iteration  24: 43438454.625 ops/s
Iteration  25: 43396561.320 ops/s
Iteration  26: 43484503.002 ops/s
Iteration  27: 43263917.970 ops/s
Iteration  28: 43576454.390 ops/s
Iteration  29: 43111619.556 ops/s
Iteration  30: 43429429.458 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectIfWithTarget":
  43431679.186 ±(99.9%) 87254.357 ops/s [Average]
  (min, avg, max) = (43111619.556, 43431679.186, 43653508.125), stdev = 130598.224
  CI (99.9%): [43344424.828, 43518933.543] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score       Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_collectIfWithTarget  thrpt   30  43431679.186 ± 87254.357  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 479969.161 ops/s
# Warmup Iteration   2: 1155779.740 ops/s
# Warmup Iteration   3: 1199859.374 ops/s
# Warmup Iteration   4: 997903.413 ops/s
# Warmup Iteration   5: 1204915.158 ops/s
# Warmup Iteration   6: 1204508.703 ops/s
# Warmup Iteration   7: 1203873.243 ops/s
# Warmup Iteration   8: 1204998.096 ops/s
# Warmup Iteration   9: 1204911.027 ops/s
# Warmup Iteration  10: 1203038.616 ops/s
# Warmup Iteration  11: 1203169.945 ops/s
# Warmup Iteration  12: 1204808.955 ops/s
# Warmup Iteration  13: 1204446.745 ops/s
# Warmup Iteration  14: 1206295.885 ops/s
# Warmup Iteration  15: 1201981.609 ops/s
# Warmup Iteration  16: 1202257.978 ops/s
# Warmup Iteration  17: 1207135.107 ops/s
# Warmup Iteration  18: 1206195.296 ops/s
# Warmup Iteration  19: 1200156.008 ops/s
# Warmup Iteration  20: 1203155.464 ops/s
# Warmup Iteration  21: 1197789.900 ops/s
# Warmup Iteration  22: 1207118.171 ops/s
# Warmup Iteration  23: 1202723.800 ops/s
# Warmup Iteration  24: 1203354.443 ops/s
# Warmup Iteration  25: 1204828.843 ops/s
# Warmup Iteration  26: 1207607.938 ops/s
# Warmup Iteration  27: 1204993.025 ops/s
# Warmup Iteration  28: 1205492.448 ops/s
# Warmup Iteration  29: 1202247.657 ops/s
# Warmup Iteration  30: 1204215.032 ops/s
Iteration   1: 1198490.976 ops/s
Iteration   2: 1202112.797 ops/s
Iteration   3: 1202667.442 ops/s
Iteration   4: 1207104.437 ops/s
Iteration   5: 1208452.615 ops/s
Iteration   6: 1200807.527 ops/s
Iteration   7: 1206679.163 ops/s
Iteration   8: 1208607.903 ops/s
Iteration   9: 1206609.448 ops/s
Iteration  10: 1201795.182 ops/s
Iteration  11: 1207699.770 ops/s
Iteration  12: 1209173.736 ops/s
Iteration  13: 1205291.697 ops/s
Iteration  14: 1207127.514 ops/s
Iteration  15: 1208265.013 ops/s
Iteration  16: 1201806.882 ops/s
Iteration  17: 1202016.933 ops/s
Iteration  18: 1207294.943 ops/s
Iteration  19: 1203897.303 ops/s
Iteration  20: 1204892.967 ops/s
Iteration  21: 1202913.685 ops/s
Iteration  22: 1203972.405 ops/s
Iteration  23: 1206995.042 ops/s
Iteration  24: 1209071.679 ops/s
Iteration  25: 1204966.225 ops/s
Iteration  26: 1202469.425 ops/s
Iteration  27: 1204021.985 ops/s
Iteration  28: 1201224.784 ops/s
Iteration  29: 1205986.864 ops/s
Iteration  30: 1206167.638 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectInt":
  1204952.799 ±(99.9%) 1898.602 ops/s [Average]
  (min, avg, max) = (1198490.976, 1204952.799, 1209173.736), stdev = 2841.739
  CI (99.9%): [1203054.197, 1206851.402] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_collectInt  thrpt   30  1204952.799 ± 1898.602  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectIntWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectIntWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1052753.986 ops/s
# Warmup Iteration   2: 2353157.718 ops/s
# Warmup Iteration   3: 2399918.586 ops/s
# Warmup Iteration   4: 2297387.041 ops/s
# Warmup Iteration   5: 2131039.453 ops/s
# Warmup Iteration   6: 2422989.607 ops/s
# Warmup Iteration   7: 2427514.690 ops/s
# Warmup Iteration   8: 2418078.795 ops/s
# Warmup Iteration   9: 2417796.034 ops/s
# Warmup Iteration  10: 2413139.438 ops/s
# Warmup Iteration  11: 2422522.444 ops/s
# Warmup Iteration  12: 2427315.233 ops/s
# Warmup Iteration  13: 2413445.759 ops/s
# Warmup Iteration  14: 2429722.564 ops/s
# Warmup Iteration  15: 2428115.025 ops/s
# Warmup Iteration  16: 2419390.992 ops/s
# Warmup Iteration  17: 2422756.821 ops/s
# Warmup Iteration  18: 2413142.808 ops/s
# Warmup Iteration  19: 2425025.077 ops/s
# Warmup Iteration  20: 2422020.217 ops/s
# Warmup Iteration  21: 2408441.859 ops/s
# Warmup Iteration  22: 2413993.050 ops/s
# Warmup Iteration  23: 2427986.030 ops/s
# Warmup Iteration  24: 2422110.689 ops/s
# Warmup Iteration  25: 2422105.848 ops/s
# Warmup Iteration  26: 2422908.022 ops/s
# Warmup Iteration  27: 2427781.158 ops/s
# Warmup Iteration  28: 2412444.280 ops/s
# Warmup Iteration  29: 2423309.846 ops/s
# Warmup Iteration  30: 2422637.402 ops/s
Iteration   1: 2417676.393 ops/s
Iteration   2: 2392561.136 ops/s
Iteration   3: 2408607.792 ops/s
Iteration   4: 2427009.178 ops/s
Iteration   5: 2430272.973 ops/s
Iteration   6: 2424586.419 ops/s
Iteration   7: 2406178.108 ops/s
Iteration   8: 2428386.438 ops/s
Iteration   9: 2430915.783 ops/s
Iteration  10: 2418475.006 ops/s
Iteration  11: 2421025.205 ops/s
Iteration  12: 2428201.219 ops/s
Iteration  13: 2418340.968 ops/s
Iteration  14: 2417861.092 ops/s
Iteration  15: 2424644.930 ops/s
Iteration  16: 2427966.176 ops/s
Iteration  17: 2431480.601 ops/s
Iteration  18: 2426345.292 ops/s
Iteration  19: 2426332.433 ops/s
Iteration  20: 2420500.344 ops/s
Iteration  21: 2421010.037 ops/s
Iteration  22: 2417678.080 ops/s
Iteration  23: 2427148.435 ops/s
Iteration  24: 2424498.370 ops/s
Iteration  25: 2425988.145 ops/s
Iteration  26: 2436007.263 ops/s
Iteration  27: 2426177.649 ops/s
Iteration  28: 2418040.022 ops/s
Iteration  29: 2412262.562 ops/s
Iteration  30: 2423036.890 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectIntWithBagTarget":
  2421973.831 ±(99.9%) 5797.682 ops/s [Average]
  (min, avg, max) = (2392561.136, 2421973.831, 2436007.263), stdev = 8677.698
  CI (99.9%): [2416176.150, 2427771.513] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_collectIntWithBagTarget  thrpt   30  2421973.831 ± 5797.682  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectIntWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectIntWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 780000.221 ops/s
# Warmup Iteration   2: 1871900.698 ops/s
# Warmup Iteration   3: 1956487.212 ops/s
# Warmup Iteration   4: 1634063.378 ops/s
# Warmup Iteration   5: 1972146.902 ops/s
# Warmup Iteration   6: 1963740.928 ops/s
# Warmup Iteration   7: 1964935.934 ops/s
# Warmup Iteration   8: 1967155.756 ops/s
# Warmup Iteration   9: 1967761.113 ops/s
# Warmup Iteration  10: 1957565.876 ops/s
# Warmup Iteration  11: 1962648.670 ops/s
# Warmup Iteration  12: 1975498.901 ops/s
# Warmup Iteration  13: 1967786.062 ops/s
# Warmup Iteration  14: 1964266.346 ops/s
# Warmup Iteration  15: 1966383.482 ops/s
# Warmup Iteration  16: 1972344.829 ops/s
# Warmup Iteration  17: 1964307.329 ops/s
# Warmup Iteration  18: 1966644.310 ops/s
# Warmup Iteration  19: 1960019.603 ops/s
# Warmup Iteration  20: 1970824.506 ops/s
# Warmup Iteration  21: 1966238.470 ops/s
# Warmup Iteration  22: 1966197.175 ops/s
# Warmup Iteration  23: 1970064.242 ops/s
# Warmup Iteration  24: 1961259.984 ops/s
# Warmup Iteration  25: 1953006.534 ops/s
# Warmup Iteration  26: 1953790.154 ops/s
# Warmup Iteration  27: 1969286.308 ops/s
# Warmup Iteration  28: 1966842.095 ops/s
# Warmup Iteration  29: 1966458.920 ops/s
# Warmup Iteration  30: 1962561.297 ops/s
Iteration   1: 1971666.315 ops/s
Iteration   2: 1960621.499 ops/s
Iteration   3: 1962336.670 ops/s
Iteration   4: 1958116.362 ops/s
Iteration   5: 1969270.058 ops/s
Iteration   6: 1959338.459 ops/s
Iteration   7: 1965365.855 ops/s
Iteration   8: 1972014.472 ops/s
Iteration   9: 1965409.077 ops/s
Iteration  10: 1963636.525 ops/s
Iteration  11: 1967481.711 ops/s
Iteration  12: 1968551.146 ops/s
Iteration  13: 1966809.130 ops/s
Iteration  14: 1965285.880 ops/s
Iteration  15: 1970307.714 ops/s
Iteration  16: 1960470.642 ops/s
Iteration  17: 1965176.390 ops/s
Iteration  18: 1962680.679 ops/s
Iteration  19: 1965237.247 ops/s
Iteration  20: 1966933.950 ops/s
Iteration  21: 1968200.627 ops/s
Iteration  22: 1970599.875 ops/s
Iteration  23: 1972657.518 ops/s
Iteration  24: 1968521.598 ops/s
Iteration  25: 1969380.097 ops/s
Iteration  26: 1964763.453 ops/s
Iteration  27: 1965382.609 ops/s
Iteration  28: 1963821.473 ops/s
Iteration  29: 1966045.358 ops/s
Iteration  30: 1971109.606 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectIntWithTarget":
  1966239.733 ±(99.9%) 2559.138 ops/s [Average]
  (min, avg, max) = (1958116.362, 1966239.733, 1972657.518), stdev = 3830.398
  CI (99.9%): [1963680.595, 1968798.872] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_collectIntWithTarget  thrpt   30  1966239.733 ± 2559.138  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 445586.870 ops/s
# Warmup Iteration   2: 1200538.085 ops/s
# Warmup Iteration   3: 1203252.377 ops/s
# Warmup Iteration   4: 1003739.715 ops/s
# Warmup Iteration   5: 1200909.699 ops/s
# Warmup Iteration   6: 1195459.676 ops/s
# Warmup Iteration   7: 1199364.793 ops/s
# Warmup Iteration   8: 1205708.053 ops/s
# Warmup Iteration   9: 1202306.333 ops/s
# Warmup Iteration  10: 1200441.166 ops/s
# Warmup Iteration  11: 1201699.386 ops/s
# Warmup Iteration  12: 1200647.287 ops/s
# Warmup Iteration  13: 1203016.077 ops/s
# Warmup Iteration  14: 1202358.631 ops/s
# Warmup Iteration  15: 1202715.482 ops/s
# Warmup Iteration  16: 1197422.189 ops/s
# Warmup Iteration  17: 1200729.137 ops/s
# Warmup Iteration  18: 1199006.263 ops/s
# Warmup Iteration  19: 1206526.498 ops/s
# Warmup Iteration  20: 1192970.359 ops/s
# Warmup Iteration  21: 1199883.015 ops/s
# Warmup Iteration  22: 1196338.833 ops/s
# Warmup Iteration  23: 1199054.363 ops/s
# Warmup Iteration  24: 1202586.668 ops/s
# Warmup Iteration  25: 1203054.652 ops/s
# Warmup Iteration  26: 1198065.156 ops/s
# Warmup Iteration  27: 1198879.581 ops/s
# Warmup Iteration  28: 1199333.697 ops/s
# Warmup Iteration  29: 1200964.336 ops/s
# Warmup Iteration  30: 1203069.665 ops/s
Iteration   1: 1201347.255 ops/s
Iteration   2: 1199610.650 ops/s
Iteration   3: 1205191.323 ops/s
Iteration   4: 1196619.514 ops/s
Iteration   5: 1203234.211 ops/s
Iteration   6: 1198910.337 ops/s
Iteration   7: 1202094.581 ops/s
Iteration   8: 1199134.764 ops/s
Iteration   9: 1194744.295 ops/s
Iteration  10: 1201843.113 ops/s
Iteration  11: 1208295.240 ops/s
Iteration  12: 1203939.555 ops/s
Iteration  13: 1189408.475 ops/s
Iteration  14: 1207475.763 ops/s
Iteration  15: 1207450.478 ops/s
Iteration  16: 1206252.033 ops/s
Iteration  17: 1201145.961 ops/s
Iteration  18: 1202574.198 ops/s
Iteration  19: 1203054.269 ops/s
Iteration  20: 1203931.090 ops/s
Iteration  21: 1187332.877 ops/s
Iteration  22: 1197551.280 ops/s
Iteration  23: 1201571.450 ops/s
Iteration  24: 1199440.543 ops/s
Iteration  25: 1199947.593 ops/s
Iteration  26: 1199518.372 ops/s
Iteration  27: 1208050.085 ops/s
Iteration  28: 1201593.597 ops/s
Iteration  29: 1200666.003 ops/s
Iteration  30: 1202470.823 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectLong":
  1201146.658 ±(99.9%) 3215.621 ops/s [Average]
  (min, avg, max) = (1187332.877, 1201146.658, 1208295.240), stdev = 4812.991
  CI (99.9%): [1197931.036, 1204362.279] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_collectLong  thrpt   30  1201146.658 ± 3215.621  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectLongWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectLongWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 946629.549 ops/s
# Warmup Iteration   2: 2401556.912 ops/s
# Warmup Iteration   3: 2388906.889 ops/s
# Warmup Iteration   4: 1997577.894 ops/s
# Warmup Iteration   5: 2416196.940 ops/s
# Warmup Iteration   6: 2412690.887 ops/s
# Warmup Iteration   7: 2407340.915 ops/s
# Warmup Iteration   8: 2412529.923 ops/s
# Warmup Iteration   9: 2412643.394 ops/s
# Warmup Iteration  10: 2408604.589 ops/s
# Warmup Iteration  11: 2403597.097 ops/s
# Warmup Iteration  12: 2406702.166 ops/s
# Warmup Iteration  13: 2416432.672 ops/s
# Warmup Iteration  14: 2412893.452 ops/s
# Warmup Iteration  15: 2397376.558 ops/s
# Warmup Iteration  16: 2406616.399 ops/s
# Warmup Iteration  17: 2412842.301 ops/s
# Warmup Iteration  18: 2410128.539 ops/s
# Warmup Iteration  19: 2412712.975 ops/s
# Warmup Iteration  20: 2411842.486 ops/s
# Warmup Iteration  21: 2403322.232 ops/s
# Warmup Iteration  22: 2408863.900 ops/s
# Warmup Iteration  23: 2412311.106 ops/s
# Warmup Iteration  24: 2410458.364 ops/s
# Warmup Iteration  25: 2412561.418 ops/s
# Warmup Iteration  26: 2410395.825 ops/s
# Warmup Iteration  27: 2413720.645 ops/s
# Warmup Iteration  28: 2415352.941 ops/s
# Warmup Iteration  29: 2411738.137 ops/s
# Warmup Iteration  30: 2401192.366 ops/s
Iteration   1: 2381457.850 ops/s
Iteration   2: 2420739.065 ops/s
Iteration   3: 2417354.492 ops/s
Iteration   4: 2405024.718 ops/s
Iteration   5: 2399457.314 ops/s
Iteration   6: 2404967.158 ops/s
Iteration   7: 2406795.094 ops/s
Iteration   8: 2417128.823 ops/s
Iteration   9: 2408531.325 ops/s
Iteration  10: 2414325.299 ops/s
Iteration  11: 2409264.231 ops/s
Iteration  12: 2406168.149 ops/s
Iteration  13: 2410450.378 ops/s
Iteration  14: 2410137.786 ops/s
Iteration  15: 2418684.428 ops/s
Iteration  16: 2397170.865 ops/s
Iteration  17: 2427398.610 ops/s
Iteration  18: 2418064.873 ops/s
Iteration  19: 2407159.183 ops/s
Iteration  20: 2414540.469 ops/s
Iteration  21: 2416330.345 ops/s
Iteration  22: 2405363.592 ops/s
Iteration  23: 2413949.680 ops/s
Iteration  24: 2411127.378 ops/s
Iteration  25: 2407669.768 ops/s
Iteration  26: 2415603.414 ops/s
Iteration  27: 2413605.263 ops/s
Iteration  28: 2410272.004 ops/s
Iteration  29: 2413531.288 ops/s
Iteration  30: 2419973.855 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectLongWithBagTarget":
  2410741.557 ±(99.9%) 5689.374 ops/s [Average]
  (min, avg, max) = (2381457.850, 2410741.557, 2427398.610), stdev = 8515.588
  CI (99.9%): [2405052.183, 2416430.930] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_collectLongWithBagTarget  thrpt   30  2410741.557 ± 5689.374  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectLongWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectLongWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 663432.378 ops/s
# Warmup Iteration   2: 1898650.777 ops/s
# Warmup Iteration   3: 1905335.565 ops/s
# Warmup Iteration   4: 1581230.617 ops/s
# Warmup Iteration   5: 1912298.213 ops/s
# Warmup Iteration   6: 1911985.138 ops/s
# Warmup Iteration   7: 1908829.527 ops/s
# Warmup Iteration   8: 1910138.527 ops/s
# Warmup Iteration   9: 1912407.852 ops/s
# Warmup Iteration  10: 1914530.534 ops/s
# Warmup Iteration  11: 1912623.072 ops/s
# Warmup Iteration  12: 1915509.921 ops/s
# Warmup Iteration  13: 1912600.301 ops/s
# Warmup Iteration  14: 1913671.588 ops/s
# Warmup Iteration  15: 1910865.590 ops/s
# Warmup Iteration  16: 1914500.482 ops/s
# Warmup Iteration  17: 1929210.436 ops/s
# Warmup Iteration  18: 1930583.476 ops/s
# Warmup Iteration  19: 1924384.540 ops/s
# Warmup Iteration  20: 1930063.726 ops/s
# Warmup Iteration  21: 1933300.412 ops/s
# Warmup Iteration  22: 1931668.182 ops/s
# Warmup Iteration  23: 1933242.702 ops/s
# Warmup Iteration  24: 1932006.969 ops/s
# Warmup Iteration  25: 1923795.787 ops/s
# Warmup Iteration  26: 1933764.420 ops/s
# Warmup Iteration  27: 1932337.647 ops/s
# Warmup Iteration  28: 1936097.803 ops/s
# Warmup Iteration  29: 1931861.550 ops/s
# Warmup Iteration  30: 1929356.634 ops/s
Iteration   1: 1930706.346 ops/s
Iteration   2: 1931008.844 ops/s
Iteration   3: 1930605.167 ops/s
Iteration   4: 1934556.432 ops/s
Iteration   5: 1930480.092 ops/s
Iteration   6: 1935071.680 ops/s
Iteration   7: 1934749.256 ops/s
Iteration   8: 1929132.521 ops/s
Iteration   9: 1932214.962 ops/s
Iteration  10: 1927722.298 ops/s
Iteration  11: 1933138.932 ops/s
Iteration  12: 1931754.031 ops/s
Iteration  13: 1927082.599 ops/s
Iteration  14: 1933823.330 ops/s
Iteration  15: 1935861.115 ops/s
Iteration  16: 1938902.254 ops/s
Iteration  17: 1934163.623 ops/s
Iteration  18: 1936379.731 ops/s
Iteration  19: 1933008.396 ops/s
Iteration  20: 1929423.815 ops/s
Iteration  21: 1926208.042 ops/s
Iteration  22: 1932655.886 ops/s
Iteration  23: 1934768.912 ops/s
Iteration  24: 1933449.708 ops/s
Iteration  25: 1940272.535 ops/s
Iteration  26: 1933626.326 ops/s
Iteration  27: 1920586.821 ops/s
Iteration  28: 1932430.740 ops/s
Iteration  29: 1926354.216 ops/s
Iteration  30: 1932413.591 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectLongWithTarget":
  1932085.073 ±(99.9%) 2652.325 ops/s [Average]
  (min, avg, max) = (1920586.821, 1932085.073, 1940272.535), stdev = 3969.876
  CI (99.9%): [1929432.748, 1934737.398] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_collectLongWithTarget  thrpt   30  1932085.073 ± 2652.325  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 508002.541 ops/s
# Warmup Iteration   2: 1263834.340 ops/s
# Warmup Iteration   3: 1304821.310 ops/s
# Warmup Iteration   4: 1094544.450 ops/s
# Warmup Iteration   5: 1309715.048 ops/s
# Warmup Iteration   6: 1314222.747 ops/s
# Warmup Iteration   7: 1310655.036 ops/s
# Warmup Iteration   8: 1316169.645 ops/s
# Warmup Iteration   9: 1315267.168 ops/s
# Warmup Iteration  10: 1312163.779 ops/s
# Warmup Iteration  11: 1297040.385 ops/s
# Warmup Iteration  12: 1313040.939 ops/s
# Warmup Iteration  13: 1301031.007 ops/s
# Warmup Iteration  14: 1307107.125 ops/s
# Warmup Iteration  15: 1312184.968 ops/s
# Warmup Iteration  16: 1312122.494 ops/s
# Warmup Iteration  17: 1302409.957 ops/s
# Warmup Iteration  18: 1306049.151 ops/s
# Warmup Iteration  19: 1307050.932 ops/s
# Warmup Iteration  20: 1309989.326 ops/s
# Warmup Iteration  21: 1308569.442 ops/s
# Warmup Iteration  22: 1306739.769 ops/s
# Warmup Iteration  23: 1308668.271 ops/s
# Warmup Iteration  24: 1307521.147 ops/s
# Warmup Iteration  25: 1303208.921 ops/s
# Warmup Iteration  26: 1306501.264 ops/s
# Warmup Iteration  27: 1307868.703 ops/s
# Warmup Iteration  28: 1305326.997 ops/s
# Warmup Iteration  29: 1308855.228 ops/s
# Warmup Iteration  30: 1307731.333 ops/s
Iteration   1: 1307631.812 ops/s
Iteration   2: 1308875.760 ops/s
Iteration   3: 1295098.633 ops/s
Iteration   4: 1310896.261 ops/s
Iteration   5: 1311969.485 ops/s
Iteration   6: 1300654.164 ops/s
Iteration   7: 1314074.965 ops/s
Iteration   8: 1313986.895 ops/s
Iteration   9: 1306816.502 ops/s
Iteration  10: 1302889.707 ops/s
Iteration  11: 1305421.364 ops/s
Iteration  12: 1308001.397 ops/s
Iteration  13: 1311495.035 ops/s
Iteration  14: 1314099.067 ops/s
Iteration  15: 1311866.108 ops/s
Iteration  16: 1309414.792 ops/s
Iteration  17: 1310130.013 ops/s
Iteration  18: 1305432.967 ops/s
Iteration  19: 1300051.628 ops/s
Iteration  20: 1296869.645 ops/s
Iteration  21: 1306780.264 ops/s
Iteration  22: 1294303.834 ops/s
Iteration  23: 1307928.238 ops/s
Iteration  24: 1307213.761 ops/s
Iteration  25: 1312086.193 ops/s
Iteration  26: 1313227.515 ops/s
Iteration  27: 1309447.051 ops/s
Iteration  28: 1311785.372 ops/s
Iteration  29: 1308311.511 ops/s
Iteration  30: 1310677.908 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectShort":
  1307581.262 ±(99.9%) 3657.446 ops/s [Average]
  (min, avg, max) = (1294303.834, 1307581.262, 1314099.067), stdev = 5474.293
  CI (99.9%): [1303923.816, 1311238.708] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_collectShort  thrpt   30  1307581.262 ± 3657.446  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectShortWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectShortWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1107665.503 ops/s
# Warmup Iteration   2: 2519918.335 ops/s
# Warmup Iteration   3: 2615932.540 ops/s
# Warmup Iteration   4: 2265738.620 ops/s
# Warmup Iteration   5: 2526807.673 ops/s
# Warmup Iteration   6: 2616173.320 ops/s
# Warmup Iteration   7: 2621399.922 ops/s
# Warmup Iteration   8: 2619702.725 ops/s
# Warmup Iteration   9: 2622327.700 ops/s
# Warmup Iteration  10: 2627329.867 ops/s
# Warmup Iteration  11: 2615494.545 ops/s
# Warmup Iteration  12: 2617713.772 ops/s
# Warmup Iteration  13: 2610818.204 ops/s
# Warmup Iteration  14: 2615461.914 ops/s
# Warmup Iteration  15: 2612576.466 ops/s
# Warmup Iteration  16: 2619967.620 ops/s
# Warmup Iteration  17: 2611955.510 ops/s
# Warmup Iteration  18: 2610806.614 ops/s
# Warmup Iteration  19: 2612362.186 ops/s
# Warmup Iteration  20: 2611406.912 ops/s
# Warmup Iteration  21: 2613701.640 ops/s
# Warmup Iteration  22: 2616532.982 ops/s
# Warmup Iteration  23: 2615142.598 ops/s
# Warmup Iteration  24: 2615109.031 ops/s
# Warmup Iteration  25: 2616335.257 ops/s
# Warmup Iteration  26: 2615532.567 ops/s
# Warmup Iteration  27: 2615133.463 ops/s
# Warmup Iteration  28: 2615572.884 ops/s
# Warmup Iteration  29: 2617690.999 ops/s
# Warmup Iteration  30: 2613979.439 ops/s
Iteration   1: 2613412.417 ops/s
Iteration   2: 2605055.427 ops/s
Iteration   3: 2614716.078 ops/s
Iteration   4: 2614347.588 ops/s
Iteration   5: 2611093.068 ops/s
Iteration   6: 2621340.476 ops/s
Iteration   7: 2610493.019 ops/s
Iteration   8: 2604609.478 ops/s
Iteration   9: 2575391.507 ops/s
Iteration  10: 2612237.247 ops/s
Iteration  11: 2616418.992 ops/s
Iteration  12: 2623567.109 ops/s
Iteration  13: 2615993.703 ops/s
Iteration  14: 2614423.663 ops/s
Iteration  15: 2617331.934 ops/s
Iteration  16: 2606583.664 ops/s
Iteration  17: 2611556.594 ops/s
Iteration  18: 2605578.201 ops/s
Iteration  19: 2612620.708 ops/s
Iteration  20: 2611558.398 ops/s
Iteration  21: 2611794.997 ops/s
Iteration  22: 2622020.503 ops/s
Iteration  23: 2624112.953 ops/s
Iteration  24: 2611348.067 ops/s
Iteration  25: 2599518.703 ops/s
Iteration  26: 2614294.635 ops/s
Iteration  27: 2606525.651 ops/s
Iteration  28: 2602214.676 ops/s
Iteration  29: 2625324.416 ops/s
Iteration  30: 2610153.158 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectShortWithBagTarget":
  2611521.234 ±(99.9%) 6242.456 ops/s [Average]
  (min, avg, max) = (2575391.507, 2611521.234, 2625324.416), stdev = 9343.415
  CI (99.9%): [2605278.778, 2617763.690] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_collectShortWithBagTarget  thrpt   30  2611521.234 ± 6242.456  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectShortWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectShortWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 810223.428 ops/s
# Warmup Iteration   2: 1988461.020 ops/s
# Warmup Iteration   3: 2060726.775 ops/s
# Warmup Iteration   4: 1709873.486 ops/s
# Warmup Iteration   5: 2061719.897 ops/s
# Warmup Iteration   6: 2061481.706 ops/s
# Warmup Iteration   7: 2065084.498 ops/s
# Warmup Iteration   8: 2057394.129 ops/s
# Warmup Iteration   9: 2059245.212 ops/s
# Warmup Iteration  10: 2065386.725 ops/s
# Warmup Iteration  11: 2062640.189 ops/s
# Warmup Iteration  12: 2065108.134 ops/s
# Warmup Iteration  13: 2064913.818 ops/s
# Warmup Iteration  14: 2061700.484 ops/s
# Warmup Iteration  15: 2062746.286 ops/s
# Warmup Iteration  16: 2062165.841 ops/s
# Warmup Iteration  17: 2074247.454 ops/s
# Warmup Iteration  18: 2067514.780 ops/s
# Warmup Iteration  19: 2074431.111 ops/s
# Warmup Iteration  20: 2074877.410 ops/s
# Warmup Iteration  21: 2079201.435 ops/s
# Warmup Iteration  22: 2068479.203 ops/s
# Warmup Iteration  23: 2074754.058 ops/s
# Warmup Iteration  24: 2065170.419 ops/s
# Warmup Iteration  25: 2073333.243 ops/s
# Warmup Iteration  26: 2069139.204 ops/s
# Warmup Iteration  27: 2075014.443 ops/s
# Warmup Iteration  28: 2070151.375 ops/s
# Warmup Iteration  29: 2069605.565 ops/s
# Warmup Iteration  30: 2071804.651 ops/s
Iteration   1: 2077419.186 ops/s
Iteration   2: 2075444.502 ops/s
Iteration   3: 2068098.882 ops/s
Iteration   4: 2073641.025 ops/s
Iteration   5: 2074857.160 ops/s
Iteration   6: 2073481.670 ops/s
Iteration   7: 2069889.217 ops/s
Iteration   8: 2074121.109 ops/s
Iteration   9: 2074438.998 ops/s
Iteration  10: 2080114.984 ops/s
Iteration  11: 2072483.921 ops/s
Iteration  12: 2069823.036 ops/s
Iteration  13: 2075963.949 ops/s
Iteration  14: 2070132.522 ops/s
Iteration  15: 2077316.517 ops/s
Iteration  16: 2074537.664 ops/s
Iteration  17: 2076649.080 ops/s
Iteration  18: 2078231.605 ops/s
Iteration  19: 2073216.537 ops/s
Iteration  20: 2072311.947 ops/s
Iteration  21: 2058150.386 ops/s
Iteration  22: 2073615.615 ops/s
Iteration  23: 2078338.798 ops/s
Iteration  24: 2075300.009 ops/s
Iteration  25: 2076632.549 ops/s
Iteration  26: 2063924.499 ops/s
Iteration  27: 2074543.197 ops/s
Iteration  28: 2078675.025 ops/s
Iteration  29: 2070081.253 ops/s
Iteration  30: 2081101.148 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectShortWithTarget":
  2073751.200 ±(99.9%) 3160.295 ops/s [Average]
  (min, avg, max) = (2058150.386, 2073751.200, 2081101.148), stdev = 4730.180
  CI (99.9%): [2070590.905, 2076911.494] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_collectShortWithTarget  thrpt   30  2073751.200 ± 3160.295  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 105412.978 ops/s
# Warmup Iteration   2: 182254.416 ops/s
# Warmup Iteration   3: 222764.792 ops/s
# Warmup Iteration   4: 224440.486 ops/s
# Warmup Iteration   5: 224791.964 ops/s
# Warmup Iteration   6: 208261.310 ops/s
# Warmup Iteration   7: 200444.490 ops/s
# Warmup Iteration   8: 224693.385 ops/s
# Warmup Iteration   9: 225082.953 ops/s
# Warmup Iteration  10: 225085.158 ops/s
# Warmup Iteration  11: 225218.783 ops/s
# Warmup Iteration  12: 224639.898 ops/s
# Warmup Iteration  13: 225071.719 ops/s
# Warmup Iteration  14: 225096.483 ops/s
# Warmup Iteration  15: 224946.155 ops/s
# Warmup Iteration  16: 224935.857 ops/s
# Warmup Iteration  17: 224777.841 ops/s
# Warmup Iteration  18: 224984.760 ops/s
# Warmup Iteration  19: 224931.204 ops/s
# Warmup Iteration  20: 224594.755 ops/s
# Warmup Iteration  21: 224386.929 ops/s
# Warmup Iteration  22: 224428.406 ops/s
# Warmup Iteration  23: 225159.869 ops/s
# Warmup Iteration  24: 224692.677 ops/s
# Warmup Iteration  25: 224724.545 ops/s
# Warmup Iteration  26: 224896.455 ops/s
# Warmup Iteration  27: 224970.442 ops/s
# Warmup Iteration  28: 224715.984 ops/s
# Warmup Iteration  29: 224728.172 ops/s
# Warmup Iteration  30: 224941.920 ops/s
Iteration   1: 225370.411 ops/s
Iteration   2: 224758.761 ops/s
Iteration   3: 225109.213 ops/s
Iteration   4: 224747.522 ops/s
Iteration   5: 224346.945 ops/s
Iteration   6: 224665.821 ops/s
Iteration   7: 225129.332 ops/s
Iteration   8: 224293.054 ops/s
Iteration   9: 225152.397 ops/s
Iteration  10: 224027.765 ops/s
Iteration  11: 225282.046 ops/s
Iteration  12: 223908.485 ops/s
Iteration  13: 224591.026 ops/s
Iteration  14: 224889.207 ops/s
Iteration  15: 225102.332 ops/s
Iteration  16: 224608.702 ops/s
Iteration  17: 225014.521 ops/s
Iteration  18: 224779.106 ops/s
Iteration  19: 224532.393 ops/s
Iteration  20: 224389.181 ops/s
Iteration  21: 224847.927 ops/s
Iteration  22: 224566.380 ops/s
Iteration  23: 224858.413 ops/s
Iteration  24: 224304.965 ops/s
Iteration  25: 225093.912 ops/s
Iteration  26: 224209.455 ops/s
Iteration  27: 224827.929 ops/s
Iteration  28: 224235.505 ops/s
Iteration  29: 224754.391 ops/s
Iteration  30: 224353.053 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectTarget":
  224691.672 ±(99.9%) 252.375 ops/s [Average]
  (min, avg, max) = (223908.485, 224691.672, 225370.411), stdev = 377.744
  CI (99.9%): [224439.296, 224944.047] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score     Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_collectTarget  thrpt   30  224691.672 ± 252.375  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 572349.196 ops/s
# Warmup Iteration   2: 1066703.620 ops/s
# Warmup Iteration   3: 1245979.398 ops/s
# Warmup Iteration   4: 1253782.834 ops/s
# Warmup Iteration   5: 1254461.035 ops/s
# Warmup Iteration   6: 1021595.444 ops/s
# Warmup Iteration   7: 1255525.393 ops/s
# Warmup Iteration   8: 1254215.225 ops/s
# Warmup Iteration   9: 1255871.164 ops/s
# Warmup Iteration  10: 1255474.744 ops/s
# Warmup Iteration  11: 1255360.702 ops/s
# Warmup Iteration  12: 1253326.318 ops/s
# Warmup Iteration  13: 1253167.456 ops/s
# Warmup Iteration  14: 1253488.772 ops/s
# Warmup Iteration  15: 1255247.389 ops/s
# Warmup Iteration  16: 1250953.614 ops/s
# Warmup Iteration  17: 1249558.188 ops/s
# Warmup Iteration  18: 1247379.941 ops/s
# Warmup Iteration  19: 1250751.687 ops/s
# Warmup Iteration  20: 1248798.436 ops/s
# Warmup Iteration  21: 1246397.697 ops/s
# Warmup Iteration  22: 1246165.490 ops/s
# Warmup Iteration  23: 1248590.668 ops/s
# Warmup Iteration  24: 1249126.122 ops/s
# Warmup Iteration  25: 1245793.844 ops/s
# Warmup Iteration  26: 1247155.307 ops/s
# Warmup Iteration  27: 1249976.970 ops/s
# Warmup Iteration  28: 1247327.950 ops/s
# Warmup Iteration  29: 1246605.357 ops/s
# Warmup Iteration  30: 1244328.909 ops/s
Iteration   1: 1250756.212 ops/s
Iteration   2: 1249721.640 ops/s
Iteration   3: 1241426.048 ops/s
Iteration   4: 1251375.368 ops/s
Iteration   5: 1247368.129 ops/s
Iteration   6: 1249875.819 ops/s
Iteration   7: 1249907.450 ops/s
Iteration   8: 1243497.447 ops/s
Iteration   9: 1252388.114 ops/s
Iteration  10: 1247304.234 ops/s
Iteration  11: 1249450.004 ops/s
Iteration  12: 1248453.022 ops/s
Iteration  13: 1238139.565 ops/s
Iteration  14: 1252531.986 ops/s
Iteration  15: 1245601.990 ops/s
Iteration  16: 1251014.204 ops/s
Iteration  17: 1242075.421 ops/s
Iteration  18: 1252170.661 ops/s
Iteration  19: 1250136.758 ops/s
Iteration  20: 1248007.251 ops/s
Iteration  21: 1249236.493 ops/s
Iteration  22: 1249760.041 ops/s
Iteration  23: 1249484.770 ops/s
Iteration  24: 1249254.178 ops/s
Iteration  25: 1247871.708 ops/s
Iteration  26: 1251599.800 ops/s
Iteration  27: 1248486.356 ops/s
Iteration  28: 1248211.101 ops/s
Iteration  29: 1248779.346 ops/s
Iteration  30: 1247928.117 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectWith":
  1248393.774 ±(99.9%) 2227.423 ops/s [Average]
  (min, avg, max) = (1238139.565, 1248393.774, 1252531.986), stdev = 3333.903
  CI (99.9%): [1246166.351, 1250621.198] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_collectWith  thrpt   30  1248393.774 ± 2227.423  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 14008393.147 ops/s
# Warmup Iteration   2: 25011399.874 ops/s
# Warmup Iteration   3: 29068034.101 ops/s
# Warmup Iteration   4: 29210569.610 ops/s
# Warmup Iteration   5: 29026433.119 ops/s
# Warmup Iteration   6: 29032272.986 ops/s
# Warmup Iteration   7: 28953093.729 ops/s
# Warmup Iteration   8: 28929118.260 ops/s
# Warmup Iteration   9: 29084964.435 ops/s
# Warmup Iteration  10: 29154082.253 ops/s
# Warmup Iteration  11: 29148165.497 ops/s
# Warmup Iteration  12: 29105768.758 ops/s
# Warmup Iteration  13: 29194864.888 ops/s
# Warmup Iteration  14: 28898238.327 ops/s
# Warmup Iteration  15: 28905724.010 ops/s
# Warmup Iteration  16: 29095495.864 ops/s
# Warmup Iteration  17: 29030892.032 ops/s
# Warmup Iteration  18: 29048870.203 ops/s
# Warmup Iteration  19: 29008552.124 ops/s
# Warmup Iteration  20: 28880018.639 ops/s
# Warmup Iteration  21: 29058191.273 ops/s
# Warmup Iteration  22: 28865067.624 ops/s
# Warmup Iteration  23: 28908090.083 ops/s
# Warmup Iteration  24: 28873012.786 ops/s
# Warmup Iteration  25: 29023366.316 ops/s
# Warmup Iteration  26: 28995981.727 ops/s
# Warmup Iteration  27: 29009195.368 ops/s
# Warmup Iteration  28: 29131790.228 ops/s
# Warmup Iteration  29: 29036271.828 ops/s
# Warmup Iteration  30: 29158453.954 ops/s
Iteration   1: 28982573.049 ops/s
Iteration   2: 28989073.067 ops/s
Iteration   3: 28956473.867 ops/s
Iteration   4: 29091668.877 ops/s
Iteration   5: 28942347.873 ops/s
Iteration   6: 28957182.761 ops/s
Iteration   7: 28805822.678 ops/s
Iteration   8: 29075184.533 ops/s
Iteration   9: 29026554.596 ops/s
Iteration  10: 29142327.670 ops/s
Iteration  11: 29237205.413 ops/s
Iteration  12: 28728008.161 ops/s
Iteration  13: 28751962.123 ops/s
Iteration  14: 28875324.619 ops/s
Iteration  15: 28862048.283 ops/s
Iteration  16: 29080354.634 ops/s
Iteration  17: 28944402.052 ops/s
Iteration  18: 29179784.591 ops/s
Iteration  19: 29335843.712 ops/s
Iteration  20: 29261428.621 ops/s
Iteration  21: 28918089.253 ops/s
Iteration  22: 29185793.710 ops/s
Iteration  23: 29315684.908 ops/s
Iteration  24: 29290889.410 ops/s
Iteration  25: 29198111.411 ops/s
Iteration  26: 29190418.456 ops/s
Iteration  27: 28961455.308 ops/s
Iteration  28: 29307382.771 ops/s
Iteration  29: 28853121.999 ops/s
Iteration  30: 29239683.470 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectWithOccurrences":
  29056206.729 ±(99.9%) 118401.115 ops/s [Average]
  (min, avg, max) = (28728008.161, 29056206.729, 29335843.712), stdev = 177217.229
  CI (99.9%): [28937805.614, 29174607.844] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score        Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_collectWithOccurrences  thrpt   30  29056206.729 ± 118401.115  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 16607531.594 ops/s
# Warmup Iteration   2: 21476612.167 ops/s
# Warmup Iteration   3: 25816621.852 ops/s
# Warmup Iteration   4: 25669694.007 ops/s
# Warmup Iteration   5: 25852611.253 ops/s
# Warmup Iteration   6: 25796651.914 ops/s
# Warmup Iteration   7: 25832775.393 ops/s
# Warmup Iteration   8: 23477899.404 ops/s
# Warmup Iteration   9: 24225514.359 ops/s
# Warmup Iteration  10: 25853601.284 ops/s
# Warmup Iteration  11: 25807533.373 ops/s
# Warmup Iteration  12: 25885413.361 ops/s
# Warmup Iteration  13: 25841542.784 ops/s
# Warmup Iteration  14: 25862966.624 ops/s
# Warmup Iteration  15: 25873965.797 ops/s
# Warmup Iteration  16: 25841896.747 ops/s
# Warmup Iteration  17: 25804699.690 ops/s
# Warmup Iteration  18: 25853187.367 ops/s
# Warmup Iteration  19: 25879016.988 ops/s
# Warmup Iteration  20: 25832992.546 ops/s
# Warmup Iteration  21: 25852457.763 ops/s
# Warmup Iteration  22: 25791530.564 ops/s
# Warmup Iteration  23: 25876905.283 ops/s
# Warmup Iteration  24: 25835497.440 ops/s
# Warmup Iteration  25: 25827487.567 ops/s
# Warmup Iteration  26: 25798022.433 ops/s
# Warmup Iteration  27: 25769066.767 ops/s
# Warmup Iteration  28: 25838981.692 ops/s
# Warmup Iteration  29: 25823476.986 ops/s
# Warmup Iteration  30: 25871833.247 ops/s
Iteration   1: 25838060.739 ops/s
Iteration   2: 25885753.390 ops/s
Iteration   3: 25899707.636 ops/s
Iteration   4: 25788387.328 ops/s
Iteration   5: 25857755.456 ops/s
Iteration   6: 25827841.041 ops/s
Iteration   7: 25842301.508 ops/s
Iteration   8: 25905385.286 ops/s
Iteration   9: 25940153.334 ops/s
Iteration  10: 25876504.775 ops/s
Iteration  11: 25879781.462 ops/s
Iteration  12: 25859135.424 ops/s
Iteration  13: 25859630.678 ops/s
Iteration  14: 25874589.445 ops/s
Iteration  15: 25755980.828 ops/s
Iteration  16: 25836842.314 ops/s
Iteration  17: 25806001.202 ops/s
Iteration  18: 25834202.179 ops/s
Iteration  19: 25860269.820 ops/s
Iteration  20: 25798583.178 ops/s
Iteration  21: 25845826.575 ops/s
Iteration  22: 25837966.949 ops/s
Iteration  23: 25784221.623 ops/s
Iteration  24: 25799904.702 ops/s
Iteration  25: 25743308.644 ops/s
Iteration  26: 25738956.375 ops/s
Iteration  27: 25892540.320 ops/s
Iteration  28: 25865187.819 ops/s
Iteration  29: 25829044.787 ops/s
Iteration  30: 25820149.085 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collectWith_target":
  25839465.797 ±(99.9%) 32009.075 ops/s [Average]
  (min, avg, max) = (25738956.375, 25839465.797, 25940153.334), stdev = 47909.681
  CI (99.9%): [25807456.721, 25871474.872] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score       Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_collectWith_target  thrpt   30  25839465.797 ± 32009.075  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collect_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collect_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 16697314.048 ops/s
# Warmup Iteration   2: 21525208.732 ops/s
# Warmup Iteration   3: 25275199.839 ops/s
# Warmup Iteration   4: 25183423.253 ops/s
# Warmup Iteration   5: 25294570.654 ops/s
# Warmup Iteration   6: 25298183.224 ops/s
# Warmup Iteration   7: 25267166.957 ops/s
# Warmup Iteration   8: 23925754.675 ops/s
# Warmup Iteration   9: 22771201.062 ops/s
# Warmup Iteration  10: 25306937.328 ops/s
# Warmup Iteration  11: 25299951.908 ops/s
# Warmup Iteration  12: 25289725.615 ops/s
# Warmup Iteration  13: 25273366.348 ops/s
# Warmup Iteration  14: 25262986.316 ops/s
# Warmup Iteration  15: 25313380.121 ops/s
# Warmup Iteration  16: 25301912.881 ops/s
# Warmup Iteration  17: 25258665.814 ops/s
# Warmup Iteration  18: 25329277.333 ops/s
# Warmup Iteration  19: 25254348.003 ops/s
# Warmup Iteration  20: 25256444.423 ops/s
# Warmup Iteration  21: 25310256.801 ops/s
# Warmup Iteration  22: 25288537.372 ops/s
# Warmup Iteration  23: 25294458.011 ops/s
# Warmup Iteration  24: 25274388.983 ops/s
# Warmup Iteration  25: 25319428.573 ops/s
# Warmup Iteration  26: 25283552.582 ops/s
# Warmup Iteration  27: 25270467.096 ops/s
# Warmup Iteration  28: 25309445.341 ops/s
# Warmup Iteration  29: 25254002.471 ops/s
# Warmup Iteration  30: 25236926.421 ops/s
Iteration   1: 25298487.969 ops/s
Iteration   2: 25229677.474 ops/s
Iteration   3: 25219470.676 ops/s
Iteration   4: 25288646.165 ops/s
Iteration   5: 25229952.155 ops/s
Iteration   6: 25299929.910 ops/s
Iteration   7: 25220572.589 ops/s
Iteration   8: 25239445.250 ops/s
Iteration   9: 25298885.096 ops/s
Iteration  10: 25309039.311 ops/s
Iteration  11: 25221970.436 ops/s
Iteration  12: 25266676.891 ops/s
Iteration  13: 25314120.622 ops/s
Iteration  14: 25158914.576 ops/s
Iteration  15: 25312950.601 ops/s
Iteration  16: 25227225.552 ops/s
Iteration  17: 25339236.351 ops/s
Iteration  18: 25313390.467 ops/s
Iteration  19: 25242655.526 ops/s
Iteration  20: 25332024.602 ops/s
Iteration  21: 25153549.559 ops/s
Iteration  22: 25295009.689 ops/s
Iteration  23: 25331503.485 ops/s
Iteration  24: 25358914.300 ops/s
Iteration  25: 25133695.682 ops/s
Iteration  26: 25285613.796 ops/s
Iteration  27: 25343888.239 ops/s
Iteration  28: 25288111.976 ops/s
Iteration  29: 25332843.295 ops/s
Iteration  30: 25274792.548 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_collect_target":
  25272039.826 ±(99.9%) 39125.953 ops/s [Average]
  (min, avg, max) = (25133695.682, 25272039.826, 25358914.300), stdev = 58561.890
  CI (99.9%): [25232913.873, 25311165.780] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_collect_target  thrpt   30  25272039.826 ± 39125.953  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2229075.827 ops/s
# Warmup Iteration   2: 4223280.310 ops/s
# Warmup Iteration   3: 4669806.458 ops/s
# Warmup Iteration   4: 4704180.582 ops/s
# Warmup Iteration   5: 4101309.249 ops/s
# Warmup Iteration   6: 4410107.990 ops/s
# Warmup Iteration   7: 4691270.298 ops/s
# Warmup Iteration   8: 4682017.919 ops/s
# Warmup Iteration   9: 4678986.012 ops/s
# Warmup Iteration  10: 4681927.690 ops/s
# Warmup Iteration  11: 4681400.632 ops/s
# Warmup Iteration  12: 4680530.350 ops/s
# Warmup Iteration  13: 4683204.138 ops/s
# Warmup Iteration  14: 4672656.932 ops/s
# Warmup Iteration  15: 4685493.675 ops/s
# Warmup Iteration  16: 4671722.324 ops/s
# Warmup Iteration  17: 4690971.281 ops/s
# Warmup Iteration  18: 4675784.387 ops/s
# Warmup Iteration  19: 4682850.325 ops/s
# Warmup Iteration  20: 4684788.637 ops/s
# Warmup Iteration  21: 4692462.763 ops/s
# Warmup Iteration  22: 4690291.345 ops/s
# Warmup Iteration  23: 4691078.230 ops/s
# Warmup Iteration  24: 4684469.026 ops/s
# Warmup Iteration  25: 4687242.250 ops/s
# Warmup Iteration  26: 4692900.721 ops/s
# Warmup Iteration  27: 4689891.411 ops/s
# Warmup Iteration  28: 4669321.072 ops/s
# Warmup Iteration  29: 4686145.868 ops/s
# Warmup Iteration  30: 4698708.718 ops/s
Iteration   1: 4674814.523 ops/s
Iteration   2: 4680443.655 ops/s
Iteration   3: 4685164.307 ops/s
Iteration   4: 4700737.356 ops/s
Iteration   5: 4676850.951 ops/s
Iteration   6: 4692423.676 ops/s
Iteration   7: 4695191.234 ops/s
Iteration   8: 4681596.792 ops/s
Iteration   9: 4693095.518 ops/s
Iteration  10: 4701458.124 ops/s
Iteration  11: 4682959.310 ops/s
Iteration  12: 4698152.691 ops/s
Iteration  13: 4689349.601 ops/s
Iteration  14: 4692344.342 ops/s
Iteration  15: 4690035.456 ops/s
Iteration  16: 4675019.512 ops/s
Iteration  17: 4677915.679 ops/s
Iteration  18: 4663736.596 ops/s
Iteration  19: 4685007.381 ops/s
Iteration  20: 4694213.598 ops/s
Iteration  21: 4662593.507 ops/s
Iteration  22: 4689418.109 ops/s
Iteration  23: 4694564.754 ops/s
Iteration  24: 4694174.473 ops/s
Iteration  25: 4687152.071 ops/s
Iteration  26: 4696114.945 ops/s
Iteration  27: 4681581.980 ops/s
Iteration  28: 4684802.886 ops/s
Iteration  29: 4700067.349 ops/s
Iteration  30: 4679511.306 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_contains":
  4686683.056 ±(99.9%) 6700.738 ops/s [Average]
  (min, avg, max) = (4662593.507, 4686683.056, 4701458.124), stdev = 10029.350
  CI (99.9%): [4679982.318, 4693383.794] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_contains  thrpt   30  4686683.056 ± 6700.738  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2005713.590 ops/s
# Warmup Iteration   2: 3561074.878 ops/s
# Warmup Iteration   3: 4105894.849 ops/s
# Warmup Iteration   4: 4120324.949 ops/s
# Warmup Iteration   5: 4146930.063 ops/s
# Warmup Iteration   6: 3393372.634 ops/s
# Warmup Iteration   7: 4148987.407 ops/s
# Warmup Iteration   8: 4153943.352 ops/s
# Warmup Iteration   9: 4147191.091 ops/s
# Warmup Iteration  10: 4151666.064 ops/s
# Warmup Iteration  11: 4151485.258 ops/s
# Warmup Iteration  12: 4148655.639 ops/s
# Warmup Iteration  13: 4150385.033 ops/s
# Warmup Iteration  14: 4141340.184 ops/s
# Warmup Iteration  15: 4149346.482 ops/s
# Warmup Iteration  16: 4150530.341 ops/s
# Warmup Iteration  17: 4139766.634 ops/s
# Warmup Iteration  18: 4140127.280 ops/s
# Warmup Iteration  19: 4146562.035 ops/s
# Warmup Iteration  20: 4146246.403 ops/s
# Warmup Iteration  21: 4150854.034 ops/s
# Warmup Iteration  22: 4142963.207 ops/s
# Warmup Iteration  23: 4154494.693 ops/s
# Warmup Iteration  24: 4141399.180 ops/s
# Warmup Iteration  25: 4144191.105 ops/s
# Warmup Iteration  26: 4148014.695 ops/s
# Warmup Iteration  27: 4149427.670 ops/s
# Warmup Iteration  28: 4150042.314 ops/s
# Warmup Iteration  29: 4109819.664 ops/s
# Warmup Iteration  30: 4135859.080 ops/s
Iteration   1: 4150786.315 ops/s
Iteration   2: 4150968.748 ops/s
Iteration   3: 4142129.435 ops/s
Iteration   4: 4143263.979 ops/s
Iteration   5: 4172219.901 ops/s
Iteration   6: 4138010.347 ops/s
Iteration   7: 4142006.055 ops/s
Iteration   8: 4143468.591 ops/s
Iteration   9: 4156907.989 ops/s
Iteration  10: 4145869.646 ops/s
Iteration  11: 4152646.877 ops/s
Iteration  12: 4149203.194 ops/s
Iteration  13: 4128455.207 ops/s
Iteration  14: 4135311.563 ops/s
Iteration  15: 4148281.653 ops/s
Iteration  16: 4154348.646 ops/s
Iteration  17: 4146882.976 ops/s
Iteration  18: 4147060.063 ops/s
Iteration  19: 4155347.238 ops/s
Iteration  20: 4147218.371 ops/s
Iteration  21: 4161421.987 ops/s
Iteration  22: 4149128.459 ops/s
Iteration  23: 4156621.639 ops/s
Iteration  24: 4150342.025 ops/s
Iteration  25: 4155131.859 ops/s
Iteration  26: 4140241.241 ops/s
Iteration  27: 4149048.532 ops/s
Iteration  28: 4139578.919 ops/s
Iteration  29: 4134050.164 ops/s
Iteration  30: 4156770.959 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_containsAllArray":
  4148090.753 ±(99.9%) 5922.695 ops/s [Average]
  (min, avg, max) = (4128455.207, 4148090.753, 4172219.901), stdev = 8864.811
  CI (99.9%): [4142168.058, 4154013.447] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_containsAllArray  thrpt   30  4148090.753 ± 5922.695  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_containsAllCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_containsAllCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1898650.933 ops/s
# Warmup Iteration   2: 3810597.174 ops/s
# Warmup Iteration   3: 4108411.722 ops/s
# Warmup Iteration   4: 4123392.916 ops/s
# Warmup Iteration   5: 3408412.750 ops/s
# Warmup Iteration   6: 4138141.252 ops/s
# Warmup Iteration   7: 4135366.709 ops/s
# Warmup Iteration   8: 4135192.233 ops/s
# Warmup Iteration   9: 4144374.590 ops/s
# Warmup Iteration  10: 4133743.733 ops/s
# Warmup Iteration  11: 4140319.917 ops/s
# Warmup Iteration  12: 4132956.326 ops/s
# Warmup Iteration  13: 4144461.461 ops/s
# Warmup Iteration  14: 4141728.287 ops/s
# Warmup Iteration  15: 4134193.347 ops/s
# Warmup Iteration  16: 4135937.778 ops/s
# Warmup Iteration  17: 4135587.576 ops/s
# Warmup Iteration  18: 4124556.522 ops/s
# Warmup Iteration  19: 4128312.381 ops/s
# Warmup Iteration  20: 4126878.835 ops/s
# Warmup Iteration  21: 4121901.882 ops/s
# Warmup Iteration  22: 4128571.197 ops/s
# Warmup Iteration  23: 4127770.093 ops/s
# Warmup Iteration  24: 4132659.858 ops/s
# Warmup Iteration  25: 4137861.793 ops/s
# Warmup Iteration  26: 4137863.524 ops/s
# Warmup Iteration  27: 4134104.363 ops/s
# Warmup Iteration  28: 4140428.463 ops/s
# Warmup Iteration  29: 4134684.489 ops/s
# Warmup Iteration  30: 4135443.568 ops/s
Iteration   1: 4135928.209 ops/s
Iteration   2: 4129811.629 ops/s
Iteration   3: 4136566.470 ops/s
Iteration   4: 4152119.063 ops/s
Iteration   5: 4134160.662 ops/s
Iteration   6: 4128570.728 ops/s
Iteration   7: 4113822.174 ops/s
Iteration   8: 4143152.153 ops/s
Iteration   9: 4118197.307 ops/s
Iteration  10: 4138288.795 ops/s
Iteration  11: 4120504.113 ops/s
Iteration  12: 4136612.421 ops/s
Iteration  13: 4120586.582 ops/s
Iteration  14: 4141633.457 ops/s
Iteration  15: 4118162.811 ops/s
Iteration  16: 4130307.846 ops/s
Iteration  17: 4142374.023 ops/s
Iteration  18: 4134920.692 ops/s
Iteration  19: 4138305.925 ops/s
Iteration  20: 4134696.986 ops/s
Iteration  21: 4138034.021 ops/s
Iteration  22: 4134326.494 ops/s
Iteration  23: 4132742.186 ops/s
Iteration  24: 4141735.919 ops/s
Iteration  25: 4118945.618 ops/s
Iteration  26: 4127548.104 ops/s
Iteration  27: 4137873.267 ops/s
Iteration  28: 4135054.527 ops/s
Iteration  29: 4133906.267 ops/s
Iteration  30: 4145540.504 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_containsAllCollection":
  4133147.632 ±(99.9%) 6077.757 ops/s [Average]
  (min, avg, max) = (4113822.174, 4133147.632, 4152119.063), stdev = 9096.901
  CI (99.9%): [4127069.875, 4139225.388] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_containsAllCollection  thrpt   30  4133147.632 ± 6077.757  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1852820.007 ops/s
# Warmup Iteration   2: 3783103.333 ops/s
# Warmup Iteration   3: 4124131.955 ops/s
# Warmup Iteration   4: 4149868.449 ops/s
# Warmup Iteration   5: 3408027.774 ops/s
# Warmup Iteration   6: 4159383.927 ops/s
# Warmup Iteration   7: 4155622.310 ops/s
# Warmup Iteration   8: 4166026.731 ops/s
# Warmup Iteration   9: 4161825.416 ops/s
# Warmup Iteration  10: 4151704.117 ops/s
# Warmup Iteration  11: 4157960.599 ops/s
# Warmup Iteration  12: 4151676.704 ops/s
# Warmup Iteration  13: 4162961.440 ops/s
# Warmup Iteration  14: 4161314.067 ops/s
# Warmup Iteration  15: 4155722.588 ops/s
# Warmup Iteration  16: 4158789.509 ops/s
# Warmup Iteration  17: 4151081.419 ops/s
# Warmup Iteration  18: 4161579.127 ops/s
# Warmup Iteration  19: 4152623.288 ops/s
# Warmup Iteration  20: 4159971.582 ops/s
# Warmup Iteration  21: 4157900.479 ops/s
# Warmup Iteration  22: 4157029.930 ops/s
# Warmup Iteration  23: 4164677.954 ops/s
# Warmup Iteration  24: 4157621.660 ops/s
# Warmup Iteration  25: 4159772.022 ops/s
# Warmup Iteration  26: 4165327.434 ops/s
# Warmup Iteration  27: 4153382.064 ops/s
# Warmup Iteration  28: 4155997.102 ops/s
# Warmup Iteration  29: 4160199.347 ops/s
# Warmup Iteration  30: 4152958.721 ops/s
Iteration   1: 4157692.530 ops/s
Iteration   2: 4125434.958 ops/s
Iteration   3: 4162754.132 ops/s
Iteration   4: 4147689.767 ops/s
Iteration   5: 4156044.795 ops/s
Iteration   6: 4151732.951 ops/s
Iteration   7: 4140687.468 ops/s
Iteration   8: 4160030.819 ops/s
Iteration   9: 4156381.924 ops/s
Iteration  10: 4150145.554 ops/s
Iteration  11: 4155652.490 ops/s
Iteration  12: 4144645.210 ops/s
Iteration  13: 4157720.318 ops/s
Iteration  14: 4138088.236 ops/s
Iteration  15: 4166452.840 ops/s
Iteration  16: 4152563.714 ops/s
Iteration  17: 4158692.755 ops/s
Iteration  18: 4161932.890 ops/s
Iteration  19: 4148437.472 ops/s
Iteration  20: 4158895.268 ops/s
Iteration  21: 4160223.255 ops/s
Iteration  22: 4167375.160 ops/s
Iteration  23: 4159509.006 ops/s
Iteration  24: 4152692.151 ops/s
Iteration  25: 4166438.725 ops/s
Iteration  26: 4153265.980 ops/s
Iteration  27: 4162818.285 ops/s
Iteration  28: 4140916.035 ops/s
Iteration  29: 4143184.718 ops/s
Iteration  30: 4163095.198 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_containsAllIterable":
  4154039.820 ±(99.9%) 6443.405 ops/s [Average]
  (min, avg, max) = (4125434.958, 4154039.820, 4167375.160), stdev = 9644.186
  CI (99.9%): [4147596.415, 4160483.225] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_containsAllIterable  thrpt   30  4154039.820 ± 6443.405  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_containsAnyCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_containsAnyCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 52953.357 ops/s
# Warmup Iteration   2: 82545.515 ops/s
# Warmup Iteration   3: 95541.678 ops/s
# Warmup Iteration   4: 95807.780 ops/s
# Warmup Iteration   5: 96161.869 ops/s
# Warmup Iteration   6: 96298.396 ops/s
# Warmup Iteration   7: 81677.902 ops/s
# Warmup Iteration   8: 96201.479 ops/s
# Warmup Iteration   9: 96235.668 ops/s
# Warmup Iteration  10: 95916.551 ops/s
# Warmup Iteration  11: 95902.526 ops/s
# Warmup Iteration  12: 96268.074 ops/s
# Warmup Iteration  13: 96274.307 ops/s
# Warmup Iteration  14: 96150.301 ops/s
# Warmup Iteration  15: 96113.454 ops/s
# Warmup Iteration  16: 95868.830 ops/s
# Warmup Iteration  17: 96129.023 ops/s
# Warmup Iteration  18: 96100.721 ops/s
# Warmup Iteration  19: 96261.561 ops/s
# Warmup Iteration  20: 95916.723 ops/s
# Warmup Iteration  21: 96037.131 ops/s
# Warmup Iteration  22: 96204.422 ops/s
# Warmup Iteration  23: 95660.467 ops/s
# Warmup Iteration  24: 95798.523 ops/s
# Warmup Iteration  25: 95708.847 ops/s
# Warmup Iteration  26: 96048.707 ops/s
# Warmup Iteration  27: 96162.524 ops/s
# Warmup Iteration  28: 96050.915 ops/s
# Warmup Iteration  29: 96079.616 ops/s
# Warmup Iteration  30: 95736.011 ops/s
Iteration   1: 95877.563 ops/s
Iteration   2: 96185.767 ops/s
Iteration   3: 95863.065 ops/s
Iteration   4: 96261.274 ops/s
Iteration   5: 95469.416 ops/s
Iteration   6: 95583.278 ops/s
Iteration   7: 96058.420 ops/s
Iteration   8: 96135.587 ops/s
Iteration   9: 96312.207 ops/s
Iteration  10: 95908.577 ops/s
Iteration  11: 96076.451 ops/s
Iteration  12: 96262.817 ops/s
Iteration  13: 96341.772 ops/s
Iteration  14: 96196.355 ops/s
Iteration  15: 96388.731 ops/s
Iteration  16: 96141.932 ops/s
Iteration  17: 96227.889 ops/s
Iteration  18: 96231.108 ops/s
Iteration  19: 96166.231 ops/s
Iteration  20: 96091.828 ops/s
Iteration  21: 95944.886 ops/s
Iteration  22: 96182.979 ops/s
Iteration  23: 96059.198 ops/s
Iteration  24: 96147.452 ops/s
Iteration  25: 96111.370 ops/s
Iteration  26: 96263.045 ops/s
Iteration  27: 96016.447 ops/s
Iteration  28: 96149.969 ops/s
Iteration  29: 94949.369 ops/s
Iteration  30: 96264.340 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_containsAnyCollection":
  96062.311 ±(99.9%) 195.599 ops/s [Average]
  (min, avg, max) = (94949.369, 96062.311, 96388.731), stdev = 292.764
  CI (99.9%): [95866.711, 96257.910] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt      Score     Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_containsAnyCollection  thrpt   30  96062.311 ± 195.599  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_containsAnyIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_containsAnyIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 47027.966 ops/s
# Warmup Iteration   2: 65819.439 ops/s
# Warmup Iteration   3: 79656.422 ops/s
# Warmup Iteration   4: 79237.303 ops/s
# Warmup Iteration   5: 79577.981 ops/s
# Warmup Iteration   6: 79677.460 ops/s
# Warmup Iteration   7: 79544.405 ops/s
# Warmup Iteration   8: 67387.408 ops/s
# Warmup Iteration   9: 79576.987 ops/s
# Warmup Iteration  10: 79569.422 ops/s
# Warmup Iteration  11: 79573.299 ops/s
# Warmup Iteration  12: 79567.996 ops/s
# Warmup Iteration  13: 79602.719 ops/s
# Warmup Iteration  14: 79779.945 ops/s
# Warmup Iteration  15: 79634.238 ops/s
# Warmup Iteration  16: 79709.859 ops/s
# Warmup Iteration  17: 79425.587 ops/s
# Warmup Iteration  18: 79691.592 ops/s
# Warmup Iteration  19: 79595.770 ops/s
# Warmup Iteration  20: 79540.901 ops/s
# Warmup Iteration  21: 79590.853 ops/s
# Warmup Iteration  22: 79501.919 ops/s
# Warmup Iteration  23: 79651.067 ops/s
# Warmup Iteration  24: 79628.689 ops/s
# Warmup Iteration  25: 79318.197 ops/s
# Warmup Iteration  26: 79638.335 ops/s
# Warmup Iteration  27: 79602.561 ops/s
# Warmup Iteration  28: 79529.132 ops/s
# Warmup Iteration  29: 79600.526 ops/s
# Warmup Iteration  30: 79567.754 ops/s
Iteration   1: 79553.557 ops/s
Iteration   2: 79679.897 ops/s
Iteration   3: 79518.743 ops/s
Iteration   4: 79507.143 ops/s
Iteration   5: 79750.445 ops/s
Iteration   6: 79899.569 ops/s
Iteration   7: 79662.228 ops/s
Iteration   8: 79865.415 ops/s
Iteration   9: 79436.769 ops/s
Iteration  10: 79585.398 ops/s
Iteration  11: 79482.441 ops/s
Iteration  12: 79776.940 ops/s
Iteration  13: 79319.228 ops/s
Iteration  14: 79675.754 ops/s
Iteration  15: 79610.064 ops/s
Iteration  16: 79641.060 ops/s
Iteration  17: 79480.452 ops/s
Iteration  18: 79682.289 ops/s
Iteration  19: 79805.612 ops/s
Iteration  20: 79680.366 ops/s
Iteration  21: 79480.192 ops/s
Iteration  22: 79673.728 ops/s
Iteration  23: 79378.043 ops/s
Iteration  24: 79904.240 ops/s
Iteration  25: 79455.235 ops/s
Iteration  26: 79457.409 ops/s
Iteration  27: 79559.933 ops/s
Iteration  28: 79302.414 ops/s
Iteration  29: 79527.182 ops/s
Iteration  30: 79582.639 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_containsAnyIterable":
  79597.813 ±(99.9%) 106.518 ops/s [Average]
  (min, avg, max) = (79302.414, 79597.813, 79904.240), stdev = 159.431
  CI (99.9%): [79491.295, 79704.331] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt      Score     Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_containsAnyIterable  thrpt   30  79597.813 ± 106.518  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_containsBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_containsBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 667956.041 ops/s
# Warmup Iteration   2: 704200.390 ops/s
# Warmup Iteration   3: 863258.061 ops/s
# Warmup Iteration   4: 898434.659 ops/s
# Warmup Iteration   5: 908782.048 ops/s
# Warmup Iteration   6: 906872.610 ops/s
# Warmup Iteration   7: 909197.558 ops/s
# Warmup Iteration   8: 906617.438 ops/s
# Warmup Iteration   9: 908472.610 ops/s
# Warmup Iteration  10: 905961.052 ops/s
# Warmup Iteration  11: 909947.822 ops/s
# Warmup Iteration  12: 903169.563 ops/s
# Warmup Iteration  13: 794668.848 ops/s
# Warmup Iteration  14: 875282.559 ops/s
# Warmup Iteration  15: 907546.323 ops/s
# Warmup Iteration  16: 907810.857 ops/s
# Warmup Iteration  17: 961009.962 ops/s
# Warmup Iteration  18: 958656.114 ops/s
# Warmup Iteration  19: 964092.495 ops/s
# Warmup Iteration  20: 959645.912 ops/s
# Warmup Iteration  21: 961398.359 ops/s
# Warmup Iteration  22: 959786.652 ops/s
# Warmup Iteration  23: 962135.390 ops/s
# Warmup Iteration  24: 961641.979 ops/s
# Warmup Iteration  25: 961326.257 ops/s
# Warmup Iteration  26: 963473.747 ops/s
# Warmup Iteration  27: 960969.282 ops/s
# Warmup Iteration  28: 962723.118 ops/s
# Warmup Iteration  29: 962436.079 ops/s
# Warmup Iteration  30: 963062.257 ops/s
Iteration   1: 960338.408 ops/s
Iteration   2: 961972.422 ops/s
Iteration   3: 963430.707 ops/s
Iteration   4: 959503.666 ops/s
Iteration   5: 964842.954 ops/s
Iteration   6: 964686.070 ops/s
Iteration   7: 963919.245 ops/s
Iteration   8: 962009.571 ops/s
Iteration   9: 960643.738 ops/s
Iteration  10: 960495.997 ops/s
Iteration  11: 955952.677 ops/s
Iteration  12: 961951.958 ops/s
Iteration  13: 959967.843 ops/s
Iteration  14: 955829.873 ops/s
Iteration  15: 960266.869 ops/s
Iteration  16: 963109.645 ops/s
Iteration  17: 952549.046 ops/s
Iteration  18: 955868.626 ops/s
Iteration  19: 963212.313 ops/s
Iteration  20: 962506.804 ops/s
Iteration  21: 958273.863 ops/s
Iteration  22: 960080.723 ops/s
Iteration  23: 952782.893 ops/s
Iteration  24: 962584.785 ops/s
Iteration  25: 958471.383 ops/s
Iteration  26: 960474.785 ops/s
Iteration  27: 962964.219 ops/s
Iteration  28: 958125.196 ops/s
Iteration  29: 958771.290 ops/s
Iteration  30: 965674.374 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_containsBy":
  960375.398 ±(99.9%) 2233.532 ops/s [Average]
  (min, avg, max) = (952549.046, 960375.398, 965674.374), stdev = 3343.046
  CI (99.9%): [958141.866, 962608.930] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_containsBy  thrpt   30  960375.398 ± 2233.532  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_containsNoneCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_containsNoneCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 54010.710 ops/s
# Warmup Iteration   2: 84192.378 ops/s
# Warmup Iteration   3: 96939.047 ops/s
# Warmup Iteration   4: 97697.184 ops/s
# Warmup Iteration   5: 97579.529 ops/s
# Warmup Iteration   6: 97601.251 ops/s
# Warmup Iteration   7: 82962.605 ops/s
# Warmup Iteration   8: 97786.018 ops/s
# Warmup Iteration   9: 97623.444 ops/s
# Warmup Iteration  10: 97593.134 ops/s
# Warmup Iteration  11: 97393.283 ops/s
# Warmup Iteration  12: 97746.251 ops/s
# Warmup Iteration  13: 97563.449 ops/s
# Warmup Iteration  14: 97954.970 ops/s
# Warmup Iteration  15: 97800.132 ops/s
# Warmup Iteration  16: 97686.126 ops/s
# Warmup Iteration  17: 97649.754 ops/s
# Warmup Iteration  18: 97756.231 ops/s
# Warmup Iteration  19: 97581.230 ops/s
# Warmup Iteration  20: 97950.448 ops/s
# Warmup Iteration  21: 97832.227 ops/s
# Warmup Iteration  22: 97831.111 ops/s
# Warmup Iteration  23: 97842.462 ops/s
# Warmup Iteration  24: 97447.856 ops/s
# Warmup Iteration  25: 97870.585 ops/s
# Warmup Iteration  26: 97787.145 ops/s
# Warmup Iteration  27: 97882.900 ops/s
# Warmup Iteration  28: 97948.704 ops/s
# Warmup Iteration  29: 97694.304 ops/s
# Warmup Iteration  30: 97827.250 ops/s
Iteration   1: 97622.059 ops/s
Iteration   2: 97736.200 ops/s
Iteration   3: 97495.365 ops/s
Iteration   4: 97967.889 ops/s
Iteration   5: 97971.498 ops/s
Iteration   6: 98036.693 ops/s
Iteration   7: 97773.768 ops/s
Iteration   8: 98022.910 ops/s
Iteration   9: 98029.454 ops/s
Iteration  10: 97904.191 ops/s
Iteration  11: 97799.112 ops/s
Iteration  12: 97530.472 ops/s
Iteration  13: 97921.317 ops/s
Iteration  14: 97721.885 ops/s
Iteration  15: 97243.132 ops/s
Iteration  16: 96883.710 ops/s
Iteration  17: 97680.353 ops/s
Iteration  18: 97713.105 ops/s
Iteration  19: 97644.170 ops/s
Iteration  20: 97619.558 ops/s
Iteration  21: 98019.010 ops/s
Iteration  22: 97829.565 ops/s
Iteration  23: 97779.559 ops/s
Iteration  24: 97516.933 ops/s
Iteration  25: 97492.263 ops/s
Iteration  26: 97583.963 ops/s
Iteration  27: 98053.943 ops/s
Iteration  28: 97854.287 ops/s
Iteration  29: 97835.452 ops/s
Iteration  30: 97844.344 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_containsNoneCollection":
  97737.539 ±(99.9%) 171.115 ops/s [Average]
  (min, avg, max) = (96883.710, 97737.539, 98053.943), stdev = 256.117
  CI (99.9%): [97566.424, 97908.653] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt      Score     Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_containsNoneCollection  thrpt   30  97737.539 ± 171.115  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_containsNoneIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_containsNoneIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 49812.446 ops/s
# Warmup Iteration   2: 73317.099 ops/s
# Warmup Iteration   3: 86734.870 ops/s
# Warmup Iteration   4: 86208.488 ops/s
# Warmup Iteration   5: 86348.617 ops/s
# Warmup Iteration   6: 86722.459 ops/s
# Warmup Iteration   7: 78135.129 ops/s
# Warmup Iteration   8: 82161.670 ops/s
# Warmup Iteration   9: 86282.190 ops/s
# Warmup Iteration  10: 86716.375 ops/s
# Warmup Iteration  11: 86638.591 ops/s
# Warmup Iteration  12: 86638.365 ops/s
# Warmup Iteration  13: 86573.903 ops/s
# Warmup Iteration  14: 86693.779 ops/s
# Warmup Iteration  15: 86681.529 ops/s
# Warmup Iteration  16: 86864.414 ops/s
# Warmup Iteration  17: 86631.990 ops/s
# Warmup Iteration  18: 86687.930 ops/s
# Warmup Iteration  19: 86686.997 ops/s
# Warmup Iteration  20: 86392.722 ops/s
# Warmup Iteration  21: 86548.497 ops/s
# Warmup Iteration  22: 86935.460 ops/s
# Warmup Iteration  23: 86722.129 ops/s
# Warmup Iteration  24: 86771.010 ops/s
# Warmup Iteration  25: 86512.094 ops/s
# Warmup Iteration  26: 86346.135 ops/s
# Warmup Iteration  27: 86878.629 ops/s
# Warmup Iteration  28: 86514.175 ops/s
# Warmup Iteration  29: 86590.414 ops/s
# Warmup Iteration  30: 86639.192 ops/s
Iteration   1: 86558.378 ops/s
Iteration   2: 86412.599 ops/s
Iteration   3: 86719.885 ops/s
Iteration   4: 86729.073 ops/s
Iteration   5: 86586.306 ops/s
Iteration   6: 86791.102 ops/s
Iteration   7: 86757.551 ops/s
Iteration   8: 86696.919 ops/s
Iteration   9: 86339.611 ops/s
Iteration  10: 86635.430 ops/s
Iteration  11: 86447.048 ops/s
Iteration  12: 86746.779 ops/s
Iteration  13: 86396.740 ops/s
Iteration  14: 86792.535 ops/s
Iteration  15: 86813.020 ops/s
Iteration  16: 86609.361 ops/s
Iteration  17: 87061.712 ops/s
Iteration  18: 86637.991 ops/s
Iteration  19: 86643.933 ops/s
Iteration  20: 86905.658 ops/s
Iteration  21: 86503.015 ops/s
Iteration  22: 86854.932 ops/s
Iteration  23: 86505.692 ops/s
Iteration  24: 86868.519 ops/s
Iteration  25: 87038.238 ops/s
Iteration  26: 86487.598 ops/s
Iteration  27: 86811.972 ops/s
Iteration  28: 86762.891 ops/s
Iteration  29: 86750.516 ops/s
Iteration  30: 86587.803 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_containsNoneIterable":
  86681.760 ±(99.9%) 120.314 ops/s [Average]
  (min, avg, max) = (86339.611, 86681.760, 87061.712), stdev = 180.080
  CI (99.9%): [86561.446, 86802.074] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt      Score     Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_containsNoneIterable  thrpt   30  86681.760 ± 120.314  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2133739.275 ops/s
# Warmup Iteration   2: 4410461.878 ops/s
# Warmup Iteration   3: 4785190.113 ops/s
# Warmup Iteration   4: 4824359.188 ops/s
# Warmup Iteration   5: 3946093.657 ops/s
# Warmup Iteration   6: 4804553.332 ops/s
# Warmup Iteration   7: 4808327.573 ops/s
# Warmup Iteration   8: 4803263.293 ops/s
# Warmup Iteration   9: 4821707.223 ops/s
# Warmup Iteration  10: 4821774.357 ops/s
# Warmup Iteration  11: 4805955.310 ops/s
# Warmup Iteration  12: 4809817.787 ops/s
# Warmup Iteration  13: 4828840.830 ops/s
# Warmup Iteration  14: 4828463.064 ops/s
# Warmup Iteration  15: 4813104.603 ops/s
# Warmup Iteration  16: 4826969.135 ops/s
# Warmup Iteration  17: 4786248.361 ops/s
# Warmup Iteration  18: 4782820.988 ops/s
# Warmup Iteration  19: 4785420.107 ops/s
# Warmup Iteration  20: 4782404.407 ops/s
# Warmup Iteration  21: 4795065.577 ops/s
# Warmup Iteration  22: 4785297.852 ops/s
# Warmup Iteration  23: 4792734.132 ops/s
# Warmup Iteration  24: 4779736.943 ops/s
# Warmup Iteration  25: 4786436.720 ops/s
# Warmup Iteration  26: 4795751.235 ops/s
# Warmup Iteration  27: 4783341.727 ops/s
# Warmup Iteration  28: 4780970.126 ops/s
# Warmup Iteration  29: 4783842.488 ops/s
# Warmup Iteration  30: 4785061.395 ops/s
Iteration   1: 4785252.763 ops/s
Iteration   2: 4795395.455 ops/s
Iteration   3: 4779410.452 ops/s
Iteration   4: 4790019.403 ops/s
Iteration   5: 4799315.687 ops/s
Iteration   6: 4773247.394 ops/s
Iteration   7: 4779556.242 ops/s
Iteration   8: 4793578.782 ops/s
Iteration   9: 4773367.521 ops/s
Iteration  10: 4779438.957 ops/s
Iteration  11: 4777609.805 ops/s
Iteration  12: 4791832.921 ops/s
Iteration  13: 4785451.062 ops/s
Iteration  14: 4788283.797 ops/s
Iteration  15: 4783811.136 ops/s
Iteration  16: 4790479.661 ops/s
Iteration  17: 4754767.807 ops/s
Iteration  18: 4780627.983 ops/s
Iteration  19: 4786246.696 ops/s
Iteration  20: 4788111.439 ops/s
Iteration  21: 4782434.548 ops/s
Iteration  22: 4805118.370 ops/s
Iteration  23: 4772606.731 ops/s
Iteration  24: 4776450.098 ops/s
Iteration  25: 4804317.425 ops/s
Iteration  26: 4777467.245 ops/s
Iteration  27: 4780524.013 ops/s
Iteration  28: 4794776.891 ops/s
Iteration  29: 4762965.607 ops/s
Iteration  30: 4798119.889 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_count":
  4784352.859 ±(99.9%) 7540.280 ops/s [Average]
  (min, avg, max) = (4754767.807, 4784352.859, 4805118.370), stdev = 11285.937
  CI (99.9%): [4776812.579, 4791893.140] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_count  thrpt   30  4784352.859 ± 7540.280  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_countBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_countBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 589034.803 ops/s
# Warmup Iteration   2: 1176203.153 ops/s
# Warmup Iteration   3: 1289733.000 ops/s
# Warmup Iteration   4: 1299958.661 ops/s
# Warmup Iteration   5: 1072858.834 ops/s
# Warmup Iteration   6: 1301537.880 ops/s
# Warmup Iteration   7: 1304784.766 ops/s
# Warmup Iteration   8: 1302260.590 ops/s
# Warmup Iteration   9: 1304932.763 ops/s
# Warmup Iteration  10: 1302222.016 ops/s
# Warmup Iteration  11: 1300527.446 ops/s
# Warmup Iteration  12: 1305894.962 ops/s
# Warmup Iteration  13: 1300111.709 ops/s
# Warmup Iteration  14: 1304473.083 ops/s
# Warmup Iteration  15: 1304407.767 ops/s
# Warmup Iteration  16: 1302815.367 ops/s
# Warmup Iteration  17: 1302720.545 ops/s
# Warmup Iteration  18: 1304788.123 ops/s
# Warmup Iteration  19: 1304180.773 ops/s
# Warmup Iteration  20: 1300955.978 ops/s
# Warmup Iteration  21: 1302458.198 ops/s
# Warmup Iteration  22: 1304040.617 ops/s
# Warmup Iteration  23: 1303267.295 ops/s
# Warmup Iteration  24: 1301877.325 ops/s
# Warmup Iteration  25: 1300812.155 ops/s
# Warmup Iteration  26: 1302200.242 ops/s
# Warmup Iteration  27: 1304650.331 ops/s
# Warmup Iteration  28: 1306427.595 ops/s
# Warmup Iteration  29: 1299566.447 ops/s
# Warmup Iteration  30: 1300608.807 ops/s
Iteration   1: 1297433.071 ops/s
Iteration   2: 1304712.428 ops/s
Iteration   3: 1305111.475 ops/s
Iteration   4: 1305959.245 ops/s
Iteration   5: 1303923.857 ops/s
Iteration   6: 1304869.283 ops/s
Iteration   7: 1307143.076 ops/s
Iteration   8: 1304569.751 ops/s
Iteration   9: 1301240.462 ops/s
Iteration  10: 1304653.799 ops/s
Iteration  11: 1303539.289 ops/s
Iteration  12: 1303616.927 ops/s
Iteration  13: 1305803.556 ops/s
Iteration  14: 1302861.008 ops/s
Iteration  15: 1300878.535 ops/s
Iteration  16: 1305813.652 ops/s
Iteration  17: 1294966.331 ops/s
Iteration  18: 1303930.718 ops/s
Iteration  19: 1302750.600 ops/s
Iteration  20: 1303267.745 ops/s
Iteration  21: 1304741.607 ops/s
Iteration  22: 1299880.943 ops/s
Iteration  23: 1301084.079 ops/s
Iteration  24: 1301682.586 ops/s
Iteration  25: 1303989.760 ops/s
Iteration  26: 1304985.439 ops/s
Iteration  27: 1302499.529 ops/s
Iteration  28: 1306598.189 ops/s
Iteration  29: 1305301.552 ops/s
Iteration  30: 1301776.826 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_countBy":
  1303319.511 ±(99.9%) 1769.715 ops/s [Average]
  (min, avg, max) = (1294966.331, 1303319.511, 1307143.076), stdev = 2648.826
  CI (99.9%): [1301549.796, 1305089.226] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_countBy  thrpt   30  1303319.511 ± 1769.715  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_countByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_countByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 152182865.497 ops/s
# Warmup Iteration   2: 303321544.935 ops/s
# Warmup Iteration   3: 266336753.186 ops/s
# Warmup Iteration   4: 311903468.042 ops/s
# Warmup Iteration   5: 311811903.507 ops/s
# Warmup Iteration   6: 311827420.242 ops/s
# Warmup Iteration   7: 311677326.671 ops/s
# Warmup Iteration   8: 311752908.074 ops/s
# Warmup Iteration   9: 311616673.566 ops/s
# Warmup Iteration  10: 311304889.540 ops/s
# Warmup Iteration  11: 312510209.094 ops/s
# Warmup Iteration  12: 311542448.209 ops/s
# Warmup Iteration  13: 312042269.637 ops/s
# Warmup Iteration  14: 310685511.808 ops/s
# Warmup Iteration  15: 311943850.011 ops/s
# Warmup Iteration  16: 312546165.392 ops/s
# Warmup Iteration  17: 311785815.135 ops/s
# Warmup Iteration  18: 311192939.943 ops/s
# Warmup Iteration  19: 311008121.393 ops/s
# Warmup Iteration  20: 311055287.921 ops/s
# Warmup Iteration  21: 311787036.697 ops/s
# Warmup Iteration  22: 310542705.258 ops/s
# Warmup Iteration  23: 311637111.882 ops/s
# Warmup Iteration  24: 311173047.331 ops/s
# Warmup Iteration  25: 312319430.311 ops/s
# Warmup Iteration  26: 309802735.310 ops/s
# Warmup Iteration  27: 310934828.099 ops/s
# Warmup Iteration  28: 311438936.071 ops/s
# Warmup Iteration  29: 309967232.286 ops/s
# Warmup Iteration  30: 310909215.667 ops/s
Iteration   1: 310772381.702 ops/s
Iteration   2: 311121664.310 ops/s
Iteration   3: 311898337.513 ops/s
Iteration   4: 312167786.669 ops/s
Iteration   5: 312002309.566 ops/s
Iteration   6: 312197002.156 ops/s
Iteration   7: 311959141.654 ops/s
Iteration   8: 311851120.065 ops/s
Iteration   9: 311431744.705 ops/s
Iteration  10: 310979177.679 ops/s
Iteration  11: 310948538.746 ops/s
Iteration  12: 310317197.832 ops/s
Iteration  13: 310813779.973 ops/s
Iteration  14: 312206291.271 ops/s
Iteration  15: 312431158.958 ops/s
Iteration  16: 311680680.547 ops/s
Iteration  17: 311620154.821 ops/s
Iteration  18: 311205895.365 ops/s
Iteration  19: 310090569.000 ops/s
Iteration  20: 311780623.003 ops/s
Iteration  21: 310087793.879 ops/s
Iteration  22: 310617415.849 ops/s
Iteration  23: 312507011.759 ops/s
Iteration  24: 311777325.778 ops/s
Iteration  25: 311975947.800 ops/s
Iteration  26: 312051727.567 ops/s
Iteration  27: 312249125.871 ops/s
Iteration  28: 311144117.087 ops/s
Iteration  29: 311331023.803 ops/s
Iteration  30: 311913768.925 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_countByEach":
  311504360.462 ±(99.9%) 458308.858 ops/s [Average]
  (min, avg, max) = (310087793.879, 311504360.462, 312507011.759), stdev = 685975.175
  CI (99.9%): [311046051.604, 311962669.320] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt          Score        Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_countByEach  thrpt   30  311504360.462 ± 458308.858  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_countByEach_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_countByEach_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 25027440.457 ops/s
# Warmup Iteration   2: 43343321.213 ops/s
# Warmup Iteration   3: 46734793.577 ops/s
# Warmup Iteration   4: 46796701.817 ops/s
# Warmup Iteration   5: 46950347.101 ops/s
# Warmup Iteration   6: 46982068.956 ops/s
# Warmup Iteration   7: 46758943.674 ops/s
# Warmup Iteration   8: 46860084.820 ops/s
# Warmup Iteration   9: 46843699.427 ops/s
# Warmup Iteration  10: 46722743.229 ops/s
# Warmup Iteration  11: 46708419.035 ops/s
# Warmup Iteration  12: 46906840.225 ops/s
# Warmup Iteration  13: 46577195.573 ops/s
# Warmup Iteration  14: 46932512.840 ops/s
# Warmup Iteration  15: 46891261.894 ops/s
# Warmup Iteration  16: 46921964.232 ops/s
# Warmup Iteration  17: 46817025.245 ops/s
# Warmup Iteration  18: 46871403.086 ops/s
# Warmup Iteration  19: 46893631.357 ops/s
# Warmup Iteration  20: 46863968.706 ops/s
# Warmup Iteration  21: 46876420.174 ops/s
# Warmup Iteration  22: 46768403.121 ops/s
# Warmup Iteration  23: 46927920.018 ops/s
# Warmup Iteration  24: 46885313.614 ops/s
# Warmup Iteration  25: 46639391.752 ops/s
# Warmup Iteration  26: 46790070.941 ops/s
# Warmup Iteration  27: 46752956.322 ops/s
# Warmup Iteration  28: 46964713.243 ops/s
# Warmup Iteration  29: 46899371.559 ops/s
# Warmup Iteration  30: 47002881.402 ops/s
Iteration   1: 46795209.394 ops/s
Iteration   2: 46929040.815 ops/s
Iteration   3: 46934901.783 ops/s
Iteration   4: 46963507.601 ops/s
Iteration   5: 46827940.545 ops/s
Iteration   6: 46783855.717 ops/s
Iteration   7: 47059600.271 ops/s
Iteration   8: 46881607.091 ops/s
Iteration   9: 46890482.798 ops/s
Iteration  10: 46806129.008 ops/s
Iteration  11: 46919355.156 ops/s
Iteration  12: 47049225.281 ops/s
Iteration  13: 46886737.941 ops/s
Iteration  14: 46961017.605 ops/s
Iteration  15: 46841828.455 ops/s
Iteration  16: 46949067.170 ops/s
Iteration  17: 47232807.113 ops/s
Iteration  18: 46897990.702 ops/s
Iteration  19: 46911921.969 ops/s
Iteration  20: 46902335.130 ops/s
Iteration  21: 46526706.872 ops/s
Iteration  22: 46828402.776 ops/s
Iteration  23: 46879252.461 ops/s
Iteration  24: 46797636.281 ops/s
Iteration  25: 46768539.605 ops/s
Iteration  26: 46784922.640 ops/s
Iteration  27: 46627847.331 ops/s
Iteration  28: 46741028.884 ops/s
Iteration  29: 46815591.409 ops/s
Iteration  30: 46817910.519 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_countByEach_target":
  46867080.011 ±(99.9%) 85983.197 ops/s [Average]
  (min, avg, max) = (46526706.872, 46867080.011, 47232807.113), stdev = 128695.611
  CI (99.9%): [46781096.814, 46953063.208] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score       Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_countByEach_target  thrpt   30  46867080.011 ± 85983.197  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_countByWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_countByWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 571661.971 ops/s
# Warmup Iteration   2: 1057719.604 ops/s
# Warmup Iteration   3: 1213157.682 ops/s
# Warmup Iteration   4: 1219928.880 ops/s
# Warmup Iteration   5: 1218570.155 ops/s
# Warmup Iteration   6: 1000323.076 ops/s
# Warmup Iteration   7: 1213614.872 ops/s
# Warmup Iteration   8: 1211232.766 ops/s
# Warmup Iteration   9: 1209292.177 ops/s
# Warmup Iteration  10: 1210587.166 ops/s
# Warmup Iteration  11: 1213053.962 ops/s
# Warmup Iteration  12: 1212500.053 ops/s
# Warmup Iteration  13: 1211857.223 ops/s
# Warmup Iteration  14: 1213578.770 ops/s
# Warmup Iteration  15: 1214328.504 ops/s
# Warmup Iteration  16: 1208278.033 ops/s
# Warmup Iteration  17: 1221806.748 ops/s
# Warmup Iteration  18: 1218874.294 ops/s
# Warmup Iteration  19: 1222173.349 ops/s
# Warmup Iteration  20: 1221059.043 ops/s
# Warmup Iteration  21: 1223352.655 ops/s
# Warmup Iteration  22: 1224285.391 ops/s
# Warmup Iteration  23: 1222548.965 ops/s
# Warmup Iteration  24: 1224335.859 ops/s
# Warmup Iteration  25: 1224045.543 ops/s
# Warmup Iteration  26: 1220994.576 ops/s
# Warmup Iteration  27: 1223434.748 ops/s
# Warmup Iteration  28: 1222220.887 ops/s
# Warmup Iteration  29: 1221598.128 ops/s
# Warmup Iteration  30: 1221458.523 ops/s
Iteration   1: 1225799.396 ops/s
Iteration   2: 1221011.948 ops/s
Iteration   3: 1220692.753 ops/s
Iteration   4: 1226226.232 ops/s
Iteration   5: 1220901.845 ops/s
Iteration   6: 1223582.764 ops/s
Iteration   7: 1222799.654 ops/s
Iteration   8: 1224077.247 ops/s
Iteration   9: 1220089.916 ops/s
Iteration  10: 1222610.636 ops/s
Iteration  11: 1224272.351 ops/s
Iteration  12: 1220323.999 ops/s
Iteration  13: 1221892.582 ops/s
Iteration  14: 1219669.044 ops/s
Iteration  15: 1222005.074 ops/s
Iteration  16: 1223375.941 ops/s
Iteration  17: 1223519.600 ops/s
Iteration  18: 1222957.294 ops/s
Iteration  19: 1222408.696 ops/s
Iteration  20: 1222747.334 ops/s
Iteration  21: 1224205.871 ops/s
Iteration  22: 1215789.737 ops/s
Iteration  23: 1222937.944 ops/s
Iteration  24: 1218627.947 ops/s
Iteration  25: 1218801.314 ops/s
Iteration  26: 1219509.974 ops/s
Iteration  27: 1220902.717 ops/s
Iteration  28: 1225570.598 ops/s
Iteration  29: 1218009.865 ops/s
Iteration  30: 1222982.697 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_countByWith":
  1221943.432 ±(99.9%) 1616.615 ops/s [Average]
  (min, avg, max) = (1215789.737, 1221943.432, 1226226.232), stdev = 2419.674
  CI (99.9%): [1220326.817, 1223560.048] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_countByWith  thrpt   30  1221943.432 ± 1616.615  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_countWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_countWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2231053.550 ops/s
# Warmup Iteration   2: 4365142.928 ops/s
# Warmup Iteration   3: 4820557.296 ops/s
# Warmup Iteration   4: 4843313.395 ops/s
# Warmup Iteration   5: 3948693.954 ops/s
# Warmup Iteration   6: 4855071.175 ops/s
# Warmup Iteration   7: 4860636.151 ops/s
# Warmup Iteration   8: 4857265.175 ops/s
# Warmup Iteration   9: 4859962.481 ops/s
# Warmup Iteration  10: 4835772.604 ops/s
# Warmup Iteration  11: 4849698.169 ops/s
# Warmup Iteration  12: 4848183.702 ops/s
# Warmup Iteration  13: 4860092.267 ops/s
# Warmup Iteration  14: 4862727.097 ops/s
# Warmup Iteration  15: 4853193.697 ops/s
# Warmup Iteration  16: 4863617.351 ops/s
# Warmup Iteration  17: 4837403.901 ops/s
# Warmup Iteration  18: 4829585.914 ops/s
# Warmup Iteration  19: 4817466.744 ops/s
# Warmup Iteration  20: 4834202.467 ops/s
# Warmup Iteration  21: 4838906.547 ops/s
# Warmup Iteration  22: 4834303.164 ops/s
# Warmup Iteration  23: 4838102.048 ops/s
# Warmup Iteration  24: 4829069.867 ops/s
# Warmup Iteration  25: 4829951.923 ops/s
# Warmup Iteration  26: 4802875.948 ops/s
# Warmup Iteration  27: 4833796.020 ops/s
# Warmup Iteration  28: 4833077.960 ops/s
# Warmup Iteration  29: 4820071.666 ops/s
# Warmup Iteration  30: 4833394.025 ops/s
Iteration   1: 4837387.895 ops/s
Iteration   2: 4836428.723 ops/s
Iteration   3: 4819053.639 ops/s
Iteration   4: 4813660.968 ops/s
Iteration   5: 4839090.962 ops/s
Iteration   6: 4824966.155 ops/s
Iteration   7: 4821188.750 ops/s
Iteration   8: 4837152.438 ops/s
Iteration   9: 4824142.424 ops/s
Iteration  10: 4830900.987 ops/s
Iteration  11: 4802412.465 ops/s
Iteration  12: 4799714.455 ops/s
Iteration  13: 4827828.730 ops/s
Iteration  14: 4838575.602 ops/s
Iteration  15: 4821047.097 ops/s
Iteration  16: 4840627.094 ops/s
Iteration  17: 4818235.586 ops/s
Iteration  18: 4834646.101 ops/s
Iteration  19: 4839086.870 ops/s
Iteration  20: 4818992.151 ops/s
Iteration  21: 4833283.266 ops/s
Iteration  22: 4848926.945 ops/s
Iteration  23: 4817870.942 ops/s
Iteration  24: 4831699.446 ops/s
Iteration  25: 4835809.084 ops/s
Iteration  26: 4820304.357 ops/s
Iteration  27: 4814645.572 ops/s
Iteration  28: 4841889.652 ops/s
Iteration  29: 4834288.378 ops/s
Iteration  30: 4838536.221 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_countWith":
  4828079.765 ±(99.9%) 7917.364 ops/s [Average]
  (min, avg, max) = (4799714.455, 4828079.765, 4848926.945), stdev = 11850.339
  CI (99.9%): [4820162.401, 4835997.129] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_countWith  thrpt   30  4828079.765 ± 7917.364  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_detect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_detect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 152436368.951 ops/s
# Warmup Iteration   2: 302831357.749 ops/s
# Warmup Iteration   3: 265782728.687 ops/s
# Warmup Iteration   4: 308518420.351 ops/s
# Warmup Iteration   5: 308501022.757 ops/s
# Warmup Iteration   6: 308844865.153 ops/s
# Warmup Iteration   7: 308402947.146 ops/s
# Warmup Iteration   8: 309217524.136 ops/s
# Warmup Iteration   9: 309451783.895 ops/s
# Warmup Iteration  10: 308493758.318 ops/s
# Warmup Iteration  11: 309588445.085 ops/s
# Warmup Iteration  12: 308942678.677 ops/s
# Warmup Iteration  13: 308164052.483 ops/s
# Warmup Iteration  14: 307964664.505 ops/s
# Warmup Iteration  15: 308246400.936 ops/s
# Warmup Iteration  16: 308517764.730 ops/s
# Warmup Iteration  17: 309736837.475 ops/s
# Warmup Iteration  18: 308655061.607 ops/s
# Warmup Iteration  19: 309063118.868 ops/s
# Warmup Iteration  20: 310089867.146 ops/s
# Warmup Iteration  21: 309094594.974 ops/s
# Warmup Iteration  22: 308456137.437 ops/s
# Warmup Iteration  23: 309462611.683 ops/s
# Warmup Iteration  24: 307687625.918 ops/s
# Warmup Iteration  25: 308986060.504 ops/s
# Warmup Iteration  26: 308945937.893 ops/s
# Warmup Iteration  27: 309812992.768 ops/s
# Warmup Iteration  28: 306652028.716 ops/s
# Warmup Iteration  29: 308658332.258 ops/s
# Warmup Iteration  30: 308852737.945 ops/s
Iteration   1: 308138285.284 ops/s
Iteration   2: 308877639.092 ops/s
Iteration   3: 310003917.885 ops/s
Iteration   4: 308581885.378 ops/s
Iteration   5: 309848055.136 ops/s
Iteration   6: 309030046.130 ops/s
Iteration   7: 309289053.870 ops/s
Iteration   8: 308722683.305 ops/s
Iteration   9: 309096070.984 ops/s
Iteration  10: 309147424.385 ops/s
Iteration  11: 308914612.782 ops/s
Iteration  12: 308251055.215 ops/s
Iteration  13: 308396486.327 ops/s
Iteration  14: 307727076.145 ops/s
Iteration  15: 309538601.564 ops/s
Iteration  16: 307533346.937 ops/s
Iteration  17: 310002096.086 ops/s
Iteration  18: 307879793.988 ops/s
Iteration  19: 308620793.242 ops/s
Iteration  20: 310666838.828 ops/s
Iteration  21: 307442254.589 ops/s
Iteration  22: 309977068.040 ops/s
Iteration  23: 308251397.281 ops/s
Iteration  24: 309454360.092 ops/s
Iteration  25: 310131558.071 ops/s
Iteration  26: 310561648.749 ops/s
Iteration  27: 310608224.292 ops/s
Iteration  28: 307217571.187 ops/s
Iteration  29: 308951573.656 ops/s
Iteration  30: 309691616.940 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_detect":
  309018434.515 ±(99.9%) 646189.672 ops/s [Average]
  (min, avg, max) = (307217571.187, 309018434.515, 310666838.828), stdev = 967186.353
  CI (99.9%): [308372244.844, 309664624.187] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt          Score        Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_detect  thrpt   30  309018434.515 ± 646189.672  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 648405.249 ops/s
# Warmup Iteration   2: 1256717.990 ops/s
# Warmup Iteration   3: 1396074.771 ops/s
# Warmup Iteration   4: 1407890.314 ops/s
# Warmup Iteration   5: 1199961.203 ops/s
# Warmup Iteration   6: 1365843.328 ops/s
# Warmup Iteration   7: 1406967.213 ops/s
# Warmup Iteration   8: 1405062.970 ops/s
# Warmup Iteration   9: 1410786.758 ops/s
# Warmup Iteration  10: 1409302.767 ops/s
# Warmup Iteration  11: 1404859.162 ops/s
# Warmup Iteration  12: 1405965.955 ops/s
# Warmup Iteration  13: 1401347.788 ops/s
# Warmup Iteration  14: 1410645.704 ops/s
# Warmup Iteration  15: 1409807.642 ops/s
# Warmup Iteration  16: 1411183.417 ops/s
# Warmup Iteration  17: 1409347.732 ops/s
# Warmup Iteration  18: 1408799.474 ops/s
# Warmup Iteration  19: 1407265.339 ops/s
# Warmup Iteration  20: 1407290.922 ops/s
# Warmup Iteration  21: 1410363.255 ops/s
# Warmup Iteration  22: 1409416.915 ops/s
# Warmup Iteration  23: 1408442.204 ops/s
# Warmup Iteration  24: 1407793.270 ops/s
# Warmup Iteration  25: 1407482.261 ops/s
# Warmup Iteration  26: 1412439.970 ops/s
# Warmup Iteration  27: 1409957.607 ops/s
# Warmup Iteration  28: 1411876.861 ops/s
# Warmup Iteration  29: 1409706.076 ops/s
# Warmup Iteration  30: 1408867.701 ops/s
Iteration   1: 1410758.237 ops/s
Iteration   2: 1409885.962 ops/s
Iteration   3: 1410783.138 ops/s
Iteration   4: 1394033.670 ops/s
Iteration   5: 1408226.118 ops/s
Iteration   6: 1411487.970 ops/s
Iteration   7: 1408864.059 ops/s
Iteration   8: 1411244.213 ops/s
Iteration   9: 1412076.577 ops/s
Iteration  10: 1409690.641 ops/s
Iteration  11: 1407524.014 ops/s
Iteration  12: 1409581.022 ops/s
Iteration  13: 1405630.026 ops/s
Iteration  14: 1407409.532 ops/s
Iteration  15: 1404108.645 ops/s
Iteration  16: 1410343.446 ops/s
Iteration  17: 1410398.410 ops/s
Iteration  18: 1412042.312 ops/s
Iteration  19: 1410441.930 ops/s
Iteration  20: 1411874.835 ops/s
Iteration  21: 1403643.463 ops/s
Iteration  22: 1406021.658 ops/s
Iteration  23: 1410237.106 ops/s
Iteration  24: 1409314.400 ops/s
Iteration  25: 1407729.541 ops/s
Iteration  26: 1409481.885 ops/s
Iteration  27: 1404507.226 ops/s
Iteration  28: 1406827.221 ops/s
Iteration  29: 1413173.593 ops/s
Iteration  30: 1411843.094 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_detectIfNone":
  1408639.465 ±(99.9%) 2493.894 ops/s [Average]
  (min, avg, max) = (1394033.670, 1408639.465, 1413173.593), stdev = 3732.743
  CI (99.9%): [1406145.571, 1411133.359] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_detectIfNone  thrpt   30  1408639.465 ± 2493.894  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_detectOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_detectOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 286087.102 ops/s
# Warmup Iteration   2: 368103.205 ops/s
# Warmup Iteration   3: 456164.553 ops/s
# Warmup Iteration   4: 454685.249 ops/s
# Warmup Iteration   5: 457136.600 ops/s
# Warmup Iteration   6: 455822.136 ops/s
# Warmup Iteration   7: 456061.455 ops/s
# Warmup Iteration   8: 436241.251 ops/s
# Warmup Iteration   9: 401711.350 ops/s
# Warmup Iteration  10: 456839.969 ops/s
# Warmup Iteration  11: 457856.743 ops/s
# Warmup Iteration  12: 458892.885 ops/s
# Warmup Iteration  13: 456612.094 ops/s
# Warmup Iteration  14: 456509.690 ops/s
# Warmup Iteration  15: 457823.114 ops/s
# Warmup Iteration  16: 456627.401 ops/s
# Warmup Iteration  17: 470810.428 ops/s
# Warmup Iteration  18: 471013.081 ops/s
# Warmup Iteration  19: 470405.847 ops/s
# Warmup Iteration  20: 470520.081 ops/s
# Warmup Iteration  21: 470753.521 ops/s
# Warmup Iteration  22: 470034.283 ops/s
# Warmup Iteration  23: 471260.430 ops/s
# Warmup Iteration  24: 470861.153 ops/s
# Warmup Iteration  25: 469226.110 ops/s
# Warmup Iteration  26: 471329.475 ops/s
# Warmup Iteration  27: 471266.426 ops/s
# Warmup Iteration  28: 473196.113 ops/s
# Warmup Iteration  29: 469796.489 ops/s
# Warmup Iteration  30: 470542.509 ops/s
Iteration   1: 471027.344 ops/s
Iteration   2: 472255.782 ops/s
Iteration   3: 470893.586 ops/s
Iteration   4: 469125.215 ops/s
Iteration   5: 471995.608 ops/s
Iteration   6: 472314.988 ops/s
Iteration   7: 470064.815 ops/s
Iteration   8: 472504.548 ops/s
Iteration   9: 472888.589 ops/s
Iteration  10: 472738.067 ops/s
Iteration  11: 470128.076 ops/s
Iteration  12: 471141.287 ops/s
Iteration  13: 473364.963 ops/s
Iteration  14: 471988.083 ops/s
Iteration  15: 469218.483 ops/s
Iteration  16: 470889.214 ops/s
Iteration  17: 470867.414 ops/s
Iteration  18: 468294.853 ops/s
Iteration  19: 472977.700 ops/s
Iteration  20: 469384.180 ops/s
Iteration  21: 471825.826 ops/s
Iteration  22: 469402.143 ops/s
Iteration  23: 470591.976 ops/s
Iteration  24: 474268.775 ops/s
Iteration  25: 471336.401 ops/s
Iteration  26: 472752.845 ops/s
Iteration  27: 470136.526 ops/s
Iteration  28: 470922.402 ops/s
Iteration  29: 471620.154 ops/s
Iteration  30: 472212.333 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_detectOptional":
  471304.406 ±(99.9%) 953.301 ops/s [Average]
  (min, avg, max) = (468294.853, 471304.406, 474268.775), stdev = 1426.856
  CI (99.9%): [470351.105, 472257.707] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score     Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_detectOptional  thrpt   30  471304.406 ± 953.301  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_detectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_detectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 152031327.628 ops/s
# Warmup Iteration   2: 302553686.173 ops/s
# Warmup Iteration   3: 263907486.199 ops/s
# Warmup Iteration   4: 309208277.554 ops/s
# Warmup Iteration   5: 309390104.701 ops/s
# Warmup Iteration   6: 308608688.671 ops/s
# Warmup Iteration   7: 308686189.717 ops/s
# Warmup Iteration   8: 309780428.155 ops/s
# Warmup Iteration   9: 308749574.811 ops/s
# Warmup Iteration  10: 307875991.237 ops/s
# Warmup Iteration  11: 309205183.950 ops/s
# Warmup Iteration  12: 310175810.502 ops/s
# Warmup Iteration  13: 307959830.950 ops/s
# Warmup Iteration  14: 308506771.448 ops/s
# Warmup Iteration  15: 308896020.248 ops/s
# Warmup Iteration  16: 308748634.047 ops/s
# Warmup Iteration  17: 309672219.704 ops/s
# Warmup Iteration  18: 308637390.140 ops/s
# Warmup Iteration  19: 309180902.657 ops/s
# Warmup Iteration  20: 308795726.929 ops/s
# Warmup Iteration  21: 308655822.478 ops/s
# Warmup Iteration  22: 309401793.173 ops/s
# Warmup Iteration  23: 309163761.851 ops/s
# Warmup Iteration  24: 308556766.017 ops/s
# Warmup Iteration  25: 308278048.668 ops/s
# Warmup Iteration  26: 308755164.900 ops/s
# Warmup Iteration  27: 309483151.054 ops/s
# Warmup Iteration  28: 308712195.591 ops/s
# Warmup Iteration  29: 308756632.938 ops/s
# Warmup Iteration  30: 308557685.204 ops/s
Iteration   1: 308835779.239 ops/s
Iteration   2: 308477434.485 ops/s
Iteration   3: 308876389.111 ops/s
Iteration   4: 309281478.364 ops/s
Iteration   5: 309594093.292 ops/s
Iteration   6: 308105164.296 ops/s
Iteration   7: 309076864.771 ops/s
Iteration   8: 310333158.350 ops/s
Iteration   9: 308471209.108 ops/s
Iteration  10: 309553953.008 ops/s
Iteration  11: 309177293.664 ops/s
Iteration  12: 309084982.292 ops/s
Iteration  13: 309376255.177 ops/s
Iteration  14: 307989969.268 ops/s
Iteration  15: 309013414.228 ops/s
Iteration  16: 309887659.778 ops/s
Iteration  17: 306462967.074 ops/s
Iteration  18: 309210042.597 ops/s
Iteration  19: 310162136.894 ops/s
Iteration  20: 309573207.589 ops/s
Iteration  21: 308861086.770 ops/s
Iteration  22: 308358184.631 ops/s
Iteration  23: 309306765.970 ops/s
Iteration  24: 308985793.790 ops/s
Iteration  25: 309048260.198 ops/s
Iteration  26: 309011609.599 ops/s
Iteration  27: 309604414.393 ops/s
Iteration  28: 307696391.441 ops/s
Iteration  29: 308931091.619 ops/s
Iteration  30: 308959274.778 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_detectWith":
  308976877.526 ±(99.9%) 506231.064 ops/s [Average]
  (min, avg, max) = (306462967.074, 308976877.526, 310333158.350), stdev = 757702.883
  CI (99.9%): [308470646.462, 309483108.590] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt          Score        Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_detectWith  thrpt   30  308976877.526 ± 506231.064  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_detectWithIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_detectWithIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 152620217.841 ops/s
# Warmup Iteration   2: 304124098.388 ops/s
# Warmup Iteration   3: 237152562.945 ops/s
# Warmup Iteration   4: 273153429.960 ops/s
# Warmup Iteration   5: 273388480.898 ops/s
# Warmup Iteration   6: 272879467.273 ops/s
# Warmup Iteration   7: 273712804.230 ops/s
# Warmup Iteration   8: 272932493.564 ops/s
# Warmup Iteration   9: 272590788.133 ops/s
# Warmup Iteration  10: 272753886.698 ops/s
# Warmup Iteration  11: 273385652.445 ops/s
# Warmup Iteration  12: 273096794.332 ops/s
# Warmup Iteration  13: 272899263.516 ops/s
# Warmup Iteration  14: 272949147.780 ops/s
# Warmup Iteration  15: 273197742.041 ops/s
# Warmup Iteration  16: 273138843.001 ops/s
# Warmup Iteration  17: 273554468.689 ops/s
# Warmup Iteration  18: 271921823.935 ops/s
# Warmup Iteration  19: 272800285.447 ops/s
# Warmup Iteration  20: 272009407.494 ops/s
# Warmup Iteration  21: 273224460.739 ops/s
# Warmup Iteration  22: 273466102.927 ops/s
# Warmup Iteration  23: 273342045.024 ops/s
# Warmup Iteration  24: 273395662.799 ops/s
# Warmup Iteration  25: 273891224.535 ops/s
# Warmup Iteration  26: 273490093.872 ops/s
# Warmup Iteration  27: 273823112.885 ops/s
# Warmup Iteration  28: 273791499.604 ops/s
# Warmup Iteration  29: 272575072.202 ops/s
# Warmup Iteration  30: 274091476.498 ops/s
Iteration   1: 273433601.352 ops/s
Iteration   2: 273863187.096 ops/s
Iteration   3: 272713301.558 ops/s
Iteration   4: 272348223.092 ops/s
Iteration   5: 274346204.072 ops/s
Iteration   6: 272526453.653 ops/s
Iteration   7: 273652937.840 ops/s
Iteration   8: 273442052.167 ops/s
Iteration   9: 272506890.318 ops/s
Iteration  10: 273052039.554 ops/s
Iteration  11: 273372498.261 ops/s
Iteration  12: 273722639.419 ops/s
Iteration  13: 273441307.174 ops/s
Iteration  14: 272818876.599 ops/s
Iteration  15: 273778218.830 ops/s
Iteration  16: 273973857.128 ops/s
Iteration  17: 273120879.960 ops/s
Iteration  18: 274357906.155 ops/s
Iteration  19: 273633113.084 ops/s
Iteration  20: 271773692.121 ops/s
Iteration  21: 273465252.378 ops/s
Iteration  22: 272934723.902 ops/s
Iteration  23: 273508455.012 ops/s
Iteration  24: 272552379.360 ops/s
Iteration  25: 272705647.974 ops/s
Iteration  26: 273149694.722 ops/s
Iteration  27: 273226369.821 ops/s
Iteration  28: 272367237.741 ops/s
Iteration  29: 273986037.013 ops/s
Iteration  30: 272208355.130 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_detectWithIfNone":
  273199401.083 ±(99.9%) 433277.942 ops/s [Average]
  (min, avg, max) = (271773692.121, 273199401.083, 274357906.155), stdev = 648510.076
  CI (99.9%): [272766123.141, 273632679.025] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt          Score        Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_detectWithIfNone  thrpt   30  273199401.083 ± 433277.942  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_detectWithIfNoneBlock$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_detectWithIfNoneBlock

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 752501.502 ops/s
# Warmup Iteration   2: 1393294.825 ops/s
# Warmup Iteration   3: 1523526.154 ops/s
# Warmup Iteration   4: 1535806.158 ops/s
# Warmup Iteration   5: 1390460.476 ops/s
# Warmup Iteration   6: 1401035.690 ops/s
# Warmup Iteration   7: 1537530.450 ops/s
# Warmup Iteration   8: 1535820.008 ops/s
# Warmup Iteration   9: 1536073.642 ops/s
# Warmup Iteration  10: 1534990.057 ops/s
# Warmup Iteration  11: 1537095.856 ops/s
# Warmup Iteration  12: 1536849.726 ops/s
# Warmup Iteration  13: 1534778.869 ops/s
# Warmup Iteration  14: 1535421.959 ops/s
# Warmup Iteration  15: 1533797.924 ops/s
# Warmup Iteration  16: 1530294.204 ops/s
# Warmup Iteration  17: 1532457.521 ops/s
# Warmup Iteration  18: 1531595.826 ops/s
# Warmup Iteration  19: 1528373.680 ops/s
# Warmup Iteration  20: 1534447.230 ops/s
# Warmup Iteration  21: 1533946.435 ops/s
# Warmup Iteration  22: 1534296.555 ops/s
# Warmup Iteration  23: 1533818.652 ops/s
# Warmup Iteration  24: 1534862.327 ops/s
# Warmup Iteration  25: 1534291.183 ops/s
# Warmup Iteration  26: 1534267.497 ops/s
# Warmup Iteration  27: 1534514.950 ops/s
# Warmup Iteration  28: 1534015.799 ops/s
# Warmup Iteration  29: 1531679.121 ops/s
# Warmup Iteration  30: 1535870.259 ops/s
Iteration   1: 1537821.533 ops/s
Iteration   2: 1523822.530 ops/s
Iteration   3: 1533386.869 ops/s
Iteration   4: 1534245.535 ops/s
Iteration   5: 1531116.151 ops/s
Iteration   6: 1530389.223 ops/s
Iteration   7: 1533716.315 ops/s
Iteration   8: 1533845.456 ops/s
Iteration   9: 1537254.841 ops/s
Iteration  10: 1539069.415 ops/s
Iteration  11: 1534693.785 ops/s
Iteration  12: 1536471.307 ops/s
Iteration  13: 1533377.022 ops/s
Iteration  14: 1534524.881 ops/s
Iteration  15: 1535791.231 ops/s
Iteration  16: 1535625.749 ops/s
Iteration  17: 1533397.352 ops/s
Iteration  18: 1532020.941 ops/s
Iteration  19: 1532124.390 ops/s
Iteration  20: 1530152.996 ops/s
Iteration  21: 1536879.943 ops/s
Iteration  22: 1532663.586 ops/s
Iteration  23: 1535008.496 ops/s
Iteration  24: 1534593.036 ops/s
Iteration  25: 1533249.840 ops/s
Iteration  26: 1534990.723 ops/s
Iteration  27: 1534732.329 ops/s
Iteration  28: 1528351.108 ops/s
Iteration  29: 1537603.192 ops/s
Iteration  30: 1527751.192 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_detectWithIfNoneBlock":
  1533622.366 ±(99.9%) 2167.653 ops/s [Average]
  (min, avg, max) = (1523822.530, 1533622.366, 1539069.415), stdev = 3244.442
  CI (99.9%): [1531454.712, 1535790.019] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_detectWithIfNoneBlock  thrpt   30  1533622.366 ± 2167.653  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_detectWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_detectWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 151443241.295 ops/s
# Warmup Iteration   2: 311389011.760 ops/s
# Warmup Iteration   3: 260930107.391 ops/s
# Warmup Iteration   4: 312103348.354 ops/s
# Warmup Iteration   5: 311038538.030 ops/s
# Warmup Iteration   6: 311898577.767 ops/s
# Warmup Iteration   7: 311793883.848 ops/s
# Warmup Iteration   8: 312176097.709 ops/s
# Warmup Iteration   9: 311492027.982 ops/s
# Warmup Iteration  10: 310939486.112 ops/s
# Warmup Iteration  11: 311296078.190 ops/s
# Warmup Iteration  12: 311579880.328 ops/s
# Warmup Iteration  13: 312164558.090 ops/s
# Warmup Iteration  14: 311363548.940 ops/s
# Warmup Iteration  15: 312742917.086 ops/s
# Warmup Iteration  16: 312625696.280 ops/s
# Warmup Iteration  17: 311802472.597 ops/s
# Warmup Iteration  18: 312005371.889 ops/s
# Warmup Iteration  19: 312023382.599 ops/s
# Warmup Iteration  20: 310938043.091 ops/s
# Warmup Iteration  21: 310754510.086 ops/s
# Warmup Iteration  22: 312239968.354 ops/s
# Warmup Iteration  23: 310298398.927 ops/s
# Warmup Iteration  24: 311454050.454 ops/s
# Warmup Iteration  25: 312045981.637 ops/s
# Warmup Iteration  26: 311760643.482 ops/s
# Warmup Iteration  27: 311826677.560 ops/s
# Warmup Iteration  28: 311766656.356 ops/s
# Warmup Iteration  29: 312044896.159 ops/s
# Warmup Iteration  30: 310589847.257 ops/s
Iteration   1: 311152181.042 ops/s
Iteration   2: 312001625.345 ops/s
Iteration   3: 312360804.808 ops/s
Iteration   4: 311833348.836 ops/s
Iteration   5: 311796143.794 ops/s
Iteration   6: 311082246.796 ops/s
Iteration   7: 310112435.771 ops/s
Iteration   8: 311106693.605 ops/s
Iteration   9: 312562295.942 ops/s
Iteration  10: 309655868.607 ops/s
Iteration  11: 312662326.359 ops/s
Iteration  12: 312773727.162 ops/s
Iteration  13: 311160116.101 ops/s
Iteration  14: 310235574.644 ops/s
Iteration  15: 310310524.884 ops/s
Iteration  16: 311437789.622 ops/s
Iteration  17: 310979910.413 ops/s
Iteration  18: 310951864.707 ops/s
Iteration  19: 311196674.358 ops/s
Iteration  20: 311139428.306 ops/s
Iteration  21: 311845343.056 ops/s
Iteration  22: 310964338.329 ops/s
Iteration  23: 311350785.628 ops/s
Iteration  24: 308831228.457 ops/s
Iteration  25: 311111886.353 ops/s
Iteration  26: 311010614.822 ops/s
Iteration  27: 311448466.493 ops/s
Iteration  28: 310984753.012 ops/s
Iteration  29: 311005160.351 ops/s
Iteration  30: 310790064.190 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_detectWithOccurrences":
  311195140.726 ±(99.9%) 570773.570 ops/s [Average]
  (min, avg, max) = (308831228.457, 311195140.726, 312773727.162), stdev = 854307.075
  CI (99.9%): [310624367.156, 311765914.297] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt          Score        Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_detectWithOccurrences  thrpt   30  311195140.726 ± 570773.570  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_detectWithOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_detectWithOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 283287.783 ops/s
# Warmup Iteration   2: 363749.771 ops/s
# Warmup Iteration   3: 454743.918 ops/s
# Warmup Iteration   4: 453235.471 ops/s
# Warmup Iteration   5: 456093.472 ops/s
# Warmup Iteration   6: 456932.189 ops/s
# Warmup Iteration   7: 455356.243 ops/s
# Warmup Iteration   8: 437677.722 ops/s
# Warmup Iteration   9: 399373.364 ops/s
# Warmup Iteration  10: 456732.287 ops/s
# Warmup Iteration  11: 456657.299 ops/s
# Warmup Iteration  12: 454720.775 ops/s
# Warmup Iteration  13: 454478.405 ops/s
# Warmup Iteration  14: 456448.560 ops/s
# Warmup Iteration  15: 455953.717 ops/s
# Warmup Iteration  16: 457314.197 ops/s
# Warmup Iteration  17: 467548.418 ops/s
# Warmup Iteration  18: 472066.332 ops/s
# Warmup Iteration  19: 470154.221 ops/s
# Warmup Iteration  20: 467653.159 ops/s
# Warmup Iteration  21: 468892.902 ops/s
# Warmup Iteration  22: 467771.491 ops/s
# Warmup Iteration  23: 465624.056 ops/s
# Warmup Iteration  24: 470892.444 ops/s
# Warmup Iteration  25: 470239.004 ops/s
# Warmup Iteration  26: 470574.711 ops/s
# Warmup Iteration  27: 470375.181 ops/s
# Warmup Iteration  28: 467929.354 ops/s
# Warmup Iteration  29: 469130.071 ops/s
# Warmup Iteration  30: 469766.028 ops/s
Iteration   1: 468121.087 ops/s
Iteration   2: 471101.632 ops/s
Iteration   3: 471963.446 ops/s
Iteration   4: 462550.989 ops/s
Iteration   5: 469549.577 ops/s
Iteration   6: 468517.669 ops/s
Iteration   7: 470169.821 ops/s
Iteration   8: 471137.611 ops/s
Iteration   9: 465855.206 ops/s
Iteration  10: 471666.655 ops/s
Iteration  11: 466755.057 ops/s
Iteration  12: 469981.651 ops/s
Iteration  13: 472621.089 ops/s
Iteration  14: 472445.181 ops/s
Iteration  15: 468582.146 ops/s
Iteration  16: 471435.713 ops/s
Iteration  17: 471074.505 ops/s
Iteration  18: 469820.729 ops/s
Iteration  19: 471105.284 ops/s
Iteration  20: 468673.397 ops/s
Iteration  21: 467683.001 ops/s
Iteration  22: 468701.667 ops/s
Iteration  23: 469476.470 ops/s
Iteration  24: 471828.175 ops/s
Iteration  25: 470433.673 ops/s
Iteration  26: 469484.750 ops/s
Iteration  27: 470622.580 ops/s
Iteration  28: 465597.019 ops/s
Iteration  29: 471085.426 ops/s
Iteration  30: 468683.673 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_detectWithOptional":
  469557.496 ±(99.9%) 1505.851 ops/s [Average]
  (min, avg, max) = (462550.989, 469557.496, 472621.089), stdev = 2253.888
  CI (99.9%): [468051.645, 471063.347] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_detectWithOptional  thrpt   30  469557.496 ± 1505.851  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_distinctView$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_distinctView

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6909527.209 ops/s
# Warmup Iteration   2: 12340310.738 ops/s
# Warmup Iteration   3: 13190917.350 ops/s
# Warmup Iteration   4: 13222888.066 ops/s
# Warmup Iteration   5: 12812431.450 ops/s
# Warmup Iteration   6: 11600017.141 ops/s
# Warmup Iteration   7: 13245981.076 ops/s
# Warmup Iteration   8: 13230199.262 ops/s
# Warmup Iteration   9: 13248029.185 ops/s
# Warmup Iteration  10: 13263074.767 ops/s
# Warmup Iteration  11: 13239905.747 ops/s
# Warmup Iteration  12: 13255387.477 ops/s
# Warmup Iteration  13: 13215647.897 ops/s
# Warmup Iteration  14: 13247184.659 ops/s
# Warmup Iteration  15: 13261086.380 ops/s
# Warmup Iteration  16: 13256569.886 ops/s
# Warmup Iteration  17: 13282171.193 ops/s
# Warmup Iteration  18: 13232404.266 ops/s
# Warmup Iteration  19: 13198873.131 ops/s
# Warmup Iteration  20: 13252019.451 ops/s
# Warmup Iteration  21: 13247878.020 ops/s
# Warmup Iteration  22: 13227911.519 ops/s
# Warmup Iteration  23: 13239098.332 ops/s
# Warmup Iteration  24: 13262506.479 ops/s
# Warmup Iteration  25: 13273258.118 ops/s
# Warmup Iteration  26: 13254587.813 ops/s
# Warmup Iteration  27: 13250807.803 ops/s
# Warmup Iteration  28: 13228937.645 ops/s
# Warmup Iteration  29: 13246298.633 ops/s
# Warmup Iteration  30: 13238330.231 ops/s
Iteration   1: 13265430.440 ops/s
Iteration   2: 13245761.076 ops/s
Iteration   3: 13226983.217 ops/s
Iteration   4: 13241825.737 ops/s
Iteration   5: 13256544.728 ops/s
Iteration   6: 13272194.918 ops/s
Iteration   7: 13250640.102 ops/s
Iteration   8: 13189898.747 ops/s
Iteration   9: 13272219.232 ops/s
Iteration  10: 13248401.274 ops/s
Iteration  11: 13284781.514 ops/s
Iteration  12: 13234200.234 ops/s
Iteration  13: 13260686.273 ops/s
Iteration  14: 13271994.964 ops/s
Iteration  15: 13251360.728 ops/s
Iteration  16: 13280975.545 ops/s
Iteration  17: 13247581.887 ops/s
Iteration  18: 13265411.831 ops/s
Iteration  19: 13232670.432 ops/s
Iteration  20: 13230681.796 ops/s
Iteration  21: 13267139.623 ops/s
Iteration  22: 13230860.584 ops/s
Iteration  23: 13258006.870 ops/s
Iteration  24: 13254207.792 ops/s
Iteration  25: 13262635.133 ops/s
Iteration  26: 13289467.044 ops/s
Iteration  27: 13246987.249 ops/s
Iteration  28: 13268089.705 ops/s
Iteration  29: 13237757.744 ops/s
Iteration  30: 13245220.540 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_distinctView":
  13253020.565 ±(99.9%) 13662.424 ops/s [Average]
  (min, avg, max) = (13189898.747, 13253020.565, 13289467.044), stdev = 20449.274
  CI (99.9%): [13239358.142, 13266682.989] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_distinctView  thrpt   30  13253020.565 ± 13662.424  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3299458.749 ops/s
# Warmup Iteration   2: 6245039.839 ops/s
# Warmup Iteration   3: 5305691.097 ops/s
# Warmup Iteration   4: 6314993.080 ops/s
# Warmup Iteration   5: 6312356.302 ops/s
# Warmup Iteration   6: 6291122.317 ops/s
# Warmup Iteration   7: 6317708.912 ops/s
# Warmup Iteration   8: 6297720.028 ops/s
# Warmup Iteration   9: 6317954.559 ops/s
# Warmup Iteration  10: 6311545.450 ops/s
# Warmup Iteration  11: 6311341.801 ops/s
# Warmup Iteration  12: 6322089.186 ops/s
# Warmup Iteration  13: 6308442.110 ops/s
# Warmup Iteration  14: 6304194.070 ops/s
# Warmup Iteration  15: 6297538.226 ops/s
# Warmup Iteration  16: 6307172.348 ops/s
# Warmup Iteration  17: 6298857.405 ops/s
# Warmup Iteration  18: 6301128.949 ops/s
# Warmup Iteration  19: 6309043.160 ops/s
# Warmup Iteration  20: 6322669.434 ops/s
# Warmup Iteration  21: 6301556.443 ops/s
# Warmup Iteration  22: 6318476.366 ops/s
# Warmup Iteration  23: 6308265.174 ops/s
# Warmup Iteration  24: 6318274.021 ops/s
# Warmup Iteration  25: 6312935.823 ops/s
# Warmup Iteration  26: 6320569.404 ops/s
# Warmup Iteration  27: 6310338.474 ops/s
# Warmup Iteration  28: 6312271.307 ops/s
# Warmup Iteration  29: 6296604.508 ops/s
# Warmup Iteration  30: 6298569.341 ops/s
Iteration   1: 6321002.669 ops/s
Iteration   2: 6328045.511 ops/s
Iteration   3: 6317979.476 ops/s
Iteration   4: 6328470.227 ops/s
Iteration   5: 6298925.341 ops/s
Iteration   6: 6303329.575 ops/s
Iteration   7: 6319472.263 ops/s
Iteration   8: 6300435.687 ops/s
Iteration   9: 6308627.200 ops/s
Iteration  10: 6322284.842 ops/s
Iteration  11: 6306823.155 ops/s
Iteration  12: 6292540.144 ops/s
Iteration  13: 6319855.679 ops/s
Iteration  14: 6316565.762 ops/s
Iteration  15: 6320285.741 ops/s
Iteration  16: 6310592.185 ops/s
Iteration  17: 6334196.728 ops/s
Iteration  18: 6313217.209 ops/s
Iteration  19: 6284864.744 ops/s
Iteration  20: 6299765.449 ops/s
Iteration  21: 6314807.809 ops/s
Iteration  22: 6310019.493 ops/s
Iteration  23: 6319164.168 ops/s
Iteration  24: 6274290.903 ops/s
Iteration  25: 6306168.677 ops/s
Iteration  26: 6276652.042 ops/s
Iteration  27: 6330483.694 ops/s
Iteration  28: 6303847.463 ops/s
Iteration  29: 6308394.961 ops/s
Iteration  30: 6318070.623 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_empty":
  6310305.981 ±(99.9%) 9829.941 ops/s [Average]
  (min, avg, max) = (6274290.903, 6310305.981, 6334196.728), stdev = 14712.994
  CI (99.9%): [6300476.039, 6320135.922] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_empty  thrpt   30  6310305.981 ± 9829.941  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_equalsAndHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_equalsAndHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 284259.436 ops/s
# Warmup Iteration   2: 540045.555 ops/s
# Warmup Iteration   3: 605643.705 ops/s
# Warmup Iteration   4: 609174.524 ops/s
# Warmup Iteration   5: 591796.601 ops/s
# Warmup Iteration   6: 523751.073 ops/s
# Warmup Iteration   7: 611035.419 ops/s
# Warmup Iteration   8: 607806.392 ops/s
# Warmup Iteration   9: 609320.042 ops/s
# Warmup Iteration  10: 608283.149 ops/s
# Warmup Iteration  11: 610047.135 ops/s
# Warmup Iteration  12: 607123.532 ops/s
# Warmup Iteration  13: 609197.953 ops/s
# Warmup Iteration  14: 610249.561 ops/s
# Warmup Iteration  15: 607547.142 ops/s
# Warmup Iteration  16: 609566.047 ops/s
# Warmup Iteration  17: 609031.201 ops/s
# Warmup Iteration  18: 607529.901 ops/s
# Warmup Iteration  19: 608395.583 ops/s
# Warmup Iteration  20: 608147.822 ops/s
# Warmup Iteration  21: 609577.675 ops/s
# Warmup Iteration  22: 607905.356 ops/s
# Warmup Iteration  23: 610445.349 ops/s
# Warmup Iteration  24: 608717.085 ops/s
# Warmup Iteration  25: 609925.360 ops/s
# Warmup Iteration  26: 609000.927 ops/s
# Warmup Iteration  27: 608314.078 ops/s
# Warmup Iteration  28: 609909.661 ops/s
# Warmup Iteration  29: 608879.960 ops/s
# Warmup Iteration  30: 609026.937 ops/s
Iteration   1: 609029.011 ops/s
Iteration   2: 609908.842 ops/s
Iteration   3: 610250.889 ops/s
Iteration   4: 608974.415 ops/s
Iteration   5: 611631.744 ops/s
Iteration   6: 608877.450 ops/s
Iteration   7: 609271.767 ops/s
Iteration   8: 609860.044 ops/s
Iteration   9: 611048.359 ops/s
Iteration  10: 611319.995 ops/s
Iteration  11: 608597.184 ops/s
Iteration  12: 607795.659 ops/s
Iteration  13: 609541.690 ops/s
Iteration  14: 608756.233 ops/s
Iteration  15: 609711.533 ops/s
Iteration  16: 608932.043 ops/s
Iteration  17: 609671.614 ops/s
Iteration  18: 610345.637 ops/s
Iteration  19: 609905.590 ops/s
Iteration  20: 609445.135 ops/s
Iteration  21: 609248.007 ops/s
Iteration  22: 606764.479 ops/s
Iteration  23: 610511.237 ops/s
Iteration  24: 608203.693 ops/s
Iteration  25: 609761.216 ops/s
Iteration  26: 607343.371 ops/s
Iteration  27: 608430.438 ops/s
Iteration  28: 608337.408 ops/s
Iteration  29: 607837.395 ops/s
Iteration  30: 610528.191 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_equalsAndHashCode":
  609328.009 ±(99.9%) 764.842 ops/s [Average]
  (min, avg, max) = (606764.479, 609328.009, 611631.744), stdev = 1144.780
  CI (99.9%): [608563.167, 610092.851] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score     Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_equalsAndHashCode  thrpt   30  609328.009 ± 764.842  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_flatCollect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_flatCollect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 380743.938 ops/s
# Warmup Iteration   2: 806254.747 ops/s
# Warmup Iteration   3: 891024.086 ops/s
# Warmup Iteration   4: 897286.071 ops/s
# Warmup Iteration   5: 747537.453 ops/s
# Warmup Iteration   6: 896583.227 ops/s
# Warmup Iteration   7: 898430.506 ops/s
# Warmup Iteration   8: 896210.981 ops/s
# Warmup Iteration   9: 899338.080 ops/s
# Warmup Iteration  10: 897911.804 ops/s
# Warmup Iteration  11: 899423.674 ops/s
# Warmup Iteration  12: 899155.784 ops/s
# Warmup Iteration  13: 893406.916 ops/s
# Warmup Iteration  14: 900978.134 ops/s
# Warmup Iteration  15: 891277.272 ops/s
# Warmup Iteration  16: 898824.902 ops/s
# Warmup Iteration  17: 899142.402 ops/s
# Warmup Iteration  18: 899355.165 ops/s
# Warmup Iteration  19: 895828.229 ops/s
# Warmup Iteration  20: 900367.656 ops/s
# Warmup Iteration  21: 898611.124 ops/s
# Warmup Iteration  22: 896152.645 ops/s
# Warmup Iteration  23: 897909.013 ops/s
# Warmup Iteration  24: 896799.339 ops/s
# Warmup Iteration  25: 898634.834 ops/s
# Warmup Iteration  26: 901179.264 ops/s
# Warmup Iteration  27: 896433.048 ops/s
# Warmup Iteration  28: 898364.791 ops/s
# Warmup Iteration  29: 899279.699 ops/s
# Warmup Iteration  30: 898293.901 ops/s
Iteration   1: 898228.511 ops/s
Iteration   2: 902563.028 ops/s
Iteration   3: 896474.922 ops/s
Iteration   4: 902816.331 ops/s
Iteration   5: 900653.691 ops/s
Iteration   6: 904960.628 ops/s
Iteration   7: 898435.717 ops/s
Iteration   8: 894294.939 ops/s
Iteration   9: 903363.956 ops/s
Iteration  10: 893889.162 ops/s
Iteration  11: 899523.385 ops/s
Iteration  12: 902758.615 ops/s
Iteration  13: 897766.546 ops/s
Iteration  14: 897956.018 ops/s
Iteration  15: 900411.398 ops/s
Iteration  16: 900458.770 ops/s
Iteration  17: 895717.756 ops/s
Iteration  18: 898036.066 ops/s
Iteration  19: 904287.587 ops/s
Iteration  20: 891692.292 ops/s
Iteration  21: 894932.292 ops/s
Iteration  22: 896689.124 ops/s
Iteration  23: 899162.673 ops/s
Iteration  24: 899810.941 ops/s
Iteration  25: 896023.865 ops/s
Iteration  26: 903494.397 ops/s
Iteration  27: 899665.695 ops/s
Iteration  28: 891882.555 ops/s
Iteration  29: 896955.938 ops/s
Iteration  30: 899192.263 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_flatCollect":
  898736.635 ±(99.9%) 2351.275 ops/s [Average]
  (min, avg, max) = (891692.292, 898736.635, 904960.628), stdev = 3519.278
  CI (99.9%): [896385.360, 901087.910] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_flatCollect  thrpt   30  898736.635 ± 2351.275  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_flatCollectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_flatCollectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1661208.571 ops/s
# Warmup Iteration   2: 4227600.701 ops/s
# Warmup Iteration   3: 4241541.589 ops/s
# Warmup Iteration   4: 3521310.682 ops/s
# Warmup Iteration   5: 4227789.051 ops/s
# Warmup Iteration   6: 4222436.293 ops/s
# Warmup Iteration   7: 4206344.030 ops/s
# Warmup Iteration   8: 4226521.406 ops/s
# Warmup Iteration   9: 4228410.076 ops/s
# Warmup Iteration  10: 4231160.493 ops/s
# Warmup Iteration  11: 4236217.468 ops/s
# Warmup Iteration  12: 4231545.146 ops/s
# Warmup Iteration  13: 4222819.381 ops/s
# Warmup Iteration  14: 4227663.215 ops/s
# Warmup Iteration  15: 4244117.255 ops/s
# Warmup Iteration  16: 4244192.960 ops/s
# Warmup Iteration  17: 4251325.110 ops/s
# Warmup Iteration  18: 4251402.641 ops/s
# Warmup Iteration  19: 4240608.580 ops/s
# Warmup Iteration  20: 4240719.129 ops/s
# Warmup Iteration  21: 4249111.315 ops/s
# Warmup Iteration  22: 4259989.076 ops/s
# Warmup Iteration  23: 4249376.840 ops/s
# Warmup Iteration  24: 4245567.360 ops/s
# Warmup Iteration  25: 4253435.792 ops/s
# Warmup Iteration  26: 4246932.924 ops/s
# Warmup Iteration  27: 4256009.428 ops/s
# Warmup Iteration  28: 4252825.050 ops/s
# Warmup Iteration  29: 4240130.097 ops/s
# Warmup Iteration  30: 4249320.712 ops/s
Iteration   1: 4245464.489 ops/s
Iteration   2: 4256839.395 ops/s
Iteration   3: 4249902.958 ops/s
Iteration   4: 4242771.060 ops/s
Iteration   5: 4258779.674 ops/s
Iteration   6: 4252443.027 ops/s
Iteration   7: 4235833.471 ops/s
Iteration   8: 4251685.320 ops/s
Iteration   9: 4250943.873 ops/s
Iteration  10: 4243431.634 ops/s
Iteration  11: 4234250.790 ops/s
Iteration  12: 4253354.364 ops/s
Iteration  13: 4246014.478 ops/s
Iteration  14: 4257965.028 ops/s
Iteration  15: 4259187.816 ops/s
Iteration  16: 4253456.112 ops/s
Iteration  17: 4206247.438 ops/s
Iteration  18: 4240608.265 ops/s
Iteration  19: 4253247.078 ops/s
Iteration  20: 4262466.475 ops/s
Iteration  21: 4246933.667 ops/s
Iteration  22: 4261079.443 ops/s
Iteration  23: 4239757.645 ops/s
Iteration  24: 4249723.113 ops/s
Iteration  25: 4239724.669 ops/s
Iteration  26: 4234321.090 ops/s
Iteration  27: 4262944.015 ops/s
Iteration  28: 4252848.347 ops/s
Iteration  29: 4248497.773 ops/s
Iteration  30: 4249707.605 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_flatCollectBoolean":
  4248014.337 ±(99.9%) 7548.567 ops/s [Average]
  (min, avg, max) = (4206247.438, 4248014.337, 4262944.015), stdev = 11298.340
  CI (99.9%): [4240465.771, 4255562.904] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_flatCollectBoolean  thrpt   30  4248014.337 ± 7548.567  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_flatCollectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_flatCollectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 688203.858 ops/s
# Warmup Iteration   2: 1152039.569 ops/s
# Warmup Iteration   3: 1344858.611 ops/s
# Warmup Iteration   4: 1355451.931 ops/s
# Warmup Iteration   5: 1349300.807 ops/s
# Warmup Iteration   6: 1200590.518 ops/s
# Warmup Iteration   7: 1274890.455 ops/s
# Warmup Iteration   8: 1352883.495 ops/s
# Warmup Iteration   9: 1354851.859 ops/s
# Warmup Iteration  10: 1353352.456 ops/s
# Warmup Iteration  11: 1353858.879 ops/s
# Warmup Iteration  12: 1352597.250 ops/s
# Warmup Iteration  13: 1353151.974 ops/s
# Warmup Iteration  14: 1354807.322 ops/s
# Warmup Iteration  15: 1353809.759 ops/s
# Warmup Iteration  16: 1352690.046 ops/s
# Warmup Iteration  17: 1355877.382 ops/s
# Warmup Iteration  18: 1355379.491 ops/s
# Warmup Iteration  19: 1354731.490 ops/s
# Warmup Iteration  20: 1351294.216 ops/s
# Warmup Iteration  21: 1355336.394 ops/s
# Warmup Iteration  22: 1353781.158 ops/s
# Warmup Iteration  23: 1346453.221 ops/s
# Warmup Iteration  24: 1355396.816 ops/s
# Warmup Iteration  25: 1356908.381 ops/s
# Warmup Iteration  26: 1355106.831 ops/s
# Warmup Iteration  27: 1354800.760 ops/s
# Warmup Iteration  28: 1356633.754 ops/s
# Warmup Iteration  29: 1357312.739 ops/s
# Warmup Iteration  30: 1355384.194 ops/s
Iteration   1: 1357727.188 ops/s
Iteration   2: 1355114.363 ops/s
Iteration   3: 1356502.057 ops/s
Iteration   4: 1357373.519 ops/s
Iteration   5: 1355888.267 ops/s
Iteration   6: 1357672.710 ops/s
Iteration   7: 1354818.051 ops/s
Iteration   8: 1354416.550 ops/s
Iteration   9: 1351220.320 ops/s
Iteration  10: 1353077.041 ops/s
Iteration  11: 1353215.390 ops/s
Iteration  12: 1359061.052 ops/s
Iteration  13: 1357358.785 ops/s
Iteration  14: 1353506.886 ops/s
Iteration  15: 1356476.773 ops/s
Iteration  16: 1350774.633 ops/s
Iteration  17: 1355764.132 ops/s
Iteration  18: 1357706.005 ops/s
Iteration  19: 1353442.489 ops/s
Iteration  20: 1355376.225 ops/s
Iteration  21: 1356458.756 ops/s
Iteration  22: 1355776.658 ops/s
Iteration  23: 1348493.060 ops/s
Iteration  24: 1349311.783 ops/s
Iteration  25: 1353487.539 ops/s
Iteration  26: 1353145.792 ops/s
Iteration  27: 1354104.172 ops/s
Iteration  28: 1355285.671 ops/s
Iteration  29: 1356353.212 ops/s
Iteration  30: 1358650.695 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_flatCollectByte":
  1354918.659 ±(99.9%) 1748.425 ops/s [Average]
  (min, avg, max) = (1348493.060, 1354918.659, 1359061.052), stdev = 2616.960
  CI (99.9%): [1353170.235, 1356667.084] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_flatCollectByte  thrpt   30  1354918.659 ± 1748.425  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_flatCollectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_flatCollectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 759227.744 ops/s
# Warmup Iteration   2: 1949737.107 ops/s
# Warmup Iteration   3: 1975065.686 ops/s
# Warmup Iteration   4: 1648677.357 ops/s
# Warmup Iteration   5: 1980003.579 ops/s
# Warmup Iteration   6: 1976631.023 ops/s
# Warmup Iteration   7: 1979114.700 ops/s
# Warmup Iteration   8: 1976990.193 ops/s
# Warmup Iteration   9: 1976596.809 ops/s
# Warmup Iteration  10: 1984319.933 ops/s
# Warmup Iteration  11: 1977669.479 ops/s
# Warmup Iteration  12: 1979898.502 ops/s
# Warmup Iteration  13: 1979746.072 ops/s
# Warmup Iteration  14: 1974802.439 ops/s
# Warmup Iteration  15: 1974965.603 ops/s
# Warmup Iteration  16: 1983388.458 ops/s
# Warmup Iteration  17: 1975208.739 ops/s
# Warmup Iteration  18: 1978543.400 ops/s
# Warmup Iteration  19: 1980502.083 ops/s
# Warmup Iteration  20: 1975142.120 ops/s
# Warmup Iteration  21: 1975891.543 ops/s
# Warmup Iteration  22: 1981142.757 ops/s
# Warmup Iteration  23: 1979811.448 ops/s
# Warmup Iteration  24: 1977382.752 ops/s
# Warmup Iteration  25: 1977059.489 ops/s
# Warmup Iteration  26: 1980406.120 ops/s
# Warmup Iteration  27: 1977454.234 ops/s
# Warmup Iteration  28: 1979395.355 ops/s
# Warmup Iteration  29: 1974965.562 ops/s
# Warmup Iteration  30: 1975146.795 ops/s
Iteration   1: 1977735.609 ops/s
Iteration   2: 1980045.463 ops/s
Iteration   3: 1979391.048 ops/s
Iteration   4: 1974341.020 ops/s
Iteration   5: 1974609.467 ops/s
Iteration   6: 1982258.101 ops/s
Iteration   7: 1974623.591 ops/s
Iteration   8: 1979804.935 ops/s
Iteration   9: 1979455.316 ops/s
Iteration  10: 1982217.065 ops/s
Iteration  11: 1976386.986 ops/s
Iteration  12: 1980752.283 ops/s
Iteration  13: 1979503.496 ops/s
Iteration  14: 1974598.960 ops/s
Iteration  15: 1975914.349 ops/s
Iteration  16: 1982902.135 ops/s
Iteration  17: 1971632.539 ops/s
Iteration  18: 1977029.051 ops/s
Iteration  19: 1983025.169 ops/s
Iteration  20: 1973557.877 ops/s
Iteration  21: 1977114.737 ops/s
Iteration  22: 1977733.329 ops/s
Iteration  23: 1978483.585 ops/s
Iteration  24: 1969597.209 ops/s
Iteration  25: 1980915.149 ops/s
Iteration  26: 1971322.113 ops/s
Iteration  27: 1984354.469 ops/s
Iteration  28: 1975674.632 ops/s
Iteration  29: 1980661.556 ops/s
Iteration  30: 1980255.865 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_flatCollectChar":
  1977863.237 ±(99.9%) 2496.174 ops/s [Average]
  (min, avg, max) = (1969597.209, 1977863.237, 1984354.469), stdev = 3736.157
  CI (99.9%): [1975367.062, 1980359.411] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_flatCollectChar  thrpt   30  1977863.237 ± 2496.174  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_flatCollectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_flatCollectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 395231.402 ops/s
# Warmup Iteration   2: 913015.609 ops/s
# Warmup Iteration   3: 948919.247 ops/s
# Warmup Iteration   4: 829877.844 ops/s
# Warmup Iteration   5: 910397.637 ops/s
# Warmup Iteration   6: 948941.597 ops/s
# Warmup Iteration   7: 945275.447 ops/s
# Warmup Iteration   8: 949085.023 ops/s
# Warmup Iteration   9: 946855.016 ops/s
# Warmup Iteration  10: 950657.046 ops/s
# Warmup Iteration  11: 949949.121 ops/s
# Warmup Iteration  12: 944830.462 ops/s
# Warmup Iteration  13: 949428.453 ops/s
# Warmup Iteration  14: 947351.462 ops/s
# Warmup Iteration  15: 947259.985 ops/s
# Warmup Iteration  16: 948305.287 ops/s
# Warmup Iteration  17: 950557.835 ops/s
# Warmup Iteration  18: 942798.666 ops/s
# Warmup Iteration  19: 949063.601 ops/s
# Warmup Iteration  20: 944980.075 ops/s
# Warmup Iteration  21: 949853.942 ops/s
# Warmup Iteration  22: 948042.254 ops/s
# Warmup Iteration  23: 949706.707 ops/s
# Warmup Iteration  24: 949856.849 ops/s
# Warmup Iteration  25: 948673.532 ops/s
# Warmup Iteration  26: 948391.546 ops/s
# Warmup Iteration  27: 948855.920 ops/s
# Warmup Iteration  28: 949095.755 ops/s
# Warmup Iteration  29: 946493.947 ops/s
# Warmup Iteration  30: 951376.378 ops/s
Iteration   1: 950094.138 ops/s
Iteration   2: 948072.189 ops/s
Iteration   3: 946490.559 ops/s
Iteration   4: 944154.253 ops/s
Iteration   5: 949911.686 ops/s
Iteration   6: 949861.843 ops/s
Iteration   7: 950280.421 ops/s
Iteration   8: 947735.089 ops/s
Iteration   9: 951307.993 ops/s
Iteration  10: 949479.360 ops/s
Iteration  11: 949359.907 ops/s
Iteration  12: 946303.789 ops/s
Iteration  13: 947107.510 ops/s
Iteration  14: 944714.202 ops/s
Iteration  15: 946590.251 ops/s
Iteration  16: 948908.779 ops/s
Iteration  17: 951493.913 ops/s
Iteration  18: 948087.654 ops/s
Iteration  19: 947221.119 ops/s
Iteration  20: 949013.315 ops/s
Iteration  21: 949086.750 ops/s
Iteration  22: 949622.650 ops/s
Iteration  23: 950346.634 ops/s
Iteration  24: 948354.987 ops/s
Iteration  25: 947709.040 ops/s
Iteration  26: 949553.145 ops/s
Iteration  27: 949855.591 ops/s
Iteration  28: 940130.128 ops/s
Iteration  29: 948687.513 ops/s
Iteration  30: 949734.239 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_flatCollectDouble":
  948308.955 ±(99.9%) 1558.992 ops/s [Average]
  (min, avg, max) = (940130.128, 948308.955, 951493.913), stdev = 2333.426
  CI (99.9%): [946749.963, 949867.947] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_flatCollectDouble  thrpt   30  948308.955 ± 1558.992  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_flatCollectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_flatCollectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 619703.142 ops/s
# Warmup Iteration   2: 1480608.352 ops/s
# Warmup Iteration   3: 1546028.443 ops/s
# Warmup Iteration   4: 1297345.523 ops/s
# Warmup Iteration   5: 1540813.801 ops/s
# Warmup Iteration   6: 1549244.322 ops/s
# Warmup Iteration   7: 1545057.898 ops/s
# Warmup Iteration   8: 1551291.465 ops/s
# Warmup Iteration   9: 1550712.573 ops/s
# Warmup Iteration  10: 1541851.551 ops/s
# Warmup Iteration  11: 1550830.271 ops/s
# Warmup Iteration  12: 1543255.471 ops/s
# Warmup Iteration  13: 1548067.867 ops/s
# Warmup Iteration  14: 1547630.344 ops/s
# Warmup Iteration  15: 1546655.508 ops/s
# Warmup Iteration  16: 1548582.618 ops/s
# Warmup Iteration  17: 1539890.323 ops/s
# Warmup Iteration  18: 1542993.388 ops/s
# Warmup Iteration  19: 1540484.985 ops/s
# Warmup Iteration  20: 1538240.841 ops/s
# Warmup Iteration  21: 1542683.073 ops/s
# Warmup Iteration  22: 1540477.798 ops/s
# Warmup Iteration  23: 1543133.752 ops/s
# Warmup Iteration  24: 1546016.497 ops/s
# Warmup Iteration  25: 1541853.151 ops/s
# Warmup Iteration  26: 1541388.877 ops/s
# Warmup Iteration  27: 1542152.477 ops/s
# Warmup Iteration  28: 1533245.986 ops/s
# Warmup Iteration  29: 1535600.443 ops/s
# Warmup Iteration  30: 1543795.400 ops/s
Iteration   1: 1541470.645 ops/s
Iteration   2: 1539499.625 ops/s
Iteration   3: 1547211.767 ops/s
Iteration   4: 1540652.073 ops/s
Iteration   5: 1544943.017 ops/s
Iteration   6: 1534484.926 ops/s
Iteration   7: 1525969.523 ops/s
Iteration   8: 1545025.046 ops/s
Iteration   9: 1544136.816 ops/s
Iteration  10: 1538415.465 ops/s
Iteration  11: 1540738.928 ops/s
Iteration  12: 1542060.842 ops/s
Iteration  13: 1544091.014 ops/s
Iteration  14: 1543301.428 ops/s
Iteration  15: 1541055.879 ops/s
Iteration  16: 1544396.580 ops/s
Iteration  17: 1544023.712 ops/s
Iteration  18: 1544929.015 ops/s
Iteration  19: 1543335.740 ops/s
Iteration  20: 1545738.445 ops/s
Iteration  21: 1544121.770 ops/s
Iteration  22: 1539922.388 ops/s
Iteration  23: 1540746.706 ops/s
Iteration  24: 1541362.415 ops/s
Iteration  25: 1537605.027 ops/s
Iteration  26: 1540264.307 ops/s
Iteration  27: 1542852.752 ops/s
Iteration  28: 1540876.557 ops/s
Iteration  29: 1540459.197 ops/s
Iteration  30: 1537713.656 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_flatCollectFloat":
  1541380.175 ±(99.9%) 2693.265 ops/s [Average]
  (min, avg, max) = (1525969.523, 1541380.175, 1547211.767), stdev = 4031.153
  CI (99.9%): [1538686.910, 1544073.441] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_flatCollectFloat  thrpt   30  1541380.175 ± 2693.265  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_flatCollectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_flatCollectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 779920.832 ops/s
# Warmup Iteration   2: 2151822.825 ops/s
# Warmup Iteration   3: 2155747.324 ops/s
# Warmup Iteration   4: 1795445.639 ops/s
# Warmup Iteration   5: 2168095.900 ops/s
# Warmup Iteration   6: 2164444.151 ops/s
# Warmup Iteration   7: 2158902.886 ops/s
# Warmup Iteration   8: 2166323.748 ops/s
# Warmup Iteration   9: 2159647.495 ops/s
# Warmup Iteration  10: 2166652.294 ops/s
# Warmup Iteration  11: 2170528.124 ops/s
# Warmup Iteration  12: 2165467.860 ops/s
# Warmup Iteration  13: 2163870.767 ops/s
# Warmup Iteration  14: 2164380.079 ops/s
# Warmup Iteration  15: 2163032.416 ops/s
# Warmup Iteration  16: 2165205.380 ops/s
# Warmup Iteration  17: 2159970.711 ops/s
# Warmup Iteration  18: 2158325.947 ops/s
# Warmup Iteration  19: 2166195.612 ops/s
# Warmup Iteration  20: 2164392.593 ops/s
# Warmup Iteration  21: 2169038.034 ops/s
# Warmup Iteration  22: 2166307.822 ops/s
# Warmup Iteration  23: 2164789.201 ops/s
# Warmup Iteration  24: 2162156.970 ops/s
# Warmup Iteration  25: 2169708.504 ops/s
# Warmup Iteration  26: 2157888.060 ops/s
# Warmup Iteration  27: 2168209.893 ops/s
# Warmup Iteration  28: 2171270.320 ops/s
# Warmup Iteration  29: 2165502.902 ops/s
# Warmup Iteration  30: 2159370.079 ops/s
Iteration   1: 2165519.931 ops/s
Iteration   2: 2171048.734 ops/s
Iteration   3: 2167217.791 ops/s
Iteration   4: 2170223.318 ops/s
Iteration   5: 2169430.146 ops/s
Iteration   6: 2171971.523 ops/s
Iteration   7: 2170330.641 ops/s
Iteration   8: 2171807.468 ops/s
Iteration   9: 2164027.276 ops/s
Iteration  10: 2162901.252 ops/s
Iteration  11: 2165137.769 ops/s
Iteration  12: 2168047.343 ops/s
Iteration  13: 2166389.715 ops/s
Iteration  14: 2167481.749 ops/s
Iteration  15: 2166249.197 ops/s
Iteration  16: 2169265.145 ops/s
Iteration  17: 2166779.519 ops/s
Iteration  18: 2171092.031 ops/s
Iteration  19: 2170426.677 ops/s
Iteration  20: 2158425.508 ops/s
Iteration  21: 2166440.068 ops/s
Iteration  22: 2168816.745 ops/s
Iteration  23: 2163599.515 ops/s
Iteration  24: 2168338.628 ops/s
Iteration  25: 2172254.973 ops/s
Iteration  26: 2172517.996 ops/s
Iteration  27: 2173844.581 ops/s
Iteration  28: 2145568.118 ops/s
Iteration  29: 2169215.804 ops/s
Iteration  30: 2165907.406 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_flatCollectInt":
  2167342.552 ±(99.9%) 3544.440 ops/s [Average]
  (min, avg, max) = (2145568.118, 2167342.552, 2173844.581), stdev = 5305.151
  CI (99.9%): [2163798.112, 2170886.992] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_flatCollectInt  thrpt   30  2167342.552 ± 3544.440  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_flatCollectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_flatCollectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 701464.081 ops/s
# Warmup Iteration   2: 1872394.560 ops/s
# Warmup Iteration   3: 1809869.476 ops/s
# Warmup Iteration   4: 1658144.511 ops/s
# Warmup Iteration   5: 1886230.607 ops/s
# Warmup Iteration   6: 1893638.814 ops/s
# Warmup Iteration   7: 1888772.482 ops/s
# Warmup Iteration   8: 1893684.379 ops/s
# Warmup Iteration   9: 1891578.962 ops/s
# Warmup Iteration  10: 1896187.124 ops/s
# Warmup Iteration  11: 1890735.635 ops/s
# Warmup Iteration  12: 1890135.182 ops/s
# Warmup Iteration  13: 1890487.258 ops/s
# Warmup Iteration  14: 1888151.228 ops/s
# Warmup Iteration  15: 1893976.142 ops/s
# Warmup Iteration  16: 1894827.108 ops/s
# Warmup Iteration  17: 1888797.895 ops/s
# Warmup Iteration  18: 1893319.687 ops/s
# Warmup Iteration  19: 1892955.377 ops/s
# Warmup Iteration  20: 1891622.688 ops/s
# Warmup Iteration  21: 1888914.933 ops/s
# Warmup Iteration  22: 1886098.925 ops/s
# Warmup Iteration  23: 1888253.362 ops/s
# Warmup Iteration  24: 1888610.396 ops/s
# Warmup Iteration  25: 1895010.836 ops/s
# Warmup Iteration  26: 1889127.163 ops/s
# Warmup Iteration  27: 1893138.813 ops/s
# Warmup Iteration  28: 1893209.751 ops/s
# Warmup Iteration  29: 1890415.463 ops/s
# Warmup Iteration  30: 1891297.232 ops/s
Iteration   1: 1888655.754 ops/s
Iteration   2: 1891741.952 ops/s
Iteration   3: 1886209.997 ops/s
Iteration   4: 1881325.195 ops/s
Iteration   5: 1883109.245 ops/s
Iteration   6: 1874051.204 ops/s
Iteration   7: 1885193.528 ops/s
Iteration   8: 1896149.132 ops/s
Iteration   9: 1892647.711 ops/s
Iteration  10: 1894679.632 ops/s
Iteration  11: 1893611.194 ops/s
Iteration  12: 1893713.698 ops/s
Iteration  13: 1884126.458 ops/s
Iteration  14: 1879468.011 ops/s
Iteration  15: 1892420.367 ops/s
Iteration  16: 1893771.613 ops/s
Iteration  17: 1896589.905 ops/s
Iteration  18: 1890418.632 ops/s
Iteration  19: 1892425.557 ops/s
Iteration  20: 1887927.391 ops/s
Iteration  21: 1891372.574 ops/s
Iteration  22: 1891556.238 ops/s
Iteration  23: 1883612.717 ops/s
Iteration  24: 1896289.866 ops/s
Iteration  25: 1886323.565 ops/s
Iteration  26: 1885882.621 ops/s
Iteration  27: 1889020.717 ops/s
Iteration  28: 1894046.817 ops/s
Iteration  29: 1887944.281 ops/s
Iteration  30: 1872249.969 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_flatCollectLong":
  1888551.185 ±(99.9%) 4153.939 ops/s [Average]
  (min, avg, max) = (1872249.969, 1888551.185, 1896589.905), stdev = 6217.422
  CI (99.9%): [1884397.245, 1892705.124] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_flatCollectLong  thrpt   30  1888551.185 ± 4153.939  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_flatCollectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_flatCollectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 832242.351 ops/s
# Warmup Iteration   2: 2241985.676 ops/s
# Warmup Iteration   3: 2300441.542 ops/s
# Warmup Iteration   4: 1908918.657 ops/s
# Warmup Iteration   5: 2308161.806 ops/s
# Warmup Iteration   6: 2303192.519 ops/s
# Warmup Iteration   7: 2304279.459 ops/s
# Warmup Iteration   8: 2307647.566 ops/s
# Warmup Iteration   9: 2310204.157 ops/s
# Warmup Iteration  10: 2304118.945 ops/s
# Warmup Iteration  11: 2294867.659 ops/s
# Warmup Iteration  12: 2300420.227 ops/s
# Warmup Iteration  13: 2301400.801 ops/s
# Warmup Iteration  14: 2308880.838 ops/s
# Warmup Iteration  15: 2311329.195 ops/s
# Warmup Iteration  16: 2306297.123 ops/s
# Warmup Iteration  17: 2306286.624 ops/s
# Warmup Iteration  18: 2309411.421 ops/s
# Warmup Iteration  19: 2303610.304 ops/s
# Warmup Iteration  20: 2303282.724 ops/s
# Warmup Iteration  21: 2297657.700 ops/s
# Warmup Iteration  22: 2306163.237 ops/s
# Warmup Iteration  23: 2292003.546 ops/s
# Warmup Iteration  24: 2291535.044 ops/s
# Warmup Iteration  25: 2296581.017 ops/s
# Warmup Iteration  26: 2303913.944 ops/s
# Warmup Iteration  27: 2308849.300 ops/s
# Warmup Iteration  28: 2303026.540 ops/s
# Warmup Iteration  29: 2307530.070 ops/s
# Warmup Iteration  30: 2308765.807 ops/s
Iteration   1: 2308219.269 ops/s
Iteration   2: 2304507.809 ops/s
Iteration   3: 2305216.110 ops/s
Iteration   4: 2307993.194 ops/s
Iteration   5: 2310554.141 ops/s
Iteration   6: 2313424.650 ops/s
Iteration   7: 2311324.892 ops/s
Iteration   8: 2311156.993 ops/s
Iteration   9: 2302492.790 ops/s
Iteration  10: 2302009.698 ops/s
Iteration  11: 2303309.551 ops/s
Iteration  12: 2307493.205 ops/s
Iteration  13: 2304432.152 ops/s
Iteration  14: 2308151.764 ops/s
Iteration  15: 2301788.675 ops/s
Iteration  16: 2309191.432 ops/s
Iteration  17: 2305090.778 ops/s
Iteration  18: 2307354.941 ops/s
Iteration  19: 2305747.530 ops/s
Iteration  20: 2307602.172 ops/s
Iteration  21: 2309724.688 ops/s
Iteration  22: 2306639.077 ops/s
Iteration  23: 2309475.777 ops/s
Iteration  24: 2311308.041 ops/s
Iteration  25: 2304389.923 ops/s
Iteration  26: 2296570.441 ops/s
Iteration  27: 2303747.158 ops/s
Iteration  28: 2305109.292 ops/s
Iteration  29: 2304832.116 ops/s
Iteration  30: 2308609.900 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_flatCollectShort":
  2306582.272 ±(99.9%) 2387.952 ops/s [Average]
  (min, avg, max) = (2296570.441, 2306582.272, 2313424.650), stdev = 3574.174
  CI (99.9%): [2304194.320, 2308970.224] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_flatCollectShort  thrpt   30  2306582.272 ± 2387.952  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_flatCollectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_flatCollectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 167774.325 ops/s
# Warmup Iteration   2: 325462.880 ops/s
# Warmup Iteration   3: 370355.083 ops/s
# Warmup Iteration   4: 370640.937 ops/s
# Warmup Iteration   5: 325247.510 ops/s
# Warmup Iteration   6: 350694.584 ops/s
# Warmup Iteration   7: 369616.867 ops/s
# Warmup Iteration   8: 370657.046 ops/s
# Warmup Iteration   9: 370370.752 ops/s
# Warmup Iteration  10: 369873.937 ops/s
# Warmup Iteration  11: 370640.583 ops/s
# Warmup Iteration  12: 370699.991 ops/s
# Warmup Iteration  13: 369198.624 ops/s
# Warmup Iteration  14: 370090.360 ops/s
# Warmup Iteration  15: 370228.290 ops/s
# Warmup Iteration  16: 370599.162 ops/s
# Warmup Iteration  17: 369848.678 ops/s
# Warmup Iteration  18: 369831.551 ops/s
# Warmup Iteration  19: 370977.798 ops/s
# Warmup Iteration  20: 370206.728 ops/s
# Warmup Iteration  21: 368910.040 ops/s
# Warmup Iteration  22: 370885.345 ops/s
# Warmup Iteration  23: 370520.389 ops/s
# Warmup Iteration  24: 370637.122 ops/s
# Warmup Iteration  25: 370217.632 ops/s
# Warmup Iteration  26: 370494.997 ops/s
# Warmup Iteration  27: 370695.411 ops/s
# Warmup Iteration  28: 369962.627 ops/s
# Warmup Iteration  29: 371065.781 ops/s
# Warmup Iteration  30: 370026.039 ops/s
Iteration   1: 370942.316 ops/s
Iteration   2: 370462.329 ops/s
Iteration   3: 371322.965 ops/s
Iteration   4: 370050.768 ops/s
Iteration   5: 370459.049 ops/s
Iteration   6: 370267.499 ops/s
Iteration   7: 370311.456 ops/s
Iteration   8: 370582.922 ops/s
Iteration   9: 370565.626 ops/s
Iteration  10: 368892.319 ops/s
Iteration  11: 371649.821 ops/s
Iteration  12: 370721.276 ops/s
Iteration  13: 370486.394 ops/s
Iteration  14: 370897.694 ops/s
Iteration  15: 370728.717 ops/s
Iteration  16: 371596.176 ops/s
Iteration  17: 370413.136 ops/s
Iteration  18: 370833.038 ops/s
Iteration  19: 371453.632 ops/s
Iteration  20: 368355.658 ops/s
Iteration  21: 370706.985 ops/s
Iteration  22: 371807.687 ops/s
Iteration  23: 370274.461 ops/s
Iteration  24: 368811.578 ops/s
Iteration  25: 370846.656 ops/s
Iteration  26: 369767.626 ops/s
Iteration  27: 371332.294 ops/s
Iteration  28: 369753.961 ops/s
Iteration  29: 370355.853 ops/s
Iteration  30: 370563.255 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_flatCollectWith":
  370507.105 ±(99.9%) 537.309 ops/s [Average]
  (min, avg, max) = (368355.658, 370507.105, 371807.687), stdev = 804.219
  CI (99.9%): [369969.796, 371044.414] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score     Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_flatCollectWith  thrpt   30  370507.105 ± 537.309  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_flatCollectWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_flatCollectWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 20616446.812 ops/s
# Warmup Iteration   2: 37553485.569 ops/s
# Warmup Iteration   3: 43802847.934 ops/s
# Warmup Iteration   4: 43576704.499 ops/s
# Warmup Iteration   5: 43631152.104 ops/s
# Warmup Iteration   6: 43592758.848 ops/s
# Warmup Iteration   7: 43768435.095 ops/s
# Warmup Iteration   8: 43671425.223 ops/s
# Warmup Iteration   9: 43295486.987 ops/s
# Warmup Iteration  10: 43748714.277 ops/s
# Warmup Iteration  11: 43510145.097 ops/s
# Warmup Iteration  12: 43687561.751 ops/s
# Warmup Iteration  13: 43620063.371 ops/s
# Warmup Iteration  14: 43718923.196 ops/s
# Warmup Iteration  15: 43488538.880 ops/s
# Warmup Iteration  16: 43531792.186 ops/s
# Warmup Iteration  17: 43485887.966 ops/s
# Warmup Iteration  18: 43448854.811 ops/s
# Warmup Iteration  19: 43613810.972 ops/s
# Warmup Iteration  20: 43451060.251 ops/s
# Warmup Iteration  21: 43484948.368 ops/s
# Warmup Iteration  22: 43414958.703 ops/s
# Warmup Iteration  23: 43393213.843 ops/s
# Warmup Iteration  24: 43492831.607 ops/s
# Warmup Iteration  25: 43347697.150 ops/s
# Warmup Iteration  26: 43578758.337 ops/s
# Warmup Iteration  27: 43518579.882 ops/s
# Warmup Iteration  28: 43639620.689 ops/s
# Warmup Iteration  29: 43521988.298 ops/s
# Warmup Iteration  30: 43565562.368 ops/s
Iteration   1: 43590639.944 ops/s
Iteration   2: 43580663.476 ops/s
Iteration   3: 43526209.623 ops/s
Iteration   4: 43367820.143 ops/s
Iteration   5: 43454247.328 ops/s
Iteration   6: 43369341.440 ops/s
Iteration   7: 43533974.184 ops/s
Iteration   8: 43655814.105 ops/s
Iteration   9: 43883647.995 ops/s
Iteration  10: 43511576.282 ops/s
Iteration  11: 43653545.033 ops/s
Iteration  12: 43592826.590 ops/s
Iteration  13: 43453354.274 ops/s
Iteration  14: 43590323.086 ops/s
Iteration  15: 43246508.116 ops/s
Iteration  16: 43313595.580 ops/s
Iteration  17: 43551928.595 ops/s
Iteration  18: 43712225.604 ops/s
Iteration  19: 43852782.642 ops/s
Iteration  20: 43692796.176 ops/s
Iteration  21: 43582157.858 ops/s
Iteration  22: 43723831.286 ops/s
Iteration  23: 43401703.034 ops/s
Iteration  24: 43730322.287 ops/s
Iteration  25: 43518591.365 ops/s
Iteration  26: 43615824.729 ops/s
Iteration  27: 43650014.336 ops/s
Iteration  28: 43696953.981 ops/s
Iteration  29: 43443514.935 ops/s
Iteration  30: 43560767.982 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_flatCollectWithTarget":
  43568583.400 ±(99.9%) 98948.059 ops/s [Average]
  (min, avg, max) = (43246508.116, 43568583.400, 43883647.995), stdev = 148100.808
  CI (99.9%): [43469635.341, 43667531.460] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_flatCollectWithTarget  thrpt   30  43568583.400 ± 98948.059  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 580644.279 ops/s
# Warmup Iteration   2: 1313077.923 ops/s
# Warmup Iteration   3: 1411472.491 ops/s
# Warmup Iteration   4: 1407207.666 ops/s
# Warmup Iteration   5: 1159941.600 ops/s
# Warmup Iteration   6: 1414614.202 ops/s
# Warmup Iteration   7: 1411218.980 ops/s
# Warmup Iteration   8: 1409274.048 ops/s
# Warmup Iteration   9: 1412847.326 ops/s
# Warmup Iteration  10: 1410559.735 ops/s
# Warmup Iteration  11: 1409578.018 ops/s
# Warmup Iteration  12: 1414372.661 ops/s
# Warmup Iteration  13: 1415059.089 ops/s
# Warmup Iteration  14: 1416221.405 ops/s
# Warmup Iteration  15: 1414588.200 ops/s
# Warmup Iteration  16: 1416479.016 ops/s
# Warmup Iteration  17: 1414349.849 ops/s
# Warmup Iteration  18: 1415088.357 ops/s
# Warmup Iteration  19: 1415926.594 ops/s
# Warmup Iteration  20: 1414364.159 ops/s
# Warmup Iteration  21: 1414788.617 ops/s
# Warmup Iteration  22: 1413094.446 ops/s
# Warmup Iteration  23: 1412269.494 ops/s
# Warmup Iteration  24: 1414557.492 ops/s
# Warmup Iteration  25: 1414704.690 ops/s
# Warmup Iteration  26: 1414541.840 ops/s
# Warmup Iteration  27: 1415075.252 ops/s
# Warmup Iteration  28: 1411600.647 ops/s
# Warmup Iteration  29: 1414710.463 ops/s
# Warmup Iteration  30: 1416152.988 ops/s
Iteration   1: 1415224.412 ops/s
Iteration   2: 1409436.463 ops/s
Iteration   3: 1416772.418 ops/s
Iteration   4: 1414647.611 ops/s
Iteration   5: 1416063.637 ops/s
Iteration   6: 1415105.604 ops/s
Iteration   7: 1415072.067 ops/s
Iteration   8: 1418127.051 ops/s
Iteration   9: 1414404.351 ops/s
Iteration  10: 1417904.452 ops/s
Iteration  11: 1416004.150 ops/s
Iteration  12: 1416129.745 ops/s
Iteration  13: 1413579.284 ops/s
Iteration  14: 1410463.675 ops/s
Iteration  15: 1414731.195 ops/s
Iteration  16: 1414199.340 ops/s
Iteration  17: 1410297.505 ops/s
Iteration  18: 1416211.866 ops/s
Iteration  19: 1413076.826 ops/s
Iteration  20: 1415847.281 ops/s
Iteration  21: 1412703.943 ops/s
Iteration  22: 1409710.111 ops/s
Iteration  23: 1411973.876 ops/s
Iteration  24: 1416833.294 ops/s
Iteration  25: 1415300.189 ops/s
Iteration  26: 1413165.240 ops/s
Iteration  27: 1411166.517 ops/s
Iteration  28: 1411512.273 ops/s
Iteration  29: 1413538.844 ops/s
Iteration  30: 1415156.804 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_forEach":
  1414145.334 ±(99.9%) 1588.398 ops/s [Average]
  (min, avg, max) = (1409436.463, 1414145.334, 1418127.051), stdev = 2377.439
  CI (99.9%): [1412556.936, 1415733.732] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_forEach  thrpt   30  1414145.334 ± 1588.398  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_forEachWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_forEachWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1140686.285 ops/s
# Warmup Iteration   2: 2869798.411 ops/s
# Warmup Iteration   3: 2930602.906 ops/s
# Warmup Iteration   4: 2431519.189 ops/s
# Warmup Iteration   5: 2938908.608 ops/s
# Warmup Iteration   6: 2945040.476 ops/s
# Warmup Iteration   7: 2946668.271 ops/s
# Warmup Iteration   8: 2936437.568 ops/s
# Warmup Iteration   9: 2938540.400 ops/s
# Warmup Iteration  10: 2935028.303 ops/s
# Warmup Iteration  11: 2945194.057 ops/s
# Warmup Iteration  12: 2938365.815 ops/s
# Warmup Iteration  13: 2936843.735 ops/s
# Warmup Iteration  14: 2941550.930 ops/s
# Warmup Iteration  15: 2939378.922 ops/s
# Warmup Iteration  16: 2937431.612 ops/s
# Warmup Iteration  17: 2940886.302 ops/s
# Warmup Iteration  18: 2939021.338 ops/s
# Warmup Iteration  19: 2929776.931 ops/s
# Warmup Iteration  20: 2937107.796 ops/s
# Warmup Iteration  21: 2935558.735 ops/s
# Warmup Iteration  22: 2941996.188 ops/s
# Warmup Iteration  23: 2931408.794 ops/s
# Warmup Iteration  24: 2926844.956 ops/s
# Warmup Iteration  25: 2937026.185 ops/s
# Warmup Iteration  26: 2936147.892 ops/s
# Warmup Iteration  27: 2939350.843 ops/s
# Warmup Iteration  28: 2940450.681 ops/s
# Warmup Iteration  29: 2941844.595 ops/s
# Warmup Iteration  30: 2933187.980 ops/s
Iteration   1: 2938770.905 ops/s
Iteration   2: 2933269.661 ops/s
Iteration   3: 2936961.858 ops/s
Iteration   4: 2939648.663 ops/s
Iteration   5: 2930988.360 ops/s
Iteration   6: 2940596.907 ops/s
Iteration   7: 2940313.906 ops/s
Iteration   8: 2934900.118 ops/s
Iteration   9: 2936802.988 ops/s
Iteration  10: 2939229.829 ops/s
Iteration  11: 2939773.782 ops/s
Iteration  12: 2944443.949 ops/s
Iteration  13: 2938924.833 ops/s
Iteration  14: 2940575.955 ops/s
Iteration  15: 2934831.872 ops/s
Iteration  16: 2936311.513 ops/s
Iteration  17: 2937937.528 ops/s
Iteration  18: 2940999.408 ops/s
Iteration  19: 2946950.646 ops/s
Iteration  20: 2942191.674 ops/s
Iteration  21: 2941409.058 ops/s
Iteration  22: 2938614.276 ops/s
Iteration  23: 2928937.363 ops/s
Iteration  24: 2927231.373 ops/s
Iteration  25: 2938799.993 ops/s
Iteration  26: 2948320.005 ops/s
Iteration  27: 2943066.383 ops/s
Iteration  28: 2947100.864 ops/s
Iteration  29: 2932466.473 ops/s
Iteration  30: 2936844.570 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_forEachWith":
  2938573.824 ±(99.9%) 3329.310 ops/s [Average]
  (min, avg, max) = (2927231.373, 2938573.824, 2948320.005), stdev = 4983.155
  CI (99.9%): [2935244.514, 2941903.134] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_forEachWith  thrpt   30  2938573.824 ± 3329.310  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_forEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_forEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 446711.861 ops/s
# Warmup Iteration   2: 818631.994 ops/s
# Warmup Iteration   3: 932050.956 ops/s
# Warmup Iteration   4: 935836.349 ops/s
# Warmup Iteration   5: 936281.589 ops/s
# Warmup Iteration   6: 774554.876 ops/s
# Warmup Iteration   7: 941589.905 ops/s
# Warmup Iteration   8: 941015.672 ops/s
# Warmup Iteration   9: 938332.080 ops/s
# Warmup Iteration  10: 942418.226 ops/s
# Warmup Iteration  11: 942515.962 ops/s
# Warmup Iteration  12: 939501.900 ops/s
# Warmup Iteration  13: 941498.977 ops/s
# Warmup Iteration  14: 939263.209 ops/s
# Warmup Iteration  15: 940960.842 ops/s
# Warmup Iteration  16: 941915.541 ops/s
# Warmup Iteration  17: 941230.256 ops/s
# Warmup Iteration  18: 939532.531 ops/s
# Warmup Iteration  19: 939017.401 ops/s
# Warmup Iteration  20: 938330.529 ops/s
# Warmup Iteration  21: 935407.679 ops/s
# Warmup Iteration  22: 939974.961 ops/s
# Warmup Iteration  23: 941522.959 ops/s
# Warmup Iteration  24: 940078.306 ops/s
# Warmup Iteration  25: 935428.950 ops/s
# Warmup Iteration  26: 941914.244 ops/s
# Warmup Iteration  27: 940753.142 ops/s
# Warmup Iteration  28: 941014.346 ops/s
# Warmup Iteration  29: 942762.609 ops/s
# Warmup Iteration  30: 941667.162 ops/s
Iteration   1: 938049.838 ops/s
Iteration   2: 936942.639 ops/s
Iteration   3: 941818.218 ops/s
Iteration   4: 939498.137 ops/s
Iteration   5: 941974.827 ops/s
Iteration   6: 940491.027 ops/s
Iteration   7: 940322.270 ops/s
Iteration   8: 944367.018 ops/s
Iteration   9: 936693.582 ops/s
Iteration  10: 943078.545 ops/s
Iteration  11: 939465.854 ops/s
Iteration  12: 940466.651 ops/s
Iteration  13: 940448.754 ops/s
Iteration  14: 940168.420 ops/s
Iteration  15: 938627.737 ops/s
Iteration  16: 942366.946 ops/s
Iteration  17: 940346.570 ops/s
Iteration  18: 935095.567 ops/s
Iteration  19: 941903.521 ops/s
Iteration  20: 944117.046 ops/s
Iteration  21: 940802.041 ops/s
Iteration  22: 941530.773 ops/s
Iteration  23: 938350.781 ops/s
Iteration  24: 932439.600 ops/s
Iteration  25: 942785.050 ops/s
Iteration  26: 939047.137 ops/s
Iteration  27: 936326.891 ops/s
Iteration  28: 940774.002 ops/s
Iteration  29: 941716.348 ops/s
Iteration  30: 942868.082 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_forEachWithIndex":
  940096.129 ±(99.9%) 1797.516 ops/s [Average]
  (min, avg, max) = (932439.600, 940096.129, 944367.018), stdev = 2690.438
  CI (99.9%): [938298.613, 941893.645] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_forEachWithIndex  thrpt   30  940096.129 ± 1797.516  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_forLoop$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_forLoop

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 151051642.256 ops/s
# Warmup Iteration   2: 302998082.715 ops/s
# Warmup Iteration   3: 266393970.396 ops/s
# Warmup Iteration   4: 309336114.286 ops/s
# Warmup Iteration   5: 310717814.604 ops/s
# Warmup Iteration   6: 310798606.019 ops/s
# Warmup Iteration   7: 308675839.436 ops/s
# Warmup Iteration   8: 309789879.570 ops/s
# Warmup Iteration   9: 309461908.817 ops/s
# Warmup Iteration  10: 309017297.178 ops/s
# Warmup Iteration  11: 309021122.319 ops/s
# Warmup Iteration  12: 309571178.608 ops/s
# Warmup Iteration  13: 310617508.243 ops/s
# Warmup Iteration  14: 308354689.972 ops/s
# Warmup Iteration  15: 309919974.460 ops/s
# Warmup Iteration  16: 308995652.633 ops/s
# Warmup Iteration  17: 307175329.873 ops/s
# Warmup Iteration  18: 296223617.142 ops/s
# Warmup Iteration  19: 307873728.780 ops/s
# Warmup Iteration  20: 308045113.517 ops/s
# Warmup Iteration  21: 307352057.538 ops/s
# Warmup Iteration  22: 306185451.202 ops/s
# Warmup Iteration  23: 295258479.985 ops/s
# Warmup Iteration  24: 307505492.796 ops/s
# Warmup Iteration  25: 308385334.149 ops/s
# Warmup Iteration  26: 308291670.322 ops/s
# Warmup Iteration  27: 308680805.027 ops/s
# Warmup Iteration  28: 308408665.286 ops/s
# Warmup Iteration  29: 307917115.493 ops/s
# Warmup Iteration  30: 307737738.071 ops/s
Iteration   1: 307840339.160 ops/s
Iteration   2: 306489942.616 ops/s
Iteration   3: 308766028.812 ops/s
Iteration   4: 307149081.233 ops/s
Iteration   5: 307692056.074 ops/s
Iteration   6: 308810883.402 ops/s
Iteration   7: 306646601.946 ops/s
Iteration   8: 307474253.174 ops/s
Iteration   9: 306116455.438 ops/s
Iteration  10: 308869051.891 ops/s
Iteration  11: 308758161.647 ops/s
Iteration  12: 306653975.063 ops/s
Iteration  13: 297703047.946 ops/s
Iteration  14: 308316187.629 ops/s
Iteration  15: 302059700.610 ops/s
Iteration  16: 306729671.653 ops/s
Iteration  17: 308227078.741 ops/s
Iteration  18: 307483949.298 ops/s
Iteration  19: 308313911.476 ops/s
Iteration  20: 309062127.802 ops/s
Iteration  21: 308849587.172 ops/s
Iteration  22: 309351575.127 ops/s
Iteration  23: 305637198.999 ops/s
Iteration  24: 305996779.038 ops/s
Iteration  25: 306780565.098 ops/s
Iteration  26: 308397938.781 ops/s
Iteration  27: 306456612.369 ops/s
Iteration  28: 307583625.602 ops/s
Iteration  29: 299743918.298 ops/s
Iteration  30: 305833759.091 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_forLoop":
  306793135.506 ±(99.9%) 1768723.356 ops/s [Average]
  (min, avg, max) = (297703047.946, 306793135.506, 309351575.127), stdev = 2647342.054
  CI (99.9%): [305024412.150, 308561858.862] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt          Score         Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_forLoop  thrpt   30  306793135.506 ± 1768723.356  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_fusedCollectMakeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_fusedCollectMakeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 894751.035 ops/s
# Warmup Iteration   2: 2152852.388 ops/s
# Warmup Iteration   3: 2220795.781 ops/s
# Warmup Iteration   4: 1844240.719 ops/s
# Warmup Iteration   5: 2215711.650 ops/s
# Warmup Iteration   6: 2225163.124 ops/s
# Warmup Iteration   7: 2226467.084 ops/s
# Warmup Iteration   8: 2222958.294 ops/s
# Warmup Iteration   9: 2221120.772 ops/s
# Warmup Iteration  10: 2219146.756 ops/s
# Warmup Iteration  11: 2227818.742 ops/s
# Warmup Iteration  12: 2209200.270 ops/s
# Warmup Iteration  13: 2214539.129 ops/s
# Warmup Iteration  14: 2225002.598 ops/s
# Warmup Iteration  15: 2227152.386 ops/s
# Warmup Iteration  16: 2229255.563 ops/s
# Warmup Iteration  17: 2225009.193 ops/s
# Warmup Iteration  18: 2223138.171 ops/s
# Warmup Iteration  19: 2224074.177 ops/s
# Warmup Iteration  20: 2227138.963 ops/s
# Warmup Iteration  21: 2225496.809 ops/s
# Warmup Iteration  22: 2219533.379 ops/s
# Warmup Iteration  23: 2223378.574 ops/s
# Warmup Iteration  24: 2220628.525 ops/s
# Warmup Iteration  25: 2231650.019 ops/s
# Warmup Iteration  26: 2231790.886 ops/s
# Warmup Iteration  27: 2223924.399 ops/s
# Warmup Iteration  28: 2224833.807 ops/s
# Warmup Iteration  29: 2223695.537 ops/s
# Warmup Iteration  30: 2224345.523 ops/s
Iteration   1: 2224284.495 ops/s
Iteration   2: 2215591.839 ops/s
Iteration   3: 2226913.329 ops/s
Iteration   4: 2220848.483 ops/s
Iteration   5: 2222705.147 ops/s
Iteration   6: 2227136.527 ops/s
Iteration   7: 2225831.058 ops/s
Iteration   8: 2210546.064 ops/s
Iteration   9: 2223760.177 ops/s
Iteration  10: 2232444.430 ops/s
Iteration  11: 2228023.133 ops/s
Iteration  12: 2224610.722 ops/s
Iteration  13: 2216529.191 ops/s
Iteration  14: 2222915.476 ops/s
Iteration  15: 2213974.712 ops/s
Iteration  16: 2227853.715 ops/s
Iteration  17: 2222360.908 ops/s
Iteration  18: 2228057.154 ops/s
Iteration  19: 2222579.310 ops/s
Iteration  20: 2218270.502 ops/s
Iteration  21: 2226106.683 ops/s
Iteration  22: 2216678.905 ops/s
Iteration  23: 2223727.291 ops/s
Iteration  24: 2217968.249 ops/s
Iteration  25: 2229051.130 ops/s
Iteration  26: 2226939.207 ops/s
Iteration  27: 2230194.052 ops/s
Iteration  28: 2224002.178 ops/s
Iteration  29: 2225870.741 ops/s
Iteration  30: 2222153.688 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_fusedCollectMakeString":
  2223264.283 ±(99.9%) 3413.535 ops/s [Average]
  (min, avg, max) = (2210546.064, 2223264.283, 2232444.430), stdev = 5109.219
  CI (99.9%): [2219850.748, 2226677.818] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_fusedCollectMakeString  thrpt   30  2223264.283 ± 3413.535  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_getAny$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_getAny

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1346003.710 ops/s
# Warmup Iteration   2: 2540230.533 ops/s
# Warmup Iteration   3: 2816080.386 ops/s
# Warmup Iteration   4: 2831448.762 ops/s
# Warmup Iteration   5: 2455555.682 ops/s
# Warmup Iteration   6: 2694596.387 ops/s
# Warmup Iteration   7: 2831867.483 ops/s
# Warmup Iteration   8: 2828973.108 ops/s
# Warmup Iteration   9: 2837617.562 ops/s
# Warmup Iteration  10: 2828815.297 ops/s
# Warmup Iteration  11: 2823795.089 ops/s
# Warmup Iteration  12: 2837610.271 ops/s
# Warmup Iteration  13: 2824291.201 ops/s
# Warmup Iteration  14: 2832876.533 ops/s
# Warmup Iteration  15: 2832858.488 ops/s
# Warmup Iteration  16: 2833208.153 ops/s
# Warmup Iteration  17: 2832862.146 ops/s
# Warmup Iteration  18: 2835417.669 ops/s
# Warmup Iteration  19: 2836327.769 ops/s
# Warmup Iteration  20: 2835976.746 ops/s
# Warmup Iteration  21: 2834366.387 ops/s
# Warmup Iteration  22: 2838298.051 ops/s
# Warmup Iteration  23: 2837249.200 ops/s
# Warmup Iteration  24: 2834933.106 ops/s
# Warmup Iteration  25: 2834252.834 ops/s
# Warmup Iteration  26: 2837692.047 ops/s
# Warmup Iteration  27: 2838690.055 ops/s
# Warmup Iteration  28: 2830268.958 ops/s
# Warmup Iteration  29: 2834397.341 ops/s
# Warmup Iteration  30: 2825606.410 ops/s
Iteration   1: 2834833.362 ops/s
Iteration   2: 2834352.219 ops/s
Iteration   3: 2836262.164 ops/s
Iteration   4: 2824234.994 ops/s
Iteration   5: 2842366.129 ops/s
Iteration   6: 2835403.809 ops/s
Iteration   7: 2834078.563 ops/s
Iteration   8: 2840545.479 ops/s
Iteration   9: 2831409.488 ops/s
Iteration  10: 2843692.695 ops/s
Iteration  11: 2818354.165 ops/s
Iteration  12: 2839379.428 ops/s
Iteration  13: 2839687.328 ops/s
Iteration  14: 2835781.983 ops/s
Iteration  15: 2839177.704 ops/s
Iteration  16: 2842161.164 ops/s
Iteration  17: 2831330.105 ops/s
Iteration  18: 2832071.807 ops/s
Iteration  19: 2836364.551 ops/s
Iteration  20: 2834960.562 ops/s
Iteration  21: 2834395.705 ops/s
Iteration  22: 2835319.318 ops/s
Iteration  23: 2831905.322 ops/s
Iteration  24: 2842098.663 ops/s
Iteration  25: 2837285.768 ops/s
Iteration  26: 2827583.890 ops/s
Iteration  27: 2845256.767 ops/s
Iteration  28: 2835079.893 ops/s
Iteration  29: 2836103.981 ops/s
Iteration  30: 2840346.492 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_getAny":
  2835727.450 ±(99.9%) 3811.226 ops/s [Average]
  (min, avg, max) = (2818354.165, 2835727.450, 2845256.767), stdev = 5704.465
  CI (99.9%): [2831916.224, 2839538.676] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_getAny  thrpt   30  2835727.450 ± 3811.226  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_getFirst$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_getFirst

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 154141252.109 ops/s
# Warmup Iteration   2: 303303704.201 ops/s
# Warmup Iteration   3: 264632243.737 ops/s
# Warmup Iteration   4: 308592899.166 ops/s
# Warmup Iteration   5: 309117190.427 ops/s
# Warmup Iteration   6: 307577589.998 ops/s
# Warmup Iteration   7: 308972008.682 ops/s
# Warmup Iteration   8: 308869196.847 ops/s
# Warmup Iteration   9: 308364266.786 ops/s
# Warmup Iteration  10: 308974828.679 ops/s
# Warmup Iteration  11: 309154078.502 ops/s
# Warmup Iteration  12: 307885704.367 ops/s
# Warmup Iteration  13: 307847764.665 ops/s
# Warmup Iteration  14: 309135407.181 ops/s
# Warmup Iteration  15: 309022738.373 ops/s
# Warmup Iteration  16: 309077603.533 ops/s
# Warmup Iteration  17: 309229824.708 ops/s
# Warmup Iteration  18: 308972154.075 ops/s
# Warmup Iteration  19: 309439324.213 ops/s
# Warmup Iteration  20: 309449226.263 ops/s
# Warmup Iteration  21: 308801985.348 ops/s
# Warmup Iteration  22: 309500870.671 ops/s
# Warmup Iteration  23: 308406024.269 ops/s
# Warmup Iteration  24: 308750054.547 ops/s
# Warmup Iteration  25: 308050045.261 ops/s
# Warmup Iteration  26: 308873388.463 ops/s
# Warmup Iteration  27: 309525163.634 ops/s
# Warmup Iteration  28: 308749892.885 ops/s
# Warmup Iteration  29: 309174475.507 ops/s
# Warmup Iteration  30: 309486681.085 ops/s
Iteration   1: 309526046.823 ops/s
Iteration   2: 307984017.075 ops/s
Iteration   3: 309954681.835 ops/s
Iteration   4: 308554892.909 ops/s
Iteration   5: 307888938.563 ops/s
Iteration   6: 310352116.971 ops/s
Iteration   7: 307723234.819 ops/s
Iteration   8: 309724811.502 ops/s
Iteration   9: 309004603.474 ops/s
Iteration  10: 309535941.799 ops/s
Iteration  11: 309428660.647 ops/s
Iteration  12: 308885483.077 ops/s
Iteration  13: 309291854.241 ops/s
Iteration  14: 308507497.815 ops/s
Iteration  15: 308200658.073 ops/s
Iteration  16: 307602151.659 ops/s
Iteration  17: 308336245.647 ops/s
Iteration  18: 308772862.559 ops/s
Iteration  19: 307897505.968 ops/s
Iteration  20: 309626920.566 ops/s
Iteration  21: 309163086.220 ops/s
Iteration  22: 308735057.442 ops/s
Iteration  23: 310172910.434 ops/s
Iteration  24: 308225323.462 ops/s
Iteration  25: 306699322.063 ops/s
Iteration  26: 309527370.518 ops/s
Iteration  27: 310044312.037 ops/s
Iteration  28: 309343327.428 ops/s
Iteration  29: 308133021.083 ops/s
Iteration  30: 309178299.411 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_getFirst":
  308867371.871 ±(99.9%) 585217.940 ops/s [Average]
  (min, avg, max) = (306699322.063, 308867371.871, 310352116.971), stdev = 875926.728
  CI (99.9%): [308282153.931, 309452589.810] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt          Score        Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_getFirst  thrpt   30  308867371.871 ± 585217.940  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_getLast$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_getLast

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 152841565.774 ops/s
# Warmup Iteration   2: 304708153.393 ops/s
# Warmup Iteration   3: 266746073.730 ops/s
# Warmup Iteration   4: 311980645.640 ops/s
# Warmup Iteration   5: 312571600.867 ops/s
# Warmup Iteration   6: 312569267.900 ops/s
# Warmup Iteration   7: 311991166.954 ops/s
# Warmup Iteration   8: 311837706.168 ops/s
# Warmup Iteration   9: 312042673.461 ops/s
# Warmup Iteration  10: 311239364.795 ops/s
# Warmup Iteration  11: 312210350.497 ops/s
# Warmup Iteration  12: 311211458.892 ops/s
# Warmup Iteration  13: 311950567.621 ops/s
# Warmup Iteration  14: 311602542.240 ops/s
# Warmup Iteration  15: 311926890.268 ops/s
# Warmup Iteration  16: 310762913.460 ops/s
# Warmup Iteration  17: 310556546.513 ops/s
# Warmup Iteration  18: 310989519.619 ops/s
# Warmup Iteration  19: 311190367.367 ops/s
# Warmup Iteration  20: 311704981.503 ops/s
# Warmup Iteration  21: 310845344.532 ops/s
# Warmup Iteration  22: 312883463.178 ops/s
# Warmup Iteration  23: 311043207.424 ops/s
# Warmup Iteration  24: 311674700.014 ops/s
# Warmup Iteration  25: 311740023.620 ops/s
# Warmup Iteration  26: 307219927.452 ops/s
# Warmup Iteration  27: 312356902.665 ops/s
# Warmup Iteration  28: 311289589.234 ops/s
# Warmup Iteration  29: 312365194.624 ops/s
# Warmup Iteration  30: 311048995.640 ops/s
Iteration   1: 310193101.815 ops/s
Iteration   2: 311030006.111 ops/s
Iteration   3: 311712524.118 ops/s
Iteration   4: 311567814.150 ops/s
Iteration   5: 310679051.586 ops/s
Iteration   6: 310784897.808 ops/s
Iteration   7: 311833813.144 ops/s
Iteration   8: 312528584.772 ops/s
Iteration   9: 311981177.017 ops/s
Iteration  10: 310215445.335 ops/s
Iteration  11: 312270053.677 ops/s
Iteration  12: 311676209.883 ops/s
Iteration  13: 311898363.776 ops/s
Iteration  14: 311309957.212 ops/s
Iteration  15: 312263274.813 ops/s
Iteration  16: 312397196.713 ops/s
Iteration  17: 311191583.886 ops/s
Iteration  18: 312773101.372 ops/s
Iteration  19: 310566809.432 ops/s
Iteration  20: 310258985.419 ops/s
Iteration  21: 312858616.234 ops/s
Iteration  22: 310313508.838 ops/s
Iteration  23: 311604027.441 ops/s
Iteration  24: 311896467.024 ops/s
Iteration  25: 310686522.847 ops/s
Iteration  26: 311720860.154 ops/s
Iteration  27: 310937155.141 ops/s
Iteration  28: 311823739.476 ops/s
Iteration  29: 311291170.372 ops/s
Iteration  30: 310487734.016 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_getLast":
  311425058.453 ±(99.9%) 526391.445 ops/s [Average]
  (min, avg, max) = (310193101.815, 311425058.453, 312858616.234), stdev = 787877.993
  CI (99.9%): [310898667.008, 311951449.898] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt          Score        Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_getLast  thrpt   30  311425058.453 ± 526391.445  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_getOnly$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_getOnly

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 750211.965 ops/s
# Warmup Iteration   2: 807077.644 ops/s
# Warmup Iteration   3: 984367.141 ops/s
# Warmup Iteration   4: 1028277.582 ops/s
# Warmup Iteration   5: 1026567.409 ops/s
# Warmup Iteration   6: 1021596.651 ops/s
# Warmup Iteration   7: 1025308.420 ops/s
# Warmup Iteration   8: 1024850.383 ops/s
# Warmup Iteration   9: 1027435.054 ops/s
# Warmup Iteration  10: 1027871.784 ops/s
# Warmup Iteration  11: 1029013.207 ops/s
# Warmup Iteration  12: 1025981.620 ops/s
# Warmup Iteration  13: 875042.126 ops/s
# Warmup Iteration  14: 1027855.770 ops/s
# Warmup Iteration  15: 1026343.406 ops/s
# Warmup Iteration  16: 1024070.857 ops/s
# Warmup Iteration  17: 1088009.075 ops/s
# Warmup Iteration  18: 1093568.056 ops/s
# Warmup Iteration  19: 1092591.180 ops/s
# Warmup Iteration  20: 1090345.085 ops/s
# Warmup Iteration  21: 1096855.935 ops/s
# Warmup Iteration  22: 1092402.135 ops/s
# Warmup Iteration  23: 1092925.189 ops/s
# Warmup Iteration  24: 1090741.348 ops/s
# Warmup Iteration  25: 1091876.450 ops/s
# Warmup Iteration  26: 1092452.442 ops/s
# Warmup Iteration  27: 1094486.056 ops/s
# Warmup Iteration  28: 1090467.118 ops/s
# Warmup Iteration  29: 1096405.688 ops/s
# Warmup Iteration  30: 1088939.431 ops/s
Iteration   1: 1091886.863 ops/s
Iteration   2: 1096212.863 ops/s
Iteration   3: 1087892.820 ops/s
Iteration   4: 1091166.239 ops/s
Iteration   5: 1091666.847 ops/s
Iteration   6: 1093173.866 ops/s
Iteration   7: 1088441.159 ops/s
Iteration   8: 1086787.476 ops/s
Iteration   9: 1096556.269 ops/s
Iteration  10: 1094205.350 ops/s
Iteration  11: 1096536.364 ops/s
Iteration  12: 1091272.841 ops/s
Iteration  13: 1085760.318 ops/s
Iteration  14: 1092373.996 ops/s
Iteration  15: 1095457.936 ops/s
Iteration  16: 1096127.600 ops/s
Iteration  17: 1090888.407 ops/s
Iteration  18: 1094593.153 ops/s
Iteration  19: 1094387.023 ops/s
Iteration  20: 1095733.404 ops/s
Iteration  21: 1092593.173 ops/s
Iteration  22: 1094893.234 ops/s
Iteration  23: 1091105.323 ops/s
Iteration  24: 1090967.955 ops/s
Iteration  25: 1088107.819 ops/s
Iteration  26: 1089720.344 ops/s
Iteration  27: 1092143.845 ops/s
Iteration  28: 1097373.878 ops/s
Iteration  29: 1093542.474 ops/s
Iteration  30: 1095179.115 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_getOnly":
  1092558.265 ±(99.9%) 2083.465 ops/s [Average]
  (min, avg, max) = (1085760.318, 1092558.265, 1097373.878), stdev = 3118.433
  CI (99.9%): [1090474.800, 1094641.730] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_getOnly  thrpt   30  1092558.265 ± 2083.465  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_getOnly_empty_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_getOnly_empty_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 687464.178 ops/s
# Warmup Iteration   2: 762689.983 ops/s
# Warmup Iteration   3: 972677.442 ops/s
# Warmup Iteration   4: 965120.798 ops/s
# Warmup Iteration   5: 961003.067 ops/s
# Warmup Iteration   6: 968135.102 ops/s
# Warmup Iteration   7: 966255.349 ops/s
# Warmup Iteration   8: 964638.198 ops/s
# Warmup Iteration   9: 970206.137 ops/s
# Warmup Iteration  10: 971269.554 ops/s
# Warmup Iteration  11: 817565.113 ops/s
# Warmup Iteration  12: 967424.752 ops/s
# Warmup Iteration  13: 969379.309 ops/s
# Warmup Iteration  14: 970163.292 ops/s
# Warmup Iteration  15: 967291.882 ops/s
# Warmup Iteration  16: 966488.780 ops/s
# Warmup Iteration  17: 1022865.768 ops/s
# Warmup Iteration  18: 1027260.949 ops/s
# Warmup Iteration  19: 1027711.221 ops/s
# Warmup Iteration  20: 1026168.244 ops/s
# Warmup Iteration  21: 1022599.004 ops/s
# Warmup Iteration  22: 1028549.783 ops/s
# Warmup Iteration  23: 1026261.862 ops/s
# Warmup Iteration  24: 1028552.072 ops/s
# Warmup Iteration  25: 1022309.040 ops/s
# Warmup Iteration  26: 1029315.800 ops/s
# Warmup Iteration  27: 1008976.101 ops/s
# Warmup Iteration  28: 1025610.070 ops/s
# Warmup Iteration  29: 1022204.141 ops/s
# Warmup Iteration  30: 1028505.377 ops/s
Iteration   1: 1014838.903 ops/s
Iteration   2: 1030186.353 ops/s
Iteration   3: 1027569.083 ops/s
Iteration   4: 1028439.470 ops/s
Iteration   5: 1029877.758 ops/s
Iteration   6: 1027609.471 ops/s
Iteration   7: 1025729.936 ops/s
Iteration   8: 1025870.625 ops/s
Iteration   9: 1028013.168 ops/s
Iteration  10: 1020321.308 ops/s
Iteration  11: 1024516.195 ops/s
Iteration  12: 1028865.724 ops/s
Iteration  13: 1028700.171 ops/s
Iteration  14: 1030692.184 ops/s
Iteration  15: 1026898.113 ops/s
Iteration  16: 1029878.315 ops/s
Iteration  17: 1028702.281 ops/s
Iteration  18: 1024595.853 ops/s
Iteration  19: 1026353.935 ops/s
Iteration  20: 1025274.426 ops/s
Iteration  21: 1029122.864 ops/s
Iteration  22: 1028027.298 ops/s
Iteration  23: 1027150.191 ops/s
Iteration  24: 1025211.227 ops/s
Iteration  25: 1025462.141 ops/s
Iteration  26: 1028513.303 ops/s
Iteration  27: 1026868.615 ops/s
Iteration  28: 1025146.319 ops/s
Iteration  29: 1027675.868 ops/s
Iteration  30: 1030544.020 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_getOnly_empty_throws":
  1026888.504 ±(99.9%) 2126.162 ops/s [Average]
  (min, avg, max) = (1014838.903, 1026888.504, 1030692.184), stdev = 3182.340
  CI (99.9%): [1024762.341, 1029014.666] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_getOnly_empty_throws  thrpt   30  1026888.504 ± 2126.162  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_getOnly_not_only_one_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_getOnly_not_only_one_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 623796.169 ops/s
# Warmup Iteration   2: 694356.994 ops/s
# Warmup Iteration   3: 911628.472 ops/s
# Warmup Iteration   4: 908902.670 ops/s
# Warmup Iteration   5: 904913.340 ops/s
# Warmup Iteration   6: 908204.605 ops/s
# Warmup Iteration   7: 902238.563 ops/s
# Warmup Iteration   8: 906587.465 ops/s
# Warmup Iteration   9: 906670.626 ops/s
# Warmup Iteration  10: 865672.970 ops/s
# Warmup Iteration  11: 803441.095 ops/s
# Warmup Iteration  12: 910826.674 ops/s
# Warmup Iteration  13: 910516.595 ops/s
# Warmup Iteration  14: 909546.071 ops/s
# Warmup Iteration  15: 908211.557 ops/s
# Warmup Iteration  16: 909484.176 ops/s
# Warmup Iteration  17: 960019.158 ops/s
# Warmup Iteration  18: 960900.335 ops/s
# Warmup Iteration  19: 962824.383 ops/s
# Warmup Iteration  20: 958562.271 ops/s
# Warmup Iteration  21: 962503.253 ops/s
# Warmup Iteration  22: 961920.341 ops/s
# Warmup Iteration  23: 958922.891 ops/s
# Warmup Iteration  24: 959545.512 ops/s
# Warmup Iteration  25: 961566.464 ops/s
# Warmup Iteration  26: 958406.744 ops/s
# Warmup Iteration  27: 962208.496 ops/s
# Warmup Iteration  28: 957238.544 ops/s
# Warmup Iteration  29: 960192.536 ops/s
# Warmup Iteration  30: 961649.553 ops/s
Iteration   1: 961304.989 ops/s
Iteration   2: 960407.735 ops/s
Iteration   3: 958176.833 ops/s
Iteration   4: 957291.340 ops/s
Iteration   5: 960560.364 ops/s
Iteration   6: 956380.004 ops/s
Iteration   7: 963001.079 ops/s
Iteration   8: 963655.747 ops/s
Iteration   9: 958977.589 ops/s
Iteration  10: 959639.729 ops/s
Iteration  11: 961023.615 ops/s
Iteration  12: 955029.165 ops/s
Iteration  13: 964325.758 ops/s
Iteration  14: 964004.255 ops/s
Iteration  15: 958536.398 ops/s
Iteration  16: 961878.909 ops/s
Iteration  17: 961558.161 ops/s
Iteration  18: 964087.230 ops/s
Iteration  19: 960824.448 ops/s
Iteration  20: 963872.320 ops/s
Iteration  21: 963241.734 ops/s
Iteration  22: 957398.799 ops/s
Iteration  23: 958903.432 ops/s
Iteration  24: 962767.554 ops/s
Iteration  25: 961451.462 ops/s
Iteration  26: 959974.881 ops/s
Iteration  27: 963820.502 ops/s
Iteration  28: 966432.441 ops/s
Iteration  29: 962728.157 ops/s
Iteration  30: 961159.104 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_getOnly_not_only_one_throws":
  961080.458 ±(99.9%) 1791.273 ops/s [Average]
  (min, avg, max) = (955029.165, 961080.458, 966432.441), stdev = 2681.093
  CI (99.9%): [959289.185, 962871.731] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_getOnly_not_only_one_throws  thrpt   30  961080.458 ± 1791.273  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_groupBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_groupBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 104928.332 ops/s
# Warmup Iteration   2: 165117.108 ops/s
# Warmup Iteration   3: 210456.172 ops/s
# Warmup Iteration   4: 209427.958 ops/s
# Warmup Iteration   5: 210050.866 ops/s
# Warmup Iteration   6: 209931.303 ops/s
# Warmup Iteration   7: 187106.837 ops/s
# Warmup Iteration   8: 197750.086 ops/s
# Warmup Iteration   9: 210645.822 ops/s
# Warmup Iteration  10: 209775.598 ops/s
# Warmup Iteration  11: 209894.767 ops/s
# Warmup Iteration  12: 210381.279 ops/s
# Warmup Iteration  13: 210515.295 ops/s
# Warmup Iteration  14: 210493.157 ops/s
# Warmup Iteration  15: 210267.791 ops/s
# Warmup Iteration  16: 210185.344 ops/s
# Warmup Iteration  17: 210330.700 ops/s
# Warmup Iteration  18: 210812.155 ops/s
# Warmup Iteration  19: 210784.357 ops/s
# Warmup Iteration  20: 210264.792 ops/s
# Warmup Iteration  21: 210462.611 ops/s
# Warmup Iteration  22: 210500.277 ops/s
# Warmup Iteration  23: 210264.209 ops/s
# Warmup Iteration  24: 210234.003 ops/s
# Warmup Iteration  25: 210627.267 ops/s
# Warmup Iteration  26: 210553.847 ops/s
# Warmup Iteration  27: 210878.766 ops/s
# Warmup Iteration  28: 211028.729 ops/s
# Warmup Iteration  29: 211112.954 ops/s
# Warmup Iteration  30: 210813.113 ops/s
Iteration   1: 210643.221 ops/s
Iteration   2: 210974.970 ops/s
Iteration   3: 209197.606 ops/s
Iteration   4: 210821.790 ops/s
Iteration   5: 210105.189 ops/s
Iteration   6: 210854.178 ops/s
Iteration   7: 210965.823 ops/s
Iteration   8: 210162.103 ops/s
Iteration   9: 210953.566 ops/s
Iteration  10: 210184.474 ops/s
Iteration  11: 210515.886 ops/s
Iteration  12: 210174.240 ops/s
Iteration  13: 211185.724 ops/s
Iteration  14: 211300.901 ops/s
Iteration  15: 208862.627 ops/s
Iteration  16: 210365.088 ops/s
Iteration  17: 210679.616 ops/s
Iteration  18: 210358.531 ops/s
Iteration  19: 211173.134 ops/s
Iteration  20: 210869.052 ops/s
Iteration  21: 211132.882 ops/s
Iteration  22: 210841.313 ops/s
Iteration  23: 211226.345 ops/s
Iteration  24: 210301.222 ops/s
Iteration  25: 210831.586 ops/s
Iteration  26: 210784.153 ops/s
Iteration  27: 210209.957 ops/s
Iteration  28: 210846.512 ops/s
Iteration  29: 210447.517 ops/s
Iteration  30: 210891.163 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_groupBy":
  210595.346 ±(99.9%) 369.801 ops/s [Average]
  (min, avg, max) = (208862.627, 210595.346, 211300.901), stdev = 553.500
  CI (99.9%): [210225.545, 210965.146] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score     Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_groupBy  thrpt   30  210595.346 ± 369.801  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_groupByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_groupByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 31608.395 ops/s
# Warmup Iteration   2: 45265.932 ops/s
# Warmup Iteration   3: 60141.516 ops/s
# Warmup Iteration   4: 60106.096 ops/s
# Warmup Iteration   5: 60324.166 ops/s
# Warmup Iteration   6: 60389.393 ops/s
# Warmup Iteration   7: 60376.849 ops/s
# Warmup Iteration   8: 53018.078 ops/s
# Warmup Iteration   9: 57103.465 ops/s
# Warmup Iteration  10: 60287.646 ops/s
# Warmup Iteration  11: 60400.214 ops/s
# Warmup Iteration  12: 60357.668 ops/s
# Warmup Iteration  13: 60302.039 ops/s
# Warmup Iteration  14: 60469.272 ops/s
# Warmup Iteration  15: 60359.725 ops/s
# Warmup Iteration  16: 60481.502 ops/s
# Warmup Iteration  17: 60319.933 ops/s
# Warmup Iteration  18: 60513.602 ops/s
# Warmup Iteration  19: 60453.247 ops/s
# Warmup Iteration  20: 60499.661 ops/s
# Warmup Iteration  21: 60380.849 ops/s
# Warmup Iteration  22: 60390.244 ops/s
# Warmup Iteration  23: 60515.922 ops/s
# Warmup Iteration  24: 60383.762 ops/s
# Warmup Iteration  25: 60349.741 ops/s
# Warmup Iteration  26: 60255.387 ops/s
# Warmup Iteration  27: 60470.287 ops/s
# Warmup Iteration  28: 60561.501 ops/s
# Warmup Iteration  29: 60494.089 ops/s
# Warmup Iteration  30: 60309.775 ops/s
Iteration   1: 60386.133 ops/s
Iteration   2: 60420.002 ops/s
Iteration   3: 60493.645 ops/s
Iteration   4: 60588.942 ops/s
Iteration   5: 60351.725 ops/s
Iteration   6: 60502.548 ops/s
Iteration   7: 60297.865 ops/s
Iteration   8: 60367.290 ops/s
Iteration   9: 60607.142 ops/s
Iteration  10: 60328.077 ops/s
Iteration  11: 60438.971 ops/s
Iteration  12: 60468.268 ops/s
Iteration  13: 60433.704 ops/s
Iteration  14: 60530.277 ops/s
Iteration  15: 60463.993 ops/s
Iteration  16: 60581.120 ops/s
Iteration  17: 60698.096 ops/s
Iteration  18: 60507.206 ops/s
Iteration  19: 60271.646 ops/s
Iteration  20: 60394.026 ops/s
Iteration  21: 60391.295 ops/s
Iteration  22: 60645.511 ops/s
Iteration  23: 60482.186 ops/s
Iteration  24: 60524.514 ops/s
Iteration  25: 60550.344 ops/s
Iteration  26: 60470.802 ops/s
Iteration  27: 60435.317 ops/s
Iteration  28: 60357.463 ops/s
Iteration  29: 60246.385 ops/s
Iteration  30: 60506.526 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_groupByEach":
  60458.034 ±(99.9%) 72.632 ops/s [Average]
  (min, avg, max) = (60246.385, 60458.034, 60698.096), stdev = 108.712
  CI (99.9%): [60385.402, 60530.666] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt      Score    Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_groupByEach  thrpt   30  60458.034 ± 72.632  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_groupByUniqueKey$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_groupByUniqueKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 16224471.948 ops/s
# Warmup Iteration   2: 30435714.251 ops/s
# Warmup Iteration   3: 35897728.823 ops/s
# Warmup Iteration   4: 35895743.572 ops/s
# Warmup Iteration   5: 35941304.552 ops/s
# Warmup Iteration   6: 35701323.073 ops/s
# Warmup Iteration   7: 36078716.881 ops/s
# Warmup Iteration   8: 36056314.381 ops/s
# Warmup Iteration   9: 36019686.121 ops/s
# Warmup Iteration  10: 36189095.230 ops/s
# Warmup Iteration  11: 35910676.282 ops/s
# Warmup Iteration  12: 36004266.549 ops/s
# Warmup Iteration  13: 36143555.541 ops/s
# Warmup Iteration  14: 35872401.651 ops/s
# Warmup Iteration  15: 35965588.851 ops/s
# Warmup Iteration  16: 35815818.030 ops/s
# Warmup Iteration  17: 36028171.026 ops/s
# Warmup Iteration  18: 36109667.134 ops/s
# Warmup Iteration  19: 35927026.110 ops/s
# Warmup Iteration  20: 36069589.117 ops/s
# Warmup Iteration  21: 35702314.677 ops/s
# Warmup Iteration  22: 35942263.083 ops/s
# Warmup Iteration  23: 35913332.230 ops/s
# Warmup Iteration  24: 35926991.849 ops/s
# Warmup Iteration  25: 36070378.167 ops/s
# Warmup Iteration  26: 35835289.209 ops/s
# Warmup Iteration  27: 36051998.118 ops/s
# Warmup Iteration  28: 36073649.857 ops/s
# Warmup Iteration  29: 36040287.624 ops/s
# Warmup Iteration  30: 35919620.332 ops/s
Iteration   1: 35943427.133 ops/s
Iteration   2: 36190834.870 ops/s
Iteration   3: 36016587.897 ops/s
Iteration   4: 36114177.333 ops/s
Iteration   5: 36231272.382 ops/s
Iteration   6: 35909756.338 ops/s
Iteration   7: 36011017.096 ops/s
Iteration   8: 35823503.878 ops/s
Iteration   9: 35794255.635 ops/s
Iteration  10: 36078792.681 ops/s
Iteration  11: 35758775.979 ops/s
Iteration  12: 35643929.414 ops/s
Iteration  13: 35990252.933 ops/s
Iteration  14: 35874111.828 ops/s
Iteration  15: 35986217.123 ops/s
Iteration  16: 35842549.787 ops/s
Iteration  17: 35891968.931 ops/s
Iteration  18: 36083029.095 ops/s
Iteration  19: 35959831.613 ops/s
Iteration  20: 35945402.707 ops/s
Iteration  21: 36000787.638 ops/s
Iteration  22: 36250782.326 ops/s
Iteration  23: 35836171.306 ops/s
Iteration  24: 36177985.498 ops/s
Iteration  25: 36033086.466 ops/s
Iteration  26: 36044403.144 ops/s
Iteration  27: 35862245.021 ops/s
Iteration  28: 36086649.603 ops/s
Iteration  29: 35875127.715 ops/s
Iteration  30: 36005859.491 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_groupByUniqueKey":
  35975426.429 ±(99.9%) 95450.072 ops/s [Average]
  (min, avg, max) = (35643929.414, 35975426.429, 36250782.326), stdev = 142865.185
  CI (99.9%): [35879976.357, 36070876.501] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_groupByUniqueKey  thrpt   30  35975426.429 ± 95450.072  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_groupByUniqueKey_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_groupByUniqueKey_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7436681.765 ops/s
# Warmup Iteration   2: 13764101.261 ops/s
# Warmup Iteration   3: 16816998.367 ops/s
# Warmup Iteration   4: 16750489.245 ops/s
# Warmup Iteration   5: 16736369.395 ops/s
# Warmup Iteration   6: 16836168.978 ops/s
# Warmup Iteration   7: 16803136.686 ops/s
# Warmup Iteration   8: 16811748.053 ops/s
# Warmup Iteration   9: 16772492.870 ops/s
# Warmup Iteration  10: 16787770.112 ops/s
# Warmup Iteration  11: 16790719.164 ops/s
# Warmup Iteration  12: 16795031.200 ops/s
# Warmup Iteration  13: 16788975.073 ops/s
# Warmup Iteration  14: 16726834.934 ops/s
# Warmup Iteration  15: 16748973.790 ops/s
# Warmup Iteration  16: 16745699.605 ops/s
# Warmup Iteration  17: 16680279.157 ops/s
# Warmup Iteration  18: 16719346.357 ops/s
# Warmup Iteration  19: 16753760.502 ops/s
# Warmup Iteration  20: 16805670.874 ops/s
# Warmup Iteration  21: 16700172.956 ops/s
# Warmup Iteration  22: 16785430.155 ops/s
# Warmup Iteration  23: 16707760.798 ops/s
# Warmup Iteration  24: 16753975.539 ops/s
# Warmup Iteration  25: 16769810.081 ops/s
# Warmup Iteration  26: 16722543.565 ops/s
# Warmup Iteration  27: 16655863.572 ops/s
# Warmup Iteration  28: 16718177.109 ops/s
# Warmup Iteration  29: 16747626.165 ops/s
# Warmup Iteration  30: 16624592.861 ops/s
Iteration   1: 16693017.090 ops/s
Iteration   2: 16671060.424 ops/s
Iteration   3: 16815158.070 ops/s
Iteration   4: 16672809.988 ops/s
Iteration   5: 16724338.435 ops/s
Iteration   6: 16782312.144 ops/s
Iteration   7: 16777739.767 ops/s
Iteration   8: 16733795.854 ops/s
Iteration   9: 16724308.603 ops/s
Iteration  10: 16759583.317 ops/s
Iteration  11: 16793121.325 ops/s
Iteration  12: 16820381.337 ops/s
Iteration  13: 16752346.611 ops/s
Iteration  14: 16795940.497 ops/s
Iteration  15: 16701033.121 ops/s
Iteration  16: 16738255.632 ops/s
Iteration  17: 16772636.364 ops/s
Iteration  18: 16720726.914 ops/s
Iteration  19: 16754548.279 ops/s
Iteration  20: 16760757.632 ops/s
Iteration  21: 16672461.233 ops/s
Iteration  22: 16763688.225 ops/s
Iteration  23: 16793391.554 ops/s
Iteration  24: 16808579.977 ops/s
Iteration  25: 16678467.779 ops/s
Iteration  26: 16780040.444 ops/s
Iteration  27: 16712076.907 ops/s
Iteration  28: 16727225.031 ops/s
Iteration  29: 16722572.407 ops/s
Iteration  30: 16721937.884 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_groupByUniqueKey_target":
  16744810.428 ±(99.9%) 29453.823 ops/s [Average]
  (min, avg, max) = (16671060.424, 16744810.428, 16820381.337), stdev = 44085.100
  CI (99.9%): [16715356.605, 16774264.252] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score       Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_groupByUniqueKey_target  thrpt   30  16744810.428 ± 29453.823  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_groupByUniqueKey_target_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_groupByUniqueKey_target_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5638835.881 ops/s
# Warmup Iteration   2: 11864752.197 ops/s
# Warmup Iteration   3: 11217657.496 ops/s
# Warmup Iteration   4: 12567394.251 ops/s
# Warmup Iteration   5: 12556996.761 ops/s
# Warmup Iteration   6: 12461350.164 ops/s
# Warmup Iteration   7: 12492029.631 ops/s
# Warmup Iteration   8: 12573595.255 ops/s
# Warmup Iteration   9: 12497189.598 ops/s
# Warmup Iteration  10: 12497401.281 ops/s
# Warmup Iteration  11: 12531773.357 ops/s
# Warmup Iteration  12: 12455985.222 ops/s
# Warmup Iteration  13: 12512213.448 ops/s
# Warmup Iteration  14: 12476429.173 ops/s
# Warmup Iteration  15: 12488198.426 ops/s
# Warmup Iteration  16: 12522747.041 ops/s
# Warmup Iteration  17: 12536518.686 ops/s
# Warmup Iteration  18: 12564313.333 ops/s
# Warmup Iteration  19: 12468978.987 ops/s
# Warmup Iteration  20: 12501882.225 ops/s
# Warmup Iteration  21: 12479885.260 ops/s
# Warmup Iteration  22: 12546638.640 ops/s
# Warmup Iteration  23: 12540483.174 ops/s
# Warmup Iteration  24: 12506407.564 ops/s
# Warmup Iteration  25: 12561318.927 ops/s
# Warmup Iteration  26: 12542997.029 ops/s
# Warmup Iteration  27: 12511231.146 ops/s
# Warmup Iteration  28: 12512152.638 ops/s
# Warmup Iteration  29: 12525592.683 ops/s
# Warmup Iteration  30: 12511302.670 ops/s
Iteration   1: 12500184.313 ops/s
Iteration   2: 12505891.905 ops/s
Iteration   3: 12504124.332 ops/s
Iteration   4: 12515455.253 ops/s
Iteration   5: 12510449.565 ops/s
Iteration   6: 12552555.864 ops/s
Iteration   7: 12616879.898 ops/s
Iteration   8: 12496821.345 ops/s
Iteration   9: 12466782.461 ops/s
Iteration  10: 12518514.197 ops/s
Iteration  11: 12514960.511 ops/s
Iteration  12: 12493821.996 ops/s
Iteration  13: 12496598.686 ops/s
Iteration  14: 12507514.489 ops/s
Iteration  15: 12565883.576 ops/s
Iteration  16: 12510347.496 ops/s
Iteration  17: 12551787.547 ops/s
Iteration  18: 12514547.057 ops/s
Iteration  19: 12506129.744 ops/s
Iteration  20: 12565586.341 ops/s
Iteration  21: 12456635.389 ops/s
Iteration  22: 12487461.080 ops/s
Iteration  23: 12529615.891 ops/s
Iteration  24: 12484934.252 ops/s
Iteration  25: 12535553.025 ops/s
Iteration  26: 12481097.617 ops/s
Iteration  27: 12552061.469 ops/s
Iteration  28: 12494862.549 ops/s
Iteration  29: 12550396.473 ops/s
Iteration  30: 12516124.319 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_groupByUniqueKey_target_throws":
  12516785.955 ±(99.9%) 22240.692 ops/s [Average]
  (min, avg, max) = (12456635.389, 12516785.955, 12616879.898), stdev = 33288.823
  CI (99.9%): [12494545.263, 12539026.646] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt         Score       Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_groupByUniqueKey_target_throws  thrpt   30  12516785.955 ± 22240.692  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 377287.023 ops/s
# Warmup Iteration   2: 442328.036 ops/s
# Warmup Iteration   3: 585383.081 ops/s
# Warmup Iteration   4: 586080.568 ops/s
# Warmup Iteration   5: 583814.570 ops/s
# Warmup Iteration   6: 584082.565 ops/s
# Warmup Iteration   7: 583551.792 ops/s
# Warmup Iteration   8: 585576.262 ops/s
# Warmup Iteration   9: 585863.350 ops/s
# Warmup Iteration  10: 485293.475 ops/s
# Warmup Iteration  11: 588122.103 ops/s
# Warmup Iteration  12: 584919.017 ops/s
# Warmup Iteration  13: 587932.344 ops/s
# Warmup Iteration  14: 587494.465 ops/s
# Warmup Iteration  15: 585909.767 ops/s
# Warmup Iteration  16: 587856.397 ops/s
# Warmup Iteration  17: 608083.122 ops/s
# Warmup Iteration  18: 610145.608 ops/s
# Warmup Iteration  19: 608133.080 ops/s
# Warmup Iteration  20: 607661.945 ops/s
# Warmup Iteration  21: 610123.056 ops/s
# Warmup Iteration  22: 608529.554 ops/s
# Warmup Iteration  23: 610685.055 ops/s
# Warmup Iteration  24: 609597.183 ops/s
# Warmup Iteration  25: 610667.854 ops/s
# Warmup Iteration  26: 609466.177 ops/s
# Warmup Iteration  27: 609781.367 ops/s
# Warmup Iteration  28: 610973.613 ops/s
# Warmup Iteration  29: 607296.437 ops/s
# Warmup Iteration  30: 607583.207 ops/s
Iteration   1: 609833.418 ops/s
Iteration   2: 608283.754 ops/s
Iteration   3: 612270.456 ops/s
Iteration   4: 611050.768 ops/s
Iteration   5: 610006.709 ops/s
Iteration   6: 610195.805 ops/s
Iteration   7: 610487.832 ops/s
Iteration   8: 607651.321 ops/s
Iteration   9: 607601.904 ops/s
Iteration  10: 610650.942 ops/s
Iteration  11: 609465.553 ops/s
Iteration  12: 610071.384 ops/s
Iteration  13: 610262.489 ops/s
Iteration  14: 606416.963 ops/s
Iteration  15: 607301.352 ops/s
Iteration  16: 610887.099 ops/s
Iteration  17: 610513.875 ops/s
Iteration  18: 609323.523 ops/s
Iteration  19: 605663.948 ops/s
Iteration  20: 610991.808 ops/s
Iteration  21: 611138.789 ops/s
Iteration  22: 609136.101 ops/s
Iteration  23: 608401.603 ops/s
Iteration  24: 611896.470 ops/s
Iteration  25: 606478.154 ops/s
Iteration  26: 611589.801 ops/s
Iteration  27: 610106.708 ops/s
Iteration  28: 610599.242 ops/s
Iteration  29: 610205.454 ops/s
Iteration  30: 612064.373 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate":
  609684.920 ±(99.9%) 1162.483 ops/s [Average]
  (min, avg, max) = (605663.948, 609684.920, 612270.456), stdev = 1739.949
  CI (99.9%): [608522.437, 610847.403] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 Mode  Cnt       Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate  thrpt   30  609684.920 ± 1162.483  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_groupByUniqueKey_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_groupByUniqueKey_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 16141762.705 ops/s
# Warmup Iteration   2: 30604061.468 ops/s
# Warmup Iteration   3: 35006749.276 ops/s
# Warmup Iteration   4: 35214897.199 ops/s
# Warmup Iteration   5: 34957137.981 ops/s
# Warmup Iteration   6: 35119704.952 ops/s
# Warmup Iteration   7: 34917377.634 ops/s
# Warmup Iteration   8: 35012491.662 ops/s
# Warmup Iteration   9: 34995149.879 ops/s
# Warmup Iteration  10: 35047505.801 ops/s
# Warmup Iteration  11: 35099031.400 ops/s
# Warmup Iteration  12: 34938707.486 ops/s
# Warmup Iteration  13: 34958843.659 ops/s
# Warmup Iteration  14: 34997308.229 ops/s
# Warmup Iteration  15: 35030896.114 ops/s
# Warmup Iteration  16: 35030354.191 ops/s
# Warmup Iteration  17: 34953398.970 ops/s
# Warmup Iteration  18: 34962901.761 ops/s
# Warmup Iteration  19: 35042341.610 ops/s
# Warmup Iteration  20: 35000280.523 ops/s
# Warmup Iteration  21: 34924062.414 ops/s
# Warmup Iteration  22: 35055200.202 ops/s
# Warmup Iteration  23: 35142751.231 ops/s
# Warmup Iteration  24: 35017699.025 ops/s
# Warmup Iteration  25: 34909822.129 ops/s
# Warmup Iteration  26: 35153069.049 ops/s
# Warmup Iteration  27: 34973975.599 ops/s
# Warmup Iteration  28: 34932883.396 ops/s
# Warmup Iteration  29: 35112159.428 ops/s
# Warmup Iteration  30: 34858741.676 ops/s
Iteration   1: 35049416.634 ops/s
Iteration   2: 34973410.722 ops/s
Iteration   3: 35070494.804 ops/s
Iteration   4: 35202115.731 ops/s
Iteration   5: 35017014.601 ops/s
Iteration   6: 35036641.856 ops/s
Iteration   7: 35034775.750 ops/s
Iteration   8: 34838453.878 ops/s
Iteration   9: 35305321.799 ops/s
Iteration  10: 34867672.498 ops/s
Iteration  11: 35080507.859 ops/s
Iteration  12: 34989968.170 ops/s
Iteration  13: 34985549.142 ops/s
Iteration  14: 35126915.044 ops/s
Iteration  15: 35115828.261 ops/s
Iteration  16: 34911779.862 ops/s
Iteration  17: 35120504.535 ops/s
Iteration  18: 34826702.216 ops/s
Iteration  19: 34886559.124 ops/s
Iteration  20: 35066771.254 ops/s
Iteration  21: 35137112.462 ops/s
Iteration  22: 35041818.269 ops/s
Iteration  23: 34918436.288 ops/s
Iteration  24: 34988603.881 ops/s
Iteration  25: 35013739.512 ops/s
Iteration  26: 34954909.524 ops/s
Iteration  27: 35114424.994 ops/s
Iteration  28: 34912012.781 ops/s
Iteration  29: 35135549.393 ops/s
Iteration  30: 35045110.854 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_groupByUniqueKey_throws":
  35025604.057 ±(99.9%) 72950.844 ops/s [Average]
  (min, avg, max) = (34826702.216, 35025604.057, 35305321.799), stdev = 109189.398
  CI (99.9%): [34952653.212, 35098554.901] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score       Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_groupByUniqueKey_throws  thrpt   30  35025604.057 ± 72950.844  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 411450.032 ops/s
# Warmup Iteration   2: 445054.713 ops/s
# Warmup Iteration   3: 600455.880 ops/s
# Warmup Iteration   4: 601867.413 ops/s
# Warmup Iteration   5: 598151.850 ops/s
# Warmup Iteration   6: 601981.517 ops/s
# Warmup Iteration   7: 600681.019 ops/s
# Warmup Iteration   8: 599875.863 ops/s
# Warmup Iteration   9: 599405.049 ops/s
# Warmup Iteration  10: 601861.186 ops/s
# Warmup Iteration  11: 506967.272 ops/s
# Warmup Iteration  12: 596783.380 ops/s
# Warmup Iteration  13: 600000.303 ops/s
# Warmup Iteration  14: 600782.545 ops/s
# Warmup Iteration  15: 602367.239 ops/s
# Warmup Iteration  16: 602132.924 ops/s
# Warmup Iteration  17: 624785.869 ops/s
# Warmup Iteration  18: 625389.284 ops/s
# Warmup Iteration  19: 624891.647 ops/s
# Warmup Iteration  20: 627731.072 ops/s
# Warmup Iteration  21: 625216.983 ops/s
# Warmup Iteration  22: 626906.637 ops/s
# Warmup Iteration  23: 622706.560 ops/s
# Warmup Iteration  24: 624739.524 ops/s
# Warmup Iteration  25: 626871.934 ops/s
# Warmup Iteration  26: 623898.841 ops/s
# Warmup Iteration  27: 626652.788 ops/s
# Warmup Iteration  28: 627531.506 ops/s
# Warmup Iteration  29: 628075.829 ops/s
# Warmup Iteration  30: 626255.529 ops/s
Iteration   1: 627974.711 ops/s
Iteration   2: 627354.290 ops/s
Iteration   3: 625293.532 ops/s
Iteration   4: 627875.446 ops/s
Iteration   5: 627436.191 ops/s
Iteration   6: 623163.903 ops/s
Iteration   7: 625157.683 ops/s
Iteration   8: 621498.582 ops/s
Iteration   9: 625623.099 ops/s
Iteration  10: 624326.125 ops/s
Iteration  11: 627472.184 ops/s
Iteration  12: 626783.223 ops/s
Iteration  13: 626100.128 ops/s
Iteration  14: 622623.887 ops/s
Iteration  15: 623723.579 ops/s
Iteration  16: 623664.507 ops/s
Iteration  17: 624803.110 ops/s
Iteration  18: 626553.632 ops/s
Iteration  19: 626468.452 ops/s
Iteration  20: 627855.187 ops/s
Iteration  21: 626219.027 ops/s
Iteration  22: 626167.121 ops/s
Iteration  23: 626053.030 ops/s
Iteration  24: 628100.338 ops/s
Iteration  25: 621647.282 ops/s
Iteration  26: 627283.453 ops/s
Iteration  27: 626271.296 ops/s
Iteration  28: 625036.928 ops/s
Iteration  29: 627333.570 ops/s
Iteration  30: 626309.034 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate":
  625739.084 ±(99.9%) 1240.123 ops/s [Average]
  (min, avg, max) = (621498.582, 625739.084, 628100.338), stdev = 1856.157
  CI (99.9%): [624498.962, 626979.207] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt       Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate  thrpt   30  625739.084 ± 1240.123  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_groupBy_with_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_groupBy_with_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7103087.088 ops/s
# Warmup Iteration   2: 16102253.077 ops/s
# Warmup Iteration   3: 14198595.831 ops/s
# Warmup Iteration   4: 16556380.638 ops/s
# Warmup Iteration   5: 16519342.595 ops/s
# Warmup Iteration   6: 16468876.699 ops/s
# Warmup Iteration   7: 16518766.630 ops/s
# Warmup Iteration   8: 16535406.606 ops/s
# Warmup Iteration   9: 16487677.048 ops/s
# Warmup Iteration  10: 16497272.742 ops/s
# Warmup Iteration  11: 16476015.136 ops/s
# Warmup Iteration  12: 16470013.583 ops/s
# Warmup Iteration  13: 16552908.353 ops/s
# Warmup Iteration  14: 16516716.365 ops/s
# Warmup Iteration  15: 16543070.069 ops/s
# Warmup Iteration  16: 16538107.997 ops/s
# Warmup Iteration  17: 16565140.609 ops/s
# Warmup Iteration  18: 16529198.028 ops/s
# Warmup Iteration  19: 16521056.663 ops/s
# Warmup Iteration  20: 16530091.222 ops/s
# Warmup Iteration  21: 16543585.980 ops/s
# Warmup Iteration  22: 16528667.429 ops/s
# Warmup Iteration  23: 16531941.792 ops/s
# Warmup Iteration  24: 16528267.497 ops/s
# Warmup Iteration  25: 16554572.793 ops/s
# Warmup Iteration  26: 16560546.668 ops/s
# Warmup Iteration  27: 16542065.740 ops/s
# Warmup Iteration  28: 16513101.528 ops/s
# Warmup Iteration  29: 16511344.325 ops/s
# Warmup Iteration  30: 16550441.532 ops/s
Iteration   1: 16502492.637 ops/s
Iteration   2: 16527586.243 ops/s
Iteration   3: 16530119.194 ops/s
Iteration   4: 16540434.225 ops/s
Iteration   5: 16600151.947 ops/s
Iteration   6: 16576144.376 ops/s
Iteration   7: 16527612.048 ops/s
Iteration   8: 16562524.559 ops/s
Iteration   9: 16525400.587 ops/s
Iteration  10: 16596988.539 ops/s
Iteration  11: 16570187.629 ops/s
Iteration  12: 16478980.681 ops/s
Iteration  13: 16456005.600 ops/s
Iteration  14: 16483999.134 ops/s
Iteration  15: 16479780.252 ops/s
Iteration  16: 16518436.231 ops/s
Iteration  17: 16546077.113 ops/s
Iteration  18: 16547603.402 ops/s
Iteration  19: 16560380.689 ops/s
Iteration  20: 16556967.300 ops/s
Iteration  21: 16454868.529 ops/s
Iteration  22: 16449123.156 ops/s
Iteration  23: 16535907.453 ops/s
Iteration  24: 16586483.382 ops/s
Iteration  25: 16518506.268 ops/s
Iteration  26: 16509310.492 ops/s
Iteration  27: 16568203.380 ops/s
Iteration  28: 16485700.888 ops/s
Iteration  29: 16547817.517 ops/s
Iteration  30: 16510962.759 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_groupBy_with_target":
  16528491.874 ±(99.9%) 27792.464 ops/s [Average]
  (min, avg, max) = (16449123.156, 16528491.874, 16600151.947), stdev = 41598.455
  CI (99.9%): [16500699.410, 16556284.338] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score       Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_groupBy_with_target  thrpt   30  16528491.874 ± 27792.464  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 774627.370 ops/s
# Warmup Iteration   2: 1261969.559 ops/s
# Warmup Iteration   3: 1502967.026 ops/s
# Warmup Iteration   4: 1511501.491 ops/s
# Warmup Iteration   5: 1507342.459 ops/s
# Warmup Iteration   6: 1418643.265 ops/s
# Warmup Iteration   7: 1341080.473 ops/s
# Warmup Iteration   8: 1508895.959 ops/s
# Warmup Iteration   9: 1512017.333 ops/s
# Warmup Iteration  10: 1511748.771 ops/s
# Warmup Iteration  11: 1515507.952 ops/s
# Warmup Iteration  12: 1514036.207 ops/s
# Warmup Iteration  13: 1513492.733 ops/s
# Warmup Iteration  14: 1512636.270 ops/s
# Warmup Iteration  15: 1510230.351 ops/s
# Warmup Iteration  16: 1509123.034 ops/s
# Warmup Iteration  17: 1512130.437 ops/s
# Warmup Iteration  18: 1511407.817 ops/s
# Warmup Iteration  19: 1511045.977 ops/s
# Warmup Iteration  20: 1511484.647 ops/s
# Warmup Iteration  21: 1514310.916 ops/s
# Warmup Iteration  22: 1511789.569 ops/s
# Warmup Iteration  23: 1510147.952 ops/s
# Warmup Iteration  24: 1512548.044 ops/s
# Warmup Iteration  25: 1508942.821 ops/s
# Warmup Iteration  26: 1512808.319 ops/s
# Warmup Iteration  27: 1511073.387 ops/s
# Warmup Iteration  28: 1514495.686 ops/s
# Warmup Iteration  29: 1511362.147 ops/s
# Warmup Iteration  30: 1512534.487 ops/s
Iteration   1: 1512325.480 ops/s
Iteration   2: 1507361.409 ops/s
Iteration   3: 1508983.192 ops/s
Iteration   4: 1512648.782 ops/s
Iteration   5: 1511720.082 ops/s
Iteration   6: 1513014.834 ops/s
Iteration   7: 1505455.593 ops/s
Iteration   8: 1516674.611 ops/s
Iteration   9: 1509429.635 ops/s
Iteration  10: 1514816.321 ops/s
Iteration  11: 1512902.162 ops/s
Iteration  12: 1513321.046 ops/s
Iteration  13: 1512401.647 ops/s
Iteration  14: 1510271.333 ops/s
Iteration  15: 1512380.560 ops/s
Iteration  16: 1506445.279 ops/s
Iteration  17: 1505290.734 ops/s
Iteration  18: 1505826.037 ops/s
Iteration  19: 1512109.955 ops/s
Iteration  20: 1508155.397 ops/s
Iteration  21: 1510296.789 ops/s
Iteration  22: 1514242.623 ops/s
Iteration  23: 1511940.366 ops/s
Iteration  24: 1511757.863 ops/s
Iteration  25: 1513254.584 ops/s
Iteration  26: 1512771.202 ops/s
Iteration  27: 1505370.928 ops/s
Iteration  28: 1511947.635 ops/s
Iteration  29: 1507622.219 ops/s
Iteration  30: 1511385.825 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_injectInto":
  1510737.471 ±(99.9%) 2045.904 ops/s [Average]
  (min, avg, max) = (1505290.734, 1510737.471, 1516674.611), stdev = 3062.213
  CI (99.9%): [1508691.567, 1512783.375] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_injectInto  thrpt   30  1510737.471 ± 2045.904  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_injectIntoDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_injectIntoDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 821725.659 ops/s
# Warmup Iteration   2: 1327574.625 ops/s
# Warmup Iteration   3: 1564914.786 ops/s
# Warmup Iteration   4: 1585623.924 ops/s
# Warmup Iteration   5: 1579423.538 ops/s
# Warmup Iteration   6: 1397393.157 ops/s
# Warmup Iteration   7: 1468126.962 ops/s
# Warmup Iteration   8: 1580629.682 ops/s
# Warmup Iteration   9: 1576607.198 ops/s
# Warmup Iteration  10: 1580225.346 ops/s
# Warmup Iteration  11: 1580177.806 ops/s
# Warmup Iteration  12: 1578624.635 ops/s
# Warmup Iteration  13: 1581006.021 ops/s
# Warmup Iteration  14: 1581305.792 ops/s
# Warmup Iteration  15: 1575403.335 ops/s
# Warmup Iteration  16: 1585812.435 ops/s
# Warmup Iteration  17: 1585864.833 ops/s
# Warmup Iteration  18: 1581298.274 ops/s
# Warmup Iteration  19: 1582626.996 ops/s
# Warmup Iteration  20: 1584187.716 ops/s
# Warmup Iteration  21: 1586530.424 ops/s
# Warmup Iteration  22: 1585808.425 ops/s
# Warmup Iteration  23: 1583309.326 ops/s
# Warmup Iteration  24: 1582595.346 ops/s
# Warmup Iteration  25: 1587078.658 ops/s
# Warmup Iteration  26: 1578680.594 ops/s
# Warmup Iteration  27: 1584627.468 ops/s
# Warmup Iteration  28: 1587370.953 ops/s
# Warmup Iteration  29: 1585023.030 ops/s
# Warmup Iteration  30: 1583603.527 ops/s
Iteration   1: 1581049.951 ops/s
Iteration   2: 1578480.640 ops/s
Iteration   3: 1586524.598 ops/s
Iteration   4: 1584499.929 ops/s
Iteration   5: 1587754.177 ops/s
Iteration   6: 1581841.218 ops/s
Iteration   7: 1584373.897 ops/s
Iteration   8: 1587263.226 ops/s
Iteration   9: 1579542.798 ops/s
Iteration  10: 1582340.114 ops/s
Iteration  11: 1587045.065 ops/s
Iteration  12: 1583676.742 ops/s
Iteration  13: 1587069.141 ops/s
Iteration  14: 1586219.335 ops/s
Iteration  15: 1583170.586 ops/s
Iteration  16: 1582568.177 ops/s
Iteration  17: 1585835.113 ops/s
Iteration  18: 1571249.848 ops/s
Iteration  19: 1582299.084 ops/s
Iteration  20: 1582503.860 ops/s
Iteration  21: 1583343.825 ops/s
Iteration  22: 1585739.888 ops/s
Iteration  23: 1582512.842 ops/s
Iteration  24: 1583655.556 ops/s
Iteration  25: 1571047.302 ops/s
Iteration  26: 1581998.223 ops/s
Iteration  27: 1577911.063 ops/s
Iteration  28: 1580039.492 ops/s
Iteration  29: 1582631.510 ops/s
Iteration  30: 1574383.531 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_injectIntoDouble":
  1582285.691 ±(99.9%) 2861.563 ops/s [Average]
  (min, avg, max) = (1571047.302, 1582285.691, 1587754.177), stdev = 4283.053
  CI (99.9%): [1579424.128, 1585147.254] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_injectIntoDouble  thrpt   30  1582285.691 ± 2861.563  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_injectIntoFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_injectIntoFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 817693.954 ops/s
# Warmup Iteration   2: 1334880.151 ops/s
# Warmup Iteration   3: 1576155.280 ops/s
# Warmup Iteration   4: 1589647.925 ops/s
# Warmup Iteration   5: 1588036.686 ops/s
# Warmup Iteration   6: 1408089.646 ops/s
# Warmup Iteration   7: 1484914.089 ops/s
# Warmup Iteration   8: 1589411.229 ops/s
# Warmup Iteration   9: 1593644.266 ops/s
# Warmup Iteration  10: 1590941.282 ops/s
# Warmup Iteration  11: 1591383.519 ops/s
# Warmup Iteration  12: 1591010.110 ops/s
# Warmup Iteration  13: 1592041.778 ops/s
# Warmup Iteration  14: 1587817.716 ops/s
# Warmup Iteration  15: 1591785.241 ops/s
# Warmup Iteration  16: 1596967.532 ops/s
# Warmup Iteration  17: 1592668.491 ops/s
# Warmup Iteration  18: 1593451.288 ops/s
# Warmup Iteration  19: 1591021.055 ops/s
# Warmup Iteration  20: 1588254.671 ops/s
# Warmup Iteration  21: 1593397.940 ops/s
# Warmup Iteration  22: 1586761.951 ops/s
# Warmup Iteration  23: 1537333.495 ops/s
# Warmup Iteration  24: 1589576.372 ops/s
# Warmup Iteration  25: 1593955.411 ops/s
# Warmup Iteration  26: 1589947.203 ops/s
# Warmup Iteration  27: 1592452.565 ops/s
# Warmup Iteration  28: 1595043.207 ops/s
# Warmup Iteration  29: 1591463.308 ops/s
# Warmup Iteration  30: 1589364.538 ops/s
Iteration   1: 1591061.408 ops/s
Iteration   2: 1585580.050 ops/s
Iteration   3: 1588702.604 ops/s
Iteration   4: 1589738.586 ops/s
Iteration   5: 1590950.812 ops/s
Iteration   6: 1593034.169 ops/s
Iteration   7: 1587198.072 ops/s
Iteration   8: 1594470.821 ops/s
Iteration   9: 1593422.380 ops/s
Iteration  10: 1589958.290 ops/s
Iteration  11: 1589377.423 ops/s
Iteration  12: 1589054.643 ops/s
Iteration  13: 1586918.215 ops/s
Iteration  14: 1587779.959 ops/s
Iteration  15: 1589687.719 ops/s
Iteration  16: 1595239.092 ops/s
Iteration  17: 1585242.172 ops/s
Iteration  18: 1590586.533 ops/s
Iteration  19: 1592371.662 ops/s
Iteration  20: 1592658.617 ops/s
Iteration  21: 1585480.898 ops/s
Iteration  22: 1592081.643 ops/s
Iteration  23: 1588302.683 ops/s
Iteration  24: 1590745.091 ops/s
Iteration  25: 1591833.749 ops/s
Iteration  26: 1591310.600 ops/s
Iteration  27: 1587484.445 ops/s
Iteration  28: 1595171.293 ops/s
Iteration  29: 1592781.964 ops/s
Iteration  30: 1593330.897 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_injectIntoFloat":
  1590385.216 ±(99.9%) 1888.606 ops/s [Average]
  (min, avg, max) = (1585242.172, 1590385.216, 1595239.092), stdev = 2826.776
  CI (99.9%): [1588496.611, 1592273.822] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_injectIntoFloat  thrpt   30  1590385.216 ± 1888.606  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_injectIntoInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_injectIntoInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 821273.909 ops/s
# Warmup Iteration   2: 1405992.742 ops/s
# Warmup Iteration   3: 1615771.251 ops/s
# Warmup Iteration   4: 1621842.924 ops/s
# Warmup Iteration   5: 1616860.555 ops/s
# Warmup Iteration   6: 1316422.480 ops/s
# Warmup Iteration   7: 1615565.334 ops/s
# Warmup Iteration   8: 1619757.577 ops/s
# Warmup Iteration   9: 1615766.282 ops/s
# Warmup Iteration  10: 1613430.969 ops/s
# Warmup Iteration  11: 1617968.161 ops/s
# Warmup Iteration  12: 1620630.958 ops/s
# Warmup Iteration  13: 1620324.798 ops/s
# Warmup Iteration  14: 1619661.331 ops/s
# Warmup Iteration  15: 1616252.978 ops/s
# Warmup Iteration  16: 1619377.872 ops/s
# Warmup Iteration  17: 1624407.494 ops/s
# Warmup Iteration  18: 1618231.431 ops/s
# Warmup Iteration  19: 1619784.267 ops/s
# Warmup Iteration  20: 1617965.097 ops/s
# Warmup Iteration  21: 1617142.845 ops/s
# Warmup Iteration  22: 1619113.148 ops/s
# Warmup Iteration  23: 1622982.692 ops/s
# Warmup Iteration  24: 1622553.684 ops/s
# Warmup Iteration  25: 1621796.482 ops/s
# Warmup Iteration  26: 1618334.116 ops/s
# Warmup Iteration  27: 1624814.710 ops/s
# Warmup Iteration  28: 1621126.630 ops/s
# Warmup Iteration  29: 1622149.849 ops/s
# Warmup Iteration  30: 1623266.717 ops/s
Iteration   1: 1620477.480 ops/s
Iteration   2: 1620972.616 ops/s
Iteration   3: 1620778.604 ops/s
Iteration   4: 1621690.621 ops/s
Iteration   5: 1621296.000 ops/s
Iteration   6: 1618515.462 ops/s
Iteration   7: 1622921.163 ops/s
Iteration   8: 1612017.370 ops/s
Iteration   9: 1622969.115 ops/s
Iteration  10: 1619730.735 ops/s
Iteration  11: 1624352.676 ops/s
Iteration  12: 1619868.096 ops/s
Iteration  13: 1626382.381 ops/s
Iteration  14: 1621538.924 ops/s
Iteration  15: 1623933.912 ops/s
Iteration  16: 1620641.656 ops/s
Iteration  17: 1623101.330 ops/s
Iteration  18: 1621442.955 ops/s
Iteration  19: 1622663.109 ops/s
Iteration  20: 1622701.086 ops/s
Iteration  21: 1617648.474 ops/s
Iteration  22: 1621929.679 ops/s
Iteration  23: 1621487.327 ops/s
Iteration  24: 1625718.398 ops/s
Iteration  25: 1621554.499 ops/s
Iteration  26: 1621811.410 ops/s
Iteration  27: 1614471.922 ops/s
Iteration  28: 1624121.327 ops/s
Iteration  29: 1620797.027 ops/s
Iteration  30: 1621302.410 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_injectIntoInt":
  1621294.592 ±(99.9%) 1934.658 ops/s [Average]
  (min, avg, max) = (1612017.370, 1621294.592, 1626382.381), stdev = 2895.706
  CI (99.9%): [1619359.934, 1623229.251] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_injectIntoInt  thrpt   30  1621294.592 ± 1934.658  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_injectIntoLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_injectIntoLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 819164.036 ops/s
# Warmup Iteration   2: 1372722.205 ops/s
# Warmup Iteration   3: 1615453.751 ops/s
# Warmup Iteration   4: 1625429.640 ops/s
# Warmup Iteration   5: 1620862.667 ops/s
# Warmup Iteration   6: 1315152.549 ops/s
# Warmup Iteration   7: 1626684.636 ops/s
# Warmup Iteration   8: 1624543.086 ops/s
# Warmup Iteration   9: 1629513.828 ops/s
# Warmup Iteration  10: 1630317.058 ops/s
# Warmup Iteration  11: 1624115.288 ops/s
# Warmup Iteration  12: 1625476.811 ops/s
# Warmup Iteration  13: 1628775.013 ops/s
# Warmup Iteration  14: 1625944.031 ops/s
# Warmup Iteration  15: 1628163.414 ops/s
# Warmup Iteration  16: 1625141.700 ops/s
# Warmup Iteration  17: 1623981.703 ops/s
# Warmup Iteration  18: 1620088.520 ops/s
# Warmup Iteration  19: 1627012.587 ops/s
# Warmup Iteration  20: 1627144.285 ops/s
# Warmup Iteration  21: 1627901.600 ops/s
# Warmup Iteration  22: 1626169.546 ops/s
# Warmup Iteration  23: 1625972.264 ops/s
# Warmup Iteration  24: 1625817.098 ops/s
# Warmup Iteration  25: 1628262.310 ops/s
# Warmup Iteration  26: 1627909.022 ops/s
# Warmup Iteration  27: 1627811.761 ops/s
# Warmup Iteration  28: 1629456.854 ops/s
# Warmup Iteration  29: 1625075.504 ops/s
# Warmup Iteration  30: 1626795.159 ops/s
Iteration   1: 1625581.325 ops/s
Iteration   2: 1626946.886 ops/s
Iteration   3: 1622321.228 ops/s
Iteration   4: 1620150.044 ops/s
Iteration   5: 1617914.846 ops/s
Iteration   6: 1623818.529 ops/s
Iteration   7: 1629750.192 ops/s
Iteration   8: 1623477.312 ops/s
Iteration   9: 1627734.024 ops/s
Iteration  10: 1627987.223 ops/s
Iteration  11: 1624655.098 ops/s
Iteration  12: 1623270.839 ops/s
Iteration  13: 1626917.849 ops/s
Iteration  14: 1625206.258 ops/s
Iteration  15: 1630197.190 ops/s
Iteration  16: 1627280.428 ops/s
Iteration  17: 1626443.778 ops/s
Iteration  18: 1626469.212 ops/s
Iteration  19: 1617947.406 ops/s
Iteration  20: 1628548.914 ops/s
Iteration  21: 1627537.116 ops/s
Iteration  22: 1627046.705 ops/s
Iteration  23: 1622021.439 ops/s
Iteration  24: 1626739.569 ops/s
Iteration  25: 1619827.851 ops/s
Iteration  26: 1631939.026 ops/s
Iteration  27: 1621550.084 ops/s
Iteration  28: 1626414.854 ops/s
Iteration  29: 1627606.612 ops/s
Iteration  30: 1626803.609 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_injectIntoLong":
  1625336.848 ±(99.9%) 2325.335 ops/s [Average]
  (min, avg, max) = (1617914.846, 1625336.848, 1631939.026), stdev = 3480.452
  CI (99.9%): [1623011.514, 1627662.183] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_injectIntoLong  thrpt   30  1625336.848 ± 2325.335  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 152168884.095 ops/s
# Warmup Iteration   2: 304200887.494 ops/s
# Warmup Iteration   3: 267523651.401 ops/s
# Warmup Iteration   4: 311893271.776 ops/s
# Warmup Iteration   5: 311402528.015 ops/s
# Warmup Iteration   6: 310800528.614 ops/s
# Warmup Iteration   7: 311182702.388 ops/s
# Warmup Iteration   8: 310893005.524 ops/s
# Warmup Iteration   9: 311871473.482 ops/s
# Warmup Iteration  10: 309582690.240 ops/s
# Warmup Iteration  11: 311314781.425 ops/s
# Warmup Iteration  12: 311916752.951 ops/s
# Warmup Iteration  13: 312369403.534 ops/s
# Warmup Iteration  14: 310758042.711 ops/s
# Warmup Iteration  15: 311758860.433 ops/s
# Warmup Iteration  16: 311265713.019 ops/s
# Warmup Iteration  17: 311320563.203 ops/s
# Warmup Iteration  18: 311447747.453 ops/s
# Warmup Iteration  19: 311498911.063 ops/s
# Warmup Iteration  20: 311348694.653 ops/s
# Warmup Iteration  21: 311223084.670 ops/s
# Warmup Iteration  22: 310587562.920 ops/s
# Warmup Iteration  23: 310590924.951 ops/s
# Warmup Iteration  24: 310843236.405 ops/s
# Warmup Iteration  25: 311268525.216 ops/s
# Warmup Iteration  26: 311004954.714 ops/s
# Warmup Iteration  27: 311916307.349 ops/s
# Warmup Iteration  28: 311333174.253 ops/s
# Warmup Iteration  29: 310986949.423 ops/s
# Warmup Iteration  30: 309593431.225 ops/s
Iteration   1: 311944603.242 ops/s
Iteration   2: 311564769.771 ops/s
Iteration   3: 310841452.955 ops/s
Iteration   4: 310579008.579 ops/s
Iteration   5: 311956173.465 ops/s
Iteration   6: 311747518.907 ops/s
Iteration   7: 312159321.132 ops/s
Iteration   8: 311513629.714 ops/s
Iteration   9: 309324004.435 ops/s
Iteration  10: 309849898.595 ops/s
Iteration  11: 310915404.221 ops/s
Iteration  12: 311715741.208 ops/s
Iteration  13: 310645573.403 ops/s
Iteration  14: 311888579.318 ops/s
Iteration  15: 311629267.538 ops/s
Iteration  16: 309884713.376 ops/s
Iteration  17: 310790581.709 ops/s
Iteration  18: 310547441.690 ops/s
Iteration  19: 311051051.021 ops/s
Iteration  20: 311120163.437 ops/s
Iteration  21: 311582414.294 ops/s
Iteration  22: 311208038.439 ops/s
Iteration  23: 311100906.279 ops/s
Iteration  24: 310521391.262 ops/s
Iteration  25: 311328857.579 ops/s
Iteration  26: 311372551.605 ops/s
Iteration  27: 311567722.859 ops/s
Iteration  28: 310842412.159 ops/s
Iteration  29: 311837301.537 ops/s
Iteration  30: 311749742.817 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_isEmpty":
  311159341.218 ±(99.9%) 458936.592 ops/s [Average]
  (min, avg, max) = (309324004.435, 311159341.218, 312159321.132), stdev = 686914.737
  CI (99.9%): [310700404.626, 311618277.810] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt          Score        Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_isEmpty  thrpt   30  311159341.218 ± 458936.592  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_iterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_iterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 513667.197 ops/s
# Warmup Iteration   2: 599210.744 ops/s
# Warmup Iteration   3: 787576.538 ops/s
# Warmup Iteration   4: 784034.814 ops/s
# Warmup Iteration   5: 780178.290 ops/s
# Warmup Iteration   6: 782415.007 ops/s
# Warmup Iteration   7: 785177.170 ops/s
# Warmup Iteration   8: 784674.110 ops/s
# Warmup Iteration   9: 784422.844 ops/s
# Warmup Iteration  10: 725451.618 ops/s
# Warmup Iteration  11: 712124.979 ops/s
# Warmup Iteration  12: 784852.671 ops/s
# Warmup Iteration  13: 786064.308 ops/s
# Warmup Iteration  14: 786721.074 ops/s
# Warmup Iteration  15: 783868.457 ops/s
# Warmup Iteration  16: 780833.029 ops/s
# Warmup Iteration  17: 821930.619 ops/s
# Warmup Iteration  18: 820017.615 ops/s
# Warmup Iteration  19: 818526.411 ops/s
# Warmup Iteration  20: 821053.716 ops/s
# Warmup Iteration  21: 815348.460 ops/s
# Warmup Iteration  22: 821546.785 ops/s
# Warmup Iteration  23: 822290.232 ops/s
# Warmup Iteration  24: 821013.240 ops/s
# Warmup Iteration  25: 819072.316 ops/s
# Warmup Iteration  26: 820978.833 ops/s
# Warmup Iteration  27: 818738.860 ops/s
# Warmup Iteration  28: 819163.041 ops/s
# Warmup Iteration  29: 822080.262 ops/s
# Warmup Iteration  30: 821257.279 ops/s
Iteration   1: 821309.731 ops/s
Iteration   2: 819302.901 ops/s
Iteration   3: 821525.948 ops/s
Iteration   4: 818526.795 ops/s
Iteration   5: 819978.448 ops/s
Iteration   6: 821136.341 ops/s
Iteration   7: 822491.910 ops/s
Iteration   8: 821741.422 ops/s
Iteration   9: 819045.402 ops/s
Iteration  10: 822411.371 ops/s
Iteration  11: 819179.098 ops/s
Iteration  12: 820064.129 ops/s
Iteration  13: 822020.010 ops/s
Iteration  14: 819218.013 ops/s
Iteration  15: 823749.162 ops/s
Iteration  16: 819657.439 ops/s
Iteration  17: 818261.351 ops/s
Iteration  18: 820411.223 ops/s
Iteration  19: 819951.278 ops/s
Iteration  20: 818502.969 ops/s
Iteration  21: 819070.101 ops/s
Iteration  22: 819372.805 ops/s
Iteration  23: 814930.108 ops/s
Iteration  24: 822038.726 ops/s
Iteration  25: 821928.750 ops/s
Iteration  26: 820177.359 ops/s
Iteration  27: 821975.852 ops/s
Iteration  28: 821726.376 ops/s
Iteration  29: 817083.432 ops/s
Iteration  30: 820353.268 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_iterator":
  820238.057 ±(99.9%) 1225.829 ops/s [Average]
  (min, avg, max) = (814930.108, 820238.057, 823749.162), stdev = 1834.763
  CI (99.9%): [819012.229, 821463.886] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_iterator  thrpt   30  820238.057 ± 1225.829  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_iteratorRemove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_iteratorRemove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 626148.160 ops/s
# Warmup Iteration   2: 762769.497 ops/s
# Warmup Iteration   3: 970326.033 ops/s
# Warmup Iteration   4: 964707.887 ops/s
# Warmup Iteration   5: 977360.966 ops/s
# Warmup Iteration   6: 976625.296 ops/s
# Warmup Iteration   7: 971740.606 ops/s
# Warmup Iteration   8: 973906.411 ops/s
# Warmup Iteration   9: 850357.237 ops/s
# Warmup Iteration  10: 944971.938 ops/s
# Warmup Iteration  11: 975242.574 ops/s
# Warmup Iteration  12: 975325.896 ops/s
# Warmup Iteration  13: 972768.633 ops/s
# Warmup Iteration  14: 975789.348 ops/s
# Warmup Iteration  15: 977258.567 ops/s
# Warmup Iteration  16: 971908.660 ops/s
# Warmup Iteration  17: 1030871.948 ops/s
# Warmup Iteration  18: 1031698.674 ops/s
# Warmup Iteration  19: 1026394.531 ops/s
# Warmup Iteration  20: 1030192.801 ops/s
# Warmup Iteration  21: 1030548.223 ops/s
# Warmup Iteration  22: 1029564.204 ops/s
# Warmup Iteration  23: 1029483.412 ops/s
# Warmup Iteration  24: 1028979.272 ops/s
# Warmup Iteration  25: 1027393.322 ops/s
# Warmup Iteration  26: 1024817.352 ops/s
# Warmup Iteration  27: 1029712.543 ops/s
# Warmup Iteration  28: 1027964.751 ops/s
# Warmup Iteration  29: 1028678.821 ops/s
# Warmup Iteration  30: 1029539.404 ops/s
Iteration   1: 1030013.347 ops/s
Iteration   2: 1031682.658 ops/s
Iteration   3: 1025719.244 ops/s
Iteration   4: 1027981.282 ops/s
Iteration   5: 1031866.135 ops/s
Iteration   6: 1017429.722 ops/s
Iteration   7: 1031939.943 ops/s
Iteration   8: 1028156.873 ops/s
Iteration   9: 1030024.286 ops/s
Iteration  10: 1032345.972 ops/s
Iteration  11: 1030869.396 ops/s
Iteration  12: 1024407.946 ops/s
Iteration  13: 1024797.567 ops/s
Iteration  14: 1028545.467 ops/s
Iteration  15: 1025410.940 ops/s
Iteration  16: 1029826.335 ops/s
Iteration  17: 1024510.725 ops/s
Iteration  18: 1021444.373 ops/s
Iteration  19: 1032185.955 ops/s
Iteration  20: 1029855.289 ops/s
Iteration  21: 1021366.036 ops/s
Iteration  22: 1031363.679 ops/s
Iteration  23: 1031204.580 ops/s
Iteration  24: 1027085.315 ops/s
Iteration  25: 1030128.912 ops/s
Iteration  26: 1024561.370 ops/s
Iteration  27: 1033932.256 ops/s
Iteration  28: 1029663.366 ops/s
Iteration  29: 1026660.111 ops/s
Iteration  30: 1027028.924 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_iteratorRemove":
  1028066.934 ±(99.9%) 2570.344 ops/s [Average]
  (min, avg, max) = (1017429.722, 1028066.934, 1033932.256), stdev = 3847.170
  CI (99.9%): [1025496.590, 1030637.277] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_iteratorRemove  thrpt   30  1028066.934 ± 2570.344  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_iterator_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_iterator_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 518939.329 ops/s
# Warmup Iteration   2: 553196.513 ops/s
# Warmup Iteration   3: 701372.891 ops/s
# Warmup Iteration   4: 721899.790 ops/s
# Warmup Iteration   5: 723442.454 ops/s
# Warmup Iteration   6: 719705.975 ops/s
# Warmup Iteration   7: 723339.512 ops/s
# Warmup Iteration   8: 721701.205 ops/s
# Warmup Iteration   9: 720193.682 ops/s
# Warmup Iteration  10: 721052.520 ops/s
# Warmup Iteration  11: 724964.996 ops/s
# Warmup Iteration  12: 652360.093 ops/s
# Warmup Iteration  13: 671350.079 ops/s
# Warmup Iteration  14: 719647.676 ops/s
# Warmup Iteration  15: 720565.223 ops/s
# Warmup Iteration  16: 722067.154 ops/s
# Warmup Iteration  17: 757367.431 ops/s
# Warmup Iteration  18: 756884.626 ops/s
# Warmup Iteration  19: 756860.409 ops/s
# Warmup Iteration  20: 753527.097 ops/s
# Warmup Iteration  21: 755499.275 ops/s
# Warmup Iteration  22: 756097.103 ops/s
# Warmup Iteration  23: 756847.882 ops/s
# Warmup Iteration  24: 755805.481 ops/s
# Warmup Iteration  25: 756479.139 ops/s
# Warmup Iteration  26: 753353.810 ops/s
# Warmup Iteration  27: 755886.000 ops/s
# Warmup Iteration  28: 755839.871 ops/s
# Warmup Iteration  29: 757629.526 ops/s
# Warmup Iteration  30: 754003.549 ops/s
Iteration   1: 756953.766 ops/s
Iteration   2: 754696.141 ops/s
Iteration   3: 755738.423 ops/s
Iteration   4: 758748.925 ops/s
Iteration   5: 756204.261 ops/s
Iteration   6: 756524.042 ops/s
Iteration   7: 756378.750 ops/s
Iteration   8: 760882.375 ops/s
Iteration   9: 758812.184 ops/s
Iteration  10: 755948.276 ops/s
Iteration  11: 756811.664 ops/s
Iteration  12: 756769.423 ops/s
Iteration  13: 750703.291 ops/s
Iteration  14: 752086.257 ops/s
Iteration  15: 758926.648 ops/s
Iteration  16: 752488.859 ops/s
Iteration  17: 756301.784 ops/s
Iteration  18: 758305.712 ops/s
Iteration  19: 757804.306 ops/s
Iteration  20: 739272.006 ops/s
Iteration  21: 753382.395 ops/s
Iteration  22: 756265.889 ops/s
Iteration  23: 755255.005 ops/s
Iteration  24: 754168.436 ops/s
Iteration  25: 760469.574 ops/s
Iteration  26: 753780.066 ops/s
Iteration  27: 754841.724 ops/s
Iteration  28: 758308.548 ops/s
Iteration  29: 757538.551 ops/s
Iteration  30: 753058.326 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_iterator_throws":
  755580.854 ±(99.9%) 2616.008 ops/s [Average]
  (min, avg, max) = (739272.006, 755580.854, 760882.375), stdev = 3915.517
  CI (99.9%): [752964.846, 758196.861] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_iterator_throws  thrpt   30  755580.854 ± 2616.008  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 814047.585 ops/s
# Warmup Iteration   2: 2034681.515 ops/s
# Warmup Iteration   3: 2051496.037 ops/s
# Warmup Iteration   4: 1710574.077 ops/s
# Warmup Iteration   5: 2051545.543 ops/s
# Warmup Iteration   6: 2050985.717 ops/s
# Warmup Iteration   7: 2056261.077 ops/s
# Warmup Iteration   8: 2055333.785 ops/s
# Warmup Iteration   9: 2059802.236 ops/s
# Warmup Iteration  10: 2059745.833 ops/s
# Warmup Iteration  11: 2055400.055 ops/s
# Warmup Iteration  12: 2049428.101 ops/s
# Warmup Iteration  13: 2054371.439 ops/s
# Warmup Iteration  14: 2051264.250 ops/s
# Warmup Iteration  15: 2060903.425 ops/s
# Warmup Iteration  16: 2052431.035 ops/s
# Warmup Iteration  17: 2048965.210 ops/s
# Warmup Iteration  18: 2052476.104 ops/s
# Warmup Iteration  19: 2047858.044 ops/s
# Warmup Iteration  20: 2051536.174 ops/s
# Warmup Iteration  21: 2062065.229 ops/s
# Warmup Iteration  22: 2064145.309 ops/s
# Warmup Iteration  23: 2060291.972 ops/s
# Warmup Iteration  24: 2065976.526 ops/s
# Warmup Iteration  25: 2053649.809 ops/s
# Warmup Iteration  26: 2057943.758 ops/s
# Warmup Iteration  27: 2055108.353 ops/s
# Warmup Iteration  28: 2055214.556 ops/s
# Warmup Iteration  29: 2058197.374 ops/s
# Warmup Iteration  30: 2058921.712 ops/s
Iteration   1: 2062840.342 ops/s
Iteration   2: 2051878.872 ops/s
Iteration   3: 2066520.709 ops/s
Iteration   4: 2064671.867 ops/s
Iteration   5: 2058818.611 ops/s
Iteration   6: 2055561.260 ops/s
Iteration   7: 2052330.128 ops/s
Iteration   8: 2059463.102 ops/s
Iteration   9: 2051787.142 ops/s
Iteration  10: 2045641.217 ops/s
Iteration  11: 2056221.911 ops/s
Iteration  12: 2063104.045 ops/s
Iteration  13: 2058744.667 ops/s
Iteration  14: 2065647.373 ops/s
Iteration  15: 2067346.394 ops/s
Iteration  16: 2060114.797 ops/s
Iteration  17: 2049292.268 ops/s
Iteration  18: 2062739.476 ops/s
Iteration  19: 2059753.644 ops/s
Iteration  20: 2064716.190 ops/s
Iteration  21: 2055360.634 ops/s
Iteration  22: 2060296.622 ops/s
Iteration  23: 2058454.595 ops/s
Iteration  24: 2059397.167 ops/s
Iteration  25: 2067808.846 ops/s
Iteration  26: 2058928.270 ops/s
Iteration  27: 2066605.956 ops/s
Iteration  28: 2059520.409 ops/s
Iteration  29: 2061930.862 ops/s
Iteration  30: 2063664.978 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_makeString":
  2059638.745 ±(99.9%) 3704.622 ops/s [Average]
  (min, avg, max) = (2045641.217, 2059638.745, 2067808.846), stdev = 5544.904
  CI (99.9%): [2055934.123, 2063343.367] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_makeString  thrpt   30  2059638.745 ± 3704.622  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_makeStringWithSeparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_makeStringWithSeparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1048219.751 ops/s
# Warmup Iteration   2: 2432902.021 ops/s
# Warmup Iteration   3: 2460944.209 ops/s
# Warmup Iteration   4: 2046583.152 ops/s
# Warmup Iteration   5: 2465181.982 ops/s
# Warmup Iteration   6: 2461501.931 ops/s
# Warmup Iteration   7: 2460333.584 ops/s
# Warmup Iteration   8: 2464803.072 ops/s
# Warmup Iteration   9: 2459395.991 ops/s
# Warmup Iteration  10: 2458946.111 ops/s
# Warmup Iteration  11: 2455026.054 ops/s
# Warmup Iteration  12: 2463614.726 ops/s
# Warmup Iteration  13: 2458160.775 ops/s
# Warmup Iteration  14: 2462500.145 ops/s
# Warmup Iteration  15: 2466056.611 ops/s
# Warmup Iteration  16: 2455820.196 ops/s
# Warmup Iteration  17: 2453661.649 ops/s
# Warmup Iteration  18: 2464091.799 ops/s
# Warmup Iteration  19: 2460855.671 ops/s
# Warmup Iteration  20: 2458446.911 ops/s
# Warmup Iteration  21: 2460335.699 ops/s
# Warmup Iteration  22: 2462791.263 ops/s
# Warmup Iteration  23: 2463829.565 ops/s
# Warmup Iteration  24: 2462433.130 ops/s
# Warmup Iteration  25: 2458890.726 ops/s
# Warmup Iteration  26: 2462572.662 ops/s
# Warmup Iteration  27: 2465658.041 ops/s
# Warmup Iteration  28: 2454608.850 ops/s
# Warmup Iteration  29: 2463638.085 ops/s
# Warmup Iteration  30: 2461833.208 ops/s
Iteration   1: 2463578.100 ops/s
Iteration   2: 2464086.372 ops/s
Iteration   3: 2459010.465 ops/s
Iteration   4: 2459301.497 ops/s
Iteration   5: 2458759.329 ops/s
Iteration   6: 2459355.388 ops/s
Iteration   7: 2462000.576 ops/s
Iteration   8: 2465964.507 ops/s
Iteration   9: 2451997.050 ops/s
Iteration  10: 2461461.733 ops/s
Iteration  11: 2458841.919 ops/s
Iteration  12: 2460331.178 ops/s
Iteration  13: 2463111.661 ops/s
Iteration  14: 2461485.734 ops/s
Iteration  15: 2460059.019 ops/s
Iteration  16: 2466881.182 ops/s
Iteration  17: 2455734.708 ops/s
Iteration  18: 2459982.255 ops/s
Iteration  19: 2455267.706 ops/s
Iteration  20: 2458289.780 ops/s
Iteration  21: 2460743.010 ops/s
Iteration  22: 2457243.871 ops/s
Iteration  23: 2447921.057 ops/s
Iteration  24: 2455565.289 ops/s
Iteration  25: 2456713.281 ops/s
Iteration  26: 2470379.412 ops/s
Iteration  27: 2463010.507 ops/s
Iteration  28: 2446396.798 ops/s
Iteration  29: 2464196.818 ops/s
Iteration  30: 2464235.789 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_makeStringWithSeparator":
  2459730.200 ±(99.9%) 3426.148 ops/s [Average]
  (min, avg, max) = (2446396.798, 2459730.200, 2470379.412), stdev = 5128.098
  CI (99.9%): [2456304.051, 2463156.348] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_makeStringWithSeparator  thrpt   30  2459730.200 ± 3426.148  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1047909.215 ops/s
# Warmup Iteration   2: 2396257.914 ops/s
# Warmup Iteration   3: 2385011.881 ops/s
# Warmup Iteration   4: 1980794.884 ops/s
# Warmup Iteration   5: 2380800.396 ops/s
# Warmup Iteration   6: 2371185.185 ops/s
# Warmup Iteration   7: 2375316.901 ops/s
# Warmup Iteration   8: 2373610.380 ops/s
# Warmup Iteration   9: 2377502.982 ops/s
# Warmup Iteration  10: 2366365.846 ops/s
# Warmup Iteration  11: 2379047.315 ops/s
# Warmup Iteration  12: 2369866.666 ops/s
# Warmup Iteration  13: 2376701.198 ops/s
# Warmup Iteration  14: 2369039.286 ops/s
# Warmup Iteration  15: 2349940.193 ops/s
# Warmup Iteration  16: 2371352.374 ops/s
# Warmup Iteration  17: 2381121.872 ops/s
# Warmup Iteration  18: 2377802.429 ops/s
# Warmup Iteration  19: 2383703.573 ops/s
# Warmup Iteration  20: 2383123.692 ops/s
# Warmup Iteration  21: 2382399.470 ops/s
# Warmup Iteration  22: 2378435.718 ops/s
# Warmup Iteration  23: 2376497.531 ops/s
# Warmup Iteration  24: 2384803.383 ops/s
# Warmup Iteration  25: 2386484.096 ops/s
# Warmup Iteration  26: 2377621.183 ops/s
# Warmup Iteration  27: 2375405.696 ops/s
# Warmup Iteration  28: 2374330.786 ops/s
# Warmup Iteration  29: 2381071.909 ops/s
# Warmup Iteration  30: 2378079.221 ops/s
Iteration   1: 2380935.624 ops/s
Iteration   2: 2379059.072 ops/s
Iteration   3: 2377715.220 ops/s
Iteration   4: 2365074.290 ops/s
Iteration   5: 2383537.601 ops/s
Iteration   6: 2382002.111 ops/s
Iteration   7: 2385374.546 ops/s
Iteration   8: 2380648.203 ops/s
Iteration   9: 2375267.993 ops/s
Iteration  10: 2385874.009 ops/s
Iteration  11: 2378265.437 ops/s
Iteration  12: 2381920.371 ops/s
Iteration  13: 2385158.319 ops/s
Iteration  14: 2369225.841 ops/s
Iteration  15: 2384205.231 ops/s
Iteration  16: 2377426.459 ops/s
Iteration  17: 2383090.662 ops/s
Iteration  18: 2382159.412 ops/s
Iteration  19: 2381891.597 ops/s
Iteration  20: 2387911.639 ops/s
Iteration  21: 2378123.738 ops/s
Iteration  22: 2382106.896 ops/s
Iteration  23: 2383989.253 ops/s
Iteration  24: 2382087.974 ops/s
Iteration  25: 2368907.852 ops/s
Iteration  26: 2380946.639 ops/s
Iteration  27: 2381019.385 ops/s
Iteration  28: 2379117.707 ops/s
Iteration  29: 2386812.781 ops/s
Iteration  30: 2386787.964 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd":
  2380554.794 ±(99.9%) 3560.924 ops/s [Average]
  (min, avg, max) = (2365074.290, 2380554.794, 2387911.639), stdev = 5329.824
  CI (99.9%): [2376993.870, 2384115.718] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd  thrpt   30  2380554.794 ± 3560.924  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_max$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_max

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 820560.863 ops/s
# Warmup Iteration   2: 880305.312 ops/s
# Warmup Iteration   3: 1030030.877 ops/s
# Warmup Iteration   4: 1100329.286 ops/s
# Warmup Iteration   5: 1097023.928 ops/s
# Warmup Iteration   6: 1090922.762 ops/s
# Warmup Iteration   7: 1101244.379 ops/s
# Warmup Iteration   8: 1097484.865 ops/s
# Warmup Iteration   9: 1101096.529 ops/s
# Warmup Iteration  10: 1102620.202 ops/s
# Warmup Iteration  11: 1101001.761 ops/s
# Warmup Iteration  12: 1095964.969 ops/s
# Warmup Iteration  13: 1100190.251 ops/s
# Warmup Iteration  14: 927850.066 ops/s
# Warmup Iteration  15: 1096898.852 ops/s
# Warmup Iteration  16: 1101251.838 ops/s
# Warmup Iteration  17: 1170086.606 ops/s
# Warmup Iteration  18: 1172598.712 ops/s
# Warmup Iteration  19: 1169783.782 ops/s
# Warmup Iteration  20: 1173658.224 ops/s
# Warmup Iteration  21: 1171615.833 ops/s
# Warmup Iteration  22: 1172397.767 ops/s
# Warmup Iteration  23: 1172638.099 ops/s
# Warmup Iteration  24: 1171236.015 ops/s
# Warmup Iteration  25: 1171584.757 ops/s
# Warmup Iteration  26: 1170803.175 ops/s
# Warmup Iteration  27: 1169186.976 ops/s
# Warmup Iteration  28: 1170606.062 ops/s
# Warmup Iteration  29: 1174147.046 ops/s
# Warmup Iteration  30: 1168094.433 ops/s
Iteration   1: 1169241.857 ops/s
Iteration   2: 1169983.950 ops/s
Iteration   3: 1169475.018 ops/s
Iteration   4: 1174376.572 ops/s
Iteration   5: 1172522.189 ops/s
Iteration   6: 1166403.112 ops/s
Iteration   7: 1165519.367 ops/s
Iteration   8: 1174260.198 ops/s
Iteration   9: 1170140.568 ops/s
Iteration  10: 1167880.167 ops/s
Iteration  11: 1171704.686 ops/s
Iteration  12: 1175183.059 ops/s
Iteration  13: 1171863.837 ops/s
Iteration  14: 1170534.259 ops/s
Iteration  15: 1168286.278 ops/s
Iteration  16: 1167960.613 ops/s
Iteration  17: 1168948.903 ops/s
Iteration  18: 1173160.698 ops/s
Iteration  19: 1173013.924 ops/s
Iteration  20: 1170692.222 ops/s
Iteration  21: 1179400.250 ops/s
Iteration  22: 1175542.243 ops/s
Iteration  23: 1164681.811 ops/s
Iteration  24: 1171701.276 ops/s
Iteration  25: 1171920.088 ops/s
Iteration  26: 1169699.770 ops/s
Iteration  27: 1164313.393 ops/s
Iteration  28: 1171568.251 ops/s
Iteration  29: 1170622.600 ops/s
Iteration  30: 1168966.619 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_max":
  1170652.259 ±(99.9%) 2222.298 ops/s [Average]
  (min, avg, max) = (1164313.393, 1170652.259, 1179400.250), stdev = 3326.231
  CI (99.9%): [1168429.961, 1172874.557] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_max  thrpt   30  1170652.259 ± 2222.298  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_maxBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_maxBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 816990.103 ops/s
# Warmup Iteration   2: 873580.857 ops/s
# Warmup Iteration   3: 1033530.442 ops/s
# Warmup Iteration   4: 1107202.801 ops/s
# Warmup Iteration   5: 1102954.346 ops/s
# Warmup Iteration   6: 1100922.553 ops/s
# Warmup Iteration   7: 1107389.715 ops/s
# Warmup Iteration   8: 1106620.573 ops/s
# Warmup Iteration   9: 1108243.483 ops/s
# Warmup Iteration  10: 1109118.406 ops/s
# Warmup Iteration  11: 1112586.156 ops/s
# Warmup Iteration  12: 1108887.227 ops/s
# Warmup Iteration  13: 1109046.312 ops/s
# Warmup Iteration  14: 935514.858 ops/s
# Warmup Iteration  15: 1108654.516 ops/s
# Warmup Iteration  16: 1110759.285 ops/s
# Warmup Iteration  17: 1188441.117 ops/s
# Warmup Iteration  18: 1188600.902 ops/s
# Warmup Iteration  19: 1184811.073 ops/s
# Warmup Iteration  20: 1191650.765 ops/s
# Warmup Iteration  21: 1187947.491 ops/s
# Warmup Iteration  22: 1189924.477 ops/s
# Warmup Iteration  23: 1189336.912 ops/s
# Warmup Iteration  24: 1193421.727 ops/s
# Warmup Iteration  25: 1190458.065 ops/s
# Warmup Iteration  26: 1187063.869 ops/s
# Warmup Iteration  27: 1191060.813 ops/s
# Warmup Iteration  28: 1188682.856 ops/s
# Warmup Iteration  29: 1187814.879 ops/s
# Warmup Iteration  30: 1189688.711 ops/s
Iteration   1: 1188749.338 ops/s
Iteration   2: 1193730.778 ops/s
Iteration   3: 1181685.102 ops/s
Iteration   4: 1191407.067 ops/s
Iteration   5: 1187043.058 ops/s
Iteration   6: 1189572.413 ops/s
Iteration   7: 1190394.201 ops/s
Iteration   8: 1186299.203 ops/s
Iteration   9: 1186210.849 ops/s
Iteration  10: 1188602.043 ops/s
Iteration  11: 1191332.553 ops/s
Iteration  12: 1193291.900 ops/s
Iteration  13: 1190474.958 ops/s
Iteration  14: 1189818.829 ops/s
Iteration  15: 1184929.380 ops/s
Iteration  16: 1193136.680 ops/s
Iteration  17: 1191647.522 ops/s
Iteration  18: 1189621.260 ops/s
Iteration  19: 1190499.719 ops/s
Iteration  20: 1183188.208 ops/s
Iteration  21: 1189251.414 ops/s
Iteration  22: 1185729.194 ops/s
Iteration  23: 1194459.904 ops/s
Iteration  24: 1190015.580 ops/s
Iteration  25: 1188887.103 ops/s
Iteration  26: 1186321.051 ops/s
Iteration  27: 1189039.767 ops/s
Iteration  28: 1186824.580 ops/s
Iteration  29: 1192094.267 ops/s
Iteration  30: 1192780.893 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_maxBy":
  1189234.627 ±(99.9%) 2085.752 ops/s [Average]
  (min, avg, max) = (1181685.102, 1189234.627, 1194459.904), stdev = 3121.856
  CI (99.9%): [1187148.875, 1191320.380] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_maxBy  thrpt   30  1189234.627 ± 2085.752  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_maxByOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_maxByOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1428137.521 ops/s
# Warmup Iteration   2: 3354466.163 ops/s
# Warmup Iteration   3: 3415532.101 ops/s
# Warmup Iteration   4: 2826178.024 ops/s
# Warmup Iteration   5: 3437992.706 ops/s
# Warmup Iteration   6: 3431080.385 ops/s
# Warmup Iteration   7: 3428563.290 ops/s
# Warmup Iteration   8: 3431095.096 ops/s
# Warmup Iteration   9: 3432144.009 ops/s
# Warmup Iteration  10: 3429698.748 ops/s
# Warmup Iteration  11: 3429160.566 ops/s
# Warmup Iteration  12: 3431780.925 ops/s
# Warmup Iteration  13: 3431146.302 ops/s
# Warmup Iteration  14: 3428153.916 ops/s
# Warmup Iteration  15: 3428476.753 ops/s
# Warmup Iteration  16: 3428895.065 ops/s
# Warmup Iteration  17: 3417553.026 ops/s
# Warmup Iteration  18: 3427416.021 ops/s
# Warmup Iteration  19: 3425273.907 ops/s
# Warmup Iteration  20: 3430046.645 ops/s
# Warmup Iteration  21: 3431253.479 ops/s
# Warmup Iteration  22: 3431919.370 ops/s
# Warmup Iteration  23: 3426034.373 ops/s
# Warmup Iteration  24: 3425385.456 ops/s
# Warmup Iteration  25: 3415266.347 ops/s
# Warmup Iteration  26: 3421890.012 ops/s
# Warmup Iteration  27: 3425591.292 ops/s
# Warmup Iteration  28: 3414409.438 ops/s
# Warmup Iteration  29: 3419356.502 ops/s
# Warmup Iteration  30: 3424902.010 ops/s
Iteration   1: 3425573.813 ops/s
Iteration   2: 3430781.887 ops/s
Iteration   3: 3422970.334 ops/s
Iteration   4: 3422618.318 ops/s
Iteration   5: 3425764.070 ops/s
Iteration   6: 3433389.307 ops/s
Iteration   7: 3426472.723 ops/s
Iteration   8: 3436856.304 ops/s
Iteration   9: 3431361.863 ops/s
Iteration  10: 3426405.495 ops/s
Iteration  11: 3430826.387 ops/s
Iteration  12: 3422433.656 ops/s
Iteration  13: 3426697.694 ops/s
Iteration  14: 3430420.303 ops/s
Iteration  15: 3419239.477 ops/s
Iteration  16: 3424631.406 ops/s
Iteration  17: 3433217.416 ops/s
Iteration  18: 3423028.124 ops/s
Iteration  19: 3421364.043 ops/s
Iteration  20: 3414425.836 ops/s
Iteration  21: 3425678.973 ops/s
Iteration  22: 3423750.325 ops/s
Iteration  23: 3431215.100 ops/s
Iteration  24: 3415501.288 ops/s
Iteration  25: 3423674.211 ops/s
Iteration  26: 3412449.824 ops/s
Iteration  27: 3424931.419 ops/s
Iteration  28: 3408658.268 ops/s
Iteration  29: 3426077.908 ops/s
Iteration  30: 3434998.603 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_maxByOptional":
  3425180.479 ±(99.9%) 4403.224 ops/s [Average]
  (min, avg, max) = (3408658.268, 3425180.479, 3436856.304), stdev = 6590.539
  CI (99.9%): [3420777.255, 3429583.703] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_maxByOptional  thrpt   30  3425180.479 ± 4403.224  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_maxBy_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_maxBy_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2164939.459 ops/s
# Warmup Iteration   2: 4379369.523 ops/s
# Warmup Iteration   3: 4940765.646 ops/s
# Warmup Iteration   4: 4970730.445 ops/s
# Warmup Iteration   5: 4051443.595 ops/s
# Warmup Iteration   6: 4972051.798 ops/s
# Warmup Iteration   7: 4976083.835 ops/s
# Warmup Iteration   8: 4966135.333 ops/s
# Warmup Iteration   9: 4962254.132 ops/s
# Warmup Iteration  10: 4956813.344 ops/s
# Warmup Iteration  11: 4967071.575 ops/s
# Warmup Iteration  12: 4970010.502 ops/s
# Warmup Iteration  13: 4971686.737 ops/s
# Warmup Iteration  14: 4969890.296 ops/s
# Warmup Iteration  15: 4964814.628 ops/s
# Warmup Iteration  16: 4978609.908 ops/s
# Warmup Iteration  17: 4960414.768 ops/s
# Warmup Iteration  18: 4964854.695 ops/s
# Warmup Iteration  19: 4976224.313 ops/s
# Warmup Iteration  20: 4956261.717 ops/s
# Warmup Iteration  21: 4980484.223 ops/s
# Warmup Iteration  22: 4971390.216 ops/s
# Warmup Iteration  23: 4973857.851 ops/s
# Warmup Iteration  24: 4982701.500 ops/s
# Warmup Iteration  25: 4974689.176 ops/s
# Warmup Iteration  26: 4983032.111 ops/s
# Warmup Iteration  27: 4987384.156 ops/s
# Warmup Iteration  28: 4972716.206 ops/s
# Warmup Iteration  29: 4969168.593 ops/s
# Warmup Iteration  30: 4967879.217 ops/s
Iteration   1: 4984138.062 ops/s
Iteration   2: 4983356.629 ops/s
Iteration   3: 4967519.189 ops/s
Iteration   4: 4981468.385 ops/s
Iteration   5: 4933493.694 ops/s
Iteration   6: 4960718.588 ops/s
Iteration   7: 4966661.371 ops/s
Iteration   8: 4985688.070 ops/s
Iteration   9: 4968186.993 ops/s
Iteration  10: 4966858.881 ops/s
Iteration  11: 4975079.653 ops/s
Iteration  12: 4970894.782 ops/s
Iteration  13: 4979189.133 ops/s
Iteration  14: 4982790.375 ops/s
Iteration  15: 4965351.048 ops/s
Iteration  16: 4983660.473 ops/s
Iteration  17: 4977212.107 ops/s
Iteration  18: 4976428.617 ops/s
Iteration  19: 4969153.926 ops/s
Iteration  20: 4978586.695 ops/s
Iteration  21: 4978334.798 ops/s
Iteration  22: 4973702.474 ops/s
Iteration  23: 4974199.320 ops/s
Iteration  24: 4990418.855 ops/s
Iteration  25: 4974793.148 ops/s
Iteration  26: 4971101.317 ops/s
Iteration  27: 4988318.003 ops/s
Iteration  28: 4969370.123 ops/s
Iteration  29: 4980670.730 ops/s
Iteration  30: 4983671.070 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_maxBy_null_throws":
  4974700.550 ±(99.9%) 7203.987 ops/s [Average]
  (min, avg, max) = (4933493.694, 4974700.550, 4990418.855), stdev = 10782.589
  CI (99.9%): [4967496.564, 4981904.537] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_maxBy_null_throws  thrpt   30  4974700.550 ± 7203.987  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_maxOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_maxOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 848261.882 ops/s
# Warmup Iteration   2: 1673298.056 ops/s
# Warmup Iteration   3: 1794735.439 ops/s
# Warmup Iteration   4: 1806615.863 ops/s
# Warmup Iteration   5: 1490069.739 ops/s
# Warmup Iteration   6: 1806685.462 ops/s
# Warmup Iteration   7: 1803029.566 ops/s
# Warmup Iteration   8: 1800778.916 ops/s
# Warmup Iteration   9: 1805061.361 ops/s
# Warmup Iteration  10: 1803749.170 ops/s
# Warmup Iteration  11: 1807800.412 ops/s
# Warmup Iteration  12: 1807682.998 ops/s
# Warmup Iteration  13: 1802988.417 ops/s
# Warmup Iteration  14: 1802538.851 ops/s
# Warmup Iteration  15: 1802284.281 ops/s
# Warmup Iteration  16: 1794184.155 ops/s
# Warmup Iteration  17: 1807887.975 ops/s
# Warmup Iteration  18: 1809419.407 ops/s
# Warmup Iteration  19: 1806437.317 ops/s
# Warmup Iteration  20: 1804234.923 ops/s
# Warmup Iteration  21: 1806192.838 ops/s
# Warmup Iteration  22: 1799075.100 ops/s
# Warmup Iteration  23: 1804670.123 ops/s
# Warmup Iteration  24: 1799251.707 ops/s
# Warmup Iteration  25: 1808495.055 ops/s
# Warmup Iteration  26: 1806669.398 ops/s
# Warmup Iteration  27: 1802485.489 ops/s
# Warmup Iteration  28: 1809428.050 ops/s
# Warmup Iteration  29: 1805061.825 ops/s
# Warmup Iteration  30: 1807631.855 ops/s
Iteration   1: 1808433.550 ops/s
Iteration   2: 1809721.268 ops/s
Iteration   3: 1808132.862 ops/s
Iteration   4: 1808972.384 ops/s
Iteration   5: 1806796.712 ops/s
Iteration   6: 1803229.979 ops/s
Iteration   7: 1810736.220 ops/s
Iteration   8: 1800845.741 ops/s
Iteration   9: 1806000.496 ops/s
Iteration  10: 1803149.345 ops/s
Iteration  11: 1803959.880 ops/s
Iteration  12: 1806456.160 ops/s
Iteration  13: 1809581.935 ops/s
Iteration  14: 1804094.338 ops/s
Iteration  15: 1802719.693 ops/s
Iteration  16: 1812370.166 ops/s
Iteration  17: 1804857.853 ops/s
Iteration  18: 1799869.722 ops/s
Iteration  19: 1799841.079 ops/s
Iteration  20: 1804030.888 ops/s
Iteration  21: 1807882.630 ops/s
Iteration  22: 1809195.938 ops/s
Iteration  23: 1809117.270 ops/s
Iteration  24: 1800151.771 ops/s
Iteration  25: 1804030.558 ops/s
Iteration  26: 1807351.195 ops/s
Iteration  27: 1801057.223 ops/s
Iteration  28: 1807950.273 ops/s
Iteration  29: 1808549.150 ops/s
Iteration  30: 1805787.778 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_maxOptional":
  1805829.135 ±(99.9%) 2316.858 ops/s [Average]
  (min, avg, max) = (1799841.079, 1805829.135, 1812370.166), stdev = 3467.764
  CI (99.9%): [1803512.278, 1808145.993] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_maxOptional  thrpt   30  1805829.135 ± 2316.858  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_max_empty_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_max_empty_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 672120.719 ops/s
# Warmup Iteration   2: 714682.433 ops/s
# Warmup Iteration   3: 967118.951 ops/s
# Warmup Iteration   4: 956691.591 ops/s
# Warmup Iteration   5: 948300.774 ops/s
# Warmup Iteration   6: 960927.904 ops/s
# Warmup Iteration   7: 957930.697 ops/s
# Warmup Iteration   8: 959056.655 ops/s
# Warmup Iteration   9: 959599.364 ops/s
# Warmup Iteration  10: 953434.686 ops/s
# Warmup Iteration  11: 921378.102 ops/s
# Warmup Iteration  12: 834453.824 ops/s
# Warmup Iteration  13: 959032.898 ops/s
# Warmup Iteration  14: 955444.425 ops/s
# Warmup Iteration  15: 961512.892 ops/s
# Warmup Iteration  16: 955345.663 ops/s
# Warmup Iteration  17: 1012632.777 ops/s
# Warmup Iteration  18: 1011977.324 ops/s
# Warmup Iteration  19: 1014476.997 ops/s
# Warmup Iteration  20: 1006918.974 ops/s
# Warmup Iteration  21: 1013585.533 ops/s
# Warmup Iteration  22: 1013490.713 ops/s
# Warmup Iteration  23: 1013341.177 ops/s
# Warmup Iteration  24: 1013665.074 ops/s
# Warmup Iteration  25: 1012299.008 ops/s
# Warmup Iteration  26: 1015639.814 ops/s
# Warmup Iteration  27: 1014344.817 ops/s
# Warmup Iteration  28: 1013342.084 ops/s
# Warmup Iteration  29: 1009825.658 ops/s
# Warmup Iteration  30: 1010927.436 ops/s
Iteration   1: 1011209.696 ops/s
Iteration   2: 1013240.941 ops/s
Iteration   3: 1014132.897 ops/s
Iteration   4: 1017528.903 ops/s
Iteration   5: 1007658.967 ops/s
Iteration   6: 1014296.238 ops/s
Iteration   7: 1017147.930 ops/s
Iteration   8: 1012570.533 ops/s
Iteration   9: 999839.194 ops/s
Iteration  10: 1015491.626 ops/s
Iteration  11: 1011989.722 ops/s
Iteration  12: 1017446.579 ops/s
Iteration  13: 1011987.655 ops/s
Iteration  14: 1005567.328 ops/s
Iteration  15: 1014356.178 ops/s
Iteration  16: 1009578.426 ops/s
Iteration  17: 1011321.767 ops/s
Iteration  18: 1014061.262 ops/s
Iteration  19: 1009248.181 ops/s
Iteration  20: 1009873.953 ops/s
Iteration  21: 1014185.229 ops/s
Iteration  22: 1013241.144 ops/s
Iteration  23: 1012589.991 ops/s
Iteration  24: 1015178.501 ops/s
Iteration  25: 1011641.727 ops/s
Iteration  26: 1014141.929 ops/s
Iteration  27: 1012317.022 ops/s
Iteration  28: 1012354.886 ops/s
Iteration  29: 1011817.287 ops/s
Iteration  30: 1016690.302 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_max_empty_throws":
  1012423.533 ±(99.9%) 2437.263 ops/s [Average]
  (min, avg, max) = (999839.194, 1012423.533, 1017528.903), stdev = 3647.980
  CI (99.9%): [1009986.270, 1014860.796] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_max_empty_throws  thrpt   30  1012423.533 ± 2437.263  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_max_null_safe$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_max_null_safe

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1987568.946 ops/s
# Warmup Iteration   2: 3206481.124 ops/s
# Warmup Iteration   3: 3755415.062 ops/s
# Warmup Iteration   4: 3781651.461 ops/s
# Warmup Iteration   5: 3758875.735 ops/s
# Warmup Iteration   6: 3183829.588 ops/s
# Warmup Iteration   7: 3694571.523 ops/s
# Warmup Iteration   8: 3776700.642 ops/s
# Warmup Iteration   9: 3783807.986 ops/s
# Warmup Iteration  10: 3777999.406 ops/s
# Warmup Iteration  11: 3774503.591 ops/s
# Warmup Iteration  12: 3779000.152 ops/s
# Warmup Iteration  13: 3775482.096 ops/s
# Warmup Iteration  14: 3779691.028 ops/s
# Warmup Iteration  15: 3787665.423 ops/s
# Warmup Iteration  16: 3789377.096 ops/s
# Warmup Iteration  17: 3783912.991 ops/s
# Warmup Iteration  18: 3770911.581 ops/s
# Warmup Iteration  19: 3774332.661 ops/s
# Warmup Iteration  20: 3776209.784 ops/s
# Warmup Iteration  21: 3765434.809 ops/s
# Warmup Iteration  22: 3770939.142 ops/s
# Warmup Iteration  23: 3780258.448 ops/s
# Warmup Iteration  24: 3783157.597 ops/s
# Warmup Iteration  25: 3778564.495 ops/s
# Warmup Iteration  26: 3781220.791 ops/s
# Warmup Iteration  27: 3781384.995 ops/s
# Warmup Iteration  28: 3783249.274 ops/s
# Warmup Iteration  29: 3779002.733 ops/s
# Warmup Iteration  30: 3781092.370 ops/s
Iteration   1: 3776563.527 ops/s
Iteration   2: 3777112.555 ops/s
Iteration   3: 3770370.200 ops/s
Iteration   4: 3787069.362 ops/s
Iteration   5: 3759757.059 ops/s
Iteration   6: 3774047.298 ops/s
Iteration   7: 3771653.943 ops/s
Iteration   8: 3777296.607 ops/s
Iteration   9: 3781756.703 ops/s
Iteration  10: 3772003.457 ops/s
Iteration  11: 3786511.961 ops/s
Iteration  12: 3769562.452 ops/s
Iteration  13: 3790165.094 ops/s
Iteration  14: 3773520.509 ops/s
Iteration  15: 3773549.025 ops/s
Iteration  16: 3778781.270 ops/s
Iteration  17: 3778899.514 ops/s
Iteration  18: 3769209.073 ops/s
Iteration  19: 3783312.772 ops/s
Iteration  20: 3760407.391 ops/s
Iteration  21: 3773715.205 ops/s
Iteration  22: 3774250.653 ops/s
Iteration  23: 3781664.628 ops/s
Iteration  24: 3778049.588 ops/s
Iteration  25: 3775836.956 ops/s
Iteration  26: 3773981.008 ops/s
Iteration  27: 3780785.825 ops/s
Iteration  28: 3775817.218 ops/s
Iteration  29: 3777445.730 ops/s
Iteration  30: 3773029.820 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_max_null_safe":
  3775870.880 ±(99.9%) 4471.082 ops/s [Average]
  (min, avg, max) = (3759757.059, 3775870.880, 3790165.094), stdev = 6692.105
  CI (99.9%): [3771399.798, 3780341.962] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_max_null_safe  thrpt   30  3775870.880 ± 4471.082  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_max_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_max_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 65126386.811 ops/s
# Warmup Iteration   2: 133607537.407 ops/s
# Warmup Iteration   3: 120126485.960 ops/s
# Warmup Iteration   4: 138813755.264 ops/s
# Warmup Iteration   5: 138652294.329 ops/s
# Warmup Iteration   6: 138923934.912 ops/s
# Warmup Iteration   7: 138527226.803 ops/s
# Warmup Iteration   8: 138260315.163 ops/s
# Warmup Iteration   9: 137930659.013 ops/s
# Warmup Iteration  10: 138791248.499 ops/s
# Warmup Iteration  11: 139492974.772 ops/s
# Warmup Iteration  12: 139933924.691 ops/s
# Warmup Iteration  13: 138069324.981 ops/s
# Warmup Iteration  14: 138733612.050 ops/s
# Warmup Iteration  15: 138946036.691 ops/s
# Warmup Iteration  16: 139376303.931 ops/s
# Warmup Iteration  17: 138052508.188 ops/s
# Warmup Iteration  18: 137602683.043 ops/s
# Warmup Iteration  19: 137145838.531 ops/s
# Warmup Iteration  20: 137312003.820 ops/s
# Warmup Iteration  21: 137525864.235 ops/s
# Warmup Iteration  22: 137980031.733 ops/s
# Warmup Iteration  23: 137434831.397 ops/s
# Warmup Iteration  24: 137034241.927 ops/s
# Warmup Iteration  25: 138063746.960 ops/s
# Warmup Iteration  26: 137772418.988 ops/s
# Warmup Iteration  27: 137782601.929 ops/s
# Warmup Iteration  28: 137642554.725 ops/s
# Warmup Iteration  29: 137369305.918 ops/s
# Warmup Iteration  30: 137682258.785 ops/s
Iteration   1: 137373773.512 ops/s
Iteration   2: 137028080.096 ops/s
Iteration   3: 139039211.810 ops/s
Iteration   4: 137637900.136 ops/s
Iteration   5: 138132946.300 ops/s
Iteration   6: 137406599.069 ops/s
Iteration   7: 137829011.622 ops/s
Iteration   8: 137772592.170 ops/s
Iteration   9: 137533135.833 ops/s
Iteration  10: 138039191.691 ops/s
Iteration  11: 138158912.125 ops/s
Iteration  12: 137481838.252 ops/s
Iteration  13: 138017519.363 ops/s
Iteration  14: 138057317.691 ops/s
Iteration  15: 137920990.080 ops/s
Iteration  16: 138336568.585 ops/s
Iteration  17: 138262519.793 ops/s
Iteration  18: 138356233.070 ops/s
Iteration  19: 137196537.950 ops/s
Iteration  20: 137424375.211 ops/s
Iteration  21: 136766857.401 ops/s
Iteration  22: 138374899.216 ops/s
Iteration  23: 136635978.459 ops/s
Iteration  24: 138001708.917 ops/s
Iteration  25: 136721212.883 ops/s
Iteration  26: 137539008.099 ops/s
Iteration  27: 137533775.104 ops/s
Iteration  28: 138132426.298 ops/s
Iteration  29: 137887737.651 ops/s
Iteration  30: 138204302.903 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_max_null_throws":
  137760105.376 ±(99.9%) 366780.900 ops/s [Average]
  (min, avg, max) = (136635978.459, 137760105.376, 139039211.810), stdev = 548980.426
  CI (99.9%): [137393324.476, 138126886.277] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt          Score        Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_max_null_throws  thrpt   30  137760105.376 ± 366780.900  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_max_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_max_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 65549493.546 ops/s
# Warmup Iteration   2: 133149201.297 ops/s
# Warmup Iteration   3: 114491611.072 ops/s
# Warmup Iteration   4: 146527142.202 ops/s
# Warmup Iteration   5: 145590921.694 ops/s
# Warmup Iteration   6: 145990495.619 ops/s
# Warmup Iteration   7: 146241751.715 ops/s
# Warmup Iteration   8: 146162770.188 ops/s
# Warmup Iteration   9: 146297819.655 ops/s
# Warmup Iteration  10: 146047562.482 ops/s
# Warmup Iteration  11: 145556183.233 ops/s
# Warmup Iteration  12: 145970476.284 ops/s
# Warmup Iteration  13: 145983872.794 ops/s
# Warmup Iteration  14: 147280232.182 ops/s
# Warmup Iteration  15: 147733384.875 ops/s
# Warmup Iteration  16: 146782916.420 ops/s
# Warmup Iteration  17: 140580537.361 ops/s
# Warmup Iteration  18: 141362830.985 ops/s
# Warmup Iteration  19: 141080666.590 ops/s
# Warmup Iteration  20: 140967140.051 ops/s
# Warmup Iteration  21: 141115150.608 ops/s
# Warmup Iteration  22: 140403949.004 ops/s
# Warmup Iteration  23: 141378537.743 ops/s
# Warmup Iteration  24: 140323559.174 ops/s
# Warmup Iteration  25: 141125941.273 ops/s
# Warmup Iteration  26: 141813520.452 ops/s
# Warmup Iteration  27: 140840638.115 ops/s
# Warmup Iteration  28: 139902155.349 ops/s
# Warmup Iteration  29: 141884635.561 ops/s
# Warmup Iteration  30: 141300343.635 ops/s
Iteration   1: 140319309.576 ops/s
Iteration   2: 141579491.111 ops/s
Iteration   3: 141014707.693 ops/s
Iteration   4: 141074548.750 ops/s
Iteration   5: 140691021.650 ops/s
Iteration   6: 141961603.725 ops/s
Iteration   7: 141550617.614 ops/s
Iteration   8: 140640451.953 ops/s
Iteration   9: 141557396.961 ops/s
Iteration  10: 140595488.951 ops/s
Iteration  11: 141887028.598 ops/s
Iteration  12: 141462120.570 ops/s
Iteration  13: 139755931.575 ops/s
Iteration  14: 140410073.174 ops/s
Iteration  15: 140901372.356 ops/s
Iteration  16: 140556227.314 ops/s
Iteration  17: 140592611.233 ops/s
Iteration  18: 141075697.938 ops/s
Iteration  19: 140262369.707 ops/s
Iteration  20: 141218742.357 ops/s
Iteration  21: 141210292.096 ops/s
Iteration  22: 140436952.643 ops/s
Iteration  23: 140975283.910 ops/s
Iteration  24: 141559895.400 ops/s
Iteration  25: 140740171.753 ops/s
Iteration  26: 140076450.174 ops/s
Iteration  27: 140817914.235 ops/s
Iteration  28: 141354395.239 ops/s
Iteration  29: 141028190.564 ops/s
Iteration  30: 140666112.396 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_max_null_throws_without_comparator":
  140932415.707 ±(99.9%) 358032.304 ops/s [Average]
  (min, avg, max) = (139755931.575, 140932415.707, 141961603.725), stdev = 535885.938
  CI (99.9%): [140574383.404, 141290448.011] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt          Score        Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_max_null_throws_without_comparator  thrpt   30  140932415.707 ± 358032.304  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_max_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_max_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 826631.960 ops/s
# Warmup Iteration   2: 882491.289 ops/s
# Warmup Iteration   3: 1045956.128 ops/s
# Warmup Iteration   4: 1116223.138 ops/s
# Warmup Iteration   5: 1116036.698 ops/s
# Warmup Iteration   6: 1107006.324 ops/s
# Warmup Iteration   7: 1119241.313 ops/s
# Warmup Iteration   8: 1114140.560 ops/s
# Warmup Iteration   9: 1116038.129 ops/s
# Warmup Iteration  10: 1108906.923 ops/s
# Warmup Iteration  11: 1116023.768 ops/s
# Warmup Iteration  12: 1116679.025 ops/s
# Warmup Iteration  13: 1098001.733 ops/s
# Warmup Iteration  14: 957608.126 ops/s
# Warmup Iteration  15: 1118379.736 ops/s
# Warmup Iteration  16: 1117061.637 ops/s
# Warmup Iteration  17: 1189039.179 ops/s
# Warmup Iteration  18: 1188572.431 ops/s
# Warmup Iteration  19: 1186174.476 ops/s
# Warmup Iteration  20: 1189101.786 ops/s
# Warmup Iteration  21: 1187141.048 ops/s
# Warmup Iteration  22: 1188438.739 ops/s
# Warmup Iteration  23: 1185584.620 ops/s
# Warmup Iteration  24: 1186740.196 ops/s
# Warmup Iteration  25: 1187749.443 ops/s
# Warmup Iteration  26: 1191032.076 ops/s
# Warmup Iteration  27: 1188384.055 ops/s
# Warmup Iteration  28: 1187124.028 ops/s
# Warmup Iteration  29: 1189124.111 ops/s
# Warmup Iteration  30: 1188081.375 ops/s
Iteration   1: 1189539.871 ops/s
Iteration   2: 1184479.321 ops/s
Iteration   3: 1188387.900 ops/s
Iteration   4: 1181041.247 ops/s
Iteration   5: 1191614.564 ops/s
Iteration   6: 1191162.072 ops/s
Iteration   7: 1179700.910 ops/s
Iteration   8: 1187220.221 ops/s
Iteration   9: 1192572.831 ops/s
Iteration  10: 1192531.743 ops/s
Iteration  11: 1190016.226 ops/s
Iteration  12: 1189758.414 ops/s
Iteration  13: 1188623.374 ops/s
Iteration  14: 1181792.319 ops/s
Iteration  15: 1190953.611 ops/s
Iteration  16: 1187733.713 ops/s
Iteration  17: 1184891.038 ops/s
Iteration  18: 1191098.359 ops/s
Iteration  19: 1191203.430 ops/s
Iteration  20: 1186671.409 ops/s
Iteration  21: 1190650.414 ops/s
Iteration  22: 1185938.503 ops/s
Iteration  23: 1187626.865 ops/s
Iteration  24: 1187554.914 ops/s
Iteration  25: 1189288.605 ops/s
Iteration  26: 1187631.929 ops/s
Iteration  27: 1190506.123 ops/s
Iteration  28: 1184372.547 ops/s
Iteration  29: 1190475.172 ops/s
Iteration  30: 1184161.958 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_max_without_comparator":
  1187973.320 ±(99.9%) 2278.168 ops/s [Average]
  (min, avg, max) = (1179700.910, 1187973.320, 1192572.831), stdev = 3409.855
  CI (99.9%): [1185695.152, 1190251.488] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_max_without_comparator  thrpt   30  1187973.320 ± 2278.168  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_min$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_min

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 821542.360 ops/s
# Warmup Iteration   2: 875847.081 ops/s
# Warmup Iteration   3: 1034801.990 ops/s
# Warmup Iteration   4: 1113462.529 ops/s
# Warmup Iteration   5: 1111196.384 ops/s
# Warmup Iteration   6: 1100027.277 ops/s
# Warmup Iteration   7: 1108716.401 ops/s
# Warmup Iteration   8: 1110006.521 ops/s
# Warmup Iteration   9: 1107543.153 ops/s
# Warmup Iteration  10: 1111213.351 ops/s
# Warmup Iteration  11: 1112899.645 ops/s
# Warmup Iteration  12: 1113917.639 ops/s
# Warmup Iteration  13: 1108966.987 ops/s
# Warmup Iteration  14: 937561.973 ops/s
# Warmup Iteration  15: 1108594.881 ops/s
# Warmup Iteration  16: 1108257.938 ops/s
# Warmup Iteration  17: 1184522.328 ops/s
# Warmup Iteration  18: 1186561.774 ops/s
# Warmup Iteration  19: 1184393.072 ops/s
# Warmup Iteration  20: 1186219.201 ops/s
# Warmup Iteration  21: 1185231.156 ops/s
# Warmup Iteration  22: 1186364.151 ops/s
# Warmup Iteration  23: 1187102.032 ops/s
# Warmup Iteration  24: 1187780.076 ops/s
# Warmup Iteration  25: 1189148.801 ops/s
# Warmup Iteration  26: 1180334.835 ops/s
# Warmup Iteration  27: 1186454.886 ops/s
# Warmup Iteration  28: 1183955.614 ops/s
# Warmup Iteration  29: 1188351.446 ops/s
# Warmup Iteration  30: 1185180.193 ops/s
Iteration   1: 1185241.352 ops/s
Iteration   2: 1184147.226 ops/s
Iteration   3: 1184416.051 ops/s
Iteration   4: 1184702.242 ops/s
Iteration   5: 1186707.025 ops/s
Iteration   6: 1186336.762 ops/s
Iteration   7: 1189251.118 ops/s
Iteration   8: 1188062.295 ops/s
Iteration   9: 1187655.810 ops/s
Iteration  10: 1189416.974 ops/s
Iteration  11: 1188018.407 ops/s
Iteration  12: 1186245.688 ops/s
Iteration  13: 1182135.592 ops/s
Iteration  14: 1186720.613 ops/s
Iteration  15: 1187367.889 ops/s
Iteration  16: 1187979.053 ops/s
Iteration  17: 1185786.305 ops/s
Iteration  18: 1182023.317 ops/s
Iteration  19: 1189247.934 ops/s
Iteration  20: 1186917.508 ops/s
Iteration  21: 1186368.978 ops/s
Iteration  22: 1179580.659 ops/s
Iteration  23: 1187219.248 ops/s
Iteration  24: 1188876.107 ops/s
Iteration  25: 1188411.852 ops/s
Iteration  26: 1183699.315 ops/s
Iteration  27: 1182821.481 ops/s
Iteration  28: 1188616.047 ops/s
Iteration  29: 1190046.178 ops/s
Iteration  30: 1182232.929 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_min":
  1186208.399 ±(99.9%) 1750.596 ops/s [Average]
  (min, avg, max) = (1179580.659, 1186208.399, 1190046.178), stdev = 2620.210
  CI (99.9%): [1184457.802, 1187958.995] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_min  thrpt   30  1186208.399 ± 1750.596  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_minBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_minBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 819654.812 ops/s
# Warmup Iteration   2: 878577.582 ops/s
# Warmup Iteration   3: 1023841.614 ops/s
# Warmup Iteration   4: 1101321.219 ops/s
# Warmup Iteration   5: 1098200.247 ops/s
# Warmup Iteration   6: 1094290.407 ops/s
# Warmup Iteration   7: 1099705.523 ops/s
# Warmup Iteration   8: 1100619.525 ops/s
# Warmup Iteration   9: 1102228.413 ops/s
# Warmup Iteration  10: 1100777.335 ops/s
# Warmup Iteration  11: 1103479.984 ops/s
# Warmup Iteration  12: 1098775.798 ops/s
# Warmup Iteration  13: 1099362.476 ops/s
# Warmup Iteration  14: 924431.688 ops/s
# Warmup Iteration  15: 1096581.417 ops/s
# Warmup Iteration  16: 1094802.914 ops/s
# Warmup Iteration  17: 1166466.842 ops/s
# Warmup Iteration  18: 1170281.796 ops/s
# Warmup Iteration  19: 1170898.792 ops/s
# Warmup Iteration  20: 1169426.536 ops/s
# Warmup Iteration  21: 1165172.750 ops/s
# Warmup Iteration  22: 1170168.664 ops/s
# Warmup Iteration  23: 1168023.257 ops/s
# Warmup Iteration  24: 1168703.740 ops/s
# Warmup Iteration  25: 1159629.171 ops/s
# Warmup Iteration  26: 1170291.663 ops/s
# Warmup Iteration  27: 1171853.721 ops/s
# Warmup Iteration  28: 1166685.519 ops/s
# Warmup Iteration  29: 1169178.244 ops/s
# Warmup Iteration  30: 1168313.064 ops/s
Iteration   1: 1167433.435 ops/s
Iteration   2: 1170599.736 ops/s
Iteration   3: 1170445.411 ops/s
Iteration   4: 1170740.215 ops/s
Iteration   5: 1166378.321 ops/s
Iteration   6: 1176230.932 ops/s
Iteration   7: 1171380.580 ops/s
Iteration   8: 1162200.826 ops/s
Iteration   9: 1171731.774 ops/s
Iteration  10: 1171219.406 ops/s
Iteration  11: 1161402.821 ops/s
Iteration  12: 1169002.549 ops/s
Iteration  13: 1172146.336 ops/s
Iteration  14: 1168764.048 ops/s
Iteration  15: 1170669.028 ops/s
Iteration  16: 1168656.199 ops/s
Iteration  17: 1167740.057 ops/s
Iteration  18: 1161632.679 ops/s
Iteration  19: 1171637.805 ops/s
Iteration  20: 1170143.785 ops/s
Iteration  21: 1164601.240 ops/s
Iteration  22: 1168424.508 ops/s
Iteration  23: 1162594.505 ops/s
Iteration  24: 1173545.225 ops/s
Iteration  25: 1166221.060 ops/s
Iteration  26: 1172150.419 ops/s
Iteration  27: 1173114.387 ops/s
Iteration  28: 1162393.691 ops/s
Iteration  29: 1162278.559 ops/s
Iteration  30: 1164605.809 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_minBy":
  1168336.178 ±(99.9%) 2715.695 ops/s [Average]
  (min, avg, max) = (1161402.821, 1168336.178, 1176230.932), stdev = 4064.725
  CI (99.9%): [1165620.483, 1171051.873] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_minBy  thrpt   30  1168336.178 ± 2715.695  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_minByOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_minByOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1600734.566 ops/s
# Warmup Iteration   2: 3432186.441 ops/s
# Warmup Iteration   3: 3543327.927 ops/s
# Warmup Iteration   4: 3015995.481 ops/s
# Warmup Iteration   5: 3448439.425 ops/s
# Warmup Iteration   6: 3548632.312 ops/s
# Warmup Iteration   7: 3548045.502 ops/s
# Warmup Iteration   8: 3543233.818 ops/s
# Warmup Iteration   9: 3538442.874 ops/s
# Warmup Iteration  10: 3551242.442 ops/s
# Warmup Iteration  11: 3548057.328 ops/s
# Warmup Iteration  12: 3550044.726 ops/s
# Warmup Iteration  13: 3543327.197 ops/s
# Warmup Iteration  14: 3547016.775 ops/s
# Warmup Iteration  15: 3550513.899 ops/s
# Warmup Iteration  16: 3542116.053 ops/s
# Warmup Iteration  17: 3542808.895 ops/s
# Warmup Iteration  18: 3545042.222 ops/s
# Warmup Iteration  19: 3547549.585 ops/s
# Warmup Iteration  20: 3542152.774 ops/s
# Warmup Iteration  21: 3541240.492 ops/s
# Warmup Iteration  22: 3546905.658 ops/s
# Warmup Iteration  23: 3531160.760 ops/s
# Warmup Iteration  24: 3538039.512 ops/s
# Warmup Iteration  25: 3543994.382 ops/s
# Warmup Iteration  26: 3549918.684 ops/s
# Warmup Iteration  27: 3541957.928 ops/s
# Warmup Iteration  28: 3543609.532 ops/s
# Warmup Iteration  29: 3533448.656 ops/s
# Warmup Iteration  30: 3542905.248 ops/s
Iteration   1: 3539473.166 ops/s
Iteration   2: 3554322.443 ops/s
Iteration   3: 3537730.251 ops/s
Iteration   4: 3550613.930 ops/s
Iteration   5: 3544658.709 ops/s
Iteration   6: 3546405.544 ops/s
Iteration   7: 3546264.221 ops/s
Iteration   8: 3543379.730 ops/s
Iteration   9: 3531034.539 ops/s
Iteration  10: 3536593.559 ops/s
Iteration  11: 3545915.541 ops/s
Iteration  12: 3533529.491 ops/s
Iteration  13: 3538120.992 ops/s
Iteration  14: 3552269.012 ops/s
Iteration  15: 3547542.277 ops/s
Iteration  16: 3542887.349 ops/s
Iteration  17: 3544103.963 ops/s
Iteration  18: 3529730.048 ops/s
Iteration  19: 3535351.748 ops/s
Iteration  20: 3557048.321 ops/s
Iteration  21: 3540445.902 ops/s
Iteration  22: 3548373.065 ops/s
Iteration  23: 3550197.745 ops/s
Iteration  24: 3524365.842 ops/s
Iteration  25: 3534951.354 ops/s
Iteration  26: 3547434.767 ops/s
Iteration  27: 3541863.735 ops/s
Iteration  28: 3544539.192 ops/s
Iteration  29: 3540732.455 ops/s
Iteration  30: 3538669.855 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_minByOptional":
  3542284.958 ±(99.9%) 5006.702 ops/s [Average]
  (min, avg, max) = (3524365.842, 3542284.958, 3557048.321), stdev = 7493.796
  CI (99.9%): [3537278.257, 3547291.660] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_minByOptional  thrpt   30  3542284.958 ± 5006.702  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_minBy_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_minBy_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1724175.925 ops/s
# Warmup Iteration   2: 2788979.567 ops/s
# Warmup Iteration   3: 3294184.787 ops/s
# Warmup Iteration   4: 3330902.547 ops/s
# Warmup Iteration   5: 3334205.403 ops/s
# Warmup Iteration   6: 3048883.170 ops/s
# Warmup Iteration   7: 3011746.216 ops/s
# Warmup Iteration   8: 3340433.588 ops/s
# Warmup Iteration   9: 3339433.180 ops/s
# Warmup Iteration  10: 3339540.046 ops/s
# Warmup Iteration  11: 3345793.366 ops/s
# Warmup Iteration  12: 3342827.087 ops/s
# Warmup Iteration  13: 3331151.824 ops/s
# Warmup Iteration  14: 3336714.864 ops/s
# Warmup Iteration  15: 3336238.131 ops/s
# Warmup Iteration  16: 3347166.405 ops/s
# Warmup Iteration  17: 3331204.008 ops/s
# Warmup Iteration  18: 3333706.573 ops/s
# Warmup Iteration  19: 3335905.209 ops/s
# Warmup Iteration  20: 3337562.257 ops/s
# Warmup Iteration  21: 3338555.706 ops/s
# Warmup Iteration  22: 3342053.936 ops/s
# Warmup Iteration  23: 3338045.509 ops/s
# Warmup Iteration  24: 3336070.980 ops/s
# Warmup Iteration  25: 3334489.307 ops/s
# Warmup Iteration  26: 3337487.265 ops/s
# Warmup Iteration  27: 3336487.009 ops/s
# Warmup Iteration  28: 3329922.417 ops/s
# Warmup Iteration  29: 3332209.564 ops/s
# Warmup Iteration  30: 3335713.560 ops/s
Iteration   1: 3333192.508 ops/s
Iteration   2: 3338055.237 ops/s
Iteration   3: 3342059.922 ops/s
Iteration   4: 3333317.550 ops/s
Iteration   5: 3327523.258 ops/s
Iteration   6: 3333204.999 ops/s
Iteration   7: 3332889.867 ops/s
Iteration   8: 3330191.399 ops/s
Iteration   9: 3343795.648 ops/s
Iteration  10: 3331490.186 ops/s
Iteration  11: 3336289.536 ops/s
Iteration  12: 3333291.893 ops/s
Iteration  13: 3340350.252 ops/s
Iteration  14: 3336205.791 ops/s
Iteration  15: 3340914.945 ops/s
Iteration  16: 3327457.465 ops/s
Iteration  17: 3340749.489 ops/s
Iteration  18: 3343672.548 ops/s
Iteration  19: 3322449.829 ops/s
Iteration  20: 3330655.152 ops/s
Iteration  21: 3348208.782 ops/s
Iteration  22: 3338110.934 ops/s
Iteration  23: 3333950.900 ops/s
Iteration  24: 3337952.008 ops/s
Iteration  25: 3342915.860 ops/s
Iteration  26: 3340352.019 ops/s
Iteration  27: 3345628.964 ops/s
Iteration  28: 3336298.593 ops/s
Iteration  29: 3346076.654 ops/s
Iteration  30: 3340429.102 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_minBy_null_throws":
  3336922.710 ±(99.9%) 4103.623 ops/s [Average]
  (min, avg, max) = (3322449.829, 3336922.710, 3348208.782), stdev = 6142.110
  CI (99.9%): [3332819.086, 3341026.333] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_minBy_null_throws  thrpt   30  3336922.710 ± 4103.623  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_minOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_minOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 848870.578 ops/s
# Warmup Iteration   2: 1728691.287 ops/s
# Warmup Iteration   3: 1854766.160 ops/s
# Warmup Iteration   4: 1861860.127 ops/s
# Warmup Iteration   5: 1535303.056 ops/s
# Warmup Iteration   6: 1863935.676 ops/s
# Warmup Iteration   7: 1867356.650 ops/s
# Warmup Iteration   8: 1865951.160 ops/s
# Warmup Iteration   9: 1863733.880 ops/s
# Warmup Iteration  10: 1863329.052 ops/s
# Warmup Iteration  11: 1867269.645 ops/s
# Warmup Iteration  12: 1866259.616 ops/s
# Warmup Iteration  13: 1866010.458 ops/s
# Warmup Iteration  14: 1860810.437 ops/s
# Warmup Iteration  15: 1866360.165 ops/s
# Warmup Iteration  16: 1869115.373 ops/s
# Warmup Iteration  17: 1865513.133 ops/s
# Warmup Iteration  18: 1866216.331 ops/s
# Warmup Iteration  19: 1863871.501 ops/s
# Warmup Iteration  20: 1868974.428 ops/s
# Warmup Iteration  21: 1861563.465 ops/s
# Warmup Iteration  22: 1864601.852 ops/s
# Warmup Iteration  23: 1869679.608 ops/s
# Warmup Iteration  24: 1868692.752 ops/s
# Warmup Iteration  25: 1871512.104 ops/s
# Warmup Iteration  26: 1865458.870 ops/s
# Warmup Iteration  27: 1863225.897 ops/s
# Warmup Iteration  28: 1865246.012 ops/s
# Warmup Iteration  29: 1864739.945 ops/s
# Warmup Iteration  30: 1863055.127 ops/s
Iteration   1: 1861409.092 ops/s
Iteration   2: 1868190.940 ops/s
Iteration   3: 1856054.953 ops/s
Iteration   4: 1869060.981 ops/s
Iteration   5: 1870563.985 ops/s
Iteration   6: 1863480.082 ops/s
Iteration   7: 1862207.103 ops/s
Iteration   8: 1863307.657 ops/s
Iteration   9: 1870481.280 ops/s
Iteration  10: 1867889.113 ops/s
Iteration  11: 1861570.907 ops/s
Iteration  12: 1872208.211 ops/s
Iteration  13: 1868728.398 ops/s
Iteration  14: 1860605.046 ops/s
Iteration  15: 1865333.191 ops/s
Iteration  16: 1866199.543 ops/s
Iteration  17: 1867486.750 ops/s
Iteration  18: 1864707.576 ops/s
Iteration  19: 1866857.538 ops/s
Iteration  20: 1863265.943 ops/s
Iteration  21: 1861902.386 ops/s
Iteration  22: 1865751.343 ops/s
Iteration  23: 1868030.203 ops/s
Iteration  24: 1862897.804 ops/s
Iteration  25: 1872693.677 ops/s
Iteration  26: 1868367.374 ops/s
Iteration  27: 1861226.852 ops/s
Iteration  28: 1861599.689 ops/s
Iteration  29: 1872405.766 ops/s
Iteration  30: 1864227.923 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_minOptional":
  1865623.710 ±(99.9%) 2709.571 ops/s [Average]
  (min, avg, max) = (1856054.953, 1865623.710, 1872693.677), stdev = 4055.558
  CI (99.9%): [1862914.140, 1868333.281] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_minOptional  thrpt   30  1865623.710 ± 2709.571  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_min_empty_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_min_empty_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 672262.070 ops/s
# Warmup Iteration   2: 719290.447 ops/s
# Warmup Iteration   3: 965366.283 ops/s
# Warmup Iteration   4: 947022.257 ops/s
# Warmup Iteration   5: 954538.359 ops/s
# Warmup Iteration   6: 961365.265 ops/s
# Warmup Iteration   7: 956286.670 ops/s
# Warmup Iteration   8: 959089.224 ops/s
# Warmup Iteration   9: 957266.038 ops/s
# Warmup Iteration  10: 959775.489 ops/s
# Warmup Iteration  11: 927927.580 ops/s
# Warmup Iteration  12: 836500.190 ops/s
# Warmup Iteration  13: 960634.921 ops/s
# Warmup Iteration  14: 958558.659 ops/s
# Warmup Iteration  15: 957678.047 ops/s
# Warmup Iteration  16: 959262.579 ops/s
# Warmup Iteration  17: 1017541.452 ops/s
# Warmup Iteration  18: 1017196.127 ops/s
# Warmup Iteration  19: 1016238.675 ops/s
# Warmup Iteration  20: 1019965.569 ops/s
# Warmup Iteration  21: 1017530.795 ops/s
# Warmup Iteration  22: 1017775.314 ops/s
# Warmup Iteration  23: 1014339.620 ops/s
# Warmup Iteration  24: 1014438.051 ops/s
# Warmup Iteration  25: 1014274.571 ops/s
# Warmup Iteration  26: 1014294.459 ops/s
# Warmup Iteration  27: 1015114.546 ops/s
# Warmup Iteration  28: 1015488.747 ops/s
# Warmup Iteration  29: 1012690.415 ops/s
# Warmup Iteration  30: 1015264.206 ops/s
Iteration   1: 1013808.053 ops/s
Iteration   2: 1010756.128 ops/s
Iteration   3: 1017003.729 ops/s
Iteration   4: 1016864.084 ops/s
Iteration   5: 1014864.285 ops/s
Iteration   6: 1009508.300 ops/s
Iteration   7: 1018192.672 ops/s
Iteration   8: 1015854.143 ops/s
Iteration   9: 1011858.620 ops/s
Iteration  10: 1018522.962 ops/s
Iteration  11: 1017528.859 ops/s
Iteration  12: 1012683.924 ops/s
Iteration  13: 1015578.955 ops/s
Iteration  14: 1017838.899 ops/s
Iteration  15: 1018445.524 ops/s
Iteration  16: 1011381.443 ops/s
Iteration  17: 1017459.340 ops/s
Iteration  18: 1017343.442 ops/s
Iteration  19: 1015957.328 ops/s
Iteration  20: 1017858.262 ops/s
Iteration  21: 1012291.687 ops/s
Iteration  22: 1017650.427 ops/s
Iteration  23: 1016557.280 ops/s
Iteration  24: 1013392.076 ops/s
Iteration  25: 1007877.706 ops/s
Iteration  26: 1016048.579 ops/s
Iteration  27: 1015025.931 ops/s
Iteration  28: 1017928.844 ops/s
Iteration  29: 1010072.126 ops/s
Iteration  30: 1019208.585 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_min_empty_throws":
  1015178.740 ±(99.9%) 2064.336 ops/s [Average]
  (min, avg, max) = (1007877.706, 1015178.740, 1019208.585), stdev = 3089.802
  CI (99.9%): [1013114.403, 1017243.076] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_min_empty_throws  thrpt   30  1015178.740 ± 2064.336  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_min_null_safe$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_min_null_safe

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2013074.619 ops/s
# Warmup Iteration   2: 3339513.593 ops/s
# Warmup Iteration   3: 3884503.998 ops/s
# Warmup Iteration   4: 3904192.435 ops/s
# Warmup Iteration   5: 3897837.933 ops/s
# Warmup Iteration   6: 3197234.322 ops/s
# Warmup Iteration   7: 3905118.351 ops/s
# Warmup Iteration   8: 3901211.946 ops/s
# Warmup Iteration   9: 3911381.693 ops/s
# Warmup Iteration  10: 3885651.121 ops/s
# Warmup Iteration  11: 3915848.646 ops/s
# Warmup Iteration  12: 3910689.140 ops/s
# Warmup Iteration  13: 3894030.200 ops/s
# Warmup Iteration  14: 3903023.728 ops/s
# Warmup Iteration  15: 3916089.774 ops/s
# Warmup Iteration  16: 3896366.433 ops/s
# Warmup Iteration  17: 3916052.415 ops/s
# Warmup Iteration  18: 3904543.453 ops/s
# Warmup Iteration  19: 3901682.034 ops/s
# Warmup Iteration  20: 3911525.680 ops/s
# Warmup Iteration  21: 3910157.644 ops/s
# Warmup Iteration  22: 3907521.867 ops/s
# Warmup Iteration  23: 3907612.835 ops/s
# Warmup Iteration  24: 3909743.667 ops/s
# Warmup Iteration  25: 3909050.107 ops/s
# Warmup Iteration  26: 3905940.325 ops/s
# Warmup Iteration  27: 3905140.186 ops/s
# Warmup Iteration  28: 3912980.235 ops/s
# Warmup Iteration  29: 3903504.538 ops/s
# Warmup Iteration  30: 3913164.647 ops/s
Iteration   1: 3903431.985 ops/s
Iteration   2: 3900806.935 ops/s
Iteration   3: 3926573.162 ops/s
Iteration   4: 3910268.304 ops/s
Iteration   5: 3900188.596 ops/s
Iteration   6: 3906982.161 ops/s
Iteration   7: 3916229.923 ops/s
Iteration   8: 3910249.047 ops/s
Iteration   9: 3906622.391 ops/s
Iteration  10: 3913761.399 ops/s
Iteration  11: 3897836.955 ops/s
Iteration  12: 3898817.176 ops/s
Iteration  13: 3922054.696 ops/s
Iteration  14: 3914770.497 ops/s
Iteration  15: 3911947.637 ops/s
Iteration  16: 3903226.465 ops/s
Iteration  17: 3913792.716 ops/s
Iteration  18: 3894991.705 ops/s
Iteration  19: 3909403.376 ops/s
Iteration  20: 3913606.128 ops/s
Iteration  21: 3899328.140 ops/s
Iteration  22: 3913942.986 ops/s
Iteration  23: 3899536.025 ops/s
Iteration  24: 3918495.496 ops/s
Iteration  25: 3905079.118 ops/s
Iteration  26: 3905710.762 ops/s
Iteration  27: 3899827.396 ops/s
Iteration  28: 3917434.975 ops/s
Iteration  29: 3899622.260 ops/s
Iteration  30: 3918265.812 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_min_null_safe":
  3908426.807 ±(99.9%) 5450.670 ops/s [Average]
  (min, avg, max) = (3894991.705, 3908426.807, 3926573.162), stdev = 8158.307
  CI (99.9%): [3902976.138, 3913877.477] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_min_null_safe  thrpt   30  3908426.807 ± 5450.670  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_min_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_min_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 66036351.255 ops/s
# Warmup Iteration   2: 133359994.965 ops/s
# Warmup Iteration   3: 119777819.072 ops/s
# Warmup Iteration   4: 140317301.273 ops/s
# Warmup Iteration   5: 140011145.259 ops/s
# Warmup Iteration   6: 138981179.629 ops/s
# Warmup Iteration   7: 139324313.518 ops/s
# Warmup Iteration   8: 139411345.533 ops/s
# Warmup Iteration   9: 139438397.492 ops/s
# Warmup Iteration  10: 140059451.721 ops/s
# Warmup Iteration  11: 138514543.021 ops/s
# Warmup Iteration  12: 139964048.403 ops/s
# Warmup Iteration  13: 139928841.930 ops/s
# Warmup Iteration  14: 140267050.187 ops/s
# Warmup Iteration  15: 140329776.828 ops/s
# Warmup Iteration  16: 139538178.689 ops/s
# Warmup Iteration  17: 138581087.815 ops/s
# Warmup Iteration  18: 138322730.465 ops/s
# Warmup Iteration  19: 138558960.759 ops/s
# Warmup Iteration  20: 138511427.876 ops/s
# Warmup Iteration  21: 138391912.102 ops/s
# Warmup Iteration  22: 138280292.557 ops/s
# Warmup Iteration  23: 138256048.975 ops/s
# Warmup Iteration  24: 137610099.009 ops/s
# Warmup Iteration  25: 138356614.261 ops/s
# Warmup Iteration  26: 138401067.517 ops/s
# Warmup Iteration  27: 138428482.182 ops/s
# Warmup Iteration  28: 138300128.361 ops/s
# Warmup Iteration  29: 138674516.887 ops/s
# Warmup Iteration  30: 138382311.800 ops/s
Iteration   1: 137549540.549 ops/s
Iteration   2: 139240022.436 ops/s
Iteration   3: 138831197.461 ops/s
Iteration   4: 137638382.688 ops/s
Iteration   5: 138757396.990 ops/s
Iteration   6: 138270470.308 ops/s
Iteration   7: 138896307.403 ops/s
Iteration   8: 138424251.228 ops/s
Iteration   9: 139305977.742 ops/s
Iteration  10: 138886593.491 ops/s
Iteration  11: 138315209.001 ops/s
Iteration  12: 138326343.045 ops/s
Iteration  13: 138086973.722 ops/s
Iteration  14: 138678134.539 ops/s
Iteration  15: 139079354.286 ops/s
Iteration  16: 138740694.069 ops/s
Iteration  17: 137908353.150 ops/s
Iteration  18: 139032410.907 ops/s
Iteration  19: 138308295.060 ops/s
Iteration  20: 137885754.779 ops/s
Iteration  21: 138121068.976 ops/s
Iteration  22: 138837678.015 ops/s
Iteration  23: 137962309.800 ops/s
Iteration  24: 137932521.851 ops/s
Iteration  25: 138248487.929 ops/s
Iteration  26: 138106556.882 ops/s
Iteration  27: 137413780.799 ops/s
Iteration  28: 138432203.313 ops/s
Iteration  29: 138288273.454 ops/s
Iteration  30: 138171115.051 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_min_null_throws":
  138389188.631 ±(99.9%) 331687.523 ops/s [Average]
  (min, avg, max) = (137413780.799, 138389188.631, 139305977.742), stdev = 496454.308
  CI (99.9%): [138057501.108, 138720876.154] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt          Score        Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_min_null_throws  thrpt   30  138389188.631 ± 331687.523  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_min_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_min_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 66600124.586 ops/s
# Warmup Iteration   2: 133692916.756 ops/s
# Warmup Iteration   3: 120568847.465 ops/s
# Warmup Iteration   4: 138292272.968 ops/s
# Warmup Iteration   5: 138533661.392 ops/s
# Warmup Iteration   6: 137965733.448 ops/s
# Warmup Iteration   7: 138526766.900 ops/s
# Warmup Iteration   8: 137717192.894 ops/s
# Warmup Iteration   9: 137957218.059 ops/s
# Warmup Iteration  10: 137752655.989 ops/s
# Warmup Iteration  11: 137443497.734 ops/s
# Warmup Iteration  12: 138303251.933 ops/s
# Warmup Iteration  13: 137747329.610 ops/s
# Warmup Iteration  14: 137762591.697 ops/s
# Warmup Iteration  15: 138379573.459 ops/s
# Warmup Iteration  16: 138364344.668 ops/s
# Warmup Iteration  17: 137529907.627 ops/s
# Warmup Iteration  18: 137555394.299 ops/s
# Warmup Iteration  19: 137623296.775 ops/s
# Warmup Iteration  20: 137235325.997 ops/s
# Warmup Iteration  21: 137451821.140 ops/s
# Warmup Iteration  22: 137671075.667 ops/s
# Warmup Iteration  23: 138145113.996 ops/s
# Warmup Iteration  24: 136891183.996 ops/s
# Warmup Iteration  25: 138094146.432 ops/s
# Warmup Iteration  26: 137710642.775 ops/s
# Warmup Iteration  27: 137511609.517 ops/s
# Warmup Iteration  28: 137807993.662 ops/s
# Warmup Iteration  29: 137694328.920 ops/s
# Warmup Iteration  30: 137850786.503 ops/s
Iteration   1: 137436200.699 ops/s
Iteration   2: 137600581.966 ops/s
Iteration   3: 137771798.462 ops/s
Iteration   4: 137516082.297 ops/s
Iteration   5: 137673311.715 ops/s
Iteration   6: 137933910.028 ops/s
Iteration   7: 136868243.321 ops/s
Iteration   8: 137064415.752 ops/s
Iteration   9: 137505956.870 ops/s
Iteration  10: 137925870.410 ops/s
Iteration  11: 137108588.376 ops/s
Iteration  12: 137949234.121 ops/s
Iteration  13: 138066565.280 ops/s
Iteration  14: 137860394.859 ops/s
Iteration  15: 136525053.677 ops/s
Iteration  16: 138076924.688 ops/s
Iteration  17: 136932418.309 ops/s
Iteration  18: 137337634.756 ops/s
Iteration  19: 137287671.009 ops/s
Iteration  20: 137591962.393 ops/s
Iteration  21: 137692867.088 ops/s
Iteration  22: 137083151.671 ops/s
Iteration  23: 136835938.571 ops/s
Iteration  24: 137809997.867 ops/s
Iteration  25: 138077813.598 ops/s
Iteration  26: 137854112.852 ops/s
Iteration  27: 137462476.549 ops/s
Iteration  28: 137737026.585 ops/s
Iteration  29: 137499939.173 ops/s
Iteration  30: 137693731.166 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_min_null_throws_without_comparator":
  137525995.804 ±(99.9%) 273235.519 ops/s [Average]
  (min, avg, max) = (136525053.677, 137525995.804, 138077813.598), stdev = 408966.093
  CI (99.9%): [137252760.284, 137799231.323] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt          Score        Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_min_null_throws_without_comparator  thrpt   30  137525995.804 ± 273235.519  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_min_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_min_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 821323.037 ops/s
# Warmup Iteration   2: 878332.476 ops/s
# Warmup Iteration   3: 1036217.812 ops/s
# Warmup Iteration   4: 1110924.716 ops/s
# Warmup Iteration   5: 1104924.395 ops/s
# Warmup Iteration   6: 1104522.698 ops/s
# Warmup Iteration   7: 1105462.030 ops/s
# Warmup Iteration   8: 1108372.456 ops/s
# Warmup Iteration   9: 1109167.352 ops/s
# Warmup Iteration  10: 1106351.826 ops/s
# Warmup Iteration  11: 1106958.484 ops/s
# Warmup Iteration  12: 1105926.771 ops/s
# Warmup Iteration  13: 1111890.131 ops/s
# Warmup Iteration  14: 934994.125 ops/s
# Warmup Iteration  15: 1113200.863 ops/s
# Warmup Iteration  16: 1100088.460 ops/s
# Warmup Iteration  17: 1182228.853 ops/s
# Warmup Iteration  18: 1184569.034 ops/s
# Warmup Iteration  19: 1184288.228 ops/s
# Warmup Iteration  20: 1184565.520 ops/s
# Warmup Iteration  21: 1185515.108 ops/s
# Warmup Iteration  22: 1185655.813 ops/s
# Warmup Iteration  23: 1186727.304 ops/s
# Warmup Iteration  24: 1181582.104 ops/s
# Warmup Iteration  25: 1183506.673 ops/s
# Warmup Iteration  26: 1185467.956 ops/s
# Warmup Iteration  27: 1183291.045 ops/s
# Warmup Iteration  28: 1185229.160 ops/s
# Warmup Iteration  29: 1180003.464 ops/s
# Warmup Iteration  30: 1182735.471 ops/s
Iteration   1: 1180631.403 ops/s
Iteration   2: 1179132.585 ops/s
Iteration   3: 1186576.689 ops/s
Iteration   4: 1183337.705 ops/s
Iteration   5: 1184896.904 ops/s
Iteration   6: 1182006.321 ops/s
Iteration   7: 1187567.343 ops/s
Iteration   8: 1183456.676 ops/s
Iteration   9: 1182184.303 ops/s
Iteration  10: 1186808.462 ops/s
Iteration  11: 1182566.106 ops/s
Iteration  12: 1184755.152 ops/s
Iteration  13: 1185911.679 ops/s
Iteration  14: 1186381.261 ops/s
Iteration  15: 1180630.882 ops/s
Iteration  16: 1181893.865 ops/s
Iteration  17: 1185104.955 ops/s
Iteration  18: 1183962.748 ops/s
Iteration  19: 1182057.515 ops/s
Iteration  20: 1184345.861 ops/s
Iteration  21: 1185882.767 ops/s
Iteration  22: 1181105.879 ops/s
Iteration  23: 1184843.323 ops/s
Iteration  24: 1183632.142 ops/s
Iteration  25: 1184158.727 ops/s
Iteration  26: 1185755.757 ops/s
Iteration  27: 1188164.682 ops/s
Iteration  28: 1183647.655 ops/s
Iteration  29: 1186118.608 ops/s
Iteration  30: 1184263.199 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_min_without_comparator":
  1184059.372 ±(99.9%) 1477.112 ops/s [Average]
  (min, avg, max) = (1179132.585, 1184059.372, 1188164.682), stdev = 2210.872
  CI (99.9%): [1182582.260, 1185536.484] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_min_without_comparator  thrpt   30  1184059.372 ± 1477.112  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_newWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_newWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 43635840.157 ops/s
# Warmup Iteration   2: 88250074.451 ops/s
# Warmup Iteration   3: 82933647.392 ops/s
# Warmup Iteration   4: 96974511.725 ops/s
# Warmup Iteration   5: 97360572.109 ops/s
# Warmup Iteration   6: 97460008.787 ops/s
# Warmup Iteration   7: 97507882.599 ops/s
# Warmup Iteration   8: 97158334.619 ops/s
# Warmup Iteration   9: 97404403.970 ops/s
# Warmup Iteration  10: 97665939.867 ops/s
# Warmup Iteration  11: 97713903.462 ops/s
# Warmup Iteration  12: 97437969.938 ops/s
# Warmup Iteration  13: 97357126.469 ops/s
# Warmup Iteration  14: 97488113.625 ops/s
# Warmup Iteration  15: 97049139.496 ops/s
# Warmup Iteration  16: 98025583.295 ops/s
# Warmup Iteration  17: 97806291.947 ops/s
# Warmup Iteration  18: 97484699.841 ops/s
# Warmup Iteration  19: 97251533.473 ops/s
# Warmup Iteration  20: 97602935.645 ops/s
# Warmup Iteration  21: 97489295.936 ops/s
# Warmup Iteration  22: 97652365.765 ops/s
# Warmup Iteration  23: 97405710.605 ops/s
# Warmup Iteration  24: 97013578.465 ops/s
# Warmup Iteration  25: 97605775.095 ops/s
# Warmup Iteration  26: 97600739.709 ops/s
# Warmup Iteration  27: 97605993.801 ops/s
# Warmup Iteration  28: 97730749.124 ops/s
# Warmup Iteration  29: 97428104.872 ops/s
# Warmup Iteration  30: 97438047.064 ops/s
Iteration   1: 97644858.710 ops/s
Iteration   2: 97800203.093 ops/s
Iteration   3: 97151104.927 ops/s
Iteration   4: 97365388.510 ops/s
Iteration   5: 97491368.258 ops/s
Iteration   6: 97704292.883 ops/s
Iteration   7: 97352267.276 ops/s
Iteration   8: 97845497.857 ops/s
Iteration   9: 96841078.388 ops/s
Iteration  10: 97554502.714 ops/s
Iteration  11: 97103626.599 ops/s
Iteration  12: 97742302.206 ops/s
Iteration  13: 97528315.776 ops/s
Iteration  14: 98041784.245 ops/s
Iteration  15: 97311444.971 ops/s
Iteration  16: 96773387.471 ops/s
Iteration  17: 97697370.474 ops/s
Iteration  18: 96991575.604 ops/s
Iteration  19: 97322953.082 ops/s
Iteration  20: 97228011.523 ops/s
Iteration  21: 97754283.196 ops/s
Iteration  22: 97714150.984 ops/s
Iteration  23: 97281801.999 ops/s
Iteration  24: 98113588.837 ops/s
Iteration  25: 97101293.911 ops/s
Iteration  26: 97235315.248 ops/s
Iteration  27: 97887636.437 ops/s
Iteration  28: 96663286.956 ops/s
Iteration  29: 97622601.183 ops/s
Iteration  30: 97336872.636 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_newWith":
  97440072.199 ±(99.9%) 244866.719 ops/s [Average]
  (min, avg, max) = (96663286.956, 97440072.199, 98113588.837), stdev = 366505.005
  CI (99.9%): [97195205.480, 97684938.917] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt         Score        Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_newWith  thrpt   30  97440072.199 ± 244866.719  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_newWithAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_newWithAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1419254.539 ops/s
# Warmup Iteration   2: 3048076.601 ops/s
# Warmup Iteration   3: 3352640.847 ops/s
# Warmup Iteration   4: 3368990.903 ops/s
# Warmup Iteration   5: 2743970.171 ops/s
# Warmup Iteration   6: 3386279.002 ops/s
# Warmup Iteration   7: 3377788.977 ops/s
# Warmup Iteration   8: 3376296.648 ops/s
# Warmup Iteration   9: 3377252.609 ops/s
# Warmup Iteration  10: 3388563.496 ops/s
# Warmup Iteration  11: 3388638.950 ops/s
# Warmup Iteration  12: 3390190.316 ops/s
# Warmup Iteration  13: 3383344.350 ops/s
# Warmup Iteration  14: 3388921.981 ops/s
# Warmup Iteration  15: 3383896.968 ops/s
# Warmup Iteration  16: 3382786.446 ops/s
# Warmup Iteration  17: 3381954.283 ops/s
# Warmup Iteration  18: 3380231.047 ops/s
# Warmup Iteration  19: 3387192.165 ops/s
# Warmup Iteration  20: 3385205.000 ops/s
# Warmup Iteration  21: 3393664.813 ops/s
# Warmup Iteration  22: 3370851.414 ops/s
# Warmup Iteration  23: 3386718.043 ops/s
# Warmup Iteration  24: 3390131.184 ops/s
# Warmup Iteration  25: 3392339.450 ops/s
# Warmup Iteration  26: 3388613.850 ops/s
# Warmup Iteration  27: 3387477.874 ops/s
# Warmup Iteration  28: 3387550.074 ops/s
# Warmup Iteration  29: 3384824.681 ops/s
# Warmup Iteration  30: 3386577.485 ops/s
Iteration   1: 3395094.830 ops/s
Iteration   2: 3390954.294 ops/s
Iteration   3: 3392714.041 ops/s
Iteration   4: 3380679.637 ops/s
Iteration   5: 3394782.996 ops/s
Iteration   6: 3392905.894 ops/s
Iteration   7: 3382734.470 ops/s
Iteration   8: 3379056.855 ops/s
Iteration   9: 3385070.768 ops/s
Iteration  10: 3386611.918 ops/s
Iteration  11: 3391008.249 ops/s
Iteration  12: 3392814.100 ops/s
Iteration  13: 3393822.584 ops/s
Iteration  14: 3388488.655 ops/s
Iteration  15: 3375583.746 ops/s
Iteration  16: 3387608.741 ops/s
Iteration  17: 3391137.094 ops/s
Iteration  18: 3378035.441 ops/s
Iteration  19: 3379828.665 ops/s
Iteration  20: 3393022.590 ops/s
Iteration  21: 3383486.549 ops/s
Iteration  22: 3380325.008 ops/s
Iteration  23: 3386618.697 ops/s
Iteration  24: 3399307.242 ops/s
Iteration  25: 3390986.809 ops/s
Iteration  26: 3389300.155 ops/s
Iteration  27: 3383805.535 ops/s
Iteration  28: 3336648.352 ops/s
Iteration  29: 3388831.258 ops/s
Iteration  30: 3391346.040 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_newWithAll":
  3386087.040 ±(99.9%) 7362.129 ops/s [Average]
  (min, avg, max) = (3336648.352, 3386087.040, 3399307.242), stdev = 11019.289
  CI (99.9%): [3378724.911, 3393449.170] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_newWithAll  thrpt   30  3386087.040 ± 7362.129  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_newWithout$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_newWithout

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 153609749.615 ops/s
# Warmup Iteration   2: 304621057.070 ops/s
# Warmup Iteration   3: 266522846.660 ops/s
# Warmup Iteration   4: 311284551.185 ops/s
# Warmup Iteration   5: 311101052.664 ops/s
# Warmup Iteration   6: 311104896.067 ops/s
# Warmup Iteration   7: 310931200.072 ops/s
# Warmup Iteration   8: 310086199.889 ops/s
# Warmup Iteration   9: 312065290.431 ops/s
# Warmup Iteration  10: 311014261.106 ops/s
# Warmup Iteration  11: 310527982.599 ops/s
# Warmup Iteration  12: 310680074.276 ops/s
# Warmup Iteration  13: 311738847.696 ops/s
# Warmup Iteration  14: 310587967.971 ops/s
# Warmup Iteration  15: 312088181.016 ops/s
# Warmup Iteration  16: 312044333.448 ops/s
# Warmup Iteration  17: 310956201.550 ops/s
# Warmup Iteration  18: 310847832.273 ops/s
# Warmup Iteration  19: 310140139.643 ops/s
# Warmup Iteration  20: 311614691.367 ops/s
# Warmup Iteration  21: 311741441.728 ops/s
# Warmup Iteration  22: 310246634.342 ops/s
# Warmup Iteration  23: 311214793.210 ops/s
# Warmup Iteration  24: 311900169.325 ops/s
# Warmup Iteration  25: 312240502.436 ops/s
# Warmup Iteration  26: 311739111.211 ops/s
# Warmup Iteration  27: 311913302.093 ops/s
# Warmup Iteration  28: 311559677.597 ops/s
# Warmup Iteration  29: 311323849.844 ops/s
# Warmup Iteration  30: 312501974.563 ops/s
Iteration   1: 311741534.512 ops/s
Iteration   2: 311210401.155 ops/s
Iteration   3: 311950024.827 ops/s
Iteration   4: 311421560.683 ops/s
Iteration   5: 311429081.464 ops/s
Iteration   6: 312269655.291 ops/s
Iteration   7: 312098561.639 ops/s
Iteration   8: 310906496.665 ops/s
Iteration   9: 311498148.654 ops/s
Iteration  10: 311786182.500 ops/s
Iteration  11: 311640269.332 ops/s
Iteration  12: 309996360.005 ops/s
Iteration  13: 311877084.389 ops/s
Iteration  14: 311439384.471 ops/s
Iteration  15: 310615157.440 ops/s
Iteration  16: 311725684.140 ops/s
Iteration  17: 310637010.775 ops/s
Iteration  18: 311058350.524 ops/s
Iteration  19: 309958131.063 ops/s
Iteration  20: 311376799.330 ops/s
Iteration  21: 311205510.380 ops/s
Iteration  22: 311054516.660 ops/s
Iteration  23: 311221865.073 ops/s
Iteration  24: 311870320.926 ops/s
Iteration  25: 310654627.866 ops/s
Iteration  26: 310186738.628 ops/s
Iteration  27: 312919238.707 ops/s
Iteration  28: 310385878.970 ops/s
Iteration  29: 311093894.371 ops/s
Iteration  30: 310667729.555 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_newWithout":
  311263206.666 ±(99.9%) 459266.058 ops/s [Average]
  (min, avg, max) = (309958131.063, 311263206.666, 312919238.707), stdev = 687407.866
  CI (99.9%): [310803940.609, 311722472.724] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt          Score        Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_newWithout  thrpt   30  311263206.666 ± 459266.058  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_newWithoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_newWithoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1390854.035 ops/s
# Warmup Iteration   2: 2562768.909 ops/s
# Warmup Iteration   3: 3011519.496 ops/s
# Warmup Iteration   4: 3024786.748 ops/s
# Warmup Iteration   5: 3027643.531 ops/s
# Warmup Iteration   6: 2475528.034 ops/s
# Warmup Iteration   7: 3030910.748 ops/s
# Warmup Iteration   8: 3028905.526 ops/s
# Warmup Iteration   9: 3026598.684 ops/s
# Warmup Iteration  10: 3028878.029 ops/s
# Warmup Iteration  11: 3028084.773 ops/s
# Warmup Iteration  12: 3033208.848 ops/s
# Warmup Iteration  13: 3029502.444 ops/s
# Warmup Iteration  14: 3031628.654 ops/s
# Warmup Iteration  15: 3019674.494 ops/s
# Warmup Iteration  16: 3021996.675 ops/s
# Warmup Iteration  17: 3024876.964 ops/s
# Warmup Iteration  18: 3015354.443 ops/s
# Warmup Iteration  19: 3029152.210 ops/s
# Warmup Iteration  20: 3028044.882 ops/s
# Warmup Iteration  21: 3023830.622 ops/s
# Warmup Iteration  22: 3028938.670 ops/s
# Warmup Iteration  23: 3033179.595 ops/s
# Warmup Iteration  24: 3024624.428 ops/s
# Warmup Iteration  25: 3028132.090 ops/s
# Warmup Iteration  26: 3029048.728 ops/s
# Warmup Iteration  27: 3029708.354 ops/s
# Warmup Iteration  28: 3032797.069 ops/s
# Warmup Iteration  29: 3030784.924 ops/s
# Warmup Iteration  30: 3030640.923 ops/s
Iteration   1: 3020279.285 ops/s
Iteration   2: 3022629.170 ops/s
Iteration   3: 3018371.089 ops/s
Iteration   4: 3028816.691 ops/s
Iteration   5: 3030386.940 ops/s
Iteration   6: 3026751.584 ops/s
Iteration   7: 3034727.132 ops/s
Iteration   8: 3033224.884 ops/s
Iteration   9: 3032523.926 ops/s
Iteration  10: 3023463.172 ops/s
Iteration  11: 3024787.194 ops/s
Iteration  12: 3036450.102 ops/s
Iteration  13: 3031516.230 ops/s
Iteration  14: 3032284.239 ops/s
Iteration  15: 3027472.818 ops/s
Iteration  16: 3028228.711 ops/s
Iteration  17: 3027912.311 ops/s
Iteration  18: 3019535.965 ops/s
Iteration  19: 3033820.070 ops/s
Iteration  20: 3024623.633 ops/s
Iteration  21: 3032447.270 ops/s
Iteration  22: 3028721.004 ops/s
Iteration  23: 3031960.539 ops/s
Iteration  24: 3033771.343 ops/s
Iteration  25: 3032900.064 ops/s
Iteration  26: 3024482.329 ops/s
Iteration  27: 3021273.528 ops/s
Iteration  28: 3028600.448 ops/s
Iteration  29: 3034963.271 ops/s
Iteration  30: 3031258.426 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_newWithoutAll":
  3028606.112 ±(99.9%) 3356.099 ops/s [Average]
  (min, avg, max) = (3018371.089, 3028606.112, 3036450.102), stdev = 5023.252
  CI (99.9%): [3025250.013, 3031962.212] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_newWithoutAll  thrpt   30  3028606.112 ± 3356.099  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 152987060.264 ops/s
# Warmup Iteration   2: 304275231.209 ops/s
# Warmup Iteration   3: 244659540.899 ops/s
# Warmup Iteration   4: 281901372.154 ops/s
# Warmup Iteration   5: 282858428.549 ops/s
# Warmup Iteration   6: 282659725.221 ops/s
# Warmup Iteration   7: 282528404.630 ops/s
# Warmup Iteration   8: 282782734.328 ops/s
# Warmup Iteration   9: 282434142.119 ops/s
# Warmup Iteration  10: 283544882.441 ops/s
# Warmup Iteration  11: 283249027.071 ops/s
# Warmup Iteration  12: 283126235.255 ops/s
# Warmup Iteration  13: 281984706.739 ops/s
# Warmup Iteration  14: 282935373.183 ops/s
# Warmup Iteration  15: 282427444.621 ops/s
# Warmup Iteration  16: 283495800.117 ops/s
# Warmup Iteration  17: 283430512.081 ops/s
# Warmup Iteration  18: 282544427.273 ops/s
# Warmup Iteration  19: 283340614.349 ops/s
# Warmup Iteration  20: 282464318.990 ops/s
# Warmup Iteration  21: 282597456.486 ops/s
# Warmup Iteration  22: 282472248.817 ops/s
# Warmup Iteration  23: 283465360.298 ops/s
# Warmup Iteration  24: 281947779.894 ops/s
# Warmup Iteration  25: 283209636.779 ops/s
# Warmup Iteration  26: 283689866.738 ops/s
# Warmup Iteration  27: 278551685.513 ops/s
# Warmup Iteration  28: 282530566.373 ops/s
# Warmup Iteration  29: 282641366.439 ops/s
# Warmup Iteration  30: 282311556.168 ops/s
Iteration   1: 283303447.557 ops/s
Iteration   2: 281677019.498 ops/s
Iteration   3: 283550082.708 ops/s
Iteration   4: 281530724.284 ops/s
Iteration   5: 283489955.235 ops/s
Iteration   6: 281541292.808 ops/s
Iteration   7: 282972413.579 ops/s
Iteration   8: 284050876.086 ops/s
Iteration   9: 283842996.886 ops/s
Iteration  10: 283761484.307 ops/s
Iteration  11: 283066505.230 ops/s
Iteration  12: 283464700.646 ops/s
Iteration  13: 284455720.157 ops/s
Iteration  14: 283780657.571 ops/s
Iteration  15: 281812284.303 ops/s
Iteration  16: 281047260.936 ops/s
Iteration  17: 281955838.990 ops/s
Iteration  18: 283017191.522 ops/s
Iteration  19: 284398178.968 ops/s
Iteration  20: 282012819.858 ops/s
Iteration  21: 281610236.198 ops/s
Iteration  22: 282696670.066 ops/s
Iteration  23: 283599742.181 ops/s
Iteration  24: 282847499.163 ops/s
Iteration  25: 283937964.523 ops/s
Iteration  26: 283128616.115 ops/s
Iteration  27: 282763859.333 ops/s
Iteration  28: 284010813.192 ops/s
Iteration  29: 283532605.319 ops/s
Iteration  30: 284186600.325 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_noneSatisfy":
  283034868.585 ±(99.9%) 648180.150 ops/s [Average]
  (min, avg, max) = (281047260.936, 283034868.585, 284455720.157), stdev = 970165.607
  CI (99.9%): [282386688.435, 283683048.734] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt          Score        Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_noneSatisfy  thrpt   30  283034868.585 ± 648180.150  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_noneSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_noneSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 153493582.934 ops/s
# Warmup Iteration   2: 298589123.965 ops/s
# Warmup Iteration   3: 266177358.600 ops/s
# Warmup Iteration   4: 312051870.950 ops/s
# Warmup Iteration   5: 311072203.968 ops/s
# Warmup Iteration   6: 312281270.815 ops/s
# Warmup Iteration   7: 310991016.245 ops/s
# Warmup Iteration   8: 311357471.268 ops/s
# Warmup Iteration   9: 311289562.623 ops/s
# Warmup Iteration  10: 309893334.326 ops/s
# Warmup Iteration  11: 311895384.693 ops/s
# Warmup Iteration  12: 311814591.556 ops/s
# Warmup Iteration  13: 312448344.251 ops/s
# Warmup Iteration  14: 311519934.872 ops/s
# Warmup Iteration  15: 311800665.345 ops/s
# Warmup Iteration  16: 312479320.700 ops/s
# Warmup Iteration  17: 311530374.453 ops/s
# Warmup Iteration  18: 312747502.456 ops/s
# Warmup Iteration  19: 310680008.882 ops/s
# Warmup Iteration  20: 311494300.954 ops/s
# Warmup Iteration  21: 311295993.985 ops/s
# Warmup Iteration  22: 312631574.184 ops/s
# Warmup Iteration  23: 311534955.267 ops/s
# Warmup Iteration  24: 310713176.264 ops/s
# Warmup Iteration  25: 311847690.854 ops/s
# Warmup Iteration  26: 311652344.081 ops/s
# Warmup Iteration  27: 311476742.146 ops/s
# Warmup Iteration  28: 311558589.921 ops/s
# Warmup Iteration  29: 312048826.558 ops/s
# Warmup Iteration  30: 311831161.426 ops/s
Iteration   1: 311964187.339 ops/s
Iteration   2: 311452672.341 ops/s
Iteration   3: 311942252.544 ops/s
Iteration   4: 310044831.347 ops/s
Iteration   5: 310633824.244 ops/s
Iteration   6: 312130382.002 ops/s
Iteration   7: 312437465.773 ops/s
Iteration   8: 310835588.027 ops/s
Iteration   9: 311338786.600 ops/s
Iteration  10: 310190180.143 ops/s
Iteration  11: 312902143.449 ops/s
Iteration  12: 311317153.184 ops/s
Iteration  13: 311653991.047 ops/s
Iteration  14: 310010190.952 ops/s
Iteration  15: 310818260.539 ops/s
Iteration  16: 310502987.142 ops/s
Iteration  17: 311298764.294 ops/s
Iteration  18: 310451043.656 ops/s
Iteration  19: 311483856.796 ops/s
Iteration  20: 311661153.190 ops/s
Iteration  21: 310331344.873 ops/s
Iteration  22: 311421898.386 ops/s
Iteration  23: 312614469.926 ops/s
Iteration  24: 313175867.252 ops/s
Iteration  25: 310599886.673 ops/s
Iteration  26: 311250045.282 ops/s
Iteration  27: 312699010.280 ops/s
Iteration  28: 310796535.685 ops/s
Iteration  29: 311134255.828 ops/s
Iteration  30: 312085835.813 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_noneSatisfyWith":
  311372628.820 ±(99.9%) 579622.690 ops/s [Average]
  (min, avg, max) = (310010190.952, 311372628.820, 313175867.252), stdev = 867552.022
  CI (99.9%): [310793006.130, 311952251.511] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt          Score        Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_noneSatisfyWith  thrpt   30  311372628.820 ± 579622.690  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_noneSatisfyWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_noneSatisfyWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 151633472.828 ops/s
# Warmup Iteration   2: 305036532.192 ops/s
# Warmup Iteration   3: 267594819.166 ops/s
# Warmup Iteration   4: 311601220.246 ops/s
# Warmup Iteration   5: 311246089.884 ops/s
# Warmup Iteration   6: 310271420.486 ops/s
# Warmup Iteration   7: 312131557.866 ops/s
# Warmup Iteration   8: 309983416.561 ops/s
# Warmup Iteration   9: 312088190.209 ops/s
# Warmup Iteration  10: 311389813.001 ops/s
# Warmup Iteration  11: 311846439.203 ops/s
# Warmup Iteration  12: 310983312.476 ops/s
# Warmup Iteration  13: 311271577.051 ops/s
# Warmup Iteration  14: 311970516.394 ops/s
# Warmup Iteration  15: 312444159.792 ops/s
# Warmup Iteration  16: 310973351.988 ops/s
# Warmup Iteration  17: 311417927.474 ops/s
# Warmup Iteration  18: 311409135.304 ops/s
# Warmup Iteration  19: 312089165.436 ops/s
# Warmup Iteration  20: 311492085.102 ops/s
# Warmup Iteration  21: 312437021.042 ops/s
# Warmup Iteration  22: 310850371.172 ops/s
# Warmup Iteration  23: 311300487.671 ops/s
# Warmup Iteration  24: 311501267.702 ops/s
# Warmup Iteration  25: 311275460.787 ops/s
# Warmup Iteration  26: 310729703.387 ops/s
# Warmup Iteration  27: 312218104.804 ops/s
# Warmup Iteration  28: 311467298.549 ops/s
# Warmup Iteration  29: 310938931.660 ops/s
# Warmup Iteration  30: 311493408.676 ops/s
Iteration   1: 311400997.613 ops/s
Iteration   2: 311303898.459 ops/s
Iteration   3: 311531458.661 ops/s
Iteration   4: 310690832.400 ops/s
Iteration   5: 311515146.078 ops/s
Iteration   6: 311028074.768 ops/s
Iteration   7: 310994028.942 ops/s
Iteration   8: 311014674.521 ops/s
Iteration   9: 311199590.849 ops/s
Iteration  10: 312767659.219 ops/s
Iteration  11: 312160295.165 ops/s
Iteration  12: 310812731.536 ops/s
Iteration  13: 311189158.739 ops/s
Iteration  14: 310575434.705 ops/s
Iteration  15: 310705042.031 ops/s
Iteration  16: 310558243.395 ops/s
Iteration  17: 311941034.465 ops/s
Iteration  18: 309782596.683 ops/s
Iteration  19: 311561164.322 ops/s
Iteration  20: 310872939.753 ops/s
Iteration  21: 310871983.873 ops/s
Iteration  22: 311143902.930 ops/s
Iteration  23: 311073036.661 ops/s
Iteration  24: 310178636.707 ops/s
Iteration  25: 310225423.194 ops/s
Iteration  26: 310721395.912 ops/s
Iteration  27: 311935234.484 ops/s
Iteration  28: 311713523.954 ops/s
Iteration  29: 311068853.694 ops/s
Iteration  30: 311689782.637 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_noneSatisfyWithOccurrences":
  311140892.545 ±(99.9%) 417120.521 ops/s [Average]
  (min, avg, max) = (309782596.683, 311140892.545, 312767659.219), stdev = 624326.407
  CI (99.9%): [310723772.024, 311558013.066] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt          Score        Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_noneSatisfyWithOccurrences  thrpt   30  311140892.545 ± 417120.521  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_notEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_notEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2848471.825 ops/s
# Warmup Iteration   2: 6314786.633 ops/s
# Warmup Iteration   3: 5280875.321 ops/s
# Warmup Iteration   4: 6332787.141 ops/s
# Warmup Iteration   5: 6340517.560 ops/s
# Warmup Iteration   6: 6359493.195 ops/s
# Warmup Iteration   7: 6344019.002 ops/s
# Warmup Iteration   8: 6348125.439 ops/s
# Warmup Iteration   9: 6335065.882 ops/s
# Warmup Iteration  10: 6367536.152 ops/s
# Warmup Iteration  11: 6327372.503 ops/s
# Warmup Iteration  12: 6339219.963 ops/s
# Warmup Iteration  13: 6354108.641 ops/s
# Warmup Iteration  14: 6352506.484 ops/s
# Warmup Iteration  15: 6346842.528 ops/s
# Warmup Iteration  16: 6336865.541 ops/s
# Warmup Iteration  17: 6337287.923 ops/s
# Warmup Iteration  18: 6328319.759 ops/s
# Warmup Iteration  19: 6339614.242 ops/s
# Warmup Iteration  20: 6322432.498 ops/s
# Warmup Iteration  21: 6346696.324 ops/s
# Warmup Iteration  22: 6338149.496 ops/s
# Warmup Iteration  23: 6337572.165 ops/s
# Warmup Iteration  24: 6330652.946 ops/s
# Warmup Iteration  25: 6338745.702 ops/s
# Warmup Iteration  26: 6308635.832 ops/s
# Warmup Iteration  27: 6326207.675 ops/s
# Warmup Iteration  28: 6295761.750 ops/s
# Warmup Iteration  29: 6330193.865 ops/s
# Warmup Iteration  30: 6338176.076 ops/s
Iteration   1: 6334635.882 ops/s
Iteration   2: 6320323.902 ops/s
Iteration   3: 6325671.474 ops/s
Iteration   4: 6323791.146 ops/s
Iteration   5: 6344693.146 ops/s
Iteration   6: 6288546.210 ops/s
Iteration   7: 6336645.287 ops/s
Iteration   8: 6343843.407 ops/s
Iteration   9: 6311076.153 ops/s
Iteration  10: 6333107.499 ops/s
Iteration  11: 6311487.810 ops/s
Iteration  12: 6347499.606 ops/s
Iteration  13: 6320058.324 ops/s
Iteration  14: 6311810.373 ops/s
Iteration  15: 6341894.127 ops/s
Iteration  16: 6336836.985 ops/s
Iteration  17: 6331719.901 ops/s
Iteration  18: 6343903.390 ops/s
Iteration  19: 6347272.828 ops/s
Iteration  20: 6345725.745 ops/s
Iteration  21: 6322189.621 ops/s
Iteration  22: 6309108.360 ops/s
Iteration  23: 6331981.231 ops/s
Iteration  24: 6321716.880 ops/s
Iteration  25: 6314466.739 ops/s
Iteration  26: 6350933.666 ops/s
Iteration  27: 6351619.430 ops/s
Iteration  28: 6333109.181 ops/s
Iteration  29: 6272713.418 ops/s
Iteration  30: 6356042.709 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_notEmpty":
  6328814.148 ±(99.9%) 12629.957 ops/s [Average]
  (min, avg, max) = (6272713.418, 6328814.148, 6356042.709), stdev = 18903.926
  CI (99.9%): [6316184.191, 6341444.104] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_notEmpty  thrpt   30  6328814.148 ± 12629.957  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_partition$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_partition

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 17448231.542 ops/s
# Warmup Iteration   2: 31277801.386 ops/s
# Warmup Iteration   3: 37306892.508 ops/s
# Warmup Iteration   4: 37252396.569 ops/s
# Warmup Iteration   5: 37318050.448 ops/s
# Warmup Iteration   6: 37140165.806 ops/s
# Warmup Iteration   7: 37304912.453 ops/s
# Warmup Iteration   8: 37292041.675 ops/s
# Warmup Iteration   9: 37274679.482 ops/s
# Warmup Iteration  10: 37231268.328 ops/s
# Warmup Iteration  11: 37327364.973 ops/s
# Warmup Iteration  12: 37300318.146 ops/s
# Warmup Iteration  13: 37233439.110 ops/s
# Warmup Iteration  14: 37234321.799 ops/s
# Warmup Iteration  15: 37285105.379 ops/s
# Warmup Iteration  16: 37168936.058 ops/s
# Warmup Iteration  17: 37298192.316 ops/s
# Warmup Iteration  18: 37214206.135 ops/s
# Warmup Iteration  19: 37223224.260 ops/s
# Warmup Iteration  20: 37267415.980 ops/s
# Warmup Iteration  21: 37306986.897 ops/s
# Warmup Iteration  22: 37209013.353 ops/s
# Warmup Iteration  23: 37243998.319 ops/s
# Warmup Iteration  24: 37258108.588 ops/s
# Warmup Iteration  25: 37344892.418 ops/s
# Warmup Iteration  26: 37274543.662 ops/s
# Warmup Iteration  27: 37206057.132 ops/s
# Warmup Iteration  28: 37261612.508 ops/s
# Warmup Iteration  29: 37356416.574 ops/s
# Warmup Iteration  30: 37219728.431 ops/s
Iteration   1: 37305058.631 ops/s
Iteration   2: 37262457.799 ops/s
Iteration   3: 37051367.410 ops/s
Iteration   4: 37364635.840 ops/s
Iteration   5: 37204975.234 ops/s
Iteration   6: 37162907.577 ops/s
Iteration   7: 37330635.307 ops/s
Iteration   8: 37281115.498 ops/s
Iteration   9: 37198893.172 ops/s
Iteration  10: 37293321.844 ops/s
Iteration  11: 37401398.876 ops/s
Iteration  12: 37374603.041 ops/s
Iteration  13: 37338612.605 ops/s
Iteration  14: 37276693.528 ops/s
Iteration  15: 37264143.326 ops/s
Iteration  16: 37377526.963 ops/s
Iteration  17: 37314286.435 ops/s
Iteration  18: 37437504.874 ops/s
Iteration  19: 37267246.407 ops/s
Iteration  20: 37357168.634 ops/s
Iteration  21: 37367311.439 ops/s
Iteration  22: 37296228.043 ops/s
Iteration  23: 37372734.774 ops/s
Iteration  24: 37268155.272 ops/s
Iteration  25: 37408621.251 ops/s
Iteration  26: 37087936.338 ops/s
Iteration  27: 37107190.443 ops/s
Iteration  28: 37254677.219 ops/s
Iteration  29: 37284979.562 ops/s
Iteration  30: 37258592.885 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_partition":
  37285699.341 ±(99.9%) 63029.806 ops/s [Average]
  (min, avg, max) = (37051367.410, 37285699.341, 37437504.874), stdev = 94340.053
  CI (99.9%): [37222669.535, 37348729.147] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score       Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_partition  thrpt   30  37285699.341 ± 63029.806  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_partitionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_partitionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 17822548.485 ops/s
# Warmup Iteration   2: 31470556.584 ops/s
# Warmup Iteration   3: 37191267.277 ops/s
# Warmup Iteration   4: 37178472.281 ops/s
# Warmup Iteration   5: 37040591.875 ops/s
# Warmup Iteration   6: 37301655.936 ops/s
# Warmup Iteration   7: 37139222.529 ops/s
# Warmup Iteration   8: 37082882.012 ops/s
# Warmup Iteration   9: 37194388.488 ops/s
# Warmup Iteration  10: 37166320.379 ops/s
# Warmup Iteration  11: 37161376.293 ops/s
# Warmup Iteration  12: 37222696.629 ops/s
# Warmup Iteration  13: 37294086.013 ops/s
# Warmup Iteration  14: 37334235.901 ops/s
# Warmup Iteration  15: 37298977.730 ops/s
# Warmup Iteration  16: 37117838.290 ops/s
# Warmup Iteration  17: 37219386.277 ops/s
# Warmup Iteration  18: 37120797.473 ops/s
# Warmup Iteration  19: 37165731.324 ops/s
# Warmup Iteration  20: 37293514.247 ops/s
# Warmup Iteration  21: 37108363.341 ops/s
# Warmup Iteration  22: 37169894.937 ops/s
# Warmup Iteration  23: 37176637.270 ops/s
# Warmup Iteration  24: 37213893.813 ops/s
# Warmup Iteration  25: 37178574.346 ops/s
# Warmup Iteration  26: 37133888.054 ops/s
# Warmup Iteration  27: 37265360.617 ops/s
# Warmup Iteration  28: 37072273.873 ops/s
# Warmup Iteration  29: 37223924.534 ops/s
# Warmup Iteration  30: 37171606.516 ops/s
Iteration   1: 37129270.867 ops/s
Iteration   2: 37293727.146 ops/s
Iteration   3: 37260969.118 ops/s
Iteration   4: 37146044.868 ops/s
Iteration   5: 37336271.300 ops/s
Iteration   6: 37260395.354 ops/s
Iteration   7: 37094946.483 ops/s
Iteration   8: 37280149.329 ops/s
Iteration   9: 37188101.170 ops/s
Iteration  10: 37140176.310 ops/s
Iteration  11: 37352900.261 ops/s
Iteration  12: 37115014.729 ops/s
Iteration  13: 36720045.975 ops/s
Iteration  14: 37219964.948 ops/s
Iteration  15: 37205709.037 ops/s
Iteration  16: 37012125.566 ops/s
Iteration  17: 37057597.925 ops/s
Iteration  18: 37274499.244 ops/s
Iteration  19: 37245657.292 ops/s
Iteration  20: 37117431.818 ops/s
Iteration  21: 37104797.059 ops/s
Iteration  22: 37027416.971 ops/s
Iteration  23: 37238039.507 ops/s
Iteration  24: 37088747.905 ops/s
Iteration  25: 37132818.467 ops/s
Iteration  26: 37169408.871 ops/s
Iteration  27: 36916580.048 ops/s
Iteration  28: 36901082.050 ops/s
Iteration  29: 37125093.378 ops/s
Iteration  30: 37147168.004 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_partitionWith":
  37143405.033 ±(99.9%) 90775.080 ops/s [Average]
  (min, avg, max) = (36720045.975, 37143405.033, 37352900.261), stdev = 135867.877
  CI (99.9%): [37052629.953, 37234180.114] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score       Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_partitionWith  thrpt   30  37143405.033 ± 90775.080  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_reduceOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_reduceOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 347281.285 ops/s
# Warmup Iteration   2: 603482.898 ops/s
# Warmup Iteration   3: 676592.140 ops/s
# Warmup Iteration   4: 676617.111 ops/s
# Warmup Iteration   5: 675324.654 ops/s
# Warmup Iteration   6: 564408.539 ops/s
# Warmup Iteration   7: 676696.357 ops/s
# Warmup Iteration   8: 676252.227 ops/s
# Warmup Iteration   9: 679728.062 ops/s
# Warmup Iteration  10: 676998.157 ops/s
# Warmup Iteration  11: 676542.369 ops/s
# Warmup Iteration  12: 674452.547 ops/s
# Warmup Iteration  13: 673971.279 ops/s
# Warmup Iteration  14: 676678.729 ops/s
# Warmup Iteration  15: 676503.603 ops/s
# Warmup Iteration  16: 674220.904 ops/s
# Warmup Iteration  17: 677573.480 ops/s
# Warmup Iteration  18: 674679.747 ops/s
# Warmup Iteration  19: 677002.891 ops/s
# Warmup Iteration  20: 678603.150 ops/s
# Warmup Iteration  21: 676398.729 ops/s
# Warmup Iteration  22: 677598.689 ops/s
# Warmup Iteration  23: 677775.016 ops/s
# Warmup Iteration  24: 679289.574 ops/s
# Warmup Iteration  25: 678500.173 ops/s
# Warmup Iteration  26: 675496.062 ops/s
# Warmup Iteration  27: 678335.984 ops/s
# Warmup Iteration  28: 677329.931 ops/s
# Warmup Iteration  29: 675940.228 ops/s
# Warmup Iteration  30: 677224.437 ops/s
Iteration   1: 678009.217 ops/s
Iteration   2: 676600.028 ops/s
Iteration   3: 679082.717 ops/s
Iteration   4: 677119.208 ops/s
Iteration   5: 678512.471 ops/s
Iteration   6: 675076.008 ops/s
Iteration   7: 674439.103 ops/s
Iteration   8: 675635.807 ops/s
Iteration   9: 677285.271 ops/s
Iteration  10: 677550.688 ops/s
Iteration  11: 677774.773 ops/s
Iteration  12: 678632.057 ops/s
Iteration  13: 676778.236 ops/s
Iteration  14: 676856.638 ops/s
Iteration  15: 680352.844 ops/s
Iteration  16: 674637.947 ops/s
Iteration  17: 677462.678 ops/s
Iteration  18: 678317.446 ops/s
Iteration  19: 678718.033 ops/s
Iteration  20: 676215.975 ops/s
Iteration  21: 677752.746 ops/s
Iteration  22: 679545.619 ops/s
Iteration  23: 675946.850 ops/s
Iteration  24: 679884.491 ops/s
Iteration  25: 678391.940 ops/s
Iteration  26: 678542.540 ops/s
Iteration  27: 677620.703 ops/s
Iteration  28: 676557.985 ops/s
Iteration  29: 679229.595 ops/s
Iteration  30: 680158.335 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_reduceOptional":
  677622.932 ±(99.9%) 1042.982 ops/s [Average]
  (min, avg, max) = (674439.103, 677622.932, 680352.844), stdev = 1561.087
  CI (99.9%): [676579.949, 678665.914] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_reduceOptional  thrpt   30  677622.932 ± 1042.982  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 33517549.150 ops/s
# Warmup Iteration   2: 59157984.262 ops/s
# Warmup Iteration   3: 70155781.028 ops/s
# Warmup Iteration   4: 70515383.812 ops/s
# Warmup Iteration   5: 70028131.929 ops/s
# Warmup Iteration   6: 70310342.879 ops/s
# Warmup Iteration   7: 69926921.027 ops/s
# Warmup Iteration   8: 70142728.442 ops/s
# Warmup Iteration   9: 70248277.500 ops/s
# Warmup Iteration  10: 70109906.173 ops/s
# Warmup Iteration  11: 70177250.104 ops/s
# Warmup Iteration  12: 70007801.036 ops/s
# Warmup Iteration  13: 69971426.419 ops/s
# Warmup Iteration  14: 70396151.811 ops/s
# Warmup Iteration  15: 70363875.110 ops/s
# Warmup Iteration  16: 70229258.364 ops/s
# Warmup Iteration  17: 70069742.916 ops/s
# Warmup Iteration  18: 70314000.128 ops/s
# Warmup Iteration  19: 70150851.653 ops/s
# Warmup Iteration  20: 70063039.139 ops/s
# Warmup Iteration  21: 70514061.485 ops/s
# Warmup Iteration  22: 70355166.805 ops/s
# Warmup Iteration  23: 70315654.143 ops/s
# Warmup Iteration  24: 69995153.136 ops/s
# Warmup Iteration  25: 70446463.122 ops/s
# Warmup Iteration  26: 70260711.358 ops/s
# Warmup Iteration  27: 70191974.235 ops/s
# Warmup Iteration  28: 70277082.802 ops/s
# Warmup Iteration  29: 70322765.497 ops/s
# Warmup Iteration  30: 70306933.967 ops/s
Iteration   1: 70105336.704 ops/s
Iteration   2: 70310995.688 ops/s
Iteration   3: 70658516.306 ops/s
Iteration   4: 70680290.893 ops/s
Iteration   5: 70192055.185 ops/s
Iteration   6: 70026759.491 ops/s
Iteration   7: 70131913.016 ops/s
Iteration   8: 70104699.015 ops/s
Iteration   9: 70465678.835 ops/s
Iteration  10: 70324105.771 ops/s
Iteration  11: 70323538.912 ops/s
Iteration  12: 70153848.279 ops/s
Iteration  13: 70297889.402 ops/s
Iteration  14: 70155359.150 ops/s
Iteration  15: 70374603.922 ops/s
Iteration  16: 70520279.410 ops/s
Iteration  17: 70302579.674 ops/s
Iteration  18: 70421972.213 ops/s
Iteration  19: 70289373.575 ops/s
Iteration  20: 70719018.874 ops/s
Iteration  21: 70094962.323 ops/s
Iteration  22: 70087157.207 ops/s
Iteration  23: 70074743.616 ops/s
Iteration  24: 70447892.585 ops/s
Iteration  25: 70251032.676 ops/s
Iteration  26: 70490914.381 ops/s
Iteration  27: 70652515.571 ops/s
Iteration  28: 70264368.128 ops/s
Iteration  29: 70056813.575 ops/s
Iteration  30: 70112277.902 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_reject":
  70303049.743 ±(99.9%) 135785.033 ops/s [Average]
  (min, avg, max) = (70026759.491, 70303049.743, 70719018.874), stdev = 203236.661
  CI (99.9%): [70167264.710, 70438834.776] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score        Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_reject  thrpt   30  70303049.743 ± 135785.033  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_rejectToTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_rejectToTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3498704.945 ops/s
# Warmup Iteration   2: 9740792.443 ops/s
# Warmup Iteration   3: 10160616.479 ops/s
# Warmup Iteration   4: 8629894.541 ops/s
# Warmup Iteration   5: 10196436.458 ops/s
# Warmup Iteration   6: 10267294.525 ops/s
# Warmup Iteration   7: 10289542.096 ops/s
# Warmup Iteration   8: 10263000.851 ops/s
# Warmup Iteration   9: 10243891.223 ops/s
# Warmup Iteration  10: 10259222.263 ops/s
# Warmup Iteration  11: 10202059.774 ops/s
# Warmup Iteration  12: 10228172.095 ops/s
# Warmup Iteration  13: 10257663.191 ops/s
# Warmup Iteration  14: 10254964.370 ops/s
# Warmup Iteration  15: 10261775.567 ops/s
# Warmup Iteration  16: 10256700.884 ops/s
# Warmup Iteration  17: 10270099.413 ops/s
# Warmup Iteration  18: 10269561.426 ops/s
# Warmup Iteration  19: 10277212.621 ops/s
# Warmup Iteration  20: 10257521.668 ops/s
# Warmup Iteration  21: 10265819.997 ops/s
# Warmup Iteration  22: 10258845.529 ops/s
# Warmup Iteration  23: 10224834.067 ops/s
# Warmup Iteration  24: 10242495.359 ops/s
# Warmup Iteration  25: 10281350.962 ops/s
# Warmup Iteration  26: 10263538.322 ops/s
# Warmup Iteration  27: 10227886.856 ops/s
# Warmup Iteration  28: 10243168.418 ops/s
# Warmup Iteration  29: 10191290.116 ops/s
# Warmup Iteration  30: 10240805.281 ops/s
Iteration   1: 10249807.691 ops/s
Iteration   2: 10291709.014 ops/s
Iteration   3: 10261201.956 ops/s
Iteration   4: 10260143.151 ops/s
Iteration   5: 10245464.378 ops/s
Iteration   6: 10244514.250 ops/s
Iteration   7: 10273188.507 ops/s
Iteration   8: 10229988.910 ops/s
Iteration   9: 10251593.501 ops/s
Iteration  10: 10285156.510 ops/s
Iteration  11: 10258125.339 ops/s
Iteration  12: 10233007.675 ops/s
Iteration  13: 10227058.128 ops/s
Iteration  14: 10289922.343 ops/s
Iteration  15: 10234755.945 ops/s
Iteration  16: 10235903.052 ops/s
Iteration  17: 10286878.064 ops/s
Iteration  18: 10268899.538 ops/s
Iteration  19: 10256509.717 ops/s
Iteration  20: 10277316.265 ops/s
Iteration  21: 10259997.442 ops/s
Iteration  22: 10272861.839 ops/s
Iteration  23: 10245612.409 ops/s
Iteration  24: 10256991.343 ops/s
Iteration  25: 10217423.242 ops/s
Iteration  26: 10249247.079 ops/s
Iteration  27: 10240915.496 ops/s
Iteration  28: 10266838.270 ops/s
Iteration  29: 10200816.479 ops/s
Iteration  30: 10260936.100 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_rejectToTarget":
  10254426.121 ±(99.9%) 14509.092 ops/s [Average]
  (min, avg, max) = (10200816.479, 10254426.121, 10291709.014), stdev = 21716.527
  CI (99.9%): [10239917.029, 10268935.213] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_rejectToTarget  thrpt   30  10254426.121 ± 14509.092  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_rejectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_rejectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 546093.258 ops/s
# Warmup Iteration   2: 1122873.013 ops/s
# Warmup Iteration   3: 1232537.514 ops/s
# Warmup Iteration   4: 1238203.514 ops/s
# Warmup Iteration   5: 1022743.837 ops/s
# Warmup Iteration   6: 1231796.227 ops/s
# Warmup Iteration   7: 1228480.848 ops/s
# Warmup Iteration   8: 1231920.025 ops/s
# Warmup Iteration   9: 1230376.532 ops/s
# Warmup Iteration  10: 1234370.721 ops/s
# Warmup Iteration  11: 1235294.691 ops/s
# Warmup Iteration  12: 1235365.940 ops/s
# Warmup Iteration  13: 1230529.808 ops/s
# Warmup Iteration  14: 1228936.854 ops/s
# Warmup Iteration  15: 1236260.415 ops/s
# Warmup Iteration  16: 1235934.325 ops/s
# Warmup Iteration  17: 1238400.365 ops/s
# Warmup Iteration  18: 1228325.555 ops/s
# Warmup Iteration  19: 1238170.719 ops/s
# Warmup Iteration  20: 1239186.541 ops/s
# Warmup Iteration  21: 1237765.509 ops/s
# Warmup Iteration  22: 1239282.365 ops/s
# Warmup Iteration  23: 1238543.697 ops/s
# Warmup Iteration  24: 1235956.891 ops/s
# Warmup Iteration  25: 1239731.360 ops/s
# Warmup Iteration  26: 1236711.428 ops/s
# Warmup Iteration  27: 1237210.349 ops/s
# Warmup Iteration  28: 1239314.249 ops/s
# Warmup Iteration  29: 1236889.830 ops/s
# Warmup Iteration  30: 1237657.537 ops/s
Iteration   1: 1234466.258 ops/s
Iteration   2: 1241127.197 ops/s
Iteration   3: 1236944.498 ops/s
Iteration   4: 1234854.315 ops/s
Iteration   5: 1240221.854 ops/s
Iteration   6: 1235601.324 ops/s
Iteration   7: 1236713.790 ops/s
Iteration   8: 1239667.323 ops/s
Iteration   9: 1237258.181 ops/s
Iteration  10: 1238785.731 ops/s
Iteration  11: 1241523.050 ops/s
Iteration  12: 1235589.599 ops/s
Iteration  13: 1231928.829 ops/s
Iteration  14: 1241332.430 ops/s
Iteration  15: 1241316.249 ops/s
Iteration  16: 1237768.510 ops/s
Iteration  17: 1239092.064 ops/s
Iteration  18: 1231453.524 ops/s
Iteration  19: 1237142.717 ops/s
Iteration  20: 1231725.829 ops/s
Iteration  21: 1239935.659 ops/s
Iteration  22: 1236087.760 ops/s
Iteration  23: 1232513.099 ops/s
Iteration  24: 1236649.422 ops/s
Iteration  25: 1233829.208 ops/s
Iteration  26: 1237240.487 ops/s
Iteration  27: 1238708.304 ops/s
Iteration  28: 1236192.177 ops/s
Iteration  29: 1238527.659 ops/s
Iteration  30: 1238500.937 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_rejectWith":
  1237089.933 ±(99.9%) 1952.655 ops/s [Average]
  (min, avg, max) = (1231453.524, 1237089.933, 1241523.050), stdev = 2922.642
  CI (99.9%): [1235137.278, 1239042.588] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_rejectWith  thrpt   30  1237089.933 ± 1952.655  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_rejectWithToTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_rejectWithToTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9204238.541 ops/s
# Warmup Iteration   2: 20600054.605 ops/s
# Warmup Iteration   3: 20816165.821 ops/s
# Warmup Iteration   4: 18126756.986 ops/s
# Warmup Iteration   5: 20324694.420 ops/s
# Warmup Iteration   6: 20889490.825 ops/s
# Warmup Iteration   7: 20927063.360 ops/s
# Warmup Iteration   8: 20867775.903 ops/s
# Warmup Iteration   9: 20923657.833 ops/s
# Warmup Iteration  10: 20879456.548 ops/s
# Warmup Iteration  11: 20807727.545 ops/s
# Warmup Iteration  12: 20886936.533 ops/s
# Warmup Iteration  13: 20899279.899 ops/s
# Warmup Iteration  14: 20889957.174 ops/s
# Warmup Iteration  15: 20950589.162 ops/s
# Warmup Iteration  16: 20893015.582 ops/s
# Warmup Iteration  17: 20900203.004 ops/s
# Warmup Iteration  18: 20876816.438 ops/s
# Warmup Iteration  19: 20915788.335 ops/s
# Warmup Iteration  20: 20929610.057 ops/s
# Warmup Iteration  21: 20843237.467 ops/s
# Warmup Iteration  22: 20838782.201 ops/s
# Warmup Iteration  23: 20930599.937 ops/s
# Warmup Iteration  24: 20873972.844 ops/s
# Warmup Iteration  25: 20890989.532 ops/s
# Warmup Iteration  26: 20916492.595 ops/s
# Warmup Iteration  27: 20888269.122 ops/s
# Warmup Iteration  28: 20901770.231 ops/s
# Warmup Iteration  29: 20936209.686 ops/s
# Warmup Iteration  30: 20881760.417 ops/s
Iteration   1: 20874445.966 ops/s
Iteration   2: 20840020.084 ops/s
Iteration   3: 20882736.171 ops/s
Iteration   4: 20905827.927 ops/s
Iteration   5: 20893958.820 ops/s
Iteration   6: 20866924.162 ops/s
Iteration   7: 20885740.982 ops/s
Iteration   8: 20900517.693 ops/s
Iteration   9: 20946383.955 ops/s
Iteration  10: 20915050.949 ops/s
Iteration  11: 20914375.281 ops/s
Iteration  12: 20880347.514 ops/s
Iteration  13: 20911410.460 ops/s
Iteration  14: 20947359.536 ops/s
Iteration  15: 20977817.408 ops/s
Iteration  16: 20900336.716 ops/s
Iteration  17: 20798896.679 ops/s
Iteration  18: 20906783.008 ops/s
Iteration  19: 20874670.952 ops/s
Iteration  20: 20926279.153 ops/s
Iteration  21: 20946962.097 ops/s
Iteration  22: 20923582.809 ops/s
Iteration  23: 20874746.310 ops/s
Iteration  24: 20912833.258 ops/s
Iteration  25: 20911168.988 ops/s
Iteration  26: 20894447.394 ops/s
Iteration  27: 20861811.636 ops/s
Iteration  28: 20919651.007 ops/s
Iteration  29: 20857424.930 ops/s
Iteration  30: 20811262.978 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_rejectWithToTarget":
  20895459.161 ±(99.9%) 25890.423 ops/s [Average]
  (min, avg, max) = (20798896.679, 20895459.161, 20977817.408), stdev = 38751.570
  CI (99.9%): [20869568.738, 20921349.584] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score       Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_rejectWithToTarget  thrpt   30  20895459.161 ± 25890.423  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_rejectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_rejectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 636638.926 ops/s
# Warmup Iteration   2: 1313329.006 ops/s
# Warmup Iteration   3: 1374527.214 ops/s
# Warmup Iteration   4: 1384200.423 ops/s
# Warmup Iteration   5: 1152459.025 ops/s
# Warmup Iteration   6: 1389277.236 ops/s
# Warmup Iteration   7: 1381116.076 ops/s
# Warmup Iteration   8: 1391210.490 ops/s
# Warmup Iteration   9: 1386598.515 ops/s
# Warmup Iteration  10: 1389380.201 ops/s
# Warmup Iteration  11: 1389328.962 ops/s
# Warmup Iteration  12: 1391648.334 ops/s
# Warmup Iteration  13: 1384910.119 ops/s
# Warmup Iteration  14: 1392154.003 ops/s
# Warmup Iteration  15: 1390672.868 ops/s
# Warmup Iteration  16: 1391375.068 ops/s
# Warmup Iteration  17: 1388311.948 ops/s
# Warmup Iteration  18: 1388830.145 ops/s
# Warmup Iteration  19: 1390857.422 ops/s
# Warmup Iteration  20: 1390062.888 ops/s
# Warmup Iteration  21: 1391259.928 ops/s
# Warmup Iteration  22: 1389466.503 ops/s
# Warmup Iteration  23: 1392788.031 ops/s
# Warmup Iteration  24: 1389604.774 ops/s
# Warmup Iteration  25: 1388205.826 ops/s
# Warmup Iteration  26: 1385124.145 ops/s
# Warmup Iteration  27: 1390262.521 ops/s
# Warmup Iteration  28: 1387526.053 ops/s
# Warmup Iteration  29: 1387953.235 ops/s
# Warmup Iteration  30: 1390163.028 ops/s
Iteration   1: 1390032.601 ops/s
Iteration   2: 1387952.801 ops/s
Iteration   3: 1391239.740 ops/s
Iteration   4: 1384870.704 ops/s
Iteration   5: 1388990.999 ops/s
Iteration   6: 1392996.076 ops/s
Iteration   7: 1387623.146 ops/s
Iteration   8: 1389822.736 ops/s
Iteration   9: 1389975.137 ops/s
Iteration  10: 1390575.913 ops/s
Iteration  11: 1388635.930 ops/s
Iteration  12: 1391878.221 ops/s
Iteration  13: 1392854.177 ops/s
Iteration  14: 1392981.500 ops/s
Iteration  15: 1388481.845 ops/s
Iteration  16: 1387613.206 ops/s
Iteration  17: 1391077.169 ops/s
Iteration  18: 1389008.722 ops/s
Iteration  19: 1392359.701 ops/s
Iteration  20: 1387831.692 ops/s
Iteration  21: 1388610.357 ops/s
Iteration  22: 1388592.831 ops/s
Iteration  23: 1388843.058 ops/s
Iteration  24: 1394190.111 ops/s
Iteration  25: 1388450.515 ops/s
Iteration  26: 1388357.570 ops/s
Iteration  27: 1380919.789 ops/s
Iteration  28: 1393227.291 ops/s
Iteration  29: 1386242.196 ops/s
Iteration  30: 1390146.706 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_rejectWith_target":
  1389479.415 ±(99.9%) 1830.409 ops/s [Average]
  (min, avg, max) = (1380919.789, 1389479.415, 1394190.111), stdev = 2739.670
  CI (99.9%): [1387649.006, 1391309.824] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_rejectWith_target  thrpt   30  1389479.415 ± 1830.409  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 743321.357 ops/s
# Warmup Iteration   2: 798447.306 ops/s
# Warmup Iteration   3: 1006071.141 ops/s
# Warmup Iteration   4: 1013512.366 ops/s
# Warmup Iteration   5: 1018669.350 ops/s
# Warmup Iteration   6: 1001656.427 ops/s
# Warmup Iteration   7: 1012467.959 ops/s
# Warmup Iteration   8: 1014650.964 ops/s
# Warmup Iteration   9: 1011512.327 ops/s
# Warmup Iteration  10: 1015096.936 ops/s
# Warmup Iteration  11: 1012519.585 ops/s
# Warmup Iteration  12: 904803.508 ops/s
# Warmup Iteration  13: 977492.120 ops/s
# Warmup Iteration  14: 1018392.289 ops/s
# Warmup Iteration  15: 1016210.820 ops/s
# Warmup Iteration  16: 1014488.343 ops/s
# Warmup Iteration  17: 1079905.574 ops/s
# Warmup Iteration  18: 1078240.402 ops/s
# Warmup Iteration  19: 1079216.490 ops/s
# Warmup Iteration  20: 1080406.738 ops/s
# Warmup Iteration  21: 1079637.696 ops/s
# Warmup Iteration  22: 1077470.709 ops/s
# Warmup Iteration  23: 1077327.305 ops/s
# Warmup Iteration  24: 1078315.348 ops/s
# Warmup Iteration  25: 1077249.277 ops/s
# Warmup Iteration  26: 1082021.795 ops/s
# Warmup Iteration  27: 1081507.886 ops/s
# Warmup Iteration  28: 1080969.361 ops/s
# Warmup Iteration  29: 1081137.228 ops/s
# Warmup Iteration  30: 1077641.469 ops/s
Iteration   1: 1078221.833 ops/s
Iteration   2: 1078460.218 ops/s
Iteration   3: 1074876.848 ops/s
Iteration   4: 1079744.894 ops/s
Iteration   5: 1078440.045 ops/s
Iteration   6: 1080834.567 ops/s
Iteration   7: 1077753.617 ops/s
Iteration   8: 1072356.439 ops/s
Iteration   9: 1077258.973 ops/s
Iteration  10: 1081247.757 ops/s
Iteration  11: 1080492.264 ops/s
Iteration  12: 1082489.915 ops/s
Iteration  13: 1069478.744 ops/s
Iteration  14: 1081124.615 ops/s
Iteration  15: 1074990.731 ops/s
Iteration  16: 1077398.853 ops/s
Iteration  17: 1078982.568 ops/s
Iteration  18: 1079272.000 ops/s
Iteration  19: 1073954.009 ops/s
Iteration  20: 1077736.863 ops/s
Iteration  21: 1078855.525 ops/s
Iteration  22: 1073335.744 ops/s
Iteration  23: 1083096.259 ops/s
Iteration  24: 1078796.457 ops/s
Iteration  25: 1073479.410 ops/s
Iteration  26: 1079441.328 ops/s
Iteration  27: 1076365.438 ops/s
Iteration  28: 1079618.497 ops/s
Iteration  29: 1081427.734 ops/s
Iteration  30: 1081417.899 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_remove":
  1078031.668 ±(99.9%) 2155.244 ops/s [Average]
  (min, avg, max) = (1069478.744, 1078031.668, 1083096.259), stdev = 3225.867
  CI (99.9%): [1075876.424, 1080186.912] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_remove  thrpt   30  1078031.668 ± 2155.244  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 717927.536 ops/s
# Warmup Iteration   2: 788047.504 ops/s
# Warmup Iteration   3: 992666.097 ops/s
# Warmup Iteration   4: 998106.400 ops/s
# Warmup Iteration   5: 990898.108 ops/s
# Warmup Iteration   6: 1000778.466 ops/s
# Warmup Iteration   7: 993189.947 ops/s
# Warmup Iteration   8: 994335.661 ops/s
# Warmup Iteration   9: 993322.807 ops/s
# Warmup Iteration  10: 996475.909 ops/s
# Warmup Iteration  11: 958824.778 ops/s
# Warmup Iteration  12: 895107.565 ops/s
# Warmup Iteration  13: 1001692.527 ops/s
# Warmup Iteration  14: 1002102.812 ops/s
# Warmup Iteration  15: 996126.622 ops/s
# Warmup Iteration  16: 997565.026 ops/s
# Warmup Iteration  17: 1058906.452 ops/s
# Warmup Iteration  18: 1061020.227 ops/s
# Warmup Iteration  19: 1055613.012 ops/s
# Warmup Iteration  20: 1055407.288 ops/s
# Warmup Iteration  21: 1054586.704 ops/s
# Warmup Iteration  22: 1059794.890 ops/s
# Warmup Iteration  23: 1059837.448 ops/s
# Warmup Iteration  24: 1060116.070 ops/s
# Warmup Iteration  25: 1059822.239 ops/s
# Warmup Iteration  26: 1061353.524 ops/s
# Warmup Iteration  27: 1059964.276 ops/s
# Warmup Iteration  28: 1058081.544 ops/s
# Warmup Iteration  29: 1064758.506 ops/s
# Warmup Iteration  30: 1061995.425 ops/s
Iteration   1: 1060876.178 ops/s
Iteration   2: 1063753.026 ops/s
Iteration   3: 1059560.766 ops/s
Iteration   4: 1061542.910 ops/s
Iteration   5: 1058197.961 ops/s
Iteration   6: 1060582.500 ops/s
Iteration   7: 1063133.055 ops/s
Iteration   8: 1063513.104 ops/s
Iteration   9: 1055317.375 ops/s
Iteration  10: 1066632.948 ops/s
Iteration  11: 1063088.998 ops/s
Iteration  12: 1058856.563 ops/s
Iteration  13: 1066692.509 ops/s
Iteration  14: 1066138.868 ops/s
Iteration  15: 1066256.550 ops/s
Iteration  16: 1057492.241 ops/s
Iteration  17: 1064953.009 ops/s
Iteration  18: 1062718.025 ops/s
Iteration  19: 1059409.137 ops/s
Iteration  20: 1062831.472 ops/s
Iteration  21: 1063296.211 ops/s
Iteration  22: 1060411.424 ops/s
Iteration  23: 1063497.631 ops/s
Iteration  24: 1054063.680 ops/s
Iteration  25: 1057340.035 ops/s
Iteration  26: 1059091.458 ops/s
Iteration  27: 1061344.532 ops/s
Iteration  28: 1066001.224 ops/s
Iteration  29: 1056416.812 ops/s
Iteration  30: 1059991.801 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_removeAll":
  1061433.400 ±(99.9%) 2299.631 ops/s [Average]
  (min, avg, max) = (1054063.680, 1061433.400, 1066692.509), stdev = 3441.979
  CI (99.9%): [1059133.769, 1063733.031] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_removeAll  thrpt   30  1061433.400 ± 2299.631  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 605121.280 ops/s
# Warmup Iteration   2: 750500.237 ops/s
# Warmup Iteration   3: 946819.735 ops/s
# Warmup Iteration   4: 942443.614 ops/s
# Warmup Iteration   5: 948233.817 ops/s
# Warmup Iteration   6: 950817.411 ops/s
# Warmup Iteration   7: 949077.894 ops/s
# Warmup Iteration   8: 947164.661 ops/s
# Warmup Iteration   9: 793664.036 ops/s
# Warmup Iteration  10: 949280.791 ops/s
# Warmup Iteration  11: 948129.505 ops/s
# Warmup Iteration  12: 944485.652 ops/s
# Warmup Iteration  13: 949330.653 ops/s
# Warmup Iteration  14: 947624.478 ops/s
# Warmup Iteration  15: 946140.090 ops/s
# Warmup Iteration  16: 948734.330 ops/s
# Warmup Iteration  17: 1002286.109 ops/s
# Warmup Iteration  18: 1002716.182 ops/s
# Warmup Iteration  19: 1003242.718 ops/s
# Warmup Iteration  20: 1005153.293 ops/s
# Warmup Iteration  21: 1003513.435 ops/s
# Warmup Iteration  22: 1001699.289 ops/s
# Warmup Iteration  23: 997174.448 ops/s
# Warmup Iteration  24: 1002242.324 ops/s
# Warmup Iteration  25: 1001823.695 ops/s
# Warmup Iteration  26: 1004957.798 ops/s
# Warmup Iteration  27: 1003594.715 ops/s
# Warmup Iteration  28: 997275.445 ops/s
# Warmup Iteration  29: 1000162.041 ops/s
# Warmup Iteration  30: 1002411.459 ops/s
Iteration   1: 1001723.265 ops/s
Iteration   2: 996771.861 ops/s
Iteration   3: 1003034.449 ops/s
Iteration   4: 1002278.479 ops/s
Iteration   5: 1005806.424 ops/s
Iteration   6: 1003392.380 ops/s
Iteration   7: 989035.459 ops/s
Iteration   8: 1000302.008 ops/s
Iteration   9: 997696.108 ops/s
Iteration  10: 1002143.654 ops/s
Iteration  11: 1002888.198 ops/s
Iteration  12: 1001947.311 ops/s
Iteration  13: 1004145.097 ops/s
Iteration  14: 1002248.494 ops/s
Iteration  15: 1002500.673 ops/s
Iteration  16: 1002971.005 ops/s
Iteration  17: 1003152.240 ops/s
Iteration  18: 1005261.885 ops/s
Iteration  19: 1002490.301 ops/s
Iteration  20: 1003237.927 ops/s
Iteration  21: 1005484.054 ops/s
Iteration  22: 1005064.299 ops/s
Iteration  23: 1002799.065 ops/s
Iteration  24: 1006568.010 ops/s
Iteration  25: 1003837.755 ops/s
Iteration  26: 1005046.141 ops/s
Iteration  27: 1004784.289 ops/s
Iteration  28: 1000343.639 ops/s
Iteration  29: 1001633.826 ops/s
Iteration  30: 1002154.771 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_retainAll":
  1002358.102 ±(99.9%) 2210.237 ops/s [Average]
  (min, avg, max) = (989035.459, 1002358.102, 1006568.010), stdev = 3308.179
  CI (99.9%): [1000147.865, 1004568.340] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_retainAll  thrpt   30  1002358.102 ± 2210.237  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 33513253.268 ops/s
# Warmup Iteration   2: 58897832.651 ops/s
# Warmup Iteration   3: 70292114.717 ops/s
# Warmup Iteration   4: 69758578.972 ops/s
# Warmup Iteration   5: 69934980.098 ops/s
# Warmup Iteration   6: 70057426.524 ops/s
# Warmup Iteration   7: 70024023.255 ops/s
# Warmup Iteration   8: 69777209.059 ops/s
# Warmup Iteration   9: 69757665.931 ops/s
# Warmup Iteration  10: 69983272.783 ops/s
# Warmup Iteration  11: 69920504.410 ops/s
# Warmup Iteration  12: 69756401.212 ops/s
# Warmup Iteration  13: 69848271.991 ops/s
# Warmup Iteration  14: 70135844.580 ops/s
# Warmup Iteration  15: 69979512.962 ops/s
# Warmup Iteration  16: 70170804.536 ops/s
# Warmup Iteration  17: 70286502.881 ops/s
# Warmup Iteration  18: 70155614.283 ops/s
# Warmup Iteration  19: 70082904.062 ops/s
# Warmup Iteration  20: 70190563.707 ops/s
# Warmup Iteration  21: 70082032.191 ops/s
# Warmup Iteration  22: 70352595.771 ops/s
# Warmup Iteration  23: 70211249.105 ops/s
# Warmup Iteration  24: 70153178.193 ops/s
# Warmup Iteration  25: 69996765.205 ops/s
# Warmup Iteration  26: 70151852.816 ops/s
# Warmup Iteration  27: 70271543.622 ops/s
# Warmup Iteration  28: 70063274.480 ops/s
# Warmup Iteration  29: 69860915.340 ops/s
# Warmup Iteration  30: 69916156.815 ops/s
Iteration   1: 69154227.091 ops/s
Iteration   2: 69771142.970 ops/s
Iteration   3: 70127469.390 ops/s
Iteration   4: 70261852.660 ops/s
Iteration   5: 69904180.529 ops/s
Iteration   6: 69766121.211 ops/s
Iteration   7: 69939192.470 ops/s
Iteration   8: 70100625.069 ops/s
Iteration   9: 70215488.991 ops/s
Iteration  10: 70136602.922 ops/s
Iteration  11: 70455661.367 ops/s
Iteration  12: 69975699.662 ops/s
Iteration  13: 69953823.138 ops/s
Iteration  14: 69889370.985 ops/s
Iteration  15: 70143709.060 ops/s
Iteration  16: 69844649.208 ops/s
Iteration  17: 70408997.103 ops/s
Iteration  18: 70217292.681 ops/s
Iteration  19: 70135476.678 ops/s
Iteration  20: 70042111.259 ops/s
Iteration  21: 69846593.586 ops/s
Iteration  22: 69886972.344 ops/s
Iteration  23: 70352326.503 ops/s
Iteration  24: 69985772.981 ops/s
Iteration  25: 70322416.947 ops/s
Iteration  26: 69966037.322 ops/s
Iteration  27: 69518691.807 ops/s
Iteration  28: 69414094.516 ops/s
Iteration  29: 70361899.858 ops/s
Iteration  30: 70139396.190 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_select":
  70007929.883 ±(99.9%) 195635.502 ops/s [Average]
  (min, avg, max) = (69154227.091, 70007929.883, 70455661.367), stdev = 292818.031
  CI (99.9%): [69812294.381, 70203565.385] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score        Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_select  thrpt   30  70007929.883 ± 195635.502  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_selectByOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_selectByOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 14911287.091 ops/s
# Warmup Iteration   2: 18104063.396 ops/s
# Warmup Iteration   3: 23492411.170 ops/s
# Warmup Iteration   4: 23362756.599 ops/s
# Warmup Iteration   5: 23520678.724 ops/s
# Warmup Iteration   6: 23455333.330 ops/s
# Warmup Iteration   7: 23506747.242 ops/s
# Warmup Iteration   8: 23369754.375 ops/s
# Warmup Iteration   9: 19895031.403 ops/s
# Warmup Iteration  10: 23408960.496 ops/s
# Warmup Iteration  11: 23536216.745 ops/s
# Warmup Iteration  12: 23521497.842 ops/s
# Warmup Iteration  13: 23487651.506 ops/s
# Warmup Iteration  14: 23501715.902 ops/s
# Warmup Iteration  15: 23522512.400 ops/s
# Warmup Iteration  16: 23530201.207 ops/s
# Warmup Iteration  17: 23493979.746 ops/s
# Warmup Iteration  18: 23552060.819 ops/s
# Warmup Iteration  19: 23523859.768 ops/s
# Warmup Iteration  20: 23526595.871 ops/s
# Warmup Iteration  21: 23493085.213 ops/s
# Warmup Iteration  22: 23500289.183 ops/s
# Warmup Iteration  23: 23463983.461 ops/s
# Warmup Iteration  24: 23515413.009 ops/s
# Warmup Iteration  25: 23482030.364 ops/s
# Warmup Iteration  26: 23502731.694 ops/s
# Warmup Iteration  27: 23532111.640 ops/s
# Warmup Iteration  28: 23480233.537 ops/s
# Warmup Iteration  29: 23492291.612 ops/s
# Warmup Iteration  30: 23544305.054 ops/s
Iteration   1: 23497971.429 ops/s
Iteration   2: 23549791.974 ops/s
Iteration   3: 23544035.197 ops/s
Iteration   4: 23509844.748 ops/s
Iteration   5: 23550765.869 ops/s
Iteration   6: 23529167.511 ops/s
Iteration   7: 23508492.591 ops/s
Iteration   8: 23517898.505 ops/s
Iteration   9: 23444480.474 ops/s
Iteration  10: 23451210.323 ops/s
Iteration  11: 23536595.054 ops/s
Iteration  12: 23550228.165 ops/s
Iteration  13: 23424810.684 ops/s
Iteration  14: 23487020.119 ops/s
Iteration  15: 23524024.969 ops/s
Iteration  16: 23462857.095 ops/s
Iteration  17: 23532967.819 ops/s
Iteration  18: 23529903.459 ops/s
Iteration  19: 23465320.334 ops/s
Iteration  20: 23552566.110 ops/s
Iteration  21: 23546102.708 ops/s
Iteration  22: 23477032.001 ops/s
Iteration  23: 23531213.348 ops/s
Iteration  24: 23565111.805 ops/s
Iteration  25: 23451796.872 ops/s
Iteration  26: 23541868.065 ops/s
Iteration  27: 23519852.586 ops/s
Iteration  28: 23515036.410 ops/s
Iteration  29: 23536635.871 ops/s
Iteration  30: 23520965.270 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_selectByOccurrences":
  23512518.912 ±(99.9%) 25131.723 ops/s [Average]
  (min, avg, max) = (23424810.684, 23512518.912, 23565111.805), stdev = 37615.982
  CI (99.9%): [23487387.190, 23537650.635] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score       Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_selectByOccurrences  thrpt   30  23512518.912 ± 25131.723  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_selectDuplicates$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_selectDuplicates

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 153006280.927 ops/s
# Warmup Iteration   2: 304582243.444 ops/s
# Warmup Iteration   3: 266711440.585 ops/s
# Warmup Iteration   4: 311605302.876 ops/s
# Warmup Iteration   5: 312061376.595 ops/s
# Warmup Iteration   6: 311227786.439 ops/s
# Warmup Iteration   7: 311170888.875 ops/s
# Warmup Iteration   8: 310898777.185 ops/s
# Warmup Iteration   9: 312098233.333 ops/s
# Warmup Iteration  10: 311404838.135 ops/s
# Warmup Iteration  11: 312448145.088 ops/s
# Warmup Iteration  12: 311692984.852 ops/s
# Warmup Iteration  13: 312482553.700 ops/s
# Warmup Iteration  14: 311783916.085 ops/s
# Warmup Iteration  15: 311623264.503 ops/s
# Warmup Iteration  16: 310714046.250 ops/s
# Warmup Iteration  17: 310870334.238 ops/s
# Warmup Iteration  18: 312089098.880 ops/s
# Warmup Iteration  19: 310984618.666 ops/s
# Warmup Iteration  20: 311112294.818 ops/s
# Warmup Iteration  21: 312137835.502 ops/s
# Warmup Iteration  22: 311442244.733 ops/s
# Warmup Iteration  23: 311737668.904 ops/s
# Warmup Iteration  24: 311138672.102 ops/s
# Warmup Iteration  25: 312027784.177 ops/s
# Warmup Iteration  26: 311686354.849 ops/s
# Warmup Iteration  27: 311172530.153 ops/s
# Warmup Iteration  28: 311134921.163 ops/s
# Warmup Iteration  29: 311848747.861 ops/s
# Warmup Iteration  30: 311277742.334 ops/s
Iteration   1: 311364724.867 ops/s
Iteration   2: 310736120.665 ops/s
Iteration   3: 310020357.429 ops/s
Iteration   4: 311831873.076 ops/s
Iteration   5: 312383568.792 ops/s
Iteration   6: 311968455.137 ops/s
Iteration   7: 310885458.548 ops/s
Iteration   8: 311429231.743 ops/s
Iteration   9: 311905855.106 ops/s
Iteration  10: 312019755.195 ops/s
Iteration  11: 310218367.814 ops/s
Iteration  12: 311563699.283 ops/s
Iteration  13: 313071869.932 ops/s
Iteration  14: 310866135.360 ops/s
Iteration  15: 310137751.608 ops/s
Iteration  16: 311399737.092 ops/s
Iteration  17: 310229178.296 ops/s
Iteration  18: 310602221.588 ops/s
Iteration  19: 311179079.748 ops/s
Iteration  20: 312189243.829 ops/s
Iteration  21: 310264375.189 ops/s
Iteration  22: 310510761.228 ops/s
Iteration  23: 312585902.285 ops/s
Iteration  24: 311746080.052 ops/s
Iteration  25: 310812950.763 ops/s
Iteration  26: 311447035.919 ops/s
Iteration  27: 311143494.964 ops/s
Iteration  28: 311299724.719 ops/s
Iteration  29: 311155004.808 ops/s
Iteration  30: 311570937.074 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_selectDuplicates":
  311284631.737 ±(99.9%) 514874.312 ops/s [Average]
  (min, avg, max) = (310020357.429, 311284631.737, 313071869.932), stdev = 770639.690
  CI (99.9%): [310769757.425, 311799506.049] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt          Score        Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_selectDuplicates  thrpt   30  311284631.737 ± 514874.312  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_selectInstancesOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_selectInstancesOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 150266938.817 ops/s
# Warmup Iteration   2: 299829567.215 ops/s
# Warmup Iteration   3: 244966771.402 ops/s
# Warmup Iteration   4: 284073872.679 ops/s
# Warmup Iteration   5: 283114226.964 ops/s
# Warmup Iteration   6: 282679535.693 ops/s
# Warmup Iteration   7: 282157059.283 ops/s
# Warmup Iteration   8: 282591304.523 ops/s
# Warmup Iteration   9: 282465640.728 ops/s
# Warmup Iteration  10: 283730190.525 ops/s
# Warmup Iteration  11: 284067475.001 ops/s
# Warmup Iteration  12: 283068797.546 ops/s
# Warmup Iteration  13: 282797298.674 ops/s
# Warmup Iteration  14: 283295727.912 ops/s
# Warmup Iteration  15: 283602658.618 ops/s
# Warmup Iteration  16: 283680073.247 ops/s
# Warmup Iteration  17: 284299433.972 ops/s
# Warmup Iteration  18: 283530679.798 ops/s
# Warmup Iteration  19: 282181158.242 ops/s
# Warmup Iteration  20: 282393433.611 ops/s
# Warmup Iteration  21: 283002967.332 ops/s
# Warmup Iteration  22: 283982460.669 ops/s
# Warmup Iteration  23: 283041785.169 ops/s
# Warmup Iteration  24: 281338380.629 ops/s
# Warmup Iteration  25: 283069823.929 ops/s
# Warmup Iteration  26: 283641867.738 ops/s
# Warmup Iteration  27: 283996211.372 ops/s
# Warmup Iteration  28: 282839073.920 ops/s
# Warmup Iteration  29: 282946530.722 ops/s
# Warmup Iteration  30: 283122429.783 ops/s
Iteration   1: 282019387.615 ops/s
Iteration   2: 283086174.783 ops/s
Iteration   3: 282242165.862 ops/s
Iteration   4: 282619023.597 ops/s
Iteration   5: 285315252.014 ops/s
Iteration   6: 282886156.365 ops/s
Iteration   7: 283444355.739 ops/s
Iteration   8: 284217536.076 ops/s
Iteration   9: 283221918.005 ops/s
Iteration  10: 283030403.494 ops/s
Iteration  11: 283392405.663 ops/s
Iteration  12: 282614543.177 ops/s
Iteration  13: 282700915.368 ops/s
Iteration  14: 282621417.022 ops/s
Iteration  15: 282237146.977 ops/s
Iteration  16: 283165273.465 ops/s
Iteration  17: 282705184.105 ops/s
Iteration  18: 283465752.464 ops/s
Iteration  19: 282935081.954 ops/s
Iteration  20: 282880313.344 ops/s
Iteration  21: 283497060.345 ops/s
Iteration  22: 284128288.224 ops/s
Iteration  23: 282945639.177 ops/s
Iteration  24: 282825467.424 ops/s
Iteration  25: 282641619.479 ops/s
Iteration  26: 282842919.648 ops/s
Iteration  27: 282221224.868 ops/s
Iteration  28: 283620568.254 ops/s
Iteration  29: 283246783.457 ops/s
Iteration  30: 283087023.944 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_selectInstancesOf":
  283061900.064 ±(99.9%) 445783.282 ops/s [Average]
  (min, avg, max) = (282019387.615, 283061900.064, 285315252.014), stdev = 667227.481
  CI (99.9%): [282616116.781, 283507683.346] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt          Score        Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_selectInstancesOf  thrpt   30  283061900.064 ± 445783.282  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_selectToTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_selectToTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4522677.852 ops/s
# Warmup Iteration   2: 10121351.487 ops/s
# Warmup Iteration   3: 10289805.723 ops/s
# Warmup Iteration   4: 8736813.055 ops/s
# Warmup Iteration   5: 10324169.441 ops/s
# Warmup Iteration   6: 10325847.998 ops/s
# Warmup Iteration   7: 10292763.675 ops/s
# Warmup Iteration   8: 10315386.543 ops/s
# Warmup Iteration   9: 10309189.654 ops/s
# Warmup Iteration  10: 10323627.141 ops/s
# Warmup Iteration  11: 10315960.341 ops/s
# Warmup Iteration  12: 10336109.052 ops/s
# Warmup Iteration  13: 10324802.730 ops/s
# Warmup Iteration  14: 10323807.923 ops/s
# Warmup Iteration  15: 10326835.756 ops/s
# Warmup Iteration  16: 10288274.106 ops/s
# Warmup Iteration  17: 10313898.841 ops/s
# Warmup Iteration  18: 10307776.665 ops/s
# Warmup Iteration  19: 10337199.670 ops/s
# Warmup Iteration  20: 10333675.821 ops/s
# Warmup Iteration  21: 10310497.957 ops/s
# Warmup Iteration  22: 10343374.992 ops/s
# Warmup Iteration  23: 10339457.304 ops/s
# Warmup Iteration  24: 10327479.930 ops/s
# Warmup Iteration  25: 10329014.677 ops/s
# Warmup Iteration  26: 10329155.233 ops/s
# Warmup Iteration  27: 10322541.220 ops/s
# Warmup Iteration  28: 10327344.408 ops/s
# Warmup Iteration  29: 10331353.579 ops/s
# Warmup Iteration  30: 10322931.342 ops/s
Iteration   1: 10337032.460 ops/s
Iteration   2: 10290959.457 ops/s
Iteration   3: 10323774.804 ops/s
Iteration   4: 10330864.702 ops/s
Iteration   5: 10315573.751 ops/s
Iteration   6: 10351515.457 ops/s
Iteration   7: 10324529.765 ops/s
Iteration   8: 10342970.051 ops/s
Iteration   9: 10319988.576 ops/s
Iteration  10: 10353989.608 ops/s
Iteration  11: 10318551.774 ops/s
Iteration  12: 10321773.824 ops/s
Iteration  13: 10328649.066 ops/s
Iteration  14: 10269426.964 ops/s
Iteration  15: 10322454.964 ops/s
Iteration  16: 10316796.675 ops/s
Iteration  17: 10342666.049 ops/s
Iteration  18: 10338207.020 ops/s
Iteration  19: 10323921.578 ops/s
Iteration  20: 10300243.428 ops/s
Iteration  21: 10306378.740 ops/s
Iteration  22: 10322178.449 ops/s
Iteration  23: 10351178.457 ops/s
Iteration  24: 10326674.916 ops/s
Iteration  25: 10312035.219 ops/s
Iteration  26: 10318191.773 ops/s
Iteration  27: 10315531.754 ops/s
Iteration  28: 10324359.812 ops/s
Iteration  29: 10339018.389 ops/s
Iteration  30: 10322317.106 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_selectToTarget":
  10323725.153 ±(99.9%) 11867.752 ops/s [Average]
  (min, avg, max) = (10269426.964, 10323725.153, 10353989.608), stdev = 17763.094
  CI (99.9%): [10311857.401, 10335592.905] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_selectToTarget  thrpt   30  10323725.153 ± 11867.752  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_selectUnique$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_selectUnique

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 909827.197 ops/s
# Warmup Iteration   2: 1537148.569 ops/s
# Warmup Iteration   3: 1841877.330 ops/s
# Warmup Iteration   4: 1864870.478 ops/s
# Warmup Iteration   5: 1867660.510 ops/s
# Warmup Iteration   6: 1590048.724 ops/s
# Warmup Iteration   7: 1791658.924 ops/s
# Warmup Iteration   8: 1858478.440 ops/s
# Warmup Iteration   9: 1851629.279 ops/s
# Warmup Iteration  10: 1861627.722 ops/s
# Warmup Iteration  11: 1873284.112 ops/s
# Warmup Iteration  12: 1845461.616 ops/s
# Warmup Iteration  13: 1834050.094 ops/s
# Warmup Iteration  14: 1869233.179 ops/s
# Warmup Iteration  15: 1860252.684 ops/s
# Warmup Iteration  16: 1866512.108 ops/s
# Warmup Iteration  17: 1855412.491 ops/s
# Warmup Iteration  18: 1860518.413 ops/s
# Warmup Iteration  19: 1859505.148 ops/s
# Warmup Iteration  20: 1859977.058 ops/s
# Warmup Iteration  21: 1858689.120 ops/s
# Warmup Iteration  22: 1843683.453 ops/s
# Warmup Iteration  23: 1863823.767 ops/s
# Warmup Iteration  24: 1861288.150 ops/s
# Warmup Iteration  25: 1839890.552 ops/s
# Warmup Iteration  26: 1850485.600 ops/s
# Warmup Iteration  27: 1872418.773 ops/s
# Warmup Iteration  28: 1856415.224 ops/s
# Warmup Iteration  29: 1839238.154 ops/s
# Warmup Iteration  30: 1858459.890 ops/s
Iteration   1: 1851112.189 ops/s
Iteration   2: 1870259.256 ops/s
Iteration   3: 1871042.969 ops/s
Iteration   4: 1844059.921 ops/s
Iteration   5: 1866253.988 ops/s
Iteration   6: 1853813.752 ops/s
Iteration   7: 1849595.847 ops/s
Iteration   8: 1846133.892 ops/s
Iteration   9: 1856761.520 ops/s
Iteration  10: 1858788.288 ops/s
Iteration  11: 1861670.620 ops/s
Iteration  12: 1871227.983 ops/s
Iteration  13: 1870052.487 ops/s
Iteration  14: 1856262.879 ops/s
Iteration  15: 1832611.863 ops/s
Iteration  16: 1872136.814 ops/s
Iteration  17: 1878313.830 ops/s
Iteration  18: 1841795.398 ops/s
Iteration  19: 1875104.514 ops/s
Iteration  20: 1869148.689 ops/s
Iteration  21: 1858780.033 ops/s
Iteration  22: 1859077.525 ops/s
Iteration  23: 1843183.709 ops/s
Iteration  24: 1861045.970 ops/s
Iteration  25: 1838141.596 ops/s
Iteration  26: 1852760.888 ops/s
Iteration  27: 1866320.347 ops/s
Iteration  28: 1856366.417 ops/s
Iteration  29: 1842060.651 ops/s
Iteration  30: 1847277.507 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_selectUnique":
  1857372.045 ±(99.9%) 8055.788 ops/s [Average]
  (min, avg, max) = (1832611.863, 1857372.045, 1878313.830), stdev = 12057.525
  CI (99.9%): [1849316.257, 1865427.833] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_selectUnique  thrpt   30  1857372.045 ± 8055.788  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_selectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_selectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 254956.831 ops/s
# Warmup Iteration   2: 501849.547 ops/s
# Warmup Iteration   3: 557288.923 ops/s
# Warmup Iteration   4: 560885.712 ops/s
# Warmup Iteration   5: 463554.185 ops/s
# Warmup Iteration   6: 558622.886 ops/s
# Warmup Iteration   7: 560102.695 ops/s
# Warmup Iteration   8: 561978.840 ops/s
# Warmup Iteration   9: 560950.316 ops/s
# Warmup Iteration  10: 561168.919 ops/s
# Warmup Iteration  11: 560825.131 ops/s
# Warmup Iteration  12: 560367.441 ops/s
# Warmup Iteration  13: 560702.323 ops/s
# Warmup Iteration  14: 561554.685 ops/s
# Warmup Iteration  15: 561282.373 ops/s
# Warmup Iteration  16: 561095.281 ops/s
# Warmup Iteration  17: 561499.142 ops/s
# Warmup Iteration  18: 561842.955 ops/s
# Warmup Iteration  19: 560153.936 ops/s
# Warmup Iteration  20: 561714.108 ops/s
# Warmup Iteration  21: 561803.082 ops/s
# Warmup Iteration  22: 561478.674 ops/s
# Warmup Iteration  23: 561472.655 ops/s
# Warmup Iteration  24: 560829.006 ops/s
# Warmup Iteration  25: 561233.730 ops/s
# Warmup Iteration  26: 560464.989 ops/s
# Warmup Iteration  27: 561581.973 ops/s
# Warmup Iteration  28: 561543.971 ops/s
# Warmup Iteration  29: 560398.449 ops/s
# Warmup Iteration  30: 559174.501 ops/s
Iteration   1: 561994.744 ops/s
Iteration   2: 562879.735 ops/s
Iteration   3: 559937.832 ops/s
Iteration   4: 560450.927 ops/s
Iteration   5: 561946.732 ops/s
Iteration   6: 561107.968 ops/s
Iteration   7: 561371.455 ops/s
Iteration   8: 560490.516 ops/s
Iteration   9: 561486.184 ops/s
Iteration  10: 561250.545 ops/s
Iteration  11: 560880.789 ops/s
Iteration  12: 561770.614 ops/s
Iteration  13: 562448.762 ops/s
Iteration  14: 561376.247 ops/s
Iteration  15: 559529.008 ops/s
Iteration  16: 562014.138 ops/s
Iteration  17: 561566.427 ops/s
Iteration  18: 561261.507 ops/s
Iteration  19: 561893.399 ops/s
Iteration  20: 560076.054 ops/s
Iteration  21: 561212.812 ops/s
Iteration  22: 562161.497 ops/s
Iteration  23: 562440.274 ops/s
Iteration  24: 561397.980 ops/s
Iteration  25: 563108.676 ops/s
Iteration  26: 561015.863 ops/s
Iteration  27: 561213.607 ops/s
Iteration  28: 562200.817 ops/s
Iteration  29: 559942.521 ops/s
Iteration  30: 562505.860 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_selectWith":
  561431.116 ±(99.9%) 595.135 ops/s [Average]
  (min, avg, max) = (559529.008, 561431.116, 563108.676), stdev = 890.770
  CI (99.9%): [560835.981, 562026.251] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score     Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_selectWith  thrpt   30  561431.116 ± 595.135  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_selectWithToTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_selectWithToTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6023418.995 ops/s
# Warmup Iteration   2: 11313761.977 ops/s
# Warmup Iteration   3: 12428310.768 ops/s
# Warmup Iteration   4: 12538522.291 ops/s
# Warmup Iteration   5: 10911538.661 ops/s
# Warmup Iteration   6: 11865668.356 ops/s
# Warmup Iteration   7: 12519937.866 ops/s
# Warmup Iteration   8: 12542987.582 ops/s
# Warmup Iteration   9: 12539996.510 ops/s
# Warmup Iteration  10: 12458390.788 ops/s
# Warmup Iteration  11: 12569125.570 ops/s
# Warmup Iteration  12: 12549238.565 ops/s
# Warmup Iteration  13: 12553776.276 ops/s
# Warmup Iteration  14: 12495398.387 ops/s
# Warmup Iteration  15: 12537479.585 ops/s
# Warmup Iteration  16: 12517632.390 ops/s
# Warmup Iteration  17: 12535267.687 ops/s
# Warmup Iteration  18: 12544836.418 ops/s
# Warmup Iteration  19: 12536790.238 ops/s
# Warmup Iteration  20: 12541018.603 ops/s
# Warmup Iteration  21: 12490564.621 ops/s
# Warmup Iteration  22: 12538770.949 ops/s
# Warmup Iteration  23: 12553737.464 ops/s
# Warmup Iteration  24: 12542881.404 ops/s
# Warmup Iteration  25: 12550133.186 ops/s
# Warmup Iteration  26: 12536619.476 ops/s
# Warmup Iteration  27: 12547310.678 ops/s
# Warmup Iteration  28: 12536505.871 ops/s
# Warmup Iteration  29: 12495211.354 ops/s
# Warmup Iteration  30: 12543266.508 ops/s
Iteration   1: 12529428.853 ops/s
Iteration   2: 12548569.929 ops/s
Iteration   3: 12525413.829 ops/s
Iteration   4: 12533821.263 ops/s
Iteration   5: 12548677.430 ops/s
Iteration   6: 12531633.859 ops/s
Iteration   7: 12567442.598 ops/s
Iteration   8: 12530642.285 ops/s
Iteration   9: 12549969.736 ops/s
Iteration  10: 12549912.300 ops/s
Iteration  11: 12537513.557 ops/s
Iteration  12: 12544633.823 ops/s
Iteration  13: 12542755.616 ops/s
Iteration  14: 12533527.769 ops/s
Iteration  15: 12531545.129 ops/s
Iteration  16: 12554827.164 ops/s
Iteration  17: 12529823.236 ops/s
Iteration  18: 12527713.898 ops/s
Iteration  19: 12546842.417 ops/s
Iteration  20: 12551458.352 ops/s
Iteration  21: 12529387.961 ops/s
Iteration  22: 12513063.028 ops/s
Iteration  23: 12480272.574 ops/s
Iteration  24: 12554082.262 ops/s
Iteration  25: 12515793.832 ops/s
Iteration  26: 12489408.834 ops/s
Iteration  27: 12514382.306 ops/s
Iteration  28: 12530167.558 ops/s
Iteration  29: 12554260.246 ops/s
Iteration  30: 12580441.919 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_selectWithToTarget":
  12535913.785 ±(99.9%) 13737.722 ops/s [Average]
  (min, avg, max) = (12480272.574, 12535913.785, 12580441.919), stdev = 20561.976
  CI (99.9%): [12522176.064, 12549651.507] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score       Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_selectWithToTarget  thrpt   30  12535913.785 ± 13737.722  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_selectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_selectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 254406.311 ops/s
# Warmup Iteration   2: 506517.088 ops/s
# Warmup Iteration   3: 561986.363 ops/s
# Warmup Iteration   4: 565056.376 ops/s
# Warmup Iteration   5: 466834.013 ops/s
# Warmup Iteration   6: 565161.328 ops/s
# Warmup Iteration   7: 565348.205 ops/s
# Warmup Iteration   8: 564800.265 ops/s
# Warmup Iteration   9: 565256.356 ops/s
# Warmup Iteration  10: 564879.010 ops/s
# Warmup Iteration  11: 564188.070 ops/s
# Warmup Iteration  12: 565557.260 ops/s
# Warmup Iteration  13: 565901.095 ops/s
# Warmup Iteration  14: 566350.149 ops/s
# Warmup Iteration  15: 564082.935 ops/s
# Warmup Iteration  16: 564713.820 ops/s
# Warmup Iteration  17: 565611.224 ops/s
# Warmup Iteration  18: 565366.025 ops/s
# Warmup Iteration  19: 564430.996 ops/s
# Warmup Iteration  20: 566406.384 ops/s
# Warmup Iteration  21: 566252.087 ops/s
# Warmup Iteration  22: 566813.504 ops/s
# Warmup Iteration  23: 565703.124 ops/s
# Warmup Iteration  24: 565346.541 ops/s
# Warmup Iteration  25: 564009.809 ops/s
# Warmup Iteration  26: 565386.188 ops/s
# Warmup Iteration  27: 564828.899 ops/s
# Warmup Iteration  28: 564636.188 ops/s
# Warmup Iteration  29: 565146.154 ops/s
# Warmup Iteration  30: 566035.137 ops/s
Iteration   1: 562156.906 ops/s
Iteration   2: 565591.103 ops/s
Iteration   3: 566458.598 ops/s
Iteration   4: 565493.599 ops/s
Iteration   5: 564735.384 ops/s
Iteration   6: 565634.911 ops/s
Iteration   7: 563834.250 ops/s
Iteration   8: 566605.958 ops/s
Iteration   9: 566118.399 ops/s
Iteration  10: 566209.251 ops/s
Iteration  11: 566912.775 ops/s
Iteration  12: 566205.170 ops/s
Iteration  13: 566369.479 ops/s
Iteration  14: 565824.899 ops/s
Iteration  15: 565379.642 ops/s
Iteration  16: 565407.551 ops/s
Iteration  17: 564759.417 ops/s
Iteration  18: 566371.326 ops/s
Iteration  19: 562545.383 ops/s
Iteration  20: 566996.037 ops/s
Iteration  21: 565790.502 ops/s
Iteration  22: 565566.865 ops/s
Iteration  23: 565005.112 ops/s
Iteration  24: 565475.410 ops/s
Iteration  25: 565357.403 ops/s
Iteration  26: 565610.253 ops/s
Iteration  27: 563820.948 ops/s
Iteration  28: 565854.691 ops/s
Iteration  29: 567156.804 ops/s
Iteration  30: 565356.566 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_selectWith_target":
  565486.820 ±(99.9%) 777.914 ops/s [Average]
  (min, avg, max) = (562156.906, 565486.820, 567156.804), stdev = 1164.345
  CI (99.9%): [564708.906, 566264.734] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score     Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_selectWith_target  thrpt   30  565486.820 ± 777.914  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_serialization$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_serialization

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 126314.047 ops/s
# Warmup Iteration   2: 226557.932 ops/s
# Warmup Iteration   3: 259391.032 ops/s
# Warmup Iteration   4: 257270.032 ops/s
# Warmup Iteration   5: 256924.296 ops/s
# Warmup Iteration   6: 223470.920 ops/s
# Warmup Iteration   7: 257355.797 ops/s
# Warmup Iteration   8: 258523.833 ops/s
# Warmup Iteration   9: 257682.643 ops/s
# Warmup Iteration  10: 258332.524 ops/s
# Warmup Iteration  11: 258990.915 ops/s
# Warmup Iteration  12: 257810.818 ops/s
# Warmup Iteration  13: 258459.847 ops/s
# Warmup Iteration  14: 258822.016 ops/s
# Warmup Iteration  15: 259224.351 ops/s
# Warmup Iteration  16: 257665.163 ops/s
# Warmup Iteration  17: 259735.427 ops/s
# Warmup Iteration  18: 257950.688 ops/s
# Warmup Iteration  19: 257898.946 ops/s
# Warmup Iteration  20: 259285.383 ops/s
# Warmup Iteration  21: 259174.065 ops/s
# Warmup Iteration  22: 258945.281 ops/s
# Warmup Iteration  23: 258453.896 ops/s
# Warmup Iteration  24: 258620.655 ops/s
# Warmup Iteration  25: 258462.780 ops/s
# Warmup Iteration  26: 259348.417 ops/s
# Warmup Iteration  27: 259449.823 ops/s
# Warmup Iteration  28: 258653.671 ops/s
# Warmup Iteration  29: 258434.924 ops/s
# Warmup Iteration  30: 258715.740 ops/s
Iteration   1: 258321.373 ops/s
Iteration   2: 258425.160 ops/s
Iteration   3: 259469.717 ops/s
Iteration   4: 259108.450 ops/s
Iteration   5: 261117.253 ops/s
Iteration   6: 259127.876 ops/s
Iteration   7: 257965.472 ops/s
Iteration   8: 258951.671 ops/s
Iteration   9: 255701.657 ops/s
Iteration  10: 259890.655 ops/s
Iteration  11: 260486.342 ops/s
Iteration  12: 256527.945 ops/s
Iteration  13: 258177.751 ops/s
Iteration  14: 257745.946 ops/s
Iteration  15: 256118.147 ops/s
Iteration  16: 260096.570 ops/s
Iteration  17: 257631.931 ops/s
Iteration  18: 258145.916 ops/s
Iteration  19: 256471.830 ops/s
Iteration  20: 257789.493 ops/s
Iteration  21: 257466.792 ops/s
Iteration  22: 257760.712 ops/s
Iteration  23: 257902.172 ops/s
Iteration  24: 258605.580 ops/s
Iteration  25: 257391.125 ops/s
Iteration  26: 257630.372 ops/s
Iteration  27: 257386.842 ops/s
Iteration  28: 259309.004 ops/s
Iteration  29: 258854.580 ops/s
Iteration  30: 258170.979 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_serialization":
  258258.310 ±(99.9%) 836.102 ops/s [Average]
  (min, avg, max) = (255701.657, 258258.310, 261117.253), stdev = 1251.438
  CI (99.9%): [257422.209, 259094.412] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score     Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_serialization  thrpt   30  258258.310 ± 836.102  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_sumByDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_sumByDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 536441.736 ops/s
# Warmup Iteration   2: 924695.984 ops/s
# Warmup Iteration   3: 1053142.480 ops/s
# Warmup Iteration   4: 1052666.175 ops/s
# Warmup Iteration   5: 1058847.593 ops/s
# Warmup Iteration   6: 871041.656 ops/s
# Warmup Iteration   7: 1056940.448 ops/s
# Warmup Iteration   8: 1057502.369 ops/s
# Warmup Iteration   9: 1056026.576 ops/s
# Warmup Iteration  10: 1057354.766 ops/s
# Warmup Iteration  11: 1058916.633 ops/s
# Warmup Iteration  12: 1056328.389 ops/s
# Warmup Iteration  13: 1057305.962 ops/s
# Warmup Iteration  14: 1058158.893 ops/s
# Warmup Iteration  15: 1057620.094 ops/s
# Warmup Iteration  16: 1056879.220 ops/s
# Warmup Iteration  17: 1057655.560 ops/s
# Warmup Iteration  18: 1060527.207 ops/s
# Warmup Iteration  19: 1054615.959 ops/s
# Warmup Iteration  20: 1060877.872 ops/s
# Warmup Iteration  21: 1056587.654 ops/s
# Warmup Iteration  22: 1058269.841 ops/s
# Warmup Iteration  23: 1057848.601 ops/s
# Warmup Iteration  24: 1060428.606 ops/s
# Warmup Iteration  25: 1059161.048 ops/s
# Warmup Iteration  26: 1060141.946 ops/s
# Warmup Iteration  27: 1059484.772 ops/s
# Warmup Iteration  28: 1061886.583 ops/s
# Warmup Iteration  29: 1057704.131 ops/s
# Warmup Iteration  30: 1060899.686 ops/s
Iteration   1: 1060394.035 ops/s
Iteration   2: 1059290.941 ops/s
Iteration   3: 1055849.642 ops/s
Iteration   4: 1059111.893 ops/s
Iteration   5: 1058535.702 ops/s
Iteration   6: 1058058.197 ops/s
Iteration   7: 1055154.700 ops/s
Iteration   8: 1060650.179 ops/s
Iteration   9: 1058884.673 ops/s
Iteration  10: 1063101.571 ops/s
Iteration  11: 1057865.864 ops/s
Iteration  12: 1059959.565 ops/s
Iteration  13: 1059655.777 ops/s
Iteration  14: 1061123.624 ops/s
Iteration  15: 1060815.574 ops/s
Iteration  16: 1061757.637 ops/s
Iteration  17: 1057601.873 ops/s
Iteration  18: 1057458.130 ops/s
Iteration  19: 1059874.291 ops/s
Iteration  20: 1059533.964 ops/s
Iteration  21: 1061647.474 ops/s
Iteration  22: 1059301.974 ops/s
Iteration  23: 1060490.989 ops/s
Iteration  24: 1060665.591 ops/s
Iteration  25: 1057418.184 ops/s
Iteration  26: 1060618.936 ops/s
Iteration  27: 1058033.866 ops/s
Iteration  28: 1059423.367 ops/s
Iteration  29: 1057458.628 ops/s
Iteration  30: 1063308.376 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_sumByDouble":
  1059434.841 ±(99.9%) 1267.906 ops/s [Average]
  (min, avg, max) = (1055154.700, 1059434.841, 1063308.376), stdev = 1897.743
  CI (99.9%): [1058166.934, 1060702.747] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_sumByDouble  thrpt   30  1059434.841 ± 1267.906  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_sumByDoubleConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_sumByDoubleConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 62.573 ops/s
# Warmup Iteration   2: 70.773 ops/s
# Warmup Iteration   3: 99.684 ops/s
# Warmup Iteration   4: 99.808 ops/s
# Warmup Iteration   5: 99.818 ops/s
# Warmup Iteration   6: 99.861 ops/s
# Warmup Iteration   7: 99.881 ops/s
# Warmup Iteration   8: 99.737 ops/s
# Warmup Iteration   9: 100.024 ops/s
# Warmup Iteration  10: 81.601 ops/s
# Warmup Iteration  11: 96.063 ops/s
# Warmup Iteration  12: 98.593 ops/s
# Warmup Iteration  13: 99.579 ops/s
# Warmup Iteration  14: 99.929 ops/s
# Warmup Iteration  15: 98.413 ops/s
# Warmup Iteration  16: 98.278 ops/s
# Warmup Iteration  17: 98.162 ops/s
# Warmup Iteration  18: 99.239 ops/s
# Warmup Iteration  19: 99.230 ops/s
# Warmup Iteration  20: 99.106 ops/s
# Warmup Iteration  21: 98.660 ops/s
# Warmup Iteration  22: 98.902 ops/s
# Warmup Iteration  23: 99.362 ops/s
# Warmup Iteration  24: 99.452 ops/s
# Warmup Iteration  25: 99.342 ops/s
# Warmup Iteration  26: 98.816 ops/s
# Warmup Iteration  27: 99.102 ops/s
# Warmup Iteration  28: 99.589 ops/s
# Warmup Iteration  29: 97.969 ops/s
# Warmup Iteration  30: 98.041 ops/s
Iteration   1: 99.061 ops/s
Iteration   2: 98.222 ops/s
Iteration   3: 97.296 ops/s
Iteration   4: 99.281 ops/s
Iteration   5: 99.080 ops/s
Iteration   6: 97.372 ops/s
Iteration   7: 98.038 ops/s
Iteration   8: 97.641 ops/s
Iteration   9: 98.105 ops/s
Iteration  10: 97.030 ops/s
Iteration  11: 99.855 ops/s
Iteration  12: 98.256 ops/s
Iteration  13: 97.630 ops/s
Iteration  14: 97.983 ops/s
Iteration  15: 98.673 ops/s
Iteration  16: 98.188 ops/s
Iteration  17: 96.850 ops/s
Iteration  18: 99.373 ops/s
Iteration  19: 96.748 ops/s
Iteration  20: 97.976 ops/s
Iteration  21: 98.792 ops/s
Iteration  22: 97.961 ops/s
Iteration  23: 98.049 ops/s
Iteration  24: 96.626 ops/s
Iteration  25: 99.302 ops/s
Iteration  26: 97.703 ops/s
Iteration  27: 97.659 ops/s
Iteration  28: 99.999 ops/s
Iteration  29: 96.361 ops/s
Iteration  30: 98.908 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_sumByDoubleConsistentRounding":
  98.134 ±(99.9%) 0.636 ops/s [Average]
  (min, avg, max) = (96.361, 98.134, 99.999), stdev = 0.951
  CI (99.9%): [97.498, 98.769] (assumes normal distribution)


# Run complete. Total time: 00:01:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt   Score   Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_sumByDoubleConsistentRounding  thrpt   30  98.134 ± 0.636  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_sumByFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_sumByFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 538435.249 ops/s
# Warmup Iteration   2: 928258.473 ops/s
# Warmup Iteration   3: 1054369.528 ops/s
# Warmup Iteration   4: 1058980.525 ops/s
# Warmup Iteration   5: 1056387.981 ops/s
# Warmup Iteration   6: 871012.225 ops/s
# Warmup Iteration   7: 1060713.135 ops/s
# Warmup Iteration   8: 1060468.488 ops/s
# Warmup Iteration   9: 1057152.030 ops/s
# Warmup Iteration  10: 1060194.180 ops/s
# Warmup Iteration  11: 1059718.308 ops/s
# Warmup Iteration  12: 1057874.153 ops/s
# Warmup Iteration  13: 1059006.281 ops/s
# Warmup Iteration  14: 1058629.657 ops/s
# Warmup Iteration  15: 1057689.580 ops/s
# Warmup Iteration  16: 1059536.224 ops/s
# Warmup Iteration  17: 1060690.066 ops/s
# Warmup Iteration  18: 1060434.298 ops/s
# Warmup Iteration  19: 1058966.760 ops/s
# Warmup Iteration  20: 1059596.402 ops/s
# Warmup Iteration  21: 1060391.417 ops/s
# Warmup Iteration  22: 1058231.825 ops/s
# Warmup Iteration  23: 1058234.683 ops/s
# Warmup Iteration  24: 1059632.078 ops/s
# Warmup Iteration  25: 1059208.610 ops/s
# Warmup Iteration  26: 1060091.331 ops/s
# Warmup Iteration  27: 1055643.592 ops/s
# Warmup Iteration  28: 1060555.101 ops/s
# Warmup Iteration  29: 1058513.854 ops/s
# Warmup Iteration  30: 1057193.041 ops/s
Iteration   1: 1061953.419 ops/s
Iteration   2: 1057147.887 ops/s
Iteration   3: 1057445.297 ops/s
Iteration   4: 1058779.671 ops/s
Iteration   5: 1058782.685 ops/s
Iteration   6: 1058928.683 ops/s
Iteration   7: 1060186.769 ops/s
Iteration   8: 1058903.647 ops/s
Iteration   9: 1058793.111 ops/s
Iteration  10: 1061831.527 ops/s
Iteration  11: 1058664.068 ops/s
Iteration  12: 1057159.961 ops/s
Iteration  13: 1056132.484 ops/s
Iteration  14: 1059576.766 ops/s
Iteration  15: 1060276.646 ops/s
Iteration  16: 1051932.141 ops/s
Iteration  17: 1059087.102 ops/s
Iteration  18: 1056735.875 ops/s
Iteration  19: 1058352.482 ops/s
Iteration  20: 1058499.498 ops/s
Iteration  21: 1062126.702 ops/s
Iteration  22: 1058977.898 ops/s
Iteration  23: 1057697.052 ops/s
Iteration  24: 1055496.935 ops/s
Iteration  25: 1059872.804 ops/s
Iteration  26: 1061709.400 ops/s
Iteration  27: 1057908.910 ops/s
Iteration  28: 1056574.009 ops/s
Iteration  29: 1058214.909 ops/s
Iteration  30: 1059681.772 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_sumByFloat":
  1058581.004 ±(99.9%) 1405.448 ops/s [Average]
  (min, avg, max) = (1051932.141, 1058581.004, 1062126.702), stdev = 2103.608
  CI (99.9%): [1057175.556, 1059986.452] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_sumByFloat  thrpt   30  1058581.004 ± 1405.448  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_sumByFloatConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_sumByFloatConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 62.724 ops/s
# Warmup Iteration   2: 70.283 ops/s
# Warmup Iteration   3: 99.484 ops/s
# Warmup Iteration   4: 100.459 ops/s
# Warmup Iteration   5: 98.743 ops/s
# Warmup Iteration   6: 99.598 ops/s
# Warmup Iteration   7: 100.718 ops/s
# Warmup Iteration   8: 100.094 ops/s
# Warmup Iteration   9: 99.465 ops/s
# Warmup Iteration  10: 82.182 ops/s
# Warmup Iteration  11: 98.188 ops/s
# Warmup Iteration  12: 99.068 ops/s
# Warmup Iteration  13: 98.437 ops/s
# Warmup Iteration  14: 100.283 ops/s
# Warmup Iteration  15: 99.681 ops/s
# Warmup Iteration  16: 98.503 ops/s
# Warmup Iteration  17: 98.786 ops/s
# Warmup Iteration  18: 100.101 ops/s
# Warmup Iteration  19: 99.122 ops/s
# Warmup Iteration  20: 98.735 ops/s
# Warmup Iteration  21: 98.990 ops/s
# Warmup Iteration  22: 99.840 ops/s
# Warmup Iteration  23: 99.800 ops/s
# Warmup Iteration  24: 98.893 ops/s
# Warmup Iteration  25: 99.650 ops/s
# Warmup Iteration  26: 98.570 ops/s
# Warmup Iteration  27: 99.344 ops/s
# Warmup Iteration  28: 99.075 ops/s
# Warmup Iteration  29: 97.835 ops/s
# Warmup Iteration  30: 97.341 ops/s
Iteration   1: 97.888 ops/s
Iteration   2: 98.077 ops/s
Iteration   3: 98.166 ops/s
Iteration   4: 98.063 ops/s
Iteration   5: 97.055 ops/s
Iteration   6: 98.182 ops/s
Iteration   7: 97.051 ops/s
Iteration   8: 97.840 ops/s
Iteration   9: 97.809 ops/s
Iteration  10: 98.418 ops/s
Iteration  11: 98.413 ops/s
Iteration  12: 97.833 ops/s
Iteration  13: 99.140 ops/s
Iteration  14: 97.536 ops/s
Iteration  15: 97.582 ops/s
Iteration  16: 98.879 ops/s
Iteration  17: 97.288 ops/s
Iteration  18: 95.018 ops/s
Iteration  19: 98.062 ops/s
Iteration  20: 98.421 ops/s
Iteration  21: 97.706 ops/s
Iteration  22: 96.482 ops/s
Iteration  23: 99.092 ops/s
Iteration  24: 98.483 ops/s
Iteration  25: 97.295 ops/s
Iteration  26: 98.507 ops/s
Iteration  27: 98.603 ops/s
Iteration  28: 96.327 ops/s
Iteration  29: 98.228 ops/s
Iteration  30: 97.719 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_sumByFloatConsistentRounding":
  97.839 ±(99.9%) 0.575 ops/s [Average]
  (min, avg, max) = (95.018, 97.839, 99.140), stdev = 0.860
  CI (99.9%): [97.264, 98.413] (assumes normal distribution)


# Run complete. Total time: 00:01:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt   Score   Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_sumByFloatConsistentRounding  thrpt   30  97.839 ± 0.575  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_sumByInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_sumByInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 655318.929 ops/s
# Warmup Iteration   2: 1215087.445 ops/s
# Warmup Iteration   3: 1328821.460 ops/s
# Warmup Iteration   4: 1334981.050 ops/s
# Warmup Iteration   5: 1199998.235 ops/s
# Warmup Iteration   6: 1232692.001 ops/s
# Warmup Iteration   7: 1335655.353 ops/s
# Warmup Iteration   8: 1335042.097 ops/s
# Warmup Iteration   9: 1337105.353 ops/s
# Warmup Iteration  10: 1333633.157 ops/s
# Warmup Iteration  11: 1336914.956 ops/s
# Warmup Iteration  12: 1336372.285 ops/s
# Warmup Iteration  13: 1331739.488 ops/s
# Warmup Iteration  14: 1336276.028 ops/s
# Warmup Iteration  15: 1336180.046 ops/s
# Warmup Iteration  16: 1338003.641 ops/s
# Warmup Iteration  17: 1338880.555 ops/s
# Warmup Iteration  18: 1335390.734 ops/s
# Warmup Iteration  19: 1335567.001 ops/s
# Warmup Iteration  20: 1335159.556 ops/s
# Warmup Iteration  21: 1337526.477 ops/s
# Warmup Iteration  22: 1335387.469 ops/s
# Warmup Iteration  23: 1335449.880 ops/s
# Warmup Iteration  24: 1337263.228 ops/s
# Warmup Iteration  25: 1337372.165 ops/s
# Warmup Iteration  26: 1338424.682 ops/s
# Warmup Iteration  27: 1333934.070 ops/s
# Warmup Iteration  28: 1331905.501 ops/s
# Warmup Iteration  29: 1337094.278 ops/s
# Warmup Iteration  30: 1335942.869 ops/s
Iteration   1: 1335211.453 ops/s
Iteration   2: 1336384.582 ops/s
Iteration   3: 1333565.807 ops/s
Iteration   4: 1334623.540 ops/s
Iteration   5: 1333707.870 ops/s
Iteration   6: 1333859.433 ops/s
Iteration   7: 1335707.895 ops/s
Iteration   8: 1337030.093 ops/s
Iteration   9: 1334397.915 ops/s
Iteration  10: 1335575.874 ops/s
Iteration  11: 1337672.114 ops/s
Iteration  12: 1336377.667 ops/s
Iteration  13: 1337443.483 ops/s
Iteration  14: 1336056.804 ops/s
Iteration  15: 1337322.337 ops/s
Iteration  16: 1334640.237 ops/s
Iteration  17: 1333973.170 ops/s
Iteration  18: 1334856.494 ops/s
Iteration  19: 1336736.530 ops/s
Iteration  20: 1332912.617 ops/s
Iteration  21: 1338714.442 ops/s
Iteration  22: 1334304.693 ops/s
Iteration  23: 1335732.512 ops/s
Iteration  24: 1337715.285 ops/s
Iteration  25: 1333078.404 ops/s
Iteration  26: 1333687.675 ops/s
Iteration  27: 1339360.049 ops/s
Iteration  28: 1333082.450 ops/s
Iteration  29: 1337736.382 ops/s
Iteration  30: 1332211.199 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_sumByInt":
  1335455.967 ±(99.9%) 1252.158 ops/s [Average]
  (min, avg, max) = (1332211.199, 1335455.967, 1339360.049), stdev = 1874.171
  CI (99.9%): [1334203.809, 1336708.125] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_sumByInt  thrpt   30  1335455.967 ± 1252.158  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_sumByLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_sumByLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 658176.965 ops/s
# Warmup Iteration   2: 1224172.768 ops/s
# Warmup Iteration   3: 1351658.096 ops/s
# Warmup Iteration   4: 1364894.771 ops/s
# Warmup Iteration   5: 1216022.051 ops/s
# Warmup Iteration   6: 1269590.152 ops/s
# Warmup Iteration   7: 1363144.638 ops/s
# Warmup Iteration   8: 1363942.920 ops/s
# Warmup Iteration   9: 1365257.895 ops/s
# Warmup Iteration  10: 1366417.773 ops/s
# Warmup Iteration  11: 1362618.789 ops/s
# Warmup Iteration  12: 1363566.157 ops/s
# Warmup Iteration  13: 1365038.502 ops/s
# Warmup Iteration  14: 1364837.661 ops/s
# Warmup Iteration  15: 1364394.151 ops/s
# Warmup Iteration  16: 1366209.858 ops/s
# Warmup Iteration  17: 1366307.721 ops/s
# Warmup Iteration  18: 1361665.195 ops/s
# Warmup Iteration  19: 1364285.892 ops/s
# Warmup Iteration  20: 1366464.116 ops/s
# Warmup Iteration  21: 1364846.723 ops/s
# Warmup Iteration  22: 1363164.133 ops/s
# Warmup Iteration  23: 1366960.452 ops/s
# Warmup Iteration  24: 1361342.279 ops/s
# Warmup Iteration  25: 1365507.452 ops/s
# Warmup Iteration  26: 1364652.744 ops/s
# Warmup Iteration  27: 1368770.032 ops/s
# Warmup Iteration  28: 1365850.786 ops/s
# Warmup Iteration  29: 1368200.814 ops/s
# Warmup Iteration  30: 1366698.556 ops/s
Iteration   1: 1365524.348 ops/s
Iteration   2: 1366329.367 ops/s
Iteration   3: 1367572.155 ops/s
Iteration   4: 1368420.634 ops/s
Iteration   5: 1364321.708 ops/s
Iteration   6: 1369580.523 ops/s
Iteration   7: 1357654.840 ops/s
Iteration   8: 1365391.844 ops/s
Iteration   9: 1370045.994 ops/s
Iteration  10: 1364367.470 ops/s
Iteration  11: 1366764.937 ops/s
Iteration  12: 1369026.957 ops/s
Iteration  13: 1367368.057 ops/s
Iteration  14: 1368631.865 ops/s
Iteration  15: 1361330.630 ops/s
Iteration  16: 1362983.883 ops/s
Iteration  17: 1364991.617 ops/s
Iteration  18: 1365728.934 ops/s
Iteration  19: 1359670.933 ops/s
Iteration  20: 1362325.238 ops/s
Iteration  21: 1367220.750 ops/s
Iteration  22: 1364088.789 ops/s
Iteration  23: 1352732.626 ops/s
Iteration  24: 1356338.959 ops/s
Iteration  25: 1366280.671 ops/s
Iteration  26: 1366744.229 ops/s
Iteration  27: 1367667.106 ops/s
Iteration  28: 1365820.938 ops/s
Iteration  29: 1365554.582 ops/s
Iteration  30: 1366456.170 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_sumByLong":
  1364897.892 ±(99.9%) 2659.055 ops/s [Average]
  (min, avg, max) = (1352732.626, 1364897.892, 1370045.994), stdev = 3979.948
  CI (99.9%): [1362238.837, 1367556.946] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_sumByLong  thrpt   30  1364897.892 ± 2659.055  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_sumDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_sumDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 764234.811 ops/s
# Warmup Iteration   2: 1283460.739 ops/s
# Warmup Iteration   3: 1485011.471 ops/s
# Warmup Iteration   4: 1503001.639 ops/s
# Warmup Iteration   5: 1502529.269 ops/s
# Warmup Iteration   6: 1251196.889 ops/s
# Warmup Iteration   7: 1477075.780 ops/s
# Warmup Iteration   8: 1500813.918 ops/s
# Warmup Iteration   9: 1504630.213 ops/s
# Warmup Iteration  10: 1509001.454 ops/s
# Warmup Iteration  11: 1506027.243 ops/s
# Warmup Iteration  12: 1507890.490 ops/s
# Warmup Iteration  13: 1505808.994 ops/s
# Warmup Iteration  14: 1503031.525 ops/s
# Warmup Iteration  15: 1507105.032 ops/s
# Warmup Iteration  16: 1506556.197 ops/s
# Warmup Iteration  17: 1504851.957 ops/s
# Warmup Iteration  18: 1500378.116 ops/s
# Warmup Iteration  19: 1504573.586 ops/s
# Warmup Iteration  20: 1503032.808 ops/s
# Warmup Iteration  21: 1502788.876 ops/s
# Warmup Iteration  22: 1499881.590 ops/s
# Warmup Iteration  23: 1505635.289 ops/s
# Warmup Iteration  24: 1503564.513 ops/s
# Warmup Iteration  25: 1504590.405 ops/s
# Warmup Iteration  26: 1499352.121 ops/s
# Warmup Iteration  27: 1498643.024 ops/s
# Warmup Iteration  28: 1502081.055 ops/s
# Warmup Iteration  29: 1504700.781 ops/s
# Warmup Iteration  30: 1506187.675 ops/s
Iteration   1: 1499953.563 ops/s
Iteration   2: 1500650.704 ops/s
Iteration   3: 1503768.125 ops/s
Iteration   4: 1505131.246 ops/s
Iteration   5: 1497478.834 ops/s
Iteration   6: 1489596.777 ops/s
Iteration   7: 1504346.184 ops/s
Iteration   8: 1500854.500 ops/s
Iteration   9: 1502536.265 ops/s
Iteration  10: 1498611.107 ops/s
Iteration  11: 1508787.958 ops/s
Iteration  12: 1506488.514 ops/s
Iteration  13: 1506929.009 ops/s
Iteration  14: 1495027.018 ops/s
Iteration  15: 1508473.755 ops/s
Iteration  16: 1507905.333 ops/s
Iteration  17: 1505112.731 ops/s
Iteration  18: 1507165.272 ops/s
Iteration  19: 1499826.198 ops/s
Iteration  20: 1500037.306 ops/s
Iteration  21: 1501966.484 ops/s
Iteration  22: 1507497.365 ops/s
Iteration  23: 1506800.472 ops/s
Iteration  24: 1507655.223 ops/s
Iteration  25: 1499847.656 ops/s
Iteration  26: 1505857.746 ops/s
Iteration  27: 1504889.480 ops/s
Iteration  28: 1506277.363 ops/s
Iteration  29: 1501901.258 ops/s
Iteration  30: 1506065.856 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_sumDouble":
  1503247.977 ±(99.9%) 2972.150 ops/s [Average]
  (min, avg, max) = (1489596.777, 1503247.977, 1508787.958), stdev = 4448.575
  CI (99.9%): [1500275.827, 1506220.127] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_sumDouble  thrpt   30  1503247.977 ± 2972.150  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_sumDoubleConsistentRounding1$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_sumDoubleConsistentRounding1

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 77.102 ops/s
# Warmup Iteration   2: 89.635 ops/s
# Warmup Iteration   3: 117.293 ops/s
# Warmup Iteration   4: 117.635 ops/s
# Warmup Iteration   5: 117.525 ops/s
# Warmup Iteration   6: 117.899 ops/s
# Warmup Iteration   7: 118.457 ops/s
# Warmup Iteration   8: 117.978 ops/s
# Warmup Iteration   9: 118.780 ops/s
# Warmup Iteration  10: 102.962 ops/s
# Warmup Iteration  11: 114.590 ops/s
# Warmup Iteration  12: 117.959 ops/s
# Warmup Iteration  13: 118.389 ops/s
# Warmup Iteration  14: 117.942 ops/s
# Warmup Iteration  15: 117.417 ops/s
# Warmup Iteration  16: 117.725 ops/s
# Warmup Iteration  17: 117.712 ops/s
# Warmup Iteration  18: 118.000 ops/s
# Warmup Iteration  19: 118.470 ops/s
# Warmup Iteration  20: 117.425 ops/s
# Warmup Iteration  21: 117.878 ops/s
# Warmup Iteration  22: 117.718 ops/s
# Warmup Iteration  23: 118.434 ops/s
# Warmup Iteration  24: 116.333 ops/s
# Warmup Iteration  25: 115.977 ops/s
# Warmup Iteration  26: 116.071 ops/s
# Warmup Iteration  27: 116.189 ops/s
# Warmup Iteration  28: 115.891 ops/s
# Warmup Iteration  29: 115.996 ops/s
# Warmup Iteration  30: 115.641 ops/s
Iteration   1: 116.478 ops/s
Iteration   2: 115.904 ops/s
Iteration   3: 116.696 ops/s
Iteration   4: 116.116 ops/s
Iteration   5: 116.340 ops/s
Iteration   6: 115.821 ops/s
Iteration   7: 116.021 ops/s
Iteration   8: 115.548 ops/s
Iteration   9: 114.333 ops/s
Iteration  10: 116.272 ops/s
Iteration  11: 115.881 ops/s
Iteration  12: 117.045 ops/s
Iteration  13: 115.573 ops/s
Iteration  14: 116.167 ops/s
Iteration  15: 116.459 ops/s
Iteration  16: 115.232 ops/s
Iteration  17: 115.125 ops/s
Iteration  18: 116.732 ops/s
Iteration  19: 116.394 ops/s
Iteration  20: 116.369 ops/s
Iteration  21: 116.040 ops/s
Iteration  22: 115.807 ops/s
Iteration  23: 115.336 ops/s
Iteration  24: 116.430 ops/s
Iteration  25: 116.169 ops/s
Iteration  26: 113.546 ops/s
Iteration  27: 116.864 ops/s
Iteration  28: 117.344 ops/s
Iteration  29: 115.579 ops/s
Iteration  30: 115.473 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_sumDoubleConsistentRounding1":
  115.970 ±(99.9%) 0.517 ops/s [Average]
  (min, avg, max) = (113.546, 115.970, 117.344), stdev = 0.773
  CI (99.9%): [115.453, 116.487] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt    Score   Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_sumDoubleConsistentRounding1  thrpt   30  115.970 ± 0.517  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_sumDoubleConsistentRounding2$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_sumDoubleConsistentRounding2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 78.593 ops/s
# Warmup Iteration   2: 93.932 ops/s
# Warmup Iteration   3: 123.494 ops/s
# Warmup Iteration   4: 124.206 ops/s
# Warmup Iteration   5: 123.509 ops/s
# Warmup Iteration   6: 124.065 ops/s
# Warmup Iteration   7: 123.306 ops/s
# Warmup Iteration   8: 123.861 ops/s
# Warmup Iteration   9: 123.889 ops/s
# Warmup Iteration  10: 105.172 ops/s
# Warmup Iteration  11: 123.708 ops/s
# Warmup Iteration  12: 123.445 ops/s
# Warmup Iteration  13: 123.963 ops/s
# Warmup Iteration  14: 123.781 ops/s
# Warmup Iteration  15: 123.205 ops/s
# Warmup Iteration  16: 123.645 ops/s
# Warmup Iteration  17: 123.108 ops/s
# Warmup Iteration  18: 124.266 ops/s
# Warmup Iteration  19: 123.627 ops/s
# Warmup Iteration  20: 123.617 ops/s
# Warmup Iteration  21: 124.006 ops/s
# Warmup Iteration  22: 123.100 ops/s
# Warmup Iteration  23: 122.226 ops/s
# Warmup Iteration  24: 121.697 ops/s
# Warmup Iteration  25: 119.824 ops/s
# Warmup Iteration  26: 121.278 ops/s
# Warmup Iteration  27: 121.684 ops/s
# Warmup Iteration  28: 120.679 ops/s
# Warmup Iteration  29: 121.459 ops/s
# Warmup Iteration  30: 121.143 ops/s
Iteration   1: 121.771 ops/s
Iteration   2: 120.162 ops/s
Iteration   3: 120.907 ops/s
Iteration   4: 120.743 ops/s
Iteration   5: 120.896 ops/s
Iteration   6: 120.464 ops/s
Iteration   7: 121.683 ops/s
Iteration   8: 121.291 ops/s
Iteration   9: 121.725 ops/s
Iteration  10: 121.784 ops/s
Iteration  11: 120.478 ops/s
Iteration  12: 120.767 ops/s
Iteration  13: 121.124 ops/s
Iteration  14: 121.166 ops/s
Iteration  15: 120.406 ops/s
Iteration  16: 121.025 ops/s
Iteration  17: 120.375 ops/s
Iteration  18: 121.693 ops/s
Iteration  19: 122.186 ops/s
Iteration  20: 120.380 ops/s
Iteration  21: 122.361 ops/s
Iteration  22: 120.664 ops/s
Iteration  23: 120.763 ops/s
Iteration  24: 121.157 ops/s
Iteration  25: 120.655 ops/s
Iteration  26: 120.596 ops/s
Iteration  27: 121.110 ops/s
Iteration  28: 120.580 ops/s
Iteration  29: 120.510 ops/s
Iteration  30: 121.386 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_sumDoubleConsistentRounding2":
  121.027 ±(99.9%) 0.385 ops/s [Average]
  (min, avg, max) = (120.162, 121.027, 122.361), stdev = 0.576
  CI (99.9%): [120.642, 121.412] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt    Score   Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_sumDoubleConsistentRounding2  thrpt   30  121.027 ± 0.385  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_sumFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_sumFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 760787.796 ops/s
# Warmup Iteration   2: 1251751.452 ops/s
# Warmup Iteration   3: 1480343.158 ops/s
# Warmup Iteration   4: 1487279.802 ops/s
# Warmup Iteration   5: 1481454.773 ops/s
# Warmup Iteration   6: 1279326.228 ops/s
# Warmup Iteration   7: 1429778.716 ops/s
# Warmup Iteration   8: 1493181.973 ops/s
# Warmup Iteration   9: 1481128.330 ops/s
# Warmup Iteration  10: 1488474.430 ops/s
# Warmup Iteration  11: 1491914.091 ops/s
# Warmup Iteration  12: 1493189.987 ops/s
# Warmup Iteration  13: 1492728.136 ops/s
# Warmup Iteration  14: 1492206.156 ops/s
# Warmup Iteration  15: 1486841.902 ops/s
# Warmup Iteration  16: 1489849.519 ops/s
# Warmup Iteration  17: 1492134.827 ops/s
# Warmup Iteration  18: 1491465.645 ops/s
# Warmup Iteration  19: 1493412.859 ops/s
# Warmup Iteration  20: 1492423.659 ops/s
# Warmup Iteration  21: 1492735.685 ops/s
# Warmup Iteration  22: 1491911.009 ops/s
# Warmup Iteration  23: 1492748.808 ops/s
# Warmup Iteration  24: 1494210.512 ops/s
# Warmup Iteration  25: 1493358.752 ops/s
# Warmup Iteration  26: 1494390.549 ops/s
# Warmup Iteration  27: 1491800.526 ops/s
# Warmup Iteration  28: 1488704.253 ops/s
# Warmup Iteration  29: 1492867.054 ops/s
# Warmup Iteration  30: 1491970.743 ops/s
Iteration   1: 1491611.557 ops/s
Iteration   2: 1492503.423 ops/s
Iteration   3: 1491839.468 ops/s
Iteration   4: 1493600.081 ops/s
Iteration   5: 1492050.020 ops/s
Iteration   6: 1491215.212 ops/s
Iteration   7: 1493654.248 ops/s
Iteration   8: 1489469.344 ops/s
Iteration   9: 1491549.556 ops/s
Iteration  10: 1493171.222 ops/s
Iteration  11: 1486844.030 ops/s
Iteration  12: 1482061.634 ops/s
Iteration  13: 1497274.027 ops/s
Iteration  14: 1491191.530 ops/s
Iteration  15: 1500964.932 ops/s
Iteration  16: 1492043.276 ops/s
Iteration  17: 1486584.532 ops/s
Iteration  18: 1490183.732 ops/s
Iteration  19: 1489489.746 ops/s
Iteration  20: 1487360.572 ops/s
Iteration  21: 1482218.443 ops/s
Iteration  22: 1488120.993 ops/s
Iteration  23: 1499585.389 ops/s
Iteration  24: 1492859.363 ops/s
Iteration  25: 1496248.448 ops/s
Iteration  26: 1492972.118 ops/s
Iteration  27: 1496131.802 ops/s
Iteration  28: 1487942.899 ops/s
Iteration  29: 1496671.963 ops/s
Iteration  30: 1491869.534 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_sumFloat":
  1491642.770 ±(99.9%) 2905.665 ops/s [Average]
  (min, avg, max) = (1482061.634, 1491642.770, 1500964.932), stdev = 4349.063
  CI (99.9%): [1488737.105, 1494548.435] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_sumFloat  thrpt   30  1491642.770 ± 2905.665  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_sumFloatConsistentRounding1$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_sumFloatConsistentRounding1

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 76.786 ops/s
# Warmup Iteration   2: 87.817 ops/s
# Warmup Iteration   3: 116.187 ops/s
# Warmup Iteration   4: 115.822 ops/s
# Warmup Iteration   5: 116.505 ops/s
# Warmup Iteration   6: 116.585 ops/s
# Warmup Iteration   7: 117.699 ops/s
# Warmup Iteration   8: 116.913 ops/s
# Warmup Iteration   9: 117.096 ops/s
# Warmup Iteration  10: 104.817 ops/s
# Warmup Iteration  11: 110.904 ops/s
# Warmup Iteration  12: 116.269 ops/s
# Warmup Iteration  13: 117.601 ops/s
# Warmup Iteration  14: 116.889 ops/s
# Warmup Iteration  15: 117.097 ops/s
# Warmup Iteration  16: 117.305 ops/s
# Warmup Iteration  17: 117.185 ops/s
# Warmup Iteration  18: 117.041 ops/s
# Warmup Iteration  19: 116.460 ops/s
# Warmup Iteration  20: 116.525 ops/s
# Warmup Iteration  21: 116.719 ops/s
# Warmup Iteration  22: 117.030 ops/s
# Warmup Iteration  23: 116.184 ops/s
# Warmup Iteration  24: 114.690 ops/s
# Warmup Iteration  25: 108.239 ops/s
# Warmup Iteration  26: 108.509 ops/s
# Warmup Iteration  27: 108.138 ops/s
# Warmup Iteration  28: 108.770 ops/s
# Warmup Iteration  29: 107.960 ops/s
# Warmup Iteration  30: 108.098 ops/s
Iteration   1: 108.909 ops/s
Iteration   2: 107.456 ops/s
Iteration   3: 108.242 ops/s
Iteration   4: 108.733 ops/s
Iteration   5: 108.742 ops/s
Iteration   6: 107.434 ops/s
Iteration   7: 107.924 ops/s
Iteration   8: 109.545 ops/s
Iteration   9: 108.172 ops/s
Iteration  10: 108.614 ops/s
Iteration  11: 107.587 ops/s
Iteration  12: 108.966 ops/s
Iteration  13: 108.926 ops/s
Iteration  14: 108.812 ops/s
Iteration  15: 106.865 ops/s
Iteration  16: 108.708 ops/s
Iteration  17: 108.479 ops/s
Iteration  18: 107.621 ops/s
Iteration  19: 108.553 ops/s
Iteration  20: 108.148 ops/s
Iteration  21: 108.381 ops/s
Iteration  22: 107.731 ops/s
Iteration  23: 108.411 ops/s
Iteration  24: 108.864 ops/s
Iteration  25: 108.034 ops/s
Iteration  26: 108.274 ops/s
Iteration  27: 108.346 ops/s
Iteration  28: 108.367 ops/s
Iteration  29: 108.617 ops/s
Iteration  30: 108.308 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_sumFloatConsistentRounding1":
  108.326 ±(99.9%) 0.378 ops/s [Average]
  (min, avg, max) = (106.865, 108.326, 109.545), stdev = 0.565
  CI (99.9%): [107.948, 108.703] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt    Score   Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_sumFloatConsistentRounding1  thrpt   30  108.326 ± 0.378  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_sumFloatConsistentRounding2$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_sumFloatConsistentRounding2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 79.891 ops/s
# Warmup Iteration   2: 94.646 ops/s
# Warmup Iteration   3: 122.382 ops/s
# Warmup Iteration   4: 123.145 ops/s
# Warmup Iteration   5: 123.062 ops/s
# Warmup Iteration   6: 122.976 ops/s
# Warmup Iteration   7: 122.919 ops/s
# Warmup Iteration   8: 123.213 ops/s
# Warmup Iteration   9: 123.194 ops/s
# Warmup Iteration  10: 104.788 ops/s
# Warmup Iteration  11: 123.269 ops/s
# Warmup Iteration  12: 123.172 ops/s
# Warmup Iteration  13: 122.734 ops/s
# Warmup Iteration  14: 123.119 ops/s
# Warmup Iteration  15: 122.701 ops/s
# Warmup Iteration  16: 123.330 ops/s
# Warmup Iteration  17: 122.021 ops/s
# Warmup Iteration  18: 122.702 ops/s
# Warmup Iteration  19: 123.360 ops/s
# Warmup Iteration  20: 122.319 ops/s
# Warmup Iteration  21: 123.741 ops/s
# Warmup Iteration  22: 123.263 ops/s
# Warmup Iteration  23: 121.646 ops/s
# Warmup Iteration  24: 122.003 ops/s
# Warmup Iteration  25: 120.240 ops/s
# Warmup Iteration  26: 121.145 ops/s
# Warmup Iteration  27: 120.420 ops/s
# Warmup Iteration  28: 120.899 ops/s
# Warmup Iteration  29: 120.683 ops/s
# Warmup Iteration  30: 121.375 ops/s
Iteration   1: 120.709 ops/s
Iteration   2: 120.486 ops/s
Iteration   3: 119.450 ops/s
Iteration   4: 121.614 ops/s
Iteration   5: 121.309 ops/s
Iteration   6: 120.813 ops/s
Iteration   7: 121.140 ops/s
Iteration   8: 120.677 ops/s
Iteration   9: 120.635 ops/s
Iteration  10: 121.053 ops/s
Iteration  11: 121.140 ops/s
Iteration  12: 120.696 ops/s
Iteration  13: 120.279 ops/s
Iteration  14: 122.440 ops/s
Iteration  15: 120.778 ops/s
Iteration  16: 121.098 ops/s
Iteration  17: 120.572 ops/s
Iteration  18: 119.555 ops/s
Iteration  19: 120.584 ops/s
Iteration  20: 120.595 ops/s
Iteration  21: 120.452 ops/s
Iteration  22: 120.326 ops/s
Iteration  23: 119.634 ops/s
Iteration  24: 121.439 ops/s
Iteration  25: 120.437 ops/s
Iteration  26: 119.823 ops/s
Iteration  27: 120.914 ops/s
Iteration  28: 120.905 ops/s
Iteration  29: 121.491 ops/s
Iteration  30: 120.751 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_sumFloatConsistentRounding2":
  120.727 ±(99.9%) 0.420 ops/s [Average]
  (min, avg, max) = (119.450, 120.727, 122.440), stdev = 0.629
  CI (99.9%): [120.306, 121.147] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt    Score   Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_sumFloatConsistentRounding2  thrpt   30  120.727 ± 0.420  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_sumInteger$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_sumInteger

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 822414.990 ops/s
# Warmup Iteration   2: 1408569.780 ops/s
# Warmup Iteration   3: 1648770.642 ops/s
# Warmup Iteration   4: 1654941.527 ops/s
# Warmup Iteration   5: 1658241.591 ops/s
# Warmup Iteration   6: 1347583.679 ops/s
# Warmup Iteration   7: 1660137.981 ops/s
# Warmup Iteration   8: 1664202.837 ops/s
# Warmup Iteration   9: 1658000.922 ops/s
# Warmup Iteration  10: 1659290.961 ops/s
# Warmup Iteration  11: 1662277.819 ops/s
# Warmup Iteration  12: 1660138.675 ops/s
# Warmup Iteration  13: 1662605.825 ops/s
# Warmup Iteration  14: 1655844.641 ops/s
# Warmup Iteration  15: 1658118.232 ops/s
# Warmup Iteration  16: 1659925.186 ops/s
# Warmup Iteration  17: 1659506.122 ops/s
# Warmup Iteration  18: 1661928.145 ops/s
# Warmup Iteration  19: 1663154.348 ops/s
# Warmup Iteration  20: 1659509.900 ops/s
# Warmup Iteration  21: 1663045.051 ops/s
# Warmup Iteration  22: 1655713.991 ops/s
# Warmup Iteration  23: 1658408.726 ops/s
# Warmup Iteration  24: 1660721.119 ops/s
# Warmup Iteration  25: 1664664.003 ops/s
# Warmup Iteration  26: 1658333.782 ops/s
# Warmup Iteration  27: 1661881.270 ops/s
# Warmup Iteration  28: 1660813.282 ops/s
# Warmup Iteration  29: 1661037.020 ops/s
# Warmup Iteration  30: 1662185.817 ops/s
Iteration   1: 1660316.254 ops/s
Iteration   2: 1662989.233 ops/s
Iteration   3: 1660013.948 ops/s
Iteration   4: 1663517.172 ops/s
Iteration   5: 1660810.352 ops/s
Iteration   6: 1659282.728 ops/s
Iteration   7: 1660731.346 ops/s
Iteration   8: 1655798.688 ops/s
Iteration   9: 1654671.819 ops/s
Iteration  10: 1660386.326 ops/s
Iteration  11: 1664322.126 ops/s
Iteration  12: 1653375.243 ops/s
Iteration  13: 1661759.991 ops/s
Iteration  14: 1660327.627 ops/s
Iteration  15: 1662341.921 ops/s
Iteration  16: 1660985.682 ops/s
Iteration  17: 1654146.588 ops/s
Iteration  18: 1662132.670 ops/s
Iteration  19: 1661715.883 ops/s
Iteration  20: 1661735.459 ops/s
Iteration  21: 1648702.229 ops/s
Iteration  22: 1662510.451 ops/s
Iteration  23: 1659241.720 ops/s
Iteration  24: 1661420.464 ops/s
Iteration  25: 1658782.072 ops/s
Iteration  26: 1664552.909 ops/s
Iteration  27: 1662733.255 ops/s
Iteration  28: 1665296.797 ops/s
Iteration  29: 1658280.527 ops/s
Iteration  30: 1660456.250 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_sumInteger":
  1660111.258 ±(99.9%) 2429.166 ops/s [Average]
  (min, avg, max) = (1648702.229, 1660111.258, 1665296.797), stdev = 3635.862
  CI (99.9%): [1657682.092, 1662540.424] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_sumInteger  thrpt   30  1660111.258 ± 2429.166  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_sumLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_sumLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 818759.529 ops/s
# Warmup Iteration   2: 1408314.307 ops/s
# Warmup Iteration   3: 1632080.261 ops/s
# Warmup Iteration   4: 1646270.400 ops/s
# Warmup Iteration   5: 1641760.022 ops/s
# Warmup Iteration   6: 1337564.695 ops/s
# Warmup Iteration   7: 1648437.217 ops/s
# Warmup Iteration   8: 1649712.953 ops/s
# Warmup Iteration   9: 1649750.068 ops/s
# Warmup Iteration  10: 1647281.504 ops/s
# Warmup Iteration  11: 1645891.472 ops/s
# Warmup Iteration  12: 1643995.238 ops/s
# Warmup Iteration  13: 1645242.396 ops/s
# Warmup Iteration  14: 1646586.743 ops/s
# Warmup Iteration  15: 1643307.471 ops/s
# Warmup Iteration  16: 1644865.799 ops/s
# Warmup Iteration  17: 1636480.457 ops/s
# Warmup Iteration  18: 1646989.458 ops/s
# Warmup Iteration  19: 1640087.945 ops/s
# Warmup Iteration  20: 1643469.692 ops/s
# Warmup Iteration  21: 1645208.302 ops/s
# Warmup Iteration  22: 1637438.314 ops/s
# Warmup Iteration  23: 1643762.934 ops/s
# Warmup Iteration  24: 1644423.713 ops/s
# Warmup Iteration  25: 1641317.779 ops/s
# Warmup Iteration  26: 1642346.184 ops/s
# Warmup Iteration  27: 1645489.278 ops/s
# Warmup Iteration  28: 1646717.029 ops/s
# Warmup Iteration  29: 1641208.162 ops/s
# Warmup Iteration  30: 1642113.840 ops/s
Iteration   1: 1647370.795 ops/s
Iteration   2: 1635058.137 ops/s
Iteration   3: 1647270.624 ops/s
Iteration   4: 1639492.106 ops/s
Iteration   5: 1643104.304 ops/s
Iteration   6: 1645612.442 ops/s
Iteration   7: 1648052.199 ops/s
Iteration   8: 1647101.602 ops/s
Iteration   9: 1644242.475 ops/s
Iteration  10: 1652883.657 ops/s
Iteration  11: 1637014.761 ops/s
Iteration  12: 1642503.515 ops/s
Iteration  13: 1644489.509 ops/s
Iteration  14: 1647295.656 ops/s
Iteration  15: 1645381.989 ops/s
Iteration  16: 1651973.069 ops/s
Iteration  17: 1645057.649 ops/s
Iteration  18: 1640695.690 ops/s
Iteration  19: 1648901.162 ops/s
Iteration  20: 1648643.985 ops/s
Iteration  21: 1650237.106 ops/s
Iteration  22: 1641382.895 ops/s
Iteration  23: 1646059.218 ops/s
Iteration  24: 1642899.210 ops/s
Iteration  25: 1639885.746 ops/s
Iteration  26: 1645310.697 ops/s
Iteration  27: 1643992.954 ops/s
Iteration  28: 1645994.195 ops/s
Iteration  29: 1642912.871 ops/s
Iteration  30: 1636282.041 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_sumLong":
  1644570.075 ±(99.9%) 2885.210 ops/s [Average]
  (min, avg, max) = (1635058.137, 1644570.075, 1652883.657), stdev = 4318.447
  CI (99.9%): [1641684.865, 1647455.286] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_sumLong  thrpt   30  1644570.075 ± 2885.210  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_summarizeDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_summarizeDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2163115.925 ops/s
# Warmup Iteration   2: 4176380.935 ops/s
# Warmup Iteration   3: 4509232.671 ops/s
# Warmup Iteration   4: 4530330.546 ops/s
# Warmup Iteration   5: 3725949.012 ops/s
# Warmup Iteration   6: 4527974.358 ops/s
# Warmup Iteration   7: 4532435.195 ops/s
# Warmup Iteration   8: 4527284.896 ops/s
# Warmup Iteration   9: 4526947.375 ops/s
# Warmup Iteration  10: 4535470.948 ops/s
# Warmup Iteration  11: 4525363.849 ops/s
# Warmup Iteration  12: 4525927.912 ops/s
# Warmup Iteration  13: 4528324.835 ops/s
# Warmup Iteration  14: 4530555.562 ops/s
# Warmup Iteration  15: 4516306.073 ops/s
# Warmup Iteration  16: 4529203.095 ops/s
# Warmup Iteration  17: 4519366.160 ops/s
# Warmup Iteration  18: 4515370.781 ops/s
# Warmup Iteration  19: 4517943.484 ops/s
# Warmup Iteration  20: 4525406.696 ops/s
# Warmup Iteration  21: 4523914.667 ops/s
# Warmup Iteration  22: 4516570.442 ops/s
# Warmup Iteration  23: 4518877.285 ops/s
# Warmup Iteration  24: 4520201.812 ops/s
# Warmup Iteration  25: 4521203.941 ops/s
# Warmup Iteration  26: 4529277.178 ops/s
# Warmup Iteration  27: 4507801.183 ops/s
# Warmup Iteration  28: 4514779.825 ops/s
# Warmup Iteration  29: 4524057.117 ops/s
# Warmup Iteration  30: 4526219.329 ops/s
Iteration   1: 4517880.683 ops/s
Iteration   2: 4527217.752 ops/s
Iteration   3: 4522984.352 ops/s
Iteration   4: 4512506.407 ops/s
Iteration   5: 4530942.899 ops/s
Iteration   6: 4530417.310 ops/s
Iteration   7: 4525130.289 ops/s
Iteration   8: 4520620.508 ops/s
Iteration   9: 4518502.661 ops/s
Iteration  10: 4504317.437 ops/s
Iteration  11: 4517090.701 ops/s
Iteration  12: 4519754.779 ops/s
Iteration  13: 4518483.636 ops/s
Iteration  14: 4523246.364 ops/s
Iteration  15: 4525789.303 ops/s
Iteration  16: 4499934.984 ops/s
Iteration  17: 4518590.859 ops/s
Iteration  18: 4516065.989 ops/s
Iteration  19: 4527641.131 ops/s
Iteration  20: 4515449.165 ops/s
Iteration  21: 4516095.662 ops/s
Iteration  22: 4518937.258 ops/s
Iteration  23: 4522227.754 ops/s
Iteration  24: 4536341.862 ops/s
Iteration  25: 4507548.460 ops/s
Iteration  26: 4525598.747 ops/s
Iteration  27: 4520134.742 ops/s
Iteration  28: 4533889.752 ops/s
Iteration  29: 4510048.114 ops/s
Iteration  30: 4525381.847 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_summarizeDouble":
  4520292.380 ±(99.9%) 5509.414 ops/s [Average]
  (min, avg, max) = (4499934.984, 4520292.380, 4536341.862), stdev = 8246.232
  CI (99.9%): [4514782.967, 4525801.794] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_summarizeDouble  thrpt   30  4520292.380 ± 5509.414  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_summarizeFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_summarizeFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2211358.400 ops/s
# Warmup Iteration   2: 4186665.745 ops/s
# Warmup Iteration   3: 4540696.963 ops/s
# Warmup Iteration   4: 4569071.940 ops/s
# Warmup Iteration   5: 3768289.937 ops/s
# Warmup Iteration   6: 4566970.859 ops/s
# Warmup Iteration   7: 4569114.543 ops/s
# Warmup Iteration   8: 4566533.034 ops/s
# Warmup Iteration   9: 4573366.884 ops/s
# Warmup Iteration  10: 4568664.918 ops/s
# Warmup Iteration  11: 4563236.003 ops/s
# Warmup Iteration  12: 4555476.846 ops/s
# Warmup Iteration  13: 4567745.201 ops/s
# Warmup Iteration  14: 4563884.973 ops/s
# Warmup Iteration  15: 4530222.721 ops/s
# Warmup Iteration  16: 4564382.061 ops/s
# Warmup Iteration  17: 4565708.618 ops/s
# Warmup Iteration  18: 4568341.817 ops/s
# Warmup Iteration  19: 4569983.340 ops/s
# Warmup Iteration  20: 4558709.019 ops/s
# Warmup Iteration  21: 4549039.806 ops/s
# Warmup Iteration  22: 4568755.158 ops/s
# Warmup Iteration  23: 4576018.057 ops/s
# Warmup Iteration  24: 4572899.821 ops/s
# Warmup Iteration  25: 4563758.647 ops/s
# Warmup Iteration  26: 4571616.627 ops/s
# Warmup Iteration  27: 4561460.331 ops/s
# Warmup Iteration  28: 4562062.473 ops/s
# Warmup Iteration  29: 4573373.428 ops/s
# Warmup Iteration  30: 4561838.206 ops/s
Iteration   1: 4568156.149 ops/s
Iteration   2: 4562725.271 ops/s
Iteration   3: 4564365.221 ops/s
Iteration   4: 4547381.229 ops/s
Iteration   5: 4578065.131 ops/s
Iteration   6: 4560054.699 ops/s
Iteration   7: 4559317.474 ops/s
Iteration   8: 4569156.223 ops/s
Iteration   9: 4572151.814 ops/s
Iteration  10: 4569809.398 ops/s
Iteration  11: 4577503.447 ops/s
Iteration  12: 4572971.723 ops/s
Iteration  13: 4570292.590 ops/s
Iteration  14: 4576973.595 ops/s
Iteration  15: 4557364.477 ops/s
Iteration  16: 4561104.897 ops/s
Iteration  17: 4572016.039 ops/s
Iteration  18: 4564091.215 ops/s
Iteration  19: 4562089.069 ops/s
Iteration  20: 4574307.156 ops/s
Iteration  21: 4565097.935 ops/s
Iteration  22: 4564545.354 ops/s
Iteration  23: 4568007.184 ops/s
Iteration  24: 4571481.673 ops/s
Iteration  25: 4559864.643 ops/s
Iteration  26: 4561744.069 ops/s
Iteration  27: 4562547.895 ops/s
Iteration  28: 4559513.313 ops/s
Iteration  29: 4566567.701 ops/s
Iteration  30: 4534704.633 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_summarizeFloat":
  4565132.374 ±(99.9%) 5948.603 ops/s [Average]
  (min, avg, max) = (4534704.633, 4565132.374, 4578065.131), stdev = 8903.589
  CI (99.9%): [4559183.771, 4571080.977] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_summarizeFloat  thrpt   30  4565132.374 ± 5948.603  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_summarizeInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_summarizeInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2122692.109 ops/s
# Warmup Iteration   2: 3946445.919 ops/s
# Warmup Iteration   3: 4357391.324 ops/s
# Warmup Iteration   4: 4385749.021 ops/s
# Warmup Iteration   5: 3603712.525 ops/s
# Warmup Iteration   6: 4395362.748 ops/s
# Warmup Iteration   7: 4401666.842 ops/s
# Warmup Iteration   8: 4385832.767 ops/s
# Warmup Iteration   9: 4397776.641 ops/s
# Warmup Iteration  10: 4395699.791 ops/s
# Warmup Iteration  11: 4398196.133 ops/s
# Warmup Iteration  12: 4393212.836 ops/s
# Warmup Iteration  13: 4396818.796 ops/s
# Warmup Iteration  14: 4394050.320 ops/s
# Warmup Iteration  15: 4386434.945 ops/s
# Warmup Iteration  16: 4389905.332 ops/s
# Warmup Iteration  17: 4387154.890 ops/s
# Warmup Iteration  18: 4394280.293 ops/s
# Warmup Iteration  19: 4389022.781 ops/s
# Warmup Iteration  20: 4384731.137 ops/s
# Warmup Iteration  21: 4377334.775 ops/s
# Warmup Iteration  22: 4391577.707 ops/s
# Warmup Iteration  23: 4386432.984 ops/s
# Warmup Iteration  24: 4393005.788 ops/s
# Warmup Iteration  25: 4383567.867 ops/s
# Warmup Iteration  26: 4395410.736 ops/s
# Warmup Iteration  27: 4380209.404 ops/s
# Warmup Iteration  28: 4383982.129 ops/s
# Warmup Iteration  29: 4381498.773 ops/s
# Warmup Iteration  30: 4398199.034 ops/s
Iteration   1: 4377650.730 ops/s
Iteration   2: 4399408.674 ops/s
Iteration   3: 4350630.984 ops/s
Iteration   4: 4383335.622 ops/s
Iteration   5: 4405059.545 ops/s
Iteration   6: 4397962.883 ops/s
Iteration   7: 4380014.979 ops/s
Iteration   8: 4387110.226 ops/s
Iteration   9: 4385974.329 ops/s
Iteration  10: 4388831.987 ops/s
Iteration  11: 4399424.388 ops/s
Iteration  12: 4393430.866 ops/s
Iteration  13: 4364541.896 ops/s
Iteration  14: 4385481.326 ops/s
Iteration  15: 4371653.492 ops/s
Iteration  16: 4386579.804 ops/s
Iteration  17: 4385533.877 ops/s
Iteration  18: 4388495.930 ops/s
Iteration  19: 4399682.608 ops/s
Iteration  20: 4363862.480 ops/s
Iteration  21: 4360655.449 ops/s
Iteration  22: 4405051.915 ops/s
Iteration  23: 4386516.491 ops/s
Iteration  24: 4393642.723 ops/s
Iteration  25: 4401816.831 ops/s
Iteration  26: 4386948.657 ops/s
Iteration  27: 4384458.262 ops/s
Iteration  28: 4375597.863 ops/s
Iteration  29: 4392067.605 ops/s
Iteration  30: 4389271.040 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_summarizeInt":
  4385689.782 ±(99.9%) 8873.361 ops/s [Average]
  (min, avg, max) = (4350630.984, 4385689.782, 4405059.545), stdev = 13281.231
  CI (99.9%): [4376816.421, 4394563.144] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_summarizeInt  thrpt   30  4385689.782 ± 8873.361  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_summarizeLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_summarizeLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2076888.122 ops/s
# Warmup Iteration   2: 3947040.628 ops/s
# Warmup Iteration   3: 4279222.613 ops/s
# Warmup Iteration   4: 4309318.624 ops/s
# Warmup Iteration   5: 3528909.800 ops/s
# Warmup Iteration   6: 4316454.550 ops/s
# Warmup Iteration   7: 4315310.898 ops/s
# Warmup Iteration   8: 4318962.983 ops/s
# Warmup Iteration   9: 4317104.922 ops/s
# Warmup Iteration  10: 4322609.412 ops/s
# Warmup Iteration  11: 4323793.336 ops/s
# Warmup Iteration  12: 4320806.266 ops/s
# Warmup Iteration  13: 4310792.772 ops/s
# Warmup Iteration  14: 4322098.385 ops/s
# Warmup Iteration  15: 4303783.400 ops/s
# Warmup Iteration  16: 4296136.285 ops/s
# Warmup Iteration  17: 4322640.518 ops/s
# Warmup Iteration  18: 4320707.023 ops/s
# Warmup Iteration  19: 4306164.469 ops/s
# Warmup Iteration  20: 4311893.343 ops/s
# Warmup Iteration  21: 4322791.250 ops/s
# Warmup Iteration  22: 4313186.956 ops/s
# Warmup Iteration  23: 4328772.377 ops/s
# Warmup Iteration  24: 4319133.261 ops/s
# Warmup Iteration  25: 4317514.069 ops/s
# Warmup Iteration  26: 4319664.878 ops/s
# Warmup Iteration  27: 4329372.678 ops/s
# Warmup Iteration  28: 4317959.065 ops/s
# Warmup Iteration  29: 4322889.064 ops/s
# Warmup Iteration  30: 4322202.702 ops/s
Iteration   1: 4320703.989 ops/s
Iteration   2: 4330148.870 ops/s
Iteration   3: 4318618.355 ops/s
Iteration   4: 4325905.416 ops/s
Iteration   5: 4326694.984 ops/s
Iteration   6: 4327957.988 ops/s
Iteration   7: 4319203.267 ops/s
Iteration   8: 4330898.608 ops/s
Iteration   9: 4314530.330 ops/s
Iteration  10: 4326504.158 ops/s
Iteration  11: 4319331.157 ops/s
Iteration  12: 4306536.396 ops/s
Iteration  13: 4323013.468 ops/s
Iteration  14: 4322434.376 ops/s
Iteration  15: 4306343.937 ops/s
Iteration  16: 4313741.965 ops/s
Iteration  17: 4322401.710 ops/s
Iteration  18: 4318485.665 ops/s
Iteration  19: 4318508.769 ops/s
Iteration  20: 4330671.220 ops/s
Iteration  21: 4316532.729 ops/s
Iteration  22: 4304646.816 ops/s
Iteration  23: 4329061.404 ops/s
Iteration  24: 4309927.870 ops/s
Iteration  25: 4312183.992 ops/s
Iteration  26: 4331263.284 ops/s
Iteration  27: 4320745.750 ops/s
Iteration  28: 4313448.794 ops/s
Iteration  29: 4325962.643 ops/s
Iteration  30: 4311725.163 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_summarizeLong":
  4319937.769 ±(99.9%) 5194.826 ops/s [Average]
  (min, avg, max) = (4304646.816, 4319937.769, 4331263.284), stdev = 7775.371
  CI (99.9%): [4314742.943, 4325132.595] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_summarizeLong  thrpt   30  4319937.769 ± 5194.826  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_tap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_tap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1533544.864 ops/s
# Warmup Iteration   2: 3112160.583 ops/s
# Warmup Iteration   3: 3475033.728 ops/s
# Warmup Iteration   4: 3481709.220 ops/s
# Warmup Iteration   5: 2848638.959 ops/s
# Warmup Iteration   6: 3488407.504 ops/s
# Warmup Iteration   7: 3496239.852 ops/s
# Warmup Iteration   8: 3494723.195 ops/s
# Warmup Iteration   9: 3504190.921 ops/s
# Warmup Iteration  10: 3488090.580 ops/s
# Warmup Iteration  11: 3496848.435 ops/s
# Warmup Iteration  12: 3490627.173 ops/s
# Warmup Iteration  13: 3495043.752 ops/s
# Warmup Iteration  14: 3485299.595 ops/s
# Warmup Iteration  15: 3487805.749 ops/s
# Warmup Iteration  16: 3492053.632 ops/s
# Warmup Iteration  17: 3496977.645 ops/s
# Warmup Iteration  18: 3484081.849 ops/s
# Warmup Iteration  19: 3480031.773 ops/s
# Warmup Iteration  20: 3496280.550 ops/s
# Warmup Iteration  21: 3498861.087 ops/s
# Warmup Iteration  22: 3499690.498 ops/s
# Warmup Iteration  23: 3493420.347 ops/s
# Warmup Iteration  24: 3492072.823 ops/s
# Warmup Iteration  25: 3503383.011 ops/s
# Warmup Iteration  26: 3496709.738 ops/s
# Warmup Iteration  27: 3480682.982 ops/s
# Warmup Iteration  28: 3492373.525 ops/s
# Warmup Iteration  29: 3494334.280 ops/s
# Warmup Iteration  30: 3493892.859 ops/s
Iteration   1: 3485408.338 ops/s
Iteration   2: 3500934.650 ops/s
Iteration   3: 3499482.744 ops/s
Iteration   4: 3494480.639 ops/s
Iteration   5: 3502975.432 ops/s
Iteration   6: 3493997.863 ops/s
Iteration   7: 3493758.325 ops/s
Iteration   8: 3499466.575 ops/s
Iteration   9: 3497686.154 ops/s
Iteration  10: 3484993.372 ops/s
Iteration  11: 3487692.597 ops/s
Iteration  12: 3505642.407 ops/s
Iteration  13: 3498652.929 ops/s
Iteration  14: 3487114.514 ops/s
Iteration  15: 3501848.300 ops/s
Iteration  16: 3479857.033 ops/s
Iteration  17: 3496485.946 ops/s
Iteration  18: 3490356.379 ops/s
Iteration  19: 3481736.228 ops/s
Iteration  20: 3497674.804 ops/s
Iteration  21: 3502587.603 ops/s
Iteration  22: 3497081.193 ops/s
Iteration  23: 3501391.531 ops/s
Iteration  24: 3502003.715 ops/s
Iteration  25: 3497232.031 ops/s
Iteration  26: 3504240.455 ops/s
Iteration  27: 3504228.744 ops/s
Iteration  28: 3498619.232 ops/s
Iteration  29: 3493479.644 ops/s
Iteration  30: 3498345.428 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_tap":
  3495981.827 ±(99.9%) 4627.674 ops/s [Average]
  (min, avg, max) = (3479857.033, 3495981.827, 3505642.407), stdev = 6926.485
  CI (99.9%): [3491354.153, 3500609.501] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_tap  thrpt   30  3495981.827 ± 4627.674  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_testFactory$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_testFactory

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 101658518.141 ops/s
# Warmup Iteration   2: 209176973.507 ops/s
# Warmup Iteration   3: 247330460.356 ops/s
# Warmup Iteration   4: 287534125.677 ops/s
# Warmup Iteration   5: 287959497.914 ops/s
# Warmup Iteration   6: 287320726.582 ops/s
# Warmup Iteration   7: 286650567.674 ops/s
# Warmup Iteration   8: 287260005.478 ops/s
# Warmup Iteration   9: 287261920.339 ops/s
# Warmup Iteration  10: 287327253.799 ops/s
# Warmup Iteration  11: 288004211.605 ops/s
# Warmup Iteration  12: 287773304.394 ops/s
# Warmup Iteration  13: 288061958.478 ops/s
# Warmup Iteration  14: 286713212.641 ops/s
# Warmup Iteration  15: 287200714.445 ops/s
# Warmup Iteration  16: 287241162.225 ops/s
# Warmup Iteration  17: 288332723.087 ops/s
# Warmup Iteration  18: 287526700.824 ops/s
# Warmup Iteration  19: 287239847.751 ops/s
# Warmup Iteration  20: 286002216.699 ops/s
# Warmup Iteration  21: 286800762.156 ops/s
# Warmup Iteration  22: 287512793.603 ops/s
# Warmup Iteration  23: 287999326.756 ops/s
# Warmup Iteration  24: 288825478.200 ops/s
# Warmup Iteration  25: 287804023.348 ops/s
# Warmup Iteration  26: 288393769.427 ops/s
# Warmup Iteration  27: 286751557.909 ops/s
# Warmup Iteration  28: 287036129.104 ops/s
# Warmup Iteration  29: 287124864.735 ops/s
# Warmup Iteration  30: 288448589.537 ops/s
Iteration   1: 285918149.829 ops/s
Iteration   2: 287096879.371 ops/s
Iteration   3: 287330683.705 ops/s
Iteration   4: 288067748.396 ops/s
Iteration   5: 286077826.659 ops/s
Iteration   6: 288044868.137 ops/s
Iteration   7: 287303310.731 ops/s
Iteration   8: 287837334.713 ops/s
Iteration   9: 286365344.961 ops/s
Iteration  10: 287646826.890 ops/s
Iteration  11: 286368752.045 ops/s
Iteration  12: 287280983.578 ops/s
Iteration  13: 286388836.168 ops/s
Iteration  14: 286698160.152 ops/s
Iteration  15: 286969886.870 ops/s
Iteration  16: 285684144.142 ops/s
Iteration  17: 287009305.944 ops/s
Iteration  18: 286485722.337 ops/s
Iteration  19: 288126710.388 ops/s
Iteration  20: 287339722.824 ops/s
Iteration  21: 287291895.413 ops/s
Iteration  22: 287265853.419 ops/s
Iteration  23: 287937899.521 ops/s
Iteration  24: 288408487.579 ops/s
Iteration  25: 287719512.779 ops/s
Iteration  26: 288327091.073 ops/s
Iteration  27: 286109183.791 ops/s
Iteration  28: 287198348.328 ops/s
Iteration  29: 287668551.983 ops/s
Iteration  30: 287828208.509 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_testFactory":
  287193207.675 ±(99.9%) 503249.028 ops/s [Average]
  (min, avg, max) = (285684144.142, 287193207.675, 288408487.579), stdev = 753239.510
  CI (99.9%): [286689958.647, 287696456.702] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt          Score        Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_testFactory  thrpt   30  287193207.675 ± 503249.028  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_testNewCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_testNewCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6037417.211 ops/s
# Warmup Iteration   2: 12610141.511 ops/s
# Warmup Iteration   3: 10779087.818 ops/s
# Warmup Iteration   4: 12803243.632 ops/s
# Warmup Iteration   5: 12800076.306 ops/s
# Warmup Iteration   6: 12826503.034 ops/s
# Warmup Iteration   7: 12819616.232 ops/s
# Warmup Iteration   8: 12791930.654 ops/s
# Warmup Iteration   9: 12791933.839 ops/s
# Warmup Iteration  10: 12799385.519 ops/s
# Warmup Iteration  11: 12798318.409 ops/s
# Warmup Iteration  12: 12806411.117 ops/s
# Warmup Iteration  13: 12825196.445 ops/s
# Warmup Iteration  14: 12821318.308 ops/s
# Warmup Iteration  15: 12771266.518 ops/s
# Warmup Iteration  16: 12825649.653 ops/s
# Warmup Iteration  17: 12733547.431 ops/s
# Warmup Iteration  18: 12796239.395 ops/s
# Warmup Iteration  19: 12833662.492 ops/s
# Warmup Iteration  20: 12812642.269 ops/s
# Warmup Iteration  21: 12782454.845 ops/s
# Warmup Iteration  22: 12830771.415 ops/s
# Warmup Iteration  23: 12807052.572 ops/s
# Warmup Iteration  24: 12800588.796 ops/s
# Warmup Iteration  25: 12824076.108 ops/s
# Warmup Iteration  26: 12792811.949 ops/s
# Warmup Iteration  27: 12749479.466 ops/s
# Warmup Iteration  28: 12808336.085 ops/s
# Warmup Iteration  29: 12793694.031 ops/s
# Warmup Iteration  30: 12803472.648 ops/s
Iteration   1: 12812891.058 ops/s
Iteration   2: 12795214.113 ops/s
Iteration   3: 12803445.602 ops/s
Iteration   4: 12863063.889 ops/s
Iteration   5: 12780254.988 ops/s
Iteration   6: 12842738.442 ops/s
Iteration   7: 12789162.313 ops/s
Iteration   8: 12822380.813 ops/s
Iteration   9: 12824940.620 ops/s
Iteration  10: 12824792.962 ops/s
Iteration  11: 12788131.018 ops/s
Iteration  12: 12859561.061 ops/s
Iteration  13: 12825388.194 ops/s
Iteration  14: 12813989.707 ops/s
Iteration  15: 12805089.737 ops/s
Iteration  16: 12846924.065 ops/s
Iteration  17: 12843497.703 ops/s
Iteration  18: 12822014.872 ops/s
Iteration  19: 12772600.341 ops/s
Iteration  20: 12825910.860 ops/s
Iteration  21: 12801247.760 ops/s
Iteration  22: 12822643.950 ops/s
Iteration  23: 12824908.976 ops/s
Iteration  24: 12859153.760 ops/s
Iteration  25: 12761705.977 ops/s
Iteration  26: 12812685.708 ops/s
Iteration  27: 12811127.740 ops/s
Iteration  28: 12815975.969 ops/s
Iteration  29: 12840196.345 ops/s
Iteration  30: 12833904.946 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_testNewCollection":
  12818184.783 ±(99.9%) 16778.602 ops/s [Average]
  (min, avg, max) = (12761705.977, 12818184.783, 12863063.889), stdev = 25113.424
  CI (99.9%): [12801406.180, 12834963.385] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score       Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_testNewCollection  thrpt   30  12818184.783 ± 16778.602  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_testSize$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_testSize

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 34340231.705 ops/s
# Warmup Iteration   2: 59071507.866 ops/s
# Warmup Iteration   3: 69091566.459 ops/s
# Warmup Iteration   4: 69227423.623 ops/s
# Warmup Iteration   5: 68992238.670 ops/s
# Warmup Iteration   6: 69053095.077 ops/s
# Warmup Iteration   7: 69208581.018 ops/s
# Warmup Iteration   8: 68990179.174 ops/s
# Warmup Iteration   9: 69141944.743 ops/s
# Warmup Iteration  10: 69100898.932 ops/s
# Warmup Iteration  11: 69479047.717 ops/s
# Warmup Iteration  12: 69119026.556 ops/s
# Warmup Iteration  13: 69199318.052 ops/s
# Warmup Iteration  14: 68997681.370 ops/s
# Warmup Iteration  15: 69260417.831 ops/s
# Warmup Iteration  16: 69036829.986 ops/s
# Warmup Iteration  17: 69162970.401 ops/s
# Warmup Iteration  18: 69039078.311 ops/s
# Warmup Iteration  19: 69176504.156 ops/s
# Warmup Iteration  20: 69359256.309 ops/s
# Warmup Iteration  21: 68992430.499 ops/s
# Warmup Iteration  22: 69309178.702 ops/s
# Warmup Iteration  23: 69208275.027 ops/s
# Warmup Iteration  24: 69206718.383 ops/s
# Warmup Iteration  25: 69120449.549 ops/s
# Warmup Iteration  26: 69130166.424 ops/s
# Warmup Iteration  27: 69212214.264 ops/s
# Warmup Iteration  28: 69308670.009 ops/s
# Warmup Iteration  29: 69458349.788 ops/s
# Warmup Iteration  30: 69108498.053 ops/s
Iteration   1: 69471258.109 ops/s
Iteration   2: 68737671.722 ops/s
Iteration   3: 69267838.379 ops/s
Iteration   4: 69565286.245 ops/s
Iteration   5: 69412403.729 ops/s
Iteration   6: 69198661.911 ops/s
Iteration   7: 69271686.761 ops/s
Iteration   8: 69334925.935 ops/s
Iteration   9: 68980397.623 ops/s
Iteration  10: 68896866.552 ops/s
Iteration  11: 69312332.105 ops/s
Iteration  12: 68731754.681 ops/s
Iteration  13: 69651389.298 ops/s
Iteration  14: 69174272.570 ops/s
Iteration  15: 69385526.763 ops/s
Iteration  16: 69097268.918 ops/s
Iteration  17: 69436289.750 ops/s
Iteration  18: 69269257.435 ops/s
Iteration  19: 68960569.750 ops/s
Iteration  20: 69074205.692 ops/s
Iteration  21: 69139645.070 ops/s
Iteration  22: 69165612.288 ops/s
Iteration  23: 69153641.045 ops/s
Iteration  24: 69202322.564 ops/s
Iteration  25: 69261026.873 ops/s
Iteration  26: 69381249.691 ops/s
Iteration  27: 69176601.655 ops/s
Iteration  28: 68754198.728 ops/s
Iteration  29: 69521921.201 ops/s
Iteration  30: 69079036.897 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_testSize":
  69202170.665 ±(99.9%) 157418.825 ops/s [Average]
  (min, avg, max) = (68731754.681, 69202170.665, 69651389.298), stdev = 235617.105
  CI (99.9%): [69044751.839, 69359589.490] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt         Score        Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_testSize  thrpt   30  69202170.665 ± 157418.825  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1347811.754 ops/s
# Warmup Iteration   2: 2974594.567 ops/s
# Warmup Iteration   3: 3161073.463 ops/s
# Warmup Iteration   4: 3108370.578 ops/s
# Warmup Iteration   5: 2693258.650 ops/s
# Warmup Iteration   6: 3189593.502 ops/s
# Warmup Iteration   7: 3177414.743 ops/s
# Warmup Iteration   8: 3188935.337 ops/s
# Warmup Iteration   9: 3182996.570 ops/s
# Warmup Iteration  10: 3185201.338 ops/s
# Warmup Iteration  11: 3186634.091 ops/s
# Warmup Iteration  12: 3166883.956 ops/s
# Warmup Iteration  13: 3184328.340 ops/s
# Warmup Iteration  14: 3173390.881 ops/s
# Warmup Iteration  15: 3184612.582 ops/s
# Warmup Iteration  16: 3178375.752 ops/s
# Warmup Iteration  17: 3177330.244 ops/s
# Warmup Iteration  18: 3171434.558 ops/s
# Warmup Iteration  19: 3184729.520 ops/s
# Warmup Iteration  20: 3176623.621 ops/s
# Warmup Iteration  21: 3181903.329 ops/s
# Warmup Iteration  22: 3176498.926 ops/s
# Warmup Iteration  23: 3175925.257 ops/s
# Warmup Iteration  24: 3182780.267 ops/s
# Warmup Iteration  25: 3179108.865 ops/s
# Warmup Iteration  26: 3174360.316 ops/s
# Warmup Iteration  27: 3183496.773 ops/s
# Warmup Iteration  28: 3174406.162 ops/s
# Warmup Iteration  29: 3184545.213 ops/s
# Warmup Iteration  30: 3170287.997 ops/s
Iteration   1: 3180340.638 ops/s
Iteration   2: 3185741.655 ops/s
Iteration   3: 3161922.969 ops/s
Iteration   4: 3177234.792 ops/s
Iteration   5: 3188302.989 ops/s
Iteration   6: 3180893.758 ops/s
Iteration   7: 3185774.964 ops/s
Iteration   8: 3170426.839 ops/s
Iteration   9: 3186458.623 ops/s
Iteration  10: 3180167.106 ops/s
Iteration  11: 3191479.971 ops/s
Iteration  12: 3175682.919 ops/s
Iteration  13: 3184610.320 ops/s
Iteration  14: 3173206.092 ops/s
Iteration  15: 3178131.632 ops/s
Iteration  16: 3176582.580 ops/s
Iteration  17: 3184604.854 ops/s
Iteration  18: 3186149.488 ops/s
Iteration  19: 3174565.802 ops/s
Iteration  20: 3194648.933 ops/s
Iteration  21: 3182194.095 ops/s
Iteration  22: 3180550.449 ops/s
Iteration  23: 3189275.742 ops/s
Iteration  24: 3188391.810 ops/s
Iteration  25: 3185412.593 ops/s
Iteration  26: 3168264.859 ops/s
Iteration  27: 3190340.272 ops/s
Iteration  28: 3183795.319 ops/s
Iteration  29: 3186423.348 ops/s
Iteration  30: 3197609.523 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_testToString":
  3182306.164 ±(99.9%) 5237.050 ops/s [Average]
  (min, avg, max) = (3161922.969, 3182306.164, 3197609.523), stdev = 7838.570
  CI (99.9%): [3177069.115, 3187543.214] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_testToString  thrpt   30  3182306.164 ± 5237.050  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1244899.173 ops/s
# Warmup Iteration   2: 3100275.177 ops/s
# Warmup Iteration   3: 3204727.016 ops/s
# Warmup Iteration   4: 2663257.511 ops/s
# Warmup Iteration   5: 3212971.114 ops/s
# Warmup Iteration   6: 3192602.789 ops/s
# Warmup Iteration   7: 3213598.782 ops/s
# Warmup Iteration   8: 3213608.276 ops/s
# Warmup Iteration   9: 3216213.709 ops/s
# Warmup Iteration  10: 3216438.530 ops/s
# Warmup Iteration  11: 3215574.092 ops/s
# Warmup Iteration  12: 3219159.967 ops/s
# Warmup Iteration  13: 3220539.466 ops/s
# Warmup Iteration  14: 3218409.931 ops/s
# Warmup Iteration  15: 3215478.384 ops/s
# Warmup Iteration  16: 3217291.782 ops/s
# Warmup Iteration  17: 3200840.834 ops/s
# Warmup Iteration  18: 3206236.244 ops/s
# Warmup Iteration  19: 3195928.802 ops/s
# Warmup Iteration  20: 3203987.931 ops/s
# Warmup Iteration  21: 3203925.324 ops/s
# Warmup Iteration  22: 3201491.546 ops/s
# Warmup Iteration  23: 3193601.109 ops/s
# Warmup Iteration  24: 3201762.795 ops/s
# Warmup Iteration  25: 3206987.778 ops/s
# Warmup Iteration  26: 3207440.135 ops/s
# Warmup Iteration  27: 3202055.590 ops/s
# Warmup Iteration  28: 3201450.035 ops/s
# Warmup Iteration  29: 3206032.290 ops/s
# Warmup Iteration  30: 3206921.425 ops/s
Iteration   1: 3208840.900 ops/s
Iteration   2: 3205376.911 ops/s
Iteration   3: 3214367.177 ops/s
Iteration   4: 3204686.426 ops/s
Iteration   5: 3204597.267 ops/s
Iteration   6: 3202154.502 ops/s
Iteration   7: 3213113.470 ops/s
Iteration   8: 3213139.934 ops/s
Iteration   9: 3150759.705 ops/s
Iteration  10: 3196474.656 ops/s
Iteration  11: 3195574.626 ops/s
Iteration  12: 3207231.782 ops/s
Iteration  13: 3209660.855 ops/s
Iteration  14: 3207383.462 ops/s
Iteration  15: 3204721.500 ops/s
Iteration  16: 3194112.859 ops/s
Iteration  17: 3200476.477 ops/s
Iteration  18: 3213931.177 ops/s
Iteration  19: 3207533.951 ops/s
Iteration  20: 3205689.293 ops/s
Iteration  21: 3215346.269 ops/s
Iteration  22: 3199330.568 ops/s
Iteration  23: 3208880.168 ops/s
Iteration  24: 3203233.400 ops/s
Iteration  25: 3201515.760 ops/s
Iteration  26: 3200929.194 ops/s
Iteration  27: 3203150.472 ops/s
Iteration  28: 3208277.006 ops/s
Iteration  29: 3202940.762 ops/s
Iteration  30: 3205728.311 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toArray":
  3203638.628 ±(99.9%) 7601.613 ops/s [Average]
  (min, avg, max) = (3150759.705, 3203638.628, 3215346.269), stdev = 11377.738
  CI (99.9%): [3196037.015, 3211240.241] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_toArray  thrpt   30  3203638.628 ± 7601.613  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 743154.455 ops/s
# Warmup Iteration   2: 1356723.388 ops/s
# Warmup Iteration   3: 1558693.239 ops/s
# Warmup Iteration   4: 1568132.682 ops/s
# Warmup Iteration   5: 1567849.924 ops/s
# Warmup Iteration   6: 1281589.790 ops/s
# Warmup Iteration   7: 1565221.293 ops/s
# Warmup Iteration   8: 1568282.220 ops/s
# Warmup Iteration   9: 1561675.869 ops/s
# Warmup Iteration  10: 1568074.956 ops/s
# Warmup Iteration  11: 1570684.866 ops/s
# Warmup Iteration  12: 1569742.466 ops/s
# Warmup Iteration  13: 1567809.397 ops/s
# Warmup Iteration  14: 1570288.990 ops/s
# Warmup Iteration  15: 1568980.480 ops/s
# Warmup Iteration  16: 1563878.507 ops/s
# Warmup Iteration  17: 1566506.660 ops/s
# Warmup Iteration  18: 1566063.298 ops/s
# Warmup Iteration  19: 1566204.278 ops/s
# Warmup Iteration  20: 1568808.116 ops/s
# Warmup Iteration  21: 1569242.535 ops/s
# Warmup Iteration  22: 1568454.667 ops/s
# Warmup Iteration  23: 1568932.121 ops/s
# Warmup Iteration  24: 1568659.251 ops/s
# Warmup Iteration  25: 1568886.701 ops/s
# Warmup Iteration  26: 1567343.052 ops/s
# Warmup Iteration  27: 1570282.064 ops/s
# Warmup Iteration  28: 1565752.336 ops/s
# Warmup Iteration  29: 1567544.345 ops/s
# Warmup Iteration  30: 1568324.836 ops/s
Iteration   1: 1567101.656 ops/s
Iteration   2: 1567142.345 ops/s
Iteration   3: 1570176.372 ops/s
Iteration   4: 1570248.063 ops/s
Iteration   5: 1566405.522 ops/s
Iteration   6: 1569097.423 ops/s
Iteration   7: 1567979.953 ops/s
Iteration   8: 1566400.833 ops/s
Iteration   9: 1562984.451 ops/s
Iteration  10: 1553625.482 ops/s
Iteration  11: 1557965.527 ops/s
Iteration  12: 1567814.529 ops/s
Iteration  13: 1561931.670 ops/s
Iteration  14: 1570280.095 ops/s
Iteration  15: 1569873.202 ops/s
Iteration  16: 1564140.480 ops/s
Iteration  17: 1568316.646 ops/s
Iteration  18: 1565873.989 ops/s
Iteration  19: 1572857.452 ops/s
Iteration  20: 1565897.140 ops/s
Iteration  21: 1571410.218 ops/s
Iteration  22: 1562567.186 ops/s
Iteration  23: 1567446.841 ops/s
Iteration  24: 1568485.915 ops/s
Iteration  25: 1569568.689 ops/s
Iteration  26: 1571527.925 ops/s
Iteration  27: 1565621.775 ops/s
Iteration  28: 1567592.269 ops/s
Iteration  29: 1572064.243 ops/s
Iteration  30: 1569095.200 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toBag":
  1567049.770 ±(99.9%) 2763.782 ops/s [Average]
  (min, avg, max) = (1553625.482, 1567049.770, 1572857.452), stdev = 4136.699
  CI (99.9%): [1564285.988, 1569813.552] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_toBag  thrpt   30  1567049.770 ± 2763.782  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toBiMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toBiMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 96240.932 ops/s
# Warmup Iteration   2: 133695.811 ops/s
# Warmup Iteration   3: 169079.248 ops/s
# Warmup Iteration   4: 168539.031 ops/s
# Warmup Iteration   5: 169038.984 ops/s
# Warmup Iteration   6: 169438.636 ops/s
# Warmup Iteration   7: 169220.661 ops/s
# Warmup Iteration   8: 140170.972 ops/s
# Warmup Iteration   9: 168818.883 ops/s
# Warmup Iteration  10: 169080.260 ops/s
# Warmup Iteration  11: 169206.374 ops/s
# Warmup Iteration  12: 169091.568 ops/s
# Warmup Iteration  13: 169576.399 ops/s
# Warmup Iteration  14: 169260.060 ops/s
# Warmup Iteration  15: 169107.215 ops/s
# Warmup Iteration  16: 169649.652 ops/s
# Warmup Iteration  17: 174926.193 ops/s
# Warmup Iteration  18: 175074.619 ops/s
# Warmup Iteration  19: 175219.547 ops/s
# Warmup Iteration  20: 174431.556 ops/s
# Warmup Iteration  21: 175589.815 ops/s
# Warmup Iteration  22: 174763.828 ops/s
# Warmup Iteration  23: 175491.133 ops/s
# Warmup Iteration  24: 174697.420 ops/s
# Warmup Iteration  25: 175018.656 ops/s
# Warmup Iteration  26: 175031.251 ops/s
# Warmup Iteration  27: 175624.037 ops/s
# Warmup Iteration  28: 175371.299 ops/s
# Warmup Iteration  29: 175504.726 ops/s
# Warmup Iteration  30: 175460.938 ops/s
Iteration   1: 175695.603 ops/s
Iteration   2: 174766.053 ops/s
Iteration   3: 175468.938 ops/s
Iteration   4: 175953.557 ops/s
Iteration   5: 175338.641 ops/s
Iteration   6: 175038.381 ops/s
Iteration   7: 174499.900 ops/s
Iteration   8: 175400.978 ops/s
Iteration   9: 173926.046 ops/s
Iteration  10: 175021.065 ops/s
Iteration  11: 175638.133 ops/s
Iteration  12: 175210.373 ops/s
Iteration  13: 174982.819 ops/s
Iteration  14: 175406.157 ops/s
Iteration  15: 175153.837 ops/s
Iteration  16: 175684.939 ops/s
Iteration  17: 175661.795 ops/s
Iteration  18: 174950.732 ops/s
Iteration  19: 175368.739 ops/s
Iteration  20: 174350.610 ops/s
Iteration  21: 174553.885 ops/s
Iteration  22: 174988.547 ops/s
Iteration  23: 175683.900 ops/s
Iteration  24: 175181.455 ops/s
Iteration  25: 175171.331 ops/s
Iteration  26: 175318.506 ops/s
Iteration  27: 174215.963 ops/s
Iteration  28: 175449.120 ops/s
Iteration  29: 175678.989 ops/s
Iteration  30: 174204.958 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toBiMap":
  175132.132 ±(99.9%) 343.655 ops/s [Average]
  (min, avg, max) = (173926.046, 175132.132, 175953.557), stdev = 514.366
  CI (99.9%): [174788.477, 175475.787] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score     Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_toBiMap  thrpt   30  175132.132 ± 343.655  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1273140.353 ops/s
# Warmup Iteration   2: 2581686.594 ops/s
# Warmup Iteration   3: 2833788.162 ops/s
# Warmup Iteration   4: 2858281.848 ops/s
# Warmup Iteration   5: 2355127.216 ops/s
# Warmup Iteration   6: 2872866.853 ops/s
# Warmup Iteration   7: 2866161.981 ops/s
# Warmup Iteration   8: 2871372.451 ops/s
# Warmup Iteration   9: 2870705.839 ops/s
# Warmup Iteration  10: 2862364.957 ops/s
# Warmup Iteration  11: 2873004.580 ops/s
# Warmup Iteration  12: 2869148.819 ops/s
# Warmup Iteration  13: 2871153.505 ops/s
# Warmup Iteration  14: 2855996.346 ops/s
# Warmup Iteration  15: 2856216.761 ops/s
# Warmup Iteration  16: 2869219.369 ops/s
# Warmup Iteration  17: 2861429.898 ops/s
# Warmup Iteration  18: 2866657.942 ops/s
# Warmup Iteration  19: 2871329.595 ops/s
# Warmup Iteration  20: 2865998.843 ops/s
# Warmup Iteration  21: 2868982.693 ops/s
# Warmup Iteration  22: 2864002.485 ops/s
# Warmup Iteration  23: 2868927.896 ops/s
# Warmup Iteration  24: 2871838.562 ops/s
# Warmup Iteration  25: 2867019.107 ops/s
# Warmup Iteration  26: 2868517.138 ops/s
# Warmup Iteration  27: 2870181.333 ops/s
# Warmup Iteration  28: 2863427.161 ops/s
# Warmup Iteration  29: 2869859.047 ops/s
# Warmup Iteration  30: 2870185.152 ops/s
Iteration   1: 2851672.224 ops/s
Iteration   2: 2858339.660 ops/s
Iteration   3: 2859510.442 ops/s
Iteration   4: 2872772.359 ops/s
Iteration   5: 2867264.810 ops/s
Iteration   6: 2871370.859 ops/s
Iteration   7: 2863875.832 ops/s
Iteration   8: 2867742.959 ops/s
Iteration   9: 2867552.847 ops/s
Iteration  10: 2867008.485 ops/s
Iteration  11: 2868252.211 ops/s
Iteration  12: 2855608.775 ops/s
Iteration  13: 2865430.677 ops/s
Iteration  14: 2865280.231 ops/s
Iteration  15: 2871576.588 ops/s
Iteration  16: 2865604.285 ops/s
Iteration  17: 2853970.960 ops/s
Iteration  18: 2868590.440 ops/s
Iteration  19: 2876255.032 ops/s
Iteration  20: 2856613.770 ops/s
Iteration  21: 2872911.788 ops/s
Iteration  22: 2861390.558 ops/s
Iteration  23: 2868271.102 ops/s
Iteration  24: 2864794.870 ops/s
Iteration  25: 2870560.578 ops/s
Iteration  26: 2876471.617 ops/s
Iteration  27: 2870722.678 ops/s
Iteration  28: 2867779.977 ops/s
Iteration  29: 2868299.606 ops/s
Iteration  30: 2869500.622 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toCollection":
  2866166.561 ±(99.9%) 4173.208 ops/s [Average]
  (min, avg, max) = (2851672.224, 2866166.561, 2876471.617), stdev = 6246.261
  CI (99.9%): [2861993.354, 2870339.769] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_toCollection  thrpt   30  2866166.561 ± 4173.208  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toImmutable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toImmutable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 154035390.252 ops/s
# Warmup Iteration   2: 301897242.362 ops/s
# Warmup Iteration   3: 266412461.495 ops/s
# Warmup Iteration   4: 311794806.428 ops/s
# Warmup Iteration   5: 312387813.810 ops/s
# Warmup Iteration   6: 310928369.387 ops/s
# Warmup Iteration   7: 311555676.187 ops/s
# Warmup Iteration   8: 311292780.960 ops/s
# Warmup Iteration   9: 311560092.890 ops/s
# Warmup Iteration  10: 311654347.454 ops/s
# Warmup Iteration  11: 311053665.162 ops/s
# Warmup Iteration  12: 311924593.051 ops/s
# Warmup Iteration  13: 311644496.791 ops/s
# Warmup Iteration  14: 310896531.524 ops/s
# Warmup Iteration  15: 311159372.408 ops/s
# Warmup Iteration  16: 311959410.361 ops/s
# Warmup Iteration  17: 310589782.726 ops/s
# Warmup Iteration  18: 311809687.894 ops/s
# Warmup Iteration  19: 311164364.857 ops/s
# Warmup Iteration  20: 311305665.018 ops/s
# Warmup Iteration  21: 311156851.992 ops/s
# Warmup Iteration  22: 311527277.836 ops/s
# Warmup Iteration  23: 311759240.732 ops/s
# Warmup Iteration  24: 310238952.805 ops/s
# Warmup Iteration  25: 311207714.799 ops/s
# Warmup Iteration  26: 312004694.177 ops/s
# Warmup Iteration  27: 311494820.619 ops/s
# Warmup Iteration  28: 311144264.445 ops/s
# Warmup Iteration  29: 311657991.610 ops/s
# Warmup Iteration  30: 311070200.067 ops/s
Iteration   1: 308862276.480 ops/s
Iteration   2: 311321757.164 ops/s
Iteration   3: 311830499.192 ops/s
Iteration   4: 311449411.685 ops/s
Iteration   5: 310344208.233 ops/s
Iteration   6: 312411844.695 ops/s
Iteration   7: 310548982.599 ops/s
Iteration   8: 312103401.495 ops/s
Iteration   9: 311657463.933 ops/s
Iteration  10: 310994896.950 ops/s
Iteration  11: 310369027.204 ops/s
Iteration  12: 311662986.165 ops/s
Iteration  13: 309958506.733 ops/s
Iteration  14: 311027306.636 ops/s
Iteration  15: 311315966.292 ops/s
Iteration  16: 309754809.273 ops/s
Iteration  17: 310275438.565 ops/s
Iteration  18: 310200880.709 ops/s
Iteration  19: 311964034.545 ops/s
Iteration  20: 309977095.831 ops/s
Iteration  21: 311543751.919 ops/s
Iteration  22: 310083366.569 ops/s
Iteration  23: 310767582.952 ops/s
Iteration  24: 310421152.263 ops/s
Iteration  25: 309976023.705 ops/s
Iteration  26: 310354459.127 ops/s
Iteration  27: 311027640.249 ops/s
Iteration  28: 311076948.011 ops/s
Iteration  29: 312294581.012 ops/s
Iteration  30: 312476181.330 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toImmutable":
  310935082.717 ±(99.9%) 598606.740 ops/s [Average]
  (min, avg, max) = (308862276.480, 310935082.717, 312476181.330), stdev = 895966.456
  CI (99.9%): [310336475.977, 311533689.458] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt          Score        Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_toImmutable  thrpt   30  310935082.717 ± 598606.740  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toImmutableBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toImmutableBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 657342.979 ops/s
# Warmup Iteration   2: 1331552.232 ops/s
# Warmup Iteration   3: 1440960.538 ops/s
# Warmup Iteration   4: 1448448.150 ops/s
# Warmup Iteration   5: 1194385.025 ops/s
# Warmup Iteration   6: 1450379.325 ops/s
# Warmup Iteration   7: 1453455.026 ops/s
# Warmup Iteration   8: 1453144.350 ops/s
# Warmup Iteration   9: 1452953.321 ops/s
# Warmup Iteration  10: 1452001.554 ops/s
# Warmup Iteration  11: 1452752.592 ops/s
# Warmup Iteration  12: 1452613.741 ops/s
# Warmup Iteration  13: 1452196.411 ops/s
# Warmup Iteration  14: 1448982.712 ops/s
# Warmup Iteration  15: 1450180.033 ops/s
# Warmup Iteration  16: 1450577.872 ops/s
# Warmup Iteration  17: 1451556.572 ops/s
# Warmup Iteration  18: 1452759.825 ops/s
# Warmup Iteration  19: 1449416.884 ops/s
# Warmup Iteration  20: 1452378.147 ops/s
# Warmup Iteration  21: 1451137.516 ops/s
# Warmup Iteration  22: 1451046.254 ops/s
# Warmup Iteration  23: 1451659.797 ops/s
# Warmup Iteration  24: 1453169.610 ops/s
# Warmup Iteration  25: 1452081.432 ops/s
# Warmup Iteration  26: 1454010.423 ops/s
# Warmup Iteration  27: 1450917.221 ops/s
# Warmup Iteration  28: 1452001.769 ops/s
# Warmup Iteration  29: 1454016.584 ops/s
# Warmup Iteration  30: 1450712.798 ops/s
Iteration   1: 1453938.195 ops/s
Iteration   2: 1448710.403 ops/s
Iteration   3: 1454610.261 ops/s
Iteration   4: 1451947.382 ops/s
Iteration   5: 1448467.888 ops/s
Iteration   6: 1454187.956 ops/s
Iteration   7: 1453191.705 ops/s
Iteration   8: 1451563.272 ops/s
Iteration   9: 1455573.468 ops/s
Iteration  10: 1453608.150 ops/s
Iteration  11: 1451353.921 ops/s
Iteration  12: 1455266.999 ops/s
Iteration  13: 1451372.137 ops/s
Iteration  14: 1450744.605 ops/s
Iteration  15: 1452298.683 ops/s
Iteration  16: 1450968.534 ops/s
Iteration  17: 1450119.713 ops/s
Iteration  18: 1454634.126 ops/s
Iteration  19: 1452175.011 ops/s
Iteration  20: 1448029.565 ops/s
Iteration  21: 1455530.326 ops/s
Iteration  22: 1451305.078 ops/s
Iteration  23: 1452793.020 ops/s
Iteration  24: 1456538.772 ops/s
Iteration  25: 1452019.207 ops/s
Iteration  26: 1449609.130 ops/s
Iteration  27: 1456302.312 ops/s
Iteration  28: 1441733.123 ops/s
Iteration  29: 1444187.111 ops/s
Iteration  30: 1455553.154 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toImmutableBag":
  1451944.440 ±(99.9%) 2265.652 ops/s [Average]
  (min, avg, max) = (1441733.123, 1451944.440, 1456538.772), stdev = 3391.121
  CI (99.9%): [1449678.788, 1454210.092] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_toImmutableBag  thrpt   30  1451944.440 ± 2265.652  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toImmutableBiMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toImmutableBiMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 86253.844 ops/s
# Warmup Iteration   2: 119442.379 ops/s
# Warmup Iteration   3: 150251.420 ops/s
# Warmup Iteration   4: 148806.477 ops/s
# Warmup Iteration   5: 149957.044 ops/s
# Warmup Iteration   6: 150170.880 ops/s
# Warmup Iteration   7: 149753.333 ops/s
# Warmup Iteration   8: 125774.309 ops/s
# Warmup Iteration   9: 149696.496 ops/s
# Warmup Iteration  10: 150416.755 ops/s
# Warmup Iteration  11: 149967.991 ops/s
# Warmup Iteration  12: 149917.914 ops/s
# Warmup Iteration  13: 150418.224 ops/s
# Warmup Iteration  14: 150061.782 ops/s
# Warmup Iteration  15: 150420.962 ops/s
# Warmup Iteration  16: 150233.068 ops/s
# Warmup Iteration  17: 154430.939 ops/s
# Warmup Iteration  18: 154729.605 ops/s
# Warmup Iteration  19: 153917.626 ops/s
# Warmup Iteration  20: 154411.967 ops/s
# Warmup Iteration  21: 154479.975 ops/s
# Warmup Iteration  22: 154397.062 ops/s
# Warmup Iteration  23: 153897.079 ops/s
# Warmup Iteration  24: 154241.111 ops/s
# Warmup Iteration  25: 154152.503 ops/s
# Warmup Iteration  26: 154039.617 ops/s
# Warmup Iteration  27: 154267.629 ops/s
# Warmup Iteration  28: 153820.373 ops/s
# Warmup Iteration  29: 154764.231 ops/s
# Warmup Iteration  30: 154257.832 ops/s
Iteration   1: 154194.836 ops/s
Iteration   2: 153967.556 ops/s
Iteration   3: 154440.385 ops/s
Iteration   4: 154522.432 ops/s
Iteration   5: 154414.245 ops/s
Iteration   6: 154649.194 ops/s
Iteration   7: 153996.097 ops/s
Iteration   8: 154420.831 ops/s
Iteration   9: 154899.562 ops/s
Iteration  10: 153687.981 ops/s
Iteration  11: 154694.321 ops/s
Iteration  12: 155039.348 ops/s
Iteration  13: 154612.225 ops/s
Iteration  14: 154817.069 ops/s
Iteration  15: 154469.378 ops/s
Iteration  16: 154913.350 ops/s
Iteration  17: 154653.544 ops/s
Iteration  18: 154288.883 ops/s
Iteration  19: 153636.001 ops/s
Iteration  20: 154628.438 ops/s
Iteration  21: 155254.996 ops/s
Iteration  22: 154957.059 ops/s
Iteration  23: 154746.972 ops/s
Iteration  24: 154401.719 ops/s
Iteration  25: 154170.644 ops/s
Iteration  26: 154320.189 ops/s
Iteration  27: 154974.571 ops/s
Iteration  28: 154054.250 ops/s
Iteration  29: 154794.412 ops/s
Iteration  30: 154506.982 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toImmutableBiMap":
  154504.249 ±(99.9%) 261.266 ops/s [Average]
  (min, avg, max) = (153636.001, 154504.249, 155254.996), stdev = 391.051
  CI (99.9%): [154242.983, 154765.515] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score     Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_toImmutableBiMap  thrpt   30  154504.249 ± 261.266  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toImmutableList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toImmutableList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 708141.374 ops/s
# Warmup Iteration   2: 1369583.214 ops/s
# Warmup Iteration   3: 1507903.305 ops/s
# Warmup Iteration   4: 1525360.473 ops/s
# Warmup Iteration   5: 1283219.188 ops/s
# Warmup Iteration   6: 1485037.800 ops/s
# Warmup Iteration   7: 1519977.735 ops/s
# Warmup Iteration   8: 1520209.238 ops/s
# Warmup Iteration   9: 1520602.799 ops/s
# Warmup Iteration  10: 1516770.391 ops/s
# Warmup Iteration  11: 1518496.508 ops/s
# Warmup Iteration  12: 1517184.980 ops/s
# Warmup Iteration  13: 1518911.083 ops/s
# Warmup Iteration  14: 1509723.534 ops/s
# Warmup Iteration  15: 1519110.185 ops/s
# Warmup Iteration  16: 1515917.202 ops/s
# Warmup Iteration  17: 1523046.053 ops/s
# Warmup Iteration  18: 1522538.208 ops/s
# Warmup Iteration  19: 1523167.641 ops/s
# Warmup Iteration  20: 1520024.799 ops/s
# Warmup Iteration  21: 1524406.884 ops/s
# Warmup Iteration  22: 1524168.651 ops/s
# Warmup Iteration  23: 1521438.155 ops/s
# Warmup Iteration  24: 1523132.902 ops/s
# Warmup Iteration  25: 1519322.888 ops/s
# Warmup Iteration  26: 1524097.982 ops/s
# Warmup Iteration  27: 1522710.099 ops/s
# Warmup Iteration  28: 1520706.630 ops/s
# Warmup Iteration  29: 1524801.450 ops/s
# Warmup Iteration  30: 1524361.056 ops/s
Iteration   1: 1526666.879 ops/s
Iteration   2: 1525803.871 ops/s
Iteration   3: 1525135.709 ops/s
Iteration   4: 1526274.293 ops/s
Iteration   5: 1522469.446 ops/s
Iteration   6: 1527418.280 ops/s
Iteration   7: 1526185.091 ops/s
Iteration   8: 1523738.806 ops/s
Iteration   9: 1526164.239 ops/s
Iteration  10: 1520708.213 ops/s
Iteration  11: 1524059.836 ops/s
Iteration  12: 1525960.684 ops/s
Iteration  13: 1525508.795 ops/s
Iteration  14: 1526751.547 ops/s
Iteration  15: 1523317.271 ops/s
Iteration  16: 1517125.779 ops/s
Iteration  17: 1524516.104 ops/s
Iteration  18: 1522937.430 ops/s
Iteration  19: 1514796.876 ops/s
Iteration  20: 1526944.821 ops/s
Iteration  21: 1522973.979 ops/s
Iteration  22: 1524513.457 ops/s
Iteration  23: 1520156.509 ops/s
Iteration  24: 1522604.750 ops/s
Iteration  25: 1523293.288 ops/s
Iteration  26: 1528208.242 ops/s
Iteration  27: 1526108.213 ops/s
Iteration  28: 1525010.801 ops/s
Iteration  29: 1527434.295 ops/s
Iteration  30: 1525324.156 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toImmutableList":
  1524270.389 ±(99.9%) 2002.282 ops/s [Average]
  (min, avg, max) = (1514796.876, 1524270.389, 1528208.242), stdev = 2996.921
  CI (99.9%): [1522268.107, 1526272.670] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_toImmutableList  thrpt   30  1524270.389 ± 2002.282  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toImmutableMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toImmutableMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 595880.380 ops/s
# Warmup Iteration   2: 1393630.564 ops/s
# Warmup Iteration   3: 1410421.260 ops/s
# Warmup Iteration   4: 1172938.655 ops/s
# Warmup Iteration   5: 1423994.381 ops/s
# Warmup Iteration   6: 1432911.761 ops/s
# Warmup Iteration   7: 1439449.691 ops/s
# Warmup Iteration   8: 1426257.888 ops/s
# Warmup Iteration   9: 1427919.154 ops/s
# Warmup Iteration  10: 1430039.041 ops/s
# Warmup Iteration  11: 1428394.947 ops/s
# Warmup Iteration  12: 1427687.888 ops/s
# Warmup Iteration  13: 1431449.198 ops/s
# Warmup Iteration  14: 1429845.213 ops/s
# Warmup Iteration  15: 1428154.399 ops/s
# Warmup Iteration  16: 1422308.190 ops/s
# Warmup Iteration  17: 1427557.431 ops/s
# Warmup Iteration  18: 1431103.340 ops/s
# Warmup Iteration  19: 1424288.458 ops/s
# Warmup Iteration  20: 1427076.142 ops/s
# Warmup Iteration  21: 1424538.674 ops/s
# Warmup Iteration  22: 1431195.683 ops/s
# Warmup Iteration  23: 1424291.088 ops/s
# Warmup Iteration  24: 1433928.619 ops/s
# Warmup Iteration  25: 1423661.361 ops/s
# Warmup Iteration  26: 1429563.800 ops/s
# Warmup Iteration  27: 1424914.063 ops/s
# Warmup Iteration  28: 1429252.215 ops/s
# Warmup Iteration  29: 1427631.601 ops/s
# Warmup Iteration  30: 1427195.708 ops/s
Iteration   1: 1426473.228 ops/s
Iteration   2: 1424722.782 ops/s
Iteration   3: 1430080.431 ops/s
Iteration   4: 1431874.867 ops/s
Iteration   5: 1417776.205 ops/s
Iteration   6: 1429837.840 ops/s
Iteration   7: 1434665.635 ops/s
Iteration   8: 1424175.434 ops/s
Iteration   9: 1433484.103 ops/s
Iteration  10: 1415413.637 ops/s
Iteration  11: 1430779.147 ops/s
Iteration  12: 1415030.347 ops/s
Iteration  13: 1422919.960 ops/s
Iteration  14: 1432426.558 ops/s
Iteration  15: 1407559.855 ops/s
Iteration  16: 1434550.221 ops/s
Iteration  17: 1420322.723 ops/s
Iteration  18: 1431775.806 ops/s
Iteration  19: 1430198.759 ops/s
Iteration  20: 1418041.622 ops/s
Iteration  21: 1428399.550 ops/s
Iteration  22: 1430058.318 ops/s
Iteration  23: 1419001.122 ops/s
Iteration  24: 1431699.437 ops/s
Iteration  25: 1434414.208 ops/s
Iteration  26: 1422773.651 ops/s
Iteration  27: 1425584.350 ops/s
Iteration  28: 1425863.062 ops/s
Iteration  29: 1439946.860 ops/s
Iteration  30: 1435631.614 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toImmutableMap":
  1426849.378 ±(99.9%) 4941.298 ops/s [Average]
  (min, avg, max) = (1407559.855, 1426849.378, 1439946.860), stdev = 7395.903
  CI (99.9%): [1421908.080, 1431790.676] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_toImmutableMap  thrpt   30  1426849.378 ± 4941.298  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toImmutableSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toImmutableSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 635266.487 ops/s
# Warmup Iteration   2: 1024808.582 ops/s
# Warmup Iteration   3: 1200724.747 ops/s
# Warmup Iteration   4: 1207234.845 ops/s
# Warmup Iteration   5: 1205269.905 ops/s
# Warmup Iteration   6: 1037865.959 ops/s
# Warmup Iteration   7: 1172083.836 ops/s
# Warmup Iteration   8: 1208380.105 ops/s
# Warmup Iteration   9: 1207002.067 ops/s
# Warmup Iteration  10: 1198272.945 ops/s
# Warmup Iteration  11: 1205729.849 ops/s
# Warmup Iteration  12: 1208412.533 ops/s
# Warmup Iteration  13: 1210626.159 ops/s
# Warmup Iteration  14: 1206572.483 ops/s
# Warmup Iteration  15: 1209570.902 ops/s
# Warmup Iteration  16: 1208017.413 ops/s
# Warmup Iteration  17: 1206030.282 ops/s
# Warmup Iteration  18: 1201652.743 ops/s
# Warmup Iteration  19: 1204816.674 ops/s
# Warmup Iteration  20: 1203055.450 ops/s
# Warmup Iteration  21: 1204661.633 ops/s
# Warmup Iteration  22: 1202226.801 ops/s
# Warmup Iteration  23: 1204121.383 ops/s
# Warmup Iteration  24: 1206170.510 ops/s
# Warmup Iteration  25: 1202684.215 ops/s
# Warmup Iteration  26: 1204152.722 ops/s
# Warmup Iteration  27: 1205182.782 ops/s
# Warmup Iteration  28: 1205312.590 ops/s
# Warmup Iteration  29: 1203461.959 ops/s
# Warmup Iteration  30: 1206256.610 ops/s
Iteration   1: 1203320.950 ops/s
Iteration   2: 1205847.297 ops/s
Iteration   3: 1202801.464 ops/s
Iteration   4: 1201676.062 ops/s
Iteration   5: 1205232.791 ops/s
Iteration   6: 1205602.450 ops/s
Iteration   7: 1206453.929 ops/s
Iteration   8: 1203711.907 ops/s
Iteration   9: 1203355.787 ops/s
Iteration  10: 1203480.311 ops/s
Iteration  11: 1205955.607 ops/s
Iteration  12: 1204367.920 ops/s
Iteration  13: 1203565.641 ops/s
Iteration  14: 1205565.446 ops/s
Iteration  15: 1204211.392 ops/s
Iteration  16: 1196273.195 ops/s
Iteration  17: 1207156.521 ops/s
Iteration  18: 1201809.047 ops/s
Iteration  19: 1205957.448 ops/s
Iteration  20: 1202594.497 ops/s
Iteration  21: 1206152.078 ops/s
Iteration  22: 1205427.149 ops/s
Iteration  23: 1203310.997 ops/s
Iteration  24: 1204175.641 ops/s
Iteration  25: 1203669.870 ops/s
Iteration  26: 1200694.956 ops/s
Iteration  27: 1206643.427 ops/s
Iteration  28: 1202460.645 ops/s
Iteration  29: 1202789.410 ops/s
Iteration  30: 1199148.973 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toImmutableSet":
  1203780.427 ±(99.9%) 1567.460 ops/s [Average]
  (min, avg, max) = (1196273.195, 1203780.427, 1207156.521), stdev = 2346.101
  CI (99.9%): [1202212.967, 1205347.887] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_toImmutableSet  thrpt   30  1203780.427 ± 1567.460  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 556505.632 ops/s
# Warmup Iteration   2: 1124427.300 ops/s
# Warmup Iteration   3: 1240892.115 ops/s
# Warmup Iteration   4: 1245669.852 ops/s
# Warmup Iteration   5: 1030996.131 ops/s
# Warmup Iteration   6: 1248671.241 ops/s
# Warmup Iteration   7: 1247251.646 ops/s
# Warmup Iteration   8: 1246550.382 ops/s
# Warmup Iteration   9: 1249216.728 ops/s
# Warmup Iteration  10: 1249442.402 ops/s
# Warmup Iteration  11: 1249114.637 ops/s
# Warmup Iteration  12: 1251508.612 ops/s
# Warmup Iteration  13: 1248696.106 ops/s
# Warmup Iteration  14: 1250053.090 ops/s
# Warmup Iteration  15: 1251720.188 ops/s
# Warmup Iteration  16: 1248116.212 ops/s
# Warmup Iteration  17: 1249492.139 ops/s
# Warmup Iteration  18: 1248794.594 ops/s
# Warmup Iteration  19: 1248117.953 ops/s
# Warmup Iteration  20: 1247289.163 ops/s
# Warmup Iteration  21: 1249358.642 ops/s
# Warmup Iteration  22: 1248420.544 ops/s
# Warmup Iteration  23: 1251337.240 ops/s
# Warmup Iteration  24: 1249128.131 ops/s
# Warmup Iteration  25: 1245680.411 ops/s
# Warmup Iteration  26: 1245082.996 ops/s
# Warmup Iteration  27: 1249250.230 ops/s
# Warmup Iteration  28: 1246971.625 ops/s
# Warmup Iteration  29: 1249205.867 ops/s
# Warmup Iteration  30: 1249991.732 ops/s
Iteration   1: 1247591.268 ops/s
Iteration   2: 1250503.180 ops/s
Iteration   3: 1251956.348 ops/s
Iteration   4: 1249474.344 ops/s
Iteration   5: 1248486.356 ops/s
Iteration   6: 1250620.952 ops/s
Iteration   7: 1250669.767 ops/s
Iteration   8: 1249210.866 ops/s
Iteration   9: 1249690.710 ops/s
Iteration  10: 1251985.554 ops/s
Iteration  11: 1249534.689 ops/s
Iteration  12: 1246592.282 ops/s
Iteration  13: 1249750.192 ops/s
Iteration  14: 1249080.269 ops/s
Iteration  15: 1250074.166 ops/s
Iteration  16: 1251837.520 ops/s
Iteration  17: 1250027.628 ops/s
Iteration  18: 1247264.840 ops/s
Iteration  19: 1252648.728 ops/s
Iteration  20: 1245954.838 ops/s
Iteration  21: 1248636.538 ops/s
Iteration  22: 1251672.869 ops/s
Iteration  23: 1246276.320 ops/s
Iteration  24: 1241461.839 ops/s
Iteration  25: 1252683.157 ops/s
Iteration  26: 1250911.075 ops/s
Iteration  27: 1249576.646 ops/s
Iteration  28: 1250090.959 ops/s
Iteration  29: 1251859.163 ops/s
Iteration  30: 1250180.510 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering":
  1249543.452 ±(99.9%) 1578.128 ops/s [Average]
  (min, avg, max) = (1241461.839, 1249543.452, 1252683.157), stdev = 2362.068
  CI (99.9%): [1247965.324, 1251121.581] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering  thrpt   30  1249543.452 ± 1578.128  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toImmutableSortedBagBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toImmutableSortedBagBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 299255.309 ops/s
# Warmup Iteration   2: 662111.723 ops/s
# Warmup Iteration   3: 723962.481 ops/s
# Warmup Iteration   4: 729195.343 ops/s
# Warmup Iteration   5: 608107.094 ops/s
# Warmup Iteration   6: 730123.875 ops/s
# Warmup Iteration   7: 727165.541 ops/s
# Warmup Iteration   8: 727699.997 ops/s
# Warmup Iteration   9: 729270.300 ops/s
# Warmup Iteration  10: 728256.813 ops/s
# Warmup Iteration  11: 728399.424 ops/s
# Warmup Iteration  12: 730814.354 ops/s
# Warmup Iteration  13: 726304.114 ops/s
# Warmup Iteration  14: 730001.669 ops/s
# Warmup Iteration  15: 729272.916 ops/s
# Warmup Iteration  16: 730757.428 ops/s
# Warmup Iteration  17: 728949.851 ops/s
# Warmup Iteration  18: 727839.328 ops/s
# Warmup Iteration  19: 729717.769 ops/s
# Warmup Iteration  20: 730788.380 ops/s
# Warmup Iteration  21: 729105.011 ops/s
# Warmup Iteration  22: 729402.812 ops/s
# Warmup Iteration  23: 730570.388 ops/s
# Warmup Iteration  24: 728659.110 ops/s
# Warmup Iteration  25: 730662.655 ops/s
# Warmup Iteration  26: 728304.377 ops/s
# Warmup Iteration  27: 729835.014 ops/s
# Warmup Iteration  28: 727809.862 ops/s
# Warmup Iteration  29: 730584.726 ops/s
# Warmup Iteration  30: 726568.982 ops/s
Iteration   1: 728048.489 ops/s
Iteration   2: 729304.989 ops/s
Iteration   3: 730431.301 ops/s
Iteration   4: 728934.253 ops/s
Iteration   5: 731752.918 ops/s
Iteration   6: 729852.061 ops/s
Iteration   7: 729408.540 ops/s
Iteration   8: 729726.813 ops/s
Iteration   9: 730480.506 ops/s
Iteration  10: 729071.423 ops/s
Iteration  11: 729983.563 ops/s
Iteration  12: 730873.884 ops/s
Iteration  13: 730725.916 ops/s
Iteration  14: 729801.430 ops/s
Iteration  15: 728811.874 ops/s
Iteration  16: 732141.919 ops/s
Iteration  17: 730983.353 ops/s
Iteration  18: 730090.559 ops/s
Iteration  19: 729601.752 ops/s
Iteration  20: 731033.083 ops/s
Iteration  21: 730528.045 ops/s
Iteration  22: 729909.399 ops/s
Iteration  23: 729123.240 ops/s
Iteration  24: 730698.974 ops/s
Iteration  25: 730102.038 ops/s
Iteration  26: 728804.513 ops/s
Iteration  27: 730624.124 ops/s
Iteration  28: 728144.630 ops/s
Iteration  29: 730439.084 ops/s
Iteration  30: 730490.136 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toImmutableSortedBagBy":
  729997.427 ±(99.9%) 644.722 ops/s [Average]
  (min, avg, max) = (728048.489, 729997.427, 732141.919), stdev = 964.990
  CI (99.9%): [729352.705, 730642.149] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score     Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_toImmutableSortedBagBy  thrpt   30  729997.427 ± 644.722  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 308469.782 ops/s
# Warmup Iteration   2: 532733.853 ops/s
# Warmup Iteration   3: 635394.502 ops/s
# Warmup Iteration   4: 640718.984 ops/s
# Warmup Iteration   5: 639901.846 ops/s
# Warmup Iteration   6: 572443.997 ops/s
# Warmup Iteration   7: 599707.995 ops/s
# Warmup Iteration   8: 637540.884 ops/s
# Warmup Iteration   9: 640855.624 ops/s
# Warmup Iteration  10: 640246.883 ops/s
# Warmup Iteration  11: 640038.419 ops/s
# Warmup Iteration  12: 638897.851 ops/s
# Warmup Iteration  13: 637849.396 ops/s
# Warmup Iteration  14: 639712.027 ops/s
# Warmup Iteration  15: 639027.050 ops/s
# Warmup Iteration  16: 639992.350 ops/s
# Warmup Iteration  17: 639319.402 ops/s
# Warmup Iteration  18: 639625.539 ops/s
# Warmup Iteration  19: 638869.667 ops/s
# Warmup Iteration  20: 638903.282 ops/s
# Warmup Iteration  21: 640251.092 ops/s
# Warmup Iteration  22: 639007.417 ops/s
# Warmup Iteration  23: 640135.639 ops/s
# Warmup Iteration  24: 639319.268 ops/s
# Warmup Iteration  25: 640363.049 ops/s
# Warmup Iteration  26: 640316.185 ops/s
# Warmup Iteration  27: 639404.916 ops/s
# Warmup Iteration  28: 639825.053 ops/s
# Warmup Iteration  29: 640785.332 ops/s
# Warmup Iteration  30: 639750.503 ops/s
Iteration   1: 639410.560 ops/s
Iteration   2: 641084.710 ops/s
Iteration   3: 640354.831 ops/s
Iteration   4: 641090.074 ops/s
Iteration   5: 639449.160 ops/s
Iteration   6: 642004.358 ops/s
Iteration   7: 638469.558 ops/s
Iteration   8: 641038.288 ops/s
Iteration   9: 640123.572 ops/s
Iteration  10: 641525.532 ops/s
Iteration  11: 639407.284 ops/s
Iteration  12: 640554.964 ops/s
Iteration  13: 639484.527 ops/s
Iteration  14: 637605.652 ops/s
Iteration  15: 639795.116 ops/s
Iteration  16: 640586.037 ops/s
Iteration  17: 640695.028 ops/s
Iteration  18: 640762.941 ops/s
Iteration  19: 640084.424 ops/s
Iteration  20: 639709.635 ops/s
Iteration  21: 640713.129 ops/s
Iteration  22: 638986.375 ops/s
Iteration  23: 637940.063 ops/s
Iteration  24: 640678.693 ops/s
Iteration  25: 640151.436 ops/s
Iteration  26: 641426.168 ops/s
Iteration  27: 640312.408 ops/s
Iteration  28: 635478.423 ops/s
Iteration  29: 639467.461 ops/s
Iteration  30: 641750.382 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering":
  640004.693 ±(99.9%) 905.828 ops/s [Average]
  (min, avg, max) = (635478.423, 640004.693, 642004.358), stdev = 1355.801
  CI (99.9%): [639098.865, 640910.521] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt       Score     Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering  thrpt   30  640004.693 ± 905.828  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 476344.654 ops/s
# Warmup Iteration   2: 871192.262 ops/s
# Warmup Iteration   3: 1025352.737 ops/s
# Warmup Iteration   4: 1032167.365 ops/s
# Warmup Iteration   5: 1030225.375 ops/s
# Warmup Iteration   6: 854326.777 ops/s
# Warmup Iteration   7: 1024202.353 ops/s
# Warmup Iteration   8: 1026930.088 ops/s
# Warmup Iteration   9: 1027415.255 ops/s
# Warmup Iteration  10: 1026943.499 ops/s
# Warmup Iteration  11: 1029401.300 ops/s
# Warmup Iteration  12: 1024022.749 ops/s
# Warmup Iteration  13: 1025588.165 ops/s
# Warmup Iteration  14: 1026318.068 ops/s
# Warmup Iteration  15: 1027796.862 ops/s
# Warmup Iteration  16: 1028080.102 ops/s
# Warmup Iteration  17: 1026351.504 ops/s
# Warmup Iteration  18: 1027290.878 ops/s
# Warmup Iteration  19: 1027662.008 ops/s
# Warmup Iteration  20: 1026537.141 ops/s
# Warmup Iteration  21: 1026541.699 ops/s
# Warmup Iteration  22: 1029614.272 ops/s
# Warmup Iteration  23: 1029242.334 ops/s
# Warmup Iteration  24: 1030521.052 ops/s
# Warmup Iteration  25: 1027480.772 ops/s
# Warmup Iteration  26: 1029174.543 ops/s
# Warmup Iteration  27: 1025666.287 ops/s
# Warmup Iteration  28: 1030356.465 ops/s
# Warmup Iteration  29: 1027272.253 ops/s
# Warmup Iteration  30: 1027363.130 ops/s
Iteration   1: 1026939.097 ops/s
Iteration   2: 1030511.991 ops/s
Iteration   3: 1026144.743 ops/s
Iteration   4: 1030881.802 ops/s
Iteration   5: 1027657.794 ops/s
Iteration   6: 1027691.043 ops/s
Iteration   7: 1025291.707 ops/s
Iteration   8: 1029032.716 ops/s
Iteration   9: 1027059.810 ops/s
Iteration  10: 1028253.794 ops/s
Iteration  11: 1026155.191 ops/s
Iteration  12: 1023564.061 ops/s
Iteration  13: 1030006.759 ops/s
Iteration  14: 1025486.597 ops/s
Iteration  15: 1030479.029 ops/s
Iteration  16: 1029471.189 ops/s
Iteration  17: 1030654.347 ops/s
Iteration  18: 1020563.999 ops/s
Iteration  19: 1030522.077 ops/s
Iteration  20: 1022426.425 ops/s
Iteration  21: 1030972.121 ops/s
Iteration  22: 1024898.597 ops/s
Iteration  23: 1030485.803 ops/s
Iteration  24: 1030795.544 ops/s
Iteration  25: 1025397.941 ops/s
Iteration  26: 1030531.002 ops/s
Iteration  27: 1025595.536 ops/s
Iteration  28: 1030530.716 ops/s
Iteration  29: 1028392.378 ops/s
Iteration  30: 1026639.757 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator":
  1027767.786 ±(99.9%) 1875.157 ops/s [Average]
  (min, avg, max) = (1020563.999, 1027767.786, 1030972.121), stdev = 2806.647
  CI (99.9%): [1025892.629, 1029642.942] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator  thrpt   30  1027767.786 ± 1875.157  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toImmutableSortedListBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toImmutableSortedListBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1255943.238 ops/s
# Warmup Iteration   2: 2808552.886 ops/s
# Warmup Iteration   3: 2974073.786 ops/s
# Warmup Iteration   4: 2857278.141 ops/s
# Warmup Iteration   5: 2573752.222 ops/s
# Warmup Iteration   6: 2965062.906 ops/s
# Warmup Iteration   7: 2953420.539 ops/s
# Warmup Iteration   8: 2962903.400 ops/s
# Warmup Iteration   9: 2961008.348 ops/s
# Warmup Iteration  10: 2961543.255 ops/s
# Warmup Iteration  11: 2966399.731 ops/s
# Warmup Iteration  12: 2957385.861 ops/s
# Warmup Iteration  13: 2963131.397 ops/s
# Warmup Iteration  14: 2963404.413 ops/s
# Warmup Iteration  15: 2957346.021 ops/s
# Warmup Iteration  16: 2969406.646 ops/s
# Warmup Iteration  17: 2944368.830 ops/s
# Warmup Iteration  18: 2962896.455 ops/s
# Warmup Iteration  19: 2955682.491 ops/s
# Warmup Iteration  20: 2945651.743 ops/s
# Warmup Iteration  21: 2949935.365 ops/s
# Warmup Iteration  22: 2951103.587 ops/s
# Warmup Iteration  23: 2956204.404 ops/s
# Warmup Iteration  24: 2953859.931 ops/s
# Warmup Iteration  25: 2959624.904 ops/s
# Warmup Iteration  26: 2955838.566 ops/s
# Warmup Iteration  27: 2955817.282 ops/s
# Warmup Iteration  28: 2958875.958 ops/s
# Warmup Iteration  29: 2954051.253 ops/s
# Warmup Iteration  30: 2957635.776 ops/s
Iteration   1: 2958236.354 ops/s
Iteration   2: 2944035.244 ops/s
Iteration   3: 2963743.864 ops/s
Iteration   4: 2953581.161 ops/s
Iteration   5: 2954369.101 ops/s
Iteration   6: 2950568.860 ops/s
Iteration   7: 2959948.119 ops/s
Iteration   8: 2962460.866 ops/s
Iteration   9: 2938629.262 ops/s
Iteration  10: 2958842.040 ops/s
Iteration  11: 2957878.704 ops/s
Iteration  12: 2961685.542 ops/s
Iteration  13: 2947960.452 ops/s
Iteration  14: 2947700.765 ops/s
Iteration  15: 2954955.775 ops/s
Iteration  16: 2957688.212 ops/s
Iteration  17: 2968435.178 ops/s
Iteration  18: 2961718.788 ops/s
Iteration  19: 2955796.717 ops/s
Iteration  20: 2949680.427 ops/s
Iteration  21: 2960500.517 ops/s
Iteration  22: 2960194.081 ops/s
Iteration  23: 2956427.204 ops/s
Iteration  24: 2945659.586 ops/s
Iteration  25: 2943899.594 ops/s
Iteration  26: 2961253.132 ops/s
Iteration  27: 2945056.811 ops/s
Iteration  28: 2961582.284 ops/s
Iteration  29: 2957628.459 ops/s
Iteration  30: 2935616.730 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toImmutableSortedListBy":
  2954524.461 ±(99.9%) 5316.897 ops/s [Average]
  (min, avg, max) = (2935616.730, 2954524.461, 2968435.178), stdev = 7958.082
  CI (99.9%): [2949207.564, 2959841.358] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_toImmutableSortedListBy  thrpt   30  2954524.461 ± 5316.897  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 795540.548 ops/s
# Warmup Iteration   2: 1333914.791 ops/s
# Warmup Iteration   3: 1597405.715 ops/s
# Warmup Iteration   4: 1618333.532 ops/s
# Warmup Iteration   5: 1613782.240 ops/s
# Warmup Iteration   6: 1421610.838 ops/s
# Warmup Iteration   7: 1524186.343 ops/s
# Warmup Iteration   8: 1615683.083 ops/s
# Warmup Iteration   9: 1613382.159 ops/s
# Warmup Iteration  10: 1619135.161 ops/s
# Warmup Iteration  11: 1618561.024 ops/s
# Warmup Iteration  12: 1616732.362 ops/s
# Warmup Iteration  13: 1614936.254 ops/s
# Warmup Iteration  14: 1617228.300 ops/s
# Warmup Iteration  15: 1616463.239 ops/s
# Warmup Iteration  16: 1615444.272 ops/s
# Warmup Iteration  17: 1616273.590 ops/s
# Warmup Iteration  18: 1618915.071 ops/s
# Warmup Iteration  19: 1617099.519 ops/s
# Warmup Iteration  20: 1617964.504 ops/s
# Warmup Iteration  21: 1619492.189 ops/s
# Warmup Iteration  22: 1619083.360 ops/s
# Warmup Iteration  23: 1611600.625 ops/s
# Warmup Iteration  24: 1620840.847 ops/s
# Warmup Iteration  25: 1618670.628 ops/s
# Warmup Iteration  26: 1611442.016 ops/s
# Warmup Iteration  27: 1614938.984 ops/s
# Warmup Iteration  28: 1616266.524 ops/s
# Warmup Iteration  29: 1615891.442 ops/s
# Warmup Iteration  30: 1618729.391 ops/s
Iteration   1: 1615507.160 ops/s
Iteration   2: 1621856.079 ops/s
Iteration   3: 1612229.725 ops/s
Iteration   4: 1617353.739 ops/s
Iteration   5: 1613577.595 ops/s
Iteration   6: 1617010.938 ops/s
Iteration   7: 1614274.124 ops/s
Iteration   8: 1621686.662 ops/s
Iteration   9: 1614067.480 ops/s
Iteration  10: 1618312.478 ops/s
Iteration  11: 1617642.123 ops/s
Iteration  12: 1621035.710 ops/s
Iteration  13: 1618259.668 ops/s
Iteration  14: 1617081.989 ops/s
Iteration  15: 1615626.405 ops/s
Iteration  16: 1622049.846 ops/s
Iteration  17: 1616271.453 ops/s
Iteration  18: 1618159.039 ops/s
Iteration  19: 1614390.071 ops/s
Iteration  20: 1609350.395 ops/s
Iteration  21: 1617906.490 ops/s
Iteration  22: 1617981.801 ops/s
Iteration  23: 1619438.398 ops/s
Iteration  24: 1618332.980 ops/s
Iteration  25: 1615430.051 ops/s
Iteration  26: 1613458.765 ops/s
Iteration  27: 1620216.242 ops/s
Iteration  28: 1618640.749 ops/s
Iteration  29: 1617128.620 ops/s
Iteration  30: 1614344.399 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering":
  1616954.039 ±(99.9%) 1991.082 ops/s [Average]
  (min, avg, max) = (1609350.395, 1616954.039, 1622049.846), stdev = 2980.159
  CI (99.9%): [1614962.957, 1618945.122] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering  thrpt   30  1616954.039 ± 1991.082  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toImmutableSortedList_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toImmutableSortedList_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1759235.045 ops/s
# Warmup Iteration   2: 3187356.134 ops/s
# Warmup Iteration   3: 3652839.769 ops/s
# Warmup Iteration   4: 3664588.359 ops/s
# Warmup Iteration   5: 3653320.372 ops/s
# Warmup Iteration   6: 2977230.550 ops/s
# Warmup Iteration   7: 3654456.810 ops/s
# Warmup Iteration   8: 3654587.053 ops/s
# Warmup Iteration   9: 3632987.286 ops/s
# Warmup Iteration  10: 3646369.429 ops/s
# Warmup Iteration  11: 3645188.596 ops/s
# Warmup Iteration  12: 3654252.439 ops/s
# Warmup Iteration  13: 3637248.745 ops/s
# Warmup Iteration  14: 3656599.854 ops/s
# Warmup Iteration  15: 3649765.879 ops/s
# Warmup Iteration  16: 3652078.280 ops/s
# Warmup Iteration  17: 3684328.581 ops/s
# Warmup Iteration  18: 3682705.483 ops/s
# Warmup Iteration  19: 3679047.280 ops/s
# Warmup Iteration  20: 3678569.555 ops/s
# Warmup Iteration  21: 3667599.233 ops/s
# Warmup Iteration  22: 3667954.627 ops/s
# Warmup Iteration  23: 3674519.976 ops/s
# Warmup Iteration  24: 3664229.441 ops/s
# Warmup Iteration  25: 3673418.792 ops/s
# Warmup Iteration  26: 3667531.173 ops/s
# Warmup Iteration  27: 3672282.175 ops/s
# Warmup Iteration  28: 3667095.414 ops/s
# Warmup Iteration  29: 3682895.325 ops/s
# Warmup Iteration  30: 3672946.154 ops/s
Iteration   1: 3679026.094 ops/s
Iteration   2: 3683653.059 ops/s
Iteration   3: 3674513.399 ops/s
Iteration   4: 3652585.766 ops/s
Iteration   5: 3686080.311 ops/s
Iteration   6: 3677419.157 ops/s
Iteration   7: 3683001.769 ops/s
Iteration   8: 3678624.415 ops/s
Iteration   9: 3678987.619 ops/s
Iteration  10: 3677455.707 ops/s
Iteration  11: 3681960.756 ops/s
Iteration  12: 3684529.105 ops/s
Iteration  13: 3674282.407 ops/s
Iteration  14: 3683420.955 ops/s
Iteration  15: 3666656.268 ops/s
Iteration  16: 3677969.308 ops/s
Iteration  17: 3679884.960 ops/s
Iteration  18: 3674666.278 ops/s
Iteration  19: 3678610.295 ops/s
Iteration  20: 3672713.128 ops/s
Iteration  21: 3674759.206 ops/s
Iteration  22: 3687234.829 ops/s
Iteration  23: 3672748.820 ops/s
Iteration  24: 3684938.175 ops/s
Iteration  25: 3679819.317 ops/s
Iteration  26: 3675052.343 ops/s
Iteration  27: 3672547.771 ops/s
Iteration  28: 3679079.327 ops/s
Iteration  29: 3689102.794 ops/s
Iteration  30: 3672714.320 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toImmutableSortedList_with_comparator":
  3677801.255 ±(99.9%) 4676.736 ops/s [Average]
  (min, avg, max) = (3652585.766, 3677801.255, 3689102.794), stdev = 6999.919
  CI (99.9%): [3673124.519, 3682477.991] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_toImmutableSortedList_with_comparator  thrpt   30  3677801.255 ± 4676.736  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toImmutableSortedSetBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toImmutableSortedSetBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 522946.109 ops/s
# Warmup Iteration   2: 1117729.387 ops/s
# Warmup Iteration   3: 1218986.737 ops/s
# Warmup Iteration   4: 1224526.098 ops/s
# Warmup Iteration   5: 1016648.108 ops/s
# Warmup Iteration   6: 1231231.266 ops/s
# Warmup Iteration   7: 1231038.923 ops/s
# Warmup Iteration   8: 1231807.273 ops/s
# Warmup Iteration   9: 1229655.090 ops/s
# Warmup Iteration  10: 1231672.174 ops/s
# Warmup Iteration  11: 1228287.460 ops/s
# Warmup Iteration  12: 1227321.995 ops/s
# Warmup Iteration  13: 1227755.363 ops/s
# Warmup Iteration  14: 1229140.817 ops/s
# Warmup Iteration  15: 1229330.790 ops/s
# Warmup Iteration  16: 1229504.590 ops/s
# Warmup Iteration  17: 1233362.113 ops/s
# Warmup Iteration  18: 1226052.719 ops/s
# Warmup Iteration  19: 1229817.585 ops/s
# Warmup Iteration  20: 1228547.987 ops/s
# Warmup Iteration  21: 1229802.713 ops/s
# Warmup Iteration  22: 1229699.489 ops/s
# Warmup Iteration  23: 1228879.772 ops/s
# Warmup Iteration  24: 1230501.162 ops/s
# Warmup Iteration  25: 1229187.104 ops/s
# Warmup Iteration  26: 1230149.147 ops/s
# Warmup Iteration  27: 1227710.440 ops/s
# Warmup Iteration  28: 1232544.890 ops/s
# Warmup Iteration  29: 1230753.306 ops/s
# Warmup Iteration  30: 1230063.136 ops/s
Iteration   1: 1229344.242 ops/s
Iteration   2: 1230417.064 ops/s
Iteration   3: 1232741.348 ops/s
Iteration   4: 1232045.033 ops/s
Iteration   5: 1231576.079 ops/s
Iteration   6: 1232075.347 ops/s
Iteration   7: 1224208.851 ops/s
Iteration   8: 1231754.989 ops/s
Iteration   9: 1226521.754 ops/s
Iteration  10: 1232591.308 ops/s
Iteration  11: 1233539.538 ops/s
Iteration  12: 1232831.652 ops/s
Iteration  13: 1228114.637 ops/s
Iteration  14: 1230452.273 ops/s
Iteration  15: 1231763.304 ops/s
Iteration  16: 1228625.671 ops/s
Iteration  17: 1232674.545 ops/s
Iteration  18: 1228858.185 ops/s
Iteration  19: 1228347.322 ops/s
Iteration  20: 1227297.876 ops/s
Iteration  21: 1232352.360 ops/s
Iteration  22: 1229473.747 ops/s
Iteration  23: 1231317.425 ops/s
Iteration  24: 1231069.141 ops/s
Iteration  25: 1227072.309 ops/s
Iteration  26: 1232006.792 ops/s
Iteration  27: 1231661.137 ops/s
Iteration  28: 1225997.743 ops/s
Iteration  29: 1231929.270 ops/s
Iteration  30: 1230112.098 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toImmutableSortedSetBy":
  1230292.435 ±(99.9%) 1586.634 ops/s [Average]
  (min, avg, max) = (1224208.851, 1230292.435, 1233539.538), stdev = 2374.799
  CI (99.9%): [1228705.800, 1231879.069] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_toImmutableSortedSetBy  thrpt   30  1230292.435 ± 1586.634  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 612867.127 ops/s
# Warmup Iteration   2: 1166740.159 ops/s
# Warmup Iteration   3: 1318455.682 ops/s
# Warmup Iteration   4: 1317476.861 ops/s
# Warmup Iteration   5: 1264644.263 ops/s
# Warmup Iteration   6: 1156146.854 ops/s
# Warmup Iteration   7: 1326099.665 ops/s
# Warmup Iteration   8: 1326175.891 ops/s
# Warmup Iteration   9: 1323333.953 ops/s
# Warmup Iteration  10: 1326252.998 ops/s
# Warmup Iteration  11: 1324255.232 ops/s
# Warmup Iteration  12: 1326261.139 ops/s
# Warmup Iteration  13: 1326917.594 ops/s
# Warmup Iteration  14: 1326948.162 ops/s
# Warmup Iteration  15: 1324784.044 ops/s
# Warmup Iteration  16: 1319409.299 ops/s
# Warmup Iteration  17: 1316605.164 ops/s
# Warmup Iteration  18: 1324462.526 ops/s
# Warmup Iteration  19: 1321196.242 ops/s
# Warmup Iteration  20: 1323809.312 ops/s
# Warmup Iteration  21: 1324604.372 ops/s
# Warmup Iteration  22: 1319969.345 ops/s
# Warmup Iteration  23: 1320800.635 ops/s
# Warmup Iteration  24: 1325485.212 ops/s
# Warmup Iteration  25: 1322521.290 ops/s
# Warmup Iteration  26: 1327822.133 ops/s
# Warmup Iteration  27: 1325980.459 ops/s
# Warmup Iteration  28: 1326611.593 ops/s
# Warmup Iteration  29: 1321749.789 ops/s
# Warmup Iteration  30: 1325346.077 ops/s
Iteration   1: 1327408.675 ops/s
Iteration   2: 1326331.678 ops/s
Iteration   3: 1320136.217 ops/s
Iteration   4: 1327990.437 ops/s
Iteration   5: 1321224.825 ops/s
Iteration   6: 1327081.836 ops/s
Iteration   7: 1321395.961 ops/s
Iteration   8: 1323707.552 ops/s
Iteration   9: 1323994.350 ops/s
Iteration  10: 1323062.547 ops/s
Iteration  11: 1322823.285 ops/s
Iteration  12: 1326905.410 ops/s
Iteration  13: 1323804.008 ops/s
Iteration  14: 1327368.105 ops/s
Iteration  15: 1324839.200 ops/s
Iteration  16: 1319852.331 ops/s
Iteration  17: 1325888.935 ops/s
Iteration  18: 1321508.889 ops/s
Iteration  19: 1325312.390 ops/s
Iteration  20: 1324603.436 ops/s
Iteration  21: 1325786.211 ops/s
Iteration  22: 1324437.605 ops/s
Iteration  23: 1321145.377 ops/s
Iteration  24: 1327921.521 ops/s
Iteration  25: 1325273.921 ops/s
Iteration  26: 1324236.388 ops/s
Iteration  27: 1327457.885 ops/s
Iteration  28: 1324844.469 ops/s
Iteration  29: 1319323.292 ops/s
Iteration  30: 1326020.555 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator":
  1324389.576 ±(99.9%) 1694.247 ops/s [Average]
  (min, avg, max) = (1319323.292, 1324389.576, 1327990.437), stdev = 2535.869
  CI (99.9%): [1322695.329, 1326083.824] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator  thrpt   30  1324389.576 ± 1694.247  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1098051.426 ops/s
# Warmup Iteration   2: 2723085.421 ops/s
# Warmup Iteration   3: 2826272.476 ops/s
# Warmup Iteration   4: 2324599.197 ops/s
# Warmup Iteration   5: 2829384.691 ops/s
# Warmup Iteration   6: 2837568.053 ops/s
# Warmup Iteration   7: 2830071.327 ops/s
# Warmup Iteration   8: 2833532.730 ops/s
# Warmup Iteration   9: 2830273.457 ops/s
# Warmup Iteration  10: 2831324.717 ops/s
# Warmup Iteration  11: 2823435.757 ops/s
# Warmup Iteration  12: 2825630.128 ops/s
# Warmup Iteration  13: 2828305.174 ops/s
# Warmup Iteration  14: 2826893.003 ops/s
# Warmup Iteration  15: 2829820.325 ops/s
# Warmup Iteration  16: 2833651.996 ops/s
# Warmup Iteration  17: 2821169.381 ops/s
# Warmup Iteration  18: 2831197.115 ops/s
# Warmup Iteration  19: 2830570.920 ops/s
# Warmup Iteration  20: 2829256.073 ops/s
# Warmup Iteration  21: 2811658.719 ops/s
# Warmup Iteration  22: 2831394.244 ops/s
# Warmup Iteration  23: 2824417.950 ops/s
# Warmup Iteration  24: 2829723.322 ops/s
# Warmup Iteration  25: 2827655.512 ops/s
# Warmup Iteration  26: 2829232.407 ops/s
# Warmup Iteration  27: 2832683.445 ops/s
# Warmup Iteration  28: 2829978.801 ops/s
# Warmup Iteration  29: 2825653.418 ops/s
# Warmup Iteration  30: 2830923.185 ops/s
Iteration   1: 2831423.268 ops/s
Iteration   2: 2827823.097 ops/s
Iteration   3: 2820539.110 ops/s
Iteration   4: 2831782.210 ops/s
Iteration   5: 2832590.132 ops/s
Iteration   6: 2823087.079 ops/s
Iteration   7: 2821740.677 ops/s
Iteration   8: 2832918.845 ops/s
Iteration   9: 2830792.756 ops/s
Iteration  10: 2826339.723 ops/s
Iteration  11: 2830625.975 ops/s
Iteration  12: 2829218.409 ops/s
Iteration  13: 2828380.165 ops/s
Iteration  14: 2827535.882 ops/s
Iteration  15: 2830725.147 ops/s
Iteration  16: 2829095.206 ops/s
Iteration  17: 2827785.915 ops/s
Iteration  18: 2833088.590 ops/s
Iteration  19: 2826225.006 ops/s
Iteration  20: 2828361.193 ops/s
Iteration  21: 2828210.249 ops/s
Iteration  22: 2818855.562 ops/s
Iteration  23: 2829234.210 ops/s
Iteration  24: 2828149.838 ops/s
Iteration  25: 2811029.344 ops/s
Iteration  26: 2832979.185 ops/s
Iteration  27: 2832641.350 ops/s
Iteration  28: 2824994.455 ops/s
Iteration  29: 2831989.794 ops/s
Iteration  30: 2829921.904 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toList":
  2827936.143 ±(99.9%) 3271.929 ops/s [Average]
  (min, avg, max) = (2811029.344, 2827936.143, 2833088.590), stdev = 4897.270
  CI (99.9%): [2824664.213, 2831208.072] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_toList  thrpt   30  2827936.143 ± 3271.929  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 835992.323 ops/s
# Warmup Iteration   2: 2202577.370 ops/s
# Warmup Iteration   3: 2247165.024 ops/s
# Warmup Iteration   4: 1873760.615 ops/s
# Warmup Iteration   5: 2247265.555 ops/s
# Warmup Iteration   6: 2263001.255 ops/s
# Warmup Iteration   7: 2264489.997 ops/s
# Warmup Iteration   8: 2245397.671 ops/s
# Warmup Iteration   9: 2259893.284 ops/s
# Warmup Iteration  10: 2258316.443 ops/s
# Warmup Iteration  11: 2272710.833 ops/s
# Warmup Iteration  12: 2261003.786 ops/s
# Warmup Iteration  13: 2261423.296 ops/s
# Warmup Iteration  14: 2267262.706 ops/s
# Warmup Iteration  15: 2271318.312 ops/s
# Warmup Iteration  16: 2243925.849 ops/s
# Warmup Iteration  17: 2246515.287 ops/s
# Warmup Iteration  18: 2260407.588 ops/s
# Warmup Iteration  19: 2257042.100 ops/s
# Warmup Iteration  20: 2255144.947 ops/s
# Warmup Iteration  21: 2268026.657 ops/s
# Warmup Iteration  22: 2244459.073 ops/s
# Warmup Iteration  23: 2252294.504 ops/s
# Warmup Iteration  24: 2238573.925 ops/s
# Warmup Iteration  25: 2255453.340 ops/s
# Warmup Iteration  26: 2251274.977 ops/s
# Warmup Iteration  27: 2258982.129 ops/s
# Warmup Iteration  28: 2261540.920 ops/s
# Warmup Iteration  29: 2255087.103 ops/s
# Warmup Iteration  30: 2264985.383 ops/s
Iteration   1: 2258340.410 ops/s
Iteration   2: 2270074.714 ops/s
Iteration   3: 2255167.570 ops/s
Iteration   4: 2234639.884 ops/s
Iteration   5: 2258354.407 ops/s
Iteration   6: 2244206.610 ops/s
Iteration   7: 2239227.019 ops/s
Iteration   8: 2249458.619 ops/s
Iteration   9: 2264464.779 ops/s
Iteration  10: 2272149.110 ops/s
Iteration  11: 2247935.175 ops/s
Iteration  12: 2255144.788 ops/s
Iteration  13: 2277105.993 ops/s
Iteration  14: 2272468.883 ops/s
Iteration  15: 2260899.004 ops/s
Iteration  16: 2231977.720 ops/s
Iteration  17: 2256931.484 ops/s
Iteration  18: 2249167.870 ops/s
Iteration  19: 2256561.645 ops/s
Iteration  20: 2260934.148 ops/s
Iteration  21: 2264079.673 ops/s
Iteration  22: 2257606.285 ops/s
Iteration  23: 2256602.092 ops/s
Iteration  24: 2269999.737 ops/s
Iteration  25: 2266592.352 ops/s
Iteration  26: 2238693.676 ops/s
Iteration  27: 2244014.721 ops/s
Iteration  28: 2269487.146 ops/s
Iteration  29: 2258659.891 ops/s
Iteration  30: 2261352.374 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toMap":
  2256743.259 ±(99.9%) 7785.617 ops/s [Average]
  (min, avg, max) = (2231977.720, 2256743.259, 2277105.993), stdev = 11653.146
  CI (99.9%): [2248957.642, 2264528.876] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_toMap  thrpt   30  2256743.259 ± 7785.617  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toMapOfItemToCount$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toMapOfItemToCount

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12317643.029 ops/s
# Warmup Iteration   2: 21193347.890 ops/s
# Warmup Iteration   3: 18802651.219 ops/s
# Warmup Iteration   4: 21039042.840 ops/s
# Warmup Iteration   5: 20901158.662 ops/s
# Warmup Iteration   6: 20762193.725 ops/s
# Warmup Iteration   7: 20973929.266 ops/s
# Warmup Iteration   8: 20794733.838 ops/s
# Warmup Iteration   9: 21439999.944 ops/s
# Warmup Iteration  10: 20880617.000 ops/s
# Warmup Iteration  11: 20927681.610 ops/s
# Warmup Iteration  12: 20916214.062 ops/s
# Warmup Iteration  13: 20667914.433 ops/s
# Warmup Iteration  14: 21223651.264 ops/s
# Warmup Iteration  15: 21042070.295 ops/s
# Warmup Iteration  16: 21324617.464 ops/s
# Warmup Iteration  17: 20471618.990 ops/s
# Warmup Iteration  18: 20533371.112 ops/s
# Warmup Iteration  19: 21151736.728 ops/s
# Warmup Iteration  20: 20561180.713 ops/s
# Warmup Iteration  21: 20494822.655 ops/s
# Warmup Iteration  22: 20619769.770 ops/s
# Warmup Iteration  23: 20464187.525 ops/s
# Warmup Iteration  24: 20523330.317 ops/s
# Warmup Iteration  25: 20373853.177 ops/s
# Warmup Iteration  26: 20601381.079 ops/s
# Warmup Iteration  27: 20468890.279 ops/s
# Warmup Iteration  28: 20509989.527 ops/s
# Warmup Iteration  29: 20556785.655 ops/s
# Warmup Iteration  30: 20497054.646 ops/s
Iteration   1: 20455430.245 ops/s
Iteration   2: 20465051.362 ops/s
Iteration   3: 20508381.257 ops/s
Iteration   4: 20586207.587 ops/s
Iteration   5: 20499800.360 ops/s
Iteration   6: 20518007.858 ops/s
Iteration   7: 20581659.882 ops/s
Iteration   8: 20660193.357 ops/s
Iteration   9: 20569148.775 ops/s
Iteration  10: 20555000.659 ops/s
Iteration  11: 20403367.416 ops/s
Iteration  12: 20766659.379 ops/s
Iteration  13: 20507603.489 ops/s
Iteration  14: 20539207.587 ops/s
Iteration  15: 20671337.980 ops/s
Iteration  16: 20603738.383 ops/s
Iteration  17: 20714487.509 ops/s
Iteration  18: 20607980.650 ops/s
Iteration  19: 20689545.326 ops/s
Iteration  20: 20592249.569 ops/s
Iteration  21: 20527617.924 ops/s
Iteration  22: 20393155.424 ops/s
Iteration  23: 20431810.639 ops/s
Iteration  24: 20476936.475 ops/s
Iteration  25: 20681054.335 ops/s
Iteration  26: 20569438.431 ops/s
Iteration  27: 20623083.655 ops/s
Iteration  28: 20604746.698 ops/s
Iteration  29: 20469928.472 ops/s
Iteration  30: 20497712.524 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toMapOfItemToCount":
  20559018.107 ±(99.9%) 62395.319 ops/s [Average]
  (min, avg, max) = (20393155.424, 20559018.107, 20766659.379), stdev = 93390.383
  CI (99.9%): [20496622.788, 20621413.426] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score       Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_toMapOfItemToCount  thrpt   30  20559018.107 ± 62395.319  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toMapTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toMapTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 773226.333 ops/s
# Warmup Iteration   2: 2022844.668 ops/s
# Warmup Iteration   3: 2047685.301 ops/s
# Warmup Iteration   4: 1703221.179 ops/s
# Warmup Iteration   5: 2049734.501 ops/s
# Warmup Iteration   6: 2050084.334 ops/s
# Warmup Iteration   7: 2058276.049 ops/s
# Warmup Iteration   8: 2043937.759 ops/s
# Warmup Iteration   9: 2047474.888 ops/s
# Warmup Iteration  10: 2048639.811 ops/s
# Warmup Iteration  11: 2050605.905 ops/s
# Warmup Iteration  12: 2058900.571 ops/s
# Warmup Iteration  13: 2058038.890 ops/s
# Warmup Iteration  14: 2042243.713 ops/s
# Warmup Iteration  15: 2052488.434 ops/s
# Warmup Iteration  16: 2045750.547 ops/s
# Warmup Iteration  17: 2048825.634 ops/s
# Warmup Iteration  18: 2049734.970 ops/s
# Warmup Iteration  19: 2058364.623 ops/s
# Warmup Iteration  20: 2044740.746 ops/s
# Warmup Iteration  21: 2041753.885 ops/s
# Warmup Iteration  22: 2052352.805 ops/s
# Warmup Iteration  23: 2044106.040 ops/s
# Warmup Iteration  24: 2040102.501 ops/s
# Warmup Iteration  25: 2045201.194 ops/s
# Warmup Iteration  26: 2036957.654 ops/s
# Warmup Iteration  27: 2045237.371 ops/s
# Warmup Iteration  28: 2045499.837 ops/s
# Warmup Iteration  29: 2050740.070 ops/s
# Warmup Iteration  30: 2047875.400 ops/s
Iteration   1: 2039931.603 ops/s
Iteration   2: 2044819.037 ops/s
Iteration   3: 2039786.292 ops/s
Iteration   4: 2050298.088 ops/s
Iteration   5: 2034083.446 ops/s
Iteration   6: 2052288.915 ops/s
Iteration   7: 2056544.173 ops/s
Iteration   8: 2052039.944 ops/s
Iteration   9: 2040546.783 ops/s
Iteration  10: 2050315.914 ops/s
Iteration  11: 2053078.988 ops/s
Iteration  12: 2040821.299 ops/s
Iteration  13: 2043983.806 ops/s
Iteration  14: 2054277.775 ops/s
Iteration  15: 2049141.116 ops/s
Iteration  16: 2035130.563 ops/s
Iteration  17: 2046387.427 ops/s
Iteration  18: 2044167.423 ops/s
Iteration  19: 2031468.935 ops/s
Iteration  20: 2034954.880 ops/s
Iteration  21: 2047553.771 ops/s
Iteration  22: 2031360.682 ops/s
Iteration  23: 2026427.416 ops/s
Iteration  24: 2050976.809 ops/s
Iteration  25: 2048510.937 ops/s
Iteration  26: 2045920.667 ops/s
Iteration  27: 2046924.116 ops/s
Iteration  28: 2051586.211 ops/s
Iteration  29: 2047801.665 ops/s
Iteration  30: 2031786.774 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toMapTarget":
  2044097.182 ±(99.9%) 5331.433 ops/s [Average]
  (min, avg, max) = (2026427.416, 2044097.182, 2056544.173), stdev = 7979.839
  CI (99.9%): [2038765.748, 2049428.615] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_toMapTarget  thrpt   30  2044097.182 ± 5331.433  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1315457.230 ops/s
# Warmup Iteration   2: 3081812.758 ops/s
# Warmup Iteration   3: 3279263.652 ops/s
# Warmup Iteration   4: 2804612.106 ops/s
# Warmup Iteration   5: 3191706.975 ops/s
# Warmup Iteration   6: 3290087.512 ops/s
# Warmup Iteration   7: 3284561.111 ops/s
# Warmup Iteration   8: 3290880.463 ops/s
# Warmup Iteration   9: 3276016.560 ops/s
# Warmup Iteration  10: 3273498.936 ops/s
# Warmup Iteration  11: 3288475.729 ops/s
# Warmup Iteration  12: 3290910.839 ops/s
# Warmup Iteration  13: 3273865.572 ops/s
# Warmup Iteration  14: 3291659.707 ops/s
# Warmup Iteration  15: 3270151.469 ops/s
# Warmup Iteration  16: 3282625.733 ops/s
# Warmup Iteration  17: 3293460.587 ops/s
# Warmup Iteration  18: 3284468.478 ops/s
# Warmup Iteration  19: 3288618.083 ops/s
# Warmup Iteration  20: 3282106.496 ops/s
# Warmup Iteration  21: 3288187.455 ops/s
# Warmup Iteration  22: 3283252.674 ops/s
# Warmup Iteration  23: 3286821.550 ops/s
# Warmup Iteration  24: 3293681.072 ops/s
# Warmup Iteration  25: 3282688.472 ops/s
# Warmup Iteration  26: 3281665.458 ops/s
# Warmup Iteration  27: 3288888.951 ops/s
# Warmup Iteration  28: 3289836.109 ops/s
# Warmup Iteration  29: 3278017.636 ops/s
# Warmup Iteration  30: 3293802.590 ops/s
Iteration   1: 3276879.154 ops/s
Iteration   2: 3293240.802 ops/s
Iteration   3: 3288830.412 ops/s
Iteration   4: 3293471.291 ops/s
Iteration   5: 3289266.125 ops/s
Iteration   6: 3289387.684 ops/s
Iteration   7: 3286763.445 ops/s
Iteration   8: 3291017.058 ops/s
Iteration   9: 3284106.620 ops/s
Iteration  10: 3284075.953 ops/s
Iteration  11: 3280451.535 ops/s
Iteration  12: 3284851.948 ops/s
Iteration  13: 3299816.910 ops/s
Iteration  14: 3288135.917 ops/s
Iteration  15: 3284063.069 ops/s
Iteration  16: 3276629.778 ops/s
Iteration  17: 3283827.627 ops/s
Iteration  18: 3287641.049 ops/s
Iteration  19: 3270995.777 ops/s
Iteration  20: 3287825.028 ops/s
Iteration  21: 3285158.520 ops/s
Iteration  22: 3279758.225 ops/s
Iteration  23: 3288407.036 ops/s
Iteration  24: 3287434.532 ops/s
Iteration  25: 3283357.771 ops/s
Iteration  26: 3289810.627 ops/s
Iteration  27: 3289242.285 ops/s
Iteration  28: 3290728.273 ops/s
Iteration  29: 3289015.475 ops/s
Iteration  30: 3283317.923 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toSet":
  3286250.262 ±(99.9%) 3775.197 ops/s [Average]
  (min, avg, max) = (3270995.777, 3286250.262, 3299816.910), stdev = 5650.537
  CI (99.9%): [3282475.065, 3290025.458] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_toSet  thrpt   30  3286250.262 ± 3775.197  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toSortedBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toSortedBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 524787.405 ops/s
# Warmup Iteration   2: 1239624.760 ops/s
# Warmup Iteration   3: 1246613.123 ops/s
# Warmup Iteration   4: 1063357.201 ops/s
# Warmup Iteration   5: 1243020.001 ops/s
# Warmup Iteration   6: 1243138.268 ops/s
# Warmup Iteration   7: 1244566.316 ops/s
# Warmup Iteration   8: 1246520.183 ops/s
# Warmup Iteration   9: 1249023.143 ops/s
# Warmup Iteration  10: 1246568.211 ops/s
# Warmup Iteration  11: 1245436.473 ops/s
# Warmup Iteration  12: 1243017.546 ops/s
# Warmup Iteration  13: 1248834.620 ops/s
# Warmup Iteration  14: 1247298.422 ops/s
# Warmup Iteration  15: 1249590.388 ops/s
# Warmup Iteration  16: 1249144.713 ops/s
# Warmup Iteration  17: 1252542.129 ops/s
# Warmup Iteration  18: 1251464.746 ops/s
# Warmup Iteration  19: 1243756.099 ops/s
# Warmup Iteration  20: 1251361.772 ops/s
# Warmup Iteration  21: 1248587.334 ops/s
# Warmup Iteration  22: 1246107.851 ops/s
# Warmup Iteration  23: 1251859.528 ops/s
# Warmup Iteration  24: 1249414.860 ops/s
# Warmup Iteration  25: 1251658.667 ops/s
# Warmup Iteration  26: 1250370.020 ops/s
# Warmup Iteration  27: 1249372.821 ops/s
# Warmup Iteration  28: 1244520.831 ops/s
# Warmup Iteration  29: 1248632.006 ops/s
# Warmup Iteration  30: 1246788.788 ops/s
Iteration   1: 1247036.335 ops/s
Iteration   2: 1251708.531 ops/s
Iteration   3: 1250746.190 ops/s
Iteration   4: 1244282.794 ops/s
Iteration   5: 1246413.782 ops/s
Iteration   6: 1247021.526 ops/s
Iteration   7: 1247452.299 ops/s
Iteration   8: 1250145.269 ops/s
Iteration   9: 1254364.945 ops/s
Iteration  10: 1251682.373 ops/s
Iteration  11: 1249236.025 ops/s
Iteration  12: 1253410.323 ops/s
Iteration  13: 1242391.916 ops/s
Iteration  14: 1254847.447 ops/s
Iteration  15: 1249044.955 ops/s
Iteration  16: 1254387.805 ops/s
Iteration  17: 1250971.238 ops/s
Iteration  18: 1252679.089 ops/s
Iteration  19: 1250805.468 ops/s
Iteration  20: 1248385.392 ops/s
Iteration  21: 1248688.641 ops/s
Iteration  22: 1240119.188 ops/s
Iteration  23: 1243853.089 ops/s
Iteration  24: 1243846.003 ops/s
Iteration  25: 1254360.296 ops/s
Iteration  26: 1251412.203 ops/s
Iteration  27: 1246104.069 ops/s
Iteration  28: 1247632.706 ops/s
Iteration  29: 1246769.720 ops/s
Iteration  30: 1247932.868 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toSortedBag":
  1248924.416 ±(99.9%) 2533.505 ops/s [Average]
  (min, avg, max) = (1240119.188, 1248924.416, 1254847.447), stdev = 3792.031
  CI (99.9%): [1246390.911, 1251457.921] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_toSortedBag  thrpt   30  1248924.416 ± 2533.505  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toSortedBagBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toSortedBagBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1096569.789 ops/s
# Warmup Iteration   2: 1432487.508 ops/s
# Warmup Iteration   3: 1841046.099 ops/s
# Warmup Iteration   4: 1838416.754 ops/s
# Warmup Iteration   5: 1843026.880 ops/s
# Warmup Iteration   6: 1841370.060 ops/s
# Warmup Iteration   7: 1845234.381 ops/s
# Warmup Iteration   8: 1841587.257 ops/s
# Warmup Iteration   9: 1533986.413 ops/s
# Warmup Iteration  10: 1827664.661 ops/s
# Warmup Iteration  11: 1828287.877 ops/s
# Warmup Iteration  12: 1827110.082 ops/s
# Warmup Iteration  13: 1829085.021 ops/s
# Warmup Iteration  14: 1831246.695 ops/s
# Warmup Iteration  15: 1821782.891 ops/s
# Warmup Iteration  16: 1826990.846 ops/s
# Warmup Iteration  17: 1818465.267 ops/s
# Warmup Iteration  18: 1814891.183 ops/s
# Warmup Iteration  19: 1812784.145 ops/s
# Warmup Iteration  20: 1813134.418 ops/s
# Warmup Iteration  21: 1817598.467 ops/s
# Warmup Iteration  22: 1812915.983 ops/s
# Warmup Iteration  23: 1820334.449 ops/s
# Warmup Iteration  24: 1817117.106 ops/s
# Warmup Iteration  25: 1815287.526 ops/s
# Warmup Iteration  26: 1815045.747 ops/s
# Warmup Iteration  27: 1816510.244 ops/s
# Warmup Iteration  28: 1817454.480 ops/s
# Warmup Iteration  29: 1815616.728 ops/s
# Warmup Iteration  30: 1817860.495 ops/s
Iteration   1: 1820642.650 ops/s
Iteration   2: 1815777.748 ops/s
Iteration   3: 1820409.581 ops/s
Iteration   4: 1818915.151 ops/s
Iteration   5: 1816072.101 ops/s
Iteration   6: 1817814.719 ops/s
Iteration   7: 1813043.437 ops/s
Iteration   8: 1819693.980 ops/s
Iteration   9: 1815075.763 ops/s
Iteration  10: 1818179.699 ops/s
Iteration  11: 1817547.426 ops/s
Iteration  12: 1819714.833 ops/s
Iteration  13: 1816499.175 ops/s
Iteration  14: 1820050.230 ops/s
Iteration  15: 1818515.035 ops/s
Iteration  16: 1815899.799 ops/s
Iteration  17: 1818970.616 ops/s
Iteration  18: 1815959.238 ops/s
Iteration  19: 1803833.159 ops/s
Iteration  20: 1814853.738 ops/s
Iteration  21: 1819198.289 ops/s
Iteration  22: 1813627.897 ops/s
Iteration  23: 1814270.294 ops/s
Iteration  24: 1821818.283 ops/s
Iteration  25: 1813671.922 ops/s
Iteration  26: 1813852.896 ops/s
Iteration  27: 1821812.986 ops/s
Iteration  28: 1814002.197 ops/s
Iteration  29: 1818891.282 ops/s
Iteration  30: 1813537.879 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toSortedBagBy":
  1816738.400 ±(99.9%) 2408.177 ops/s [Average]
  (min, avg, max) = (1803833.159, 1816738.400, 1821818.283), stdev = 3604.446
  CI (99.9%): [1814330.223, 1819146.577] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_toSortedBagBy  thrpt   30  1816738.400 ± 2408.177  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toSortedBagBy_empty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toSortedBagBy_empty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 534026.853 ops/s
# Warmup Iteration   2: 767667.675 ops/s
# Warmup Iteration   3: 973279.721 ops/s
# Warmup Iteration   4: 967640.464 ops/s
# Warmup Iteration   5: 974188.563 ops/s
# Warmup Iteration   6: 973305.538 ops/s
# Warmup Iteration   7: 974162.080 ops/s
# Warmup Iteration   8: 814059.074 ops/s
# Warmup Iteration   9: 970363.884 ops/s
# Warmup Iteration  10: 972328.342 ops/s
# Warmup Iteration  11: 971243.589 ops/s
# Warmup Iteration  12: 974260.666 ops/s
# Warmup Iteration  13: 973606.149 ops/s
# Warmup Iteration  14: 973950.191 ops/s
# Warmup Iteration  15: 974261.678 ops/s
# Warmup Iteration  16: 974914.436 ops/s
# Warmup Iteration  17: 972434.787 ops/s
# Warmup Iteration  18: 972501.393 ops/s
# Warmup Iteration  19: 974198.837 ops/s
# Warmup Iteration  20: 972915.538 ops/s
# Warmup Iteration  21: 972969.794 ops/s
# Warmup Iteration  22: 972966.045 ops/s
# Warmup Iteration  23: 972432.874 ops/s
# Warmup Iteration  24: 966597.523 ops/s
# Warmup Iteration  25: 972630.123 ops/s
# Warmup Iteration  26: 973751.579 ops/s
# Warmup Iteration  27: 972477.080 ops/s
# Warmup Iteration  28: 971538.886 ops/s
# Warmup Iteration  29: 974007.104 ops/s
# Warmup Iteration  30: 972654.276 ops/s
Iteration   1: 975370.025 ops/s
Iteration   2: 970960.564 ops/s
Iteration   3: 966215.292 ops/s
Iteration   4: 973972.643 ops/s
Iteration   5: 974615.366 ops/s
Iteration   6: 969453.883 ops/s
Iteration   7: 975070.757 ops/s
Iteration   8: 972270.440 ops/s
Iteration   9: 972274.558 ops/s
Iteration  10: 974606.673 ops/s
Iteration  11: 972669.745 ops/s
Iteration  12: 972851.705 ops/s
Iteration  13: 972560.093 ops/s
Iteration  14: 973819.492 ops/s
Iteration  15: 974063.206 ops/s
Iteration  16: 972400.102 ops/s
Iteration  17: 972204.733 ops/s
Iteration  18: 976418.069 ops/s
Iteration  19: 972993.136 ops/s
Iteration  20: 973198.320 ops/s
Iteration  21: 972552.388 ops/s
Iteration  22: 975837.131 ops/s
Iteration  23: 975217.953 ops/s
Iteration  24: 971138.962 ops/s
Iteration  25: 975562.379 ops/s
Iteration  26: 974300.310 ops/s
Iteration  27: 974350.910 ops/s
Iteration  28: 971129.105 ops/s
Iteration  29: 974012.642 ops/s
Iteration  30: 974904.079 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toSortedBagBy_empty":
  973233.155 ±(99.9%) 1403.326 ops/s [Average]
  (min, avg, max) = (966215.292, 973233.155, 976418.069), stdev = 2100.433
  CI (99.9%): [971829.829, 974636.482] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_toSortedBagBy_empty  thrpt   30  973233.155 ± 1403.326  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toSortedBag_empty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toSortedBag_empty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 790402.151 ops/s
# Warmup Iteration   2: 1637733.923 ops/s
# Warmup Iteration   3: 1799611.480 ops/s
# Warmup Iteration   4: 1794082.438 ops/s
# Warmup Iteration   5: 1508825.319 ops/s
# Warmup Iteration   6: 1810339.980 ops/s
# Warmup Iteration   7: 1803998.133 ops/s
# Warmup Iteration   8: 1805119.601 ops/s
# Warmup Iteration   9: 1809206.305 ops/s
# Warmup Iteration  10: 1807038.483 ops/s
# Warmup Iteration  11: 1806073.980 ops/s
# Warmup Iteration  12: 1803222.563 ops/s
# Warmup Iteration  13: 1810147.710 ops/s
# Warmup Iteration  14: 1804543.342 ops/s
# Warmup Iteration  15: 1807464.947 ops/s
# Warmup Iteration  16: 1799743.199 ops/s
# Warmup Iteration  17: 1808365.533 ops/s
# Warmup Iteration  18: 1803078.191 ops/s
# Warmup Iteration  19: 1805590.400 ops/s
# Warmup Iteration  20: 1805540.727 ops/s
# Warmup Iteration  21: 1806630.427 ops/s
# Warmup Iteration  22: 1802083.425 ops/s
# Warmup Iteration  23: 1805821.515 ops/s
# Warmup Iteration  24: 1802502.576 ops/s
# Warmup Iteration  25: 1809167.070 ops/s
# Warmup Iteration  26: 1809052.382 ops/s
# Warmup Iteration  27: 1807999.704 ops/s
# Warmup Iteration  28: 1804895.991 ops/s
# Warmup Iteration  29: 1808659.143 ops/s
# Warmup Iteration  30: 1807054.751 ops/s
Iteration   1: 1804944.547 ops/s
Iteration   2: 1808148.445 ops/s
Iteration   3: 1811141.703 ops/s
Iteration   4: 1808801.762 ops/s
Iteration   5: 1814829.688 ops/s
Iteration   6: 1806702.953 ops/s
Iteration   7: 1809321.679 ops/s
Iteration   8: 1805826.735 ops/s
Iteration   9: 1796692.931 ops/s
Iteration  10: 1806257.399 ops/s
Iteration  11: 1806504.623 ops/s
Iteration  12: 1805688.994 ops/s
Iteration  13: 1809063.335 ops/s
Iteration  14: 1806673.690 ops/s
Iteration  15: 1803115.673 ops/s
Iteration  16: 1800614.760 ops/s
Iteration  17: 1801296.677 ops/s
Iteration  18: 1801856.615 ops/s
Iteration  19: 1801209.826 ops/s
Iteration  20: 1795522.256 ops/s
Iteration  21: 1798866.183 ops/s
Iteration  22: 1802557.336 ops/s
Iteration  23: 1800765.293 ops/s
Iteration  24: 1808553.601 ops/s
Iteration  25: 1799834.206 ops/s
Iteration  26: 1798738.190 ops/s
Iteration  27: 1809820.140 ops/s
Iteration  28: 1803352.714 ops/s
Iteration  29: 1805453.366 ops/s
Iteration  30: 1801593.497 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toSortedBag_empty":
  1804458.294 ±(99.9%) 3021.655 ops/s [Average]
  (min, avg, max) = (1795522.256, 1804458.294, 1814829.688), stdev = 4522.671
  CI (99.9%): [1801436.639, 1807479.949] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_toSortedBag_empty  thrpt   30  1804458.294 ± 3021.655  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toSortedBag_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toSortedBag_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 444214.370 ops/s
# Warmup Iteration   2: 849694.800 ops/s
# Warmup Iteration   3: 980352.859 ops/s
# Warmup Iteration   4: 980957.556 ops/s
# Warmup Iteration   5: 988300.775 ops/s
# Warmup Iteration   6: 822524.285 ops/s
# Warmup Iteration   7: 984116.017 ops/s
# Warmup Iteration   8: 984326.871 ops/s
# Warmup Iteration   9: 987765.585 ops/s
# Warmup Iteration  10: 982947.535 ops/s
# Warmup Iteration  11: 985253.680 ops/s
# Warmup Iteration  12: 984862.809 ops/s
# Warmup Iteration  13: 980154.952 ops/s
# Warmup Iteration  14: 988978.467 ops/s
# Warmup Iteration  15: 987471.829 ops/s
# Warmup Iteration  16: 984484.647 ops/s
# Warmup Iteration  17: 986861.467 ops/s
# Warmup Iteration  18: 984793.302 ops/s
# Warmup Iteration  19: 986166.615 ops/s
# Warmup Iteration  20: 985682.910 ops/s
# Warmup Iteration  21: 987018.144 ops/s
# Warmup Iteration  22: 982884.437 ops/s
# Warmup Iteration  23: 985639.332 ops/s
# Warmup Iteration  24: 988191.585 ops/s
# Warmup Iteration  25: 985655.952 ops/s
# Warmup Iteration  26: 986618.037 ops/s
# Warmup Iteration  27: 987558.737 ops/s
# Warmup Iteration  28: 985512.610 ops/s
# Warmup Iteration  29: 987841.008 ops/s
# Warmup Iteration  30: 986183.309 ops/s
Iteration   1: 987725.334 ops/s
Iteration   2: 988893.940 ops/s
Iteration   3: 986603.218 ops/s
Iteration   4: 989898.204 ops/s
Iteration   5: 985395.040 ops/s
Iteration   6: 985925.682 ops/s
Iteration   7: 988043.474 ops/s
Iteration   8: 987218.825 ops/s
Iteration   9: 988547.450 ops/s
Iteration  10: 987790.421 ops/s
Iteration  11: 983035.555 ops/s
Iteration  12: 988978.801 ops/s
Iteration  13: 987733.026 ops/s
Iteration  14: 982732.746 ops/s
Iteration  15: 985486.634 ops/s
Iteration  16: 989409.790 ops/s
Iteration  17: 986079.920 ops/s
Iteration  18: 986992.474 ops/s
Iteration  19: 987875.157 ops/s
Iteration  20: 985321.796 ops/s
Iteration  21: 988130.632 ops/s
Iteration  22: 984610.192 ops/s
Iteration  23: 988221.237 ops/s
Iteration  24: 988671.589 ops/s
Iteration  25: 982886.965 ops/s
Iteration  26: 987385.348 ops/s
Iteration  27: 988244.102 ops/s
Iteration  28: 989709.705 ops/s
Iteration  29: 987757.678 ops/s
Iteration  30: 986646.734 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toSortedBag_natural_ordering":
  987065.056 ±(99.9%) 1296.853 ops/s [Average]
  (min, avg, max) = (982732.746, 987065.056, 989898.204), stdev = 1941.069
  CI (99.9%): [985768.203, 988361.909] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_toSortedBag_natural_ordering  thrpt   30  987065.056 ± 1296.853  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toSortedBag_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toSortedBag_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 497737.186 ops/s
# Warmup Iteration   2: 931696.142 ops/s
# Warmup Iteration   3: 1082192.257 ops/s
# Warmup Iteration   4: 1086119.833 ops/s
# Warmup Iteration   5: 1084610.851 ops/s
# Warmup Iteration   6: 907150.483 ops/s
# Warmup Iteration   7: 1086935.439 ops/s
# Warmup Iteration   8: 1085590.930 ops/s
# Warmup Iteration   9: 1084222.389 ops/s
# Warmup Iteration  10: 1086907.546 ops/s
# Warmup Iteration  11: 1088178.502 ops/s
# Warmup Iteration  12: 1086475.355 ops/s
# Warmup Iteration  13: 1083868.256 ops/s
# Warmup Iteration  14: 1085126.457 ops/s
# Warmup Iteration  15: 1084595.110 ops/s
# Warmup Iteration  16: 1084107.994 ops/s
# Warmup Iteration  17: 1090206.671 ops/s
# Warmup Iteration  18: 1083486.856 ops/s
# Warmup Iteration  19: 1087266.777 ops/s
# Warmup Iteration  20: 1082178.121 ops/s
# Warmup Iteration  21: 1084340.206 ops/s
# Warmup Iteration  22: 1085064.063 ops/s
# Warmup Iteration  23: 1083628.901 ops/s
# Warmup Iteration  24: 1084858.289 ops/s
# Warmup Iteration  25: 1088577.927 ops/s
# Warmup Iteration  26: 1085624.648 ops/s
# Warmup Iteration  27: 1088024.138 ops/s
# Warmup Iteration  28: 1085368.512 ops/s
# Warmup Iteration  29: 1084352.936 ops/s
# Warmup Iteration  30: 1086993.743 ops/s
Iteration   1: 1088172.531 ops/s
Iteration   2: 1087070.475 ops/s
Iteration   3: 1086964.629 ops/s
Iteration   4: 1075906.161 ops/s
Iteration   5: 1086824.499 ops/s
Iteration   6: 1088851.888 ops/s
Iteration   7: 1087167.277 ops/s
Iteration   8: 1086403.872 ops/s
Iteration   9: 1084639.608 ops/s
Iteration  10: 1087111.080 ops/s
Iteration  11: 1090621.503 ops/s
Iteration  12: 1079040.088 ops/s
Iteration  13: 1086160.129 ops/s
Iteration  14: 1089346.731 ops/s
Iteration  15: 1086891.471 ops/s
Iteration  16: 1091385.150 ops/s
Iteration  17: 1086144.914 ops/s
Iteration  18: 1094625.590 ops/s
Iteration  19: 1087474.606 ops/s
Iteration  20: 1087366.307 ops/s
Iteration  21: 1094046.360 ops/s
Iteration  22: 1080349.008 ops/s
Iteration  23: 1091898.700 ops/s
Iteration  24: 1085864.237 ops/s
Iteration  25: 1092278.916 ops/s
Iteration  26: 1092171.576 ops/s
Iteration  27: 1088334.628 ops/s
Iteration  28: 1094221.791 ops/s
Iteration  29: 1087459.610 ops/s
Iteration  30: 1091312.356 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toSortedBag_with_comparator":
  1087870.190 ±(99.9%) 2826.035 ops/s [Average]
  (min, avg, max) = (1075906.161, 1087870.190, 1094625.590), stdev = 4229.877
  CI (99.9%): [1085044.155, 1090696.225] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_toSortedBag_with_comparator  thrpt   30  1087870.190 ± 2826.035  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toSortedBag_with_null$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toSortedBag_with_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 449423.255 ops/s
# Warmup Iteration   2: 497078.781 ops/s
# Warmup Iteration   3: 622870.707 ops/s
# Warmup Iteration   4: 654784.867 ops/s
# Warmup Iteration   5: 653432.593 ops/s
# Warmup Iteration   6: 652714.433 ops/s
# Warmup Iteration   7: 654209.417 ops/s
# Warmup Iteration   8: 656355.851 ops/s
# Warmup Iteration   9: 653970.525 ops/s
# Warmup Iteration  10: 653216.451 ops/s
# Warmup Iteration  11: 653811.739 ops/s
# Warmup Iteration  12: 626581.928 ops/s
# Warmup Iteration  13: 570983.292 ops/s
# Warmup Iteration  14: 652455.111 ops/s
# Warmup Iteration  15: 654375.014 ops/s
# Warmup Iteration  16: 654412.269 ops/s
# Warmup Iteration  17: 682609.762 ops/s
# Warmup Iteration  18: 682788.693 ops/s
# Warmup Iteration  19: 680005.647 ops/s
# Warmup Iteration  20: 682166.556 ops/s
# Warmup Iteration  21: 678079.361 ops/s
# Warmup Iteration  22: 681237.716 ops/s
# Warmup Iteration  23: 681524.233 ops/s
# Warmup Iteration  24: 680916.317 ops/s
# Warmup Iteration  25: 680640.259 ops/s
# Warmup Iteration  26: 680540.579 ops/s
# Warmup Iteration  27: 680859.634 ops/s
# Warmup Iteration  28: 680397.238 ops/s
# Warmup Iteration  29: 681722.457 ops/s
# Warmup Iteration  30: 682850.565 ops/s
Iteration   1: 681197.492 ops/s
Iteration   2: 682209.010 ops/s
Iteration   3: 680536.195 ops/s
Iteration   4: 682680.019 ops/s
Iteration   5: 682762.451 ops/s
Iteration   6: 682733.234 ops/s
Iteration   7: 677581.205 ops/s
Iteration   8: 681391.713 ops/s
Iteration   9: 680932.868 ops/s
Iteration  10: 681502.298 ops/s
Iteration  11: 681377.524 ops/s
Iteration  12: 684362.442 ops/s
Iteration  13: 681626.443 ops/s
Iteration  14: 682093.362 ops/s
Iteration  15: 682542.048 ops/s
Iteration  16: 677907.191 ops/s
Iteration  17: 681296.623 ops/s
Iteration  18: 681528.342 ops/s
Iteration  19: 681908.000 ops/s
Iteration  20: 681846.757 ops/s
Iteration  21: 680443.699 ops/s
Iteration  22: 680070.402 ops/s
Iteration  23: 683930.661 ops/s
Iteration  24: 682789.477 ops/s
Iteration  25: 680258.892 ops/s
Iteration  26: 680802.480 ops/s
Iteration  27: 679929.955 ops/s
Iteration  28: 680385.147 ops/s
Iteration  29: 679961.254 ops/s
Iteration  30: 683638.619 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toSortedBag_with_null":
  681407.527 ±(99.9%) 1021.340 ops/s [Average]
  (min, avg, max) = (677581.205, 681407.527, 684362.442), stdev = 1528.694
  CI (99.9%): [680386.186, 682428.867] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_toSortedBag_with_null  thrpt   30  681407.527 ± 1021.340  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toSortedList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toSortedList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 25569613.891 ops/s
# Warmup Iteration   2: 51938428.488 ops/s
# Warmup Iteration   3: 44646023.737 ops/s
# Warmup Iteration   4: 52309007.954 ops/s
# Warmup Iteration   5: 52475533.407 ops/s
# Warmup Iteration   6: 52437252.254 ops/s
# Warmup Iteration   7: 52263374.240 ops/s
# Warmup Iteration   8: 52443921.734 ops/s
# Warmup Iteration   9: 52385997.516 ops/s
# Warmup Iteration  10: 52382946.286 ops/s
# Warmup Iteration  11: 52334230.621 ops/s
# Warmup Iteration  12: 52406375.374 ops/s
# Warmup Iteration  13: 52059187.315 ops/s
# Warmup Iteration  14: 52461676.235 ops/s
# Warmup Iteration  15: 52358124.081 ops/s
# Warmup Iteration  16: 52509535.524 ops/s
# Warmup Iteration  17: 52394006.419 ops/s
# Warmup Iteration  18: 52136496.411 ops/s
# Warmup Iteration  19: 52589903.440 ops/s
# Warmup Iteration  20: 52615832.332 ops/s
# Warmup Iteration  21: 52354711.065 ops/s
# Warmup Iteration  22: 52391020.289 ops/s
# Warmup Iteration  23: 52641401.173 ops/s
# Warmup Iteration  24: 52766797.159 ops/s
# Warmup Iteration  25: 52525139.388 ops/s
# Warmup Iteration  26: 52637169.237 ops/s
# Warmup Iteration  27: 52594594.324 ops/s
# Warmup Iteration  28: 52380911.301 ops/s
# Warmup Iteration  29: 52300223.941 ops/s
# Warmup Iteration  30: 52372507.038 ops/s
Iteration   1: 52603540.313 ops/s
Iteration   2: 52477021.408 ops/s
Iteration   3: 52577992.863 ops/s
Iteration   4: 52271950.024 ops/s
Iteration   5: 52487785.243 ops/s
Iteration   6: 52503015.661 ops/s
Iteration   7: 52338869.131 ops/s
Iteration   8: 52488252.529 ops/s
Iteration   9: 52596831.289 ops/s
Iteration  10: 52346024.765 ops/s
Iteration  11: 52537932.748 ops/s
Iteration  12: 52245190.435 ops/s
Iteration  13: 52458368.552 ops/s
Iteration  14: 52350427.309 ops/s
Iteration  15: 52229029.057 ops/s
Iteration  16: 52632975.773 ops/s
Iteration  17: 52459096.728 ops/s
Iteration  18: 52500767.234 ops/s
Iteration  19: 52537227.051 ops/s
Iteration  20: 52316335.000 ops/s
Iteration  21: 52587502.626 ops/s
Iteration  22: 52535632.851 ops/s
Iteration  23: 52612016.245 ops/s
Iteration  24: 52649863.969 ops/s
Iteration  25: 52240974.199 ops/s
Iteration  26: 52540102.713 ops/s
Iteration  27: 52603590.225 ops/s
Iteration  28: 52464057.939 ops/s
Iteration  29: 52436801.075 ops/s
Iteration  30: 52623570.441 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toSortedList":
  52475091.513 ±(99.9%) 85268.618 ops/s [Average]
  (min, avg, max) = (52229029.057, 52475091.513, 52649863.969), stdev = 127626.063
  CI (99.9%): [52389822.895, 52560360.131] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_toSortedList  thrpt   30  52475091.513 ± 85268.618  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toSortedListBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toSortedListBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 731624.909 ops/s
# Warmup Iteration   2: 1027623.032 ops/s
# Warmup Iteration   3: 1310571.645 ops/s
# Warmup Iteration   4: 1303656.521 ops/s
# Warmup Iteration   5: 1310676.298 ops/s
# Warmup Iteration   6: 1311333.851 ops/s
# Warmup Iteration   7: 1309797.219 ops/s
# Warmup Iteration   8: 1075852.616 ops/s
# Warmup Iteration   9: 1313242.578 ops/s
# Warmup Iteration  10: 1310613.106 ops/s
# Warmup Iteration  11: 1311423.782 ops/s
# Warmup Iteration  12: 1310931.943 ops/s
# Warmup Iteration  13: 1311542.305 ops/s
# Warmup Iteration  14: 1308142.511 ops/s
# Warmup Iteration  15: 1314876.510 ops/s
# Warmup Iteration  16: 1310998.861 ops/s
# Warmup Iteration  17: 1310751.016 ops/s
# Warmup Iteration  18: 1310763.809 ops/s
# Warmup Iteration  19: 1311863.303 ops/s
# Warmup Iteration  20: 1312832.821 ops/s
# Warmup Iteration  21: 1311994.763 ops/s
# Warmup Iteration  22: 1312554.671 ops/s
# Warmup Iteration  23: 1312315.513 ops/s
# Warmup Iteration  24: 1312094.500 ops/s
# Warmup Iteration  25: 1310595.300 ops/s
# Warmup Iteration  26: 1310932.617 ops/s
# Warmup Iteration  27: 1310377.554 ops/s
# Warmup Iteration  28: 1312557.464 ops/s
# Warmup Iteration  29: 1313179.253 ops/s
# Warmup Iteration  30: 1310780.656 ops/s
Iteration   1: 1312810.182 ops/s
Iteration   2: 1312437.765 ops/s
Iteration   3: 1311285.691 ops/s
Iteration   4: 1312453.861 ops/s
Iteration   5: 1314243.398 ops/s
Iteration   6: 1311195.575 ops/s
Iteration   7: 1311009.865 ops/s
Iteration   8: 1314059.233 ops/s
Iteration   9: 1312879.650 ops/s
Iteration  10: 1313088.577 ops/s
Iteration  11: 1309484.226 ops/s
Iteration  12: 1312260.742 ops/s
Iteration  13: 1307062.466 ops/s
Iteration  14: 1314053.159 ops/s
Iteration  15: 1308821.041 ops/s
Iteration  16: 1309788.728 ops/s
Iteration  17: 1315385.316 ops/s
Iteration  18: 1314811.164 ops/s
Iteration  19: 1307860.869 ops/s
Iteration  20: 1312117.952 ops/s
Iteration  21: 1308887.541 ops/s
Iteration  22: 1316088.242 ops/s
Iteration  23: 1315321.123 ops/s
Iteration  24: 1312684.833 ops/s
Iteration  25: 1311236.906 ops/s
Iteration  26: 1309301.056 ops/s
Iteration  27: 1315697.431 ops/s
Iteration  28: 1314058.243 ops/s
Iteration  29: 1306467.028 ops/s
Iteration  30: 1308624.874 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toSortedListBy":
  1311849.225 ±(99.9%) 1780.318 ops/s [Average]
  (min, avg, max) = (1306467.028, 1311849.225, 1316088.242), stdev = 2664.697
  CI (99.9%): [1310068.906, 1313629.543] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_toSortedListBy  thrpt   30  1311849.225 ± 1780.318  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toSortedListBy_with_null$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toSortedListBy_with_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 778956.394 ops/s
# Warmup Iteration   2: 1005761.616 ops/s
# Warmup Iteration   3: 1351554.184 ops/s
# Warmup Iteration   4: 1342618.299 ops/s
# Warmup Iteration   5: 1355888.659 ops/s
# Warmup Iteration   6: 1353984.081 ops/s
# Warmup Iteration   7: 1354026.300 ops/s
# Warmup Iteration   8: 1340467.923 ops/s
# Warmup Iteration   9: 1134908.177 ops/s
# Warmup Iteration  10: 1359112.979 ops/s
# Warmup Iteration  11: 1358010.315 ops/s
# Warmup Iteration  12: 1354535.652 ops/s
# Warmup Iteration  13: 1355958.965 ops/s
# Warmup Iteration  14: 1359098.652 ops/s
# Warmup Iteration  15: 1356970.541 ops/s
# Warmup Iteration  16: 1358501.625 ops/s
# Warmup Iteration  17: 1357800.183 ops/s
# Warmup Iteration  18: 1361486.111 ops/s
# Warmup Iteration  19: 1358038.144 ops/s
# Warmup Iteration  20: 1358176.879 ops/s
# Warmup Iteration  21: 1347925.198 ops/s
# Warmup Iteration  22: 1356017.388 ops/s
# Warmup Iteration  23: 1356616.938 ops/s
# Warmup Iteration  24: 1359857.586 ops/s
# Warmup Iteration  25: 1356341.774 ops/s
# Warmup Iteration  26: 1358767.709 ops/s
# Warmup Iteration  27: 1359493.016 ops/s
# Warmup Iteration  28: 1361040.421 ops/s
# Warmup Iteration  29: 1360307.162 ops/s
# Warmup Iteration  30: 1353970.578 ops/s
Iteration   1: 1360510.563 ops/s
Iteration   2: 1357070.916 ops/s
Iteration   3: 1360524.455 ops/s
Iteration   4: 1353640.026 ops/s
Iteration   5: 1359638.783 ops/s
Iteration   6: 1361876.562 ops/s
Iteration   7: 1360934.713 ops/s
Iteration   8: 1354465.011 ops/s
Iteration   9: 1358088.350 ops/s
Iteration  10: 1362952.105 ops/s
Iteration  11: 1358347.559 ops/s
Iteration  12: 1357078.718 ops/s
Iteration  13: 1354585.517 ops/s
Iteration  14: 1359191.986 ops/s
Iteration  15: 1354103.574 ops/s
Iteration  16: 1358732.968 ops/s
Iteration  17: 1359508.157 ops/s
Iteration  18: 1361220.330 ops/s
Iteration  19: 1359138.978 ops/s
Iteration  20: 1358230.635 ops/s
Iteration  21: 1360710.349 ops/s
Iteration  22: 1354921.407 ops/s
Iteration  23: 1358787.626 ops/s
Iteration  24: 1356282.318 ops/s
Iteration  25: 1359925.049 ops/s
Iteration  26: 1351316.643 ops/s
Iteration  27: 1359299.047 ops/s
Iteration  28: 1361621.391 ops/s
Iteration  29: 1361874.219 ops/s
Iteration  30: 1358183.687 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toSortedListBy_with_null":
  1358425.388 ±(99.9%) 1893.166 ops/s [Average]
  (min, avg, max) = (1351316.643, 1358425.388, 1362952.105), stdev = 2833.603
  CI (99.9%): [1356532.222, 1360318.554] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_toSortedListBy_with_null  thrpt   30  1358425.388 ± 1893.166  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toSortedList_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toSortedList_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 907029.633 ops/s
# Warmup Iteration   2: 2046635.693 ops/s
# Warmup Iteration   3: 2156580.688 ops/s
# Warmup Iteration   4: 1966107.302 ops/s
# Warmup Iteration   5: 1967401.326 ops/s
# Warmup Iteration   6: 2150679.504 ops/s
# Warmup Iteration   7: 2153864.396 ops/s
# Warmup Iteration   8: 2161028.251 ops/s
# Warmup Iteration   9: 2160099.648 ops/s
# Warmup Iteration  10: 2154300.372 ops/s
# Warmup Iteration  11: 2158652.903 ops/s
# Warmup Iteration  12: 2156517.906 ops/s
# Warmup Iteration  13: 2156428.094 ops/s
# Warmup Iteration  14: 2150661.017 ops/s
# Warmup Iteration  15: 2156969.513 ops/s
# Warmup Iteration  16: 2143584.769 ops/s
# Warmup Iteration  17: 2161309.010 ops/s
# Warmup Iteration  18: 2158485.783 ops/s
# Warmup Iteration  19: 2158469.989 ops/s
# Warmup Iteration  20: 2162024.273 ops/s
# Warmup Iteration  21: 2157508.700 ops/s
# Warmup Iteration  22: 2158200.565 ops/s
# Warmup Iteration  23: 2158693.984 ops/s
# Warmup Iteration  24: 2158509.338 ops/s
# Warmup Iteration  25: 2158680.911 ops/s
# Warmup Iteration  26: 2159495.011 ops/s
# Warmup Iteration  27: 2156228.863 ops/s
# Warmup Iteration  28: 2160806.299 ops/s
# Warmup Iteration  29: 2157263.209 ops/s
# Warmup Iteration  30: 2162315.846 ops/s
Iteration   1: 2160674.247 ops/s
Iteration   2: 2160593.596 ops/s
Iteration   3: 2158137.567 ops/s
Iteration   4: 2146044.943 ops/s
Iteration   5: 2155569.245 ops/s
Iteration   6: 2161140.993 ops/s
Iteration   7: 2155031.225 ops/s
Iteration   8: 2157954.831 ops/s
Iteration   9: 2157278.357 ops/s
Iteration  10: 2155953.031 ops/s
Iteration  11: 2165263.342 ops/s
Iteration  12: 2160745.559 ops/s
Iteration  13: 2158688.581 ops/s
Iteration  14: 2161309.371 ops/s
Iteration  15: 2161387.556 ops/s
Iteration  16: 2158597.398 ops/s
Iteration  17: 2142672.861 ops/s
Iteration  18: 2143753.794 ops/s
Iteration  19: 2158262.314 ops/s
Iteration  20: 2157806.397 ops/s
Iteration  21: 2162520.031 ops/s
Iteration  22: 2162126.142 ops/s
Iteration  23: 2156896.706 ops/s
Iteration  24: 2157710.080 ops/s
Iteration  25: 2158840.677 ops/s
Iteration  26: 2164910.196 ops/s
Iteration  27: 2158264.739 ops/s
Iteration  28: 2153353.525 ops/s
Iteration  29: 2160948.779 ops/s
Iteration  30: 2160761.529 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toSortedList_natural_ordering":
  2157773.254 ±(99.9%) 3577.109 ops/s [Average]
  (min, avg, max) = (2142672.861, 2157773.254, 2165263.342), stdev = 5354.049
  CI (99.9%): [2154196.144, 2161350.363] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_toSortedList_natural_ordering  thrpt   30  2157773.254 ± 3577.109  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toSortedList_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toSortedList_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1324776.971 ops/s
# Warmup Iteration   2: 2644632.466 ops/s
# Warmup Iteration   3: 2895000.468 ops/s
# Warmup Iteration   4: 2916302.334 ops/s
# Warmup Iteration   5: 2389824.161 ops/s
# Warmup Iteration   6: 2919640.374 ops/s
# Warmup Iteration   7: 2918315.626 ops/s
# Warmup Iteration   8: 2918449.589 ops/s
# Warmup Iteration   9: 2903560.673 ops/s
# Warmup Iteration  10: 2917866.110 ops/s
# Warmup Iteration  11: 2911492.587 ops/s
# Warmup Iteration  12: 2911808.042 ops/s
# Warmup Iteration  13: 2916525.675 ops/s
# Warmup Iteration  14: 2917471.003 ops/s
# Warmup Iteration  15: 2918350.215 ops/s
# Warmup Iteration  16: 2912216.866 ops/s
# Warmup Iteration  17: 2915828.151 ops/s
# Warmup Iteration  18: 2917411.991 ops/s
# Warmup Iteration  19: 2914981.946 ops/s
# Warmup Iteration  20: 2908490.207 ops/s
# Warmup Iteration  21: 2918958.634 ops/s
# Warmup Iteration  22: 2917147.085 ops/s
# Warmup Iteration  23: 2917824.209 ops/s
# Warmup Iteration  24: 2907809.637 ops/s
# Warmup Iteration  25: 2907072.617 ops/s
# Warmup Iteration  26: 2924312.585 ops/s
# Warmup Iteration  27: 2904589.200 ops/s
# Warmup Iteration  28: 2915978.925 ops/s
# Warmup Iteration  29: 2910003.549 ops/s
# Warmup Iteration  30: 2919544.965 ops/s
Iteration   1: 2918226.577 ops/s
Iteration   2: 2906561.550 ops/s
Iteration   3: 2920509.463 ops/s
Iteration   4: 2917161.534 ops/s
Iteration   5: 2917451.944 ops/s
Iteration   6: 2918936.937 ops/s
Iteration   7: 2923290.744 ops/s
Iteration   8: 2913508.893 ops/s
Iteration   9: 2920795.259 ops/s
Iteration  10: 2924098.069 ops/s
Iteration  11: 2920518.767 ops/s
Iteration  12: 2914353.567 ops/s
Iteration  13: 2920045.787 ops/s
Iteration  14: 2913309.068 ops/s
Iteration  15: 2910446.391 ops/s
Iteration  16: 2915493.594 ops/s
Iteration  17: 2905573.884 ops/s
Iteration  18: 2920220.863 ops/s
Iteration  19: 2915209.159 ops/s
Iteration  20: 2907300.264 ops/s
Iteration  21: 2925221.426 ops/s
Iteration  22: 2917472.942 ops/s
Iteration  23: 2924013.305 ops/s
Iteration  24: 2900519.487 ops/s
Iteration  25: 2903785.730 ops/s
Iteration  26: 2923862.150 ops/s
Iteration  27: 2915022.292 ops/s
Iteration  28: 2922504.089 ops/s
Iteration  29: 2916132.387 ops/s
Iteration  30: 2912403.229 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toSortedList_with_comparator":
  2916131.645 ±(99.9%) 4320.653 ops/s [Average]
  (min, avg, max) = (2900519.487, 2916131.645, 2925221.426), stdev = 6466.950
  CI (99.9%): [2911810.993, 2920452.298] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_toSortedList_with_comparator  thrpt   30  2916131.645 ± 4320.653  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toSortedList_with_null$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toSortedList_with_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1025036.243 ops/s
# Warmup Iteration   2: 1376119.602 ops/s
# Warmup Iteration   3: 1814604.633 ops/s
# Warmup Iteration   4: 1803318.362 ops/s
# Warmup Iteration   5: 1817703.018 ops/s
# Warmup Iteration   6: 1816852.132 ops/s
# Warmup Iteration   7: 1811283.649 ops/s
# Warmup Iteration   8: 1481895.221 ops/s
# Warmup Iteration   9: 1816371.686 ops/s
# Warmup Iteration  10: 1806998.480 ops/s
# Warmup Iteration  11: 1814942.232 ops/s
# Warmup Iteration  12: 1813295.700 ops/s
# Warmup Iteration  13: 1812500.829 ops/s
# Warmup Iteration  14: 1815079.302 ops/s
# Warmup Iteration  15: 1806503.196 ops/s
# Warmup Iteration  16: 1813311.784 ops/s
# Warmup Iteration  17: 1819163.897 ops/s
# Warmup Iteration  18: 1815162.561 ops/s
# Warmup Iteration  19: 1819242.590 ops/s
# Warmup Iteration  20: 1818411.676 ops/s
# Warmup Iteration  21: 1816896.409 ops/s
# Warmup Iteration  22: 1817496.841 ops/s
# Warmup Iteration  23: 1814866.940 ops/s
# Warmup Iteration  24: 1817290.703 ops/s
# Warmup Iteration  25: 1817063.878 ops/s
# Warmup Iteration  26: 1814790.512 ops/s
# Warmup Iteration  27: 1815222.128 ops/s
# Warmup Iteration  28: 1816081.971 ops/s
# Warmup Iteration  29: 1817911.473 ops/s
# Warmup Iteration  30: 1817362.552 ops/s
Iteration   1: 1815405.087 ops/s
Iteration   2: 1817431.624 ops/s
Iteration   3: 1811357.151 ops/s
Iteration   4: 1814890.823 ops/s
Iteration   5: 1817586.817 ops/s
Iteration   6: 1816889.444 ops/s
Iteration   7: 1812976.723 ops/s
Iteration   8: 1811802.012 ops/s
Iteration   9: 1814325.466 ops/s
Iteration  10: 1818603.540 ops/s
Iteration  11: 1805658.165 ops/s
Iteration  12: 1817400.156 ops/s
Iteration  13: 1809680.158 ops/s
Iteration  14: 1811538.614 ops/s
Iteration  15: 1817946.079 ops/s
Iteration  16: 1818591.699 ops/s
Iteration  17: 1817560.890 ops/s
Iteration  18: 1823525.080 ops/s
Iteration  19: 1824595.114 ops/s
Iteration  20: 1819423.998 ops/s
Iteration  21: 1817809.538 ops/s
Iteration  22: 1815552.988 ops/s
Iteration  23: 1817528.500 ops/s
Iteration  24: 1816673.071 ops/s
Iteration  25: 1815918.974 ops/s
Iteration  26: 1810159.840 ops/s
Iteration  27: 1816771.812 ops/s
Iteration  28: 1818600.811 ops/s
Iteration  29: 1821576.357 ops/s
Iteration  30: 1815606.487 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toSortedList_with_null":
  1816112.901 ±(99.9%) 2682.156 ops/s [Average]
  (min, avg, max) = (1805658.165, 1816112.901, 1824595.114), stdev = 4014.525
  CI (99.9%): [1813430.745, 1818795.056] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_toSortedList_with_null  thrpt   30  1816112.901 ± 2682.156  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toSortedMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toSortedMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3274375.892 ops/s
# Warmup Iteration   2: 5025988.132 ops/s
# Warmup Iteration   3: 5828670.019 ops/s
# Warmup Iteration   4: 5870855.030 ops/s
# Warmup Iteration   5: 5889012.875 ops/s
# Warmup Iteration   6: 5882436.330 ops/s
# Warmup Iteration   7: 4887332.580 ops/s
# Warmup Iteration   8: 5863537.260 ops/s
# Warmup Iteration   9: 5867393.432 ops/s
# Warmup Iteration  10: 5857143.423 ops/s
# Warmup Iteration  11: 5715124.086 ops/s
# Warmup Iteration  12: 5890568.207 ops/s
# Warmup Iteration  13: 5731878.398 ops/s
# Warmup Iteration  14: 5782802.576 ops/s
# Warmup Iteration  15: 5781533.741 ops/s
# Warmup Iteration  16: 5790412.612 ops/s
# Warmup Iteration  17: 5819296.836 ops/s
# Warmup Iteration  18: 5806953.563 ops/s
# Warmup Iteration  19: 5868875.764 ops/s
# Warmup Iteration  20: 5857335.879 ops/s
# Warmup Iteration  21: 5848928.358 ops/s
# Warmup Iteration  22: 5865805.850 ops/s
# Warmup Iteration  23: 5911981.159 ops/s
# Warmup Iteration  24: 5738212.920 ops/s
# Warmup Iteration  25: 5769752.450 ops/s
# Warmup Iteration  26: 5770014.669 ops/s
# Warmup Iteration  27: 5793522.768 ops/s
# Warmup Iteration  28: 5875821.192 ops/s
# Warmup Iteration  29: 5802332.661 ops/s
# Warmup Iteration  30: 5823242.667 ops/s
Iteration   1: 5770733.522 ops/s
Iteration   2: 5798835.705 ops/s
Iteration   3: 5868307.673 ops/s
Iteration   4: 5803871.035 ops/s
Iteration   5: 5885876.327 ops/s
Iteration   6: 5827844.490 ops/s
Iteration   7: 5902238.056 ops/s
Iteration   8: 5899751.614 ops/s
Iteration   9: 5910026.680 ops/s
Iteration  10: 5769676.838 ops/s
Iteration  11: 5728831.153 ops/s
Iteration  12: 5884414.716 ops/s
Iteration  13: 5770270.910 ops/s
Iteration  14: 5877923.874 ops/s
Iteration  15: 5719883.931 ops/s
Iteration  16: 5725804.009 ops/s
Iteration  17: 5824592.167 ops/s
Iteration  18: 5885806.362 ops/s
Iteration  19: 5852608.073 ops/s
Iteration  20: 5862894.586 ops/s
Iteration  21: 5736894.598 ops/s
Iteration  22: 5745623.631 ops/s
Iteration  23: 5887886.551 ops/s
Iteration  24: 5775283.659 ops/s
Iteration  25: 5872095.651 ops/s
Iteration  26: 5818779.137 ops/s
Iteration  27: 5848487.039 ops/s
Iteration  28: 5833732.646 ops/s
Iteration  29: 5880086.450 ops/s
Iteration  30: 5850701.638 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toSortedMap":
  5827325.424 ±(99.9%) 39966.792 ops/s [Average]
  (min, avg, max) = (5719883.931, 5827325.424, 5910026.680), stdev = 59820.417
  CI (99.9%): [5787358.632, 5867292.216] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_toSortedMap  thrpt   30  5827325.424 ± 39966.792  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toSortedMapBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toSortedMapBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1856492.308 ops/s
# Warmup Iteration   2: 2088276.487 ops/s
# Warmup Iteration   3: 2604427.914 ops/s
# Warmup Iteration   4: 2683983.832 ops/s
# Warmup Iteration   5: 2679926.212 ops/s
# Warmup Iteration   6: 2667552.540 ops/s
# Warmup Iteration   7: 2690276.947 ops/s
# Warmup Iteration   8: 2692091.285 ops/s
# Warmup Iteration   9: 2688643.726 ops/s
# Warmup Iteration  10: 2685609.808 ops/s
# Warmup Iteration  11: 2683005.346 ops/s
# Warmup Iteration  12: 2489859.902 ops/s
# Warmup Iteration  13: 2466833.897 ops/s
# Warmup Iteration  14: 2689865.767 ops/s
# Warmup Iteration  15: 2689022.859 ops/s
# Warmup Iteration  16: 2691882.631 ops/s
# Warmup Iteration  17: 2686728.276 ops/s
# Warmup Iteration  18: 2690414.261 ops/s
# Warmup Iteration  19: 2686535.463 ops/s
# Warmup Iteration  20: 2693574.243 ops/s
# Warmup Iteration  21: 2688289.063 ops/s
# Warmup Iteration  22: 2688210.951 ops/s
# Warmup Iteration  23: 2693089.246 ops/s
# Warmup Iteration  24: 2684507.350 ops/s
# Warmup Iteration  25: 2691742.072 ops/s
# Warmup Iteration  26: 2687795.573 ops/s
# Warmup Iteration  27: 2684810.963 ops/s
# Warmup Iteration  28: 2688289.714 ops/s
# Warmup Iteration  29: 2689199.180 ops/s
# Warmup Iteration  30: 2689535.283 ops/s
Iteration   1: 2681657.190 ops/s
Iteration   2: 2689893.779 ops/s
Iteration   3: 2693734.009 ops/s
Iteration   4: 2680998.477 ops/s
Iteration   5: 2691341.790 ops/s
Iteration   6: 2693723.875 ops/s
Iteration   7: 2692718.023 ops/s
Iteration   8: 2660866.529 ops/s
Iteration   9: 2689399.638 ops/s
Iteration  10: 2690714.713 ops/s
Iteration  11: 2691815.862 ops/s
Iteration  12: 2687285.142 ops/s
Iteration  13: 2691019.594 ops/s
Iteration  14: 2692873.443 ops/s
Iteration  15: 2690080.187 ops/s
Iteration  16: 2690026.233 ops/s
Iteration  17: 2689567.769 ops/s
Iteration  18: 2691435.889 ops/s
Iteration  19: 2688190.192 ops/s
Iteration  20: 2693484.576 ops/s
Iteration  21: 2689530.993 ops/s
Iteration  22: 2692231.419 ops/s
Iteration  23: 2691625.483 ops/s
Iteration  24: 2691761.453 ops/s
Iteration  25: 2688062.779 ops/s
Iteration  26: 2689127.923 ops/s
Iteration  27: 2691747.102 ops/s
Iteration  28: 2687813.847 ops/s
Iteration  29: 2688229.610 ops/s
Iteration  30: 2689321.506 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toSortedMapBy":
  2689009.301 ±(99.9%) 4062.734 ops/s [Average]
  (min, avg, max) = (2660866.529, 2689009.301, 2693734.009), stdev = 6080.909
  CI (99.9%): [2684946.567, 2693072.035] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_toSortedMapBy  thrpt   30  2689009.301 ± 4062.734  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toSortedMap_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toSortedMap_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3291030.473 ops/s
# Warmup Iteration   2: 5105684.733 ops/s
# Warmup Iteration   3: 5890912.937 ops/s
# Warmup Iteration   4: 5939486.200 ops/s
# Warmup Iteration   5: 5921102.869 ops/s
# Warmup Iteration   6: 5932440.775 ops/s
# Warmup Iteration   7: 4994589.867 ops/s
# Warmup Iteration   8: 5967750.663 ops/s
# Warmup Iteration   9: 5964150.205 ops/s
# Warmup Iteration  10: 5822375.135 ops/s
# Warmup Iteration  11: 5942844.655 ops/s
# Warmup Iteration  12: 5928456.969 ops/s
# Warmup Iteration  13: 5936671.168 ops/s
# Warmup Iteration  14: 5952186.975 ops/s
# Warmup Iteration  15: 5913204.531 ops/s
# Warmup Iteration  16: 5932343.086 ops/s
# Warmup Iteration  17: 5955506.651 ops/s
# Warmup Iteration  18: 5927864.024 ops/s
# Warmup Iteration  19: 5955843.281 ops/s
# Warmup Iteration  20: 5941424.729 ops/s
# Warmup Iteration  21: 5923636.824 ops/s
# Warmup Iteration  22: 5924932.875 ops/s
# Warmup Iteration  23: 5946131.492 ops/s
# Warmup Iteration  24: 5915535.700 ops/s
# Warmup Iteration  25: 5948567.239 ops/s
# Warmup Iteration  26: 5955792.893 ops/s
# Warmup Iteration  27: 5959786.895 ops/s
# Warmup Iteration  28: 5888399.890 ops/s
# Warmup Iteration  29: 5908763.203 ops/s
# Warmup Iteration  30: 5963364.325 ops/s
Iteration   1: 5958791.664 ops/s
Iteration   2: 5965820.329 ops/s
Iteration   3: 5960591.878 ops/s
Iteration   4: 5981053.701 ops/s
Iteration   5: 5918923.547 ops/s
Iteration   6: 5934004.533 ops/s
Iteration   7: 5919193.553 ops/s
Iteration   8: 5966675.008 ops/s
Iteration   9: 5952892.182 ops/s
Iteration  10: 5933809.145 ops/s
Iteration  11: 5936184.524 ops/s
Iteration  12: 5951934.402 ops/s
Iteration  13: 5905286.738 ops/s
Iteration  14: 5948273.646 ops/s
Iteration  15: 5981733.448 ops/s
Iteration  16: 5954988.483 ops/s
Iteration  17: 5911912.664 ops/s
Iteration  18: 5926114.837 ops/s
Iteration  19: 5947317.552 ops/s
Iteration  20: 5932241.161 ops/s
Iteration  21: 5879769.064 ops/s
Iteration  22: 5950419.089 ops/s
Iteration  23: 5906869.710 ops/s
Iteration  24: 5948443.457 ops/s
Iteration  25: 5891492.842 ops/s
Iteration  26: 5957811.586 ops/s
Iteration  27: 5948172.614 ops/s
Iteration  28: 5887773.176 ops/s
Iteration  29: 5924960.938 ops/s
Iteration  30: 5902433.977 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toSortedMap_with_comparator":
  5936196.315 ±(99.9%) 17988.993 ops/s [Average]
  (min, avg, max) = (5879769.064, 5936196.315, 5981733.448), stdev = 26925.080
  CI (99.9%): [5918207.322, 5954185.308] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_toSortedMap_with_comparator  thrpt   30  5936196.315 ± 17988.993  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmartoSortedSetBy$ ===
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toSortedSet_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toSortedSet_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 715350.122 ops/s
# Warmup Iteration   2: 1688014.134 ops/s
# Warmup Iteration   3: 1764181.375 ops/s
# Warmup Iteration   4: 1494404.200 ops/s
# Warmup Iteration   5: 1734146.691 ops/s
# Warmup Iteration   6: 1754874.055 ops/s
# Warmup Iteration   7: 1764817.694 ops/s
# Warmup Iteration   8: 1764912.900 ops/s
# Warmup Iteration   9: 1758191.884 ops/s
# Warmup Iteration  10: 1755519.751 ops/s
# Warmup Iteration  11: 1767102.325 ops/s
# Warmup Iteration  12: 1765472.314 ops/s
# Warmup Iteration  13: 1759828.285 ops/s
# Warmup Iteration  14: 1765633.232 ops/s
# Warmup Iteration  15: 1763220.451 ops/s
# Warmup Iteration  16: 1762565.019 ops/s
# Warmup Iteration  17: 1764874.104 ops/s
# Warmup Iteration  18: 1763076.802 ops/s
# Warmup Iteration  19: 1761071.320 ops/s
# Warmup Iteration  20: 1765882.858 ops/s
# Warmup Iteration  21: 1759695.823 ops/s
# Warmup Iteration  22: 1760951.179 ops/s
# Warmup Iteration  23: 1764061.329 ops/s
# Warmup Iteration  24: 1760917.713 ops/s
# Warmup Iteration  25: 1766256.986 ops/s
# Warmup Iteration  26: 1765726.576 ops/s
# Warmup Iteration  27: 1761462.864 ops/s
# Warmup Iteration  28: 1764007.745 ops/s
# Warmup Iteration  29: 1766296.526 ops/s
# Warmup Iteration  30: 1765548.678 ops/s
Iteration   1: 1763554.707 ops/s
Iteration   2: 1759239.259 ops/s
Iteration   3: 1764819.158 ops/s
Iteration   4: 1757765.383 ops/s
Iteration   5: 1762094.966 ops/s
Iteration   6: 1767992.167 ops/s
Iteration   7: 1758143.434 ops/s
Iteration   8: 1764726.887 ops/s
Iteration   9: 1765496.440 ops/s
Iteration  10: 1759440.051 ops/s
Iteration  11: 1761963.769 ops/s
Iteration  12: 1765178.863 ops/s
Iteration  13: 1762272.741 ops/s
Iteration  14: 1766174.697 ops/s
Iteration  15: 1772763.448 ops/s
Iteration  16: 1761322.375 ops/s
Iteration  17: 1762129.369 ops/s
Iteration  18: 1768189.335 ops/s
Iteration  19: 1767032.693 ops/s
Iteration  20: 1767687.118 ops/s
Iteration  21: 1759949.151 ops/s
Iteration  22: 1753641.532 ops/s
Iteration  23: 1756497.932 ops/s
Iteration  24: 1765254.704 ops/s
Iteration  25: 1766542.412 ops/s
Iteration  26: 1760891.214 ops/s
Iteration  27: 1760421.837 ops/s
Iteration  28: 1762248.260 ops/s
Iteration  29: 1764891.369 ops/s
Iteration  30: 1764405.122 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toSortedSet_natural_ordering":
  1763091.013 ±(99.9%) 2691.457 ops/s [Average]
  (min, avg, max) = (1753641.532, 1763091.013, 1772763.448), stdev = 4028.447
  CI (99.9%): [1760399.556, 1765782.470] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_toSortedSet_natural_ordering  thrpt   30  1763091.013 ± 2691.457  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toSortedSet_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toSortedSet_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 702973.248 ops/s
# Warmup Iteration   2: 1588156.738 ops/s
# Warmup Iteration   3: 1672754.081 ops/s
# Warmup Iteration   4: 1561832.522 ops/s
# Warmup Iteration   5: 1513545.577 ops/s
# Warmup Iteration   6: 1681251.039 ops/s
# Warmup Iteration   7: 1677606.481 ops/s
# Warmup Iteration   8: 1680797.567 ops/s
# Warmup Iteration   9: 1682062.240 ops/s
# Warmup Iteration  10: 1679870.161 ops/s
# Warmup Iteration  11: 1681568.302 ops/s
# Warmup Iteration  12: 1680592.696 ops/s
# Warmup Iteration  13: 1682273.453 ops/s
# Warmup Iteration  14: 1680746.042 ops/s
# Warmup Iteration  15: 1669086.492 ops/s
# Warmup Iteration  16: 1678583.363 ops/s
# Warmup Iteration  17: 1681059.648 ops/s
# Warmup Iteration  18: 1679298.696 ops/s
# Warmup Iteration  19: 1681442.565 ops/s
# Warmup Iteration  20: 1676998.468 ops/s
# Warmup Iteration  21: 1677603.146 ops/s
# Warmup Iteration  22: 1684181.802 ops/s
# Warmup Iteration  23: 1680462.709 ops/s
# Warmup Iteration  24: 1680798.639 ops/s
# Warmup Iteration  25: 1679782.232 ops/s
# Warmup Iteration  26: 1679277.390 ops/s
# Warmup Iteration  27: 1679891.965 ops/s
# Warmup Iteration  28: 1682662.875 ops/s
# Warmup Iteration  29: 1682150.246 ops/s
# Warmup Iteration  30: 1677212.126 ops/s
Iteration   1: 1677700.042 ops/s
Iteration   2: 1682182.156 ops/s
Iteration   3: 1684885.001 ops/s
Iteration   4: 1683246.836 ops/s
Iteration   5: 1677927.855 ops/s
Iteration   6: 1678270.678 ops/s
Iteration   7: 1677835.338 ops/s
Iteration   8: 1679959.534 ops/s
Iteration   9: 1684498.987 ops/s
Iteration  10: 1680780.012 ops/s
Iteration  11: 1679723.111 ops/s
Iteration  12: 1681035.890 ops/s
Iteration  13: 1672480.325 ops/s
Iteration  14: 1687992.488 ops/s
Iteration  15: 1680425.704 ops/s
Iteration  16: 1679747.187 ops/s
Iteration  17: 1681515.777 ops/s
Iteration  18: 1683531.996 ops/s
Iteration  19: 1683783.027 ops/s
Iteration  20: 1683712.442 ops/s
Iteration  21: 1682063.123 ops/s
Iteration  22: 1683047.067 ops/s
Iteration  23: 1678514.757 ops/s
Iteration  24: 1681096.111 ops/s
Iteration  25: 1674470.199 ops/s
Iteration  26: 1682986.035 ops/s
Iteration  27: 1681004.216 ops/s
Iteration  28: 1683563.948 ops/s
Iteration  29: 1676333.028 ops/s
Iteration  30: 1681742.677 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toSortedSet_with_comparator":
  1680868.518 ±(99.9%) 2170.159 ops/s [Average]
  (min, avg, max) = (1672480.325, 1680868.518, 1687992.488), stdev = 3248.192
  CI (99.9%): [1678698.359, 1683038.677] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_toSortedSet_with_comparator  thrpt   30  1680868.518 ± 2170.159  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toStringOfItemToCount$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toStringOfItemToCount

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 24613856.826 ops/s
# Warmup Iteration   2: 49934377.712 ops/s
# Warmup Iteration   3: 43483379.496 ops/s
# Warmup Iteration   4: 50257160.299 ops/s
# Warmup Iteration   5: 50682465.283 ops/s
# Warmup Iteration   6: 50740285.221 ops/s
# Warmup Iteration   7: 50906940.773 ops/s
# Warmup Iteration   8: 51109361.887 ops/s
# Warmup Iteration   9: 51196080.572 ops/s
# Warmup Iteration  10: 50818241.523 ops/s
# Warmup Iteration  11: 50894096.116 ops/s
# Warmup Iteration  12: 50931001.488 ops/s
# Warmup Iteration  13: 51133242.807 ops/s
# Warmup Iteration  14: 50921204.716 ops/s
# Warmup Iteration  15: 50816994.312 ops/s
# Warmup Iteration  16: 51020969.641 ops/s
# Warmup Iteration  17: 51393322.259 ops/s
# Warmup Iteration  18: 50761287.556 ops/s
# Warmup Iteration  19: 51116298.218 ops/s
# Warmup Iteration  20: 50229620.364 ops/s
# Warmup Iteration  21: 50694492.931 ops/s
# Warmup Iteration  22: 50705470.850 ops/s
# Warmup Iteration  23: 50569303.028 ops/s
# Warmup Iteration  24: 50650694.082 ops/s
# Warmup Iteration  25: 50610924.192 ops/s
# Warmup Iteration  26: 50323490.690 ops/s
# Warmup Iteration  27: 50055436.093 ops/s
# Warmup Iteration  28: 50073633.137 ops/s
# Warmup Iteration  29: 50443063.824 ops/s
# Warmup Iteration  30: 50693778.460 ops/s
Iteration   1: 50305650.679 ops/s
Iteration   2: 50155691.546 ops/s
Iteration   3: 50622906.065 ops/s
Iteration   4: 50283091.109 ops/s
Iteration   5: 50595599.026 ops/s
Iteration   6: 50259984.022 ops/s
Iteration   7: 49572757.390 ops/s
Iteration   8: 50831352.377 ops/s
Iteration   9: 50483344.092 ops/s
Iteration  10: 49766658.981 ops/s
Iteration  11: 50324953.604 ops/s
Iteration  12: 50364509.563 ops/s
Iteration  13: 49625159.903 ops/s
Iteration  14: 50345354.604 ops/s
Iteration  15: 50600122.887 ops/s
Iteration  16: 50417715.611 ops/s
Iteration  17: 50734637.869 ops/s
Iteration  18: 50827685.026 ops/s
Iteration  19: 50581062.418 ops/s
Iteration  20: 51085877.339 ops/s
Iteration  21: 50131343.361 ops/s
Iteration  22: 50112431.083 ops/s
Iteration  23: 49737839.547 ops/s
Iteration  24: 49585892.894 ops/s
Iteration  25: 50193492.631 ops/s
Iteration  26: 50036172.202 ops/s
Iteration  27: 49853813.439 ops/s
Iteration  28: 50083797.806 ops/s
Iteration  29: 50418390.299 ops/s
Iteration  30: 50725039.807 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_toStringOfItemToCount":
  50288744.239 ±(99.9%) 262628.345 ops/s [Average]
  (min, avg, max) = (49572757.390, 50288744.239, 51085877.339), stdev = 393089.773
  CI (99.9%): [50026115.894, 50551372.585] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score        Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_toStringOfItemToCount  thrpt   30  50288744.239 ± 262628.345  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_zip$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_zip

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3925808.267 ops/s
# Warmup Iteration   2: 8985699.837 ops/s
# Warmup Iteration   3: 7578536.530 ops/s
# Warmup Iteration   4: 8983237.053 ops/s
# Warmup Iteration   5: 8983887.846 ops/s
# Warmup Iteration   6: 8969219.034 ops/s
# Warmup Iteration   7: 9001081.028 ops/s
# Warmup Iteration   8: 8983254.425 ops/s
# Warmup Iteration   9: 8992895.701 ops/s
# Warmup Iteration  10: 9002419.125 ops/s
# Warmup Iteration  11: 8978238.556 ops/s
# Warmup Iteration  12: 8989229.517 ops/s
# Warmup Iteration  13: 9011929.735 ops/s
# Warmup Iteration  14: 9000367.715 ops/s
# Warmup Iteration  15: 8985224.101 ops/s
# Warmup Iteration  16: 8993321.765 ops/s
# Warmup Iteration  17: 8940122.557 ops/s
# Warmup Iteration  18: 8940625.082 ops/s
# Warmup Iteration  19: 8946308.153 ops/s
# Warmup Iteration  20: 8944116.646 ops/s
# Warmup Iteration  21: 8919422.108 ops/s
# Warmup Iteration  22: 8927308.533 ops/s
# Warmup Iteration  23: 8945100.757 ops/s
# Warmup Iteration  24: 8953836.100 ops/s
# Warmup Iteration  25: 8949614.105 ops/s
# Warmup Iteration  26: 8962137.120 ops/s
# Warmup Iteration  27: 8924363.690 ops/s
# Warmup Iteration  28: 8936222.360 ops/s
# Warmup Iteration  29: 8937622.342 ops/s
# Warmup Iteration  30: 8946004.520 ops/s
Iteration   1: 8962304.710 ops/s
Iteration   2: 8903209.932 ops/s
Iteration   3: 8955333.037 ops/s
Iteration   4: 8971730.897 ops/s
Iteration   5: 8912781.689 ops/s
Iteration   6: 8941318.428 ops/s
Iteration   7: 8946211.581 ops/s
Iteration   8: 8916244.636 ops/s
Iteration   9: 8975648.934 ops/s
Iteration  10: 8941832.503 ops/s
Iteration  11: 8939068.301 ops/s
Iteration  12: 8894842.142 ops/s
Iteration  13: 8897246.825 ops/s
Iteration  14: 8950416.245 ops/s
Iteration  15: 8955879.038 ops/s
Iteration  16: 8957262.743 ops/s
Iteration  17: 8964934.411 ops/s
Iteration  18: 8956291.534 ops/s
Iteration  19: 8967346.591 ops/s
Iteration  20: 8965324.323 ops/s
Iteration  21: 8883498.966 ops/s
Iteration  22: 8958556.603 ops/s
Iteration  23: 8939474.372 ops/s
Iteration  24: 8957913.912 ops/s
Iteration  25: 8936410.000 ops/s
Iteration  26: 8947491.623 ops/s
Iteration  27: 8940128.661 ops/s
Iteration  28: 8971793.966 ops/s
Iteration  29: 8922757.218 ops/s
Iteration  30: 8949483.950 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_zip":
  8942757.926 ±(99.9%) 16464.927 ops/s [Average]
  (min, avg, max) = (8883498.966, 8942757.926, 8975648.934), stdev = 24643.930
  CI (99.9%): [8926292.999, 8959222.853] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score       Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_zip  thrpt   30  8942757.926 ± 16464.927  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_zipWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_zipWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2988714.858 ops/s
# Warmup Iteration   2: 6822617.746 ops/s
# Warmup Iteration   3: 6868013.875 ops/s
# Warmup Iteration   4: 5770016.478 ops/s
# Warmup Iteration   5: 6862770.088 ops/s
# Warmup Iteration   6: 6853326.691 ops/s
# Warmup Iteration   7: 6873952.134 ops/s
# Warmup Iteration   8: 6859310.304 ops/s
# Warmup Iteration   9: 6872952.696 ops/s
# Warmup Iteration  10: 6862874.320 ops/s
# Warmup Iteration  11: 6857885.500 ops/s
# Warmup Iteration  12: 6843881.340 ops/s
# Warmup Iteration  13: 6863006.841 ops/s
# Warmup Iteration  14: 6849081.875 ops/s
# Warmup Iteration  15: 6844620.256 ops/s
# Warmup Iteration  16: 6865603.541 ops/s
# Warmup Iteration  17: 6893444.558 ops/s
# Warmup Iteration  18: 6898630.164 ops/s
# Warmup Iteration  19: 6874884.129 ops/s
# Warmup Iteration  20: 6887239.908 ops/s
# Warmup Iteration  21: 6902570.123 ops/s
# Warmup Iteration  22: 6890954.532 ops/s
# Warmup Iteration  23: 6890762.465 ops/s
# Warmup Iteration  24: 6880573.027 ops/s
# Warmup Iteration  25: 6905397.828 ops/s
# Warmup Iteration  26: 6887750.257 ops/s
# Warmup Iteration  27: 6882519.092 ops/s
# Warmup Iteration  28: 6908494.710 ops/s
# Warmup Iteration  29: 6882538.083 ops/s
# Warmup Iteration  30: 6893118.830 ops/s
Iteration   1: 6895037.168 ops/s
Iteration   2: 6904351.228 ops/s
Iteration   3: 6887805.208 ops/s
Iteration   4: 6898140.094 ops/s
Iteration   5: 6906929.398 ops/s
Iteration   6: 6878566.905 ops/s
Iteration   7: 6895393.781 ops/s
Iteration   8: 6886111.720 ops/s
Iteration   9: 6895409.592 ops/s
Iteration  10: 6904351.032 ops/s
Iteration  11: 6896695.446 ops/s
Iteration  12: 6899377.565 ops/s
Iteration  13: 6894401.385 ops/s
Iteration  14: 6904745.493 ops/s
Iteration  15: 6892797.030 ops/s
Iteration  16: 6894670.035 ops/s
Iteration  17: 6882079.392 ops/s
Iteration  18: 6904581.390 ops/s
Iteration  19: 6880351.357 ops/s
Iteration  20: 6873510.132 ops/s
Iteration  21: 6898054.981 ops/s
Iteration  22: 6891316.470 ops/s
Iteration  23: 6892104.428 ops/s
Iteration  24: 6880783.387 ops/s
Iteration  25: 6879541.096 ops/s
Iteration  26: 6899396.544 ops/s
Iteration  27: 6901803.576 ops/s
Iteration  28: 6901512.873 ops/s
Iteration  29: 6890747.762 ops/s
Iteration  30: 6889880.934 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableEmptyBagTest._Benchmark.benchmark_zipWithIndex":
  6893348.247 ±(99.9%) 5986.745 ops/s [Average]
  (min, avg, max) = (6873510.132, 6893348.247, 6906929.398), stdev = 8960.679
  CI (99.9%): [6887361.502, 6899334.992] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableEmptyBagTest._Benchmark.benchmark_zipWithIndex  thrpt   30  6893348.247 ± 5986.745  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 538590.281 ops/s
# Warmup Iteration   2: 620027.389 ops/s
# Warmup Iteration   3: 786575.733 ops/s
# Warmup Iteration   4: 789435.795 ops/s
# Warmup Iteration   5: 786703.338 ops/s
# Warmup Iteration   6: 788996.414 ops/s
# Warmup Iteration   7: 788185.931 ops/s
# Warmup Iteration   8: 789929.479 ops/s
# Warmup Iteration   9: 788459.142 ops/s
# Warmup Iteration  10: 655223.204 ops/s
# Warmup Iteration  11: 790589.136 ops/s
# Warmup Iteration  12: 790444.315 ops/s
# Warmup Iteration  13: 786437.032 ops/s
# Warmup Iteration  14: 785649.287 ops/s
# Warmup Iteration  15: 788646.207 ops/s
# Warmup Iteration  16: 789510.573 ops/s
# Warmup Iteration  17: 825419.560 ops/s
# Warmup Iteration  18: 826082.748 ops/s
# Warmup Iteration  19: 828005.823 ops/s
# Warmup Iteration  20: 825420.992 ops/s
# Warmup Iteration  21: 827551.529 ops/s
# Warmup Iteration  22: 824003.155 ops/s
# Warmup Iteration  23: 827782.532 ops/s
# Warmup Iteration  24: 827004.795 ops/s
# Warmup Iteration  25: 824354.508 ops/s
# Warmup Iteration  26: 826955.545 ops/s
# Warmup Iteration  27: 823995.257 ops/s
# Warmup Iteration  28: 825889.854 ops/s
# Warmup Iteration  29: 826113.988 ops/s
# Warmup Iteration  30: 826783.699 ops/s
Iteration   1: 826899.190 ops/s
Iteration   2: 828515.068 ops/s
Iteration   3: 828860.023 ops/s
Iteration   4: 825741.865 ops/s
Iteration   5: 828313.472 ops/s
Iteration   6: 825311.051 ops/s
Iteration   7: 826612.486 ops/s
Iteration   8: 826758.168 ops/s
Iteration   9: 824137.363 ops/s
Iteration  10: 823425.623 ops/s
Iteration  11: 828512.291 ops/s
Iteration  12: 823549.504 ops/s
Iteration  13: 826593.232 ops/s
Iteration  14: 827296.434 ops/s
Iteration  15: 828382.804 ops/s
Iteration  16: 823889.140 ops/s
Iteration  17: 828849.332 ops/s
Iteration  18: 826675.962 ops/s
Iteration  19: 825144.408 ops/s
Iteration  20: 828913.897 ops/s
Iteration  21: 826277.129 ops/s
Iteration  22: 825574.358 ops/s
Iteration  23: 822933.379 ops/s
Iteration  24: 826053.155 ops/s
Iteration  25: 824566.270 ops/s
Iteration  26: 828379.562 ops/s
Iteration  27: 821214.164 ops/s
Iteration  28: 821664.655 ops/s
Iteration  29: 828257.555 ops/s
Iteration  30: 827502.401 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_add":
  826160.131 ±(99.9%) 1469.021 ops/s [Average]
  (min, avg, max) = (821214.164, 826160.131, 828913.897), stdev = 2198.762
  CI (99.9%): [824691.111, 827629.152] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt       Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_add  thrpt   30  826160.131 ± 1469.021  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_addAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_addAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 455613.511 ops/s
# Warmup Iteration   2: 587640.679 ops/s
# Warmup Iteration   3: 735055.646 ops/s
# Warmup Iteration   4: 730672.182 ops/s
# Warmup Iteration   5: 735419.414 ops/s
# Warmup Iteration   6: 732160.766 ops/s
# Warmup Iteration   7: 734922.286 ops/s
# Warmup Iteration   8: 654068.812 ops/s
# Warmup Iteration   9: 694601.335 ops/s
# Warmup Iteration  10: 735807.930 ops/s
# Warmup Iteration  11: 734313.501 ops/s
# Warmup Iteration  12: 735004.122 ops/s
# Warmup Iteration  13: 736205.584 ops/s
# Warmup Iteration  14: 735153.003 ops/s
# Warmup Iteration  15: 736264.875 ops/s
# Warmup Iteration  16: 736354.508 ops/s
# Warmup Iteration  17: 766397.255 ops/s
# Warmup Iteration  18: 765708.185 ops/s
# Warmup Iteration  19: 766398.731 ops/s
# Warmup Iteration  20: 769953.506 ops/s
# Warmup Iteration  21: 768956.125 ops/s
# Warmup Iteration  22: 767207.508 ops/s
# Warmup Iteration  23: 765472.824 ops/s
# Warmup Iteration  24: 768932.056 ops/s
# Warmup Iteration  25: 767167.946 ops/s
# Warmup Iteration  26: 766346.908 ops/s
# Warmup Iteration  27: 767484.064 ops/s
# Warmup Iteration  28: 767391.956 ops/s
# Warmup Iteration  29: 765110.259 ops/s
# Warmup Iteration  30: 768082.053 ops/s
Iteration   1: 767612.512 ops/s
Iteration   2: 765779.592 ops/s
Iteration   3: 770070.167 ops/s
Iteration   4: 766215.715 ops/s
Iteration   5: 765241.059 ops/s
Iteration   6: 768431.195 ops/s
Iteration   7: 762563.379 ops/s
Iteration   8: 767091.242 ops/s
Iteration   9: 767492.575 ops/s
Iteration  10: 765880.972 ops/s
Iteration  11: 762015.056 ops/s
Iteration  12: 766209.740 ops/s
Iteration  13: 769121.888 ops/s
Iteration  14: 769003.575 ops/s
Iteration  15: 769907.638 ops/s
Iteration  16: 767044.278 ops/s
Iteration  17: 771169.292 ops/s
Iteration  18: 767903.161 ops/s
Iteration  19: 763682.258 ops/s
Iteration  20: 765814.809 ops/s
Iteration  21: 768461.015 ops/s
Iteration  22: 768414.440 ops/s
Iteration  23: 767923.913 ops/s
Iteration  24: 767991.738 ops/s
Iteration  25: 764805.544 ops/s
Iteration  26: 765867.635 ops/s
Iteration  27: 767283.692 ops/s
Iteration  28: 765587.548 ops/s
Iteration  29: 769811.895 ops/s
Iteration  30: 765025.825 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_addAll":
  766980.778 ±(99.9%) 1453.375 ops/s [Average]
  (min, avg, max) = (762015.056, 766980.778, 771169.292), stdev = 2175.343
  CI (99.9%): [765527.404, 768434.153] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_addAll  thrpt   30  766980.778 ± 1453.375  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_aggregateByMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_aggregateByMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 828916.010 ops/s
# Warmup Iteration   2: 1750562.652 ops/s
# Warmup Iteration   3: 1843071.325 ops/s
# Warmup Iteration   4: 1852315.019 ops/s
# Warmup Iteration   5: 1537116.624 ops/s
# Warmup Iteration   6: 1854422.223 ops/s
# Warmup Iteration   7: 1856661.434 ops/s
# Warmup Iteration   8: 1860963.612 ops/s
# Warmup Iteration   9: 1858715.439 ops/s
# Warmup Iteration  10: 1854254.487 ops/s
# Warmup Iteration  11: 1864093.599 ops/s
# Warmup Iteration  12: 1858154.828 ops/s
# Warmup Iteration  13: 1860004.190 ops/s
# Warmup Iteration  14: 1856298.021 ops/s
# Warmup Iteration  15: 1854294.494 ops/s
# Warmup Iteration  16: 1855352.567 ops/s
# Warmup Iteration  17: 1844372.233 ops/s
# Warmup Iteration  18: 1836360.084 ops/s
# Warmup Iteration  19: 1848732.888 ops/s
# Warmup Iteration  20: 1849791.527 ops/s
# Warmup Iteration  21: 1842540.915 ops/s
# Warmup Iteration  22: 1844548.903 ops/s
# Warmup Iteration  23: 1844531.401 ops/s
# Warmup Iteration  24: 1834370.898 ops/s
# Warmup Iteration  25: 1847164.799 ops/s
# Warmup Iteration  26: 1843714.325 ops/s
# Warmup Iteration  27: 1836261.987 ops/s
# Warmup Iteration  28: 1848845.715 ops/s
# Warmup Iteration  29: 1839797.717 ops/s
# Warmup Iteration  30: 1848725.993 ops/s
Iteration   1: 1850488.168 ops/s
Iteration   2: 1827434.437 ops/s
Iteration   3: 1843535.070 ops/s
Iteration   4: 1836906.218 ops/s
Iteration   5: 1835192.899 ops/s
Iteration   6: 1854886.592 ops/s
Iteration   7: 1843713.803 ops/s
Iteration   8: 1863859.969 ops/s
Iteration   9: 1855985.836 ops/s
Iteration  10: 1847390.528 ops/s
Iteration  11: 1844342.534 ops/s
Iteration  12: 1850128.441 ops/s
Iteration  13: 1850299.302 ops/s
Iteration  14: 1821486.986 ops/s
Iteration  15: 1849224.412 ops/s
Iteration  16: 1848042.849 ops/s
Iteration  17: 1836650.639 ops/s
Iteration  18: 1843748.571 ops/s
Iteration  19: 1844055.634 ops/s
Iteration  20: 1845109.687 ops/s
Iteration  21: 1852781.907 ops/s
Iteration  22: 1837348.371 ops/s
Iteration  23: 1842245.117 ops/s
Iteration  24: 1841525.059 ops/s
Iteration  25: 1842880.077 ops/s
Iteration  26: 1846771.059 ops/s
Iteration  27: 1859824.922 ops/s
Iteration  28: 1833189.228 ops/s
Iteration  29: 1843100.462 ops/s
Iteration  30: 1832930.362 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_aggregateByMutating":
  1844169.305 ±(99.9%) 6109.797 ops/s [Average]
  (min, avg, max) = (1821486.986, 1844169.305, 1863859.969), stdev = 9144.858
  CI (99.9%): [1838059.507, 1850279.102] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_aggregateByMutating  thrpt   30  1844169.305 ± 6109.797  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_aggregateByNonMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_aggregateByNonMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 650221.966 ops/s
# Warmup Iteration   2: 1218276.302 ops/s
# Warmup Iteration   3: 1343609.753 ops/s
# Warmup Iteration   4: 1355602.553 ops/s
# Warmup Iteration   5: 1210265.902 ops/s
# Warmup Iteration   6: 1262182.784 ops/s
# Warmup Iteration   7: 1354685.502 ops/s
# Warmup Iteration   8: 1353762.637 ops/s
# Warmup Iteration   9: 1348555.945 ops/s
# Warmup Iteration  10: 1344099.514 ops/s
# Warmup Iteration  11: 1350144.042 ops/s
# Warmup Iteration  12: 1350518.522 ops/s
# Warmup Iteration  13: 1344216.623 ops/s
# Warmup Iteration  14: 1348843.278 ops/s
# Warmup Iteration  15: 1354510.923 ops/s
# Warmup Iteration  16: 1354259.796 ops/s
# Warmup Iteration  17: 1358381.508 ops/s
# Warmup Iteration  18: 1353948.830 ops/s
# Warmup Iteration  19: 1352672.089 ops/s
# Warmup Iteration  20: 1356394.182 ops/s
# Warmup Iteration  21: 1355902.141 ops/s
# Warmup Iteration  22: 1352825.181 ops/s
# Warmup Iteration  23: 1351894.396 ops/s
# Warmup Iteration  24: 1351987.295 ops/s
# Warmup Iteration  25: 1351926.864 ops/s
# Warmup Iteration  26: 1358236.618 ops/s
# Warmup Iteration  27: 1356142.361 ops/s
# Warmup Iteration  28: 1354849.146 ops/s
# Warmup Iteration  29: 1357584.486 ops/s
# Warmup Iteration  30: 1350330.064 ops/s
Iteration   1: 1358608.743 ops/s
Iteration   2: 1354816.645 ops/s
Iteration   3: 1352087.606 ops/s
Iteration   4: 1353482.721 ops/s
Iteration   5: 1357125.595 ops/s
Iteration   6: 1350559.680 ops/s
Iteration   7: 1349975.478 ops/s
Iteration   8: 1355819.096 ops/s
Iteration   9: 1354651.757 ops/s
Iteration  10: 1354149.521 ops/s
Iteration  11: 1352482.871 ops/s
Iteration  12: 1352484.845 ops/s
Iteration  13: 1350699.065 ops/s
Iteration  14: 1359678.522 ops/s
Iteration  15: 1351400.504 ops/s
Iteration  16: 1359069.421 ops/s
Iteration  17: 1357032.946 ops/s
Iteration  18: 1349811.985 ops/s
Iteration  19: 1356488.597 ops/s
Iteration  20: 1350792.796 ops/s
Iteration  21: 1346896.912 ops/s
Iteration  22: 1351505.031 ops/s
Iteration  23: 1353846.372 ops/s
Iteration  24: 1351737.081 ops/s
Iteration  25: 1356094.996 ops/s
Iteration  26: 1349490.238 ops/s
Iteration  27: 1357253.568 ops/s
Iteration  28: 1350595.057 ops/s
Iteration  29: 1357045.501 ops/s
Iteration  30: 1361195.525 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_aggregateByNonMutating":
  1353895.956 ±(99.9%) 2354.822 ops/s [Average]
  (min, avg, max) = (1346896.912, 1353895.956, 1361195.525), stdev = 3524.588
  CI (99.9%): [1351541.133, 1356250.778] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_aggregateByNonMutating  thrpt   30  1353895.956 ± 2354.822  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 675510.840 ops/s
# Warmup Iteration   2: 1180885.765 ops/s
# Warmup Iteration   3: 1355260.911 ops/s
# Warmup Iteration   4: 1362266.422 ops/s
# Warmup Iteration   5: 1364780.595 ops/s
# Warmup Iteration   6: 1112922.898 ops/s
# Warmup Iteration   7: 1366600.856 ops/s
# Warmup Iteration   8: 1365606.717 ops/s
# Warmup Iteration   9: 1363200.987 ops/s
# Warmup Iteration  10: 1364079.191 ops/s
# Warmup Iteration  11: 1366757.558 ops/s
# Warmup Iteration  12: 1364137.097 ops/s
# Warmup Iteration  13: 1361209.559 ops/s
# Warmup Iteration  14: 1366512.986 ops/s
# Warmup Iteration  15: 1365399.724 ops/s
# Warmup Iteration  16: 1364369.501 ops/s
# Warmup Iteration  17: 1355841.408 ops/s
# Warmup Iteration  18: 1355393.930 ops/s
# Warmup Iteration  19: 1360389.111 ops/s
# Warmup Iteration  20: 1358238.630 ops/s
# Warmup Iteration  21: 1357321.511 ops/s
# Warmup Iteration  22: 1358778.254 ops/s
# Warmup Iteration  23: 1360258.812 ops/s
# Warmup Iteration  24: 1360034.953 ops/s
# Warmup Iteration  25: 1359955.899 ops/s
# Warmup Iteration  26: 1361764.997 ops/s
# Warmup Iteration  27: 1360730.357 ops/s
# Warmup Iteration  28: 1360306.964 ops/s
# Warmup Iteration  29: 1360086.461 ops/s
# Warmup Iteration  30: 1361737.214 ops/s
Iteration   1: 1359013.806 ops/s
Iteration   2: 1363926.612 ops/s
Iteration   3: 1356265.747 ops/s
Iteration   4: 1360398.795 ops/s
Iteration   5: 1361354.099 ops/s
Iteration   6: 1358533.660 ops/s
Iteration   7: 1363270.989 ops/s
Iteration   8: 1358408.595 ops/s
Iteration   9: 1362792.943 ops/s
Iteration  10: 1356634.712 ops/s
Iteration  11: 1358648.914 ops/s
Iteration  12: 1355656.655 ops/s
Iteration  13: 1355226.157 ops/s
Iteration  14: 1362955.955 ops/s
Iteration  15: 1358583.478 ops/s
Iteration  16: 1362395.479 ops/s
Iteration  17: 1360788.787 ops/s
Iteration  18: 1364140.253 ops/s
Iteration  19: 1357329.014 ops/s
Iteration  20: 1357404.286 ops/s
Iteration  21: 1357185.291 ops/s
Iteration  22: 1356503.569 ops/s
Iteration  23: 1365426.230 ops/s
Iteration  24: 1353733.602 ops/s
Iteration  25: 1362695.722 ops/s
Iteration  26: 1348602.845 ops/s
Iteration  27: 1360083.361 ops/s
Iteration  28: 1362899.329 ops/s
Iteration  29: 1355590.887 ops/s
Iteration  30: 1362687.241 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_allSatisfy":
  1359304.567 ±(99.9%) 2496.834 ops/s [Average]
  (min, avg, max) = (1348602.845, 1359304.567, 1365426.230), stdev = 3737.144
  CI (99.9%): [1356807.733, 1361801.401] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_allSatisfy  thrpt   30  1359304.567 ± 2496.834  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_allSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_allSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1142536.263 ops/s
# Warmup Iteration   2: 2015862.997 ops/s
# Warmup Iteration   3: 2313215.282 ops/s
# Warmup Iteration   4: 2322013.930 ops/s
# Warmup Iteration   5: 2299147.637 ops/s
# Warmup Iteration   6: 1926690.441 ops/s
# Warmup Iteration   7: 2321739.177 ops/s
# Warmup Iteration   8: 2325043.126 ops/s
# Warmup Iteration   9: 2324264.553 ops/s
# Warmup Iteration  10: 2325672.127 ops/s
# Warmup Iteration  11: 2327544.723 ops/s
# Warmup Iteration  12: 2328199.712 ops/s
# Warmup Iteration  13: 2320734.997 ops/s
# Warmup Iteration  14: 2326833.392 ops/s
# Warmup Iteration  15: 2326257.447 ops/s
# Warmup Iteration  16: 2325749.655 ops/s
# Warmup Iteration  17: 2321570.571 ops/s
# Warmup Iteration  18: 2319493.710 ops/s
# Warmup Iteration  19: 2322240.564 ops/s
# Warmup Iteration  20: 2326272.964 ops/s
# Warmup Iteration  21: 2329811.464 ops/s
# Warmup Iteration  22: 2318909.274 ops/s
# Warmup Iteration  23: 2324983.440 ops/s
# Warmup Iteration  24: 2324987.927 ops/s
# Warmup Iteration  25: 2326025.684 ops/s
# Warmup Iteration  26: 2323388.147 ops/s
# Warmup Iteration  27: 2320781.102 ops/s
# Warmup Iteration  28: 2318639.679 ops/s
# Warmup Iteration  29: 2325967.399 ops/s
# Warmup Iteration  30: 2329553.930 ops/s
Iteration   1: 2325880.867 ops/s
Iteration   2: 2330084.571 ops/s
Iteration   3: 2323907.566 ops/s
Iteration   4: 2328816.140 ops/s
Iteration   5: 2325162.271 ops/s
Iteration   6: 2326307.060 ops/s
Iteration   7: 2327179.119 ops/s
Iteration   8: 2325036.855 ops/s
Iteration   9: 2323284.152 ops/s
Iteration  10: 2325013.066 ops/s
Iteration  11: 2324855.941 ops/s
Iteration  12: 2325951.483 ops/s
Iteration  13: 2327456.414 ops/s
Iteration  14: 2331559.862 ops/s
Iteration  15: 2327885.126 ops/s
Iteration  16: 2325020.591 ops/s
Iteration  17: 2325325.010 ops/s
Iteration  18: 2324004.838 ops/s
Iteration  19: 2315807.193 ops/s
Iteration  20: 2324485.487 ops/s
Iteration  21: 2324761.284 ops/s
Iteration  22: 2327355.236 ops/s
Iteration  23: 2324672.939 ops/s
Iteration  24: 2326382.963 ops/s
Iteration  25: 2323743.533 ops/s
Iteration  26: 2329501.099 ops/s
Iteration  27: 2329994.393 ops/s
Iteration  28: 2317289.178 ops/s
Iteration  29: 2329225.903 ops/s
Iteration  30: 2325683.764 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_allSatisfyWith":
  2325721.130 ±(99.9%) 2193.492 ops/s [Average]
  (min, avg, max) = (2315807.193, 2325721.130, 2331559.862), stdev = 3283.116
  CI (99.9%): [2323527.638, 2327914.622] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_allSatisfyWith  thrpt   30  2325721.130 ± 2193.492  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_allSatisfyWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_allSatisfyWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1628019.482 ops/s
# Warmup Iteration   2: 2865569.570 ops/s
# Warmup Iteration   3: 3274943.872 ops/s
# Warmup Iteration   4: 3286344.708 ops/s
# Warmup Iteration   5: 3277530.130 ops/s
# Warmup Iteration   6: 2715184.734 ops/s
# Warmup Iteration   7: 3299029.451 ops/s
# Warmup Iteration   8: 3291507.910 ops/s
# Warmup Iteration   9: 3291352.398 ops/s
# Warmup Iteration  10: 3281611.775 ops/s
# Warmup Iteration  11: 3294585.209 ops/s
# Warmup Iteration  12: 3289969.786 ops/s
# Warmup Iteration  13: 3292791.360 ops/s
# Warmup Iteration  14: 3298961.241 ops/s
# Warmup Iteration  15: 3289591.370 ops/s
# Warmup Iteration  16: 3291538.488 ops/s
# Warmup Iteration  17: 3302582.532 ops/s
# Warmup Iteration  18: 3287964.612 ops/s
# Warmup Iteration  19: 3307348.197 ops/s
# Warmup Iteration  20: 3283178.179 ops/s
# Warmup Iteration  21: 3281290.829 ops/s
# Warmup Iteration  22: 3290458.598 ops/s
# Warmup Iteration  23: 3296227.269 ops/s
# Warmup Iteration  24: 3295911.371 ops/s
# Warmup Iteration  25: 3295372.062 ops/s
# Warmup Iteration  26: 3286569.650 ops/s
# Warmup Iteration  27: 3285836.996 ops/s
# Warmup Iteration  28: 3294353.515 ops/s
# Warmup Iteration  29: 3296041.452 ops/s
# Warmup Iteration  30: 3290686.869 ops/s
Iteration   1: 3293271.768 ops/s
Iteration   2: 3298499.008 ops/s
Iteration   3: 3279632.536 ops/s
Iteration   4: 3305668.414 ops/s
Iteration   5: 3287591.433 ops/s
Iteration   6: 3303838.509 ops/s
Iteration   7: 3290243.838 ops/s
Iteration   8: 3286747.084 ops/s
Iteration   9: 3284280.635 ops/s
Iteration  10: 3281343.332 ops/s
Iteration  11: 3299226.015 ops/s
Iteration  12: 3297256.037 ops/s
Iteration  13: 3273193.202 ops/s
Iteration  14: 3294971.770 ops/s
Iteration  15: 3295845.930 ops/s
Iteration  16: 3284939.553 ops/s
Iteration  17: 3282244.327 ops/s
Iteration  18: 3294235.582 ops/s
Iteration  19: 3294319.058 ops/s
Iteration  20: 3278311.418 ops/s
Iteration  21: 3296724.244 ops/s
Iteration  22: 3283466.371 ops/s
Iteration  23: 3290483.581 ops/s
Iteration  24: 3288911.679 ops/s
Iteration  25: 3297033.498 ops/s
Iteration  26: 3279547.387 ops/s
Iteration  27: 3294627.246 ops/s
Iteration  28: 3298940.985 ops/s
Iteration  29: 3296473.121 ops/s
Iteration  30: 3292349.457 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_allSatisfyWithOccurrences":
  3290807.234 ±(99.9%) 5360.572 ops/s [Average]
  (min, avg, max) = (3273193.202, 3290807.234, 3305668.414), stdev = 8023.453
  CI (99.9%): [3285446.662, 3296167.806] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_allSatisfyWithOccurrences  thrpt   30  3290807.234 ± 5360.572  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 677780.023 ops/s
# Warmup Iteration   2: 1193571.706 ops/s
# Warmup Iteration   3: 1368404.719 ops/s
# Warmup Iteration   4: 1374303.697 ops/s
# Warmup Iteration   5: 1375696.447 ops/s
# Warmup Iteration   6: 1131645.342 ops/s
# Warmup Iteration   7: 1376348.798 ops/s
# Warmup Iteration   8: 1375534.390 ops/s
# Warmup Iteration   9: 1376986.567 ops/s
# Warmup Iteration  10: 1376274.260 ops/s
# Warmup Iteration  11: 1371789.344 ops/s
# Warmup Iteration  12: 1377364.689 ops/s
# Warmup Iteration  13: 1369865.404 ops/s
# Warmup Iteration  14: 1375604.211 ops/s
# Warmup Iteration  15: 1374366.888 ops/s
# Warmup Iteration  16: 1373960.930 ops/s
# Warmup Iteration  17: 1377395.170 ops/s
# Warmup Iteration  18: 1369924.281 ops/s
# Warmup Iteration  19: 1372815.446 ops/s
# Warmup Iteration  20: 1376219.846 ops/s
# Warmup Iteration  21: 1376256.426 ops/s
# Warmup Iteration  22: 1376211.125 ops/s
# Warmup Iteration  23: 1370781.400 ops/s
# Warmup Iteration  24: 1376867.809 ops/s
# Warmup Iteration  25: 1374610.748 ops/s
# Warmup Iteration  26: 1376260.401 ops/s
# Warmup Iteration  27: 1376497.948 ops/s
# Warmup Iteration  28: 1375053.550 ops/s
# Warmup Iteration  29: 1374710.428 ops/s
# Warmup Iteration  30: 1373429.287 ops/s
Iteration   1: 1375795.402 ops/s
Iteration   2: 1369450.067 ops/s
Iteration   3: 1379735.166 ops/s
Iteration   4: 1373352.819 ops/s
Iteration   5: 1372302.919 ops/s
Iteration   6: 1375814.540 ops/s
Iteration   7: 1371512.837 ops/s
Iteration   8: 1376109.135 ops/s
Iteration   9: 1376784.484 ops/s
Iteration  10: 1377860.180 ops/s
Iteration  11: 1373184.035 ops/s
Iteration  12: 1380256.167 ops/s
Iteration  13: 1373648.157 ops/s
Iteration  14: 1375894.256 ops/s
Iteration  15: 1375184.092 ops/s
Iteration  16: 1372184.712 ops/s
Iteration  17: 1377705.713 ops/s
Iteration  18: 1371419.204 ops/s
Iteration  19: 1377592.280 ops/s
Iteration  20: 1369555.510 ops/s
Iteration  21: 1366132.097 ops/s
Iteration  22: 1379331.762 ops/s
Iteration  23: 1376294.872 ops/s
Iteration  24: 1377674.236 ops/s
Iteration  25: 1366098.201 ops/s
Iteration  26: 1373754.819 ops/s
Iteration  27: 1376036.208 ops/s
Iteration  28: 1376666.878 ops/s
Iteration  29: 1374090.310 ops/s
Iteration  30: 1374004.386 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_anySatisfy":
  1374514.181 ±(99.9%) 2395.764 ops/s [Average]
  (min, avg, max) = (1366098.201, 1374514.181, 1380256.167), stdev = 3585.868
  CI (99.9%): [1372118.417, 1376909.946] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_anySatisfy  thrpt   30  1374514.181 ± 2395.764  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_anySatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_anySatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1159005.420 ops/s
# Warmup Iteration   2: 2123264.456 ops/s
# Warmup Iteration   3: 2368520.470 ops/s
# Warmup Iteration   4: 2375807.697 ops/s
# Warmup Iteration   5: 2214898.031 ops/s
# Warmup Iteration   6: 2106832.194 ops/s
# Warmup Iteration   7: 2378901.691 ops/s
# Warmup Iteration   8: 2381297.367 ops/s
# Warmup Iteration   9: 2382762.090 ops/s
# Warmup Iteration  10: 2380230.492 ops/s
# Warmup Iteration  11: 2382443.719 ops/s
# Warmup Iteration  12: 2375254.813 ops/s
# Warmup Iteration  13: 2383368.173 ops/s
# Warmup Iteration  14: 2382309.471 ops/s
# Warmup Iteration  15: 2381974.436 ops/s
# Warmup Iteration  16: 2377012.047 ops/s
# Warmup Iteration  17: 2376910.760 ops/s
# Warmup Iteration  18: 2357194.642 ops/s
# Warmup Iteration  19: 2378461.494 ops/s
# Warmup Iteration  20: 2382959.305 ops/s
# Warmup Iteration  21: 2376469.157 ops/s
# Warmup Iteration  22: 2382047.066 ops/s
# Warmup Iteration  23: 2380663.167 ops/s
# Warmup Iteration  24: 2376560.141 ops/s
# Warmup Iteration  25: 2378718.514 ops/s
# Warmup Iteration  26: 2375491.633 ops/s
# Warmup Iteration  27: 2379962.036 ops/s
# Warmup Iteration  28: 2380541.025 ops/s
# Warmup Iteration  29: 2373162.495 ops/s
# Warmup Iteration  30: 2378615.553 ops/s
Iteration   1: 2383457.090 ops/s
Iteration   2: 2383683.452 ops/s
Iteration   3: 2377914.009 ops/s
Iteration   4: 2383209.182 ops/s
Iteration   5: 2381235.175 ops/s
Iteration   6: 2381477.893 ops/s
Iteration   7: 2387667.081 ops/s
Iteration   8: 2378930.124 ops/s
Iteration   9: 2383622.187 ops/s
Iteration  10: 2378833.704 ops/s
Iteration  11: 2364615.511 ops/s
Iteration  12: 2376574.511 ops/s
Iteration  13: 2378877.147 ops/s
Iteration  14: 2378281.022 ops/s
Iteration  15: 2373870.507 ops/s
Iteration  16: 2379251.058 ops/s
Iteration  17: 2382967.782 ops/s
Iteration  18: 2375275.953 ops/s
Iteration  19: 2377081.584 ops/s
Iteration  20: 2376879.912 ops/s
Iteration  21: 2378551.846 ops/s
Iteration  22: 2382206.892 ops/s
Iteration  23: 2380299.427 ops/s
Iteration  24: 2382252.895 ops/s
Iteration  25: 2380944.978 ops/s
Iteration  26: 2383195.543 ops/s
Iteration  27: 2384235.006 ops/s
Iteration  28: 2380702.390 ops/s
Iteration  29: 2378482.416 ops/s
Iteration  30: 2379842.537 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_anySatisfyWith":
  2379813.960 ±(99.9%) 2778.025 ops/s [Average]
  (min, avg, max) = (2364615.511, 2379813.960, 2387667.081), stdev = 4158.017
  CI (99.9%): [2377035.935, 2382591.986] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_anySatisfyWith  thrpt   30  2379813.960 ± 2778.025  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_anySatisfyWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_anySatisfyWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1109516.145 ops/s
# Warmup Iteration   2: 1958691.162 ops/s
# Warmup Iteration   3: 2220120.024 ops/s
# Warmup Iteration   4: 2219300.416 ops/s
# Warmup Iteration   5: 2237411.946 ops/s
# Warmup Iteration   6: 1840618.052 ops/s
# Warmup Iteration   7: 2231682.730 ops/s
# Warmup Iteration   8: 2224205.679 ops/s
# Warmup Iteration   9: 2231695.832 ops/s
# Warmup Iteration  10: 2231249.435 ops/s
# Warmup Iteration  11: 2230344.919 ops/s
# Warmup Iteration  12: 2230819.551 ops/s
# Warmup Iteration  13: 2212593.989 ops/s
# Warmup Iteration  14: 2225299.801 ops/s
# Warmup Iteration  15: 2229483.823 ops/s
# Warmup Iteration  16: 2228190.361 ops/s
# Warmup Iteration  17: 2224917.207 ops/s
# Warmup Iteration  18: 2234608.733 ops/s
# Warmup Iteration  19: 2226315.899 ops/s
# Warmup Iteration  20: 2232740.396 ops/s
# Warmup Iteration  21: 2227487.008 ops/s
# Warmup Iteration  22: 2225719.963 ops/s
# Warmup Iteration  23: 2221919.820 ops/s
# Warmup Iteration  24: 2233048.553 ops/s
# Warmup Iteration  25: 2233461.292 ops/s
# Warmup Iteration  26: 2231869.561 ops/s
# Warmup Iteration  27: 2223847.620 ops/s
# Warmup Iteration  28: 2227432.743 ops/s
# Warmup Iteration  29: 2228860.148 ops/s
# Warmup Iteration  30: 2226279.131 ops/s
Iteration   1: 2222545.013 ops/s
Iteration   2: 2234042.659 ops/s
Iteration   3: 2227978.573 ops/s
Iteration   4: 2234456.648 ops/s
Iteration   5: 2231464.603 ops/s
Iteration   6: 2231330.277 ops/s
Iteration   7: 2229353.377 ops/s
Iteration   8: 2233419.903 ops/s
Iteration   9: 2237069.322 ops/s
Iteration  10: 2229172.505 ops/s
Iteration  11: 2228965.250 ops/s
Iteration  12: 2228578.574 ops/s
Iteration  13: 2226446.303 ops/s
Iteration  14: 2222910.544 ops/s
Iteration  15: 2230834.675 ops/s
Iteration  16: 2227265.712 ops/s
Iteration  17: 2223252.403 ops/s
Iteration  18: 2231350.127 ops/s
Iteration  19: 2225800.970 ops/s
Iteration  20: 2230772.754 ops/s
Iteration  21: 2236855.869 ops/s
Iteration  22: 2211814.930 ops/s
Iteration  23: 2230924.670 ops/s
Iteration  24: 2225335.424 ops/s
Iteration  25: 2231038.992 ops/s
Iteration  26: 2227605.183 ops/s
Iteration  27: 2220083.565 ops/s
Iteration  28: 2211210.982 ops/s
Iteration  29: 2221595.455 ops/s
Iteration  30: 2200299.702 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_anySatisfyWithOccurrences":
  2226792.499 ±(99.9%) 5270.788 ops/s [Average]
  (min, avg, max) = (2200299.702, 2226792.499, 2237069.322), stdev = 7889.068
  CI (99.9%): [2221521.711, 2232063.287] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_anySatisfyWithOccurrences  thrpt   30  2226792.499 ± 5270.788  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 403809.499 ops/s
# Warmup Iteration   2: 703883.762 ops/s
# Warmup Iteration   3: 791496.126 ops/s
# Warmup Iteration   4: 796664.407 ops/s
# Warmup Iteration   5: 796336.441 ops/s
# Warmup Iteration   6: 658254.013 ops/s
# Warmup Iteration   7: 790064.502 ops/s
# Warmup Iteration   8: 790748.789 ops/s
# Warmup Iteration   9: 790859.341 ops/s
# Warmup Iteration  10: 791141.833 ops/s
# Warmup Iteration  11: 789778.714 ops/s
# Warmup Iteration  12: 788933.474 ops/s
# Warmup Iteration  13: 791456.006 ops/s
# Warmup Iteration  14: 792125.307 ops/s
# Warmup Iteration  15: 790422.517 ops/s
# Warmup Iteration  16: 789553.552 ops/s
# Warmup Iteration  17: 795627.086 ops/s
# Warmup Iteration  18: 794505.199 ops/s
# Warmup Iteration  19: 795353.728 ops/s
# Warmup Iteration  20: 794221.015 ops/s
# Warmup Iteration  21: 796456.453 ops/s
# Warmup Iteration  22: 796183.135 ops/s
# Warmup Iteration  23: 794410.384 ops/s
# Warmup Iteration  24: 796529.564 ops/s
# Warmup Iteration  25: 793478.853 ops/s
# Warmup Iteration  26: 794174.185 ops/s
# Warmup Iteration  27: 795433.293 ops/s
# Warmup Iteration  28: 794388.359 ops/s
# Warmup Iteration  29: 796866.489 ops/s
# Warmup Iteration  30: 795940.489 ops/s
Iteration   1: 795854.307 ops/s
Iteration   2: 797388.747 ops/s
Iteration   3: 794678.771 ops/s
Iteration   4: 795674.393 ops/s
Iteration   5: 794814.113 ops/s
Iteration   6: 796071.084 ops/s
Iteration   7: 793747.267 ops/s
Iteration   8: 796922.628 ops/s
Iteration   9: 794630.594 ops/s
Iteration  10: 796221.154 ops/s
Iteration  11: 795168.761 ops/s
Iteration  12: 787518.201 ops/s
Iteration  13: 797484.086 ops/s
Iteration  14: 795675.946 ops/s
Iteration  15: 796688.003 ops/s
Iteration  16: 794697.567 ops/s
Iteration  17: 796438.959 ops/s
Iteration  18: 796414.384 ops/s
Iteration  19: 796402.805 ops/s
Iteration  20: 799143.184 ops/s
Iteration  21: 796593.421 ops/s
Iteration  22: 796506.301 ops/s
Iteration  23: 795820.937 ops/s
Iteration  24: 789388.808 ops/s
Iteration  25: 791061.257 ops/s
Iteration  26: 795430.973 ops/s
Iteration  27: 796628.998 ops/s
Iteration  28: 795710.216 ops/s
Iteration  29: 797302.976 ops/s
Iteration  30: 787307.155 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_appendString":
  795112.867 ±(99.9%) 1855.907 ops/s [Average]
  (min, avg, max) = (787307.155, 795112.867, 799143.184), stdev = 2777.835
  CI (99.9%): [793256.959, 796968.774] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_appendString  thrpt   30  795112.867 ± 1855.907  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_appendStringThrows$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_appendStringThrows

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 94785.110 ops/s
# Warmup Iteration   2: 102719.463 ops/s
# Warmup Iteration   3: 118952.568 ops/s
# Warmup Iteration   4: 128989.410 ops/s
# Warmup Iteration   5: 128636.865 ops/s
# Warmup Iteration   6: 128788.447 ops/s
# Warmup Iteration   7: 128420.389 ops/s
# Warmup Iteration   8: 128411.415 ops/s
# Warmup Iteration   9: 128779.950 ops/s
# Warmup Iteration  10: 128506.107 ops/s
# Warmup Iteration  11: 129201.566 ops/s
# Warmup Iteration  12: 128054.333 ops/s
# Warmup Iteration  13: 128317.040 ops/s
# Warmup Iteration  14: 114191.219 ops/s
# Warmup Iteration  15: 123390.962 ops/s
# Warmup Iteration  16: 129159.134 ops/s
# Warmup Iteration  17: 134937.846 ops/s
# Warmup Iteration  18: 135262.910 ops/s
# Warmup Iteration  19: 134929.763 ops/s
# Warmup Iteration  20: 134734.551 ops/s
# Warmup Iteration  21: 134362.801 ops/s
# Warmup Iteration  22: 134811.927 ops/s
# Warmup Iteration  23: 135162.464 ops/s
# Warmup Iteration  24: 134327.822 ops/s
# Warmup Iteration  25: 134486.383 ops/s
# Warmup Iteration  26: 134453.597 ops/s
# Warmup Iteration  27: 134903.327 ops/s
# Warmup Iteration  28: 135091.836 ops/s
# Warmup Iteration  29: 134782.233 ops/s
# Warmup Iteration  30: 134985.923 ops/s
Iteration   1: 135033.399 ops/s
Iteration   2: 135433.590 ops/s
Iteration   3: 135171.943 ops/s
Iteration   4: 135029.907 ops/s
Iteration   5: 134387.777 ops/s
Iteration   6: 135319.337 ops/s
Iteration   7: 134374.304 ops/s
Iteration   8: 135191.259 ops/s
Iteration   9: 135321.934 ops/s
Iteration  10: 134963.271 ops/s
Iteration  11: 135087.482 ops/s
Iteration  12: 134992.121 ops/s
Iteration  13: 135223.365 ops/s
Iteration  14: 134868.089 ops/s
Iteration  15: 134687.716 ops/s
Iteration  16: 134689.827 ops/s
Iteration  17: 134612.373 ops/s
Iteration  18: 134953.395 ops/s
Iteration  19: 135063.499 ops/s
Iteration  20: 134187.200 ops/s
Iteration  21: 134891.350 ops/s
Iteration  22: 134650.663 ops/s
Iteration  23: 134901.946 ops/s
Iteration  24: 135162.671 ops/s
Iteration  25: 135179.715 ops/s
Iteration  26: 133998.359 ops/s
Iteration  27: 135188.235 ops/s
Iteration  28: 134955.701 ops/s
Iteration  29: 135237.928 ops/s
Iteration  30: 135261.842 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_appendStringThrows":
  134934.007 ±(99.9%) 233.846 ops/s [Average]
  (min, avg, max) = (133998.359, 134934.007, 135433.590), stdev = 350.009
  CI (99.9%): [134700.161, 135167.852] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score     Error  Units
ImmutableHashBagTest._Benchmark.benchmark_appendStringThrows  thrpt   30  134934.007 ± 233.846  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_appendStringWithSeparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_appendStringWithSeparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 999164.128 ops/s
# Warmup Iteration   2: 2316434.242 ops/s
# Warmup Iteration   3: 2359845.283 ops/s
# Warmup Iteration   4: 1939592.651 ops/s
# Warmup Iteration   5: 2356453.868 ops/s
# Warmup Iteration   6: 2359375.577 ops/s
# Warmup Iteration   7: 2351425.454 ops/s
# Warmup Iteration   8: 2361518.514 ops/s
# Warmup Iteration   9: 2359558.454 ops/s
# Warmup Iteration  10: 2359549.574 ops/s
# Warmup Iteration  11: 2360673.843 ops/s
# Warmup Iteration  12: 2356902.313 ops/s
# Warmup Iteration  13: 2359379.552 ops/s
# Warmup Iteration  14: 2360707.818 ops/s
# Warmup Iteration  15: 2363876.540 ops/s
# Warmup Iteration  16: 2362477.953 ops/s
# Warmup Iteration  17: 2363334.866 ops/s
# Warmup Iteration  18: 2362856.539 ops/s
# Warmup Iteration  19: 2354533.502 ops/s
# Warmup Iteration  20: 2360808.554 ops/s
# Warmup Iteration  21: 2356587.263 ops/s
# Warmup Iteration  22: 2359384.946 ops/s
# Warmup Iteration  23: 2357102.874 ops/s
# Warmup Iteration  24: 2358734.203 ops/s
# Warmup Iteration  25: 2358649.144 ops/s
# Warmup Iteration  26: 2358535.258 ops/s
# Warmup Iteration  27: 2362636.519 ops/s
# Warmup Iteration  28: 2361716.295 ops/s
# Warmup Iteration  29: 2352774.739 ops/s
# Warmup Iteration  30: 2354448.535 ops/s
Iteration   1: 2355560.458 ops/s
Iteration   2: 2364404.023 ops/s
Iteration   3: 2369316.191 ops/s
Iteration   4: 2363886.354 ops/s
Iteration   5: 2364483.082 ops/s
Iteration   6: 2350933.140 ops/s
Iteration   7: 2362566.471 ops/s
Iteration   8: 2360420.018 ops/s
Iteration   9: 2367255.011 ops/s
Iteration  10: 2364391.049 ops/s
Iteration  11: 2364253.093 ops/s
Iteration  12: 2359616.644 ops/s
Iteration  13: 2354380.297 ops/s
Iteration  14: 2362436.389 ops/s
Iteration  15: 2367095.622 ops/s
Iteration  16: 2361982.789 ops/s
Iteration  17: 2365010.488 ops/s
Iteration  18: 2361300.660 ops/s
Iteration  19: 2359601.780 ops/s
Iteration  20: 2359708.925 ops/s
Iteration  21: 2360793.501 ops/s
Iteration  22: 2364133.400 ops/s
Iteration  23: 2367844.514 ops/s
Iteration  24: 2357425.414 ops/s
Iteration  25: 2351540.239 ops/s
Iteration  26: 2371911.918 ops/s
Iteration  27: 2356476.735 ops/s
Iteration  28: 2356056.040 ops/s
Iteration  29: 2363885.449 ops/s
Iteration  30: 2364312.573 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_appendStringWithSeparator":
  2361766.076 ±(99.9%) 3343.998 ops/s [Average]
  (min, avg, max) = (2350933.140, 2361766.076, 2371911.918), stdev = 5005.140
  CI (99.9%): [2358422.077, 2365110.074] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_appendStringWithSeparator  thrpt   30  2361766.076 ± 3343.998  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1070875.724 ops/s
# Warmup Iteration   2: 2331053.097 ops/s
# Warmup Iteration   3: 2400920.143 ops/s
# Warmup Iteration   4: 2166595.539 ops/s
# Warmup Iteration   5: 2191887.599 ops/s
# Warmup Iteration   6: 2399868.159 ops/s
# Warmup Iteration   7: 2400941.931 ops/s
# Warmup Iteration   8: 2404258.876 ops/s
# Warmup Iteration   9: 2398093.843 ops/s
# Warmup Iteration  10: 2402760.036 ops/s
# Warmup Iteration  11: 2403710.049 ops/s
# Warmup Iteration  12: 2398605.487 ops/s
# Warmup Iteration  13: 2406943.361 ops/s
# Warmup Iteration  14: 2406530.371 ops/s
# Warmup Iteration  15: 2404778.979 ops/s
# Warmup Iteration  16: 2399262.775 ops/s
# Warmup Iteration  17: 2402893.681 ops/s
# Warmup Iteration  18: 2400900.845 ops/s
# Warmup Iteration  19: 2400025.169 ops/s
# Warmup Iteration  20: 2403775.223 ops/s
# Warmup Iteration  21: 2403212.380 ops/s
# Warmup Iteration  22: 2399206.790 ops/s
# Warmup Iteration  23: 2405135.630 ops/s
# Warmup Iteration  24: 2401368.489 ops/s
# Warmup Iteration  25: 2395610.761 ops/s
# Warmup Iteration  26: 2406625.988 ops/s
# Warmup Iteration  27: 2404593.452 ops/s
# Warmup Iteration  28: 2407389.776 ops/s
# Warmup Iteration  29: 2405286.605 ops/s
# Warmup Iteration  30: 2401671.057 ops/s
Iteration   1: 2401058.229 ops/s
Iteration   2: 2401150.965 ops/s
Iteration   3: 2399827.396 ops/s
Iteration   4: 2399526.357 ops/s
Iteration   5: 2400433.063 ops/s
Iteration   6: 2395075.948 ops/s
Iteration   7: 2412217.324 ops/s
Iteration   8: 2405889.524 ops/s
Iteration   9: 2404050.239 ops/s
Iteration  10: 2398225.846 ops/s
Iteration  11: 2405194.291 ops/s
Iteration  12: 2395706.176 ops/s
Iteration  13: 2401807.884 ops/s
Iteration  14: 2399475.509 ops/s
Iteration  15: 2404769.599 ops/s
Iteration  16: 2398607.924 ops/s
Iteration  17: 2391000.843 ops/s
Iteration  18: 2406585.340 ops/s
Iteration  19: 2402141.389 ops/s
Iteration  20: 2402963.341 ops/s
Iteration  21: 2395104.240 ops/s
Iteration  22: 2394580.674 ops/s
Iteration  23: 2406632.836 ops/s
Iteration  24: 2397325.033 ops/s
Iteration  25: 2390889.364 ops/s
Iteration  26: 2409803.452 ops/s
Iteration  27: 2412941.791 ops/s
Iteration  28: 2403711.416 ops/s
Iteration  29: 2407711.594 ops/s
Iteration  30: 2404249.358 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd":
  2401621.898 ±(99.9%) 3733.264 ops/s [Average]
  (min, avg, max) = (2390889.364, 2401621.898, 2412941.791), stdev = 5587.774
  CI (99.9%): [2397888.635, 2405355.162] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd  thrpt   30  2401621.898 ± 3733.264  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_appendString_with_separator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_appendString_with_separator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 726242.892 ops/s
# Warmup Iteration   2: 1221524.457 ops/s
# Warmup Iteration   3: 1371364.389 ops/s
# Warmup Iteration   4: 1378541.834 ops/s
# Warmup Iteration   5: 1380031.203 ops/s
# Warmup Iteration   6: 1139992.595 ops/s
# Warmup Iteration   7: 1383436.381 ops/s
# Warmup Iteration   8: 1382716.235 ops/s
# Warmup Iteration   9: 1382448.549 ops/s
# Warmup Iteration  10: 1378276.793 ops/s
# Warmup Iteration  11: 1381700.317 ops/s
# Warmup Iteration  12: 1380525.431 ops/s
# Warmup Iteration  13: 1377507.843 ops/s
# Warmup Iteration  14: 1381567.070 ops/s
# Warmup Iteration  15: 1380573.220 ops/s
# Warmup Iteration  16: 1380870.858 ops/s
# Warmup Iteration  17: 1381233.733 ops/s
# Warmup Iteration  18: 1381106.917 ops/s
# Warmup Iteration  19: 1382109.551 ops/s
# Warmup Iteration  20: 1380594.479 ops/s
# Warmup Iteration  21: 1381217.428 ops/s
# Warmup Iteration  22: 1383242.984 ops/s
# Warmup Iteration  23: 1382747.231 ops/s
# Warmup Iteration  24: 1381315.211 ops/s
# Warmup Iteration  25: 1378770.014 ops/s
# Warmup Iteration  26: 1382815.508 ops/s
# Warmup Iteration  27: 1378127.657 ops/s
# Warmup Iteration  28: 1380720.730 ops/s
# Warmup Iteration  29: 1381588.039 ops/s
# Warmup Iteration  30: 1382014.400 ops/s
Iteration   1: 1382479.806 ops/s
Iteration   2: 1386103.591 ops/s
Iteration   3: 1378279.883 ops/s
Iteration   4: 1383938.669 ops/s
Iteration   5: 1378761.301 ops/s
Iteration   6: 1384710.382 ops/s
Iteration   7: 1383619.781 ops/s
Iteration   8: 1382211.348 ops/s
Iteration   9: 1378837.081 ops/s
Iteration  10: 1381186.938 ops/s
Iteration  11: 1380247.626 ops/s
Iteration  12: 1377119.504 ops/s
Iteration  13: 1380603.937 ops/s
Iteration  14: 1382575.804 ops/s
Iteration  15: 1380039.930 ops/s
Iteration  16: 1380043.753 ops/s
Iteration  17: 1384033.252 ops/s
Iteration  18: 1383179.232 ops/s
Iteration  19: 1386124.917 ops/s
Iteration  20: 1383726.788 ops/s
Iteration  21: 1382758.342 ops/s
Iteration  22: 1380635.200 ops/s
Iteration  23: 1379212.335 ops/s
Iteration  24: 1384565.088 ops/s
Iteration  25: 1381077.220 ops/s
Iteration  26: 1383392.254 ops/s
Iteration  27: 1374480.494 ops/s
Iteration  28: 1383812.746 ops/s
Iteration  29: 1377137.194 ops/s
Iteration  30: 1380027.048 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_appendString_with_separator":
  1381497.381 ±(99.9%) 1871.560 ops/s [Average]
  (min, avg, max) = (1374480.494, 1381497.381, 1386124.917), stdev = 2801.263
  CI (99.9%): [1379625.822, 1383368.941] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_appendString_with_separator  thrpt   30  1381497.381 ± 1871.560  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_appendString_with_start_separator_end$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_appendString_with_start_separator_end

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 833312.986 ops/s
# Warmup Iteration   2: 1284816.766 ops/s
# Warmup Iteration   3: 1488226.631 ops/s
# Warmup Iteration   4: 1501246.780 ops/s
# Warmup Iteration   5: 1502186.742 ops/s
# Warmup Iteration   6: 1466640.526 ops/s
# Warmup Iteration   7: 1256941.517 ops/s
# Warmup Iteration   8: 1473877.143 ops/s
# Warmup Iteration   9: 1474656.558 ops/s
# Warmup Iteration  10: 1470317.529 ops/s
# Warmup Iteration  11: 1473655.629 ops/s
# Warmup Iteration  12: 1476046.766 ops/s
# Warmup Iteration  13: 1476848.434 ops/s
# Warmup Iteration  14: 1476581.123 ops/s
# Warmup Iteration  15: 1473273.752 ops/s
# Warmup Iteration  16: 1474668.058 ops/s
# Warmup Iteration  17: 1501941.362 ops/s
# Warmup Iteration  18: 1503388.417 ops/s
# Warmup Iteration  19: 1500437.962 ops/s
# Warmup Iteration  20: 1501098.920 ops/s
# Warmup Iteration  21: 1501720.961 ops/s
# Warmup Iteration  22: 1501941.627 ops/s
# Warmup Iteration  23: 1499374.963 ops/s
# Warmup Iteration  24: 1497153.912 ops/s
# Warmup Iteration  25: 1493675.502 ops/s
# Warmup Iteration  26: 1500360.147 ops/s
# Warmup Iteration  27: 1498871.814 ops/s
# Warmup Iteration  28: 1503175.755 ops/s
# Warmup Iteration  29: 1502596.953 ops/s
# Warmup Iteration  30: 1500380.120 ops/s
Iteration   1: 1498721.779 ops/s
Iteration   2: 1505459.099 ops/s
Iteration   3: 1499509.424 ops/s
Iteration   4: 1502175.499 ops/s
Iteration   5: 1499225.916 ops/s
Iteration   6: 1499510.890 ops/s
Iteration   7: 1497459.874 ops/s
Iteration   8: 1502073.343 ops/s
Iteration   9: 1501381.426 ops/s
Iteration  10: 1504497.168 ops/s
Iteration  11: 1499357.931 ops/s
Iteration  12: 1500971.144 ops/s
Iteration  13: 1503081.123 ops/s
Iteration  14: 1500454.040 ops/s
Iteration  15: 1496433.539 ops/s
Iteration  16: 1496597.635 ops/s
Iteration  17: 1502496.747 ops/s
Iteration  18: 1500404.746 ops/s
Iteration  19: 1505324.787 ops/s
Iteration  20: 1500722.228 ops/s
Iteration  21: 1502868.552 ops/s
Iteration  22: 1496184.182 ops/s
Iteration  23: 1501964.787 ops/s
Iteration  24: 1499452.661 ops/s
Iteration  25: 1501891.540 ops/s
Iteration  26: 1501241.187 ops/s
Iteration  27: 1506208.696 ops/s
Iteration  28: 1502033.266 ops/s
Iteration  29: 1503944.848 ops/s
Iteration  30: 1501930.560 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_appendString_with_start_separator_end":
  1501119.287 ±(99.9%) 1742.264 ops/s [Average]
  (min, avg, max) = (1496184.182, 1501119.287, 1506208.696), stdev = 2607.739
  CI (99.9%): [1499377.023, 1502861.551] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_appendString_with_start_separator_end  thrpt   30  1501119.287 ± 1742.264  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_asLazy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_asLazy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1010911.042 ops/s
# Warmup Iteration   2: 1645485.032 ops/s
# Warmup Iteration   3: 1982345.738 ops/s
# Warmup Iteration   4: 2001878.987 ops/s
# Warmup Iteration   5: 1995408.348 ops/s
# Warmup Iteration   6: 1901197.214 ops/s
# Warmup Iteration   7: 1738719.413 ops/s
# Warmup Iteration   8: 1989901.529 ops/s
# Warmup Iteration   9: 1996606.952 ops/s
# Warmup Iteration  10: 2000105.935 ops/s
# Warmup Iteration  11: 1996725.183 ops/s
# Warmup Iteration  12: 1997334.262 ops/s
# Warmup Iteration  13: 1994528.620 ops/s
# Warmup Iteration  14: 2000745.146 ops/s
# Warmup Iteration  15: 1998224.421 ops/s
# Warmup Iteration  16: 1999330.008 ops/s
# Warmup Iteration  17: 1995781.071 ops/s
# Warmup Iteration  18: 1998049.652 ops/s
# Warmup Iteration  19: 1998082.250 ops/s
# Warmup Iteration  20: 1999571.080 ops/s
# Warmup Iteration  21: 1999760.329 ops/s
# Warmup Iteration  22: 2002685.328 ops/s
# Warmup Iteration  23: 1997620.053 ops/s
# Warmup Iteration  24: 2000991.099 ops/s
# Warmup Iteration  25: 1997086.290 ops/s
# Warmup Iteration  26: 1999830.910 ops/s
# Warmup Iteration  27: 1998980.925 ops/s
# Warmup Iteration  28: 2002312.757 ops/s
# Warmup Iteration  29: 2001859.180 ops/s
# Warmup Iteration  30: 2001965.615 ops/s
Iteration   1: 1993154.279 ops/s
Iteration   2: 2001237.535 ops/s
Iteration   3: 1998298.454 ops/s
Iteration   4: 2005330.248 ops/s
Iteration   5: 2000453.718 ops/s
Iteration   6: 1997950.421 ops/s
Iteration   7: 1999016.186 ops/s
Iteration   8: 2002976.138 ops/s
Iteration   9: 1998914.958 ops/s
Iteration  10: 2004028.196 ops/s
Iteration  11: 1996886.498 ops/s
Iteration  12: 1998617.486 ops/s
Iteration  13: 1999476.892 ops/s
Iteration  14: 2005396.510 ops/s
Iteration  15: 2000063.652 ops/s
Iteration  16: 2001784.500 ops/s
Iteration  17: 1997085.287 ops/s
Iteration  18: 2005885.932 ops/s
Iteration  19: 1997450.692 ops/s
Iteration  20: 2003091.750 ops/s
Iteration  21: 1998093.961 ops/s
Iteration  22: 2006152.935 ops/s
Iteration  23: 1990570.043 ops/s
Iteration  24: 2003327.833 ops/s
Iteration  25: 2002464.788 ops/s
Iteration  26: 1996522.900 ops/s
Iteration  27: 2006232.672 ops/s
Iteration  28: 1999997.049 ops/s
Iteration  29: 1997944.079 ops/s
Iteration  30: 2002375.238 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_asLazy":
  2000359.361 ±(99.9%) 2540.227 ops/s [Average]
  (min, avg, max) = (1990570.043, 2000359.361, 2006232.672), stdev = 3802.092
  CI (99.9%): [1997819.134, 2002899.588] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_asLazy  thrpt   30  2000359.361 ± 2540.227  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_bottomOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_bottomOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 76168.414 ops/s
# Warmup Iteration   2: 131838.799 ops/s
# Warmup Iteration   3: 157525.639 ops/s
# Warmup Iteration   4: 158871.228 ops/s
# Warmup Iteration   5: 158234.397 ops/s
# Warmup Iteration   6: 137372.982 ops/s
# Warmup Iteration   7: 152952.890 ops/s
# Warmup Iteration   8: 158988.146 ops/s
# Warmup Iteration   9: 158372.626 ops/s
# Warmup Iteration  10: 159156.025 ops/s
# Warmup Iteration  11: 159140.517 ops/s
# Warmup Iteration  12: 159044.804 ops/s
# Warmup Iteration  13: 159046.025 ops/s
# Warmup Iteration  14: 158765.369 ops/s
# Warmup Iteration  15: 159074.230 ops/s
# Warmup Iteration  16: 158671.846 ops/s
# Warmup Iteration  17: 160049.196 ops/s
# Warmup Iteration  18: 160313.432 ops/s
# Warmup Iteration  19: 160201.601 ops/s
# Warmup Iteration  20: 159953.060 ops/s
# Warmup Iteration  21: 160264.202 ops/s
# Warmup Iteration  22: 160402.513 ops/s
# Warmup Iteration  23: 160427.360 ops/s
# Warmup Iteration  24: 160037.931 ops/s
# Warmup Iteration  25: 160770.162 ops/s
# Warmup Iteration  26: 160204.229 ops/s
# Warmup Iteration  27: 160300.482 ops/s
# Warmup Iteration  28: 160175.774 ops/s
# Warmup Iteration  29: 159818.088 ops/s
# Warmup Iteration  30: 160215.336 ops/s
Iteration   1: 160324.436 ops/s
Iteration   2: 158887.034 ops/s
Iteration   3: 160636.829 ops/s
Iteration   4: 160343.363 ops/s
Iteration   5: 160100.033 ops/s
Iteration   6: 160565.214 ops/s
Iteration   7: 160269.858 ops/s
Iteration   8: 160275.083 ops/s
Iteration   9: 159694.547 ops/s
Iteration  10: 159663.315 ops/s
Iteration  11: 160910.044 ops/s
Iteration  12: 160170.127 ops/s
Iteration  13: 160551.082 ops/s
Iteration  14: 159855.421 ops/s
Iteration  15: 160201.318 ops/s
Iteration  16: 160457.879 ops/s
Iteration  17: 160535.688 ops/s
Iteration  18: 160402.826 ops/s
Iteration  19: 159371.391 ops/s
Iteration  20: 160243.405 ops/s
Iteration  21: 159973.280 ops/s
Iteration  22: 160500.334 ops/s
Iteration  23: 160112.264 ops/s
Iteration  24: 159843.486 ops/s
Iteration  25: 160370.115 ops/s
Iteration  26: 160601.970 ops/s
Iteration  27: 160178.713 ops/s
Iteration  28: 160420.654 ops/s
Iteration  29: 160233.055 ops/s
Iteration  30: 160149.041 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_bottomOccurrences":
  160194.727 ±(99.9%) 272.462 ops/s [Average]
  (min, avg, max) = (158887.034, 160194.727, 160910.044), stdev = 407.808
  CI (99.9%): [159922.265, 160467.189] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score     Error  Units
ImmutableHashBagTest._Benchmark.benchmark_bottomOccurrences  thrpt   30  160194.727 ± 272.462  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_chunk$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_chunk

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 425536.654 ops/s
# Warmup Iteration   2: 763449.639 ops/s
# Warmup Iteration   3: 894406.459 ops/s
# Warmup Iteration   4: 897167.958 ops/s
# Warmup Iteration   5: 901571.464 ops/s
# Warmup Iteration   6: 738513.160 ops/s
# Warmup Iteration   7: 899958.173 ops/s
# Warmup Iteration   8: 899670.471 ops/s
# Warmup Iteration   9: 899339.197 ops/s
# Warmup Iteration  10: 901574.902 ops/s
# Warmup Iteration  11: 897927.369 ops/s
# Warmup Iteration  12: 900814.819 ops/s
# Warmup Iteration  13: 900667.476 ops/s
# Warmup Iteration  14: 899057.596 ops/s
# Warmup Iteration  15: 899325.359 ops/s
# Warmup Iteration  16: 900761.319 ops/s
# Warmup Iteration  17: 905287.133 ops/s
# Warmup Iteration  18: 905141.454 ops/s
# Warmup Iteration  19: 903354.309 ops/s
# Warmup Iteration  20: 904371.250 ops/s
# Warmup Iteration  21: 901380.911 ops/s
# Warmup Iteration  22: 904636.233 ops/s
# Warmup Iteration  23: 903975.371 ops/s
# Warmup Iteration  24: 902270.140 ops/s
# Warmup Iteration  25: 907011.618 ops/s
# Warmup Iteration  26: 903413.504 ops/s
# Warmup Iteration  27: 903655.435 ops/s
# Warmup Iteration  28: 904423.248 ops/s
# Warmup Iteration  29: 902674.725 ops/s
# Warmup Iteration  30: 904268.591 ops/s
Iteration   1: 904189.362 ops/s
Iteration   2: 906698.118 ops/s
Iteration   3: 905538.219 ops/s
Iteration   4: 904291.114 ops/s
Iteration   5: 897851.416 ops/s
Iteration   6: 904600.785 ops/s
Iteration   7: 904091.512 ops/s
Iteration   8: 903524.137 ops/s
Iteration   9: 901882.021 ops/s
Iteration  10: 904703.951 ops/s
Iteration  11: 900748.647 ops/s
Iteration  12: 903842.420 ops/s
Iteration  13: 907881.530 ops/s
Iteration  14: 904011.086 ops/s
Iteration  15: 900224.329 ops/s
Iteration  16: 904889.786 ops/s
Iteration  17: 903405.801 ops/s
Iteration  18: 906264.854 ops/s
Iteration  19: 905431.931 ops/s
Iteration  20: 907704.042 ops/s
Iteration  21: 902554.878 ops/s
Iteration  22: 906568.523 ops/s
Iteration  23: 906305.029 ops/s
Iteration  24: 906241.826 ops/s
Iteration  25: 904267.262 ops/s
Iteration  26: 900966.123 ops/s
Iteration  27: 905266.643 ops/s
Iteration  28: 903106.109 ops/s
Iteration  29: 898419.646 ops/s
Iteration  30: 906034.919 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_chunk":
  904050.201 ±(99.9%) 1669.228 ops/s [Average]
  (min, avg, max) = (897851.416, 904050.201, 907881.530), stdev = 2498.422
  CI (99.9%): [902380.973, 905719.429] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_chunk  thrpt   30  904050.201 ± 1669.228  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_chunk_empty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_chunk_empty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6369125.181 ops/s
# Warmup Iteration   2: 14203961.895 ops/s
# Warmup Iteration   3: 11722242.109 ops/s
# Warmup Iteration   4: 13869668.656 ops/s
# Warmup Iteration   5: 13883804.090 ops/s
# Warmup Iteration   6: 13838514.894 ops/s
# Warmup Iteration   7: 13871506.698 ops/s
# Warmup Iteration   8: 13806544.584 ops/s
# Warmup Iteration   9: 13861993.544 ops/s
# Warmup Iteration  10: 13886986.905 ops/s
# Warmup Iteration  11: 13867035.194 ops/s
# Warmup Iteration  12: 13830586.287 ops/s
# Warmup Iteration  13: 13842236.953 ops/s
# Warmup Iteration  14: 13832824.201 ops/s
# Warmup Iteration  15: 13867773.240 ops/s
# Warmup Iteration  16: 13862597.187 ops/s
# Warmup Iteration  17: 13821548.008 ops/s
# Warmup Iteration  18: 13817295.215 ops/s
# Warmup Iteration  19: 13861774.954 ops/s
# Warmup Iteration  20: 13852115.206 ops/s
# Warmup Iteration  21: 13882096.380 ops/s
# Warmup Iteration  22: 13828951.233 ops/s
# Warmup Iteration  23: 13859663.571 ops/s
# Warmup Iteration  24: 13889433.092 ops/s
# Warmup Iteration  25: 13863001.950 ops/s
# Warmup Iteration  26: 13830252.930 ops/s
# Warmup Iteration  27: 13853198.400 ops/s
# Warmup Iteration  28: 13868982.337 ops/s
# Warmup Iteration  29: 13853904.747 ops/s
# Warmup Iteration  30: 13860439.603 ops/s
Iteration   1: 13849054.240 ops/s
Iteration   2: 13841214.040 ops/s
Iteration   3: 13867988.898 ops/s
Iteration   4: 13865354.159 ops/s
Iteration   5: 13805343.397 ops/s
Iteration   6: 13857697.623 ops/s
Iteration   7: 13863083.651 ops/s
Iteration   8: 13861575.184 ops/s
Iteration   9: 13878654.712 ops/s
Iteration  10: 13787045.451 ops/s
Iteration  11: 13878978.796 ops/s
Iteration  12: 13901723.147 ops/s
Iteration  13: 13861355.913 ops/s
Iteration  14: 13871730.760 ops/s
Iteration  15: 13830321.827 ops/s
Iteration  16: 13856060.172 ops/s
Iteration  17: 13846219.940 ops/s
Iteration  18: 13885941.486 ops/s
Iteration  19: 13874888.968 ops/s
Iteration  20: 13896537.773 ops/s
Iteration  21: 13841420.804 ops/s
Iteration  22: 13893257.134 ops/s
Iteration  23: 13883519.753 ops/s
Iteration  24: 13875735.377 ops/s
Iteration  25: 13867425.967 ops/s
Iteration  26: 13878442.627 ops/s
Iteration  27: 13831487.916 ops/s
Iteration  28: 13868730.352 ops/s
Iteration  29: 13823110.178 ops/s
Iteration  30: 13906414.163 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_chunk_empty":
  13861677.147 ±(99.9%) 18302.795 ops/s [Average]
  (min, avg, max) = (13787045.451, 13861677.147, 13906414.163), stdev = 27394.764
  CI (99.9%): [13843374.352, 13879979.942] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score       Error  Units
ImmutableHashBagTest._Benchmark.benchmark_chunk_empty  thrpt   30  13861677.147 ± 18302.795  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_chunk_large_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_chunk_large_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 199741.753 ops/s
# Warmup Iteration   2: 309898.667 ops/s
# Warmup Iteration   3: 378769.384 ops/s
# Warmup Iteration   4: 377609.684 ops/s
# Warmup Iteration   5: 377711.013 ops/s
# Warmup Iteration   6: 377349.700 ops/s
# Warmup Iteration   7: 311188.134 ops/s
# Warmup Iteration   8: 380478.231 ops/s
# Warmup Iteration   9: 379107.909 ops/s
# Warmup Iteration  10: 381610.490 ops/s
# Warmup Iteration  11: 380221.610 ops/s
# Warmup Iteration  12: 380192.128 ops/s
# Warmup Iteration  13: 379270.642 ops/s
# Warmup Iteration  14: 378002.659 ops/s
# Warmup Iteration  15: 380217.125 ops/s
# Warmup Iteration  16: 378872.335 ops/s
# Warmup Iteration  17: 379431.062 ops/s
# Warmup Iteration  18: 379589.714 ops/s
# Warmup Iteration  19: 378880.404 ops/s
# Warmup Iteration  20: 379424.039 ops/s
# Warmup Iteration  21: 380152.655 ops/s
# Warmup Iteration  22: 379444.822 ops/s
# Warmup Iteration  23: 379955.682 ops/s
# Warmup Iteration  24: 379172.911 ops/s
# Warmup Iteration  25: 380495.940 ops/s
# Warmup Iteration  26: 380616.337 ops/s
# Warmup Iteration  27: 379828.515 ops/s
# Warmup Iteration  28: 378711.046 ops/s
# Warmup Iteration  29: 380643.910 ops/s
# Warmup Iteration  30: 378967.383 ops/s
Iteration   1: 380078.666 ops/s
Iteration   2: 379615.696 ops/s
Iteration   3: 380435.751 ops/s
Iteration   4: 380522.412 ops/s
Iteration   5: 378910.870 ops/s
Iteration   6: 377449.138 ops/s
Iteration   7: 378407.161 ops/s
Iteration   8: 380164.381 ops/s
Iteration   9: 379985.803 ops/s
Iteration  10: 377532.116 ops/s
Iteration  11: 380817.817 ops/s
Iteration  12: 377991.677 ops/s
Iteration  13: 379188.176 ops/s
Iteration  14: 378929.108 ops/s
Iteration  15: 380751.201 ops/s
Iteration  16: 377739.265 ops/s
Iteration  17: 380703.052 ops/s
Iteration  18: 379162.041 ops/s
Iteration  19: 379066.424 ops/s
Iteration  20: 377173.248 ops/s
Iteration  21: 380412.488 ops/s
Iteration  22: 380651.585 ops/s
Iteration  23: 376544.516 ops/s
Iteration  24: 379610.711 ops/s
Iteration  25: 378836.790 ops/s
Iteration  26: 379543.524 ops/s
Iteration  27: 378241.362 ops/s
Iteration  28: 381380.459 ops/s
Iteration  29: 378177.805 ops/s
Iteration  30: 379454.278 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_chunk_large_size":
  379249.251 ±(99.9%) 833.757 ops/s [Average]
  (min, avg, max) = (376544.516, 379249.251, 381380.459), stdev = 1247.928
  CI (99.9%): [378415.494, 380083.008] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score     Error  Units
ImmutableHashBagTest._Benchmark.benchmark_chunk_large_size  thrpt   30  379249.251 ± 833.757  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_chunk_single$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_chunk_single

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1197421.283 ops/s
# Warmup Iteration   2: 2655535.868 ops/s
# Warmup Iteration   3: 2850187.870 ops/s
# Warmup Iteration   4: 2860525.030 ops/s
# Warmup Iteration   5: 2372311.306 ops/s
# Warmup Iteration   6: 2875477.906 ops/s
# Warmup Iteration   7: 2878266.748 ops/s
# Warmup Iteration   8: 2871843.588 ops/s
# Warmup Iteration   9: 2872829.364 ops/s
# Warmup Iteration  10: 2876013.782 ops/s
# Warmup Iteration  11: 2871039.304 ops/s
# Warmup Iteration  12: 2878900.519 ops/s
# Warmup Iteration  13: 2878444.249 ops/s
# Warmup Iteration  14: 2872917.465 ops/s
# Warmup Iteration  15: 2868748.932 ops/s
# Warmup Iteration  16: 2877882.593 ops/s
# Warmup Iteration  17: 2851216.511 ops/s
# Warmup Iteration  18: 2853288.230 ops/s
# Warmup Iteration  19: 2865308.856 ops/s
# Warmup Iteration  20: 2850774.649 ops/s
# Warmup Iteration  21: 2855887.146 ops/s
# Warmup Iteration  22: 2864195.737 ops/s
# Warmup Iteration  23: 2863433.813 ops/s
# Warmup Iteration  24: 2857955.361 ops/s
# Warmup Iteration  25: 2860732.660 ops/s
# Warmup Iteration  26: 2864756.363 ops/s
# Warmup Iteration  27: 2860507.994 ops/s
# Warmup Iteration  28: 2866362.226 ops/s
# Warmup Iteration  29: 2861330.303 ops/s
# Warmup Iteration  30: 2865451.045 ops/s
Iteration   1: 2861038.499 ops/s
Iteration   2: 2854202.627 ops/s
Iteration   3: 2863024.392 ops/s
Iteration   4: 2857450.054 ops/s
Iteration   5: 2863450.420 ops/s
Iteration   6: 2862128.905 ops/s
Iteration   7: 2866521.846 ops/s
Iteration   8: 2861509.297 ops/s
Iteration   9: 2861399.823 ops/s
Iteration  10: 2866059.183 ops/s
Iteration  11: 2867909.878 ops/s
Iteration  12: 2863579.808 ops/s
Iteration  13: 2859463.372 ops/s
Iteration  14: 2868192.224 ops/s
Iteration  15: 2868722.692 ops/s
Iteration  16: 2857855.614 ops/s
Iteration  17: 2863917.177 ops/s
Iteration  18: 2867596.093 ops/s
Iteration  19: 2866051.523 ops/s
Iteration  20: 2861231.560 ops/s
Iteration  21: 2856700.699 ops/s
Iteration  22: 2862780.380 ops/s
Iteration  23: 2868551.871 ops/s
Iteration  24: 2860277.343 ops/s
Iteration  25: 2863644.396 ops/s
Iteration  26: 2858570.162 ops/s
Iteration  27: 2858025.736 ops/s
Iteration  28: 2865687.395 ops/s
Iteration  29: 2865611.974 ops/s
Iteration  30: 2859619.640 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_chunk_single":
  2862692.486 ±(99.9%) 2609.685 ops/s [Average]
  (min, avg, max) = (2854202.627, 2862692.486, 2868722.692), stdev = 3906.054
  CI (99.9%): [2860082.801, 2865302.171] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_chunk_single  thrpt   30  2862692.486 ± 2609.685  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_chunk_zero_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_chunk_zero_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 493687.305 ops/s
# Warmup Iteration   2: 587820.454 ops/s
# Warmup Iteration   3: 744714.233 ops/s
# Warmup Iteration   4: 743105.571 ops/s
# Warmup Iteration   5: 740848.964 ops/s
# Warmup Iteration   6: 741400.126 ops/s
# Warmup Iteration   7: 743703.826 ops/s
# Warmup Iteration   8: 742751.049 ops/s
# Warmup Iteration   9: 674367.759 ops/s
# Warmup Iteration  10: 689999.462 ops/s
# Warmup Iteration  11: 743402.815 ops/s
# Warmup Iteration  12: 744190.256 ops/s
# Warmup Iteration  13: 737782.733 ops/s
# Warmup Iteration  14: 741100.725 ops/s
# Warmup Iteration  15: 744278.637 ops/s
# Warmup Iteration  16: 739365.943 ops/s
# Warmup Iteration  17: 778991.664 ops/s
# Warmup Iteration  18: 775541.792 ops/s
# Warmup Iteration  19: 777010.533 ops/s
# Warmup Iteration  20: 779790.946 ops/s
# Warmup Iteration  21: 776468.902 ops/s
# Warmup Iteration  22: 775329.635 ops/s
# Warmup Iteration  23: 777743.290 ops/s
# Warmup Iteration  24: 776313.504 ops/s
# Warmup Iteration  25: 775147.376 ops/s
# Warmup Iteration  26: 773944.246 ops/s
# Warmup Iteration  27: 777075.129 ops/s
# Warmup Iteration  28: 773713.068 ops/s
# Warmup Iteration  29: 778443.656 ops/s
# Warmup Iteration  30: 779198.590 ops/s
Iteration   1: 780338.832 ops/s
Iteration   2: 774944.110 ops/s
Iteration   3: 776933.339 ops/s
Iteration   4: 777476.418 ops/s
Iteration   5: 779542.318 ops/s
Iteration   6: 775831.814 ops/s
Iteration   7: 776403.011 ops/s
Iteration   8: 777526.061 ops/s
Iteration   9: 780254.221 ops/s
Iteration  10: 777845.523 ops/s
Iteration  11: 776419.089 ops/s
Iteration  12: 776349.232 ops/s
Iteration  13: 776090.859 ops/s
Iteration  14: 778187.509 ops/s
Iteration  15: 779247.592 ops/s
Iteration  16: 777414.589 ops/s
Iteration  17: 776950.452 ops/s
Iteration  18: 776248.343 ops/s
Iteration  19: 780180.376 ops/s
Iteration  20: 773639.404 ops/s
Iteration  21: 778484.037 ops/s
Iteration  22: 778170.384 ops/s
Iteration  23: 777441.769 ops/s
Iteration  24: 774440.306 ops/s
Iteration  25: 778985.239 ops/s
Iteration  26: 777774.206 ops/s
Iteration  27: 774641.240 ops/s
Iteration  28: 769046.420 ops/s
Iteration  29: 774577.083 ops/s
Iteration  30: 778450.426 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_chunk_zero_throws":
  776994.473 ±(99.9%) 1555.651 ops/s [Average]
  (min, avg, max) = (769046.420, 776994.473, 780338.832), stdev = 2328.426
  CI (99.9%): [775438.822, 778550.125] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_chunk_zero_throws  thrpt   30  776994.473 ± 1555.651  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 536260.350 ops/s
# Warmup Iteration   2: 617227.474 ops/s
# Warmup Iteration   3: 781000.967 ops/s
# Warmup Iteration   4: 787697.482 ops/s
# Warmup Iteration   5: 777632.942 ops/s
# Warmup Iteration   6: 783108.996 ops/s
# Warmup Iteration   7: 784493.109 ops/s
# Warmup Iteration   8: 787480.055 ops/s
# Warmup Iteration   9: 786829.522 ops/s
# Warmup Iteration  10: 657139.159 ops/s
# Warmup Iteration  11: 786654.289 ops/s
# Warmup Iteration  12: 784825.905 ops/s
# Warmup Iteration  13: 782237.491 ops/s
# Warmup Iteration  14: 780264.774 ops/s
# Warmup Iteration  15: 781318.441 ops/s
# Warmup Iteration  16: 785653.201 ops/s
# Warmup Iteration  17: 828723.875 ops/s
# Warmup Iteration  18: 827962.503 ops/s
# Warmup Iteration  19: 828427.508 ops/s
# Warmup Iteration  20: 826714.659 ops/s
# Warmup Iteration  21: 830027.228 ops/s
# Warmup Iteration  22: 829001.418 ops/s
# Warmup Iteration  23: 829496.305 ops/s
# Warmup Iteration  24: 826988.748 ops/s
# Warmup Iteration  25: 829809.226 ops/s
# Warmup Iteration  26: 830159.433 ops/s
# Warmup Iteration  27: 825796.014 ops/s
# Warmup Iteration  28: 824249.555 ops/s
# Warmup Iteration  29: 830997.090 ops/s
# Warmup Iteration  30: 824788.828 ops/s
Iteration   1: 827338.763 ops/s
Iteration   2: 821307.801 ops/s
Iteration   3: 827575.376 ops/s
Iteration   4: 824723.169 ops/s
Iteration   5: 827455.631 ops/s
Iteration   6: 826331.742 ops/s
Iteration   7: 829316.805 ops/s
Iteration   8: 829578.393 ops/s
Iteration   9: 826992.831 ops/s
Iteration  10: 828955.990 ops/s
Iteration  11: 828657.093 ops/s
Iteration  12: 826047.550 ops/s
Iteration  13: 828406.023 ops/s
Iteration  14: 827023.722 ops/s
Iteration  15: 825534.700 ops/s
Iteration  16: 826526.372 ops/s
Iteration  17: 824792.825 ops/s
Iteration  18: 829936.469 ops/s
Iteration  19: 826545.556 ops/s
Iteration  20: 825621.594 ops/s
Iteration  21: 829198.677 ops/s
Iteration  22: 824665.660 ops/s
Iteration  23: 826956.621 ops/s
Iteration  24: 829928.870 ops/s
Iteration  25: 827192.534 ops/s
Iteration  26: 829701.324 ops/s
Iteration  27: 827990.171 ops/s
Iteration  28: 828341.445 ops/s
Iteration  29: 825319.054 ops/s
Iteration  30: 831389.540 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_clear":
  827311.743 ±(99.9%) 1394.208 ops/s [Average]
  (min, avg, max) = (821307.801, 827311.743, 831389.540), stdev = 2086.785
  CI (99.9%): [825917.535, 828705.951] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_clear  thrpt   30  827311.743 ± 1394.208  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 240655.033 ops/s
# Warmup Iteration   2: 441118.301 ops/s
# Warmup Iteration   3: 506091.681 ops/s
# Warmup Iteration   4: 504018.313 ops/s
# Warmup Iteration   5: 505401.972 ops/s
# Warmup Iteration   6: 412006.545 ops/s
# Warmup Iteration   7: 499193.159 ops/s
# Warmup Iteration   8: 504710.431 ops/s
# Warmup Iteration   9: 503630.643 ops/s
# Warmup Iteration  10: 505683.039 ops/s
# Warmup Iteration  11: 504874.280 ops/s
# Warmup Iteration  12: 504567.420 ops/s
# Warmup Iteration  13: 503004.985 ops/s
# Warmup Iteration  14: 504145.134 ops/s
# Warmup Iteration  15: 503170.970 ops/s
# Warmup Iteration  16: 505109.774 ops/s
# Warmup Iteration  17: 501961.252 ops/s
# Warmup Iteration  18: 504783.529 ops/s
# Warmup Iteration  19: 505522.490 ops/s
# Warmup Iteration  20: 504047.928 ops/s
# Warmup Iteration  21: 505168.029 ops/s
# Warmup Iteration  22: 504702.140 ops/s
# Warmup Iteration  23: 505522.407 ops/s
# Warmup Iteration  24: 505661.086 ops/s
# Warmup Iteration  25: 503212.010 ops/s
# Warmup Iteration  26: 504535.994 ops/s
# Warmup Iteration  27: 503899.195 ops/s
# Warmup Iteration  28: 505222.479 ops/s
# Warmup Iteration  29: 503643.582 ops/s
# Warmup Iteration  30: 505440.164 ops/s
Iteration   1: 505012.465 ops/s
Iteration   2: 504336.791 ops/s
Iteration   3: 502783.245 ops/s
Iteration   4: 503631.900 ops/s
Iteration   5: 505555.512 ops/s
Iteration   6: 507343.955 ops/s
Iteration   7: 502105.517 ops/s
Iteration   8: 502602.247 ops/s
Iteration   9: 505038.113 ops/s
Iteration  10: 505995.170 ops/s
Iteration  11: 504291.930 ops/s
Iteration  12: 503323.589 ops/s
Iteration  13: 502942.807 ops/s
Iteration  14: 506426.450 ops/s
Iteration  15: 505192.513 ops/s
Iteration  16: 507239.055 ops/s
Iteration  17: 505737.961 ops/s
Iteration  18: 503164.399 ops/s
Iteration  19: 506041.383 ops/s
Iteration  20: 504438.815 ops/s
Iteration  21: 506047.924 ops/s
Iteration  22: 504588.548 ops/s
Iteration  23: 505779.767 ops/s
Iteration  24: 502427.657 ops/s
Iteration  25: 504823.872 ops/s
Iteration  26: 506043.143 ops/s
Iteration  27: 504508.032 ops/s
Iteration  28: 504953.760 ops/s
Iteration  29: 503509.989 ops/s
Iteration  30: 503145.315 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collect":
  504634.394 ±(99.9%) 957.763 ops/s [Average]
  (min, avg, max) = (502105.517, 504634.394, 507343.955), stdev = 1433.534
  CI (99.9%): [503676.632, 505592.157] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score     Error  Units
ImmutableHashBagTest._Benchmark.benchmark_collect  thrpt   30  504634.394 ± 957.763  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1534692.836 ops/s
# Warmup Iteration   2: 2593524.452 ops/s
# Warmup Iteration   3: 3052667.923 ops/s
# Warmup Iteration   4: 3056547.228 ops/s
# Warmup Iteration   5: 3049218.833 ops/s
# Warmup Iteration   6: 2502714.942 ops/s
# Warmup Iteration   7: 3062997.496 ops/s
# Warmup Iteration   8: 3071864.153 ops/s
# Warmup Iteration   9: 3059532.135 ops/s
# Warmup Iteration  10: 3064470.619 ops/s
# Warmup Iteration  11: 3072298.303 ops/s
# Warmup Iteration  12: 3073230.331 ops/s
# Warmup Iteration  13: 3076133.005 ops/s
# Warmup Iteration  14: 3063776.209 ops/s
# Warmup Iteration  15: 3076306.398 ops/s
# Warmup Iteration  16: 3074119.916 ops/s
# Warmup Iteration  17: 3056284.606 ops/s
# Warmup Iteration  18: 3072764.586 ops/s
# Warmup Iteration  19: 3053992.820 ops/s
# Warmup Iteration  20: 3079890.106 ops/s
# Warmup Iteration  21: 3065248.076 ops/s
# Warmup Iteration  22: 3069599.204 ops/s
# Warmup Iteration  23: 3067690.210 ops/s
# Warmup Iteration  24: 3067654.775 ops/s
# Warmup Iteration  25: 3069114.029 ops/s
# Warmup Iteration  26: 3073829.592 ops/s
# Warmup Iteration  27: 3061646.084 ops/s
# Warmup Iteration  28: 3059522.465 ops/s
# Warmup Iteration  29: 3078647.222 ops/s
# Warmup Iteration  30: 3061168.199 ops/s
Iteration   1: 3052631.656 ops/s
Iteration   2: 3003211.907 ops/s
Iteration   3: 3060538.284 ops/s
Iteration   4: 3062705.082 ops/s
Iteration   5: 3063296.126 ops/s
Iteration   6: 3073679.875 ops/s
Iteration   7: 3069269.453 ops/s
Iteration   8: 3060519.807 ops/s
Iteration   9: 3058569.020 ops/s
Iteration  10: 3069249.673 ops/s
Iteration  11: 3077648.946 ops/s
Iteration  12: 3061662.229 ops/s
Iteration  13: 3057203.254 ops/s
Iteration  14: 3062012.426 ops/s
Iteration  15: 3080896.579 ops/s
Iteration  16: 3071022.104 ops/s
Iteration  17: 3068265.968 ops/s
Iteration  18: 3078706.237 ops/s
Iteration  19: 3062509.488 ops/s
Iteration  20: 3071449.377 ops/s
Iteration  21: 3051366.027 ops/s
Iteration  22: 3074769.088 ops/s
Iteration  23: 3065364.746 ops/s
Iteration  24: 3078163.107 ops/s
Iteration  25: 3037387.814 ops/s
Iteration  26: 3071128.008 ops/s
Iteration  27: 3063445.557 ops/s
Iteration  28: 3054567.458 ops/s
Iteration  29: 3079125.291 ops/s
Iteration  30: 3058710.399 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectBoolean":
  3063302.500 ±(99.9%) 9976.760 ops/s [Average]
  (min, avg, max) = (3003211.907, 3063302.500, 3080896.579), stdev = 14932.746
  CI (99.9%): [3053325.740, 3073279.259] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_collectBoolean  thrpt   30  3063302.500 ± 9976.760  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectBooleanWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectBooleanWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3394474.499 ops/s
# Warmup Iteration   2: 7735830.473 ops/s
# Warmup Iteration   3: 7956057.676 ops/s
# Warmup Iteration   4: 6880664.574 ops/s
# Warmup Iteration   5: 7637482.553 ops/s
# Warmup Iteration   6: 7967693.284 ops/s
# Warmup Iteration   7: 7959212.825 ops/s
# Warmup Iteration   8: 7955557.108 ops/s
# Warmup Iteration   9: 7960128.223 ops/s
# Warmup Iteration  10: 7955220.739 ops/s
# Warmup Iteration  11: 7949046.123 ops/s
# Warmup Iteration  12: 7954702.497 ops/s
# Warmup Iteration  13: 7954186.256 ops/s
# Warmup Iteration  14: 7948465.943 ops/s
# Warmup Iteration  15: 7946142.665 ops/s
# Warmup Iteration  16: 7958915.187 ops/s
# Warmup Iteration  17: 7955444.028 ops/s
# Warmup Iteration  18: 7961183.867 ops/s
# Warmup Iteration  19: 7958485.022 ops/s
# Warmup Iteration  20: 7959539.785 ops/s
# Warmup Iteration  21: 7971115.053 ops/s
# Warmup Iteration  22: 7941727.315 ops/s
# Warmup Iteration  23: 7951566.460 ops/s
# Warmup Iteration  24: 7965028.185 ops/s
# Warmup Iteration  25: 7948565.331 ops/s
# Warmup Iteration  26: 7931441.114 ops/s
# Warmup Iteration  27: 7971837.309 ops/s
# Warmup Iteration  28: 7975357.768 ops/s
# Warmup Iteration  29: 7964297.461 ops/s
# Warmup Iteration  30: 7964828.880 ops/s
Iteration   1: 7961125.367 ops/s
Iteration   2: 7936023.640 ops/s
Iteration   3: 7964069.738 ops/s
Iteration   4: 7969519.836 ops/s
Iteration   5: 7959119.175 ops/s
Iteration   6: 7970976.839 ops/s
Iteration   7: 7929804.261 ops/s
Iteration   8: 7933028.594 ops/s
Iteration   9: 7947253.078 ops/s
Iteration  10: 7975223.757 ops/s
Iteration  11: 7911794.591 ops/s
Iteration  12: 7941848.107 ops/s
Iteration  13: 7959614.892 ops/s
Iteration  14: 7921369.066 ops/s
Iteration  15: 7924001.015 ops/s
Iteration  16: 7978176.503 ops/s
Iteration  17: 7942028.865 ops/s
Iteration  18: 7951801.897 ops/s
Iteration  19: 7964331.522 ops/s
Iteration  20: 7955363.782 ops/s
Iteration  21: 7955873.818 ops/s
Iteration  22: 7975090.376 ops/s
Iteration  23: 7949699.527 ops/s
Iteration  24: 7963880.097 ops/s
Iteration  25: 7962354.459 ops/s
Iteration  26: 7972872.918 ops/s
Iteration  27: 7976472.105 ops/s
Iteration  28: 7968467.170 ops/s
Iteration  29: 7958147.123 ops/s
Iteration  30: 7974067.440 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectBooleanWithBagTarget":
  7955113.319 ±(99.9%) 12032.225 ops/s [Average]
  (min, avg, max) = (7911794.591, 7955113.319, 7978176.503), stdev = 18009.269
  CI (99.9%): [7943081.094, 7967145.544] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
ImmutableHashBagTest._Benchmark.benchmark_collectBooleanWithBagTarget  thrpt   30  7955113.319 ± 12032.225  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectBooleanWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectBooleanWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 950779.901 ops/s
# Warmup Iteration   2: 1659629.980 ops/s
# Warmup Iteration   3: 1897003.275 ops/s
# Warmup Iteration   4: 1910571.663 ops/s
# Warmup Iteration   5: 1909638.673 ops/s
# Warmup Iteration   6: 1564682.577 ops/s
# Warmup Iteration   7: 1912504.322 ops/s
# Warmup Iteration   8: 1907922.400 ops/s
# Warmup Iteration   9: 1910209.033 ops/s
# Warmup Iteration  10: 1911531.794 ops/s
# Warmup Iteration  11: 1909538.489 ops/s
# Warmup Iteration  12: 1909304.101 ops/s
# Warmup Iteration  13: 1905742.805 ops/s
# Warmup Iteration  14: 1899758.465 ops/s
# Warmup Iteration  15: 1915988.214 ops/s
# Warmup Iteration  16: 1914178.117 ops/s
# Warmup Iteration  17: 1911843.292 ops/s
# Warmup Iteration  18: 1911808.697 ops/s
# Warmup Iteration  19: 1914090.249 ops/s
# Warmup Iteration  20: 1915874.908 ops/s
# Warmup Iteration  21: 1911095.705 ops/s
# Warmup Iteration  22: 1917140.057 ops/s
# Warmup Iteration  23: 1912782.298 ops/s
# Warmup Iteration  24: 1914722.160 ops/s
# Warmup Iteration  25: 1917424.904 ops/s
# Warmup Iteration  26: 1921139.726 ops/s
# Warmup Iteration  27: 1921413.404 ops/s
# Warmup Iteration  28: 1917954.122 ops/s
# Warmup Iteration  29: 1918403.307 ops/s
# Warmup Iteration  30: 1916651.731 ops/s
Iteration   1: 1916160.374 ops/s
Iteration   2: 1914558.920 ops/s
Iteration   3: 1921446.336 ops/s
Iteration   4: 1917954.504 ops/s
Iteration   5: 1921778.542 ops/s
Iteration   6: 1916706.726 ops/s
Iteration   7: 1915909.855 ops/s
Iteration   8: 1918865.624 ops/s
Iteration   9: 1912569.620 ops/s
Iteration  10: 1909403.715 ops/s
Iteration  11: 1918027.332 ops/s
Iteration  12: 1918455.579 ops/s
Iteration  13: 1917174.958 ops/s
Iteration  14: 1918155.850 ops/s
Iteration  15: 1915659.539 ops/s
Iteration  16: 1916314.291 ops/s
Iteration  17: 1912263.940 ops/s
Iteration  18: 1915148.071 ops/s
Iteration  19: 1920106.379 ops/s
Iteration  20: 1905432.361 ops/s
Iteration  21: 1921574.059 ops/s
Iteration  22: 1923339.269 ops/s
Iteration  23: 1912880.832 ops/s
Iteration  24: 1910588.983 ops/s
Iteration  25: 1915344.069 ops/s
Iteration  26: 1921853.373 ops/s
Iteration  27: 1915646.820 ops/s
Iteration  28: 1912537.421 ops/s
Iteration  29: 1919804.404 ops/s
Iteration  30: 1916645.773 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectBooleanWithTarget":
  1916410.251 ±(99.9%) 2698.729 ops/s [Average]
  (min, avg, max) = (1905432.361, 1916410.251, 1923339.269), stdev = 4039.331
  CI (99.9%): [1913711.521, 1919108.980] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_collectBooleanWithTarget  thrpt   30  1916410.251 ± 2698.729  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 319610.003 ops/s
# Warmup Iteration   2: 636138.147 ops/s
# Warmup Iteration   3: 695469.559 ops/s
# Warmup Iteration   4: 695703.741 ops/s
# Warmup Iteration   5: 580102.334 ops/s
# Warmup Iteration   6: 696609.349 ops/s
# Warmup Iteration   7: 696182.234 ops/s
# Warmup Iteration   8: 696827.842 ops/s
# Warmup Iteration   9: 697035.556 ops/s
# Warmup Iteration  10: 695216.667 ops/s
# Warmup Iteration  11: 697162.589 ops/s
# Warmup Iteration  12: 698185.758 ops/s
# Warmup Iteration  13: 695825.454 ops/s
# Warmup Iteration  14: 695118.443 ops/s
# Warmup Iteration  15: 696737.840 ops/s
# Warmup Iteration  16: 696722.283 ops/s
# Warmup Iteration  17: 695517.117 ops/s
# Warmup Iteration  18: 695862.268 ops/s
# Warmup Iteration  19: 696450.044 ops/s
# Warmup Iteration  20: 697018.910 ops/s
# Warmup Iteration  21: 696394.167 ops/s
# Warmup Iteration  22: 695827.789 ops/s
# Warmup Iteration  23: 695422.020 ops/s
# Warmup Iteration  24: 695784.883 ops/s
# Warmup Iteration  25: 695146.537 ops/s
# Warmup Iteration  26: 694901.690 ops/s
# Warmup Iteration  27: 697102.956 ops/s
# Warmup Iteration  28: 695565.193 ops/s
# Warmup Iteration  29: 696160.095 ops/s
# Warmup Iteration  30: 695673.286 ops/s
Iteration   1: 694708.600 ops/s
Iteration   2: 696996.074 ops/s
Iteration   3: 695558.786 ops/s
Iteration   4: 698366.148 ops/s
Iteration   5: 696801.991 ops/s
Iteration   6: 697876.430 ops/s
Iteration   7: 696660.438 ops/s
Iteration   8: 695881.486 ops/s
Iteration   9: 694697.763 ops/s
Iteration  10: 695442.438 ops/s
Iteration  11: 696298.569 ops/s
Iteration  12: 694614.763 ops/s
Iteration  13: 697923.808 ops/s
Iteration  14: 698739.550 ops/s
Iteration  15: 697068.112 ops/s
Iteration  16: 695094.527 ops/s
Iteration  17: 698445.570 ops/s
Iteration  18: 695525.785 ops/s
Iteration  19: 696504.736 ops/s
Iteration  20: 697292.512 ops/s
Iteration  21: 694682.325 ops/s
Iteration  22: 695429.407 ops/s
Iteration  23: 697679.653 ops/s
Iteration  24: 696332.698 ops/s
Iteration  25: 695657.836 ops/s
Iteration  26: 698259.084 ops/s
Iteration  27: 697419.481 ops/s
Iteration  28: 697716.855 ops/s
Iteration  29: 697406.058 ops/s
Iteration  30: 697271.505 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectByte":
  696611.766 ±(99.9%) 840.749 ops/s [Average]
  (min, avg, max) = (694614.763, 696611.766, 698739.550), stdev = 1258.394
  CI (99.9%): [695771.017, 697452.515] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score     Error  Units
ImmutableHashBagTest._Benchmark.benchmark_collectByte  thrpt   30  696611.766 ± 840.749  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectByteWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectByteWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1120069.948 ops/s
# Warmup Iteration   2: 2508305.928 ops/s
# Warmup Iteration   3: 2610108.265 ops/s
# Warmup Iteration   4: 2432143.238 ops/s
# Warmup Iteration   5: 2344175.910 ops/s
# Warmup Iteration   6: 2613044.267 ops/s
# Warmup Iteration   7: 2604630.091 ops/s
# Warmup Iteration   8: 2617328.148 ops/s
# Warmup Iteration   9: 2616659.797 ops/s
# Warmup Iteration  10: 2619714.492 ops/s
# Warmup Iteration  11: 2612386.714 ops/s
# Warmup Iteration  12: 2607771.410 ops/s
# Warmup Iteration  13: 2612798.161 ops/s
# Warmup Iteration  14: 2612850.709 ops/s
# Warmup Iteration  15: 2616028.800 ops/s
# Warmup Iteration  16: 2614041.083 ops/s
# Warmup Iteration  17: 2611286.821 ops/s
# Warmup Iteration  18: 2613860.340 ops/s
# Warmup Iteration  19: 2613626.434 ops/s
# Warmup Iteration  20: 2612282.823 ops/s
# Warmup Iteration  21: 2614152.886 ops/s
# Warmup Iteration  22: 2616426.130 ops/s
# Warmup Iteration  23: 2612656.384 ops/s
# Warmup Iteration  24: 2611918.561 ops/s
# Warmup Iteration  25: 2608763.592 ops/s
# Warmup Iteration  26: 2608342.098 ops/s
# Warmup Iteration  27: 2615553.874 ops/s
# Warmup Iteration  28: 2612318.377 ops/s
# Warmup Iteration  29: 2617556.900 ops/s
# Warmup Iteration  30: 2613019.161 ops/s
Iteration   1: 2619068.466 ops/s
Iteration   2: 2616610.236 ops/s
Iteration   3: 2618227.782 ops/s
Iteration   4: 2609122.993 ops/s
Iteration   5: 2606175.566 ops/s
Iteration   6: 2613277.857 ops/s
Iteration   7: 2610769.346 ops/s
Iteration   8: 2613734.010 ops/s
Iteration   9: 2617848.413 ops/s
Iteration  10: 2612781.216 ops/s
Iteration  11: 2607892.143 ops/s
Iteration  12: 2612785.663 ops/s
Iteration  13: 2610071.971 ops/s
Iteration  14: 2608644.965 ops/s
Iteration  15: 2616567.682 ops/s
Iteration  16: 2620749.514 ops/s
Iteration  17: 2594769.917 ops/s
Iteration  18: 2611697.239 ops/s
Iteration  19: 2615463.070 ops/s
Iteration  20: 2610860.915 ops/s
Iteration  21: 2614438.204 ops/s
Iteration  22: 2613216.231 ops/s
Iteration  23: 2615146.552 ops/s
Iteration  24: 2615514.946 ops/s
Iteration  25: 2609727.766 ops/s
Iteration  26: 2613594.521 ops/s
Iteration  27: 2586003.352 ops/s
Iteration  28: 2610971.617 ops/s
Iteration  29: 2618655.253 ops/s
Iteration  30: 2612488.004 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectByteWithBagTarget":
  2611895.847 ±(99.9%) 4628.467 ops/s [Average]
  (min, avg, max) = (2586003.352, 2611895.847, 2620749.514), stdev = 6927.673
  CI (99.9%): [2607267.380, 2616524.314] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_collectByteWithBagTarget  thrpt   30  2611895.847 ± 4628.467  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectByteWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectByteWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 532926.766 ops/s
# Warmup Iteration   2: 1011717.981 ops/s
# Warmup Iteration   3: 1134630.690 ops/s
# Warmup Iteration   4: 1137219.754 ops/s
# Warmup Iteration   5: 1053887.531 ops/s
# Warmup Iteration   6: 1027619.603 ops/s
# Warmup Iteration   7: 1139508.049 ops/s
# Warmup Iteration   8: 1142079.006 ops/s
# Warmup Iteration   9: 1139962.237 ops/s
# Warmup Iteration  10: 1143684.586 ops/s
# Warmup Iteration  11: 1138733.121 ops/s
# Warmup Iteration  12: 1143610.928 ops/s
# Warmup Iteration  13: 1142016.479 ops/s
# Warmup Iteration  14: 1139044.911 ops/s
# Warmup Iteration  15: 1140042.635 ops/s
# Warmup Iteration  16: 1142684.145 ops/s
# Warmup Iteration  17: 1139400.621 ops/s
# Warmup Iteration  18: 1143701.776 ops/s
# Warmup Iteration  19: 1139823.567 ops/s
# Warmup Iteration  20: 1140985.450 ops/s
# Warmup Iteration  21: 1143909.915 ops/s
# Warmup Iteration  22: 1142649.052 ops/s
# Warmup Iteration  23: 1142889.900 ops/s
# Warmup Iteration  24: 1142111.673 ops/s
# Warmup Iteration  25: 1140531.488 ops/s
# Warmup Iteration  26: 1142403.192 ops/s
# Warmup Iteration  27: 1143207.510 ops/s
# Warmup Iteration  28: 1143526.994 ops/s
# Warmup Iteration  29: 1143441.697 ops/s
# Warmup Iteration  30: 1139348.311 ops/s
Iteration   1: 1141636.045 ops/s
Iteration   2: 1141027.358 ops/s
Iteration   3: 1141359.148 ops/s
Iteration   4: 1139982.473 ops/s
Iteration   5: 1139669.060 ops/s
Iteration   6: 1141883.646 ops/s
Iteration   7: 1142655.752 ops/s
Iteration   8: 1146250.114 ops/s
Iteration   9: 1138017.325 ops/s
Iteration  10: 1136068.370 ops/s
Iteration  11: 1139680.876 ops/s
Iteration  12: 1140483.472 ops/s
Iteration  13: 1139269.384 ops/s
Iteration  14: 1137621.327 ops/s
Iteration  15: 1140727.371 ops/s
Iteration  16: 1145909.704 ops/s
Iteration  17: 1141280.439 ops/s
Iteration  18: 1145516.348 ops/s
Iteration  19: 1143346.573 ops/s
Iteration  20: 1142557.031 ops/s
Iteration  21: 1140284.263 ops/s
Iteration  22: 1144389.817 ops/s
Iteration  23: 1136939.669 ops/s
Iteration  24: 1144047.582 ops/s
Iteration  25: 1141740.510 ops/s
Iteration  26: 1145091.007 ops/s
Iteration  27: 1141546.615 ops/s
Iteration  28: 1140244.000 ops/s
Iteration  29: 1143232.475 ops/s
Iteration  30: 1141581.569 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectByteWithTarget":
  1141467.977 ±(99.9%) 1716.110 ops/s [Average]
  (min, avg, max) = (1136068.370, 1141467.977, 1146250.114), stdev = 2568.593
  CI (99.9%): [1139751.868, 1143184.087] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_collectByteWithTarget  thrpt   30  1141467.977 ± 1716.110  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 321793.186 ops/s
# Warmup Iteration   2: 655022.599 ops/s
# Warmup Iteration   3: 704878.327 ops/s
# Warmup Iteration   4: 709210.371 ops/s
# Warmup Iteration   5: 590254.540 ops/s
# Warmup Iteration   6: 709000.353 ops/s
# Warmup Iteration   7: 707407.298 ops/s
# Warmup Iteration   8: 707938.333 ops/s
# Warmup Iteration   9: 708014.181 ops/s
# Warmup Iteration  10: 708924.890 ops/s
# Warmup Iteration  11: 708598.143 ops/s
# Warmup Iteration  12: 708937.894 ops/s
# Warmup Iteration  13: 707044.146 ops/s
# Warmup Iteration  14: 707991.985 ops/s
# Warmup Iteration  15: 709235.171 ops/s
# Warmup Iteration  16: 708360.149 ops/s
# Warmup Iteration  17: 708584.360 ops/s
# Warmup Iteration  18: 710025.541 ops/s
# Warmup Iteration  19: 708475.477 ops/s
# Warmup Iteration  20: 709798.210 ops/s
# Warmup Iteration  21: 709006.045 ops/s
# Warmup Iteration  22: 709201.882 ops/s
# Warmup Iteration  23: 709509.806 ops/s
# Warmup Iteration  24: 708529.308 ops/s
# Warmup Iteration  25: 710133.731 ops/s
# Warmup Iteration  26: 706221.081 ops/s
# Warmup Iteration  27: 710612.556 ops/s
# Warmup Iteration  28: 708825.485 ops/s
# Warmup Iteration  29: 709055.677 ops/s
# Warmup Iteration  30: 710407.530 ops/s
Iteration   1: 709310.385 ops/s
Iteration   2: 707114.283 ops/s
Iteration   3: 708948.228 ops/s
Iteration   4: 708678.100 ops/s
Iteration   5: 707659.851 ops/s
Iteration   6: 709275.712 ops/s
Iteration   7: 711656.632 ops/s
Iteration   8: 709648.522 ops/s
Iteration   9: 708827.134 ops/s
Iteration  10: 710641.833 ops/s
Iteration  11: 710142.502 ops/s
Iteration  12: 708801.297 ops/s
Iteration  13: 708266.125 ops/s
Iteration  14: 711110.672 ops/s
Iteration  15: 708690.497 ops/s
Iteration  16: 711139.745 ops/s
Iteration  17: 710871.814 ops/s
Iteration  18: 705111.464 ops/s
Iteration  19: 706541.774 ops/s
Iteration  20: 710926.101 ops/s
Iteration  21: 707720.841 ops/s
Iteration  22: 709046.324 ops/s
Iteration  23: 708013.244 ops/s
Iteration  24: 709161.292 ops/s
Iteration  25: 709428.482 ops/s
Iteration  26: 708018.965 ops/s
Iteration  27: 708098.931 ops/s
Iteration  28: 709193.322 ops/s
Iteration  29: 707818.430 ops/s
Iteration  30: 708022.355 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectChar":
  708929.495 ±(99.9%) 977.367 ops/s [Average]
  (min, avg, max) = (705111.464, 708929.495, 711656.632), stdev = 1462.877
  CI (99.9%): [707952.128, 709906.862] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score     Error  Units
ImmutableHashBagTest._Benchmark.benchmark_collectChar  thrpt   30  708929.495 ± 977.367  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectCharWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectCharWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1106257.811 ops/s
# Warmup Iteration   2: 2530669.004 ops/s
# Warmup Iteration   3: 2619088.113 ops/s
# Warmup Iteration   4: 2257255.767 ops/s
# Warmup Iteration   5: 2531261.907 ops/s
# Warmup Iteration   6: 2620725.913 ops/s
# Warmup Iteration   7: 2625071.640 ops/s
# Warmup Iteration   8: 2626277.320 ops/s
# Warmup Iteration   9: 2620240.188 ops/s
# Warmup Iteration  10: 2621567.267 ops/s
# Warmup Iteration  11: 2612259.393 ops/s
# Warmup Iteration  12: 2615503.362 ops/s
# Warmup Iteration  13: 2626672.165 ops/s
# Warmup Iteration  14: 2613676.717 ops/s
# Warmup Iteration  15: 2617037.226 ops/s
# Warmup Iteration  16: 2623788.354 ops/s
# Warmup Iteration  17: 2620497.120 ops/s
# Warmup Iteration  18: 2618921.753 ops/s
# Warmup Iteration  19: 2624772.182 ops/s
# Warmup Iteration  20: 2620116.313 ops/s
# Warmup Iteration  21: 2618384.012 ops/s
# Warmup Iteration  22: 2623590.495 ops/s
# Warmup Iteration  23: 2612182.463 ops/s
# Warmup Iteration  24: 2621312.832 ops/s
# Warmup Iteration  25: 2620358.762 ops/s
# Warmup Iteration  26: 2624620.793 ops/s
# Warmup Iteration  27: 2620743.399 ops/s
# Warmup Iteration  28: 2625088.361 ops/s
# Warmup Iteration  29: 2617667.703 ops/s
# Warmup Iteration  30: 2622355.799 ops/s
Iteration   1: 2623762.642 ops/s
Iteration   2: 2626898.827 ops/s
Iteration   3: 2618457.321 ops/s
Iteration   4: 2632011.681 ops/s
Iteration   5: 2621959.129 ops/s
Iteration   6: 2623008.820 ops/s
Iteration   7: 2624350.931 ops/s
Iteration   8: 2604959.881 ops/s
Iteration   9: 2630759.184 ops/s
Iteration  10: 2623435.338 ops/s
Iteration  11: 2618296.091 ops/s
Iteration  12: 2632617.349 ops/s
Iteration  13: 2632795.967 ops/s
Iteration  14: 2608050.987 ops/s
Iteration  15: 2615902.359 ops/s
Iteration  16: 2613678.825 ops/s
Iteration  17: 2622656.248 ops/s
Iteration  18: 2629774.867 ops/s
Iteration  19: 2618799.500 ops/s
Iteration  20: 2616885.279 ops/s
Iteration  21: 2602971.388 ops/s
Iteration  22: 2616398.421 ops/s
Iteration  23: 2622123.751 ops/s
Iteration  24: 2624597.593 ops/s
Iteration  25: 2623735.389 ops/s
Iteration  26: 2623402.614 ops/s
Iteration  27: 2621914.909 ops/s
Iteration  28: 2624554.059 ops/s
Iteration  29: 2622267.473 ops/s
Iteration  30: 2628103.840 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectCharWithBagTarget":
  2621637.689 ±(99.9%) 4965.710 ops/s [Average]
  (min, avg, max) = (2602971.388, 2621637.689, 2632795.967), stdev = 7432.441
  CI (99.9%): [2616671.979, 2626603.399] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_collectCharWithBagTarget  thrpt   30  2621637.689 ± 4965.710  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectCharWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectCharWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 558438.810 ops/s
# Warmup Iteration   2: 1165075.437 ops/s
# Warmup Iteration   3: 1248255.657 ops/s
# Warmup Iteration   4: 1255494.328 ops/s
# Warmup Iteration   5: 1035828.763 ops/s
# Warmup Iteration   6: 1253219.103 ops/s
# Warmup Iteration   7: 1250208.378 ops/s
# Warmup Iteration   8: 1252940.582 ops/s
# Warmup Iteration   9: 1252770.691 ops/s
# Warmup Iteration  10: 1252179.960 ops/s
# Warmup Iteration  11: 1246590.228 ops/s
# Warmup Iteration  12: 1252999.355 ops/s
# Warmup Iteration  13: 1248465.644 ops/s
# Warmup Iteration  14: 1251257.256 ops/s
# Warmup Iteration  15: 1252738.371 ops/s
# Warmup Iteration  16: 1248842.276 ops/s
# Warmup Iteration  17: 1254278.394 ops/s
# Warmup Iteration  18: 1248615.485 ops/s
# Warmup Iteration  19: 1255914.223 ops/s
# Warmup Iteration  20: 1255380.372 ops/s
# Warmup Iteration  21: 1251198.434 ops/s
# Warmup Iteration  22: 1253996.721 ops/s
# Warmup Iteration  23: 1248294.864 ops/s
# Warmup Iteration  24: 1253842.850 ops/s
# Warmup Iteration  25: 1250217.876 ops/s
# Warmup Iteration  26: 1256078.024 ops/s
# Warmup Iteration  27: 1253678.815 ops/s
# Warmup Iteration  28: 1252915.412 ops/s
# Warmup Iteration  29: 1253713.457 ops/s
# Warmup Iteration  30: 1249706.898 ops/s
Iteration   1: 1253025.312 ops/s
Iteration   2: 1256367.388 ops/s
Iteration   3: 1247193.260 ops/s
Iteration   4: 1252390.821 ops/s
Iteration   5: 1258132.571 ops/s
Iteration   6: 1250365.105 ops/s
Iteration   7: 1253519.083 ops/s
Iteration   8: 1254797.150 ops/s
Iteration   9: 1256607.039 ops/s
Iteration  10: 1254654.039 ops/s
Iteration  11: 1252214.624 ops/s
Iteration  12: 1260155.153 ops/s
Iteration  13: 1255470.913 ops/s
Iteration  14: 1256790.228 ops/s
Iteration  15: 1251450.972 ops/s
Iteration  16: 1250600.668 ops/s
Iteration  17: 1251200.004 ops/s
Iteration  18: 1251097.256 ops/s
Iteration  19: 1255765.543 ops/s
Iteration  20: 1248357.436 ops/s
Iteration  21: 1252919.338 ops/s
Iteration  22: 1255759.898 ops/s
Iteration  23: 1257065.706 ops/s
Iteration  24: 1254231.634 ops/s
Iteration  25: 1255422.604 ops/s
Iteration  26: 1254173.326 ops/s
Iteration  27: 1252392.919 ops/s
Iteration  28: 1256445.179 ops/s
Iteration  29: 1254787.179 ops/s
Iteration  30: 1258243.487 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectCharWithTarget":
  1254053.194 ±(99.9%) 1989.033 ops/s [Average]
  (min, avg, max) = (1247193.260, 1254053.194, 1260155.153), stdev = 2977.091
  CI (99.9%): [1252064.161, 1256042.228] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_collectCharWithTarget  thrpt   30  1254053.194 ± 1989.033  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 237968.950 ops/s
# Warmup Iteration   2: 509472.149 ops/s
# Warmup Iteration   3: 531209.069 ops/s
# Warmup Iteration   4: 535628.723 ops/s
# Warmup Iteration   5: 448430.182 ops/s
# Warmup Iteration   6: 531332.151 ops/s
# Warmup Iteration   7: 534483.568 ops/s
# Warmup Iteration   8: 534241.457 ops/s
# Warmup Iteration   9: 534188.680 ops/s
# Warmup Iteration  10: 532399.906 ops/s
# Warmup Iteration  11: 531843.794 ops/s
# Warmup Iteration  12: 533564.517 ops/s
# Warmup Iteration  13: 533439.909 ops/s
# Warmup Iteration  14: 533304.202 ops/s
# Warmup Iteration  15: 530588.935 ops/s
# Warmup Iteration  16: 533410.372 ops/s
# Warmup Iteration  17: 532791.891 ops/s
# Warmup Iteration  18: 532121.987 ops/s
# Warmup Iteration  19: 531208.640 ops/s
# Warmup Iteration  20: 531666.389 ops/s
# Warmup Iteration  21: 529163.324 ops/s
# Warmup Iteration  22: 530715.181 ops/s
# Warmup Iteration  23: 531956.578 ops/s
# Warmup Iteration  24: 532203.456 ops/s
# Warmup Iteration  25: 535159.894 ops/s
# Warmup Iteration  26: 534037.276 ops/s
# Warmup Iteration  27: 533990.900 ops/s
# Warmup Iteration  28: 532333.177 ops/s
# Warmup Iteration  29: 531018.338 ops/s
# Warmup Iteration  30: 534792.972 ops/s
Iteration   1: 532778.310 ops/s
Iteration   2: 531310.889 ops/s
Iteration   3: 531984.853 ops/s
Iteration   4: 529730.834 ops/s
Iteration   5: 533333.920 ops/s
Iteration   6: 530378.125 ops/s
Iteration   7: 531469.898 ops/s
Iteration   8: 534446.577 ops/s
Iteration   9: 530858.498 ops/s
Iteration  10: 534948.186 ops/s
Iteration  11: 531711.146 ops/s
Iteration  12: 534445.176 ops/s
Iteration  13: 535981.124 ops/s
Iteration  14: 534519.315 ops/s
Iteration  15: 537248.138 ops/s
Iteration  16: 533014.027 ops/s
Iteration  17: 532629.766 ops/s
Iteration  18: 532244.307 ops/s
Iteration  19: 535198.973 ops/s
Iteration  20: 532726.238 ops/s
Iteration  21: 533773.469 ops/s
Iteration  22: 533808.594 ops/s
Iteration  23: 533249.982 ops/s
Iteration  24: 530341.298 ops/s
Iteration  25: 532242.914 ops/s
Iteration  26: 529407.346 ops/s
Iteration  27: 534925.973 ops/s
Iteration  28: 530171.212 ops/s
Iteration  29: 534104.089 ops/s
Iteration  30: 532263.002 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectDouble":
  532841.539 ±(99.9%) 1287.030 ops/s [Average]
  (min, avg, max) = (529407.346, 532841.539, 537248.138), stdev = 1926.366
  CI (99.9%): [531554.510, 534128.569] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_collectDouble  thrpt   30  532841.539 ± 1287.030  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectDoubleWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectDoubleWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 903238.320 ops/s
# Warmup Iteration   2: 2161620.699 ops/s
# Warmup Iteration   3: 2195304.084 ops/s
# Warmup Iteration   4: 1821744.778 ops/s
# Warmup Iteration   5: 2190017.075 ops/s
# Warmup Iteration   6: 2200441.458 ops/s
# Warmup Iteration   7: 2193072.909 ops/s
# Warmup Iteration   8: 2188873.596 ops/s
# Warmup Iteration   9: 2195676.929 ops/s
# Warmup Iteration  10: 2183086.121 ops/s
# Warmup Iteration  11: 2194762.588 ops/s
# Warmup Iteration  12: 2199673.097 ops/s
# Warmup Iteration  13: 2188022.018 ops/s
# Warmup Iteration  14: 2198138.824 ops/s
# Warmup Iteration  15: 2188374.406 ops/s
# Warmup Iteration  16: 2193489.696 ops/s
# Warmup Iteration  17: 2188175.709 ops/s
# Warmup Iteration  18: 2196576.015 ops/s
# Warmup Iteration  19: 2199899.987 ops/s
# Warmup Iteration  20: 2191705.410 ops/s
# Warmup Iteration  21: 2195260.427 ops/s
# Warmup Iteration  22: 2183362.489 ops/s
# Warmup Iteration  23: 2187806.775 ops/s
# Warmup Iteration  24: 2186278.404 ops/s
# Warmup Iteration  25: 2190875.232 ops/s
# Warmup Iteration  26: 2193295.451 ops/s
# Warmup Iteration  27: 2193115.081 ops/s
# Warmup Iteration  28: 2179661.776 ops/s
# Warmup Iteration  29: 2195540.848 ops/s
# Warmup Iteration  30: 2188283.137 ops/s
Iteration   1: 2194872.062 ops/s
Iteration   2: 2190424.440 ops/s
Iteration   3: 2197221.714 ops/s
Iteration   4: 2187843.374 ops/s
Iteration   5: 2197724.110 ops/s
Iteration   6: 2188716.306 ops/s
Iteration   7: 2196093.458 ops/s
Iteration   8: 2197447.924 ops/s
Iteration   9: 2190456.800 ops/s
Iteration  10: 2205208.355 ops/s
Iteration  11: 2204042.114 ops/s
Iteration  12: 2184832.808 ops/s
Iteration  13: 2195434.183 ops/s
Iteration  14: 2189806.299 ops/s
Iteration  15: 2198448.841 ops/s
Iteration  16: 2181639.173 ops/s
Iteration  17: 2188290.826 ops/s
Iteration  18: 2178581.013 ops/s
Iteration  19: 2199385.135 ops/s
Iteration  20: 2188687.870 ops/s
Iteration  21: 2195331.654 ops/s
Iteration  22: 2196321.132 ops/s
Iteration  23: 2195150.999 ops/s
Iteration  24: 2194223.985 ops/s
Iteration  25: 2197620.833 ops/s
Iteration  26: 2192916.229 ops/s
Iteration  27: 2184377.012 ops/s
Iteration  28: 2203266.952 ops/s
Iteration  29: 2200730.625 ops/s
Iteration  30: 2188701.197 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectDoubleWithBagTarget":
  2193459.914 ±(99.9%) 4348.773 ops/s [Average]
  (min, avg, max) = (2178581.013, 2193459.914, 2205208.355), stdev = 6509.039
  CI (99.9%): [2189111.141, 2197808.687] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_collectDoubleWithBagTarget  thrpt   30  2193459.914 ± 4348.773  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectDoubleWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectDoubleWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 399843.508 ops/s
# Warmup Iteration   2: 802855.463 ops/s
# Warmup Iteration   3: 866865.241 ops/s
# Warmup Iteration   4: 873269.621 ops/s
# Warmup Iteration   5: 726613.214 ops/s
# Warmup Iteration   6: 874909.966 ops/s
# Warmup Iteration   7: 875801.675 ops/s
# Warmup Iteration   8: 875631.827 ops/s
# Warmup Iteration   9: 874752.485 ops/s
# Warmup Iteration  10: 872797.001 ops/s
# Warmup Iteration  11: 873439.812 ops/s
# Warmup Iteration  12: 869943.951 ops/s
# Warmup Iteration  13: 873675.692 ops/s
# Warmup Iteration  14: 876571.626 ops/s
# Warmup Iteration  15: 875733.358 ops/s
# Warmup Iteration  16: 871578.395 ops/s
# Warmup Iteration  17: 874194.749 ops/s
# Warmup Iteration  18: 873474.308 ops/s
# Warmup Iteration  19: 875657.743 ops/s
# Warmup Iteration  20: 874294.482 ops/s
# Warmup Iteration  21: 874392.729 ops/s
# Warmup Iteration  22: 875575.905 ops/s
# Warmup Iteration  23: 870443.975 ops/s
# Warmup Iteration  24: 873804.281 ops/s
# Warmup Iteration  25: 872321.458 ops/s
# Warmup Iteration  26: 872336.624 ops/s
# Warmup Iteration  27: 874313.946 ops/s
# Warmup Iteration  28: 871856.228 ops/s
# Warmup Iteration  29: 869346.407 ops/s
# Warmup Iteration  30: 873253.281 ops/s
Iteration   1: 870912.934 ops/s
Iteration   2: 874547.318 ops/s
Iteration   3: 874969.004 ops/s
Iteration   4: 868106.815 ops/s
Iteration   5: 869648.276 ops/s
Iteration   6: 874362.434 ops/s
Iteration   7: 870222.797 ops/s
Iteration   8: 873741.073 ops/s
Iteration   9: 874079.714 ops/s
Iteration  10: 872486.378 ops/s
Iteration  11: 875764.673 ops/s
Iteration  12: 874028.407 ops/s
Iteration  13: 871744.994 ops/s
Iteration  14: 874763.848 ops/s
Iteration  15: 873739.523 ops/s
Iteration  16: 868353.472 ops/s
Iteration  17: 872879.378 ops/s
Iteration  18: 873401.366 ops/s
Iteration  19: 875097.412 ops/s
Iteration  20: 869003.556 ops/s
Iteration  21: 876352.708 ops/s
Iteration  22: 871400.742 ops/s
Iteration  23: 873096.993 ops/s
Iteration  24: 873637.109 ops/s
Iteration  25: 873288.688 ops/s
Iteration  26: 869492.658 ops/s
Iteration  27: 874232.183 ops/s
Iteration  28: 872903.829 ops/s
Iteration  29: 875401.094 ops/s
Iteration  30: 870740.645 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectDoubleWithTarget":
  872746.667 ±(99.9%) 1521.982 ops/s [Average]
  (min, avg, max) = (868106.815, 872746.667, 876352.708), stdev = 2278.032
  CI (99.9%): [871224.685, 874268.650] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_collectDoubleWithTarget  thrpt   30  872746.667 ± 1521.982  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 263163.736 ops/s
# Warmup Iteration   2: 530663.250 ops/s
# Warmup Iteration   3: 574571.235 ops/s
# Warmup Iteration   4: 576968.598 ops/s
# Warmup Iteration   5: 479835.251 ops/s
# Warmup Iteration   6: 577807.366 ops/s
# Warmup Iteration   7: 576914.835 ops/s
# Warmup Iteration   8: 576964.359 ops/s
# Warmup Iteration   9: 577380.956 ops/s
# Warmup Iteration  10: 575277.979 ops/s
# Warmup Iteration  11: 577617.203 ops/s
# Warmup Iteration  12: 576721.910 ops/s
# Warmup Iteration  13: 576096.207 ops/s
# Warmup Iteration  14: 577308.495 ops/s
# Warmup Iteration  15: 575653.240 ops/s
# Warmup Iteration  16: 575202.068 ops/s
# Warmup Iteration  17: 577804.319 ops/s
# Warmup Iteration  18: 576485.002 ops/s
# Warmup Iteration  19: 575801.297 ops/s
# Warmup Iteration  20: 576841.194 ops/s
# Warmup Iteration  21: 576346.825 ops/s
# Warmup Iteration  22: 578052.421 ops/s
# Warmup Iteration  23: 577747.069 ops/s
# Warmup Iteration  24: 575020.530 ops/s
# Warmup Iteration  25: 575720.782 ops/s
# Warmup Iteration  26: 576265.772 ops/s
# Warmup Iteration  27: 576661.095 ops/s
# Warmup Iteration  28: 577308.534 ops/s
# Warmup Iteration  29: 577466.060 ops/s
# Warmup Iteration  30: 578010.499 ops/s
Iteration   1: 577306.959 ops/s
Iteration   2: 576850.894 ops/s
Iteration   3: 576146.097 ops/s
Iteration   4: 575256.372 ops/s
Iteration   5: 578418.157 ops/s
Iteration   6: 577001.850 ops/s
Iteration   7: 577136.216 ops/s
Iteration   8: 578052.709 ops/s
Iteration   9: 575918.694 ops/s
Iteration  10: 577320.224 ops/s
Iteration  11: 576414.334 ops/s
Iteration  12: 577744.392 ops/s
Iteration  13: 577128.014 ops/s
Iteration  14: 576061.607 ops/s
Iteration  15: 577911.333 ops/s
Iteration  16: 576893.365 ops/s
Iteration  17: 576782.806 ops/s
Iteration  18: 575562.763 ops/s
Iteration  19: 576447.177 ops/s
Iteration  20: 575824.682 ops/s
Iteration  21: 574594.239 ops/s
Iteration  22: 577758.375 ops/s
Iteration  23: 577358.506 ops/s
Iteration  24: 577493.099 ops/s
Iteration  25: 577676.524 ops/s
Iteration  26: 577281.981 ops/s
Iteration  27: 578673.227 ops/s
Iteration  28: 577094.716 ops/s
Iteration  29: 577388.527 ops/s
Iteration  30: 578120.526 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectFloat":
  576987.279 ±(99.9%) 635.203 ops/s [Average]
  (min, avg, max) = (574594.239, 576987.279, 578673.227), stdev = 950.741
  CI (99.9%): [576352.076, 577622.481] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score     Error  Units
ImmutableHashBagTest._Benchmark.benchmark_collectFloat  thrpt   30  576987.279 ± 635.203  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectFloatWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectFloatWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1021838.030 ops/s
# Warmup Iteration   2: 2384650.529 ops/s
# Warmup Iteration   3: 2467730.316 ops/s
# Warmup Iteration   4: 2044652.336 ops/s
# Warmup Iteration   5: 2476643.817 ops/s
# Warmup Iteration   6: 2469520.281 ops/s
# Warmup Iteration   7: 2473034.925 ops/s
# Warmup Iteration   8: 2466249.177 ops/s
# Warmup Iteration   9: 2468964.440 ops/s
# Warmup Iteration  10: 2470081.728 ops/s
# Warmup Iteration  11: 2467485.094 ops/s
# Warmup Iteration  12: 2476426.194 ops/s
# Warmup Iteration  13: 2475571.337 ops/s
# Warmup Iteration  14: 2465845.689 ops/s
# Warmup Iteration  15: 2462746.374 ops/s
# Warmup Iteration  16: 2467770.590 ops/s
# Warmup Iteration  17: 2437545.860 ops/s
# Warmup Iteration  18: 2445823.538 ops/s
# Warmup Iteration  19: 2451494.463 ops/s
# Warmup Iteration  20: 2452154.175 ops/s
# Warmup Iteration  21: 2444927.221 ops/s
# Warmup Iteration  22: 2453877.632 ops/s
# Warmup Iteration  23: 2456351.631 ops/s
# Warmup Iteration  24: 2456083.181 ops/s
# Warmup Iteration  25: 2453926.604 ops/s
# Warmup Iteration  26: 2454744.535 ops/s
# Warmup Iteration  27: 2454772.656 ops/s
# Warmup Iteration  28: 2452007.875 ops/s
# Warmup Iteration  29: 2452254.214 ops/s
# Warmup Iteration  30: 2451406.377 ops/s
Iteration   1: 2437288.491 ops/s
Iteration   2: 2450667.792 ops/s
Iteration   3: 2444821.379 ops/s
Iteration   4: 2442908.082 ops/s
Iteration   5: 2453614.668 ops/s
Iteration   6: 2442679.721 ops/s
Iteration   7: 2461800.649 ops/s
Iteration   8: 2453594.595 ops/s
Iteration   9: 2458471.779 ops/s
Iteration  10: 2443491.233 ops/s
Iteration  11: 2454696.772 ops/s
Iteration  12: 2449857.430 ops/s
Iteration  13: 2457003.459 ops/s
Iteration  14: 2455857.363 ops/s
Iteration  15: 2460379.277 ops/s
Iteration  16: 2454227.015 ops/s
Iteration  17: 2451953.670 ops/s
Iteration  18: 2446615.121 ops/s
Iteration  19: 2449220.398 ops/s
Iteration  20: 2448140.605 ops/s
Iteration  21: 2457460.877 ops/s
Iteration  22: 2455854.714 ops/s
Iteration  23: 2453139.254 ops/s
Iteration  24: 2448251.582 ops/s
Iteration  25: 2452407.527 ops/s
Iteration  26: 2441536.078 ops/s
Iteration  27: 2453094.542 ops/s
Iteration  28: 2456116.438 ops/s
Iteration  29: 2455843.535 ops/s
Iteration  30: 2455047.975 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectFloatWithBagTarget":
  2451534.734 ±(99.9%) 3998.530 ops/s [Average]
  (min, avg, max) = (2437288.491, 2451534.734, 2461800.649), stdev = 5984.812
  CI (99.9%): [2447536.204, 2455533.264] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_collectFloatWithBagTarget  thrpt   30  2451534.734 ± 3998.530  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectFloatWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectFloatWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 436788.046 ops/s
# Warmup Iteration   2: 871496.896 ops/s
# Warmup Iteration   3: 949974.862 ops/s
# Warmup Iteration   4: 955607.158 ops/s
# Warmup Iteration   5: 794920.993 ops/s
# Warmup Iteration   6: 955715.117 ops/s
# Warmup Iteration   7: 954327.532 ops/s
# Warmup Iteration   8: 956565.543 ops/s
# Warmup Iteration   9: 956028.046 ops/s
# Warmup Iteration  10: 954352.424 ops/s
# Warmup Iteration  11: 954678.621 ops/s
# Warmup Iteration  12: 951235.662 ops/s
# Warmup Iteration  13: 952002.289 ops/s
# Warmup Iteration  14: 954906.842 ops/s
# Warmup Iteration  15: 954475.217 ops/s
# Warmup Iteration  16: 954026.295 ops/s
# Warmup Iteration  17: 953912.523 ops/s
# Warmup Iteration  18: 954059.427 ops/s
# Warmup Iteration  19: 955419.696 ops/s
# Warmup Iteration  20: 954134.822 ops/s
# Warmup Iteration  21: 954765.251 ops/s
# Warmup Iteration  22: 955566.402 ops/s
# Warmup Iteration  23: 956002.696 ops/s
# Warmup Iteration  24: 956594.277 ops/s
# Warmup Iteration  25: 957658.551 ops/s
# Warmup Iteration  26: 954229.448 ops/s
# Warmup Iteration  27: 953416.128 ops/s
# Warmup Iteration  28: 958004.602 ops/s
# Warmup Iteration  29: 955597.624 ops/s
# Warmup Iteration  30: 956956.115 ops/s
Iteration   1: 954432.838 ops/s
Iteration   2: 959304.640 ops/s
Iteration   3: 955686.573 ops/s
Iteration   4: 952791.235 ops/s
Iteration   5: 957778.983 ops/s
Iteration   6: 949304.171 ops/s
Iteration   7: 955343.406 ops/s
Iteration   8: 953994.208 ops/s
Iteration   9: 954839.588 ops/s
Iteration  10: 956513.460 ops/s
Iteration  11: 960272.943 ops/s
Iteration  12: 958745.813 ops/s
Iteration  13: 954250.203 ops/s
Iteration  14: 957297.622 ops/s
Iteration  15: 957506.968 ops/s
Iteration  16: 956000.171 ops/s
Iteration  17: 951610.755 ops/s
Iteration  18: 957442.574 ops/s
Iteration  19: 953841.466 ops/s
Iteration  20: 948451.520 ops/s
Iteration  21: 956252.356 ops/s
Iteration  22: 952635.826 ops/s
Iteration  23: 952565.542 ops/s
Iteration  24: 956606.556 ops/s
Iteration  25: 958062.309 ops/s
Iteration  26: 957612.676 ops/s
Iteration  27: 952678.355 ops/s
Iteration  28: 952120.097 ops/s
Iteration  29: 955392.899 ops/s
Iteration  30: 957624.838 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectFloatWithTarget":
  955232.020 ±(99.9%) 1903.644 ops/s [Average]
  (min, avg, max) = (948451.520, 955232.020, 960272.943), stdev = 2849.285
  CI (99.9%): [953328.376, 957135.664] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_collectFloatWithTarget  thrpt   30  955232.020 ± 1903.644  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 279338.031 ops/s
# Warmup Iteration   2: 527110.134 ops/s
# Warmup Iteration   3: 595569.037 ops/s
# Warmup Iteration   4: 598999.033 ops/s
# Warmup Iteration   5: 567343.806 ops/s
# Warmup Iteration   6: 529218.513 ops/s
# Warmup Iteration   7: 599868.240 ops/s
# Warmup Iteration   8: 599896.618 ops/s
# Warmup Iteration   9: 601747.859 ops/s
# Warmup Iteration  10: 600726.824 ops/s
# Warmup Iteration  11: 600111.812 ops/s
# Warmup Iteration  12: 600482.736 ops/s
# Warmup Iteration  13: 600468.706 ops/s
# Warmup Iteration  14: 600212.609 ops/s
# Warmup Iteration  15: 598964.235 ops/s
# Warmup Iteration  16: 600019.124 ops/s
# Warmup Iteration  17: 600068.781 ops/s
# Warmup Iteration  18: 602681.742 ops/s
# Warmup Iteration  19: 602681.331 ops/s
# Warmup Iteration  20: 600498.745 ops/s
# Warmup Iteration  21: 600236.413 ops/s
# Warmup Iteration  22: 601160.057 ops/s
# Warmup Iteration  23: 600277.990 ops/s
# Warmup Iteration  24: 600763.595 ops/s
# Warmup Iteration  25: 601674.896 ops/s
# Warmup Iteration  26: 601891.426 ops/s
# Warmup Iteration  27: 601153.624 ops/s
# Warmup Iteration  28: 601243.555 ops/s
# Warmup Iteration  29: 599284.118 ops/s
# Warmup Iteration  30: 601867.651 ops/s
Iteration   1: 598912.387 ops/s
Iteration   2: 602001.677 ops/s
Iteration   3: 600719.369 ops/s
Iteration   4: 599761.144 ops/s
Iteration   5: 598164.700 ops/s
Iteration   6: 599673.519 ops/s
Iteration   7: 601288.755 ops/s
Iteration   8: 600578.596 ops/s
Iteration   9: 602055.174 ops/s
Iteration  10: 601173.337 ops/s
Iteration  11: 600495.679 ops/s
Iteration  12: 601476.275 ops/s
Iteration  13: 602796.344 ops/s
Iteration  14: 598854.048 ops/s
Iteration  15: 603184.001 ops/s
Iteration  16: 598539.274 ops/s
Iteration  17: 601162.439 ops/s
Iteration  18: 595212.389 ops/s
Iteration  19: 601694.884 ops/s
Iteration  20: 601820.391 ops/s
Iteration  21: 599981.467 ops/s
Iteration  22: 599324.741 ops/s
Iteration  23: 602162.510 ops/s
Iteration  24: 602316.780 ops/s
Iteration  25: 602995.873 ops/s
Iteration  26: 603073.239 ops/s
Iteration  27: 599900.550 ops/s
Iteration  28: 601213.699 ops/s
Iteration  29: 600866.442 ops/s
Iteration  30: 602865.742 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectIf":
  600808.848 ±(99.9%) 1182.618 ops/s [Average]
  (min, avg, max) = (595212.389, 600808.848, 603184.001), stdev = 1770.086
  CI (99.9%): [599626.230, 601991.465] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_collectIf  thrpt   30  600808.848 ± 1182.618  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectIfWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectIfWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1012530.756 ops/s
# Warmup Iteration   2: 1774645.422 ops/s
# Warmup Iteration   3: 2031971.212 ops/s
# Warmup Iteration   4: 2043687.380 ops/s
# Warmup Iteration   5: 2041700.357 ops/s
# Warmup Iteration   6: 1669966.073 ops/s
# Warmup Iteration   7: 2052834.425 ops/s
# Warmup Iteration   8: 2054350.997 ops/s
# Warmup Iteration   9: 2048944.278 ops/s
# Warmup Iteration  10: 2052708.723 ops/s
# Warmup Iteration  11: 2048969.704 ops/s
# Warmup Iteration  12: 2048624.505 ops/s
# Warmup Iteration  13: 2051586.360 ops/s
# Warmup Iteration  14: 2050583.226 ops/s
# Warmup Iteration  15: 2044052.601 ops/s
# Warmup Iteration  16: 2053205.839 ops/s
# Warmup Iteration  17: 2049403.871 ops/s
# Warmup Iteration  18: 2043220.111 ops/s
# Warmup Iteration  19: 2053708.031 ops/s
# Warmup Iteration  20: 2052331.777 ops/s
# Warmup Iteration  21: 2049214.206 ops/s
# Warmup Iteration  22: 2054592.728 ops/s
# Warmup Iteration  23: 2048661.730 ops/s
# Warmup Iteration  24: 2056952.822 ops/s
# Warmup Iteration  25: 2042653.015 ops/s
# Warmup Iteration  26: 2056881.554 ops/s
# Warmup Iteration  27: 2051787.891 ops/s
# Warmup Iteration  28: 2047083.480 ops/s
# Warmup Iteration  29: 2054459.767 ops/s
# Warmup Iteration  30: 2053761.832 ops/s
Iteration   1: 2051018.243 ops/s
Iteration   2: 2052644.065 ops/s
Iteration   3: 2042664.294 ops/s
Iteration   4: 2046219.675 ops/s
Iteration   5: 2054768.044 ops/s
Iteration   6: 2052031.814 ops/s
Iteration   7: 2054741.194 ops/s
Iteration   8: 2052004.001 ops/s
Iteration   9: 2056170.196 ops/s
Iteration  10: 2054566.749 ops/s
Iteration  11: 2054122.645 ops/s
Iteration  12: 2052951.604 ops/s
Iteration  13: 2049959.279 ops/s
Iteration  14: 2057028.659 ops/s
Iteration  15: 2050730.835 ops/s
Iteration  16: 2050968.922 ops/s
Iteration  17: 2049762.904 ops/s
Iteration  18: 2057230.951 ops/s
Iteration  19: 2048753.267 ops/s
Iteration  20: 2053251.660 ops/s
Iteration  21: 2056337.803 ops/s
Iteration  22: 2046064.338 ops/s
Iteration  23: 2057272.265 ops/s
Iteration  24: 2053419.693 ops/s
Iteration  25: 2043303.719 ops/s
Iteration  26: 2052065.946 ops/s
Iteration  27: 2052596.269 ops/s
Iteration  28: 2052477.293 ops/s
Iteration  29: 2051762.415 ops/s
Iteration  30: 2057726.095 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectIfWithTarget":
  2052153.828 ±(99.9%) 2588.551 ops/s [Average]
  (min, avg, max) = (2042664.294, 2052153.828, 2057726.095), stdev = 3874.422
  CI (99.9%): [2049565.277, 2054742.379] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_collectIfWithTarget  thrpt   30  2052153.828 ± 2588.551  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 311001.101 ops/s
# Warmup Iteration   2: 672599.489 ops/s
# Warmup Iteration   3: 712762.149 ops/s
# Warmup Iteration   4: 714979.741 ops/s
# Warmup Iteration   5: 593892.956 ops/s
# Warmup Iteration   6: 717461.545 ops/s
# Warmup Iteration   7: 715773.226 ops/s
# Warmup Iteration   8: 714968.704 ops/s
# Warmup Iteration   9: 715453.727 ops/s
# Warmup Iteration  10: 717012.366 ops/s
# Warmup Iteration  11: 716174.448 ops/s
# Warmup Iteration  12: 715363.404 ops/s
# Warmup Iteration  13: 716999.229 ops/s
# Warmup Iteration  14: 716558.056 ops/s
# Warmup Iteration  15: 716059.833 ops/s
# Warmup Iteration  16: 718135.780 ops/s
# Warmup Iteration  17: 717704.230 ops/s
# Warmup Iteration  18: 714847.189 ops/s
# Warmup Iteration  19: 716919.450 ops/s
# Warmup Iteration  20: 716437.497 ops/s
# Warmup Iteration  21: 717294.953 ops/s
# Warmup Iteration  22: 714206.823 ops/s
# Warmup Iteration  23: 711411.731 ops/s
# Warmup Iteration  24: 716189.314 ops/s
# Warmup Iteration  25: 712398.437 ops/s
# Warmup Iteration  26: 716102.637 ops/s
# Warmup Iteration  27: 717645.725 ops/s
# Warmup Iteration  28: 715919.326 ops/s
# Warmup Iteration  29: 717102.880 ops/s
# Warmup Iteration  30: 718267.469 ops/s
Iteration   1: 717380.318 ops/s
Iteration   2: 716235.063 ops/s
Iteration   3: 719538.693 ops/s
Iteration   4: 714798.821 ops/s
Iteration   5: 716532.057 ops/s
Iteration   6: 717414.903 ops/s
Iteration   7: 717056.935 ops/s
Iteration   8: 710666.661 ops/s
Iteration   9: 712761.165 ops/s
Iteration  10: 717639.203 ops/s
Iteration  11: 716679.653 ops/s
Iteration  12: 716278.422 ops/s
Iteration  13: 710265.327 ops/s
Iteration  14: 717303.728 ops/s
Iteration  15: 718911.119 ops/s
Iteration  16: 717219.971 ops/s
Iteration  17: 717728.967 ops/s
Iteration  18: 716778.254 ops/s
Iteration  19: 717200.399 ops/s
Iteration  20: 717252.727 ops/s
Iteration  21: 714127.350 ops/s
Iteration  22: 715121.510 ops/s
Iteration  23: 716956.435 ops/s
Iteration  24: 716109.420 ops/s
Iteration  25: 716685.127 ops/s
Iteration  26: 715133.770 ops/s
Iteration  27: 717662.750 ops/s
Iteration  28: 715102.813 ops/s
Iteration  29: 717986.833 ops/s
Iteration  30: 718044.579 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectInt":
  716285.766 ±(99.9%) 1405.372 ops/s [Average]
  (min, avg, max) = (710265.327, 716285.766, 719538.693), stdev = 2103.494
  CI (99.9%): [714880.394, 717691.137] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_collectInt  thrpt   30  716285.766 ± 1405.372  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectIntWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectIntWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1053688.068 ops/s
# Warmup Iteration   2: 2332908.416 ops/s
# Warmup Iteration   3: 2418611.147 ops/s
# Warmup Iteration   4: 2301650.377 ops/s
# Warmup Iteration   5: 2136712.415 ops/s
# Warmup Iteration   6: 2428349.021 ops/s
# Warmup Iteration   7: 2413821.987 ops/s
# Warmup Iteration   8: 2428474.663 ops/s
# Warmup Iteration   9: 2423619.683 ops/s
# Warmup Iteration  10: 2419319.996 ops/s
# Warmup Iteration  11: 2417864.771 ops/s
# Warmup Iteration  12: 2424711.019 ops/s
# Warmup Iteration  13: 2428212.687 ops/s
# Warmup Iteration  14: 2420548.083 ops/s
# Warmup Iteration  15: 2431347.486 ops/s
# Warmup Iteration  16: 2413984.057 ops/s
# Warmup Iteration  17: 2423464.741 ops/s
# Warmup Iteration  18: 2425608.629 ops/s
# Warmup Iteration  19: 2423193.796 ops/s
# Warmup Iteration  20: 2419956.552 ops/s
# Warmup Iteration  21: 2424359.461 ops/s
# Warmup Iteration  22: 2420508.687 ops/s
# Warmup Iteration  23: 2428632.258 ops/s
# Warmup Iteration  24: 2419318.603 ops/s
# Warmup Iteration  25: 2427330.959 ops/s
# Warmup Iteration  26: 2416966.362 ops/s
# Warmup Iteration  27: 2433791.501 ops/s
# Warmup Iteration  28: 2432454.831 ops/s
# Warmup Iteration  29: 2423331.611 ops/s
# Warmup Iteration  30: 2433186.545 ops/s
Iteration   1: 2429118.694 ops/s
Iteration   2: 2426186.283 ops/s
Iteration   3: 2429739.393 ops/s
Iteration   4: 2425986.928 ops/s
Iteration   5: 2427632.266 ops/s
Iteration   6: 2415101.605 ops/s
Iteration   7: 2415103.053 ops/s
Iteration   8: 2436482.222 ops/s
Iteration   9: 2432428.811 ops/s
Iteration  10: 2424703.005 ops/s
Iteration  11: 2425566.856 ops/s
Iteration  12: 2428941.735 ops/s
Iteration  13: 2406993.530 ops/s
Iteration  14: 2408192.764 ops/s
Iteration  15: 2422277.623 ops/s
Iteration  16: 2433855.640 ops/s
Iteration  17: 2431416.021 ops/s
Iteration  18: 2418697.768 ops/s
Iteration  19: 2431082.151 ops/s
Iteration  20: 2433761.598 ops/s
Iteration  21: 2427538.306 ops/s
Iteration  22: 2429535.210 ops/s
Iteration  23: 2425485.151 ops/s
Iteration  24: 2411421.114 ops/s
Iteration  25: 2434190.725 ops/s
Iteration  26: 2418183.053 ops/s
Iteration  27: 2437019.661 ops/s
Iteration  28: 2429572.183 ops/s
Iteration  29: 2408551.063 ops/s
Iteration  30: 2424824.229 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectIntWithBagTarget":
  2424986.288 ±(99.9%) 5703.467 ops/s [Average]
  (min, avg, max) = (2406993.530, 2424986.288, 2437019.661), stdev = 8536.682
  CI (99.9%): [2419282.821, 2430689.755] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_collectIntWithBagTarget  thrpt   30  2424986.288 ± 5703.467  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectIntWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectIntWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 517035.342 ops/s
# Warmup Iteration   2: 997537.853 ops/s
# Warmup Iteration   3: 1105540.843 ops/s
# Warmup Iteration   4: 1114656.141 ops/s
# Warmup Iteration   5: 935760.583 ops/s
# Warmup Iteration   6: 1098782.788 ops/s
# Warmup Iteration   7: 1113084.653 ops/s
# Warmup Iteration   8: 1116965.237 ops/s
# Warmup Iteration   9: 1113115.462 ops/s
# Warmup Iteration  10: 1114072.404 ops/s
# Warmup Iteration  11: 1116389.073 ops/s
# Warmup Iteration  12: 1113450.996 ops/s
# Warmup Iteration  13: 1114243.861 ops/s
# Warmup Iteration  14: 1115718.252 ops/s
# Warmup Iteration  15: 1113908.319 ops/s
# Warmup Iteration  16: 1114311.826 ops/s
# Warmup Iteration  17: 1114457.222 ops/s
# Warmup Iteration  18: 1110628.560 ops/s
# Warmup Iteration  19: 1111289.462 ops/s
# Warmup Iteration  20: 1109305.453 ops/s
# Warmup Iteration  21: 1113190.047 ops/s
# Warmup Iteration  22: 1113102.685 ops/s
# Warmup Iteration  23: 1112799.567 ops/s
# Warmup Iteration  24: 1114559.973 ops/s
# Warmup Iteration  25: 1115656.737 ops/s
# Warmup Iteration  26: 1114592.752 ops/s
# Warmup Iteration  27: 1115373.248 ops/s
# Warmup Iteration  28: 1117551.252 ops/s
# Warmup Iteration  29: 1115403.191 ops/s
# Warmup Iteration  30: 1111993.900 ops/s
Iteration   1: 1116403.808 ops/s
Iteration   2: 1111556.672 ops/s
Iteration   3: 1107155.797 ops/s
Iteration   4: 1110661.953 ops/s
Iteration   5: 1105528.000 ops/s
Iteration   6: 1112593.511 ops/s
Iteration   7: 1118318.329 ops/s
Iteration   8: 1114860.452 ops/s
Iteration   9: 1107443.108 ops/s
Iteration  10: 1116032.469 ops/s
Iteration  11: 1112621.439 ops/s
Iteration  12: 1111864.060 ops/s
Iteration  13: 1116568.935 ops/s
Iteration  14: 1114344.828 ops/s
Iteration  15: 1114674.936 ops/s
Iteration  16: 1114167.258 ops/s
Iteration  17: 1111716.399 ops/s
Iteration  18: 1116923.258 ops/s
Iteration  19: 1108017.847 ops/s
Iteration  20: 1112733.441 ops/s
Iteration  21: 1114150.808 ops/s
Iteration  22: 1112927.992 ops/s
Iteration  23: 1112215.925 ops/s
Iteration  24: 1115936.167 ops/s
Iteration  25: 1111482.854 ops/s
Iteration  26: 1114324.597 ops/s
Iteration  27: 1110444.531 ops/s
Iteration  28: 1111988.103 ops/s
Iteration  29: 1116633.115 ops/s
Iteration  30: 1114062.022 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectIntWithTarget":
  1112945.087 ±(99.9%) 2074.529 ops/s [Average]
  (min, avg, max) = (1105528.000, 1112945.087, 1118318.329), stdev = 3105.057
  CI (99.9%): [1110870.558, 1115019.616] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_collectIntWithTarget  thrpt   30  1112945.087 ± 2074.529  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 260763.721 ops/s
# Warmup Iteration   2: 626792.442 ops/s
# Warmup Iteration   3: 656214.697 ops/s
# Warmup Iteration   4: 547334.436 ops/s
# Warmup Iteration   5: 658712.671 ops/s
# Warmup Iteration   6: 653920.183 ops/s
# Warmup Iteration   7: 655379.096 ops/s
# Warmup Iteration   8: 655514.670 ops/s
# Warmup Iteration   9: 653867.680 ops/s
# Warmup Iteration  10: 654481.738 ops/s
# Warmup Iteration  11: 652508.189 ops/s
# Warmup Iteration  12: 654070.859 ops/s
# Warmup Iteration  13: 654885.213 ops/s
# Warmup Iteration  14: 657104.148 ops/s
# Warmup Iteration  15: 656263.180 ops/s
# Warmup Iteration  16: 655761.334 ops/s
# Warmup Iteration  17: 653498.894 ops/s
# Warmup Iteration  18: 655125.312 ops/s
# Warmup Iteration  19: 655193.138 ops/s
# Warmup Iteration  20: 653796.450 ops/s
# Warmup Iteration  21: 652852.177 ops/s
# Warmup Iteration  22: 656668.860 ops/s
# Warmup Iteration  23: 653300.442 ops/s
# Warmup Iteration  24: 652876.850 ops/s
# Warmup Iteration  25: 654730.605 ops/s
# Warmup Iteration  26: 654723.569 ops/s
# Warmup Iteration  27: 652018.042 ops/s
# Warmup Iteration  28: 653829.823 ops/s
# Warmup Iteration  29: 656274.990 ops/s
# Warmup Iteration  30: 655596.376 ops/s
Iteration   1: 656861.727 ops/s
Iteration   2: 655656.401 ops/s
Iteration   3: 651703.096 ops/s
Iteration   4: 653791.222 ops/s
Iteration   5: 653416.730 ops/s
Iteration   6: 656350.888 ops/s
Iteration   7: 657925.116 ops/s
Iteration   8: 656911.079 ops/s
Iteration   9: 654971.261 ops/s
Iteration  10: 656925.803 ops/s
Iteration  11: 653896.953 ops/s
Iteration  12: 649739.785 ops/s
Iteration  13: 657416.627 ops/s
Iteration  14: 656430.677 ops/s
Iteration  15: 654210.426 ops/s
Iteration  16: 653751.238 ops/s
Iteration  17: 656171.062 ops/s
Iteration  18: 654211.287 ops/s
Iteration  19: 656065.058 ops/s
Iteration  20: 653502.472 ops/s
Iteration  21: 655323.204 ops/s
Iteration  22: 655106.104 ops/s
Iteration  23: 653703.243 ops/s
Iteration  24: 657956.829 ops/s
Iteration  25: 656948.543 ops/s
Iteration  26: 654986.666 ops/s
Iteration  27: 654748.802 ops/s
Iteration  28: 652510.796 ops/s
Iteration  29: 653393.422 ops/s
Iteration  30: 655536.751 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectLong":
  655004.109 ±(99.9%) 1266.860 ops/s [Average]
  (min, avg, max) = (649739.785, 655004.109, 657956.829), stdev = 1896.177
  CI (99.9%): [653737.249, 656270.969] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_collectLong  thrpt   30  655004.109 ± 1266.860  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectLongWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectLongWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1078313.818 ops/s
# Warmup Iteration   2: 2797763.312 ops/s
# Warmup Iteration   3: 2744535.387 ops/s
# Warmup Iteration   4: 2399499.044 ops/s
# Warmup Iteration   5: 2823722.547 ops/s
# Warmup Iteration   6: 2819701.041 ops/s
# Warmup Iteration   7: 2822484.827 ops/s
# Warmup Iteration   8: 2817786.399 ops/s
# Warmup Iteration   9: 2829075.014 ops/s
# Warmup Iteration  10: 2827533.703 ops/s
# Warmup Iteration  11: 2824692.456 ops/s
# Warmup Iteration  12: 2835737.800 ops/s
# Warmup Iteration  13: 2825049.625 ops/s
# Warmup Iteration  14: 2812555.117 ops/s
# Warmup Iteration  15: 2823705.735 ops/s
# Warmup Iteration  16: 2821663.976 ops/s
# Warmup Iteration  17: 2830164.653 ops/s
# Warmup Iteration  18: 2814624.392 ops/s
# Warmup Iteration  19: 2834506.778 ops/s
# Warmup Iteration  20: 2823095.914 ops/s
# Warmup Iteration  21: 2828367.428 ops/s
# Warmup Iteration  22: 2824077.682 ops/s
# Warmup Iteration  23: 2822753.721 ops/s
# Warmup Iteration  24: 2834251.443 ops/s
# Warmup Iteration  25: 2831265.477 ops/s
# Warmup Iteration  26: 2829551.738 ops/s
# Warmup Iteration  27: 2823053.864 ops/s
# Warmup Iteration  28: 2825685.359 ops/s
# Warmup Iteration  29: 2822565.605 ops/s
# Warmup Iteration  30: 2836031.360 ops/s
Iteration   1: 2827701.731 ops/s
Iteration   2: 2827246.637 ops/s
Iteration   3: 2831898.496 ops/s
Iteration   4: 2835887.983 ops/s
Iteration   5: 2829653.464 ops/s
Iteration   6: 2829206.920 ops/s
Iteration   7: 2829632.574 ops/s
Iteration   8: 2832002.904 ops/s
Iteration   9: 2807006.406 ops/s
Iteration  10: 2831665.884 ops/s
Iteration  11: 2805361.599 ops/s
Iteration  12: 2818454.339 ops/s
Iteration  13: 2829160.780 ops/s
Iteration  14: 2822052.233 ops/s
Iteration  15: 2831034.800 ops/s
Iteration  16: 2826678.413 ops/s
Iteration  17: 2836885.717 ops/s
Iteration  18: 2828770.482 ops/s
Iteration  19: 2826303.868 ops/s
Iteration  20: 2823254.020 ops/s
Iteration  21: 2824774.570 ops/s
Iteration  22: 2829958.646 ops/s
Iteration  23: 2835074.016 ops/s
Iteration  24: 2832911.917 ops/s
Iteration  25: 2826439.025 ops/s
Iteration  26: 2829721.073 ops/s
Iteration  27: 2828827.321 ops/s
Iteration  28: 2813466.949 ops/s
Iteration  29: 2820957.803 ops/s
Iteration  30: 2825713.451 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectLongWithBagTarget":
  2826590.134 ±(99.9%) 4981.597 ops/s [Average]
  (min, avg, max) = (2805361.599, 2826590.134, 2836885.717), stdev = 7456.221
  CI (99.9%): [2821608.537, 2831571.731] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_collectLongWithBagTarget  thrpt   30  2826590.134 ± 4981.597  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectLongWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectLongWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 468761.997 ops/s
# Warmup Iteration   2: 1009347.911 ops/s
# Warmup Iteration   3: 1057353.243 ops/s
# Warmup Iteration   4: 1066487.576 ops/s
# Warmup Iteration   5: 888972.015 ops/s
# Warmup Iteration   6: 1067257.814 ops/s
# Warmup Iteration   7: 1067855.575 ops/s
# Warmup Iteration   8: 1078410.617 ops/s
# Warmup Iteration   9: 1069459.893 ops/s
# Warmup Iteration  10: 1064609.831 ops/s
# Warmup Iteration  11: 1061722.333 ops/s
# Warmup Iteration  12: 1062679.038 ops/s
# Warmup Iteration  13: 1072018.339 ops/s
# Warmup Iteration  14: 1062338.860 ops/s
# Warmup Iteration  15: 1068582.951 ops/s
# Warmup Iteration  16: 1064352.991 ops/s
# Warmup Iteration  17: 1068696.849 ops/s
# Warmup Iteration  18: 1074179.477 ops/s
# Warmup Iteration  19: 1071523.876 ops/s
# Warmup Iteration  20: 1068947.989 ops/s
# Warmup Iteration  21: 1062719.551 ops/s
# Warmup Iteration  22: 1063369.489 ops/s
# Warmup Iteration  23: 1070734.246 ops/s
# Warmup Iteration  24: 1066548.007 ops/s
# Warmup Iteration  25: 1067174.362 ops/s
# Warmup Iteration  26: 1067951.624 ops/s
# Warmup Iteration  27: 1068784.979 ops/s
# Warmup Iteration  28: 1070699.518 ops/s
# Warmup Iteration  29: 1069648.660 ops/s
# Warmup Iteration  30: 1068394.880 ops/s
Iteration   1: 1070377.096 ops/s
Iteration   2: 1072035.002 ops/s
Iteration   3: 1068959.870 ops/s
Iteration   4: 1071723.705 ops/s
Iteration   5: 1069086.076 ops/s
Iteration   6: 1068759.860 ops/s
Iteration   7: 1070984.211 ops/s
Iteration   8: 1068104.827 ops/s
Iteration   9: 1076669.958 ops/s
Iteration  10: 1069105.851 ops/s
Iteration  11: 1067605.988 ops/s
Iteration  12: 1070989.185 ops/s
Iteration  13: 1065857.716 ops/s
Iteration  14: 1056911.622 ops/s
Iteration  15: 1068714.031 ops/s
Iteration  16: 1069759.828 ops/s
Iteration  17: 1068381.191 ops/s
Iteration  18: 1071455.149 ops/s
Iteration  19: 1073623.651 ops/s
Iteration  20: 1070634.961 ops/s
Iteration  21: 1070312.530 ops/s
Iteration  22: 1073836.217 ops/s
Iteration  23: 1060398.999 ops/s
Iteration  24: 1073266.224 ops/s
Iteration  25: 1071867.079 ops/s
Iteration  26: 1067843.802 ops/s
Iteration  27: 1069506.982 ops/s
Iteration  28: 1067922.139 ops/s
Iteration  29: 1071301.275 ops/s
Iteration  30: 1074115.315 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectLongWithTarget":
  1069670.345 ±(99.9%) 2546.945 ops/s [Average]
  (min, avg, max) = (1056911.622, 1069670.345, 1076669.958), stdev = 3812.148
  CI (99.9%): [1067123.400, 1072217.290] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_collectLongWithTarget  thrpt   30  1069670.345 ± 2546.945  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 301900.685 ops/s
# Warmup Iteration   2: 606626.142 ops/s
# Warmup Iteration   3: 656214.762 ops/s
# Warmup Iteration   4: 658931.250 ops/s
# Warmup Iteration   5: 549894.307 ops/s
# Warmup Iteration   6: 661251.902 ops/s
# Warmup Iteration   7: 661384.269 ops/s
# Warmup Iteration   8: 661583.345 ops/s
# Warmup Iteration   9: 662483.752 ops/s
# Warmup Iteration  10: 660102.788 ops/s
# Warmup Iteration  11: 661834.768 ops/s
# Warmup Iteration  12: 660202.489 ops/s
# Warmup Iteration  13: 662212.610 ops/s
# Warmup Iteration  14: 663031.358 ops/s
# Warmup Iteration  15: 661312.700 ops/s
# Warmup Iteration  16: 662018.365 ops/s
# Warmup Iteration  17: 660053.591 ops/s
# Warmup Iteration  18: 660987.098 ops/s
# Warmup Iteration  19: 661800.926 ops/s
# Warmup Iteration  20: 662195.728 ops/s
# Warmup Iteration  21: 661469.521 ops/s
# Warmup Iteration  22: 661902.007 ops/s
# Warmup Iteration  23: 662421.077 ops/s
# Warmup Iteration  24: 659781.125 ops/s
# Warmup Iteration  25: 662676.894 ops/s
# Warmup Iteration  26: 661034.577 ops/s
# Warmup Iteration  27: 661731.153 ops/s
# Warmup Iteration  28: 661438.230 ops/s
# Warmup Iteration  29: 658688.364 ops/s
# Warmup Iteration  30: 661926.268 ops/s
Iteration   1: 660799.924 ops/s
Iteration   2: 663135.219 ops/s
Iteration   3: 661502.781 ops/s
Iteration   4: 661229.814 ops/s
Iteration   5: 663417.918 ops/s
Iteration   6: 662072.639 ops/s
Iteration   7: 662143.651 ops/s
Iteration   8: 662403.014 ops/s
Iteration   9: 662493.947 ops/s
Iteration  10: 662028.234 ops/s
Iteration  11: 662017.246 ops/s
Iteration  12: 662160.688 ops/s
Iteration  13: 662557.827 ops/s
Iteration  14: 661856.239 ops/s
Iteration  15: 662273.670 ops/s
Iteration  16: 662410.277 ops/s
Iteration  17: 661288.473 ops/s
Iteration  18: 664048.514 ops/s
Iteration  19: 661586.340 ops/s
Iteration  20: 660945.576 ops/s
Iteration  21: 659511.018 ops/s
Iteration  22: 660373.407 ops/s
Iteration  23: 660743.476 ops/s
Iteration  24: 662865.541 ops/s
Iteration  25: 661462.802 ops/s
Iteration  26: 661050.102 ops/s
Iteration  27: 661631.807 ops/s
Iteration  28: 660972.020 ops/s
Iteration  29: 661686.066 ops/s
Iteration  30: 663818.361 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectShort":
  661882.886 ±(99.9%) 669.784 ops/s [Average]
  (min, avg, max) = (659511.018, 661882.886, 664048.514), stdev = 1002.502
  CI (99.9%): [661213.102, 662552.671] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score     Error  Units
ImmutableHashBagTest._Benchmark.benchmark_collectShort  thrpt   30  661882.886 ± 669.784  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectShortWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectShortWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1101505.445 ops/s
# Warmup Iteration   2: 2489315.794 ops/s
# Warmup Iteration   3: 2554684.732 ops/s
# Warmup Iteration   4: 2289654.943 ops/s
# Warmup Iteration   5: 2374534.724 ops/s
# Warmup Iteration   6: 2544144.120 ops/s
# Warmup Iteration   7: 2552507.540 ops/s
# Warmup Iteration   8: 2539489.967 ops/s
# Warmup Iteration   9: 2547607.589 ops/s
# Warmup Iteration  10: 2543282.238 ops/s
# Warmup Iteration  11: 2548906.208 ops/s
# Warmup Iteration  12: 2547912.431 ops/s
# Warmup Iteration  13: 2541553.844 ops/s
# Warmup Iteration  14: 2548638.375 ops/s
# Warmup Iteration  15: 2547561.360 ops/s
# Warmup Iteration  16: 2542674.681 ops/s
# Warmup Iteration  17: 2545360.021 ops/s
# Warmup Iteration  18: 2549845.162 ops/s
# Warmup Iteration  19: 2547108.553 ops/s
# Warmup Iteration  20: 2545095.707 ops/s
# Warmup Iteration  21: 2544315.053 ops/s
# Warmup Iteration  22: 2548661.941 ops/s
# Warmup Iteration  23: 2545174.952 ops/s
# Warmup Iteration  24: 2550503.442 ops/s
# Warmup Iteration  25: 2546867.190 ops/s
# Warmup Iteration  26: 2541685.367 ops/s
# Warmup Iteration  27: 2552547.222 ops/s
# Warmup Iteration  28: 2544331.897 ops/s
# Warmup Iteration  29: 2546105.581 ops/s
# Warmup Iteration  30: 2549790.610 ops/s
Iteration   1: 2541238.334 ops/s
Iteration   2: 2556007.685 ops/s
Iteration   3: 2544956.462 ops/s
Iteration   4: 2553284.765 ops/s
Iteration   5: 2545388.461 ops/s
Iteration   6: 2546058.037 ops/s
Iteration   7: 2542717.015 ops/s
Iteration   8: 2548087.165 ops/s
Iteration   9: 2555156.708 ops/s
Iteration  10: 2545121.666 ops/s
Iteration  11: 2529631.248 ops/s
Iteration  12: 2526291.571 ops/s
Iteration  13: 2543311.124 ops/s
Iteration  14: 2551663.698 ops/s
Iteration  15: 2544885.358 ops/s
Iteration  16: 2551124.446 ops/s
Iteration  17: 2545510.053 ops/s
Iteration  18: 2548605.246 ops/s
Iteration  19: 2551446.228 ops/s
Iteration  20: 2546093.496 ops/s
Iteration  21: 2536827.041 ops/s
Iteration  22: 2544611.275 ops/s
Iteration  23: 2532213.498 ops/s
Iteration  24: 2547210.442 ops/s
Iteration  25: 2552342.124 ops/s
Iteration  26: 2542688.803 ops/s
Iteration  27: 2547412.113 ops/s
Iteration  28: 2553230.026 ops/s
Iteration  29: 2544270.021 ops/s
Iteration  30: 2549884.904 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectShortWithBagTarget":
  2545575.634 ±(99.9%) 4696.036 ops/s [Average]
  (min, avg, max) = (2526291.571, 2545575.634, 2556007.685), stdev = 7028.806
  CI (99.9%): [2540879.598, 2550271.669] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_collectShortWithBagTarget  thrpt   30  2545575.634 ± 4696.036  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectShortWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectShortWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 531611.233 ops/s
# Warmup Iteration   2: 1040698.192 ops/s
# Warmup Iteration   3: 1145487.841 ops/s
# Warmup Iteration   4: 1150222.384 ops/s
# Warmup Iteration   5: 954763.253 ops/s
# Warmup Iteration   6: 1151353.663 ops/s
# Warmup Iteration   7: 1153857.309 ops/s
# Warmup Iteration   8: 1155520.948 ops/s
# Warmup Iteration   9: 1152068.117 ops/s
# Warmup Iteration  10: 1152853.681 ops/s
# Warmup Iteration  11: 1152311.917 ops/s
# Warmup Iteration  12: 1143532.399 ops/s
# Warmup Iteration  13: 1151312.431 ops/s
# Warmup Iteration  14: 1154736.829 ops/s
# Warmup Iteration  15: 1152107.281 ops/s
# Warmup Iteration  16: 1152207.293 ops/s
# Warmup Iteration  17: 1149299.559 ops/s
# Warmup Iteration  18: 1146756.690 ops/s
# Warmup Iteration  19: 1150302.540 ops/s
# Warmup Iteration  20: 1147995.776 ops/s
# Warmup Iteration  21: 1146520.770 ops/s
# Warmup Iteration  22: 1150742.384 ops/s
# Warmup Iteration  23: 1147473.620 ops/s
# Warmup Iteration  24: 1152317.933 ops/s
# Warmup Iteration  25: 1150099.594 ops/s
# Warmup Iteration  26: 1149390.911 ops/s
# Warmup Iteration  27: 1149420.045 ops/s
# Warmup Iteration  28: 1145860.894 ops/s
# Warmup Iteration  29: 1149421.488 ops/s
# Warmup Iteration  30: 1151952.625 ops/s
Iteration   1: 1144699.388 ops/s
Iteration   2: 1148282.478 ops/s
Iteration   3: 1145826.413 ops/s
Iteration   4: 1148409.996 ops/s
Iteration   5: 1147270.956 ops/s
Iteration   6: 1148961.726 ops/s
Iteration   7: 1148288.983 ops/s
Iteration   8: 1145438.350 ops/s
Iteration   9: 1148824.468 ops/s
Iteration  10: 1145022.949 ops/s
Iteration  11: 1145947.869 ops/s
Iteration  12: 1146942.138 ops/s
Iteration  13: 1148890.497 ops/s
Iteration  14: 1143923.121 ops/s
Iteration  15: 1150178.551 ops/s
Iteration  16: 1153565.690 ops/s
Iteration  17: 1150507.591 ops/s
Iteration  18: 1148847.931 ops/s
Iteration  19: 1151981.238 ops/s
Iteration  20: 1148213.054 ops/s
Iteration  21: 1148455.527 ops/s
Iteration  22: 1148910.212 ops/s
Iteration  23: 1148532.040 ops/s
Iteration  24: 1149016.654 ops/s
Iteration  25: 1144041.392 ops/s
Iteration  26: 1145680.751 ops/s
Iteration  27: 1151882.367 ops/s
Iteration  28: 1146049.165 ops/s
Iteration  29: 1146924.126 ops/s
Iteration  30: 1149259.381 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectShortWithTarget":
  1147959.167 ±(99.9%) 1568.607 ops/s [Average]
  (min, avg, max) = (1143923.121, 1147959.167, 1153565.690), stdev = 2347.817
  CI (99.9%): [1146390.560, 1149527.773] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_collectShortWithTarget  thrpt   30  1147959.167 ± 1568.607  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 104176.807 ops/s
# Warmup Iteration   2: 180267.128 ops/s
# Warmup Iteration   3: 221870.234 ops/s
# Warmup Iteration   4: 223684.046 ops/s
# Warmup Iteration   5: 223542.318 ops/s
# Warmup Iteration   6: 205729.364 ops/s
# Warmup Iteration   7: 202075.172 ops/s
# Warmup Iteration   8: 223464.028 ops/s
# Warmup Iteration   9: 224046.979 ops/s
# Warmup Iteration  10: 224071.975 ops/s
# Warmup Iteration  11: 223910.629 ops/s
# Warmup Iteration  12: 223711.824 ops/s
# Warmup Iteration  13: 223719.989 ops/s
# Warmup Iteration  14: 223616.304 ops/s
# Warmup Iteration  15: 223515.202 ops/s
# Warmup Iteration  16: 223510.980 ops/s
# Warmup Iteration  17: 223926.158 ops/s
# Warmup Iteration  18: 223516.056 ops/s
# Warmup Iteration  19: 223852.404 ops/s
# Warmup Iteration  20: 223830.184 ops/s
# Warmup Iteration  21: 223724.880 ops/s
# Warmup Iteration  22: 223430.793 ops/s
# Warmup Iteration  23: 224063.176 ops/s
# Warmup Iteration  24: 223809.415 ops/s
# Warmup Iteration  25: 223458.971 ops/s
# Warmup Iteration  26: 224104.708 ops/s
# Warmup Iteration  27: 223720.345 ops/s
# Warmup Iteration  28: 223088.624 ops/s
# Warmup Iteration  29: 223307.791 ops/s
# Warmup Iteration  30: 222971.213 ops/s
Iteration   1: 224275.111 ops/s
Iteration   2: 223135.931 ops/s
Iteration   3: 223975.175 ops/s
Iteration   4: 223576.323 ops/s
Iteration   5: 224038.219 ops/s
Iteration   6: 223797.228 ops/s
Iteration   7: 224023.970 ops/s
Iteration   8: 223517.999 ops/s
Iteration   9: 223663.284 ops/s
Iteration  10: 223937.013 ops/s
Iteration  11: 224196.016 ops/s
Iteration  12: 223300.435 ops/s
Iteration  13: 224581.406 ops/s
Iteration  14: 223262.928 ops/s
Iteration  15: 223389.665 ops/s
Iteration  16: 224131.383 ops/s
Iteration  17: 223519.040 ops/s
Iteration  18: 223980.778 ops/s
Iteration  19: 223006.621 ops/s
Iteration  20: 224461.681 ops/s
Iteration  21: 224020.655 ops/s
Iteration  22: 223984.640 ops/s
Iteration  23: 223596.789 ops/s
Iteration  24: 223951.864 ops/s
Iteration  25: 223728.904 ops/s
Iteration  26: 223137.884 ops/s
Iteration  27: 223772.167 ops/s
Iteration  28: 224070.052 ops/s
Iteration  29: 223822.342 ops/s
Iteration  30: 224032.878 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectTarget":
  223796.279 ±(99.9%) 261.789 ops/s [Average]
  (min, avg, max) = (223006.621, 223796.279, 224581.406), stdev = 391.833
  CI (99.9%): [223534.490, 224058.068] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score     Error  Units
ImmutableHashBagTest._Benchmark.benchmark_collectTarget  thrpt   30  223796.279 ± 261.789  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 338693.708 ops/s
# Warmup Iteration   2: 597580.065 ops/s
# Warmup Iteration   3: 685515.890 ops/s
# Warmup Iteration   4: 688641.130 ops/s
# Warmup Iteration   5: 691102.334 ops/s
# Warmup Iteration   6: 564509.309 ops/s
# Warmup Iteration   7: 689818.035 ops/s
# Warmup Iteration   8: 686672.487 ops/s
# Warmup Iteration   9: 691247.929 ops/s
# Warmup Iteration  10: 689525.403 ops/s
# Warmup Iteration  11: 690478.371 ops/s
# Warmup Iteration  12: 689811.211 ops/s
# Warmup Iteration  13: 689758.525 ops/s
# Warmup Iteration  14: 688203.441 ops/s
# Warmup Iteration  15: 690191.966 ops/s
# Warmup Iteration  16: 689899.126 ops/s
# Warmup Iteration  17: 690269.500 ops/s
# Warmup Iteration  18: 688569.794 ops/s
# Warmup Iteration  19: 689261.399 ops/s
# Warmup Iteration  20: 689316.514 ops/s
# Warmup Iteration  21: 691790.434 ops/s
# Warmup Iteration  22: 690596.998 ops/s
# Warmup Iteration  23: 689585.801 ops/s
# Warmup Iteration  24: 690962.611 ops/s
# Warmup Iteration  25: 690554.760 ops/s
# Warmup Iteration  26: 691013.357 ops/s
# Warmup Iteration  27: 691110.597 ops/s
# Warmup Iteration  28: 690322.751 ops/s
# Warmup Iteration  29: 687834.479 ops/s
# Warmup Iteration  30: 687455.050 ops/s
Iteration   1: 689400.478 ops/s
Iteration   2: 690822.090 ops/s
Iteration   3: 689894.326 ops/s
Iteration   4: 686163.220 ops/s
Iteration   5: 692956.106 ops/s
Iteration   6: 687885.859 ops/s
Iteration   7: 693263.604 ops/s
Iteration   8: 689018.369 ops/s
Iteration   9: 690598.923 ops/s
Iteration  10: 689031.781 ops/s
Iteration  11: 689606.128 ops/s
Iteration  12: 689517.050 ops/s
Iteration  13: 690046.627 ops/s
Iteration  14: 689020.061 ops/s
Iteration  15: 690088.725 ops/s
Iteration  16: 691763.020 ops/s
Iteration  17: 689011.501 ops/s
Iteration  18: 691350.127 ops/s
Iteration  19: 690417.097 ops/s
Iteration  20: 688120.453 ops/s
Iteration  21: 689880.703 ops/s
Iteration  22: 686350.732 ops/s
Iteration  23: 690137.965 ops/s
Iteration  24: 689343.159 ops/s
Iteration  25: 690719.699 ops/s
Iteration  26: 690290.877 ops/s
Iteration  27: 689687.692 ops/s
Iteration  28: 690846.044 ops/s
Iteration  29: 688052.391 ops/s
Iteration  30: 691818.871 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectWith":
  689836.789 ±(99.9%) 1069.844 ops/s [Average]
  (min, avg, max) = (686163.220, 689836.789, 693263.604), stdev = 1601.293
  CI (99.9%): [688766.945, 690906.634] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_collectWith  thrpt   30  689836.789 ± 1069.844  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 418713.816 ops/s
# Warmup Iteration   2: 631097.861 ops/s
# Warmup Iteration   3: 772356.672 ops/s
# Warmup Iteration   4: 769562.272 ops/s
# Warmup Iteration   5: 771189.962 ops/s
# Warmup Iteration   6: 773333.764 ops/s
# Warmup Iteration   7: 632214.826 ops/s
# Warmup Iteration   8: 773135.770 ops/s
# Warmup Iteration   9: 774664.078 ops/s
# Warmup Iteration  10: 770841.357 ops/s
# Warmup Iteration  11: 771176.483 ops/s
# Warmup Iteration  12: 773462.887 ops/s
# Warmup Iteration  13: 775890.407 ops/s
# Warmup Iteration  14: 769765.037 ops/s
# Warmup Iteration  15: 775978.520 ops/s
# Warmup Iteration  16: 772994.701 ops/s
# Warmup Iteration  17: 770350.776 ops/s
# Warmup Iteration  18: 773418.116 ops/s
# Warmup Iteration  19: 775632.047 ops/s
# Warmup Iteration  20: 769545.318 ops/s
# Warmup Iteration  21: 769185.611 ops/s
# Warmup Iteration  22: 775081.326 ops/s
# Warmup Iteration  23: 767525.137 ops/s
# Warmup Iteration  24: 776150.484 ops/s
# Warmup Iteration  25: 765115.655 ops/s
# Warmup Iteration  26: 775147.936 ops/s
# Warmup Iteration  27: 772754.147 ops/s
# Warmup Iteration  28: 771521.955 ops/s
# Warmup Iteration  29: 772885.128 ops/s
# Warmup Iteration  30: 774758.177 ops/s
Iteration   1: 775278.541 ops/s
Iteration   2: 771751.613 ops/s
Iteration   3: 764878.675 ops/s
Iteration   4: 772260.819 ops/s
Iteration   5: 772718.769 ops/s
Iteration   6: 771984.989 ops/s
Iteration   7: 772695.169 ops/s
Iteration   8: 769343.699 ops/s
Iteration   9: 774361.635 ops/s
Iteration  10: 771195.082 ops/s
Iteration  11: 781674.066 ops/s
Iteration  12: 774923.768 ops/s
Iteration  13: 762984.464 ops/s
Iteration  14: 773261.086 ops/s
Iteration  15: 780099.863 ops/s
Iteration  16: 763682.198 ops/s
Iteration  17: 768377.261 ops/s
Iteration  18: 771006.223 ops/s
Iteration  19: 773953.829 ops/s
Iteration  20: 767799.620 ops/s
Iteration  21: 777102.734 ops/s
Iteration  22: 772019.238 ops/s
Iteration  23: 772096.893 ops/s
Iteration  24: 774985.694 ops/s
Iteration  25: 762214.220 ops/s
Iteration  26: 762590.780 ops/s
Iteration  27: 771770.504 ops/s
Iteration  28: 777500.367 ops/s
Iteration  29: 770569.313 ops/s
Iteration  30: 764832.650 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectWithOccurrences":
  771330.459 ±(99.9%) 3330.824 ops/s [Average]
  (min, avg, max) = (762214.220, 771330.459, 781674.066), stdev = 4985.421
  CI (99.9%): [767999.635, 774661.283] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_collectWithOccurrences  thrpt   30  771330.459 ± 3330.824  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 93949.602 ops/s
# Warmup Iteration   2: 156738.604 ops/s
# Warmup Iteration   3: 192482.745 ops/s
# Warmup Iteration   4: 194480.311 ops/s
# Warmup Iteration   5: 194220.503 ops/s
# Warmup Iteration   6: 187181.480 ops/s
# Warmup Iteration   7: 166469.624 ops/s
# Warmup Iteration   8: 194062.760 ops/s
# Warmup Iteration   9: 194279.827 ops/s
# Warmup Iteration  10: 194132.316 ops/s
# Warmup Iteration  11: 194048.955 ops/s
# Warmup Iteration  12: 193760.718 ops/s
# Warmup Iteration  13: 194167.603 ops/s
# Warmup Iteration  14: 193912.680 ops/s
# Warmup Iteration  15: 194050.103 ops/s
# Warmup Iteration  16: 194252.440 ops/s
# Warmup Iteration  17: 193573.772 ops/s
# Warmup Iteration  18: 193557.347 ops/s
# Warmup Iteration  19: 194041.824 ops/s
# Warmup Iteration  20: 194509.753 ops/s
# Warmup Iteration  21: 194405.138 ops/s
# Warmup Iteration  22: 194008.136 ops/s
# Warmup Iteration  23: 194671.665 ops/s
# Warmup Iteration  24: 194308.024 ops/s
# Warmup Iteration  25: 194569.212 ops/s
# Warmup Iteration  26: 194424.254 ops/s
# Warmup Iteration  27: 194253.269 ops/s
# Warmup Iteration  28: 194328.959 ops/s
# Warmup Iteration  29: 194286.545 ops/s
# Warmup Iteration  30: 194263.473 ops/s
Iteration   1: 193589.444 ops/s
Iteration   2: 193774.480 ops/s
Iteration   3: 193467.450 ops/s
Iteration   4: 193708.517 ops/s
Iteration   5: 194207.824 ops/s
Iteration   6: 194251.799 ops/s
Iteration   7: 194648.613 ops/s
Iteration   8: 194473.522 ops/s
Iteration   9: 193994.103 ops/s
Iteration  10: 194127.368 ops/s
Iteration  11: 193704.237 ops/s
Iteration  12: 194493.598 ops/s
Iteration  13: 193707.212 ops/s
Iteration  14: 194580.143 ops/s
Iteration  15: 194031.174 ops/s
Iteration  16: 193571.595 ops/s
Iteration  17: 194080.298 ops/s
Iteration  18: 194488.198 ops/s
Iteration  19: 194104.513 ops/s
Iteration  20: 194704.933 ops/s
Iteration  21: 193935.052 ops/s
Iteration  22: 194018.074 ops/s
Iteration  23: 194233.024 ops/s
Iteration  24: 192306.975 ops/s
Iteration  25: 194374.546 ops/s
Iteration  26: 194499.958 ops/s
Iteration  27: 194068.272 ops/s
Iteration  28: 194471.035 ops/s
Iteration  29: 193751.539 ops/s
Iteration  30: 193858.053 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collectWith_target":
  194040.852 ±(99.9%) 319.214 ops/s [Average]
  (min, avg, max) = (192306.975, 194040.852, 194704.933), stdev = 477.785
  CI (99.9%): [193721.637, 194360.066] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score     Error  Units
ImmutableHashBagTest._Benchmark.benchmark_collectWith_target  thrpt   30  194040.852 ± 319.214  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collect_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collect_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 612276.073 ops/s
# Warmup Iteration   2: 972436.634 ops/s
# Warmup Iteration   3: 1155235.991 ops/s
# Warmup Iteration   4: 1162643.895 ops/s
# Warmup Iteration   5: 1160793.824 ops/s
# Warmup Iteration   6: 1156658.337 ops/s
# Warmup Iteration   7: 966328.125 ops/s
# Warmup Iteration   8: 1165894.730 ops/s
# Warmup Iteration   9: 1165610.157 ops/s
# Warmup Iteration  10: 1164601.447 ops/s
# Warmup Iteration  11: 1167639.476 ops/s
# Warmup Iteration  12: 1164565.811 ops/s
# Warmup Iteration  13: 1163203.081 ops/s
# Warmup Iteration  14: 1165613.249 ops/s
# Warmup Iteration  15: 1164335.329 ops/s
# Warmup Iteration  16: 1158152.533 ops/s
# Warmup Iteration  17: 1162294.460 ops/s
# Warmup Iteration  18: 1165191.124 ops/s
# Warmup Iteration  19: 1163188.772 ops/s
# Warmup Iteration  20: 1163278.435 ops/s
# Warmup Iteration  21: 1165739.059 ops/s
# Warmup Iteration  22: 1164913.244 ops/s
# Warmup Iteration  23: 1162331.873 ops/s
# Warmup Iteration  24: 1164615.478 ops/s
# Warmup Iteration  25: 1163251.723 ops/s
# Warmup Iteration  26: 1166042.433 ops/s
# Warmup Iteration  27: 1166315.607 ops/s
# Warmup Iteration  28: 1165568.935 ops/s
# Warmup Iteration  29: 1164000.890 ops/s
# Warmup Iteration  30: 1163010.995 ops/s
Iteration   1: 1164937.668 ops/s
Iteration   2: 1162767.460 ops/s
Iteration   3: 1166135.863 ops/s
Iteration   4: 1159424.916 ops/s
Iteration   5: 1164190.219 ops/s
Iteration   6: 1165533.103 ops/s
Iteration   7: 1160256.647 ops/s
Iteration   8: 1168551.269 ops/s
Iteration   9: 1166443.688 ops/s
Iteration  10: 1166368.772 ops/s
Iteration  11: 1163946.583 ops/s
Iteration  12: 1165725.015 ops/s
Iteration  13: 1161504.712 ops/s
Iteration  14: 1169993.532 ops/s
Iteration  15: 1165862.673 ops/s
Iteration  16: 1166237.125 ops/s
Iteration  17: 1162464.228 ops/s
Iteration  18: 1167247.314 ops/s
Iteration  19: 1162822.008 ops/s
Iteration  20: 1169191.610 ops/s
Iteration  21: 1164318.635 ops/s
Iteration  22: 1166523.823 ops/s
Iteration  23: 1165003.015 ops/s
Iteration  24: 1167750.596 ops/s
Iteration  25: 1163186.513 ops/s
Iteration  26: 1162814.016 ops/s
Iteration  27: 1164780.508 ops/s
Iteration  28: 1163737.446 ops/s
Iteration  29: 1162224.467 ops/s
Iteration  30: 1168784.952 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_collect_target":
  1164957.613 ±(99.9%) 1729.197 ops/s [Average]
  (min, avg, max) = (1159424.916, 1164957.613, 1169993.532), stdev = 2588.181
  CI (99.9%): [1163228.415, 1166686.810] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_collect_target  thrpt   30  1164957.613 ± 1729.197  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 898568.277 ops/s
# Warmup Iteration   2: 1438579.949 ops/s
# Warmup Iteration   3: 1725138.044 ops/s
# Warmup Iteration   4: 1724006.895 ops/s
# Warmup Iteration   5: 1722329.895 ops/s
# Warmup Iteration   6: 1486361.604 ops/s
# Warmup Iteration   7: 1664210.774 ops/s
# Warmup Iteration   8: 1732615.277 ops/s
# Warmup Iteration   9: 1728336.429 ops/s
# Warmup Iteration  10: 1721983.741 ops/s
# Warmup Iteration  11: 1738446.200 ops/s
# Warmup Iteration  12: 1722325.390 ops/s
# Warmup Iteration  13: 1724765.257 ops/s
# Warmup Iteration  14: 1720659.274 ops/s
# Warmup Iteration  15: 1727015.845 ops/s
# Warmup Iteration  16: 1732237.409 ops/s
# Warmup Iteration  17: 1723822.031 ops/s
# Warmup Iteration  18: 1733440.610 ops/s
# Warmup Iteration  19: 1734848.774 ops/s
# Warmup Iteration  20: 1727031.308 ops/s
# Warmup Iteration  21: 1731063.356 ops/s
# Warmup Iteration  22: 1737272.580 ops/s
# Warmup Iteration  23: 1734667.840 ops/s
# Warmup Iteration  24: 1721025.144 ops/s
# Warmup Iteration  25: 1728746.620 ops/s
# Warmup Iteration  26: 1729081.622 ops/s
# Warmup Iteration  27: 1719505.011 ops/s
# Warmup Iteration  28: 1716001.150 ops/s
# Warmup Iteration  29: 1735471.580 ops/s
# Warmup Iteration  30: 1724825.082 ops/s
Iteration   1: 1711095.570 ops/s
Iteration   2: 1724110.855 ops/s
Iteration   3: 1734289.676 ops/s
Iteration   4: 1735443.569 ops/s
Iteration   5: 1730074.728 ops/s
Iteration   6: 1738656.135 ops/s
Iteration   7: 1742100.433 ops/s
Iteration   8: 1727279.711 ops/s
Iteration   9: 1724944.819 ops/s
Iteration  10: 1727738.185 ops/s
Iteration  11: 1738531.210 ops/s
Iteration  12: 1718712.938 ops/s
Iteration  13: 1732059.159 ops/s
Iteration  14: 1718039.779 ops/s
Iteration  15: 1729167.044 ops/s
Iteration  16: 1721674.701 ops/s
Iteration  17: 1735889.261 ops/s
Iteration  18: 1718744.201 ops/s
Iteration  19: 1732249.141 ops/s
Iteration  20: 1723217.233 ops/s
Iteration  21: 1734204.536 ops/s
Iteration  22: 1726040.890 ops/s
Iteration  23: 1729725.617 ops/s
Iteration  24: 1738564.465 ops/s
Iteration  25: 1719775.575 ops/s
Iteration  26: 1722514.349 ops/s
Iteration  27: 1728808.710 ops/s
Iteration  28: 1729595.093 ops/s
Iteration  29: 1725115.234 ops/s
Iteration  30: 1723278.097 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_contains":
  1728054.697 ±(99.9%) 4890.578 ops/s [Average]
  (min, avg, max) = (1711095.570, 1728054.697, 1742100.433), stdev = 7319.987
  CI (99.9%): [1723164.119, 1732945.275] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_contains  thrpt   30  1728054.697 ± 4890.578  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 599191.919 ops/s
# Warmup Iteration   2: 954686.132 ops/s
# Warmup Iteration   3: 1119086.218 ops/s
# Warmup Iteration   4: 1125962.832 ops/s
# Warmup Iteration   5: 1127319.093 ops/s
# Warmup Iteration   6: 1028736.472 ops/s
# Warmup Iteration   7: 1022566.628 ops/s
# Warmup Iteration   8: 1124974.138 ops/s
# Warmup Iteration   9: 1127046.551 ops/s
# Warmup Iteration  10: 1129705.254 ops/s
# Warmup Iteration  11: 1124969.722 ops/s
# Warmup Iteration  12: 1126233.182 ops/s
# Warmup Iteration  13: 1128234.933 ops/s
# Warmup Iteration  14: 1124529.098 ops/s
# Warmup Iteration  15: 1127341.683 ops/s
# Warmup Iteration  16: 1127292.801 ops/s
# Warmup Iteration  17: 1128092.883 ops/s
# Warmup Iteration  18: 1130477.188 ops/s
# Warmup Iteration  19: 1126630.136 ops/s
# Warmup Iteration  20: 1129233.469 ops/s
# Warmup Iteration  21: 1128345.078 ops/s
# Warmup Iteration  22: 1129762.270 ops/s
# Warmup Iteration  23: 1128426.037 ops/s
# Warmup Iteration  24: 1127842.657 ops/s
# Warmup Iteration  25: 1129002.995 ops/s
# Warmup Iteration  26: 1127205.053 ops/s
# Warmup Iteration  27: 1128953.040 ops/s
# Warmup Iteration  28: 1127853.673 ops/s
# Warmup Iteration  29: 1126178.921 ops/s
# Warmup Iteration  30: 1125998.892 ops/s
Iteration   1: 1128187.423 ops/s
Iteration   2: 1128234.866 ops/s
Iteration   3: 1126861.906 ops/s
Iteration   4: 1127192.288 ops/s
Iteration   5: 1128861.734 ops/s
Iteration   6: 1133085.827 ops/s
Iteration   7: 1126459.517 ops/s
Iteration   8: 1129869.328 ops/s
Iteration   9: 1126571.543 ops/s
Iteration  10: 1129860.933 ops/s
Iteration  11: 1131401.961 ops/s
Iteration  12: 1127525.714 ops/s
Iteration  13: 1129486.850 ops/s
Iteration  14: 1131767.617 ops/s
Iteration  15: 1122649.328 ops/s
Iteration  16: 1130402.523 ops/s
Iteration  17: 1123834.319 ops/s
Iteration  18: 1128055.048 ops/s
Iteration  19: 1128909.206 ops/s
Iteration  20: 1126375.324 ops/s
Iteration  21: 1125942.181 ops/s
Iteration  22: 1128406.439 ops/s
Iteration  23: 1125100.729 ops/s
Iteration  24: 1119358.439 ops/s
Iteration  25: 1127397.888 ops/s
Iteration  26: 1127326.015 ops/s
Iteration  27: 1128682.246 ops/s
Iteration  28: 1128387.824 ops/s
Iteration  29: 1126652.544 ops/s
Iteration  30: 1128214.460 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_containsAllArray":
  1127702.067 ±(99.9%) 1804.539 ops/s [Average]
  (min, avg, max) = (1119358.439, 1127702.067, 1133085.827), stdev = 2700.949
  CI (99.9%): [1125897.528, 1129506.606] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_containsAllArray  thrpt   30  1127702.067 ± 1804.539  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_containsAllCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_containsAllCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1903137.441 ops/s
# Warmup Iteration   2: 3802352.120 ops/s
# Warmup Iteration   3: 4110043.996 ops/s
# Warmup Iteration   4: 4134724.584 ops/s
# Warmup Iteration   5: 3406944.351 ops/s
# Warmup Iteration   6: 4131337.067 ops/s
# Warmup Iteration   7: 4129315.863 ops/s
# Warmup Iteration   8: 4124185.457 ops/s
# Warmup Iteration   9: 4132965.943 ops/s
# Warmup Iteration  10: 4129510.052 ops/s
# Warmup Iteration  11: 4126791.570 ops/s
# Warmup Iteration  12: 4127125.911 ops/s
# Warmup Iteration  13: 4120370.226 ops/s
# Warmup Iteration  14: 4119834.908 ops/s
# Warmup Iteration  15: 4117589.098 ops/s
# Warmup Iteration  16: 4130507.987 ops/s
# Warmup Iteration  17: 4124696.599 ops/s
# Warmup Iteration  18: 4122282.665 ops/s
# Warmup Iteration  19: 4138098.677 ops/s
# Warmup Iteration  20: 4135335.946 ops/s
# Warmup Iteration  21: 4137122.027 ops/s
# Warmup Iteration  22: 4132025.044 ops/s
# Warmup Iteration  23: 4129296.286 ops/s
# Warmup Iteration  24: 4141226.150 ops/s
# Warmup Iteration  25: 4133151.811 ops/s
# Warmup Iteration  26: 4123677.290 ops/s
# Warmup Iteration  27: 4142631.218 ops/s
# Warmup Iteration  28: 4126980.845 ops/s
# Warmup Iteration  29: 4139814.938 ops/s
# Warmup Iteration  30: 4134083.958 ops/s
Iteration   1: 4129243.047 ops/s
Iteration   2: 4122539.588 ops/s
Iteration   3: 4127122.508 ops/s
Iteration   4: 4118580.941 ops/s
Iteration   5: 4124114.649 ops/s
Iteration   6: 4130805.079 ops/s
Iteration   7: 4149406.282 ops/s
Iteration   8: 4133146.500 ops/s
Iteration   9: 4128558.428 ops/s
Iteration  10: 4135538.665 ops/s
Iteration  11: 4147204.242 ops/s
Iteration  12: 4142266.863 ops/s
Iteration  13: 4134745.987 ops/s
Iteration  14: 4151319.031 ops/s
Iteration  15: 4111832.458 ops/s
Iteration  16: 4137081.995 ops/s
Iteration  17: 4136028.120 ops/s
Iteration  18: 4144064.828 ops/s
Iteration  19: 4129625.193 ops/s
Iteration  20: 4141318.127 ops/s
Iteration  21: 4137534.089 ops/s
Iteration  22: 4143722.189 ops/s
Iteration  23: 4145267.546 ops/s
Iteration  24: 4117986.435 ops/s
Iteration  25: 4120835.123 ops/s
Iteration  26: 4136451.734 ops/s
Iteration  27: 4145641.505 ops/s
Iteration  28: 4133515.434 ops/s
Iteration  29: 4139364.106 ops/s
Iteration  30: 4139895.231 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_containsAllCollection":
  4134491.864 ±(99.9%) 6682.242 ops/s [Average]
  (min, avg, max) = (4111832.458, 4134491.864, 4151319.031), stdev = 10001.666
  CI (99.9%): [4127809.622, 4141174.106] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_containsAllCollection  thrpt   30  4134491.864 ± 6682.242  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 568752.767 ops/s
# Warmup Iteration   2: 879006.880 ops/s
# Warmup Iteration   3: 1046921.908 ops/s
# Warmup Iteration   4: 1055962.569 ops/s
# Warmup Iteration   5: 1053791.128 ops/s
# Warmup Iteration   6: 1056533.138 ops/s
# Warmup Iteration   7: 868007.870 ops/s
# Warmup Iteration   8: 1054803.970 ops/s
# Warmup Iteration   9: 1054350.632 ops/s
# Warmup Iteration  10: 1056064.564 ops/s
# Warmup Iteration  11: 1054650.683 ops/s
# Warmup Iteration  12: 1056252.412 ops/s
# Warmup Iteration  13: 1056880.773 ops/s
# Warmup Iteration  14: 1056575.147 ops/s
# Warmup Iteration  15: 1055622.961 ops/s
# Warmup Iteration  16: 1051448.164 ops/s
# Warmup Iteration  17: 1055251.162 ops/s
# Warmup Iteration  18: 1055492.554 ops/s
# Warmup Iteration  19: 1055425.064 ops/s
# Warmup Iteration  20: 1055689.225 ops/s
# Warmup Iteration  21: 1053210.505 ops/s
# Warmup Iteration  22: 1055824.319 ops/s
# Warmup Iteration  23: 1053771.551 ops/s
# Warmup Iteration  24: 1055138.837 ops/s
# Warmup Iteration  25: 1053999.128 ops/s
# Warmup Iteration  26: 1054947.049 ops/s
# Warmup Iteration  27: 1056392.384 ops/s
# Warmup Iteration  28: 1054232.562 ops/s
# Warmup Iteration  29: 1055073.002 ops/s
# Warmup Iteration  30: 1054625.548 ops/s
Iteration   1: 1053572.700 ops/s
Iteration   2: 1056874.076 ops/s
Iteration   3: 1049967.100 ops/s
Iteration   4: 1053157.417 ops/s
Iteration   5: 1055609.515 ops/s
Iteration   6: 1054649.384 ops/s
Iteration   7: 1053970.934 ops/s
Iteration   8: 1054108.172 ops/s
Iteration   9: 1051074.885 ops/s
Iteration  10: 1044807.686 ops/s
Iteration  11: 1056234.912 ops/s
Iteration  12: 1052498.628 ops/s
Iteration  13: 1057229.384 ops/s
Iteration  14: 1053210.045 ops/s
Iteration  15: 1057512.611 ops/s
Iteration  16: 1056293.911 ops/s
Iteration  17: 1054708.438 ops/s
Iteration  18: 1057009.070 ops/s
Iteration  19: 1053950.748 ops/s
Iteration  20: 1055200.547 ops/s
Iteration  21: 1056947.855 ops/s
Iteration  22: 1055396.846 ops/s
Iteration  23: 1056886.657 ops/s
Iteration  24: 1056347.426 ops/s
Iteration  25: 1058070.701 ops/s
Iteration  26: 1056711.221 ops/s
Iteration  27: 1044235.477 ops/s
Iteration  28: 1056624.898 ops/s
Iteration  29: 1053247.606 ops/s
Iteration  30: 1053193.976 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_containsAllIterable":
  1054310.094 ±(99.9%) 2210.218 ops/s [Average]
  (min, avg, max) = (1044235.477, 1054310.094, 1058070.701), stdev = 3308.150
  CI (99.9%): [1052099.876, 1056520.312] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_containsAllIterable  thrpt   30  1054310.094 ± 2210.218  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_containsAnyCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_containsAnyCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 53968.473 ops/s
# Warmup Iteration   2: 84992.152 ops/s
# Warmup Iteration   3: 97592.767 ops/s
# Warmup Iteration   4: 98455.721 ops/s
# Warmup Iteration   5: 98304.478 ops/s
# Warmup Iteration   6: 98533.978 ops/s
# Warmup Iteration   7: 83221.525 ops/s
# Warmup Iteration   8: 98352.904 ops/s
# Warmup Iteration   9: 98417.942 ops/s
# Warmup Iteration  10: 98134.612 ops/s
# Warmup Iteration  11: 98314.916 ops/s
# Warmup Iteration  12: 98437.836 ops/s
# Warmup Iteration  13: 98416.276 ops/s
# Warmup Iteration  14: 98065.054 ops/s
# Warmup Iteration  15: 98122.371 ops/s
# Warmup Iteration  16: 98268.809 ops/s
# Warmup Iteration  17: 97497.151 ops/s
# Warmup Iteration  18: 97937.363 ops/s
# Warmup Iteration  19: 98111.197 ops/s
# Warmup Iteration  20: 98442.056 ops/s
# Warmup Iteration  21: 98367.096 ops/s
# Warmup Iteration  22: 98377.503 ops/s
# Warmup Iteration  23: 98413.247 ops/s
# Warmup Iteration  24: 98501.553 ops/s
# Warmup Iteration  25: 98330.969 ops/s
# Warmup Iteration  26: 98100.958 ops/s
# Warmup Iteration  27: 98279.119 ops/s
# Warmup Iteration  28: 98435.094 ops/s
# Warmup Iteration  29: 97806.397 ops/s
# Warmup Iteration  30: 98411.289 ops/s
Iteration   1: 98651.688 ops/s
Iteration   2: 98241.905 ops/s
Iteration   3: 98625.288 ops/s
Iteration   4: 97888.081 ops/s
Iteration   5: 98673.673 ops/s
Iteration   6: 98080.661 ops/s
Iteration   7: 98440.592 ops/s
Iteration   8: 97889.992 ops/s
Iteration   9: 98407.808 ops/s
Iteration  10: 97800.353 ops/s
Iteration  11: 98619.326 ops/s
Iteration  12: 98239.424 ops/s
Iteration  13: 98086.295 ops/s
Iteration  14: 98031.451 ops/s
Iteration  15: 98349.448 ops/s
Iteration  16: 98738.798 ops/s
Iteration  17: 98442.394 ops/s
Iteration  18: 98663.229 ops/s
Iteration  19: 98432.901 ops/s
Iteration  20: 98561.519 ops/s
Iteration  21: 98077.009 ops/s
Iteration  22: 98556.513 ops/s
Iteration  23: 98360.742 ops/s
Iteration  24: 98513.755 ops/s
Iteration  25: 98474.685 ops/s
Iteration  26: 98289.305 ops/s
Iteration  27: 97578.289 ops/s
Iteration  28: 98452.211 ops/s
Iteration  29: 98281.362 ops/s
Iteration  30: 98429.623 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_containsAnyCollection":
  98329.277 ±(99.9%) 193.284 ops/s [Average]
  (min, avg, max) = (97578.289, 98329.277, 98738.798), stdev = 289.299
  CI (99.9%): [98135.993, 98522.561] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt      Score     Error  Units
ImmutableHashBagTest._Benchmark.benchmark_containsAnyCollection  thrpt   30  98329.277 ± 193.284  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_containsAnyIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_containsAnyIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 50098.521 ops/s
# Warmup Iteration   2: 74040.457 ops/s
# Warmup Iteration   3: 87769.397 ops/s
# Warmup Iteration   4: 87001.807 ops/s
# Warmup Iteration   5: 87261.104 ops/s
# Warmup Iteration   6: 87410.299 ops/s
# Warmup Iteration   7: 78140.466 ops/s
# Warmup Iteration   8: 83884.932 ops/s
# Warmup Iteration   9: 87805.966 ops/s
# Warmup Iteration  10: 87650.069 ops/s
# Warmup Iteration  11: 87621.844 ops/s
# Warmup Iteration  12: 87602.976 ops/s
# Warmup Iteration  13: 87869.276 ops/s
# Warmup Iteration  14: 87843.255 ops/s
# Warmup Iteration  15: 87360.450 ops/s
# Warmup Iteration  16: 87770.907 ops/s
# Warmup Iteration  17: 87658.708 ops/s
# Warmup Iteration  18: 87773.736 ops/s
# Warmup Iteration  19: 87598.682 ops/s
# Warmup Iteration  20: 87733.349 ops/s
# Warmup Iteration  21: 87861.105 ops/s
# Warmup Iteration  22: 87936.479 ops/s
# Warmup Iteration  23: 87702.813 ops/s
# Warmup Iteration  24: 87638.523 ops/s
# Warmup Iteration  25: 87759.962 ops/s
# Warmup Iteration  26: 87620.739 ops/s
# Warmup Iteration  27: 87867.991 ops/s
# Warmup Iteration  28: 87803.839 ops/s
# Warmup Iteration  29: 87763.118 ops/s
# Warmup Iteration  30: 87390.576 ops/s
Iteration   1: 87445.882 ops/s
Iteration   2: 87624.767 ops/s
Iteration   3: 87875.280 ops/s
Iteration   4: 87555.938 ops/s
Iteration   5: 87711.007 ops/s
Iteration   6: 87719.296 ops/s
Iteration   7: 87809.017 ops/s
Iteration   8: 87833.158 ops/s
Iteration   9: 87462.997 ops/s
Iteration  10: 87797.115 ops/s
Iteration  11: 87741.533 ops/s
Iteration  12: 87709.737 ops/s
Iteration  13: 87601.475 ops/s
Iteration  14: 87700.846 ops/s
Iteration  15: 87930.671 ops/s
Iteration  16: 87641.138 ops/s
Iteration  17: 87687.100 ops/s
Iteration  18: 87372.185 ops/s
Iteration  19: 87823.298 ops/s
Iteration  20: 87616.265 ops/s
Iteration  21: 87653.049 ops/s
Iteration  22: 87866.849 ops/s
Iteration  23: 87459.373 ops/s
Iteration  24: 87606.881 ops/s
Iteration  25: 87772.270 ops/s
Iteration  26: 87790.080 ops/s
Iteration  27: 87704.983 ops/s
Iteration  28: 87979.802 ops/s
Iteration  29: 88069.121 ops/s
Iteration  30: 87293.652 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_containsAnyIterable":
  87695.159 ±(99.9%) 117.986 ops/s [Average]
  (min, avg, max) = (87293.652, 87695.159, 88069.121), stdev = 176.596
  CI (99.9%): [87577.172, 87813.145] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt      Score     Error  Units
ImmutableHashBagTest._Benchmark.benchmark_containsAnyIterable  thrpt   30  87695.159 ± 117.986  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_containsBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_containsBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 671296.571 ops/s
# Warmup Iteration   2: 708440.239 ops/s
# Warmup Iteration   3: 876723.474 ops/s
# Warmup Iteration   4: 923838.265 ops/s
# Warmup Iteration   5: 919021.838 ops/s
# Warmup Iteration   6: 914902.477 ops/s
# Warmup Iteration   7: 920091.251 ops/s
# Warmup Iteration   8: 920349.769 ops/s
# Warmup Iteration   9: 923772.138 ops/s
# Warmup Iteration  10: 920541.628 ops/s
# Warmup Iteration  11: 921745.734 ops/s
# Warmup Iteration  12: 919562.888 ops/s
# Warmup Iteration  13: 764604.542 ops/s
# Warmup Iteration  14: 922560.844 ops/s
# Warmup Iteration  15: 920437.396 ops/s
# Warmup Iteration  16: 920580.398 ops/s
# Warmup Iteration  17: 966156.641 ops/s
# Warmup Iteration  18: 966480.415 ops/s
# Warmup Iteration  19: 965966.535 ops/s
# Warmup Iteration  20: 964248.878 ops/s
# Warmup Iteration  21: 965890.448 ops/s
# Warmup Iteration  22: 964380.829 ops/s
# Warmup Iteration  23: 968472.582 ops/s
# Warmup Iteration  24: 963590.940 ops/s
# Warmup Iteration  25: 960184.652 ops/s
# Warmup Iteration  26: 962747.644 ops/s
# Warmup Iteration  27: 967411.590 ops/s
# Warmup Iteration  28: 966154.043 ops/s
# Warmup Iteration  29: 967606.632 ops/s
# Warmup Iteration  30: 963120.291 ops/s
Iteration   1: 956081.146 ops/s
Iteration   2: 971060.563 ops/s
Iteration   3: 960454.104 ops/s
Iteration   4: 961318.371 ops/s
Iteration   5: 962170.945 ops/s
Iteration   6: 966812.852 ops/s
Iteration   7: 966073.832 ops/s
Iteration   8: 963729.883 ops/s
Iteration   9: 967237.380 ops/s
Iteration  10: 958366.328 ops/s
Iteration  11: 966269.223 ops/s
Iteration  12: 966750.969 ops/s
Iteration  13: 966403.187 ops/s
Iteration  14: 962405.465 ops/s
Iteration  15: 967560.139 ops/s
Iteration  16: 967572.993 ops/s
Iteration  17: 964977.247 ops/s
Iteration  18: 961350.354 ops/s
Iteration  19: 962209.260 ops/s
Iteration  20: 968465.427 ops/s
Iteration  21: 965435.876 ops/s
Iteration  22: 967820.414 ops/s
Iteration  23: 964842.984 ops/s
Iteration  24: 969573.238 ops/s
Iteration  25: 962482.344 ops/s
Iteration  26: 965575.550 ops/s
Iteration  27: 967205.747 ops/s
Iteration  28: 964586.522 ops/s
Iteration  29: 961125.593 ops/s
Iteration  30: 969008.808 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_containsBy":
  964830.891 ±(99.9%) 2301.898 ops/s [Average]
  (min, avg, max) = (956081.146, 964830.891, 971060.563), stdev = 3445.373
  CI (99.9%): [962528.994, 967132.789] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_containsBy  thrpt   30  964830.891 ± 2301.898  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_containsNoneCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_containsNoneCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 53138.549 ops/s
# Warmup Iteration   2: 82256.402 ops/s
# Warmup Iteration   3: 95557.404 ops/s
# Warmup Iteration   4: 96116.135 ops/s
# Warmup Iteration   5: 95598.685 ops/s
# Warmup Iteration   6: 95964.521 ops/s
# Warmup Iteration   7: 81093.511 ops/s
# Warmup Iteration   8: 95809.703 ops/s
# Warmup Iteration   9: 95789.823 ops/s
# Warmup Iteration  10: 95840.055 ops/s
# Warmup Iteration  11: 95376.840 ops/s
# Warmup Iteration  12: 95919.980 ops/s
# Warmup Iteration  13: 95762.598 ops/s
# Warmup Iteration  14: 96001.745 ops/s
# Warmup Iteration  15: 95959.732 ops/s
# Warmup Iteration  16: 95594.555 ops/s
# Warmup Iteration  17: 96075.788 ops/s
# Warmup Iteration  18: 95643.209 ops/s
# Warmup Iteration  19: 95784.689 ops/s
# Warmup Iteration  20: 95725.389 ops/s
# Warmup Iteration  21: 95780.090 ops/s
# Warmup Iteration  22: 95643.370 ops/s
# Warmup Iteration  23: 95770.499 ops/s
# Warmup Iteration  24: 95705.830 ops/s
# Warmup Iteration  25: 95746.095 ops/s
# Warmup Iteration  26: 95793.351 ops/s
# Warmup Iteration  27: 95549.308 ops/s
# Warmup Iteration  28: 95750.302 ops/s
# Warmup Iteration  29: 95661.188 ops/s
# Warmup Iteration  30: 96029.874 ops/s
Iteration   1: 96017.635 ops/s
Iteration   2: 96068.390 ops/s
Iteration   3: 95946.791 ops/s
Iteration   4: 95654.757 ops/s
Iteration   5: 95929.803 ops/s
Iteration   6: 95572.853 ops/s
Iteration   7: 96184.441 ops/s
Iteration   8: 95972.779 ops/s
Iteration   9: 96085.280 ops/s
Iteration  10: 95414.005 ops/s
Iteration  11: 95928.442 ops/s
Iteration  12: 95882.766 ops/s
Iteration  13: 95659.552 ops/s
Iteration  14: 95728.813 ops/s
Iteration  15: 95349.127 ops/s
Iteration  16: 95696.513 ops/s
Iteration  17: 95984.550 ops/s
Iteration  18: 96123.327 ops/s
Iteration  19: 95789.568 ops/s
Iteration  20: 95769.860 ops/s
Iteration  21: 95698.806 ops/s
Iteration  22: 96118.970 ops/s
Iteration  23: 95969.403 ops/s
Iteration  24: 96302.401 ops/s
Iteration  25: 95993.111 ops/s
Iteration  26: 96052.808 ops/s
Iteration  27: 95560.825 ops/s
Iteration  28: 95845.997 ops/s
Iteration  29: 95272.783 ops/s
Iteration  30: 95971.519 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_containsNoneCollection":
  95851.529 ±(99.9%) 167.447 ops/s [Average]
  (min, avg, max) = (95272.783, 95851.529, 96302.401), stdev = 250.626
  CI (99.9%): [95684.083, 96018.976] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt      Score     Error  Units
ImmutableHashBagTest._Benchmark.benchmark_containsNoneCollection  thrpt   30  95851.529 ± 167.447  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_containsNoneIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_containsNoneIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 50086.399 ops/s
# Warmup Iteration   2: 73248.845 ops/s
# Warmup Iteration   3: 87196.296 ops/s
# Warmup Iteration   4: 86614.808 ops/s
# Warmup Iteration   5: 87000.781 ops/s
# Warmup Iteration   6: 87192.211 ops/s
# Warmup Iteration   7: 78808.629 ops/s
# Warmup Iteration   8: 82084.625 ops/s
# Warmup Iteration   9: 86829.585 ops/s
# Warmup Iteration  10: 86996.878 ops/s
# Warmup Iteration  11: 86989.276 ops/s
# Warmup Iteration  12: 86707.227 ops/s
# Warmup Iteration  13: 86921.303 ops/s
# Warmup Iteration  14: 87145.224 ops/s
# Warmup Iteration  15: 86736.941 ops/s
# Warmup Iteration  16: 87093.084 ops/s
# Warmup Iteration  17: 86992.174 ops/s
# Warmup Iteration  18: 87144.756 ops/s
# Warmup Iteration  19: 86933.117 ops/s
# Warmup Iteration  20: 86930.346 ops/s
# Warmup Iteration  21: 86821.625 ops/s
# Warmup Iteration  22: 87003.367 ops/s
# Warmup Iteration  23: 86859.073 ops/s
# Warmup Iteration  24: 86934.744 ops/s
# Warmup Iteration  25: 87046.683 ops/s
# Warmup Iteration  26: 87078.094 ops/s
# Warmup Iteration  27: 86829.669 ops/s
# Warmup Iteration  28: 87118.280 ops/s
# Warmup Iteration  29: 86701.919 ops/s
# Warmup Iteration  30: 86994.153 ops/s
Iteration   1: 86972.285 ops/s
Iteration   2: 86805.773 ops/s
Iteration   3: 87034.189 ops/s
Iteration   4: 86851.065 ops/s
Iteration   5: 86900.311 ops/s
Iteration   6: 86993.758 ops/s
Iteration   7: 86882.020 ops/s
Iteration   8: 86993.552 ops/s
Iteration   9: 87075.089 ops/s
Iteration  10: 86930.113 ops/s
Iteration  11: 86969.951 ops/s
Iteration  12: 87174.682 ops/s
Iteration  13: 86940.690 ops/s
Iteration  14: 86921.650 ops/s
Iteration  15: 87238.122 ops/s
Iteration  16: 86685.174 ops/s
Iteration  17: 87307.864 ops/s
Iteration  18: 87219.104 ops/s
Iteration  19: 87010.747 ops/s
Iteration  20: 87080.931 ops/s
Iteration  21: 87006.490 ops/s
Iteration  22: 87036.726 ops/s
Iteration  23: 87076.658 ops/s
Iteration  24: 87255.648 ops/s
Iteration  25: 86812.333 ops/s
Iteration  26: 86864.913 ops/s
Iteration  27: 87290.849 ops/s
Iteration  28: 86770.434 ops/s
Iteration  29: 86879.063 ops/s
Iteration  30: 87079.889 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_containsNoneIterable":
  87002.003 ±(99.9%) 105.778 ops/s [Average]
  (min, avg, max) = (86685.174, 87002.003, 87307.864), stdev = 158.323
  CI (99.9%): [86896.225, 87107.780] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt      Score     Error  Units
ImmutableHashBagTest._Benchmark.benchmark_containsNoneIterable  thrpt   30  87002.003 ± 105.778  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 944032.675 ops/s
# Warmup Iteration   2: 1573007.545 ops/s
# Warmup Iteration   3: 1784019.875 ops/s
# Warmup Iteration   4: 1792812.728 ops/s
# Warmup Iteration   5: 1791107.488 ops/s
# Warmup Iteration   6: 1473989.975 ops/s
# Warmup Iteration   7: 1791850.353 ops/s
# Warmup Iteration   8: 1794659.159 ops/s
# Warmup Iteration   9: 1794557.607 ops/s
# Warmup Iteration  10: 1791761.871 ops/s
# Warmup Iteration  11: 1793946.999 ops/s
# Warmup Iteration  12: 1795907.281 ops/s
# Warmup Iteration  13: 1794381.112 ops/s
# Warmup Iteration  14: 1795488.716 ops/s
# Warmup Iteration  15: 1793745.577 ops/s
# Warmup Iteration  16: 1793565.286 ops/s
# Warmup Iteration  17: 1788721.065 ops/s
# Warmup Iteration  18: 1782681.356 ops/s
# Warmup Iteration  19: 1778188.170 ops/s
# Warmup Iteration  20: 1787235.325 ops/s
# Warmup Iteration  21: 1781716.872 ops/s
# Warmup Iteration  22: 1778544.485 ops/s
# Warmup Iteration  23: 1783929.027 ops/s
# Warmup Iteration  24: 1783363.368 ops/s
# Warmup Iteration  25: 1783992.516 ops/s
# Warmup Iteration  26: 1780578.775 ops/s
# Warmup Iteration  27: 1783660.292 ops/s
# Warmup Iteration  28: 1783622.625 ops/s
# Warmup Iteration  29: 1785840.902 ops/s
# Warmup Iteration  30: 1787509.060 ops/s
Iteration   1: 1787778.519 ops/s
Iteration   2: 1775839.487 ops/s
Iteration   3: 1788067.388 ops/s
Iteration   4: 1785858.689 ops/s
Iteration   5: 1787573.886 ops/s
Iteration   6: 1780892.508 ops/s
Iteration   7: 1788522.527 ops/s
Iteration   8: 1787854.371 ops/s
Iteration   9: 1790637.946 ops/s
Iteration  10: 1788108.200 ops/s
Iteration  11: 1786079.259 ops/s
Iteration  12: 1778899.051 ops/s
Iteration  13: 1787572.676 ops/s
Iteration  14: 1786891.346 ops/s
Iteration  15: 1783371.464 ops/s
Iteration  16: 1781341.673 ops/s
Iteration  17: 1786041.840 ops/s
Iteration  18: 1788946.316 ops/s
Iteration  19: 1787286.076 ops/s
Iteration  20: 1787649.570 ops/s
Iteration  21: 1785757.784 ops/s
Iteration  22: 1776339.340 ops/s
Iteration  23: 1778450.334 ops/s
Iteration  24: 1787742.048 ops/s
Iteration  25: 1786677.710 ops/s
Iteration  26: 1786696.198 ops/s
Iteration  27: 1782208.857 ops/s
Iteration  28: 1786533.555 ops/s
Iteration  29: 1788773.893 ops/s
Iteration  30: 1782873.299 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_count":
  1785242.194 ±(99.9%) 2601.358 ops/s [Average]
  (min, avg, max) = (1775839.487, 1785242.194, 1790637.946), stdev = 3893.590
  CI (99.9%): [1782640.836, 1787843.552] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_count  thrpt   30  1785242.194 ± 2601.358  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_countBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_countBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 316826.718 ops/s
# Warmup Iteration   2: 551650.714 ops/s
# Warmup Iteration   3: 625093.422 ops/s
# Warmup Iteration   4: 626223.383 ops/s
# Warmup Iteration   5: 628072.894 ops/s
# Warmup Iteration   6: 515892.588 ops/s
# Warmup Iteration   7: 628297.318 ops/s
# Warmup Iteration   8: 629532.488 ops/s
# Warmup Iteration   9: 628994.200 ops/s
# Warmup Iteration  10: 626441.757 ops/s
# Warmup Iteration  11: 627438.311 ops/s
# Warmup Iteration  12: 627861.534 ops/s
# Warmup Iteration  13: 629467.678 ops/s
# Warmup Iteration  14: 628362.727 ops/s
# Warmup Iteration  15: 628751.160 ops/s
# Warmup Iteration  16: 629178.210 ops/s
# Warmup Iteration  17: 629721.424 ops/s
# Warmup Iteration  18: 629913.771 ops/s
# Warmup Iteration  19: 627929.210 ops/s
# Warmup Iteration  20: 628349.740 ops/s
# Warmup Iteration  21: 627855.259 ops/s
# Warmup Iteration  22: 628328.959 ops/s
# Warmup Iteration  23: 629119.980 ops/s
# Warmup Iteration  24: 628023.235 ops/s
# Warmup Iteration  25: 629433.653 ops/s
# Warmup Iteration  26: 629184.411 ops/s
# Warmup Iteration  27: 629369.804 ops/s
# Warmup Iteration  28: 629316.484 ops/s
# Warmup Iteration  29: 627845.492 ops/s
# Warmup Iteration  30: 628730.100 ops/s
Iteration   1: 628775.227 ops/s
Iteration   2: 629643.620 ops/s
Iteration   3: 629168.159 ops/s
Iteration   4: 630855.322 ops/s
Iteration   5: 628043.039 ops/s
Iteration   6: 629432.580 ops/s
Iteration   7: 629040.033 ops/s
Iteration   8: 630928.728 ops/s
Iteration   9: 629240.057 ops/s
Iteration  10: 627548.594 ops/s
Iteration  11: 628615.636 ops/s
Iteration  12: 628684.548 ops/s
Iteration  13: 629263.254 ops/s
Iteration  14: 627816.528 ops/s
Iteration  15: 627595.300 ops/s
Iteration  16: 626250.206 ops/s
Iteration  17: 629919.735 ops/s
Iteration  18: 629888.451 ops/s
Iteration  19: 628848.807 ops/s
Iteration  20: 629636.064 ops/s
Iteration  21: 629029.774 ops/s
Iteration  22: 628737.762 ops/s
Iteration  23: 628728.037 ops/s
Iteration  24: 627780.234 ops/s
Iteration  25: 628230.049 ops/s
Iteration  26: 628414.277 ops/s
Iteration  27: 630243.208 ops/s
Iteration  28: 628624.453 ops/s
Iteration  29: 629494.723 ops/s
Iteration  30: 628553.446 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_countBy":
  628900.995 ±(99.9%) 663.981 ops/s [Average]
  (min, avg, max) = (626250.206, 628900.995, 630928.728), stdev = 993.816
  CI (99.9%): [628237.014, 629564.976] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score     Error  Units
ImmutableHashBagTest._Benchmark.benchmark_countBy  thrpt   30  628900.995 ± 663.981  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_countByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_countByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 70893.522 ops/s
# Warmup Iteration   2: 134028.012 ops/s
# Warmup Iteration   3: 148839.226 ops/s
# Warmup Iteration   4: 150242.370 ops/s
# Warmup Iteration   5: 134798.117 ops/s
# Warmup Iteration   6: 138313.119 ops/s
# Warmup Iteration   7: 149623.415 ops/s
# Warmup Iteration   8: 148776.674 ops/s
# Warmup Iteration   9: 148712.185 ops/s
# Warmup Iteration  10: 148735.130 ops/s
# Warmup Iteration  11: 149280.310 ops/s
# Warmup Iteration  12: 148991.155 ops/s
# Warmup Iteration  13: 149780.567 ops/s
# Warmup Iteration  14: 149299.354 ops/s
# Warmup Iteration  15: 148578.086 ops/s
# Warmup Iteration  16: 149707.831 ops/s
# Warmup Iteration  17: 149372.861 ops/s
# Warmup Iteration  18: 149469.021 ops/s
# Warmup Iteration  19: 149803.359 ops/s
# Warmup Iteration  20: 149056.003 ops/s
# Warmup Iteration  21: 149176.044 ops/s
# Warmup Iteration  22: 149134.554 ops/s
# Warmup Iteration  23: 149276.128 ops/s
# Warmup Iteration  24: 149980.016 ops/s
# Warmup Iteration  25: 149757.187 ops/s
# Warmup Iteration  26: 149113.529 ops/s
# Warmup Iteration  27: 149549.982 ops/s
# Warmup Iteration  28: 149652.607 ops/s
# Warmup Iteration  29: 148967.398 ops/s
# Warmup Iteration  30: 149622.370 ops/s
Iteration   1: 150095.786 ops/s
Iteration   2: 149973.254 ops/s
Iteration   3: 149814.067 ops/s
Iteration   4: 149567.353 ops/s
Iteration   5: 149421.538 ops/s
Iteration   6: 150361.130 ops/s
Iteration   7: 149834.187 ops/s
Iteration   8: 149833.560 ops/s
Iteration   9: 150373.353 ops/s
Iteration  10: 149773.155 ops/s
Iteration  11: 148742.899 ops/s
Iteration  12: 147954.855 ops/s
Iteration  13: 147837.710 ops/s
Iteration  14: 149418.215 ops/s
Iteration  15: 149441.266 ops/s
Iteration  16: 150051.397 ops/s
Iteration  17: 149959.948 ops/s
Iteration  18: 148186.948 ops/s
Iteration  19: 150171.868 ops/s
Iteration  20: 150005.011 ops/s
Iteration  21: 149899.322 ops/s
Iteration  22: 150046.829 ops/s
Iteration  23: 149615.869 ops/s
Iteration  24: 149749.073 ops/s
Iteration  25: 149614.355 ops/s
Iteration  26: 149702.069 ops/s
Iteration  27: 147111.852 ops/s
Iteration  28: 147998.033 ops/s
Iteration  29: 148832.533 ops/s
Iteration  30: 150138.118 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_countByEach":
  149450.852 ±(99.9%) 561.696 ops/s [Average]
  (min, avg, max) = (147111.852, 149450.852, 150373.353), stdev = 840.720
  CI (99.9%): [148889.156, 150012.548] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score     Error  Units
ImmutableHashBagTest._Benchmark.benchmark_countByEach  thrpt   30  149450.852 ± 561.696  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_countByWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_countByWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 319526.881 ops/s
# Warmup Iteration   2: 550596.753 ops/s
# Warmup Iteration   3: 631362.434 ops/s
# Warmup Iteration   4: 633240.040 ops/s
# Warmup Iteration   5: 633276.633 ops/s
# Warmup Iteration   6: 518727.645 ops/s
# Warmup Iteration   7: 635657.689 ops/s
# Warmup Iteration   8: 636151.181 ops/s
# Warmup Iteration   9: 636609.808 ops/s
# Warmup Iteration  10: 635751.599 ops/s
# Warmup Iteration  11: 635316.664 ops/s
# Warmup Iteration  12: 636239.405 ops/s
# Warmup Iteration  13: 634916.563 ops/s
# Warmup Iteration  14: 636499.822 ops/s
# Warmup Iteration  15: 632243.115 ops/s
# Warmup Iteration  16: 636107.124 ops/s
# Warmup Iteration  17: 635426.919 ops/s
# Warmup Iteration  18: 635402.204 ops/s
# Warmup Iteration  19: 635961.632 ops/s
# Warmup Iteration  20: 635201.292 ops/s
# Warmup Iteration  21: 635446.733 ops/s
# Warmup Iteration  22: 634457.830 ops/s
# Warmup Iteration  23: 634342.561 ops/s
# Warmup Iteration  24: 632655.701 ops/s
# Warmup Iteration  25: 634707.642 ops/s
# Warmup Iteration  26: 634587.502 ops/s
# Warmup Iteration  27: 631823.549 ops/s
# Warmup Iteration  28: 635964.839 ops/s
# Warmup Iteration  29: 634724.957 ops/s
# Warmup Iteration  30: 635692.394 ops/s
Iteration   1: 635194.380 ops/s
Iteration   2: 635655.829 ops/s
Iteration   3: 635419.064 ops/s
Iteration   4: 634830.477 ops/s
Iteration   5: 634628.885 ops/s
Iteration   6: 634352.156 ops/s
Iteration   7: 637591.627 ops/s
Iteration   8: 635984.242 ops/s
Iteration   9: 636446.938 ops/s
Iteration  10: 634591.724 ops/s
Iteration  11: 636693.776 ops/s
Iteration  12: 635649.744 ops/s
Iteration  13: 631562.120 ops/s
Iteration  14: 636439.353 ops/s
Iteration  15: 634272.005 ops/s
Iteration  16: 635832.163 ops/s
Iteration  17: 634297.490 ops/s
Iteration  18: 637473.212 ops/s
Iteration  19: 635095.417 ops/s
Iteration  20: 636832.411 ops/s
Iteration  21: 634767.474 ops/s
Iteration  22: 634454.696 ops/s
Iteration  23: 636431.398 ops/s
Iteration  24: 635026.184 ops/s
Iteration  25: 637078.658 ops/s
Iteration  26: 635424.938 ops/s
Iteration  27: 636637.254 ops/s
Iteration  28: 634690.165 ops/s
Iteration  29: 633939.509 ops/s
Iteration  30: 634733.771 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_countByWith":
  635400.902 ±(99.9%) 837.874 ops/s [Average]
  (min, avg, max) = (631562.120, 635400.902, 637591.627), stdev = 1254.090
  CI (99.9%): [634563.028, 636238.776] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score     Error  Units
ImmutableHashBagTest._Benchmark.benchmark_countByWith  thrpt   30  635400.902 ± 837.874  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_countWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_countWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 908440.235 ops/s
# Warmup Iteration   2: 1566929.819 ops/s
# Warmup Iteration   3: 1797613.073 ops/s
# Warmup Iteration   4: 1807112.720 ops/s
# Warmup Iteration   5: 1806012.512 ops/s
# Warmup Iteration   6: 1474731.179 ops/s
# Warmup Iteration   7: 1809453.107 ops/s
# Warmup Iteration   8: 1812433.316 ops/s
# Warmup Iteration   9: 1812086.781 ops/s
# Warmup Iteration  10: 1804330.159 ops/s
# Warmup Iteration  11: 1810714.950 ops/s
# Warmup Iteration  12: 1811089.748 ops/s
# Warmup Iteration  13: 1796581.217 ops/s
# Warmup Iteration  14: 1810657.321 ops/s
# Warmup Iteration  15: 1809657.229 ops/s
# Warmup Iteration  16: 1811928.256 ops/s
# Warmup Iteration  17: 1807904.440 ops/s
# Warmup Iteration  18: 1804251.747 ops/s
# Warmup Iteration  19: 1805194.181 ops/s
# Warmup Iteration  20: 1802154.831 ops/s
# Warmup Iteration  21: 1799743.195 ops/s
# Warmup Iteration  22: 1808801.268 ops/s
# Warmup Iteration  23: 1808969.207 ops/s
# Warmup Iteration  24: 1802896.431 ops/s
# Warmup Iteration  25: 1806990.193 ops/s
# Warmup Iteration  26: 1810274.952 ops/s
# Warmup Iteration  27: 1809423.905 ops/s
# Warmup Iteration  28: 1804552.671 ops/s
# Warmup Iteration  29: 1794007.313 ops/s
# Warmup Iteration  30: 1807493.843 ops/s
Iteration   1: 1800194.836 ops/s
Iteration   2: 1804175.332 ops/s
Iteration   3: 1809315.860 ops/s
Iteration   4: 1811312.889 ops/s
Iteration   5: 1803332.448 ops/s
Iteration   6: 1803919.943 ops/s
Iteration   7: 1802422.714 ops/s
Iteration   8: 1797816.686 ops/s
Iteration   9: 1802730.469 ops/s
Iteration  10: 1808236.077 ops/s
Iteration  11: 1802816.890 ops/s
Iteration  12: 1807605.522 ops/s
Iteration  13: 1805589.463 ops/s
Iteration  14: 1809441.494 ops/s
Iteration  15: 1801731.805 ops/s
Iteration  16: 1796651.769 ops/s
Iteration  17: 1795194.503 ops/s
Iteration  18: 1805907.398 ops/s
Iteration  19: 1808279.528 ops/s
Iteration  20: 1809089.886 ops/s
Iteration  21: 1805871.096 ops/s
Iteration  22: 1808209.891 ops/s
Iteration  23: 1808878.738 ops/s
Iteration  24: 1807483.216 ops/s
Iteration  25: 1811497.463 ops/s
Iteration  26: 1799802.178 ops/s
Iteration  27: 1796066.281 ops/s
Iteration  28: 1807052.721 ops/s
Iteration  29: 1806111.869 ops/s
Iteration  30: 1807477.749 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_countWith":
  1804807.224 ±(99.9%) 3009.224 ops/s [Average]
  (min, avg, max) = (1795194.503, 1804807.224, 1811497.463), stdev = 4504.065
  CI (99.9%): [1801798.000, 1807816.448] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_countWith  thrpt   30  1804807.224 ± 3009.224  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_detect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_detect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 511755.267 ops/s
# Warmup Iteration   2: 913650.048 ops/s
# Warmup Iteration   3: 1026987.122 ops/s
# Warmup Iteration   4: 1032092.846 ops/s
# Warmup Iteration   5: 1032443.112 ops/s
# Warmup Iteration   6: 848628.092 ops/s
# Warmup Iteration   7: 1031988.948 ops/s
# Warmup Iteration   8: 1034181.972 ops/s
# Warmup Iteration   9: 1030707.096 ops/s
# Warmup Iteration  10: 1031937.097 ops/s
# Warmup Iteration  11: 1030796.554 ops/s
# Warmup Iteration  12: 1034547.715 ops/s
# Warmup Iteration  13: 1032218.597 ops/s
# Warmup Iteration  14: 1029835.950 ops/s
# Warmup Iteration  15: 1029188.195 ops/s
# Warmup Iteration  16: 1030566.785 ops/s
# Warmup Iteration  17: 1032656.136 ops/s
# Warmup Iteration  18: 1028138.131 ops/s
# Warmup Iteration  19: 1031204.723 ops/s
# Warmup Iteration  20: 1030870.581 ops/s
# Warmup Iteration  21: 1030069.570 ops/s
# Warmup Iteration  22: 1025723.347 ops/s
# Warmup Iteration  23: 1032340.556 ops/s
# Warmup Iteration  24: 1035440.968 ops/s
# Warmup Iteration  25: 1030352.306 ops/s
# Warmup Iteration  26: 1030099.098 ops/s
# Warmup Iteration  27: 1030139.480 ops/s
# Warmup Iteration  28: 1030645.523 ops/s
# Warmup Iteration  29: 1033081.945 ops/s
# Warmup Iteration  30: 1027959.251 ops/s
Iteration   1: 1031730.900 ops/s
Iteration   2: 1034596.083 ops/s
Iteration   3: 1031107.664 ops/s
Iteration   4: 1032118.500 ops/s
Iteration   5: 1036056.414 ops/s
Iteration   6: 1030391.085 ops/s
Iteration   7: 1034841.859 ops/s
Iteration   8: 1032269.872 ops/s
Iteration   9: 1023895.275 ops/s
Iteration  10: 1030583.279 ops/s
Iteration  11: 1032378.130 ops/s
Iteration  12: 1032608.561 ops/s
Iteration  13: 1029961.811 ops/s
Iteration  14: 1035886.751 ops/s
Iteration  15: 1029687.764 ops/s
Iteration  16: 1030781.230 ops/s
Iteration  17: 1027751.009 ops/s
Iteration  18: 1029818.195 ops/s
Iteration  19: 1029041.203 ops/s
Iteration  20: 1031440.764 ops/s
Iteration  21: 1031942.033 ops/s
Iteration  22: 1032946.046 ops/s
Iteration  23: 1032134.721 ops/s
Iteration  24: 1036032.272 ops/s
Iteration  25: 1031023.141 ops/s
Iteration  26: 1032091.978 ops/s
Iteration  27: 1026703.674 ops/s
Iteration  28: 1033215.158 ops/s
Iteration  29: 1030017.444 ops/s
Iteration  30: 1029961.177 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_detect":
  1031433.800 ±(99.9%) 1785.559 ops/s [Average]
  (min, avg, max) = (1023895.275, 1031433.800, 1036056.414), stdev = 2672.541
  CI (99.9%): [1029648.241, 1033219.359] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_detect  thrpt   30  1031433.800 ± 1785.559  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 463470.209 ops/s
# Warmup Iteration   2: 789490.348 ops/s
# Warmup Iteration   3: 926524.397 ops/s
# Warmup Iteration   4: 931516.333 ops/s
# Warmup Iteration   5: 932033.398 ops/s
# Warmup Iteration   6: 766750.513 ops/s
# Warmup Iteration   7: 933614.272 ops/s
# Warmup Iteration   8: 933170.816 ops/s
# Warmup Iteration   9: 932300.885 ops/s
# Warmup Iteration  10: 936050.411 ops/s
# Warmup Iteration  11: 932901.812 ops/s
# Warmup Iteration  12: 934413.364 ops/s
# Warmup Iteration  13: 928885.102 ops/s
# Warmup Iteration  14: 929626.022 ops/s
# Warmup Iteration  15: 934185.191 ops/s
# Warmup Iteration  16: 933528.183 ops/s
# Warmup Iteration  17: 932510.090 ops/s
# Warmup Iteration  18: 934003.575 ops/s
# Warmup Iteration  19: 931461.814 ops/s
# Warmup Iteration  20: 933543.203 ops/s
# Warmup Iteration  21: 930703.219 ops/s
# Warmup Iteration  22: 931927.316 ops/s
# Warmup Iteration  23: 933443.060 ops/s
# Warmup Iteration  24: 927189.524 ops/s
# Warmup Iteration  25: 932268.832 ops/s
# Warmup Iteration  26: 931013.694 ops/s
# Warmup Iteration  27: 929565.874 ops/s
# Warmup Iteration  28: 934879.347 ops/s
# Warmup Iteration  29: 933595.378 ops/s
# Warmup Iteration  30: 931327.692 ops/s
Iteration   1: 928071.930 ops/s
Iteration   2: 931861.473 ops/s
Iteration   3: 933837.918 ops/s
Iteration   4: 930917.785 ops/s
Iteration   5: 930050.836 ops/s
Iteration   6: 928378.645 ops/s
Iteration   7: 931878.695 ops/s
Iteration   8: 935996.865 ops/s
Iteration   9: 932160.411 ops/s
Iteration  10: 933390.676 ops/s
Iteration  11: 930984.741 ops/s
Iteration  12: 933602.964 ops/s
Iteration  13: 932267.599 ops/s
Iteration  14: 932470.878 ops/s
Iteration  15: 931391.955 ops/s
Iteration  16: 930115.544 ops/s
Iteration  17: 929059.135 ops/s
Iteration  18: 930952.523 ops/s
Iteration  19: 935920.907 ops/s
Iteration  20: 932176.076 ops/s
Iteration  21: 934484.977 ops/s
Iteration  22: 927033.930 ops/s
Iteration  23: 932207.634 ops/s
Iteration  24: 931108.605 ops/s
Iteration  25: 935406.342 ops/s
Iteration  26: 927532.691 ops/s
Iteration  27: 930788.216 ops/s
Iteration  28: 932011.750 ops/s
Iteration  29: 927838.185 ops/s
Iteration  30: 929088.710 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_detectIfNone":
  931432.953 ±(99.9%) 1611.319 ops/s [Average]
  (min, avg, max) = (927033.930, 931432.953, 935996.865), stdev = 2411.746
  CI (99.9%): [929821.635, 933044.272] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_detectIfNone  thrpt   30  931432.953 ± 1611.319  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_detectOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_detectOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 288373.266 ops/s
# Warmup Iteration   2: 373969.840 ops/s
# Warmup Iteration   3: 464662.190 ops/s
# Warmup Iteration   4: 462629.250 ops/s
# Warmup Iteration   5: 464162.845 ops/s
# Warmup Iteration   6: 464800.209 ops/s
# Warmup Iteration   7: 464506.393 ops/s
# Warmup Iteration   8: 426345.623 ops/s
# Warmup Iteration   9: 428826.825 ops/s
# Warmup Iteration  10: 464953.836 ops/s
# Warmup Iteration  11: 465844.981 ops/s
# Warmup Iteration  12: 464615.721 ops/s
# Warmup Iteration  13: 465331.737 ops/s
# Warmup Iteration  14: 465385.699 ops/s
# Warmup Iteration  15: 465922.414 ops/s
# Warmup Iteration  16: 465618.001 ops/s
# Warmup Iteration  17: 478676.269 ops/s
# Warmup Iteration  18: 477343.707 ops/s
# Warmup Iteration  19: 479288.061 ops/s
# Warmup Iteration  20: 479496.351 ops/s
# Warmup Iteration  21: 480368.341 ops/s
# Warmup Iteration  22: 479150.531 ops/s
# Warmup Iteration  23: 478928.249 ops/s
# Warmup Iteration  24: 478613.128 ops/s
# Warmup Iteration  25: 480425.449 ops/s
# Warmup Iteration  26: 480315.860 ops/s
# Warmup Iteration  27: 480916.918 ops/s
# Warmup Iteration  28: 478996.259 ops/s
# Warmup Iteration  29: 480310.208 ops/s
# Warmup Iteration  30: 479747.461 ops/s
Iteration   1: 480252.115 ops/s
Iteration   2: 481328.855 ops/s
Iteration   3: 478517.253 ops/s
Iteration   4: 481016.993 ops/s
Iteration   5: 481376.163 ops/s
Iteration   6: 479627.489 ops/s
Iteration   7: 479702.860 ops/s
Iteration   8: 480523.643 ops/s
Iteration   9: 481915.828 ops/s
Iteration  10: 479166.443 ops/s
Iteration  11: 478891.997 ops/s
Iteration  12: 479119.899 ops/s
Iteration  13: 480567.674 ops/s
Iteration  14: 478383.703 ops/s
Iteration  15: 479932.373 ops/s
Iteration  16: 478632.038 ops/s
Iteration  17: 480077.230 ops/s
Iteration  18: 481008.154 ops/s
Iteration  19: 477640.127 ops/s
Iteration  20: 480273.881 ops/s
Iteration  21: 479464.368 ops/s
Iteration  22: 477084.091 ops/s
Iteration  23: 476974.141 ops/s
Iteration  24: 477823.878 ops/s
Iteration  25: 479471.794 ops/s
Iteration  26: 480067.389 ops/s
Iteration  27: 479490.227 ops/s
Iteration  28: 479871.987 ops/s
Iteration  29: 479829.667 ops/s
Iteration  30: 479048.148 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_detectOptional":
  479569.347 ±(99.9%) 822.147 ops/s [Average]
  (min, avg, max) = (476974.141, 479569.347, 481915.828), stdev = 1230.551
  CI (99.9%): [478747.200, 480391.494] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score     Error  Units
ImmutableHashBagTest._Benchmark.benchmark_detectOptional  thrpt   30  479569.347 ± 822.147  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_detectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_detectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 497501.506 ops/s
# Warmup Iteration   2: 852871.478 ops/s
# Warmup Iteration   3: 968050.908 ops/s
# Warmup Iteration   4: 972750.538 ops/s
# Warmup Iteration   5: 972742.504 ops/s
# Warmup Iteration   6: 796981.702 ops/s
# Warmup Iteration   7: 971600.414 ops/s
# Warmup Iteration   8: 974154.456 ops/s
# Warmup Iteration   9: 974312.417 ops/s
# Warmup Iteration  10: 974931.183 ops/s
# Warmup Iteration  11: 973923.202 ops/s
# Warmup Iteration  12: 975608.631 ops/s
# Warmup Iteration  13: 973043.789 ops/s
# Warmup Iteration  14: 973538.654 ops/s
# Warmup Iteration  15: 975266.025 ops/s
# Warmup Iteration  16: 972101.591 ops/s
# Warmup Iteration  17: 971138.877 ops/s
# Warmup Iteration  18: 970880.312 ops/s
# Warmup Iteration  19: 971347.528 ops/s
# Warmup Iteration  20: 970837.281 ops/s
# Warmup Iteration  21: 975146.367 ops/s
# Warmup Iteration  22: 972209.363 ops/s
# Warmup Iteration  23: 974022.381 ops/s
# Warmup Iteration  24: 966018.459 ops/s
# Warmup Iteration  25: 974224.575 ops/s
# Warmup Iteration  26: 970976.830 ops/s
# Warmup Iteration  27: 974060.304 ops/s
# Warmup Iteration  28: 973720.626 ops/s
# Warmup Iteration  29: 974591.729 ops/s
# Warmup Iteration  30: 973740.439 ops/s
Iteration   1: 967420.441 ops/s
Iteration   2: 973548.284 ops/s
Iteration   3: 973458.508 ops/s
Iteration   4: 974383.916 ops/s
Iteration   5: 971035.931 ops/s
Iteration   6: 975304.345 ops/s
Iteration   7: 973965.366 ops/s
Iteration   8: 971480.987 ops/s
Iteration   9: 970282.834 ops/s
Iteration  10: 971005.233 ops/s
Iteration  11: 968487.215 ops/s
Iteration  12: 970820.615 ops/s
Iteration  13: 972134.108 ops/s
Iteration  14: 973083.102 ops/s
Iteration  15: 973887.606 ops/s
Iteration  16: 972216.047 ops/s
Iteration  17: 971844.239 ops/s
Iteration  18: 975347.555 ops/s
Iteration  19: 972793.028 ops/s
Iteration  20: 975159.926 ops/s
Iteration  21: 973757.008 ops/s
Iteration  22: 973296.237 ops/s
Iteration  23: 973160.728 ops/s
Iteration  24: 971636.077 ops/s
Iteration  25: 967382.732 ops/s
Iteration  26: 969783.607 ops/s
Iteration  27: 971524.464 ops/s
Iteration  28: 971888.066 ops/s
Iteration  29: 972299.217 ops/s
Iteration  30: 973542.498 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_detectWith":
  972197.664 ±(99.9%) 1389.799 ops/s [Average]
  (min, avg, max) = (967382.732, 972197.664, 975347.555), stdev = 2080.186
  CI (99.9%): [970807.865, 973587.463] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_detectWith  thrpt   30  972197.664 ± 1389.799  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_detectWithIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_detectWithIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1725791.757 ops/s
# Warmup Iteration   2: 2985597.993 ops/s
# Warmup Iteration   3: 3331173.191 ops/s
# Warmup Iteration   4: 3370070.557 ops/s
# Warmup Iteration   5: 3369616.377 ops/s
# Warmup Iteration   6: 2726479.719 ops/s
# Warmup Iteration   7: 3369888.496 ops/s
# Warmup Iteration   8: 3372658.301 ops/s
# Warmup Iteration   9: 3379240.104 ops/s
# Warmup Iteration  10: 3364020.649 ops/s
# Warmup Iteration  11: 3382120.230 ops/s
# Warmup Iteration  12: 3374935.705 ops/s
# Warmup Iteration  13: 3370241.630 ops/s
# Warmup Iteration  14: 3367582.498 ops/s
# Warmup Iteration  15: 3371452.148 ops/s
# Warmup Iteration  16: 3366299.102 ops/s
# Warmup Iteration  17: 3362578.695 ops/s
# Warmup Iteration  18: 3372886.141 ops/s
# Warmup Iteration  19: 3378369.374 ops/s
# Warmup Iteration  20: 3361441.986 ops/s
# Warmup Iteration  21: 3347184.837 ops/s
# Warmup Iteration  22: 3368452.097 ops/s
# Warmup Iteration  23: 3366626.760 ops/s
# Warmup Iteration  24: 3354024.664 ops/s
# Warmup Iteration  25: 3360092.962 ops/s
# Warmup Iteration  26: 3353620.055 ops/s
# Warmup Iteration  27: 3353884.065 ops/s
# Warmup Iteration  28: 3348338.269 ops/s
# Warmup Iteration  29: 3346916.502 ops/s
# Warmup Iteration  30: 3311901.944 ops/s
Iteration   1: 3334144.283 ops/s
Iteration   2: 3320461.603 ops/s
Iteration   3: 3316474.979 ops/s
Iteration   4: 3319506.731 ops/s
Iteration   5: 3344077.865 ops/s
Iteration   6: 3344392.524 ops/s
Iteration   7: 3346405.434 ops/s
Iteration   8: 3320800.995 ops/s
Iteration   9: 3347801.647 ops/s
Iteration  10: 3352988.771 ops/s
Iteration  11: 3327903.849 ops/s
Iteration  12: 3341188.096 ops/s
Iteration  13: 3320145.909 ops/s
Iteration  14: 3344867.594 ops/s
Iteration  15: 3350004.335 ops/s
Iteration  16: 3380346.370 ops/s
Iteration  17: 3379905.486 ops/s
Iteration  18: 3332012.955 ops/s
Iteration  19: 3357360.402 ops/s
Iteration  20: 3339422.986 ops/s
Iteration  21: 3395814.058 ops/s
Iteration  22: 3324805.693 ops/s
Iteration  23: 3357832.711 ops/s
Iteration  24: 3359775.567 ops/s
Iteration  25: 3326652.543 ops/s
Iteration  26: 3347144.921 ops/s
Iteration  27: 3367661.460 ops/s
Iteration  28: 3349416.736 ops/s
Iteration  29: 3365446.435 ops/s
Iteration  30: 3340939.413 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_detectWithIfNone":
  3345190.078 ±(99.9%) 13185.148 ops/s [Average]
  (min, avg, max) = (3316474.979, 3345190.078, 3395814.058), stdev = 19734.911
  CI (99.9%): [3332004.930, 3358375.227] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
ImmutableHashBagTest._Benchmark.benchmark_detectWithIfNone  thrpt   30  3345190.078 ± 13185.148  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_detectWithIfNoneBlock$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_detectWithIfNoneBlock

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 741834.171 ops/s
# Warmup Iteration   2: 1334439.053 ops/s
# Warmup Iteration   3: 1481627.680 ops/s
# Warmup Iteration   4: 1489051.520 ops/s
# Warmup Iteration   5: 1443917.083 ops/s
# Warmup Iteration   6: 1270689.405 ops/s
# Warmup Iteration   7: 1487274.328 ops/s
# Warmup Iteration   8: 1487195.042 ops/s
# Warmup Iteration   9: 1489935.997 ops/s
# Warmup Iteration  10: 1486912.311 ops/s
# Warmup Iteration  11: 1487643.004 ops/s
# Warmup Iteration  12: 1484915.555 ops/s
# Warmup Iteration  13: 1487588.881 ops/s
# Warmup Iteration  14: 1484261.508 ops/s
# Warmup Iteration  15: 1486275.415 ops/s
# Warmup Iteration  16: 1486906.691 ops/s
# Warmup Iteration  17: 1490771.339 ops/s
# Warmup Iteration  18: 1490828.195 ops/s
# Warmup Iteration  19: 1490303.856 ops/s
# Warmup Iteration  20: 1490693.712 ops/s
# Warmup Iteration  21: 1490298.855 ops/s
# Warmup Iteration  22: 1488893.557 ops/s
# Warmup Iteration  23: 1491466.047 ops/s
# Warmup Iteration  24: 1489715.949 ops/s
# Warmup Iteration  25: 1493670.861 ops/s
# Warmup Iteration  26: 1494507.181 ops/s
# Warmup Iteration  27: 1492029.686 ops/s
# Warmup Iteration  28: 1492621.188 ops/s
# Warmup Iteration  29: 1492483.907 ops/s
# Warmup Iteration  30: 1493075.650 ops/s
Iteration   1: 1493753.654 ops/s
Iteration   2: 1494071.737 ops/s
Iteration   3: 1492559.228 ops/s
Iteration   4: 1489709.482 ops/s
Iteration   5: 1492298.757 ops/s
Iteration   6: 1492085.026 ops/s
Iteration   7: 1494453.182 ops/s
Iteration   8: 1485662.077 ops/s
Iteration   9: 1492260.865 ops/s
Iteration  10: 1492011.425 ops/s
Iteration  11: 1491998.115 ops/s
Iteration  12: 1496916.175 ops/s
Iteration  13: 1489560.683 ops/s
Iteration  14: 1491413.616 ops/s
Iteration  15: 1488480.375 ops/s
Iteration  16: 1488020.888 ops/s
Iteration  17: 1492769.759 ops/s
Iteration  18: 1487895.757 ops/s
Iteration  19: 1490498.006 ops/s
Iteration  20: 1491165.955 ops/s
Iteration  21: 1491252.599 ops/s
Iteration  22: 1489955.714 ops/s
Iteration  23: 1492402.152 ops/s
Iteration  24: 1489380.387 ops/s
Iteration  25: 1493492.062 ops/s
Iteration  26: 1489335.000 ops/s
Iteration  27: 1491984.668 ops/s
Iteration  28: 1494173.155 ops/s
Iteration  29: 1490186.987 ops/s
Iteration  30: 1498892.442 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_detectWithIfNoneBlock":
  1491621.331 ±(99.9%) 1800.684 ops/s [Average]
  (min, avg, max) = (1485662.077, 1491621.331, 1498892.442), stdev = 2695.179
  CI (99.9%): [1489820.647, 1493422.015] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_detectWithIfNoneBlock  thrpt   30  1491621.331 ± 1800.684  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_detectWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_detectWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1145813.267 ops/s
# Warmup Iteration   2: 1975153.448 ops/s
# Warmup Iteration   3: 2316040.676 ops/s
# Warmup Iteration   4: 2307264.894 ops/s
# Warmup Iteration   5: 2312773.133 ops/s
# Warmup Iteration   6: 1898800.968 ops/s
# Warmup Iteration   7: 2300382.395 ops/s
# Warmup Iteration   8: 2305328.689 ops/s
# Warmup Iteration   9: 2307935.798 ops/s
# Warmup Iteration  10: 2301721.163 ops/s
# Warmup Iteration  11: 2305473.834 ops/s
# Warmup Iteration  12: 2300494.082 ops/s
# Warmup Iteration  13: 2309522.374 ops/s
# Warmup Iteration  14: 2313530.429 ops/s
# Warmup Iteration  15: 2323199.568 ops/s
# Warmup Iteration  16: 2303919.172 ops/s
# Warmup Iteration  17: 2304126.363 ops/s
# Warmup Iteration  18: 2308864.586 ops/s
# Warmup Iteration  19: 2313207.214 ops/s
# Warmup Iteration  20: 2322147.670 ops/s
# Warmup Iteration  21: 2308440.958 ops/s
# Warmup Iteration  22: 2311791.773 ops/s
# Warmup Iteration  23: 2310961.836 ops/s
# Warmup Iteration  24: 2323542.420 ops/s
# Warmup Iteration  25: 2303630.888 ops/s
# Warmup Iteration  26: 2314243.434 ops/s
# Warmup Iteration  27: 2320139.476 ops/s
# Warmup Iteration  28: 2319068.946 ops/s
# Warmup Iteration  29: 2318721.921 ops/s
# Warmup Iteration  30: 2315794.848 ops/s
Iteration   1: 2309558.811 ops/s
Iteration   2: 2327765.046 ops/s
Iteration   3: 2315541.708 ops/s
Iteration   4: 2309009.640 ops/s
Iteration   5: 2319024.512 ops/s
Iteration   6: 2317068.018 ops/s
Iteration   7: 2323703.224 ops/s
Iteration   8: 2312282.472 ops/s
Iteration   9: 2301044.022 ops/s
Iteration  10: 2312292.946 ops/s
Iteration  11: 2315588.403 ops/s
Iteration  12: 2309976.687 ops/s
Iteration  13: 2310571.283 ops/s
Iteration  14: 2307340.806 ops/s
Iteration  15: 2287419.858 ops/s
Iteration  16: 2313797.371 ops/s
Iteration  17: 2308214.950 ops/s
Iteration  18: 2297804.586 ops/s
Iteration  19: 2311734.672 ops/s
Iteration  20: 2302531.707 ops/s
Iteration  21: 2296279.756 ops/s
Iteration  22: 2306803.070 ops/s
Iteration  23: 2315716.195 ops/s
Iteration  24: 2288611.321 ops/s
Iteration  25: 2304202.100 ops/s
Iteration  26: 2305724.126 ops/s
Iteration  27: 2301314.956 ops/s
Iteration  28: 2295821.328 ops/s
Iteration  29: 2305656.181 ops/s
Iteration  30: 2300678.808 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_detectWithOccurrences":
  2307769.285 ±(99.9%) 6208.726 ops/s [Average]
  (min, avg, max) = (2287419.858, 2307769.285, 2327765.046), stdev = 9292.929
  CI (99.9%): [2301560.560, 2313978.011] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_detectWithOccurrences  thrpt   30  2307769.285 ± 6208.726  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_detectWithOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_detectWithOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 279561.150 ops/s
# Warmup Iteration   2: 357803.003 ops/s
# Warmup Iteration   3: 449819.101 ops/s
# Warmup Iteration   4: 447352.949 ops/s
# Warmup Iteration   5: 450049.866 ops/s
# Warmup Iteration   6: 449779.801 ops/s
# Warmup Iteration   7: 449426.161 ops/s
# Warmup Iteration   8: 445696.771 ops/s
# Warmup Iteration   9: 381905.707 ops/s
# Warmup Iteration  10: 449917.907 ops/s
# Warmup Iteration  11: 449473.142 ops/s
# Warmup Iteration  12: 451133.547 ops/s
# Warmup Iteration  13: 449223.199 ops/s
# Warmup Iteration  14: 451424.488 ops/s
# Warmup Iteration  15: 451178.374 ops/s
# Warmup Iteration  16: 450270.958 ops/s
# Warmup Iteration  17: 463586.845 ops/s
# Warmup Iteration  18: 462908.230 ops/s
# Warmup Iteration  19: 462760.040 ops/s
# Warmup Iteration  20: 462978.260 ops/s
# Warmup Iteration  21: 462990.740 ops/s
# Warmup Iteration  22: 463329.908 ops/s
# Warmup Iteration  23: 461439.055 ops/s
# Warmup Iteration  24: 462473.496 ops/s
# Warmup Iteration  25: 461433.984 ops/s
# Warmup Iteration  26: 463526.763 ops/s
# Warmup Iteration  27: 462979.737 ops/s
# Warmup Iteration  28: 462783.831 ops/s
# Warmup Iteration  29: 463499.077 ops/s
# Warmup Iteration  30: 462328.476 ops/s
Iteration   1: 463738.593 ops/s
Iteration   2: 461801.951 ops/s
Iteration   3: 464136.996 ops/s
Iteration   4: 461075.713 ops/s
Iteration   5: 463365.163 ops/s
Iteration   6: 463687.019 ops/s
Iteration   7: 463398.365 ops/s
Iteration   8: 461097.333 ops/s
Iteration   9: 463206.073 ops/s
Iteration  10: 462058.434 ops/s
Iteration  11: 464116.419 ops/s
Iteration  12: 464004.968 ops/s
Iteration  13: 462018.344 ops/s
Iteration  14: 464318.936 ops/s
Iteration  15: 464064.134 ops/s
Iteration  16: 462864.989 ops/s
Iteration  17: 463203.874 ops/s
Iteration  18: 464877.256 ops/s
Iteration  19: 461389.744 ops/s
Iteration  20: 464181.543 ops/s
Iteration  21: 462148.945 ops/s
Iteration  22: 463818.868 ops/s
Iteration  23: 461807.221 ops/s
Iteration  24: 461443.182 ops/s
Iteration  25: 462748.116 ops/s
Iteration  26: 462445.577 ops/s
Iteration  27: 462462.294 ops/s
Iteration  28: 463505.070 ops/s
Iteration  29: 461680.342 ops/s
Iteration  30: 462040.962 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_detectWithOptional":
  462890.214 ±(99.9%) 727.773 ops/s [Average]
  (min, avg, max) = (461075.713, 462890.214, 464877.256), stdev = 1089.297
  CI (99.9%): [462162.441, 463617.987] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score     Error  Units
ImmutableHashBagTest._Benchmark.benchmark_detectWithOptional  thrpt   30  462890.214 ± 727.773  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_distinctView$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_distinctView

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1309818.903 ops/s
# Warmup Iteration   2: 1946132.303 ops/s
# Warmup Iteration   3: 2409865.169 ops/s
# Warmup Iteration   4: 2377253.102 ops/s
# Warmup Iteration   5: 2401660.024 ops/s
# Warmup Iteration   6: 2409548.934 ops/s
# Warmup Iteration   7: 2008898.263 ops/s
# Warmup Iteration   8: 2367532.124 ops/s
# Warmup Iteration   9: 2408878.754 ops/s
# Warmup Iteration  10: 2407922.110 ops/s
# Warmup Iteration  11: 2407846.910 ops/s
# Warmup Iteration  12: 2408628.747 ops/s
# Warmup Iteration  13: 2406094.977 ops/s
# Warmup Iteration  14: 2396475.234 ops/s
# Warmup Iteration  15: 2407524.073 ops/s
# Warmup Iteration  16: 2406135.909 ops/s
# Warmup Iteration  17: 2405731.368 ops/s
# Warmup Iteration  18: 2404629.866 ops/s
# Warmup Iteration  19: 2407880.323 ops/s
# Warmup Iteration  20: 2408264.760 ops/s
# Warmup Iteration  21: 2407837.904 ops/s
# Warmup Iteration  22: 2409106.332 ops/s
# Warmup Iteration  23: 2399517.898 ops/s
# Warmup Iteration  24: 2404959.537 ops/s
# Warmup Iteration  25: 2406966.988 ops/s
# Warmup Iteration  26: 2407720.193 ops/s
# Warmup Iteration  27: 2404995.949 ops/s
# Warmup Iteration  28: 2405641.402 ops/s
# Warmup Iteration  29: 2406768.849 ops/s
# Warmup Iteration  30: 2404431.883 ops/s
Iteration   1: 2409897.898 ops/s
Iteration   2: 2389822.088 ops/s
Iteration   3: 2399337.461 ops/s
Iteration   4: 2412036.904 ops/s
Iteration   5: 2399089.897 ops/s
Iteration   6: 2408625.698 ops/s
Iteration   7: 2407070.123 ops/s
Iteration   8: 2409863.679 ops/s
Iteration   9: 2398202.770 ops/s
Iteration  10: 2411928.602 ops/s
Iteration  11: 2411134.057 ops/s
Iteration  12: 2405807.411 ops/s
Iteration  13: 2406680.011 ops/s
Iteration  14: 2407810.541 ops/s
Iteration  15: 2411737.226 ops/s
Iteration  16: 2406973.661 ops/s
Iteration  17: 2407771.442 ops/s
Iteration  18: 2405805.595 ops/s
Iteration  19: 2407738.398 ops/s
Iteration  20: 2409502.815 ops/s
Iteration  21: 2402507.557 ops/s
Iteration  22: 2411828.414 ops/s
Iteration  23: 2407581.860 ops/s
Iteration  24: 2406488.300 ops/s
Iteration  25: 2408480.680 ops/s
Iteration  26: 2411330.271 ops/s
Iteration  27: 2411272.222 ops/s
Iteration  28: 2406986.443 ops/s
Iteration  29: 2408049.004 ops/s
Iteration  30: 2405462.612 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_distinctView":
  2406894.121 ±(99.9%) 3281.592 ops/s [Average]
  (min, avg, max) = (2389822.088, 2406894.121, 2412036.904), stdev = 4911.733
  CI (99.9%): [2403612.529, 2410175.713] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_distinctView  thrpt   30  2406894.121 ± 3281.592  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2934150.990 ops/s
# Warmup Iteration   2: 6246178.169 ops/s
# Warmup Iteration   3: 5287604.786 ops/s
# Warmup Iteration   4: 6326067.378 ops/s
# Warmup Iteration   5: 6316909.446 ops/s
# Warmup Iteration   6: 6304383.525 ops/s
# Warmup Iteration   7: 6333906.105 ops/s
# Warmup Iteration   8: 6306168.361 ops/s
# Warmup Iteration   9: 6299080.983 ops/s
# Warmup Iteration  10: 6315630.864 ops/s
# Warmup Iteration  11: 6316868.372 ops/s
# Warmup Iteration  12: 6304819.877 ops/s
# Warmup Iteration  13: 6327579.966 ops/s
# Warmup Iteration  14: 6336789.529 ops/s
# Warmup Iteration  15: 6316101.003 ops/s
# Warmup Iteration  16: 6319930.785 ops/s
# Warmup Iteration  17: 6320694.628 ops/s
# Warmup Iteration  18: 6316840.574 ops/s
# Warmup Iteration  19: 6318388.823 ops/s
# Warmup Iteration  20: 6302023.555 ops/s
# Warmup Iteration  21: 6309180.501 ops/s
# Warmup Iteration  22: 6316594.223 ops/s
# Warmup Iteration  23: 6303213.911 ops/s
# Warmup Iteration  24: 6318460.437 ops/s
# Warmup Iteration  25: 6302115.574 ops/s
# Warmup Iteration  26: 6317974.562 ops/s
# Warmup Iteration  27: 6329546.073 ops/s
# Warmup Iteration  28: 6305626.066 ops/s
# Warmup Iteration  29: 6329845.641 ops/s
# Warmup Iteration  30: 6305208.690 ops/s
Iteration   1: 6325396.650 ops/s
Iteration   2: 6310177.574 ops/s
Iteration   3: 6331324.960 ops/s
Iteration   4: 6322136.857 ops/s
Iteration   5: 6311284.499 ops/s
Iteration   6: 6312558.539 ops/s
Iteration   7: 6311279.360 ops/s
Iteration   8: 6328297.435 ops/s
Iteration   9: 6307500.109 ops/s
Iteration  10: 6289820.214 ops/s
Iteration  11: 6297461.201 ops/s
Iteration  12: 6306421.189 ops/s
Iteration  13: 6298495.759 ops/s
Iteration  14: 6334743.340 ops/s
Iteration  15: 6294767.853 ops/s
Iteration  16: 6295046.583 ops/s
Iteration  17: 6334249.488 ops/s
Iteration  18: 6319484.695 ops/s
Iteration  19: 6314415.502 ops/s
Iteration  20: 6299270.268 ops/s
Iteration  21: 6308704.383 ops/s
Iteration  22: 6323842.326 ops/s
Iteration  23: 6330904.843 ops/s
Iteration  24: 6334872.743 ops/s
Iteration  25: 6313182.265 ops/s
Iteration  26: 6304528.528 ops/s
Iteration  27: 6323221.892 ops/s
Iteration  28: 6329572.366 ops/s
Iteration  29: 6317930.457 ops/s
Iteration  30: 6293549.696 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_empty":
  6314148.053 ±(99.9%) 9154.256 ops/s [Average]
  (min, avg, max) = (6289820.214, 6314148.053, 6334872.743), stdev = 13701.661
  CI (99.9%): [6304993.796, 6323302.309] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_empty  thrpt   30  6314148.053 ± 9154.256  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_equalsAndHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_equalsAndHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 157178.586 ops/s
# Warmup Iteration   2: 305489.937 ops/s
# Warmup Iteration   3: 345253.591 ops/s
# Warmup Iteration   4: 346695.359 ops/s
# Warmup Iteration   5: 331386.122 ops/s
# Warmup Iteration   6: 303163.998 ops/s
# Warmup Iteration   7: 346192.349 ops/s
# Warmup Iteration   8: 347471.926 ops/s
# Warmup Iteration   9: 346442.037 ops/s
# Warmup Iteration  10: 346802.545 ops/s
# Warmup Iteration  11: 346206.332 ops/s
# Warmup Iteration  12: 346470.545 ops/s
# Warmup Iteration  13: 347161.871 ops/s
# Warmup Iteration  14: 346729.734 ops/s
# Warmup Iteration  15: 346987.240 ops/s
# Warmup Iteration  16: 346537.888 ops/s
# Warmup Iteration  17: 346701.224 ops/s
# Warmup Iteration  18: 346955.051 ops/s
# Warmup Iteration  19: 346808.180 ops/s
# Warmup Iteration  20: 347027.112 ops/s
# Warmup Iteration  21: 346333.493 ops/s
# Warmup Iteration  22: 346935.248 ops/s
# Warmup Iteration  23: 347569.628 ops/s
# Warmup Iteration  24: 346539.344 ops/s
# Warmup Iteration  25: 347106.077 ops/s
# Warmup Iteration  26: 347231.088 ops/s
# Warmup Iteration  27: 347200.537 ops/s
# Warmup Iteration  28: 347571.941 ops/s
# Warmup Iteration  29: 347235.109 ops/s
# Warmup Iteration  30: 347032.480 ops/s
Iteration   1: 347778.103 ops/s
Iteration   2: 346714.246 ops/s
Iteration   3: 347051.190 ops/s
Iteration   4: 347541.939 ops/s
Iteration   5: 346558.373 ops/s
Iteration   6: 346707.476 ops/s
Iteration   7: 346744.483 ops/s
Iteration   8: 347327.583 ops/s
Iteration   9: 347666.340 ops/s
Iteration  10: 346772.130 ops/s
Iteration  11: 347762.890 ops/s
Iteration  12: 346938.330 ops/s
Iteration  13: 346618.804 ops/s
Iteration  14: 347231.918 ops/s
Iteration  15: 345731.327 ops/s
Iteration  16: 347294.195 ops/s
Iteration  17: 347413.211 ops/s
Iteration  18: 346914.341 ops/s
Iteration  19: 347639.717 ops/s
Iteration  20: 347499.666 ops/s
Iteration  21: 347169.765 ops/s
Iteration  22: 347095.584 ops/s
Iteration  23: 346988.999 ops/s
Iteration  24: 347397.702 ops/s
Iteration  25: 346871.754 ops/s
Iteration  26: 347475.547 ops/s
Iteration  27: 347238.105 ops/s
Iteration  28: 347517.364 ops/s
Iteration  29: 347260.426 ops/s
Iteration  30: 347497.242 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_equalsAndHashCode":
  347147.292 ±(99.9%) 295.629 ops/s [Average]
  (min, avg, max) = (345731.327, 347147.292, 347778.103), stdev = 442.483
  CI (99.9%): [346851.663, 347442.920] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score     Error  Units
ImmutableHashBagTest._Benchmark.benchmark_equalsAndHashCode  thrpt   30  347147.292 ± 295.629  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_flatCollect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_flatCollect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 161472.115 ops/s
# Warmup Iteration   2: 267703.613 ops/s
# Warmup Iteration   3: 333323.731 ops/s
# Warmup Iteration   4: 330420.187 ops/s
# Warmup Iteration   5: 333398.196 ops/s
# Warmup Iteration   6: 333005.149 ops/s
# Warmup Iteration   7: 276090.924 ops/s
# Warmup Iteration   8: 333031.072 ops/s
# Warmup Iteration   9: 333877.913 ops/s
# Warmup Iteration  10: 333115.859 ops/s
# Warmup Iteration  11: 333292.724 ops/s
# Warmup Iteration  12: 333022.663 ops/s
# Warmup Iteration  13: 334141.471 ops/s
# Warmup Iteration  14: 334351.881 ops/s
# Warmup Iteration  15: 333877.807 ops/s
# Warmup Iteration  16: 333955.269 ops/s
# Warmup Iteration  17: 333043.247 ops/s
# Warmup Iteration  18: 333261.718 ops/s
# Warmup Iteration  19: 333565.630 ops/s
# Warmup Iteration  20: 334053.840 ops/s
# Warmup Iteration  21: 333653.838 ops/s
# Warmup Iteration  22: 333878.313 ops/s
# Warmup Iteration  23: 334081.571 ops/s
# Warmup Iteration  24: 333381.213 ops/s
# Warmup Iteration  25: 333600.503 ops/s
# Warmup Iteration  26: 333188.638 ops/s
# Warmup Iteration  27: 333434.139 ops/s
# Warmup Iteration  28: 334145.050 ops/s
# Warmup Iteration  29: 333447.289 ops/s
# Warmup Iteration  30: 333090.452 ops/s
Iteration   1: 332574.293 ops/s
Iteration   2: 334260.021 ops/s
Iteration   3: 332502.038 ops/s
Iteration   4: 334141.005 ops/s
Iteration   5: 333151.234 ops/s
Iteration   6: 333941.640 ops/s
Iteration   7: 334093.232 ops/s
Iteration   8: 334716.437 ops/s
Iteration   9: 334129.286 ops/s
Iteration  10: 333589.482 ops/s
Iteration  11: 334156.591 ops/s
Iteration  12: 334633.246 ops/s
Iteration  13: 333127.711 ops/s
Iteration  14: 333259.211 ops/s
Iteration  15: 334365.233 ops/s
Iteration  16: 333382.376 ops/s
Iteration  17: 334114.694 ops/s
Iteration  18: 332303.787 ops/s
Iteration  19: 333680.996 ops/s
Iteration  20: 333285.363 ops/s
Iteration  21: 334946.344 ops/s
Iteration  22: 333858.242 ops/s
Iteration  23: 334407.197 ops/s
Iteration  24: 334140.609 ops/s
Iteration  25: 335166.666 ops/s
Iteration  26: 333527.790 ops/s
Iteration  27: 334564.394 ops/s
Iteration  28: 333715.016 ops/s
Iteration  29: 334150.630 ops/s
Iteration  30: 334528.070 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_flatCollect":
  333880.428 ±(99.9%) 472.518 ops/s [Average]
  (min, avg, max) = (332303.787, 333880.428, 335166.666), stdev = 707.242
  CI (99.9%): [333407.910, 334352.945] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score     Error  Units
ImmutableHashBagTest._Benchmark.benchmark_flatCollect  thrpt   30  333880.428 ± 472.518  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_flatCollectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_flatCollectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1690433.288 ops/s
# Warmup Iteration   2: 4258567.504 ops/s
# Warmup Iteration   3: 4279207.370 ops/s
# Warmup Iteration   4: 3686731.579 ops/s
# Warmup Iteration   5: 4361765.341 ops/s
# Warmup Iteration   6: 4353527.250 ops/s
# Warmup Iteration   7: 4360372.010 ops/s
# Warmup Iteration   8: 4362418.145 ops/s
# Warmup Iteration   9: 4342193.211 ops/s
# Warmup Iteration  10: 4360462.280 ops/s
# Warmup Iteration  11: 4349250.185 ops/s
# Warmup Iteration  12: 4356919.536 ops/s
# Warmup Iteration  13: 4351701.682 ops/s
# Warmup Iteration  14: 4354722.514 ops/s
# Warmup Iteration  15: 4355851.362 ops/s
# Warmup Iteration  16: 4355831.020 ops/s
# Warmup Iteration  17: 4356619.501 ops/s
# Warmup Iteration  18: 4358165.844 ops/s
# Warmup Iteration  19: 4338012.623 ops/s
# Warmup Iteration  20: 4354339.092 ops/s
# Warmup Iteration  21: 4349854.717 ops/s
# Warmup Iteration  22: 4353255.862 ops/s
# Warmup Iteration  23: 4353741.378 ops/s
# Warmup Iteration  24: 4347723.119 ops/s
# Warmup Iteration  25: 4352390.799 ops/s
# Warmup Iteration  26: 4361031.728 ops/s
# Warmup Iteration  27: 4361375.619 ops/s
# Warmup Iteration  28: 4361872.806 ops/s
# Warmup Iteration  29: 4359968.934 ops/s
# Warmup Iteration  30: 4363544.753 ops/s
Iteration   1: 4374385.950 ops/s
Iteration   2: 4352634.247 ops/s
Iteration   3: 4353461.542 ops/s
Iteration   4: 4361003.993 ops/s
Iteration   5: 4361583.464 ops/s
Iteration   6: 4339403.624 ops/s
Iteration   7: 4359250.336 ops/s
Iteration   8: 4361397.052 ops/s
Iteration   9: 4371367.456 ops/s
Iteration  10: 4354231.964 ops/s
Iteration  11: 4354430.323 ops/s
Iteration  12: 4349807.846 ops/s
Iteration  13: 4364816.072 ops/s
Iteration  14: 4368025.972 ops/s
Iteration  15: 4349303.448 ops/s
Iteration  16: 4355261.228 ops/s
Iteration  17: 4369039.923 ops/s
Iteration  18: 4355981.627 ops/s
Iteration  19: 4357078.040 ops/s
Iteration  20: 4360947.482 ops/s
Iteration  21: 4363293.562 ops/s
Iteration  22: 4353984.792 ops/s
Iteration  23: 4352366.117 ops/s
Iteration  24: 4348688.099 ops/s
Iteration  25: 4353482.846 ops/s
Iteration  26: 4356684.012 ops/s
Iteration  27: 4354136.010 ops/s
Iteration  28: 4347601.232 ops/s
Iteration  29: 4369915.009 ops/s
Iteration  30: 4354055.651 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_flatCollectBoolean":
  4357587.297 ±(99.9%) 5259.610 ops/s [Average]
  (min, avg, max) = (4339403.624, 4357587.297, 4374385.950), stdev = 7872.337
  CI (99.9%): [4352327.688, 4362846.907] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_flatCollectBoolean  thrpt   30  4357587.297 ± 5259.610  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_flatCollectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_flatCollectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 680866.424 ops/s
# Warmup Iteration   2: 1143236.774 ops/s
# Warmup Iteration   3: 1345345.322 ops/s
# Warmup Iteration   4: 1351752.185 ops/s
# Warmup Iteration   5: 1350233.785 ops/s
# Warmup Iteration   6: 1199567.807 ops/s
# Warmup Iteration   7: 1273214.107 ops/s
# Warmup Iteration   8: 1350997.822 ops/s
# Warmup Iteration   9: 1352213.975 ops/s
# Warmup Iteration  10: 1354843.307 ops/s
# Warmup Iteration  11: 1354718.877 ops/s
# Warmup Iteration  12: 1350095.985 ops/s
# Warmup Iteration  13: 1354011.849 ops/s
# Warmup Iteration  14: 1353342.402 ops/s
# Warmup Iteration  15: 1354459.510 ops/s
# Warmup Iteration  16: 1353178.522 ops/s
# Warmup Iteration  17: 1355720.321 ops/s
# Warmup Iteration  18: 1354967.648 ops/s
# Warmup Iteration  19: 1355552.029 ops/s
# Warmup Iteration  20: 1354501.972 ops/s
# Warmup Iteration  21: 1355551.567 ops/s
# Warmup Iteration  22: 1355369.394 ops/s
# Warmup Iteration  23: 1355042.752 ops/s
# Warmup Iteration  24: 1353477.781 ops/s
# Warmup Iteration  25: 1357761.330 ops/s
# Warmup Iteration  26: 1357424.665 ops/s
# Warmup Iteration  27: 1355634.389 ops/s
# Warmup Iteration  28: 1355315.298 ops/s
# Warmup Iteration  29: 1355891.521 ops/s
# Warmup Iteration  30: 1355460.655 ops/s
Iteration   1: 1356093.776 ops/s
Iteration   2: 1352630.436 ops/s
Iteration   3: 1352714.497 ops/s
Iteration   4: 1357675.612 ops/s
Iteration   5: 1353242.471 ops/s
Iteration   6: 1358577.140 ops/s
Iteration   7: 1352167.817 ops/s
Iteration   8: 1356710.249 ops/s
Iteration   9: 1354286.074 ops/s
Iteration  10: 1355691.586 ops/s
Iteration  11: 1352867.738 ops/s
Iteration  12: 1358622.493 ops/s
Iteration  13: 1355399.408 ops/s
Iteration  14: 1356708.174 ops/s
Iteration  15: 1352562.835 ops/s
Iteration  16: 1360175.980 ops/s
Iteration  17: 1356245.849 ops/s
Iteration  18: 1358064.780 ops/s
Iteration  19: 1355752.184 ops/s
Iteration  20: 1359242.828 ops/s
Iteration  21: 1354327.499 ops/s
Iteration  22: 1355512.277 ops/s
Iteration  23: 1352124.573 ops/s
Iteration  24: 1356023.495 ops/s
Iteration  25: 1355634.769 ops/s
Iteration  26: 1358364.897 ops/s
Iteration  27: 1355225.396 ops/s
Iteration  28: 1355530.740 ops/s
Iteration  29: 1355812.516 ops/s
Iteration  30: 1357862.055 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_flatCollectByte":
  1355728.338 ±(99.9%) 1494.087 ops/s [Average]
  (min, avg, max) = (1352124.573, 1355728.338, 1360175.980), stdev = 2236.280
  CI (99.9%): [1354234.251, 1357222.425] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_flatCollectByte  thrpt   30  1355728.338 ± 1494.087  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_flatCollectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_flatCollectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 780695.269 ops/s
# Warmup Iteration   2: 2003177.617 ops/s
# Warmup Iteration   3: 2033978.980 ops/s
# Warmup Iteration   4: 1704206.745 ops/s
# Warmup Iteration   5: 2038682.366 ops/s
# Warmup Iteration   6: 2036728.293 ops/s
# Warmup Iteration   7: 2036594.034 ops/s
# Warmup Iteration   8: 2038017.856 ops/s
# Warmup Iteration   9: 2035048.184 ops/s
# Warmup Iteration  10: 2038578.412 ops/s
# Warmup Iteration  11: 2039071.884 ops/s
# Warmup Iteration  12: 2035981.810 ops/s
# Warmup Iteration  13: 2037493.611 ops/s
# Warmup Iteration  14: 2038173.951 ops/s
# Warmup Iteration  15: 2038691.370 ops/s
# Warmup Iteration  16: 2039077.362 ops/s
# Warmup Iteration  17: 2040384.136 ops/s
# Warmup Iteration  18: 2034058.332 ops/s
# Warmup Iteration  19: 2040843.086 ops/s
# Warmup Iteration  20: 2039295.868 ops/s
# Warmup Iteration  21: 2034560.502 ops/s
# Warmup Iteration  22: 2034108.108 ops/s
# Warmup Iteration  23: 2038827.121 ops/s
# Warmup Iteration  24: 2032856.023 ops/s
# Warmup Iteration  25: 2033726.376 ops/s
# Warmup Iteration  26: 2035045.162 ops/s
# Warmup Iteration  27: 2037062.591 ops/s
# Warmup Iteration  28: 2036164.132 ops/s
# Warmup Iteration  29: 2036635.042 ops/s
# Warmup Iteration  30: 2037814.976 ops/s
Iteration   1: 2028005.440 ops/s
Iteration   2: 2028537.047 ops/s
Iteration   3: 2029962.689 ops/s
Iteration   4: 2040770.955 ops/s
Iteration   5: 2034264.577 ops/s
Iteration   6: 2038732.656 ops/s
Iteration   7: 2036073.432 ops/s
Iteration   8: 2040567.303 ops/s
Iteration   9: 2033703.811 ops/s
Iteration  10: 2035229.993 ops/s
Iteration  11: 2035624.407 ops/s
Iteration  12: 2036750.035 ops/s
Iteration  13: 2032304.734 ops/s
Iteration  14: 2044399.199 ops/s
Iteration  15: 2035985.859 ops/s
Iteration  16: 2033079.742 ops/s
Iteration  17: 2043208.696 ops/s
Iteration  18: 2039746.252 ops/s
Iteration  19: 2037318.520 ops/s
Iteration  20: 2036363.778 ops/s
Iteration  21: 2024120.106 ops/s
Iteration  22: 2041388.835 ops/s
Iteration  23: 2038909.317 ops/s
Iteration  24: 2040519.923 ops/s
Iteration  25: 2039614.802 ops/s
Iteration  26: 2024510.421 ops/s
Iteration  27: 2036608.075 ops/s
Iteration  28: 2037882.438 ops/s
Iteration  29: 2037765.872 ops/s
Iteration  30: 2040624.221 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_flatCollectChar":
  2036085.771 ±(99.9%) 3396.926 ops/s [Average]
  (min, avg, max) = (2024120.106, 2036085.771, 2044399.199), stdev = 5084.359
  CI (99.9%): [2032688.845, 2039482.697] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_flatCollectChar  thrpt   30  2036085.771 ± 3396.926  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_flatCollectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_flatCollectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 394462.416 ops/s
# Warmup Iteration   2: 904607.020 ops/s
# Warmup Iteration   3: 945271.650 ops/s
# Warmup Iteration   4: 846610.716 ops/s
# Warmup Iteration   5: 891391.719 ops/s
# Warmup Iteration   6: 947360.024 ops/s
# Warmup Iteration   7: 948098.023 ops/s
# Warmup Iteration   8: 948049.348 ops/s
# Warmup Iteration   9: 945433.911 ops/s
# Warmup Iteration  10: 949992.873 ops/s
# Warmup Iteration  11: 946989.485 ops/s
# Warmup Iteration  12: 948161.861 ops/s
# Warmup Iteration  13: 944752.096 ops/s
# Warmup Iteration  14: 944810.759 ops/s
# Warmup Iteration  15: 948742.309 ops/s
# Warmup Iteration  16: 948308.939 ops/s
# Warmup Iteration  17: 948703.372 ops/s
# Warmup Iteration  18: 945861.267 ops/s
# Warmup Iteration  19: 947655.520 ops/s
# Warmup Iteration  20: 950701.264 ops/s
# Warmup Iteration  21: 947454.274 ops/s
# Warmup Iteration  22: 947488.345 ops/s
# Warmup Iteration  23: 948176.137 ops/s
# Warmup Iteration  24: 948865.948 ops/s
# Warmup Iteration  25: 947156.505 ops/s
# Warmup Iteration  26: 948314.659 ops/s
# Warmup Iteration  27: 946995.470 ops/s
# Warmup Iteration  28: 946565.872 ops/s
# Warmup Iteration  29: 948653.181 ops/s
# Warmup Iteration  30: 946858.452 ops/s
Iteration   1: 946858.780 ops/s
Iteration   2: 945491.506 ops/s
Iteration   3: 945542.855 ops/s
Iteration   4: 945674.347 ops/s
Iteration   5: 947598.013 ops/s
Iteration   6: 946828.592 ops/s
Iteration   7: 948754.341 ops/s
Iteration   8: 947692.765 ops/s
Iteration   9: 947473.230 ops/s
Iteration  10: 947453.867 ops/s
Iteration  11: 944199.884 ops/s
Iteration  12: 947129.592 ops/s
Iteration  13: 946534.852 ops/s
Iteration  14: 952139.119 ops/s
Iteration  15: 946703.620 ops/s
Iteration  16: 946788.358 ops/s
Iteration  17: 948582.214 ops/s
Iteration  18: 947792.173 ops/s
Iteration  19: 945095.260 ops/s
Iteration  20: 950580.164 ops/s
Iteration  21: 944116.538 ops/s
Iteration  22: 946891.850 ops/s
Iteration  23: 947663.257 ops/s
Iteration  24: 945498.654 ops/s
Iteration  25: 948205.928 ops/s
Iteration  26: 948939.212 ops/s
Iteration  27: 949083.041 ops/s
Iteration  28: 947863.210 ops/s
Iteration  29: 941295.195 ops/s
Iteration  30: 944884.019 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_flatCollectDouble":
  946978.481 ±(99.9%) 1376.352 ops/s [Average]
  (min, avg, max) = (941295.195, 946978.481, 952139.119), stdev = 2060.060
  CI (99.9%): [945602.129, 948354.834] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_flatCollectDouble  thrpt   30  946978.481 ± 1376.352  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_flatCollectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_flatCollectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 614923.236 ops/s
# Warmup Iteration   2: 1440818.160 ops/s
# Warmup Iteration   3: 1515905.182 ops/s
# Warmup Iteration   4: 1326812.136 ops/s
# Warmup Iteration   5: 1455383.810 ops/s
# Warmup Iteration   6: 1513916.481 ops/s
# Warmup Iteration   7: 1521579.732 ops/s
# Warmup Iteration   8: 1521566.149 ops/s
# Warmup Iteration   9: 1519996.416 ops/s
# Warmup Iteration  10: 1520609.957 ops/s
# Warmup Iteration  11: 1519042.994 ops/s
# Warmup Iteration  12: 1520575.089 ops/s
# Warmup Iteration  13: 1523298.254 ops/s
# Warmup Iteration  14: 1518740.321 ops/s
# Warmup Iteration  15: 1516503.529 ops/s
# Warmup Iteration  16: 1522748.255 ops/s
# Warmup Iteration  17: 1520028.790 ops/s
# Warmup Iteration  18: 1517416.076 ops/s
# Warmup Iteration  19: 1519540.168 ops/s
# Warmup Iteration  20: 1516113.530 ops/s
# Warmup Iteration  21: 1519511.442 ops/s
# Warmup Iteration  22: 1519539.113 ops/s
# Warmup Iteration  23: 1517413.596 ops/s
# Warmup Iteration  24: 1517362.833 ops/s
# Warmup Iteration  25: 1518193.030 ops/s
# Warmup Iteration  26: 1518970.432 ops/s
# Warmup Iteration  27: 1515721.300 ops/s
# Warmup Iteration  28: 1520363.005 ops/s
# Warmup Iteration  29: 1518975.385 ops/s
# Warmup Iteration  30: 1519293.943 ops/s
Iteration   1: 1516742.456 ops/s
Iteration   2: 1519521.193 ops/s
Iteration   3: 1516347.072 ops/s
Iteration   4: 1518394.519 ops/s
Iteration   5: 1521527.438 ops/s
Iteration   6: 1518669.310 ops/s
Iteration   7: 1519259.855 ops/s
Iteration   8: 1520404.544 ops/s
Iteration   9: 1519091.706 ops/s
Iteration  10: 1520242.936 ops/s
Iteration  11: 1515651.037 ops/s
Iteration  12: 1515764.853 ops/s
Iteration  13: 1516814.254 ops/s
Iteration  14: 1518631.683 ops/s
Iteration  15: 1514269.609 ops/s
Iteration  16: 1521127.679 ops/s
Iteration  17: 1519390.979 ops/s
Iteration  18: 1518943.818 ops/s
Iteration  19: 1518975.565 ops/s
Iteration  20: 1520080.360 ops/s
Iteration  21: 1520207.506 ops/s
Iteration  22: 1520954.647 ops/s
Iteration  23: 1513693.048 ops/s
Iteration  24: 1518859.327 ops/s
Iteration  25: 1519810.535 ops/s
Iteration  26: 1521807.986 ops/s
Iteration  27: 1517823.101 ops/s
Iteration  28: 1516135.405 ops/s
Iteration  29: 1516830.058 ops/s
Iteration  30: 1519307.508 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_flatCollectFloat":
  1518509.333 ±(99.9%) 1397.384 ops/s [Average]
  (min, avg, max) = (1513693.048, 1518509.333, 1521807.986), stdev = 2091.539
  CI (99.9%): [1517111.949, 1519906.717] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_flatCollectFloat  thrpt   30  1518509.333 ± 1397.384  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_flatCollectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_flatCollectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 794462.763 ops/s
# Warmup Iteration   2: 2118056.295 ops/s
# Warmup Iteration   3: 2131964.169 ops/s
# Warmup Iteration   4: 1769502.233 ops/s
# Warmup Iteration   5: 2136318.697 ops/s
# Warmup Iteration   6: 2131261.675 ops/s
# Warmup Iteration   7: 2134473.371 ops/s
# Warmup Iteration   8: 2136127.003 ops/s
# Warmup Iteration   9: 2134892.066 ops/s
# Warmup Iteration  10: 2129941.268 ops/s
# Warmup Iteration  11: 2132423.800 ops/s
# Warmup Iteration  12: 2128949.641 ops/s
# Warmup Iteration  13: 2130547.413 ops/s
# Warmup Iteration  14: 2134404.396 ops/s
# Warmup Iteration  15: 2134554.605 ops/s
# Warmup Iteration  16: 2136048.577 ops/s
# Warmup Iteration  17: 2133487.277 ops/s
# Warmup Iteration  18: 2131074.220 ops/s
# Warmup Iteration  19: 2133374.601 ops/s
# Warmup Iteration  20: 2134355.880 ops/s
# Warmup Iteration  21: 2136314.177 ops/s
# Warmup Iteration  22: 2128963.260 ops/s
# Warmup Iteration  23: 2136732.971 ops/s
# Warmup Iteration  24: 2132698.054 ops/s
# Warmup Iteration  25: 2134496.576 ops/s
# Warmup Iteration  26: 2136010.756 ops/s
# Warmup Iteration  27: 2133100.434 ops/s
# Warmup Iteration  28: 2135802.143 ops/s
# Warmup Iteration  29: 2134898.946 ops/s
# Warmup Iteration  30: 2134930.169 ops/s
Iteration   1: 2135284.977 ops/s
Iteration   2: 2133675.524 ops/s
Iteration   3: 2139583.127 ops/s
Iteration   4: 2132760.512 ops/s
Iteration   5: 2137807.955 ops/s
Iteration   6: 2138641.353 ops/s
Iteration   7: 2136226.211 ops/s
Iteration   8: 2134045.294 ops/s
Iteration   9: 2140140.675 ops/s
Iteration  10: 2139687.724 ops/s
Iteration  11: 2129863.171 ops/s
Iteration  12: 2133273.644 ops/s
Iteration  13: 2133120.201 ops/s
Iteration  14: 2134861.398 ops/s
Iteration  15: 2135278.852 ops/s
Iteration  16: 2136731.805 ops/s
Iteration  17: 2133419.253 ops/s
Iteration  18: 2135333.813 ops/s
Iteration  19: 2126614.365 ops/s
Iteration  20: 2133803.611 ops/s
Iteration  21: 2135289.189 ops/s
Iteration  22: 2130691.542 ops/s
Iteration  23: 2126659.706 ops/s
Iteration  24: 2139107.271 ops/s
Iteration  25: 2132562.882 ops/s
Iteration  26: 2133720.521 ops/s
Iteration  27: 2133000.714 ops/s
Iteration  28: 2132462.519 ops/s
Iteration  29: 2135341.125 ops/s
Iteration  30: 2135912.068 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_flatCollectInt":
  2134496.700 ±(99.9%) 2242.161 ops/s [Average]
  (min, avg, max) = (2126614.365, 2134496.700, 2140140.675), stdev = 3355.961
  CI (99.9%): [2132254.539, 2136738.861] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_flatCollectInt  thrpt   30  2134496.700 ± 2242.161  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_flatCollectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_flatCollectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 725871.555 ops/s
# Warmup Iteration   2: 1929157.174 ops/s
# Warmup Iteration   3: 1714136.884 ops/s
# Warmup Iteration   4: 1845692.763 ops/s
# Warmup Iteration   5: 1940036.030 ops/s
# Warmup Iteration   6: 1939036.163 ops/s
# Warmup Iteration   7: 1939090.098 ops/s
# Warmup Iteration   8: 1938006.556 ops/s
# Warmup Iteration   9: 1939146.901 ops/s
# Warmup Iteration  10: 1940532.423 ops/s
# Warmup Iteration  11: 1944115.970 ops/s
# Warmup Iteration  12: 1941340.108 ops/s
# Warmup Iteration  13: 1936747.223 ops/s
# Warmup Iteration  14: 1937484.557 ops/s
# Warmup Iteration  15: 1944710.574 ops/s
# Warmup Iteration  16: 1938932.583 ops/s
# Warmup Iteration  17: 1927832.876 ops/s
# Warmup Iteration  18: 1932979.358 ops/s
# Warmup Iteration  19: 1938261.695 ops/s
# Warmup Iteration  20: 1936837.704 ops/s
# Warmup Iteration  21: 1934259.925 ops/s
# Warmup Iteration  22: 1938068.208 ops/s
# Warmup Iteration  23: 1936323.180 ops/s
# Warmup Iteration  24: 1937515.157 ops/s
# Warmup Iteration  25: 1935953.831 ops/s
# Warmup Iteration  26: 1937503.872 ops/s
# Warmup Iteration  27: 1941854.002 ops/s
# Warmup Iteration  28: 1935964.067 ops/s
# Warmup Iteration  29: 1935833.689 ops/s
# Warmup Iteration  30: 1933619.260 ops/s
Iteration   1: 1931327.020 ops/s
Iteration   2: 1936162.073 ops/s
Iteration   3: 1930808.026 ops/s
Iteration   4: 1929359.597 ops/s
Iteration   5: 1934275.258 ops/s
Iteration   6: 1925782.606 ops/s
Iteration   7: 1934399.059 ops/s
Iteration   8: 1933612.207 ops/s
Iteration   9: 1938060.026 ops/s
Iteration  10: 1934632.232 ops/s
Iteration  11: 1939529.640 ops/s
Iteration  12: 1928580.453 ops/s
Iteration  13: 1934822.636 ops/s
Iteration  14: 1926509.354 ops/s
Iteration  15: 1940351.567 ops/s
Iteration  16: 1941992.647 ops/s
Iteration  17: 1926760.724 ops/s
Iteration  18: 1938230.847 ops/s
Iteration  19: 1936921.888 ops/s
Iteration  20: 1939635.304 ops/s
Iteration  21: 1938015.248 ops/s
Iteration  22: 1928775.424 ops/s
Iteration  23: 1936225.092 ops/s
Iteration  24: 1940682.042 ops/s
Iteration  25: 1937885.487 ops/s
Iteration  26: 1930113.847 ops/s
Iteration  27: 1937594.005 ops/s
Iteration  28: 1934876.909 ops/s
Iteration  29: 1936970.560 ops/s
Iteration  30: 1934434.415 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_flatCollectLong":
  1934577.540 ±(99.9%) 3028.334 ops/s [Average]
  (min, avg, max) = (1925782.606, 1934577.540, 1941992.647), stdev = 4532.669
  CI (99.9%): [1931549.206, 1937605.874] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_flatCollectLong  thrpt   30  1934577.540 ± 3028.334  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_flatCollectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_flatCollectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 835155.396 ops/s
# Warmup Iteration   2: 2276995.599 ops/s
# Warmup Iteration   3: 2327738.314 ops/s
# Warmup Iteration   4: 1934603.967 ops/s
# Warmup Iteration   5: 2337066.508 ops/s
# Warmup Iteration   6: 2330217.157 ops/s
# Warmup Iteration   7: 2336208.383 ops/s
# Warmup Iteration   8: 2322166.217 ops/s
# Warmup Iteration   9: 2328589.683 ops/s
# Warmup Iteration  10: 2330537.043 ops/s
# Warmup Iteration  11: 2326905.872 ops/s
# Warmup Iteration  12: 2329586.114 ops/s
# Warmup Iteration  13: 2329251.867 ops/s
# Warmup Iteration  14: 2333354.889 ops/s
# Warmup Iteration  15: 2334281.206 ops/s
# Warmup Iteration  16: 2337414.430 ops/s
# Warmup Iteration  17: 2335743.878 ops/s
# Warmup Iteration  18: 2334607.207 ops/s
# Warmup Iteration  19: 2333707.962 ops/s
# Warmup Iteration  20: 2335886.247 ops/s
# Warmup Iteration  21: 2328427.279 ops/s
# Warmup Iteration  22: 2334590.320 ops/s
# Warmup Iteration  23: 2335814.121 ops/s
# Warmup Iteration  24: 2331204.947 ops/s
# Warmup Iteration  25: 2339379.760 ops/s
# Warmup Iteration  26: 2334178.136 ops/s
# Warmup Iteration  27: 2335432.228 ops/s
# Warmup Iteration  28: 2334774.639 ops/s
# Warmup Iteration  29: 2336558.991 ops/s
# Warmup Iteration  30: 2335491.439 ops/s
Iteration   1: 2329020.514 ops/s
Iteration   2: 2335241.712 ops/s
Iteration   3: 2334543.476 ops/s
Iteration   4: 2331298.284 ops/s
Iteration   5: 2333322.940 ops/s
Iteration   6: 2327979.247 ops/s
Iteration   7: 2338123.657 ops/s
Iteration   8: 2338723.615 ops/s
Iteration   9: 2337643.484 ops/s
Iteration  10: 2332028.133 ops/s
Iteration  11: 2335845.652 ops/s
Iteration  12: 2327768.540 ops/s
Iteration  13: 2328011.101 ops/s
Iteration  14: 2341889.568 ops/s
Iteration  15: 2339049.366 ops/s
Iteration  16: 2335550.181 ops/s
Iteration  17: 2322028.010 ops/s
Iteration  18: 2338843.875 ops/s
Iteration  19: 2341660.398 ops/s
Iteration  20: 2334154.130 ops/s
Iteration  21: 2339063.317 ops/s
Iteration  22: 2330487.697 ops/s
Iteration  23: 2335163.530 ops/s
Iteration  24: 2333493.514 ops/s
Iteration  25: 2337809.454 ops/s
Iteration  26: 2334944.375 ops/s
Iteration  27: 2330874.884 ops/s
Iteration  28: 2333816.702 ops/s
Iteration  29: 2335853.721 ops/s
Iteration  30: 2328736.441 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_flatCollectShort":
  2334098.984 ±(99.9%) 3080.475 ops/s [Average]
  (min, avg, max) = (2322028.010, 2334098.984, 2341889.568), stdev = 4610.710
  CI (99.9%): [2331018.509, 2337179.459] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_flatCollectShort  thrpt   30  2334098.984 ± 3080.475  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_flatCollectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_flatCollectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 165974.224 ops/s
# Warmup Iteration   2: 313843.862 ops/s
# Warmup Iteration   3: 356021.450 ops/s
# Warmup Iteration   4: 357578.921 ops/s
# Warmup Iteration   5: 340152.340 ops/s
# Warmup Iteration   6: 313534.602 ops/s
# Warmup Iteration   7: 356988.809 ops/s
# Warmup Iteration   8: 357301.227 ops/s
# Warmup Iteration   9: 357506.527 ops/s
# Warmup Iteration  10: 356957.135 ops/s
# Warmup Iteration  11: 356986.468 ops/s
# Warmup Iteration  12: 356891.987 ops/s
# Warmup Iteration  13: 357483.719 ops/s
# Warmup Iteration  14: 356690.577 ops/s
# Warmup Iteration  15: 357109.757 ops/s
# Warmup Iteration  16: 356460.239 ops/s
# Warmup Iteration  17: 358220.942 ops/s
# Warmup Iteration  18: 358600.788 ops/s
# Warmup Iteration  19: 357794.829 ops/s
# Warmup Iteration  20: 357773.192 ops/s
# Warmup Iteration  21: 358187.844 ops/s
# Warmup Iteration  22: 358337.782 ops/s
# Warmup Iteration  23: 358608.025 ops/s
# Warmup Iteration  24: 358654.604 ops/s
# Warmup Iteration  25: 356853.723 ops/s
# Warmup Iteration  26: 358031.021 ops/s
# Warmup Iteration  27: 357815.759 ops/s
# Warmup Iteration  28: 357917.242 ops/s
# Warmup Iteration  29: 357332.634 ops/s
# Warmup Iteration  30: 357597.809 ops/s
Iteration   1: 357914.631 ops/s
Iteration   2: 356635.070 ops/s
Iteration   3: 358332.928 ops/s
Iteration   4: 359194.320 ops/s
Iteration   5: 357991.221 ops/s
Iteration   6: 359158.447 ops/s
Iteration   7: 357906.402 ops/s
Iteration   8: 357469.564 ops/s
Iteration   9: 358828.956 ops/s
Iteration  10: 358700.124 ops/s
Iteration  11: 357224.954 ops/s
Iteration  12: 358960.716 ops/s
Iteration  13: 357911.247 ops/s
Iteration  14: 358040.614 ops/s
Iteration  15: 357749.084 ops/s
Iteration  16: 358600.850 ops/s
Iteration  17: 359539.522 ops/s
Iteration  18: 357740.918 ops/s
Iteration  19: 359227.851 ops/s
Iteration  20: 358405.425 ops/s
Iteration  21: 358418.338 ops/s
Iteration  22: 358964.671 ops/s
Iteration  23: 358100.771 ops/s
Iteration  24: 356749.421 ops/s
Iteration  25: 358694.884 ops/s
Iteration  26: 357790.134 ops/s
Iteration  27: 358504.080 ops/s
Iteration  28: 357836.470 ops/s
Iteration  29: 357917.485 ops/s
Iteration  30: 357532.839 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_flatCollectWith":
  358201.398 ±(99.9%) 476.953 ops/s [Average]
  (min, avg, max) = (356635.070, 358201.398, 359539.522), stdev = 713.882
  CI (99.9%): [357724.445, 358678.351] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score     Error  Units
ImmutableHashBagTest._Benchmark.benchmark_flatCollectWith  thrpt   30  358201.398 ± 476.953  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_flatCollectWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_flatCollectWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 461420.887 ops/s
# Warmup Iteration   2: 790576.793 ops/s
# Warmup Iteration   3: 918875.025 ops/s
# Warmup Iteration   4: 924068.639 ops/s
# Warmup Iteration   5: 921448.644 ops/s
# Warmup Iteration   6: 755230.262 ops/s
# Warmup Iteration   7: 923629.333 ops/s
# Warmup Iteration   8: 923681.830 ops/s
# Warmup Iteration   9: 924782.885 ops/s
# Warmup Iteration  10: 925172.613 ops/s
# Warmup Iteration  11: 924570.616 ops/s
# Warmup Iteration  12: 922527.787 ops/s
# Warmup Iteration  13: 924984.546 ops/s
# Warmup Iteration  14: 925778.128 ops/s
# Warmup Iteration  15: 922912.299 ops/s
# Warmup Iteration  16: 923647.067 ops/s
# Warmup Iteration  17: 924616.012 ops/s
# Warmup Iteration  18: 923238.602 ops/s
# Warmup Iteration  19: 923523.414 ops/s
# Warmup Iteration  20: 924758.462 ops/s
# Warmup Iteration  21: 925504.955 ops/s
# Warmup Iteration  22: 924893.458 ops/s
# Warmup Iteration  23: 924474.049 ops/s
# Warmup Iteration  24: 923512.984 ops/s
# Warmup Iteration  25: 923874.014 ops/s
# Warmup Iteration  26: 924053.488 ops/s
# Warmup Iteration  27: 924667.010 ops/s
# Warmup Iteration  28: 924398.239 ops/s
# Warmup Iteration  29: 924457.212 ops/s
# Warmup Iteration  30: 924378.203 ops/s
Iteration   1: 922409.943 ops/s
Iteration   2: 917128.259 ops/s
Iteration   3: 923745.764 ops/s
Iteration   4: 924990.925 ops/s
Iteration   5: 922673.963 ops/s
Iteration   6: 923406.633 ops/s
Iteration   7: 923685.213 ops/s
Iteration   8: 925757.358 ops/s
Iteration   9: 925768.367 ops/s
Iteration  10: 924439.854 ops/s
Iteration  11: 923284.375 ops/s
Iteration  12: 924791.822 ops/s
Iteration  13: 925347.593 ops/s
Iteration  14: 919810.099 ops/s
Iteration  15: 922978.622 ops/s
Iteration  16: 924523.885 ops/s
Iteration  17: 925420.592 ops/s
Iteration  18: 925663.017 ops/s
Iteration  19: 926361.719 ops/s
Iteration  20: 923827.002 ops/s
Iteration  21: 924796.106 ops/s
Iteration  22: 924485.470 ops/s
Iteration  23: 924022.587 ops/s
Iteration  24: 924492.522 ops/s
Iteration  25: 921457.531 ops/s
Iteration  26: 923591.897 ops/s
Iteration  27: 923568.515 ops/s
Iteration  28: 923326.485 ops/s
Iteration  29: 922252.778 ops/s
Iteration  30: 925930.038 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_flatCollectWithTarget":
  923797.964 ±(99.9%) 1274.738 ops/s [Average]
  (min, avg, max) = (917128.259, 923797.964, 926361.719), stdev = 1907.968
  CI (99.9%): [922523.227, 925072.702] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_flatCollectWithTarget  thrpt   30  923797.964 ± 1274.738  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 373441.503 ops/s
# Warmup Iteration   2: 707488.231 ops/s
# Warmup Iteration   3: 787739.754 ops/s
# Warmup Iteration   4: 791155.329 ops/s
# Warmup Iteration   5: 740159.129 ops/s
# Warmup Iteration   6: 708093.639 ops/s
# Warmup Iteration   7: 790398.290 ops/s
# Warmup Iteration   8: 791420.856 ops/s
# Warmup Iteration   9: 791911.151 ops/s
# Warmup Iteration  10: 793130.177 ops/s
# Warmup Iteration  11: 790910.924 ops/s
# Warmup Iteration  12: 791166.512 ops/s
# Warmup Iteration  13: 791618.579 ops/s
# Warmup Iteration  14: 791106.932 ops/s
# Warmup Iteration  15: 791346.725 ops/s
# Warmup Iteration  16: 791113.759 ops/s
# Warmup Iteration  17: 793805.336 ops/s
# Warmup Iteration  18: 793219.100 ops/s
# Warmup Iteration  19: 792614.326 ops/s
# Warmup Iteration  20: 790675.111 ops/s
# Warmup Iteration  21: 792123.508 ops/s
# Warmup Iteration  22: 792685.458 ops/s
# Warmup Iteration  23: 790551.002 ops/s
# Warmup Iteration  24: 792736.240 ops/s
# Warmup Iteration  25: 793060.293 ops/s
# Warmup Iteration  26: 791855.082 ops/s
# Warmup Iteration  27: 791728.076 ops/s
# Warmup Iteration  28: 790539.991 ops/s
# Warmup Iteration  29: 794339.347 ops/s
# Warmup Iteration  30: 792496.415 ops/s
Iteration   1: 791023.389 ops/s
Iteration   2: 790984.380 ops/s
Iteration   3: 792543.593 ops/s
Iteration   4: 793443.793 ops/s
Iteration   5: 791235.750 ops/s
Iteration   6: 793320.001 ops/s
Iteration   7: 791247.154 ops/s
Iteration   8: 791471.368 ops/s
Iteration   9: 789937.246 ops/s
Iteration  10: 793559.152 ops/s
Iteration  11: 792077.492 ops/s
Iteration  12: 793183.945 ops/s
Iteration  13: 791739.811 ops/s
Iteration  14: 791850.478 ops/s
Iteration  15: 790365.101 ops/s
Iteration  16: 792535.612 ops/s
Iteration  17: 793627.927 ops/s
Iteration  18: 792023.262 ops/s
Iteration  19: 790497.645 ops/s
Iteration  20: 793064.776 ops/s
Iteration  21: 792548.718 ops/s
Iteration  22: 789892.208 ops/s
Iteration  23: 790467.440 ops/s
Iteration  24: 792424.442 ops/s
Iteration  25: 790382.961 ops/s
Iteration  26: 790423.995 ops/s
Iteration  27: 791819.400 ops/s
Iteration  28: 791919.744 ops/s
Iteration  29: 791455.676 ops/s
Iteration  30: 792193.898 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_forEach":
  791775.345 ±(99.9%) 743.909 ops/s [Average]
  (min, avg, max) = (789892.208, 791775.345, 793627.927), stdev = 1113.447
  CI (99.9%): [791031.437, 792519.254] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score     Error  Units
ImmutableHashBagTest._Benchmark.benchmark_forEach  thrpt   30  791775.345 ± 743.909  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_forEachWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_forEachWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 393875.206 ops/s
# Warmup Iteration   2: 727337.951 ops/s
# Warmup Iteration   3: 829436.178 ops/s
# Warmup Iteration   4: 827447.362 ops/s
# Warmup Iteration   5: 832861.947 ops/s
# Warmup Iteration   6: 684017.356 ops/s
# Warmup Iteration   7: 831933.116 ops/s
# Warmup Iteration   8: 833886.885 ops/s
# Warmup Iteration   9: 834705.750 ops/s
# Warmup Iteration  10: 832623.278 ops/s
# Warmup Iteration  11: 828098.479 ops/s
# Warmup Iteration  12: 830868.121 ops/s
# Warmup Iteration  13: 835716.840 ops/s
# Warmup Iteration  14: 829805.244 ops/s
# Warmup Iteration  15: 833334.761 ops/s
# Warmup Iteration  16: 831856.074 ops/s
# Warmup Iteration  17: 835068.249 ops/s
# Warmup Iteration  18: 829203.315 ops/s
# Warmup Iteration  19: 824339.013 ops/s
# Warmup Iteration  20: 833276.390 ops/s
# Warmup Iteration  21: 829268.595 ops/s
# Warmup Iteration  22: 832818.408 ops/s
# Warmup Iteration  23: 828658.956 ops/s
# Warmup Iteration  24: 830633.472 ops/s
# Warmup Iteration  25: 836740.268 ops/s
# Warmup Iteration  26: 828552.559 ops/s
# Warmup Iteration  27: 829030.210 ops/s
# Warmup Iteration  28: 833360.712 ops/s
# Warmup Iteration  29: 829117.071 ops/s
# Warmup Iteration  30: 828545.652 ops/s
Iteration   1: 836975.653 ops/s
Iteration   2: 833551.145 ops/s
Iteration   3: 834951.927 ops/s
Iteration   4: 838833.393 ops/s
Iteration   5: 827598.717 ops/s
Iteration   6: 828389.867 ops/s
Iteration   7: 829667.259 ops/s
Iteration   8: 834316.459 ops/s
Iteration   9: 827171.843 ops/s
Iteration  10: 830237.624 ops/s
Iteration  11: 826588.393 ops/s
Iteration  12: 831815.949 ops/s
Iteration  13: 836330.162 ops/s
Iteration  14: 826145.712 ops/s
Iteration  15: 828854.160 ops/s
Iteration  16: 830890.968 ops/s
Iteration  17: 836496.334 ops/s
Iteration  18: 832326.752 ops/s
Iteration  19: 833910.655 ops/s
Iteration  20: 827514.730 ops/s
Iteration  21: 827218.723 ops/s
Iteration  22: 829938.824 ops/s
Iteration  23: 827148.455 ops/s
Iteration  24: 825781.572 ops/s
Iteration  25: 824486.583 ops/s
Iteration  26: 824582.085 ops/s
Iteration  27: 825833.040 ops/s
Iteration  28: 830294.441 ops/s
Iteration  29: 820872.198 ops/s
Iteration  30: 828895.965 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_forEachWith":
  829920.653 ±(99.9%) 2870.305 ops/s [Average]
  (min, avg, max) = (820872.198, 829920.653, 838833.393), stdev = 4296.138
  CI (99.9%): [827050.348, 832790.958] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_forEachWith  thrpt   30  829920.653 ± 2870.305  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_forEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_forEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 322479.642 ops/s
# Warmup Iteration   2: 541324.228 ops/s
# Warmup Iteration   3: 630846.983 ops/s
# Warmup Iteration   4: 635438.578 ops/s
# Warmup Iteration   5: 635141.705 ops/s
# Warmup Iteration   6: 521091.299 ops/s
# Warmup Iteration   7: 635970.350 ops/s
# Warmup Iteration   8: 635552.863 ops/s
# Warmup Iteration   9: 634089.846 ops/s
# Warmup Iteration  10: 635881.641 ops/s
# Warmup Iteration  11: 635088.524 ops/s
# Warmup Iteration  12: 635760.940 ops/s
# Warmup Iteration  13: 635989.967 ops/s
# Warmup Iteration  14: 636837.683 ops/s
# Warmup Iteration  15: 636623.894 ops/s
# Warmup Iteration  16: 635643.067 ops/s
# Warmup Iteration  17: 635876.336 ops/s
# Warmup Iteration  18: 635319.848 ops/s
# Warmup Iteration  19: 634928.427 ops/s
# Warmup Iteration  20: 634044.261 ops/s
# Warmup Iteration  21: 634285.103 ops/s
# Warmup Iteration  22: 635866.875 ops/s
# Warmup Iteration  23: 633519.525 ops/s
# Warmup Iteration  24: 635878.484 ops/s
# Warmup Iteration  25: 635236.548 ops/s
# Warmup Iteration  26: 634756.526 ops/s
# Warmup Iteration  27: 634382.325 ops/s
# Warmup Iteration  28: 634117.426 ops/s
# Warmup Iteration  29: 634692.327 ops/s
# Warmup Iteration  30: 635555.269 ops/s
Iteration   1: 634979.724 ops/s
Iteration   2: 633135.510 ops/s
Iteration   3: 636492.473 ops/s
Iteration   4: 634666.576 ops/s
Iteration   5: 635863.530 ops/s
Iteration   6: 635119.199 ops/s
Iteration   7: 636994.554 ops/s
Iteration   8: 635940.577 ops/s
Iteration   9: 637712.871 ops/s
Iteration  10: 635282.972 ops/s
Iteration  11: 635500.594 ops/s
Iteration  12: 633136.612 ops/s
Iteration  13: 634732.327 ops/s
Iteration  14: 635307.758 ops/s
Iteration  15: 633934.586 ops/s
Iteration  16: 636075.036 ops/s
Iteration  17: 632980.747 ops/s
Iteration  18: 635850.437 ops/s
Iteration  19: 635171.167 ops/s
Iteration  20: 635598.314 ops/s
Iteration  21: 635126.792 ops/s
Iteration  22: 636821.369 ops/s
Iteration  23: 632948.801 ops/s
Iteration  24: 637289.759 ops/s
Iteration  25: 635342.229 ops/s
Iteration  26: 637395.644 ops/s
Iteration  27: 635374.922 ops/s
Iteration  28: 636687.169 ops/s
Iteration  29: 633770.722 ops/s
Iteration  30: 635249.078 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_forEachWithIndex":
  635349.402 ±(99.9%) 875.376 ops/s [Average]
  (min, avg, max) = (632948.801, 635349.402, 637712.871), stdev = 1310.222
  CI (99.9%): [634474.025, 636224.778] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score     Error  Units
ImmutableHashBagTest._Benchmark.benchmark_forEachWithIndex  thrpt   30  635349.402 ± 875.376  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_forLoop$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_forLoop

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1692785.273 ops/s
# Warmup Iteration   2: 2700928.949 ops/s
# Warmup Iteration   3: 3148819.063 ops/s
# Warmup Iteration   4: 3165165.764 ops/s
# Warmup Iteration   5: 3163511.026 ops/s
# Warmup Iteration   6: 2816515.396 ops/s
# Warmup Iteration   7: 2943271.492 ops/s
# Warmup Iteration   8: 3167946.260 ops/s
# Warmup Iteration   9: 3176188.330 ops/s
# Warmup Iteration  10: 3176133.421 ops/s
# Warmup Iteration  11: 3167160.010 ops/s
# Warmup Iteration  12: 3170413.813 ops/s
# Warmup Iteration  13: 3167485.600 ops/s
# Warmup Iteration  14: 3164242.147 ops/s
# Warmup Iteration  15: 3174188.349 ops/s
# Warmup Iteration  16: 3171823.962 ops/s
# Warmup Iteration  17: 3170029.581 ops/s
# Warmup Iteration  18: 3175359.959 ops/s
# Warmup Iteration  19: 3180072.513 ops/s
# Warmup Iteration  20: 3176454.780 ops/s
# Warmup Iteration  21: 3177121.135 ops/s
# Warmup Iteration  22: 3177809.122 ops/s
# Warmup Iteration  23: 3171495.795 ops/s
# Warmup Iteration  24: 3178396.400 ops/s
# Warmup Iteration  25: 3172144.744 ops/s
# Warmup Iteration  26: 3172443.587 ops/s
# Warmup Iteration  27: 3172540.924 ops/s
# Warmup Iteration  28: 3173777.071 ops/s
# Warmup Iteration  29: 3175664.441 ops/s
# Warmup Iteration  30: 3169966.238 ops/s
Iteration   1: 3164405.472 ops/s
Iteration   2: 3169235.200 ops/s
Iteration   3: 3176696.705 ops/s
Iteration   4: 3176511.514 ops/s
Iteration   5: 3180617.416 ops/s
Iteration   6: 3173411.250 ops/s
Iteration   7: 3173045.410 ops/s
Iteration   8: 3169879.367 ops/s
Iteration   9: 3172213.113 ops/s
Iteration  10: 3169072.116 ops/s
Iteration  11: 3177158.687 ops/s
Iteration  12: 3178555.679 ops/s
Iteration  13: 3181502.190 ops/s
Iteration  14: 3174074.875 ops/s
Iteration  15: 3182411.956 ops/s
Iteration  16: 3167768.614 ops/s
Iteration  17: 3176653.283 ops/s
Iteration  18: 3175575.731 ops/s
Iteration  19: 3173888.820 ops/s
Iteration  20: 3173553.914 ops/s
Iteration  21: 3170899.792 ops/s
Iteration  22: 3165620.260 ops/s
Iteration  23: 3178270.544 ops/s
Iteration  24: 3191466.851 ops/s
Iteration  25: 3176284.654 ops/s
Iteration  26: 3172693.684 ops/s
Iteration  27: 3165884.031 ops/s
Iteration  28: 3172579.825 ops/s
Iteration  29: 3179228.800 ops/s
Iteration  30: 3170992.246 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_forLoop":
  3174338.400 ±(99.9%) 3793.871 ops/s [Average]
  (min, avg, max) = (3164405.472, 3174338.400, 3191466.851), stdev = 5678.488
  CI (99.9%): [3170544.529, 3178132.271] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_forLoop  thrpt   30  3174338.400 ± 3793.871  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_fusedCollectMakeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_fusedCollectMakeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 860752.727 ops/s
# Warmup Iteration   2: 1942258.495 ops/s
# Warmup Iteration   3: 2003381.003 ops/s
# Warmup Iteration   4: 1825366.132 ops/s
# Warmup Iteration   5: 1860642.057 ops/s
# Warmup Iteration   6: 2006654.499 ops/s
# Warmup Iteration   7: 2007166.620 ops/s
# Warmup Iteration   8: 2011274.776 ops/s
# Warmup Iteration   9: 2010013.050 ops/s
# Warmup Iteration  10: 2002999.100 ops/s
# Warmup Iteration  11: 2004871.986 ops/s
# Warmup Iteration  12: 2010668.575 ops/s
# Warmup Iteration  13: 2000918.182 ops/s
# Warmup Iteration  14: 2003941.052 ops/s
# Warmup Iteration  15: 2003993.669 ops/s
# Warmup Iteration  16: 2008151.384 ops/s
# Warmup Iteration  17: 2016237.511 ops/s
# Warmup Iteration  18: 2013161.848 ops/s
# Warmup Iteration  19: 2013984.889 ops/s
# Warmup Iteration  20: 2012238.326 ops/s
# Warmup Iteration  21: 2010349.395 ops/s
# Warmup Iteration  22: 2012955.693 ops/s
# Warmup Iteration  23: 2010611.629 ops/s
# Warmup Iteration  24: 2014306.365 ops/s
# Warmup Iteration  25: 2010788.484 ops/s
# Warmup Iteration  26: 2012789.229 ops/s
# Warmup Iteration  27: 2015363.146 ops/s
# Warmup Iteration  28: 2013873.456 ops/s
# Warmup Iteration  29: 2014601.989 ops/s
# Warmup Iteration  30: 2014715.937 ops/s
Iteration   1: 2016105.479 ops/s
Iteration   2: 2013757.700 ops/s
Iteration   3: 2008696.425 ops/s
Iteration   4: 2010035.196 ops/s
Iteration   5: 2012165.081 ops/s
Iteration   6: 2015752.010 ops/s
Iteration   7: 2009729.322 ops/s
Iteration   8: 2003172.885 ops/s
Iteration   9: 2014466.029 ops/s
Iteration  10: 2014518.537 ops/s
Iteration  11: 2015134.364 ops/s
Iteration  12: 2014259.913 ops/s
Iteration  13: 2008139.019 ops/s
Iteration  14: 2011822.698 ops/s
Iteration  15: 2009224.323 ops/s
Iteration  16: 2012339.739 ops/s
Iteration  17: 2010690.231 ops/s
Iteration  18: 2013720.338 ops/s
Iteration  19: 2014478.959 ops/s
Iteration  20: 2010507.217 ops/s
Iteration  21: 2018635.931 ops/s
Iteration  22: 2012170.102 ops/s
Iteration  23: 2012451.365 ops/s
Iteration  24: 2015055.079 ops/s
Iteration  25: 2009650.183 ops/s
Iteration  26: 2005208.324 ops/s
Iteration  27: 2010400.890 ops/s
Iteration  28: 2009438.322 ops/s
Iteration  29: 2011027.704 ops/s
Iteration  30: 2017226.840 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_fusedCollectMakeString":
  2011999.340 ±(99.9%) 2279.886 ops/s [Average]
  (min, avg, max) = (2003172.885, 2011999.340, 2018635.931), stdev = 3412.427
  CI (99.9%): [2009719.454, 2014279.226] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_fusedCollectMakeString  thrpt   30  2011999.340 ± 2279.886  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_getAny$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_getAny

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1352964.455 ops/s
# Warmup Iteration   2: 2558871.976 ops/s
# Warmup Iteration   3: 2794382.459 ops/s
# Warmup Iteration   4: 2824994.971 ops/s
# Warmup Iteration   5: 2450583.011 ops/s
# Warmup Iteration   6: 2680044.565 ops/s
# Warmup Iteration   7: 2829152.435 ops/s
# Warmup Iteration   8: 2824914.656 ops/s
# Warmup Iteration   9: 2828144.666 ops/s
# Warmup Iteration  10: 2823303.226 ops/s
# Warmup Iteration  11: 2832106.030 ops/s
# Warmup Iteration  12: 2832245.126 ops/s
# Warmup Iteration  13: 2815048.191 ops/s
# Warmup Iteration  14: 2823869.804 ops/s
# Warmup Iteration  15: 2828521.787 ops/s
# Warmup Iteration  16: 2830780.419 ops/s
# Warmup Iteration  17: 2823349.217 ops/s
# Warmup Iteration  18: 2823510.656 ops/s
# Warmup Iteration  19: 2829710.067 ops/s
# Warmup Iteration  20: 2827716.914 ops/s
# Warmup Iteration  21: 2822949.735 ops/s
# Warmup Iteration  22: 2824747.561 ops/s
# Warmup Iteration  23: 2830308.525 ops/s
# Warmup Iteration  24: 2828618.659 ops/s
# Warmup Iteration  25: 2824817.160 ops/s
# Warmup Iteration  26: 2825832.252 ops/s
# Warmup Iteration  27: 2832595.632 ops/s
# Warmup Iteration  28: 2821546.424 ops/s
# Warmup Iteration  29: 2834857.720 ops/s
# Warmup Iteration  30: 2831311.607 ops/s
Iteration   1: 2824907.055 ops/s
Iteration   2: 2832598.574 ops/s
Iteration   3: 2820367.683 ops/s
Iteration   4: 2822135.364 ops/s
Iteration   5: 2831687.824 ops/s
Iteration   6: 2815775.282 ops/s
Iteration   7: 2828444.867 ops/s
Iteration   8: 2831198.308 ops/s
Iteration   9: 2817878.681 ops/s
Iteration  10: 2833449.844 ops/s
Iteration  11: 2826288.327 ops/s
Iteration  12: 2822824.530 ops/s
Iteration  13: 2831461.884 ops/s
Iteration  14: 2817954.842 ops/s
Iteration  15: 2825432.734 ops/s
Iteration  16: 2824090.033 ops/s
Iteration  17: 2823373.475 ops/s
Iteration  18: 2816439.894 ops/s
Iteration  19: 2823510.813 ops/s
Iteration  20: 2829632.501 ops/s
Iteration  21: 2832229.803 ops/s
Iteration  22: 2824562.061 ops/s
Iteration  23: 2826446.244 ops/s
Iteration  24: 2835890.126 ops/s
Iteration  25: 2813011.263 ops/s
Iteration  26: 2821509.579 ops/s
Iteration  27: 2825905.419 ops/s
Iteration  28: 2819722.281 ops/s
Iteration  29: 2833238.406 ops/s
Iteration  30: 2809630.343 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_getAny":
  2824719.935 ±(99.9%) 4382.004 ops/s [Average]
  (min, avg, max) = (2809630.343, 2824719.935, 2835890.126), stdev = 6558.778
  CI (99.9%): [2820337.930, 2829101.939] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_getAny  thrpt   30  2824719.935 ± 4382.004  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_getFirst$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_getFirst

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 714913.459 ops/s
# Warmup Iteration   2: 1308069.987 ops/s
# Warmup Iteration   3: 1450822.289 ops/s
# Warmup Iteration   4: 1457369.730 ops/s
# Warmup Iteration   5: 1411355.749 ops/s
# Warmup Iteration   6: 1227575.626 ops/s
# Warmup Iteration   7: 1458781.612 ops/s
# Warmup Iteration   8: 1461482.851 ops/s
# Warmup Iteration   9: 1462980.614 ops/s
# Warmup Iteration  10: 1458995.961 ops/s
# Warmup Iteration  11: 1459266.985 ops/s
# Warmup Iteration  12: 1458483.612 ops/s
# Warmup Iteration  13: 1459104.137 ops/s
# Warmup Iteration  14: 1461926.902 ops/s
# Warmup Iteration  15: 1459865.218 ops/s
# Warmup Iteration  16: 1459772.553 ops/s
# Warmup Iteration  17: 1458537.368 ops/s
# Warmup Iteration  18: 1459335.205 ops/s
# Warmup Iteration  19: 1461357.999 ops/s
# Warmup Iteration  20: 1459516.060 ops/s
# Warmup Iteration  21: 1461068.577 ops/s
# Warmup Iteration  22: 1459638.424 ops/s
# Warmup Iteration  23: 1463021.934 ops/s
# Warmup Iteration  24: 1463431.397 ops/s
# Warmup Iteration  25: 1461207.866 ops/s
# Warmup Iteration  26: 1462269.216 ops/s
# Warmup Iteration  27: 1458544.223 ops/s
# Warmup Iteration  28: 1457988.471 ops/s
# Warmup Iteration  29: 1459586.036 ops/s
# Warmup Iteration  30: 1461272.071 ops/s
Iteration   1: 1456882.804 ops/s
Iteration   2: 1458670.343 ops/s
Iteration   3: 1462635.999 ops/s
Iteration   4: 1460062.743 ops/s
Iteration   5: 1464502.544 ops/s
Iteration   6: 1459442.874 ops/s
Iteration   7: 1458764.993 ops/s
Iteration   8: 1454821.304 ops/s
Iteration   9: 1459454.059 ops/s
Iteration  10: 1461916.271 ops/s
Iteration  11: 1457970.395 ops/s
Iteration  12: 1460308.752 ops/s
Iteration  13: 1456651.326 ops/s
Iteration  14: 1460947.336 ops/s
Iteration  15: 1461750.003 ops/s
Iteration  16: 1461637.490 ops/s
Iteration  17: 1460844.034 ops/s
Iteration  18: 1460097.725 ops/s
Iteration  19: 1461273.631 ops/s
Iteration  20: 1463449.830 ops/s
Iteration  21: 1454664.849 ops/s
Iteration  22: 1457887.294 ops/s
Iteration  23: 1455568.531 ops/s
Iteration  24: 1458689.236 ops/s
Iteration  25: 1458156.617 ops/s
Iteration  26: 1461983.088 ops/s
Iteration  27: 1464341.668 ops/s
Iteration  28: 1457591.689 ops/s
Iteration  29: 1459961.949 ops/s
Iteration  30: 1458427.982 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_getFirst":
  1459645.245 ±(99.9%) 1721.835 ops/s [Average]
  (min, avg, max) = (1454664.849, 1459645.245, 1464502.544), stdev = 2577.162
  CI (99.9%): [1457923.410, 1461367.081] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_getFirst  thrpt   30  1459645.245 ± 1721.835  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_getLast$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_getLast

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 690715.556 ops/s
# Warmup Iteration   2: 1261781.525 ops/s
# Warmup Iteration   3: 1405095.341 ops/s
# Warmup Iteration   4: 1410789.524 ops/s
# Warmup Iteration   5: 1334220.155 ops/s
# Warmup Iteration   6: 1232724.298 ops/s
# Warmup Iteration   7: 1410662.392 ops/s
# Warmup Iteration   8: 1413950.050 ops/s
# Warmup Iteration   9: 1412634.118 ops/s
# Warmup Iteration  10: 1411904.731 ops/s
# Warmup Iteration  11: 1410751.883 ops/s
# Warmup Iteration  12: 1410332.537 ops/s
# Warmup Iteration  13: 1410232.751 ops/s
# Warmup Iteration  14: 1412526.926 ops/s
# Warmup Iteration  15: 1411757.049 ops/s
# Warmup Iteration  16: 1412377.405 ops/s
# Warmup Iteration  17: 1412814.899 ops/s
# Warmup Iteration  18: 1412357.674 ops/s
# Warmup Iteration  19: 1413668.158 ops/s
# Warmup Iteration  20: 1411883.193 ops/s
# Warmup Iteration  21: 1412267.258 ops/s
# Warmup Iteration  22: 1410963.426 ops/s
# Warmup Iteration  23: 1412817.300 ops/s
# Warmup Iteration  24: 1410740.456 ops/s
# Warmup Iteration  25: 1406948.906 ops/s
# Warmup Iteration  26: 1412585.801 ops/s
# Warmup Iteration  27: 1414177.828 ops/s
# Warmup Iteration  28: 1414113.386 ops/s
# Warmup Iteration  29: 1411843.064 ops/s
# Warmup Iteration  30: 1411653.756 ops/s
Iteration   1: 1415378.707 ops/s
Iteration   2: 1413618.508 ops/s
Iteration   3: 1413460.554 ops/s
Iteration   4: 1410539.782 ops/s
Iteration   5: 1410154.528 ops/s
Iteration   6: 1410870.591 ops/s
Iteration   7: 1408787.998 ops/s
Iteration   8: 1412523.029 ops/s
Iteration   9: 1410690.272 ops/s
Iteration  10: 1412663.647 ops/s
Iteration  11: 1415226.015 ops/s
Iteration  12: 1408715.131 ops/s
Iteration  13: 1412368.972 ops/s
Iteration  14: 1413359.416 ops/s
Iteration  15: 1410742.898 ops/s
Iteration  16: 1412738.604 ops/s
Iteration  17: 1412179.781 ops/s
Iteration  18: 1410477.953 ops/s
Iteration  19: 1413820.441 ops/s
Iteration  20: 1411899.672 ops/s
Iteration  21: 1414010.395 ops/s
Iteration  22: 1409804.478 ops/s
Iteration  23: 1412464.371 ops/s
Iteration  24: 1412869.330 ops/s
Iteration  25: 1412758.725 ops/s
Iteration  26: 1416388.339 ops/s
Iteration  27: 1411641.790 ops/s
Iteration  28: 1414145.833 ops/s
Iteration  29: 1416472.963 ops/s
Iteration  30: 1409025.173 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_getLast":
  1412326.597 ±(99.9%) 1396.855 ops/s [Average]
  (min, avg, max) = (1408715.131, 1412326.597, 1416472.963), stdev = 2090.746
  CI (99.9%): [1410929.742, 1413723.451] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_getLast  thrpt   30  1412326.597 ± 1396.855  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_getOnly$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_getOnly

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2018879.132 ops/s
# Warmup Iteration   2: 4473185.183 ops/s
# Warmup Iteration   3: 4670999.948 ops/s
# Warmup Iteration   4: 4442767.191 ops/s
# Warmup Iteration   5: 4080602.709 ops/s
# Warmup Iteration   6: 4704526.180 ops/s
# Warmup Iteration   7: 4694337.416 ops/s
# Warmup Iteration   8: 4710592.083 ops/s
# Warmup Iteration   9: 4706573.706 ops/s
# Warmup Iteration  10: 4710501.875 ops/s
# Warmup Iteration  11: 4702001.849 ops/s
# Warmup Iteration  12: 4701013.026 ops/s
# Warmup Iteration  13: 4711784.334 ops/s
# Warmup Iteration  14: 4701179.274 ops/s
# Warmup Iteration  15: 4705491.267 ops/s
# Warmup Iteration  16: 4697494.887 ops/s
# Warmup Iteration  17: 4690275.685 ops/s
# Warmup Iteration  18: 4682779.112 ops/s
# Warmup Iteration  19: 4700812.058 ops/s
# Warmup Iteration  20: 4695528.682 ops/s
# Warmup Iteration  21: 4687522.585 ops/s
# Warmup Iteration  22: 4701725.730 ops/s
# Warmup Iteration  23: 4688763.913 ops/s
# Warmup Iteration  24: 4693819.291 ops/s
# Warmup Iteration  25: 4704121.434 ops/s
# Warmup Iteration  26: 4692308.188 ops/s
# Warmup Iteration  27: 4694676.442 ops/s
# Warmup Iteration  28: 4700417.928 ops/s
# Warmup Iteration  29: 4694479.573 ops/s
# Warmup Iteration  30: 4710595.304 ops/s
Iteration   1: 4683075.769 ops/s
Iteration   2: 4702225.831 ops/s
Iteration   3: 4705976.503 ops/s
Iteration   4: 4713654.781 ops/s
Iteration   5: 4699718.880 ops/s
Iteration   6: 4683464.287 ops/s
Iteration   7: 4701257.888 ops/s
Iteration   8: 4698826.784 ops/s
Iteration   9: 4713759.701 ops/s
Iteration  10: 4700682.457 ops/s
Iteration  11: 4690766.807 ops/s
Iteration  12: 4704042.435 ops/s
Iteration  13: 4707816.187 ops/s
Iteration  14: 4696238.214 ops/s
Iteration  15: 4702533.978 ops/s
Iteration  16: 4702551.141 ops/s
Iteration  17: 4703551.782 ops/s
Iteration  18: 4650618.604 ops/s
Iteration  19: 4669273.290 ops/s
Iteration  20: 4701023.044 ops/s
Iteration  21: 4707258.780 ops/s
Iteration  22: 4707534.158 ops/s
Iteration  23: 4683906.031 ops/s
Iteration  24: 4686828.053 ops/s
Iteration  25: 4711104.462 ops/s
Iteration  26: 4701564.923 ops/s
Iteration  27: 4709624.262 ops/s
Iteration  28: 4695509.786 ops/s
Iteration  29: 4683411.207 ops/s
Iteration  30: 4690709.064 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_getOnly":
  4696950.303 ±(99.9%) 9141.279 ops/s [Average]
  (min, avg, max) = (4650618.604, 4696950.303, 4713759.701), stdev = 13682.238
  CI (99.9%): [4687809.024, 4706091.582] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_getOnly  thrpt   30  4696950.303 ± 9141.279  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_getOnly_empty_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_getOnly_empty_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 689026.992 ops/s
# Warmup Iteration   2: 752708.821 ops/s
# Warmup Iteration   3: 989764.662 ops/s
# Warmup Iteration   4: 979832.287 ops/s
# Warmup Iteration   5: 975849.139 ops/s
# Warmup Iteration   6: 978065.135 ops/s
# Warmup Iteration   7: 982177.108 ops/s
# Warmup Iteration   8: 975980.917 ops/s
# Warmup Iteration   9: 972056.990 ops/s
# Warmup Iteration  10: 978672.198 ops/s
# Warmup Iteration  11: 827381.499 ops/s
# Warmup Iteration  12: 982054.732 ops/s
# Warmup Iteration  13: 983879.286 ops/s
# Warmup Iteration  14: 983990.431 ops/s
# Warmup Iteration  15: 978833.061 ops/s
# Warmup Iteration  16: 986450.491 ops/s
# Warmup Iteration  17: 1044730.010 ops/s
# Warmup Iteration  18: 1039660.407 ops/s
# Warmup Iteration  19: 1044684.153 ops/s
# Warmup Iteration  20: 1042647.776 ops/s
# Warmup Iteration  21: 1044829.502 ops/s
# Warmup Iteration  22: 1042557.323 ops/s
# Warmup Iteration  23: 1042341.148 ops/s
# Warmup Iteration  24: 1042224.932 ops/s
# Warmup Iteration  25: 1040883.194 ops/s
# Warmup Iteration  26: 1042980.360 ops/s
# Warmup Iteration  27: 1042096.431 ops/s
# Warmup Iteration  28: 1043428.989 ops/s
# Warmup Iteration  29: 1043048.097 ops/s
# Warmup Iteration  30: 1042031.961 ops/s
Iteration   1: 1043807.773 ops/s
Iteration   2: 1045776.816 ops/s
Iteration   3: 1038143.185 ops/s
Iteration   4: 1040487.764 ops/s
Iteration   5: 1046260.218 ops/s
Iteration   6: 1043128.041 ops/s
Iteration   7: 1038556.821 ops/s
Iteration   8: 1043233.067 ops/s
Iteration   9: 1044828.038 ops/s
Iteration  10: 1043067.402 ops/s
Iteration  11: 1046358.643 ops/s
Iteration  12: 1047984.040 ops/s
Iteration  13: 1045226.320 ops/s
Iteration  14: 1042757.831 ops/s
Iteration  15: 1044994.867 ops/s
Iteration  16: 1040298.309 ops/s
Iteration  17: 1037233.857 ops/s
Iteration  18: 1044061.849 ops/s
Iteration  19: 1042653.758 ops/s
Iteration  20: 1036817.642 ops/s
Iteration  21: 1040545.007 ops/s
Iteration  22: 1040881.264 ops/s
Iteration  23: 1041554.814 ops/s
Iteration  24: 1041977.884 ops/s
Iteration  25: 1041350.542 ops/s
Iteration  26: 1039615.612 ops/s
Iteration  27: 1044028.553 ops/s
Iteration  28: 1041806.119 ops/s
Iteration  29: 1038564.697 ops/s
Iteration  30: 1039521.653 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_getOnly_empty_throws":
  1042184.079 ±(99.9%) 1919.167 ops/s [Average]
  (min, avg, max) = (1036817.642, 1042184.079, 1047984.040), stdev = 2872.520
  CI (99.9%): [1040264.912, 1044103.247] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_getOnly_empty_throws  thrpt   30  1042184.079 ± 1919.167  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_getOnly_not_only_one_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_getOnly_not_only_one_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 627206.343 ops/s
# Warmup Iteration   2: 697846.761 ops/s
# Warmup Iteration   3: 919998.412 ops/s
# Warmup Iteration   4: 911395.492 ops/s
# Warmup Iteration   5: 907856.170 ops/s
# Warmup Iteration   6: 913636.541 ops/s
# Warmup Iteration   7: 914360.255 ops/s
# Warmup Iteration   8: 912560.757 ops/s
# Warmup Iteration   9: 914659.754 ops/s
# Warmup Iteration  10: 854037.303 ops/s
# Warmup Iteration  11: 821215.922 ops/s
# Warmup Iteration  12: 914310.833 ops/s
# Warmup Iteration  13: 914020.576 ops/s
# Warmup Iteration  14: 913314.511 ops/s
# Warmup Iteration  15: 916050.339 ops/s
# Warmup Iteration  16: 914096.293 ops/s
# Warmup Iteration  17: 965005.114 ops/s
# Warmup Iteration  18: 962923.971 ops/s
# Warmup Iteration  19: 964012.536 ops/s
# Warmup Iteration  20: 962086.525 ops/s
# Warmup Iteration  21: 962357.213 ops/s
# Warmup Iteration  22: 964999.256 ops/s
# Warmup Iteration  23: 961767.172 ops/s
# Warmup Iteration  24: 964802.864 ops/s
# Warmup Iteration  25: 961793.696 ops/s
# Warmup Iteration  26: 960668.507 ops/s
# Warmup Iteration  27: 962163.917 ops/s
# Warmup Iteration  28: 962148.783 ops/s
# Warmup Iteration  29: 962731.311 ops/s
# Warmup Iteration  30: 963587.000 ops/s
Iteration   1: 962584.489 ops/s
Iteration   2: 963221.572 ops/s
Iteration   3: 959561.176 ops/s
Iteration   4: 961543.608 ops/s
Iteration   5: 963191.407 ops/s
Iteration   6: 963678.840 ops/s
Iteration   7: 964863.991 ops/s
Iteration   8: 965372.457 ops/s
Iteration   9: 959396.759 ops/s
Iteration  10: 961579.219 ops/s
Iteration  11: 962414.511 ops/s
Iteration  12: 959654.658 ops/s
Iteration  13: 963084.082 ops/s
Iteration  14: 964529.443 ops/s
Iteration  15: 961796.435 ops/s
Iteration  16: 962714.138 ops/s
Iteration  17: 964733.869 ops/s
Iteration  18: 965391.128 ops/s
Iteration  19: 964587.640 ops/s
Iteration  20: 964077.040 ops/s
Iteration  21: 964372.352 ops/s
Iteration  22: 960840.812 ops/s
Iteration  23: 963853.896 ops/s
Iteration  24: 962725.449 ops/s
Iteration  25: 963776.142 ops/s
Iteration  26: 962058.183 ops/s
Iteration  27: 964323.401 ops/s
Iteration  28: 963069.018 ops/s
Iteration  29: 961987.436 ops/s
Iteration  30: 958292.477 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_getOnly_not_only_one_throws":
  962775.854 ±(99.9%) 1233.564 ops/s [Average]
  (min, avg, max) = (958292.477, 962775.854, 965391.128), stdev = 1846.340
  CI (99.9%): [961542.291, 964009.418] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_getOnly_not_only_one_throws  thrpt   30  962775.854 ± 1233.564  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_groupBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_groupBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 80036.238 ops/s
# Warmup Iteration   2: 121867.261 ops/s
# Warmup Iteration   3: 158892.519 ops/s
# Warmup Iteration   4: 158414.055 ops/s
# Warmup Iteration   5: 158929.625 ops/s
# Warmup Iteration   6: 158984.591 ops/s
# Warmup Iteration   7: 158783.228 ops/s
# Warmup Iteration   8: 131451.302 ops/s
# Warmup Iteration   9: 158895.631 ops/s
# Warmup Iteration  10: 158872.468 ops/s
# Warmup Iteration  11: 158708.438 ops/s
# Warmup Iteration  12: 158721.081 ops/s
# Warmup Iteration  13: 158990.719 ops/s
# Warmup Iteration  14: 159004.737 ops/s
# Warmup Iteration  15: 158936.295 ops/s
# Warmup Iteration  16: 158904.825 ops/s
# Warmup Iteration  17: 159244.779 ops/s
# Warmup Iteration  18: 159255.553 ops/s
# Warmup Iteration  19: 159312.352 ops/s
# Warmup Iteration  20: 159134.341 ops/s
# Warmup Iteration  21: 158880.035 ops/s
# Warmup Iteration  22: 159153.048 ops/s
# Warmup Iteration  23: 158892.834 ops/s
# Warmup Iteration  24: 159081.229 ops/s
# Warmup Iteration  25: 159246.961 ops/s
# Warmup Iteration  26: 159284.540 ops/s
# Warmup Iteration  27: 159284.229 ops/s
# Warmup Iteration  28: 159121.633 ops/s
# Warmup Iteration  29: 159196.743 ops/s
# Warmup Iteration  30: 159386.258 ops/s
Iteration   1: 159382.317 ops/s
Iteration   2: 159219.250 ops/s
Iteration   3: 159440.597 ops/s
Iteration   4: 159462.204 ops/s
Iteration   5: 158654.699 ops/s
Iteration   6: 159719.391 ops/s
Iteration   7: 158488.829 ops/s
Iteration   8: 159457.937 ops/s
Iteration   9: 159116.153 ops/s
Iteration  10: 159467.054 ops/s
Iteration  11: 159628.846 ops/s
Iteration  12: 158993.062 ops/s
Iteration  13: 159732.212 ops/s
Iteration  14: 159578.693 ops/s
Iteration  15: 158705.827 ops/s
Iteration  16: 159627.783 ops/s
Iteration  17: 159138.866 ops/s
Iteration  18: 158739.079 ops/s
Iteration  19: 159259.229 ops/s
Iteration  20: 158710.397 ops/s
Iteration  21: 159639.035 ops/s
Iteration  22: 159265.295 ops/s
Iteration  23: 159386.082 ops/s
Iteration  24: 159448.176 ops/s
Iteration  25: 158987.291 ops/s
Iteration  26: 159326.608 ops/s
Iteration  27: 159534.609 ops/s
Iteration  28: 159443.033 ops/s
Iteration  29: 159377.190 ops/s
Iteration  30: 159198.874 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_groupBy":
  159270.954 ±(99.9%) 226.191 ops/s [Average]
  (min, avg, max) = (158488.829, 159270.954, 159732.212), stdev = 338.552
  CI (99.9%): [159044.763, 159497.145] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score     Error  Units
ImmutableHashBagTest._Benchmark.benchmark_groupBy  thrpt   30  159270.954 ± 226.191  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_groupByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_groupByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 71367.937 ops/s
# Warmup Iteration   2: 98342.850 ops/s
# Warmup Iteration   3: 128069.460 ops/s
# Warmup Iteration   4: 123535.870 ops/s
# Warmup Iteration   5: 127987.915 ops/s
# Warmup Iteration   6: 128295.194 ops/s
# Warmup Iteration   7: 128308.758 ops/s
# Warmup Iteration   8: 106806.847 ops/s
# Warmup Iteration   9: 127033.018 ops/s
# Warmup Iteration  10: 128253.772 ops/s
# Warmup Iteration  11: 128397.755 ops/s
# Warmup Iteration  12: 128396.467 ops/s
# Warmup Iteration  13: 128476.822 ops/s
# Warmup Iteration  14: 128232.437 ops/s
# Warmup Iteration  15: 128378.143 ops/s
# Warmup Iteration  16: 128424.955 ops/s
# Warmup Iteration  17: 128262.904 ops/s
# Warmup Iteration  18: 128323.894 ops/s
# Warmup Iteration  19: 128302.205 ops/s
# Warmup Iteration  20: 128311.116 ops/s
# Warmup Iteration  21: 128376.122 ops/s
# Warmup Iteration  22: 128114.168 ops/s
# Warmup Iteration  23: 128269.077 ops/s
# Warmup Iteration  24: 128167.012 ops/s
# Warmup Iteration  25: 128593.028 ops/s
# Warmup Iteration  26: 128304.495 ops/s
# Warmup Iteration  27: 128327.945 ops/s
# Warmup Iteration  28: 128162.333 ops/s
# Warmup Iteration  29: 128429.183 ops/s
# Warmup Iteration  30: 128591.614 ops/s
Iteration   1: 128312.691 ops/s
Iteration   2: 128584.745 ops/s
Iteration   3: 128491.654 ops/s
Iteration   4: 128201.345 ops/s
Iteration   5: 128258.295 ops/s
Iteration   6: 128104.600 ops/s
Iteration   7: 128496.278 ops/s
Iteration   8: 128406.169 ops/s
Iteration   9: 128197.129 ops/s
Iteration  10: 128499.900 ops/s
Iteration  11: 128489.872 ops/s
Iteration  12: 128381.933 ops/s
Iteration  13: 128465.427 ops/s
Iteration  14: 127921.123 ops/s
Iteration  15: 128427.015 ops/s
Iteration  16: 128495.102 ops/s
Iteration  17: 128150.829 ops/s
Iteration  18: 128568.970 ops/s
Iteration  19: 128328.612 ops/s
Iteration  20: 128633.944 ops/s
Iteration  21: 128533.159 ops/s
Iteration  22: 127869.887 ops/s
Iteration  23: 128364.016 ops/s
Iteration  24: 128518.330 ops/s
Iteration  25: 128056.153 ops/s
Iteration  26: 128451.219 ops/s
Iteration  27: 128536.782 ops/s
Iteration  28: 128349.176 ops/s
Iteration  29: 128571.156 ops/s
Iteration  30: 128430.439 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_groupByEach":
  128369.865 ±(99.9%) 131.229 ops/s [Average]
  (min, avg, max) = (127869.887, 128369.865, 128633.944), stdev = 196.418
  CI (99.9%): [128238.636, 128501.094] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score     Error  Units
ImmutableHashBagTest._Benchmark.benchmark_groupByEach  thrpt   30  128369.865 ± 131.229  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_groupByUniqueKey$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_groupByUniqueKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1324381.388 ops/s
# Warmup Iteration   2: 2764741.822 ops/s
# Warmup Iteration   3: 3015637.198 ops/s
# Warmup Iteration   4: 3037771.255 ops/s
# Warmup Iteration   5: 2472234.561 ops/s
# Warmup Iteration   6: 3037490.952 ops/s
# Warmup Iteration   7: 3040237.253 ops/s
# Warmup Iteration   8: 3030828.536 ops/s
# Warmup Iteration   9: 3033596.274 ops/s
# Warmup Iteration  10: 3040526.699 ops/s
# Warmup Iteration  11: 3037159.760 ops/s
# Warmup Iteration  12: 3040351.641 ops/s
# Warmup Iteration  13: 3036730.011 ops/s
# Warmup Iteration  14: 3038120.316 ops/s
# Warmup Iteration  15: 3037991.498 ops/s
# Warmup Iteration  16: 3039178.707 ops/s
# Warmup Iteration  17: 3038947.334 ops/s
# Warmup Iteration  18: 3028669.039 ops/s
# Warmup Iteration  19: 3034856.564 ops/s
# Warmup Iteration  20: 3037573.968 ops/s
# Warmup Iteration  21: 3042570.558 ops/s
# Warmup Iteration  22: 3040765.370 ops/s
# Warmup Iteration  23: 3041484.010 ops/s
# Warmup Iteration  24: 3033808.902 ops/s
# Warmup Iteration  25: 3038153.657 ops/s
# Warmup Iteration  26: 3033967.089 ops/s
# Warmup Iteration  27: 3029165.435 ops/s
# Warmup Iteration  28: 3038195.685 ops/s
# Warmup Iteration  29: 3034547.180 ops/s
# Warmup Iteration  30: 3032194.839 ops/s
Iteration   1: 3039071.910 ops/s
Iteration   2: 3031780.862 ops/s
Iteration   3: 3033703.627 ops/s
Iteration   4: 3036493.732 ops/s
Iteration   5: 3032172.892 ops/s
Iteration   6: 3045135.951 ops/s
Iteration   7: 3035107.965 ops/s
Iteration   8: 3035448.063 ops/s
Iteration   9: 3018370.893 ops/s
Iteration  10: 3040794.403 ops/s
Iteration  11: 3036849.816 ops/s
Iteration  12: 3033124.866 ops/s
Iteration  13: 3031663.256 ops/s
Iteration  14: 3037804.771 ops/s
Iteration  15: 3031635.204 ops/s
Iteration  16: 3020448.573 ops/s
Iteration  17: 3042750.569 ops/s
Iteration  18: 3040602.112 ops/s
Iteration  19: 3026275.401 ops/s
Iteration  20: 3033723.734 ops/s
Iteration  21: 3043759.684 ops/s
Iteration  22: 3025709.069 ops/s
Iteration  23: 3031464.291 ops/s
Iteration  24: 3042848.692 ops/s
Iteration  25: 3042181.596 ops/s
Iteration  26: 3031975.148 ops/s
Iteration  27: 3041650.327 ops/s
Iteration  28: 3046028.181 ops/s
Iteration  29: 3034875.907 ops/s
Iteration  30: 3037962.517 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_groupByUniqueKey":
  3035380.467 ±(99.9%) 4538.635 ops/s [Average]
  (min, avg, max) = (3018370.893, 3035380.467, 3046028.181), stdev = 6793.215
  CI (99.9%): [3030841.833, 3039919.102] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_groupByUniqueKey  thrpt   30  3035380.467 ± 4538.635  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_groupByUniqueKey_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_groupByUniqueKey_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1406275.877 ops/s
# Warmup Iteration   2: 2421384.314 ops/s
# Warmup Iteration   3: 2816708.760 ops/s
# Warmup Iteration   4: 2829567.521 ops/s
# Warmup Iteration   5: 2838520.607 ops/s
# Warmup Iteration   6: 2299939.898 ops/s
# Warmup Iteration   7: 2832102.011 ops/s
# Warmup Iteration   8: 2837728.970 ops/s
# Warmup Iteration   9: 2830665.537 ops/s
# Warmup Iteration  10: 2836919.078 ops/s
# Warmup Iteration  11: 2838683.276 ops/s
# Warmup Iteration  12: 2835257.098 ops/s
# Warmup Iteration  13: 2831385.027 ops/s
# Warmup Iteration  14: 2827937.996 ops/s
# Warmup Iteration  15: 2828540.482 ops/s
# Warmup Iteration  16: 2836685.898 ops/s
# Warmup Iteration  17: 2831423.384 ops/s
# Warmup Iteration  18: 2836395.580 ops/s
# Warmup Iteration  19: 2835108.943 ops/s
# Warmup Iteration  20: 2839269.600 ops/s
# Warmup Iteration  21: 2823723.543 ops/s
# Warmup Iteration  22: 2833312.699 ops/s
# Warmup Iteration  23: 2835433.330 ops/s
# Warmup Iteration  24: 2837720.244 ops/s
# Warmup Iteration  25: 2837667.584 ops/s
# Warmup Iteration  26: 2835142.103 ops/s
# Warmup Iteration  27: 2835038.723 ops/s
# Warmup Iteration  28: 2829702.017 ops/s
# Warmup Iteration  29: 2839364.345 ops/s
# Warmup Iteration  30: 2834513.171 ops/s
Iteration   1: 2833646.020 ops/s
Iteration   2: 2832984.044 ops/s
Iteration   3: 2834720.771 ops/s
Iteration   4: 2830956.547 ops/s
Iteration   5: 2842397.873 ops/s
Iteration   6: 2833894.935 ops/s
Iteration   7: 2836121.616 ops/s
Iteration   8: 2834178.100 ops/s
Iteration   9: 2844326.819 ops/s
Iteration  10: 2837527.821 ops/s
Iteration  11: 2817767.156 ops/s
Iteration  12: 2828017.209 ops/s
Iteration  13: 2835969.750 ops/s
Iteration  14: 2844695.341 ops/s
Iteration  15: 2824677.974 ops/s
Iteration  16: 2843213.765 ops/s
Iteration  17: 2838710.005 ops/s
Iteration  18: 2836977.604 ops/s
Iteration  19: 2836351.657 ops/s
Iteration  20: 2832762.052 ops/s
Iteration  21: 2836824.064 ops/s
Iteration  22: 2830745.322 ops/s
Iteration  23: 2816630.764 ops/s
Iteration  24: 2833223.280 ops/s
Iteration  25: 2838042.128 ops/s
Iteration  26: 2830842.577 ops/s
Iteration  27: 2836480.491 ops/s
Iteration  28: 2830694.917 ops/s
Iteration  29: 2831328.573 ops/s
Iteration  30: 2839870.394 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_groupByUniqueKey_target":
  2834152.652 ±(99.9%) 4364.773 ops/s [Average]
  (min, avg, max) = (2816630.764, 2834152.652, 2844695.341), stdev = 6532.988
  CI (99.9%): [2829787.879, 2838517.426] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_groupByUniqueKey_target  thrpt   30  2834152.652 ± 4364.773  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_groupByUniqueKey_target_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_groupByUniqueKey_target_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 389635.530 ops/s
# Warmup Iteration   2: 430885.885 ops/s
# Warmup Iteration   3: 574669.339 ops/s
# Warmup Iteration   4: 574191.086 ops/s
# Warmup Iteration   5: 571760.316 ops/s
# Warmup Iteration   6: 573554.132 ops/s
# Warmup Iteration   7: 574419.011 ops/s
# Warmup Iteration   8: 574406.254 ops/s
# Warmup Iteration   9: 571991.515 ops/s
# Warmup Iteration  10: 574918.103 ops/s
# Warmup Iteration  11: 478746.904 ops/s
# Warmup Iteration  12: 573259.022 ops/s
# Warmup Iteration  13: 571264.037 ops/s
# Warmup Iteration  14: 571158.295 ops/s
# Warmup Iteration  15: 573865.346 ops/s
# Warmup Iteration  16: 574000.495 ops/s
# Warmup Iteration  17: 594405.429 ops/s
# Warmup Iteration  18: 597739.335 ops/s
# Warmup Iteration  19: 596698.800 ops/s
# Warmup Iteration  20: 597885.880 ops/s
# Warmup Iteration  21: 595229.441 ops/s
# Warmup Iteration  22: 596633.827 ops/s
# Warmup Iteration  23: 596017.406 ops/s
# Warmup Iteration  24: 596274.153 ops/s
# Warmup Iteration  25: 594814.725 ops/s
# Warmup Iteration  26: 596701.452 ops/s
# Warmup Iteration  27: 594112.001 ops/s
# Warmup Iteration  28: 594390.634 ops/s
# Warmup Iteration  29: 594797.717 ops/s
# Warmup Iteration  30: 595336.321 ops/s
Iteration   1: 595445.338 ops/s
Iteration   2: 593014.721 ops/s
Iteration   3: 595241.747 ops/s
Iteration   4: 597145.207 ops/s
Iteration   5: 595794.806 ops/s
Iteration   6: 594167.121 ops/s
Iteration   7: 595193.088 ops/s
Iteration   8: 595948.525 ops/s
Iteration   9: 593361.513 ops/s
Iteration  10: 596297.153 ops/s
Iteration  11: 598736.616 ops/s
Iteration  12: 594882.046 ops/s
Iteration  13: 593219.671 ops/s
Iteration  14: 593751.073 ops/s
Iteration  15: 595443.178 ops/s
Iteration  16: 594752.047 ops/s
Iteration  17: 594030.039 ops/s
Iteration  18: 596877.824 ops/s
Iteration  19: 594539.959 ops/s
Iteration  20: 594756.434 ops/s
Iteration  21: 593542.206 ops/s
Iteration  22: 594476.842 ops/s
Iteration  23: 595445.988 ops/s
Iteration  24: 594978.812 ops/s
Iteration  25: 595710.496 ops/s
Iteration  26: 595803.543 ops/s
Iteration  27: 594775.383 ops/s
Iteration  28: 591903.604 ops/s
Iteration  29: 594930.311 ops/s
Iteration  30: 595492.602 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_groupByUniqueKey_target_throws":
  594988.597 ±(99.9%) 901.176 ops/s [Average]
  (min, avg, max) = (591903.604, 594988.597, 598736.616), stdev = 1348.838
  CI (99.9%): [594087.420, 595889.773] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score     Error  Units
ImmutableHashBagTest._Benchmark.benchmark_groupByUniqueKey_target_throws  thrpt   30  594988.597 ± 901.176  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 395599.534 ops/s
# Warmup Iteration   2: 465101.979 ops/s
# Warmup Iteration   3: 608748.348 ops/s
# Warmup Iteration   4: 606934.678 ops/s
# Warmup Iteration   5: 603197.206 ops/s
# Warmup Iteration   6: 607102.020 ops/s
# Warmup Iteration   7: 607594.408 ops/s
# Warmup Iteration   8: 608347.466 ops/s
# Warmup Iteration   9: 608667.309 ops/s
# Warmup Iteration  10: 508680.999 ops/s
# Warmup Iteration  11: 608679.581 ops/s
# Warmup Iteration  12: 608906.022 ops/s
# Warmup Iteration  13: 610105.327 ops/s
# Warmup Iteration  14: 607941.740 ops/s
# Warmup Iteration  15: 610154.604 ops/s
# Warmup Iteration  16: 608526.729 ops/s
# Warmup Iteration  17: 634628.399 ops/s
# Warmup Iteration  18: 634912.852 ops/s
# Warmup Iteration  19: 635542.758 ops/s
# Warmup Iteration  20: 635059.288 ops/s
# Warmup Iteration  21: 634813.526 ops/s
# Warmup Iteration  22: 634254.038 ops/s
# Warmup Iteration  23: 634945.443 ops/s
# Warmup Iteration  24: 634775.238 ops/s
# Warmup Iteration  25: 635210.353 ops/s
# Warmup Iteration  26: 635248.406 ops/s
# Warmup Iteration  27: 634922.797 ops/s
# Warmup Iteration  28: 636267.754 ops/s
# Warmup Iteration  29: 635979.215 ops/s
# Warmup Iteration  30: 633854.858 ops/s
Iteration   1: 637250.393 ops/s
Iteration   2: 630780.330 ops/s
Iteration   3: 635651.071 ops/s
Iteration   4: 634551.914 ops/s
Iteration   5: 632697.013 ops/s
Iteration   6: 636413.177 ops/s
Iteration   7: 634018.786 ops/s
Iteration   8: 634862.358 ops/s
Iteration   9: 634426.569 ops/s
Iteration  10: 632413.976 ops/s
Iteration  11: 636578.871 ops/s
Iteration  12: 632348.732 ops/s
Iteration  13: 637436.410 ops/s
Iteration  14: 635076.404 ops/s
Iteration  15: 634771.169 ops/s
Iteration  16: 633305.892 ops/s
Iteration  17: 633674.612 ops/s
Iteration  18: 633340.252 ops/s
Iteration  19: 634682.414 ops/s
Iteration  20: 636618.545 ops/s
Iteration  21: 633757.185 ops/s
Iteration  22: 634616.801 ops/s
Iteration  23: 635704.790 ops/s
Iteration  24: 631426.216 ops/s
Iteration  25: 634704.780 ops/s
Iteration  26: 633891.523 ops/s
Iteration  27: 636011.491 ops/s
Iteration  28: 631123.327 ops/s
Iteration  29: 635681.921 ops/s
Iteration  30: 633900.467 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate":
  634390.580 ±(99.9%) 1159.011 ops/s [Average]
  (min, avg, max) = (630780.330, 634390.580, 637436.410), stdev = 1734.753
  CI (99.9%): [633231.569, 635549.590] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                Mode  Cnt       Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate  thrpt   30  634390.580 ± 1159.011  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_groupByUniqueKey_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_groupByUniqueKey_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 401747.279 ops/s
# Warmup Iteration   2: 460504.683 ops/s
# Warmup Iteration   3: 608013.524 ops/s
# Warmup Iteration   4: 607176.066 ops/s
# Warmup Iteration   5: 604347.430 ops/s
# Warmup Iteration   6: 605176.904 ops/s
# Warmup Iteration   7: 603778.767 ops/s
# Warmup Iteration   8: 605835.166 ops/s
# Warmup Iteration   9: 605010.655 ops/s
# Warmup Iteration  10: 514719.469 ops/s
# Warmup Iteration  11: 596447.768 ops/s
# Warmup Iteration  12: 605955.744 ops/s
# Warmup Iteration  13: 605888.447 ops/s
# Warmup Iteration  14: 606220.380 ops/s
# Warmup Iteration  15: 605853.828 ops/s
# Warmup Iteration  16: 606383.623 ops/s
# Warmup Iteration  17: 628446.410 ops/s
# Warmup Iteration  18: 628214.969 ops/s
# Warmup Iteration  19: 629214.399 ops/s
# Warmup Iteration  20: 628411.010 ops/s
# Warmup Iteration  21: 627602.677 ops/s
# Warmup Iteration  22: 627899.795 ops/s
# Warmup Iteration  23: 628539.262 ops/s
# Warmup Iteration  24: 629808.511 ops/s
# Warmup Iteration  25: 630158.159 ops/s
# Warmup Iteration  26: 629576.765 ops/s
# Warmup Iteration  27: 629356.120 ops/s
# Warmup Iteration  28: 629448.989 ops/s
# Warmup Iteration  29: 628224.271 ops/s
# Warmup Iteration  30: 630785.470 ops/s
Iteration   1: 628448.990 ops/s
Iteration   2: 630723.952 ops/s
Iteration   3: 627504.234 ops/s
Iteration   4: 629729.072 ops/s
Iteration   5: 627882.456 ops/s
Iteration   6: 628097.776 ops/s
Iteration   7: 627055.532 ops/s
Iteration   8: 627336.979 ops/s
Iteration   9: 627992.847 ops/s
Iteration  10: 628695.392 ops/s
Iteration  11: 629663.811 ops/s
Iteration  12: 630251.799 ops/s
Iteration  13: 630030.070 ops/s
Iteration  14: 629378.406 ops/s
Iteration  15: 627205.810 ops/s
Iteration  16: 629536.524 ops/s
Iteration  17: 628478.868 ops/s
Iteration  18: 629979.039 ops/s
Iteration  19: 631748.242 ops/s
Iteration  20: 629259.106 ops/s
Iteration  21: 628711.758 ops/s
Iteration  22: 629712.455 ops/s
Iteration  23: 629630.337 ops/s
Iteration  24: 630840.178 ops/s
Iteration  25: 630681.053 ops/s
Iteration  26: 631213.115 ops/s
Iteration  27: 627723.880 ops/s
Iteration  28: 629504.548 ops/s
Iteration  29: 630386.407 ops/s
Iteration  30: 629825.912 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_groupByUniqueKey_throws":
  629240.952 ±(99.9%) 843.040 ops/s [Average]
  (min, avg, max) = (627055.532, 629240.952, 631748.242), stdev = 1261.823
  CI (99.9%): [628397.912, 630083.992] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score     Error  Units
ImmutableHashBagTest._Benchmark.benchmark_groupByUniqueKey_throws  thrpt   30  629240.952 ± 843.040  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 421319.096 ops/s
# Warmup Iteration   2: 471703.286 ops/s
# Warmup Iteration   3: 626909.624 ops/s
# Warmup Iteration   4: 625526.897 ops/s
# Warmup Iteration   5: 622750.219 ops/s
# Warmup Iteration   6: 625607.668 ops/s
# Warmup Iteration   7: 626736.847 ops/s
# Warmup Iteration   8: 625084.433 ops/s
# Warmup Iteration   9: 625472.964 ops/s
# Warmup Iteration  10: 596236.994 ops/s
# Warmup Iteration  11: 553726.387 ops/s
# Warmup Iteration  12: 628712.582 ops/s
# Warmup Iteration  13: 624403.868 ops/s
# Warmup Iteration  14: 626851.299 ops/s
# Warmup Iteration  15: 626212.227 ops/s
# Warmup Iteration  16: 625646.314 ops/s
# Warmup Iteration  17: 650561.561 ops/s
# Warmup Iteration  18: 650672.884 ops/s
# Warmup Iteration  19: 653089.931 ops/s
# Warmup Iteration  20: 652266.001 ops/s
# Warmup Iteration  21: 652676.808 ops/s
# Warmup Iteration  22: 654052.625 ops/s
# Warmup Iteration  23: 653843.357 ops/s
# Warmup Iteration  24: 652644.049 ops/s
# Warmup Iteration  25: 652058.500 ops/s
# Warmup Iteration  26: 649636.535 ops/s
# Warmup Iteration  27: 651340.715 ops/s
# Warmup Iteration  28: 650185.466 ops/s
# Warmup Iteration  29: 653080.746 ops/s
# Warmup Iteration  30: 650359.204 ops/s
Iteration   1: 653282.832 ops/s
Iteration   2: 653236.202 ops/s
Iteration   3: 650640.222 ops/s
Iteration   4: 654124.700 ops/s
Iteration   5: 650669.016 ops/s
Iteration   6: 651733.425 ops/s
Iteration   7: 652697.667 ops/s
Iteration   8: 652612.907 ops/s
Iteration   9: 651049.443 ops/s
Iteration  10: 649833.831 ops/s
Iteration  11: 651181.254 ops/s
Iteration  12: 652966.831 ops/s
Iteration  13: 650643.417 ops/s
Iteration  14: 651702.915 ops/s
Iteration  15: 647291.152 ops/s
Iteration  16: 650926.578 ops/s
Iteration  17: 653756.756 ops/s
Iteration  18: 650607.733 ops/s
Iteration  19: 653573.188 ops/s
Iteration  20: 651612.311 ops/s
Iteration  21: 652108.834 ops/s
Iteration  22: 650583.149 ops/s
Iteration  23: 648108.337 ops/s
Iteration  24: 652395.107 ops/s
Iteration  25: 652353.995 ops/s
Iteration  26: 650779.477 ops/s
Iteration  27: 648661.137 ops/s
Iteration  28: 652548.597 ops/s
Iteration  29: 650720.059 ops/s
Iteration  30: 650710.521 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate":
  651437.053 ±(99.9%) 1085.308 ops/s [Average]
  (min, avg, max) = (647291.152, 651437.053, 654124.700), stdev = 1624.438
  CI (99.9%): [650351.745, 652522.361] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate  thrpt   30  651437.053 ± 1085.308  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_groupBy_with_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_groupBy_with_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 318884.557 ops/s
# Warmup Iteration   2: 422079.114 ops/s
# Warmup Iteration   3: 572785.101 ops/s
# Warmup Iteration   4: 569398.077 ops/s
# Warmup Iteration   5: 571699.388 ops/s
# Warmup Iteration   6: 575552.843 ops/s
# Warmup Iteration   7: 573700.211 ops/s
# Warmup Iteration   8: 573345.554 ops/s
# Warmup Iteration   9: 469277.856 ops/s
# Warmup Iteration  10: 574488.186 ops/s
# Warmup Iteration  11: 573012.352 ops/s
# Warmup Iteration  12: 573963.502 ops/s
# Warmup Iteration  13: 574230.863 ops/s
# Warmup Iteration  14: 572484.201 ops/s
# Warmup Iteration  15: 573396.012 ops/s
# Warmup Iteration  16: 575038.310 ops/s
# Warmup Iteration  17: 572560.756 ops/s
# Warmup Iteration  18: 573762.707 ops/s
# Warmup Iteration  19: 573490.879 ops/s
# Warmup Iteration  20: 573355.333 ops/s
# Warmup Iteration  21: 574673.225 ops/s
# Warmup Iteration  22: 572996.723 ops/s
# Warmup Iteration  23: 573519.105 ops/s
# Warmup Iteration  24: 573306.392 ops/s
# Warmup Iteration  25: 573239.679 ops/s
# Warmup Iteration  26: 573367.928 ops/s
# Warmup Iteration  27: 571251.669 ops/s
# Warmup Iteration  28: 573948.644 ops/s
# Warmup Iteration  29: 573144.504 ops/s
# Warmup Iteration  30: 572503.561 ops/s
Iteration   1: 573213.791 ops/s
Iteration   2: 572223.365 ops/s
Iteration   3: 572623.311 ops/s
Iteration   4: 572989.254 ops/s
Iteration   5: 572268.095 ops/s
Iteration   6: 574140.106 ops/s
Iteration   7: 574166.385 ops/s
Iteration   8: 575767.872 ops/s
Iteration   9: 572686.474 ops/s
Iteration  10: 572782.810 ops/s
Iteration  11: 576756.752 ops/s
Iteration  12: 573220.742 ops/s
Iteration  13: 573348.243 ops/s
Iteration  14: 573023.720 ops/s
Iteration  15: 573956.102 ops/s
Iteration  16: 570417.585 ops/s
Iteration  17: 573682.425 ops/s
Iteration  18: 575925.194 ops/s
Iteration  19: 572763.920 ops/s
Iteration  20: 577874.850 ops/s
Iteration  21: 572351.996 ops/s
Iteration  22: 573598.351 ops/s
Iteration  23: 573330.254 ops/s
Iteration  24: 572990.890 ops/s
Iteration  25: 572327.884 ops/s
Iteration  26: 575003.782 ops/s
Iteration  27: 572542.618 ops/s
Iteration  28: 572133.686 ops/s
Iteration  29: 573942.965 ops/s
Iteration  30: 573890.694 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_groupBy_with_target":
  573531.471 ±(99.9%) 1008.103 ops/s [Average]
  (min, avg, max) = (570417.585, 573531.471, 577874.850), stdev = 1508.881
  CI (99.9%): [572523.368, 574539.573] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_groupBy_with_target  thrpt   30  573531.471 ± 1008.103  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 245535.645 ops/s
# Warmup Iteration   2: 391249.691 ops/s
# Warmup Iteration   3: 460426.597 ops/s
# Warmup Iteration   4: 463973.556 ops/s
# Warmup Iteration   5: 465291.504 ops/s
# Warmup Iteration   6: 444049.488 ops/s
# Warmup Iteration   7: 400872.488 ops/s
# Warmup Iteration   8: 461986.802 ops/s
# Warmup Iteration   9: 464577.320 ops/s
# Warmup Iteration  10: 464668.827 ops/s
# Warmup Iteration  11: 462865.050 ops/s
# Warmup Iteration  12: 464061.326 ops/s
# Warmup Iteration  13: 464381.270 ops/s
# Warmup Iteration  14: 463836.155 ops/s
# Warmup Iteration  15: 463366.968 ops/s
# Warmup Iteration  16: 464364.526 ops/s
# Warmup Iteration  17: 462997.042 ops/s
# Warmup Iteration  18: 462849.733 ops/s
# Warmup Iteration  19: 463323.700 ops/s
# Warmup Iteration  20: 463381.103 ops/s
# Warmup Iteration  21: 463223.825 ops/s
# Warmup Iteration  22: 462496.658 ops/s
# Warmup Iteration  23: 462639.252 ops/s
# Warmup Iteration  24: 463404.866 ops/s
# Warmup Iteration  25: 462403.966 ops/s
# Warmup Iteration  26: 462633.575 ops/s
# Warmup Iteration  27: 463433.471 ops/s
# Warmup Iteration  28: 462608.082 ops/s
# Warmup Iteration  29: 461849.660 ops/s
# Warmup Iteration  30: 463171.855 ops/s
Iteration   1: 464179.236 ops/s
Iteration   2: 462386.311 ops/s
Iteration   3: 462886.643 ops/s
Iteration   4: 462570.093 ops/s
Iteration   5: 463874.229 ops/s
Iteration   6: 463265.603 ops/s
Iteration   7: 463659.763 ops/s
Iteration   8: 461784.560 ops/s
Iteration   9: 464105.202 ops/s
Iteration  10: 462676.142 ops/s
Iteration  11: 463611.226 ops/s
Iteration  12: 462333.351 ops/s
Iteration  13: 463296.936 ops/s
Iteration  14: 463151.356 ops/s
Iteration  15: 464236.857 ops/s
Iteration  16: 462646.030 ops/s
Iteration  17: 463302.325 ops/s
Iteration  18: 461987.944 ops/s
Iteration  19: 463505.494 ops/s
Iteration  20: 463094.108 ops/s
Iteration  21: 463585.147 ops/s
Iteration  22: 462526.796 ops/s
Iteration  23: 463301.360 ops/s
Iteration  24: 461122.921 ops/s
Iteration  25: 463465.081 ops/s
Iteration  26: 463048.263 ops/s
Iteration  27: 463189.773 ops/s
Iteration  28: 462550.357 ops/s
Iteration  29: 463210.389 ops/s
Iteration  30: 463208.057 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_injectInto":
  463058.718 ±(99.9%) 474.449 ops/s [Average]
  (min, avg, max) = (461122.921, 463058.718, 464236.857), stdev = 710.133
  CI (99.9%): [462584.269, 463533.168] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score     Error  Units
ImmutableHashBagTest._Benchmark.benchmark_injectInto  thrpt   30  463058.718 ± 474.449  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_injectIntoDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_injectIntoDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 806845.115 ops/s
# Warmup Iteration   2: 1327229.603 ops/s
# Warmup Iteration   3: 1564618.307 ops/s
# Warmup Iteration   4: 1575110.417 ops/s
# Warmup Iteration   5: 1574700.821 ops/s
# Warmup Iteration   6: 1323722.468 ops/s
# Warmup Iteration   7: 1539768.421 ops/s
# Warmup Iteration   8: 1574392.845 ops/s
# Warmup Iteration   9: 1578768.713 ops/s
# Warmup Iteration  10: 1580901.764 ops/s
# Warmup Iteration  11: 1577532.512 ops/s
# Warmup Iteration  12: 1579029.323 ops/s
# Warmup Iteration  13: 1576716.712 ops/s
# Warmup Iteration  14: 1579265.801 ops/s
# Warmup Iteration  15: 1578144.086 ops/s
# Warmup Iteration  16: 1576652.484 ops/s
# Warmup Iteration  17: 1578025.039 ops/s
# Warmup Iteration  18: 1578860.719 ops/s
# Warmup Iteration  19: 1578549.775 ops/s
# Warmup Iteration  20: 1577329.397 ops/s
# Warmup Iteration  21: 1575438.331 ops/s
# Warmup Iteration  22: 1573667.995 ops/s
# Warmup Iteration  23: 1575761.653 ops/s
# Warmup Iteration  24: 1578247.613 ops/s
# Warmup Iteration  25: 1578059.938 ops/s
# Warmup Iteration  26: 1577375.011 ops/s
# Warmup Iteration  27: 1577036.532 ops/s
# Warmup Iteration  28: 1574663.676 ops/s
# Warmup Iteration  29: 1574780.521 ops/s
# Warmup Iteration  30: 1578675.793 ops/s
Iteration   1: 1573155.865 ops/s
Iteration   2: 1575076.109 ops/s
Iteration   3: 1576522.901 ops/s
Iteration   4: 1577029.497 ops/s
Iteration   5: 1573910.054 ops/s
Iteration   6: 1573540.665 ops/s
Iteration   7: 1580430.017 ops/s
Iteration   8: 1578646.643 ops/s
Iteration   9: 1577467.475 ops/s
Iteration  10: 1573702.656 ops/s
Iteration  11: 1578094.828 ops/s
Iteration  12: 1574783.937 ops/s
Iteration  13: 1577715.523 ops/s
Iteration  14: 1573882.116 ops/s
Iteration  15: 1581056.109 ops/s
Iteration  16: 1578558.192 ops/s
Iteration  17: 1578102.855 ops/s
Iteration  18: 1573157.202 ops/s
Iteration  19: 1579228.656 ops/s
Iteration  20: 1574540.856 ops/s
Iteration  21: 1579189.303 ops/s
Iteration  22: 1575675.819 ops/s
Iteration  23: 1580355.995 ops/s
Iteration  24: 1574346.908 ops/s
Iteration  25: 1576722.007 ops/s
Iteration  26: 1577375.833 ops/s
Iteration  27: 1579243.899 ops/s
Iteration  28: 1576817.759 ops/s
Iteration  29: 1576905.601 ops/s
Iteration  30: 1583151.355 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_injectIntoDouble":
  1576946.221 ±(99.9%) 1736.500 ops/s [Average]
  (min, avg, max) = (1573155.865, 1576946.221, 1583151.355), stdev = 2599.112
  CI (99.9%): [1575209.721, 1578682.721] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_injectIntoDouble  thrpt   30  1576946.221 ± 1736.500  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmabenchmark_injectIntoFloat$ ===
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_injectIntoInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_injectIntoInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 809383.121 ops/s
# Warmup Iteration   2: 1322542.301 ops/s
# Warmup Iteration   3: 1577719.191 ops/s
# Warmup Iteration   4: 1585907.443 ops/s
# Warmup Iteration   5: 1585980.125 ops/s
# Warmup Iteration   6: 1312221.829 ops/s
# Warmup Iteration   7: 1564582.849 ops/s
# Warmup Iteration   8: 1587769.760 ops/s
# Warmup Iteration   9: 1588687.084 ops/s
# Warmup Iteration  10: 1588655.825 ops/s
# Warmup Iteration  11: 1593240.007 ops/s
# Warmup Iteration  12: 1586178.273 ops/s
# Warmup Iteration  13: 1590188.640 ops/s
# Warmup Iteration  14: 1589854.796 ops/s
# Warmup Iteration  15: 1587759.981 ops/s
# Warmup Iteration  16: 1589983.664 ops/s
# Warmup Iteration  17: 1577136.665 ops/s
# Warmup Iteration  18: 1589686.878 ops/s
# Warmup Iteration  19: 1589415.220 ops/s
# Warmup Iteration  20: 1586592.851 ops/s
# Warmup Iteration  21: 1589703.790 ops/s
# Warmup Iteration  22: 1588715.607 ops/s
# Warmup Iteration  23: 1591003.931 ops/s
# Warmup Iteration  24: 1589224.270 ops/s
# Warmup Iteration  25: 1590152.355 ops/s
# Warmup Iteration  26: 1586944.697 ops/s
# Warmup Iteration  27: 1587271.413 ops/s
# Warmup Iteration  28: 1593128.401 ops/s
# Warmup Iteration  29: 1593752.977 ops/s
# Warmup Iteration  30: 1588479.420 ops/s
Iteration   1: 1593767.204 ops/s
Iteration   2: 1586580.804 ops/s
Iteration   3: 1592579.021 ops/s
Iteration   4: 1589960.572 ops/s
Iteration   5: 1592143.914 ops/s
Iteration   6: 1590531.972 ops/s
Iteration   7: 1592481.638 ops/s
Iteration   8: 1584968.425 ops/s
Iteration   9: 1592109.523 ops/s
Iteration  10: 1586965.837 ops/s
Iteration  11: 1590437.718 ops/s
Iteration  12: 1587059.649 ops/s
Iteration  13: 1587947.573 ops/s
Iteration  14: 1589704.777 ops/s
Iteration  15: 1589189.035 ops/s
Iteration  16: 1593165.700 ops/s
Iteration  17: 1591055.927 ops/s
Iteration  18: 1594611.339 ops/s
Iteration  19: 1589895.100 ops/s
Iteration  20: 1595294.274 ops/s
Iteration  21: 1592488.965 ops/s
Iteration  22: 1592978.538 ops/s
Iteration  23: 1590088.208 ops/s
Iteration  24: 1593223.044 ops/s
Iteration  25: 1590810.087 ops/s
Iteration  26: 1590740.486 ops/s
Iteration  27: 1587851.007 ops/s
Iteration  28: 1591825.747 ops/s
Iteration  29: 1591544.908 ops/s
Iteration  30: 1591239.703 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_injectIntoInt":
  1590774.690 ±(99.9%) 1652.076 ops/s [Average]
  (min, avg, max) = (1584968.425, 1590774.690, 1595294.274), stdev = 2472.750
  CI (99.9%): [1589122.614, 1592426.766] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_injectIntoInt  thrpt   30  1590774.690 ± 1652.076  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_injectIntoLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_injectIntoLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 832249.197 ops/s
# Warmup Iteration   2: 1365742.013 ops/s
# Warmup Iteration   3: 1582060.710 ops/s
# Warmup Iteration   4: 1593586.896 ops/s
# Warmup Iteration   5: 1591906.764 ops/s
# Warmup Iteration   6: 1378001.218 ops/s
# Warmup Iteration   7: 1525797.438 ops/s
# Warmup Iteration   8: 1590983.668 ops/s
# Warmup Iteration   9: 1595863.863 ops/s
# Warmup Iteration  10: 1593731.923 ops/s
# Warmup Iteration  11: 1592086.760 ops/s
# Warmup Iteration  12: 1596953.766 ops/s
# Warmup Iteration  13: 1599191.982 ops/s
# Warmup Iteration  14: 1596486.009 ops/s
# Warmup Iteration  15: 1594899.400 ops/s
# Warmup Iteration  16: 1597679.386 ops/s
# Warmup Iteration  17: 1599671.958 ops/s
# Warmup Iteration  18: 1597381.293 ops/s
# Warmup Iteration  19: 1598150.110 ops/s
# Warmup Iteration  20: 1596692.135 ops/s
# Warmup Iteration  21: 1598822.152 ops/s
# Warmup Iteration  22: 1593112.759 ops/s
# Warmup Iteration  23: 1595920.014 ops/s
# Warmup Iteration  24: 1595908.507 ops/s
# Warmup Iteration  25: 1593571.997 ops/s
# Warmup Iteration  26: 1593884.692 ops/s
# Warmup Iteration  27: 1596102.384 ops/s
# Warmup Iteration  28: 1597523.627 ops/s
# Warmup Iteration  29: 1598816.939 ops/s
# Warmup Iteration  30: 1595405.106 ops/s
Iteration   1: 1593508.850 ops/s
Iteration   2: 1578789.749 ops/s
Iteration   3: 1595479.180 ops/s
Iteration   4: 1592236.266 ops/s
Iteration   5: 1595143.729 ops/s
Iteration   6: 1598797.737 ops/s
Iteration   7: 1594529.220 ops/s
Iteration   8: 1597516.214 ops/s
Iteration   9: 1590140.350 ops/s
Iteration  10: 1594268.330 ops/s
Iteration  11: 1594941.440 ops/s
Iteration  12: 1598944.162 ops/s
Iteration  13: 1595999.812 ops/s
Iteration  14: 1599151.237 ops/s
Iteration  15: 1586301.683 ops/s
Iteration  16: 1597490.671 ops/s
Iteration  17: 1596070.978 ops/s
Iteration  18: 1594169.264 ops/s
Iteration  19: 1590735.093 ops/s
Iteration  20: 1599487.286 ops/s
Iteration  21: 1596744.662 ops/s
Iteration  22: 1598379.162 ops/s
Iteration  23: 1594451.963 ops/s
Iteration  24: 1594584.703 ops/s
Iteration  25: 1598930.298 ops/s
Iteration  26: 1594353.873 ops/s
Iteration  27: 1598508.037 ops/s
Iteration  28: 1596299.579 ops/s
Iteration  29: 1594916.843 ops/s
Iteration  30: 1596923.749 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_injectIntoLong":
  1594926.471 ±(99.9%) 2835.028 ops/s [Average]
  (min, avg, max) = (1578789.749, 1594926.471, 1599487.286), stdev = 4243.336
  CI (99.9%): [1592091.443, 1597761.498] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_injectIntoLong  thrpt   30  1594926.471 ± 2835.028  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 676494.828 ops/s
# Warmup Iteration   2: 1626798.915 ops/s
# Warmup Iteration   3: 1647132.950 ops/s
# Warmup Iteration   4: 1359225.090 ops/s
# Warmup Iteration   5: 1645171.317 ops/s
# Warmup Iteration   6: 1649640.893 ops/s
# Warmup Iteration   7: 1647999.227 ops/s
# Warmup Iteration   8: 1644692.563 ops/s
# Warmup Iteration   9: 1648384.200 ops/s
# Warmup Iteration  10: 1647903.021 ops/s
# Warmup Iteration  11: 1641619.682 ops/s
# Warmup Iteration  12: 1641452.801 ops/s
# Warmup Iteration  13: 1647234.212 ops/s
# Warmup Iteration  14: 1644908.997 ops/s
# Warmup Iteration  15: 1648765.290 ops/s
# Warmup Iteration  16: 1645856.088 ops/s
# Warmup Iteration  17: 1647797.231 ops/s
# Warmup Iteration  18: 1644837.794 ops/s
# Warmup Iteration  19: 1647454.142 ops/s
# Warmup Iteration  20: 1644879.121 ops/s
# Warmup Iteration  21: 1644067.769 ops/s
# Warmup Iteration  22: 1644450.360 ops/s
# Warmup Iteration  23: 1649379.869 ops/s
# Warmup Iteration  24: 1641111.095 ops/s
# Warmup Iteration  25: 1648042.158 ops/s
# Warmup Iteration  26: 1645767.438 ops/s
# Warmup Iteration  27: 1647325.863 ops/s
# Warmup Iteration  28: 1649056.020 ops/s
# Warmup Iteration  29: 1645338.719 ops/s
# Warmup Iteration  30: 1647546.170 ops/s
Iteration   1: 1646748.898 ops/s
Iteration   2: 1648991.978 ops/s
Iteration   3: 1645285.779 ops/s
Iteration   4: 1650279.242 ops/s
Iteration   5: 1649057.985 ops/s
Iteration   6: 1644852.825 ops/s
Iteration   7: 1648674.024 ops/s
Iteration   8: 1643958.894 ops/s
Iteration   9: 1644299.580 ops/s
Iteration  10: 1652171.922 ops/s
Iteration  11: 1647834.921 ops/s
Iteration  12: 1653010.489 ops/s
Iteration  13: 1650005.882 ops/s
Iteration  14: 1648654.210 ops/s
Iteration  15: 1642985.417 ops/s
Iteration  16: 1650243.230 ops/s
Iteration  17: 1647862.408 ops/s
Iteration  18: 1641030.059 ops/s
Iteration  19: 1645464.708 ops/s
Iteration  20: 1643741.863 ops/s
Iteration  21: 1650195.713 ops/s
Iteration  22: 1647359.631 ops/s
Iteration  23: 1643831.842 ops/s
Iteration  24: 1649940.197 ops/s
Iteration  25: 1647523.716 ops/s
Iteration  26: 1645425.654 ops/s
Iteration  27: 1648448.669 ops/s
Iteration  28: 1647525.961 ops/s
Iteration  29: 1649167.943 ops/s
Iteration  30: 1648967.347 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_isEmpty":
  1647451.366 ±(99.9%) 1897.259 ops/s [Average]
  (min, avg, max) = (1641030.059, 1647451.366, 1653010.489), stdev = 2839.728
  CI (99.9%): [1645554.107, 1649348.625] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_isEmpty  thrpt   30  1647451.366 ± 1897.259  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_iterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_iterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 308303.853 ops/s
# Warmup Iteration   2: 369126.380 ops/s
# Warmup Iteration   3: 489773.162 ops/s
# Warmup Iteration   4: 488441.792 ops/s
# Warmup Iteration   5: 486547.733 ops/s
# Warmup Iteration   6: 489369.577 ops/s
# Warmup Iteration   7: 488499.544 ops/s
# Warmup Iteration   8: 488228.868 ops/s
# Warmup Iteration   9: 483917.657 ops/s
# Warmup Iteration  10: 411432.290 ops/s
# Warmup Iteration  11: 490811.386 ops/s
# Warmup Iteration  12: 489111.486 ops/s
# Warmup Iteration  13: 490215.632 ops/s
# Warmup Iteration  14: 489729.167 ops/s
# Warmup Iteration  15: 489659.176 ops/s
# Warmup Iteration  16: 490168.873 ops/s
# Warmup Iteration  17: 504639.314 ops/s
# Warmup Iteration  18: 504329.179 ops/s
# Warmup Iteration  19: 504588.049 ops/s
# Warmup Iteration  20: 503330.350 ops/s
# Warmup Iteration  21: 502857.373 ops/s
# Warmup Iteration  22: 504993.793 ops/s
# Warmup Iteration  23: 503926.956 ops/s
# Warmup Iteration  24: 502709.689 ops/s
# Warmup Iteration  25: 504473.650 ops/s
# Warmup Iteration  26: 502957.051 ops/s
# Warmup Iteration  27: 502833.940 ops/s
# Warmup Iteration  28: 504947.829 ops/s
# Warmup Iteration  29: 504314.034 ops/s
# Warmup Iteration  30: 503907.055 ops/s
Iteration   1: 505568.820 ops/s
Iteration   2: 503738.731 ops/s
Iteration   3: 506094.330 ops/s
Iteration   4: 502134.680 ops/s
Iteration   5: 503702.990 ops/s
Iteration   6: 504335.410 ops/s
Iteration   7: 503835.628 ops/s
Iteration   8: 504907.079 ops/s
Iteration   9: 503741.434 ops/s
Iteration  10: 501243.566 ops/s
Iteration  11: 504420.118 ops/s
Iteration  12: 504145.972 ops/s
Iteration  13: 505046.561 ops/s
Iteration  14: 504316.456 ops/s
Iteration  15: 503700.060 ops/s
Iteration  16: 503462.116 ops/s
Iteration  17: 504735.974 ops/s
Iteration  18: 503521.520 ops/s
Iteration  19: 503681.291 ops/s
Iteration  20: 504221.577 ops/s
Iteration  21: 505300.015 ops/s
Iteration  22: 503336.452 ops/s
Iteration  23: 503791.172 ops/s
Iteration  24: 506440.255 ops/s
Iteration  25: 503499.677 ops/s
Iteration  26: 505566.304 ops/s
Iteration  27: 504830.333 ops/s
Iteration  28: 502172.048 ops/s
Iteration  29: 504446.010 ops/s
Iteration  30: 504816.306 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_iterator":
  504158.430 ±(99.9%) 752.411 ops/s [Average]
  (min, avg, max) = (501243.566, 504158.430, 506440.255), stdev = 1126.174
  CI (99.9%): [503406.018, 504910.841] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score     Error  Units
ImmutableHashBagTest._Benchmark.benchmark_iterator  thrpt   30  504158.430 ± 752.411  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_iteratorRemove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_iteratorRemove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 428148.071 ops/s
# Warmup Iteration   2: 530035.619 ops/s
# Warmup Iteration   3: 658536.059 ops/s
# Warmup Iteration   4: 654080.055 ops/s
# Warmup Iteration   5: 655229.050 ops/s
# Warmup Iteration   6: 655951.694 ops/s
# Warmup Iteration   7: 657759.456 ops/s
# Warmup Iteration   8: 656129.256 ops/s
# Warmup Iteration   9: 551570.978 ops/s
# Warmup Iteration  10: 657845.398 ops/s
# Warmup Iteration  11: 656976.915 ops/s
# Warmup Iteration  12: 657152.941 ops/s
# Warmup Iteration  13: 657020.501 ops/s
# Warmup Iteration  14: 656661.472 ops/s
# Warmup Iteration  15: 656665.450 ops/s
# Warmup Iteration  16: 658665.216 ops/s
# Warmup Iteration  17: 687267.015 ops/s
# Warmup Iteration  18: 688097.557 ops/s
# Warmup Iteration  19: 685496.370 ops/s
# Warmup Iteration  20: 687728.205 ops/s
# Warmup Iteration  21: 687248.262 ops/s
# Warmup Iteration  22: 687714.992 ops/s
# Warmup Iteration  23: 686745.408 ops/s
# Warmup Iteration  24: 685862.330 ops/s
# Warmup Iteration  25: 684597.492 ops/s
# Warmup Iteration  26: 686645.819 ops/s
# Warmup Iteration  27: 686707.722 ops/s
# Warmup Iteration  28: 687698.911 ops/s
# Warmup Iteration  29: 686896.312 ops/s
# Warmup Iteration  30: 686541.782 ops/s
Iteration   1: 685430.517 ops/s
Iteration   2: 686464.658 ops/s
Iteration   3: 685746.378 ops/s
Iteration   4: 683723.475 ops/s
Iteration   5: 686849.168 ops/s
Iteration   6: 688596.278 ops/s
Iteration   7: 686281.648 ops/s
Iteration   8: 689658.248 ops/s
Iteration   9: 687100.257 ops/s
Iteration  10: 687958.902 ops/s
Iteration  11: 688948.941 ops/s
Iteration  12: 683190.746 ops/s
Iteration  13: 684698.461 ops/s
Iteration  14: 683181.457 ops/s
Iteration  15: 686067.672 ops/s
Iteration  16: 690688.315 ops/s
Iteration  17: 683533.240 ops/s
Iteration  18: 685058.079 ops/s
Iteration  19: 685903.231 ops/s
Iteration  20: 687744.948 ops/s
Iteration  21: 685564.405 ops/s
Iteration  22: 682988.269 ops/s
Iteration  23: 684729.155 ops/s
Iteration  24: 686068.032 ops/s
Iteration  25: 687090.603 ops/s
Iteration  26: 685227.542 ops/s
Iteration  27: 687690.984 ops/s
Iteration  28: 688438.488 ops/s
Iteration  29: 684528.175 ops/s
Iteration  30: 688971.282 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_iteratorRemove":
  686270.718 ±(99.9%) 1360.564 ops/s [Average]
  (min, avg, max) = (682988.269, 686270.718, 690688.315), stdev = 2036.429
  CI (99.9%): [684910.154, 687631.283] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_iteratorRemove  thrpt   30  686270.718 ± 1360.564  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_iterator_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_iterator_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 518511.892 ops/s
# Warmup Iteration   2: 554573.755 ops/s
# Warmup Iteration   3: 714636.490 ops/s
# Warmup Iteration   4: 734788.523 ops/s
# Warmup Iteration   5: 736809.642 ops/s
# Warmup Iteration   6: 730352.397 ops/s
# Warmup Iteration   7: 734119.368 ops/s
# Warmup Iteration   8: 735319.797 ops/s
# Warmup Iteration   9: 732834.401 ops/s
# Warmup Iteration  10: 733674.067 ops/s
# Warmup Iteration  11: 735973.468 ops/s
# Warmup Iteration  12: 633996.119 ops/s
# Warmup Iteration  13: 715510.220 ops/s
# Warmup Iteration  14: 736646.242 ops/s
# Warmup Iteration  15: 735987.108 ops/s
# Warmup Iteration  16: 738158.171 ops/s
# Warmup Iteration  17: 768520.455 ops/s
# Warmup Iteration  18: 769255.575 ops/s
# Warmup Iteration  19: 768084.860 ops/s
# Warmup Iteration  20: 769191.225 ops/s
# Warmup Iteration  21: 770443.966 ops/s
# Warmup Iteration  22: 769099.205 ops/s
# Warmup Iteration  23: 768441.406 ops/s
# Warmup Iteration  24: 769380.232 ops/s
# Warmup Iteration  25: 767191.886 ops/s
# Warmup Iteration  26: 767583.743 ops/s
# Warmup Iteration  27: 767587.216 ops/s
# Warmup Iteration  28: 769520.661 ops/s
# Warmup Iteration  29: 770048.174 ops/s
# Warmup Iteration  30: 767385.556 ops/s
Iteration   1: 769121.704 ops/s
Iteration   2: 769172.431 ops/s
Iteration   3: 770374.058 ops/s
Iteration   4: 768861.802 ops/s
Iteration   5: 768526.942 ops/s
Iteration   6: 766127.904 ops/s
Iteration   7: 765789.962 ops/s
Iteration   8: 770396.172 ops/s
Iteration   9: 768260.584 ops/s
Iteration  10: 767795.390 ops/s
Iteration  11: 769893.060 ops/s
Iteration  12: 769670.646 ops/s
Iteration  13: 768598.992 ops/s
Iteration  14: 768208.687 ops/s
Iteration  15: 770632.635 ops/s
Iteration  16: 768952.259 ops/s
Iteration  17: 767820.201 ops/s
Iteration  18: 769479.876 ops/s
Iteration  19: 770314.250 ops/s
Iteration  20: 770839.389 ops/s
Iteration  21: 768116.340 ops/s
Iteration  22: 770183.079 ops/s
Iteration  23: 767590.076 ops/s
Iteration  24: 769959.949 ops/s
Iteration  25: 767045.707 ops/s
Iteration  26: 768593.538 ops/s
Iteration  27: 769064.583 ops/s
Iteration  28: 769561.899 ops/s
Iteration  29: 767994.066 ops/s
Iteration  30: 771167.464 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_iterator_throws":
  768937.121 ±(99.9%) 886.840 ops/s [Average]
  (min, avg, max) = (765789.962, 768937.121, 771167.464), stdev = 1327.381
  CI (99.9%): [768050.281, 769823.962] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score     Error  Units
ImmutableHashBagTest._Benchmark.benchmark_iterator_throws  thrpt   30  768937.121 ± 886.840  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 184525.862 ops/s
# Warmup Iteration   2: 317629.109 ops/s
# Warmup Iteration   3: 357955.774 ops/s
# Warmup Iteration   4: 359611.451 ops/s
# Warmup Iteration   5: 360251.968 ops/s
# Warmup Iteration   6: 299373.903 ops/s
# Warmup Iteration   7: 358543.315 ops/s
# Warmup Iteration   8: 357669.343 ops/s
# Warmup Iteration   9: 358927.166 ops/s
# Warmup Iteration  10: 358616.774 ops/s
# Warmup Iteration  11: 358554.977 ops/s
# Warmup Iteration  12: 358085.489 ops/s
# Warmup Iteration  13: 358254.059 ops/s
# Warmup Iteration  14: 358337.275 ops/s
# Warmup Iteration  15: 357898.617 ops/s
# Warmup Iteration  16: 358951.959 ops/s
# Warmup Iteration  17: 358753.463 ops/s
# Warmup Iteration  18: 358285.971 ops/s
# Warmup Iteration  19: 357730.242 ops/s
# Warmup Iteration  20: 358441.043 ops/s
# Warmup Iteration  21: 357250.624 ops/s
# Warmup Iteration  22: 358274.323 ops/s
# Warmup Iteration  23: 358673.972 ops/s
# Warmup Iteration  24: 358323.250 ops/s
# Warmup Iteration  25: 358452.145 ops/s
# Warmup Iteration  26: 358000.207 ops/s
# Warmup Iteration  27: 359379.572 ops/s
# Warmup Iteration  28: 358660.239 ops/s
# Warmup Iteration  29: 358568.766 ops/s
# Warmup Iteration  30: 358403.138 ops/s
Iteration   1: 359157.583 ops/s
Iteration   2: 358203.145 ops/s
Iteration   3: 357689.263 ops/s
Iteration   4: 359299.114 ops/s
Iteration   5: 358873.379 ops/s
Iteration   6: 357957.838 ops/s
Iteration   7: 358271.613 ops/s
Iteration   8: 358346.630 ops/s
Iteration   9: 359499.504 ops/s
Iteration  10: 356991.280 ops/s
Iteration  11: 357591.617 ops/s
Iteration  12: 359346.693 ops/s
Iteration  13: 358134.625 ops/s
Iteration  14: 359747.807 ops/s
Iteration  15: 358458.398 ops/s
Iteration  16: 359625.267 ops/s
Iteration  17: 357870.784 ops/s
Iteration  18: 359076.661 ops/s
Iteration  19: 358408.155 ops/s
Iteration  20: 357487.097 ops/s
Iteration  21: 358645.789 ops/s
Iteration  22: 359693.112 ops/s
Iteration  23: 359687.806 ops/s
Iteration  24: 358068.963 ops/s
Iteration  25: 359104.600 ops/s
Iteration  26: 358786.266 ops/s
Iteration  27: 358096.526 ops/s
Iteration  28: 356767.858 ops/s
Iteration  29: 359873.215 ops/s
Iteration  30: 358063.883 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_makeString":
  358560.816 ±(99.9%) 561.471 ops/s [Average]
  (min, avg, max) = (356767.858, 358560.816, 359873.215), stdev = 840.383
  CI (99.9%): [357999.345, 359122.287] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score     Error  Units
ImmutableHashBagTest._Benchmark.benchmark_makeString  thrpt   30  358560.816 ± 561.471  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_makeStringWithSeparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_makeStringWithSeparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1016507.989 ops/s
# Warmup Iteration   2: 2372520.490 ops/s
# Warmup Iteration   3: 2384820.529 ops/s
# Warmup Iteration   4: 1980205.051 ops/s
# Warmup Iteration   5: 2388731.815 ops/s
# Warmup Iteration   6: 2393262.429 ops/s
# Warmup Iteration   7: 2388930.258 ops/s
# Warmup Iteration   8: 2393315.624 ops/s
# Warmup Iteration   9: 2386354.077 ops/s
# Warmup Iteration  10: 2384669.734 ops/s
# Warmup Iteration  11: 2386985.220 ops/s
# Warmup Iteration  12: 2392753.366 ops/s
# Warmup Iteration  13: 2387822.197 ops/s
# Warmup Iteration  14: 2391911.269 ops/s
# Warmup Iteration  15: 2389137.468 ops/s
# Warmup Iteration  16: 2389395.077 ops/s
# Warmup Iteration  17: 2387977.749 ops/s
# Warmup Iteration  18: 2393068.974 ops/s
# Warmup Iteration  19: 2385964.150 ops/s
# Warmup Iteration  20: 2394423.074 ops/s
# Warmup Iteration  21: 2390106.701 ops/s
# Warmup Iteration  22: 2392888.638 ops/s
# Warmup Iteration  23: 2392133.818 ops/s
# Warmup Iteration  24: 2396032.267 ops/s
# Warmup Iteration  25: 2393571.216 ops/s
# Warmup Iteration  26: 2390699.767 ops/s
# Warmup Iteration  27: 2391442.837 ops/s
# Warmup Iteration  28: 2394076.891 ops/s
# Warmup Iteration  29: 2390274.000 ops/s
# Warmup Iteration  30: 2386492.649 ops/s
Iteration   1: 2388214.946 ops/s
Iteration   2: 2390439.689 ops/s
Iteration   3: 2389747.309 ops/s
Iteration   4: 2389821.648 ops/s
Iteration   5: 2392679.291 ops/s
Iteration   6: 2391825.326 ops/s
Iteration   7: 2390642.984 ops/s
Iteration   8: 2389382.357 ops/s
Iteration   9: 2387679.007 ops/s
Iteration  10: 2386194.055 ops/s
Iteration  11: 2392506.420 ops/s
Iteration  12: 2389207.854 ops/s
Iteration  13: 2392393.823 ops/s
Iteration  14: 2384182.387 ops/s
Iteration  15: 2389475.911 ops/s
Iteration  16: 2400489.549 ops/s
Iteration  17: 2386797.244 ops/s
Iteration  18: 2393206.210 ops/s
Iteration  19: 2385616.398 ops/s
Iteration  20: 2395390.089 ops/s
Iteration  21: 2389542.411 ops/s
Iteration  22: 2390055.035 ops/s
Iteration  23: 2378529.994 ops/s
Iteration  24: 2395583.466 ops/s
Iteration  25: 2390593.409 ops/s
Iteration  26: 2391632.063 ops/s
Iteration  27: 2386194.657 ops/s
Iteration  28: 2388196.724 ops/s
Iteration  29: 2388111.360 ops/s
Iteration  30: 2385893.963 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_makeStringWithSeparator":
  2389674.186 ±(99.9%) 2664.341 ops/s [Average]
  (min, avg, max) = (2378529.994, 2389674.186, 2400489.549), stdev = 3987.861
  CI (99.9%): [2387009.845, 2392338.527] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_makeStringWithSeparator  thrpt   30  2389674.186 ± 2664.341  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 999889.586 ops/s
# Warmup Iteration   2: 2288309.678 ops/s
# Warmup Iteration   3: 2357449.219 ops/s
# Warmup Iteration   4: 1961662.247 ops/s
# Warmup Iteration   5: 2370457.765 ops/s
# Warmup Iteration   6: 2374609.541 ops/s
# Warmup Iteration   7: 2376622.856 ops/s
# Warmup Iteration   8: 2373660.156 ops/s
# Warmup Iteration   9: 2368144.899 ops/s
# Warmup Iteration  10: 2370919.432 ops/s
# Warmup Iteration  11: 2377752.283 ops/s
# Warmup Iteration  12: 2371305.481 ops/s
# Warmup Iteration  13: 2373386.578 ops/s
# Warmup Iteration  14: 2374560.348 ops/s
# Warmup Iteration  15: 2373037.723 ops/s
# Warmup Iteration  16: 2375963.339 ops/s
# Warmup Iteration  17: 2373106.221 ops/s
# Warmup Iteration  18: 2371521.312 ops/s
# Warmup Iteration  19: 2372418.479 ops/s
# Warmup Iteration  20: 2377520.168 ops/s
# Warmup Iteration  21: 2377055.358 ops/s
# Warmup Iteration  22: 2373769.579 ops/s
# Warmup Iteration  23: 2372879.847 ops/s
# Warmup Iteration  24: 2374835.522 ops/s
# Warmup Iteration  25: 2371067.251 ops/s
# Warmup Iteration  26: 2370572.779 ops/s
# Warmup Iteration  27: 2375847.596 ops/s
# Warmup Iteration  28: 2369940.051 ops/s
# Warmup Iteration  29: 2371291.771 ops/s
# Warmup Iteration  30: 2375864.876 ops/s
Iteration   1: 2360748.521 ops/s
Iteration   2: 2375425.638 ops/s
Iteration   3: 2371331.037 ops/s
Iteration   4: 2373676.812 ops/s
Iteration   5: 2372299.835 ops/s
Iteration   6: 2377685.549 ops/s
Iteration   7: 2366275.505 ops/s
Iteration   8: 2380439.343 ops/s
Iteration   9: 2377736.879 ops/s
Iteration  10: 2364847.841 ops/s
Iteration  11: 2374488.419 ops/s
Iteration  12: 2380442.887 ops/s
Iteration  13: 2374099.652 ops/s
Iteration  14: 2378510.027 ops/s
Iteration  15: 2373811.472 ops/s
Iteration  16: 2379656.345 ops/s
Iteration  17: 2372614.042 ops/s
Iteration  18: 2351915.946 ops/s
Iteration  19: 2383976.157 ops/s
Iteration  20: 2382871.559 ops/s
Iteration  21: 2373859.742 ops/s
Iteration  22: 2381438.117 ops/s
Iteration  23: 2371149.050 ops/s
Iteration  24: 2376950.573 ops/s
Iteration  25: 2374715.956 ops/s
Iteration  26: 2368206.343 ops/s
Iteration  27: 2371737.320 ops/s
Iteration  28: 2374070.703 ops/s
Iteration  29: 2374908.331 ops/s
Iteration  30: 2374864.443 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd":
  2373825.135 ±(99.9%) 4428.662 ops/s [Average]
  (min, avg, max) = (2351915.946, 2373825.135, 2383976.157), stdev = 6628.613
  CI (99.9%): [2369396.473, 2378253.797] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd  thrpt   30  2373825.135 ± 4428.662  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_max$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_max

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1002996.802 ops/s
# Warmup Iteration   2: 1675304.630 ops/s
# Warmup Iteration   3: 1922443.891 ops/s
# Warmup Iteration   4: 1917789.367 ops/s
# Warmup Iteration   5: 1932301.844 ops/s
# Warmup Iteration   6: 1580670.957 ops/s
# Warmup Iteration   7: 1932310.416 ops/s
# Warmup Iteration   8: 1934666.151 ops/s
# Warmup Iteration   9: 1936253.829 ops/s
# Warmup Iteration  10: 1934289.818 ops/s
# Warmup Iteration  11: 1934433.233 ops/s
# Warmup Iteration  12: 1935722.358 ops/s
# Warmup Iteration  13: 1934412.565 ops/s
# Warmup Iteration  14: 1937533.677 ops/s
# Warmup Iteration  15: 1931844.443 ops/s
# Warmup Iteration  16: 1931079.424 ops/s
# Warmup Iteration  17: 1933393.715 ops/s
# Warmup Iteration  18: 1934666.254 ops/s
# Warmup Iteration  19: 1936714.397 ops/s
# Warmup Iteration  20: 1935680.238 ops/s
# Warmup Iteration  21: 1932337.201 ops/s
# Warmup Iteration  22: 1933525.176 ops/s
# Warmup Iteration  23: 1932297.960 ops/s
# Warmup Iteration  24: 1934951.380 ops/s
# Warmup Iteration  25: 1931072.411 ops/s
# Warmup Iteration  26: 1934774.401 ops/s
# Warmup Iteration  27: 1934051.336 ops/s
# Warmup Iteration  28: 1929766.697 ops/s
# Warmup Iteration  29: 1932316.524 ops/s
# Warmup Iteration  30: 1931111.625 ops/s
Iteration   1: 1935471.141 ops/s
Iteration   2: 1933249.320 ops/s
Iteration   3: 1934318.887 ops/s
Iteration   4: 1930762.706 ops/s
Iteration   5: 1934701.228 ops/s
Iteration   6: 1932037.671 ops/s
Iteration   7: 1931559.426 ops/s
Iteration   8: 1930430.284 ops/s
Iteration   9: 1937230.087 ops/s
Iteration  10: 1938107.375 ops/s
Iteration  11: 1931483.445 ops/s
Iteration  12: 1938335.469 ops/s
Iteration  13: 1931633.308 ops/s
Iteration  14: 1936146.528 ops/s
Iteration  15: 1926255.890 ops/s
Iteration  16: 1936897.616 ops/s
Iteration  17: 1932164.148 ops/s
Iteration  18: 1933965.060 ops/s
Iteration  19: 1929663.336 ops/s
Iteration  20: 1935426.843 ops/s
Iteration  21: 1936408.753 ops/s
Iteration  22: 1930770.068 ops/s
Iteration  23: 1934420.415 ops/s
Iteration  24: 1934334.916 ops/s
Iteration  25: 1930547.956 ops/s
Iteration  26: 1934749.504 ops/s
Iteration  27: 1934592.253 ops/s
Iteration  28: 1933934.199 ops/s
Iteration  29: 1935601.879 ops/s
Iteration  30: 1932913.033 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_max":
  1933603.758 ±(99.9%) 1840.059 ops/s [Average]
  (min, avg, max) = (1926255.890, 1933603.758, 1938335.469), stdev = 2754.114
  CI (99.9%): [1931763.699, 1935443.817] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_max  thrpt   30  1933603.758 ± 1840.059  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_maxBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_maxBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 888494.505 ops/s
# Warmup Iteration   2: 1712600.344 ops/s
# Warmup Iteration   3: 1845751.058 ops/s
# Warmup Iteration   4: 1854825.220 ops/s
# Warmup Iteration   5: 1522641.184 ops/s
# Warmup Iteration   6: 1858871.967 ops/s
# Warmup Iteration   7: 1858213.900 ops/s
# Warmup Iteration   8: 1857243.908 ops/s
# Warmup Iteration   9: 1857063.658 ops/s
# Warmup Iteration  10: 1858768.707 ops/s
# Warmup Iteration  11: 1859716.384 ops/s
# Warmup Iteration  12: 1857099.735 ops/s
# Warmup Iteration  13: 1857350.254 ops/s
# Warmup Iteration  14: 1861420.266 ops/s
# Warmup Iteration  15: 1856345.771 ops/s
# Warmup Iteration  16: 1858544.041 ops/s
# Warmup Iteration  17: 1849245.223 ops/s
# Warmup Iteration  18: 1844599.112 ops/s
# Warmup Iteration  19: 1847588.209 ops/s
# Warmup Iteration  20: 1852866.499 ops/s
# Warmup Iteration  21: 1847826.122 ops/s
# Warmup Iteration  22: 1846511.166 ops/s
# Warmup Iteration  23: 1850940.522 ops/s
# Warmup Iteration  24: 1846670.687 ops/s
# Warmup Iteration  25: 1846831.859 ops/s
# Warmup Iteration  26: 1852740.350 ops/s
# Warmup Iteration  27: 1849685.571 ops/s
# Warmup Iteration  28: 1851865.743 ops/s
# Warmup Iteration  29: 1852060.516 ops/s
# Warmup Iteration  30: 1846026.340 ops/s
Iteration   1: 1849845.479 ops/s
Iteration   2: 1847289.346 ops/s
Iteration   3: 1850450.333 ops/s
Iteration   4: 1849194.801 ops/s
Iteration   5: 1849640.506 ops/s
Iteration   6: 1855498.489 ops/s
Iteration   7: 1841379.962 ops/s
Iteration   8: 1852320.044 ops/s
Iteration   9: 1851612.999 ops/s
Iteration  10: 1848128.766 ops/s
Iteration  11: 1851348.058 ops/s
Iteration  12: 1850438.697 ops/s
Iteration  13: 1853679.578 ops/s
Iteration  14: 1852464.473 ops/s
Iteration  15: 1845359.966 ops/s
Iteration  16: 1848379.261 ops/s
Iteration  17: 1851968.175 ops/s
Iteration  18: 1850758.165 ops/s
Iteration  19: 1855413.708 ops/s
Iteration  20: 1853149.242 ops/s
Iteration  21: 1848109.475 ops/s
Iteration  22: 1850607.008 ops/s
Iteration  23: 1853948.037 ops/s
Iteration  24: 1849205.534 ops/s
Iteration  25: 1852201.077 ops/s
Iteration  26: 1855799.023 ops/s
Iteration  27: 1855921.707 ops/s
Iteration  28: 1842507.553 ops/s
Iteration  29: 1855671.794 ops/s
Iteration  30: 1849929.720 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_maxBy":
  1850740.699 ±(99.9%) 2416.516 ops/s [Average]
  (min, avg, max) = (1841379.962, 1850740.699, 1855921.707), stdev = 3616.927
  CI (99.9%): [1848324.184, 1853157.215] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_maxBy  thrpt   30  1850740.699 ± 2416.516  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_maxByOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_maxByOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1429378.451 ops/s
# Warmup Iteration   2: 3433604.486 ops/s
# Warmup Iteration   3: 3498623.641 ops/s
# Warmup Iteration   4: 2870073.748 ops/s
# Warmup Iteration   5: 3492518.745 ops/s
# Warmup Iteration   6: 3502538.861 ops/s
# Warmup Iteration   7: 3502032.345 ops/s
# Warmup Iteration   8: 3491081.583 ops/s
# Warmup Iteration   9: 3503471.465 ops/s
# Warmup Iteration  10: 3507689.762 ops/s
# Warmup Iteration  11: 3500441.064 ops/s
# Warmup Iteration  12: 3496512.788 ops/s
# Warmup Iteration  13: 3499445.285 ops/s
# Warmup Iteration  14: 3502541.298 ops/s
# Warmup Iteration  15: 3502469.740 ops/s
# Warmup Iteration  16: 3503822.390 ops/s
# Warmup Iteration  17: 3498563.138 ops/s
# Warmup Iteration  18: 3503431.367 ops/s
# Warmup Iteration  19: 3502017.590 ops/s
# Warmup Iteration  20: 3503004.405 ops/s
# Warmup Iteration  21: 3500768.561 ops/s
# Warmup Iteration  22: 3495254.374 ops/s
# Warmup Iteration  23: 3504079.830 ops/s
# Warmup Iteration  24: 3501807.222 ops/s
# Warmup Iteration  25: 3499190.537 ops/s
# Warmup Iteration  26: 3487639.224 ops/s
# Warmup Iteration  27: 3502237.256 ops/s
# Warmup Iteration  28: 3499603.188 ops/s
# Warmup Iteration  29: 3503646.146 ops/s
# Warmup Iteration  30: 3502152.358 ops/s
Iteration   1: 3502673.700 ops/s
Iteration   2: 3504849.081 ops/s
Iteration   3: 3505936.376 ops/s
Iteration   4: 3490983.237 ops/s
Iteration   5: 3494414.577 ops/s
Iteration   6: 3501917.978 ops/s
Iteration   7: 3503704.760 ops/s
Iteration   8: 3501292.722 ops/s
Iteration   9: 3501267.180 ops/s
Iteration  10: 3515652.754 ops/s
Iteration  11: 3499818.150 ops/s
Iteration  12: 3506727.664 ops/s
Iteration  13: 3505377.586 ops/s
Iteration  14: 3497097.067 ops/s
Iteration  15: 3497600.785 ops/s
Iteration  16: 3489324.883 ops/s
Iteration  17: 3500264.695 ops/s
Iteration  18: 3514126.283 ops/s
Iteration  19: 3499693.412 ops/s
Iteration  20: 3509635.342 ops/s
Iteration  21: 3496352.890 ops/s
Iteration  22: 3500195.466 ops/s
Iteration  23: 3509152.238 ops/s
Iteration  24: 3503195.819 ops/s
Iteration  25: 3502282.291 ops/s
Iteration  26: 3498094.768 ops/s
Iteration  27: 3511643.772 ops/s
Iteration  28: 3498843.705 ops/s
Iteration  29: 3502348.081 ops/s
Iteration  30: 3502747.666 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_maxByOptional":
  3502240.498 ±(99.9%) 4028.860 ops/s [Average]
  (min, avg, max) = (3489324.883, 3502240.498, 3515652.754), stdev = 6030.209
  CI (99.9%): [3498211.637, 3506269.358] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_maxByOptional  thrpt   30  3502240.498 ± 4028.860  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_maxBy_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_maxBy_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1720826.212 ops/s
# Warmup Iteration   2: 2825826.405 ops/s
# Warmup Iteration   3: 3313492.513 ops/s
# Warmup Iteration   4: 3338102.965 ops/s
# Warmup Iteration   5: 3341968.287 ops/s
# Warmup Iteration   6: 3034908.810 ops/s
# Warmup Iteration   7: 3027997.007 ops/s
# Warmup Iteration   8: 3323087.754 ops/s
# Warmup Iteration   9: 3329388.508 ops/s
# Warmup Iteration  10: 3332854.919 ops/s
# Warmup Iteration  11: 3323479.377 ops/s
# Warmup Iteration  12: 3328385.055 ops/s
# Warmup Iteration  13: 3339001.826 ops/s
# Warmup Iteration  14: 3329293.989 ops/s
# Warmup Iteration  15: 3332784.018 ops/s
# Warmup Iteration  16: 3331917.475 ops/s
# Warmup Iteration  17: 3316809.470 ops/s
# Warmup Iteration  18: 3323573.282 ops/s
# Warmup Iteration  19: 3319187.023 ops/s
# Warmup Iteration  20: 3319062.594 ops/s
# Warmup Iteration  21: 3313829.478 ops/s
# Warmup Iteration  22: 3314777.018 ops/s
# Warmup Iteration  23: 3316597.662 ops/s
# Warmup Iteration  24: 3322067.755 ops/s
# Warmup Iteration  25: 3315938.610 ops/s
# Warmup Iteration  26: 3317959.126 ops/s
# Warmup Iteration  27: 3319801.760 ops/s
# Warmup Iteration  28: 3315771.968 ops/s
# Warmup Iteration  29: 3318356.193 ops/s
# Warmup Iteration  30: 3322631.252 ops/s
Iteration   1: 3313905.366 ops/s
Iteration   2: 3321386.388 ops/s
Iteration   3: 3319809.350 ops/s
Iteration   4: 3318478.384 ops/s
Iteration   5: 3311103.563 ops/s
Iteration   6: 3324723.623 ops/s
Iteration   7: 3315830.859 ops/s
Iteration   8: 3311137.852 ops/s
Iteration   9: 3319118.621 ops/s
Iteration  10: 3322990.177 ops/s
Iteration  11: 3306955.629 ops/s
Iteration  12: 3326095.515 ops/s
Iteration  13: 3316449.633 ops/s
Iteration  14: 3319087.098 ops/s
Iteration  15: 3318521.286 ops/s
Iteration  16: 3321016.108 ops/s
Iteration  17: 3319894.071 ops/s
Iteration  18: 3322638.535 ops/s
Iteration  19: 3321014.251 ops/s
Iteration  20: 3320804.957 ops/s
Iteration  21: 3312348.539 ops/s
Iteration  22: 3313813.249 ops/s
Iteration  23: 3322384.568 ops/s
Iteration  24: 3323790.418 ops/s
Iteration  25: 3307945.947 ops/s
Iteration  26: 3323857.604 ops/s
Iteration  27: 3320098.533 ops/s
Iteration  28: 3318078.423 ops/s
Iteration  29: 3313041.948 ops/s
Iteration  30: 3325334.025 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_maxBy_null_throws":
  3318388.484 ±(99.9%) 3422.155 ops/s [Average]
  (min, avg, max) = (3306955.629, 3318388.484, 3326095.515), stdev = 5122.121
  CI (99.9%): [3314966.329, 3321810.639] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_maxBy_null_throws  thrpt   30  3318388.484 ± 3422.155  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_maxOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_maxOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 848475.215 ops/s
# Warmup Iteration   2: 1684913.643 ops/s
# Warmup Iteration   3: 1800746.716 ops/s
# Warmup Iteration   4: 1812341.210 ops/s
# Warmup Iteration   5: 1493379.244 ops/s
# Warmup Iteration   6: 1813593.165 ops/s
# Warmup Iteration   7: 1812810.416 ops/s
# Warmup Iteration   8: 1814384.127 ops/s
# Warmup Iteration   9: 1815595.073 ops/s
# Warmup Iteration  10: 1809562.288 ops/s
# Warmup Iteration  11: 1813740.997 ops/s
# Warmup Iteration  12: 1813501.290 ops/s
# Warmup Iteration  13: 1810238.866 ops/s
# Warmup Iteration  14: 1810036.634 ops/s
# Warmup Iteration  15: 1813622.069 ops/s
# Warmup Iteration  16: 1810267.287 ops/s
# Warmup Iteration  17: 1810088.962 ops/s
# Warmup Iteration  18: 1809607.335 ops/s
# Warmup Iteration  19: 1811133.019 ops/s
# Warmup Iteration  20: 1811820.563 ops/s
# Warmup Iteration  21: 1813057.188 ops/s
# Warmup Iteration  22: 1813179.422 ops/s
# Warmup Iteration  23: 1812598.308 ops/s
# Warmup Iteration  24: 1815391.903 ops/s
# Warmup Iteration  25: 1813178.632 ops/s
# Warmup Iteration  26: 1813559.307 ops/s
# Warmup Iteration  27: 1808156.569 ops/s
# Warmup Iteration  28: 1813901.473 ops/s
# Warmup Iteration  29: 1809668.601 ops/s
# Warmup Iteration  30: 1812071.798 ops/s
Iteration   1: 1809545.900 ops/s
Iteration   2: 1816168.644 ops/s
Iteration   3: 1813291.695 ops/s
Iteration   4: 1809919.792 ops/s
Iteration   5: 1812267.005 ops/s
Iteration   6: 1810171.390 ops/s
Iteration   7: 1810180.637 ops/s
Iteration   8: 1815875.504 ops/s
Iteration   9: 1807517.187 ops/s
Iteration  10: 1808757.780 ops/s
Iteration  11: 1818481.702 ops/s
Iteration  12: 1810509.955 ops/s
Iteration  13: 1808488.102 ops/s
Iteration  14: 1812969.868 ops/s
Iteration  15: 1811330.500 ops/s
Iteration  16: 1815009.937 ops/s
Iteration  17: 1813016.476 ops/s
Iteration  18: 1814704.344 ops/s
Iteration  19: 1810784.324 ops/s
Iteration  20: 1815737.719 ops/s
Iteration  21: 1814440.058 ops/s
Iteration  22: 1810570.301 ops/s
Iteration  23: 1818275.663 ops/s
Iteration  24: 1813515.586 ops/s
Iteration  25: 1806596.741 ops/s
Iteration  26: 1816583.410 ops/s
Iteration  27: 1810601.584 ops/s
Iteration  28: 1810450.420 ops/s
Iteration  29: 1813852.296 ops/s
Iteration  30: 1817423.944 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_maxOptional":
  1812567.949 ±(99.9%) 2148.768 ops/s [Average]
  (min, avg, max) = (1806596.741, 1812567.949, 1818481.702), stdev = 3216.176
  CI (99.9%): [1810419.180, 1814716.717] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_maxOptional  thrpt   30  1812567.949 ± 2148.768  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_max_empty_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_max_empty_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 678719.774 ops/s
# Warmup Iteration   2: 715925.789 ops/s
# Warmup Iteration   3: 963060.061 ops/s
# Warmup Iteration   4: 960184.629 ops/s
# Warmup Iteration   5: 956596.696 ops/s
# Warmup Iteration   6: 962194.402 ops/s
# Warmup Iteration   7: 961805.870 ops/s
# Warmup Iteration   8: 961803.684 ops/s
# Warmup Iteration   9: 960399.809 ops/s
# Warmup Iteration  10: 958463.814 ops/s
# Warmup Iteration  11: 913273.515 ops/s
# Warmup Iteration  12: 847586.725 ops/s
# Warmup Iteration  13: 958268.802 ops/s
# Warmup Iteration  14: 961257.564 ops/s
# Warmup Iteration  15: 960088.499 ops/s
# Warmup Iteration  16: 956875.209 ops/s
# Warmup Iteration  17: 1014234.999 ops/s
# Warmup Iteration  18: 1014668.746 ops/s
# Warmup Iteration  19: 1014025.733 ops/s
# Warmup Iteration  20: 1013138.275 ops/s
# Warmup Iteration  21: 1015257.840 ops/s
# Warmup Iteration  22: 1014261.855 ops/s
# Warmup Iteration  23: 1011069.338 ops/s
# Warmup Iteration  24: 1014466.006 ops/s
# Warmup Iteration  25: 1014994.840 ops/s
# Warmup Iteration  26: 1015541.639 ops/s
# Warmup Iteration  27: 1015626.885 ops/s
# Warmup Iteration  28: 1014471.290 ops/s
# Warmup Iteration  29: 1015245.280 ops/s
# Warmup Iteration  30: 1016932.525 ops/s
Iteration   1: 1011481.581 ops/s
Iteration   2: 1012761.467 ops/s
Iteration   3: 1014581.013 ops/s
Iteration   4: 1017210.232 ops/s
Iteration   5: 1013110.404 ops/s
Iteration   6: 1014833.691 ops/s
Iteration   7: 1014599.023 ops/s
Iteration   8: 1015072.533 ops/s
Iteration   9: 1011884.530 ops/s
Iteration  10: 1010952.793 ops/s
Iteration  11: 1015132.987 ops/s
Iteration  12: 1007318.317 ops/s
Iteration  13: 1016990.597 ops/s
Iteration  14: 1017668.287 ops/s
Iteration  15: 1016937.898 ops/s
Iteration  16: 1014597.696 ops/s
Iteration  17: 1015473.477 ops/s
Iteration  18: 1015592.634 ops/s
Iteration  19: 1015737.957 ops/s
Iteration  20: 1010667.810 ops/s
Iteration  21: 1019737.637 ops/s
Iteration  22: 1015280.829 ops/s
Iteration  23: 1012759.621 ops/s
Iteration  24: 1009682.103 ops/s
Iteration  25: 1015788.067 ops/s
Iteration  26: 1013493.025 ops/s
Iteration  27: 1014310.239 ops/s
Iteration  28: 1018698.008 ops/s
Iteration  29: 1015134.676 ops/s
Iteration  30: 1012553.506 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_max_empty_throws":
  1014334.755 ±(99.9%) 1805.602 ops/s [Average]
  (min, avg, max) = (1007318.317, 1014334.755, 1019737.637), stdev = 2702.540
  CI (99.9%): [1012529.153, 1016140.357] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_max_empty_throws  thrpt   30  1014334.755 ± 1805.602  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_max_null_safe$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_max_null_safe

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1998260.924 ops/s
# Warmup Iteration   2: 3266546.633 ops/s
# Warmup Iteration   3: 3796184.075 ops/s
# Warmup Iteration   4: 3822582.287 ops/s
# Warmup Iteration   5: 3809918.362 ops/s
# Warmup Iteration   6: 3129445.881 ops/s
# Warmup Iteration   7: 3825694.828 ops/s
# Warmup Iteration   8: 3823822.964 ops/s
# Warmup Iteration   9: 3829337.523 ops/s
# Warmup Iteration  10: 3834415.278 ops/s
# Warmup Iteration  11: 3825901.937 ops/s
# Warmup Iteration  12: 3836661.508 ops/s
# Warmup Iteration  13: 3824861.739 ops/s
# Warmup Iteration  14: 3833462.981 ops/s
# Warmup Iteration  15: 3828184.665 ops/s
# Warmup Iteration  16: 3833804.453 ops/s
# Warmup Iteration  17: 3830626.052 ops/s
# Warmup Iteration  18: 3832634.842 ops/s
# Warmup Iteration  19: 3831675.625 ops/s
# Warmup Iteration  20: 3830940.665 ops/s
# Warmup Iteration  21: 3828598.849 ops/s
# Warmup Iteration  22: 3828054.383 ops/s
# Warmup Iteration  23: 3828969.387 ops/s
# Warmup Iteration  24: 3828823.535 ops/s
# Warmup Iteration  25: 3821689.388 ops/s
# Warmup Iteration  26: 3841370.365 ops/s
# Warmup Iteration  27: 3841293.198 ops/s
# Warmup Iteration  28: 3832213.338 ops/s
# Warmup Iteration  29: 3825248.877 ops/s
# Warmup Iteration  30: 3831954.419 ops/s
Iteration   1: 3842279.568 ops/s
Iteration   2: 3835196.977 ops/s
Iteration   3: 3827365.146 ops/s
Iteration   4: 3825867.492 ops/s
Iteration   5: 3845335.553 ops/s
Iteration   6: 3825219.202 ops/s
Iteration   7: 3841208.080 ops/s
Iteration   8: 3824406.444 ops/s
Iteration   9: 3834520.923 ops/s
Iteration  10: 3825839.527 ops/s
Iteration  11: 3840386.447 ops/s
Iteration  12: 3839777.915 ops/s
Iteration  13: 3830713.779 ops/s
Iteration  14: 3834662.228 ops/s
Iteration  15: 3818136.979 ops/s
Iteration  16: 3839430.547 ops/s
Iteration  17: 3832836.797 ops/s
Iteration  18: 3841779.333 ops/s
Iteration  19: 3827595.038 ops/s
Iteration  20: 3827447.008 ops/s
Iteration  21: 3806844.611 ops/s
Iteration  22: 3838657.492 ops/s
Iteration  23: 3827769.086 ops/s
Iteration  24: 3836139.786 ops/s
Iteration  25: 3839140.607 ops/s
Iteration  26: 3838744.118 ops/s
Iteration  27: 3842136.634 ops/s
Iteration  28: 3842850.047 ops/s
Iteration  29: 3827041.621 ops/s
Iteration  30: 3831383.994 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_max_null_safe":
  3833023.766 ±(99.9%) 5728.025 ops/s [Average]
  (min, avg, max) = (3806844.611, 3833023.766, 3845335.553), stdev = 8573.438
  CI (99.9%): [3827295.741, 3838751.791] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_max_null_safe  thrpt   30  3833023.766 ± 5728.025  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_max_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_max_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 780379.818 ops/s
# Warmup Iteration   2: 1301517.339 ops/s
# Warmup Iteration   3: 1538231.520 ops/s
# Warmup Iteration   4: 1545579.449 ops/s
# Warmup Iteration   5: 1540752.792 ops/s
# Warmup Iteration   6: 1345961.759 ops/s
# Warmup Iteration   7: 1472895.423 ops/s
# Warmup Iteration   8: 1548961.338 ops/s
# Warmup Iteration   9: 1548010.732 ops/s
# Warmup Iteration  10: 1547493.364 ops/s
# Warmup Iteration  11: 1546098.919 ops/s
# Warmup Iteration  12: 1549024.380 ops/s
# Warmup Iteration  13: 1548038.758 ops/s
# Warmup Iteration  14: 1547622.202 ops/s
# Warmup Iteration  15: 1548644.021 ops/s
# Warmup Iteration  16: 1547225.860 ops/s
# Warmup Iteration  17: 1547381.136 ops/s
# Warmup Iteration  18: 1543909.266 ops/s
# Warmup Iteration  19: 1547769.117 ops/s
# Warmup Iteration  20: 1545082.642 ops/s
# Warmup Iteration  21: 1546554.655 ops/s
# Warmup Iteration  22: 1543805.018 ops/s
# Warmup Iteration  23: 1547327.823 ops/s
# Warmup Iteration  24: 1548220.371 ops/s
# Warmup Iteration  25: 1545751.429 ops/s
# Warmup Iteration  26: 1547253.289 ops/s
# Warmup Iteration  27: 1548562.521 ops/s
# Warmup Iteration  28: 1546802.172 ops/s
# Warmup Iteration  29: 1545868.344 ops/s
# Warmup Iteration  30: 1547431.261 ops/s
Iteration   1: 1543082.142 ops/s
Iteration   2: 1552228.947 ops/s
Iteration   3: 1547318.826 ops/s
Iteration   4: 1548327.728 ops/s
Iteration   5: 1547390.076 ops/s
Iteration   6: 1552042.861 ops/s
Iteration   7: 1546509.716 ops/s
Iteration   8: 1549617.563 ops/s
Iteration   9: 1542759.262 ops/s
Iteration  10: 1547952.585 ops/s
Iteration  11: 1544888.942 ops/s
Iteration  12: 1549643.783 ops/s
Iteration  13: 1549662.698 ops/s
Iteration  14: 1548047.129 ops/s
Iteration  15: 1547593.250 ops/s
Iteration  16: 1550032.135 ops/s
Iteration  17: 1544272.137 ops/s
Iteration  18: 1547523.593 ops/s
Iteration  19: 1546958.465 ops/s
Iteration  20: 1550252.078 ops/s
Iteration  21: 1543382.745 ops/s
Iteration  22: 1545448.598 ops/s
Iteration  23: 1551796.994 ops/s
Iteration  24: 1544780.845 ops/s
Iteration  25: 1549614.811 ops/s
Iteration  26: 1543580.369 ops/s
Iteration  27: 1550764.276 ops/s
Iteration  28: 1545181.644 ops/s
Iteration  29: 1551219.305 ops/s
Iteration  30: 1544715.478 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_max_null_throws":
  1547552.966 ±(99.9%) 1909.465 ops/s [Average]
  (min, avg, max) = (1542759.262, 1547552.966, 1552228.947), stdev = 2857.997
  CI (99.9%): [1545643.501, 1549462.431] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_max_null_throws  thrpt   30  1547552.966 ± 1909.465  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_max_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_max_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 784147.736 ops/s
# Warmup Iteration   2: 1260730.121 ops/s
# Warmup Iteration   3: 1502659.646 ops/s
# Warmup Iteration   4: 1514674.426 ops/s
# Warmup Iteration   5: 1513233.094 ops/s
# Warmup Iteration   6: 1467687.538 ops/s
# Warmup Iteration   7: 1284132.782 ops/s
# Warmup Iteration   8: 1512352.853 ops/s
# Warmup Iteration   9: 1515127.473 ops/s
# Warmup Iteration  10: 1514652.564 ops/s
# Warmup Iteration  11: 1513917.667 ops/s
# Warmup Iteration  12: 1513714.452 ops/s
# Warmup Iteration  13: 1515478.152 ops/s
# Warmup Iteration  14: 1515128.575 ops/s
# Warmup Iteration  15: 1518179.247 ops/s
# Warmup Iteration  16: 1515110.226 ops/s
# Warmup Iteration  17: 1514370.444 ops/s
# Warmup Iteration  18: 1518214.704 ops/s
# Warmup Iteration  19: 1516696.195 ops/s
# Warmup Iteration  20: 1516399.013 ops/s
# Warmup Iteration  21: 1516088.857 ops/s
# Warmup Iteration  22: 1519761.495 ops/s
# Warmup Iteration  23: 1515059.867 ops/s
# Warmup Iteration  24: 1514927.518 ops/s
# Warmup Iteration  25: 1519609.049 ops/s
# Warmup Iteration  26: 1519334.674 ops/s
# Warmup Iteration  27: 1514767.174 ops/s
# Warmup Iteration  28: 1515419.027 ops/s
# Warmup Iteration  29: 1515696.121 ops/s
# Warmup Iteration  30: 1517626.543 ops/s
Iteration   1: 1517791.635 ops/s
Iteration   2: 1516532.786 ops/s
Iteration   3: 1517788.554 ops/s
Iteration   4: 1515993.871 ops/s
Iteration   5: 1510574.461 ops/s
Iteration   6: 1515129.602 ops/s
Iteration   7: 1518469.376 ops/s
Iteration   8: 1515371.366 ops/s
Iteration   9: 1517324.428 ops/s
Iteration  10: 1515894.886 ops/s
Iteration  11: 1519440.555 ops/s
Iteration  12: 1519754.391 ops/s
Iteration  13: 1519913.512 ops/s
Iteration  14: 1515424.166 ops/s
Iteration  15: 1515055.401 ops/s
Iteration  16: 1514127.269 ops/s
Iteration  17: 1518922.053 ops/s
Iteration  18: 1516832.724 ops/s
Iteration  19: 1517320.084 ops/s
Iteration  20: 1515902.072 ops/s
Iteration  21: 1517550.409 ops/s
Iteration  22: 1515475.949 ops/s
Iteration  23: 1517484.368 ops/s
Iteration  24: 1516188.065 ops/s
Iteration  25: 1519266.078 ops/s
Iteration  26: 1516590.335 ops/s
Iteration  27: 1519665.145 ops/s
Iteration  28: 1513040.355 ops/s
Iteration  29: 1519075.354 ops/s
Iteration  30: 1516148.065 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_max_null_throws_without_comparator":
  1516801.577 ±(99.9%) 1416.945 ops/s [Average]
  (min, avg, max) = (1510574.461, 1516801.577, 1519913.512), stdev = 2120.817
  CI (99.9%): [1515384.632, 1518218.522] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_max_null_throws_without_comparator  thrpt   30  1516801.577 ± 1416.945  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_max_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_max_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 985685.947 ops/s
# Warmup Iteration   2: 1629352.151 ops/s
# Warmup Iteration   3: 1884957.887 ops/s
# Warmup Iteration   4: 1898327.948 ops/s
# Warmup Iteration   5: 1894324.349 ops/s
# Warmup Iteration   6: 1548819.791 ops/s
# Warmup Iteration   7: 1897369.589 ops/s
# Warmup Iteration   8: 1900896.130 ops/s
# Warmup Iteration   9: 1897821.800 ops/s
# Warmup Iteration  10: 1896264.859 ops/s
# Warmup Iteration  11: 1903020.617 ops/s
# Warmup Iteration  12: 1901227.932 ops/s
# Warmup Iteration  13: 1902806.405 ops/s
# Warmup Iteration  14: 1901804.480 ops/s
# Warmup Iteration  15: 1897441.878 ops/s
# Warmup Iteration  16: 1896856.891 ops/s
# Warmup Iteration  17: 1901839.023 ops/s
# Warmup Iteration  18: 1900904.908 ops/s
# Warmup Iteration  19: 1899403.090 ops/s
# Warmup Iteration  20: 1896265.577 ops/s
# Warmup Iteration  21: 1900804.407 ops/s
# Warmup Iteration  22: 1900527.431 ops/s
# Warmup Iteration  23: 1894724.336 ops/s
# Warmup Iteration  24: 1898448.304 ops/s
# Warmup Iteration  25: 1896202.740 ops/s
# Warmup Iteration  26: 1901077.128 ops/s
# Warmup Iteration  27: 1903035.898 ops/s
# Warmup Iteration  28: 1898588.120 ops/s
# Warmup Iteration  29: 1898737.492 ops/s
# Warmup Iteration  30: 1902758.658 ops/s
Iteration   1: 1901089.748 ops/s
Iteration   2: 1902635.258 ops/s
Iteration   3: 1902192.798 ops/s
Iteration   4: 1907785.456 ops/s
Iteration   5: 1898957.043 ops/s
Iteration   6: 1904423.570 ops/s
Iteration   7: 1902763.234 ops/s
Iteration   8: 1899494.461 ops/s
Iteration   9: 1897205.427 ops/s
Iteration  10: 1903498.291 ops/s
Iteration  11: 1896377.873 ops/s
Iteration  12: 1895809.168 ops/s
Iteration  13: 1900707.866 ops/s
Iteration  14: 1897303.279 ops/s
Iteration  15: 1900662.980 ops/s
Iteration  16: 1899079.036 ops/s
Iteration  17: 1897518.042 ops/s
Iteration  18: 1894109.074 ops/s
Iteration  19: 1896885.897 ops/s
Iteration  20: 1898860.258 ops/s
Iteration  21: 1905693.796 ops/s
Iteration  22: 1898660.780 ops/s
Iteration  23: 1899683.878 ops/s
Iteration  24: 1899873.367 ops/s
Iteration  25: 1899021.871 ops/s
Iteration  26: 1894386.531 ops/s
Iteration  27: 1895231.758 ops/s
Iteration  28: 1893289.530 ops/s
Iteration  29: 1892455.495 ops/s
Iteration  30: 1901104.549 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_max_without_comparator":
  1899225.344 ±(99.9%) 2445.229 ops/s [Average]
  (min, avg, max) = (1892455.495, 1899225.344, 1907785.456), stdev = 3659.904
  CI (99.9%): [1896780.115, 1901670.573] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_max_without_comparator  thrpt   30  1899225.344 ± 2445.229  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_min$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_min

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1012848.616 ops/s
# Warmup Iteration   2: 1656880.959 ops/s
# Warmup Iteration   3: 1935031.265 ops/s
# Warmup Iteration   4: 1947332.756 ops/s
# Warmup Iteration   5: 1942870.658 ops/s
# Warmup Iteration   6: 1586680.188 ops/s
# Warmup Iteration   7: 1948727.746 ops/s
# Warmup Iteration   8: 1950818.362 ops/s
# Warmup Iteration   9: 1948734.500 ops/s
# Warmup Iteration  10: 1948796.846 ops/s
# Warmup Iteration  11: 1949517.162 ops/s
# Warmup Iteration  12: 1951691.789 ops/s
# Warmup Iteration  13: 1950268.115 ops/s
# Warmup Iteration  14: 1943642.051 ops/s
# Warmup Iteration  15: 1952255.938 ops/s
# Warmup Iteration  16: 1947267.884 ops/s
# Warmup Iteration  17: 1949190.100 ops/s
# Warmup Iteration  18: 1948843.304 ops/s
# Warmup Iteration  19: 1947474.657 ops/s
# Warmup Iteration  20: 1944687.204 ops/s
# Warmup Iteration  21: 1952311.369 ops/s
# Warmup Iteration  22: 1942557.489 ops/s
# Warmup Iteration  23: 1951505.144 ops/s
# Warmup Iteration  24: 1948529.191 ops/s
# Warmup Iteration  25: 1947430.891 ops/s
# Warmup Iteration  26: 1948975.229 ops/s
# Warmup Iteration  27: 1947158.182 ops/s
# Warmup Iteration  28: 1948497.433 ops/s
# Warmup Iteration  29: 1949444.285 ops/s
# Warmup Iteration  30: 1952331.926 ops/s
Iteration   1: 1949278.455 ops/s
Iteration   2: 1949677.316 ops/s
Iteration   3: 1943852.017 ops/s
Iteration   4: 1948645.984 ops/s
Iteration   5: 1944060.307 ops/s
Iteration   6: 1953390.662 ops/s
Iteration   7: 1946789.457 ops/s
Iteration   8: 1948406.621 ops/s
Iteration   9: 1948766.720 ops/s
Iteration  10: 1953628.821 ops/s
Iteration  11: 1942709.653 ops/s
Iteration  12: 1952099.225 ops/s
Iteration  13: 1944260.075 ops/s
Iteration  14: 1949439.482 ops/s
Iteration  15: 1944927.078 ops/s
Iteration  16: 1952507.716 ops/s
Iteration  17: 1943800.303 ops/s
Iteration  18: 1944680.324 ops/s
Iteration  19: 1951016.019 ops/s
Iteration  20: 1943423.934 ops/s
Iteration  21: 1951448.599 ops/s
Iteration  22: 1942799.309 ops/s
Iteration  23: 1952525.531 ops/s
Iteration  24: 1943595.787 ops/s
Iteration  25: 1952067.901 ops/s
Iteration  26: 1948562.164 ops/s
Iteration  27: 1953573.245 ops/s
Iteration  28: 1950522.840 ops/s
Iteration  29: 1945994.206 ops/s
Iteration  30: 1946502.895 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_min":
  1948098.421 ±(99.9%) 2446.771 ops/s [Average]
  (min, avg, max) = (1942709.653, 1948098.421, 1953628.821), stdev = 3662.212
  CI (99.9%): [1945651.651, 1950545.192] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_min  thrpt   30  1948098.421 ± 2446.771  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_minBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_minBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 897941.919 ops/s
# Warmup Iteration   2: 1722081.677 ops/s
# Warmup Iteration   3: 1886235.286 ops/s
# Warmup Iteration   4: 1898782.107 ops/s
# Warmup Iteration   5: 1548232.820 ops/s
# Warmup Iteration   6: 1897524.613 ops/s
# Warmup Iteration   7: 1897479.894 ops/s
# Warmup Iteration   8: 1900598.619 ops/s
# Warmup Iteration   9: 1898167.924 ops/s
# Warmup Iteration  10: 1899239.476 ops/s
# Warmup Iteration  11: 1897288.974 ops/s
# Warmup Iteration  12: 1899791.741 ops/s
# Warmup Iteration  13: 1898536.028 ops/s
# Warmup Iteration  14: 1895568.893 ops/s
# Warmup Iteration  15: 1895550.909 ops/s
# Warmup Iteration  16: 1899948.549 ops/s
# Warmup Iteration  17: 1899810.346 ops/s
# Warmup Iteration  18: 1897918.843 ops/s
# Warmup Iteration  19: 1898957.740 ops/s
# Warmup Iteration  20: 1900628.140 ops/s
# Warmup Iteration  21: 1900425.821 ops/s
# Warmup Iteration  22: 1898330.505 ops/s
# Warmup Iteration  23: 1897348.836 ops/s
# Warmup Iteration  24: 1899245.140 ops/s
# Warmup Iteration  25: 1899143.957 ops/s
# Warmup Iteration  26: 1900659.533 ops/s
# Warmup Iteration  27: 1901967.856 ops/s
# Warmup Iteration  28: 1898997.596 ops/s
# Warmup Iteration  29: 1897149.865 ops/s
# Warmup Iteration  30: 1902844.862 ops/s
Iteration   1: 1895717.136 ops/s
Iteration   2: 1898719.836 ops/s
Iteration   3: 1904591.380 ops/s
Iteration   4: 1899317.497 ops/s
Iteration   5: 1898860.427 ops/s
Iteration   6: 1903527.420 ops/s
Iteration   7: 1898189.124 ops/s
Iteration   8: 1899904.172 ops/s
Iteration   9: 1903307.045 ops/s
Iteration  10: 1892447.306 ops/s
Iteration  11: 1903212.535 ops/s
Iteration  12: 1900376.958 ops/s
Iteration  13: 1899728.903 ops/s
Iteration  14: 1903146.757 ops/s
Iteration  15: 1901555.371 ops/s
Iteration  16: 1897435.950 ops/s
Iteration  17: 1904023.113 ops/s
Iteration  18: 1902880.489 ops/s
Iteration  19: 1901076.841 ops/s
Iteration  20: 1899425.925 ops/s
Iteration  21: 1901860.329 ops/s
Iteration  22: 1896596.649 ops/s
Iteration  23: 1893299.502 ops/s
Iteration  24: 1902672.914 ops/s
Iteration  25: 1892914.564 ops/s
Iteration  26: 1902377.786 ops/s
Iteration  27: 1901175.284 ops/s
Iteration  28: 1901052.559 ops/s
Iteration  29: 1904768.281 ops/s
Iteration  30: 1896317.521 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_minBy":
  1900015.986 ±(99.9%) 2299.940 ops/s [Average]
  (min, avg, max) = (1892447.306, 1900015.986, 1904768.281), stdev = 3442.443
  CI (99.9%): [1897716.045, 1902315.926] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_minBy  thrpt   30  1900015.986 ± 2299.940  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_minByOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_minByOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1354062.838 ops/s
# Warmup Iteration   2: 2818286.755 ops/s
# Warmup Iteration   3: 3010470.936 ops/s
# Warmup Iteration   4: 3022931.027 ops/s
# Warmup Iteration   5: 2463077.283 ops/s
# Warmup Iteration   6: 3029577.139 ops/s
# Warmup Iteration   7: 3022376.498 ops/s
# Warmup Iteration   8: 3022673.587 ops/s
# Warmup Iteration   9: 3021172.858 ops/s
# Warmup Iteration  10: 3025727.523 ops/s
# Warmup Iteration  11: 3021386.625 ops/s
# Warmup Iteration  12: 3025354.698 ops/s
# Warmup Iteration  13: 3025290.924 ops/s
# Warmup Iteration  14: 3023876.929 ops/s
# Warmup Iteration  15: 3022622.511 ops/s
# Warmup Iteration  16: 3022142.186 ops/s
# Warmup Iteration  17: 3020655.563 ops/s
# Warmup Iteration  18: 3015537.288 ops/s
# Warmup Iteration  19: 3025970.813 ops/s
# Warmup Iteration  20: 3031556.693 ops/s
# Warmup Iteration  21: 3020661.154 ops/s
# Warmup Iteration  22: 3023580.925 ops/s
# Warmup Iteration  23: 3021312.027 ops/s
# Warmup Iteration  24: 3020852.753 ops/s
# Warmup Iteration  25: 3021490.777 ops/s
# Warmup Iteration  26: 3016307.888 ops/s
# Warmup Iteration  27: 3024698.301 ops/s
# Warmup Iteration  28: 3022608.034 ops/s
# Warmup Iteration  29: 3018444.619 ops/s
# Warmup Iteration  30: 3019992.713 ops/s
Iteration   1: 3031985.612 ops/s
Iteration   2: 3023861.275 ops/s
Iteration   3: 3013346.861 ops/s
Iteration   4: 3026928.166 ops/s
Iteration   5: 3025212.275 ops/s
Iteration   6: 3012187.792 ops/s
Iteration   7: 3022920.198 ops/s
Iteration   8: 3017673.969 ops/s
Iteration   9: 3013389.392 ops/s
Iteration  10: 3021446.672 ops/s
Iteration  11: 3022842.894 ops/s
Iteration  12: 3027094.266 ops/s
Iteration  13: 3022150.206 ops/s
Iteration  14: 3011322.354 ops/s
Iteration  15: 3032979.611 ops/s
Iteration  16: 3019909.229 ops/s
Iteration  17: 3014784.100 ops/s
Iteration  18: 3021472.600 ops/s
Iteration  19: 3027196.852 ops/s
Iteration  20: 3005347.069 ops/s
Iteration  21: 3027401.586 ops/s
Iteration  22: 3026932.419 ops/s
Iteration  23: 3024943.634 ops/s
Iteration  24: 3019906.017 ops/s
Iteration  25: 3038778.184 ops/s
Iteration  26: 3028049.030 ops/s
Iteration  27: 3019771.661 ops/s
Iteration  28: 3031268.261 ops/s
Iteration  29: 3025720.822 ops/s
Iteration  30: 3020049.188 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_minByOptional":
  3022562.407 ±(99.9%) 4819.307 ops/s [Average]
  (min, avg, max) = (3005347.069, 3022562.407, 3038778.184), stdev = 7213.312
  CI (99.9%): [3017743.100, 3027381.714] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_minByOptional  thrpt   30  3022562.407 ± 4819.307  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_minBy_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_minBy_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2170140.391 ops/s
# Warmup Iteration   2: 4495450.676 ops/s
# Warmup Iteration   3: 4939647.368 ops/s
# Warmup Iteration   4: 4978886.571 ops/s
# Warmup Iteration   5: 4066252.256 ops/s
# Warmup Iteration   6: 4987816.325 ops/s
# Warmup Iteration   7: 4964577.121 ops/s
# Warmup Iteration   8: 4987396.943 ops/s
# Warmup Iteration   9: 4986566.658 ops/s
# Warmup Iteration  10: 4977543.574 ops/s
# Warmup Iteration  11: 4969474.572 ops/s
# Warmup Iteration  12: 4969653.874 ops/s
# Warmup Iteration  13: 4976572.256 ops/s
# Warmup Iteration  14: 4983964.833 ops/s
# Warmup Iteration  15: 4986970.789 ops/s
# Warmup Iteration  16: 4977510.090 ops/s
# Warmup Iteration  17: 4956127.211 ops/s
# Warmup Iteration  18: 4973721.865 ops/s
# Warmup Iteration  19: 4953963.773 ops/s
# Warmup Iteration  20: 4961728.336 ops/s
# Warmup Iteration  21: 4964384.608 ops/s
# Warmup Iteration  22: 4956590.907 ops/s
# Warmup Iteration  23: 4976505.681 ops/s
# Warmup Iteration  24: 4973330.959 ops/s
# Warmup Iteration  25: 4961633.140 ops/s
# Warmup Iteration  26: 4971177.056 ops/s
# Warmup Iteration  27: 4973432.032 ops/s
# Warmup Iteration  28: 4971191.002 ops/s
# Warmup Iteration  29: 4967416.131 ops/s
# Warmup Iteration  30: 4964392.964 ops/s
Iteration   1: 4975295.756 ops/s
Iteration   2: 4968586.982 ops/s
Iteration   3: 4962074.117 ops/s
Iteration   4: 4973000.014 ops/s
Iteration   5: 4973045.974 ops/s
Iteration   6: 4970493.388 ops/s
Iteration   7: 4955323.606 ops/s
Iteration   8: 4978046.477 ops/s
Iteration   9: 4962872.356 ops/s
Iteration  10: 4973196.019 ops/s
Iteration  11: 4973259.156 ops/s
Iteration  12: 4973105.302 ops/s
Iteration  13: 4966936.886 ops/s
Iteration  14: 4966444.522 ops/s
Iteration  15: 4953248.803 ops/s
Iteration  16: 4961413.441 ops/s
Iteration  17: 4974484.200 ops/s
Iteration  18: 4958977.675 ops/s
Iteration  19: 4965172.990 ops/s
Iteration  20: 4969093.546 ops/s
Iteration  21: 4971620.981 ops/s
Iteration  22: 4957814.485 ops/s
Iteration  23: 4958085.555 ops/s
Iteration  24: 4976883.688 ops/s
Iteration  25: 4956442.897 ops/s
Iteration  26: 4964676.584 ops/s
Iteration  27: 4961308.834 ops/s
Iteration  28: 4966751.000 ops/s
Iteration  29: 4972804.925 ops/s
Iteration  30: 4958172.968 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_minBy_null_throws":
  4966621.104 ±(99.9%) 4738.590 ops/s [Average]
  (min, avg, max) = (4953248.803, 4966621.104, 4978046.477), stdev = 7092.499
  CI (99.9%): [4961882.514, 4971359.694] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_minBy_null_throws  thrpt   30  4966621.104 ± 4738.590  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_minOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_minOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 855048.136 ops/s
# Warmup Iteration   2: 1706781.349 ops/s
# Warmup Iteration   3: 1816513.201 ops/s
# Warmup Iteration   4: 1833350.850 ops/s
# Warmup Iteration   5: 1513034.365 ops/s
# Warmup Iteration   6: 1831334.220 ops/s
# Warmup Iteration   7: 1826088.703 ops/s
# Warmup Iteration   8: 1835651.263 ops/s
# Warmup Iteration   9: 1834144.074 ops/s
# Warmup Iteration  10: 1836054.442 ops/s
# Warmup Iteration  11: 1835110.985 ops/s
# Warmup Iteration  12: 1833249.771 ops/s
# Warmup Iteration  13: 1829457.519 ops/s
# Warmup Iteration  14: 1835492.574 ops/s
# Warmup Iteration  15: 1832864.850 ops/s
# Warmup Iteration  16: 1833289.360 ops/s
# Warmup Iteration  17: 1832930.649 ops/s
# Warmup Iteration  18: 1831803.405 ops/s
# Warmup Iteration  19: 1835306.739 ops/s
# Warmup Iteration  20: 1829813.519 ops/s
# Warmup Iteration  21: 1834424.721 ops/s
# Warmup Iteration  22: 1835979.745 ops/s
# Warmup Iteration  23: 1829906.935 ops/s
# Warmup Iteration  24: 1838503.095 ops/s
# Warmup Iteration  25: 1835187.017 ops/s
# Warmup Iteration  26: 1832160.251 ops/s
# Warmup Iteration  27: 1834251.103 ops/s
# Warmup Iteration  28: 1828574.429 ops/s
# Warmup Iteration  29: 1836657.314 ops/s
# Warmup Iteration  30: 1835020.569 ops/s
Iteration   1: 1833109.321 ops/s
Iteration   2: 1830315.766 ops/s
Iteration   3: 1832821.011 ops/s
Iteration   4: 1831329.452 ops/s
Iteration   5: 1831542.166 ops/s
Iteration   6: 1840981.200 ops/s
Iteration   7: 1829774.098 ops/s
Iteration   8: 1827742.586 ops/s
Iteration   9: 1839019.615 ops/s
Iteration  10: 1832392.102 ops/s
Iteration  11: 1828783.409 ops/s
Iteration  12: 1831775.534 ops/s
Iteration  13: 1839150.461 ops/s
Iteration  14: 1833360.305 ops/s
Iteration  15: 1828831.635 ops/s
Iteration  16: 1830259.455 ops/s
Iteration  17: 1833036.571 ops/s
Iteration  18: 1835281.837 ops/s
Iteration  19: 1835384.159 ops/s
Iteration  20: 1833490.581 ops/s
Iteration  21: 1833779.022 ops/s
Iteration  22: 1833941.636 ops/s
Iteration  23: 1834017.370 ops/s
Iteration  24: 1837628.884 ops/s
Iteration  25: 1833343.425 ops/s
Iteration  26: 1828796.431 ops/s
Iteration  27: 1830463.500 ops/s
Iteration  28: 1829954.093 ops/s
Iteration  29: 1837169.775 ops/s
Iteration  30: 1836274.221 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_minOptional":
  1833124.987 ±(99.9%) 2249.885 ops/s [Average]
  (min, avg, max) = (1827742.586, 1833124.987, 1840981.200), stdev = 3367.522
  CI (99.9%): [1830875.102, 1835374.872] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_minOptional  thrpt   30  1833124.987 ± 2249.885  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_min_empty_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_min_empty_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 677492.875 ops/s
# Warmup Iteration   2: 714095.444 ops/s
# Warmup Iteration   3: 960295.389 ops/s
# Warmup Iteration   4: 955017.308 ops/s
# Warmup Iteration   5: 942349.512 ops/s
# Warmup Iteration   6: 957223.080 ops/s
# Warmup Iteration   7: 955176.469 ops/s
# Warmup Iteration   8: 955185.860 ops/s
# Warmup Iteration   9: 957420.244 ops/s
# Warmup Iteration  10: 953281.145 ops/s
# Warmup Iteration  11: 922787.845 ops/s
# Warmup Iteration  12: 833604.871 ops/s
# Warmup Iteration  13: 955585.476 ops/s
# Warmup Iteration  14: 952399.522 ops/s
# Warmup Iteration  15: 955006.067 ops/s
# Warmup Iteration  16: 954705.180 ops/s
# Warmup Iteration  17: 1008862.884 ops/s
# Warmup Iteration  18: 1006977.603 ops/s
# Warmup Iteration  19: 1014049.670 ops/s
# Warmup Iteration  20: 1010626.256 ops/s
# Warmup Iteration  21: 1009434.187 ops/s
# Warmup Iteration  22: 1009291.646 ops/s
# Warmup Iteration  23: 1005766.606 ops/s
# Warmup Iteration  24: 1008270.417 ops/s
# Warmup Iteration  25: 1006198.404 ops/s
# Warmup Iteration  26: 1010372.714 ops/s
# Warmup Iteration  27: 1007676.965 ops/s
# Warmup Iteration  28: 1010581.946 ops/s
# Warmup Iteration  29: 1008766.148 ops/s
# Warmup Iteration  30: 1007135.033 ops/s
Iteration   1: 999201.757 ops/s
Iteration   2: 1008036.005 ops/s
Iteration   3: 1008843.101 ops/s
Iteration   4: 1005890.013 ops/s
Iteration   5: 1004382.397 ops/s
Iteration   6: 1014309.490 ops/s
Iteration   7: 1009562.528 ops/s
Iteration   8: 1007834.634 ops/s
Iteration   9: 1010120.818 ops/s
Iteration  10: 1007950.631 ops/s
Iteration  11: 1005825.828 ops/s
Iteration  12: 1008848.279 ops/s
Iteration  13: 1006752.230 ops/s
Iteration  14: 1013389.547 ops/s
Iteration  15: 1010748.809 ops/s
Iteration  16: 1009818.933 ops/s
Iteration  17: 1009245.876 ops/s
Iteration  18: 1007151.978 ops/s
Iteration  19: 1009599.453 ops/s
Iteration  20: 1009142.068 ops/s
Iteration  21: 1007225.310 ops/s
Iteration  22: 1009766.199 ops/s
Iteration  23: 1009727.451 ops/s
Iteration  24: 1007325.450 ops/s
Iteration  25: 1010647.038 ops/s
Iteration  26: 1003675.885 ops/s
Iteration  27: 1007394.988 ops/s
Iteration  28: 1007845.479 ops/s
Iteration  29: 1007608.846 ops/s
Iteration  30: 1011313.550 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_min_empty_throws":
  1008306.152 ±(99.9%) 1910.215 ops/s [Average]
  (min, avg, max) = (999201.757, 1008306.152, 1014309.490), stdev = 2859.120
  CI (99.9%): [1006395.938, 1010216.367] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_min_empty_throws  thrpt   30  1008306.152 ± 1910.215  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_min_null_safe$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_min_null_safe

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2002348.142 ops/s
# Warmup Iteration   2: 3307887.142 ops/s
# Warmup Iteration   3: 3835947.236 ops/s
# Warmup Iteration   4: 3864270.802 ops/s
# Warmup Iteration   5: 3853853.144 ops/s
# Warmup Iteration   6: 3146972.319 ops/s
# Warmup Iteration   7: 3862696.104 ops/s
# Warmup Iteration   8: 3865239.355 ops/s
# Warmup Iteration   9: 3860215.992 ops/s
# Warmup Iteration  10: 3856956.388 ops/s
# Warmup Iteration  11: 3851993.608 ops/s
# Warmup Iteration  12: 3862084.119 ops/s
# Warmup Iteration  13: 3860184.374 ops/s
# Warmup Iteration  14: 3866535.289 ops/s
# Warmup Iteration  15: 3861614.981 ops/s
# Warmup Iteration  16: 3854849.306 ops/s
# Warmup Iteration  17: 3846819.861 ops/s
# Warmup Iteration  18: 3835316.707 ops/s
# Warmup Iteration  19: 3841141.499 ops/s
# Warmup Iteration  20: 3843003.479 ops/s
# Warmup Iteration  21: 3846934.136 ops/s
# Warmup Iteration  22: 3838848.238 ops/s
# Warmup Iteration  23: 3842736.504 ops/s
# Warmup Iteration  24: 3840593.361 ops/s
# Warmup Iteration  25: 3846248.165 ops/s
# Warmup Iteration  26: 3841840.868 ops/s
# Warmup Iteration  27: 3842337.683 ops/s
# Warmup Iteration  28: 3842158.195 ops/s
# Warmup Iteration  29: 3848012.570 ops/s
# Warmup Iteration  30: 3846514.125 ops/s
Iteration   1: 3850038.326 ops/s
Iteration   2: 3843201.608 ops/s
Iteration   3: 3830615.223 ops/s
Iteration   4: 3846557.975 ops/s
Iteration   5: 3845128.377 ops/s
Iteration   6: 3853851.265 ops/s
Iteration   7: 3846026.956 ops/s
Iteration   8: 3847466.588 ops/s
Iteration   9: 3840998.776 ops/s
Iteration  10: 3856266.082 ops/s
Iteration  11: 3851031.959 ops/s
Iteration  12: 3852441.588 ops/s
Iteration  13: 3830605.782 ops/s
Iteration  14: 3848875.467 ops/s
Iteration  15: 3844905.806 ops/s
Iteration  16: 3847184.074 ops/s
Iteration  17: 3837158.958 ops/s
Iteration  18: 3849458.313 ops/s
Iteration  19: 3845737.304 ops/s
Iteration  20: 3848840.813 ops/s
Iteration  21: 3858215.203 ops/s
Iteration  22: 3837094.362 ops/s
Iteration  23: 3846547.261 ops/s
Iteration  24: 3848931.526 ops/s
Iteration  25: 3846837.329 ops/s
Iteration  26: 3841883.386 ops/s
Iteration  27: 3840243.839 ops/s
Iteration  28: 3844801.170 ops/s
Iteration  29: 3858031.992 ops/s
Iteration  30: 3844260.587 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_min_null_safe":
  3846107.930 ±(99.9%) 4483.736 ops/s [Average]
  (min, avg, max) = (3830605.782, 3846107.930, 3858215.203), stdev = 6711.045
  CI (99.9%): [3841624.194, 3850591.665] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_min_null_safe  thrpt   30  3846107.930 ± 4483.736  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_min_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_min_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 793323.813 ops/s
# Warmup Iteration   2: 1374824.028 ops/s
# Warmup Iteration   3: 1613125.455 ops/s
# Warmup Iteration   4: 1628119.537 ops/s
# Warmup Iteration   5: 1628343.903 ops/s
# Warmup Iteration   6: 1323701.372 ops/s
# Warmup Iteration   7: 1628458.867 ops/s
# Warmup Iteration   8: 1625931.069 ops/s
# Warmup Iteration   9: 1627303.614 ops/s
# Warmup Iteration  10: 1631196.635 ops/s
# Warmup Iteration  11: 1626625.914 ops/s
# Warmup Iteration  12: 1628353.468 ops/s
# Warmup Iteration  13: 1627130.087 ops/s
# Warmup Iteration  14: 1624418.531 ops/s
# Warmup Iteration  15: 1630029.421 ops/s
# Warmup Iteration  16: 1625731.839 ops/s
# Warmup Iteration  17: 1627457.589 ops/s
# Warmup Iteration  18: 1625609.164 ops/s
# Warmup Iteration  19: 1624766.290 ops/s
# Warmup Iteration  20: 1627039.941 ops/s
# Warmup Iteration  21: 1621450.547 ops/s
# Warmup Iteration  22: 1624911.560 ops/s
# Warmup Iteration  23: 1627785.853 ops/s
# Warmup Iteration  24: 1624859.830 ops/s
# Warmup Iteration  25: 1627084.980 ops/s
# Warmup Iteration  26: 1623829.854 ops/s
# Warmup Iteration  27: 1626937.904 ops/s
# Warmup Iteration  28: 1625708.961 ops/s
# Warmup Iteration  29: 1625330.840 ops/s
# Warmup Iteration  30: 1627053.256 ops/s
Iteration   1: 1628159.403 ops/s
Iteration   2: 1628753.936 ops/s
Iteration   3: 1627456.051 ops/s
Iteration   4: 1627472.734 ops/s
Iteration   5: 1628540.020 ops/s
Iteration   6: 1621923.917 ops/s
Iteration   7: 1627041.884 ops/s
Iteration   8: 1626858.570 ops/s
Iteration   9: 1626721.908 ops/s
Iteration  10: 1629570.156 ops/s
Iteration  11: 1626791.749 ops/s
Iteration  12: 1626174.395 ops/s
Iteration  13: 1626272.843 ops/s
Iteration  14: 1626467.061 ops/s
Iteration  15: 1625599.070 ops/s
Iteration  16: 1627264.927 ops/s
Iteration  17: 1630625.135 ops/s
Iteration  18: 1627865.748 ops/s
Iteration  19: 1628495.369 ops/s
Iteration  20: 1629648.089 ops/s
Iteration  21: 1627272.214 ops/s
Iteration  22: 1627855.426 ops/s
Iteration  23: 1629470.960 ops/s
Iteration  24: 1627069.031 ops/s
Iteration  25: 1626970.967 ops/s
Iteration  26: 1629250.271 ops/s
Iteration  27: 1631001.182 ops/s
Iteration  28: 1625365.499 ops/s
Iteration  29: 1627951.989 ops/s
Iteration  30: 1621831.529 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_min_null_throws":
  1627391.401 ±(99.9%) 1359.582 ops/s [Average]
  (min, avg, max) = (1621831.529, 1627391.401, 1631001.182), stdev = 2034.959
  CI (99.9%): [1626031.819, 1628750.983] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_min_null_throws  thrpt   30  1627391.401 ± 1359.582  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_min_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_min_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 780780.970 ops/s
# Warmup Iteration   2: 1236782.220 ops/s
# Warmup Iteration   3: 1476073.529 ops/s
# Warmup Iteration   4: 1491368.271 ops/s
# Warmup Iteration   5: 1487544.414 ops/s
# Warmup Iteration   6: 1486389.045 ops/s
# Warmup Iteration   7: 1223709.047 ops/s
# Warmup Iteration   8: 1491120.365 ops/s
# Warmup Iteration   9: 1491150.327 ops/s
# Warmup Iteration  10: 1489953.992 ops/s
# Warmup Iteration  11: 1490768.238 ops/s
# Warmup Iteration  12: 1489572.394 ops/s
# Warmup Iteration  13: 1489942.829 ops/s
# Warmup Iteration  14: 1488190.744 ops/s
# Warmup Iteration  15: 1489863.769 ops/s
# Warmup Iteration  16: 1489119.775 ops/s
# Warmup Iteration  17: 1494709.805 ops/s
# Warmup Iteration  18: 1491002.444 ops/s
# Warmup Iteration  19: 1493449.728 ops/s
# Warmup Iteration  20: 1495575.550 ops/s
# Warmup Iteration  21: 1492090.740 ops/s
# Warmup Iteration  22: 1492839.807 ops/s
# Warmup Iteration  23: 1492487.839 ops/s
# Warmup Iteration  24: 1493677.324 ops/s
# Warmup Iteration  25: 1493459.778 ops/s
# Warmup Iteration  26: 1497466.098 ops/s
# Warmup Iteration  27: 1494040.400 ops/s
# Warmup Iteration  28: 1494788.949 ops/s
# Warmup Iteration  29: 1494874.100 ops/s
# Warmup Iteration  30: 1494283.900 ops/s
Iteration   1: 1491939.737 ops/s
Iteration   2: 1493930.689 ops/s
Iteration   3: 1488954.294 ops/s
Iteration   4: 1496075.966 ops/s
Iteration   5: 1495880.756 ops/s
Iteration   6: 1497229.634 ops/s
Iteration   7: 1496187.169 ops/s
Iteration   8: 1495345.205 ops/s
Iteration   9: 1493825.332 ops/s
Iteration  10: 1489130.517 ops/s
Iteration  11: 1493942.036 ops/s
Iteration  12: 1499789.582 ops/s
Iteration  13: 1491455.836 ops/s
Iteration  14: 1495273.373 ops/s
Iteration  15: 1495406.150 ops/s
Iteration  16: 1495355.089 ops/s
Iteration  17: 1492621.859 ops/s
Iteration  18: 1496119.056 ops/s
Iteration  19: 1491608.266 ops/s
Iteration  20: 1494462.504 ops/s
Iteration  21: 1491843.702 ops/s
Iteration  22: 1497842.554 ops/s
Iteration  23: 1492227.559 ops/s
Iteration  24: 1488679.642 ops/s
Iteration  25: 1492690.945 ops/s
Iteration  26: 1488699.477 ops/s
Iteration  27: 1493354.108 ops/s
Iteration  28: 1492423.310 ops/s
Iteration  29: 1496998.666 ops/s
Iteration  30: 1490648.611 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_min_null_throws_without_comparator":
  1493664.721 ±(99.9%) 1907.957 ops/s [Average]
  (min, avg, max) = (1488679.642, 1493664.721, 1499789.582), stdev = 2855.741
  CI (99.9%): [1491756.763, 1495572.678] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_min_null_throws_without_comparator  thrpt   30  1493664.721 ± 1907.957  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_min_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_min_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1015351.834 ops/s
# Warmup Iteration   2: 1682118.470 ops/s
# Warmup Iteration   3: 1983274.830 ops/s
# Warmup Iteration   4: 2000210.719 ops/s
# Warmup Iteration   5: 1994146.646 ops/s
# Warmup Iteration   6: 1620758.404 ops/s
# Warmup Iteration   7: 2001530.498 ops/s
# Warmup Iteration   8: 1995393.516 ops/s
# Warmup Iteration   9: 2001195.478 ops/s
# Warmup Iteration  10: 1998666.336 ops/s
# Warmup Iteration  11: 2000432.844 ops/s
# Warmup Iteration  12: 1999440.426 ops/s
# Warmup Iteration  13: 1998490.439 ops/s
# Warmup Iteration  14: 1995980.895 ops/s
# Warmup Iteration  15: 2000673.922 ops/s
# Warmup Iteration  16: 1998326.710 ops/s
# Warmup Iteration  17: 1996869.013 ops/s
# Warmup Iteration  18: 1996074.061 ops/s
# Warmup Iteration  19: 1997438.430 ops/s
# Warmup Iteration  20: 1994332.398 ops/s
# Warmup Iteration  21: 1998714.887 ops/s
# Warmup Iteration  22: 1998511.033 ops/s
# Warmup Iteration  23: 2000222.651 ops/s
# Warmup Iteration  24: 1997760.715 ops/s
# Warmup Iteration  25: 1998375.907 ops/s
# Warmup Iteration  26: 2000234.744 ops/s
# Warmup Iteration  27: 1998744.304 ops/s
# Warmup Iteration  28: 1998992.081 ops/s
# Warmup Iteration  29: 2000280.511 ops/s
# Warmup Iteration  30: 1997431.638 ops/s
Iteration   1: 2002678.690 ops/s
Iteration   2: 1993109.276 ops/s
Iteration   3: 2001721.109 ops/s
Iteration   4: 1994299.502 ops/s
Iteration   5: 1995254.441 ops/s
Iteration   6: 1995919.809 ops/s
Iteration   7: 1995940.314 ops/s
Iteration   8: 1997614.427 ops/s
Iteration   9: 1998037.065 ops/s
Iteration  10: 2002286.836 ops/s
Iteration  11: 1994776.252 ops/s
Iteration  12: 2001924.291 ops/s
Iteration  13: 1996301.611 ops/s
Iteration  14: 1997720.896 ops/s
Iteration  15: 2000023.779 ops/s
Iteration  16: 2001088.994 ops/s
Iteration  17: 1999507.808 ops/s
Iteration  18: 1997517.075 ops/s
Iteration  19: 1998843.907 ops/s
Iteration  20: 1995188.559 ops/s
Iteration  21: 1999319.161 ops/s
Iteration  22: 1998076.930 ops/s
Iteration  23: 2000904.246 ops/s
Iteration  24: 1995321.514 ops/s
Iteration  25: 2000068.330 ops/s
Iteration  26: 1991343.891 ops/s
Iteration  27: 1997769.665 ops/s
Iteration  28: 1999371.333 ops/s
Iteration  29: 1998863.387 ops/s
Iteration  30: 1996372.047 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_min_without_comparator":
  1997905.505 ±(99.9%) 1891.736 ops/s [Average]
  (min, avg, max) = (1991343.891, 1997905.505, 2002678.690), stdev = 2831.462
  CI (99.9%): [1996013.769, 1999797.241] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_min_without_comparator  thrpt   30  1997905.505 ± 1891.736  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_newWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_newWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 590589.096 ops/s
# Warmup Iteration   2: 998860.070 ops/s
# Warmup Iteration   3: 1151375.914 ops/s
# Warmup Iteration   4: 1160313.456 ops/s
# Warmup Iteration   5: 1159256.674 ops/s
# Warmup Iteration   6: 952629.812 ops/s
# Warmup Iteration   7: 1162012.997 ops/s
# Warmup Iteration   8: 1161098.110 ops/s
# Warmup Iteration   9: 1160520.948 ops/s
# Warmup Iteration  10: 1161289.552 ops/s
# Warmup Iteration  11: 1164083.969 ops/s
# Warmup Iteration  12: 1161431.884 ops/s
# Warmup Iteration  13: 1161288.259 ops/s
# Warmup Iteration  14: 1161110.838 ops/s
# Warmup Iteration  15: 1164571.406 ops/s
# Warmup Iteration  16: 1159616.341 ops/s
# Warmup Iteration  17: 1161934.096 ops/s
# Warmup Iteration  18: 1157902.975 ops/s
# Warmup Iteration  19: 1157849.615 ops/s
# Warmup Iteration  20: 1160338.653 ops/s
# Warmup Iteration  21: 1163838.345 ops/s
# Warmup Iteration  22: 1162681.858 ops/s
# Warmup Iteration  23: 1162081.068 ops/s
# Warmup Iteration  24: 1163370.170 ops/s
# Warmup Iteration  25: 1161963.328 ops/s
# Warmup Iteration  26: 1161021.818 ops/s
# Warmup Iteration  27: 1160349.102 ops/s
# Warmup Iteration  28: 1158564.624 ops/s
# Warmup Iteration  29: 1161754.488 ops/s
# Warmup Iteration  30: 1162927.623 ops/s
Iteration   1: 1158945.408 ops/s
Iteration   2: 1158837.942 ops/s
Iteration   3: 1163276.364 ops/s
Iteration   4: 1159219.296 ops/s
Iteration   5: 1155758.467 ops/s
Iteration   6: 1161280.913 ops/s
Iteration   7: 1159167.930 ops/s
Iteration   8: 1158307.893 ops/s
Iteration   9: 1157010.316 ops/s
Iteration  10: 1161185.063 ops/s
Iteration  11: 1159286.606 ops/s
Iteration  12: 1161596.182 ops/s
Iteration  13: 1160948.858 ops/s
Iteration  14: 1162431.140 ops/s
Iteration  15: 1158948.399 ops/s
Iteration  16: 1162358.744 ops/s
Iteration  17: 1162578.356 ops/s
Iteration  18: 1160271.304 ops/s
Iteration  19: 1160452.878 ops/s
Iteration  20: 1162704.515 ops/s
Iteration  21: 1168294.344 ops/s
Iteration  22: 1162890.636 ops/s
Iteration  23: 1161536.170 ops/s
Iteration  24: 1159549.087 ops/s
Iteration  25: 1159936.831 ops/s
Iteration  26: 1160599.269 ops/s
Iteration  27: 1159086.143 ops/s
Iteration  28: 1163303.566 ops/s
Iteration  29: 1157862.860 ops/s
Iteration  30: 1162237.024 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_newWith":
  1160662.083 ±(99.9%) 1600.214 ops/s [Average]
  (min, avg, max) = (1155758.467, 1160662.083, 1168294.344), stdev = 2395.125
  CI (99.9%): [1159061.870, 1162262.297] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_newWith  thrpt   30  1160662.083 ± 1600.214  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_newWithAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_newWithAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 494605.170 ops/s
# Warmup Iteration   2: 841143.161 ops/s
# Warmup Iteration   3: 978082.040 ops/s
# Warmup Iteration   4: 986230.606 ops/s
# Warmup Iteration   5: 981533.323 ops/s
# Warmup Iteration   6: 803750.675 ops/s
# Warmup Iteration   7: 981685.332 ops/s
# Warmup Iteration   8: 983739.257 ops/s
# Warmup Iteration   9: 986250.188 ops/s
# Warmup Iteration  10: 981532.637 ops/s
# Warmup Iteration  11: 985081.748 ops/s
# Warmup Iteration  12: 983615.145 ops/s
# Warmup Iteration  13: 982850.730 ops/s
# Warmup Iteration  14: 985008.250 ops/s
# Warmup Iteration  15: 979857.005 ops/s
# Warmup Iteration  16: 986113.634 ops/s
# Warmup Iteration  17: 983477.885 ops/s
# Warmup Iteration  18: 985451.220 ops/s
# Warmup Iteration  19: 985553.963 ops/s
# Warmup Iteration  20: 984032.217 ops/s
# Warmup Iteration  21: 984082.944 ops/s
# Warmup Iteration  22: 983553.311 ops/s
# Warmup Iteration  23: 985411.307 ops/s
# Warmup Iteration  24: 982820.270 ops/s
# Warmup Iteration  25: 984126.243 ops/s
# Warmup Iteration  26: 982674.532 ops/s
# Warmup Iteration  27: 985284.005 ops/s
# Warmup Iteration  28: 985536.763 ops/s
# Warmup Iteration  29: 983818.335 ops/s
# Warmup Iteration  30: 982495.622 ops/s
Iteration   1: 978597.456 ops/s
Iteration   2: 984471.701 ops/s
Iteration   3: 986346.057 ops/s
Iteration   4: 981955.470 ops/s
Iteration   5: 984734.491 ops/s
Iteration   6: 990153.357 ops/s
Iteration   7: 986894.710 ops/s
Iteration   8: 984023.524 ops/s
Iteration   9: 979873.500 ops/s
Iteration  10: 986368.560 ops/s
Iteration  11: 982445.023 ops/s
Iteration  12: 982334.675 ops/s
Iteration  13: 984437.782 ops/s
Iteration  14: 983931.968 ops/s
Iteration  15: 985983.757 ops/s
Iteration  16: 981625.903 ops/s
Iteration  17: 987063.389 ops/s
Iteration  18: 985078.125 ops/s
Iteration  19: 985475.199 ops/s
Iteration  20: 984418.495 ops/s
Iteration  21: 985463.776 ops/s
Iteration  22: 984905.062 ops/s
Iteration  23: 983210.863 ops/s
Iteration  24: 986000.883 ops/s
Iteration  25: 978597.289 ops/s
Iteration  26: 984879.101 ops/s
Iteration  27: 978478.329 ops/s
Iteration  28: 986428.553 ops/s
Iteration  29: 976823.844 ops/s
Iteration  30: 987215.992 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_newWithAll":
  983940.561 ±(99.9%) 2046.303 ops/s [Average]
  (min, avg, max) = (976823.844, 983940.561, 990153.357), stdev = 3062.810
  CI (99.9%): [981894.259, 985986.864] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_newWithAll  thrpt   30  983940.561 ± 2046.303  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_newWithout$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_newWithout

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 561356.279 ops/s
# Warmup Iteration   2: 887740.847 ops/s
# Warmup Iteration   3: 1058648.853 ops/s
# Warmup Iteration   4: 1065578.726 ops/s
# Warmup Iteration   5: 1065028.900 ops/s
# Warmup Iteration   6: 1041246.500 ops/s
# Warmup Iteration   7: 897760.125 ops/s
# Warmup Iteration   8: 1062212.812 ops/s
# Warmup Iteration   9: 1066745.743 ops/s
# Warmup Iteration  10: 1066124.884 ops/s
# Warmup Iteration  11: 1064976.238 ops/s
# Warmup Iteration  12: 1067052.943 ops/s
# Warmup Iteration  13: 1064585.451 ops/s
# Warmup Iteration  14: 1064378.803 ops/s
# Warmup Iteration  15: 1066543.766 ops/s
# Warmup Iteration  16: 1066717.242 ops/s
# Warmup Iteration  17: 1067033.301 ops/s
# Warmup Iteration  18: 1068464.110 ops/s
# Warmup Iteration  19: 1065904.921 ops/s
# Warmup Iteration  20: 1067510.992 ops/s
# Warmup Iteration  21: 1064136.573 ops/s
# Warmup Iteration  22: 1063390.300 ops/s
# Warmup Iteration  23: 1065304.192 ops/s
# Warmup Iteration  24: 1064945.540 ops/s
# Warmup Iteration  25: 1061349.375 ops/s
# Warmup Iteration  26: 1063187.583 ops/s
# Warmup Iteration  27: 1067058.841 ops/s
# Warmup Iteration  28: 1066605.346 ops/s
# Warmup Iteration  29: 1066214.747 ops/s
# Warmup Iteration  30: 1063382.606 ops/s
Iteration   1: 1067262.705 ops/s
Iteration   2: 1067212.701 ops/s
Iteration   3: 1062996.366 ops/s
Iteration   4: 1062856.831 ops/s
Iteration   5: 1066669.142 ops/s
Iteration   6: 1063792.833 ops/s
Iteration   7: 1062749.877 ops/s
Iteration   8: 1065651.970 ops/s
Iteration   9: 1068844.188 ops/s
Iteration  10: 1063805.963 ops/s
Iteration  11: 1067000.147 ops/s
Iteration  12: 1067294.327 ops/s
Iteration  13: 1065772.877 ops/s
Iteration  14: 1059237.553 ops/s
Iteration  15: 1067739.690 ops/s
Iteration  16: 1068953.032 ops/s
Iteration  17: 1061008.677 ops/s
Iteration  18: 1068239.586 ops/s
Iteration  19: 1063825.719 ops/s
Iteration  20: 1066852.168 ops/s
Iteration  21: 1066517.884 ops/s
Iteration  22: 1066709.241 ops/s
Iteration  23: 1062166.113 ops/s
Iteration  24: 1066666.165 ops/s
Iteration  25: 1065778.817 ops/s
Iteration  26: 1065391.352 ops/s
Iteration  27: 1064364.988 ops/s
Iteration  28: 1065544.858 ops/s
Iteration  29: 1067430.547 ops/s
Iteration  30: 1063110.711 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_newWithout":
  1065381.568 ±(99.9%) 1591.693 ops/s [Average]
  (min, avg, max) = (1059237.553, 1065381.568, 1068953.032), stdev = 2382.371
  CI (99.9%): [1063789.875, 1066973.260] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_newWithout  thrpt   30  1065381.568 ± 1591.693  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_newWithoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_newWithoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 314721.160 ops/s
# Warmup Iteration   2: 468497.374 ops/s
# Warmup Iteration   3: 592490.324 ops/s
# Warmup Iteration   4: 584209.014 ops/s
# Warmup Iteration   5: 590685.900 ops/s
# Warmup Iteration   6: 592300.260 ops/s
# Warmup Iteration   7: 552246.194 ops/s
# Warmup Iteration   8: 526732.818 ops/s
# Warmup Iteration   9: 591683.819 ops/s
# Warmup Iteration  10: 591617.844 ops/s
# Warmup Iteration  11: 593067.481 ops/s
# Warmup Iteration  12: 589489.457 ops/s
# Warmup Iteration  13: 591593.718 ops/s
# Warmup Iteration  14: 590783.455 ops/s
# Warmup Iteration  15: 591854.150 ops/s
# Warmup Iteration  16: 591427.548 ops/s
# Warmup Iteration  17: 592009.293 ops/s
# Warmup Iteration  18: 590758.923 ops/s
# Warmup Iteration  19: 592323.879 ops/s
# Warmup Iteration  20: 593350.751 ops/s
# Warmup Iteration  21: 593238.094 ops/s
# Warmup Iteration  22: 592016.035 ops/s
# Warmup Iteration  23: 589717.677 ops/s
# Warmup Iteration  24: 590678.922 ops/s
# Warmup Iteration  25: 593422.254 ops/s
# Warmup Iteration  26: 592317.169 ops/s
# Warmup Iteration  27: 591620.873 ops/s
# Warmup Iteration  28: 592414.604 ops/s
# Warmup Iteration  29: 591696.240 ops/s
# Warmup Iteration  30: 590607.093 ops/s
Iteration   1: 594344.443 ops/s
Iteration   2: 591155.710 ops/s
Iteration   3: 592156.196 ops/s
Iteration   4: 591890.498 ops/s
Iteration   5: 591137.943 ops/s
Iteration   6: 591882.455 ops/s
Iteration   7: 592713.678 ops/s
Iteration   8: 592017.279 ops/s
Iteration   9: 592039.057 ops/s
Iteration  10: 595143.857 ops/s
Iteration  11: 589370.019 ops/s
Iteration  12: 590304.358 ops/s
Iteration  13: 590599.822 ops/s
Iteration  14: 587584.032 ops/s
Iteration  15: 591005.679 ops/s
Iteration  16: 591896.775 ops/s
Iteration  17: 592279.372 ops/s
Iteration  18: 593110.572 ops/s
Iteration  19: 591297.376 ops/s
Iteration  20: 592805.103 ops/s
Iteration  21: 590389.066 ops/s
Iteration  22: 594157.153 ops/s
Iteration  23: 589515.313 ops/s
Iteration  24: 590615.493 ops/s
Iteration  25: 593387.756 ops/s
Iteration  26: 589318.339 ops/s
Iteration  27: 591488.434 ops/s
Iteration  28: 589248.565 ops/s
Iteration  29: 591901.356 ops/s
Iteration  30: 593494.415 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_newWithoutAll":
  591608.337 ±(99.9%) 1123.684 ops/s [Average]
  (min, avg, max) = (587584.032, 591608.337, 595143.857), stdev = 1681.878
  CI (99.9%): [590484.653, 592732.022] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_newWithoutAll  thrpt   30  591608.337 ± 1123.684  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 522306.945 ops/s
# Warmup Iteration   2: 878527.485 ops/s
# Warmup Iteration   3: 1023088.099 ops/s
# Warmup Iteration   4: 1029906.770 ops/s
# Warmup Iteration   5: 1027996.487 ops/s
# Warmup Iteration   6: 843419.028 ops/s
# Warmup Iteration   7: 1029435.409 ops/s
# Warmup Iteration   8: 1029722.722 ops/s
# Warmup Iteration   9: 1031733.679 ops/s
# Warmup Iteration  10: 1030300.784 ops/s
# Warmup Iteration  11: 1029766.326 ops/s
# Warmup Iteration  12: 1030357.456 ops/s
# Warmup Iteration  13: 1032869.314 ops/s
# Warmup Iteration  14: 1026365.134 ops/s
# Warmup Iteration  15: 1030688.667 ops/s
# Warmup Iteration  16: 1030830.967 ops/s
# Warmup Iteration  17: 1029103.760 ops/s
# Warmup Iteration  18: 1031059.545 ops/s
# Warmup Iteration  19: 1027308.071 ops/s
# Warmup Iteration  20: 1027574.952 ops/s
# Warmup Iteration  21: 1030043.511 ops/s
# Warmup Iteration  22: 1031191.558 ops/s
# Warmup Iteration  23: 1027763.023 ops/s
# Warmup Iteration  24: 1028796.948 ops/s
# Warmup Iteration  25: 1028631.882 ops/s
# Warmup Iteration  26: 1028728.585 ops/s
# Warmup Iteration  27: 1030169.649 ops/s
# Warmup Iteration  28: 1030679.138 ops/s
# Warmup Iteration  29: 1031447.713 ops/s
# Warmup Iteration  30: 1029171.346 ops/s
Iteration   1: 1030850.184 ops/s
Iteration   2: 1030991.932 ops/s
Iteration   3: 1026858.744 ops/s
Iteration   4: 1031732.103 ops/s
Iteration   5: 1027999.625 ops/s
Iteration   6: 1032666.711 ops/s
Iteration   7: 1027951.989 ops/s
Iteration   8: 1030556.083 ops/s
Iteration   9: 1031311.371 ops/s
Iteration  10: 1030013.688 ops/s
Iteration  11: 1029100.939 ops/s
Iteration  12: 1027957.396 ops/s
Iteration  13: 1030985.178 ops/s
Iteration  14: 1029966.929 ops/s
Iteration  15: 1032476.530 ops/s
Iteration  16: 1031453.175 ops/s
Iteration  17: 1031749.394 ops/s
Iteration  18: 1033814.311 ops/s
Iteration  19: 1032283.924 ops/s
Iteration  20: 1028867.839 ops/s
Iteration  21: 1029939.798 ops/s
Iteration  22: 1028409.762 ops/s
Iteration  23: 1031518.828 ops/s
Iteration  24: 1027197.176 ops/s
Iteration  25: 1031233.069 ops/s
Iteration  26: 1032927.838 ops/s
Iteration  27: 1029968.432 ops/s
Iteration  28: 1032590.238 ops/s
Iteration  29: 1028468.973 ops/s
Iteration  30: 1030949.410 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_noneSatisfy":
  1030426.386 ±(99.9%) 1225.078 ops/s [Average]
  (min, avg, max) = (1026858.744, 1030426.386, 1033814.311), stdev = 1833.639
  CI (99.9%): [1029201.308, 1031651.464] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_noneSatisfy  thrpt   30  1030426.386 ± 1225.078  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_noneSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_noneSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1162124.210 ops/s
# Warmup Iteration   2: 2151637.962 ops/s
# Warmup Iteration   3: 2389734.056 ops/s
# Warmup Iteration   4: 2404942.065 ops/s
# Warmup Iteration   5: 2192584.011 ops/s
# Warmup Iteration   6: 2182470.243 ops/s
# Warmup Iteration   7: 2399467.684 ops/s
# Warmup Iteration   8: 2409975.463 ops/s
# Warmup Iteration   9: 2409196.511 ops/s
# Warmup Iteration  10: 2405536.331 ops/s
# Warmup Iteration  11: 2404129.085 ops/s
# Warmup Iteration  12: 2408810.857 ops/s
# Warmup Iteration  13: 2406566.346 ops/s
# Warmup Iteration  14: 2411976.123 ops/s
# Warmup Iteration  15: 2403750.970 ops/s
# Warmup Iteration  16: 2408311.454 ops/s
# Warmup Iteration  17: 2402319.126 ops/s
# Warmup Iteration  18: 2409631.515 ops/s
# Warmup Iteration  19: 2404460.245 ops/s
# Warmup Iteration  20: 2403533.290 ops/s
# Warmup Iteration  21: 2407605.367 ops/s
# Warmup Iteration  22: 2407282.110 ops/s
# Warmup Iteration  23: 2404671.016 ops/s
# Warmup Iteration  24: 2401846.558 ops/s
# Warmup Iteration  25: 2406036.183 ops/s
# Warmup Iteration  26: 2408426.597 ops/s
# Warmup Iteration  27: 2400197.613 ops/s
# Warmup Iteration  28: 2409504.099 ops/s
# Warmup Iteration  29: 2404276.529 ops/s
# Warmup Iteration  30: 2405276.479 ops/s
Iteration   1: 2405430.146 ops/s
Iteration   2: 2400708.615 ops/s
Iteration   3: 2405460.619 ops/s
Iteration   4: 2403412.734 ops/s
Iteration   5: 2411685.944 ops/s
Iteration   6: 2405457.365 ops/s
Iteration   7: 2403506.008 ops/s
Iteration   8: 2408140.890 ops/s
Iteration   9: 2405241.847 ops/s
Iteration  10: 2410680.172 ops/s
Iteration  11: 2403283.163 ops/s
Iteration  12: 2399755.132 ops/s
Iteration  13: 2407477.697 ops/s
Iteration  14: 2411558.077 ops/s
Iteration  15: 2400577.592 ops/s
Iteration  16: 2403555.547 ops/s
Iteration  17: 2409494.690 ops/s
Iteration  18: 2405252.199 ops/s
Iteration  19: 2407575.745 ops/s
Iteration  20: 2400450.351 ops/s
Iteration  21: 2407416.009 ops/s
Iteration  22: 2405568.536 ops/s
Iteration  23: 2400455.564 ops/s
Iteration  24: 2410384.072 ops/s
Iteration  25: 2404734.562 ops/s
Iteration  26: 2410695.648 ops/s
Iteration  27: 2404446.552 ops/s
Iteration  28: 2404872.264 ops/s
Iteration  29: 2408936.092 ops/s
Iteration  30: 2395301.542 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_noneSatisfyWith":
  2405383.846 ±(99.9%) 2641.393 ops/s [Average]
  (min, avg, max) = (2395301.542, 2405383.846, 2411685.944), stdev = 3953.513
  CI (99.9%): [2402742.453, 2408025.239] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_noneSatisfyWith  thrpt   30  2405383.846 ± 2641.393  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_noneSatisfyWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_noneSatisfyWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1613089.518 ops/s
# Warmup Iteration   2: 2770129.545 ops/s
# Warmup Iteration   3: 3138905.703 ops/s
# Warmup Iteration   4: 3142273.083 ops/s
# Warmup Iteration   5: 3165550.685 ops/s
# Warmup Iteration   6: 2604308.672 ops/s
# Warmup Iteration   7: 3170677.909 ops/s
# Warmup Iteration   8: 3168177.527 ops/s
# Warmup Iteration   9: 3158789.533 ops/s
# Warmup Iteration  10: 3155412.354 ops/s
# Warmup Iteration  11: 3147349.978 ops/s
# Warmup Iteration  12: 3158456.319 ops/s
# Warmup Iteration  13: 3160551.508 ops/s
# Warmup Iteration  14: 3164050.596 ops/s
# Warmup Iteration  15: 3163564.172 ops/s
# Warmup Iteration  16: 3161084.724 ops/s
# Warmup Iteration  17: 3152823.227 ops/s
# Warmup Iteration  18: 3142611.017 ops/s
# Warmup Iteration  19: 3151517.367 ops/s
# Warmup Iteration  20: 3142346.323 ops/s
# Warmup Iteration  21: 3150040.592 ops/s
# Warmup Iteration  22: 3150356.697 ops/s
# Warmup Iteration  23: 3148456.645 ops/s
# Warmup Iteration  24: 3156054.537 ops/s
# Warmup Iteration  25: 3163309.891 ops/s
# Warmup Iteration  26: 3152374.091 ops/s
# Warmup Iteration  27: 3149900.330 ops/s
# Warmup Iteration  28: 3158027.703 ops/s
# Warmup Iteration  29: 3147928.583 ops/s
# Warmup Iteration  30: 3154451.171 ops/s
Iteration   1: 3174069.587 ops/s
Iteration   2: 3155838.611 ops/s
Iteration   3: 3170608.307 ops/s
Iteration   4: 3152383.877 ops/s
Iteration   5: 3174620.856 ops/s
Iteration   6: 3149467.563 ops/s
Iteration   7: 3163917.153 ops/s
Iteration   8: 3165929.927 ops/s
Iteration   9: 3149702.260 ops/s
Iteration  10: 3165900.196 ops/s
Iteration  11: 3150203.137 ops/s
Iteration  12: 3171819.339 ops/s
Iteration  13: 3151800.717 ops/s
Iteration  14: 3173050.982 ops/s
Iteration  15: 3146924.321 ops/s
Iteration  16: 3156864.764 ops/s
Iteration  17: 3167863.706 ops/s
Iteration  18: 3167004.471 ops/s
Iteration  19: 3154831.745 ops/s
Iteration  20: 3140056.968 ops/s
Iteration  21: 3154981.677 ops/s
Iteration  22: 3123493.836 ops/s
Iteration  23: 3144973.533 ops/s
Iteration  24: 3148311.056 ops/s
Iteration  25: 3170365.158 ops/s
Iteration  26: 3162839.889 ops/s
Iteration  27: 3157865.677 ops/s
Iteration  28: 3158302.543 ops/s
Iteration  29: 3161364.378 ops/s
Iteration  30: 3158603.134 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_noneSatisfyWithOccurrences":
  3158131.979 ±(99.9%) 7681.669 ops/s [Average]
  (min, avg, max) = (3123493.836, 3158131.979, 3174620.856), stdev = 11497.561
  CI (99.9%): [3150450.310, 3165813.648] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_noneSatisfyWithOccurrences  thrpt   30  3158131.979 ± 7681.669  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_notEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_notEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2804351.825 ops/s
# Warmup Iteration   2: 6212718.001 ops/s
# Warmup Iteration   3: 5230714.758 ops/s
# Warmup Iteration   4: 6254839.138 ops/s
# Warmup Iteration   5: 6250622.222 ops/s
# Warmup Iteration   6: 6236495.659 ops/s
# Warmup Iteration   7: 6276234.087 ops/s
# Warmup Iteration   8: 6257400.356 ops/s
# Warmup Iteration   9: 6256877.743 ops/s
# Warmup Iteration  10: 6262324.824 ops/s
# Warmup Iteration  11: 6263603.589 ops/s
# Warmup Iteration  12: 6266112.510 ops/s
# Warmup Iteration  13: 6260711.102 ops/s
# Warmup Iteration  14: 6263475.173 ops/s
# Warmup Iteration  15: 6248663.794 ops/s
# Warmup Iteration  16: 6262779.051 ops/s
# Warmup Iteration  17: 6255926.319 ops/s
# Warmup Iteration  18: 6257527.297 ops/s
# Warmup Iteration  19: 6244948.320 ops/s
# Warmup Iteration  20: 6262951.377 ops/s
# Warmup Iteration  21: 6262892.997 ops/s
# Warmup Iteration  22: 6269035.363 ops/s
# Warmup Iteration  23: 6248258.011 ops/s
# Warmup Iteration  24: 6242591.765 ops/s
# Warmup Iteration  25: 6260666.262 ops/s
# Warmup Iteration  26: 6246673.889 ops/s
# Warmup Iteration  27: 6262680.641 ops/s
# Warmup Iteration  28: 6261340.865 ops/s
# Warmup Iteration  29: 6268744.296 ops/s
# Warmup Iteration  30: 6266417.079 ops/s
Iteration   1: 6272908.248 ops/s
Iteration   2: 6245325.083 ops/s
Iteration   3: 6278289.864 ops/s
Iteration   4: 6242788.910 ops/s
Iteration   5: 6278966.847 ops/s
Iteration   6: 6263549.815 ops/s
Iteration   7: 6253528.039 ops/s
Iteration   8: 6271017.900 ops/s
Iteration   9: 6256347.220 ops/s
Iteration  10: 6267396.295 ops/s
Iteration  11: 6274478.588 ops/s
Iteration  12: 6254115.232 ops/s
Iteration  13: 6265174.560 ops/s
Iteration  14: 6275640.494 ops/s
Iteration  15: 6265460.283 ops/s
Iteration  16: 6272263.912 ops/s
Iteration  17: 6244909.922 ops/s
Iteration  18: 6259297.285 ops/s
Iteration  19: 6249102.283 ops/s
Iteration  20: 6231290.529 ops/s
Iteration  21: 6284618.506 ops/s
Iteration  22: 6252470.607 ops/s
Iteration  23: 6252650.588 ops/s
Iteration  24: 6246411.487 ops/s
Iteration  25: 6251370.894 ops/s
Iteration  26: 6266913.696 ops/s
Iteration  27: 6255318.699 ops/s
Iteration  28: 6244062.911 ops/s
Iteration  29: 6251858.040 ops/s
Iteration  30: 6267426.497 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_notEmpty":
  6259831.774 ±(99.9%) 8687.816 ops/s [Average]
  (min, avg, max) = (6231290.529, 6259831.774, 6284618.506), stdev = 13003.515
  CI (99.9%): [6251143.958, 6268519.591] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_notEmpty  thrpt   30  6259831.774 ± 8687.816  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_partition$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_partition

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 135023.785 ops/s
# Warmup Iteration   2: 229598.845 ops/s
# Warmup Iteration   3: 275064.289 ops/s
# Warmup Iteration   4: 277557.729 ops/s
# Warmup Iteration   5: 276444.624 ops/s
# Warmup Iteration   6: 238745.743 ops/s
# Warmup Iteration   7: 267080.181 ops/s
# Warmup Iteration   8: 276718.736 ops/s
# Warmup Iteration   9: 277002.940 ops/s
# Warmup Iteration  10: 276826.599 ops/s
# Warmup Iteration  11: 277571.201 ops/s
# Warmup Iteration  12: 276910.706 ops/s
# Warmup Iteration  13: 276894.732 ops/s
# Warmup Iteration  14: 276845.949 ops/s
# Warmup Iteration  15: 277139.915 ops/s
# Warmup Iteration  16: 276981.160 ops/s
# Warmup Iteration  17: 277250.056 ops/s
# Warmup Iteration  18: 276723.101 ops/s
# Warmup Iteration  19: 277160.668 ops/s
# Warmup Iteration  20: 277430.035 ops/s
# Warmup Iteration  21: 277125.725 ops/s
# Warmup Iteration  22: 277384.118 ops/s
# Warmup Iteration  23: 277287.233 ops/s
# Warmup Iteration  24: 277362.388 ops/s
# Warmup Iteration  25: 277119.440 ops/s
# Warmup Iteration  26: 277181.860 ops/s
# Warmup Iteration  27: 277411.115 ops/s
# Warmup Iteration  28: 277521.643 ops/s
# Warmup Iteration  29: 277315.168 ops/s
# Warmup Iteration  30: 277639.206 ops/s
Iteration   1: 277719.359 ops/s
Iteration   2: 277717.827 ops/s
Iteration   3: 276648.500 ops/s
Iteration   4: 277623.103 ops/s
Iteration   5: 277328.146 ops/s
Iteration   6: 276518.299 ops/s
Iteration   7: 277480.282 ops/s
Iteration   8: 277051.243 ops/s
Iteration   9: 277783.361 ops/s
Iteration  10: 276507.552 ops/s
Iteration  11: 277945.446 ops/s
Iteration  12: 277290.685 ops/s
Iteration  13: 277291.470 ops/s
Iteration  14: 277068.004 ops/s
Iteration  15: 277463.734 ops/s
Iteration  16: 277258.687 ops/s
Iteration  17: 277640.258 ops/s
Iteration  18: 276263.845 ops/s
Iteration  19: 278523.518 ops/s
Iteration  20: 276764.102 ops/s
Iteration  21: 278118.095 ops/s
Iteration  22: 277270.798 ops/s
Iteration  23: 277426.306 ops/s
Iteration  24: 277633.911 ops/s
Iteration  25: 277847.656 ops/s
Iteration  26: 277666.004 ops/s
Iteration  27: 278147.606 ops/s
Iteration  28: 277447.042 ops/s
Iteration  29: 277628.655 ops/s
Iteration  30: 277968.436 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_partition":
  277434.731 ±(99.9%) 348.745 ops/s [Average]
  (min, avg, max) = (276263.845, 277434.731, 278523.518), stdev = 521.985
  CI (99.9%): [277085.986, 277783.476] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score     Error  Units
ImmutableHashBagTest._Benchmark.benchmark_partition  thrpt   30  277434.731 ± 348.745  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_partitionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_partitionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 129359.281 ops/s
# Warmup Iteration   2: 218108.760 ops/s
# Warmup Iteration   3: 264024.673 ops/s
# Warmup Iteration   4: 266194.669 ops/s
# Warmup Iteration   5: 265481.916 ops/s
# Warmup Iteration   6: 239193.518 ops/s
# Warmup Iteration   7: 244340.664 ops/s
# Warmup Iteration   8: 265497.897 ops/s
# Warmup Iteration   9: 265629.091 ops/s
# Warmup Iteration  10: 265775.349 ops/s
# Warmup Iteration  11: 266054.263 ops/s
# Warmup Iteration  12: 265726.315 ops/s
# Warmup Iteration  13: 265695.954 ops/s
# Warmup Iteration  14: 265438.961 ops/s
# Warmup Iteration  15: 265735.002 ops/s
# Warmup Iteration  16: 265827.082 ops/s
# Warmup Iteration  17: 266130.683 ops/s
# Warmup Iteration  18: 265859.976 ops/s
# Warmup Iteration  19: 265454.353 ops/s
# Warmup Iteration  20: 266046.742 ops/s
# Warmup Iteration  21: 265983.308 ops/s
# Warmup Iteration  22: 265687.071 ops/s
# Warmup Iteration  23: 266062.989 ops/s
# Warmup Iteration  24: 265512.159 ops/s
# Warmup Iteration  25: 266078.636 ops/s
# Warmup Iteration  26: 265938.217 ops/s
# Warmup Iteration  27: 265795.878 ops/s
# Warmup Iteration  28: 266158.306 ops/s
# Warmup Iteration  29: 266104.820 ops/s
# Warmup Iteration  30: 265971.221 ops/s
Iteration   1: 266505.660 ops/s
Iteration   2: 265734.413 ops/s
Iteration   3: 266158.151 ops/s
Iteration   4: 265528.842 ops/s
Iteration   5: 266339.009 ops/s
Iteration   6: 265291.171 ops/s
Iteration   7: 266288.708 ops/s
Iteration   8: 265882.497 ops/s
Iteration   9: 265146.346 ops/s
Iteration  10: 265974.554 ops/s
Iteration  11: 265766.816 ops/s
Iteration  12: 265677.757 ops/s
Iteration  13: 266159.837 ops/s
Iteration  14: 266140.054 ops/s
Iteration  15: 265486.440 ops/s
Iteration  16: 266550.543 ops/s
Iteration  17: 265872.791 ops/s
Iteration  18: 265838.362 ops/s
Iteration  19: 265545.638 ops/s
Iteration  20: 265983.400 ops/s
Iteration  21: 266085.951 ops/s
Iteration  22: 266084.456 ops/s
Iteration  23: 265928.598 ops/s
Iteration  24: 265967.837 ops/s
Iteration  25: 265646.477 ops/s
Iteration  26: 265664.206 ops/s
Iteration  27: 266074.980 ops/s
Iteration  28: 265976.945 ops/s
Iteration  29: 265330.199 ops/s
Iteration  30: 266083.421 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_partitionWith":
  265890.469 ±(99.9%) 228.651 ops/s [Average]
  (min, avg, max) = (265146.346, 265890.469, 266550.543), stdev = 342.234
  CI (99.9%): [265661.818, 266119.120] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score     Error  Units
ImmutableHashBagTest._Benchmark.benchmark_partitionWith  thrpt   30  265890.469 ± 228.651  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_reduceOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_reduceOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 349384.440 ops/s
# Warmup Iteration   2: 604139.487 ops/s
# Warmup Iteration   3: 667937.482 ops/s
# Warmup Iteration   4: 670685.826 ops/s
# Warmup Iteration   5: 672123.369 ops/s
# Warmup Iteration   6: 560781.661 ops/s
# Warmup Iteration   7: 671616.275 ops/s
# Warmup Iteration   8: 671698.498 ops/s
# Warmup Iteration   9: 672166.864 ops/s
# Warmup Iteration  10: 671079.719 ops/s
# Warmup Iteration  11: 672653.985 ops/s
# Warmup Iteration  12: 671736.155 ops/s
# Warmup Iteration  13: 671954.921 ops/s
# Warmup Iteration  14: 672840.018 ops/s
# Warmup Iteration  15: 672328.398 ops/s
# Warmup Iteration  16: 672480.978 ops/s
# Warmup Iteration  17: 672498.773 ops/s
# Warmup Iteration  18: 672371.876 ops/s
# Warmup Iteration  19: 672361.177 ops/s
# Warmup Iteration  20: 673980.981 ops/s
# Warmup Iteration  21: 672352.107 ops/s
# Warmup Iteration  22: 673179.491 ops/s
# Warmup Iteration  23: 673099.976 ops/s
# Warmup Iteration  24: 671590.573 ops/s
# Warmup Iteration  25: 670973.051 ops/s
# Warmup Iteration  26: 672385.496 ops/s
# Warmup Iteration  27: 671511.123 ops/s
# Warmup Iteration  28: 672424.869 ops/s
# Warmup Iteration  29: 672566.475 ops/s
# Warmup Iteration  30: 670697.977 ops/s
Iteration   1: 672168.581 ops/s
Iteration   2: 672544.139 ops/s
Iteration   3: 670113.602 ops/s
Iteration   4: 670185.159 ops/s
Iteration   5: 672906.833 ops/s
Iteration   6: 672218.691 ops/s
Iteration   7: 671216.314 ops/s
Iteration   8: 671874.236 ops/s
Iteration   9: 673799.804 ops/s
Iteration  10: 672798.530 ops/s
Iteration  11: 672045.559 ops/s
Iteration  12: 671211.977 ops/s
Iteration  13: 671541.875 ops/s
Iteration  14: 673710.301 ops/s
Iteration  15: 670655.296 ops/s
Iteration  16: 672703.912 ops/s
Iteration  17: 671212.320 ops/s
Iteration  18: 671138.925 ops/s
Iteration  19: 672094.168 ops/s
Iteration  20: 673449.630 ops/s
Iteration  21: 672884.653 ops/s
Iteration  22: 671934.370 ops/s
Iteration  23: 672867.946 ops/s
Iteration  24: 672163.831 ops/s
Iteration  25: 668685.608 ops/s
Iteration  26: 672835.571 ops/s
Iteration  27: 670270.849 ops/s
Iteration  28: 674244.661 ops/s
Iteration  29: 670672.879 ops/s
Iteration  30: 671003.544 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_reduceOptional":
  671905.125 ±(99.9%) 840.087 ops/s [Average]
  (min, avg, max) = (668685.608, 671905.125, 674244.661), stdev = 1257.403
  CI (99.9%): [671065.038, 672745.212] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score     Error  Units
ImmutableHashBagTest._Benchmark.benchmark_reduceOptional  thrpt   30  671905.125 ± 840.087  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 237461.768 ops/s
# Warmup Iteration   2: 438370.090 ops/s
# Warmup Iteration   3: 514235.971 ops/s
# Warmup Iteration   4: 516611.940 ops/s
# Warmup Iteration   5: 514810.943 ops/s
# Warmup Iteration   6: 424985.808 ops/s
# Warmup Iteration   7: 517446.986 ops/s
# Warmup Iteration   8: 516788.825 ops/s
# Warmup Iteration   9: 516228.466 ops/s
# Warmup Iteration  10: 515247.615 ops/s
# Warmup Iteration  11: 516049.392 ops/s
# Warmup Iteration  12: 515342.761 ops/s
# Warmup Iteration  13: 515988.973 ops/s
# Warmup Iteration  14: 516922.816 ops/s
# Warmup Iteration  15: 516989.628 ops/s
# Warmup Iteration  16: 515445.576 ops/s
# Warmup Iteration  17: 516382.609 ops/s
# Warmup Iteration  18: 514534.089 ops/s
# Warmup Iteration  19: 517435.775 ops/s
# Warmup Iteration  20: 515956.645 ops/s
# Warmup Iteration  21: 516645.218 ops/s
# Warmup Iteration  22: 517579.506 ops/s
# Warmup Iteration  23: 515336.131 ops/s
# Warmup Iteration  24: 516250.719 ops/s
# Warmup Iteration  25: 517613.586 ops/s
# Warmup Iteration  26: 517875.148 ops/s
# Warmup Iteration  27: 516780.013 ops/s
# Warmup Iteration  28: 516595.501 ops/s
# Warmup Iteration  29: 516321.254 ops/s
# Warmup Iteration  30: 515815.510 ops/s
Iteration   1: 516631.323 ops/s
Iteration   2: 515739.002 ops/s
Iteration   3: 516361.131 ops/s
Iteration   4: 515386.886 ops/s
Iteration   5: 517355.645 ops/s
Iteration   6: 516586.267 ops/s
Iteration   7: 517238.129 ops/s
Iteration   8: 515961.203 ops/s
Iteration   9: 516100.268 ops/s
Iteration  10: 516938.767 ops/s
Iteration  11: 516808.618 ops/s
Iteration  12: 517596.867 ops/s
Iteration  13: 515884.883 ops/s
Iteration  14: 515098.512 ops/s
Iteration  15: 516651.001 ops/s
Iteration  16: 516276.107 ops/s
Iteration  17: 518173.946 ops/s
Iteration  18: 514434.677 ops/s
Iteration  19: 516609.521 ops/s
Iteration  20: 514041.847 ops/s
Iteration  21: 513734.825 ops/s
Iteration  22: 516520.639 ops/s
Iteration  23: 515167.800 ops/s
Iteration  24: 517309.497 ops/s
Iteration  25: 518818.761 ops/s
Iteration  26: 517869.992 ops/s
Iteration  27: 516609.358 ops/s
Iteration  28: 516973.122 ops/s
Iteration  29: 519622.327 ops/s
Iteration  30: 516641.761 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_reject":
  516504.756 ±(99.9%) 859.121 ops/s [Average]
  (min, avg, max) = (513734.825, 516504.756, 519622.327), stdev = 1285.892
  CI (99.9%): [515645.635, 517363.877] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score     Error  Units
ImmutableHashBagTest._Benchmark.benchmark_reject  thrpt   30  516504.756 ± 859.121  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_rejectToTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_rejectToTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 756154.263 ops/s
# Warmup Iteration   2: 1207062.066 ops/s
# Warmup Iteration   3: 1435636.895 ops/s
# Warmup Iteration   4: 1445082.673 ops/s
# Warmup Iteration   5: 1445414.989 ops/s
# Warmup Iteration   6: 1408931.533 ops/s
# Warmup Iteration   7: 1229199.612 ops/s
# Warmup Iteration   8: 1443447.837 ops/s
# Warmup Iteration   9: 1446171.418 ops/s
# Warmup Iteration  10: 1446828.864 ops/s
# Warmup Iteration  11: 1448495.291 ops/s
# Warmup Iteration  12: 1446259.842 ops/s
# Warmup Iteration  13: 1447383.981 ops/s
# Warmup Iteration  14: 1446584.730 ops/s
# Warmup Iteration  15: 1442930.194 ops/s
# Warmup Iteration  16: 1445449.060 ops/s
# Warmup Iteration  17: 1445098.586 ops/s
# Warmup Iteration  18: 1446801.000 ops/s
# Warmup Iteration  19: 1445479.523 ops/s
# Warmup Iteration  20: 1443510.248 ops/s
# Warmup Iteration  21: 1445631.826 ops/s
# Warmup Iteration  22: 1447561.657 ops/s
# Warmup Iteration  23: 1445495.597 ops/s
# Warmup Iteration  24: 1444477.678 ops/s
# Warmup Iteration  25: 1442974.761 ops/s
# Warmup Iteration  26: 1446313.351 ops/s
# Warmup Iteration  27: 1447115.688 ops/s
# Warmup Iteration  28: 1443624.969 ops/s
# Warmup Iteration  29: 1444998.927 ops/s
# Warmup Iteration  30: 1443891.470 ops/s
Iteration   1: 1446692.567 ops/s
Iteration   2: 1445328.431 ops/s
Iteration   3: 1444606.858 ops/s
Iteration   4: 1445379.909 ops/s
Iteration   5: 1447269.572 ops/s
Iteration   6: 1443805.379 ops/s
Iteration   7: 1447022.566 ops/s
Iteration   8: 1445087.733 ops/s
Iteration   9: 1447994.394 ops/s
Iteration  10: 1441905.410 ops/s
Iteration  11: 1448757.225 ops/s
Iteration  12: 1440272.175 ops/s
Iteration  13: 1445109.252 ops/s
Iteration  14: 1446976.533 ops/s
Iteration  15: 1447864.916 ops/s
Iteration  16: 1447088.867 ops/s
Iteration  17: 1445643.726 ops/s
Iteration  18: 1443930.287 ops/s
Iteration  19: 1448020.322 ops/s
Iteration  20: 1444688.047 ops/s
Iteration  21: 1443797.154 ops/s
Iteration  22: 1445382.332 ops/s
Iteration  23: 1442509.926 ops/s
Iteration  24: 1447926.033 ops/s
Iteration  25: 1442662.745 ops/s
Iteration  26: 1449542.374 ops/s
Iteration  27: 1447222.203 ops/s
Iteration  28: 1444428.464 ops/s
Iteration  29: 1444231.237 ops/s
Iteration  30: 1445667.105 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_rejectToTarget":
  1445560.458 ±(99.9%) 1444.479 ops/s [Average]
  (min, avg, max) = (1440272.175, 1445560.458, 1449542.374), stdev = 2162.029
  CI (99.9%): [1444115.979, 1447004.937] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_rejectToTarget  thrpt   30  1445560.458 ± 1444.479  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_rejectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_rejectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 313622.526 ops/s
# Warmup Iteration   2: 560343.399 ops/s
# Warmup Iteration   3: 645914.241 ops/s
# Warmup Iteration   4: 649801.853 ops/s
# Warmup Iteration   5: 650280.648 ops/s
# Warmup Iteration   6: 534922.178 ops/s
# Warmup Iteration   7: 650732.684 ops/s
# Warmup Iteration   8: 648419.632 ops/s
# Warmup Iteration   9: 650272.940 ops/s
# Warmup Iteration  10: 649736.229 ops/s
# Warmup Iteration  11: 648973.509 ops/s
# Warmup Iteration  12: 650340.334 ops/s
# Warmup Iteration  13: 650542.116 ops/s
# Warmup Iteration  14: 650613.850 ops/s
# Warmup Iteration  15: 649717.997 ops/s
# Warmup Iteration  16: 650751.733 ops/s
# Warmup Iteration  17: 650947.275 ops/s
# Warmup Iteration  18: 650430.523 ops/s
# Warmup Iteration  19: 651469.138 ops/s
# Warmup Iteration  20: 649980.874 ops/s
# Warmup Iteration  21: 650258.752 ops/s
# Warmup Iteration  22: 648982.990 ops/s
# Warmup Iteration  23: 651548.907 ops/s
# Warmup Iteration  24: 652675.550 ops/s
# Warmup Iteration  25: 650598.875 ops/s
# Warmup Iteration  26: 652728.936 ops/s
# Warmup Iteration  27: 649685.831 ops/s
# Warmup Iteration  28: 651272.939 ops/s
# Warmup Iteration  29: 651036.569 ops/s
# Warmup Iteration  30: 650723.751 ops/s
Iteration   1: 650295.340 ops/s
Iteration   2: 652460.542 ops/s
Iteration   3: 650257.114 ops/s
Iteration   4: 648533.614 ops/s
Iteration   5: 652239.412 ops/s
Iteration   6: 651210.980 ops/s
Iteration   7: 651613.407 ops/s
Iteration   8: 650387.454 ops/s
Iteration   9: 651514.774 ops/s
Iteration  10: 649596.386 ops/s
Iteration  11: 649132.156 ops/s
Iteration  12: 649579.881 ops/s
Iteration  13: 651599.575 ops/s
Iteration  14: 651581.451 ops/s
Iteration  15: 648685.204 ops/s
Iteration  16: 651946.096 ops/s
Iteration  17: 650499.551 ops/s
Iteration  18: 651178.016 ops/s
Iteration  19: 651879.012 ops/s
Iteration  20: 648299.688 ops/s
Iteration  21: 652078.524 ops/s
Iteration  22: 650746.648 ops/s
Iteration  23: 652537.316 ops/s
Iteration  24: 650990.279 ops/s
Iteration  25: 650560.271 ops/s
Iteration  26: 649084.371 ops/s
Iteration  27: 649881.636 ops/s
Iteration  28: 651226.218 ops/s
Iteration  29: 651494.427 ops/s
Iteration  30: 650957.593 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_rejectWith":
  650734.898 ±(99.9%) 799.511 ops/s [Average]
  (min, avg, max) = (648299.688, 650734.898, 652537.316), stdev = 1196.670
  CI (99.9%): [649935.387, 651534.409] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score     Error  Units
ImmutableHashBagTest._Benchmark.benchmark_rejectWith  thrpt   30  650734.898 ± 799.511  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_rejectWithToTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_rejectWithToTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 724660.933 ops/s
# Warmup Iteration   2: 1171905.240 ops/s
# Warmup Iteration   3: 1422720.575 ops/s
# Warmup Iteration   4: 1421507.939 ops/s
# Warmup Iteration   5: 1426898.549 ops/s
# Warmup Iteration   6: 1371969.185 ops/s
# Warmup Iteration   7: 1229418.367 ops/s
# Warmup Iteration   8: 1429846.680 ops/s
# Warmup Iteration   9: 1432466.049 ops/s
# Warmup Iteration  10: 1430722.783 ops/s
# Warmup Iteration  11: 1428284.768 ops/s
# Warmup Iteration  12: 1432248.180 ops/s
# Warmup Iteration  13: 1429667.440 ops/s
# Warmup Iteration  14: 1431862.651 ops/s
# Warmup Iteration  15: 1428751.786 ops/s
# Warmup Iteration  16: 1430131.524 ops/s
# Warmup Iteration  17: 1432447.323 ops/s
# Warmup Iteration  18: 1436151.919 ops/s
# Warmup Iteration  19: 1433458.819 ops/s
# Warmup Iteration  20: 1433815.028 ops/s
# Warmup Iteration  21: 1434447.150 ops/s
# Warmup Iteration  22: 1433900.323 ops/s
# Warmup Iteration  23: 1429775.495 ops/s
# Warmup Iteration  24: 1433307.924 ops/s
# Warmup Iteration  25: 1433781.998 ops/s
# Warmup Iteration  26: 1435233.507 ops/s
# Warmup Iteration  27: 1429915.884 ops/s
# Warmup Iteration  28: 1435309.449 ops/s
# Warmup Iteration  29: 1433657.059 ops/s
# Warmup Iteration  30: 1431687.359 ops/s
Iteration   1: 1436165.975 ops/s
Iteration   2: 1436803.820 ops/s
Iteration   3: 1428227.182 ops/s
Iteration   4: 1432962.419 ops/s
Iteration   5: 1428696.140 ops/s
Iteration   6: 1432685.530 ops/s
Iteration   7: 1421220.202 ops/s
Iteration   8: 1439494.843 ops/s
Iteration   9: 1429988.481 ops/s
Iteration  10: 1434287.168 ops/s
Iteration  11: 1428515.697 ops/s
Iteration  12: 1434903.739 ops/s
Iteration  13: 1434832.238 ops/s
Iteration  14: 1439942.016 ops/s
Iteration  15: 1442417.752 ops/s
Iteration  16: 1430222.114 ops/s
Iteration  17: 1433530.620 ops/s
Iteration  18: 1428438.766 ops/s
Iteration  19: 1434655.054 ops/s
Iteration  20: 1442136.088 ops/s
Iteration  21: 1436890.562 ops/s
Iteration  22: 1434053.298 ops/s
Iteration  23: 1426335.791 ops/s
Iteration  24: 1432559.720 ops/s
Iteration  25: 1427673.392 ops/s
Iteration  26: 1441196.101 ops/s
Iteration  27: 1425632.179 ops/s
Iteration  28: 1435873.852 ops/s
Iteration  29: 1432138.778 ops/s
Iteration  30: 1437993.885 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_rejectWithToTarget":
  1433349.113 ±(99.9%) 3459.453 ops/s [Average]
  (min, avg, max) = (1421220.202, 1433349.113, 1442417.752), stdev = 5177.947
  CI (99.9%): [1429889.660, 1436808.567] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_rejectWithToTarget  thrpt   30  1433349.113 ± 3459.453  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_rejectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_rejectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 625177.932 ops/s
# Warmup Iteration   2: 1330635.722 ops/s
# Warmup Iteration   3: 1390141.772 ops/s
# Warmup Iteration   4: 1401528.888 ops/s
# Warmup Iteration   5: 1158004.053 ops/s
# Warmup Iteration   6: 1399633.741 ops/s
# Warmup Iteration   7: 1400169.194 ops/s
# Warmup Iteration   8: 1402438.391 ops/s
# Warmup Iteration   9: 1401502.843 ops/s
# Warmup Iteration  10: 1402141.798 ops/s
# Warmup Iteration  11: 1404172.461 ops/s
# Warmup Iteration  12: 1400084.368 ops/s
# Warmup Iteration  13: 1401066.101 ops/s
# Warmup Iteration  14: 1400625.797 ops/s
# Warmup Iteration  15: 1401195.105 ops/s
# Warmup Iteration  16: 1400286.717 ops/s
# Warmup Iteration  17: 1400952.078 ops/s
# Warmup Iteration  18: 1401937.145 ops/s
# Warmup Iteration  19: 1402650.736 ops/s
# Warmup Iteration  20: 1403722.387 ops/s
# Warmup Iteration  21: 1399977.397 ops/s
# Warmup Iteration  22: 1400734.405 ops/s
# Warmup Iteration  23: 1402574.049 ops/s
# Warmup Iteration  24: 1403516.855 ops/s
# Warmup Iteration  25: 1402308.194 ops/s
# Warmup Iteration  26: 1397557.013 ops/s
# Warmup Iteration  27: 1401128.712 ops/s
# Warmup Iteration  28: 1403084.556 ops/s
# Warmup Iteration  29: 1401110.694 ops/s
# Warmup Iteration  30: 1403048.098 ops/s
Iteration   1: 1403803.170 ops/s
Iteration   2: 1399145.302 ops/s
Iteration   3: 1398232.199 ops/s
Iteration   4: 1405576.846 ops/s
Iteration   5: 1405654.138 ops/s
Iteration   6: 1399787.288 ops/s
Iteration   7: 1398956.008 ops/s
Iteration   8: 1404019.226 ops/s
Iteration   9: 1401039.472 ops/s
Iteration  10: 1398230.343 ops/s
Iteration  11: 1403367.978 ops/s
Iteration  12: 1404067.282 ops/s
Iteration  13: 1397642.505 ops/s
Iteration  14: 1402766.753 ops/s
Iteration  15: 1403465.025 ops/s
Iteration  16: 1404470.252 ops/s
Iteration  17: 1398980.027 ops/s
Iteration  18: 1399932.739 ops/s
Iteration  19: 1405155.785 ops/s
Iteration  20: 1403232.852 ops/s
Iteration  21: 1401194.075 ops/s
Iteration  22: 1402272.546 ops/s
Iteration  23: 1401874.465 ops/s
Iteration  24: 1401976.309 ops/s
Iteration  25: 1404703.218 ops/s
Iteration  26: 1402769.190 ops/s
Iteration  27: 1403016.605 ops/s
Iteration  28: 1399707.524 ops/s
Iteration  29: 1399583.461 ops/s
Iteration  30: 1398762.938 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_rejectWith_target":
  1401779.517 ±(99.9%) 1635.339 ops/s [Average]
  (min, avg, max) = (1397642.505, 1401779.517, 1405654.138), stdev = 2447.698
  CI (99.9%): [1400144.179, 1403414.856] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_rejectWith_target  thrpt   30  1401779.517 ± 1635.339  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 467410.961 ops/s
# Warmup Iteration   2: 584425.919 ops/s
# Warmup Iteration   3: 728125.873 ops/s
# Warmup Iteration   4: 726507.717 ops/s
# Warmup Iteration   5: 728974.176 ops/s
# Warmup Iteration   6: 728976.416 ops/s
# Warmup Iteration   7: 730138.979 ops/s
# Warmup Iteration   8: 725901.714 ops/s
# Warmup Iteration   9: 610126.709 ops/s
# Warmup Iteration  10: 728169.861 ops/s
# Warmup Iteration  11: 729116.012 ops/s
# Warmup Iteration  12: 729244.705 ops/s
# Warmup Iteration  13: 729242.987 ops/s
# Warmup Iteration  14: 730392.931 ops/s
# Warmup Iteration  15: 730261.828 ops/s
# Warmup Iteration  16: 727729.552 ops/s
# Warmup Iteration  17: 767608.380 ops/s
# Warmup Iteration  18: 767388.086 ops/s
# Warmup Iteration  19: 766060.818 ops/s
# Warmup Iteration  20: 766597.782 ops/s
# Warmup Iteration  21: 766530.413 ops/s
# Warmup Iteration  22: 766120.002 ops/s
# Warmup Iteration  23: 767120.732 ops/s
# Warmup Iteration  24: 766060.576 ops/s
# Warmup Iteration  25: 766785.988 ops/s
# Warmup Iteration  26: 765580.972 ops/s
# Warmup Iteration  27: 767024.692 ops/s
# Warmup Iteration  28: 766553.390 ops/s
# Warmup Iteration  29: 766751.350 ops/s
# Warmup Iteration  30: 767379.794 ops/s
Iteration   1: 766251.350 ops/s
Iteration   2: 765787.378 ops/s
Iteration   3: 768332.055 ops/s
Iteration   4: 768543.205 ops/s
Iteration   5: 766182.633 ops/s
Iteration   6: 767685.911 ops/s
Iteration   7: 768041.815 ops/s
Iteration   8: 767043.786 ops/s
Iteration   9: 768361.213 ops/s
Iteration  10: 767390.707 ops/s
Iteration  11: 769251.805 ops/s
Iteration  12: 765033.506 ops/s
Iteration  13: 764587.985 ops/s
Iteration  14: 770199.261 ops/s
Iteration  15: 766147.539 ops/s
Iteration  16: 768568.694 ops/s
Iteration  17: 766468.299 ops/s
Iteration  18: 765995.315 ops/s
Iteration  19: 766291.569 ops/s
Iteration  20: 765399.606 ops/s
Iteration  21: 765296.827 ops/s
Iteration  22: 767000.889 ops/s
Iteration  23: 767664.758 ops/s
Iteration  24: 761974.176 ops/s
Iteration  25: 767095.652 ops/s
Iteration  26: 765641.980 ops/s
Iteration  27: 768664.234 ops/s
Iteration  28: 768827.830 ops/s
Iteration  29: 765911.632 ops/s
Iteration  30: 768214.177 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_remove":
  766928.526 ±(99.9%) 1123.617 ops/s [Average]
  (min, avg, max) = (761974.176, 766928.526, 770199.261), stdev = 1681.777
  CI (99.9%): [765804.909, 768052.143] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_remove  thrpt   30  766928.526 ± 1123.617  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 455509.483 ops/s
# Warmup Iteration   2: 596421.769 ops/s
# Warmup Iteration   3: 739752.735 ops/s
# Warmup Iteration   4: 736756.626 ops/s
# Warmup Iteration   5: 740238.943 ops/s
# Warmup Iteration   6: 739506.699 ops/s
# Warmup Iteration   7: 739568.018 ops/s
# Warmup Iteration   8: 634676.036 ops/s
# Warmup Iteration   9: 722961.405 ops/s
# Warmup Iteration  10: 740011.466 ops/s
# Warmup Iteration  11: 739814.878 ops/s
# Warmup Iteration  12: 741992.188 ops/s
# Warmup Iteration  13: 740720.080 ops/s
# Warmup Iteration  14: 740088.280 ops/s
# Warmup Iteration  15: 740226.217 ops/s
# Warmup Iteration  16: 739252.355 ops/s
# Warmup Iteration  17: 772814.420 ops/s
# Warmup Iteration  18: 772443.423 ops/s
# Warmup Iteration  19: 770477.369 ops/s
# Warmup Iteration  20: 772786.554 ops/s
# Warmup Iteration  21: 774545.605 ops/s
# Warmup Iteration  22: 773002.081 ops/s
# Warmup Iteration  23: 773147.970 ops/s
# Warmup Iteration  24: 772380.031 ops/s
# Warmup Iteration  25: 774337.853 ops/s
# Warmup Iteration  26: 774334.366 ops/s
# Warmup Iteration  27: 772831.423 ops/s
# Warmup Iteration  28: 773684.578 ops/s
# Warmup Iteration  29: 772757.596 ops/s
# Warmup Iteration  30: 771732.870 ops/s
Iteration   1: 772650.759 ops/s
Iteration   2: 770581.277 ops/s
Iteration   3: 774464.247 ops/s
Iteration   4: 773758.572 ops/s
Iteration   5: 770125.798 ops/s
Iteration   6: 773183.164 ops/s
Iteration   7: 772900.766 ops/s
Iteration   8: 774498.577 ops/s
Iteration   9: 771018.984 ops/s
Iteration  10: 773027.050 ops/s
Iteration  11: 775372.541 ops/s
Iteration  12: 772742.171 ops/s
Iteration  13: 774381.601 ops/s
Iteration  14: 772986.084 ops/s
Iteration  15: 775881.702 ops/s
Iteration  16: 772762.622 ops/s
Iteration  17: 770578.974 ops/s
Iteration  18: 775223.951 ops/s
Iteration  19: 771301.486 ops/s
Iteration  20: 776236.986 ops/s
Iteration  21: 772385.631 ops/s
Iteration  22: 769689.502 ops/s
Iteration  23: 775388.753 ops/s
Iteration  24: 772367.441 ops/s
Iteration  25: 772700.921 ops/s
Iteration  26: 774325.307 ops/s
Iteration  27: 772488.411 ops/s
Iteration  28: 773429.004 ops/s
Iteration  29: 772313.406 ops/s
Iteration  30: 774371.218 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_removeAll":
  773104.564 ±(99.9%) 1144.235 ops/s [Average]
  (min, avg, max) = (769689.502, 773104.564, 776236.986), stdev = 1712.638
  CI (99.9%): [771960.328, 774248.799] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_removeAll  thrpt   30  773104.564 ± 1144.235  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 454207.050 ops/s
# Warmup Iteration   2: 588731.893 ops/s
# Warmup Iteration   3: 731573.819 ops/s
# Warmup Iteration   4: 727093.351 ops/s
# Warmup Iteration   5: 731989.051 ops/s
# Warmup Iteration   6: 728410.151 ops/s
# Warmup Iteration   7: 729833.473 ops/s
# Warmup Iteration   8: 649293.484 ops/s
# Warmup Iteration   9: 694097.818 ops/s
# Warmup Iteration  10: 729925.154 ops/s
# Warmup Iteration  11: 729474.592 ops/s
# Warmup Iteration  12: 731512.254 ops/s
# Warmup Iteration  13: 731297.218 ops/s
# Warmup Iteration  14: 732018.874 ops/s
# Warmup Iteration  15: 729833.396 ops/s
# Warmup Iteration  16: 730735.997 ops/s
# Warmup Iteration  17: 762553.806 ops/s
# Warmup Iteration  18: 761250.361 ops/s
# Warmup Iteration  19: 762115.503 ops/s
# Warmup Iteration  20: 761200.436 ops/s
# Warmup Iteration  21: 761596.671 ops/s
# Warmup Iteration  22: 763295.317 ops/s
# Warmup Iteration  23: 762171.748 ops/s
# Warmup Iteration  24: 761540.168 ops/s
# Warmup Iteration  25: 759287.816 ops/s
# Warmup Iteration  26: 760452.438 ops/s
# Warmup Iteration  27: 760302.736 ops/s
# Warmup Iteration  28: 763856.154 ops/s
# Warmup Iteration  29: 762283.629 ops/s
# Warmup Iteration  30: 760673.285 ops/s
Iteration   1: 763931.120 ops/s
Iteration   2: 759484.235 ops/s
Iteration   3: 761586.208 ops/s
Iteration   4: 758716.366 ops/s
Iteration   5: 759970.765 ops/s
Iteration   6: 760063.668 ops/s
Iteration   7: 759196.753 ops/s
Iteration   8: 762410.286 ops/s
Iteration   9: 762153.916 ops/s
Iteration  10: 761966.121 ops/s
Iteration  11: 753951.413 ops/s
Iteration  12: 757766.043 ops/s
Iteration  13: 762807.495 ops/s
Iteration  14: 762170.109 ops/s
Iteration  15: 762244.476 ops/s
Iteration  16: 763089.911 ops/s
Iteration  17: 762477.284 ops/s
Iteration  18: 760465.525 ops/s
Iteration  19: 762262.364 ops/s
Iteration  20: 761231.142 ops/s
Iteration  21: 761936.417 ops/s
Iteration  22: 761960.045 ops/s
Iteration  23: 758072.467 ops/s
Iteration  24: 762553.876 ops/s
Iteration  25: 763068.680 ops/s
Iteration  26: 762502.441 ops/s
Iteration  27: 764430.337 ops/s
Iteration  28: 760611.202 ops/s
Iteration  29: 762643.233 ops/s
Iteration  30: 763585.390 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_retainAll":
  761310.310 ±(99.9%) 1459.720 ops/s [Average]
  (min, avg, max) = (753951.413, 761310.310, 764430.337), stdev = 2184.840
  CI (99.9%): [759850.590, 762770.030] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_retainAll  thrpt   30  761310.310 ± 1459.720  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 148902.825 ops/s
# Warmup Iteration   2: 263540.591 ops/s
# Warmup Iteration   3: 314927.329 ops/s
# Warmup Iteration   4: 317892.478 ops/s
# Warmup Iteration   5: 315524.700 ops/s
# Warmup Iteration   6: 259365.968 ops/s
# Warmup Iteration   7: 317735.281 ops/s
# Warmup Iteration   8: 316713.958 ops/s
# Warmup Iteration   9: 317341.459 ops/s
# Warmup Iteration  10: 318274.692 ops/s
# Warmup Iteration  11: 317845.367 ops/s
# Warmup Iteration  12: 318292.239 ops/s
# Warmup Iteration  13: 318121.216 ops/s
# Warmup Iteration  14: 318430.534 ops/s
# Warmup Iteration  15: 318001.712 ops/s
# Warmup Iteration  16: 318077.511 ops/s
# Warmup Iteration  17: 318140.937 ops/s
# Warmup Iteration  18: 317158.131 ops/s
# Warmup Iteration  19: 318269.738 ops/s
# Warmup Iteration  20: 317420.518 ops/s
# Warmup Iteration  21: 316459.229 ops/s
# Warmup Iteration  22: 317925.031 ops/s
# Warmup Iteration  23: 318362.521 ops/s
# Warmup Iteration  24: 317590.010 ops/s
# Warmup Iteration  25: 317171.950 ops/s
# Warmup Iteration  26: 317783.610 ops/s
# Warmup Iteration  27: 318354.234 ops/s
# Warmup Iteration  28: 317252.665 ops/s
# Warmup Iteration  29: 317577.192 ops/s
# Warmup Iteration  30: 317031.036 ops/s
Iteration   1: 317029.646 ops/s
Iteration   2: 317176.718 ops/s
Iteration   3: 315782.798 ops/s
Iteration   4: 317138.832 ops/s
Iteration   5: 317924.445 ops/s
Iteration   6: 317748.233 ops/s
Iteration   7: 318452.544 ops/s
Iteration   8: 318988.324 ops/s
Iteration   9: 317556.936 ops/s
Iteration  10: 317936.817 ops/s
Iteration  11: 317913.725 ops/s
Iteration  12: 316396.800 ops/s
Iteration  13: 315429.607 ops/s
Iteration  14: 317688.976 ops/s
Iteration  15: 318382.338 ops/s
Iteration  16: 317352.742 ops/s
Iteration  17: 317823.127 ops/s
Iteration  18: 318832.021 ops/s
Iteration  19: 317519.057 ops/s
Iteration  20: 318658.816 ops/s
Iteration  21: 318751.870 ops/s
Iteration  22: 318795.337 ops/s
Iteration  23: 316815.773 ops/s
Iteration  24: 319046.971 ops/s
Iteration  25: 318323.461 ops/s
Iteration  26: 316918.968 ops/s
Iteration  27: 318709.018 ops/s
Iteration  28: 317974.904 ops/s
Iteration  29: 318195.318 ops/s
Iteration  30: 316976.864 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_select":
  317741.366 ±(99.9%) 614.275 ops/s [Average]
  (min, avg, max) = (315429.607, 317741.366, 319046.971), stdev = 919.418
  CI (99.9%): [317127.092, 318355.641] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score     Error  Units
ImmutableHashBagTest._Benchmark.benchmark_select  thrpt   30  317741.366 ± 614.275  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_selectByOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_selectByOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 765186.663 ops/s
# Warmup Iteration   2: 1394978.065 ops/s
# Warmup Iteration   3: 1608371.632 ops/s
# Warmup Iteration   4: 1615743.884 ops/s
# Warmup Iteration   5: 1620777.366 ops/s
# Warmup Iteration   6: 1326569.258 ops/s
# Warmup Iteration   7: 1623848.449 ops/s
# Warmup Iteration   8: 1623404.805 ops/s
# Warmup Iteration   9: 1621649.633 ops/s
# Warmup Iteration  10: 1621636.929 ops/s
# Warmup Iteration  11: 1625078.400 ops/s
# Warmup Iteration  12: 1622662.563 ops/s
# Warmup Iteration  13: 1621905.180 ops/s
# Warmup Iteration  14: 1622799.558 ops/s
# Warmup Iteration  15: 1622395.587 ops/s
# Warmup Iteration  16: 1622951.360 ops/s
# Warmup Iteration  17: 1618715.393 ops/s
# Warmup Iteration  18: 1621005.095 ops/s
# Warmup Iteration  19: 1624941.232 ops/s
# Warmup Iteration  20: 1620680.935 ops/s
# Warmup Iteration  21: 1624318.037 ops/s
# Warmup Iteration  22: 1624068.948 ops/s
# Warmup Iteration  23: 1623571.408 ops/s
# Warmup Iteration  24: 1626473.942 ops/s
# Warmup Iteration  25: 1624453.074 ops/s
# Warmup Iteration  26: 1620865.974 ops/s
# Warmup Iteration  27: 1624727.484 ops/s
# Warmup Iteration  28: 1622095.490 ops/s
# Warmup Iteration  29: 1622928.872 ops/s
# Warmup Iteration  30: 1622972.637 ops/s
Iteration   1: 1617563.939 ops/s
Iteration   2: 1626500.960 ops/s
Iteration   3: 1617261.867 ops/s
Iteration   4: 1617092.417 ops/s
Iteration   5: 1621776.639 ops/s
Iteration   6: 1618520.657 ops/s
Iteration   7: 1625361.565 ops/s
Iteration   8: 1618459.145 ops/s
Iteration   9: 1626994.629 ops/s
Iteration  10: 1626185.936 ops/s
Iteration  11: 1622897.467 ops/s
Iteration  12: 1625855.534 ops/s
Iteration  13: 1621017.280 ops/s
Iteration  14: 1627495.640 ops/s
Iteration  15: 1617293.184 ops/s
Iteration  16: 1619248.314 ops/s
Iteration  17: 1625755.946 ops/s
Iteration  18: 1621313.083 ops/s
Iteration  19: 1627296.960 ops/s
Iteration  20: 1620591.517 ops/s
Iteration  21: 1624200.082 ops/s
Iteration  22: 1622420.183 ops/s
Iteration  23: 1622580.782 ops/s
Iteration  24: 1626332.538 ops/s
Iteration  25: 1622861.153 ops/s
Iteration  26: 1622830.091 ops/s
Iteration  27: 1623049.010 ops/s
Iteration  28: 1622043.845 ops/s
Iteration  29: 1619253.651 ops/s
Iteration  30: 1620486.323 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_selectByOccurrences":
  1622351.345 ±(99.9%) 2215.556 ops/s [Average]
  (min, avg, max) = (1617092.417, 1622351.345, 1627495.640), stdev = 3316.140
  CI (99.9%): [1620135.789, 1624566.900] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_selectByOccurrences  thrpt   30  1622351.345 ± 2215.556  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_selectDuplicates$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_selectDuplicates

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 540335.252 ops/s
# Warmup Iteration   2: 1147824.891 ops/s
# Warmup Iteration   3: 1228352.961 ops/s
# Warmup Iteration   4: 1231622.973 ops/s
# Warmup Iteration   5: 1019358.913 ops/s
# Warmup Iteration   6: 1235334.621 ops/s
# Warmup Iteration   7: 1235077.290 ops/s
# Warmup Iteration   8: 1236572.421 ops/s
# Warmup Iteration   9: 1233635.922 ops/s
# Warmup Iteration  10: 1233368.649 ops/s
# Warmup Iteration  11: 1233217.819 ops/s
# Warmup Iteration  12: 1235448.427 ops/s
# Warmup Iteration  13: 1232916.789 ops/s
# Warmup Iteration  14: 1234508.535 ops/s
# Warmup Iteration  15: 1232392.005 ops/s
# Warmup Iteration  16: 1236042.970 ops/s
# Warmup Iteration  17: 1235167.159 ops/s
# Warmup Iteration  18: 1234172.676 ops/s
# Warmup Iteration  19: 1233781.448 ops/s
# Warmup Iteration  20: 1233268.020 ops/s
# Warmup Iteration  21: 1236091.370 ops/s
# Warmup Iteration  22: 1231300.972 ops/s
# Warmup Iteration  23: 1235535.772 ops/s
# Warmup Iteration  24: 1231658.701 ops/s
# Warmup Iteration  25: 1233704.629 ops/s
# Warmup Iteration  26: 1234294.786 ops/s
# Warmup Iteration  27: 1234459.246 ops/s
# Warmup Iteration  28: 1232472.782 ops/s
# Warmup Iteration  29: 1234334.388 ops/s
# Warmup Iteration  30: 1236483.252 ops/s
Iteration   1: 1234525.343 ops/s
Iteration   2: 1233728.763 ops/s
Iteration   3: 1238634.450 ops/s
Iteration   4: 1237387.125 ops/s
Iteration   5: 1236555.946 ops/s
Iteration   6: 1234890.241 ops/s
Iteration   7: 1236768.184 ops/s
Iteration   8: 1234839.517 ops/s
Iteration   9: 1235396.882 ops/s
Iteration  10: 1238231.967 ops/s
Iteration  11: 1233782.002 ops/s
Iteration  12: 1233603.826 ops/s
Iteration  13: 1233879.088 ops/s
Iteration  14: 1232221.541 ops/s
Iteration  15: 1236091.290 ops/s
Iteration  16: 1234528.218 ops/s
Iteration  17: 1238509.684 ops/s
Iteration  18: 1234922.056 ops/s
Iteration  19: 1232940.209 ops/s
Iteration  20: 1238589.847 ops/s
Iteration  21: 1232411.113 ops/s
Iteration  22: 1236419.597 ops/s
Iteration  23: 1234992.824 ops/s
Iteration  24: 1239588.370 ops/s
Iteration  25: 1232829.079 ops/s
Iteration  26: 1233781.440 ops/s
Iteration  27: 1237680.643 ops/s
Iteration  28: 1234185.541 ops/s
Iteration  29: 1233248.178 ops/s
Iteration  30: 1236753.536 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_selectDuplicates":
  1235397.217 ±(99.9%) 1389.542 ops/s [Average]
  (min, avg, max) = (1232221.541, 1235397.217, 1239588.370), stdev = 2079.802
  CI (99.9%): [1234007.674, 1236786.759] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_selectDuplicates  thrpt   30  1235397.217 ± 1389.542  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_selectInstancesOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_selectInstancesOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 152658.540 ops/s
# Warmup Iteration   2: 267404.486 ops/s
# Warmup Iteration   3: 310724.191 ops/s
# Warmup Iteration   4: 312050.621 ops/s
# Warmup Iteration   5: 311960.400 ops/s
# Warmup Iteration   6: 255837.940 ops/s
# Warmup Iteration   7: 312355.266 ops/s
# Warmup Iteration   8: 312171.433 ops/s
# Warmup Iteration   9: 311838.443 ops/s
# Warmup Iteration  10: 312424.047 ops/s
# Warmup Iteration  11: 311595.196 ops/s
# Warmup Iteration  12: 312669.119 ops/s
# Warmup Iteration  13: 312251.009 ops/s
# Warmup Iteration  14: 312433.579 ops/s
# Warmup Iteration  15: 311945.532 ops/s
# Warmup Iteration  16: 312527.072 ops/s
# Warmup Iteration  17: 312166.215 ops/s
# Warmup Iteration  18: 312442.089 ops/s
# Warmup Iteration  19: 311305.099 ops/s
# Warmup Iteration  20: 312339.728 ops/s
# Warmup Iteration  21: 312255.092 ops/s
# Warmup Iteration  22: 312422.494 ops/s
# Warmup Iteration  23: 312523.755 ops/s
# Warmup Iteration  24: 312769.079 ops/s
# Warmup Iteration  25: 312727.615 ops/s
# Warmup Iteration  26: 312716.118 ops/s
# Warmup Iteration  27: 311900.825 ops/s
# Warmup Iteration  28: 312668.082 ops/s
# Warmup Iteration  29: 312618.352 ops/s
# Warmup Iteration  30: 312763.040 ops/s
Iteration   1: 312493.073 ops/s
Iteration   2: 312842.491 ops/s
Iteration   3: 311340.982 ops/s
Iteration   4: 312167.444 ops/s
Iteration   5: 313036.993 ops/s
Iteration   6: 312754.473 ops/s
Iteration   7: 311820.717 ops/s
Iteration   8: 312887.781 ops/s
Iteration   9: 312441.077 ops/s
Iteration  10: 312709.658 ops/s
Iteration  11: 313116.546 ops/s
Iteration  12: 313088.815 ops/s
Iteration  13: 312187.094 ops/s
Iteration  14: 311981.072 ops/s
Iteration  15: 312308.945 ops/s
Iteration  16: 311372.986 ops/s
Iteration  17: 313218.717 ops/s
Iteration  18: 311708.651 ops/s
Iteration  19: 312855.021 ops/s
Iteration  20: 311987.927 ops/s
Iteration  21: 312920.505 ops/s
Iteration  22: 312727.999 ops/s
Iteration  23: 311965.947 ops/s
Iteration  24: 313293.438 ops/s
Iteration  25: 312471.783 ops/s
Iteration  26: 312244.392 ops/s
Iteration  27: 312534.243 ops/s
Iteration  28: 312245.887 ops/s
Iteration  29: 312311.339 ops/s
Iteration  30: 311833.450 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_selectInstancesOf":
  312428.982 ±(99.9%) 353.518 ops/s [Average]
  (min, avg, max) = (311340.982, 312428.982, 313293.438), stdev = 529.129
  CI (99.9%): [312075.463, 312782.500] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score     Error  Units
ImmutableHashBagTest._Benchmark.benchmark_selectInstancesOf  thrpt   30  312428.982 ± 353.518  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_selectToTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_selectToTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 762055.852 ops/s
# Warmup Iteration   2: 1237941.600 ops/s
# Warmup Iteration   3: 1470792.883 ops/s
# Warmup Iteration   4: 1477686.732 ops/s
# Warmup Iteration   5: 1478379.280 ops/s
# Warmup Iteration   6: 1369425.795 ops/s
# Warmup Iteration   7: 1326316.442 ops/s
# Warmup Iteration   8: 1478113.662 ops/s
# Warmup Iteration   9: 1482435.376 ops/s
# Warmup Iteration  10: 1484808.146 ops/s
# Warmup Iteration  11: 1480687.387 ops/s
# Warmup Iteration  12: 1477783.990 ops/s
# Warmup Iteration  13: 1479778.602 ops/s
# Warmup Iteration  14: 1480801.235 ops/s
# Warmup Iteration  15: 1481672.899 ops/s
# Warmup Iteration  16: 1481416.560 ops/s
# Warmup Iteration  17: 1483723.634 ops/s
# Warmup Iteration  18: 1483545.629 ops/s
# Warmup Iteration  19: 1478247.667 ops/s
# Warmup Iteration  20: 1480481.256 ops/s
# Warmup Iteration  21: 1479571.498 ops/s
# Warmup Iteration  22: 1478457.525 ops/s
# Warmup Iteration  23: 1480459.308 ops/s
# Warmup Iteration  24: 1482273.897 ops/s
# Warmup Iteration  25: 1477836.822 ops/s
# Warmup Iteration  26: 1480140.654 ops/s
# Warmup Iteration  27: 1481937.591 ops/s
# Warmup Iteration  28: 1482277.811 ops/s
# Warmup Iteration  29: 1481070.648 ops/s
# Warmup Iteration  30: 1478837.159 ops/s
Iteration   1: 1474241.979 ops/s
Iteration   2: 1484891.956 ops/s
Iteration   3: 1482304.767 ops/s
Iteration   4: 1484941.634 ops/s
Iteration   5: 1489020.371 ops/s
Iteration   6: 1482717.233 ops/s
Iteration   7: 1479387.772 ops/s
Iteration   8: 1481537.227 ops/s
Iteration   9: 1478593.214 ops/s
Iteration  10: 1482331.922 ops/s
Iteration  11: 1481623.020 ops/s
Iteration  12: 1485243.029 ops/s
Iteration  13: 1481224.849 ops/s
Iteration  14: 1481525.011 ops/s
Iteration  15: 1479649.192 ops/s
Iteration  16: 1479204.940 ops/s
Iteration  17: 1480617.005 ops/s
Iteration  18: 1481176.346 ops/s
Iteration  19: 1482457.864 ops/s
Iteration  20: 1479363.800 ops/s
Iteration  21: 1480601.305 ops/s
Iteration  22: 1485133.287 ops/s
Iteration  23: 1482050.583 ops/s
Iteration  24: 1479198.907 ops/s
Iteration  25: 1479931.978 ops/s
Iteration  26: 1484495.785 ops/s
Iteration  27: 1481311.703 ops/s
Iteration  28: 1481984.012 ops/s
Iteration  29: 1479622.497 ops/s
Iteration  30: 1482801.699 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_selectToTarget":
  1481639.496 ±(99.9%) 1812.477 ops/s [Average]
  (min, avg, max) = (1474241.979, 1481639.496, 1489020.371), stdev = 2712.830
  CI (99.9%): [1479827.020, 1483451.973] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_selectToTarget  thrpt   30  1481639.496 ± 1812.477  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_selectUnique$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_selectUnique

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 573746.400 ops/s
# Warmup Iteration   2: 991631.517 ops/s
# Warmup Iteration   3: 1148222.415 ops/s
# Warmup Iteration   4: 1160153.429 ops/s
# Warmup Iteration   5: 1154170.331 ops/s
# Warmup Iteration   6: 946549.234 ops/s
# Warmup Iteration   7: 1158367.457 ops/s
# Warmup Iteration   8: 1156410.393 ops/s
# Warmup Iteration   9: 1158022.994 ops/s
# Warmup Iteration  10: 1157257.772 ops/s
# Warmup Iteration  11: 1157493.493 ops/s
# Warmup Iteration  12: 1156704.336 ops/s
# Warmup Iteration  13: 1157043.477 ops/s
# Warmup Iteration  14: 1157544.968 ops/s
# Warmup Iteration  15: 1156109.006 ops/s
# Warmup Iteration  16: 1158701.070 ops/s
# Warmup Iteration  17: 1154796.412 ops/s
# Warmup Iteration  18: 1158085.644 ops/s
# Warmup Iteration  19: 1157265.906 ops/s
# Warmup Iteration  20: 1152013.381 ops/s
# Warmup Iteration  21: 1153795.348 ops/s
# Warmup Iteration  22: 1155243.964 ops/s
# Warmup Iteration  23: 1153966.418 ops/s
# Warmup Iteration  24: 1151318.662 ops/s
# Warmup Iteration  25: 1155171.001 ops/s
# Warmup Iteration  26: 1154666.306 ops/s
# Warmup Iteration  27: 1157165.186 ops/s
# Warmup Iteration  28: 1153667.589 ops/s
# Warmup Iteration  29: 1156128.700 ops/s
# Warmup Iteration  30: 1154543.075 ops/s
Iteration   1: 1153263.777 ops/s
Iteration   2: 1157436.929 ops/s
Iteration   3: 1154174.754 ops/s
Iteration   4: 1160721.635 ops/s
Iteration   5: 1156833.362 ops/s
Iteration   6: 1157305.026 ops/s
Iteration   7: 1156717.565 ops/s
Iteration   8: 1155268.630 ops/s
Iteration   9: 1153739.131 ops/s
Iteration  10: 1158785.200 ops/s
Iteration  11: 1160309.989 ops/s
Iteration  12: 1157089.079 ops/s
Iteration  13: 1156685.481 ops/s
Iteration  14: 1153811.911 ops/s
Iteration  15: 1160325.874 ops/s
Iteration  16: 1154315.858 ops/s
Iteration  17: 1159966.914 ops/s
Iteration  18: 1154589.974 ops/s
Iteration  19: 1157112.058 ops/s
Iteration  20: 1154453.283 ops/s
Iteration  21: 1151944.241 ops/s
Iteration  22: 1156876.537 ops/s
Iteration  23: 1159035.082 ops/s
Iteration  24: 1156109.249 ops/s
Iteration  25: 1160430.264 ops/s
Iteration  26: 1157052.876 ops/s
Iteration  27: 1159874.294 ops/s
Iteration  28: 1158951.379 ops/s
Iteration  29: 1158317.964 ops/s
Iteration  30: 1156963.213 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_selectUnique":
  1156948.718 ±(99.9%) 1615.772 ops/s [Average]
  (min, avg, max) = (1151944.241, 1156948.718, 1160721.635), stdev = 2418.411
  CI (99.9%): [1155332.946, 1158564.489] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_selectUnique  thrpt   30  1156948.718 ± 1615.772  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_selectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_selectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 191355.841 ops/s
# Warmup Iteration   2: 360788.364 ops/s
# Warmup Iteration   3: 409107.371 ops/s
# Warmup Iteration   4: 410576.036 ops/s
# Warmup Iteration   5: 392562.461 ops/s
# Warmup Iteration   6: 356305.282 ops/s
# Warmup Iteration   7: 410770.708 ops/s
# Warmup Iteration   8: 411352.431 ops/s
# Warmup Iteration   9: 410672.085 ops/s
# Warmup Iteration  10: 411105.557 ops/s
# Warmup Iteration  11: 410846.162 ops/s
# Warmup Iteration  12: 411071.386 ops/s
# Warmup Iteration  13: 411401.072 ops/s
# Warmup Iteration  14: 411288.927 ops/s
# Warmup Iteration  15: 411160.417 ops/s
# Warmup Iteration  16: 410425.026 ops/s
# Warmup Iteration  17: 409858.348 ops/s
# Warmup Iteration  18: 410922.331 ops/s
# Warmup Iteration  19: 411323.900 ops/s
# Warmup Iteration  20: 409738.394 ops/s
# Warmup Iteration  21: 409968.385 ops/s
# Warmup Iteration  22: 410572.433 ops/s
# Warmup Iteration  23: 410460.454 ops/s
# Warmup Iteration  24: 411018.478 ops/s
# Warmup Iteration  25: 409841.373 ops/s
# Warmup Iteration  26: 409697.567 ops/s
# Warmup Iteration  27: 410486.863 ops/s
# Warmup Iteration  28: 410599.229 ops/s
# Warmup Iteration  29: 409485.115 ops/s
# Warmup Iteration  30: 410660.393 ops/s
Iteration   1: 412223.101 ops/s
Iteration   2: 410282.908 ops/s
Iteration   3: 409613.388 ops/s
Iteration   4: 409737.284 ops/s
Iteration   5: 410391.145 ops/s
Iteration   6: 411903.967 ops/s
Iteration   7: 410129.781 ops/s
Iteration   8: 410268.233 ops/s
Iteration   9: 410767.885 ops/s
Iteration  10: 410004.964 ops/s
Iteration  11: 411640.570 ops/s
Iteration  12: 411061.968 ops/s
Iteration  13: 410281.475 ops/s
Iteration  14: 409699.466 ops/s
Iteration  15: 410610.974 ops/s
Iteration  16: 410434.667 ops/s
Iteration  17: 409886.408 ops/s
Iteration  18: 410092.336 ops/s
Iteration  19: 411594.211 ops/s
Iteration  20: 410957.425 ops/s
Iteration  21: 410575.448 ops/s
Iteration  22: 410418.172 ops/s
Iteration  23: 411280.560 ops/s
Iteration  24: 411282.963 ops/s
Iteration  25: 410547.421 ops/s
Iteration  26: 409943.751 ops/s
Iteration  27: 411221.742 ops/s
Iteration  28: 410147.613 ops/s
Iteration  29: 411656.297 ops/s
Iteration  30: 408900.286 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_selectWith":
  410585.214 ±(99.9%) 511.767 ops/s [Average]
  (min, avg, max) = (408900.286, 410585.214, 412223.101), stdev = 765.989
  CI (99.9%): [410073.447, 411096.981] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score     Error  Units
ImmutableHashBagTest._Benchmark.benchmark_selectWith  thrpt   30  410585.214 ± 511.767  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_selectWithToTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_selectWithToTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 927180.298 ops/s
# Warmup Iteration   2: 1459702.732 ops/s
# Warmup Iteration   3: 1723961.050 ops/s
# Warmup Iteration   4: 1742370.508 ops/s
# Warmup Iteration   5: 1738674.045 ops/s
# Warmup Iteration   6: 1736937.133 ops/s
# Warmup Iteration   7: 1432763.702 ops/s
# Warmup Iteration   8: 1739547.120 ops/s
# Warmup Iteration   9: 1739289.011 ops/s
# Warmup Iteration  10: 1741318.502 ops/s
# Warmup Iteration  11: 1739826.367 ops/s
# Warmup Iteration  12: 1741252.351 ops/s
# Warmup Iteration  13: 1737615.234 ops/s
# Warmup Iteration  14: 1742931.370 ops/s
# Warmup Iteration  15: 1739857.701 ops/s
# Warmup Iteration  16: 1741356.249 ops/s
# Warmup Iteration  17: 1740796.795 ops/s
# Warmup Iteration  18: 1739152.723 ops/s
# Warmup Iteration  19: 1740077.989 ops/s
# Warmup Iteration  20: 1741227.297 ops/s
# Warmup Iteration  21: 1740379.128 ops/s
# Warmup Iteration  22: 1742193.761 ops/s
# Warmup Iteration  23: 1738905.358 ops/s
# Warmup Iteration  24: 1743065.273 ops/s
# Warmup Iteration  25: 1740626.019 ops/s
# Warmup Iteration  26: 1737932.242 ops/s
# Warmup Iteration  27: 1740206.850 ops/s
# Warmup Iteration  28: 1737650.513 ops/s
# Warmup Iteration  29: 1739290.631 ops/s
# Warmup Iteration  30: 1740079.309 ops/s
Iteration   1: 1736975.533 ops/s
Iteration   2: 1741804.992 ops/s
Iteration   3: 1739247.386 ops/s
Iteration   4: 1742175.491 ops/s
Iteration   5: 1740898.377 ops/s
Iteration   6: 1740928.061 ops/s
Iteration   7: 1735504.765 ops/s
Iteration   8: 1746580.199 ops/s
Iteration   9: 1740709.549 ops/s
Iteration  10: 1742542.565 ops/s
Iteration  11: 1734126.633 ops/s
Iteration  12: 1741323.600 ops/s
Iteration  13: 1734601.734 ops/s
Iteration  14: 1740960.670 ops/s
Iteration  15: 1739331.099 ops/s
Iteration  16: 1740705.344 ops/s
Iteration  17: 1736481.797 ops/s
Iteration  18: 1739664.060 ops/s
Iteration  19: 1741779.109 ops/s
Iteration  20: 1736360.164 ops/s
Iteration  21: 1740937.734 ops/s
Iteration  22: 1735751.916 ops/s
Iteration  23: 1740691.879 ops/s
Iteration  24: 1738618.756 ops/s
Iteration  25: 1742609.273 ops/s
Iteration  26: 1740967.224 ops/s
Iteration  27: 1739118.811 ops/s
Iteration  28: 1742053.979 ops/s
Iteration  29: 1739476.016 ops/s
Iteration  30: 1739734.802 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_selectWithToTarget":
  1739755.384 ±(99.9%) 1834.365 ops/s [Average]
  (min, avg, max) = (1734126.633, 1739755.384, 1746580.199), stdev = 2745.592
  CI (99.9%): [1737921.019, 1741589.749] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_selectWithToTarget  thrpt   30  1739755.384 ± 1834.365  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_selectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_selectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 251763.434 ops/s
# Warmup Iteration   2: 501783.751 ops/s
# Warmup Iteration   3: 556215.761 ops/s
# Warmup Iteration   4: 558817.989 ops/s
# Warmup Iteration   5: 461091.781 ops/s
# Warmup Iteration   6: 559092.988 ops/s
# Warmup Iteration   7: 558642.027 ops/s
# Warmup Iteration   8: 558472.136 ops/s
# Warmup Iteration   9: 557314.790 ops/s
# Warmup Iteration  10: 558463.934 ops/s
# Warmup Iteration  11: 558989.535 ops/s
# Warmup Iteration  12: 557699.912 ops/s
# Warmup Iteration  13: 558298.937 ops/s
# Warmup Iteration  14: 559468.412 ops/s
# Warmup Iteration  15: 558017.145 ops/s
# Warmup Iteration  16: 558769.966 ops/s
# Warmup Iteration  17: 559746.614 ops/s
# Warmup Iteration  18: 559515.636 ops/s
# Warmup Iteration  19: 558339.566 ops/s
# Warmup Iteration  20: 558964.640 ops/s
# Warmup Iteration  21: 559114.181 ops/s
# Warmup Iteration  22: 558454.713 ops/s
# Warmup Iteration  23: 559543.524 ops/s
# Warmup Iteration  24: 559242.506 ops/s
# Warmup Iteration  25: 558418.040 ops/s
# Warmup Iteration  26: 559728.654 ops/s
# Warmup Iteration  27: 559028.192 ops/s
# Warmup Iteration  28: 560168.456 ops/s
# Warmup Iteration  29: 559441.957 ops/s
# Warmup Iteration  30: 559732.531 ops/s
Iteration   1: 557434.922 ops/s
Iteration   2: 560355.109 ops/s
Iteration   3: 558420.353 ops/s
Iteration   4: 558017.655 ops/s
Iteration   5: 560779.665 ops/s
Iteration   6: 560939.911 ops/s
Iteration   7: 559433.291 ops/s
Iteration   8: 560128.122 ops/s
Iteration   9: 560085.848 ops/s
Iteration  10: 559158.733 ops/s
Iteration  11: 560869.456 ops/s
Iteration  12: 559217.529 ops/s
Iteration  13: 559376.087 ops/s
Iteration  14: 559524.713 ops/s
Iteration  15: 558788.489 ops/s
Iteration  16: 559981.440 ops/s
Iteration  17: 560825.047 ops/s
Iteration  18: 559367.054 ops/s
Iteration  19: 559881.060 ops/s
Iteration  20: 559631.747 ops/s
Iteration  21: 559155.048 ops/s
Iteration  22: 560234.475 ops/s
Iteration  23: 560144.158 ops/s
Iteration  24: 560493.670 ops/s
Iteration  25: 561180.605 ops/s
Iteration  26: 559985.766 ops/s
Iteration  27: 558289.121 ops/s
Iteration  28: 560524.268 ops/s
Iteration  29: 559613.370 ops/s
Iteration  30: 558515.453 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_selectWith_target":
  559678.406 ±(99.9%) 623.265 ops/s [Average]
  (min, avg, max) = (557434.922, 559678.406, 561180.605), stdev = 932.873
  CI (99.9%): [559055.141, 560301.670] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score     Error  Units
ImmutableHashBagTest._Benchmark.benchmark_selectWith_target  thrpt   30  559678.406 ± 623.265  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_serialization$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_serialization

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 77026.951 ops/s
# Warmup Iteration   2: 122581.518 ops/s
# Warmup Iteration   3: 161985.473 ops/s
# Warmup Iteration   4: 162093.826 ops/s
# Warmup Iteration   5: 163069.783 ops/s
# Warmup Iteration   6: 163858.498 ops/s
# Warmup Iteration   7: 140640.945 ops/s
# Warmup Iteration   8: 163690.444 ops/s
# Warmup Iteration   9: 163594.830 ops/s
# Warmup Iteration  10: 163738.707 ops/s
# Warmup Iteration  11: 163482.260 ops/s
# Warmup Iteration  12: 163709.019 ops/s
# Warmup Iteration  13: 162907.840 ops/s
# Warmup Iteration  14: 163629.050 ops/s
# Warmup Iteration  15: 163476.608 ops/s
# Warmup Iteration  16: 163418.362 ops/s
# Warmup Iteration  17: 163298.954 ops/s
# Warmup Iteration  18: 163597.493 ops/s
# Warmup Iteration  19: 163811.734 ops/s
# Warmup Iteration  20: 163561.440 ops/s
# Warmup Iteration  21: 163643.710 ops/s
# Warmup Iteration  22: 163810.445 ops/s
# Warmup Iteration  23: 163527.167 ops/s
# Warmup Iteration  24: 163614.834 ops/s
# Warmup Iteration  25: 163833.602 ops/s
# Warmup Iteration  26: 163279.657 ops/s
# Warmup Iteration  27: 163658.218 ops/s
# Warmup Iteration  28: 163736.256 ops/s
# Warmup Iteration  29: 163819.610 ops/s
# Warmup Iteration  30: 163823.607 ops/s
Iteration   1: 163625.635 ops/s
Iteration   2: 163439.397 ops/s
Iteration   3: 164575.533 ops/s
Iteration   4: 163094.246 ops/s
Iteration   5: 163166.018 ops/s
Iteration   6: 163516.262 ops/s
Iteration   7: 163257.182 ops/s
Iteration   8: 162956.640 ops/s
Iteration   9: 164400.557 ops/s
Iteration  10: 163855.767 ops/s
Iteration  11: 163494.069 ops/s
Iteration  12: 163805.350 ops/s
Iteration  13: 163623.359 ops/s
Iteration  14: 164026.572 ops/s
Iteration  15: 161876.355 ops/s
Iteration  16: 163738.343 ops/s
Iteration  17: 163118.819 ops/s
Iteration  18: 163704.137 ops/s
Iteration  19: 163533.726 ops/s
Iteration  20: 164303.729 ops/s
Iteration  21: 163449.906 ops/s
Iteration  22: 163084.844 ops/s
Iteration  23: 164011.457 ops/s
Iteration  24: 163980.596 ops/s
Iteration  25: 163467.609 ops/s
Iteration  26: 163545.000 ops/s
Iteration  27: 164629.402 ops/s
Iteration  28: 163013.543 ops/s
Iteration  29: 163468.622 ops/s
Iteration  30: 163446.878 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_serialization":
  163573.652 ±(99.9%) 365.543 ops/s [Average]
  (min, avg, max) = (161876.355, 163573.652, 164629.402), stdev = 547.127
  CI (99.9%): [163208.109, 163939.194] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score     Error  Units
ImmutableHashBagTest._Benchmark.benchmark_serialization  thrpt   30  163573.652 ± 365.543  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_sumByDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_sumByDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 544401.891 ops/s
# Warmup Iteration   2: 966925.321 ops/s
# Warmup Iteration   3: 1088010.297 ops/s
# Warmup Iteration   4: 1094690.597 ops/s
# Warmup Iteration   5: 1094766.228 ops/s
# Warmup Iteration   6: 898629.309 ops/s
# Warmup Iteration   7: 1093182.535 ops/s
# Warmup Iteration   8: 1093377.083 ops/s
# Warmup Iteration   9: 1094765.917 ops/s
# Warmup Iteration  10: 1092037.309 ops/s
# Warmup Iteration  11: 1093396.833 ops/s
# Warmup Iteration  12: 1093653.322 ops/s
# Warmup Iteration  13: 1094718.866 ops/s
# Warmup Iteration  14: 1094815.807 ops/s
# Warmup Iteration  15: 1092072.301 ops/s
# Warmup Iteration  16: 1096382.002 ops/s
# Warmup Iteration  17: 1089535.273 ops/s
# Warmup Iteration  18: 1090496.747 ops/s
# Warmup Iteration  19: 1090985.368 ops/s
# Warmup Iteration  20: 1089960.570 ops/s
# Warmup Iteration  21: 1090214.882 ops/s
# Warmup Iteration  22: 1090844.553 ops/s
# Warmup Iteration  23: 1086535.929 ops/s
# Warmup Iteration  24: 1090828.911 ops/s
# Warmup Iteration  25: 1091618.484 ops/s
# Warmup Iteration  26: 1087694.283 ops/s
# Warmup Iteration  27: 1090828.058 ops/s
# Warmup Iteration  28: 1090285.011 ops/s
# Warmup Iteration  29: 1089654.332 ops/s
# Warmup Iteration  30: 1088954.834 ops/s
Iteration   1: 1087954.852 ops/s
Iteration   2: 1093361.321 ops/s
Iteration   3: 1088824.851 ops/s
Iteration   4: 1092266.347 ops/s
Iteration   5: 1088704.984 ops/s
Iteration   6: 1091948.334 ops/s
Iteration   7: 1091607.505 ops/s
Iteration   8: 1088827.676 ops/s
Iteration   9: 1088611.460 ops/s
Iteration  10: 1083741.291 ops/s
Iteration  11: 1092221.176 ops/s
Iteration  12: 1088384.130 ops/s
Iteration  13: 1090799.293 ops/s
Iteration  14: 1091800.617 ops/s
Iteration  15: 1087645.847 ops/s
Iteration  16: 1088623.221 ops/s
Iteration  17: 1091030.390 ops/s
Iteration  18: 1090677.232 ops/s
Iteration  19: 1084364.175 ops/s
Iteration  20: 1090129.003 ops/s
Iteration  21: 1087427.776 ops/s
Iteration  22: 1090573.170 ops/s
Iteration  23: 1091711.916 ops/s
Iteration  24: 1090523.886 ops/s
Iteration  25: 1089209.194 ops/s
Iteration  26: 1092698.489 ops/s
Iteration  27: 1089628.776 ops/s
Iteration  28: 1095017.938 ops/s
Iteration  29: 1090176.290 ops/s
Iteration  30: 1092392.728 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_sumByDouble":
  1090029.462 ±(99.9%) 1635.581 ops/s [Average]
  (min, avg, max) = (1083741.291, 1090029.462, 1095017.938), stdev = 2448.061
  CI (99.9%): [1088393.881, 1091665.044] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_sumByDouble  thrpt   30  1090029.462 ± 1635.581  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_sumByDoubleConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_sumByDoubleConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 62.598 ops/s
# Warmup Iteration   2: 68.913 ops/s
# Warmup Iteration   3: 99.224 ops/s
# Warmup Iteration   4: 98.853 ops/s
# Warmup Iteration   5: 98.381 ops/s
# Warmup Iteration   6: 98.953 ops/s
# Warmup Iteration   7: 99.208 ops/s
# Warmup Iteration   8: 99.534 ops/s
# Warmup Iteration   9: 98.757 ops/s
# Warmup Iteration  10: 84.469 ops/s
# Warmup Iteration  11: 96.799 ops/s
# Warmup Iteration  12: 98.311 ops/s
# Warmup Iteration  13: 100.562 ops/s
# Warmup Iteration  14: 98.238 ops/s
# Warmup Iteration  15: 98.934 ops/s
# Warmup Iteration  16: 98.537 ops/s
# Warmup Iteration  17: 98.781 ops/s
# Warmup Iteration  18: 100.067 ops/s
# Warmup Iteration  19: 98.890 ops/s
# Warmup Iteration  20: 99.922 ops/s
# Warmup Iteration  21: 98.432 ops/s
# Warmup Iteration  22: 99.104 ops/s
# Warmup Iteration  23: 99.689 ops/s
# Warmup Iteration  24: 98.492 ops/s
# Warmup Iteration  25: 100.118 ops/s
# Warmup Iteration  26: 98.469 ops/s
# Warmup Iteration  27: 99.217 ops/s
# Warmup Iteration  28: 98.455 ops/s
# Warmup Iteration  29: 96.730 ops/s
# Warmup Iteration  30: 98.047 ops/s
Iteration   1: 96.239 ops/s
Iteration   2: 96.596 ops/s
Iteration   3: 96.137 ops/s
Iteration   4: 97.094 ops/s
Iteration   5: 94.587 ops/s
Iteration   6: 98.365 ops/s
Iteration   7: 97.021 ops/s
Iteration   8: 96.037 ops/s
Iteration   9: 96.103 ops/s
Iteration  10: 98.055 ops/s
Iteration  11: 97.469 ops/s
Iteration  12: 96.599 ops/s
Iteration  13: 97.589 ops/s
Iteration  14: 96.234 ops/s
Iteration  15: 94.735 ops/s
Iteration  16: 97.810 ops/s
Iteration  17: 98.769 ops/s
Iteration  18: 96.424 ops/s
Iteration  19: 95.508 ops/s
Iteration  20: 97.865 ops/s
Iteration  21: 97.653 ops/s
Iteration  22: 96.426 ops/s
Iteration  23: 98.945 ops/s
Iteration  24: 98.330 ops/s
Iteration  25: 95.934 ops/s
Iteration  26: 97.782 ops/s
Iteration  27: 98.537 ops/s
Iteration  28: 98.196 ops/s
Iteration  29: 94.790 ops/s
Iteration  30: 98.287 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_sumByDoubleConsistentRounding":
  97.004 ±(99.9%) 0.823 ops/s [Average]
  (min, avg, max) = (94.587, 97.004, 98.945), stdev = 1.231
  CI (99.9%): [96.181, 97.826] (assumes normal distribution)


# Run complete. Total time: 00:01:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt   Score   Error  Units
ImmutableHashBagTest._Benchmark.benchmark_sumByDoubleConsistentRounding  thrpt   30  97.004 ± 0.823  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_sumByFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_sumByFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 519741.492 ops/s
# Warmup Iteration   2: 888461.641 ops/s
# Warmup Iteration   3: 1023777.634 ops/s
# Warmup Iteration   4: 1026164.285 ops/s
# Warmup Iteration   5: 1026417.233 ops/s
# Warmup Iteration   6: 838568.785 ops/s
# Warmup Iteration   7: 1024899.806 ops/s
# Warmup Iteration   8: 1026131.732 ops/s
# Warmup Iteration   9: 1026346.280 ops/s
# Warmup Iteration  10: 1025566.794 ops/s
# Warmup Iteration  11: 1026865.348 ops/s
# Warmup Iteration  12: 1024769.190 ops/s
# Warmup Iteration  13: 1025827.527 ops/s
# Warmup Iteration  14: 1025634.760 ops/s
# Warmup Iteration  15: 1026195.626 ops/s
# Warmup Iteration  16: 1025498.187 ops/s
# Warmup Iteration  17: 1025602.744 ops/s
# Warmup Iteration  18: 1025243.244 ops/s
# Warmup Iteration  19: 1024103.811 ops/s
# Warmup Iteration  20: 1024599.533 ops/s
# Warmup Iteration  21: 1024863.348 ops/s
# Warmup Iteration  22: 1025754.414 ops/s
# Warmup Iteration  23: 1025661.493 ops/s
# Warmup Iteration  24: 1023780.809 ops/s
# Warmup Iteration  25: 1026571.022 ops/s
# Warmup Iteration  26: 1025880.431 ops/s
# Warmup Iteration  27: 1023387.063 ops/s
# Warmup Iteration  28: 1024296.677 ops/s
# Warmup Iteration  29: 1023097.240 ops/s
# Warmup Iteration  30: 1023941.221 ops/s
Iteration   1: 1021030.356 ops/s
Iteration   2: 1026876.712 ops/s
Iteration   3: 1021583.649 ops/s
Iteration   4: 1025710.017 ops/s
Iteration   5: 1024798.947 ops/s
Iteration   6: 1025073.735 ops/s
Iteration   7: 1024145.542 ops/s
Iteration   8: 1026767.608 ops/s
Iteration   9: 1023340.802 ops/s
Iteration  10: 1027244.581 ops/s
Iteration  11: 1026149.495 ops/s
Iteration  12: 1026351.572 ops/s
Iteration  13: 1029076.848 ops/s
Iteration  14: 1021672.495 ops/s
Iteration  15: 1023430.093 ops/s
Iteration  16: 1023521.455 ops/s
Iteration  17: 1026002.501 ops/s
Iteration  18: 1023913.569 ops/s
Iteration  19: 1021206.227 ops/s
Iteration  20: 1026696.578 ops/s
Iteration  21: 1023442.911 ops/s
Iteration  22: 1026434.679 ops/s
Iteration  23: 1021649.676 ops/s
Iteration  24: 1026479.038 ops/s
Iteration  25: 1023458.582 ops/s
Iteration  26: 1027911.316 ops/s
Iteration  27: 1024862.977 ops/s
Iteration  28: 1026669.606 ops/s
Iteration  29: 1022635.054 ops/s
Iteration  30: 1023948.127 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_sumByFloat":
  1024736.158 ±(99.9%) 1437.552 ops/s [Average]
  (min, avg, max) = (1021030.356, 1024736.158, 1029076.848), stdev = 2151.660
  CI (99.9%): [1023298.607, 1026173.710] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_sumByFloat  thrpt   30  1024736.158 ± 1437.552  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_sumByFloatConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_sumByFloatConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 61.821 ops/s
# Warmup Iteration   2: 67.395 ops/s
# Warmup Iteration   3: 97.469 ops/s
# Warmup Iteration   4: 95.329 ops/s
# Warmup Iteration   5: 97.084 ops/s
# Warmup Iteration   6: 96.979 ops/s
# Warmup Iteration   7: 97.629 ops/s
# Warmup Iteration   8: 98.552 ops/s
# Warmup Iteration   9: 97.267 ops/s
# Warmup Iteration  10: 88.440 ops/s
# Warmup Iteration  11: 87.006 ops/s
# Warmup Iteration  12: 97.867 ops/s
# Warmup Iteration  13: 97.384 ops/s
# Warmup Iteration  14: 96.592 ops/s
# Warmup Iteration  15: 98.737 ops/s
# Warmup Iteration  16: 96.185 ops/s
# Warmup Iteration  17: 97.438 ops/s
# Warmup Iteration  18: 96.941 ops/s
# Warmup Iteration  19: 97.368 ops/s
# Warmup Iteration  20: 96.914 ops/s
# Warmup Iteration  21: 96.388 ops/s
# Warmup Iteration  22: 97.515 ops/s
# Warmup Iteration  23: 96.363 ops/s
# Warmup Iteration  24: 95.821 ops/s
# Warmup Iteration  25: 97.310 ops/s
# Warmup Iteration  26: 97.073 ops/s
# Warmup Iteration  27: 97.961 ops/s
# Warmup Iteration  28: 97.499 ops/s
# Warmup Iteration  29: 95.498 ops/s
# Warmup Iteration  30: 96.558 ops/s
Iteration   1: 95.689 ops/s
Iteration   2: 94.472 ops/s
Iteration   3: 95.319 ops/s
Iteration   4: 97.248 ops/s
Iteration   5: 94.314 ops/s
Iteration   6: 95.115 ops/s
Iteration   7: 96.938 ops/s
Iteration   8: 95.834 ops/s
Iteration   9: 93.077 ops/s
Iteration  10: 96.549 ops/s
Iteration  11: 96.022 ops/s
Iteration  12: 96.127 ops/s
Iteration  13: 94.637 ops/s
Iteration  14: 96.338 ops/s
Iteration  15: 95.428 ops/s
Iteration  16: 94.346 ops/s
Iteration  17: 95.730 ops/s
Iteration  18: 96.625 ops/s
Iteration  19: 93.645 ops/s
Iteration  20: 96.726 ops/s
Iteration  21: 96.297 ops/s
Iteration  22: 96.540 ops/s
Iteration  23: 94.707 ops/s
Iteration  24: 96.112 ops/s
Iteration  25: 97.299 ops/s
Iteration  26: 93.768 ops/s
Iteration  27: 95.034 ops/s
Iteration  28: 96.002 ops/s
Iteration  29: 95.647 ops/s
Iteration  30: 94.436 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_sumByFloatConsistentRounding":
  95.534 ±(99.9%) 0.736 ops/s [Average]
  (min, avg, max) = (93.077, 95.534, 97.299), stdev = 1.101
  CI (99.9%): [94.798, 96.269] (assumes normal distribution)


# Run complete. Total time: 00:01:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt   Score   Error  Units
ImmutableHashBagTest._Benchmark.benchmark_sumByFloatConsistentRounding  thrpt   30  95.534 ± 0.736  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_sumByInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_sumByInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 661573.793 ops/s
# Warmup Iteration   2: 1238160.836 ops/s
# Warmup Iteration   3: 1364225.687 ops/s
# Warmup Iteration   4: 1374185.106 ops/s
# Warmup Iteration   5: 1200554.933 ops/s
# Warmup Iteration   6: 1299247.322 ops/s
# Warmup Iteration   7: 1372987.211 ops/s
# Warmup Iteration   8: 1371807.144 ops/s
# Warmup Iteration   9: 1375262.112 ops/s
# Warmup Iteration  10: 1372578.246 ops/s
# Warmup Iteration  11: 1372864.631 ops/s
# Warmup Iteration  12: 1375564.608 ops/s
# Warmup Iteration  13: 1370360.182 ops/s
# Warmup Iteration  14: 1370588.907 ops/s
# Warmup Iteration  15: 1372514.394 ops/s
# Warmup Iteration  16: 1372357.408 ops/s
# Warmup Iteration  17: 1370841.021 ops/s
# Warmup Iteration  18: 1372838.650 ops/s
# Warmup Iteration  19: 1369894.706 ops/s
# Warmup Iteration  20: 1373440.103 ops/s
# Warmup Iteration  21: 1372855.367 ops/s
# Warmup Iteration  22: 1374290.317 ops/s
# Warmup Iteration  23: 1371755.955 ops/s
# Warmup Iteration  24: 1371077.592 ops/s
# Warmup Iteration  25: 1371295.562 ops/s
# Warmup Iteration  26: 1373739.572 ops/s
# Warmup Iteration  27: 1374557.988 ops/s
# Warmup Iteration  28: 1373007.471 ops/s
# Warmup Iteration  29: 1371267.051 ops/s
# Warmup Iteration  30: 1375176.867 ops/s
Iteration   1: 1375726.984 ops/s
Iteration   2: 1374044.832 ops/s
Iteration   3: 1370702.052 ops/s
Iteration   4: 1369713.996 ops/s
Iteration   5: 1373473.385 ops/s
Iteration   6: 1372031.597 ops/s
Iteration   7: 1370724.627 ops/s
Iteration   8: 1368108.858 ops/s
Iteration   9: 1371713.433 ops/s
Iteration  10: 1376145.976 ops/s
Iteration  11: 1371687.526 ops/s
Iteration  12: 1376069.664 ops/s
Iteration  13: 1373407.055 ops/s
Iteration  14: 1374763.548 ops/s
Iteration  15: 1376209.447 ops/s
Iteration  16: 1371523.280 ops/s
Iteration  17: 1372162.023 ops/s
Iteration  18: 1374197.519 ops/s
Iteration  19: 1373485.618 ops/s
Iteration  20: 1373843.818 ops/s
Iteration  21: 1378454.754 ops/s
Iteration  22: 1374990.834 ops/s
Iteration  23: 1375610.065 ops/s
Iteration  24: 1374367.782 ops/s
Iteration  25: 1374396.223 ops/s
Iteration  26: 1377188.967 ops/s
Iteration  27: 1374852.471 ops/s
Iteration  28: 1370415.716 ops/s
Iteration  29: 1376982.026 ops/s
Iteration  30: 1370920.296 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_sumByInt":
  1373597.146 ±(99.9%) 1654.776 ops/s [Average]
  (min, avg, max) = (1368108.858, 1373597.146, 1378454.754), stdev = 2476.791
  CI (99.9%): [1371942.370, 1375251.922] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_sumByInt  thrpt   30  1373597.146 ± 1654.776  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_sumByLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_sumByLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 657390.443 ops/s
# Warmup Iteration   2: 1221976.115 ops/s
# Warmup Iteration   3: 1354530.161 ops/s
# Warmup Iteration   4: 1362190.963 ops/s
# Warmup Iteration   5: 1216023.717 ops/s
# Warmup Iteration   6: 1266584.577 ops/s
# Warmup Iteration   7: 1364685.351 ops/s
# Warmup Iteration   8: 1363828.797 ops/s
# Warmup Iteration   9: 1365470.513 ops/s
# Warmup Iteration  10: 1363769.763 ops/s
# Warmup Iteration  11: 1366031.568 ops/s
# Warmup Iteration  12: 1366688.574 ops/s
# Warmup Iteration  13: 1362955.922 ops/s
# Warmup Iteration  14: 1366939.231 ops/s
# Warmup Iteration  15: 1364802.631 ops/s
# Warmup Iteration  16: 1364576.278 ops/s
# Warmup Iteration  17: 1362724.734 ops/s
# Warmup Iteration  18: 1363078.685 ops/s
# Warmup Iteration  19: 1362268.853 ops/s
# Warmup Iteration  20: 1363188.825 ops/s
# Warmup Iteration  21: 1365408.810 ops/s
# Warmup Iteration  22: 1360969.097 ops/s
# Warmup Iteration  23: 1365552.486 ops/s
# Warmup Iteration  24: 1364133.214 ops/s
# Warmup Iteration  25: 1364611.492 ops/s
# Warmup Iteration  26: 1365542.556 ops/s
# Warmup Iteration  27: 1361307.476 ops/s
# Warmup Iteration  28: 1361276.798 ops/s
# Warmup Iteration  29: 1364211.878 ops/s
# Warmup Iteration  30: 1363953.141 ops/s
Iteration   1: 1365671.929 ops/s
Iteration   2: 1357550.637 ops/s
Iteration   3: 1364786.772 ops/s
Iteration   4: 1366749.920 ops/s
Iteration   5: 1365229.564 ops/s
Iteration   6: 1365247.580 ops/s
Iteration   7: 1360081.930 ops/s
Iteration   8: 1362280.211 ops/s
Iteration   9: 1363068.449 ops/s
Iteration  10: 1362135.371 ops/s
Iteration  11: 1365048.885 ops/s
Iteration  12: 1366859.137 ops/s
Iteration  13: 1362757.082 ops/s
Iteration  14: 1366440.661 ops/s
Iteration  15: 1363805.085 ops/s
Iteration  16: 1363451.292 ops/s
Iteration  17: 1365928.533 ops/s
Iteration  18: 1364135.119 ops/s
Iteration  19: 1364186.375 ops/s
Iteration  20: 1366019.381 ops/s
Iteration  21: 1362263.221 ops/s
Iteration  22: 1364142.108 ops/s
Iteration  23: 1364309.983 ops/s
Iteration  24: 1364531.390 ops/s
Iteration  25: 1366369.069 ops/s
Iteration  26: 1356814.752 ops/s
Iteration  27: 1364463.262 ops/s
Iteration  28: 1360166.052 ops/s
Iteration  29: 1361863.821 ops/s
Iteration  30: 1365245.165 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_sumByLong":
  1363720.091 ±(99.9%) 1676.448 ops/s [Average]
  (min, avg, max) = (1356814.752, 1363720.091, 1366859.137), stdev = 2509.229
  CI (99.9%): [1362043.643, 1365396.539] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_sumByLong  thrpt   30  1363720.091 ± 1676.448  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_sumDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_sumDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 765976.269 ops/s
# Warmup Iteration   2: 1232576.861 ops/s
# Warmup Iteration   3: 1438215.170 ops/s
# Warmup Iteration   4: 1452159.761 ops/s
# Warmup Iteration   5: 1451496.469 ops/s
# Warmup Iteration   6: 1315175.963 ops/s
# Warmup Iteration   7: 1333411.278 ops/s
# Warmup Iteration   8: 1449784.213 ops/s
# Warmup Iteration   9: 1451074.876 ops/s
# Warmup Iteration  10: 1453854.751 ops/s
# Warmup Iteration  11: 1452517.206 ops/s
# Warmup Iteration  12: 1452844.066 ops/s
# Warmup Iteration  13: 1452476.774 ops/s
# Warmup Iteration  14: 1449986.303 ops/s
# Warmup Iteration  15: 1450985.770 ops/s
# Warmup Iteration  16: 1452431.047 ops/s
# Warmup Iteration  17: 1453039.610 ops/s
# Warmup Iteration  18: 1453322.812 ops/s
# Warmup Iteration  19: 1451575.111 ops/s
# Warmup Iteration  20: 1453920.502 ops/s
# Warmup Iteration  21: 1452307.971 ops/s
# Warmup Iteration  22: 1453869.834 ops/s
# Warmup Iteration  23: 1453045.277 ops/s
# Warmup Iteration  24: 1450129.553 ops/s
# Warmup Iteration  25: 1448666.522 ops/s
# Warmup Iteration  26: 1453934.185 ops/s
# Warmup Iteration  27: 1452802.020 ops/s
# Warmup Iteration  28: 1453709.718 ops/s
# Warmup Iteration  29: 1452030.966 ops/s
# Warmup Iteration  30: 1453081.922 ops/s
Iteration   1: 1455271.080 ops/s
Iteration   2: 1448871.758 ops/s
Iteration   3: 1458038.680 ops/s
Iteration   4: 1451905.844 ops/s
Iteration   5: 1457110.179 ops/s
Iteration   6: 1448146.630 ops/s
Iteration   7: 1456486.771 ops/s
Iteration   8: 1450242.472 ops/s
Iteration   9: 1455917.867 ops/s
Iteration  10: 1451960.319 ops/s
Iteration  11: 1453305.564 ops/s
Iteration  12: 1450759.659 ops/s
Iteration  13: 1456528.197 ops/s
Iteration  14: 1451917.599 ops/s
Iteration  15: 1450951.881 ops/s
Iteration  16: 1447009.289 ops/s
Iteration  17: 1459211.357 ops/s
Iteration  18: 1449848.590 ops/s
Iteration  19: 1448596.043 ops/s
Iteration  20: 1445261.536 ops/s
Iteration  21: 1447822.020 ops/s
Iteration  22: 1446334.324 ops/s
Iteration  23: 1456043.677 ops/s
Iteration  24: 1452639.767 ops/s
Iteration  25: 1454408.281 ops/s
Iteration  26: 1447840.122 ops/s
Iteration  27: 1453938.979 ops/s
Iteration  28: 1451500.207 ops/s
Iteration  29: 1456165.742 ops/s
Iteration  30: 1450243.793 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_sumDouble":
  1452142.608 ±(99.9%) 2521.728 ops/s [Average]
  (min, avg, max) = (1445261.536, 1452142.608, 1459211.357), stdev = 3774.404
  CI (99.9%): [1449620.880, 1454664.335] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_sumDouble  thrpt   30  1452142.608 ± 2521.728  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_sumDoubleConsistentRounding1$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_sumDoubleConsistentRounding1

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 77.721 ops/s
# Warmup Iteration   2: 89.224 ops/s
# Warmup Iteration   3: 118.288 ops/s
# Warmup Iteration   4: 117.761 ops/s
# Warmup Iteration   5: 118.056 ops/s
# Warmup Iteration   6: 118.091 ops/s
# Warmup Iteration   7: 118.770 ops/s
# Warmup Iteration   8: 118.009 ops/s
# Warmup Iteration   9: 118.061 ops/s
# Warmup Iteration  10: 102.508 ops/s
# Warmup Iteration  11: 115.898 ops/s
# Warmup Iteration  12: 118.099 ops/s
# Warmup Iteration  13: 118.995 ops/s
# Warmup Iteration  14: 118.137 ops/s
# Warmup Iteration  15: 118.102 ops/s
# Warmup Iteration  16: 118.594 ops/s
# Warmup Iteration  17: 117.895 ops/s
# Warmup Iteration  18: 118.353 ops/s
# Warmup Iteration  19: 118.357 ops/s
# Warmup Iteration  20: 118.364 ops/s
# Warmup Iteration  21: 118.420 ops/s
# Warmup Iteration  22: 118.248 ops/s
# Warmup Iteration  23: 118.181 ops/s
# Warmup Iteration  24: 116.233 ops/s
# Warmup Iteration  25: 115.769 ops/s
# Warmup Iteration  26: 115.526 ops/s
# Warmup Iteration  27: 116.141 ops/s
# Warmup Iteration  28: 115.786 ops/s
# Warmup Iteration  29: 115.874 ops/s
# Warmup Iteration  30: 115.364 ops/s
Iteration   1: 116.353 ops/s
Iteration   2: 115.070 ops/s
Iteration   3: 115.899 ops/s
Iteration   4: 115.827 ops/s
Iteration   5: 115.770 ops/s
Iteration   6: 115.475 ops/s
Iteration   7: 115.859 ops/s
Iteration   8: 115.671 ops/s
Iteration   9: 115.290 ops/s
Iteration  10: 116.373 ops/s
Iteration  11: 115.757 ops/s
Iteration  12: 116.057 ops/s
Iteration  13: 115.495 ops/s
Iteration  14: 115.541 ops/s
Iteration  15: 115.400 ops/s
Iteration  16: 115.122 ops/s
Iteration  17: 115.764 ops/s
Iteration  18: 115.300 ops/s
Iteration  19: 115.092 ops/s
Iteration  20: 115.561 ops/s
Iteration  21: 115.786 ops/s
Iteration  22: 115.821 ops/s
Iteration  23: 114.991 ops/s
Iteration  24: 115.571 ops/s
Iteration  25: 115.176 ops/s
Iteration  26: 115.184 ops/s
Iteration  27: 116.008 ops/s
Iteration  28: 115.233 ops/s
Iteration  29: 116.235 ops/s
Iteration  30: 115.370 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_sumDoubleConsistentRounding1":
  115.602 ±(99.9%) 0.256 ops/s [Average]
  (min, avg, max) = (114.991, 115.602, 116.373), stdev = 0.383
  CI (99.9%): [115.346, 115.858] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt    Score   Error  Units
ImmutableHashBagTest._Benchmark.benchmark_sumDoubleConsistentRounding1  thrpt   30  115.602 ± 0.256  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_sumDoubleConsistentRounding2$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_sumDoubleConsistentRounding2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 79.615 ops/s
# Warmup Iteration   2: 93.871 ops/s
# Warmup Iteration   3: 122.935 ops/s
# Warmup Iteration   4: 123.198 ops/s
# Warmup Iteration   5: 123.339 ops/s
# Warmup Iteration   6: 123.132 ops/s
# Warmup Iteration   7: 122.525 ops/s
# Warmup Iteration   8: 123.102 ops/s
# Warmup Iteration   9: 123.186 ops/s
# Warmup Iteration  10: 104.805 ops/s
# Warmup Iteration  11: 122.941 ops/s
# Warmup Iteration  12: 123.733 ops/s
# Warmup Iteration  13: 123.311 ops/s
# Warmup Iteration  14: 123.683 ops/s
# Warmup Iteration  15: 123.258 ops/s
# Warmup Iteration  16: 123.706 ops/s
# Warmup Iteration  17: 123.159 ops/s
# Warmup Iteration  18: 123.287 ops/s
# Warmup Iteration  19: 123.519 ops/s
# Warmup Iteration  20: 123.150 ops/s
# Warmup Iteration  21: 123.665 ops/s
# Warmup Iteration  22: 123.509 ops/s
# Warmup Iteration  23: 122.111 ops/s
# Warmup Iteration  24: 121.022 ops/s
# Warmup Iteration  25: 120.994 ops/s
# Warmup Iteration  26: 120.370 ops/s
# Warmup Iteration  27: 120.472 ops/s
# Warmup Iteration  28: 121.412 ops/s
# Warmup Iteration  29: 120.998 ops/s
# Warmup Iteration  30: 120.666 ops/s
Iteration   1: 121.387 ops/s
Iteration   2: 121.820 ops/s
Iteration   3: 120.462 ops/s
Iteration   4: 120.886 ops/s
Iteration   5: 120.821 ops/s
Iteration   6: 120.114 ops/s
Iteration   7: 121.389 ops/s
Iteration   8: 121.043 ops/s
Iteration   9: 120.990 ops/s
Iteration  10: 121.075 ops/s
Iteration  11: 121.194 ops/s
Iteration  12: 121.099 ops/s
Iteration  13: 121.063 ops/s
Iteration  14: 120.355 ops/s
Iteration  15: 120.379 ops/s
Iteration  16: 120.586 ops/s
Iteration  17: 121.637 ops/s
Iteration  18: 120.781 ops/s
Iteration  19: 120.302 ops/s
Iteration  20: 120.041 ops/s
Iteration  21: 120.908 ops/s
Iteration  22: 120.939 ops/s
Iteration  23: 120.550 ops/s
Iteration  24: 121.310 ops/s
Iteration  25: 120.964 ops/s
Iteration  26: 120.617 ops/s
Iteration  27: 121.070 ops/s
Iteration  28: 121.193 ops/s
Iteration  29: 121.591 ops/s
Iteration  30: 120.542 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_sumDoubleConsistentRounding2":
  120.904 ±(99.9%) 0.298 ops/s [Average]
  (min, avg, max) = (120.041, 120.904, 121.820), stdev = 0.446
  CI (99.9%): [120.606, 121.202] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt    Score   Error  Units
ImmutableHashBagTest._Benchmark.benchmark_sumDoubleConsistentRounding2  thrpt   30  120.904 ± 0.298  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_sumFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_sumFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 765034.187 ops/s
# Warmup Iteration   2: 1265640.308 ops/s
# Warmup Iteration   3: 1485670.194 ops/s
# Warmup Iteration   4: 1496101.070 ops/s
# Warmup Iteration   5: 1494203.976 ops/s
# Warmup Iteration   6: 1262343.241 ops/s
# Warmup Iteration   7: 1456057.399 ops/s
# Warmup Iteration   8: 1494297.764 ops/s
# Warmup Iteration   9: 1497412.682 ops/s
# Warmup Iteration  10: 1496994.478 ops/s
# Warmup Iteration  11: 1494976.728 ops/s
# Warmup Iteration  12: 1498634.321 ops/s
# Warmup Iteration  13: 1496326.111 ops/s
# Warmup Iteration  14: 1494037.271 ops/s
# Warmup Iteration  15: 1498142.438 ops/s
# Warmup Iteration  16: 1496184.139 ops/s
# Warmup Iteration  17: 1496341.706 ops/s
# Warmup Iteration  18: 1494887.650 ops/s
# Warmup Iteration  19: 1492306.513 ops/s
# Warmup Iteration  20: 1492562.937 ops/s
# Warmup Iteration  21: 1491763.796 ops/s
# Warmup Iteration  22: 1492197.734 ops/s
# Warmup Iteration  23: 1492673.002 ops/s
# Warmup Iteration  24: 1494411.260 ops/s
# Warmup Iteration  25: 1496011.663 ops/s
# Warmup Iteration  26: 1496710.250 ops/s
# Warmup Iteration  27: 1491195.562 ops/s
# Warmup Iteration  28: 1495476.833 ops/s
# Warmup Iteration  29: 1492896.867 ops/s
# Warmup Iteration  30: 1492818.420 ops/s
Iteration   1: 1487067.076 ops/s
Iteration   2: 1491965.929 ops/s
Iteration   3: 1493535.565 ops/s
Iteration   4: 1492462.802 ops/s
Iteration   5: 1494175.061 ops/s
Iteration   6: 1495073.058 ops/s
Iteration   7: 1490641.552 ops/s
Iteration   8: 1488988.450 ops/s
Iteration   9: 1497386.374 ops/s
Iteration  10: 1490040.707 ops/s
Iteration  11: 1500781.128 ops/s
Iteration  12: 1492514.697 ops/s
Iteration  13: 1494220.279 ops/s
Iteration  14: 1491787.238 ops/s
Iteration  15: 1498679.982 ops/s
Iteration  16: 1492687.931 ops/s
Iteration  17: 1497113.945 ops/s
Iteration  18: 1496525.310 ops/s
Iteration  19: 1499059.893 ops/s
Iteration  20: 1493556.038 ops/s
Iteration  21: 1499002.090 ops/s
Iteration  22: 1490910.926 ops/s
Iteration  23: 1496384.130 ops/s
Iteration  24: 1492510.080 ops/s
Iteration  25: 1493149.618 ops/s
Iteration  26: 1492611.138 ops/s
Iteration  27: 1499477.405 ops/s
Iteration  28: 1493172.009 ops/s
Iteration  29: 1497451.304 ops/s
Iteration  30: 1496512.615 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_sumFloat":
  1494314.811 ±(99.9%) 2251.001 ops/s [Average]
  (min, avg, max) = (1487067.076, 1494314.811, 1500781.128), stdev = 3369.193
  CI (99.9%): [1492063.810, 1496565.812] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_sumFloat  thrpt   30  1494314.811 ± 2251.001  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_sumFloatConsistentRounding1$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_sumFloatConsistentRounding1

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 75.953 ops/s
# Warmup Iteration   2: 86.847 ops/s
# Warmup Iteration   3: 115.742 ops/s
# Warmup Iteration   4: 115.338 ops/s
# Warmup Iteration   5: 116.056 ops/s
# Warmup Iteration   6: 116.005 ops/s
# Warmup Iteration   7: 116.121 ops/s
# Warmup Iteration   8: 115.442 ops/s
# Warmup Iteration   9: 115.768 ops/s
# Warmup Iteration  10: 106.395 ops/s
# Warmup Iteration  11: 107.735 ops/s
# Warmup Iteration  12: 115.851 ops/s
# Warmup Iteration  13: 115.972 ops/s
# Warmup Iteration  14: 115.763 ops/s
# Warmup Iteration  15: 115.895 ops/s
# Warmup Iteration  16: 115.670 ops/s
# Warmup Iteration  17: 116.137 ops/s
# Warmup Iteration  18: 115.765 ops/s
# Warmup Iteration  19: 115.540 ops/s
# Warmup Iteration  20: 115.864 ops/s
# Warmup Iteration  21: 115.314 ops/s
# Warmup Iteration  22: 116.193 ops/s
# Warmup Iteration  23: 115.690 ops/s
# Warmup Iteration  24: 114.958 ops/s
# Warmup Iteration  25: 107.008 ops/s
# Warmup Iteration  26: 106.897 ops/s
# Warmup Iteration  27: 107.064 ops/s
# Warmup Iteration  28: 107.040 ops/s
# Warmup Iteration  29: 106.612 ops/s
# Warmup Iteration  30: 106.988 ops/s
Iteration   1: 106.955 ops/s
Iteration   2: 107.164 ops/s
Iteration   3: 106.924 ops/s
Iteration   4: 106.846 ops/s
Iteration   5: 107.006 ops/s
Iteration   6: 107.010 ops/s
Iteration   7: 107.283 ops/s
Iteration   8: 106.489 ops/s
Iteration   9: 107.444 ops/s
Iteration  10: 107.058 ops/s
Iteration  11: 107.298 ops/s
Iteration  12: 106.849 ops/s
Iteration  13: 107.411 ops/s
Iteration  14: 106.820 ops/s
Iteration  15: 106.549 ops/s
Iteration  16: 106.232 ops/s
Iteration  17: 106.883 ops/s
Iteration  18: 106.742 ops/s
Iteration  19: 106.447 ops/s
Iteration  20: 107.396 ops/s
Iteration  21: 107.811 ops/s
Iteration  22: 107.102 ops/s
Iteration  23: 106.486 ops/s
Iteration  24: 106.881 ops/s
Iteration  25: 106.753 ops/s
Iteration  26: 107.624 ops/s
Iteration  27: 106.767 ops/s
Iteration  28: 107.344 ops/s
Iteration  29: 107.275 ops/s
Iteration  30: 106.689 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_sumFloatConsistentRounding1":
  106.985 ±(99.9%) 0.248 ops/s [Average]
  (min, avg, max) = (106.232, 106.985, 107.811), stdev = 0.371
  CI (99.9%): [106.737, 107.232] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt    Score   Error  Units
ImmutableHashBagTest._Benchmark.benchmark_sumFloatConsistentRounding1  thrpt   30  106.985 ± 0.248  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_sumFloatConsistentRounding2$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_sumFloatConsistentRounding2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 79.623 ops/s
# Warmup Iteration   2: 94.080 ops/s
# Warmup Iteration   3: 122.833 ops/s
# Warmup Iteration   4: 123.734 ops/s
# Warmup Iteration   5: 123.509 ops/s
# Warmup Iteration   6: 123.385 ops/s
# Warmup Iteration   7: 123.661 ops/s
# Warmup Iteration   8: 123.283 ops/s
# Warmup Iteration   9: 123.925 ops/s
# Warmup Iteration  10: 105.015 ops/s
# Warmup Iteration  11: 123.675 ops/s
# Warmup Iteration  12: 123.732 ops/s
# Warmup Iteration  13: 123.267 ops/s
# Warmup Iteration  14: 123.978 ops/s
# Warmup Iteration  15: 123.893 ops/s
# Warmup Iteration  16: 123.612 ops/s
# Warmup Iteration  17: 124.129 ops/s
# Warmup Iteration  18: 123.564 ops/s
# Warmup Iteration  19: 123.707 ops/s
# Warmup Iteration  20: 123.136 ops/s
# Warmup Iteration  21: 123.828 ops/s
# Warmup Iteration  22: 123.777 ops/s
# Warmup Iteration  23: 122.214 ops/s
# Warmup Iteration  24: 121.154 ops/s
# Warmup Iteration  25: 120.933 ops/s
# Warmup Iteration  26: 121.585 ops/s
# Warmup Iteration  27: 121.024 ops/s
# Warmup Iteration  28: 121.293 ops/s
# Warmup Iteration  29: 121.910 ops/s
# Warmup Iteration  30: 121.383 ops/s
Iteration   1: 121.111 ops/s
Iteration   2: 121.851 ops/s
Iteration   3: 121.073 ops/s
Iteration   4: 121.510 ops/s
Iteration   5: 121.407 ops/s
Iteration   6: 121.473 ops/s
Iteration   7: 121.229 ops/s
Iteration   8: 121.433 ops/s
Iteration   9: 120.971 ops/s
Iteration  10: 121.516 ops/s
Iteration  11: 120.958 ops/s
Iteration  12: 121.683 ops/s
Iteration  13: 120.736 ops/s
Iteration  14: 121.868 ops/s
Iteration  15: 121.437 ops/s
Iteration  16: 121.157 ops/s
Iteration  17: 121.232 ops/s
Iteration  18: 121.723 ops/s
Iteration  19: 121.150 ops/s
Iteration  20: 121.606 ops/s
Iteration  21: 121.756 ops/s
Iteration  22: 121.795 ops/s
Iteration  23: 120.935 ops/s
Iteration  24: 121.252 ops/s
Iteration  25: 122.106 ops/s
Iteration  26: 121.913 ops/s
Iteration  27: 121.515 ops/s
Iteration  28: 121.786 ops/s
Iteration  29: 120.838 ops/s
Iteration  30: 121.299 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_sumFloatConsistentRounding2":
  121.411 ±(99.9%) 0.237 ops/s [Average]
  (min, avg, max) = (120.736, 121.411, 122.106), stdev = 0.354
  CI (99.9%): [121.174, 121.647] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt    Score   Error  Units
ImmutableHashBagTest._Benchmark.benchmark_sumFloatConsistentRounding2  thrpt   30  121.411 ± 0.237  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_sumInteger$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_sumInteger

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 814339.139 ops/s
# Warmup Iteration   2: 1345425.714 ops/s
# Warmup Iteration   3: 1571640.843 ops/s
# Warmup Iteration   4: 1582833.046 ops/s
# Warmup Iteration   5: 1578595.924 ops/s
# Warmup Iteration   6: 1320075.230 ops/s
# Warmup Iteration   7: 1558476.457 ops/s
# Warmup Iteration   8: 1580623.688 ops/s
# Warmup Iteration   9: 1580715.217 ops/s
# Warmup Iteration  10: 1579798.164 ops/s
# Warmup Iteration  11: 1581962.283 ops/s
# Warmup Iteration  12: 1579189.290 ops/s
# Warmup Iteration  13: 1580895.127 ops/s
# Warmup Iteration  14: 1577609.171 ops/s
# Warmup Iteration  15: 1580025.192 ops/s
# Warmup Iteration  16: 1581828.325 ops/s
# Warmup Iteration  17: 1581059.625 ops/s
# Warmup Iteration  18: 1574653.016 ops/s
# Warmup Iteration  19: 1582843.719 ops/s
# Warmup Iteration  20: 1581152.041 ops/s
# Warmup Iteration  21: 1580525.133 ops/s
# Warmup Iteration  22: 1579877.637 ops/s
# Warmup Iteration  23: 1576913.043 ops/s
# Warmup Iteration  24: 1580299.579 ops/s
# Warmup Iteration  25: 1581221.544 ops/s
# Warmup Iteration  26: 1582629.396 ops/s
# Warmup Iteration  27: 1581718.292 ops/s
# Warmup Iteration  28: 1579831.912 ops/s
# Warmup Iteration  29: 1578660.877 ops/s
# Warmup Iteration  30: 1579570.712 ops/s
Iteration   1: 1582786.931 ops/s
Iteration   2: 1578675.582 ops/s
Iteration   3: 1584576.625 ops/s
Iteration   4: 1575567.155 ops/s
Iteration   5: 1578932.932 ops/s
Iteration   6: 1576034.087 ops/s
Iteration   7: 1582621.372 ops/s
Iteration   8: 1579812.267 ops/s
Iteration   9: 1577270.365 ops/s
Iteration  10: 1581309.707 ops/s
Iteration  11: 1585295.579 ops/s
Iteration  12: 1579890.540 ops/s
Iteration  13: 1579211.214 ops/s
Iteration  14: 1577677.558 ops/s
Iteration  15: 1582453.205 ops/s
Iteration  16: 1578937.153 ops/s
Iteration  17: 1580703.655 ops/s
Iteration  18: 1576724.269 ops/s
Iteration  19: 1584514.584 ops/s
Iteration  20: 1576127.517 ops/s
Iteration  21: 1581693.702 ops/s
Iteration  22: 1578924.749 ops/s
Iteration  23: 1577619.797 ops/s
Iteration  24: 1579143.386 ops/s
Iteration  25: 1576555.121 ops/s
Iteration  26: 1579529.582 ops/s
Iteration  27: 1577588.326 ops/s
Iteration  28: 1577389.870 ops/s
Iteration  29: 1573988.844 ops/s
Iteration  30: 1576881.647 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_sumInteger":
  1579281.244 ±(99.9%) 1907.464 ops/s [Average]
  (min, avg, max) = (1573988.844, 1579281.244, 1585295.579), stdev = 2855.002
  CI (99.9%): [1577373.780, 1581188.708] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_sumInteger  thrpt   30  1579281.244 ± 1907.464  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_sumLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_sumLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 821542.293 ops/s
# Warmup Iteration   2: 1426610.634 ops/s
# Warmup Iteration   3: 1668322.834 ops/s
# Warmup Iteration   4: 1676809.762 ops/s
# Warmup Iteration   5: 1684088.164 ops/s
# Warmup Iteration   6: 1359772.586 ops/s
# Warmup Iteration   7: 1679686.060 ops/s
# Warmup Iteration   8: 1680464.069 ops/s
# Warmup Iteration   9: 1683526.205 ops/s
# Warmup Iteration  10: 1680632.698 ops/s
# Warmup Iteration  11: 1683560.897 ops/s
# Warmup Iteration  12: 1682081.270 ops/s
# Warmup Iteration  13: 1678995.976 ops/s
# Warmup Iteration  14: 1679009.188 ops/s
# Warmup Iteration  15: 1682401.366 ops/s
# Warmup Iteration  16: 1683154.503 ops/s
# Warmup Iteration  17: 1681507.490 ops/s
# Warmup Iteration  18: 1678171.416 ops/s
# Warmup Iteration  19: 1682818.917 ops/s
# Warmup Iteration  20: 1681488.103 ops/s
# Warmup Iteration  21: 1680674.978 ops/s
# Warmup Iteration  22: 1683235.176 ops/s
# Warmup Iteration  23: 1678342.718 ops/s
# Warmup Iteration  24: 1681932.941 ops/s
# Warmup Iteration  25: 1682504.645 ops/s
# Warmup Iteration  26: 1680587.722 ops/s
# Warmup Iteration  27: 1684836.321 ops/s
# Warmup Iteration  28: 1678726.988 ops/s
# Warmup Iteration  29: 1681617.705 ops/s
# Warmup Iteration  30: 1678284.718 ops/s
Iteration   1: 1679456.749 ops/s
Iteration   2: 1680000.416 ops/s
Iteration   3: 1684380.821 ops/s
Iteration   4: 1683654.832 ops/s
Iteration   5: 1680622.475 ops/s
Iteration   6: 1677351.703 ops/s
Iteration   7: 1679443.430 ops/s
Iteration   8: 1684936.424 ops/s
Iteration   9: 1684441.980 ops/s
Iteration  10: 1678451.940 ops/s
Iteration  11: 1672327.032 ops/s
Iteration  12: 1689086.881 ops/s
Iteration  13: 1680323.430 ops/s
Iteration  14: 1685696.290 ops/s
Iteration  15: 1673637.356 ops/s
Iteration  16: 1685378.212 ops/s
Iteration  17: 1685684.703 ops/s
Iteration  18: 1682181.375 ops/s
Iteration  19: 1682849.832 ops/s
Iteration  20: 1681020.283 ops/s
Iteration  21: 1685193.253 ops/s
Iteration  22: 1674929.681 ops/s
Iteration  23: 1684950.760 ops/s
Iteration  24: 1683473.998 ops/s
Iteration  25: 1676270.208 ops/s
Iteration  26: 1681246.068 ops/s
Iteration  27: 1684017.091 ops/s
Iteration  28: 1681322.186 ops/s
Iteration  29: 1677042.542 ops/s
Iteration  30: 1686321.343 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_sumLong":
  1681523.110 ±(99.9%) 2713.634 ops/s [Average]
  (min, avg, max) = (1672327.032, 1681523.110, 1689086.881), stdev = 4061.639
  CI (99.9%): [1678809.476, 1684236.743] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_sumLong  thrpt   30  1681523.110 ± 2713.634  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_summarizeDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_summarizeDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2173421.022 ops/s
# Warmup Iteration   2: 4203650.807 ops/s
# Warmup Iteration   3: 4473690.824 ops/s
# Warmup Iteration   4: 4507548.195 ops/s
# Warmup Iteration   5: 3726021.844 ops/s
# Warmup Iteration   6: 4513483.724 ops/s
# Warmup Iteration   7: 4516980.741 ops/s
# Warmup Iteration   8: 4508789.382 ops/s
# Warmup Iteration   9: 4502110.155 ops/s
# Warmup Iteration  10: 4513333.013 ops/s
# Warmup Iteration  11: 4507304.895 ops/s
# Warmup Iteration  12: 4517629.075 ops/s
# Warmup Iteration  13: 4510871.386 ops/s
# Warmup Iteration  14: 4502830.566 ops/s
# Warmup Iteration  15: 4512036.076 ops/s
# Warmup Iteration  16: 4510430.894 ops/s
# Warmup Iteration  17: 4514993.725 ops/s
# Warmup Iteration  18: 4516249.193 ops/s
# Warmup Iteration  19: 4507280.620 ops/s
# Warmup Iteration  20: 4513388.097 ops/s
# Warmup Iteration  21: 4514891.356 ops/s
# Warmup Iteration  22: 4507168.171 ops/s
# Warmup Iteration  23: 4514253.877 ops/s
# Warmup Iteration  24: 4509198.167 ops/s
# Warmup Iteration  25: 4506360.852 ops/s
# Warmup Iteration  26: 4517054.062 ops/s
# Warmup Iteration  27: 4506975.172 ops/s
# Warmup Iteration  28: 4505426.756 ops/s
# Warmup Iteration  29: 4510956.831 ops/s
# Warmup Iteration  30: 4517809.749 ops/s
Iteration   1: 4523127.359 ops/s
Iteration   2: 4519695.282 ops/s
Iteration   3: 4514932.324 ops/s
Iteration   4: 4512069.142 ops/s
Iteration   5: 4515376.501 ops/s
Iteration   6: 4524980.981 ops/s
Iteration   7: 4510338.287 ops/s
Iteration   8: 4509339.956 ops/s
Iteration   9: 4505404.910 ops/s
Iteration  10: 4495856.463 ops/s
Iteration  11: 4521400.210 ops/s
Iteration  12: 4505207.346 ops/s
Iteration  13: 4510745.028 ops/s
Iteration  14: 4510518.328 ops/s
Iteration  15: 4513575.285 ops/s
Iteration  16: 4518632.509 ops/s
Iteration  17: 4522076.872 ops/s
Iteration  18: 4521092.428 ops/s
Iteration  19: 4514552.088 ops/s
Iteration  20: 4498414.398 ops/s
Iteration  21: 4516505.062 ops/s
Iteration  22: 4510986.570 ops/s
Iteration  23: 4504622.341 ops/s
Iteration  24: 4515675.884 ops/s
Iteration  25: 4493629.393 ops/s
Iteration  26: 4512367.553 ops/s
Iteration  27: 4521200.332 ops/s
Iteration  28: 4492335.567 ops/s
Iteration  29: 4509013.317 ops/s
Iteration  30: 4514667.711 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_summarizeDouble":
  4511944.648 ±(99.9%) 5765.634 ops/s [Average]
  (min, avg, max) = (4492335.567, 4511944.648, 4524980.981), stdev = 8629.730
  CI (99.9%): [4506179.014, 4517710.281] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_summarizeDouble  thrpt   30  4511944.648 ± 5765.634  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_summarizeFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_summarizeFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2143045.636 ops/s
# Warmup Iteration   2: 4098351.925 ops/s
# Warmup Iteration   3: 4422554.029 ops/s
# Warmup Iteration   4: 4430239.953 ops/s
# Warmup Iteration   5: 3674864.524 ops/s
# Warmup Iteration   6: 4464870.477 ops/s
# Warmup Iteration   7: 4456980.859 ops/s
# Warmup Iteration   8: 4452717.543 ops/s
# Warmup Iteration   9: 4455278.110 ops/s
# Warmup Iteration  10: 4461753.154 ops/s
# Warmup Iteration  11: 4447184.913 ops/s
# Warmup Iteration  12: 4447495.630 ops/s
# Warmup Iteration  13: 4454964.710 ops/s
# Warmup Iteration  14: 4453947.914 ops/s
# Warmup Iteration  15: 4461445.136 ops/s
# Warmup Iteration  16: 4459360.749 ops/s
# Warmup Iteration  17: 4454930.178 ops/s
# Warmup Iteration  18: 4459894.827 ops/s
# Warmup Iteration  19: 4456721.694 ops/s
# Warmup Iteration  20: 4455102.585 ops/s
# Warmup Iteration  21: 4460052.915 ops/s
# Warmup Iteration  22: 4451928.286 ops/s
# Warmup Iteration  23: 4457758.641 ops/s
# Warmup Iteration  24: 4451384.930 ops/s
# Warmup Iteration  25: 4447997.722 ops/s
# Warmup Iteration  26: 4451399.828 ops/s
# Warmup Iteration  27: 4450863.733 ops/s
# Warmup Iteration  28: 4459516.377 ops/s
# Warmup Iteration  29: 4449469.925 ops/s
# Warmup Iteration  30: 4450872.474 ops/s
Iteration   1: 4459037.268 ops/s
Iteration   2: 4455300.867 ops/s
Iteration   3: 4448164.276 ops/s
Iteration   4: 4465652.593 ops/s
Iteration   5: 4462796.743 ops/s
Iteration   6: 4455852.243 ops/s
Iteration   7: 4461827.291 ops/s
Iteration   8: 4459624.304 ops/s
Iteration   9: 4449296.859 ops/s
Iteration  10: 4466864.181 ops/s
Iteration  11: 4457903.844 ops/s
Iteration  12: 4458743.210 ops/s
Iteration  13: 4468906.001 ops/s
Iteration  14: 4445551.808 ops/s
Iteration  15: 4464920.898 ops/s
Iteration  16: 4463132.499 ops/s
Iteration  17: 4456780.260 ops/s
Iteration  18: 4454952.304 ops/s
Iteration  19: 4462912.325 ops/s
Iteration  20: 4459976.351 ops/s
Iteration  21: 4459584.110 ops/s
Iteration  22: 4440293.144 ops/s
Iteration  23: 4452592.102 ops/s
Iteration  24: 4457336.050 ops/s
Iteration  25: 4440388.996 ops/s
Iteration  26: 4462203.489 ops/s
Iteration  27: 4452406.474 ops/s
Iteration  28: 4463976.180 ops/s
Iteration  29: 4446636.186 ops/s
Iteration  30: 4456107.866 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_summarizeFloat":
  4456990.691 ±(99.9%) 4951.919 ops/s [Average]
  (min, avg, max) = (4440293.144, 4456990.691, 4468906.001), stdev = 7411.800
  CI (99.9%): [4452038.772, 4461942.610] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_summarizeFloat  thrpt   30  4456990.691 ± 4951.919  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_summarizeInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_summarizeInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2111176.959 ops/s
# Warmup Iteration   2: 3921078.175 ops/s
# Warmup Iteration   3: 4330198.115 ops/s
# Warmup Iteration   4: 4360711.372 ops/s
# Warmup Iteration   5: 3588319.260 ops/s
# Warmup Iteration   6: 4382144.835 ops/s
# Warmup Iteration   7: 4383691.555 ops/s
# Warmup Iteration   8: 4376805.591 ops/s
# Warmup Iteration   9: 4361960.314 ops/s
# Warmup Iteration  10: 4374149.417 ops/s
# Warmup Iteration  11: 4377754.951 ops/s
# Warmup Iteration  12: 4373346.505 ops/s
# Warmup Iteration  13: 4384516.009 ops/s
# Warmup Iteration  14: 4377598.441 ops/s
# Warmup Iteration  15: 4369099.047 ops/s
# Warmup Iteration  16: 4382445.841 ops/s
# Warmup Iteration  17: 4380377.506 ops/s
# Warmup Iteration  18: 4384493.533 ops/s
# Warmup Iteration  19: 4379572.856 ops/s
# Warmup Iteration  20: 4377867.749 ops/s
# Warmup Iteration  21: 4376579.890 ops/s
# Warmup Iteration  22: 4372738.737 ops/s
# Warmup Iteration  23: 4376229.878 ops/s
# Warmup Iteration  24: 4380506.632 ops/s
# Warmup Iteration  25: 4375974.945 ops/s
# Warmup Iteration  26: 4374179.215 ops/s
# Warmup Iteration  27: 4383025.041 ops/s
# Warmup Iteration  28: 4388709.938 ops/s
# Warmup Iteration  29: 4377861.733 ops/s
# Warmup Iteration  30: 4385586.419 ops/s
Iteration   1: 4377626.872 ops/s
Iteration   2: 4375576.785 ops/s
Iteration   3: 4372780.479 ops/s
Iteration   4: 4357971.102 ops/s
Iteration   5: 4390934.119 ops/s
Iteration   6: 4376158.933 ops/s
Iteration   7: 4377563.894 ops/s
Iteration   8: 4390015.369 ops/s
Iteration   9: 4371595.697 ops/s
Iteration  10: 4381005.759 ops/s
Iteration  11: 4397746.345 ops/s
Iteration  12: 4369677.778 ops/s
Iteration  13: 4392418.609 ops/s
Iteration  14: 4384265.316 ops/s
Iteration  15: 4377217.641 ops/s
Iteration  16: 4377220.975 ops/s
Iteration  17: 4373717.591 ops/s
Iteration  18: 4372501.172 ops/s
Iteration  19: 4384395.648 ops/s
Iteration  20: 4382614.727 ops/s
Iteration  21: 4383204.494 ops/s
Iteration  22: 4384499.997 ops/s
Iteration  23: 4370203.810 ops/s
Iteration  24: 4367379.295 ops/s
Iteration  25: 4389616.475 ops/s
Iteration  26: 4377391.046 ops/s
Iteration  27: 4367388.584 ops/s
Iteration  28: 4386296.753 ops/s
Iteration  29: 4386799.913 ops/s
Iteration  30: 4368478.222 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_summarizeInt":
  4378808.780 ±(99.9%) 5983.726 ops/s [Average]
  (min, avg, max) = (4357971.102, 4378808.780, 4397746.345), stdev = 8956.161
  CI (99.9%): [4372825.054, 4384792.506] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_summarizeInt  thrpt   30  4378808.780 ± 5983.726  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_summarizeLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_summarizeLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2082541.522 ops/s
# Warmup Iteration   2: 3962247.078 ops/s
# Warmup Iteration   3: 4303002.170 ops/s
# Warmup Iteration   4: 4329174.794 ops/s
# Warmup Iteration   5: 3571947.999 ops/s
# Warmup Iteration   6: 4331992.501 ops/s
# Warmup Iteration   7: 4338890.005 ops/s
# Warmup Iteration   8: 4330539.609 ops/s
# Warmup Iteration   9: 4332809.155 ops/s
# Warmup Iteration  10: 4336332.499 ops/s
# Warmup Iteration  11: 4328710.690 ops/s
# Warmup Iteration  12: 4334081.670 ops/s
# Warmup Iteration  13: 4339075.129 ops/s
# Warmup Iteration  14: 4331553.623 ops/s
# Warmup Iteration  15: 4332723.551 ops/s
# Warmup Iteration  16: 4339437.897 ops/s
# Warmup Iteration  17: 4305107.811 ops/s
# Warmup Iteration  18: 4305980.572 ops/s
# Warmup Iteration  19: 4293359.474 ops/s
# Warmup Iteration  20: 4309934.657 ops/s
# Warmup Iteration  21: 4310163.166 ops/s
# Warmup Iteration  22: 4307363.708 ops/s
# Warmup Iteration  23: 4311535.383 ops/s
# Warmup Iteration  24: 4307159.240 ops/s
# Warmup Iteration  25: 4306588.171 ops/s
# Warmup Iteration  26: 4312153.379 ops/s
# Warmup Iteration  27: 4307627.589 ops/s
# Warmup Iteration  28: 4308479.454 ops/s
# Warmup Iteration  29: 4306882.211 ops/s
# Warmup Iteration  30: 4308698.612 ops/s
Iteration   1: 4297498.347 ops/s
Iteration   2: 4300287.552 ops/s
Iteration   3: 4305556.383 ops/s
Iteration   4: 4317258.284 ops/s
Iteration   5: 4308303.415 ops/s
Iteration   6: 4306556.548 ops/s
Iteration   7: 4304314.565 ops/s
Iteration   8: 4303211.600 ops/s
Iteration   9: 4307791.797 ops/s
Iteration  10: 4298043.375 ops/s
Iteration  11: 4319867.558 ops/s
Iteration  12: 4301072.582 ops/s
Iteration  13: 4308036.745 ops/s
Iteration  14: 4311854.095 ops/s
Iteration  15: 4281854.266 ops/s
Iteration  16: 4309304.620 ops/s
Iteration  17: 4308339.716 ops/s
Iteration  18: 4295478.745 ops/s
Iteration  19: 4304079.297 ops/s
Iteration  20: 4306240.556 ops/s
Iteration  21: 4306338.575 ops/s
Iteration  22: 4280639.488 ops/s
Iteration  23: 4312274.334 ops/s
Iteration  24: 4310039.919 ops/s
Iteration  25: 4297813.964 ops/s
Iteration  26: 4314325.540 ops/s
Iteration  27: 4294734.459 ops/s
Iteration  28: 4306086.160 ops/s
Iteration  29: 4306251.601 ops/s
Iteration  30: 4305557.574 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_summarizeLong":
  4304300.389 ±(99.9%) 5765.068 ops/s [Average]
  (min, avg, max) = (4280639.488, 4304300.389, 4319867.558), stdev = 8628.882
  CI (99.9%): [4298535.321, 4310065.456] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_summarizeLong  thrpt   30  4304300.389 ± 5765.068  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_tap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_tap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 702484.940 ops/s
# Warmup Iteration   2: 1239985.373 ops/s
# Warmup Iteration   3: 1439331.678 ops/s
# Warmup Iteration   4: 1442840.181 ops/s
# Warmup Iteration   5: 1444654.389 ops/s
# Warmup Iteration   6: 1177764.203 ops/s
# Warmup Iteration   7: 1444221.386 ops/s
# Warmup Iteration   8: 1447474.572 ops/s
# Warmup Iteration   9: 1444030.908 ops/s
# Warmup Iteration  10: 1443610.354 ops/s
# Warmup Iteration  11: 1447466.025 ops/s
# Warmup Iteration  12: 1447504.860 ops/s
# Warmup Iteration  13: 1446886.575 ops/s
# Warmup Iteration  14: 1446900.726 ops/s
# Warmup Iteration  15: 1444159.103 ops/s
# Warmup Iteration  16: 1446813.282 ops/s
# Warmup Iteration  17: 1445563.951 ops/s
# Warmup Iteration  18: 1444004.079 ops/s
# Warmup Iteration  19: 1448454.989 ops/s
# Warmup Iteration  20: 1446342.719 ops/s
# Warmup Iteration  21: 1444880.192 ops/s
# Warmup Iteration  22: 1447600.905 ops/s
# Warmup Iteration  23: 1444241.363 ops/s
# Warmup Iteration  24: 1446760.210 ops/s
# Warmup Iteration  25: 1446784.192 ops/s
# Warmup Iteration  26: 1446378.351 ops/s
# Warmup Iteration  27: 1445038.691 ops/s
# Warmup Iteration  28: 1446235.533 ops/s
# Warmup Iteration  29: 1448272.214 ops/s
# Warmup Iteration  30: 1449055.451 ops/s
Iteration   1: 1443804.775 ops/s
Iteration   2: 1442909.116 ops/s
Iteration   3: 1445437.234 ops/s
Iteration   4: 1444367.710 ops/s
Iteration   5: 1447389.291 ops/s
Iteration   6: 1452503.466 ops/s
Iteration   7: 1449572.834 ops/s
Iteration   8: 1441363.894 ops/s
Iteration   9: 1450958.160 ops/s
Iteration  10: 1443614.926 ops/s
Iteration  11: 1445442.968 ops/s
Iteration  12: 1451656.073 ops/s
Iteration  13: 1443111.430 ops/s
Iteration  14: 1443928.417 ops/s
Iteration  15: 1443959.251 ops/s
Iteration  16: 1444664.236 ops/s
Iteration  17: 1446779.236 ops/s
Iteration  18: 1440921.011 ops/s
Iteration  19: 1448662.839 ops/s
Iteration  20: 1444384.993 ops/s
Iteration  21: 1448714.687 ops/s
Iteration  22: 1439124.954 ops/s
Iteration  23: 1447216.949 ops/s
Iteration  24: 1440093.023 ops/s
Iteration  25: 1443907.651 ops/s
Iteration  26: 1447666.320 ops/s
Iteration  27: 1443348.990 ops/s
Iteration  28: 1447303.624 ops/s
Iteration  29: 1446465.009 ops/s
Iteration  30: 1449615.808 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_tap":
  1445629.629 ±(99.9%) 2250.902 ops/s [Average]
  (min, avg, max) = (1439124.954, 1445629.629, 1452503.466), stdev = 3369.045
  CI (99.9%): [1443378.727, 1447880.531] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_tap  thrpt   30  1445629.629 ± 2250.902  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_testNewBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_testNewBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1236091.784 ops/s
# Warmup Iteration   2: 2176681.708 ops/s
# Warmup Iteration   3: 2418670.951 ops/s
# Warmup Iteration   4: 2426207.214 ops/s
# Warmup Iteration   5: 2430603.232 ops/s
# Warmup Iteration   6: 1988088.732 ops/s
# Warmup Iteration   7: 2427266.156 ops/s
# Warmup Iteration   8: 2428400.193 ops/s
# Warmup Iteration   9: 2426615.054 ops/s
# Warmup Iteration  10: 2429285.788 ops/s
# Warmup Iteration  11: 2428267.987 ops/s
# Warmup Iteration  12: 2428260.348 ops/s
# Warmup Iteration  13: 2427497.872 ops/s
# Warmup Iteration  14: 2424984.008 ops/s
# Warmup Iteration  15: 2424369.157 ops/s
# Warmup Iteration  16: 2429016.928 ops/s
# Warmup Iteration  17: 2423368.869 ops/s
# Warmup Iteration  18: 2427399.724 ops/s
# Warmup Iteration  19: 2427815.093 ops/s
# Warmup Iteration  20: 2426642.343 ops/s
# Warmup Iteration  21: 2427374.447 ops/s
# Warmup Iteration  22: 2431537.835 ops/s
# Warmup Iteration  23: 2433381.738 ops/s
# Warmup Iteration  24: 2432333.750 ops/s
# Warmup Iteration  25: 2432448.098 ops/s
# Warmup Iteration  26: 2430012.754 ops/s
# Warmup Iteration  27: 2434064.881 ops/s
# Warmup Iteration  28: 2435698.002 ops/s
# Warmup Iteration  29: 2434885.909 ops/s
# Warmup Iteration  30: 2430652.751 ops/s
Iteration   1: 2425255.186 ops/s
Iteration   2: 2431828.011 ops/s
Iteration   3: 2426581.637 ops/s
Iteration   4: 2431561.932 ops/s
Iteration   5: 2429870.173 ops/s
Iteration   6: 2435027.142 ops/s
Iteration   7: 2432989.052 ops/s
Iteration   8: 2428401.975 ops/s
Iteration   9: 2432854.036 ops/s
Iteration  10: 2435978.714 ops/s
Iteration  11: 2433981.444 ops/s
Iteration  12: 2421450.510 ops/s
Iteration  13: 2428481.039 ops/s
Iteration  14: 2428728.874 ops/s
Iteration  15: 2434418.395 ops/s
Iteration  16: 2431144.104 ops/s
Iteration  17: 2423983.901 ops/s
Iteration  18: 2434288.882 ops/s
Iteration  19: 2425745.421 ops/s
Iteration  20: 2438394.931 ops/s
Iteration  21: 2428539.060 ops/s
Iteration  22: 2428777.707 ops/s
Iteration  23: 2433761.007 ops/s
Iteration  24: 2427451.866 ops/s
Iteration  25: 2436878.748 ops/s
Iteration  26: 2428470.542 ops/s
Iteration  27: 2435353.842 ops/s
Iteration  28: 2435270.450 ops/s
Iteration  29: 2432890.330 ops/s
Iteration  30: 2426698.510 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_testNewBag":
  2430835.247 ±(99.9%) 2791.336 ops/s [Average]
  (min, avg, max) = (2421450.510, 2430835.247, 2438394.931), stdev = 4177.940
  CI (99.9%): [2428043.912, 2433626.583] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_testNewBag  thrpt   30  2430835.247 ± 2791.336  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_testNewCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_testNewCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6122121.021 ops/s
# Warmup Iteration   2: 12673088.062 ops/s
# Warmup Iteration   3: 10764087.916 ops/s
# Warmup Iteration   4: 12817135.178 ops/s
# Warmup Iteration   5: 12811690.183 ops/s
# Warmup Iteration   6: 12797271.509 ops/s
# Warmup Iteration   7: 12788222.121 ops/s
# Warmup Iteration   8: 12798871.347 ops/s
# Warmup Iteration   9: 12766740.503 ops/s
# Warmup Iteration  10: 12796191.530 ops/s
# Warmup Iteration  11: 12800760.025 ops/s
# Warmup Iteration  12: 12787020.020 ops/s
# Warmup Iteration  13: 12808696.856 ops/s
# Warmup Iteration  14: 12798027.924 ops/s
# Warmup Iteration  15: 12806301.047 ops/s
# Warmup Iteration  16: 12816330.994 ops/s
# Warmup Iteration  17: 12755706.039 ops/s
# Warmup Iteration  18: 12742317.722 ops/s
# Warmup Iteration  19: 12739657.511 ops/s
# Warmup Iteration  20: 12716137.284 ops/s
# Warmup Iteration  21: 12724930.944 ops/s
# Warmup Iteration  22: 12690806.286 ops/s
# Warmup Iteration  23: 12745293.025 ops/s
# Warmup Iteration  24: 12733978.705 ops/s
# Warmup Iteration  25: 12723893.280 ops/s
# Warmup Iteration  26: 12746550.107 ops/s
# Warmup Iteration  27: 12728668.399 ops/s
# Warmup Iteration  28: 12732274.417 ops/s
# Warmup Iteration  29: 12727964.122 ops/s
# Warmup Iteration  30: 12729606.838 ops/s
Iteration   1: 12740009.622 ops/s
Iteration   2: 12712132.856 ops/s
Iteration   3: 12758209.163 ops/s
Iteration   4: 12729105.013 ops/s
Iteration   5: 12732248.963 ops/s
Iteration   6: 12751477.489 ops/s
Iteration   7: 12728442.376 ops/s
Iteration   8: 12765086.909 ops/s
Iteration   9: 12734507.114 ops/s
Iteration  10: 12746412.819 ops/s
Iteration  11: 12767400.983 ops/s
Iteration  12: 12747087.181 ops/s
Iteration  13: 12732976.903 ops/s
Iteration  14: 12799313.492 ops/s
Iteration  15: 12714426.752 ops/s
Iteration  16: 12696251.022 ops/s
Iteration  17: 12739029.524 ops/s
Iteration  18: 12698982.497 ops/s
Iteration  19: 12701189.906 ops/s
Iteration  20: 12704192.689 ops/s
Iteration  21: 12733912.007 ops/s
Iteration  22: 12653153.453 ops/s
Iteration  23: 12739019.688 ops/s
Iteration  24: 12724512.616 ops/s
Iteration  25: 12738065.421 ops/s
Iteration  26: 12750836.579 ops/s
Iteration  27: 12774629.740 ops/s
Iteration  28: 12735644.170 ops/s
Iteration  29: 12725800.418 ops/s
Iteration  30: 12729456.975 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_testNewCollection":
  12733450.478 ±(99.9%) 18337.589 ops/s [Average]
  (min, avg, max) = (12653153.453, 12733450.478, 12799313.492), stdev = 27446.842
  CI (99.9%): [12715112.889, 12751788.067] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
ImmutableHashBagTest._Benchmark.benchmark_testNewCollection  thrpt   30  12733450.478 ± 18337.589  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_testSize$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_testSize

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1844583.036 ops/s
# Warmup Iteration   2: 3600929.063 ops/s
# Warmup Iteration   3: 3818573.285 ops/s
# Warmup Iteration   4: 3847341.344 ops/s
# Warmup Iteration   5: 3170800.535 ops/s
# Warmup Iteration   6: 3854717.770 ops/s
# Warmup Iteration   7: 3848257.228 ops/s
# Warmup Iteration   8: 3844334.388 ops/s
# Warmup Iteration   9: 3846919.408 ops/s
# Warmup Iteration  10: 3844037.828 ops/s
# Warmup Iteration  11: 3847310.596 ops/s
# Warmup Iteration  12: 3852016.610 ops/s
# Warmup Iteration  13: 3849407.385 ops/s
# Warmup Iteration  14: 3851630.935 ops/s
# Warmup Iteration  15: 3852487.208 ops/s
# Warmup Iteration  16: 3845791.309 ops/s
# Warmup Iteration  17: 3826486.487 ops/s
# Warmup Iteration  18: 3842407.020 ops/s
# Warmup Iteration  19: 3849713.702 ops/s
# Warmup Iteration  20: 3841944.536 ops/s
# Warmup Iteration  21: 3839977.261 ops/s
# Warmup Iteration  22: 3848747.594 ops/s
# Warmup Iteration  23: 3844948.557 ops/s
# Warmup Iteration  24: 3840767.763 ops/s
# Warmup Iteration  25: 3843296.778 ops/s
# Warmup Iteration  26: 3844751.181 ops/s
# Warmup Iteration  27: 3847960.242 ops/s
# Warmup Iteration  28: 3849550.460 ops/s
# Warmup Iteration  29: 3849864.116 ops/s
# Warmup Iteration  30: 3833364.826 ops/s
Iteration   1: 3850618.359 ops/s
Iteration   2: 3825799.468 ops/s
Iteration   3: 3839897.514 ops/s
Iteration   4: 3836669.551 ops/s
Iteration   5: 3855133.348 ops/s
Iteration   6: 3844591.165 ops/s
Iteration   7: 3855489.922 ops/s
Iteration   8: 3845520.616 ops/s
Iteration   9: 3836908.065 ops/s
Iteration  10: 3844713.484 ops/s
Iteration  11: 3850611.680 ops/s
Iteration  12: 3840574.623 ops/s
Iteration  13: 3831264.066 ops/s
Iteration  14: 3845880.106 ops/s
Iteration  15: 3850225.365 ops/s
Iteration  16: 3844351.023 ops/s
Iteration  17: 3846842.493 ops/s
Iteration  18: 3836940.205 ops/s
Iteration  19: 3838902.015 ops/s
Iteration  20: 3853366.901 ops/s
Iteration  21: 3852923.850 ops/s
Iteration  22: 3847941.572 ops/s
Iteration  23: 3830367.663 ops/s
Iteration  24: 3838141.988 ops/s
Iteration  25: 3840342.861 ops/s
Iteration  26: 3833432.488 ops/s
Iteration  27: 3840085.868 ops/s
Iteration  28: 3847685.696 ops/s
Iteration  29: 3852153.581 ops/s
Iteration  30: 3842228.626 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_testSize":
  3843320.139 ±(99.9%) 5133.086 ops/s [Average]
  (min, avg, max) = (3825799.468, 3843320.139, 3855489.922), stdev = 7682.963
  CI (99.9%): [3838187.052, 3848453.225] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_testSize  thrpt   30  3843320.139 ± 5133.086  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 584103.692 ops/s
# Warmup Iteration   2: 981391.240 ops/s
# Warmup Iteration   3: 1113264.995 ops/s
# Warmup Iteration   4: 1117383.721 ops/s
# Warmup Iteration   5: 1119011.998 ops/s
# Warmup Iteration   6: 925649.528 ops/s
# Warmup Iteration   7: 1118850.076 ops/s
# Warmup Iteration   8: 1117622.553 ops/s
# Warmup Iteration   9: 1117726.196 ops/s
# Warmup Iteration  10: 1116901.074 ops/s
# Warmup Iteration  11: 1116868.406 ops/s
# Warmup Iteration  12: 1119709.232 ops/s
# Warmup Iteration  13: 1115780.820 ops/s
# Warmup Iteration  14: 1116721.706 ops/s
# Warmup Iteration  15: 1117427.157 ops/s
# Warmup Iteration  16: 1117784.529 ops/s
# Warmup Iteration  17: 1110340.225 ops/s
# Warmup Iteration  18: 1112630.167 ops/s
# Warmup Iteration  19: 1107237.531 ops/s
# Warmup Iteration  20: 1109345.386 ops/s
# Warmup Iteration  21: 1111639.278 ops/s
# Warmup Iteration  22: 1111883.778 ops/s
# Warmup Iteration  23: 1113662.845 ops/s
# Warmup Iteration  24: 1109873.049 ops/s
# Warmup Iteration  25: 1109553.829 ops/s
# Warmup Iteration  26: 1111252.079 ops/s
# Warmup Iteration  27: 1110757.271 ops/s
# Warmup Iteration  28: 1112739.026 ops/s
# Warmup Iteration  29: 1111993.959 ops/s
# Warmup Iteration  30: 1110229.309 ops/s
Iteration   1: 1111026.101 ops/s
Iteration   2: 1114236.852 ops/s
Iteration   3: 1110972.226 ops/s
Iteration   4: 1113779.818 ops/s
Iteration   5: 1111437.414 ops/s
Iteration   6: 1111061.017 ops/s
Iteration   7: 1110797.150 ops/s
Iteration   8: 1113676.065 ops/s
Iteration   9: 1110929.910 ops/s
Iteration  10: 1113158.525 ops/s
Iteration  11: 1110790.291 ops/s
Iteration  12: 1110105.045 ops/s
Iteration  13: 1114095.578 ops/s
Iteration  14: 1107751.028 ops/s
Iteration  15: 1112445.742 ops/s
Iteration  16: 1109873.551 ops/s
Iteration  17: 1115165.303 ops/s
Iteration  18: 1110556.286 ops/s
Iteration  19: 1113332.535 ops/s
Iteration  20: 1110842.821 ops/s
Iteration  21: 1114670.418 ops/s
Iteration  22: 1110737.520 ops/s
Iteration  23: 1111299.716 ops/s
Iteration  24: 1113519.162 ops/s
Iteration  25: 1110962.628 ops/s
Iteration  26: 1113495.532 ops/s
Iteration  27: 1113011.785 ops/s
Iteration  28: 1109787.911 ops/s
Iteration  29: 1106070.677 ops/s
Iteration  30: 1114414.823 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_testToString":
  1111800.114 ±(99.9%) 1393.174 ops/s [Average]
  (min, avg, max) = (1106070.677, 1111800.114, 1115165.303), stdev = 2085.238
  CI (99.9%): [1110406.940, 1113193.289] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_testToString  thrpt   30  1111800.114 ± 1393.174  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 702793.787 ops/s
# Warmup Iteration   2: 1352239.007 ops/s
# Warmup Iteration   3: 1468329.723 ops/s
# Warmup Iteration   4: 1479356.554 ops/s
# Warmup Iteration   5: 1271739.819 ops/s
# Warmup Iteration   6: 1414884.558 ops/s
# Warmup Iteration   7: 1479051.041 ops/s
# Warmup Iteration   8: 1473970.118 ops/s
# Warmup Iteration   9: 1475182.237 ops/s
# Warmup Iteration  10: 1475306.098 ops/s
# Warmup Iteration  11: 1477589.255 ops/s
# Warmup Iteration  12: 1478193.090 ops/s
# Warmup Iteration  13: 1476091.762 ops/s
# Warmup Iteration  14: 1475020.811 ops/s
# Warmup Iteration  15: 1476469.120 ops/s
# Warmup Iteration  16: 1474021.913 ops/s
# Warmup Iteration  17: 1475231.739 ops/s
# Warmup Iteration  18: 1477402.593 ops/s
# Warmup Iteration  19: 1480351.248 ops/s
# Warmup Iteration  20: 1480996.890 ops/s
# Warmup Iteration  21: 1479878.614 ops/s
# Warmup Iteration  22: 1478335.257 ops/s
# Warmup Iteration  23: 1475369.882 ops/s
# Warmup Iteration  24: 1480748.155 ops/s
# Warmup Iteration  25: 1480677.519 ops/s
# Warmup Iteration  26: 1478386.688 ops/s
# Warmup Iteration  27: 1480785.280 ops/s
# Warmup Iteration  28: 1477729.344 ops/s
# Warmup Iteration  29: 1479956.497 ops/s
# Warmup Iteration  30: 1481624.231 ops/s
Iteration   1: 1474683.211 ops/s
Iteration   2: 1483022.084 ops/s
Iteration   3: 1478685.805 ops/s
Iteration   4: 1479711.452 ops/s
Iteration   5: 1481743.711 ops/s
Iteration   6: 1477717.405 ops/s
Iteration   7: 1482271.950 ops/s
Iteration   8: 1477009.767 ops/s
Iteration   9: 1476480.818 ops/s
Iteration  10: 1480200.396 ops/s
Iteration  11: 1480824.416 ops/s
Iteration  12: 1478734.328 ops/s
Iteration  13: 1481017.872 ops/s
Iteration  14: 1478417.728 ops/s
Iteration  15: 1478826.101 ops/s
Iteration  16: 1476767.169 ops/s
Iteration  17: 1475492.229 ops/s
Iteration  18: 1479505.953 ops/s
Iteration  19: 1479237.100 ops/s
Iteration  20: 1477415.578 ops/s
Iteration  21: 1482187.382 ops/s
Iteration  22: 1470400.161 ops/s
Iteration  23: 1477781.121 ops/s
Iteration  24: 1481444.400 ops/s
Iteration  25: 1474455.349 ops/s
Iteration  26: 1478710.903 ops/s
Iteration  27: 1483088.346 ops/s
Iteration  28: 1478253.347 ops/s
Iteration  29: 1480353.532 ops/s
Iteration  30: 1476841.350 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toArray":
  1478709.365 ±(99.9%) 1875.569 ops/s [Average]
  (min, avg, max) = (1470400.161, 1478709.365, 1483088.346), stdev = 2807.263
  CI (99.9%): [1476833.797, 1480584.934] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_toArray  thrpt   30  1478709.365 ± 1875.569  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 450533.767 ops/s
# Warmup Iteration   2: 755120.431 ops/s
# Warmup Iteration   3: 873234.927 ops/s
# Warmup Iteration   4: 878418.342 ops/s
# Warmup Iteration   5: 878083.597 ops/s
# Warmup Iteration   6: 723395.968 ops/s
# Warmup Iteration   7: 880721.708 ops/s
# Warmup Iteration   8: 879008.349 ops/s
# Warmup Iteration   9: 879428.300 ops/s
# Warmup Iteration  10: 880253.293 ops/s
# Warmup Iteration  11: 880749.780 ops/s
# Warmup Iteration  12: 878253.079 ops/s
# Warmup Iteration  13: 879328.219 ops/s
# Warmup Iteration  14: 880438.631 ops/s
# Warmup Iteration  15: 881773.744 ops/s
# Warmup Iteration  16: 877357.695 ops/s
# Warmup Iteration  17: 878630.597 ops/s
# Warmup Iteration  18: 879203.484 ops/s
# Warmup Iteration  19: 879048.099 ops/s
# Warmup Iteration  20: 880027.568 ops/s
# Warmup Iteration  21: 879416.769 ops/s
# Warmup Iteration  22: 879869.882 ops/s
# Warmup Iteration  23: 879283.746 ops/s
# Warmup Iteration  24: 879845.894 ops/s
# Warmup Iteration  25: 878893.271 ops/s
# Warmup Iteration  26: 880560.295 ops/s
# Warmup Iteration  27: 879802.051 ops/s
# Warmup Iteration  28: 881263.269 ops/s
# Warmup Iteration  29: 877936.177 ops/s
# Warmup Iteration  30: 879798.730 ops/s
Iteration   1: 877860.932 ops/s
Iteration   2: 881128.883 ops/s
Iteration   3: 879304.009 ops/s
Iteration   4: 877699.697 ops/s
Iteration   5: 878746.139 ops/s
Iteration   6: 878988.123 ops/s
Iteration   7: 876209.615 ops/s
Iteration   8: 881795.405 ops/s
Iteration   9: 880062.970 ops/s
Iteration  10: 880663.591 ops/s
Iteration  11: 877505.626 ops/s
Iteration  12: 880034.434 ops/s
Iteration  13: 881147.785 ops/s
Iteration  14: 877506.094 ops/s
Iteration  15: 881369.478 ops/s
Iteration  16: 878030.928 ops/s
Iteration  17: 879482.200 ops/s
Iteration  18: 878231.281 ops/s
Iteration  19: 878834.075 ops/s
Iteration  20: 877440.665 ops/s
Iteration  21: 881674.292 ops/s
Iteration  22: 880440.511 ops/s
Iteration  23: 880770.220 ops/s
Iteration  24: 877718.543 ops/s
Iteration  25: 881688.108 ops/s
Iteration  26: 879576.139 ops/s
Iteration  27: 880511.077 ops/s
Iteration  28: 878722.102 ops/s
Iteration  29: 879440.819 ops/s
Iteration  30: 882074.414 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toBag":
  879488.605 ±(99.9%) 1064.109 ops/s [Average]
  (min, avg, max) = (876209.615, 879488.605, 882074.414), stdev = 1592.708
  CI (99.9%): [878424.497, 880552.714] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_toBag  thrpt   30  879488.605 ± 1064.109  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toBiMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toBiMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 97911.167 ops/s
# Warmup Iteration   2: 133457.753 ops/s
# Warmup Iteration   3: 167754.276 ops/s
# Warmup Iteration   4: 166973.884 ops/s
# Warmup Iteration   5: 167280.279 ops/s
# Warmup Iteration   6: 168134.235 ops/s
# Warmup Iteration   7: 167729.055 ops/s
# Warmup Iteration   8: 139359.912 ops/s
# Warmup Iteration   9: 168019.044 ops/s
# Warmup Iteration  10: 168062.103 ops/s
# Warmup Iteration  11: 168223.842 ops/s
# Warmup Iteration  12: 167365.574 ops/s
# Warmup Iteration  13: 167946.633 ops/s
# Warmup Iteration  14: 167923.812 ops/s
# Warmup Iteration  15: 168029.679 ops/s
# Warmup Iteration  16: 167830.743 ops/s
# Warmup Iteration  17: 174268.794 ops/s
# Warmup Iteration  18: 173301.244 ops/s
# Warmup Iteration  19: 173449.376 ops/s
# Warmup Iteration  20: 173241.190 ops/s
# Warmup Iteration  21: 172816.198 ops/s
# Warmup Iteration  22: 173964.786 ops/s
# Warmup Iteration  23: 173316.214 ops/s
# Warmup Iteration  24: 173420.468 ops/s
# Warmup Iteration  25: 172974.554 ops/s
# Warmup Iteration  26: 173489.754 ops/s
# Warmup Iteration  27: 173609.925 ops/s
# Warmup Iteration  28: 173846.372 ops/s
# Warmup Iteration  29: 173457.170 ops/s
# Warmup Iteration  30: 173579.314 ops/s
Iteration   1: 173857.466 ops/s
Iteration   2: 173847.196 ops/s
Iteration   3: 173916.902 ops/s
Iteration   4: 173216.251 ops/s
Iteration   5: 172945.989 ops/s
Iteration   6: 174032.459 ops/s
Iteration   7: 173722.715 ops/s
Iteration   8: 173288.187 ops/s
Iteration   9: 173459.881 ops/s
Iteration  10: 173308.736 ops/s
Iteration  11: 173425.547 ops/s
Iteration  12: 173709.776 ops/s
Iteration  13: 173166.973 ops/s
Iteration  14: 173117.941 ops/s
Iteration  15: 173117.662 ops/s
Iteration  16: 173990.747 ops/s
Iteration  17: 173329.640 ops/s
Iteration  18: 173340.246 ops/s
Iteration  19: 173524.304 ops/s
Iteration  20: 173335.017 ops/s
Iteration  21: 173763.407 ops/s
Iteration  22: 173908.463 ops/s
Iteration  23: 173139.906 ops/s
Iteration  24: 173687.560 ops/s
Iteration  25: 173002.022 ops/s
Iteration  26: 173249.172 ops/s
Iteration  27: 173933.842 ops/s
Iteration  28: 173198.499 ops/s
Iteration  29: 173535.883 ops/s
Iteration  30: 173932.883 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toBiMap":
  173500.176 ±(99.9%) 221.286 ops/s [Average]
  (min, avg, max) = (172945.989, 173500.176, 174032.459), stdev = 331.210
  CI (99.9%): [173278.890, 173721.461] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score     Error  Units
ImmutableHashBagTest._Benchmark.benchmark_toBiMap  thrpt   30  173500.176 ± 221.286  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1280724.378 ops/s
# Warmup Iteration   2: 2630529.214 ops/s
# Warmup Iteration   3: 2873375.521 ops/s
# Warmup Iteration   4: 2871093.381 ops/s
# Warmup Iteration   5: 2356196.335 ops/s
# Warmup Iteration   6: 2875780.634 ops/s
# Warmup Iteration   7: 2872995.926 ops/s
# Warmup Iteration   8: 2875176.972 ops/s
# Warmup Iteration   9: 2872377.902 ops/s
# Warmup Iteration  10: 2875232.920 ops/s
# Warmup Iteration  11: 2870105.392 ops/s
# Warmup Iteration  12: 2875403.061 ops/s
# Warmup Iteration  13: 2873529.374 ops/s
# Warmup Iteration  14: 2873817.477 ops/s
# Warmup Iteration  15: 2876085.400 ops/s
# Warmup Iteration  16: 2868765.602 ops/s
# Warmup Iteration  17: 2873825.114 ops/s
# Warmup Iteration  18: 2868867.069 ops/s
# Warmup Iteration  19: 2872431.858 ops/s
# Warmup Iteration  20: 2874990.115 ops/s
# Warmup Iteration  21: 2873035.005 ops/s
# Warmup Iteration  22: 2866222.614 ops/s
# Warmup Iteration  23: 2872582.644 ops/s
# Warmup Iteration  24: 2868396.058 ops/s
# Warmup Iteration  25: 2875029.072 ops/s
# Warmup Iteration  26: 2876354.369 ops/s
# Warmup Iteration  27: 2871401.757 ops/s
# Warmup Iteration  28: 2879486.847 ops/s
# Warmup Iteration  29: 2877830.320 ops/s
# Warmup Iteration  30: 2871551.526 ops/s
Iteration   1: 2877298.608 ops/s
Iteration   2: 2884542.946 ops/s
Iteration   3: 2876352.267 ops/s
Iteration   4: 2871696.501 ops/s
Iteration   5: 2880296.957 ops/s
Iteration   6: 2873815.477 ops/s
Iteration   7: 2874451.219 ops/s
Iteration   8: 2873985.244 ops/s
Iteration   9: 2880603.990 ops/s
Iteration  10: 2872748.464 ops/s
Iteration  11: 2872168.458 ops/s
Iteration  12: 2885844.862 ops/s
Iteration  13: 2868312.537 ops/s
Iteration  14: 2866166.478 ops/s
Iteration  15: 2874780.216 ops/s
Iteration  16: 2871589.633 ops/s
Iteration  17: 2872975.169 ops/s
Iteration  18: 2877989.327 ops/s
Iteration  19: 2879541.041 ops/s
Iteration  20: 2777648.712 ops/s
Iteration  21: 2880870.453 ops/s
Iteration  22: 2881426.029 ops/s
Iteration  23: 2867443.643 ops/s
Iteration  24: 2876642.705 ops/s
Iteration  25: 2876914.352 ops/s
Iteration  26: 2877101.352 ops/s
Iteration  27: 2868984.321 ops/s
Iteration  28: 2870553.564 ops/s
Iteration  29: 2879180.880 ops/s
Iteration  30: 2871524.809 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toCollection":
  2872115.007 ±(99.9%) 12361.056 ops/s [Average]
  (min, avg, max) = (2777648.712, 2872115.007, 2885844.862), stdev = 18501.448
  CI (99.9%): [2859753.951, 2884476.063] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
ImmutableHashBagTest._Benchmark.benchmark_toCollection  thrpt   30  2872115.007 ± 12361.056  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toImmutable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toImmutable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1781909.007 ops/s
# Warmup Iteration   2: 3434328.831 ops/s
# Warmup Iteration   3: 3994816.874 ops/s
# Warmup Iteration   4: 4024962.087 ops/s
# Warmup Iteration   5: 3980678.484 ops/s
# Warmup Iteration   6: 3329288.534 ops/s
# Warmup Iteration   7: 4028660.365 ops/s
# Warmup Iteration   8: 4034241.809 ops/s
# Warmup Iteration   9: 4026627.875 ops/s
# Warmup Iteration  10: 4026138.196 ops/s
# Warmup Iteration  11: 4028112.945 ops/s
# Warmup Iteration  12: 4023987.805 ops/s
# Warmup Iteration  13: 4023315.722 ops/s
# Warmup Iteration  14: 4026042.011 ops/s
# Warmup Iteration  15: 4029214.702 ops/s
# Warmup Iteration  16: 4023418.514 ops/s
# Warmup Iteration  17: 4026592.724 ops/s
# Warmup Iteration  18: 4029693.778 ops/s
# Warmup Iteration  19: 4025052.502 ops/s
# Warmup Iteration  20: 4028502.507 ops/s
# Warmup Iteration  21: 4022660.139 ops/s
# Warmup Iteration  22: 4028554.821 ops/s
# Warmup Iteration  23: 4006301.461 ops/s
# Warmup Iteration  24: 4010024.462 ops/s
# Warmup Iteration  25: 4030451.716 ops/s
# Warmup Iteration  26: 4018718.368 ops/s
# Warmup Iteration  27: 4017933.311 ops/s
# Warmup Iteration  28: 4029128.553 ops/s
# Warmup Iteration  29: 4025854.281 ops/s
# Warmup Iteration  30: 4018851.440 ops/s
Iteration   1: 4021875.865 ops/s
Iteration   2: 4017578.787 ops/s
Iteration   3: 4033657.681 ops/s
Iteration   4: 4011918.953 ops/s
Iteration   5: 4006973.881 ops/s
Iteration   6: 4023068.967 ops/s
Iteration   7: 4026304.613 ops/s
Iteration   8: 4025769.729 ops/s
Iteration   9: 4014899.709 ops/s
Iteration  10: 4000916.767 ops/s
Iteration  11: 4030653.752 ops/s
Iteration  12: 4019302.374 ops/s
Iteration  13: 4034400.922 ops/s
Iteration  14: 4021862.487 ops/s
Iteration  15: 4015125.156 ops/s
Iteration  16: 4032405.612 ops/s
Iteration  17: 4025752.986 ops/s
Iteration  18: 4031601.131 ops/s
Iteration  19: 4010848.481 ops/s
Iteration  20: 4027444.913 ops/s
Iteration  21: 4037284.244 ops/s
Iteration  22: 4010762.036 ops/s
Iteration  23: 4022183.516 ops/s
Iteration  24: 4024859.089 ops/s
Iteration  25: 4024814.597 ops/s
Iteration  26: 4039452.880 ops/s
Iteration  27: 4023813.534 ops/s
Iteration  28: 4027778.420 ops/s
Iteration  29: 4024682.879 ops/s
Iteration  30: 4025052.701 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toImmutable":
  4023101.555 ±(99.9%) 6028.201 ops/s [Average]
  (min, avg, max) = (4000916.767, 4023101.555, 4039452.880), stdev = 9022.728
  CI (99.9%): [4017073.355, 4029129.756] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_toImmutable  thrpt   30  4023101.555 ± 6028.201  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toImmutableBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toImmutableBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 650354.566 ops/s
# Warmup Iteration   2: 1302968.438 ops/s
# Warmup Iteration   3: 1449727.345 ops/s
# Warmup Iteration   4: 1459695.535 ops/s
# Warmup Iteration   5: 1195707.471 ops/s
# Warmup Iteration   6: 1464259.285 ops/s
# Warmup Iteration   7: 1464730.589 ops/s
# Warmup Iteration   8: 1458223.471 ops/s
# Warmup Iteration   9: 1465569.288 ops/s
# Warmup Iteration  10: 1465112.768 ops/s
# Warmup Iteration  11: 1459291.957 ops/s
# Warmup Iteration  12: 1464307.006 ops/s
# Warmup Iteration  13: 1459195.855 ops/s
# Warmup Iteration  14: 1464544.508 ops/s
# Warmup Iteration  15: 1464703.062 ops/s
# Warmup Iteration  16: 1453356.934 ops/s
# Warmup Iteration  17: 1463222.383 ops/s
# Warmup Iteration  18: 1460815.673 ops/s
# Warmup Iteration  19: 1460440.902 ops/s
# Warmup Iteration  20: 1461546.606 ops/s
# Warmup Iteration  21: 1463423.078 ops/s
# Warmup Iteration  22: 1465598.787 ops/s
# Warmup Iteration  23: 1464539.695 ops/s
# Warmup Iteration  24: 1462102.986 ops/s
# Warmup Iteration  25: 1464413.785 ops/s
# Warmup Iteration  26: 1464424.714 ops/s
# Warmup Iteration  27: 1457328.078 ops/s
# Warmup Iteration  28: 1462790.974 ops/s
# Warmup Iteration  29: 1465365.089 ops/s
# Warmup Iteration  30: 1464517.995 ops/s
Iteration   1: 1465152.566 ops/s
Iteration   2: 1459093.344 ops/s
Iteration   3: 1463961.353 ops/s
Iteration   4: 1464391.093 ops/s
Iteration   5: 1465648.066 ops/s
Iteration   6: 1465970.452 ops/s
Iteration   7: 1465970.744 ops/s
Iteration   8: 1450987.245 ops/s
Iteration   9: 1456934.803 ops/s
Iteration  10: 1458669.720 ops/s
Iteration  11: 1464722.879 ops/s
Iteration  12: 1464634.365 ops/s
Iteration  13: 1465709.027 ops/s
Iteration  14: 1460879.214 ops/s
Iteration  15: 1459030.175 ops/s
Iteration  16: 1461302.094 ops/s
Iteration  17: 1462290.319 ops/s
Iteration  18: 1465084.492 ops/s
Iteration  19: 1462260.052 ops/s
Iteration  20: 1465927.652 ops/s
Iteration  21: 1454692.266 ops/s
Iteration  22: 1468212.678 ops/s
Iteration  23: 1459388.036 ops/s
Iteration  24: 1466405.648 ops/s
Iteration  25: 1463502.155 ops/s
Iteration  26: 1458531.246 ops/s
Iteration  27: 1464574.171 ops/s
Iteration  28: 1467454.039 ops/s
Iteration  29: 1463300.851 ops/s
Iteration  30: 1462524.527 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toImmutableBag":
  1462573.509 ±(99.9%) 2648.091 ops/s [Average]
  (min, avg, max) = (1450987.245, 1462573.509, 1468212.678), stdev = 3963.538
  CI (99.9%): [1459925.418, 1465221.600] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_toImmutableBag  thrpt   30  1462573.509 ± 2648.091  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toImmutableBiMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toImmutableBiMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 86038.699 ops/s
# Warmup Iteration   2: 118648.615 ops/s
# Warmup Iteration   3: 147438.578 ops/s
# Warmup Iteration   4: 146821.502 ops/s
# Warmup Iteration   5: 147058.115 ops/s
# Warmup Iteration   6: 147168.764 ops/s
# Warmup Iteration   7: 147392.037 ops/s
# Warmup Iteration   8: 124029.879 ops/s
# Warmup Iteration   9: 146944.068 ops/s
# Warmup Iteration  10: 147350.101 ops/s
# Warmup Iteration  11: 147582.332 ops/s
# Warmup Iteration  12: 147199.581 ops/s
# Warmup Iteration  13: 147233.376 ops/s
# Warmup Iteration  14: 147647.839 ops/s
# Warmup Iteration  15: 145841.351 ops/s
# Warmup Iteration  16: 147417.692 ops/s
# Warmup Iteration  17: 151801.306 ops/s
# Warmup Iteration  18: 151881.004 ops/s
# Warmup Iteration  19: 151517.344 ops/s
# Warmup Iteration  20: 152079.842 ops/s
# Warmup Iteration  21: 151961.437 ops/s
# Warmup Iteration  22: 151440.815 ops/s
# Warmup Iteration  23: 151031.333 ops/s
# Warmup Iteration  24: 151441.596 ops/s
# Warmup Iteration  25: 151417.905 ops/s
# Warmup Iteration  26: 150930.798 ops/s
# Warmup Iteration  27: 150892.605 ops/s
# Warmup Iteration  28: 151507.275 ops/s
# Warmup Iteration  29: 151433.514 ops/s
# Warmup Iteration  30: 151236.624 ops/s
Iteration   1: 150947.225 ops/s
Iteration   2: 151698.052 ops/s
Iteration   3: 151332.780 ops/s
Iteration   4: 151775.675 ops/s
Iteration   5: 151505.327 ops/s
Iteration   6: 149665.134 ops/s
Iteration   7: 151417.672 ops/s
Iteration   8: 151629.953 ops/s
Iteration   9: 151915.695 ops/s
Iteration  10: 151373.653 ops/s
Iteration  11: 151231.937 ops/s
Iteration  12: 151284.345 ops/s
Iteration  13: 151744.840 ops/s
Iteration  14: 151031.951 ops/s
Iteration  15: 151372.697 ops/s
Iteration  16: 149674.976 ops/s
Iteration  17: 151856.402 ops/s
Iteration  18: 151506.736 ops/s
Iteration  19: 151480.515 ops/s
Iteration  20: 152155.891 ops/s
Iteration  21: 152145.601 ops/s
Iteration  22: 151669.657 ops/s
Iteration  23: 151608.222 ops/s
Iteration  24: 151351.438 ops/s
Iteration  25: 151951.028 ops/s
Iteration  26: 152065.029 ops/s
Iteration  27: 152133.337 ops/s
Iteration  28: 151279.118 ops/s
Iteration  29: 150996.848 ops/s
Iteration  30: 151845.938 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toImmutableBiMap":
  151454.922 ±(99.9%) 394.163 ops/s [Average]
  (min, avg, max) = (149665.134, 151454.922, 152155.891), stdev = 589.965
  CI (99.9%): [151060.759, 151849.086] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score     Error  Units
ImmutableHashBagTest._Benchmark.benchmark_toImmutableBiMap  thrpt   30  151454.922 ± 394.163  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toImmutableList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toImmutableList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 694778.214 ops/s
# Warmup Iteration   2: 1354024.574 ops/s
# Warmup Iteration   3: 1496825.552 ops/s
# Warmup Iteration   4: 1507990.423 ops/s
# Warmup Iteration   5: 1301296.954 ops/s
# Warmup Iteration   6: 1444449.003 ops/s
# Warmup Iteration   7: 1511915.307 ops/s
# Warmup Iteration   8: 1505883.250 ops/s
# Warmup Iteration   9: 1509125.870 ops/s
# Warmup Iteration  10: 1498680.112 ops/s
# Warmup Iteration  11: 1507541.307 ops/s
# Warmup Iteration  12: 1509842.020 ops/s
# Warmup Iteration  13: 1502136.801 ops/s
# Warmup Iteration  14: 1504837.097 ops/s
# Warmup Iteration  15: 1509544.384 ops/s
# Warmup Iteration  16: 1508491.563 ops/s
# Warmup Iteration  17: 1499774.792 ops/s
# Warmup Iteration  18: 1508249.296 ops/s
# Warmup Iteration  19: 1509474.570 ops/s
# Warmup Iteration  20: 1509736.058 ops/s
# Warmup Iteration  21: 1506922.575 ops/s
# Warmup Iteration  22: 1502883.027 ops/s
# Warmup Iteration  23: 1501550.973 ops/s
# Warmup Iteration  24: 1506615.034 ops/s
# Warmup Iteration  25: 1505243.717 ops/s
# Warmup Iteration  26: 1510412.884 ops/s
# Warmup Iteration  27: 1502872.209 ops/s
# Warmup Iteration  28: 1508142.584 ops/s
# Warmup Iteration  29: 1510669.191 ops/s
# Warmup Iteration  30: 1509026.452 ops/s
Iteration   1: 1505179.525 ops/s
Iteration   2: 1503835.889 ops/s
Iteration   3: 1511604.431 ops/s
Iteration   4: 1505276.638 ops/s
Iteration   5: 1511442.700 ops/s
Iteration   6: 1508902.567 ops/s
Iteration   7: 1508160.223 ops/s
Iteration   8: 1500450.833 ops/s
Iteration   9: 1508887.317 ops/s
Iteration  10: 1501336.166 ops/s
Iteration  11: 1509837.175 ops/s
Iteration  12: 1500480.118 ops/s
Iteration  13: 1494475.557 ops/s
Iteration  14: 1509008.214 ops/s
Iteration  15: 1500684.053 ops/s
Iteration  16: 1510071.133 ops/s
Iteration  17: 1509558.849 ops/s
Iteration  18: 1508777.614 ops/s
Iteration  19: 1502817.210 ops/s
Iteration  20: 1476709.717 ops/s
Iteration  21: 1485324.887 ops/s
Iteration  22: 1509068.217 ops/s
Iteration  23: 1502875.519 ops/s
Iteration  24: 1506647.213 ops/s
Iteration  25: 1512648.294 ops/s
Iteration  26: 1503273.117 ops/s
Iteration  27: 1511259.140 ops/s
Iteration  28: 1512521.622 ops/s
Iteration  29: 1510502.587 ops/s
Iteration  30: 1509048.562 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toImmutableList":
  1505022.170 ±(99.9%) 5308.738 ops/s [Average]
  (min, avg, max) = (1476709.717, 1505022.170, 1512648.294), stdev = 7945.870
  CI (99.9%): [1499713.431, 1510330.908] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_toImmutableList  thrpt   30  1505022.170 ± 5308.738  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toImmutableMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toImmutableMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 604029.753 ops/s
# Warmup Iteration   2: 1437507.902 ops/s
# Warmup Iteration   3: 1462464.783 ops/s
# Warmup Iteration   4: 1218169.773 ops/s
# Warmup Iteration   5: 1452973.265 ops/s
# Warmup Iteration   6: 1456296.752 ops/s
# Warmup Iteration   7: 1453985.924 ops/s
# Warmup Iteration   8: 1449672.376 ops/s
# Warmup Iteration   9: 1464378.945 ops/s
# Warmup Iteration  10: 1455934.192 ops/s
# Warmup Iteration  11: 1460190.051 ops/s
# Warmup Iteration  12: 1454002.845 ops/s
# Warmup Iteration  13: 1456274.596 ops/s
# Warmup Iteration  14: 1457778.594 ops/s
# Warmup Iteration  15: 1457462.261 ops/s
# Warmup Iteration  16: 1467334.315 ops/s
# Warmup Iteration  17: 1464157.609 ops/s
# Warmup Iteration  18: 1463029.955 ops/s
# Warmup Iteration  19: 1452734.282 ops/s
# Warmup Iteration  20: 1458475.848 ops/s
# Warmup Iteration  21: 1465816.846 ops/s
# Warmup Iteration  22: 1461121.331 ops/s
# Warmup Iteration  23: 1455811.417 ops/s
# Warmup Iteration  24: 1450673.237 ops/s
# Warmup Iteration  25: 1444879.952 ops/s
# Warmup Iteration  26: 1462311.359 ops/s
# Warmup Iteration  27: 1454219.521 ops/s
# Warmup Iteration  28: 1468227.800 ops/s
# Warmup Iteration  29: 1463733.485 ops/s
# Warmup Iteration  30: 1463104.984 ops/s
Iteration   1: 1464920.973 ops/s
Iteration   2: 1464031.701 ops/s
Iteration   3: 1468216.988 ops/s
Iteration   4: 1463591.313 ops/s
Iteration   5: 1467572.406 ops/s
Iteration   6: 1447581.065 ops/s
Iteration   7: 1463256.972 ops/s
Iteration   8: 1458530.911 ops/s
Iteration   9: 1456774.677 ops/s
Iteration  10: 1463043.180 ops/s
Iteration  11: 1451344.857 ops/s
Iteration  12: 1457883.039 ops/s
Iteration  13: 1459929.934 ops/s
Iteration  14: 1464028.558 ops/s
Iteration  15: 1453416.294 ops/s
Iteration  16: 1453312.053 ops/s
Iteration  17: 1461042.624 ops/s
Iteration  18: 1454313.974 ops/s
Iteration  19: 1450005.375 ops/s
Iteration  20: 1461390.142 ops/s
Iteration  21: 1463428.310 ops/s
Iteration  22: 1458318.486 ops/s
Iteration  23: 1465473.058 ops/s
Iteration  24: 1466004.469 ops/s
Iteration  25: 1458569.153 ops/s
Iteration  26: 1462996.529 ops/s
Iteration  27: 1471440.395 ops/s
Iteration  28: 1453454.163 ops/s
Iteration  29: 1460002.441 ops/s
Iteration  30: 1462578.838 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toImmutableMap":
  1460215.096 ±(99.9%) 3832.880 ops/s [Average]
  (min, avg, max) = (1447581.065, 1460215.096, 1471440.395), stdev = 5736.875
  CI (99.9%): [1456382.216, 1464047.976] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_toImmutableMap  thrpt   30  1460215.096 ± 3832.880  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toImmutableSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toImmutableSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 624358.637 ops/s
# Warmup Iteration   2: 1077164.506 ops/s
# Warmup Iteration   3: 1242088.873 ops/s
# Warmup Iteration   4: 1259130.114 ops/s
# Warmup Iteration   5: 1257415.478 ops/s
# Warmup Iteration   6: 1037875.595 ops/s
# Warmup Iteration   7: 1256656.907 ops/s
# Warmup Iteration   8: 1256391.985 ops/s
# Warmup Iteration   9: 1258934.261 ops/s
# Warmup Iteration  10: 1261848.829 ops/s
# Warmup Iteration  11: 1261251.668 ops/s
# Warmup Iteration  12: 1260626.755 ops/s
# Warmup Iteration  13: 1256264.299 ops/s
# Warmup Iteration  14: 1254819.152 ops/s
# Warmup Iteration  15: 1255144.762 ops/s
# Warmup Iteration  16: 1258729.754 ops/s
# Warmup Iteration  17: 1254476.348 ops/s
# Warmup Iteration  18: 1260622.527 ops/s
# Warmup Iteration  19: 1260331.295 ops/s
# Warmup Iteration  20: 1256692.035 ops/s
# Warmup Iteration  21: 1257457.382 ops/s
# Warmup Iteration  22: 1258766.858 ops/s
# Warmup Iteration  23: 1256676.678 ops/s
# Warmup Iteration  24: 1260155.662 ops/s
# Warmup Iteration  25: 1257258.826 ops/s
# Warmup Iteration  26: 1258831.120 ops/s
# Warmup Iteration  27: 1256021.900 ops/s
# Warmup Iteration  28: 1259215.845 ops/s
# Warmup Iteration  29: 1251983.146 ops/s
# Warmup Iteration  30: 1249852.073 ops/s
Iteration   1: 1263326.962 ops/s
Iteration   2: 1252393.290 ops/s
Iteration   3: 1254642.454 ops/s
Iteration   4: 1258041.573 ops/s
Iteration   5: 1261983.254 ops/s
Iteration   6: 1257242.302 ops/s
Iteration   7: 1260527.990 ops/s
Iteration   8: 1254252.527 ops/s
Iteration   9: 1259366.717 ops/s
Iteration  10: 1253532.138 ops/s
Iteration  11: 1257267.719 ops/s
Iteration  12: 1261474.975 ops/s
Iteration  13: 1260149.477 ops/s
Iteration  14: 1262587.026 ops/s
Iteration  15: 1254823.109 ops/s
Iteration  16: 1262349.280 ops/s
Iteration  17: 1252329.001 ops/s
Iteration  18: 1263805.760 ops/s
Iteration  19: 1259167.301 ops/s
Iteration  20: 1262160.344 ops/s
Iteration  21: 1259055.535 ops/s
Iteration  22: 1261996.494 ops/s
Iteration  23: 1257913.725 ops/s
Iteration  24: 1260102.540 ops/s
Iteration  25: 1258179.594 ops/s
Iteration  26: 1261807.661 ops/s
Iteration  27: 1258157.662 ops/s
Iteration  28: 1258654.755 ops/s
Iteration  29: 1260755.954 ops/s
Iteration  30: 1259921.052 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toImmutableSet":
  1258932.272 ±(99.9%) 2160.737 ops/s [Average]
  (min, avg, max) = (1252329.001, 1258932.272, 1263805.760), stdev = 3234.090
  CI (99.9%): [1256771.535, 1261093.010] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_toImmutableSet  thrpt   30  1258932.272 ± 2160.737  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 543381.850 ops/s
# Warmup Iteration   2: 1101415.437 ops/s
# Warmup Iteration   3: 1206313.364 ops/s
# Warmup Iteration   4: 1209243.496 ops/s
# Warmup Iteration   5: 1009478.083 ops/s
# Warmup Iteration   6: 1214700.062 ops/s
# Warmup Iteration   7: 1211604.834 ops/s
# Warmup Iteration   8: 1214395.652 ops/s
# Warmup Iteration   9: 1213224.360 ops/s
# Warmup Iteration  10: 1215320.022 ops/s
# Warmup Iteration  11: 1214822.205 ops/s
# Warmup Iteration  12: 1209655.065 ops/s
# Warmup Iteration  13: 1211560.677 ops/s
# Warmup Iteration  14: 1212128.948 ops/s
# Warmup Iteration  15: 1210681.547 ops/s
# Warmup Iteration  16: 1213613.432 ops/s
# Warmup Iteration  17: 1213331.366 ops/s
# Warmup Iteration  18: 1214924.891 ops/s
# Warmup Iteration  19: 1215992.938 ops/s
# Warmup Iteration  20: 1214303.741 ops/s
# Warmup Iteration  21: 1212071.271 ops/s
# Warmup Iteration  22: 1214904.936 ops/s
# Warmup Iteration  23: 1214121.517 ops/s
# Warmup Iteration  24: 1213306.670 ops/s
# Warmup Iteration  25: 1217734.479 ops/s
# Warmup Iteration  26: 1214884.000 ops/s
# Warmup Iteration  27: 1218118.726 ops/s
# Warmup Iteration  28: 1215517.941 ops/s
# Warmup Iteration  29: 1216103.418 ops/s
# Warmup Iteration  30: 1214623.481 ops/s
Iteration   1: 1214771.828 ops/s
Iteration   2: 1208462.010 ops/s
Iteration   3: 1212744.024 ops/s
Iteration   4: 1215583.412 ops/s
Iteration   5: 1217496.204 ops/s
Iteration   6: 1218334.527 ops/s
Iteration   7: 1216827.806 ops/s
Iteration   8: 1212368.178 ops/s
Iteration   9: 1208899.485 ops/s
Iteration  10: 1216667.950 ops/s
Iteration  11: 1212985.790 ops/s
Iteration  12: 1218231.470 ops/s
Iteration  13: 1215596.623 ops/s
Iteration  14: 1210933.889 ops/s
Iteration  15: 1216099.496 ops/s
Iteration  16: 1211110.482 ops/s
Iteration  17: 1213124.281 ops/s
Iteration  18: 1212896.852 ops/s
Iteration  19: 1205478.628 ops/s
Iteration  20: 1215572.795 ops/s
Iteration  21: 1214952.890 ops/s
Iteration  22: 1216828.996 ops/s
Iteration  23: 1203214.171 ops/s
Iteration  24: 1210379.615 ops/s
Iteration  25: 1208501.802 ops/s
Iteration  26: 1212419.504 ops/s
Iteration  27: 1210208.627 ops/s
Iteration  28: 1216987.492 ops/s
Iteration  29: 1204110.810 ops/s
Iteration  30: 1214669.744 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering":
  1212881.979 ±(99.9%) 2735.052 ops/s [Average]
  (min, avg, max) = (1203214.171, 1212881.979, 1218334.527), stdev = 4093.697
  CI (99.9%): [1210146.928, 1215617.031] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering  thrpt   30  1212881.979 ± 2735.052  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toImmutableSortedBagBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toImmutableSortedBagBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 299253.162 ops/s
# Warmup Iteration   2: 666316.890 ops/s
# Warmup Iteration   3: 730341.008 ops/s
# Warmup Iteration   4: 732674.143 ops/s
# Warmup Iteration   5: 613026.009 ops/s
# Warmup Iteration   6: 734566.575 ops/s
# Warmup Iteration   7: 734608.825 ops/s
# Warmup Iteration   8: 734337.444 ops/s
# Warmup Iteration   9: 736375.691 ops/s
# Warmup Iteration  10: 734613.660 ops/s
# Warmup Iteration  11: 733571.427 ops/s
# Warmup Iteration  12: 731817.639 ops/s
# Warmup Iteration  13: 732935.715 ops/s
# Warmup Iteration  14: 733273.641 ops/s
# Warmup Iteration  15: 731188.251 ops/s
# Warmup Iteration  16: 736541.197 ops/s
# Warmup Iteration  17: 732460.246 ops/s
# Warmup Iteration  18: 736532.632 ops/s
# Warmup Iteration  19: 735717.191 ops/s
# Warmup Iteration  20: 734489.564 ops/s
# Warmup Iteration  21: 734311.538 ops/s
# Warmup Iteration  22: 733312.985 ops/s
# Warmup Iteration  23: 732570.460 ops/s
# Warmup Iteration  24: 735687.075 ops/s
# Warmup Iteration  25: 734412.517 ops/s
# Warmup Iteration  26: 732353.288 ops/s
# Warmup Iteration  27: 734971.498 ops/s
# Warmup Iteration  28: 728835.592 ops/s
# Warmup Iteration  29: 733587.630 ops/s
# Warmup Iteration  30: 734023.237 ops/s
Iteration   1: 734455.384 ops/s
Iteration   2: 735145.931 ops/s
Iteration   3: 734159.601 ops/s
Iteration   4: 733717.651 ops/s
Iteration   5: 737133.275 ops/s
Iteration   6: 736496.539 ops/s
Iteration   7: 735439.257 ops/s
Iteration   8: 736754.657 ops/s
Iteration   9: 735391.799 ops/s
Iteration  10: 736167.847 ops/s
Iteration  11: 735276.437 ops/s
Iteration  12: 735060.761 ops/s
Iteration  13: 733300.367 ops/s
Iteration  14: 736380.833 ops/s
Iteration  15: 735144.622 ops/s
Iteration  16: 735298.583 ops/s
Iteration  17: 734208.201 ops/s
Iteration  18: 737046.092 ops/s
Iteration  19: 734840.257 ops/s
Iteration  20: 735402.026 ops/s
Iteration  21: 735016.394 ops/s
Iteration  22: 731500.624 ops/s
Iteration  23: 733855.064 ops/s
Iteration  24: 735696.534 ops/s
Iteration  25: 736550.771 ops/s
Iteration  26: 734201.518 ops/s
Iteration  27: 735947.688 ops/s
Iteration  28: 735353.732 ops/s
Iteration  29: 736874.441 ops/s
Iteration  30: 735936.459 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toImmutableSortedBagBy":
  735258.445 ±(99.9%) 829.744 ops/s [Average]
  (min, avg, max) = (731500.624, 735258.445, 737133.275), stdev = 1241.922
  CI (99.9%): [734428.701, 736088.189] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score     Error  Units
ImmutableHashBagTest._Benchmark.benchmark_toImmutableSortedBagBy  thrpt   30  735258.445 ± 829.744  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 285715.994 ops/s
# Warmup Iteration   2: 470500.991 ops/s
# Warmup Iteration   3: 569236.210 ops/s
# Warmup Iteration   4: 572662.984 ops/s
# Warmup Iteration   5: 571553.671 ops/s
# Warmup Iteration   6: 571531.180 ops/s
# Warmup Iteration   7: 475769.252 ops/s
# Warmup Iteration   8: 572231.443 ops/s
# Warmup Iteration   9: 572919.621 ops/s
# Warmup Iteration  10: 572501.739 ops/s
# Warmup Iteration  11: 570319.463 ops/s
# Warmup Iteration  12: 572042.159 ops/s
# Warmup Iteration  13: 572587.427 ops/s
# Warmup Iteration  14: 570425.804 ops/s
# Warmup Iteration  15: 573104.670 ops/s
# Warmup Iteration  16: 571142.506 ops/s
# Warmup Iteration  17: 573918.811 ops/s
# Warmup Iteration  18: 572621.527 ops/s
# Warmup Iteration  19: 573534.925 ops/s
# Warmup Iteration  20: 572788.307 ops/s
# Warmup Iteration  21: 573476.852 ops/s
# Warmup Iteration  22: 573846.108 ops/s
# Warmup Iteration  23: 572846.037 ops/s
# Warmup Iteration  24: 574048.794 ops/s
# Warmup Iteration  25: 573078.653 ops/s
# Warmup Iteration  26: 571362.951 ops/s
# Warmup Iteration  27: 574000.877 ops/s
# Warmup Iteration  28: 571850.888 ops/s
# Warmup Iteration  29: 573539.056 ops/s
# Warmup Iteration  30: 573275.385 ops/s
Iteration   1: 573620.918 ops/s
Iteration   2: 573136.693 ops/s
Iteration   3: 571218.121 ops/s
Iteration   4: 573908.531 ops/s
Iteration   5: 572364.186 ops/s
Iteration   6: 571230.260 ops/s
Iteration   7: 574232.481 ops/s
Iteration   8: 572665.019 ops/s
Iteration   9: 573360.842 ops/s
Iteration  10: 569969.896 ops/s
Iteration  11: 573199.619 ops/s
Iteration  12: 567174.689 ops/s
Iteration  13: 572328.873 ops/s
Iteration  14: 573108.899 ops/s
Iteration  15: 573628.130 ops/s
Iteration  16: 571582.752 ops/s
Iteration  17: 574647.432 ops/s
Iteration  18: 574820.046 ops/s
Iteration  19: 574259.880 ops/s
Iteration  20: 573039.166 ops/s
Iteration  21: 571029.580 ops/s
Iteration  22: 572005.306 ops/s
Iteration  23: 573991.500 ops/s
Iteration  24: 570003.253 ops/s
Iteration  25: 571514.235 ops/s
Iteration  26: 570842.569 ops/s
Iteration  27: 570012.856 ops/s
Iteration  28: 574008.204 ops/s
Iteration  29: 572466.842 ops/s
Iteration  30: 574183.591 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering":
  572451.812 ±(99.9%) 1161.492 ops/s [Average]
  (min, avg, max) = (567174.689, 572451.812, 574820.046), stdev = 1738.467
  CI (99.9%): [571290.320, 573613.305] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering  thrpt   30  572451.812 ± 1161.492  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 469617.321 ops/s
# Warmup Iteration   2: 888613.771 ops/s
# Warmup Iteration   3: 1036926.381 ops/s
# Warmup Iteration   4: 1045132.170 ops/s
# Warmup Iteration   5: 1045012.727 ops/s
# Warmup Iteration   6: 868017.575 ops/s
# Warmup Iteration   7: 1045840.101 ops/s
# Warmup Iteration   8: 1046436.210 ops/s
# Warmup Iteration   9: 1044233.042 ops/s
# Warmup Iteration  10: 1043939.037 ops/s
# Warmup Iteration  11: 1045216.796 ops/s
# Warmup Iteration  12: 1046997.971 ops/s
# Warmup Iteration  13: 1043527.430 ops/s
# Warmup Iteration  14: 1043603.791 ops/s
# Warmup Iteration  15: 1045571.799 ops/s
# Warmup Iteration  16: 1045551.696 ops/s
# Warmup Iteration  17: 1042659.132 ops/s
# Warmup Iteration  18: 1042901.737 ops/s
# Warmup Iteration  19: 1047740.194 ops/s
# Warmup Iteration  20: 1045987.504 ops/s
# Warmup Iteration  21: 1042751.702 ops/s
# Warmup Iteration  22: 1045910.823 ops/s
# Warmup Iteration  23: 1043563.920 ops/s
# Warmup Iteration  24: 1044139.444 ops/s
# Warmup Iteration  25: 1043258.017 ops/s
# Warmup Iteration  26: 1042588.608 ops/s
# Warmup Iteration  27: 1044563.056 ops/s
# Warmup Iteration  28: 1044859.065 ops/s
# Warmup Iteration  29: 1045321.090 ops/s
# Warmup Iteration  30: 1046639.073 ops/s
Iteration   1: 1047020.713 ops/s
Iteration   2: 1044058.596 ops/s
Iteration   3: 1045587.962 ops/s
Iteration   4: 1041176.598 ops/s
Iteration   5: 1047537.446 ops/s
Iteration   6: 1048028.029 ops/s
Iteration   7: 1045562.863 ops/s
Iteration   8: 1047519.501 ops/s
Iteration   9: 1046386.866 ops/s
Iteration  10: 1044068.211 ops/s
Iteration  11: 1043091.115 ops/s
Iteration  12: 1046599.043 ops/s
Iteration  13: 1047468.096 ops/s
Iteration  14: 1044042.743 ops/s
Iteration  15: 1044802.944 ops/s
Iteration  16: 1045355.840 ops/s
Iteration  17: 1045265.090 ops/s
Iteration  18: 1042190.410 ops/s
Iteration  19: 1039231.374 ops/s
Iteration  20: 1045349.179 ops/s
Iteration  21: 1045288.748 ops/s
Iteration  22: 1035721.583 ops/s
Iteration  23: 1045361.559 ops/s
Iteration  24: 1047376.762 ops/s
Iteration  25: 1043757.102 ops/s
Iteration  26: 1041655.940 ops/s
Iteration  27: 1046688.682 ops/s
Iteration  28: 1043207.903 ops/s
Iteration  29: 1048931.615 ops/s
Iteration  30: 1044142.803 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator":
  1044749.177 ±(99.9%) 1860.082 ops/s [Average]
  (min, avg, max) = (1035721.583, 1044749.177, 1048931.615), stdev = 2784.084
  CI (99.9%): [1042889.095, 1046609.260] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator  thrpt   30  1044749.177 ± 1860.082  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toImmutableSortedListBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toImmutableSortedListBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1263073.718 ops/s
# Warmup Iteration   2: 2828917.415 ops/s
# Warmup Iteration   3: 2965650.387 ops/s
# Warmup Iteration   4: 2844898.732 ops/s
# Warmup Iteration   5: 2586777.067 ops/s
# Warmup Iteration   6: 2968933.670 ops/s
# Warmup Iteration   7: 2981576.383 ops/s
# Warmup Iteration   8: 2970238.325 ops/s
# Warmup Iteration   9: 2978456.151 ops/s
# Warmup Iteration  10: 2980212.368 ops/s
# Warmup Iteration  11: 2963789.085 ops/s
# Warmup Iteration  12: 2974999.610 ops/s
# Warmup Iteration  13: 2983678.469 ops/s
# Warmup Iteration  14: 2963926.243 ops/s
# Warmup Iteration  15: 2966801.270 ops/s
# Warmup Iteration  16: 2975045.506 ops/s
# Warmup Iteration  17: 2981637.004 ops/s
# Warmup Iteration  18: 2977825.607 ops/s
# Warmup Iteration  19: 2969327.470 ops/s
# Warmup Iteration  20: 2971702.415 ops/s
# Warmup Iteration  21: 2979183.722 ops/s
# Warmup Iteration  22: 2976670.093 ops/s
# Warmup Iteration  23: 2984904.525 ops/s
# Warmup Iteration  24: 2970847.798 ops/s
# Warmup Iteration  25: 2973622.241 ops/s
# Warmup Iteration  26: 2979714.781 ops/s
# Warmup Iteration  27: 2976281.712 ops/s
# Warmup Iteration  28: 2976709.475 ops/s
# Warmup Iteration  29: 2958860.718 ops/s
# Warmup Iteration  30: 2972471.605 ops/s
Iteration   1: 2977707.145 ops/s
Iteration   2: 2961442.986 ops/s
Iteration   3: 2977685.457 ops/s
Iteration   4: 2974963.273 ops/s
Iteration   5: 2978507.727 ops/s
Iteration   6: 2982446.304 ops/s
Iteration   7: 2981838.494 ops/s
Iteration   8: 2974318.967 ops/s
Iteration   9: 2977095.579 ops/s
Iteration  10: 2978707.487 ops/s
Iteration  11: 2983182.624 ops/s
Iteration  12: 2975628.753 ops/s
Iteration  13: 2971068.466 ops/s
Iteration  14: 2960045.831 ops/s
Iteration  15: 2979169.061 ops/s
Iteration  16: 2987074.358 ops/s
Iteration  17: 2963417.500 ops/s
Iteration  18: 2967138.669 ops/s
Iteration  19: 2982396.121 ops/s
Iteration  20: 2980841.419 ops/s
Iteration  21: 2979898.386 ops/s
Iteration  22: 2985992.748 ops/s
Iteration  23: 2989681.338 ops/s
Iteration  24: 2980521.844 ops/s
Iteration  25: 2976394.896 ops/s
Iteration  26: 2977056.418 ops/s
Iteration  27: 2983540.879 ops/s
Iteration  28: 2986108.779 ops/s
Iteration  29: 2986849.795 ops/s
Iteration  30: 2984358.372 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toImmutableSortedListBy":
  2978169.322 ±(99.9%) 4971.743 ops/s [Average]
  (min, avg, max) = (2960045.831, 2978169.322, 2989681.338), stdev = 7441.471
  CI (99.9%): [2973197.580, 2983141.065] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_toImmutableSortedListBy  thrpt   30  2978169.322 ± 4971.743  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 807944.760 ops/s
# Warmup Iteration   2: 1339285.061 ops/s
# Warmup Iteration   3: 1587830.216 ops/s
# Warmup Iteration   4: 1599423.433 ops/s
# Warmup Iteration   5: 1597167.380 ops/s
# Warmup Iteration   6: 1433383.027 ops/s
# Warmup Iteration   7: 1467612.110 ops/s
# Warmup Iteration   8: 1587598.539 ops/s
# Warmup Iteration   9: 1589759.260 ops/s
# Warmup Iteration  10: 1588697.242 ops/s
# Warmup Iteration  11: 1587032.569 ops/s
# Warmup Iteration  12: 1585669.057 ops/s
# Warmup Iteration  13: 1583219.141 ops/s
# Warmup Iteration  14: 1591134.188 ops/s
# Warmup Iteration  15: 1589831.065 ops/s
# Warmup Iteration  16: 1584318.352 ops/s
# Warmup Iteration  17: 1582136.121 ops/s
# Warmup Iteration  18: 1587532.036 ops/s
# Warmup Iteration  19: 1582831.905 ops/s
# Warmup Iteration  20: 1588753.339 ops/s
# Warmup Iteration  21: 1591842.168 ops/s
# Warmup Iteration  22: 1587467.288 ops/s
# Warmup Iteration  23: 1587857.852 ops/s
# Warmup Iteration  24: 1589148.262 ops/s
# Warmup Iteration  25: 1591328.146 ops/s
# Warmup Iteration  26: 1589629.957 ops/s
# Warmup Iteration  27: 1590902.820 ops/s
# Warmup Iteration  28: 1589270.231 ops/s
# Warmup Iteration  29: 1589905.087 ops/s
# Warmup Iteration  30: 1586871.405 ops/s
Iteration   1: 1588445.003 ops/s
Iteration   2: 1582139.018 ops/s
Iteration   3: 1591004.749 ops/s
Iteration   4: 1585268.131 ops/s
Iteration   5: 1590194.238 ops/s
Iteration   6: 1587813.532 ops/s
Iteration   7: 1591125.699 ops/s
Iteration   8: 1581681.528 ops/s
Iteration   9: 1589963.067 ops/s
Iteration  10: 1578774.664 ops/s
Iteration  11: 1588700.551 ops/s
Iteration  12: 1587574.909 ops/s
Iteration  13: 1581270.357 ops/s
Iteration  14: 1585279.341 ops/s
Iteration  15: 1592522.024 ops/s
Iteration  16: 1587128.599 ops/s
Iteration  17: 1592535.181 ops/s
Iteration  18: 1590537.903 ops/s
Iteration  19: 1584041.965 ops/s
Iteration  20: 1581761.401 ops/s
Iteration  21: 1589761.580 ops/s
Iteration  22: 1575930.859 ops/s
Iteration  23: 1593252.761 ops/s
Iteration  24: 1587552.201 ops/s
Iteration  25: 1589146.875 ops/s
Iteration  26: 1585799.053 ops/s
Iteration  27: 1592934.045 ops/s
Iteration  28: 1587947.975 ops/s
Iteration  29: 1587707.847 ops/s
Iteration  30: 1588453.646 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering":
  1587208.290 ±(99.9%) 2881.049 ops/s [Average]
  (min, avg, max) = (1575930.859, 1587208.290, 1593252.761), stdev = 4312.219
  CI (99.9%): [1584327.241, 1590089.339] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering  thrpt   30  1587208.290 ± 2881.049  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toImmutableSortedList_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toImmutableSortedList_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1629879.136 ops/s
# Warmup Iteration   2: 3176819.703 ops/s
# Warmup Iteration   3: 3546137.900 ops/s
# Warmup Iteration   4: 3559015.636 ops/s
# Warmup Iteration   5: 2970236.561 ops/s
# Warmup Iteration   6: 3489078.682 ops/s
# Warmup Iteration   7: 3573089.824 ops/s
# Warmup Iteration   8: 3576950.732 ops/s
# Warmup Iteration   9: 3570839.806 ops/s
# Warmup Iteration  10: 3562405.352 ops/s
# Warmup Iteration  11: 3559513.182 ops/s
# Warmup Iteration  12: 3568530.391 ops/s
# Warmup Iteration  13: 3567498.115 ops/s
# Warmup Iteration  14: 3560899.605 ops/s
# Warmup Iteration  15: 3564299.003 ops/s
# Warmup Iteration  16: 3561920.237 ops/s
# Warmup Iteration  17: 3550534.619 ops/s
# Warmup Iteration  18: 3573265.046 ops/s
# Warmup Iteration  19: 3560065.883 ops/s
# Warmup Iteration  20: 3573555.234 ops/s
# Warmup Iteration  21: 3555869.895 ops/s
# Warmup Iteration  22: 3567632.696 ops/s
# Warmup Iteration  23: 3561336.153 ops/s
# Warmup Iteration  24: 3572169.600 ops/s
# Warmup Iteration  25: 3560400.107 ops/s
# Warmup Iteration  26: 3562838.094 ops/s
# Warmup Iteration  27: 3571133.350 ops/s
# Warmup Iteration  28: 3573237.244 ops/s
# Warmup Iteration  29: 3569704.650 ops/s
# Warmup Iteration  30: 3564320.105 ops/s
Iteration   1: 3537541.814 ops/s
Iteration   2: 3577821.319 ops/s
Iteration   3: 3558831.028 ops/s
Iteration   4: 3573094.804 ops/s
Iteration   5: 3580139.730 ops/s
Iteration   6: 3571689.952 ops/s
Iteration   7: 3574971.224 ops/s
Iteration   8: 3563603.188 ops/s
Iteration   9: 3564428.563 ops/s
Iteration  10: 3572078.990 ops/s
Iteration  11: 3570851.232 ops/s
Iteration  12: 3566044.667 ops/s
Iteration  13: 3564381.782 ops/s
Iteration  14: 3572482.708 ops/s
Iteration  15: 3568724.466 ops/s
Iteration  16: 3568449.536 ops/s
Iteration  17: 3558830.135 ops/s
Iteration  18: 3564247.357 ops/s
Iteration  19: 3580005.274 ops/s
Iteration  20: 3568438.701 ops/s
Iteration  21: 3565590.610 ops/s
Iteration  22: 3572003.386 ops/s
Iteration  23: 3575074.018 ops/s
Iteration  24: 3562116.051 ops/s
Iteration  25: 3561373.362 ops/s
Iteration  26: 3554268.308 ops/s
Iteration  27: 3583712.985 ops/s
Iteration  28: 3566285.487 ops/s
Iteration  29: 3561596.897 ops/s
Iteration  30: 3572649.674 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toImmutableSortedList_with_comparator":
  3567710.908 ±(99.9%) 5988.351 ops/s [Average]
  (min, avg, max) = (3537541.814, 3567710.908, 3583712.985), stdev = 8963.082
  CI (99.9%): [3561722.558, 3573699.259] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_toImmutableSortedList_with_comparator  thrpt   30  3567710.908 ± 5988.351  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toImmutableSortedSetBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toImmutableSortedSetBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 531486.454 ops/s
# Warmup Iteration   2: 1139166.369 ops/s
# Warmup Iteration   3: 1230337.355 ops/s
# Warmup Iteration   4: 1235931.568 ops/s
# Warmup Iteration   5: 1026095.314 ops/s
# Warmup Iteration   6: 1235074.873 ops/s
# Warmup Iteration   7: 1236874.497 ops/s
# Warmup Iteration   8: 1237413.078 ops/s
# Warmup Iteration   9: 1238418.179 ops/s
# Warmup Iteration  10: 1242887.891 ops/s
# Warmup Iteration  11: 1240174.463 ops/s
# Warmup Iteration  12: 1242322.509 ops/s
# Warmup Iteration  13: 1239137.896 ops/s
# Warmup Iteration  14: 1240582.519 ops/s
# Warmup Iteration  15: 1241177.752 ops/s
# Warmup Iteration  16: 1243386.792 ops/s
# Warmup Iteration  17: 1241229.258 ops/s
# Warmup Iteration  18: 1241182.096 ops/s
# Warmup Iteration  19: 1242008.710 ops/s
# Warmup Iteration  20: 1239811.278 ops/s
# Warmup Iteration  21: 1240285.257 ops/s
# Warmup Iteration  22: 1242499.711 ops/s
# Warmup Iteration  23: 1238454.678 ops/s
# Warmup Iteration  24: 1238266.099 ops/s
# Warmup Iteration  25: 1242688.284 ops/s
# Warmup Iteration  26: 1241458.128 ops/s
# Warmup Iteration  27: 1242927.385 ops/s
# Warmup Iteration  28: 1241538.370 ops/s
# Warmup Iteration  29: 1239487.063 ops/s
# Warmup Iteration  30: 1240966.298 ops/s
Iteration   1: 1242504.934 ops/s
Iteration   2: 1241569.588 ops/s
Iteration   3: 1243955.684 ops/s
Iteration   4: 1243231.555 ops/s
Iteration   5: 1237502.790 ops/s
Iteration   6: 1241312.483 ops/s
Iteration   7: 1239883.260 ops/s
Iteration   8: 1245331.519 ops/s
Iteration   9: 1236433.259 ops/s
Iteration  10: 1238638.695 ops/s
Iteration  11: 1240721.872 ops/s
Iteration  12: 1239128.914 ops/s
Iteration  13: 1242337.385 ops/s
Iteration  14: 1239050.602 ops/s
Iteration  15: 1239929.048 ops/s
Iteration  16: 1241960.822 ops/s
Iteration  17: 1243214.537 ops/s
Iteration  18: 1235623.862 ops/s
Iteration  19: 1242149.005 ops/s
Iteration  20: 1236246.148 ops/s
Iteration  21: 1238583.800 ops/s
Iteration  22: 1245345.132 ops/s
Iteration  23: 1241290.739 ops/s
Iteration  24: 1238999.898 ops/s
Iteration  25: 1243023.265 ops/s
Iteration  26: 1242897.150 ops/s
Iteration  27: 1230901.289 ops/s
Iteration  28: 1233074.171 ops/s
Iteration  29: 1243671.034 ops/s
Iteration  30: 1233211.743 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toImmutableSortedSetBy":
  1240057.473 ±(99.9%) 2439.002 ops/s [Average]
  (min, avg, max) = (1230901.289, 1240057.473, 1245345.132), stdev = 3650.584
  CI (99.9%): [1237618.470, 1242496.475] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_toImmutableSortedSetBy  thrpt   30  1240057.473 ± 2439.002  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 624891.149 ops/s
# Warmup Iteration   2: 1175326.887 ops/s
# Warmup Iteration   3: 1323860.995 ops/s
# Warmup Iteration   4: 1326874.703 ops/s
# Warmup Iteration   5: 1301025.860 ops/s
# Warmup Iteration   6: 1141513.866 ops/s
# Warmup Iteration   7: 1333810.580 ops/s
# Warmup Iteration   8: 1327191.627 ops/s
# Warmup Iteration   9: 1330375.096 ops/s
# Warmup Iteration  10: 1335526.273 ops/s
# Warmup Iteration  11: 1331350.901 ops/s
# Warmup Iteration  12: 1332671.396 ops/s
# Warmup Iteration  13: 1331355.524 ops/s
# Warmup Iteration  14: 1333322.523 ops/s
# Warmup Iteration  15: 1333454.458 ops/s
# Warmup Iteration  16: 1332822.328 ops/s
# Warmup Iteration  17: 1332316.195 ops/s
# Warmup Iteration  18: 1330640.876 ops/s
# Warmup Iteration  19: 1331810.935 ops/s
# Warmup Iteration  20: 1333087.543 ops/s
# Warmup Iteration  21: 1328402.883 ops/s
# Warmup Iteration  22: 1331170.378 ops/s
# Warmup Iteration  23: 1330272.172 ops/s
# Warmup Iteration  24: 1332646.471 ops/s
# Warmup Iteration  25: 1328918.010 ops/s
# Warmup Iteration  26: 1328729.722 ops/s
# Warmup Iteration  27: 1333475.985 ops/s
# Warmup Iteration  28: 1331801.756 ops/s
# Warmup Iteration  29: 1330784.257 ops/s
# Warmup Iteration  30: 1330613.946 ops/s
Iteration   1: 1330058.979 ops/s
Iteration   2: 1330590.566 ops/s
Iteration   3: 1332755.705 ops/s
Iteration   4: 1334703.523 ops/s
Iteration   5: 1335695.030 ops/s
Iteration   6: 1333049.364 ops/s
Iteration   7: 1328133.577 ops/s
Iteration   8: 1331524.511 ops/s
Iteration   9: 1331763.057 ops/s
Iteration  10: 1329641.906 ops/s
Iteration  11: 1332852.662 ops/s
Iteration  12: 1331259.351 ops/s
Iteration  13: 1329879.093 ops/s
Iteration  14: 1332216.547 ops/s
Iteration  15: 1336821.466 ops/s
Iteration  16: 1329117.435 ops/s
Iteration  17: 1333377.001 ops/s
Iteration  18: 1331190.339 ops/s
Iteration  19: 1324704.867 ops/s
Iteration  20: 1332444.574 ops/s
Iteration  21: 1334598.672 ops/s
Iteration  22: 1334161.735 ops/s
Iteration  23: 1334729.523 ops/s
Iteration  24: 1329040.069 ops/s
Iteration  25: 1332467.757 ops/s
Iteration  26: 1330883.919 ops/s
Iteration  27: 1332927.086 ops/s
Iteration  28: 1334401.837 ops/s
Iteration  29: 1330042.369 ops/s
Iteration  30: 1332278.469 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator":
  1331910.366 ±(99.9%) 1673.388 ops/s [Average]
  (min, avg, max) = (1324704.867, 1331910.366, 1336821.466), stdev = 2504.649
  CI (99.9%): [1330236.978, 1333583.754] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator  thrpt   30  1331910.366 ± 1673.388  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 551152.203 ops/s
# Warmup Iteration   2: 1057893.208 ops/s
# Warmup Iteration   3: 1183800.507 ops/s
# Warmup Iteration   4: 1189097.593 ops/s
# Warmup Iteration   5: 1116309.843 ops/s
# Warmup Iteration   6: 1051602.232 ops/s
# Warmup Iteration   7: 1186645.602 ops/s
# Warmup Iteration   8: 1190735.038 ops/s
# Warmup Iteration   9: 1190275.610 ops/s
# Warmup Iteration  10: 1187638.304 ops/s
# Warmup Iteration  11: 1186733.339 ops/s
# Warmup Iteration  12: 1188709.511 ops/s
# Warmup Iteration  13: 1189017.398 ops/s
# Warmup Iteration  14: 1189266.771 ops/s
# Warmup Iteration  15: 1186152.496 ops/s
# Warmup Iteration  16: 1187387.061 ops/s
# Warmup Iteration  17: 1179809.604 ops/s
# Warmup Iteration  18: 1182206.864 ops/s
# Warmup Iteration  19: 1178909.947 ops/s
# Warmup Iteration  20: 1174749.325 ops/s
# Warmup Iteration  21: 1179402.118 ops/s
# Warmup Iteration  22: 1180783.716 ops/s
# Warmup Iteration  23: 1181275.702 ops/s
# Warmup Iteration  24: 1177635.020 ops/s
# Warmup Iteration  25: 1179326.234 ops/s
# Warmup Iteration  26: 1180305.263 ops/s
# Warmup Iteration  27: 1180168.377 ops/s
# Warmup Iteration  28: 1177984.833 ops/s
# Warmup Iteration  29: 1176836.763 ops/s
# Warmup Iteration  30: 1180673.740 ops/s
Iteration   1: 1182223.191 ops/s
Iteration   2: 1178461.080 ops/s
Iteration   3: 1181524.915 ops/s
Iteration   4: 1185382.341 ops/s
Iteration   5: 1178576.561 ops/s
Iteration   6: 1182220.652 ops/s
Iteration   7: 1178800.139 ops/s
Iteration   8: 1180882.581 ops/s
Iteration   9: 1183866.067 ops/s
Iteration  10: 1179387.629 ops/s
Iteration  11: 1183891.869 ops/s
Iteration  12: 1180071.310 ops/s
Iteration  13: 1178216.810 ops/s
Iteration  14: 1184523.966 ops/s
Iteration  15: 1180731.285 ops/s
Iteration  16: 1182367.218 ops/s
Iteration  17: 1180095.607 ops/s
Iteration  18: 1181518.340 ops/s
Iteration  19: 1181819.731 ops/s
Iteration  20: 1178741.671 ops/s
Iteration  21: 1183464.780 ops/s
Iteration  22: 1179371.223 ops/s
Iteration  23: 1178544.423 ops/s
Iteration  24: 1181567.201 ops/s
Iteration  25: 1180146.963 ops/s
Iteration  26: 1176524.014 ops/s
Iteration  27: 1180968.512 ops/s
Iteration  28: 1178506.978 ops/s
Iteration  29: 1180943.655 ops/s
Iteration  30: 1179961.325 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toList":
  1180776.735 ±(99.9%) 1416.127 ops/s [Average]
  (min, avg, max) = (1176524.014, 1180776.735, 1185382.341), stdev = 2119.593
  CI (99.9%): [1179360.607, 1182192.862] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_toList  thrpt   30  1180776.735 ± 1416.127  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 463384.198 ops/s
# Warmup Iteration   2: 862334.187 ops/s
# Warmup Iteration   3: 948782.542 ops/s
# Warmup Iteration   4: 954803.498 ops/s
# Warmup Iteration   5: 868569.952 ops/s
# Warmup Iteration   6: 879930.167 ops/s
# Warmup Iteration   7: 955238.318 ops/s
# Warmup Iteration   8: 958831.165 ops/s
# Warmup Iteration   9: 967418.686 ops/s
# Warmup Iteration  10: 956284.744 ops/s
# Warmup Iteration  11: 962136.703 ops/s
# Warmup Iteration  12: 960586.689 ops/s
# Warmup Iteration  13: 957099.163 ops/s
# Warmup Iteration  14: 965036.339 ops/s
# Warmup Iteration  15: 954631.131 ops/s
# Warmup Iteration  16: 956360.229 ops/s
# Warmup Iteration  17: 953502.655 ops/s
# Warmup Iteration  18: 954715.295 ops/s
# Warmup Iteration  19: 959464.871 ops/s
# Warmup Iteration  20: 949881.752 ops/s
# Warmup Iteration  21: 947481.705 ops/s
# Warmup Iteration  22: 949946.818 ops/s
# Warmup Iteration  23: 956672.008 ops/s
# Warmup Iteration  24: 953543.211 ops/s
# Warmup Iteration  25: 958785.366 ops/s
# Warmup Iteration  26: 959428.517 ops/s
# Warmup Iteration  27: 957786.471 ops/s
# Warmup Iteration  28: 954255.946 ops/s
# Warmup Iteration  29: 957427.785 ops/s
# Warmup Iteration  30: 958491.490 ops/s
Iteration   1: 957808.898 ops/s
Iteration   2: 962845.382 ops/s
Iteration   3: 961766.232 ops/s
Iteration   4: 961224.690 ops/s
Iteration   5: 959520.594 ops/s
Iteration   6: 961950.512 ops/s
Iteration   7: 960189.887 ops/s
Iteration   8: 945890.016 ops/s
Iteration   9: 965373.188 ops/s
Iteration  10: 960598.116 ops/s
Iteration  11: 959367.719 ops/s
Iteration  12: 960625.352 ops/s
Iteration  13: 965742.309 ops/s
Iteration  14: 968775.145 ops/s
Iteration  15: 950074.324 ops/s
Iteration  16: 965831.769 ops/s
Iteration  17: 962555.878 ops/s
Iteration  18: 966471.614 ops/s
Iteration  19: 956470.708 ops/s
Iteration  20: 960502.754 ops/s
Iteration  21: 956094.546 ops/s
Iteration  22: 961753.021 ops/s
Iteration  23: 953793.624 ops/s
Iteration  24: 961358.315 ops/s
Iteration  25: 957873.053 ops/s
Iteration  26: 957083.397 ops/s
Iteration  27: 960944.294 ops/s
Iteration  28: 951509.722 ops/s
Iteration  29: 957811.282 ops/s
Iteration  30: 959292.433 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toMap":
  959703.292 ±(99.9%) 3286.386 ops/s [Average]
  (min, avg, max) = (945890.016, 959703.292, 968775.145), stdev = 4918.908
  CI (99.9%): [956416.907, 962989.678] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_toMap  thrpt   30  959703.292 ± 3286.386  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toMapOfItemToCount$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toMapOfItemToCount

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1306283.206 ops/s
# Warmup Iteration   2: 2188097.869 ops/s
# Warmup Iteration   3: 2528676.111 ops/s
# Warmup Iteration   4: 2535105.890 ops/s
# Warmup Iteration   5: 2533775.253 ops/s
# Warmup Iteration   6: 2076843.811 ops/s
# Warmup Iteration   7: 2533023.368 ops/s
# Warmup Iteration   8: 2550236.548 ops/s
# Warmup Iteration   9: 2534259.918 ops/s
# Warmup Iteration  10: 2539453.285 ops/s
# Warmup Iteration  11: 2528043.742 ops/s
# Warmup Iteration  12: 2520994.986 ops/s
# Warmup Iteration  13: 2536884.209 ops/s
# Warmup Iteration  14: 2523738.213 ops/s
# Warmup Iteration  15: 2535782.690 ops/s
# Warmup Iteration  16: 2536489.952 ops/s
# Warmup Iteration  17: 2536679.231 ops/s
# Warmup Iteration  18: 2542796.673 ops/s
# Warmup Iteration  19: 2542569.361 ops/s
# Warmup Iteration  20: 2541104.865 ops/s
# Warmup Iteration  21: 2540960.645 ops/s
# Warmup Iteration  22: 2556483.412 ops/s
# Warmup Iteration  23: 2550565.292 ops/s
# Warmup Iteration  24: 2552936.220 ops/s
# Warmup Iteration  25: 2530440.904 ops/s
# Warmup Iteration  26: 2538958.180 ops/s
# Warmup Iteration  27: 2548704.477 ops/s
# Warmup Iteration  28: 2560547.370 ops/s
# Warmup Iteration  29: 2539186.379 ops/s
# Warmup Iteration  30: 2529557.912 ops/s
Iteration   1: 2546881.616 ops/s
Iteration   2: 2562504.312 ops/s
Iteration   3: 2531838.122 ops/s
Iteration   4: 2549277.096 ops/s
Iteration   5: 2539508.857 ops/s
Iteration   6: 2544895.979 ops/s
Iteration   7: 2553069.572 ops/s
Iteration   8: 2553737.180 ops/s
Iteration   9: 2532597.865 ops/s
Iteration  10: 2535654.932 ops/s
Iteration  11: 2562842.878 ops/s
Iteration  12: 2536652.788 ops/s
Iteration  13: 2539262.200 ops/s
Iteration  14: 2552445.013 ops/s
Iteration  15: 2562230.663 ops/s
Iteration  16: 2558182.599 ops/s
Iteration  17: 2545622.532 ops/s
Iteration  18: 2549539.815 ops/s
Iteration  19: 2551682.010 ops/s
Iteration  20: 2554737.889 ops/s
Iteration  21: 2522921.187 ops/s
Iteration  22: 2551867.154 ops/s
Iteration  23: 2537851.813 ops/s
Iteration  24: 2550056.827 ops/s
Iteration  25: 2553503.908 ops/s
Iteration  26: 2534229.824 ops/s
Iteration  27: 2551773.002 ops/s
Iteration  28: 2530004.250 ops/s
Iteration  29: 2543702.342 ops/s
Iteration  30: 2546503.009 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toMapOfItemToCount":
  2546185.908 ±(99.9%) 6856.105 ops/s [Average]
  (min, avg, max) = (2522921.187, 2546185.908, 2562842.878), stdev = 10261.895
  CI (99.9%): [2539329.803, 2553042.012] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_toMapOfItemToCount  thrpt   30  2546185.908 ± 6856.105  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toMapTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toMapTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 433746.057 ops/s
# Warmup Iteration   2: 862129.479 ops/s
# Warmup Iteration   3: 907653.621 ops/s
# Warmup Iteration   4: 917449.498 ops/s
# Warmup Iteration   5: 759946.657 ops/s
# Warmup Iteration   6: 919001.971 ops/s
# Warmup Iteration   7: 912897.971 ops/s
# Warmup Iteration   8: 913747.592 ops/s
# Warmup Iteration   9: 917356.494 ops/s
# Warmup Iteration  10: 915854.909 ops/s
# Warmup Iteration  11: 916666.495 ops/s
# Warmup Iteration  12: 913169.538 ops/s
# Warmup Iteration  13: 913966.503 ops/s
# Warmup Iteration  14: 909824.893 ops/s
# Warmup Iteration  15: 910932.369 ops/s
# Warmup Iteration  16: 913875.559 ops/s
# Warmup Iteration  17: 907612.177 ops/s
# Warmup Iteration  18: 905465.345 ops/s
# Warmup Iteration  19: 907745.420 ops/s
# Warmup Iteration  20: 903668.628 ops/s
# Warmup Iteration  21: 910148.067 ops/s
# Warmup Iteration  22: 908261.646 ops/s
# Warmup Iteration  23: 908955.829 ops/s
# Warmup Iteration  24: 907066.426 ops/s
# Warmup Iteration  25: 906984.435 ops/s
# Warmup Iteration  26: 908616.541 ops/s
# Warmup Iteration  27: 906555.862 ops/s
# Warmup Iteration  28: 908469.285 ops/s
# Warmup Iteration  29: 912095.808 ops/s
# Warmup Iteration  30: 907326.160 ops/s
Iteration   1: 906292.658 ops/s
Iteration   2: 910957.157 ops/s
Iteration   3: 907054.266 ops/s
Iteration   4: 909009.167 ops/s
Iteration   5: 902594.728 ops/s
Iteration   6: 904014.447 ops/s
Iteration   7: 894773.871 ops/s
Iteration   8: 908950.670 ops/s
Iteration   9: 912521.058 ops/s
Iteration  10: 906494.954 ops/s
Iteration  11: 903662.372 ops/s
Iteration  12: 915431.442 ops/s
Iteration  13: 910146.406 ops/s
Iteration  14: 907840.903 ops/s
Iteration  15: 907863.034 ops/s
Iteration  16: 904628.108 ops/s
Iteration  17: 907116.304 ops/s
Iteration  18: 905082.397 ops/s
Iteration  19: 902786.395 ops/s
Iteration  20: 907471.588 ops/s
Iteration  21: 912434.515 ops/s
Iteration  22: 913325.536 ops/s
Iteration  23: 904602.349 ops/s
Iteration  24: 905330.682 ops/s
Iteration  25: 912189.037 ops/s
Iteration  26: 904331.528 ops/s
Iteration  27: 915504.668 ops/s
Iteration  28: 909885.194 ops/s
Iteration  29: 907452.797 ops/s
Iteration  30: 913479.202 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toMapTarget":
  907774.248 ±(99.9%) 2963.054 ops/s [Average]
  (min, avg, max) = (894773.871, 907774.248, 915504.668), stdev = 4434.961
  CI (99.9%): [904811.193, 910737.302] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_toMapTarget  thrpt   30  907774.248 ± 2963.054  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 589373.770 ops/s
# Warmup Iteration   2: 1133211.302 ops/s
# Warmup Iteration   3: 1320956.171 ops/s
# Warmup Iteration   4: 1326539.955 ops/s
# Warmup Iteration   5: 1273658.264 ops/s
# Warmup Iteration   6: 1146318.492 ops/s
# Warmup Iteration   7: 1321900.382 ops/s
# Warmup Iteration   8: 1333828.376 ops/s
# Warmup Iteration   9: 1332454.732 ops/s
# Warmup Iteration  10: 1325044.432 ops/s
# Warmup Iteration  11: 1323168.885 ops/s
# Warmup Iteration  12: 1323766.129 ops/s
# Warmup Iteration  13: 1330339.976 ops/s
# Warmup Iteration  14: 1331448.855 ops/s
# Warmup Iteration  15: 1321914.703 ops/s
# Warmup Iteration  16: 1332845.816 ops/s
# Warmup Iteration  17: 1326724.788 ops/s
# Warmup Iteration  18: 1331851.940 ops/s
# Warmup Iteration  19: 1325300.912 ops/s
# Warmup Iteration  20: 1327898.851 ops/s
# Warmup Iteration  21: 1327998.600 ops/s
# Warmup Iteration  22: 1324977.330 ops/s
# Warmup Iteration  23: 1323640.519 ops/s
# Warmup Iteration  24: 1326396.559 ops/s
# Warmup Iteration  25: 1328242.338 ops/s
# Warmup Iteration  26: 1325807.178 ops/s
# Warmup Iteration  27: 1329133.997 ops/s
# Warmup Iteration  28: 1327153.317 ops/s
# Warmup Iteration  29: 1326574.080 ops/s
# Warmup Iteration  30: 1326961.933 ops/s
Iteration   1: 1328295.771 ops/s
Iteration   2: 1328605.879 ops/s
Iteration   3: 1326573.106 ops/s
Iteration   4: 1326224.609 ops/s
Iteration   5: 1324655.267 ops/s
Iteration   6: 1325755.025 ops/s
Iteration   7: 1326130.105 ops/s
Iteration   8: 1321955.964 ops/s
Iteration   9: 1326525.932 ops/s
Iteration  10: 1326144.042 ops/s
Iteration  11: 1326074.749 ops/s
Iteration  12: 1327903.783 ops/s
Iteration  13: 1324260.133 ops/s
Iteration  14: 1319937.970 ops/s
Iteration  15: 1329839.759 ops/s
Iteration  16: 1327069.609 ops/s
Iteration  17: 1321937.817 ops/s
Iteration  18: 1324916.488 ops/s
Iteration  19: 1322235.542 ops/s
Iteration  20: 1333620.977 ops/s
Iteration  21: 1329343.849 ops/s
Iteration  22: 1327354.948 ops/s
Iteration  23: 1329315.051 ops/s
Iteration  24: 1328304.729 ops/s
Iteration  25: 1326585.480 ops/s
Iteration  26: 1333603.461 ops/s
Iteration  27: 1327946.083 ops/s
Iteration  28: 1329626.043 ops/s
Iteration  29: 1325015.784 ops/s
Iteration  30: 1332730.171 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toSet":
  1326949.604 ±(99.9%) 2162.502 ops/s [Average]
  (min, avg, max) = (1319937.970, 1326949.604, 1333620.977), stdev = 3236.732
  CI (99.9%): [1324787.102, 1329112.107] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_toSet  thrpt   30  1326949.604 ± 2162.502  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toSortedBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toSortedBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 218482.141 ops/s
# Warmup Iteration   2: 356997.930 ops/s
# Warmup Iteration   3: 438497.164 ops/s
# Warmup Iteration   4: 436078.286 ops/s
# Warmup Iteration   5: 439280.341 ops/s
# Warmup Iteration   6: 439751.780 ops/s
# Warmup Iteration   7: 369199.363 ops/s
# Warmup Iteration   8: 440343.372 ops/s
# Warmup Iteration   9: 440357.704 ops/s
# Warmup Iteration  10: 440249.773 ops/s
# Warmup Iteration  11: 439245.249 ops/s
# Warmup Iteration  12: 439764.895 ops/s
# Warmup Iteration  13: 439803.656 ops/s
# Warmup Iteration  14: 441011.962 ops/s
# Warmup Iteration  15: 440415.438 ops/s
# Warmup Iteration  16: 438866.862 ops/s
# Warmup Iteration  17: 439889.515 ops/s
# Warmup Iteration  18: 440024.936 ops/s
# Warmup Iteration  19: 440706.196 ops/s
# Warmup Iteration  20: 439216.968 ops/s
# Warmup Iteration  21: 439425.558 ops/s
# Warmup Iteration  22: 439555.378 ops/s
# Warmup Iteration  23: 439452.600 ops/s
# Warmup Iteration  24: 439361.349 ops/s
# Warmup Iteration  25: 439967.320 ops/s
# Warmup Iteration  26: 439627.291 ops/s
# Warmup Iteration  27: 440157.914 ops/s
# Warmup Iteration  28: 439518.447 ops/s
# Warmup Iteration  29: 440045.740 ops/s
# Warmup Iteration  30: 440376.184 ops/s
Iteration   1: 439108.660 ops/s
Iteration   2: 439781.738 ops/s
Iteration   3: 438371.275 ops/s
Iteration   4: 438312.178 ops/s
Iteration   5: 439740.268 ops/s
Iteration   6: 439553.298 ops/s
Iteration   7: 438468.646 ops/s
Iteration   8: 438957.918 ops/s
Iteration   9: 441574.078 ops/s
Iteration  10: 439045.685 ops/s
Iteration  11: 439309.679 ops/s
Iteration  12: 438905.551 ops/s
Iteration  13: 439481.943 ops/s
Iteration  14: 436772.222 ops/s
Iteration  15: 440937.832 ops/s
Iteration  16: 438871.795 ops/s
Iteration  17: 438536.971 ops/s
Iteration  18: 439882.358 ops/s
Iteration  19: 438701.496 ops/s
Iteration  20: 439590.993 ops/s
Iteration  21: 438009.637 ops/s
Iteration  22: 440592.413 ops/s
Iteration  23: 440373.405 ops/s
Iteration  24: 439321.203 ops/s
Iteration  25: 440949.663 ops/s
Iteration  26: 440304.450 ops/s
Iteration  27: 440919.411 ops/s
Iteration  28: 440826.063 ops/s
Iteration  29: 440688.516 ops/s
Iteration  30: 439220.047 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toSortedBag":
  439503.646 ±(99.9%) 713.540 ops/s [Average]
  (min, avg, max) = (436772.222, 439503.646, 441574.078), stdev = 1067.994
  CI (99.9%): [438790.106, 440217.187] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score     Error  Units
ImmutableHashBagTest._Benchmark.benchmark_toSortedBag  thrpt   30  439503.646 ± 713.540  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toSortedBagBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toSortedBagBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 136262.534 ops/s
# Warmup Iteration   2: 257443.126 ops/s
# Warmup Iteration   3: 295677.352 ops/s
# Warmup Iteration   4: 296092.558 ops/s
# Warmup Iteration   5: 297064.446 ops/s
# Warmup Iteration   6: 249216.504 ops/s
# Warmup Iteration   7: 298167.624 ops/s
# Warmup Iteration   8: 297168.089 ops/s
# Warmup Iteration   9: 297278.171 ops/s
# Warmup Iteration  10: 297838.238 ops/s
# Warmup Iteration  11: 297630.825 ops/s
# Warmup Iteration  12: 297132.621 ops/s
# Warmup Iteration  13: 297173.640 ops/s
# Warmup Iteration  14: 297723.773 ops/s
# Warmup Iteration  15: 297367.395 ops/s
# Warmup Iteration  16: 297197.338 ops/s
# Warmup Iteration  17: 297703.395 ops/s
# Warmup Iteration  18: 297470.785 ops/s
# Warmup Iteration  19: 297623.117 ops/s
# Warmup Iteration  20: 296787.742 ops/s
# Warmup Iteration  21: 297214.843 ops/s
# Warmup Iteration  22: 297781.575 ops/s
# Warmup Iteration  23: 297569.818 ops/s
# Warmup Iteration  24: 297352.711 ops/s
# Warmup Iteration  25: 297282.300 ops/s
# Warmup Iteration  26: 297230.810 ops/s
# Warmup Iteration  27: 297556.995 ops/s
# Warmup Iteration  28: 297594.946 ops/s
# Warmup Iteration  29: 298176.505 ops/s
# Warmup Iteration  30: 297318.250 ops/s
Iteration   1: 298682.275 ops/s
Iteration   2: 296932.343 ops/s
Iteration   3: 297891.086 ops/s
Iteration   4: 298630.417 ops/s
Iteration   5: 297820.263 ops/s
Iteration   6: 297398.186 ops/s
Iteration   7: 296944.752 ops/s
Iteration   8: 297981.552 ops/s
Iteration   9: 297459.428 ops/s
Iteration  10: 298121.270 ops/s
Iteration  11: 297094.925 ops/s
Iteration  12: 296948.809 ops/s
Iteration  13: 298293.389 ops/s
Iteration  14: 298137.429 ops/s
Iteration  15: 298621.187 ops/s
Iteration  16: 298186.718 ops/s
Iteration  17: 297611.735 ops/s
Iteration  18: 298023.635 ops/s
Iteration  19: 297139.620 ops/s
Iteration  20: 297717.402 ops/s
Iteration  21: 296846.236 ops/s
Iteration  22: 298070.098 ops/s
Iteration  23: 297500.416 ops/s
Iteration  24: 297111.144 ops/s
Iteration  25: 296925.008 ops/s
Iteration  26: 297430.688 ops/s
Iteration  27: 298510.995 ops/s
Iteration  28: 296897.365 ops/s
Iteration  29: 298001.524 ops/s
Iteration  30: 297435.010 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toSortedBagBy":
  297678.830 ±(99.9%) 388.552 ops/s [Average]
  (min, avg, max) = (296846.236, 297678.830, 298682.275), stdev = 581.566
  CI (99.9%): [297290.278, 298067.382] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score     Error  Units
ImmutableHashBagTest._Benchmark.benchmark_toSortedBagBy  thrpt   30  297678.830 ± 388.552  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toSortedBag_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toSortedBag_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 442712.218 ops/s
# Warmup Iteration   2: 843247.820 ops/s
# Warmup Iteration   3: 969375.282 ops/s
# Warmup Iteration   4: 978407.476 ops/s
# Warmup Iteration   5: 976148.619 ops/s
# Warmup Iteration   6: 816084.979 ops/s
# Warmup Iteration   7: 974515.299 ops/s
# Warmup Iteration   8: 975793.796 ops/s
# Warmup Iteration   9: 978949.490 ops/s
# Warmup Iteration  10: 975744.281 ops/s
# Warmup Iteration  11: 978171.773 ops/s
# Warmup Iteration  12: 977300.040 ops/s
# Warmup Iteration  13: 977400.141 ops/s
# Warmup Iteration  14: 974232.755 ops/s
# Warmup Iteration  15: 977411.746 ops/s
# Warmup Iteration  16: 978172.682 ops/s
# Warmup Iteration  17: 977883.992 ops/s
# Warmup Iteration  18: 976851.964 ops/s
# Warmup Iteration  19: 978656.433 ops/s
# Warmup Iteration  20: 978973.992 ops/s
# Warmup Iteration  21: 980211.441 ops/s
# Warmup Iteration  22: 977489.118 ops/s
# Warmup Iteration  23: 977968.309 ops/s
# Warmup Iteration  24: 976259.746 ops/s
# Warmup Iteration  25: 977195.717 ops/s
# Warmup Iteration  26: 980034.703 ops/s
# Warmup Iteration  27: 980269.294 ops/s
# Warmup Iteration  28: 978304.112 ops/s
# Warmup Iteration  29: 976292.150 ops/s
# Warmup Iteration  30: 977822.941 ops/s
Iteration   1: 977966.316 ops/s
Iteration   2: 976709.092 ops/s
Iteration   3: 976694.468 ops/s
Iteration   4: 978116.381 ops/s
Iteration   5: 974986.516 ops/s
Iteration   6: 980667.133 ops/s
Iteration   7: 974060.916 ops/s
Iteration   8: 979517.328 ops/s
Iteration   9: 977743.177 ops/s
Iteration  10: 975799.643 ops/s
Iteration  11: 980172.152 ops/s
Iteration  12: 973898.355 ops/s
Iteration  13: 979465.401 ops/s
Iteration  14: 975652.741 ops/s
Iteration  15: 975399.746 ops/s
Iteration  16: 977768.938 ops/s
Iteration  17: 976119.801 ops/s
Iteration  18: 978781.038 ops/s
Iteration  19: 974713.246 ops/s
Iteration  20: 979233.957 ops/s
Iteration  21: 979252.115 ops/s
Iteration  22: 976536.675 ops/s
Iteration  23: 979202.432 ops/s
Iteration  24: 975821.506 ops/s
Iteration  25: 974987.573 ops/s
Iteration  26: 977263.123 ops/s
Iteration  27: 977005.969 ops/s
Iteration  28: 977289.766 ops/s
Iteration  29: 977303.566 ops/s
Iteration  30: 974967.424 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toSortedBag_natural_ordering":
  977103.217 ±(99.9%) 1249.040 ops/s [Average]
  (min, avg, max) = (973898.355, 977103.217, 980667.133), stdev = 1869.505
  CI (99.9%): [975854.176, 978352.257] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_toSortedBag_natural_ordering  thrpt   30  977103.217 ± 1249.040  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toSortedBag_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toSortedBag_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 480735.209 ops/s
# Warmup Iteration   2: 909463.347 ops/s
# Warmup Iteration   3: 1058644.097 ops/s
# Warmup Iteration   4: 1065251.851 ops/s
# Warmup Iteration   5: 1064842.947 ops/s
# Warmup Iteration   6: 888658.886 ops/s
# Warmup Iteration   7: 1067652.354 ops/s
# Warmup Iteration   8: 1066521.232 ops/s
# Warmup Iteration   9: 1064151.003 ops/s
# Warmup Iteration  10: 1065380.533 ops/s
# Warmup Iteration  11: 1066139.006 ops/s
# Warmup Iteration  12: 1065643.435 ops/s
# Warmup Iteration  13: 1066921.903 ops/s
# Warmup Iteration  14: 1066668.986 ops/s
# Warmup Iteration  15: 1065668.072 ops/s
# Warmup Iteration  16: 1068645.324 ops/s
# Warmup Iteration  17: 1063789.132 ops/s
# Warmup Iteration  18: 1065768.476 ops/s
# Warmup Iteration  19: 1065641.590 ops/s
# Warmup Iteration  20: 1064447.304 ops/s
# Warmup Iteration  21: 1067772.769 ops/s
# Warmup Iteration  22: 1065646.398 ops/s
# Warmup Iteration  23: 1066429.450 ops/s
# Warmup Iteration  24: 1068085.337 ops/s
# Warmup Iteration  25: 1067317.903 ops/s
# Warmup Iteration  26: 1066171.462 ops/s
# Warmup Iteration  27: 1065527.948 ops/s
# Warmup Iteration  28: 1065595.642 ops/s
# Warmup Iteration  29: 1066252.999 ops/s
# Warmup Iteration  30: 1065435.393 ops/s
Iteration   1: 1063944.990 ops/s
Iteration   2: 1066856.753 ops/s
Iteration   3: 1066501.874 ops/s
Iteration   4: 1064820.525 ops/s
Iteration   5: 1066874.529 ops/s
Iteration   6: 1065768.810 ops/s
Iteration   7: 1068401.618 ops/s
Iteration   8: 1066023.912 ops/s
Iteration   9: 1065095.553 ops/s
Iteration  10: 1067484.636 ops/s
Iteration  11: 1063080.912 ops/s
Iteration  12: 1068058.337 ops/s
Iteration  13: 1065438.509 ops/s
Iteration  14: 1069060.426 ops/s
Iteration  15: 1066351.072 ops/s
Iteration  16: 1068610.217 ops/s
Iteration  17: 1065121.600 ops/s
Iteration  18: 1066105.530 ops/s
Iteration  19: 1068756.106 ops/s
Iteration  20: 1068607.758 ops/s
Iteration  21: 1064376.394 ops/s
Iteration  22: 1064482.397 ops/s
Iteration  23: 1067448.395 ops/s
Iteration  24: 1068866.256 ops/s
Iteration  25: 1063567.552 ops/s
Iteration  26: 1066067.332 ops/s
Iteration  27: 1067700.658 ops/s
Iteration  28: 1064911.511 ops/s
Iteration  29: 1065753.015 ops/s
Iteration  30: 1064072.752 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toSortedBag_with_comparator":
  1066273.664 ±(99.9%) 1160.813 ops/s [Average]
  (min, avg, max) = (1063080.912, 1066273.664, 1069060.426), stdev = 1737.451
  CI (99.9%): [1065112.851, 1067434.478] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_toSortedBag_with_comparator  thrpt   30  1066273.664 ± 1160.813  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toSortedBag_with_null$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toSortedBag_with_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 447979.489 ops/s
# Warmup Iteration   2: 494835.039 ops/s
# Warmup Iteration   3: 618767.276 ops/s
# Warmup Iteration   4: 647478.221 ops/s
# Warmup Iteration   5: 652231.374 ops/s
# Warmup Iteration   6: 653697.743 ops/s
# Warmup Iteration   7: 652905.857 ops/s
# Warmup Iteration   8: 652393.737 ops/s
# Warmup Iteration   9: 651858.584 ops/s
# Warmup Iteration  10: 653360.868 ops/s
# Warmup Iteration  11: 652080.493 ops/s
# Warmup Iteration  12: 637638.060 ops/s
# Warmup Iteration  13: 556266.259 ops/s
# Warmup Iteration  14: 652241.328 ops/s
# Warmup Iteration  15: 651454.575 ops/s
# Warmup Iteration  16: 652373.572 ops/s
# Warmup Iteration  17: 679743.156 ops/s
# Warmup Iteration  18: 680452.003 ops/s
# Warmup Iteration  19: 681206.278 ops/s
# Warmup Iteration  20: 680243.457 ops/s
# Warmup Iteration  21: 682448.451 ops/s
# Warmup Iteration  22: 679285.954 ops/s
# Warmup Iteration  23: 680635.782 ops/s
# Warmup Iteration  24: 680477.101 ops/s
# Warmup Iteration  25: 680974.428 ops/s
# Warmup Iteration  26: 678468.580 ops/s
# Warmup Iteration  27: 681966.735 ops/s
# Warmup Iteration  28: 681256.915 ops/s
# Warmup Iteration  29: 681974.643 ops/s
# Warmup Iteration  30: 680830.650 ops/s
Iteration   1: 679759.119 ops/s
Iteration   2: 678964.043 ops/s
Iteration   3: 679028.154 ops/s
Iteration   4: 679637.082 ops/s
Iteration   5: 679802.335 ops/s
Iteration   6: 681775.018 ops/s
Iteration   7: 681246.539 ops/s
Iteration   8: 678359.734 ops/s
Iteration   9: 681059.233 ops/s
Iteration  10: 679180.866 ops/s
Iteration  11: 683711.352 ops/s
Iteration  12: 676599.929 ops/s
Iteration  13: 680909.308 ops/s
Iteration  14: 680918.625 ops/s
Iteration  15: 680519.479 ops/s
Iteration  16: 680821.293 ops/s
Iteration  17: 679730.837 ops/s
Iteration  18: 677806.341 ops/s
Iteration  19: 681688.291 ops/s
Iteration  20: 680318.468 ops/s
Iteration  21: 680800.276 ops/s
Iteration  22: 682464.356 ops/s
Iteration  23: 680846.926 ops/s
Iteration  24: 679426.081 ops/s
Iteration  25: 682256.213 ops/s
Iteration  26: 680382.903 ops/s
Iteration  27: 681880.724 ops/s
Iteration  28: 681215.088 ops/s
Iteration  29: 682339.397 ops/s
Iteration  30: 680343.294 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toSortedBag_with_null":
  680459.710 ±(99.9%) 996.254 ops/s [Average]
  (min, avg, max) = (676599.929, 680459.710, 683711.352), stdev = 1491.146
  CI (99.9%): [679463.456, 681455.964] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score     Error  Units
ImmutableHashBagTest._Benchmark.benchmark_toSortedBag_with_null  thrpt   30  680459.710 ± 996.254  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toSortedList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toSortedList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 607044.813 ops/s
# Warmup Iteration   2: 679232.356 ops/s
# Warmup Iteration   3: 931418.590 ops/s
# Warmup Iteration   4: 941734.143 ops/s
# Warmup Iteration   5: 937658.897 ops/s
# Warmup Iteration   6: 944785.484 ops/s
# Warmup Iteration   7: 941431.400 ops/s
# Warmup Iteration   8: 941220.251 ops/s
# Warmup Iteration   9: 942065.460 ops/s
# Warmup Iteration  10: 943770.657 ops/s
# Warmup Iteration  11: 774565.071 ops/s
# Warmup Iteration  12: 943154.874 ops/s
# Warmup Iteration  13: 943685.986 ops/s
# Warmup Iteration  14: 943877.786 ops/s
# Warmup Iteration  15: 944193.116 ops/s
# Warmup Iteration  16: 945349.598 ops/s
# Warmup Iteration  17: 942239.305 ops/s
# Warmup Iteration  18: 944402.044 ops/s
# Warmup Iteration  19: 943278.366 ops/s
# Warmup Iteration  20: 943245.511 ops/s
# Warmup Iteration  21: 943171.352 ops/s
# Warmup Iteration  22: 943060.279 ops/s
# Warmup Iteration  23: 943473.278 ops/s
# Warmup Iteration  24: 941717.449 ops/s
# Warmup Iteration  25: 942528.335 ops/s
# Warmup Iteration  26: 943477.982 ops/s
# Warmup Iteration  27: 943448.450 ops/s
# Warmup Iteration  28: 942720.626 ops/s
# Warmup Iteration  29: 945043.420 ops/s
# Warmup Iteration  30: 944186.723 ops/s
Iteration   1: 944542.723 ops/s
Iteration   2: 943847.413 ops/s
Iteration   3: 944181.121 ops/s
Iteration   4: 942846.212 ops/s
Iteration   5: 943516.401 ops/s
Iteration   6: 939071.239 ops/s
Iteration   7: 941723.585 ops/s
Iteration   8: 943981.342 ops/s
Iteration   9: 942411.814 ops/s
Iteration  10: 941217.806 ops/s
Iteration  11: 942984.886 ops/s
Iteration  12: 942987.601 ops/s
Iteration  13: 940119.904 ops/s
Iteration  14: 944864.112 ops/s
Iteration  15: 940804.079 ops/s
Iteration  16: 943325.103 ops/s
Iteration  17: 944531.764 ops/s
Iteration  18: 944019.257 ops/s
Iteration  19: 943651.564 ops/s
Iteration  20: 943199.827 ops/s
Iteration  21: 946811.237 ops/s
Iteration  22: 939607.147 ops/s
Iteration  23: 943952.816 ops/s
Iteration  24: 943885.915 ops/s
Iteration  25: 943987.343 ops/s
Iteration  26: 941935.482 ops/s
Iteration  27: 944236.578 ops/s
Iteration  28: 944098.774 ops/s
Iteration  29: 943383.857 ops/s
Iteration  30: 939843.008 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toSortedList":
  942985.664 ±(99.9%) 1174.125 ops/s [Average]
  (min, avg, max) = (939071.239, 942985.664, 946811.237), stdev = 1757.375
  CI (99.9%): [941811.539, 944159.789] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_toSortedList  thrpt   30  942985.664 ± 1174.125  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toSortedListBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toSortedListBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 322866.818 ops/s
# Warmup Iteration   2: 474043.639 ops/s
# Warmup Iteration   3: 586472.962 ops/s
# Warmup Iteration   4: 583290.936 ops/s
# Warmup Iteration   5: 585026.120 ops/s
# Warmup Iteration   6: 586048.575 ops/s
# Warmup Iteration   7: 530017.142 ops/s
# Warmup Iteration   8: 541042.288 ops/s
# Warmup Iteration   9: 587376.110 ops/s
# Warmup Iteration  10: 587443.459 ops/s
# Warmup Iteration  11: 586871.564 ops/s
# Warmup Iteration  12: 587395.118 ops/s
# Warmup Iteration  13: 588010.232 ops/s
# Warmup Iteration  14: 584832.879 ops/s
# Warmup Iteration  15: 586952.605 ops/s
# Warmup Iteration  16: 586236.650 ops/s
# Warmup Iteration  17: 585568.718 ops/s
# Warmup Iteration  18: 586336.213 ops/s
# Warmup Iteration  19: 586719.713 ops/s
# Warmup Iteration  20: 588989.602 ops/s
# Warmup Iteration  21: 586723.049 ops/s
# Warmup Iteration  22: 587037.953 ops/s
# Warmup Iteration  23: 587090.831 ops/s
# Warmup Iteration  24: 587484.489 ops/s
# Warmup Iteration  25: 587779.736 ops/s
# Warmup Iteration  26: 587211.988 ops/s
# Warmup Iteration  27: 587959.130 ops/s
# Warmup Iteration  28: 587401.989 ops/s
# Warmup Iteration  29: 586932.255 ops/s
# Warmup Iteration  30: 587054.950 ops/s
Iteration   1: 585145.038 ops/s
Iteration   2: 586419.005 ops/s
Iteration   3: 585810.739 ops/s
Iteration   4: 585965.926 ops/s
Iteration   5: 588420.225 ops/s
Iteration   6: 585805.290 ops/s
Iteration   7: 586650.608 ops/s
Iteration   8: 587956.558 ops/s
Iteration   9: 587306.766 ops/s
Iteration  10: 587706.324 ops/s
Iteration  11: 585597.852 ops/s
Iteration  12: 585271.257 ops/s
Iteration  13: 588393.486 ops/s
Iteration  14: 585422.493 ops/s
Iteration  15: 588640.095 ops/s
Iteration  16: 586203.287 ops/s
Iteration  17: 588732.083 ops/s
Iteration  18: 588450.245 ops/s
Iteration  19: 587722.571 ops/s
Iteration  20: 588221.294 ops/s
Iteration  21: 587504.155 ops/s
Iteration  22: 587191.142 ops/s
Iteration  23: 584231.131 ops/s
Iteration  24: 588553.846 ops/s
Iteration  25: 586751.126 ops/s
Iteration  26: 588544.324 ops/s
Iteration  27: 588441.033 ops/s
Iteration  28: 586853.805 ops/s
Iteration  29: 587862.753 ops/s
Iteration  30: 585556.950 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toSortedListBy":
  587044.380 ±(99.9%) 867.104 ops/s [Average]
  (min, avg, max) = (584231.131, 587044.380, 588732.083), stdev = 1297.841
  CI (99.9%): [586177.276, 587911.485] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score     Error  Units
ImmutableHashBagTest._Benchmark.benchmark_toSortedListBy  thrpt   30  587044.380 ± 867.104  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toSortedListBy_with_null$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toSortedListBy_with_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 783673.163 ops/s
# Warmup Iteration   2: 1022550.853 ops/s
# Warmup Iteration   3: 1379619.446 ops/s
# Warmup Iteration   4: 1374356.731 ops/s
# Warmup Iteration   5: 1383170.957 ops/s
# Warmup Iteration   6: 1381553.492 ops/s
# Warmup Iteration   7: 1386801.907 ops/s
# Warmup Iteration   8: 1297122.302 ops/s
# Warmup Iteration   9: 1222394.931 ops/s
# Warmup Iteration  10: 1388227.606 ops/s
# Warmup Iteration  11: 1386952.270 ops/s
# Warmup Iteration  12: 1385964.319 ops/s
# Warmup Iteration  13: 1385009.753 ops/s
# Warmup Iteration  14: 1385972.843 ops/s
# Warmup Iteration  15: 1386866.628 ops/s
# Warmup Iteration  16: 1385369.324 ops/s
# Warmup Iteration  17: 1385312.882 ops/s
# Warmup Iteration  18: 1388575.586 ops/s
# Warmup Iteration  19: 1388853.884 ops/s
# Warmup Iteration  20: 1387399.338 ops/s
# Warmup Iteration  21: 1387029.639 ops/s
# Warmup Iteration  22: 1388007.486 ops/s
# Warmup Iteration  23: 1384666.941 ops/s
# Warmup Iteration  24: 1388253.673 ops/s
# Warmup Iteration  25: 1383503.162 ops/s
# Warmup Iteration  26: 1390298.629 ops/s
# Warmup Iteration  27: 1388622.117 ops/s
# Warmup Iteration  28: 1387354.759 ops/s
# Warmup Iteration  29: 1383335.251 ops/s
# Warmup Iteration  30: 1384903.360 ops/s
Iteration   1: 1382876.905 ops/s
Iteration   2: 1389782.448 ops/s
Iteration   3: 1391164.592 ops/s
Iteration   4: 1389401.231 ops/s
Iteration   5: 1390699.658 ops/s
Iteration   6: 1386956.862 ops/s
Iteration   7: 1391548.822 ops/s
Iteration   8: 1387089.178 ops/s
Iteration   9: 1382984.519 ops/s
Iteration  10: 1387470.708 ops/s
Iteration  11: 1389419.536 ops/s
Iteration  12: 1381952.760 ops/s
Iteration  13: 1387753.829 ops/s
Iteration  14: 1388246.050 ops/s
Iteration  15: 1385709.406 ops/s
Iteration  16: 1388233.098 ops/s
Iteration  17: 1386343.751 ops/s
Iteration  18: 1390099.394 ops/s
Iteration  19: 1388579.232 ops/s
Iteration  20: 1382092.275 ops/s
Iteration  21: 1390891.370 ops/s
Iteration  22: 1382539.155 ops/s
Iteration  23: 1387209.680 ops/s
Iteration  24: 1389154.548 ops/s
Iteration  25: 1390045.195 ops/s
Iteration  26: 1384655.535 ops/s
Iteration  27: 1386698.511 ops/s
Iteration  28: 1388652.497 ops/s
Iteration  29: 1390944.720 ops/s
Iteration  30: 1387234.546 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toSortedListBy_with_null":
  1387547.667 ±(99.9%) 1905.024 ops/s [Average]
  (min, avg, max) = (1381952.760, 1387547.667, 1391548.822), stdev = 2851.351
  CI (99.9%): [1385642.643, 1389452.691] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_toSortedListBy_with_null  thrpt   30  1387547.667 ± 1905.024  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toSortedList_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toSortedList_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 907662.696 ops/s
# Warmup Iteration   2: 2061145.930 ops/s
# Warmup Iteration   3: 2160107.404 ops/s
# Warmup Iteration   4: 1961004.137 ops/s
# Warmup Iteration   5: 1981602.784 ops/s
# Warmup Iteration   6: 2160804.038 ops/s
# Warmup Iteration   7: 2160059.637 ops/s
# Warmup Iteration   8: 2161005.344 ops/s
# Warmup Iteration   9: 2155143.954 ops/s
# Warmup Iteration  10: 2159531.036 ops/s
# Warmup Iteration  11: 2157792.999 ops/s
# Warmup Iteration  12: 2159645.140 ops/s
# Warmup Iteration  13: 2154703.736 ops/s
# Warmup Iteration  14: 2160413.437 ops/s
# Warmup Iteration  15: 2155158.761 ops/s
# Warmup Iteration  16: 2155030.887 ops/s
# Warmup Iteration  17: 2152971.241 ops/s
# Warmup Iteration  18: 2148604.165 ops/s
# Warmup Iteration  19: 2150199.642 ops/s
# Warmup Iteration  20: 2155327.700 ops/s
# Warmup Iteration  21: 2151949.978 ops/s
# Warmup Iteration  22: 2158016.236 ops/s
# Warmup Iteration  23: 2150935.432 ops/s
# Warmup Iteration  24: 2151754.402 ops/s
# Warmup Iteration  25: 2158440.200 ops/s
# Warmup Iteration  26: 2148492.891 ops/s
# Warmup Iteration  27: 2155275.285 ops/s
# Warmup Iteration  28: 2151552.258 ops/s
# Warmup Iteration  29: 2153530.039 ops/s
# Warmup Iteration  30: 2156144.093 ops/s
Iteration   1: 2148626.268 ops/s
Iteration   2: 2150482.771 ops/s
Iteration   3: 2152906.911 ops/s
Iteration   4: 2156587.627 ops/s
Iteration   5: 2155800.420 ops/s
Iteration   6: 2151811.723 ops/s
Iteration   7: 2155038.120 ops/s
Iteration   8: 2155941.344 ops/s
Iteration   9: 2154659.000 ops/s
Iteration  10: 2158540.285 ops/s
Iteration  11: 2153434.988 ops/s
Iteration  12: 2155158.607 ops/s
Iteration  13: 2156643.673 ops/s
Iteration  14: 2152564.121 ops/s
Iteration  15: 2158549.925 ops/s
Iteration  16: 2151322.040 ops/s
Iteration  17: 2143280.481 ops/s
Iteration  18: 2152115.146 ops/s
Iteration  19: 2151699.146 ops/s
Iteration  20: 2154339.673 ops/s
Iteration  21: 2153316.154 ops/s
Iteration  22: 2151320.651 ops/s
Iteration  23: 2154896.673 ops/s
Iteration  24: 2154335.114 ops/s
Iteration  25: 2154012.873 ops/s
Iteration  26: 2158300.412 ops/s
Iteration  27: 2154424.059 ops/s
Iteration  28: 2154836.408 ops/s
Iteration  29: 2150149.779 ops/s
Iteration  30: 2155324.523 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toSortedList_natural_ordering":
  2153680.631 ±(99.9%) 2101.707 ops/s [Average]
  (min, avg, max) = (2143280.481, 2153680.631, 2158549.925), stdev = 3145.736
  CI (99.9%): [2151578.924, 2155782.337] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_toSortedList_natural_ordering  thrpt   30  2153680.631 ± 2101.707  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toSortedList_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toSortedList_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1395922.936 ops/s
# Warmup Iteration   2: 2830881.566 ops/s
# Warmup Iteration   3: 3133996.992 ops/s
# Warmup Iteration   4: 3152362.861 ops/s
# Warmup Iteration   5: 2567333.224 ops/s
# Warmup Iteration   6: 3153272.906 ops/s
# Warmup Iteration   7: 3160388.552 ops/s
# Warmup Iteration   8: 3155991.676 ops/s
# Warmup Iteration   9: 3153403.148 ops/s
# Warmup Iteration  10: 3152488.519 ops/s
# Warmup Iteration  11: 3157228.798 ops/s
# Warmup Iteration  12: 3155025.988 ops/s
# Warmup Iteration  13: 3152125.943 ops/s
# Warmup Iteration  14: 3153815.412 ops/s
# Warmup Iteration  15: 3155740.416 ops/s
# Warmup Iteration  16: 3145097.983 ops/s
# Warmup Iteration  17: 3155015.127 ops/s
# Warmup Iteration  18: 3160764.490 ops/s
# Warmup Iteration  19: 3155595.968 ops/s
# Warmup Iteration  20: 3162855.365 ops/s
# Warmup Iteration  21: 3160415.395 ops/s
# Warmup Iteration  22: 3164195.695 ops/s
# Warmup Iteration  23: 3159533.071 ops/s
# Warmup Iteration  24: 3148625.947 ops/s
# Warmup Iteration  25: 3159633.664 ops/s
# Warmup Iteration  26: 3157829.279 ops/s
# Warmup Iteration  27: 3157819.407 ops/s
# Warmup Iteration  28: 3154216.639 ops/s
# Warmup Iteration  29: 3162841.267 ops/s
# Warmup Iteration  30: 3154989.609 ops/s
Iteration   1: 3154846.175 ops/s
Iteration   2: 3156522.227 ops/s
Iteration   3: 3153095.607 ops/s
Iteration   4: 3168199.644 ops/s
Iteration   5: 3160342.137 ops/s
Iteration   6: 3150521.032 ops/s
Iteration   7: 3151051.404 ops/s
Iteration   8: 3153219.127 ops/s
Iteration   9: 3151101.116 ops/s
Iteration  10: 3154783.362 ops/s
Iteration  11: 3170705.233 ops/s
Iteration  12: 3154282.640 ops/s
Iteration  13: 3158024.524 ops/s
Iteration  14: 3164473.600 ops/s
Iteration  15: 3158491.068 ops/s
Iteration  16: 3159890.304 ops/s
Iteration  17: 3169615.402 ops/s
Iteration  18: 3148028.427 ops/s
Iteration  19: 3147105.995 ops/s
Iteration  20: 3157676.627 ops/s
Iteration  21: 3161239.138 ops/s
Iteration  22: 3160680.449 ops/s
Iteration  23: 3162854.433 ops/s
Iteration  24: 3156683.986 ops/s
Iteration  25: 3153792.805 ops/s
Iteration  26: 3160511.087 ops/s
Iteration  27: 3151192.754 ops/s
Iteration  28: 3158146.997 ops/s
Iteration  29: 3168078.682 ops/s
Iteration  30: 3157806.726 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toSortedList_with_comparator":
  3157765.424 ±(99.9%) 4148.543 ops/s [Average]
  (min, avg, max) = (3147105.995, 3157765.424, 3170705.233), stdev = 6209.344
  CI (99.9%): [3153616.881, 3161913.967] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_toSortedList_with_comparator  thrpt   30  3157765.424 ± 4148.543  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toSortedList_with_null$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toSortedList_with_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1117683.337 ops/s
# Warmup Iteration   2: 1702682.119 ops/s
# Warmup Iteration   3: 2095204.149 ops/s
# Warmup Iteration   4: 2073196.416 ops/s
# Warmup Iteration   5: 2091166.108 ops/s
# Warmup Iteration   6: 2085609.224 ops/s
# Warmup Iteration   7: 1709787.012 ops/s
# Warmup Iteration   8: 2084697.193 ops/s
# Warmup Iteration   9: 2082418.523 ops/s
# Warmup Iteration  10: 2084647.731 ops/s
# Warmup Iteration  11: 2083742.904 ops/s
# Warmup Iteration  12: 2085002.194 ops/s
# Warmup Iteration  13: 2083069.717 ops/s
# Warmup Iteration  14: 2081078.571 ops/s
# Warmup Iteration  15: 2084564.136 ops/s
# Warmup Iteration  16: 2087792.519 ops/s
# Warmup Iteration  17: 2089990.712 ops/s
# Warmup Iteration  18: 2091243.062 ops/s
# Warmup Iteration  19: 2090360.669 ops/s
# Warmup Iteration  20: 2090666.330 ops/s
# Warmup Iteration  21: 2089766.268 ops/s
# Warmup Iteration  22: 2086404.862 ops/s
# Warmup Iteration  23: 2085960.893 ops/s
# Warmup Iteration  24: 2082850.369 ops/s
# Warmup Iteration  25: 2085488.488 ops/s
# Warmup Iteration  26: 2091600.690 ops/s
# Warmup Iteration  27: 2090137.131 ops/s
# Warmup Iteration  28: 2085745.913 ops/s
# Warmup Iteration  29: 2090455.705 ops/s
# Warmup Iteration  30: 2089591.406 ops/s
Iteration   1: 2091845.940 ops/s
Iteration   2: 2084794.768 ops/s
Iteration   3: 2087184.775 ops/s
Iteration   4: 2084055.070 ops/s
Iteration   5: 2085026.921 ops/s
Iteration   6: 2092172.020 ops/s
Iteration   7: 2088071.151 ops/s
Iteration   8: 2090958.470 ops/s
Iteration   9: 2088503.158 ops/s
Iteration  10: 2092402.469 ops/s
Iteration  11: 2082206.273 ops/s
Iteration  12: 2089728.058 ops/s
Iteration  13: 2081107.900 ops/s
Iteration  14: 2094987.741 ops/s
Iteration  15: 2081045.041 ops/s
Iteration  16: 2090068.061 ops/s
Iteration  17: 2094196.820 ops/s
Iteration  18: 2086193.317 ops/s
Iteration  19: 2094154.278 ops/s
Iteration  20: 2085272.539 ops/s
Iteration  21: 2085719.694 ops/s
Iteration  22: 2088817.505 ops/s
Iteration  23: 2090133.976 ops/s
Iteration  24: 2090444.611 ops/s
Iteration  25: 2091081.138 ops/s
Iteration  26: 2087346.987 ops/s
Iteration  27: 2091098.440 ops/s
Iteration  28: 2091257.291 ops/s
Iteration  29: 2086198.922 ops/s
Iteration  30: 2089277.530 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toSortedList_with_null":
  2088511.695 ±(99.9%) 2518.219 ops/s [Average]
  (min, avg, max) = (2081045.041, 2088511.695, 2094987.741), stdev = 3769.152
  CI (99.9%): [2085993.476, 2091029.914] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_toSortedList_with_null  thrpt   30  2088511.695 ± 2518.219  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toSortedMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toSortedMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 167321.986 ops/s
# Warmup Iteration   2: 282679.958 ops/s
# Warmup Iteration   3: 338042.181 ops/s
# Warmup Iteration   4: 339334.644 ops/s
# Warmup Iteration   5: 339983.606 ops/s
# Warmup Iteration   6: 328240.438 ops/s
# Warmup Iteration   7: 295499.526 ops/s
# Warmup Iteration   8: 339715.739 ops/s
# Warmup Iteration   9: 340131.976 ops/s
# Warmup Iteration  10: 339723.875 ops/s
# Warmup Iteration  11: 338625.518 ops/s
# Warmup Iteration  12: 339516.610 ops/s
# Warmup Iteration  13: 340079.916 ops/s
# Warmup Iteration  14: 341043.917 ops/s
# Warmup Iteration  15: 340117.660 ops/s
# Warmup Iteration  16: 339738.609 ops/s
# Warmup Iteration  17: 340278.542 ops/s
# Warmup Iteration  18: 340547.405 ops/s
# Warmup Iteration  19: 340400.154 ops/s
# Warmup Iteration  20: 339641.167 ops/s
# Warmup Iteration  21: 340091.406 ops/s
# Warmup Iteration  22: 341097.042 ops/s
# Warmup Iteration  23: 340168.123 ops/s
# Warmup Iteration  24: 340067.822 ops/s
# Warmup Iteration  25: 341123.392 ops/s
# Warmup Iteration  26: 340528.951 ops/s
# Warmup Iteration  27: 341091.539 ops/s
# Warmup Iteration  28: 340812.831 ops/s
# Warmup Iteration  29: 340314.935 ops/s
# Warmup Iteration  30: 340785.877 ops/s
Iteration   1: 340780.707 ops/s
Iteration   2: 339938.718 ops/s
Iteration   3: 341110.446 ops/s
Iteration   4: 340467.610 ops/s
Iteration   5: 341178.849 ops/s
Iteration   6: 340154.314 ops/s
Iteration   7: 340947.599 ops/s
Iteration   8: 339331.173 ops/s
Iteration   9: 341464.029 ops/s
Iteration  10: 340687.834 ops/s
Iteration  11: 340881.365 ops/s
Iteration  12: 340190.665 ops/s
Iteration  13: 340129.579 ops/s
Iteration  14: 341347.028 ops/s
Iteration  15: 342060.063 ops/s
Iteration  16: 340716.645 ops/s
Iteration  17: 340984.495 ops/s
Iteration  18: 340466.437 ops/s
Iteration  19: 340816.049 ops/s
Iteration  20: 340198.325 ops/s
Iteration  21: 341190.030 ops/s
Iteration  22: 340195.100 ops/s
Iteration  23: 341303.019 ops/s
Iteration  24: 340137.221 ops/s
Iteration  25: 341167.508 ops/s
Iteration  26: 340260.475 ops/s
Iteration  27: 341672.948 ops/s
Iteration  28: 340176.876 ops/s
Iteration  29: 340691.392 ops/s
Iteration  30: 340101.568 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toSortedMap":
  340691.602 ±(99.9%) 398.268 ops/s [Average]
  (min, avg, max) = (339331.173, 340691.602, 342060.063), stdev = 596.109
  CI (99.9%): [340293.334, 341089.870] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score     Error  Units
ImmutableHashBagTest._Benchmark.benchmark_toSortedMap  thrpt   30  340691.602 ± 398.268  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toSortedMapBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toSortedMapBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 144965.029 ops/s
# Warmup Iteration   2: 223235.929 ops/s
# Warmup Iteration   3: 283572.230 ops/s
# Warmup Iteration   4: 282115.574 ops/s
# Warmup Iteration   5: 284052.303 ops/s
# Warmup Iteration   6: 283795.645 ops/s
# Warmup Iteration   7: 278748.039 ops/s
# Warmup Iteration   8: 240510.507 ops/s
# Warmup Iteration   9: 283217.273 ops/s
# Warmup Iteration  10: 283579.006 ops/s
# Warmup Iteration  11: 283988.407 ops/s
# Warmup Iteration  12: 283696.390 ops/s
# Warmup Iteration  13: 283939.923 ops/s
# Warmup Iteration  14: 283071.021 ops/s
# Warmup Iteration  15: 283424.654 ops/s
# Warmup Iteration  16: 283742.183 ops/s
# Warmup Iteration  17: 283836.186 ops/s
# Warmup Iteration  18: 284044.579 ops/s
# Warmup Iteration  19: 284262.380 ops/s
# Warmup Iteration  20: 283816.653 ops/s
# Warmup Iteration  21: 284076.065 ops/s
# Warmup Iteration  22: 283383.732 ops/s
# Warmup Iteration  23: 283425.319 ops/s
# Warmup Iteration  24: 284452.193 ops/s
# Warmup Iteration  25: 283488.910 ops/s
# Warmup Iteration  26: 283913.872 ops/s
# Warmup Iteration  27: 284207.367 ops/s
# Warmup Iteration  28: 283810.327 ops/s
# Warmup Iteration  29: 284165.745 ops/s
# Warmup Iteration  30: 283449.227 ops/s
Iteration   1: 283318.745 ops/s
Iteration   2: 284196.558 ops/s
Iteration   3: 283776.306 ops/s
Iteration   4: 284177.581 ops/s
Iteration   5: 284103.882 ops/s
Iteration   6: 283711.732 ops/s
Iteration   7: 283768.749 ops/s
Iteration   8: 284021.847 ops/s
Iteration   9: 284284.558 ops/s
Iteration  10: 283950.510 ops/s
Iteration  11: 283764.313 ops/s
Iteration  12: 284555.938 ops/s
Iteration  13: 283773.034 ops/s
Iteration  14: 284325.652 ops/s
Iteration  15: 284014.671 ops/s
Iteration  16: 282967.010 ops/s
Iteration  17: 283503.250 ops/s
Iteration  18: 282817.301 ops/s
Iteration  19: 284237.312 ops/s
Iteration  20: 283293.478 ops/s
Iteration  21: 284023.915 ops/s
Iteration  22: 284196.898 ops/s
Iteration  23: 283597.447 ops/s
Iteration  24: 284228.051 ops/s
Iteration  25: 283851.235 ops/s
Iteration  26: 284310.763 ops/s
Iteration  27: 284215.983 ops/s
Iteration  28: 283320.096 ops/s
Iteration  29: 283900.315 ops/s
Iteration  30: 282276.948 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toSortedMapBy":
  283816.136 ±(99.9%) 338.673 ops/s [Average]
  (min, avg, max) = (282276.948, 283816.136, 284555.938), stdev = 506.909
  CI (99.9%): [283477.463, 284154.809] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score     Error  Units
ImmutableHashBagTest._Benchmark.benchmark_toSortedMapBy  thrpt   30  283816.136 ± 338.673  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toSortedMap_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toSortedMap_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 162581.677 ops/s
# Warmup Iteration   2: 273549.003 ops/s
# Warmup Iteration   3: 329734.282 ops/s
# Warmup Iteration   4: 332352.144 ops/s
# Warmup Iteration   5: 332132.808 ops/s
# Warmup Iteration   6: 325970.894 ops/s
# Warmup Iteration   7: 282144.824 ops/s
# Warmup Iteration   8: 331364.706 ops/s
# Warmup Iteration   9: 332423.087 ops/s
# Warmup Iteration  10: 332309.319 ops/s
# Warmup Iteration  11: 331817.999 ops/s
# Warmup Iteration  12: 331870.154 ops/s
# Warmup Iteration  13: 332184.386 ops/s
# Warmup Iteration  14: 332324.688 ops/s
# Warmup Iteration  15: 332115.776 ops/s
# Warmup Iteration  16: 331392.341 ops/s
# Warmup Iteration  17: 332397.261 ops/s
# Warmup Iteration  18: 331890.246 ops/s
# Warmup Iteration  19: 332136.764 ops/s
# Warmup Iteration  20: 331950.333 ops/s
# Warmup Iteration  21: 332048.011 ops/s
# Warmup Iteration  22: 331919.514 ops/s
# Warmup Iteration  23: 331526.578 ops/s
# Warmup Iteration  24: 331346.614 ops/s
# Warmup Iteration  25: 331165.372 ops/s
# Warmup Iteration  26: 331995.504 ops/s
# Warmup Iteration  27: 332180.186 ops/s
# Warmup Iteration  28: 331960.674 ops/s
# Warmup Iteration  29: 331236.104 ops/s
# Warmup Iteration  30: 332164.687 ops/s
Iteration   1: 332205.059 ops/s
Iteration   2: 331129.239 ops/s
Iteration   3: 331130.462 ops/s
Iteration   4: 332661.344 ops/s
Iteration   5: 332568.163 ops/s
Iteration   6: 331402.672 ops/s
Iteration   7: 331447.904 ops/s
Iteration   8: 331269.838 ops/s
Iteration   9: 332162.891 ops/s
Iteration  10: 331060.511 ops/s
Iteration  11: 332306.550 ops/s
Iteration  12: 331447.810 ops/s
Iteration  13: 331591.884 ops/s
Iteration  14: 331330.149 ops/s
Iteration  15: 331592.838 ops/s
Iteration  16: 331960.813 ops/s
Iteration  17: 331816.526 ops/s
Iteration  18: 332927.688 ops/s
Iteration  19: 332408.421 ops/s
Iteration  20: 331997.400 ops/s
Iteration  21: 332230.967 ops/s
Iteration  22: 330739.472 ops/s
Iteration  23: 332357.601 ops/s
Iteration  24: 331162.854 ops/s
Iteration  25: 332698.312 ops/s
Iteration  26: 331915.946 ops/s
Iteration  27: 331049.381 ops/s
Iteration  28: 331429.234 ops/s
Iteration  29: 332486.132 ops/s
Iteration  30: 331624.954 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toSortedMap_with_comparator":
  331803.767 ±(99.9%) 393.894 ops/s [Average]
  (min, avg, max) = (330739.472, 331803.767, 332927.688), stdev = 589.562
  CI (99.9%): [331409.873, 332197.661] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score     Error  Units
ImmutableHashBagTest._Benchmark.benchmark_toSortedMap_with_comparator  thrpt   30  331803.767 ± 393.894  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toSortedSetBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toSortedSetBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 543838.309 ops/s
# Warmup Iteration   2: 1069502.785 ops/s
# Warmup Iteration   3: 1170407.147 ops/s
# Warmup Iteration   4: 1174696.272 ops/s
# Warmup Iteration   5: 977259.913 ops/s
# Warmup Iteration   6: 1176231.606 ops/s
# Warmup Iteration   7: 1175244.924 ops/s
# Warmup Iteration   8: 1176210.255 ops/s
# Warmup Iteration   9: 1176555.072 ops/s
# Warmup Iteration  10: 1175851.764 ops/s
# Warmup Iteration  11: 1173637.971 ops/s
# Warmup Iteration  12: 1172192.008 ops/s
# Warmup Iteration  13: 1177459.227 ops/s
# Warmup Iteration  14: 1175780.971 ops/s
# Warmup Iteration  15: 1174620.612 ops/s
# Warmup Iteration  16: 1175182.009 ops/s
# Warmup Iteration  17: 1174196.089 ops/s
# Warmup Iteration  18: 1170444.936 ops/s
# Warmup Iteration  19: 1175608.368 ops/s
# Warmup Iteration  20: 1172886.963 ops/s
# Warmup Iteration  21: 1174094.477 ops/s
# Warmup Iteration  22: 1175493.646 ops/s
# Warmup Iteration  23: 1177629.164 ops/s
# Warmup Iteration  24: 1173362.069 ops/s
# Warmup Iteration  25: 1175808.388 ops/s
# Warmup Iteration  26: 1174900.642 ops/s
# Warmup Iteration  27: 1173124.300 ops/s
# Warmup Iteration  28: 1171825.004 ops/s
# Warmup Iteration  29: 1175118.383 ops/s
# Warmup Iteration  30: 1172097.752 ops/s
Iteration   1: 1175844.393 ops/s
Iteration   2: 1168682.306 ops/s
Iteration   3: 1172042.832 ops/s
Iteration   4: 1177242.959 ops/s
Iteration   5: 1172521.240 ops/s
Iteration   6: 1175281.077 ops/s
Iteration   7: 1174846.755 ops/s
Iteration   8: 1174118.184 ops/s
Iteration   9: 1169398.076 ops/s
Iteration  10: 1177734.530 ops/s
Iteration  11: 1174317.532 ops/s
Iteration  12: 1174166.465 ops/s
Iteration  13: 1171999.538 ops/s
Iteration  14: 1173149.648 ops/s
Iteration  15: 1174465.627 ops/s
Iteration  16: 1177379.947 ops/s
Iteration  17: 1173253.728 ops/s
Iteration  18: 1169997.034 ops/s
Iteration  19: 1173556.752 ops/s
Iteration  20: 1176297.810 ops/s
Iteration  21: 1173567.124 ops/s
Iteration  22: 1172452.297 ops/s
Iteration  23: 1172270.894 ops/s
Iteration  24: 1176116.899 ops/s
Iteration  25: 1174522.020 ops/s
Iteration  26: 1175188.377 ops/s
Iteration  27: 1165312.678 ops/s
Iteration  28: 1174365.162 ops/s
Iteration  29: 1173449.259 ops/s
Iteration  30: 1175101.729 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toSortedSetBy":
  1173621.429 ±(99.9%) 1792.824 ops/s [Average]
  (min, avg, max) = (1165312.678, 1173621.429, 1177734.530), stdev = 2683.415
  CI (99.9%): [1171828.605, 1175414.253] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_toSortedSetBy  thrpt   30  1173621.429 ± 1792.824  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHaBagTest._Benchmark.benchmark_toSortedSet_natural_ordering$ ===
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toSortedSet_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toSortedSet_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 708529.203 ops/s
# Warmup Iteration   2: 1617381.613 ops/s
# Warmup Iteration   3: 1685729.089 ops/s
# Warmup Iteration   4: 1577669.826 ops/s
# Warmup Iteration   5: 1535987.074 ops/s
# Warmup Iteration   6: 1701676.191 ops/s
# Warmup Iteration   7: 1699921.177 ops/s
# Warmup Iteration   8: 1698616.134 ops/s
# Warmup Iteration   9: 1702539.274 ops/s
# Warmup Iteration  10: 1695841.243 ops/s
# Warmup Iteration  11: 1699858.731 ops/s
# Warmup Iteration  12: 1697908.741 ops/s
# Warmup Iteration  13: 1697453.069 ops/s
# Warmup Iteration  14: 1701389.309 ops/s
# Warmup Iteration  15: 1699883.285 ops/s
# Warmup Iteration  16: 1694928.843 ops/s
# Warmup Iteration  17: 1701265.512 ops/s
# Warmup Iteration  18: 1698737.726 ops/s
# Warmup Iteration  19: 1699376.819 ops/s
# Warmup Iteration  20: 1702035.746 ops/s
# Warmup Iteration  21: 1694759.512 ops/s
# Warmup Iteration  22: 1700892.133 ops/s
# Warmup Iteration  23: 1695393.858 ops/s
# Warmup Iteration  24: 1700852.768 ops/s
# Warmup Iteration  25: 1700904.734 ops/s
# Warmup Iteration  26: 1695384.754 ops/s
# Warmup Iteration  27: 1699559.372 ops/s
# Warmup Iteration  28: 1702143.951 ops/s
# Warmup Iteration  29: 1698188.627 ops/s
# Warmup Iteration  30: 1694157.553 ops/s
Iteration   1: 1698552.110 ops/s
Iteration   2: 1692120.619 ops/s
Iteration   3: 1699673.148 ops/s
Iteration   4: 1696177.170 ops/s
Iteration   5: 1695587.221 ops/s
Iteration   6: 1695597.261 ops/s
Iteration   7: 1689439.601 ops/s
Iteration   8: 1699412.670 ops/s
Iteration   9: 1693880.494 ops/s
Iteration  10: 1700825.809 ops/s
Iteration  11: 1694686.363 ops/s
Iteration  12: 1700791.353 ops/s
Iteration  13: 1698698.688 ops/s
Iteration  14: 1701708.983 ops/s
Iteration  15: 1696299.541 ops/s
Iteration  16: 1700890.308 ops/s
Iteration  17: 1699884.594 ops/s
Iteration  18: 1698163.266 ops/s
Iteration  19: 1699928.730 ops/s
Iteration  20: 1691828.053 ops/s
Iteration  21: 1694384.599 ops/s
Iteration  22: 1695255.047 ops/s
Iteration  23: 1700948.679 ops/s
Iteration  24: 1701885.373 ops/s
Iteration  25: 1694549.787 ops/s
Iteration  26: 1700682.283 ops/s
Iteration  27: 1698412.280 ops/s
Iteration  28: 1697232.307 ops/s
Iteration  29: 1699728.749 ops/s
Iteration  30: 1695323.411 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toSortedSet_with_comparator":
  1697418.283 ±(99.9%) 2172.843 ops/s [Average]
  (min, avg, max) = (1689439.601, 1697418.283, 1701885.373), stdev = 3252.209
  CI (99.9%): [1695245.440, 1699591.126] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_toSortedSet_with_comparator  thrpt   30  1697418.283 ± 2172.843  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toStringOfItemToCount$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toStringOfItemToCount

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 713388.410 ops/s
# Warmup Iteration   2: 1580483.281 ops/s
# Warmup Iteration   3: 1636003.906 ops/s
# Warmup Iteration   4: 1583030.931 ops/s
# Warmup Iteration   5: 1409526.895 ops/s
# Warmup Iteration   6: 1628556.046 ops/s
# Warmup Iteration   7: 1629202.547 ops/s
# Warmup Iteration   8: 1628893.611 ops/s
# Warmup Iteration   9: 1626861.369 ops/s
# Warmup Iteration  10: 1626528.054 ops/s
# Warmup Iteration  11: 1629632.673 ops/s
# Warmup Iteration  12: 1630695.216 ops/s
# Warmup Iteration  13: 1625393.049 ops/s
# Warmup Iteration  14: 1627892.420 ops/s
# Warmup Iteration  15: 1627091.976 ops/s
# Warmup Iteration  16: 1621429.685 ops/s
# Warmup Iteration  17: 1626772.647 ops/s
# Warmup Iteration  18: 1628432.493 ops/s
# Warmup Iteration  19: 1631159.826 ops/s
# Warmup Iteration  20: 1628801.850 ops/s
# Warmup Iteration  21: 1627343.771 ops/s
# Warmup Iteration  22: 1625764.718 ops/s
# Warmup Iteration  23: 1629933.491 ops/s
# Warmup Iteration  24: 1622529.323 ops/s
# Warmup Iteration  25: 1629344.523 ops/s
# Warmup Iteration  26: 1623124.036 ops/s
# Warmup Iteration  27: 1628056.301 ops/s
# Warmup Iteration  28: 1628970.211 ops/s
# Warmup Iteration  29: 1628126.518 ops/s
# Warmup Iteration  30: 1626861.270 ops/s
Iteration   1: 1628219.572 ops/s
Iteration   2: 1630261.285 ops/s
Iteration   3: 1634012.079 ops/s
Iteration   4: 1618637.987 ops/s
Iteration   5: 1631404.574 ops/s
Iteration   6: 1628464.546 ops/s
Iteration   7: 1615895.701 ops/s
Iteration   8: 1633870.407 ops/s
Iteration   9: 1623091.879 ops/s
Iteration  10: 1618812.440 ops/s
Iteration  11: 1630608.222 ops/s
Iteration  12: 1630473.677 ops/s
Iteration  13: 1634558.590 ops/s
Iteration  14: 1627387.311 ops/s
Iteration  15: 1631224.474 ops/s
Iteration  16: 1628245.651 ops/s
Iteration  17: 1627805.629 ops/s
Iteration  18: 1622605.002 ops/s
Iteration  19: 1627072.571 ops/s
Iteration  20: 1623572.997 ops/s
Iteration  21: 1633937.969 ops/s
Iteration  22: 1625397.815 ops/s
Iteration  23: 1630838.176 ops/s
Iteration  24: 1626595.975 ops/s
Iteration  25: 1626140.407 ops/s
Iteration  26: 1620909.445 ops/s
Iteration  27: 1630153.948 ops/s
Iteration  28: 1631351.629 ops/s
Iteration  29: 1630366.859 ops/s
Iteration  30: 1623801.365 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_toStringOfItemToCount":
  1627523.939 ±(99.9%) 3246.406 ops/s [Average]
  (min, avg, max) = (1615895.701, 1627523.939, 1634558.590), stdev = 4859.068
  CI (99.9%): [1624277.533, 1630770.345] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ImmutableHashBagTest._Benchmark.benchmark_toStringOfItemToCount  thrpt   30  1627523.939 ± 3246.406  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_topOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_topOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 75500.749 ops/s
# Warmup Iteration   2: 131591.902 ops/s
# Warmup Iteration   3: 159443.296 ops/s
# Warmup Iteration   4: 160689.866 ops/s
# Warmup Iteration   5: 160086.833 ops/s
# Warmup Iteration   6: 136982.371 ops/s
# Warmup Iteration   7: 157009.465 ops/s
# Warmup Iteration   8: 161128.179 ops/s
# Warmup Iteration   9: 160738.808 ops/s
# Warmup Iteration  10: 160698.901 ops/s
# Warmup Iteration  11: 160842.716 ops/s
# Warmup Iteration  12: 160427.412 ops/s
# Warmup Iteration  13: 160623.739 ops/s
# Warmup Iteration  14: 160021.127 ops/s
# Warmup Iteration  15: 160733.578 ops/s
# Warmup Iteration  16: 161178.425 ops/s
# Warmup Iteration  17: 162690.574 ops/s
# Warmup Iteration  18: 162486.033 ops/s
# Warmup Iteration  19: 162376.652 ops/s
# Warmup Iteration  20: 162494.253 ops/s
# Warmup Iteration  21: 162286.913 ops/s
# Warmup Iteration  22: 162672.459 ops/s
# Warmup Iteration  23: 162647.220 ops/s
# Warmup Iteration  24: 162368.400 ops/s
# Warmup Iteration  25: 162838.867 ops/s
# Warmup Iteration  26: 162622.308 ops/s
# Warmup Iteration  27: 161875.645 ops/s
# Warmup Iteration  28: 162083.247 ops/s
# Warmup Iteration  29: 162377.218 ops/s
# Warmup Iteration  30: 162372.810 ops/s
Iteration   1: 162696.721 ops/s
Iteration   2: 162091.144 ops/s
Iteration   3: 162584.941 ops/s
Iteration   4: 162088.080 ops/s
Iteration   5: 162655.041 ops/s
Iteration   6: 162521.354 ops/s
Iteration   7: 162321.315 ops/s
Iteration   8: 162796.607 ops/s
Iteration   9: 162341.266 ops/s
Iteration  10: 163008.122 ops/s
Iteration  11: 162435.836 ops/s
Iteration  12: 162022.598 ops/s
Iteration  13: 162416.811 ops/s
Iteration  14: 163114.435 ops/s
Iteration  15: 162166.286 ops/s
Iteration  16: 162402.488 ops/s
Iteration  17: 162242.747 ops/s
Iteration  18: 162573.152 ops/s
Iteration  19: 162359.590 ops/s
Iteration  20: 162311.393 ops/s
Iteration  21: 162048.578 ops/s
Iteration  22: 162651.629 ops/s
Iteration  23: 162232.447 ops/s
Iteration  24: 161855.882 ops/s
Iteration  25: 162324.838 ops/s
Iteration  26: 162785.698 ops/s
Iteration  27: 162331.671 ops/s
Iteration  28: 162303.392 ops/s
Iteration  29: 162221.220 ops/s
Iteration  30: 161827.362 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_topOccurrences":
  162391.088 ±(99.9%) 205.423 ops/s [Average]
  (min, avg, max) = (161827.362, 162391.088, 163114.435), stdev = 307.468
  CI (99.9%): [162185.665, 162596.511] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score     Error  Units
ImmutableHashBagTest._Benchmark.benchmark_topOccurrences  thrpt   30  162391.088 ± 205.423  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_zip$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_zip

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 45457.845 ops/s
# Warmup Iteration   2: 64551.135 ops/s
# Warmup Iteration   3: 83691.980 ops/s
# Warmup Iteration   4: 83148.223 ops/s
# Warmup Iteration   5: 83853.371 ops/s
# Warmup Iteration   6: 83874.840 ops/s
# Warmup Iteration   7: 83954.922 ops/s
# Warmup Iteration   8: 69486.591 ops/s
# Warmup Iteration   9: 83959.416 ops/s
# Warmup Iteration  10: 84004.278 ops/s
# Warmup Iteration  11: 83550.786 ops/s
# Warmup Iteration  12: 83937.513 ops/s
# Warmup Iteration  13: 83997.893 ops/s
# Warmup Iteration  14: 83990.871 ops/s
# Warmup Iteration  15: 83902.117 ops/s
# Warmup Iteration  16: 83848.977 ops/s
# Warmup Iteration  17: 83549.713 ops/s
# Warmup Iteration  18: 83539.965 ops/s
# Warmup Iteration  19: 83680.232 ops/s
# Warmup Iteration  20: 83266.288 ops/s
# Warmup Iteration  21: 83506.983 ops/s
# Warmup Iteration  22: 83725.987 ops/s
# Warmup Iteration  23: 83621.522 ops/s
# Warmup Iteration  24: 83554.298 ops/s
# Warmup Iteration  25: 83479.201 ops/s
# Warmup Iteration  26: 83365.771 ops/s
# Warmup Iteration  27: 83675.009 ops/s
# Warmup Iteration  28: 83624.812 ops/s
# Warmup Iteration  29: 83744.923 ops/s
# Warmup Iteration  30: 83358.082 ops/s
Iteration   1: 83539.543 ops/s
Iteration   2: 83766.048 ops/s
Iteration   3: 83490.662 ops/s
Iteration   4: 83656.764 ops/s
Iteration   5: 83573.205 ops/s
Iteration   6: 83793.867 ops/s
Iteration   7: 83724.397 ops/s
Iteration   8: 83265.861 ops/s
Iteration   9: 83657.227 ops/s
Iteration  10: 83799.586 ops/s
Iteration  11: 83620.386 ops/s
Iteration  12: 83765.878 ops/s
Iteration  13: 83459.161 ops/s
Iteration  14: 83686.398 ops/s
Iteration  15: 83656.188 ops/s
Iteration  16: 83462.064 ops/s
Iteration  17: 83603.238 ops/s
Iteration  18: 83493.813 ops/s
Iteration  19: 83831.474 ops/s
Iteration  20: 83692.730 ops/s
Iteration  21: 83531.027 ops/s
Iteration  22: 83761.191 ops/s
Iteration  23: 83680.575 ops/s
Iteration  24: 83526.263 ops/s
Iteration  25: 83492.173 ops/s
Iteration  26: 83671.340 ops/s
Iteration  27: 83533.091 ops/s
Iteration  28: 83669.430 ops/s
Iteration  29: 83579.155 ops/s
Iteration  30: 83567.223 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_zip":
  83618.332 ±(99.9%) 84.686 ops/s [Average]
  (min, avg, max) = (83265.861, 83618.332, 83831.474), stdev = 126.754
  CI (99.9%): [83533.646, 83703.018] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt      Score    Error  Units
ImmutableHashBagTest._Benchmark.benchmark_zip  thrpt   30  83618.332 ± 84.686  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_zipWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_zipWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 90806.483 ops/s
# Warmup Iteration   2: 131040.262 ops/s
# Warmup Iteration   3: 170300.902 ops/s
# Warmup Iteration   4: 168400.056 ops/s
# Warmup Iteration   5: 169842.036 ops/s
# Warmup Iteration   6: 170039.490 ops/s
# Warmup Iteration   7: 169915.068 ops/s
# Warmup Iteration   8: 142131.182 ops/s
# Warmup Iteration   9: 169038.985 ops/s
# Warmup Iteration  10: 170691.960 ops/s
# Warmup Iteration  11: 170173.287 ops/s
# Warmup Iteration  12: 170329.861 ops/s
# Warmup Iteration  13: 170927.449 ops/s
# Warmup Iteration  14: 170329.570 ops/s
# Warmup Iteration  15: 170893.004 ops/s
# Warmup Iteration  16: 169750.463 ops/s
# Warmup Iteration  17: 169960.501 ops/s
# Warmup Iteration  18: 170464.176 ops/s
# Warmup Iteration  19: 170280.597 ops/s
# Warmup Iteration  20: 170560.970 ops/s
# Warmup Iteration  21: 170567.822 ops/s
# Warmup Iteration  22: 170138.732 ops/s
# Warmup Iteration  23: 169954.003 ops/s
# Warmup Iteration  24: 169735.109 ops/s
# Warmup Iteration  25: 170655.728 ops/s
# Warmup Iteration  26: 170853.180 ops/s
# Warmup Iteration  27: 170446.601 ops/s
# Warmup Iteration  28: 169280.773 ops/s
# Warmup Iteration  29: 170545.270 ops/s
# Warmup Iteration  30: 170335.238 ops/s
Iteration   1: 169385.214 ops/s
Iteration   2: 170044.425 ops/s
Iteration   3: 169629.580 ops/s
Iteration   4: 169159.232 ops/s
Iteration   5: 170547.474 ops/s
Iteration   6: 170113.827 ops/s
Iteration   7: 170412.178 ops/s
Iteration   8: 170026.938 ops/s
Iteration   9: 169917.987 ops/s
Iteration  10: 171288.817 ops/s
Iteration  11: 169040.068 ops/s
Iteration  12: 168676.533 ops/s
Iteration  13: 169838.824 ops/s
Iteration  14: 169037.570 ops/s
Iteration  15: 170814.036 ops/s
Iteration  16: 170371.255 ops/s
Iteration  17: 170441.310 ops/s
Iteration  18: 170214.179 ops/s
Iteration  19: 169347.382 ops/s
Iteration  20: 168941.938 ops/s
Iteration  21: 171012.171 ops/s
Iteration  22: 169357.827 ops/s
Iteration  23: 170454.777 ops/s
Iteration  24: 170191.247 ops/s
Iteration  25: 170514.838 ops/s
Iteration  26: 170966.325 ops/s
Iteration  27: 170021.118 ops/s
Iteration  28: 171133.642 ops/s
Iteration  29: 169449.816 ops/s
Iteration  30: 169293.014 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableHashBagTest._Benchmark.benchmark_zipWithIndex":
  169988.118 ±(99.9%) 473.240 ops/s [Average]
  (min, avg, max) = (168676.533, 169988.118, 171288.817), stdev = 708.323
  CI (99.9%): [169514.878, 170461.358] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score     Error  Units
ImmutableHashBagTest._Benchmark.benchmark_zipWithIndex  thrpt   30  169988.118 ± 473.240  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 652230.013 ops/s
# Warmup Iteration   2: 761132.399 ops/s
# Warmup Iteration   3: 951401.989 ops/s
# Warmup Iteration   4: 952217.510 ops/s
# Warmup Iteration   5: 951689.293 ops/s
# Warmup Iteration   6: 954499.346 ops/s
# Warmup Iteration   7: 951446.232 ops/s
# Warmup Iteration   8: 953746.197 ops/s
# Warmup Iteration   9: 813001.179 ops/s
# Warmup Iteration  10: 944067.794 ops/s
# Warmup Iteration  11: 951939.686 ops/s
# Warmup Iteration  12: 952289.888 ops/s
# Warmup Iteration  13: 949582.066 ops/s
# Warmup Iteration  14: 950080.328 ops/s
# Warmup Iteration  15: 950731.327 ops/s
# Warmup Iteration  16: 951096.602 ops/s
# Warmup Iteration  17: 1009407.557 ops/s
# Warmup Iteration  18: 1012554.514 ops/s
# Warmup Iteration  19: 1010691.720 ops/s
# Warmup Iteration  20: 1013301.287 ops/s
# Warmup Iteration  21: 1012268.762 ops/s
# Warmup Iteration  22: 1009311.375 ops/s
# Warmup Iteration  23: 1010988.457 ops/s
# Warmup Iteration  24: 1010719.011 ops/s
# Warmup Iteration  25: 1012136.222 ops/s
# Warmup Iteration  26: 1012342.211 ops/s
# Warmup Iteration  27: 1011475.364 ops/s
# Warmup Iteration  28: 1005875.049 ops/s
# Warmup Iteration  29: 1012046.275 ops/s
# Warmup Iteration  30: 1010996.202 ops/s
Iteration   1: 1015461.017 ops/s
Iteration   2: 1011171.778 ops/s
Iteration   3: 1016109.942 ops/s
Iteration   4: 1014957.800 ops/s
Iteration   5: 1011652.979 ops/s
Iteration   6: 1010612.730 ops/s
Iteration   7: 1007369.354 ops/s
Iteration   8: 1015245.178 ops/s
Iteration   9: 1011315.426 ops/s
Iteration  10: 1013813.933 ops/s
Iteration  11: 1008125.689 ops/s
Iteration  12: 1018500.187 ops/s
Iteration  13: 1007198.552 ops/s
Iteration  14: 1010875.921 ops/s
Iteration  15: 1011657.867 ops/s
Iteration  16: 1011046.119 ops/s
Iteration  17: 1009223.994 ops/s
Iteration  18: 1015255.353 ops/s
Iteration  19: 1013415.566 ops/s
Iteration  20: 1008925.807 ops/s
Iteration  21: 1014452.674 ops/s
Iteration  22: 1010467.208 ops/s
Iteration  23: 1008220.551 ops/s
Iteration  24: 1011425.492 ops/s
Iteration  25: 1010964.022 ops/s
Iteration  26: 1012731.797 ops/s
Iteration  27: 1007165.887 ops/s
Iteration  28: 1005161.147 ops/s
Iteration  29: 1004244.006 ops/s
Iteration  30: 1013201.831 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_add":
  1011332.327 ±(99.9%) 2258.539 ops/s [Average]
  (min, avg, max) = (1004244.006, 1011332.327, 1018500.187), stdev = 3380.476
  CI (99.9%): [1009073.788, 1013590.866] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_add  thrpt   30  1011332.327 ± 2258.539  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_addAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_addAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 620157.621 ops/s
# Warmup Iteration   2: 758338.033 ops/s
# Warmup Iteration   3: 942702.530 ops/s
# Warmup Iteration   4: 935564.150 ops/s
# Warmup Iteration   5: 946054.360 ops/s
# Warmup Iteration   6: 942729.982 ops/s
# Warmup Iteration   7: 943414.194 ops/s
# Warmup Iteration   8: 942510.519 ops/s
# Warmup Iteration   9: 790884.116 ops/s
# Warmup Iteration  10: 944040.997 ops/s
# Warmup Iteration  11: 941550.938 ops/s
# Warmup Iteration  12: 945521.095 ops/s
# Warmup Iteration  13: 946033.609 ops/s
# Warmup Iteration  14: 943470.699 ops/s
# Warmup Iteration  15: 940748.110 ops/s
# Warmup Iteration  16: 941026.170 ops/s
# Warmup Iteration  17: 997489.715 ops/s
# Warmup Iteration  18: 993428.372 ops/s
# Warmup Iteration  19: 996412.588 ops/s
# Warmup Iteration  20: 993975.877 ops/s
# Warmup Iteration  21: 994651.664 ops/s
# Warmup Iteration  22: 992629.373 ops/s
# Warmup Iteration  23: 995943.676 ops/s
# Warmup Iteration  24: 993893.964 ops/s
# Warmup Iteration  25: 997231.138 ops/s
# Warmup Iteration  26: 994073.303 ops/s
# Warmup Iteration  27: 992216.817 ops/s
# Warmup Iteration  28: 997139.186 ops/s
# Warmup Iteration  29: 994774.613 ops/s
# Warmup Iteration  30: 994785.932 ops/s
Iteration   1: 998973.843 ops/s
Iteration   2: 995528.222 ops/s
Iteration   3: 996081.900 ops/s
Iteration   4: 997888.455 ops/s
Iteration   5: 997251.088 ops/s
Iteration   6: 991464.034 ops/s
Iteration   7: 997634.939 ops/s
Iteration   8: 993297.665 ops/s
Iteration   9: 995876.705 ops/s
Iteration  10: 996884.878 ops/s
Iteration  11: 997875.569 ops/s
Iteration  12: 997184.047 ops/s
Iteration  13: 995865.348 ops/s
Iteration  14: 991534.521 ops/s
Iteration  15: 998939.668 ops/s
Iteration  16: 995471.168 ops/s
Iteration  17: 995935.445 ops/s
Iteration  18: 996501.129 ops/s
Iteration  19: 999214.618 ops/s
Iteration  20: 998172.469 ops/s
Iteration  21: 996522.092 ops/s
Iteration  22: 997535.432 ops/s
Iteration  23: 997513.653 ops/s
Iteration  24: 998553.961 ops/s
Iteration  25: 996689.331 ops/s
Iteration  26: 995835.968 ops/s
Iteration  27: 994452.281 ops/s
Iteration  28: 999947.728 ops/s
Iteration  29: 996918.157 ops/s
Iteration  30: 992952.087 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_addAll":
  996483.213 ±(99.9%) 1402.081 ops/s [Average]
  (min, avg, max) = (991464.034, 996483.213, 999947.728), stdev = 2098.569
  CI (99.9%): [995081.133, 997885.294] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_addAll  thrpt   30  996483.213 ± 1402.081  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_aggregateByMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_aggregateByMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 786528.218 ops/s
# Warmup Iteration   2: 1628913.883 ops/s
# Warmup Iteration   3: 1738619.520 ops/s
# Warmup Iteration   4: 1757323.006 ops/s
# Warmup Iteration   5: 1441107.429 ops/s
# Warmup Iteration   6: 1755452.467 ops/s
# Warmup Iteration   7: 1759371.783 ops/s
# Warmup Iteration   8: 1757556.665 ops/s
# Warmup Iteration   9: 1747876.727 ops/s
# Warmup Iteration  10: 1761065.744 ops/s
# Warmup Iteration  11: 1750886.373 ops/s
# Warmup Iteration  12: 1764104.739 ops/s
# Warmup Iteration  13: 1753283.570 ops/s
# Warmup Iteration  14: 1762651.488 ops/s
# Warmup Iteration  15: 1751599.950 ops/s
# Warmup Iteration  16: 1757998.515 ops/s
# Warmup Iteration  17: 1765957.058 ops/s
# Warmup Iteration  18: 1760955.243 ops/s
# Warmup Iteration  19: 1760135.395 ops/s
# Warmup Iteration  20: 1748706.498 ops/s
# Warmup Iteration  21: 1753640.722 ops/s
# Warmup Iteration  22: 1760462.268 ops/s
# Warmup Iteration  23: 1755254.042 ops/s
# Warmup Iteration  24: 1753227.945 ops/s
# Warmup Iteration  25: 1754767.506 ops/s
# Warmup Iteration  26: 1756028.077 ops/s
# Warmup Iteration  27: 1762367.440 ops/s
# Warmup Iteration  28: 1764185.585 ops/s
# Warmup Iteration  29: 1760467.439 ops/s
# Warmup Iteration  30: 1749961.378 ops/s
Iteration   1: 1756843.810 ops/s
Iteration   2: 1763721.445 ops/s
Iteration   3: 1759080.748 ops/s
Iteration   4: 1744719.529 ops/s
Iteration   5: 1759959.838 ops/s
Iteration   6: 1766345.201 ops/s
Iteration   7: 1754911.759 ops/s
Iteration   8: 1745830.927 ops/s
Iteration   9: 1758728.427 ops/s
Iteration  10: 1749605.493 ops/s
Iteration  11: 1751108.055 ops/s
Iteration  12: 1758842.837 ops/s
Iteration  13: 1753534.284 ops/s
Iteration  14: 1743310.842 ops/s
Iteration  15: 1757606.487 ops/s
Iteration  16: 1772424.168 ops/s
Iteration  17: 1766317.677 ops/s
Iteration  18: 1770290.691 ops/s
Iteration  19: 1756251.509 ops/s
Iteration  20: 1753728.024 ops/s
Iteration  21: 1759007.508 ops/s
Iteration  22: 1770464.917 ops/s
Iteration  23: 1728626.676 ops/s
Iteration  24: 1750010.833 ops/s
Iteration  25: 1757132.389 ops/s
Iteration  26: 1746189.694 ops/s
Iteration  27: 1770756.535 ops/s
Iteration  28: 1746137.888 ops/s
Iteration  29: 1760611.731 ops/s
Iteration  30: 1746702.040 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_aggregateByMutating":
  1755960.065 ±(99.9%) 6545.803 ops/s [Average]
  (min, avg, max) = (1728626.676, 1755960.065, 1772424.168), stdev = 9797.450
  CI (99.9%): [1749414.263, 1762505.868] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_aggregateByMutating  thrpt   30  1755960.065 ± 6545.803  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_aggregateByNonMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_aggregateByNonMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 649590.878 ops/s
# Warmup Iteration   2: 1209386.532 ops/s
# Warmup Iteration   3: 1335369.083 ops/s
# Warmup Iteration   4: 1343681.999 ops/s
# Warmup Iteration   5: 1219363.322 ops/s
# Warmup Iteration   6: 1231902.057 ops/s
# Warmup Iteration   7: 1344173.817 ops/s
# Warmup Iteration   8: 1344961.733 ops/s
# Warmup Iteration   9: 1346560.976 ops/s
# Warmup Iteration  10: 1344078.523 ops/s
# Warmup Iteration  11: 1347342.800 ops/s
# Warmup Iteration  12: 1341909.156 ops/s
# Warmup Iteration  13: 1344437.556 ops/s
# Warmup Iteration  14: 1341892.445 ops/s
# Warmup Iteration  15: 1344301.767 ops/s
# Warmup Iteration  16: 1342235.187 ops/s
# Warmup Iteration  17: 1343308.334 ops/s
# Warmup Iteration  18: 1343656.141 ops/s
# Warmup Iteration  19: 1337924.291 ops/s
# Warmup Iteration  20: 1345685.107 ops/s
# Warmup Iteration  21: 1345722.563 ops/s
# Warmup Iteration  22: 1341686.498 ops/s
# Warmup Iteration  23: 1345316.516 ops/s
# Warmup Iteration  24: 1340937.141 ops/s
# Warmup Iteration  25: 1343698.172 ops/s
# Warmup Iteration  26: 1344899.262 ops/s
# Warmup Iteration  27: 1340570.042 ops/s
# Warmup Iteration  28: 1341027.991 ops/s
# Warmup Iteration  29: 1342659.762 ops/s
# Warmup Iteration  30: 1340791.998 ops/s
Iteration   1: 1336851.162 ops/s
Iteration   2: 1344066.896 ops/s
Iteration   3: 1345821.533 ops/s
Iteration   4: 1342461.042 ops/s
Iteration   5: 1344270.595 ops/s
Iteration   6: 1343923.199 ops/s
Iteration   7: 1343081.037 ops/s
Iteration   8: 1343663.597 ops/s
Iteration   9: 1345297.083 ops/s
Iteration  10: 1343445.696 ops/s
Iteration  11: 1347413.162 ops/s
Iteration  12: 1345937.619 ops/s
Iteration  13: 1340483.696 ops/s
Iteration  14: 1344831.571 ops/s
Iteration  15: 1339847.592 ops/s
Iteration  16: 1346560.090 ops/s
Iteration  17: 1344984.848 ops/s
Iteration  18: 1346128.837 ops/s
Iteration  19: 1347108.644 ops/s
Iteration  20: 1342585.023 ops/s
Iteration  21: 1344703.427 ops/s
Iteration  22: 1337591.373 ops/s
Iteration  23: 1333912.390 ops/s
Iteration  24: 1350301.561 ops/s
Iteration  25: 1342495.747 ops/s
Iteration  26: 1348318.156 ops/s
Iteration  27: 1338635.426 ops/s
Iteration  28: 1341664.003 ops/s
Iteration  29: 1343130.801 ops/s
Iteration  30: 1342950.671 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_aggregateByNonMutating":
  1343415.549 ±(99.9%) 2350.823 ops/s [Average]
  (min, avg, max) = (1333912.390, 1343415.549, 1350301.561), stdev = 3518.602
  CI (99.9%): [1341064.726, 1345766.372] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_aggregateByNonMutating  thrpt   30  1343415.549 ± 2350.823  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1049277.596 ops/s
# Warmup Iteration   2: 2008818.346 ops/s
# Warmup Iteration   3: 2200089.981 ops/s
# Warmup Iteration   4: 2210083.692 ops/s
# Warmup Iteration   5: 1838495.263 ops/s
# Warmup Iteration   6: 2195184.973 ops/s
# Warmup Iteration   7: 2216376.844 ops/s
# Warmup Iteration   8: 2218713.281 ops/s
# Warmup Iteration   9: 2213509.536 ops/s
# Warmup Iteration  10: 2218223.485 ops/s
# Warmup Iteration  11: 2216168.098 ops/s
# Warmup Iteration  12: 2215833.628 ops/s
# Warmup Iteration  13: 2216138.192 ops/s
# Warmup Iteration  14: 2218131.184 ops/s
# Warmup Iteration  15: 2220346.049 ops/s
# Warmup Iteration  16: 2212840.632 ops/s
# Warmup Iteration  17: 2220265.551 ops/s
# Warmup Iteration  18: 2220854.161 ops/s
# Warmup Iteration  19: 2216219.965 ops/s
# Warmup Iteration  20: 2215484.305 ops/s
# Warmup Iteration  21: 2216926.027 ops/s
# Warmup Iteration  22: 2220123.802 ops/s
# Warmup Iteration  23: 2215871.857 ops/s
# Warmup Iteration  24: 2218925.927 ops/s
# Warmup Iteration  25: 2218820.241 ops/s
# Warmup Iteration  26: 2212383.658 ops/s
# Warmup Iteration  27: 2222614.084 ops/s
# Warmup Iteration  28: 2219493.798 ops/s
# Warmup Iteration  29: 2218737.266 ops/s
# Warmup Iteration  30: 2219627.063 ops/s
Iteration   1: 2220007.107 ops/s
Iteration   2: 2216279.879 ops/s
Iteration   3: 2216043.284 ops/s
Iteration   4: 2222406.670 ops/s
Iteration   5: 2212763.142 ops/s
Iteration   6: 2219333.036 ops/s
Iteration   7: 2220892.786 ops/s
Iteration   8: 2215849.846 ops/s
Iteration   9: 2219251.224 ops/s
Iteration  10: 2217612.775 ops/s
Iteration  11: 2216258.271 ops/s
Iteration  12: 2224497.738 ops/s
Iteration  13: 2223275.680 ops/s
Iteration  14: 2219613.975 ops/s
Iteration  15: 2220427.223 ops/s
Iteration  16: 2223647.713 ops/s
Iteration  17: 2217240.533 ops/s
Iteration  18: 2218417.426 ops/s
Iteration  19: 2221228.263 ops/s
Iteration  20: 2219507.654 ops/s
Iteration  21: 2218628.624 ops/s
Iteration  22: 2211610.430 ops/s
Iteration  23: 2212077.759 ops/s
Iteration  24: 2218575.551 ops/s
Iteration  25: 2219125.249 ops/s
Iteration  26: 2219732.569 ops/s
Iteration  27: 2222684.402 ops/s
Iteration  28: 2219274.517 ops/s
Iteration  29: 2217293.101 ops/s
Iteration  30: 2217673.718 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_allSatisfy":
  2218707.672 ±(99.9%) 2116.810 ops/s [Average]
  (min, avg, max) = (2211610.430, 2218707.672, 2224497.738), stdev = 3168.341
  CI (99.9%): [2216590.862, 2220824.481] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_allSatisfy  thrpt   30  2218707.672 ± 2116.810  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_allSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_allSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1115844.498 ops/s
# Warmup Iteration   2: 2029200.902 ops/s
# Warmup Iteration   3: 2297660.862 ops/s
# Warmup Iteration   4: 2306415.490 ops/s
# Warmup Iteration   5: 2306928.683 ops/s
# Warmup Iteration   6: 1899546.028 ops/s
# Warmup Iteration   7: 2309034.033 ops/s
# Warmup Iteration   8: 2311563.974 ops/s
# Warmup Iteration   9: 2311743.996 ops/s
# Warmup Iteration  10: 2313600.685 ops/s
# Warmup Iteration  11: 2313371.391 ops/s
# Warmup Iteration  12: 2311244.980 ops/s
# Warmup Iteration  13: 2305600.479 ops/s
# Warmup Iteration  14: 2312222.615 ops/s
# Warmup Iteration  15: 2306821.863 ops/s
# Warmup Iteration  16: 2310327.542 ops/s
# Warmup Iteration  17: 2306007.312 ops/s
# Warmup Iteration  18: 2307116.658 ops/s
# Warmup Iteration  19: 2308930.768 ops/s
# Warmup Iteration  20: 2311015.152 ops/s
# Warmup Iteration  21: 2309169.758 ops/s
# Warmup Iteration  22: 2306786.499 ops/s
# Warmup Iteration  23: 2311032.698 ops/s
# Warmup Iteration  24: 2312746.193 ops/s
# Warmup Iteration  25: 2314976.794 ops/s
# Warmup Iteration  26: 2314971.661 ops/s
# Warmup Iteration  27: 2309527.467 ops/s
# Warmup Iteration  28: 2317893.719 ops/s
# Warmup Iteration  29: 2311016.248 ops/s
# Warmup Iteration  30: 2312164.201 ops/s
Iteration   1: 2316176.550 ops/s
Iteration   2: 2309314.811 ops/s
Iteration   3: 2313009.027 ops/s
Iteration   4: 2321524.329 ops/s
Iteration   5: 2305422.738 ops/s
Iteration   6: 2322741.790 ops/s
Iteration   7: 2309334.139 ops/s
Iteration   8: 2309272.505 ops/s
Iteration   9: 2314408.419 ops/s
Iteration  10: 2310515.821 ops/s
Iteration  11: 2312557.720 ops/s
Iteration  12: 2310550.129 ops/s
Iteration  13: 2311703.754 ops/s
Iteration  14: 2315564.251 ops/s
Iteration  15: 2304160.360 ops/s
Iteration  16: 2313035.620 ops/s
Iteration  17: 2308669.617 ops/s
Iteration  18: 2311257.153 ops/s
Iteration  19: 2310359.882 ops/s
Iteration  20: 2303867.351 ops/s
Iteration  21: 2308813.300 ops/s
Iteration  22: 2283636.647 ops/s
Iteration  23: 2311235.087 ops/s
Iteration  24: 2313965.227 ops/s
Iteration  25: 2308176.289 ops/s
Iteration  26: 2311837.805 ops/s
Iteration  27: 2305194.000 ops/s
Iteration  28: 2315744.415 ops/s
Iteration  29: 2309984.763 ops/s
Iteration  30: 2305784.800 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_allSatisfyWith":
  2310260.610 ±(99.9%) 4476.319 ops/s [Average]
  (min, avg, max) = (2283636.647, 2310260.610, 2322741.790), stdev = 6699.943
  CI (99.9%): [2305784.291, 2314736.929] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_allSatisfyWith  thrpt   30  2310260.610 ± 4476.319  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_allSatisfyWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_allSatisfyWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 29585671.742 ops/s
# Warmup Iteration   2: 51243234.391 ops/s
# Warmup Iteration   3: 54607739.221 ops/s
# Warmup Iteration   4: 54177799.221 ops/s
# Warmup Iteration   5: 49436730.513 ops/s
# Warmup Iteration   6: 51157736.994 ops/s
# Warmup Iteration   7: 54494092.878 ops/s
# Warmup Iteration   8: 54838008.626 ops/s
# Warmup Iteration   9: 54235969.959 ops/s
# Warmup Iteration  10: 54798695.967 ops/s
# Warmup Iteration  11: 54664061.888 ops/s
# Warmup Iteration  12: 53510892.744 ops/s
# Warmup Iteration  13: 54651941.123 ops/s
# Warmup Iteration  14: 55038341.186 ops/s
# Warmup Iteration  15: 54809612.811 ops/s
# Warmup Iteration  16: 54422525.066 ops/s
# Warmup Iteration  17: 55062323.541 ops/s
# Warmup Iteration  18: 54620907.390 ops/s
# Warmup Iteration  19: 55060999.755 ops/s
# Warmup Iteration  20: 54353551.970 ops/s
# Warmup Iteration  21: 53716710.144 ops/s
# Warmup Iteration  22: 54730760.258 ops/s
# Warmup Iteration  23: 54442160.312 ops/s
# Warmup Iteration  24: 53911076.083 ops/s
# Warmup Iteration  25: 54928761.822 ops/s
# Warmup Iteration  26: 54155655.407 ops/s
# Warmup Iteration  27: 54387421.233 ops/s
# Warmup Iteration  28: 55011670.862 ops/s
# Warmup Iteration  29: 54157598.434 ops/s
# Warmup Iteration  30: 54981261.747 ops/s
Iteration   1: 54639658.566 ops/s
Iteration   2: 54555796.817 ops/s
Iteration   3: 54694332.744 ops/s
Iteration   4: 55155147.386 ops/s
Iteration   5: 54335930.884 ops/s
Iteration   6: 54726999.731 ops/s
Iteration   7: 54554261.197 ops/s
Iteration   8: 54566129.112 ops/s
Iteration   9: 54626324.189 ops/s
Iteration  10: 53643554.707 ops/s
Iteration  11: 54360674.443 ops/s
Iteration  12: 54443842.156 ops/s
Iteration  13: 54873412.498 ops/s
Iteration  14: 54776026.826 ops/s
Iteration  15: 54075521.941 ops/s
Iteration  16: 54007062.466 ops/s
Iteration  17: 54081318.267 ops/s
Iteration  18: 53846512.323 ops/s
Iteration  19: 55277200.016 ops/s
Iteration  20: 55956335.399 ops/s
Iteration  21: 54363383.607 ops/s
Iteration  22: 54895891.640 ops/s
Iteration  23: 54970896.915 ops/s
Iteration  24: 54378764.665 ops/s
Iteration  25: 54456800.867 ops/s
Iteration  26: 54622846.022 ops/s
Iteration  27: 54289479.657 ops/s
Iteration  28: 54927542.762 ops/s
Iteration  29: 53786467.480 ops/s
Iteration  30: 54900290.013 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_allSatisfyWithOccurrences":
  54559613.510 ±(99.9%) 317086.880 ops/s [Average]
  (min, avg, max) = (53643554.707, 54559613.510, 55956335.399), stdev = 474600.751
  CI (99.9%): [54242526.630, 54876700.390] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt         Score        Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_allSatisfyWithOccurrences  thrpt   30  54559613.510 ± 317086.880  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1062953.014 ops/s
# Warmup Iteration   2: 2052844.351 ops/s
# Warmup Iteration   3: 2277569.973 ops/s
# Warmup Iteration   4: 2283990.561 ops/s
# Warmup Iteration   5: 1885135.036 ops/s
# Warmup Iteration   6: 2289099.847 ops/s
# Warmup Iteration   7: 2289873.078 ops/s
# Warmup Iteration   8: 2288149.127 ops/s
# Warmup Iteration   9: 2290423.968 ops/s
# Warmup Iteration  10: 2286846.387 ops/s
# Warmup Iteration  11: 2288349.685 ops/s
# Warmup Iteration  12: 2290096.362 ops/s
# Warmup Iteration  13: 2293013.631 ops/s
# Warmup Iteration  14: 2287093.827 ops/s
# Warmup Iteration  15: 2285504.058 ops/s
# Warmup Iteration  16: 2290039.892 ops/s
# Warmup Iteration  17: 2285162.208 ops/s
# Warmup Iteration  18: 2289464.673 ops/s
# Warmup Iteration  19: 2290384.215 ops/s
# Warmup Iteration  20: 2281761.065 ops/s
# Warmup Iteration  21: 2289977.837 ops/s
# Warmup Iteration  22: 2292437.268 ops/s
# Warmup Iteration  23: 2287261.235 ops/s
# Warmup Iteration  24: 2291616.707 ops/s
# Warmup Iteration  25: 2290873.140 ops/s
# Warmup Iteration  26: 2287770.932 ops/s
# Warmup Iteration  27: 2290292.981 ops/s
# Warmup Iteration  28: 2292528.370 ops/s
# Warmup Iteration  29: 2283876.680 ops/s
# Warmup Iteration  30: 2288880.121 ops/s
Iteration   1: 2290010.850 ops/s
Iteration   2: 2289309.296 ops/s
Iteration   3: 2289266.925 ops/s
Iteration   4: 2288941.185 ops/s
Iteration   5: 2291044.756 ops/s
Iteration   6: 2290517.923 ops/s
Iteration   7: 2286510.312 ops/s
Iteration   8: 2289747.986 ops/s
Iteration   9: 2284368.578 ops/s
Iteration  10: 2287722.084 ops/s
Iteration  11: 2290034.003 ops/s
Iteration  12: 2288878.575 ops/s
Iteration  13: 2285637.579 ops/s
Iteration  14: 2288989.496 ops/s
Iteration  15: 2280992.532 ops/s
Iteration  16: 2290119.657 ops/s
Iteration  17: 2287516.298 ops/s
Iteration  18: 2287868.608 ops/s
Iteration  19: 2293308.032 ops/s
Iteration  20: 2287182.812 ops/s
Iteration  21: 2286697.041 ops/s
Iteration  22: 2288382.939 ops/s
Iteration  23: 2288764.768 ops/s
Iteration  24: 2291697.786 ops/s
Iteration  25: 2283533.895 ops/s
Iteration  26: 2295767.604 ops/s
Iteration  27: 2286328.137 ops/s
Iteration  28: 2288979.453 ops/s
Iteration  29: 2289186.631 ops/s
Iteration  30: 2287003.494 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_anySatisfy":
  2288476.974 ±(99.9%) 1890.825 ops/s [Average]
  (min, avg, max) = (2280992.532, 2288476.974, 2295767.604), stdev = 2830.099
  CI (99.9%): [2286586.149, 2290367.800] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_anySatisfy  thrpt   30  2288476.974 ± 1890.825  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_anySatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_anySatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1151173.439 ops/s
# Warmup Iteration   2: 2103077.315 ops/s
# Warmup Iteration   3: 2362634.804 ops/s
# Warmup Iteration   4: 2369872.184 ops/s
# Warmup Iteration   5: 2233910.995 ops/s
# Warmup Iteration   6: 2069437.117 ops/s
# Warmup Iteration   7: 2367577.331 ops/s
# Warmup Iteration   8: 2365962.763 ops/s
# Warmup Iteration   9: 2368170.722 ops/s
# Warmup Iteration  10: 2368327.512 ops/s
# Warmup Iteration  11: 2365816.487 ops/s
# Warmup Iteration  12: 2367874.666 ops/s
# Warmup Iteration  13: 2367648.587 ops/s
# Warmup Iteration  14: 2368211.899 ops/s
# Warmup Iteration  15: 2364083.863 ops/s
# Warmup Iteration  16: 2362811.045 ops/s
# Warmup Iteration  17: 2365875.426 ops/s
# Warmup Iteration  18: 2364839.386 ops/s
# Warmup Iteration  19: 2367154.898 ops/s
# Warmup Iteration  20: 2358283.160 ops/s
# Warmup Iteration  21: 2360579.453 ops/s
# Warmup Iteration  22: 2361992.720 ops/s
# Warmup Iteration  23: 2360647.010 ops/s
# Warmup Iteration  24: 2360755.627 ops/s
# Warmup Iteration  25: 2364680.438 ops/s
# Warmup Iteration  26: 2368033.074 ops/s
# Warmup Iteration  27: 2361401.580 ops/s
# Warmup Iteration  28: 2362290.903 ops/s
# Warmup Iteration  29: 2361523.761 ops/s
# Warmup Iteration  30: 2367011.759 ops/s
Iteration   1: 2371839.533 ops/s
Iteration   2: 2361764.731 ops/s
Iteration   3: 2366127.738 ops/s
Iteration   4: 2355787.696 ops/s
Iteration   5: 2362205.394 ops/s
Iteration   6: 2360618.696 ops/s
Iteration   7: 2364706.357 ops/s
Iteration   8: 2362140.338 ops/s
Iteration   9: 2360994.683 ops/s
Iteration  10: 2358774.347 ops/s
Iteration  11: 2367063.956 ops/s
Iteration  12: 2359907.253 ops/s
Iteration  13: 2358982.023 ops/s
Iteration  14: 2368188.550 ops/s
Iteration  15: 2359344.740 ops/s
Iteration  16: 2365197.566 ops/s
Iteration  17: 2357989.798 ops/s
Iteration  18: 2360762.358 ops/s
Iteration  19: 2361354.045 ops/s
Iteration  20: 2354457.968 ops/s
Iteration  21: 2356348.302 ops/s
Iteration  22: 2355315.365 ops/s
Iteration  23: 2359028.775 ops/s
Iteration  24: 2365943.153 ops/s
Iteration  25: 2366527.574 ops/s
Iteration  26: 2364210.089 ops/s
Iteration  27: 2367490.516 ops/s
Iteration  28: 2360456.846 ops/s
Iteration  29: 2368027.872 ops/s
Iteration  30: 2361076.976 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_anySatisfyWith":
  2362087.775 ±(99.9%) 2879.546 ops/s [Average]
  (min, avg, max) = (2354457.968, 2362087.775, 2371839.533), stdev = 4309.969
  CI (99.9%): [2359208.229, 2364967.320] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_anySatisfyWith  thrpt   30  2362087.775 ± 2879.546  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_anySatisfyWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_anySatisfyWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 30048200.602 ops/s
# Warmup Iteration   2: 52021268.789 ops/s
# Warmup Iteration   3: 53655444.722 ops/s
# Warmup Iteration   4: 54103349.301 ops/s
# Warmup Iteration   5: 49461907.486 ops/s
# Warmup Iteration   6: 50953827.362 ops/s
# Warmup Iteration   7: 55049700.872 ops/s
# Warmup Iteration   8: 54076557.017 ops/s
# Warmup Iteration   9: 54508497.272 ops/s
# Warmup Iteration  10: 55089254.798 ops/s
# Warmup Iteration  11: 55119664.385 ops/s
# Warmup Iteration  12: 54478898.884 ops/s
# Warmup Iteration  13: 55214043.632 ops/s
# Warmup Iteration  14: 54781183.221 ops/s
# Warmup Iteration  15: 54349013.656 ops/s
# Warmup Iteration  16: 54792437.542 ops/s
# Warmup Iteration  17: 54440408.523 ops/s
# Warmup Iteration  18: 54445707.661 ops/s
# Warmup Iteration  19: 54476887.191 ops/s
# Warmup Iteration  20: 54550773.910 ops/s
# Warmup Iteration  21: 54957053.401 ops/s
# Warmup Iteration  22: 54193786.813 ops/s
# Warmup Iteration  23: 54847477.216 ops/s
# Warmup Iteration  24: 54806325.336 ops/s
# Warmup Iteration  25: 54458951.312 ops/s
# Warmup Iteration  26: 53865648.658 ops/s
# Warmup Iteration  27: 54550517.685 ops/s
# Warmup Iteration  28: 54700855.837 ops/s
# Warmup Iteration  29: 55167498.071 ops/s
# Warmup Iteration  30: 54473625.526 ops/s
Iteration   1: 53702834.908 ops/s
Iteration   2: 54275783.470 ops/s
Iteration   3: 55066147.629 ops/s
Iteration   4: 53744036.839 ops/s
Iteration   5: 54007553.098 ops/s
Iteration   6: 54256099.610 ops/s
Iteration   7: 55424677.056 ops/s
Iteration   8: 52939397.119 ops/s
Iteration   9: 54324519.720 ops/s
Iteration  10: 53818272.203 ops/s
Iteration  11: 54177700.870 ops/s
Iteration  12: 55554971.488 ops/s
Iteration  13: 53433372.316 ops/s
Iteration  14: 55461803.455 ops/s
Iteration  15: 54356820.794 ops/s
Iteration  16: 53861273.204 ops/s
Iteration  17: 54957233.829 ops/s
Iteration  18: 55395075.964 ops/s
Iteration  19: 55371641.240 ops/s
Iteration  20: 54820042.989 ops/s
Iteration  21: 53647753.641 ops/s
Iteration  22: 55516871.429 ops/s
Iteration  23: 54560822.943 ops/s
Iteration  24: 54693447.699 ops/s
Iteration  25: 54839755.875 ops/s
Iteration  26: 54890663.147 ops/s
Iteration  27: 54308924.327 ops/s
Iteration  28: 54151672.241 ops/s
Iteration  29: 54591273.756 ops/s
Iteration  30: 54381562.312 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_anySatisfyWithOccurrences":
  54484400.172 ±(99.9%) 455654.810 ops/s [Average]
  (min, avg, max) = (52939397.119, 54484400.172, 55554971.488), stdev = 682002.720
  CI (99.9%): [54028745.363, 54940054.982] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt         Score        Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_anySatisfyWithOccurrences  thrpt   30  54484400.172 ± 455654.810  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 801490.194 ops/s
# Warmup Iteration   2: 1868435.579 ops/s
# Warmup Iteration   3: 1943864.383 ops/s
# Warmup Iteration   4: 1613472.947 ops/s
# Warmup Iteration   5: 1940514.384 ops/s
# Warmup Iteration   6: 1940431.348 ops/s
# Warmup Iteration   7: 1933343.838 ops/s
# Warmup Iteration   8: 1931347.516 ops/s
# Warmup Iteration   9: 1942536.777 ops/s
# Warmup Iteration  10: 1936142.762 ops/s
# Warmup Iteration  11: 1938582.773 ops/s
# Warmup Iteration  12: 1942458.716 ops/s
# Warmup Iteration  13: 1945273.217 ops/s
# Warmup Iteration  14: 1941526.173 ops/s
# Warmup Iteration  15: 1939733.040 ops/s
# Warmup Iteration  16: 1940467.981 ops/s
# Warmup Iteration  17: 1938372.898 ops/s
# Warmup Iteration  18: 1938227.727 ops/s
# Warmup Iteration  19: 1940902.068 ops/s
# Warmup Iteration  20: 1939664.423 ops/s
# Warmup Iteration  21: 1943359.959 ops/s
# Warmup Iteration  22: 1940311.309 ops/s
# Warmup Iteration  23: 1942405.896 ops/s
# Warmup Iteration  24: 1938403.664 ops/s
# Warmup Iteration  25: 1940991.167 ops/s
# Warmup Iteration  26: 1942490.622 ops/s
# Warmup Iteration  27: 1942450.230 ops/s
# Warmup Iteration  28: 1932522.985 ops/s
# Warmup Iteration  29: 1937904.376 ops/s
# Warmup Iteration  30: 1929674.809 ops/s
Iteration   1: 1944012.236 ops/s
Iteration   2: 1936096.665 ops/s
Iteration   3: 1932039.108 ops/s
Iteration   4: 1944750.515 ops/s
Iteration   5: 1949025.449 ops/s
Iteration   6: 1943114.244 ops/s
Iteration   7: 1931600.066 ops/s
Iteration   8: 1936339.020 ops/s
Iteration   9: 1938934.667 ops/s
Iteration  10: 1941926.694 ops/s
Iteration  11: 1936422.631 ops/s
Iteration  12: 1943520.200 ops/s
Iteration  13: 1944183.070 ops/s
Iteration  14: 1941899.636 ops/s
Iteration  15: 1943363.631 ops/s
Iteration  16: 1939888.281 ops/s
Iteration  17: 1941461.817 ops/s
Iteration  18: 1942878.687 ops/s
Iteration  19: 1941674.222 ops/s
Iteration  20: 1941112.452 ops/s
Iteration  21: 1937947.539 ops/s
Iteration  22: 1937695.351 ops/s
Iteration  23: 1946917.974 ops/s
Iteration  24: 1940311.011 ops/s
Iteration  25: 1940539.765 ops/s
Iteration  26: 1941285.694 ops/s
Iteration  27: 1928091.108 ops/s
Iteration  28: 1940111.442 ops/s
Iteration  29: 1942125.983 ops/s
Iteration  30: 1945247.866 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_appendString":
  1940483.901 ±(99.9%) 3027.865 ops/s [Average]
  (min, avg, max) = (1928091.108, 1940483.901, 1949025.449), stdev = 4531.966
  CI (99.9%): [1937456.036, 1943511.766] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_appendString  thrpt   30  1940483.901 ± 3027.865  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_appendStringThrows$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_appendStringThrows

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 93180.259 ops/s
# Warmup Iteration   2: 100966.863 ops/s
# Warmup Iteration   3: 116307.273 ops/s
# Warmup Iteration   4: 127371.358 ops/s
# Warmup Iteration   5: 127375.146 ops/s
# Warmup Iteration   6: 127626.062 ops/s
# Warmup Iteration   7: 126708.427 ops/s
# Warmup Iteration   8: 127195.182 ops/s
# Warmup Iteration   9: 127480.867 ops/s
# Warmup Iteration  10: 127622.934 ops/s
# Warmup Iteration  11: 127493.640 ops/s
# Warmup Iteration  12: 126870.656 ops/s
# Warmup Iteration  13: 127508.295 ops/s
# Warmup Iteration  14: 116978.439 ops/s
# Warmup Iteration  15: 117394.731 ops/s
# Warmup Iteration  16: 127242.494 ops/s
# Warmup Iteration  17: 132003.020 ops/s
# Warmup Iteration  18: 132135.813 ops/s
# Warmup Iteration  19: 132302.396 ops/s
# Warmup Iteration  20: 131804.954 ops/s
# Warmup Iteration  21: 132404.658 ops/s
# Warmup Iteration  22: 132378.732 ops/s
# Warmup Iteration  23: 132659.195 ops/s
# Warmup Iteration  24: 132204.849 ops/s
# Warmup Iteration  25: 132398.127 ops/s
# Warmup Iteration  26: 132208.248 ops/s
# Warmup Iteration  27: 132347.671 ops/s
# Warmup Iteration  28: 132100.675 ops/s
# Warmup Iteration  29: 132017.052 ops/s
# Warmup Iteration  30: 132223.744 ops/s
Iteration   1: 132198.062 ops/s
Iteration   2: 131627.976 ops/s
Iteration   3: 132237.348 ops/s
Iteration   4: 132159.860 ops/s
Iteration   5: 132466.302 ops/s
Iteration   6: 132065.477 ops/s
Iteration   7: 132275.891 ops/s
Iteration   8: 131997.035 ops/s
Iteration   9: 131812.616 ops/s
Iteration  10: 132286.330 ops/s
Iteration  11: 132476.638 ops/s
Iteration  12: 132491.763 ops/s
Iteration  13: 132072.612 ops/s
Iteration  14: 132460.857 ops/s
Iteration  15: 132350.200 ops/s
Iteration  16: 132177.565 ops/s
Iteration  17: 132415.916 ops/s
Iteration  18: 131897.645 ops/s
Iteration  19: 132407.640 ops/s
Iteration  20: 132137.687 ops/s
Iteration  21: 132459.946 ops/s
Iteration  22: 132037.869 ops/s
Iteration  23: 132474.611 ops/s
Iteration  24: 132403.899 ops/s
Iteration  25: 132467.270 ops/s
Iteration  26: 132123.911 ops/s
Iteration  27: 131935.416 ops/s
Iteration  28: 131953.127 ops/s
Iteration  29: 132238.131 ops/s
Iteration  30: 132355.311 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_appendStringThrows":
  132215.497 ±(99.9%) 152.713 ops/s [Average]
  (min, avg, max) = (131627.976, 132215.497, 132491.763), stdev = 228.573
  CI (99.9%): [132062.784, 132368.210] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score     Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_appendStringThrows  thrpt   30  132215.497 ± 152.713  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_appendStringWithSeparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_appendStringWithSeparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 909131.237 ops/s
# Warmup Iteration   2: 1905520.669 ops/s
# Warmup Iteration   3: 2012243.298 ops/s
# Warmup Iteration   4: 2020208.741 ops/s
# Warmup Iteration   5: 1658299.570 ops/s
# Warmup Iteration   6: 2028118.034 ops/s
# Warmup Iteration   7: 2027603.139 ops/s
# Warmup Iteration   8: 2027079.409 ops/s
# Warmup Iteration   9: 2027314.717 ops/s
# Warmup Iteration  10: 2029199.699 ops/s
# Warmup Iteration  11: 2031283.875 ops/s
# Warmup Iteration  12: 2032267.084 ops/s
# Warmup Iteration  13: 2024663.305 ops/s
# Warmup Iteration  14: 2026131.120 ops/s
# Warmup Iteration  15: 2026262.540 ops/s
# Warmup Iteration  16: 2025334.171 ops/s
# Warmup Iteration  17: 2024223.802 ops/s
# Warmup Iteration  18: 2024517.529 ops/s
# Warmup Iteration  19: 2028038.003 ops/s
# Warmup Iteration  20: 2028192.058 ops/s
# Warmup Iteration  21: 2024563.519 ops/s
# Warmup Iteration  22: 2025177.495 ops/s
# Warmup Iteration  23: 2028977.736 ops/s
# Warmup Iteration  24: 2024211.674 ops/s
# Warmup Iteration  25: 2026001.660 ops/s
# Warmup Iteration  26: 2029216.106 ops/s
# Warmup Iteration  27: 2025268.294 ops/s
# Warmup Iteration  28: 2026281.689 ops/s
# Warmup Iteration  29: 2025947.224 ops/s
# Warmup Iteration  30: 2024974.902 ops/s
Iteration   1: 2026386.189 ops/s
Iteration   2: 2028210.699 ops/s
Iteration   3: 2026196.068 ops/s
Iteration   4: 2027337.697 ops/s
Iteration   5: 2022682.708 ops/s
Iteration   6: 2035187.147 ops/s
Iteration   7: 2022976.823 ops/s
Iteration   8: 2027643.639 ops/s
Iteration   9: 2029634.140 ops/s
Iteration  10: 2013529.319 ops/s
Iteration  11: 2029731.362 ops/s
Iteration  12: 2022002.802 ops/s
Iteration  13: 2033246.709 ops/s
Iteration  14: 2026900.008 ops/s
Iteration  15: 2020239.623 ops/s
Iteration  16: 2026858.024 ops/s
Iteration  17: 2032254.293 ops/s
Iteration  18: 2033433.457 ops/s
Iteration  19: 2019290.965 ops/s
Iteration  20: 2034659.868 ops/s
Iteration  21: 2029409.974 ops/s
Iteration  22: 2027831.927 ops/s
Iteration  23: 2025614.243 ops/s
Iteration  24: 2027907.615 ops/s
Iteration  25: 2027761.677 ops/s
Iteration  26: 2032924.039 ops/s
Iteration  27: 2029086.309 ops/s
Iteration  28: 2028291.844 ops/s
Iteration  29: 2024611.111 ops/s
Iteration  30: 2030455.519 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_appendStringWithSeparator":
  2027409.860 ±(99.9%) 3189.963 ops/s [Average]
  (min, avg, max) = (2013529.319, 2027409.860, 2035187.147), stdev = 4774.587
  CI (99.9%): [2024219.897, 2030599.823] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_appendStringWithSeparator  thrpt   30  2027409.860 ± 3189.963  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1067819.962 ops/s
# Warmup Iteration   2: 2351930.813 ops/s
# Warmup Iteration   3: 2418822.059 ops/s
# Warmup Iteration   4: 2176432.817 ops/s
# Warmup Iteration   5: 2262611.290 ops/s
# Warmup Iteration   6: 2416364.750 ops/s
# Warmup Iteration   7: 2424918.134 ops/s
# Warmup Iteration   8: 2423332.258 ops/s
# Warmup Iteration   9: 2428421.537 ops/s
# Warmup Iteration  10: 2421694.908 ops/s
# Warmup Iteration  11: 2426455.601 ops/s
# Warmup Iteration  12: 2424880.876 ops/s
# Warmup Iteration  13: 2425549.757 ops/s
# Warmup Iteration  14: 2421671.226 ops/s
# Warmup Iteration  15: 2416561.700 ops/s
# Warmup Iteration  16: 2415322.900 ops/s
# Warmup Iteration  17: 2425981.750 ops/s
# Warmup Iteration  18: 2431092.548 ops/s
# Warmup Iteration  19: 2420719.646 ops/s
# Warmup Iteration  20: 2424508.808 ops/s
# Warmup Iteration  21: 2427117.636 ops/s
# Warmup Iteration  22: 2422041.669 ops/s
# Warmup Iteration  23: 2419949.883 ops/s
# Warmup Iteration  24: 2419437.786 ops/s
# Warmup Iteration  25: 2427365.044 ops/s
# Warmup Iteration  26: 2420088.420 ops/s
# Warmup Iteration  27: 2428664.556 ops/s
# Warmup Iteration  28: 2424261.424 ops/s
# Warmup Iteration  29: 2421330.558 ops/s
# Warmup Iteration  30: 2427825.480 ops/s
Iteration   1: 2420384.857 ops/s
Iteration   2: 2434249.510 ops/s
Iteration   3: 2424383.344 ops/s
Iteration   4: 2422537.504 ops/s
Iteration   5: 2415313.356 ops/s
Iteration   6: 2421719.027 ops/s
Iteration   7: 2418903.272 ops/s
Iteration   8: 2425975.476 ops/s
Iteration   9: 2419021.279 ops/s
Iteration  10: 2426693.017 ops/s
Iteration  11: 2423787.884 ops/s
Iteration  12: 2419640.421 ops/s
Iteration  13: 2416792.142 ops/s
Iteration  14: 2422868.120 ops/s
Iteration  15: 2426700.106 ops/s
Iteration  16: 2421804.168 ops/s
Iteration  17: 2416340.341 ops/s
Iteration  18: 2430248.100 ops/s
Iteration  19: 2426858.009 ops/s
Iteration  20: 2424373.569 ops/s
Iteration  21: 2422572.284 ops/s
Iteration  22: 2424309.758 ops/s
Iteration  23: 2422982.112 ops/s
Iteration  24: 2422595.747 ops/s
Iteration  25: 2430069.633 ops/s
Iteration  26: 2424244.426 ops/s
Iteration  27: 2417909.690 ops/s
Iteration  28: 2418207.132 ops/s
Iteration  29: 2428080.838 ops/s
Iteration  30: 2415246.812 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd":
  2422827.064 ±(99.9%) 3084.447 ops/s [Average]
  (min, avg, max) = (2415246.812, 2422827.064, 2434249.510), stdev = 4616.655
  CI (99.9%): [2419742.617, 2425911.511] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd  thrpt   30  2422827.064 ± 3084.447  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_appendString_with_separator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_appendString_with_separator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5666912.578 ops/s
# Warmup Iteration   2: 11821610.613 ops/s
# Warmup Iteration   3: 9928197.836 ops/s
# Warmup Iteration   4: 11864707.274 ops/s
# Warmup Iteration   5: 11880284.338 ops/s
# Warmup Iteration   6: 11902418.471 ops/s
# Warmup Iteration   7: 11905810.586 ops/s
# Warmup Iteration   8: 11831181.416 ops/s
# Warmup Iteration   9: 11844960.183 ops/s
# Warmup Iteration  10: 11813762.924 ops/s
# Warmup Iteration  11: 11879556.841 ops/s
# Warmup Iteration  12: 11927527.667 ops/s
# Warmup Iteration  13: 11863486.515 ops/s
# Warmup Iteration  14: 11896904.936 ops/s
# Warmup Iteration  15: 11887943.590 ops/s
# Warmup Iteration  16: 11858475.591 ops/s
# Warmup Iteration  17: 11846808.741 ops/s
# Warmup Iteration  18: 11863685.965 ops/s
# Warmup Iteration  19: 11857158.848 ops/s
# Warmup Iteration  20: 11869531.288 ops/s
# Warmup Iteration  21: 11919155.446 ops/s
# Warmup Iteration  22: 11820817.374 ops/s
# Warmup Iteration  23: 11867439.831 ops/s
# Warmup Iteration  24: 11909289.148 ops/s
# Warmup Iteration  25: 11883056.033 ops/s
# Warmup Iteration  26: 11838045.689 ops/s
# Warmup Iteration  27: 11832156.174 ops/s
# Warmup Iteration  28: 11835164.030 ops/s
# Warmup Iteration  29: 11897900.890 ops/s
# Warmup Iteration  30: 11890748.028 ops/s
Iteration   1: 11849912.298 ops/s
Iteration   2: 11888808.922 ops/s
Iteration   3: 11883276.337 ops/s
Iteration   4: 11890359.409 ops/s
Iteration   5: 11948234.089 ops/s
Iteration   6: 11915439.734 ops/s
Iteration   7: 11908809.677 ops/s
Iteration   8: 11873602.213 ops/s
Iteration   9: 11868523.053 ops/s
Iteration  10: 11870475.780 ops/s
Iteration  11: 11851176.332 ops/s
Iteration  12: 11953044.589 ops/s
Iteration  13: 11858478.862 ops/s
Iteration  14: 11895800.733 ops/s
Iteration  15: 11963011.124 ops/s
Iteration  16: 11820464.234 ops/s
Iteration  17: 11843423.472 ops/s
Iteration  18: 11849581.946 ops/s
Iteration  19: 11842738.491 ops/s
Iteration  20: 11795842.887 ops/s
Iteration  21: 11784025.921 ops/s
Iteration  22: 11873455.172 ops/s
Iteration  23: 11824237.932 ops/s
Iteration  24: 11832854.205 ops/s
Iteration  25: 11779038.172 ops/s
Iteration  26: 11745246.698 ops/s
Iteration  27: 11920950.976 ops/s
Iteration  28: 11815896.659 ops/s
Iteration  29: 11908900.560 ops/s
Iteration  30: 11828156.321 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_appendString_with_separator":
  11862792.227 ±(99.9%) 34985.207 ops/s [Average]
  (min, avg, max) = (11745246.698, 11862792.227, 11963011.124), stdev = 52364.215
  CI (99.9%): [11827807.019, 11897777.434] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt         Score       Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_appendString_with_separator  thrpt   30  11862792.227 ± 34985.207  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_appendString_with_start_separator_end$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_appendString_with_start_separator_end

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5644280.258 ops/s
# Warmup Iteration   2: 11615425.984 ops/s
# Warmup Iteration   3: 9656821.129 ops/s
# Warmup Iteration   4: 11292467.315 ops/s
# Warmup Iteration   5: 11317759.384 ops/s
# Warmup Iteration   6: 11327678.696 ops/s
# Warmup Iteration   7: 11307095.523 ops/s
# Warmup Iteration   8: 11291037.181 ops/s
# Warmup Iteration   9: 11294854.817 ops/s
# Warmup Iteration  10: 11277600.657 ops/s
# Warmup Iteration  11: 11319906.212 ops/s
# Warmup Iteration  12: 11297533.235 ops/s
# Warmup Iteration  13: 11278972.962 ops/s
# Warmup Iteration  14: 11307015.328 ops/s
# Warmup Iteration  15: 11272828.746 ops/s
# Warmup Iteration  16: 11276840.601 ops/s
# Warmup Iteration  17: 11357442.894 ops/s
# Warmup Iteration  18: 11286651.133 ops/s
# Warmup Iteration  19: 11291654.882 ops/s
# Warmup Iteration  20: 11273754.152 ops/s
# Warmup Iteration  21: 11339022.682 ops/s
# Warmup Iteration  22: 11340118.233 ops/s
# Warmup Iteration  23: 11329436.977 ops/s
# Warmup Iteration  24: 11282730.348 ops/s
# Warmup Iteration  25: 11308356.550 ops/s
# Warmup Iteration  26: 11295458.605 ops/s
# Warmup Iteration  27: 11299914.837 ops/s
# Warmup Iteration  28: 11307911.352 ops/s
# Warmup Iteration  29: 11321065.968 ops/s
# Warmup Iteration  30: 11282494.811 ops/s
Iteration   1: 11210335.644 ops/s
Iteration   2: 11295445.842 ops/s
Iteration   3: 11291394.345 ops/s
Iteration   4: 11273534.864 ops/s
Iteration   5: 11334410.413 ops/s
Iteration   6: 11288070.197 ops/s
Iteration   7: 11300536.725 ops/s
Iteration   8: 11290585.911 ops/s
Iteration   9: 11321389.715 ops/s
Iteration  10: 11299979.891 ops/s
Iteration  11: 11263556.982 ops/s
Iteration  12: 11349139.521 ops/s
Iteration  13: 11271715.182 ops/s
Iteration  14: 11261277.955 ops/s
Iteration  15: 11294761.566 ops/s
Iteration  16: 11277334.204 ops/s
Iteration  17: 11223442.295 ops/s
Iteration  18: 11280259.455 ops/s
Iteration  19: 11286809.318 ops/s
Iteration  20: 11349956.881 ops/s
Iteration  21: 11288810.184 ops/s
Iteration  22: 11303036.609 ops/s
Iteration  23: 11270418.832 ops/s
Iteration  24: 11372498.212 ops/s
Iteration  25: 11236561.823 ops/s
Iteration  26: 11318868.421 ops/s
Iteration  27: 11285729.055 ops/s
Iteration  28: 11294585.616 ops/s
Iteration  29: 11284379.579 ops/s
Iteration  30: 11320382.856 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_appendString_with_start_separator_end":
  11291306.936 ±(99.9%) 23370.064 ops/s [Average]
  (min, avg, max) = (11210335.644, 11291306.936, 11372498.212), stdev = 34979.215
  CI (99.9%): [11267936.872, 11314677.001] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt         Score       Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_appendString_with_start_separator_end  thrpt   30  11291306.936 ± 23370.064  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_asLazy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_asLazy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5077651.038 ops/s
# Warmup Iteration   2: 11073872.427 ops/s
# Warmup Iteration   3: 11830919.337 ops/s
# Warmup Iteration   4: 11885007.867 ops/s
# Warmup Iteration   5: 9755558.666 ops/s
# Warmup Iteration   6: 11865074.675 ops/s
# Warmup Iteration   7: 11876508.170 ops/s
# Warmup Iteration   8: 11921571.411 ops/s
# Warmup Iteration   9: 11870565.742 ops/s
# Warmup Iteration  10: 11899011.928 ops/s
# Warmup Iteration  11: 11903189.192 ops/s
# Warmup Iteration  12: 11905620.352 ops/s
# Warmup Iteration  13: 11918311.087 ops/s
# Warmup Iteration  14: 11872352.201 ops/s
# Warmup Iteration  15: 11907791.872 ops/s
# Warmup Iteration  16: 11894765.894 ops/s
# Warmup Iteration  17: 11880781.595 ops/s
# Warmup Iteration  18: 11908362.578 ops/s
# Warmup Iteration  19: 11892127.668 ops/s
# Warmup Iteration  20: 11911152.883 ops/s
# Warmup Iteration  21: 11887190.098 ops/s
# Warmup Iteration  22: 11893345.356 ops/s
# Warmup Iteration  23: 11888350.381 ops/s
# Warmup Iteration  24: 11869914.340 ops/s
# Warmup Iteration  25: 11893115.750 ops/s
# Warmup Iteration  26: 11875476.462 ops/s
# Warmup Iteration  27: 11921160.143 ops/s
# Warmup Iteration  28: 11893444.244 ops/s
# Warmup Iteration  29: 11881698.399 ops/s
# Warmup Iteration  30: 11898680.062 ops/s
Iteration   1: 11853055.637 ops/s
Iteration   2: 11938660.520 ops/s
Iteration   3: 11917876.458 ops/s
Iteration   4: 11876829.900 ops/s
Iteration   5: 11889654.790 ops/s
Iteration   6: 11938454.170 ops/s
Iteration   7: 11893693.109 ops/s
Iteration   8: 11888807.833 ops/s
Iteration   9: 11868747.644 ops/s
Iteration  10: 11920850.617 ops/s
Iteration  11: 11854668.720 ops/s
Iteration  12: 11908470.832 ops/s
Iteration  13: 11881947.570 ops/s
Iteration  14: 11884289.939 ops/s
Iteration  15: 11917997.678 ops/s
Iteration  16: 11888876.584 ops/s
Iteration  17: 11834805.625 ops/s
Iteration  18: 11895739.943 ops/s
Iteration  19: 11897667.255 ops/s
Iteration  20: 11904926.835 ops/s
Iteration  21: 11835763.822 ops/s
Iteration  22: 11876906.056 ops/s
Iteration  23: 11900721.969 ops/s
Iteration  24: 11869029.258 ops/s
Iteration  25: 11857692.065 ops/s
Iteration  26: 11880675.418 ops/s
Iteration  27: 11919272.457 ops/s
Iteration  28: 11859185.964 ops/s
Iteration  29: 11866393.227 ops/s
Iteration  30: 11894283.565 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_asLazy":
  11887198.182 ±(99.9%) 18076.002 ops/s [Average]
  (min, avg, max) = (11834805.625, 11887198.182, 11938660.520), stdev = 27055.310
  CI (99.9%): [11869122.180, 11905274.184] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score       Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_asLazy  thrpt   30  11887198.182 ± 18076.002  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_chunk$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_chunk

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 424641.128 ops/s
# Warmup Iteration   2: 758674.917 ops/s
# Warmup Iteration   3: 893580.527 ops/s
# Warmup Iteration   4: 896296.925 ops/s
# Warmup Iteration   5: 899214.073 ops/s
# Warmup Iteration   6: 735452.700 ops/s
# Warmup Iteration   7: 900306.930 ops/s
# Warmup Iteration   8: 898752.417 ops/s
# Warmup Iteration   9: 899226.629 ops/s
# Warmup Iteration  10: 898509.021 ops/s
# Warmup Iteration  11: 898618.287 ops/s
# Warmup Iteration  12: 899336.889 ops/s
# Warmup Iteration  13: 897035.993 ops/s
# Warmup Iteration  14: 900468.690 ops/s
# Warmup Iteration  15: 900028.859 ops/s
# Warmup Iteration  16: 901291.816 ops/s
# Warmup Iteration  17: 899264.302 ops/s
# Warmup Iteration  18: 897123.310 ops/s
# Warmup Iteration  19: 895917.695 ops/s
# Warmup Iteration  20: 898644.774 ops/s
# Warmup Iteration  21: 899677.125 ops/s
# Warmup Iteration  22: 898012.304 ops/s
# Warmup Iteration  23: 898377.109 ops/s
# Warmup Iteration  24: 898419.635 ops/s
# Warmup Iteration  25: 900300.104 ops/s
# Warmup Iteration  26: 899924.408 ops/s
# Warmup Iteration  27: 897007.481 ops/s
# Warmup Iteration  28: 900043.908 ops/s
# Warmup Iteration  29: 898455.916 ops/s
# Warmup Iteration  30: 899816.223 ops/s
Iteration   1: 900087.020 ops/s
Iteration   2: 902177.887 ops/s
Iteration   3: 898491.667 ops/s
Iteration   4: 898275.327 ops/s
Iteration   5: 897902.800 ops/s
Iteration   6: 899101.448 ops/s
Iteration   7: 897021.841 ops/s
Iteration   8: 899597.702 ops/s
Iteration   9: 897881.878 ops/s
Iteration  10: 897594.029 ops/s
Iteration  11: 897894.328 ops/s
Iteration  12: 901166.507 ops/s
Iteration  13: 899573.136 ops/s
Iteration  14: 898099.486 ops/s
Iteration  15: 899284.367 ops/s
Iteration  16: 898068.834 ops/s
Iteration  17: 899729.369 ops/s
Iteration  18: 901089.289 ops/s
Iteration  19: 895865.409 ops/s
Iteration  20: 898047.554 ops/s
Iteration  21: 898570.628 ops/s
Iteration  22: 902141.611 ops/s
Iteration  23: 897594.319 ops/s
Iteration  24: 899542.200 ops/s
Iteration  25: 895321.702 ops/s
Iteration  26: 900673.621 ops/s
Iteration  27: 900568.853 ops/s
Iteration  28: 895285.607 ops/s
Iteration  29: 897782.833 ops/s
Iteration  30: 898709.146 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_chunk":
  898771.347 ±(99.9%) 1172.531 ops/s [Average]
  (min, avg, max) = (895285.607, 898771.347, 902177.887), stdev = 1754.989
  CI (99.9%): [897598.816, 899943.878] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_chunk  thrpt   30  898771.347 ± 1172.531  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_chunk_empty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_chunk_empty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6068988.085 ops/s
# Warmup Iteration   2: 13957541.860 ops/s
# Warmup Iteration   3: 11318019.285 ops/s
# Warmup Iteration   4: 13419107.878 ops/s
# Warmup Iteration   5: 13414798.049 ops/s
# Warmup Iteration   6: 13447375.444 ops/s
# Warmup Iteration   7: 13442799.438 ops/s
# Warmup Iteration   8: 13370537.021 ops/s
# Warmup Iteration   9: 13470256.018 ops/s
# Warmup Iteration  10: 13420944.734 ops/s
# Warmup Iteration  11: 13422880.512 ops/s
# Warmup Iteration  12: 13439010.617 ops/s
# Warmup Iteration  13: 13438467.179 ops/s
# Warmup Iteration  14: 13447539.269 ops/s
# Warmup Iteration  15: 13437799.382 ops/s
# Warmup Iteration  16: 13465636.927 ops/s
# Warmup Iteration  17: 13462326.502 ops/s
# Warmup Iteration  18: 13401015.037 ops/s
# Warmup Iteration  19: 13458376.673 ops/s
# Warmup Iteration  20: 13457835.943 ops/s
# Warmup Iteration  21: 13389952.962 ops/s
# Warmup Iteration  22: 13442795.850 ops/s
# Warmup Iteration  23: 13449803.443 ops/s
# Warmup Iteration  24: 13456469.142 ops/s
# Warmup Iteration  25: 13464555.458 ops/s
# Warmup Iteration  26: 13412242.147 ops/s
# Warmup Iteration  27: 13466154.984 ops/s
# Warmup Iteration  28: 13408295.387 ops/s
# Warmup Iteration  29: 13444120.497 ops/s
# Warmup Iteration  30: 13403614.798 ops/s
Iteration   1: 13421936.959 ops/s
Iteration   2: 13476755.827 ops/s
Iteration   3: 13408928.717 ops/s
Iteration   4: 13440732.129 ops/s
Iteration   5: 13431577.470 ops/s
Iteration   6: 13441514.722 ops/s
Iteration   7: 13485424.409 ops/s
Iteration   8: 13452514.432 ops/s
Iteration   9: 13449148.751 ops/s
Iteration  10: 13403911.004 ops/s
Iteration  11: 13379475.329 ops/s
Iteration  12: 13483490.680 ops/s
Iteration  13: 13408346.772 ops/s
Iteration  14: 13438113.915 ops/s
Iteration  15: 13431736.618 ops/s
Iteration  16: 13447425.575 ops/s
Iteration  17: 13493430.177 ops/s
Iteration  18: 13453338.498 ops/s
Iteration  19: 13483626.097 ops/s
Iteration  20: 13450708.583 ops/s
Iteration  21: 13442059.978 ops/s
Iteration  22: 13510023.415 ops/s
Iteration  23: 13396973.021 ops/s
Iteration  24: 13483583.995 ops/s
Iteration  25: 13387347.151 ops/s
Iteration  26: 13431162.606 ops/s
Iteration  27: 13447213.911 ops/s
Iteration  28: 13457640.165 ops/s
Iteration  29: 13466253.207 ops/s
Iteration  30: 13503776.481 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_chunk_empty":
  13446939.020 ±(99.9%) 22619.744 ops/s [Average]
  (min, avg, max) = (13379475.329, 13446939.020, 13510023.415), stdev = 33856.171
  CI (99.9%): [13424319.276, 13469558.764] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_chunk_empty  thrpt   30  13446939.020 ± 22619.744  ops/s
----------------------------------------
