=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_forEachWithIndexFromTo$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_forEachWithIndexFromTo

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 286209.874 ops/s
# Warmup Iteration   2: 307856.276 ops/s
# Warmup Iteration   3: 363363.723 ops/s
# Warmup Iteration   4: 388384.380 ops/s
# Warmup Iteration   5: 388106.843 ops/s
# Warmup Iteration   6: 385385.669 ops/s
# Warmup Iteration   7: 387474.349 ops/s
# Warmup Iteration   8: 387819.722 ops/s
# Warmup Iteration   9: 388039.857 ops/s
# Warmup Iteration  10: 387874.546 ops/s
# Warmup Iteration  11: 387873.961 ops/s
# Warmup Iteration  12: 387515.089 ops/s
# Warmup Iteration  13: 388399.022 ops/s
# Warmup Iteration  14: 328226.282 ops/s
# Warmup Iteration  15: 389044.968 ops/s
# Warmup Iteration  16: 388773.732 ops/s
# Warmup Iteration  17: 407634.156 ops/s
# Warmup Iteration  18: 406431.332 ops/s
# Warmup Iteration  19: 407175.378 ops/s
# Warmup Iteration  20: 407512.196 ops/s
# Warmup Iteration  21: 407675.964 ops/s
# Warmup Iteration  22: 407725.787 ops/s
# Warmup Iteration  23: 408264.519 ops/s
# Warmup Iteration  24: 407275.591 ops/s
# Warmup Iteration  25: 408099.319 ops/s
# Warmup Iteration  26: 406512.362 ops/s
# Warmup Iteration  27: 407244.437 ops/s
# Warmup Iteration  28: 407610.771 ops/s
# Warmup Iteration  29: 407049.179 ops/s
# Warmup Iteration  30: 407746.365 ops/s
Iteration   1: 407655.962 ops/s
Iteration   2: 407039.160 ops/s
Iteration   3: 407055.743 ops/s
Iteration   4: 408018.688 ops/s
Iteration   5: 406603.610 ops/s
Iteration   6: 408518.550 ops/s
Iteration   7: 407178.751 ops/s
Iteration   8: 407309.753 ops/s
Iteration   9: 405572.870 ops/s
Iteration  10: 404744.787 ops/s
Iteration  11: 407862.906 ops/s
Iteration  12: 407777.311 ops/s
Iteration  13: 408320.110 ops/s
Iteration  14: 407508.459 ops/s
Iteration  15: 407201.258 ops/s
Iteration  16: 407455.365 ops/s
Iteration  17: 407688.916 ops/s
Iteration  18: 406493.516 ops/s
Iteration  19: 407063.734 ops/s
Iteration  20: 407765.519 ops/s
Iteration  21: 406947.068 ops/s
Iteration  22: 406445.026 ops/s
Iteration  23: 405295.500 ops/s
Iteration  24: 406288.447 ops/s
Iteration  25: 407700.066 ops/s
Iteration  26: 407450.109 ops/s
Iteration  27: 407574.719 ops/s
Iteration  28: 405971.889 ops/s
Iteration  29: 407683.447 ops/s
Iteration  30: 408866.510 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_forEachWithIndexFromTo":
  407168.592 ±(99.9%) 620.404 ops/s [Average]
  (min, avg, max) = (404744.787, 407168.592, 408866.510), stdev = 928.591
  CI (99.9%): [406548.188, 407788.995] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score     Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_forEachWithIndexFromTo  thrpt   30  407168.592 ± 620.404  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_forLoop$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_forLoop

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 31211043.603 ops/s
# Warmup Iteration   2: 60679384.875 ops/s
# Warmup Iteration   3: 52158746.296 ops/s
# Warmup Iteration   4: 61404028.652 ops/s
# Warmup Iteration   5: 61320307.709 ops/s
# Warmup Iteration   6: 61344290.689 ops/s
# Warmup Iteration   7: 61321512.454 ops/s
# Warmup Iteration   8: 61381901.712 ops/s
# Warmup Iteration   9: 61459372.352 ops/s
# Warmup Iteration  10: 61246914.958 ops/s
# Warmup Iteration  11: 61328100.001 ops/s
# Warmup Iteration  12: 61336814.939 ops/s
# Warmup Iteration  13: 61267332.083 ops/s
# Warmup Iteration  14: 61405382.666 ops/s
# Warmup Iteration  15: 61323813.008 ops/s
# Warmup Iteration  16: 61443873.400 ops/s
# Warmup Iteration  17: 61487066.077 ops/s
# Warmup Iteration  18: 61446428.419 ops/s
# Warmup Iteration  19: 61390220.717 ops/s
# Warmup Iteration  20: 61352596.022 ops/s
# Warmup Iteration  21: 61286784.485 ops/s
# Warmup Iteration  22: 61352237.816 ops/s
# Warmup Iteration  23: 61185592.602 ops/s
# Warmup Iteration  24: 61242162.880 ops/s
# Warmup Iteration  25: 61343734.087 ops/s
# Warmup Iteration  26: 61405558.453 ops/s
# Warmup Iteration  27: 61339188.593 ops/s
# Warmup Iteration  28: 61401787.272 ops/s
# Warmup Iteration  29: 61362917.607 ops/s
# Warmup Iteration  30: 61050466.750 ops/s
Iteration   1: 61308318.396 ops/s
Iteration   2: 61430520.725 ops/s
Iteration   3: 61230705.618 ops/s
Iteration   4: 61395555.915 ops/s
Iteration   5: 61240449.653 ops/s
Iteration   6: 61290158.297 ops/s
Iteration   7: 61340491.288 ops/s
Iteration   8: 61319433.359 ops/s
Iteration   9: 61306617.208 ops/s
Iteration  10: 61311855.307 ops/s
Iteration  11: 61548119.697 ops/s
Iteration  12: 61371974.075 ops/s
Iteration  13: 61439966.529 ops/s
Iteration  14: 61352379.944 ops/s
Iteration  15: 61328277.437 ops/s
Iteration  16: 61557100.481 ops/s
Iteration  17: 61286134.178 ops/s
Iteration  18: 61218239.786 ops/s
Iteration  19: 61374454.438 ops/s
Iteration  20: 61211358.678 ops/s
Iteration  21: 61327309.323 ops/s
Iteration  22: 61262348.946 ops/s
Iteration  23: 61232250.492 ops/s
Iteration  24: 61398697.534 ops/s
Iteration  25: 61270707.248 ops/s
Iteration  26: 61429715.638 ops/s
Iteration  27: 61448592.860 ops/s
Iteration  28: 61192495.609 ops/s
Iteration  29: 61334104.302 ops/s
Iteration  30: 61445187.025 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_forLoop":
  61340117.333 ±(99.9%) 62639.452 ops/s [Average]
  (min, avg, max) = (61192495.609, 61340117.333, 61557100.481), stdev = 93755.790
  CI (99.9%): [61277477.881, 61402756.785] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_forLoop  thrpt   30  61340117.333 ± 62639.452  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_get$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_get

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 370479.826 ops/s
# Warmup Iteration   2: 383348.301 ops/s
# Warmup Iteration   3: 462641.012 ops/s
# Warmup Iteration   4: 478779.612 ops/s
# Warmup Iteration   5: 478926.524 ops/s
# Warmup Iteration   6: 475191.614 ops/s
# Warmup Iteration   7: 477936.760 ops/s
# Warmup Iteration   8: 476342.763 ops/s
# Warmup Iteration   9: 478159.525 ops/s
# Warmup Iteration  10: 477931.941 ops/s
# Warmup Iteration  11: 478878.496 ops/s
# Warmup Iteration  12: 477913.729 ops/s
# Warmup Iteration  13: 429684.862 ops/s
# Warmup Iteration  14: 458203.941 ops/s
# Warmup Iteration  15: 479416.067 ops/s
# Warmup Iteration  16: 478521.515 ops/s
# Warmup Iteration  17: 507830.136 ops/s
# Warmup Iteration  18: 506617.888 ops/s
# Warmup Iteration  19: 507723.074 ops/s
# Warmup Iteration  20: 506625.376 ops/s
# Warmup Iteration  21: 506684.936 ops/s
# Warmup Iteration  22: 508379.626 ops/s
# Warmup Iteration  23: 506896.100 ops/s
# Warmup Iteration  24: 505772.109 ops/s
# Warmup Iteration  25: 507396.321 ops/s
# Warmup Iteration  26: 506224.057 ops/s
# Warmup Iteration  27: 506358.254 ops/s
# Warmup Iteration  28: 508072.399 ops/s
# Warmup Iteration  29: 508314.120 ops/s
# Warmup Iteration  30: 507895.976 ops/s
Iteration   1: 509670.914 ops/s
Iteration   2: 505145.522 ops/s
Iteration   3: 507032.715 ops/s
Iteration   4: 507330.695 ops/s
Iteration   5: 505712.800 ops/s
Iteration   6: 505155.304 ops/s
Iteration   7: 505098.881 ops/s
Iteration   8: 508399.826 ops/s
Iteration   9: 506397.820 ops/s
Iteration  10: 506524.952 ops/s
Iteration  11: 505641.583 ops/s
Iteration  12: 508492.480 ops/s
Iteration  13: 507022.989 ops/s
Iteration  14: 507296.856 ops/s
Iteration  15: 506986.309 ops/s
Iteration  16: 507352.055 ops/s
Iteration  17: 507411.492 ops/s
Iteration  18: 505327.530 ops/s
Iteration  19: 508675.441 ops/s
Iteration  20: 507589.573 ops/s
Iteration  21: 506354.832 ops/s
Iteration  22: 508683.777 ops/s
Iteration  23: 508970.840 ops/s
Iteration  24: 507484.364 ops/s
Iteration  25: 506973.953 ops/s
Iteration  26: 508300.187 ops/s
Iteration  27: 507488.185 ops/s
Iteration  28: 496545.475 ops/s
Iteration  29: 506624.471 ops/s
Iteration  30: 505618.533 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_get":
  506710.345 ±(99.9%) 1521.718 ops/s [Average]
  (min, avg, max) = (496545.475, 506710.345, 509670.914), stdev = 2277.636
  CI (99.9%): [505188.627, 508232.063] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_get  thrpt   30  506710.345 ± 1521.718  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_getFirst$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_getFirst

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 39176163.260 ops/s
# Warmup Iteration   2: 76188792.130 ops/s
# Warmup Iteration   3: 66491237.591 ops/s
# Warmup Iteration   4: 77628136.068 ops/s
# Warmup Iteration   5: 77574041.354 ops/s
# Warmup Iteration   6: 77668245.725 ops/s
# Warmup Iteration   7: 77310758.072 ops/s
# Warmup Iteration   8: 77572558.477 ops/s
# Warmup Iteration   9: 77676923.514 ops/s
# Warmup Iteration  10: 77535604.713 ops/s
# Warmup Iteration  11: 77415499.846 ops/s
# Warmup Iteration  12: 77664734.680 ops/s
# Warmup Iteration  13: 77628682.057 ops/s
# Warmup Iteration  14: 77589003.994 ops/s
# Warmup Iteration  15: 77523479.799 ops/s
# Warmup Iteration  16: 77508541.335 ops/s
# Warmup Iteration  17: 77854533.354 ops/s
# Warmup Iteration  18: 77870025.533 ops/s
# Warmup Iteration  19: 77903931.542 ops/s
# Warmup Iteration  20: 77929857.171 ops/s
# Warmup Iteration  21: 78086562.552 ops/s
# Warmup Iteration  22: 77807502.059 ops/s
# Warmup Iteration  23: 77678522.632 ops/s
# Warmup Iteration  24: 78088944.062 ops/s
# Warmup Iteration  25: 78108695.809 ops/s
# Warmup Iteration  26: 77983105.024 ops/s
# Warmup Iteration  27: 77945183.942 ops/s
# Warmup Iteration  28: 77921843.241 ops/s
# Warmup Iteration  29: 77830853.373 ops/s
# Warmup Iteration  30: 78005790.967 ops/s
Iteration   1: 78080019.798 ops/s
Iteration   2: 78134269.276 ops/s
Iteration   3: 77780230.927 ops/s
Iteration   4: 77807407.299 ops/s
Iteration   5: 78029125.399 ops/s
Iteration   6: 77531218.372 ops/s
Iteration   7: 77646298.680 ops/s
Iteration   8: 77843241.387 ops/s
Iteration   9: 77875187.685 ops/s
Iteration  10: 77874467.928 ops/s
Iteration  11: 78040329.114 ops/s
Iteration  12: 78064141.662 ops/s
Iteration  13: 77876430.637 ops/s
Iteration  14: 78173525.056 ops/s
Iteration  15: 77818425.635 ops/s
Iteration  16: 77879770.935 ops/s
Iteration  17: 78213190.936 ops/s
Iteration  18: 77954075.880 ops/s
Iteration  19: 77806130.906 ops/s
Iteration  20: 77694129.461 ops/s
Iteration  21: 77962560.404 ops/s
Iteration  22: 77583109.385 ops/s
Iteration  23: 77775537.785 ops/s
Iteration  24: 78306692.393 ops/s
Iteration  25: 78361435.187 ops/s
Iteration  26: 77807589.548 ops/s
Iteration  27: 77909118.924 ops/s
Iteration  28: 78042954.100 ops/s
Iteration  29: 78181789.959 ops/s
Iteration  30: 77928471.141 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_getFirst":
  77932695.860 ±(99.9%) 135246.158 ops/s [Average]
  (min, avg, max) = (77531218.372, 77932695.860, 78361435.187), stdev = 202430.097
  CI (99.9%): [77797449.702, 78067942.018] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score        Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_getFirst  thrpt   30  77932695.860 ± 135246.158  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_getLast$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_getLast

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 39797668.885 ops/s
# Warmup Iteration   2: 76225468.021 ops/s
# Warmup Iteration   3: 65120466.788 ops/s
# Warmup Iteration   4: 75235120.398 ops/s
# Warmup Iteration   5: 75407604.300 ops/s
# Warmup Iteration   6: 75201174.233 ops/s
# Warmup Iteration   7: 75101809.497 ops/s
# Warmup Iteration   8: 75328573.795 ops/s
# Warmup Iteration   9: 75103776.080 ops/s
# Warmup Iteration  10: 75270799.632 ops/s
# Warmup Iteration  11: 75209210.227 ops/s
# Warmup Iteration  12: 75138778.827 ops/s
# Warmup Iteration  13: 75203093.649 ops/s
# Warmup Iteration  14: 75386031.279 ops/s
# Warmup Iteration  15: 75255805.642 ops/s
# Warmup Iteration  16: 75204607.765 ops/s
# Warmup Iteration  17: 75414797.900 ops/s
# Warmup Iteration  18: 75327699.973 ops/s
# Warmup Iteration  19: 75275613.740 ops/s
# Warmup Iteration  20: 75148829.064 ops/s
# Warmup Iteration  21: 75229480.984 ops/s
# Warmup Iteration  22: 75140578.662 ops/s
# Warmup Iteration  23: 75448473.997 ops/s
# Warmup Iteration  24: 75245116.803 ops/s
# Warmup Iteration  25: 75405764.898 ops/s
# Warmup Iteration  26: 75379543.843 ops/s
# Warmup Iteration  27: 75310883.236 ops/s
# Warmup Iteration  28: 75238653.111 ops/s
# Warmup Iteration  29: 75306638.923 ops/s
# Warmup Iteration  30: 75394130.197 ops/s
Iteration   1: 75165448.402 ops/s
Iteration   2: 75546313.776 ops/s
Iteration   3: 75457065.713 ops/s
Iteration   4: 75289746.110 ops/s
Iteration   5: 75335065.384 ops/s
Iteration   6: 75240613.441 ops/s
Iteration   7: 75417802.428 ops/s
Iteration   8: 75250124.680 ops/s
Iteration   9: 75530484.994 ops/s
Iteration  10: 75290521.196 ops/s
Iteration  11: 75403970.963 ops/s
Iteration  12: 75257659.965 ops/s
Iteration  13: 75413184.821 ops/s
Iteration  14: 75215448.120 ops/s
Iteration  15: 75288100.808 ops/s
Iteration  16: 75572851.566 ops/s
Iteration  17: 75479117.739 ops/s
Iteration  18: 75304946.133 ops/s
Iteration  19: 75120705.458 ops/s
Iteration  20: 75502714.161 ops/s
Iteration  21: 75256075.866 ops/s
Iteration  22: 74862608.141 ops/s
Iteration  23: 75175072.303 ops/s
Iteration  24: 75405792.273 ops/s
Iteration  25: 75122697.542 ops/s
Iteration  26: 75092084.563 ops/s
Iteration  27: 75070187.705 ops/s
Iteration  28: 75266182.893 ops/s
Iteration  29: 75156792.130 ops/s
Iteration  30: 75301163.409 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_getLast":
  75293018.089 ±(99.9%) 108021.950 ops/s [Average]
  (min, avg, max) = (74862608.141, 75293018.089, 75572851.566), stdev = 161682.182
  CI (99.9%): [75184996.139, 75401040.040] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score        Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_getLast  thrpt   30  75293018.089 ± 108021.950  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_getOnly$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_getOnly

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 797270.654 ops/s
# Warmup Iteration   2: 825616.505 ops/s
# Warmup Iteration   3: 1059475.826 ops/s
# Warmup Iteration   4: 1059492.347 ops/s
# Warmup Iteration   5: 1053000.083 ops/s
# Warmup Iteration   6: 1065969.761 ops/s
# Warmup Iteration   7: 1061887.662 ops/s
# Warmup Iteration   8: 1062530.696 ops/s
# Warmup Iteration   9: 1063456.280 ops/s
# Warmup Iteration  10: 1062419.107 ops/s
# Warmup Iteration  11: 1060448.007 ops/s
# Warmup Iteration  12: 905419.037 ops/s
# Warmup Iteration  13: 1062463.019 ops/s
# Warmup Iteration  14: 1059843.717 ops/s
# Warmup Iteration  15: 1062709.247 ops/s
# Warmup Iteration  16: 1058991.759 ops/s
# Warmup Iteration  17: 1132697.708 ops/s
# Warmup Iteration  18: 1133589.120 ops/s
# Warmup Iteration  19: 1131061.996 ops/s
# Warmup Iteration  20: 1131351.689 ops/s
# Warmup Iteration  21: 1132101.404 ops/s
# Warmup Iteration  22: 1130741.482 ops/s
# Warmup Iteration  23: 1132629.623 ops/s
# Warmup Iteration  24: 1130707.362 ops/s
# Warmup Iteration  25: 1132972.337 ops/s
# Warmup Iteration  26: 1132644.916 ops/s
# Warmup Iteration  27: 1132730.594 ops/s
# Warmup Iteration  28: 1128776.057 ops/s
# Warmup Iteration  29: 1131491.804 ops/s
# Warmup Iteration  30: 1132551.673 ops/s
Iteration   1: 1130083.597 ops/s
Iteration   2: 1123199.445 ops/s
Iteration   3: 1130012.306 ops/s
Iteration   4: 1131933.645 ops/s
Iteration   5: 1129572.676 ops/s
Iteration   6: 1116337.585 ops/s
Iteration   7: 1129143.351 ops/s
Iteration   8: 1131977.038 ops/s
Iteration   9: 1132353.139 ops/s
Iteration  10: 1129523.133 ops/s
Iteration  11: 1130210.140 ops/s
Iteration  12: 1133678.187 ops/s
Iteration  13: 1126823.156 ops/s
Iteration  14: 1130420.963 ops/s
Iteration  15: 1131842.213 ops/s
Iteration  16: 1131185.694 ops/s
Iteration  17: 1131348.894 ops/s
Iteration  18: 1131658.909 ops/s
Iteration  19: 1134387.103 ops/s
Iteration  20: 1132647.674 ops/s
Iteration  21: 1130666.861 ops/s
Iteration  22: 1133969.146 ops/s
Iteration  23: 1133899.006 ops/s
Iteration  24: 1132202.745 ops/s
Iteration  25: 1131319.907 ops/s
Iteration  26: 1134661.711 ops/s
Iteration  27: 1135466.471 ops/s
Iteration  28: 1134926.444 ops/s
Iteration  29: 1133929.739 ops/s
Iteration  30: 1133524.672 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_getOnly":
  1131096.852 ±(99.9%) 2519.379 ops/s [Average]
  (min, avg, max) = (1116337.585, 1131096.852, 1135466.471), stdev = 3770.889
  CI (99.9%): [1128577.472, 1133616.231] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_getOnly  thrpt   30  1131096.852 ± 2519.379  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_groupBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_groupBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 872589.724 ops/s
# Warmup Iteration   2: 1782922.036 ops/s
# Warmup Iteration   3: 1934832.420 ops/s
# Warmup Iteration   4: 1946204.224 ops/s
# Warmup Iteration   5: 1608352.626 ops/s
# Warmup Iteration   6: 1947871.248 ops/s
# Warmup Iteration   7: 1946461.161 ops/s
# Warmup Iteration   8: 1946388.276 ops/s
# Warmup Iteration   9: 1943310.520 ops/s
# Warmup Iteration  10: 1943653.051 ops/s
# Warmup Iteration  11: 1948355.323 ops/s
# Warmup Iteration  12: 1944435.023 ops/s
# Warmup Iteration  13: 1949104.710 ops/s
# Warmup Iteration  14: 1945017.976 ops/s
# Warmup Iteration  15: 1948622.180 ops/s
# Warmup Iteration  16: 1948958.298 ops/s
# Warmup Iteration  17: 1944368.302 ops/s
# Warmup Iteration  18: 1947128.703 ops/s
# Warmup Iteration  19: 1948996.595 ops/s
# Warmup Iteration  20: 1948519.984 ops/s
# Warmup Iteration  21: 1940706.120 ops/s
# Warmup Iteration  22: 1946909.397 ops/s
# Warmup Iteration  23: 1942479.711 ops/s
# Warmup Iteration  24: 1948024.444 ops/s
# Warmup Iteration  25: 1940770.380 ops/s
# Warmup Iteration  26: 1944254.124 ops/s
# Warmup Iteration  27: 1942154.787 ops/s
# Warmup Iteration  28: 1942191.538 ops/s
# Warmup Iteration  29: 1942317.966 ops/s
# Warmup Iteration  30: 1941412.129 ops/s
Iteration   1: 1941597.778 ops/s
Iteration   2: 1942311.185 ops/s
Iteration   3: 1939379.562 ops/s
Iteration   4: 1942872.490 ops/s
Iteration   5: 1942619.505 ops/s
Iteration   6: 1943496.031 ops/s
Iteration   7: 1938559.347 ops/s
Iteration   8: 1943218.463 ops/s
Iteration   9: 1942897.529 ops/s
Iteration  10: 1945849.611 ops/s
Iteration  11: 1942459.729 ops/s
Iteration  12: 1943269.615 ops/s
Iteration  13: 1945494.250 ops/s
Iteration  14: 1943063.440 ops/s
Iteration  15: 1941171.419 ops/s
Iteration  16: 1939020.437 ops/s
Iteration  17: 1949479.953 ops/s
Iteration  18: 1938183.880 ops/s
Iteration  19: 1944697.741 ops/s
Iteration  20: 1947027.747 ops/s
Iteration  21: 1944908.587 ops/s
Iteration  22: 1945465.337 ops/s
Iteration  23: 1944428.589 ops/s
Iteration  24: 1943670.633 ops/s
Iteration  25: 1940464.847 ops/s
Iteration  26: 1940532.787 ops/s
Iteration  27: 1946295.293 ops/s
Iteration  28: 1946508.542 ops/s
Iteration  29: 1942454.531 ops/s
Iteration  30: 1947201.178 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_groupBy":
  1943286.668 ±(99.9%) 1828.819 ops/s [Average]
  (min, avg, max) = (1938183.880, 1943286.668, 1949479.953), stdev = 2737.290
  CI (99.9%): [1941457.849, 1945115.486] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_groupBy  thrpt   30  1943286.668 ± 1828.819  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_groupByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_groupByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 154948.491 ops/s
# Warmup Iteration   2: 236934.231 ops/s
# Warmup Iteration   3: 291010.062 ops/s
# Warmup Iteration   4: 289141.788 ops/s
# Warmup Iteration   5: 291277.975 ops/s
# Warmup Iteration   6: 291256.699 ops/s
# Warmup Iteration   7: 241294.758 ops/s
# Warmup Iteration   8: 291179.903 ops/s
# Warmup Iteration   9: 290560.069 ops/s
# Warmup Iteration  10: 290848.946 ops/s
# Warmup Iteration  11: 291071.707 ops/s
# Warmup Iteration  12: 290914.415 ops/s
# Warmup Iteration  13: 291255.090 ops/s
# Warmup Iteration  14: 290810.457 ops/s
# Warmup Iteration  15: 291286.671 ops/s
# Warmup Iteration  16: 291101.174 ops/s
# Warmup Iteration  17: 290894.329 ops/s
# Warmup Iteration  18: 291454.976 ops/s
# Warmup Iteration  19: 291204.026 ops/s
# Warmup Iteration  20: 290362.066 ops/s
# Warmup Iteration  21: 290990.259 ops/s
# Warmup Iteration  22: 291071.890 ops/s
# Warmup Iteration  23: 291099.546 ops/s
# Warmup Iteration  24: 291279.265 ops/s
# Warmup Iteration  25: 291004.877 ops/s
# Warmup Iteration  26: 291843.169 ops/s
# Warmup Iteration  27: 291411.902 ops/s
# Warmup Iteration  28: 291293.227 ops/s
# Warmup Iteration  29: 291190.038 ops/s
# Warmup Iteration  30: 290986.546 ops/s
Iteration   1: 291606.073 ops/s
Iteration   2: 291233.973 ops/s
Iteration   3: 291468.782 ops/s
Iteration   4: 291048.973 ops/s
Iteration   5: 291761.839 ops/s
Iteration   6: 290865.294 ops/s
Iteration   7: 292149.314 ops/s
Iteration   8: 291435.916 ops/s
Iteration   9: 291335.539 ops/s
Iteration  10: 291828.585 ops/s
Iteration  11: 290944.976 ops/s
Iteration  12: 291980.949 ops/s
Iteration  13: 291395.275 ops/s
Iteration  14: 290643.449 ops/s
Iteration  15: 290702.253 ops/s
Iteration  16: 291521.159 ops/s
Iteration  17: 291611.043 ops/s
Iteration  18: 291619.698 ops/s
Iteration  19: 290108.825 ops/s
Iteration  20: 291078.706 ops/s
Iteration  21: 291535.044 ops/s
Iteration  22: 291398.984 ops/s
Iteration  23: 291873.702 ops/s
Iteration  24: 291282.834 ops/s
Iteration  25: 291779.526 ops/s
Iteration  26: 291131.237 ops/s
Iteration  27: 291776.719 ops/s
Iteration  28: 291076.251 ops/s
Iteration  29: 290914.064 ops/s
Iteration  30: 291574.573 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_groupByEach":
  291356.119 ±(99.9%) 298.151 ops/s [Average]
  (min, avg, max) = (290108.825, 291356.119, 292149.314), stdev = 446.259
  CI (99.9%): [291057.967, 291654.270] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score     Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_groupByEach  thrpt   30  291356.119 ± 298.151  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_indexOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_indexOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 19012722.159 ops/s
# Warmup Iteration   2: 38301496.814 ops/s
# Warmup Iteration   3: 60595862.986 ops/s
# Warmup Iteration   4: 51390928.736 ops/s
# Warmup Iteration   5: 60840908.013 ops/s
# Warmup Iteration   6: 60803274.410 ops/s
# Warmup Iteration   7: 60733068.228 ops/s
# Warmup Iteration   8: 60808425.292 ops/s
# Warmup Iteration   9: 60699197.790 ops/s
# Warmup Iteration  10: 60741126.052 ops/s
# Warmup Iteration  11: 60727784.563 ops/s
# Warmup Iteration  12: 60798241.457 ops/s
# Warmup Iteration  13: 60871206.803 ops/s
# Warmup Iteration  14: 60811604.707 ops/s
# Warmup Iteration  15: 60825339.364 ops/s
# Warmup Iteration  16: 60824343.404 ops/s
# Warmup Iteration  17: 60695462.790 ops/s
# Warmup Iteration  18: 60828290.234 ops/s
# Warmup Iteration  19: 60761037.211 ops/s
# Warmup Iteration  20: 60582053.046 ops/s
# Warmup Iteration  21: 60780965.939 ops/s
# Warmup Iteration  22: 60684205.266 ops/s
# Warmup Iteration  23: 60729266.628 ops/s
# Warmup Iteration  24: 60577442.956 ops/s
# Warmup Iteration  25: 60881395.807 ops/s
# Warmup Iteration  26: 60798237.165 ops/s
# Warmup Iteration  27: 60809714.543 ops/s
# Warmup Iteration  28: 60668220.312 ops/s
# Warmup Iteration  29: 60887826.829 ops/s
# Warmup Iteration  30: 60697385.100 ops/s
Iteration   1: 60758161.781 ops/s
Iteration   2: 61097037.643 ops/s
Iteration   3: 60694221.729 ops/s
Iteration   4: 60826163.090 ops/s
Iteration   5: 60801270.772 ops/s
Iteration   6: 60798087.949 ops/s
Iteration   7: 60853988.802 ops/s
Iteration   8: 60782521.941 ops/s
Iteration   9: 60839353.676 ops/s
Iteration  10: 60913428.705 ops/s
Iteration  11: 60866396.808 ops/s
Iteration  12: 60942684.555 ops/s
Iteration  13: 60815323.518 ops/s
Iteration  14: 60755324.584 ops/s
Iteration  15: 60867163.277 ops/s
Iteration  16: 60730758.481 ops/s
Iteration  17: 60700140.259 ops/s
Iteration  18: 60783532.201 ops/s
Iteration  19: 60745037.943 ops/s
Iteration  20: 60894052.725 ops/s
Iteration  21: 60758872.256 ops/s
Iteration  22: 61043746.481 ops/s
Iteration  23: 60985923.228 ops/s
Iteration  24: 61013694.006 ops/s
Iteration  25: 60856508.165 ops/s
Iteration  26: 60975427.288 ops/s
Iteration  27: 60987373.562 ops/s
Iteration  28: 60902358.847 ops/s
Iteration  29: 60854421.784 ops/s
Iteration  30: 60899559.299 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_indexOf":
  60858084.512 ±(99.9%) 69127.835 ops/s [Average]
  (min, avg, max) = (60694221.729, 60858084.512, 61097037.643), stdev = 103467.297
  CI (99.9%): [60788956.677, 60927212.347] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_indexOf  thrpt   30  60858084.512 ± 69127.835  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10870129.426 ops/s
# Warmup Iteration   2: 22885989.014 ops/s
# Warmup Iteration   3: 22999619.218 ops/s
# Warmup Iteration   4: 19459947.306 ops/s
# Warmup Iteration   5: 23019605.386 ops/s
# Warmup Iteration   6: 23031264.843 ops/s
# Warmup Iteration   7: 23003179.817 ops/s
# Warmup Iteration   8: 23059508.895 ops/s
# Warmup Iteration   9: 23055699.627 ops/s
# Warmup Iteration  10: 23049502.800 ops/s
# Warmup Iteration  11: 23049321.016 ops/s
# Warmup Iteration  12: 23043460.013 ops/s
# Warmup Iteration  13: 23028409.171 ops/s
# Warmup Iteration  14: 23040380.865 ops/s
# Warmup Iteration  15: 23021025.637 ops/s
# Warmup Iteration  16: 23001700.194 ops/s
# Warmup Iteration  17: 23022325.162 ops/s
# Warmup Iteration  18: 23030635.568 ops/s
# Warmup Iteration  19: 23068525.450 ops/s
# Warmup Iteration  20: 23025440.871 ops/s
# Warmup Iteration  21: 23045619.691 ops/s
# Warmup Iteration  22: 23020431.452 ops/s
# Warmup Iteration  23: 23051621.790 ops/s
# Warmup Iteration  24: 23045753.137 ops/s
# Warmup Iteration  25: 23042299.010 ops/s
# Warmup Iteration  26: 23032092.886 ops/s
# Warmup Iteration  27: 23030710.280 ops/s
# Warmup Iteration  28: 23032311.258 ops/s
# Warmup Iteration  29: 23025796.544 ops/s
# Warmup Iteration  30: 23047975.924 ops/s
Iteration   1: 23057114.747 ops/s
Iteration   2: 22999249.544 ops/s
Iteration   3: 23048306.891 ops/s
Iteration   4: 23033048.971 ops/s
Iteration   5: 23020246.648 ops/s
Iteration   6: 22984366.925 ops/s
Iteration   7: 23002067.104 ops/s
Iteration   8: 23058336.047 ops/s
Iteration   9: 23048430.245 ops/s
Iteration  10: 23062446.597 ops/s
Iteration  11: 23052686.643 ops/s
Iteration  12: 23018616.555 ops/s
Iteration  13: 23043208.870 ops/s
Iteration  14: 23042628.195 ops/s
Iteration  15: 23053847.740 ops/s
Iteration  16: 23012591.253 ops/s
Iteration  17: 22974739.720 ops/s
Iteration  18: 22986023.502 ops/s
Iteration  19: 23073349.107 ops/s
Iteration  20: 23027375.364 ops/s
Iteration  21: 23063851.732 ops/s
Iteration  22: 23023634.385 ops/s
Iteration  23: 23038571.731 ops/s
Iteration  24: 23029843.580 ops/s
Iteration  25: 23037138.288 ops/s
Iteration  26: 23062007.573 ops/s
Iteration  27: 23040862.436 ops/s
Iteration  28: 23051148.124 ops/s
Iteration  29: 23083182.368 ops/s
Iteration  30: 23093217.636 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_injectInto":
  23037404.617 ±(99.9%) 19213.189 ops/s [Average]
  (min, avg, max) = (22974739.720, 23037404.617, 23093217.636), stdev = 28757.399
  CI (99.9%): [23018191.428, 23056617.806] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score       Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_injectInto  thrpt   30  23037404.617 ± 19213.189  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_injectIntoDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_injectIntoDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12366438.990 ops/s
# Warmup Iteration   2: 25851076.523 ops/s
# Warmup Iteration   3: 24944099.441 ops/s
# Warmup Iteration   4: 21412293.175 ops/s
# Warmup Iteration   5: 25405184.410 ops/s
# Warmup Iteration   6: 25405171.891 ops/s
# Warmup Iteration   7: 25357984.161 ops/s
# Warmup Iteration   8: 25322343.979 ops/s
# Warmup Iteration   9: 25404402.777 ops/s
# Warmup Iteration  10: 25377919.239 ops/s
# Warmup Iteration  11: 25333710.384 ops/s
# Warmup Iteration  12: 25411347.746 ops/s
# Warmup Iteration  13: 25371591.923 ops/s
# Warmup Iteration  14: 25346908.164 ops/s
# Warmup Iteration  15: 25425498.566 ops/s
# Warmup Iteration  16: 25377306.239 ops/s
# Warmup Iteration  17: 25333394.183 ops/s
# Warmup Iteration  18: 25425842.532 ops/s
# Warmup Iteration  19: 25391924.184 ops/s
# Warmup Iteration  20: 25382036.087 ops/s
# Warmup Iteration  21: 25347125.091 ops/s
# Warmup Iteration  22: 25409660.340 ops/s
# Warmup Iteration  23: 25321436.243 ops/s
# Warmup Iteration  24: 25353718.759 ops/s
# Warmup Iteration  25: 25377364.743 ops/s
# Warmup Iteration  26: 25319850.809 ops/s
# Warmup Iteration  27: 25328298.885 ops/s
# Warmup Iteration  28: 25360483.061 ops/s
# Warmup Iteration  29: 25393206.019 ops/s
# Warmup Iteration  30: 25353097.889 ops/s
Iteration   1: 25334375.776 ops/s
Iteration   2: 25360601.039 ops/s
Iteration   3: 25358747.105 ops/s
Iteration   4: 25335450.897 ops/s
Iteration   5: 25297100.081 ops/s
Iteration   6: 25332918.563 ops/s
Iteration   7: 25398531.974 ops/s
Iteration   8: 25373253.681 ops/s
Iteration   9: 25394328.396 ops/s
Iteration  10: 25296996.578 ops/s
Iteration  11: 25409540.325 ops/s
Iteration  12: 25337804.511 ops/s
Iteration  13: 25412656.653 ops/s
Iteration  14: 25273215.098 ops/s
Iteration  15: 25367134.202 ops/s
Iteration  16: 25307531.795 ops/s
Iteration  17: 25390716.888 ops/s
Iteration  18: 25329844.412 ops/s
Iteration  19: 25349201.263 ops/s
Iteration  20: 25311996.986 ops/s
Iteration  21: 25316936.166 ops/s
Iteration  22: 25340009.894 ops/s
Iteration  23: 25384723.333 ops/s
Iteration  24: 25386121.962 ops/s
Iteration  25: 25383742.007 ops/s
Iteration  26: 25393976.200 ops/s
Iteration  27: 25342110.566 ops/s
Iteration  28: 25343739.972 ops/s
Iteration  29: 25357754.149 ops/s
Iteration  30: 25341377.679 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_injectIntoDouble":
  25352081.272 ±(99.9%) 23995.968 ops/s [Average]
  (min, avg, max) = (25273215.098, 25352081.272, 25412656.653), stdev = 35916.038
  CI (99.9%): [25328085.304, 25376077.240] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score       Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_injectIntoDouble  thrpt   30  25352081.272 ± 23995.968  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_injectIntoFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_injectIntoFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12323455.053 ops/s
# Warmup Iteration   2: 25265581.605 ops/s
# Warmup Iteration   3: 25179883.855 ops/s
# Warmup Iteration   4: 21284189.444 ops/s
# Warmup Iteration   5: 25299806.947 ops/s
# Warmup Iteration   6: 25235911.312 ops/s
# Warmup Iteration   7: 25263696.894 ops/s
# Warmup Iteration   8: 25293977.877 ops/s
# Warmup Iteration   9: 25231617.581 ops/s
# Warmup Iteration  10: 25216361.440 ops/s
# Warmup Iteration  11: 25196822.399 ops/s
# Warmup Iteration  12: 25265611.641 ops/s
# Warmup Iteration  13: 25265930.133 ops/s
# Warmup Iteration  14: 25260224.521 ops/s
# Warmup Iteration  15: 25252639.511 ops/s
# Warmup Iteration  16: 25205755.896 ops/s
# Warmup Iteration  17: 25258704.145 ops/s
# Warmup Iteration  18: 25240255.888 ops/s
# Warmup Iteration  19: 25285614.676 ops/s
# Warmup Iteration  20: 25228929.945 ops/s
# Warmup Iteration  21: 25215647.275 ops/s
# Warmup Iteration  22: 25303479.029 ops/s
# Warmup Iteration  23: 25249446.612 ops/s
# Warmup Iteration  24: 25297884.887 ops/s
# Warmup Iteration  25: 25297212.290 ops/s
# Warmup Iteration  26: 25251193.822 ops/s
# Warmup Iteration  27: 25276567.871 ops/s
# Warmup Iteration  28: 25239573.425 ops/s
# Warmup Iteration  29: 25297949.820 ops/s
# Warmup Iteration  30: 25206175.244 ops/s
Iteration   1: 25262666.246 ops/s
Iteration   2: 25333425.435 ops/s
Iteration   3: 25262292.668 ops/s
Iteration   4: 25331772.070 ops/s
Iteration   5: 25226935.104 ops/s
Iteration   6: 25297551.460 ops/s
Iteration   7: 25194843.295 ops/s
Iteration   8: 25234828.036 ops/s
Iteration   9: 25333192.244 ops/s
Iteration  10: 25270303.904 ops/s
Iteration  11: 25252681.134 ops/s
Iteration  12: 25312550.703 ops/s
Iteration  13: 25297539.241 ops/s
Iteration  14: 25307577.532 ops/s
Iteration  15: 25283861.934 ops/s
Iteration  16: 25320530.425 ops/s
Iteration  17: 25243225.367 ops/s
Iteration  18: 25289084.101 ops/s
Iteration  19: 25209678.346 ops/s
Iteration  20: 25252549.246 ops/s
Iteration  21: 25274938.211 ops/s
Iteration  22: 25329199.900 ops/s
Iteration  23: 25258350.315 ops/s
Iteration  24: 25268146.592 ops/s
Iteration  25: 25294729.607 ops/s
Iteration  26: 25285148.210 ops/s
Iteration  27: 25290252.326 ops/s
Iteration  28: 25258399.901 ops/s
Iteration  29: 25187204.051 ops/s
Iteration  30: 25070661.832 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_injectIntoFloat":
  25267803.981 ±(99.9%) 36169.975 ops/s [Average]
  (min, avg, max) = (25070661.832, 25267803.981, 25333425.435), stdev = 54137.520
  CI (99.9%): [25231634.006, 25303973.956] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score       Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_injectIntoFloat  thrpt   30  25267803.981 ± 36169.975  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_injectIntoInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_injectIntoInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13365499.370 ops/s
# Warmup Iteration   2: 26082635.720 ops/s
# Warmup Iteration   3: 27105658.450 ops/s
# Warmup Iteration   4: 22982304.021 ops/s
# Warmup Iteration   5: 27161419.804 ops/s
# Warmup Iteration   6: 27210752.563 ops/s
# Warmup Iteration   7: 27173900.139 ops/s
# Warmup Iteration   8: 27230803.886 ops/s
# Warmup Iteration   9: 27198362.553 ops/s
# Warmup Iteration  10: 27222230.165 ops/s
# Warmup Iteration  11: 27211171.401 ops/s
# Warmup Iteration  12: 27240883.710 ops/s
# Warmup Iteration  13: 27196815.769 ops/s
# Warmup Iteration  14: 27213471.891 ops/s
# Warmup Iteration  15: 27200824.642 ops/s
# Warmup Iteration  16: 27278327.954 ops/s
# Warmup Iteration  17: 27151957.681 ops/s
# Warmup Iteration  18: 27129327.899 ops/s
# Warmup Iteration  19: 27148837.575 ops/s
# Warmup Iteration  20: 27151619.823 ops/s
# Warmup Iteration  21: 27111090.344 ops/s
# Warmup Iteration  22: 27154027.134 ops/s
# Warmup Iteration  23: 27160093.464 ops/s
# Warmup Iteration  24: 27189392.399 ops/s
# Warmup Iteration  25: 27182548.902 ops/s
# Warmup Iteration  26: 27114362.306 ops/s
# Warmup Iteration  27: 27169172.107 ops/s
# Warmup Iteration  28: 27170409.416 ops/s
# Warmup Iteration  29: 27181559.714 ops/s
# Warmup Iteration  30: 27171165.459 ops/s
Iteration   1: 27205077.465 ops/s
Iteration   2: 27151888.428 ops/s
Iteration   3: 27193320.667 ops/s
Iteration   4: 27162004.359 ops/s
Iteration   5: 27169339.930 ops/s
Iteration   6: 27167868.265 ops/s
Iteration   7: 27127459.890 ops/s
Iteration   8: 27138295.715 ops/s
Iteration   9: 27167837.101 ops/s
Iteration  10: 27154209.104 ops/s
Iteration  11: 27090116.363 ops/s
Iteration  12: 27248463.528 ops/s
Iteration  13: 27183077.476 ops/s
Iteration  14: 27179855.049 ops/s
Iteration  15: 27172075.388 ops/s
Iteration  16: 27163609.517 ops/s
Iteration  17: 27189223.577 ops/s
Iteration  18: 27183348.806 ops/s
Iteration  19: 27169715.698 ops/s
Iteration  20: 27168297.780 ops/s
Iteration  21: 27174619.776 ops/s
Iteration  22: 27154929.089 ops/s
Iteration  23: 27198685.729 ops/s
Iteration  24: 27217067.697 ops/s
Iteration  25: 27118831.877 ops/s
Iteration  26: 27161313.764 ops/s
Iteration  27: 27085737.748 ops/s
Iteration  28: 27172026.313 ops/s
Iteration  29: 27191739.124 ops/s
Iteration  30: 27151220.056 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_injectIntoInt":
  27167041.843 ±(99.9%) 22293.608 ops/s [Average]
  (min, avg, max) = (27085737.748, 27167041.843, 27248463.528), stdev = 33368.025
  CI (99.9%): [27144748.235, 27189335.450] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score       Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_injectIntoInt  thrpt   30  27167041.843 ± 22293.608  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_injectIntoLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_injectIntoLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13044524.342 ops/s
# Warmup Iteration   2: 26892292.976 ops/s
# Warmup Iteration   3: 27058845.869 ops/s
# Warmup Iteration   4: 22819599.673 ops/s
# Warmup Iteration   5: 27134994.919 ops/s
# Warmup Iteration   6: 27149995.969 ops/s
# Warmup Iteration   7: 27112132.806 ops/s
# Warmup Iteration   8: 27169457.365 ops/s
# Warmup Iteration   9: 27124210.551 ops/s
# Warmup Iteration  10: 27110787.959 ops/s
# Warmup Iteration  11: 27125554.454 ops/s
# Warmup Iteration  12: 27110019.033 ops/s
# Warmup Iteration  13: 27108150.040 ops/s
# Warmup Iteration  14: 27055218.157 ops/s
# Warmup Iteration  15: 27122991.388 ops/s
# Warmup Iteration  16: 27064198.827 ops/s
# Warmup Iteration  17: 27127785.943 ops/s
# Warmup Iteration  18: 27151521.311 ops/s
# Warmup Iteration  19: 27182109.433 ops/s
# Warmup Iteration  20: 27171248.795 ops/s
# Warmup Iteration  21: 27109289.904 ops/s
# Warmup Iteration  22: 27168157.997 ops/s
# Warmup Iteration  23: 27108145.641 ops/s
# Warmup Iteration  24: 27152441.281 ops/s
# Warmup Iteration  25: 27119941.202 ops/s
# Warmup Iteration  26: 27104411.557 ops/s
# Warmup Iteration  27: 27151070.429 ops/s
# Warmup Iteration  28: 27088555.810 ops/s
# Warmup Iteration  29: 27129165.919 ops/s
# Warmup Iteration  30: 27149332.013 ops/s
Iteration   1: 27143829.011 ops/s
Iteration   2: 27098993.547 ops/s
Iteration   3: 27119198.297 ops/s
Iteration   4: 27193781.494 ops/s
Iteration   5: 27173159.192 ops/s
Iteration   6: 27095886.461 ops/s
Iteration   7: 27170547.273 ops/s
Iteration   8: 27115184.809 ops/s
Iteration   9: 27147147.465 ops/s
Iteration  10: 27102411.323 ops/s
Iteration  11: 27153350.617 ops/s
Iteration  12: 27052226.811 ops/s
Iteration  13: 27153897.978 ops/s
Iteration  14: 27120966.298 ops/s
Iteration  15: 27138087.615 ops/s
Iteration  16: 27156246.160 ops/s
Iteration  17: 27151187.016 ops/s
Iteration  18: 27146950.924 ops/s
Iteration  19: 27124941.626 ops/s
Iteration  20: 27074160.446 ops/s
Iteration  21: 27151596.314 ops/s
Iteration  22: 27183114.073 ops/s
Iteration  23: 27172079.017 ops/s
Iteration  24: 27120578.615 ops/s
Iteration  25: 27092965.252 ops/s
Iteration  26: 27028168.479 ops/s
Iteration  27: 27141580.700 ops/s
Iteration  28: 27091139.759 ops/s
Iteration  29: 27119623.904 ops/s
Iteration  30: 27135279.899 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_injectIntoLong":
  27128942.679 ±(99.9%) 25364.556 ops/s [Average]
  (min, avg, max) = (27028168.479, 27128942.679, 27193781.494), stdev = 37964.477
  CI (99.9%): [27103578.123, 27154307.236] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_injectIntoLong  thrpt   30  27128942.679 ± 25364.556  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 38858594.590 ops/s
# Warmup Iteration   2: 77328832.452 ops/s
# Warmup Iteration   3: 69183345.065 ops/s
# Warmup Iteration   4: 80640023.628 ops/s
# Warmup Iteration   5: 80333236.917 ops/s
# Warmup Iteration   6: 80667574.592 ops/s
# Warmup Iteration   7: 80595688.936 ops/s
# Warmup Iteration   8: 80355283.493 ops/s
# Warmup Iteration   9: 80259628.556 ops/s
# Warmup Iteration  10: 80873605.163 ops/s
# Warmup Iteration  11: 80558153.692 ops/s
# Warmup Iteration  12: 80495874.170 ops/s
# Warmup Iteration  13: 80274348.174 ops/s
# Warmup Iteration  14: 80861934.074 ops/s
# Warmup Iteration  15: 80693720.872 ops/s
# Warmup Iteration  16: 79708156.525 ops/s
# Warmup Iteration  17: 79712263.333 ops/s
# Warmup Iteration  18: 79432880.974 ops/s
# Warmup Iteration  19: 80010474.674 ops/s
# Warmup Iteration  20: 80433418.399 ops/s
# Warmup Iteration  21: 80388085.631 ops/s
# Warmup Iteration  22: 80383658.303 ops/s
# Warmup Iteration  23: 80404730.284 ops/s
# Warmup Iteration  24: 80152832.275 ops/s
# Warmup Iteration  25: 80163119.498 ops/s
# Warmup Iteration  26: 80248361.654 ops/s
# Warmup Iteration  27: 80338518.981 ops/s
# Warmup Iteration  28: 80429898.445 ops/s
# Warmup Iteration  29: 80541008.320 ops/s
# Warmup Iteration  30: 80503404.821 ops/s
Iteration   1: 79841458.448 ops/s
Iteration   2: 80491142.647 ops/s
Iteration   3: 80576456.820 ops/s
Iteration   4: 79549570.429 ops/s
Iteration   5: 80538132.451 ops/s
Iteration   6: 80183342.755 ops/s
Iteration   7: 80606660.484 ops/s
Iteration   8: 80564549.299 ops/s
Iteration   9: 80633282.498 ops/s
Iteration  10: 80593313.149 ops/s
Iteration  11: 80456259.640 ops/s
Iteration  12: 80482670.255 ops/s
Iteration  13: 80286916.016 ops/s
Iteration  14: 80600939.899 ops/s
Iteration  15: 79862964.479 ops/s
Iteration  16: 80308067.693 ops/s
Iteration  17: 80242105.950 ops/s
Iteration  18: 80338420.598 ops/s
Iteration  19: 80417605.882 ops/s
Iteration  20: 80614364.317 ops/s
Iteration  21: 80163668.068 ops/s
Iteration  22: 80222321.541 ops/s
Iteration  23: 80868526.242 ops/s
Iteration  24: 80572505.976 ops/s
Iteration  25: 80707249.807 ops/s
Iteration  26: 80933489.324 ops/s
Iteration  27: 80488448.234 ops/s
Iteration  28: 80787098.489 ops/s
Iteration  29: 80836100.680 ops/s
Iteration  30: 80618773.983 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_isEmpty":
  80446213.535 ±(99.9%) 207029.579 ops/s [Average]
  (min, avg, max) = (79549570.429, 80446213.535, 80933489.324), stdev = 309872.150
  CI (99.9%): [80239183.957, 80653243.114] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score        Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_isEmpty  thrpt   30  80446213.535 ± 207029.579  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_iterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_iterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 379077.122 ops/s
# Warmup Iteration   2: 394333.274 ops/s
# Warmup Iteration   3: 468062.598 ops/s
# Warmup Iteration   4: 495351.209 ops/s
# Warmup Iteration   5: 494667.542 ops/s
# Warmup Iteration   6: 493471.727 ops/s
# Warmup Iteration   7: 495584.273 ops/s
# Warmup Iteration   8: 494648.995 ops/s
# Warmup Iteration   9: 494833.141 ops/s
# Warmup Iteration  10: 494565.188 ops/s
# Warmup Iteration  11: 495079.121 ops/s
# Warmup Iteration  12: 494582.933 ops/s
# Warmup Iteration  13: 495030.235 ops/s
# Warmup Iteration  14: 419276.891 ops/s
# Warmup Iteration  15: 495194.162 ops/s
# Warmup Iteration  16: 495343.204 ops/s
# Warmup Iteration  17: 522621.797 ops/s
# Warmup Iteration  18: 521596.559 ops/s
# Warmup Iteration  19: 521180.607 ops/s
# Warmup Iteration  20: 523021.245 ops/s
# Warmup Iteration  21: 521383.074 ops/s
# Warmup Iteration  22: 523473.825 ops/s
# Warmup Iteration  23: 522806.510 ops/s
# Warmup Iteration  24: 523410.886 ops/s
# Warmup Iteration  25: 522393.999 ops/s
# Warmup Iteration  26: 522888.252 ops/s
# Warmup Iteration  27: 522236.519 ops/s
# Warmup Iteration  28: 518061.444 ops/s
# Warmup Iteration  29: 521730.316 ops/s
# Warmup Iteration  30: 521963.383 ops/s
Iteration   1: 521813.470 ops/s
Iteration   2: 522676.766 ops/s
Iteration   3: 522570.985 ops/s
Iteration   4: 523667.046 ops/s
Iteration   5: 521653.954 ops/s
Iteration   6: 522234.514 ops/s
Iteration   7: 524034.441 ops/s
Iteration   8: 522050.311 ops/s
Iteration   9: 521504.365 ops/s
Iteration  10: 522978.779 ops/s
Iteration  11: 522805.708 ops/s
Iteration  12: 522000.022 ops/s
Iteration  13: 522806.546 ops/s
Iteration  14: 522806.087 ops/s
Iteration  15: 524135.046 ops/s
Iteration  16: 522652.047 ops/s
Iteration  17: 521191.727 ops/s
Iteration  18: 522209.092 ops/s
Iteration  19: 522318.525 ops/s
Iteration  20: 520408.882 ops/s
Iteration  21: 524373.841 ops/s
Iteration  22: 522035.695 ops/s
Iteration  23: 519887.607 ops/s
Iteration  24: 522575.465 ops/s
Iteration  25: 523171.929 ops/s
Iteration  26: 522400.156 ops/s
Iteration  27: 519307.825 ops/s
Iteration  28: 523267.458 ops/s
Iteration  29: 522897.744 ops/s
Iteration  30: 521840.606 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_iterator":
  522342.555 ±(99.9%) 759.839 ops/s [Average]
  (min, avg, max) = (519307.825, 522342.555, 524373.841), stdev = 1137.292
  CI (99.9%): [521582.715, 523102.394] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score     Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_iterator  thrpt   30  522342.555 ± 759.839  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_iteratorRemove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_iteratorRemove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 642638.201 ops/s
# Warmup Iteration   2: 781046.707 ops/s
# Warmup Iteration   3: 967387.681 ops/s
# Warmup Iteration   4: 962568.129 ops/s
# Warmup Iteration   5: 968710.362 ops/s
# Warmup Iteration   6: 967900.464 ops/s
# Warmup Iteration   7: 969206.885 ops/s
# Warmup Iteration   8: 968655.898 ops/s
# Warmup Iteration   9: 812924.798 ops/s
# Warmup Iteration  10: 970342.608 ops/s
# Warmup Iteration  11: 968540.958 ops/s
# Warmup Iteration  12: 968689.089 ops/s
# Warmup Iteration  13: 969034.645 ops/s
# Warmup Iteration  14: 967536.275 ops/s
# Warmup Iteration  15: 965204.285 ops/s
# Warmup Iteration  16: 965511.354 ops/s
# Warmup Iteration  17: 1017857.812 ops/s
# Warmup Iteration  18: 1019214.562 ops/s
# Warmup Iteration  19: 1021826.165 ops/s
# Warmup Iteration  20: 1023058.333 ops/s
# Warmup Iteration  21: 1021773.241 ops/s
# Warmup Iteration  22: 1022597.861 ops/s
# Warmup Iteration  23: 1018918.258 ops/s
# Warmup Iteration  24: 1024077.290 ops/s
# Warmup Iteration  25: 1021519.762 ops/s
# Warmup Iteration  26: 1024653.897 ops/s
# Warmup Iteration  27: 1023097.208 ops/s
# Warmup Iteration  28: 1023868.186 ops/s
# Warmup Iteration  29: 1023311.241 ops/s
# Warmup Iteration  30: 1022812.099 ops/s
Iteration   1: 1021754.684 ops/s
Iteration   2: 1023321.474 ops/s
Iteration   3: 1020542.774 ops/s
Iteration   4: 1022003.649 ops/s
Iteration   5: 1024504.970 ops/s
Iteration   6: 1017837.762 ops/s
Iteration   7: 1020719.085 ops/s
Iteration   8: 1021124.279 ops/s
Iteration   9: 1022062.774 ops/s
Iteration  10: 1022637.254 ops/s
Iteration  11: 1022520.922 ops/s
Iteration  12: 1024765.542 ops/s
Iteration  13: 1024317.374 ops/s
Iteration  14: 1020544.008 ops/s
Iteration  15: 1022933.274 ops/s
Iteration  16: 1022916.100 ops/s
Iteration  17: 1024022.746 ops/s
Iteration  18: 1018538.826 ops/s
Iteration  19: 1024676.377 ops/s
Iteration  20: 1023961.163 ops/s
Iteration  21: 1022350.885 ops/s
Iteration  22: 1025868.800 ops/s
Iteration  23: 1023928.028 ops/s
Iteration  24: 1022713.828 ops/s
Iteration  25: 1018346.569 ops/s
Iteration  26: 1019339.828 ops/s
Iteration  27: 1022994.702 ops/s
Iteration  28: 1022679.307 ops/s
Iteration  29: 1025634.278 ops/s
Iteration  30: 1026789.387 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_iteratorRemove":
  1022545.022 ±(99.9%) 1483.474 ops/s [Average]
  (min, avg, max) = (1017837.762, 1022545.022, 1026789.387), stdev = 2220.394
  CI (99.9%): [1021061.548, 1024028.496] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_iteratorRemove  thrpt   30  1022545.022 ± 1483.474  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_lastIndexOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_lastIndexOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 37807922.625 ops/s
# Warmup Iteration   2: 75493024.714 ops/s
# Warmup Iteration   3: 66965489.460 ops/s
# Warmup Iteration   4: 77873104.010 ops/s
# Warmup Iteration   5: 77653098.129 ops/s
# Warmup Iteration   6: 77945268.298 ops/s
# Warmup Iteration   7: 77871452.490 ops/s
# Warmup Iteration   8: 77713054.931 ops/s
# Warmup Iteration   9: 77741676.623 ops/s
# Warmup Iteration  10: 77699425.138 ops/s
# Warmup Iteration  11: 77955312.125 ops/s
# Warmup Iteration  12: 77839770.763 ops/s
# Warmup Iteration  13: 77716706.507 ops/s
# Warmup Iteration  14: 77884273.822 ops/s
# Warmup Iteration  15: 77737011.565 ops/s
# Warmup Iteration  16: 77518493.586 ops/s
# Warmup Iteration  17: 78129705.425 ops/s
# Warmup Iteration  18: 78223367.940 ops/s
# Warmup Iteration  19: 78082943.903 ops/s
# Warmup Iteration  20: 77988250.887 ops/s
# Warmup Iteration  21: 78034586.973 ops/s
# Warmup Iteration  22: 77924649.514 ops/s
# Warmup Iteration  23: 78042770.616 ops/s
# Warmup Iteration  24: 78117676.877 ops/s
# Warmup Iteration  25: 77821571.714 ops/s
# Warmup Iteration  26: 77920522.738 ops/s
# Warmup Iteration  27: 78183158.271 ops/s
# Warmup Iteration  28: 77777348.740 ops/s
# Warmup Iteration  29: 78227000.139 ops/s
# Warmup Iteration  30: 78108116.791 ops/s
Iteration   1: 77933568.941 ops/s
Iteration   2: 78378941.533 ops/s
Iteration   3: 78132731.320 ops/s
Iteration   4: 78123531.754 ops/s
Iteration   5: 78304615.191 ops/s
Iteration   6: 78063380.219 ops/s
Iteration   7: 78254719.628 ops/s
Iteration   8: 77741681.313 ops/s
Iteration   9: 78317012.662 ops/s
Iteration  10: 77966172.275 ops/s
Iteration  11: 77740550.295 ops/s
Iteration  12: 78316360.863 ops/s
Iteration  13: 77897624.670 ops/s
Iteration  14: 77769625.762 ops/s
Iteration  15: 77826679.994 ops/s
Iteration  16: 78188795.986 ops/s
Iteration  17: 78010769.961 ops/s
Iteration  18: 77963394.760 ops/s
Iteration  19: 78460247.472 ops/s
Iteration  20: 78183022.835 ops/s
Iteration  21: 78190759.828 ops/s
Iteration  22: 77985366.401 ops/s
Iteration  23: 77863920.637 ops/s
Iteration  24: 77671733.435 ops/s
Iteration  25: 77571004.273 ops/s
Iteration  26: 77224662.458 ops/s
Iteration  27: 77723389.485 ops/s
Iteration  28: 77773926.700 ops/s
Iteration  29: 78060729.299 ops/s
Iteration  30: 78157681.852 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_lastIndexOf":
  77993220.060 ±(99.9%) 182221.010 ops/s [Average]
  (min, avg, max) = (77224662.458, 77993220.060, 78460247.472), stdev = 272739.851
  CI (99.9%): [77810999.050, 78175441.070] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score        Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_lastIndexOf  thrpt   30  77993220.060 ± 182221.010  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_listIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_listIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 133750.439 ops/s
# Warmup Iteration   2: 146320.740 ops/s
# Warmup Iteration   3: 190243.484 ops/s
# Warmup Iteration   4: 190465.144 ops/s
# Warmup Iteration   5: 188875.963 ops/s
# Warmup Iteration   6: 190099.704 ops/s
# Warmup Iteration   7: 190442.825 ops/s
# Warmup Iteration   8: 190203.485 ops/s
# Warmup Iteration   9: 190468.031 ops/s
# Warmup Iteration  10: 190196.276 ops/s
# Warmup Iteration  11: 160362.360 ops/s
# Warmup Iteration  12: 189335.696 ops/s
# Warmup Iteration  13: 190073.757 ops/s
# Warmup Iteration  14: 190080.132 ops/s
# Warmup Iteration  15: 189980.869 ops/s
# Warmup Iteration  16: 189476.104 ops/s
# Warmup Iteration  17: 201648.291 ops/s
# Warmup Iteration  18: 201363.727 ops/s
# Warmup Iteration  19: 201257.286 ops/s
# Warmup Iteration  20: 201114.152 ops/s
# Warmup Iteration  21: 201400.757 ops/s
# Warmup Iteration  22: 201241.633 ops/s
# Warmup Iteration  23: 201837.570 ops/s
# Warmup Iteration  24: 200992.468 ops/s
# Warmup Iteration  25: 201519.254 ops/s
# Warmup Iteration  26: 201360.459 ops/s
# Warmup Iteration  27: 201358.356 ops/s
# Warmup Iteration  28: 200992.162 ops/s
# Warmup Iteration  29: 201579.501 ops/s
# Warmup Iteration  30: 201655.425 ops/s
Iteration   1: 200758.879 ops/s
Iteration   2: 201195.884 ops/s
Iteration   3: 201452.435 ops/s
Iteration   4: 201080.923 ops/s
Iteration   5: 200701.880 ops/s
Iteration   6: 201707.670 ops/s
Iteration   7: 201622.643 ops/s
Iteration   8: 201424.608 ops/s
Iteration   9: 201282.973 ops/s
Iteration  10: 201482.117 ops/s
Iteration  11: 201968.085 ops/s
Iteration  12: 201241.793 ops/s
Iteration  13: 201307.694 ops/s
Iteration  14: 201522.983 ops/s
Iteration  15: 200439.007 ops/s
Iteration  16: 201463.939 ops/s
Iteration  17: 201808.834 ops/s
Iteration  18: 201572.352 ops/s
Iteration  19: 201215.600 ops/s
Iteration  20: 201591.493 ops/s
Iteration  21: 201153.173 ops/s
Iteration  22: 201325.817 ops/s
Iteration  23: 201288.542 ops/s
Iteration  24: 201377.033 ops/s
Iteration  25: 201499.891 ops/s
Iteration  26: 201095.636 ops/s
Iteration  27: 201481.525 ops/s
Iteration  28: 201608.034 ops/s
Iteration  29: 201386.909 ops/s
Iteration  30: 201819.615 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_listIterator":
  201362.599 ±(99.9%) 219.936 ops/s [Average]
  (min, avg, max) = (200439.007, 201362.599, 201968.085), stdev = 329.190
  CI (99.9%): [201142.663, 201582.535] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score     Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_listIterator  thrpt   30  201362.599 ± 219.936  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_listIterator_throwsGreaterThanSize$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_listIterator_throwsGreaterThanSize

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 767783.758 ops/s
# Warmup Iteration   2: 795312.188 ops/s
# Warmup Iteration   3: 988481.184 ops/s
# Warmup Iteration   4: 1008208.542 ops/s
# Warmup Iteration   5: 1013477.624 ops/s
# Warmup Iteration   6: 1009602.105 ops/s
# Warmup Iteration   7: 1014862.459 ops/s
# Warmup Iteration   8: 1016889.415 ops/s
# Warmup Iteration   9: 1010371.375 ops/s
# Warmup Iteration  10: 1015674.903 ops/s
# Warmup Iteration  11: 1011333.102 ops/s
# Warmup Iteration  12: 993793.509 ops/s
# Warmup Iteration  13: 874670.615 ops/s
# Warmup Iteration  14: 1016737.620 ops/s
# Warmup Iteration  15: 1016075.521 ops/s
# Warmup Iteration  16: 1006265.268 ops/s
# Warmup Iteration  17: 1076068.106 ops/s
# Warmup Iteration  18: 1087733.048 ops/s
# Warmup Iteration  19: 1072447.589 ops/s
# Warmup Iteration  20: 1073399.838 ops/s
# Warmup Iteration  21: 1074659.523 ops/s
# Warmup Iteration  22: 1077041.642 ops/s
# Warmup Iteration  23: 1074431.245 ops/s
# Warmup Iteration  24: 1077683.386 ops/s
# Warmup Iteration  25: 1077505.725 ops/s
# Warmup Iteration  26: 1077979.575 ops/s
# Warmup Iteration  27: 1077120.759 ops/s
# Warmup Iteration  28: 1070457.904 ops/s
# Warmup Iteration  29: 1074573.278 ops/s
# Warmup Iteration  30: 1077986.950 ops/s
Iteration   1: 1077557.642 ops/s
Iteration   2: 1073327.156 ops/s
Iteration   3: 1073042.408 ops/s
Iteration   4: 1080045.154 ops/s
Iteration   5: 1081405.662 ops/s
Iteration   6: 1078966.003 ops/s
Iteration   7: 1076942.442 ops/s
Iteration   8: 1074368.487 ops/s
Iteration   9: 1084967.072 ops/s
Iteration  10: 1073512.670 ops/s
Iteration  11: 1076905.568 ops/s
Iteration  12: 1074927.974 ops/s
Iteration  13: 1078339.679 ops/s
Iteration  14: 1075319.792 ops/s
Iteration  15: 1079886.326 ops/s
Iteration  16: 1075961.901 ops/s
Iteration  17: 1083489.364 ops/s
Iteration  18: 1078603.679 ops/s
Iteration  19: 1080095.663 ops/s
Iteration  20: 1071184.147 ops/s
Iteration  21: 1079778.639 ops/s
Iteration  22: 1074498.053 ops/s
Iteration  23: 1083427.752 ops/s
Iteration  24: 1079498.706 ops/s
Iteration  25: 1081124.747 ops/s
Iteration  26: 1083328.127 ops/s
Iteration  27: 1074296.640 ops/s
Iteration  28: 1076887.848 ops/s
Iteration  29: 1077957.273 ops/s
Iteration  30: 1077595.527 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_listIterator_throwsGreaterThanSize":
  1077908.070 ±(99.9%) 2332.455 ops/s [Average]
  (min, avg, max) = (1071184.147, 1077908.070, 1084967.072), stdev = 3491.109
  CI (99.9%): [1075575.615, 1080240.525] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt        Score      Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_listIterator_throwsGreaterThanSize  thrpt   30  1077908.070 ± 2332.455  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_listIterator_throwsNegative$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_listIterator_throwsNegative

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 773794.189 ops/s
# Warmup Iteration   2: 799051.105 ops/s
# Warmup Iteration   3: 994191.343 ops/s
# Warmup Iteration   4: 1022210.299 ops/s
# Warmup Iteration   5: 1023365.890 ops/s
# Warmup Iteration   6: 1017376.240 ops/s
# Warmup Iteration   7: 1017531.514 ops/s
# Warmup Iteration   8: 1025425.145 ops/s
# Warmup Iteration   9: 1016620.002 ops/s
# Warmup Iteration  10: 1020675.212 ops/s
# Warmup Iteration  11: 1017537.541 ops/s
# Warmup Iteration  12: 982024.913 ops/s
# Warmup Iteration  13: 902268.985 ops/s
# Warmup Iteration  14: 1018137.334 ops/s
# Warmup Iteration  15: 1017757.384 ops/s
# Warmup Iteration  16: 1023832.164 ops/s
# Warmup Iteration  17: 1071095.850 ops/s
# Warmup Iteration  18: 1077302.098 ops/s
# Warmup Iteration  19: 1070488.034 ops/s
# Warmup Iteration  20: 1075218.660 ops/s
# Warmup Iteration  21: 1073836.711 ops/s
# Warmup Iteration  22: 1076875.747 ops/s
# Warmup Iteration  23: 1076039.565 ops/s
# Warmup Iteration  24: 1081570.375 ops/s
# Warmup Iteration  25: 1075928.755 ops/s
# Warmup Iteration  26: 1077791.305 ops/s
# Warmup Iteration  27: 1079678.400 ops/s
# Warmup Iteration  28: 1078033.144 ops/s
# Warmup Iteration  29: 1075210.023 ops/s
# Warmup Iteration  30: 1074127.059 ops/s
Iteration   1: 1069385.811 ops/s
Iteration   2: 1078925.069 ops/s
Iteration   3: 1073602.037 ops/s
Iteration   4: 1074295.117 ops/s
Iteration   5: 1083495.345 ops/s
Iteration   6: 1070004.618 ops/s
Iteration   7: 1071545.649 ops/s
Iteration   8: 1081044.900 ops/s
Iteration   9: 1080852.210 ops/s
Iteration  10: 1080578.382 ops/s
Iteration  11: 1083090.107 ops/s
Iteration  12: 1072731.493 ops/s
Iteration  13: 1079267.130 ops/s
Iteration  14: 1073902.501 ops/s
Iteration  15: 1069575.386 ops/s
Iteration  16: 1074878.452 ops/s
Iteration  17: 1070698.985 ops/s
Iteration  18: 1079166.755 ops/s
Iteration  19: 1076275.455 ops/s
Iteration  20: 1071947.491 ops/s
Iteration  21: 1072343.286 ops/s
Iteration  22: 1068031.581 ops/s
Iteration  23: 1079324.093 ops/s
Iteration  24: 1068709.706 ops/s
Iteration  25: 1078985.675 ops/s
Iteration  26: 1074548.378 ops/s
Iteration  27: 1071493.378 ops/s
Iteration  28: 1070708.686 ops/s
Iteration  29: 1080225.237 ops/s
Iteration  30: 1078273.610 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_listIterator_throwsNegative":
  1075263.551 ±(99.9%) 3097.207 ops/s [Average]
  (min, avg, max) = (1068031.581, 1075263.551, 1083495.345), stdev = 4635.754
  CI (99.9%): [1072166.344, 1078360.758] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score      Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_listIterator_throwsNegative  thrpt   30  1075263.551 ± 3097.207  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 362438.751 ops/s
# Warmup Iteration   2: 822044.184 ops/s
# Warmup Iteration   3: 825722.193 ops/s
# Warmup Iteration   4: 687262.669 ops/s
# Warmup Iteration   5: 817568.187 ops/s
# Warmup Iteration   6: 815859.244 ops/s
# Warmup Iteration   7: 817039.770 ops/s
# Warmup Iteration   8: 816453.883 ops/s
# Warmup Iteration   9: 817070.427 ops/s
# Warmup Iteration  10: 816852.523 ops/s
# Warmup Iteration  11: 815735.617 ops/s
# Warmup Iteration  12: 814906.911 ops/s
# Warmup Iteration  13: 814147.196 ops/s
# Warmup Iteration  14: 814815.560 ops/s
# Warmup Iteration  15: 814828.645 ops/s
# Warmup Iteration  16: 815629.552 ops/s
# Warmup Iteration  17: 813527.877 ops/s
# Warmup Iteration  18: 813699.521 ops/s
# Warmup Iteration  19: 811959.296 ops/s
# Warmup Iteration  20: 811545.726 ops/s
# Warmup Iteration  21: 811123.479 ops/s
# Warmup Iteration  22: 813924.952 ops/s
# Warmup Iteration  23: 813744.099 ops/s
# Warmup Iteration  24: 813627.608 ops/s
# Warmup Iteration  25: 814186.195 ops/s
# Warmup Iteration  26: 812119.659 ops/s
# Warmup Iteration  27: 812189.457 ops/s
# Warmup Iteration  28: 813426.856 ops/s
# Warmup Iteration  29: 811781.138 ops/s
# Warmup Iteration  30: 811604.999 ops/s
Iteration   1: 810649.208 ops/s
Iteration   2: 812367.249 ops/s
Iteration   3: 811086.839 ops/s
Iteration   4: 810503.407 ops/s
Iteration   5: 812488.348 ops/s
Iteration   6: 810836.003 ops/s
Iteration   7: 813068.923 ops/s
Iteration   8: 808625.260 ops/s
Iteration   9: 807320.947 ops/s
Iteration  10: 810621.710 ops/s
Iteration  11: 812177.715 ops/s
Iteration  12: 812404.070 ops/s
Iteration  13: 811588.932 ops/s
Iteration  14: 812503.651 ops/s
Iteration  15: 812814.169 ops/s
Iteration  16: 810233.008 ops/s
Iteration  17: 811169.836 ops/s
Iteration  18: 814431.686 ops/s
Iteration  19: 812979.296 ops/s
Iteration  20: 810682.540 ops/s
Iteration  21: 812413.099 ops/s
Iteration  22: 813436.247 ops/s
Iteration  23: 813958.726 ops/s
Iteration  24: 812617.369 ops/s
Iteration  25: 811454.665 ops/s
Iteration  26: 810847.941 ops/s
Iteration  27: 810221.890 ops/s
Iteration  28: 808902.105 ops/s
Iteration  29: 813258.498 ops/s
Iteration  30: 812701.898 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_makeString":
  811612.175 ±(99.9%) 1074.793 ops/s [Average]
  (min, avg, max) = (807320.947, 811612.175, 814431.686), stdev = 1608.700
  CI (99.9%): [810537.381, 812686.968] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_makeString  thrpt   30  811612.175 ± 1074.793  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_max$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_max

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 18733342.839 ops/s
# Warmup Iteration   2: 37870077.477 ops/s
# Warmup Iteration   3: 34978611.071 ops/s
# Warmup Iteration   4: 35286008.738 ops/s
# Warmup Iteration   5: 29851429.464 ops/s
# Warmup Iteration   6: 35539487.250 ops/s
# Warmup Iteration   7: 35550455.284 ops/s
# Warmup Iteration   8: 35600424.306 ops/s
# Warmup Iteration   9: 35543206.900 ops/s
# Warmup Iteration  10: 35450802.382 ops/s
# Warmup Iteration  11: 35441441.486 ops/s
# Warmup Iteration  12: 35500631.667 ops/s
# Warmup Iteration  13: 35513290.651 ops/s
# Warmup Iteration  14: 35525957.894 ops/s
# Warmup Iteration  15: 35535479.664 ops/s
# Warmup Iteration  16: 35500710.497 ops/s
# Warmup Iteration  17: 35523099.407 ops/s
# Warmup Iteration  18: 35543720.701 ops/s
# Warmup Iteration  19: 35472564.799 ops/s
# Warmup Iteration  20: 35393532.911 ops/s
# Warmup Iteration  21: 35514353.055 ops/s
# Warmup Iteration  22: 35538724.972 ops/s
# Warmup Iteration  23: 35505555.023 ops/s
# Warmup Iteration  24: 35518370.347 ops/s
# Warmup Iteration  25: 35524327.223 ops/s
# Warmup Iteration  26: 35518616.023 ops/s
# Warmup Iteration  27: 35534775.732 ops/s
# Warmup Iteration  28: 35553267.965 ops/s
# Warmup Iteration  29: 35559293.476 ops/s
# Warmup Iteration  30: 35469805.192 ops/s
Iteration   1: 35349880.787 ops/s
Iteration   2: 35441982.041 ops/s
Iteration   3: 35539290.918 ops/s
Iteration   4: 35478430.076 ops/s
Iteration   5: 35663596.244 ops/s
Iteration   6: 35640895.351 ops/s
Iteration   7: 35542021.073 ops/s
Iteration   8: 35446043.320 ops/s
Iteration   9: 35585919.992 ops/s
Iteration  10: 35484078.192 ops/s
Iteration  11: 35503563.946 ops/s
Iteration  12: 35611616.505 ops/s
Iteration  13: 35502449.984 ops/s
Iteration  14: 35468974.783 ops/s
Iteration  15: 35434499.818 ops/s
Iteration  16: 35523174.013 ops/s
Iteration  17: 35506567.615 ops/s
Iteration  18: 35188441.628 ops/s
Iteration  19: 35645853.482 ops/s
Iteration  20: 35471759.467 ops/s
Iteration  21: 35512263.507 ops/s
Iteration  22: 35575690.094 ops/s
Iteration  23: 35480650.195 ops/s
Iteration  24: 35607555.642 ops/s
Iteration  25: 35650372.682 ops/s
Iteration  26: 35546974.592 ops/s
Iteration  27: 35538312.323 ops/s
Iteration  28: 35519342.906 ops/s
Iteration  29: 35581519.145 ops/s
Iteration  30: 35530021.114 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_max":
  35519058.048 ±(99.9%) 63917.338 ops/s [Average]
  (min, avg, max) = (35188441.628, 35519058.048, 35663596.244), stdev = 95668.470
  CI (99.9%): [35455140.710, 35582975.386] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score       Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_max  thrpt   30  35519058.048 ± 63917.338  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_maxBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_maxBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 18444513.157 ops/s
# Warmup Iteration   2: 35837113.216 ops/s
# Warmup Iteration   3: 30510092.321 ops/s
# Warmup Iteration   4: 37523496.858 ops/s
# Warmup Iteration   5: 37509636.599 ops/s
# Warmup Iteration   6: 37560335.835 ops/s
# Warmup Iteration   7: 37387315.124 ops/s
# Warmup Iteration   8: 37562271.672 ops/s
# Warmup Iteration   9: 37548706.509 ops/s
# Warmup Iteration  10: 37633560.400 ops/s
# Warmup Iteration  11: 37380123.990 ops/s
# Warmup Iteration  12: 37428763.413 ops/s
# Warmup Iteration  13: 37333976.336 ops/s
# Warmup Iteration  14: 37467581.765 ops/s
# Warmup Iteration  15: 37531703.998 ops/s
# Warmup Iteration  16: 37463064.015 ops/s
# Warmup Iteration  17: 37241158.319 ops/s
# Warmup Iteration  18: 37334673.793 ops/s
# Warmup Iteration  19: 37169695.610 ops/s
# Warmup Iteration  20: 37215339.496 ops/s
# Warmup Iteration  21: 37254281.376 ops/s
# Warmup Iteration  22: 37297042.190 ops/s
# Warmup Iteration  23: 37273323.516 ops/s
# Warmup Iteration  24: 37222913.569 ops/s
# Warmup Iteration  25: 37153808.461 ops/s
# Warmup Iteration  26: 37290050.886 ops/s
# Warmup Iteration  27: 37267095.529 ops/s
# Warmup Iteration  28: 37323675.519 ops/s
# Warmup Iteration  29: 37313603.238 ops/s
# Warmup Iteration  30: 37278646.517 ops/s
Iteration   1: 37181553.173 ops/s
Iteration   2: 37248632.073 ops/s
Iteration   3: 37348340.250 ops/s
Iteration   4: 37276887.734 ops/s
Iteration   5: 37245466.844 ops/s
Iteration   6: 37355978.740 ops/s
Iteration   7: 37384565.751 ops/s
Iteration   8: 37285424.220 ops/s
Iteration   9: 37355313.652 ops/s
Iteration  10: 37270181.618 ops/s
Iteration  11: 37333224.956 ops/s
Iteration  12: 37150294.066 ops/s
Iteration  13: 37301304.530 ops/s
Iteration  14: 37311051.747 ops/s
Iteration  15: 37380033.974 ops/s
Iteration  16: 37087413.716 ops/s
Iteration  17: 37417888.670 ops/s
Iteration  18: 37343319.454 ops/s
Iteration  19: 37272972.146 ops/s
Iteration  20: 37158055.751 ops/s
Iteration  21: 37291000.378 ops/s
Iteration  22: 37226275.678 ops/s
Iteration  23: 37148984.528 ops/s
Iteration  24: 37080156.804 ops/s
Iteration  25: 37274132.960 ops/s
Iteration  26: 37280994.428 ops/s
Iteration  27: 37297202.360 ops/s
Iteration  28: 37120333.158 ops/s
Iteration  29: 37179001.788 ops/s
Iteration  30: 37238361.828 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_maxBy":
  37261478.232 ±(99.9%) 59853.524 ops/s [Average]
  (min, avg, max) = (37080156.804, 37261478.232, 37417888.670), stdev = 89585.943
  CI (99.9%): [37201624.709, 37321331.756] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_maxBy  thrpt   30  37261478.232 ± 59853.524  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_max_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_max_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3999203.629 ops/s
# Warmup Iteration   2: 4730454.273 ops/s
# Warmup Iteration   3: 6135802.163 ops/s
# Warmup Iteration   4: 6148514.885 ops/s
# Warmup Iteration   5: 6115223.249 ops/s
# Warmup Iteration   6: 6151415.377 ops/s
# Warmup Iteration   7: 6147618.556 ops/s
# Warmup Iteration   8: 6139702.866 ops/s
# Warmup Iteration   9: 6066705.935 ops/s
# Warmup Iteration  10: 5209378.252 ops/s
# Warmup Iteration  11: 6147329.261 ops/s
# Warmup Iteration  12: 6142631.502 ops/s
# Warmup Iteration  13: 6140521.595 ops/s
# Warmup Iteration  14: 6142392.031 ops/s
# Warmup Iteration  15: 6140928.155 ops/s
# Warmup Iteration  16: 6136047.261 ops/s
# Warmup Iteration  17: 6152758.604 ops/s
# Warmup Iteration  18: 6150966.442 ops/s
# Warmup Iteration  19: 6155092.751 ops/s
# Warmup Iteration  20: 6158979.738 ops/s
# Warmup Iteration  21: 6157228.315 ops/s
# Warmup Iteration  22: 6147332.347 ops/s
# Warmup Iteration  23: 6152156.515 ops/s
# Warmup Iteration  24: 6158138.424 ops/s
# Warmup Iteration  25: 6143358.901 ops/s
# Warmup Iteration  26: 6143592.386 ops/s
# Warmup Iteration  27: 6154925.442 ops/s
# Warmup Iteration  28: 6137852.412 ops/s
# Warmup Iteration  29: 6141386.354 ops/s
# Warmup Iteration  30: 6163625.745 ops/s
Iteration   1: 6137145.394 ops/s
Iteration   2: 6157172.262 ops/s
Iteration   3: 6162406.592 ops/s
Iteration   4: 6154456.272 ops/s
Iteration   5: 6151366.544 ops/s
Iteration   6: 6148831.970 ops/s
Iteration   7: 6125964.537 ops/s
Iteration   8: 6147737.841 ops/s
Iteration   9: 6158236.272 ops/s
Iteration  10: 6150800.369 ops/s
Iteration  11: 6130379.503 ops/s
Iteration  12: 6157019.172 ops/s
Iteration  13: 6154649.143 ops/s
Iteration  14: 6149432.507 ops/s
Iteration  15: 6148256.202 ops/s
Iteration  16: 6156128.601 ops/s
Iteration  17: 6146610.849 ops/s
Iteration  18: 6150352.881 ops/s
Iteration  19: 6158716.455 ops/s
Iteration  20: 6107990.777 ops/s
Iteration  21: 6167589.459 ops/s
Iteration  22: 6145409.942 ops/s
Iteration  23: 6147402.142 ops/s
Iteration  24: 6120664.743 ops/s
Iteration  25: 6151159.662 ops/s
Iteration  26: 6159495.521 ops/s
Iteration  27: 6128581.048 ops/s
Iteration  28: 6158337.765 ops/s
Iteration  29: 6158939.008 ops/s
Iteration  30: 6131086.667 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_max_null_throws":
  6147410.670 ±(99.9%) 9157.484 ops/s [Average]
  (min, avg, max) = (6107990.777, 6147410.670, 6167589.459), stdev = 13706.492
  CI (99.9%): [6138253.186, 6156568.154] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_max_null_throws  thrpt   30  6147410.670 ± 9157.484  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_max_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_max_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5224562.582 ops/s
# Warmup Iteration   2: 10914240.001 ops/s
# Warmup Iteration   3: 11475514.051 ops/s
# Warmup Iteration   4: 11533175.997 ops/s
# Warmup Iteration   5: 9582613.792 ops/s
# Warmup Iteration   6: 11548470.345 ops/s
# Warmup Iteration   7: 11561264.157 ops/s
# Warmup Iteration   8: 11529483.818 ops/s
# Warmup Iteration   9: 11572620.947 ops/s
# Warmup Iteration  10: 11525577.528 ops/s
# Warmup Iteration  11: 11519462.051 ops/s
# Warmup Iteration  12: 11533176.877 ops/s
# Warmup Iteration  13: 11555953.995 ops/s
# Warmup Iteration  14: 11474673.631 ops/s
# Warmup Iteration  15: 11524632.474 ops/s
# Warmup Iteration  16: 11547374.302 ops/s
# Warmup Iteration  17: 11579374.420 ops/s
# Warmup Iteration  18: 11576646.126 ops/s
# Warmup Iteration  19: 11592923.544 ops/s
# Warmup Iteration  20: 11557322.060 ops/s
# Warmup Iteration  21: 11558389.909 ops/s
# Warmup Iteration  22: 11563300.293 ops/s
# Warmup Iteration  23: 11519766.271 ops/s
# Warmup Iteration  24: 11583103.058 ops/s
# Warmup Iteration  25: 11560020.374 ops/s
# Warmup Iteration  26: 11526048.676 ops/s
# Warmup Iteration  27: 11559974.296 ops/s
# Warmup Iteration  28: 11563813.919 ops/s
# Warmup Iteration  29: 11521758.773 ops/s
# Warmup Iteration  30: 11569945.977 ops/s
Iteration   1: 11589979.940 ops/s
Iteration   2: 11566603.464 ops/s
Iteration   3: 11596773.973 ops/s
Iteration   4: 11569911.150 ops/s
Iteration   5: 11517873.875 ops/s
Iteration   6: 11597605.082 ops/s
Iteration   7: 11571736.743 ops/s
Iteration   8: 11568129.182 ops/s
Iteration   9: 11576332.668 ops/s
Iteration  10: 11557943.207 ops/s
Iteration  11: 11504967.520 ops/s
Iteration  12: 11578903.595 ops/s
Iteration  13: 11576391.863 ops/s
Iteration  14: 11564224.927 ops/s
Iteration  15: 11526563.092 ops/s
Iteration  16: 11585258.978 ops/s
Iteration  17: 11561132.146 ops/s
Iteration  18: 11593753.112 ops/s
Iteration  19: 11533441.323 ops/s
Iteration  20: 11613532.701 ops/s
Iteration  21: 11571722.539 ops/s
Iteration  22: 11548878.622 ops/s
Iteration  23: 11592392.024 ops/s
Iteration  24: 11540651.516 ops/s
Iteration  25: 11476669.614 ops/s
Iteration  26: 11562608.063 ops/s
Iteration  27: 11584403.706 ops/s
Iteration  28: 11583593.133 ops/s
Iteration  29: 11543660.033 ops/s
Iteration  30: 11541549.757 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_max_null_throws_without_comparator":
  11563239.585 ±(99.9%) 20111.199 ops/s [Average]
  (min, avg, max) = (11476669.614, 11563239.585, 11613532.701), stdev = 30101.499
  CI (99.9%): [11543128.386, 11583350.784] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt         Score       Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_max_null_throws_without_comparator  thrpt   30  11563239.585 ± 20111.199  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_max_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_max_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 19358416.329 ops/s
# Warmup Iteration   2: 37197637.651 ops/s
# Warmup Iteration   3: 32099102.480 ops/s
# Warmup Iteration   4: 37763772.833 ops/s
# Warmup Iteration   5: 37802206.930 ops/s
# Warmup Iteration   6: 37817976.221 ops/s
# Warmup Iteration   7: 37801180.308 ops/s
# Warmup Iteration   8: 37690751.450 ops/s
# Warmup Iteration   9: 37881712.801 ops/s
# Warmup Iteration  10: 37750730.155 ops/s
# Warmup Iteration  11: 37768618.991 ops/s
# Warmup Iteration  12: 37762384.811 ops/s
# Warmup Iteration  13: 37836627.397 ops/s
# Warmup Iteration  14: 37822126.587 ops/s
# Warmup Iteration  15: 37794825.388 ops/s
# Warmup Iteration  16: 37800839.370 ops/s
# Warmup Iteration  17: 37710106.290 ops/s
# Warmup Iteration  18: 37816069.091 ops/s
# Warmup Iteration  19: 37733923.859 ops/s
# Warmup Iteration  20: 37757418.463 ops/s
# Warmup Iteration  21: 37888536.800 ops/s
# Warmup Iteration  22: 37800203.977 ops/s
# Warmup Iteration  23: 37813220.086 ops/s
# Warmup Iteration  24: 37878097.248 ops/s
# Warmup Iteration  25: 37770107.865 ops/s
# Warmup Iteration  26: 37790878.127 ops/s
# Warmup Iteration  27: 37749290.057 ops/s
# Warmup Iteration  28: 37709575.700 ops/s
# Warmup Iteration  29: 37815936.942 ops/s
# Warmup Iteration  30: 37842901.487 ops/s
Iteration   1: 37857111.301 ops/s
Iteration   2: 37885169.095 ops/s
Iteration   3: 37774412.401 ops/s
Iteration   4: 37637100.137 ops/s
Iteration   5: 37794879.078 ops/s
Iteration   6: 37703834.232 ops/s
Iteration   7: 37337284.934 ops/s
Iteration   8: 37643898.822 ops/s
Iteration   9: 37513380.018 ops/s
Iteration  10: 37593045.671 ops/s
Iteration  11: 37514490.877 ops/s
Iteration  12: 37455237.799 ops/s
Iteration  13: 37595227.821 ops/s
Iteration  14: 37788689.453 ops/s
Iteration  15: 37735368.375 ops/s
Iteration  16: 37665339.012 ops/s
Iteration  17: 37762542.249 ops/s
Iteration  18: 37758627.688 ops/s
Iteration  19: 37524376.718 ops/s
Iteration  20: 37700445.094 ops/s
Iteration  21: 37650808.150 ops/s
Iteration  22: 37616870.804 ops/s
Iteration  23: 37571162.986 ops/s
Iteration  24: 37298093.937 ops/s
Iteration  25: 37792037.655 ops/s
Iteration  26: 37786972.173 ops/s
Iteration  27: 37662973.646 ops/s
Iteration  28: 37845102.654 ops/s
Iteration  29: 37777768.857 ops/s
Iteration  30: 37783768.524 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_max_without_comparator":
  37667534.005 ±(99.9%) 97660.095 ops/s [Average]
  (min, avg, max) = (37298093.937, 37667534.005, 37885169.095), stdev = 146173.043
  CI (99.9%): [37569873.911, 37765194.100] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt         Score       Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_max_without_comparator  thrpt   30  37667534.005 ± 97660.095  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_min$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_min

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 26620130.430 ops/s
# Warmup Iteration   2: 52986212.978 ops/s
# Warmup Iteration   3: 54014544.376 ops/s
# Warmup Iteration   4: 46685603.475 ops/s
# Warmup Iteration   5: 54583899.334 ops/s
# Warmup Iteration   6: 54559364.531 ops/s
# Warmup Iteration   7: 54549506.561 ops/s
# Warmup Iteration   8: 54667901.730 ops/s
# Warmup Iteration   9: 54526592.631 ops/s
# Warmup Iteration  10: 54579448.543 ops/s
# Warmup Iteration  11: 54533574.631 ops/s
# Warmup Iteration  12: 54578834.780 ops/s
# Warmup Iteration  13: 54550474.132 ops/s
# Warmup Iteration  14: 54442463.487 ops/s
# Warmup Iteration  15: 54561195.332 ops/s
# Warmup Iteration  16: 54554622.356 ops/s
# Warmup Iteration  17: 54589116.480 ops/s
# Warmup Iteration  18: 54530019.085 ops/s
# Warmup Iteration  19: 54563729.823 ops/s
# Warmup Iteration  20: 54612275.494 ops/s
# Warmup Iteration  21: 54505342.184 ops/s
# Warmup Iteration  22: 54615209.639 ops/s
# Warmup Iteration  23: 54526605.524 ops/s
# Warmup Iteration  24: 54507324.876 ops/s
# Warmup Iteration  25: 54561004.364 ops/s
# Warmup Iteration  26: 54566222.015 ops/s
# Warmup Iteration  27: 54598663.987 ops/s
# Warmup Iteration  28: 54539081.214 ops/s
# Warmup Iteration  29: 54529602.508 ops/s
# Warmup Iteration  30: 54534556.377 ops/s
Iteration   1: 54683736.668 ops/s
Iteration   2: 54666687.642 ops/s
Iteration   3: 54513922.215 ops/s
Iteration   4: 54484842.624 ops/s
Iteration   5: 54687491.058 ops/s
Iteration   6: 54533186.895 ops/s
Iteration   7: 54756619.592 ops/s
Iteration   8: 54513342.991 ops/s
Iteration   9: 54684528.046 ops/s
Iteration  10: 54522151.715 ops/s
Iteration  11: 54599313.111 ops/s
Iteration  12: 54539080.504 ops/s
Iteration  13: 54409617.275 ops/s
Iteration  14: 54688033.954 ops/s
Iteration  15: 54471431.286 ops/s
Iteration  16: 54582320.034 ops/s
Iteration  17: 54561929.565 ops/s
Iteration  18: 54611418.449 ops/s
Iteration  19: 54487071.592 ops/s
Iteration  20: 54575324.181 ops/s
Iteration  21: 54590620.770 ops/s
Iteration  22: 54469061.526 ops/s
Iteration  23: 54490267.053 ops/s
Iteration  24: 54581510.393 ops/s
Iteration  25: 54526447.279 ops/s
Iteration  26: 54632932.922 ops/s
Iteration  27: 54374894.451 ops/s
Iteration  28: 54715113.243 ops/s
Iteration  29: 54652168.939 ops/s
Iteration  30: 54571396.461 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_min":
  54572548.748 ±(99.9%) 62026.622 ops/s [Average]
  (min, avg, max) = (54374894.451, 54572548.748, 54756619.592), stdev = 92838.535
  CI (99.9%): [54510522.126, 54634575.370] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score       Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_min  thrpt   30  54572548.748 ± 62026.622  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_minBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_minBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10451024.790 ops/s
# Warmup Iteration   2: 21222384.434 ops/s
# Warmup Iteration   3: 18164454.550 ops/s
# Warmup Iteration   4: 21645242.242 ops/s
# Warmup Iteration   5: 21624136.097 ops/s
# Warmup Iteration   6: 21614611.837 ops/s
# Warmup Iteration   7: 21625169.401 ops/s
# Warmup Iteration   8: 21665057.281 ops/s
# Warmup Iteration   9: 21479744.467 ops/s
# Warmup Iteration  10: 21657389.197 ops/s
# Warmup Iteration  11: 21634956.007 ops/s
# Warmup Iteration  12: 21681296.116 ops/s
# Warmup Iteration  13: 21615306.740 ops/s
# Warmup Iteration  14: 21672779.399 ops/s
# Warmup Iteration  15: 21673150.681 ops/s
# Warmup Iteration  16: 21669078.579 ops/s
# Warmup Iteration  17: 21627007.144 ops/s
# Warmup Iteration  18: 21615695.670 ops/s
# Warmup Iteration  19: 21667140.819 ops/s
# Warmup Iteration  20: 21689330.776 ops/s
# Warmup Iteration  21: 21618743.640 ops/s
# Warmup Iteration  22: 21670745.183 ops/s
# Warmup Iteration  23: 21668701.311 ops/s
# Warmup Iteration  24: 21620417.199 ops/s
# Warmup Iteration  25: 21659116.350 ops/s
# Warmup Iteration  26: 21636971.967 ops/s
# Warmup Iteration  27: 21603670.610 ops/s
# Warmup Iteration  28: 21685868.040 ops/s
# Warmup Iteration  29: 21623377.543 ops/s
# Warmup Iteration  30: 21607472.732 ops/s
Iteration   1: 21707880.277 ops/s
Iteration   2: 21635474.553 ops/s
Iteration   3: 21675370.907 ops/s
Iteration   4: 21635301.952 ops/s
Iteration   5: 21715137.316 ops/s
Iteration   6: 21652138.436 ops/s
Iteration   7: 21703545.462 ops/s
Iteration   8: 21553630.768 ops/s
Iteration   9: 21703194.680 ops/s
Iteration  10: 21590977.625 ops/s
Iteration  11: 21653550.604 ops/s
Iteration  12: 21637753.279 ops/s
Iteration  13: 21739600.324 ops/s
Iteration  14: 21711418.327 ops/s
Iteration  15: 21646428.710 ops/s
Iteration  16: 21682334.605 ops/s
Iteration  17: 21626870.616 ops/s
Iteration  18: 21709506.370 ops/s
Iteration  19: 21627988.585 ops/s
Iteration  20: 21650055.543 ops/s
Iteration  21: 21662614.564 ops/s
Iteration  22: 21700770.020 ops/s
Iteration  23: 21625722.449 ops/s
Iteration  24: 21739578.688 ops/s
Iteration  25: 21665707.924 ops/s
Iteration  26: 21692055.991 ops/s
Iteration  27: 21644055.080 ops/s
Iteration  28: 21696634.327 ops/s
Iteration  29: 21632623.931 ops/s
Iteration  30: 21706908.799 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_minBy":
  21667494.357 ±(99.9%) 29003.861 ops/s [Average]
  (min, avg, max) = (21553630.768, 21667494.357, 21739600.324), stdev = 43411.618
  CI (99.9%): [21638490.496, 21696498.219] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_minBy  thrpt   30  21667494.357 ± 29003.861  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_min_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_min_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4781338.942 ops/s
# Warmup Iteration   2: 10745363.646 ops/s
# Warmup Iteration   3: 10779939.642 ops/s
# Warmup Iteration   4: 9080631.581 ops/s
# Warmup Iteration   5: 10799897.417 ops/s
# Warmup Iteration   6: 10797647.495 ops/s
# Warmup Iteration   7: 10800591.393 ops/s
# Warmup Iteration   8: 10792264.339 ops/s
# Warmup Iteration   9: 10800198.137 ops/s
# Warmup Iteration  10: 10813416.476 ops/s
# Warmup Iteration  11: 10801979.744 ops/s
# Warmup Iteration  12: 10801654.856 ops/s
# Warmup Iteration  13: 10796830.113 ops/s
# Warmup Iteration  14: 10799361.339 ops/s
# Warmup Iteration  15: 10801538.244 ops/s
# Warmup Iteration  16: 10797637.569 ops/s
# Warmup Iteration  17: 10801587.755 ops/s
# Warmup Iteration  18: 10828293.977 ops/s
# Warmup Iteration  19: 10821758.262 ops/s
# Warmup Iteration  20: 10812495.067 ops/s
# Warmup Iteration  21: 10815343.088 ops/s
# Warmup Iteration  22: 10809595.966 ops/s
# Warmup Iteration  23: 10832317.066 ops/s
# Warmup Iteration  24: 10834903.652 ops/s
# Warmup Iteration  25: 10814818.169 ops/s
# Warmup Iteration  26: 10827192.781 ops/s
# Warmup Iteration  27: 10833506.425 ops/s
# Warmup Iteration  28: 10815528.842 ops/s
# Warmup Iteration  29: 10817868.279 ops/s
# Warmup Iteration  30: 10788615.704 ops/s
Iteration   1: 10807010.829 ops/s
Iteration   2: 10812718.617 ops/s
Iteration   3: 10810139.169 ops/s
Iteration   4: 10815396.097 ops/s
Iteration   5: 10816470.628 ops/s
Iteration   6: 10826507.385 ops/s
Iteration   7: 10813215.861 ops/s
Iteration   8: 10822519.653 ops/s
Iteration   9: 10848751.425 ops/s
Iteration  10: 10820485.407 ops/s
Iteration  11: 10829299.852 ops/s
Iteration  12: 10827500.698 ops/s
Iteration  13: 10813708.064 ops/s
Iteration  14: 10811258.673 ops/s
Iteration  15: 10826210.693 ops/s
Iteration  16: 10801751.486 ops/s
Iteration  17: 10812088.525 ops/s
Iteration  18: 10798552.357 ops/s
Iteration  19: 10844262.087 ops/s
Iteration  20: 10809823.243 ops/s
Iteration  21: 10792334.592 ops/s
Iteration  22: 10798106.557 ops/s
Iteration  23: 10801610.078 ops/s
Iteration  24: 10813685.153 ops/s
Iteration  25: 10837339.369 ops/s
Iteration  26: 10806104.937 ops/s
Iteration  27: 10817941.273 ops/s
Iteration  28: 10813600.951 ops/s
Iteration  29: 10825027.108 ops/s
Iteration  30: 10827205.846 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_min_null_throws":
  10816687.554 ±(99.9%) 8798.213 ops/s [Average]
  (min, avg, max) = (10792334.592, 10816687.554, 10848751.425), stdev = 13168.752
  CI (99.9%): [10807889.341, 10825485.767] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score      Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_min_null_throws  thrpt   30  10816687.554 ± 8798.213  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_min_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_min_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5547021.421 ops/s
# Warmup Iteration   2: 12316927.270 ops/s
# Warmup Iteration   3: 12543590.503 ops/s
# Warmup Iteration   4: 11189758.179 ops/s
# Warmup Iteration   5: 11842202.725 ops/s
# Warmup Iteration   6: 12528680.443 ops/s
# Warmup Iteration   7: 12527781.732 ops/s
# Warmup Iteration   8: 12520551.900 ops/s
# Warmup Iteration   9: 12520740.390 ops/s
# Warmup Iteration  10: 12520102.614 ops/s
# Warmup Iteration  11: 12512747.837 ops/s
# Warmup Iteration  12: 12533209.020 ops/s
# Warmup Iteration  13: 12522854.058 ops/s
# Warmup Iteration  14: 12541155.167 ops/s
# Warmup Iteration  15: 12511057.065 ops/s
# Warmup Iteration  16: 12486165.803 ops/s
# Warmup Iteration  17: 12522586.836 ops/s
# Warmup Iteration  18: 12517495.778 ops/s
# Warmup Iteration  19: 12524381.104 ops/s
# Warmup Iteration  20: 12500685.344 ops/s
# Warmup Iteration  21: 12512590.984 ops/s
# Warmup Iteration  22: 12529448.299 ops/s
# Warmup Iteration  23: 12509545.844 ops/s
# Warmup Iteration  24: 12496885.805 ops/s
# Warmup Iteration  25: 12529745.419 ops/s
# Warmup Iteration  26: 12517385.374 ops/s
# Warmup Iteration  27: 12538909.118 ops/s
# Warmup Iteration  28: 12506820.749 ops/s
# Warmup Iteration  29: 12509672.883 ops/s
# Warmup Iteration  30: 12527737.596 ops/s
Iteration   1: 12502860.849 ops/s
Iteration   2: 12492411.082 ops/s
Iteration   3: 12518867.879 ops/s
Iteration   4: 12532153.677 ops/s
Iteration   5: 12529006.669 ops/s
Iteration   6: 12527863.761 ops/s
Iteration   7: 12510461.273 ops/s
Iteration   8: 12517320.631 ops/s
Iteration   9: 12528326.307 ops/s
Iteration  10: 12546197.745 ops/s
Iteration  11: 12508636.619 ops/s
Iteration  12: 12543403.313 ops/s
Iteration  13: 12529787.223 ops/s
Iteration  14: 12530499.113 ops/s
Iteration  15: 12543241.356 ops/s
Iteration  16: 12497390.190 ops/s
Iteration  17: 12542559.637 ops/s
Iteration  18: 12522759.952 ops/s
Iteration  19: 12512676.227 ops/s
Iteration  20: 12548568.872 ops/s
Iteration  21: 12520410.003 ops/s
Iteration  22: 12520203.079 ops/s
Iteration  23: 12520517.131 ops/s
Iteration  24: 12498805.639 ops/s
Iteration  25: 12495388.690 ops/s
Iteration  26: 12524986.786 ops/s
Iteration  27: 12520672.276 ops/s
Iteration  28: 12460497.887 ops/s
Iteration  29: 12532223.700 ops/s
Iteration  30: 12550677.306 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_min_null_throws_without_comparator":
  12520979.162 ±(99.9%) 13132.335 ops/s [Average]
  (min, avg, max) = (12460497.887, 12520979.162, 12550677.306), stdev = 19655.863
  CI (99.9%): [12507846.827, 12534111.498] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt         Score       Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_min_null_throws_without_comparator  thrpt   30  12520979.162 ± 13132.335  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_min_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_min_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 28858940.823 ops/s
# Warmup Iteration   2: 55312590.492 ops/s
# Warmup Iteration   3: 52608873.087 ops/s
# Warmup Iteration   4: 53814113.376 ops/s
# Warmup Iteration   5: 57412250.304 ops/s
# Warmup Iteration   6: 57378499.278 ops/s
# Warmup Iteration   7: 57252620.160 ops/s
# Warmup Iteration   8: 57486813.923 ops/s
# Warmup Iteration   9: 57499411.095 ops/s
# Warmup Iteration  10: 57486755.817 ops/s
# Warmup Iteration  11: 57439766.171 ops/s
# Warmup Iteration  12: 57501152.713 ops/s
# Warmup Iteration  13: 57477988.763 ops/s
# Warmup Iteration  14: 57492335.871 ops/s
# Warmup Iteration  15: 57526938.929 ops/s
# Warmup Iteration  16: 57448126.879 ops/s
# Warmup Iteration  17: 57425444.279 ops/s
# Warmup Iteration  18: 57577215.229 ops/s
# Warmup Iteration  19: 57442861.450 ops/s
# Warmup Iteration  20: 57451955.269 ops/s
# Warmup Iteration  21: 57398454.446 ops/s
# Warmup Iteration  22: 57575907.505 ops/s
# Warmup Iteration  23: 57513441.024 ops/s
# Warmup Iteration  24: 57350735.062 ops/s
# Warmup Iteration  25: 57453247.251 ops/s
# Warmup Iteration  26: 57517752.774 ops/s
# Warmup Iteration  27: 57402720.200 ops/s
# Warmup Iteration  28: 57403932.897 ops/s
# Warmup Iteration  29: 57455083.410 ops/s
# Warmup Iteration  30: 57540382.706 ops/s
Iteration   1: 57550035.743 ops/s
Iteration   2: 57397829.093 ops/s
Iteration   3: 57428342.885 ops/s
Iteration   4: 57339686.315 ops/s
Iteration   5: 57540121.982 ops/s
Iteration   6: 57501657.656 ops/s
Iteration   7: 57380989.199 ops/s
Iteration   8: 57471469.129 ops/s
Iteration   9: 57312926.114 ops/s
Iteration  10: 57438377.473 ops/s
Iteration  11: 57463252.037 ops/s
Iteration  12: 57487584.601 ops/s
Iteration  13: 57478362.933 ops/s
Iteration  14: 57599588.398 ops/s
Iteration  15: 57488996.650 ops/s
Iteration  16: 57289526.843 ops/s
Iteration  17: 57059340.048 ops/s
Iteration  18: 57367791.905 ops/s
Iteration  19: 57456332.361 ops/s
Iteration  20: 57400752.197 ops/s
Iteration  21: 57446907.285 ops/s
Iteration  22: 57413622.154 ops/s
Iteration  23: 57355652.863 ops/s
Iteration  24: 57549115.055 ops/s
Iteration  25: 57419206.365 ops/s
Iteration  26: 57456607.590 ops/s
Iteration  27: 57460407.392 ops/s
Iteration  28: 57327718.105 ops/s
Iteration  29: 57468672.031 ops/s
Iteration  30: 57579764.865 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_min_without_comparator":
  57431021.242 ±(99.9%) 69816.868 ops/s [Average]
  (min, avg, max) = (57059340.048, 57431021.242, 57599588.398), stdev = 104498.608
  CI (99.9%): [57361204.375, 57500838.110] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt         Score       Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_min_without_comparator  thrpt   30  57431021.242 ± 69816.868  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9416821.859 ops/s
# Warmup Iteration   2: 19210712.350 ops/s
# Warmup Iteration   3: 19353518.962 ops/s
# Warmup Iteration   4: 16351236.662 ops/s
# Warmup Iteration   5: 19379048.587 ops/s
# Warmup Iteration   6: 19368914.416 ops/s
# Warmup Iteration   7: 19404019.798 ops/s
# Warmup Iteration   8: 19445529.631 ops/s
# Warmup Iteration   9: 19421556.656 ops/s
# Warmup Iteration  10: 19405191.293 ops/s
# Warmup Iteration  11: 19380329.400 ops/s
# Warmup Iteration  12: 19390302.283 ops/s
# Warmup Iteration  13: 19394667.977 ops/s
# Warmup Iteration  14: 19379620.014 ops/s
# Warmup Iteration  15: 19403235.714 ops/s
# Warmup Iteration  16: 19391842.258 ops/s
# Warmup Iteration  17: 19389890.271 ops/s
# Warmup Iteration  18: 19367806.874 ops/s
# Warmup Iteration  19: 19382589.836 ops/s
# Warmup Iteration  20: 19367831.065 ops/s
# Warmup Iteration  21: 19401948.243 ops/s
# Warmup Iteration  22: 19396901.638 ops/s
# Warmup Iteration  23: 19277204.576 ops/s
# Warmup Iteration  24: 19413809.805 ops/s
# Warmup Iteration  25: 19364034.646 ops/s
# Warmup Iteration  26: 19336225.772 ops/s
# Warmup Iteration  27: 19371432.704 ops/s
# Warmup Iteration  28: 19413845.862 ops/s
# Warmup Iteration  29: 19381176.846 ops/s
# Warmup Iteration  30: 19387347.066 ops/s
Iteration   1: 19292077.653 ops/s
Iteration   2: 19391210.605 ops/s
Iteration   3: 19362247.534 ops/s
Iteration   4: 19372066.563 ops/s
Iteration   5: 19404264.707 ops/s
Iteration   6: 19378398.937 ops/s
Iteration   7: 19396724.870 ops/s
Iteration   8: 19338280.771 ops/s
Iteration   9: 19445035.266 ops/s
Iteration  10: 19349359.449 ops/s
Iteration  11: 19365546.256 ops/s
Iteration  12: 19292059.145 ops/s
Iteration  13: 19375430.061 ops/s
Iteration  14: 19438121.503 ops/s
Iteration  15: 19423965.811 ops/s
Iteration  16: 19429267.438 ops/s
Iteration  17: 19408992.047 ops/s
Iteration  18: 19382272.154 ops/s
Iteration  19: 19401730.931 ops/s
Iteration  20: 19417241.521 ops/s
Iteration  21: 19403834.904 ops/s
Iteration  22: 19406762.693 ops/s
Iteration  23: 19386077.468 ops/s
Iteration  24: 19380498.658 ops/s
Iteration  25: 19404380.095 ops/s
Iteration  26: 19353027.872 ops/s
Iteration  27: 19293287.135 ops/s
Iteration  28: 19371200.125 ops/s
Iteration  29: 19415574.017 ops/s
Iteration  30: 19346070.423 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_noneSatisfy":
  19380833.554 ±(99.9%) 26912.934 ops/s [Average]
  (min, avg, max) = (19292059.145, 19380833.554, 19445035.266), stdev = 40282.015
  CI (99.9%): [19353920.620, 19407746.487] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score       Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_noneSatisfy  thrpt   30  19380833.554 ± 26912.934  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_noneSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_noneSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9229643.490 ops/s
# Warmup Iteration   2: 18703293.304 ops/s
# Warmup Iteration   3: 18642270.707 ops/s
# Warmup Iteration   4: 15717498.355 ops/s
# Warmup Iteration   5: 18633484.241 ops/s
# Warmup Iteration   6: 18657570.810 ops/s
# Warmup Iteration   7: 18657993.618 ops/s
# Warmup Iteration   8: 18651721.014 ops/s
# Warmup Iteration   9: 18643330.087 ops/s
# Warmup Iteration  10: 18643753.668 ops/s
# Warmup Iteration  11: 18658793.805 ops/s
# Warmup Iteration  12: 18624201.766 ops/s
# Warmup Iteration  13: 18668039.513 ops/s
# Warmup Iteration  14: 18684101.005 ops/s
# Warmup Iteration  15: 18642852.785 ops/s
# Warmup Iteration  16: 18657154.438 ops/s
# Warmup Iteration  17: 18654838.349 ops/s
# Warmup Iteration  18: 18673540.693 ops/s
# Warmup Iteration  19: 18663451.447 ops/s
# Warmup Iteration  20: 18670632.990 ops/s
# Warmup Iteration  21: 18678334.804 ops/s
# Warmup Iteration  22: 18664422.654 ops/s
# Warmup Iteration  23: 18633064.468 ops/s
# Warmup Iteration  24: 18645258.452 ops/s
# Warmup Iteration  25: 18656598.228 ops/s
# Warmup Iteration  26: 18680089.554 ops/s
# Warmup Iteration  27: 18646617.278 ops/s
# Warmup Iteration  28: 18676190.922 ops/s
# Warmup Iteration  29: 18678122.009 ops/s
# Warmup Iteration  30: 18685978.855 ops/s
Iteration   1: 18693912.139 ops/s
Iteration   2: 18708740.543 ops/s
Iteration   3: 18676455.266 ops/s
Iteration   4: 18667181.159 ops/s
Iteration   5: 18647989.264 ops/s
Iteration   6: 18637930.964 ops/s
Iteration   7: 18713067.066 ops/s
Iteration   8: 18725720.629 ops/s
Iteration   9: 18671464.860 ops/s
Iteration  10: 18645187.950 ops/s
Iteration  11: 18707100.499 ops/s
Iteration  12: 18671077.489 ops/s
Iteration  13: 18682335.383 ops/s
Iteration  14: 18651380.416 ops/s
Iteration  15: 18683016.142 ops/s
Iteration  16: 18633678.246 ops/s
Iteration  17: 18624170.708 ops/s
Iteration  18: 18675536.872 ops/s
Iteration  19: 18671357.796 ops/s
Iteration  20: 18687775.303 ops/s
Iteration  21: 18690161.069 ops/s
Iteration  22: 18641523.200 ops/s
Iteration  23: 18656563.485 ops/s
Iteration  24: 18700715.873 ops/s
Iteration  25: 18651877.512 ops/s
Iteration  26: 18624148.964 ops/s
Iteration  27: 18654339.981 ops/s
Iteration  28: 18639655.495 ops/s
Iteration  29: 18661122.366 ops/s
Iteration  30: 18660756.307 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_noneSatisfyWith":
  18668531.431 ±(99.9%) 18006.226 ops/s [Average]
  (min, avg, max) = (18624148.964, 18668531.431, 18725720.629), stdev = 26950.873
  CI (99.9%): [18650525.206, 18686537.657] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score       Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_noneSatisfyWith  thrpt   30  18668531.431 ± 18006.226  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_parallelStream$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_parallelStream

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12567.101 ops/s
# Warmup Iteration   2: 14221.868 ops/s
# Warmup Iteration   3: 14287.830 ops/s
# Warmup Iteration   4: 14112.324 ops/s
# Warmup Iteration   5: 14345.027 ops/s
# Warmup Iteration   6: 14094.829 ops/s
# Warmup Iteration   7: 16916.154 ops/s
# Warmup Iteration   8: 19360.460 ops/s
# Warmup Iteration   9: 19630.291 ops/s
# Warmup Iteration  10: 19934.928 ops/s
# Warmup Iteration  11: 19062.877 ops/s
# Warmup Iteration  12: 20391.019 ops/s
# Warmup Iteration  13: 19773.455 ops/s
# Warmup Iteration  14: 19886.084 ops/s
# Warmup Iteration  15: 19617.051 ops/s
# Warmup Iteration  16: 19999.429 ops/s
# Warmup Iteration  17: 20273.678 ops/s
# Warmup Iteration  18: 20257.951 ops/s
# Warmup Iteration  19: 20556.389 ops/s
# Warmup Iteration  20: 21083.374 ops/s
# Warmup Iteration  21: 20618.508 ops/s
# Warmup Iteration  22: 19825.012 ops/s
# Warmup Iteration  23: 20452.511 ops/s
# Warmup Iteration  24: 20401.053 ops/s
# Warmup Iteration  25: 19807.896 ops/s
# Warmup Iteration  26: 20211.868 ops/s
# Warmup Iteration  27: 19577.656 ops/s
# Warmup Iteration  28: 19582.936 ops/s
# Warmup Iteration  29: 20169.749 ops/s
# Warmup Iteration  30: 20033.820 ops/s
Iteration   1: 19671.613 ops/s
Iteration   2: 20703.710 ops/s
Iteration   3: 20396.568 ops/s
Iteration   4: 20512.068 ops/s
Iteration   5: 19830.027 ops/s
Iteration   6: 20072.925 ops/s
Iteration   7: 20813.214 ops/s
Iteration   8: 20419.299 ops/s
Iteration   9: 15820.274 ops/s
Iteration  10: 14946.287 ops/s
Iteration  11: 14965.858 ops/s
Iteration  12: 13854.043 ops/s
Iteration  13: 17592.814 ops/s
Iteration  14: 19745.750 ops/s
Iteration  15: 20041.434 ops/s
Iteration  16: 19058.864 ops/s
Iteration  17: 19576.268 ops/s
Iteration  18: 19915.722 ops/s
Iteration  19: 19930.730 ops/s
Iteration  20: 19466.518 ops/s
Iteration  21: 19464.183 ops/s
Iteration  22: 19590.409 ops/s
Iteration  23: 19928.561 ops/s
Iteration  24: 19689.025 ops/s
Iteration  25: 20032.750 ops/s
Iteration  26: 19661.784 ops/s
Iteration  27: 19517.728 ops/s
Iteration  28: 19188.988 ops/s
Iteration  29: 19380.640 ops/s
Iteration  30: 20042.742 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_parallelStream":
  19127.693 ±(99.9%) 1205.176 ops/s [Average]
  (min, avg, max) = (13854.043, 19127.693, 20813.214), stdev = 1803.850
  CI (99.9%): [17922.518, 20332.869] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt      Score      Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_parallelStream  thrpt   30  19127.693 ± 1205.176  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_partition$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_partition

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1719536.348 ops/s
# Warmup Iteration   2: 2893930.149 ops/s
# Warmup Iteration   3: 3203586.169 ops/s
# Warmup Iteration   4: 3210066.172 ops/s
# Warmup Iteration   5: 3214182.238 ops/s
# Warmup Iteration   6: 2689695.889 ops/s
# Warmup Iteration   7: 3216307.800 ops/s
# Warmup Iteration   8: 3212902.499 ops/s
# Warmup Iteration   9: 3220082.149 ops/s
# Warmup Iteration  10: 3219512.437 ops/s
# Warmup Iteration  11: 3209996.055 ops/s
# Warmup Iteration  12: 3221071.447 ops/s
# Warmup Iteration  13: 3212049.533 ops/s
# Warmup Iteration  14: 3220343.584 ops/s
# Warmup Iteration  15: 3215932.020 ops/s
# Warmup Iteration  16: 3222927.236 ops/s
# Warmup Iteration  17: 3224418.374 ops/s
# Warmup Iteration  18: 3221853.150 ops/s
# Warmup Iteration  19: 3226585.997 ops/s
# Warmup Iteration  20: 3225027.618 ops/s
# Warmup Iteration  21: 3224783.392 ops/s
# Warmup Iteration  22: 3224189.810 ops/s
# Warmup Iteration  23: 3217914.693 ops/s
# Warmup Iteration  24: 3223010.927 ops/s
# Warmup Iteration  25: 3225902.339 ops/s
# Warmup Iteration  26: 3223523.701 ops/s
# Warmup Iteration  27: 3224730.737 ops/s
# Warmup Iteration  28: 3218140.640 ops/s
# Warmup Iteration  29: 3224772.963 ops/s
# Warmup Iteration  30: 3225523.804 ops/s
Iteration   1: 3220841.898 ops/s
Iteration   2: 3223927.800 ops/s
Iteration   3: 3225883.914 ops/s
Iteration   4: 3223356.842 ops/s
Iteration   5: 3217089.673 ops/s
Iteration   6: 3228089.834 ops/s
Iteration   7: 3222763.247 ops/s
Iteration   8: 3227843.908 ops/s
Iteration   9: 3219055.006 ops/s
Iteration  10: 3225296.885 ops/s
Iteration  11: 3221980.534 ops/s
Iteration  12: 3218360.040 ops/s
Iteration  13: 3225014.986 ops/s
Iteration  14: 3213207.416 ops/s
Iteration  15: 3221937.967 ops/s
Iteration  16: 3224832.524 ops/s
Iteration  17: 3212886.738 ops/s
Iteration  18: 3213718.305 ops/s
Iteration  19: 3228457.892 ops/s
Iteration  20: 3221932.134 ops/s
Iteration  21: 3224958.558 ops/s
Iteration  22: 3222761.135 ops/s
Iteration  23: 3220755.621 ops/s
Iteration  24: 3225910.815 ops/s
Iteration  25: 3217396.969 ops/s
Iteration  26: 3228354.861 ops/s
Iteration  27: 3217269.617 ops/s
Iteration  28: 3219388.208 ops/s
Iteration  29: 3216525.716 ops/s
Iteration  30: 3219645.554 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_partition":
  3221648.153 ±(99.9%) 3006.440 ops/s [Average]
  (min, avg, max) = (3212886.738, 3221648.153, 3228457.892), stdev = 4499.898
  CI (99.9%): [3218641.714, 3224654.593] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_partition  thrpt   30  3221648.153 ± 3006.440  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_partitionWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_partitionWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2175211.771 ops/s
# Warmup Iteration   2: 4862020.497 ops/s
# Warmup Iteration   3: 4824721.227 ops/s
# Warmup Iteration   4: 4463800.617 ops/s
# Warmup Iteration   5: 4404400.601 ops/s
# Warmup Iteration   6: 4837081.039 ops/s
# Warmup Iteration   7: 4825103.826 ops/s
# Warmup Iteration   8: 4827550.754 ops/s
# Warmup Iteration   9: 4825398.782 ops/s
# Warmup Iteration  10: 4831973.894 ops/s
# Warmup Iteration  11: 4823707.681 ops/s
# Warmup Iteration  12: 4826307.001 ops/s
# Warmup Iteration  13: 4839386.889 ops/s
# Warmup Iteration  14: 4824318.020 ops/s
# Warmup Iteration  15: 4815285.529 ops/s
# Warmup Iteration  16: 4835906.007 ops/s
# Warmup Iteration  17: 4828638.081 ops/s
# Warmup Iteration  18: 4833614.925 ops/s
# Warmup Iteration  19: 4832134.934 ops/s
# Warmup Iteration  20: 4830895.131 ops/s
# Warmup Iteration  21: 4826582.942 ops/s
# Warmup Iteration  22: 4830881.366 ops/s
# Warmup Iteration  23: 4827098.446 ops/s
# Warmup Iteration  24: 4817945.491 ops/s
# Warmup Iteration  25: 4836120.015 ops/s
# Warmup Iteration  26: 4828631.599 ops/s
# Warmup Iteration  27: 4836743.423 ops/s
# Warmup Iteration  28: 4834951.131 ops/s
# Warmup Iteration  29: 4837238.124 ops/s
# Warmup Iteration  30: 4827283.131 ops/s
Iteration   1: 4820397.391 ops/s
Iteration   2: 4830670.639 ops/s
Iteration   3: 4841738.035 ops/s
Iteration   4: 4835256.607 ops/s
Iteration   5: 4822297.436 ops/s
Iteration   6: 4837700.105 ops/s
Iteration   7: 4826702.952 ops/s
Iteration   8: 4851180.156 ops/s
Iteration   9: 4827168.523 ops/s
Iteration  10: 4828142.846 ops/s
Iteration  11: 4833117.051 ops/s
Iteration  12: 4846410.833 ops/s
Iteration  13: 4830959.084 ops/s
Iteration  14: 4814140.554 ops/s
Iteration  15: 4831395.790 ops/s
Iteration  16: 4820186.459 ops/s
Iteration  17: 4834720.874 ops/s
Iteration  18: 4837139.492 ops/s
Iteration  19: 4830115.171 ops/s
Iteration  20: 4831126.159 ops/s
Iteration  21: 4832254.582 ops/s
Iteration  22: 4841445.376 ops/s
Iteration  23: 4827405.355 ops/s
Iteration  24: 4839105.063 ops/s
Iteration  25: 4837180.497 ops/s
Iteration  26: 4838548.063 ops/s
Iteration  27: 4819009.263 ops/s
Iteration  28: 4832644.764 ops/s
Iteration  29: 4835998.131 ops/s
Iteration  30: 4818972.710 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_partitionWhile":
  4831770.999 ±(99.9%) 5676.611 ops/s [Average]
  (min, avg, max) = (4814140.554, 4831770.999, 4851180.156), stdev = 8496.485
  CI (99.9%): [4826094.387, 4837447.610] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_partitionWhile  thrpt   30  4831770.999 ± 5676.611  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_partitionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_partitionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1097019.146 ops/s
# Warmup Iteration   2: 1788079.493 ops/s
# Warmup Iteration   3: 1998873.708 ops/s
# Warmup Iteration   4: 2006732.761 ops/s
# Warmup Iteration   5: 2006907.679 ops/s
# Warmup Iteration   6: 1682265.270 ops/s
# Warmup Iteration   7: 2010284.280 ops/s
# Warmup Iteration   8: 2010812.957 ops/s
# Warmup Iteration   9: 2009931.519 ops/s
# Warmup Iteration  10: 2009233.888 ops/s
# Warmup Iteration  11: 2009890.627 ops/s
# Warmup Iteration  12: 2008996.449 ops/s
# Warmup Iteration  13: 2012453.939 ops/s
# Warmup Iteration  14: 2009951.315 ops/s
# Warmup Iteration  15: 2009182.758 ops/s
# Warmup Iteration  16: 2009682.482 ops/s
# Warmup Iteration  17: 2007230.765 ops/s
# Warmup Iteration  18: 2009900.880 ops/s
# Warmup Iteration  19: 2006187.631 ops/s
# Warmup Iteration  20: 2007550.024 ops/s
# Warmup Iteration  21: 2011189.571 ops/s
# Warmup Iteration  22: 2007918.731 ops/s
# Warmup Iteration  23: 2011131.993 ops/s
# Warmup Iteration  24: 2008135.039 ops/s
# Warmup Iteration  25: 2007899.166 ops/s
# Warmup Iteration  26: 2005900.067 ops/s
# Warmup Iteration  27: 2010832.292 ops/s
# Warmup Iteration  28: 2010372.241 ops/s
# Warmup Iteration  29: 2009773.774 ops/s
# Warmup Iteration  30: 2008812.787 ops/s
Iteration   1: 2010691.452 ops/s
Iteration   2: 2009513.316 ops/s
Iteration   3: 2012170.813 ops/s
Iteration   4: 2009256.612 ops/s
Iteration   5: 2013684.229 ops/s
Iteration   6: 2006008.533 ops/s
Iteration   7: 2009429.448 ops/s
Iteration   8: 2010553.627 ops/s
Iteration   9: 2011207.010 ops/s
Iteration  10: 1995410.519 ops/s
Iteration  11: 2012361.286 ops/s
Iteration  12: 2008931.337 ops/s
Iteration  13: 2008595.360 ops/s
Iteration  14: 2013166.824 ops/s
Iteration  15: 2008527.009 ops/s
Iteration  16: 2014002.267 ops/s
Iteration  17: 2007293.590 ops/s
Iteration  18: 2011399.403 ops/s
Iteration  19: 2003393.363 ops/s
Iteration  20: 2006850.673 ops/s
Iteration  21: 2007595.796 ops/s
Iteration  22: 2010105.794 ops/s
Iteration  23: 2007196.937 ops/s
Iteration  24: 2011243.288 ops/s
Iteration  25: 2006310.856 ops/s
Iteration  26: 2011858.744 ops/s
Iteration  27: 2008692.449 ops/s
Iteration  28: 2011948.464 ops/s
Iteration  29: 2008367.999 ops/s
Iteration  30: 2012356.949 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_partitionWith":
  2009270.798 ±(99.9%) 2419.166 ops/s [Average]
  (min, avg, max) = (1995410.519, 2009270.798, 2014002.267), stdev = 3620.894
  CI (99.9%): [2006851.632, 2011689.964] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_partitionWith  thrpt   30  2009270.798 ± 2419.166  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3851598.624 ops/s
# Warmup Iteration   2: 8875970.162 ops/s
# Warmup Iteration   3: 8787471.426 ops/s
# Warmup Iteration   4: 7464255.169 ops/s
# Warmup Iteration   5: 8920876.257 ops/s
# Warmup Iteration   6: 8912381.212 ops/s
# Warmup Iteration   7: 8926914.985 ops/s
# Warmup Iteration   8: 8929155.685 ops/s
# Warmup Iteration   9: 8923163.494 ops/s
# Warmup Iteration  10: 8920248.300 ops/s
# Warmup Iteration  11: 8905181.003 ops/s
# Warmup Iteration  12: 8932263.305 ops/s
# Warmup Iteration  13: 8914617.314 ops/s
# Warmup Iteration  14: 8905643.954 ops/s
# Warmup Iteration  15: 8925166.360 ops/s
# Warmup Iteration  16: 8901645.103 ops/s
# Warmup Iteration  17: 8902856.684 ops/s
# Warmup Iteration  18: 8895239.576 ops/s
# Warmup Iteration  19: 8885189.547 ops/s
# Warmup Iteration  20: 8875395.985 ops/s
# Warmup Iteration  21: 8892914.006 ops/s
# Warmup Iteration  22: 8917573.311 ops/s
# Warmup Iteration  23: 8911712.483 ops/s
# Warmup Iteration  24: 8930412.087 ops/s
# Warmup Iteration  25: 8917536.944 ops/s
# Warmup Iteration  26: 8921180.469 ops/s
# Warmup Iteration  27: 8905277.869 ops/s
# Warmup Iteration  28: 8912469.597 ops/s
# Warmup Iteration  29: 8924216.435 ops/s
# Warmup Iteration  30: 8922921.734 ops/s
Iteration   1: 8901533.756 ops/s
Iteration   2: 8915839.308 ops/s
Iteration   3: 8923579.934 ops/s
Iteration   4: 8890719.248 ops/s
Iteration   5: 8921969.368 ops/s
Iteration   6: 8916346.659 ops/s
Iteration   7: 8899610.645 ops/s
Iteration   8: 8895803.042 ops/s
Iteration   9: 8914711.921 ops/s
Iteration  10: 8905828.719 ops/s
Iteration  11: 8928895.413 ops/s
Iteration  12: 8918421.325 ops/s
Iteration  13: 8897550.830 ops/s
Iteration  14: 8924889.108 ops/s
Iteration  15: 8938040.508 ops/s
Iteration  16: 8931163.648 ops/s
Iteration  17: 8870071.854 ops/s
Iteration  18: 8889097.893 ops/s
Iteration  19: 8863369.540 ops/s
Iteration  20: 8917931.099 ops/s
Iteration  21: 8894693.230 ops/s
Iteration  22: 8919183.763 ops/s
Iteration  23: 8919211.385 ops/s
Iteration  24: 8904097.356 ops/s
Iteration  25: 8900623.855 ops/s
Iteration  26: 8893136.007 ops/s
Iteration  27: 8882603.219 ops/s
Iteration  28: 8898708.976 ops/s
Iteration  29: 8917149.487 ops/s
Iteration  30: 8932444.272 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_reject":
  8907574.179 ±(99.9%) 12136.148 ops/s [Average]
  (min, avg, max) = (8863369.540, 8907574.179, 8938040.508), stdev = 18164.816
  CI (99.9%): [8895438.031, 8919710.327] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_reject  thrpt   30  8907574.179 ± 12136.148  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_rejectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_rejectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2464851.029 ops/s
# Warmup Iteration   2: 5449988.663 ops/s
# Warmup Iteration   3: 5648506.004 ops/s
# Warmup Iteration   4: 5110771.567 ops/s
# Warmup Iteration   5: 5291149.868 ops/s
# Warmup Iteration   6: 5645714.074 ops/s
# Warmup Iteration   7: 5659798.687 ops/s
# Warmup Iteration   8: 5658059.329 ops/s
# Warmup Iteration   9: 5659220.728 ops/s
# Warmup Iteration  10: 5655270.429 ops/s
# Warmup Iteration  11: 5638734.773 ops/s
# Warmup Iteration  12: 5646578.911 ops/s
# Warmup Iteration  13: 5654596.254 ops/s
# Warmup Iteration  14: 5660690.504 ops/s
# Warmup Iteration  15: 5656383.606 ops/s
# Warmup Iteration  16: 5655239.512 ops/s
# Warmup Iteration  17: 5652302.740 ops/s
# Warmup Iteration  18: 5581373.168 ops/s
# Warmup Iteration  19: 5658453.823 ops/s
# Warmup Iteration  20: 5656476.157 ops/s
# Warmup Iteration  21: 5658618.339 ops/s
# Warmup Iteration  22: 5663550.088 ops/s
# Warmup Iteration  23: 5659451.286 ops/s
# Warmup Iteration  24: 5664941.038 ops/s
# Warmup Iteration  25: 5670434.919 ops/s
# Warmup Iteration  26: 5660250.863 ops/s
# Warmup Iteration  27: 5663384.628 ops/s
# Warmup Iteration  28: 5660960.160 ops/s
# Warmup Iteration  29: 5652176.943 ops/s
# Warmup Iteration  30: 5663002.372 ops/s
Iteration   1: 5657981.697 ops/s
Iteration   2: 5649388.251 ops/s
Iteration   3: 5647962.947 ops/s
Iteration   4: 5668425.335 ops/s
Iteration   5: 5691946.774 ops/s
Iteration   6: 5653326.996 ops/s
Iteration   7: 5649065.815 ops/s
Iteration   8: 5659174.676 ops/s
Iteration   9: 5663380.555 ops/s
Iteration  10: 5668261.499 ops/s
Iteration  11: 5667130.732 ops/s
Iteration  12: 5667089.287 ops/s
Iteration  13: 5664222.367 ops/s
Iteration  14: 5669258.024 ops/s
Iteration  15: 5667392.002 ops/s
Iteration  16: 5651035.813 ops/s
Iteration  17: 5653636.782 ops/s
Iteration  18: 5660333.446 ops/s
Iteration  19: 5660844.005 ops/s
Iteration  20: 5653895.990 ops/s
Iteration  21: 5640487.110 ops/s
Iteration  22: 5652993.957 ops/s
Iteration  23: 5664959.008 ops/s
Iteration  24: 5668384.668 ops/s
Iteration  25: 5672397.901 ops/s
Iteration  26: 5673156.942 ops/s
Iteration  27: 5658458.008 ops/s
Iteration  28: 5654093.807 ops/s
Iteration  29: 5662469.381 ops/s
Iteration  30: 5669014.153 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_rejectWith":
  5661338.931 ±(99.9%) 6724.983 ops/s [Average]
  (min, avg, max) = (5640487.110, 5661338.931, 5691946.774), stdev = 10065.639
  CI (99.9%): [5654613.947, 5668063.914] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_rejectWith  thrpt   30  5661338.931 ± 6724.983  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_rejectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_rejectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3608252.541 ops/s
# Warmup Iteration   2: 9892690.457 ops/s
# Warmup Iteration   3: 9974421.825 ops/s
# Warmup Iteration   4: 8364743.512 ops/s
# Warmup Iteration   5: 9988297.271 ops/s
# Warmup Iteration   6: 9971447.229 ops/s
# Warmup Iteration   7: 9971698.480 ops/s
# Warmup Iteration   8: 9974930.907 ops/s
# Warmup Iteration   9: 9954215.483 ops/s
# Warmup Iteration  10: 9944751.736 ops/s
# Warmup Iteration  11: 9980202.793 ops/s
# Warmup Iteration  12: 9961648.106 ops/s
# Warmup Iteration  13: 9965937.107 ops/s
# Warmup Iteration  14: 9982378.411 ops/s
# Warmup Iteration  15: 9968746.567 ops/s
# Warmup Iteration  16: 9971814.728 ops/s
# Warmup Iteration  17: 10111864.737 ops/s
# Warmup Iteration  18: 10100681.405 ops/s
# Warmup Iteration  19: 10096792.260 ops/s
# Warmup Iteration  20: 10108304.281 ops/s
# Warmup Iteration  21: 10102620.020 ops/s
# Warmup Iteration  22: 10114516.462 ops/s
# Warmup Iteration  23: 10104832.456 ops/s
# Warmup Iteration  24: 10106953.695 ops/s
# Warmup Iteration  25: 10096376.198 ops/s
# Warmup Iteration  26: 10101382.205 ops/s
# Warmup Iteration  27: 10116827.911 ops/s
# Warmup Iteration  28: 10096823.662 ops/s
# Warmup Iteration  29: 10107131.496 ops/s
# Warmup Iteration  30: 10110811.273 ops/s
Iteration   1: 10107312.061 ops/s
Iteration   2: 10092514.709 ops/s
Iteration   3: 10101933.179 ops/s
Iteration   4: 10095525.314 ops/s
Iteration   5: 10086880.513 ops/s
Iteration   6: 10142048.935 ops/s
Iteration   7: 10111751.355 ops/s
Iteration   8: 10132077.681 ops/s
Iteration   9: 10099401.221 ops/s
Iteration  10: 10133905.896 ops/s
Iteration  11: 10114459.203 ops/s
Iteration  12: 10101990.858 ops/s
Iteration  13: 10138558.531 ops/s
Iteration  14: 10107800.806 ops/s
Iteration  15: 10099834.644 ops/s
Iteration  16: 10120712.994 ops/s
Iteration  17: 10102322.545 ops/s
Iteration  18: 10126235.769 ops/s
Iteration  19: 10124600.486 ops/s
Iteration  20: 10141974.013 ops/s
Iteration  21: 10122758.832 ops/s
Iteration  22: 10133807.395 ops/s
Iteration  23: 10109507.566 ops/s
Iteration  24: 10129334.369 ops/s
Iteration  25: 10058615.438 ops/s
Iteration  26: 10127955.175 ops/s
Iteration  27: 10096435.156 ops/s
Iteration  28: 10111603.294 ops/s
Iteration  29: 10120340.563 ops/s
Iteration  30: 10134244.864 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_rejectWithIndex":
  10114214.779 ±(99.9%) 12663.743 ops/s [Average]
  (min, avg, max) = (10058615.438, 10114214.779, 10142048.935), stdev = 18954.496
  CI (99.9%): [10101551.036, 10126878.522] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score       Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_rejectWithIndex  thrpt   30  10114214.779 ± 12663.743  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_rejectWithIndexWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_rejectWithIndexWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2893446.356 ops/s
# Warmup Iteration   2: 7104915.860 ops/s
# Warmup Iteration   3: 6217053.251 ops/s
# Warmup Iteration   4: 6624466.075 ops/s
# Warmup Iteration   5: 6994424.663 ops/s
# Warmup Iteration   6: 7024259.021 ops/s
# Warmup Iteration   7: 7007240.868 ops/s
# Warmup Iteration   8: 7016760.627 ops/s
# Warmup Iteration   9: 7026066.471 ops/s
# Warmup Iteration  10: 7006066.103 ops/s
# Warmup Iteration  11: 7013750.034 ops/s
# Warmup Iteration  12: 6976053.290 ops/s
# Warmup Iteration  13: 7000380.804 ops/s
# Warmup Iteration  14: 7005292.812 ops/s
# Warmup Iteration  15: 7015186.959 ops/s
# Warmup Iteration  16: 7003524.206 ops/s
# Warmup Iteration  17: 6999689.991 ops/s
# Warmup Iteration  18: 7001858.560 ops/s
# Warmup Iteration  19: 7021410.500 ops/s
# Warmup Iteration  20: 7018563.970 ops/s
# Warmup Iteration  21: 7026990.380 ops/s
# Warmup Iteration  22: 7013822.850 ops/s
# Warmup Iteration  23: 7004738.285 ops/s
# Warmup Iteration  24: 7013177.930 ops/s
# Warmup Iteration  25: 7037028.546 ops/s
# Warmup Iteration  26: 7003660.966 ops/s
# Warmup Iteration  27: 7017475.454 ops/s
# Warmup Iteration  28: 7024627.330 ops/s
# Warmup Iteration  29: 7008780.574 ops/s
# Warmup Iteration  30: 7024366.022 ops/s
Iteration   1: 6984082.910 ops/s
Iteration   2: 7020741.513 ops/s
Iteration   3: 7013934.148 ops/s
Iteration   4: 7033206.008 ops/s
Iteration   5: 6999481.375 ops/s
Iteration   6: 7010909.060 ops/s
Iteration   7: 7004263.363 ops/s
Iteration   8: 6992047.817 ops/s
Iteration   9: 7022428.820 ops/s
Iteration  10: 7027092.100 ops/s
Iteration  11: 7017572.377 ops/s
Iteration  12: 7023308.748 ops/s
Iteration  13: 7043283.381 ops/s
Iteration  14: 7007897.163 ops/s
Iteration  15: 7021904.366 ops/s
Iteration  16: 7040801.643 ops/s
Iteration  17: 7013163.257 ops/s
Iteration  18: 7038766.633 ops/s
Iteration  19: 7026395.515 ops/s
Iteration  20: 7017632.579 ops/s
Iteration  21: 7013156.468 ops/s
Iteration  22: 7034542.286 ops/s
Iteration  23: 7014820.486 ops/s
Iteration  24: 7003607.740 ops/s
Iteration  25: 7022533.642 ops/s
Iteration  26: 7008183.907 ops/s
Iteration  27: 7013615.592 ops/s
Iteration  28: 7026816.609 ops/s
Iteration  29: 7012462.501 ops/s
Iteration  30: 7004116.058 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_rejectWithIndexWithTarget":
  7017092.269 ±(99.9%) 9217.977 ops/s [Average]
  (min, avg, max) = (6984082.910, 7017092.269, 7043283.381), stdev = 13797.035
  CI (99.9%): [7007874.292, 7026310.245] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score      Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_rejectWithIndexWithTarget  thrpt   30  7017092.269 ± 9217.977  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_rejectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_rejectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3321388.040 ops/s
# Warmup Iteration   2: 7411353.479 ops/s
# Warmup Iteration   3: 7441766.588 ops/s
# Warmup Iteration   4: 6284868.267 ops/s
# Warmup Iteration   5: 7446050.647 ops/s
# Warmup Iteration   6: 7448918.229 ops/s
# Warmup Iteration   7: 7453249.907 ops/s
# Warmup Iteration   8: 7453756.210 ops/s
# Warmup Iteration   9: 7447293.890 ops/s
# Warmup Iteration  10: 7447324.552 ops/s
# Warmup Iteration  11: 7464785.509 ops/s
# Warmup Iteration  12: 7446135.439 ops/s
# Warmup Iteration  13: 7462397.871 ops/s
# Warmup Iteration  14: 7447650.849 ops/s
# Warmup Iteration  15: 7450226.373 ops/s
# Warmup Iteration  16: 7440471.959 ops/s
# Warmup Iteration  17: 7458372.152 ops/s
# Warmup Iteration  18: 7462345.185 ops/s
# Warmup Iteration  19: 7467010.630 ops/s
# Warmup Iteration  20: 7458304.370 ops/s
# Warmup Iteration  21: 7459613.030 ops/s
# Warmup Iteration  22: 7451797.759 ops/s
# Warmup Iteration  23: 7445460.755 ops/s
# Warmup Iteration  24: 7462404.019 ops/s
# Warmup Iteration  25: 7447333.607 ops/s
# Warmup Iteration  26: 7448457.910 ops/s
# Warmup Iteration  27: 7463951.484 ops/s
# Warmup Iteration  28: 7452772.079 ops/s
# Warmup Iteration  29: 7448548.426 ops/s
# Warmup Iteration  30: 7450124.735 ops/s
Iteration   1: 7422731.965 ops/s
Iteration   2: 7454484.472 ops/s
Iteration   3: 7452001.726 ops/s
Iteration   4: 7459776.777 ops/s
Iteration   5: 7443566.545 ops/s
Iteration   6: 7441707.776 ops/s
Iteration   7: 7450401.785 ops/s
Iteration   8: 7457763.926 ops/s
Iteration   9: 7472747.992 ops/s
Iteration  10: 7479750.254 ops/s
Iteration  11: 7453432.908 ops/s
Iteration  12: 7457865.296 ops/s
Iteration  13: 7463693.000 ops/s
Iteration  14: 7454632.317 ops/s
Iteration  15: 7445188.470 ops/s
Iteration  16: 7457426.776 ops/s
Iteration  17: 7435178.973 ops/s
Iteration  18: 7434862.432 ops/s
Iteration  19: 7466113.458 ops/s
Iteration  20: 7455423.331 ops/s
Iteration  21: 7452090.831 ops/s
Iteration  22: 7450494.548 ops/s
Iteration  23: 7455551.721 ops/s
Iteration  24: 7454827.880 ops/s
Iteration  25: 7467021.580 ops/s
Iteration  26: 7464392.711 ops/s
Iteration  27: 7460431.289 ops/s
Iteration  28: 7456926.943 ops/s
Iteration  29: 7442026.299 ops/s
Iteration  30: 7449219.711 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_rejectWith_target":
  7453724.456 ±(99.9%) 7743.544 ops/s [Average]
  (min, avg, max) = (7422731.965, 7453724.456, 7479750.254), stdev = 11590.173
  CI (99.9%): [7445980.913, 7461468.000] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_rejectWith_target  thrpt   30  7453724.456 ± 7743.544  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_reject_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_reject_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6358933.998 ops/s
# Warmup Iteration   2: 13621908.881 ops/s
# Warmup Iteration   3: 11557059.877 ops/s
# Warmup Iteration   4: 13730636.119 ops/s
# Warmup Iteration   5: 13731883.692 ops/s
# Warmup Iteration   6: 13716954.434 ops/s
# Warmup Iteration   7: 13727099.740 ops/s
# Warmup Iteration   8: 13707521.551 ops/s
# Warmup Iteration   9: 13723746.469 ops/s
# Warmup Iteration  10: 13758317.300 ops/s
# Warmup Iteration  11: 13754495.093 ops/s
# Warmup Iteration  12: 13728064.684 ops/s
# Warmup Iteration  13: 13762629.185 ops/s
# Warmup Iteration  14: 13753100.944 ops/s
# Warmup Iteration  15: 13726228.015 ops/s
# Warmup Iteration  16: 13755907.050 ops/s
# Warmup Iteration  17: 13748682.048 ops/s
# Warmup Iteration  18: 13745248.425 ops/s
# Warmup Iteration  19: 13753648.077 ops/s
# Warmup Iteration  20: 13726420.252 ops/s
# Warmup Iteration  21: 13755165.175 ops/s
# Warmup Iteration  22: 13726559.804 ops/s
# Warmup Iteration  23: 13769558.907 ops/s
# Warmup Iteration  24: 13744130.187 ops/s
# Warmup Iteration  25: 13737982.257 ops/s
# Warmup Iteration  26: 13762747.518 ops/s
# Warmup Iteration  27: 13747665.852 ops/s
# Warmup Iteration  28: 13749410.869 ops/s
# Warmup Iteration  29: 13749236.962 ops/s
# Warmup Iteration  30: 13769264.784 ops/s
Iteration   1: 13674700.917 ops/s
Iteration   2: 13725284.951 ops/s
Iteration   3: 13762188.744 ops/s
Iteration   4: 13673750.588 ops/s
Iteration   5: 13720470.855 ops/s
Iteration   6: 13749871.048 ops/s
Iteration   7: 13757141.577 ops/s
Iteration   8: 13710102.411 ops/s
Iteration   9: 13721723.152 ops/s
Iteration  10: 13715334.193 ops/s
Iteration  11: 13773367.123 ops/s
Iteration  12: 13728956.393 ops/s
Iteration  13: 13772714.010 ops/s
Iteration  14: 13720270.072 ops/s
Iteration  15: 13722814.320 ops/s
Iteration  16: 13730925.618 ops/s
Iteration  17: 13756469.671 ops/s
Iteration  18: 13750577.235 ops/s
Iteration  19: 13719083.292 ops/s
Iteration  20: 13766124.875 ops/s
Iteration  21: 13753061.875 ops/s
Iteration  22: 13724751.675 ops/s
Iteration  23: 13723856.953 ops/s
Iteration  24: 13733934.097 ops/s
Iteration  25: 13758012.222 ops/s
Iteration  26: 13750419.985 ops/s
Iteration  27: 13733714.265 ops/s
Iteration  28: 13791336.445 ops/s
Iteration  29: 13775472.490 ops/s
Iteration  30: 13777928.159 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_reject_target":
  13739145.307 ±(99.9%) 18827.659 ops/s [Average]
  (min, avg, max) = (13673750.588, 13739145.307, 13791336.445), stdev = 28180.355
  CI (99.9%): [13720317.648, 13757972.966] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score       Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_reject_target  thrpt   30  13739145.307 ± 18827.659  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 749803.752 ops/s
# Warmup Iteration   2: 790770.808 ops/s
# Warmup Iteration   3: 975165.339 ops/s
# Warmup Iteration   4: 961678.924 ops/s
# Warmup Iteration   5: 962553.796 ops/s
# Warmup Iteration   6: 964662.167 ops/s
# Warmup Iteration   7: 965470.023 ops/s
# Warmup Iteration   8: 964958.922 ops/s
# Warmup Iteration   9: 966486.907 ops/s
# Warmup Iteration  10: 963346.121 ops/s
# Warmup Iteration  11: 965643.732 ops/s
# Warmup Iteration  12: 832035.001 ops/s
# Warmup Iteration  13: 966517.406 ops/s
# Warmup Iteration  14: 965176.603 ops/s
# Warmup Iteration  15: 964331.784 ops/s
# Warmup Iteration  16: 963382.021 ops/s
# Warmup Iteration  17: 1022390.498 ops/s
# Warmup Iteration  18: 1019182.762 ops/s
# Warmup Iteration  19: 1023640.999 ops/s
# Warmup Iteration  20: 1022202.704 ops/s
# Warmup Iteration  21: 1024972.670 ops/s
# Warmup Iteration  22: 1019991.160 ops/s
# Warmup Iteration  23: 1021876.430 ops/s
# Warmup Iteration  24: 1024649.063 ops/s
# Warmup Iteration  25: 1022822.191 ops/s
# Warmup Iteration  26: 1021988.153 ops/s
# Warmup Iteration  27: 1021338.681 ops/s
# Warmup Iteration  28: 1019790.264 ops/s
# Warmup Iteration  29: 1023468.186 ops/s
# Warmup Iteration  30: 1021756.175 ops/s
Iteration   1: 1021035.437 ops/s
Iteration   2: 1019166.677 ops/s
Iteration   3: 1022360.961 ops/s
Iteration   4: 1020652.819 ops/s
Iteration   5: 1014607.223 ops/s
Iteration   6: 1017158.662 ops/s
Iteration   7: 1020887.491 ops/s
Iteration   8: 1022736.402 ops/s
Iteration   9: 1022204.816 ops/s
Iteration  10: 1020481.978 ops/s
Iteration  11: 1024265.768 ops/s
Iteration  12: 1024616.251 ops/s
Iteration  13: 1022196.838 ops/s
Iteration  14: 1024996.813 ops/s
Iteration  15: 1016450.784 ops/s
Iteration  16: 1021492.191 ops/s
Iteration  17: 1024826.191 ops/s
Iteration  18: 1025479.857 ops/s
Iteration  19: 1022758.548 ops/s
Iteration  20: 1022236.910 ops/s
Iteration  21: 1022749.189 ops/s
Iteration  22: 1021264.544 ops/s
Iteration  23: 1017727.698 ops/s
Iteration  24: 1023616.321 ops/s
Iteration  25: 1015504.312 ops/s
Iteration  26: 1020108.984 ops/s
Iteration  27: 1025280.582 ops/s
Iteration  28: 1023797.670 ops/s
Iteration  29: 1020846.486 ops/s
Iteration  30: 1016443.105 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_remove":
  1021265.050 ±(99.9%) 2014.433 ops/s [Average]
  (min, avg, max) = (1014607.223, 1021265.050, 1025479.857), stdev = 3015.108
  CI (99.9%): [1019250.617, 1023279.483] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_remove  thrpt   30  1021265.050 ± 2014.433  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 738290.463 ops/s
# Warmup Iteration   2: 782547.674 ops/s
# Warmup Iteration   3: 989143.640 ops/s
# Warmup Iteration   4: 980499.362 ops/s
# Warmup Iteration   5: 985341.228 ops/s
# Warmup Iteration   6: 985705.426 ops/s
# Warmup Iteration   7: 980310.602 ops/s
# Warmup Iteration   8: 981525.070 ops/s
# Warmup Iteration   9: 987026.285 ops/s
# Warmup Iteration  10: 984708.477 ops/s
# Warmup Iteration  11: 970596.692 ops/s
# Warmup Iteration  12: 853825.224 ops/s
# Warmup Iteration  13: 986661.324 ops/s
# Warmup Iteration  14: 984260.963 ops/s
# Warmup Iteration  15: 985356.353 ops/s
# Warmup Iteration  16: 983119.119 ops/s
# Warmup Iteration  17: 1044821.142 ops/s
# Warmup Iteration  18: 1043752.826 ops/s
# Warmup Iteration  19: 1044502.511 ops/s
# Warmup Iteration  20: 1043134.726 ops/s
# Warmup Iteration  21: 1041937.502 ops/s
# Warmup Iteration  22: 1041517.978 ops/s
# Warmup Iteration  23: 1044686.698 ops/s
# Warmup Iteration  24: 1042817.114 ops/s
# Warmup Iteration  25: 1044937.972 ops/s
# Warmup Iteration  26: 1041479.078 ops/s
# Warmup Iteration  27: 1026954.034 ops/s
# Warmup Iteration  28: 1044210.136 ops/s
# Warmup Iteration  29: 1043205.332 ops/s
# Warmup Iteration  30: 1043184.389 ops/s
Iteration   1: 1042390.169 ops/s
Iteration   2: 1038233.066 ops/s
Iteration   3: 1043301.904 ops/s
Iteration   4: 1046072.604 ops/s
Iteration   5: 1043819.946 ops/s
Iteration   6: 1040944.543 ops/s
Iteration   7: 1047098.893 ops/s
Iteration   8: 1046828.373 ops/s
Iteration   9: 1037482.495 ops/s
Iteration  10: 1041549.655 ops/s
Iteration  11: 1039242.360 ops/s
Iteration  12: 1043064.814 ops/s
Iteration  13: 1042148.738 ops/s
Iteration  14: 1046067.682 ops/s
Iteration  15: 1044367.252 ops/s
Iteration  16: 1048071.444 ops/s
Iteration  17: 1042930.578 ops/s
Iteration  18: 1042332.302 ops/s
Iteration  19: 1043873.588 ops/s
Iteration  20: 1044596.548 ops/s
Iteration  21: 1039883.872 ops/s
Iteration  22: 1043090.344 ops/s
Iteration  23: 1044449.081 ops/s
Iteration  24: 1039006.703 ops/s
Iteration  25: 1038415.521 ops/s
Iteration  26: 1043915.905 ops/s
Iteration  27: 1042861.555 ops/s
Iteration  28: 1043586.529 ops/s
Iteration  29: 1045671.461 ops/s
Iteration  30: 1045020.749 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_removeAll":
  1043010.622 ±(99.9%) 1833.235 ops/s [Average]
  (min, avg, max) = (1037482.495, 1043010.622, 1048071.444), stdev = 2743.899
  CI (99.9%): [1041177.388, 1044843.857] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_removeAll  thrpt   30  1043010.622 ± 1833.235  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_removeAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_removeAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 754463.884 ops/s
# Warmup Iteration   2: 793336.025 ops/s
# Warmup Iteration   3: 1002389.709 ops/s
# Warmup Iteration   4: 999466.359 ops/s
# Warmup Iteration   5: 994268.566 ops/s
# Warmup Iteration   6: 998485.272 ops/s
# Warmup Iteration   7: 1001046.777 ops/s
# Warmup Iteration   8: 1001242.198 ops/s
# Warmup Iteration   9: 996302.006 ops/s
# Warmup Iteration  10: 998600.909 ops/s
# Warmup Iteration  11: 969233.255 ops/s
# Warmup Iteration  12: 882733.605 ops/s
# Warmup Iteration  13: 1000635.191 ops/s
# Warmup Iteration  14: 997298.006 ops/s
# Warmup Iteration  15: 999588.143 ops/s
# Warmup Iteration  16: 996844.520 ops/s
# Warmup Iteration  17: 1058980.180 ops/s
# Warmup Iteration  18: 1054994.029 ops/s
# Warmup Iteration  19: 1059979.565 ops/s
# Warmup Iteration  20: 1060837.674 ops/s
# Warmup Iteration  21: 1058960.003 ops/s
# Warmup Iteration  22: 1058336.126 ops/s
# Warmup Iteration  23: 1062300.913 ops/s
# Warmup Iteration  24: 1057741.474 ops/s
# Warmup Iteration  25: 1059020.401 ops/s
# Warmup Iteration  26: 1061079.523 ops/s
# Warmup Iteration  27: 1059577.868 ops/s
# Warmup Iteration  28: 1059388.007 ops/s
# Warmup Iteration  29: 1058660.207 ops/s
# Warmup Iteration  30: 1061447.428 ops/s
Iteration   1: 1060760.993 ops/s
Iteration   2: 1056113.419 ops/s
Iteration   3: 1061519.712 ops/s
Iteration   4: 1058098.723 ops/s
Iteration   5: 1059634.590 ops/s
Iteration   6: 1058751.123 ops/s
Iteration   7: 1063917.499 ops/s
Iteration   8: 1063149.769 ops/s
Iteration   9: 1056023.671 ops/s
Iteration  10: 1063469.213 ops/s
Iteration  11: 1063596.219 ops/s
Iteration  12: 1061665.231 ops/s
Iteration  13: 1059186.321 ops/s
Iteration  14: 1058059.102 ops/s
Iteration  15: 1059548.217 ops/s
Iteration  16: 1060477.258 ops/s
Iteration  17: 1058363.587 ops/s
Iteration  18: 1061342.685 ops/s
Iteration  19: 1061107.514 ops/s
Iteration  20: 1056827.074 ops/s
Iteration  21: 1059069.621 ops/s
Iteration  22: 1063618.702 ops/s
Iteration  23: 1059016.540 ops/s
Iteration  24: 1063047.505 ops/s
Iteration  25: 1057396.172 ops/s
Iteration  26: 1059345.661 ops/s
Iteration  27: 1058382.195 ops/s
Iteration  28: 1051992.627 ops/s
Iteration  29: 1060597.094 ops/s
Iteration  30: 1057923.420 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_removeAtIndex":
  1059733.382 ±(99.9%) 1812.599 ops/s [Average]
  (min, avg, max) = (1051992.627, 1059733.382, 1063917.499), stdev = 2713.014
  CI (99.9%): [1057920.782, 1061545.981] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_removeAtIndex  thrpt   30  1059733.382 ± 1812.599  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_replaceAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_replaceAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 752812.012 ops/s
# Warmup Iteration   2: 796590.382 ops/s
# Warmup Iteration   3: 997756.284 ops/s
# Warmup Iteration   4: 998338.623 ops/s
# Warmup Iteration   5: 993278.310 ops/s
# Warmup Iteration   6: 996946.709 ops/s
# Warmup Iteration   7: 998178.598 ops/s
# Warmup Iteration   8: 1000981.326 ops/s
# Warmup Iteration   9: 997544.184 ops/s
# Warmup Iteration  10: 998059.640 ops/s
# Warmup Iteration  11: 942605.775 ops/s
# Warmup Iteration  12: 907662.454 ops/s
# Warmup Iteration  13: 1003334.380 ops/s
# Warmup Iteration  14: 1003311.995 ops/s
# Warmup Iteration  15: 1002082.301 ops/s
# Warmup Iteration  16: 1003930.073 ops/s
# Warmup Iteration  17: 1065103.654 ops/s
# Warmup Iteration  18: 1068005.582 ops/s
# Warmup Iteration  19: 1065799.947 ops/s
# Warmup Iteration  20: 1063704.503 ops/s
# Warmup Iteration  21: 1062821.936 ops/s
# Warmup Iteration  22: 1067581.902 ops/s
# Warmup Iteration  23: 1064374.160 ops/s
# Warmup Iteration  24: 1063824.979 ops/s
# Warmup Iteration  25: 1064866.045 ops/s
# Warmup Iteration  26: 1062761.335 ops/s
# Warmup Iteration  27: 1061873.114 ops/s
# Warmup Iteration  28: 1062108.619 ops/s
# Warmup Iteration  29: 1062827.874 ops/s
# Warmup Iteration  30: 1062153.065 ops/s
Iteration   1: 1062910.123 ops/s
Iteration   2: 1064215.430 ops/s
Iteration   3: 1065688.935 ops/s
Iteration   4: 1064545.803 ops/s
Iteration   5: 1064066.618 ops/s
Iteration   6: 1066835.361 ops/s
Iteration   7: 1062628.816 ops/s
Iteration   8: 1066109.699 ops/s
Iteration   9: 1066207.627 ops/s
Iteration  10: 1063257.925 ops/s
Iteration  11: 1063748.614 ops/s
Iteration  12: 1063558.311 ops/s
Iteration  13: 1060640.295 ops/s
Iteration  14: 1062931.179 ops/s
Iteration  15: 1067203.810 ops/s
Iteration  16: 1061960.913 ops/s
Iteration  17: 1067789.114 ops/s
Iteration  18: 1065942.533 ops/s
Iteration  19: 1064412.880 ops/s
Iteration  20: 1064807.775 ops/s
Iteration  21: 1068337.658 ops/s
Iteration  22: 1062765.338 ops/s
Iteration  23: 1065657.607 ops/s
Iteration  24: 1064079.788 ops/s
Iteration  25: 1067112.472 ops/s
Iteration  26: 1058142.254 ops/s
Iteration  27: 1062916.386 ops/s
Iteration  28: 1065651.646 ops/s
Iteration  29: 1066504.907 ops/s
Iteration  30: 1064154.633 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_replaceAll":
  1064492.815 ±(99.9%) 1469.309 ops/s [Average]
  (min, avg, max) = (1058142.254, 1064492.815, 1068337.658), stdev = 2199.192
  CI (99.9%): [1063023.506, 1065962.124] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_replaceAll  thrpt   30  1064492.815 ± 1469.309  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 681308.620 ops/s
# Warmup Iteration   2: 772842.969 ops/s
# Warmup Iteration   3: 967948.985 ops/s
# Warmup Iteration   4: 968666.582 ops/s
# Warmup Iteration   5: 967854.225 ops/s
# Warmup Iteration   6: 968921.224 ops/s
# Warmup Iteration   7: 965323.378 ops/s
# Warmup Iteration   8: 967447.825 ops/s
# Warmup Iteration   9: 970622.341 ops/s
# Warmup Iteration  10: 968235.624 ops/s
# Warmup Iteration  11: 966757.171 ops/s
# Warmup Iteration  12: 832420.735 ops/s
# Warmup Iteration  13: 967082.555 ops/s
# Warmup Iteration  14: 967306.401 ops/s
# Warmup Iteration  15: 968483.311 ops/s
# Warmup Iteration  16: 968517.116 ops/s
# Warmup Iteration  17: 1027991.608 ops/s
# Warmup Iteration  18: 1026033.666 ops/s
# Warmup Iteration  19: 1024338.211 ops/s
# Warmup Iteration  20: 1020143.984 ops/s
# Warmup Iteration  21: 1024143.997 ops/s
# Warmup Iteration  22: 1023918.502 ops/s
# Warmup Iteration  23: 1026178.699 ops/s
# Warmup Iteration  24: 1026175.190 ops/s
# Warmup Iteration  25: 1019289.928 ops/s
# Warmup Iteration  26: 1022663.862 ops/s
# Warmup Iteration  27: 1025737.671 ops/s
# Warmup Iteration  28: 1026053.107 ops/s
# Warmup Iteration  29: 1033391.189 ops/s
# Warmup Iteration  30: 1027878.816 ops/s
Iteration   1: 1024787.760 ops/s
Iteration   2: 1028949.573 ops/s
Iteration   3: 1024193.526 ops/s
Iteration   4: 1028100.429 ops/s
Iteration   5: 1033722.780 ops/s
Iteration   6: 1026948.128 ops/s
Iteration   7: 1021381.608 ops/s
Iteration   8: 1024771.982 ops/s
Iteration   9: 1029019.847 ops/s
Iteration  10: 1024717.306 ops/s
Iteration  11: 1023529.095 ops/s
Iteration  12: 1024579.487 ops/s
Iteration  13: 1023806.455 ops/s
Iteration  14: 1028180.129 ops/s
Iteration  15: 1022544.087 ops/s
Iteration  16: 1023815.248 ops/s
Iteration  17: 1028080.316 ops/s
Iteration  18: 1026176.968 ops/s
Iteration  19: 1022010.837 ops/s
Iteration  20: 1024186.875 ops/s
Iteration  21: 1028260.165 ops/s
Iteration  22: 1029349.422 ops/s
Iteration  23: 1018074.605 ops/s
Iteration  24: 1021594.135 ops/s
Iteration  25: 1024027.206 ops/s
Iteration  26: 1022528.351 ops/s
Iteration  27: 1025206.275 ops/s
Iteration  28: 1026059.147 ops/s
Iteration  29: 1027632.999 ops/s
Iteration  30: 1026776.219 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_retainAll":
  1025433.699 ±(99.9%) 2071.291 ops/s [Average]
  (min, avg, max) = (1018074.605, 1025433.699, 1033722.780), stdev = 3100.211
  CI (99.9%): [1023362.407, 1027504.990] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_retainAll  thrpt   30  1025433.699 ± 2071.291  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_reverseForEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_reverseForEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5928008.713 ops/s
# Warmup Iteration   2: 12311477.498 ops/s
# Warmup Iteration   3: 13028559.902 ops/s
# Warmup Iteration   4: 10965459.291 ops/s
# Warmup Iteration   5: 13068491.372 ops/s
# Warmup Iteration   6: 13043301.458 ops/s
# Warmup Iteration   7: 13053143.835 ops/s
# Warmup Iteration   8: 13072148.019 ops/s
# Warmup Iteration   9: 13032904.854 ops/s
# Warmup Iteration  10: 13066273.723 ops/s
# Warmup Iteration  11: 13083351.766 ops/s
# Warmup Iteration  12: 13070402.115 ops/s
# Warmup Iteration  13: 13044475.818 ops/s
# Warmup Iteration  14: 13070223.512 ops/s
# Warmup Iteration  15: 13053423.539 ops/s
# Warmup Iteration  16: 13047088.182 ops/s
# Warmup Iteration  17: 13048741.716 ops/s
# Warmup Iteration  18: 13076067.879 ops/s
# Warmup Iteration  19: 13086723.087 ops/s
# Warmup Iteration  20: 13064577.533 ops/s
# Warmup Iteration  21: 13072383.487 ops/s
# Warmup Iteration  22: 13061259.634 ops/s
# Warmup Iteration  23: 13076047.250 ops/s
# Warmup Iteration  24: 13069031.444 ops/s
# Warmup Iteration  25: 13073369.811 ops/s
# Warmup Iteration  26: 13066637.306 ops/s
# Warmup Iteration  27: 13090466.316 ops/s
# Warmup Iteration  28: 13047238.141 ops/s
# Warmup Iteration  29: 13060839.738 ops/s
# Warmup Iteration  30: 13083703.703 ops/s
Iteration   1: 13062749.078 ops/s
Iteration   2: 13033896.030 ops/s
Iteration   3: 13086394.780 ops/s
Iteration   4: 13045076.232 ops/s
Iteration   5: 13053694.730 ops/s
Iteration   6: 13085178.069 ops/s
Iteration   7: 13085634.188 ops/s
Iteration   8: 13074408.693 ops/s
Iteration   9: 13087780.117 ops/s
Iteration  10: 13091701.170 ops/s
Iteration  11: 13065208.488 ops/s
Iteration  12: 13063893.718 ops/s
Iteration  13: 13071395.382 ops/s
Iteration  14: 13055407.163 ops/s
Iteration  15: 13090724.776 ops/s
Iteration  16: 13054672.782 ops/s
Iteration  17: 13081833.866 ops/s
Iteration  18: 13071822.905 ops/s
Iteration  19: 13055339.873 ops/s
Iteration  20: 13086906.790 ops/s
Iteration  21: 13061956.110 ops/s
Iteration  22: 13009255.285 ops/s
Iteration  23: 13082857.886 ops/s
Iteration  24: 13117582.513 ops/s
Iteration  25: 13059830.536 ops/s
Iteration  26: 13059347.475 ops/s
Iteration  27: 13071090.913 ops/s
Iteration  28: 13061774.090 ops/s
Iteration  29: 13093891.544 ops/s
Iteration  30: 13066900.764 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_reverseForEach":
  13069606.865 ±(99.9%) 13827.874 ops/s [Average]
  (min, avg, max) = (13009255.285, 13069606.865, 13117582.513), stdev = 20696.913
  CI (99.9%): [13055778.990, 13083434.739] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_reverseForEach  thrpt   30  13069606.865 ± 13827.874  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_reverseForEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_reverseForEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3959723.197 ops/s
# Warmup Iteration   2: 8059002.004 ops/s
# Warmup Iteration   3: 8338237.923 ops/s
# Warmup Iteration   4: 8390862.248 ops/s
# Warmup Iteration   5: 6954709.951 ops/s
# Warmup Iteration   6: 8402914.425 ops/s
# Warmup Iteration   7: 8405737.249 ops/s
# Warmup Iteration   8: 8403830.549 ops/s
# Warmup Iteration   9: 8397810.191 ops/s
# Warmup Iteration  10: 8403062.232 ops/s
# Warmup Iteration  11: 8409136.185 ops/s
# Warmup Iteration  12: 8397119.031 ops/s
# Warmup Iteration  13: 8400685.227 ops/s
# Warmup Iteration  14: 8287020.823 ops/s
# Warmup Iteration  15: 8408843.423 ops/s
# Warmup Iteration  16: 8406461.502 ops/s
# Warmup Iteration  17: 8382183.014 ops/s
# Warmup Iteration  18: 8397321.357 ops/s
# Warmup Iteration  19: 8398709.387 ops/s
# Warmup Iteration  20: 8395423.633 ops/s
# Warmup Iteration  21: 8387147.530 ops/s
# Warmup Iteration  22: 8411044.569 ops/s
# Warmup Iteration  23: 8375938.953 ops/s
# Warmup Iteration  24: 8399527.170 ops/s
# Warmup Iteration  25: 8396543.445 ops/s
# Warmup Iteration  26: 8369201.356 ops/s
# Warmup Iteration  27: 8392258.518 ops/s
# Warmup Iteration  28: 8398959.686 ops/s
# Warmup Iteration  29: 8384863.497 ops/s
# Warmup Iteration  30: 8386357.255 ops/s
Iteration   1: 8414385.417 ops/s
Iteration   2: 8394610.975 ops/s
Iteration   3: 8398209.161 ops/s
Iteration   4: 8406775.979 ops/s
Iteration   5: 8416339.072 ops/s
Iteration   6: 8378413.464 ops/s
Iteration   7: 8399648.046 ops/s
Iteration   8: 8378863.603 ops/s
Iteration   9: 8404349.608 ops/s
Iteration  10: 8385973.539 ops/s
Iteration  11: 8405960.456 ops/s
Iteration  12: 8420991.615 ops/s
Iteration  13: 8391750.300 ops/s
Iteration  14: 8409760.651 ops/s
Iteration  15: 8406149.909 ops/s
Iteration  16: 8410512.145 ops/s
Iteration  17: 8400600.220 ops/s
Iteration  18: 8374023.525 ops/s
Iteration  19: 8399979.196 ops/s
Iteration  20: 8413875.890 ops/s
Iteration  21: 8396408.562 ops/s
Iteration  22: 8388594.598 ops/s
Iteration  23: 8418798.766 ops/s
Iteration  24: 8364129.841 ops/s
Iteration  25: 8374463.792 ops/s
Iteration  26: 8394225.454 ops/s
Iteration  27: 8423186.175 ops/s
Iteration  28: 8393010.010 ops/s
Iteration  29: 8386110.379 ops/s
Iteration  30: 8366019.284 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_reverseForEachWithIndex":
  8397203.988 ±(99.9%) 10747.328 ops/s [Average]
  (min, avg, max) = (8364129.841, 8397203.988, 8423186.175), stdev = 16086.096
  CI (99.9%): [8386456.660, 8407951.316] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_reverseForEachWithIndex  thrpt   30  8397203.988 ± 10747.328  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3902820.382 ops/s
# Warmup Iteration   2: 8902338.952 ops/s
# Warmup Iteration   3: 8933331.532 ops/s
# Warmup Iteration   4: 7509672.937 ops/s
# Warmup Iteration   5: 8953748.212 ops/s
# Warmup Iteration   6: 8947070.598 ops/s
# Warmup Iteration   7: 8934532.037 ops/s
# Warmup Iteration   8: 8941706.000 ops/s
# Warmup Iteration   9: 8932928.468 ops/s
# Warmup Iteration  10: 8951151.713 ops/s
# Warmup Iteration  11: 8955827.229 ops/s
# Warmup Iteration  12: 8947238.417 ops/s
# Warmup Iteration  13: 8939635.378 ops/s
# Warmup Iteration  14: 8953951.378 ops/s
# Warmup Iteration  15: 8939332.375 ops/s
# Warmup Iteration  16: 8952948.854 ops/s
# Warmup Iteration  17: 8938448.020 ops/s
# Warmup Iteration  18: 8951018.067 ops/s
# Warmup Iteration  19: 8942338.558 ops/s
# Warmup Iteration  20: 8946387.364 ops/s
# Warmup Iteration  21: 8938938.683 ops/s
# Warmup Iteration  22: 8953290.359 ops/s
# Warmup Iteration  23: 8946564.346 ops/s
# Warmup Iteration  24: 8924021.226 ops/s
# Warmup Iteration  25: 8948429.321 ops/s
# Warmup Iteration  26: 8935819.310 ops/s
# Warmup Iteration  27: 8936029.104 ops/s
# Warmup Iteration  28: 8947832.026 ops/s
# Warmup Iteration  29: 8947028.705 ops/s
# Warmup Iteration  30: 8940763.646 ops/s
Iteration   1: 8950955.659 ops/s
Iteration   2: 8934148.161 ops/s
Iteration   3: 8961820.890 ops/s
Iteration   4: 8936419.209 ops/s
Iteration   5: 8947741.844 ops/s
Iteration   6: 8961913.520 ops/s
Iteration   7: 8951611.486 ops/s
Iteration   8: 8957991.548 ops/s
Iteration   9: 8950023.363 ops/s
Iteration  10: 8940671.742 ops/s
Iteration  11: 8951176.140 ops/s
Iteration  12: 8935962.960 ops/s
Iteration  13: 8938800.697 ops/s
Iteration  14: 8972861.650 ops/s
Iteration  15: 8955235.558 ops/s
Iteration  16: 8928690.106 ops/s
Iteration  17: 8937480.633 ops/s
Iteration  18: 8948031.077 ops/s
Iteration  19: 8931619.153 ops/s
Iteration  20: 8952124.469 ops/s
Iteration  21: 8956642.385 ops/s
Iteration  22: 8949321.575 ops/s
Iteration  23: 8947813.623 ops/s
Iteration  24: 8951600.366 ops/s
Iteration  25: 8924774.456 ops/s
Iteration  26: 8939168.372 ops/s
Iteration  27: 8959741.674 ops/s
Iteration  28: 8948993.912 ops/s
Iteration  29: 8954480.338 ops/s
Iteration  30: 8945818.031 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_select":
  8947454.487 ±(99.9%) 7289.877 ops/s [Average]
  (min, avg, max) = (8924774.456, 8947454.487, 8972861.650), stdev = 10911.146
  CI (99.9%): [8940164.609, 8954744.364] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_select  thrpt   30  8947454.487 ± 7289.877  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_selectInstancesOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_selectInstancesOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5284389.171 ops/s
# Warmup Iteration   2: 7730107.334 ops/s
# Warmup Iteration   3: 8374825.238 ops/s
# Warmup Iteration   4: 8405054.927 ops/s
# Warmup Iteration   5: 8397796.163 ops/s
# Warmup Iteration   6: 7044482.879 ops/s
# Warmup Iteration   7: 8412176.490 ops/s
# Warmup Iteration   8: 8399825.319 ops/s
# Warmup Iteration   9: 8411774.128 ops/s
# Warmup Iteration  10: 8400912.865 ops/s
# Warmup Iteration  11: 8407352.425 ops/s
# Warmup Iteration  12: 8400905.708 ops/s
# Warmup Iteration  13: 8396641.316 ops/s
# Warmup Iteration  14: 8405019.306 ops/s
# Warmup Iteration  15: 8403525.866 ops/s
# Warmup Iteration  16: 8414022.624 ops/s
# Warmup Iteration  17: 8394566.273 ops/s
# Warmup Iteration  18: 8383154.406 ops/s
# Warmup Iteration  19: 8376486.968 ops/s
# Warmup Iteration  20: 8396689.093 ops/s
# Warmup Iteration  21: 8394234.283 ops/s
# Warmup Iteration  22: 8390723.913 ops/s
# Warmup Iteration  23: 8385732.437 ops/s
# Warmup Iteration  24: 8392144.651 ops/s
# Warmup Iteration  25: 8389433.767 ops/s
# Warmup Iteration  26: 8408743.446 ops/s
# Warmup Iteration  27: 8378993.987 ops/s
# Warmup Iteration  28: 8391497.020 ops/s
# Warmup Iteration  29: 8374895.220 ops/s
# Warmup Iteration  30: 8388837.566 ops/s
Iteration   1: 8399140.226 ops/s
Iteration   2: 8360323.836 ops/s
Iteration   3: 8406108.948 ops/s
Iteration   4: 8372103.484 ops/s
Iteration   5: 8385392.624 ops/s
Iteration   6: 8391702.608 ops/s
Iteration   7: 8368935.834 ops/s
Iteration   8: 8382473.204 ops/s
Iteration   9: 8372394.671 ops/s
Iteration  10: 8398683.700 ops/s
Iteration  11: 8371312.502 ops/s
Iteration  12: 8398848.531 ops/s
Iteration  13: 8377628.703 ops/s
Iteration  14: 8397879.974 ops/s
Iteration  15: 8363422.935 ops/s
Iteration  16: 8401103.901 ops/s
Iteration  17: 8379346.347 ops/s
Iteration  18: 8400996.491 ops/s
Iteration  19: 8350929.086 ops/s
Iteration  20: 8358618.721 ops/s
Iteration  21: 8390541.126 ops/s
Iteration  22: 8384828.784 ops/s
Iteration  23: 8389760.208 ops/s
Iteration  24: 8369288.624 ops/s
Iteration  25: 8395717.750 ops/s
Iteration  26: 8374287.554 ops/s
Iteration  27: 8405578.499 ops/s
Iteration  28: 8385229.601 ops/s
Iteration  29: 8404251.889 ops/s
Iteration  30: 8372115.857 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_selectInstancesOf":
  8383631.541 ±(99.9%) 10364.621 ops/s [Average]
  (min, avg, max) = (8350929.086, 8383631.541, 8406108.948), stdev = 15513.277
  CI (99.9%): [8373266.920, 8393996.161] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_selectInstancesOf  thrpt   30  8383631.541 ± 10364.621  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_selectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_selectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2495330.888 ops/s
# Warmup Iteration   2: 5574455.747 ops/s
# Warmup Iteration   3: 5673283.491 ops/s
# Warmup Iteration   4: 5038551.794 ops/s
# Warmup Iteration   5: 5432891.012 ops/s
# Warmup Iteration   6: 5675202.083 ops/s
# Warmup Iteration   7: 5665632.844 ops/s
# Warmup Iteration   8: 5680329.896 ops/s
# Warmup Iteration   9: 5689882.580 ops/s
# Warmup Iteration  10: 5686169.538 ops/s
# Warmup Iteration  11: 5640677.538 ops/s
# Warmup Iteration  12: 5683047.804 ops/s
# Warmup Iteration  13: 5671453.557 ops/s
# Warmup Iteration  14: 5668997.343 ops/s
# Warmup Iteration  15: 5681491.754 ops/s
# Warmup Iteration  16: 5676825.020 ops/s
# Warmup Iteration  17: 5676031.274 ops/s
# Warmup Iteration  18: 5676400.963 ops/s
# Warmup Iteration  19: 5686457.586 ops/s
# Warmup Iteration  20: 5674794.834 ops/s
# Warmup Iteration  21: 5678055.307 ops/s
# Warmup Iteration  22: 5675930.027 ops/s
# Warmup Iteration  23: 5680327.827 ops/s
# Warmup Iteration  24: 5674052.808 ops/s
# Warmup Iteration  25: 5680965.422 ops/s
# Warmup Iteration  26: 5670512.891 ops/s
# Warmup Iteration  27: 5671145.611 ops/s
# Warmup Iteration  28: 5681576.235 ops/s
# Warmup Iteration  29: 5660674.905 ops/s
# Warmup Iteration  30: 5688451.382 ops/s
Iteration   1: 5678940.950 ops/s
Iteration   2: 5686519.554 ops/s
Iteration   3: 5689059.989 ops/s
Iteration   4: 5675307.750 ops/s
Iteration   5: 5679912.287 ops/s
Iteration   6: 5685490.452 ops/s
Iteration   7: 5686660.289 ops/s
Iteration   8: 5686054.656 ops/s
Iteration   9: 5666777.293 ops/s
Iteration  10: 5657479.864 ops/s
Iteration  11: 5670661.200 ops/s
Iteration  12: 5671095.922 ops/s
Iteration  13: 5676488.162 ops/s
Iteration  14: 5666035.376 ops/s
Iteration  15: 5656953.636 ops/s
Iteration  16: 5687410.269 ops/s
Iteration  17: 5687941.197 ops/s
Iteration  18: 5673454.838 ops/s
Iteration  19: 5683868.842 ops/s
Iteration  20: 5684948.652 ops/s
Iteration  21: 5693213.242 ops/s
Iteration  22: 5692919.940 ops/s
Iteration  23: 5680248.466 ops/s
Iteration  24: 5680685.352 ops/s
Iteration  25: 5652023.304 ops/s
Iteration  26: 5691319.428 ops/s
Iteration  27: 5691309.808 ops/s
Iteration  28: 5681336.407 ops/s
Iteration  29: 5677055.043 ops/s
Iteration  30: 5680140.358 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_selectWith":
  5679043.751 ±(99.9%) 7244.794 ops/s [Average]
  (min, avg, max) = (5652023.304, 5679043.751, 5693213.242), stdev = 10843.667
  CI (99.9%): [5671798.957, 5686288.545] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_selectWith  thrpt   30  5679043.751 ± 7244.794  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_selectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_selectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3616849.116 ops/s
# Warmup Iteration   2: 10059503.850 ops/s
# Warmup Iteration   3: 10186111.262 ops/s
# Warmup Iteration   4: 8565356.761 ops/s
# Warmup Iteration   5: 10210776.817 ops/s
# Warmup Iteration   6: 10199261.690 ops/s
# Warmup Iteration   7: 10204485.046 ops/s
# Warmup Iteration   8: 10207737.453 ops/s
# Warmup Iteration   9: 10198511.529 ops/s
# Warmup Iteration  10: 10192301.326 ops/s
# Warmup Iteration  11: 10197118.881 ops/s
# Warmup Iteration  12: 10194187.706 ops/s
# Warmup Iteration  13: 10196199.376 ops/s
# Warmup Iteration  14: 10198261.993 ops/s
# Warmup Iteration  15: 10192387.279 ops/s
# Warmup Iteration  16: 10204761.476 ops/s
# Warmup Iteration  17: 10324618.351 ops/s
# Warmup Iteration  18: 10314390.908 ops/s
# Warmup Iteration  19: 10320948.925 ops/s
# Warmup Iteration  20: 10321922.367 ops/s
# Warmup Iteration  21: 10298125.905 ops/s
# Warmup Iteration  22: 10295921.249 ops/s
# Warmup Iteration  23: 10319018.642 ops/s
# Warmup Iteration  24: 10323090.375 ops/s
# Warmup Iteration  25: 10306370.423 ops/s
# Warmup Iteration  26: 10326886.231 ops/s
# Warmup Iteration  27: 10321702.601 ops/s
# Warmup Iteration  28: 10321232.850 ops/s
# Warmup Iteration  29: 10295538.473 ops/s
# Warmup Iteration  30: 10325240.648 ops/s
Iteration   1: 10331300.607 ops/s
Iteration   2: 10316006.160 ops/s
Iteration   3: 10322833.817 ops/s
Iteration   4: 10320004.363 ops/s
Iteration   5: 10327495.246 ops/s
Iteration   6: 10324090.588 ops/s
Iteration   7: 10324928.651 ops/s
Iteration   8: 10336552.979 ops/s
Iteration   9: 10307945.398 ops/s
Iteration  10: 10313578.400 ops/s
Iteration  11: 10300446.950 ops/s
Iteration  12: 10328020.210 ops/s
Iteration  13: 10311774.503 ops/s
Iteration  14: 10301950.440 ops/s
Iteration  15: 10319975.582 ops/s
Iteration  16: 10303954.620 ops/s
Iteration  17: 10300814.427 ops/s
Iteration  18: 10286592.184 ops/s
Iteration  19: 10293112.054 ops/s
Iteration  20: 10277049.847 ops/s
Iteration  21: 10236715.373 ops/s
Iteration  22: 10332345.374 ops/s
Iteration  23: 10312658.335 ops/s
Iteration  24: 10326386.853 ops/s
Iteration  25: 10318064.843 ops/s
Iteration  26: 10304091.928 ops/s
Iteration  27: 10323443.534 ops/s
Iteration  28: 10336883.397 ops/s
Iteration  29: 10315476.450 ops/s
Iteration  30: 10338219.298 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_selectWithIndex":
  10313090.414 ±(99.9%) 13879.876 ops/s [Average]
  (min, avg, max) = (10236715.373, 10313090.414, 10338219.298), stdev = 20774.747
  CI (99.9%): [10299210.538, 10326970.290] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score       Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_selectWithIndex  thrpt   30  10313090.414 ± 13879.876  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_selectWithIndexWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_selectWithIndexWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2935774.047 ops/s
# Warmup Iteration   2: 6871712.622 ops/s
# Warmup Iteration   3: 6346655.334 ops/s
# Warmup Iteration   4: 6530654.082 ops/s
# Warmup Iteration   5: 7024412.781 ops/s
# Warmup Iteration   6: 7029861.380 ops/s
# Warmup Iteration   7: 7007971.175 ops/s
# Warmup Iteration   8: 7023400.370 ops/s
# Warmup Iteration   9: 7032767.023 ops/s
# Warmup Iteration  10: 6977558.926 ops/s
# Warmup Iteration  11: 7038785.078 ops/s
# Warmup Iteration  12: 7018794.515 ops/s
# Warmup Iteration  13: 7002598.165 ops/s
# Warmup Iteration  14: 7023597.939 ops/s
# Warmup Iteration  15: 7017089.622 ops/s
# Warmup Iteration  16: 7029963.909 ops/s
# Warmup Iteration  17: 7047745.681 ops/s
# Warmup Iteration  18: 7052160.742 ops/s
# Warmup Iteration  19: 7060183.140 ops/s
# Warmup Iteration  20: 7047120.134 ops/s
# Warmup Iteration  21: 7051154.436 ops/s
# Warmup Iteration  22: 7051684.965 ops/s
# Warmup Iteration  23: 7051388.423 ops/s
# Warmup Iteration  24: 7049100.483 ops/s
# Warmup Iteration  25: 7053973.420 ops/s
# Warmup Iteration  26: 7040261.328 ops/s
# Warmup Iteration  27: 7050959.469 ops/s
# Warmup Iteration  28: 7056370.480 ops/s
# Warmup Iteration  29: 7064054.573 ops/s
# Warmup Iteration  30: 7058088.997 ops/s
Iteration   1: 7067548.696 ops/s
Iteration   2: 7060076.464 ops/s
Iteration   3: 7043139.529 ops/s
Iteration   4: 7043501.762 ops/s
Iteration   5: 7059246.873 ops/s
Iteration   6: 7045424.581 ops/s
Iteration   7: 7065293.343 ops/s
Iteration   8: 7057397.387 ops/s
Iteration   9: 7058513.386 ops/s
Iteration  10: 7051679.506 ops/s
Iteration  11: 7057921.383 ops/s
Iteration  12: 7064173.409 ops/s
Iteration  13: 7053801.857 ops/s
Iteration  14: 7071821.501 ops/s
Iteration  15: 7033104.514 ops/s
Iteration  16: 7050302.348 ops/s
Iteration  17: 7031505.397 ops/s
Iteration  18: 7057745.823 ops/s
Iteration  19: 7060881.074 ops/s
Iteration  20: 7056950.160 ops/s
Iteration  21: 7058357.252 ops/s
Iteration  22: 7055335.308 ops/s
Iteration  23: 7071005.440 ops/s
Iteration  24: 7069615.227 ops/s
Iteration  25: 7059265.799 ops/s
Iteration  26: 7053082.371 ops/s
Iteration  27: 7044791.564 ops/s
Iteration  28: 7031707.090 ops/s
Iteration  29: 7049130.124 ops/s
Iteration  30: 7054284.933 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_selectWithIndexWithTarget":
  7054553.470 ±(99.9%) 7187.448 ops/s [Average]
  (min, avg, max) = (7031505.397, 7054553.470, 7071821.501), stdev = 10757.835
  CI (99.9%): [7047366.022, 7061740.918] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score      Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_selectWithIndexWithTarget  thrpt   30  7054553.470 ± 7187.448  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_selectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_selectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3222506.901 ops/s
# Warmup Iteration   2: 7446788.301 ops/s
# Warmup Iteration   3: 7454508.607 ops/s
# Warmup Iteration   4: 6339283.951 ops/s
# Warmup Iteration   5: 7502122.008 ops/s
# Warmup Iteration   6: 7474588.060 ops/s
# Warmup Iteration   7: 7504604.003 ops/s
# Warmup Iteration   8: 7502085.206 ops/s
# Warmup Iteration   9: 7497338.833 ops/s
# Warmup Iteration  10: 7492054.156 ops/s
# Warmup Iteration  11: 7481697.928 ops/s
# Warmup Iteration  12: 7494622.282 ops/s
# Warmup Iteration  13: 7501304.131 ops/s
# Warmup Iteration  14: 7478518.661 ops/s
# Warmup Iteration  15: 7491704.714 ops/s
# Warmup Iteration  16: 7501107.276 ops/s
# Warmup Iteration  17: 7482754.897 ops/s
# Warmup Iteration  18: 7495074.935 ops/s
# Warmup Iteration  19: 7492291.949 ops/s
# Warmup Iteration  20: 7503876.585 ops/s
# Warmup Iteration  21: 7481106.250 ops/s
# Warmup Iteration  22: 7500044.777 ops/s
# Warmup Iteration  23: 7493883.559 ops/s
# Warmup Iteration  24: 7492288.406 ops/s
# Warmup Iteration  25: 7492930.890 ops/s
# Warmup Iteration  26: 7486148.035 ops/s
# Warmup Iteration  27: 7490232.255 ops/s
# Warmup Iteration  28: 7420118.792 ops/s
# Warmup Iteration  29: 7500080.237 ops/s
# Warmup Iteration  30: 7403001.220 ops/s
Iteration   1: 7491738.739 ops/s
Iteration   2: 7489505.202 ops/s
Iteration   3: 7472556.011 ops/s
Iteration   4: 7509148.728 ops/s
Iteration   5: 7513309.018 ops/s
Iteration   6: 7508668.229 ops/s
Iteration   7: 7500735.480 ops/s
Iteration   8: 7517561.646 ops/s
Iteration   9: 7510912.913 ops/s
Iteration  10: 7510138.807 ops/s
Iteration  11: 7507240.082 ops/s
Iteration  12: 7479695.793 ops/s
Iteration  13: 7507238.998 ops/s
Iteration  14: 7507057.308 ops/s
Iteration  15: 7501936.946 ops/s
Iteration  16: 7510079.957 ops/s
Iteration  17: 7505624.034 ops/s
Iteration  18: 7499618.927 ops/s
Iteration  19: 7515932.450 ops/s
Iteration  20: 7506397.765 ops/s
Iteration  21: 7491850.395 ops/s
Iteration  22: 7481265.770 ops/s
Iteration  23: 7491003.911 ops/s
Iteration  24: 7494719.409 ops/s
Iteration  25: 7499771.576 ops/s
Iteration  26: 7520996.331 ops/s
Iteration  27: 7508466.943 ops/s
Iteration  28: 7501393.657 ops/s
Iteration  29: 7507800.908 ops/s
Iteration  30: 7497247.918 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_selectWith_target":
  7501987.128 ±(99.9%) 7635.684 ops/s [Average]
  (min, avg, max) = (7472556.011, 7501987.128, 7520996.331), stdev = 11428.733
  CI (99.9%): [7494351.444, 7509622.812] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_selectWith_target  thrpt   30  7501987.128 ± 7635.684  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_select_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_select_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6561050.011 ops/s
# Warmup Iteration   2: 14153018.675 ops/s
# Warmup Iteration   3: 11339037.099 ops/s
# Warmup Iteration   4: 13425854.783 ops/s
# Warmup Iteration   5: 13452168.380 ops/s
# Warmup Iteration   6: 13396117.213 ops/s
# Warmup Iteration   7: 13441963.389 ops/s
# Warmup Iteration   8: 13462937.949 ops/s
# Warmup Iteration   9: 13425527.879 ops/s
# Warmup Iteration  10: 13453247.507 ops/s
# Warmup Iteration  11: 13430326.835 ops/s
# Warmup Iteration  12: 13445115.754 ops/s
# Warmup Iteration  13: 13454698.908 ops/s
# Warmup Iteration  14: 13457882.610 ops/s
# Warmup Iteration  15: 13439102.564 ops/s
# Warmup Iteration  16: 13451287.746 ops/s
# Warmup Iteration  17: 13447366.083 ops/s
# Warmup Iteration  18: 13479040.382 ops/s
# Warmup Iteration  19: 13415524.593 ops/s
# Warmup Iteration  20: 13460728.898 ops/s
# Warmup Iteration  21: 13458767.022 ops/s
# Warmup Iteration  22: 13473717.339 ops/s
# Warmup Iteration  23: 13443391.724 ops/s
# Warmup Iteration  24: 13465139.492 ops/s
# Warmup Iteration  25: 13434418.360 ops/s
# Warmup Iteration  26: 13446005.066 ops/s
# Warmup Iteration  27: 13451657.290 ops/s
# Warmup Iteration  28: 13452209.188 ops/s
# Warmup Iteration  29: 13438665.939 ops/s
# Warmup Iteration  30: 13429379.479 ops/s
Iteration   1: 13435433.884 ops/s
Iteration   2: 13435368.864 ops/s
Iteration   3: 13479395.683 ops/s
Iteration   4: 13450001.631 ops/s
Iteration   5: 13457287.111 ops/s
Iteration   6: 13452680.298 ops/s
Iteration   7: 13459226.291 ops/s
Iteration   8: 13489321.874 ops/s
Iteration   9: 13442098.320 ops/s
Iteration  10: 13460941.624 ops/s
Iteration  11: 13426273.451 ops/s
Iteration  12: 13454064.135 ops/s
Iteration  13: 13464906.224 ops/s
Iteration  14: 13472154.976 ops/s
Iteration  15: 13463554.120 ops/s
Iteration  16: 13484286.712 ops/s
Iteration  17: 13488599.975 ops/s
Iteration  18: 13453722.922 ops/s
Iteration  19: 13474718.887 ops/s
Iteration  20: 13464323.270 ops/s
Iteration  21: 13462597.621 ops/s
Iteration  22: 13478758.353 ops/s
Iteration  23: 13429535.679 ops/s
Iteration  24: 13434163.937 ops/s
Iteration  25: 13433312.565 ops/s
Iteration  26: 13466712.275 ops/s
Iteration  27: 13438606.172 ops/s
Iteration  28: 13463103.670 ops/s
Iteration  29: 13472607.254 ops/s
Iteration  30: 13477696.528 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_select_target":
  13458848.477 ±(99.9%) 12143.116 ops/s [Average]
  (min, avg, max) = (13426273.451, 13458848.477, 13489321.874), stdev = 18175.246
  CI (99.9%): [13446705.361, 13470991.593] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score       Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_select_target  thrpt   30  13458848.477 ± 12143.116  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_set$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_set

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 640354.129 ops/s
# Warmup Iteration   2: 773028.492 ops/s
# Warmup Iteration   3: 953198.487 ops/s
# Warmup Iteration   4: 953055.812 ops/s
# Warmup Iteration   5: 958994.041 ops/s
# Warmup Iteration   6: 955429.277 ops/s
# Warmup Iteration   7: 958826.663 ops/s
# Warmup Iteration   8: 957778.622 ops/s
# Warmup Iteration   9: 801787.698 ops/s
# Warmup Iteration  10: 958332.069 ops/s
# Warmup Iteration  11: 955708.983 ops/s
# Warmup Iteration  12: 957885.690 ops/s
# Warmup Iteration  13: 958069.661 ops/s
# Warmup Iteration  14: 958219.238 ops/s
# Warmup Iteration  15: 957870.746 ops/s
# Warmup Iteration  16: 958188.633 ops/s
# Warmup Iteration  17: 1014617.949 ops/s
# Warmup Iteration  18: 1012519.882 ops/s
# Warmup Iteration  19: 1012500.048 ops/s
# Warmup Iteration  20: 1014704.343 ops/s
# Warmup Iteration  21: 1013144.279 ops/s
# Warmup Iteration  22: 1013170.709 ops/s
# Warmup Iteration  23: 1011141.072 ops/s
# Warmup Iteration  24: 1013215.184 ops/s
# Warmup Iteration  25: 1012028.843 ops/s
# Warmup Iteration  26: 1013179.144 ops/s
# Warmup Iteration  27: 1013736.677 ops/s
# Warmup Iteration  28: 1010798.347 ops/s
# Warmup Iteration  29: 1011297.600 ops/s
# Warmup Iteration  30: 1011642.271 ops/s
Iteration   1: 1012871.741 ops/s
Iteration   2: 1010907.227 ops/s
Iteration   3: 1008413.457 ops/s
Iteration   4: 1008702.414 ops/s
Iteration   5: 1013480.160 ops/s
Iteration   6: 1011317.877 ops/s
Iteration   7: 1011467.329 ops/s
Iteration   8: 1012677.745 ops/s
Iteration   9: 1013281.503 ops/s
Iteration  10: 1010007.232 ops/s
Iteration  11: 1013654.032 ops/s
Iteration  12: 1009780.363 ops/s
Iteration  13: 1012972.610 ops/s
Iteration  14: 1010807.691 ops/s
Iteration  15: 1010622.532 ops/s
Iteration  16: 1013451.383 ops/s
Iteration  17: 1009377.053 ops/s
Iteration  18: 1013465.160 ops/s
Iteration  19: 1014278.522 ops/s
Iteration  20: 1009720.151 ops/s
Iteration  21: 1011896.792 ops/s
Iteration  22: 1013514.568 ops/s
Iteration  23: 1012438.841 ops/s
Iteration  24: 1010991.352 ops/s
Iteration  25: 1013461.173 ops/s
Iteration  26: 1010939.206 ops/s
Iteration  27: 1012985.951 ops/s
Iteration  28: 1013242.137 ops/s
Iteration  29: 1012786.080 ops/s
Iteration  30: 1010616.360 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_set":
  1011804.288 ±(99.9%) 1101.511 ops/s [Average]
  (min, avg, max) = (1008413.457, 1011804.288, 1014278.522), stdev = 1648.690
  CI (99.9%): [1010702.777, 1012905.799] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_set  thrpt   30  1011804.288 ± 1101.511  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_sort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_sort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 754428.627 ops/s
# Warmup Iteration   2: 794078.742 ops/s
# Warmup Iteration   3: 1000009.758 ops/s
# Warmup Iteration   4: 996067.620 ops/s
# Warmup Iteration   5: 996890.380 ops/s
# Warmup Iteration   6: 998956.603 ops/s
# Warmup Iteration   7: 999251.473 ops/s
# Warmup Iteration   8: 998434.089 ops/s
# Warmup Iteration   9: 1003289.457 ops/s
# Warmup Iteration  10: 1001368.179 ops/s
# Warmup Iteration  11: 977130.844 ops/s
# Warmup Iteration  12: 875001.540 ops/s
# Warmup Iteration  13: 996120.688 ops/s
# Warmup Iteration  14: 995995.954 ops/s
# Warmup Iteration  15: 995884.986 ops/s
# Warmup Iteration  16: 996946.132 ops/s
# Warmup Iteration  17: 1060331.962 ops/s
# Warmup Iteration  18: 1058809.736 ops/s
# Warmup Iteration  19: 1060912.581 ops/s
# Warmup Iteration  20: 1060807.791 ops/s
# Warmup Iteration  21: 1059653.969 ops/s
# Warmup Iteration  22: 1058198.085 ops/s
# Warmup Iteration  23: 1059049.876 ops/s
# Warmup Iteration  24: 1060253.591 ops/s
# Warmup Iteration  25: 1057327.203 ops/s
# Warmup Iteration  26: 1060048.320 ops/s
# Warmup Iteration  27: 1059768.423 ops/s
# Warmup Iteration  28: 1059535.827 ops/s
# Warmup Iteration  29: 1059314.621 ops/s
# Warmup Iteration  30: 1062911.879 ops/s
Iteration   1: 1062218.100 ops/s
Iteration   2: 1058608.976 ops/s
Iteration   3: 1062376.350 ops/s
Iteration   4: 1060618.653 ops/s
Iteration   5: 1058054.680 ops/s
Iteration   6: 1058047.461 ops/s
Iteration   7: 1063964.775 ops/s
Iteration   8: 1060969.398 ops/s
Iteration   9: 1060410.300 ops/s
Iteration  10: 1059942.025 ops/s
Iteration  11: 1058550.112 ops/s
Iteration  12: 1061939.666 ops/s
Iteration  13: 1059684.438 ops/s
Iteration  14: 1059390.594 ops/s
Iteration  15: 1056032.090 ops/s
Iteration  16: 1060367.361 ops/s
Iteration  17: 1057178.818 ops/s
Iteration  18: 1061967.616 ops/s
Iteration  19: 1058347.817 ops/s
Iteration  20: 1059289.850 ops/s
Iteration  21: 1058437.742 ops/s
Iteration  22: 1058972.812 ops/s
Iteration  23: 1055974.478 ops/s
Iteration  24: 1058735.515 ops/s
Iteration  25: 1058531.506 ops/s
Iteration  26: 1057580.748 ops/s
Iteration  27: 1058770.934 ops/s
Iteration  28: 1056865.637 ops/s
Iteration  29: 1061319.797 ops/s
Iteration  30: 1060289.197 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_sort":
  1059447.915 ±(99.9%) 1288.829 ops/s [Average]
  (min, avg, max) = (1055974.478, 1059447.915, 1063964.775), stdev = 1929.058
  CI (99.9%): [1058159.086, 1060736.744] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_sort  thrpt   30  1059447.915 ± 1288.829  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_stream$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_stream

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 223649.403 ops/s
# Warmup Iteration   2: 424963.965 ops/s
# Warmup Iteration   3: 508852.100 ops/s
# Warmup Iteration   4: 508883.663 ops/s
# Warmup Iteration   5: 509522.773 ops/s
# Warmup Iteration   6: 421317.166 ops/s
# Warmup Iteration   7: 509080.384 ops/s
# Warmup Iteration   8: 508810.263 ops/s
# Warmup Iteration   9: 508008.545 ops/s
# Warmup Iteration  10: 509073.408 ops/s
# Warmup Iteration  11: 509075.740 ops/s
# Warmup Iteration  12: 508844.816 ops/s
# Warmup Iteration  13: 508894.238 ops/s
# Warmup Iteration  14: 509627.674 ops/s
# Warmup Iteration  15: 508941.144 ops/s
# Warmup Iteration  16: 509362.550 ops/s
# Warmup Iteration  17: 508635.038 ops/s
# Warmup Iteration  18: 509261.094 ops/s
# Warmup Iteration  19: 509434.606 ops/s
# Warmup Iteration  20: 508743.098 ops/s
# Warmup Iteration  21: 508772.942 ops/s
# Warmup Iteration  22: 509189.290 ops/s
# Warmup Iteration  23: 509192.749 ops/s
# Warmup Iteration  24: 510140.860 ops/s
# Warmup Iteration  25: 509606.167 ops/s
# Warmup Iteration  26: 510023.136 ops/s
# Warmup Iteration  27: 508353.808 ops/s
# Warmup Iteration  28: 508349.811 ops/s
# Warmup Iteration  29: 509155.595 ops/s
# Warmup Iteration  30: 508895.951 ops/s
Iteration   1: 508585.552 ops/s
Iteration   2: 509373.093 ops/s
Iteration   3: 507201.483 ops/s
Iteration   4: 510487.265 ops/s
Iteration   5: 508421.821 ops/s
Iteration   6: 509557.654 ops/s
Iteration   7: 510575.948 ops/s
Iteration   8: 507284.448 ops/s
Iteration   9: 510028.502 ops/s
Iteration  10: 508304.720 ops/s
Iteration  11: 508398.074 ops/s
Iteration  12: 508644.448 ops/s
Iteration  13: 508650.961 ops/s
Iteration  14: 509037.346 ops/s
Iteration  15: 509303.169 ops/s
Iteration  16: 509781.115 ops/s
Iteration  17: 507253.929 ops/s
Iteration  18: 508909.721 ops/s
Iteration  19: 510678.725 ops/s
Iteration  20: 508867.742 ops/s
Iteration  21: 510357.179 ops/s
Iteration  22: 509940.105 ops/s
Iteration  23: 509970.114 ops/s
Iteration  24: 509149.713 ops/s
Iteration  25: 509099.562 ops/s
Iteration  26: 509433.817 ops/s
Iteration  27: 509524.739 ops/s
Iteration  28: 509923.423 ops/s
Iteration  29: 508966.131 ops/s
Iteration  30: 509184.276 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_stream":
  509163.159 ±(99.9%) 618.205 ops/s [Average]
  (min, avg, max) = (507201.483, 509163.159, 510678.725), stdev = 925.301
  CI (99.9%): [508544.954, 509781.364] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score     Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_stream  thrpt   30  509163.159 ± 618.205  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_subList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_subList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 20285338.214 ops/s
# Warmup Iteration   2: 36082605.016 ops/s
# Warmup Iteration   3: 37404933.240 ops/s
# Warmup Iteration   4: 39689889.642 ops/s
# Warmup Iteration   5: 39566890.871 ops/s
# Warmup Iteration   6: 39664281.787 ops/s
# Warmup Iteration   7: 39682055.681 ops/s
# Warmup Iteration   8: 39486542.191 ops/s
# Warmup Iteration   9: 39651846.638 ops/s
# Warmup Iteration  10: 39711247.099 ops/s
# Warmup Iteration  11: 39714786.723 ops/s
# Warmup Iteration  12: 39606710.676 ops/s
# Warmup Iteration  13: 39527016.905 ops/s
# Warmup Iteration  14: 39766328.278 ops/s
# Warmup Iteration  15: 39686653.278 ops/s
# Warmup Iteration  16: 39733990.339 ops/s
# Warmup Iteration  17: 39629183.989 ops/s
# Warmup Iteration  18: 39667558.792 ops/s
# Warmup Iteration  19: 39707775.271 ops/s
# Warmup Iteration  20: 39765735.279 ops/s
# Warmup Iteration  21: 39616792.887 ops/s
# Warmup Iteration  22: 39601899.552 ops/s
# Warmup Iteration  23: 39688327.840 ops/s
# Warmup Iteration  24: 39707359.468 ops/s
# Warmup Iteration  25: 39596478.982 ops/s
# Warmup Iteration  26: 39658859.813 ops/s
# Warmup Iteration  27: 39506169.308 ops/s
# Warmup Iteration  28: 39737265.653 ops/s
# Warmup Iteration  29: 39731206.525 ops/s
# Warmup Iteration  30: 39771428.617 ops/s
Iteration   1: 39614018.004 ops/s
Iteration   2: 39486224.922 ops/s
Iteration   3: 39717706.708 ops/s
Iteration   4: 39811252.350 ops/s
Iteration   5: 39602355.855 ops/s
Iteration   6: 39804882.734 ops/s
Iteration   7: 39725383.118 ops/s
Iteration   8: 39710897.560 ops/s
Iteration   9: 39807559.783 ops/s
Iteration  10: 39754978.382 ops/s
Iteration  11: 39594965.868 ops/s
Iteration  12: 39873581.350 ops/s
Iteration  13: 39425998.918 ops/s
Iteration  14: 39688885.795 ops/s
Iteration  15: 39735707.278 ops/s
Iteration  16: 39661087.143 ops/s
Iteration  17: 39770358.154 ops/s
Iteration  18: 39791563.125 ops/s
Iteration  19: 39731080.205 ops/s
Iteration  20: 39807515.740 ops/s
Iteration  21: 39818668.641 ops/s
Iteration  22: 39853765.491 ops/s
Iteration  23: 39603197.303 ops/s
Iteration  24: 39771796.538 ops/s
Iteration  25: 39570589.772 ops/s
Iteration  26: 39758877.318 ops/s
Iteration  27: 39703279.052 ops/s
Iteration  28: 39730769.517 ops/s
Iteration  29: 39638419.496 ops/s
Iteration  30: 39716427.683 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_subList":
  39709393.127 ±(99.9%) 70348.751 ops/s [Average]
  (min, avg, max) = (39425998.918, 39709393.127, 39873581.350), stdev = 105294.706
  CI (99.9%): [39639044.376, 39779741.877] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_subList  thrpt   30  39709393.127 ± 70348.751  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_subListFromGreaterThanTO$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_subListFromGreaterThanTO

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 653612.474 ops/s
# Warmup Iteration   2: 679912.595 ops/s
# Warmup Iteration   3: 806342.945 ops/s
# Warmup Iteration   4: 855914.160 ops/s
# Warmup Iteration   5: 856915.622 ops/s
# Warmup Iteration   6: 851228.466 ops/s
# Warmup Iteration   7: 855802.327 ops/s
# Warmup Iteration   8: 855971.195 ops/s
# Warmup Iteration   9: 857664.724 ops/s
# Warmup Iteration  10: 853729.213 ops/s
# Warmup Iteration  11: 852993.136 ops/s
# Warmup Iteration  12: 855686.806 ops/s
# Warmup Iteration  13: 846217.605 ops/s
# Warmup Iteration  14: 728373.225 ops/s
# Warmup Iteration  15: 855233.883 ops/s
# Warmup Iteration  16: 855900.211 ops/s
# Warmup Iteration  17: 901635.452 ops/s
# Warmup Iteration  18: 901690.275 ops/s
# Warmup Iteration  19: 901252.501 ops/s
# Warmup Iteration  20: 902868.571 ops/s
# Warmup Iteration  21: 901420.065 ops/s
# Warmup Iteration  22: 903236.513 ops/s
# Warmup Iteration  23: 901907.397 ops/s
# Warmup Iteration  24: 902413.694 ops/s
# Warmup Iteration  25: 903588.670 ops/s
# Warmup Iteration  26: 901198.504 ops/s
# Warmup Iteration  27: 902483.235 ops/s
# Warmup Iteration  28: 904060.462 ops/s
# Warmup Iteration  29: 903575.726 ops/s
# Warmup Iteration  30: 901528.939 ops/s
Iteration   1: 900093.535 ops/s
Iteration   2: 902470.131 ops/s
Iteration   3: 902954.000 ops/s
Iteration   4: 900498.332 ops/s
Iteration   5: 901322.141 ops/s
Iteration   6: 904553.992 ops/s
Iteration   7: 903828.546 ops/s
Iteration   8: 903841.897 ops/s
Iteration   9: 902740.865 ops/s
Iteration  10: 903707.422 ops/s
Iteration  11: 903661.528 ops/s
Iteration  12: 902669.559 ops/s
Iteration  13: 901246.572 ops/s
Iteration  14: 899602.291 ops/s
Iteration  15: 900715.216 ops/s
Iteration  16: 900389.398 ops/s
Iteration  17: 903784.000 ops/s
Iteration  18: 902690.609 ops/s
Iteration  19: 902647.585 ops/s
Iteration  20: 902631.400 ops/s
Iteration  21: 904238.224 ops/s
Iteration  22: 900571.497 ops/s
Iteration  23: 902712.597 ops/s
Iteration  24: 900945.286 ops/s
Iteration  25: 903277.613 ops/s
Iteration  26: 903253.435 ops/s
Iteration  27: 903555.099 ops/s
Iteration  28: 904737.521 ops/s
Iteration  29: 904111.815 ops/s
Iteration  30: 903377.034 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_subListFromGreaterThanTO":
  902560.971 ±(99.9%) 970.196 ops/s [Average]
  (min, avg, max) = (899602.291, 902560.971, 904737.521), stdev = 1452.145
  CI (99.9%): [901590.775, 903531.168] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score     Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_subListFromGreaterThanTO  thrpt   30  902560.971 ± 970.196  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_subListFromNegative$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_subListFromNegative

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 668123.231 ops/s
# Warmup Iteration   2: 690491.121 ops/s
# Warmup Iteration   3: 814684.267 ops/s
# Warmup Iteration   4: 870475.520 ops/s
# Warmup Iteration   5: 866539.870 ops/s
# Warmup Iteration   6: 861968.334 ops/s
# Warmup Iteration   7: 869092.662 ops/s
# Warmup Iteration   8: 870022.899 ops/s
# Warmup Iteration   9: 869556.722 ops/s
# Warmup Iteration  10: 869485.018 ops/s
# Warmup Iteration  11: 871115.447 ops/s
# Warmup Iteration  12: 869059.975 ops/s
# Warmup Iteration  13: 867049.407 ops/s
# Warmup Iteration  14: 732162.453 ops/s
# Warmup Iteration  15: 875356.736 ops/s
# Warmup Iteration  16: 873952.885 ops/s
# Warmup Iteration  17: 914293.381 ops/s
# Warmup Iteration  18: 914409.402 ops/s
# Warmup Iteration  19: 914789.507 ops/s
# Warmup Iteration  20: 915989.122 ops/s
# Warmup Iteration  21: 916346.039 ops/s
# Warmup Iteration  22: 914154.570 ops/s
# Warmup Iteration  23: 913853.517 ops/s
# Warmup Iteration  24: 915604.746 ops/s
# Warmup Iteration  25: 917791.237 ops/s
# Warmup Iteration  26: 915312.645 ops/s
# Warmup Iteration  27: 915185.444 ops/s
# Warmup Iteration  28: 915193.838 ops/s
# Warmup Iteration  29: 916839.037 ops/s
# Warmup Iteration  30: 916889.510 ops/s
Iteration   1: 915681.352 ops/s
Iteration   2: 913715.963 ops/s
Iteration   3: 915251.985 ops/s
Iteration   4: 915752.494 ops/s
Iteration   5: 917625.492 ops/s
Iteration   6: 912299.060 ops/s
Iteration   7: 912376.569 ops/s
Iteration   8: 914048.819 ops/s
Iteration   9: 916112.950 ops/s
Iteration  10: 915080.543 ops/s
Iteration  11: 917792.206 ops/s
Iteration  12: 916133.894 ops/s
Iteration  13: 915283.864 ops/s
Iteration  14: 917309.602 ops/s
Iteration  15: 914006.627 ops/s
Iteration  16: 916737.493 ops/s
Iteration  17: 911308.174 ops/s
Iteration  18: 915741.946 ops/s
Iteration  19: 916502.255 ops/s
Iteration  20: 914275.234 ops/s
Iteration  21: 905454.493 ops/s
Iteration  22: 915707.081 ops/s
Iteration  23: 914305.741 ops/s
Iteration  24: 915776.059 ops/s
Iteration  25: 916309.763 ops/s
Iteration  26: 917187.168 ops/s
Iteration  27: 913470.811 ops/s
Iteration  28: 915948.663 ops/s
Iteration  29: 914366.937 ops/s
Iteration  30: 910902.189 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_subListFromNegative":
  914748.848 ±(99.9%) 1660.657 ops/s [Average]
  (min, avg, max) = (905454.493, 914748.848, 917792.206), stdev = 2485.593
  CI (99.9%): [913088.191, 916409.505] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_subListFromNegative  thrpt   30  914748.848 ± 1660.657  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_subListToGreaterThanSize$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_subListToGreaterThanSize

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 660315.410 ops/s
# Warmup Iteration   2: 684346.830 ops/s
# Warmup Iteration   3: 800903.417 ops/s
# Warmup Iteration   4: 860492.523 ops/s
# Warmup Iteration   5: 861010.465 ops/s
# Warmup Iteration   6: 856221.393 ops/s
# Warmup Iteration   7: 860655.984 ops/s
# Warmup Iteration   8: 860109.686 ops/s
# Warmup Iteration   9: 858585.658 ops/s
# Warmup Iteration  10: 861217.930 ops/s
# Warmup Iteration  11: 859952.068 ops/s
# Warmup Iteration  12: 857969.053 ops/s
# Warmup Iteration  13: 859474.109 ops/s
# Warmup Iteration  14: 741069.476 ops/s
# Warmup Iteration  15: 844569.864 ops/s
# Warmup Iteration  16: 861045.326 ops/s
# Warmup Iteration  17: 897925.268 ops/s
# Warmup Iteration  18: 899937.368 ops/s
# Warmup Iteration  19: 901009.089 ops/s
# Warmup Iteration  20: 897828.804 ops/s
# Warmup Iteration  21: 899373.954 ops/s
# Warmup Iteration  22: 901220.109 ops/s
# Warmup Iteration  23: 901692.454 ops/s
# Warmup Iteration  24: 899832.918 ops/s
# Warmup Iteration  25: 896247.740 ops/s
# Warmup Iteration  26: 897716.501 ops/s
# Warmup Iteration  27: 898921.093 ops/s
# Warmup Iteration  28: 897963.285 ops/s
# Warmup Iteration  29: 896581.252 ops/s
# Warmup Iteration  30: 899273.465 ops/s
Iteration   1: 899080.789 ops/s
Iteration   2: 898557.251 ops/s
Iteration   3: 900062.812 ops/s
Iteration   4: 899539.515 ops/s
Iteration   5: 897299.399 ops/s
Iteration   6: 898012.480 ops/s
Iteration   7: 893524.646 ops/s
Iteration   8: 898832.617 ops/s
Iteration   9: 897710.661 ops/s
Iteration  10: 898361.639 ops/s
Iteration  11: 897998.452 ops/s
Iteration  12: 898996.187 ops/s
Iteration  13: 899100.675 ops/s
Iteration  14: 898968.399 ops/s
Iteration  15: 897648.389 ops/s
Iteration  16: 896213.318 ops/s
Iteration  17: 896990.766 ops/s
Iteration  18: 898946.696 ops/s
Iteration  19: 901863.467 ops/s
Iteration  20: 899635.277 ops/s
Iteration  21: 897357.272 ops/s
Iteration  22: 899263.200 ops/s
Iteration  23: 897975.767 ops/s
Iteration  24: 897990.618 ops/s
Iteration  25: 898629.592 ops/s
Iteration  26: 899866.964 ops/s
Iteration  27: 900700.823 ops/s
Iteration  28: 902521.333 ops/s
Iteration  29: 902042.505 ops/s
Iteration  30: 898430.666 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_subListToGreaterThanSize":
  898737.406 ±(99.9%) 1172.710 ops/s [Average]
  (min, avg, max) = (893524.646, 898737.406, 902521.333), stdev = 1755.257
  CI (99.9%): [897564.696, 899910.116] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_subListToGreaterThanSize  thrpt   30  898737.406 ± 1172.710  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_sumByDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_sumByDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 994405.982 ops/s
# Warmup Iteration   2: 1816119.626 ops/s
# Warmup Iteration   3: 2056037.960 ops/s
# Warmup Iteration   4: 2061185.853 ops/s
# Warmup Iteration   5: 2057500.121 ops/s
# Warmup Iteration   6: 1703222.047 ops/s
# Warmup Iteration   7: 2061479.416 ops/s
# Warmup Iteration   8: 2065255.549 ops/s
# Warmup Iteration   9: 2063567.431 ops/s
# Warmup Iteration  10: 2063367.019 ops/s
# Warmup Iteration  11: 2061261.860 ops/s
# Warmup Iteration  12: 2065003.031 ops/s
# Warmup Iteration  13: 2065901.011 ops/s
# Warmup Iteration  14: 2065655.673 ops/s
# Warmup Iteration  15: 2065910.196 ops/s
# Warmup Iteration  16: 2056843.079 ops/s
# Warmup Iteration  17: 2059465.975 ops/s
# Warmup Iteration  18: 2061436.425 ops/s
# Warmup Iteration  19: 2062957.909 ops/s
# Warmup Iteration  20: 2063320.536 ops/s
# Warmup Iteration  21: 2063140.925 ops/s
# Warmup Iteration  22: 2063745.303 ops/s
# Warmup Iteration  23: 2061136.400 ops/s
# Warmup Iteration  24: 2055308.043 ops/s
# Warmup Iteration  25: 2066094.683 ops/s
# Warmup Iteration  26: 2063158.087 ops/s
# Warmup Iteration  27: 2061710.278 ops/s
# Warmup Iteration  28: 2065779.335 ops/s
# Warmup Iteration  29: 2062028.386 ops/s
# Warmup Iteration  30: 2062903.989 ops/s
Iteration   1: 2067624.013 ops/s
Iteration   2: 2061631.721 ops/s
Iteration   3: 2063807.401 ops/s
Iteration   4: 2070991.528 ops/s
Iteration   5: 2062419.220 ops/s
Iteration   6: 2068693.723 ops/s
Iteration   7: 2064523.172 ops/s
Iteration   8: 2067105.768 ops/s
Iteration   9: 2058317.175 ops/s
Iteration  10: 2063986.039 ops/s
Iteration  11: 2067494.757 ops/s
Iteration  12: 2061048.541 ops/s
Iteration  13: 2067267.296 ops/s
Iteration  14: 2070030.019 ops/s
Iteration  15: 2056506.709 ops/s
Iteration  16: 2069565.146 ops/s
Iteration  17: 2059910.623 ops/s
Iteration  18: 2067146.739 ops/s
Iteration  19: 2068338.761 ops/s
Iteration  20: 2064071.838 ops/s
Iteration  21: 2064110.503 ops/s
Iteration  22: 2060630.306 ops/s
Iteration  23: 2071435.305 ops/s
Iteration  24: 2069996.772 ops/s
Iteration  25: 2055980.442 ops/s
Iteration  26: 2070164.973 ops/s
Iteration  27: 2066289.599 ops/s
Iteration  28: 2071160.750 ops/s
Iteration  29: 2061804.858 ops/s
Iteration  30: 2056169.896 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_sumByDouble":
  2064940.786 ±(99.9%) 3128.734 ops/s [Average]
  (min, avg, max) = (2055980.442, 2064940.786, 2071435.305), stdev = 4682.943
  CI (99.9%): [2061812.052, 2068069.521] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_sumByDouble  thrpt   30  2064940.786 ± 3128.734  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_sumByDoubleConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_sumByDoubleConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 60.065 ops/s
# Warmup Iteration   2: 66.296 ops/s
# Warmup Iteration   3: 83.506 ops/s
# Warmup Iteration   4: 88.207 ops/s
# Warmup Iteration   5: 96.416 ops/s
# Warmup Iteration   6: 98.483 ops/s
# Warmup Iteration   7: 98.430 ops/s
# Warmup Iteration   8: 98.909 ops/s
# Warmup Iteration   9: 100.786 ops/s
# Warmup Iteration  10: 81.923 ops/s
# Warmup Iteration  11: 99.103 ops/s
# Warmup Iteration  12: 99.803 ops/s
# Warmup Iteration  13: 99.764 ops/s
# Warmup Iteration  14: 99.723 ops/s
# Warmup Iteration  15: 99.660 ops/s
# Warmup Iteration  16: 99.371 ops/s
# Warmup Iteration  17: 98.416 ops/s
# Warmup Iteration  18: 98.439 ops/s
# Warmup Iteration  19: 97.476 ops/s
# Warmup Iteration  20: 98.952 ops/s
# Warmup Iteration  21: 98.542 ops/s
# Warmup Iteration  22: 98.739 ops/s
# Warmup Iteration  23: 98.567 ops/s
# Warmup Iteration  24: 97.951 ops/s
# Warmup Iteration  25: 97.502 ops/s
# Warmup Iteration  26: 98.789 ops/s
# Warmup Iteration  27: 98.727 ops/s
# Warmup Iteration  28: 98.994 ops/s
# Warmup Iteration  29: 98.139 ops/s
# Warmup Iteration  30: 98.082 ops/s
Iteration   1: 100.022 ops/s
Iteration   2: 97.618 ops/s
Iteration   3: 97.208 ops/s
Iteration   4: 97.967 ops/s
Iteration   5: 97.207 ops/s
Iteration   6: 98.547 ops/s
Iteration   7: 97.111 ops/s
Iteration   8: 95.983 ops/s
Iteration   9: 96.290 ops/s
Iteration  10: 96.251 ops/s
Iteration  11: 95.217 ops/s
Iteration  12: 97.362 ops/s
Iteration  13: 96.818 ops/s
Iteration  14: 96.456 ops/s
Iteration  15: 98.213 ops/s
Iteration  16: 98.385 ops/s
Iteration  17: 98.034 ops/s
Iteration  18: 97.093 ops/s
Iteration  19: 96.630 ops/s
Iteration  20: 97.662 ops/s
Iteration  21: 96.869 ops/s
Iteration  22: 96.749 ops/s
Iteration  23: 98.580 ops/s
Iteration  24: 98.385 ops/s
Iteration  25: 97.165 ops/s
Iteration  26: 98.031 ops/s
Iteration  27: 98.024 ops/s
Iteration  28: 97.727 ops/s
Iteration  29: 98.046 ops/s
Iteration  30: 98.269 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_sumByDoubleConsistentRounding":
  97.464 ±(99.9%) 0.646 ops/s [Average]
  (min, avg, max) = (95.217, 97.464, 100.022), stdev = 0.967
  CI (99.9%): [96.818, 98.110] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt   Score   Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_sumByDoubleConsistentRounding  thrpt   30  97.464 ± 0.646  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_sumByFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_sumByFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1003487.206 ops/s
# Warmup Iteration   2: 1840593.989 ops/s
# Warmup Iteration   3: 2080895.065 ops/s
# Warmup Iteration   4: 2086554.180 ops/s
# Warmup Iteration   5: 2041358.299 ops/s
# Warmup Iteration   6: 1769183.532 ops/s
# Warmup Iteration   7: 2088709.145 ops/s
# Warmup Iteration   8: 2091536.565 ops/s
# Warmup Iteration   9: 2089930.968 ops/s
# Warmup Iteration  10: 2088810.885 ops/s
# Warmup Iteration  11: 2094391.950 ops/s
# Warmup Iteration  12: 2087627.978 ops/s
# Warmup Iteration  13: 2087203.170 ops/s
# Warmup Iteration  14: 2089082.367 ops/s
# Warmup Iteration  15: 2089603.101 ops/s
# Warmup Iteration  16: 2093342.161 ops/s
# Warmup Iteration  17: 2090939.715 ops/s
# Warmup Iteration  18: 2090337.322 ops/s
# Warmup Iteration  19: 2092578.427 ops/s
# Warmup Iteration  20: 2090258.834 ops/s
# Warmup Iteration  21: 2091205.520 ops/s
# Warmup Iteration  22: 2091532.558 ops/s
# Warmup Iteration  23: 2094338.015 ops/s
# Warmup Iteration  24: 2086086.982 ops/s
# Warmup Iteration  25: 2093649.864 ops/s
# Warmup Iteration  26: 2091000.142 ops/s
# Warmup Iteration  27: 2088289.751 ops/s
# Warmup Iteration  28: 2092649.412 ops/s
# Warmup Iteration  29: 2092624.959 ops/s
# Warmup Iteration  30: 2091092.106 ops/s
Iteration   1: 2086256.693 ops/s
Iteration   2: 2095536.844 ops/s
Iteration   3: 2091459.249 ops/s
Iteration   4: 2090799.081 ops/s
Iteration   5: 2094433.562 ops/s
Iteration   6: 2090199.233 ops/s
Iteration   7: 2082667.181 ops/s
Iteration   8: 2094706.119 ops/s
Iteration   9: 2086420.313 ops/s
Iteration  10: 2094487.650 ops/s
Iteration  11: 2091249.768 ops/s
Iteration  12: 2087765.715 ops/s
Iteration  13: 2090414.583 ops/s
Iteration  14: 2092844.380 ops/s
Iteration  15: 2094697.993 ops/s
Iteration  16: 2089938.529 ops/s
Iteration  17: 2092464.956 ops/s
Iteration  18: 2091801.822 ops/s
Iteration  19: 2091834.707 ops/s
Iteration  20: 2094138.337 ops/s
Iteration  21: 2091862.570 ops/s
Iteration  22: 2092639.682 ops/s
Iteration  23: 2096633.554 ops/s
Iteration  24: 2089685.360 ops/s
Iteration  25: 2095850.208 ops/s
Iteration  26: 2092081.437 ops/s
Iteration  27: 2087739.304 ops/s
Iteration  28: 2091298.994 ops/s
Iteration  29: 2091699.044 ops/s
Iteration  30: 2093259.812 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_sumByFloat":
  2091562.223 ±(99.9%) 2086.744 ops/s [Average]
  (min, avg, max) = (2082667.181, 2091562.223, 2096633.554), stdev = 3123.340
  CI (99.9%): [2089475.479, 2093648.967] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_sumByFloat  thrpt   30  2091562.223 ± 2086.744  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_sumByFloatConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_sumByFloatConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 59.972 ops/s
# Warmup Iteration   2: 69.824 ops/s
# Warmup Iteration   3: 96.492 ops/s
# Warmup Iteration   4: 96.463 ops/s
# Warmup Iteration   5: 96.184 ops/s
# Warmup Iteration   6: 97.040 ops/s
# Warmup Iteration   7: 98.545 ops/s
# Warmup Iteration   8: 99.158 ops/s
# Warmup Iteration   9: 95.801 ops/s
# Warmup Iteration  10: 76.728 ops/s
# Warmup Iteration  11: 87.018 ops/s
# Warmup Iteration  12: 86.932 ops/s
# Warmup Iteration  13: 95.841 ops/s
# Warmup Iteration  14: 99.859 ops/s
# Warmup Iteration  15: 98.400 ops/s
# Warmup Iteration  16: 96.984 ops/s
# Warmup Iteration  17: 95.963 ops/s
# Warmup Iteration  18: 95.763 ops/s
# Warmup Iteration  19: 97.571 ops/s
# Warmup Iteration  20: 97.675 ops/s
# Warmup Iteration  21: 95.877 ops/s
# Warmup Iteration  22: 97.962 ops/s
# Warmup Iteration  23: 97.644 ops/s
# Warmup Iteration  24: 96.661 ops/s
# Warmup Iteration  25: 97.131 ops/s
# Warmup Iteration  26: 96.635 ops/s
# Warmup Iteration  27: 97.291 ops/s
# Warmup Iteration  28: 95.880 ops/s
# Warmup Iteration  29: 97.853 ops/s
# Warmup Iteration  30: 97.219 ops/s
Iteration   1: 97.731 ops/s
Iteration   2: 97.850 ops/s
Iteration   3: 94.605 ops/s
Iteration   4: 95.451 ops/s
Iteration   5: 97.662 ops/s
Iteration   6: 95.865 ops/s
Iteration   7: 96.761 ops/s
Iteration   8: 95.892 ops/s
Iteration   9: 95.443 ops/s
Iteration  10: 95.199 ops/s
Iteration  11: 95.966 ops/s
Iteration  12: 94.810 ops/s
Iteration  13: 96.397 ops/s
Iteration  14: 98.910 ops/s
Iteration  15: 98.375 ops/s
Iteration  16: 97.842 ops/s
Iteration  17: 98.105 ops/s
Iteration  18: 97.890 ops/s
Iteration  19: 97.591 ops/s
Iteration  20: 97.670 ops/s
Iteration  21: 95.106 ops/s
Iteration  22: 95.236 ops/s
Iteration  23: 96.604 ops/s
Iteration  24: 96.936 ops/s
Iteration  25: 97.408 ops/s
Iteration  26: 96.048 ops/s
Iteration  27: 97.886 ops/s
Iteration  28: 97.658 ops/s
Iteration  29: 96.331 ops/s
Iteration  30: 97.253 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_sumByFloatConsistentRounding":
  96.749 ±(99.9%) 0.796 ops/s [Average]
  (min, avg, max) = (94.605, 96.749, 98.910), stdev = 1.191
  CI (99.9%): [95.954, 97.545] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt   Score   Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_sumByFloatConsistentRounding  thrpt   30  96.749 ± 0.796  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_sumByInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_sumByInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1372950.556 ops/s
# Warmup Iteration   2: 2684583.025 ops/s
# Warmup Iteration   3: 2934629.976 ops/s
# Warmup Iteration   4: 2949300.245 ops/s
# Warmup Iteration   5: 2429411.128 ops/s
# Warmup Iteration   6: 2950748.231 ops/s
# Warmup Iteration   7: 2946490.735 ops/s
# Warmup Iteration   8: 2949762.713 ops/s
# Warmup Iteration   9: 2950861.073 ops/s
# Warmup Iteration  10: 2941785.327 ops/s
# Warmup Iteration  11: 2938825.027 ops/s
# Warmup Iteration  12: 2947342.431 ops/s
# Warmup Iteration  13: 2948464.749 ops/s
# Warmup Iteration  14: 2939669.194 ops/s
# Warmup Iteration  15: 2951749.464 ops/s
# Warmup Iteration  16: 2948384.699 ops/s
# Warmup Iteration  17: 2952064.392 ops/s
# Warmup Iteration  18: 2957941.842 ops/s
# Warmup Iteration  19: 2954715.355 ops/s
# Warmup Iteration  20: 2950882.791 ops/s
# Warmup Iteration  21: 2950726.389 ops/s
# Warmup Iteration  22: 2947229.484 ops/s
# Warmup Iteration  23: 2925204.660 ops/s
# Warmup Iteration  24: 2942718.520 ops/s
# Warmup Iteration  25: 2956633.440 ops/s
# Warmup Iteration  26: 2947049.616 ops/s
# Warmup Iteration  27: 2953152.713 ops/s
# Warmup Iteration  28: 2953727.765 ops/s
# Warmup Iteration  29: 2950337.214 ops/s
# Warmup Iteration  30: 2957081.226 ops/s
Iteration   1: 2956802.850 ops/s
Iteration   2: 2948252.848 ops/s
Iteration   3: 2950306.372 ops/s
Iteration   4: 2946770.843 ops/s
Iteration   5: 2958796.115 ops/s
Iteration   6: 2936342.863 ops/s
Iteration   7: 2951693.125 ops/s
Iteration   8: 2955452.506 ops/s
Iteration   9: 2939077.233 ops/s
Iteration  10: 2956442.691 ops/s
Iteration  11: 2956522.210 ops/s
Iteration  12: 2951466.774 ops/s
Iteration  13: 2955380.854 ops/s
Iteration  14: 2950709.351 ops/s
Iteration  15: 2959031.934 ops/s
Iteration  16: 2947231.528 ops/s
Iteration  17: 2950793.375 ops/s
Iteration  18: 2962145.717 ops/s
Iteration  19: 2956532.827 ops/s
Iteration  20: 2946626.376 ops/s
Iteration  21: 2960624.757 ops/s
Iteration  22: 2958216.936 ops/s
Iteration  23: 2953108.992 ops/s
Iteration  24: 2958922.830 ops/s
Iteration  25: 2952457.858 ops/s
Iteration  26: 2957959.225 ops/s
Iteration  27: 2954563.578 ops/s
Iteration  28: 2949770.430 ops/s
Iteration  29: 2954392.486 ops/s
Iteration  30: 2961627.473 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_sumByInt":
  2953267.432 ±(99.9%) 4071.374 ops/s [Average]
  (min, avg, max) = (2936342.863, 2953267.432, 2962145.717), stdev = 6093.842
  CI (99.9%): [2949196.058, 2957338.806] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_sumByInt  thrpt   30  2953267.432 ± 4071.374  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_sumByLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_sumByLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1394938.702 ops/s
# Warmup Iteration   2: 2609763.979 ops/s
# Warmup Iteration   3: 2870963.696 ops/s
# Warmup Iteration   4: 2885817.367 ops/s
# Warmup Iteration   5: 2529466.869 ops/s
# Warmup Iteration   6: 2746580.820 ops/s
# Warmup Iteration   7: 2880967.654 ops/s
# Warmup Iteration   8: 2880841.943 ops/s
# Warmup Iteration   9: 2876138.317 ops/s
# Warmup Iteration  10: 2869363.191 ops/s
# Warmup Iteration  11: 2877223.676 ops/s
# Warmup Iteration  12: 2879452.110 ops/s
# Warmup Iteration  13: 2882590.621 ops/s
# Warmup Iteration  14: 2877306.949 ops/s
# Warmup Iteration  15: 2886118.292 ops/s
# Warmup Iteration  16: 2875835.198 ops/s
# Warmup Iteration  17: 2877056.335 ops/s
# Warmup Iteration  18: 2884778.072 ops/s
# Warmup Iteration  19: 2883103.204 ops/s
# Warmup Iteration  20: 2883491.691 ops/s
# Warmup Iteration  21: 2876999.893 ops/s
# Warmup Iteration  22: 2886823.012 ops/s
# Warmup Iteration  23: 2888738.703 ops/s
# Warmup Iteration  24: 2886526.672 ops/s
# Warmup Iteration  25: 2882155.532 ops/s
# Warmup Iteration  26: 2886354.390 ops/s
# Warmup Iteration  27: 2883151.709 ops/s
# Warmup Iteration  28: 2880316.324 ops/s
# Warmup Iteration  29: 2881873.999 ops/s
# Warmup Iteration  30: 2887679.924 ops/s
Iteration   1: 2883257.945 ops/s
Iteration   2: 2884842.751 ops/s
Iteration   3: 2880293.494 ops/s
Iteration   4: 2886290.358 ops/s
Iteration   5: 2882086.301 ops/s
Iteration   6: 2878783.446 ops/s
Iteration   7: 2888043.784 ops/s
Iteration   8: 2882334.692 ops/s
Iteration   9: 2880125.523 ops/s
Iteration  10: 2890697.305 ops/s
Iteration  11: 2883167.132 ops/s
Iteration  12: 2887448.230 ops/s
Iteration  13: 2884500.114 ops/s
Iteration  14: 2883349.687 ops/s
Iteration  15: 2890173.491 ops/s
Iteration  16: 2888951.402 ops/s
Iteration  17: 2881692.662 ops/s
Iteration  18: 2886262.132 ops/s
Iteration  19: 2885849.459 ops/s
Iteration  20: 2890735.864 ops/s
Iteration  21: 2887590.890 ops/s
Iteration  22: 2885790.768 ops/s
Iteration  23: 2886305.856 ops/s
Iteration  24: 2878053.356 ops/s
Iteration  25: 2883789.669 ops/s
Iteration  26: 2888869.723 ops/s
Iteration  27: 2880857.079 ops/s
Iteration  28: 2883904.817 ops/s
Iteration  29: 2883702.838 ops/s
Iteration  30: 2882406.459 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_sumByLong":
  2884671.908 ±(99.9%) 2303.543 ops/s [Average]
  (min, avg, max) = (2878053.356, 2884671.908, 2890735.864), stdev = 3447.835
  CI (99.9%): [2882368.365, 2886975.450] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_sumByLong  thrpt   30  2884671.908 ± 2303.543  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_sumDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_sumDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11638438.307 ops/s
# Warmup Iteration   2: 23810843.353 ops/s
# Warmup Iteration   3: 24301765.305 ops/s
# Warmup Iteration   4: 21080864.450 ops/s
# Warmup Iteration   5: 23734451.504 ops/s
# Warmup Iteration   6: 24288850.767 ops/s
# Warmup Iteration   7: 24322984.899 ops/s
# Warmup Iteration   8: 24317338.765 ops/s
# Warmup Iteration   9: 24307243.045 ops/s
# Warmup Iteration  10: 24376840.508 ops/s
# Warmup Iteration  11: 24233050.181 ops/s
# Warmup Iteration  12: 24332151.289 ops/s
# Warmup Iteration  13: 24390100.268 ops/s
# Warmup Iteration  14: 24346820.868 ops/s
# Warmup Iteration  15: 24254537.150 ops/s
# Warmup Iteration  16: 24341470.661 ops/s
# Warmup Iteration  17: 24300062.651 ops/s
# Warmup Iteration  18: 24354902.641 ops/s
# Warmup Iteration  19: 24306462.965 ops/s
# Warmup Iteration  20: 24317487.480 ops/s
# Warmup Iteration  21: 24334634.640 ops/s
# Warmup Iteration  22: 24283160.906 ops/s
# Warmup Iteration  23: 24308386.946 ops/s
# Warmup Iteration  24: 24331672.542 ops/s
# Warmup Iteration  25: 24321684.586 ops/s
# Warmup Iteration  26: 24387680.483 ops/s
# Warmup Iteration  27: 24105599.971 ops/s
# Warmup Iteration  28: 24303100.469 ops/s
# Warmup Iteration  29: 24332756.802 ops/s
# Warmup Iteration  30: 24342983.142 ops/s
Iteration   1: 24257616.979 ops/s
Iteration   2: 24312349.546 ops/s
Iteration   3: 24357956.810 ops/s
Iteration   4: 24367874.265 ops/s
Iteration   5: 24324443.711 ops/s
Iteration   6: 24195551.191 ops/s
Iteration   7: 24391843.038 ops/s
Iteration   8: 24398390.417 ops/s
Iteration   9: 24368488.757 ops/s
Iteration  10: 24363228.784 ops/s
Iteration  11: 24312586.898 ops/s
Iteration  12: 24370716.791 ops/s
Iteration  13: 24290253.523 ops/s
Iteration  14: 24435538.792 ops/s
Iteration  15: 24320278.626 ops/s
Iteration  16: 24330622.081 ops/s
Iteration  17: 24333431.773 ops/s
Iteration  18: 24371337.431 ops/s
Iteration  19: 24400370.739 ops/s
Iteration  20: 24399362.804 ops/s
Iteration  21: 24358269.590 ops/s
Iteration  22: 24352544.317 ops/s
Iteration  23: 24357729.402 ops/s
Iteration  24: 24335530.504 ops/s
Iteration  25: 24375890.682 ops/s
Iteration  26: 24249327.739 ops/s
Iteration  27: 24372732.595 ops/s
Iteration  28: 24363681.185 ops/s
Iteration  29: 24366519.147 ops/s
Iteration  30: 24349297.102 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_sumDouble":
  24346125.507 ±(99.9%) 33013.073 ops/s [Average]
  (min, avg, max) = (24195551.191, 24346125.507, 24435538.792), stdev = 49412.417
  CI (99.9%): [24313112.434, 24379138.580] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_sumDouble  thrpt   30  24346125.507 ± 33013.073  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_sumFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_sumFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11077387.951 ops/s
# Warmup Iteration   2: 20130527.489 ops/s
# Warmup Iteration   3: 21876191.874 ops/s
# Warmup Iteration   4: 22060469.653 ops/s
# Warmup Iteration   5: 18668887.477 ops/s
# Warmup Iteration   6: 22096250.265 ops/s
# Warmup Iteration   7: 22136394.318 ops/s
# Warmup Iteration   8: 22077014.086 ops/s
# Warmup Iteration   9: 22102208.937 ops/s
# Warmup Iteration  10: 22072482.505 ops/s
# Warmup Iteration  11: 22051773.952 ops/s
# Warmup Iteration  12: 22095303.274 ops/s
# Warmup Iteration  13: 22090213.518 ops/s
# Warmup Iteration  14: 22046726.173 ops/s
# Warmup Iteration  15: 22122487.086 ops/s
# Warmup Iteration  16: 22041927.003 ops/s
# Warmup Iteration  17: 22126681.358 ops/s
# Warmup Iteration  18: 22080896.737 ops/s
# Warmup Iteration  19: 22061913.702 ops/s
# Warmup Iteration  20: 22090070.600 ops/s
# Warmup Iteration  21: 22101089.795 ops/s
# Warmup Iteration  22: 22072982.670 ops/s
# Warmup Iteration  23: 22111217.005 ops/s
# Warmup Iteration  24: 22089347.763 ops/s
# Warmup Iteration  25: 22081445.772 ops/s
# Warmup Iteration  26: 22090373.668 ops/s
# Warmup Iteration  27: 22103026.604 ops/s
# Warmup Iteration  28: 22100281.680 ops/s
# Warmup Iteration  29: 22081320.609 ops/s
# Warmup Iteration  30: 22094025.013 ops/s
Iteration   1: 22047393.483 ops/s
Iteration   2: 22055974.362 ops/s
Iteration   3: 22078277.698 ops/s
Iteration   4: 22142130.450 ops/s
Iteration   5: 22044180.952 ops/s
Iteration   6: 22076530.421 ops/s
Iteration   7: 22076979.535 ops/s
Iteration   8: 22080157.557 ops/s
Iteration   9: 22057245.960 ops/s
Iteration  10: 22097779.952 ops/s
Iteration  11: 22055422.881 ops/s
Iteration  12: 22138514.824 ops/s
Iteration  13: 22120767.003 ops/s
Iteration  14: 22108431.628 ops/s
Iteration  15: 22055881.403 ops/s
Iteration  16: 22113293.299 ops/s
Iteration  17: 22101362.481 ops/s
Iteration  18: 22056290.769 ops/s
Iteration  19: 22063935.435 ops/s
Iteration  20: 22142258.945 ops/s
Iteration  21: 22068589.379 ops/s
Iteration  22: 22022454.810 ops/s
Iteration  23: 22099924.834 ops/s
Iteration  24: 22115316.637 ops/s
Iteration  25: 22036216.724 ops/s
Iteration  26: 22057429.342 ops/s
Iteration  27: 22132447.892 ops/s
Iteration  28: 22055998.837 ops/s
Iteration  29: 22049094.001 ops/s
Iteration  30: 22063622.663 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_sumFloat":
  22080463.472 ±(99.9%) 22550.908 ops/s [Average]
  (min, avg, max) = (22022454.810, 22080463.472, 22142258.945), stdev = 33753.140
  CI (99.9%): [22057912.564, 22103014.380] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_sumFloat  thrpt   30  22080463.472 ± 22550.908  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_sumInteger$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_sumInteger

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 15001450.698 ops/s
# Warmup Iteration   2: 30240742.925 ops/s
# Warmup Iteration   3: 31733008.803 ops/s
# Warmup Iteration   4: 26911713.380 ops/s
# Warmup Iteration   5: 31775156.873 ops/s
# Warmup Iteration   6: 31814650.961 ops/s
# Warmup Iteration   7: 31777007.185 ops/s
# Warmup Iteration   8: 31761912.501 ops/s
# Warmup Iteration   9: 31856685.137 ops/s
# Warmup Iteration  10: 31831476.453 ops/s
# Warmup Iteration  11: 31396429.004 ops/s
# Warmup Iteration  12: 31736366.878 ops/s
# Warmup Iteration  13: 31768574.133 ops/s
# Warmup Iteration  14: 31869831.474 ops/s
# Warmup Iteration  15: 31875543.643 ops/s
# Warmup Iteration  16: 31815343.831 ops/s
# Warmup Iteration  17: 31847295.044 ops/s
# Warmup Iteration  18: 31849977.060 ops/s
# Warmup Iteration  19: 31859143.288 ops/s
# Warmup Iteration  20: 31817273.148 ops/s
# Warmup Iteration  21: 31802150.478 ops/s
# Warmup Iteration  22: 31866792.936 ops/s
# Warmup Iteration  23: 31798438.192 ops/s
# Warmup Iteration  24: 31800194.035 ops/s
# Warmup Iteration  25: 31828976.921 ops/s
# Warmup Iteration  26: 31857079.147 ops/s
# Warmup Iteration  27: 31872465.772 ops/s
# Warmup Iteration  28: 31835494.461 ops/s
# Warmup Iteration  29: 31862038.439 ops/s
# Warmup Iteration  30: 31836484.837 ops/s
Iteration   1: 31850549.912 ops/s
Iteration   2: 31870973.557 ops/s
Iteration   3: 31858054.605 ops/s
Iteration   4: 31854099.130 ops/s
Iteration   5: 31844485.064 ops/s
Iteration   6: 31840890.860 ops/s
Iteration   7: 31875402.663 ops/s
Iteration   8: 31752000.260 ops/s
Iteration   9: 31850579.099 ops/s
Iteration  10: 31804938.517 ops/s
Iteration  11: 31805782.229 ops/s
Iteration  12: 31724022.530 ops/s
Iteration  13: 31882771.096 ops/s
Iteration  14: 31803048.597 ops/s
Iteration  15: 31818161.911 ops/s
Iteration  16: 31891832.011 ops/s
Iteration  17: 31880787.503 ops/s
Iteration  18: 31830505.675 ops/s
Iteration  19: 31820807.268 ops/s
Iteration  20: 30336435.775 ops/s
Iteration  21: 31420123.073 ops/s
Iteration  22: 31881816.121 ops/s
Iteration  23: 31861801.525 ops/s
Iteration  24: 31886363.856 ops/s
Iteration  25: 31879749.844 ops/s
Iteration  26: 31900640.399 ops/s
Iteration  27: 31911437.428 ops/s
Iteration  28: 31835301.624 ops/s
Iteration  29: 31884169.811 ops/s
Iteration  30: 31783150.610 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_sumInteger":
  31781356.085 ±(99.9%) 191753.361 ops/s [Average]
  (min, avg, max) = (30336435.775, 31781356.085, 31911437.428), stdev = 287007.425
  CI (99.9%): [31589602.724, 31973109.446] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score        Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_sumInteger  thrpt   30  31781356.085 ± 191753.361  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_sumLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_sumLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 15258161.509 ops/s
# Warmup Iteration   2: 30983129.780 ops/s
# Warmup Iteration   3: 29321550.629 ops/s
# Warmup Iteration   4: 24817834.759 ops/s
# Warmup Iteration   5: 29488123.814 ops/s
# Warmup Iteration   6: 29459253.778 ops/s
# Warmup Iteration   7: 29479805.732 ops/s
# Warmup Iteration   8: 29393232.719 ops/s
# Warmup Iteration   9: 29403086.003 ops/s
# Warmup Iteration  10: 29404676.173 ops/s
# Warmup Iteration  11: 29446301.498 ops/s
# Warmup Iteration  12: 29486940.708 ops/s
# Warmup Iteration  13: 29433163.073 ops/s
# Warmup Iteration  14: 29460651.880 ops/s
# Warmup Iteration  15: 29408603.589 ops/s
# Warmup Iteration  16: 29424485.498 ops/s
# Warmup Iteration  17: 29529983.415 ops/s
# Warmup Iteration  18: 29456563.014 ops/s
# Warmup Iteration  19: 29422218.059 ops/s
# Warmup Iteration  20: 29488092.757 ops/s
# Warmup Iteration  21: 29453490.895 ops/s
# Warmup Iteration  22: 29512309.321 ops/s
# Warmup Iteration  23: 29413704.953 ops/s
# Warmup Iteration  24: 29390973.452 ops/s
# Warmup Iteration  25: 29440961.155 ops/s
# Warmup Iteration  26: 29478819.199 ops/s
# Warmup Iteration  27: 29444317.801 ops/s
# Warmup Iteration  28: 29438675.283 ops/s
# Warmup Iteration  29: 29386122.672 ops/s
# Warmup Iteration  30: 29410700.181 ops/s
Iteration   1: 29416948.274 ops/s
Iteration   2: 29445591.126 ops/s
Iteration   3: 29416280.207 ops/s
Iteration   4: 29395077.459 ops/s
Iteration   5: 29402908.920 ops/s
Iteration   6: 29418649.052 ops/s
Iteration   7: 29437561.241 ops/s
Iteration   8: 29448765.961 ops/s
Iteration   9: 29363531.682 ops/s
Iteration  10: 29426173.329 ops/s
Iteration  11: 29495997.751 ops/s
Iteration  12: 29504299.684 ops/s
Iteration  13: 29536033.989 ops/s
Iteration  14: 29372205.493 ops/s
Iteration  15: 29347341.468 ops/s
Iteration  16: 29447773.023 ops/s
Iteration  17: 29355661.440 ops/s
Iteration  18: 29490266.385 ops/s
Iteration  19: 29452230.542 ops/s
Iteration  20: 29403844.059 ops/s
Iteration  21: 29339486.214 ops/s
Iteration  22: 29525078.847 ops/s
Iteration  23: 29393324.669 ops/s
Iteration  24: 29455206.832 ops/s
Iteration  25: 29420725.672 ops/s
Iteration  26: 29382893.386 ops/s
Iteration  27: 29348388.978 ops/s
Iteration  28: 29395592.252 ops/s
Iteration  29: 29491509.676 ops/s
Iteration  30: 29369522.102 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_sumLong":
  29423295.657 ±(99.9%) 36155.141 ops/s [Average]
  (min, avg, max) = (29339486.214, 29423295.657, 29536033.989), stdev = 54115.317
  CI (99.9%): [29387140.516, 29459450.798] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_sumLong  thrpt   30  29423295.657 ± 36155.141  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_take$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_take

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2312025.371 ops/s
# Warmup Iteration   2: 5430798.522 ops/s
# Warmup Iteration   3: 5800134.424 ops/s
# Warmup Iteration   4: 5824827.317 ops/s
# Warmup Iteration   5: 4872423.495 ops/s
# Warmup Iteration   6: 5833084.257 ops/s
# Warmup Iteration   7: 5811848.413 ops/s
# Warmup Iteration   8: 5828427.919 ops/s
# Warmup Iteration   9: 5822314.129 ops/s
# Warmup Iteration  10: 5836424.496 ops/s
# Warmup Iteration  11: 5813631.478 ops/s
# Warmup Iteration  12: 5821351.594 ops/s
# Warmup Iteration  13: 5831308.595 ops/s
# Warmup Iteration  14: 5829871.821 ops/s
# Warmup Iteration  15: 5834560.093 ops/s
# Warmup Iteration  16: 5825958.827 ops/s
# Warmup Iteration  17: 5819677.477 ops/s
# Warmup Iteration  18: 5833215.726 ops/s
# Warmup Iteration  19: 5837596.230 ops/s
# Warmup Iteration  20: 5840341.788 ops/s
# Warmup Iteration  21: 5836721.557 ops/s
# Warmup Iteration  22: 5832407.574 ops/s
# Warmup Iteration  23: 5837566.003 ops/s
# Warmup Iteration  24: 5833973.566 ops/s
# Warmup Iteration  25: 5837423.932 ops/s
# Warmup Iteration  26: 5826628.774 ops/s
# Warmup Iteration  27: 5823990.433 ops/s
# Warmup Iteration  28: 5839433.544 ops/s
# Warmup Iteration  29: 5826734.781 ops/s
# Warmup Iteration  30: 5835608.231 ops/s
Iteration   1: 5833519.925 ops/s
Iteration   2: 5828034.561 ops/s
Iteration   3: 5835676.652 ops/s
Iteration   4: 5835450.168 ops/s
Iteration   5: 5832949.724 ops/s
Iteration   6: 5845991.883 ops/s
Iteration   7: 5836927.005 ops/s
Iteration   8: 5836639.088 ops/s
Iteration   9: 5853658.722 ops/s
Iteration  10: 5832438.470 ops/s
Iteration  11: 5822167.887 ops/s
Iteration  12: 5836639.030 ops/s
Iteration  13: 5845386.087 ops/s
Iteration  14: 5829698.644 ops/s
Iteration  15: 5827535.833 ops/s
Iteration  16: 5842738.123 ops/s
Iteration  17: 5821460.442 ops/s
Iteration  18: 5836962.065 ops/s
Iteration  19: 5850207.463 ops/s
Iteration  20: 5831063.493 ops/s
Iteration  21: 5838626.687 ops/s
Iteration  22: 5829848.037 ops/s
Iteration  23: 5822569.848 ops/s
Iteration  24: 5822060.330 ops/s
Iteration  25: 5823574.400 ops/s
Iteration  26: 5836844.206 ops/s
Iteration  27: 5819537.832 ops/s
Iteration  28: 5814810.521 ops/s
Iteration  29: 5827812.053 ops/s
Iteration  30: 5824012.715 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_take":
  5832494.730 ±(99.9%) 6223.990 ops/s [Average]
  (min, avg, max) = (5814810.521, 5832494.730, 5853658.722), stdev = 9315.775
  CI (99.9%): [5826270.740, 5838718.719] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_take  thrpt   30  5832494.730 ± 6223.990  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_takeWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_takeWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6742879.599 ops/s
# Warmup Iteration   2: 14475968.941 ops/s
# Warmup Iteration   3: 14546474.579 ops/s
# Warmup Iteration   4: 12043802.009 ops/s
# Warmup Iteration   5: 14150639.538 ops/s
# Warmup Iteration   6: 14149889.735 ops/s
# Warmup Iteration   7: 14169400.900 ops/s
# Warmup Iteration   8: 14147136.893 ops/s
# Warmup Iteration   9: 14165106.486 ops/s
# Warmup Iteration  10: 14130638.859 ops/s
# Warmup Iteration  11: 14102676.267 ops/s
# Warmup Iteration  12: 14159058.202 ops/s
# Warmup Iteration  13: 14157018.186 ops/s
# Warmup Iteration  14: 14152977.025 ops/s
# Warmup Iteration  15: 14153944.041 ops/s
# Warmup Iteration  16: 14115476.785 ops/s
# Warmup Iteration  17: 14119740.584 ops/s
# Warmup Iteration  18: 14155942.176 ops/s
# Warmup Iteration  19: 14117191.413 ops/s
# Warmup Iteration  20: 14122667.015 ops/s
# Warmup Iteration  21: 14154073.857 ops/s
# Warmup Iteration  22: 14132267.553 ops/s
# Warmup Iteration  23: 14105632.897 ops/s
# Warmup Iteration  24: 14168372.431 ops/s
# Warmup Iteration  25: 14150738.681 ops/s
# Warmup Iteration  26: 14133713.983 ops/s
# Warmup Iteration  27: 14168572.478 ops/s
# Warmup Iteration  28: 14141656.239 ops/s
# Warmup Iteration  29: 14112239.128 ops/s
# Warmup Iteration  30: 14164566.639 ops/s
Iteration   1: 14182318.077 ops/s
Iteration   2: 14118009.273 ops/s
Iteration   3: 14172252.632 ops/s
Iteration   4: 14136246.249 ops/s
Iteration   5: 14132113.019 ops/s
Iteration   6: 14147698.006 ops/s
Iteration   7: 14121601.603 ops/s
Iteration   8: 14167692.217 ops/s
Iteration   9: 14143422.622 ops/s
Iteration  10: 14156110.366 ops/s
Iteration  11: 14159065.650 ops/s
Iteration  12: 14144669.060 ops/s
Iteration  13: 14089517.609 ops/s
Iteration  14: 14155520.024 ops/s
Iteration  15: 14168718.433 ops/s
Iteration  16: 14157878.986 ops/s
Iteration  17: 14165909.277 ops/s
Iteration  18: 14111823.975 ops/s
Iteration  19: 14171495.639 ops/s
Iteration  20: 14150846.975 ops/s
Iteration  21: 14160477.054 ops/s
Iteration  22: 14151344.589 ops/s
Iteration  23: 14142784.298 ops/s
Iteration  24: 14196449.274 ops/s
Iteration  25: 14170687.240 ops/s
Iteration  26: 14214895.835 ops/s
Iteration  27: 14173803.494 ops/s
Iteration  28: 14164578.263 ops/s
Iteration  29: 14159014.266 ops/s
Iteration  30: 14099258.510 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_takeWhile":
  14152873.417 ±(99.9%) 17897.482 ops/s [Average]
  (min, avg, max) = (14089517.609, 14152873.417, 14214895.835), stdev = 26788.111
  CI (99.9%): [14134975.935, 14170770.899] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_takeWhile  thrpt   30  14152873.417 ± 17897.482  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_take_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_take_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 741500.203 ops/s
# Warmup Iteration   2: 761715.737 ops/s
# Warmup Iteration   3: 995956.512 ops/s
# Warmup Iteration   4: 992102.149 ops/s
# Warmup Iteration   5: 988596.513 ops/s
# Warmup Iteration   6: 995026.603 ops/s
# Warmup Iteration   7: 989975.348 ops/s
# Warmup Iteration   8: 991316.592 ops/s
# Warmup Iteration   9: 990455.242 ops/s
# Warmup Iteration  10: 992005.073 ops/s
# Warmup Iteration  11: 990240.972 ops/s
# Warmup Iteration  12: 846815.866 ops/s
# Warmup Iteration  13: 988860.048 ops/s
# Warmup Iteration  14: 989430.558 ops/s
# Warmup Iteration  15: 981024.032 ops/s
# Warmup Iteration  16: 987076.726 ops/s
# Warmup Iteration  17: 1042422.251 ops/s
# Warmup Iteration  18: 1038993.164 ops/s
# Warmup Iteration  19: 1035544.232 ops/s
# Warmup Iteration  20: 1038510.311 ops/s
# Warmup Iteration  21: 1049962.986 ops/s
# Warmup Iteration  22: 1043627.141 ops/s
# Warmup Iteration  23: 1043699.700 ops/s
# Warmup Iteration  24: 1039790.671 ops/s
# Warmup Iteration  25: 1045184.903 ops/s
# Warmup Iteration  26: 1042484.750 ops/s
# Warmup Iteration  27: 1042789.235 ops/s
# Warmup Iteration  28: 1040787.974 ops/s
# Warmup Iteration  29: 1041164.934 ops/s
# Warmup Iteration  30: 1043170.391 ops/s
Iteration   1: 1039195.183 ops/s
Iteration   2: 1041369.166 ops/s
Iteration   3: 1043697.270 ops/s
Iteration   4: 1039918.141 ops/s
Iteration   5: 1044920.553 ops/s
Iteration   6: 1029010.080 ops/s
Iteration   7: 1038567.958 ops/s
Iteration   8: 1040985.553 ops/s
Iteration   9: 1043799.680 ops/s
Iteration  10: 1041046.006 ops/s
Iteration  11: 1042018.136 ops/s
Iteration  12: 1048309.493 ops/s
Iteration  13: 1036116.509 ops/s
Iteration  14: 1031038.304 ops/s
Iteration  15: 1041176.880 ops/s
Iteration  16: 1038091.319 ops/s
Iteration  17: 1041322.434 ops/s
Iteration  18: 1046613.990 ops/s
Iteration  19: 1040449.077 ops/s
Iteration  20: 1036932.437 ops/s
Iteration  21: 1039255.275 ops/s
Iteration  22: 1042884.501 ops/s
Iteration  23: 1039063.127 ops/s
Iteration  24: 1039163.450 ops/s
Iteration  25: 1044258.602 ops/s
Iteration  26: 1042078.033 ops/s
Iteration  27: 1030010.173 ops/s
Iteration  28: 1041542.812 ops/s
Iteration  29: 1036049.317 ops/s
Iteration  30: 1036773.670 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_take_throws":
  1039855.238 ±(99.9%) 2959.064 ops/s [Average]
  (min, avg, max) = (1029010.080, 1039855.238, 1048309.493), stdev = 4428.988
  CI (99.9%): [1036896.174, 1042814.301] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_take_throws  thrpt   30  1039855.238 ± 2959.064  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_tap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_tap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13281496.847 ops/s
# Warmup Iteration   2: 27115107.525 ops/s
# Warmup Iteration   3: 23377667.728 ops/s
# Warmup Iteration   4: 27617192.682 ops/s
# Warmup Iteration   5: 27598772.030 ops/s
# Warmup Iteration   6: 27637283.134 ops/s
# Warmup Iteration   7: 27602391.964 ops/s
# Warmup Iteration   8: 27518369.580 ops/s
# Warmup Iteration   9: 27549369.143 ops/s
# Warmup Iteration  10: 27536623.376 ops/s
# Warmup Iteration  11: 27576230.028 ops/s
# Warmup Iteration  12: 27551674.477 ops/s
# Warmup Iteration  13: 27556893.642 ops/s
# Warmup Iteration  14: 27585465.974 ops/s
# Warmup Iteration  15: 27602514.809 ops/s
# Warmup Iteration  16: 27579586.065 ops/s
# Warmup Iteration  17: 27634540.292 ops/s
# Warmup Iteration  18: 27634002.256 ops/s
# Warmup Iteration  19: 27561658.167 ops/s
# Warmup Iteration  20: 27585435.614 ops/s
# Warmup Iteration  21: 27625718.248 ops/s
# Warmup Iteration  22: 27614320.628 ops/s
# Warmup Iteration  23: 27537566.640 ops/s
# Warmup Iteration  24: 27600211.221 ops/s
# Warmup Iteration  25: 27584211.423 ops/s
# Warmup Iteration  26: 27537996.092 ops/s
# Warmup Iteration  27: 27656179.128 ops/s
# Warmup Iteration  28: 27605302.022 ops/s
# Warmup Iteration  29: 27579617.061 ops/s
# Warmup Iteration  30: 27570727.900 ops/s
Iteration   1: 27487880.005 ops/s
Iteration   2: 27671168.843 ops/s
Iteration   3: 27641135.666 ops/s
Iteration   4: 27577814.985 ops/s
Iteration   5: 27585994.587 ops/s
Iteration   6: 27620213.918 ops/s
Iteration   7: 27592420.737 ops/s
Iteration   8: 27521111.968 ops/s
Iteration   9: 27673277.711 ops/s
Iteration  10: 27605140.662 ops/s
Iteration  11: 27673051.765 ops/s
Iteration  12: 27579596.789 ops/s
Iteration  13: 27591595.961 ops/s
Iteration  14: 27615958.483 ops/s
Iteration  15: 27665143.346 ops/s
Iteration  16: 27562373.323 ops/s
Iteration  17: 27571112.628 ops/s
Iteration  18: 27647401.959 ops/s
Iteration  19: 27649680.978 ops/s
Iteration  20: 27662846.906 ops/s
Iteration  21: 27578620.232 ops/s
Iteration  22: 27613451.852 ops/s
Iteration  23: 27657700.085 ops/s
Iteration  24: 27626958.020 ops/s
Iteration  25: 27551124.077 ops/s
Iteration  26: 27648196.945 ops/s
Iteration  27: 27565201.234 ops/s
Iteration  28: 27616936.285 ops/s
Iteration  29: 27542266.865 ops/s
Iteration  30: 27687889.843 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_tap":
  27609442.222 ±(99.9%) 33434.538 ops/s [Average]
  (min, avg, max) = (27487880.005, 27609442.222, 27687889.843), stdev = 50043.246
  CI (99.9%): [27576007.684, 27642876.760] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score       Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_tap  thrpt   30  27609442.222 ± 33434.538  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1084934.176 ops/s
# Warmup Iteration   2: 2434247.315 ops/s
# Warmup Iteration   3: 2440029.926 ops/s
# Warmup Iteration   4: 2038208.997 ops/s
# Warmup Iteration   5: 2443706.909 ops/s
# Warmup Iteration   6: 2442552.829 ops/s
# Warmup Iteration   7: 2440702.759 ops/s
# Warmup Iteration   8: 2441533.034 ops/s
# Warmup Iteration   9: 2436427.300 ops/s
# Warmup Iteration  10: 2443857.208 ops/s
# Warmup Iteration  11: 2427136.114 ops/s
# Warmup Iteration  12: 2434334.303 ops/s
# Warmup Iteration  13: 2437145.980 ops/s
# Warmup Iteration  14: 2438227.185 ops/s
# Warmup Iteration  15: 2441899.590 ops/s
# Warmup Iteration  16: 2439471.361 ops/s
# Warmup Iteration  17: 2433895.017 ops/s
# Warmup Iteration  18: 2427220.722 ops/s
# Warmup Iteration  19: 2440182.980 ops/s
# Warmup Iteration  20: 2446036.480 ops/s
# Warmup Iteration  21: 2443956.044 ops/s
# Warmup Iteration  22: 2438093.731 ops/s
# Warmup Iteration  23: 2441525.715 ops/s
# Warmup Iteration  24: 2446595.951 ops/s
# Warmup Iteration  25: 2442046.897 ops/s
# Warmup Iteration  26: 2440652.946 ops/s
# Warmup Iteration  27: 2441165.087 ops/s
# Warmup Iteration  28: 2437987.343 ops/s
# Warmup Iteration  29: 2444003.697 ops/s
# Warmup Iteration  30: 2438134.348 ops/s
Iteration   1: 2442578.559 ops/s
Iteration   2: 2438550.241 ops/s
Iteration   3: 2442896.928 ops/s
Iteration   4: 2443410.530 ops/s
Iteration   5: 2442705.919 ops/s
Iteration   6: 2442868.375 ops/s
Iteration   7: 2438802.720 ops/s
Iteration   8: 2441717.358 ops/s
Iteration   9: 2446982.229 ops/s
Iteration  10: 2439966.967 ops/s
Iteration  11: 2445306.482 ops/s
Iteration  12: 2444315.526 ops/s
Iteration  13: 2443760.184 ops/s
Iteration  14: 2442871.222 ops/s
Iteration  15: 2445538.506 ops/s
Iteration  16: 2438350.069 ops/s
Iteration  17: 2440138.911 ops/s
Iteration  18: 2440220.021 ops/s
Iteration  19: 2442546.578 ops/s
Iteration  20: 2442655.798 ops/s
Iteration  21: 2440165.360 ops/s
Iteration  22: 2435107.568 ops/s
Iteration  23: 2428959.948 ops/s
Iteration  24: 2441849.828 ops/s
Iteration  25: 2440895.669 ops/s
Iteration  26: 2440776.203 ops/s
Iteration  27: 2438606.366 ops/s
Iteration  28: 2443622.004 ops/s
Iteration  29: 2443851.335 ops/s
Iteration  30: 2439436.535 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_testToString":
  2441315.131 ±(99.9%) 2296.469 ops/s [Average]
  (min, avg, max) = (2428959.948, 2441315.131, 2446982.229), stdev = 3437.247
  CI (99.9%): [2439018.663, 2443611.600] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_testToString  thrpt   30  2441315.131 ± 2296.469  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6790293.725 ops/s
# Warmup Iteration   2: 14249477.547 ops/s
# Warmup Iteration   3: 12053388.556 ops/s
# Warmup Iteration   4: 14389959.447 ops/s
# Warmup Iteration   5: 14375710.193 ops/s
# Warmup Iteration   6: 14383882.583 ops/s
# Warmup Iteration   7: 14343580.398 ops/s
# Warmup Iteration   8: 14368076.148 ops/s
# Warmup Iteration   9: 14327758.788 ops/s
# Warmup Iteration  10: 14365460.004 ops/s
# Warmup Iteration  11: 14351157.669 ops/s
# Warmup Iteration  12: 14365266.227 ops/s
# Warmup Iteration  13: 14381544.442 ops/s
# Warmup Iteration  14: 14365833.434 ops/s
# Warmup Iteration  15: 14370447.262 ops/s
# Warmup Iteration  16: 14376947.338 ops/s
# Warmup Iteration  17: 14330361.796 ops/s
# Warmup Iteration  18: 14384812.554 ops/s
# Warmup Iteration  19: 14358739.880 ops/s
# Warmup Iteration  20: 14381459.509 ops/s
# Warmup Iteration  21: 14360337.560 ops/s
# Warmup Iteration  22: 14374930.848 ops/s
# Warmup Iteration  23: 14361129.709 ops/s
# Warmup Iteration  24: 14369097.197 ops/s
# Warmup Iteration  25: 14359738.023 ops/s
# Warmup Iteration  26: 14339141.030 ops/s
# Warmup Iteration  27: 14335673.821 ops/s
# Warmup Iteration  28: 14358443.496 ops/s
# Warmup Iteration  29: 14309926.650 ops/s
# Warmup Iteration  30: 14351478.053 ops/s
Iteration   1: 14378607.739 ops/s
Iteration   2: 14336871.709 ops/s
Iteration   3: 14349075.114 ops/s
Iteration   4: 14362476.628 ops/s
Iteration   5: 14382149.146 ops/s
Iteration   6: 14340765.271 ops/s
Iteration   7: 14364573.372 ops/s
Iteration   8: 14368646.543 ops/s
Iteration   9: 14388405.412 ops/s
Iteration  10: 14378712.258 ops/s
Iteration  11: 14391778.635 ops/s
Iteration  12: 14376045.896 ops/s
Iteration  13: 14398078.644 ops/s
Iteration  14: 14322177.175 ops/s
Iteration  15: 14328773.879 ops/s
Iteration  16: 14375760.658 ops/s
Iteration  17: 14374665.301 ops/s
Iteration  18: 14356458.235 ops/s
Iteration  19: 14381075.500 ops/s
Iteration  20: 14368255.198 ops/s
Iteration  21: 14399346.488 ops/s
Iteration  22: 14371680.493 ops/s
Iteration  23: 14372414.897 ops/s
Iteration  24: 14349554.041 ops/s
Iteration  25: 14384159.760 ops/s
Iteration  26: 14340483.660 ops/s
Iteration  27: 14330335.337 ops/s
Iteration  28: 14367634.977 ops/s
Iteration  29: 14377282.750 ops/s
Iteration  30: 14346769.296 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_toArray":
  14365433.800 ±(99.9%) 13964.872 ops/s [Average]
  (min, avg, max) = (14322177.175, 14365433.800, 14399346.488), stdev = 20901.964
  CI (99.9%): [14351468.929, 14379398.672] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_toArray  thrpt   30  14365433.800 ± 13964.872  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_toImmutable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_toImmutable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 165380743.640 ops/s
# Warmup Iteration   2: 299124580.947 ops/s
# Warmup Iteration   3: 268539381.596 ops/s
# Warmup Iteration   4: 309657504.505 ops/s
# Warmup Iteration   5: 309846999.401 ops/s
# Warmup Iteration   6: 311980600.787 ops/s
# Warmup Iteration   7: 311684067.586 ops/s
# Warmup Iteration   8: 311968556.797 ops/s
# Warmup Iteration   9: 312746249.357 ops/s
# Warmup Iteration  10: 312874343.509 ops/s
# Warmup Iteration  11: 312535470.592 ops/s
# Warmup Iteration  12: 312396932.743 ops/s
# Warmup Iteration  13: 310607539.409 ops/s
# Warmup Iteration  14: 311954162.590 ops/s
# Warmup Iteration  15: 311835866.438 ops/s
# Warmup Iteration  16: 313350560.536 ops/s
# Warmup Iteration  17: 311749123.862 ops/s
# Warmup Iteration  18: 311853275.571 ops/s
# Warmup Iteration  19: 311223941.954 ops/s
# Warmup Iteration  20: 310941839.636 ops/s
# Warmup Iteration  21: 311366193.210 ops/s
# Warmup Iteration  22: 312433553.657 ops/s
# Warmup Iteration  23: 312282156.843 ops/s
# Warmup Iteration  24: 311189603.560 ops/s
# Warmup Iteration  25: 312023669.544 ops/s
# Warmup Iteration  26: 311799532.089 ops/s
# Warmup Iteration  27: 311124803.517 ops/s
# Warmup Iteration  28: 310806481.856 ops/s
# Warmup Iteration  29: 310203712.001 ops/s
# Warmup Iteration  30: 311945978.414 ops/s
Iteration   1: 311753301.024 ops/s
Iteration   2: 311478023.906 ops/s
Iteration   3: 311207796.463 ops/s
Iteration   4: 311521401.704 ops/s
Iteration   5: 311683311.050 ops/s
Iteration   6: 311399522.541 ops/s
Iteration   7: 311983951.302 ops/s
Iteration   8: 312000872.623 ops/s
Iteration   9: 313179165.544 ops/s
Iteration  10: 311715418.044 ops/s
Iteration  11: 311326524.980 ops/s
Iteration  12: 311713197.156 ops/s
Iteration  13: 312326880.033 ops/s
Iteration  14: 310677096.627 ops/s
Iteration  15: 312660386.203 ops/s
Iteration  16: 312292638.980 ops/s
Iteration  17: 312001305.642 ops/s
Iteration  18: 310959765.194 ops/s
Iteration  19: 311321910.838 ops/s
Iteration  20: 310527891.681 ops/s
Iteration  21: 310908220.272 ops/s
Iteration  22: 309980604.209 ops/s
Iteration  23: 312193123.680 ops/s
Iteration  24: 310383192.228 ops/s
Iteration  25: 311424608.937 ops/s
Iteration  26: 310280711.886 ops/s
Iteration  27: 310486681.297 ops/s
Iteration  28: 310052066.464 ops/s
Iteration  29: 310834459.255 ops/s
Iteration  30: 309885654.019 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_toImmutable":
  311338656.126 ±(99.9%) 551311.203 ops/s [Average]
  (min, avg, max) = (309885654.019, 311338656.126, 313179165.544), stdev = 825176.716
  CI (99.9%): [310787344.924, 311889967.329] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt          Score        Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_toImmutable  thrpt   30  311338656.126 ± 551311.203  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2911827.644 ops/s
# Warmup Iteration   2: 6329191.834 ops/s
# Warmup Iteration   3: 5809120.442 ops/s
# Warmup Iteration   4: 5890036.580 ops/s
# Warmup Iteration   5: 6313571.828 ops/s
# Warmup Iteration   6: 6343980.955 ops/s
# Warmup Iteration   7: 6344117.043 ops/s
# Warmup Iteration   8: 6348013.645 ops/s
# Warmup Iteration   9: 6317644.670 ops/s
# Warmup Iteration  10: 6349102.308 ops/s
# Warmup Iteration  11: 6287008.851 ops/s
# Warmup Iteration  12: 6327869.413 ops/s
# Warmup Iteration  13: 6353946.874 ops/s
# Warmup Iteration  14: 6339361.590 ops/s
# Warmup Iteration  15: 6317023.832 ops/s
# Warmup Iteration  16: 6334862.324 ops/s
# Warmup Iteration  17: 6346099.977 ops/s
# Warmup Iteration  18: 6354283.976 ops/s
# Warmup Iteration  19: 6346705.396 ops/s
# Warmup Iteration  20: 6344861.104 ops/s
# Warmup Iteration  21: 6349923.260 ops/s
# Warmup Iteration  22: 6350074.666 ops/s
# Warmup Iteration  23: 6345597.669 ops/s
# Warmup Iteration  24: 6299151.292 ops/s
# Warmup Iteration  25: 6313003.678 ops/s
# Warmup Iteration  26: 6328825.312 ops/s
# Warmup Iteration  27: 6347257.522 ops/s
# Warmup Iteration  28: 6354114.906 ops/s
# Warmup Iteration  29: 6342860.588 ops/s
# Warmup Iteration  30: 6344147.716 ops/s
Iteration   1: 6362931.527 ops/s
Iteration   2: 6351938.321 ops/s
Iteration   3: 6353134.876 ops/s
Iteration   4: 6348028.537 ops/s
Iteration   5: 6363990.947 ops/s
Iteration   6: 6358684.141 ops/s
Iteration   7: 6349324.512 ops/s
Iteration   8: 6354338.649 ops/s
Iteration   9: 6347999.770 ops/s
Iteration  10: 6330036.825 ops/s
Iteration  11: 6356506.556 ops/s
Iteration  12: 6348203.427 ops/s
Iteration  13: 6333511.973 ops/s
Iteration  14: 6359296.095 ops/s
Iteration  15: 6348838.614 ops/s
Iteration  16: 6349871.217 ops/s
Iteration  17: 6350598.552 ops/s
Iteration  18: 6334472.607 ops/s
Iteration  19: 6364018.189 ops/s
Iteration  20: 6346372.070 ops/s
Iteration  21: 6338986.813 ops/s
Iteration  22: 6343986.299 ops/s
Iteration  23: 6353744.025 ops/s
Iteration  24: 6349861.258 ops/s
Iteration  25: 6325188.866 ops/s
Iteration  26: 6353652.866 ops/s
Iteration  27: 6351256.775 ops/s
Iteration  28: 6352678.705 ops/s
Iteration  29: 6350515.288 ops/s
Iteration  30: 6354717.146 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_toList":
  6349556.182 ±(99.9%) 6277.009 ops/s [Average]
  (min, avg, max) = (6325188.866, 6349556.182, 6364018.189), stdev = 9395.132
  CI (99.9%): [6343279.173, 6355833.190] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_toList  thrpt   30  6349556.182 ± 6277.009  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_toReversed$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_toReversed

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1761375.082 ops/s
# Warmup Iteration   2: 2166051.504 ops/s
# Warmup Iteration   3: 2782082.515 ops/s
# Warmup Iteration   4: 2758871.381 ops/s
# Warmup Iteration   5: 2783919.689 ops/s
# Warmup Iteration   6: 2780790.291 ops/s
# Warmup Iteration   7: 2785586.732 ops/s
# Warmup Iteration   8: 2785646.830 ops/s
# Warmup Iteration   9: 2306752.165 ops/s
# Warmup Iteration  10: 2787234.207 ops/s
# Warmup Iteration  11: 2781336.115 ops/s
# Warmup Iteration  12: 2781948.101 ops/s
# Warmup Iteration  13: 2786618.177 ops/s
# Warmup Iteration  14: 2784812.747 ops/s
# Warmup Iteration  15: 2782802.484 ops/s
# Warmup Iteration  16: 2785704.988 ops/s
# Warmup Iteration  17: 2784144.698 ops/s
# Warmup Iteration  18: 2782979.789 ops/s
# Warmup Iteration  19: 2786435.455 ops/s
# Warmup Iteration  20: 2782738.246 ops/s
# Warmup Iteration  21: 2760662.705 ops/s
# Warmup Iteration  22: 2788116.420 ops/s
# Warmup Iteration  23: 2778215.586 ops/s
# Warmup Iteration  24: 2783586.549 ops/s
# Warmup Iteration  25: 2789146.316 ops/s
# Warmup Iteration  26: 2783538.524 ops/s
# Warmup Iteration  27: 2784062.042 ops/s
# Warmup Iteration  28: 2784252.980 ops/s
# Warmup Iteration  29: 2783760.943 ops/s
# Warmup Iteration  30: 2780092.704 ops/s
Iteration   1: 2768789.340 ops/s
Iteration   2: 2773639.648 ops/s
Iteration   3: 2766232.960 ops/s
Iteration   4: 2774346.809 ops/s
Iteration   5: 2788260.438 ops/s
Iteration   6: 2777940.057 ops/s
Iteration   7: 2789103.457 ops/s
Iteration   8: 2789142.997 ops/s
Iteration   9: 2782003.490 ops/s
Iteration  10: 2792040.620 ops/s
Iteration  11: 2786094.140 ops/s
Iteration  12: 2779062.986 ops/s
Iteration  13: 2788061.319 ops/s
Iteration  14: 2786609.103 ops/s
Iteration  15: 2720434.286 ops/s
Iteration  16: 2783801.301 ops/s
Iteration  17: 2786800.955 ops/s
Iteration  18: 2781813.733 ops/s
Iteration  19: 2791764.918 ops/s
Iteration  20: 2786753.342 ops/s
Iteration  21: 2778799.868 ops/s
Iteration  22: 2788758.712 ops/s
Iteration  23: 2785577.786 ops/s
Iteration  24: 2785019.870 ops/s
Iteration  25: 2778408.468 ops/s
Iteration  26: 2778923.942 ops/s
Iteration  27: 2780396.696 ops/s
Iteration  28: 2788497.236 ops/s
Iteration  29: 2783385.591 ops/s
Iteration  30: 2781948.803 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_toReversed":
  2780747.096 ±(99.9%) 8708.795 ops/s [Average]
  (min, avg, max) = (2720434.286, 2780747.096, 2792040.620), stdev = 13034.915
  CI (99.9%): [2772038.301, 2789455.891] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_toReversed  thrpt   30  2780747.096 ± 8708.795  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_toSortedList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_toSortedList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3239824.482 ops/s
# Warmup Iteration   2: 5293865.651 ops/s
# Warmup Iteration   3: 6100436.723 ops/s
# Warmup Iteration   4: 6164354.200 ops/s
# Warmup Iteration   5: 6136751.772 ops/s
# Warmup Iteration   6: 5230694.101 ops/s
# Warmup Iteration   7: 6030785.027 ops/s
# Warmup Iteration   8: 6167668.954 ops/s
# Warmup Iteration   9: 6176067.999 ops/s
# Warmup Iteration  10: 6166072.958 ops/s
# Warmup Iteration  11: 6143382.805 ops/s
# Warmup Iteration  12: 6132486.646 ops/s
# Warmup Iteration  13: 6171764.845 ops/s
# Warmup Iteration  14: 6176908.625 ops/s
# Warmup Iteration  15: 6168259.605 ops/s
# Warmup Iteration  16: 6149210.100 ops/s
# Warmup Iteration  17: 6165994.585 ops/s
# Warmup Iteration  18: 6170776.975 ops/s
# Warmup Iteration  19: 6142721.083 ops/s
# Warmup Iteration  20: 6161984.049 ops/s
# Warmup Iteration  21: 6174739.480 ops/s
# Warmup Iteration  22: 6170434.509 ops/s
# Warmup Iteration  23: 6171465.113 ops/s
# Warmup Iteration  24: 6170541.762 ops/s
# Warmup Iteration  25: 6178615.499 ops/s
# Warmup Iteration  26: 6164632.039 ops/s
# Warmup Iteration  27: 6150373.125 ops/s
# Warmup Iteration  28: 6170336.350 ops/s
# Warmup Iteration  29: 6180474.825 ops/s
# Warmup Iteration  30: 6185040.877 ops/s
Iteration   1: 6175875.204 ops/s
Iteration   2: 6174739.868 ops/s
Iteration   3: 6157568.205 ops/s
Iteration   4: 6177234.326 ops/s
Iteration   5: 6159413.190 ops/s
Iteration   6: 6176755.141 ops/s
Iteration   7: 6123130.440 ops/s
Iteration   8: 6113380.996 ops/s
Iteration   9: 6163209.802 ops/s
Iteration  10: 6150279.048 ops/s
Iteration  11: 6174914.551 ops/s
Iteration  12: 6173816.952 ops/s
Iteration  13: 6176211.602 ops/s
Iteration  14: 6181774.701 ops/s
Iteration  15: 6171049.889 ops/s
Iteration  16: 6160384.777 ops/s
Iteration  17: 6175588.857 ops/s
Iteration  18: 6175841.525 ops/s
Iteration  19: 6181049.967 ops/s
Iteration  20: 6170783.957 ops/s
Iteration  21: 6168732.407 ops/s
Iteration  22: 6138268.848 ops/s
Iteration  23: 6174888.916 ops/s
Iteration  24: 6169149.768 ops/s
Iteration  25: 6180995.809 ops/s
Iteration  26: 6167362.406 ops/s
Iteration  27: 6191699.884 ops/s
Iteration  28: 6127871.661 ops/s
Iteration  29: 6184780.668 ops/s
Iteration  30: 6075581.372 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_toSortedList":
  6163077.825 ±(99.9%) 16579.872 ops/s [Average]
  (min, avg, max) = (6075581.372, 6163077.825, 6191699.884), stdev = 24815.974
  CI (99.9%): [6146497.952, 6179657.697] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_toSortedList  thrpt   30  6163077.825 ± 16579.872  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_toSortedListBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_toSortedListBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1682431.691 ops/s
# Warmup Iteration   2: 1832891.923 ops/s
# Warmup Iteration   3: 2065970.506 ops/s
# Warmup Iteration   4: 2354254.995 ops/s
# Warmup Iteration   5: 2363092.219 ops/s
# Warmup Iteration   6: 2366728.762 ops/s
# Warmup Iteration   7: 2350462.202 ops/s
# Warmup Iteration   8: 2363958.296 ops/s
# Warmup Iteration   9: 2347825.791 ops/s
# Warmup Iteration  10: 2352229.991 ops/s
# Warmup Iteration  11: 2343562.467 ops/s
# Warmup Iteration  12: 2353586.856 ops/s
# Warmup Iteration  13: 2350957.004 ops/s
# Warmup Iteration  14: 2366626.986 ops/s
# Warmup Iteration  15: 1929671.099 ops/s
# Warmup Iteration  16: 2357129.865 ops/s
# Warmup Iteration  17: 2366547.862 ops/s
# Warmup Iteration  18: 2367938.365 ops/s
# Warmup Iteration  19: 2369156.820 ops/s
# Warmup Iteration  20: 2368181.718 ops/s
# Warmup Iteration  21: 2368204.764 ops/s
# Warmup Iteration  22: 2369413.547 ops/s
# Warmup Iteration  23: 2356487.873 ops/s
# Warmup Iteration  24: 2356290.435 ops/s
# Warmup Iteration  25: 2367079.776 ops/s
# Warmup Iteration  26: 2344067.106 ops/s
# Warmup Iteration  27: 2348352.177 ops/s
# Warmup Iteration  28: 2354726.082 ops/s
# Warmup Iteration  29: 2364515.648 ops/s
# Warmup Iteration  30: 2366212.319 ops/s
Iteration   1: 2367167.810 ops/s
Iteration   2: 2362874.794 ops/s
Iteration   3: 2361684.810 ops/s
Iteration   4: 2354973.314 ops/s
Iteration   5: 2357431.073 ops/s
Iteration   6: 2356143.033 ops/s
Iteration   7: 2345106.688 ops/s
Iteration   8: 2369193.641 ops/s
Iteration   9: 2366899.629 ops/s
Iteration  10: 2368791.369 ops/s
Iteration  11: 2369311.120 ops/s
Iteration  12: 2362224.230 ops/s
Iteration  13: 2368102.269 ops/s
Iteration  14: 2367886.487 ops/s
Iteration  15: 2366987.803 ops/s
Iteration  16: 2368139.635 ops/s
Iteration  17: 2361885.972 ops/s
Iteration  18: 2339463.337 ops/s
Iteration  19: 2340917.455 ops/s
Iteration  20: 2346162.281 ops/s
Iteration  21: 2330683.602 ops/s
Iteration  22: 2365594.837 ops/s
Iteration  23: 2348595.331 ops/s
Iteration  24: 2356396.298 ops/s
Iteration  25: 2355081.878 ops/s
Iteration  26: 2353523.408 ops/s
Iteration  27: 2357950.016 ops/s
Iteration  28: 2348087.646 ops/s
Iteration  29: 2361635.194 ops/s
Iteration  30: 2353093.010 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_toSortedListBy":
  2357732.932 ±(99.9%) 6793.304 ops/s [Average]
  (min, avg, max) = (2330683.602, 2357732.932, 2369311.120), stdev = 10167.898
  CI (99.9%): [2350939.629, 2364526.236] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_toSortedListBy  thrpt   30  2357732.932 ± 6793.304  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_toSortedSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_toSortedSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1868209.719 ops/s
# Warmup Iteration   2: 4309844.294 ops/s
# Warmup Iteration   3: 4312190.692 ops/s
# Warmup Iteration   4: 3621727.329 ops/s
# Warmup Iteration   5: 4327750.074 ops/s
# Warmup Iteration   6: 4316553.207 ops/s
# Warmup Iteration   7: 4285045.311 ops/s
# Warmup Iteration   8: 4277190.219 ops/s
# Warmup Iteration   9: 4317170.434 ops/s
# Warmup Iteration  10: 4322397.713 ops/s
# Warmup Iteration  11: 4310618.020 ops/s
# Warmup Iteration  12: 4321620.563 ops/s
# Warmup Iteration  13: 4320075.153 ops/s
# Warmup Iteration  14: 4323222.973 ops/s
# Warmup Iteration  15: 4304733.611 ops/s
# Warmup Iteration  16: 4313597.266 ops/s
# Warmup Iteration  17: 4315744.090 ops/s
# Warmup Iteration  18: 4323882.995 ops/s
# Warmup Iteration  19: 4325305.967 ops/s
# Warmup Iteration  20: 4318143.375 ops/s
# Warmup Iteration  21: 4298277.591 ops/s
# Warmup Iteration  22: 4291859.954 ops/s
# Warmup Iteration  23: 4304583.107 ops/s
# Warmup Iteration  24: 4314213.493 ops/s
# Warmup Iteration  25: 4315771.619 ops/s
# Warmup Iteration  26: 4302818.843 ops/s
# Warmup Iteration  27: 4293027.468 ops/s
# Warmup Iteration  28: 4319217.382 ops/s
# Warmup Iteration  29: 4323374.573 ops/s
# Warmup Iteration  30: 4317316.507 ops/s
Iteration   1: 4321599.636 ops/s
Iteration   2: 4320258.182 ops/s
Iteration   3: 4325281.584 ops/s
Iteration   4: 4320014.589 ops/s
Iteration   5: 4324074.969 ops/s
Iteration   6: 4317521.012 ops/s
Iteration   7: 4307671.057 ops/s
Iteration   8: 4323338.953 ops/s
Iteration   9: 4320154.148 ops/s
Iteration  10: 4321012.168 ops/s
Iteration  11: 4318058.427 ops/s
Iteration  12: 4289738.965 ops/s
Iteration  13: 4295119.173 ops/s
Iteration  14: 4321453.467 ops/s
Iteration  15: 4333045.216 ops/s
Iteration  16: 4325027.097 ops/s
Iteration  17: 4324309.235 ops/s
Iteration  18: 4323708.235 ops/s
Iteration  19: 4329656.665 ops/s
Iteration  20: 4321233.340 ops/s
Iteration  21: 4310602.707 ops/s
Iteration  22: 4321463.670 ops/s
Iteration  23: 4325271.382 ops/s
Iteration  24: 4316505.095 ops/s
Iteration  25: 4323810.130 ops/s
Iteration  26: 4323797.030 ops/s
Iteration  27: 4317914.286 ops/s
Iteration  28: 4321247.421 ops/s
Iteration  29: 4323789.890 ops/s
Iteration  30: 4321359.756 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_toSortedSet":
  4319601.249 ±(99.9%) 5894.634 ops/s [Average]
  (min, avg, max) = (4289738.965, 4319601.249, 4333045.216), stdev = 8822.811
  CI (99.9%): [4313706.616, 4325495.883] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_toSortedSet  thrpt   30  4319601.249 ± 5894.634  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_toSortedSetBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_toSortedSetBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 559196.116 ops/s
# Warmup Iteration   2: 1145809.784 ops/s
# Warmup Iteration   3: 1204776.823 ops/s
# Warmup Iteration   4: 1211438.370 ops/s
# Warmup Iteration   5: 1011592.168 ops/s
# Warmup Iteration   6: 1214166.559 ops/s
# Warmup Iteration   7: 1213552.219 ops/s
# Warmup Iteration   8: 1212529.261 ops/s
# Warmup Iteration   9: 1213534.496 ops/s
# Warmup Iteration  10: 1214087.973 ops/s
# Warmup Iteration  11: 1213489.126 ops/s
# Warmup Iteration  12: 1213056.945 ops/s
# Warmup Iteration  13: 1211893.177 ops/s
# Warmup Iteration  14: 1213482.972 ops/s
# Warmup Iteration  15: 1209500.310 ops/s
# Warmup Iteration  16: 1212920.098 ops/s
# Warmup Iteration  17: 1212339.016 ops/s
# Warmup Iteration  18: 1212382.180 ops/s
# Warmup Iteration  19: 1213805.450 ops/s
# Warmup Iteration  20: 1203111.254 ops/s
# Warmup Iteration  21: 1212730.529 ops/s
# Warmup Iteration  22: 1211831.907 ops/s
# Warmup Iteration  23: 1213780.592 ops/s
# Warmup Iteration  24: 1210556.229 ops/s
# Warmup Iteration  25: 1210473.630 ops/s
# Warmup Iteration  26: 1209612.735 ops/s
# Warmup Iteration  27: 1210993.292 ops/s
# Warmup Iteration  28: 1212107.140 ops/s
# Warmup Iteration  29: 1213275.816 ops/s
# Warmup Iteration  30: 1211557.131 ops/s
Iteration   1: 1214381.370 ops/s
Iteration   2: 1212068.203 ops/s
Iteration   3: 1212201.390 ops/s
Iteration   4: 1209400.615 ops/s
Iteration   5: 1205960.315 ops/s
Iteration   6: 1207518.746 ops/s
Iteration   7: 1208863.265 ops/s
Iteration   8: 1204840.989 ops/s
Iteration   9: 1213072.637 ops/s
Iteration  10: 1211082.775 ops/s
Iteration  11: 1208362.384 ops/s
Iteration  12: 1215293.468 ops/s
Iteration  13: 1213738.722 ops/s
Iteration  14: 1214415.802 ops/s
Iteration  15: 1215868.727 ops/s
Iteration  16: 1212416.806 ops/s
Iteration  17: 1209571.676 ops/s
Iteration  18: 1207289.650 ops/s
Iteration  19: 1212407.340 ops/s
Iteration  20: 1211555.745 ops/s
Iteration  21: 1211150.245 ops/s
Iteration  22: 1212456.959 ops/s
Iteration  23: 1209190.850 ops/s
Iteration  24: 1209519.730 ops/s
Iteration  25: 1211731.743 ops/s
Iteration  26: 1215904.343 ops/s
Iteration  27: 1214121.826 ops/s
Iteration  28: 1212651.498 ops/s
Iteration  29: 1213576.934 ops/s
Iteration  30: 1212231.629 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_toSortedSetBy":
  1211428.213 ±(99.9%) 1908.310 ops/s [Average]
  (min, avg, max) = (1204840.989, 1211428.213, 1215904.343), stdev = 2856.269
  CI (99.9%): [1209519.902, 1213336.523] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_toSortedSetBy  thrpt   30  1211428.213 ± 1908.310  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_toSortedSetWithComparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_toSortedSetWithComparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1259925.788 ops/s
# Warmup Iteration   2: 2681898.957 ops/s
# Warmup Iteration   3: 2829364.776 ops/s
# Warmup Iteration   4: 2846525.983 ops/s
# Warmup Iteration   5: 2360484.645 ops/s
# Warmup Iteration   6: 2842273.766 ops/s
# Warmup Iteration   7: 2845610.023 ops/s
# Warmup Iteration   8: 2845091.294 ops/s
# Warmup Iteration   9: 2849800.142 ops/s
# Warmup Iteration  10: 2842335.193 ops/s
# Warmup Iteration  11: 2843960.335 ops/s
# Warmup Iteration  12: 2843853.875 ops/s
# Warmup Iteration  13: 2829198.147 ops/s
# Warmup Iteration  14: 2835173.201 ops/s
# Warmup Iteration  15: 2845029.514 ops/s
# Warmup Iteration  16: 2844014.328 ops/s
# Warmup Iteration  17: 2843642.691 ops/s
# Warmup Iteration  18: 2843204.863 ops/s
# Warmup Iteration  19: 2850534.837 ops/s
# Warmup Iteration  20: 2848318.995 ops/s
# Warmup Iteration  21: 2846856.101 ops/s
# Warmup Iteration  22: 2842176.638 ops/s
# Warmup Iteration  23: 2846479.825 ops/s
# Warmup Iteration  24: 2833712.302 ops/s
# Warmup Iteration  25: 2846582.183 ops/s
# Warmup Iteration  26: 2847340.898 ops/s
# Warmup Iteration  27: 2846303.734 ops/s
# Warmup Iteration  28: 2848241.967 ops/s
# Warmup Iteration  29: 2848217.937 ops/s
# Warmup Iteration  30: 2847226.960 ops/s
Iteration   1: 2847303.213 ops/s
Iteration   2: 2844739.296 ops/s
Iteration   3: 2847716.779 ops/s
Iteration   4: 2855290.967 ops/s
Iteration   5: 2848876.802 ops/s
Iteration   6: 2846060.037 ops/s
Iteration   7: 2838443.535 ops/s
Iteration   8: 2837741.784 ops/s
Iteration   9: 2842019.863 ops/s
Iteration  10: 2841016.174 ops/s
Iteration  11: 2830244.164 ops/s
Iteration  12: 2841916.016 ops/s
Iteration  13: 2840974.647 ops/s
Iteration  14: 2831399.017 ops/s
Iteration  15: 2845447.128 ops/s
Iteration  16: 2849609.536 ops/s
Iteration  17: 2850381.846 ops/s
Iteration  18: 2845849.115 ops/s
Iteration  19: 2852306.617 ops/s
Iteration  20: 2849649.424 ops/s
Iteration  21: 2843968.663 ops/s
Iteration  22: 2845546.124 ops/s
Iteration  23: 2848793.532 ops/s
Iteration  24: 2844268.743 ops/s
Iteration  25: 2847547.752 ops/s
Iteration  26: 2833787.816 ops/s
Iteration  27: 2831650.560 ops/s
Iteration  28: 2835519.863 ops/s
Iteration  29: 2826941.971 ops/s
Iteration  30: 2831467.184 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_toSortedSetWithComparator":
  2842549.272 ±(99.9%) 4893.001 ops/s [Average]
  (min, avg, max) = (2826941.971, 2842549.272, 2855290.967), stdev = 7323.614
  CI (99.9%): [2837656.272, 2847442.273] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score      Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_toSortedSetWithComparator  thrpt   30  2842549.272 ± 4893.001  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_toStack$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_toStack

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2886603.274 ops/s
# Warmup Iteration   2: 6409522.020 ops/s
# Warmup Iteration   3: 6906800.835 ops/s
# Warmup Iteration   4: 5789338.113 ops/s
# Warmup Iteration   5: 6827710.196 ops/s
# Warmup Iteration   6: 6916156.069 ops/s
# Warmup Iteration   7: 6920128.393 ops/s
# Warmup Iteration   8: 6924737.738 ops/s
# Warmup Iteration   9: 6919982.734 ops/s
# Warmup Iteration  10: 6926957.543 ops/s
# Warmup Iteration  11: 6926457.566 ops/s
# Warmup Iteration  12: 6917140.946 ops/s
# Warmup Iteration  13: 6912336.608 ops/s
# Warmup Iteration  14: 6921127.799 ops/s
# Warmup Iteration  15: 6918986.562 ops/s
# Warmup Iteration  16: 6880140.811 ops/s
# Warmup Iteration  17: 6873096.937 ops/s
# Warmup Iteration  18: 6916400.081 ops/s
# Warmup Iteration  19: 6914039.813 ops/s
# Warmup Iteration  20: 6906510.929 ops/s
# Warmup Iteration  21: 6942506.040 ops/s
# Warmup Iteration  22: 6899843.619 ops/s
# Warmup Iteration  23: 6908375.755 ops/s
# Warmup Iteration  24: 6905470.471 ops/s
# Warmup Iteration  25: 6916036.671 ops/s
# Warmup Iteration  26: 6916684.501 ops/s
# Warmup Iteration  27: 6898929.633 ops/s
# Warmup Iteration  28: 6918014.058 ops/s
# Warmup Iteration  29: 6905180.555 ops/s
# Warmup Iteration  30: 6921100.703 ops/s
Iteration   1: 6901910.347 ops/s
Iteration   2: 6930163.837 ops/s
Iteration   3: 6918733.848 ops/s
Iteration   4: 6916316.642 ops/s
Iteration   5: 6924727.384 ops/s
Iteration   6: 6910500.323 ops/s
Iteration   7: 6922241.161 ops/s
Iteration   8: 6918652.801 ops/s
Iteration   9: 6926693.820 ops/s
Iteration  10: 6907845.482 ops/s
Iteration  11: 6924005.614 ops/s
Iteration  12: 6915705.490 ops/s
Iteration  13: 6918754.419 ops/s
Iteration  14: 6909137.368 ops/s
Iteration  15: 6930044.907 ops/s
Iteration  16: 6915263.873 ops/s
Iteration  17: 6905825.467 ops/s
Iteration  18: 6897531.116 ops/s
Iteration  19: 6909171.231 ops/s
Iteration  20: 6922892.961 ops/s
Iteration  21: 6922968.543 ops/s
Iteration  22: 6927108.482 ops/s
Iteration  23: 6918779.170 ops/s
Iteration  24: 6914906.005 ops/s
Iteration  25: 6917565.973 ops/s
Iteration  26: 6903885.630 ops/s
Iteration  27: 6912959.788 ops/s
Iteration  28: 6907896.397 ops/s
Iteration  29: 6922051.081 ops/s
Iteration  30: 6918406.641 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_toStack":
  6916421.527 ±(99.9%) 5600.106 ops/s [Average]
  (min, avg, max) = (6897531.116, 6916421.527, 6930163.837), stdev = 8381.976
  CI (99.9%): [6910821.421, 6922021.633] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_toStack  thrpt   30  6916421.527 ± 5600.106  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_zip$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_zip

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 379732.286 ops/s
# Warmup Iteration   2: 612450.722 ops/s
# Warmup Iteration   3: 709996.640 ops/s
# Warmup Iteration   4: 710221.928 ops/s
# Warmup Iteration   5: 712550.607 ops/s
# Warmup Iteration   6: 640004.592 ops/s
# Warmup Iteration   7: 670413.745 ops/s
# Warmup Iteration   8: 712772.304 ops/s
# Warmup Iteration   9: 713683.977 ops/s
# Warmup Iteration  10: 713858.502 ops/s
# Warmup Iteration  11: 713758.570 ops/s
# Warmup Iteration  12: 715009.852 ops/s
# Warmup Iteration  13: 714530.878 ops/s
# Warmup Iteration  14: 714075.209 ops/s
# Warmup Iteration  15: 714010.123 ops/s
# Warmup Iteration  16: 713876.444 ops/s
# Warmup Iteration  17: 713174.650 ops/s
# Warmup Iteration  18: 711248.279 ops/s
# Warmup Iteration  19: 714967.908 ops/s
# Warmup Iteration  20: 714455.039 ops/s
# Warmup Iteration  21: 714872.740 ops/s
# Warmup Iteration  22: 714934.035 ops/s
# Warmup Iteration  23: 714865.310 ops/s
# Warmup Iteration  24: 714558.966 ops/s
# Warmup Iteration  25: 714114.348 ops/s
# Warmup Iteration  26: 715061.834 ops/s
# Warmup Iteration  27: 714596.767 ops/s
# Warmup Iteration  28: 714189.107 ops/s
# Warmup Iteration  29: 714595.945 ops/s
# Warmup Iteration  30: 714269.844 ops/s
Iteration   1: 715707.347 ops/s
Iteration   2: 714348.705 ops/s
Iteration   3: 715143.202 ops/s
Iteration   4: 714902.379 ops/s
Iteration   5: 715783.129 ops/s
Iteration   6: 714191.956 ops/s
Iteration   7: 716199.105 ops/s
Iteration   8: 714142.293 ops/s
Iteration   9: 715327.967 ops/s
Iteration  10: 712529.701 ops/s
Iteration  11: 714769.046 ops/s
Iteration  12: 713225.633 ops/s
Iteration  13: 715850.166 ops/s
Iteration  14: 713952.906 ops/s
Iteration  15: 714422.521 ops/s
Iteration  16: 713860.935 ops/s
Iteration  17: 715885.055 ops/s
Iteration  18: 715279.370 ops/s
Iteration  19: 715414.546 ops/s
Iteration  20: 714244.634 ops/s
Iteration  21: 715722.391 ops/s
Iteration  22: 713722.877 ops/s
Iteration  23: 715301.782 ops/s
Iteration  24: 714456.946 ops/s
Iteration  25: 714514.695 ops/s
Iteration  26: 714945.544 ops/s
Iteration  27: 714989.218 ops/s
Iteration  28: 713780.335 ops/s
Iteration  29: 714628.185 ops/s
Iteration  30: 713321.650 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_zip":
  714685.474 ±(99.9%) 596.447 ops/s [Average]
  (min, avg, max) = (712529.701, 714685.474, 716199.105), stdev = 892.734
  CI (99.9%): [714089.027, 715281.921] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score     Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_zip  thrpt   30  714685.474 ± 596.447  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_zipWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_zipWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 846999.769 ops/s
# Warmup Iteration   2: 1571425.823 ops/s
# Warmup Iteration   3: 1688456.780 ops/s
# Warmup Iteration   4: 1699100.515 ops/s
# Warmup Iteration   5: 1450737.915 ops/s
# Warmup Iteration   6: 1662720.801 ops/s
# Warmup Iteration   7: 1699064.781 ops/s
# Warmup Iteration   8: 1699542.589 ops/s
# Warmup Iteration   9: 1696682.246 ops/s
# Warmup Iteration  10: 1698136.935 ops/s
# Warmup Iteration  11: 1701143.211 ops/s
# Warmup Iteration  12: 1699987.852 ops/s
# Warmup Iteration  13: 1695963.174 ops/s
# Warmup Iteration  14: 1699177.685 ops/s
# Warmup Iteration  15: 1698370.719 ops/s
# Warmup Iteration  16: 1696398.276 ops/s
# Warmup Iteration  17: 1701077.814 ops/s
# Warmup Iteration  18: 1701815.730 ops/s
# Warmup Iteration  19: 1701742.875 ops/s
# Warmup Iteration  20: 1700708.121 ops/s
# Warmup Iteration  21: 1699615.112 ops/s
# Warmup Iteration  22: 1703308.532 ops/s
# Warmup Iteration  23: 1700612.380 ops/s
# Warmup Iteration  24: 1700650.222 ops/s
# Warmup Iteration  25: 1701440.836 ops/s
# Warmup Iteration  26: 1702429.475 ops/s
# Warmup Iteration  27: 1702374.037 ops/s
# Warmup Iteration  28: 1698654.283 ops/s
# Warmup Iteration  29: 1703033.521 ops/s
# Warmup Iteration  30: 1700576.723 ops/s
Iteration   1: 1696813.702 ops/s
Iteration   2: 1704337.350 ops/s
Iteration   3: 1701367.626 ops/s
Iteration   4: 1701226.484 ops/s
Iteration   5: 1700279.656 ops/s
Iteration   6: 1697263.365 ops/s
Iteration   7: 1695633.720 ops/s
Iteration   8: 1705119.347 ops/s
Iteration   9: 1699753.921 ops/s
Iteration  10: 1702010.678 ops/s
Iteration  11: 1700208.559 ops/s
Iteration  12: 1699885.170 ops/s
Iteration  13: 1701963.758 ops/s
Iteration  14: 1699797.156 ops/s
Iteration  15: 1700555.013 ops/s
Iteration  16: 1705270.856 ops/s
Iteration  17: 1702401.348 ops/s
Iteration  18: 1702879.962 ops/s
Iteration  19: 1701485.107 ops/s
Iteration  20: 1700183.089 ops/s
Iteration  21: 1703869.004 ops/s
Iteration  22: 1700472.081 ops/s
Iteration  23: 1702114.998 ops/s
Iteration  24: 1699871.861 ops/s
Iteration  25: 1695777.516 ops/s
Iteration  26: 1700455.439 ops/s
Iteration  27: 1703015.885 ops/s
Iteration  28: 1699910.029 ops/s
Iteration  29: 1701949.077 ops/s
Iteration  30: 1700870.015 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSextupletonListTest._Benchmark.benchmark_zipWithIndex":
  1700891.392 ±(99.9%) 1594.456 ops/s [Average]
  (min, avg, max) = (1695633.720, 1700891.392, 1705270.856), stdev = 2386.507
  CI (99.9%): [1699296.936, 1702485.848] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ImmutableSextupletonListTest._Benchmark.benchmark_zipWithIndex  thrpt   30  1700891.392 ± 1594.456  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 771605.886 ops/s
# Warmup Iteration   2: 795862.301 ops/s
# Warmup Iteration   3: 1011252.608 ops/s
# Warmup Iteration   4: 1009373.043 ops/s
# Warmup Iteration   5: 1006164.170 ops/s
# Warmup Iteration   6: 1006122.511 ops/s
# Warmup Iteration   7: 1008225.788 ops/s
# Warmup Iteration   8: 1013545.961 ops/s
# Warmup Iteration   9: 1011204.106 ops/s
# Warmup Iteration  10: 1010354.099 ops/s
# Warmup Iteration  11: 1009338.457 ops/s
# Warmup Iteration  12: 861567.374 ops/s
# Warmup Iteration  13: 1005333.265 ops/s
# Warmup Iteration  14: 1002605.834 ops/s
# Warmup Iteration  15: 1004986.148 ops/s
# Warmup Iteration  16: 1003652.880 ops/s
# Warmup Iteration  17: 1057440.795 ops/s
# Warmup Iteration  18: 1061126.531 ops/s
# Warmup Iteration  19: 1062596.739 ops/s
# Warmup Iteration  20: 1063090.421 ops/s
# Warmup Iteration  21: 1062148.012 ops/s
# Warmup Iteration  22: 1064333.597 ops/s
# Warmup Iteration  23: 1063872.276 ops/s
# Warmup Iteration  24: 1062190.067 ops/s
# Warmup Iteration  25: 1057235.999 ops/s
# Warmup Iteration  26: 1060795.174 ops/s
# Warmup Iteration  27: 1061627.445 ops/s
# Warmup Iteration  28: 1062792.040 ops/s
# Warmup Iteration  29: 1064398.075 ops/s
# Warmup Iteration  30: 1059108.171 ops/s
Iteration   1: 1064620.758 ops/s
Iteration   2: 1063470.436 ops/s
Iteration   3: 1060886.838 ops/s
Iteration   4: 1059314.735 ops/s
Iteration   5: 1063057.076 ops/s
Iteration   6: 1062005.627 ops/s
Iteration   7: 1061665.789 ops/s
Iteration   8: 1060038.246 ops/s
Iteration   9: 1061834.897 ops/s
Iteration  10: 1063195.861 ops/s
Iteration  11: 1062697.573 ops/s
Iteration  12: 1064180.277 ops/s
Iteration  13: 1062619.230 ops/s
Iteration  14: 1062718.184 ops/s
Iteration  15: 1062248.026 ops/s
Iteration  16: 1059453.804 ops/s
Iteration  17: 1063410.285 ops/s
Iteration  18: 1064178.482 ops/s
Iteration  19: 1061278.996 ops/s
Iteration  20: 1059832.696 ops/s
Iteration  21: 1058069.038 ops/s
Iteration  22: 1059986.394 ops/s
Iteration  23: 1061666.107 ops/s
Iteration  24: 1059625.892 ops/s
Iteration  25: 1058272.709 ops/s
Iteration  26: 1057196.826 ops/s
Iteration  27: 1059152.304 ops/s
Iteration  28: 1062768.449 ops/s
Iteration  29: 1063850.389 ops/s
Iteration  30: 1064491.092 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_add":
  1061592.901 ±(99.9%) 1382.797 ops/s [Average]
  (min, avg, max) = (1057196.826, 1061592.901, 1064620.758), stdev = 2069.705
  CI (99.9%): [1060210.104, 1062975.697] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_add  thrpt   30  1061592.901 ± 1382.797  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_addAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_addAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 747500.056 ops/s
# Warmup Iteration   2: 786961.570 ops/s
# Warmup Iteration   3: 1001906.193 ops/s
# Warmup Iteration   4: 992777.628 ops/s
# Warmup Iteration   5: 1001264.724 ops/s
# Warmup Iteration   6: 1003067.726 ops/s
# Warmup Iteration   7: 1001515.470 ops/s
# Warmup Iteration   8: 1002632.249 ops/s
# Warmup Iteration   9: 998645.442 ops/s
# Warmup Iteration  10: 994840.946 ops/s
# Warmup Iteration  11: 997235.159 ops/s
# Warmup Iteration  12: 852692.491 ops/s
# Warmup Iteration  13: 1001230.998 ops/s
# Warmup Iteration  14: 998961.914 ops/s
# Warmup Iteration  15: 997281.313 ops/s
# Warmup Iteration  16: 995532.258 ops/s
# Warmup Iteration  17: 1060184.904 ops/s
# Warmup Iteration  18: 1059624.049 ops/s
# Warmup Iteration  19: 1060025.396 ops/s
# Warmup Iteration  20: 1057005.292 ops/s
# Warmup Iteration  21: 1059775.463 ops/s
# Warmup Iteration  22: 1057833.542 ops/s
# Warmup Iteration  23: 1055687.594 ops/s
# Warmup Iteration  24: 1052889.478 ops/s
# Warmup Iteration  25: 1060079.543 ops/s
# Warmup Iteration  26: 1060256.893 ops/s
# Warmup Iteration  27: 1060671.160 ops/s
# Warmup Iteration  28: 1059616.002 ops/s
# Warmup Iteration  29: 1063034.383 ops/s
# Warmup Iteration  30: 1062485.361 ops/s
Iteration   1: 1062001.887 ops/s
Iteration   2: 1062765.482 ops/s
Iteration   3: 1061953.270 ops/s
Iteration   4: 1061158.794 ops/s
Iteration   5: 1057343.875 ops/s
Iteration   6: 1059428.800 ops/s
Iteration   7: 1054989.514 ops/s
Iteration   8: 1058214.319 ops/s
Iteration   9: 1062827.216 ops/s
Iteration  10: 1062547.719 ops/s
Iteration  11: 1062057.077 ops/s
Iteration  12: 1058333.574 ops/s
Iteration  13: 1060057.883 ops/s
Iteration  14: 1059671.900 ops/s
Iteration  15: 1060264.303 ops/s
Iteration  16: 1058220.012 ops/s
Iteration  17: 1056429.978 ops/s
Iteration  18: 1059998.950 ops/s
Iteration  19: 1061383.891 ops/s
Iteration  20: 1058981.906 ops/s
Iteration  21: 1061024.178 ops/s
Iteration  22: 1060377.753 ops/s
Iteration  23: 1057428.719 ops/s
Iteration  24: 1058378.320 ops/s
Iteration  25: 1054524.604 ops/s
Iteration  26: 1055993.937 ops/s
Iteration  27: 1054894.637 ops/s
Iteration  28: 1054483.151 ops/s
Iteration  29: 1065289.629 ops/s
Iteration  30: 1056956.026 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_addAll":
  1059266.044 ±(99.9%) 1869.539 ops/s [Average]
  (min, avg, max) = (1054483.151, 1059266.044, 1065289.629), stdev = 2798.238
  CI (99.9%): [1057396.505, 1061135.582] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_addAll  thrpt   30  1059266.044 ± 1869.539  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_addAllAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_addAllAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 756719.918 ops/s
# Warmup Iteration   2: 792921.053 ops/s
# Warmup Iteration   3: 1014803.511 ops/s
# Warmup Iteration   4: 1015043.974 ops/s
# Warmup Iteration   5: 1011146.396 ops/s
# Warmup Iteration   6: 1014705.246 ops/s
# Warmup Iteration   7: 1009800.837 ops/s
# Warmup Iteration   8: 1012572.444 ops/s
# Warmup Iteration   9: 1010015.040 ops/s
# Warmup Iteration  10: 1008822.461 ops/s
# Warmup Iteration  11: 1011714.860 ops/s
# Warmup Iteration  12: 859382.267 ops/s
# Warmup Iteration  13: 1008352.168 ops/s
# Warmup Iteration  14: 1001677.499 ops/s
# Warmup Iteration  15: 1007722.089 ops/s
# Warmup Iteration  16: 1006594.953 ops/s
# Warmup Iteration  17: 1076334.030 ops/s
# Warmup Iteration  18: 1074121.500 ops/s
# Warmup Iteration  19: 1076771.408 ops/s
# Warmup Iteration  20: 1076192.647 ops/s
# Warmup Iteration  21: 1076620.543 ops/s
# Warmup Iteration  22: 1072885.337 ops/s
# Warmup Iteration  23: 1076207.484 ops/s
# Warmup Iteration  24: 1073878.418 ops/s
# Warmup Iteration  25: 1070968.395 ops/s
# Warmup Iteration  26: 1074270.215 ops/s
# Warmup Iteration  27: 1077249.783 ops/s
# Warmup Iteration  28: 1077900.132 ops/s
# Warmup Iteration  29: 1076424.915 ops/s
# Warmup Iteration  30: 1074744.547 ops/s
Iteration   1: 1075168.762 ops/s
Iteration   2: 1074818.009 ops/s
Iteration   3: 1074250.741 ops/s
Iteration   4: 1076820.754 ops/s
Iteration   5: 1077916.434 ops/s
Iteration   6: 1079206.481 ops/s
Iteration   7: 1081912.133 ops/s
Iteration   8: 1074964.741 ops/s
Iteration   9: 1075952.551 ops/s
Iteration  10: 1072795.509 ops/s
Iteration  11: 1073776.780 ops/s
Iteration  12: 1074564.727 ops/s
Iteration  13: 1068435.080 ops/s
Iteration  14: 1074566.470 ops/s
Iteration  15: 1076478.864 ops/s
Iteration  16: 1074830.090 ops/s
Iteration  17: 1070793.522 ops/s
Iteration  18: 1074236.939 ops/s
Iteration  19: 1070726.499 ops/s
Iteration  20: 1074433.501 ops/s
Iteration  21: 1068178.378 ops/s
Iteration  22: 1076745.309 ops/s
Iteration  23: 1079324.906 ops/s
Iteration  24: 1077314.177 ops/s
Iteration  25: 1077847.174 ops/s
Iteration  26: 1074726.346 ops/s
Iteration  27: 1076630.172 ops/s
Iteration  28: 1080387.471 ops/s
Iteration  29: 1080249.345 ops/s
Iteration  30: 1078998.032 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_addAllAtIndex":
  1075568.330 ±(99.9%) 2202.246 ops/s [Average]
  (min, avg, max) = (1068178.378, 1075568.330, 1081912.133), stdev = 3296.219
  CI (99.9%): [1073366.083, 1077770.576] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_addAllAtIndex  thrpt   30  1075568.330 ± 2202.246  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_addAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_addAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 769743.951 ops/s
# Warmup Iteration   2: 793277.453 ops/s
# Warmup Iteration   3: 1009725.635 ops/s
# Warmup Iteration   4: 1009355.579 ops/s
# Warmup Iteration   5: 1011200.276 ops/s
# Warmup Iteration   6: 1007829.569 ops/s
# Warmup Iteration   7: 1006662.833 ops/s
# Warmup Iteration   8: 1010190.957 ops/s
# Warmup Iteration   9: 1011138.191 ops/s
# Warmup Iteration  10: 1010419.533 ops/s
# Warmup Iteration  11: 1013130.390 ops/s
# Warmup Iteration  12: 858106.840 ops/s
# Warmup Iteration  13: 1007560.826 ops/s
# Warmup Iteration  14: 1006036.031 ops/s
# Warmup Iteration  15: 1007883.481 ops/s
# Warmup Iteration  16: 1007640.700 ops/s
# Warmup Iteration  17: 1075207.433 ops/s
# Warmup Iteration  18: 1076035.948 ops/s
# Warmup Iteration  19: 1076611.093 ops/s
# Warmup Iteration  20: 1075528.746 ops/s
# Warmup Iteration  21: 1078224.632 ops/s
# Warmup Iteration  22: 1076128.422 ops/s
# Warmup Iteration  23: 1077435.731 ops/s
# Warmup Iteration  24: 1074942.043 ops/s
# Warmup Iteration  25: 1075125.967 ops/s
# Warmup Iteration  26: 1072987.700 ops/s
# Warmup Iteration  27: 1072895.716 ops/s
# Warmup Iteration  28: 1072199.329 ops/s
# Warmup Iteration  29: 1074783.919 ops/s
# Warmup Iteration  30: 1073109.637 ops/s
Iteration   1: 1074364.607 ops/s
Iteration   2: 1074325.618 ops/s
Iteration   3: 1073542.139 ops/s
Iteration   4: 1074560.814 ops/s
Iteration   5: 1077766.001 ops/s
Iteration   6: 1076656.229 ops/s
Iteration   7: 1075352.052 ops/s
Iteration   8: 1067112.222 ops/s
Iteration   9: 1070437.626 ops/s
Iteration  10: 1071806.858 ops/s
Iteration  11: 1074098.921 ops/s
Iteration  12: 1068029.676 ops/s
Iteration  13: 1073962.032 ops/s
Iteration  14: 1077555.554 ops/s
Iteration  15: 1078431.587 ops/s
Iteration  16: 1075757.515 ops/s
Iteration  17: 1075575.710 ops/s
Iteration  18: 1073431.976 ops/s
Iteration  19: 1074096.301 ops/s
Iteration  20: 1073230.149 ops/s
Iteration  21: 1074339.935 ops/s
Iteration  22: 1074709.504 ops/s
Iteration  23: 1071772.067 ops/s
Iteration  24: 1070188.977 ops/s
Iteration  25: 1071869.220 ops/s
Iteration  26: 1073921.191 ops/s
Iteration  27: 1074369.286 ops/s
Iteration  28: 1076655.003 ops/s
Iteration  29: 1076193.313 ops/s
Iteration  30: 1075171.445 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_addAtIndex":
  1073976.118 ±(99.9%) 1759.844 ops/s [Average]
  (min, avg, max) = (1067112.222, 1073976.118, 1078431.587), stdev = 2634.053
  CI (99.9%): [1072216.273, 1075735.962] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_addAtIndex  thrpt   30  1073976.118 ± 1759.844  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_aggregateByMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_aggregateByMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1586108.986 ops/s
# Warmup Iteration   2: 4127681.368 ops/s
# Warmup Iteration   3: 3454449.029 ops/s
# Warmup Iteration   4: 4166106.825 ops/s
# Warmup Iteration   5: 4178703.387 ops/s
# Warmup Iteration   6: 4170931.303 ops/s
# Warmup Iteration   7: 4164227.365 ops/s
# Warmup Iteration   8: 4156814.505 ops/s
# Warmup Iteration   9: 4163223.864 ops/s
# Warmup Iteration  10: 4158425.096 ops/s
# Warmup Iteration  11: 4153452.496 ops/s
# Warmup Iteration  12: 4155824.274 ops/s
# Warmup Iteration  13: 4156802.840 ops/s
# Warmup Iteration  14: 4154467.435 ops/s
# Warmup Iteration  15: 4162851.008 ops/s
# Warmup Iteration  16: 4144572.420 ops/s
# Warmup Iteration  17: 4154282.369 ops/s
# Warmup Iteration  18: 4169338.729 ops/s
# Warmup Iteration  19: 4158987.465 ops/s
# Warmup Iteration  20: 4121649.863 ops/s
# Warmup Iteration  21: 4155753.431 ops/s
# Warmup Iteration  22: 4166314.322 ops/s
# Warmup Iteration  23: 4164726.979 ops/s
# Warmup Iteration  24: 4162481.915 ops/s
# Warmup Iteration  25: 4162849.171 ops/s
# Warmup Iteration  26: 4155105.850 ops/s
# Warmup Iteration  27: 4165174.592 ops/s
# Warmup Iteration  28: 4167850.522 ops/s
# Warmup Iteration  29: 4156239.749 ops/s
# Warmup Iteration  30: 4150773.491 ops/s
Iteration   1: 4139379.385 ops/s
Iteration   2: 4163481.840 ops/s
Iteration   3: 4160750.953 ops/s
Iteration   4: 4164401.098 ops/s
Iteration   5: 4152173.790 ops/s
Iteration   6: 4165980.555 ops/s
Iteration   7: 4151123.914 ops/s
Iteration   8: 4160764.447 ops/s
Iteration   9: 4165986.188 ops/s
Iteration  10: 4163987.844 ops/s
Iteration  11: 4164433.366 ops/s
Iteration  12: 4169206.220 ops/s
Iteration  13: 4168180.161 ops/s
Iteration  14: 4165233.808 ops/s
Iteration  15: 4163554.163 ops/s
Iteration  16: 4156634.057 ops/s
Iteration  17: 4158715.985 ops/s
Iteration  18: 4153817.324 ops/s
Iteration  19: 4161014.836 ops/s
Iteration  20: 4167632.912 ops/s
Iteration  21: 4170666.868 ops/s
Iteration  22: 4156358.591 ops/s
Iteration  23: 4161491.079 ops/s
Iteration  24: 4166799.328 ops/s
Iteration  25: 4166316.532 ops/s
Iteration  26: 4163941.337 ops/s
Iteration  27: 4161303.985 ops/s
Iteration  28: 4150980.056 ops/s
Iteration  29: 4035128.327 ops/s
Iteration  30: 4150500.822 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_aggregateByMutating":
  4156664.659 ±(99.9%) 16018.698 ops/s [Average]
  (min, avg, max) = (4035128.327, 4156664.659, 4170666.868), stdev = 23976.034
  CI (99.9%): [4140645.961, 4172683.357] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_aggregateByMutating  thrpt   30  4156664.659 ± 16018.698  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_aggregateByNonMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_aggregateByNonMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1622522.618 ops/s
# Warmup Iteration   2: 4301979.434 ops/s
# Warmup Iteration   3: 3585369.783 ops/s
# Warmup Iteration   4: 4371404.532 ops/s
# Warmup Iteration   5: 4377315.929 ops/s
# Warmup Iteration   6: 4368619.040 ops/s
# Warmup Iteration   7: 4374340.723 ops/s
# Warmup Iteration   8: 4377830.404 ops/s
# Warmup Iteration   9: 4370001.818 ops/s
# Warmup Iteration  10: 4382383.227 ops/s
# Warmup Iteration  11: 4367941.679 ops/s
# Warmup Iteration  12: 4377528.070 ops/s
# Warmup Iteration  13: 4373231.960 ops/s
# Warmup Iteration  14: 4377625.682 ops/s
# Warmup Iteration  15: 4362390.297 ops/s
# Warmup Iteration  16: 4361954.581 ops/s
# Warmup Iteration  17: 4304823.514 ops/s
# Warmup Iteration  18: 4377844.074 ops/s
# Warmup Iteration  19: 4373863.208 ops/s
# Warmup Iteration  20: 4366853.626 ops/s
# Warmup Iteration  21: 4372167.584 ops/s
# Warmup Iteration  22: 4377617.494 ops/s
# Warmup Iteration  23: 4363279.520 ops/s
# Warmup Iteration  24: 4373906.139 ops/s
# Warmup Iteration  25: 4373115.178 ops/s
# Warmup Iteration  26: 4372767.982 ops/s
# Warmup Iteration  27: 4371932.211 ops/s
# Warmup Iteration  28: 4361987.236 ops/s
# Warmup Iteration  29: 4382644.989 ops/s
# Warmup Iteration  30: 4350557.798 ops/s
Iteration   1: 4340582.160 ops/s
Iteration   2: 4331886.054 ops/s
Iteration   3: 4282045.806 ops/s
Iteration   4: 4357778.632 ops/s
Iteration   5: 4366801.696 ops/s
Iteration   6: 4378489.001 ops/s
Iteration   7: 4378864.185 ops/s
Iteration   8: 4360598.524 ops/s
Iteration   9: 4368803.861 ops/s
Iteration  10: 4301347.647 ops/s
Iteration  11: 4376579.982 ops/s
Iteration  12: 4363784.129 ops/s
Iteration  13: 4376182.478 ops/s
Iteration  14: 4372779.248 ops/s
Iteration  15: 4362692.644 ops/s
Iteration  16: 4351251.799 ops/s
Iteration  17: 4372020.427 ops/s
Iteration  18: 4370197.382 ops/s
Iteration  19: 4297859.403 ops/s
Iteration  20: 4359645.812 ops/s
Iteration  21: 4375269.983 ops/s
Iteration  22: 4307789.024 ops/s
Iteration  23: 4367752.387 ops/s
Iteration  24: 4359359.119 ops/s
Iteration  25: 4373712.873 ops/s
Iteration  26: 4373655.470 ops/s
Iteration  27: 4367042.084 ops/s
Iteration  28: 4364077.339 ops/s
Iteration  29: 4376051.241 ops/s
Iteration  30: 4370298.018 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_aggregateByNonMutating":
  4356839.947 ±(99.9%) 17520.885 ops/s [Average]
  (min, avg, max) = (4282045.806, 4356839.947, 4378864.185), stdev = 26224.438
  CI (99.9%): [4339319.062, 4374360.832] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_aggregateByNonMutating  thrpt   30  4356839.947 ± 17520.885  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 25413203.541 ops/s
# Warmup Iteration   2: 50920835.222 ops/s
# Warmup Iteration   3: 40723618.906 ops/s
# Warmup Iteration   4: 48329262.995 ops/s
# Warmup Iteration   5: 48282152.658 ops/s
# Warmup Iteration   6: 48403304.372 ops/s
# Warmup Iteration   7: 48220253.958 ops/s
# Warmup Iteration   8: 48297789.068 ops/s
# Warmup Iteration   9: 48256734.020 ops/s
# Warmup Iteration  10: 48236915.895 ops/s
# Warmup Iteration  11: 48314597.420 ops/s
# Warmup Iteration  12: 48364414.262 ops/s
# Warmup Iteration  13: 48184102.711 ops/s
# Warmup Iteration  14: 48275487.563 ops/s
# Warmup Iteration  15: 48311151.109 ops/s
# Warmup Iteration  16: 48273178.240 ops/s
# Warmup Iteration  17: 48308798.305 ops/s
# Warmup Iteration  18: 48275436.856 ops/s
# Warmup Iteration  19: 48143453.806 ops/s
# Warmup Iteration  20: 48212192.418 ops/s
# Warmup Iteration  21: 48422120.376 ops/s
# Warmup Iteration  22: 48392588.914 ops/s
# Warmup Iteration  23: 47988512.570 ops/s
# Warmup Iteration  24: 48489469.841 ops/s
# Warmup Iteration  25: 48238174.513 ops/s
# Warmup Iteration  26: 48221397.156 ops/s
# Warmup Iteration  27: 48294393.651 ops/s
# Warmup Iteration  28: 48276249.596 ops/s
# Warmup Iteration  29: 48198671.537 ops/s
# Warmup Iteration  30: 48251503.886 ops/s
Iteration   1: 48312204.323 ops/s
Iteration   2: 48261838.052 ops/s
Iteration   3: 48424161.248 ops/s
Iteration   4: 48327615.132 ops/s
Iteration   5: 48345192.348 ops/s
Iteration   6: 48338281.143 ops/s
Iteration   7: 48224070.613 ops/s
Iteration   8: 48335573.116 ops/s
Iteration   9: 48361017.680 ops/s
Iteration  10: 48255493.435 ops/s
Iteration  11: 48262263.566 ops/s
Iteration  12: 48162194.369 ops/s
Iteration  13: 48292359.800 ops/s
Iteration  14: 47905116.083 ops/s
Iteration  15: 48012109.045 ops/s
Iteration  16: 48032026.589 ops/s
Iteration  17: 47877827.289 ops/s
Iteration  18: 48157792.194 ops/s
Iteration  19: 48392367.118 ops/s
Iteration  20: 48440852.379 ops/s
Iteration  21: 48341186.667 ops/s
Iteration  22: 48252982.528 ops/s
Iteration  23: 48189130.252 ops/s
Iteration  24: 48255848.137 ops/s
Iteration  25: 48462502.174 ops/s
Iteration  26: 48309532.194 ops/s
Iteration  27: 48198493.673 ops/s
Iteration  28: 48294452.299 ops/s
Iteration  29: 48251996.396 ops/s
Iteration  30: 48282993.143 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_allSatisfy":
  48251982.433 ±(99.9%) 94514.015 ops/s [Average]
  (min, avg, max) = (47877827.289, 48251982.433, 48462502.174), stdev = 141464.138
  CI (99.9%): [48157468.418, 48346496.447] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_allSatisfy  thrpt   30  48251982.433 ± 94514.015  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_allSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_allSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 16639886.230 ops/s
# Warmup Iteration   2: 32098942.925 ops/s
# Warmup Iteration   3: 27745367.853 ops/s
# Warmup Iteration   4: 32491536.070 ops/s
# Warmup Iteration   5: 32507687.880 ops/s
# Warmup Iteration   6: 32584727.289 ops/s
# Warmup Iteration   7: 32535688.563 ops/s
# Warmup Iteration   8: 32521650.252 ops/s
# Warmup Iteration   9: 32586849.604 ops/s
# Warmup Iteration  10: 32553818.398 ops/s
# Warmup Iteration  11: 32612708.866 ops/s
# Warmup Iteration  12: 32533540.584 ops/s
# Warmup Iteration  13: 32515218.387 ops/s
# Warmup Iteration  14: 32549760.605 ops/s
# Warmup Iteration  15: 32532568.565 ops/s
# Warmup Iteration  16: 32559739.730 ops/s
# Warmup Iteration  17: 32377491.447 ops/s
# Warmup Iteration  18: 32417714.541 ops/s
# Warmup Iteration  19: 32402451.239 ops/s
# Warmup Iteration  20: 32521241.356 ops/s
# Warmup Iteration  21: 32352359.852 ops/s
# Warmup Iteration  22: 32477973.826 ops/s
# Warmup Iteration  23: 32367140.010 ops/s
# Warmup Iteration  24: 32415194.360 ops/s
# Warmup Iteration  25: 32410634.515 ops/s
# Warmup Iteration  26: 32470881.888 ops/s
# Warmup Iteration  27: 32449523.460 ops/s
# Warmup Iteration  28: 32565995.747 ops/s
# Warmup Iteration  29: 32471172.779 ops/s
# Warmup Iteration  30: 32382722.037 ops/s
Iteration   1: 32273737.429 ops/s
Iteration   2: 32450624.638 ops/s
Iteration   3: 32363538.750 ops/s
Iteration   4: 32367934.451 ops/s
Iteration   5: 32195438.219 ops/s
Iteration   6: 32094168.397 ops/s
Iteration   7: 32280743.270 ops/s
Iteration   8: 32122790.470 ops/s
Iteration   9: 32223509.620 ops/s
Iteration  10: 32183539.590 ops/s
Iteration  11: 32089269.592 ops/s
Iteration  12: 32214645.516 ops/s
Iteration  13: 32511206.550 ops/s
Iteration  14: 32313279.466 ops/s
Iteration  15: 32433276.452 ops/s
Iteration  16: 32447161.293 ops/s
Iteration  17: 32440919.129 ops/s
Iteration  18: 32427758.957 ops/s
Iteration  19: 32401698.208 ops/s
Iteration  20: 32497142.356 ops/s
Iteration  21: 32472338.657 ops/s
Iteration  22: 32474782.146 ops/s
Iteration  23: 32387100.222 ops/s
Iteration  24: 32437745.023 ops/s
Iteration  25: 32415040.829 ops/s
Iteration  26: 32393321.892 ops/s
Iteration  27: 32446982.402 ops/s
Iteration  28: 32400945.715 ops/s
Iteration  29: 32512963.406 ops/s
Iteration  30: 32432743.578 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_allSatisfyWith":
  32356878.207 ±(99.9%) 84534.837 ops/s [Average]
  (min, avg, max) = (32089269.592, 32356878.207, 32512963.406), stdev = 126527.774
  CI (99.9%): [32272343.370, 32441413.045] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score       Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_allSatisfyWith  thrpt   30  32356878.207 ± 84534.837  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 17092937.051 ops/s
# Warmup Iteration   2: 33021533.943 ops/s
# Warmup Iteration   3: 28205911.615 ops/s
# Warmup Iteration   4: 33181105.681 ops/s
# Warmup Iteration   5: 33196405.170 ops/s
# Warmup Iteration   6: 33164922.173 ops/s
# Warmup Iteration   7: 33220923.489 ops/s
# Warmup Iteration   8: 33177818.452 ops/s
# Warmup Iteration   9: 33151733.649 ops/s
# Warmup Iteration  10: 33160237.366 ops/s
# Warmup Iteration  11: 33181186.159 ops/s
# Warmup Iteration  12: 33241175.254 ops/s
# Warmup Iteration  13: 33301917.336 ops/s
# Warmup Iteration  14: 33231984.996 ops/s
# Warmup Iteration  15: 33177004.377 ops/s
# Warmup Iteration  16: 33174437.186 ops/s
# Warmup Iteration  17: 33041888.508 ops/s
# Warmup Iteration  18: 33063973.391 ops/s
# Warmup Iteration  19: 33082373.966 ops/s
# Warmup Iteration  20: 33078372.378 ops/s
# Warmup Iteration  21: 33029667.954 ops/s
# Warmup Iteration  22: 33093388.341 ops/s
# Warmup Iteration  23: 33202696.440 ops/s
# Warmup Iteration  24: 33071981.261 ops/s
# Warmup Iteration  25: 33213327.475 ops/s
# Warmup Iteration  26: 33087785.074 ops/s
# Warmup Iteration  27: 33148459.224 ops/s
# Warmup Iteration  28: 33165869.859 ops/s
# Warmup Iteration  29: 33021513.067 ops/s
# Warmup Iteration  30: 33071494.165 ops/s
Iteration   1: 32696517.308 ops/s
Iteration   2: 33017827.828 ops/s
Iteration   3: 33008857.424 ops/s
Iteration   4: 32907926.973 ops/s
Iteration   5: 33027118.241 ops/s
Iteration   6: 33203154.104 ops/s
Iteration   7: 33088847.367 ops/s
Iteration   8: 32939916.359 ops/s
Iteration   9: 32972218.161 ops/s
Iteration  10: 33021980.439 ops/s
Iteration  11: 32995680.421 ops/s
Iteration  12: 33163823.682 ops/s
Iteration  13: 33206418.724 ops/s
Iteration  14: 33169607.463 ops/s
Iteration  15: 33046326.100 ops/s
Iteration  16: 33180732.512 ops/s
Iteration  17: 33107236.029 ops/s
Iteration  18: 33027628.200 ops/s
Iteration  19: 33174166.554 ops/s
Iteration  20: 33013500.567 ops/s
Iteration  21: 33127865.368 ops/s
Iteration  22: 33219347.399 ops/s
Iteration  23: 33180955.163 ops/s
Iteration  24: 33114872.438 ops/s
Iteration  25: 33052204.312 ops/s
Iteration  26: 33109228.363 ops/s
Iteration  27: 33071271.739 ops/s
Iteration  28: 33125688.544 ops/s
Iteration  29: 33086575.571 ops/s
Iteration  30: 33194481.454 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_anySatisfy":
  33075065.827 ±(99.9%) 73792.534 ops/s [Average]
  (min, avg, max) = (32696517.308, 33075065.827, 33219347.399), stdev = 110449.200
  CI (99.9%): [33001273.293, 33148858.361] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_anySatisfy  thrpt   30  33075065.827 ± 73792.534  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_anySatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_anySatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 17496909.899 ops/s
# Warmup Iteration   2: 34401872.032 ops/s
# Warmup Iteration   3: 34035815.137 ops/s
# Warmup Iteration   4: 29028177.124 ops/s
# Warmup Iteration   5: 34174879.143 ops/s
# Warmup Iteration   6: 34197413.073 ops/s
# Warmup Iteration   7: 34153019.524 ops/s
# Warmup Iteration   8: 34181636.887 ops/s
# Warmup Iteration   9: 34224592.437 ops/s
# Warmup Iteration  10: 34100038.065 ops/s
# Warmup Iteration  11: 34226191.685 ops/s
# Warmup Iteration  12: 34152572.562 ops/s
# Warmup Iteration  13: 34012073.234 ops/s
# Warmup Iteration  14: 34188209.081 ops/s
# Warmup Iteration  15: 34224585.827 ops/s
# Warmup Iteration  16: 34181528.938 ops/s
# Warmup Iteration  17: 34104529.700 ops/s
# Warmup Iteration  18: 34287815.094 ops/s
# Warmup Iteration  19: 34100866.120 ops/s
# Warmup Iteration  20: 34226250.006 ops/s
# Warmup Iteration  21: 34202480.582 ops/s
# Warmup Iteration  22: 34098259.476 ops/s
# Warmup Iteration  23: 34117903.834 ops/s
# Warmup Iteration  24: 34020240.586 ops/s
# Warmup Iteration  25: 34013634.689 ops/s
# Warmup Iteration  26: 34075332.784 ops/s
# Warmup Iteration  27: 34220308.994 ops/s
# Warmup Iteration  28: 34139478.488 ops/s
# Warmup Iteration  29: 34285271.854 ops/s
# Warmup Iteration  30: 34194515.231 ops/s
Iteration   1: 33970142.667 ops/s
Iteration   2: 34078836.436 ops/s
Iteration   3: 34086940.645 ops/s
Iteration   4: 34137658.124 ops/s
Iteration   5: 33988324.810 ops/s
Iteration   6: 34064032.929 ops/s
Iteration   7: 34117343.965 ops/s
Iteration   8: 34269161.950 ops/s
Iteration   9: 34153139.375 ops/s
Iteration  10: 34276488.519 ops/s
Iteration  11: 34309398.521 ops/s
Iteration  12: 34119540.825 ops/s
Iteration  13: 34227547.950 ops/s
Iteration  14: 34170225.053 ops/s
Iteration  15: 34229688.793 ops/s
Iteration  16: 34206573.369 ops/s
Iteration  17: 34364189.994 ops/s
Iteration  18: 34223319.709 ops/s
Iteration  19: 34221422.901 ops/s
Iteration  20: 33958128.970 ops/s
Iteration  21: 34212803.962 ops/s
Iteration  22: 34148578.248 ops/s
Iteration  23: 34188950.822 ops/s
Iteration  24: 34197751.640 ops/s
Iteration  25: 34224529.128 ops/s
Iteration  26: 34242101.284 ops/s
Iteration  27: 34231278.927 ops/s
Iteration  28: 34236714.790 ops/s
Iteration  29: 34240028.923 ops/s
Iteration  30: 33132653.015 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_anySatisfyWith":
  34140916.541 ±(99.9%) 142451.543 ops/s [Average]
  (min, avg, max) = (33132653.015, 34140916.541, 34364189.994), stdev = 213214.779
  CI (99.9%): [33998464.999, 34283368.084] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score        Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_anySatisfyWith  thrpt   30  34140916.541 ± 142451.543  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1520114.751 ops/s
# Warmup Iteration   2: 3335525.628 ops/s
# Warmup Iteration   3: 2864239.171 ops/s
# Warmup Iteration   4: 3421381.189 ops/s
# Warmup Iteration   5: 3426319.966 ops/s
# Warmup Iteration   6: 3422158.555 ops/s
# Warmup Iteration   7: 3418575.450 ops/s
# Warmup Iteration   8: 3419397.646 ops/s
# Warmup Iteration   9: 3427464.118 ops/s
# Warmup Iteration  10: 3431424.185 ops/s
# Warmup Iteration  11: 3414998.218 ops/s
# Warmup Iteration  12: 3429405.114 ops/s
# Warmup Iteration  13: 3425845.632 ops/s
# Warmup Iteration  14: 3433297.180 ops/s
# Warmup Iteration  15: 3426915.998 ops/s
# Warmup Iteration  16: 3426414.752 ops/s
# Warmup Iteration  17: 3426311.130 ops/s
# Warmup Iteration  18: 3415131.548 ops/s
# Warmup Iteration  19: 3427072.266 ops/s
# Warmup Iteration  20: 3429078.490 ops/s
# Warmup Iteration  21: 3429143.587 ops/s
# Warmup Iteration  22: 3424087.320 ops/s
# Warmup Iteration  23: 3426172.734 ops/s
# Warmup Iteration  24: 3429017.959 ops/s
# Warmup Iteration  25: 3431198.301 ops/s
# Warmup Iteration  26: 3430379.304 ops/s
# Warmup Iteration  27: 3424769.441 ops/s
# Warmup Iteration  28: 3422262.506 ops/s
# Warmup Iteration  29: 3434953.889 ops/s
# Warmup Iteration  30: 3431266.169 ops/s
Iteration   1: 3426109.868 ops/s
Iteration   2: 3424124.744 ops/s
Iteration   3: 3421167.768 ops/s
Iteration   4: 3437730.240 ops/s
Iteration   5: 3441504.292 ops/s
Iteration   6: 3421951.984 ops/s
Iteration   7: 3434963.117 ops/s
Iteration   8: 3430481.734 ops/s
Iteration   9: 3431262.874 ops/s
Iteration  10: 3434810.690 ops/s
Iteration  11: 3437855.744 ops/s
Iteration  12: 3437474.431 ops/s
Iteration  13: 3442208.490 ops/s
Iteration  14: 3429239.056 ops/s
Iteration  15: 3437606.997 ops/s
Iteration  16: 3433755.819 ops/s
Iteration  17: 3441877.790 ops/s
Iteration  18: 3434739.049 ops/s
Iteration  19: 3427034.229 ops/s
Iteration  20: 3435104.724 ops/s
Iteration  21: 3425957.719 ops/s
Iteration  22: 3429516.091 ops/s
Iteration  23: 3435035.023 ops/s
Iteration  24: 3420214.905 ops/s
Iteration  25: 3417834.032 ops/s
Iteration  26: 3427992.259 ops/s
Iteration  27: 3437251.123 ops/s
Iteration  28: 3435309.991 ops/s
Iteration  29: 3434305.506 ops/s
Iteration  30: 3426809.709 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_appendString":
  3431707.667 ±(99.9%) 4444.649 ops/s [Average]
  (min, avg, max) = (3417834.032, 3431707.667, 3442208.490), stdev = 6652.542
  CI (99.9%): [3427263.017, 3436152.316] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_appendString  thrpt   30  3431707.667 ± 4444.649  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_asReversed$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_asReversed

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7404476.599 ops/s
# Warmup Iteration   2: 12675729.256 ops/s
# Warmup Iteration   3: 14967867.268 ops/s
# Warmup Iteration   4: 14900940.210 ops/s
# Warmup Iteration   5: 14863374.524 ops/s
# Warmup Iteration   6: 14872472.038 ops/s
# Warmup Iteration   7: 14982950.212 ops/s
# Warmup Iteration   8: 14980450.297 ops/s
# Warmup Iteration   9: 14954782.443 ops/s
# Warmup Iteration  10: 14927662.992 ops/s
# Warmup Iteration  11: 14829408.955 ops/s
# Warmup Iteration  12: 14809852.465 ops/s
# Warmup Iteration  13: 14722087.451 ops/s
# Warmup Iteration  14: 14803459.116 ops/s
# Warmup Iteration  15: 14919628.711 ops/s
# Warmup Iteration  16: 14923872.092 ops/s
# Warmup Iteration  17: 14848959.591 ops/s
# Warmup Iteration  18: 14912534.193 ops/s
# Warmup Iteration  19: 14933362.222 ops/s
# Warmup Iteration  20: 14865256.863 ops/s
# Warmup Iteration  21: 14791707.994 ops/s
# Warmup Iteration  22: 14872953.478 ops/s
# Warmup Iteration  23: 14890352.450 ops/s
# Warmup Iteration  24: 14862594.817 ops/s
# Warmup Iteration  25: 14911069.455 ops/s
# Warmup Iteration  26: 14893193.173 ops/s
# Warmup Iteration  27: 14812520.293 ops/s
# Warmup Iteration  28: 14915570.136 ops/s
# Warmup Iteration  29: 14948968.975 ops/s
# Warmup Iteration  30: 14938357.906 ops/s
Iteration   1: 14939941.603 ops/s
Iteration   2: 14933709.558 ops/s
Iteration   3: 14858055.888 ops/s
Iteration   4: 14908420.451 ops/s
Iteration   5: 14905606.646 ops/s
Iteration   6: 14969745.669 ops/s
Iteration   7: 14936081.667 ops/s
Iteration   8: 14953950.533 ops/s
Iteration   9: 14895239.630 ops/s
Iteration  10: 14800325.925 ops/s
Iteration  11: 14876056.340 ops/s
Iteration  12: 14937752.144 ops/s
Iteration  13: 14933286.799 ops/s
Iteration  14: 14831281.254 ops/s
Iteration  15: 14916532.637 ops/s
Iteration  16: 14941731.772 ops/s
Iteration  17: 14915002.698 ops/s
Iteration  18: 14909807.048 ops/s
Iteration  19: 14983998.825 ops/s
Iteration  20: 15015037.760 ops/s
Iteration  21: 14994345.337 ops/s
Iteration  22: 14922873.180 ops/s
Iteration  23: 15006441.537 ops/s
Iteration  24: 14861658.702 ops/s
Iteration  25: 14720595.466 ops/s
Iteration  26: 14804942.942 ops/s
Iteration  27: 14995405.231 ops/s
Iteration  28: 14980165.048 ops/s
Iteration  29: 14856933.302 ops/s
Iteration  30: 14870993.403 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_asReversed":
  14912530.633 ±(99.9%) 44911.426 ops/s [Average]
  (min, avg, max) = (14720595.466, 14912530.633, 15015037.760), stdev = 67221.313
  CI (99.9%): [14867619.207, 14957442.059] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_asReversed  thrpt   30  14912530.633 ± 44911.426  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_castToCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_castToCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 783498.696 ops/s
# Warmup Iteration   2: 818336.588 ops/s
# Warmup Iteration   3: 1044050.358 ops/s
# Warmup Iteration   4: 1042305.931 ops/s
# Warmup Iteration   5: 1037066.480 ops/s
# Warmup Iteration   6: 1038111.667 ops/s
# Warmup Iteration   7: 1041566.968 ops/s
# Warmup Iteration   8: 1044953.480 ops/s
# Warmup Iteration   9: 1051801.549 ops/s
# Warmup Iteration  10: 1039736.991 ops/s
# Warmup Iteration  11: 1022507.984 ops/s
# Warmup Iteration  12: 913297.559 ops/s
# Warmup Iteration  13: 1042279.462 ops/s
# Warmup Iteration  14: 1042018.292 ops/s
# Warmup Iteration  15: 1044066.266 ops/s
# Warmup Iteration  16: 1041156.425 ops/s
# Warmup Iteration  17: 1110177.888 ops/s
# Warmup Iteration  18: 1109591.436 ops/s
# Warmup Iteration  19: 1107446.888 ops/s
# Warmup Iteration  20: 1106755.680 ops/s
# Warmup Iteration  21: 1108382.666 ops/s
# Warmup Iteration  22: 1109031.626 ops/s
# Warmup Iteration  23: 1112895.885 ops/s
# Warmup Iteration  24: 1108630.290 ops/s
# Warmup Iteration  25: 1109473.245 ops/s
# Warmup Iteration  26: 1107737.788 ops/s
# Warmup Iteration  27: 1108163.660 ops/s
# Warmup Iteration  28: 1106187.010 ops/s
# Warmup Iteration  29: 1108653.639 ops/s
# Warmup Iteration  30: 1112882.227 ops/s
Iteration   1: 1112934.258 ops/s
Iteration   2: 1110122.854 ops/s
Iteration   3: 1112913.461 ops/s
Iteration   4: 1112603.450 ops/s
Iteration   5: 1113697.010 ops/s
Iteration   6: 1107164.132 ops/s
Iteration   7: 1111690.073 ops/s
Iteration   8: 1111078.186 ops/s
Iteration   9: 1112525.027 ops/s
Iteration  10: 1110562.653 ops/s
Iteration  11: 1111663.525 ops/s
Iteration  12: 1109091.877 ops/s
Iteration  13: 1108541.266 ops/s
Iteration  14: 1109793.247 ops/s
Iteration  15: 1113130.767 ops/s
Iteration  16: 1110260.355 ops/s
Iteration  17: 1106137.968 ops/s
Iteration  18: 1107900.025 ops/s
Iteration  19: 1107479.477 ops/s
Iteration  20: 1105932.132 ops/s
Iteration  21: 1108218.111 ops/s
Iteration  22: 1112374.127 ops/s
Iteration  23: 1112877.463 ops/s
Iteration  24: 1112849.703 ops/s
Iteration  25: 1108863.673 ops/s
Iteration  26: 1106989.020 ops/s
Iteration  27: 1109220.122 ops/s
Iteration  28: 1106591.890 ops/s
Iteration  29: 1113441.671 ops/s
Iteration  30: 1111838.239 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_castToCollection":
  1110282.859 ±(99.9%) 1640.233 ops/s [Average]
  (min, avg, max) = (1105932.132, 1110282.859, 1113697.010), stdev = 2455.024
  CI (99.9%): [1108642.626, 1111923.092] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_castToCollection  thrpt   30  1110282.859 ± 1640.233  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_chunk_large_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_chunk_large_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4766539.305 ops/s
# Warmup Iteration   2: 10225991.727 ops/s
# Warmup Iteration   3: 10267114.874 ops/s
# Warmup Iteration   4: 8646791.455 ops/s
# Warmup Iteration   5: 10275953.344 ops/s
# Warmup Iteration   6: 10267293.186 ops/s
# Warmup Iteration   7: 10279450.227 ops/s
# Warmup Iteration   8: 10278333.772 ops/s
# Warmup Iteration   9: 10274047.441 ops/s
# Warmup Iteration  10: 10267955.557 ops/s
# Warmup Iteration  11: 10268618.148 ops/s
# Warmup Iteration  12: 10244546.780 ops/s
# Warmup Iteration  13: 10293815.181 ops/s
# Warmup Iteration  14: 10265124.943 ops/s
# Warmup Iteration  15: 10263831.565 ops/s
# Warmup Iteration  16: 10270334.989 ops/s
# Warmup Iteration  17: 10262132.692 ops/s
# Warmup Iteration  18: 10250082.175 ops/s
# Warmup Iteration  19: 10272482.581 ops/s
# Warmup Iteration  20: 10279870.477 ops/s
# Warmup Iteration  21: 10260585.889 ops/s
# Warmup Iteration  22: 10276343.024 ops/s
# Warmup Iteration  23: 10267218.193 ops/s
# Warmup Iteration  24: 10244084.593 ops/s
# Warmup Iteration  25: 10278164.471 ops/s
# Warmup Iteration  26: 10280081.291 ops/s
# Warmup Iteration  27: 10282206.038 ops/s
# Warmup Iteration  28: 10269902.445 ops/s
# Warmup Iteration  29: 10273697.770 ops/s
# Warmup Iteration  30: 10267840.557 ops/s
Iteration   1: 10267532.529 ops/s
Iteration   2: 10271781.476 ops/s
Iteration   3: 10262852.188 ops/s
Iteration   4: 10240900.762 ops/s
Iteration   5: 10273965.002 ops/s
Iteration   6: 10271271.846 ops/s
Iteration   7: 10271147.117 ops/s
Iteration   8: 10266928.231 ops/s
Iteration   9: 10290179.553 ops/s
Iteration  10: 10249881.131 ops/s
Iteration  11: 10252456.095 ops/s
Iteration  12: 10276125.357 ops/s
Iteration  13: 10275507.297 ops/s
Iteration  14: 10274666.554 ops/s
Iteration  15: 10278620.410 ops/s
Iteration  16: 10297969.024 ops/s
Iteration  17: 10275739.602 ops/s
Iteration  18: 10277020.220 ops/s
Iteration  19: 10275991.102 ops/s
Iteration  20: 10279359.009 ops/s
Iteration  21: 10278289.987 ops/s
Iteration  22: 10277292.066 ops/s
Iteration  23: 10279369.358 ops/s
Iteration  24: 10275715.215 ops/s
Iteration  25: 10270945.485 ops/s
Iteration  26: 10280056.565 ops/s
Iteration  27: 10284827.109 ops/s
Iteration  28: 10281490.424 ops/s
Iteration  29: 10274866.394 ops/s
Iteration  30: 10284180.122 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_chunk_large_size":
  10273897.574 ±(99.9%) 7518.172 ops/s [Average]
  (min, avg, max) = (10240900.762, 10273897.574, 10297969.024), stdev = 11252.847
  CI (99.9%): [10266379.403, 10281415.746] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score      Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_chunk_large_size  thrpt   30  10273897.574 ± 7518.172  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_chunk_zero_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_chunk_zero_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 796555.154 ops/s
# Warmup Iteration   2: 832301.584 ops/s
# Warmup Iteration   3: 1058920.412 ops/s
# Warmup Iteration   4: 1057013.505 ops/s
# Warmup Iteration   5: 1052389.910 ops/s
# Warmup Iteration   6: 1056026.464 ops/s
# Warmup Iteration   7: 1052104.006 ops/s
# Warmup Iteration   8: 1054059.291 ops/s
# Warmup Iteration   9: 1059052.394 ops/s
# Warmup Iteration  10: 1054709.367 ops/s
# Warmup Iteration  11: 1003749.763 ops/s
# Warmup Iteration  12: 956162.135 ops/s
# Warmup Iteration  13: 1055205.634 ops/s
# Warmup Iteration  14: 1054061.956 ops/s
# Warmup Iteration  15: 1055156.776 ops/s
# Warmup Iteration  16: 1054364.223 ops/s
# Warmup Iteration  17: 1121521.611 ops/s
# Warmup Iteration  18: 1122657.189 ops/s
# Warmup Iteration  19: 1122443.657 ops/s
# Warmup Iteration  20: 1124120.908 ops/s
# Warmup Iteration  21: 1124089.289 ops/s
# Warmup Iteration  22: 1124323.077 ops/s
# Warmup Iteration  23: 1122713.628 ops/s
# Warmup Iteration  24: 1125060.666 ops/s
# Warmup Iteration  25: 1122511.125 ops/s
# Warmup Iteration  26: 1117206.316 ops/s
# Warmup Iteration  27: 1119105.294 ops/s
# Warmup Iteration  28: 1121872.667 ops/s
# Warmup Iteration  29: 1121982.493 ops/s
# Warmup Iteration  30: 1122536.928 ops/s
Iteration   1: 1121426.150 ops/s
Iteration   2: 1120701.332 ops/s
Iteration   3: 1121851.606 ops/s
Iteration   4: 1124996.669 ops/s
Iteration   5: 1121918.674 ops/s
Iteration   6: 1122121.142 ops/s
Iteration   7: 1121575.700 ops/s
Iteration   8: 1122143.823 ops/s
Iteration   9: 1120212.460 ops/s
Iteration  10: 1123697.859 ops/s
Iteration  11: 1121825.623 ops/s
Iteration  12: 1118696.377 ops/s
Iteration  13: 1121501.028 ops/s
Iteration  14: 1124026.545 ops/s
Iteration  15: 1121161.411 ops/s
Iteration  16: 1118353.157 ops/s
Iteration  17: 1120994.211 ops/s
Iteration  18: 1124421.799 ops/s
Iteration  19: 1123274.208 ops/s
Iteration  20: 1120732.185 ops/s
Iteration  21: 1121249.243 ops/s
Iteration  22: 1121178.761 ops/s
Iteration  23: 1122813.279 ops/s
Iteration  24: 1119578.771 ops/s
Iteration  25: 1120461.967 ops/s
Iteration  26: 1123127.227 ops/s
Iteration  27: 1120378.559 ops/s
Iteration  28: 1121628.308 ops/s
Iteration  29: 1123374.565 ops/s
Iteration  30: 1120706.044 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_chunk_zero_throws":
  1121670.956 ±(99.9%) 1046.934 ops/s [Average]
  (min, avg, max) = (1118353.157, 1121670.956, 1124996.669), stdev = 1567.002
  CI (99.9%): [1120624.022, 1122717.891] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_chunk_zero_throws  thrpt   30  1121670.956 ± 1046.934  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 765838.155 ops/s
# Warmup Iteration   2: 795863.007 ops/s
# Warmup Iteration   3: 1014450.254 ops/s
# Warmup Iteration   4: 1013176.503 ops/s
# Warmup Iteration   5: 1006013.280 ops/s
# Warmup Iteration   6: 1013224.847 ops/s
# Warmup Iteration   7: 1010272.491 ops/s
# Warmup Iteration   8: 1012770.407 ops/s
# Warmup Iteration   9: 1017272.856 ops/s
# Warmup Iteration  10: 1013896.098 ops/s
# Warmup Iteration  11: 1010338.826 ops/s
# Warmup Iteration  12: 861780.770 ops/s
# Warmup Iteration  13: 1012809.946 ops/s
# Warmup Iteration  14: 1013900.271 ops/s
# Warmup Iteration  15: 1013099.335 ops/s
# Warmup Iteration  16: 1013105.053 ops/s
# Warmup Iteration  17: 1077162.904 ops/s
# Warmup Iteration  18: 1079838.759 ops/s
# Warmup Iteration  19: 1079555.556 ops/s
# Warmup Iteration  20: 1076890.010 ops/s
# Warmup Iteration  21: 1079971.227 ops/s
# Warmup Iteration  22: 1078628.451 ops/s
# Warmup Iteration  23: 1072297.337 ops/s
# Warmup Iteration  24: 1075305.131 ops/s
# Warmup Iteration  25: 1077798.900 ops/s
# Warmup Iteration  26: 1076762.799 ops/s
# Warmup Iteration  27: 1073694.349 ops/s
# Warmup Iteration  28: 1076251.327 ops/s
# Warmup Iteration  29: 1076701.155 ops/s
# Warmup Iteration  30: 1076437.625 ops/s
Iteration   1: 1077543.047 ops/s
Iteration   2: 1077412.287 ops/s
Iteration   3: 1076158.024 ops/s
Iteration   4: 1076229.866 ops/s
Iteration   5: 1078589.965 ops/s
Iteration   6: 1071878.870 ops/s
Iteration   7: 1074985.887 ops/s
Iteration   8: 1078661.763 ops/s
Iteration   9: 1077873.429 ops/s
Iteration  10: 1076488.178 ops/s
Iteration  11: 1072278.270 ops/s
Iteration  12: 1076162.224 ops/s
Iteration  13: 1074630.531 ops/s
Iteration  14: 1073860.503 ops/s
Iteration  15: 1075742.551 ops/s
Iteration  16: 1078635.441 ops/s
Iteration  17: 1079457.935 ops/s
Iteration  18: 1069260.748 ops/s
Iteration  19: 1077246.515 ops/s
Iteration  20: 1076567.757 ops/s
Iteration  21: 1076385.205 ops/s
Iteration  22: 1076404.081 ops/s
Iteration  23: 1078410.303 ops/s
Iteration  24: 1081778.598 ops/s
Iteration  25: 1077476.250 ops/s
Iteration  26: 1075068.787 ops/s
Iteration  27: 1075595.727 ops/s
Iteration  28: 1077795.101 ops/s
Iteration  29: 1081228.662 ops/s
Iteration  30: 1076497.756 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_clear":
  1076543.475 ±(99.9%) 1715.835 ops/s [Average]
  (min, avg, max) = (1069260.748, 1076543.475, 1081778.598), stdev = 2568.182
  CI (99.9%): [1074827.640, 1078259.311] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_clear  thrpt   30  1076543.475 ± 1715.835  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7886488.551 ops/s
# Warmup Iteration   2: 15753317.100 ops/s
# Warmup Iteration   3: 16138747.290 ops/s
# Warmup Iteration   4: 16214543.294 ops/s
# Warmup Iteration   5: 13676941.135 ops/s
# Warmup Iteration   6: 16233007.618 ops/s
# Warmup Iteration   7: 16246271.473 ops/s
# Warmup Iteration   8: 16227903.342 ops/s
# Warmup Iteration   9: 16226559.081 ops/s
# Warmup Iteration  10: 16208238.275 ops/s
# Warmup Iteration  11: 16228394.795 ops/s
# Warmup Iteration  12: 16223322.876 ops/s
# Warmup Iteration  13: 16237186.715 ops/s
# Warmup Iteration  14: 16236460.576 ops/s
# Warmup Iteration  15: 16228769.679 ops/s
# Warmup Iteration  16: 16233379.026 ops/s
# Warmup Iteration  17: 16222120.017 ops/s
# Warmup Iteration  18: 16246263.312 ops/s
# Warmup Iteration  19: 16204849.658 ops/s
# Warmup Iteration  20: 16218927.912 ops/s
# Warmup Iteration  21: 16242003.368 ops/s
# Warmup Iteration  22: 16268266.614 ops/s
# Warmup Iteration  23: 16234863.254 ops/s
# Warmup Iteration  24: 16251938.581 ops/s
# Warmup Iteration  25: 16235786.107 ops/s
# Warmup Iteration  26: 16226638.483 ops/s
# Warmup Iteration  27: 16257156.803 ops/s
# Warmup Iteration  28: 16236580.074 ops/s
# Warmup Iteration  29: 16256602.759 ops/s
# Warmup Iteration  30: 16226116.124 ops/s
Iteration   1: 16276680.407 ops/s
Iteration   2: 16186287.201 ops/s
Iteration   3: 16216637.766 ops/s
Iteration   4: 16222882.517 ops/s
Iteration   5: 16239952.698 ops/s
Iteration   6: 16222701.312 ops/s
Iteration   7: 16249026.520 ops/s
Iteration   8: 16248329.442 ops/s
Iteration   9: 16220938.324 ops/s
Iteration  10: 16232563.008 ops/s
Iteration  11: 16251115.696 ops/s
Iteration  12: 16261493.049 ops/s
Iteration  13: 16250354.538 ops/s
Iteration  14: 16238716.512 ops/s
Iteration  15: 16150592.123 ops/s
Iteration  16: 16248420.573 ops/s
Iteration  17: 16241464.634 ops/s
Iteration  18: 16208769.914 ops/s
Iteration  19: 16225024.834 ops/s
Iteration  20: 16258013.480 ops/s
Iteration  21: 16159669.996 ops/s
Iteration  22: 16231330.130 ops/s
Iteration  23: 16276516.050 ops/s
Iteration  24: 16220714.478 ops/s
Iteration  25: 16229083.895 ops/s
Iteration  26: 16233036.447 ops/s
Iteration  27: 16267089.086 ops/s
Iteration  28: 16248696.321 ops/s
Iteration  29: 16233612.389 ops/s
Iteration  30: 16232198.934 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_collect":
  16232730.409 ±(99.9%) 19200.149 ops/s [Average]
  (min, avg, max) = (16150592.123, 16232730.409, 16276680.407), stdev = 28737.881
  CI (99.9%): [16213530.260, 16251930.558] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_collect  thrpt   30  16232730.409 ± 19200.149  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_collectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_collectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10460750.474 ops/s
# Warmup Iteration   2: 21952497.633 ops/s
# Warmup Iteration   3: 18640296.238 ops/s
# Warmup Iteration   4: 22255518.013 ops/s
# Warmup Iteration   5: 22234483.722 ops/s
# Warmup Iteration   6: 22183015.124 ops/s
# Warmup Iteration   7: 22155032.010 ops/s
# Warmup Iteration   8: 22216775.376 ops/s
# Warmup Iteration   9: 22202983.581 ops/s
# Warmup Iteration  10: 22189642.723 ops/s
# Warmup Iteration  11: 22243475.157 ops/s
# Warmup Iteration  12: 22180533.821 ops/s
# Warmup Iteration  13: 22280498.296 ops/s
# Warmup Iteration  14: 22206450.317 ops/s
# Warmup Iteration  15: 22170770.496 ops/s
# Warmup Iteration  16: 22189158.603 ops/s
# Warmup Iteration  17: 22197390.182 ops/s
# Warmup Iteration  18: 22202330.787 ops/s
# Warmup Iteration  19: 22233651.136 ops/s
# Warmup Iteration  20: 22251440.239 ops/s
# Warmup Iteration  21: 22157427.900 ops/s
# Warmup Iteration  22: 22192713.284 ops/s
# Warmup Iteration  23: 22173173.632 ops/s
# Warmup Iteration  24: 22189460.289 ops/s
# Warmup Iteration  25: 22047021.559 ops/s
# Warmup Iteration  26: 21875020.516 ops/s
# Warmup Iteration  27: 22173729.996 ops/s
# Warmup Iteration  28: 22132600.287 ops/s
# Warmup Iteration  29: 22122300.682 ops/s
# Warmup Iteration  30: 22149801.257 ops/s
Iteration   1: 22197903.850 ops/s
Iteration   2: 22172404.435 ops/s
Iteration   3: 22093442.674 ops/s
Iteration   4: 22154258.577 ops/s
Iteration   5: 22184100.460 ops/s
Iteration   6: 22201791.975 ops/s
Iteration   7: 22121653.775 ops/s
Iteration   8: 22200557.064 ops/s
Iteration   9: 22168958.839 ops/s
Iteration  10: 22169066.268 ops/s
Iteration  11: 22114570.832 ops/s
Iteration  12: 22245942.722 ops/s
Iteration  13: 22244991.332 ops/s
Iteration  14: 22125430.823 ops/s
Iteration  15: 22167720.094 ops/s
Iteration  16: 22161908.808 ops/s
Iteration  17: 22242067.853 ops/s
Iteration  18: 22194547.873 ops/s
Iteration  19: 22180242.615 ops/s
Iteration  20: 22211511.125 ops/s
Iteration  21: 22223939.122 ops/s
Iteration  22: 22189759.883 ops/s
Iteration  23: 22172100.919 ops/s
Iteration  24: 22236789.971 ops/s
Iteration  25: 22180585.401 ops/s
Iteration  26: 22207500.893 ops/s
Iteration  27: 22188822.434 ops/s
Iteration  28: 22236503.614 ops/s
Iteration  29: 22147397.590 ops/s
Iteration  30: 22119969.899 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_collectBoolean":
  22181881.391 ±(99.9%) 27283.169 ops/s [Average]
  (min, avg, max) = (22093442.674, 22181881.391, 22245942.722), stdev = 40836.167
  CI (99.9%): [22154598.221, 22209164.560] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score       Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_collectBoolean  thrpt   30  22181881.391 ± 27283.169  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_collectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_collectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4868147.640 ops/s
# Warmup Iteration   2: 11080625.863 ops/s
# Warmup Iteration   3: 10772347.251 ops/s
# Warmup Iteration   4: 8921642.752 ops/s
# Warmup Iteration   5: 10752247.454 ops/s
# Warmup Iteration   6: 10737471.802 ops/s
# Warmup Iteration   7: 10738432.030 ops/s
# Warmup Iteration   8: 10749711.270 ops/s
# Warmup Iteration   9: 10744474.984 ops/s
# Warmup Iteration  10: 10746303.700 ops/s
# Warmup Iteration  11: 10754840.648 ops/s
# Warmup Iteration  12: 10740339.657 ops/s
# Warmup Iteration  13: 10742333.761 ops/s
# Warmup Iteration  14: 10747703.288 ops/s
# Warmup Iteration  15: 10760967.670 ops/s
# Warmup Iteration  16: 10744857.344 ops/s
# Warmup Iteration  17: 10714052.989 ops/s
# Warmup Iteration  18: 10713941.034 ops/s
# Warmup Iteration  19: 10711080.717 ops/s
# Warmup Iteration  20: 10730330.633 ops/s
# Warmup Iteration  21: 10721009.428 ops/s
# Warmup Iteration  22: 10720622.846 ops/s
# Warmup Iteration  23: 10729947.333 ops/s
# Warmup Iteration  24: 10736105.504 ops/s
# Warmup Iteration  25: 10731664.894 ops/s
# Warmup Iteration  26: 10711626.333 ops/s
# Warmup Iteration  27: 10724105.025 ops/s
# Warmup Iteration  28: 10709235.278 ops/s
# Warmup Iteration  29: 10713336.786 ops/s
# Warmup Iteration  30: 10727736.741 ops/s
Iteration   1: 10725003.965 ops/s
Iteration   2: 10718626.536 ops/s
Iteration   3: 10710428.217 ops/s
Iteration   4: 10699919.855 ops/s
Iteration   5: 10708524.909 ops/s
Iteration   6: 10749678.953 ops/s
Iteration   7: 10715546.860 ops/s
Iteration   8: 10698141.814 ops/s
Iteration   9: 10701210.797 ops/s
Iteration  10: 10721308.344 ops/s
Iteration  11: 10725981.702 ops/s
Iteration  12: 10732728.437 ops/s
Iteration  13: 10687972.782 ops/s
Iteration  14: 10728634.304 ops/s
Iteration  15: 10723713.925 ops/s
Iteration  16: 10722597.411 ops/s
Iteration  17: 10721260.287 ops/s
Iteration  18: 10722268.281 ops/s
Iteration  19: 10733194.541 ops/s
Iteration  20: 10725557.039 ops/s
Iteration  21: 10734316.562 ops/s
Iteration  22: 10737358.675 ops/s
Iteration  23: 10718014.500 ops/s
Iteration  24: 10734921.873 ops/s
Iteration  25: 10738519.833 ops/s
Iteration  26: 10729675.205 ops/s
Iteration  27: 10719533.925 ops/s
Iteration  28: 10726753.216 ops/s
Iteration  29: 10716908.181 ops/s
Iteration  30: 10678189.842 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_collectByte":
  10720216.359 ±(99.9%) 10297.076 ops/s [Average]
  (min, avg, max) = (10678189.842, 10720216.359, 10749678.953), stdev = 15412.179
  CI (99.9%): [10709919.283, 10730513.435] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_collectByte  thrpt   30  10720216.359 ± 10297.076  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_collectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_collectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4761651.940 ops/s
# Warmup Iteration   2: 10943230.419 ops/s
# Warmup Iteration   3: 10942428.948 ops/s
# Warmup Iteration   4: 9099191.078 ops/s
# Warmup Iteration   5: 10838037.672 ops/s
# Warmup Iteration   6: 10810570.601 ops/s
# Warmup Iteration   7: 10934438.336 ops/s
# Warmup Iteration   8: 10936891.215 ops/s
# Warmup Iteration   9: 10935422.229 ops/s
# Warmup Iteration  10: 10905744.898 ops/s
# Warmup Iteration  11: 10935210.846 ops/s
# Warmup Iteration  12: 10942728.107 ops/s
# Warmup Iteration  13: 10780802.501 ops/s
# Warmup Iteration  14: 10922466.698 ops/s
# Warmup Iteration  15: 10943852.011 ops/s
# Warmup Iteration  16: 10941673.014 ops/s
# Warmup Iteration  17: 10927445.108 ops/s
# Warmup Iteration  18: 10937730.084 ops/s
# Warmup Iteration  19: 10936278.292 ops/s
# Warmup Iteration  20: 10916104.341 ops/s
# Warmup Iteration  21: 10934809.417 ops/s
# Warmup Iteration  22: 10948358.322 ops/s
# Warmup Iteration  23: 10941432.524 ops/s
# Warmup Iteration  24: 10923427.676 ops/s
# Warmup Iteration  25: 10922787.111 ops/s
# Warmup Iteration  26: 10929090.923 ops/s
# Warmup Iteration  27: 10926252.139 ops/s
# Warmup Iteration  28: 10939534.052 ops/s
# Warmup Iteration  29: 10951877.245 ops/s
# Warmup Iteration  30: 10869429.337 ops/s
Iteration   1: 10913020.675 ops/s
Iteration   2: 10944476.050 ops/s
Iteration   3: 10948040.495 ops/s
Iteration   4: 10951771.976 ops/s
Iteration   5: 10958935.672 ops/s
Iteration   6: 10939449.713 ops/s
Iteration   7: 10921804.171 ops/s
Iteration   8: 10952923.391 ops/s
Iteration   9: 10948140.933 ops/s
Iteration  10: 10941069.003 ops/s
Iteration  11: 10940991.503 ops/s
Iteration  12: 10963001.563 ops/s
Iteration  13: 10934131.522 ops/s
Iteration  14: 10961565.034 ops/s
Iteration  15: 10951432.966 ops/s
Iteration  16: 10958220.246 ops/s
Iteration  17: 10963892.159 ops/s
Iteration  18: 10960219.012 ops/s
Iteration  19: 10943689.808 ops/s
Iteration  20: 10914151.068 ops/s
Iteration  21: 10951662.832 ops/s
Iteration  22: 10926484.587 ops/s
Iteration  23: 10790861.473 ops/s
Iteration  24: 10810690.979 ops/s
Iteration  25: 10812236.725 ops/s
Iteration  26: 10841656.628 ops/s
Iteration  27: 10935193.688 ops/s
Iteration  28: 10949818.261 ops/s
Iteration  29: 10956530.036 ops/s
Iteration  30: 10958894.346 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_collectChar":
  10928165.217 ±(99.9%) 32078.477 ops/s [Average]
  (min, avg, max) = (10790861.473, 10928165.217, 10963892.159), stdev = 48013.558
  CI (99.9%): [10896086.740, 10960243.694] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_collectChar  thrpt   30  10928165.217 ± 32078.477  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_collectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_collectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4913705.288 ops/s
# Warmup Iteration   2: 11079575.142 ops/s
# Warmup Iteration   3: 10822750.617 ops/s
# Warmup Iteration   4: 8967466.014 ops/s
# Warmup Iteration   5: 10771568.346 ops/s
# Warmup Iteration   6: 10839617.596 ops/s
# Warmup Iteration   7: 10841439.297 ops/s
# Warmup Iteration   8: 10839821.453 ops/s
# Warmup Iteration   9: 10839643.047 ops/s
# Warmup Iteration  10: 10818854.016 ops/s
# Warmup Iteration  11: 10791007.980 ops/s
# Warmup Iteration  12: 10820242.418 ops/s
# Warmup Iteration  13: 10831127.131 ops/s
# Warmup Iteration  14: 10835706.428 ops/s
# Warmup Iteration  15: 10829142.164 ops/s
# Warmup Iteration  16: 10798440.950 ops/s
# Warmup Iteration  17: 10806962.222 ops/s
# Warmup Iteration  18: 10860143.477 ops/s
# Warmup Iteration  19: 10760858.952 ops/s
# Warmup Iteration  20: 10836661.834 ops/s
# Warmup Iteration  21: 10828057.033 ops/s
# Warmup Iteration  22: 10827782.787 ops/s
# Warmup Iteration  23: 10849339.113 ops/s
# Warmup Iteration  24: 10830750.587 ops/s
# Warmup Iteration  25: 10833727.682 ops/s
# Warmup Iteration  26: 10840283.603 ops/s
# Warmup Iteration  27: 10843435.264 ops/s
# Warmup Iteration  28: 10837265.550 ops/s
# Warmup Iteration  29: 10808498.181 ops/s
# Warmup Iteration  30: 10790713.786 ops/s
Iteration   1: 10856834.499 ops/s
Iteration   2: 10853083.678 ops/s
Iteration   3: 10839039.206 ops/s
Iteration   4: 10832655.897 ops/s
Iteration   5: 10850645.492 ops/s
Iteration   6: 10839406.558 ops/s
Iteration   7: 10833390.161 ops/s
Iteration   8: 10835480.452 ops/s
Iteration   9: 10863732.161 ops/s
Iteration  10: 10859698.698 ops/s
Iteration  11: 10836216.646 ops/s
Iteration  12: 10837108.295 ops/s
Iteration  13: 10824690.708 ops/s
Iteration  14: 10830533.447 ops/s
Iteration  15: 10847097.874 ops/s
Iteration  16: 10847794.785 ops/s
Iteration  17: 10846791.048 ops/s
Iteration  18: 10844530.653 ops/s
Iteration  19: 10843235.869 ops/s
Iteration  20: 10842649.840 ops/s
Iteration  21: 10855654.287 ops/s
Iteration  22: 10826835.182 ops/s
Iteration  23: 10848384.274 ops/s
Iteration  24: 10844057.382 ops/s
Iteration  25: 10815236.826 ops/s
Iteration  26: 10851000.310 ops/s
Iteration  27: 10845908.378 ops/s
Iteration  28: 10840992.321 ops/s
Iteration  29: 10843912.768 ops/s
Iteration  30: 10841619.874 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_collectDouble":
  10842607.252 ±(99.9%) 7094.197 ops/s [Average]
  (min, avg, max) = (10815236.826, 10842607.252, 10863732.161), stdev = 10618.261
  CI (99.9%): [10835513.055, 10849701.449] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score      Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_collectDouble  thrpt   30  10842607.252 ± 7094.197  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_collectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_collectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4746669.400 ops/s
# Warmup Iteration   2: 10896234.265 ops/s
# Warmup Iteration   3: 11018003.255 ops/s
# Warmup Iteration   4: 9167128.884 ops/s
# Warmup Iteration   5: 11018763.552 ops/s
# Warmup Iteration   6: 11006589.995 ops/s
# Warmup Iteration   7: 11007799.658 ops/s
# Warmup Iteration   8: 11007060.155 ops/s
# Warmup Iteration   9: 11048521.900 ops/s
# Warmup Iteration  10: 11008074.309 ops/s
# Warmup Iteration  11: 11005259.399 ops/s
# Warmup Iteration  12: 10999176.184 ops/s
# Warmup Iteration  13: 11001941.721 ops/s
# Warmup Iteration  14: 10979785.508 ops/s
# Warmup Iteration  15: 10844834.923 ops/s
# Warmup Iteration  16: 11014120.087 ops/s
# Warmup Iteration  17: 11012646.710 ops/s
# Warmup Iteration  18: 11002471.858 ops/s
# Warmup Iteration  19: 11018362.962 ops/s
# Warmup Iteration  20: 11023994.184 ops/s
# Warmup Iteration  21: 11013604.440 ops/s
# Warmup Iteration  22: 11016503.508 ops/s
# Warmup Iteration  23: 11025422.893 ops/s
# Warmup Iteration  24: 11012663.059 ops/s
# Warmup Iteration  25: 11008597.582 ops/s
# Warmup Iteration  26: 11020989.297 ops/s
# Warmup Iteration  27: 11029352.464 ops/s
# Warmup Iteration  28: 10998644.243 ops/s
# Warmup Iteration  29: 11000538.279 ops/s
# Warmup Iteration  30: 11005827.222 ops/s
Iteration   1: 11026756.038 ops/s
Iteration   2: 11003456.523 ops/s
Iteration   3: 11018940.633 ops/s
Iteration   4: 11011670.534 ops/s
Iteration   5: 10999008.566 ops/s
Iteration   6: 11001364.905 ops/s
Iteration   7: 10978451.995 ops/s
Iteration   8: 11038111.534 ops/s
Iteration   9: 11006405.510 ops/s
Iteration  10: 11008115.518 ops/s
Iteration  11: 10952715.636 ops/s
Iteration  12: 11021679.428 ops/s
Iteration  13: 11019209.249 ops/s
Iteration  14: 11006437.483 ops/s
Iteration  15: 11028255.378 ops/s
Iteration  16: 11007303.338 ops/s
Iteration  17: 11010701.989 ops/s
Iteration  18: 11012015.739 ops/s
Iteration  19: 11007599.470 ops/s
Iteration  20: 11005112.582 ops/s
Iteration  21: 11026233.902 ops/s
Iteration  22: 11005670.807 ops/s
Iteration  23: 11041187.934 ops/s
Iteration  24: 11011645.220 ops/s
Iteration  25: 11014399.555 ops/s
Iteration  26: 11007212.529 ops/s
Iteration  27: 11014429.479 ops/s
Iteration  28: 11005836.770 ops/s
Iteration  29: 11010431.332 ops/s
Iteration  30: 11044455.309 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_collectFloat":
  11011493.829 ±(99.9%) 11595.971 ops/s [Average]
  (min, avg, max) = (10952715.636, 11011493.829, 11044455.309), stdev = 17356.305
  CI (99.9%): [10999897.858, 11023089.801] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score       Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_collectFloat  thrpt   30  11011493.829 ± 11595.971  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_collectIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_collectIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7284939.131 ops/s
# Warmup Iteration   2: 15147422.692 ops/s
# Warmup Iteration   3: 15209070.654 ops/s
# Warmup Iteration   4: 14592042.171 ops/s
# Warmup Iteration   5: 13661851.415 ops/s
# Warmup Iteration   6: 15382564.718 ops/s
# Warmup Iteration   7: 15350752.730 ops/s
# Warmup Iteration   8: 15384696.603 ops/s
# Warmup Iteration   9: 15387054.717 ops/s
# Warmup Iteration  10: 15365378.574 ops/s
# Warmup Iteration  11: 15356283.393 ops/s
# Warmup Iteration  12: 15366422.709 ops/s
# Warmup Iteration  13: 15380620.457 ops/s
# Warmup Iteration  14: 15377605.597 ops/s
# Warmup Iteration  15: 15365881.039 ops/s
# Warmup Iteration  16: 15370200.853 ops/s
# Warmup Iteration  17: 15398838.959 ops/s
# Warmup Iteration  18: 15397254.016 ops/s
# Warmup Iteration  19: 15372932.491 ops/s
# Warmup Iteration  20: 15417861.815 ops/s
# Warmup Iteration  21: 15380073.285 ops/s
# Warmup Iteration  22: 15387914.265 ops/s
# Warmup Iteration  23: 15417274.350 ops/s
# Warmup Iteration  24: 15397010.465 ops/s
# Warmup Iteration  25: 15382461.272 ops/s
# Warmup Iteration  26: 15394267.044 ops/s
# Warmup Iteration  27: 15396418.286 ops/s
# Warmup Iteration  28: 15404823.545 ops/s
# Warmup Iteration  29: 15417615.001 ops/s
# Warmup Iteration  30: 15419165.831 ops/s
Iteration   1: 15397258.566 ops/s
Iteration   2: 15393258.070 ops/s
Iteration   3: 15374002.127 ops/s
Iteration   4: 15373686.066 ops/s
Iteration   5: 15428241.586 ops/s
Iteration   6: 15411581.628 ops/s
Iteration   7: 15417076.295 ops/s
Iteration   8: 15375085.009 ops/s
Iteration   9: 15420568.523 ops/s
Iteration  10: 15405430.329 ops/s
Iteration  11: 15405420.065 ops/s
Iteration  12: 15371290.920 ops/s
Iteration  13: 15420739.652 ops/s
Iteration  14: 15335103.463 ops/s
Iteration  15: 15364085.734 ops/s
Iteration  16: 15412356.090 ops/s
Iteration  17: 15399934.778 ops/s
Iteration  18: 15415409.274 ops/s
Iteration  19: 15399590.730 ops/s
Iteration  20: 15407038.498 ops/s
Iteration  21: 15391982.060 ops/s
Iteration  22: 15398661.829 ops/s
Iteration  23: 15428198.327 ops/s
Iteration  24: 15368053.714 ops/s
Iteration  25: 15379655.786 ops/s
Iteration  26: 15409117.946 ops/s
Iteration  27: 15437439.108 ops/s
Iteration  28: 15375231.473 ops/s
Iteration  29: 15393300.135 ops/s
Iteration  30: 15384681.370 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_collectIf":
  15396449.305 ±(99.9%) 15315.007 ops/s [Average]
  (min, avg, max) = (15335103.463, 15396449.305, 15437439.108), stdev = 22922.782
  CI (99.9%): [15381134.299, 15411764.312] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_collectIf  thrpt   30  15396449.305 ± 15315.007  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_collectIfWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_collectIfWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 19757797.637 ops/s
# Warmup Iteration   2: 36980123.140 ops/s
# Warmup Iteration   3: 32652969.236 ops/s
# Warmup Iteration   4: 38202330.164 ops/s
# Warmup Iteration   5: 38396690.060 ops/s
# Warmup Iteration   6: 38384648.283 ops/s
# Warmup Iteration   7: 38481395.793 ops/s
# Warmup Iteration   8: 38301358.856 ops/s
# Warmup Iteration   9: 38268239.997 ops/s
# Warmup Iteration  10: 38445240.112 ops/s
# Warmup Iteration  11: 38413313.535 ops/s
# Warmup Iteration  12: 38395949.933 ops/s
# Warmup Iteration  13: 38472410.593 ops/s
# Warmup Iteration  14: 38346837.327 ops/s
# Warmup Iteration  15: 38351565.377 ops/s
# Warmup Iteration  16: 38363515.821 ops/s
# Warmup Iteration  17: 38338282.554 ops/s
# Warmup Iteration  18: 38192247.509 ops/s
# Warmup Iteration  19: 38260346.503 ops/s
# Warmup Iteration  20: 38197276.800 ops/s
# Warmup Iteration  21: 38375153.407 ops/s
# Warmup Iteration  22: 38250408.728 ops/s
# Warmup Iteration  23: 38395822.068 ops/s
# Warmup Iteration  24: 37828419.585 ops/s
# Warmup Iteration  25: 38144701.546 ops/s
# Warmup Iteration  26: 38432512.491 ops/s
# Warmup Iteration  27: 38164967.063 ops/s
# Warmup Iteration  28: 38198790.006 ops/s
# Warmup Iteration  29: 38428435.534 ops/s
# Warmup Iteration  30: 38237820.506 ops/s
Iteration   1: 38333973.957 ops/s
Iteration   2: 38321418.571 ops/s
Iteration   3: 38207654.897 ops/s
Iteration   4: 38176605.365 ops/s
Iteration   5: 38335536.433 ops/s
Iteration   6: 38448021.228 ops/s
Iteration   7: 38496144.052 ops/s
Iteration   8: 38471057.896 ops/s
Iteration   9: 38471354.790 ops/s
Iteration  10: 38417620.391 ops/s
Iteration  11: 38356005.500 ops/s
Iteration  12: 38388816.055 ops/s
Iteration  13: 38197675.867 ops/s
Iteration  14: 38286206.709 ops/s
Iteration  15: 38591145.292 ops/s
Iteration  16: 38434434.556 ops/s
Iteration  17: 38404408.752 ops/s
Iteration  18: 38484650.412 ops/s
Iteration  19: 38381851.099 ops/s
Iteration  20: 38390515.146 ops/s
Iteration  21: 38483829.473 ops/s
Iteration  22: 38520203.022 ops/s
Iteration  23: 38249218.774 ops/s
Iteration  24: 38460629.200 ops/s
Iteration  25: 38313661.830 ops/s
Iteration  26: 38330332.572 ops/s
Iteration  27: 38486767.967 ops/s
Iteration  28: 38438737.121 ops/s
Iteration  29: 38393328.306 ops/s
Iteration  30: 38506555.866 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_collectIfWithTarget":
  38392612.037 ±(99.9%) 68388.018 ops/s [Average]
  (min, avg, max) = (38176605.365, 38392612.037, 38591145.292), stdev = 102359.974
  CI (99.9%): [38324224.018, 38461000.055] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt         Score       Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_collectIfWithTarget  thrpt   30  38392612.037 ± 68388.018  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_collectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_collectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4864744.445 ops/s
# Warmup Iteration   2: 10951781.169 ops/s
# Warmup Iteration   3: 11079332.412 ops/s
# Warmup Iteration   4: 9232790.988 ops/s
# Warmup Iteration   5: 11100335.524 ops/s
# Warmup Iteration   6: 11095039.641 ops/s
# Warmup Iteration   7: 11095827.330 ops/s
# Warmup Iteration   8: 11103856.995 ops/s
# Warmup Iteration   9: 11087837.442 ops/s
# Warmup Iteration  10: 11093089.305 ops/s
# Warmup Iteration  11: 11069975.182 ops/s
# Warmup Iteration  12: 11038602.222 ops/s
# Warmup Iteration  13: 11096915.184 ops/s
# Warmup Iteration  14: 11083077.027 ops/s
# Warmup Iteration  15: 11078589.168 ops/s
# Warmup Iteration  16: 11098660.632 ops/s
# Warmup Iteration  17: 11091268.838 ops/s
# Warmup Iteration  18: 11096906.403 ops/s
# Warmup Iteration  19: 11102827.052 ops/s
# Warmup Iteration  20: 11091599.386 ops/s
# Warmup Iteration  21: 11092637.301 ops/s
# Warmup Iteration  22: 11077735.586 ops/s
# Warmup Iteration  23: 11052284.604 ops/s
# Warmup Iteration  24: 11094025.778 ops/s
# Warmup Iteration  25: 11093911.149 ops/s
# Warmup Iteration  26: 11080809.872 ops/s
# Warmup Iteration  27: 11081831.415 ops/s
# Warmup Iteration  28: 11098312.920 ops/s
# Warmup Iteration  29: 11082990.773 ops/s
# Warmup Iteration  30: 11090908.174 ops/s
Iteration   1: 11095069.810 ops/s
Iteration   2: 11095472.419 ops/s
Iteration   3: 11099106.069 ops/s
Iteration   4: 11081612.137 ops/s
Iteration   5: 11080234.767 ops/s
Iteration   6: 11083994.605 ops/s
Iteration   7: 11076851.059 ops/s
Iteration   8: 11052452.310 ops/s
Iteration   9: 11094806.798 ops/s
Iteration  10: 11105226.659 ops/s
Iteration  11: 11121142.988 ops/s
Iteration  12: 11077478.464 ops/s
Iteration  13: 11085035.794 ops/s
Iteration  14: 11077561.620 ops/s
Iteration  15: 11084305.589 ops/s
Iteration  16: 11080896.919 ops/s
Iteration  17: 11102437.761 ops/s
Iteration  18: 11083253.162 ops/s
Iteration  19: 11105432.651 ops/s
Iteration  20: 11060618.202 ops/s
Iteration  21: 11085570.651 ops/s
Iteration  22: 11100646.244 ops/s
Iteration  23: 11090210.356 ops/s
Iteration  24: 11098677.897 ops/s
Iteration  25: 11111296.968 ops/s
Iteration  26: 11092570.877 ops/s
Iteration  27: 11113067.004 ops/s
Iteration  28: 11088825.905 ops/s
Iteration  29: 11087519.747 ops/s
Iteration  30: 11092756.586 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_collectInt":
  11090137.734 ±(99.9%) 9702.647 ops/s [Average]
  (min, avg, max) = (11052452.310, 11090137.734, 11121142.988), stdev = 14522.466
  CI (99.9%): [11080435.087, 11099840.381] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score      Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_collectInt  thrpt   30  11090137.734 ± 9702.647  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_collectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_collectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4876644.031 ops/s
# Warmup Iteration   2: 11218847.706 ops/s
# Warmup Iteration   3: 10924909.418 ops/s
# Warmup Iteration   4: 9058312.785 ops/s
# Warmup Iteration   5: 10924134.448 ops/s
# Warmup Iteration   6: 10931379.541 ops/s
# Warmup Iteration   7: 10926204.072 ops/s
# Warmup Iteration   8: 10914006.611 ops/s
# Warmup Iteration   9: 10910696.563 ops/s
# Warmup Iteration  10: 10924713.886 ops/s
# Warmup Iteration  11: 10926636.662 ops/s
# Warmup Iteration  12: 10893579.409 ops/s
# Warmup Iteration  13: 10890429.266 ops/s
# Warmup Iteration  14: 10920052.090 ops/s
# Warmup Iteration  15: 10928171.156 ops/s
# Warmup Iteration  16: 10909353.421 ops/s
# Warmup Iteration  17: 10930539.016 ops/s
# Warmup Iteration  18: 10938903.842 ops/s
# Warmup Iteration  19: 10941426.726 ops/s
# Warmup Iteration  20: 10909550.755 ops/s
# Warmup Iteration  21: 10926348.582 ops/s
# Warmup Iteration  22: 10924346.144 ops/s
# Warmup Iteration  23: 10835773.007 ops/s
# Warmup Iteration  24: 10931196.643 ops/s
# Warmup Iteration  25: 10838123.087 ops/s
# Warmup Iteration  26: 10939599.245 ops/s
# Warmup Iteration  27: 10892699.434 ops/s
# Warmup Iteration  28: 10929349.166 ops/s
# Warmup Iteration  29: 10921704.904 ops/s
# Warmup Iteration  30: 10932418.122 ops/s
Iteration   1: 10932958.862 ops/s
Iteration   2: 10936371.131 ops/s
Iteration   3: 10936042.642 ops/s
Iteration   4: 10929490.729 ops/s
Iteration   5: 10959029.167 ops/s
Iteration   6: 10936701.478 ops/s
Iteration   7: 10941730.070 ops/s
Iteration   8: 10933019.092 ops/s
Iteration   9: 10934836.697 ops/s
Iteration  10: 10915708.731 ops/s
Iteration  11: 10931654.829 ops/s
Iteration  12: 10956606.121 ops/s
Iteration  13: 10935799.564 ops/s
Iteration  14: 10961669.612 ops/s
Iteration  15: 10933370.713 ops/s
Iteration  16: 10939181.900 ops/s
Iteration  17: 10949432.751 ops/s
Iteration  18: 10940681.834 ops/s
Iteration  19: 10927330.479 ops/s
Iteration  20: 10938888.282 ops/s
Iteration  21: 10917191.937 ops/s
Iteration  22: 10938003.516 ops/s
Iteration  23: 10958288.135 ops/s
Iteration  24: 10932961.914 ops/s
Iteration  25: 10924476.585 ops/s
Iteration  26: 10930866.411 ops/s
Iteration  27: 10948586.896 ops/s
Iteration  28: 10943977.541 ops/s
Iteration  29: 10930689.057 ops/s
Iteration  30: 10924314.516 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_collectLong":
  10937328.706 ±(99.9%) 7647.422 ops/s [Average]
  (min, avg, max) = (10915708.731, 10937328.706, 10961669.612), stdev = 11446.302
  CI (99.9%): [10929681.284, 10944976.129] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score      Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_collectLong  thrpt   30  10937328.706 ± 7647.422  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_collectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_collectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4737699.781 ops/s
# Warmup Iteration   2: 10823640.666 ops/s
# Warmup Iteration   3: 11004399.480 ops/s
# Warmup Iteration   4: 9201642.922 ops/s
# Warmup Iteration   5: 11042455.924 ops/s
# Warmup Iteration   6: 11033437.895 ops/s
# Warmup Iteration   7: 11019220.477 ops/s
# Warmup Iteration   8: 10993197.565 ops/s
# Warmup Iteration   9: 11032480.479 ops/s
# Warmup Iteration  10: 11009169.054 ops/s
# Warmup Iteration  11: 11028980.600 ops/s
# Warmup Iteration  12: 11022417.675 ops/s
# Warmup Iteration  13: 11031930.447 ops/s
# Warmup Iteration  14: 11026891.368 ops/s
# Warmup Iteration  15: 11026534.594 ops/s
# Warmup Iteration  16: 11029114.051 ops/s
# Warmup Iteration  17: 11031620.547 ops/s
# Warmup Iteration  18: 11024635.625 ops/s
# Warmup Iteration  19: 11034798.158 ops/s
# Warmup Iteration  20: 11037225.103 ops/s
# Warmup Iteration  21: 11050027.825 ops/s
# Warmup Iteration  22: 11022031.547 ops/s
# Warmup Iteration  23: 11021449.677 ops/s
# Warmup Iteration  24: 11051932.472 ops/s
# Warmup Iteration  25: 11036012.102 ops/s
# Warmup Iteration  26: 11024852.803 ops/s
# Warmup Iteration  27: 11039447.941 ops/s
# Warmup Iteration  28: 11031758.962 ops/s
# Warmup Iteration  29: 11031777.739 ops/s
# Warmup Iteration  30: 11035119.552 ops/s
Iteration   1: 11018327.504 ops/s
Iteration   2: 11008084.716 ops/s
Iteration   3: 11027996.926 ops/s
Iteration   4: 11018153.248 ops/s
Iteration   5: 11004187.887 ops/s
Iteration   6: 11036773.922 ops/s
Iteration   7: 11043392.458 ops/s
Iteration   8: 11032261.349 ops/s
Iteration   9: 11027584.301 ops/s
Iteration  10: 11026584.611 ops/s
Iteration  11: 11025711.552 ops/s
Iteration  12: 11028185.598 ops/s
Iteration  13: 11080028.433 ops/s
Iteration  14: 11036635.880 ops/s
Iteration  15: 11044670.132 ops/s
Iteration  16: 11055712.464 ops/s
Iteration  17: 11033697.141 ops/s
Iteration  18: 11035161.260 ops/s
Iteration  19: 11035655.970 ops/s
Iteration  20: 11043929.974 ops/s
Iteration  21: 11036881.172 ops/s
Iteration  22: 11032977.365 ops/s
Iteration  23: 10996961.529 ops/s
Iteration  24: 11029657.931 ops/s
Iteration  25: 11040998.636 ops/s
Iteration  26: 11030449.462 ops/s
Iteration  27: 11011697.542 ops/s
Iteration  28: 11035119.552 ops/s
Iteration  29: 11024625.113 ops/s
Iteration  30: 11035033.407 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_collectShort":
  11031237.901 ±(99.9%) 10398.389 ops/s [Average]
  (min, avg, max) = (10996961.529, 11031237.901, 11080028.433), stdev = 15563.820
  CI (99.9%): [11020839.513, 11041636.290] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score       Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_collectShort  thrpt   30  11031237.901 ± 10398.389  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_collectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_collectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2630970.535 ops/s
# Warmup Iteration   2: 5807995.954 ops/s
# Warmup Iteration   3: 5957970.428 ops/s
# Warmup Iteration   4: 5017387.293 ops/s
# Warmup Iteration   5: 5990553.540 ops/s
# Warmup Iteration   6: 5975469.621 ops/s
# Warmup Iteration   7: 5996220.240 ops/s
# Warmup Iteration   8: 5975161.615 ops/s
# Warmup Iteration   9: 5981894.293 ops/s
# Warmup Iteration  10: 5975522.999 ops/s
# Warmup Iteration  11: 5985264.760 ops/s
# Warmup Iteration  12: 5984423.611 ops/s
# Warmup Iteration  13: 5982404.983 ops/s
# Warmup Iteration  14: 5960386.666 ops/s
# Warmup Iteration  15: 5989268.160 ops/s
# Warmup Iteration  16: 5974690.686 ops/s
# Warmup Iteration  17: 5986076.737 ops/s
# Warmup Iteration  18: 5993609.474 ops/s
# Warmup Iteration  19: 5978558.540 ops/s
# Warmup Iteration  20: 5991264.715 ops/s
# Warmup Iteration  21: 5977162.042 ops/s
# Warmup Iteration  22: 5943504.919 ops/s
# Warmup Iteration  23: 5945287.566 ops/s
# Warmup Iteration  24: 5964092.823 ops/s
# Warmup Iteration  25: 5994354.578 ops/s
# Warmup Iteration  26: 5982583.969 ops/s
# Warmup Iteration  27: 5973148.538 ops/s
# Warmup Iteration  28: 5980154.532 ops/s
# Warmup Iteration  29: 5985363.244 ops/s
# Warmup Iteration  30: 5984418.664 ops/s
Iteration   1: 5984141.892 ops/s
Iteration   2: 5976971.035 ops/s
Iteration   3: 5968552.344 ops/s
Iteration   4: 5994094.201 ops/s
Iteration   5: 5984019.157 ops/s
Iteration   6: 5973082.748 ops/s
Iteration   7: 5971684.862 ops/s
Iteration   8: 5993906.252 ops/s
Iteration   9: 5981408.284 ops/s
Iteration  10: 5982371.648 ops/s
Iteration  11: 5973458.153 ops/s
Iteration  12: 5979464.383 ops/s
Iteration  13: 5970543.538 ops/s
Iteration  14: 5995921.523 ops/s
Iteration  15: 5983267.699 ops/s
Iteration  16: 5975871.821 ops/s
Iteration  17: 5982452.512 ops/s
Iteration  18: 6000939.573 ops/s
Iteration  19: 5999788.398 ops/s
Iteration  20: 5984295.408 ops/s
Iteration  21: 5978290.147 ops/s
Iteration  22: 5991589.802 ops/s
Iteration  23: 5971576.947 ops/s
Iteration  24: 5987322.985 ops/s
Iteration  25: 5976693.192 ops/s
Iteration  26: 5969094.105 ops/s
Iteration  27: 5983199.732 ops/s
Iteration  28: 5970734.205 ops/s
Iteration  29: 5982290.101 ops/s
Iteration  30: 6000323.824 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_collectWith":
  5982245.016 ±(99.9%) 6462.466 ops/s [Average]
  (min, avg, max) = (5968552.344, 5982245.016, 6000939.573), stdev = 9672.716
  CI (99.9%): [5975782.549, 5988707.482] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_collectWith  thrpt   30  5982245.016 ± 6462.466  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_collectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_collectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4596551.133 ops/s
# Warmup Iteration   2: 10451361.929 ops/s
# Warmup Iteration   3: 8927920.146 ops/s
# Warmup Iteration   4: 10505531.181 ops/s
# Warmup Iteration   5: 10525824.455 ops/s
# Warmup Iteration   6: 10528728.416 ops/s
# Warmup Iteration   7: 10528099.914 ops/s
# Warmup Iteration   8: 10495665.087 ops/s
# Warmup Iteration   9: 10504132.403 ops/s
# Warmup Iteration  10: 10486594.353 ops/s
# Warmup Iteration  11: 10517566.740 ops/s
# Warmup Iteration  12: 10519872.532 ops/s
# Warmup Iteration  13: 10506922.649 ops/s
# Warmup Iteration  14: 10508885.963 ops/s
# Warmup Iteration  15: 10511831.503 ops/s
# Warmup Iteration  16: 10514957.431 ops/s
# Warmup Iteration  17: 10517806.201 ops/s
# Warmup Iteration  18: 10495446.899 ops/s
# Warmup Iteration  19: 10526956.294 ops/s
# Warmup Iteration  20: 10518819.185 ops/s
# Warmup Iteration  21: 10514713.278 ops/s
# Warmup Iteration  22: 10519924.050 ops/s
# Warmup Iteration  23: 10525563.894 ops/s
# Warmup Iteration  24: 10521262.740 ops/s
# Warmup Iteration  25: 10495980.379 ops/s
# Warmup Iteration  26: 10513051.836 ops/s
# Warmup Iteration  27: 10531505.102 ops/s
# Warmup Iteration  28: 10516320.012 ops/s
# Warmup Iteration  29: 10527747.672 ops/s
# Warmup Iteration  30: 10518058.422 ops/s
Iteration   1: 10531754.714 ops/s
Iteration   2: 10524105.370 ops/s
Iteration   3: 10498543.300 ops/s
Iteration   4: 10512117.344 ops/s
Iteration   5: 10526761.821 ops/s
Iteration   6: 10508597.887 ops/s
Iteration   7: 10517406.803 ops/s
Iteration   8: 10492202.455 ops/s
Iteration   9: 10482429.842 ops/s
Iteration  10: 10518195.136 ops/s
Iteration  11: 10531221.074 ops/s
Iteration  12: 10514238.308 ops/s
Iteration  13: 10558256.399 ops/s
Iteration  14: 10523297.729 ops/s
Iteration  15: 10525273.113 ops/s
Iteration  16: 10493530.434 ops/s
Iteration  17: 10523076.197 ops/s
Iteration  18: 10513217.632 ops/s
Iteration  19: 10529914.172 ops/s
Iteration  20: 10536468.697 ops/s
Iteration  21: 10535270.385 ops/s
Iteration  22: 10503659.699 ops/s
Iteration  23: 10548984.463 ops/s
Iteration  24: 10525300.914 ops/s
Iteration  25: 10543273.709 ops/s
Iteration  26: 10510855.737 ops/s
Iteration  27: 10517968.053 ops/s
Iteration  28: 10524598.422 ops/s
Iteration  29: 10522176.371 ops/s
Iteration  30: 10515970.640 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_collectWithIndex":
  10520288.894 ±(99.9%) 11007.517 ops/s [Average]
  (min, avg, max) = (10482429.842, 10520288.894, 10558256.399), stdev = 16475.534
  CI (99.9%): [10509281.377, 10531296.411] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_collectWithIndex  thrpt   30  10520288.894 ± 11007.517  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_collectWithIndexWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_collectWithIndexWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 820148.669 ops/s
# Warmup Iteration   2: 2505466.288 ops/s
# Warmup Iteration   3: 2543358.109 ops/s
# Warmup Iteration   4: 2141325.911 ops/s
# Warmup Iteration   5: 2558412.869 ops/s
# Warmup Iteration   6: 2554119.622 ops/s
# Warmup Iteration   7: 2557057.493 ops/s
# Warmup Iteration   8: 2560989.749 ops/s
# Warmup Iteration   9: 2560031.716 ops/s
# Warmup Iteration  10: 2559533.615 ops/s
# Warmup Iteration  11: 2559616.667 ops/s
# Warmup Iteration  12: 2557266.807 ops/s
# Warmup Iteration  13: 2552589.079 ops/s
# Warmup Iteration  14: 2555110.709 ops/s
# Warmup Iteration  15: 2556924.038 ops/s
# Warmup Iteration  16: 2559511.881 ops/s
# Warmup Iteration  17: 2551754.502 ops/s
# Warmup Iteration  18: 2558686.377 ops/s
# Warmup Iteration  19: 2557056.149 ops/s
# Warmup Iteration  20: 2557616.123 ops/s
# Warmup Iteration  21: 2557092.120 ops/s
# Warmup Iteration  22: 2557275.999 ops/s
# Warmup Iteration  23: 2559495.791 ops/s
# Warmup Iteration  24: 2554460.406 ops/s
# Warmup Iteration  25: 2549164.303 ops/s
# Warmup Iteration  26: 2556465.379 ops/s
# Warmup Iteration  27: 2558547.161 ops/s
# Warmup Iteration  28: 2561139.517 ops/s
# Warmup Iteration  29: 2548202.077 ops/s
# Warmup Iteration  30: 2553005.336 ops/s
Iteration   1: 2552250.827 ops/s
Iteration   2: 2557236.148 ops/s
Iteration   3: 2560499.183 ops/s
Iteration   4: 2560000.899 ops/s
Iteration   5: 2551018.612 ops/s
Iteration   6: 2561897.473 ops/s
Iteration   7: 2556799.182 ops/s
Iteration   8: 2560422.793 ops/s
Iteration   9: 2555219.440 ops/s
Iteration  10: 2559321.319 ops/s
Iteration  11: 2555195.144 ops/s
Iteration  12: 2540117.343 ops/s
Iteration  13: 2555000.852 ops/s
Iteration  14: 2550406.743 ops/s
Iteration  15: 2555959.765 ops/s
Iteration  16: 2556454.674 ops/s
Iteration  17: 2561439.687 ops/s
Iteration  18: 2557417.757 ops/s
Iteration  19: 2561532.787 ops/s
Iteration  20: 2556217.281 ops/s
Iteration  21: 2559192.519 ops/s
Iteration  22: 2559420.791 ops/s
Iteration  23: 2556450.393 ops/s
Iteration  24: 2558774.021 ops/s
Iteration  25: 2555591.062 ops/s
Iteration  26: 2553952.477 ops/s
Iteration  27: 2555336.369 ops/s
Iteration  28: 2547582.231 ops/s
Iteration  29: 2562845.997 ops/s
Iteration  30: 2554194.273 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_collectWithIndexWithTarget":
  2556258.268 ±(99.9%) 3149.660 ops/s [Average]
  (min, avg, max) = (2540117.343, 2556258.268, 2562845.997), stdev = 4714.263
  CI (99.9%): [2553108.608, 2559407.928] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score      Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_collectWithIndexWithTarget  thrpt   30  2556258.268 ± 3149.660  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_collectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_collectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3391752.112 ops/s
# Warmup Iteration   2: 7687417.720 ops/s
# Warmup Iteration   3: 6622475.562 ops/s
# Warmup Iteration   4: 7937024.069 ops/s
# Warmup Iteration   5: 7918010.587 ops/s
# Warmup Iteration   6: 7914945.909 ops/s
# Warmup Iteration   7: 7876776.236 ops/s
# Warmup Iteration   8: 7919073.699 ops/s
# Warmup Iteration   9: 7930956.320 ops/s
# Warmup Iteration  10: 7936589.629 ops/s
# Warmup Iteration  11: 7920746.736 ops/s
# Warmup Iteration  12: 7936102.939 ops/s
# Warmup Iteration  13: 7941760.717 ops/s
# Warmup Iteration  14: 7924897.857 ops/s
# Warmup Iteration  15: 7937240.008 ops/s
# Warmup Iteration  16: 7947312.644 ops/s
# Warmup Iteration  17: 7937488.562 ops/s
# Warmup Iteration  18: 7931128.333 ops/s
# Warmup Iteration  19: 7944239.569 ops/s
# Warmup Iteration  20: 7956095.824 ops/s
# Warmup Iteration  21: 7942168.208 ops/s
# Warmup Iteration  22: 7909230.816 ops/s
# Warmup Iteration  23: 7927474.475 ops/s
# Warmup Iteration  24: 7915351.915 ops/s
# Warmup Iteration  25: 7910835.433 ops/s
# Warmup Iteration  26: 7912408.121 ops/s
# Warmup Iteration  27: 7937298.340 ops/s
# Warmup Iteration  28: 7934472.989 ops/s
# Warmup Iteration  29: 7925855.685 ops/s
# Warmup Iteration  30: 7923579.991 ops/s
Iteration   1: 7929602.008 ops/s
Iteration   2: 7950049.575 ops/s
Iteration   3: 7922119.755 ops/s
Iteration   4: 7948843.667 ops/s
Iteration   5: 7937946.626 ops/s
Iteration   6: 7921527.983 ops/s
Iteration   7: 7909406.971 ops/s
Iteration   8: 7917135.024 ops/s
Iteration   9: 7872922.052 ops/s
Iteration  10: 7850446.101 ops/s
Iteration  11: 7907062.050 ops/s
Iteration  12: 7903414.103 ops/s
Iteration  13: 7909794.200 ops/s
Iteration  14: 7910368.002 ops/s
Iteration  15: 7921700.002 ops/s
Iteration  16: 7918353.122 ops/s
Iteration  17: 7944680.756 ops/s
Iteration  18: 7939800.013 ops/s
Iteration  19: 7939483.604 ops/s
Iteration  20: 7926967.945 ops/s
Iteration  21: 7926087.488 ops/s
Iteration  22: 7934532.949 ops/s
Iteration  23: 7919573.336 ops/s
Iteration  24: 7937540.025 ops/s
Iteration  25: 7922575.954 ops/s
Iteration  26: 7945745.295 ops/s
Iteration  27: 7924369.135 ops/s
Iteration  28: 7931937.744 ops/s
Iteration  29: 7939256.192 ops/s
Iteration  30: 7904884.476 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_collectWith_target":
  7922270.872 ±(99.9%) 14273.799 ops/s [Average]
  (min, avg, max) = (7850446.101, 7922270.872, 7950049.575), stdev = 21364.352
  CI (99.9%): [7907997.073, 7936544.671] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_collectWith_target  thrpt   30  7922270.872 ± 14273.799  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_collect_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_collect_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8524951.092 ops/s
# Warmup Iteration   2: 14985631.140 ops/s
# Warmup Iteration   3: 16835686.967 ops/s
# Warmup Iteration   4: 17393950.795 ops/s
# Warmup Iteration   5: 17402952.815 ops/s
# Warmup Iteration   6: 17457015.737 ops/s
# Warmup Iteration   7: 17279786.839 ops/s
# Warmup Iteration   8: 17390135.528 ops/s
# Warmup Iteration   9: 17314487.155 ops/s
# Warmup Iteration  10: 17437487.313 ops/s
# Warmup Iteration  11: 17319802.294 ops/s
# Warmup Iteration  12: 17325740.928 ops/s
# Warmup Iteration  13: 17347038.892 ops/s
# Warmup Iteration  14: 17314778.091 ops/s
# Warmup Iteration  15: 17394292.039 ops/s
# Warmup Iteration  16: 17440283.513 ops/s
# Warmup Iteration  17: 17364854.081 ops/s
# Warmup Iteration  18: 17331369.192 ops/s
# Warmup Iteration  19: 17274175.769 ops/s
# Warmup Iteration  20: 17292907.657 ops/s
# Warmup Iteration  21: 17222362.036 ops/s
# Warmup Iteration  22: 17254812.254 ops/s
# Warmup Iteration  23: 17249328.639 ops/s
# Warmup Iteration  24: 17324815.695 ops/s
# Warmup Iteration  25: 17270946.925 ops/s
# Warmup Iteration  26: 17342906.016 ops/s
# Warmup Iteration  27: 17340430.321 ops/s
# Warmup Iteration  28: 17352464.570 ops/s
# Warmup Iteration  29: 17308421.344 ops/s
# Warmup Iteration  30: 17391833.345 ops/s
Iteration   1: 17365077.767 ops/s
Iteration   2: 17233272.956 ops/s
Iteration   3: 17277599.758 ops/s
Iteration   4: 17362815.853 ops/s
Iteration   5: 17376549.151 ops/s
Iteration   6: 17355166.238 ops/s
Iteration   7: 17439651.336 ops/s
Iteration   8: 17343766.700 ops/s
Iteration   9: 17262580.438 ops/s
Iteration  10: 17368098.099 ops/s
Iteration  11: 17429679.944 ops/s
Iteration  12: 17431952.541 ops/s
Iteration  13: 17285473.638 ops/s
Iteration  14: 17270647.578 ops/s
Iteration  15: 17286577.466 ops/s
Iteration  16: 17414299.866 ops/s
Iteration  17: 17443073.143 ops/s
Iteration  18: 17428788.717 ops/s
Iteration  19: 17315737.298 ops/s
Iteration  20: 17322917.514 ops/s
Iteration  21: 17343959.273 ops/s
Iteration  22: 17345200.442 ops/s
Iteration  23: 17440550.650 ops/s
Iteration  24: 17289338.014 ops/s
Iteration  25: 17328008.533 ops/s
Iteration  26: 17189051.598 ops/s
Iteration  27: 17348873.836 ops/s
Iteration  28: 17347771.059 ops/s
Iteration  29: 17219817.322 ops/s
Iteration  30: 17252946.056 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_collect_target":
  17337308.093 ±(99.9%) 47138.949 ops/s [Average]
  (min, avg, max) = (17189051.598, 17337308.093, 17443073.143), stdev = 70555.366
  CI (99.9%): [17290169.143, 17384447.042] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score       Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_collect_target  thrpt   30  17337308.093 ± 47138.949  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 144818236.034 ops/s
# Warmup Iteration   2: 282172483.178 ops/s
# Warmup Iteration   3: 214268245.998 ops/s
# Warmup Iteration   4: 251683502.631 ops/s
# Warmup Iteration   5: 252030059.020 ops/s
# Warmup Iteration   6: 251279216.960 ops/s
# Warmup Iteration   7: 251307303.886 ops/s
# Warmup Iteration   8: 250944068.669 ops/s
# Warmup Iteration   9: 251644967.911 ops/s
# Warmup Iteration  10: 252568972.624 ops/s
# Warmup Iteration  11: 252176609.765 ops/s
# Warmup Iteration  12: 252137711.037 ops/s
# Warmup Iteration  13: 252160260.894 ops/s
# Warmup Iteration  14: 251720240.231 ops/s
# Warmup Iteration  15: 252512520.525 ops/s
# Warmup Iteration  16: 251920879.654 ops/s
# Warmup Iteration  17: 252290441.850 ops/s
# Warmup Iteration  18: 251702017.284 ops/s
# Warmup Iteration  19: 251559065.932 ops/s
# Warmup Iteration  20: 252184251.424 ops/s
# Warmup Iteration  21: 252026760.675 ops/s
# Warmup Iteration  22: 252110279.053 ops/s
# Warmup Iteration  23: 252234856.176 ops/s
# Warmup Iteration  24: 252130746.625 ops/s
# Warmup Iteration  25: 252727413.870 ops/s
# Warmup Iteration  26: 252201891.065 ops/s
# Warmup Iteration  27: 251978906.982 ops/s
# Warmup Iteration  28: 252122228.512 ops/s
# Warmup Iteration  29: 252608120.620 ops/s
# Warmup Iteration  30: 252414660.960 ops/s
Iteration   1: 251278918.126 ops/s
Iteration   2: 252378482.848 ops/s
Iteration   3: 252499918.510 ops/s
Iteration   4: 251763931.659 ops/s
Iteration   5: 252244719.253 ops/s
Iteration   6: 252164035.326 ops/s
Iteration   7: 251978976.128 ops/s
Iteration   8: 252060457.644 ops/s
Iteration   9: 253014162.682 ops/s
Iteration  10: 252277779.851 ops/s
Iteration  11: 252716330.536 ops/s
Iteration  12: 252454396.663 ops/s
Iteration  13: 252025433.098 ops/s
Iteration  14: 252876314.987 ops/s
Iteration  15: 251964480.739 ops/s
Iteration  16: 251537345.665 ops/s
Iteration  17: 251801985.571 ops/s
Iteration  18: 252656213.680 ops/s
Iteration  19: 252708408.954 ops/s
Iteration  20: 251409983.103 ops/s
Iteration  21: 252054256.825 ops/s
Iteration  22: 251791770.524 ops/s
Iteration  23: 252226929.070 ops/s
Iteration  24: 252453375.025 ops/s
Iteration  25: 252361319.240 ops/s
Iteration  26: 252214507.367 ops/s
Iteration  27: 252199401.557 ops/s
Iteration  28: 252449916.160 ops/s
Iteration  29: 252909987.330 ops/s
Iteration  30: 252586771.203 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_contains":
  252235350.311 ±(99.9%) 288875.398 ops/s [Average]
  (min, avg, max) = (251278918.126, 252235350.311, 253014162.682), stdev = 432375.130
  CI (99.9%): [251946474.912, 252524225.709] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt          Score        Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_contains  thrpt   30  252235350.311 ± 288875.398  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_containsAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_containsAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 23917890.024 ops/s
# Warmup Iteration   2: 43045284.908 ops/s
# Warmup Iteration   3: 39287908.081 ops/s
# Warmup Iteration   4: 44723544.711 ops/s
# Warmup Iteration   5: 44911282.165 ops/s
# Warmup Iteration   6: 45170333.806 ops/s
# Warmup Iteration   7: 44916329.164 ops/s
# Warmup Iteration   8: 44852061.805 ops/s
# Warmup Iteration   9: 44692116.581 ops/s
# Warmup Iteration  10: 44841371.993 ops/s
# Warmup Iteration  11: 44861199.634 ops/s
# Warmup Iteration  12: 44821143.068 ops/s
# Warmup Iteration  13: 44742166.481 ops/s
# Warmup Iteration  14: 44658955.184 ops/s
# Warmup Iteration  15: 44619707.421 ops/s
# Warmup Iteration  16: 44702057.333 ops/s
# Warmup Iteration  17: 44674980.312 ops/s
# Warmup Iteration  18: 44666358.932 ops/s
# Warmup Iteration  19: 44608540.047 ops/s
# Warmup Iteration  20: 44648362.606 ops/s
# Warmup Iteration  21: 44589275.124 ops/s
# Warmup Iteration  22: 44801674.180 ops/s
# Warmup Iteration  23: 44833226.227 ops/s
# Warmup Iteration  24: 44712900.197 ops/s
# Warmup Iteration  25: 44995869.733 ops/s
# Warmup Iteration  26: 44917815.378 ops/s
# Warmup Iteration  27: 44956041.906 ops/s
# Warmup Iteration  28: 44860648.762 ops/s
# Warmup Iteration  29: 45141374.057 ops/s
# Warmup Iteration  30: 44966729.386 ops/s
Iteration   1: 44918095.727 ops/s
Iteration   2: 44877758.564 ops/s
Iteration   3: 44802738.169 ops/s
Iteration   4: 44649954.582 ops/s
Iteration   5: 44996586.030 ops/s
Iteration   6: 44766385.421 ops/s
Iteration   7: 44940448.889 ops/s
Iteration   8: 44814308.217 ops/s
Iteration   9: 44874217.937 ops/s
Iteration  10: 44847089.635 ops/s
Iteration  11: 44855499.871 ops/s
Iteration  12: 44683670.193 ops/s
Iteration  13: 44717201.378 ops/s
Iteration  14: 44517672.014 ops/s
Iteration  15: 44799461.188 ops/s
Iteration  16: 44818941.593 ops/s
Iteration  17: 44660665.450 ops/s
Iteration  18: 44814407.932 ops/s
Iteration  19: 44719453.678 ops/s
Iteration  20: 44954596.552 ops/s
Iteration  21: 45211715.416 ops/s
Iteration  22: 44980717.479 ops/s
Iteration  23: 45100488.984 ops/s
Iteration  24: 45085749.126 ops/s
Iteration  25: 44706268.355 ops/s
Iteration  26: 44711205.211 ops/s
Iteration  27: 44578379.680 ops/s
Iteration  28: 44993488.756 ops/s
Iteration  29: 44733967.840 ops/s
Iteration  30: 44799160.931 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_containsAll":
  44831009.827 ±(99.9%) 105005.370 ops/s [Average]
  (min, avg, max) = (44517672.014, 44831009.827, 45211715.416), stdev = 157167.106
  CI (99.9%): [44726004.457, 44936015.197] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score        Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_containsAll  thrpt   30  44831009.827 ± 105005.370  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 46502681.036 ops/s
# Warmup Iteration   2: 87055925.577 ops/s
# Warmup Iteration   3: 79496391.833 ops/s
# Warmup Iteration   4: 92409290.677 ops/s
# Warmup Iteration   5: 92593573.602 ops/s
# Warmup Iteration   6: 92666427.382 ops/s
# Warmup Iteration   7: 92372475.501 ops/s
# Warmup Iteration   8: 92788177.949 ops/s
# Warmup Iteration   9: 92600565.143 ops/s
# Warmup Iteration  10: 92991238.232 ops/s
# Warmup Iteration  11: 92637268.782 ops/s
# Warmup Iteration  12: 92926396.232 ops/s
# Warmup Iteration  13: 92987482.005 ops/s
# Warmup Iteration  14: 92595008.872 ops/s
# Warmup Iteration  15: 92591362.691 ops/s
# Warmup Iteration  16: 92879495.378 ops/s
# Warmup Iteration  17: 91846980.736 ops/s
# Warmup Iteration  18: 91713331.540 ops/s
# Warmup Iteration  19: 92002075.960 ops/s
# Warmup Iteration  20: 91078291.087 ops/s
# Warmup Iteration  21: 91796986.115 ops/s
# Warmup Iteration  22: 91570197.962 ops/s
# Warmup Iteration  23: 91514862.184 ops/s
# Warmup Iteration  24: 91566086.385 ops/s
# Warmup Iteration  25: 91594724.745 ops/s
# Warmup Iteration  26: 91670032.168 ops/s
# Warmup Iteration  27: 91487937.586 ops/s
# Warmup Iteration  28: 91474680.980 ops/s
# Warmup Iteration  29: 91892926.540 ops/s
# Warmup Iteration  30: 91522175.715 ops/s
Iteration   1: 91940087.296 ops/s
Iteration   2: 91853077.235 ops/s
Iteration   3: 91552069.241 ops/s
Iteration   4: 91516855.203 ops/s
Iteration   5: 91290326.522 ops/s
Iteration   6: 91008272.399 ops/s
Iteration   7: 91730912.795 ops/s
Iteration   8: 91527589.282 ops/s
Iteration   9: 90929825.570 ops/s
Iteration  10: 91125017.309 ops/s
Iteration  11: 91599903.945 ops/s
Iteration  12: 91625559.670 ops/s
Iteration  13: 91858939.354 ops/s
Iteration  14: 91511003.010 ops/s
Iteration  15: 91639981.086 ops/s
Iteration  16: 91752942.243 ops/s
Iteration  17: 91311889.498 ops/s
Iteration  18: 91444829.140 ops/s
Iteration  19: 91349675.063 ops/s
Iteration  20: 91757653.510 ops/s
Iteration  21: 91424492.766 ops/s
Iteration  22: 91493160.756 ops/s
Iteration  23: 91850328.988 ops/s
Iteration  24: 91158551.885 ops/s
Iteration  25: 92040731.517 ops/s
Iteration  26: 92022792.612 ops/s
Iteration  27: 91723043.803 ops/s
Iteration  28: 91217889.980 ops/s
Iteration  29: 91334716.853 ops/s
Iteration  30: 91873234.570 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_containsAllArray":
  91548845.103 ±(99.9%) 197249.576 ops/s [Average]
  (min, avg, max) = (90929825.570, 91548845.103, 92040731.517), stdev = 295233.902
  CI (99.9%): [91351595.527, 91746094.680] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score        Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_containsAllArray  thrpt   30  91548845.103 ± 197249.576  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 18239380.411 ops/s
# Warmup Iteration   2: 20291521.323 ops/s
# Warmup Iteration   3: 25929171.243 ops/s
# Warmup Iteration   4: 25899116.751 ops/s
# Warmup Iteration   5: 25794387.594 ops/s
# Warmup Iteration   6: 25897118.190 ops/s
# Warmup Iteration   7: 25888646.342 ops/s
# Warmup Iteration   8: 25934689.362 ops/s
# Warmup Iteration   9: 25889938.122 ops/s
# Warmup Iteration  10: 22165499.077 ops/s
# Warmup Iteration  11: 25639554.901 ops/s
# Warmup Iteration  12: 25942876.375 ops/s
# Warmup Iteration  13: 25899575.236 ops/s
# Warmup Iteration  14: 25915825.882 ops/s
# Warmup Iteration  15: 25891278.636 ops/s
# Warmup Iteration  16: 25890701.107 ops/s
# Warmup Iteration  17: 25908672.760 ops/s
# Warmup Iteration  18: 25933578.328 ops/s
# Warmup Iteration  19: 25894599.255 ops/s
# Warmup Iteration  20: 25927667.234 ops/s
# Warmup Iteration  21: 25918940.474 ops/s
# Warmup Iteration  22: 25916911.981 ops/s
# Warmup Iteration  23: 25900039.428 ops/s
# Warmup Iteration  24: 25906878.285 ops/s
# Warmup Iteration  25: 25913857.660 ops/s
# Warmup Iteration  26: 25905431.958 ops/s
# Warmup Iteration  27: 25945908.430 ops/s
# Warmup Iteration  28: 25865713.842 ops/s
# Warmup Iteration  29: 25910419.163 ops/s
# Warmup Iteration  30: 25928112.596 ops/s
Iteration   1: 25934735.810 ops/s
Iteration   2: 25875147.829 ops/s
Iteration   3: 25943238.393 ops/s
Iteration   4: 25890134.564 ops/s
Iteration   5: 25863109.106 ops/s
Iteration   6: 25941080.672 ops/s
Iteration   7: 25926668.440 ops/s
Iteration   8: 25953753.424 ops/s
Iteration   9: 25855588.347 ops/s
Iteration  10: 25942510.475 ops/s
Iteration  11: 25962844.324 ops/s
Iteration  12: 25879031.199 ops/s
Iteration  13: 25918675.374 ops/s
Iteration  14: 25937347.053 ops/s
Iteration  15: 25934892.371 ops/s
Iteration  16: 25894462.285 ops/s
Iteration  17: 25962398.038 ops/s
Iteration  18: 25959128.130 ops/s
Iteration  19: 25885876.902 ops/s
Iteration  20: 25649850.104 ops/s
Iteration  21: 25698043.852 ops/s
Iteration  22: 25658086.245 ops/s
Iteration  23: 25594906.422 ops/s
Iteration  24: 25712667.116 ops/s
Iteration  25: 25722206.635 ops/s
Iteration  26: 25771339.117 ops/s
Iteration  27: 25935532.197 ops/s
Iteration  28: 25909266.203 ops/s
Iteration  29: 25853698.546 ops/s
Iteration  30: 25917525.320 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_containsAllIterable":
  25862791.483 ±(99.9%) 71235.419 ops/s [Average]
  (min, avg, max) = (25594906.422, 25862791.483, 25962844.324), stdev = 106621.830
  CI (99.9%): [25791556.064, 25934026.902] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt         Score       Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_containsAllIterable  thrpt   30  25862791.483 ± 71235.419  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_corresponds$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_corresponds

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7706605.082 ops/s
# Warmup Iteration   2: 16702504.354 ops/s
# Warmup Iteration   3: 16708978.335 ops/s
# Warmup Iteration   4: 15089160.545 ops/s
# Warmup Iteration   5: 15732930.891 ops/s
# Warmup Iteration   6: 16737453.317 ops/s
# Warmup Iteration   7: 16748570.048 ops/s
# Warmup Iteration   8: 16758781.929 ops/s
# Warmup Iteration   9: 16757725.026 ops/s
# Warmup Iteration  10: 16726693.176 ops/s
# Warmup Iteration  11: 16709767.019 ops/s
# Warmup Iteration  12: 16748996.223 ops/s
# Warmup Iteration  13: 16720419.944 ops/s
# Warmup Iteration  14: 16751628.966 ops/s
# Warmup Iteration  15: 16745158.693 ops/s
# Warmup Iteration  16: 16755431.057 ops/s
# Warmup Iteration  17: 16740832.583 ops/s
# Warmup Iteration  18: 16724036.206 ops/s
# Warmup Iteration  19: 16752639.668 ops/s
# Warmup Iteration  20: 16730098.917 ops/s
# Warmup Iteration  21: 16737481.349 ops/s
# Warmup Iteration  22: 16731399.819 ops/s
# Warmup Iteration  23: 16743568.675 ops/s
# Warmup Iteration  24: 16746322.849 ops/s
# Warmup Iteration  25: 16732744.976 ops/s
# Warmup Iteration  26: 16741696.834 ops/s
# Warmup Iteration  27: 16741709.202 ops/s
# Warmup Iteration  28: 16715044.114 ops/s
# Warmup Iteration  29: 16756444.458 ops/s
# Warmup Iteration  30: 16729393.754 ops/s
Iteration   1: 16718316.186 ops/s
Iteration   2: 16726456.426 ops/s
Iteration   3: 16728385.670 ops/s
Iteration   4: 16736580.128 ops/s
Iteration   5: 16705014.692 ops/s
Iteration   6: 16672771.641 ops/s
Iteration   7: 16773236.088 ops/s
Iteration   8: 16737087.758 ops/s
Iteration   9: 16742215.918 ops/s
Iteration  10: 16674647.561 ops/s
Iteration  11: 16741035.196 ops/s
Iteration  12: 16776401.328 ops/s
Iteration  13: 16730281.535 ops/s
Iteration  14: 16698775.098 ops/s
Iteration  15: 16743882.607 ops/s
Iteration  16: 16766745.408 ops/s
Iteration  17: 16767586.385 ops/s
Iteration  18: 16765803.727 ops/s
Iteration  19: 16746557.993 ops/s
Iteration  20: 16711016.136 ops/s
Iteration  21: 16754683.352 ops/s
Iteration  22: 16729905.008 ops/s
Iteration  23: 16723892.955 ops/s
Iteration  24: 16707835.402 ops/s
Iteration  25: 16734548.615 ops/s
Iteration  26: 16752096.286 ops/s
Iteration  27: 16730124.029 ops/s
Iteration  28: 16664497.989 ops/s
Iteration  29: 16684884.963 ops/s
Iteration  30: 16772657.626 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_corresponds":
  16730597.457 ±(99.9%) 20435.338 ops/s [Average]
  (min, avg, max) = (16664497.989, 16730597.457, 16776401.328), stdev = 30586.655
  CI (99.9%): [16710162.119, 16751032.795] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_corresponds  thrpt   30  16730597.457 ± 20435.338  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 53312832.851 ops/s
# Warmup Iteration   2: 103582526.561 ops/s
# Warmup Iteration   3: 99133602.727 ops/s
# Warmup Iteration   4: 117760916.983 ops/s
# Warmup Iteration   5: 117627815.243 ops/s
# Warmup Iteration   6: 117610209.272 ops/s
# Warmup Iteration   7: 117796817.158 ops/s
# Warmup Iteration   8: 117625300.218 ops/s
# Warmup Iteration   9: 117655560.812 ops/s
# Warmup Iteration  10: 117533161.506 ops/s
# Warmup Iteration  11: 117856470.000 ops/s
# Warmup Iteration  12: 118019704.735 ops/s
# Warmup Iteration  13: 118137789.924 ops/s
# Warmup Iteration  14: 117745339.734 ops/s
# Warmup Iteration  15: 118102718.297 ops/s
# Warmup Iteration  16: 117868695.613 ops/s
# Warmup Iteration  17: 117810577.640 ops/s
# Warmup Iteration  18: 117780888.612 ops/s
# Warmup Iteration  19: 117961863.794 ops/s
# Warmup Iteration  20: 117973158.917 ops/s
# Warmup Iteration  21: 117945052.811 ops/s
# Warmup Iteration  22: 117815690.318 ops/s
# Warmup Iteration  23: 117812383.583 ops/s
# Warmup Iteration  24: 117456645.442 ops/s
# Warmup Iteration  25: 117322195.971 ops/s
# Warmup Iteration  26: 117482183.307 ops/s
# Warmup Iteration  27: 117375855.974 ops/s
# Warmup Iteration  28: 117867883.737 ops/s
# Warmup Iteration  29: 117857982.362 ops/s
# Warmup Iteration  30: 117878877.172 ops/s
Iteration   1: 117955842.825 ops/s
Iteration   2: 117755605.966 ops/s
Iteration   3: 118051188.540 ops/s
Iteration   4: 118205124.420 ops/s
Iteration   5: 117620975.635 ops/s
Iteration   6: 118041285.250 ops/s
Iteration   7: 118287955.263 ops/s
Iteration   8: 118084518.797 ops/s
Iteration   9: 117792454.073 ops/s
Iteration  10: 118255585.746 ops/s
Iteration  11: 118505628.140 ops/s
Iteration  12: 118200920.555 ops/s
Iteration  13: 117687407.127 ops/s
Iteration  14: 118172282.640 ops/s
Iteration  15: 117892989.387 ops/s
Iteration  16: 117554788.500 ops/s
Iteration  17: 117861478.844 ops/s
Iteration  18: 117715267.069 ops/s
Iteration  19: 118656544.902 ops/s
Iteration  20: 118266009.772 ops/s
Iteration  21: 118056976.163 ops/s
Iteration  22: 117620982.198 ops/s
Iteration  23: 117832804.023 ops/s
Iteration  24: 117382291.095 ops/s
Iteration  25: 117579612.815 ops/s
Iteration  26: 118210317.623 ops/s
Iteration  27: 117641116.801 ops/s
Iteration  28: 117543934.690 ops/s
Iteration  29: 117753574.352 ops/s
Iteration  30: 118046175.090 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_count":
  117941054.610 ±(99.9%) 206044.069 ops/s [Average]
  (min, avg, max) = (117382291.095, 117941054.610, 118656544.902), stdev = 308397.087
  CI (99.9%): [117735010.541, 118147098.679] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt          Score        Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_count  thrpt   30  117941054.610 ± 206044.069  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_countBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_countBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1621222.796 ops/s
# Warmup Iteration   2: 3893585.032 ops/s
# Warmup Iteration   3: 4085859.494 ops/s
# Warmup Iteration   4: 3458520.725 ops/s
# Warmup Iteration   5: 4002012.225 ops/s
# Warmup Iteration   6: 4046016.849 ops/s
# Warmup Iteration   7: 4067628.698 ops/s
# Warmup Iteration   8: 4057597.918 ops/s
# Warmup Iteration   9: 4061919.664 ops/s
# Warmup Iteration  10: 4063867.125 ops/s
# Warmup Iteration  11: 4065387.490 ops/s
# Warmup Iteration  12: 4064812.195 ops/s
# Warmup Iteration  13: 4061631.182 ops/s
# Warmup Iteration  14: 4070039.628 ops/s
# Warmup Iteration  15: 4064200.198 ops/s
# Warmup Iteration  16: 4034858.558 ops/s
# Warmup Iteration  17: 4070077.175 ops/s
# Warmup Iteration  18: 4066502.268 ops/s
# Warmup Iteration  19: 4068028.379 ops/s
# Warmup Iteration  20: 4069586.728 ops/s
# Warmup Iteration  21: 4066538.208 ops/s
# Warmup Iteration  22: 4059233.566 ops/s
# Warmup Iteration  23: 4065961.351 ops/s
# Warmup Iteration  24: 4069575.581 ops/s
# Warmup Iteration  25: 4058417.245 ops/s
# Warmup Iteration  26: 4067452.005 ops/s
# Warmup Iteration  27: 4068360.272 ops/s
# Warmup Iteration  28: 4066149.868 ops/s
# Warmup Iteration  29: 4063072.201 ops/s
# Warmup Iteration  30: 4061156.467 ops/s
Iteration   1: 4064713.880 ops/s
Iteration   2: 4058113.048 ops/s
Iteration   3: 4056851.708 ops/s
Iteration   4: 4064017.126 ops/s
Iteration   5: 4068451.080 ops/s
Iteration   6: 4059800.096 ops/s
Iteration   7: 4065165.315 ops/s
Iteration   8: 4061407.403 ops/s
Iteration   9: 4062075.782 ops/s
Iteration  10: 4057187.670 ops/s
Iteration  11: 4053183.768 ops/s
Iteration  12: 4049890.486 ops/s
Iteration  13: 4048728.468 ops/s
Iteration  14: 4059237.212 ops/s
Iteration  15: 4056871.194 ops/s
Iteration  16: 4054375.097 ops/s
Iteration  17: 4069424.442 ops/s
Iteration  18: 4074743.694 ops/s
Iteration  19: 4068269.143 ops/s
Iteration  20: 4066923.993 ops/s
Iteration  21: 4069459.642 ops/s
Iteration  22: 4068106.180 ops/s
Iteration  23: 4061552.188 ops/s
Iteration  24: 4068376.606 ops/s
Iteration  25: 4066084.176 ops/s
Iteration  26: 4065583.226 ops/s
Iteration  27: 4062243.702 ops/s
Iteration  28: 4041882.564 ops/s
Iteration  29: 4044915.815 ops/s
Iteration  30: 4077451.285 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_countBy":
  4061502.866 ±(99.9%) 5545.556 ops/s [Average]
  (min, avg, max) = (4041882.564, 4061502.866, 4077451.285), stdev = 8300.328
  CI (99.9%): [4055957.310, 4067048.422] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_countBy  thrpt   30  4061502.866 ± 5545.556  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_countByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_countByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 504956.317 ops/s
# Warmup Iteration   2: 906258.348 ops/s
# Warmup Iteration   3: 1059846.568 ops/s
# Warmup Iteration   4: 1066929.169 ops/s
# Warmup Iteration   5: 1069818.946 ops/s
# Warmup Iteration   6: 883190.375 ops/s
# Warmup Iteration   7: 1069004.677 ops/s
# Warmup Iteration   8: 1070280.536 ops/s
# Warmup Iteration   9: 1067761.602 ops/s
# Warmup Iteration  10: 1068414.060 ops/s
# Warmup Iteration  11: 1068540.932 ops/s
# Warmup Iteration  12: 1068324.732 ops/s
# Warmup Iteration  13: 1066982.472 ops/s
# Warmup Iteration  14: 1071257.049 ops/s
# Warmup Iteration  15: 1068451.092 ops/s
# Warmup Iteration  16: 1069269.974 ops/s
# Warmup Iteration  17: 1066623.319 ops/s
# Warmup Iteration  18: 1064712.696 ops/s
# Warmup Iteration  19: 1063936.438 ops/s
# Warmup Iteration  20: 1069275.491 ops/s
# Warmup Iteration  21: 1065655.806 ops/s
# Warmup Iteration  22: 1070387.428 ops/s
# Warmup Iteration  23: 1070804.040 ops/s
# Warmup Iteration  24: 1069473.728 ops/s
# Warmup Iteration  25: 1070292.427 ops/s
# Warmup Iteration  26: 1067870.556 ops/s
# Warmup Iteration  27: 1069057.267 ops/s
# Warmup Iteration  28: 1068921.250 ops/s
# Warmup Iteration  29: 1068723.981 ops/s
# Warmup Iteration  30: 1068681.288 ops/s
Iteration   1: 1072338.078 ops/s
Iteration   2: 1068037.332 ops/s
Iteration   3: 1072066.185 ops/s
Iteration   4: 1067956.148 ops/s
Iteration   5: 1072201.202 ops/s
Iteration   6: 1068530.084 ops/s
Iteration   7: 1071742.446 ops/s
Iteration   8: 1067538.964 ops/s
Iteration   9: 1069504.654 ops/s
Iteration  10: 1071967.099 ops/s
Iteration  11: 1069077.640 ops/s
Iteration  12: 1072325.888 ops/s
Iteration  13: 1068560.995 ops/s
Iteration  14: 1071936.657 ops/s
Iteration  15: 1064960.852 ops/s
Iteration  16: 1071467.529 ops/s
Iteration  17: 1066435.781 ops/s
Iteration  18: 1064885.128 ops/s
Iteration  19: 1071960.441 ops/s
Iteration  20: 1067858.944 ops/s
Iteration  21: 1069473.911 ops/s
Iteration  22: 1065307.164 ops/s
Iteration  23: 1071686.126 ops/s
Iteration  24: 1066672.631 ops/s
Iteration  25: 1071036.013 ops/s
Iteration  26: 1067481.236 ops/s
Iteration  27: 1069614.561 ops/s
Iteration  28: 1070067.513 ops/s
Iteration  29: 1068689.722 ops/s
Iteration  30: 1070900.409 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_countByEach":
  1069409.378 ±(99.9%) 1572.978 ops/s [Average]
  (min, avg, max) = (1064885.128, 1069409.378, 1072338.078), stdev = 2354.360
  CI (99.9%): [1067836.400, 1070982.356] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_countByEach  thrpt   30  1069409.378 ± 1572.978  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_countByWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_countByWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1687370.921 ops/s
# Warmup Iteration   2: 3740496.624 ops/s
# Warmup Iteration   3: 4021039.177 ops/s
# Warmup Iteration   4: 4043883.334 ops/s
# Warmup Iteration   5: 3354484.863 ops/s
# Warmup Iteration   6: 4045996.240 ops/s
# Warmup Iteration   7: 4036585.629 ops/s
# Warmup Iteration   8: 4045669.860 ops/s
# Warmup Iteration   9: 4034822.732 ops/s
# Warmup Iteration  10: 4051191.501 ops/s
# Warmup Iteration  11: 4047239.078 ops/s
# Warmup Iteration  12: 4042503.730 ops/s
# Warmup Iteration  13: 4047252.752 ops/s
# Warmup Iteration  14: 4049888.935 ops/s
# Warmup Iteration  15: 4046515.661 ops/s
# Warmup Iteration  16: 4047476.333 ops/s
# Warmup Iteration  17: 4046286.110 ops/s
# Warmup Iteration  18: 4046616.778 ops/s
# Warmup Iteration  19: 4034403.108 ops/s
# Warmup Iteration  20: 4044638.601 ops/s
# Warmup Iteration  21: 4044699.246 ops/s
# Warmup Iteration  22: 4027566.908 ops/s
# Warmup Iteration  23: 4049163.708 ops/s
# Warmup Iteration  24: 4040748.347 ops/s
# Warmup Iteration  25: 4051314.613 ops/s
# Warmup Iteration  26: 4045724.182 ops/s
# Warmup Iteration  27: 4047744.717 ops/s
# Warmup Iteration  28: 4045008.004 ops/s
# Warmup Iteration  29: 4046733.038 ops/s
# Warmup Iteration  30: 4033097.067 ops/s
Iteration   1: 4013860.493 ops/s
Iteration   2: 4038550.198 ops/s
Iteration   3: 4049575.365 ops/s
Iteration   4: 4044820.432 ops/s
Iteration   5: 4040390.867 ops/s
Iteration   6: 4031831.917 ops/s
Iteration   7: 4052887.316 ops/s
Iteration   8: 4050271.329 ops/s
Iteration   9: 4049241.464 ops/s
Iteration  10: 4041636.602 ops/s
Iteration  11: 4052695.984 ops/s
Iteration  12: 4045529.645 ops/s
Iteration  13: 4046783.064 ops/s
Iteration  14: 4034508.576 ops/s
Iteration  15: 4047542.809 ops/s
Iteration  16: 4049522.927 ops/s
Iteration  17: 4045694.103 ops/s
Iteration  18: 4043079.327 ops/s
Iteration  19: 4041935.945 ops/s
Iteration  20: 4045668.012 ops/s
Iteration  21: 4046410.700 ops/s
Iteration  22: 4049171.252 ops/s
Iteration  23: 4050457.780 ops/s
Iteration  24: 4055120.099 ops/s
Iteration  25: 4048078.569 ops/s
Iteration  26: 4049555.679 ops/s
Iteration  27: 4038057.326 ops/s
Iteration  28: 4037463.342 ops/s
Iteration  29: 4048039.724 ops/s
Iteration  30: 4045986.889 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_countByWith":
  4044478.925 ±(99.9%) 5334.465 ops/s [Average]
  (min, avg, max) = (4013860.493, 4044478.925, 4055120.099), stdev = 7984.377
  CI (99.9%): [4039144.459, 4049813.390] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_countByWith  thrpt   30  4044478.925 ± 5334.465  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_countWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_countWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 54895563.511 ops/s
# Warmup Iteration   2: 102970198.006 ops/s
# Warmup Iteration   3: 95802452.655 ops/s
# Warmup Iteration   4: 113087463.357 ops/s
# Warmup Iteration   5: 112792009.250 ops/s
# Warmup Iteration   6: 112963296.220 ops/s
# Warmup Iteration   7: 112553736.474 ops/s
# Warmup Iteration   8: 112894599.366 ops/s
# Warmup Iteration   9: 113055550.468 ops/s
# Warmup Iteration  10: 112965102.569 ops/s
# Warmup Iteration  11: 112695574.510 ops/s
# Warmup Iteration  12: 112676837.906 ops/s
# Warmup Iteration  13: 112877650.245 ops/s
# Warmup Iteration  14: 112673497.126 ops/s
# Warmup Iteration  15: 112793669.102 ops/s
# Warmup Iteration  16: 112797091.004 ops/s
# Warmup Iteration  17: 112309876.002 ops/s
# Warmup Iteration  18: 112771212.303 ops/s
# Warmup Iteration  19: 112565790.602 ops/s
# Warmup Iteration  20: 112761864.380 ops/s
# Warmup Iteration  21: 112651478.363 ops/s
# Warmup Iteration  22: 112688767.081 ops/s
# Warmup Iteration  23: 112735877.692 ops/s
# Warmup Iteration  24: 111803281.399 ops/s
# Warmup Iteration  25: 113227724.900 ops/s
# Warmup Iteration  26: 112931155.118 ops/s
# Warmup Iteration  27: 112858791.653 ops/s
# Warmup Iteration  28: 112864431.038 ops/s
# Warmup Iteration  29: 112917250.815 ops/s
# Warmup Iteration  30: 112895242.628 ops/s
Iteration   1: 112530045.971 ops/s
Iteration   2: 113114883.442 ops/s
Iteration   3: 112671293.856 ops/s
Iteration   4: 113191482.919 ops/s
Iteration   5: 112836631.700 ops/s
Iteration   6: 112762891.943 ops/s
Iteration   7: 112623379.109 ops/s
Iteration   8: 112972408.344 ops/s
Iteration   9: 113043150.253 ops/s
Iteration  10: 112787898.053 ops/s
Iteration  11: 113121020.603 ops/s
Iteration  12: 113198565.970 ops/s
Iteration  13: 112715390.717 ops/s
Iteration  14: 112656217.546 ops/s
Iteration  15: 112975429.939 ops/s
Iteration  16: 112641094.042 ops/s
Iteration  17: 112603362.688 ops/s
Iteration  18: 112029150.923 ops/s
Iteration  19: 112819519.844 ops/s
Iteration  20: 112854090.699 ops/s
Iteration  21: 113235511.067 ops/s
Iteration  22: 113022099.793 ops/s
Iteration  23: 112704801.278 ops/s
Iteration  24: 112709979.393 ops/s
Iteration  25: 113014085.684 ops/s
Iteration  26: 113003398.616 ops/s
Iteration  27: 112490584.696 ops/s
Iteration  28: 112698058.136 ops/s
Iteration  29: 112358220.020 ops/s
Iteration  30: 112632651.858 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_countWith":
  112800576.637 ±(99.9%) 180615.201 ops/s [Average]
  (min, avg, max) = (112029150.923, 112800576.637, 113235511.067), stdev = 270336.350
  CI (99.9%): [112619961.436, 112981191.838] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt          Score        Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_countWith  thrpt   30  112800576.637 ± 180615.201  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_detect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_detect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 23949831.596 ops/s
# Warmup Iteration   2: 47500951.247 ops/s
# Warmup Iteration   3: 40526789.458 ops/s
# Warmup Iteration   4: 47691999.251 ops/s
# Warmup Iteration   5: 47691902.798 ops/s
# Warmup Iteration   6: 47682727.158 ops/s
# Warmup Iteration   7: 47723397.845 ops/s
# Warmup Iteration   8: 47763142.474 ops/s
# Warmup Iteration   9: 47819396.618 ops/s
# Warmup Iteration  10: 47532433.479 ops/s
# Warmup Iteration  11: 47685752.183 ops/s
# Warmup Iteration  12: 47703756.980 ops/s
# Warmup Iteration  13: 47864018.568 ops/s
# Warmup Iteration  14: 47551284.887 ops/s
# Warmup Iteration  15: 47589099.945 ops/s
# Warmup Iteration  16: 47791900.938 ops/s
# Warmup Iteration  17: 47828936.882 ops/s
# Warmup Iteration  18: 47894211.148 ops/s
# Warmup Iteration  19: 47754716.486 ops/s
# Warmup Iteration  20: 47686887.406 ops/s
# Warmup Iteration  21: 47763922.745 ops/s
# Warmup Iteration  22: 47853241.142 ops/s
# Warmup Iteration  23: 47848978.394 ops/s
# Warmup Iteration  24: 47805894.001 ops/s
# Warmup Iteration  25: 47701050.715 ops/s
# Warmup Iteration  26: 47807585.235 ops/s
# Warmup Iteration  27: 47913177.110 ops/s
# Warmup Iteration  28: 47824457.506 ops/s
# Warmup Iteration  29: 47809926.746 ops/s
# Warmup Iteration  30: 47962412.604 ops/s
Iteration   1: 47747189.964 ops/s
Iteration   2: 47806753.391 ops/s
Iteration   3: 47814319.512 ops/s
Iteration   4: 47610374.886 ops/s
Iteration   5: 47836894.700 ops/s
Iteration   6: 47769064.069 ops/s
Iteration   7: 47842082.563 ops/s
Iteration   8: 47530937.593 ops/s
Iteration   9: 47745800.249 ops/s
Iteration  10: 47807083.507 ops/s
Iteration  11: 47853585.604 ops/s
Iteration  12: 47852044.669 ops/s
Iteration  13: 47979187.342 ops/s
Iteration  14: 47843871.499 ops/s
Iteration  15: 47853186.007 ops/s
Iteration  16: 47807016.433 ops/s
Iteration  17: 47855010.375 ops/s
Iteration  18: 47670345.013 ops/s
Iteration  19: 47911610.526 ops/s
Iteration  20: 47880923.130 ops/s
Iteration  21: 47759564.614 ops/s
Iteration  22: 47966934.407 ops/s
Iteration  23: 47879232.290 ops/s
Iteration  24: 47821935.109 ops/s
Iteration  25: 47690811.729 ops/s
Iteration  26: 47704597.450 ops/s
Iteration  27: 47639093.685 ops/s
Iteration  28: 47725965.971 ops/s
Iteration  29: 47902480.312 ops/s
Iteration  30: 47641387.497 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_detect":
  47791642.803 ±(99.9%) 70403.526 ops/s [Average]
  (min, avg, max) = (47530937.593, 47791642.803, 47979187.342), stdev = 105376.691
  CI (99.9%): [47721239.277, 47862046.329] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score       Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_detect  thrpt   30  47791642.803 ± 70403.526  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 25736404.079 ops/s
# Warmup Iteration   2: 49775414.130 ops/s
# Warmup Iteration   3: 41875215.169 ops/s
# Warmup Iteration   4: 49143967.320 ops/s
# Warmup Iteration   5: 49308134.113 ops/s
# Warmup Iteration   6: 49242859.320 ops/s
# Warmup Iteration   7: 49284829.536 ops/s
# Warmup Iteration   8: 49259465.729 ops/s
# Warmup Iteration   9: 49029751.309 ops/s
# Warmup Iteration  10: 49058918.324 ops/s
# Warmup Iteration  11: 49091027.930 ops/s
# Warmup Iteration  12: 49374490.956 ops/s
# Warmup Iteration  13: 49095080.861 ops/s
# Warmup Iteration  14: 49181510.338 ops/s
# Warmup Iteration  15: 49036364.192 ops/s
# Warmup Iteration  16: 49266661.451 ops/s
# Warmup Iteration  17: 49225105.708 ops/s
# Warmup Iteration  18: 49261498.991 ops/s
# Warmup Iteration  19: 49325051.264 ops/s
# Warmup Iteration  20: 49257491.567 ops/s
# Warmup Iteration  21: 49223394.015 ops/s
# Warmup Iteration  22: 49301299.309 ops/s
# Warmup Iteration  23: 49097222.505 ops/s
# Warmup Iteration  24: 49270610.166 ops/s
# Warmup Iteration  25: 49245584.710 ops/s
# Warmup Iteration  26: 49159748.441 ops/s
# Warmup Iteration  27: 49276630.571 ops/s
# Warmup Iteration  28: 49188678.208 ops/s
# Warmup Iteration  29: 49155750.678 ops/s
# Warmup Iteration  30: 49254158.629 ops/s
Iteration   1: 49308955.965 ops/s
Iteration   2: 49249706.118 ops/s
Iteration   3: 49230811.478 ops/s
Iteration   4: 49099474.659 ops/s
Iteration   5: 49158632.865 ops/s
Iteration   6: 49241908.818 ops/s
Iteration   7: 49227129.284 ops/s
Iteration   8: 49304107.131 ops/s
Iteration   9: 49270001.809 ops/s
Iteration  10: 49181983.764 ops/s
Iteration  11: 49286688.281 ops/s
Iteration  12: 49192991.182 ops/s
Iteration  13: 49273623.462 ops/s
Iteration  14: 49376496.182 ops/s
Iteration  15: 49214295.271 ops/s
Iteration  16: 49298715.732 ops/s
Iteration  17: 49208412.952 ops/s
Iteration  18: 49293927.765 ops/s
Iteration  19: 49311954.401 ops/s
Iteration  20: 49254522.388 ops/s
Iteration  21: 49235157.228 ops/s
Iteration  22: 49343542.206 ops/s
Iteration  23: 49229700.997 ops/s
Iteration  24: 49164440.827 ops/s
Iteration  25: 49347356.938 ops/s
Iteration  26: 49138834.449 ops/s
Iteration  27: 49352834.836 ops/s
Iteration  28: 49199212.618 ops/s
Iteration  29: 49106622.315 ops/s
Iteration  30: 49100459.036 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_detectIfNone":
  49240083.365 ±(99.9%) 50757.259 ops/s [Average]
  (min, avg, max) = (49099474.659, 49240083.365, 49376496.182), stdev = 75971.081
  CI (99.9%): [49189326.106, 49290840.624] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score       Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_detectIfNone  thrpt   30  49240083.365 ± 50757.259  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_detectIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_detectIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 107980111.161 ops/s
# Warmup Iteration   2: 210134402.502 ops/s
# Warmup Iteration   3: 183441108.877 ops/s
# Warmup Iteration   4: 214987026.178 ops/s
# Warmup Iteration   5: 215012256.212 ops/s
# Warmup Iteration   6: 215450276.419 ops/s
# Warmup Iteration   7: 215445706.968 ops/s
# Warmup Iteration   8: 214917723.291 ops/s
# Warmup Iteration   9: 214977371.837 ops/s
# Warmup Iteration  10: 215084143.900 ops/s
# Warmup Iteration  11: 215532921.070 ops/s
# Warmup Iteration  12: 215519020.265 ops/s
# Warmup Iteration  13: 215098644.201 ops/s
# Warmup Iteration  14: 215245329.304 ops/s
# Warmup Iteration  15: 215630500.312 ops/s
# Warmup Iteration  16: 214776435.567 ops/s
# Warmup Iteration  17: 215600475.701 ops/s
# Warmup Iteration  18: 215218395.579 ops/s
# Warmup Iteration  19: 215209178.199 ops/s
# Warmup Iteration  20: 215255883.236 ops/s
# Warmup Iteration  21: 215381610.513 ops/s
# Warmup Iteration  22: 215565695.103 ops/s
# Warmup Iteration  23: 215321296.673 ops/s
# Warmup Iteration  24: 214912544.457 ops/s
# Warmup Iteration  25: 215173799.523 ops/s
# Warmup Iteration  26: 215429045.366 ops/s
# Warmup Iteration  27: 215294841.052 ops/s
# Warmup Iteration  28: 214979184.539 ops/s
# Warmup Iteration  29: 214992786.716 ops/s
# Warmup Iteration  30: 214739114.961 ops/s
Iteration   1: 215056778.848 ops/s
Iteration   2: 214649623.106 ops/s
Iteration   3: 215284097.106 ops/s
Iteration   4: 215173295.730 ops/s
Iteration   5: 215686827.889 ops/s
Iteration   6: 215431089.720 ops/s
Iteration   7: 215172212.571 ops/s
Iteration   8: 215184106.890 ops/s
Iteration   9: 214808883.551 ops/s
Iteration  10: 214951765.126 ops/s
Iteration  11: 215126591.882 ops/s
Iteration  12: 215458519.892 ops/s
Iteration  13: 215639901.742 ops/s
Iteration  14: 214674830.175 ops/s
Iteration  15: 215604442.519 ops/s
Iteration  16: 215498520.302 ops/s
Iteration  17: 214921847.215 ops/s
Iteration  18: 214428766.986 ops/s
Iteration  19: 214800564.463 ops/s
Iteration  20: 214964673.577 ops/s
Iteration  21: 215093476.877 ops/s
Iteration  22: 215613645.276 ops/s
Iteration  23: 215672719.127 ops/s
Iteration  24: 215771750.737 ops/s
Iteration  25: 215568293.982 ops/s
Iteration  26: 214970765.508 ops/s
Iteration  27: 215059847.110 ops/s
Iteration  28: 215019174.813 ops/s
Iteration  29: 214705134.197 ops/s
Iteration  30: 214139919.920 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_detectIndex":
  215137735.561 ±(99.9%) 270230.785 ops/s [Average]
  (min, avg, max) = (214139919.920, 215137735.561, 215771750.737), stdev = 404468.748
  CI (99.9%): [214867504.776, 215407966.346] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt          Score        Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_detectIndex  thrpt   30  215137735.561 ± 270230.785  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_detectLastIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_detectLastIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 107606565.064 ops/s
# Warmup Iteration   2: 207979914.029 ops/s
# Warmup Iteration   3: 183736740.632 ops/s
# Warmup Iteration   4: 214742601.328 ops/s
# Warmup Iteration   5: 215205173.133 ops/s
# Warmup Iteration   6: 215383361.366 ops/s
# Warmup Iteration   7: 214966456.830 ops/s
# Warmup Iteration   8: 214851719.848 ops/s
# Warmup Iteration   9: 215170002.415 ops/s
# Warmup Iteration  10: 215212879.956 ops/s
# Warmup Iteration  11: 214914474.881 ops/s
# Warmup Iteration  12: 214442443.624 ops/s
# Warmup Iteration  13: 214609242.622 ops/s
# Warmup Iteration  14: 214933453.296 ops/s
# Warmup Iteration  15: 215096808.262 ops/s
# Warmup Iteration  16: 214808391.756 ops/s
# Warmup Iteration  17: 214937887.651 ops/s
# Warmup Iteration  18: 215338922.018 ops/s
# Warmup Iteration  19: 215090334.884 ops/s
# Warmup Iteration  20: 214943010.042 ops/s
# Warmup Iteration  21: 214903349.858 ops/s
# Warmup Iteration  22: 215143004.223 ops/s
# Warmup Iteration  23: 215111910.484 ops/s
# Warmup Iteration  24: 215310380.253 ops/s
# Warmup Iteration  25: 215067233.189 ops/s
# Warmup Iteration  26: 215349767.169 ops/s
# Warmup Iteration  27: 215414527.248 ops/s
# Warmup Iteration  28: 215269106.401 ops/s
# Warmup Iteration  29: 214818080.098 ops/s
# Warmup Iteration  30: 214409160.362 ops/s
Iteration   1: 214160307.064 ops/s
Iteration   2: 215035919.826 ops/s
Iteration   3: 215249212.024 ops/s
Iteration   4: 215123259.202 ops/s
Iteration   5: 214725486.981 ops/s
Iteration   6: 214886557.777 ops/s
Iteration   7: 214450104.814 ops/s
Iteration   8: 214468098.228 ops/s
Iteration   9: 214547964.664 ops/s
Iteration  10: 214297234.460 ops/s
Iteration  11: 215377561.267 ops/s
Iteration  12: 215335722.188 ops/s
Iteration  13: 215187105.428 ops/s
Iteration  14: 215190281.814 ops/s
Iteration  15: 214828803.459 ops/s
Iteration  16: 215473273.958 ops/s
Iteration  17: 214859033.238 ops/s
Iteration  18: 214339329.360 ops/s
Iteration  19: 214666466.635 ops/s
Iteration  20: 213533502.672 ops/s
Iteration  21: 215098665.081 ops/s
Iteration  22: 214741225.141 ops/s
Iteration  23: 214896292.624 ops/s
Iteration  24: 214676948.602 ops/s
Iteration  25: 214556991.635 ops/s
Iteration  26: 214554021.169 ops/s
Iteration  27: 215036112.309 ops/s
Iteration  28: 215166714.832 ops/s
Iteration  29: 214830164.734 ops/s
Iteration  30: 214834465.832 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_detectLastIndex":
  214804227.567 ±(99.9%) 276749.909 ops/s [Average]
  (min, avg, max) = (213533502.672, 214804227.567, 215473273.958), stdev = 414226.266
  CI (99.9%): [214527477.659, 215080977.476] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt          Score        Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_detectLastIndex  thrpt   30  214804227.567 ± 276749.909  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_detectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_detectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 14587512.312 ops/s
# Warmup Iteration   2: 28795801.175 ops/s
# Warmup Iteration   3: 23752282.363 ops/s
# Warmup Iteration   4: 27916935.822 ops/s
# Warmup Iteration   5: 27951113.914 ops/s
# Warmup Iteration   6: 27952058.650 ops/s
# Warmup Iteration   7: 27862577.769 ops/s
# Warmup Iteration   8: 27956315.887 ops/s
# Warmup Iteration   9: 27994154.234 ops/s
# Warmup Iteration  10: 27938335.503 ops/s
# Warmup Iteration  11: 27969626.589 ops/s
# Warmup Iteration  12: 27949804.978 ops/s
# Warmup Iteration  13: 27874970.847 ops/s
# Warmup Iteration  14: 27936554.798 ops/s
# Warmup Iteration  15: 28025187.416 ops/s
# Warmup Iteration  16: 27865263.377 ops/s
# Warmup Iteration  17: 27740144.353 ops/s
# Warmup Iteration  18: 27869705.085 ops/s
# Warmup Iteration  19: 27857860.261 ops/s
# Warmup Iteration  20: 27827946.441 ops/s
# Warmup Iteration  21: 27863552.550 ops/s
# Warmup Iteration  22: 27870313.716 ops/s
# Warmup Iteration  23: 27763105.627 ops/s
# Warmup Iteration  24: 27809655.618 ops/s
# Warmup Iteration  25: 27873897.250 ops/s
# Warmup Iteration  26: 27847064.515 ops/s
# Warmup Iteration  27: 27852434.336 ops/s
# Warmup Iteration  28: 27846034.473 ops/s
# Warmup Iteration  29: 27841284.737 ops/s
# Warmup Iteration  30: 27737220.075 ops/s
Iteration   1: 27869975.236 ops/s
Iteration   2: 27842307.060 ops/s
Iteration   3: 27820650.163 ops/s
Iteration   4: 27790212.756 ops/s
Iteration   5: 27847952.330 ops/s
Iteration   6: 27717941.543 ops/s
Iteration   7: 27905538.528 ops/s
Iteration   8: 27736464.961 ops/s
Iteration   9: 27915709.365 ops/s
Iteration  10: 27879596.918 ops/s
Iteration  11: 27880215.457 ops/s
Iteration  12: 27911063.041 ops/s
Iteration  13: 27932590.057 ops/s
Iteration  14: 27777829.437 ops/s
Iteration  15: 27844565.009 ops/s
Iteration  16: 27840119.295 ops/s
Iteration  17: 27829904.931 ops/s
Iteration  18: 27791412.017 ops/s
Iteration  19: 27807702.432 ops/s
Iteration  20: 27791611.410 ops/s
Iteration  21: 27832460.396 ops/s
Iteration  22: 27849943.933 ops/s
Iteration  23: 27862502.115 ops/s
Iteration  24: 27787957.087 ops/s
Iteration  25: 27833997.430 ops/s
Iteration  26: 27876017.060 ops/s
Iteration  27: 27724194.573 ops/s
Iteration  28: 27772030.946 ops/s
Iteration  29: 27855078.650 ops/s
Iteration  30: 27752043.357 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_detectWith":
  27829319.583 ±(99.9%) 37892.343 ops/s [Average]
  (min, avg, max) = (27717941.543, 27829319.583, 27932590.057), stdev = 56715.479
  CI (99.9%): [27791427.240, 27867211.926] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_detectWith  thrpt   30  27829319.583 ± 37892.343  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_detectWithIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_detectWithIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 14439026.331 ops/s
# Warmup Iteration   2: 30121219.745 ops/s
# Warmup Iteration   3: 29625975.303 ops/s
# Warmup Iteration   4: 25044959.054 ops/s
# Warmup Iteration   5: 29718174.688 ops/s
# Warmup Iteration   6: 29618026.498 ops/s
# Warmup Iteration   7: 29627667.577 ops/s
# Warmup Iteration   8: 29650779.964 ops/s
# Warmup Iteration   9: 29597843.535 ops/s
# Warmup Iteration  10: 29634708.875 ops/s
# Warmup Iteration  11: 29759048.626 ops/s
# Warmup Iteration  12: 29589235.033 ops/s
# Warmup Iteration  13: 29615128.385 ops/s
# Warmup Iteration  14: 29666573.939 ops/s
# Warmup Iteration  15: 29667832.991 ops/s
# Warmup Iteration  16: 29664909.997 ops/s
# Warmup Iteration  17: 29610793.274 ops/s
# Warmup Iteration  18: 29700875.144 ops/s
# Warmup Iteration  19: 29683719.657 ops/s
# Warmup Iteration  20: 29677848.159 ops/s
# Warmup Iteration  21: 29651542.920 ops/s
# Warmup Iteration  22: 29678137.657 ops/s
# Warmup Iteration  23: 29663502.763 ops/s
# Warmup Iteration  24: 29594491.176 ops/s
# Warmup Iteration  25: 29636706.311 ops/s
# Warmup Iteration  26: 29416271.946 ops/s
# Warmup Iteration  27: 29616689.894 ops/s
# Warmup Iteration  28: 29717447.765 ops/s
# Warmup Iteration  29: 29664207.740 ops/s
# Warmup Iteration  30: 29699460.659 ops/s
Iteration   1: 29640988.266 ops/s
Iteration   2: 29754719.263 ops/s
Iteration   3: 29691618.258 ops/s
Iteration   4: 29716696.718 ops/s
Iteration   5: 29643525.876 ops/s
Iteration   6: 29630536.699 ops/s
Iteration   7: 29670484.784 ops/s
Iteration   8: 29761266.745 ops/s
Iteration   9: 29701859.556 ops/s
Iteration  10: 29676896.278 ops/s
Iteration  11: 29660113.933 ops/s
Iteration  12: 29564575.265 ops/s
Iteration  13: 29610562.479 ops/s
Iteration  14: 29619064.520 ops/s
Iteration  15: 29708590.688 ops/s
Iteration  16: 29665919.259 ops/s
Iteration  17: 29658924.660 ops/s
Iteration  18: 29681982.665 ops/s
Iteration  19: 29761183.963 ops/s
Iteration  20: 29648898.543 ops/s
Iteration  21: 29673492.619 ops/s
Iteration  22: 29639920.138 ops/s
Iteration  23: 29643783.259 ops/s
Iteration  24: 29641760.151 ops/s
Iteration  25: 29661577.982 ops/s
Iteration  26: 29614406.064 ops/s
Iteration  27: 29598871.580 ops/s
Iteration  28: 29675039.530 ops/s
Iteration  29: 29683991.374 ops/s
Iteration  30: 29696996.896 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_detectWithIfNone":
  29666608.267 ±(99.9%) 30746.328 ops/s [Average]
  (min, avg, max) = (29564575.265, 29666608.267, 29761266.745), stdev = 46019.660
  CI (99.9%): [29635861.939, 29697354.595] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_detectWithIfNone  thrpt   30  29666608.267 ± 30746.328  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_distinct$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_distinct

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3023610.179 ops/s
# Warmup Iteration   2: 6684327.907 ops/s
# Warmup Iteration   3: 5691797.729 ops/s
# Warmup Iteration   4: 6711546.937 ops/s
# Warmup Iteration   5: 6750619.530 ops/s
# Warmup Iteration   6: 6723458.984 ops/s
# Warmup Iteration   7: 6709639.889 ops/s
# Warmup Iteration   8: 6731921.478 ops/s
# Warmup Iteration   9: 6708519.134 ops/s
# Warmup Iteration  10: 6730217.811 ops/s
# Warmup Iteration  11: 6702879.710 ops/s
# Warmup Iteration  12: 6718572.792 ops/s
# Warmup Iteration  13: 6715235.183 ops/s
# Warmup Iteration  14: 6706332.390 ops/s
# Warmup Iteration  15: 6750438.407 ops/s
# Warmup Iteration  16: 6746736.397 ops/s
# Warmup Iteration  17: 6727904.537 ops/s
# Warmup Iteration  18: 6739886.502 ops/s
# Warmup Iteration  19: 6741165.786 ops/s
# Warmup Iteration  20: 6713002.322 ops/s
# Warmup Iteration  21: 6748649.349 ops/s
# Warmup Iteration  22: 6746431.382 ops/s
# Warmup Iteration  23: 6741414.782 ops/s
# Warmup Iteration  24: 6752513.152 ops/s
# Warmup Iteration  25: 6732294.678 ops/s
# Warmup Iteration  26: 6732302.183 ops/s
# Warmup Iteration  27: 6745215.822 ops/s
# Warmup Iteration  28: 6737251.133 ops/s
# Warmup Iteration  29: 6744149.922 ops/s
# Warmup Iteration  30: 6732126.705 ops/s
Iteration   1: 6738254.180 ops/s
Iteration   2: 6753913.584 ops/s
Iteration   3: 6707362.175 ops/s
Iteration   4: 6739894.286 ops/s
Iteration   5: 6743183.464 ops/s
Iteration   6: 6735032.967 ops/s
Iteration   7: 6743540.117 ops/s
Iteration   8: 6755510.098 ops/s
Iteration   9: 6744058.350 ops/s
Iteration  10: 6726398.289 ops/s
Iteration  11: 6729641.670 ops/s
Iteration  12: 6278260.107 ops/s
Iteration  13: 6717002.033 ops/s
Iteration  14: 6740643.263 ops/s
Iteration  15: 6756949.686 ops/s
Iteration  16: 6736429.623 ops/s
Iteration  17: 6740834.462 ops/s
Iteration  18: 6733792.921 ops/s
Iteration  19: 6746671.492 ops/s
Iteration  20: 6727625.084 ops/s
Iteration  21: 6750319.679 ops/s
Iteration  22: 6737224.475 ops/s
Iteration  23: 6732671.658 ops/s
Iteration  24: 6712402.366 ops/s
Iteration  25: 6742605.512 ops/s
Iteration  26: 6732681.576 ops/s
Iteration  27: 6725635.848 ops/s
Iteration  28: 6736659.527 ops/s
Iteration  29: 6730613.147 ops/s
Iteration  30: 6757155.957 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_distinct":
  6721765.587 ±(99.9%) 56547.652 ops/s [Average]
  (min, avg, max) = (6278260.107, 6721765.587, 6757155.957), stdev = 84637.870
  CI (99.9%): [6665217.934, 6778313.239] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_distinct  thrpt   30  6721765.587 ± 56547.652  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_distinctBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_distinctBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5196146.522 ops/s
# Warmup Iteration   2: 11644962.743 ops/s
# Warmup Iteration   3: 11800272.612 ops/s
# Warmup Iteration   4: 9891645.191 ops/s
# Warmup Iteration   5: 11846684.706 ops/s
# Warmup Iteration   6: 11830516.077 ops/s
# Warmup Iteration   7: 11851177.569 ops/s
# Warmup Iteration   8: 11859408.164 ops/s
# Warmup Iteration   9: 11848036.469 ops/s
# Warmup Iteration  10: 11860553.996 ops/s
# Warmup Iteration  11: 11871401.355 ops/s
# Warmup Iteration  12: 11851188.673 ops/s
# Warmup Iteration  13: 11831108.833 ops/s
# Warmup Iteration  14: 11850004.617 ops/s
# Warmup Iteration  15: 11850226.299 ops/s
# Warmup Iteration  16: 11835108.116 ops/s
# Warmup Iteration  17: 11840059.250 ops/s
# Warmup Iteration  18: 11874804.884 ops/s
# Warmup Iteration  19: 11834441.352 ops/s
# Warmup Iteration  20: 11862351.693 ops/s
# Warmup Iteration  21: 11849468.506 ops/s
# Warmup Iteration  22: 11859515.719 ops/s
# Warmup Iteration  23: 11859543.785 ops/s
# Warmup Iteration  24: 11848976.694 ops/s
# Warmup Iteration  25: 11866243.505 ops/s
# Warmup Iteration  26: 11871846.104 ops/s
# Warmup Iteration  27: 11879392.535 ops/s
# Warmup Iteration  28: 11850867.723 ops/s
# Warmup Iteration  29: 11860625.140 ops/s
# Warmup Iteration  30: 11876932.521 ops/s
Iteration   1: 11878406.634 ops/s
Iteration   2: 11842561.728 ops/s
Iteration   3: 11810978.668 ops/s
Iteration   4: 11839145.068 ops/s
Iteration   5: 11867204.749 ops/s
Iteration   6: 11808897.592 ops/s
Iteration   7: 11864112.328 ops/s
Iteration   8: 11868886.393 ops/s
Iteration   9: 11802082.402 ops/s
Iteration  10: 11825386.340 ops/s
Iteration  11: 11842749.225 ops/s
Iteration  12: 11873964.858 ops/s
Iteration  13: 11864148.368 ops/s
Iteration  14: 11839042.655 ops/s
Iteration  15: 11862137.804 ops/s
Iteration  16: 11872073.912 ops/s
Iteration  17: 11749690.006 ops/s
Iteration  18: 11854790.161 ops/s
Iteration  19: 11858649.643 ops/s
Iteration  20: 11841871.468 ops/s
Iteration  21: 11853667.131 ops/s
Iteration  22: 11829393.539 ops/s
Iteration  23: 11868830.781 ops/s
Iteration  24: 11849314.732 ops/s
Iteration  25: 11840225.150 ops/s
Iteration  26: 11861557.660 ops/s
Iteration  27: 11869143.024 ops/s
Iteration  28: 11893120.429 ops/s
Iteration  29: 11863639.463 ops/s
Iteration  30: 11851675.163 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_distinctBy":
  11848244.902 ±(99.9%) 18855.548 ops/s [Average]
  (min, avg, max) = (11749690.006, 11848244.902, 11893120.429), stdev = 28222.099
  CI (99.9%): [11829389.354, 11867100.451] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_distinctBy  thrpt   30  11848244.902 ± 18855.548  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_distinctWithHashingStrategy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_distinctWithHashingStrategy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5746078.091 ops/s
# Warmup Iteration   2: 12415262.203 ops/s
# Warmup Iteration   3: 11563119.476 ops/s
# Warmup Iteration   4: 10838515.758 ops/s
# Warmup Iteration   5: 11814112.985 ops/s
# Warmup Iteration   6: 11750659.848 ops/s
# Warmup Iteration   7: 11800779.824 ops/s
# Warmup Iteration   8: 11788601.060 ops/s
# Warmup Iteration   9: 11749838.433 ops/s
# Warmup Iteration  10: 11753491.438 ops/s
# Warmup Iteration  11: 11746501.497 ops/s
# Warmup Iteration  12: 11761312.253 ops/s
# Warmup Iteration  13: 11733260.111 ops/s
# Warmup Iteration  14: 11730753.681 ops/s
# Warmup Iteration  15: 11697231.144 ops/s
# Warmup Iteration  16: 11730967.084 ops/s
# Warmup Iteration  17: 12564235.900 ops/s
# Warmup Iteration  18: 12494714.707 ops/s
# Warmup Iteration  19: 12484071.135 ops/s
# Warmup Iteration  20: 12488880.864 ops/s
# Warmup Iteration  21: 12516819.198 ops/s
# Warmup Iteration  22: 12524248.121 ops/s
# Warmup Iteration  23: 12529798.919 ops/s
# Warmup Iteration  24: 12545033.330 ops/s
# Warmup Iteration  25: 12558841.444 ops/s
# Warmup Iteration  26: 12540649.858 ops/s
# Warmup Iteration  27: 12579033.757 ops/s
# Warmup Iteration  28: 12573734.613 ops/s
# Warmup Iteration  29: 12493727.460 ops/s
# Warmup Iteration  30: 12508813.029 ops/s
Iteration   1: 12446614.233 ops/s
Iteration   2: 12584844.929 ops/s
Iteration   3: 12508995.192 ops/s
Iteration   4: 12399892.152 ops/s
Iteration   5: 12509516.101 ops/s
Iteration   6: 12552399.189 ops/s
Iteration   7: 12488568.525 ops/s
Iteration   8: 12492073.509 ops/s
Iteration   9: 12520229.329 ops/s
Iteration  10: 12497788.626 ops/s
Iteration  11: 12619713.734 ops/s
Iteration  12: 12519368.887 ops/s
Iteration  13: 12528562.356 ops/s
Iteration  14: 12503882.859 ops/s
Iteration  15: 12552168.600 ops/s
Iteration  16: 12587004.023 ops/s
Iteration  17: 12527816.943 ops/s
Iteration  18: 12524695.546 ops/s
Iteration  19: 12579885.475 ops/s
Iteration  20: 12515037.811 ops/s
Iteration  21: 12460802.104 ops/s
Iteration  22: 12530606.641 ops/s
Iteration  23: 12583310.247 ops/s
Iteration  24: 12508103.608 ops/s
Iteration  25: 12490478.668 ops/s
Iteration  26: 12579800.113 ops/s
Iteration  27: 12554485.716 ops/s
Iteration  28: 12629695.716 ops/s
Iteration  29: 12497597.501 ops/s
Iteration  30: 12556634.021 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_distinctWithHashingStrategy":
  12528352.412 ±(99.9%) 33345.808 ops/s [Average]
  (min, avg, max) = (12399892.152, 12528352.412, 12629695.716), stdev = 49910.440
  CI (99.9%): [12495006.603, 12561698.220] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt         Score       Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_distinctWithHashingStrategy  thrpt   30  12528352.412 ± 33345.808  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_drop$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_drop

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2678295.005 ops/s
# Warmup Iteration   2: 3009487.733 ops/s
# Warmup Iteration   3: 4079964.902 ops/s
# Warmup Iteration   4: 4049472.595 ops/s
# Warmup Iteration   5: 4069964.829 ops/s
# Warmup Iteration   6: 4069690.827 ops/s
# Warmup Iteration   7: 4067768.817 ops/s
# Warmup Iteration   8: 4052621.233 ops/s
# Warmup Iteration   9: 4053727.860 ops/s
# Warmup Iteration  10: 3764602.499 ops/s
# Warmup Iteration  11: 3673971.360 ops/s
# Warmup Iteration  12: 4073392.224 ops/s
# Warmup Iteration  13: 4071314.938 ops/s
# Warmup Iteration  14: 4072819.683 ops/s
# Warmup Iteration  15: 4078116.171 ops/s
# Warmup Iteration  16: 4071066.504 ops/s
# Warmup Iteration  17: 4077016.802 ops/s
# Warmup Iteration  18: 4076671.182 ops/s
# Warmup Iteration  19: 4079664.173 ops/s
# Warmup Iteration  20: 4075149.680 ops/s
# Warmup Iteration  21: 4076469.786 ops/s
# Warmup Iteration  22: 4079448.099 ops/s
# Warmup Iteration  23: 4073403.611 ops/s
# Warmup Iteration  24: 4080295.050 ops/s
# Warmup Iteration  25: 4077159.624 ops/s
# Warmup Iteration  26: 4077644.259 ops/s
# Warmup Iteration  27: 4075128.695 ops/s
# Warmup Iteration  28: 4075483.873 ops/s
# Warmup Iteration  29: 4071053.393 ops/s
# Warmup Iteration  30: 4075892.294 ops/s
Iteration   1: 4077760.191 ops/s
Iteration   2: 4068587.522 ops/s
Iteration   3: 4070874.927 ops/s
Iteration   4: 4069313.314 ops/s
Iteration   5: 4077604.515 ops/s
Iteration   6: 4079136.310 ops/s
Iteration   7: 4069789.118 ops/s
Iteration   8: 4078825.818 ops/s
Iteration   9: 4077742.555 ops/s
Iteration  10: 4071876.829 ops/s
Iteration  11: 4080129.265 ops/s
Iteration  12: 4076995.131 ops/s
Iteration  13: 4076106.313 ops/s
Iteration  14: 4066727.899 ops/s
Iteration  15: 4079550.356 ops/s
Iteration  16: 4074383.041 ops/s
Iteration  17: 4053921.628 ops/s
Iteration  18: 4078949.947 ops/s
Iteration  19: 4071951.300 ops/s
Iteration  20: 4077731.347 ops/s
Iteration  21: 4074789.726 ops/s
Iteration  22: 4080436.885 ops/s
Iteration  23: 4075617.966 ops/s
Iteration  24: 4071243.454 ops/s
Iteration  25: 4082651.921 ops/s
Iteration  26: 4078033.542 ops/s
Iteration  27: 4080174.275 ops/s
Iteration  28: 4068317.788 ops/s
Iteration  29: 4078824.079 ops/s
Iteration  30: 4078845.489 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_drop":
  4074896.415 ±(99.9%) 3905.797 ops/s [Average]
  (min, avg, max) = (4053921.628, 4074896.415, 4082651.921), stdev = 5846.014
  CI (99.9%): [4070990.618, 4078802.212] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_drop  thrpt   30  4074896.415 ± 3905.797  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_dropWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_dropWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7076617.038 ops/s
# Warmup Iteration   2: 15389969.994 ops/s
# Warmup Iteration   3: 15625894.770 ops/s
# Warmup Iteration   4: 13117277.030 ops/s
# Warmup Iteration   5: 15650806.669 ops/s
# Warmup Iteration   6: 15647460.326 ops/s
# Warmup Iteration   7: 15643702.221 ops/s
# Warmup Iteration   8: 15666033.077 ops/s
# Warmup Iteration   9: 15655872.889 ops/s
# Warmup Iteration  10: 15639629.493 ops/s
# Warmup Iteration  11: 15649558.134 ops/s
# Warmup Iteration  12: 14667779.714 ops/s
# Warmup Iteration  13: 15604656.455 ops/s
# Warmup Iteration  14: 15637675.533 ops/s
# Warmup Iteration  15: 15622524.042 ops/s
# Warmup Iteration  16: 15644704.108 ops/s
# Warmup Iteration  17: 15638251.548 ops/s
# Warmup Iteration  18: 15629565.587 ops/s
# Warmup Iteration  19: 15637152.083 ops/s
# Warmup Iteration  20: 15624852.585 ops/s
# Warmup Iteration  21: 15637824.415 ops/s
# Warmup Iteration  22: 15629541.852 ops/s
# Warmup Iteration  23: 15634292.104 ops/s
# Warmup Iteration  24: 15636711.790 ops/s
# Warmup Iteration  25: 15645150.851 ops/s
# Warmup Iteration  26: 15627161.733 ops/s
# Warmup Iteration  27: 15625852.201 ops/s
# Warmup Iteration  28: 15649748.615 ops/s
# Warmup Iteration  29: 15635635.144 ops/s
# Warmup Iteration  30: 15634645.786 ops/s
Iteration   1: 15644075.909 ops/s
Iteration   2: 15664989.505 ops/s
Iteration   3: 15629221.047 ops/s
Iteration   4: 15625860.233 ops/s
Iteration   5: 15652003.809 ops/s
Iteration   6: 15646817.714 ops/s
Iteration   7: 15632601.605 ops/s
Iteration   8: 15670404.290 ops/s
Iteration   9: 15656992.798 ops/s
Iteration  10: 15602241.805 ops/s
Iteration  11: 15632347.229 ops/s
Iteration  12: 15632599.400 ops/s
Iteration  13: 15642425.863 ops/s
Iteration  14: 15656045.944 ops/s
Iteration  15: 15654505.184 ops/s
Iteration  16: 15680981.393 ops/s
Iteration  17: 15642073.154 ops/s
Iteration  18: 15639794.868 ops/s
Iteration  19: 15685208.313 ops/s
Iteration  20: 15642143.890 ops/s
Iteration  21: 15655779.154 ops/s
Iteration  22: 15619116.971 ops/s
Iteration  23: 15605672.777 ops/s
Iteration  24: 15608676.035 ops/s
Iteration  25: 15636687.894 ops/s
Iteration  26: 15635967.488 ops/s
Iteration  27: 15627056.884 ops/s
Iteration  28: 15654725.045 ops/s
Iteration  29: 15646150.616 ops/s
Iteration  30: 15655255.192 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_dropWhile":
  15642614.067 ±(99.9%) 13294.371 ops/s [Average]
  (min, avg, max) = (15602241.805, 15642614.067, 15685208.313), stdev = 19898.390
  CI (99.9%): [15629319.696, 15655908.438] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_dropWhile  thrpt   30  15642614.067 ± 13294.371  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_drop_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_drop_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 750814.584 ops/s
# Warmup Iteration   2: 773099.750 ops/s
# Warmup Iteration   3: 989066.141 ops/s
# Warmup Iteration   4: 1000676.243 ops/s
# Warmup Iteration   5: 998558.231 ops/s
# Warmup Iteration   6: 990034.347 ops/s
# Warmup Iteration   7: 1001613.537 ops/s
# Warmup Iteration   8: 1004770.366 ops/s
# Warmup Iteration   9: 1000416.743 ops/s
# Warmup Iteration  10: 1001075.090 ops/s
# Warmup Iteration  11: 1001437.834 ops/s
# Warmup Iteration  12: 864629.257 ops/s
# Warmup Iteration  13: 994315.064 ops/s
# Warmup Iteration  14: 1001332.865 ops/s
# Warmup Iteration  15: 998779.769 ops/s
# Warmup Iteration  16: 1000711.184 ops/s
# Warmup Iteration  17: 1061401.579 ops/s
# Warmup Iteration  18: 1063189.858 ops/s
# Warmup Iteration  19: 1008113.298 ops/s
# Warmup Iteration  20: 1060534.132 ops/s
# Warmup Iteration  21: 1061612.069 ops/s
# Warmup Iteration  22: 1065089.598 ops/s
# Warmup Iteration  23: 1017417.133 ops/s
# Warmup Iteration  24: 1065108.946 ops/s
# Warmup Iteration  25: 1064580.393 ops/s
# Warmup Iteration  26: 1065941.092 ops/s
# Warmup Iteration  27: 1064361.565 ops/s
# Warmup Iteration  28: 1065571.958 ops/s
# Warmup Iteration  29: 1063640.303 ops/s
# Warmup Iteration  30: 1066133.599 ops/s
Iteration   1: 1064243.432 ops/s
Iteration   2: 1062638.894 ops/s
Iteration   3: 1064830.056 ops/s
Iteration   4: 1065981.318 ops/s
Iteration   5: 1064367.779 ops/s
Iteration   6: 1061867.044 ops/s
Iteration   7: 1065188.941 ops/s
Iteration   8: 1065503.230 ops/s
Iteration   9: 1064833.488 ops/s
Iteration  10: 1065616.969 ops/s
Iteration  11: 1066274.236 ops/s
Iteration  12: 1064663.025 ops/s
Iteration  13: 1061686.217 ops/s
Iteration  14: 1063978.546 ops/s
Iteration  15: 1064961.882 ops/s
Iteration  16: 1064649.167 ops/s
Iteration  17: 1066198.401 ops/s
Iteration  18: 1065523.522 ops/s
Iteration  19: 1064927.901 ops/s
Iteration  20: 1064835.156 ops/s
Iteration  21: 1065931.577 ops/s
Iteration  22: 1064185.972 ops/s
Iteration  23: 1064382.530 ops/s
Iteration  24: 1064794.637 ops/s
Iteration  25: 1065265.364 ops/s
Iteration  26: 1065117.800 ops/s
Iteration  27: 1065681.251 ops/s
Iteration  28: 1061628.776 ops/s
Iteration  29: 1067101.818 ops/s
Iteration  30: 1065510.865 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_drop_throws":
  1064745.660 ±(99.9%) 879.779 ops/s [Average]
  (min, avg, max) = (1061628.776, 1064745.660, 1067101.818), stdev = 1316.812
  CI (99.9%): [1063865.880, 1065625.439] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score     Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_drop_throws  thrpt   30  1064745.660 ± 879.779  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_each$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_each

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 22497047.094 ops/s
# Warmup Iteration   2: 42762599.774 ops/s
# Warmup Iteration   3: 37953126.282 ops/s
# Warmup Iteration   4: 44441879.082 ops/s
# Warmup Iteration   5: 44770142.387 ops/s
# Warmup Iteration   6: 43015381.945 ops/s
# Warmup Iteration   7: 44816371.132 ops/s
# Warmup Iteration   8: 44705915.463 ops/s
# Warmup Iteration   9: 44607336.902 ops/s
# Warmup Iteration  10: 44660990.293 ops/s
# Warmup Iteration  11: 44759281.986 ops/s
# Warmup Iteration  12: 44645021.467 ops/s
# Warmup Iteration  13: 44583387.704 ops/s
# Warmup Iteration  14: 44480322.922 ops/s
# Warmup Iteration  15: 44727405.972 ops/s
# Warmup Iteration  16: 44604699.990 ops/s
# Warmup Iteration  17: 44624608.705 ops/s
# Warmup Iteration  18: 44680337.739 ops/s
# Warmup Iteration  19: 44574777.245 ops/s
# Warmup Iteration  20: 44666876.563 ops/s
# Warmup Iteration  21: 44721893.531 ops/s
# Warmup Iteration  22: 44644518.183 ops/s
# Warmup Iteration  23: 44397154.833 ops/s
# Warmup Iteration  24: 44544198.556 ops/s
# Warmup Iteration  25: 44416367.830 ops/s
# Warmup Iteration  26: 44660583.208 ops/s
# Warmup Iteration  27: 44739410.516 ops/s
# Warmup Iteration  28: 44676734.368 ops/s
# Warmup Iteration  29: 44840360.113 ops/s
# Warmup Iteration  30: 44674833.945 ops/s
Iteration   1: 44640063.466 ops/s
Iteration   2: 44747499.185 ops/s
Iteration   3: 44915015.608 ops/s
Iteration   4: 44704887.383 ops/s
Iteration   5: 44367384.075 ops/s
Iteration   6: 44575793.192 ops/s
Iteration   7: 44625313.141 ops/s
Iteration   8: 44751920.397 ops/s
Iteration   9: 44675416.897 ops/s
Iteration  10: 44587882.605 ops/s
Iteration  11: 44478469.953 ops/s
Iteration  12: 44786374.234 ops/s
Iteration  13: 44789657.594 ops/s
Iteration  14: 44561826.918 ops/s
Iteration  15: 44654413.270 ops/s
Iteration  16: 44785779.298 ops/s
Iteration  17: 44693620.765 ops/s
Iteration  18: 44553325.342 ops/s
Iteration  19: 44745462.678 ops/s
Iteration  20: 44802773.196 ops/s
Iteration  21: 44592576.129 ops/s
Iteration  22: 44574076.087 ops/s
Iteration  23: 44681143.025 ops/s
Iteration  24: 44647899.242 ops/s
Iteration  25: 44636314.786 ops/s
Iteration  26: 44646663.105 ops/s
Iteration  27: 44706613.819 ops/s
Iteration  28: 44732301.982 ops/s
Iteration  29: 44745514.579 ops/s
Iteration  30: 44654810.115 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_each":
  44668693.069 ±(99.9%) 72348.758 ops/s [Average]
  (min, avg, max) = (44367384.075, 44668693.069, 44915015.608), stdev = 108288.223
  CI (99.9%): [44596344.311, 44741041.826] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score       Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_each  thrpt   30  44668693.069 ± 72348.758  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_equalsAndHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_equalsAndHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 43104.723 ops/s
# Warmup Iteration   2: 65917.848 ops/s
# Warmup Iteration   3: 88695.563 ops/s
# Warmup Iteration   4: 87823.627 ops/s
# Warmup Iteration   5: 88360.227 ops/s
# Warmup Iteration   6: 88275.550 ops/s
# Warmup Iteration   7: 88524.618 ops/s
# Warmup Iteration   8: 74938.742 ops/s
# Warmup Iteration   9: 88717.739 ops/s
# Warmup Iteration  10: 88795.744 ops/s
# Warmup Iteration  11: 88600.175 ops/s
# Warmup Iteration  12: 88612.390 ops/s
# Warmup Iteration  13: 88537.416 ops/s
# Warmup Iteration  14: 88484.705 ops/s
# Warmup Iteration  15: 88610.807 ops/s
# Warmup Iteration  16: 88252.095 ops/s
# Warmup Iteration  17: 88878.817 ops/s
# Warmup Iteration  18: 88501.569 ops/s
# Warmup Iteration  19: 88509.092 ops/s
# Warmup Iteration  20: 88862.664 ops/s
# Warmup Iteration  21: 89089.752 ops/s
# Warmup Iteration  22: 88839.370 ops/s
# Warmup Iteration  23: 88504.254 ops/s
# Warmup Iteration  24: 88299.857 ops/s
# Warmup Iteration  25: 88432.833 ops/s
# Warmup Iteration  26: 88774.820 ops/s
# Warmup Iteration  27: 88711.920 ops/s
# Warmup Iteration  28: 88775.603 ops/s
# Warmup Iteration  29: 88737.816 ops/s
# Warmup Iteration  30: 88586.796 ops/s
Iteration   1: 88936.602 ops/s
Iteration   2: 88656.030 ops/s
Iteration   3: 88290.161 ops/s
Iteration   4: 88521.382 ops/s
Iteration   5: 88909.226 ops/s
Iteration   6: 89023.633 ops/s
Iteration   7: 88991.717 ops/s
Iteration   8: 88884.569 ops/s
Iteration   9: 88982.169 ops/s
Iteration  10: 88693.649 ops/s
Iteration  11: 88645.781 ops/s
Iteration  12: 88650.614 ops/s
Iteration  13: 88518.351 ops/s
Iteration  14: 88684.635 ops/s
Iteration  15: 88417.765 ops/s
Iteration  16: 88373.128 ops/s
Iteration  17: 88442.863 ops/s
Iteration  18: 88266.270 ops/s
Iteration  19: 88852.165 ops/s
Iteration  20: 88767.862 ops/s
Iteration  21: 89054.951 ops/s
Iteration  22: 88659.899 ops/s
Iteration  23: 88388.858 ops/s
Iteration  24: 88453.384 ops/s
Iteration  25: 88231.498 ops/s
Iteration  26: 88222.748 ops/s
Iteration  27: 88152.891 ops/s
Iteration  28: 88537.838 ops/s
Iteration  29: 88575.407 ops/s
Iteration  30: 88431.607 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_equalsAndHashCode":
  88607.255 ±(99.9%) 175.449 ops/s [Average]
  (min, avg, max) = (88152.891, 88607.255, 89054.951), stdev = 262.604
  CI (99.9%): [88431.806, 88782.704] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt      Score     Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_equalsAndHashCode  thrpt   30  88607.255 ± 175.449  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_flatCollect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_flatCollect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2931864.424 ops/s
# Warmup Iteration   2: 6848826.752 ops/s
# Warmup Iteration   3: 6914252.267 ops/s
# Warmup Iteration   4: 5743467.607 ops/s
# Warmup Iteration   5: 6917092.456 ops/s
# Warmup Iteration   6: 6928550.096 ops/s
# Warmup Iteration   7: 6913400.170 ops/s
# Warmup Iteration   8: 6896233.130 ops/s
# Warmup Iteration   9: 6906125.347 ops/s
# Warmup Iteration  10: 6918645.643 ops/s
# Warmup Iteration  11: 6921268.421 ops/s
# Warmup Iteration  12: 6911020.747 ops/s
# Warmup Iteration  13: 6896266.243 ops/s
# Warmup Iteration  14: 6913951.734 ops/s
# Warmup Iteration  15: 6922451.585 ops/s
# Warmup Iteration  16: 6921624.676 ops/s
# Warmup Iteration  17: 6878940.426 ops/s
# Warmup Iteration  18: 6889161.640 ops/s
# Warmup Iteration  19: 6896181.063 ops/s
# Warmup Iteration  20: 6895524.192 ops/s
# Warmup Iteration  21: 6884491.074 ops/s
# Warmup Iteration  22: 6890187.079 ops/s
# Warmup Iteration  23: 6881609.593 ops/s
# Warmup Iteration  24: 6887295.082 ops/s
# Warmup Iteration  25: 6885959.689 ops/s
# Warmup Iteration  26: 6889267.745 ops/s
# Warmup Iteration  27: 6873871.182 ops/s
# Warmup Iteration  28: 6880186.247 ops/s
# Warmup Iteration  29: 6891588.643 ops/s
# Warmup Iteration  30: 6896304.081 ops/s
Iteration   1: 6893084.437 ops/s
Iteration   2: 6865909.014 ops/s
Iteration   3: 6869757.374 ops/s
Iteration   4: 6887467.732 ops/s
Iteration   5: 6897705.169 ops/s
Iteration   6: 6880495.815 ops/s
Iteration   7: 6893289.538 ops/s
Iteration   8: 6676679.292 ops/s
Iteration   9: 6872203.807 ops/s
Iteration  10: 6897384.257 ops/s
Iteration  11: 6903807.715 ops/s
Iteration  12: 6878334.342 ops/s
Iteration  13: 6877190.730 ops/s
Iteration  14: 6902991.217 ops/s
Iteration  15: 6897657.831 ops/s
Iteration  16: 6908378.268 ops/s
Iteration  17: 6889731.489 ops/s
Iteration  18: 6893961.610 ops/s
Iteration  19: 6901671.012 ops/s
Iteration  20: 6899410.996 ops/s
Iteration  21: 6897513.848 ops/s
Iteration  22: 6892830.334 ops/s
Iteration  23: 6912602.331 ops/s
Iteration  24: 6897473.207 ops/s
Iteration  25: 6877233.480 ops/s
Iteration  26: 6895900.227 ops/s
Iteration  27: 6894755.776 ops/s
Iteration  28: 6884553.082 ops/s
Iteration  29: 6881385.104 ops/s
Iteration  30: 6902125.472 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_flatCollect":
  6884116.150 ±(99.9%) 27295.527 ops/s [Average]
  (min, avg, max) = (6676679.292, 6884116.150, 6912602.331), stdev = 40854.662
  CI (99.9%): [6856820.624, 6911411.677] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_flatCollect  thrpt   30  6884116.150 ± 27295.527  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_flatCollectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_flatCollectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2589684.819 ops/s
# Warmup Iteration   2: 5835337.478 ops/s
# Warmup Iteration   3: 6002854.624 ops/s
# Warmup Iteration   4: 5203261.631 ops/s
# Warmup Iteration   5: 5775301.517 ops/s
# Warmup Iteration   6: 5990020.016 ops/s
# Warmup Iteration   7: 6010208.466 ops/s
# Warmup Iteration   8: 6001660.348 ops/s
# Warmup Iteration   9: 6003684.898 ops/s
# Warmup Iteration  10: 6013584.035 ops/s
# Warmup Iteration  11: 6010684.832 ops/s
# Warmup Iteration  12: 6006528.601 ops/s
# Warmup Iteration  13: 6000597.897 ops/s
# Warmup Iteration  14: 6006366.013 ops/s
# Warmup Iteration  15: 6004917.724 ops/s
# Warmup Iteration  16: 6012570.692 ops/s
# Warmup Iteration  17: 6009889.609 ops/s
# Warmup Iteration  18: 6006974.559 ops/s
# Warmup Iteration  19: 6008629.751 ops/s
# Warmup Iteration  20: 6002790.521 ops/s
# Warmup Iteration  21: 6011797.662 ops/s
# Warmup Iteration  22: 6000033.711 ops/s
# Warmup Iteration  23: 6009268.786 ops/s
# Warmup Iteration  24: 6008088.408 ops/s
# Warmup Iteration  25: 6002945.226 ops/s
# Warmup Iteration  26: 6001611.363 ops/s
# Warmup Iteration  27: 6009734.446 ops/s
# Warmup Iteration  28: 6002568.819 ops/s
# Warmup Iteration  29: 6000141.146 ops/s
# Warmup Iteration  30: 6007624.566 ops/s
Iteration   1: 6007595.101 ops/s
Iteration   2: 6011677.985 ops/s
Iteration   3: 6012629.601 ops/s
Iteration   4: 6009096.701 ops/s
Iteration   5: 6011966.116 ops/s
Iteration   6: 6001525.669 ops/s
Iteration   7: 5996012.369 ops/s
Iteration   8: 6003671.448 ops/s
Iteration   9: 6004866.210 ops/s
Iteration  10: 6011897.515 ops/s
Iteration  11: 6000482.963 ops/s
Iteration  12: 6008552.716 ops/s
Iteration  13: 6004198.095 ops/s
Iteration  14: 6009813.206 ops/s
Iteration  15: 6008477.485 ops/s
Iteration  16: 6016285.890 ops/s
Iteration  17: 6001636.890 ops/s
Iteration  18: 6010509.630 ops/s
Iteration  19: 6006952.872 ops/s
Iteration  20: 5971886.742 ops/s
Iteration  21: 6000584.936 ops/s
Iteration  22: 6020572.547 ops/s
Iteration  23: 6011729.095 ops/s
Iteration  24: 5989806.619 ops/s
Iteration  25: 5975742.998 ops/s
Iteration  26: 5976148.638 ops/s
Iteration  27: 6014031.141 ops/s
Iteration  28: 6000546.197 ops/s
Iteration  29: 6006918.532 ops/s
Iteration  30: 5995396.891 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_flatCollectWith":
  6003373.760 ±(99.9%) 7846.366 ops/s [Average]
  (min, avg, max) = (5971886.742, 6003373.760, 6020572.547), stdev = 11744.073
  CI (99.9%): [5995527.394, 6011220.126] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_flatCollectWith  thrpt   30  6003373.760 ± 7846.366  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_flatCollectWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_flatCollectWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4687209.218 ops/s
# Warmup Iteration   2: 10792251.469 ops/s
# Warmup Iteration   3: 10959175.588 ops/s
# Warmup Iteration   4: 9119963.606 ops/s
# Warmup Iteration   5: 10952673.547 ops/s
# Warmup Iteration   6: 10964800.762 ops/s
# Warmup Iteration   7: 10973422.199 ops/s
# Warmup Iteration   8: 10960569.664 ops/s
# Warmup Iteration   9: 10944487.936 ops/s
# Warmup Iteration  10: 10940322.568 ops/s
# Warmup Iteration  11: 10960738.133 ops/s
# Warmup Iteration  12: 10957672.471 ops/s
# Warmup Iteration  13: 10969607.129 ops/s
# Warmup Iteration  14: 10969603.145 ops/s
# Warmup Iteration  15: 10974400.611 ops/s
# Warmup Iteration  16: 10955403.441 ops/s
# Warmup Iteration  17: 10972492.807 ops/s
# Warmup Iteration  18: 10963910.711 ops/s
# Warmup Iteration  19: 10954514.395 ops/s
# Warmup Iteration  20: 10955946.017 ops/s
# Warmup Iteration  21: 10963519.711 ops/s
# Warmup Iteration  22: 10949905.296 ops/s
# Warmup Iteration  23: 10962473.946 ops/s
# Warmup Iteration  24: 10963632.804 ops/s
# Warmup Iteration  25: 10953092.104 ops/s
# Warmup Iteration  26: 10976814.136 ops/s
# Warmup Iteration  27: 10958332.525 ops/s
# Warmup Iteration  28: 10959492.377 ops/s
# Warmup Iteration  29: 10980799.217 ops/s
# Warmup Iteration  30: 10961401.365 ops/s
Iteration   1: 10952665.463 ops/s
Iteration   2: 10946598.989 ops/s
Iteration   3: 10982513.939 ops/s
Iteration   4: 10981858.275 ops/s
Iteration   5: 10959886.251 ops/s
Iteration   6: 10965298.538 ops/s
Iteration   7: 10955903.529 ops/s
Iteration   8: 10983418.699 ops/s
Iteration   9: 10975305.597 ops/s
Iteration  10: 10962763.272 ops/s
Iteration  11: 10958442.918 ops/s
Iteration  12: 10960564.841 ops/s
Iteration  13: 10962334.933 ops/s
Iteration  14: 10955925.494 ops/s
Iteration  15: 10973014.886 ops/s
Iteration  16: 10968813.541 ops/s
Iteration  17: 10951440.134 ops/s
Iteration  18: 10992297.223 ops/s
Iteration  19: 10953110.038 ops/s
Iteration  20: 10934124.279 ops/s
Iteration  21: 10953489.517 ops/s
Iteration  22: 10979949.056 ops/s
Iteration  23: 10977808.837 ops/s
Iteration  24: 10960842.571 ops/s
Iteration  25: 10957082.248 ops/s
Iteration  26: 10949040.911 ops/s
Iteration  27: 10960017.171 ops/s
Iteration  28: 10974779.393 ops/s
Iteration  29: 10966363.756 ops/s
Iteration  30: 10947424.860 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_flatCollectWithTarget":
  10963435.972 ±(99.9%) 8867.192 ops/s [Average]
  (min, avg, max) = (10934124.279, 10963435.972, 10992297.223), stdev = 13271.996
  CI (99.9%): [10954568.780, 10972303.163] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt         Score      Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_flatCollectWithTarget  thrpt   30  10963435.972 ± 8867.192  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 22547077.816 ops/s
# Warmup Iteration   2: 44128976.675 ops/s
# Warmup Iteration   3: 37579697.215 ops/s
# Warmup Iteration   4: 43251424.078 ops/s
# Warmup Iteration   5: 43395408.783 ops/s
# Warmup Iteration   6: 43271442.332 ops/s
# Warmup Iteration   7: 43264737.347 ops/s
# Warmup Iteration   8: 43255848.797 ops/s
# Warmup Iteration   9: 43243407.365 ops/s
# Warmup Iteration  10: 43354009.954 ops/s
# Warmup Iteration  11: 43444050.303 ops/s
# Warmup Iteration  12: 43444268.587 ops/s
# Warmup Iteration  13: 43321396.775 ops/s
# Warmup Iteration  14: 41459430.773 ops/s
# Warmup Iteration  15: 43356394.381 ops/s
# Warmup Iteration  16: 43239435.393 ops/s
# Warmup Iteration  17: 43374539.841 ops/s
# Warmup Iteration  18: 43531328.259 ops/s
# Warmup Iteration  19: 43431298.630 ops/s
# Warmup Iteration  20: 43412248.401 ops/s
# Warmup Iteration  21: 43351732.967 ops/s
# Warmup Iteration  22: 43402958.304 ops/s
# Warmup Iteration  23: 43451905.337 ops/s
# Warmup Iteration  24: 43511219.180 ops/s
# Warmup Iteration  25: 43348163.888 ops/s
# Warmup Iteration  26: 43244175.987 ops/s
# Warmup Iteration  27: 43369893.537 ops/s
# Warmup Iteration  28: 43485543.752 ops/s
# Warmup Iteration  29: 43380167.491 ops/s
# Warmup Iteration  30: 43338260.543 ops/s
Iteration   1: 43342095.903 ops/s
Iteration   2: 43574275.561 ops/s
Iteration   3: 43253021.854 ops/s
Iteration   4: 43396792.820 ops/s
Iteration   5: 43441548.237 ops/s
Iteration   6: 43384621.468 ops/s
Iteration   7: 43531891.944 ops/s
Iteration   8: 43688896.475 ops/s
Iteration   9: 43357153.751 ops/s
Iteration  10: 43437763.575 ops/s
Iteration  11: 43423117.690 ops/s
Iteration  12: 43491117.444 ops/s
Iteration  13: 43270260.303 ops/s
Iteration  14: 43299955.442 ops/s
Iteration  15: 43268977.675 ops/s
Iteration  16: 43489701.580 ops/s
Iteration  17: 43268374.627 ops/s
Iteration  18: 43413116.108 ops/s
Iteration  19: 43414825.062 ops/s
Iteration  20: 43463758.374 ops/s
Iteration  21: 43641485.424 ops/s
Iteration  22: 43604811.299 ops/s
Iteration  23: 43457595.550 ops/s
Iteration  24: 43454146.733 ops/s
Iteration  25: 43406849.844 ops/s
Iteration  26: 43371192.750 ops/s
Iteration  27: 43366346.574 ops/s
Iteration  28: 43481308.250 ops/s
Iteration  29: 43325331.742 ops/s
Iteration  30: 43466796.872 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_forEach":
  43426237.698 ±(99.9%) 73252.172 ops/s [Average]
  (min, avg, max) = (43253021.854, 43426237.698, 43688896.475), stdev = 109640.411
  CI (99.9%): [43352985.526, 43499489.869] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_forEach  thrpt   30  43426237.698 ± 73252.172  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_forEachFromTo$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_forEachFromTo

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 307975.088 ops/s
# Warmup Iteration   2: 329962.276 ops/s
# Warmup Iteration   3: 388328.543 ops/s
# Warmup Iteration   4: 408667.981 ops/s
# Warmup Iteration   5: 408882.755 ops/s
# Warmup Iteration   6: 407421.001 ops/s
# Warmup Iteration   7: 412230.669 ops/s
# Warmup Iteration   8: 411437.848 ops/s
# Warmup Iteration   9: 412155.673 ops/s
# Warmup Iteration  10: 411924.826 ops/s
# Warmup Iteration  11: 412385.861 ops/s
# Warmup Iteration  12: 412012.451 ops/s
# Warmup Iteration  13: 400716.708 ops/s
# Warmup Iteration  14: 358891.935 ops/s
# Warmup Iteration  15: 411056.253 ops/s
# Warmup Iteration  16: 412792.379 ops/s
# Warmup Iteration  17: 435889.885 ops/s
# Warmup Iteration  18: 435872.991 ops/s
# Warmup Iteration  19: 434916.390 ops/s
# Warmup Iteration  20: 433373.362 ops/s
# Warmup Iteration  21: 432879.960 ops/s
# Warmup Iteration  22: 436500.977 ops/s
# Warmup Iteration  23: 436084.342 ops/s
# Warmup Iteration  24: 435033.556 ops/s
# Warmup Iteration  25: 434821.095 ops/s
# Warmup Iteration  26: 436327.850 ops/s
# Warmup Iteration  27: 435546.823 ops/s
# Warmup Iteration  28: 436069.388 ops/s
# Warmup Iteration  29: 431106.096 ops/s
# Warmup Iteration  30: 431486.036 ops/s
Iteration   1: 434308.714 ops/s
Iteration   2: 436064.479 ops/s
Iteration   3: 436321.690 ops/s
Iteration   4: 433905.711 ops/s
Iteration   5: 436612.778 ops/s
Iteration   6: 435486.403 ops/s
Iteration   7: 435048.604 ops/s
Iteration   8: 436825.826 ops/s
Iteration   9: 433861.695 ops/s
Iteration  10: 435025.996 ops/s
Iteration  11: 435498.166 ops/s
Iteration  12: 435721.472 ops/s
Iteration  13: 435141.524 ops/s
Iteration  14: 436623.921 ops/s
Iteration  15: 436566.706 ops/s
Iteration  16: 434777.472 ops/s
Iteration  17: 435111.405 ops/s
Iteration  18: 434390.585 ops/s
Iteration  19: 435523.390 ops/s
Iteration  20: 435523.483 ops/s
Iteration  21: 435403.186 ops/s
Iteration  22: 434838.035 ops/s
Iteration  23: 435734.138 ops/s
Iteration  24: 435703.705 ops/s
Iteration  25: 435570.625 ops/s
Iteration  26: 435843.507 ops/s
Iteration  27: 434465.648 ops/s
Iteration  28: 436352.268 ops/s
Iteration  29: 435120.317 ops/s
Iteration  30: 435980.554 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_forEachFromTo":
  435445.067 ±(99.9%) 530.657 ops/s [Average]
  (min, avg, max) = (433861.695, 435445.067, 436825.826), stdev = 794.263
  CI (99.9%): [434914.410, 435975.724] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score     Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_forEachFromTo  thrpt   30  435445.067 ± 530.657  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_forEachWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_forEachWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 21938120.078 ops/s
# Warmup Iteration   2: 41363866.700 ops/s
# Warmup Iteration   3: 35473254.112 ops/s
# Warmup Iteration   4: 41514645.244 ops/s
# Warmup Iteration   5: 41452500.544 ops/s
# Warmup Iteration   6: 41494210.380 ops/s
# Warmup Iteration   7: 41511579.955 ops/s
# Warmup Iteration   8: 41570076.253 ops/s
# Warmup Iteration   9: 41607028.269 ops/s
# Warmup Iteration  10: 41517085.057 ops/s
# Warmup Iteration  11: 41604458.770 ops/s
# Warmup Iteration  12: 41448710.625 ops/s
# Warmup Iteration  13: 41496785.377 ops/s
# Warmup Iteration  14: 41456478.465 ops/s
# Warmup Iteration  15: 41240863.461 ops/s
# Warmup Iteration  16: 41261646.640 ops/s
# Warmup Iteration  17: 41498755.294 ops/s
# Warmup Iteration  18: 41435271.502 ops/s
# Warmup Iteration  19: 41552934.924 ops/s
# Warmup Iteration  20: 41500022.914 ops/s
# Warmup Iteration  21: 41529518.182 ops/s
# Warmup Iteration  22: 41475210.559 ops/s
# Warmup Iteration  23: 41488847.649 ops/s
# Warmup Iteration  24: 41613239.848 ops/s
# Warmup Iteration  25: 41577196.115 ops/s
# Warmup Iteration  26: 41473518.466 ops/s
# Warmup Iteration  27: 41414366.662 ops/s
# Warmup Iteration  28: 41481181.667 ops/s
# Warmup Iteration  29: 41531962.319 ops/s
# Warmup Iteration  30: 41548652.551 ops/s
Iteration   1: 41497383.670 ops/s
Iteration   2: 41389398.007 ops/s
Iteration   3: 41475207.063 ops/s
Iteration   4: 41535493.497 ops/s
Iteration   5: 41510401.385 ops/s
Iteration   6: 41448779.028 ops/s
Iteration   7: 41352229.891 ops/s
Iteration   8: 41465924.787 ops/s
Iteration   9: 41618183.273 ops/s
Iteration  10: 41190067.641 ops/s
Iteration  11: 41497992.872 ops/s
Iteration  12: 41314598.873 ops/s
Iteration  13: 41464989.491 ops/s
Iteration  14: 41383953.058 ops/s
Iteration  15: 41586363.232 ops/s
Iteration  16: 41478700.603 ops/s
Iteration  17: 41275247.204 ops/s
Iteration  18: 41575575.353 ops/s
Iteration  19: 41521848.861 ops/s
Iteration  20: 41522476.166 ops/s
Iteration  21: 41409409.824 ops/s
Iteration  22: 41522741.835 ops/s
Iteration  23: 41343934.595 ops/s
Iteration  24: 41572185.052 ops/s
Iteration  25: 41491471.844 ops/s
Iteration  26: 41499485.764 ops/s
Iteration  27: 41555070.151 ops/s
Iteration  28: 41468249.910 ops/s
Iteration  29: 41510647.517 ops/s
Iteration  30: 41564044.342 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_forEachWith":
  41468068.493 ±(99.9%) 65659.809 ops/s [Average]
  (min, avg, max) = (41190067.641, 41468068.493, 41618183.273), stdev = 98276.519
  CI (99.9%): [41402408.684, 41533728.302] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_forEachWith  thrpt   30  41468068.493 ± 65659.809  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_forEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_forEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 16830008.447 ops/s
# Warmup Iteration   2: 32299225.581 ops/s
# Warmup Iteration   3: 27436183.679 ops/s
# Warmup Iteration   4: 32929857.204 ops/s
# Warmup Iteration   5: 32939168.486 ops/s
# Warmup Iteration   6: 32911281.378 ops/s
# Warmup Iteration   7: 32912412.675 ops/s
# Warmup Iteration   8: 33005587.256 ops/s
# Warmup Iteration   9: 32946821.930 ops/s
# Warmup Iteration  10: 32983391.804 ops/s
# Warmup Iteration  11: 32946924.320 ops/s
# Warmup Iteration  12: 32943555.720 ops/s
# Warmup Iteration  13: 32978975.544 ops/s
# Warmup Iteration  14: 33017885.461 ops/s
# Warmup Iteration  15: 32981621.697 ops/s
# Warmup Iteration  16: 32774367.002 ops/s
# Warmup Iteration  17: 32934375.970 ops/s
# Warmup Iteration  18: 32989454.214 ops/s
# Warmup Iteration  19: 32992218.105 ops/s
# Warmup Iteration  20: 32967570.899 ops/s
# Warmup Iteration  21: 32893320.913 ops/s
# Warmup Iteration  22: 32993734.516 ops/s
# Warmup Iteration  23: 32972854.223 ops/s
# Warmup Iteration  24: 32870924.197 ops/s
# Warmup Iteration  25: 32740596.194 ops/s
# Warmup Iteration  26: 33013571.160 ops/s
# Warmup Iteration  27: 33012929.706 ops/s
# Warmup Iteration  28: 33036041.145 ops/s
# Warmup Iteration  29: 32997402.376 ops/s
# Warmup Iteration  30: 32934957.894 ops/s
Iteration   1: 32906968.256 ops/s
Iteration   2: 32792969.789 ops/s
Iteration   3: 32787721.291 ops/s
Iteration   4: 32966154.274 ops/s
Iteration   5: 33015155.053 ops/s
Iteration   6: 32969898.503 ops/s
Iteration   7: 33098668.307 ops/s
Iteration   8: 33111428.945 ops/s
Iteration   9: 32936684.340 ops/s
Iteration  10: 32770951.083 ops/s
Iteration  11: 32984802.462 ops/s
Iteration  12: 32724107.862 ops/s
Iteration  13: 32769829.875 ops/s
Iteration  14: 33071078.387 ops/s
Iteration  15: 32968927.322 ops/s
Iteration  16: 32917376.810 ops/s
Iteration  17: 32934224.836 ops/s
Iteration  18: 32967134.982 ops/s
Iteration  19: 33008499.406 ops/s
Iteration  20: 33012191.403 ops/s
Iteration  21: 32913639.852 ops/s
Iteration  22: 32987277.760 ops/s
Iteration  23: 33056618.164 ops/s
Iteration  24: 32919676.096 ops/s
Iteration  25: 33066369.430 ops/s
Iteration  26: 32966730.056 ops/s
Iteration  27: 32818297.274 ops/s
Iteration  28: 32917136.969 ops/s
Iteration  29: 32912210.153 ops/s
Iteration  30: 32861595.319 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_forEachWithIndex":
  32937810.809 ±(99.9%) 67816.368 ops/s [Average]
  (min, avg, max) = (32724107.862, 32937810.809, 33111428.945), stdev = 101504.355
  CI (99.9%): [32869994.440, 33005627.177] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_forEachWithIndex  thrpt   30  32937810.809 ± 67816.368  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_forEachWithIndexFromTo$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_forEachWithIndexFromTo

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 304062.711 ops/s
# Warmup Iteration   2: 324578.390 ops/s
# Warmup Iteration   3: 390642.872 ops/s
# Warmup Iteration   4: 412730.252 ops/s
# Warmup Iteration   5: 412326.738 ops/s
# Warmup Iteration   6: 409922.555 ops/s
# Warmup Iteration   7: 411248.396 ops/s
# Warmup Iteration   8: 410756.921 ops/s
# Warmup Iteration   9: 411783.202 ops/s
# Warmup Iteration  10: 412204.876 ops/s
# Warmup Iteration  11: 411827.431 ops/s
# Warmup Iteration  12: 413167.821 ops/s
# Warmup Iteration  13: 379784.934 ops/s
# Warmup Iteration  14: 383997.958 ops/s
# Warmup Iteration  15: 412726.591 ops/s
# Warmup Iteration  16: 412615.388 ops/s
# Warmup Iteration  17: 435910.528 ops/s
# Warmup Iteration  18: 433574.806 ops/s
# Warmup Iteration  19: 434676.598 ops/s
# Warmup Iteration  20: 434677.859 ops/s
# Warmup Iteration  21: 435547.764 ops/s
# Warmup Iteration  22: 435499.205 ops/s
# Warmup Iteration  23: 435470.528 ops/s
# Warmup Iteration  24: 433766.049 ops/s
# Warmup Iteration  25: 434101.596 ops/s
# Warmup Iteration  26: 433449.105 ops/s
# Warmup Iteration  27: 435130.287 ops/s
# Warmup Iteration  28: 436432.510 ops/s
# Warmup Iteration  29: 435858.446 ops/s
# Warmup Iteration  30: 435444.641 ops/s
Iteration   1: 435438.439 ops/s
Iteration   2: 435711.036 ops/s
Iteration   3: 434388.530 ops/s
Iteration   4: 434561.630 ops/s
Iteration   5: 435295.433 ops/s
Iteration   6: 433807.664 ops/s
Iteration   7: 434358.744 ops/s
Iteration   8: 433631.491 ops/s
Iteration   9: 434664.101 ops/s
Iteration  10: 435222.944 ops/s
Iteration  11: 433697.963 ops/s
Iteration  12: 435608.349 ops/s
Iteration  13: 434668.267 ops/s
Iteration  14: 435228.987 ops/s
Iteration  15: 433890.501 ops/s
Iteration  16: 434873.805 ops/s
Iteration  17: 434623.386 ops/s
Iteration  18: 435330.682 ops/s
Iteration  19: 434905.327 ops/s
Iteration  20: 434517.015 ops/s
Iteration  21: 435682.702 ops/s
Iteration  22: 434757.735 ops/s
Iteration  23: 436065.858 ops/s
Iteration  24: 435253.548 ops/s
Iteration  25: 433761.081 ops/s
Iteration  26: 435355.262 ops/s
Iteration  27: 435151.384 ops/s
Iteration  28: 435594.644 ops/s
Iteration  29: 435315.186 ops/s
Iteration  30: 435440.669 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_forEachWithIndexFromTo":
  434893.412 ±(99.9%) 445.653 ops/s [Average]
  (min, avg, max) = (433631.491, 434893.412, 436065.858), stdev = 667.033
  CI (99.9%): [434447.759, 435339.065] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score     Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_forEachWithIndexFromTo  thrpt   30  434893.412 ± 445.653  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_forLoop$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_forLoop

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 56014271.100 ops/s
# Warmup Iteration   2: 118745729.262 ops/s
# Warmup Iteration   3: 112886904.492 ops/s
# Warmup Iteration   4: 133653474.021 ops/s
# Warmup Iteration   5: 133494590.048 ops/s
# Warmup Iteration   6: 133643898.663 ops/s
# Warmup Iteration   7: 133360636.294 ops/s
# Warmup Iteration   8: 133461442.590 ops/s
# Warmup Iteration   9: 133436996.688 ops/s
# Warmup Iteration  10: 133244184.424 ops/s
# Warmup Iteration  11: 133510450.790 ops/s
# Warmup Iteration  12: 133316387.860 ops/s
# Warmup Iteration  13: 133122533.092 ops/s
# Warmup Iteration  14: 133254281.436 ops/s
# Warmup Iteration  15: 133502280.736 ops/s
# Warmup Iteration  16: 133721667.182 ops/s
# Warmup Iteration  17: 130219326.407 ops/s
# Warmup Iteration  18: 130264164.424 ops/s
# Warmup Iteration  19: 129619735.674 ops/s
# Warmup Iteration  20: 129900226.456 ops/s
# Warmup Iteration  21: 130159513.625 ops/s
# Warmup Iteration  22: 130626091.776 ops/s
# Warmup Iteration  23: 130125596.889 ops/s
# Warmup Iteration  24: 130381689.151 ops/s
# Warmup Iteration  25: 130316099.147 ops/s
# Warmup Iteration  26: 130348672.100 ops/s
# Warmup Iteration  27: 130443821.001 ops/s
# Warmup Iteration  28: 129706477.900 ops/s
# Warmup Iteration  29: 130040498.449 ops/s
# Warmup Iteration  30: 130164953.189 ops/s
Iteration   1: 130085599.499 ops/s
Iteration   2: 130753649.703 ops/s
Iteration   3: 130399875.992 ops/s
Iteration   4: 130280397.999 ops/s
Iteration   5: 130487991.660 ops/s
Iteration   6: 130473708.544 ops/s
Iteration   7: 130435143.842 ops/s
Iteration   8: 130466922.454 ops/s
Iteration   9: 130193486.912 ops/s
Iteration  10: 130046463.442 ops/s
Iteration  11: 130352821.004 ops/s
Iteration  12: 130421437.359 ops/s
Iteration  13: 130235537.411 ops/s
Iteration  14: 130502703.231 ops/s
Iteration  15: 130231053.038 ops/s
Iteration  16: 129815410.009 ops/s
Iteration  17: 130291151.446 ops/s
Iteration  18: 130385542.771 ops/s
Iteration  19: 130699650.522 ops/s
Iteration  20: 130110656.997 ops/s
Iteration  21: 129911831.272 ops/s
Iteration  22: 129385539.225 ops/s
Iteration  23: 130177385.064 ops/s
Iteration  24: 129848440.464 ops/s
Iteration  25: 130447091.697 ops/s
Iteration  26: 130457568.126 ops/s
Iteration  27: 130712091.486 ops/s
Iteration  28: 130522410.166 ops/s
Iteration  29: 130592000.838 ops/s
Iteration  30: 129946239.484 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_forLoop":
  130288993.389 ±(99.9%) 201318.995 ops/s [Average]
  (min, avg, max) = (129385539.225, 130288993.389, 130753649.703), stdev = 301324.817
  CI (99.9%): [130087674.394, 130490312.384] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt          Score        Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_forLoop  thrpt   30  130288993.389 ± 201318.995  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_get$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_get

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 371142.265 ops/s
# Warmup Iteration   2: 382012.501 ops/s
# Warmup Iteration   3: 456535.290 ops/s
# Warmup Iteration   4: 474190.225 ops/s
# Warmup Iteration   5: 476470.384 ops/s
# Warmup Iteration   6: 474039.122 ops/s
# Warmup Iteration   7: 477270.712 ops/s
# Warmup Iteration   8: 477695.543 ops/s
# Warmup Iteration   9: 478642.607 ops/s
# Warmup Iteration  10: 476143.600 ops/s
# Warmup Iteration  11: 475568.336 ops/s
# Warmup Iteration  12: 475318.978 ops/s
# Warmup Iteration  13: 455074.919 ops/s
# Warmup Iteration  14: 429426.478 ops/s
# Warmup Iteration  15: 475240.253 ops/s
# Warmup Iteration  16: 475299.779 ops/s
# Warmup Iteration  17: 505750.285 ops/s
# Warmup Iteration  18: 504856.000 ops/s
# Warmup Iteration  19: 503252.926 ops/s
# Warmup Iteration  20: 505057.018 ops/s
# Warmup Iteration  21: 504001.269 ops/s
# Warmup Iteration  22: 503320.789 ops/s
# Warmup Iteration  23: 503435.159 ops/s
# Warmup Iteration  24: 503398.422 ops/s
# Warmup Iteration  25: 502872.108 ops/s
# Warmup Iteration  26: 503634.439 ops/s
# Warmup Iteration  27: 503508.787 ops/s
# Warmup Iteration  28: 504327.918 ops/s
# Warmup Iteration  29: 504123.900 ops/s
# Warmup Iteration  30: 503470.156 ops/s
Iteration   1: 502680.981 ops/s
Iteration   2: 502225.934 ops/s
Iteration   3: 503254.987 ops/s
Iteration   4: 503099.633 ops/s
Iteration   5: 500543.697 ops/s
Iteration   6: 501067.897 ops/s
Iteration   7: 504522.903 ops/s
Iteration   8: 502426.959 ops/s
Iteration   9: 502430.565 ops/s
Iteration  10: 502814.129 ops/s
Iteration  11: 503275.822 ops/s
Iteration  12: 503447.571 ops/s
Iteration  13: 503752.365 ops/s
Iteration  14: 503954.739 ops/s
Iteration  15: 504016.910 ops/s
Iteration  16: 503009.846 ops/s
Iteration  17: 502070.374 ops/s
Iteration  18: 504977.454 ops/s
Iteration  19: 500853.964 ops/s
Iteration  20: 501428.230 ops/s
Iteration  21: 501005.251 ops/s
Iteration  22: 502745.160 ops/s
Iteration  23: 502146.632 ops/s
Iteration  24: 502443.677 ops/s
Iteration  25: 502233.429 ops/s
Iteration  26: 503513.454 ops/s
Iteration  27: 505216.908 ops/s
Iteration  28: 505022.143 ops/s
Iteration  29: 505044.703 ops/s
Iteration  30: 505459.103 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_get":
  503022.847 ±(99.9%) 906.072 ops/s [Average]
  (min, avg, max) = (500543.697, 503022.847, 505459.103), stdev = 1356.167
  CI (99.9%): [502116.775, 503928.920] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score     Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_get  thrpt   30  503022.847 ± 906.072  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_getFirst$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_getFirst

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 54796648.441 ops/s
# Warmup Iteration   2: 106658888.437 ops/s
# Warmup Iteration   3: 101900864.300 ops/s
# Warmup Iteration   4: 120122912.321 ops/s
# Warmup Iteration   5: 119829806.151 ops/s
# Warmup Iteration   6: 119869247.301 ops/s
# Warmup Iteration   7: 120383962.510 ops/s
# Warmup Iteration   8: 119849199.439 ops/s
# Warmup Iteration   9: 119980843.156 ops/s
# Warmup Iteration  10: 119985363.994 ops/s
# Warmup Iteration  11: 119631056.345 ops/s
# Warmup Iteration  12: 119848929.342 ops/s
# Warmup Iteration  13: 119597725.900 ops/s
# Warmup Iteration  14: 119452551.112 ops/s
# Warmup Iteration  15: 119334984.452 ops/s
# Warmup Iteration  16: 119466018.545 ops/s
# Warmup Iteration  17: 119176236.799 ops/s
# Warmup Iteration  18: 119485979.206 ops/s
# Warmup Iteration  19: 119438462.652 ops/s
# Warmup Iteration  20: 119662561.579 ops/s
# Warmup Iteration  21: 119353961.544 ops/s
# Warmup Iteration  22: 119236213.143 ops/s
# Warmup Iteration  23: 119706359.067 ops/s
# Warmup Iteration  24: 119534552.096 ops/s
# Warmup Iteration  25: 119988085.024 ops/s
# Warmup Iteration  26: 119689689.344 ops/s
# Warmup Iteration  27: 119773358.162 ops/s
# Warmup Iteration  28: 119611849.176 ops/s
# Warmup Iteration  29: 119769542.423 ops/s
# Warmup Iteration  30: 119719820.046 ops/s
Iteration   1: 119554811.357 ops/s
Iteration   2: 119979837.425 ops/s
Iteration   3: 120269004.694 ops/s
Iteration   4: 119719729.974 ops/s
Iteration   5: 119789676.657 ops/s
Iteration   6: 120402185.010 ops/s
Iteration   7: 120116417.522 ops/s
Iteration   8: 120012612.638 ops/s
Iteration   9: 119976828.524 ops/s
Iteration  10: 120150614.164 ops/s
Iteration  11: 119821010.992 ops/s
Iteration  12: 119934525.439 ops/s
Iteration  13: 119769141.606 ops/s
Iteration  14: 120350397.126 ops/s
Iteration  15: 119780667.257 ops/s
Iteration  16: 119645914.009 ops/s
Iteration  17: 119367095.431 ops/s
Iteration  18: 119319514.699 ops/s
Iteration  19: 119397229.767 ops/s
Iteration  20: 119440982.047 ops/s
Iteration  21: 119691636.469 ops/s
Iteration  22: 119857884.889 ops/s
Iteration  23: 119542165.523 ops/s
Iteration  24: 119542501.777 ops/s
Iteration  25: 119074290.393 ops/s
Iteration  26: 119435531.188 ops/s
Iteration  27: 119421084.710 ops/s
Iteration  28: 119226726.157 ops/s
Iteration  29: 119297948.232 ops/s
Iteration  30: 119252530.612 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_getFirst":
  119704683.209 ±(99.9%) 235262.476 ops/s [Average]
  (min, avg, max) = (119074290.393, 119704683.209, 120402185.010), stdev = 352129.825
  CI (99.9%): [119469420.734, 119939945.685] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt          Score        Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_getFirst  thrpt   30  119704683.209 ± 235262.476  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_getLast$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_getLast

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 54674764.575 ops/s
# Warmup Iteration   2: 107128673.154 ops/s
# Warmup Iteration   3: 104852556.763 ops/s
# Warmup Iteration   4: 123797170.835 ops/s
# Warmup Iteration   5: 122962341.527 ops/s
# Warmup Iteration   6: 123694772.411 ops/s
# Warmup Iteration   7: 123965035.618 ops/s
# Warmup Iteration   8: 123863082.504 ops/s
# Warmup Iteration   9: 123785859.344 ops/s
# Warmup Iteration  10: 123315410.846 ops/s
# Warmup Iteration  11: 123534836.972 ops/s
# Warmup Iteration  12: 123108786.110 ops/s
# Warmup Iteration  13: 124541496.693 ops/s
# Warmup Iteration  14: 122343307.407 ops/s
# Warmup Iteration  15: 124136779.657 ops/s
# Warmup Iteration  16: 123263878.679 ops/s
# Warmup Iteration  17: 123396522.457 ops/s
# Warmup Iteration  18: 123464059.861 ops/s
# Warmup Iteration  19: 123259201.235 ops/s
# Warmup Iteration  20: 123107483.223 ops/s
# Warmup Iteration  21: 123251440.095 ops/s
# Warmup Iteration  22: 123544649.481 ops/s
# Warmup Iteration  23: 123635666.449 ops/s
# Warmup Iteration  24: 123460989.304 ops/s
# Warmup Iteration  25: 123696149.690 ops/s
# Warmup Iteration  26: 123888768.327 ops/s
# Warmup Iteration  27: 123343973.174 ops/s
# Warmup Iteration  28: 123601441.872 ops/s
# Warmup Iteration  29: 123027369.430 ops/s
# Warmup Iteration  30: 123243427.049 ops/s
Iteration   1: 124051941.523 ops/s
Iteration   2: 122380235.722 ops/s
Iteration   3: 122733599.071 ops/s
Iteration   4: 123114427.395 ops/s
Iteration   5: 122715318.242 ops/s
Iteration   6: 123802564.681 ops/s
Iteration   7: 123693307.240 ops/s
Iteration   8: 123963833.404 ops/s
Iteration   9: 109001614.564 ops/s
Iteration  10: 123574435.739 ops/s
Iteration  11: 123409974.497 ops/s
Iteration  12: 123938290.878 ops/s
Iteration  13: 123969126.262 ops/s
Iteration  14: 123796464.868 ops/s
Iteration  15: 123052015.625 ops/s
Iteration  16: 122698234.048 ops/s
Iteration  17: 122866356.173 ops/s
Iteration  18: 123260579.717 ops/s
Iteration  19: 123640633.542 ops/s
Iteration  20: 122984198.700 ops/s
Iteration  21: 122871343.175 ops/s
Iteration  22: 123120155.377 ops/s
Iteration  23: 123612161.202 ops/s
Iteration  24: 122992627.004 ops/s
Iteration  25: 123461994.237 ops/s
Iteration  26: 121023009.102 ops/s
Iteration  27: 121847167.987 ops/s
Iteration  28: 123144131.756 ops/s
Iteration  29: 123454138.300 ops/s
Iteration  30: 122898569.648 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_getLast":
  122702414.989 ±(99.9%) 1783454.911 ops/s [Average]
  (min, avg, max) = (109001614.564, 122702414.989, 124051941.523), stdev = 2669391.553
  CI (99.9%): [120918960.079, 124485869.900] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt          Score         Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_getLast  thrpt   30  122702414.989 ± 1783454.911  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_getOnly$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_getOnly

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 164774181.353 ops/s
# Warmup Iteration   2: 302168004.897 ops/s
# Warmup Iteration   3: 270983654.479 ops/s
# Warmup Iteration   4: 312886940.947 ops/s
# Warmup Iteration   5: 310771123.321 ops/s
# Warmup Iteration   6: 311540778.375 ops/s
# Warmup Iteration   7: 309614686.674 ops/s
# Warmup Iteration   8: 309291132.595 ops/s
# Warmup Iteration   9: 310699477.687 ops/s
# Warmup Iteration  10: 311817965.284 ops/s
# Warmup Iteration  11: 311315336.142 ops/s
# Warmup Iteration  12: 311927131.400 ops/s
# Warmup Iteration  13: 312255320.101 ops/s
# Warmup Iteration  14: 310929239.974 ops/s
# Warmup Iteration  15: 310622247.010 ops/s
# Warmup Iteration  16: 310998033.365 ops/s
# Warmup Iteration  17: 310463577.527 ops/s
# Warmup Iteration  18: 308510527.884 ops/s
# Warmup Iteration  19: 311151466.854 ops/s
# Warmup Iteration  20: 310891587.948 ops/s
# Warmup Iteration  21: 312829117.968 ops/s
# Warmup Iteration  22: 309508706.658 ops/s
# Warmup Iteration  23: 308686805.388 ops/s
# Warmup Iteration  24: 310078768.600 ops/s
# Warmup Iteration  25: 310283568.251 ops/s
# Warmup Iteration  26: 310930276.535 ops/s
# Warmup Iteration  27: 310419993.574 ops/s
# Warmup Iteration  28: 309680716.867 ops/s
# Warmup Iteration  29: 311239451.283 ops/s
# Warmup Iteration  30: 312239173.758 ops/s
Iteration   1: 311512281.694 ops/s
Iteration   2: 311169352.078 ops/s
Iteration   3: 310746723.722 ops/s
Iteration   4: 310590460.447 ops/s
Iteration   5: 311867909.945 ops/s
Iteration   6: 310168516.492 ops/s
Iteration   7: 311776255.976 ops/s
Iteration   8: 311949691.869 ops/s
Iteration   9: 311180883.734 ops/s
Iteration  10: 312113140.732 ops/s
Iteration  11: 311020442.923 ops/s
Iteration  12: 311848709.771 ops/s
Iteration  13: 311269921.937 ops/s
Iteration  14: 310437321.194 ops/s
Iteration  15: 310997002.028 ops/s
Iteration  16: 310836924.458 ops/s
Iteration  17: 311332029.024 ops/s
Iteration  18: 312029178.714 ops/s
Iteration  19: 311311660.433 ops/s
Iteration  20: 310913245.769 ops/s
Iteration  21: 310718967.307 ops/s
Iteration  22: 309713836.617 ops/s
Iteration  23: 309989324.015 ops/s
Iteration  24: 311399137.156 ops/s
Iteration  25: 311534540.341 ops/s
Iteration  26: 311151196.500 ops/s
Iteration  27: 311567810.353 ops/s
Iteration  28: 311110683.192 ops/s
Iteration  29: 310031473.903 ops/s
Iteration  30: 311077528.246 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_getOnly":
  311112205.019 ±(99.9%) 416652.902 ops/s [Average]
  (min, avg, max) = (309713836.617, 311112205.019, 312113140.732), stdev = 623626.496
  CI (99.9%): [310695552.117, 311528857.921] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt          Score        Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_getOnly  thrpt   30  311112205.019 ± 416652.902  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_groupBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_groupBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1461371.749 ops/s
# Warmup Iteration   2: 4056144.310 ops/s
# Warmup Iteration   3: 3769237.365 ops/s
# Warmup Iteration   4: 3722910.706 ops/s
# Warmup Iteration   5: 4064129.741 ops/s
# Warmup Iteration   6: 4090874.449 ops/s
# Warmup Iteration   7: 4094316.112 ops/s
# Warmup Iteration   8: 4099862.460 ops/s
# Warmup Iteration   9: 4084404.215 ops/s
# Warmup Iteration  10: 4096216.368 ops/s
# Warmup Iteration  11: 4099758.923 ops/s
# Warmup Iteration  12: 4097354.984 ops/s
# Warmup Iteration  13: 4090156.380 ops/s
# Warmup Iteration  14: 4093905.155 ops/s
# Warmup Iteration  15: 4097896.690 ops/s
# Warmup Iteration  16: 4099154.213 ops/s
# Warmup Iteration  17: 4101134.308 ops/s
# Warmup Iteration  18: 4096653.095 ops/s
# Warmup Iteration  19: 4097584.600 ops/s
# Warmup Iteration  20: 4095084.331 ops/s
# Warmup Iteration  21: 4100558.442 ops/s
# Warmup Iteration  22: 4090536.643 ops/s
# Warmup Iteration  23: 4080442.295 ops/s
# Warmup Iteration  24: 4076331.638 ops/s
# Warmup Iteration  25: 4061784.682 ops/s
# Warmup Iteration  26: 4100100.954 ops/s
# Warmup Iteration  27: 4089776.084 ops/s
# Warmup Iteration  28: 4090683.466 ops/s
# Warmup Iteration  29: 4094341.924 ops/s
# Warmup Iteration  30: 4100808.242 ops/s
Iteration   1: 4099282.807 ops/s
Iteration   2: 4086647.970 ops/s
Iteration   3: 4095349.171 ops/s
Iteration   4: 4095506.442 ops/s
Iteration   5: 4091469.731 ops/s
Iteration   6: 4086391.761 ops/s
Iteration   7: 4102525.168 ops/s
Iteration   8: 4097396.903 ops/s
Iteration   9: 4099968.883 ops/s
Iteration  10: 4094457.514 ops/s
Iteration  11: 4100961.682 ops/s
Iteration  12: 4096223.052 ops/s
Iteration  13: 4104689.062 ops/s
Iteration  14: 4101145.481 ops/s
Iteration  15: 4099689.487 ops/s
Iteration  16: 4098099.288 ops/s
Iteration  17: 4103659.659 ops/s
Iteration  18: 4100086.639 ops/s
Iteration  19: 4098124.655 ops/s
Iteration  20: 4091384.122 ops/s
Iteration  21: 4090535.299 ops/s
Iteration  22: 4081632.918 ops/s
Iteration  23: 4102032.926 ops/s
Iteration  24: 4096150.767 ops/s
Iteration  25: 4106242.731 ops/s
Iteration  26: 4097575.019 ops/s
Iteration  27: 4100941.429 ops/s
Iteration  28: 4113976.333 ops/s
Iteration  29: 4102946.171 ops/s
Iteration  30: 4101704.104 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_groupBy":
  4097893.239 ±(99.9%) 4335.501 ops/s [Average]
  (min, avg, max) = (4081632.918, 4097893.239, 4113976.333), stdev = 6489.174
  CI (99.9%): [4093557.738, 4102228.740] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_groupBy  thrpt   30  4097893.239 ± 4335.501  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_groupByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_groupByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 539062.141 ops/s
# Warmup Iteration   2: 1130979.057 ops/s
# Warmup Iteration   3: 1214554.430 ops/s
# Warmup Iteration   4: 1223446.021 ops/s
# Warmup Iteration   5: 1022664.770 ops/s
# Warmup Iteration   6: 1222673.821 ops/s
# Warmup Iteration   7: 1218432.241 ops/s
# Warmup Iteration   8: 1217466.966 ops/s
# Warmup Iteration   9: 1223811.114 ops/s
# Warmup Iteration  10: 1225173.926 ops/s
# Warmup Iteration  11: 1223440.741 ops/s
# Warmup Iteration  12: 1223605.589 ops/s
# Warmup Iteration  13: 1225343.767 ops/s
# Warmup Iteration  14: 1224007.067 ops/s
# Warmup Iteration  15: 1223940.622 ops/s
# Warmup Iteration  16: 1222585.496 ops/s
# Warmup Iteration  17: 1224125.257 ops/s
# Warmup Iteration  18: 1222686.861 ops/s
# Warmup Iteration  19: 1224792.364 ops/s
# Warmup Iteration  20: 1218576.982 ops/s
# Warmup Iteration  21: 1222515.813 ops/s
# Warmup Iteration  22: 1212480.652 ops/s
# Warmup Iteration  23: 1218711.275 ops/s
# Warmup Iteration  24: 1226175.626 ops/s
# Warmup Iteration  25: 1225089.630 ops/s
# Warmup Iteration  26: 1220623.545 ops/s
# Warmup Iteration  27: 1223514.306 ops/s
# Warmup Iteration  28: 1216869.637 ops/s
# Warmup Iteration  29: 1218228.106 ops/s
# Warmup Iteration  30: 1221640.582 ops/s
Iteration   1: 1227954.942 ops/s
Iteration   2: 1224013.395 ops/s
Iteration   3: 1221440.312 ops/s
Iteration   4: 1220951.829 ops/s
Iteration   5: 1222298.625 ops/s
Iteration   6: 1223847.326 ops/s
Iteration   7: 1224771.736 ops/s
Iteration   8: 1223363.610 ops/s
Iteration   9: 1224890.349 ops/s
Iteration  10: 1223599.238 ops/s
Iteration  11: 1221586.515 ops/s
Iteration  12: 1224382.376 ops/s
Iteration  13: 1226572.244 ops/s
Iteration  14: 1220751.789 ops/s
Iteration  15: 1219086.044 ops/s
Iteration  16: 1221141.287 ops/s
Iteration  17: 1221054.612 ops/s
Iteration  18: 1210055.732 ops/s
Iteration  19: 1208720.923 ops/s
Iteration  20: 1222016.817 ops/s
Iteration  21: 1224371.370 ops/s
Iteration  22: 1225855.762 ops/s
Iteration  23: 1226751.701 ops/s
Iteration  24: 1226700.263 ops/s
Iteration  25: 1225690.864 ops/s
Iteration  26: 1227426.713 ops/s
Iteration  27: 1223090.004 ops/s
Iteration  28: 1222176.849 ops/s
Iteration  29: 1218442.058 ops/s
Iteration  30: 1224289.632 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_groupByEach":
  1222576.497 ±(99.9%) 2882.214 ops/s [Average]
  (min, avg, max) = (1208720.923, 1222576.497, 1227954.942), stdev = 4313.963
  CI (99.9%): [1219694.283, 1225458.711] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_groupByEach  thrpt   30  1222576.497 ± 2882.214  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_indexOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_indexOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 50495489.171 ops/s
# Warmup Iteration   2: 97196562.141 ops/s
# Warmup Iteration   3: 92350423.970 ops/s
# Warmup Iteration   4: 107911256.343 ops/s
# Warmup Iteration   5: 107758016.362 ops/s
# Warmup Iteration   6: 107905510.961 ops/s
# Warmup Iteration   7: 108012308.683 ops/s
# Warmup Iteration   8: 107753637.700 ops/s
# Warmup Iteration   9: 107738148.825 ops/s
# Warmup Iteration  10: 107777544.147 ops/s
# Warmup Iteration  11: 107930776.471 ops/s
# Warmup Iteration  12: 108057693.699 ops/s
# Warmup Iteration  13: 107875292.696 ops/s
# Warmup Iteration  14: 107777003.922 ops/s
# Warmup Iteration  15: 107919339.252 ops/s
# Warmup Iteration  16: 107880464.785 ops/s
# Warmup Iteration  17: 107980825.134 ops/s
# Warmup Iteration  18: 108190345.612 ops/s
# Warmup Iteration  19: 108189155.060 ops/s
# Warmup Iteration  20: 107776369.328 ops/s
# Warmup Iteration  21: 107668835.134 ops/s
# Warmup Iteration  22: 107667861.136 ops/s
# Warmup Iteration  23: 107999236.762 ops/s
# Warmup Iteration  24: 107422974.482 ops/s
# Warmup Iteration  25: 108023162.437 ops/s
# Warmup Iteration  26: 107841106.584 ops/s
# Warmup Iteration  27: 107770841.935 ops/s
# Warmup Iteration  28: 108045224.891 ops/s
# Warmup Iteration  29: 107959971.904 ops/s
# Warmup Iteration  30: 107910261.087 ops/s
Iteration   1: 107945363.696 ops/s
Iteration   2: 107930795.962 ops/s
Iteration   3: 108224837.347 ops/s
Iteration   4: 107929299.237 ops/s
Iteration   5: 107504456.257 ops/s
Iteration   6: 107739786.792 ops/s
Iteration   7: 107801983.290 ops/s
Iteration   8: 108128737.827 ops/s
Iteration   9: 107682537.586 ops/s
Iteration  10: 108102506.412 ops/s
Iteration  11: 107578786.500 ops/s
Iteration  12: 107182691.703 ops/s
Iteration  13: 107863695.508 ops/s
Iteration  14: 108377540.122 ops/s
Iteration  15: 108095923.755 ops/s
Iteration  16: 108068593.515 ops/s
Iteration  17: 107982549.546 ops/s
Iteration  18: 107716936.910 ops/s
Iteration  19: 107548680.121 ops/s
Iteration  20: 107801054.172 ops/s
Iteration  21: 107559321.387 ops/s
Iteration  22: 107839675.997 ops/s
Iteration  23: 107879787.486 ops/s
Iteration  24: 107931191.204 ops/s
Iteration  25: 107773690.196 ops/s
Iteration  26: 108068899.381 ops/s
Iteration  27: 108044126.692 ops/s
Iteration  28: 108136039.183 ops/s
Iteration  29: 108123589.884 ops/s
Iteration  30: 107814438.163 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_indexOf":
  107879250.528 ±(99.9%) 167171.273 ops/s [Average]
  (min, avg, max) = (107182691.703, 107879250.528, 108377540.122), stdev = 250214.111
  CI (99.9%): [107712079.255, 108046421.801] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt          Score        Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_indexOf  thrpt   30  107879250.528 ± 167171.273  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 30385433.827 ops/s
# Warmup Iteration   2: 60061481.710 ops/s
# Warmup Iteration   3: 48825844.317 ops/s
# Warmup Iteration   4: 56963615.982 ops/s
# Warmup Iteration   5: 57114720.313 ops/s
# Warmup Iteration   6: 57075861.504 ops/s
# Warmup Iteration   7: 56950438.658 ops/s
# Warmup Iteration   8: 57095581.424 ops/s
# Warmup Iteration   9: 56730082.421 ops/s
# Warmup Iteration  10: 57064483.117 ops/s
# Warmup Iteration  11: 56853933.636 ops/s
# Warmup Iteration  12: 56979636.150 ops/s
# Warmup Iteration  13: 56825165.866 ops/s
# Warmup Iteration  14: 56861938.806 ops/s
# Warmup Iteration  15: 56878813.277 ops/s
# Warmup Iteration  16: 56835871.389 ops/s
# Warmup Iteration  17: 59302615.166 ops/s
# Warmup Iteration  18: 58974921.217 ops/s
# Warmup Iteration  19: 59255708.512 ops/s
# Warmup Iteration  20: 59434524.014 ops/s
# Warmup Iteration  21: 59379423.847 ops/s
# Warmup Iteration  22: 59173464.089 ops/s
# Warmup Iteration  23: 59184729.876 ops/s
# Warmup Iteration  24: 59319126.106 ops/s
# Warmup Iteration  25: 59270877.349 ops/s
# Warmup Iteration  26: 59115477.890 ops/s
# Warmup Iteration  27: 59171057.200 ops/s
# Warmup Iteration  28: 59326318.501 ops/s
# Warmup Iteration  29: 59257604.058 ops/s
# Warmup Iteration  30: 59012663.493 ops/s
Iteration   1: 59089222.514 ops/s
Iteration   2: 59352617.669 ops/s
Iteration   3: 59324978.807 ops/s
Iteration   4: 59069641.416 ops/s
Iteration   5: 58925476.246 ops/s
Iteration   6: 58778869.376 ops/s
Iteration   7: 58800008.909 ops/s
Iteration   8: 58946128.947 ops/s
Iteration   9: 59153991.713 ops/s
Iteration  10: 59306138.715 ops/s
Iteration  11: 59258370.976 ops/s
Iteration  12: 59219850.501 ops/s
Iteration  13: 59243361.603 ops/s
Iteration  14: 59157609.974 ops/s
Iteration  15: 59379117.737 ops/s
Iteration  16: 59264346.771 ops/s
Iteration  17: 59180659.951 ops/s
Iteration  18: 59399708.519 ops/s
Iteration  19: 59411898.249 ops/s
Iteration  20: 59454214.528 ops/s
Iteration  21: 59253107.920 ops/s
Iteration  22: 59046721.365 ops/s
Iteration  23: 59245236.007 ops/s
Iteration  24: 59420535.478 ops/s
Iteration  25: 59154838.489 ops/s
Iteration  26: 59235596.060 ops/s
Iteration  27: 59229992.656 ops/s
Iteration  28: 59141492.382 ops/s
Iteration  29: 59143582.214 ops/s
Iteration  30: 59409611.027 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_injectInto":
  59199897.557 ±(99.9%) 116644.482 ops/s [Average]
  (min, avg, max) = (58778869.376, 59199897.557, 59454214.528), stdev = 174587.983
  CI (99.9%): [59083253.075, 59316542.039] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score        Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_injectInto  thrpt   30  59199897.557 ± 116644.482  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_injectIntoDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_injectIntoDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 30871063.959 ops/s
# Warmup Iteration   2: 59672265.169 ops/s
# Warmup Iteration   3: 64731158.165 ops/s
# Warmup Iteration   4: 51281814.923 ops/s
# Warmup Iteration   5: 59346034.973 ops/s
# Warmup Iteration   6: 59418131.240 ops/s
# Warmup Iteration   7: 59412792.891 ops/s
# Warmup Iteration   8: 59334638.421 ops/s
# Warmup Iteration   9: 59354465.330 ops/s
# Warmup Iteration  10: 59302367.994 ops/s
# Warmup Iteration  11: 59285395.541 ops/s
# Warmup Iteration  12: 59427727.524 ops/s
# Warmup Iteration  13: 59206935.922 ops/s
# Warmup Iteration  14: 59389609.792 ops/s
# Warmup Iteration  15: 59381188.921 ops/s
# Warmup Iteration  16: 59261688.716 ops/s
# Warmup Iteration  17: 59182477.170 ops/s
# Warmup Iteration  18: 59119822.962 ops/s
# Warmup Iteration  19: 59289022.677 ops/s
# Warmup Iteration  20: 59097710.720 ops/s
# Warmup Iteration  21: 59202768.006 ops/s
# Warmup Iteration  22: 59152286.348 ops/s
# Warmup Iteration  23: 59323856.973 ops/s
# Warmup Iteration  24: 59126873.841 ops/s
# Warmup Iteration  25: 59094084.508 ops/s
# Warmup Iteration  26: 59044164.006 ops/s
# Warmup Iteration  27: 59259381.308 ops/s
# Warmup Iteration  28: 59241167.235 ops/s
# Warmup Iteration  29: 59219598.025 ops/s
# Warmup Iteration  30: 59123125.663 ops/s
Iteration   1: 59351601.078 ops/s
Iteration   2: 59283417.860 ops/s
Iteration   3: 59348106.728 ops/s
Iteration   4: 59379672.794 ops/s
Iteration   5: 59158122.313 ops/s
Iteration   6: 59316967.001 ops/s
Iteration   7: 59106369.242 ops/s
Iteration   8: 59160425.709 ops/s
Iteration   9: 59204142.907 ops/s
Iteration  10: 59263821.403 ops/s
Iteration  11: 59056164.824 ops/s
Iteration  12: 59134884.515 ops/s
Iteration  13: 59200231.068 ops/s
Iteration  14: 59179142.731 ops/s
Iteration  15: 59354488.492 ops/s
Iteration  16: 59208756.500 ops/s
Iteration  17: 59193978.743 ops/s
Iteration  18: 58990307.676 ops/s
Iteration  19: 58929139.455 ops/s
Iteration  20: 58842983.932 ops/s
Iteration  21: 58769162.858 ops/s
Iteration  22: 58929246.474 ops/s
Iteration  23: 59235087.991 ops/s
Iteration  24: 59334052.426 ops/s
Iteration  25: 59162683.078 ops/s
Iteration  26: 59060218.124 ops/s
Iteration  27: 59211552.916 ops/s
Iteration  28: 59008693.278 ops/s
Iteration  29: 59035196.084 ops/s
Iteration  30: 59064619.649 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_injectIntoDouble":
  59149107.928 ±(99.9%) 104667.299 ops/s [Average]
  (min, avg, max) = (58769162.858, 59149107.928, 59379672.794), stdev = 156661.097
  CI (99.9%): [59044440.630, 59253775.227] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score        Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_injectIntoDouble  thrpt   30  59149107.928 ± 104667.299  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_injectIntoFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_injectIntoFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 29780288.063 ops/s
# Warmup Iteration   2: 59534669.190 ops/s
# Warmup Iteration   3: 63042764.303 ops/s
# Warmup Iteration   4: 53956764.076 ops/s
# Warmup Iteration   5: 63548305.362 ops/s
# Warmup Iteration   6: 63668178.516 ops/s
# Warmup Iteration   7: 63532820.533 ops/s
# Warmup Iteration   8: 63459733.428 ops/s
# Warmup Iteration   9: 63686879.528 ops/s
# Warmup Iteration  10: 63493192.933 ops/s
# Warmup Iteration  11: 63464996.782 ops/s
# Warmup Iteration  12: 63491583.252 ops/s
# Warmup Iteration  13: 63457348.622 ops/s
# Warmup Iteration  14: 63440264.645 ops/s
# Warmup Iteration  15: 63548627.333 ops/s
# Warmup Iteration  16: 63485710.245 ops/s
# Warmup Iteration  17: 63455439.237 ops/s
# Warmup Iteration  18: 63438943.613 ops/s
# Warmup Iteration  19: 63571782.526 ops/s
# Warmup Iteration  20: 63487677.743 ops/s
# Warmup Iteration  21: 63623604.294 ops/s
# Warmup Iteration  22: 63581530.507 ops/s
# Warmup Iteration  23: 63258068.915 ops/s
# Warmup Iteration  24: 63413637.246 ops/s
# Warmup Iteration  25: 63405399.004 ops/s
# Warmup Iteration  26: 63615312.610 ops/s
# Warmup Iteration  27: 63410600.549 ops/s
# Warmup Iteration  28: 63366774.625 ops/s
# Warmup Iteration  29: 63599784.867 ops/s
# Warmup Iteration  30: 63610025.549 ops/s
Iteration   1: 63377514.350 ops/s
Iteration   2: 63524265.942 ops/s
Iteration   3: 63778430.331 ops/s
Iteration   4: 63609996.655 ops/s
Iteration   5: 63542201.976 ops/s
Iteration   6: 63463629.146 ops/s
Iteration   7: 63377347.940 ops/s
Iteration   8: 63423825.915 ops/s
Iteration   9: 63560075.586 ops/s
Iteration  10: 63569885.511 ops/s
Iteration  11: 63443725.234 ops/s
Iteration  12: 63687216.404 ops/s
Iteration  13: 63730779.024 ops/s
Iteration  14: 63599593.085 ops/s
Iteration  15: 63477669.547 ops/s
Iteration  16: 63302309.096 ops/s
Iteration  17: 63338623.704 ops/s
Iteration  18: 63521004.421 ops/s
Iteration  19: 63202622.740 ops/s
Iteration  20: 63536332.278 ops/s
Iteration  21: 63308071.713 ops/s
Iteration  22: 63516368.651 ops/s
Iteration  23: 63163363.518 ops/s
Iteration  24: 63357999.013 ops/s
Iteration  25: 63029488.373 ops/s
Iteration  26: 63409971.037 ops/s
Iteration  27: 63435622.146 ops/s
Iteration  28: 63342790.950 ops/s
Iteration  29: 63222196.016 ops/s
Iteration  30: 63466482.254 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_injectIntoFloat":
  63443980.085 ±(99.9%) 111518.129 ops/s [Average]
  (min, avg, max) = (63029488.373, 63443980.085, 63778430.331), stdev = 166915.099
  CI (99.9%): [63332461.956, 63555498.214] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score        Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_injectIntoFloat  thrpt   30  63443980.085 ± 111518.129  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_injectIntoInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_injectIntoInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 33821759.454 ops/s
# Warmup Iteration   2: 64929698.317 ops/s
# Warmup Iteration   3: 62529649.130 ops/s
# Warmup Iteration   4: 70251629.069 ops/s
# Warmup Iteration   5: 72011683.953 ops/s
# Warmup Iteration   6: 72211952.354 ops/s
# Warmup Iteration   7: 72278621.739 ops/s
# Warmup Iteration   8: 71933578.800 ops/s
# Warmup Iteration   9: 72262230.816 ops/s
# Warmup Iteration  10: 72187582.514 ops/s
# Warmup Iteration  11: 72281077.686 ops/s
# Warmup Iteration  12: 72145481.703 ops/s
# Warmup Iteration  13: 71924730.947 ops/s
# Warmup Iteration  14: 72133046.733 ops/s
# Warmup Iteration  15: 72128023.117 ops/s
# Warmup Iteration  16: 72011155.983 ops/s
# Warmup Iteration  17: 72126549.141 ops/s
# Warmup Iteration  18: 72048019.694 ops/s
# Warmup Iteration  19: 72389246.110 ops/s
# Warmup Iteration  20: 72009635.942 ops/s
# Warmup Iteration  21: 72214388.220 ops/s
# Warmup Iteration  22: 72220422.006 ops/s
# Warmup Iteration  23: 72218064.239 ops/s
# Warmup Iteration  24: 71865036.813 ops/s
# Warmup Iteration  25: 72387867.081 ops/s
# Warmup Iteration  26: 72175908.420 ops/s
# Warmup Iteration  27: 72092131.796 ops/s
# Warmup Iteration  28: 72366752.166 ops/s
# Warmup Iteration  29: 72374616.265 ops/s
# Warmup Iteration  30: 71947539.167 ops/s
Iteration   1: 72000924.646 ops/s
Iteration   2: 71976184.431 ops/s
Iteration   3: 72227821.291 ops/s
Iteration   4: 72335157.987 ops/s
Iteration   5: 72382767.593 ops/s
Iteration   6: 72187016.019 ops/s
Iteration   7: 72221677.207 ops/s
Iteration   8: 72361864.542 ops/s
Iteration   9: 72423458.411 ops/s
Iteration  10: 72300950.560 ops/s
Iteration  11: 72462534.986 ops/s
Iteration  12: 72335337.489 ops/s
Iteration  13: 72299546.658 ops/s
Iteration  14: 72354648.700 ops/s
Iteration  15: 72379517.345 ops/s
Iteration  16: 72062732.833 ops/s
Iteration  17: 71938423.311 ops/s
Iteration  18: 72058283.754 ops/s
Iteration  19: 72241741.724 ops/s
Iteration  20: 72109163.676 ops/s
Iteration  21: 72242512.931 ops/s
Iteration  22: 71889788.187 ops/s
Iteration  23: 71453535.412 ops/s
Iteration  24: 72038920.176 ops/s
Iteration  25: 72067835.900 ops/s
Iteration  26: 72216785.583 ops/s
Iteration  27: 72071411.595 ops/s
Iteration  28: 72068464.351 ops/s
Iteration  29: 72092099.235 ops/s
Iteration  30: 71999197.571 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_injectIntoInt":
  72160010.137 ±(99.9%) 137960.404 ops/s [Average]
  (min, avg, max) = (71453535.412, 72160010.137, 72462534.986), stdev = 206492.654
  CI (99.9%): [72022049.733, 72297970.541] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score        Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_injectIntoInt  thrpt   30  72160010.137 ± 137960.404  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_injectIntoLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_injectIntoLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 34127624.279 ops/s
# Warmup Iteration   2: 64904345.504 ops/s
# Warmup Iteration   3: 62570972.291 ops/s
# Warmup Iteration   4: 70641789.539 ops/s
# Warmup Iteration   5: 72215515.474 ops/s
# Warmup Iteration   6: 71806088.540 ops/s
# Warmup Iteration   7: 72222357.241 ops/s
# Warmup Iteration   8: 71932676.172 ops/s
# Warmup Iteration   9: 72184126.544 ops/s
# Warmup Iteration  10: 71978186.544 ops/s
# Warmup Iteration  11: 72075599.846 ops/s
# Warmup Iteration  12: 71960623.421 ops/s
# Warmup Iteration  13: 71882939.598 ops/s
# Warmup Iteration  14: 72131164.195 ops/s
# Warmup Iteration  15: 72386666.599 ops/s
# Warmup Iteration  16: 72124259.724 ops/s
# Warmup Iteration  17: 72198180.689 ops/s
# Warmup Iteration  18: 71970646.599 ops/s
# Warmup Iteration  19: 72007315.521 ops/s
# Warmup Iteration  20: 72122605.562 ops/s
# Warmup Iteration  21: 72097066.589 ops/s
# Warmup Iteration  22: 71945734.091 ops/s
# Warmup Iteration  23: 72082161.171 ops/s
# Warmup Iteration  24: 71951698.948 ops/s
# Warmup Iteration  25: 72195381.984 ops/s
# Warmup Iteration  26: 72149573.523 ops/s
# Warmup Iteration  27: 72131251.392 ops/s
# Warmup Iteration  28: 72064080.016 ops/s
# Warmup Iteration  29: 71910181.618 ops/s
# Warmup Iteration  30: 71949321.532 ops/s
Iteration   1: 71910042.989 ops/s
Iteration   2: 72047788.500 ops/s
Iteration   3: 71786935.354 ops/s
Iteration   4: 72176932.274 ops/s
Iteration   5: 71936194.096 ops/s
Iteration   6: 72113038.436 ops/s
Iteration   7: 72225659.117 ops/s
Iteration   8: 72337621.423 ops/s
Iteration   9: 72185220.673 ops/s
Iteration  10: 72086158.676 ops/s
Iteration  11: 72261507.244 ops/s
Iteration  12: 72231709.699 ops/s
Iteration  13: 72169879.686 ops/s
Iteration  14: 72338066.294 ops/s
Iteration  15: 72350144.802 ops/s
Iteration  16: 72262599.556 ops/s
Iteration  17: 72196442.807 ops/s
Iteration  18: 72246718.177 ops/s
Iteration  19: 71993921.674 ops/s
Iteration  20: 72140266.193 ops/s
Iteration  21: 72064910.825 ops/s
Iteration  22: 72122931.204 ops/s
Iteration  23: 72103940.043 ops/s
Iteration  24: 71813972.372 ops/s
Iteration  25: 71983939.597 ops/s
Iteration  26: 71947109.540 ops/s
Iteration  27: 72201893.038 ops/s
Iteration  28: 72211262.389 ops/s
Iteration  29: 72036234.561 ops/s
Iteration  30: 72289853.411 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_injectIntoLong":
  72125763.155 ±(99.9%) 100066.398 ops/s [Average]
  (min, avg, max) = (71786935.354, 72125763.155, 72350144.802), stdev = 149774.685
  CI (99.9%): [72025696.757, 72225829.553] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score        Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_injectIntoLong  thrpt   30  72125763.155 ± 100066.398  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 57288099.236 ops/s
# Warmup Iteration   2: 115039819.164 ops/s
# Warmup Iteration   3: 108061352.294 ops/s
# Warmup Iteration   4: 126793343.417 ops/s
# Warmup Iteration   5: 127375656.947 ops/s
# Warmup Iteration   6: 127393450.919 ops/s
# Warmup Iteration   7: 127503882.305 ops/s
# Warmup Iteration   8: 126650562.832 ops/s
# Warmup Iteration   9: 126895224.594 ops/s
# Warmup Iteration  10: 127223879.299 ops/s
# Warmup Iteration  11: 126816498.667 ops/s
# Warmup Iteration  12: 127197075.091 ops/s
# Warmup Iteration  13: 126946213.387 ops/s
# Warmup Iteration  14: 126462024.807 ops/s
# Warmup Iteration  15: 127198775.499 ops/s
# Warmup Iteration  16: 127203297.972 ops/s
# Warmup Iteration  17: 126679942.139 ops/s
# Warmup Iteration  18: 125776274.412 ops/s
# Warmup Iteration  19: 126386857.549 ops/s
# Warmup Iteration  20: 126619095.211 ops/s
# Warmup Iteration  21: 126291169.026 ops/s
# Warmup Iteration  22: 126131038.777 ops/s
# Warmup Iteration  23: 126757811.075 ops/s
# Warmup Iteration  24: 126420525.076 ops/s
# Warmup Iteration  25: 126950494.631 ops/s
# Warmup Iteration  26: 126998960.772 ops/s
# Warmup Iteration  27: 126786824.328 ops/s
# Warmup Iteration  28: 126471432.895 ops/s
# Warmup Iteration  29: 125635754.442 ops/s
# Warmup Iteration  30: 126135458.326 ops/s
Iteration   1: 126699203.980 ops/s
Iteration   2: 126253004.316 ops/s
Iteration   3: 126118768.418 ops/s
Iteration   4: 126253056.160 ops/s
Iteration   5: 126960447.325 ops/s
Iteration   6: 127214208.296 ops/s
Iteration   7: 126932102.213 ops/s
Iteration   8: 126714103.092 ops/s
Iteration   9: 126542174.655 ops/s
Iteration  10: 126241763.252 ops/s
Iteration  11: 126268130.864 ops/s
Iteration  12: 126705214.665 ops/s
Iteration  13: 126479614.255 ops/s
Iteration  14: 126337589.332 ops/s
Iteration  15: 126611206.989 ops/s
Iteration  16: 126610712.106 ops/s
Iteration  17: 126095769.753 ops/s
Iteration  18: 126237421.165 ops/s
Iteration  19: 127325663.599 ops/s
Iteration  20: 126270307.869 ops/s
Iteration  21: 126621313.119 ops/s
Iteration  22: 125928297.541 ops/s
Iteration  23: 126704598.022 ops/s
Iteration  24: 126748624.548 ops/s
Iteration  25: 126480551.693 ops/s
Iteration  26: 127072541.977 ops/s
Iteration  27: 125910987.594 ops/s
Iteration  28: 126115280.632 ops/s
Iteration  29: 126417638.217 ops/s
Iteration  30: 126039178.067 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_isEmpty":
  126496982.457 ±(99.9%) 245996.534 ops/s [Average]
  (min, avg, max) = (125910987.594, 126496982.457, 127325663.599), stdev = 368196.059
  CI (99.9%): [126250985.924, 126742978.991] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt          Score        Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_isEmpty  thrpt   30  126496982.457 ± 245996.534  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_iterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_iterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 387948.052 ops/s
# Warmup Iteration   2: 401167.977 ops/s
# Warmup Iteration   3: 474914.589 ops/s
# Warmup Iteration   4: 503298.551 ops/s
# Warmup Iteration   5: 503712.350 ops/s
# Warmup Iteration   6: 500240.631 ops/s
# Warmup Iteration   7: 502616.613 ops/s
# Warmup Iteration   8: 502864.559 ops/s
# Warmup Iteration   9: 503151.091 ops/s
# Warmup Iteration  10: 502146.414 ops/s
# Warmup Iteration  11: 502390.407 ops/s
# Warmup Iteration  12: 502571.808 ops/s
# Warmup Iteration  13: 502480.536 ops/s
# Warmup Iteration  14: 427670.179 ops/s
# Warmup Iteration  15: 503369.684 ops/s
# Warmup Iteration  16: 501310.638 ops/s
# Warmup Iteration  17: 487957.928 ops/s
# Warmup Iteration  18: 489064.637 ops/s
# Warmup Iteration  19: 488561.407 ops/s
# Warmup Iteration  20: 488048.044 ops/s
# Warmup Iteration  21: 487957.215 ops/s
# Warmup Iteration  22: 488905.790 ops/s
# Warmup Iteration  23: 489130.577 ops/s
# Warmup Iteration  24: 490028.856 ops/s
# Warmup Iteration  25: 490166.958 ops/s
# Warmup Iteration  26: 486030.721 ops/s
# Warmup Iteration  27: 489652.222 ops/s
# Warmup Iteration  28: 489441.212 ops/s
# Warmup Iteration  29: 471131.697 ops/s
# Warmup Iteration  30: 483211.741 ops/s
Iteration   1: 490004.064 ops/s
Iteration   2: 488346.487 ops/s
Iteration   3: 488821.548 ops/s
Iteration   4: 489780.771 ops/s
Iteration   5: 490077.587 ops/s
Iteration   6: 489768.855 ops/s
Iteration   7: 490436.010 ops/s
Iteration   8: 488942.817 ops/s
Iteration   9: 489298.354 ops/s
Iteration  10: 488078.491 ops/s
Iteration  11: 488557.218 ops/s
Iteration  12: 489034.217 ops/s
Iteration  13: 488297.147 ops/s
Iteration  14: 489577.396 ops/s
Iteration  15: 489667.728 ops/s
Iteration  16: 489571.180 ops/s
Iteration  17: 488545.577 ops/s
Iteration  18: 487212.246 ops/s
Iteration  19: 489612.456 ops/s
Iteration  20: 488107.156 ops/s
Iteration  21: 489450.973 ops/s
Iteration  22: 489203.631 ops/s
Iteration  23: 486819.752 ops/s
Iteration  24: 489299.818 ops/s
Iteration  25: 489120.039 ops/s
Iteration  26: 488927.673 ops/s
Iteration  27: 489448.001 ops/s
Iteration  28: 488685.195 ops/s
Iteration  29: 489937.209 ops/s
Iteration  30: 488325.370 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_iterator":
  489031.832 ±(99.9%) 553.656 ops/s [Average]
  (min, avg, max) = (486819.752, 489031.832, 490436.010), stdev = 828.686
  CI (99.9%): [488478.176, 489585.488] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score     Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_iterator  thrpt   30  489031.832 ± 553.656  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_iteratorRemove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_iteratorRemove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 757837.573 ops/s
# Warmup Iteration   2: 799566.429 ops/s
# Warmup Iteration   3: 1005443.799 ops/s
# Warmup Iteration   4: 998444.205 ops/s
# Warmup Iteration   5: 990722.518 ops/s
# Warmup Iteration   6: 1001550.394 ops/s
# Warmup Iteration   7: 1000784.594 ops/s
# Warmup Iteration   8: 998724.177 ops/s
# Warmup Iteration   9: 987959.966 ops/s
# Warmup Iteration  10: 992929.845 ops/s
# Warmup Iteration  11: 967848.525 ops/s
# Warmup Iteration  12: 878684.690 ops/s
# Warmup Iteration  13: 996875.291 ops/s
# Warmup Iteration  14: 996586.072 ops/s
# Warmup Iteration  15: 997618.821 ops/s
# Warmup Iteration  16: 998576.280 ops/s
# Warmup Iteration  17: 1054982.286 ops/s
# Warmup Iteration  18: 1061224.781 ops/s
# Warmup Iteration  19: 1056386.374 ops/s
# Warmup Iteration  20: 1055499.493 ops/s
# Warmup Iteration  21: 1054974.441 ops/s
# Warmup Iteration  22: 1058260.897 ops/s
# Warmup Iteration  23: 1055376.351 ops/s
# Warmup Iteration  24: 1057621.835 ops/s
# Warmup Iteration  25: 1059618.528 ops/s
# Warmup Iteration  26: 1061049.033 ops/s
# Warmup Iteration  27: 1055758.809 ops/s
# Warmup Iteration  28: 1058338.762 ops/s
# Warmup Iteration  29: 1058760.405 ops/s
# Warmup Iteration  30: 1062033.091 ops/s
Iteration   1: 1061920.587 ops/s
Iteration   2: 1054364.063 ops/s
Iteration   3: 1056874.133 ops/s
Iteration   4: 1062656.301 ops/s
Iteration   5: 1061865.461 ops/s
Iteration   6: 1060328.322 ops/s
Iteration   7: 1053047.927 ops/s
Iteration   8: 1053911.461 ops/s
Iteration   9: 1051991.830 ops/s
Iteration  10: 1060088.927 ops/s
Iteration  11: 1061598.116 ops/s
Iteration  12: 1053493.457 ops/s
Iteration  13: 1056539.321 ops/s
Iteration  14: 1063245.097 ops/s
Iteration  15: 1057560.827 ops/s
Iteration  16: 1056820.602 ops/s
Iteration  17: 1052373.722 ops/s
Iteration  18: 1055624.834 ops/s
Iteration  19: 1061085.998 ops/s
Iteration  20: 1059644.086 ops/s
Iteration  21: 1056579.444 ops/s
Iteration  22: 1059049.348 ops/s
Iteration  23: 1061702.344 ops/s
Iteration  24: 1060227.853 ops/s
Iteration  25: 1057493.715 ops/s
Iteration  26: 1060132.457 ops/s
Iteration  27: 1062393.080 ops/s
Iteration  28: 1058115.985 ops/s
Iteration  29: 1063459.689 ops/s
Iteration  30: 1061295.092 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_iteratorRemove":
  1058516.136 ±(99.9%) 2308.385 ops/s [Average]
  (min, avg, max) = (1051991.830, 1058516.136, 1063459.689), stdev = 3455.082
  CI (99.9%): [1056207.751, 1060824.521] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_iteratorRemove  thrpt   30  1058516.136 ± 2308.385  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_lastIndexOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_lastIndexOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 49797747.255 ops/s
# Warmup Iteration   2: 100683896.320 ops/s
# Warmup Iteration   3: 92552114.292 ops/s
# Warmup Iteration   4: 108055983.933 ops/s
# Warmup Iteration   5: 108057567.098 ops/s
# Warmup Iteration   6: 107891877.978 ops/s
# Warmup Iteration   7: 107875303.384 ops/s
# Warmup Iteration   8: 108199020.687 ops/s
# Warmup Iteration   9: 108194872.771 ops/s
# Warmup Iteration  10: 108232279.801 ops/s
# Warmup Iteration  11: 107931881.574 ops/s
# Warmup Iteration  12: 107901790.233 ops/s
# Warmup Iteration  13: 107941917.580 ops/s
# Warmup Iteration  14: 107779302.955 ops/s
# Warmup Iteration  15: 108460479.985 ops/s
# Warmup Iteration  16: 107988351.637 ops/s
# Warmup Iteration  17: 108048380.795 ops/s
# Warmup Iteration  18: 107875484.935 ops/s
# Warmup Iteration  19: 108232771.204 ops/s
# Warmup Iteration  20: 107563433.470 ops/s
# Warmup Iteration  21: 108110959.045 ops/s
# Warmup Iteration  22: 108110352.383 ops/s
# Warmup Iteration  23: 108182585.403 ops/s
# Warmup Iteration  24: 108159213.186 ops/s
# Warmup Iteration  25: 108277324.132 ops/s
# Warmup Iteration  26: 108287416.283 ops/s
# Warmup Iteration  27: 108186686.741 ops/s
# Warmup Iteration  28: 108244450.104 ops/s
# Warmup Iteration  29: 108039450.686 ops/s
# Warmup Iteration  30: 107954193.588 ops/s
Iteration   1: 108312162.323 ops/s
Iteration   2: 107897770.210 ops/s
Iteration   3: 107879599.065 ops/s
Iteration   4: 107903620.021 ops/s
Iteration   5: 108035153.529 ops/s
Iteration   6: 108181728.482 ops/s
Iteration   7: 107700098.312 ops/s
Iteration   8: 107869767.372 ops/s
Iteration   9: 107977142.681 ops/s
Iteration  10: 107934403.277 ops/s
Iteration  11: 107870197.909 ops/s
Iteration  12: 108326326.065 ops/s
Iteration  13: 108213440.782 ops/s
Iteration  14: 107884023.650 ops/s
Iteration  15: 108343681.199 ops/s
Iteration  16: 108157669.800 ops/s
Iteration  17: 108226370.323 ops/s
Iteration  18: 108000265.349 ops/s
Iteration  19: 107997515.135 ops/s
Iteration  20: 108261191.344 ops/s
Iteration  21: 108247904.051 ops/s
Iteration  22: 107873024.642 ops/s
Iteration  23: 108075654.254 ops/s
Iteration  24: 107705533.260 ops/s
Iteration  25: 108242448.096 ops/s
Iteration  26: 108249911.674 ops/s
Iteration  27: 108144677.472 ops/s
Iteration  28: 108363154.326 ops/s
Iteration  29: 108393888.956 ops/s
Iteration  30: 108209827.900 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_lastIndexOf":
  108082605.049 ±(99.9%) 133679.762 ops/s [Average]
  (min, avg, max) = (107700098.312, 108082605.049, 108393888.956), stdev = 200085.590
  CI (99.9%): [107948925.286, 108216284.811] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt          Score        Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_lastIndexOf  thrpt   30  108082605.049 ± 133679.762  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_listIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_listIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 147813.924 ops/s
# Warmup Iteration   2: 155430.355 ops/s
# Warmup Iteration   3: 188440.671 ops/s
# Warmup Iteration   4: 196784.975 ops/s
# Warmup Iteration   5: 197972.562 ops/s
# Warmup Iteration   6: 196776.915 ops/s
# Warmup Iteration   7: 197710.238 ops/s
# Warmup Iteration   8: 197532.137 ops/s
# Warmup Iteration   9: 197356.068 ops/s
# Warmup Iteration  10: 197399.521 ops/s
# Warmup Iteration  11: 197403.514 ops/s
# Warmup Iteration  12: 197036.629 ops/s
# Warmup Iteration  13: 176897.661 ops/s
# Warmup Iteration  14: 186874.973 ops/s
# Warmup Iteration  15: 197606.608 ops/s
# Warmup Iteration  16: 196750.224 ops/s
# Warmup Iteration  17: 207845.369 ops/s
# Warmup Iteration  18: 209797.299 ops/s
# Warmup Iteration  19: 209758.833 ops/s
# Warmup Iteration  20: 208965.588 ops/s
# Warmup Iteration  21: 210609.387 ops/s
# Warmup Iteration  22: 210664.075 ops/s
# Warmup Iteration  23: 209941.930 ops/s
# Warmup Iteration  24: 210286.967 ops/s
# Warmup Iteration  25: 208903.664 ops/s
# Warmup Iteration  26: 209801.120 ops/s
# Warmup Iteration  27: 210007.960 ops/s
# Warmup Iteration  28: 209966.117 ops/s
# Warmup Iteration  29: 210639.659 ops/s
# Warmup Iteration  30: 210842.258 ops/s
Iteration   1: 210560.159 ops/s
Iteration   2: 209885.491 ops/s
Iteration   3: 209905.425 ops/s
Iteration   4: 210601.736 ops/s
Iteration   5: 210843.040 ops/s
Iteration   6: 210035.565 ops/s
Iteration   7: 210250.464 ops/s
Iteration   8: 207913.890 ops/s
Iteration   9: 207621.801 ops/s
Iteration  10: 207677.679 ops/s
Iteration  11: 206661.188 ops/s
Iteration  12: 207291.104 ops/s
Iteration  13: 207231.559 ops/s
Iteration  14: 208819.384 ops/s
Iteration  15: 209678.927 ops/s
Iteration  16: 210947.450 ops/s
Iteration  17: 209554.574 ops/s
Iteration  18: 210206.338 ops/s
Iteration  19: 209847.624 ops/s
Iteration  20: 210311.768 ops/s
Iteration  21: 210074.204 ops/s
Iteration  22: 209323.353 ops/s
Iteration  23: 209672.424 ops/s
Iteration  24: 209962.783 ops/s
Iteration  25: 210603.691 ops/s
Iteration  26: 210744.811 ops/s
Iteration  27: 211021.481 ops/s
Iteration  28: 209824.357 ops/s
Iteration  29: 210664.202 ops/s
Iteration  30: 208615.189 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_listIterator":
  209545.055 ±(99.9%) 827.570 ops/s [Average]
  (min, avg, max) = (206661.188, 209545.055, 211021.481), stdev = 1238.668
  CI (99.9%): [208717.485, 210372.626] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score     Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_listIterator  thrpt   30  209545.055 ± 827.570  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_listIterator_throwsGreaterThanSize$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_listIterator_throwsGreaterThanSize

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 773859.808 ops/s
# Warmup Iteration   2: 804026.532 ops/s
# Warmup Iteration   3: 969630.427 ops/s
# Warmup Iteration   4: 1008930.682 ops/s
# Warmup Iteration   5: 1013203.713 ops/s
# Warmup Iteration   6: 1004161.284 ops/s
# Warmup Iteration   7: 1014584.331 ops/s
# Warmup Iteration   8: 1010496.033 ops/s
# Warmup Iteration   9: 1011992.901 ops/s
# Warmup Iteration  10: 1009542.710 ops/s
# Warmup Iteration  11: 1008476.097 ops/s
# Warmup Iteration  12: 1005177.710 ops/s
# Warmup Iteration  13: 883777.940 ops/s
# Warmup Iteration  14: 992135.702 ops/s
# Warmup Iteration  15: 1013216.177 ops/s
# Warmup Iteration  16: 1014693.417 ops/s
# Warmup Iteration  17: 1092498.943 ops/s
# Warmup Iteration  18: 1092876.474 ops/s
# Warmup Iteration  19: 1094004.163 ops/s
# Warmup Iteration  20: 1093101.184 ops/s
# Warmup Iteration  21: 1092372.036 ops/s
# Warmup Iteration  22: 1091088.747 ops/s
# Warmup Iteration  23: 1095040.119 ops/s
# Warmup Iteration  24: 1089432.325 ops/s
# Warmup Iteration  25: 1084607.647 ops/s
# Warmup Iteration  26: 1085048.938 ops/s
# Warmup Iteration  27: 1093247.905 ops/s
# Warmup Iteration  28: 1093408.292 ops/s
# Warmup Iteration  29: 1094203.371 ops/s
# Warmup Iteration  30: 1095015.295 ops/s
Iteration   1: 1090514.203 ops/s
Iteration   2: 1097113.826 ops/s
Iteration   3: 1097390.722 ops/s
Iteration   4: 1096058.634 ops/s
Iteration   5: 1091280.146 ops/s
Iteration   6: 1096324.107 ops/s
Iteration   7: 1097264.042 ops/s
Iteration   8: 1091566.454 ops/s
Iteration   9: 1090083.782 ops/s
Iteration  10: 1093054.160 ops/s
Iteration  11: 1092750.508 ops/s
Iteration  12: 1086535.416 ops/s
Iteration  13: 1095731.105 ops/s
Iteration  14: 1088219.779 ops/s
Iteration  15: 1092589.563 ops/s
Iteration  16: 1092375.754 ops/s
Iteration  17: 1092488.071 ops/s
Iteration  18: 1091960.661 ops/s
Iteration  19: 1095560.012 ops/s
Iteration  20: 1094476.660 ops/s
Iteration  21: 1092728.737 ops/s
Iteration  22: 1090214.832 ops/s
Iteration  23: 1092795.931 ops/s
Iteration  24: 1094087.559 ops/s
Iteration  25: 1093364.510 ops/s
Iteration  26: 1094599.828 ops/s
Iteration  27: 1090437.708 ops/s
Iteration  28: 1092309.766 ops/s
Iteration  29: 1089858.461 ops/s
Iteration  30: 1086696.245 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_listIterator_throwsGreaterThanSize":
  1092681.039 ±(99.9%) 1932.513 ops/s [Average]
  (min, avg, max) = (1086535.416, 1092681.039, 1097390.722), stdev = 2892.495
  CI (99.9%): [1090748.526, 1094613.553] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt        Score      Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_listIterator_throwsGreaterThanSize  thrpt   30  1092681.039 ± 1932.513  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_listIterator_throwsNegative$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_listIterator_throwsNegative

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 778551.412 ops/s
# Warmup Iteration   2: 803635.963 ops/s
# Warmup Iteration   3: 983384.884 ops/s
# Warmup Iteration   4: 1025372.753 ops/s
# Warmup Iteration   5: 1023909.008 ops/s
# Warmup Iteration   6: 1015184.698 ops/s
# Warmup Iteration   7: 1022979.780 ops/s
# Warmup Iteration   8: 1023729.581 ops/s
# Warmup Iteration   9: 1016033.987 ops/s
# Warmup Iteration  10: 1017614.526 ops/s
# Warmup Iteration  11: 1022288.405 ops/s
# Warmup Iteration  12: 1024495.879 ops/s
# Warmup Iteration  13: 868548.117 ops/s
# Warmup Iteration  14: 1025726.083 ops/s
# Warmup Iteration  15: 1028153.912 ops/s
# Warmup Iteration  16: 1025845.613 ops/s
# Warmup Iteration  17: 1086445.867 ops/s
# Warmup Iteration  18: 1084373.634 ops/s
# Warmup Iteration  19: 1084980.330 ops/s
# Warmup Iteration  20: 1081294.499 ops/s
# Warmup Iteration  21: 1085447.714 ops/s
# Warmup Iteration  22: 1090387.212 ops/s
# Warmup Iteration  23: 1087843.197 ops/s
# Warmup Iteration  24: 1086392.117 ops/s
# Warmup Iteration  25: 1087544.783 ops/s
# Warmup Iteration  26: 1085800.770 ops/s
# Warmup Iteration  27: 1084504.740 ops/s
# Warmup Iteration  28: 1084712.237 ops/s
# Warmup Iteration  29: 1085992.070 ops/s
# Warmup Iteration  30: 1090536.585 ops/s
Iteration   1: 1086659.365 ops/s
Iteration   2: 1087914.953 ops/s
Iteration   3: 1088069.954 ops/s
Iteration   4: 1087370.532 ops/s
Iteration   5: 1083903.936 ops/s
Iteration   6: 1088008.863 ops/s
Iteration   7: 1087586.628 ops/s
Iteration   8: 1087537.939 ops/s
Iteration   9: 1085968.178 ops/s
Iteration  10: 1089804.018 ops/s
Iteration  11: 1084557.600 ops/s
Iteration  12: 1088530.195 ops/s
Iteration  13: 1086945.092 ops/s
Iteration  14: 1087046.010 ops/s
Iteration  15: 1090397.003 ops/s
Iteration  16: 1090263.305 ops/s
Iteration  17: 1088608.228 ops/s
Iteration  18: 1086931.561 ops/s
Iteration  19: 1090668.725 ops/s
Iteration  20: 1089832.217 ops/s
Iteration  21: 1088730.684 ops/s
Iteration  22: 1087757.091 ops/s
Iteration  23: 1083239.370 ops/s
Iteration  24: 1085500.088 ops/s
Iteration  25: 1085444.431 ops/s
Iteration  26: 1079830.201 ops/s
Iteration  27: 1077043.084 ops/s
Iteration  28: 1077425.389 ops/s
Iteration  29: 1076432.120 ops/s
Iteration  30: 1078049.254 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_listIterator_throwsNegative":
  1085868.534 ±(99.9%) 2760.174 ops/s [Average]
  (min, avg, max) = (1076432.120, 1085868.534, 1090668.725), stdev = 4131.299
  CI (99.9%): [1083108.360, 1088628.708] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score      Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_listIterator_throwsNegative  thrpt   30  1085868.534 ± 2760.174  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1535929.936 ops/s
# Warmup Iteration   2: 3348004.318 ops/s
# Warmup Iteration   3: 2814001.855 ops/s
# Warmup Iteration   4: 3316801.033 ops/s
# Warmup Iteration   5: 3325117.619 ops/s
# Warmup Iteration   6: 3325737.035 ops/s
# Warmup Iteration   7: 3322804.123 ops/s
# Warmup Iteration   8: 3318139.765 ops/s
# Warmup Iteration   9: 3322509.765 ops/s
# Warmup Iteration  10: 3304919.648 ops/s
# Warmup Iteration  11: 3330346.882 ops/s
# Warmup Iteration  12: 3329958.713 ops/s
# Warmup Iteration  13: 3328251.022 ops/s
# Warmup Iteration  14: 3320414.107 ops/s
# Warmup Iteration  15: 3323004.108 ops/s
# Warmup Iteration  16: 3324538.990 ops/s
# Warmup Iteration  17: 3348564.845 ops/s
# Warmup Iteration  18: 3366153.978 ops/s
# Warmup Iteration  19: 3355060.972 ops/s
# Warmup Iteration  20: 3358228.656 ops/s
# Warmup Iteration  21: 3357476.607 ops/s
# Warmup Iteration  22: 3356885.181 ops/s
# Warmup Iteration  23: 3351599.159 ops/s
# Warmup Iteration  24: 3355192.384 ops/s
# Warmup Iteration  25: 3347949.180 ops/s
# Warmup Iteration  26: 3348722.725 ops/s
# Warmup Iteration  27: 3353165.408 ops/s
# Warmup Iteration  28: 3354279.741 ops/s
# Warmup Iteration  29: 3348220.264 ops/s
# Warmup Iteration  30: 3350606.642 ops/s
Iteration   1: 3351732.647 ops/s
Iteration   2: 3349403.905 ops/s
Iteration   3: 3356264.132 ops/s
Iteration   4: 3339267.669 ops/s
Iteration   5: 3333871.476 ops/s
Iteration   6: 3322066.217 ops/s
Iteration   7: 3356511.037 ops/s
Iteration   8: 3350267.776 ops/s
Iteration   9: 3354946.720 ops/s
Iteration  10: 3343090.433 ops/s
Iteration  11: 3359261.892 ops/s
Iteration  12: 3342381.636 ops/s
Iteration  13: 3349399.682 ops/s
Iteration  14: 3362716.655 ops/s
Iteration  15: 3341139.882 ops/s
Iteration  16: 3350181.170 ops/s
Iteration  17: 3360713.537 ops/s
Iteration  18: 3345807.380 ops/s
Iteration  19: 3362210.938 ops/s
Iteration  20: 3360408.429 ops/s
Iteration  21: 3363609.112 ops/s
Iteration  22: 3367276.325 ops/s
Iteration  23: 3358458.146 ops/s
Iteration  24: 3355826.965 ops/s
Iteration  25: 3360519.233 ops/s
Iteration  26: 3364934.834 ops/s
Iteration  27: 3365684.812 ops/s
Iteration  28: 3352591.926 ops/s
Iteration  29: 3356140.396 ops/s
Iteration  30: 3350594.326 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_makeString":
  3352909.310 ±(99.9%) 6848.207 ops/s [Average]
  (min, avg, max) = (3322066.217, 3352909.310, 3367276.325), stdev = 10250.074
  CI (99.9%): [3346061.103, 3359757.516] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_makeString  thrpt   30  3352909.310 ± 6848.207  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_max$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_max

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 56646807.257 ops/s
# Warmup Iteration   2: 107259344.621 ops/s
# Warmup Iteration   3: 96747710.646 ops/s
# Warmup Iteration   4: 114013109.347 ops/s
# Warmup Iteration   5: 114167331.566 ops/s
# Warmup Iteration   6: 114028675.123 ops/s
# Warmup Iteration   7: 113915516.687 ops/s
# Warmup Iteration   8: 113758938.623 ops/s
# Warmup Iteration   9: 114056384.086 ops/s
# Warmup Iteration  10: 113950965.059 ops/s
# Warmup Iteration  11: 113727645.946 ops/s
# Warmup Iteration  12: 113848326.135 ops/s
# Warmup Iteration  13: 114219505.896 ops/s
# Warmup Iteration  14: 113849553.000 ops/s
# Warmup Iteration  15: 111853092.195 ops/s
# Warmup Iteration  16: 113874634.020 ops/s
# Warmup Iteration  17: 114130993.985 ops/s
# Warmup Iteration  18: 113734543.973 ops/s
# Warmup Iteration  19: 113971863.563 ops/s
# Warmup Iteration  20: 113980640.204 ops/s
# Warmup Iteration  21: 113851300.620 ops/s
# Warmup Iteration  22: 113950249.594 ops/s
# Warmup Iteration  23: 113970384.458 ops/s
# Warmup Iteration  24: 113994522.270 ops/s
# Warmup Iteration  25: 114284305.843 ops/s
# Warmup Iteration  26: 114278052.917 ops/s
# Warmup Iteration  27: 113910823.800 ops/s
# Warmup Iteration  28: 114511318.029 ops/s
# Warmup Iteration  29: 114470398.189 ops/s
# Warmup Iteration  30: 114152794.093 ops/s
Iteration   1: 114198677.834 ops/s
Iteration   2: 113977610.935 ops/s
Iteration   3: 113603803.218 ops/s
Iteration   4: 114471609.937 ops/s
Iteration   5: 113939761.243 ops/s
Iteration   6: 114142323.847 ops/s
Iteration   7: 113532935.185 ops/s
Iteration   8: 114267488.715 ops/s
Iteration   9: 114126333.066 ops/s
Iteration  10: 114248435.484 ops/s
Iteration  11: 114789541.773 ops/s
Iteration  12: 114123507.937 ops/s
Iteration  13: 114095180.625 ops/s
Iteration  14: 112301745.683 ops/s
Iteration  15: 114328156.300 ops/s
Iteration  16: 114029834.628 ops/s
Iteration  17: 113977982.902 ops/s
Iteration  18: 113955762.708 ops/s
Iteration  19: 113906777.547 ops/s
Iteration  20: 114462317.791 ops/s
Iteration  21: 113757963.995 ops/s
Iteration  22: 113630365.850 ops/s
Iteration  23: 113952932.596 ops/s
Iteration  24: 114149847.682 ops/s
Iteration  25: 113897069.070 ops/s
Iteration  26: 114303802.626 ops/s
Iteration  27: 113980434.785 ops/s
Iteration  28: 113216014.176 ops/s
Iteration  29: 113646952.517 ops/s
Iteration  30: 114022082.797 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_max":
  113967908.448 ±(99.9%) 296406.167 ops/s [Average]
  (min, avg, max) = (112301745.683, 113967908.448, 114789541.773), stdev = 443646.830
  CI (99.9%): [113671502.281, 114264314.615] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt          Score        Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_max  thrpt   30  113967908.448 ± 296406.167  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_maxBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_maxBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 38236485.188 ops/s
# Warmup Iteration   2: 73873550.663 ops/s
# Warmup Iteration   3: 61521353.104 ops/s
# Warmup Iteration   4: 72147107.156 ops/s
# Warmup Iteration   5: 72320510.733 ops/s
# Warmup Iteration   6: 72362189.030 ops/s
# Warmup Iteration   7: 72275596.911 ops/s
# Warmup Iteration   8: 72169197.497 ops/s
# Warmup Iteration   9: 72188444.157 ops/s
# Warmup Iteration  10: 72282391.807 ops/s
# Warmup Iteration  11: 72274028.639 ops/s
# Warmup Iteration  12: 72330623.239 ops/s
# Warmup Iteration  13: 72349418.359 ops/s
# Warmup Iteration  14: 72366639.527 ops/s
# Warmup Iteration  15: 72552278.774 ops/s
# Warmup Iteration  16: 72324220.380 ops/s
# Warmup Iteration  17: 72277046.610 ops/s
# Warmup Iteration  18: 72321864.276 ops/s
# Warmup Iteration  19: 72428878.286 ops/s
# Warmup Iteration  20: 72573648.203 ops/s
# Warmup Iteration  21: 72262743.506 ops/s
# Warmup Iteration  22: 72421775.931 ops/s
# Warmup Iteration  23: 72441541.838 ops/s
# Warmup Iteration  24: 72668919.639 ops/s
# Warmup Iteration  25: 72357578.263 ops/s
# Warmup Iteration  26: 72466708.178 ops/s
# Warmup Iteration  27: 72191361.808 ops/s
# Warmup Iteration  28: 72341999.275 ops/s
# Warmup Iteration  29: 72457672.600 ops/s
# Warmup Iteration  30: 72133015.181 ops/s
Iteration   1: 72286773.018 ops/s
Iteration   2: 72602707.937 ops/s
Iteration   3: 72489714.069 ops/s
Iteration   4: 72181713.686 ops/s
Iteration   5: 72450675.801 ops/s
Iteration   6: 72216183.624 ops/s
Iteration   7: 72512353.451 ops/s
Iteration   8: 72470425.774 ops/s
Iteration   9: 72741629.508 ops/s
Iteration  10: 72467584.567 ops/s
Iteration  11: 72523234.790 ops/s
Iteration  12: 72683235.104 ops/s
Iteration  13: 72664873.732 ops/s
Iteration  14: 72589682.829 ops/s
Iteration  15: 72397549.047 ops/s
Iteration  16: 72709718.307 ops/s
Iteration  17: 72286043.691 ops/s
Iteration  18: 72202757.899 ops/s
Iteration  19: 72365933.842 ops/s
Iteration  20: 72421996.887 ops/s
Iteration  21: 72174084.977 ops/s
Iteration  22: 72623705.620 ops/s
Iteration  23: 72631194.115 ops/s
Iteration  24: 72203281.869 ops/s
Iteration  25: 72253192.060 ops/s
Iteration  26: 72059251.147 ops/s
Iteration  27: 72358526.312 ops/s
Iteration  28: 72276812.674 ops/s
Iteration  29: 72430020.261 ops/s
Iteration  30: 71966392.522 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_maxBy":
  72408041.637 ±(99.9%) 134231.934 ops/s [Average]
  (min, avg, max) = (71966392.522, 72408041.637, 72741629.508), stdev = 200912.055
  CI (99.9%): [72273809.703, 72542273.572] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score        Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_maxBy  thrpt   30  72408041.637 ± 134231.934  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_max_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_max_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 20358512.992 ops/s
# Warmup Iteration   2: 39366411.352 ops/s
# Warmup Iteration   3: 33984255.581 ops/s
# Warmup Iteration   4: 40164997.097 ops/s
# Warmup Iteration   5: 40167586.989 ops/s
# Warmup Iteration   6: 40038433.550 ops/s
# Warmup Iteration   7: 40072199.226 ops/s
# Warmup Iteration   8: 40038342.291 ops/s
# Warmup Iteration   9: 39862180.060 ops/s
# Warmup Iteration  10: 39992864.693 ops/s
# Warmup Iteration  11: 40081600.798 ops/s
# Warmup Iteration  12: 39954302.382 ops/s
# Warmup Iteration  13: 40036596.963 ops/s
# Warmup Iteration  14: 39898449.238 ops/s
# Warmup Iteration  15: 40238236.376 ops/s
# Warmup Iteration  16: 40075450.715 ops/s
# Warmup Iteration  17: 40320986.700 ops/s
# Warmup Iteration  18: 40115602.233 ops/s
# Warmup Iteration  19: 39980600.236 ops/s
# Warmup Iteration  20: 40084756.559 ops/s
# Warmup Iteration  21: 40001456.647 ops/s
# Warmup Iteration  22: 40094639.295 ops/s
# Warmup Iteration  23: 39969924.427 ops/s
# Warmup Iteration  24: 39938829.515 ops/s
# Warmup Iteration  25: 40265437.587 ops/s
# Warmup Iteration  26: 40120797.158 ops/s
# Warmup Iteration  27: 40169687.972 ops/s
# Warmup Iteration  28: 39970795.204 ops/s
# Warmup Iteration  29: 40180256.536 ops/s
# Warmup Iteration  30: 40064839.805 ops/s
Iteration   1: 39800200.721 ops/s
Iteration   2: 40236393.485 ops/s
Iteration   3: 39620760.673 ops/s
Iteration   4: 40280599.307 ops/s
Iteration   5: 39977541.551 ops/s
Iteration   6: 39810719.336 ops/s
Iteration   7: 40157575.620 ops/s
Iteration   8: 40283605.815 ops/s
Iteration   9: 40208414.045 ops/s
Iteration  10: 39952678.249 ops/s
Iteration  11: 40097229.637 ops/s
Iteration  12: 39781732.006 ops/s
Iteration  13: 40041999.104 ops/s
Iteration  14: 40262477.070 ops/s
Iteration  15: 40148048.107 ops/s
Iteration  16: 39891966.147 ops/s
Iteration  17: 40141424.166 ops/s
Iteration  18: 40123835.047 ops/s
Iteration  19: 40092482.850 ops/s
Iteration  20: 40070696.012 ops/s
Iteration  21: 40187149.531 ops/s
Iteration  22: 40255393.151 ops/s
Iteration  23: 39955487.099 ops/s
Iteration  24: 39851721.891 ops/s
Iteration  25: 40163033.795 ops/s
Iteration  26: 40082664.087 ops/s
Iteration  27: 40124018.873 ops/s
Iteration  28: 40182469.634 ops/s
Iteration  29: 40187189.743 ops/s
Iteration  30: 40155901.468 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_max_null_throws":
  40070846.941 ±(99.9%) 113092.518 ops/s [Average]
  (min, avg, max) = (39620760.673, 40070846.941, 40283605.815), stdev = 169271.570
  CI (99.9%): [39957754.422, 40183939.459] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score        Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_max_null_throws  thrpt   30  40070846.941 ± 113092.518  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_max_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_max_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 20456286.580 ops/s
# Warmup Iteration   2: 39895595.521 ops/s
# Warmup Iteration   3: 34049088.063 ops/s
# Warmup Iteration   4: 39672495.209 ops/s
# Warmup Iteration   5: 39450979.594 ops/s
# Warmup Iteration   6: 39581677.896 ops/s
# Warmup Iteration   7: 39639944.733 ops/s
# Warmup Iteration   8: 39411941.457 ops/s
# Warmup Iteration   9: 39643531.977 ops/s
# Warmup Iteration  10: 39576356.042 ops/s
# Warmup Iteration  11: 39646086.979 ops/s
# Warmup Iteration  12: 39658289.279 ops/s
# Warmup Iteration  13: 39768473.343 ops/s
# Warmup Iteration  14: 39745513.743 ops/s
# Warmup Iteration  15: 39721477.020 ops/s
# Warmup Iteration  16: 39773296.779 ops/s
# Warmup Iteration  17: 39783909.073 ops/s
# Warmup Iteration  18: 39429839.959 ops/s
# Warmup Iteration  19: 39655320.522 ops/s
# Warmup Iteration  20: 39646399.015 ops/s
# Warmup Iteration  21: 39634416.545 ops/s
# Warmup Iteration  22: 39612947.937 ops/s
# Warmup Iteration  23: 39541909.291 ops/s
# Warmup Iteration  24: 39639488.367 ops/s
# Warmup Iteration  25: 39802812.850 ops/s
# Warmup Iteration  26: 39733019.279 ops/s
# Warmup Iteration  27: 39737815.789 ops/s
# Warmup Iteration  28: 39667393.289 ops/s
# Warmup Iteration  29: 39618472.276 ops/s
# Warmup Iteration  30: 39471987.538 ops/s
Iteration   1: 39411751.260 ops/s
Iteration   2: 39564941.750 ops/s
Iteration   3: 39337532.307 ops/s
Iteration   4: 39526492.416 ops/s
Iteration   5: 39459539.014 ops/s
Iteration   6: 39578265.643 ops/s
Iteration   7: 39698467.848 ops/s
Iteration   8: 39476274.994 ops/s
Iteration   9: 39712325.000 ops/s
Iteration  10: 39640906.033 ops/s
Iteration  11: 39488867.659 ops/s
Iteration  12: 39728178.534 ops/s
Iteration  13: 39664589.900 ops/s
Iteration  14: 39457348.907 ops/s
Iteration  15: 39892476.225 ops/s
Iteration  16: 39510248.228 ops/s
Iteration  17: 39538586.442 ops/s
Iteration  18: 39607099.549 ops/s
Iteration  19: 39450142.232 ops/s
Iteration  20: 39620626.853 ops/s
Iteration  21: 39789710.589 ops/s
Iteration  22: 39703133.644 ops/s
Iteration  23: 39684672.695 ops/s
Iteration  24: 39650586.356 ops/s
Iteration  25: 39482260.297 ops/s
Iteration  26: 39585465.389 ops/s
Iteration  27: 39663588.900 ops/s
Iteration  28: 39732842.232 ops/s
Iteration  29: 39808217.579 ops/s
Iteration  30: 39508420.283 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_max_null_throws_without_comparator":
  39599118.625 ±(99.9%) 86659.214 ops/s [Average]
  (min, avg, max) = (39337532.307, 39599118.625, 39892476.225), stdev = 129707.441
  CI (99.9%): [39512459.411, 39685777.839] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt         Score       Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_max_null_throws_without_comparator  thrpt   30  39599118.625 ± 86659.214  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_max_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_max_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 36564430.823 ops/s
# Warmup Iteration   2: 72442029.925 ops/s
# Warmup Iteration   3: 61906031.895 ops/s
# Warmup Iteration   4: 76089844.064 ops/s
# Warmup Iteration   5: 76020696.998 ops/s
# Warmup Iteration   6: 76102221.356 ops/s
# Warmup Iteration   7: 75910966.839 ops/s
# Warmup Iteration   8: 75970256.743 ops/s
# Warmup Iteration   9: 75822712.618 ops/s
# Warmup Iteration  10: 75984791.611 ops/s
# Warmup Iteration  11: 76028098.221 ops/s
# Warmup Iteration  12: 76052614.121 ops/s
# Warmup Iteration  13: 75970386.610 ops/s
# Warmup Iteration  14: 76001196.603 ops/s
# Warmup Iteration  15: 76065536.786 ops/s
# Warmup Iteration  16: 75846091.781 ops/s
# Warmup Iteration  17: 76017686.800 ops/s
# Warmup Iteration  18: 76163970.226 ops/s
# Warmup Iteration  19: 75778786.718 ops/s
# Warmup Iteration  20: 76175126.256 ops/s
# Warmup Iteration  21: 75710963.947 ops/s
# Warmup Iteration  22: 76071857.607 ops/s
# Warmup Iteration  23: 75995320.632 ops/s
# Warmup Iteration  24: 75939376.952 ops/s
# Warmup Iteration  25: 76014424.616 ops/s
# Warmup Iteration  26: 76365831.210 ops/s
# Warmup Iteration  27: 76176964.754 ops/s
# Warmup Iteration  28: 76039431.908 ops/s
# Warmup Iteration  29: 75944916.301 ops/s
# Warmup Iteration  30: 75942485.704 ops/s
Iteration   1: 75738987.747 ops/s
Iteration   2: 75724111.058 ops/s
Iteration   3: 75785103.444 ops/s
Iteration   4: 76130127.003 ops/s
Iteration   5: 75851875.045 ops/s
Iteration   6: 75938406.020 ops/s
Iteration   7: 76146244.237 ops/s
Iteration   8: 76269941.777 ops/s
Iteration   9: 76112817.762 ops/s
Iteration  10: 75955769.798 ops/s
Iteration  11: 76115282.440 ops/s
Iteration  12: 75896430.788 ops/s
Iteration  13: 75837536.669 ops/s
Iteration  14: 76218939.402 ops/s
Iteration  15: 76045905.306 ops/s
Iteration  16: 76026714.420 ops/s
Iteration  17: 75874874.110 ops/s
Iteration  18: 75914255.744 ops/s
Iteration  19: 75753487.305 ops/s
Iteration  20: 76198477.025 ops/s
Iteration  21: 75945593.762 ops/s
Iteration  22: 76003611.407 ops/s
Iteration  23: 75799662.638 ops/s
Iteration  24: 76116801.866 ops/s
Iteration  25: 75986681.835 ops/s
Iteration  26: 75853627.872 ops/s
Iteration  27: 76096080.449 ops/s
Iteration  28: 75959239.948 ops/s
Iteration  29: 75778300.651 ops/s
Iteration  30: 76150444.183 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_max_without_comparator":
  75974177.724 ±(99.9%) 104347.329 ops/s [Average]
  (min, avg, max) = (75724111.058, 75974177.724, 76269941.777), stdev = 156182.182
  CI (99.9%): [75869830.394, 76078525.053] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt         Score        Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_max_without_comparator  thrpt   30  75974177.724 ± 104347.329  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_min$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_min

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 57003474.980 ops/s
# Warmup Iteration   2: 113024222.415 ops/s
# Warmup Iteration   3: 91679121.647 ops/s
# Warmup Iteration   4: 107173721.539 ops/s
# Warmup Iteration   5: 107330309.870 ops/s
# Warmup Iteration   6: 107217982.475 ops/s
# Warmup Iteration   7: 107129519.088 ops/s
# Warmup Iteration   8: 107233884.216 ops/s
# Warmup Iteration   9: 107170871.572 ops/s
# Warmup Iteration  10: 107156591.202 ops/s
# Warmup Iteration  11: 107452501.802 ops/s
# Warmup Iteration  12: 107168396.468 ops/s
# Warmup Iteration  13: 107199485.721 ops/s
# Warmup Iteration  14: 107514520.382 ops/s
# Warmup Iteration  15: 107307399.529 ops/s
# Warmup Iteration  16: 107233977.267 ops/s
# Warmup Iteration  17: 107362196.591 ops/s
# Warmup Iteration  18: 107374712.736 ops/s
# Warmup Iteration  19: 107388501.516 ops/s
# Warmup Iteration  20: 107249646.323 ops/s
# Warmup Iteration  21: 107130716.926 ops/s
# Warmup Iteration  22: 107321513.368 ops/s
# Warmup Iteration  23: 107459193.214 ops/s
# Warmup Iteration  24: 107102092.783 ops/s
# Warmup Iteration  25: 107344307.940 ops/s
# Warmup Iteration  26: 107448375.374 ops/s
# Warmup Iteration  27: 107274128.107 ops/s
# Warmup Iteration  28: 107302703.748 ops/s
# Warmup Iteration  29: 107302447.848 ops/s
# Warmup Iteration  30: 107126211.709 ops/s
Iteration   1: 107025349.261 ops/s
Iteration   2: 107238910.168 ops/s
Iteration   3: 107287046.608 ops/s
Iteration   4: 107426710.995 ops/s
Iteration   5: 107553369.476 ops/s
Iteration   6: 107234395.626 ops/s
Iteration   7: 107216935.856 ops/s
Iteration   8: 107457356.054 ops/s
Iteration   9: 107377582.111 ops/s
Iteration  10: 107062049.430 ops/s
Iteration  11: 107124953.509 ops/s
Iteration  12: 107063782.404 ops/s
Iteration  13: 107030162.798 ops/s
Iteration  14: 107235651.148 ops/s
Iteration  15: 107246142.162 ops/s
Iteration  16: 107406337.734 ops/s
Iteration  17: 107131867.480 ops/s
Iteration  18: 107226956.701 ops/s
Iteration  19: 106873968.482 ops/s
Iteration  20: 107043084.233 ops/s
Iteration  21: 106980911.546 ops/s
Iteration  22: 107406524.065 ops/s
Iteration  23: 107287365.579 ops/s
Iteration  24: 106955306.078 ops/s
Iteration  25: 107064614.795 ops/s
Iteration  26: 107029797.881 ops/s
Iteration  27: 107228128.904 ops/s
Iteration  28: 107269513.693 ops/s
Iteration  29: 107443492.556 ops/s
Iteration  30: 107058957.302 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_min":
  107199574.155 ±(99.9%) 115032.293 ops/s [Average]
  (min, avg, max) = (106873968.482, 107199574.155, 107553369.476), stdev = 172174.935
  CI (99.9%): [107084541.861, 107314606.448] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt          Score        Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_min  thrpt   30  107199574.155 ± 115032.293  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_minBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_minBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 28274989.921 ops/s
# Warmup Iteration   2: 55025407.031 ops/s
# Warmup Iteration   3: 50477285.045 ops/s
# Warmup Iteration   4: 58713178.485 ops/s
# Warmup Iteration   5: 58874740.279 ops/s
# Warmup Iteration   6: 58824748.707 ops/s
# Warmup Iteration   7: 58835882.977 ops/s
# Warmup Iteration   8: 58978268.164 ops/s
# Warmup Iteration   9: 58930857.110 ops/s
# Warmup Iteration  10: 58708687.645 ops/s
# Warmup Iteration  11: 58803756.777 ops/s
# Warmup Iteration  12: 59023204.252 ops/s
# Warmup Iteration  13: 58798852.101 ops/s
# Warmup Iteration  14: 58910418.636 ops/s
# Warmup Iteration  15: 58958325.659 ops/s
# Warmup Iteration  16: 58743183.917 ops/s
# Warmup Iteration  17: 58794039.265 ops/s
# Warmup Iteration  18: 58959804.194 ops/s
# Warmup Iteration  19: 58738386.542 ops/s
# Warmup Iteration  20: 58853545.452 ops/s
# Warmup Iteration  21: 58630000.657 ops/s
# Warmup Iteration  22: 58790480.059 ops/s
# Warmup Iteration  23: 58962850.798 ops/s
# Warmup Iteration  24: 58878833.692 ops/s
# Warmup Iteration  25: 58998134.696 ops/s
# Warmup Iteration  26: 58704606.395 ops/s
# Warmup Iteration  27: 58740498.398 ops/s
# Warmup Iteration  28: 58674075.547 ops/s
# Warmup Iteration  29: 58774684.683 ops/s
# Warmup Iteration  30: 58811760.750 ops/s
Iteration   1: 59038795.582 ops/s
Iteration   2: 58888606.160 ops/s
Iteration   3: 58979523.331 ops/s
Iteration   4: 58916803.763 ops/s
Iteration   5: 58766514.687 ops/s
Iteration   6: 58825037.413 ops/s
Iteration   7: 58685286.110 ops/s
Iteration   8: 59095882.653 ops/s
Iteration   9: 58992384.344 ops/s
Iteration  10: 58737237.267 ops/s
Iteration  11: 58661550.443 ops/s
Iteration  12: 58953945.982 ops/s
Iteration  13: 58755295.545 ops/s
Iteration  14: 59058886.907 ops/s
Iteration  15: 58951667.253 ops/s
Iteration  16: 58727126.860 ops/s
Iteration  17: 58923236.709 ops/s
Iteration  18: 58634156.945 ops/s
Iteration  19: 58578690.537 ops/s
Iteration  20: 58874505.166 ops/s
Iteration  21: 58915338.787 ops/s
Iteration  22: 58879100.345 ops/s
Iteration  23: 58794852.259 ops/s
Iteration  24: 58989793.616 ops/s
Iteration  25: 58843034.995 ops/s
Iteration  26: 58618160.857 ops/s
Iteration  27: 58795224.814 ops/s
Iteration  28: 58967980.592 ops/s
Iteration  29: 59217455.331 ops/s
Iteration  30: 59138527.318 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_minBy":
  58873486.752 ±(99.9%) 106522.995 ops/s [Average]
  (min, avg, max) = (58578690.537, 58873486.752, 59217455.331), stdev = 159438.616
  CI (99.9%): [58766963.757, 58980009.747] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score        Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_minBy  thrpt   30  58873486.752 ± 106522.995  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_min_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_min_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 20442871.641 ops/s
# Warmup Iteration   2: 39325370.149 ops/s
# Warmup Iteration   3: 34434208.831 ops/s
# Warmup Iteration   4: 39790455.927 ops/s
# Warmup Iteration   5: 39811712.353 ops/s
# Warmup Iteration   6: 40066802.406 ops/s
# Warmup Iteration   7: 39918895.369 ops/s
# Warmup Iteration   8: 39934616.119 ops/s
# Warmup Iteration   9: 39844041.748 ops/s
# Warmup Iteration  10: 39663306.863 ops/s
# Warmup Iteration  11: 40017616.914 ops/s
# Warmup Iteration  12: 39899210.121 ops/s
# Warmup Iteration  13: 39914114.301 ops/s
# Warmup Iteration  14: 39804542.629 ops/s
# Warmup Iteration  15: 39914715.065 ops/s
# Warmup Iteration  16: 40093841.084 ops/s
# Warmup Iteration  17: 39693635.539 ops/s
# Warmup Iteration  18: 39899170.165 ops/s
# Warmup Iteration  19: 39621492.105 ops/s
# Warmup Iteration  20: 39737452.459 ops/s
# Warmup Iteration  21: 39929044.434 ops/s
# Warmup Iteration  22: 39860343.948 ops/s
# Warmup Iteration  23: 39960748.772 ops/s
# Warmup Iteration  24: 39962614.451 ops/s
# Warmup Iteration  25: 39856576.140 ops/s
# Warmup Iteration  26: 39869672.560 ops/s
# Warmup Iteration  27: 39971795.355 ops/s
# Warmup Iteration  28: 39862779.117 ops/s
# Warmup Iteration  29: 40043593.338 ops/s
# Warmup Iteration  30: 39937009.965 ops/s
Iteration   1: 40141646.673 ops/s
Iteration   2: 39985462.279 ops/s
Iteration   3: 39634847.434 ops/s
Iteration   4: 39750830.271 ops/s
Iteration   5: 39577006.632 ops/s
Iteration   6: 39925128.092 ops/s
Iteration   7: 39985714.298 ops/s
Iteration   8: 39741457.535 ops/s
Iteration   9: 39792102.642 ops/s
Iteration  10: 39762206.645 ops/s
Iteration  11: 39734555.038 ops/s
Iteration  12: 39893940.381 ops/s
Iteration  13: 40154464.747 ops/s
Iteration  14: 40054271.265 ops/s
Iteration  15: 40231899.259 ops/s
Iteration  16: 39990316.372 ops/s
Iteration  17: 40136321.214 ops/s
Iteration  18: 39908981.159 ops/s
Iteration  19: 39925902.650 ops/s
Iteration  20: 39998902.844 ops/s
Iteration  21: 40028398.817 ops/s
Iteration  22: 40171056.886 ops/s
Iteration  23: 40173915.708 ops/s
Iteration  24: 39906733.457 ops/s
Iteration  25: 39943723.139 ops/s
Iteration  26: 39796207.397 ops/s
Iteration  27: 39425673.377 ops/s
Iteration  28: 40148091.594 ops/s
Iteration  29: 39995075.519 ops/s
Iteration  30: 40017318.002 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_min_null_throws":
  39931071.711 ±(99.9%) 129234.899 ops/s [Average]
  (min, avg, max) = (39425673.377, 39931071.711, 40231899.259), stdev = 193432.727
  CI (99.9%): [39801836.812, 40060306.609] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score        Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_min_null_throws  thrpt   30  39931071.711 ± 129234.899  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_min_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_min_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 20187966.581 ops/s
# Warmup Iteration   2: 39574569.590 ops/s
# Warmup Iteration   3: 33796129.335 ops/s
# Warmup Iteration   4: 39598769.539 ops/s
# Warmup Iteration   5: 39751590.769 ops/s
# Warmup Iteration   6: 39921785.529 ops/s
# Warmup Iteration   7: 39926922.874 ops/s
# Warmup Iteration   8: 39852963.359 ops/s
# Warmup Iteration   9: 39587709.375 ops/s
# Warmup Iteration  10: 39485036.681 ops/s
# Warmup Iteration  11: 39842304.310 ops/s
# Warmup Iteration  12: 39695458.276 ops/s
# Warmup Iteration  13: 39493499.175 ops/s
# Warmup Iteration  14: 39664150.869 ops/s
# Warmup Iteration  15: 39748595.434 ops/s
# Warmup Iteration  16: 39855366.211 ops/s
# Warmup Iteration  17: 39715688.455 ops/s
# Warmup Iteration  18: 39568588.767 ops/s
# Warmup Iteration  19: 39807826.072 ops/s
# Warmup Iteration  20: 39463784.201 ops/s
# Warmup Iteration  21: 39641618.737 ops/s
# Warmup Iteration  22: 39461110.942 ops/s
# Warmup Iteration  23: 39570912.735 ops/s
# Warmup Iteration  24: 39377233.597 ops/s
# Warmup Iteration  25: 39583036.988 ops/s
# Warmup Iteration  26: 39808389.671 ops/s
# Warmup Iteration  27: 39773227.916 ops/s
# Warmup Iteration  28: 39608563.256 ops/s
# Warmup Iteration  29: 39769385.436 ops/s
# Warmup Iteration  30: 39809817.980 ops/s
Iteration   1: 39776507.807 ops/s
Iteration   2: 39727575.393 ops/s
Iteration   3: 39834777.726 ops/s
Iteration   4: 39639925.622 ops/s
Iteration   5: 39667587.290 ops/s
Iteration   6: 39694580.164 ops/s
Iteration   7: 39608653.256 ops/s
Iteration   8: 39504914.500 ops/s
Iteration   9: 39606413.181 ops/s
Iteration  10: 39584351.703 ops/s
Iteration  11: 39668899.584 ops/s
Iteration  12: 39507545.109 ops/s
Iteration  13: 39522512.396 ops/s
Iteration  14: 39462799.741 ops/s
Iteration  15: 39764937.971 ops/s
Iteration  16: 39895783.089 ops/s
Iteration  17: 39848742.691 ops/s
Iteration  18: 39806028.857 ops/s
Iteration  19: 39481459.499 ops/s
Iteration  20: 39686057.501 ops/s
Iteration  21: 39597830.944 ops/s
Iteration  22: 39566492.698 ops/s
Iteration  23: 39555841.335 ops/s
Iteration  24: 39713819.795 ops/s
Iteration  25: 39832679.445 ops/s
Iteration  26: 39736653.151 ops/s
Iteration  27: 39801337.388 ops/s
Iteration  28: 40027453.093 ops/s
Iteration  29: 39646340.175 ops/s
Iteration  30: 39763917.622 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_min_null_throws_without_comparator":
  39684413.958 ±(99.9%) 90576.166 ops/s [Average]
  (min, avg, max) = (39462799.741, 39684413.958, 40027453.093), stdev = 135570.152
  CI (99.9%): [39593837.791, 39774990.124] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt         Score       Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_min_null_throws_without_comparator  thrpt   30  39684413.958 ± 90576.166  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_min_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_min_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 54871452.083 ops/s
# Warmup Iteration   2: 110229114.784 ops/s
# Warmup Iteration   3: 98168725.073 ops/s
# Warmup Iteration   4: 116150908.876 ops/s
# Warmup Iteration   5: 116058132.653 ops/s
# Warmup Iteration   6: 116227904.155 ops/s
# Warmup Iteration   7: 116212276.319 ops/s
# Warmup Iteration   8: 115958870.561 ops/s
# Warmup Iteration   9: 115991962.155 ops/s
# Warmup Iteration  10: 115955324.497 ops/s
# Warmup Iteration  11: 115868521.933 ops/s
# Warmup Iteration  12: 116155324.076 ops/s
# Warmup Iteration  13: 115710314.881 ops/s
# Warmup Iteration  14: 115869808.431 ops/s
# Warmup Iteration  15: 115982694.025 ops/s
# Warmup Iteration  16: 115816927.166 ops/s
# Warmup Iteration  17: 115860769.429 ops/s
# Warmup Iteration  18: 115677193.490 ops/s
# Warmup Iteration  19: 116144066.897 ops/s
# Warmup Iteration  20: 116483596.826 ops/s
# Warmup Iteration  21: 116248075.451 ops/s
# Warmup Iteration  22: 116164606.235 ops/s
# Warmup Iteration  23: 115976804.956 ops/s
# Warmup Iteration  24: 115877382.700 ops/s
# Warmup Iteration  25: 115959782.376 ops/s
# Warmup Iteration  26: 115922336.564 ops/s
# Warmup Iteration  27: 116137828.485 ops/s
# Warmup Iteration  28: 116082608.620 ops/s
# Warmup Iteration  29: 115871166.407 ops/s
# Warmup Iteration  30: 115843057.598 ops/s
Iteration   1: 115903293.572 ops/s
Iteration   2: 115979163.550 ops/s
Iteration   3: 116099016.814 ops/s
Iteration   4: 116228466.007 ops/s
Iteration   5: 115970002.043 ops/s
Iteration   6: 116307123.336 ops/s
Iteration   7: 116191243.112 ops/s
Iteration   8: 116246118.568 ops/s
Iteration   9: 115849394.888 ops/s
Iteration  10: 116404975.754 ops/s
Iteration  11: 115781281.626 ops/s
Iteration  12: 116291517.980 ops/s
Iteration  13: 116064015.187 ops/s
Iteration  14: 116356304.556 ops/s
Iteration  15: 115811273.451 ops/s
Iteration  16: 115451709.053 ops/s
Iteration  17: 115937482.789 ops/s
Iteration  18: 116039795.835 ops/s
Iteration  19: 115549608.168 ops/s
Iteration  20: 115826276.117 ops/s
Iteration  21: 116327237.455 ops/s
Iteration  22: 115943593.946 ops/s
Iteration  23: 116079263.982 ops/s
Iteration  24: 116196324.733 ops/s
Iteration  25: 116056122.120 ops/s
Iteration  26: 116433635.843 ops/s
Iteration  27: 116054734.368 ops/s
Iteration  28: 116601584.583 ops/s
Iteration  29: 116108760.805 ops/s
Iteration  30: 116197481.190 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_min_without_comparator":
  116076226.714 ±(99.9%) 169982.278 ops/s [Average]
  (min, avg, max) = (115451709.053, 116076226.714, 116601584.583), stdev = 254421.491
  CI (99.9%): [115906244.436, 116246208.992] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt          Score        Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_min_without_comparator  thrpt   30  116076226.714 ± 169982.278  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 26546894.711 ops/s
# Warmup Iteration   2: 51164576.201 ops/s
# Warmup Iteration   3: 40868477.302 ops/s
# Warmup Iteration   4: 48546271.687 ops/s
# Warmup Iteration   5: 48453277.570 ops/s
# Warmup Iteration   6: 48525891.822 ops/s
# Warmup Iteration   7: 48463882.415 ops/s
# Warmup Iteration   8: 48535464.979 ops/s
# Warmup Iteration   9: 48580734.528 ops/s
# Warmup Iteration  10: 48498686.455 ops/s
# Warmup Iteration  11: 48606741.714 ops/s
# Warmup Iteration  12: 48178040.101 ops/s
# Warmup Iteration  13: 48539271.421 ops/s
# Warmup Iteration  14: 48456238.261 ops/s
# Warmup Iteration  15: 48408752.413 ops/s
# Warmup Iteration  16: 48508170.583 ops/s
# Warmup Iteration  17: 48549672.847 ops/s
# Warmup Iteration  18: 48456760.745 ops/s
# Warmup Iteration  19: 48423139.364 ops/s
# Warmup Iteration  20: 48557193.128 ops/s
# Warmup Iteration  21: 48551258.847 ops/s
# Warmup Iteration  22: 48561829.138 ops/s
# Warmup Iteration  23: 48451077.283 ops/s
# Warmup Iteration  24: 48515005.662 ops/s
# Warmup Iteration  25: 48540208.782 ops/s
# Warmup Iteration  26: 48523039.886 ops/s
# Warmup Iteration  27: 48540425.711 ops/s
# Warmup Iteration  28: 48450347.966 ops/s
# Warmup Iteration  29: 48590254.340 ops/s
# Warmup Iteration  30: 48580992.197 ops/s
Iteration   1: 48654018.598 ops/s
Iteration   2: 48612432.612 ops/s
Iteration   3: 48513731.217 ops/s
Iteration   4: 48465123.154 ops/s
Iteration   5: 48475282.106 ops/s
Iteration   6: 48480370.787 ops/s
Iteration   7: 48583066.916 ops/s
Iteration   8: 48478685.951 ops/s
Iteration   9: 48415870.434 ops/s
Iteration  10: 48487037.048 ops/s
Iteration  11: 48439035.012 ops/s
Iteration  12: 48434255.950 ops/s
Iteration  13: 48478237.129 ops/s
Iteration  14: 48521361.485 ops/s
Iteration  15: 48458620.736 ops/s
Iteration  16: 48479010.927 ops/s
Iteration  17: 48633531.218 ops/s
Iteration  18: 48587904.317 ops/s
Iteration  19: 48363113.679 ops/s
Iteration  20: 48536495.628 ops/s
Iteration  21: 48671176.758 ops/s
Iteration  22: 48544055.917 ops/s
Iteration  23: 48599190.615 ops/s
Iteration  24: 48496344.854 ops/s
Iteration  25: 48552263.129 ops/s
Iteration  26: 48453722.700 ops/s
Iteration  27: 48406941.349 ops/s
Iteration  28: 48629860.291 ops/s
Iteration  29: 48587549.665 ops/s
Iteration  30: 48539999.228 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_noneSatisfy":
  48519276.314 ±(99.9%) 52595.896 ops/s [Average]
  (min, avg, max) = (48363113.679, 48519276.314, 48671176.758), stdev = 78723.067
  CI (99.9%): [48466680.418, 48571872.209] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_noneSatisfy  thrpt   30  48519276.314 ± 52595.896  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_noneSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_noneSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 16222070.005 ops/s
# Warmup Iteration   2: 32032198.817 ops/s
# Warmup Iteration   3: 27057391.972 ops/s
# Warmup Iteration   4: 31666481.910 ops/s
# Warmup Iteration   5: 31727346.647 ops/s
# Warmup Iteration   6: 31736898.489 ops/s
# Warmup Iteration   7: 31738741.781 ops/s
# Warmup Iteration   8: 31665879.742 ops/s
# Warmup Iteration   9: 31592478.999 ops/s
# Warmup Iteration  10: 31760850.337 ops/s
# Warmup Iteration  11: 31741803.841 ops/s
# Warmup Iteration  12: 31751289.685 ops/s
# Warmup Iteration  13: 31708246.530 ops/s
# Warmup Iteration  14: 31805510.525 ops/s
# Warmup Iteration  15: 31831988.748 ops/s
# Warmup Iteration  16: 31821287.231 ops/s
# Warmup Iteration  17: 31749072.011 ops/s
# Warmup Iteration  18: 31795396.280 ops/s
# Warmup Iteration  19: 31635129.326 ops/s
# Warmup Iteration  20: 31766760.647 ops/s
# Warmup Iteration  21: 31748044.370 ops/s
# Warmup Iteration  22: 31815339.669 ops/s
# Warmup Iteration  23: 31822886.952 ops/s
# Warmup Iteration  24: 31806688.108 ops/s
# Warmup Iteration  25: 31828167.802 ops/s
# Warmup Iteration  26: 31776983.459 ops/s
# Warmup Iteration  27: 31754684.583 ops/s
# Warmup Iteration  28: 31825938.238 ops/s
# Warmup Iteration  29: 31835088.366 ops/s
# Warmup Iteration  30: 31772433.868 ops/s
Iteration   1: 31795553.067 ops/s
Iteration   2: 31716679.356 ops/s
Iteration   3: 31619150.476 ops/s
Iteration   4: 31780459.441 ops/s
Iteration   5: 31678939.134 ops/s
Iteration   6: 31759640.359 ops/s
Iteration   7: 31724233.573 ops/s
Iteration   8: 31826012.951 ops/s
Iteration   9: 31774224.881 ops/s
Iteration  10: 31713462.740 ops/s
Iteration  11: 31817401.908 ops/s
Iteration  12: 31774766.545 ops/s
Iteration  13: 31834412.086 ops/s
Iteration  14: 31866633.272 ops/s
Iteration  15: 31902174.574 ops/s
Iteration  16: 31898711.059 ops/s
Iteration  17: 31748378.214 ops/s
Iteration  18: 31797119.578 ops/s
Iteration  19: 31751042.626 ops/s
Iteration  20: 31807181.143 ops/s
Iteration  21: 31769094.300 ops/s
Iteration  22: 31650227.780 ops/s
Iteration  23: 31700681.244 ops/s
Iteration  24: 31792656.856 ops/s
Iteration  25: 31765944.768 ops/s
Iteration  26: 31779863.484 ops/s
Iteration  27: 31839514.679 ops/s
Iteration  28: 31795648.246 ops/s
Iteration  29: 31673796.412 ops/s
Iteration  30: 31730048.253 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_noneSatisfyWith":
  31769455.100 ±(99.9%) 45084.712 ops/s [Average]
  (min, avg, max) = (31619150.476, 31769455.100, 31902174.574), stdev = 67480.680
  CI (99.9%): [31724370.388, 31814539.813] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score       Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_noneSatisfyWith  thrpt   30  31769455.100 ± 45084.712  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_parallelStream$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_parallelStream

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 364083.634 ops/s
# Warmup Iteration   2: 845994.244 ops/s
# Warmup Iteration   3: 937915.415 ops/s
# Warmup Iteration   4: 943423.145 ops/s
# Warmup Iteration   5: 787747.696 ops/s
# Warmup Iteration   6: 942575.378 ops/s
# Warmup Iteration   7: 943854.035 ops/s
# Warmup Iteration   8: 942869.124 ops/s
# Warmup Iteration   9: 943174.621 ops/s
# Warmup Iteration  10: 943644.848 ops/s
# Warmup Iteration  11: 943183.234 ops/s
# Warmup Iteration  12: 942149.901 ops/s
# Warmup Iteration  13: 943796.661 ops/s
# Warmup Iteration  14: 944161.476 ops/s
# Warmup Iteration  15: 942635.736 ops/s
# Warmup Iteration  16: 938287.541 ops/s
# Warmup Iteration  17: 941378.517 ops/s
# Warmup Iteration  18: 941810.128 ops/s
# Warmup Iteration  19: 939983.827 ops/s
# Warmup Iteration  20: 944072.127 ops/s
# Warmup Iteration  21: 939704.972 ops/s
# Warmup Iteration  22: 935259.964 ops/s
# Warmup Iteration  23: 942108.000 ops/s
# Warmup Iteration  24: 943848.227 ops/s
# Warmup Iteration  25: 942441.140 ops/s
# Warmup Iteration  26: 943251.153 ops/s
# Warmup Iteration  27: 942519.085 ops/s
# Warmup Iteration  28: 943338.712 ops/s
# Warmup Iteration  29: 923853.301 ops/s
# Warmup Iteration  30: 925665.090 ops/s
Iteration   1: 943639.561 ops/s
Iteration   2: 942802.138 ops/s
Iteration   3: 942061.599 ops/s
Iteration   4: 943211.906 ops/s
Iteration   5: 942952.194 ops/s
Iteration   6: 942906.212 ops/s
Iteration   7: 942896.355 ops/s
Iteration   8: 944436.918 ops/s
Iteration   9: 938781.626 ops/s
Iteration  10: 938409.706 ops/s
Iteration  11: 936916.627 ops/s
Iteration  12: 939431.249 ops/s
Iteration  13: 936734.840 ops/s
Iteration  14: 938291.689 ops/s
Iteration  15: 936848.159 ops/s
Iteration  16: 943910.891 ops/s
Iteration  17: 942986.946 ops/s
Iteration  18: 943355.058 ops/s
Iteration  19: 943351.768 ops/s
Iteration  20: 945272.762 ops/s
Iteration  21: 942558.124 ops/s
Iteration  22: 943341.896 ops/s
Iteration  23: 942045.929 ops/s
Iteration  24: 937607.509 ops/s
Iteration  25: 941872.285 ops/s
Iteration  26: 943625.204 ops/s
Iteration  27: 943190.109 ops/s
Iteration  28: 942034.719 ops/s
Iteration  29: 944385.090 ops/s
Iteration  30: 943781.120 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_parallelStream":
  941788.006 ±(99.9%) 1705.494 ops/s [Average]
  (min, avg, max) = (936734.840, 941788.006, 945272.762), stdev = 2552.703
  CI (99.9%): [940082.513, 943493.500] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_parallelStream  thrpt   30  941788.006 ± 1705.494  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_partition$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_partition

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3746855.628 ops/s
# Warmup Iteration   2: 9551295.435 ops/s
# Warmup Iteration   3: 9428764.701 ops/s
# Warmup Iteration   4: 7972019.252 ops/s
# Warmup Iteration   5: 9468254.840 ops/s
# Warmup Iteration   6: 9459754.783 ops/s
# Warmup Iteration   7: 9463521.440 ops/s
# Warmup Iteration   8: 9471117.951 ops/s
# Warmup Iteration   9: 9453851.387 ops/s
# Warmup Iteration  10: 9459086.785 ops/s
# Warmup Iteration  11: 9411941.085 ops/s
# Warmup Iteration  12: 9463185.718 ops/s
# Warmup Iteration  13: 9462200.961 ops/s
# Warmup Iteration  14: 9452383.578 ops/s
# Warmup Iteration  15: 9467946.717 ops/s
# Warmup Iteration  16: 9456434.916 ops/s
# Warmup Iteration  17: 9945602.936 ops/s
# Warmup Iteration  18: 9949544.884 ops/s
# Warmup Iteration  19: 9966478.462 ops/s
# Warmup Iteration  20: 9966127.331 ops/s
# Warmup Iteration  21: 9963000.403 ops/s
# Warmup Iteration  22: 9958241.455 ops/s
# Warmup Iteration  23: 9980652.169 ops/s
# Warmup Iteration  24: 9968568.309 ops/s
# Warmup Iteration  25: 9962630.586 ops/s
# Warmup Iteration  26: 9958385.694 ops/s
# Warmup Iteration  27: 9964533.639 ops/s
# Warmup Iteration  28: 9961040.871 ops/s
# Warmup Iteration  29: 9940907.210 ops/s
# Warmup Iteration  30: 9960252.985 ops/s
Iteration   1: 9970177.142 ops/s
Iteration   2: 9960186.241 ops/s
Iteration   3: 9957652.616 ops/s
Iteration   4: 9966161.777 ops/s
Iteration   5: 9973041.950 ops/s
Iteration   6: 9958909.502 ops/s
Iteration   7: 9960268.890 ops/s
Iteration   8: 9975025.952 ops/s
Iteration   9: 9976036.695 ops/s
Iteration  10: 9959634.955 ops/s
Iteration  11: 9956300.869 ops/s
Iteration  12: 9964852.693 ops/s
Iteration  13: 9967472.223 ops/s
Iteration  14: 9958316.109 ops/s
Iteration  15: 9952050.198 ops/s
Iteration  16: 9967127.239 ops/s
Iteration  17: 9966715.709 ops/s
Iteration  18: 9964151.287 ops/s
Iteration  19: 9128412.023 ops/s
Iteration  20: 9738434.663 ops/s
Iteration  21: 9970968.844 ops/s
Iteration  22: 9990946.911 ops/s
Iteration  23: 9983980.497 ops/s
Iteration  24: 9978905.082 ops/s
Iteration  25: 9975779.944 ops/s
Iteration  26: 9969589.089 ops/s
Iteration  27: 9951213.020 ops/s
Iteration  28: 9988671.185 ops/s
Iteration  29: 9963752.514 ops/s
Iteration  30: 9962232.395 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_partition":
  9931898.940 ±(99.9%) 105366.793 ops/s [Average]
  (min, avg, max) = (9128412.023, 9931898.940, 9990946.911), stdev = 157708.067
  CI (99.9%): [9826532.147, 10037265.733] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score        Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_partition  thrpt   30  9931898.940 ± 105366.793  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_partitionWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_partitionWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3312646.714 ops/s
# Warmup Iteration   2: 7368297.733 ops/s
# Warmup Iteration   3: 7414341.663 ops/s
# Warmup Iteration   4: 6232857.325 ops/s
# Warmup Iteration   5: 7402718.981 ops/s
# Warmup Iteration   6: 7419372.487 ops/s
# Warmup Iteration   7: 7397789.614 ops/s
# Warmup Iteration   8: 7411199.690 ops/s
# Warmup Iteration   9: 7423657.404 ops/s
# Warmup Iteration  10: 7406280.624 ops/s
# Warmup Iteration  11: 7417035.310 ops/s
# Warmup Iteration  12: 7391182.382 ops/s
# Warmup Iteration  13: 7411712.105 ops/s
# Warmup Iteration  14: 7411407.429 ops/s
# Warmup Iteration  15: 7421501.092 ops/s
# Warmup Iteration  16: 7429253.659 ops/s
# Warmup Iteration  17: 7410190.047 ops/s
# Warmup Iteration  18: 7424296.865 ops/s
# Warmup Iteration  19: 7412512.922 ops/s
# Warmup Iteration  20: 7419161.016 ops/s
# Warmup Iteration  21: 7420609.482 ops/s
# Warmup Iteration  22: 7416770.784 ops/s
# Warmup Iteration  23: 7409910.082 ops/s
# Warmup Iteration  24: 7409798.328 ops/s
# Warmup Iteration  25: 7410523.316 ops/s
# Warmup Iteration  26: 7411322.178 ops/s
# Warmup Iteration  27: 7393570.950 ops/s
# Warmup Iteration  28: 7404694.250 ops/s
# Warmup Iteration  29: 7299102.518 ops/s
# Warmup Iteration  30: 7395045.308 ops/s
Iteration   1: 7411230.410 ops/s
Iteration   2: 7412248.545 ops/s
Iteration   3: 7416286.150 ops/s
Iteration   4: 7428704.353 ops/s
Iteration   5: 7424902.627 ops/s
Iteration   6: 7420516.662 ops/s
Iteration   7: 7401995.440 ops/s
Iteration   8: 7412913.278 ops/s
Iteration   9: 7420261.298 ops/s
Iteration  10: 7423162.948 ops/s
Iteration  11: 7426816.897 ops/s
Iteration  12: 7404431.902 ops/s
Iteration  13: 7413799.629 ops/s
Iteration  14: 7392192.778 ops/s
Iteration  15: 7375559.924 ops/s
Iteration  16: 7387609.010 ops/s
Iteration  17: 7421062.295 ops/s
Iteration  18: 7414352.714 ops/s
Iteration  19: 7428622.994 ops/s
Iteration  20: 7416162.511 ops/s
Iteration  21: 7404154.411 ops/s
Iteration  22: 7403663.633 ops/s
Iteration  23: 7417989.759 ops/s
Iteration  24: 7401063.798 ops/s
Iteration  25: 7424564.634 ops/s
Iteration  26: 7403704.625 ops/s
Iteration  27: 7416785.264 ops/s
Iteration  28: 7413627.952 ops/s
Iteration  29: 7406329.030 ops/s
Iteration  30: 7399035.100 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_partitionWhile":
  7411458.352 ±(99.9%) 8357.219 ops/s [Average]
  (min, avg, max) = (7375559.924, 7411458.352, 7428704.353), stdev = 12508.693
  CI (99.9%): [7403101.133, 7419815.571] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_partitionWhile  thrpt   30  7411458.352 ± 8357.219  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_partitionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_partitionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3045266.289 ops/s
# Warmup Iteration   2: 6751069.089 ops/s
# Warmup Iteration   3: 6805658.974 ops/s
# Warmup Iteration   4: 5735739.235 ops/s
# Warmup Iteration   5: 6814999.022 ops/s
# Warmup Iteration   6: 6807945.816 ops/s
# Warmup Iteration   7: 6811404.451 ops/s
# Warmup Iteration   8: 6811395.867 ops/s
# Warmup Iteration   9: 6814793.856 ops/s
# Warmup Iteration  10: 6811050.278 ops/s
# Warmup Iteration  11: 6806687.445 ops/s
# Warmup Iteration  12: 6808708.782 ops/s
# Warmup Iteration  13: 6809678.229 ops/s
# Warmup Iteration  14: 6812676.163 ops/s
# Warmup Iteration  15: 6806265.876 ops/s
# Warmup Iteration  16: 6813187.750 ops/s
# Warmup Iteration  17: 6814469.422 ops/s
# Warmup Iteration  18: 6820295.353 ops/s
# Warmup Iteration  19: 6792840.295 ops/s
# Warmup Iteration  20: 6816346.835 ops/s
# Warmup Iteration  21: 6815145.830 ops/s
# Warmup Iteration  22: 6813894.271 ops/s
# Warmup Iteration  23: 6816645.127 ops/s
# Warmup Iteration  24: 6806579.790 ops/s
# Warmup Iteration  25: 6812696.030 ops/s
# Warmup Iteration  26: 6807807.303 ops/s
# Warmup Iteration  27: 6811354.801 ops/s
# Warmup Iteration  28: 6801175.580 ops/s
# Warmup Iteration  29: 6811446.886 ops/s
# Warmup Iteration  30: 6814979.066 ops/s
Iteration   1: 6817550.666 ops/s
Iteration   2: 6809757.961 ops/s
Iteration   3: 6813161.580 ops/s
Iteration   4: 6816746.368 ops/s
Iteration   5: 6833068.183 ops/s
Iteration   6: 6815357.145 ops/s
Iteration   7: 6811314.671 ops/s
Iteration   8: 6818523.651 ops/s
Iteration   9: 6801875.301 ops/s
Iteration  10: 6804867.842 ops/s
Iteration  11: 6823517.940 ops/s
Iteration  12: 6806831.730 ops/s
Iteration  13: 6806004.036 ops/s
Iteration  14: 6810100.173 ops/s
Iteration  15: 6813936.685 ops/s
Iteration  16: 6812473.395 ops/s
Iteration  17: 6822095.369 ops/s
Iteration  18: 6811811.777 ops/s
Iteration  19: 6803589.081 ops/s
Iteration  20: 6813129.318 ops/s
Iteration  21: 6818253.124 ops/s
Iteration  22: 6810890.335 ops/s
Iteration  23: 6816936.711 ops/s
Iteration  24: 6807358.915 ops/s
Iteration  25: 6811083.603 ops/s
Iteration  26: 6814001.853 ops/s
Iteration  27: 6813677.025 ops/s
Iteration  28: 6806617.409 ops/s
Iteration  29: 6814876.155 ops/s
Iteration  30: 6826115.486 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_partitionWith":
  6813517.450 ±(99.9%) 4557.533 ops/s [Average]
  (min, avg, max) = (6801875.301, 6813517.450, 6833068.183), stdev = 6821.501
  CI (99.9%): [6808959.917, 6818074.982] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_partitionWith  thrpt   30  6813517.450 ± 4557.533  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6513549.006 ops/s
# Warmup Iteration   2: 14089930.845 ops/s
# Warmup Iteration   3: 11961836.997 ops/s
# Warmup Iteration   4: 14162700.322 ops/s
# Warmup Iteration   5: 14167509.784 ops/s
# Warmup Iteration   6: 14157099.706 ops/s
# Warmup Iteration   7: 14156829.141 ops/s
# Warmup Iteration   8: 14142968.359 ops/s
# Warmup Iteration   9: 14144765.199 ops/s
# Warmup Iteration  10: 14157205.259 ops/s
# Warmup Iteration  11: 14155801.266 ops/s
# Warmup Iteration  12: 14176667.258 ops/s
# Warmup Iteration  13: 14167585.437 ops/s
# Warmup Iteration  14: 14168519.889 ops/s
# Warmup Iteration  15: 14171073.150 ops/s
# Warmup Iteration  16: 14167227.377 ops/s
# Warmup Iteration  17: 14128916.270 ops/s
# Warmup Iteration  18: 14117366.903 ops/s
# Warmup Iteration  19: 14123332.578 ops/s
# Warmup Iteration  20: 14169861.631 ops/s
# Warmup Iteration  21: 14153091.269 ops/s
# Warmup Iteration  22: 14162244.448 ops/s
# Warmup Iteration  23: 14177407.845 ops/s
# Warmup Iteration  24: 14156376.574 ops/s
# Warmup Iteration  25: 14167557.801 ops/s
# Warmup Iteration  26: 14168575.659 ops/s
# Warmup Iteration  27: 14133297.077 ops/s
# Warmup Iteration  28: 14171877.277 ops/s
# Warmup Iteration  29: 14134486.908 ops/s
# Warmup Iteration  30: 14143684.939 ops/s
Iteration   1: 14169863.320 ops/s
Iteration   2: 14185934.090 ops/s
Iteration   3: 14172233.549 ops/s
Iteration   4: 14175743.134 ops/s
Iteration   5: 14110456.690 ops/s
Iteration   6: 14143288.554 ops/s
Iteration   7: 14094923.668 ops/s
Iteration   8: 14124398.886 ops/s
Iteration   9: 14177551.092 ops/s
Iteration  10: 14143356.194 ops/s
Iteration  11: 14156344.786 ops/s
Iteration  12: 14181316.433 ops/s
Iteration  13: 14190930.097 ops/s
Iteration  14: 14166181.030 ops/s
Iteration  15: 14175649.888 ops/s
Iteration  16: 14159469.418 ops/s
Iteration  17: 14179562.198 ops/s
Iteration  18: 14160841.410 ops/s
Iteration  19: 14165767.028 ops/s
Iteration  20: 14124478.418 ops/s
Iteration  21: 14135586.141 ops/s
Iteration  22: 14184475.788 ops/s
Iteration  23: 14165981.579 ops/s
Iteration  24: 14167012.656 ops/s
Iteration  25: 14196888.803 ops/s
Iteration  26: 14103433.827 ops/s
Iteration  27: 14151466.694 ops/s
Iteration  28: 14167821.723 ops/s
Iteration  29: 14152194.055 ops/s
Iteration  30: 14132682.965 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_reject":
  14157194.470 ±(99.9%) 17510.578 ops/s [Average]
  (min, avg, max) = (14094923.668, 14157194.470, 14196888.803), stdev = 26209.011
  CI (99.9%): [14139683.893, 14174705.048] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score       Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_reject  thrpt   30  14157194.470 ± 17510.578  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_rejectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_rejectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11242365.354 ops/s
# Warmup Iteration   2: 23885102.836 ops/s
# Warmup Iteration   3: 20226009.452 ops/s
# Warmup Iteration   4: 23637597.547 ops/s
# Warmup Iteration   5: 23792133.239 ops/s
# Warmup Iteration   6: 23785214.546 ops/s
# Warmup Iteration   7: 23740436.220 ops/s
# Warmup Iteration   8: 23672450.834 ops/s
# Warmup Iteration   9: 23725112.726 ops/s
# Warmup Iteration  10: 23646790.623 ops/s
# Warmup Iteration  11: 23714766.278 ops/s
# Warmup Iteration  12: 23748513.640 ops/s
# Warmup Iteration  13: 23698691.218 ops/s
# Warmup Iteration  14: 23711893.259 ops/s
# Warmup Iteration  15: 23697308.035 ops/s
# Warmup Iteration  16: 23675055.423 ops/s
# Warmup Iteration  17: 23758923.756 ops/s
# Warmup Iteration  18: 23690558.894 ops/s
# Warmup Iteration  19: 23738114.247 ops/s
# Warmup Iteration  20: 23586248.022 ops/s
# Warmup Iteration  21: 23803173.056 ops/s
# Warmup Iteration  22: 23766328.841 ops/s
# Warmup Iteration  23: 23635087.838 ops/s
# Warmup Iteration  24: 23769537.718 ops/s
# Warmup Iteration  25: 23726558.398 ops/s
# Warmup Iteration  26: 23675885.547 ops/s
# Warmup Iteration  27: 23601525.851 ops/s
# Warmup Iteration  28: 23692031.017 ops/s
# Warmup Iteration  29: 23705508.555 ops/s
# Warmup Iteration  30: 23731531.333 ops/s
Iteration   1: 23856506.465 ops/s
Iteration   2: 23560038.982 ops/s
Iteration   3: 23647376.306 ops/s
Iteration   4: 23742575.716 ops/s
Iteration   5: 23834486.104 ops/s
Iteration   6: 23733703.954 ops/s
Iteration   7: 23566245.077 ops/s
Iteration   8: 23767677.688 ops/s
Iteration   9: 23795614.320 ops/s
Iteration  10: 23534654.498 ops/s
Iteration  11: 23658441.369 ops/s
Iteration  12: 23701400.409 ops/s
Iteration  13: 23578840.760 ops/s
Iteration  14: 23798478.463 ops/s
Iteration  15: 23776825.703 ops/s
Iteration  16: 23708603.846 ops/s
Iteration  17: 23580197.388 ops/s
Iteration  18: 23771119.422 ops/s
Iteration  19: 23586721.568 ops/s
Iteration  20: 23680761.146 ops/s
Iteration  21: 23740338.206 ops/s
Iteration  22: 23808844.020 ops/s
Iteration  23: 23622517.091 ops/s
Iteration  24: 23561393.002 ops/s
Iteration  25: 23754869.402 ops/s
Iteration  26: 23804049.495 ops/s
Iteration  27: 23713543.385 ops/s
Iteration  28: 23689888.238 ops/s
Iteration  29: 23662878.562 ops/s
Iteration  30: 23756690.089 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_rejectWith":
  23699842.689 ±(99.9%) 61900.906 ops/s [Average]
  (min, avg, max) = (23534654.498, 23699842.689, 23856506.465), stdev = 92650.368
  CI (99.9%): [23637941.784, 23761743.595] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_rejectWith  thrpt   30  23699842.689 ± 61900.906  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_rejectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_rejectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5904301.427 ops/s
# Warmup Iteration   2: 14964444.677 ops/s
# Warmup Iteration   3: 12543437.726 ops/s
# Warmup Iteration   4: 14902204.604 ops/s
# Warmup Iteration   5: 14892678.410 ops/s
# Warmup Iteration   6: 14894004.807 ops/s
# Warmup Iteration   7: 14893727.451 ops/s
# Warmup Iteration   8: 14874389.259 ops/s
# Warmup Iteration   9: 14904715.385 ops/s
# Warmup Iteration  10: 14891387.658 ops/s
# Warmup Iteration  11: 14874376.506 ops/s
# Warmup Iteration  12: 14829653.140 ops/s
# Warmup Iteration  13: 14808185.954 ops/s
# Warmup Iteration  14: 14824349.658 ops/s
# Warmup Iteration  15: 14850896.052 ops/s
# Warmup Iteration  16: 14930461.615 ops/s
# Warmup Iteration  17: 14902763.303 ops/s
# Warmup Iteration  18: 14910210.181 ops/s
# Warmup Iteration  19: 14895176.785 ops/s
# Warmup Iteration  20: 14908382.874 ops/s
# Warmup Iteration  21: 14914746.691 ops/s
# Warmup Iteration  22: 14922956.688 ops/s
# Warmup Iteration  23: 14897753.636 ops/s
# Warmup Iteration  24: 14906090.642 ops/s
# Warmup Iteration  25: 14836835.467 ops/s
# Warmup Iteration  26: 14859210.476 ops/s
# Warmup Iteration  27: 14885559.059 ops/s
# Warmup Iteration  28: 14916252.210 ops/s
# Warmup Iteration  29: 14896884.525 ops/s
# Warmup Iteration  30: 14888566.619 ops/s
Iteration   1: 14906805.280 ops/s
Iteration   2: 14452526.394 ops/s
Iteration   3: 14919280.488 ops/s
Iteration   4: 14771004.896 ops/s
Iteration   5: 14395204.798 ops/s
Iteration   6: 14921638.055 ops/s
Iteration   7: 14903601.514 ops/s
Iteration   8: 14947328.399 ops/s
Iteration   9: 14907067.281 ops/s
Iteration  10: 14932535.982 ops/s
Iteration  11: 14934349.661 ops/s
Iteration  12: 14945712.077 ops/s
Iteration  13: 14910945.115 ops/s
Iteration  14: 14928949.535 ops/s
Iteration  15: 14848064.536 ops/s
Iteration  16: 14824864.269 ops/s
Iteration  17: 14920723.764 ops/s
Iteration  18: 14901226.099 ops/s
Iteration  19: 14876646.027 ops/s
Iteration  20: 14922065.273 ops/s
Iteration  21: 14930175.315 ops/s
Iteration  22: 14935870.131 ops/s
Iteration  23: 14920360.961 ops/s
Iteration  24: 14909588.282 ops/s
Iteration  25: 14893054.965 ops/s
Iteration  26: 14907786.317 ops/s
Iteration  27: 14861960.904 ops/s
Iteration  28: 14860359.319 ops/s
Iteration  29: 14893996.839 ops/s
Iteration  30: 14907881.337 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_rejectWithIndex":
  14869719.127 ±(99.9%) 84909.432 ops/s [Average]
  (min, avg, max) = (14395204.798, 14869719.127, 14947328.399), stdev = 127088.450
  CI (99.9%): [14784809.695, 14954628.559] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score       Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_rejectWithIndex  thrpt   30  14869719.127 ± 84909.432  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_rejectWithIndexWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_rejectWithIndexWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5801373.142 ops/s
# Warmup Iteration   2: 11246184.413 ops/s
# Warmup Iteration   3: 11627505.752 ops/s
# Warmup Iteration   4: 12325501.733 ops/s
# Warmup Iteration   5: 12438781.240 ops/s
# Warmup Iteration   6: 12341054.397 ops/s
# Warmup Iteration   7: 12453426.359 ops/s
# Warmup Iteration   8: 12418778.391 ops/s
# Warmup Iteration   9: 12396804.752 ops/s
# Warmup Iteration  10: 12449019.447 ops/s
# Warmup Iteration  11: 12385529.938 ops/s
# Warmup Iteration  12: 12371859.695 ops/s
# Warmup Iteration  13: 12358478.141 ops/s
# Warmup Iteration  14: 12329102.282 ops/s
# Warmup Iteration  15: 12389039.089 ops/s
# Warmup Iteration  16: 12361993.498 ops/s
# Warmup Iteration  17: 12460133.348 ops/s
# Warmup Iteration  18: 12367731.366 ops/s
# Warmup Iteration  19: 12391225.392 ops/s
# Warmup Iteration  20: 12414723.647 ops/s
# Warmup Iteration  21: 12328637.139 ops/s
# Warmup Iteration  22: 12374338.816 ops/s
# Warmup Iteration  23: 12414696.656 ops/s
# Warmup Iteration  24: 12405002.375 ops/s
# Warmup Iteration  25: 12443828.405 ops/s
# Warmup Iteration  26: 12401112.403 ops/s
# Warmup Iteration  27: 12346692.562 ops/s
# Warmup Iteration  28: 12416705.205 ops/s
# Warmup Iteration  29: 12389880.212 ops/s
# Warmup Iteration  30: 12450968.174 ops/s
Iteration   1: 12463883.120 ops/s
Iteration   2: 12416121.374 ops/s
Iteration   3: 12434879.041 ops/s
Iteration   4: 12451803.954 ops/s
Iteration   5: 12377682.720 ops/s
Iteration   6: 12408469.466 ops/s
Iteration   7: 12437617.291 ops/s
Iteration   8: 12402437.455 ops/s
Iteration   9: 12385581.864 ops/s
Iteration  10: 12400715.161 ops/s
Iteration  11: 12411651.396 ops/s
Iteration  12: 12464819.937 ops/s
Iteration  13: 12451047.296 ops/s
Iteration  14: 12419012.976 ops/s
Iteration  15: 12416447.235 ops/s
Iteration  16: 12391771.489 ops/s
Iteration  17: 12383436.295 ops/s
Iteration  18: 12438064.163 ops/s
Iteration  19: 12451051.434 ops/s
Iteration  20: 12439720.731 ops/s
Iteration  21: 12408573.054 ops/s
Iteration  22: 12342156.338 ops/s
Iteration  23: 12490859.937 ops/s
Iteration  24: 12348819.829 ops/s
Iteration  25: 12444762.079 ops/s
Iteration  26: 12408450.696 ops/s
Iteration  27: 12435555.499 ops/s
Iteration  28: 12383433.507 ops/s
Iteration  29: 12347858.171 ops/s
Iteration  30: 12469662.697 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_rejectWithIndexWithTarget":
  12417544.874 ±(99.9%) 24886.022 ops/s [Average]
  (min, avg, max) = (12342156.338, 12417544.874, 12490859.937), stdev = 37248.230
  CI (99.9%): [12392658.851, 12442430.896] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt         Score       Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_rejectWithIndexWithTarget  thrpt   30  12417544.874 ± 24886.022  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_rejectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_rejectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7595162.932 ops/s
# Warmup Iteration   2: 15987978.382 ops/s
# Warmup Iteration   3: 13961875.486 ops/s
# Warmup Iteration   4: 16385123.938 ops/s
# Warmup Iteration   5: 16346680.849 ops/s
# Warmup Iteration   6: 16375320.446 ops/s
# Warmup Iteration   7: 16385693.380 ops/s
# Warmup Iteration   8: 16391326.702 ops/s
# Warmup Iteration   9: 16304823.388 ops/s
# Warmup Iteration  10: 16389696.644 ops/s
# Warmup Iteration  11: 16317718.290 ops/s
# Warmup Iteration  12: 16342176.402 ops/s
# Warmup Iteration  13: 16313012.604 ops/s
# Warmup Iteration  14: 16396473.749 ops/s
# Warmup Iteration  15: 16360054.592 ops/s
# Warmup Iteration  16: 16416287.936 ops/s
# Warmup Iteration  17: 16388909.695 ops/s
# Warmup Iteration  18: 16373470.346 ops/s
# Warmup Iteration  19: 16391066.609 ops/s
# Warmup Iteration  20: 16389562.617 ops/s
# Warmup Iteration  21: 16336189.669 ops/s
# Warmup Iteration  22: 16281039.077 ops/s
# Warmup Iteration  23: 16407368.532 ops/s
# Warmup Iteration  24: 16427659.337 ops/s
# Warmup Iteration  25: 16373945.901 ops/s
# Warmup Iteration  26: 16349963.662 ops/s
# Warmup Iteration  27: 16397529.377 ops/s
# Warmup Iteration  28: 16361015.675 ops/s
# Warmup Iteration  29: 16332972.130 ops/s
# Warmup Iteration  30: 16378589.496 ops/s
Iteration   1: 16373704.834 ops/s
Iteration   2: 16377047.136 ops/s
Iteration   3: 16352636.536 ops/s
Iteration   4: 16300367.457 ops/s
Iteration   5: 16371664.575 ops/s
Iteration   6: 16397142.064 ops/s
Iteration   7: 16346696.568 ops/s
Iteration   8: 16350675.234 ops/s
Iteration   9: 16434225.865 ops/s
Iteration  10: 16397139.855 ops/s
Iteration  11: 16329938.702 ops/s
Iteration  12: 16337723.557 ops/s
Iteration  13: 16365697.888 ops/s
Iteration  14: 16391603.390 ops/s
Iteration  15: 16424721.709 ops/s
Iteration  16: 16395116.999 ops/s
Iteration  17: 16359284.624 ops/s
Iteration  18: 16412707.264 ops/s
Iteration  19: 16382383.054 ops/s
Iteration  20: 16291769.173 ops/s
Iteration  21: 16373585.767 ops/s
Iteration  22: 16420122.356 ops/s
Iteration  23: 16317270.295 ops/s
Iteration  24: 16241342.281 ops/s
Iteration  25: 16381459.380 ops/s
Iteration  26: 16312651.507 ops/s
Iteration  27: 16382088.563 ops/s
Iteration  28: 16308569.220 ops/s
Iteration  29: 16326767.213 ops/s
Iteration  30: 16325539.803 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_rejectWith_target":
  16359388.096 ±(99.9%) 29455.082 ops/s [Average]
  (min, avg, max) = (16241342.281, 16359388.096, 16434225.865), stdev = 44086.983
  CI (99.9%): [16329933.014, 16388843.178] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score       Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_rejectWith_target  thrpt   30  16359388.096 ± 29455.082  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_reject_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_reject_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10456706.451 ops/s
# Warmup Iteration   2: 20673290.606 ops/s
# Warmup Iteration   3: 18476731.274 ops/s
# Warmup Iteration   4: 21155917.627 ops/s
# Warmup Iteration   5: 21192791.352 ops/s
# Warmup Iteration   6: 21285089.639 ops/s
# Warmup Iteration   7: 21245670.007 ops/s
# Warmup Iteration   8: 21179587.237 ops/s
# Warmup Iteration   9: 21229271.553 ops/s
# Warmup Iteration  10: 21234259.679 ops/s
# Warmup Iteration  11: 21293214.218 ops/s
# Warmup Iteration  12: 21186211.745 ops/s
# Warmup Iteration  13: 21277113.222 ops/s
# Warmup Iteration  14: 21204248.624 ops/s
# Warmup Iteration  15: 21155128.367 ops/s
# Warmup Iteration  16: 21324402.537 ops/s
# Warmup Iteration  17: 21330672.644 ops/s
# Warmup Iteration  18: 21303261.112 ops/s
# Warmup Iteration  19: 21290350.156 ops/s
# Warmup Iteration  20: 21252317.615 ops/s
# Warmup Iteration  21: 21278113.830 ops/s
# Warmup Iteration  22: 21249452.659 ops/s
# Warmup Iteration  23: 21293518.401 ops/s
# Warmup Iteration  24: 21348410.601 ops/s
# Warmup Iteration  25: 21340327.092 ops/s
# Warmup Iteration  26: 21311233.742 ops/s
# Warmup Iteration  27: 21274010.101 ops/s
# Warmup Iteration  28: 21306894.966 ops/s
# Warmup Iteration  29: 21196730.771 ops/s
# Warmup Iteration  30: 21271589.107 ops/s
Iteration   1: 21328980.294 ops/s
Iteration   2: 21236371.925 ops/s
Iteration   3: 21278716.124 ops/s
Iteration   4: 21347886.526 ops/s
Iteration   5: 21184780.594 ops/s
Iteration   6: 21289706.074 ops/s
Iteration   7: 21281751.002 ops/s
Iteration   8: 21253171.887 ops/s
Iteration   9: 21372792.298 ops/s
Iteration  10: 21285011.807 ops/s
Iteration  11: 21403715.975 ops/s
Iteration  12: 21419123.922 ops/s
Iteration  13: 21409542.900 ops/s
Iteration  14: 21257759.375 ops/s
Iteration  15: 21265658.461 ops/s
Iteration  16: 21312182.683 ops/s
Iteration  17: 21240497.003 ops/s
Iteration  18: 21312991.512 ops/s
Iteration  19: 20945123.717 ops/s
Iteration  20: 21399066.460 ops/s
Iteration  21: 21409266.143 ops/s
Iteration  22: 21151133.200 ops/s
Iteration  23: 21363777.819 ops/s
Iteration  24: 21340335.053 ops/s
Iteration  25: 21291645.142 ops/s
Iteration  26: 21328346.129 ops/s
Iteration  27: 21381591.319 ops/s
Iteration  28: 21301300.003 ops/s
Iteration  29: 21370397.307 ops/s
Iteration  30: 21218835.928 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_reject_target":
  21299381.953 ±(99.9%) 64160.453 ops/s [Average]
  (min, avg, max) = (20945123.717, 21299381.953, 21419123.922), stdev = 96032.353
  CI (99.9%): [21235221.499, 21363542.406] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score       Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_reject_target  thrpt   30  21299381.953 ± 64160.453  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 769215.033 ops/s
# Warmup Iteration   2: 795821.360 ops/s
# Warmup Iteration   3: 1006529.424 ops/s
# Warmup Iteration   4: 1008119.567 ops/s
# Warmup Iteration   5: 1001439.273 ops/s
# Warmup Iteration   6: 1007798.990 ops/s
# Warmup Iteration   7: 1006486.263 ops/s
# Warmup Iteration   8: 1006379.529 ops/s
# Warmup Iteration   9: 1006268.374 ops/s
# Warmup Iteration  10: 1005319.490 ops/s
# Warmup Iteration  11: 1008980.150 ops/s
# Warmup Iteration  12: 859306.327 ops/s
# Warmup Iteration  13: 1004166.331 ops/s
# Warmup Iteration  14: 1002928.711 ops/s
# Warmup Iteration  15: 1007003.125 ops/s
# Warmup Iteration  16: 1004412.704 ops/s
# Warmup Iteration  17: 1075233.434 ops/s
# Warmup Iteration  18: 1070932.731 ops/s
# Warmup Iteration  19: 1075942.082 ops/s
# Warmup Iteration  20: 1075459.592 ops/s
# Warmup Iteration  21: 1073017.765 ops/s
# Warmup Iteration  22: 1071690.227 ops/s
# Warmup Iteration  23: 1074677.475 ops/s
# Warmup Iteration  24: 1074989.465 ops/s
# Warmup Iteration  25: 1072721.292 ops/s
# Warmup Iteration  26: 1071849.409 ops/s
# Warmup Iteration  27: 1075629.556 ops/s
# Warmup Iteration  28: 1074280.691 ops/s
# Warmup Iteration  29: 1075098.564 ops/s
# Warmup Iteration  30: 1073160.849 ops/s
Iteration   1: 1074662.261 ops/s
Iteration   2: 1071970.801 ops/s
Iteration   3: 1074307.327 ops/s
Iteration   4: 1076235.952 ops/s
Iteration   5: 1071123.313 ops/s
Iteration   6: 1069575.033 ops/s
Iteration   7: 1071946.267 ops/s
Iteration   8: 1074215.364 ops/s
Iteration   9: 1074230.768 ops/s
Iteration  10: 1074560.649 ops/s
Iteration  11: 1070801.988 ops/s
Iteration  12: 1072704.982 ops/s
Iteration  13: 1071909.561 ops/s
Iteration  14: 1072067.145 ops/s
Iteration  15: 1074807.771 ops/s
Iteration  16: 1071441.876 ops/s
Iteration  17: 1074913.388 ops/s
Iteration  18: 1073225.465 ops/s
Iteration  19: 1072937.639 ops/s
Iteration  20: 1072436.285 ops/s
Iteration  21: 1070851.391 ops/s
Iteration  22: 1069865.614 ops/s
Iteration  23: 1068569.160 ops/s
Iteration  24: 1071241.044 ops/s
Iteration  25: 1074453.159 ops/s
Iteration  26: 1067975.351 ops/s
Iteration  27: 1072595.399 ops/s
Iteration  28: 1075695.304 ops/s
Iteration  29: 1076626.993 ops/s
Iteration  30: 1073546.101 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_remove":
  1072716.445 ±(99.9%) 1454.772 ops/s [Average]
  (min, avg, max) = (1067975.351, 1072716.445, 1076626.993), stdev = 2177.435
  CI (99.9%): [1071261.673, 1074171.218] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_remove  thrpt   30  1072716.445 ± 1454.772  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 749785.310 ops/s
# Warmup Iteration   2: 790753.626 ops/s
# Warmup Iteration   3: 1000297.311 ops/s
# Warmup Iteration   4: 996866.311 ops/s
# Warmup Iteration   5: 991604.350 ops/s
# Warmup Iteration   6: 1002632.865 ops/s
# Warmup Iteration   7: 999166.182 ops/s
# Warmup Iteration   8: 996679.232 ops/s
# Warmup Iteration   9: 1002330.714 ops/s
# Warmup Iteration  10: 999860.626 ops/s
# Warmup Iteration  11: 999119.855 ops/s
# Warmup Iteration  12: 852249.997 ops/s
# Warmup Iteration  13: 1001925.242 ops/s
# Warmup Iteration  14: 1001771.439 ops/s
# Warmup Iteration  15: 1000955.842 ops/s
# Warmup Iteration  16: 999616.416 ops/s
# Warmup Iteration  17: 1019571.012 ops/s
# Warmup Iteration  18: 1065428.869 ops/s
# Warmup Iteration  19: 1069125.751 ops/s
# Warmup Iteration  20: 1068687.004 ops/s
# Warmup Iteration  21: 1068481.873 ops/s
# Warmup Iteration  22: 1067400.842 ops/s
# Warmup Iteration  23: 1069143.348 ops/s
# Warmup Iteration  24: 1068109.117 ops/s
# Warmup Iteration  25: 1067056.932 ops/s
# Warmup Iteration  26: 1067641.340 ops/s
# Warmup Iteration  27: 1069526.993 ops/s
# Warmup Iteration  28: 1066853.557 ops/s
# Warmup Iteration  29: 1065885.323 ops/s
# Warmup Iteration  30: 1067433.114 ops/s
Iteration   1: 1067658.731 ops/s
Iteration   2: 1067848.553 ops/s
Iteration   3: 1066402.232 ops/s
Iteration   4: 1068028.768 ops/s
Iteration   5: 1066232.493 ops/s
Iteration   6: 1067242.277 ops/s
Iteration   7: 1066969.498 ops/s
Iteration   8: 1068244.380 ops/s
Iteration   9: 1069684.328 ops/s
Iteration  10: 1067522.067 ops/s
Iteration  11: 1068243.680 ops/s
Iteration  12: 1068880.953 ops/s
Iteration  13: 1069151.780 ops/s
Iteration  14: 1068181.540 ops/s
Iteration  15: 1066108.439 ops/s
Iteration  16: 1066624.166 ops/s
Iteration  17: 1068163.167 ops/s
Iteration  18: 1063245.605 ops/s
Iteration  19: 1068215.480 ops/s
Iteration  20: 1066247.735 ops/s
Iteration  21: 1064019.078 ops/s
Iteration  22: 1064055.489 ops/s
Iteration  23: 1068677.401 ops/s
Iteration  24: 1069305.796 ops/s
Iteration  25: 1070812.723 ops/s
Iteration  26: 1066159.965 ops/s
Iteration  27: 1068522.629 ops/s
Iteration  28: 1067642.177 ops/s
Iteration  29: 1068355.785 ops/s
Iteration  30: 1062475.695 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_removeAll":
  1067297.420 ±(99.9%) 1271.881 ops/s [Average]
  (min, avg, max) = (1062475.695, 1067297.420, 1070812.723), stdev = 1903.692
  CI (99.9%): [1066025.539, 1068569.301] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_removeAll  thrpt   30  1067297.420 ± 1271.881  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_removeAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_removeAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 767637.695 ops/s
# Warmup Iteration   2: 799173.394 ops/s
# Warmup Iteration   3: 1009827.490 ops/s
# Warmup Iteration   4: 1005160.665 ops/s
# Warmup Iteration   5: 997814.600 ops/s
# Warmup Iteration   6: 1002480.867 ops/s
# Warmup Iteration   7: 1009063.129 ops/s
# Warmup Iteration   8: 1009817.044 ops/s
# Warmup Iteration   9: 1007261.040 ops/s
# Warmup Iteration  10: 1005032.059 ops/s
# Warmup Iteration  11: 1007097.330 ops/s
# Warmup Iteration  12: 856826.351 ops/s
# Warmup Iteration  13: 1006044.539 ops/s
# Warmup Iteration  14: 1009016.238 ops/s
# Warmup Iteration  15: 1008488.702 ops/s
# Warmup Iteration  16: 1007705.155 ops/s
# Warmup Iteration  17: 1072472.598 ops/s
# Warmup Iteration  18: 1071316.379 ops/s
# Warmup Iteration  19: 1070760.939 ops/s
# Warmup Iteration  20: 1069211.954 ops/s
# Warmup Iteration  21: 1067699.633 ops/s
# Warmup Iteration  22: 1065335.090 ops/s
# Warmup Iteration  23: 1072628.969 ops/s
# Warmup Iteration  24: 1068637.026 ops/s
# Warmup Iteration  25: 1068899.749 ops/s
# Warmup Iteration  26: 1068235.953 ops/s
# Warmup Iteration  27: 1069474.624 ops/s
# Warmup Iteration  28: 1069756.607 ops/s
# Warmup Iteration  29: 1071319.753 ops/s
# Warmup Iteration  30: 1072101.317 ops/s
Iteration   1: 1072188.522 ops/s
Iteration   2: 1070630.801 ops/s
Iteration   3: 1069955.581 ops/s
Iteration   4: 1070045.018 ops/s
Iteration   5: 1069464.347 ops/s
Iteration   6: 1069651.176 ops/s
Iteration   7: 1069957.742 ops/s
Iteration   8: 1071822.724 ops/s
Iteration   9: 1070663.600 ops/s
Iteration  10: 1071609.675 ops/s
Iteration  11: 1068015.620 ops/s
Iteration  12: 1072455.719 ops/s
Iteration  13: 1069352.437 ops/s
Iteration  14: 1072197.805 ops/s
Iteration  15: 1069872.190 ops/s
Iteration  16: 1070362.097 ops/s
Iteration  17: 1071593.143 ops/s
Iteration  18: 1069721.009 ops/s
Iteration  19: 1068076.566 ops/s
Iteration  20: 1068516.755 ops/s
Iteration  21: 1070556.842 ops/s
Iteration  22: 1071122.999 ops/s
Iteration  23: 1067859.327 ops/s
Iteration  24: 1072464.440 ops/s
Iteration  25: 1070410.330 ops/s
Iteration  26: 1070318.508 ops/s
Iteration  27: 1064270.789 ops/s
Iteration  28: 1069190.799 ops/s
Iteration  29: 1067835.482 ops/s
Iteration  30: 1066670.438 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_removeAtIndex":
  1069895.083 ±(99.9%) 1223.497 ops/s [Average]
  (min, avg, max) = (1064270.789, 1069895.083, 1072464.440), stdev = 1831.272
  CI (99.9%): [1068671.586, 1071118.579] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_removeAtIndex  thrpt   30  1069895.083 ± 1223.497  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_replaceAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_replaceAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 757289.355 ops/s
# Warmup Iteration   2: 783994.692 ops/s
# Warmup Iteration   3: 992088.892 ops/s
# Warmup Iteration   4: 990456.061 ops/s
# Warmup Iteration   5: 991631.781 ops/s
# Warmup Iteration   6: 993149.043 ops/s
# Warmup Iteration   7: 989900.949 ops/s
# Warmup Iteration   8: 997262.063 ops/s
# Warmup Iteration   9: 993370.225 ops/s
# Warmup Iteration  10: 992026.262 ops/s
# Warmup Iteration  11: 991475.140 ops/s
# Warmup Iteration  12: 844565.033 ops/s
# Warmup Iteration  13: 993398.813 ops/s
# Warmup Iteration  14: 993468.545 ops/s
# Warmup Iteration  15: 990689.027 ops/s
# Warmup Iteration  16: 991192.271 ops/s
# Warmup Iteration  17: 1056059.741 ops/s
# Warmup Iteration  18: 1056162.202 ops/s
# Warmup Iteration  19: 1056486.146 ops/s
# Warmup Iteration  20: 1055491.754 ops/s
# Warmup Iteration  21: 1056647.083 ops/s
# Warmup Iteration  22: 1055050.648 ops/s
# Warmup Iteration  23: 1053689.297 ops/s
# Warmup Iteration  24: 1055431.024 ops/s
# Warmup Iteration  25: 1056396.001 ops/s
# Warmup Iteration  26: 1051599.471 ops/s
# Warmup Iteration  27: 1053195.693 ops/s
# Warmup Iteration  28: 1055090.480 ops/s
# Warmup Iteration  29: 1054267.827 ops/s
# Warmup Iteration  30: 1055621.002 ops/s
Iteration   1: 1055986.863 ops/s
Iteration   2: 1056134.631 ops/s
Iteration   3: 1053703.763 ops/s
Iteration   4: 1056431.788 ops/s
Iteration   5: 1056651.947 ops/s
Iteration   6: 1053991.379 ops/s
Iteration   7: 1052599.241 ops/s
Iteration   8: 1052466.046 ops/s
Iteration   9: 1056205.303 ops/s
Iteration  10: 1056455.886 ops/s
Iteration  11: 1054733.295 ops/s
Iteration  12: 1053483.174 ops/s
Iteration  13: 1055534.272 ops/s
Iteration  14: 1057742.349 ops/s
Iteration  15: 1057715.205 ops/s
Iteration  16: 1054459.922 ops/s
Iteration  17: 1054726.323 ops/s
Iteration  18: 1054535.746 ops/s
Iteration  19: 1054224.148 ops/s
Iteration  20: 1050407.433 ops/s
Iteration  21: 1052501.633 ops/s
Iteration  22: 1052376.947 ops/s
Iteration  23: 1049382.802 ops/s
Iteration  24: 1052145.957 ops/s
Iteration  25: 1053534.765 ops/s
Iteration  26: 1053413.427 ops/s
Iteration  27: 1053647.290 ops/s
Iteration  28: 1053646.457 ops/s
Iteration  29: 1052869.704 ops/s
Iteration  30: 1055216.841 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_replaceAll":
  1054230.818 ±(99.9%) 1320.602 ops/s [Average]
  (min, avg, max) = (1049382.802, 1054230.818, 1057742.349), stdev = 1976.616
  CI (99.9%): [1052910.215, 1055551.420] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_replaceAll  thrpt   30  1054230.818 ± 1320.602  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 749451.430 ops/s
# Warmup Iteration   2: 797638.076 ops/s
# Warmup Iteration   3: 1007545.937 ops/s
# Warmup Iteration   4: 1005427.470 ops/s
# Warmup Iteration   5: 999563.626 ops/s
# Warmup Iteration   6: 1007724.358 ops/s
# Warmup Iteration   7: 1007496.438 ops/s
# Warmup Iteration   8: 1005956.753 ops/s
# Warmup Iteration   9: 1006911.649 ops/s
# Warmup Iteration  10: 1006542.365 ops/s
# Warmup Iteration  11: 1007421.394 ops/s
# Warmup Iteration  12: 860433.593 ops/s
# Warmup Iteration  13: 1006540.484 ops/s
# Warmup Iteration  14: 1006491.977 ops/s
# Warmup Iteration  15: 1010913.196 ops/s
# Warmup Iteration  16: 1008456.082 ops/s
# Warmup Iteration  17: 1076105.999 ops/s
# Warmup Iteration  18: 1075156.239 ops/s
# Warmup Iteration  19: 1068079.693 ops/s
# Warmup Iteration  20: 1067153.774 ops/s
# Warmup Iteration  21: 1072719.723 ops/s
# Warmup Iteration  22: 1073869.741 ops/s
# Warmup Iteration  23: 1074747.578 ops/s
# Warmup Iteration  24: 1072145.547 ops/s
# Warmup Iteration  25: 1068087.650 ops/s
# Warmup Iteration  26: 1074434.005 ops/s
# Warmup Iteration  27: 1067843.986 ops/s
# Warmup Iteration  28: 1070457.272 ops/s
# Warmup Iteration  29: 1068475.185 ops/s
# Warmup Iteration  30: 1067120.472 ops/s
Iteration   1: 1076370.006 ops/s
Iteration   2: 1073092.716 ops/s
Iteration   3: 1072284.539 ops/s
Iteration   4: 1075187.696 ops/s
Iteration   5: 1074723.381 ops/s
Iteration   6: 1071756.977 ops/s
Iteration   7: 1076570.620 ops/s
Iteration   8: 1075740.192 ops/s
Iteration   9: 1074461.091 ops/s
Iteration  10: 1072282.176 ops/s
Iteration  11: 1075191.068 ops/s
Iteration  12: 1075468.115 ops/s
Iteration  13: 1076468.295 ops/s
Iteration  14: 1074711.233 ops/s
Iteration  15: 1074348.773 ops/s
Iteration  16: 1074256.316 ops/s
Iteration  17: 1073644.511 ops/s
Iteration  18: 1074276.251 ops/s
Iteration  19: 1074952.393 ops/s
Iteration  20: 1071544.082 ops/s
Iteration  21: 1070940.098 ops/s
Iteration  22: 1072925.855 ops/s
Iteration  23: 1073798.563 ops/s
Iteration  24: 1075527.994 ops/s
Iteration  25: 1074133.144 ops/s
Iteration  26: 1073822.621 ops/s
Iteration  27: 1075826.183 ops/s
Iteration  28: 1072177.746 ops/s
Iteration  29: 1068720.042 ops/s
Iteration  30: 1075332.731 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_retainAll":
  1074017.847 ±(99.9%) 1214.893 ops/s [Average]
  (min, avg, max) = (1068720.042, 1074017.847, 1076570.620), stdev = 1818.395
  CI (99.9%): [1072802.954, 1075232.740] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_retainAll  thrpt   30  1074017.847 ± 1214.893  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_reverseForEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_reverseForEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 18491281.014 ops/s
# Warmup Iteration   2: 34495016.965 ops/s
# Warmup Iteration   3: 33626517.805 ops/s
# Warmup Iteration   4: 36013736.242 ops/s
# Warmup Iteration   5: 35982357.062 ops/s
# Warmup Iteration   6: 36000712.950 ops/s
# Warmup Iteration   7: 36020496.357 ops/s
# Warmup Iteration   8: 36063152.433 ops/s
# Warmup Iteration   9: 36200944.458 ops/s
# Warmup Iteration  10: 36156491.532 ops/s
# Warmup Iteration  11: 36087721.941 ops/s
# Warmup Iteration  12: 36017623.769 ops/s
# Warmup Iteration  13: 36004044.111 ops/s
# Warmup Iteration  14: 35982012.211 ops/s
# Warmup Iteration  15: 36250105.680 ops/s
# Warmup Iteration  16: 36048551.132 ops/s
# Warmup Iteration  17: 36103509.983 ops/s
# Warmup Iteration  18: 36138495.926 ops/s
# Warmup Iteration  19: 36067470.484 ops/s
# Warmup Iteration  20: 36020674.320 ops/s
# Warmup Iteration  21: 36129878.056 ops/s
# Warmup Iteration  22: 36039599.990 ops/s
# Warmup Iteration  23: 36019256.712 ops/s
# Warmup Iteration  24: 36070324.011 ops/s
# Warmup Iteration  25: 36122939.203 ops/s
# Warmup Iteration  26: 36176889.544 ops/s
# Warmup Iteration  27: 35981071.383 ops/s
# Warmup Iteration  28: 36039986.895 ops/s
# Warmup Iteration  29: 36063498.279 ops/s
# Warmup Iteration  30: 36001532.433 ops/s
Iteration   1: 36128541.643 ops/s
Iteration   2: 35909417.307 ops/s
Iteration   3: 36135565.275 ops/s
Iteration   4: 36006534.713 ops/s
Iteration   5: 35999567.724 ops/s
Iteration   6: 36186000.723 ops/s
Iteration   7: 36107125.180 ops/s
Iteration   8: 36164469.528 ops/s
Iteration   9: 36093986.908 ops/s
Iteration  10: 36085417.338 ops/s
Iteration  11: 36156702.706 ops/s
Iteration  12: 36062202.291 ops/s
Iteration  13: 36139478.037 ops/s
Iteration  14: 36208248.468 ops/s
Iteration  15: 36008330.400 ops/s
Iteration  16: 36055081.887 ops/s
Iteration  17: 35989211.466 ops/s
Iteration  18: 36124321.107 ops/s
Iteration  19: 35977546.963 ops/s
Iteration  20: 36033879.199 ops/s
Iteration  21: 36012755.199 ops/s
Iteration  22: 36167427.612 ops/s
Iteration  23: 36148662.256 ops/s
Iteration  24: 36104967.486 ops/s
Iteration  25: 36031857.596 ops/s
Iteration  26: 35942564.180 ops/s
Iteration  27: 35903170.385 ops/s
Iteration  28: 35948481.058 ops/s
Iteration  29: 35887159.787 ops/s
Iteration  30: 36177123.671 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_reverseForEach":
  36063193.270 ±(99.9%) 61526.480 ops/s [Average]
  (min, avg, max) = (35887159.787, 36063193.270, 36208248.468), stdev = 92089.945
  CI (99.9%): [36001666.790, 36124719.750] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score       Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_reverseForEach  thrpt   30  36063193.270 ± 61526.480  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_reverseForEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_reverseForEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 16605667.382 ops/s
# Warmup Iteration   2: 28419789.116 ops/s
# Warmup Iteration   3: 32421853.144 ops/s
# Warmup Iteration   4: 32622939.942 ops/s
# Warmup Iteration   5: 32517729.726 ops/s
# Warmup Iteration   6: 32435272.238 ops/s
# Warmup Iteration   7: 32595529.428 ops/s
# Warmup Iteration   8: 32350044.239 ops/s
# Warmup Iteration   9: 32471894.292 ops/s
# Warmup Iteration  10: 32586161.150 ops/s
# Warmup Iteration  11: 32542334.319 ops/s
# Warmup Iteration  12: 32539860.360 ops/s
# Warmup Iteration  13: 32336966.882 ops/s
# Warmup Iteration  14: 32148501.301 ops/s
# Warmup Iteration  15: 32432146.963 ops/s
# Warmup Iteration  16: 32434286.496 ops/s
# Warmup Iteration  17: 32398000.290 ops/s
# Warmup Iteration  18: 32407555.207 ops/s
# Warmup Iteration  19: 32492448.264 ops/s
# Warmup Iteration  20: 32569849.628 ops/s
# Warmup Iteration  21: 32610497.808 ops/s
# Warmup Iteration  22: 32493187.643 ops/s
# Warmup Iteration  23: 32440307.802 ops/s
# Warmup Iteration  24: 32434853.566 ops/s
# Warmup Iteration  25: 32501623.800 ops/s
# Warmup Iteration  26: 32438825.541 ops/s
# Warmup Iteration  27: 32523233.499 ops/s
# Warmup Iteration  28: 32463903.106 ops/s
# Warmup Iteration  29: 32459299.074 ops/s
# Warmup Iteration  30: 32629285.016 ops/s
Iteration   1: 32642715.440 ops/s
Iteration   2: 32591047.765 ops/s
Iteration   3: 32502645.780 ops/s
Iteration   4: 32491001.301 ops/s
Iteration   5: 32297986.822 ops/s
Iteration   6: 32455082.460 ops/s
Iteration   7: 32432759.416 ops/s
Iteration   8: 32423894.043 ops/s
Iteration   9: 32541760.530 ops/s
Iteration  10: 32499483.914 ops/s
Iteration  11: 32464661.542 ops/s
Iteration  12: 32265239.991 ops/s
Iteration  13: 32540229.021 ops/s
Iteration  14: 32348998.117 ops/s
Iteration  15: 32471764.515 ops/s
Iteration  16: 32348407.769 ops/s
Iteration  17: 32505083.653 ops/s
Iteration  18: 32264136.809 ops/s
Iteration  19: 32255770.659 ops/s
Iteration  20: 32161527.427 ops/s
Iteration  21: 32436513.132 ops/s
Iteration  22: 32444338.388 ops/s
Iteration  23: 32478880.088 ops/s
Iteration  24: 32511559.743 ops/s
Iteration  25: 32400264.976 ops/s
Iteration  26: 32287440.683 ops/s
Iteration  27: 32617677.234 ops/s
Iteration  28: 32595901.607 ops/s
Iteration  29: 32482089.490 ops/s
Iteration  30: 32592881.608 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_reverseForEachWithIndex":
  32445058.131 ±(99.9%) 80626.209 ops/s [Average]
  (min, avg, max) = (32161527.427, 32445058.131, 32642715.440), stdev = 120677.523
  CI (99.9%): [32364431.922, 32525684.340] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt         Score       Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_reverseForEachWithIndex  thrpt   30  32445058.131 ± 80626.209  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6049455.936 ops/s
# Warmup Iteration   2: 13230093.244 ops/s
# Warmup Iteration   3: 12300318.810 ops/s
# Warmup Iteration   4: 12154387.617 ops/s
# Warmup Iteration   5: 13279448.158 ops/s
# Warmup Iteration   6: 13275166.348 ops/s
# Warmup Iteration   7: 13277032.908 ops/s
# Warmup Iteration   8: 13286745.346 ops/s
# Warmup Iteration   9: 13251621.621 ops/s
# Warmup Iteration  10: 13275245.773 ops/s
# Warmup Iteration  11: 13268108.511 ops/s
# Warmup Iteration  12: 13282024.663 ops/s
# Warmup Iteration  13: 13221825.001 ops/s
# Warmup Iteration  14: 13185515.933 ops/s
# Warmup Iteration  15: 13249736.760 ops/s
# Warmup Iteration  16: 13279512.223 ops/s
# Warmup Iteration  17: 13288735.691 ops/s
# Warmup Iteration  18: 13269840.162 ops/s
# Warmup Iteration  19: 13282056.688 ops/s
# Warmup Iteration  20: 13286853.930 ops/s
# Warmup Iteration  21: 13293186.291 ops/s
# Warmup Iteration  22: 13276948.856 ops/s
# Warmup Iteration  23: 13288671.986 ops/s
# Warmup Iteration  24: 13280648.932 ops/s
# Warmup Iteration  25: 13282068.493 ops/s
# Warmup Iteration  26: 13272577.865 ops/s
# Warmup Iteration  27: 13226279.973 ops/s
# Warmup Iteration  28: 13197498.787 ops/s
# Warmup Iteration  29: 13266921.177 ops/s
# Warmup Iteration  30: 13286346.861 ops/s
Iteration   1: 13273073.625 ops/s
Iteration   2: 13265681.846 ops/s
Iteration   3: 13289211.318 ops/s
Iteration   4: 13261172.776 ops/s
Iteration   5: 13275906.834 ops/s
Iteration   6: 13194584.641 ops/s
Iteration   7: 13266029.728 ops/s
Iteration   8: 13171112.514 ops/s
Iteration   9: 13191416.267 ops/s
Iteration  10: 13256209.136 ops/s
Iteration  11: 13250612.653 ops/s
Iteration  12: 13287718.250 ops/s
Iteration  13: 13267093.734 ops/s
Iteration  14: 13268365.886 ops/s
Iteration  15: 13196691.932 ops/s
Iteration  16: 13291937.119 ops/s
Iteration  17: 13292244.535 ops/s
Iteration  18: 13285342.098 ops/s
Iteration  19: 13281430.925 ops/s
Iteration  20: 13216343.784 ops/s
Iteration  21: 13277382.404 ops/s
Iteration  22: 12796229.063 ops/s
Iteration  23: 13291943.710 ops/s
Iteration  24: 13282578.688 ops/s
Iteration  25: 13289567.187 ops/s
Iteration  26: 13285673.616 ops/s
Iteration  27: 13297068.274 ops/s
Iteration  28: 13293550.318 ops/s
Iteration  29: 13260678.906 ops/s
Iteration  30: 13264012.619 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_select":
  13247362.146 ±(99.9%) 61342.955 ops/s [Average]
  (min, avg, max) = (12796229.063, 13247362.146, 13297068.274), stdev = 91815.254
  CI (99.9%): [13186019.191, 13308705.101] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score       Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_select  thrpt   30  13247362.146 ± 61342.955  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_selectInstancesOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_selectInstancesOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9338287.261 ops/s
# Warmup Iteration   2: 15861915.212 ops/s
# Warmup Iteration   3: 17191895.363 ops/s
# Warmup Iteration   4: 17263543.042 ops/s
# Warmup Iteration   5: 17227451.856 ops/s
# Warmup Iteration   6: 14497740.383 ops/s
# Warmup Iteration   7: 17204370.113 ops/s
# Warmup Iteration   8: 17197916.037 ops/s
# Warmup Iteration   9: 17225561.373 ops/s
# Warmup Iteration  10: 16786859.888 ops/s
# Warmup Iteration  11: 17248518.758 ops/s
# Warmup Iteration  12: 17231273.592 ops/s
# Warmup Iteration  13: 17217297.460 ops/s
# Warmup Iteration  14: 17103826.944 ops/s
# Warmup Iteration  15: 17211644.624 ops/s
# Warmup Iteration  16: 17216101.519 ops/s
# Warmup Iteration  17: 17145618.176 ops/s
# Warmup Iteration  18: 17132936.656 ops/s
# Warmup Iteration  19: 17152239.412 ops/s
# Warmup Iteration  20: 17150391.836 ops/s
# Warmup Iteration  21: 17122576.334 ops/s
# Warmup Iteration  22: 17154129.079 ops/s
# Warmup Iteration  23: 17141812.075 ops/s
# Warmup Iteration  24: 16799999.056 ops/s
# Warmup Iteration  25: 17152714.630 ops/s
# Warmup Iteration  26: 17130347.500 ops/s
# Warmup Iteration  27: 17162722.905 ops/s
# Warmup Iteration  28: 17157598.444 ops/s
# Warmup Iteration  29: 17138466.149 ops/s
# Warmup Iteration  30: 17149880.825 ops/s
Iteration   1: 17174210.909 ops/s
Iteration   2: 17141164.738 ops/s
Iteration   3: 17127709.990 ops/s
Iteration   4: 17161006.892 ops/s
Iteration   5: 17110268.115 ops/s
Iteration   6: 17135553.137 ops/s
Iteration   7: 17093213.390 ops/s
Iteration   8: 17132752.256 ops/s
Iteration   9: 17116848.836 ops/s
Iteration  10: 17120301.482 ops/s
Iteration  11: 17150404.345 ops/s
Iteration  12: 17141663.813 ops/s
Iteration  13: 17143839.858 ops/s
Iteration  14: 17126072.632 ops/s
Iteration  15: 17130040.607 ops/s
Iteration  16: 17164904.501 ops/s
Iteration  17: 17131673.799 ops/s
Iteration  18: 17153680.308 ops/s
Iteration  19: 17123087.698 ops/s
Iteration  20: 17148193.434 ops/s
Iteration  21: 17138799.126 ops/s
Iteration  22: 17134619.880 ops/s
Iteration  23: 17143760.484 ops/s
Iteration  24: 17097236.726 ops/s
Iteration  25: 17131326.678 ops/s
Iteration  26: 17108638.094 ops/s
Iteration  27: 17158418.690 ops/s
Iteration  28: 17054072.633 ops/s
Iteration  29: 17108392.614 ops/s
Iteration  30: 17137677.220 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_selectInstancesOf":
  17131317.763 ±(99.9%) 16118.925 ops/s [Average]
  (min, avg, max) = (17054072.633, 17131317.763, 17174210.909), stdev = 24126.050
  CI (99.9%): [17115198.838, 17147436.688] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score       Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_selectInstancesOf  thrpt   30  17131317.763 ± 16118.925  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_selectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_selectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5084820.766 ops/s
# Warmup Iteration   2: 10961555.500 ops/s
# Warmup Iteration   3: 9298346.749 ops/s
# Warmup Iteration   4: 10947694.336 ops/s
# Warmup Iteration   5: 10983824.362 ops/s
# Warmup Iteration   6: 10979367.080 ops/s
# Warmup Iteration   7: 10960985.786 ops/s
# Warmup Iteration   8: 10965489.231 ops/s
# Warmup Iteration   9: 10949152.999 ops/s
# Warmup Iteration  10: 10961056.109 ops/s
# Warmup Iteration  11: 10947046.912 ops/s
# Warmup Iteration  12: 10922848.212 ops/s
# Warmup Iteration  13: 10955123.934 ops/s
# Warmup Iteration  14: 10968005.796 ops/s
# Warmup Iteration  15: 10947874.088 ops/s
# Warmup Iteration  16: 10927472.114 ops/s
# Warmup Iteration  17: 10984702.170 ops/s
# Warmup Iteration  18: 10958540.333 ops/s
# Warmup Iteration  19: 10959636.418 ops/s
# Warmup Iteration  20: 10932296.478 ops/s
# Warmup Iteration  21: 10785271.463 ops/s
# Warmup Iteration  22: 10953774.564 ops/s
# Warmup Iteration  23: 10931127.704 ops/s
# Warmup Iteration  24: 10928005.663 ops/s
# Warmup Iteration  25: 10956296.885 ops/s
# Warmup Iteration  26: 10962139.130 ops/s
# Warmup Iteration  27: 10950919.259 ops/s
# Warmup Iteration  28: 10944048.977 ops/s
# Warmup Iteration  29: 10965480.708 ops/s
# Warmup Iteration  30: 10956977.941 ops/s
Iteration   1: 10977058.152 ops/s
Iteration   2: 10986201.109 ops/s
Iteration   3: 10937654.802 ops/s
Iteration   4: 10964840.864 ops/s
Iteration   5: 10951533.767 ops/s
Iteration   6: 10942931.346 ops/s
Iteration   7: 10921716.017 ops/s
Iteration   8: 10875754.061 ops/s
Iteration   9: 10950252.844 ops/s
Iteration  10: 10971392.088 ops/s
Iteration  11: 10965965.905 ops/s
Iteration  12: 10951059.157 ops/s
Iteration  13: 10962563.999 ops/s
Iteration  14: 10948203.120 ops/s
Iteration  15: 10979943.905 ops/s
Iteration  16: 10953002.111 ops/s
Iteration  17: 10928624.413 ops/s
Iteration  18: 10928291.599 ops/s
Iteration  19: 10968240.625 ops/s
Iteration  20: 10975752.934 ops/s
Iteration  21: 10858357.315 ops/s
Iteration  22: 10963702.822 ops/s
Iteration  23: 10896977.391 ops/s
Iteration  24: 10988601.773 ops/s
Iteration  25: 10952159.419 ops/s
Iteration  26: 10981684.661 ops/s
Iteration  27: 10942556.473 ops/s
Iteration  28: 10958957.916 ops/s
Iteration  29: 10971574.145 ops/s
Iteration  30: 10949173.103 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_selectWith":
  10950157.595 ±(99.9%) 20379.196 ops/s [Average]
  (min, avg, max) = (10858357.315, 10950157.595, 10988601.773), stdev = 30502.624
  CI (99.9%): [10929778.398, 10970536.791] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_selectWith  thrpt   30  10950157.595 ± 20379.196  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_selectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_selectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6896645.289 ops/s
# Warmup Iteration   2: 14853737.870 ops/s
# Warmup Iteration   3: 12629273.542 ops/s
# Warmup Iteration   4: 15026552.960 ops/s
# Warmup Iteration   5: 14995175.241 ops/s
# Warmup Iteration   6: 15035098.438 ops/s
# Warmup Iteration   7: 15012540.808 ops/s
# Warmup Iteration   8: 14963998.648 ops/s
# Warmup Iteration   9: 15024451.467 ops/s
# Warmup Iteration  10: 14989399.883 ops/s
# Warmup Iteration  11: 14979391.429 ops/s
# Warmup Iteration  12: 14977900.660 ops/s
# Warmup Iteration  13: 14991102.742 ops/s
# Warmup Iteration  14: 15047867.081 ops/s
# Warmup Iteration  15: 14980921.320 ops/s
# Warmup Iteration  16: 14991180.245 ops/s
# Warmup Iteration  17: 15068487.108 ops/s
# Warmup Iteration  18: 15048279.015 ops/s
# Warmup Iteration  19: 15040860.631 ops/s
# Warmup Iteration  20: 15046893.984 ops/s
# Warmup Iteration  21: 15036814.185 ops/s
# Warmup Iteration  22: 15074199.182 ops/s
# Warmup Iteration  23: 15054148.859 ops/s
# Warmup Iteration  24: 15039595.020 ops/s
# Warmup Iteration  25: 15053280.407 ops/s
# Warmup Iteration  26: 15045213.494 ops/s
# Warmup Iteration  27: 15038482.315 ops/s
# Warmup Iteration  28: 15069454.436 ops/s
# Warmup Iteration  29: 15075350.105 ops/s
# Warmup Iteration  30: 15037627.761 ops/s
Iteration   1: 15056611.344 ops/s
Iteration   2: 14972386.754 ops/s
Iteration   3: 14909319.701 ops/s
Iteration   4: 15037278.325 ops/s
Iteration   5: 14989776.974 ops/s
Iteration   6: 15041396.745 ops/s
Iteration   7: 15101048.993 ops/s
Iteration   8: 15065480.043 ops/s
Iteration   9: 15080488.718 ops/s
Iteration  10: 14985492.300 ops/s
Iteration  11: 15048134.939 ops/s
Iteration  12: 15044297.616 ops/s
Iteration  13: 15022786.161 ops/s
Iteration  14: 15070609.949 ops/s
Iteration  15: 15050512.570 ops/s
Iteration  16: 15031105.121 ops/s
Iteration  17: 15064268.575 ops/s
Iteration  18: 15064693.364 ops/s
Iteration  19: 15049086.647 ops/s
Iteration  20: 14963911.741 ops/s
Iteration  21: 15040987.369 ops/s
Iteration  22: 15034138.948 ops/s
Iteration  23: 15046056.563 ops/s
Iteration  24: 15026601.345 ops/s
Iteration  25: 15047942.941 ops/s
Iteration  26: 15084417.804 ops/s
Iteration  27: 15052750.117 ops/s
Iteration  28: 15047255.708 ops/s
Iteration  29: 15042974.039 ops/s
Iteration  30: 15060988.783 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_selectWithIndex":
  15037760.007 ±(99.9%) 26266.469 ops/s [Average]
  (min, avg, max) = (14909319.701, 15037760.007, 15101048.993), stdev = 39314.418
  CI (99.9%): [15011493.537, 15064026.476] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score       Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_selectWithIndex  thrpt   30  15037760.007 ± 26266.469  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_selectWithIndexWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_selectWithIndexWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5873347.819 ops/s
# Warmup Iteration   2: 11185429.672 ops/s
# Warmup Iteration   3: 11640828.840 ops/s
# Warmup Iteration   4: 12440517.375 ops/s
# Warmup Iteration   5: 12347276.804 ops/s
# Warmup Iteration   6: 12435165.399 ops/s
# Warmup Iteration   7: 12379557.454 ops/s
# Warmup Iteration   8: 12427754.130 ops/s
# Warmup Iteration   9: 12406718.091 ops/s
# Warmup Iteration  10: 12367386.591 ops/s
# Warmup Iteration  11: 12425421.536 ops/s
# Warmup Iteration  12: 12431225.537 ops/s
# Warmup Iteration  13: 12321412.181 ops/s
# Warmup Iteration  14: 12398178.235 ops/s
# Warmup Iteration  15: 12451171.761 ops/s
# Warmup Iteration  16: 12396954.762 ops/s
# Warmup Iteration  17: 12353962.532 ops/s
# Warmup Iteration  18: 12398858.634 ops/s
# Warmup Iteration  19: 12406437.322 ops/s
# Warmup Iteration  20: 12354569.982 ops/s
# Warmup Iteration  21: 12378977.343 ops/s
# Warmup Iteration  22: 12403142.730 ops/s
# Warmup Iteration  23: 12385048.444 ops/s
# Warmup Iteration  24: 12374643.354 ops/s
# Warmup Iteration  25: 12417022.780 ops/s
# Warmup Iteration  26: 12408225.791 ops/s
# Warmup Iteration  27: 12350528.745 ops/s
# Warmup Iteration  28: 12293374.510 ops/s
# Warmup Iteration  29: 12432623.927 ops/s
# Warmup Iteration  30: 12349390.640 ops/s
Iteration   1: 12392782.217 ops/s
Iteration   2: 12399132.322 ops/s
Iteration   3: 12392881.860 ops/s
Iteration   4: 12438747.675 ops/s
Iteration   5: 12430383.185 ops/s
Iteration   6: 12490097.482 ops/s
Iteration   7: 12501017.360 ops/s
Iteration   8: 12435741.301 ops/s
Iteration   9: 12417378.835 ops/s
Iteration  10: 12444368.203 ops/s
Iteration  11: 12492552.872 ops/s
Iteration  12: 12475338.647 ops/s
Iteration  13: 12358195.222 ops/s
Iteration  14: 12328810.897 ops/s
Iteration  15: 12434049.067 ops/s
Iteration  16: 12410753.300 ops/s
Iteration  17: 12280730.934 ops/s
Iteration  18: 12419533.707 ops/s
Iteration  19: 12408171.348 ops/s
Iteration  20: 12441886.422 ops/s
Iteration  21: 12419783.318 ops/s
Iteration  22: 12449837.064 ops/s
Iteration  23: 12470758.698 ops/s
Iteration  24: 12321316.681 ops/s
Iteration  25: 12370924.543 ops/s
Iteration  26: 12461792.770 ops/s
Iteration  27: 12459113.276 ops/s
Iteration  28: 12358973.148 ops/s
Iteration  29: 12375327.176 ops/s
Iteration  30: 12315747.783 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_selectWithIndexWithTarget":
  12413204.244 ±(99.9%) 37126.339 ops/s [Average]
  (min, avg, max) = (12280730.934, 12413204.244, 12501017.360), stdev = 55568.961
  CI (99.9%): [12376077.905, 12450330.583] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt         Score       Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_selectWithIndexWithTarget  thrpt   30  12413204.244 ± 37126.339  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_selectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_selectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6589669.005 ops/s
# Warmup Iteration   2: 13636716.342 ops/s
# Warmup Iteration   3: 12209718.396 ops/s
# Warmup Iteration   4: 14375568.405 ops/s
# Warmup Iteration   5: 14360084.286 ops/s
# Warmup Iteration   6: 14385635.528 ops/s
# Warmup Iteration   7: 14374220.920 ops/s
# Warmup Iteration   8: 14378761.904 ops/s
# Warmup Iteration   9: 14363452.010 ops/s
# Warmup Iteration  10: 14375685.347 ops/s
# Warmup Iteration  11: 14365687.146 ops/s
# Warmup Iteration  12: 14352311.462 ops/s
# Warmup Iteration  13: 14406792.529 ops/s
# Warmup Iteration  14: 14387573.638 ops/s
# Warmup Iteration  15: 14385756.503 ops/s
# Warmup Iteration  16: 14390884.934 ops/s
# Warmup Iteration  17: 14344177.207 ops/s
# Warmup Iteration  18: 14343407.347 ops/s
# Warmup Iteration  19: 14360482.807 ops/s
# Warmup Iteration  20: 14345843.061 ops/s
# Warmup Iteration  21: 14374653.070 ops/s
# Warmup Iteration  22: 14346780.907 ops/s
# Warmup Iteration  23: 14336478.123 ops/s
# Warmup Iteration  24: 14373795.931 ops/s
# Warmup Iteration  25: 14308890.089 ops/s
# Warmup Iteration  26: 14346907.532 ops/s
# Warmup Iteration  27: 14358678.811 ops/s
# Warmup Iteration  28: 14343397.352 ops/s
# Warmup Iteration  29: 14335828.427 ops/s
# Warmup Iteration  30: 14326406.101 ops/s
Iteration   1: 14287926.996 ops/s
Iteration   2: 14376085.031 ops/s
Iteration   3: 14321073.321 ops/s
Iteration   4: 14341704.972 ops/s
Iteration   5: 14364937.434 ops/s
Iteration   6: 14356573.992 ops/s
Iteration   7: 14337140.595 ops/s
Iteration   8: 14285246.628 ops/s
Iteration   9: 14335990.089 ops/s
Iteration  10: 14333902.620 ops/s
Iteration  11: 14344311.491 ops/s
Iteration  12: 14326493.132 ops/s
Iteration  13: 14375132.841 ops/s
Iteration  14: 14347352.981 ops/s
Iteration  15: 14348902.984 ops/s
Iteration  16: 14346973.921 ops/s
Iteration  17: 14369450.180 ops/s
Iteration  18: 14281064.285 ops/s
Iteration  19: 14318676.245 ops/s
Iteration  20: 14292504.200 ops/s
Iteration  21: 14330095.098 ops/s
Iteration  22: 14329077.807 ops/s
Iteration  23: 14370713.917 ops/s
Iteration  24: 14284651.031 ops/s
Iteration  25: 14415888.516 ops/s
Iteration  26: 14334630.047 ops/s
Iteration  27: 14351779.846 ops/s
Iteration  28: 14340201.717 ops/s
Iteration  29: 14341576.697 ops/s
Iteration  30: 14350883.330 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_selectWith_target":
  14338031.398 ±(99.9%) 20444.472 ops/s [Average]
  (min, avg, max) = (14281064.285, 14338031.398, 14415888.516), stdev = 30600.325
  CI (99.9%): [14317586.927, 14358475.870] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score       Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_selectWith_target  thrpt   30  14338031.398 ± 20444.472  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_select_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_select_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10636684.113 ops/s
# Warmup Iteration   2: 20632166.712 ops/s
# Warmup Iteration   3: 18718696.142 ops/s
# Warmup Iteration   4: 21131930.740 ops/s
# Warmup Iteration   5: 21014504.076 ops/s
# Warmup Iteration   6: 21172820.667 ops/s
# Warmup Iteration   7: 21037382.948 ops/s
# Warmup Iteration   8: 21152712.728 ops/s
# Warmup Iteration   9: 21183036.731 ops/s
# Warmup Iteration  10: 21068467.826 ops/s
# Warmup Iteration  11: 21082854.908 ops/s
# Warmup Iteration  12: 21201886.388 ops/s
# Warmup Iteration  13: 21196974.267 ops/s
# Warmup Iteration  14: 21194856.359 ops/s
# Warmup Iteration  15: 21186937.844 ops/s
# Warmup Iteration  16: 21115767.110 ops/s
# Warmup Iteration  17: 21024170.886 ops/s
# Warmup Iteration  18: 21005315.825 ops/s
# Warmup Iteration  19: 20991361.585 ops/s
# Warmup Iteration  20: 21031717.144 ops/s
# Warmup Iteration  21: 21028287.086 ops/s
# Warmup Iteration  22: 20993954.741 ops/s
# Warmup Iteration  23: 21072498.794 ops/s
# Warmup Iteration  24: 21128573.859 ops/s
# Warmup Iteration  25: 21098487.422 ops/s
# Warmup Iteration  26: 20963961.510 ops/s
# Warmup Iteration  27: 20938589.538 ops/s
# Warmup Iteration  28: 20960364.126 ops/s
# Warmup Iteration  29: 21032714.126 ops/s
# Warmup Iteration  30: 20963971.661 ops/s
Iteration   1: 20953566.929 ops/s
Iteration   2: 21016130.483 ops/s
Iteration   3: 20960701.687 ops/s
Iteration   4: 20974071.581 ops/s
Iteration   5: 20977863.518 ops/s
Iteration   6: 20879478.478 ops/s
Iteration   7: 21004359.332 ops/s
Iteration   8: 21020896.665 ops/s
Iteration   9: 20978026.791 ops/s
Iteration  10: 20962977.820 ops/s
Iteration  11: 21046594.901 ops/s
Iteration  12: 21026647.764 ops/s
Iteration  13: 21135880.427 ops/s
Iteration  14: 21026734.249 ops/s
Iteration  15: 21021817.638 ops/s
Iteration  16: 20896965.296 ops/s
Iteration  17: 20968199.035 ops/s
Iteration  18: 21011509.132 ops/s
Iteration  19: 20945279.000 ops/s
Iteration  20: 20966021.406 ops/s
Iteration  21: 20951777.013 ops/s
Iteration  22: 20985474.364 ops/s
Iteration  23: 21036981.813 ops/s
Iteration  24: 20993290.578 ops/s
Iteration  25: 21069026.999 ops/s
Iteration  26: 21010325.487 ops/s
Iteration  27: 20900099.628 ops/s
Iteration  28: 21024255.000 ops/s
Iteration  29: 20848008.348 ops/s
Iteration  30: 20836404.665 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_select_target":
  20980978.868 ±(99.9%) 42762.349 ops/s [Average]
  (min, avg, max) = (20836404.665, 20980978.868, 21135880.427), stdev = 64004.676
  CI (99.9%): [20938216.518, 21023741.217] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score       Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_select_target  thrpt   30  20980978.868 ± 42762.349  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_set$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_set

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 768129.480 ops/s
# Warmup Iteration   2: 797513.628 ops/s
# Warmup Iteration   3: 1013619.122 ops/s
# Warmup Iteration   4: 1007716.208 ops/s
# Warmup Iteration   5: 1004140.930 ops/s
# Warmup Iteration   6: 1005240.835 ops/s
# Warmup Iteration   7: 1008135.674 ops/s
# Warmup Iteration   8: 1011062.647 ops/s
# Warmup Iteration   9: 1009434.963 ops/s
# Warmup Iteration  10: 1010997.400 ops/s
# Warmup Iteration  11: 1011655.537 ops/s
# Warmup Iteration  12: 858203.937 ops/s
# Warmup Iteration  13: 1007050.479 ops/s
# Warmup Iteration  14: 1005212.035 ops/s
# Warmup Iteration  15: 1010936.781 ops/s
# Warmup Iteration  16: 1010397.976 ops/s
# Warmup Iteration  17: 1077936.135 ops/s
# Warmup Iteration  18: 1072595.422 ops/s
# Warmup Iteration  19: 1075160.195 ops/s
# Warmup Iteration  20: 1076123.007 ops/s
# Warmup Iteration  21: 1077124.787 ops/s
# Warmup Iteration  22: 1078045.751 ops/s
# Warmup Iteration  23: 1080372.992 ops/s
# Warmup Iteration  24: 1079631.607 ops/s
# Warmup Iteration  25: 1083845.040 ops/s
# Warmup Iteration  26: 1080256.576 ops/s
# Warmup Iteration  27: 1080472.300 ops/s
# Warmup Iteration  28: 1082021.409 ops/s
# Warmup Iteration  29: 1082547.200 ops/s
# Warmup Iteration  30: 1081394.765 ops/s
Iteration   1: 1077373.805 ops/s
Iteration   2: 1071697.992 ops/s
Iteration   3: 1079288.438 ops/s
Iteration   4: 1077355.405 ops/s
Iteration   5: 1081581.265 ops/s
Iteration   6: 1080248.394 ops/s
Iteration   7: 1080476.577 ops/s
Iteration   8: 1080272.652 ops/s
Iteration   9: 1083136.259 ops/s
Iteration  10: 1080032.757 ops/s
Iteration  11: 1078552.807 ops/s
Iteration  12: 1081987.299 ops/s
Iteration  13: 1083140.119 ops/s
Iteration  14: 1080426.228 ops/s
Iteration  15: 1082144.211 ops/s
Iteration  16: 1082139.440 ops/s
Iteration  17: 1074365.933 ops/s
Iteration  18: 1079554.866 ops/s
Iteration  19: 1080795.604 ops/s
Iteration  20: 1080984.018 ops/s
Iteration  21: 1082936.824 ops/s
Iteration  22: 1078379.365 ops/s
Iteration  23: 1080595.139 ops/s
Iteration  24: 1077822.111 ops/s
Iteration  25: 1081392.962 ops/s
Iteration  26: 1081450.316 ops/s
Iteration  27: 1075294.483 ops/s
Iteration  28: 1079503.995 ops/s
Iteration  29: 1081125.316 ops/s
Iteration  30: 1079723.307 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_set":
  1079792.596 ±(99.9%) 1744.242 ops/s [Average]
  (min, avg, max) = (1071697.992, 1079792.596, 1083140.119), stdev = 2610.699
  CI (99.9%): [1078048.354, 1081536.838] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_set  thrpt   30  1079792.596 ± 1744.242  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_sort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_sort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 767612.880 ops/s
# Warmup Iteration   2: 798151.418 ops/s
# Warmup Iteration   3: 1013782.778 ops/s
# Warmup Iteration   4: 1012104.506 ops/s
# Warmup Iteration   5: 1014332.143 ops/s
# Warmup Iteration   6: 1015686.299 ops/s
# Warmup Iteration   7: 1013691.412 ops/s
# Warmup Iteration   8: 1012888.681 ops/s
# Warmup Iteration   9: 1009261.770 ops/s
# Warmup Iteration  10: 1012846.980 ops/s
# Warmup Iteration  11: 1015631.638 ops/s
# Warmup Iteration  12: 860962.045 ops/s
# Warmup Iteration  13: 1011740.064 ops/s
# Warmup Iteration  14: 1011014.347 ops/s
# Warmup Iteration  15: 1011250.873 ops/s
# Warmup Iteration  16: 1011671.242 ops/s
# Warmup Iteration  17: 1070083.493 ops/s
# Warmup Iteration  18: 1068429.273 ops/s
# Warmup Iteration  19: 1075021.841 ops/s
# Warmup Iteration  20: 1071488.449 ops/s
# Warmup Iteration  21: 1071784.623 ops/s
# Warmup Iteration  22: 1071780.218 ops/s
# Warmup Iteration  23: 1072630.523 ops/s
# Warmup Iteration  24: 1072398.754 ops/s
# Warmup Iteration  25: 1073022.711 ops/s
# Warmup Iteration  26: 1071799.455 ops/s
# Warmup Iteration  27: 1072482.233 ops/s
# Warmup Iteration  28: 1072025.011 ops/s
# Warmup Iteration  29: 1074996.151 ops/s
# Warmup Iteration  30: 1072465.159 ops/s
Iteration   1: 1072137.138 ops/s
Iteration   2: 1072298.027 ops/s
Iteration   3: 1072347.637 ops/s
Iteration   4: 1070242.512 ops/s
Iteration   5: 1071677.489 ops/s
Iteration   6: 1072720.531 ops/s
Iteration   7: 1072786.316 ops/s
Iteration   8: 1067696.576 ops/s
Iteration   9: 1066471.094 ops/s
Iteration  10: 1067362.155 ops/s
Iteration  11: 1066539.521 ops/s
Iteration  12: 1073453.619 ops/s
Iteration  13: 1075255.438 ops/s
Iteration  14: 1073005.273 ops/s
Iteration  15: 1072361.580 ops/s
Iteration  16: 1074442.770 ops/s
Iteration  17: 1073593.557 ops/s
Iteration  18: 1073651.309 ops/s
Iteration  19: 1069791.874 ops/s
Iteration  20: 1072180.035 ops/s
Iteration  21: 1071523.594 ops/s
Iteration  22: 1073227.081 ops/s
Iteration  23: 1070408.640 ops/s
Iteration  24: 1071761.406 ops/s
Iteration  25: 1071186.758 ops/s
Iteration  26: 1073888.103 ops/s
Iteration  27: 1075301.208 ops/s
Iteration  28: 1076511.601 ops/s
Iteration  29: 1073732.985 ops/s
Iteration  30: 1073548.873 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_sort":
  1072036.823 ±(99.9%) 1665.112 ops/s [Average]
  (min, avg, max) = (1066471.094, 1072036.823, 1076511.601), stdev = 2492.261
  CI (99.9%): [1070371.712, 1073701.935] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_sort  thrpt   30  1072036.823 ± 1665.112  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_stream$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_stream

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 457643.960 ops/s
# Warmup Iteration   2: 1055432.659 ops/s
# Warmup Iteration   3: 1153567.077 ops/s
# Warmup Iteration   4: 1158553.482 ops/s
# Warmup Iteration   5: 963992.298 ops/s
# Warmup Iteration   6: 1159546.848 ops/s
# Warmup Iteration   7: 1162488.882 ops/s
# Warmup Iteration   8: 1159504.383 ops/s
# Warmup Iteration   9: 1154557.929 ops/s
# Warmup Iteration  10: 1161240.910 ops/s
# Warmup Iteration  11: 1158510.422 ops/s
# Warmup Iteration  12: 1162595.559 ops/s
# Warmup Iteration  13: 1161741.846 ops/s
# Warmup Iteration  14: 1162210.335 ops/s
# Warmup Iteration  15: 1161339.709 ops/s
# Warmup Iteration  16: 1162874.895 ops/s
# Warmup Iteration  17: 1160730.096 ops/s
# Warmup Iteration  18: 1162211.614 ops/s
# Warmup Iteration  19: 1161019.717 ops/s
# Warmup Iteration  20: 1161888.751 ops/s
# Warmup Iteration  21: 1160586.227 ops/s
# Warmup Iteration  22: 1161801.715 ops/s
# Warmup Iteration  23: 1161998.921 ops/s
# Warmup Iteration  24: 1160956.829 ops/s
# Warmup Iteration  25: 1162714.147 ops/s
# Warmup Iteration  26: 1160212.819 ops/s
# Warmup Iteration  27: 1163093.657 ops/s
# Warmup Iteration  28: 1161150.715 ops/s
# Warmup Iteration  29: 1161135.113 ops/s
# Warmup Iteration  30: 1161832.918 ops/s
Iteration   1: 1159834.645 ops/s
Iteration   2: 1163657.378 ops/s
Iteration   3: 1160351.285 ops/s
Iteration   4: 1159567.703 ops/s
Iteration   5: 1161900.855 ops/s
Iteration   6: 1163653.765 ops/s
Iteration   7: 1159810.538 ops/s
Iteration   8: 1162280.282 ops/s
Iteration   9: 1161959.330 ops/s
Iteration  10: 1162019.696 ops/s
Iteration  11: 1161101.986 ops/s
Iteration  12: 1160133.188 ops/s
Iteration  13: 1161107.977 ops/s
Iteration  14: 1160591.106 ops/s
Iteration  15: 1161757.830 ops/s
Iteration  16: 1162086.148 ops/s
Iteration  17: 1161152.495 ops/s
Iteration  18: 1162294.246 ops/s
Iteration  19: 1163729.634 ops/s
Iteration  20: 1162503.901 ops/s
Iteration  21: 1163008.521 ops/s
Iteration  22: 1159840.922 ops/s
Iteration  23: 1164684.892 ops/s
Iteration  24: 1160075.319 ops/s
Iteration  25: 1161208.952 ops/s
Iteration  26: 1162175.198 ops/s
Iteration  27: 1159580.275 ops/s
Iteration  28: 1160746.070 ops/s
Iteration  29: 1158848.003 ops/s
Iteration  30: 1159129.008 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_stream":
  1161359.705 ±(99.9%) 1003.563 ops/s [Average]
  (min, avg, max) = (1158848.003, 1161359.705, 1164684.892), stdev = 1502.087
  CI (99.9%): [1160356.141, 1162363.268] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_stream  thrpt   30  1161359.705 ± 1003.563  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_subList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_subList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 24159366.121 ops/s
# Warmup Iteration   2: 43234291.627 ops/s
# Warmup Iteration   3: 39855306.841 ops/s
# Warmup Iteration   4: 44840500.184 ops/s
# Warmup Iteration   5: 44814419.948 ops/s
# Warmup Iteration   6: 44679189.993 ops/s
# Warmup Iteration   7: 44924532.622 ops/s
# Warmup Iteration   8: 44969325.976 ops/s
# Warmup Iteration   9: 44793189.420 ops/s
# Warmup Iteration  10: 44667633.010 ops/s
# Warmup Iteration  11: 44798778.443 ops/s
# Warmup Iteration  12: 44823418.386 ops/s
# Warmup Iteration  13: 45029850.279 ops/s
# Warmup Iteration  14: 44927123.216 ops/s
# Warmup Iteration  15: 44742674.328 ops/s
# Warmup Iteration  16: 44793552.065 ops/s
# Warmup Iteration  17: 44462393.949 ops/s
# Warmup Iteration  18: 44331754.787 ops/s
# Warmup Iteration  19: 44456961.133 ops/s
# Warmup Iteration  20: 44557421.945 ops/s
# Warmup Iteration  21: 44300767.599 ops/s
# Warmup Iteration  22: 44556961.796 ops/s
# Warmup Iteration  23: 44400241.682 ops/s
# Warmup Iteration  24: 44527385.556 ops/s
# Warmup Iteration  25: 44495153.586 ops/s
# Warmup Iteration  26: 44382970.883 ops/s
# Warmup Iteration  27: 44392157.802 ops/s
# Warmup Iteration  28: 44300186.509 ops/s
# Warmup Iteration  29: 44345834.840 ops/s
# Warmup Iteration  30: 44398557.795 ops/s
Iteration   1: 44435716.892 ops/s
Iteration   2: 44452098.768 ops/s
Iteration   3: 44323469.719 ops/s
Iteration   4: 44373876.457 ops/s
Iteration   5: 44339405.883 ops/s
Iteration   6: 44543763.697 ops/s
Iteration   7: 44432358.207 ops/s
Iteration   8: 44321983.423 ops/s
Iteration   9: 44394446.346 ops/s
Iteration  10: 44376197.890 ops/s
Iteration  11: 44381956.826 ops/s
Iteration  12: 44327860.665 ops/s
Iteration  13: 44395560.039 ops/s
Iteration  14: 44271987.615 ops/s
Iteration  15: 44533232.187 ops/s
Iteration  16: 44384988.176 ops/s
Iteration  17: 44478036.603 ops/s
Iteration  18: 44423070.885 ops/s
Iteration  19: 44299604.815 ops/s
Iteration  20: 44524825.706 ops/s
Iteration  21: 44469772.644 ops/s
Iteration  22: 44255333.958 ops/s
Iteration  23: 44251728.437 ops/s
Iteration  24: 44485613.093 ops/s
Iteration  25: 44507586.599 ops/s
Iteration  26: 44279480.819 ops/s
Iteration  27: 44470222.422 ops/s
Iteration  28: 44414453.630 ops/s
Iteration  29: 44486380.274 ops/s
Iteration  30: 44393776.555 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_subList":
  44400959.641 ±(99.9%) 56666.592 ops/s [Average]
  (min, avg, max) = (44251728.437, 44400959.641, 44543763.697), stdev = 84815.894
  CI (99.9%): [44344293.049, 44457626.233] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_subList  thrpt   30  44400959.641 ± 56666.592  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_subListFromGreaterThanTO$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_subListFromGreaterThanTO

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 665715.262 ops/s
# Warmup Iteration   2: 684860.996 ops/s
# Warmup Iteration   3: 805421.210 ops/s
# Warmup Iteration   4: 864819.857 ops/s
# Warmup Iteration   5: 859739.574 ops/s
# Warmup Iteration   6: 865021.448 ops/s
# Warmup Iteration   7: 864393.862 ops/s
# Warmup Iteration   8: 863340.191 ops/s
# Warmup Iteration   9: 864264.830 ops/s
# Warmup Iteration  10: 863936.749 ops/s
# Warmup Iteration  11: 864671.485 ops/s
# Warmup Iteration  12: 864798.061 ops/s
# Warmup Iteration  13: 862703.051 ops/s
# Warmup Iteration  14: 739706.344 ops/s
# Warmup Iteration  15: 850775.416 ops/s
# Warmup Iteration  16: 864547.126 ops/s
# Warmup Iteration  17: 911849.416 ops/s
# Warmup Iteration  18: 912461.806 ops/s
# Warmup Iteration  19: 910357.986 ops/s
# Warmup Iteration  20: 915300.941 ops/s
# Warmup Iteration  21: 914858.615 ops/s
# Warmup Iteration  22: 910526.802 ops/s
# Warmup Iteration  23: 911567.825 ops/s
# Warmup Iteration  24: 911422.757 ops/s
# Warmup Iteration  25: 911700.620 ops/s
# Warmup Iteration  26: 910088.983 ops/s
# Warmup Iteration  27: 912044.364 ops/s
# Warmup Iteration  28: 910992.485 ops/s
# Warmup Iteration  29: 911666.971 ops/s
# Warmup Iteration  30: 911391.893 ops/s
Iteration   1: 912217.352 ops/s
Iteration   2: 908497.282 ops/s
Iteration   3: 909964.280 ops/s
Iteration   4: 907953.855 ops/s
Iteration   5: 907260.203 ops/s
Iteration   6: 908800.412 ops/s
Iteration   7: 912047.152 ops/s
Iteration   8: 906908.419 ops/s
Iteration   9: 907110.488 ops/s
Iteration  10: 910853.935 ops/s
Iteration  11: 908876.623 ops/s
Iteration  12: 908093.816 ops/s
Iteration  13: 909177.285 ops/s
Iteration  14: 908345.889 ops/s
Iteration  15: 902963.907 ops/s
Iteration  16: 911236.775 ops/s
Iteration  17: 907529.050 ops/s
Iteration  18: 908016.637 ops/s
Iteration  19: 912683.196 ops/s
Iteration  20: 908320.589 ops/s
Iteration  21: 910304.176 ops/s
Iteration  22: 907946.977 ops/s
Iteration  23: 909122.927 ops/s
Iteration  24: 907466.218 ops/s
Iteration  25: 908253.924 ops/s
Iteration  26: 911131.219 ops/s
Iteration  27: 911089.758 ops/s
Iteration  28: 913244.116 ops/s
Iteration  29: 911139.041 ops/s
Iteration  30: 911658.358 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_subListFromGreaterThanTO":
  909273.795 ±(99.9%) 1459.037 ops/s [Average]
  (min, avg, max) = (902963.907, 909273.795, 913244.116), stdev = 2183.819
  CI (99.9%): [907814.758, 910732.833] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_subListFromGreaterThanTO  thrpt   30  909273.795 ± 1459.037  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_subListFromNegative$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_subListFromNegative

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 678299.980 ops/s
# Warmup Iteration   2: 693156.703 ops/s
# Warmup Iteration   3: 809071.837 ops/s
# Warmup Iteration   4: 877563.945 ops/s
# Warmup Iteration   5: 875788.064 ops/s
# Warmup Iteration   6: 877370.573 ops/s
# Warmup Iteration   7: 870921.947 ops/s
# Warmup Iteration   8: 872712.115 ops/s
# Warmup Iteration   9: 870783.999 ops/s
# Warmup Iteration  10: 874182.107 ops/s
# Warmup Iteration  11: 876030.233 ops/s
# Warmup Iteration  12: 873794.674 ops/s
# Warmup Iteration  13: 875721.865 ops/s
# Warmup Iteration  14: 802111.036 ops/s
# Warmup Iteration  15: 811382.767 ops/s
# Warmup Iteration  16: 876204.702 ops/s
# Warmup Iteration  17: 921777.726 ops/s
# Warmup Iteration  18: 921529.009 ops/s
# Warmup Iteration  19: 922023.698 ops/s
# Warmup Iteration  20: 922374.272 ops/s
# Warmup Iteration  21: 920175.094 ops/s
# Warmup Iteration  22: 922632.209 ops/s
# Warmup Iteration  23: 923972.383 ops/s
# Warmup Iteration  24: 922084.397 ops/s
# Warmup Iteration  25: 921703.598 ops/s
# Warmup Iteration  26: 920718.159 ops/s
# Warmup Iteration  27: 921685.116 ops/s
# Warmup Iteration  28: 922970.767 ops/s
# Warmup Iteration  29: 921308.983 ops/s
# Warmup Iteration  30: 924041.543 ops/s
Iteration   1: 924307.201 ops/s
Iteration   2: 919093.688 ops/s
Iteration   3: 919147.376 ops/s
Iteration   4: 920099.421 ops/s
Iteration   5: 919230.671 ops/s
Iteration   6: 922605.747 ops/s
Iteration   7: 922081.186 ops/s
Iteration   8: 919807.480 ops/s
Iteration   9: 922629.771 ops/s
Iteration  10: 922432.802 ops/s
Iteration  11: 921882.540 ops/s
Iteration  12: 919714.513 ops/s
Iteration  13: 922156.117 ops/s
Iteration  14: 923875.717 ops/s
Iteration  15: 923719.748 ops/s
Iteration  16: 923528.251 ops/s
Iteration  17: 919672.203 ops/s
Iteration  18: 915608.784 ops/s
Iteration  19: 915992.526 ops/s
Iteration  20: 920147.460 ops/s
Iteration  21: 921237.436 ops/s
Iteration  22: 920914.144 ops/s
Iteration  23: 923255.195 ops/s
Iteration  24: 923379.008 ops/s
Iteration  25: 923854.815 ops/s
Iteration  26: 922547.566 ops/s
Iteration  27: 919637.318 ops/s
Iteration  28: 923824.661 ops/s
Iteration  29: 922782.853 ops/s
Iteration  30: 922876.622 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_subListFromNegative":
  921401.427 ±(99.9%) 1505.934 ops/s [Average]
  (min, avg, max) = (915608.784, 921401.427, 924307.201), stdev = 2254.011
  CI (99.9%): [919895.493, 922907.361] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_subListFromNegative  thrpt   30  921401.427 ± 1505.934  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_subListToGreaterThanSize$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_subListToGreaterThanSize

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 677598.015 ops/s
# Warmup Iteration   2: 697170.863 ops/s
# Warmup Iteration   3: 808847.564 ops/s
# Warmup Iteration   4: 875148.187 ops/s
# Warmup Iteration   5: 874021.597 ops/s
# Warmup Iteration   6: 874999.652 ops/s
# Warmup Iteration   7: 870828.855 ops/s
# Warmup Iteration   8: 875228.955 ops/s
# Warmup Iteration   9: 875615.609 ops/s
# Warmup Iteration  10: 873810.966 ops/s
# Warmup Iteration  11: 875986.149 ops/s
# Warmup Iteration  12: 874292.982 ops/s
# Warmup Iteration  13: 876129.650 ops/s
# Warmup Iteration  14: 801655.584 ops/s
# Warmup Iteration  15: 812465.853 ops/s
# Warmup Iteration  16: 876744.009 ops/s
# Warmup Iteration  17: 925194.670 ops/s
# Warmup Iteration  18: 922511.708 ops/s
# Warmup Iteration  19: 925967.113 ops/s
# Warmup Iteration  20: 925354.205 ops/s
# Warmup Iteration  21: 923988.199 ops/s
# Warmup Iteration  22: 924663.392 ops/s
# Warmup Iteration  23: 923655.710 ops/s
# Warmup Iteration  24: 922997.040 ops/s
# Warmup Iteration  25: 923505.681 ops/s
# Warmup Iteration  26: 923408.719 ops/s
# Warmup Iteration  27: 925244.194 ops/s
# Warmup Iteration  28: 923322.621 ops/s
# Warmup Iteration  29: 922599.095 ops/s
# Warmup Iteration  30: 922728.175 ops/s
Iteration   1: 924774.773 ops/s
Iteration   2: 925336.956 ops/s
Iteration   3: 922470.894 ops/s
Iteration   4: 921815.885 ops/s
Iteration   5: 921654.552 ops/s
Iteration   6: 921637.417 ops/s
Iteration   7: 918171.590 ops/s
Iteration   8: 924594.545 ops/s
Iteration   9: 925421.505 ops/s
Iteration  10: 923386.924 ops/s
Iteration  11: 924899.712 ops/s
Iteration  12: 922953.609 ops/s
Iteration  13: 922949.112 ops/s
Iteration  14: 925243.379 ops/s
Iteration  15: 927126.748 ops/s
Iteration  16: 924820.805 ops/s
Iteration  17: 924258.596 ops/s
Iteration  18: 924925.553 ops/s
Iteration  19: 923280.439 ops/s
Iteration  20: 921474.669 ops/s
Iteration  21: 921306.176 ops/s
Iteration  22: 921663.181 ops/s
Iteration  23: 921632.053 ops/s
Iteration  24: 923341.069 ops/s
Iteration  25: 925284.571 ops/s
Iteration  26: 923958.054 ops/s
Iteration  27: 922300.220 ops/s
Iteration  28: 927223.674 ops/s
Iteration  29: 900027.875 ops/s
Iteration  30: 924349.664 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_subListToGreaterThanSize":
  922742.807 ±(99.9%) 3141.538 ops/s [Average]
  (min, avg, max) = (900027.875, 922742.807, 927223.674), stdev = 4702.106
  CI (99.9%): [919601.269, 925884.344] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_subListToGreaterThanSize  thrpt   30  922742.807 ± 3141.538  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_sumByDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_sumByDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 992541.597 ops/s
# Warmup Iteration   2: 1805813.017 ops/s
# Warmup Iteration   3: 2040700.369 ops/s
# Warmup Iteration   4: 2046418.136 ops/s
# Warmup Iteration   5: 2051080.159 ops/s
# Warmup Iteration   6: 1686658.556 ops/s
# Warmup Iteration   7: 2051178.156 ops/s
# Warmup Iteration   8: 2046311.862 ops/s
# Warmup Iteration   9: 2050718.515 ops/s
# Warmup Iteration  10: 2051627.697 ops/s
# Warmup Iteration  11: 2046498.550 ops/s
# Warmup Iteration  12: 2049406.153 ops/s
# Warmup Iteration  13: 2050811.481 ops/s
# Warmup Iteration  14: 2043431.581 ops/s
# Warmup Iteration  15: 2050250.115 ops/s
# Warmup Iteration  16: 2045283.125 ops/s
# Warmup Iteration  17: 2051437.573 ops/s
# Warmup Iteration  18: 2051631.422 ops/s
# Warmup Iteration  19: 2051134.942 ops/s
# Warmup Iteration  20: 2051828.527 ops/s
# Warmup Iteration  21: 2052641.263 ops/s
# Warmup Iteration  22: 2051580.495 ops/s
# Warmup Iteration  23: 2053200.089 ops/s
# Warmup Iteration  24: 2051532.694 ops/s
# Warmup Iteration  25: 2052089.308 ops/s
# Warmup Iteration  26: 2050678.557 ops/s
# Warmup Iteration  27: 2048302.104 ops/s
# Warmup Iteration  28: 2051605.392 ops/s
# Warmup Iteration  29: 2053588.821 ops/s
# Warmup Iteration  30: 2050372.704 ops/s
Iteration   1: 2048142.838 ops/s
Iteration   2: 2050053.857 ops/s
Iteration   3: 2055215.352 ops/s
Iteration   4: 2051717.490 ops/s
Iteration   5: 2052216.824 ops/s
Iteration   6: 2049439.769 ops/s
Iteration   7: 2050821.813 ops/s
Iteration   8: 2047591.216 ops/s
Iteration   9: 2050279.933 ops/s
Iteration  10: 2051173.808 ops/s
Iteration  11: 2055816.508 ops/s
Iteration  12: 2051380.478 ops/s
Iteration  13: 2054399.022 ops/s
Iteration  14: 2048980.899 ops/s
Iteration  15: 2056272.359 ops/s
Iteration  16: 2049459.178 ops/s
Iteration  17: 2046284.417 ops/s
Iteration  18: 2055025.410 ops/s
Iteration  19: 2046987.812 ops/s
Iteration  20: 2051580.211 ops/s
Iteration  21: 2046283.653 ops/s
Iteration  22: 2048308.416 ops/s
Iteration  23: 2056044.499 ops/s
Iteration  24: 2050802.463 ops/s
Iteration  25: 2055885.952 ops/s
Iteration  26: 2052438.007 ops/s
Iteration  27: 2053174.203 ops/s
Iteration  28: 2053491.783 ops/s
Iteration  29: 2051309.574 ops/s
Iteration  30: 2051495.221 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_sumByDouble":
  2051402.432 ±(99.9%) 1980.435 ops/s [Average]
  (min, avg, max) = (2046283.653, 2051402.432, 2056272.359), stdev = 2964.223
  CI (99.9%): [2049421.997, 2053382.868] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_sumByDouble  thrpt   30  2051402.432 ± 1980.435  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_sumByDoubleConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_sumByDoubleConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 61.466 ops/s
# Warmup Iteration   2: 72.747 ops/s
# Warmup Iteration   3: 102.396 ops/s
# Warmup Iteration   4: 102.233 ops/s
# Warmup Iteration   5: 101.443 ops/s
# Warmup Iteration   6: 101.933 ops/s
# Warmup Iteration   7: 102.735 ops/s
# Warmup Iteration   8: 101.260 ops/s
# Warmup Iteration   9: 85.275 ops/s
# Warmup Iteration  10: 94.330 ops/s
# Warmup Iteration  11: 103.098 ops/s
# Warmup Iteration  12: 101.841 ops/s
# Warmup Iteration  13: 101.346 ops/s
# Warmup Iteration  14: 100.305 ops/s
# Warmup Iteration  15: 99.313 ops/s
# Warmup Iteration  16: 100.675 ops/s
# Warmup Iteration  17: 102.065 ops/s
# Warmup Iteration  18: 102.048 ops/s
# Warmup Iteration  19: 101.349 ops/s
# Warmup Iteration  20: 100.950 ops/s
# Warmup Iteration  21: 101.728 ops/s
# Warmup Iteration  22: 103.289 ops/s
# Warmup Iteration  23: 102.337 ops/s
# Warmup Iteration  24: 99.700 ops/s
# Warmup Iteration  25: 100.700 ops/s
# Warmup Iteration  26: 101.268 ops/s
# Warmup Iteration  27: 102.465 ops/s
# Warmup Iteration  28: 100.375 ops/s
# Warmup Iteration  29: 97.798 ops/s
# Warmup Iteration  30: 99.383 ops/s
Iteration   1: 97.354 ops/s
Iteration   2: 99.012 ops/s
Iteration   3: 98.967 ops/s
Iteration   4: 100.179 ops/s
Iteration   5: 100.521 ops/s
Iteration   6: 100.854 ops/s
Iteration   7: 99.390 ops/s
Iteration   8: 102.187 ops/s
Iteration   9: 101.996 ops/s
Iteration  10: 101.186 ops/s
Iteration  11: 98.364 ops/s
Iteration  12: 102.319 ops/s
Iteration  13: 101.202 ops/s
Iteration  14: 102.879 ops/s
Iteration  15: 99.194 ops/s
Iteration  16: 99.806 ops/s
Iteration  17: 99.696 ops/s
Iteration  18: 99.611 ops/s
Iteration  19: 98.598 ops/s
Iteration  20: 97.377 ops/s
Iteration  21: 101.302 ops/s
Iteration  22: 100.078 ops/s
Iteration  23: 99.608 ops/s
Iteration  24: 100.866 ops/s
Iteration  25: 102.128 ops/s
Iteration  26: 100.398 ops/s
Iteration  27: 101.983 ops/s
Iteration  28: 101.254 ops/s
Iteration  29: 100.830 ops/s
Iteration  30: 100.981 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_sumByDoubleConsistentRounding":
  100.337 ±(99.9%) 0.955 ops/s [Average]
  (min, avg, max) = (97.354, 100.337, 102.879), stdev = 1.429
  CI (99.9%): [99.383, 101.292] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt    Score   Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_sumByDoubleConsistentRounding  thrpt   30  100.337 ± 0.955  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_sumByFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_sumByFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 997367.483 ops/s
# Warmup Iteration   2: 1807101.238 ops/s
# Warmup Iteration   3: 2024506.463 ops/s
# Warmup Iteration   4: 2029871.875 ops/s
# Warmup Iteration   5: 2033487.612 ops/s
# Warmup Iteration   6: 1682024.604 ops/s
# Warmup Iteration   7: 2035940.921 ops/s
# Warmup Iteration   8: 2021489.039 ops/s
# Warmup Iteration   9: 2036465.224 ops/s
# Warmup Iteration  10: 2034998.347 ops/s
# Warmup Iteration  11: 2035182.393 ops/s
# Warmup Iteration  12: 2034917.775 ops/s
# Warmup Iteration  13: 2035210.170 ops/s
# Warmup Iteration  14: 2033760.054 ops/s
# Warmup Iteration  15: 2034767.017 ops/s
# Warmup Iteration  16: 2033795.320 ops/s
# Warmup Iteration  17: 2035565.126 ops/s
# Warmup Iteration  18: 2035087.340 ops/s
# Warmup Iteration  19: 2034965.776 ops/s
# Warmup Iteration  20: 2029138.496 ops/s
# Warmup Iteration  21: 2028854.695 ops/s
# Warmup Iteration  22: 2032950.340 ops/s
# Warmup Iteration  23: 2035094.182 ops/s
# Warmup Iteration  24: 2036159.701 ops/s
# Warmup Iteration  25: 2031244.416 ops/s
# Warmup Iteration  26: 2029118.115 ops/s
# Warmup Iteration  27: 2032752.174 ops/s
# Warmup Iteration  28: 2033588.762 ops/s
# Warmup Iteration  29: 2034470.739 ops/s
# Warmup Iteration  30: 2033181.562 ops/s
Iteration   1: 2035822.435 ops/s
Iteration   2: 2033429.409 ops/s
Iteration   3: 2036824.974 ops/s
Iteration   4: 2034219.989 ops/s
Iteration   5: 2035450.761 ops/s
Iteration   6: 2032481.781 ops/s
Iteration   7: 2034464.533 ops/s
Iteration   8: 2019995.754 ops/s
Iteration   9: 2033752.876 ops/s
Iteration  10: 2037729.402 ops/s
Iteration  11: 2034355.728 ops/s
Iteration  12: 2036831.891 ops/s
Iteration  13: 2032074.725 ops/s
Iteration  14: 2033547.444 ops/s
Iteration  15: 2034976.298 ops/s
Iteration  16: 2031085.108 ops/s
Iteration  17: 2036866.670 ops/s
Iteration  18: 2032301.456 ops/s
Iteration  19: 2036492.681 ops/s
Iteration  20: 2034469.684 ops/s
Iteration  21: 2037202.804 ops/s
Iteration  22: 2037081.733 ops/s
Iteration  23: 2035221.078 ops/s
Iteration  24: 2038270.750 ops/s
Iteration  25: 1996525.584 ops/s
Iteration  26: 2032737.028 ops/s
Iteration  27: 2036985.174 ops/s
Iteration  28: 2032287.765 ops/s
Iteration  29: 2035651.596 ops/s
Iteration  30: 2036452.540 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_sumByFloat":
  2033186.322 ±(99.9%) 5132.727 ops/s [Average]
  (min, avg, max) = (1996525.584, 2033186.322, 2038270.750), stdev = 7682.425
  CI (99.9%): [2028053.595, 2038319.049] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_sumByFloat  thrpt   30  2033186.322 ± 5132.727  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_sumByFloatConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_sumByFloatConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 61.901 ops/s
# Warmup Iteration   2: 74.428 ops/s
# Warmup Iteration   3: 100.279 ops/s
# Warmup Iteration   4: 100.908 ops/s
# Warmup Iteration   5: 99.763 ops/s
# Warmup Iteration   6: 99.799 ops/s
# Warmup Iteration   7: 102.221 ops/s
# Warmup Iteration   8: 100.650 ops/s
# Warmup Iteration   9: 88.148 ops/s
# Warmup Iteration  10: 93.950 ops/s
# Warmup Iteration  11: 102.665 ops/s
# Warmup Iteration  12: 100.949 ops/s
# Warmup Iteration  13: 101.674 ops/s
# Warmup Iteration  14: 100.123 ops/s
# Warmup Iteration  15: 101.849 ops/s
# Warmup Iteration  16: 102.099 ops/s
# Warmup Iteration  17: 99.574 ops/s
# Warmup Iteration  18: 99.099 ops/s
# Warmup Iteration  19: 101.420 ops/s
# Warmup Iteration  20: 100.021 ops/s
# Warmup Iteration  21: 97.900 ops/s
# Warmup Iteration  22: 100.087 ops/s
# Warmup Iteration  23: 99.259 ops/s
# Warmup Iteration  24: 100.478 ops/s
# Warmup Iteration  25: 98.546 ops/s
# Warmup Iteration  26: 99.983 ops/s
# Warmup Iteration  27: 98.969 ops/s
# Warmup Iteration  28: 98.791 ops/s
# Warmup Iteration  29: 97.734 ops/s
# Warmup Iteration  30: 99.487 ops/s
Iteration   1: 96.733 ops/s
Iteration   2: 99.048 ops/s
Iteration   3: 101.063 ops/s
Iteration   4: 100.071 ops/s
Iteration   5: 101.155 ops/s
Iteration   6: 98.456 ops/s
Iteration   7: 98.485 ops/s
Iteration   8: 99.025 ops/s
Iteration   9: 99.054 ops/s
Iteration  10: 98.684 ops/s
Iteration  11: 97.862 ops/s
Iteration  12: 100.346 ops/s
Iteration  13: 99.953 ops/s
Iteration  14: 98.477 ops/s
Iteration  15: 100.095 ops/s
Iteration  16: 98.461 ops/s
Iteration  17: 97.953 ops/s
Iteration  18: 98.626 ops/s
Iteration  19: 98.025 ops/s
Iteration  20: 97.165 ops/s
Iteration  21: 98.531 ops/s
Iteration  22: 98.915 ops/s
Iteration  23: 99.235 ops/s
Iteration  24: 98.885 ops/s
Iteration  25: 99.513 ops/s
Iteration  26: 100.242 ops/s
Iteration  27: 99.943 ops/s
Iteration  28: 99.233 ops/s
Iteration  29: 98.384 ops/s
Iteration  30: 100.000 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_sumByFloatConsistentRounding":
  99.054 ±(99.9%) 0.697 ops/s [Average]
  (min, avg, max) = (96.733, 99.054, 101.155), stdev = 1.043
  CI (99.9%): [98.357, 99.751] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt   Score   Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_sumByFloatConsistentRounding  thrpt   30  99.054 ± 0.697  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_sumByInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_sumByInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1372893.226 ops/s
# Warmup Iteration   2: 2607247.407 ops/s
# Warmup Iteration   3: 2829087.687 ops/s
# Warmup Iteration   4: 2840976.478 ops/s
# Warmup Iteration   5: 2361980.182 ops/s
# Warmup Iteration   6: 2842750.549 ops/s
# Warmup Iteration   7: 2846002.381 ops/s
# Warmup Iteration   8: 2848654.176 ops/s
# Warmup Iteration   9: 2844011.456 ops/s
# Warmup Iteration  10: 2843416.523 ops/s
# Warmup Iteration  11: 2847527.204 ops/s
# Warmup Iteration  12: 2845250.010 ops/s
# Warmup Iteration  13: 2844963.490 ops/s
# Warmup Iteration  14: 2842441.701 ops/s
# Warmup Iteration  15: 2844502.798 ops/s
# Warmup Iteration  16: 2842857.756 ops/s
# Warmup Iteration  17: 2845777.257 ops/s
# Warmup Iteration  18: 2848832.266 ops/s
# Warmup Iteration  19: 2846794.218 ops/s
# Warmup Iteration  20: 2845299.670 ops/s
# Warmup Iteration  21: 2845112.481 ops/s
# Warmup Iteration  22: 2852147.099 ops/s
# Warmup Iteration  23: 2846642.701 ops/s
# Warmup Iteration  24: 2847370.638 ops/s
# Warmup Iteration  25: 2846550.457 ops/s
# Warmup Iteration  26: 2840953.087 ops/s
# Warmup Iteration  27: 2849869.906 ops/s
# Warmup Iteration  28: 2848793.817 ops/s
# Warmup Iteration  29: 2846519.550 ops/s
# Warmup Iteration  30: 2847214.101 ops/s
Iteration   1: 2852318.449 ops/s
Iteration   2: 2844210.884 ops/s
Iteration   3: 2841897.643 ops/s
Iteration   4: 2842002.836 ops/s
Iteration   5: 2847603.784 ops/s
Iteration   6: 2848957.659 ops/s
Iteration   7: 2846415.625 ops/s
Iteration   8: 2850609.727 ops/s
Iteration   9: 2842343.654 ops/s
Iteration  10: 2847367.451 ops/s
Iteration  11: 2839496.431 ops/s
Iteration  12: 2843562.850 ops/s
Iteration  13: 2848208.934 ops/s
Iteration  14: 2841978.258 ops/s
Iteration  15: 2847202.115 ops/s
Iteration  16: 2850953.876 ops/s
Iteration  17: 2843936.248 ops/s
Iteration  18: 2850706.505 ops/s
Iteration  19: 2845106.179 ops/s
Iteration  20: 2841005.710 ops/s
Iteration  21: 2855838.767 ops/s
Iteration  22: 2845349.096 ops/s
Iteration  23: 2845149.231 ops/s
Iteration  24: 2841183.491 ops/s
Iteration  25: 2847921.874 ops/s
Iteration  26: 2847396.328 ops/s
Iteration  27: 2851310.088 ops/s
Iteration  28: 2845428.804 ops/s
Iteration  29: 2844179.811 ops/s
Iteration  30: 2847420.933 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_sumByInt":
  2846235.441 ±(99.9%) 2573.641 ops/s [Average]
  (min, avg, max) = (2839496.431, 2846235.441, 2855838.767), stdev = 3852.105
  CI (99.9%): [2843661.800, 2848809.083] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_sumByInt  thrpt   30  2846235.441 ± 2573.641  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_sumByLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_sumByLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1418317.936 ops/s
# Warmup Iteration   2: 2740985.838 ops/s
# Warmup Iteration   3: 3014579.947 ops/s
# Warmup Iteration   4: 3016768.062 ops/s
# Warmup Iteration   5: 2506414.642 ops/s
# Warmup Iteration   6: 3029011.449 ops/s
# Warmup Iteration   7: 3030856.368 ops/s
# Warmup Iteration   8: 3030317.633 ops/s
# Warmup Iteration   9: 3033130.125 ops/s
# Warmup Iteration  10: 3023509.063 ops/s
# Warmup Iteration  11: 3029658.027 ops/s
# Warmup Iteration  12: 3024248.038 ops/s
# Warmup Iteration  13: 3021148.666 ops/s
# Warmup Iteration  14: 3031426.953 ops/s
# Warmup Iteration  15: 3026613.503 ops/s
# Warmup Iteration  16: 3033481.901 ops/s
# Warmup Iteration  17: 2993371.983 ops/s
# Warmup Iteration  18: 2996413.642 ops/s
# Warmup Iteration  19: 2985061.431 ops/s
# Warmup Iteration  20: 2988188.871 ops/s
# Warmup Iteration  21: 2990474.854 ops/s
# Warmup Iteration  22: 2990816.864 ops/s
# Warmup Iteration  23: 2995460.325 ops/s
# Warmup Iteration  24: 2986572.662 ops/s
# Warmup Iteration  25: 2995055.272 ops/s
# Warmup Iteration  26: 2998305.402 ops/s
# Warmup Iteration  27: 2991811.348 ops/s
# Warmup Iteration  28: 2986888.585 ops/s
# Warmup Iteration  29: 2990114.469 ops/s
# Warmup Iteration  30: 2986664.139 ops/s
Iteration   1: 2989440.426 ops/s
Iteration   2: 2989215.227 ops/s
Iteration   3: 3000085.610 ops/s
Iteration   4: 2994209.723 ops/s
Iteration   5: 2987725.394 ops/s
Iteration   6: 2989070.475 ops/s
Iteration   7: 2990629.218 ops/s
Iteration   8: 2989600.986 ops/s
Iteration   9: 3001977.980 ops/s
Iteration  10: 2989010.144 ops/s
Iteration  11: 2992320.412 ops/s
Iteration  12: 2998026.320 ops/s
Iteration  13: 2992057.419 ops/s
Iteration  14: 2993741.989 ops/s
Iteration  15: 2989143.840 ops/s
Iteration  16: 2993288.475 ops/s
Iteration  17: 2999353.630 ops/s
Iteration  18: 3001773.105 ops/s
Iteration  19: 2994189.107 ops/s
Iteration  20: 2990779.508 ops/s
Iteration  21: 2993057.614 ops/s
Iteration  22: 2989935.636 ops/s
Iteration  23: 2992708.202 ops/s
Iteration  24: 2993880.108 ops/s
Iteration  25: 2989572.987 ops/s
Iteration  26: 2982627.901 ops/s
Iteration  27: 2993367.313 ops/s
Iteration  28: 2996203.455 ops/s
Iteration  29: 2985432.629 ops/s
Iteration  30: 2983262.469 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_sumByLong":
  2992189.577 ±(99.9%) 3220.398 ops/s [Average]
  (min, avg, max) = (2982627.901, 2992189.577, 3001977.980), stdev = 4820.140
  CI (99.9%): [2988969.179, 2995409.974] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_sumByLong  thrpt   30  2992189.577 ± 3220.398  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_sumDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_sumDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 31636498.883 ops/s
# Warmup Iteration   2: 59193410.948 ops/s
# Warmup Iteration   3: 64553468.005 ops/s
# Warmup Iteration   4: 55445651.208 ops/s
# Warmup Iteration   5: 65040398.480 ops/s
# Warmup Iteration   6: 65109202.736 ops/s
# Warmup Iteration   7: 65045222.753 ops/s
# Warmup Iteration   8: 65073548.765 ops/s
# Warmup Iteration   9: 64985569.504 ops/s
# Warmup Iteration  10: 65065800.591 ops/s
# Warmup Iteration  11: 65050199.595 ops/s
# Warmup Iteration  12: 64747662.484 ops/s
# Warmup Iteration  13: 64912752.120 ops/s
# Warmup Iteration  14: 65038609.775 ops/s
# Warmup Iteration  15: 64972850.437 ops/s
# Warmup Iteration  16: 65020982.647 ops/s
# Warmup Iteration  17: 63772603.664 ops/s
# Warmup Iteration  18: 64031217.074 ops/s
# Warmup Iteration  19: 64052023.406 ops/s
# Warmup Iteration  20: 63854074.374 ops/s
# Warmup Iteration  21: 63903169.833 ops/s
# Warmup Iteration  22: 63871500.069 ops/s
# Warmup Iteration  23: 63827854.382 ops/s
# Warmup Iteration  24: 63735087.235 ops/s
# Warmup Iteration  25: 63798466.207 ops/s
# Warmup Iteration  26: 63854688.852 ops/s
# Warmup Iteration  27: 63972514.629 ops/s
# Warmup Iteration  28: 63965089.894 ops/s
# Warmup Iteration  29: 63767374.950 ops/s
# Warmup Iteration  30: 63858256.464 ops/s
Iteration   1: 63865502.301 ops/s
Iteration   2: 63753715.327 ops/s
Iteration   3: 63732076.702 ops/s
Iteration   4: 63856023.962 ops/s
Iteration   5: 64015680.442 ops/s
Iteration   6: 63852977.101 ops/s
Iteration   7: 64004457.042 ops/s
Iteration   8: 63996955.121 ops/s
Iteration   9: 63945668.534 ops/s
Iteration  10: 63931537.604 ops/s
Iteration  11: 64010917.444 ops/s
Iteration  12: 64095427.617 ops/s
Iteration  13: 63922406.941 ops/s
Iteration  14: 64029366.766 ops/s
Iteration  15: 63868818.645 ops/s
Iteration  16: 63971249.903 ops/s
Iteration  17: 63763193.497 ops/s
Iteration  18: 63874670.124 ops/s
Iteration  19: 63865906.006 ops/s
Iteration  20: 64003895.667 ops/s
Iteration  21: 63587371.309 ops/s
Iteration  22: 63780244.491 ops/s
Iteration  23: 63777390.475 ops/s
Iteration  24: 63632735.621 ops/s
Iteration  25: 63847607.781 ops/s
Iteration  26: 63895048.275 ops/s
Iteration  27: 63773787.455 ops/s
Iteration  28: 63993100.989 ops/s
Iteration  29: 63836003.591 ops/s
Iteration  30: 63865502.316 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_sumDouble":
  63878307.968 ±(99.9%) 79815.611 ops/s [Average]
  (min, avg, max) = (63587371.309, 63878307.968, 64095427.617), stdev = 119464.258
  CI (99.9%): [63798492.357, 63958123.579] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_sumDouble  thrpt   30  63878307.968 ± 79815.611  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_sumFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_sumFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 30842158.454 ops/s
# Warmup Iteration   2: 59108074.718 ops/s
# Warmup Iteration   3: 63824218.316 ops/s
# Warmup Iteration   4: 53238706.564 ops/s
# Warmup Iteration   5: 62521733.734 ops/s
# Warmup Iteration   6: 62529985.795 ops/s
# Warmup Iteration   7: 62581283.415 ops/s
# Warmup Iteration   8: 62497771.492 ops/s
# Warmup Iteration   9: 62255239.268 ops/s
# Warmup Iteration  10: 62504587.149 ops/s
# Warmup Iteration  11: 62532065.081 ops/s
# Warmup Iteration  12: 62424255.061 ops/s
# Warmup Iteration  13: 62490651.739 ops/s
# Warmup Iteration  14: 62325188.340 ops/s
# Warmup Iteration  15: 62409414.769 ops/s
# Warmup Iteration  16: 62404497.799 ops/s
# Warmup Iteration  17: 64009394.686 ops/s
# Warmup Iteration  18: 63800100.651 ops/s
# Warmup Iteration  19: 63883230.737 ops/s
# Warmup Iteration  20: 63629941.709 ops/s
# Warmup Iteration  21: 63535424.564 ops/s
# Warmup Iteration  22: 63488070.450 ops/s
# Warmup Iteration  23: 63596868.715 ops/s
# Warmup Iteration  24: 63877387.634 ops/s
# Warmup Iteration  25: 63952412.464 ops/s
# Warmup Iteration  26: 64018605.007 ops/s
# Warmup Iteration  27: 63913002.646 ops/s
# Warmup Iteration  28: 63929568.578 ops/s
# Warmup Iteration  29: 63699003.343 ops/s
# Warmup Iteration  30: 63522187.241 ops/s
Iteration   1: 63801735.450 ops/s
Iteration   2: 63843382.761 ops/s
Iteration   3: 63886063.614 ops/s
Iteration   4: 63668879.824 ops/s
Iteration   5: 63866697.526 ops/s
Iteration   6: 63911718.554 ops/s
Iteration   7: 63393786.923 ops/s
Iteration   8: 63886677.938 ops/s
Iteration   9: 63919104.499 ops/s
Iteration  10: 64046159.457 ops/s
Iteration  11: 63868540.296 ops/s
Iteration  12: 63978478.844 ops/s
Iteration  13: 63893488.889 ops/s
Iteration  14: 63941362.720 ops/s
Iteration  15: 63813836.363 ops/s
Iteration  16: 63753208.382 ops/s
Iteration  17: 63807252.970 ops/s
Iteration  18: 63808896.530 ops/s
Iteration  19: 63702352.816 ops/s
Iteration  20: 64107005.204 ops/s
Iteration  21: 63731273.546 ops/s
Iteration  22: 63742271.847 ops/s
Iteration  23: 63985261.163 ops/s
Iteration  24: 63710711.858 ops/s
Iteration  25: 64023616.448 ops/s
Iteration  26: 63822855.670 ops/s
Iteration  27: 63853118.188 ops/s
Iteration  28: 63961196.065 ops/s
Iteration  29: 63988181.455 ops/s
Iteration  30: 64072914.509 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_sumFloat":
  63859667.677 ±(99.9%) 95704.451 ops/s [Average]
  (min, avg, max) = (63393786.923, 63859667.677, 64107005.204), stdev = 143245.927
  CI (99.9%): [63763963.226, 63955372.128] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score       Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_sumFloat  thrpt   30  63859667.677 ± 95704.451  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_sumInteger$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_sumInteger

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 33799004.600 ops/s
# Warmup Iteration   2: 63655010.757 ops/s
# Warmup Iteration   3: 61854113.338 ops/s
# Warmup Iteration   4: 63154727.319 ops/s
# Warmup Iteration   5: 67517730.049 ops/s
# Warmup Iteration   6: 67489346.491 ops/s
# Warmup Iteration   7: 67526680.396 ops/s
# Warmup Iteration   8: 67489935.465 ops/s
# Warmup Iteration   9: 67588592.189 ops/s
# Warmup Iteration  10: 67516043.721 ops/s
# Warmup Iteration  11: 67648497.121 ops/s
# Warmup Iteration  12: 67465959.541 ops/s
# Warmup Iteration  13: 67333470.801 ops/s
# Warmup Iteration  14: 67453307.863 ops/s
# Warmup Iteration  15: 67535232.890 ops/s
# Warmup Iteration  16: 67580745.493 ops/s
# Warmup Iteration  17: 67688686.393 ops/s
# Warmup Iteration  18: 67681337.417 ops/s
# Warmup Iteration  19: 67520396.985 ops/s
# Warmup Iteration  20: 67592050.142 ops/s
# Warmup Iteration  21: 67303553.150 ops/s
# Warmup Iteration  22: 67617751.389 ops/s
# Warmup Iteration  23: 67465051.505 ops/s
# Warmup Iteration  24: 67515528.914 ops/s
# Warmup Iteration  25: 67516169.641 ops/s
# Warmup Iteration  26: 67462305.241 ops/s
# Warmup Iteration  27: 67331029.706 ops/s
# Warmup Iteration  28: 67587057.936 ops/s
# Warmup Iteration  29: 67611555.504 ops/s
# Warmup Iteration  30: 67560051.079 ops/s
Iteration   1: 67446231.322 ops/s
Iteration   2: 67811704.309 ops/s
Iteration   3: 67648397.923 ops/s
Iteration   4: 67624313.641 ops/s
Iteration   5: 67661410.215 ops/s
Iteration   6: 67521832.769 ops/s
Iteration   7: 67582570.725 ops/s
Iteration   8: 67576999.869 ops/s
Iteration   9: 67734913.621 ops/s
Iteration  10: 67680599.397 ops/s
Iteration  11: 67881086.744 ops/s
Iteration  12: 67721342.602 ops/s
Iteration  13: 67680312.737 ops/s
Iteration  14: 67637891.139 ops/s
Iteration  15: 67303815.214 ops/s
Iteration  16: 67550144.359 ops/s
Iteration  17: 67467070.727 ops/s
Iteration  18: 67448926.800 ops/s
Iteration  19: 67372921.986 ops/s
Iteration  20: 67553724.411 ops/s
Iteration  21: 67513860.660 ops/s
Iteration  22: 67400351.049 ops/s
Iteration  23: 67503368.834 ops/s
Iteration  24: 67596812.718 ops/s
Iteration  25: 67623283.745 ops/s
Iteration  26: 67504740.212 ops/s
Iteration  27: 67506985.843 ops/s
Iteration  28: 67623585.314 ops/s
Iteration  29: 67780321.370 ops/s
Iteration  30: 67377991.000 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_sumInteger":
  67577917.042 ±(99.9%) 90785.472 ops/s [Average]
  (min, avg, max) = (67303815.214, 67577917.042, 67881086.744), stdev = 135883.431
  CI (99.9%): [67487131.570, 67668702.514] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_sumInteger  thrpt   30  67577917.042 ± 90785.472  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_sumLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_sumLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 34488836.204 ops/s
# Warmup Iteration   2: 63681489.301 ops/s
# Warmup Iteration   3: 61492631.533 ops/s
# Warmup Iteration   4: 63737384.398 ops/s
# Warmup Iteration   5: 67820165.408 ops/s
# Warmup Iteration   6: 67735314.628 ops/s
# Warmup Iteration   7: 67842716.138 ops/s
# Warmup Iteration   8: 67707897.058 ops/s
# Warmup Iteration   9: 67827508.780 ops/s
# Warmup Iteration  10: 67770044.315 ops/s
# Warmup Iteration  11: 67878413.232 ops/s
# Warmup Iteration  12: 67737763.974 ops/s
# Warmup Iteration  13: 67905567.829 ops/s
# Warmup Iteration  14: 68009089.904 ops/s
# Warmup Iteration  15: 67824844.455 ops/s
# Warmup Iteration  16: 67781019.648 ops/s
# Warmup Iteration  17: 67903994.774 ops/s
# Warmup Iteration  18: 67897488.809 ops/s
# Warmup Iteration  19: 67649740.083 ops/s
# Warmup Iteration  20: 67447469.184 ops/s
# Warmup Iteration  21: 67765906.703 ops/s
# Warmup Iteration  22: 67771881.430 ops/s
# Warmup Iteration  23: 67881894.483 ops/s
# Warmup Iteration  24: 67999587.989 ops/s
# Warmup Iteration  25: 67985051.197 ops/s
# Warmup Iteration  26: 67714296.062 ops/s
# Warmup Iteration  27: 67839729.507 ops/s
# Warmup Iteration  28: 67775511.773 ops/s
# Warmup Iteration  29: 67849812.042 ops/s
# Warmup Iteration  30: 67880074.103 ops/s
Iteration   1: 68017044.473 ops/s
Iteration   2: 67838312.991 ops/s
Iteration   3: 67714757.737 ops/s
Iteration   4: 67738099.534 ops/s
Iteration   5: 67826944.881 ops/s
Iteration   6: 67868690.786 ops/s
Iteration   7: 67855865.744 ops/s
Iteration   8: 68164437.749 ops/s
Iteration   9: 67939632.004 ops/s
Iteration  10: 67902060.419 ops/s
Iteration  11: 67906261.895 ops/s
Iteration  12: 67897409.773 ops/s
Iteration  13: 67841122.088 ops/s
Iteration  14: 67817005.772 ops/s
Iteration  15: 68021335.768 ops/s
Iteration  16: 67716012.399 ops/s
Iteration  17: 67679613.586 ops/s
Iteration  18: 67931727.873 ops/s
Iteration  19: 67695294.381 ops/s
Iteration  20: 68026990.970 ops/s
Iteration  21: 67878297.275 ops/s
Iteration  22: 67944782.369 ops/s
Iteration  23: 67777165.056 ops/s
Iteration  24: 67741771.081 ops/s
Iteration  25: 67733730.648 ops/s
Iteration  26: 68014541.272 ops/s
Iteration  27: 67802734.295 ops/s
Iteration  28: 67907266.068 ops/s
Iteration  29: 67785966.644 ops/s
Iteration  30: 67636421.469 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_sumLong":
  67854043.233 ±(99.9%) 81956.220 ops/s [Average]
  (min, avg, max) = (67636421.469, 67854043.233, 68164437.749), stdev = 122668.221
  CI (99.9%): [67772087.013, 67935999.453] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_sumLong  thrpt   30  67854043.233 ± 81956.220  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_take$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_take

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10275559.708 ops/s
# Warmup Iteration   2: 21766733.005 ops/s
# Warmup Iteration   3: 18544101.726 ops/s
# Warmup Iteration   4: 22335034.347 ops/s
# Warmup Iteration   5: 22325987.269 ops/s
# Warmup Iteration   6: 22353962.106 ops/s
# Warmup Iteration   7: 22310992.108 ops/s
# Warmup Iteration   8: 22237855.981 ops/s
# Warmup Iteration   9: 22222241.530 ops/s
# Warmup Iteration  10: 22254481.340 ops/s
# Warmup Iteration  11: 22284134.834 ops/s
# Warmup Iteration  12: 22318644.544 ops/s
# Warmup Iteration  13: 22277143.589 ops/s
# Warmup Iteration  14: 22343531.113 ops/s
# Warmup Iteration  15: 22329971.174 ops/s
# Warmup Iteration  16: 22319836.123 ops/s
# Warmup Iteration  17: 22310841.268 ops/s
# Warmup Iteration  18: 22327130.956 ops/s
# Warmup Iteration  19: 22162883.165 ops/s
# Warmup Iteration  20: 22286547.108 ops/s
# Warmup Iteration  21: 22368662.773 ops/s
# Warmup Iteration  22: 22354079.475 ops/s
# Warmup Iteration  23: 22368524.393 ops/s
# Warmup Iteration  24: 22331959.485 ops/s
# Warmup Iteration  25: 22335612.064 ops/s
# Warmup Iteration  26: 22277071.181 ops/s
# Warmup Iteration  27: 22375934.080 ops/s
# Warmup Iteration  28: 22348285.867 ops/s
# Warmup Iteration  29: 22357487.695 ops/s
# Warmup Iteration  30: 22339475.409 ops/s
Iteration   1: 22268346.826 ops/s
Iteration   2: 22294540.954 ops/s
Iteration   3: 22404936.707 ops/s
Iteration   4: 22346364.884 ops/s
Iteration   5: 22397642.094 ops/s
Iteration   6: 22310925.210 ops/s
Iteration   7: 22310562.119 ops/s
Iteration   8: 22376145.246 ops/s
Iteration   9: 22406853.002 ops/s
Iteration  10: 22251376.491 ops/s
Iteration  11: 22351310.085 ops/s
Iteration  12: 22379326.163 ops/s
Iteration  13: 22319650.876 ops/s
Iteration  14: 22414838.307 ops/s
Iteration  15: 22318483.222 ops/s
Iteration  16: 22358773.594 ops/s
Iteration  17: 22358566.125 ops/s
Iteration  18: 22329493.526 ops/s
Iteration  19: 22301232.267 ops/s
Iteration  20: 22321585.496 ops/s
Iteration  21: 22287113.782 ops/s
Iteration  22: 22302130.455 ops/s
Iteration  23: 22321373.928 ops/s
Iteration  24: 22280419.597 ops/s
Iteration  25: 22305209.255 ops/s
Iteration  26: 22296603.552 ops/s
Iteration  27: 22278478.066 ops/s
Iteration  28: 22306698.752 ops/s
Iteration  29: 22348884.804 ops/s
Iteration  30: 22417782.237 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_take":
  22332188.254 ±(99.9%) 30726.686 ops/s [Average]
  (min, avg, max) = (22251376.491, 22332188.254, 22417782.237), stdev = 45990.260
  CI (99.9%): [22301461.568, 22362914.940] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score       Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_take  thrpt   30  22332188.254 ± 30726.686  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_takeWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_takeWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7912498.315 ops/s
# Warmup Iteration   2: 15990411.993 ops/s
# Warmup Iteration   3: 16134084.066 ops/s
# Warmup Iteration   4: 16222289.632 ops/s
# Warmup Iteration   5: 13715326.320 ops/s
# Warmup Iteration   6: 16266773.986 ops/s
# Warmup Iteration   7: 16281028.906 ops/s
# Warmup Iteration   8: 16255133.285 ops/s
# Warmup Iteration   9: 16258187.737 ops/s
# Warmup Iteration  10: 16235674.749 ops/s
# Warmup Iteration  11: 16221833.726 ops/s
# Warmup Iteration  12: 16239117.846 ops/s
# Warmup Iteration  13: 16281633.998 ops/s
# Warmup Iteration  14: 16265482.562 ops/s
# Warmup Iteration  15: 16249470.554 ops/s
# Warmup Iteration  16: 16269759.205 ops/s
# Warmup Iteration  17: 16073521.260 ops/s
# Warmup Iteration  18: 16086460.630 ops/s
# Warmup Iteration  19: 16062086.031 ops/s
# Warmup Iteration  20: 16079970.588 ops/s
# Warmup Iteration  21: 16044254.840 ops/s
# Warmup Iteration  22: 16087941.483 ops/s
# Warmup Iteration  23: 16090180.655 ops/s
# Warmup Iteration  24: 16070328.809 ops/s
# Warmup Iteration  25: 16090341.443 ops/s
# Warmup Iteration  26: 16073683.342 ops/s
# Warmup Iteration  27: 16078126.519 ops/s
# Warmup Iteration  28: 16080222.563 ops/s
# Warmup Iteration  29: 16071445.777 ops/s
# Warmup Iteration  30: 16082474.401 ops/s
Iteration   1: 15989115.390 ops/s
Iteration   2: 16054923.572 ops/s
Iteration   3: 16075061.980 ops/s
Iteration   4: 16095037.543 ops/s
Iteration   5: 16070116.604 ops/s
Iteration   6: 16090914.905 ops/s
Iteration   7: 16073811.427 ops/s
Iteration   8: 16103905.707 ops/s
Iteration   9: 16076191.908 ops/s
Iteration  10: 16080540.103 ops/s
Iteration  11: 16100155.585 ops/s
Iteration  12: 16077265.069 ops/s
Iteration  13: 16072316.416 ops/s
Iteration  14: 16064365.485 ops/s
Iteration  15: 16162995.658 ops/s
Iteration  16: 16052119.831 ops/s
Iteration  17: 16067944.829 ops/s
Iteration  18: 16094115.984 ops/s
Iteration  19: 16055298.536 ops/s
Iteration  20: 16060953.260 ops/s
Iteration  21: 16054752.013 ops/s
Iteration  22: 16106268.894 ops/s
Iteration  23: 16048794.657 ops/s
Iteration  24: 16071668.381 ops/s
Iteration  25: 16045748.091 ops/s
Iteration  26: 16093055.630 ops/s
Iteration  27: 16071290.786 ops/s
Iteration  28: 16066322.965 ops/s
Iteration  29: 16086477.823 ops/s
Iteration  30: 16076009.692 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_takeWhile":
  16074584.624 ±(99.9%) 18748.425 ops/s [Average]
  (min, avg, max) = (15989115.390, 16074584.624, 16162995.658), stdev = 28061.762
  CI (99.9%): [16055836.199, 16093333.049] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_takeWhile  thrpt   30  16074584.624 ± 18748.425  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_take_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_take_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 751850.393 ops/s
# Warmup Iteration   2: 775595.298 ops/s
# Warmup Iteration   3: 998778.817 ops/s
# Warmup Iteration   4: 1002878.732 ops/s
# Warmup Iteration   5: 1005781.837 ops/s
# Warmup Iteration   6: 994676.652 ops/s
# Warmup Iteration   7: 965810.687 ops/s
# Warmup Iteration   8: 996321.302 ops/s
# Warmup Iteration   9: 992099.075 ops/s
# Warmup Iteration  10: 997061.919 ops/s
# Warmup Iteration  11: 1004002.856 ops/s
# Warmup Iteration  12: 870461.049 ops/s
# Warmup Iteration  13: 985872.519 ops/s
# Warmup Iteration  14: 1002564.381 ops/s
# Warmup Iteration  15: 1001707.688 ops/s
# Warmup Iteration  16: 1001927.092 ops/s
# Warmup Iteration  17: 1063754.894 ops/s
# Warmup Iteration  18: 1063323.805 ops/s
# Warmup Iteration  19: 1061331.226 ops/s
# Warmup Iteration  20: 1062838.650 ops/s
# Warmup Iteration  21: 1063358.910 ops/s
# Warmup Iteration  22: 1063105.767 ops/s
# Warmup Iteration  23: 1064512.491 ops/s
# Warmup Iteration  24: 1065279.218 ops/s
# Warmup Iteration  25: 1064832.093 ops/s
# Warmup Iteration  26: 1061699.117 ops/s
# Warmup Iteration  27: 1062131.336 ops/s
# Warmup Iteration  28: 1063751.984 ops/s
# Warmup Iteration  29: 1064492.979 ops/s
# Warmup Iteration  30: 1061796.748 ops/s
Iteration   1: 1066102.540 ops/s
Iteration   2: 1067225.063 ops/s
Iteration   3: 1061577.290 ops/s
Iteration   4: 1060178.561 ops/s
Iteration   5: 1064647.713 ops/s
Iteration   6: 1065140.774 ops/s
Iteration   7: 1065712.751 ops/s
Iteration   8: 1065774.022 ops/s
Iteration   9: 1066397.851 ops/s
Iteration  10: 1064729.907 ops/s
Iteration  11: 1065516.012 ops/s
Iteration  12: 1065606.260 ops/s
Iteration  13: 1065302.564 ops/s
Iteration  14: 1066075.251 ops/s
Iteration  15: 1066455.102 ops/s
Iteration  16: 1066049.267 ops/s
Iteration  17: 1063887.335 ops/s
Iteration  18: 1063971.232 ops/s
Iteration  19: 1066281.957 ops/s
Iteration  20: 1063295.032 ops/s
Iteration  21: 1064859.016 ops/s
Iteration  22: 1064699.141 ops/s
Iteration  23: 1064880.246 ops/s
Iteration  24: 1059951.858 ops/s
Iteration  25: 1064821.430 ops/s
Iteration  26: 1067094.793 ops/s
Iteration  27: 1064690.411 ops/s
Iteration  28: 1061310.367 ops/s
Iteration  29: 1067746.810 ops/s
Iteration  30: 1066377.965 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_take_throws":
  1064878.617 ±(99.9%) 1295.826 ops/s [Average]
  (min, avg, max) = (1059951.858, 1064878.617, 1067746.810), stdev = 1939.532
  CI (99.9%): [1063582.791, 1066174.444] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_take_throws  thrpt   30  1064878.617 ± 1295.826  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_tap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_tap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 14165665.922 ops/s
# Warmup Iteration   2: 25514518.116 ops/s
# Warmup Iteration   3: 25386551.196 ops/s
# Warmup Iteration   4: 27411825.846 ops/s
# Warmup Iteration   5: 27538541.789 ops/s
# Warmup Iteration   6: 27438189.775 ops/s
# Warmup Iteration   7: 27416832.825 ops/s
# Warmup Iteration   8: 27551574.353 ops/s
# Warmup Iteration   9: 27532274.144 ops/s
# Warmup Iteration  10: 27494801.632 ops/s
# Warmup Iteration  11: 27447434.881 ops/s
# Warmup Iteration  12: 27586379.274 ops/s
# Warmup Iteration  13: 27482354.856 ops/s
# Warmup Iteration  14: 27520087.695 ops/s
# Warmup Iteration  15: 27482686.974 ops/s
# Warmup Iteration  16: 27444689.266 ops/s
# Warmup Iteration  17: 27391084.390 ops/s
# Warmup Iteration  18: 27551182.342 ops/s
# Warmup Iteration  19: 27558031.340 ops/s
# Warmup Iteration  20: 27562502.633 ops/s
# Warmup Iteration  21: 27453251.887 ops/s
# Warmup Iteration  22: 27465275.864 ops/s
# Warmup Iteration  23: 27482871.010 ops/s
# Warmup Iteration  24: 27492246.659 ops/s
# Warmup Iteration  25: 27704402.920 ops/s
# Warmup Iteration  26: 27427403.767 ops/s
# Warmup Iteration  27: 27446944.724 ops/s
# Warmup Iteration  28: 27453127.693 ops/s
# Warmup Iteration  29: 27403826.089 ops/s
# Warmup Iteration  30: 27471820.369 ops/s
Iteration   1: 27279715.860 ops/s
Iteration   2: 27351568.415 ops/s
Iteration   3: 27563050.249 ops/s
Iteration   4: 27574743.840 ops/s
Iteration   5: 27434087.297 ops/s
Iteration   6: 27521394.212 ops/s
Iteration   7: 27599263.641 ops/s
Iteration   8: 27416969.576 ops/s
Iteration   9: 27243837.071 ops/s
Iteration  10: 27398839.621 ops/s
Iteration  11: 27408855.169 ops/s
Iteration  12: 27448673.806 ops/s
Iteration  13: 27599179.753 ops/s
Iteration  14: 27511638.810 ops/s
Iteration  15: 27478828.310 ops/s
Iteration  16: 27374858.558 ops/s
Iteration  17: 27563596.149 ops/s
Iteration  18: 27615570.790 ops/s
Iteration  19: 27556071.150 ops/s
Iteration  20: 27399903.724 ops/s
Iteration  21: 27354222.568 ops/s
Iteration  22: 27548465.066 ops/s
Iteration  23: 27428579.297 ops/s
Iteration  24: 27547619.612 ops/s
Iteration  25: 27514586.777 ops/s
Iteration  26: 27547934.251 ops/s
Iteration  27: 26982217.549 ops/s
Iteration  28: 27282868.339 ops/s
Iteration  29: 27441223.758 ops/s
Iteration  30: 27471940.073 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_tap":
  27448676.776 ±(99.9%) 89383.258 ops/s [Average]
  (min, avg, max) = (26982217.549, 27448676.776, 27615570.790), stdev = 133784.663
  CI (99.9%): [27359293.518, 27538060.034] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt         Score       Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_tap  thrpt   30  27448676.776 ± 89383.258  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4035722.736 ops/s
# Warmup Iteration   2: 8466932.955 ops/s
# Warmup Iteration   3: 7178662.882 ops/s
# Warmup Iteration   4: 8503605.042 ops/s
# Warmup Iteration   5: 8492999.888 ops/s
# Warmup Iteration   6: 8509693.747 ops/s
# Warmup Iteration   7: 8497199.917 ops/s
# Warmup Iteration   8: 8491311.289 ops/s
# Warmup Iteration   9: 8516200.630 ops/s
# Warmup Iteration  10: 8446623.606 ops/s
# Warmup Iteration  11: 8453464.098 ops/s
# Warmup Iteration  12: 8487092.251 ops/s
# Warmup Iteration  13: 8512650.912 ops/s
# Warmup Iteration  14: 8510103.887 ops/s
# Warmup Iteration  15: 8470048.597 ops/s
# Warmup Iteration  16: 8500336.944 ops/s
# Warmup Iteration  17: 8480583.604 ops/s
# Warmup Iteration  18: 8508650.638 ops/s
# Warmup Iteration  19: 8490432.331 ops/s
# Warmup Iteration  20: 8511520.902 ops/s
# Warmup Iteration  21: 8495206.014 ops/s
# Warmup Iteration  22: 8487328.901 ops/s
# Warmup Iteration  23: 8518680.772 ops/s
# Warmup Iteration  24: 8498839.991 ops/s
# Warmup Iteration  25: 8476961.283 ops/s
# Warmup Iteration  26: 8493098.667 ops/s
# Warmup Iteration  27: 8507762.622 ops/s
# Warmup Iteration  28: 8483800.825 ops/s
# Warmup Iteration  29: 8472077.393 ops/s
# Warmup Iteration  30: 8476883.241 ops/s
Iteration   1: 8466631.918 ops/s
Iteration   2: 8500666.821 ops/s
Iteration   3: 8531976.587 ops/s
Iteration   4: 8494085.493 ops/s
Iteration   5: 8469302.870 ops/s
Iteration   6: 8486511.345 ops/s
Iteration   7: 8472773.640 ops/s
Iteration   8: 8456629.414 ops/s
Iteration   9: 8478450.084 ops/s
Iteration  10: 8487629.882 ops/s
Iteration  11: 8516217.218 ops/s
Iteration  12: 8465847.792 ops/s
Iteration  13: 8471266.413 ops/s
Iteration  14: 8490681.486 ops/s
Iteration  15: 8464741.011 ops/s
Iteration  16: 8515204.714 ops/s
Iteration  17: 8500470.536 ops/s
Iteration  18: 8499569.900 ops/s
Iteration  19: 8454383.601 ops/s
Iteration  20: 8505055.481 ops/s
Iteration  21: 8519716.130 ops/s
Iteration  22: 8473109.720 ops/s
Iteration  23: 8486522.833 ops/s
Iteration  24: 8489324.749 ops/s
Iteration  25: 8515189.797 ops/s
Iteration  26: 8504217.062 ops/s
Iteration  27: 8489897.521 ops/s
Iteration  28: 8474917.526 ops/s
Iteration  29: 8513268.348 ops/s
Iteration  30: 8501556.765 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_testToString":
  8489860.555 ±(99.9%) 13556.485 ops/s [Average]
  (min, avg, max) = (8454383.601, 8489860.555, 8531976.587), stdev = 20290.711
  CI (99.9%): [8476304.070, 8503417.041] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_testToString  thrpt   30  8489860.555 ± 13556.485  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10669766.819 ops/s
# Warmup Iteration   2: 21465297.377 ops/s
# Warmup Iteration   3: 18287183.973 ops/s
# Warmup Iteration   4: 21475655.188 ops/s
# Warmup Iteration   5: 21562665.606 ops/s
# Warmup Iteration   6: 21539964.076 ops/s
# Warmup Iteration   7: 21466597.838 ops/s
# Warmup Iteration   8: 21536967.069 ops/s
# Warmup Iteration   9: 21466684.966 ops/s
# Warmup Iteration  10: 21479884.970 ops/s
# Warmup Iteration  11: 21603144.495 ops/s
# Warmup Iteration  12: 21453266.174 ops/s
# Warmup Iteration  13: 21489742.950 ops/s
# Warmup Iteration  14: 21488340.775 ops/s
# Warmup Iteration  15: 21531575.986 ops/s
# Warmup Iteration  16: 21563739.437 ops/s
# Warmup Iteration  17: 21531827.427 ops/s
# Warmup Iteration  18: 21498618.839 ops/s
# Warmup Iteration  19: 21528835.468 ops/s
# Warmup Iteration  20: 21539548.118 ops/s
# Warmup Iteration  21: 21545755.426 ops/s
# Warmup Iteration  22: 21538099.766 ops/s
# Warmup Iteration  23: 21574505.514 ops/s
# Warmup Iteration  24: 21528826.982 ops/s
# Warmup Iteration  25: 21520783.698 ops/s
# Warmup Iteration  26: 21511925.292 ops/s
# Warmup Iteration  27: 21446277.002 ops/s
# Warmup Iteration  28: 21474639.613 ops/s
# Warmup Iteration  29: 21537823.634 ops/s
# Warmup Iteration  30: 21531550.016 ops/s
Iteration   1: 21481850.912 ops/s
Iteration   2: 21507152.362 ops/s
Iteration   3: 21532619.163 ops/s
Iteration   4: 21595613.489 ops/s
Iteration   5: 21584082.191 ops/s
Iteration   6: 21525002.274 ops/s
Iteration   7: 21514910.068 ops/s
Iteration   8: 21599413.528 ops/s
Iteration   9: 21514421.238 ops/s
Iteration  10: 21511541.307 ops/s
Iteration  11: 21626414.688 ops/s
Iteration  12: 21502279.868 ops/s
Iteration  13: 20043721.582 ops/s
Iteration  14: 21531632.885 ops/s
Iteration  15: 21504704.346 ops/s
Iteration  16: 21638225.230 ops/s
Iteration  17: 21542223.043 ops/s
Iteration  18: 21472427.933 ops/s
Iteration  19: 21571397.934 ops/s
Iteration  20: 21545678.912 ops/s
Iteration  21: 21517926.857 ops/s
Iteration  22: 21527621.498 ops/s
Iteration  23: 21539839.050 ops/s
Iteration  24: 21552240.799 ops/s
Iteration  25: 21545875.994 ops/s
Iteration  26: 21368663.082 ops/s
Iteration  27: 20629828.411 ops/s
Iteration  28: 21434644.615 ops/s
Iteration  29: 21497414.213 ops/s
Iteration  30: 21485126.332 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_toArray":
  21448149.794 ±(99.9%) 211316.494 ops/s [Average]
  (min, avg, max) = (20043721.582, 21448149.794, 21638225.230), stdev = 316288.604
  CI (99.9%): [21236833.299, 21659466.288] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score        Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_toArray  thrpt   30  21448149.794 ± 211316.494  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_toImmutable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_toImmutable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 165028128.636 ops/s
# Warmup Iteration   2: 302019342.208 ops/s
# Warmup Iteration   3: 274262437.738 ops/s
# Warmup Iteration   4: 311095476.455 ops/s
# Warmup Iteration   5: 311914063.832 ops/s
# Warmup Iteration   6: 311930668.368 ops/s
# Warmup Iteration   7: 311874758.734 ops/s
# Warmup Iteration   8: 311889189.486 ops/s
# Warmup Iteration   9: 310498092.103 ops/s
# Warmup Iteration  10: 312220489.825 ops/s
# Warmup Iteration  11: 312144709.259 ops/s
# Warmup Iteration  12: 312835589.872 ops/s
# Warmup Iteration  13: 312031510.738 ops/s
# Warmup Iteration  14: 311542373.956 ops/s
# Warmup Iteration  15: 311755127.358 ops/s
# Warmup Iteration  16: 312760709.816 ops/s
# Warmup Iteration  17: 311003292.310 ops/s
# Warmup Iteration  18: 312259231.131 ops/s
# Warmup Iteration  19: 311572641.765 ops/s
# Warmup Iteration  20: 311268821.211 ops/s
# Warmup Iteration  21: 311705057.477 ops/s
# Warmup Iteration  22: 312296017.373 ops/s
# Warmup Iteration  23: 311188096.896 ops/s
# Warmup Iteration  24: 310834424.540 ops/s
# Warmup Iteration  25: 310882710.696 ops/s
# Warmup Iteration  26: 310664402.136 ops/s
# Warmup Iteration  27: 311989127.324 ops/s
# Warmup Iteration  28: 311442741.820 ops/s
# Warmup Iteration  29: 311517472.733 ops/s
# Warmup Iteration  30: 312115469.426 ops/s
Iteration   1: 312076243.853 ops/s
Iteration   2: 311181596.202 ops/s
Iteration   3: 313089988.039 ops/s
Iteration   4: 312681332.534 ops/s
Iteration   5: 312633406.483 ops/s
Iteration   6: 312599795.489 ops/s
Iteration   7: 312587080.014 ops/s
Iteration   8: 312368304.520 ops/s
Iteration   9: 311449538.235 ops/s
Iteration  10: 311871990.397 ops/s
Iteration  11: 311044129.409 ops/s
Iteration  12: 311177824.965 ops/s
Iteration  13: 311287277.966 ops/s
Iteration  14: 311376638.330 ops/s
Iteration  15: 311006090.658 ops/s
Iteration  16: 311550571.618 ops/s
Iteration  17: 310204342.031 ops/s
Iteration  18: 312312371.797 ops/s
Iteration  19: 311766890.645 ops/s
Iteration  20: 312678225.516 ops/s
Iteration  21: 311995142.685 ops/s
Iteration  22: 312074083.114 ops/s
Iteration  23: 310089491.518 ops/s
Iteration  24: 310755586.344 ops/s
Iteration  25: 310494879.612 ops/s
Iteration  26: 311261864.089 ops/s
Iteration  27: 311905102.325 ops/s
Iteration  28: 312910993.257 ops/s
Iteration  29: 311119695.200 ops/s
Iteration  30: 311382263.727 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_toImmutable":
  311697758.019 ±(99.9%) 536074.625 ops/s [Average]
  (min, avg, max) = (310089491.518, 311697758.019, 313089988.039), stdev = 802371.322
  CI (99.9%): [311161683.395, 312233832.644] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt          Score        Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_toImmutable  thrpt   30  311697758.019 ± 536074.625  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3803499.213 ops/s
# Warmup Iteration   2: 7688171.830 ops/s
# Warmup Iteration   3: 6539931.586 ops/s
# Warmup Iteration   4: 7749298.396 ops/s
# Warmup Iteration   5: 7729901.451 ops/s
# Warmup Iteration   6: 7733905.055 ops/s
# Warmup Iteration   7: 7716061.517 ops/s
# Warmup Iteration   8: 7756287.921 ops/s
# Warmup Iteration   9: 7755714.415 ops/s
# Warmup Iteration  10: 7745984.966 ops/s
# Warmup Iteration  11: 7732068.793 ops/s
# Warmup Iteration  12: 7754160.052 ops/s
# Warmup Iteration  13: 7726587.885 ops/s
# Warmup Iteration  14: 7733079.117 ops/s
# Warmup Iteration  15: 7741169.493 ops/s
# Warmup Iteration  16: 7758019.543 ops/s
# Warmup Iteration  17: 7738610.718 ops/s
# Warmup Iteration  18: 7758301.912 ops/s
# Warmup Iteration  19: 7739546.797 ops/s
# Warmup Iteration  20: 7768245.153 ops/s
# Warmup Iteration  21: 7734330.011 ops/s
# Warmup Iteration  22: 7737636.082 ops/s
# Warmup Iteration  23: 7732268.256 ops/s
# Warmup Iteration  24: 7739557.809 ops/s
# Warmup Iteration  25: 7733009.698 ops/s
# Warmup Iteration  26: 7743490.672 ops/s
# Warmup Iteration  27: 7713572.250 ops/s
# Warmup Iteration  28: 7733519.449 ops/s
# Warmup Iteration  29: 7735924.013 ops/s
# Warmup Iteration  30: 7751779.426 ops/s
Iteration   1: 7739647.484 ops/s
Iteration   2: 7779360.779 ops/s
Iteration   3: 7746638.497 ops/s
Iteration   4: 7733645.963 ops/s
Iteration   5: 7710416.382 ops/s
Iteration   6: 7760351.285 ops/s
Iteration   7: 7770094.425 ops/s
Iteration   8: 7766827.497 ops/s
Iteration   9: 7768296.217 ops/s
Iteration  10: 7771574.173 ops/s
Iteration  11: 7760081.896 ops/s
Iteration  12: 7776073.041 ops/s
Iteration  13: 7725959.038 ops/s
Iteration  14: 7786287.301 ops/s
Iteration  15: 7758323.757 ops/s
Iteration  16: 7755090.708 ops/s
Iteration  17: 7744231.612 ops/s
Iteration  18: 7769819.357 ops/s
Iteration  19: 7731271.808 ops/s
Iteration  20: 7751402.380 ops/s
Iteration  21: 7747841.287 ops/s
Iteration  22: 7766810.092 ops/s
Iteration  23: 7759359.495 ops/s
Iteration  24: 7751702.083 ops/s
Iteration  25: 7771233.238 ops/s
Iteration  26: 7741293.357 ops/s
Iteration  27: 7726356.651 ops/s
Iteration  28: 7753921.958 ops/s
Iteration  29: 7717805.434 ops/s
Iteration  30: 7726544.851 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_toList":
  7752275.402 ±(99.9%) 12934.627 ops/s [Average]
  (min, avg, max) = (7710416.382, 7752275.402, 7786287.301), stdev = 19359.942
  CI (99.9%): [7739340.775, 7765210.028] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_toList  thrpt   30  7752275.402 ± 12934.627  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_toReversed$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_toReversed

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 166728504.133 ops/s
# Warmup Iteration   2: 301477093.171 ops/s
# Warmup Iteration   3: 278536177.229 ops/s
# Warmup Iteration   4: 316501864.897 ops/s
# Warmup Iteration   5: 315783572.516 ops/s
# Warmup Iteration   6: 315521422.570 ops/s
# Warmup Iteration   7: 315929556.414 ops/s
# Warmup Iteration   8: 315062369.026 ops/s
# Warmup Iteration   9: 315362007.002 ops/s
# Warmup Iteration  10: 315480007.075 ops/s
# Warmup Iteration  11: 316395311.827 ops/s
# Warmup Iteration  12: 314381679.973 ops/s
# Warmup Iteration  13: 316079682.035 ops/s
# Warmup Iteration  14: 315135996.003 ops/s
# Warmup Iteration  15: 316258457.060 ops/s
# Warmup Iteration  16: 314926584.639 ops/s
# Warmup Iteration  17: 314867816.030 ops/s
# Warmup Iteration  18: 315047864.170 ops/s
# Warmup Iteration  19: 315056720.946 ops/s
# Warmup Iteration  20: 315487541.609 ops/s
# Warmup Iteration  21: 314997190.009 ops/s
# Warmup Iteration  22: 314435927.736 ops/s
# Warmup Iteration  23: 314835084.680 ops/s
# Warmup Iteration  24: 315044684.884 ops/s
# Warmup Iteration  25: 314940479.754 ops/s
# Warmup Iteration  26: 315210024.669 ops/s
# Warmup Iteration  27: 315149499.032 ops/s
# Warmup Iteration  28: 314036036.481 ops/s
# Warmup Iteration  29: 314236383.935 ops/s
# Warmup Iteration  30: 314780037.991 ops/s
Iteration   1: 315454294.073 ops/s
Iteration   2: 316135468.360 ops/s
Iteration   3: 315627721.241 ops/s
Iteration   4: 316034235.124 ops/s
Iteration   5: 315495725.968 ops/s
Iteration   6: 315222005.574 ops/s
Iteration   7: 316501797.159 ops/s
Iteration   8: 315505926.987 ops/s
Iteration   9: 314621427.657 ops/s
Iteration  10: 315291959.827 ops/s
Iteration  11: 316752506.785 ops/s
Iteration  12: 314645565.317 ops/s
Iteration  13: 315172595.990 ops/s
Iteration  14: 315994802.878 ops/s
Iteration  15: 315384190.378 ops/s
Iteration  16: 314164807.799 ops/s
Iteration  17: 314015251.705 ops/s
Iteration  18: 314442492.547 ops/s
Iteration  19: 312381479.504 ops/s
Iteration  20: 313816271.850 ops/s
Iteration  21: 314321094.710 ops/s
Iteration  22: 313663453.461 ops/s
Iteration  23: 315082166.430 ops/s
Iteration  24: 315322507.015 ops/s
Iteration  25: 314182276.422 ops/s
Iteration  26: 314720059.117 ops/s
Iteration  27: 315012686.845 ops/s
Iteration  28: 315981559.534 ops/s
Iteration  29: 315683576.292 ops/s
Iteration  30: 314873139.559 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_toReversed":
  315050101.537 ±(99.9%) 621206.596 ops/s [Average]
  (min, avg, max) = (312381479.504, 315050101.537, 316752506.785), stdev = 929792.859
  CI (99.9%): [314428894.941, 315671308.133] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt          Score        Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_toReversed  thrpt   30  315050101.537 ± 621206.596  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_toSortedList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_toSortedList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7977631.088 ops/s
# Warmup Iteration   2: 17216938.080 ops/s
# Warmup Iteration   3: 15144099.234 ops/s
# Warmup Iteration   4: 17946594.523 ops/s
# Warmup Iteration   5: 17940556.486 ops/s
# Warmup Iteration   6: 17924198.668 ops/s
# Warmup Iteration   7: 17956888.495 ops/s
# Warmup Iteration   8: 17957172.807 ops/s
# Warmup Iteration   9: 17946892.331 ops/s
# Warmup Iteration  10: 17927648.980 ops/s
# Warmup Iteration  11: 17965796.932 ops/s
# Warmup Iteration  12: 17908251.953 ops/s
# Warmup Iteration  13: 17939474.478 ops/s
# Warmup Iteration  14: 17906605.817 ops/s
# Warmup Iteration  15: 17936849.423 ops/s
# Warmup Iteration  16: 17894317.455 ops/s
# Warmup Iteration  17: 17919684.331 ops/s
# Warmup Iteration  18: 17945374.528 ops/s
# Warmup Iteration  19: 17941133.013 ops/s
# Warmup Iteration  20: 17922455.821 ops/s
# Warmup Iteration  21: 17955427.799 ops/s
# Warmup Iteration  22: 17917850.621 ops/s
# Warmup Iteration  23: 17896888.977 ops/s
# Warmup Iteration  24: 17942447.531 ops/s
# Warmup Iteration  25: 17926909.692 ops/s
# Warmup Iteration  26: 17929475.489 ops/s
# Warmup Iteration  27: 17931482.311 ops/s
# Warmup Iteration  28: 17956656.011 ops/s
# Warmup Iteration  29: 17921606.763 ops/s
# Warmup Iteration  30: 17912496.311 ops/s
Iteration   1: 17920456.706 ops/s
Iteration   2: 17927507.082 ops/s
Iteration   3: 17927742.112 ops/s
Iteration   4: 17968817.891 ops/s
Iteration   5: 17924770.977 ops/s
Iteration   6: 17907036.780 ops/s
Iteration   7: 17939413.669 ops/s
Iteration   8: 17957614.406 ops/s
Iteration   9: 17885775.651 ops/s
Iteration  10: 17941226.319 ops/s
Iteration  11: 17924654.204 ops/s
Iteration  12: 17960527.184 ops/s
Iteration  13: 17953910.823 ops/s
Iteration  14: 17918449.816 ops/s
Iteration  15: 17952062.467 ops/s
Iteration  16: 17975355.556 ops/s
Iteration  17: 17865069.848 ops/s
Iteration  18: 17959132.987 ops/s
Iteration  19: 17885212.780 ops/s
Iteration  20: 17908779.057 ops/s
Iteration  21: 17894157.620 ops/s
Iteration  22: 17975433.254 ops/s
Iteration  23: 17953801.104 ops/s
Iteration  24: 17929174.915 ops/s
Iteration  25: 17906856.343 ops/s
Iteration  26: 17922016.038 ops/s
Iteration  27: 17882196.064 ops/s
Iteration  28: 17921617.685 ops/s
Iteration  29: 17920810.944 ops/s
Iteration  30: 17910294.307 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_toSortedList":
  17927329.153 ±(99.9%) 19202.861 ops/s [Average]
  (min, avg, max) = (17865069.848, 17927329.153, 17975433.254), stdev = 28741.940
  CI (99.9%): [17908126.292, 17946532.014] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score       Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_toSortedList  thrpt   30  17927329.153 ± 19202.861  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_toSortedListBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_toSortedListBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3386910.464 ops/s
# Warmup Iteration   2: 4333836.808 ops/s
# Warmup Iteration   3: 5315978.729 ops/s
# Warmup Iteration   4: 5277342.489 ops/s
# Warmup Iteration   5: 5308796.062 ops/s
# Warmup Iteration   6: 5308106.734 ops/s
# Warmup Iteration   7: 5304323.423 ops/s
# Warmup Iteration   8: 5003341.680 ops/s
# Warmup Iteration   9: 4767611.438 ops/s
# Warmup Iteration  10: 5306873.370 ops/s
# Warmup Iteration  11: 5312156.875 ops/s
# Warmup Iteration  12: 5308728.440 ops/s
# Warmup Iteration  13: 5307221.923 ops/s
# Warmup Iteration  14: 5308355.098 ops/s
# Warmup Iteration  15: 5300931.718 ops/s
# Warmup Iteration  16: 5307832.333 ops/s
# Warmup Iteration  17: 5307403.464 ops/s
# Warmup Iteration  18: 5313838.040 ops/s
# Warmup Iteration  19: 5309092.577 ops/s
# Warmup Iteration  20: 5304010.629 ops/s
# Warmup Iteration  21: 5284049.164 ops/s
# Warmup Iteration  22: 5287596.985 ops/s
# Warmup Iteration  23: 5295306.208 ops/s
# Warmup Iteration  24: 5305754.098 ops/s
# Warmup Iteration  25: 5311155.511 ops/s
# Warmup Iteration  26: 5305097.507 ops/s
# Warmup Iteration  27: 5306740.761 ops/s
# Warmup Iteration  28: 5301901.839 ops/s
# Warmup Iteration  29: 5292670.900 ops/s
# Warmup Iteration  30: 5292698.774 ops/s
Iteration   1: 5300142.380 ops/s
Iteration   2: 5297204.092 ops/s
Iteration   3: 5311864.931 ops/s
Iteration   4: 5309995.987 ops/s
Iteration   5: 5300359.934 ops/s
Iteration   6: 5312033.429 ops/s
Iteration   7: 5306457.196 ops/s
Iteration   8: 5309671.937 ops/s
Iteration   9: 5307168.000 ops/s
Iteration  10: 5305099.527 ops/s
Iteration  11: 5305320.633 ops/s
Iteration  12: 5316662.051 ops/s
Iteration  13: 5303650.223 ops/s
Iteration  14: 5310658.553 ops/s
Iteration  15: 5306659.423 ops/s
Iteration  16: 5300079.172 ops/s
Iteration  17: 5311340.061 ops/s
Iteration  18: 5310412.740 ops/s
Iteration  19: 5301616.574 ops/s
Iteration  20: 5308702.428 ops/s
Iteration  21: 5302713.427 ops/s
Iteration  22: 5300667.465 ops/s
Iteration  23: 5309146.881 ops/s
Iteration  24: 5289366.278 ops/s
Iteration  25: 5313356.984 ops/s
Iteration  26: 5309869.209 ops/s
Iteration  27: 5306145.850 ops/s
Iteration  28: 5308958.770 ops/s
Iteration  29: 5309838.540 ops/s
Iteration  30: 5297281.083 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_toSortedListBy":
  5306081.459 ±(99.9%) 3907.045 ops/s [Average]
  (min, avg, max) = (5289366.278, 5306081.459, 5316662.051), stdev = 5847.882
  CI (99.9%): [5302174.413, 5309988.504] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_toSortedListBy  thrpt   30  5306081.459 ± 3907.045  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_toSortedSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_toSortedSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6054641.447 ops/s
# Warmup Iteration   2: 11830041.780 ops/s
# Warmup Iteration   3: 11786775.405 ops/s
# Warmup Iteration   4: 12748095.629 ops/s
# Warmup Iteration   5: 12788337.189 ops/s
# Warmup Iteration   6: 12792074.725 ops/s
# Warmup Iteration   7: 12835240.716 ops/s
# Warmup Iteration   8: 12749312.510 ops/s
# Warmup Iteration   9: 12832733.648 ops/s
# Warmup Iteration  10: 12795569.860 ops/s
# Warmup Iteration  11: 12804595.612 ops/s
# Warmup Iteration  12: 12912955.864 ops/s
# Warmup Iteration  13: 12942340.379 ops/s
# Warmup Iteration  14: 12802742.025 ops/s
# Warmup Iteration  15: 12823540.307 ops/s
# Warmup Iteration  16: 12833249.821 ops/s
# Warmup Iteration  17: 12912930.946 ops/s
# Warmup Iteration  18: 12808090.196 ops/s
# Warmup Iteration  19: 12839455.188 ops/s
# Warmup Iteration  20: 12828959.280 ops/s
# Warmup Iteration  21: 12843391.784 ops/s
# Warmup Iteration  22: 12797810.177 ops/s
# Warmup Iteration  23: 12850295.251 ops/s
# Warmup Iteration  24: 12832691.728 ops/s
# Warmup Iteration  25: 12817718.745 ops/s
# Warmup Iteration  26: 12832483.355 ops/s
# Warmup Iteration  27: 12789190.928 ops/s
# Warmup Iteration  28: 12761263.177 ops/s
# Warmup Iteration  29: 12843915.316 ops/s
# Warmup Iteration  30: 12809539.473 ops/s
Iteration   1: 12832841.721 ops/s
Iteration   2: 12876095.333 ops/s
Iteration   3: 12843767.721 ops/s
Iteration   4: 12840028.745 ops/s
Iteration   5: 12861079.918 ops/s
Iteration   6: 12826646.252 ops/s
Iteration   7: 12860253.160 ops/s
Iteration   8: 12828264.865 ops/s
Iteration   9: 12807955.678 ops/s
Iteration  10: 12806034.044 ops/s
Iteration  11: 12872482.714 ops/s
Iteration  12: 12840818.843 ops/s
Iteration  13: 12885320.848 ops/s
Iteration  14: 12818010.582 ops/s
Iteration  15: 12752595.747 ops/s
Iteration  16: 12750292.691 ops/s
Iteration  17: 12777164.074 ops/s
Iteration  18: 12858948.939 ops/s
Iteration  19: 12866543.104 ops/s
Iteration  20: 12770444.833 ops/s
Iteration  21: 12838622.815 ops/s
Iteration  22: 12759663.562 ops/s
Iteration  23: 12854142.443 ops/s
Iteration  24: 12898196.000 ops/s
Iteration  25: 12850954.286 ops/s
Iteration  26: 12858562.788 ops/s
Iteration  27: 12808766.130 ops/s
Iteration  28: 12729812.172 ops/s
Iteration  29: 12780089.179 ops/s
Iteration  30: 12804361.264 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_toSortedSet":
  12825292.015 ±(99.9%) 29318.139 ops/s [Average]
  (min, avg, max) = (12729812.172, 12825292.015, 12898196.000), stdev = 43882.014
  CI (99.9%): [12795973.876, 12854610.154] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_toSortedSet  thrpt   30  12825292.015 ± 29318.139  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_toSortedSetBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_toSortedSetBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1318870.642 ops/s
# Warmup Iteration   2: 2786455.055 ops/s
# Warmup Iteration   3: 2843475.108 ops/s
# Warmup Iteration   4: 2866198.953 ops/s
# Warmup Iteration   5: 2411848.068 ops/s
# Warmup Iteration   6: 2882596.295 ops/s
# Warmup Iteration   7: 2883075.129 ops/s
# Warmup Iteration   8: 2880434.215 ops/s
# Warmup Iteration   9: 2882752.476 ops/s
# Warmup Iteration  10: 2880214.619 ops/s
# Warmup Iteration  11: 2883217.458 ops/s
# Warmup Iteration  12: 2786136.807 ops/s
# Warmup Iteration  13: 2884607.323 ops/s
# Warmup Iteration  14: 2879311.142 ops/s
# Warmup Iteration  15: 2882674.814 ops/s
# Warmup Iteration  16: 2881787.455 ops/s
# Warmup Iteration  17: 2836094.042 ops/s
# Warmup Iteration  18: 2854728.490 ops/s
# Warmup Iteration  19: 2860146.313 ops/s
# Warmup Iteration  20: 2874058.687 ops/s
# Warmup Iteration  21: 2869833.537 ops/s
# Warmup Iteration  22: 2866002.117 ops/s
# Warmup Iteration  23: 2868414.654 ops/s
# Warmup Iteration  24: 2868332.954 ops/s
# Warmup Iteration  25: 2869962.126 ops/s
# Warmup Iteration  26: 2866308.671 ops/s
# Warmup Iteration  27: 2870966.358 ops/s
# Warmup Iteration  28: 2868022.319 ops/s
# Warmup Iteration  29: 2867630.973 ops/s
# Warmup Iteration  30: 2865928.875 ops/s
Iteration   1: 2866434.089 ops/s
Iteration   2: 2869626.029 ops/s
Iteration   3: 2858865.223 ops/s
Iteration   4: 2864920.185 ops/s
Iteration   5: 2864669.692 ops/s
Iteration   6: 2868536.840 ops/s
Iteration   7: 2863509.916 ops/s
Iteration   8: 2867728.062 ops/s
Iteration   9: 2868290.631 ops/s
Iteration  10: 2872920.740 ops/s
Iteration  11: 2866260.418 ops/s
Iteration  12: 2863592.986 ops/s
Iteration  13: 2864379.868 ops/s
Iteration  14: 2873396.116 ops/s
Iteration  15: 2859460.609 ops/s
Iteration  16: 2862869.890 ops/s
Iteration  17: 2853842.891 ops/s
Iteration  18: 2851639.472 ops/s
Iteration  19: 2862138.899 ops/s
Iteration  20: 2865311.484 ops/s
Iteration  21: 2870501.199 ops/s
Iteration  22: 2869982.331 ops/s
Iteration  23: 2864413.390 ops/s
Iteration  24: 2865414.324 ops/s
Iteration  25: 2872951.057 ops/s
Iteration  26: 2868936.461 ops/s
Iteration  27: 2869807.201 ops/s
Iteration  28: 2868450.755 ops/s
Iteration  29: 2871707.643 ops/s
Iteration  30: 2868108.185 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_toSortedSetBy":
  2865955.553 ±(99.9%) 3452.675 ops/s [Average]
  (min, avg, max) = (2851639.472, 2865955.553, 2873396.116), stdev = 5167.801
  CI (99.9%): [2862502.878, 2869408.228] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_toSortedSetBy  thrpt   30  2865955.553 ± 3452.675  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_toSortedSetWithComparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_toSortedSetWithComparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3990660.928 ops/s
# Warmup Iteration   2: 9411262.150 ops/s
# Warmup Iteration   3: 7925138.515 ops/s
# Warmup Iteration   4: 9414232.851 ops/s
# Warmup Iteration   5: 9427683.544 ops/s
# Warmup Iteration   6: 9402914.841 ops/s
# Warmup Iteration   7: 9430748.027 ops/s
# Warmup Iteration   8: 9433839.235 ops/s
# Warmup Iteration   9: 9421263.827 ops/s
# Warmup Iteration  10: 9412161.021 ops/s
# Warmup Iteration  11: 9390876.231 ops/s
# Warmup Iteration  12: 9416488.586 ops/s
# Warmup Iteration  13: 9406024.579 ops/s
# Warmup Iteration  14: 9428765.007 ops/s
# Warmup Iteration  15: 9427878.396 ops/s
# Warmup Iteration  16: 9435729.386 ops/s
# Warmup Iteration  17: 9394706.725 ops/s
# Warmup Iteration  18: 9395528.544 ops/s
# Warmup Iteration  19: 9413907.072 ops/s
# Warmup Iteration  20: 9400583.397 ops/s
# Warmup Iteration  21: 9393241.736 ops/s
# Warmup Iteration  22: 9362436.673 ops/s
# Warmup Iteration  23: 9418509.230 ops/s
# Warmup Iteration  24: 9400514.497 ops/s
# Warmup Iteration  25: 9381420.588 ops/s
# Warmup Iteration  26: 9346430.555 ops/s
# Warmup Iteration  27: 9412188.201 ops/s
# Warmup Iteration  28: 9376069.915 ops/s
# Warmup Iteration  29: 9365971.163 ops/s
# Warmup Iteration  30: 9393904.364 ops/s
Iteration   1: 9413743.057 ops/s
Iteration   2: 9390629.537 ops/s
Iteration   3: 9423361.014 ops/s
Iteration   4: 9407816.761 ops/s
Iteration   5: 9407505.838 ops/s
Iteration   6: 9405588.615 ops/s
Iteration   7: 9428580.411 ops/s
Iteration   8: 9427168.356 ops/s
Iteration   9: 9398842.170 ops/s
Iteration  10: 9416698.630 ops/s
Iteration  11: 9415035.525 ops/s
Iteration  12: 9395989.653 ops/s
Iteration  13: 9405239.329 ops/s
Iteration  14: 9430494.468 ops/s
Iteration  15: 9411647.763 ops/s
Iteration  16: 9413101.969 ops/s
Iteration  17: 9417993.207 ops/s
Iteration  18: 9402996.348 ops/s
Iteration  19: 9408702.699 ops/s
Iteration  20: 9425727.785 ops/s
Iteration  21: 9404793.996 ops/s
Iteration  22: 9415274.062 ops/s
Iteration  23: 9389220.707 ops/s
Iteration  24: 9438327.454 ops/s
Iteration  25: 9410075.912 ops/s
Iteration  26: 9408765.367 ops/s
Iteration  27: 9401501.548 ops/s
Iteration  28: 9368253.211 ops/s
Iteration  29: 9350708.729 ops/s
Iteration  30: 9399137.962 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_toSortedSetWithComparator":
  9407764.069 ±(99.9%) 11792.974 ops/s [Average]
  (min, avg, max) = (9350708.729, 9407764.069, 9438327.454), stdev = 17651.169
  CI (99.9%): [9395971.096, 9419557.043] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_toSortedSetWithComparator  thrpt   30  9407764.069 ± 11792.974  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_toStack$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_toStack

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5779541.050 ops/s
# Warmup Iteration   2: 13537468.936 ops/s
# Warmup Iteration   3: 11449248.623 ops/s
# Warmup Iteration   4: 13669026.787 ops/s
# Warmup Iteration   5: 13661988.186 ops/s
# Warmup Iteration   6: 13674398.953 ops/s
# Warmup Iteration   7: 13670633.395 ops/s
# Warmup Iteration   8: 13681321.096 ops/s
# Warmup Iteration   9: 13669492.789 ops/s
# Warmup Iteration  10: 13677157.015 ops/s
# Warmup Iteration  11: 13699074.005 ops/s
# Warmup Iteration  12: 13684586.600 ops/s
# Warmup Iteration  13: 13680074.337 ops/s
# Warmup Iteration  14: 13668339.527 ops/s
# Warmup Iteration  15: 13646747.630 ops/s
# Warmup Iteration  16: 13610245.690 ops/s
# Warmup Iteration  17: 13616355.731 ops/s
# Warmup Iteration  18: 13696552.114 ops/s
# Warmup Iteration  19: 13641029.089 ops/s
# Warmup Iteration  20: 13629050.261 ops/s
# Warmup Iteration  21: 13631689.871 ops/s
# Warmup Iteration  22: 13651434.397 ops/s
# Warmup Iteration  23: 13632436.976 ops/s
# Warmup Iteration  24: 13678919.579 ops/s
# Warmup Iteration  25: 13663212.707 ops/s
# Warmup Iteration  26: 13688633.854 ops/s
# Warmup Iteration  27: 13653706.839 ops/s
# Warmup Iteration  28: 13686617.661 ops/s
# Warmup Iteration  29: 13656003.982 ops/s
# Warmup Iteration  30: 13676191.794 ops/s
Iteration   1: 13663488.477 ops/s
Iteration   2: 13666860.220 ops/s
Iteration   3: 13681473.884 ops/s
Iteration   4: 13647451.360 ops/s
Iteration   5: 13632345.092 ops/s
Iteration   6: 13611935.389 ops/s
Iteration   7: 13677530.243 ops/s
Iteration   8: 13650910.841 ops/s
Iteration   9: 13676299.773 ops/s
Iteration  10: 13653670.897 ops/s
Iteration  11: 13690959.768 ops/s
Iteration  12: 13680535.238 ops/s
Iteration  13: 13664199.530 ops/s
Iteration  14: 13643548.408 ops/s
Iteration  15: 13613515.452 ops/s
Iteration  16: 13634444.858 ops/s
Iteration  17: 13664344.811 ops/s
Iteration  18: 13698352.791 ops/s
Iteration  19: 13653449.649 ops/s
Iteration  20: 13675656.710 ops/s
Iteration  21: 13662623.989 ops/s
Iteration  22: 13668008.462 ops/s
Iteration  23: 13660851.567 ops/s
Iteration  24: 13698798.269 ops/s
Iteration  25: 13644911.361 ops/s
Iteration  26: 13689653.683 ops/s
Iteration  27: 13679743.086 ops/s
Iteration  28: 13686213.578 ops/s
Iteration  29: 13656212.420 ops/s
Iteration  30: 13693613.056 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_toStack":
  13664053.429 ±(99.9%) 15256.012 ops/s [Average]
  (min, avg, max) = (13611935.389, 13664053.429, 13698798.269), stdev = 22834.482
  CI (99.9%): [13648797.417, 13679309.440] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_toStack  thrpt   30  13664053.429 ± 15256.012  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_zip$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_zip

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 679689.979 ops/s
# Warmup Iteration   2: 1117168.522 ops/s
# Warmup Iteration   3: 1286650.882 ops/s
# Warmup Iteration   4: 1294873.261 ops/s
# Warmup Iteration   5: 1291907.512 ops/s
# Warmup Iteration   6: 1068633.228 ops/s
# Warmup Iteration   7: 1295832.054 ops/s
# Warmup Iteration   8: 1297415.394 ops/s
# Warmup Iteration   9: 1296068.117 ops/s
# Warmup Iteration  10: 1296546.278 ops/s
# Warmup Iteration  11: 1296650.315 ops/s
# Warmup Iteration  12: 1295557.548 ops/s
# Warmup Iteration  13: 1295719.598 ops/s
# Warmup Iteration  14: 1296100.785 ops/s
# Warmup Iteration  15: 1296208.863 ops/s
# Warmup Iteration  16: 1295131.519 ops/s
# Warmup Iteration  17: 1297472.836 ops/s
# Warmup Iteration  18: 1296762.052 ops/s
# Warmup Iteration  19: 1297353.203 ops/s
# Warmup Iteration  20: 1295972.389 ops/s
# Warmup Iteration  21: 1296930.647 ops/s
# Warmup Iteration  22: 1295603.748 ops/s
# Warmup Iteration  23: 1292526.061 ops/s
# Warmup Iteration  24: 1289288.052 ops/s
# Warmup Iteration  25: 1296140.827 ops/s
# Warmup Iteration  26: 1292910.563 ops/s
# Warmup Iteration  27: 1296623.317 ops/s
# Warmup Iteration  28: 1297283.622 ops/s
# Warmup Iteration  29: 1290917.161 ops/s
# Warmup Iteration  30: 1291026.735 ops/s
Iteration   1: 1292309.437 ops/s
Iteration   2: 1295400.556 ops/s
Iteration   3: 1296481.487 ops/s
Iteration   4: 1296581.547 ops/s
Iteration   5: 1297372.323 ops/s
Iteration   6: 1296899.428 ops/s
Iteration   7: 1297043.516 ops/s
Iteration   8: 1296328.767 ops/s
Iteration   9: 1297762.457 ops/s
Iteration  10: 1297302.807 ops/s
Iteration  11: 1293014.644 ops/s
Iteration  12: 1299751.395 ops/s
Iteration  13: 1295852.976 ops/s
Iteration  14: 1296385.025 ops/s
Iteration  15: 1293601.527 ops/s
Iteration  16: 1296426.334 ops/s
Iteration  17: 1295963.770 ops/s
Iteration  18: 1297238.452 ops/s
Iteration  19: 1294636.657 ops/s
Iteration  20: 1297273.312 ops/s
Iteration  21: 1295827.680 ops/s
Iteration  22: 1296387.692 ops/s
Iteration  23: 1296068.693 ops/s
Iteration  24: 1297385.459 ops/s
Iteration  25: 1295811.654 ops/s
Iteration  26: 1298921.537 ops/s
Iteration  27: 1296778.606 ops/s
Iteration  28: 1295232.092 ops/s
Iteration  29: 1297499.011 ops/s
Iteration  30: 1297641.476 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_zip":
  1296372.677 ±(99.9%) 1037.954 ops/s [Average]
  (min, avg, max) = (1292309.437, 1296372.677, 1299751.395), stdev = 1553.560
  CI (99.9%): [1295334.723, 1297410.631] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_zip  thrpt   30  1296372.677 ± 1037.954  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_zipWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_zipWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1437858.138 ops/s
# Warmup Iteration   2: 2211836.004 ops/s
# Warmup Iteration   3: 2543327.225 ops/s
# Warmup Iteration   4: 2547999.531 ops/s
# Warmup Iteration   5: 2558710.324 ops/s
# Warmup Iteration   6: 2545770.231 ops/s
# Warmup Iteration   7: 2149982.821 ops/s
# Warmup Iteration   8: 2557508.482 ops/s
# Warmup Iteration   9: 2560401.909 ops/s
# Warmup Iteration  10: 2559381.222 ops/s
# Warmup Iteration  11: 2557988.393 ops/s
# Warmup Iteration  12: 2556916.299 ops/s
# Warmup Iteration  13: 2560331.668 ops/s
# Warmup Iteration  14: 2559307.419 ops/s
# Warmup Iteration  15: 2560197.807 ops/s
# Warmup Iteration  16: 2558076.216 ops/s
# Warmup Iteration  17: 2557889.917 ops/s
# Warmup Iteration  18: 2557711.540 ops/s
# Warmup Iteration  19: 2556719.230 ops/s
# Warmup Iteration  20: 2555349.832 ops/s
# Warmup Iteration  21: 2559747.756 ops/s
# Warmup Iteration  22: 2561761.429 ops/s
# Warmup Iteration  23: 2558868.918 ops/s
# Warmup Iteration  24: 2560136.963 ops/s
# Warmup Iteration  25: 2555002.369 ops/s
# Warmup Iteration  26: 2558842.083 ops/s
# Warmup Iteration  27: 2560503.952 ops/s
# Warmup Iteration  28: 2560448.951 ops/s
# Warmup Iteration  29: 2559132.557 ops/s
# Warmup Iteration  30: 2560444.499 ops/s
Iteration   1: 2556529.411 ops/s
Iteration   2: 2560805.847 ops/s
Iteration   3: 2557454.575 ops/s
Iteration   4: 2560174.654 ops/s
Iteration   5: 2554597.289 ops/s
Iteration   6: 2560864.728 ops/s
Iteration   7: 2553932.185 ops/s
Iteration   8: 2558804.924 ops/s
Iteration   9: 2562101.712 ops/s
Iteration  10: 2555166.126 ops/s
Iteration  11: 2560053.866 ops/s
Iteration  12: 2554726.742 ops/s
Iteration  13: 2558119.452 ops/s
Iteration  14: 2559000.610 ops/s
Iteration  15: 2560394.448 ops/s
Iteration  16: 2557584.224 ops/s
Iteration  17: 2558167.025 ops/s
Iteration  18: 2547362.190 ops/s
Iteration  19: 2553097.265 ops/s
Iteration  20: 2553137.764 ops/s
Iteration  21: 2558932.511 ops/s
Iteration  22: 2556540.664 ops/s
Iteration  23: 2559030.898 ops/s
Iteration  24: 2558325.855 ops/s
Iteration  25: 2559245.065 ops/s
Iteration  26: 2555640.537 ops/s
Iteration  27: 2558671.873 ops/s
Iteration  28: 2557077.286 ops/s
Iteration  29: 2561760.934 ops/s
Iteration  30: 2556314.255 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSingletonListTest._Benchmark.benchmark_zipWithIndex":
  2557453.831 ±(99.9%) 2076.924 ops/s [Average]
  (min, avg, max) = (2547362.190, 2557453.831, 2562101.712), stdev = 3108.642
  CI (99.9%): [2555376.907, 2559530.754] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableSingletonListTest._Benchmark.benchmark_zipWithIndex  thrpt   30  2557453.831 ± 2076.924  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 728772.570 ops/s
# Warmup Iteration   2: 780727.843 ops/s
# Warmup Iteration   3: 988949.260 ops/s
# Warmup Iteration   4: 979967.910 ops/s
# Warmup Iteration   5: 977671.445 ops/s
# Warmup Iteration   6: 982218.017 ops/s
# Warmup Iteration   7: 981769.742 ops/s
# Warmup Iteration   8: 983597.886 ops/s
# Warmup Iteration   9: 986218.924 ops/s
# Warmup Iteration  10: 984948.011 ops/s
# Warmup Iteration  11: 942424.553 ops/s
# Warmup Iteration  12: 877613.821 ops/s
# Warmup Iteration  13: 985147.139 ops/s
# Warmup Iteration  14: 983622.827 ops/s
# Warmup Iteration  15: 982452.145 ops/s
# Warmup Iteration  16: 981552.323 ops/s
# Warmup Iteration  17: 1045734.729 ops/s
# Warmup Iteration  18: 1044495.049 ops/s
# Warmup Iteration  19: 1040580.625 ops/s
# Warmup Iteration  20: 1043813.348 ops/s
# Warmup Iteration  21: 1048823.986 ops/s
# Warmup Iteration  22: 1046104.031 ops/s
# Warmup Iteration  23: 1044497.874 ops/s
# Warmup Iteration  24: 1050378.327 ops/s
# Warmup Iteration  25: 1047498.157 ops/s
# Warmup Iteration  26: 1046546.611 ops/s
# Warmup Iteration  27: 1049358.047 ops/s
# Warmup Iteration  28: 1043787.243 ops/s
# Warmup Iteration  29: 1042898.496 ops/s
# Warmup Iteration  30: 1047166.708 ops/s
Iteration   1: 1039517.144 ops/s
Iteration   2: 1049762.388 ops/s
Iteration   3: 1046641.504 ops/s
Iteration   4: 1047811.285 ops/s
Iteration   5: 1048528.844 ops/s
Iteration   6: 1050243.375 ops/s
Iteration   7: 1050419.177 ops/s
Iteration   8: 1050461.937 ops/s
Iteration   9: 1044504.231 ops/s
Iteration  10: 1048462.115 ops/s
Iteration  11: 1047319.845 ops/s
Iteration  12: 1048863.658 ops/s
Iteration  13: 1046134.493 ops/s
Iteration  14: 1046486.139 ops/s
Iteration  15: 1045519.858 ops/s
Iteration  16: 1042379.884 ops/s
Iteration  17: 1044125.912 ops/s
Iteration  18: 1045543.541 ops/s
Iteration  19: 1047705.321 ops/s
Iteration  20: 1048500.784 ops/s
Iteration  21: 1049205.087 ops/s
Iteration  22: 1048581.541 ops/s
Iteration  23: 1044220.318 ops/s
Iteration  24: 1042929.023 ops/s
Iteration  25: 1048811.957 ops/s
Iteration  26: 1047094.689 ops/s
Iteration  27: 1045117.913 ops/s
Iteration  28: 1042386.649 ops/s
Iteration  29: 1045324.429 ops/s
Iteration  30: 1044835.744 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_add":
  1046581.293 ±(99.9%) 1808.885 ops/s [Average]
  (min, avg, max) = (1039517.144, 1046581.293, 1050461.937), stdev = 2707.455
  CI (99.9%): [1044772.408, 1048390.178] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_add  thrpt   30  1046581.293 ± 1808.885  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_addAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_addAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 730776.801 ops/s
# Warmup Iteration   2: 776689.852 ops/s
# Warmup Iteration   3: 972306.160 ops/s
# Warmup Iteration   4: 968546.493 ops/s
# Warmup Iteration   5: 963065.948 ops/s
# Warmup Iteration   6: 964647.142 ops/s
# Warmup Iteration   7: 961888.787 ops/s
# Warmup Iteration   8: 960436.904 ops/s
# Warmup Iteration   9: 963344.535 ops/s
# Warmup Iteration  10: 961363.121 ops/s
# Warmup Iteration  11: 964532.488 ops/s
# Warmup Iteration  12: 829587.729 ops/s
# Warmup Iteration  13: 961595.896 ops/s
# Warmup Iteration  14: 962290.077 ops/s
# Warmup Iteration  15: 965811.352 ops/s
# Warmup Iteration  16: 964969.718 ops/s
# Warmup Iteration  17: 1016164.429 ops/s
# Warmup Iteration  18: 1019464.406 ops/s
# Warmup Iteration  19: 1021509.843 ops/s
# Warmup Iteration  20: 1017797.239 ops/s
# Warmup Iteration  21: 1017622.711 ops/s
# Warmup Iteration  22: 1018761.194 ops/s
# Warmup Iteration  23: 1020398.811 ops/s
# Warmup Iteration  24: 1019005.034 ops/s
# Warmup Iteration  25: 1021450.693 ops/s
# Warmup Iteration  26: 1021267.805 ops/s
# Warmup Iteration  27: 1021610.742 ops/s
# Warmup Iteration  28: 1021526.090 ops/s
# Warmup Iteration  29: 1020432.961 ops/s
# Warmup Iteration  30: 1019821.334 ops/s
Iteration   1: 1021356.337 ops/s
Iteration   2: 1012115.386 ops/s
Iteration   3: 1009690.865 ops/s
Iteration   4: 1020545.198 ops/s
Iteration   5: 1022695.613 ops/s
Iteration   6: 1016750.680 ops/s
Iteration   7: 1018466.439 ops/s
Iteration   8: 1018252.866 ops/s
Iteration   9: 1018030.324 ops/s
Iteration  10: 1016188.420 ops/s
Iteration  11: 1022468.101 ops/s
Iteration  12: 1019749.503 ops/s
Iteration  13: 1022424.487 ops/s
Iteration  14: 1019863.684 ops/s
Iteration  15: 1014896.135 ops/s
Iteration  16: 1020032.941 ops/s
Iteration  17: 1019569.721 ops/s
Iteration  18: 1015786.271 ops/s
Iteration  19: 1019281.967 ops/s
Iteration  20: 1018801.082 ops/s
Iteration  21: 1020848.979 ops/s
Iteration  22: 1019074.998 ops/s
Iteration  23: 1019932.593 ops/s
Iteration  24: 1020615.806 ops/s
Iteration  25: 1015174.774 ops/s
Iteration  26: 1018308.684 ops/s
Iteration  27: 1021199.992 ops/s
Iteration  28: 1021730.119 ops/s
Iteration  29: 1021638.801 ops/s
Iteration  30: 1016048.962 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_addAll":
  1018717.991 ±(99.9%) 2045.164 ops/s [Average]
  (min, avg, max) = (1009690.865, 1018717.991, 1022695.613), stdev = 3061.106
  CI (99.9%): [1016672.827, 1020763.155] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_addAll  thrpt   30  1018717.991 ± 2045.164  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_addAllAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_addAllAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 735157.975 ops/s
# Warmup Iteration   2: 789091.038 ops/s
# Warmup Iteration   3: 996932.519 ops/s
# Warmup Iteration   4: 994769.902 ops/s
# Warmup Iteration   5: 992139.066 ops/s
# Warmup Iteration   6: 999989.240 ops/s
# Warmup Iteration   7: 997823.385 ops/s
# Warmup Iteration   8: 997704.529 ops/s
# Warmup Iteration   9: 995219.243 ops/s
# Warmup Iteration  10: 995990.932 ops/s
# Warmup Iteration  11: 923293.843 ops/s
# Warmup Iteration  12: 919588.077 ops/s
# Warmup Iteration  13: 998573.336 ops/s
# Warmup Iteration  14: 996375.546 ops/s
# Warmup Iteration  15: 994758.737 ops/s
# Warmup Iteration  16: 995910.638 ops/s
# Warmup Iteration  17: 1065078.259 ops/s
# Warmup Iteration  18: 1063239.893 ops/s
# Warmup Iteration  19: 1061522.367 ops/s
# Warmup Iteration  20: 1060791.024 ops/s
# Warmup Iteration  21: 1061554.591 ops/s
# Warmup Iteration  22: 1066653.798 ops/s
# Warmup Iteration  23: 1063142.209 ops/s
# Warmup Iteration  24: 1061267.985 ops/s
# Warmup Iteration  25: 1060882.241 ops/s
# Warmup Iteration  26: 1065998.451 ops/s
# Warmup Iteration  27: 1062931.136 ops/s
# Warmup Iteration  28: 1062215.611 ops/s
# Warmup Iteration  29: 1064613.694 ops/s
# Warmup Iteration  30: 1065083.963 ops/s
Iteration   1: 1064897.259 ops/s
Iteration   2: 1062184.327 ops/s
Iteration   3: 1062516.519 ops/s
Iteration   4: 1060964.348 ops/s
Iteration   5: 1059390.164 ops/s
Iteration   6: 1064406.682 ops/s
Iteration   7: 1066354.521 ops/s
Iteration   8: 1064568.580 ops/s
Iteration   9: 1065788.775 ops/s
Iteration  10: 1064229.740 ops/s
Iteration  11: 1061829.870 ops/s
Iteration  12: 1060835.384 ops/s
Iteration  13: 1062425.979 ops/s
Iteration  14: 1063524.117 ops/s
Iteration  15: 1062203.726 ops/s
Iteration  16: 1067530.723 ops/s
Iteration  17: 1064212.287 ops/s
Iteration  18: 1062540.435 ops/s
Iteration  19: 1065118.826 ops/s
Iteration  20: 1067830.134 ops/s
Iteration  21: 1066762.432 ops/s
Iteration  22: 1066284.789 ops/s
Iteration  23: 1064349.165 ops/s
Iteration  24: 1063761.748 ops/s
Iteration  25: 1066434.916 ops/s
Iteration  26: 1063676.729 ops/s
Iteration  27: 1065835.566 ops/s
Iteration  28: 1064360.804 ops/s
Iteration  29: 1064448.778 ops/s
Iteration  30: 1060944.557 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_addAllAtIndex":
  1064007.063 ±(99.9%) 1411.130 ops/s [Average]
  (min, avg, max) = (1059390.164, 1064007.063, 1067830.134), stdev = 2112.112
  CI (99.9%): [1062595.933, 1065418.192] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_addAllAtIndex  thrpt   30  1064007.063 ± 1411.130  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_addAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_addAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 622368.001 ops/s
# Warmup Iteration   2: 760962.433 ops/s
# Warmup Iteration   3: 939700.430 ops/s
# Warmup Iteration   4: 931644.330 ops/s
# Warmup Iteration   5: 940430.163 ops/s
# Warmup Iteration   6: 937946.891 ops/s
# Warmup Iteration   7: 941178.063 ops/s
# Warmup Iteration   8: 941826.011 ops/s
# Warmup Iteration   9: 793700.423 ops/s
# Warmup Iteration  10: 939937.712 ops/s
# Warmup Iteration  11: 941564.478 ops/s
# Warmup Iteration  12: 944123.229 ops/s
# Warmup Iteration  13: 943582.505 ops/s
# Warmup Iteration  14: 941852.058 ops/s
# Warmup Iteration  15: 940553.142 ops/s
# Warmup Iteration  16: 940747.369 ops/s
# Warmup Iteration  17: 998462.120 ops/s
# Warmup Iteration  18: 1002893.086 ops/s
# Warmup Iteration  19: 999660.319 ops/s
# Warmup Iteration  20: 999408.859 ops/s
# Warmup Iteration  21: 1002928.565 ops/s
# Warmup Iteration  22: 993208.610 ops/s
# Warmup Iteration  23: 999439.361 ops/s
# Warmup Iteration  24: 997381.971 ops/s
# Warmup Iteration  25: 1000710.867 ops/s
# Warmup Iteration  26: 1001257.971 ops/s
# Warmup Iteration  27: 1001115.923 ops/s
# Warmup Iteration  28: 1000154.251 ops/s
# Warmup Iteration  29: 999907.200 ops/s
# Warmup Iteration  30: 999679.039 ops/s
Iteration   1: 997102.036 ops/s
Iteration   2: 1000698.190 ops/s
Iteration   3: 994715.040 ops/s
Iteration   4: 999224.339 ops/s
Iteration   5: 999386.568 ops/s
Iteration   6: 994935.574 ops/s
Iteration   7: 999944.529 ops/s
Iteration   8: 997789.787 ops/s
Iteration   9: 998466.536 ops/s
Iteration  10: 1002075.420 ops/s
Iteration  11: 998819.071 ops/s
Iteration  12: 998012.439 ops/s
Iteration  13: 998748.634 ops/s
Iteration  14: 999475.404 ops/s
Iteration  15: 995077.248 ops/s
Iteration  16: 999220.119 ops/s
Iteration  17: 1001067.925 ops/s
Iteration  18: 1000069.929 ops/s
Iteration  19: 1001822.097 ops/s
Iteration  20: 998439.544 ops/s
Iteration  21: 998758.642 ops/s
Iteration  22: 1001458.142 ops/s
Iteration  23: 997280.319 ops/s
Iteration  24: 1002339.000 ops/s
Iteration  25: 999933.658 ops/s
Iteration  26: 996486.012 ops/s
Iteration  27: 993006.041 ops/s
Iteration  28: 994868.922 ops/s
Iteration  29: 996651.736 ops/s
Iteration  30: 996793.594 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_addAtIndex":
  998422.216 ±(99.9%) 1592.967 ops/s [Average]
  (min, avg, max) = (993006.041, 998422.216, 1002339.000), stdev = 2384.277
  CI (99.9%): [996829.250, 1000015.183] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_addAtIndex  thrpt   30  998422.216 ± 1592.967  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_aggregateByMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_aggregateByMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 629786.388 ops/s
# Warmup Iteration   2: 1580462.953 ops/s
# Warmup Iteration   3: 1640777.920 ops/s
# Warmup Iteration   4: 1362038.866 ops/s
# Warmup Iteration   5: 1637407.578 ops/s
# Warmup Iteration   6: 1637590.555 ops/s
# Warmup Iteration   7: 1636218.261 ops/s
# Warmup Iteration   8: 1638483.182 ops/s
# Warmup Iteration   9: 1637882.140 ops/s
# Warmup Iteration  10: 1635343.267 ops/s
# Warmup Iteration  11: 1629304.083 ops/s
# Warmup Iteration  12: 1637661.592 ops/s
# Warmup Iteration  13: 1622791.175 ops/s
# Warmup Iteration  14: 1639511.458 ops/s
# Warmup Iteration  15: 1633132.677 ops/s
# Warmup Iteration  16: 1634390.073 ops/s
# Warmup Iteration  17: 1641449.546 ops/s
# Warmup Iteration  18: 1641971.312 ops/s
# Warmup Iteration  19: 1640310.598 ops/s
# Warmup Iteration  20: 1638545.819 ops/s
# Warmup Iteration  21: 1641625.418 ops/s
# Warmup Iteration  22: 1643945.326 ops/s
# Warmup Iteration  23: 1645446.744 ops/s
# Warmup Iteration  24: 1637579.961 ops/s
# Warmup Iteration  25: 1633261.715 ops/s
# Warmup Iteration  26: 1636707.227 ops/s
# Warmup Iteration  27: 1641946.238 ops/s
# Warmup Iteration  28: 1638690.215 ops/s
# Warmup Iteration  29: 1639466.248 ops/s
# Warmup Iteration  30: 1643440.367 ops/s
Iteration   1: 1643588.446 ops/s
Iteration   2: 1644168.525 ops/s
Iteration   3: 1640034.794 ops/s
Iteration   4: 1635130.499 ops/s
Iteration   5: 1627900.751 ops/s
Iteration   6: 1635642.833 ops/s
Iteration   7: 1646626.371 ops/s
Iteration   8: 1642172.021 ops/s
Iteration   9: 1641548.686 ops/s
Iteration  10: 1640230.213 ops/s
Iteration  11: 1642489.575 ops/s
Iteration  12: 1637737.715 ops/s
Iteration  13: 1637530.562 ops/s
Iteration  14: 1641695.678 ops/s
Iteration  15: 1636607.605 ops/s
Iteration  16: 1643406.613 ops/s
Iteration  17: 1640996.164 ops/s
Iteration  18: 1645551.952 ops/s
Iteration  19: 1641860.804 ops/s
Iteration  20: 1633049.727 ops/s
Iteration  21: 1636963.276 ops/s
Iteration  22: 1640538.455 ops/s
Iteration  23: 1643830.526 ops/s
Iteration  24: 1640928.004 ops/s
Iteration  25: 1637195.532 ops/s
Iteration  26: 1641753.855 ops/s
Iteration  27: 1636941.218 ops/s
Iteration  28: 1642331.397 ops/s
Iteration  29: 1642943.673 ops/s
Iteration  30: 1640350.481 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_aggregateByMutating":
  1640058.198 ±(99.9%) 2651.852 ops/s [Average]
  (min, avg, max) = (1627900.751, 1640058.198, 1646626.371), stdev = 3969.167
  CI (99.9%): [1637406.347, 1642710.050] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_aggregateByMutating  thrpt   30  1640058.198 ± 2651.852  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_aggregateByNonMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_aggregateByNonMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 665294.490 ops/s
# Warmup Iteration   2: 1583801.537 ops/s
# Warmup Iteration   3: 1669892.050 ops/s
# Warmup Iteration   4: 1384814.603 ops/s
# Warmup Iteration   5: 1675892.794 ops/s
# Warmup Iteration   6: 1673229.724 ops/s
# Warmup Iteration   7: 1673693.842 ops/s
# Warmup Iteration   8: 1676911.795 ops/s
# Warmup Iteration   9: 1673645.620 ops/s
# Warmup Iteration  10: 1671745.792 ops/s
# Warmup Iteration  11: 1668676.663 ops/s
# Warmup Iteration  12: 1675684.853 ops/s
# Warmup Iteration  13: 1671089.108 ops/s
# Warmup Iteration  14: 1674740.567 ops/s
# Warmup Iteration  15: 1675586.232 ops/s
# Warmup Iteration  16: 1670354.433 ops/s
# Warmup Iteration  17: 1675778.211 ops/s
# Warmup Iteration  18: 1666739.162 ops/s
# Warmup Iteration  19: 1672847.082 ops/s
# Warmup Iteration  20: 1671989.900 ops/s
# Warmup Iteration  21: 1671788.497 ops/s
# Warmup Iteration  22: 1673865.160 ops/s
# Warmup Iteration  23: 1671016.261 ops/s
# Warmup Iteration  24: 1675827.976 ops/s
# Warmup Iteration  25: 1673511.595 ops/s
# Warmup Iteration  26: 1673709.982 ops/s
# Warmup Iteration  27: 1670262.288 ops/s
# Warmup Iteration  28: 1672688.461 ops/s
# Warmup Iteration  29: 1671563.915 ops/s
# Warmup Iteration  30: 1668990.599 ops/s
Iteration   1: 1671097.508 ops/s
Iteration   2: 1673657.581 ops/s
Iteration   3: 1671105.674 ops/s
Iteration   4: 1672342.721 ops/s
Iteration   5: 1676839.668 ops/s
Iteration   6: 1674383.900 ops/s
Iteration   7: 1675438.724 ops/s
Iteration   8: 1674331.102 ops/s
Iteration   9: 1674210.452 ops/s
Iteration  10: 1675703.765 ops/s
Iteration  11: 1671448.238 ops/s
Iteration  12: 1673282.619 ops/s
Iteration  13: 1671409.640 ops/s
Iteration  14: 1671806.678 ops/s
Iteration  15: 1675699.419 ops/s
Iteration  16: 1674901.978 ops/s
Iteration  17: 1674168.609 ops/s
Iteration  18: 1674271.335 ops/s
Iteration  19: 1674451.361 ops/s
Iteration  20: 1664314.240 ops/s
Iteration  21: 1664542.828 ops/s
Iteration  22: 1664226.002 ops/s
Iteration  23: 1671710.900 ops/s
Iteration  24: 1672137.733 ops/s
Iteration  25: 1673565.241 ops/s
Iteration  26: 1675834.939 ops/s
Iteration  27: 1673816.130 ops/s
Iteration  28: 1675178.059 ops/s
Iteration  29: 1670694.119 ops/s
Iteration  30: 1673594.284 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_aggregateByNonMutating":
  1672672.182 ±(99.9%) 2171.062 ops/s [Average]
  (min, avg, max) = (1664226.002, 1672672.182, 1676839.668), stdev = 3249.543
  CI (99.9%): [1670501.120, 1674843.243] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_aggregateByNonMutating  thrpt   30  1672672.182 ± 2171.062  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13251630.532 ops/s
# Warmup Iteration   2: 26920886.754 ops/s
# Warmup Iteration   3: 23897858.207 ops/s
# Warmup Iteration   4: 26135144.933 ops/s
# Warmup Iteration   5: 27070052.295 ops/s
# Warmup Iteration   6: 27128988.855 ops/s
# Warmup Iteration   7: 27004703.406 ops/s
# Warmup Iteration   8: 27054048.440 ops/s
# Warmup Iteration   9: 27075403.015 ops/s
# Warmup Iteration  10: 26997504.954 ops/s
# Warmup Iteration  11: 27008034.743 ops/s
# Warmup Iteration  12: 27027656.759 ops/s
# Warmup Iteration  13: 26930208.420 ops/s
# Warmup Iteration  14: 27019467.007 ops/s
# Warmup Iteration  15: 27008355.323 ops/s
# Warmup Iteration  16: 27070849.848 ops/s
# Warmup Iteration  17: 26965104.713 ops/s
# Warmup Iteration  18: 27021491.533 ops/s
# Warmup Iteration  19: 27024441.647 ops/s
# Warmup Iteration  20: 27066132.739 ops/s
# Warmup Iteration  21: 27088107.627 ops/s
# Warmup Iteration  22: 27099910.812 ops/s
# Warmup Iteration  23: 27050297.211 ops/s
# Warmup Iteration  24: 26885449.904 ops/s
# Warmup Iteration  25: 27102114.632 ops/s
# Warmup Iteration  26: 27066710.078 ops/s
# Warmup Iteration  27: 27060138.399 ops/s
# Warmup Iteration  28: 27080692.342 ops/s
# Warmup Iteration  29: 27057065.907 ops/s
# Warmup Iteration  30: 27039530.623 ops/s
Iteration   1: 27134670.024 ops/s
Iteration   2: 27077742.016 ops/s
Iteration   3: 27086074.402 ops/s
Iteration   4: 27046388.302 ops/s
Iteration   5: 27052699.700 ops/s
Iteration   6: 27050384.573 ops/s
Iteration   7: 27017462.953 ops/s
Iteration   8: 27014064.261 ops/s
Iteration   9: 26909586.945 ops/s
Iteration  10: 26957665.063 ops/s
Iteration  11: 27017039.582 ops/s
Iteration  12: 27040436.935 ops/s
Iteration  13: 27048574.896 ops/s
Iteration  14: 26977547.724 ops/s
Iteration  15: 27003375.487 ops/s
Iteration  16: 27027798.503 ops/s
Iteration  17: 26989744.093 ops/s
Iteration  18: 26953412.720 ops/s
Iteration  19: 27018662.432 ops/s
Iteration  20: 27066767.057 ops/s
Iteration  21: 27051696.075 ops/s
Iteration  22: 27005763.906 ops/s
Iteration  23: 27107034.696 ops/s
Iteration  24: 27092661.707 ops/s
Iteration  25: 27037170.791 ops/s
Iteration  26: 27037853.632 ops/s
Iteration  27: 27088454.061 ops/s
Iteration  28: 27024655.042 ops/s
Iteration  29: 27006398.314 ops/s
Iteration  30: 27008145.728 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_allSatisfy":
  27031664.387 ±(99.9%) 31922.218 ops/s [Average]
  (min, avg, max) = (26909586.945, 27031664.387, 27134670.024), stdev = 47779.676
  CI (99.9%): [26999742.170, 27063586.605] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score       Error  Units
ImmutableSubListTest._Benchmark.benchmark_allSatisfy  thrpt   30  27031664.387 ± 31922.218  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_allSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_allSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11422537.780 ops/s
# Warmup Iteration   2: 23249153.909 ops/s
# Warmup Iteration   3: 21324970.402 ops/s
# Warmup Iteration   4: 21793671.690 ops/s
# Warmup Iteration   5: 23317577.562 ops/s
# Warmup Iteration   6: 23373618.029 ops/s
# Warmup Iteration   7: 23387081.695 ops/s
# Warmup Iteration   8: 23330085.644 ops/s
# Warmup Iteration   9: 23340871.958 ops/s
# Warmup Iteration  10: 23348734.177 ops/s
# Warmup Iteration  11: 23395326.114 ops/s
# Warmup Iteration  12: 23333925.509 ops/s
# Warmup Iteration  13: 23312866.553 ops/s
# Warmup Iteration  14: 23370675.627 ops/s
# Warmup Iteration  15: 23316444.949 ops/s
# Warmup Iteration  16: 23325192.590 ops/s
# Warmup Iteration  17: 21815555.236 ops/s
# Warmup Iteration  18: 23360982.235 ops/s
# Warmup Iteration  19: 23351460.132 ops/s
# Warmup Iteration  20: 23337989.132 ops/s
# Warmup Iteration  21: 23350226.442 ops/s
# Warmup Iteration  22: 23307053.302 ops/s
# Warmup Iteration  23: 23354446.095 ops/s
# Warmup Iteration  24: 23333083.031 ops/s
# Warmup Iteration  25: 23367056.061 ops/s
# Warmup Iteration  26: 23369545.519 ops/s
# Warmup Iteration  27: 23353047.393 ops/s
# Warmup Iteration  28: 23344144.286 ops/s
# Warmup Iteration  29: 23335414.297 ops/s
# Warmup Iteration  30: 23327735.013 ops/s
Iteration   1: 23343671.942 ops/s
Iteration   2: 23332041.080 ops/s
Iteration   3: 23358604.715 ops/s
Iteration   4: 23180579.012 ops/s
Iteration   5: 23336003.625 ops/s
Iteration   6: 23351468.411 ops/s
Iteration   7: 23282724.155 ops/s
Iteration   8: 23366740.242 ops/s
Iteration   9: 23356890.246 ops/s
Iteration  10: 23384994.743 ops/s
Iteration  11: 23330965.296 ops/s
Iteration  12: 23353775.066 ops/s
Iteration  13: 23299772.574 ops/s
Iteration  14: 23273293.857 ops/s
Iteration  15: 23230728.590 ops/s
Iteration  16: 23370778.039 ops/s
Iteration  17: 23350838.763 ops/s
Iteration  18: 23368789.645 ops/s
Iteration  19: 23329257.122 ops/s
Iteration  20: 23397040.688 ops/s
Iteration  21: 23336324.876 ops/s
Iteration  22: 23308929.537 ops/s
Iteration  23: 23340292.761 ops/s
Iteration  24: 23380337.295 ops/s
Iteration  25: 23397190.218 ops/s
Iteration  26: 23379407.995 ops/s
Iteration  27: 23327749.520 ops/s
Iteration  28: 23308297.358 ops/s
Iteration  29: 23380399.587 ops/s
Iteration  30: 23352072.260 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_allSatisfyWith":
  23336998.641 ±(99.9%) 31855.031 ops/s [Average]
  (min, avg, max) = (23180579.012, 23336998.641, 23397190.218), stdev = 47679.115
  CI (99.9%): [23305143.609, 23368853.672] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score       Error  Units
ImmutableSubListTest._Benchmark.benchmark_allSatisfyWith  thrpt   30  23336998.641 ± 31855.031  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11660759.268 ops/s
# Warmup Iteration   2: 24542186.159 ops/s
# Warmup Iteration   3: 24075023.388 ops/s
# Warmup Iteration   4: 20418942.668 ops/s
# Warmup Iteration   5: 24119020.505 ops/s
# Warmup Iteration   6: 24155243.336 ops/s
# Warmup Iteration   7: 24182864.233 ops/s
# Warmup Iteration   8: 24152377.537 ops/s
# Warmup Iteration   9: 24122101.052 ops/s
# Warmup Iteration  10: 24168434.760 ops/s
# Warmup Iteration  11: 24175148.135 ops/s
# Warmup Iteration  12: 24182017.117 ops/s
# Warmup Iteration  13: 24163439.233 ops/s
# Warmup Iteration  14: 24149234.659 ops/s
# Warmup Iteration  15: 24181327.505 ops/s
# Warmup Iteration  16: 24202724.234 ops/s
# Warmup Iteration  17: 24188882.100 ops/s
# Warmup Iteration  18: 24201806.228 ops/s
# Warmup Iteration  19: 24200451.255 ops/s
# Warmup Iteration  20: 24166243.336 ops/s
# Warmup Iteration  21: 24205936.461 ops/s
# Warmup Iteration  22: 24202347.313 ops/s
# Warmup Iteration  23: 24167458.794 ops/s
# Warmup Iteration  24: 24152279.757 ops/s
# Warmup Iteration  25: 24172126.660 ops/s
# Warmup Iteration  26: 24162421.167 ops/s
# Warmup Iteration  27: 24197807.873 ops/s
# Warmup Iteration  28: 24158097.112 ops/s
# Warmup Iteration  29: 24159026.656 ops/s
# Warmup Iteration  30: 24226046.361 ops/s
Iteration   1: 24202742.227 ops/s
Iteration   2: 24189851.195 ops/s
Iteration   3: 24195239.366 ops/s
Iteration   4: 24144491.111 ops/s
Iteration   5: 24172274.460 ops/s
Iteration   6: 24194409.980 ops/s
Iteration   7: 24172661.972 ops/s
Iteration   8: 24186838.263 ops/s
Iteration   9: 24194659.731 ops/s
Iteration  10: 24152536.912 ops/s
Iteration  11: 24203854.141 ops/s
Iteration  12: 24201112.713 ops/s
Iteration  13: 24173100.317 ops/s
Iteration  14: 24185145.698 ops/s
Iteration  15: 24144251.652 ops/s
Iteration  16: 24140599.473 ops/s
Iteration  17: 24168783.148 ops/s
Iteration  18: 24195671.989 ops/s
Iteration  19: 24216472.115 ops/s
Iteration  20: 24214658.699 ops/s
Iteration  21: 24203109.674 ops/s
Iteration  22: 24182263.624 ops/s
Iteration  23: 24198372.831 ops/s
Iteration  24: 24132531.896 ops/s
Iteration  25: 24102295.572 ops/s
Iteration  26: 24209163.315 ops/s
Iteration  27: 24195246.326 ops/s
Iteration  28: 24161481.348 ops/s
Iteration  29: 24201537.247 ops/s
Iteration  30: 24102447.660 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_anySatisfy":
  24177926.822 ±(99.9%) 20465.015 ops/s [Average]
  (min, avg, max) = (24102295.572, 24177926.822, 24216472.115), stdev = 30631.073
  CI (99.9%): [24157461.807, 24198391.837] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score       Error  Units
ImmutableSubListTest._Benchmark.benchmark_anySatisfy  thrpt   30  24177926.822 ± 20465.015  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_anySatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_anySatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10645459.727 ops/s
# Warmup Iteration   2: 22356252.570 ops/s
# Warmup Iteration   3: 22040792.753 ops/s
# Warmup Iteration   4: 20015423.727 ops/s
# Warmup Iteration   5: 23024757.379 ops/s
# Warmup Iteration   6: 22964107.945 ops/s
# Warmup Iteration   7: 23004099.565 ops/s
# Warmup Iteration   8: 23003427.758 ops/s
# Warmup Iteration   9: 23051160.329 ops/s
# Warmup Iteration  10: 22935837.329 ops/s
# Warmup Iteration  11: 22998746.655 ops/s
# Warmup Iteration  12: 22965163.411 ops/s
# Warmup Iteration  13: 23010574.536 ops/s
# Warmup Iteration  14: 23015186.178 ops/s
# Warmup Iteration  15: 22984426.488 ops/s
# Warmup Iteration  16: 23002416.205 ops/s
# Warmup Iteration  17: 22710085.917 ops/s
# Warmup Iteration  18: 22713466.900 ops/s
# Warmup Iteration  19: 22564779.341 ops/s
# Warmup Iteration  20: 22726613.785 ops/s
# Warmup Iteration  21: 22698247.430 ops/s
# Warmup Iteration  22: 22556931.888 ops/s
# Warmup Iteration  23: 22705447.878 ops/s
# Warmup Iteration  24: 22766403.212 ops/s
# Warmup Iteration  25: 22710683.886 ops/s
# Warmup Iteration  26: 22718199.509 ops/s
# Warmup Iteration  27: 22636151.459 ops/s
# Warmup Iteration  28: 22673622.327 ops/s
# Warmup Iteration  29: 22681174.599 ops/s
# Warmup Iteration  30: 22661792.077 ops/s
Iteration   1: 22668029.426 ops/s
Iteration   2: 22633762.042 ops/s
Iteration   3: 22581673.448 ops/s
Iteration   4: 22716112.404 ops/s
Iteration   5: 22779217.907 ops/s
Iteration   6: 22662922.575 ops/s
Iteration   7: 22699582.041 ops/s
Iteration   8: 22755037.108 ops/s
Iteration   9: 22690765.449 ops/s
Iteration  10: 22648271.376 ops/s
Iteration  11: 22779544.675 ops/s
Iteration  12: 22791485.130 ops/s
Iteration  13: 22742144.095 ops/s
Iteration  14: 22733472.957 ops/s
Iteration  15: 22345993.901 ops/s
Iteration  16: 22748071.458 ops/s
Iteration  17: 22742642.411 ops/s
Iteration  18: 22741974.181 ops/s
Iteration  19: 22703906.048 ops/s
Iteration  20: 22743347.332 ops/s
Iteration  21: 22703892.047 ops/s
Iteration  22: 22612501.389 ops/s
Iteration  23: 22581592.217 ops/s
Iteration  24: 22319197.923 ops/s
Iteration  25: 22649107.909 ops/s
Iteration  26: 22758912.556 ops/s
Iteration  27: 22739733.240 ops/s
Iteration  28: 22755449.021 ops/s
Iteration  29: 22740418.977 ops/s
Iteration  30: 22791440.983 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_anySatisfyWith":
  22685340.074 ±(99.9%) 74931.176 ops/s [Average]
  (min, avg, max) = (22319197.923, 22685340.074, 22791485.130), stdev = 112153.465
  CI (99.9%): [22610408.898, 22760271.250] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score       Error  Units
ImmutableSubListTest._Benchmark.benchmark_anySatisfyWith  thrpt   30  22685340.074 ± 74931.176  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 405229.668 ops/s
# Warmup Iteration   2: 1283506.424 ops/s
# Warmup Iteration   3: 1184314.554 ops/s
# Warmup Iteration   4: 1189701.588 ops/s
# Warmup Iteration   5: 1292171.538 ops/s
# Warmup Iteration   6: 1292939.341 ops/s
# Warmup Iteration   7: 1294421.248 ops/s
# Warmup Iteration   8: 1284545.291 ops/s
# Warmup Iteration   9: 1286496.808 ops/s
# Warmup Iteration  10: 1290381.475 ops/s
# Warmup Iteration  11: 1290314.393 ops/s
# Warmup Iteration  12: 1291934.389 ops/s
# Warmup Iteration  13: 1287805.793 ops/s
# Warmup Iteration  14: 1293521.832 ops/s
# Warmup Iteration  15: 1292889.413 ops/s
# Warmup Iteration  16: 1291516.602 ops/s
# Warmup Iteration  17: 1292716.091 ops/s
# Warmup Iteration  18: 1292341.370 ops/s
# Warmup Iteration  19: 1294459.948 ops/s
# Warmup Iteration  20: 1290608.722 ops/s
# Warmup Iteration  21: 1290095.014 ops/s
# Warmup Iteration  22: 1294113.312 ops/s
# Warmup Iteration  23: 1294105.749 ops/s
# Warmup Iteration  24: 1294542.141 ops/s
# Warmup Iteration  25: 1293403.101 ops/s
# Warmup Iteration  26: 1293024.205 ops/s
# Warmup Iteration  27: 1293393.657 ops/s
# Warmup Iteration  28: 1292049.628 ops/s
# Warmup Iteration  29: 1291722.739 ops/s
# Warmup Iteration  30: 1294772.775 ops/s
Iteration   1: 1295128.198 ops/s
Iteration   2: 1288402.390 ops/s
Iteration   3: 1286589.265 ops/s
Iteration   4: 1292144.220 ops/s
Iteration   5: 1290104.596 ops/s
Iteration   6: 1290315.962 ops/s
Iteration   7: 1289886.253 ops/s
Iteration   8: 1290569.873 ops/s
Iteration   9: 1295229.093 ops/s
Iteration  10: 1294769.546 ops/s
Iteration  11: 1291910.726 ops/s
Iteration  12: 1293366.211 ops/s
Iteration  13: 1292767.658 ops/s
Iteration  14: 1290331.108 ops/s
Iteration  15: 1293694.457 ops/s
Iteration  16: 1294222.420 ops/s
Iteration  17: 1292137.779 ops/s
Iteration  18: 1293104.809 ops/s
Iteration  19: 1289345.585 ops/s
Iteration  20: 1293641.957 ops/s
Iteration  21: 1295358.595 ops/s
Iteration  22: 1290003.680 ops/s
Iteration  23: 1292609.205 ops/s
Iteration  24: 1291130.001 ops/s
Iteration  25: 1289599.220 ops/s
Iteration  26: 1293399.999 ops/s
Iteration  27: 1288468.537 ops/s
Iteration  28: 1288851.364 ops/s
Iteration  29: 1291977.925 ops/s
Iteration  30: 1291710.528 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_appendString":
  1291692.372 ±(99.9%) 1523.799 ops/s [Average]
  (min, avg, max) = (1286589.265, 1291692.372, 1295358.595), stdev = 2280.751
  CI (99.9%): [1290168.573, 1293216.171] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_appendString  thrpt   30  1291692.372 ± 1523.799  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_asReversed$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_asReversed

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2641426.733 ops/s
# Warmup Iteration   2: 6135865.798 ops/s
# Warmup Iteration   3: 5134640.139 ops/s
# Warmup Iteration   4: 6182224.202 ops/s
# Warmup Iteration   5: 6178135.107 ops/s
# Warmup Iteration   6: 6179296.556 ops/s
# Warmup Iteration   7: 6165914.795 ops/s
# Warmup Iteration   8: 6164342.141 ops/s
# Warmup Iteration   9: 6181359.529 ops/s
# Warmup Iteration  10: 6181107.611 ops/s
# Warmup Iteration  11: 6192632.865 ops/s
# Warmup Iteration  12: 6180163.285 ops/s
# Warmup Iteration  13: 6171046.225 ops/s
# Warmup Iteration  14: 6159018.839 ops/s
# Warmup Iteration  15: 6164757.376 ops/s
# Warmup Iteration  16: 6184721.205 ops/s
# Warmup Iteration  17: 6169015.971 ops/s
# Warmup Iteration  18: 6162602.902 ops/s
# Warmup Iteration  19: 6177741.331 ops/s
# Warmup Iteration  20: 6179872.086 ops/s
# Warmup Iteration  21: 6174917.432 ops/s
# Warmup Iteration  22: 6189496.717 ops/s
# Warmup Iteration  23: 6181257.156 ops/s
# Warmup Iteration  24: 6175774.636 ops/s
# Warmup Iteration  25: 6175682.042 ops/s
# Warmup Iteration  26: 6182034.573 ops/s
# Warmup Iteration  27: 6178437.788 ops/s
# Warmup Iteration  28: 6174003.102 ops/s
# Warmup Iteration  29: 6182098.177 ops/s
# Warmup Iteration  30: 6181056.254 ops/s
Iteration   1: 6190490.247 ops/s
Iteration   2: 6178835.376 ops/s
Iteration   3: 6181493.591 ops/s
Iteration   4: 6173127.952 ops/s
Iteration   5: 6160862.955 ops/s
Iteration   6: 6179559.029 ops/s
Iteration   7: 6172136.963 ops/s
Iteration   8: 6180061.026 ops/s
Iteration   9: 6187142.175 ops/s
Iteration  10: 6187339.064 ops/s
Iteration  11: 6181396.798 ops/s
Iteration  12: 6177458.652 ops/s
Iteration  13: 6182146.887 ops/s
Iteration  14: 6176897.841 ops/s
Iteration  15: 6187083.783 ops/s
Iteration  16: 6171244.935 ops/s
Iteration  17: 6190663.261 ops/s
Iteration  18: 6195367.421 ops/s
Iteration  19: 6173898.972 ops/s
Iteration  20: 6179232.841 ops/s
Iteration  21: 6177525.775 ops/s
Iteration  22: 6165308.788 ops/s
Iteration  23: 6190001.262 ops/s
Iteration  24: 6192743.779 ops/s
Iteration  25: 6177001.943 ops/s
Iteration  26: 6201281.031 ops/s
Iteration  27: 6182765.843 ops/s
Iteration  28: 6185148.021 ops/s
Iteration  29: 6192209.390 ops/s
Iteration  30: 6175984.708 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_asReversed":
  6181547.010 ±(99.9%) 5956.342 ops/s [Average]
  (min, avg, max) = (6160862.955, 6181547.010, 6201281.031), stdev = 8915.173
  CI (99.9%): [6175590.668, 6187503.352] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_asReversed  thrpt   30  6181547.010 ± 5956.342  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_castToCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_castToCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 610361.017 ops/s
# Warmup Iteration   2: 713437.416 ops/s
# Warmup Iteration   3: 894195.107 ops/s
# Warmup Iteration   4: 895752.618 ops/s
# Warmup Iteration   5: 890940.942 ops/s
# Warmup Iteration   6: 895266.530 ops/s
# Warmup Iteration   7: 892885.918 ops/s
# Warmup Iteration   8: 890921.527 ops/s
# Warmup Iteration   9: 845230.238 ops/s
# Warmup Iteration  10: 801179.637 ops/s
# Warmup Iteration  11: 897524.607 ops/s
# Warmup Iteration  12: 896544.271 ops/s
# Warmup Iteration  13: 897022.436 ops/s
# Warmup Iteration  14: 898303.839 ops/s
# Warmup Iteration  15: 896650.020 ops/s
# Warmup Iteration  16: 895729.131 ops/s
# Warmup Iteration  17: 943490.083 ops/s
# Warmup Iteration  18: 943625.243 ops/s
# Warmup Iteration  19: 942367.332 ops/s
# Warmup Iteration  20: 945061.059 ops/s
# Warmup Iteration  21: 941896.780 ops/s
# Warmup Iteration  22: 942534.771 ops/s
# Warmup Iteration  23: 943979.281 ops/s
# Warmup Iteration  24: 943934.656 ops/s
# Warmup Iteration  25: 942937.286 ops/s
# Warmup Iteration  26: 943426.375 ops/s
# Warmup Iteration  27: 943082.134 ops/s
# Warmup Iteration  28: 943929.401 ops/s
# Warmup Iteration  29: 945114.293 ops/s
# Warmup Iteration  30: 944814.226 ops/s
Iteration   1: 945823.771 ops/s
Iteration   2: 944463.289 ops/s
Iteration   3: 947122.932 ops/s
Iteration   4: 943784.176 ops/s
Iteration   5: 943398.132 ops/s
Iteration   6: 945729.970 ops/s
Iteration   7: 945485.375 ops/s
Iteration   8: 943417.195 ops/s
Iteration   9: 944937.088 ops/s
Iteration  10: 945227.219 ops/s
Iteration  11: 939273.964 ops/s
Iteration  12: 945132.626 ops/s
Iteration  13: 943645.117 ops/s
Iteration  14: 944114.928 ops/s
Iteration  15: 947384.997 ops/s
Iteration  16: 945219.871 ops/s
Iteration  17: 947354.510 ops/s
Iteration  18: 944269.382 ops/s
Iteration  19: 941730.268 ops/s
Iteration  20: 943382.496 ops/s
Iteration  21: 943691.036 ops/s
Iteration  22: 939824.790 ops/s
Iteration  23: 939894.368 ops/s
Iteration  24: 944246.411 ops/s
Iteration  25: 943827.147 ops/s
Iteration  26: 943485.573 ops/s
Iteration  27: 943531.522 ops/s
Iteration  28: 944082.877 ops/s
Iteration  29: 944523.105 ops/s
Iteration  30: 944569.427 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_castToCollection":
  944085.785 ±(99.9%) 1304.341 ops/s [Average]
  (min, avg, max) = (939273.964, 944085.785, 947384.997), stdev = 1952.276
  CI (99.9%): [942781.445, 945390.126] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_castToCollection  thrpt   30  944085.785 ± 1304.341  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_chunk_large_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_chunk_large_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2819851.616 ops/s
# Warmup Iteration   2: 7764321.164 ops/s
# Warmup Iteration   3: 7832532.763 ops/s
# Warmup Iteration   4: 6633560.882 ops/s
# Warmup Iteration   5: 7819989.168 ops/s
# Warmup Iteration   6: 7811051.122 ops/s
# Warmup Iteration   7: 7803263.822 ops/s
# Warmup Iteration   8: 7806503.876 ops/s
# Warmup Iteration   9: 7817328.609 ops/s
# Warmup Iteration  10: 7826876.018 ops/s
# Warmup Iteration  11: 7828747.908 ops/s
# Warmup Iteration  12: 7793563.737 ops/s
# Warmup Iteration  13: 7818424.575 ops/s
# Warmup Iteration  14: 7817899.411 ops/s
# Warmup Iteration  15: 7819517.622 ops/s
# Warmup Iteration  16: 7804143.964 ops/s
# Warmup Iteration  17: 7875856.027 ops/s
# Warmup Iteration  18: 7862718.568 ops/s
# Warmup Iteration  19: 7882591.664 ops/s
# Warmup Iteration  20: 7904168.283 ops/s
# Warmup Iteration  21: 7890947.667 ops/s
# Warmup Iteration  22: 7855303.247 ops/s
# Warmup Iteration  23: 7863629.097 ops/s
# Warmup Iteration  24: 7896237.187 ops/s
# Warmup Iteration  25: 7888684.867 ops/s
# Warmup Iteration  26: 7893833.570 ops/s
# Warmup Iteration  27: 7889520.461 ops/s
# Warmup Iteration  28: 7907209.146 ops/s
# Warmup Iteration  29: 7889387.380 ops/s
# Warmup Iteration  30: 7856905.644 ops/s
Iteration   1: 7889224.899 ops/s
Iteration   2: 7884870.857 ops/s
Iteration   3: 7874883.012 ops/s
Iteration   4: 7902975.922 ops/s
Iteration   5: 7876958.369 ops/s
Iteration   6: 7872172.088 ops/s
Iteration   7: 7880187.512 ops/s
Iteration   8: 7892732.688 ops/s
Iteration   9: 7900150.177 ops/s
Iteration  10: 7896062.436 ops/s
Iteration  11: 7893396.082 ops/s
Iteration  12: 7895965.699 ops/s
Iteration  13: 7895041.353 ops/s
Iteration  14: 7884634.513 ops/s
Iteration  15: 7907701.155 ops/s
Iteration  16: 7880153.845 ops/s
Iteration  17: 7883143.092 ops/s
Iteration  18: 7874504.922 ops/s
Iteration  19: 7862150.199 ops/s
Iteration  20: 7893710.411 ops/s
Iteration  21: 7894668.931 ops/s
Iteration  22: 7837755.361 ops/s
Iteration  23: 7879602.037 ops/s
Iteration  24: 7899962.067 ops/s
Iteration  25: 7878229.112 ops/s
Iteration  26: 7857877.234 ops/s
Iteration  27: 7887028.470 ops/s
Iteration  28: 7899856.434 ops/s
Iteration  29: 7891996.980 ops/s
Iteration  30: 7884736.146 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_chunk_large_size":
  7885077.733 ±(99.9%) 9834.295 ops/s [Average]
  (min, avg, max) = (7837755.361, 7885077.733, 7907701.155), stdev = 14719.511
  CI (99.9%): [7875243.438, 7894912.029] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_chunk_large_size  thrpt   30  7885077.733 ± 9834.295  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_chunk_zero_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_chunk_zero_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 757290.842 ops/s
# Warmup Iteration   2: 831296.346 ops/s
# Warmup Iteration   3: 1061165.446 ops/s
# Warmup Iteration   4: 1051894.547 ops/s
# Warmup Iteration   5: 1050807.956 ops/s
# Warmup Iteration   6: 1054695.016 ops/s
# Warmup Iteration   7: 1057574.529 ops/s
# Warmup Iteration   8: 1055093.712 ops/s
# Warmup Iteration   9: 1052080.680 ops/s
# Warmup Iteration  10: 1052435.187 ops/s
# Warmup Iteration  11: 890540.334 ops/s
# Warmup Iteration  12: 1052349.450 ops/s
# Warmup Iteration  13: 1053355.802 ops/s
# Warmup Iteration  14: 1054166.989 ops/s
# Warmup Iteration  15: 1055780.882 ops/s
# Warmup Iteration  16: 1055953.097 ops/s
# Warmup Iteration  17: 1120954.137 ops/s
# Warmup Iteration  18: 1123197.574 ops/s
# Warmup Iteration  19: 1121347.433 ops/s
# Warmup Iteration  20: 1121886.071 ops/s
# Warmup Iteration  21: 1123051.618 ops/s
# Warmup Iteration  22: 1120522.946 ops/s
# Warmup Iteration  23: 1120793.049 ops/s
# Warmup Iteration  24: 1123124.133 ops/s
# Warmup Iteration  25: 1118201.172 ops/s
# Warmup Iteration  26: 1116206.877 ops/s
# Warmup Iteration  27: 1115798.749 ops/s
# Warmup Iteration  28: 1122138.955 ops/s
# Warmup Iteration  29: 1122506.641 ops/s
# Warmup Iteration  30: 1123104.381 ops/s
Iteration   1: 1125115.156 ops/s
Iteration   2: 1125550.368 ops/s
Iteration   3: 1123710.828 ops/s
Iteration   4: 1121634.590 ops/s
Iteration   5: 1122918.411 ops/s
Iteration   6: 1124635.670 ops/s
Iteration   7: 1118397.948 ops/s
Iteration   8: 1117265.149 ops/s
Iteration   9: 1124033.938 ops/s
Iteration  10: 1125644.637 ops/s
Iteration  11: 1124088.834 ops/s
Iteration  12: 1125068.489 ops/s
Iteration  13: 1125298.536 ops/s
Iteration  14: 1115293.203 ops/s
Iteration  15: 1125442.506 ops/s
Iteration  16: 1125217.405 ops/s
Iteration  17: 1124581.081 ops/s
Iteration  18: 1120844.023 ops/s
Iteration  19: 1124071.397 ops/s
Iteration  20: 1121998.566 ops/s
Iteration  21: 1125266.652 ops/s
Iteration  22: 1120711.116 ops/s
Iteration  23: 1122532.381 ops/s
Iteration  24: 1121243.693 ops/s
Iteration  25: 1123313.625 ops/s
Iteration  26: 1125875.177 ops/s
Iteration  27: 1124905.023 ops/s
Iteration  28: 1117132.774 ops/s
Iteration  29: 1123195.262 ops/s
Iteration  30: 1121430.246 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_chunk_zero_throws":
  1122880.556 ±(99.9%) 1884.231 ops/s [Average]
  (min, avg, max) = (1115293.203, 1122880.556, 1125875.177), stdev = 2820.228
  CI (99.9%): [1120996.325, 1124764.787] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_chunk_zero_throws  thrpt   30  1122880.556 ± 1884.231  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 617106.193 ops/s
# Warmup Iteration   2: 752351.634 ops/s
# Warmup Iteration   3: 937710.238 ops/s
# Warmup Iteration   4: 933200.171 ops/s
# Warmup Iteration   5: 938350.075 ops/s
# Warmup Iteration   6: 938961.064 ops/s
# Warmup Iteration   7: 941363.960 ops/s
# Warmup Iteration   8: 942603.741 ops/s
# Warmup Iteration   9: 792471.705 ops/s
# Warmup Iteration  10: 940736.948 ops/s
# Warmup Iteration  11: 938538.944 ops/s
# Warmup Iteration  12: 939676.047 ops/s
# Warmup Iteration  13: 938709.493 ops/s
# Warmup Iteration  14: 937683.360 ops/s
# Warmup Iteration  15: 938628.058 ops/s
# Warmup Iteration  16: 940031.556 ops/s
# Warmup Iteration  17: 1003539.993 ops/s
# Warmup Iteration  18: 999180.861 ops/s
# Warmup Iteration  19: 1000679.722 ops/s
# Warmup Iteration  20: 1003761.292 ops/s
# Warmup Iteration  21: 1000272.050 ops/s
# Warmup Iteration  22: 1000254.326 ops/s
# Warmup Iteration  23: 1000603.665 ops/s
# Warmup Iteration  24: 999934.249 ops/s
# Warmup Iteration  25: 999380.553 ops/s
# Warmup Iteration  26: 998841.919 ops/s
# Warmup Iteration  27: 997796.479 ops/s
# Warmup Iteration  28: 998675.681 ops/s
# Warmup Iteration  29: 997940.701 ops/s
# Warmup Iteration  30: 1002971.534 ops/s
Iteration   1: 1001074.401 ops/s
Iteration   2: 1002258.393 ops/s
Iteration   3: 997433.955 ops/s
Iteration   4: 1002682.496 ops/s
Iteration   5: 1000489.649 ops/s
Iteration   6: 1002005.375 ops/s
Iteration   7: 1004404.389 ops/s
Iteration   8: 996822.799 ops/s
Iteration   9: 995360.963 ops/s
Iteration  10: 997838.910 ops/s
Iteration  11: 998960.079 ops/s
Iteration  12: 999556.399 ops/s
Iteration  13: 1001062.940 ops/s
Iteration  14: 1000482.781 ops/s
Iteration  15: 1000863.737 ops/s
Iteration  16: 1001687.768 ops/s
Iteration  17: 1002577.877 ops/s
Iteration  18: 999245.595 ops/s
Iteration  19: 1000675.765 ops/s
Iteration  20: 1002557.176 ops/s
Iteration  21: 1002548.691 ops/s
Iteration  22: 1001862.829 ops/s
Iteration  23: 1001890.460 ops/s
Iteration  24: 1003049.678 ops/s
Iteration  25: 1000348.108 ops/s
Iteration  26: 1003835.009 ops/s
Iteration  27: 1002184.906 ops/s
Iteration  28: 1001451.834 ops/s
Iteration  29: 1001618.407 ops/s
Iteration  30: 999643.605 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_clear":
  1000882.499 ±(99.9%) 1383.534 ops/s [Average]
  (min, avg, max) = (995360.963, 1000882.499, 1004404.389), stdev = 2070.809
  CI (99.9%): [999498.965, 1002266.033] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_clear  thrpt   30  1000882.499 ± 1383.534  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4923787.510 ops/s
# Warmup Iteration   2: 10817800.914 ops/s
# Warmup Iteration   3: 11027576.727 ops/s
# Warmup Iteration   4: 9196012.465 ops/s
# Warmup Iteration   5: 11029749.277 ops/s
# Warmup Iteration   6: 11026493.253 ops/s
# Warmup Iteration   7: 11013948.188 ops/s
# Warmup Iteration   8: 11022248.192 ops/s
# Warmup Iteration   9: 11032804.585 ops/s
# Warmup Iteration  10: 11024488.787 ops/s
# Warmup Iteration  11: 11033926.243 ops/s
# Warmup Iteration  12: 11029658.764 ops/s
# Warmup Iteration  13: 11027814.935 ops/s
# Warmup Iteration  14: 10999247.298 ops/s
# Warmup Iteration  15: 11019555.248 ops/s
# Warmup Iteration  16: 11012591.853 ops/s
# Warmup Iteration  17: 11015715.065 ops/s
# Warmup Iteration  18: 11015168.903 ops/s
# Warmup Iteration  19: 10976443.033 ops/s
# Warmup Iteration  20: 10987890.617 ops/s
# Warmup Iteration  21: 10942777.233 ops/s
# Warmup Iteration  22: 10845427.249 ops/s
# Warmup Iteration  23: 11007816.683 ops/s
# Warmup Iteration  24: 11035367.460 ops/s
# Warmup Iteration  25: 11022254.151 ops/s
# Warmup Iteration  26: 11029061.611 ops/s
# Warmup Iteration  27: 11036165.823 ops/s
# Warmup Iteration  28: 11023264.205 ops/s
# Warmup Iteration  29: 11031465.028 ops/s
# Warmup Iteration  30: 11022037.703 ops/s
Iteration   1: 11039703.141 ops/s
Iteration   2: 10985855.276 ops/s
Iteration   3: 10993286.002 ops/s
Iteration   4: 10970089.080 ops/s
Iteration   5: 11011101.544 ops/s
Iteration   6: 11027012.691 ops/s
Iteration   7: 11023781.908 ops/s
Iteration   8: 11017792.172 ops/s
Iteration   9: 11041556.495 ops/s
Iteration  10: 11042911.042 ops/s
Iteration  11: 11025364.337 ops/s
Iteration  12: 11041940.347 ops/s
Iteration  13: 11018427.425 ops/s
Iteration  14: 11016200.025 ops/s
Iteration  15: 11014059.805 ops/s
Iteration  16: 11047250.582 ops/s
Iteration  17: 11008003.273 ops/s
Iteration  18: 11016287.094 ops/s
Iteration  19: 11024865.988 ops/s
Iteration  20: 11034258.563 ops/s
Iteration  21: 11024906.470 ops/s
Iteration  22: 11022143.507 ops/s
Iteration  23: 11039134.702 ops/s
Iteration  24: 11029775.441 ops/s
Iteration  25: 11022155.786 ops/s
Iteration  26: 11026390.784 ops/s
Iteration  27: 11048838.563 ops/s
Iteration  28: 11023043.036 ops/s
Iteration  29: 11032220.270 ops/s
Iteration  30: 11020675.575 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_collect":
  11022967.697 ±(99.9%) 11670.029 ops/s [Average]
  (min, avg, max) = (10970089.080, 11022967.697, 11048838.563), stdev = 17467.152
  CI (99.9%): [11011297.668, 11034637.726] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score       Error  Units
ImmutableSubListTest._Benchmark.benchmark_collect  thrpt   30  11022967.697 ± 11670.029  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_collectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_collectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3232494.946 ops/s
# Warmup Iteration   2: 8035833.083 ops/s
# Warmup Iteration   3: 7843084.302 ops/s
# Warmup Iteration   4: 7069750.483 ops/s
# Warmup Iteration   5: 8176792.091 ops/s
# Warmup Iteration   6: 8174944.898 ops/s
# Warmup Iteration   7: 8182050.586 ops/s
# Warmup Iteration   8: 8191982.399 ops/s
# Warmup Iteration   9: 8184411.338 ops/s
# Warmup Iteration  10: 8164017.229 ops/s
# Warmup Iteration  11: 8177972.960 ops/s
# Warmup Iteration  12: 8172447.596 ops/s
# Warmup Iteration  13: 8187035.595 ops/s
# Warmup Iteration  14: 8163415.520 ops/s
# Warmup Iteration  15: 8185058.410 ops/s
# Warmup Iteration  16: 8185529.855 ops/s
# Warmup Iteration  17: 8184675.837 ops/s
# Warmup Iteration  18: 8153072.686 ops/s
# Warmup Iteration  19: 8185175.655 ops/s
# Warmup Iteration  20: 8172021.770 ops/s
# Warmup Iteration  21: 8185700.002 ops/s
# Warmup Iteration  22: 8152937.017 ops/s
# Warmup Iteration  23: 8175761.568 ops/s
# Warmup Iteration  24: 8186781.384 ops/s
# Warmup Iteration  25: 8193805.187 ops/s
# Warmup Iteration  26: 8172183.969 ops/s
# Warmup Iteration  27: 8182633.324 ops/s
# Warmup Iteration  28: 8176045.129 ops/s
# Warmup Iteration  29: 8179035.459 ops/s
# Warmup Iteration  30: 8188584.864 ops/s
Iteration   1: 8170603.082 ops/s
Iteration   2: 8174864.595 ops/s
Iteration   3: 8177676.233 ops/s
Iteration   4: 8154040.855 ops/s
Iteration   5: 8130888.491 ops/s
Iteration   6: 8155721.276 ops/s
Iteration   7: 8203417.274 ops/s
Iteration   8: 8181305.998 ops/s
Iteration   9: 8169156.119 ops/s
Iteration  10: 8188694.010 ops/s
Iteration  11: 8199801.006 ops/s
Iteration  12: 8169727.137 ops/s
Iteration  13: 8167331.771 ops/s
Iteration  14: 8189053.678 ops/s
Iteration  15: 8176622.610 ops/s
Iteration  16: 8149374.095 ops/s
Iteration  17: 8155828.768 ops/s
Iteration  18: 8173865.800 ops/s
Iteration  19: 8179661.057 ops/s
Iteration  20: 8184295.514 ops/s
Iteration  21: 8187259.157 ops/s
Iteration  22: 8145664.300 ops/s
Iteration  23: 8183392.745 ops/s
Iteration  24: 8189468.056 ops/s
Iteration  25: 8160453.806 ops/s
Iteration  26: 8199453.273 ops/s
Iteration  27: 8186129.171 ops/s
Iteration  28: 8143433.264 ops/s
Iteration  29: 8170386.303 ops/s
Iteration  30: 8193536.975 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_collectBoolean":
  8173703.547 ±(99.9%) 12043.132 ops/s [Average]
  (min, avg, max) = (8130888.491, 8173703.547, 8203417.274), stdev = 18025.594
  CI (99.9%): [8161660.416, 8185746.679] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
ImmutableSubListTest._Benchmark.benchmark_collectBoolean  thrpt   30  8173703.547 ± 12043.132  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_collectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_collectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2833043.512 ops/s
# Warmup Iteration   2: 5704125.354 ops/s
# Warmup Iteration   3: 6191666.079 ops/s
# Warmup Iteration   4: 6224720.254 ops/s
# Warmup Iteration   5: 5156367.348 ops/s
# Warmup Iteration   6: 6233172.169 ops/s
# Warmup Iteration   7: 6235092.662 ops/s
# Warmup Iteration   8: 6222261.354 ops/s
# Warmup Iteration   9: 6236978.267 ops/s
# Warmup Iteration  10: 6226912.506 ops/s
# Warmup Iteration  11: 6236675.200 ops/s
# Warmup Iteration  12: 6238036.435 ops/s
# Warmup Iteration  13: 6227850.393 ops/s
# Warmup Iteration  14: 6236774.229 ops/s
# Warmup Iteration  15: 6234937.025 ops/s
# Warmup Iteration  16: 6230197.056 ops/s
# Warmup Iteration  17: 6302374.610 ops/s
# Warmup Iteration  18: 6297453.030 ops/s
# Warmup Iteration  19: 6306971.273 ops/s
# Warmup Iteration  20: 6303193.782 ops/s
# Warmup Iteration  21: 6301043.549 ops/s
# Warmup Iteration  22: 6306698.619 ops/s
# Warmup Iteration  23: 6295957.901 ops/s
# Warmup Iteration  24: 6288996.588 ops/s
# Warmup Iteration  25: 6307106.730 ops/s
# Warmup Iteration  26: 6306734.646 ops/s
# Warmup Iteration  27: 6305774.454 ops/s
# Warmup Iteration  28: 6307392.199 ops/s
# Warmup Iteration  29: 6305543.227 ops/s
# Warmup Iteration  30: 6304853.454 ops/s
Iteration   1: 6306851.278 ops/s
Iteration   2: 6309396.538 ops/s
Iteration   3: 6310389.553 ops/s
Iteration   4: 6297545.147 ops/s
Iteration   5: 6311296.409 ops/s
Iteration   6: 6300466.072 ops/s
Iteration   7: 6301492.931 ops/s
Iteration   8: 6301198.089 ops/s
Iteration   9: 6313617.757 ops/s
Iteration  10: 6301423.929 ops/s
Iteration  11: 6297838.749 ops/s
Iteration  12: 6317217.540 ops/s
Iteration  13: 6304995.526 ops/s
Iteration  14: 6306878.604 ops/s
Iteration  15: 6315602.263 ops/s
Iteration  16: 6302374.434 ops/s
Iteration  17: 6295456.599 ops/s
Iteration  18: 6311958.402 ops/s
Iteration  19: 6287201.844 ops/s
Iteration  20: 6299654.387 ops/s
Iteration  21: 6305458.924 ops/s
Iteration  22: 6317608.266 ops/s
Iteration  23: 6313250.671 ops/s
Iteration  24: 6303663.863 ops/s
Iteration  25: 6318105.538 ops/s
Iteration  26: 6304085.719 ops/s
Iteration  27: 6301272.164 ops/s
Iteration  28: 6311738.624 ops/s
Iteration  29: 6308853.748 ops/s
Iteration  30: 6309433.847 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_collectByte":
  6306210.914 ±(99.9%) 4870.374 ops/s [Average]
  (min, avg, max) = (6287201.844, 6306210.914, 6318105.538), stdev = 7289.748
  CI (99.9%): [6301340.539, 6311081.288] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_collectByte  thrpt   30  6306210.914 ± 4870.374  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_collectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_collectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2793961.725 ops/s
# Warmup Iteration   2: 5610223.044 ops/s
# Warmup Iteration   3: 6093849.079 ops/s
# Warmup Iteration   4: 6123990.403 ops/s
# Warmup Iteration   5: 5075850.835 ops/s
# Warmup Iteration   6: 6114426.243 ops/s
# Warmup Iteration   7: 6092196.033 ops/s
# Warmup Iteration   8: 6118991.626 ops/s
# Warmup Iteration   9: 6135140.961 ops/s
# Warmup Iteration  10: 6132634.529 ops/s
# Warmup Iteration  11: 6129619.987 ops/s
# Warmup Iteration  12: 6135091.782 ops/s
# Warmup Iteration  13: 6129849.380 ops/s
# Warmup Iteration  14: 6123213.329 ops/s
# Warmup Iteration  15: 6133647.977 ops/s
# Warmup Iteration  16: 6129884.631 ops/s
# Warmup Iteration  17: 6208483.555 ops/s
# Warmup Iteration  18: 6208765.281 ops/s
# Warmup Iteration  19: 6198168.411 ops/s
# Warmup Iteration  20: 6214015.964 ops/s
# Warmup Iteration  21: 6212893.838 ops/s
# Warmup Iteration  22: 6210851.949 ops/s
# Warmup Iteration  23: 6212354.069 ops/s
# Warmup Iteration  24: 6208357.202 ops/s
# Warmup Iteration  25: 6208100.338 ops/s
# Warmup Iteration  26: 6212736.038 ops/s
# Warmup Iteration  27: 6207165.373 ops/s
# Warmup Iteration  28: 6207797.716 ops/s
# Warmup Iteration  29: 6205356.254 ops/s
# Warmup Iteration  30: 6210661.395 ops/s
Iteration   1: 6208204.764 ops/s
Iteration   2: 6211031.705 ops/s
Iteration   3: 6215342.801 ops/s
Iteration   4: 6195633.851 ops/s
Iteration   5: 6203223.096 ops/s
Iteration   6: 6211544.454 ops/s
Iteration   7: 6211363.408 ops/s
Iteration   8: 6212435.543 ops/s
Iteration   9: 6205859.893 ops/s
Iteration  10: 6215585.340 ops/s
Iteration  11: 6201875.998 ops/s
Iteration  12: 6198873.336 ops/s
Iteration  13: 6213168.439 ops/s
Iteration  14: 6203403.957 ops/s
Iteration  15: 6209413.589 ops/s
Iteration  16: 6206230.555 ops/s
Iteration  17: 6209375.193 ops/s
Iteration  18: 6204382.760 ops/s
Iteration  19: 6219928.842 ops/s
Iteration  20: 6209087.362 ops/s
Iteration  21: 6204705.914 ops/s
Iteration  22: 6214083.036 ops/s
Iteration  23: 6204880.031 ops/s
Iteration  24: 6206706.093 ops/s
Iteration  25: 6216243.111 ops/s
Iteration  26: 6209013.180 ops/s
Iteration  27: 6211535.853 ops/s
Iteration  28: 6216068.468 ops/s
Iteration  29: 6204796.547 ops/s
Iteration  30: 6198290.530 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_collectChar":
  6208409.588 ±(99.9%) 3888.064 ops/s [Average]
  (min, avg, max) = (6195633.851, 6208409.588, 6219928.842), stdev = 5819.472
  CI (99.9%): [6204521.524, 6212297.652] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_collectChar  thrpt   30  6208409.588 ± 3888.064  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_collectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_collectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2298768.270 ops/s
# Warmup Iteration   2: 4995676.577 ops/s
# Warmup Iteration   3: 5352537.683 ops/s
# Warmup Iteration   4: 5384799.680 ops/s
# Warmup Iteration   5: 4441520.761 ops/s
# Warmup Iteration   6: 5390347.015 ops/s
# Warmup Iteration   7: 5388576.827 ops/s
# Warmup Iteration   8: 5381989.423 ops/s
# Warmup Iteration   9: 5379616.608 ops/s
# Warmup Iteration  10: 5381493.077 ops/s
# Warmup Iteration  11: 5383606.092 ops/s
# Warmup Iteration  12: 5383713.076 ops/s
# Warmup Iteration  13: 5386832.028 ops/s
# Warmup Iteration  14: 5367903.292 ops/s
# Warmup Iteration  15: 5384817.246 ops/s
# Warmup Iteration  16: 5384411.340 ops/s
# Warmup Iteration  17: 5389001.067 ops/s
# Warmup Iteration  18: 5388117.026 ops/s
# Warmup Iteration  19: 5391727.755 ops/s
# Warmup Iteration  20: 5391211.208 ops/s
# Warmup Iteration  21: 5387448.766 ops/s
# Warmup Iteration  22: 5395455.731 ops/s
# Warmup Iteration  23: 5382549.213 ops/s
# Warmup Iteration  24: 5393690.086 ops/s
# Warmup Iteration  25: 5391035.385 ops/s
# Warmup Iteration  26: 5387075.008 ops/s
# Warmup Iteration  27: 5385922.326 ops/s
# Warmup Iteration  28: 5391623.613 ops/s
# Warmup Iteration  29: 5394771.564 ops/s
# Warmup Iteration  30: 5392645.935 ops/s
Iteration   1: 5391512.300 ops/s
Iteration   2: 5381149.132 ops/s
Iteration   3: 5397428.983 ops/s
Iteration   4: 5391292.044 ops/s
Iteration   5: 5390445.634 ops/s
Iteration   6: 5389513.045 ops/s
Iteration   7: 5404907.157 ops/s
Iteration   8: 5391425.479 ops/s
Iteration   9: 5390546.682 ops/s
Iteration  10: 5392092.633 ops/s
Iteration  11: 5398409.557 ops/s
Iteration  12: 5389095.636 ops/s
Iteration  13: 5395685.548 ops/s
Iteration  14: 5390897.036 ops/s
Iteration  15: 5397064.406 ops/s
Iteration  16: 5390759.697 ops/s
Iteration  17: 5393028.920 ops/s
Iteration  18: 5388058.958 ops/s
Iteration  19: 5395363.301 ops/s
Iteration  20: 5389182.920 ops/s
Iteration  21: 5395749.597 ops/s
Iteration  22: 5389867.147 ops/s
Iteration  23: 5394645.864 ops/s
Iteration  24: 5387864.610 ops/s
Iteration  25: 5389743.209 ops/s
Iteration  26: 5386505.407 ops/s
Iteration  27: 5394392.782 ops/s
Iteration  28: 5379379.906 ops/s
Iteration  29: 5378280.224 ops/s
Iteration  30: 5380291.883 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_collectDouble":
  5390819.323 ±(99.9%) 3882.717 ops/s [Average]
  (min, avg, max) = (5378280.224, 5390819.323, 5404907.157), stdev = 5811.468
  CI (99.9%): [5386936.606, 5394702.040] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_collectDouble  thrpt   30  5390819.323 ± 3882.717  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_collectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_collectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2727120.291 ops/s
# Warmup Iteration   2: 5650830.586 ops/s
# Warmup Iteration   3: 6088321.302 ops/s
# Warmup Iteration   4: 6117452.242 ops/s
# Warmup Iteration   5: 5079648.237 ops/s
# Warmup Iteration   6: 6120761.819 ops/s
# Warmup Iteration   7: 6125116.662 ops/s
# Warmup Iteration   8: 6129170.251 ops/s
# Warmup Iteration   9: 6124789.586 ops/s
# Warmup Iteration  10: 6117525.598 ops/s
# Warmup Iteration  11: 6120982.248 ops/s
# Warmup Iteration  12: 6124593.213 ops/s
# Warmup Iteration  13: 6126762.440 ops/s
# Warmup Iteration  14: 6114868.778 ops/s
# Warmup Iteration  15: 6125383.814 ops/s
# Warmup Iteration  16: 6134382.872 ops/s
# Warmup Iteration  17: 6121562.757 ops/s
# Warmup Iteration  18: 6121260.951 ops/s
# Warmup Iteration  19: 6123941.761 ops/s
# Warmup Iteration  20: 6128030.693 ops/s
# Warmup Iteration  21: 6104599.293 ops/s
# Warmup Iteration  22: 6125593.439 ops/s
# Warmup Iteration  23: 6129186.979 ops/s
# Warmup Iteration  24: 6122360.290 ops/s
# Warmup Iteration  25: 6125827.371 ops/s
# Warmup Iteration  26: 6044688.318 ops/s
# Warmup Iteration  27: 6131382.170 ops/s
# Warmup Iteration  28: 6109833.472 ops/s
# Warmup Iteration  29: 6114358.533 ops/s
# Warmup Iteration  30: 6117923.572 ops/s
Iteration   1: 6114360.779 ops/s
Iteration   2: 6120375.531 ops/s
Iteration   3: 6127127.815 ops/s
Iteration   4: 6123532.329 ops/s
Iteration   5: 6127095.989 ops/s
Iteration   6: 6134526.862 ops/s
Iteration   7: 6124363.277 ops/s
Iteration   8: 6143293.308 ops/s
Iteration   9: 6127755.669 ops/s
Iteration  10: 6117357.868 ops/s
Iteration  11: 6118020.574 ops/s
Iteration  12: 6100396.891 ops/s
Iteration  13: 6132277.485 ops/s
Iteration  14: 6120824.435 ops/s
Iteration  15: 6124023.637 ops/s
Iteration  16: 6136767.985 ops/s
Iteration  17: 6113567.870 ops/s
Iteration  18: 6122350.426 ops/s
Iteration  19: 6130312.227 ops/s
Iteration  20: 6117251.659 ops/s
Iteration  21: 6125803.457 ops/s
Iteration  22: 6121697.690 ops/s
Iteration  23: 6136946.809 ops/s
Iteration  24: 6124831.796 ops/s
Iteration  25: 6129712.644 ops/s
Iteration  26: 6131714.346 ops/s
Iteration  27: 6126442.781 ops/s
Iteration  28: 6119211.161 ops/s
Iteration  29: 6136008.419 ops/s
Iteration  30: 6133667.555 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_collectFloat":
  6125387.309 ±(99.9%) 5787.747 ops/s [Average]
  (min, avg, max) = (6100396.891, 6125387.309, 6143293.308), stdev = 8662.828
  CI (99.9%): [6119599.562, 6131175.057] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_collectFloat  thrpt   30  6125387.309 ± 5787.747  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_collectIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_collectIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4739542.204 ops/s
# Warmup Iteration   2: 10321986.710 ops/s
# Warmup Iteration   3: 10313879.387 ops/s
# Warmup Iteration   4: 8736103.780 ops/s
# Warmup Iteration   5: 10342208.255 ops/s
# Warmup Iteration   6: 10349572.389 ops/s
# Warmup Iteration   7: 10344842.718 ops/s
# Warmup Iteration   8: 10358182.647 ops/s
# Warmup Iteration   9: 10348814.466 ops/s
# Warmup Iteration  10: 10339064.694 ops/s
# Warmup Iteration  11: 10329482.064 ops/s
# Warmup Iteration  12: 10334953.250 ops/s
# Warmup Iteration  13: 10341816.510 ops/s
# Warmup Iteration  14: 10339068.889 ops/s
# Warmup Iteration  15: 10343684.169 ops/s
# Warmup Iteration  16: 10344341.452 ops/s
# Warmup Iteration  17: 10346065.978 ops/s
# Warmup Iteration  18: 10324048.439 ops/s
# Warmup Iteration  19: 10333324.889 ops/s
# Warmup Iteration  20: 10338490.797 ops/s
# Warmup Iteration  21: 10348997.128 ops/s
# Warmup Iteration  22: 10337278.055 ops/s
# Warmup Iteration  23: 10328654.874 ops/s
# Warmup Iteration  24: 10336011.428 ops/s
# Warmup Iteration  25: 10337437.191 ops/s
# Warmup Iteration  26: 10340405.234 ops/s
# Warmup Iteration  27: 10329519.871 ops/s
# Warmup Iteration  28: 10350883.829 ops/s
# Warmup Iteration  29: 10202336.761 ops/s
# Warmup Iteration  30: 10346206.254 ops/s
Iteration   1: 10328155.369 ops/s
Iteration   2: 10332557.284 ops/s
Iteration   3: 10345824.187 ops/s
Iteration   4: 10357339.016 ops/s
Iteration   5: 10335660.316 ops/s
Iteration   6: 10339691.542 ops/s
Iteration   7: 10318883.894 ops/s
Iteration   8: 10316078.232 ops/s
Iteration   9: 10324239.796 ops/s
Iteration  10: 10339151.523 ops/s
Iteration  11: 10363742.422 ops/s
Iteration  12: 10362498.493 ops/s
Iteration  13: 10340856.658 ops/s
Iteration  14: 10328012.123 ops/s
Iteration  15: 10331053.450 ops/s
Iteration  16: 10328962.720 ops/s
Iteration  17: 10328597.603 ops/s
Iteration  18: 10335934.638 ops/s
Iteration  19: 10360866.254 ops/s
Iteration  20: 10321558.809 ops/s
Iteration  21: 10330828.393 ops/s
Iteration  22: 10340395.383 ops/s
Iteration  23: 10346466.646 ops/s
Iteration  24: 10345682.801 ops/s
Iteration  25: 10362024.399 ops/s
Iteration  26: 10306667.340 ops/s
Iteration  27: 10345328.147 ops/s
Iteration  28: 10315621.049 ops/s
Iteration  29: 10338813.570 ops/s
Iteration  30: 10326609.643 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_collectIf":
  10336603.390 ±(99.9%) 9899.214 ops/s [Average]
  (min, avg, max) = (10306667.340, 10336603.390, 10363742.422), stdev = 14816.678
  CI (99.9%): [10326704.176, 10346502.604] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt         Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_collectIf  thrpt   30  10336603.390 ± 9899.214  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_collectIfWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_collectIfWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8487176.907 ops/s
# Warmup Iteration   2: 17618923.183 ops/s
# Warmup Iteration   3: 15146091.814 ops/s
# Warmup Iteration   4: 17779588.441 ops/s
# Warmup Iteration   5: 17863659.914 ops/s
# Warmup Iteration   6: 17847414.695 ops/s
# Warmup Iteration   7: 17876782.691 ops/s
# Warmup Iteration   8: 17824773.811 ops/s
# Warmup Iteration   9: 17868007.700 ops/s
# Warmup Iteration  10: 17858440.171 ops/s
# Warmup Iteration  11: 17840308.009 ops/s
# Warmup Iteration  12: 17822562.156 ops/s
# Warmup Iteration  13: 17781921.541 ops/s
# Warmup Iteration  14: 17858215.146 ops/s
# Warmup Iteration  15: 17857158.901 ops/s
# Warmup Iteration  16: 17854603.858 ops/s
# Warmup Iteration  17: 17872785.790 ops/s
# Warmup Iteration  18: 17836357.752 ops/s
# Warmup Iteration  19: 17816104.104 ops/s
# Warmup Iteration  20: 17864399.904 ops/s
# Warmup Iteration  21: 17882697.765 ops/s
# Warmup Iteration  22: 17886519.166 ops/s
# Warmup Iteration  23: 17858506.873 ops/s
# Warmup Iteration  24: 17878972.581 ops/s
# Warmup Iteration  25: 17886444.546 ops/s
# Warmup Iteration  26: 17828005.135 ops/s
# Warmup Iteration  27: 17875027.735 ops/s
# Warmup Iteration  28: 17885996.711 ops/s
# Warmup Iteration  29: 17849187.083 ops/s
# Warmup Iteration  30: 17877681.522 ops/s
Iteration   1: 17839207.209 ops/s
Iteration   2: 17913859.139 ops/s
Iteration   3: 17865327.522 ops/s
Iteration   4: 17876313.822 ops/s
Iteration   5: 17896569.804 ops/s
Iteration   6: 17907295.257 ops/s
Iteration   7: 17842357.808 ops/s
Iteration   8: 17873520.151 ops/s
Iteration   9: 17859427.743 ops/s
Iteration  10: 17903779.638 ops/s
Iteration  11: 17870959.976 ops/s
Iteration  12: 17920026.305 ops/s
Iteration  13: 17905074.099 ops/s
Iteration  14: 17931385.023 ops/s
Iteration  15: 17854455.404 ops/s
Iteration  16: 17879373.264 ops/s
Iteration  17: 17865049.170 ops/s
Iteration  18: 17888639.818 ops/s
Iteration  19: 17905222.420 ops/s
Iteration  20: 17850478.369 ops/s
Iteration  21: 17849929.303 ops/s
Iteration  22: 17925135.336 ops/s
Iteration  23: 17889130.899 ops/s
Iteration  24: 17893757.818 ops/s
Iteration  25: 17873147.727 ops/s
Iteration  26: 17869307.240 ops/s
Iteration  27: 17904298.048 ops/s
Iteration  28: 17805643.786 ops/s
Iteration  29: 17922446.752 ops/s
Iteration  30: 17900117.157 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_collectIfWithTarget":
  17882707.867 ±(99.9%) 19772.541 ops/s [Average]
  (min, avg, max) = (17805643.786, 17882707.867, 17931385.023), stdev = 29594.611
  CI (99.9%): [17862935.326, 17902480.408] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score       Error  Units
ImmutableSubListTest._Benchmark.benchmark_collectIfWithTarget  thrpt   30  17882707.867 ± 19772.541  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_collectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_collectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2773069.979 ops/s
# Warmup Iteration   2: 5780405.687 ops/s
# Warmup Iteration   3: 6163936.345 ops/s
# Warmup Iteration   4: 6197820.732 ops/s
# Warmup Iteration   5: 5137025.178 ops/s
# Warmup Iteration   6: 6209988.204 ops/s
# Warmup Iteration   7: 6208748.038 ops/s
# Warmup Iteration   8: 6211600.031 ops/s
# Warmup Iteration   9: 6206316.436 ops/s
# Warmup Iteration  10: 6208844.629 ops/s
# Warmup Iteration  11: 6204741.751 ops/s
# Warmup Iteration  12: 6207085.704 ops/s
# Warmup Iteration  13: 6212300.589 ops/s
# Warmup Iteration  14: 6206446.484 ops/s
# Warmup Iteration  15: 6213246.153 ops/s
# Warmup Iteration  16: 6207783.889 ops/s
# Warmup Iteration  17: 6214412.063 ops/s
# Warmup Iteration  18: 6203155.659 ops/s
# Warmup Iteration  19: 6211560.771 ops/s
# Warmup Iteration  20: 6208626.319 ops/s
# Warmup Iteration  21: 6196345.968 ops/s
# Warmup Iteration  22: 6203239.064 ops/s
# Warmup Iteration  23: 6211941.009 ops/s
# Warmup Iteration  24: 6210519.603 ops/s
# Warmup Iteration  25: 6206998.800 ops/s
# Warmup Iteration  26: 6209680.445 ops/s
# Warmup Iteration  27: 6215625.869 ops/s
# Warmup Iteration  28: 6208958.086 ops/s
# Warmup Iteration  29: 6216111.264 ops/s
# Warmup Iteration  30: 6203512.132 ops/s
Iteration   1: 6209289.716 ops/s
Iteration   2: 6178297.190 ops/s
Iteration   3: 6192621.672 ops/s
Iteration   4: 6203678.813 ops/s
Iteration   5: 6236156.091 ops/s
Iteration   6: 6208981.890 ops/s
Iteration   7: 6204930.110 ops/s
Iteration   8: 6197238.541 ops/s
Iteration   9: 6191069.829 ops/s
Iteration  10: 6197580.232 ops/s
Iteration  11: 6211355.987 ops/s
Iteration  12: 6221484.086 ops/s
Iteration  13: 6206314.277 ops/s
Iteration  14: 6202989.251 ops/s
Iteration  15: 6199580.742 ops/s
Iteration  16: 6207630.152 ops/s
Iteration  17: 6207319.139 ops/s
Iteration  18: 6211480.476 ops/s
Iteration  19: 6216266.797 ops/s
Iteration  20: 6206678.621 ops/s
Iteration  21: 6208524.805 ops/s
Iteration  22: 6224572.507 ops/s
Iteration  23: 6209495.041 ops/s
Iteration  24: 6212541.580 ops/s
Iteration  25: 6208836.670 ops/s
Iteration  26: 6225521.075 ops/s
Iteration  27: 6210676.861 ops/s
Iteration  28: 6208457.000 ops/s
Iteration  29: 6213646.710 ops/s
Iteration  30: 6213238.689 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_collectInt":
  6208215.152 ±(99.9%) 7338.505 ops/s [Average]
  (min, avg, max) = (6178297.190, 6208215.152, 6236156.091), stdev = 10983.930
  CI (99.9%): [6200876.646, 6215553.657] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_collectInt  thrpt   30  6208215.152 ± 7338.505  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_collectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_collectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2623424.695 ops/s
# Warmup Iteration   2: 5814414.282 ops/s
# Warmup Iteration   3: 6097481.913 ops/s
# Warmup Iteration   4: 6068010.721 ops/s
# Warmup Iteration   5: 5140771.610 ops/s
# Warmup Iteration   6: 6102428.017 ops/s
# Warmup Iteration   7: 6124546.189 ops/s
# Warmup Iteration   8: 6123580.892 ops/s
# Warmup Iteration   9: 6124831.876 ops/s
# Warmup Iteration  10: 6126504.742 ops/s
# Warmup Iteration  11: 6113134.030 ops/s
# Warmup Iteration  12: 6122700.140 ops/s
# Warmup Iteration  13: 6117975.390 ops/s
# Warmup Iteration  14: 6102118.131 ops/s
# Warmup Iteration  15: 6119405.757 ops/s
# Warmup Iteration  16: 6102320.449 ops/s
# Warmup Iteration  17: 6130030.891 ops/s
# Warmup Iteration  18: 6137587.219 ops/s
# Warmup Iteration  19: 6144674.034 ops/s
# Warmup Iteration  20: 6135729.895 ops/s
# Warmup Iteration  21: 6141169.765 ops/s
# Warmup Iteration  22: 6134875.670 ops/s
# Warmup Iteration  23: 6138256.433 ops/s
# Warmup Iteration  24: 6136602.324 ops/s
# Warmup Iteration  25: 6136719.706 ops/s
# Warmup Iteration  26: 6131051.266 ops/s
# Warmup Iteration  27: 6135390.146 ops/s
# Warmup Iteration  28: 6135471.410 ops/s
# Warmup Iteration  29: 6115405.570 ops/s
# Warmup Iteration  30: 6137251.998 ops/s
Iteration   1: 6142756.682 ops/s
Iteration   2: 6134544.543 ops/s
Iteration   3: 6136287.953 ops/s
Iteration   4: 6143555.335 ops/s
Iteration   5: 6136009.016 ops/s
Iteration   6: 6136489.910 ops/s
Iteration   7: 6133696.355 ops/s
Iteration   8: 6124003.940 ops/s
Iteration   9: 6140250.449 ops/s
Iteration  10: 6126118.214 ops/s
Iteration  11: 6133688.228 ops/s
Iteration  12: 6147248.051 ops/s
Iteration  13: 6143045.176 ops/s
Iteration  14: 6138840.350 ops/s
Iteration  15: 6133376.103 ops/s
Iteration  16: 6135622.308 ops/s
Iteration  17: 6143771.729 ops/s
Iteration  18: 6139854.659 ops/s
Iteration  19: 6124027.031 ops/s
Iteration  20: 6122681.264 ops/s
Iteration  21: 6133008.596 ops/s
Iteration  22: 6130226.425 ops/s
Iteration  23: 6132131.420 ops/s
Iteration  24: 6132708.950 ops/s
Iteration  25: 6140843.720 ops/s
Iteration  26: 6128791.511 ops/s
Iteration  27: 6130198.667 ops/s
Iteration  28: 6130293.027 ops/s
Iteration  29: 6135082.018 ops/s
Iteration  30: 6154475.715 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_collectLong":
  6135454.245 ±(99.9%) 4814.131 ops/s [Average]
  (min, avg, max) = (6122681.264, 6135454.245, 6154475.715), stdev = 7205.565
  CI (99.9%): [6130640.114, 6140268.375] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_collectLong  thrpt   30  6135454.245 ± 4814.131  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_collectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_collectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2806490.866 ops/s
# Warmup Iteration   2: 5645372.970 ops/s
# Warmup Iteration   3: 6162247.827 ops/s
# Warmup Iteration   4: 6200502.846 ops/s
# Warmup Iteration   5: 5123326.043 ops/s
# Warmup Iteration   6: 6201555.504 ops/s
# Warmup Iteration   7: 6210115.652 ops/s
# Warmup Iteration   8: 6198192.467 ops/s
# Warmup Iteration   9: 6206977.854 ops/s
# Warmup Iteration  10: 6202184.759 ops/s
# Warmup Iteration  11: 6207110.384 ops/s
# Warmup Iteration  12: 6214422.041 ops/s
# Warmup Iteration  13: 6208811.514 ops/s
# Warmup Iteration  14: 6210791.976 ops/s
# Warmup Iteration  15: 6207511.387 ops/s
# Warmup Iteration  16: 6205182.054 ops/s
# Warmup Iteration  17: 6201893.108 ops/s
# Warmup Iteration  18: 6205593.217 ops/s
# Warmup Iteration  19: 6197101.921 ops/s
# Warmup Iteration  20: 6204071.493 ops/s
# Warmup Iteration  21: 6209515.685 ops/s
# Warmup Iteration  22: 6199043.065 ops/s
# Warmup Iteration  23: 6208224.974 ops/s
# Warmup Iteration  24: 6198608.718 ops/s
# Warmup Iteration  25: 6208772.415 ops/s
# Warmup Iteration  26: 6198886.593 ops/s
# Warmup Iteration  27: 6199851.940 ops/s
# Warmup Iteration  28: 6202630.940 ops/s
# Warmup Iteration  29: 6182637.401 ops/s
# Warmup Iteration  30: 6201716.140 ops/s
Iteration   1: 6216774.859 ops/s
Iteration   2: 6185463.227 ops/s
Iteration   3: 6190943.920 ops/s
Iteration   4: 6201943.934 ops/s
Iteration   5: 6193194.622 ops/s
Iteration   6: 6202515.633 ops/s
Iteration   7: 6213077.487 ops/s
Iteration   8: 6194371.007 ops/s
Iteration   9: 6203415.065 ops/s
Iteration  10: 6202211.694 ops/s
Iteration  11: 6199645.350 ops/s
Iteration  12: 6197317.341 ops/s
Iteration  13: 6204259.257 ops/s
Iteration  14: 6203239.652 ops/s
Iteration  15: 6197999.564 ops/s
Iteration  16: 6210518.120 ops/s
Iteration  17: 6197954.910 ops/s
Iteration  18: 6201763.241 ops/s
Iteration  19: 6201487.391 ops/s
Iteration  20: 6201050.430 ops/s
Iteration  21: 6191846.619 ops/s
Iteration  22: 6205512.434 ops/s
Iteration  23: 6209380.967 ops/s
Iteration  24: 6197322.300 ops/s
Iteration  25: 6206399.154 ops/s
Iteration  26: 6212506.300 ops/s
Iteration  27: 6197642.609 ops/s
Iteration  28: 6194718.853 ops/s
Iteration  29: 6217945.166 ops/s
Iteration  30: 6199106.356 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_collectShort":
  6201717.582 ±(99.9%) 5068.150 ops/s [Average]
  (min, avg, max) = (6185463.227, 6201717.582, 6217945.166), stdev = 7585.769
  CI (99.9%): [6196649.432, 6206785.732] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_collectShort  thrpt   30  6201717.582 ± 5068.150  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_collectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_collectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1267896.541 ops/s
# Warmup Iteration   2: 2924765.208 ops/s
# Warmup Iteration   3: 2448894.127 ops/s
# Warmup Iteration   4: 2928693.879 ops/s
# Warmup Iteration   5: 2928521.290 ops/s
# Warmup Iteration   6: 2921327.359 ops/s
# Warmup Iteration   7: 2929698.486 ops/s
# Warmup Iteration   8: 2928425.161 ops/s
# Warmup Iteration   9: 2934028.564 ops/s
# Warmup Iteration  10: 2932152.600 ops/s
# Warmup Iteration  11: 2924104.931 ops/s
# Warmup Iteration  12: 2920603.972 ops/s
# Warmup Iteration  13: 2927909.201 ops/s
# Warmup Iteration  14: 2935622.801 ops/s
# Warmup Iteration  15: 2934322.800 ops/s
# Warmup Iteration  16: 2923895.606 ops/s
# Warmup Iteration  17: 2925710.533 ops/s
# Warmup Iteration  18: 2917515.325 ops/s
# Warmup Iteration  19: 2931830.054 ops/s
# Warmup Iteration  20: 2924748.943 ops/s
# Warmup Iteration  21: 2931308.983 ops/s
# Warmup Iteration  22: 2927082.098 ops/s
# Warmup Iteration  23: 2921295.131 ops/s
# Warmup Iteration  24: 2908564.171 ops/s
# Warmup Iteration  25: 2927055.265 ops/s
# Warmup Iteration  26: 2937214.393 ops/s
# Warmup Iteration  27: 2935697.547 ops/s
# Warmup Iteration  28: 2934186.276 ops/s
# Warmup Iteration  29: 2925255.016 ops/s
# Warmup Iteration  30: 2924709.182 ops/s
Iteration   1: 2928957.345 ops/s
Iteration   2: 2928520.416 ops/s
Iteration   3: 2919413.339 ops/s
Iteration   4: 2917925.203 ops/s
Iteration   5: 2921094.759 ops/s
Iteration   6: 2911422.192 ops/s
Iteration   7: 2919045.095 ops/s
Iteration   8: 2923272.139 ops/s
Iteration   9: 2913943.869 ops/s
Iteration  10: 2906120.952 ops/s
Iteration  11: 2914744.564 ops/s
Iteration  12: 2934888.750 ops/s
Iteration  13: 2928088.131 ops/s
Iteration  14: 2922120.380 ops/s
Iteration  15: 2923322.369 ops/s
Iteration  16: 2930852.367 ops/s
Iteration  17: 2926820.680 ops/s
Iteration  18: 2920401.866 ops/s
Iteration  19: 2910788.227 ops/s
Iteration  20: 2923664.431 ops/s
Iteration  21: 2929486.266 ops/s
Iteration  22: 2927017.984 ops/s
Iteration  23: 2937175.403 ops/s
Iteration  24: 2924345.005 ops/s
Iteration  25: 2922790.774 ops/s
Iteration  26: 2927184.695 ops/s
Iteration  27: 2925464.122 ops/s
Iteration  28: 2938614.620 ops/s
Iteration  29: 2927249.430 ops/s
Iteration  30: 2927435.628 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_collectWith":
  2923739.033 ±(99.9%) 5029.603 ops/s [Average]
  (min, avg, max) = (2906120.952, 2923739.033, 2938614.620), stdev = 7528.074
  CI (99.9%): [2918709.430, 2928768.637] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_collectWith  thrpt   30  2923739.033 ± 5029.603  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_collectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_collectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2266402.192 ops/s
# Warmup Iteration   2: 5727747.127 ops/s
# Warmup Iteration   3: 4859380.959 ops/s
# Warmup Iteration   4: 5821926.160 ops/s
# Warmup Iteration   5: 5821885.445 ops/s
# Warmup Iteration   6: 5815641.842 ops/s
# Warmup Iteration   7: 5820034.136 ops/s
# Warmup Iteration   8: 5819560.457 ops/s
# Warmup Iteration   9: 5806278.850 ops/s
# Warmup Iteration  10: 5816914.948 ops/s
# Warmup Iteration  11: 5815338.467 ops/s
# Warmup Iteration  12: 5823248.732 ops/s
# Warmup Iteration  13: 5823622.110 ops/s
# Warmup Iteration  14: 5816445.956 ops/s
# Warmup Iteration  15: 5829183.588 ops/s
# Warmup Iteration  16: 5818391.786 ops/s
# Warmup Iteration  17: 5820265.597 ops/s
# Warmup Iteration  18: 5826326.076 ops/s
# Warmup Iteration  19: 5820919.420 ops/s
# Warmup Iteration  20: 5823433.050 ops/s
# Warmup Iteration  21: 5802268.157 ops/s
# Warmup Iteration  22: 5820043.108 ops/s
# Warmup Iteration  23: 5815525.147 ops/s
# Warmup Iteration  24: 5817168.323 ops/s
# Warmup Iteration  25: 5816589.182 ops/s
# Warmup Iteration  26: 5805539.968 ops/s
# Warmup Iteration  27: 5820735.339 ops/s
# Warmup Iteration  28: 5820818.002 ops/s
# Warmup Iteration  29: 5832020.804 ops/s
# Warmup Iteration  30: 5814279.360 ops/s
Iteration   1: 5817823.317 ops/s
Iteration   2: 5817952.142 ops/s
Iteration   3: 5812688.148 ops/s
Iteration   4: 5835568.110 ops/s
Iteration   5: 5807958.133 ops/s
Iteration   6: 5832001.453 ops/s
Iteration   7: 5827000.432 ops/s
Iteration   8: 5798786.974 ops/s
Iteration   9: 5805302.204 ops/s
Iteration  10: 5819303.031 ops/s
Iteration  11: 5807632.555 ops/s
Iteration  12: 5817818.930 ops/s
Iteration  13: 5821682.590 ops/s
Iteration  14: 5832527.586 ops/s
Iteration  15: 5827285.945 ops/s
Iteration  16: 5825669.002 ops/s
Iteration  17: 5820008.173 ops/s
Iteration  18: 5821052.183 ops/s
Iteration  19: 5834552.239 ops/s
Iteration  20: 5825847.515 ops/s
Iteration  21: 5826758.803 ops/s
Iteration  22: 5814060.579 ops/s
Iteration  23: 5817954.650 ops/s
Iteration  24: 5821560.028 ops/s
Iteration  25: 5801789.559 ops/s
Iteration  26: 5808987.031 ops/s
Iteration  27: 5825228.785 ops/s
Iteration  28: 5825965.739 ops/s
Iteration  29: 5809473.872 ops/s
Iteration  30: 5839986.927 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_collectWithIndex":
  5820007.554 ±(99.9%) 6877.268 ops/s [Average]
  (min, avg, max) = (5798786.974, 5820007.554, 5839986.927), stdev = 10293.572
  CI (99.9%): [5813130.286, 5826884.822] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_collectWithIndex  thrpt   30  5820007.554 ± 6877.268  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_collectWithIndexWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_collectWithIndexWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 530989.878 ops/s
# Warmup Iteration   2: 1489381.014 ops/s
# Warmup Iteration   3: 1665920.528 ops/s
# Warmup Iteration   4: 1415710.694 ops/s
# Warmup Iteration   5: 1639352.939 ops/s
# Warmup Iteration   6: 1667259.155 ops/s
# Warmup Iteration   7: 1662513.186 ops/s
# Warmup Iteration   8: 1668108.939 ops/s
# Warmup Iteration   9: 1665857.295 ops/s
# Warmup Iteration  10: 1663530.532 ops/s
# Warmup Iteration  11: 1665215.097 ops/s
# Warmup Iteration  12: 1665848.256 ops/s
# Warmup Iteration  13: 1671855.199 ops/s
# Warmup Iteration  14: 1668997.000 ops/s
# Warmup Iteration  15: 1669325.589 ops/s
# Warmup Iteration  16: 1667111.668 ops/s
# Warmup Iteration  17: 1668652.969 ops/s
# Warmup Iteration  18: 1668675.085 ops/s
# Warmup Iteration  19: 1667539.970 ops/s
# Warmup Iteration  20: 1668919.734 ops/s
# Warmup Iteration  21: 1668281.251 ops/s
# Warmup Iteration  22: 1668301.893 ops/s
# Warmup Iteration  23: 1668715.851 ops/s
# Warmup Iteration  24: 1659464.923 ops/s
# Warmup Iteration  25: 1653321.277 ops/s
# Warmup Iteration  26: 1657372.237 ops/s
# Warmup Iteration  27: 1662608.068 ops/s
# Warmup Iteration  28: 1667868.042 ops/s
# Warmup Iteration  29: 1665384.243 ops/s
# Warmup Iteration  30: 1670702.087 ops/s
Iteration   1: 1670311.560 ops/s
Iteration   2: 1667625.477 ops/s
Iteration   3: 1666233.231 ops/s
Iteration   4: 1669043.478 ops/s
Iteration   5: 1662707.840 ops/s
Iteration   6: 1668005.955 ops/s
Iteration   7: 1669898.566 ops/s
Iteration   8: 1669008.815 ops/s
Iteration   9: 1667655.876 ops/s
Iteration  10: 1662392.828 ops/s
Iteration  11: 1666055.306 ops/s
Iteration  12: 1667126.678 ops/s
Iteration  13: 1668368.081 ops/s
Iteration  14: 1667078.183 ops/s
Iteration  15: 1669309.246 ops/s
Iteration  16: 1668913.985 ops/s
Iteration  17: 1667001.022 ops/s
Iteration  18: 1667168.308 ops/s
Iteration  19: 1671695.038 ops/s
Iteration  20: 1670783.218 ops/s
Iteration  21: 1668195.251 ops/s
Iteration  22: 1666461.186 ops/s
Iteration  23: 1668577.633 ops/s
Iteration  24: 1670616.112 ops/s
Iteration  25: 1669551.301 ops/s
Iteration  26: 1668018.162 ops/s
Iteration  27: 1667912.411 ops/s
Iteration  28: 1665888.723 ops/s
Iteration  29: 1666728.515 ops/s
Iteration  30: 1666258.509 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_collectWithIndexWithTarget":
  1667819.683 ±(99.9%) 1388.094 ops/s [Average]
  (min, avg, max) = (1662392.828, 1667819.683, 1671695.038), stdev = 2077.634
  CI (99.9%): [1666431.589, 1669207.777] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_collectWithIndexWithTarget  thrpt   30  1667819.683 ± 1388.094  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_collectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_collectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1605473.707 ops/s
# Warmup Iteration   2: 3643657.095 ops/s
# Warmup Iteration   3: 3078156.959 ops/s
# Warmup Iteration   4: 3673540.009 ops/s
# Warmup Iteration   5: 3678348.336 ops/s
# Warmup Iteration   6: 3677424.575 ops/s
# Warmup Iteration   7: 3665607.361 ops/s
# Warmup Iteration   8: 3682840.756 ops/s
# Warmup Iteration   9: 3672224.630 ops/s
# Warmup Iteration  10: 3671779.489 ops/s
# Warmup Iteration  11: 3666657.090 ops/s
# Warmup Iteration  12: 3673225.382 ops/s
# Warmup Iteration  13: 3675460.265 ops/s
# Warmup Iteration  14: 3670998.919 ops/s
# Warmup Iteration  15: 3675358.458 ops/s
# Warmup Iteration  16: 3675869.849 ops/s
# Warmup Iteration  17: 3681476.265 ops/s
# Warmup Iteration  18: 3677001.875 ops/s
# Warmup Iteration  19: 3678441.193 ops/s
# Warmup Iteration  20: 3680191.956 ops/s
# Warmup Iteration  21: 3675954.894 ops/s
# Warmup Iteration  22: 3680844.817 ops/s
# Warmup Iteration  23: 3681809.615 ops/s
# Warmup Iteration  24: 3666941.632 ops/s
# Warmup Iteration  25: 3683261.589 ops/s
# Warmup Iteration  26: 3676945.314 ops/s
# Warmup Iteration  27: 3674326.228 ops/s
# Warmup Iteration  28: 3685572.043 ops/s
# Warmup Iteration  29: 3678758.139 ops/s
# Warmup Iteration  30: 3675433.872 ops/s
Iteration   1: 3674173.127 ops/s
Iteration   2: 3670635.934 ops/s
Iteration   3: 3672016.727 ops/s
Iteration   4: 3678981.974 ops/s
Iteration   5: 3672474.854 ops/s
Iteration   6: 3670873.151 ops/s
Iteration   7: 3671785.760 ops/s
Iteration   8: 3671122.409 ops/s
Iteration   9: 3678290.067 ops/s
Iteration  10: 3672801.786 ops/s
Iteration  11: 3662987.674 ops/s
Iteration  12: 3679318.095 ops/s
Iteration  13: 3672011.132 ops/s
Iteration  14: 3673877.122 ops/s
Iteration  15: 3671527.258 ops/s
Iteration  16: 3692738.283 ops/s
Iteration  17: 3681395.004 ops/s
Iteration  18: 3676553.971 ops/s
Iteration  19: 3670929.901 ops/s
Iteration  20: 3681946.697 ops/s
Iteration  21: 3668248.880 ops/s
Iteration  22: 3666333.414 ops/s
Iteration  23: 3682428.136 ops/s
Iteration  24: 3678288.490 ops/s
Iteration  25: 3684805.160 ops/s
Iteration  26: 3662882.817 ops/s
Iteration  27: 3677826.237 ops/s
Iteration  28: 3674337.001 ops/s
Iteration  29: 3658844.494 ops/s
Iteration  30: 3676675.028 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_collectWith_target":
  3674237.019 ±(99.9%) 4644.270 ops/s [Average]
  (min, avg, max) = (3658844.494, 3674237.019, 3692738.283), stdev = 6951.325
  CI (99.9%): [3669592.749, 3678881.290] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_collectWith_target  thrpt   30  3674237.019 ± 4644.270  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_collect_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_collect_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3353925.178 ops/s
# Warmup Iteration   2: 7209229.338 ops/s
# Warmup Iteration   3: 6164047.423 ops/s
# Warmup Iteration   4: 7323078.355 ops/s
# Warmup Iteration   5: 7331281.586 ops/s
# Warmup Iteration   6: 7131255.402 ops/s
# Warmup Iteration   7: 7317737.878 ops/s
# Warmup Iteration   8: 7313157.916 ops/s
# Warmup Iteration   9: 7250097.463 ops/s
# Warmup Iteration  10: 7331657.045 ops/s
# Warmup Iteration  11: 7303812.090 ops/s
# Warmup Iteration  12: 7316618.937 ops/s
# Warmup Iteration  13: 7316100.745 ops/s
# Warmup Iteration  14: 7317468.679 ops/s
# Warmup Iteration  15: 7314287.388 ops/s
# Warmup Iteration  16: 7309985.719 ops/s
# Warmup Iteration  17: 7311910.526 ops/s
# Warmup Iteration  18: 7327452.097 ops/s
# Warmup Iteration  19: 7312671.142 ops/s
# Warmup Iteration  20: 7329529.736 ops/s
# Warmup Iteration  21: 7321672.392 ops/s
# Warmup Iteration  22: 7313151.432 ops/s
# Warmup Iteration  23: 7321486.989 ops/s
# Warmup Iteration  24: 7335336.974 ops/s
# Warmup Iteration  25: 7333308.945 ops/s
# Warmup Iteration  26: 7338699.548 ops/s
# Warmup Iteration  27: 7316942.000 ops/s
# Warmup Iteration  28: 7325965.734 ops/s
# Warmup Iteration  29: 7319864.495 ops/s
# Warmup Iteration  30: 7325771.939 ops/s
Iteration   1: 7333691.584 ops/s
Iteration   2: 7323287.050 ops/s
Iteration   3: 7323263.059 ops/s
Iteration   4: 7320457.688 ops/s
Iteration   5: 7356390.858 ops/s
Iteration   6: 7333799.072 ops/s
Iteration   7: 7333943.607 ops/s
Iteration   8: 7334517.035 ops/s
Iteration   9: 7325880.811 ops/s
Iteration  10: 7319564.858 ops/s
Iteration  11: 7320806.597 ops/s
Iteration  12: 7329470.175 ops/s
Iteration  13: 7305431.851 ops/s
Iteration  14: 7324152.616 ops/s
Iteration  15: 7339827.726 ops/s
Iteration  16: 7332747.973 ops/s
Iteration  17: 7338227.846 ops/s
Iteration  18: 7322563.668 ops/s
Iteration  19: 7333645.579 ops/s
Iteration  20: 7333638.147 ops/s
Iteration  21: 7322142.491 ops/s
Iteration  22: 7326216.002 ops/s
Iteration  23: 7340166.106 ops/s
Iteration  24: 7331825.040 ops/s
Iteration  25: 7331940.750 ops/s
Iteration  26: 7325817.822 ops/s
Iteration  27: 7266618.744 ops/s
Iteration  28: 7327057.997 ops/s
Iteration  29: 7309724.204 ops/s
Iteration  30: 7316773.323 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_collect_target":
  7326119.676 ±(99.9%) 9931.658 ops/s [Average]
  (min, avg, max) = (7266618.744, 7326119.676, 7356390.858), stdev = 14865.239
  CI (99.9%): [7316188.018, 7336051.333] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_collect_target  thrpt   30  7326119.676 ± 9931.658  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9631561.313 ops/s
# Warmup Iteration   2: 15686687.641 ops/s
# Warmup Iteration   3: 17278726.245 ops/s
# Warmup Iteration   4: 17321376.458 ops/s
# Warmup Iteration   5: 17366124.442 ops/s
# Warmup Iteration   6: 14655406.190 ops/s
# Warmup Iteration   7: 17366653.210 ops/s
# Warmup Iteration   8: 17359955.155 ops/s
# Warmup Iteration   9: 17359540.670 ops/s
# Warmup Iteration  10: 17341289.452 ops/s
# Warmup Iteration  11: 17358085.054 ops/s
# Warmup Iteration  12: 17376570.046 ops/s
# Warmup Iteration  13: 17369101.316 ops/s
# Warmup Iteration  14: 17373337.820 ops/s
# Warmup Iteration  15: 17354294.877 ops/s
# Warmup Iteration  16: 17303768.995 ops/s
# Warmup Iteration  17: 17291515.203 ops/s
# Warmup Iteration  18: 17307330.191 ops/s
# Warmup Iteration  19: 17338871.865 ops/s
# Warmup Iteration  20: 17315090.228 ops/s
# Warmup Iteration  21: 17355288.322 ops/s
# Warmup Iteration  22: 17349539.614 ops/s
# Warmup Iteration  23: 17346349.436 ops/s
# Warmup Iteration  24: 17335727.907 ops/s
# Warmup Iteration  25: 17319434.599 ops/s
# Warmup Iteration  26: 17269571.601 ops/s
# Warmup Iteration  27: 17363021.244 ops/s
# Warmup Iteration  28: 17364432.736 ops/s
# Warmup Iteration  29: 17359189.779 ops/s
# Warmup Iteration  30: 17305988.753 ops/s
Iteration   1: 17307688.882 ops/s
Iteration   2: 17355082.020 ops/s
Iteration   3: 17354644.230 ops/s
Iteration   4: 17349755.714 ops/s
Iteration   5: 17269463.447 ops/s
Iteration   6: 17341993.691 ops/s
Iteration   7: 17381772.689 ops/s
Iteration   8: 17356235.920 ops/s
Iteration   9: 17370819.610 ops/s
Iteration  10: 17305951.845 ops/s
Iteration  11: 17298439.166 ops/s
Iteration  12: 17351264.618 ops/s
Iteration  13: 17377131.118 ops/s
Iteration  14: 17339363.712 ops/s
Iteration  15: 17328949.398 ops/s
Iteration  16: 17316720.842 ops/s
Iteration  17: 17374888.692 ops/s
Iteration  18: 17313136.484 ops/s
Iteration  19: 17364310.426 ops/s
Iteration  20: 17405549.618 ops/s
Iteration  21: 17312640.029 ops/s
Iteration  22: 17341221.650 ops/s
Iteration  23: 17336192.781 ops/s
Iteration  24: 17370680.871 ops/s
Iteration  25: 17335079.372 ops/s
Iteration  26: 17375509.782 ops/s
Iteration  27: 17343493.970 ops/s
Iteration  28: 17375004.021 ops/s
Iteration  29: 17376903.653 ops/s
Iteration  30: 17351001.322 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_contains":
  17346029.652 ±(99.9%) 20013.749 ops/s [Average]
  (min, avg, max) = (17269463.447, 17346029.652, 17405549.618), stdev = 29955.639
  CI (99.9%): [17326015.904, 17366043.401] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt         Score       Error  Units
ImmutableSubListTest._Benchmark.benchmark_contains  thrpt   30  17346029.652 ± 20013.749  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_containsAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_containsAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2511826.715 ops/s
# Warmup Iteration   2: 5398510.311 ops/s
# Warmup Iteration   3: 5536322.890 ops/s
# Warmup Iteration   4: 4671962.418 ops/s
# Warmup Iteration   5: 5538805.447 ops/s
# Warmup Iteration   6: 5541766.642 ops/s
# Warmup Iteration   7: 5541323.366 ops/s
# Warmup Iteration   8: 5541464.348 ops/s
# Warmup Iteration   9: 5530715.787 ops/s
# Warmup Iteration  10: 5541978.364 ops/s
# Warmup Iteration  11: 5532572.390 ops/s
# Warmup Iteration  12: 5539364.966 ops/s
# Warmup Iteration  13: 5534464.895 ops/s
# Warmup Iteration  14: 5542353.267 ops/s
# Warmup Iteration  15: 5546953.476 ops/s
# Warmup Iteration  16: 5538679.747 ops/s
# Warmup Iteration  17: 5533522.008 ops/s
# Warmup Iteration  18: 5524083.658 ops/s
# Warmup Iteration  19: 5533798.892 ops/s
# Warmup Iteration  20: 5546862.679 ops/s
# Warmup Iteration  21: 5528804.041 ops/s
# Warmup Iteration  22: 5540288.071 ops/s
# Warmup Iteration  23: 5542733.864 ops/s
# Warmup Iteration  24: 5539943.520 ops/s
# Warmup Iteration  25: 5519342.586 ops/s
# Warmup Iteration  26: 5548405.500 ops/s
# Warmup Iteration  27: 5535721.343 ops/s
# Warmup Iteration  28: 5544931.342 ops/s
# Warmup Iteration  29: 5548077.420 ops/s
# Warmup Iteration  30: 5534715.749 ops/s
Iteration   1: 5540914.038 ops/s
Iteration   2: 5553571.287 ops/s
Iteration   3: 5533829.193 ops/s
Iteration   4: 5554259.781 ops/s
Iteration   5: 5545388.936 ops/s
Iteration   6: 5536921.392 ops/s
Iteration   7: 5537945.371 ops/s
Iteration   8: 5538032.639 ops/s
Iteration   9: 5549525.731 ops/s
Iteration  10: 5554412.551 ops/s
Iteration  11: 5541820.938 ops/s
Iteration  12: 5538861.831 ops/s
Iteration  13: 5548702.851 ops/s
Iteration  14: 5545599.611 ops/s
Iteration  15: 5528768.151 ops/s
Iteration  16: 5537419.636 ops/s
Iteration  17: 5540679.617 ops/s
Iteration  18: 5544124.309 ops/s
Iteration  19: 5534087.184 ops/s
Iteration  20: 5527414.511 ops/s
Iteration  21: 5541507.490 ops/s
Iteration  22: 5543448.283 ops/s
Iteration  23: 5545226.130 ops/s
Iteration  24: 5543692.269 ops/s
Iteration  25: 5545377.269 ops/s
Iteration  26: 5552794.848 ops/s
Iteration  27: 5547849.255 ops/s
Iteration  28: 5541946.986 ops/s
Iteration  29: 5556189.809 ops/s
Iteration  30: 5544980.125 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_containsAll":
  5543176.401 ±(99.9%) 4843.661 ops/s [Average]
  (min, avg, max) = (5527414.511, 5543176.401, 5556189.809), stdev = 7249.764
  CI (99.9%): [5538332.740, 5548020.061] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_containsAll  thrpt   30  5543176.401 ± 4843.661  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3958073.827 ops/s
# Warmup Iteration   2: 9114624.097 ops/s
# Warmup Iteration   3: 8988245.102 ops/s
# Warmup Iteration   4: 7546806.598 ops/s
# Warmup Iteration   5: 9015407.105 ops/s
# Warmup Iteration   6: 8972587.628 ops/s
# Warmup Iteration   7: 9005742.315 ops/s
# Warmup Iteration   8: 9016702.841 ops/s
# Warmup Iteration   9: 9011222.759 ops/s
# Warmup Iteration  10: 9029198.343 ops/s
# Warmup Iteration  11: 9009285.549 ops/s
# Warmup Iteration  12: 9016196.344 ops/s
# Warmup Iteration  13: 9009950.042 ops/s
# Warmup Iteration  14: 9012421.227 ops/s
# Warmup Iteration  15: 9008404.349 ops/s
# Warmup Iteration  16: 9022735.999 ops/s
# Warmup Iteration  17: 9044142.973 ops/s
# Warmup Iteration  18: 9033000.323 ops/s
# Warmup Iteration  19: 9026701.651 ops/s
# Warmup Iteration  20: 9031667.590 ops/s
# Warmup Iteration  21: 9014487.463 ops/s
# Warmup Iteration  22: 9025410.945 ops/s
# Warmup Iteration  23: 9018085.288 ops/s
# Warmup Iteration  24: 9030735.283 ops/s
# Warmup Iteration  25: 9034347.223 ops/s
# Warmup Iteration  26: 9021785.161 ops/s
# Warmup Iteration  27: 9040352.848 ops/s
# Warmup Iteration  28: 9024448.076 ops/s
# Warmup Iteration  29: 9009249.559 ops/s
# Warmup Iteration  30: 8953108.078 ops/s
Iteration   1: 8956225.503 ops/s
Iteration   2: 9006161.555 ops/s
Iteration   3: 8961267.307 ops/s
Iteration   4: 8980134.337 ops/s
Iteration   5: 8963689.775 ops/s
Iteration   6: 9030297.287 ops/s
Iteration   7: 9035901.667 ops/s
Iteration   8: 9047657.368 ops/s
Iteration   9: 9032052.290 ops/s
Iteration  10: 9038769.256 ops/s
Iteration  11: 9019740.135 ops/s
Iteration  12: 9026115.850 ops/s
Iteration  13: 9033811.270 ops/s
Iteration  14: 9034026.171 ops/s
Iteration  15: 9022154.408 ops/s
Iteration  16: 9023151.140 ops/s
Iteration  17: 9031825.511 ops/s
Iteration  18: 9044955.561 ops/s
Iteration  19: 9030665.806 ops/s
Iteration  20: 9039124.609 ops/s
Iteration  21: 9039282.588 ops/s
Iteration  22: 9018297.807 ops/s
Iteration  23: 9037377.787 ops/s
Iteration  24: 9029066.851 ops/s
Iteration  25: 9026019.465 ops/s
Iteration  26: 9021176.317 ops/s
Iteration  27: 9009430.997 ops/s
Iteration  28: 9045031.144 ops/s
Iteration  29: 9013290.514 ops/s
Iteration  30: 9037904.831 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_containsAllArray":
  9021153.504 ±(99.9%) 16474.020 ops/s [Average]
  (min, avg, max) = (8956225.503, 9021153.504, 9047657.368), stdev = 24657.540
  CI (99.9%): [9004679.483, 9037627.524] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
ImmutableSubListTest._Benchmark.benchmark_containsAllArray  thrpt   30  9021153.504 ± 16474.020  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3465843.308 ops/s
# Warmup Iteration   2: 6099004.948 ops/s
# Warmup Iteration   3: 6551073.521 ops/s
# Warmup Iteration   4: 6581574.107 ops/s
# Warmup Iteration   5: 6440802.465 ops/s
# Warmup Iteration   6: 5661090.938 ops/s
# Warmup Iteration   7: 6569055.710 ops/s
# Warmup Iteration   8: 6560856.750 ops/s
# Warmup Iteration   9: 6579781.061 ops/s
# Warmup Iteration  10: 6577335.665 ops/s
# Warmup Iteration  11: 6573755.610 ops/s
# Warmup Iteration  12: 6585017.974 ops/s
# Warmup Iteration  13: 6546318.237 ops/s
# Warmup Iteration  14: 6577904.672 ops/s
# Warmup Iteration  15: 6571375.984 ops/s
# Warmup Iteration  16: 6577653.237 ops/s
# Warmup Iteration  17: 6577116.458 ops/s
# Warmup Iteration  18: 6574933.833 ops/s
# Warmup Iteration  19: 6573573.099 ops/s
# Warmup Iteration  20: 6579430.247 ops/s
# Warmup Iteration  21: 6582562.012 ops/s
# Warmup Iteration  22: 6582064.782 ops/s
# Warmup Iteration  23: 6550387.501 ops/s
# Warmup Iteration  24: 6527161.682 ops/s
# Warmup Iteration  25: 6584699.365 ops/s
# Warmup Iteration  26: 6583040.983 ops/s
# Warmup Iteration  27: 6584971.450 ops/s
# Warmup Iteration  28: 6587296.047 ops/s
# Warmup Iteration  29: 6582784.667 ops/s
# Warmup Iteration  30: 6569904.458 ops/s
Iteration   1: 6588879.787 ops/s
Iteration   2: 6576571.677 ops/s
Iteration   3: 6583715.711 ops/s
Iteration   4: 6521056.549 ops/s
Iteration   5: 6517103.480 ops/s
Iteration   6: 6600194.302 ops/s
Iteration   7: 6582830.088 ops/s
Iteration   8: 6591518.253 ops/s
Iteration   9: 6574958.531 ops/s
Iteration  10: 6583950.178 ops/s
Iteration  11: 6580255.080 ops/s
Iteration  12: 6576309.254 ops/s
Iteration  13: 6594178.092 ops/s
Iteration  14: 6570014.202 ops/s
Iteration  15: 6584976.400 ops/s
Iteration  16: 6576581.672 ops/s
Iteration  17: 6578088.547 ops/s
Iteration  18: 6573912.662 ops/s
Iteration  19: 6569196.289 ops/s
Iteration  20: 6594382.714 ops/s
Iteration  21: 6566654.322 ops/s
Iteration  22: 6567940.568 ops/s
Iteration  23: 6584359.832 ops/s
Iteration  24: 6599795.528 ops/s
Iteration  25: 6595856.508 ops/s
Iteration  26: 6581621.008 ops/s
Iteration  27: 6580400.903 ops/s
Iteration  28: 6579588.908 ops/s
Iteration  29: 6588886.435 ops/s
Iteration  30: 6591412.718 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_containsAllIterable":
  6578506.340 ±(99.9%) 12388.212 ops/s [Average]
  (min, avg, max) = (6517103.480, 6578506.340, 6600194.302), stdev = 18542.094
  CI (99.9%): [6566118.128, 6590894.552] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ImmutableSubListTest._Benchmark.benchmark_containsAllIterable  thrpt   30  6578506.340 ± 12388.212  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_corresponds$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_corresponds

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3558383.725 ops/s
# Warmup Iteration   2: 8066410.550 ops/s
# Warmup Iteration   3: 8123258.593 ops/s
# Warmup Iteration   4: 6849864.200 ops/s
# Warmup Iteration   5: 8120618.978 ops/s
# Warmup Iteration   6: 8137420.496 ops/s
# Warmup Iteration   7: 8152749.020 ops/s
# Warmup Iteration   8: 8150868.898 ops/s
# Warmup Iteration   9: 8145104.691 ops/s
# Warmup Iteration  10: 8156060.697 ops/s
# Warmup Iteration  11: 8148111.915 ops/s
# Warmup Iteration  12: 8147249.042 ops/s
# Warmup Iteration  13: 8151986.986 ops/s
# Warmup Iteration  14: 8150184.644 ops/s
# Warmup Iteration  15: 8138105.032 ops/s
# Warmup Iteration  16: 8139592.724 ops/s
# Warmup Iteration  17: 8154638.428 ops/s
# Warmup Iteration  18: 8166627.232 ops/s
# Warmup Iteration  19: 8168667.766 ops/s
# Warmup Iteration  20: 8151960.248 ops/s
# Warmup Iteration  21: 8157133.411 ops/s
# Warmup Iteration  22: 8153423.380 ops/s
# Warmup Iteration  23: 8150066.031 ops/s
# Warmup Iteration  24: 8151361.168 ops/s
# Warmup Iteration  25: 8122909.579 ops/s
# Warmup Iteration  26: 8140327.270 ops/s
# Warmup Iteration  27: 8154726.151 ops/s
# Warmup Iteration  28: 8163903.678 ops/s
# Warmup Iteration  29: 8152041.454 ops/s
# Warmup Iteration  30: 8165253.641 ops/s
Iteration   1: 8150533.710 ops/s
Iteration   2: 8123743.267 ops/s
Iteration   3: 8153891.242 ops/s
Iteration   4: 8155149.895 ops/s
Iteration   5: 8145915.333 ops/s
Iteration   6: 8148209.500 ops/s
Iteration   7: 8134120.178 ops/s
Iteration   8: 8154683.303 ops/s
Iteration   9: 8140974.136 ops/s
Iteration  10: 8132881.919 ops/s
Iteration  11: 8133143.828 ops/s
Iteration  12: 8142785.503 ops/s
Iteration  13: 8163006.123 ops/s
Iteration  14: 8141575.509 ops/s
Iteration  15: 8145789.231 ops/s
Iteration  16: 8158800.567 ops/s
Iteration  17: 8152534.530 ops/s
Iteration  18: 8153251.536 ops/s
Iteration  19: 8162574.823 ops/s
Iteration  20: 8175199.392 ops/s
Iteration  21: 8165612.281 ops/s
Iteration  22: 8138816.364 ops/s
Iteration  23: 8151517.779 ops/s
Iteration  24: 8189944.496 ops/s
Iteration  25: 8143574.932 ops/s
Iteration  26: 8150267.460 ops/s
Iteration  27: 8158902.822 ops/s
Iteration  28: 8153385.615 ops/s
Iteration  29: 8165537.088 ops/s
Iteration  30: 8125035.767 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_corresponds":
  8150378.604 ±(99.9%) 9481.513 ops/s [Average]
  (min, avg, max) = (8123743.267, 8150378.604, 8189944.496), stdev = 14191.483
  CI (99.9%): [8140897.092, 8159860.117] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_corresponds  thrpt   30  8150378.604 ± 9481.513  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11976076.708 ops/s
# Warmup Iteration   2: 24375625.071 ops/s
# Warmup Iteration   3: 24573217.976 ops/s
# Warmup Iteration   4: 20799736.067 ops/s
# Warmup Iteration   5: 24454256.787 ops/s
# Warmup Iteration   6: 24505125.167 ops/s
# Warmup Iteration   7: 24515656.761 ops/s
# Warmup Iteration   8: 24542528.619 ops/s
# Warmup Iteration   9: 24555118.158 ops/s
# Warmup Iteration  10: 24515732.544 ops/s
# Warmup Iteration  11: 24574246.835 ops/s
# Warmup Iteration  12: 24574866.904 ops/s
# Warmup Iteration  13: 24584465.203 ops/s
# Warmup Iteration  14: 24552702.021 ops/s
# Warmup Iteration  15: 24510812.203 ops/s
# Warmup Iteration  16: 24598215.125 ops/s
# Warmup Iteration  17: 24470982.454 ops/s
# Warmup Iteration  18: 24479968.655 ops/s
# Warmup Iteration  19: 24441955.166 ops/s
# Warmup Iteration  20: 24516591.086 ops/s
# Warmup Iteration  21: 24181020.979 ops/s
# Warmup Iteration  22: 24553073.650 ops/s
# Warmup Iteration  23: 24497712.885 ops/s
# Warmup Iteration  24: 24479594.127 ops/s
# Warmup Iteration  25: 24513480.684 ops/s
# Warmup Iteration  26: 24553935.424 ops/s
# Warmup Iteration  27: 24572075.852 ops/s
# Warmup Iteration  28: 24463004.487 ops/s
# Warmup Iteration  29: 24541254.163 ops/s
# Warmup Iteration  30: 24534143.046 ops/s
Iteration   1: 24465390.867 ops/s
Iteration   2: 24478928.750 ops/s
Iteration   3: 24428096.441 ops/s
Iteration   4: 24485788.290 ops/s
Iteration   5: 24476150.421 ops/s
Iteration   6: 24527030.613 ops/s
Iteration   7: 24500657.472 ops/s
Iteration   8: 24545137.134 ops/s
Iteration   9: 24540500.869 ops/s
Iteration  10: 24474556.224 ops/s
Iteration  11: 24461124.024 ops/s
Iteration  12: 24467685.139 ops/s
Iteration  13: 24525935.266 ops/s
Iteration  14: 24549976.330 ops/s
Iteration  15: 24513405.727 ops/s
Iteration  16: 24515319.016 ops/s
Iteration  17: 24493345.750 ops/s
Iteration  18: 24525940.555 ops/s
Iteration  19: 24516823.335 ops/s
Iteration  20: 24522967.306 ops/s
Iteration  21: 24522537.005 ops/s
Iteration  22: 24492564.367 ops/s
Iteration  23: 24445163.063 ops/s
Iteration  24: 24206695.216 ops/s
Iteration  25: 24321172.857 ops/s
Iteration  26: 24293612.503 ops/s
Iteration  27: 24412963.362 ops/s
Iteration  28: 24498391.356 ops/s
Iteration  29: 24449768.202 ops/s
Iteration  30: 24270230.337 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_count":
  24464261.927 ±(99.9%) 56726.373 ops/s [Average]
  (min, avg, max) = (24206695.216, 24464261.927, 24549976.330), stdev = 84905.371
  CI (99.9%): [24407535.554, 24520988.300] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt         Score       Error  Units
ImmutableSubListTest._Benchmark.benchmark_count  thrpt   30  24464261.927 ± 56726.373  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_countBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_countBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 904029.494 ops/s
# Warmup Iteration   2: 1875153.013 ops/s
# Warmup Iteration   3: 2086825.702 ops/s
# Warmup Iteration   4: 2111405.587 ops/s
# Warmup Iteration   5: 1742805.058 ops/s
# Warmup Iteration   6: 2111340.796 ops/s
# Warmup Iteration   7: 2106630.574 ops/s
# Warmup Iteration   8: 2118691.975 ops/s
# Warmup Iteration   9: 2112170.212 ops/s
# Warmup Iteration  10: 2104315.484 ops/s
# Warmup Iteration  11: 2115436.738 ops/s
# Warmup Iteration  12: 2109435.120 ops/s
# Warmup Iteration  13: 2108521.668 ops/s
# Warmup Iteration  14: 2114434.091 ops/s
# Warmup Iteration  15: 2109736.658 ops/s
# Warmup Iteration  16: 2111009.129 ops/s
# Warmup Iteration  17: 2110513.913 ops/s
# Warmup Iteration  18: 2114002.036 ops/s
# Warmup Iteration  19: 2116049.228 ops/s
# Warmup Iteration  20: 2119539.265 ops/s
# Warmup Iteration  21: 2118821.755 ops/s
# Warmup Iteration  22: 2111708.381 ops/s
# Warmup Iteration  23: 2111992.254 ops/s
# Warmup Iteration  24: 2110109.406 ops/s
# Warmup Iteration  25: 2110741.447 ops/s
# Warmup Iteration  26: 2121948.880 ops/s
# Warmup Iteration  27: 2114962.717 ops/s
# Warmup Iteration  28: 2119863.129 ops/s
# Warmup Iteration  29: 2110947.578 ops/s
# Warmup Iteration  30: 2109875.092 ops/s
Iteration   1: 2117756.909 ops/s
Iteration   2: 2111823.228 ops/s
Iteration   3: 2109984.191 ops/s
Iteration   4: 2109742.586 ops/s
Iteration   5: 2116183.414 ops/s
Iteration   6: 2109773.141 ops/s
Iteration   7: 2110617.175 ops/s
Iteration   8: 2118108.713 ops/s
Iteration   9: 2102842.498 ops/s
Iteration  10: 2115658.518 ops/s
Iteration  11: 2117503.594 ops/s
Iteration  12: 2105662.582 ops/s
Iteration  13: 2108616.830 ops/s
Iteration  14: 2101323.256 ops/s
Iteration  15: 2114643.978 ops/s
Iteration  16: 2114439.032 ops/s
Iteration  17: 2116260.284 ops/s
Iteration  18: 2120888.444 ops/s
Iteration  19: 2105304.836 ops/s
Iteration  20: 2109547.916 ops/s
Iteration  21: 2127484.765 ops/s
Iteration  22: 2114295.748 ops/s
Iteration  23: 2113704.562 ops/s
Iteration  24: 2107264.729 ops/s
Iteration  25: 2109125.250 ops/s
Iteration  26: 2110745.966 ops/s
Iteration  27: 2120528.604 ops/s
Iteration  28: 2105208.326 ops/s
Iteration  29: 2114065.869 ops/s
Iteration  30: 2102786.219 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_countBy":
  2112063.039 ±(99.9%) 4012.915 ops/s [Average]
  (min, avg, max) = (2101323.256, 2112063.039, 2127484.765), stdev = 6006.343
  CI (99.9%): [2108050.124, 2116075.954] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_countBy  thrpt   30  2112063.039 ± 4012.915  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_countByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_countByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 200092.299 ops/s
# Warmup Iteration   2: 314040.142 ops/s
# Warmup Iteration   3: 382855.183 ops/s
# Warmup Iteration   4: 379815.134 ops/s
# Warmup Iteration   5: 382876.548 ops/s
# Warmup Iteration   6: 382706.294 ops/s
# Warmup Iteration   7: 320388.740 ops/s
# Warmup Iteration   8: 383145.098 ops/s
# Warmup Iteration   9: 383359.797 ops/s
# Warmup Iteration  10: 382998.847 ops/s
# Warmup Iteration  11: 382550.102 ops/s
# Warmup Iteration  12: 382851.170 ops/s
# Warmup Iteration  13: 383679.636 ops/s
# Warmup Iteration  14: 384806.751 ops/s
# Warmup Iteration  15: 383119.713 ops/s
# Warmup Iteration  16: 382952.957 ops/s
# Warmup Iteration  17: 383367.073 ops/s
# Warmup Iteration  18: 382769.611 ops/s
# Warmup Iteration  19: 383024.360 ops/s
# Warmup Iteration  20: 382690.985 ops/s
# Warmup Iteration  21: 382979.844 ops/s
# Warmup Iteration  22: 382881.555 ops/s
# Warmup Iteration  23: 382621.954 ops/s
# Warmup Iteration  24: 382835.000 ops/s
# Warmup Iteration  25: 382954.373 ops/s
# Warmup Iteration  26: 382860.291 ops/s
# Warmup Iteration  27: 382736.968 ops/s
# Warmup Iteration  28: 383029.909 ops/s
# Warmup Iteration  29: 382679.003 ops/s
# Warmup Iteration  30: 382978.464 ops/s
Iteration   1: 383446.032 ops/s
Iteration   2: 382927.269 ops/s
Iteration   3: 383343.467 ops/s
Iteration   4: 382667.510 ops/s
Iteration   5: 383411.235 ops/s
Iteration   6: 382661.663 ops/s
Iteration   7: 382308.307 ops/s
Iteration   8: 383369.901 ops/s
Iteration   9: 382225.004 ops/s
Iteration  10: 383363.849 ops/s
Iteration  11: 382399.786 ops/s
Iteration  12: 382990.254 ops/s
Iteration  13: 382930.146 ops/s
Iteration  14: 383209.036 ops/s
Iteration  15: 382829.796 ops/s
Iteration  16: 382669.329 ops/s
Iteration  17: 383234.556 ops/s
Iteration  18: 383297.508 ops/s
Iteration  19: 384123.963 ops/s
Iteration  20: 383345.894 ops/s
Iteration  21: 383922.449 ops/s
Iteration  22: 381435.054 ops/s
Iteration  23: 380979.380 ops/s
Iteration  24: 381461.236 ops/s
Iteration  25: 383429.050 ops/s
Iteration  26: 382564.442 ops/s
Iteration  27: 384027.749 ops/s
Iteration  28: 383544.068 ops/s
Iteration  29: 379623.376 ops/s
Iteration  30: 379433.856 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_countByEach":
  382705.839 ±(99.9%) 756.068 ops/s [Average]
  (min, avg, max) = (379433.856, 382705.839, 384123.963), stdev = 1131.647
  CI (99.9%): [381949.771, 383461.907] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score     Error  Units
ImmutableSubListTest._Benchmark.benchmark_countByEach  thrpt   30  382705.839 ± 756.068  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_countByWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_countByWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 942707.896 ops/s
# Warmup Iteration   2: 1881229.751 ops/s
# Warmup Iteration   3: 2070477.795 ops/s
# Warmup Iteration   4: 2092606.195 ops/s
# Warmup Iteration   5: 1730727.927 ops/s
# Warmup Iteration   6: 2098574.512 ops/s
# Warmup Iteration   7: 2086800.678 ops/s
# Warmup Iteration   8: 2087171.110 ops/s
# Warmup Iteration   9: 2037652.367 ops/s
# Warmup Iteration  10: 2083494.274 ops/s
# Warmup Iteration  11: 2092677.038 ops/s
# Warmup Iteration  12: 2095512.357 ops/s
# Warmup Iteration  13: 2101607.532 ops/s
# Warmup Iteration  14: 2099185.402 ops/s
# Warmup Iteration  15: 2079167.819 ops/s
# Warmup Iteration  16: 2106682.940 ops/s
# Warmup Iteration  17: 2093308.011 ops/s
# Warmup Iteration  18: 2094016.368 ops/s
# Warmup Iteration  19: 2092625.845 ops/s
# Warmup Iteration  20: 2097728.450 ops/s
# Warmup Iteration  21: 2081164.722 ops/s
# Warmup Iteration  22: 2104397.769 ops/s
# Warmup Iteration  23: 2092798.855 ops/s
# Warmup Iteration  24: 2100614.750 ops/s
# Warmup Iteration  25: 2062805.613 ops/s
# Warmup Iteration  26: 2091467.260 ops/s
# Warmup Iteration  27: 2091401.710 ops/s
# Warmup Iteration  28: 2088778.909 ops/s
# Warmup Iteration  29: 2091958.401 ops/s
# Warmup Iteration  30: 2095135.181 ops/s
Iteration   1: 2091722.052 ops/s
Iteration   2: 2099272.279 ops/s
Iteration   3: 2097124.903 ops/s
Iteration   4: 2085131.516 ops/s
Iteration   5: 2079521.731 ops/s
Iteration   6: 2103452.736 ops/s
Iteration   7: 2094202.236 ops/s
Iteration   8: 2089781.769 ops/s
Iteration   9: 2078047.451 ops/s
Iteration  10: 2090030.401 ops/s
Iteration  11: 2067734.012 ops/s
Iteration  12: 2094679.833 ops/s
Iteration  13: 2101508.629 ops/s
Iteration  14: 2060369.202 ops/s
Iteration  15: 2062731.633 ops/s
Iteration  16: 2056187.923 ops/s
Iteration  17: 2095108.831 ops/s
Iteration  18: 2089594.837 ops/s
Iteration  19: 2090568.490 ops/s
Iteration  20: 2093986.123 ops/s
Iteration  21: 2092017.194 ops/s
Iteration  22: 2092771.194 ops/s
Iteration  23: 2094956.194 ops/s
Iteration  24: 2093312.868 ops/s
Iteration  25: 2104593.056 ops/s
Iteration  26: 2096031.282 ops/s
Iteration  27: 2093725.698 ops/s
Iteration  28: 2091031.997 ops/s
Iteration  29: 2090005.891 ops/s
Iteration  30: 2088749.650 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_countByWith":
  2088598.387 ±(99.9%) 8160.402 ops/s [Average]
  (min, avg, max) = (2056187.923, 2088598.387, 2104593.056), stdev = 12214.107
  CI (99.9%): [2080437.985, 2096758.789] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_countByWith  thrpt   30  2088598.387 ± 8160.402  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_countWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_countWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 15998633.543 ops/s
# Warmup Iteration   2: 30823283.675 ops/s
# Warmup Iteration   3: 30138402.435 ops/s
# Warmup Iteration   4: 25705642.778 ops/s
# Warmup Iteration   5: 30277472.861 ops/s
# Warmup Iteration   6: 30243971.440 ops/s
# Warmup Iteration   7: 30264118.885 ops/s
# Warmup Iteration   8: 30124272.354 ops/s
# Warmup Iteration   9: 30288212.112 ops/s
# Warmup Iteration  10: 30172858.410 ops/s
# Warmup Iteration  11: 30155863.524 ops/s
# Warmup Iteration  12: 30252416.284 ops/s
# Warmup Iteration  13: 30258859.632 ops/s
# Warmup Iteration  14: 30174131.968 ops/s
# Warmup Iteration  15: 30274087.259 ops/s
# Warmup Iteration  16: 30123798.321 ops/s
# Warmup Iteration  17: 30184600.067 ops/s
# Warmup Iteration  18: 30280763.655 ops/s
# Warmup Iteration  19: 30255183.860 ops/s
# Warmup Iteration  20: 30241576.522 ops/s
# Warmup Iteration  21: 30243268.923 ops/s
# Warmup Iteration  22: 30171055.046 ops/s
# Warmup Iteration  23: 30207473.751 ops/s
# Warmup Iteration  24: 30172868.860 ops/s
# Warmup Iteration  25: 30226517.815 ops/s
# Warmup Iteration  26: 29974630.864 ops/s
# Warmup Iteration  27: 30266026.454 ops/s
# Warmup Iteration  28: 30070730.914 ops/s
# Warmup Iteration  29: 30227141.937 ops/s
# Warmup Iteration  30: 30213338.183 ops/s
Iteration   1: 30176067.803 ops/s
Iteration   2: 29866659.787 ops/s
Iteration   3: 30265634.125 ops/s
Iteration   4: 30294981.239 ops/s
Iteration   5: 30231565.967 ops/s
Iteration   6: 30272328.466 ops/s
Iteration   7: 30245247.140 ops/s
Iteration   8: 30260439.296 ops/s
Iteration   9: 30176725.489 ops/s
Iteration  10: 30181540.913 ops/s
Iteration  11: 30149739.590 ops/s
Iteration  12: 30243578.079 ops/s
Iteration  13: 30234099.858 ops/s
Iteration  14: 30220019.858 ops/s
Iteration  15: 30163555.427 ops/s
Iteration  16: 30234646.686 ops/s
Iteration  17: 30231123.942 ops/s
Iteration  18: 30268614.392 ops/s
Iteration  19: 30288660.844 ops/s
Iteration  20: 30215719.995 ops/s
Iteration  21: 30205440.944 ops/s
Iteration  22: 30206611.946 ops/s
Iteration  23: 30273042.436 ops/s
Iteration  24: 30264553.685 ops/s
Iteration  25: 30262766.277 ops/s
Iteration  26: 30249511.529 ops/s
Iteration  27: 30265347.503 ops/s
Iteration  28: 30203334.532 ops/s
Iteration  29: 30304960.246 ops/s
Iteration  30: 30242576.563 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_countWith":
  30223303.152 ±(99.9%) 52183.713 ops/s [Average]
  (min, avg, max) = (29866659.787, 30223303.152, 30304960.246), stdev = 78106.131
  CI (99.9%): [30171119.439, 30275486.865] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt         Score       Error  Units
ImmutableSubListTest._Benchmark.benchmark_countWith  thrpt   30  30223303.152 ± 52183.713  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_detect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_detect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 18445101.376 ops/s
# Warmup Iteration   2: 37479334.129 ops/s
# Warmup Iteration   3: 32264867.393 ops/s
# Warmup Iteration   4: 38298941.184 ops/s
# Warmup Iteration   5: 38222429.548 ops/s
# Warmup Iteration   6: 38295068.333 ops/s
# Warmup Iteration   7: 38278785.245 ops/s
# Warmup Iteration   8: 37900946.705 ops/s
# Warmup Iteration   9: 38059436.190 ops/s
# Warmup Iteration  10: 37946746.723 ops/s
# Warmup Iteration  11: 38431110.830 ops/s
# Warmup Iteration  12: 38339093.227 ops/s
# Warmup Iteration  13: 38378124.286 ops/s
# Warmup Iteration  14: 38333262.108 ops/s
# Warmup Iteration  15: 38295349.968 ops/s
# Warmup Iteration  16: 38343543.843 ops/s
# Warmup Iteration  17: 38346060.357 ops/s
# Warmup Iteration  18: 38354742.849 ops/s
# Warmup Iteration  19: 38374459.194 ops/s
# Warmup Iteration  20: 38377189.052 ops/s
# Warmup Iteration  21: 38367189.973 ops/s
# Warmup Iteration  22: 38346044.307 ops/s
# Warmup Iteration  23: 38260854.910 ops/s
# Warmup Iteration  24: 38412122.138 ops/s
# Warmup Iteration  25: 38331056.080 ops/s
# Warmup Iteration  26: 38357020.100 ops/s
# Warmup Iteration  27: 38320119.791 ops/s
# Warmup Iteration  28: 38313130.246 ops/s
# Warmup Iteration  29: 38376859.456 ops/s
# Warmup Iteration  30: 38412647.796 ops/s
Iteration   1: 38446419.177 ops/s
Iteration   2: 38184313.597 ops/s
Iteration   3: 38417063.908 ops/s
Iteration   4: 38073795.640 ops/s
Iteration   5: 37833267.541 ops/s
Iteration   6: 37843945.939 ops/s
Iteration   7: 38174690.990 ops/s
Iteration   8: 38307557.619 ops/s
Iteration   9: 38352520.546 ops/s
Iteration  10: 38231003.851 ops/s
Iteration  11: 38320067.186 ops/s
Iteration  12: 38256497.659 ops/s
Iteration  13: 38204893.700 ops/s
Iteration  14: 38344363.024 ops/s
Iteration  15: 38372931.258 ops/s
Iteration  16: 38419955.391 ops/s
Iteration  17: 38361089.847 ops/s
Iteration  18: 38451022.125 ops/s
Iteration  19: 38065657.252 ops/s
Iteration  20: 38372069.439 ops/s
Iteration  21: 38405483.324 ops/s
Iteration  22: 38407221.586 ops/s
Iteration  23: 38362729.714 ops/s
Iteration  24: 38380970.974 ops/s
Iteration  25: 38272748.824 ops/s
Iteration  26: 37864898.919 ops/s
Iteration  27: 38318060.318 ops/s
Iteration  28: 38274100.932 ops/s
Iteration  29: 38402456.933 ops/s
Iteration  30: 38214663.234 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_detect":
  38264548.682 ±(99.9%) 115900.436 ops/s [Average]
  (min, avg, max) = (37833267.541, 38264548.682, 38451022.125), stdev = 173474.329
  CI (99.9%): [38148648.246, 38380449.117] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt         Score        Error  Units
ImmutableSubListTest._Benchmark.benchmark_detect  thrpt   30  38264548.682 ± 115900.436  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8700728.685 ops/s
# Warmup Iteration   2: 32817753.230 ops/s
# Warmup Iteration   3: 32458589.365 ops/s
# Warmup Iteration   4: 27634615.923 ops/s
# Warmup Iteration   5: 32643034.783 ops/s
# Warmup Iteration   6: 32601457.519 ops/s
# Warmup Iteration   7: 32641329.124 ops/s
# Warmup Iteration   8: 32670021.915 ops/s
# Warmup Iteration   9: 32613811.582 ops/s
# Warmup Iteration  10: 32600021.936 ops/s
# Warmup Iteration  11: 32701461.182 ops/s
# Warmup Iteration  12: 32609813.789 ops/s
# Warmup Iteration  13: 32651516.102 ops/s
# Warmup Iteration  14: 32648772.857 ops/s
# Warmup Iteration  15: 32418385.459 ops/s
# Warmup Iteration  16: 32629515.622 ops/s
# Warmup Iteration  17: 32640915.717 ops/s
# Warmup Iteration  18: 32609419.330 ops/s
# Warmup Iteration  19: 32625468.664 ops/s
# Warmup Iteration  20: 32592943.298 ops/s
# Warmup Iteration  21: 32631600.770 ops/s
# Warmup Iteration  22: 32680617.287 ops/s
# Warmup Iteration  23: 32667639.613 ops/s
# Warmup Iteration  24: 32517832.215 ops/s
# Warmup Iteration  25: 32697356.334 ops/s
# Warmup Iteration  26: 32687506.083 ops/s
# Warmup Iteration  27: 32671554.439 ops/s
# Warmup Iteration  28: 32637992.422 ops/s
# Warmup Iteration  29: 32709651.776 ops/s
# Warmup Iteration  30: 32646816.859 ops/s
Iteration   1: 32581441.594 ops/s
Iteration   2: 32595792.427 ops/s
Iteration   3: 32653592.297 ops/s
Iteration   4: 32727289.908 ops/s
Iteration   5: 32663757.150 ops/s
Iteration   6: 32653985.443 ops/s
Iteration   7: 32615585.329 ops/s
Iteration   8: 32639050.003 ops/s
Iteration   9: 32630008.822 ops/s
Iteration  10: 32648980.864 ops/s
Iteration  11: 32668628.999 ops/s
Iteration  12: 32586207.644 ops/s
Iteration  13: 32718584.626 ops/s
Iteration  14: 32607932.567 ops/s
Iteration  15: 32630733.672 ops/s
Iteration  16: 32618712.813 ops/s
Iteration  17: 32632337.156 ops/s
Iteration  18: 32636216.687 ops/s
Iteration  19: 32656244.778 ops/s
Iteration  20: 32676281.323 ops/s
Iteration  21: 32570266.245 ops/s
Iteration  22: 32639118.894 ops/s
Iteration  23: 32620230.750 ops/s
Iteration  24: 32715107.138 ops/s
Iteration  25: 32706449.864 ops/s
Iteration  26: 32630260.741 ops/s
Iteration  27: 32667861.183 ops/s
Iteration  28: 32678899.835 ops/s
Iteration  29: 32642648.198 ops/s
Iteration  30: 32714664.291 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_detectIfNone":
  32647562.375 ±(99.9%) 27573.791 ops/s [Average]
  (min, avg, max) = (32570266.245, 32647562.375, 32727289.908), stdev = 41271.156
  CI (99.9%): [32619988.584, 32675136.166] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score       Error  Units
ImmutableSubListTest._Benchmark.benchmark_detectIfNone  thrpt   30  32647562.375 ± 27573.791  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_detectIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_detectIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13306701.784 ops/s
# Warmup Iteration   2: 26796324.623 ops/s
# Warmup Iteration   3: 22737595.570 ops/s
# Warmup Iteration   4: 26530897.898 ops/s
# Warmup Iteration   5: 26492387.846 ops/s
# Warmup Iteration   6: 26488282.100 ops/s
# Warmup Iteration   7: 26460966.717 ops/s
# Warmup Iteration   8: 26538553.291 ops/s
# Warmup Iteration   9: 26527038.896 ops/s
# Warmup Iteration  10: 26489775.920 ops/s
# Warmup Iteration  11: 26470963.668 ops/s
# Warmup Iteration  12: 26509926.711 ops/s
# Warmup Iteration  13: 26554876.875 ops/s
# Warmup Iteration  14: 26536656.676 ops/s
# Warmup Iteration  15: 26473182.961 ops/s
# Warmup Iteration  16: 26491089.756 ops/s
# Warmup Iteration  17: 26803111.220 ops/s
# Warmup Iteration  18: 26799474.063 ops/s
# Warmup Iteration  19: 26859002.037 ops/s
# Warmup Iteration  20: 26748316.921 ops/s
# Warmup Iteration  21: 26774433.361 ops/s
# Warmup Iteration  22: 26865556.805 ops/s
# Warmup Iteration  23: 26754927.941 ops/s
# Warmup Iteration  24: 26829727.740 ops/s
# Warmup Iteration  25: 26858750.847 ops/s
# Warmup Iteration  26: 26749518.040 ops/s
# Warmup Iteration  27: 26820816.893 ops/s
# Warmup Iteration  28: 26880232.389 ops/s
# Warmup Iteration  29: 26833274.817 ops/s
# Warmup Iteration  30: 26772840.791 ops/s
Iteration   1: 26667021.142 ops/s
Iteration   2: 26491586.655 ops/s
Iteration   3: 26549425.010 ops/s
Iteration   4: 26405939.474 ops/s
Iteration   5: 26808126.316 ops/s
Iteration   6: 26792929.296 ops/s
Iteration   7: 26908509.110 ops/s
Iteration   8: 26820800.320 ops/s
Iteration   9: 26901969.273 ops/s
Iteration  10: 26904738.529 ops/s
Iteration  11: 26946033.023 ops/s
Iteration  12: 26825333.763 ops/s
Iteration  13: 26687360.303 ops/s
Iteration  14: 26798123.157 ops/s
Iteration  15: 26879316.470 ops/s
Iteration  16: 26792624.785 ops/s
Iteration  17: 26954030.375 ops/s
Iteration  18: 26829462.051 ops/s
Iteration  19: 26863423.440 ops/s
Iteration  20: 26843443.747 ops/s
Iteration  21: 26858675.525 ops/s
Iteration  22: 26805028.473 ops/s
Iteration  23: 26822848.832 ops/s
Iteration  24: 26835673.717 ops/s
Iteration  25: 26903087.027 ops/s
Iteration  26: 26696009.925 ops/s
Iteration  27: 26903002.267 ops/s
Iteration  28: 26863105.221 ops/s
Iteration  29: 26847837.480 ops/s
Iteration  30: 26732001.537 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_detectIndex":
  26797915.541 ±(99.9%) 86325.769 ops/s [Average]
  (min, avg, max) = (26405939.474, 26797915.541, 26954030.375), stdev = 129208.356
  CI (99.9%): [26711589.773, 26884241.310] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score       Error  Units
ImmutableSubListTest._Benchmark.benchmark_detectIndex  thrpt   30  26797915.541 ± 86325.769  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_detectLastIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_detectLastIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9225104.696 ops/s
# Warmup Iteration   2: 19264651.044 ops/s
# Warmup Iteration   3: 18620217.112 ops/s
# Warmup Iteration   4: 17503299.650 ops/s
# Warmup Iteration   5: 19561798.728 ops/s
# Warmup Iteration   6: 19633558.553 ops/s
# Warmup Iteration   7: 19633550.140 ops/s
# Warmup Iteration   8: 19723480.838 ops/s
# Warmup Iteration   9: 19587590.522 ops/s
# Warmup Iteration  10: 19601129.159 ops/s
# Warmup Iteration  11: 19539520.916 ops/s
# Warmup Iteration  12: 19266414.173 ops/s
# Warmup Iteration  13: 19558237.706 ops/s
# Warmup Iteration  14: 19606302.663 ops/s
# Warmup Iteration  15: 19614857.059 ops/s
# Warmup Iteration  16: 19522468.811 ops/s
# Warmup Iteration  17: 19624376.566 ops/s
# Warmup Iteration  18: 19566980.035 ops/s
# Warmup Iteration  19: 19621457.357 ops/s
# Warmup Iteration  20: 19679813.495 ops/s
# Warmup Iteration  21: 19600985.017 ops/s
# Warmup Iteration  22: 19648308.705 ops/s
# Warmup Iteration  23: 19625698.437 ops/s
# Warmup Iteration  24: 19591057.850 ops/s
# Warmup Iteration  25: 19536692.154 ops/s
# Warmup Iteration  26: 19596853.089 ops/s
# Warmup Iteration  27: 19614171.872 ops/s
# Warmup Iteration  28: 19612901.640 ops/s
# Warmup Iteration  29: 19589804.486 ops/s
# Warmup Iteration  30: 19653103.725 ops/s
Iteration   1: 19624788.084 ops/s
Iteration   2: 19610737.353 ops/s
Iteration   3: 19660248.209 ops/s
Iteration   4: 19620956.892 ops/s
Iteration   5: 19620296.800 ops/s
Iteration   6: 19584813.856 ops/s
Iteration   7: 19616341.071 ops/s
Iteration   8: 19616967.687 ops/s
Iteration   9: 19624640.778 ops/s
Iteration  10: 19581332.223 ops/s
Iteration  11: 19653169.474 ops/s
Iteration  12: 19582668.737 ops/s
Iteration  13: 19601315.610 ops/s
Iteration  14: 19577068.496 ops/s
Iteration  15: 19590541.985 ops/s
Iteration  16: 19631182.697 ops/s
Iteration  17: 19593469.234 ops/s
Iteration  18: 19637545.285 ops/s
Iteration  19: 19611333.902 ops/s
Iteration  20: 19573679.482 ops/s
Iteration  21: 19669915.247 ops/s
Iteration  22: 19633886.499 ops/s
Iteration  23: 19479778.679 ops/s
Iteration  24: 19196581.952 ops/s
Iteration  25: 19495229.095 ops/s
Iteration  26: 19653761.037 ops/s
Iteration  27: 19633275.874 ops/s
Iteration  28: 19680404.077 ops/s
Iteration  29: 19554916.549 ops/s
Iteration  30: 19597948.340 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_detectLastIndex":
  19593626.507 ±(99.9%) 58117.127 ops/s [Average]
  (min, avg, max) = (19196581.952, 19593626.507, 19680404.077), stdev = 86986.986
  CI (99.9%): [19535509.380, 19651743.633] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
ImmutableSubListTest._Benchmark.benchmark_detectLastIndex  thrpt   30  19593626.507 ± 58117.127  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_detectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_detectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8017587.354 ops/s
# Warmup Iteration   2: 17239169.545 ops/s
# Warmup Iteration   3: 14918869.261 ops/s
# Warmup Iteration   4: 16598055.077 ops/s
# Warmup Iteration   5: 17084003.456 ops/s
# Warmup Iteration   6: 17110868.972 ops/s
# Warmup Iteration   7: 17089072.860 ops/s
# Warmup Iteration   8: 17085776.323 ops/s
# Warmup Iteration   9: 17079600.401 ops/s
# Warmup Iteration  10: 17009115.761 ops/s
# Warmup Iteration  11: 17037918.979 ops/s
# Warmup Iteration  12: 17049798.859 ops/s
# Warmup Iteration  13: 17062956.803 ops/s
# Warmup Iteration  14: 17083781.698 ops/s
# Warmup Iteration  15: 17134790.700 ops/s
# Warmup Iteration  16: 17110883.035 ops/s
# Warmup Iteration  17: 17147999.252 ops/s
# Warmup Iteration  18: 17199118.562 ops/s
# Warmup Iteration  19: 17073112.120 ops/s
# Warmup Iteration  20: 17125453.349 ops/s
# Warmup Iteration  21: 17113209.458 ops/s
# Warmup Iteration  22: 17133545.616 ops/s
# Warmup Iteration  23: 17113632.186 ops/s
# Warmup Iteration  24: 17100146.899 ops/s
# Warmup Iteration  25: 17107224.708 ops/s
# Warmup Iteration  26: 17151559.043 ops/s
# Warmup Iteration  27: 17121486.203 ops/s
# Warmup Iteration  28: 17164837.495 ops/s
# Warmup Iteration  29: 17122617.189 ops/s
# Warmup Iteration  30: 17140011.962 ops/s
Iteration   1: 17133068.795 ops/s
Iteration   2: 17017595.873 ops/s
Iteration   3: 17081389.234 ops/s
Iteration   4: 17135366.597 ops/s
Iteration   5: 17100593.203 ops/s
Iteration   6: 17115372.218 ops/s
Iteration   7: 17107783.477 ops/s
Iteration   8: 17124156.765 ops/s
Iteration   9: 17142005.551 ops/s
Iteration  10: 17064246.808 ops/s
Iteration  11: 17138573.498 ops/s
Iteration  12: 17181071.982 ops/s
Iteration  13: 17110066.325 ops/s
Iteration  14: 17102263.364 ops/s
Iteration  15: 17173496.918 ops/s
Iteration  16: 17144439.566 ops/s
Iteration  17: 17155478.360 ops/s
Iteration  18: 17111273.967 ops/s
Iteration  19: 17127233.153 ops/s
Iteration  20: 17094042.457 ops/s
Iteration  21: 17103722.882 ops/s
Iteration  22: 17152401.730 ops/s
Iteration  23: 17136236.180 ops/s
Iteration  24: 17150729.950 ops/s
Iteration  25: 17131681.274 ops/s
Iteration  26: 17154781.874 ops/s
Iteration  27: 17132436.916 ops/s
Iteration  28: 17123727.363 ops/s
Iteration  29: 17135485.881 ops/s
Iteration  30: 17142178.178 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_detectWith":
  17124096.678 ±(99.9%) 21778.883 ops/s [Average]
  (min, avg, max) = (17017595.873, 17124096.678, 17181071.982), stdev = 32597.609
  CI (99.9%): [17102317.795, 17145875.561] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score       Error  Units
ImmutableSubListTest._Benchmark.benchmark_detectWith  thrpt   30  17124096.678 ± 21778.883  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_detectWithIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_detectWithIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9098228.804 ops/s
# Warmup Iteration   2: 19594906.057 ops/s
# Warmup Iteration   3: 19371101.607 ops/s
# Warmup Iteration   4: 16372074.325 ops/s
# Warmup Iteration   5: 19370330.355 ops/s
# Warmup Iteration   6: 19390788.529 ops/s
# Warmup Iteration   7: 19396477.193 ops/s
# Warmup Iteration   8: 19373917.564 ops/s
# Warmup Iteration   9: 19389030.103 ops/s
# Warmup Iteration  10: 19418862.427 ops/s
# Warmup Iteration  11: 19426687.252 ops/s
# Warmup Iteration  12: 19411217.421 ops/s
# Warmup Iteration  13: 19376490.468 ops/s
# Warmup Iteration  14: 19419196.295 ops/s
# Warmup Iteration  15: 19394870.050 ops/s
# Warmup Iteration  16: 19397266.102 ops/s
# Warmup Iteration  17: 19408192.517 ops/s
# Warmup Iteration  18: 19410978.089 ops/s
# Warmup Iteration  19: 19373350.716 ops/s
# Warmup Iteration  20: 19398319.542 ops/s
# Warmup Iteration  21: 19356819.649 ops/s
# Warmup Iteration  22: 19426062.363 ops/s
# Warmup Iteration  23: 19398046.668 ops/s
# Warmup Iteration  24: 19368546.426 ops/s
# Warmup Iteration  25: 19395160.677 ops/s
# Warmup Iteration  26: 19410659.007 ops/s
# Warmup Iteration  27: 19431269.083 ops/s
# Warmup Iteration  28: 19408559.444 ops/s
# Warmup Iteration  29: 19359383.464 ops/s
# Warmup Iteration  30: 19375480.384 ops/s
Iteration   1: 19407449.472 ops/s
Iteration   2: 19411283.977 ops/s
Iteration   3: 19404609.298 ops/s
Iteration   4: 19406000.654 ops/s
Iteration   5: 19398647.521 ops/s
Iteration   6: 19384802.670 ops/s
Iteration   7: 19416814.567 ops/s
Iteration   8: 19393680.441 ops/s
Iteration   9: 19404266.244 ops/s
Iteration  10: 19359910.521 ops/s
Iteration  11: 19365212.649 ops/s
Iteration  12: 19401321.427 ops/s
Iteration  13: 19368508.996 ops/s
Iteration  14: 19334143.301 ops/s
Iteration  15: 19359647.110 ops/s
Iteration  16: 19360566.557 ops/s
Iteration  17: 19415635.601 ops/s
Iteration  18: 19369555.806 ops/s
Iteration  19: 19412788.438 ops/s
Iteration  20: 19411023.793 ops/s
Iteration  21: 19369987.742 ops/s
Iteration  22: 19361863.800 ops/s
Iteration  23: 19368739.359 ops/s
Iteration  24: 19393625.225 ops/s
Iteration  25: 19423442.812 ops/s
Iteration  26: 19411907.149 ops/s
Iteration  27: 19382272.385 ops/s
Iteration  28: 19390424.222 ops/s
Iteration  29: 19390761.410 ops/s
Iteration  30: 19381902.702 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_detectWithIfNone":
  19388693.195 ±(99.9%) 15016.103 ops/s [Average]
  (min, avg, max) = (19334143.301, 19388693.195, 19423442.812), stdev = 22475.398
  CI (99.9%): [19373677.092, 19403709.298] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
ImmutableSubListTest._Benchmark.benchmark_detectWithIfNone  thrpt   30  19388693.195 ± 15016.103  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_distinct$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_distinct

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1794059.983 ops/s
# Warmup Iteration   2: 4363792.722 ops/s
# Warmup Iteration   3: 4098784.808 ops/s
# Warmup Iteration   4: 3933071.550 ops/s
# Warmup Iteration   5: 4381457.440 ops/s
# Warmup Iteration   6: 4374789.729 ops/s
# Warmup Iteration   7: 4378936.631 ops/s
# Warmup Iteration   8: 4378743.474 ops/s
# Warmup Iteration   9: 4371676.091 ops/s
# Warmup Iteration  10: 4374955.564 ops/s
# Warmup Iteration  11: 4372003.171 ops/s
# Warmup Iteration  12: 4382256.402 ops/s
# Warmup Iteration  13: 4378150.292 ops/s
# Warmup Iteration  14: 4375030.421 ops/s
# Warmup Iteration  15: 4383983.059 ops/s
# Warmup Iteration  16: 4379260.177 ops/s
# Warmup Iteration  17: 4378952.672 ops/s
# Warmup Iteration  18: 4370307.965 ops/s
# Warmup Iteration  19: 4372386.566 ops/s
# Warmup Iteration  20: 4390228.835 ops/s
# Warmup Iteration  21: 4377750.658 ops/s
# Warmup Iteration  22: 4377868.743 ops/s
# Warmup Iteration  23: 4383382.013 ops/s
# Warmup Iteration  24: 4375131.966 ops/s
# Warmup Iteration  25: 4378730.121 ops/s
# Warmup Iteration  26: 4380611.007 ops/s
# Warmup Iteration  27: 4379252.038 ops/s
# Warmup Iteration  28: 4384824.959 ops/s
# Warmup Iteration  29: 4362067.619 ops/s
# Warmup Iteration  30: 4367462.085 ops/s
Iteration   1: 4386318.299 ops/s
Iteration   2: 4389706.576 ops/s
Iteration   3: 4381809.549 ops/s
Iteration   4: 4375622.550 ops/s
Iteration   5: 4385234.411 ops/s
Iteration   6: 4387393.905 ops/s
Iteration   7: 4388803.410 ops/s
Iteration   8: 4381178.580 ops/s
Iteration   9: 4375776.191 ops/s
Iteration  10: 4379976.888 ops/s
Iteration  11: 4389015.460 ops/s
Iteration  12: 4384597.014 ops/s
Iteration  13: 4380584.722 ops/s
Iteration  14: 4354670.288 ops/s
Iteration  15: 4376490.103 ops/s
Iteration  16: 4381580.442 ops/s
Iteration  17: 4378911.071 ops/s
Iteration  18: 4374379.416 ops/s
Iteration  19: 4386325.901 ops/s
Iteration  20: 4370243.202 ops/s
Iteration  21: 4387345.418 ops/s
Iteration  22: 4378011.140 ops/s
Iteration  23: 4372712.259 ops/s
Iteration  24: 4366850.976 ops/s
Iteration  25: 4377784.856 ops/s
Iteration  26: 4385244.738 ops/s
Iteration  27: 4379092.790 ops/s
Iteration  28: 4366673.222 ops/s
Iteration  29: 4379994.741 ops/s
Iteration  30: 4389613.536 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_distinct":
  4379731.388 ±(99.9%) 5332.710 ops/s [Average]
  (min, avg, max) = (4354670.288, 4379731.388, 4389706.576), stdev = 7981.750
  CI (99.9%): [4374398.678, 4385064.099] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_distinct  thrpt   30  4379731.388 ± 5332.710  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_distinctBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_distinctBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4046793.231 ops/s
# Warmup Iteration   2: 8793536.101 ops/s
# Warmup Iteration   3: 8770025.436 ops/s
# Warmup Iteration   4: 7416322.741 ops/s
# Warmup Iteration   5: 8750878.896 ops/s
# Warmup Iteration   6: 8782538.446 ops/s
# Warmup Iteration   7: 8804425.452 ops/s
# Warmup Iteration   8: 8821640.269 ops/s
# Warmup Iteration   9: 8769555.102 ops/s
# Warmup Iteration  10: 8768274.572 ops/s
# Warmup Iteration  11: 8760615.664 ops/s
# Warmup Iteration  12: 8790541.769 ops/s
# Warmup Iteration  13: 8751353.580 ops/s
# Warmup Iteration  14: 8755159.033 ops/s
# Warmup Iteration  15: 8779711.842 ops/s
# Warmup Iteration  16: 8727056.632 ops/s
# Warmup Iteration  17: 8712941.593 ops/s
# Warmup Iteration  18: 8713725.252 ops/s
# Warmup Iteration  19: 8705341.067 ops/s
# Warmup Iteration  20: 8719168.378 ops/s
# Warmup Iteration  21: 8726615.628 ops/s
# Warmup Iteration  22: 8676494.544 ops/s
# Warmup Iteration  23: 8747482.978 ops/s
# Warmup Iteration  24: 8693079.281 ops/s
# Warmup Iteration  25: 8723599.715 ops/s
# Warmup Iteration  26: 8699517.279 ops/s
# Warmup Iteration  27: 8716380.076 ops/s
# Warmup Iteration  28: 8717744.689 ops/s
# Warmup Iteration  29: 8736963.072 ops/s
# Warmup Iteration  30: 8733185.547 ops/s
Iteration   1: 8691612.367 ops/s
Iteration   2: 8688134.507 ops/s
Iteration   3: 8687651.077 ops/s
Iteration   4: 8704870.530 ops/s
Iteration   5: 8728101.695 ops/s
Iteration   6: 8732296.285 ops/s
Iteration   7: 8744392.627 ops/s
Iteration   8: 8745958.456 ops/s
Iteration   9: 8739514.513 ops/s
Iteration  10: 8714224.270 ops/s
Iteration  11: 8648444.454 ops/s
Iteration  12: 8651773.370 ops/s
Iteration  13: 8698573.080 ops/s
Iteration  14: 8731705.592 ops/s
Iteration  15: 8667179.434 ops/s
Iteration  16: 8726357.030 ops/s
Iteration  17: 8677370.547 ops/s
Iteration  18: 8715824.242 ops/s
Iteration  19: 8708319.403 ops/s
Iteration  20: 8743734.869 ops/s
Iteration  21: 8716038.252 ops/s
Iteration  22: 8735010.872 ops/s
Iteration  23: 8709940.065 ops/s
Iteration  24: 8729110.358 ops/s
Iteration  25: 8724048.854 ops/s
Iteration  26: 8729987.578 ops/s
Iteration  27: 8717592.131 ops/s
Iteration  28: 8707751.293 ops/s
Iteration  29: 8681110.937 ops/s
Iteration  30: 8696510.510 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_distinctBy":
  8709771.307 ±(99.9%) 17700.586 ops/s [Average]
  (min, avg, max) = (8648444.454, 8709771.307, 8745958.456), stdev = 26493.405
  CI (99.9%): [8692070.721, 8727471.892] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
ImmutableSubListTest._Benchmark.benchmark_distinctBy  thrpt   30  8709771.307 ± 17700.586  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_distinctWithHashingStrategy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_distinctWithHashingStrategy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4041412.746 ops/s
# Warmup Iteration   2: 8764090.719 ops/s
# Warmup Iteration   3: 8663567.434 ops/s
# Warmup Iteration   4: 7365176.948 ops/s
# Warmup Iteration   5: 8684437.735 ops/s
# Warmup Iteration   6: 8697305.911 ops/s
# Warmup Iteration   7: 8676912.847 ops/s
# Warmup Iteration   8: 8671643.514 ops/s
# Warmup Iteration   9: 8713686.831 ops/s
# Warmup Iteration  10: 8663215.765 ops/s
# Warmup Iteration  11: 8674270.371 ops/s
# Warmup Iteration  12: 8571067.661 ops/s
# Warmup Iteration  13: 8715502.612 ops/s
# Warmup Iteration  14: 8706910.191 ops/s
# Warmup Iteration  15: 8674727.376 ops/s
# Warmup Iteration  16: 8718907.359 ops/s
# Warmup Iteration  17: 8628068.463 ops/s
# Warmup Iteration  18: 8658938.066 ops/s
# Warmup Iteration  19: 8642486.074 ops/s
# Warmup Iteration  20: 8648779.295 ops/s
# Warmup Iteration  21: 8623949.134 ops/s
# Warmup Iteration  22: 8639154.514 ops/s
# Warmup Iteration  23: 8501038.580 ops/s
# Warmup Iteration  24: 8660219.309 ops/s
# Warmup Iteration  25: 8670611.232 ops/s
# Warmup Iteration  26: 8651777.749 ops/s
# Warmup Iteration  27: 8628572.272 ops/s
# Warmup Iteration  28: 8637757.510 ops/s
# Warmup Iteration  29: 8631650.822 ops/s
# Warmup Iteration  30: 8631262.357 ops/s
Iteration   1: 8650326.107 ops/s
Iteration   2: 8640878.493 ops/s
Iteration   3: 8669871.844 ops/s
Iteration   4: 8629705.961 ops/s
Iteration   5: 8675592.682 ops/s
Iteration   6: 8680768.982 ops/s
Iteration   7: 8675425.289 ops/s
Iteration   8: 8664871.443 ops/s
Iteration   9: 8672652.703 ops/s
Iteration  10: 8652098.030 ops/s
Iteration  11: 8560315.677 ops/s
Iteration  12: 8617097.351 ops/s
Iteration  13: 8646183.825 ops/s
Iteration  14: 8642334.334 ops/s
Iteration  15: 8639102.033 ops/s
Iteration  16: 8649764.418 ops/s
Iteration  17: 8665447.376 ops/s
Iteration  18: 8669230.421 ops/s
Iteration  19: 8698304.839 ops/s
Iteration  20: 8648149.607 ops/s
Iteration  21: 8689944.752 ops/s
Iteration  22: 8672680.088 ops/s
Iteration  23: 8635437.747 ops/s
Iteration  24: 8638554.331 ops/s
Iteration  25: 8642112.709 ops/s
Iteration  26: 8645191.126 ops/s
Iteration  27: 8646261.817 ops/s
Iteration  28: 8621013.120 ops/s
Iteration  29: 8634957.763 ops/s
Iteration  30: 8636073.348 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_distinctWithHashingStrategy":
  8650344.941 ±(99.9%) 17523.280 ops/s [Average]
  (min, avg, max) = (8560315.677, 8650344.941, 8698304.839), stdev = 26228.022
  CI (99.9%): [8632821.661, 8667868.220] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
ImmutableSubListTest._Benchmark.benchmark_distinctWithHashingStrategy  thrpt   30  8650344.941 ± 17523.280  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_drop$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_drop

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 965179.212 ops/s
# Warmup Iteration   2: 1054538.269 ops/s
# Warmup Iteration   3: 1446266.703 ops/s
# Warmup Iteration   4: 1453116.000 ops/s
# Warmup Iteration   5: 1433318.588 ops/s
# Warmup Iteration   6: 1455408.412 ops/s
# Warmup Iteration   7: 1448903.450 ops/s
# Warmup Iteration   8: 1452010.882 ops/s
# Warmup Iteration   9: 1448693.614 ops/s
# Warmup Iteration  10: 1452008.293 ops/s
# Warmup Iteration  11: 1289317.172 ops/s
# Warmup Iteration  12: 1355382.906 ops/s
# Warmup Iteration  13: 1450957.330 ops/s
# Warmup Iteration  14: 1450075.804 ops/s
# Warmup Iteration  15: 1455788.882 ops/s
# Warmup Iteration  16: 1452813.868 ops/s
# Warmup Iteration  17: 1454659.738 ops/s
# Warmup Iteration  18: 1453975.330 ops/s
# Warmup Iteration  19: 1452212.214 ops/s
# Warmup Iteration  20: 1456470.152 ops/s
# Warmup Iteration  21: 1456177.351 ops/s
# Warmup Iteration  22: 1454673.765 ops/s
# Warmup Iteration  23: 1449812.511 ops/s
# Warmup Iteration  24: 1451032.754 ops/s
# Warmup Iteration  25: 1453207.051 ops/s
# Warmup Iteration  26: 1455878.178 ops/s
# Warmup Iteration  27: 1454467.627 ops/s
# Warmup Iteration  28: 1455970.394 ops/s
# Warmup Iteration  29: 1454111.012 ops/s
# Warmup Iteration  30: 1455787.948 ops/s
Iteration   1: 1452863.571 ops/s
Iteration   2: 1455007.930 ops/s
Iteration   3: 1454527.911 ops/s
Iteration   4: 1457478.867 ops/s
Iteration   5: 1455036.677 ops/s
Iteration   6: 1453595.713 ops/s
Iteration   7: 1455842.265 ops/s
Iteration   8: 1455230.616 ops/s
Iteration   9: 1453991.279 ops/s
Iteration  10: 1456159.787 ops/s
Iteration  11: 1457060.977 ops/s
Iteration  12: 1456437.753 ops/s
Iteration  13: 1452635.027 ops/s
Iteration  14: 1455261.812 ops/s
Iteration  15: 1450752.745 ops/s
Iteration  16: 1456142.516 ops/s
Iteration  17: 1454588.054 ops/s
Iteration  18: 1454136.387 ops/s
Iteration  19: 1455108.639 ops/s
Iteration  20: 1452636.817 ops/s
Iteration  21: 1455150.661 ops/s
Iteration  22: 1456343.946 ops/s
Iteration  23: 1455450.056 ops/s
Iteration  24: 1452841.117 ops/s
Iteration  25: 1453947.650 ops/s
Iteration  26: 1449222.827 ops/s
Iteration  27: 1452109.752 ops/s
Iteration  28: 1455090.033 ops/s
Iteration  29: 1456200.707 ops/s
Iteration  30: 1456954.255 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_drop":
  1454593.545 ±(99.9%) 1263.430 ops/s [Average]
  (min, avg, max) = (1449222.827, 1454593.545, 1457478.867), stdev = 1891.042
  CI (99.9%): [1453330.115, 1455856.974] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_drop  thrpt   30  1454593.545 ± 1263.430  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_dropWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_dropWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3767908.837 ops/s
# Warmup Iteration   2: 8199301.761 ops/s
# Warmup Iteration   3: 7985004.587 ops/s
# Warmup Iteration   4: 7353009.839 ops/s
# Warmup Iteration   5: 8366777.539 ops/s
# Warmup Iteration   6: 8345394.777 ops/s
# Warmup Iteration   7: 8359585.924 ops/s
# Warmup Iteration   8: 8370466.708 ops/s
# Warmup Iteration   9: 8338708.717 ops/s
# Warmup Iteration  10: 8353195.627 ops/s
# Warmup Iteration  11: 8362547.520 ops/s
# Warmup Iteration  12: 8360062.950 ops/s
# Warmup Iteration  13: 8347546.913 ops/s
# Warmup Iteration  14: 8363370.271 ops/s
# Warmup Iteration  15: 8342439.148 ops/s
# Warmup Iteration  16: 8344133.839 ops/s
# Warmup Iteration  17: 8343783.349 ops/s
# Warmup Iteration  18: 8354010.438 ops/s
# Warmup Iteration  19: 8343465.372 ops/s
# Warmup Iteration  20: 8360185.071 ops/s
# Warmup Iteration  21: 8352792.118 ops/s
# Warmup Iteration  22: 8355869.300 ops/s
# Warmup Iteration  23: 8345565.355 ops/s
# Warmup Iteration  24: 8344611.811 ops/s
# Warmup Iteration  25: 8353509.211 ops/s
# Warmup Iteration  26: 8341542.430 ops/s
# Warmup Iteration  27: 8337934.995 ops/s
# Warmup Iteration  28: 8342137.474 ops/s
# Warmup Iteration  29: 8340350.628 ops/s
# Warmup Iteration  30: 8323696.135 ops/s
Iteration   1: 8325754.359 ops/s
Iteration   2: 8318140.909 ops/s
Iteration   3: 8349733.212 ops/s
Iteration   4: 8344313.902 ops/s
Iteration   5: 8344124.063 ops/s
Iteration   6: 8342827.859 ops/s
Iteration   7: 8335056.095 ops/s
Iteration   8: 8338883.736 ops/s
Iteration   9: 8318050.180 ops/s
Iteration  10: 8338269.330 ops/s
Iteration  11: 8354265.239 ops/s
Iteration  12: 8318930.994 ops/s
Iteration  13: 8333025.858 ops/s
Iteration  14: 8356245.308 ops/s
Iteration  15: 8328507.803 ops/s
Iteration  16: 8328254.129 ops/s
Iteration  17: 8325707.487 ops/s
Iteration  18: 8351348.986 ops/s
Iteration  19: 8324292.169 ops/s
Iteration  20: 8350133.991 ops/s
Iteration  21: 8349267.868 ops/s
Iteration  22: 8346472.962 ops/s
Iteration  23: 8343077.432 ops/s
Iteration  24: 8342750.203 ops/s
Iteration  25: 8342833.773 ops/s
Iteration  26: 8344664.643 ops/s
Iteration  27: 8347578.154 ops/s
Iteration  28: 8333103.895 ops/s
Iteration  29: 8293590.209 ops/s
Iteration  30: 8334658.892 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_dropWhile":
  8336795.455 ±(99.9%) 9113.537 ops/s [Average]
  (min, avg, max) = (8293590.209, 8336795.455, 8356245.308), stdev = 13640.714
  CI (99.9%): [8327681.918, 8345908.992] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_dropWhile  thrpt   30  8336795.455 ± 9113.537  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_drop_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_drop_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 714170.406 ops/s
# Warmup Iteration   2: 762540.780 ops/s
# Warmup Iteration   3: 993139.337 ops/s
# Warmup Iteration   4: 991733.753 ops/s
# Warmup Iteration   5: 986784.989 ops/s
# Warmup Iteration   6: 993032.638 ops/s
# Warmup Iteration   7: 994312.020 ops/s
# Warmup Iteration   8: 989547.241 ops/s
# Warmup Iteration   9: 988819.358 ops/s
# Warmup Iteration  10: 993525.769 ops/s
# Warmup Iteration  11: 913728.519 ops/s
# Warmup Iteration  12: 926163.207 ops/s
# Warmup Iteration  13: 994900.810 ops/s
# Warmup Iteration  14: 996994.674 ops/s
# Warmup Iteration  15: 994339.351 ops/s
# Warmup Iteration  16: 995868.666 ops/s
# Warmup Iteration  17: 1050010.035 ops/s
# Warmup Iteration  18: 1038628.381 ops/s
# Warmup Iteration  19: 1053163.593 ops/s
# Warmup Iteration  20: 1052978.861 ops/s
# Warmup Iteration  21: 1054456.377 ops/s
# Warmup Iteration  22: 1053775.245 ops/s
# Warmup Iteration  23: 1054779.836 ops/s
# Warmup Iteration  24: 1056517.154 ops/s
# Warmup Iteration  25: 1054590.616 ops/s
# Warmup Iteration  26: 1056549.072 ops/s
# Warmup Iteration  27: 1053098.370 ops/s
# Warmup Iteration  28: 1054354.149 ops/s
# Warmup Iteration  29: 1053295.062 ops/s
# Warmup Iteration  30: 1050657.994 ops/s
Iteration   1: 1053702.387 ops/s
Iteration   2: 1056895.868 ops/s
Iteration   3: 1053398.443 ops/s
Iteration   4: 1056247.431 ops/s
Iteration   5: 1054865.817 ops/s
Iteration   6: 1055341.607 ops/s
Iteration   7: 1053275.192 ops/s
Iteration   8: 1051480.825 ops/s
Iteration   9: 1053281.896 ops/s
Iteration  10: 1053789.522 ops/s
Iteration  11: 1048271.240 ops/s
Iteration  12: 1051321.012 ops/s
Iteration  13: 1048176.941 ops/s
Iteration  14: 1052984.512 ops/s
Iteration  15: 1052139.327 ops/s
Iteration  16: 1053557.785 ops/s
Iteration  17: 1044750.197 ops/s
Iteration  18: 1048415.275 ops/s
Iteration  19: 1054429.414 ops/s
Iteration  20: 1053849.415 ops/s
Iteration  21: 1050786.966 ops/s
Iteration  22: 1051986.637 ops/s
Iteration  23: 1054569.859 ops/s
Iteration  24: 1049249.834 ops/s
Iteration  25: 1054889.900 ops/s
Iteration  26: 1053535.710 ops/s
Iteration  27: 1053367.724 ops/s
Iteration  28: 1049293.968 ops/s
Iteration  29: 1052167.153 ops/s
Iteration  30: 1054326.541 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_drop_throws":
  1052478.280 ±(99.9%) 1815.910 ops/s [Average]
  (min, avg, max) = (1044750.197, 1052478.280, 1056895.868), stdev = 2717.969
  CI (99.9%): [1050662.370, 1054294.190] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_drop_throws  thrpt   30  1052478.280 ± 1815.910  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_each$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_each

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9870396.360 ops/s
# Warmup Iteration   2: 20260383.048 ops/s
# Warmup Iteration   3: 17385991.088 ops/s
# Warmup Iteration   4: 20493105.031 ops/s
# Warmup Iteration   5: 20543556.639 ops/s
# Warmup Iteration   6: 20500344.609 ops/s
# Warmup Iteration   7: 20461210.087 ops/s
# Warmup Iteration   8: 20510615.569 ops/s
# Warmup Iteration   9: 20558482.129 ops/s
# Warmup Iteration  10: 20534081.159 ops/s
# Warmup Iteration  11: 20530418.751 ops/s
# Warmup Iteration  12: 20499028.398 ops/s
# Warmup Iteration  13: 20493323.539 ops/s
# Warmup Iteration  14: 20489256.185 ops/s
# Warmup Iteration  15: 20487284.165 ops/s
# Warmup Iteration  16: 20513949.044 ops/s
# Warmup Iteration  17: 20528730.747 ops/s
# Warmup Iteration  18: 20482561.509 ops/s
# Warmup Iteration  19: 20508317.111 ops/s
# Warmup Iteration  20: 20513205.864 ops/s
# Warmup Iteration  21: 20481830.690 ops/s
# Warmup Iteration  22: 20475864.477 ops/s
# Warmup Iteration  23: 20493600.170 ops/s
# Warmup Iteration  24: 20496268.344 ops/s
# Warmup Iteration  25: 20512339.858 ops/s
# Warmup Iteration  26: 20501499.232 ops/s
# Warmup Iteration  27: 20495424.973 ops/s
# Warmup Iteration  28: 20505262.582 ops/s
# Warmup Iteration  29: 20521119.358 ops/s
# Warmup Iteration  30: 20515285.072 ops/s
Iteration   1: 20535089.906 ops/s
Iteration   2: 20531362.126 ops/s
Iteration   3: 20528409.015 ops/s
Iteration   4: 20570192.854 ops/s
Iteration   5: 20583929.100 ops/s
Iteration   6: 20525146.355 ops/s
Iteration   7: 20465894.766 ops/s
Iteration   8: 20507138.453 ops/s
Iteration   9: 20482795.406 ops/s
Iteration  10: 20518600.567 ops/s
Iteration  11: 20528630.086 ops/s
Iteration  12: 20534504.443 ops/s
Iteration  13: 20490897.204 ops/s
Iteration  14: 20530179.188 ops/s
Iteration  15: 20556940.762 ops/s
Iteration  16: 20485137.604 ops/s
Iteration  17: 20480407.112 ops/s
Iteration  18: 20513561.624 ops/s
Iteration  19: 20476387.881 ops/s
Iteration  20: 20521641.399 ops/s
Iteration  21: 20538600.237 ops/s
Iteration  22: 20515162.762 ops/s
Iteration  23: 20489553.499 ops/s
Iteration  24: 20513783.432 ops/s
Iteration  25: 20571423.131 ops/s
Iteration  26: 20524079.065 ops/s
Iteration  27: 20546948.537 ops/s
Iteration  28: 20458205.662 ops/s
Iteration  29: 20508872.606 ops/s
Iteration  30: 20530531.100 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_each":
  20518800.196 ±(99.9%) 20611.555 ops/s [Average]
  (min, avg, max) = (20458205.662, 20518800.196, 20583929.100), stdev = 30850.408
  CI (99.9%): [20498188.641, 20539411.751] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt         Score       Error  Units
ImmutableSubListTest._Benchmark.benchmark_each  thrpt   30  20518800.196 ± 20611.555  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_equalsAndHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_equalsAndHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 22082.653 ops/s
# Warmup Iteration   2: 29288.533 ops/s
# Warmup Iteration   3: 43006.560 ops/s
# Warmup Iteration   4: 42591.260 ops/s
# Warmup Iteration   5: 43019.155 ops/s
# Warmup Iteration   6: 43084.250 ops/s
# Warmup Iteration   7: 43088.784 ops/s
# Warmup Iteration   8: 43035.114 ops/s
# Warmup Iteration   9: 43138.501 ops/s
# Warmup Iteration  10: 39021.810 ops/s
# Warmup Iteration  11: 40545.091 ops/s
# Warmup Iteration  12: 43340.486 ops/s
# Warmup Iteration  13: 43276.738 ops/s
# Warmup Iteration  14: 43424.968 ops/s
# Warmup Iteration  15: 43428.476 ops/s
# Warmup Iteration  16: 43452.947 ops/s
# Warmup Iteration  17: 43410.455 ops/s
# Warmup Iteration  18: 43342.027 ops/s
# Warmup Iteration  19: 43331.604 ops/s
# Warmup Iteration  20: 43307.983 ops/s
# Warmup Iteration  21: 43258.848 ops/s
# Warmup Iteration  22: 43402.943 ops/s
# Warmup Iteration  23: 43346.175 ops/s
# Warmup Iteration  24: 43128.409 ops/s
# Warmup Iteration  25: 43252.762 ops/s
# Warmup Iteration  26: 43248.877 ops/s
# Warmup Iteration  27: 43224.990 ops/s
# Warmup Iteration  28: 43283.473 ops/s
# Warmup Iteration  29: 43350.241 ops/s
# Warmup Iteration  30: 43445.850 ops/s
Iteration   1: 43463.570 ops/s
Iteration   2: 43379.559 ops/s
Iteration   3: 43453.908 ops/s
Iteration   4: 43442.991 ops/s
Iteration   5: 43338.059 ops/s
Iteration   6: 43372.458 ops/s
Iteration   7: 43417.921 ops/s
Iteration   8: 43267.661 ops/s
Iteration   9: 43273.479 ops/s
Iteration  10: 43279.824 ops/s
Iteration  11: 43265.987 ops/s
Iteration  12: 43295.322 ops/s
Iteration  13: 43380.429 ops/s
Iteration  14: 43345.705 ops/s
Iteration  15: 43061.702 ops/s
Iteration  16: 43272.966 ops/s
Iteration  17: 43276.933 ops/s
Iteration  18: 43188.983 ops/s
Iteration  19: 43336.336 ops/s
Iteration  20: 43272.418 ops/s
Iteration  21: 43397.141 ops/s
Iteration  22: 43314.274 ops/s
Iteration  23: 43407.080 ops/s
Iteration  24: 43403.132 ops/s
Iteration  25: 43313.081 ops/s
Iteration  26: 43411.581 ops/s
Iteration  27: 43431.251 ops/s
Iteration  28: 43399.549 ops/s
Iteration  29: 43197.830 ops/s
Iteration  30: 43281.939 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_equalsAndHashCode":
  43331.436 ±(99.9%) 60.116 ops/s [Average]
  (min, avg, max) = (43061.702, 43331.436, 43463.570), stdev = 89.979
  CI (99.9%): [43271.319, 43391.552] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt      Score    Error  Units
ImmutableSubListTest._Benchmark.benchmark_equalsAndHashCode  thrpt   30  43331.436 ± 60.116  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_flatCollect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_flatCollect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1236959.556 ops/s
# Warmup Iteration   2: 3011576.877 ops/s
# Warmup Iteration   3: 3002781.094 ops/s
# Warmup Iteration   4: 2483100.371 ops/s
# Warmup Iteration   5: 3006947.976 ops/s
# Warmup Iteration   6: 3009173.417 ops/s
# Warmup Iteration   7: 3012263.954 ops/s
# Warmup Iteration   8: 3004020.768 ops/s
# Warmup Iteration   9: 3007248.275 ops/s
# Warmup Iteration  10: 3006618.077 ops/s
# Warmup Iteration  11: 2995777.815 ops/s
# Warmup Iteration  12: 3008288.054 ops/s
# Warmup Iteration  13: 3009536.348 ops/s
# Warmup Iteration  14: 3003743.657 ops/s
# Warmup Iteration  15: 2997837.587 ops/s
# Warmup Iteration  16: 3006973.223 ops/s
# Warmup Iteration  17: 3003379.353 ops/s
# Warmup Iteration  18: 3002244.750 ops/s
# Warmup Iteration  19: 2998107.151 ops/s
# Warmup Iteration  20: 3005015.998 ops/s
# Warmup Iteration  21: 3002771.177 ops/s
# Warmup Iteration  22: 3003334.296 ops/s
# Warmup Iteration  23: 3004340.542 ops/s
# Warmup Iteration  24: 3004144.082 ops/s
# Warmup Iteration  25: 3000950.809 ops/s
# Warmup Iteration  26: 2989199.756 ops/s
# Warmup Iteration  27: 3005112.725 ops/s
# Warmup Iteration  28: 3006331.474 ops/s
# Warmup Iteration  29: 3002770.696 ops/s
# Warmup Iteration  30: 2999669.274 ops/s
Iteration   1: 2991023.294 ops/s
Iteration   2: 3009374.861 ops/s
Iteration   3: 3003586.304 ops/s
Iteration   4: 3000155.787 ops/s
Iteration   5: 3004256.609 ops/s
Iteration   6: 3000265.322 ops/s
Iteration   7: 3003006.882 ops/s
Iteration   8: 3007005.353 ops/s
Iteration   9: 3005911.872 ops/s
Iteration  10: 3010553.160 ops/s
Iteration  11: 3008323.562 ops/s
Iteration  12: 3004892.607 ops/s
Iteration  13: 3007065.278 ops/s
Iteration  14: 3008104.160 ops/s
Iteration  15: 3004135.544 ops/s
Iteration  16: 3010743.900 ops/s
Iteration  17: 3003994.993 ops/s
Iteration  18: 3010595.414 ops/s
Iteration  19: 2999765.713 ops/s
Iteration  20: 3002088.488 ops/s
Iteration  21: 3008316.166 ops/s
Iteration  22: 3001907.136 ops/s
Iteration  23: 3012778.911 ops/s
Iteration  24: 2996541.626 ops/s
Iteration  25: 2998220.504 ops/s
Iteration  26: 3006490.745 ops/s
Iteration  27: 3007385.080 ops/s
Iteration  28: 3003238.908 ops/s
Iteration  29: 3004020.315 ops/s
Iteration  30: 3008021.230 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_flatCollect":
  3004725.657 ±(99.9%) 3155.507 ops/s [Average]
  (min, avg, max) = (2991023.294, 3004725.657, 3012778.911), stdev = 4723.015
  CI (99.9%): [3001570.150, 3007881.165] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_flatCollect  thrpt   30  3004725.657 ± 3155.507  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_flatCollectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_flatCollectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1185471.514 ops/s
# Warmup Iteration   2: 2905449.187 ops/s
# Warmup Iteration   3: 2837936.915 ops/s
# Warmup Iteration   4: 2378064.117 ops/s
# Warmup Iteration   5: 2861472.876 ops/s
# Warmup Iteration   6: 2854636.259 ops/s
# Warmup Iteration   7: 2858372.047 ops/s
# Warmup Iteration   8: 2858192.972 ops/s
# Warmup Iteration   9: 2857881.809 ops/s
# Warmup Iteration  10: 2854944.774 ops/s
# Warmup Iteration  11: 2852972.448 ops/s
# Warmup Iteration  12: 2850658.656 ops/s
# Warmup Iteration  13: 2858145.521 ops/s
# Warmup Iteration  14: 2855082.872 ops/s
# Warmup Iteration  15: 2856047.836 ops/s
# Warmup Iteration  16: 2862029.084 ops/s
# Warmup Iteration  17: 2857909.229 ops/s
# Warmup Iteration  18: 2855670.315 ops/s
# Warmup Iteration  19: 2854440.043 ops/s
# Warmup Iteration  20: 2848442.102 ops/s
# Warmup Iteration  21: 2851996.092 ops/s
# Warmup Iteration  22: 2851591.880 ops/s
# Warmup Iteration  23: 2856077.118 ops/s
# Warmup Iteration  24: 2842880.321 ops/s
# Warmup Iteration  25: 2842852.995 ops/s
# Warmup Iteration  26: 2852113.638 ops/s
# Warmup Iteration  27: 2850498.414 ops/s
# Warmup Iteration  28: 2850585.117 ops/s
# Warmup Iteration  29: 2847401.202 ops/s
# Warmup Iteration  30: 2845998.997 ops/s
Iteration   1: 2853571.429 ops/s
Iteration   2: 2857084.445 ops/s
Iteration   3: 2855706.479 ops/s
Iteration   4: 2852749.631 ops/s
Iteration   5: 2849748.280 ops/s
Iteration   6: 2847507.230 ops/s
Iteration   7: 2850262.151 ops/s
Iteration   8: 2852987.474 ops/s
Iteration   9: 2838367.433 ops/s
Iteration  10: 2831990.300 ops/s
Iteration  11: 2844094.761 ops/s
Iteration  12: 2850652.242 ops/s
Iteration  13: 2853233.022 ops/s
Iteration  14: 2855176.192 ops/s
Iteration  15: 2850532.074 ops/s
Iteration  16: 2857675.191 ops/s
Iteration  17: 2853776.081 ops/s
Iteration  18: 2853184.712 ops/s
Iteration  19: 2845693.717 ops/s
Iteration  20: 2855748.626 ops/s
Iteration  21: 2851971.053 ops/s
Iteration  22: 2850136.328 ops/s
Iteration  23: 2856876.329 ops/s
Iteration  24: 2855692.693 ops/s
Iteration  25: 2860481.880 ops/s
Iteration  26: 2858838.617 ops/s
Iteration  27: 2853507.803 ops/s
Iteration  28: 2846360.806 ops/s
Iteration  29: 2857306.714 ops/s
Iteration  30: 2851972.774 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_flatCollectWith":
  2851762.882 ±(99.9%) 4014.266 ops/s [Average]
  (min, avg, max) = (2831990.300, 2851762.882, 2860481.880), stdev = 6008.365
  CI (99.9%): [2847748.616, 2855777.148] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_flatCollectWith  thrpt   30  2851762.882 ± 4014.266  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_flatCollectWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_flatCollectWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1646444.401 ops/s
# Warmup Iteration   2: 4028546.449 ops/s
# Warmup Iteration   3: 3907502.297 ops/s
# Warmup Iteration   4: 3558405.212 ops/s
# Warmup Iteration   5: 4098159.840 ops/s
# Warmup Iteration   6: 4103804.947 ops/s
# Warmup Iteration   7: 4105580.630 ops/s
# Warmup Iteration   8: 4075415.549 ops/s
# Warmup Iteration   9: 4096937.180 ops/s
# Warmup Iteration  10: 4093074.169 ops/s
# Warmup Iteration  11: 4099353.885 ops/s
# Warmup Iteration  12: 4093624.672 ops/s
# Warmup Iteration  13: 4094076.316 ops/s
# Warmup Iteration  14: 4088379.701 ops/s
# Warmup Iteration  15: 4106410.589 ops/s
# Warmup Iteration  16: 4099855.963 ops/s
# Warmup Iteration  17: 4100885.426 ops/s
# Warmup Iteration  18: 4095939.460 ops/s
# Warmup Iteration  19: 4101783.745 ops/s
# Warmup Iteration  20: 4101189.970 ops/s
# Warmup Iteration  21: 4107079.352 ops/s
# Warmup Iteration  22: 4101323.045 ops/s
# Warmup Iteration  23: 4102707.501 ops/s
# Warmup Iteration  24: 4102164.755 ops/s
# Warmup Iteration  25: 4101065.848 ops/s
# Warmup Iteration  26: 4099565.724 ops/s
# Warmup Iteration  27: 4081234.743 ops/s
# Warmup Iteration  28: 4089486.073 ops/s
# Warmup Iteration  29: 4082373.417 ops/s
# Warmup Iteration  30: 4054730.270 ops/s
Iteration   1: 4069534.207 ops/s
Iteration   2: 4104630.211 ops/s
Iteration   3: 4073680.805 ops/s
Iteration   4: 4101134.121 ops/s
Iteration   5: 4094997.752 ops/s
Iteration   6: 4110156.294 ops/s
Iteration   7: 4078895.621 ops/s
Iteration   8: 4104089.717 ops/s
Iteration   9: 4096906.407 ops/s
Iteration  10: 4111623.118 ops/s
Iteration  11: 4108588.112 ops/s
Iteration  12: 4099402.938 ops/s
Iteration  13: 4093490.752 ops/s
Iteration  14: 4098282.374 ops/s
Iteration  15: 4090339.635 ops/s
Iteration  16: 4109791.068 ops/s
Iteration  17: 4095085.699 ops/s
Iteration  18: 4111594.117 ops/s
Iteration  19: 4100960.046 ops/s
Iteration  20: 4101782.574 ops/s
Iteration  21: 4103521.722 ops/s
Iteration  22: 4101502.734 ops/s
Iteration  23: 4108141.051 ops/s
Iteration  24: 4104400.472 ops/s
Iteration  25: 4099191.659 ops/s
Iteration  26: 4093677.297 ops/s
Iteration  27: 4101297.299 ops/s
Iteration  28: 4105067.745 ops/s
Iteration  29: 4098760.987 ops/s
Iteration  30: 4106455.593 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_flatCollectWithTarget":
  4099232.738 ±(99.9%) 6844.646 ops/s [Average]
  (min, avg, max) = (4069534.207, 4099232.738, 4111623.118), stdev = 10244.745
  CI (99.9%): [4092388.091, 4106077.384] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_flatCollectWithTarget  thrpt   30  4099232.738 ± 6844.646  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9928771.168 ops/s
# Warmup Iteration   2: 20535647.750 ops/s
# Warmup Iteration   3: 17440399.802 ops/s
# Warmup Iteration   4: 20629227.902 ops/s
# Warmup Iteration   5: 20619760.181 ops/s
# Warmup Iteration   6: 20610484.838 ops/s
# Warmup Iteration   7: 20586437.777 ops/s
# Warmup Iteration   8: 20568329.235 ops/s
# Warmup Iteration   9: 20640216.633 ops/s
# Warmup Iteration  10: 20604528.554 ops/s
# Warmup Iteration  11: 20639086.454 ops/s
# Warmup Iteration  12: 20584259.329 ops/s
# Warmup Iteration  13: 20588468.820 ops/s
# Warmup Iteration  14: 20662032.469 ops/s
# Warmup Iteration  15: 20579202.012 ops/s
# Warmup Iteration  16: 20604141.833 ops/s
# Warmup Iteration  17: 20679605.064 ops/s
# Warmup Iteration  18: 20627152.434 ops/s
# Warmup Iteration  19: 20613400.977 ops/s
# Warmup Iteration  20: 20625477.272 ops/s
# Warmup Iteration  21: 20586540.493 ops/s
# Warmup Iteration  22: 20612602.190 ops/s
# Warmup Iteration  23: 20598814.929 ops/s
# Warmup Iteration  24: 20632843.094 ops/s
# Warmup Iteration  25: 20614104.329 ops/s
# Warmup Iteration  26: 20616071.349 ops/s
# Warmup Iteration  27: 20623063.735 ops/s
# Warmup Iteration  28: 20576578.902 ops/s
# Warmup Iteration  29: 20608801.442 ops/s
# Warmup Iteration  30: 20569467.066 ops/s
Iteration   1: 20658041.660 ops/s
Iteration   2: 20547350.241 ops/s
Iteration   3: 20665628.201 ops/s
Iteration   4: 20644918.089 ops/s
Iteration   5: 20602368.597 ops/s
Iteration   6: 20631097.075 ops/s
Iteration   7: 20610274.523 ops/s
Iteration   8: 20577144.109 ops/s
Iteration   9: 20611832.576 ops/s
Iteration  10: 20612807.613 ops/s
Iteration  11: 20605008.221 ops/s
Iteration  12: 20679677.527 ops/s
Iteration  13: 20704389.192 ops/s
Iteration  14: 20636572.000 ops/s
Iteration  15: 20599635.579 ops/s
Iteration  16: 20618522.904 ops/s
Iteration  17: 20634444.094 ops/s
Iteration  18: 20650064.700 ops/s
Iteration  19: 20574925.806 ops/s
Iteration  20: 20576482.835 ops/s
Iteration  21: 20592051.596 ops/s
Iteration  22: 20666395.315 ops/s
Iteration  23: 20641802.845 ops/s
Iteration  24: 20599972.489 ops/s
Iteration  25: 20682381.803 ops/s
Iteration  26: 20644270.531 ops/s
Iteration  27: 20601008.450 ops/s
Iteration  28: 20645729.217 ops/s
Iteration  29: 20635158.688 ops/s
Iteration  30: 20591470.643 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_forEach":
  20624714.237 ±(99.9%) 24260.787 ops/s [Average]
  (min, avg, max) = (20547350.241, 20624714.237, 20704389.192), stdev = 36312.407
  CI (99.9%): [20600453.450, 20648975.025] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score       Error  Units
ImmutableSubListTest._Benchmark.benchmark_forEach  thrpt   30  20624714.237 ± 24260.787  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_forEachFromTo$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_forEachFromTo

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 286503.595 ops/s
# Warmup Iteration   2: 308600.047 ops/s
# Warmup Iteration   3: 366733.733 ops/s
# Warmup Iteration   4: 388550.164 ops/s
# Warmup Iteration   5: 390107.783 ops/s
# Warmup Iteration   6: 387600.927 ops/s
# Warmup Iteration   7: 389887.155 ops/s
# Warmup Iteration   8: 389693.495 ops/s
# Warmup Iteration   9: 389714.338 ops/s
# Warmup Iteration  10: 389335.794 ops/s
# Warmup Iteration  11: 388268.905 ops/s
# Warmup Iteration  12: 388839.361 ops/s
# Warmup Iteration  13: 378393.820 ops/s
# Warmup Iteration  14: 341558.907 ops/s
# Warmup Iteration  15: 389316.290 ops/s
# Warmup Iteration  16: 388455.892 ops/s
# Warmup Iteration  17: 409546.658 ops/s
# Warmup Iteration  18: 408339.526 ops/s
# Warmup Iteration  19: 407664.212 ops/s
# Warmup Iteration  20: 408639.356 ops/s
# Warmup Iteration  21: 408759.657 ops/s
# Warmup Iteration  22: 408732.275 ops/s
# Warmup Iteration  23: 408683.318 ops/s
# Warmup Iteration  24: 409267.010 ops/s
# Warmup Iteration  25: 408397.513 ops/s
# Warmup Iteration  26: 409527.633 ops/s
# Warmup Iteration  27: 409077.438 ops/s
# Warmup Iteration  28: 408968.691 ops/s
# Warmup Iteration  29: 408911.800 ops/s
# Warmup Iteration  30: 407844.455 ops/s
Iteration   1: 408896.778 ops/s
Iteration   2: 408568.937 ops/s
Iteration   3: 408666.372 ops/s
Iteration   4: 405961.407 ops/s
Iteration   5: 408570.987 ops/s
Iteration   6: 408937.549 ops/s
Iteration   7: 408301.874 ops/s
Iteration   8: 408348.141 ops/s
Iteration   9: 407255.272 ops/s
Iteration  10: 409242.705 ops/s
Iteration  11: 408566.619 ops/s
Iteration  12: 408077.291 ops/s
Iteration  13: 407191.097 ops/s
Iteration  14: 408647.018 ops/s
Iteration  15: 408038.309 ops/s
Iteration  16: 409811.066 ops/s
Iteration  17: 409381.015 ops/s
Iteration  18: 408274.718 ops/s
Iteration  19: 408773.191 ops/s
Iteration  20: 408649.337 ops/s
Iteration  21: 408425.144 ops/s
Iteration  22: 408168.388 ops/s
Iteration  23: 409122.517 ops/s
Iteration  24: 409172.055 ops/s
Iteration  25: 408392.980 ops/s
Iteration  26: 408011.138 ops/s
Iteration  27: 409024.446 ops/s
Iteration  28: 408507.564 ops/s
Iteration  29: 409149.572 ops/s
Iteration  30: 408141.365 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_forEachFromTo":
  408475.828 ±(99.9%) 492.859 ops/s [Average]
  (min, avg, max) = (405961.407, 408475.828, 409811.066), stdev = 737.688
  CI (99.9%): [407982.970, 408968.687] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score     Error  Units
ImmutableSubListTest._Benchmark.benchmark_forEachFromTo  thrpt   30  408475.828 ± 492.859  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_forEachWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_forEachWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5341689.925 ops/s
# Warmup Iteration   2: 11029571.657 ops/s
# Warmup Iteration   3: 11325984.055 ops/s
# Warmup Iteration   4: 9571974.546 ops/s
# Warmup Iteration   5: 11329763.047 ops/s
# Warmup Iteration   6: 11322049.876 ops/s
# Warmup Iteration   7: 11291838.427 ops/s
# Warmup Iteration   8: 11326613.632 ops/s
# Warmup Iteration   9: 11353498.508 ops/s
# Warmup Iteration  10: 11310032.797 ops/s
# Warmup Iteration  11: 11341075.459 ops/s
# Warmup Iteration  12: 11326062.211 ops/s
# Warmup Iteration  13: 11342397.582 ops/s
# Warmup Iteration  14: 11338194.342 ops/s
# Warmup Iteration  15: 11342806.536 ops/s
# Warmup Iteration  16: 11341221.190 ops/s
# Warmup Iteration  17: 11325838.736 ops/s
# Warmup Iteration  18: 11332083.353 ops/s
# Warmup Iteration  19: 11344968.333 ops/s
# Warmup Iteration  20: 11360909.931 ops/s
# Warmup Iteration  21: 11335856.951 ops/s
# Warmup Iteration  22: 11321070.681 ops/s
# Warmup Iteration  23: 11326464.512 ops/s
# Warmup Iteration  24: 11336824.829 ops/s
# Warmup Iteration  25: 11340640.417 ops/s
# Warmup Iteration  26: 11304081.698 ops/s
# Warmup Iteration  27: 11326233.895 ops/s
# Warmup Iteration  28: 11345447.931 ops/s
# Warmup Iteration  29: 11338346.213 ops/s
# Warmup Iteration  30: 11317825.858 ops/s
Iteration   1: 11303874.426 ops/s
Iteration   2: 11350279.351 ops/s
Iteration   3: 11338077.006 ops/s
Iteration   4: 11344969.907 ops/s
Iteration   5: 11356940.673 ops/s
Iteration   6: 11349043.395 ops/s
Iteration   7: 11329963.860 ops/s
Iteration   8: 11303830.356 ops/s
Iteration   9: 11299667.825 ops/s
Iteration  10: 11331708.626 ops/s
Iteration  11: 11337566.413 ops/s
Iteration  12: 11325726.329 ops/s
Iteration  13: 11352853.293 ops/s
Iteration  14: 11337856.047 ops/s
Iteration  15: 11364500.713 ops/s
Iteration  16: 11341214.827 ops/s
Iteration  17: 11346776.997 ops/s
Iteration  18: 11321287.407 ops/s
Iteration  19: 11342089.581 ops/s
Iteration  20: 11348640.082 ops/s
Iteration  21: 11357585.151 ops/s
Iteration  22: 11341269.201 ops/s
Iteration  23: 11341174.589 ops/s
Iteration  24: 11323525.765 ops/s
Iteration  25: 11325548.712 ops/s
Iteration  26: 11323879.813 ops/s
Iteration  27: 11322139.149 ops/s
Iteration  28: 11326391.747 ops/s
Iteration  29: 11334070.976 ops/s
Iteration  30: 11324551.079 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_forEachWith":
  11334900.110 ±(99.9%) 10685.988 ops/s [Average]
  (min, avg, max) = (11299667.825, 11334900.110, 11364500.713), stdev = 15994.285
  CI (99.9%): [11324214.122, 11345586.098] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score       Error  Units
ImmutableSubListTest._Benchmark.benchmark_forEachWith  thrpt   30  11334900.110 ± 10685.988  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_forEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_forEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7328042.552 ops/s
# Warmup Iteration   2: 16233972.363 ops/s
# Warmup Iteration   3: 16317043.927 ops/s
# Warmup Iteration   4: 13749804.066 ops/s
# Warmup Iteration   5: 16353865.715 ops/s
# Warmup Iteration   6: 16341497.923 ops/s
# Warmup Iteration   7: 16360521.092 ops/s
# Warmup Iteration   8: 16309870.078 ops/s
# Warmup Iteration   9: 16321580.005 ops/s
# Warmup Iteration  10: 16289419.390 ops/s
# Warmup Iteration  11: 16327170.718 ops/s
# Warmup Iteration  12: 16317863.959 ops/s
# Warmup Iteration  13: 16349939.103 ops/s
# Warmup Iteration  14: 16320216.284 ops/s
# Warmup Iteration  15: 16284462.554 ops/s
# Warmup Iteration  16: 16335510.018 ops/s
# Warmup Iteration  17: 16333684.670 ops/s
# Warmup Iteration  18: 16296335.987 ops/s
# Warmup Iteration  19: 16305402.355 ops/s
# Warmup Iteration  20: 16303081.374 ops/s
# Warmup Iteration  21: 16330093.284 ops/s
# Warmup Iteration  22: 16321362.338 ops/s
# Warmup Iteration  23: 16341420.914 ops/s
# Warmup Iteration  24: 16339858.427 ops/s
# Warmup Iteration  25: 16340624.377 ops/s
# Warmup Iteration  26: 16282435.410 ops/s
# Warmup Iteration  27: 16280910.870 ops/s
# Warmup Iteration  28: 16410643.443 ops/s
# Warmup Iteration  29: 16345767.249 ops/s
# Warmup Iteration  30: 16382555.398 ops/s
Iteration   1: 16306648.589 ops/s
Iteration   2: 16303376.850 ops/s
Iteration   3: 16302331.748 ops/s
Iteration   4: 16317746.946 ops/s
Iteration   5: 16336005.823 ops/s
Iteration   6: 16333201.312 ops/s
Iteration   7: 16336689.729 ops/s
Iteration   8: 16370990.712 ops/s
Iteration   9: 16309490.517 ops/s
Iteration  10: 16298539.858 ops/s
Iteration  11: 16324752.474 ops/s
Iteration  12: 16300984.784 ops/s
Iteration  13: 16356751.792 ops/s
Iteration  14: 16323575.315 ops/s
Iteration  15: 16369880.176 ops/s
Iteration  16: 16369473.971 ops/s
Iteration  17: 16342308.719 ops/s
Iteration  18: 16336046.508 ops/s
Iteration  19: 16336362.246 ops/s
Iteration  20: 16341283.342 ops/s
Iteration  21: 16311997.919 ops/s
Iteration  22: 16300301.293 ops/s
Iteration  23: 16349995.777 ops/s
Iteration  24: 16350252.172 ops/s
Iteration  25: 16344153.498 ops/s
Iteration  26: 16253939.860 ops/s
Iteration  27: 16321434.208 ops/s
Iteration  28: 16339917.897 ops/s
Iteration  29: 16355665.387 ops/s
Iteration  30: 16363034.228 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_forEachWithIndex":
  16330237.788 ±(99.9%) 17721.750 ops/s [Average]
  (min, avg, max) = (16253939.860, 16330237.788, 16370990.712), stdev = 26525.084
  CI (99.9%): [16312516.038, 16347959.539] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
ImmutableSubListTest._Benchmark.benchmark_forEachWithIndex  thrpt   30  16330237.788 ± 17721.750  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_forEachWithIndexFromTo$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_forEachWithIndexFromTo

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 280893.147 ops/s
# Warmup Iteration   2: 304473.979 ops/s
# Warmup Iteration   3: 363565.067 ops/s
# Warmup Iteration   4: 385903.559 ops/s
# Warmup Iteration   5: 386864.737 ops/s
# Warmup Iteration   6: 384513.039 ops/s
# Warmup Iteration   7: 387433.988 ops/s
# Warmup Iteration   8: 386336.293 ops/s
# Warmup Iteration   9: 386404.685 ops/s
# Warmup Iteration  10: 385645.738 ops/s
# Warmup Iteration  11: 386088.865 ops/s
# Warmup Iteration  12: 386374.616 ops/s
# Warmup Iteration  13: 363650.229 ops/s
# Warmup Iteration  14: 350353.872 ops/s
# Warmup Iteration  15: 386581.261 ops/s
# Warmup Iteration  16: 385452.158 ops/s
# Warmup Iteration  17: 404713.602 ops/s
# Warmup Iteration  18: 403968.053 ops/s
# Warmup Iteration  19: 404813.962 ops/s
# Warmup Iteration  20: 404808.985 ops/s
# Warmup Iteration  21: 403600.742 ops/s
# Warmup Iteration  22: 404263.185 ops/s
# Warmup Iteration  23: 403474.492 ops/s
# Warmup Iteration  24: 404578.296 ops/s
# Warmup Iteration  25: 404902.651 ops/s
# Warmup Iteration  26: 404374.604 ops/s
# Warmup Iteration  27: 404252.510 ops/s
# Warmup Iteration  28: 404629.036 ops/s
# Warmup Iteration  29: 403909.077 ops/s
# Warmup Iteration  30: 405019.642 ops/s
Iteration   1: 404832.668 ops/s
Iteration   2: 404611.769 ops/s
Iteration   3: 403536.858 ops/s
Iteration   4: 402040.910 ops/s
Iteration   5: 404693.569 ops/s
Iteration   6: 404212.737 ops/s
Iteration   7: 405351.147 ops/s
Iteration   8: 404239.459 ops/s
Iteration   9: 405463.000 ops/s
Iteration  10: 405227.289 ops/s
Iteration  11: 404645.595 ops/s
Iteration  12: 404178.202 ops/s
Iteration  13: 404114.355 ops/s
Iteration  14: 404770.780 ops/s
Iteration  15: 404608.356 ops/s
Iteration  16: 404759.174 ops/s
Iteration  17: 404192.257 ops/s
Iteration  18: 405183.313 ops/s
Iteration  19: 405402.463 ops/s
Iteration  20: 405246.350 ops/s
Iteration  21: 404670.300 ops/s
Iteration  22: 404996.463 ops/s
Iteration  23: 404796.683 ops/s
Iteration  24: 405049.499 ops/s
Iteration  25: 404045.655 ops/s
Iteration  26: 404480.855 ops/s
Iteration  27: 405389.284 ops/s
Iteration  28: 404495.394 ops/s
Iteration  29: 404979.335 ops/s
Iteration  30: 404183.033 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_forEachWithIndexFromTo":
  404613.225 ±(99.9%) 454.732 ops/s [Average]
  (min, avg, max) = (402040.910, 404613.225, 405463.000), stdev = 680.621
  CI (99.9%): [404158.493, 405067.957] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score     Error  Units
ImmutableSubListTest._Benchmark.benchmark_forEachWithIndexFromTo  thrpt   30  404613.225 ± 454.732  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_forLoop$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_forLoop

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 25678059.843 ops/s
# Warmup Iteration   2: 50445085.091 ops/s
# Warmup Iteration   3: 43257077.160 ops/s
# Warmup Iteration   4: 50795521.399 ops/s
# Warmup Iteration   5: 50627060.241 ops/s
# Warmup Iteration   6: 50582422.675 ops/s
# Warmup Iteration   7: 50688934.501 ops/s
# Warmup Iteration   8: 50820003.424 ops/s
# Warmup Iteration   9: 50624888.911 ops/s
# Warmup Iteration  10: 50595606.914 ops/s
# Warmup Iteration  11: 50578760.264 ops/s
# Warmup Iteration  12: 50503954.579 ops/s
# Warmup Iteration  13: 50772700.103 ops/s
# Warmup Iteration  14: 50761991.928 ops/s
# Warmup Iteration  15: 50541388.691 ops/s
# Warmup Iteration  16: 50611252.198 ops/s
# Warmup Iteration  17: 50596533.780 ops/s
# Warmup Iteration  18: 50726312.696 ops/s
# Warmup Iteration  19: 50634732.490 ops/s
# Warmup Iteration  20: 50781207.030 ops/s
# Warmup Iteration  21: 50743531.874 ops/s
# Warmup Iteration  22: 50664100.370 ops/s
# Warmup Iteration  23: 50779938.294 ops/s
# Warmup Iteration  24: 50539214.904 ops/s
# Warmup Iteration  25: 50551803.773 ops/s
# Warmup Iteration  26: 50579034.637 ops/s
# Warmup Iteration  27: 50913004.100 ops/s
# Warmup Iteration  28: 50795098.111 ops/s
# Warmup Iteration  29: 50707281.410 ops/s
# Warmup Iteration  30: 50665665.354 ops/s
Iteration   1: 50693565.508 ops/s
Iteration   2: 50455461.597 ops/s
Iteration   3: 50658839.768 ops/s
Iteration   4: 50642102.119 ops/s
Iteration   5: 50790016.693 ops/s
Iteration   6: 50676986.416 ops/s
Iteration   7: 50692495.338 ops/s
Iteration   8: 50664470.987 ops/s
Iteration   9: 50671279.136 ops/s
Iteration  10: 50537982.354 ops/s
Iteration  11: 50718588.968 ops/s
Iteration  12: 50773702.989 ops/s
Iteration  13: 50862206.349 ops/s
Iteration  14: 50875344.397 ops/s
Iteration  15: 50657642.957 ops/s
Iteration  16: 50295721.304 ops/s
Iteration  17: 50496353.787 ops/s
Iteration  18: 50608510.402 ops/s
Iteration  19: 50322596.209 ops/s
Iteration  20: 50408080.081 ops/s
Iteration  21: 50931603.962 ops/s
Iteration  22: 50785281.732 ops/s
Iteration  23: 50665460.693 ops/s
Iteration  24: 50643721.146 ops/s
Iteration  25: 50609151.598 ops/s
Iteration  26: 50677480.088 ops/s
Iteration  27: 50653890.993 ops/s
Iteration  28: 50846737.939 ops/s
Iteration  29: 50621010.805 ops/s
Iteration  30: 50571519.602 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_forLoop":
  50650260.197 ±(99.9%) 100308.476 ops/s [Average]
  (min, avg, max) = (50295721.304, 50650260.197, 50931603.962), stdev = 150137.016
  CI (99.9%): [50549951.721, 50750568.673] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score        Error  Units
ImmutableSubListTest._Benchmark.benchmark_forLoop  thrpt   30  50650260.197 ± 100308.476  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_get$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_get

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 355425.015 ops/s
# Warmup Iteration   2: 374641.573 ops/s
# Warmup Iteration   3: 451134.446 ops/s
# Warmup Iteration   4: 457369.246 ops/s
# Warmup Iteration   5: 468658.807 ops/s
# Warmup Iteration   6: 466170.063 ops/s
# Warmup Iteration   7: 466007.110 ops/s
# Warmup Iteration   8: 466032.294 ops/s
# Warmup Iteration   9: 465601.397 ops/s
# Warmup Iteration  10: 464440.233 ops/s
# Warmup Iteration  11: 462160.365 ops/s
# Warmup Iteration  12: 466287.180 ops/s
# Warmup Iteration  13: 431026.391 ops/s
# Warmup Iteration  14: 436193.279 ops/s
# Warmup Iteration  15: 467751.768 ops/s
# Warmup Iteration  16: 465339.754 ops/s
# Warmup Iteration  17: 491618.212 ops/s
# Warmup Iteration  18: 490265.151 ops/s
# Warmup Iteration  19: 490762.681 ops/s
# Warmup Iteration  20: 491381.692 ops/s
# Warmup Iteration  21: 492368.883 ops/s
# Warmup Iteration  22: 492685.606 ops/s
# Warmup Iteration  23: 492832.034 ops/s
# Warmup Iteration  24: 492370.550 ops/s
# Warmup Iteration  25: 490559.128 ops/s
# Warmup Iteration  26: 491054.431 ops/s
# Warmup Iteration  27: 490525.013 ops/s
# Warmup Iteration  28: 490849.673 ops/s
# Warmup Iteration  29: 491106.767 ops/s
# Warmup Iteration  30: 492687.647 ops/s
Iteration   1: 491351.150 ops/s
Iteration   2: 492630.423 ops/s
Iteration   3: 491858.245 ops/s
Iteration   4: 492940.469 ops/s
Iteration   5: 493613.651 ops/s
Iteration   6: 492754.374 ops/s
Iteration   7: 492808.620 ops/s
Iteration   8: 491699.218 ops/s
Iteration   9: 489709.197 ops/s
Iteration  10: 490773.500 ops/s
Iteration  11: 489784.357 ops/s
Iteration  12: 490933.441 ops/s
Iteration  13: 491534.414 ops/s
Iteration  14: 492240.669 ops/s
Iteration  15: 492594.864 ops/s
Iteration  16: 490988.089 ops/s
Iteration  17: 492443.367 ops/s
Iteration  18: 492470.781 ops/s
Iteration  19: 492357.593 ops/s
Iteration  20: 492227.365 ops/s
Iteration  21: 491772.213 ops/s
Iteration  22: 491176.318 ops/s
Iteration  23: 491049.578 ops/s
Iteration  24: 490978.071 ops/s
Iteration  25: 490962.499 ops/s
Iteration  26: 491610.655 ops/s
Iteration  27: 491349.358 ops/s
Iteration  28: 492931.409 ops/s
Iteration  29: 490263.749 ops/s
Iteration  30: 492591.286 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_get":
  491746.631 ±(99.9%) 648.525 ops/s [Average]
  (min, avg, max) = (489709.197, 491746.631, 493613.651), stdev = 970.681
  CI (99.9%): [491098.106, 492395.156] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt       Score     Error  Units
ImmutableSubListTest._Benchmark.benchmark_get  thrpt   30  491746.631 ± 648.525  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_getFirst$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_getFirst

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 29040289.338 ops/s
# Warmup Iteration   2: 53914447.385 ops/s
# Warmup Iteration   3: 45484741.544 ops/s
# Warmup Iteration   4: 53250065.127 ops/s
# Warmup Iteration   5: 53519355.470 ops/s
# Warmup Iteration   6: 53400976.560 ops/s
# Warmup Iteration   7: 53181872.003 ops/s
# Warmup Iteration   8: 53223892.685 ops/s
# Warmup Iteration   9: 53088888.745 ops/s
# Warmup Iteration  10: 53308249.063 ops/s
# Warmup Iteration  11: 53390004.520 ops/s
# Warmup Iteration  12: 53214992.636 ops/s
# Warmup Iteration  13: 53132279.689 ops/s
# Warmup Iteration  14: 53266108.878 ops/s
# Warmup Iteration  15: 53270589.923 ops/s
# Warmup Iteration  16: 53136282.363 ops/s
# Warmup Iteration  17: 53422055.838 ops/s
# Warmup Iteration  18: 53238536.419 ops/s
# Warmup Iteration  19: 53215666.052 ops/s
# Warmup Iteration  20: 53376286.422 ops/s
# Warmup Iteration  21: 53243618.619 ops/s
# Warmup Iteration  22: 53465696.549 ops/s
# Warmup Iteration  23: 53569333.069 ops/s
# Warmup Iteration  24: 52838104.667 ops/s
# Warmup Iteration  25: 53379882.990 ops/s
# Warmup Iteration  26: 53413876.047 ops/s
# Warmup Iteration  27: 53311690.735 ops/s
# Warmup Iteration  28: 53522790.647 ops/s
# Warmup Iteration  29: 53530278.639 ops/s
# Warmup Iteration  30: 53406536.732 ops/s
Iteration   1: 53619034.849 ops/s
Iteration   2: 53732022.150 ops/s
Iteration   3: 53620132.537 ops/s
Iteration   4: 53424773.384 ops/s
Iteration   5: 53337801.123 ops/s
Iteration   6: 53576392.682 ops/s
Iteration   7: 53356742.132 ops/s
Iteration   8: 53408593.645 ops/s
Iteration   9: 53315639.591 ops/s
Iteration  10: 53312807.575 ops/s
Iteration  11: 53449463.738 ops/s
Iteration  12: 53436893.629 ops/s
Iteration  13: 53524192.846 ops/s
Iteration  14: 53359919.167 ops/s
Iteration  15: 53311643.492 ops/s
Iteration  16: 53475389.352 ops/s
Iteration  17: 53413740.054 ops/s
Iteration  18: 53236041.095 ops/s
Iteration  19: 53603815.327 ops/s
Iteration  20: 53840137.543 ops/s
Iteration  21: 53118229.477 ops/s
Iteration  22: 53433611.581 ops/s
Iteration  23: 53168320.253 ops/s
Iteration  24: 53125832.876 ops/s
Iteration  25: 53565338.362 ops/s
Iteration  26: 53555323.359 ops/s
Iteration  27: 53414000.241 ops/s
Iteration  28: 53384432.628 ops/s
Iteration  29: 53481794.590 ops/s
Iteration  30: 53368595.348 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_getFirst":
  53432355.154 ±(99.9%) 110490.358 ops/s [Average]
  (min, avg, max) = (53118229.477, 53432355.154, 53840137.543), stdev = 165376.780
  CI (99.9%): [53321864.796, 53542845.513] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt         Score        Error  Units
ImmutableSubListTest._Benchmark.benchmark_getFirst  thrpt   30  53432355.154 ± 110490.358  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_getLast$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_getLast

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 28340024.157 ops/s
# Warmup Iteration   2: 52542073.161 ops/s
# Warmup Iteration   3: 45935947.979 ops/s
# Warmup Iteration   4: 52892760.504 ops/s
# Warmup Iteration   5: 53003043.976 ops/s
# Warmup Iteration   6: 53216148.562 ops/s
# Warmup Iteration   7: 53497911.391 ops/s
# Warmup Iteration   8: 53283578.666 ops/s
# Warmup Iteration   9: 53418952.560 ops/s
# Warmup Iteration  10: 53444790.163 ops/s
# Warmup Iteration  11: 53290038.190 ops/s
# Warmup Iteration  12: 53613714.756 ops/s
# Warmup Iteration  13: 53316382.153 ops/s
# Warmup Iteration  14: 53584527.692 ops/s
# Warmup Iteration  15: 53588260.196 ops/s
# Warmup Iteration  16: 53256285.943 ops/s
# Warmup Iteration  17: 53540599.625 ops/s
# Warmup Iteration  18: 53967151.881 ops/s
# Warmup Iteration  19: 53050481.220 ops/s
# Warmup Iteration  20: 53510101.873 ops/s
# Warmup Iteration  21: 53596397.553 ops/s
# Warmup Iteration  22: 53622542.037 ops/s
# Warmup Iteration  23: 53662317.726 ops/s
# Warmup Iteration  24: 53846164.937 ops/s
# Warmup Iteration  25: 53446739.493 ops/s
# Warmup Iteration  26: 53437283.979 ops/s
# Warmup Iteration  27: 53800256.273 ops/s
# Warmup Iteration  28: 53524626.771 ops/s
# Warmup Iteration  29: 53686080.388 ops/s
# Warmup Iteration  30: 53393003.640 ops/s
Iteration   1: 53642976.331 ops/s
Iteration   2: 53189610.650 ops/s
Iteration   3: 52833635.480 ops/s
Iteration   4: 53293030.029 ops/s
Iteration   5: 52793785.031 ops/s
Iteration   6: 53755883.096 ops/s
Iteration   7: 53759307.839 ops/s
Iteration   8: 53468028.793 ops/s
Iteration   9: 53375693.953 ops/s
Iteration  10: 53653967.547 ops/s
Iteration  11: 53169011.101 ops/s
Iteration  12: 53299271.057 ops/s
Iteration  13: 53224257.952 ops/s
Iteration  14: 53440336.056 ops/s
Iteration  15: 53395158.007 ops/s
Iteration  16: 53061846.505 ops/s
Iteration  17: 53207205.703 ops/s
Iteration  18: 53983891.754 ops/s
Iteration  19: 53796850.733 ops/s
Iteration  20: 53779026.703 ops/s
Iteration  21: 53513113.290 ops/s
Iteration  22: 53712155.986 ops/s
Iteration  23: 53950898.543 ops/s
Iteration  24: 53262748.573 ops/s
Iteration  25: 53361430.756 ops/s
Iteration  26: 54141435.564 ops/s
Iteration  27: 53996009.749 ops/s
Iteration  28: 53582695.065 ops/s
Iteration  29: 53537132.253 ops/s
Iteration  30: 53851039.894 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_getLast":
  53501047.800 ±(99.9%) 225595.337 ops/s [Average]
  (min, avg, max) = (52793785.031, 53501047.800, 54141435.564), stdev = 337660.506
  CI (99.9%): [53275452.462, 53726643.137] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score        Error  Units
ImmutableSubListTest._Benchmark.benchmark_getLast  thrpt   30  53501047.800 ± 225595.337  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_getOnly$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_getOnly

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 29239549.854 ops/s
# Warmup Iteration   2: 58431773.712 ops/s
# Warmup Iteration   3: 50465047.274 ops/s
# Warmup Iteration   4: 59330912.256 ops/s
# Warmup Iteration   5: 59625984.457 ops/s
# Warmup Iteration   6: 59590403.091 ops/s
# Warmup Iteration   7: 59708878.212 ops/s
# Warmup Iteration   8: 59382125.769 ops/s
# Warmup Iteration   9: 59588709.443 ops/s
# Warmup Iteration  10: 59410956.075 ops/s
# Warmup Iteration  11: 59571520.960 ops/s
# Warmup Iteration  12: 59349414.000 ops/s
# Warmup Iteration  13: 59480927.737 ops/s
# Warmup Iteration  14: 59379887.748 ops/s
# Warmup Iteration  15: 59578414.373 ops/s
# Warmup Iteration  16: 59521697.003 ops/s
# Warmup Iteration  17: 59593023.496 ops/s
# Warmup Iteration  18: 59638319.061 ops/s
# Warmup Iteration  19: 59519388.410 ops/s
# Warmup Iteration  20: 59460488.026 ops/s
# Warmup Iteration  21: 59673927.996 ops/s
# Warmup Iteration  22: 59530193.521 ops/s
# Warmup Iteration  23: 59543180.183 ops/s
# Warmup Iteration  24: 59495435.726 ops/s
# Warmup Iteration  25: 59557742.810 ops/s
# Warmup Iteration  26: 59630017.256 ops/s
# Warmup Iteration  27: 59604707.680 ops/s
# Warmup Iteration  28: 59609361.614 ops/s
# Warmup Iteration  29: 59403530.126 ops/s
# Warmup Iteration  30: 59449938.994 ops/s
Iteration   1: 59702043.007 ops/s
Iteration   2: 59566618.608 ops/s
Iteration   3: 59613756.706 ops/s
Iteration   4: 59274905.922 ops/s
Iteration   5: 59293243.729 ops/s
Iteration   6: 59306096.908 ops/s
Iteration   7: 59618600.418 ops/s
Iteration   8: 59339247.992 ops/s
Iteration   9: 59537038.797 ops/s
Iteration  10: 59467010.270 ops/s
Iteration  11: 59504515.262 ops/s
Iteration  12: 59553384.008 ops/s
Iteration  13: 59558673.255 ops/s
Iteration  14: 59191727.891 ops/s
Iteration  15: 59508022.420 ops/s
Iteration  16: 59768799.874 ops/s
Iteration  17: 59491856.652 ops/s
Iteration  18: 59275062.666 ops/s
Iteration  19: 59498421.104 ops/s
Iteration  20: 59255801.586 ops/s
Iteration  21: 57479880.842 ops/s
Iteration  22: 59331770.167 ops/s
Iteration  23: 59357820.437 ops/s
Iteration  24: 59300618.470 ops/s
Iteration  25: 59439509.604 ops/s
Iteration  26: 59370621.663 ops/s
Iteration  27: 59535335.190 ops/s
Iteration  28: 59534044.826 ops/s
Iteration  29: 59394727.546 ops/s
Iteration  30: 59439819.764 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_getOnly":
  59383632.519 ±(99.9%) 257744.605 ops/s [Average]
  (min, avg, max) = (57479880.842, 59383632.519, 59768799.874), stdev = 385780.020
  CI (99.9%): [59125887.915, 59641377.124] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score        Error  Units
ImmutableSubListTest._Benchmark.benchmark_getOnly  thrpt   30  59383632.519 ± 257744.605  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_getOnly_exception_when_empty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_getOnly_exception_when_empty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 773221.008 ops/s
# Warmup Iteration   2: 812790.796 ops/s
# Warmup Iteration   3: 1052612.640 ops/s
# Warmup Iteration   4: 1049801.595 ops/s
# Warmup Iteration   5: 1054680.181 ops/s
# Warmup Iteration   6: 1056594.961 ops/s
# Warmup Iteration   7: 1052710.568 ops/s
# Warmup Iteration   8: 1050375.433 ops/s
# Warmup Iteration   9: 1044498.362 ops/s
# Warmup Iteration  10: 1055176.723 ops/s
# Warmup Iteration  11: 1025269.129 ops/s
# Warmup Iteration  12: 918451.275 ops/s
# Warmup Iteration  13: 1054794.348 ops/s
# Warmup Iteration  14: 1054550.415 ops/s
# Warmup Iteration  15: 1054672.668 ops/s
# Warmup Iteration  16: 1053563.823 ops/s
# Warmup Iteration  17: 1128269.246 ops/s
# Warmup Iteration  18: 1123609.177 ops/s
# Warmup Iteration  19: 1122158.049 ops/s
# Warmup Iteration  20: 1125106.344 ops/s
# Warmup Iteration  21: 1126342.675 ops/s
# Warmup Iteration  22: 1124022.671 ops/s
# Warmup Iteration  23: 1122932.512 ops/s
# Warmup Iteration  24: 1127202.154 ops/s
# Warmup Iteration  25: 1121732.664 ops/s
# Warmup Iteration  26: 1128105.590 ops/s
# Warmup Iteration  27: 1125344.419 ops/s
# Warmup Iteration  28: 1126256.623 ops/s
# Warmup Iteration  29: 1124804.233 ops/s
# Warmup Iteration  30: 1124672.137 ops/s
Iteration   1: 1121220.903 ops/s
Iteration   2: 1128531.410 ops/s
Iteration   3: 1127726.409 ops/s
Iteration   4: 1126176.102 ops/s
Iteration   5: 1123350.153 ops/s
Iteration   6: 1127129.773 ops/s
Iteration   7: 1127389.829 ops/s
Iteration   8: 1127322.672 ops/s
Iteration   9: 1124016.013 ops/s
Iteration  10: 1126475.363 ops/s
Iteration  11: 1125450.546 ops/s
Iteration  12: 1127686.512 ops/s
Iteration  13: 1124562.484 ops/s
Iteration  14: 1126107.584 ops/s
Iteration  15: 1126975.084 ops/s
Iteration  16: 1124482.462 ops/s
Iteration  17: 1129227.965 ops/s
Iteration  18: 1128675.441 ops/s
Iteration  19: 1127388.038 ops/s
Iteration  20: 1123428.927 ops/s
Iteration  21: 1124821.400 ops/s
Iteration  22: 1126202.528 ops/s
Iteration  23: 1127377.090 ops/s
Iteration  24: 1123996.239 ops/s
Iteration  25: 1125593.742 ops/s
Iteration  26: 1124184.524 ops/s
Iteration  27: 1123684.003 ops/s
Iteration  28: 1123454.289 ops/s
Iteration  29: 1125661.536 ops/s
Iteration  30: 1124935.997 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_getOnly_exception_when_empty":
  1125774.501 ±(99.9%) 1273.480 ops/s [Average]
  (min, avg, max) = (1121220.903, 1125774.501, 1129227.965), stdev = 1906.085
  CI (99.9%): [1124501.021, 1127047.980] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_getOnly_exception_when_empty  thrpt   30  1125774.501 ± 1273.480  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_getOnly_exception_when_multiple_items$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_getOnly_exception_when_multiple_items

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 772386.011 ops/s
# Warmup Iteration   2: 813745.035 ops/s
# Warmup Iteration   3: 1052772.918 ops/s
# Warmup Iteration   4: 1052379.357 ops/s
# Warmup Iteration   5: 1047845.942 ops/s
# Warmup Iteration   6: 1050555.297 ops/s
# Warmup Iteration   7: 1049332.049 ops/s
# Warmup Iteration   8: 1048857.376 ops/s
# Warmup Iteration   9: 1049778.453 ops/s
# Warmup Iteration  10: 1050369.685 ops/s
# Warmup Iteration  11: 1016912.266 ops/s
# Warmup Iteration  12: 921976.168 ops/s
# Warmup Iteration  13: 1049931.567 ops/s
# Warmup Iteration  14: 1048626.424 ops/s
# Warmup Iteration  15: 1049295.799 ops/s
# Warmup Iteration  16: 1048476.313 ops/s
# Warmup Iteration  17: 1112950.122 ops/s
# Warmup Iteration  18: 1112117.830 ops/s
# Warmup Iteration  19: 1112603.833 ops/s
# Warmup Iteration  20: 1112191.668 ops/s
# Warmup Iteration  21: 1113756.174 ops/s
# Warmup Iteration  22: 1115378.280 ops/s
# Warmup Iteration  23: 1113724.654 ops/s
# Warmup Iteration  24: 1115347.693 ops/s
# Warmup Iteration  25: 1113425.349 ops/s
# Warmup Iteration  26: 1115014.452 ops/s
# Warmup Iteration  27: 1110275.968 ops/s
# Warmup Iteration  28: 1115365.215 ops/s
# Warmup Iteration  29: 1115527.061 ops/s
# Warmup Iteration  30: 1110917.198 ops/s
Iteration   1: 1110351.388 ops/s
Iteration   2: 1110413.212 ops/s
Iteration   3: 1113815.372 ops/s
Iteration   4: 1112846.569 ops/s
Iteration   5: 1113158.803 ops/s
Iteration   6: 1111520.528 ops/s
Iteration   7: 1111308.024 ops/s
Iteration   8: 1108432.504 ops/s
Iteration   9: 1107485.780 ops/s
Iteration  10: 1112105.306 ops/s
Iteration  11: 1111642.671 ops/s
Iteration  12: 1110828.688 ops/s
Iteration  13: 1109524.852 ops/s
Iteration  14: 1112812.460 ops/s
Iteration  15: 1114635.258 ops/s
Iteration  16: 1114047.453 ops/s
Iteration  17: 1108893.147 ops/s
Iteration  18: 1114226.755 ops/s
Iteration  19: 1108990.344 ops/s
Iteration  20: 1109738.876 ops/s
Iteration  21: 1113571.477 ops/s
Iteration  22: 1106707.354 ops/s
Iteration  23: 1107108.785 ops/s
Iteration  24: 1107144.991 ops/s
Iteration  25: 1112868.508 ops/s
Iteration  26: 1110727.008 ops/s
Iteration  27: 1113788.122 ops/s
Iteration  28: 1112105.968 ops/s
Iteration  29: 1114679.172 ops/s
Iteration  30: 1115049.008 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_getOnly_exception_when_multiple_items":
  1111350.946 ±(99.9%) 1664.590 ops/s [Average]
  (min, avg, max) = (1106707.354, 1111350.946, 1115049.008), stdev = 2491.481
  CI (99.9%): [1109686.356, 1113015.536] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_getOnly_exception_when_multiple_items  thrpt   30  1111350.946 ± 1664.590  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_groupBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_groupBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 883569.815 ops/s
# Warmup Iteration   2: 2103924.113 ops/s
# Warmup Iteration   3: 2197005.435 ops/s
# Warmup Iteration   4: 1862836.826 ops/s
# Warmup Iteration   5: 2156139.574 ops/s
# Warmup Iteration   6: 2201957.033 ops/s
# Warmup Iteration   7: 2203111.617 ops/s
# Warmup Iteration   8: 2201015.665 ops/s
# Warmup Iteration   9: 2200109.942 ops/s
# Warmup Iteration  10: 2197484.893 ops/s
# Warmup Iteration  11: 2199548.945 ops/s
# Warmup Iteration  12: 2199445.622 ops/s
# Warmup Iteration  13: 2201791.514 ops/s
# Warmup Iteration  14: 2203310.828 ops/s
# Warmup Iteration  15: 2200326.867 ops/s
# Warmup Iteration  16: 2199343.434 ops/s
# Warmup Iteration  17: 2204532.956 ops/s
# Warmup Iteration  18: 2202556.317 ops/s
# Warmup Iteration  19: 2195596.174 ops/s
# Warmup Iteration  20: 2205035.668 ops/s
# Warmup Iteration  21: 2202105.916 ops/s
# Warmup Iteration  22: 2202790.144 ops/s
# Warmup Iteration  23: 2197634.043 ops/s
# Warmup Iteration  24: 2193439.249 ops/s
# Warmup Iteration  25: 2199333.013 ops/s
# Warmup Iteration  26: 2196070.591 ops/s
# Warmup Iteration  27: 2202017.045 ops/s
# Warmup Iteration  28: 2197971.979 ops/s
# Warmup Iteration  29: 2193243.506 ops/s
# Warmup Iteration  30: 2204066.969 ops/s
Iteration   1: 2199856.957 ops/s
Iteration   2: 2201903.893 ops/s
Iteration   3: 2196398.386 ops/s
Iteration   4: 2197510.343 ops/s
Iteration   5: 2202797.326 ops/s
Iteration   6: 2206978.926 ops/s
Iteration   7: 2202689.301 ops/s
Iteration   8: 2201054.630 ops/s
Iteration   9: 2202860.336 ops/s
Iteration  10: 2197378.375 ops/s
Iteration  11: 2201776.330 ops/s
Iteration  12: 2192577.754 ops/s
Iteration  13: 2194565.081 ops/s
Iteration  14: 2200255.560 ops/s
Iteration  15: 2202069.701 ops/s
Iteration  16: 2209426.468 ops/s
Iteration  17: 2199415.221 ops/s
Iteration  18: 2196891.279 ops/s
Iteration  19: 2202963.129 ops/s
Iteration  20: 2200423.056 ops/s
Iteration  21: 2202952.692 ops/s
Iteration  22: 2203648.195 ops/s
Iteration  23: 2196180.897 ops/s
Iteration  24: 2198979.421 ops/s
Iteration  25: 2204170.897 ops/s
Iteration  26: 2201697.998 ops/s
Iteration  27: 2202416.870 ops/s
Iteration  28: 2200789.967 ops/s
Iteration  29: 2199386.938 ops/s
Iteration  30: 2199363.030 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_groupBy":
  2200645.965 ±(99.9%) 2338.770 ops/s [Average]
  (min, avg, max) = (2192577.754, 2200645.965, 2209426.468), stdev = 3500.561
  CI (99.9%): [2198307.195, 2202984.735] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_groupBy  thrpt   30  2200645.965 ± 2338.770  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_groupByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_groupByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 218744.601 ops/s
# Warmup Iteration   2: 371298.922 ops/s
# Warmup Iteration   3: 435038.161 ops/s
# Warmup Iteration   4: 436676.490 ops/s
# Warmup Iteration   5: 436889.555 ops/s
# Warmup Iteration   6: 372297.651 ops/s
# Warmup Iteration   7: 429084.124 ops/s
# Warmup Iteration   8: 437769.641 ops/s
# Warmup Iteration   9: 437227.275 ops/s
# Warmup Iteration  10: 437865.309 ops/s
# Warmup Iteration  11: 436975.995 ops/s
# Warmup Iteration  12: 437239.108 ops/s
# Warmup Iteration  13: 437834.064 ops/s
# Warmup Iteration  14: 438334.906 ops/s
# Warmup Iteration  15: 438410.562 ops/s
# Warmup Iteration  16: 437831.280 ops/s
# Warmup Iteration  17: 438630.070 ops/s
# Warmup Iteration  18: 436969.641 ops/s
# Warmup Iteration  19: 436572.039 ops/s
# Warmup Iteration  20: 436652.009 ops/s
# Warmup Iteration  21: 435781.945 ops/s
# Warmup Iteration  22: 437501.517 ops/s
# Warmup Iteration  23: 438290.648 ops/s
# Warmup Iteration  24: 430388.513 ops/s
# Warmup Iteration  25: 437598.959 ops/s
# Warmup Iteration  26: 438375.173 ops/s
# Warmup Iteration  27: 438430.978 ops/s
# Warmup Iteration  28: 438212.627 ops/s
# Warmup Iteration  29: 437770.473 ops/s
# Warmup Iteration  30: 437575.636 ops/s
Iteration   1: 438555.986 ops/s
Iteration   2: 437557.325 ops/s
Iteration   3: 438747.441 ops/s
Iteration   4: 437528.674 ops/s
Iteration   5: 438653.498 ops/s
Iteration   6: 437054.341 ops/s
Iteration   7: 439292.860 ops/s
Iteration   8: 437431.493 ops/s
Iteration   9: 438936.155 ops/s
Iteration  10: 437613.692 ops/s
Iteration  11: 436969.307 ops/s
Iteration  12: 436874.749 ops/s
Iteration  13: 431474.021 ops/s
Iteration  14: 437777.556 ops/s
Iteration  15: 437714.622 ops/s
Iteration  16: 437758.037 ops/s
Iteration  17: 437168.830 ops/s
Iteration  18: 436090.297 ops/s
Iteration  19: 438771.732 ops/s
Iteration  20: 437753.620 ops/s
Iteration  21: 431146.765 ops/s
Iteration  22: 436606.558 ops/s
Iteration  23: 438897.713 ops/s
Iteration  24: 430961.606 ops/s
Iteration  25: 438499.948 ops/s
Iteration  26: 437723.892 ops/s
Iteration  27: 438035.393 ops/s
Iteration  28: 438704.188 ops/s
Iteration  29: 437722.102 ops/s
Iteration  30: 438002.059 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_groupByEach":
  437200.815 ±(99.9%) 1450.670 ops/s [Average]
  (min, avg, max) = (430961.606, 437200.815, 439292.860), stdev = 2171.294
  CI (99.9%): [435750.146, 438651.485] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_groupByEach  thrpt   30  437200.815 ± 1450.670  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_indexOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_indexOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5370408.262 ops/s
# Warmup Iteration   2: 11673242.997 ops/s
# Warmup Iteration   3: 9912716.640 ops/s
# Warmup Iteration   4: 11715716.269 ops/s
# Warmup Iteration   5: 11794242.625 ops/s
# Warmup Iteration   6: 11768335.759 ops/s
# Warmup Iteration   7: 11557280.418 ops/s
# Warmup Iteration   8: 11764061.891 ops/s
# Warmup Iteration   9: 11763658.144 ops/s
# Warmup Iteration  10: 11763244.167 ops/s
# Warmup Iteration  11: 11777489.109 ops/s
# Warmup Iteration  12: 11731460.171 ops/s
# Warmup Iteration  13: 11751714.610 ops/s
# Warmup Iteration  14: 11786255.126 ops/s
# Warmup Iteration  15: 11777943.827 ops/s
# Warmup Iteration  16: 11763239.723 ops/s
# Warmup Iteration  17: 11761461.984 ops/s
# Warmup Iteration  18: 11610789.446 ops/s
# Warmup Iteration  19: 11705120.768 ops/s
# Warmup Iteration  20: 11756513.268 ops/s
# Warmup Iteration  21: 11736312.899 ops/s
# Warmup Iteration  22: 11746167.417 ops/s
# Warmup Iteration  23: 11762178.723 ops/s
# Warmup Iteration  24: 11716885.430 ops/s
# Warmup Iteration  25: 11737760.574 ops/s
# Warmup Iteration  26: 11740421.255 ops/s
# Warmup Iteration  27: 11740711.924 ops/s
# Warmup Iteration  28: 11747900.339 ops/s
# Warmup Iteration  29: 11750742.158 ops/s
# Warmup Iteration  30: 11741449.445 ops/s
Iteration   1: 11782515.882 ops/s
Iteration   2: 11709852.122 ops/s
Iteration   3: 11760278.701 ops/s
Iteration   4: 11718887.255 ops/s
Iteration   5: 11768143.990 ops/s
Iteration   6: 11738551.302 ops/s
Iteration   7: 11748512.629 ops/s
Iteration   8: 11747243.463 ops/s
Iteration   9: 11752785.925 ops/s
Iteration  10: 11732473.975 ops/s
Iteration  11: 11769917.988 ops/s
Iteration  12: 11752151.745 ops/s
Iteration  13: 11779501.072 ops/s
Iteration  14: 11726185.946 ops/s
Iteration  15: 11770496.574 ops/s
Iteration  16: 11690563.829 ops/s
Iteration  17: 11754292.934 ops/s
Iteration  18: 11764071.311 ops/s
Iteration  19: 11768742.658 ops/s
Iteration  20: 11785928.345 ops/s
Iteration  21: 11795572.384 ops/s
Iteration  22: 11760014.669 ops/s
Iteration  23: 11784778.938 ops/s
Iteration  24: 11728346.492 ops/s
Iteration  25: 11751497.413 ops/s
Iteration  26: 11757814.945 ops/s
Iteration  27: 11741644.951 ops/s
Iteration  28: 11718011.767 ops/s
Iteration  29: 11771883.072 ops/s
Iteration  30: 11796769.581 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_indexOf":
  11754247.729 ±(99.9%) 17242.345 ops/s [Average]
  (min, avg, max) = (11690563.829, 11754247.729, 11796769.581), stdev = 25807.532
  CI (99.9%): [11737005.384, 11771490.073] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score       Error  Units
ImmutableSubListTest._Benchmark.benchmark_indexOf  thrpt   30  11754247.729 ± 17242.345  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6388975.620 ops/s
# Warmup Iteration   2: 13618947.827 ops/s
# Warmup Iteration   3: 14500303.326 ops/s
# Warmup Iteration   4: 13278313.121 ops/s
# Warmup Iteration   5: 13233040.405 ops/s
# Warmup Iteration   6: 14529755.507 ops/s
# Warmup Iteration   7: 14533893.870 ops/s
# Warmup Iteration   8: 14530099.472 ops/s
# Warmup Iteration   9: 14552455.710 ops/s
# Warmup Iteration  10: 14503637.179 ops/s
# Warmup Iteration  11: 14536066.637 ops/s
# Warmup Iteration  12: 14534244.035 ops/s
# Warmup Iteration  13: 14513288.338 ops/s
# Warmup Iteration  14: 14498993.256 ops/s
# Warmup Iteration  15: 14445415.527 ops/s
# Warmup Iteration  16: 14541061.048 ops/s
# Warmup Iteration  17: 14531589.801 ops/s
# Warmup Iteration  18: 14540098.511 ops/s
# Warmup Iteration  19: 14526127.728 ops/s
# Warmup Iteration  20: 14542378.578 ops/s
# Warmup Iteration  21: 14557136.524 ops/s
# Warmup Iteration  22: 14542705.549 ops/s
# Warmup Iteration  23: 14533284.280 ops/s
# Warmup Iteration  24: 14544294.965 ops/s
# Warmup Iteration  25: 14541821.905 ops/s
# Warmup Iteration  26: 14535823.718 ops/s
# Warmup Iteration  27: 14518963.190 ops/s
# Warmup Iteration  28: 14543684.952 ops/s
# Warmup Iteration  29: 14527546.943 ops/s
# Warmup Iteration  30: 14535735.131 ops/s
Iteration   1: 14567939.934 ops/s
Iteration   2: 14502082.061 ops/s
Iteration   3: 14480091.854 ops/s
Iteration   4: 14471508.456 ops/s
Iteration   5: 14492429.848 ops/s
Iteration   6: 14550370.705 ops/s
Iteration   7: 14525058.809 ops/s
Iteration   8: 14510988.304 ops/s
Iteration   9: 14553741.491 ops/s
Iteration  10: 14500747.748 ops/s
Iteration  11: 14559578.152 ops/s
Iteration  12: 14556149.496 ops/s
Iteration  13: 14520510.462 ops/s
Iteration  14: 14461581.075 ops/s
Iteration  15: 14496049.934 ops/s
Iteration  16: 14529695.671 ops/s
Iteration  17: 14529032.866 ops/s
Iteration  18: 14498765.326 ops/s
Iteration  19: 14514455.824 ops/s
Iteration  20: 14511916.728 ops/s
Iteration  21: 14500894.525 ops/s
Iteration  22: 14485496.452 ops/s
Iteration  23: 14522319.970 ops/s
Iteration  24: 14563821.896 ops/s
Iteration  25: 14554609.349 ops/s
Iteration  26: 14543388.688 ops/s
Iteration  27: 14578727.357 ops/s
Iteration  28: 14543035.308 ops/s
Iteration  29: 14534290.852 ops/s
Iteration  30: 14537679.523 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_injectInto":
  14523231.955 ±(99.9%) 20330.577 ops/s [Average]
  (min, avg, max) = (14461581.075, 14523231.955, 14578727.357), stdev = 30429.852
  CI (99.9%): [14502901.379, 14543562.532] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score       Error  Units
ImmutableSubListTest._Benchmark.benchmark_injectInto  thrpt   30  14523231.955 ± 20330.577  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_injectIntoDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_injectIntoDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 17090999.316 ops/s
# Warmup Iteration   2: 35480177.203 ops/s
# Warmup Iteration   3: 29901273.110 ops/s
# Warmup Iteration   4: 35373261.444 ops/s
# Warmup Iteration   5: 35253171.131 ops/s
# Warmup Iteration   6: 35249144.837 ops/s
# Warmup Iteration   7: 35285735.300 ops/s
# Warmup Iteration   8: 35313292.849 ops/s
# Warmup Iteration   9: 35304941.578 ops/s
# Warmup Iteration  10: 35335638.852 ops/s
# Warmup Iteration  11: 35284185.150 ops/s
# Warmup Iteration  12: 35313064.430 ops/s
# Warmup Iteration  13: 35303141.731 ops/s
# Warmup Iteration  14: 35284865.575 ops/s
# Warmup Iteration  15: 35282527.997 ops/s
# Warmup Iteration  16: 35303122.426 ops/s
# Warmup Iteration  17: 35283360.750 ops/s
# Warmup Iteration  18: 35337413.606 ops/s
# Warmup Iteration  19: 35272388.691 ops/s
# Warmup Iteration  20: 35276281.941 ops/s
# Warmup Iteration  21: 35309887.295 ops/s
# Warmup Iteration  22: 35347441.503 ops/s
# Warmup Iteration  23: 35373379.166 ops/s
# Warmup Iteration  24: 35232363.453 ops/s
# Warmup Iteration  25: 35364070.844 ops/s
# Warmup Iteration  26: 35176314.495 ops/s
# Warmup Iteration  27: 35281915.401 ops/s
# Warmup Iteration  28: 35375714.540 ops/s
# Warmup Iteration  29: 35381423.543 ops/s
# Warmup Iteration  30: 35266548.565 ops/s
Iteration   1: 35343461.134 ops/s
Iteration   2: 35327010.517 ops/s
Iteration   3: 35320193.773 ops/s
Iteration   4: 35293031.119 ops/s
Iteration   5: 35237001.831 ops/s
Iteration   6: 35237449.190 ops/s
Iteration   7: 35331398.563 ops/s
Iteration   8: 35353176.851 ops/s
Iteration   9: 35221699.834 ops/s
Iteration  10: 35311171.536 ops/s
Iteration  11: 35149757.136 ops/s
Iteration  12: 34640632.739 ops/s
Iteration  13: 35214030.442 ops/s
Iteration  14: 35202444.122 ops/s
Iteration  15: 35362390.779 ops/s
Iteration  16: 35274527.042 ops/s
Iteration  17: 35252505.006 ops/s
Iteration  18: 35285031.070 ops/s
Iteration  19: 35196611.279 ops/s
Iteration  20: 35153304.240 ops/s
Iteration  21: 35297518.703 ops/s
Iteration  22: 35292555.771 ops/s
Iteration  23: 35394372.635 ops/s
Iteration  24: 35321932.803 ops/s
Iteration  25: 35154867.003 ops/s
Iteration  26: 35325641.117 ops/s
Iteration  27: 35421965.448 ops/s
Iteration  28: 35186499.825 ops/s
Iteration  29: 35301713.014 ops/s
Iteration  30: 35303304.890 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_injectIntoDouble":
  35256906.647 ±(99.9%) 90977.476 ops/s [Average]
  (min, avg, max) = (34640632.739, 35256906.647, 35421965.448), stdev = 136170.813
  CI (99.9%): [35165929.171, 35347884.123] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
ImmutableSubListTest._Benchmark.benchmark_injectIntoDouble  thrpt   30  35256906.647 ± 90977.476  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_injectIntoFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_injectIntoFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 16672100.541 ops/s
# Warmup Iteration   2: 34010219.041 ops/s
# Warmup Iteration   3: 28771750.687 ops/s
# Warmup Iteration   4: 33817380.846 ops/s
# Warmup Iteration   5: 33905922.808 ops/s
# Warmup Iteration   6: 33884872.438 ops/s
# Warmup Iteration   7: 33790929.919 ops/s
# Warmup Iteration   8: 33728190.119 ops/s
# Warmup Iteration   9: 33912967.048 ops/s
# Warmup Iteration  10: 33696211.593 ops/s
# Warmup Iteration  11: 33834839.832 ops/s
# Warmup Iteration  12: 33847853.194 ops/s
# Warmup Iteration  13: 33688455.449 ops/s
# Warmup Iteration  14: 33796456.580 ops/s
# Warmup Iteration  15: 33806255.928 ops/s
# Warmup Iteration  16: 33721761.143 ops/s
# Warmup Iteration  17: 33864610.819 ops/s
# Warmup Iteration  18: 33849837.921 ops/s
# Warmup Iteration  19: 33744967.296 ops/s
# Warmup Iteration  20: 33850103.262 ops/s
# Warmup Iteration  21: 33904472.599 ops/s
# Warmup Iteration  22: 33858640.976 ops/s
# Warmup Iteration  23: 33877383.147 ops/s
# Warmup Iteration  24: 33648520.976 ops/s
# Warmup Iteration  25: 33741216.187 ops/s
# Warmup Iteration  26: 33748383.420 ops/s
# Warmup Iteration  27: 33869920.053 ops/s
# Warmup Iteration  28: 33870380.630 ops/s
# Warmup Iteration  29: 33769356.803 ops/s
# Warmup Iteration  30: 33818539.460 ops/s
Iteration   1: 33910971.976 ops/s
Iteration   2: 33760110.204 ops/s
Iteration   3: 33889722.070 ops/s
Iteration   4: 33766832.664 ops/s
Iteration   5: 33880647.152 ops/s
Iteration   6: 33767766.510 ops/s
Iteration   7: 33925461.906 ops/s
Iteration   8: 33874056.191 ops/s
Iteration   9: 33861744.835 ops/s
Iteration  10: 33940955.131 ops/s
Iteration  11: 33854337.601 ops/s
Iteration  12: 33806917.632 ops/s
Iteration  13: 33900357.311 ops/s
Iteration  14: 33885394.720 ops/s
Iteration  15: 33819429.701 ops/s
Iteration  16: 33915849.707 ops/s
Iteration  17: 33844550.785 ops/s
Iteration  18: 33827568.109 ops/s
Iteration  19: 33861320.331 ops/s
Iteration  20: 33750680.282 ops/s
Iteration  21: 33643470.454 ops/s
Iteration  22: 33762949.943 ops/s
Iteration  23: 33899623.574 ops/s
Iteration  24: 33770705.377 ops/s
Iteration  25: 33870234.845 ops/s
Iteration  26: 33880755.082 ops/s
Iteration  27: 33845804.381 ops/s
Iteration  28: 33858850.676 ops/s
Iteration  29: 33852087.821 ops/s
Iteration  30: 33736820.073 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_injectIntoFloat":
  33838865.901 ±(99.9%) 45358.822 ops/s [Average]
  (min, avg, max) = (33643470.454, 33838865.901, 33940955.131), stdev = 67890.954
  CI (99.9%): [33793507.080, 33884224.723] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
ImmutableSubListTest._Benchmark.benchmark_injectIntoFloat  thrpt   30  33838865.901 ± 45358.822  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_injectIntoInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_injectIntoInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10309427.979 ops/s
# Warmup Iteration   2: 20947419.253 ops/s
# Warmup Iteration   3: 18267423.865 ops/s
# Warmup Iteration   4: 21614264.381 ops/s
# Warmup Iteration   5: 21710218.905 ops/s
# Warmup Iteration   6: 21649200.984 ops/s
# Warmup Iteration   7: 21706880.536 ops/s
# Warmup Iteration   8: 21632370.123 ops/s
# Warmup Iteration   9: 21635323.865 ops/s
# Warmup Iteration  10: 21655263.239 ops/s
# Warmup Iteration  11: 21659032.784 ops/s
# Warmup Iteration  12: 21665066.618 ops/s
# Warmup Iteration  13: 21647760.213 ops/s
# Warmup Iteration  14: 21628132.392 ops/s
# Warmup Iteration  15: 21587800.941 ops/s
# Warmup Iteration  16: 21649175.733 ops/s
# Warmup Iteration  17: 21630109.176 ops/s
# Warmup Iteration  18: 21585969.640 ops/s
# Warmup Iteration  19: 21562265.764 ops/s
# Warmup Iteration  20: 21575248.174 ops/s
# Warmup Iteration  21: 21669932.678 ops/s
# Warmup Iteration  22: 21675639.686 ops/s
# Warmup Iteration  23: 21593295.432 ops/s
# Warmup Iteration  24: 21477557.019 ops/s
# Warmup Iteration  25: 21711909.526 ops/s
# Warmup Iteration  26: 21707812.972 ops/s
# Warmup Iteration  27: 21693031.444 ops/s
# Warmup Iteration  28: 21682590.735 ops/s
# Warmup Iteration  29: 21667689.217 ops/s
# Warmup Iteration  30: 21665173.670 ops/s
Iteration   1: 21689096.718 ops/s
Iteration   2: 21644246.086 ops/s
Iteration   3: 21563223.940 ops/s
Iteration   4: 21628909.719 ops/s
Iteration   5: 21674225.593 ops/s
Iteration   6: 21682617.050 ops/s
Iteration   7: 21697396.883 ops/s
Iteration   8: 21643769.390 ops/s
Iteration   9: 21667471.831 ops/s
Iteration  10: 21709329.412 ops/s
Iteration  11: 21657850.723 ops/s
Iteration  12: 21611781.183 ops/s
Iteration  13: 21625498.264 ops/s
Iteration  14: 21629662.391 ops/s
Iteration  15: 21645524.162 ops/s
Iteration  16: 21643453.410 ops/s
Iteration  17: 21681770.458 ops/s
Iteration  18: 21713872.350 ops/s
Iteration  19: 21660583.698 ops/s
Iteration  20: 21657097.552 ops/s
Iteration  21: 21637091.072 ops/s
Iteration  22: 21615366.125 ops/s
Iteration  23: 21700771.985 ops/s
Iteration  24: 21605369.129 ops/s
Iteration  25: 21647449.885 ops/s
Iteration  26: 21609223.370 ops/s
Iteration  27: 21647412.577 ops/s
Iteration  28: 21683021.388 ops/s
Iteration  29: 21655404.233 ops/s
Iteration  30: 21669848.551 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_injectIntoInt":
  21653277.971 ±(99.9%) 22860.192 ops/s [Average]
  (min, avg, max) = (21563223.940, 21653277.971, 21713872.350), stdev = 34216.062
  CI (99.9%): [21630417.779, 21676138.163] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
ImmutableSubListTest._Benchmark.benchmark_injectIntoInt  thrpt   30  21653277.971 ± 22860.192  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_injectIntoLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_injectIntoLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10590332.592 ops/s
# Warmup Iteration   2: 21399067.766 ops/s
# Warmup Iteration   3: 18538078.139 ops/s
# Warmup Iteration   4: 21790948.612 ops/s
# Warmup Iteration   5: 21783908.550 ops/s
# Warmup Iteration   6: 21767413.632 ops/s
# Warmup Iteration   7: 21800338.318 ops/s
# Warmup Iteration   8: 21750722.908 ops/s
# Warmup Iteration   9: 21786430.544 ops/s
# Warmup Iteration  10: 21786464.920 ops/s
# Warmup Iteration  11: 21721611.844 ops/s
# Warmup Iteration  12: 21744778.884 ops/s
# Warmup Iteration  13: 21764024.345 ops/s
# Warmup Iteration  14: 21834146.118 ops/s
# Warmup Iteration  15: 21824906.399 ops/s
# Warmup Iteration  16: 21745142.847 ops/s
# Warmup Iteration  17: 21806416.161 ops/s
# Warmup Iteration  18: 21795195.203 ops/s
# Warmup Iteration  19: 21911941.505 ops/s
# Warmup Iteration  20: 21873840.737 ops/s
# Warmup Iteration  21: 21846228.934 ops/s
# Warmup Iteration  22: 21903575.339 ops/s
# Warmup Iteration  23: 21832085.081 ops/s
# Warmup Iteration  24: 21850854.946 ops/s
# Warmup Iteration  25: 21830674.769 ops/s
# Warmup Iteration  26: 21826010.781 ops/s
# Warmup Iteration  27: 21856247.605 ops/s
# Warmup Iteration  28: 21857904.378 ops/s
# Warmup Iteration  29: 21879030.986 ops/s
# Warmup Iteration  30: 21881525.179 ops/s
Iteration   1: 21851446.851 ops/s
Iteration   2: 21883903.275 ops/s
Iteration   3: 21897092.788 ops/s
Iteration   4: 21838049.497 ops/s
Iteration   5: 21849313.223 ops/s
Iteration   6: 21877942.088 ops/s
Iteration   7: 21941511.564 ops/s
Iteration   8: 21856869.666 ops/s
Iteration   9: 21870841.211 ops/s
Iteration  10: 21872810.112 ops/s
Iteration  11: 21835235.111 ops/s
Iteration  12: 21840730.976 ops/s
Iteration  13: 21786010.978 ops/s
Iteration  14: 21875208.974 ops/s
Iteration  15: 21800690.799 ops/s
Iteration  16: 21882446.783 ops/s
Iteration  17: 21889782.219 ops/s
Iteration  18: 21910236.062 ops/s
Iteration  19: 21875563.805 ops/s
Iteration  20: 21886005.871 ops/s
Iteration  21: 21877195.420 ops/s
Iteration  22: 21871108.461 ops/s
Iteration  23: 21889415.725 ops/s
Iteration  24: 21879776.356 ops/s
Iteration  25: 21901626.314 ops/s
Iteration  26: 21884468.493 ops/s
Iteration  27: 21755508.911 ops/s
Iteration  28: 21895528.128 ops/s
Iteration  29: 21852732.211 ops/s
Iteration  30: 21824580.733 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_injectIntoLong":
  21865121.087 ±(99.9%) 25311.467 ops/s [Average]
  (min, avg, max) = (21755508.911, 21865121.087, 21941511.564), stdev = 37885.015
  CI (99.9%): [21839809.620, 21890432.554] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score       Error  Units
ImmutableSubListTest._Benchmark.benchmark_injectIntoLong  thrpt   30  21865121.087 ± 25311.467  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 29934741.600 ops/s
# Warmup Iteration   2: 55090727.824 ops/s
# Warmup Iteration   3: 50724121.818 ops/s
# Warmup Iteration   4: 57980096.167 ops/s
# Warmup Iteration   5: 58187855.407 ops/s
# Warmup Iteration   6: 57747329.273 ops/s
# Warmup Iteration   7: 56839889.003 ops/s
# Warmup Iteration   8: 56320105.350 ops/s
# Warmup Iteration   9: 57712881.188 ops/s
# Warmup Iteration  10: 57703916.094 ops/s
# Warmup Iteration  11: 58360592.338 ops/s
# Warmup Iteration  12: 57318154.869 ops/s
# Warmup Iteration  13: 58327213.639 ops/s
# Warmup Iteration  14: 58120426.900 ops/s
# Warmup Iteration  15: 56873719.383 ops/s
# Warmup Iteration  16: 56673840.330 ops/s
# Warmup Iteration  17: 59041526.737 ops/s
# Warmup Iteration  18: 58181910.931 ops/s
# Warmup Iteration  19: 57880048.833 ops/s
# Warmup Iteration  20: 58627658.626 ops/s
# Warmup Iteration  21: 58284429.596 ops/s
# Warmup Iteration  22: 58118935.497 ops/s
# Warmup Iteration  23: 57243707.241 ops/s
# Warmup Iteration  24: 58724194.182 ops/s
# Warmup Iteration  25: 58654068.907 ops/s
# Warmup Iteration  26: 57388193.334 ops/s
# Warmup Iteration  27: 57285209.353 ops/s
# Warmup Iteration  28: 58714107.621 ops/s
# Warmup Iteration  29: 58713560.673 ops/s
# Warmup Iteration  30: 58034752.591 ops/s
Iteration   1: 58460953.688 ops/s
Iteration   2: 58208053.506 ops/s
Iteration   3: 57836980.051 ops/s
Iteration   4: 59051955.573 ops/s
Iteration   5: 59082395.735 ops/s
Iteration   6: 57521800.186 ops/s
Iteration   7: 57096456.232 ops/s
Iteration   8: 58228000.816 ops/s
Iteration   9: 58887593.241 ops/s
Iteration  10: 59405818.042 ops/s
Iteration  11: 59579561.075 ops/s
Iteration  12: 57797413.295 ops/s
Iteration  13: 57791926.035 ops/s
Iteration  14: 59136721.781 ops/s
Iteration  15: 57243017.689 ops/s
Iteration  16: 57625720.657 ops/s
Iteration  17: 57091608.110 ops/s
Iteration  18: 59332569.232 ops/s
Iteration  19: 58772266.889 ops/s
Iteration  20: 58378840.856 ops/s
Iteration  21: 59752736.932 ops/s
Iteration  22: 58092538.104 ops/s
Iteration  23: 58228885.275 ops/s
Iteration  24: 57869758.956 ops/s
Iteration  25: 58300136.304 ops/s
Iteration  26: 59225340.165 ops/s
Iteration  27: 58777730.754 ops/s
Iteration  28: 57524774.377 ops/s
Iteration  29: 58631250.971 ops/s
Iteration  30: 58040629.826 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_isEmpty":
  58365781.145 ±(99.9%) 500979.502 ops/s [Average]
  (min, avg, max) = (57091608.110, 58365781.145, 59752736.932), stdev = 749842.591
  CI (99.9%): [57864801.643, 58866760.647] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score        Error  Units
ImmutableSubListTest._Benchmark.benchmark_isEmpty  thrpt   30  58365781.145 ± 500979.502  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_iterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_iterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 364275.751 ops/s
# Warmup Iteration   2: 385527.884 ops/s
# Warmup Iteration   3: 455643.771 ops/s
# Warmup Iteration   4: 483892.235 ops/s
# Warmup Iteration   5: 483593.570 ops/s
# Warmup Iteration   6: 481760.468 ops/s
# Warmup Iteration   7: 484395.959 ops/s
# Warmup Iteration   8: 483423.334 ops/s
# Warmup Iteration   9: 484067.465 ops/s
# Warmup Iteration  10: 483180.434 ops/s
# Warmup Iteration  11: 484665.609 ops/s
# Warmup Iteration  12: 485084.102 ops/s
# Warmup Iteration  13: 484815.488 ops/s
# Warmup Iteration  14: 411619.453 ops/s
# Warmup Iteration  15: 485166.571 ops/s
# Warmup Iteration  16: 483883.415 ops/s
# Warmup Iteration  17: 511559.608 ops/s
# Warmup Iteration  18: 513100.428 ops/s
# Warmup Iteration  19: 512286.087 ops/s
# Warmup Iteration  20: 512044.146 ops/s
# Warmup Iteration  21: 512385.166 ops/s
# Warmup Iteration  22: 512595.989 ops/s
# Warmup Iteration  23: 511785.387 ops/s
# Warmup Iteration  24: 512918.967 ops/s
# Warmup Iteration  25: 477426.199 ops/s
# Warmup Iteration  26: 484911.234 ops/s
# Warmup Iteration  27: 513210.530 ops/s
# Warmup Iteration  28: 511647.023 ops/s
# Warmup Iteration  29: 511769.235 ops/s
# Warmup Iteration  30: 511683.892 ops/s
Iteration   1: 512370.195 ops/s
Iteration   2: 512537.059 ops/s
Iteration   3: 513691.211 ops/s
Iteration   4: 510773.907 ops/s
Iteration   5: 512249.108 ops/s
Iteration   6: 511871.392 ops/s
Iteration   7: 512325.394 ops/s
Iteration   8: 511951.723 ops/s
Iteration   9: 511171.615 ops/s
Iteration  10: 511662.908 ops/s
Iteration  11: 512445.893 ops/s
Iteration  12: 512096.025 ops/s
Iteration  13: 511955.237 ops/s
Iteration  14: 511415.986 ops/s
Iteration  15: 511954.753 ops/s
Iteration  16: 511777.854 ops/s
Iteration  17: 509826.410 ops/s
Iteration  18: 512416.524 ops/s
Iteration  19: 511391.241 ops/s
Iteration  20: 512775.706 ops/s
Iteration  21: 512332.100 ops/s
Iteration  22: 513282.325 ops/s
Iteration  23: 512017.310 ops/s
Iteration  24: 512054.340 ops/s
Iteration  25: 511933.633 ops/s
Iteration  26: 511946.389 ops/s
Iteration  27: 488377.776 ops/s
Iteration  28: 510355.259 ops/s
Iteration  29: 511561.513 ops/s
Iteration  30: 511357.592 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_iterator":
  511129.279 ±(99.9%) 2916.432 ops/s [Average]
  (min, avg, max) = (488377.776, 511129.279, 513691.211), stdev = 4365.178
  CI (99.9%): [508212.848, 514045.711] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_iterator  thrpt   30  511129.279 ± 2916.432  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_iteratorRemove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_iteratorRemove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 615523.165 ops/s
# Warmup Iteration   2: 758068.660 ops/s
# Warmup Iteration   3: 933944.476 ops/s
# Warmup Iteration   4: 935720.174 ops/s
# Warmup Iteration   5: 939355.142 ops/s
# Warmup Iteration   6: 939099.036 ops/s
# Warmup Iteration   7: 934589.176 ops/s
# Warmup Iteration   8: 938546.810 ops/s
# Warmup Iteration   9: 788555.342 ops/s
# Warmup Iteration  10: 939851.911 ops/s
# Warmup Iteration  11: 941329.305 ops/s
# Warmup Iteration  12: 939362.089 ops/s
# Warmup Iteration  13: 940081.071 ops/s
# Warmup Iteration  14: 939331.835 ops/s
# Warmup Iteration  15: 935082.181 ops/s
# Warmup Iteration  16: 939552.398 ops/s
# Warmup Iteration  17: 991861.591 ops/s
# Warmup Iteration  18: 991889.363 ops/s
# Warmup Iteration  19: 992323.208 ops/s
# Warmup Iteration  20: 992410.587 ops/s
# Warmup Iteration  21: 993455.958 ops/s
# Warmup Iteration  22: 989611.776 ops/s
# Warmup Iteration  23: 990767.058 ops/s
# Warmup Iteration  24: 990263.391 ops/s
# Warmup Iteration  25: 989415.874 ops/s
# Warmup Iteration  26: 985002.069 ops/s
# Warmup Iteration  27: 989869.883 ops/s
# Warmup Iteration  28: 994351.959 ops/s
# Warmup Iteration  29: 991492.296 ops/s
# Warmup Iteration  30: 991418.062 ops/s
Iteration   1: 992151.274 ops/s
Iteration   2: 990950.642 ops/s
Iteration   3: 987145.350 ops/s
Iteration   4: 994083.102 ops/s
Iteration   5: 992723.551 ops/s
Iteration   6: 988154.510 ops/s
Iteration   7: 991546.338 ops/s
Iteration   8: 990168.248 ops/s
Iteration   9: 994706.368 ops/s
Iteration  10: 995408.888 ops/s
Iteration  11: 993719.029 ops/s
Iteration  12: 994220.718 ops/s
Iteration  13: 992710.238 ops/s
Iteration  14: 993145.808 ops/s
Iteration  15: 994334.249 ops/s
Iteration  16: 994602.264 ops/s
Iteration  17: 993017.336 ops/s
Iteration  18: 994744.999 ops/s
Iteration  19: 993378.508 ops/s
Iteration  20: 991989.317 ops/s
Iteration  21: 991143.636 ops/s
Iteration  22: 991346.833 ops/s
Iteration  23: 991723.190 ops/s
Iteration  24: 989237.298 ops/s
Iteration  25: 991925.376 ops/s
Iteration  26: 992084.280 ops/s
Iteration  27: 993432.009 ops/s
Iteration  28: 992788.555 ops/s
Iteration  29: 993558.632 ops/s
Iteration  30: 994712.741 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_iteratorRemove":
  992495.110 ±(99.9%) 1320.186 ops/s [Average]
  (min, avg, max) = (987145.350, 992495.110, 995408.888), stdev = 1975.992
  CI (99.9%): [991174.924, 993815.295] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_iteratorRemove  thrpt   30  992495.110 ± 1320.186  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_lastIndexOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_lastIndexOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4296962.849 ops/s
# Warmup Iteration   2: 9245156.453 ops/s
# Warmup Iteration   3: 7822422.631 ops/s
# Warmup Iteration   4: 9325144.533 ops/s
# Warmup Iteration   5: 9342829.659 ops/s
# Warmup Iteration   6: 9308550.152 ops/s
# Warmup Iteration   7: 9348700.657 ops/s
# Warmup Iteration   8: 9344704.256 ops/s
# Warmup Iteration   9: 9320582.016 ops/s
# Warmup Iteration  10: 9323809.974 ops/s
# Warmup Iteration  11: 9321271.328 ops/s
# Warmup Iteration  12: 9331833.268 ops/s
# Warmup Iteration  13: 9350949.953 ops/s
# Warmup Iteration  14: 9322266.739 ops/s
# Warmup Iteration  15: 9318142.105 ops/s
# Warmup Iteration  16: 9336280.729 ops/s
# Warmup Iteration  17: 9316421.440 ops/s
# Warmup Iteration  18: 9324348.570 ops/s
# Warmup Iteration  19: 9259668.979 ops/s
# Warmup Iteration  20: 9329063.193 ops/s
# Warmup Iteration  21: 9325819.395 ops/s
# Warmup Iteration  22: 9312819.923 ops/s
# Warmup Iteration  23: 9335827.170 ops/s
# Warmup Iteration  24: 9310308.011 ops/s
# Warmup Iteration  25: 9299716.551 ops/s
# Warmup Iteration  26: 9313162.056 ops/s
# Warmup Iteration  27: 9280827.923 ops/s
# Warmup Iteration  28: 9315398.910 ops/s
# Warmup Iteration  29: 9331816.301 ops/s
# Warmup Iteration  30: 9331133.994 ops/s
Iteration   1: 9325816.702 ops/s
Iteration   2: 9340538.282 ops/s
Iteration   3: 9336631.499 ops/s
Iteration   4: 9304083.623 ops/s
Iteration   5: 9352030.706 ops/s
Iteration   6: 9312067.862 ops/s
Iteration   7: 9342595.317 ops/s
Iteration   8: 9285557.283 ops/s
Iteration   9: 9309710.778 ops/s
Iteration  10: 9317176.475 ops/s
Iteration  11: 9314837.395 ops/s
Iteration  12: 9322687.521 ops/s
Iteration  13: 9327679.970 ops/s
Iteration  14: 9363678.071 ops/s
Iteration  15: 9327550.663 ops/s
Iteration  16: 9348850.683 ops/s
Iteration  17: 9316904.694 ops/s
Iteration  18: 9322213.178 ops/s
Iteration  19: 9343400.215 ops/s
Iteration  20: 9322234.941 ops/s
Iteration  21: 9335035.973 ops/s
Iteration  22: 9323334.835 ops/s
Iteration  23: 9345083.522 ops/s
Iteration  24: 9331307.860 ops/s
Iteration  25: 9322641.444 ops/s
Iteration  26: 9333393.032 ops/s
Iteration  27: 9330863.450 ops/s
Iteration  28: 9334669.171 ops/s
Iteration  29: 9331903.623 ops/s
Iteration  30: 9336787.516 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_lastIndexOf":
  9328708.876 ±(99.9%) 10383.174 ops/s [Average]
  (min, avg, max) = (9285557.283, 9328708.876, 9363678.071), stdev = 15541.047
  CI (99.9%): [9318325.702, 9339092.050] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
ImmutableSubListTest._Benchmark.benchmark_lastIndexOf  thrpt   30  9328708.876 ± 10383.174  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_listIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_listIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 130717.958 ops/s
# Warmup Iteration   2: 145266.337 ops/s
# Warmup Iteration   3: 190722.041 ops/s
# Warmup Iteration   4: 190430.098 ops/s
# Warmup Iteration   5: 189692.277 ops/s
# Warmup Iteration   6: 190421.221 ops/s
# Warmup Iteration   7: 190516.422 ops/s
# Warmup Iteration   8: 190134.942 ops/s
# Warmup Iteration   9: 189923.749 ops/s
# Warmup Iteration  10: 190900.494 ops/s
# Warmup Iteration  11: 160210.901 ops/s
# Warmup Iteration  12: 190795.982 ops/s
# Warmup Iteration  13: 190404.853 ops/s
# Warmup Iteration  14: 191183.288 ops/s
# Warmup Iteration  15: 190362.265 ops/s
# Warmup Iteration  16: 191296.694 ops/s
# Warmup Iteration  17: 201037.489 ops/s
# Warmup Iteration  18: 200964.813 ops/s
# Warmup Iteration  19: 201369.330 ops/s
# Warmup Iteration  20: 200408.634 ops/s
# Warmup Iteration  21: 201364.476 ops/s
# Warmup Iteration  22: 200950.263 ops/s
# Warmup Iteration  23: 201216.188 ops/s
# Warmup Iteration  24: 200984.145 ops/s
# Warmup Iteration  25: 199949.539 ops/s
# Warmup Iteration  26: 201120.560 ops/s
# Warmup Iteration  27: 201018.427 ops/s
# Warmup Iteration  28: 200981.186 ops/s
# Warmup Iteration  29: 201126.533 ops/s
# Warmup Iteration  30: 201315.236 ops/s
Iteration   1: 201136.583 ops/s
Iteration   2: 201347.188 ops/s
Iteration   3: 201203.556 ops/s
Iteration   4: 200849.793 ops/s
Iteration   5: 200206.363 ops/s
Iteration   6: 200516.749 ops/s
Iteration   7: 200188.822 ops/s
Iteration   8: 200046.517 ops/s
Iteration   9: 200330.317 ops/s
Iteration  10: 200313.814 ops/s
Iteration  11: 199867.271 ops/s
Iteration  12: 200271.858 ops/s
Iteration  13: 198956.321 ops/s
Iteration  14: 201126.117 ops/s
Iteration  15: 200310.037 ops/s
Iteration  16: 200802.325 ops/s
Iteration  17: 201162.363 ops/s
Iteration  18: 200732.539 ops/s
Iteration  19: 201179.344 ops/s
Iteration  20: 200779.579 ops/s
Iteration  21: 200964.180 ops/s
Iteration  22: 200148.891 ops/s
Iteration  23: 200258.343 ops/s
Iteration  24: 200024.638 ops/s
Iteration  25: 200006.990 ops/s
Iteration  26: 200563.093 ops/s
Iteration  27: 200664.421 ops/s
Iteration  28: 201052.597 ops/s
Iteration  29: 200514.966 ops/s
Iteration  30: 201230.328 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_listIterator":
  200558.530 ±(99.9%) 355.561 ops/s [Average]
  (min, avg, max) = (198956.321, 200558.530, 201347.188), stdev = 532.186
  CI (99.9%): [200202.969, 200914.091] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score     Error  Units
ImmutableSubListTest._Benchmark.benchmark_listIterator  thrpt   30  200558.530 ± 355.561  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_listIterator_throwsGreaterThanSize$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_listIterator_throwsGreaterThanSize

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 741946.074 ops/s
# Warmup Iteration   2: 780919.034 ops/s
# Warmup Iteration   3: 990809.537 ops/s
# Warmup Iteration   4: 1005300.202 ops/s
# Warmup Iteration   5: 1004005.444 ops/s
# Warmup Iteration   6: 1000068.707 ops/s
# Warmup Iteration   7: 1006809.231 ops/s
# Warmup Iteration   8: 1009095.676 ops/s
# Warmup Iteration   9: 1006055.122 ops/s
# Warmup Iteration  10: 1005581.265 ops/s
# Warmup Iteration  11: 1003567.195 ops/s
# Warmup Iteration  12: 886113.118 ops/s
# Warmup Iteration  13: 971399.723 ops/s
# Warmup Iteration  14: 1007748.380 ops/s
# Warmup Iteration  15: 1002156.338 ops/s
# Warmup Iteration  16: 1002779.179 ops/s
# Warmup Iteration  17: 1066701.328 ops/s
# Warmup Iteration  18: 1069471.139 ops/s
# Warmup Iteration  19: 1067499.740 ops/s
# Warmup Iteration  20: 1068776.272 ops/s
# Warmup Iteration  21: 1062372.197 ops/s
# Warmup Iteration  22: 1061988.677 ops/s
# Warmup Iteration  23: 1069313.874 ops/s
# Warmup Iteration  24: 1070616.089 ops/s
# Warmup Iteration  25: 1064417.586 ops/s
# Warmup Iteration  26: 1067438.954 ops/s
# Warmup Iteration  27: 1066040.408 ops/s
# Warmup Iteration  28: 1066964.903 ops/s
# Warmup Iteration  29: 1072111.782 ops/s
# Warmup Iteration  30: 1070618.757 ops/s
Iteration   1: 1069261.932 ops/s
Iteration   2: 1071918.981 ops/s
Iteration   3: 1070731.667 ops/s
Iteration   4: 1071039.134 ops/s
Iteration   5: 1071344.905 ops/s
Iteration   6: 1072639.165 ops/s
Iteration   7: 1073488.151 ops/s
Iteration   8: 1071528.335 ops/s
Iteration   9: 1070104.105 ops/s
Iteration  10: 1073168.922 ops/s
Iteration  11: 1074699.065 ops/s
Iteration  12: 1069663.002 ops/s
Iteration  13: 1067280.589 ops/s
Iteration  14: 1071794.417 ops/s
Iteration  15: 1065906.741 ops/s
Iteration  16: 1073811.858 ops/s
Iteration  17: 1068651.867 ops/s
Iteration  18: 1068317.977 ops/s
Iteration  19: 1070301.214 ops/s
Iteration  20: 1072741.907 ops/s
Iteration  21: 1065411.681 ops/s
Iteration  22: 1072071.215 ops/s
Iteration  23: 1070860.028 ops/s
Iteration  24: 1070479.266 ops/s
Iteration  25: 1071179.780 ops/s
Iteration  26: 1071911.231 ops/s
Iteration  27: 1069628.463 ops/s
Iteration  28: 1071027.074 ops/s
Iteration  29: 1064554.121 ops/s
Iteration  30: 1064819.537 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_listIterator_throwsGreaterThanSize":
  1070344.544 ±(99.9%) 1758.956 ops/s [Average]
  (min, avg, max) = (1064554.121, 1070344.544, 1074699.065), stdev = 2632.723
  CI (99.9%): [1068585.588, 1072103.500] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_listIterator_throwsGreaterThanSize  thrpt   30  1070344.544 ± 1758.956  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_listIterator_throwsNegative$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_listIterator_throwsNegative

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 748116.332 ops/s
# Warmup Iteration   2: 780702.751 ops/s
# Warmup Iteration   3: 1012631.329 ops/s
# Warmup Iteration   4: 1017291.669 ops/s
# Warmup Iteration   5: 1015710.433 ops/s
# Warmup Iteration   6: 1007880.274 ops/s
# Warmup Iteration   7: 1018094.758 ops/s
# Warmup Iteration   8: 1016844.423 ops/s
# Warmup Iteration   9: 1016247.858 ops/s
# Warmup Iteration  10: 1016758.167 ops/s
# Warmup Iteration  11: 1012656.761 ops/s
# Warmup Iteration  12: 868325.240 ops/s
# Warmup Iteration  13: 1010095.258 ops/s
# Warmup Iteration  14: 1014844.050 ops/s
# Warmup Iteration  15: 1016587.002 ops/s
# Warmup Iteration  16: 1017311.602 ops/s
# Warmup Iteration  17: 1080021.924 ops/s
# Warmup Iteration  18: 1080865.197 ops/s
# Warmup Iteration  19: 1078392.266 ops/s
# Warmup Iteration  20: 1081976.763 ops/s
# Warmup Iteration  21: 1081324.167 ops/s
# Warmup Iteration  22: 1080282.376 ops/s
# Warmup Iteration  23: 1080606.531 ops/s
# Warmup Iteration  24: 1082376.719 ops/s
# Warmup Iteration  25: 1078284.544 ops/s
# Warmup Iteration  26: 1081816.193 ops/s
# Warmup Iteration  27: 1077404.299 ops/s
# Warmup Iteration  28: 1066050.454 ops/s
# Warmup Iteration  29: 1081973.794 ops/s
# Warmup Iteration  30: 1066164.002 ops/s
Iteration   1: 1065120.613 ops/s
Iteration   2: 1075628.813 ops/s
Iteration   3: 1080482.444 ops/s
Iteration   4: 1079121.081 ops/s
Iteration   5: 1074637.876 ops/s
Iteration   6: 1074145.792 ops/s
Iteration   7: 1076464.319 ops/s
Iteration   8: 1072383.384 ops/s
Iteration   9: 1081142.837 ops/s
Iteration  10: 1076112.789 ops/s
Iteration  11: 1077539.193 ops/s
Iteration  12: 1080100.353 ops/s
Iteration  13: 1078984.002 ops/s
Iteration  14: 1081184.073 ops/s
Iteration  15: 1080377.738 ops/s
Iteration  16: 1053019.748 ops/s
Iteration  17: 1080947.308 ops/s
Iteration  18: 1082876.140 ops/s
Iteration  19: 1079680.352 ops/s
Iteration  20: 1078889.965 ops/s
Iteration  21: 1082248.885 ops/s
Iteration  22: 1081537.258 ops/s
Iteration  23: 1079996.262 ops/s
Iteration  24: 1076675.189 ops/s
Iteration  25: 1084214.201 ops/s
Iteration  26: 1080674.057 ops/s
Iteration  27: 1079456.604 ops/s
Iteration  28: 1078456.441 ops/s
Iteration  29: 1080379.399 ops/s
Iteration  30: 1080517.304 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_listIterator_throwsNegative":
  1077766.481 ±(99.9%) 3979.125 ops/s [Average]
  (min, avg, max) = (1053019.748, 1077766.481, 1084214.201), stdev = 5955.767
  CI (99.9%): [1073787.356, 1081745.605] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_listIterator_throwsNegative  thrpt   30  1077766.481 ± 3979.125  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 384786.741 ops/s
# Warmup Iteration   2: 1147061.862 ops/s
# Warmup Iteration   3: 1156821.109 ops/s
# Warmup Iteration   4: 974769.862 ops/s
# Warmup Iteration   5: 1162330.085 ops/s
# Warmup Iteration   6: 1161496.897 ops/s
# Warmup Iteration   7: 1152637.309 ops/s
# Warmup Iteration   8: 1158836.675 ops/s
# Warmup Iteration   9: 1161889.844 ops/s
# Warmup Iteration  10: 1163732.966 ops/s
# Warmup Iteration  11: 1161282.315 ops/s
# Warmup Iteration  12: 1161339.874 ops/s
# Warmup Iteration  13: 1162538.992 ops/s
# Warmup Iteration  14: 1158742.707 ops/s
# Warmup Iteration  15: 1161261.807 ops/s
# Warmup Iteration  16: 1160952.192 ops/s
# Warmup Iteration  17: 1158180.420 ops/s
# Warmup Iteration  18: 1153878.583 ops/s
# Warmup Iteration  19: 1159033.382 ops/s
# Warmup Iteration  20: 1157882.830 ops/s
# Warmup Iteration  21: 1155106.183 ops/s
# Warmup Iteration  22: 1162056.130 ops/s
# Warmup Iteration  23: 1161197.486 ops/s
# Warmup Iteration  24: 1161806.772 ops/s
# Warmup Iteration  25: 1160738.173 ops/s
# Warmup Iteration  26: 1158879.735 ops/s
# Warmup Iteration  27: 1160172.653 ops/s
# Warmup Iteration  28: 1164564.305 ops/s
# Warmup Iteration  29: 1161198.840 ops/s
# Warmup Iteration  30: 1157135.535 ops/s
Iteration   1: 1155816.272 ops/s
Iteration   2: 1145592.682 ops/s
Iteration   3: 1141828.310 ops/s
Iteration   4: 1161762.971 ops/s
Iteration   5: 1161644.150 ops/s
Iteration   6: 1155419.558 ops/s
Iteration   7: 1159818.030 ops/s
Iteration   8: 1160012.811 ops/s
Iteration   9: 1160675.046 ops/s
Iteration  10: 1158938.175 ops/s
Iteration  11: 1161950.627 ops/s
Iteration  12: 1161749.561 ops/s
Iteration  13: 1161386.367 ops/s
Iteration  14: 1157796.769 ops/s
Iteration  15: 1158493.791 ops/s
Iteration  16: 1153624.472 ops/s
Iteration  17: 1158503.553 ops/s
Iteration  18: 1160095.195 ops/s
Iteration  19: 1155289.241 ops/s
Iteration  20: 1159965.468 ops/s
Iteration  21: 1159222.643 ops/s
Iteration  22: 1160614.382 ops/s
Iteration  23: 1160536.572 ops/s
Iteration  24: 1161290.679 ops/s
Iteration  25: 1155440.341 ops/s
Iteration  26: 1161256.245 ops/s
Iteration  27: 1158864.530 ops/s
Iteration  28: 1156888.648 ops/s
Iteration  29: 1161210.770 ops/s
Iteration  30: 1159169.193 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_makeString":
  1158161.902 ±(99.9%) 3043.434 ops/s [Average]
  (min, avg, max) = (1141828.310, 1158161.902, 1161950.627), stdev = 4555.270
  CI (99.9%): [1155118.467, 1161205.336] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_makeString  thrpt   30  1158161.902 ± 3043.434  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_max$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_max

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 15248761.310 ops/s
# Warmup Iteration   2: 33455969.596 ops/s
# Warmup Iteration   3: 32273787.955 ops/s
# Warmup Iteration   4: 27559578.969 ops/s
# Warmup Iteration   5: 32448499.026 ops/s
# Warmup Iteration   6: 32488494.352 ops/s
# Warmup Iteration   7: 32531236.842 ops/s
# Warmup Iteration   8: 32472103.477 ops/s
# Warmup Iteration   9: 32529562.803 ops/s
# Warmup Iteration  10: 32497594.651 ops/s
# Warmup Iteration  11: 32324505.897 ops/s
# Warmup Iteration  12: 32498740.648 ops/s
# Warmup Iteration  13: 32480705.343 ops/s
# Warmup Iteration  14: 32464311.779 ops/s
# Warmup Iteration  15: 32488485.870 ops/s
# Warmup Iteration  16: 32489177.537 ops/s
# Warmup Iteration  17: 32500186.360 ops/s
# Warmup Iteration  18: 32495495.400 ops/s
# Warmup Iteration  19: 32335121.050 ops/s
# Warmup Iteration  20: 32508075.872 ops/s
# Warmup Iteration  21: 32513334.317 ops/s
# Warmup Iteration  22: 32495112.543 ops/s
# Warmup Iteration  23: 32506587.816 ops/s
# Warmup Iteration  24: 32423695.840 ops/s
# Warmup Iteration  25: 32533245.709 ops/s
# Warmup Iteration  26: 32548321.121 ops/s
# Warmup Iteration  27: 32537714.503 ops/s
# Warmup Iteration  28: 32447346.405 ops/s
# Warmup Iteration  29: 32298859.293 ops/s
# Warmup Iteration  30: 32316015.131 ops/s
Iteration   1: 32467801.691 ops/s
Iteration   2: 32482983.013 ops/s
Iteration   3: 32541305.859 ops/s
Iteration   4: 32560094.056 ops/s
Iteration   5: 32391018.455 ops/s
Iteration   6: 32180071.333 ops/s
Iteration   7: 32529073.271 ops/s
Iteration   8: 32593262.940 ops/s
Iteration   9: 32529704.133 ops/s
Iteration  10: 32611968.935 ops/s
Iteration  11: 32548760.649 ops/s
Iteration  12: 31776907.060 ops/s
Iteration  13: 32543792.216 ops/s
Iteration  14: 32512459.689 ops/s
Iteration  15: 32411125.381 ops/s
Iteration  16: 32650915.062 ops/s
Iteration  17: 32547834.095 ops/s
Iteration  18: 32480602.793 ops/s
Iteration  19: 32436578.112 ops/s
Iteration  20: 32252716.858 ops/s
Iteration  21: 32555632.816 ops/s
Iteration  22: 32498270.259 ops/s
Iteration  23: 32510918.854 ops/s
Iteration  24: 32502572.974 ops/s
Iteration  25: 32461933.837 ops/s
Iteration  26: 32585644.229 ops/s
Iteration  27: 32532584.156 ops/s
Iteration  28: 32477367.758 ops/s
Iteration  29: 32530015.483 ops/s
Iteration  30: 32471317.496 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_max":
  32472507.782 ±(99.9%) 108320.728 ops/s [Average]
  (min, avg, max) = (31776907.060, 32472507.782, 32650915.062), stdev = 162129.378
  CI (99.9%): [32364187.054, 32580828.510] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt         Score        Error  Units
ImmutableSubListTest._Benchmark.benchmark_max  thrpt   30  32472507.782 ± 108320.728  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_maxBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_maxBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12830426.886 ops/s
# Warmup Iteration   2: 26494920.473 ops/s
# Warmup Iteration   3: 22524070.739 ops/s
# Warmup Iteration   4: 26451438.856 ops/s
# Warmup Iteration   5: 26537730.065 ops/s
# Warmup Iteration   6: 26435156.664 ops/s
# Warmup Iteration   7: 26387091.045 ops/s
# Warmup Iteration   8: 26462978.521 ops/s
# Warmup Iteration   9: 26453677.997 ops/s
# Warmup Iteration  10: 26454452.462 ops/s
# Warmup Iteration  11: 26497260.213 ops/s
# Warmup Iteration  12: 26528778.811 ops/s
# Warmup Iteration  13: 26523952.125 ops/s
# Warmup Iteration  14: 26496341.673 ops/s
# Warmup Iteration  15: 26188698.679 ops/s
# Warmup Iteration  16: 26524358.856 ops/s
# Warmup Iteration  17: 26091672.318 ops/s
# Warmup Iteration  18: 26110054.584 ops/s
# Warmup Iteration  19: 26073673.267 ops/s
# Warmup Iteration  20: 26075469.390 ops/s
# Warmup Iteration  21: 26105087.818 ops/s
# Warmup Iteration  22: 26104109.204 ops/s
# Warmup Iteration  23: 25951872.973 ops/s
# Warmup Iteration  24: 26182518.680 ops/s
# Warmup Iteration  25: 26054981.689 ops/s
# Warmup Iteration  26: 26048978.553 ops/s
# Warmup Iteration  27: 26146034.639 ops/s
# Warmup Iteration  28: 26065022.223 ops/s
# Warmup Iteration  29: 26123343.874 ops/s
# Warmup Iteration  30: 25961027.306 ops/s
Iteration   1: 25887391.804 ops/s
Iteration   2: 26007162.249 ops/s
Iteration   3: 25999057.325 ops/s
Iteration   4: 25886303.861 ops/s
Iteration   5: 26069583.136 ops/s
Iteration   6: 26118589.984 ops/s
Iteration   7: 26011473.632 ops/s
Iteration   8: 26158352.912 ops/s
Iteration   9: 26108807.067 ops/s
Iteration  10: 26117430.737 ops/s
Iteration  11: 26143592.024 ops/s
Iteration  12: 26042986.451 ops/s
Iteration  13: 26150811.963 ops/s
Iteration  14: 25981382.177 ops/s
Iteration  15: 25958528.758 ops/s
Iteration  16: 25988896.385 ops/s
Iteration  17: 26036863.341 ops/s
Iteration  18: 25972090.269 ops/s
Iteration  19: 26086949.637 ops/s
Iteration  20: 26166414.800 ops/s
Iteration  21: 26139337.963 ops/s
Iteration  22: 26144510.292 ops/s
Iteration  23: 26152589.967 ops/s
Iteration  24: 26158689.687 ops/s
Iteration  25: 26078526.754 ops/s
Iteration  26: 26151104.461 ops/s
Iteration  27: 26109598.573 ops/s
Iteration  28: 26311319.943 ops/s
Iteration  29: 26060750.240 ops/s
Iteration  30: 26042032.706 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_maxBy":
  26074704.303 ±(99.9%) 61399.799 ops/s [Average]
  (min, avg, max) = (25886303.861, 26074704.303, 26311319.943), stdev = 91900.336
  CI (99.9%): [26013304.504, 26136104.103] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt         Score       Error  Units
ImmutableSubListTest._Benchmark.benchmark_maxBy  thrpt   30  26074704.303 ± 61399.799  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_max_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_max_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4402262.827 ops/s
# Warmup Iteration   2: 9860935.215 ops/s
# Warmup Iteration   3: 9891803.479 ops/s
# Warmup Iteration   4: 8349900.644 ops/s
# Warmup Iteration   5: 9890452.872 ops/s
# Warmup Iteration   6: 9884627.726 ops/s
# Warmup Iteration   7: 9879755.718 ops/s
# Warmup Iteration   8: 9869971.937 ops/s
# Warmup Iteration   9: 9900928.074 ops/s
# Warmup Iteration  10: 9903480.226 ops/s
# Warmup Iteration  11: 9892727.460 ops/s
# Warmup Iteration  12: 9899077.540 ops/s
# Warmup Iteration  13: 9843779.063 ops/s
# Warmup Iteration  14: 9895670.990 ops/s
# Warmup Iteration  15: 9910130.445 ops/s
# Warmup Iteration  16: 9893922.418 ops/s
# Warmup Iteration  17: 9896079.778 ops/s
# Warmup Iteration  18: 9905910.075 ops/s
# Warmup Iteration  19: 9923052.920 ops/s
# Warmup Iteration  20: 9926319.729 ops/s
# Warmup Iteration  21: 9882503.360 ops/s
# Warmup Iteration  22: 9893794.068 ops/s
# Warmup Iteration  23: 9893287.760 ops/s
# Warmup Iteration  24: 9912864.380 ops/s
# Warmup Iteration  25: 9916431.521 ops/s
# Warmup Iteration  26: 9888748.619 ops/s
# Warmup Iteration  27: 9897459.306 ops/s
# Warmup Iteration  28: 9910169.656 ops/s
# Warmup Iteration  29: 9900799.480 ops/s
# Warmup Iteration  30: 9910969.027 ops/s
Iteration   1: 9926914.688 ops/s
Iteration   2: 9913799.761 ops/s
Iteration   3: 9894989.462 ops/s
Iteration   4: 9883580.296 ops/s
Iteration   5: 9914046.122 ops/s
Iteration   6: 9885433.851 ops/s
Iteration   7: 9906948.634 ops/s
Iteration   8: 9902298.187 ops/s
Iteration   9: 9896231.519 ops/s
Iteration  10: 9916575.856 ops/s
Iteration  11: 9905114.987 ops/s
Iteration  12: 9891913.576 ops/s
Iteration  13: 9884211.455 ops/s
Iteration  14: 9912195.408 ops/s
Iteration  15: 9892319.779 ops/s
Iteration  16: 9897853.202 ops/s
Iteration  17: 9890141.813 ops/s
Iteration  18: 9899034.454 ops/s
Iteration  19: 9903754.189 ops/s
Iteration  20: 9897614.685 ops/s
Iteration  21: 9924940.572 ops/s
Iteration  22: 9916088.990 ops/s
Iteration  23: 9892100.530 ops/s
Iteration  24: 9876060.142 ops/s
Iteration  25: 9905069.109 ops/s
Iteration  26: 9898355.103 ops/s
Iteration  27: 9902394.066 ops/s
Iteration  28: 9910589.101 ops/s
Iteration  29: 9913129.627 ops/s
Iteration  30: 9915270.294 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_max_null_throws":
  9902298.982 ±(99.9%) 8361.560 ops/s [Average]
  (min, avg, max) = (9876060.142, 9902298.982, 9926914.688), stdev = 12515.190
  CI (99.9%): [9893937.422, 9910660.542] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_max_null_throws  thrpt   30  9902298.982 ± 8361.560  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_max_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_max_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4269694.311 ops/s
# Warmup Iteration   2: 9978573.492 ops/s
# Warmup Iteration   3: 9996692.718 ops/s
# Warmup Iteration   4: 8455960.936 ops/s
# Warmup Iteration   5: 10044012.592 ops/s
# Warmup Iteration   6: 10044955.336 ops/s
# Warmup Iteration   7: 10062266.788 ops/s
# Warmup Iteration   8: 10056510.948 ops/s
# Warmup Iteration   9: 10069341.137 ops/s
# Warmup Iteration  10: 10060779.523 ops/s
# Warmup Iteration  11: 10029178.626 ops/s
# Warmup Iteration  12: 10051620.280 ops/s
# Warmup Iteration  13: 10051591.779 ops/s
# Warmup Iteration  14: 10055066.039 ops/s
# Warmup Iteration  15: 10048825.907 ops/s
# Warmup Iteration  16: 10059300.350 ops/s
# Warmup Iteration  17: 10050045.745 ops/s
# Warmup Iteration  18: 10014475.545 ops/s
# Warmup Iteration  19: 10031076.083 ops/s
# Warmup Iteration  20: 10015716.610 ops/s
# Warmup Iteration  21: 10015673.404 ops/s
# Warmup Iteration  22: 9960115.827 ops/s
# Warmup Iteration  23: 10035127.729 ops/s
# Warmup Iteration  24: 10013839.819 ops/s
# Warmup Iteration  25: 10020463.275 ops/s
# Warmup Iteration  26: 10031712.123 ops/s
# Warmup Iteration  27: 10008506.276 ops/s
# Warmup Iteration  28: 10019973.547 ops/s
# Warmup Iteration  29: 10056941.221 ops/s
# Warmup Iteration  30: 10012714.423 ops/s
Iteration   1: 10003312.756 ops/s
Iteration   2: 9997170.922 ops/s
Iteration   3: 9957688.228 ops/s
Iteration   4: 9981241.013 ops/s
Iteration   5: 10036603.080 ops/s
Iteration   6: 10031724.748 ops/s
Iteration   7: 10006512.505 ops/s
Iteration   8: 9995627.106 ops/s
Iteration   9: 10045326.865 ops/s
Iteration  10: 10041347.335 ops/s
Iteration  11: 10040066.363 ops/s
Iteration  12: 10051382.273 ops/s
Iteration  13: 10014432.821 ops/s
Iteration  14: 10018724.474 ops/s
Iteration  15: 10024321.075 ops/s
Iteration  16: 9983850.990 ops/s
Iteration  17: 10010366.030 ops/s
Iteration  18: 10021539.291 ops/s
Iteration  19: 10015855.244 ops/s
Iteration  20: 10018372.633 ops/s
Iteration  21: 10007650.643 ops/s
Iteration  22: 10024778.110 ops/s
Iteration  23: 10046162.861 ops/s
Iteration  24: 10041727.119 ops/s
Iteration  25: 10043456.193 ops/s
Iteration  26: 10039208.800 ops/s
Iteration  27: 10029490.869 ops/s
Iteration  28: 10013134.878 ops/s
Iteration  29: 10024149.614 ops/s
Iteration  30: 10039903.069 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_max_null_throws_without_comparator":
  10020170.930 ±(99.9%) 14748.768 ops/s [Average]
  (min, avg, max) = (9957688.228, 10020170.930, 10051382.273), stdev = 22075.263
  CI (99.9%): [10005422.162, 10034919.698] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt         Score       Error  Units
ImmutableSubListTest._Benchmark.benchmark_max_null_throws_without_comparator  thrpt   30  10020170.930 ± 14748.768  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_max_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_max_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13285640.534 ops/s
# Warmup Iteration   2: 26672298.976 ops/s
# Warmup Iteration   3: 22725734.885 ops/s
# Warmup Iteration   4: 26713331.635 ops/s
# Warmup Iteration   5: 26664797.058 ops/s
# Warmup Iteration   6: 26670160.524 ops/s
# Warmup Iteration   7: 26674292.868 ops/s
# Warmup Iteration   8: 26615068.695 ops/s
# Warmup Iteration   9: 26557564.138 ops/s
# Warmup Iteration  10: 26638955.135 ops/s
# Warmup Iteration  11: 26683168.705 ops/s
# Warmup Iteration  12: 26648712.841 ops/s
# Warmup Iteration  13: 26689293.261 ops/s
# Warmup Iteration  14: 26649457.617 ops/s
# Warmup Iteration  15: 26646554.379 ops/s
# Warmup Iteration  16: 26581894.603 ops/s
# Warmup Iteration  17: 26543363.417 ops/s
# Warmup Iteration  18: 26558634.546 ops/s
# Warmup Iteration  19: 26761049.609 ops/s
# Warmup Iteration  20: 26657735.496 ops/s
# Warmup Iteration  21: 26707597.522 ops/s
# Warmup Iteration  22: 26641215.304 ops/s
# Warmup Iteration  23: 26695344.009 ops/s
# Warmup Iteration  24: 26517847.488 ops/s
# Warmup Iteration  25: 26736115.186 ops/s
# Warmup Iteration  26: 26694736.663 ops/s
# Warmup Iteration  27: 26729491.550 ops/s
# Warmup Iteration  28: 26752378.050 ops/s
# Warmup Iteration  29: 26604480.196 ops/s
# Warmup Iteration  30: 26731088.913 ops/s
Iteration   1: 26738295.416 ops/s
Iteration   2: 26680274.522 ops/s
Iteration   3: 26706425.136 ops/s
Iteration   4: 26635658.232 ops/s
Iteration   5: 26776420.568 ops/s
Iteration   6: 26714053.048 ops/s
Iteration   7: 26643837.712 ops/s
Iteration   8: 26719204.225 ops/s
Iteration   9: 26724941.025 ops/s
Iteration  10: 26739602.290 ops/s
Iteration  11: 26769189.458 ops/s
Iteration  12: 26659085.476 ops/s
Iteration  13: 26606721.631 ops/s
Iteration  14: 26730559.657 ops/s
Iteration  15: 26754411.453 ops/s
Iteration  16: 26648902.256 ops/s
Iteration  17: 26756050.503 ops/s
Iteration  18: 26855272.244 ops/s
Iteration  19: 26803757.735 ops/s
Iteration  20: 26645927.505 ops/s
Iteration  21: 26753651.948 ops/s
Iteration  22: 26774993.138 ops/s
Iteration  23: 26765221.783 ops/s
Iteration  24: 26752383.337 ops/s
Iteration  25: 26628102.078 ops/s
Iteration  26: 26524126.251 ops/s
Iteration  27: 26589098.464 ops/s
Iteration  28: 26776851.345 ops/s
Iteration  29: 26689799.252 ops/s
Iteration  30: 26714640.811 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_max_without_comparator":
  26709248.617 ±(99.9%) 47721.639 ops/s [Average]
  (min, avg, max) = (26524126.251, 26709248.617, 26855272.244), stdev = 71427.508
  CI (99.9%): [26661526.978, 26756970.256] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
ImmutableSubListTest._Benchmark.benchmark_max_without_comparator  thrpt   30  26709248.617 ± 47721.639  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_min$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_min

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 20550919.592 ops/s
# Warmup Iteration   2: 42275156.637 ops/s
# Warmup Iteration   3: 33161325.904 ops/s
# Warmup Iteration   4: 38957228.785 ops/s
# Warmup Iteration   5: 38975386.049 ops/s
# Warmup Iteration   6: 38961354.859 ops/s
# Warmup Iteration   7: 38871802.077 ops/s
# Warmup Iteration   8: 38966706.198 ops/s
# Warmup Iteration   9: 38900305.086 ops/s
# Warmup Iteration  10: 38849292.306 ops/s
# Warmup Iteration  11: 38764082.725 ops/s
# Warmup Iteration  12: 38939498.735 ops/s
# Warmup Iteration  13: 38963746.339 ops/s
# Warmup Iteration  14: 38948603.316 ops/s
# Warmup Iteration  15: 38968113.915 ops/s
# Warmup Iteration  16: 38925858.296 ops/s
# Warmup Iteration  17: 38780945.337 ops/s
# Warmup Iteration  18: 38928115.919 ops/s
# Warmup Iteration  19: 38904323.567 ops/s
# Warmup Iteration  20: 38856119.601 ops/s
# Warmup Iteration  21: 38863898.513 ops/s
# Warmup Iteration  22: 38863671.175 ops/s
# Warmup Iteration  23: 38936988.521 ops/s
# Warmup Iteration  24: 38924423.947 ops/s
# Warmup Iteration  25: 38752753.421 ops/s
# Warmup Iteration  26: 38832241.811 ops/s
# Warmup Iteration  27: 38841980.935 ops/s
# Warmup Iteration  28: 38791369.048 ops/s
# Warmup Iteration  29: 38722796.780 ops/s
# Warmup Iteration  30: 38889236.309 ops/s
Iteration   1: 38941527.667 ops/s
Iteration   2: 38832930.153 ops/s
Iteration   3: 38919479.229 ops/s
Iteration   4: 38895397.873 ops/s
Iteration   5: 38802351.867 ops/s
Iteration   6: 38820137.111 ops/s
Iteration   7: 38871254.735 ops/s
Iteration   8: 38845679.738 ops/s
Iteration   9: 38903941.064 ops/s
Iteration  10: 38855263.733 ops/s
Iteration  11: 38899523.374 ops/s
Iteration  12: 38953052.533 ops/s
Iteration  13: 38903077.989 ops/s
Iteration  14: 38857241.001 ops/s
Iteration  15: 38835733.745 ops/s
Iteration  16: 38886907.432 ops/s
Iteration  17: 38894519.905 ops/s
Iteration  18: 38949728.270 ops/s
Iteration  19: 38884782.709 ops/s
Iteration  20: 38780908.197 ops/s
Iteration  21: 38842305.487 ops/s
Iteration  22: 38843220.167 ops/s
Iteration  23: 38874266.895 ops/s
Iteration  24: 38885798.892 ops/s
Iteration  25: 38635759.244 ops/s
Iteration  26: 38780312.875 ops/s
Iteration  27: 38869376.150 ops/s
Iteration  28: 38851547.101 ops/s
Iteration  29: 38962522.819 ops/s
Iteration  30: 38859730.815 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_min":
  38864609.292 ±(99.9%) 42438.354 ops/s [Average]
  (min, avg, max) = (38635759.244, 38864609.292, 38962522.819), stdev = 63519.736
  CI (99.9%): [38822170.938, 38907047.647] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt         Score       Error  Units
ImmutableSubListTest._Benchmark.benchmark_min  thrpt   30  38864609.292 ± 42438.354  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_minBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_minBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11272292.572 ops/s
# Warmup Iteration   2: 22783551.334 ops/s
# Warmup Iteration   3: 19650540.148 ops/s
# Warmup Iteration   4: 23242151.865 ops/s
# Warmup Iteration   5: 23273794.682 ops/s
# Warmup Iteration   6: 23225109.219 ops/s
# Warmup Iteration   7: 23206698.117 ops/s
# Warmup Iteration   8: 23242090.653 ops/s
# Warmup Iteration   9: 23228644.129 ops/s
# Warmup Iteration  10: 23258122.355 ops/s
# Warmup Iteration  11: 23232618.051 ops/s
# Warmup Iteration  12: 23209257.153 ops/s
# Warmup Iteration  13: 23278345.144 ops/s
# Warmup Iteration  14: 23255821.534 ops/s
# Warmup Iteration  15: 23203075.133 ops/s
# Warmup Iteration  16: 23233021.247 ops/s
# Warmup Iteration  17: 23176359.680 ops/s
# Warmup Iteration  18: 23206895.900 ops/s
# Warmup Iteration  19: 23197253.367 ops/s
# Warmup Iteration  20: 23143176.695 ops/s
# Warmup Iteration  21: 23229029.405 ops/s
# Warmup Iteration  22: 23213212.261 ops/s
# Warmup Iteration  23: 23167953.132 ops/s
# Warmup Iteration  24: 23192533.068 ops/s
# Warmup Iteration  25: 23203615.289 ops/s
# Warmup Iteration  26: 23230849.206 ops/s
# Warmup Iteration  27: 23236598.917 ops/s
# Warmup Iteration  28: 23207130.909 ops/s
# Warmup Iteration  29: 23202901.653 ops/s
# Warmup Iteration  30: 23195508.455 ops/s
Iteration   1: 23243832.361 ops/s
Iteration   2: 23219962.980 ops/s
Iteration   3: 23135538.261 ops/s
Iteration   4: 23042166.274 ops/s
Iteration   5: 23239183.091 ops/s
Iteration   6: 23222451.952 ops/s
Iteration   7: 23268120.256 ops/s
Iteration   8: 23267972.417 ops/s
Iteration   9: 23243056.125 ops/s
Iteration  10: 23199233.601 ops/s
Iteration  11: 23217627.281 ops/s
Iteration  12: 23260723.735 ops/s
Iteration  13: 23188261.816 ops/s
Iteration  14: 23184703.723 ops/s
Iteration  15: 23270439.886 ops/s
Iteration  16: 23229242.935 ops/s
Iteration  17: 23210467.532 ops/s
Iteration  18: 23178790.294 ops/s
Iteration  19: 23194495.280 ops/s
Iteration  20: 23180964.500 ops/s
Iteration  21: 23252860.866 ops/s
Iteration  22: 23193743.874 ops/s
Iteration  23: 23185056.991 ops/s
Iteration  24: 23137044.670 ops/s
Iteration  25: 23242255.157 ops/s
Iteration  26: 23223656.760 ops/s
Iteration  27: 23168924.114 ops/s
Iteration  28: 23252241.374 ops/s
Iteration  29: 23250958.746 ops/s
Iteration  30: 23201594.896 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_minBy":
  23210185.725 ±(99.9%) 32406.230 ops/s [Average]
  (min, avg, max) = (23042166.274, 23210185.725, 23270439.886), stdev = 48504.123
  CI (99.9%): [23177779.495, 23242591.955] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt         Score       Error  Units
ImmutableSubListTest._Benchmark.benchmark_minBy  thrpt   30  23210185.725 ± 32406.230  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_min_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_min_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4466021.859 ops/s
# Warmup Iteration   2: 9952366.127 ops/s
# Warmup Iteration   3: 9996637.257 ops/s
# Warmup Iteration   4: 8429692.477 ops/s
# Warmup Iteration   5: 9987778.993 ops/s
# Warmup Iteration   6: 9981241.759 ops/s
# Warmup Iteration   7: 9976211.359 ops/s
# Warmup Iteration   8: 9987562.493 ops/s
# Warmup Iteration   9: 9980299.016 ops/s
# Warmup Iteration  10: 10003693.488 ops/s
# Warmup Iteration  11: 9970454.220 ops/s
# Warmup Iteration  12: 9966734.572 ops/s
# Warmup Iteration  13: 9967980.543 ops/s
# Warmup Iteration  14: 9998415.394 ops/s
# Warmup Iteration  15: 9987049.121 ops/s
# Warmup Iteration  16: 9985180.846 ops/s
# Warmup Iteration  17: 10020969.392 ops/s
# Warmup Iteration  18: 10025109.468 ops/s
# Warmup Iteration  19: 10006532.600 ops/s
# Warmup Iteration  20: 9994668.326 ops/s
# Warmup Iteration  21: 10003175.435 ops/s
# Warmup Iteration  22: 10013917.285 ops/s
# Warmup Iteration  23: 10019456.868 ops/s
# Warmup Iteration  24: 9999823.754 ops/s
# Warmup Iteration  25: 10020971.104 ops/s
# Warmup Iteration  26: 9998667.952 ops/s
# Warmup Iteration  27: 10018438.462 ops/s
# Warmup Iteration  28: 9999035.953 ops/s
# Warmup Iteration  29: 10012465.826 ops/s
# Warmup Iteration  30: 10023583.809 ops/s
Iteration   1: 10015990.415 ops/s
Iteration   2: 10013851.885 ops/s
Iteration   3: 10034853.786 ops/s
Iteration   4: 10039523.371 ops/s
Iteration   5: 10021927.445 ops/s
Iteration   6: 10000570.420 ops/s
Iteration   7: 10018466.357 ops/s
Iteration   8: 10007933.395 ops/s
Iteration   9: 9999144.728 ops/s
Iteration  10: 10022612.034 ops/s
Iteration  11: 10024481.875 ops/s
Iteration  12: 9999437.063 ops/s
Iteration  13: 10012824.495 ops/s
Iteration  14: 9974731.363 ops/s
Iteration  15: 9973445.740 ops/s
Iteration  16: 9857347.801 ops/s
Iteration  17: 10003931.740 ops/s
Iteration  18: 9994818.921 ops/s
Iteration  19: 9968904.405 ops/s
Iteration  20: 10012573.172 ops/s
Iteration  21: 9990797.792 ops/s
Iteration  22: 10027696.394 ops/s
Iteration  23: 10020006.632 ops/s
Iteration  24: 10017889.997 ops/s
Iteration  25: 10019653.417 ops/s
Iteration  26: 10027985.344 ops/s
Iteration  27: 10026472.946 ops/s
Iteration  28: 10008623.084 ops/s
Iteration  29: 10008451.118 ops/s
Iteration  30: 10026264.893 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_min_null_throws":
  10005707.068 ±(99.9%) 22035.913 ops/s [Average]
  (min, avg, max) = (9857347.801, 10005707.068, 10039523.371), stdev = 32982.320
  CI (99.9%): [9983671.155, 10027742.980] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
ImmutableSubListTest._Benchmark.benchmark_min_null_throws  thrpt   30  10005707.068 ± 22035.913  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_min_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_min_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4151000.446 ops/s
# Warmup Iteration   2: 9973775.177 ops/s
# Warmup Iteration   3: 9937162.033 ops/s
# Warmup Iteration   4: 8397008.993 ops/s
# Warmup Iteration   5: 9977254.044 ops/s
# Warmup Iteration   6: 9957649.651 ops/s
# Warmup Iteration   7: 9958188.948 ops/s
# Warmup Iteration   8: 9996852.699 ops/s
# Warmup Iteration   9: 9962629.967 ops/s
# Warmup Iteration  10: 9975463.814 ops/s
# Warmup Iteration  11: 9976587.222 ops/s
# Warmup Iteration  12: 9963170.283 ops/s
# Warmup Iteration  13: 9960251.379 ops/s
# Warmup Iteration  14: 9955533.918 ops/s
# Warmup Iteration  15: 9974583.249 ops/s
# Warmup Iteration  16: 9965563.458 ops/s
# Warmup Iteration  17: 10002719.423 ops/s
# Warmup Iteration  18: 10010862.433 ops/s
# Warmup Iteration  19: 9992938.520 ops/s
# Warmup Iteration  20: 10013283.890 ops/s
# Warmup Iteration  21: 10014310.837 ops/s
# Warmup Iteration  22: 9982969.726 ops/s
# Warmup Iteration  23: 9977924.118 ops/s
# Warmup Iteration  24: 10020303.524 ops/s
# Warmup Iteration  25: 9997223.602 ops/s
# Warmup Iteration  26: 10003303.256 ops/s
# Warmup Iteration  27: 10006916.523 ops/s
# Warmup Iteration  28: 10022098.752 ops/s
# Warmup Iteration  29: 10000765.720 ops/s
# Warmup Iteration  30: 10017566.325 ops/s
Iteration   1: 10016344.033 ops/s
Iteration   2: 9989051.391 ops/s
Iteration   3: 9997893.395 ops/s
Iteration   4: 10004318.834 ops/s
Iteration   5: 9981942.496 ops/s
Iteration   6: 9971675.631 ops/s
Iteration   7: 9988533.124 ops/s
Iteration   8: 10028305.541 ops/s
Iteration   9: 10032065.474 ops/s
Iteration  10: 10014532.632 ops/s
Iteration  11: 10018124.750 ops/s
Iteration  12: 10012310.261 ops/s
Iteration  13: 9987110.978 ops/s
Iteration  14: 10009238.792 ops/s
Iteration  15: 9985386.111 ops/s
Iteration  16: 10002729.493 ops/s
Iteration  17: 10021456.509 ops/s
Iteration  18: 10011129.825 ops/s
Iteration  19: 10005588.960 ops/s
Iteration  20: 9988605.247 ops/s
Iteration  21: 10036563.321 ops/s
Iteration  22: 10019524.707 ops/s
Iteration  23: 10016269.775 ops/s
Iteration  24: 10016328.336 ops/s
Iteration  25: 10013086.814 ops/s
Iteration  26: 10004778.599 ops/s
Iteration  27: 9996367.037 ops/s
Iteration  28: 9979741.829 ops/s
Iteration  29: 9970889.981 ops/s
Iteration  30: 10001883.806 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_min_null_throws_without_comparator":
  10004059.256 ±(99.9%) 11526.818 ops/s [Average]
  (min, avg, max) = (9970889.981, 10004059.256, 10036563.321), stdev = 17252.800
  CI (99.9%): [9992532.438, 10015586.074] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt         Score       Error  Units
ImmutableSubListTest._Benchmark.benchmark_min_null_throws_without_comparator  thrpt   30  10004059.256 ± 11526.818  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_min_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_min_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 20849247.431 ops/s
# Warmup Iteration   2: 41521822.175 ops/s
# Warmup Iteration   3: 35397225.724 ops/s
# Warmup Iteration   4: 40904036.982 ops/s
# Warmup Iteration   5: 40966060.956 ops/s
# Warmup Iteration   6: 40862103.615 ops/s
# Warmup Iteration   7: 41005612.636 ops/s
# Warmup Iteration   8: 40851882.652 ops/s
# Warmup Iteration   9: 40963224.373 ops/s
# Warmup Iteration  10: 40885232.966 ops/s
# Warmup Iteration  11: 40996101.483 ops/s
# Warmup Iteration  12: 41065378.045 ops/s
# Warmup Iteration  13: 41010169.315 ops/s
# Warmup Iteration  14: 40997077.473 ops/s
# Warmup Iteration  15: 40968599.708 ops/s
# Warmup Iteration  16: 40830009.412 ops/s
# Warmup Iteration  17: 40997425.771 ops/s
# Warmup Iteration  18: 40930915.323 ops/s
# Warmup Iteration  19: 40812116.855 ops/s
# Warmup Iteration  20: 40847886.880 ops/s
# Warmup Iteration  21: 40859998.781 ops/s
# Warmup Iteration  22: 40690804.109 ops/s
# Warmup Iteration  23: 41019860.115 ops/s
# Warmup Iteration  24: 40952400.199 ops/s
# Warmup Iteration  25: 40998524.978 ops/s
# Warmup Iteration  26: 40966388.141 ops/s
# Warmup Iteration  27: 41010268.666 ops/s
# Warmup Iteration  28: 40924132.095 ops/s
# Warmup Iteration  29: 40912226.104 ops/s
# Warmup Iteration  30: 40963986.273 ops/s
Iteration   1: 40895326.872 ops/s
Iteration   2: 41047803.738 ops/s
Iteration   3: 41046927.760 ops/s
Iteration   4: 40990813.156 ops/s
Iteration   5: 40883243.716 ops/s
Iteration   6: 40906533.575 ops/s
Iteration   7: 41078578.757 ops/s
Iteration   8: 40982183.558 ops/s
Iteration   9: 41083076.176 ops/s
Iteration  10: 40813185.126 ops/s
Iteration  11: 41032260.161 ops/s
Iteration  12: 40922667.121 ops/s
Iteration  13: 40978284.347 ops/s
Iteration  14: 40955213.485 ops/s
Iteration  15: 41149644.789 ops/s
Iteration  16: 41006013.667 ops/s
Iteration  17: 40850627.480 ops/s
Iteration  18: 40978566.702 ops/s
Iteration  19: 41022000.851 ops/s
Iteration  20: 41251018.996 ops/s
Iteration  21: 40925847.222 ops/s
Iteration  22: 40938483.033 ops/s
Iteration  23: 40937062.702 ops/s
Iteration  24: 40899488.889 ops/s
Iteration  25: 41101700.992 ops/s
Iteration  26: 40905997.945 ops/s
Iteration  27: 40863796.992 ops/s
Iteration  28: 40996357.053 ops/s
Iteration  29: 40919108.085 ops/s
Iteration  30: 40994738.196 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_min_without_comparator":
  40978551.705 ±(99.9%) 63047.344 ops/s [Average]
  (min, avg, max) = (40813185.126, 40978551.705, 41251018.996), stdev = 94366.303
  CI (99.9%): [40915504.361, 41041599.048] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
ImmutableSubListTest._Benchmark.benchmark_min_without_comparator  thrpt   30  40978551.705 ± 63047.344  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12803964.255 ops/s
# Warmup Iteration   2: 26420661.981 ops/s
# Warmup Iteration   3: 24201928.928 ops/s
# Warmup Iteration   4: 24754583.448 ops/s
# Warmup Iteration   5: 26514265.155 ops/s
# Warmup Iteration   6: 26557514.333 ops/s
# Warmup Iteration   7: 26562942.126 ops/s
# Warmup Iteration   8: 26535140.496 ops/s
# Warmup Iteration   9: 26572226.159 ops/s
# Warmup Iteration  10: 26552954.463 ops/s
# Warmup Iteration  11: 26512767.446 ops/s
# Warmup Iteration  12: 26508692.319 ops/s
# Warmup Iteration  13: 26545837.556 ops/s
# Warmup Iteration  14: 26549560.170 ops/s
# Warmup Iteration  15: 26488987.512 ops/s
# Warmup Iteration  16: 26452269.467 ops/s
# Warmup Iteration  17: 26384772.655 ops/s
# Warmup Iteration  18: 26489983.015 ops/s
# Warmup Iteration  19: 26478940.670 ops/s
# Warmup Iteration  20: 26511491.277 ops/s
# Warmup Iteration  21: 26429435.225 ops/s
# Warmup Iteration  22: 26410266.805 ops/s
# Warmup Iteration  23: 26468728.333 ops/s
# Warmup Iteration  24: 26498716.069 ops/s
# Warmup Iteration  25: 26477518.676 ops/s
# Warmup Iteration  26: 26454944.457 ops/s
# Warmup Iteration  27: 26426060.844 ops/s
# Warmup Iteration  28: 26510287.421 ops/s
# Warmup Iteration  29: 26509671.994 ops/s
# Warmup Iteration  30: 26440770.294 ops/s
Iteration   1: 26463951.738 ops/s
Iteration   2: 26430061.037 ops/s
Iteration   3: 26497707.860 ops/s
Iteration   4: 26526366.367 ops/s
Iteration   5: 26489767.839 ops/s
Iteration   6: 26517923.162 ops/s
Iteration   7: 26501227.328 ops/s
Iteration   8: 26534804.027 ops/s
Iteration   9: 26498257.078 ops/s
Iteration  10: 26498867.553 ops/s
Iteration  11: 26355966.752 ops/s
Iteration  12: 26447147.143 ops/s
Iteration  13: 26480895.174 ops/s
Iteration  14: 26461278.831 ops/s
Iteration  15: 26387010.243 ops/s
Iteration  16: 26352108.102 ops/s
Iteration  17: 26423604.144 ops/s
Iteration  18: 26419224.650 ops/s
Iteration  19: 26445229.632 ops/s
Iteration  20: 26384196.795 ops/s
Iteration  21: 26427824.085 ops/s
Iteration  22: 26453796.940 ops/s
Iteration  23: 26519045.689 ops/s
Iteration  24: 26479839.928 ops/s
Iteration  25: 26458012.327 ops/s
Iteration  26: 26551934.402 ops/s
Iteration  27: 26433027.552 ops/s
Iteration  28: 26525979.697 ops/s
Iteration  29: 26452908.575 ops/s
Iteration  30: 26503495.325 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_noneSatisfy":
  26464048.666 ±(99.9%) 34768.478 ops/s [Average]
  (min, avg, max) = (26352108.102, 26464048.666, 26551934.402), stdev = 52039.826
  CI (99.9%): [26429280.187, 26498817.144] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score       Error  Units
ImmutableSubListTest._Benchmark.benchmark_noneSatisfy  thrpt   30  26464048.666 ± 34768.478  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_noneSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_noneSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10951068.198 ops/s
# Warmup Iteration   2: 22729109.954 ops/s
# Warmup Iteration   3: 21671696.153 ops/s
# Warmup Iteration   4: 20379510.818 ops/s
# Warmup Iteration   5: 22842734.848 ops/s
# Warmup Iteration   6: 22866948.278 ops/s
# Warmup Iteration   7: 22850902.759 ops/s
# Warmup Iteration   8: 22851624.489 ops/s
# Warmup Iteration   9: 22830774.706 ops/s
# Warmup Iteration  10: 22822127.739 ops/s
# Warmup Iteration  11: 22831433.765 ops/s
# Warmup Iteration  12: 22169212.662 ops/s
# Warmup Iteration  13: 22808407.503 ops/s
# Warmup Iteration  14: 22840927.416 ops/s
# Warmup Iteration  15: 22851129.374 ops/s
# Warmup Iteration  16: 22861462.341 ops/s
# Warmup Iteration  17: 22583268.714 ops/s
# Warmup Iteration  18: 22735006.179 ops/s
# Warmup Iteration  19: 22799019.871 ops/s
# Warmup Iteration  20: 22830020.918 ops/s
# Warmup Iteration  21: 22781842.067 ops/s
# Warmup Iteration  22: 22752752.275 ops/s
# Warmup Iteration  23: 22746923.291 ops/s
# Warmup Iteration  24: 22788248.609 ops/s
# Warmup Iteration  25: 22832824.879 ops/s
# Warmup Iteration  26: 22778416.788 ops/s
# Warmup Iteration  27: 22797327.022 ops/s
# Warmup Iteration  28: 22817585.995 ops/s
# Warmup Iteration  29: 22834580.953 ops/s
# Warmup Iteration  30: 22839072.660 ops/s
Iteration   1: 22814689.988 ops/s
Iteration   2: 22818045.373 ops/s
Iteration   3: 22803005.912 ops/s
Iteration   4: 22850835.768 ops/s
Iteration   5: 22844949.025 ops/s
Iteration   6: 22822965.846 ops/s
Iteration   7: 22799489.433 ops/s
Iteration   8: 22863541.319 ops/s
Iteration   9: 22766422.550 ops/s
Iteration  10: 22743530.197 ops/s
Iteration  11: 22817071.876 ops/s
Iteration  12: 22779044.743 ops/s
Iteration  13: 22817564.826 ops/s
Iteration  14: 22811009.878 ops/s
Iteration  15: 22813050.292 ops/s
Iteration  16: 22815118.194 ops/s
Iteration  17: 22875616.060 ops/s
Iteration  18: 22752560.184 ops/s
Iteration  19: 22697016.493 ops/s
Iteration  20: 22703358.070 ops/s
Iteration  21: 22839646.351 ops/s
Iteration  22: 22780424.724 ops/s
Iteration  23: 22792776.831 ops/s
Iteration  24: 22804300.238 ops/s
Iteration  25: 22711669.758 ops/s
Iteration  26: 22766551.559 ops/s
Iteration  27: 22769234.321 ops/s
Iteration  28: 22686791.170 ops/s
Iteration  29: 22669383.134 ops/s
Iteration  30: 22775659.186 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_noneSatisfyWith":
  22786844.110 ±(99.9%) 35239.787 ops/s [Average]
  (min, avg, max) = (22669383.134, 22786844.110, 22875616.060), stdev = 52745.259
  CI (99.9%): [22751604.323, 22822083.897] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
ImmutableSubListTest._Benchmark.benchmark_noneSatisfyWith  thrpt   30  22786844.110 ± 35239.787  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_parallelStream$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_parallelStream

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 17161.815 ops/s
# Warmup Iteration   2: 19817.601 ops/s
# Warmup Iteration   3: 19773.089 ops/s
# Warmup Iteration   4: 19070.425 ops/s
# Warmup Iteration   5: 19622.460 ops/s
# Warmup Iteration   6: 19037.366 ops/s
# Warmup Iteration   7: 21933.373 ops/s
# Warmup Iteration   8: 28437.410 ops/s
# Warmup Iteration   9: 27683.398 ops/s
# Warmup Iteration  10: 28351.279 ops/s
# Warmup Iteration  11: 26349.670 ops/s
# Warmup Iteration  12: 26946.466 ops/s
# Warmup Iteration  13: 27964.972 ops/s
# Warmup Iteration  14: 27659.639 ops/s
# Warmup Iteration  15: 27019.313 ops/s
# Warmup Iteration  16: 26492.883 ops/s
# Warmup Iteration  17: 27166.281 ops/s
# Warmup Iteration  18: 27382.665 ops/s
# Warmup Iteration  19: 26194.034 ops/s
# Warmup Iteration  20: 26440.420 ops/s
# Warmup Iteration  21: 26934.866 ops/s
# Warmup Iteration  22: 28020.500 ops/s
# Warmup Iteration  23: 27571.813 ops/s
# Warmup Iteration  24: 27000.599 ops/s
# Warmup Iteration  25: 25822.398 ops/s
# Warmup Iteration  26: 26609.764 ops/s
# Warmup Iteration  27: 25632.472 ops/s
# Warmup Iteration  28: 27844.134 ops/s
# Warmup Iteration  29: 27114.193 ops/s
# Warmup Iteration  30: 26963.488 ops/s
Iteration   1: 27524.640 ops/s
Iteration   2: 28674.490 ops/s
Iteration   3: 27915.770 ops/s
Iteration   4: 26483.835 ops/s
Iteration   5: 28361.407 ops/s
Iteration   6: 27804.076 ops/s
Iteration   7: 27673.088 ops/s
Iteration   8: 27533.475 ops/s
Iteration   9: 24187.625 ops/s
Iteration  10: 19202.159 ops/s
Iteration  11: 18952.170 ops/s
Iteration  12: 19494.352 ops/s
Iteration  13: 19433.579 ops/s
Iteration  14: 27479.889 ops/s
Iteration  15: 27807.421 ops/s
Iteration  16: 27793.002 ops/s
Iteration  17: 26842.938 ops/s
Iteration  18: 28490.453 ops/s
Iteration  19: 28011.370 ops/s
Iteration  20: 27677.280 ops/s
Iteration  21: 27566.285 ops/s
Iteration  22: 28002.310 ops/s
Iteration  23: 27546.259 ops/s
Iteration  24: 27779.963 ops/s
Iteration  25: 26641.444 ops/s
Iteration  26: 27474.420 ops/s
Iteration  27: 28311.651 ops/s
Iteration  28: 27683.891 ops/s
Iteration  29: 28199.950 ops/s
Iteration  30: 27894.127 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_parallelStream":
  26481.444 ±(99.9%) 1995.394 ops/s [Average]
  (min, avg, max) = (18952.170, 26481.444, 28674.490), stdev = 2986.611
  CI (99.9%): [24486.050, 28476.838] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt      Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_parallelStream  thrpt   30  26481.444 ± 1995.394  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_partition$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_partition

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1715281.712 ops/s
# Warmup Iteration   2: 3642462.464 ops/s
# Warmup Iteration   3: 3765729.658 ops/s
# Warmup Iteration   4: 3770601.228 ops/s
# Warmup Iteration   5: 3175937.668 ops/s
# Warmup Iteration   6: 3791971.289 ops/s
# Warmup Iteration   7: 3774765.149 ops/s
# Warmup Iteration   8: 3790916.961 ops/s
# Warmup Iteration   9: 3789128.868 ops/s
# Warmup Iteration  10: 3790323.839 ops/s
# Warmup Iteration  11: 3787095.648 ops/s
# Warmup Iteration  12: 3792803.129 ops/s
# Warmup Iteration  13: 3786984.403 ops/s
# Warmup Iteration  14: 3792450.558 ops/s
# Warmup Iteration  15: 3785356.868 ops/s
# Warmup Iteration  16: 3793343.809 ops/s
# Warmup Iteration  17: 3790147.323 ops/s
# Warmup Iteration  18: 3784470.325 ops/s
# Warmup Iteration  19: 3787307.659 ops/s
# Warmup Iteration  20: 3795208.478 ops/s
# Warmup Iteration  21: 3783964.466 ops/s
# Warmup Iteration  22: 3783930.145 ops/s
# Warmup Iteration  23: 3792889.038 ops/s
# Warmup Iteration  24: 3783292.512 ops/s
# Warmup Iteration  25: 3790868.584 ops/s
# Warmup Iteration  26: 3775758.833 ops/s
# Warmup Iteration  27: 3792995.438 ops/s
# Warmup Iteration  28: 3794038.283 ops/s
# Warmup Iteration  29: 3791893.122 ops/s
# Warmup Iteration  30: 3789228.741 ops/s
Iteration   1: 3790208.319 ops/s
Iteration   2: 3799525.497 ops/s
Iteration   3: 3792063.760 ops/s
Iteration   4: 3777245.038 ops/s
Iteration   5: 3773787.851 ops/s
Iteration   6: 3797297.130 ops/s
Iteration   7: 3785865.658 ops/s
Iteration   8: 3791115.517 ops/s
Iteration   9: 3787670.552 ops/s
Iteration  10: 3771760.182 ops/s
Iteration  11: 3771549.073 ops/s
Iteration  12: 3777876.865 ops/s
Iteration  13: 3778763.784 ops/s
Iteration  14: 3773445.552 ops/s
Iteration  15: 3767920.779 ops/s
Iteration  16: 3792303.950 ops/s
Iteration  17: 3772021.381 ops/s
Iteration  18: 3796379.734 ops/s
Iteration  19: 3789008.938 ops/s
Iteration  20: 3787116.302 ops/s
Iteration  21: 3790715.276 ops/s
Iteration  22: 3792959.659 ops/s
Iteration  23: 3797300.587 ops/s
Iteration  24: 3799998.742 ops/s
Iteration  25: 3785352.643 ops/s
Iteration  26: 3790305.689 ops/s
Iteration  27: 3798566.006 ops/s
Iteration  28: 3788787.931 ops/s
Iteration  29: 3783338.333 ops/s
Iteration  30: 3786390.639 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_partition":
  3786221.379 ±(99.9%) 6292.149 ops/s [Average]
  (min, avg, max) = (3767920.779, 3786221.379, 3799998.742), stdev = 9417.793
  CI (99.9%): [3779929.230, 3792513.528] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_partition  thrpt   30  3786221.379 ± 6292.149  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_partitionWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_partitionWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1596679.769 ops/s
# Warmup Iteration   2: 5169305.968 ops/s
# Warmup Iteration   3: 5231484.693 ops/s
# Warmup Iteration   4: 4392373.668 ops/s
# Warmup Iteration   5: 5248226.152 ops/s
# Warmup Iteration   6: 5238051.319 ops/s
# Warmup Iteration   7: 5242031.004 ops/s
# Warmup Iteration   8: 5237455.146 ops/s
# Warmup Iteration   9: 5242205.596 ops/s
# Warmup Iteration  10: 5230068.432 ops/s
# Warmup Iteration  11: 5193279.387 ops/s
# Warmup Iteration  12: 5224694.618 ops/s
# Warmup Iteration  13: 5244222.940 ops/s
# Warmup Iteration  14: 5241951.079 ops/s
# Warmup Iteration  15: 5244978.773 ops/s
# Warmup Iteration  16: 5244420.844 ops/s
# Warmup Iteration  17: 5221414.090 ops/s
# Warmup Iteration  18: 5229448.311 ops/s
# Warmup Iteration  19: 5220621.275 ops/s
# Warmup Iteration  20: 5238435.340 ops/s
# Warmup Iteration  21: 5241402.699 ops/s
# Warmup Iteration  22: 5244290.955 ops/s
# Warmup Iteration  23: 5233498.162 ops/s
# Warmup Iteration  24: 5234950.037 ops/s
# Warmup Iteration  25: 5227232.459 ops/s
# Warmup Iteration  26: 5226084.178 ops/s
# Warmup Iteration  27: 5227515.862 ops/s
# Warmup Iteration  28: 5231288.575 ops/s
# Warmup Iteration  29: 5235764.562 ops/s
# Warmup Iteration  30: 5220393.020 ops/s
Iteration   1: 5200509.757 ops/s
Iteration   2: 5179211.477 ops/s
Iteration   3: 5248841.587 ops/s
Iteration   4: 5249851.916 ops/s
Iteration   5: 5231974.328 ops/s
Iteration   6: 5241435.701 ops/s
Iteration   7: 5216775.903 ops/s
Iteration   8: 5240526.772 ops/s
Iteration   9: 5237779.587 ops/s
Iteration  10: 5246309.963 ops/s
Iteration  11: 5245909.669 ops/s
Iteration  12: 5242079.200 ops/s
Iteration  13: 5247913.633 ops/s
Iteration  14: 5223209.054 ops/s
Iteration  15: 5212217.281 ops/s
Iteration  16: 5238819.330 ops/s
Iteration  17: 5237461.779 ops/s
Iteration  18: 5241232.776 ops/s
Iteration  19: 5229176.401 ops/s
Iteration  20: 5248370.951 ops/s
Iteration  21: 5238386.679 ops/s
Iteration  22: 5243739.458 ops/s
Iteration  23: 5230206.033 ops/s
Iteration  24: 5236770.884 ops/s
Iteration  25: 5245792.565 ops/s
Iteration  26: 5242701.377 ops/s
Iteration  27: 5239000.887 ops/s
Iteration  28: 5235230.484 ops/s
Iteration  29: 5234103.560 ops/s
Iteration  30: 5248975.044 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_partitionWhile":
  5235150.468 ±(99.9%) 10402.571 ops/s [Average]
  (min, avg, max) = (5179211.477, 5235150.468, 5249851.916), stdev = 15570.079
  CI (99.9%): [5224747.897, 5245553.038] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
ImmutableSubListTest._Benchmark.benchmark_partitionWhile  thrpt   30  5235150.468 ± 10402.571  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_partitionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_partitionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1376764.957 ops/s
# Warmup Iteration   2: 2825715.068 ops/s
# Warmup Iteration   3: 2933281.303 ops/s
# Warmup Iteration   4: 2944289.549 ops/s
# Warmup Iteration   5: 2473659.517 ops/s
# Warmup Iteration   6: 2955220.253 ops/s
# Warmup Iteration   7: 2955572.084 ops/s
# Warmup Iteration   8: 2947908.089 ops/s
# Warmup Iteration   9: 2956274.443 ops/s
# Warmup Iteration  10: 2953530.233 ops/s
# Warmup Iteration  11: 2955232.657 ops/s
# Warmup Iteration  12: 2953521.254 ops/s
# Warmup Iteration  13: 2954776.706 ops/s
# Warmup Iteration  14: 2954984.226 ops/s
# Warmup Iteration  15: 2942676.992 ops/s
# Warmup Iteration  16: 2951633.730 ops/s
# Warmup Iteration  17: 2953145.716 ops/s
# Warmup Iteration  18: 2955505.928 ops/s
# Warmup Iteration  19: 2957533.196 ops/s
# Warmup Iteration  20: 2957653.745 ops/s
# Warmup Iteration  21: 2954273.636 ops/s
# Warmup Iteration  22: 2957037.840 ops/s
# Warmup Iteration  23: 2947000.814 ops/s
# Warmup Iteration  24: 2955161.238 ops/s
# Warmup Iteration  25: 2956721.135 ops/s
# Warmup Iteration  26: 2952373.679 ops/s
# Warmup Iteration  27: 2955531.091 ops/s
# Warmup Iteration  28: 2954012.352 ops/s
# Warmup Iteration  29: 2957518.230 ops/s
# Warmup Iteration  30: 2954122.440 ops/s
Iteration   1: 2956722.109 ops/s
Iteration   2: 2955951.315 ops/s
Iteration   3: 2947157.311 ops/s
Iteration   4: 2955052.596 ops/s
Iteration   5: 2957770.579 ops/s
Iteration   6: 2953390.053 ops/s
Iteration   7: 2956140.411 ops/s
Iteration   8: 2955932.756 ops/s
Iteration   9: 2955660.147 ops/s
Iteration  10: 2954273.649 ops/s
Iteration  11: 2951847.093 ops/s
Iteration  12: 2960104.065 ops/s
Iteration  13: 2958341.584 ops/s
Iteration  14: 2953755.344 ops/s
Iteration  15: 2953029.080 ops/s
Iteration  16: 2963551.030 ops/s
Iteration  17: 2953251.172 ops/s
Iteration  18: 2956704.195 ops/s
Iteration  19: 2959356.042 ops/s
Iteration  20: 2955954.584 ops/s
Iteration  21: 2943306.009 ops/s
Iteration  22: 2952374.040 ops/s
Iteration  23: 2959020.990 ops/s
Iteration  24: 2950243.438 ops/s
Iteration  25: 2958102.748 ops/s
Iteration  26: 2957102.337 ops/s
Iteration  27: 2957314.193 ops/s
Iteration  28: 2952525.205 ops/s
Iteration  29: 2956397.857 ops/s
Iteration  30: 2959814.032 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_partitionWith":
  2955338.199 ±(99.9%) 2660.929 ops/s [Average]
  (min, avg, max) = (2943306.009, 2955338.199, 2963551.030), stdev = 3982.753
  CI (99.9%): [2952677.270, 2957999.127] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_partitionWith  thrpt   30  2955338.199 ± 2660.929  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3180362.107 ops/s
# Warmup Iteration   2: 7226273.087 ops/s
# Warmup Iteration   3: 7286855.136 ops/s
# Warmup Iteration   4: 6101097.291 ops/s
# Warmup Iteration   5: 7282860.149 ops/s
# Warmup Iteration   6: 7274681.163 ops/s
# Warmup Iteration   7: 7244106.865 ops/s
# Warmup Iteration   8: 7256958.634 ops/s
# Warmup Iteration   9: 7265567.916 ops/s
# Warmup Iteration  10: 7258945.955 ops/s
# Warmup Iteration  11: 7272772.847 ops/s
# Warmup Iteration  12: 7260209.787 ops/s
# Warmup Iteration  13: 7257794.357 ops/s
# Warmup Iteration  14: 7265106.859 ops/s
# Warmup Iteration  15: 7261200.078 ops/s
# Warmup Iteration  16: 7285995.519 ops/s
# Warmup Iteration  17: 7286009.071 ops/s
# Warmup Iteration  18: 7276363.620 ops/s
# Warmup Iteration  19: 7306550.384 ops/s
# Warmup Iteration  20: 7319246.014 ops/s
# Warmup Iteration  21: 7305060.609 ops/s
# Warmup Iteration  22: 7301914.949 ops/s
# Warmup Iteration  23: 7292224.334 ops/s
# Warmup Iteration  24: 7298205.776 ops/s
# Warmup Iteration  25: 7259786.515 ops/s
# Warmup Iteration  26: 7287318.956 ops/s
# Warmup Iteration  27: 7301303.046 ops/s
# Warmup Iteration  28: 7308460.419 ops/s
# Warmup Iteration  29: 7311161.905 ops/s
# Warmup Iteration  30: 7299307.793 ops/s
Iteration   1: 7292227.308 ops/s
Iteration   2: 7302507.107 ops/s
Iteration   3: 7295039.096 ops/s
Iteration   4: 7327122.632 ops/s
Iteration   5: 7259319.482 ops/s
Iteration   6: 7310818.930 ops/s
Iteration   7: 7260554.906 ops/s
Iteration   8: 7264913.142 ops/s
Iteration   9: 7255690.775 ops/s
Iteration  10: 7276488.078 ops/s
Iteration  11: 7267619.388 ops/s
Iteration  12: 7300119.449 ops/s
Iteration  13: 7303042.791 ops/s
Iteration  14: 7317646.921 ops/s
Iteration  15: 7299602.293 ops/s
Iteration  16: 7325503.439 ops/s
Iteration  17: 7301987.959 ops/s
Iteration  18: 7313633.305 ops/s
Iteration  19: 7297287.498 ops/s
Iteration  20: 7288644.867 ops/s
Iteration  21: 7278531.324 ops/s
Iteration  22: 7301285.837 ops/s
Iteration  23: 7305609.836 ops/s
Iteration  24: 7297140.910 ops/s
Iteration  25: 7299297.322 ops/s
Iteration  26: 7303281.400 ops/s
Iteration  27: 7274018.146 ops/s
Iteration  28: 7319482.718 ops/s
Iteration  29: 7302018.536 ops/s
Iteration  30: 7309981.194 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_reject":
  7295013.886 ±(99.9%) 13114.527 ops/s [Average]
  (min, avg, max) = (7255690.775, 7295013.886, 7327122.632), stdev = 19629.208
  CI (99.9%): [7281899.360, 7308128.413] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
ImmutableSubListTest._Benchmark.benchmark_reject  thrpt   30  7295013.886 ± 13114.527  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_rejectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_rejectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2080917.029 ops/s
# Warmup Iteration   2: 4149838.432 ops/s
# Warmup Iteration   3: 4353804.183 ops/s
# Warmup Iteration   4: 4357571.976 ops/s
# Warmup Iteration   5: 3656257.406 ops/s
# Warmup Iteration   6: 4372588.655 ops/s
# Warmup Iteration   7: 4382363.475 ops/s
# Warmup Iteration   8: 4389055.406 ops/s
# Warmup Iteration   9: 4394923.061 ops/s
# Warmup Iteration  10: 4384143.044 ops/s
# Warmup Iteration  11: 4390508.634 ops/s
# Warmup Iteration  12: 4386190.422 ops/s
# Warmup Iteration  13: 4391989.733 ops/s
# Warmup Iteration  14: 4387626.083 ops/s
# Warmup Iteration  15: 4392010.541 ops/s
# Warmup Iteration  16: 4385080.817 ops/s
# Warmup Iteration  17: 4372446.237 ops/s
# Warmup Iteration  18: 4389802.662 ops/s
# Warmup Iteration  19: 4387019.634 ops/s
# Warmup Iteration  20: 4388033.932 ops/s
# Warmup Iteration  21: 4228907.648 ops/s
# Warmup Iteration  22: 4385411.297 ops/s
# Warmup Iteration  23: 4389357.711 ops/s
# Warmup Iteration  24: 4377839.800 ops/s
# Warmup Iteration  25: 4395053.522 ops/s
# Warmup Iteration  26: 4369973.061 ops/s
# Warmup Iteration  27: 4371266.649 ops/s
# Warmup Iteration  28: 4388796.837 ops/s
# Warmup Iteration  29: 4367356.482 ops/s
# Warmup Iteration  30: 4388831.985 ops/s
Iteration   1: 4388034.288 ops/s
Iteration   2: 4395524.198 ops/s
Iteration   3: 4385377.683 ops/s
Iteration   4: 4384157.553 ops/s
Iteration   5: 4388930.811 ops/s
Iteration   6: 4389002.204 ops/s
Iteration   7: 4374601.380 ops/s
Iteration   8: 4385677.191 ops/s
Iteration   9: 4389740.334 ops/s
Iteration  10: 4386840.877 ops/s
Iteration  11: 4388467.843 ops/s
Iteration  12: 4409983.548 ops/s
Iteration  13: 4375324.236 ops/s
Iteration  14: 4386748.438 ops/s
Iteration  15: 4394449.431 ops/s
Iteration  16: 4386171.663 ops/s
Iteration  17: 4399353.937 ops/s
Iteration  18: 4379267.861 ops/s
Iteration  19: 4389451.248 ops/s
Iteration  20: 4376340.979 ops/s
Iteration  21: 4377776.433 ops/s
Iteration  22: 4387799.400 ops/s
Iteration  23: 4388642.975 ops/s
Iteration  24: 4387041.369 ops/s
Iteration  25: 4393547.355 ops/s
Iteration  26: 4391070.316 ops/s
Iteration  27: 4388578.222 ops/s
Iteration  28: 4395595.252 ops/s
Iteration  29: 4397453.931 ops/s
Iteration  30: 4378756.471 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_rejectWith":
  4387990.248 ±(99.9%) 5088.538 ops/s [Average]
  (min, avg, max) = (4374601.380, 4387990.248, 4409983.548), stdev = 7616.284
  CI (99.9%): [4382901.710, 4393078.785] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_rejectWith  thrpt   30  4387990.248 ± 5088.538  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_rejectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_rejectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3025079.926 ops/s
# Warmup Iteration   2: 8704954.830 ops/s
# Warmup Iteration   3: 8724705.509 ops/s
# Warmup Iteration   4: 7355175.985 ops/s
# Warmup Iteration   5: 8730928.613 ops/s
# Warmup Iteration   6: 8703655.588 ops/s
# Warmup Iteration   7: 8729396.580 ops/s
# Warmup Iteration   8: 8710219.628 ops/s
# Warmup Iteration   9: 8715668.124 ops/s
# Warmup Iteration  10: 8710172.116 ops/s
# Warmup Iteration  11: 8727587.654 ops/s
# Warmup Iteration  12: 8673718.869 ops/s
# Warmup Iteration  13: 8728151.761 ops/s
# Warmup Iteration  14: 8704345.147 ops/s
# Warmup Iteration  15: 8750061.589 ops/s
# Warmup Iteration  16: 8724486.643 ops/s
# Warmup Iteration  17: 8740451.436 ops/s
# Warmup Iteration  18: 8720913.467 ops/s
# Warmup Iteration  19: 8731875.992 ops/s
# Warmup Iteration  20: 8720697.503 ops/s
# Warmup Iteration  21: 8702564.289 ops/s
# Warmup Iteration  22: 8733300.300 ops/s
# Warmup Iteration  23: 8735308.556 ops/s
# Warmup Iteration  24: 8739208.771 ops/s
# Warmup Iteration  25: 8732031.894 ops/s
# Warmup Iteration  26: 8739165.964 ops/s
# Warmup Iteration  27: 8738285.356 ops/s
# Warmup Iteration  28: 8718600.506 ops/s
# Warmup Iteration  29: 8735258.601 ops/s
# Warmup Iteration  30: 8716869.518 ops/s
Iteration   1: 8726759.720 ops/s
Iteration   2: 8744677.359 ops/s
Iteration   3: 8747883.883 ops/s
Iteration   4: 8728676.550 ops/s
Iteration   5: 8723534.389 ops/s
Iteration   6: 8717645.502 ops/s
Iteration   7: 8706759.180 ops/s
Iteration   8: 8709585.352 ops/s
Iteration   9: 8723458.356 ops/s
Iteration  10: 8747314.195 ops/s
Iteration  11: 8723754.120 ops/s
Iteration  12: 8714426.802 ops/s
Iteration  13: 8719592.800 ops/s
Iteration  14: 8740535.399 ops/s
Iteration  15: 8710048.110 ops/s
Iteration  16: 8734865.077 ops/s
Iteration  17: 8720663.004 ops/s
Iteration  18: 8734920.797 ops/s
Iteration  19: 8748976.192 ops/s
Iteration  20: 8732753.166 ops/s
Iteration  21: 8735956.188 ops/s
Iteration  22: 8727498.689 ops/s
Iteration  23: 8732056.410 ops/s
Iteration  24: 8712477.644 ops/s
Iteration  25: 8716770.065 ops/s
Iteration  26: 8747128.047 ops/s
Iteration  27: 8757836.013 ops/s
Iteration  28: 8718409.235 ops/s
Iteration  29: 8709517.720 ops/s
Iteration  30: 8724338.139 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_rejectWithIndex":
  8727960.603 ±(99.9%) 9201.327 ops/s [Average]
  (min, avg, max) = (8706759.180, 8727960.603, 8757836.013), stdev = 13772.114
  CI (99.9%): [8718759.276, 8737161.930] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_rejectWithIndex  thrpt   30  8727960.603 ± 9201.327  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_rejectWithIndexWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_rejectWithIndexWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2474834.780 ops/s
# Warmup Iteration   2: 5800128.746 ops/s
# Warmup Iteration   3: 4898504.542 ops/s
# Warmup Iteration   4: 5851625.403 ops/s
# Warmup Iteration   5: 5841860.881 ops/s
# Warmup Iteration   6: 5860004.409 ops/s
# Warmup Iteration   7: 5840869.849 ops/s
# Warmup Iteration   8: 5843281.302 ops/s
# Warmup Iteration   9: 5850360.612 ops/s
# Warmup Iteration  10: 5829632.010 ops/s
# Warmup Iteration  11: 5839066.307 ops/s
# Warmup Iteration  12: 5831174.122 ops/s
# Warmup Iteration  13: 5839056.251 ops/s
# Warmup Iteration  14: 5844599.914 ops/s
# Warmup Iteration  15: 5846769.633 ops/s
# Warmup Iteration  16: 5840676.516 ops/s
# Warmup Iteration  17: 5848713.933 ops/s
# Warmup Iteration  18: 5851512.865 ops/s
# Warmup Iteration  19: 5848389.262 ops/s
# Warmup Iteration  20: 5767586.867 ops/s
# Warmup Iteration  21: 5837086.931 ops/s
# Warmup Iteration  22: 5847091.442 ops/s
# Warmup Iteration  23: 5841007.690 ops/s
# Warmup Iteration  24: 5841472.038 ops/s
# Warmup Iteration  25: 5844154.180 ops/s
# Warmup Iteration  26: 5858921.670 ops/s
# Warmup Iteration  27: 5848711.149 ops/s
# Warmup Iteration  28: 5842379.585 ops/s
# Warmup Iteration  29: 5840783.747 ops/s
# Warmup Iteration  30: 5825951.517 ops/s
Iteration   1: 5840577.850 ops/s
Iteration   2: 5851020.795 ops/s
Iteration   3: 5848360.407 ops/s
Iteration   4: 5845051.728 ops/s
Iteration   5: 5865852.747 ops/s
Iteration   6: 5841775.539 ops/s
Iteration   7: 5841105.715 ops/s
Iteration   8: 5834653.466 ops/s
Iteration   9: 5851018.455 ops/s
Iteration  10: 5848461.914 ops/s
Iteration  11: 5859622.084 ops/s
Iteration  12: 5834321.272 ops/s
Iteration  13: 5837798.367 ops/s
Iteration  14: 5830830.699 ops/s
Iteration  15: 5852398.332 ops/s
Iteration  16: 5860388.815 ops/s
Iteration  17: 5854287.597 ops/s
Iteration  18: 5863654.474 ops/s
Iteration  19: 5828145.655 ops/s
Iteration  20: 5851816.201 ops/s
Iteration  21: 5845151.085 ops/s
Iteration  22: 5862130.799 ops/s
Iteration  23: 5845250.065 ops/s
Iteration  24: 5829610.422 ops/s
Iteration  25: 5771704.541 ops/s
Iteration  26: 5777112.148 ops/s
Iteration  27: 5830755.704 ops/s
Iteration  28: 5847229.193 ops/s
Iteration  29: 5851935.475 ops/s
Iteration  30: 5838508.861 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_rejectWithIndexWithTarget":
  5841351.013 ±(99.9%) 13997.742 ops/s [Average]
  (min, avg, max) = (5771704.541, 5841351.013, 5865852.747), stdev = 20951.163
  CI (99.9%): [5827353.271, 5855348.755] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
ImmutableSubListTest._Benchmark.benchmark_rejectWithIndexWithTarget  thrpt   30  5841351.013 ± 13997.742  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_rejectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_rejectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2316343.233 ops/s
# Warmup Iteration   2: 4737251.930 ops/s
# Warmup Iteration   3: 4828284.880 ops/s
# Warmup Iteration   4: 4847730.950 ops/s
# Warmup Iteration   5: 4101278.876 ops/s
# Warmup Iteration   6: 4864930.786 ops/s
# Warmup Iteration   7: 4881220.101 ops/s
# Warmup Iteration   8: 4876988.401 ops/s
# Warmup Iteration   9: 4886364.612 ops/s
# Warmup Iteration  10: 4861827.827 ops/s
# Warmup Iteration  11: 4876008.282 ops/s
# Warmup Iteration  12: 4872553.733 ops/s
# Warmup Iteration  13: 4879966.242 ops/s
# Warmup Iteration  14: 4858885.962 ops/s
# Warmup Iteration  15: 4878836.851 ops/s
# Warmup Iteration  16: 4868382.316 ops/s
# Warmup Iteration  17: 4870466.554 ops/s
# Warmup Iteration  18: 4862669.355 ops/s
# Warmup Iteration  19: 4871571.384 ops/s
# Warmup Iteration  20: 4876624.389 ops/s
# Warmup Iteration  21: 4877343.870 ops/s
# Warmup Iteration  22: 4858634.386 ops/s
# Warmup Iteration  23: 4863054.664 ops/s
# Warmup Iteration  24: 4875956.977 ops/s
# Warmup Iteration  25: 4862530.048 ops/s
# Warmup Iteration  26: 4855870.848 ops/s
# Warmup Iteration  27: 4870554.724 ops/s
# Warmup Iteration  28: 4863605.842 ops/s
# Warmup Iteration  29: 4866753.092 ops/s
# Warmup Iteration  30: 4879466.787 ops/s
Iteration   1: 4865756.208 ops/s
Iteration   2: 4866140.627 ops/s
Iteration   3: 4883981.828 ops/s
Iteration   4: 4879710.687 ops/s
Iteration   5: 4871364.781 ops/s
Iteration   6: 4877925.096 ops/s
Iteration   7: 4882341.411 ops/s
Iteration   8: 4870892.999 ops/s
Iteration   9: 4871698.315 ops/s
Iteration  10: 4871223.560 ops/s
Iteration  11: 4880194.064 ops/s
Iteration  12: 4859181.149 ops/s
Iteration  13: 4859429.107 ops/s
Iteration  14: 4867799.634 ops/s
Iteration  15: 4883550.323 ops/s
Iteration  16: 4873906.868 ops/s
Iteration  17: 4867188.108 ops/s
Iteration  18: 4869495.912 ops/s
Iteration  19: 4852727.635 ops/s
Iteration  20: 4851221.326 ops/s
Iteration  21: 4832952.397 ops/s
Iteration  22: 4843093.471 ops/s
Iteration  23: 4869129.348 ops/s
Iteration  24: 4869529.285 ops/s
Iteration  25: 4868998.893 ops/s
Iteration  26: 4873989.434 ops/s
Iteration  27: 4871391.301 ops/s
Iteration  28: 4866752.322 ops/s
Iteration  29: 4874982.203 ops/s
Iteration  30: 4882445.731 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_rejectWith_target":
  4868633.134 ±(99.9%) 7837.705 ops/s [Average]
  (min, avg, max) = (4832952.397, 4868633.134, 4883981.828), stdev = 11731.109
  CI (99.9%): [4860795.429, 4876470.839] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_rejectWith_target  thrpt   30  4868633.134 ± 7837.705  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_reject_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_reject_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5402196.714 ops/s
# Warmup Iteration   2: 11668888.994 ops/s
# Warmup Iteration   3: 10036638.763 ops/s
# Warmup Iteration   4: 11788126.098 ops/s
# Warmup Iteration   5: 11793703.946 ops/s
# Warmup Iteration   6: 11769562.981 ops/s
# Warmup Iteration   7: 11761703.405 ops/s
# Warmup Iteration   8: 11740851.729 ops/s
# Warmup Iteration   9: 11789793.106 ops/s
# Warmup Iteration  10: 11769606.115 ops/s
# Warmup Iteration  11: 11766027.818 ops/s
# Warmup Iteration  12: 11765724.516 ops/s
# Warmup Iteration  13: 11779454.954 ops/s
# Warmup Iteration  14: 11793421.155 ops/s
# Warmup Iteration  15: 11803778.479 ops/s
# Warmup Iteration  16: 11785290.493 ops/s
# Warmup Iteration  17: 11767055.400 ops/s
# Warmup Iteration  18: 11785968.249 ops/s
# Warmup Iteration  19: 11759309.496 ops/s
# Warmup Iteration  20: 11770988.393 ops/s
# Warmup Iteration  21: 11774551.316 ops/s
# Warmup Iteration  22: 11794147.888 ops/s
# Warmup Iteration  23: 11783212.750 ops/s
# Warmup Iteration  24: 11763876.029 ops/s
# Warmup Iteration  25: 11785510.866 ops/s
# Warmup Iteration  26: 11798666.470 ops/s
# Warmup Iteration  27: 11786756.507 ops/s
# Warmup Iteration  28: 11774912.251 ops/s
# Warmup Iteration  29: 11775370.156 ops/s
# Warmup Iteration  30: 11766706.865 ops/s
Iteration   1: 11793200.085 ops/s
Iteration   2: 11808106.313 ops/s
Iteration   3: 11783572.441 ops/s
Iteration   4: 11777231.985 ops/s
Iteration   5: 11742818.631 ops/s
Iteration   6: 11780587.067 ops/s
Iteration   7: 11790119.263 ops/s
Iteration   8: 11815512.697 ops/s
Iteration   9: 11761141.127 ops/s
Iteration  10: 11792623.193 ops/s
Iteration  11: 11782429.075 ops/s
Iteration  12: 11771581.372 ops/s
Iteration  13: 11774304.177 ops/s
Iteration  14: 11758813.253 ops/s
Iteration  15: 11790285.112 ops/s
Iteration  16: 11792488.046 ops/s
Iteration  17: 11767187.201 ops/s
Iteration  18: 11768107.329 ops/s
Iteration  19: 11745140.412 ops/s
Iteration  20: 11792571.796 ops/s
Iteration  21: 11788133.373 ops/s
Iteration  22: 11781638.720 ops/s
Iteration  23: 11743437.963 ops/s
Iteration  24: 11801943.837 ops/s
Iteration  25: 11806213.357 ops/s
Iteration  26: 11810479.171 ops/s
Iteration  27: 11826030.685 ops/s
Iteration  28: 11759315.848 ops/s
Iteration  29: 11784669.400 ops/s
Iteration  30: 11790053.346 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_reject_target":
  11782657.876 ±(99.9%) 13984.510 ops/s [Average]
  (min, avg, max) = (11742818.631, 11782657.876, 11826030.685), stdev = 20931.358
  CI (99.9%): [11768673.366, 11796642.386] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
ImmutableSubListTest._Benchmark.benchmark_reject_target  thrpt   30  11782657.876 ± 13984.510  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 724307.525 ops/s
# Warmup Iteration   2: 774654.995 ops/s
# Warmup Iteration   3: 982567.959 ops/s
# Warmup Iteration   4: 979385.681 ops/s
# Warmup Iteration   5: 972253.761 ops/s
# Warmup Iteration   6: 982230.412 ops/s
# Warmup Iteration   7: 978343.875 ops/s
# Warmup Iteration   8: 979668.473 ops/s
# Warmup Iteration   9: 978740.055 ops/s
# Warmup Iteration  10: 977798.503 ops/s
# Warmup Iteration  11: 948674.962 ops/s
# Warmup Iteration  12: 859214.666 ops/s
# Warmup Iteration  13: 975998.398 ops/s
# Warmup Iteration  14: 978202.365 ops/s
# Warmup Iteration  15: 979559.355 ops/s
# Warmup Iteration  16: 974727.510 ops/s
# Warmup Iteration  17: 1032537.859 ops/s
# Warmup Iteration  18: 1034189.470 ops/s
# Warmup Iteration  19: 1040601.669 ops/s
# Warmup Iteration  20: 1038682.748 ops/s
# Warmup Iteration  21: 1033608.277 ops/s
# Warmup Iteration  22: 1035244.186 ops/s
# Warmup Iteration  23: 1030687.251 ops/s
# Warmup Iteration  24: 1037207.878 ops/s
# Warmup Iteration  25: 1041585.159 ops/s
# Warmup Iteration  26: 1036946.390 ops/s
# Warmup Iteration  27: 1036919.268 ops/s
# Warmup Iteration  28: 1040483.283 ops/s
# Warmup Iteration  29: 1040547.512 ops/s
# Warmup Iteration  30: 1034595.842 ops/s
Iteration   1: 1038970.932 ops/s
Iteration   2: 1039425.454 ops/s
Iteration   3: 1044432.109 ops/s
Iteration   4: 1042154.627 ops/s
Iteration   5: 1040099.796 ops/s
Iteration   6: 1039736.735 ops/s
Iteration   7: 1042741.050 ops/s
Iteration   8: 1042112.826 ops/s
Iteration   9: 1037783.075 ops/s
Iteration  10: 1040470.887 ops/s
Iteration  11: 1038303.761 ops/s
Iteration  12: 1037497.187 ops/s
Iteration  13: 1041194.685 ops/s
Iteration  14: 1028993.025 ops/s
Iteration  15: 1032353.322 ops/s
Iteration  16: 1034815.156 ops/s
Iteration  17: 1008661.763 ops/s
Iteration  18: 1036266.893 ops/s
Iteration  19: 1043135.613 ops/s
Iteration  20: 1043323.033 ops/s
Iteration  21: 1043472.978 ops/s
Iteration  22: 1042613.668 ops/s
Iteration  23: 1034868.512 ops/s
Iteration  24: 1036410.737 ops/s
Iteration  25: 1040575.111 ops/s
Iteration  26: 1040789.559 ops/s
Iteration  27: 1039891.106 ops/s
Iteration  28: 1040646.701 ops/s
Iteration  29: 1034927.752 ops/s
Iteration  30: 1041688.234 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_remove":
  1038278.543 ±(99.9%) 4431.773 ops/s [Average]
  (min, avg, max) = (1008661.763, 1038278.543, 1044432.109), stdev = 6633.270
  CI (99.9%): [1033846.770, 1042710.316] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_remove  thrpt   30  1038278.543 ± 4431.773  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 621073.733 ops/s
# Warmup Iteration   2: 757121.491 ops/s
# Warmup Iteration   3: 938965.652 ops/s
# Warmup Iteration   4: 934665.932 ops/s
# Warmup Iteration   5: 927842.942 ops/s
# Warmup Iteration   6: 941129.506 ops/s
# Warmup Iteration   7: 942093.779 ops/s
# Warmup Iteration   8: 943628.890 ops/s
# Warmup Iteration   9: 793823.730 ops/s
# Warmup Iteration  10: 945057.276 ops/s
# Warmup Iteration  11: 942131.742 ops/s
# Warmup Iteration  12: 942809.205 ops/s
# Warmup Iteration  13: 945679.497 ops/s
# Warmup Iteration  14: 942629.914 ops/s
# Warmup Iteration  15: 942769.058 ops/s
# Warmup Iteration  16: 943399.223 ops/s
# Warmup Iteration  17: 994735.257 ops/s
# Warmup Iteration  18: 994682.506 ops/s
# Warmup Iteration  19: 994559.871 ops/s
# Warmup Iteration  20: 995216.290 ops/s
# Warmup Iteration  21: 995853.328 ops/s
# Warmup Iteration  22: 996595.287 ops/s
# Warmup Iteration  23: 994741.257 ops/s
# Warmup Iteration  24: 991881.785 ops/s
# Warmup Iteration  25: 993668.102 ops/s
# Warmup Iteration  26: 994947.500 ops/s
# Warmup Iteration  27: 997257.480 ops/s
# Warmup Iteration  28: 993225.072 ops/s
# Warmup Iteration  29: 996114.866 ops/s
# Warmup Iteration  30: 997270.246 ops/s
Iteration   1: 998951.420 ops/s
Iteration   2: 997488.752 ops/s
Iteration   3: 991118.993 ops/s
Iteration   4: 997100.695 ops/s
Iteration   5: 996715.358 ops/s
Iteration   6: 996396.847 ops/s
Iteration   7: 997614.069 ops/s
Iteration   8: 997674.318 ops/s
Iteration   9: 993387.598 ops/s
Iteration  10: 996788.230 ops/s
Iteration  11: 992887.785 ops/s
Iteration  12: 999921.122 ops/s
Iteration  13: 998921.720 ops/s
Iteration  14: 995303.249 ops/s
Iteration  15: 998806.108 ops/s
Iteration  16: 996277.556 ops/s
Iteration  17: 990441.327 ops/s
Iteration  18: 997478.024 ops/s
Iteration  19: 996692.207 ops/s
Iteration  20: 993754.257 ops/s
Iteration  21: 992663.173 ops/s
Iteration  22: 998738.783 ops/s
Iteration  23: 991028.186 ops/s
Iteration  24: 994222.860 ops/s
Iteration  25: 991550.495 ops/s
Iteration  26: 992555.355 ops/s
Iteration  27: 994225.648 ops/s
Iteration  28: 991572.974 ops/s
Iteration  29: 997021.627 ops/s
Iteration  30: 998021.858 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_removeAll":
  995510.686 ±(99.9%) 1877.446 ops/s [Average]
  (min, avg, max) = (990441.327, 995510.686, 999921.122), stdev = 2810.073
  CI (99.9%): [993633.240, 997388.132] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_removeAll  thrpt   30  995510.686 ± 1877.446  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_removeAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_removeAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 733583.985 ops/s
# Warmup Iteration   2: 796417.259 ops/s
# Warmup Iteration   3: 1011461.803 ops/s
# Warmup Iteration   4: 1009078.867 ops/s
# Warmup Iteration   5: 1004301.307 ops/s
# Warmup Iteration   6: 1009665.151 ops/s
# Warmup Iteration   7: 1007921.197 ops/s
# Warmup Iteration   8: 1011087.991 ops/s
# Warmup Iteration   9: 1013115.694 ops/s
# Warmup Iteration  10: 1009404.616 ops/s
# Warmup Iteration  11: 893327.137 ops/s
# Warmup Iteration  12: 959112.514 ops/s
# Warmup Iteration  13: 1008097.074 ops/s
# Warmup Iteration  14: 1006807.747 ops/s
# Warmup Iteration  15: 1006894.695 ops/s
# Warmup Iteration  16: 1004578.611 ops/s
# Warmup Iteration  17: 1071530.354 ops/s
# Warmup Iteration  18: 1077077.482 ops/s
# Warmup Iteration  19: 1074520.153 ops/s
# Warmup Iteration  20: 1073022.754 ops/s
# Warmup Iteration  21: 1075569.585 ops/s
# Warmup Iteration  22: 1076763.477 ops/s
# Warmup Iteration  23: 1064581.163 ops/s
# Warmup Iteration  24: 1069556.828 ops/s
# Warmup Iteration  25: 1068709.164 ops/s
# Warmup Iteration  26: 1076769.352 ops/s
# Warmup Iteration  27: 1075489.356 ops/s
# Warmup Iteration  28: 1069868.214 ops/s
# Warmup Iteration  29: 1074469.567 ops/s
# Warmup Iteration  30: 1075923.829 ops/s
Iteration   1: 1077832.822 ops/s
Iteration   2: 1073069.087 ops/s
Iteration   3: 1072281.395 ops/s
Iteration   4: 1076788.572 ops/s
Iteration   5: 1067424.652 ops/s
Iteration   6: 1071886.775 ops/s
Iteration   7: 1072629.597 ops/s
Iteration   8: 1067720.049 ops/s
Iteration   9: 1066499.481 ops/s
Iteration  10: 1066139.054 ops/s
Iteration  11: 1068514.459 ops/s
Iteration  12: 1077519.398 ops/s
Iteration  13: 1077958.175 ops/s
Iteration  14: 1074426.935 ops/s
Iteration  15: 1072906.240 ops/s
Iteration  16: 1067621.770 ops/s
Iteration  17: 1073999.514 ops/s
Iteration  18: 1074246.215 ops/s
Iteration  19: 1075861.577 ops/s
Iteration  20: 1073641.610 ops/s
Iteration  21: 1074398.847 ops/s
Iteration  22: 1068026.708 ops/s
Iteration  23: 1070103.590 ops/s
Iteration  24: 1069451.000 ops/s
Iteration  25: 1068903.606 ops/s
Iteration  26: 1074773.051 ops/s
Iteration  27: 1071736.774 ops/s
Iteration  28: 1073438.357 ops/s
Iteration  29: 1074264.767 ops/s
Iteration  30: 1078194.770 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_removeAtIndex":
  1072408.628 ±(99.9%) 2426.838 ops/s [Average]
  (min, avg, max) = (1066139.054, 1072408.628, 1078194.770), stdev = 3632.377
  CI (99.9%): [1069981.790, 1074835.466] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_removeAtIndex  thrpt   30  1072408.628 ± 2426.838  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_replaceAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_replaceAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 732892.443 ops/s
# Warmup Iteration   2: 777717.915 ops/s
# Warmup Iteration   3: 1006030.747 ops/s
# Warmup Iteration   4: 997345.453 ops/s
# Warmup Iteration   5: 1003148.029 ops/s
# Warmup Iteration   6: 1004588.746 ops/s
# Warmup Iteration   7: 1000530.797 ops/s
# Warmup Iteration   8: 1005891.799 ops/s
# Warmup Iteration   9: 1007472.163 ops/s
# Warmup Iteration  10: 1007768.346 ops/s
# Warmup Iteration  11: 893827.434 ops/s
# Warmup Iteration  12: 957363.541 ops/s
# Warmup Iteration  13: 1000793.789 ops/s
# Warmup Iteration  14: 1002022.209 ops/s
# Warmup Iteration  15: 1005069.494 ops/s
# Warmup Iteration  16: 1002605.326 ops/s
# Warmup Iteration  17: 1066126.632 ops/s
# Warmup Iteration  18: 1065180.303 ops/s
# Warmup Iteration  19: 1066163.698 ops/s
# Warmup Iteration  20: 1063986.694 ops/s
# Warmup Iteration  21: 1055393.077 ops/s
# Warmup Iteration  22: 1054576.319 ops/s
# Warmup Iteration  23: 1063396.754 ops/s
# Warmup Iteration  24: 1069764.836 ops/s
# Warmup Iteration  25: 1067749.109 ops/s
# Warmup Iteration  26: 1064819.127 ops/s
# Warmup Iteration  27: 1064336.134 ops/s
# Warmup Iteration  28: 1066230.011 ops/s
# Warmup Iteration  29: 1069134.126 ops/s
# Warmup Iteration  30: 1066864.918 ops/s
Iteration   1: 1063242.421 ops/s
Iteration   2: 1071078.091 ops/s
Iteration   3: 1067660.768 ops/s
Iteration   4: 1066255.772 ops/s
Iteration   5: 1066462.883 ops/s
Iteration   6: 1066355.218 ops/s
Iteration   7: 1065290.494 ops/s
Iteration   8: 1069470.314 ops/s
Iteration   9: 1066872.849 ops/s
Iteration  10: 1068560.118 ops/s
Iteration  11: 1058024.173 ops/s
Iteration  12: 1060444.490 ops/s
Iteration  13: 1066670.183 ops/s
Iteration  14: 1065387.529 ops/s
Iteration  15: 1066772.888 ops/s
Iteration  16: 1064447.405 ops/s
Iteration  17: 1066263.369 ops/s
Iteration  18: 1067320.895 ops/s
Iteration  19: 1062495.962 ops/s
Iteration  20: 1064644.601 ops/s
Iteration  21: 1064677.546 ops/s
Iteration  22: 1059980.008 ops/s
Iteration  23: 1061680.933 ops/s
Iteration  24: 1061507.583 ops/s
Iteration  25: 1061127.503 ops/s
Iteration  26: 1064280.416 ops/s
Iteration  27: 1069281.818 ops/s
Iteration  28: 1064486.318 ops/s
Iteration  29: 1065111.709 ops/s
Iteration  30: 1065604.709 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_replaceAll":
  1065048.632 ±(99.9%) 2004.471 ops/s [Average]
  (min, avg, max) = (1058024.173, 1065048.632, 1071078.091), stdev = 3000.198
  CI (99.9%): [1063044.161, 1067053.103] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_replaceAll  thrpt   30  1065048.632 ± 2004.471  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 616235.761 ops/s
# Warmup Iteration   2: 758675.991 ops/s
# Warmup Iteration   3: 943834.457 ops/s
# Warmup Iteration   4: 940031.588 ops/s
# Warmup Iteration   5: 941405.533 ops/s
# Warmup Iteration   6: 944673.999 ops/s
# Warmup Iteration   7: 946763.391 ops/s
# Warmup Iteration   8: 946521.321 ops/s
# Warmup Iteration   9: 795439.785 ops/s
# Warmup Iteration  10: 945682.185 ops/s
# Warmup Iteration  11: 947361.952 ops/s
# Warmup Iteration  12: 946612.001 ops/s
# Warmup Iteration  13: 945571.045 ops/s
# Warmup Iteration  14: 946130.706 ops/s
# Warmup Iteration  15: 941074.418 ops/s
# Warmup Iteration  16: 946316.483 ops/s
# Warmup Iteration  17: 1001492.153 ops/s
# Warmup Iteration  18: 1000689.077 ops/s
# Warmup Iteration  19: 999722.176 ops/s
# Warmup Iteration  20: 995582.981 ops/s
# Warmup Iteration  21: 1000033.176 ops/s
# Warmup Iteration  22: 999706.495 ops/s
# Warmup Iteration  23: 997362.016 ops/s
# Warmup Iteration  24: 991332.013 ops/s
# Warmup Iteration  25: 998989.144 ops/s
# Warmup Iteration  26: 1000260.437 ops/s
# Warmup Iteration  27: 995767.659 ops/s
# Warmup Iteration  28: 995224.400 ops/s
# Warmup Iteration  29: 998112.478 ops/s
# Warmup Iteration  30: 997414.994 ops/s
Iteration   1: 999505.969 ops/s
Iteration   2: 995710.602 ops/s
Iteration   3: 998128.167 ops/s
Iteration   4: 1000635.455 ops/s
Iteration   5: 999647.708 ops/s
Iteration   6: 996674.401 ops/s
Iteration   7: 996575.017 ops/s
Iteration   8: 998135.337 ops/s
Iteration   9: 998224.487 ops/s
Iteration  10: 997607.662 ops/s
Iteration  11: 1001117.965 ops/s
Iteration  12: 997657.234 ops/s
Iteration  13: 997641.027 ops/s
Iteration  14: 995277.393 ops/s
Iteration  15: 998677.237 ops/s
Iteration  16: 997646.697 ops/s
Iteration  17: 997149.035 ops/s
Iteration  18: 997591.238 ops/s
Iteration  19: 1001332.965 ops/s
Iteration  20: 998234.719 ops/s
Iteration  21: 1000484.436 ops/s
Iteration  22: 1002484.617 ops/s
Iteration  23: 998929.121 ops/s
Iteration  24: 994922.354 ops/s
Iteration  25: 1000813.955 ops/s
Iteration  26: 1000924.077 ops/s
Iteration  27: 998874.785 ops/s
Iteration  28: 998815.454 ops/s
Iteration  29: 999094.564 ops/s
Iteration  30: 1000663.597 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_retainAll":
  998639.243 ±(99.9%) 1251.573 ops/s [Average]
  (min, avg, max) = (994922.354, 998639.243, 1002484.617), stdev = 1873.295
  CI (99.9%): [997387.670, 999890.815] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_retainAll  thrpt   30  998639.243 ± 1251.573  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_reverseForEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_reverseForEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5536792.421 ops/s
# Warmup Iteration   2: 12784944.434 ops/s
# Warmup Iteration   3: 12780814.581 ops/s
# Warmup Iteration   4: 10624570.770 ops/s
# Warmup Iteration   5: 12764977.761 ops/s
# Warmup Iteration   6: 12806717.996 ops/s
# Warmup Iteration   7: 12797642.926 ops/s
# Warmup Iteration   8: 12777979.992 ops/s
# Warmup Iteration   9: 12803727.353 ops/s
# Warmup Iteration  10: 12814726.707 ops/s
# Warmup Iteration  11: 12795455.256 ops/s
# Warmup Iteration  12: 12778563.404 ops/s
# Warmup Iteration  13: 12750727.498 ops/s
# Warmup Iteration  14: 12811049.696 ops/s
# Warmup Iteration  15: 12798193.985 ops/s
# Warmup Iteration  16: 12805101.928 ops/s
# Warmup Iteration  17: 12803387.459 ops/s
# Warmup Iteration  18: 12804552.474 ops/s
# Warmup Iteration  19: 12776222.159 ops/s
# Warmup Iteration  20: 12807260.472 ops/s
# Warmup Iteration  21: 12797243.591 ops/s
# Warmup Iteration  22: 12797376.804 ops/s
# Warmup Iteration  23: 12801991.488 ops/s
# Warmup Iteration  24: 12809130.158 ops/s
# Warmup Iteration  25: 12799680.632 ops/s
# Warmup Iteration  26: 12796896.661 ops/s
# Warmup Iteration  27: 12812431.167 ops/s
# Warmup Iteration  28: 12768281.597 ops/s
# Warmup Iteration  29: 12792570.928 ops/s
# Warmup Iteration  30: 12794788.582 ops/s
Iteration   1: 12821242.046 ops/s
Iteration   2: 12809015.465 ops/s
Iteration   3: 12806883.392 ops/s
Iteration   4: 12849806.525 ops/s
Iteration   5: 12828186.472 ops/s
Iteration   6: 12848768.737 ops/s
Iteration   7: 12803613.760 ops/s
Iteration   8: 12792973.454 ops/s
Iteration   9: 12796590.234 ops/s
Iteration  10: 12789313.406 ops/s
Iteration  11: 12799985.264 ops/s
Iteration  12: 12832721.364 ops/s
Iteration  13: 12800048.173 ops/s
Iteration  14: 12801507.559 ops/s
Iteration  15: 12814972.178 ops/s
Iteration  16: 12814188.597 ops/s
Iteration  17: 12817438.367 ops/s
Iteration  18: 12793340.362 ops/s
Iteration  19: 12778447.445 ops/s
Iteration  20: 12839833.982 ops/s
Iteration  21: 12799174.238 ops/s
Iteration  22: 12818104.758 ops/s
Iteration  23: 12802734.230 ops/s
Iteration  24: 12796208.708 ops/s
Iteration  25: 12809301.299 ops/s
Iteration  26: 12797461.345 ops/s
Iteration  27: 12816658.100 ops/s
Iteration  28: 12815516.490 ops/s
Iteration  29: 12804808.265 ops/s
Iteration  30: 12801988.418 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_reverseForEach":
  12810027.754 ±(99.9%) 11297.301 ops/s [Average]
  (min, avg, max) = (12778447.445, 12810027.754, 12849806.525), stdev = 16909.269
  CI (99.9%): [12798730.454, 12821325.055] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score       Error  Units
ImmutableSubListTest._Benchmark.benchmark_reverseForEach  thrpt   30  12810027.754 ± 11297.301  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_reverseForEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_reverseForEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4305313.551 ops/s
# Warmup Iteration   2: 9343336.893 ops/s
# Warmup Iteration   3: 9548279.885 ops/s
# Warmup Iteration   4: 8055022.443 ops/s
# Warmup Iteration   5: 9560231.442 ops/s
# Warmup Iteration   6: 9560165.965 ops/s
# Warmup Iteration   7: 9557818.755 ops/s
# Warmup Iteration   8: 9552341.596 ops/s
# Warmup Iteration   9: 9559584.229 ops/s
# Warmup Iteration  10: 9564029.158 ops/s
# Warmup Iteration  11: 9502619.865 ops/s
# Warmup Iteration  12: 9526702.986 ops/s
# Warmup Iteration  13: 9527174.566 ops/s
# Warmup Iteration  14: 9534673.212 ops/s
# Warmup Iteration  15: 9558970.333 ops/s
# Warmup Iteration  16: 9546352.077 ops/s
# Warmup Iteration  17: 9564491.657 ops/s
# Warmup Iteration  18: 9561219.033 ops/s
# Warmup Iteration  19: 9546464.404 ops/s
# Warmup Iteration  20: 9524501.529 ops/s
# Warmup Iteration  21: 9561487.257 ops/s
# Warmup Iteration  22: 9556908.633 ops/s
# Warmup Iteration  23: 9561188.552 ops/s
# Warmup Iteration  24: 9517404.814 ops/s
# Warmup Iteration  25: 9545926.381 ops/s
# Warmup Iteration  26: 9567104.115 ops/s
# Warmup Iteration  27: 9548173.827 ops/s
# Warmup Iteration  28: 9548508.355 ops/s
# Warmup Iteration  29: 9575684.631 ops/s
# Warmup Iteration  30: 9552787.097 ops/s
Iteration   1: 9579988.811 ops/s
Iteration   2: 9558771.063 ops/s
Iteration   3: 9550115.337 ops/s
Iteration   4: 9537544.883 ops/s
Iteration   5: 9528614.414 ops/s
Iteration   6: 9555281.177 ops/s
Iteration   7: 9556991.640 ops/s
Iteration   8: 9546588.278 ops/s
Iteration   9: 9565855.598 ops/s
Iteration  10: 9547612.203 ops/s
Iteration  11: 9539794.683 ops/s
Iteration  12: 9543163.083 ops/s
Iteration  13: 9565114.772 ops/s
Iteration  14: 9558436.441 ops/s
Iteration  15: 9569004.715 ops/s
Iteration  16: 9552464.068 ops/s
Iteration  17: 9532905.301 ops/s
Iteration  18: 9559806.810 ops/s
Iteration  19: 9581800.267 ops/s
Iteration  20: 9545613.325 ops/s
Iteration  21: 9567891.134 ops/s
Iteration  22: 9558802.993 ops/s
Iteration  23: 9543488.697 ops/s
Iteration  24: 9557487.790 ops/s
Iteration  25: 9554929.752 ops/s
Iteration  26: 9561185.845 ops/s
Iteration  27: 9555803.336 ops/s
Iteration  28: 9563434.255 ops/s
Iteration  29: 9547495.124 ops/s
Iteration  30: 9557775.476 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_reverseForEachWithIndex":
  9554792.042 ±(99.9%) 8237.415 ops/s [Average]
  (min, avg, max) = (9528614.414, 9554792.042, 9581800.267), stdev = 12329.376
  CI (99.9%): [9546554.627, 9563029.458] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_reverseForEachWithIndex  thrpt   30  9554792.042 ± 8237.415  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3068594.812 ops/s
# Warmup Iteration   2: 6829654.229 ops/s
# Warmup Iteration   3: 7047131.067 ops/s
# Warmup Iteration   4: 6331411.699 ops/s
# Warmup Iteration   5: 6613544.535 ops/s
# Warmup Iteration   6: 7036581.369 ops/s
# Warmup Iteration   7: 7046223.385 ops/s
# Warmup Iteration   8: 7031707.337 ops/s
# Warmup Iteration   9: 7058562.986 ops/s
# Warmup Iteration  10: 7050591.243 ops/s
# Warmup Iteration  11: 7049453.009 ops/s
# Warmup Iteration  12: 7046386.910 ops/s
# Warmup Iteration  13: 7049381.759 ops/s
# Warmup Iteration  14: 7048815.789 ops/s
# Warmup Iteration  15: 7061708.293 ops/s
# Warmup Iteration  16: 7049108.899 ops/s
# Warmup Iteration  17: 7041532.837 ops/s
# Warmup Iteration  18: 7038786.287 ops/s
# Warmup Iteration  19: 7043655.868 ops/s
# Warmup Iteration  20: 7043791.541 ops/s
# Warmup Iteration  21: 7044384.119 ops/s
# Warmup Iteration  22: 7035585.416 ops/s
# Warmup Iteration  23: 7046687.451 ops/s
# Warmup Iteration  24: 7038401.293 ops/s
# Warmup Iteration  25: 7027404.718 ops/s
# Warmup Iteration  26: 7049852.124 ops/s
# Warmup Iteration  27: 7050718.077 ops/s
# Warmup Iteration  28: 7044094.159 ops/s
# Warmup Iteration  29: 7028924.496 ops/s
# Warmup Iteration  30: 7050186.809 ops/s
Iteration   1: 7041340.048 ops/s
Iteration   2: 7041311.850 ops/s
Iteration   3: 7035259.439 ops/s
Iteration   4: 7064463.854 ops/s
Iteration   5: 7054884.467 ops/s
Iteration   6: 7042187.856 ops/s
Iteration   7: 7033540.468 ops/s
Iteration   8: 7038413.145 ops/s
Iteration   9: 7053188.240 ops/s
Iteration  10: 7049658.603 ops/s
Iteration  11: 7041025.008 ops/s
Iteration  12: 7039302.133 ops/s
Iteration  13: 7045095.108 ops/s
Iteration  14: 7049124.369 ops/s
Iteration  15: 7053151.512 ops/s
Iteration  16: 7038113.211 ops/s
Iteration  17: 7040823.802 ops/s
Iteration  18: 7043832.270 ops/s
Iteration  19: 7047871.213 ops/s
Iteration  20: 7056755.750 ops/s
Iteration  21: 7039319.931 ops/s
Iteration  22: 7038996.021 ops/s
Iteration  23: 7051338.563 ops/s
Iteration  24: 7046998.049 ops/s
Iteration  25: 7053748.174 ops/s
Iteration  26: 7060308.858 ops/s
Iteration  27: 7048375.240 ops/s
Iteration  28: 7036132.590 ops/s
Iteration  29: 7001386.663 ops/s
Iteration  30: 7007455.446 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_select":
  7043113.396 ±(99.9%) 8713.358 ops/s [Average]
  (min, avg, max) = (7001386.663, 7043113.396, 7064463.854), stdev = 13041.745
  CI (99.9%): [7034400.038, 7051826.754] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_select  thrpt   30  7043113.396 ± 8713.358  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_selectInstancesOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_selectInstancesOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4679972.033 ops/s
# Warmup Iteration   2: 7724926.605 ops/s
# Warmup Iteration   3: 8768690.409 ops/s
# Warmup Iteration   4: 8815330.633 ops/s
# Warmup Iteration   5: 8816179.254 ops/s
# Warmup Iteration   6: 7324901.615 ops/s
# Warmup Iteration   7: 8838346.790 ops/s
# Warmup Iteration   8: 8839832.550 ops/s
# Warmup Iteration   9: 8840982.604 ops/s
# Warmup Iteration  10: 8837234.466 ops/s
# Warmup Iteration  11: 8842807.762 ops/s
# Warmup Iteration  12: 8839060.249 ops/s
# Warmup Iteration  13: 8830575.907 ops/s
# Warmup Iteration  14: 8827074.108 ops/s
# Warmup Iteration  15: 8822452.667 ops/s
# Warmup Iteration  16: 8827880.324 ops/s
# Warmup Iteration  17: 8827036.776 ops/s
# Warmup Iteration  18: 8819263.505 ops/s
# Warmup Iteration  19: 8836648.329 ops/s
# Warmup Iteration  20: 8822194.351 ops/s
# Warmup Iteration  21: 8828804.345 ops/s
# Warmup Iteration  22: 8831800.169 ops/s
# Warmup Iteration  23: 8834685.326 ops/s
# Warmup Iteration  24: 8834020.655 ops/s
# Warmup Iteration  25: 8837200.277 ops/s
# Warmup Iteration  26: 8830852.937 ops/s
# Warmup Iteration  27: 8831924.234 ops/s
# Warmup Iteration  28: 8835659.812 ops/s
# Warmup Iteration  29: 8836117.180 ops/s
# Warmup Iteration  30: 8830047.287 ops/s
Iteration   1: 8831623.463 ops/s
Iteration   2: 8822843.288 ops/s
Iteration   3: 8821399.629 ops/s
Iteration   4: 8842929.204 ops/s
Iteration   5: 8824793.625 ops/s
Iteration   6: 8832409.468 ops/s
Iteration   7: 8833991.861 ops/s
Iteration   8: 8810198.576 ops/s
Iteration   9: 8815519.166 ops/s
Iteration  10: 8833008.482 ops/s
Iteration  11: 8827593.115 ops/s
Iteration  12: 8831221.280 ops/s
Iteration  13: 8839474.312 ops/s
Iteration  14: 8842883.597 ops/s
Iteration  15: 8833849.076 ops/s
Iteration  16: 8799230.071 ops/s
Iteration  17: 8797350.433 ops/s
Iteration  18: 8811765.281 ops/s
Iteration  19: 8809597.263 ops/s
Iteration  20: 8838016.069 ops/s
Iteration  21: 8850071.892 ops/s
Iteration  22: 8826461.347 ops/s
Iteration  23: 8841315.119 ops/s
Iteration  24: 8826237.476 ops/s
Iteration  25: 8838335.804 ops/s
Iteration  26: 8813172.884 ops/s
Iteration  27: 8817541.623 ops/s
Iteration  28: 8825167.508 ops/s
Iteration  29: 8821146.129 ops/s
Iteration  30: 8839828.882 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_selectInstancesOf":
  8826632.531 ±(99.9%) 8756.890 ops/s [Average]
  (min, avg, max) = (8797350.433, 8826632.531, 8850071.892), stdev = 13106.902
  CI (99.9%): [8817875.641, 8835389.421] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_selectInstancesOf  thrpt   30  8826632.531 ± 8756.890  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_selectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_selectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2092973.172 ops/s
# Warmup Iteration   2: 4198584.915 ops/s
# Warmup Iteration   3: 4388790.785 ops/s
# Warmup Iteration   4: 4425268.890 ops/s
# Warmup Iteration   5: 3715501.457 ops/s
# Warmup Iteration   6: 4435158.552 ops/s
# Warmup Iteration   7: 4439434.682 ops/s
# Warmup Iteration   8: 4434348.528 ops/s
# Warmup Iteration   9: 4427227.991 ops/s
# Warmup Iteration  10: 4431412.344 ops/s
# Warmup Iteration  11: 4425679.283 ops/s
# Warmup Iteration  12: 4426978.079 ops/s
# Warmup Iteration  13: 4430741.912 ops/s
# Warmup Iteration  14: 4430649.520 ops/s
# Warmup Iteration  15: 4432967.373 ops/s
# Warmup Iteration  16: 4427414.511 ops/s
# Warmup Iteration  17: 4431736.043 ops/s
# Warmup Iteration  18: 4424642.075 ops/s
# Warmup Iteration  19: 4428894.459 ops/s
# Warmup Iteration  20: 4434603.586 ops/s
# Warmup Iteration  21: 4429978.350 ops/s
# Warmup Iteration  22: 4430190.217 ops/s
# Warmup Iteration  23: 4426611.300 ops/s
# Warmup Iteration  24: 4429242.152 ops/s
# Warmup Iteration  25: 4430625.886 ops/s
# Warmup Iteration  26: 4431182.857 ops/s
# Warmup Iteration  27: 4434485.199 ops/s
# Warmup Iteration  28: 4431403.098 ops/s
# Warmup Iteration  29: 4435191.451 ops/s
# Warmup Iteration  30: 4436125.291 ops/s
Iteration   1: 4433980.611 ops/s
Iteration   2: 4420540.865 ops/s
Iteration   3: 4424244.749 ops/s
Iteration   4: 4438466.016 ops/s
Iteration   5: 4433732.916 ops/s
Iteration   6: 4426925.750 ops/s
Iteration   7: 4438473.552 ops/s
Iteration   8: 4431678.827 ops/s
Iteration   9: 4426373.516 ops/s
Iteration  10: 4430552.309 ops/s
Iteration  11: 4432696.562 ops/s
Iteration  12: 4434901.870 ops/s
Iteration  13: 4429892.526 ops/s
Iteration  14: 4440331.995 ops/s
Iteration  15: 4423712.333 ops/s
Iteration  16: 4426004.680 ops/s
Iteration  17: 4434808.777 ops/s
Iteration  18: 4429563.552 ops/s
Iteration  19: 4426375.648 ops/s
Iteration  20: 4424845.229 ops/s
Iteration  21: 4430658.316 ops/s
Iteration  22: 4436108.619 ops/s
Iteration  23: 4429221.894 ops/s
Iteration  24: 4432193.199 ops/s
Iteration  25: 4425228.072 ops/s
Iteration  26: 4427718.443 ops/s
Iteration  27: 4430617.596 ops/s
Iteration  28: 4435010.164 ops/s
Iteration  29: 4426130.038 ops/s
Iteration  30: 4429564.645 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_selectWith":
  4430351.776 ±(99.9%) 3250.035 ops/s [Average]
  (min, avg, max) = (4420540.865, 4430351.776, 4440331.995), stdev = 4864.500
  CI (99.9%): [4427101.740, 4433601.811] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_selectWith  thrpt   30  4430351.776 ± 3250.035  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_selectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_selectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3177661.760 ops/s
# Warmup Iteration   2: 7500053.627 ops/s
# Warmup Iteration   3: 7511418.697 ops/s
# Warmup Iteration   4: 6334300.470 ops/s
# Warmup Iteration   5: 7557758.528 ops/s
# Warmup Iteration   6: 7565839.636 ops/s
# Warmup Iteration   7: 7498342.563 ops/s
# Warmup Iteration   8: 7517390.719 ops/s
# Warmup Iteration   9: 7537405.741 ops/s
# Warmup Iteration  10: 7553323.778 ops/s
# Warmup Iteration  11: 7526583.844 ops/s
# Warmup Iteration  12: 7530582.334 ops/s
# Warmup Iteration  13: 7537441.053 ops/s
# Warmup Iteration  14: 7551031.636 ops/s
# Warmup Iteration  15: 7534018.666 ops/s
# Warmup Iteration  16: 7541346.767 ops/s
# Warmup Iteration  17: 7561773.597 ops/s
# Warmup Iteration  18: 7553728.712 ops/s
# Warmup Iteration  19: 7549980.540 ops/s
# Warmup Iteration  20: 7536805.207 ops/s
# Warmup Iteration  21: 7541433.533 ops/s
# Warmup Iteration  22: 7548308.011 ops/s
# Warmup Iteration  23: 7549464.526 ops/s
# Warmup Iteration  24: 7537580.164 ops/s
# Warmup Iteration  25: 7548639.965 ops/s
# Warmup Iteration  26: 7558082.062 ops/s
# Warmup Iteration  27: 7538560.066 ops/s
# Warmup Iteration  28: 7556723.959 ops/s
# Warmup Iteration  29: 7557928.352 ops/s
# Warmup Iteration  30: 7536576.300 ops/s
Iteration   1: 7532347.133 ops/s
Iteration   2: 7529875.413 ops/s
Iteration   3: 7529444.962 ops/s
Iteration   4: 7516393.396 ops/s
Iteration   5: 7521526.829 ops/s
Iteration   6: 7527416.839 ops/s
Iteration   7: 7546661.889 ops/s
Iteration   8: 7524611.349 ops/s
Iteration   9: 7547584.462 ops/s
Iteration  10: 7541711.149 ops/s
Iteration  11: 7517932.257 ops/s
Iteration  12: 7532298.738 ops/s
Iteration  13: 7568813.613 ops/s
Iteration  14: 7562190.765 ops/s
Iteration  15: 7508185.424 ops/s
Iteration  16: 7528172.151 ops/s
Iteration  17: 7551520.010 ops/s
Iteration  18: 7547713.003 ops/s
Iteration  19: 7554999.149 ops/s
Iteration  20: 7552147.122 ops/s
Iteration  21: 7530396.046 ops/s
Iteration  22: 7538947.223 ops/s
Iteration  23: 7545591.408 ops/s
Iteration  24: 7538216.653 ops/s
Iteration  25: 7552397.041 ops/s
Iteration  26: 7537962.300 ops/s
Iteration  27: 7539120.056 ops/s
Iteration  28: 7544132.805 ops/s
Iteration  29: 7522314.591 ops/s
Iteration  30: 7542900.318 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_selectWithIndex":
  7537784.136 ±(99.9%) 9394.712 ops/s [Average]
  (min, avg, max) = (7508185.424, 7537784.136, 7568813.613), stdev = 14061.564
  CI (99.9%): [7528389.424, 7547178.849] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_selectWithIndex  thrpt   30  7537784.136 ± 9394.712  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_selectWithIndexWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_selectWithIndexWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2437682.788 ops/s
# Warmup Iteration   2: 5833129.607 ops/s
# Warmup Iteration   3: 4959420.465 ops/s
# Warmup Iteration   4: 5880920.833 ops/s
# Warmup Iteration   5: 5872112.097 ops/s
# Warmup Iteration   6: 5920141.386 ops/s
# Warmup Iteration   7: 5863801.382 ops/s
# Warmup Iteration   8: 5935652.618 ops/s
# Warmup Iteration   9: 5949487.475 ops/s
# Warmup Iteration  10: 5949489.765 ops/s
# Warmup Iteration  11: 5930155.744 ops/s
# Warmup Iteration  12: 5937353.636 ops/s
# Warmup Iteration  13: 5944091.108 ops/s
# Warmup Iteration  14: 5936750.090 ops/s
# Warmup Iteration  15: 5938347.305 ops/s
# Warmup Iteration  16: 5935367.229 ops/s
# Warmup Iteration  17: 5927703.708 ops/s
# Warmup Iteration  18: 5936792.731 ops/s
# Warmup Iteration  19: 5939287.961 ops/s
# Warmup Iteration  20: 5952173.779 ops/s
# Warmup Iteration  21: 5943163.107 ops/s
# Warmup Iteration  22: 5945951.058 ops/s
# Warmup Iteration  23: 5922215.546 ops/s
# Warmup Iteration  24: 5932391.720 ops/s
# Warmup Iteration  25: 5938642.727 ops/s
# Warmup Iteration  26: 5938751.492 ops/s
# Warmup Iteration  27: 5929998.555 ops/s
# Warmup Iteration  28: 5935373.794 ops/s
# Warmup Iteration  29: 5940736.279 ops/s
# Warmup Iteration  30: 5952296.413 ops/s
Iteration   1: 5925248.481 ops/s
Iteration   2: 5917912.994 ops/s
Iteration   3: 5929571.225 ops/s
Iteration   4: 5931296.860 ops/s
Iteration   5: 5937507.345 ops/s
Iteration   6: 5945022.825 ops/s
Iteration   7: 5941264.149 ops/s
Iteration   8: 5953931.441 ops/s
Iteration   9: 5945556.324 ops/s
Iteration  10: 5940940.073 ops/s
Iteration  11: 5915006.197 ops/s
Iteration  12: 5957427.210 ops/s
Iteration  13: 5937516.099 ops/s
Iteration  14: 5957486.121 ops/s
Iteration  15: 5934406.185 ops/s
Iteration  16: 5942530.092 ops/s
Iteration  17: 5920691.465 ops/s
Iteration  18: 5946079.222 ops/s
Iteration  19: 5926981.340 ops/s
Iteration  20: 5941495.960 ops/s
Iteration  21: 5940110.303 ops/s
Iteration  22: 5930354.012 ops/s
Iteration  23: 5930564.437 ops/s
Iteration  24: 5889168.578 ops/s
Iteration  25: 5920940.550 ops/s
Iteration  26: 5928804.650 ops/s
Iteration  27: 5948178.122 ops/s
Iteration  28: 5933386.152 ops/s
Iteration  29: 5956922.881 ops/s
Iteration  30: 5951105.149 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_selectWithIndexWithTarget":
  5935913.548 ±(99.9%) 9833.494 ops/s [Average]
  (min, avg, max) = (5889168.578, 5935913.548, 5957486.121), stdev = 14718.312
  CI (99.9%): [5926080.054, 5945747.042] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_selectWithIndexWithTarget  thrpt   30  5935913.548 ± 9833.494  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_selectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_selectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2327344.939 ops/s
# Warmup Iteration   2: 4859651.905 ops/s
# Warmup Iteration   3: 4961363.901 ops/s
# Warmup Iteration   4: 4995423.881 ops/s
# Warmup Iteration   5: 4213311.751 ops/s
# Warmup Iteration   6: 5012412.571 ops/s
# Warmup Iteration   7: 4997433.426 ops/s
# Warmup Iteration   8: 5008317.583 ops/s
# Warmup Iteration   9: 5010012.851 ops/s
# Warmup Iteration  10: 5008208.825 ops/s
# Warmup Iteration  11: 5003206.227 ops/s
# Warmup Iteration  12: 5017743.441 ops/s
# Warmup Iteration  13: 5007649.836 ops/s
# Warmup Iteration  14: 5015613.123 ops/s
# Warmup Iteration  15: 5003895.272 ops/s
# Warmup Iteration  16: 5009519.612 ops/s
# Warmup Iteration  17: 5007524.066 ops/s
# Warmup Iteration  18: 5015595.740 ops/s
# Warmup Iteration  19: 5003415.951 ops/s
# Warmup Iteration  20: 5011966.228 ops/s
# Warmup Iteration  21: 4996724.956 ops/s
# Warmup Iteration  22: 5001132.911 ops/s
# Warmup Iteration  23: 5017192.977 ops/s
# Warmup Iteration  24: 5007603.186 ops/s
# Warmup Iteration  25: 5000195.648 ops/s
# Warmup Iteration  26: 5009731.139 ops/s
# Warmup Iteration  27: 5000456.282 ops/s
# Warmup Iteration  28: 5016351.426 ops/s
# Warmup Iteration  29: 4999713.975 ops/s
# Warmup Iteration  30: 5003428.369 ops/s
Iteration   1: 4993625.398 ops/s
Iteration   2: 5011034.633 ops/s
Iteration   3: 5010979.634 ops/s
Iteration   4: 5024838.238 ops/s
Iteration   5: 5013625.706 ops/s
Iteration   6: 5013748.726 ops/s
Iteration   7: 5005981.291 ops/s
Iteration   8: 5014710.911 ops/s
Iteration   9: 5005026.173 ops/s
Iteration  10: 5004551.544 ops/s
Iteration  11: 4981796.232 ops/s
Iteration  12: 4987185.727 ops/s
Iteration  13: 4983053.943 ops/s
Iteration  14: 5000571.284 ops/s
Iteration  15: 5004440.952 ops/s
Iteration  16: 5009812.178 ops/s
Iteration  17: 5020454.354 ops/s
Iteration  18: 5010369.028 ops/s
Iteration  19: 5008916.371 ops/s
Iteration  20: 4989532.344 ops/s
Iteration  21: 5011293.752 ops/s
Iteration  22: 5011239.964 ops/s
Iteration  23: 5011546.458 ops/s
Iteration  24: 5000055.550 ops/s
Iteration  25: 5017910.414 ops/s
Iteration  26: 5016364.084 ops/s
Iteration  27: 5007697.530 ops/s
Iteration  28: 5006406.864 ops/s
Iteration  29: 5046777.340 ops/s
Iteration  30: 5013222.401 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_selectWith_target":
  5007892.301 ±(99.9%) 8557.069 ops/s [Average]
  (min, avg, max) = (4981796.232, 5007892.301, 5046777.340), stdev = 12807.819
  CI (99.9%): [4999335.232, 5016449.370] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_selectWith_target  thrpt   30  5007892.301 ± 8557.069  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_select_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_select_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5573304.197 ops/s
# Warmup Iteration   2: 12127317.411 ops/s
# Warmup Iteration   3: 10337953.477 ops/s
# Warmup Iteration   4: 12132233.935 ops/s
# Warmup Iteration   5: 12122706.895 ops/s
# Warmup Iteration   6: 12142776.993 ops/s
# Warmup Iteration   7: 12129016.666 ops/s
# Warmup Iteration   8: 12143066.872 ops/s
# Warmup Iteration   9: 12116240.199 ops/s
# Warmup Iteration  10: 12134803.063 ops/s
# Warmup Iteration  11: 12091538.062 ops/s
# Warmup Iteration  12: 12124810.913 ops/s
# Warmup Iteration  13: 12127900.365 ops/s
# Warmup Iteration  14: 12099581.660 ops/s
# Warmup Iteration  15: 12054656.945 ops/s
# Warmup Iteration  16: 12109433.349 ops/s
# Warmup Iteration  17: 12205398.433 ops/s
# Warmup Iteration  18: 12205050.632 ops/s
# Warmup Iteration  19: 12211361.485 ops/s
# Warmup Iteration  20: 12213936.383 ops/s
# Warmup Iteration  21: 12209014.524 ops/s
# Warmup Iteration  22: 12157898.214 ops/s
# Warmup Iteration  23: 12203175.832 ops/s
# Warmup Iteration  24: 12200072.936 ops/s
# Warmup Iteration  25: 12184396.369 ops/s
# Warmup Iteration  26: 12195759.772 ops/s
# Warmup Iteration  27: 12206789.427 ops/s
# Warmup Iteration  28: 12183890.578 ops/s
# Warmup Iteration  29: 12188761.448 ops/s
# Warmup Iteration  30: 12171623.921 ops/s
Iteration   1: 12211805.714 ops/s
Iteration   2: 12219971.168 ops/s
Iteration   3: 12197001.081 ops/s
Iteration   4: 12218874.931 ops/s
Iteration   5: 12216479.938 ops/s
Iteration   6: 12203459.342 ops/s
Iteration   7: 12151424.050 ops/s
Iteration   8: 12174208.886 ops/s
Iteration   9: 12160553.680 ops/s
Iteration  10: 12199977.162 ops/s
Iteration  11: 12196818.101 ops/s
Iteration  12: 12205071.584 ops/s
Iteration  13: 12190004.389 ops/s
Iteration  14: 12202563.982 ops/s
Iteration  15: 12214161.926 ops/s
Iteration  16: 12200080.384 ops/s
Iteration  17: 12201156.016 ops/s
Iteration  18: 12163468.392 ops/s
Iteration  19: 12181826.986 ops/s
Iteration  20: 12200281.901 ops/s
Iteration  21: 12178778.535 ops/s
Iteration  22: 12195953.875 ops/s
Iteration  23: 12208932.186 ops/s
Iteration  24: 12193619.063 ops/s
Iteration  25: 12208031.605 ops/s
Iteration  26: 12176748.793 ops/s
Iteration  27: 12174239.793 ops/s
Iteration  28: 12118958.136 ops/s
Iteration  29: 12139464.797 ops/s
Iteration  30: 12128581.169 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_select_target":
  12187749.919 ±(99.9%) 17747.834 ops/s [Average]
  (min, avg, max) = (12118958.136, 12187749.919, 12219971.168), stdev = 26564.124
  CI (99.9%): [12170002.085, 12205497.752] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
ImmutableSubListTest._Benchmark.benchmark_select_target  thrpt   30  12187749.919 ± 17747.834  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_set$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_set

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 738097.170 ops/s
# Warmup Iteration   2: 793102.100 ops/s
# Warmup Iteration   3: 1007241.970 ops/s
# Warmup Iteration   4: 999794.718 ops/s
# Warmup Iteration   5: 996676.728 ops/s
# Warmup Iteration   6: 1007483.526 ops/s
# Warmup Iteration   7: 1006821.638 ops/s
# Warmup Iteration   8: 1007534.870 ops/s
# Warmup Iteration   9: 1007332.951 ops/s
# Warmup Iteration  10: 1005583.661 ops/s
# Warmup Iteration  11: 912151.864 ops/s
# Warmup Iteration  12: 947162.451 ops/s
# Warmup Iteration  13: 1010091.838 ops/s
# Warmup Iteration  14: 1004554.504 ops/s
# Warmup Iteration  15: 1004910.763 ops/s
# Warmup Iteration  16: 1007654.999 ops/s
# Warmup Iteration  17: 1059736.018 ops/s
# Warmup Iteration  18: 1064870.909 ops/s
# Warmup Iteration  19: 1062884.359 ops/s
# Warmup Iteration  20: 1066008.835 ops/s
# Warmup Iteration  21: 1066541.285 ops/s
# Warmup Iteration  22: 1063875.603 ops/s
# Warmup Iteration  23: 1067946.856 ops/s
# Warmup Iteration  24: 1066817.432 ops/s
# Warmup Iteration  25: 1063383.467 ops/s
# Warmup Iteration  26: 1063987.544 ops/s
# Warmup Iteration  27: 1065368.088 ops/s
# Warmup Iteration  28: 1063249.201 ops/s
# Warmup Iteration  29: 1065196.455 ops/s
# Warmup Iteration  30: 1063985.568 ops/s
Iteration   1: 1067544.651 ops/s
Iteration   2: 1065010.898 ops/s
Iteration   3: 1062571.248 ops/s
Iteration   4: 1061740.823 ops/s
Iteration   5: 1063638.926 ops/s
Iteration   6: 1053869.865 ops/s
Iteration   7: 1064285.276 ops/s
Iteration   8: 1065074.518 ops/s
Iteration   9: 1064602.667 ops/s
Iteration  10: 1059511.038 ops/s
Iteration  11: 1061027.368 ops/s
Iteration  12: 1062048.318 ops/s
Iteration  13: 1061541.478 ops/s
Iteration  14: 1058236.009 ops/s
Iteration  15: 1062423.098 ops/s
Iteration  16: 1067649.947 ops/s
Iteration  17: 1063734.741 ops/s
Iteration  18: 1062103.530 ops/s
Iteration  19: 1060335.789 ops/s
Iteration  20: 1058967.071 ops/s
Iteration  21: 1062259.661 ops/s
Iteration  22: 1056048.185 ops/s
Iteration  23: 1059327.315 ops/s
Iteration  24: 1058484.512 ops/s
Iteration  25: 1058010.250 ops/s
Iteration  26: 1061607.391 ops/s
Iteration  27: 1063660.330 ops/s
Iteration  28: 1066822.684 ops/s
Iteration  29: 1068938.027 ops/s
Iteration  30: 1066396.813 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_set":
  1062249.081 ±(99.9%) 2359.640 ops/s [Average]
  (min, avg, max) = (1053869.865, 1062249.081, 1068938.027), stdev = 3531.798
  CI (99.9%): [1059889.441, 1064608.721] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_set  thrpt   30  1062249.081 ± 2359.640  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_sort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_sort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 737436.759 ops/s
# Warmup Iteration   2: 795906.444 ops/s
# Warmup Iteration   3: 1008467.851 ops/s
# Warmup Iteration   4: 1007505.050 ops/s
# Warmup Iteration   5: 1002668.255 ops/s
# Warmup Iteration   6: 1011050.131 ops/s
# Warmup Iteration   7: 992423.583 ops/s
# Warmup Iteration   8: 1007530.162 ops/s
# Warmup Iteration   9: 1010638.357 ops/s
# Warmup Iteration  10: 1011798.269 ops/s
# Warmup Iteration  11: 911055.214 ops/s
# Warmup Iteration  12: 959413.102 ops/s
# Warmup Iteration  13: 1012256.526 ops/s
# Warmup Iteration  14: 1009215.978 ops/s
# Warmup Iteration  15: 1009686.604 ops/s
# Warmup Iteration  16: 1012345.053 ops/s
# Warmup Iteration  17: 1072338.640 ops/s
# Warmup Iteration  18: 1071587.659 ops/s
# Warmup Iteration  19: 1069539.103 ops/s
# Warmup Iteration  20: 1071773.312 ops/s
# Warmup Iteration  21: 1070477.442 ops/s
# Warmup Iteration  22: 1069820.231 ops/s
# Warmup Iteration  23: 1069240.222 ops/s
# Warmup Iteration  24: 1066170.356 ops/s
# Warmup Iteration  25: 1068941.909 ops/s
# Warmup Iteration  26: 1070107.440 ops/s
# Warmup Iteration  27: 1072181.236 ops/s
# Warmup Iteration  28: 1070813.851 ops/s
# Warmup Iteration  29: 1071913.279 ops/s
# Warmup Iteration  30: 1068686.335 ops/s
Iteration   1: 1068786.456 ops/s
Iteration   2: 1069589.756 ops/s
Iteration   3: 1070247.250 ops/s
Iteration   4: 1069779.527 ops/s
Iteration   5: 1070427.437 ops/s
Iteration   6: 1071128.402 ops/s
Iteration   7: 1071490.461 ops/s
Iteration   8: 1073727.072 ops/s
Iteration   9: 1072443.329 ops/s
Iteration  10: 1071868.002 ops/s
Iteration  11: 1069680.094 ops/s
Iteration  12: 1068224.428 ops/s
Iteration  13: 1074724.266 ops/s
Iteration  14: 1071115.880 ops/s
Iteration  15: 1068411.258 ops/s
Iteration  16: 1074279.748 ops/s
Iteration  17: 1069939.414 ops/s
Iteration  18: 1066446.923 ops/s
Iteration  19: 1073873.553 ops/s
Iteration  20: 1073463.872 ops/s
Iteration  21: 1073864.865 ops/s
Iteration  22: 1070318.482 ops/s
Iteration  23: 1072030.956 ops/s
Iteration  24: 1070235.750 ops/s
Iteration  25: 1069529.860 ops/s
Iteration  26: 1064806.572 ops/s
Iteration  27: 1065469.589 ops/s
Iteration  28: 1064792.295 ops/s
Iteration  29: 1063267.317 ops/s
Iteration  30: 1074983.922 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_sort":
  1070298.225 ±(99.9%) 2067.191 ops/s [Average]
  (min, avg, max) = (1063267.317, 1070298.225, 1074983.922), stdev = 3094.074
  CI (99.9%): [1068231.034, 1072365.415] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_sort  thrpt   30  1070298.225 ± 2067.191  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_stream$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_stream

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 264202.873 ops/s
# Warmup Iteration   2: 554152.199 ops/s
# Warmup Iteration   3: 638605.039 ops/s
# Warmup Iteration   4: 643578.999 ops/s
# Warmup Iteration   5: 550740.465 ops/s
# Warmup Iteration   6: 622546.310 ops/s
# Warmup Iteration   7: 642659.863 ops/s
# Warmup Iteration   8: 642791.893 ops/s
# Warmup Iteration   9: 640701.606 ops/s
# Warmup Iteration  10: 642287.615 ops/s
# Warmup Iteration  11: 641302.119 ops/s
# Warmup Iteration  12: 640503.260 ops/s
# Warmup Iteration  13: 643065.247 ops/s
# Warmup Iteration  14: 642000.210 ops/s
# Warmup Iteration  15: 641859.728 ops/s
# Warmup Iteration  16: 642399.126 ops/s
# Warmup Iteration  17: 642837.235 ops/s
# Warmup Iteration  18: 642827.214 ops/s
# Warmup Iteration  19: 640567.172 ops/s
# Warmup Iteration  20: 643067.872 ops/s
# Warmup Iteration  21: 642866.876 ops/s
# Warmup Iteration  22: 640577.213 ops/s
# Warmup Iteration  23: 643355.797 ops/s
# Warmup Iteration  24: 642677.724 ops/s
# Warmup Iteration  25: 641827.433 ops/s
# Warmup Iteration  26: 642199.941 ops/s
# Warmup Iteration  27: 642590.317 ops/s
# Warmup Iteration  28: 639092.768 ops/s
# Warmup Iteration  29: 641465.950 ops/s
# Warmup Iteration  30: 643400.368 ops/s
Iteration   1: 641938.040 ops/s
Iteration   2: 642996.559 ops/s
Iteration   3: 642702.134 ops/s
Iteration   4: 643144.950 ops/s
Iteration   5: 643895.505 ops/s
Iteration   6: 642431.740 ops/s
Iteration   7: 642573.550 ops/s
Iteration   8: 643491.300 ops/s
Iteration   9: 642241.579 ops/s
Iteration  10: 642755.300 ops/s
Iteration  11: 641796.057 ops/s
Iteration  12: 641300.310 ops/s
Iteration  13: 642106.864 ops/s
Iteration  14: 643070.947 ops/s
Iteration  15: 642075.848 ops/s
Iteration  16: 641253.958 ops/s
Iteration  17: 643627.905 ops/s
Iteration  18: 642380.425 ops/s
Iteration  19: 643278.534 ops/s
Iteration  20: 642256.474 ops/s
Iteration  21: 643725.392 ops/s
Iteration  22: 643983.414 ops/s
Iteration  23: 642788.459 ops/s
Iteration  24: 642533.972 ops/s
Iteration  25: 643696.226 ops/s
Iteration  26: 645377.395 ops/s
Iteration  27: 641732.742 ops/s
Iteration  28: 643441.174 ops/s
Iteration  29: 641279.865 ops/s
Iteration  30: 641216.047 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_stream":
  642703.089 ±(99.9%) 645.406 ops/s [Average]
  (min, avg, max) = (641216.047, 642703.089, 645377.395), stdev = 966.014
  CI (99.9%): [642057.683, 643348.495] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score     Error  Units
ImmutableSubListTest._Benchmark.benchmark_stream  thrpt   30  642703.089 ± 645.406  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_subList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_subList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 14164282.977 ops/s
# Warmup Iteration   2: 28757832.229 ops/s
# Warmup Iteration   3: 24455501.367 ops/s
# Warmup Iteration   4: 28574634.871 ops/s
# Warmup Iteration   5: 28592768.372 ops/s
# Warmup Iteration   6: 28611164.398 ops/s
# Warmup Iteration   7: 28616005.880 ops/s
# Warmup Iteration   8: 28541747.223 ops/s
# Warmup Iteration   9: 28546353.168 ops/s
# Warmup Iteration  10: 28529971.217 ops/s
# Warmup Iteration  11: 28512580.383 ops/s
# Warmup Iteration  12: 28552245.752 ops/s
# Warmup Iteration  13: 28536076.946 ops/s
# Warmup Iteration  14: 28617144.996 ops/s
# Warmup Iteration  15: 28617273.889 ops/s
# Warmup Iteration  16: 28537005.783 ops/s
# Warmup Iteration  17: 28581682.125 ops/s
# Warmup Iteration  18: 28602607.622 ops/s
# Warmup Iteration  19: 28487288.920 ops/s
# Warmup Iteration  20: 28649372.219 ops/s
# Warmup Iteration  21: 28603619.485 ops/s
# Warmup Iteration  22: 28618937.497 ops/s
# Warmup Iteration  23: 28618953.806 ops/s
# Warmup Iteration  24: 28579109.861 ops/s
# Warmup Iteration  25: 28521512.771 ops/s
# Warmup Iteration  26: 28526863.200 ops/s
# Warmup Iteration  27: 28594084.048 ops/s
# Warmup Iteration  28: 28580146.788 ops/s
# Warmup Iteration  29: 28690061.774 ops/s
# Warmup Iteration  30: 28684641.772 ops/s
Iteration   1: 28631792.233 ops/s
Iteration   2: 28668405.594 ops/s
Iteration   3: 28441070.800 ops/s
Iteration   4: 28680148.443 ops/s
Iteration   5: 28619337.061 ops/s
Iteration   6: 28639880.793 ops/s
Iteration   7: 28706248.988 ops/s
Iteration   8: 28636803.981 ops/s
Iteration   9: 28529508.537 ops/s
Iteration  10: 28795737.489 ops/s
Iteration  11: 28644071.810 ops/s
Iteration  12: 28654777.313 ops/s
Iteration  13: 28744361.885 ops/s
Iteration  14: 28620303.432 ops/s
Iteration  15: 28658387.062 ops/s
Iteration  16: 28592464.760 ops/s
Iteration  17: 28651445.327 ops/s
Iteration  18: 28593120.833 ops/s
Iteration  19: 28579983.762 ops/s
Iteration  20: 28603817.824 ops/s
Iteration  21: 28520202.272 ops/s
Iteration  22: 28483890.558 ops/s
Iteration  23: 28446386.343 ops/s
Iteration  24: 28536393.699 ops/s
Iteration  25: 28528572.750 ops/s
Iteration  26: 28572287.763 ops/s
Iteration  27: 28519608.456 ops/s
Iteration  28: 28523128.421 ops/s
Iteration  29: 28662301.690 ops/s
Iteration  30: 28565416.342 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_subList":
  28601661.874 ±(99.9%) 55311.672 ops/s [Average]
  (min, avg, max) = (28441070.800, 28601661.874, 28795737.489), stdev = 82787.913
  CI (99.9%): [28546350.202, 28656973.546] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score       Error  Units
ImmutableSubListTest._Benchmark.benchmark_subList  thrpt   30  28601661.874 ± 55311.672  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_subListFromGreaterThanTO$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_subListFromGreaterThanTO

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 718448.214 ops/s
# Warmup Iteration   2: 755993.455 ops/s
# Warmup Iteration   3: 974377.522 ops/s
# Warmup Iteration   4: 982207.863 ops/s
# Warmup Iteration   5: 985803.138 ops/s
# Warmup Iteration   6: 966991.277 ops/s
# Warmup Iteration   7: 979478.950 ops/s
# Warmup Iteration   8: 980111.623 ops/s
# Warmup Iteration   9: 977931.562 ops/s
# Warmup Iteration  10: 991175.661 ops/s
# Warmup Iteration  11: 984185.041 ops/s
# Warmup Iteration  12: 831373.605 ops/s
# Warmup Iteration  13: 986279.487 ops/s
# Warmup Iteration  14: 983828.137 ops/s
# Warmup Iteration  15: 983601.542 ops/s
# Warmup Iteration  16: 985001.583 ops/s
# Warmup Iteration  17: 1044697.469 ops/s
# Warmup Iteration  18: 1045467.829 ops/s
# Warmup Iteration  19: 1043219.582 ops/s
# Warmup Iteration  20: 1047827.356 ops/s
# Warmup Iteration  21: 1047546.832 ops/s
# Warmup Iteration  22: 1045854.597 ops/s
# Warmup Iteration  23: 1036093.858 ops/s
# Warmup Iteration  24: 1032339.011 ops/s
# Warmup Iteration  25: 1036944.419 ops/s
# Warmup Iteration  26: 1043094.856 ops/s
# Warmup Iteration  27: 1044920.241 ops/s
# Warmup Iteration  28: 1043364.637 ops/s
# Warmup Iteration  29: 1046159.042 ops/s
# Warmup Iteration  30: 1045785.400 ops/s
Iteration   1: 1045814.327 ops/s
Iteration   2: 1046006.756 ops/s
Iteration   3: 1029332.799 ops/s
Iteration   4: 1045157.023 ops/s
Iteration   5: 1043662.289 ops/s
Iteration   6: 1050225.948 ops/s
Iteration   7: 1049360.745 ops/s
Iteration   8: 1050257.739 ops/s
Iteration   9: 1043901.437 ops/s
Iteration  10: 1042330.920 ops/s
Iteration  11: 1045400.603 ops/s
Iteration  12: 1046076.698 ops/s
Iteration  13: 1045667.337 ops/s
Iteration  14: 1045253.598 ops/s
Iteration  15: 1045001.558 ops/s
Iteration  16: 1050556.342 ops/s
Iteration  17: 1046545.526 ops/s
Iteration  18: 1046309.306 ops/s
Iteration  19: 1047100.794 ops/s
Iteration  20: 1046116.199 ops/s
Iteration  21: 1047544.221 ops/s
Iteration  22: 1048469.703 ops/s
Iteration  23: 1044511.388 ops/s
Iteration  24: 1047667.719 ops/s
Iteration  25: 1048558.624 ops/s
Iteration  26: 1049221.348 ops/s
Iteration  27: 1047630.739 ops/s
Iteration  28: 1050639.813 ops/s
Iteration  29: 1050900.736 ops/s
Iteration  30: 1048764.964 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_subListFromGreaterThanTO":
  1046466.240 ±(99.9%) 2641.443 ops/s [Average]
  (min, avg, max) = (1029332.799, 1046466.240, 1050900.736), stdev = 3953.588
  CI (99.9%): [1043824.797, 1049107.683] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_subListFromGreaterThanTO  thrpt   30  1046466.240 ± 2641.443  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_subListFromNegative$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_subListFromNegative

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 724568.431 ops/s
# Warmup Iteration   2: 766755.922 ops/s
# Warmup Iteration   3: 973398.551 ops/s
# Warmup Iteration   4: 990919.526 ops/s
# Warmup Iteration   5: 991873.740 ops/s
# Warmup Iteration   6: 986790.090 ops/s
# Warmup Iteration   7: 989433.184 ops/s
# Warmup Iteration   8: 991447.485 ops/s
# Warmup Iteration   9: 989757.909 ops/s
# Warmup Iteration  10: 989346.111 ops/s
# Warmup Iteration  11: 987434.156 ops/s
# Warmup Iteration  12: 878790.425 ops/s
# Warmup Iteration  13: 941857.879 ops/s
# Warmup Iteration  14: 986379.522 ops/s
# Warmup Iteration  15: 987607.789 ops/s
# Warmup Iteration  16: 989454.298 ops/s
# Warmup Iteration  17: 1061853.811 ops/s
# Warmup Iteration  18: 1065628.357 ops/s
# Warmup Iteration  19: 1063573.126 ops/s
# Warmup Iteration  20: 1064515.748 ops/s
# Warmup Iteration  21: 1065113.212 ops/s
# Warmup Iteration  22: 1059107.615 ops/s
# Warmup Iteration  23: 1064957.515 ops/s
# Warmup Iteration  24: 1064701.476 ops/s
# Warmup Iteration  25: 1062766.695 ops/s
# Warmup Iteration  26: 1060810.819 ops/s
# Warmup Iteration  27: 1065293.336 ops/s
# Warmup Iteration  28: 1064567.850 ops/s
# Warmup Iteration  29: 1062139.561 ops/s
# Warmup Iteration  30: 1062760.624 ops/s
Iteration   1: 1057993.844 ops/s
Iteration   2: 1063304.424 ops/s
Iteration   3: 1067102.035 ops/s
Iteration   4: 1064648.399 ops/s
Iteration   5: 1059041.569 ops/s
Iteration   6: 1062405.650 ops/s
Iteration   7: 1064046.533 ops/s
Iteration   8: 1061324.853 ops/s
Iteration   9: 1060893.628 ops/s
Iteration  10: 1066574.289 ops/s
Iteration  11: 1067750.666 ops/s
Iteration  12: 1065690.637 ops/s
Iteration  13: 1063617.881 ops/s
Iteration  14: 1063940.559 ops/s
Iteration  15: 1066315.647 ops/s
Iteration  16: 1064861.743 ops/s
Iteration  17: 1062777.570 ops/s
Iteration  18: 1065174.514 ops/s
Iteration  19: 1062133.767 ops/s
Iteration  20: 1065401.817 ops/s
Iteration  21: 1063742.221 ops/s
Iteration  22: 1066511.642 ops/s
Iteration  23: 1066451.339 ops/s
Iteration  24: 1064851.220 ops/s
Iteration  25: 1063575.033 ops/s
Iteration  26: 1068883.631 ops/s
Iteration  27: 1065854.812 ops/s
Iteration  28: 1063062.339 ops/s
Iteration  29: 1062785.658 ops/s
Iteration  30: 1066744.044 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_subListFromNegative":
  1064248.732 ±(99.9%) 1651.853 ops/s [Average]
  (min, avg, max) = (1057993.844, 1064248.732, 1068883.631), stdev = 2472.417
  CI (99.9%): [1062596.879, 1065900.586] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_subListFromNegative  thrpt   30  1064248.732 ± 1651.853  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_subListToGreaterThanSize$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_subListToGreaterThanSize

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 727603.956 ops/s
# Warmup Iteration   2: 761443.424 ops/s
# Warmup Iteration   3: 967485.391 ops/s
# Warmup Iteration   4: 985055.561 ops/s
# Warmup Iteration   5: 984649.307 ops/s
# Warmup Iteration   6: 978834.567 ops/s
# Warmup Iteration   7: 986422.849 ops/s
# Warmup Iteration   8: 984930.529 ops/s
# Warmup Iteration   9: 983719.775 ops/s
# Warmup Iteration  10: 985508.403 ops/s
# Warmup Iteration  11: 985959.774 ops/s
# Warmup Iteration  12: 891878.925 ops/s
# Warmup Iteration  13: 931266.100 ops/s
# Warmup Iteration  14: 976108.970 ops/s
# Warmup Iteration  15: 983684.151 ops/s
# Warmup Iteration  16: 984903.970 ops/s
# Warmup Iteration  17: 1048957.329 ops/s
# Warmup Iteration  18: 1052020.921 ops/s
# Warmup Iteration  19: 1051140.843 ops/s
# Warmup Iteration  20: 1049883.887 ops/s
# Warmup Iteration  21: 1048688.619 ops/s
# Warmup Iteration  22: 1050670.851 ops/s
# Warmup Iteration  23: 1048523.801 ops/s
# Warmup Iteration  24: 1049627.440 ops/s
# Warmup Iteration  25: 1048588.076 ops/s
# Warmup Iteration  26: 1050240.788 ops/s
# Warmup Iteration  27: 1046477.595 ops/s
# Warmup Iteration  28: 1045166.743 ops/s
# Warmup Iteration  29: 1048737.891 ops/s
# Warmup Iteration  30: 1050013.326 ops/s
Iteration   1: 1045825.164 ops/s
Iteration   2: 1046482.708 ops/s
Iteration   3: 1043232.953 ops/s
Iteration   4: 1040073.299 ops/s
Iteration   5: 1044095.701 ops/s
Iteration   6: 1052344.494 ops/s
Iteration   7: 1051154.202 ops/s
Iteration   8: 1043087.626 ops/s
Iteration   9: 1039206.020 ops/s
Iteration  10: 1041913.305 ops/s
Iteration  11: 1048888.778 ops/s
Iteration  12: 1050216.738 ops/s
Iteration  13: 1047629.546 ops/s
Iteration  14: 1048740.858 ops/s
Iteration  15: 1050488.637 ops/s
Iteration  16: 1051355.996 ops/s
Iteration  17: 1052021.160 ops/s
Iteration  18: 1051344.594 ops/s
Iteration  19: 1050876.297 ops/s
Iteration  20: 1050516.542 ops/s
Iteration  21: 1046561.958 ops/s
Iteration  22: 1042791.416 ops/s
Iteration  23: 1045248.832 ops/s
Iteration  24: 1046110.780 ops/s
Iteration  25: 1049572.149 ops/s
Iteration  26: 1050592.107 ops/s
Iteration  27: 1050164.430 ops/s
Iteration  28: 1049454.718 ops/s
Iteration  29: 1048678.460 ops/s
Iteration  30: 1049762.836 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_subListToGreaterThanSize":
  1047614.410 ±(99.9%) 2470.157 ops/s [Average]
  (min, avg, max) = (1039206.020, 1047614.410, 1052344.494), stdev = 3697.215
  CI (99.9%): [1045144.253, 1050084.567] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_subListToGreaterThanSize  thrpt   30  1047614.410 ± 2470.157  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_sumByDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_sumByDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1016343.989 ops/s
# Warmup Iteration   2: 1824641.557 ops/s
# Warmup Iteration   3: 2044019.476 ops/s
# Warmup Iteration   4: 2058968.895 ops/s
# Warmup Iteration   5: 2057808.229 ops/s
# Warmup Iteration   6: 1684671.128 ops/s
# Warmup Iteration   7: 2060937.314 ops/s
# Warmup Iteration   8: 2060847.211 ops/s
# Warmup Iteration   9: 2061049.366 ops/s
# Warmup Iteration  10: 2061215.775 ops/s
# Warmup Iteration  11: 2062267.315 ops/s
# Warmup Iteration  12: 2061335.544 ops/s
# Warmup Iteration  13: 2063047.175 ops/s
# Warmup Iteration  14: 2063083.478 ops/s
# Warmup Iteration  15: 2061556.841 ops/s
# Warmup Iteration  16: 2061137.329 ops/s
# Warmup Iteration  17: 2063625.435 ops/s
# Warmup Iteration  18: 2061679.039 ops/s
# Warmup Iteration  19: 2061987.573 ops/s
# Warmup Iteration  20: 2059434.631 ops/s
# Warmup Iteration  21: 2060670.973 ops/s
# Warmup Iteration  22: 2062305.032 ops/s
# Warmup Iteration  23: 2061189.044 ops/s
# Warmup Iteration  24: 2063183.709 ops/s
# Warmup Iteration  25: 2060345.459 ops/s
# Warmup Iteration  26: 2063539.349 ops/s
# Warmup Iteration  27: 2061548.936 ops/s
# Warmup Iteration  28: 2062585.962 ops/s
# Warmup Iteration  29: 2063580.941 ops/s
# Warmup Iteration  30: 2058852.844 ops/s
Iteration   1: 2061656.138 ops/s
Iteration   2: 2061823.664 ops/s
Iteration   3: 2048628.652 ops/s
Iteration   4: 2063301.783 ops/s
Iteration   5: 2059873.881 ops/s
Iteration   6: 2053358.978 ops/s
Iteration   7: 2063007.882 ops/s
Iteration   8: 2059306.847 ops/s
Iteration   9: 2062630.810 ops/s
Iteration  10: 2061322.512 ops/s
Iteration  11: 2061553.386 ops/s
Iteration  12: 2064603.273 ops/s
Iteration  13: 2059782.833 ops/s
Iteration  14: 2064814.753 ops/s
Iteration  15: 2058592.298 ops/s
Iteration  16: 2063792.410 ops/s
Iteration  17: 2060646.036 ops/s
Iteration  18: 2059527.392 ops/s
Iteration  19: 2063615.663 ops/s
Iteration  20: 2060181.200 ops/s
Iteration  21: 2060442.495 ops/s
Iteration  22: 2059264.948 ops/s
Iteration  23: 2059788.703 ops/s
Iteration  24: 2064079.821 ops/s
Iteration  25: 2060413.158 ops/s
Iteration  26: 2062739.755 ops/s
Iteration  27: 2058546.974 ops/s
Iteration  28: 2064459.995 ops/s
Iteration  29: 2059013.996 ops/s
Iteration  30: 2058856.098 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_sumByDouble":
  2060654.211 ±(99.9%) 2226.566 ops/s [Average]
  (min, avg, max) = (2048628.652, 2060654.211, 2064814.753), stdev = 3332.619
  CI (99.9%): [2058427.646, 2062880.777] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_sumByDouble  thrpt   30  2060654.211 ± 2226.566  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_sumByDoubleConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_sumByDoubleConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 62.027 ops/s
# Warmup Iteration   2: 72.901 ops/s
# Warmup Iteration   3: 100.777 ops/s
# Warmup Iteration   4: 101.745 ops/s
# Warmup Iteration   5: 102.351 ops/s
# Warmup Iteration   6: 102.833 ops/s
# Warmup Iteration   7: 101.612 ops/s
# Warmup Iteration   8: 103.105 ops/s
# Warmup Iteration   9: 86.829 ops/s
# Warmup Iteration  10: 98.177 ops/s
# Warmup Iteration  11: 100.573 ops/s
# Warmup Iteration  12: 102.394 ops/s
# Warmup Iteration  13: 101.828 ops/s
# Warmup Iteration  14: 102.792 ops/s
# Warmup Iteration  15: 101.570 ops/s
# Warmup Iteration  16: 100.659 ops/s
# Warmup Iteration  17: 99.825 ops/s
# Warmup Iteration  18: 102.442 ops/s
# Warmup Iteration  19: 101.299 ops/s
# Warmup Iteration  20: 101.609 ops/s
# Warmup Iteration  21: 101.014 ops/s
# Warmup Iteration  22: 97.687 ops/s
# Warmup Iteration  23: 97.330 ops/s
# Warmup Iteration  24: 98.580 ops/s
# Warmup Iteration  25: 97.468 ops/s
# Warmup Iteration  26: 101.137 ops/s
# Warmup Iteration  27: 101.566 ops/s
# Warmup Iteration  28: 100.466 ops/s
# Warmup Iteration  29: 100.712 ops/s
# Warmup Iteration  30: 100.230 ops/s
Iteration   1: 99.593 ops/s
Iteration   2: 100.825 ops/s
Iteration   3: 99.167 ops/s
Iteration   4: 99.493 ops/s
Iteration   5: 99.557 ops/s
Iteration   6: 98.902 ops/s
Iteration   7: 98.898 ops/s
Iteration   8: 100.791 ops/s
Iteration   9: 100.674 ops/s
Iteration  10: 99.964 ops/s
Iteration  11: 97.203 ops/s
Iteration  12: 99.812 ops/s
Iteration  13: 100.062 ops/s
Iteration  14: 99.676 ops/s
Iteration  15: 98.966 ops/s
Iteration  16: 101.039 ops/s
Iteration  17: 99.932 ops/s
Iteration  18: 98.196 ops/s
Iteration  19: 97.602 ops/s
Iteration  20: 98.335 ops/s
Iteration  21: 99.916 ops/s
Iteration  22: 101.616 ops/s
Iteration  23: 98.704 ops/s
Iteration  24: 98.905 ops/s
Iteration  25: 98.902 ops/s
Iteration  26: 97.431 ops/s
Iteration  27: 98.950 ops/s
Iteration  28: 97.604 ops/s
Iteration  29: 97.127 ops/s
Iteration  30: 98.685 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_sumByDoubleConsistentRounding":
  99.218 ±(99.9%) 0.776 ops/s [Average]
  (min, avg, max) = (97.127, 99.218, 101.616), stdev = 1.162
  CI (99.9%): [98.441, 99.994] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt   Score   Error  Units
ImmutableSubListTest._Benchmark.benchmark_sumByDoubleConsistentRounding  thrpt   30  99.218 ± 0.776  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_sumByFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_sumByFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1022517.268 ops/s
# Warmup Iteration   2: 1820882.761 ops/s
# Warmup Iteration   3: 2074828.647 ops/s
# Warmup Iteration   4: 2078179.309 ops/s
# Warmup Iteration   5: 2081326.761 ops/s
# Warmup Iteration   6: 1704864.502 ops/s
# Warmup Iteration   7: 2078748.484 ops/s
# Warmup Iteration   8: 2076618.738 ops/s
# Warmup Iteration   9: 2078294.166 ops/s
# Warmup Iteration  10: 2077520.329 ops/s
# Warmup Iteration  11: 2067752.457 ops/s
# Warmup Iteration  12: 2075902.229 ops/s
# Warmup Iteration  13: 2076126.209 ops/s
# Warmup Iteration  14: 2075309.565 ops/s
# Warmup Iteration  15: 2075408.475 ops/s
# Warmup Iteration  16: 2076173.363 ops/s
# Warmup Iteration  17: 2073339.124 ops/s
# Warmup Iteration  18: 2070776.650 ops/s
# Warmup Iteration  19: 2077486.361 ops/s
# Warmup Iteration  20: 2076393.215 ops/s
# Warmup Iteration  21: 2077203.265 ops/s
# Warmup Iteration  22: 2076821.546 ops/s
# Warmup Iteration  23: 2076706.131 ops/s
# Warmup Iteration  24: 2078351.427 ops/s
# Warmup Iteration  25: 2075373.325 ops/s
# Warmup Iteration  26: 2077254.046 ops/s
# Warmup Iteration  27: 2078200.241 ops/s
# Warmup Iteration  28: 2076979.098 ops/s
# Warmup Iteration  29: 2079157.062 ops/s
# Warmup Iteration  30: 2078273.966 ops/s
Iteration   1: 2078977.147 ops/s
Iteration   2: 2074169.218 ops/s
Iteration   3: 2079221.292 ops/s
Iteration   4: 2072850.374 ops/s
Iteration   5: 2078783.785 ops/s
Iteration   6: 2074687.009 ops/s
Iteration   7: 2078646.725 ops/s
Iteration   8: 2071613.509 ops/s
Iteration   9: 2073397.369 ops/s
Iteration  10: 2078641.562 ops/s
Iteration  11: 2074455.838 ops/s
Iteration  12: 2079462.101 ops/s
Iteration  13: 2070475.724 ops/s
Iteration  14: 2073091.819 ops/s
Iteration  15: 2079918.630 ops/s
Iteration  16: 2075696.159 ops/s
Iteration  17: 2075666.024 ops/s
Iteration  18: 2073022.120 ops/s
Iteration  19: 2075317.738 ops/s
Iteration  20: 2078909.597 ops/s
Iteration  21: 2076312.848 ops/s
Iteration  22: 2081019.278 ops/s
Iteration  23: 2074406.180 ops/s
Iteration  24: 2079640.265 ops/s
Iteration  25: 2067050.262 ops/s
Iteration  26: 2074066.738 ops/s
Iteration  27: 2079902.243 ops/s
Iteration  28: 2075050.286 ops/s
Iteration  29: 2082053.122 ops/s
Iteration  30: 2076790.629 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_sumByFloat":
  2076109.853 ±(99.9%) 2309.880 ops/s [Average]
  (min, avg, max) = (2067050.262, 2076109.853, 2082053.122), stdev = 3457.319
  CI (99.9%): [2073799.973, 2078419.732] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_sumByFloat  thrpt   30  2076109.853 ± 2309.880  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_sumByFloatConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_sumByFloatConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 62.024 ops/s
# Warmup Iteration   2: 73.844 ops/s
# Warmup Iteration   3: 101.354 ops/s
# Warmup Iteration   4: 101.746 ops/s
# Warmup Iteration   5: 99.180 ops/s
# Warmup Iteration   6: 100.021 ops/s
# Warmup Iteration   7: 101.405 ops/s
# Warmup Iteration   8: 101.549 ops/s
# Warmup Iteration   9: 87.276 ops/s
# Warmup Iteration  10: 93.179 ops/s
# Warmup Iteration  11: 101.225 ops/s
# Warmup Iteration  12: 100.083 ops/s
# Warmup Iteration  13: 100.880 ops/s
# Warmup Iteration  14: 99.322 ops/s
# Warmup Iteration  15: 100.048 ops/s
# Warmup Iteration  16: 100.453 ops/s
# Warmup Iteration  17: 97.990 ops/s
# Warmup Iteration  18: 99.067 ops/s
# Warmup Iteration  19: 98.211 ops/s
# Warmup Iteration  20: 99.488 ops/s
# Warmup Iteration  21: 98.262 ops/s
# Warmup Iteration  22: 97.266 ops/s
# Warmup Iteration  23: 97.858 ops/s
# Warmup Iteration  24: 98.649 ops/s
# Warmup Iteration  25: 98.416 ops/s
# Warmup Iteration  26: 99.020 ops/s
# Warmup Iteration  27: 100.420 ops/s
# Warmup Iteration  28: 99.455 ops/s
# Warmup Iteration  29: 98.937 ops/s
# Warmup Iteration  30: 98.164 ops/s
Iteration   1: 98.971 ops/s
Iteration   2: 97.691 ops/s
Iteration   3: 97.677 ops/s
Iteration   4: 98.934 ops/s
Iteration   5: 97.103 ops/s
Iteration   6: 100.240 ops/s
Iteration   7: 100.640 ops/s
Iteration   8: 100.058 ops/s
Iteration   9: 100.241 ops/s
Iteration  10: 100.308 ops/s
Iteration  11: 98.550 ops/s
Iteration  12: 98.350 ops/s
Iteration  13: 100.093 ops/s
Iteration  14: 98.842 ops/s
Iteration  15: 98.860 ops/s
Iteration  16: 99.149 ops/s
Iteration  17: 99.262 ops/s
Iteration  18: 99.629 ops/s
Iteration  19: 99.309 ops/s
Iteration  20: 99.838 ops/s
Iteration  21: 99.349 ops/s
Iteration  22: 98.127 ops/s
Iteration  23: 101.278 ops/s
Iteration  24: 98.818 ops/s
Iteration  25: 98.996 ops/s
Iteration  26: 98.979 ops/s
Iteration  27: 98.108 ops/s
Iteration  28: 98.229 ops/s
Iteration  29: 99.725 ops/s
Iteration  30: 100.322 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_sumByFloatConsistentRounding":
  99.189 ±(99.9%) 0.651 ops/s [Average]
  (min, avg, max) = (97.103, 99.189, 101.278), stdev = 0.974
  CI (99.9%): [98.539, 99.840] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt   Score   Error  Units
ImmutableSubListTest._Benchmark.benchmark_sumByFloatConsistentRounding  thrpt   30  99.189 ± 0.651  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_sumByInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_sumByInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1428619.470 ops/s
# Warmup Iteration   2: 2764885.842 ops/s
# Warmup Iteration   3: 2990864.504 ops/s
# Warmup Iteration   4: 3030267.987 ops/s
# Warmup Iteration   5: 2520688.026 ops/s
# Warmup Iteration   6: 3037867.570 ops/s
# Warmup Iteration   7: 3034851.386 ops/s
# Warmup Iteration   8: 3037137.090 ops/s
# Warmup Iteration   9: 3041856.752 ops/s
# Warmup Iteration  10: 3038741.131 ops/s
# Warmup Iteration  11: 3033128.313 ops/s
# Warmup Iteration  12: 3039609.761 ops/s
# Warmup Iteration  13: 3035078.678 ops/s
# Warmup Iteration  14: 3033670.460 ops/s
# Warmup Iteration  15: 3040571.996 ops/s
# Warmup Iteration  16: 3034164.118 ops/s
# Warmup Iteration  17: 3032968.897 ops/s
# Warmup Iteration  18: 3037881.195 ops/s
# Warmup Iteration  19: 3036749.093 ops/s
# Warmup Iteration  20: 3034414.425 ops/s
# Warmup Iteration  21: 3042478.422 ops/s
# Warmup Iteration  22: 3040979.164 ops/s
# Warmup Iteration  23: 3041535.362 ops/s
# Warmup Iteration  24: 3037681.459 ops/s
# Warmup Iteration  25: 3034417.013 ops/s
# Warmup Iteration  26: 3038539.740 ops/s
# Warmup Iteration  27: 3039072.008 ops/s
# Warmup Iteration  28: 3036648.781 ops/s
# Warmup Iteration  29: 3032616.989 ops/s
# Warmup Iteration  30: 3029134.832 ops/s
Iteration   1: 3035773.684 ops/s
Iteration   2: 3034443.315 ops/s
Iteration   3: 3036732.041 ops/s
Iteration   4: 3035551.287 ops/s
Iteration   5: 3038472.309 ops/s
Iteration   6: 3037009.735 ops/s
Iteration   7: 3039469.276 ops/s
Iteration   8: 3032398.141 ops/s
Iteration   9: 3032188.086 ops/s
Iteration  10: 3035873.828 ops/s
Iteration  11: 3037656.973 ops/s
Iteration  12: 3038057.865 ops/s
Iteration  13: 3046735.580 ops/s
Iteration  14: 3033323.052 ops/s
Iteration  15: 3038887.976 ops/s
Iteration  16: 3041600.108 ops/s
Iteration  17: 3035421.889 ops/s
Iteration  18: 3041051.144 ops/s
Iteration  19: 3046132.757 ops/s
Iteration  20: 3038303.458 ops/s
Iteration  21: 3036772.460 ops/s
Iteration  22: 3042391.575 ops/s
Iteration  23: 3040430.397 ops/s
Iteration  24: 3037327.963 ops/s
Iteration  25: 3033946.084 ops/s
Iteration  26: 3034436.493 ops/s
Iteration  27: 3034335.127 ops/s
Iteration  28: 3040061.782 ops/s
Iteration  29: 3038292.035 ops/s
Iteration  30: 3035259.967 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_sumByInt":
  3037611.213 ±(99.9%) 2384.904 ops/s [Average]
  (min, avg, max) = (3032188.086, 3037611.213, 3046735.580), stdev = 3569.612
  CI (99.9%): [3035226.309, 3039996.117] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_sumByInt  thrpt   30  3037611.213 ± 2384.904  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_sumByLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_sumByLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1386133.686 ops/s
# Warmup Iteration   2: 2638880.305 ops/s
# Warmup Iteration   3: 2847249.117 ops/s
# Warmup Iteration   4: 2878144.078 ops/s
# Warmup Iteration   5: 2531189.944 ops/s
# Warmup Iteration   6: 2732820.633 ops/s
# Warmup Iteration   7: 2879251.195 ops/s
# Warmup Iteration   8: 2879222.480 ops/s
# Warmup Iteration   9: 2883932.587 ops/s
# Warmup Iteration  10: 2883250.454 ops/s
# Warmup Iteration  11: 2883818.916 ops/s
# Warmup Iteration  12: 2877919.248 ops/s
# Warmup Iteration  13: 2881238.090 ops/s
# Warmup Iteration  14: 2875563.075 ops/s
# Warmup Iteration  15: 2875452.222 ops/s
# Warmup Iteration  16: 2875703.976 ops/s
# Warmup Iteration  17: 2845082.193 ops/s
# Warmup Iteration  18: 2844380.916 ops/s
# Warmup Iteration  19: 2847306.477 ops/s
# Warmup Iteration  20: 2847991.523 ops/s
# Warmup Iteration  21: 2849630.645 ops/s
# Warmup Iteration  22: 2840800.653 ops/s
# Warmup Iteration  23: 2847621.282 ops/s
# Warmup Iteration  24: 2846863.683 ops/s
# Warmup Iteration  25: 2848208.147 ops/s
# Warmup Iteration  26: 2842743.481 ops/s
# Warmup Iteration  27: 2849774.205 ops/s
# Warmup Iteration  28: 2848816.866 ops/s
# Warmup Iteration  29: 2846534.399 ops/s
# Warmup Iteration  30: 2845012.663 ops/s
Iteration   1: 2854340.238 ops/s
Iteration   2: 2845650.824 ops/s
Iteration   3: 2841438.890 ops/s
Iteration   4: 2851393.437 ops/s
Iteration   5: 2842200.873 ops/s
Iteration   6: 2850202.071 ops/s
Iteration   7: 2843613.547 ops/s
Iteration   8: 2847283.116 ops/s
Iteration   9: 2852428.103 ops/s
Iteration  10: 2848907.704 ops/s
Iteration  11: 2851078.191 ops/s
Iteration  12: 2846560.437 ops/s
Iteration  13: 2841515.981 ops/s
Iteration  14: 2850716.830 ops/s
Iteration  15: 2843644.615 ops/s
Iteration  16: 2842776.456 ops/s
Iteration  17: 2851635.105 ops/s
Iteration  18: 2844662.335 ops/s
Iteration  19: 2846305.151 ops/s
Iteration  20: 2838892.762 ops/s
Iteration  21: 2838259.169 ops/s
Iteration  22: 2842415.767 ops/s
Iteration  23: 2848304.456 ops/s
Iteration  24: 2844845.283 ops/s
Iteration  25: 2854655.587 ops/s
Iteration  26: 2842487.093 ops/s
Iteration  27: 2848694.208 ops/s
Iteration  28: 2842366.674 ops/s
Iteration  29: 2800061.404 ops/s
Iteration  30: 2846257.765 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_sumByLong":
  2844786.469 ±(99.9%) 6363.360 ops/s [Average]
  (min, avg, max) = (2800061.404, 2844786.469, 2854655.587), stdev = 9524.378
  CI (99.9%): [2838423.109, 2851149.829] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_sumByLong  thrpt   30  2844786.469 ± 6363.360  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_sumDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_sumDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9510006.195 ops/s
# Warmup Iteration   2: 19783549.362 ops/s
# Warmup Iteration   3: 17743855.595 ops/s
# Warmup Iteration   4: 16212974.694 ops/s
# Warmup Iteration   5: 18377674.166 ops/s
# Warmup Iteration   6: 18349336.459 ops/s
# Warmup Iteration   7: 18375807.254 ops/s
# Warmup Iteration   8: 18371342.345 ops/s
# Warmup Iteration   9: 18349230.315 ops/s
# Warmup Iteration  10: 18367956.477 ops/s
# Warmup Iteration  11: 18357513.261 ops/s
# Warmup Iteration  12: 18362182.822 ops/s
# Warmup Iteration  13: 18392115.942 ops/s
# Warmup Iteration  14: 18362848.305 ops/s
# Warmup Iteration  15: 18366868.736 ops/s
# Warmup Iteration  16: 18395101.875 ops/s
# Warmup Iteration  17: 18358333.256 ops/s
# Warmup Iteration  18: 18375563.491 ops/s
# Warmup Iteration  19: 18428708.252 ops/s
# Warmup Iteration  20: 18364265.659 ops/s
# Warmup Iteration  21: 18403953.367 ops/s
# Warmup Iteration  22: 18345092.412 ops/s
# Warmup Iteration  23: 18354449.045 ops/s
# Warmup Iteration  24: 18388030.042 ops/s
# Warmup Iteration  25: 18286907.526 ops/s
# Warmup Iteration  26: 18340209.904 ops/s
# Warmup Iteration  27: 18349619.413 ops/s
# Warmup Iteration  28: 18355217.967 ops/s
# Warmup Iteration  29: 18326592.326 ops/s
# Warmup Iteration  30: 18399214.716 ops/s
Iteration   1: 18394905.899 ops/s
Iteration   2: 18405475.023 ops/s
Iteration   3: 18346812.894 ops/s
Iteration   4: 18385085.664 ops/s
Iteration   5: 18395374.764 ops/s
Iteration   6: 18390972.705 ops/s
Iteration   7: 18336641.345 ops/s
Iteration   8: 18354498.047 ops/s
Iteration   9: 18361739.238 ops/s
Iteration  10: 18277269.894 ops/s
Iteration  11: 18287244.283 ops/s
Iteration  12: 18254712.483 ops/s
Iteration  13: 18268536.188 ops/s
Iteration  14: 18381570.322 ops/s
Iteration  15: 18345947.621 ops/s
Iteration  16: 18364049.422 ops/s
Iteration  17: 18396715.829 ops/s
Iteration  18: 18406991.348 ops/s
Iteration  19: 18431359.715 ops/s
Iteration  20: 18405906.786 ops/s
Iteration  21: 18388975.688 ops/s
Iteration  22: 18369272.531 ops/s
Iteration  23: 18367900.195 ops/s
Iteration  24: 18424761.248 ops/s
Iteration  25: 18404391.562 ops/s
Iteration  26: 18355118.860 ops/s
Iteration  27: 18417784.296 ops/s
Iteration  28: 18395500.771 ops/s
Iteration  29: 18398028.509 ops/s
Iteration  30: 18416907.585 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_sumDouble":
  18371015.024 ±(99.9%) 31071.761 ops/s [Average]
  (min, avg, max) = (18254712.483, 18371015.024, 18431359.715), stdev = 46506.753
  CI (99.9%): [18339943.263, 18402086.785] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt         Score       Error  Units
ImmutableSubListTest._Benchmark.benchmark_sumDouble  thrpt   30  18371015.024 ± 31071.761  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_sumFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_sumFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8660145.616 ops/s
# Warmup Iteration   2: 18610073.966 ops/s
# Warmup Iteration   3: 17998776.140 ops/s
# Warmup Iteration   4: 15236472.396 ops/s
# Warmup Iteration   5: 17980426.593 ops/s
# Warmup Iteration   6: 18036084.569 ops/s
# Warmup Iteration   7: 18050481.741 ops/s
# Warmup Iteration   8: 18037170.026 ops/s
# Warmup Iteration   9: 18027160.167 ops/s
# Warmup Iteration  10: 17980316.391 ops/s
# Warmup Iteration  11: 17976328.410 ops/s
# Warmup Iteration  12: 17983141.544 ops/s
# Warmup Iteration  13: 17971316.160 ops/s
# Warmup Iteration  14: 17988136.826 ops/s
# Warmup Iteration  15: 17972440.125 ops/s
# Warmup Iteration  16: 17998284.078 ops/s
# Warmup Iteration  17: 18006528.127 ops/s
# Warmup Iteration  18: 18014395.910 ops/s
# Warmup Iteration  19: 18002146.573 ops/s
# Warmup Iteration  20: 17946630.556 ops/s
# Warmup Iteration  21: 17904948.362 ops/s
# Warmup Iteration  22: 17878733.681 ops/s
# Warmup Iteration  23: 18008718.037 ops/s
# Warmup Iteration  24: 17997049.807 ops/s
# Warmup Iteration  25: 18029821.486 ops/s
# Warmup Iteration  26: 18009500.724 ops/s
# Warmup Iteration  27: 17971753.483 ops/s
# Warmup Iteration  28: 17990169.821 ops/s
# Warmup Iteration  29: 18013892.497 ops/s
# Warmup Iteration  30: 18014702.115 ops/s
Iteration   1: 18006671.122 ops/s
Iteration   2: 18004308.515 ops/s
Iteration   3: 18053304.316 ops/s
Iteration   4: 18000435.907 ops/s
Iteration   5: 17993622.788 ops/s
Iteration   6: 18031376.663 ops/s
Iteration   7: 18061215.746 ops/s
Iteration   8: 18054153.629 ops/s
Iteration   9: 18033077.592 ops/s
Iteration  10: 18065380.179 ops/s
Iteration  11: 17997698.873 ops/s
Iteration  12: 17949543.241 ops/s
Iteration  13: 18013199.257 ops/s
Iteration  14: 18021812.865 ops/s
Iteration  15: 17992631.008 ops/s
Iteration  16: 17967711.766 ops/s
Iteration  17: 18049968.315 ops/s
Iteration  18: 17996642.068 ops/s
Iteration  19: 17941657.379 ops/s
Iteration  20: 17911729.918 ops/s
Iteration  21: 18016893.618 ops/s
Iteration  22: 17990575.801 ops/s
Iteration  23: 17987784.686 ops/s
Iteration  24: 18010066.901 ops/s
Iteration  25: 18003815.570 ops/s
Iteration  26: 17899688.457 ops/s
Iteration  27: 18010978.648 ops/s
Iteration  28: 17935208.852 ops/s
Iteration  29: 18008547.390 ops/s
Iteration  30: 18053560.440 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_sumFloat":
  18002108.717 ±(99.9%) 28239.158 ops/s [Average]
  (min, avg, max) = (17899688.457, 18002108.717, 18065380.179), stdev = 42267.046
  CI (99.9%): [17973869.559, 18030347.875] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt         Score       Error  Units
ImmutableSubListTest._Benchmark.benchmark_sumFloat  thrpt   30  18002108.717 ± 28239.158  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_sumInteger$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_sumInteger

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11220426.327 ops/s
# Warmup Iteration   2: 22998900.149 ops/s
# Warmup Iteration   3: 18651065.559 ops/s
# Warmup Iteration   4: 21921603.511 ops/s
# Warmup Iteration   5: 21923436.816 ops/s
# Warmup Iteration   6: 21871831.879 ops/s
# Warmup Iteration   7: 21870892.990 ops/s
# Warmup Iteration   8: 21874453.874 ops/s
# Warmup Iteration   9: 21862750.871 ops/s
# Warmup Iteration  10: 21919241.818 ops/s
# Warmup Iteration  11: 21916673.894 ops/s
# Warmup Iteration  12: 21897835.738 ops/s
# Warmup Iteration  13: 21847174.496 ops/s
# Warmup Iteration  14: 21932205.294 ops/s
# Warmup Iteration  15: 21920095.484 ops/s
# Warmup Iteration  16: 21906740.695 ops/s
# Warmup Iteration  17: 21911840.266 ops/s
# Warmup Iteration  18: 21916691.200 ops/s
# Warmup Iteration  19: 21918155.364 ops/s
# Warmup Iteration  20: 21892608.731 ops/s
# Warmup Iteration  21: 21933867.123 ops/s
# Warmup Iteration  22: 21876918.085 ops/s
# Warmup Iteration  23: 21922018.384 ops/s
# Warmup Iteration  24: 21871370.994 ops/s
# Warmup Iteration  25: 21929450.881 ops/s
# Warmup Iteration  26: 21878268.884 ops/s
# Warmup Iteration  27: 21914289.606 ops/s
# Warmup Iteration  28: 21953407.387 ops/s
# Warmup Iteration  29: 21886697.908 ops/s
# Warmup Iteration  30: 21940843.624 ops/s
Iteration   1: 21893122.404 ops/s
Iteration   2: 21852645.429 ops/s
Iteration   3: 21922345.443 ops/s
Iteration   4: 21927489.677 ops/s
Iteration   5: 21959949.435 ops/s
Iteration   6: 21785266.415 ops/s
Iteration   7: 21831789.490 ops/s
Iteration   8: 21927350.555 ops/s
Iteration   9: 21941947.813 ops/s
Iteration  10: 21917245.777 ops/s
Iteration  11: 21821893.712 ops/s
Iteration  12: 21976386.890 ops/s
Iteration  13: 21893183.658 ops/s
Iteration  14: 21927384.300 ops/s
Iteration  15: 21871384.776 ops/s
Iteration  16: 21933187.279 ops/s
Iteration  17: 21968129.373 ops/s
Iteration  18: 21938107.159 ops/s
Iteration  19: 21971321.698 ops/s
Iteration  20: 21891920.989 ops/s
Iteration  21: 21924345.863 ops/s
Iteration  22: 21913495.277 ops/s
Iteration  23: 21931437.536 ops/s
Iteration  24: 21939269.633 ops/s
Iteration  25: 21933668.453 ops/s
Iteration  26: 21878325.205 ops/s
Iteration  27: 21772193.245 ops/s
Iteration  28: 21805905.354 ops/s
Iteration  29: 21863492.933 ops/s
Iteration  30: 21967482.810 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_sumInteger":
  21902722.286 ±(99.9%) 37099.423 ops/s [Average]
  (min, avg, max) = (21772193.245, 21902722.286, 21976386.890), stdev = 55528.675
  CI (99.9%): [21865622.863, 21939821.709] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score       Error  Units
ImmutableSubListTest._Benchmark.benchmark_sumInteger  thrpt   30  21902722.286 ± 37099.423  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_sumLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_sumLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11257938.547 ops/s
# Warmup Iteration   2: 23023284.982 ops/s
# Warmup Iteration   3: 19595424.881 ops/s
# Warmup Iteration   4: 23101201.837 ops/s
# Warmup Iteration   5: 23070326.013 ops/s
# Warmup Iteration   6: 23084347.340 ops/s
# Warmup Iteration   7: 23082256.329 ops/s
# Warmup Iteration   8: 23021725.415 ops/s
# Warmup Iteration   9: 23078419.218 ops/s
# Warmup Iteration  10: 23071898.188 ops/s
# Warmup Iteration  11: 23020362.333 ops/s
# Warmup Iteration  12: 23031053.476 ops/s
# Warmup Iteration  13: 23089953.563 ops/s
# Warmup Iteration  14: 23048090.307 ops/s
# Warmup Iteration  15: 22994163.113 ops/s
# Warmup Iteration  16: 23107483.638 ops/s
# Warmup Iteration  17: 23087851.757 ops/s
# Warmup Iteration  18: 23061397.906 ops/s
# Warmup Iteration  19: 23071853.967 ops/s
# Warmup Iteration  20: 23060917.107 ops/s
# Warmup Iteration  21: 23099375.684 ops/s
# Warmup Iteration  22: 23132320.912 ops/s
# Warmup Iteration  23: 23088917.882 ops/s
# Warmup Iteration  24: 23039900.364 ops/s
# Warmup Iteration  25: 23057472.231 ops/s
# Warmup Iteration  26: 23060698.685 ops/s
# Warmup Iteration  27: 23074100.343 ops/s
# Warmup Iteration  28: 23057812.810 ops/s
# Warmup Iteration  29: 23097491.484 ops/s
# Warmup Iteration  30: 23113149.893 ops/s
Iteration   1: 23078112.817 ops/s
Iteration   2: 23086331.211 ops/s
Iteration   3: 22972271.879 ops/s
Iteration   4: 23096390.347 ops/s
Iteration   5: 23030218.975 ops/s
Iteration   6: 23054684.640 ops/s
Iteration   7: 23057496.747 ops/s
Iteration   8: 23082219.642 ops/s
Iteration   9: 23036813.017 ops/s
Iteration  10: 23047810.913 ops/s
Iteration  11: 23059043.537 ops/s
Iteration  12: 23074209.353 ops/s
Iteration  13: 23035716.547 ops/s
Iteration  14: 23033652.250 ops/s
Iteration  15: 23064792.921 ops/s
Iteration  16: 23137435.337 ops/s
Iteration  17: 23044566.082 ops/s
Iteration  18: 23136161.366 ops/s
Iteration  19: 23127043.537 ops/s
Iteration  20: 23050345.590 ops/s
Iteration  21: 23042787.275 ops/s
Iteration  22: 23036657.169 ops/s
Iteration  23: 23093558.764 ops/s
Iteration  24: 23148443.538 ops/s
Iteration  25: 23138990.998 ops/s
Iteration  26: 23069494.166 ops/s
Iteration  27: 23031027.808 ops/s
Iteration  28: 23075362.389 ops/s
Iteration  29: 23098043.720 ops/s
Iteration  30: 23048035.809 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_sumLong":
  23069590.611 ±(99.9%) 26696.207 ops/s [Average]
  (min, avg, max) = (22972271.879, 23069590.611, 23148443.538), stdev = 39957.629
  CI (99.9%): [23042894.404, 23096286.818] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score       Error  Units
ImmutableSubListTest._Benchmark.benchmark_sumLong  thrpt   30  23069590.611 ± 26696.207  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_take$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_take

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2178890.832 ops/s
# Warmup Iteration   2: 3967259.980 ops/s
# Warmup Iteration   3: 4555954.663 ops/s
# Warmup Iteration   4: 4577528.693 ops/s
# Warmup Iteration   5: 4316804.401 ops/s
# Warmup Iteration   6: 4020831.467 ops/s
# Warmup Iteration   7: 4584203.747 ops/s
# Warmup Iteration   8: 4583895.655 ops/s
# Warmup Iteration   9: 4585926.652 ops/s
# Warmup Iteration  10: 4581966.689 ops/s
# Warmup Iteration  11: 4578175.956 ops/s
# Warmup Iteration  12: 4581104.803 ops/s
# Warmup Iteration  13: 4585010.918 ops/s
# Warmup Iteration  14: 4583808.237 ops/s
# Warmup Iteration  15: 4578915.683 ops/s
# Warmup Iteration  16: 4585154.045 ops/s
# Warmup Iteration  17: 4597354.152 ops/s
# Warmup Iteration  18: 4585664.266 ops/s
# Warmup Iteration  19: 4591493.646 ops/s
# Warmup Iteration  20: 4586377.989 ops/s
# Warmup Iteration  21: 4573729.425 ops/s
# Warmup Iteration  22: 4536423.695 ops/s
# Warmup Iteration  23: 4581036.587 ops/s
# Warmup Iteration  24: 4581664.771 ops/s
# Warmup Iteration  25: 4589286.420 ops/s
# Warmup Iteration  26: 4588680.960 ops/s
# Warmup Iteration  27: 4589550.276 ops/s
# Warmup Iteration  28: 4582726.040 ops/s
# Warmup Iteration  29: 4592911.178 ops/s
# Warmup Iteration  30: 4587401.904 ops/s
Iteration   1: 4587798.689 ops/s
Iteration   2: 4597410.823 ops/s
Iteration   3: 4584795.528 ops/s
Iteration   4: 4592162.331 ops/s
Iteration   5: 4588397.866 ops/s
Iteration   6: 4585505.264 ops/s
Iteration   7: 4591277.618 ops/s
Iteration   8: 4587930.177 ops/s
Iteration   9: 4582565.396 ops/s
Iteration  10: 4589180.943 ops/s
Iteration  11: 4580533.316 ops/s
Iteration  12: 4588841.063 ops/s
Iteration  13: 4585649.563 ops/s
Iteration  14: 4585250.594 ops/s
Iteration  15: 4584901.315 ops/s
Iteration  16: 4582813.018 ops/s
Iteration  17: 4577254.775 ops/s
Iteration  18: 4585656.253 ops/s
Iteration  19: 4579306.636 ops/s
Iteration  20: 4586315.523 ops/s
Iteration  21: 4578578.333 ops/s
Iteration  22: 4575683.385 ops/s
Iteration  23: 4582414.581 ops/s
Iteration  24: 4583554.256 ops/s
Iteration  25: 4599361.457 ops/s
Iteration  26: 4588384.391 ops/s
Iteration  27: 4585494.173 ops/s
Iteration  28: 4590118.828 ops/s
Iteration  29: 4588487.107 ops/s
Iteration  30: 4596396.695 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_take":
  4586400.663 ±(99.9%) 3711.826 ops/s [Average]
  (min, avg, max) = (4575683.385, 4586400.663, 4599361.457), stdev = 5555.687
  CI (99.9%): [4582688.837, 4590112.489] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_take  thrpt   30  4586400.663 ± 3711.826  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_takeWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_takeWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7684036.643 ops/s
# Warmup Iteration   2: 16605531.262 ops/s
# Warmup Iteration   3: 16784344.927 ops/s
# Warmup Iteration   4: 14218942.647 ops/s
# Warmup Iteration   5: 16850910.472 ops/s
# Warmup Iteration   6: 16832612.671 ops/s
# Warmup Iteration   7: 16809580.109 ops/s
# Warmup Iteration   8: 16832994.666 ops/s
# Warmup Iteration   9: 16835289.353 ops/s
# Warmup Iteration  10: 16792267.509 ops/s
# Warmup Iteration  11: 16825057.824 ops/s
# Warmup Iteration  12: 16850801.079 ops/s
# Warmup Iteration  13: 16803814.147 ops/s
# Warmup Iteration  14: 16815389.610 ops/s
# Warmup Iteration  15: 16827829.351 ops/s
# Warmup Iteration  16: 16861059.047 ops/s
# Warmup Iteration  17: 16852256.434 ops/s
# Warmup Iteration  18: 16843586.180 ops/s
# Warmup Iteration  19: 16831800.641 ops/s
# Warmup Iteration  20: 16837142.919 ops/s
# Warmup Iteration  21: 16843484.496 ops/s
# Warmup Iteration  22: 16820160.087 ops/s
# Warmup Iteration  23: 16852180.887 ops/s
# Warmup Iteration  24: 16871671.391 ops/s
# Warmup Iteration  25: 16828483.621 ops/s
# Warmup Iteration  26: 16821155.161 ops/s
# Warmup Iteration  27: 16811599.295 ops/s
# Warmup Iteration  28: 16851491.055 ops/s
# Warmup Iteration  29: 16846262.013 ops/s
# Warmup Iteration  30: 16836246.051 ops/s
Iteration   1: 16842008.284 ops/s
Iteration   2: 16819051.474 ops/s
Iteration   3: 16925295.480 ops/s
Iteration   4: 16850170.086 ops/s
Iteration   5: 16846842.806 ops/s
Iteration   6: 16808439.522 ops/s
Iteration   7: 16814544.977 ops/s
Iteration   8: 16828943.047 ops/s
Iteration   9: 16832625.205 ops/s
Iteration  10: 16840353.965 ops/s
Iteration  11: 16850597.574 ops/s
Iteration  12: 16865560.614 ops/s
Iteration  13: 16846835.062 ops/s
Iteration  14: 16828855.930 ops/s
Iteration  15: 16824103.852 ops/s
Iteration  16: 16792244.892 ops/s
Iteration  17: 16841233.489 ops/s
Iteration  18: 16843679.762 ops/s
Iteration  19: 16820427.561 ops/s
Iteration  20: 16796945.476 ops/s
Iteration  21: 16858495.122 ops/s
Iteration  22: 16832004.907 ops/s
Iteration  23: 16750938.860 ops/s
Iteration  24: 16865679.126 ops/s
Iteration  25: 16836081.550 ops/s
Iteration  26: 16842311.387 ops/s
Iteration  27: 16816040.281 ops/s
Iteration  28: 16843815.122 ops/s
Iteration  29: 16835012.980 ops/s
Iteration  30: 16821002.770 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_takeWhile":
  16834004.705 ±(99.9%) 19349.814 ops/s [Average]
  (min, avg, max) = (16750938.860, 16834004.705, 16925295.480), stdev = 28961.893
  CI (99.9%): [16814654.891, 16853354.520] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt         Score       Error  Units
ImmutableSubListTest._Benchmark.benchmark_takeWhile  thrpt   30  16834004.705 ± 19349.814  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_take_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_take_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 713973.664 ops/s
# Warmup Iteration   2: 754730.302 ops/s
# Warmup Iteration   3: 980671.564 ops/s
# Warmup Iteration   4: 986216.982 ops/s
# Warmup Iteration   5: 975179.676 ops/s
# Warmup Iteration   6: 978246.279 ops/s
# Warmup Iteration   7: 978965.776 ops/s
# Warmup Iteration   8: 979461.863 ops/s
# Warmup Iteration   9: 981565.737 ops/s
# Warmup Iteration  10: 981632.917 ops/s
# Warmup Iteration  11: 928237.195 ops/s
# Warmup Iteration  12: 886290.495 ops/s
# Warmup Iteration  13: 980792.285 ops/s
# Warmup Iteration  14: 978950.686 ops/s
# Warmup Iteration  15: 975479.801 ops/s
# Warmup Iteration  16: 976919.608 ops/s
# Warmup Iteration  17: 1037990.508 ops/s
# Warmup Iteration  18: 1036835.589 ops/s
# Warmup Iteration  19: 1039099.626 ops/s
# Warmup Iteration  20: 1040595.787 ops/s
# Warmup Iteration  21: 1033986.695 ops/s
# Warmup Iteration  22: 1031832.088 ops/s
# Warmup Iteration  23: 1033325.733 ops/s
# Warmup Iteration  24: 1033586.556 ops/s
# Warmup Iteration  25: 1038214.361 ops/s
# Warmup Iteration  26: 1033015.945 ops/s
# Warmup Iteration  27: 1036968.300 ops/s
# Warmup Iteration  28: 1035552.419 ops/s
# Warmup Iteration  29: 1036569.660 ops/s
# Warmup Iteration  30: 1038317.013 ops/s
Iteration   1: 1035375.474 ops/s
Iteration   2: 1033857.509 ops/s
Iteration   3: 1036955.744 ops/s
Iteration   4: 1039094.258 ops/s
Iteration   5: 1036303.624 ops/s
Iteration   6: 1037118.340 ops/s
Iteration   7: 1039204.030 ops/s
Iteration   8: 1035605.032 ops/s
Iteration   9: 1032706.254 ops/s
Iteration  10: 1034842.173 ops/s
Iteration  11: 1034956.154 ops/s
Iteration  12: 1034471.743 ops/s
Iteration  13: 1035452.584 ops/s
Iteration  14: 1027207.290 ops/s
Iteration  15: 1034590.296 ops/s
Iteration  16: 1033536.986 ops/s
Iteration  17: 1029800.391 ops/s
Iteration  18: 1035944.080 ops/s
Iteration  19: 1038051.521 ops/s
Iteration  20: 1038358.577 ops/s
Iteration  21: 1038570.407 ops/s
Iteration  22: 1035138.208 ops/s
Iteration  23: 1031682.700 ops/s
Iteration  24: 1027641.757 ops/s
Iteration  25: 1036880.363 ops/s
Iteration  26: 1034098.751 ops/s
Iteration  27: 1033019.761 ops/s
Iteration  28: 1034421.937 ops/s
Iteration  29: 1037460.565 ops/s
Iteration  30: 1035879.090 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_take_throws":
  1034940.853 ±(99.9%) 1988.252 ops/s [Average]
  (min, avg, max) = (1027207.290, 1034940.853, 1039204.030), stdev = 2975.923
  CI (99.9%): [1032952.601, 1036929.106] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_take_throws  thrpt   30  1034940.853 ± 1988.252  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_tap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_tap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5236625.593 ops/s
# Warmup Iteration   2: 11150407.624 ops/s
# Warmup Iteration   3: 11290073.892 ops/s
# Warmup Iteration   4: 9533584.975 ops/s
# Warmup Iteration   5: 11275765.326 ops/s
# Warmup Iteration   6: 11244132.061 ops/s
# Warmup Iteration   7: 11278648.811 ops/s
# Warmup Iteration   8: 11262933.392 ops/s
# Warmup Iteration   9: 11241290.622 ops/s
# Warmup Iteration  10: 11250268.914 ops/s
# Warmup Iteration  11: 11264358.216 ops/s
# Warmup Iteration  12: 11277125.642 ops/s
# Warmup Iteration  13: 11271926.749 ops/s
# Warmup Iteration  14: 11260861.673 ops/s
# Warmup Iteration  15: 11277125.682 ops/s
# Warmup Iteration  16: 11261376.965 ops/s
# Warmup Iteration  17: 11315439.437 ops/s
# Warmup Iteration  18: 11323476.828 ops/s
# Warmup Iteration  19: 11301803.426 ops/s
# Warmup Iteration  20: 11312685.575 ops/s
# Warmup Iteration  21: 11317416.245 ops/s
# Warmup Iteration  22: 11307280.771 ops/s
# Warmup Iteration  23: 11314518.485 ops/s
# Warmup Iteration  24: 11303797.833 ops/s
# Warmup Iteration  25: 11292272.251 ops/s
# Warmup Iteration  26: 11313239.541 ops/s
# Warmup Iteration  27: 11298118.205 ops/s
# Warmup Iteration  28: 11311212.963 ops/s
# Warmup Iteration  29: 11311449.634 ops/s
# Warmup Iteration  30: 11253165.495 ops/s
Iteration   1: 11343251.757 ops/s
Iteration   2: 11304676.656 ops/s
Iteration   3: 11298094.089 ops/s
Iteration   4: 11309835.083 ops/s
Iteration   5: 11302358.214 ops/s
Iteration   6: 11314332.166 ops/s
Iteration   7: 11328304.553 ops/s
Iteration   8: 11282569.814 ops/s
Iteration   9: 11334731.143 ops/s
Iteration  10: 11314396.037 ops/s
Iteration  11: 11319200.511 ops/s
Iteration  12: 11317382.652 ops/s
Iteration  13: 11285304.340 ops/s
Iteration  14: 11323508.695 ops/s
Iteration  15: 11308614.542 ops/s
Iteration  16: 11275026.637 ops/s
Iteration  17: 11281910.240 ops/s
Iteration  18: 11302812.520 ops/s
Iteration  19: 11326133.809 ops/s
Iteration  20: 11321249.215 ops/s
Iteration  21: 11311077.838 ops/s
Iteration  22: 11322665.734 ops/s
Iteration  23: 11310977.843 ops/s
Iteration  24: 11319333.745 ops/s
Iteration  25: 11311797.083 ops/s
Iteration  26: 11319170.645 ops/s
Iteration  27: 11324145.257 ops/s
Iteration  28: 11305086.859 ops/s
Iteration  29: 11276802.928 ops/s
Iteration  30: 11333402.388 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_tap":
  11310938.433 ±(99.9%) 11532.087 ops/s [Average]
  (min, avg, max) = (11275026.637, 11310938.433, 11343251.757), stdev = 17260.686
  CI (99.9%): [11299406.347, 11322470.520] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt         Score       Error  Units
ImmutableSubListTest._Benchmark.benchmark_tap  thrpt   30  11310938.433 ± 11532.087  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_testSubListListIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_testSubListListIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 21647674.808 ops/s
# Warmup Iteration   2: 43888578.168 ops/s
# Warmup Iteration   3: 37293088.611 ops/s
# Warmup Iteration   4: 43899837.644 ops/s
# Warmup Iteration   5: 43833117.497 ops/s
# Warmup Iteration   6: 43826207.080 ops/s
# Warmup Iteration   7: 43960361.176 ops/s
# Warmup Iteration   8: 43919202.409 ops/s
# Warmup Iteration   9: 43887448.735 ops/s
# Warmup Iteration  10: 43926244.981 ops/s
# Warmup Iteration  11: 43935450.741 ops/s
# Warmup Iteration  12: 43858272.132 ops/s
# Warmup Iteration  13: 43925586.226 ops/s
# Warmup Iteration  14: 43858742.802 ops/s
# Warmup Iteration  15: 44057946.784 ops/s
# Warmup Iteration  16: 43859051.356 ops/s
# Warmup Iteration  17: 43920815.454 ops/s
# Warmup Iteration  18: 43909922.386 ops/s
# Warmup Iteration  19: 43872423.735 ops/s
# Warmup Iteration  20: 43936414.310 ops/s
# Warmup Iteration  21: 43952732.025 ops/s
# Warmup Iteration  22: 43970616.569 ops/s
# Warmup Iteration  23: 43893158.365 ops/s
# Warmup Iteration  24: 43918199.175 ops/s
# Warmup Iteration  25: 43971382.704 ops/s
# Warmup Iteration  26: 43897988.257 ops/s
# Warmup Iteration  27: 43792193.625 ops/s
# Warmup Iteration  28: 43938186.962 ops/s
# Warmup Iteration  29: 43973796.380 ops/s
# Warmup Iteration  30: 43958190.776 ops/s
Iteration   1: 43757897.633 ops/s
Iteration   2: 43954316.873 ops/s
Iteration   3: 43829759.580 ops/s
Iteration   4: 43811389.387 ops/s
Iteration   5: 43894741.598 ops/s
Iteration   6: 43921551.542 ops/s
Iteration   7: 43904111.309 ops/s
Iteration   8: 43854590.685 ops/s
Iteration   9: 43814743.825 ops/s
Iteration  10: 43941735.566 ops/s
Iteration  11: 44015441.713 ops/s
Iteration  12: 41407498.819 ops/s
Iteration  13: 43708066.971 ops/s
Iteration  14: 43719166.321 ops/s
Iteration  15: 43956594.808 ops/s
Iteration  16: 44057826.994 ops/s
Iteration  17: 43819818.336 ops/s
Iteration  18: 43770340.411 ops/s
Iteration  19: 43950043.786 ops/s
Iteration  20: 43928893.749 ops/s
Iteration  21: 43886701.284 ops/s
Iteration  22: 43930192.152 ops/s
Iteration  23: 43959053.060 ops/s
Iteration  24: 43837152.811 ops/s
Iteration  25: 43921578.238 ops/s
Iteration  26: 43943554.010 ops/s
Iteration  27: 42310862.964 ops/s
Iteration  28: 43935425.947 ops/s
Iteration  29: 43998461.849 ops/s
Iteration  30: 43821977.451 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_testSubListListIterator":
  43752116.322 ±(99.9%) 357317.651 ops/s [Average]
  (min, avg, max) = (41407498.819, 43752116.322, 44057826.994), stdev = 534816.279
  CI (99.9%): [43394798.672, 44109433.973] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score        Error  Units
ImmutableSubListTest._Benchmark.benchmark_testSubListListIterator  thrpt   30  43752116.322 ± 357317.651  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_testSubListListIteratorAdd_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_testSubListListIteratorAdd_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 602651.122 ops/s
# Warmup Iteration   2: 715836.607 ops/s
# Warmup Iteration   3: 887851.476 ops/s
# Warmup Iteration   4: 885116.405 ops/s
# Warmup Iteration   5: 890731.572 ops/s
# Warmup Iteration   6: 889087.440 ops/s
# Warmup Iteration   7: 888571.268 ops/s
# Warmup Iteration   8: 889623.117 ops/s
# Warmup Iteration   9: 785850.148 ops/s
# Warmup Iteration  10: 854753.796 ops/s
# Warmup Iteration  11: 887241.314 ops/s
# Warmup Iteration  12: 891354.332 ops/s
# Warmup Iteration  13: 891974.229 ops/s
# Warmup Iteration  14: 892066.353 ops/s
# Warmup Iteration  15: 887767.275 ops/s
# Warmup Iteration  16: 887253.834 ops/s
# Warmup Iteration  17: 938510.197 ops/s
# Warmup Iteration  18: 940514.965 ops/s
# Warmup Iteration  19: 940296.544 ops/s
# Warmup Iteration  20: 940839.888 ops/s
# Warmup Iteration  21: 942056.173 ops/s
# Warmup Iteration  22: 940187.878 ops/s
# Warmup Iteration  23: 941659.484 ops/s
# Warmup Iteration  24: 940619.881 ops/s
# Warmup Iteration  25: 940992.121 ops/s
# Warmup Iteration  26: 939388.633 ops/s
# Warmup Iteration  27: 941697.278 ops/s
# Warmup Iteration  28: 940901.593 ops/s
# Warmup Iteration  29: 940896.253 ops/s
# Warmup Iteration  30: 942315.371 ops/s
Iteration   1: 939094.743 ops/s
Iteration   2: 942533.295 ops/s
Iteration   3: 942742.083 ops/s
Iteration   4: 941125.020 ops/s
Iteration   5: 944063.701 ops/s
Iteration   6: 942415.027 ops/s
Iteration   7: 938662.272 ops/s
Iteration   8: 940627.920 ops/s
Iteration   9: 940039.450 ops/s
Iteration  10: 942621.675 ops/s
Iteration  11: 942653.217 ops/s
Iteration  12: 940400.710 ops/s
Iteration  13: 939439.673 ops/s
Iteration  14: 937428.779 ops/s
Iteration  15: 940190.298 ops/s
Iteration  16: 938691.625 ops/s
Iteration  17: 940290.367 ops/s
Iteration  18: 941462.218 ops/s
Iteration  19: 942839.019 ops/s
Iteration  20: 943179.567 ops/s
Iteration  21: 938440.305 ops/s
Iteration  22: 941980.342 ops/s
Iteration  23: 940146.274 ops/s
Iteration  24: 938583.292 ops/s
Iteration  25: 940856.971 ops/s
Iteration  26: 941273.332 ops/s
Iteration  27: 939621.484 ops/s
Iteration  28: 941016.210 ops/s
Iteration  29: 940595.184 ops/s
Iteration  30: 939561.637 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_testSubListListIteratorAdd_throws":
  940752.523 ±(99.9%) 1103.862 ops/s [Average]
  (min, avg, max) = (937428.779, 940752.523, 944063.701), stdev = 1652.209
  CI (99.9%): [939648.661, 941856.385] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_testSubListListIteratorAdd_throws  thrpt   30  940752.523 ± 1103.862  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_testSubListListIteratorRemove_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_testSubListListIteratorRemove_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 747013.023 ops/s
# Warmup Iteration   2: 819747.490 ops/s
# Warmup Iteration   3: 1056173.218 ops/s
# Warmup Iteration   4: 1056285.335 ops/s
# Warmup Iteration   5: 1050026.453 ops/s
# Warmup Iteration   6: 1054347.126 ops/s
# Warmup Iteration   7: 1051202.032 ops/s
# Warmup Iteration   8: 1054392.007 ops/s
# Warmup Iteration   9: 1052339.111 ops/s
# Warmup Iteration  10: 1043608.569 ops/s
# Warmup Iteration  11: 900771.674 ops/s
# Warmup Iteration  12: 1055477.905 ops/s
# Warmup Iteration  13: 1054624.499 ops/s
# Warmup Iteration  14: 1051737.612 ops/s
# Warmup Iteration  15: 1050025.392 ops/s
# Warmup Iteration  16: 1051833.680 ops/s
# Warmup Iteration  17: 1121057.397 ops/s
# Warmup Iteration  18: 1124826.874 ops/s
# Warmup Iteration  19: 1123054.907 ops/s
# Warmup Iteration  20: 1119333.349 ops/s
# Warmup Iteration  21: 1120539.977 ops/s
# Warmup Iteration  22: 1117600.516 ops/s
# Warmup Iteration  23: 1120781.479 ops/s
# Warmup Iteration  24: 1118166.466 ops/s
# Warmup Iteration  25: 1119020.881 ops/s
# Warmup Iteration  26: 1121748.029 ops/s
# Warmup Iteration  27: 1121616.606 ops/s
# Warmup Iteration  28: 1116575.649 ops/s
# Warmup Iteration  29: 1116149.487 ops/s
# Warmup Iteration  30: 1116603.594 ops/s
Iteration   1: 1122323.414 ops/s
Iteration   2: 1123562.945 ops/s
Iteration   3: 1121690.731 ops/s
Iteration   4: 1119466.053 ops/s
Iteration   5: 1117338.598 ops/s
Iteration   6: 1121230.181 ops/s
Iteration   7: 1115576.557 ops/s
Iteration   8: 1122302.127 ops/s
Iteration   9: 1122241.575 ops/s
Iteration  10: 1118585.068 ops/s
Iteration  11: 1114760.837 ops/s
Iteration  12: 1119073.664 ops/s
Iteration  13: 1116864.992 ops/s
Iteration  14: 1111146.538 ops/s
Iteration  15: 1121013.629 ops/s
Iteration  16: 1119231.158 ops/s
Iteration  17: 1118353.652 ops/s
Iteration  18: 1120109.633 ops/s
Iteration  19: 1119327.409 ops/s
Iteration  20: 1119337.325 ops/s
Iteration  21: 1121262.835 ops/s
Iteration  22: 1120951.136 ops/s
Iteration  23: 1119075.287 ops/s
Iteration  24: 1115903.886 ops/s
Iteration  25: 1120426.068 ops/s
Iteration  26: 1124866.875 ops/s
Iteration  27: 1126689.256 ops/s
Iteration  28: 1123696.566 ops/s
Iteration  29: 1122335.429 ops/s
Iteration  30: 1119459.138 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_testSubListListIteratorRemove_throws":
  1119940.085 ±(99.9%) 2118.318 ops/s [Average]
  (min, avg, max) = (1111146.538, 1119940.085, 1126689.256), stdev = 3170.599
  CI (99.9%): [1117821.767, 1122058.404] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_testSubListListIteratorRemove_throws  thrpt   30  1119940.085 ± 2118.318  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_testSubListListIteratorSet_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_testSubListListIteratorSet_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 747100.813 ops/s
# Warmup Iteration   2: 811343.297 ops/s
# Warmup Iteration   3: 1022978.903 ops/s
# Warmup Iteration   4: 1025850.340 ops/s
# Warmup Iteration   5: 1022277.561 ops/s
# Warmup Iteration   6: 1025101.985 ops/s
# Warmup Iteration   7: 1018093.102 ops/s
# Warmup Iteration   8: 1024355.215 ops/s
# Warmup Iteration   9: 1017676.138 ops/s
# Warmup Iteration  10: 1019971.056 ops/s
# Warmup Iteration  11: 873417.385 ops/s
# Warmup Iteration  12: 1023476.971 ops/s
# Warmup Iteration  13: 1022486.536 ops/s
# Warmup Iteration  14: 1021749.841 ops/s
# Warmup Iteration  15: 1025045.957 ops/s
# Warmup Iteration  16: 1028271.998 ops/s
# Warmup Iteration  17: 1086589.659 ops/s
# Warmup Iteration  18: 1084941.174 ops/s
# Warmup Iteration  19: 1091840.210 ops/s
# Warmup Iteration  20: 1090102.328 ops/s
# Warmup Iteration  21: 1091694.367 ops/s
# Warmup Iteration  22: 1093710.749 ops/s
# Warmup Iteration  23: 1092795.240 ops/s
# Warmup Iteration  24: 1088304.060 ops/s
# Warmup Iteration  25: 1090553.252 ops/s
# Warmup Iteration  26: 1084495.527 ops/s
# Warmup Iteration  27: 1077694.244 ops/s
# Warmup Iteration  28: 1080718.141 ops/s
# Warmup Iteration  29: 1084030.719 ops/s
# Warmup Iteration  30: 1092720.749 ops/s
Iteration   1: 1092603.072 ops/s
Iteration   2: 1088099.035 ops/s
Iteration   3: 1090040.628 ops/s
Iteration   4: 1089229.544 ops/s
Iteration   5: 1088699.263 ops/s
Iteration   6: 1091791.088 ops/s
Iteration   7: 1089256.036 ops/s
Iteration   8: 1088714.976 ops/s
Iteration   9: 1088440.223 ops/s
Iteration  10: 1090319.376 ops/s
Iteration  11: 1094645.547 ops/s
Iteration  12: 1096741.015 ops/s
Iteration  13: 1086644.630 ops/s
Iteration  14: 1093927.626 ops/s
Iteration  15: 1094176.148 ops/s
Iteration  16: 1094783.468 ops/s
Iteration  17: 1096272.400 ops/s
Iteration  18: 1091389.197 ops/s
Iteration  19: 1089523.529 ops/s
Iteration  20: 1089184.714 ops/s
Iteration  21: 1093443.832 ops/s
Iteration  22: 1093836.090 ops/s
Iteration  23: 1089494.012 ops/s
Iteration  24: 1092294.165 ops/s
Iteration  25: 1090804.959 ops/s
Iteration  26: 1090686.904 ops/s
Iteration  27: 1092940.420 ops/s
Iteration  28: 1089254.230 ops/s
Iteration  29: 1089949.117 ops/s
Iteration  30: 1089070.091 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_testSubListListIteratorSet_throws":
  1091208.511 ±(99.9%) 1738.188 ops/s [Average]
  (min, avg, max) = (1086644.630, 1091208.511, 1096741.015), stdev = 2601.639
  CI (99.9%): [1089470.323, 1092946.699] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_testSubListListIteratorSet_throws  thrpt   30  1091208.511 ± 1738.188  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1459699.934 ops/s
# Warmup Iteration   2: 3387984.911 ops/s
# Warmup Iteration   3: 3382574.890 ops/s
# Warmup Iteration   4: 2797148.730 ops/s
# Warmup Iteration   5: 3382778.276 ops/s
# Warmup Iteration   6: 3380083.111 ops/s
# Warmup Iteration   7: 3379520.005 ops/s
# Warmup Iteration   8: 3380355.978 ops/s
# Warmup Iteration   9: 3385478.273 ops/s
# Warmup Iteration  10: 3374615.127 ops/s
# Warmup Iteration  11: 3383795.724 ops/s
# Warmup Iteration  12: 3378833.017 ops/s
# Warmup Iteration  13: 3326012.068 ops/s
# Warmup Iteration  14: 3369329.734 ops/s
# Warmup Iteration  15: 3382084.198 ops/s
# Warmup Iteration  16: 3382676.693 ops/s
# Warmup Iteration  17: 3386814.081 ops/s
# Warmup Iteration  18: 3379920.537 ops/s
# Warmup Iteration  19: 3380463.354 ops/s
# Warmup Iteration  20: 3381691.777 ops/s
# Warmup Iteration  21: 3375084.201 ops/s
# Warmup Iteration  22: 3385047.399 ops/s
# Warmup Iteration  23: 3380315.110 ops/s
# Warmup Iteration  24: 3377333.918 ops/s
# Warmup Iteration  25: 3378162.798 ops/s
# Warmup Iteration  26: 3373803.020 ops/s
# Warmup Iteration  27: 3382142.543 ops/s
# Warmup Iteration  28: 3383192.825 ops/s
# Warmup Iteration  29: 3380932.423 ops/s
# Warmup Iteration  30: 3381038.511 ops/s
Iteration   1: 3382016.063 ops/s
Iteration   2: 3386769.482 ops/s
Iteration   3: 3380293.722 ops/s
Iteration   4: 3382847.550 ops/s
Iteration   5: 3377741.053 ops/s
Iteration   6: 3377323.244 ops/s
Iteration   7: 3356652.876 ops/s
Iteration   8: 3379506.721 ops/s
Iteration   9: 3383226.973 ops/s
Iteration  10: 3370538.209 ops/s
Iteration  11: 3387511.603 ops/s
Iteration  12: 3382203.719 ops/s
Iteration  13: 3379500.655 ops/s
Iteration  14: 3378762.898 ops/s
Iteration  15: 3377529.421 ops/s
Iteration  16: 3384841.803 ops/s
Iteration  17: 3378875.257 ops/s
Iteration  18: 3379144.393 ops/s
Iteration  19: 3385789.926 ops/s
Iteration  20: 3382974.850 ops/s
Iteration  21: 3375525.769 ops/s
Iteration  22: 3378107.392 ops/s
Iteration  23: 3376694.060 ops/s
Iteration  24: 3383803.449 ops/s
Iteration  25: 3379585.168 ops/s
Iteration  26: 3381569.771 ops/s
Iteration  27: 3384598.153 ops/s
Iteration  28: 3380821.398 ops/s
Iteration  29: 3388913.153 ops/s
Iteration  30: 3387997.636 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_testToString":
  3380388.879 ±(99.9%) 4048.643 ops/s [Average]
  (min, avg, max) = (3356652.876, 3380388.879, 3388913.153), stdev = 6059.818
  CI (99.9%): [3376340.236, 3384437.522] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_testToString  thrpt   30  3380388.879 ± 4048.643  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2729262.282 ops/s
# Warmup Iteration   2: 5532099.414 ops/s
# Warmup Iteration   3: 6025875.051 ops/s
# Warmup Iteration   4: 6093300.104 ops/s
# Warmup Iteration   5: 4939894.470 ops/s
# Warmup Iteration   6: 6101695.609 ops/s
# Warmup Iteration   7: 6088265.438 ops/s
# Warmup Iteration   8: 6091648.113 ops/s
# Warmup Iteration   9: 6098474.909 ops/s
# Warmup Iteration  10: 6105316.265 ops/s
# Warmup Iteration  11: 6105175.442 ops/s
# Warmup Iteration  12: 6093269.711 ops/s
# Warmup Iteration  13: 6097774.892 ops/s
# Warmup Iteration  14: 6084924.533 ops/s
# Warmup Iteration  15: 6086402.100 ops/s
# Warmup Iteration  16: 6101265.323 ops/s
# Warmup Iteration  17: 6058473.836 ops/s
# Warmup Iteration  18: 6069812.065 ops/s
# Warmup Iteration  19: 6061531.966 ops/s
# Warmup Iteration  20: 6057926.924 ops/s
# Warmup Iteration  21: 6063259.459 ops/s
# Warmup Iteration  22: 6050616.400 ops/s
# Warmup Iteration  23: 6061379.720 ops/s
# Warmup Iteration  24: 6061579.119 ops/s
# Warmup Iteration  25: 6061640.112 ops/s
# Warmup Iteration  26: 6065979.237 ops/s
# Warmup Iteration  27: 6059792.547 ops/s
# Warmup Iteration  28: 6063846.747 ops/s
# Warmup Iteration  29: 6058002.554 ops/s
# Warmup Iteration  30: 6048121.503 ops/s
Iteration   1: 6060045.295 ops/s
Iteration   2: 6055514.792 ops/s
Iteration   3: 6070224.388 ops/s
Iteration   4: 6061515.150 ops/s
Iteration   5: 6071349.407 ops/s
Iteration   6: 6058908.829 ops/s
Iteration   7: 6060741.799 ops/s
Iteration   8: 6072507.003 ops/s
Iteration   9: 6066097.068 ops/s
Iteration  10: 6058114.479 ops/s
Iteration  11: 6070326.700 ops/s
Iteration  12: 6061042.378 ops/s
Iteration  13: 6055168.049 ops/s
Iteration  14: 6028479.250 ops/s
Iteration  15: 6062658.862 ops/s
Iteration  16: 6056172.665 ops/s
Iteration  17: 6062985.280 ops/s
Iteration  18: 6073861.044 ops/s
Iteration  19: 6069127.958 ops/s
Iteration  20: 6057920.379 ops/s
Iteration  21: 6067048.836 ops/s
Iteration  22: 6066479.148 ops/s
Iteration  23: 6064039.275 ops/s
Iteration  24: 6070710.162 ops/s
Iteration  25: 6049090.118 ops/s
Iteration  26: 6065130.063 ops/s
Iteration  27: 6053638.677 ops/s
Iteration  28: 6077954.069 ops/s
Iteration  29: 6058406.638 ops/s
Iteration  30: 6055721.488 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_toArray":
  6062032.642 ±(99.9%) 6224.866 ops/s [Average]
  (min, avg, max) = (6028479.250, 6062032.642, 6077954.069), stdev = 9317.088
  CI (99.9%): [6055807.775, 6068257.508] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_toArray  thrpt   30  6062032.642 ± 6224.866  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_toImmutable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_toImmutable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 30557354.784 ops/s
# Warmup Iteration   2: 54662910.298 ops/s
# Warmup Iteration   3: 50491261.223 ops/s
# Warmup Iteration   4: 57723693.155 ops/s
# Warmup Iteration   5: 58005987.252 ops/s
# Warmup Iteration   6: 57961467.538 ops/s
# Warmup Iteration   7: 57512668.246 ops/s
# Warmup Iteration   8: 57495938.457 ops/s
# Warmup Iteration   9: 57275548.028 ops/s
# Warmup Iteration  10: 57973989.592 ops/s
# Warmup Iteration  11: 58038403.126 ops/s
# Warmup Iteration  12: 57660510.963 ops/s
# Warmup Iteration  13: 57294944.865 ops/s
# Warmup Iteration  14: 57785414.320 ops/s
# Warmup Iteration  15: 58061761.231 ops/s
# Warmup Iteration  16: 57351403.127 ops/s
# Warmup Iteration  17: 57595214.886 ops/s
# Warmup Iteration  18: 58266218.973 ops/s
# Warmup Iteration  19: 58338793.919 ops/s
# Warmup Iteration  20: 56625978.495 ops/s
# Warmup Iteration  21: 58406837.861 ops/s
# Warmup Iteration  22: 57747950.132 ops/s
# Warmup Iteration  23: 57085960.575 ops/s
# Warmup Iteration  24: 58607390.329 ops/s
# Warmup Iteration  25: 58529053.214 ops/s
# Warmup Iteration  26: 58110755.770 ops/s
# Warmup Iteration  27: 57527076.200 ops/s
# Warmup Iteration  28: 57153311.921 ops/s
# Warmup Iteration  29: 57741077.143 ops/s
# Warmup Iteration  30: 57473358.848 ops/s
Iteration   1: 57842400.216 ops/s
Iteration   2: 57604022.621 ops/s
Iteration   3: 57500647.981 ops/s
Iteration   4: 57459304.552 ops/s
Iteration   5: 58090918.444 ops/s
Iteration   6: 57266636.075 ops/s
Iteration   7: 58257622.677 ops/s
Iteration   8: 58142972.903 ops/s
Iteration   9: 57732766.331 ops/s
Iteration  10: 57566675.195 ops/s
Iteration  11: 57043147.858 ops/s
Iteration  12: 58216036.245 ops/s
Iteration  13: 58363590.313 ops/s
Iteration  14: 57842115.130 ops/s
Iteration  15: 58120919.288 ops/s
Iteration  16: 58332481.485 ops/s
Iteration  17: 57486210.994 ops/s
Iteration  18: 57222883.658 ops/s
Iteration  19: 57873878.246 ops/s
Iteration  20: 56916844.516 ops/s
Iteration  21: 56048778.589 ops/s
Iteration  22: 56098443.095 ops/s
Iteration  23: 56778836.438 ops/s
Iteration  24: 57186979.529 ops/s
Iteration  25: 57658643.166 ops/s
Iteration  26: 57421705.435 ops/s
Iteration  27: 56710791.950 ops/s
Iteration  28: 57410142.196 ops/s
Iteration  29: 57852753.361 ops/s
Iteration  30: 58029050.972 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_toImmutable":
  57535939.982 ±(99.9%) 402311.049 ops/s [Average]
  (min, avg, max) = (56048778.589, 57535939.982, 58363590.313), stdev = 602160.284
  CI (99.9%): [57133628.933, 57938251.031] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score        Error  Units
ImmutableSubListTest._Benchmark.benchmark_toImmutable  thrpt   30  57535939.982 ± 402311.049  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2316545.972 ops/s
# Warmup Iteration   2: 5232751.182 ops/s
# Warmup Iteration   3: 4993406.863 ops/s
# Warmup Iteration   4: 4737340.641 ops/s
# Warmup Iteration   5: 5281885.351 ops/s
# Warmup Iteration   6: 5289403.682 ops/s
# Warmup Iteration   7: 5292390.203 ops/s
# Warmup Iteration   8: 5242948.493 ops/s
# Warmup Iteration   9: 5297846.747 ops/s
# Warmup Iteration  10: 5247535.455 ops/s
# Warmup Iteration  11: 5285959.510 ops/s
# Warmup Iteration  12: 5292842.068 ops/s
# Warmup Iteration  13: 5284250.074 ops/s
# Warmup Iteration  14: 5286221.586 ops/s
# Warmup Iteration  15: 5290751.819 ops/s
# Warmup Iteration  16: 5291340.027 ops/s
# Warmup Iteration  17: 5286643.547 ops/s
# Warmup Iteration  18: 5287125.350 ops/s
# Warmup Iteration  19: 5289434.100 ops/s
# Warmup Iteration  20: 5293275.956 ops/s
# Warmup Iteration  21: 5298134.379 ops/s
# Warmup Iteration  22: 5288402.246 ops/s
# Warmup Iteration  23: 5286148.619 ops/s
# Warmup Iteration  24: 5295502.642 ops/s
# Warmup Iteration  25: 5290416.806 ops/s
# Warmup Iteration  26: 5294016.320 ops/s
# Warmup Iteration  27: 5282386.554 ops/s
# Warmup Iteration  28: 5248635.821 ops/s
# Warmup Iteration  29: 5267936.725 ops/s
# Warmup Iteration  30: 5285469.426 ops/s
Iteration   1: 5295138.566 ops/s
Iteration   2: 5287856.184 ops/s
Iteration   3: 5277553.799 ops/s
Iteration   4: 5287870.683 ops/s
Iteration   5: 5286509.387 ops/s
Iteration   6: 5285839.933 ops/s
Iteration   7: 5288835.787 ops/s
Iteration   8: 5292030.428 ops/s
Iteration   9: 5298057.301 ops/s
Iteration  10: 5283467.921 ops/s
Iteration  11: 5288575.569 ops/s
Iteration  12: 5295806.726 ops/s
Iteration  13: 5288630.351 ops/s
Iteration  14: 5286397.251 ops/s
Iteration  15: 5308703.014 ops/s
Iteration  16: 5279782.858 ops/s
Iteration  17: 5296924.819 ops/s
Iteration  18: 5281326.937 ops/s
Iteration  19: 5293019.160 ops/s
Iteration  20: 5290234.719 ops/s
Iteration  21: 5293322.741 ops/s
Iteration  22: 5300703.475 ops/s
Iteration  23: 5265284.808 ops/s
Iteration  24: 5285725.989 ops/s
Iteration  25: 5295322.119 ops/s
Iteration  26: 5295686.227 ops/s
Iteration  27: 5297021.227 ops/s
Iteration  28: 5293119.686 ops/s
Iteration  29: 5288217.702 ops/s
Iteration  30: 5295075.910 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_toList":
  5290068.043 ±(99.9%) 5369.819 ops/s [Average]
  (min, avg, max) = (5265284.808, 5290068.043, 5308703.014), stdev = 8037.293
  CI (99.9%): [5284698.224, 5295437.861] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_toList  thrpt   30  5290068.043 ± 5369.819  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_toReversed$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_toReversed

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1709055.335 ops/s
# Warmup Iteration   2: 2106589.409 ops/s
# Warmup Iteration   3: 2730247.092 ops/s
# Warmup Iteration   4: 2714753.420 ops/s
# Warmup Iteration   5: 2723069.054 ops/s
# Warmup Iteration   6: 2720033.393 ops/s
# Warmup Iteration   7: 2725167.797 ops/s
# Warmup Iteration   8: 2726259.217 ops/s
# Warmup Iteration   9: 2253317.077 ops/s
# Warmup Iteration  10: 2729653.179 ops/s
# Warmup Iteration  11: 2733738.429 ops/s
# Warmup Iteration  12: 2731695.007 ops/s
# Warmup Iteration  13: 2734952.392 ops/s
# Warmup Iteration  14: 2732654.534 ops/s
# Warmup Iteration  15: 2729273.063 ops/s
# Warmup Iteration  16: 2731521.815 ops/s
# Warmup Iteration  17: 2727552.529 ops/s
# Warmup Iteration  18: 2726987.519 ops/s
# Warmup Iteration  19: 2730452.180 ops/s
# Warmup Iteration  20: 2730271.204 ops/s
# Warmup Iteration  21: 2729955.302 ops/s
# Warmup Iteration  22: 2735066.287 ops/s
# Warmup Iteration  23: 2702072.068 ops/s
# Warmup Iteration  24: 2730962.121 ops/s
# Warmup Iteration  25: 2734029.901 ops/s
# Warmup Iteration  26: 2731237.596 ops/s
# Warmup Iteration  27: 2731877.285 ops/s
# Warmup Iteration  28: 2731223.753 ops/s
# Warmup Iteration  29: 2731544.759 ops/s
# Warmup Iteration  30: 2731588.783 ops/s
Iteration   1: 2733225.609 ops/s
Iteration   2: 2726988.672 ops/s
Iteration   3: 2721778.749 ops/s
Iteration   4: 2733822.102 ops/s
Iteration   5: 2733786.690 ops/s
Iteration   6: 2728938.058 ops/s
Iteration   7: 2735090.914 ops/s
Iteration   8: 2732396.321 ops/s
Iteration   9: 2726555.364 ops/s
Iteration  10: 2733081.943 ops/s
Iteration  11: 2733391.387 ops/s
Iteration  12: 2730019.181 ops/s
Iteration  13: 2735684.834 ops/s
Iteration  14: 2734334.460 ops/s
Iteration  15: 2731712.267 ops/s
Iteration  16: 2734301.777 ops/s
Iteration  17: 2734125.541 ops/s
Iteration  18: 2732838.269 ops/s
Iteration  19: 2721909.498 ops/s
Iteration  20: 2733767.665 ops/s
Iteration  21: 2724140.766 ops/s
Iteration  22: 2732980.328 ops/s
Iteration  23: 2732260.913 ops/s
Iteration  24: 2727085.045 ops/s
Iteration  25: 2736304.373 ops/s
Iteration  26: 2733330.282 ops/s
Iteration  27: 2723309.570 ops/s
Iteration  28: 2723577.382 ops/s
Iteration  29: 2707470.718 ops/s
Iteration  30: 2730027.052 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_toReversed":
  2729941.191 ±(99.9%) 4039.405 ops/s [Average]
  (min, avg, max) = (2707470.718, 2729941.191, 2736304.373), stdev = 6045.992
  CI (99.9%): [2725901.785, 2733980.596] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_toReversed  thrpt   30  2729941.191 ± 4039.405  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_toSortedList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_toSortedList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2955322.038 ops/s
# Warmup Iteration   2: 5610037.337 ops/s
# Warmup Iteration   3: 6117304.799 ops/s
# Warmup Iteration   4: 6149090.036 ops/s
# Warmup Iteration   5: 5120824.798 ops/s
# Warmup Iteration   6: 6146921.023 ops/s
# Warmup Iteration   7: 6141760.863 ops/s
# Warmup Iteration   8: 6155043.779 ops/s
# Warmup Iteration   9: 6163638.194 ops/s
# Warmup Iteration  10: 6161450.404 ops/s
# Warmup Iteration  11: 6162555.221 ops/s
# Warmup Iteration  12: 6150963.172 ops/s
# Warmup Iteration  13: 6162362.658 ops/s
# Warmup Iteration  14: 6090291.306 ops/s
# Warmup Iteration  15: 6157622.980 ops/s
# Warmup Iteration  16: 6161011.440 ops/s
# Warmup Iteration  17: 6160551.139 ops/s
# Warmup Iteration  18: 6153726.088 ops/s
# Warmup Iteration  19: 6158112.323 ops/s
# Warmup Iteration  20: 6166053.625 ops/s
# Warmup Iteration  21: 6142745.240 ops/s
# Warmup Iteration  22: 6155587.995 ops/s
# Warmup Iteration  23: 6161375.257 ops/s
# Warmup Iteration  24: 6163147.165 ops/s
# Warmup Iteration  25: 6167787.048 ops/s
# Warmup Iteration  26: 6166925.761 ops/s
# Warmup Iteration  27: 6163732.914 ops/s
# Warmup Iteration  28: 6155475.784 ops/s
# Warmup Iteration  29: 6158808.396 ops/s
# Warmup Iteration  30: 6135640.723 ops/s
Iteration   1: 6150192.514 ops/s
Iteration   2: 6159086.898 ops/s
Iteration   3: 6178194.124 ops/s
Iteration   4: 6153825.016 ops/s
Iteration   5: 6153918.622 ops/s
Iteration   6: 6170095.117 ops/s
Iteration   7: 6164078.080 ops/s
Iteration   8: 6159899.949 ops/s
Iteration   9: 6176520.603 ops/s
Iteration  10: 6155009.801 ops/s
Iteration  11: 6164685.998 ops/s
Iteration  12: 6169943.273 ops/s
Iteration  13: 6158876.893 ops/s
Iteration  14: 6156856.921 ops/s
Iteration  15: 6165947.094 ops/s
Iteration  16: 6166327.038 ops/s
Iteration  17: 6163737.503 ops/s
Iteration  18: 6171309.285 ops/s
Iteration  19: 6164723.504 ops/s
Iteration  20: 6146785.903 ops/s
Iteration  21: 6168697.810 ops/s
Iteration  22: 6152787.594 ops/s
Iteration  23: 6164862.092 ops/s
Iteration  24: 6138863.997 ops/s
Iteration  25: 6142849.074 ops/s
Iteration  26: 6173582.344 ops/s
Iteration  27: 6158007.348 ops/s
Iteration  28: 6169928.958 ops/s
Iteration  29: 6167441.563 ops/s
Iteration  30: 6155601.763 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_toSortedList":
  6161421.223 ±(99.9%) 6397.568 ops/s [Average]
  (min, avg, max) = (6138863.997, 6161421.223, 6178194.124), stdev = 9575.580
  CI (99.9%): [6155023.655, 6167818.791] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_toSortedList  thrpt   30  6161421.223 ± 6397.568  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_toSortedListBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_toSortedListBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1853782.131 ops/s
# Warmup Iteration   2: 2427770.907 ops/s
# Warmup Iteration   3: 3012106.839 ops/s
# Warmup Iteration   4: 2979803.236 ops/s
# Warmup Iteration   5: 3000086.156 ops/s
# Warmup Iteration   6: 3004977.759 ops/s
# Warmup Iteration   7: 3001266.698 ops/s
# Warmup Iteration   8: 2760071.780 ops/s
# Warmup Iteration   9: 2762554.128 ops/s
# Warmup Iteration  10: 3008965.331 ops/s
# Warmup Iteration  11: 3009029.033 ops/s
# Warmup Iteration  12: 3010292.563 ops/s
# Warmup Iteration  13: 2988298.410 ops/s
# Warmup Iteration  14: 2974239.202 ops/s
# Warmup Iteration  15: 3002036.903 ops/s
# Warmup Iteration  16: 3006596.572 ops/s
# Warmup Iteration  17: 3001928.828 ops/s
# Warmup Iteration  18: 3006947.393 ops/s
# Warmup Iteration  19: 3017950.078 ops/s
# Warmup Iteration  20: 3002256.318 ops/s
# Warmup Iteration  21: 3013407.431 ops/s
# Warmup Iteration  22: 3020513.964 ops/s
# Warmup Iteration  23: 3015587.820 ops/s
# Warmup Iteration  24: 3009502.376 ops/s
# Warmup Iteration  25: 3008146.285 ops/s
# Warmup Iteration  26: 3016763.246 ops/s
# Warmup Iteration  27: 3014661.473 ops/s
# Warmup Iteration  28: 3017994.166 ops/s
# Warmup Iteration  29: 3016929.481 ops/s
# Warmup Iteration  30: 3018695.704 ops/s
Iteration   1: 3005993.687 ops/s
Iteration   2: 3010127.807 ops/s
Iteration   3: 3010120.528 ops/s
Iteration   4: 3010509.808 ops/s
Iteration   5: 3009249.066 ops/s
Iteration   6: 3001348.973 ops/s
Iteration   7: 2999707.899 ops/s
Iteration   8: 3002525.471 ops/s
Iteration   9: 2999589.387 ops/s
Iteration  10: 3010784.011 ops/s
Iteration  11: 3009943.694 ops/s
Iteration  12: 3015451.283 ops/s
Iteration  13: 3019187.896 ops/s
Iteration  14: 3016447.431 ops/s
Iteration  15: 3002022.327 ops/s
Iteration  16: 3011050.945 ops/s
Iteration  17: 3007582.417 ops/s
Iteration  18: 3008383.024 ops/s
Iteration  19: 3027383.776 ops/s
Iteration  20: 3014379.910 ops/s
Iteration  21: 3007321.542 ops/s
Iteration  22: 3009284.550 ops/s
Iteration  23: 3003875.706 ops/s
Iteration  24: 2975989.368 ops/s
Iteration  25: 2974695.889 ops/s
Iteration  26: 3008589.008 ops/s
Iteration  27: 2976266.454 ops/s
Iteration  28: 3019469.344 ops/s
Iteration  29: 3011315.442 ops/s
Iteration  30: 3019877.526 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_toSortedListBy":
  3006615.806 ±(99.9%) 8179.339 ops/s [Average]
  (min, avg, max) = (2974695.889, 3006615.806, 3027383.776), stdev = 12242.451
  CI (99.9%): [2998436.467, 3014795.145] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_toSortedListBy  thrpt   30  3006615.806 ± 8179.339  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_toSortedSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_toSortedSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2349382.798 ops/s
# Warmup Iteration   2: 5490063.580 ops/s
# Warmup Iteration   3: 4865589.634 ops/s
# Warmup Iteration   4: 5132061.894 ops/s
# Warmup Iteration   5: 5448085.669 ops/s
# Warmup Iteration   6: 5442601.201 ops/s
# Warmup Iteration   7: 5439305.406 ops/s
# Warmup Iteration   8: 5435202.020 ops/s
# Warmup Iteration   9: 5443294.069 ops/s
# Warmup Iteration  10: 5447683.038 ops/s
# Warmup Iteration  11: 5444257.068 ops/s
# Warmup Iteration  12: 5443339.349 ops/s
# Warmup Iteration  13: 5446335.294 ops/s
# Warmup Iteration  14: 5443136.733 ops/s
# Warmup Iteration  15: 5445183.201 ops/s
# Warmup Iteration  16: 5449479.942 ops/s
# Warmup Iteration  17: 5445310.249 ops/s
# Warmup Iteration  18: 5437353.057 ops/s
# Warmup Iteration  19: 5443872.440 ops/s
# Warmup Iteration  20: 5422018.454 ops/s
# Warmup Iteration  21: 5433161.025 ops/s
# Warmup Iteration  22: 5426782.142 ops/s
# Warmup Iteration  23: 5447444.540 ops/s
# Warmup Iteration  24: 5440261.068 ops/s
# Warmup Iteration  25: 5364121.323 ops/s
# Warmup Iteration  26: 5451368.148 ops/s
# Warmup Iteration  27: 5435259.424 ops/s
# Warmup Iteration  28: 5444488.509 ops/s
# Warmup Iteration  29: 5447962.242 ops/s
# Warmup Iteration  30: 5442368.802 ops/s
Iteration   1: 5442086.018 ops/s
Iteration   2: 5448742.384 ops/s
Iteration   3: 5445202.891 ops/s
Iteration   4: 5436869.478 ops/s
Iteration   5: 5445456.915 ops/s
Iteration   6: 5456255.332 ops/s
Iteration   7: 5450199.678 ops/s
Iteration   8: 5412331.889 ops/s
Iteration   9: 5410860.749 ops/s
Iteration  10: 5430263.113 ops/s
Iteration  11: 5426728.795 ops/s
Iteration  12: 5417735.699 ops/s
Iteration  13: 5433729.846 ops/s
Iteration  14: 5450481.805 ops/s
Iteration  15: 5442903.673 ops/s
Iteration  16: 5446112.766 ops/s
Iteration  17: 5449895.717 ops/s
Iteration  18: 5448724.305 ops/s
Iteration  19: 5440847.106 ops/s
Iteration  20: 5425957.944 ops/s
Iteration  21: 5445942.735 ops/s
Iteration  22: 5449281.935 ops/s
Iteration  23: 5454972.610 ops/s
Iteration  24: 5454434.884 ops/s
Iteration  25: 5453025.739 ops/s
Iteration  26: 5437732.863 ops/s
Iteration  27: 5432579.610 ops/s
Iteration  28: 5421059.591 ops/s
Iteration  29: 5426018.705 ops/s
Iteration  30: 5444492.972 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_toSortedSet":
  5439364.258 ±(99.9%) 8604.482 ops/s [Average]
  (min, avg, max) = (5410860.749, 5439364.258, 5456255.332), stdev = 12878.785
  CI (99.9%): [5430759.776, 5447968.741] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_toSortedSet  thrpt   30  5439364.258 ± 8604.482  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_toSortedSetBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_toSortedSetBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 720351.057 ops/s
# Warmup Iteration   2: 1540018.729 ops/s
# Warmup Iteration   3: 1643511.461 ops/s
# Warmup Iteration   4: 1645513.778 ops/s
# Warmup Iteration   5: 1371895.406 ops/s
# Warmup Iteration   6: 1642434.726 ops/s
# Warmup Iteration   7: 1655576.665 ops/s
# Warmup Iteration   8: 1652552.224 ops/s
# Warmup Iteration   9: 1638313.637 ops/s
# Warmup Iteration  10: 1646026.880 ops/s
# Warmup Iteration  11: 1653841.434 ops/s
# Warmup Iteration  12: 1653361.629 ops/s
# Warmup Iteration  13: 1648582.286 ops/s
# Warmup Iteration  14: 1648938.479 ops/s
# Warmup Iteration  15: 1657009.592 ops/s
# Warmup Iteration  16: 1655288.263 ops/s
# Warmup Iteration  17: 1656774.143 ops/s
# Warmup Iteration  18: 1651694.159 ops/s
# Warmup Iteration  19: 1654284.758 ops/s
# Warmup Iteration  20: 1650372.760 ops/s
# Warmup Iteration  21: 1647667.514 ops/s
# Warmup Iteration  22: 1651701.256 ops/s
# Warmup Iteration  23: 1654510.348 ops/s
# Warmup Iteration  24: 1654394.133 ops/s
# Warmup Iteration  25: 1647345.261 ops/s
# Warmup Iteration  26: 1650428.937 ops/s
# Warmup Iteration  27: 1651778.825 ops/s
# Warmup Iteration  28: 1655006.657 ops/s
# Warmup Iteration  29: 1654632.685 ops/s
# Warmup Iteration  30: 1635232.643 ops/s
Iteration   1: 1651360.726 ops/s
Iteration   2: 1656592.230 ops/s
Iteration   3: 1654089.191 ops/s
Iteration   4: 1655200.531 ops/s
Iteration   5: 1653691.037 ops/s
Iteration   6: 1646213.474 ops/s
Iteration   7: 1657879.047 ops/s
Iteration   8: 1653365.966 ops/s
Iteration   9: 1654761.722 ops/s
Iteration  10: 1652246.020 ops/s
Iteration  11: 1659283.712 ops/s
Iteration  12: 1655663.081 ops/s
Iteration  13: 1655411.023 ops/s
Iteration  14: 1655322.947 ops/s
Iteration  15: 1632054.822 ops/s
Iteration  16: 1655412.928 ops/s
Iteration  17: 1652173.458 ops/s
Iteration  18: 1649517.601 ops/s
Iteration  19: 1656622.008 ops/s
Iteration  20: 1647994.019 ops/s
Iteration  21: 1646592.520 ops/s
Iteration  22: 1656156.379 ops/s
Iteration  23: 1657751.490 ops/s
Iteration  24: 1655646.456 ops/s
Iteration  25: 1655438.601 ops/s
Iteration  26: 1656598.280 ops/s
Iteration  27: 1657066.505 ops/s
Iteration  28: 1653418.771 ops/s
Iteration  29: 1648263.879 ops/s
Iteration  30: 1646249.802 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_toSortedSetBy":
  1652934.608 ±(99.9%) 3581.038 ops/s [Average]
  (min, avg, max) = (1632054.822, 1652934.608, 1659283.712), stdev = 5359.929
  CI (99.9%): [1649353.570, 1656515.646] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_toSortedSetBy  thrpt   30  1652934.608 ± 3581.038  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_toSortedSetWithComparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_toSortedSetWithComparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1455481.710 ops/s
# Warmup Iteration   2: 3529054.020 ops/s
# Warmup Iteration   3: 3538694.800 ops/s
# Warmup Iteration   4: 2951971.823 ops/s
# Warmup Iteration   5: 3539348.776 ops/s
# Warmup Iteration   6: 3537760.612 ops/s
# Warmup Iteration   7: 3535608.030 ops/s
# Warmup Iteration   8: 3535995.867 ops/s
# Warmup Iteration   9: 3536410.005 ops/s
# Warmup Iteration  10: 3531690.203 ops/s
# Warmup Iteration  11: 3521544.068 ops/s
# Warmup Iteration  12: 3533374.567 ops/s
# Warmup Iteration  13: 3531464.759 ops/s
# Warmup Iteration  14: 3530422.747 ops/s
# Warmup Iteration  15: 3530961.481 ops/s
# Warmup Iteration  16: 3539569.682 ops/s
# Warmup Iteration  17: 3537938.110 ops/s
# Warmup Iteration  18: 3538392.306 ops/s
# Warmup Iteration  19: 3540285.993 ops/s
# Warmup Iteration  20: 3544786.446 ops/s
# Warmup Iteration  21: 3539696.544 ops/s
# Warmup Iteration  22: 3528972.602 ops/s
# Warmup Iteration  23: 3545822.574 ops/s
# Warmup Iteration  24: 3544218.932 ops/s
# Warmup Iteration  25: 3539333.421 ops/s
# Warmup Iteration  26: 3541839.273 ops/s
# Warmup Iteration  27: 3544021.299 ops/s
# Warmup Iteration  28: 3542258.811 ops/s
# Warmup Iteration  29: 3539541.358 ops/s
# Warmup Iteration  30: 3543373.220 ops/s
Iteration   1: 3542627.180 ops/s
Iteration   2: 3544943.953 ops/s
Iteration   3: 3539392.751 ops/s
Iteration   4: 3533007.598 ops/s
Iteration   5: 3534564.869 ops/s
Iteration   6: 3524034.543 ops/s
Iteration   7: 3542555.087 ops/s
Iteration   8: 3548201.878 ops/s
Iteration   9: 3544374.344 ops/s
Iteration  10: 3545731.809 ops/s
Iteration  11: 3540015.028 ops/s
Iteration  12: 3538691.642 ops/s
Iteration  13: 3542333.070 ops/s
Iteration  14: 3545165.312 ops/s
Iteration  15: 3547135.935 ops/s
Iteration  16: 3539038.951 ops/s
Iteration  17: 3537888.718 ops/s
Iteration  18: 3538610.115 ops/s
Iteration  19: 3540803.664 ops/s
Iteration  20: 3536477.073 ops/s
Iteration  21: 3529167.829 ops/s
Iteration  22: 3544603.615 ops/s
Iteration  23: 3535271.984 ops/s
Iteration  24: 3540099.851 ops/s
Iteration  25: 3546092.281 ops/s
Iteration  26: 3541905.067 ops/s
Iteration  27: 3539667.694 ops/s
Iteration  28: 3540910.994 ops/s
Iteration  29: 3550065.542 ops/s
Iteration  30: 3547540.614 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_toSortedSetWithComparator":
  3540697.300 ±(99.9%) 3808.075 ops/s [Average]
  (min, avg, max) = (3524034.543, 3540697.300, 3550065.542), stdev = 5699.747
  CI (99.9%): [3536889.225, 3544505.374] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_toSortedSetWithComparator  thrpt   30  3540697.300 ± 3808.075  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_toStack$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_toStack

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2647881.018 ops/s
# Warmup Iteration   2: 6814077.572 ops/s
# Warmup Iteration   3: 6760419.041 ops/s
# Warmup Iteration   4: 5586615.226 ops/s
# Warmup Iteration   5: 6771047.189 ops/s
# Warmup Iteration   6: 6766735.757 ops/s
# Warmup Iteration   7: 6772398.808 ops/s
# Warmup Iteration   8: 6772418.287 ops/s
# Warmup Iteration   9: 6764663.292 ops/s
# Warmup Iteration  10: 6765454.796 ops/s
# Warmup Iteration  11: 6740642.736 ops/s
# Warmup Iteration  12: 6755094.176 ops/s
# Warmup Iteration  13: 6769337.040 ops/s
# Warmup Iteration  14: 6770960.507 ops/s
# Warmup Iteration  15: 6767723.621 ops/s
# Warmup Iteration  16: 6779095.809 ops/s
# Warmup Iteration  17: 6758852.410 ops/s
# Warmup Iteration  18: 6771052.515 ops/s
# Warmup Iteration  19: 6771002.281 ops/s
# Warmup Iteration  20: 6761592.376 ops/s
# Warmup Iteration  21: 6765686.584 ops/s
# Warmup Iteration  22: 6761111.463 ops/s
# Warmup Iteration  23: 6765236.636 ops/s
# Warmup Iteration  24: 6774505.430 ops/s
# Warmup Iteration  25: 6769231.856 ops/s
# Warmup Iteration  26: 6768385.735 ops/s
# Warmup Iteration  27: 6770023.709 ops/s
# Warmup Iteration  28: 6727104.479 ops/s
# Warmup Iteration  29: 6775766.546 ops/s
# Warmup Iteration  30: 6768507.391 ops/s
Iteration   1: 6760806.795 ops/s
Iteration   2: 6764008.189 ops/s
Iteration   3: 6756712.928 ops/s
Iteration   4: 6770086.081 ops/s
Iteration   5: 6777885.250 ops/s
Iteration   6: 6775071.684 ops/s
Iteration   7: 6773809.881 ops/s
Iteration   8: 6778009.159 ops/s
Iteration   9: 6775908.168 ops/s
Iteration  10: 6761983.990 ops/s
Iteration  11: 6768186.931 ops/s
Iteration  12: 6772742.704 ops/s
Iteration  13: 6772439.343 ops/s
Iteration  14: 6781173.267 ops/s
Iteration  15: 6782944.355 ops/s
Iteration  16: 6790752.592 ops/s
Iteration  17: 6758160.273 ops/s
Iteration  18: 6767599.766 ops/s
Iteration  19: 6771503.441 ops/s
Iteration  20: 6735917.085 ops/s
Iteration  21: 6761860.325 ops/s
Iteration  22: 6766572.994 ops/s
Iteration  23: 6774590.549 ops/s
Iteration  24: 6783912.811 ops/s
Iteration  25: 6773313.368 ops/s
Iteration  26: 6677637.196 ops/s
Iteration  27: 6705649.236 ops/s
Iteration  28: 6772676.493 ops/s
Iteration  29: 6775371.725 ops/s
Iteration  30: 6774324.905 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_toStack":
  6765387.049 ±(99.9%) 15196.999 ops/s [Average]
  (min, avg, max) = (6677637.196, 6765387.049, 6790752.592), stdev = 22746.154
  CI (99.9%): [6750190.051, 6780584.048] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
ImmutableSubListTest._Benchmark.benchmark_toStack  thrpt   30  6765387.049 ± 15196.999  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_zip$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_zip

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 382902.882 ops/s
# Warmup Iteration   2: 624927.850 ops/s
# Warmup Iteration   3: 714363.544 ops/s
# Warmup Iteration   4: 718793.947 ops/s
# Warmup Iteration   5: 716909.710 ops/s
# Warmup Iteration   6: 600614.504 ops/s
# Warmup Iteration   7: 717778.432 ops/s
# Warmup Iteration   8: 717918.709 ops/s
# Warmup Iteration   9: 717593.162 ops/s
# Warmup Iteration  10: 718451.429 ops/s
# Warmup Iteration  11: 716581.429 ops/s
# Warmup Iteration  12: 714576.376 ops/s
# Warmup Iteration  13: 716687.612 ops/s
# Warmup Iteration  14: 719235.381 ops/s
# Warmup Iteration  15: 718982.505 ops/s
# Warmup Iteration  16: 718417.507 ops/s
# Warmup Iteration  17: 714722.298 ops/s
# Warmup Iteration  18: 716797.633 ops/s
# Warmup Iteration  19: 718167.848 ops/s
# Warmup Iteration  20: 718041.327 ops/s
# Warmup Iteration  21: 717117.326 ops/s
# Warmup Iteration  22: 718215.625 ops/s
# Warmup Iteration  23: 718576.052 ops/s
# Warmup Iteration  24: 717964.609 ops/s
# Warmup Iteration  25: 716275.336 ops/s
# Warmup Iteration  26: 716670.512 ops/s
# Warmup Iteration  27: 717591.520 ops/s
# Warmup Iteration  28: 718125.370 ops/s
# Warmup Iteration  29: 717599.433 ops/s
# Warmup Iteration  30: 718669.765 ops/s
Iteration   1: 718107.712 ops/s
Iteration   2: 718527.346 ops/s
Iteration   3: 718319.900 ops/s
Iteration   4: 719202.502 ops/s
Iteration   5: 716714.703 ops/s
Iteration   6: 716197.292 ops/s
Iteration   7: 718983.271 ops/s
Iteration   8: 718096.374 ops/s
Iteration   9: 718499.493 ops/s
Iteration  10: 716171.524 ops/s
Iteration  11: 719441.552 ops/s
Iteration  12: 717429.845 ops/s
Iteration  13: 719251.094 ops/s
Iteration  14: 712569.474 ops/s
Iteration  15: 719129.846 ops/s
Iteration  16: 718365.416 ops/s
Iteration  17: 719116.724 ops/s
Iteration  18: 717831.310 ops/s
Iteration  19: 719097.953 ops/s
Iteration  20: 717737.610 ops/s
Iteration  21: 719234.639 ops/s
Iteration  22: 717913.429 ops/s
Iteration  23: 718252.915 ops/s
Iteration  24: 717173.676 ops/s
Iteration  25: 718347.030 ops/s
Iteration  26: 717850.670 ops/s
Iteration  27: 719132.615 ops/s
Iteration  28: 718689.157 ops/s
Iteration  29: 718894.504 ops/s
Iteration  30: 715709.831 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_zip":
  717999.647 ±(99.9%) 952.575 ops/s [Average]
  (min, avg, max) = (712569.474, 717999.647, 719441.552), stdev = 1425.770
  CI (99.9%): [717047.072, 718952.222] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt       Score     Error  Units
ImmutableSubListTest._Benchmark.benchmark_zip  thrpt   30  717999.647 ± 952.575  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_zipWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_zipWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 971381.316 ops/s
# Warmup Iteration   2: 1678618.533 ops/s
# Warmup Iteration   3: 1864384.991 ops/s
# Warmup Iteration   4: 1879231.102 ops/s
# Warmup Iteration   5: 1887002.071 ops/s
# Warmup Iteration   6: 1566220.103 ops/s
# Warmup Iteration   7: 1889128.333 ops/s
# Warmup Iteration   8: 1886314.870 ops/s
# Warmup Iteration   9: 1888902.133 ops/s
# Warmup Iteration  10: 1877970.629 ops/s
# Warmup Iteration  11: 1885503.263 ops/s
# Warmup Iteration  12: 1879521.493 ops/s
# Warmup Iteration  13: 1884833.524 ops/s
# Warmup Iteration  14: 1887357.181 ops/s
# Warmup Iteration  15: 1886821.852 ops/s
# Warmup Iteration  16: 1886836.399 ops/s
# Warmup Iteration  17: 1884516.681 ops/s
# Warmup Iteration  18: 1883643.777 ops/s
# Warmup Iteration  19: 1883814.079 ops/s
# Warmup Iteration  20: 1882847.346 ops/s
# Warmup Iteration  21: 1884173.335 ops/s
# Warmup Iteration  22: 1882568.856 ops/s
# Warmup Iteration  23: 1879472.605 ops/s
# Warmup Iteration  24: 1877890.984 ops/s
# Warmup Iteration  25: 1883027.419 ops/s
# Warmup Iteration  26: 1880189.559 ops/s
# Warmup Iteration  27: 1882884.755 ops/s
# Warmup Iteration  28: 1884191.685 ops/s
# Warmup Iteration  29: 1879893.074 ops/s
# Warmup Iteration  30: 1882527.624 ops/s
Iteration   1: 1882715.357 ops/s
Iteration   2: 1887581.466 ops/s
Iteration   3: 1882071.063 ops/s
Iteration   4: 1883429.989 ops/s
Iteration   5: 1883401.093 ops/s
Iteration   6: 1886441.000 ops/s
Iteration   7: 1882165.208 ops/s
Iteration   8: 1880728.708 ops/s
Iteration   9: 1887208.306 ops/s
Iteration  10: 1885614.865 ops/s
Iteration  11: 1884410.480 ops/s
Iteration  12: 1879421.166 ops/s
Iteration  13: 1884442.473 ops/s
Iteration  14: 1882917.866 ops/s
Iteration  15: 1884072.559 ops/s
Iteration  16: 1885858.151 ops/s
Iteration  17: 1880361.412 ops/s
Iteration  18: 1884680.528 ops/s
Iteration  19: 1881968.936 ops/s
Iteration  20: 1885490.387 ops/s
Iteration  21: 1881776.448 ops/s
Iteration  22: 1884335.737 ops/s
Iteration  23: 1880391.190 ops/s
Iteration  24: 1883713.819 ops/s
Iteration  25: 1885314.004 ops/s
Iteration  26: 1879573.211 ops/s
Iteration  27: 1887287.466 ops/s
Iteration  28: 1884144.874 ops/s
Iteration  29: 1886905.990 ops/s
Iteration  30: 1883746.950 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableSubListTest._Benchmark.benchmark_zipWithIndex":
  1883739.023 ±(99.9%) 1542.589 ops/s [Average]
  (min, avg, max) = (1879421.166, 1883739.023, 1887581.466), stdev = 2308.875
  CI (99.9%): [1882196.434, 1885281.612] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableSubListTest._Benchmark.benchmark_zipWithIndex  thrpt   30  1883739.023 ± 1542.589  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 761871.725 ops/s
# Warmup Iteration   2: 794682.459 ops/s
# Warmup Iteration   3: 999342.405 ops/s
# Warmup Iteration   4: 992987.898 ops/s
# Warmup Iteration   5: 996132.915 ops/s
# Warmup Iteration   6: 993468.193 ops/s
# Warmup Iteration   7: 992139.039 ops/s
# Warmup Iteration   8: 998761.245 ops/s
# Warmup Iteration   9: 992748.219 ops/s
# Warmup Iteration  10: 992231.545 ops/s
# Warmup Iteration  11: 992823.090 ops/s
# Warmup Iteration  12: 845163.340 ops/s
# Warmup Iteration  13: 996729.633 ops/s
# Warmup Iteration  14: 997154.110 ops/s
# Warmup Iteration  15: 997147.184 ops/s
# Warmup Iteration  16: 997559.219 ops/s
# Warmup Iteration  17: 1060821.237 ops/s
# Warmup Iteration  18: 1064478.218 ops/s
# Warmup Iteration  19: 1061199.759 ops/s
# Warmup Iteration  20: 1057262.405 ops/s
# Warmup Iteration  21: 1063721.549 ops/s
# Warmup Iteration  22: 1063407.987 ops/s
# Warmup Iteration  23: 1062741.478 ops/s
# Warmup Iteration  24: 1062103.451 ops/s
# Warmup Iteration  25: 1064758.641 ops/s
# Warmup Iteration  26: 1063739.143 ops/s
# Warmup Iteration  27: 1064671.797 ops/s
# Warmup Iteration  28: 1063638.900 ops/s
# Warmup Iteration  29: 1062905.172 ops/s
# Warmup Iteration  30: 1058530.632 ops/s
Iteration   1: 1062161.460 ops/s
Iteration   2: 1060934.528 ops/s
Iteration   3: 1061205.171 ops/s
Iteration   4: 1060800.738 ops/s
Iteration   5: 1063906.972 ops/s
Iteration   6: 1065682.545 ops/s
Iteration   7: 1060044.583 ops/s
Iteration   8: 1056136.503 ops/s
Iteration   9: 1053806.199 ops/s
Iteration  10: 1053547.749 ops/s
Iteration  11: 1060149.095 ops/s
Iteration  12: 1059197.184 ops/s
Iteration  13: 1059617.721 ops/s
Iteration  14: 1061778.666 ops/s
Iteration  15: 1060530.190 ops/s
Iteration  16: 1061198.222 ops/s
Iteration  17: 1061646.879 ops/s
Iteration  18: 1060700.300 ops/s
Iteration  19: 1054991.400 ops/s
Iteration  20: 1059296.192 ops/s
Iteration  21: 1062799.300 ops/s
Iteration  22: 1063585.005 ops/s
Iteration  23: 1061360.286 ops/s
Iteration  24: 1054536.324 ops/s
Iteration  25: 1061646.451 ops/s
Iteration  26: 1061393.688 ops/s
Iteration  27: 1058430.339 ops/s
Iteration  28: 1065629.241 ops/s
Iteration  29: 1060905.694 ops/s
Iteration  30: 1063343.964 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_add":
  1060365.420 ±(99.9%) 2090.006 ops/s [Average]
  (min, avg, max) = (1053547.749, 1060365.420, 1065682.545), stdev = 3128.223
  CI (99.9%): [1058275.413, 1062455.426] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_add  thrpt   30  1060365.420 ± 2090.006  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_addAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_addAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 751558.165 ops/s
# Warmup Iteration   2: 790307.686 ops/s
# Warmup Iteration   3: 996691.105 ops/s
# Warmup Iteration   4: 991476.950 ops/s
# Warmup Iteration   5: 986534.252 ops/s
# Warmup Iteration   6: 988759.691 ops/s
# Warmup Iteration   7: 984720.262 ops/s
# Warmup Iteration   8: 989850.247 ops/s
# Warmup Iteration   9: 993338.679 ops/s
# Warmup Iteration  10: 993340.874 ops/s
# Warmup Iteration  11: 991589.031 ops/s
# Warmup Iteration  12: 845717.741 ops/s
# Warmup Iteration  13: 991023.450 ops/s
# Warmup Iteration  14: 993214.228 ops/s
# Warmup Iteration  15: 993652.628 ops/s
# Warmup Iteration  16: 984023.931 ops/s
# Warmup Iteration  17: 1049206.190 ops/s
# Warmup Iteration  18: 1048440.598 ops/s
# Warmup Iteration  19: 1051964.859 ops/s
# Warmup Iteration  20: 1049369.149 ops/s
# Warmup Iteration  21: 1051566.028 ops/s
# Warmup Iteration  22: 1050958.615 ops/s
# Warmup Iteration  23: 1047643.104 ops/s
# Warmup Iteration  24: 1050089.865 ops/s
# Warmup Iteration  25: 1053650.294 ops/s
# Warmup Iteration  26: 1047946.390 ops/s
# Warmup Iteration  27: 1047468.889 ops/s
# Warmup Iteration  28: 1040928.069 ops/s
# Warmup Iteration  29: 1044192.749 ops/s
# Warmup Iteration  30: 1044502.931 ops/s
Iteration   1: 1047576.041 ops/s
Iteration   2: 1044810.593 ops/s
Iteration   3: 1048558.933 ops/s
Iteration   4: 1051554.521 ops/s
Iteration   5: 1053857.473 ops/s
Iteration   6: 1053037.761 ops/s
Iteration   7: 1048723.784 ops/s
Iteration   8: 1049901.429 ops/s
Iteration   9: 1050616.915 ops/s
Iteration  10: 1052156.419 ops/s
Iteration  11: 1045523.912 ops/s
Iteration  12: 1045941.510 ops/s
Iteration  13: 1054216.862 ops/s
Iteration  14: 1047089.470 ops/s
Iteration  15: 1046063.533 ops/s
Iteration  16: 1048714.262 ops/s
Iteration  17: 1046771.635 ops/s
Iteration  18: 1054549.353 ops/s
Iteration  19: 1048923.372 ops/s
Iteration  20: 1051905.762 ops/s
Iteration  21: 1049428.146 ops/s
Iteration  22: 1046939.933 ops/s
Iteration  23: 1045665.037 ops/s
Iteration  24: 1053808.448 ops/s
Iteration  25: 1053302.328 ops/s
Iteration  26: 1051234.976 ops/s
Iteration  27: 1047624.889 ops/s
Iteration  28: 1046859.569 ops/s
Iteration  29: 1046176.141 ops/s
Iteration  30: 1047851.134 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_addAll":
  1049312.805 ±(99.9%) 2000.066 ops/s [Average]
  (min, avg, max) = (1044810.593, 1049312.805, 1054549.353), stdev = 2993.604
  CI (99.9%): [1047312.739, 1051312.870] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_addAll  thrpt   30  1049312.805 ± 2000.066  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_addAllAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_addAllAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 755632.002 ops/s
# Warmup Iteration   2: 793466.981 ops/s
# Warmup Iteration   3: 1005326.066 ops/s
# Warmup Iteration   4: 1004961.515 ops/s
# Warmup Iteration   5: 999505.377 ops/s
# Warmup Iteration   6: 1008252.083 ops/s
# Warmup Iteration   7: 1007940.825 ops/s
# Warmup Iteration   8: 1006471.953 ops/s
# Warmup Iteration   9: 1006561.800 ops/s
# Warmup Iteration  10: 1002782.999 ops/s
# Warmup Iteration  11: 1008732.569 ops/s
# Warmup Iteration  12: 856987.992 ops/s
# Warmup Iteration  13: 1004696.385 ops/s
# Warmup Iteration  14: 1004566.334 ops/s
# Warmup Iteration  15: 1006017.358 ops/s
# Warmup Iteration  16: 1003148.633 ops/s
# Warmup Iteration  17: 1063894.484 ops/s
# Warmup Iteration  18: 1063103.171 ops/s
# Warmup Iteration  19: 1063329.022 ops/s
# Warmup Iteration  20: 1062768.774 ops/s
# Warmup Iteration  21: 1063652.756 ops/s
# Warmup Iteration  22: 1060688.437 ops/s
# Warmup Iteration  23: 1059129.129 ops/s
# Warmup Iteration  24: 1059135.832 ops/s
# Warmup Iteration  25: 1057541.297 ops/s
# Warmup Iteration  26: 1061696.210 ops/s
# Warmup Iteration  27: 1064955.343 ops/s
# Warmup Iteration  28: 1061250.154 ops/s
# Warmup Iteration  29: 1063315.767 ops/s
# Warmup Iteration  30: 1063723.166 ops/s
Iteration   1: 1065055.283 ops/s
Iteration   2: 1061823.181 ops/s
Iteration   3: 1057495.939 ops/s
Iteration   4: 1065579.869 ops/s
Iteration   5: 1064475.272 ops/s
Iteration   6: 1065504.954 ops/s
Iteration   7: 1058245.669 ops/s
Iteration   8: 1061532.475 ops/s
Iteration   9: 1061838.075 ops/s
Iteration  10: 1061485.434 ops/s
Iteration  11: 1060129.532 ops/s
Iteration  12: 1066172.041 ops/s
Iteration  13: 1064918.168 ops/s
Iteration  14: 1063528.623 ops/s
Iteration  15: 1057623.410 ops/s
Iteration  16: 1062971.525 ops/s
Iteration  17: 1060643.375 ops/s
Iteration  18: 1059827.148 ops/s
Iteration  19: 1063281.776 ops/s
Iteration  20: 1062782.775 ops/s
Iteration  21: 1061701.066 ops/s
Iteration  22: 1059352.094 ops/s
Iteration  23: 1065081.577 ops/s
Iteration  24: 1062572.788 ops/s
Iteration  25: 1063438.283 ops/s
Iteration  26: 1060674.884 ops/s
Iteration  27: 1063919.801 ops/s
Iteration  28: 1064068.609 ops/s
Iteration  29: 1063008.830 ops/s
Iteration  30: 1063568.282 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_addAllAtIndex":
  1062410.025 ±(99.9%) 1585.443 ops/s [Average]
  (min, avg, max) = (1057495.939, 1062410.025, 1066172.041), stdev = 2373.017
  CI (99.9%): [1060824.581, 1063995.468] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_addAllAtIndex  thrpt   30  1062410.025 ± 1585.443  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_addAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_addAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 770839.229 ops/s
# Warmup Iteration   2: 806031.383 ops/s
# Warmup Iteration   3: 843611.068 ops/s
# Warmup Iteration   4: 843933.546 ops/s
# Warmup Iteration   5: 846138.818 ops/s
# Warmup Iteration   6: 840880.086 ops/s
# Warmup Iteration   7: 842022.235 ops/s
# Warmup Iteration   8: 842640.600 ops/s
# Warmup Iteration   9: 843751.532 ops/s
# Warmup Iteration  10: 843530.697 ops/s
# Warmup Iteration  11: 843880.029 ops/s
# Warmup Iteration  12: 843442.349 ops/s
# Warmup Iteration  13: 827090.693 ops/s
# Warmup Iteration  14: 729269.719 ops/s
# Warmup Iteration  15: 843277.206 ops/s
# Warmup Iteration  16: 843047.386 ops/s
# Warmup Iteration  17: 889138.393 ops/s
# Warmup Iteration  18: 889453.843 ops/s
# Warmup Iteration  19: 889251.078 ops/s
# Warmup Iteration  20: 892016.783 ops/s
# Warmup Iteration  21: 892220.798 ops/s
# Warmup Iteration  22: 892429.817 ops/s
# Warmup Iteration  23: 890491.395 ops/s
# Warmup Iteration  24: 892260.195 ops/s
# Warmup Iteration  25: 895396.747 ops/s
# Warmup Iteration  26: 887963.695 ops/s
# Warmup Iteration  27: 894976.119 ops/s
# Warmup Iteration  28: 892961.612 ops/s
# Warmup Iteration  29: 891987.852 ops/s
# Warmup Iteration  30: 890532.093 ops/s
Iteration   1: 892779.072 ops/s
Iteration   2: 891971.254 ops/s
Iteration   3: 890613.937 ops/s
Iteration   4: 894690.768 ops/s
Iteration   5: 893752.918 ops/s
Iteration   6: 892694.528 ops/s
Iteration   7: 893194.735 ops/s
Iteration   8: 892941.081 ops/s
Iteration   9: 890873.952 ops/s
Iteration  10: 892012.315 ops/s
Iteration  11: 891560.889 ops/s
Iteration  12: 895278.723 ops/s
Iteration  13: 895026.999 ops/s
Iteration  14: 894818.836 ops/s
Iteration  15: 894733.955 ops/s
Iteration  16: 894891.987 ops/s
Iteration  17: 893471.849 ops/s
Iteration  18: 893276.495 ops/s
Iteration  19: 892560.363 ops/s
Iteration  20: 895410.486 ops/s
Iteration  21: 895575.709 ops/s
Iteration  22: 890305.823 ops/s
Iteration  23: 890313.752 ops/s
Iteration  24: 890788.284 ops/s
Iteration  25: 893984.770 ops/s
Iteration  26: 893311.607 ops/s
Iteration  27: 890374.658 ops/s
Iteration  28: 893554.618 ops/s
Iteration  29: 893385.834 ops/s
Iteration  30: 893861.086 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_addAtIndex":
  893067.043 ±(99.9%) 1098.864 ops/s [Average]
  (min, avg, max) = (890305.823, 893067.043, 895575.709), stdev = 1644.727
  CI (99.9%): [891968.179, 894165.906] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_addAtIndex  thrpt   30  893067.043 ± 1098.864  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_aggregateByMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_aggregateByMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 796896.395 ops/s
# Warmup Iteration   2: 2146613.753 ops/s
# Warmup Iteration   3: 2148641.970 ops/s
# Warmup Iteration   4: 1774665.250 ops/s
# Warmup Iteration   5: 2155646.464 ops/s
# Warmup Iteration   6: 2154466.675 ops/s
# Warmup Iteration   7: 2146258.181 ops/s
# Warmup Iteration   8: 2147864.983 ops/s
# Warmup Iteration   9: 2154757.840 ops/s
# Warmup Iteration  10: 2148427.727 ops/s
# Warmup Iteration  11: 2145735.985 ops/s
# Warmup Iteration  12: 2152869.491 ops/s
# Warmup Iteration  13: 2146618.143 ops/s
# Warmup Iteration  14: 2154142.100 ops/s
# Warmup Iteration  15: 2130798.171 ops/s
# Warmup Iteration  16: 2147283.550 ops/s
# Warmup Iteration  17: 2154036.182 ops/s
# Warmup Iteration  18: 2149338.499 ops/s
# Warmup Iteration  19: 2120460.323 ops/s
# Warmup Iteration  20: 2127859.017 ops/s
# Warmup Iteration  21: 2149407.959 ops/s
# Warmup Iteration  22: 2148089.645 ops/s
# Warmup Iteration  23: 2138492.114 ops/s
# Warmup Iteration  24: 2136003.983 ops/s
# Warmup Iteration  25: 2140718.964 ops/s
# Warmup Iteration  26: 2150962.653 ops/s
# Warmup Iteration  27: 2153194.974 ops/s
# Warmup Iteration  28: 2147367.631 ops/s
# Warmup Iteration  29: 2146331.761 ops/s
# Warmup Iteration  30: 2147944.261 ops/s
Iteration   1: 2157478.438 ops/s
Iteration   2: 2160579.130 ops/s
Iteration   3: 2136550.876 ops/s
Iteration   4: 2149841.681 ops/s
Iteration   5: 2143305.778 ops/s
Iteration   6: 2146124.013 ops/s
Iteration   7: 2146549.349 ops/s
Iteration   8: 2134534.712 ops/s
Iteration   9: 2144582.870 ops/s
Iteration  10: 2147233.270 ops/s
Iteration  11: 2140312.210 ops/s
Iteration  12: 2144575.110 ops/s
Iteration  13: 2144898.800 ops/s
Iteration  14: 2134650.945 ops/s
Iteration  15: 2124753.083 ops/s
Iteration  16: 2142870.494 ops/s
Iteration  17: 2149503.512 ops/s
Iteration  18: 2142326.770 ops/s
Iteration  19: 2142906.940 ops/s
Iteration  20: 2132374.333 ops/s
Iteration  21: 2137333.141 ops/s
Iteration  22: 2143662.469 ops/s
Iteration  23: 2138519.601 ops/s
Iteration  24: 2133841.878 ops/s
Iteration  25: 2137822.741 ops/s
Iteration  26: 2142104.964 ops/s
Iteration  27: 2139761.589 ops/s
Iteration  28: 2147432.483 ops/s
Iteration  29: 2142648.415 ops/s
Iteration  30: 2136750.758 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_aggregateByMutating":
  2142194.345 ±(99.9%) 4816.514 ops/s [Average]
  (min, avg, max) = (2124753.083, 2142194.345, 2160579.130), stdev = 7209.132
  CI (99.9%): [2137377.831, 2147010.859] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_aggregateByMutating  thrpt   30  2142194.345 ± 4816.514  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_aggregateByNonMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_aggregateByNonMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 839594.313 ops/s
# Warmup Iteration   2: 2014816.616 ops/s
# Warmup Iteration   3: 2075752.837 ops/s
# Warmup Iteration   4: 1716120.479 ops/s
# Warmup Iteration   5: 2066354.436 ops/s
# Warmup Iteration   6: 2067269.310 ops/s
# Warmup Iteration   7: 2075823.647 ops/s
# Warmup Iteration   8: 2071454.393 ops/s
# Warmup Iteration   9: 2071564.867 ops/s
# Warmup Iteration  10: 2069606.011 ops/s
# Warmup Iteration  11: 2069577.640 ops/s
# Warmup Iteration  12: 2066311.557 ops/s
# Warmup Iteration  13: 2083507.223 ops/s
# Warmup Iteration  14: 2076956.469 ops/s
# Warmup Iteration  15: 2073194.343 ops/s
# Warmup Iteration  16: 2072510.084 ops/s
# Warmup Iteration  17: 2069160.507 ops/s
# Warmup Iteration  18: 2071230.726 ops/s
# Warmup Iteration  19: 2060467.975 ops/s
# Warmup Iteration  20: 2065869.901 ops/s
# Warmup Iteration  21: 2070808.007 ops/s
# Warmup Iteration  22: 2069277.909 ops/s
# Warmup Iteration  23: 2073190.048 ops/s
# Warmup Iteration  24: 2070120.866 ops/s
# Warmup Iteration  25: 2072142.208 ops/s
# Warmup Iteration  26: 2070818.184 ops/s
# Warmup Iteration  27: 2071054.985 ops/s
# Warmup Iteration  28: 2071492.781 ops/s
# Warmup Iteration  29: 2073164.650 ops/s
# Warmup Iteration  30: 2072439.152 ops/s
Iteration   1: 2062750.962 ops/s
Iteration   2: 2070317.207 ops/s
Iteration   3: 2073808.086 ops/s
Iteration   4: 2044284.323 ops/s
Iteration   5: 2057331.744 ops/s
Iteration   6: 2062498.041 ops/s
Iteration   7: 2076309.326 ops/s
Iteration   8: 2079120.906 ops/s
Iteration   9: 2055569.006 ops/s
Iteration  10: 2053352.784 ops/s
Iteration  11: 2052081.274 ops/s
Iteration  12: 2070093.543 ops/s
Iteration  13: 2070543.212 ops/s
Iteration  14: 2069728.762 ops/s
Iteration  15: 2068682.203 ops/s
Iteration  16: 2062555.195 ops/s
Iteration  17: 2079653.702 ops/s
Iteration  18: 2078063.548 ops/s
Iteration  19: 2076604.939 ops/s
Iteration  20: 2074688.932 ops/s
Iteration  21: 2076250.149 ops/s
Iteration  22: 2060152.273 ops/s
Iteration  23: 2067537.475 ops/s
Iteration  24: 2072038.556 ops/s
Iteration  25: 2062605.354 ops/s
Iteration  26: 2070291.296 ops/s
Iteration  27: 2078738.792 ops/s
Iteration  28: 2071864.744 ops/s
Iteration  29: 2074282.107 ops/s
Iteration  30: 2071942.645 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_aggregateByNonMutating":
  2068124.703 ±(99.9%) 6018.796 ops/s [Average]
  (min, avg, max) = (2044284.323, 2068124.703, 2079653.702), stdev = 9008.651
  CI (99.9%): [2062105.907, 2074143.499] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_aggregateByNonMutating  thrpt   30  2068124.703 ± 6018.796  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 20996694.635 ops/s
# Warmup Iteration   2: 41904810.226 ops/s
# Warmup Iteration   3: 35619670.695 ops/s
# Warmup Iteration   4: 41984512.818 ops/s
# Warmup Iteration   5: 41931241.168 ops/s
# Warmup Iteration   6: 41801268.284 ops/s
# Warmup Iteration   7: 41828247.482 ops/s
# Warmup Iteration   8: 41846659.523 ops/s
# Warmup Iteration   9: 41840987.602 ops/s
# Warmup Iteration  10: 42005711.308 ops/s
# Warmup Iteration  11: 41945328.084 ops/s
# Warmup Iteration  12: 41949669.559 ops/s
# Warmup Iteration  13: 42061816.403 ops/s
# Warmup Iteration  14: 42069498.764 ops/s
# Warmup Iteration  15: 42042230.866 ops/s
# Warmup Iteration  16: 41858578.878 ops/s
# Warmup Iteration  17: 41879543.639 ops/s
# Warmup Iteration  18: 41886743.035 ops/s
# Warmup Iteration  19: 41888735.372 ops/s
# Warmup Iteration  20: 41868465.470 ops/s
# Warmup Iteration  21: 41822641.055 ops/s
# Warmup Iteration  22: 40650929.001 ops/s
# Warmup Iteration  23: 41873247.770 ops/s
# Warmup Iteration  24: 41854472.825 ops/s
# Warmup Iteration  25: 41988827.995 ops/s
# Warmup Iteration  26: 41904685.345 ops/s
# Warmup Iteration  27: 41872986.791 ops/s
# Warmup Iteration  28: 41976687.278 ops/s
# Warmup Iteration  29: 41856083.121 ops/s
# Warmup Iteration  30: 41821070.429 ops/s
Iteration   1: 41952126.777 ops/s
Iteration   2: 41842259.780 ops/s
Iteration   3: 41881793.907 ops/s
Iteration   4: 42085138.627 ops/s
Iteration   5: 41808507.452 ops/s
Iteration   6: 41778943.291 ops/s
Iteration   7: 41674552.687 ops/s
Iteration   8: 41749909.866 ops/s
Iteration   9: 41824188.300 ops/s
Iteration  10: 41723029.255 ops/s
Iteration  11: 41811838.050 ops/s
Iteration  12: 41674653.486 ops/s
Iteration  13: 41712866.384 ops/s
Iteration  14: 41859687.258 ops/s
Iteration  15: 41988388.812 ops/s
Iteration  16: 42002428.659 ops/s
Iteration  17: 41818207.800 ops/s
Iteration  18: 41814007.580 ops/s
Iteration  19: 41923319.116 ops/s
Iteration  20: 41863289.899 ops/s
Iteration  21: 41844690.346 ops/s
Iteration  22: 41833018.651 ops/s
Iteration  23: 41771934.331 ops/s
Iteration  24: 41773724.353 ops/s
Iteration  25: 42101298.710 ops/s
Iteration  26: 41949347.344 ops/s
Iteration  27: 41984791.005 ops/s
Iteration  28: 42015855.825 ops/s
Iteration  29: 41960124.528 ops/s
Iteration  30: 42078471.622 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_allSatisfy":
  41870079.790 ±(99.9%) 79986.433 ops/s [Average]
  (min, avg, max) = (41674552.687, 41870079.790, 42101298.710), stdev = 119719.936
  CI (99.9%): [41790093.357, 41950066.223] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_allSatisfy  thrpt   30  41870079.790 ± 79986.433  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_allSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_allSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12540546.694 ops/s
# Warmup Iteration   2: 24901293.057 ops/s
# Warmup Iteration   3: 21070051.799 ops/s
# Warmup Iteration   4: 24918563.593 ops/s
# Warmup Iteration   5: 24923055.307 ops/s
# Warmup Iteration   6: 24848322.188 ops/s
# Warmup Iteration   7: 24899700.205 ops/s
# Warmup Iteration   8: 24947682.255 ops/s
# Warmup Iteration   9: 24960903.439 ops/s
# Warmup Iteration  10: 24949165.556 ops/s
# Warmup Iteration  11: 24837591.396 ops/s
# Warmup Iteration  12: 24834633.402 ops/s
# Warmup Iteration  13: 24927797.104 ops/s
# Warmup Iteration  14: 24939726.664 ops/s
# Warmup Iteration  15: 24933908.683 ops/s
# Warmup Iteration  16: 24912076.433 ops/s
# Warmup Iteration  17: 24875758.294 ops/s
# Warmup Iteration  18: 24913696.288 ops/s
# Warmup Iteration  19: 24883346.629 ops/s
# Warmup Iteration  20: 24900122.586 ops/s
# Warmup Iteration  21: 24901248.251 ops/s
# Warmup Iteration  22: 24900201.107 ops/s
# Warmup Iteration  23: 24900377.589 ops/s
# Warmup Iteration  24: 24910763.825 ops/s
# Warmup Iteration  25: 24902584.910 ops/s
# Warmup Iteration  26: 24922097.357 ops/s
# Warmup Iteration  27: 24854367.589 ops/s
# Warmup Iteration  28: 24943865.419 ops/s
# Warmup Iteration  29: 24896298.426 ops/s
# Warmup Iteration  30: 24906602.900 ops/s
Iteration   1: 24888458.448 ops/s
Iteration   2: 24945443.627 ops/s
Iteration   3: 24906709.209 ops/s
Iteration   4: 24912886.359 ops/s
Iteration   5: 24861322.176 ops/s
Iteration   6: 24943846.350 ops/s
Iteration   7: 24858568.312 ops/s
Iteration   8: 24913542.068 ops/s
Iteration   9: 24947307.203 ops/s
Iteration  10: 24874043.240 ops/s
Iteration  11: 24873757.707 ops/s
Iteration  12: 24702191.248 ops/s
Iteration  13: 24831524.324 ops/s
Iteration  14: 24857351.898 ops/s
Iteration  15: 24871923.301 ops/s
Iteration  16: 24930139.845 ops/s
Iteration  17: 24891009.124 ops/s
Iteration  18: 24916319.476 ops/s
Iteration  19: 24928598.553 ops/s
Iteration  20: 24915480.105 ops/s
Iteration  21: 24858873.721 ops/s
Iteration  22: 24794663.883 ops/s
Iteration  23: 24906231.225 ops/s
Iteration  24: 24902958.894 ops/s
Iteration  25: 24889503.317 ops/s
Iteration  26: 24872665.330 ops/s
Iteration  27: 24804017.259 ops/s
Iteration  28: 24899014.007 ops/s
Iteration  29: 24823333.645 ops/s
Iteration  30: 24917834.416 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_allSatisfyWith":
  24881317.276 ±(99.9%) 34803.807 ops/s [Average]
  (min, avg, max) = (24702191.248, 24881317.276, 24947307.203), stdev = 52092.704
  CI (99.9%): [24846513.469, 24916121.083] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score       Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_allSatisfyWith  thrpt   30  24881317.276 ± 34803.807  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12765909.350 ops/s
# Warmup Iteration   2: 25081980.129 ops/s
# Warmup Iteration   3: 24739451.459 ops/s
# Warmup Iteration   4: 22734269.590 ops/s
# Warmup Iteration   5: 25678588.735 ops/s
# Warmup Iteration   6: 25640380.453 ops/s
# Warmup Iteration   7: 25708211.497 ops/s
# Warmup Iteration   8: 25635088.267 ops/s
# Warmup Iteration   9: 25671230.528 ops/s
# Warmup Iteration  10: 25595116.370 ops/s
# Warmup Iteration  11: 25706578.162 ops/s
# Warmup Iteration  12: 25584817.630 ops/s
# Warmup Iteration  13: 25720391.769 ops/s
# Warmup Iteration  14: 25698507.212 ops/s
# Warmup Iteration  15: 25649456.946 ops/s
# Warmup Iteration  16: 25736800.180 ops/s
# Warmup Iteration  17: 25682668.672 ops/s
# Warmup Iteration  18: 25643073.129 ops/s
# Warmup Iteration  19: 25660578.722 ops/s
# Warmup Iteration  20: 25649910.177 ops/s
# Warmup Iteration  21: 25616025.444 ops/s
# Warmup Iteration  22: 25617587.120 ops/s
# Warmup Iteration  23: 25683209.686 ops/s
# Warmup Iteration  24: 25612908.673 ops/s
# Warmup Iteration  25: 25678595.499 ops/s
# Warmup Iteration  26: 25683947.445 ops/s
# Warmup Iteration  27: 25603719.402 ops/s
# Warmup Iteration  28: 25620842.381 ops/s
# Warmup Iteration  29: 25626384.022 ops/s
# Warmup Iteration  30: 25708095.891 ops/s
Iteration   1: 25700901.293 ops/s
Iteration   2: 25651745.608 ops/s
Iteration   3: 25663964.212 ops/s
Iteration   4: 25592857.496 ops/s
Iteration   5: 25673930.199 ops/s
Iteration   6: 25637181.979 ops/s
Iteration   7: 25648079.614 ops/s
Iteration   8: 25647535.227 ops/s
Iteration   9: 25636231.330 ops/s
Iteration  10: 25664626.312 ops/s
Iteration  11: 25631852.772 ops/s
Iteration  12: 25709579.494 ops/s
Iteration  13: 25631449.623 ops/s
Iteration  14: 25613658.826 ops/s
Iteration  15: 25608164.008 ops/s
Iteration  16: 25655924.823 ops/s
Iteration  17: 25620232.358 ops/s
Iteration  18: 25588475.275 ops/s
Iteration  19: 25733851.625 ops/s
Iteration  20: 25759275.671 ops/s
Iteration  21: 25623959.300 ops/s
Iteration  22: 25643107.837 ops/s
Iteration  23: 25758834.823 ops/s
Iteration  24: 25700488.849 ops/s
Iteration  25: 25675585.123 ops/s
Iteration  26: 25642527.745 ops/s
Iteration  27: 25643898.139 ops/s
Iteration  28: 25630446.738 ops/s
Iteration  29: 25677444.565 ops/s
Iteration  30: 25615370.693 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_anySatisfy":
  25656039.385 ±(99.9%) 29171.284 ops/s [Average]
  (min, avg, max) = (25588475.275, 25656039.385, 25759275.671), stdev = 43662.209
  CI (99.9%): [25626868.101, 25685210.670] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_anySatisfy  thrpt   30  25656039.385 ± 29171.284  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_anySatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_anySatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11660312.581 ops/s
# Warmup Iteration   2: 23379669.738 ops/s
# Warmup Iteration   3: 21937111.214 ops/s
# Warmup Iteration   4: 22143047.559 ops/s
# Warmup Iteration   5: 18666959.398 ops/s
# Warmup Iteration   6: 22214608.843 ops/s
# Warmup Iteration   7: 22204290.014 ops/s
# Warmup Iteration   8: 22217232.608 ops/s
# Warmup Iteration   9: 22175232.910 ops/s
# Warmup Iteration  10: 22136344.509 ops/s
# Warmup Iteration  11: 22231581.923 ops/s
# Warmup Iteration  12: 22189406.619 ops/s
# Warmup Iteration  13: 22141205.287 ops/s
# Warmup Iteration  14: 22214249.000 ops/s
# Warmup Iteration  15: 22168441.631 ops/s
# Warmup Iteration  16: 22223907.854 ops/s
# Warmup Iteration  17: 22178540.858 ops/s
# Warmup Iteration  18: 22258401.744 ops/s
# Warmup Iteration  19: 22234926.853 ops/s
# Warmup Iteration  20: 22193352.315 ops/s
# Warmup Iteration  21: 22220175.717 ops/s
# Warmup Iteration  22: 22247983.894 ops/s
# Warmup Iteration  23: 22183192.441 ops/s
# Warmup Iteration  24: 22195628.816 ops/s
# Warmup Iteration  25: 22230584.914 ops/s
# Warmup Iteration  26: 22230957.359 ops/s
# Warmup Iteration  27: 22209410.322 ops/s
# Warmup Iteration  28: 22191756.045 ops/s
# Warmup Iteration  29: 22216585.167 ops/s
# Warmup Iteration  30: 22227889.023 ops/s
Iteration   1: 22175633.449 ops/s
Iteration   2: 22203379.379 ops/s
Iteration   3: 22268760.019 ops/s
Iteration   4: 22203811.312 ops/s
Iteration   5: 22199961.606 ops/s
Iteration   6: 22238066.799 ops/s
Iteration   7: 22195631.908 ops/s
Iteration   8: 22171203.206 ops/s
Iteration   9: 22249497.204 ops/s
Iteration  10: 22191495.226 ops/s
Iteration  11: 22212624.081 ops/s
Iteration  12: 22131907.516 ops/s
Iteration  13: 22206945.470 ops/s
Iteration  14: 22208734.820 ops/s
Iteration  15: 22212870.386 ops/s
Iteration  16: 22283580.836 ops/s
Iteration  17: 22205469.833 ops/s
Iteration  18: 22225130.040 ops/s
Iteration  19: 22241199.811 ops/s
Iteration  20: 22226657.983 ops/s
Iteration  21: 22212706.380 ops/s
Iteration  22: 22254099.194 ops/s
Iteration  23: 22230543.046 ops/s
Iteration  24: 22179869.263 ops/s
Iteration  25: 22248655.929 ops/s
Iteration  26: 22198401.137 ops/s
Iteration  27: 22187747.113 ops/s
Iteration  28: 22249788.222 ops/s
Iteration  29: 22244591.504 ops/s
Iteration  30: 22212674.765 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_anySatisfyWith":
  22215721.248 ±(99.9%) 21297.496 ops/s [Average]
  (min, avg, max) = (22131907.516, 22215721.248, 22283580.836), stdev = 31877.092
  CI (99.9%): [22194423.752, 22237018.744] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score       Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_anySatisfyWith  thrpt   30  22215721.248 ± 21297.496  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 757186.151 ops/s
# Warmup Iteration   2: 1689071.277 ops/s
# Warmup Iteration   3: 1429810.090 ops/s
# Warmup Iteration   4: 1707479.042 ops/s
# Warmup Iteration   5: 1703897.331 ops/s
# Warmup Iteration   6: 1714054.633 ops/s
# Warmup Iteration   7: 1712094.553 ops/s
# Warmup Iteration   8: 1711904.760 ops/s
# Warmup Iteration   9: 1701531.459 ops/s
# Warmup Iteration  10: 1707408.280 ops/s
# Warmup Iteration  11: 1712287.788 ops/s
# Warmup Iteration  12: 1705446.850 ops/s
# Warmup Iteration  13: 1708255.226 ops/s
# Warmup Iteration  14: 1706591.072 ops/s
# Warmup Iteration  15: 1705581.617 ops/s
# Warmup Iteration  16: 1702082.158 ops/s
# Warmup Iteration  17: 1712005.045 ops/s
# Warmup Iteration  18: 1711677.925 ops/s
# Warmup Iteration  19: 1712916.811 ops/s
# Warmup Iteration  20: 1703309.680 ops/s
# Warmup Iteration  21: 1706177.660 ops/s
# Warmup Iteration  22: 1708288.433 ops/s
# Warmup Iteration  23: 1710393.569 ops/s
# Warmup Iteration  24: 1701016.536 ops/s
# Warmup Iteration  25: 1705324.666 ops/s
# Warmup Iteration  26: 1707132.603 ops/s
# Warmup Iteration  27: 1707578.145 ops/s
# Warmup Iteration  28: 1705801.544 ops/s
# Warmup Iteration  29: 1703922.592 ops/s
# Warmup Iteration  30: 1708674.174 ops/s
Iteration   1: 1701629.137 ops/s
Iteration   2: 1706469.096 ops/s
Iteration   3: 1707302.814 ops/s
Iteration   4: 1705139.145 ops/s
Iteration   5: 1708787.601 ops/s
Iteration   6: 1706332.069 ops/s
Iteration   7: 1701738.496 ops/s
Iteration   8: 1706801.624 ops/s
Iteration   9: 1707364.332 ops/s
Iteration  10: 1712059.973 ops/s
Iteration  11: 1705205.080 ops/s
Iteration  12: 1709550.502 ops/s
Iteration  13: 1704528.477 ops/s
Iteration  14: 1708355.800 ops/s
Iteration  15: 1710548.174 ops/s
Iteration  16: 1707807.969 ops/s
Iteration  17: 1705505.084 ops/s
Iteration  18: 1705830.558 ops/s
Iteration  19: 1704928.078 ops/s
Iteration  20: 1698089.897 ops/s
Iteration  21: 1698920.921 ops/s
Iteration  22: 1688054.642 ops/s
Iteration  23: 1681611.015 ops/s
Iteration  24: 1686276.570 ops/s
Iteration  25: 1688964.646 ops/s
Iteration  26: 1711563.637 ops/s
Iteration  27: 1708705.180 ops/s
Iteration  28: 1696496.650 ops/s
Iteration  29: 1708538.017 ops/s
Iteration  30: 1706329.508 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_appendString":
  1703314.490 ±(99.9%) 5206.164 ops/s [Average]
  (min, avg, max) = (1681611.015, 1703314.490, 1712059.973), stdev = 7792.342
  CI (99.9%): [1698108.325, 1708520.654] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_appendString  thrpt   30  1703314.490 ± 5206.164  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_asReversed$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_asReversed

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5182659.212 ops/s
# Warmup Iteration   2: 10496516.469 ops/s
# Warmup Iteration   3: 10168712.165 ops/s
# Warmup Iteration   4: 11276694.361 ops/s
# Warmup Iteration   5: 11316634.066 ops/s
# Warmup Iteration   6: 11283432.454 ops/s
# Warmup Iteration   7: 11296215.549 ops/s
# Warmup Iteration   8: 11280254.659 ops/s
# Warmup Iteration   9: 11266796.139 ops/s
# Warmup Iteration  10: 11284417.265 ops/s
# Warmup Iteration  11: 11279388.670 ops/s
# Warmup Iteration  12: 11185198.110 ops/s
# Warmup Iteration  13: 11308798.015 ops/s
# Warmup Iteration  14: 11324328.219 ops/s
# Warmup Iteration  15: 11309675.223 ops/s
# Warmup Iteration  16: 11312180.266 ops/s
# Warmup Iteration  17: 11292096.565 ops/s
# Warmup Iteration  18: 11302061.864 ops/s
# Warmup Iteration  19: 11278939.752 ops/s
# Warmup Iteration  20: 11253831.692 ops/s
# Warmup Iteration  21: 11306043.735 ops/s
# Warmup Iteration  22: 11277155.373 ops/s
# Warmup Iteration  23: 11298746.479 ops/s
# Warmup Iteration  24: 11315557.031 ops/s
# Warmup Iteration  25: 11299789.085 ops/s
# Warmup Iteration  26: 11280742.476 ops/s
# Warmup Iteration  27: 11189353.748 ops/s
# Warmup Iteration  28: 11236005.026 ops/s
# Warmup Iteration  29: 11230636.434 ops/s
# Warmup Iteration  30: 11258526.441 ops/s
Iteration   1: 11297394.208 ops/s
Iteration   2: 11165385.706 ops/s
Iteration   3: 11234962.874 ops/s
Iteration   4: 11279903.024 ops/s
Iteration   5: 11378175.537 ops/s
Iteration   6: 11266583.150 ops/s
Iteration   7: 11327488.158 ops/s
Iteration   8: 11265169.031 ops/s
Iteration   9: 11268901.818 ops/s
Iteration  10: 11271708.491 ops/s
Iteration  11: 11262784.885 ops/s
Iteration  12: 11269460.248 ops/s
Iteration  13: 11265009.805 ops/s
Iteration  14: 11326485.735 ops/s
Iteration  15: 11252296.257 ops/s
Iteration  16: 11206630.116 ops/s
Iteration  17: 11238246.150 ops/s
Iteration  18: 11334297.371 ops/s
Iteration  19: 11264296.487 ops/s
Iteration  20: 11252318.300 ops/s
Iteration  21: 11280502.960 ops/s
Iteration  22: 11323863.050 ops/s
Iteration  23: 11312550.193 ops/s
Iteration  24: 11309451.332 ops/s
Iteration  25: 11300658.969 ops/s
Iteration  26: 11299045.724 ops/s
Iteration  27: 11314030.255 ops/s
Iteration  28: 11309446.706 ops/s
Iteration  29: 11322215.442 ops/s
Iteration  30: 11263715.494 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_asReversed":
  11282099.249 ±(99.9%) 28067.848 ops/s [Average]
  (min, avg, max) = (11165385.706, 11282099.249, 11378175.537), stdev = 42010.637
  CI (99.9%): [11254031.401, 11310167.097] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_asReversed  thrpt   30  11282099.249 ± 28067.848  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_castToCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_castToCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 781585.570 ops/s
# Warmup Iteration   2: 813179.029 ops/s
# Warmup Iteration   3: 1048100.254 ops/s
# Warmup Iteration   4: 1048044.187 ops/s
# Warmup Iteration   5: 1045239.099 ops/s
# Warmup Iteration   6: 1049945.859 ops/s
# Warmup Iteration   7: 1049776.612 ops/s
# Warmup Iteration   8: 1049940.876 ops/s
# Warmup Iteration   9: 1049640.744 ops/s
# Warmup Iteration  10: 1050590.116 ops/s
# Warmup Iteration  11: 988048.333 ops/s
# Warmup Iteration  12: 955805.645 ops/s
# Warmup Iteration  13: 1050325.677 ops/s
# Warmup Iteration  14: 1049768.342 ops/s
# Warmup Iteration  15: 1050661.907 ops/s
# Warmup Iteration  16: 1048274.009 ops/s
# Warmup Iteration  17: 1113082.190 ops/s
# Warmup Iteration  18: 1113668.813 ops/s
# Warmup Iteration  19: 1115166.886 ops/s
# Warmup Iteration  20: 1117886.833 ops/s
# Warmup Iteration  21: 1113658.981 ops/s
# Warmup Iteration  22: 1117620.471 ops/s
# Warmup Iteration  23: 1112612.010 ops/s
# Warmup Iteration  24: 1112082.534 ops/s
# Warmup Iteration  25: 1113657.743 ops/s
# Warmup Iteration  26: 1111880.030 ops/s
# Warmup Iteration  27: 1109549.701 ops/s
# Warmup Iteration  28: 1108117.268 ops/s
# Warmup Iteration  29: 1110214.422 ops/s
# Warmup Iteration  30: 1113517.315 ops/s
Iteration   1: 1115695.006 ops/s
Iteration   2: 1117669.856 ops/s
Iteration   3: 1112260.488 ops/s
Iteration   4: 1113718.921 ops/s
Iteration   5: 1113706.758 ops/s
Iteration   6: 1115995.162 ops/s
Iteration   7: 1114652.960 ops/s
Iteration   8: 1107328.287 ops/s
Iteration   9: 1112206.404 ops/s
Iteration  10: 1112740.535 ops/s
Iteration  11: 1111473.656 ops/s
Iteration  12: 1113347.762 ops/s
Iteration  13: 1117062.341 ops/s
Iteration  14: 1118815.773 ops/s
Iteration  15: 1116053.498 ops/s
Iteration  16: 1114636.213 ops/s
Iteration  17: 1109237.759 ops/s
Iteration  18: 1114796.160 ops/s
Iteration  19: 1108979.057 ops/s
Iteration  20: 1110499.024 ops/s
Iteration  21: 1108582.969 ops/s
Iteration  22: 1109209.229 ops/s
Iteration  23: 1105761.173 ops/s
Iteration  24: 1109821.156 ops/s
Iteration  25: 1112076.898 ops/s
Iteration  26: 1115993.382 ops/s
Iteration  27: 1107458.102 ops/s
Iteration  28: 1116282.461 ops/s
Iteration  29: 1117784.133 ops/s
Iteration  30: 1115572.822 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_castToCollection":
  1112980.598 ±(99.9%) 2344.033 ops/s [Average]
  (min, avg, max) = (1105761.173, 1112980.598, 1118815.773), stdev = 3508.438
  CI (99.9%): [1110636.565, 1115324.631] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_castToCollection  thrpt   30  1112980.598 ± 2344.033  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_chunk_large_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_chunk_large_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4561022.350 ops/s
# Warmup Iteration   2: 9742744.450 ops/s
# Warmup Iteration   3: 9817765.391 ops/s
# Warmup Iteration   4: 8255538.970 ops/s
# Warmup Iteration   5: 9812236.613 ops/s
# Warmup Iteration   6: 9824389.908 ops/s
# Warmup Iteration   7: 9821794.365 ops/s
# Warmup Iteration   8: 9816922.064 ops/s
# Warmup Iteration   9: 9793840.841 ops/s
# Warmup Iteration  10: 9831177.737 ops/s
# Warmup Iteration  11: 9826362.505 ops/s
# Warmup Iteration  12: 9818227.647 ops/s
# Warmup Iteration  13: 9821862.974 ops/s
# Warmup Iteration  14: 9824072.763 ops/s
# Warmup Iteration  15: 9808824.579 ops/s
# Warmup Iteration  16: 9822309.835 ops/s
# Warmup Iteration  17: 9809172.405 ops/s
# Warmup Iteration  18: 9820026.654 ops/s
# Warmup Iteration  19: 9837062.249 ops/s
# Warmup Iteration  20: 9825089.927 ops/s
# Warmup Iteration  21: 9816776.168 ops/s
# Warmup Iteration  22: 9794510.241 ops/s
# Warmup Iteration  23: 9829521.024 ops/s
# Warmup Iteration  24: 9818533.566 ops/s
# Warmup Iteration  25: 9821177.700 ops/s
# Warmup Iteration  26: 9820024.267 ops/s
# Warmup Iteration  27: 9820811.188 ops/s
# Warmup Iteration  28: 9825532.304 ops/s
# Warmup Iteration  29: 9822091.803 ops/s
# Warmup Iteration  30: 9825974.641 ops/s
Iteration   1: 9813758.955 ops/s
Iteration   2: 9834591.854 ops/s
Iteration   3: 9831581.137 ops/s
Iteration   4: 9829237.379 ops/s
Iteration   5: 9827719.474 ops/s
Iteration   6: 9811955.393 ops/s
Iteration   7: 9812458.891 ops/s
Iteration   8: 9819281.089 ops/s
Iteration   9: 9802276.029 ops/s
Iteration  10: 9835061.586 ops/s
Iteration  11: 9817069.474 ops/s
Iteration  12: 9826863.171 ops/s
Iteration  13: 9806843.421 ops/s
Iteration  14: 9818567.378 ops/s
Iteration  15: 9811484.618 ops/s
Iteration  16: 9823606.085 ops/s
Iteration  17: 9823757.761 ops/s
Iteration  18: 9433612.554 ops/s
Iteration  19: 9821872.738 ops/s
Iteration  20: 9815777.486 ops/s
Iteration  21: 9827303.410 ops/s
Iteration  22: 9814562.894 ops/s
Iteration  23: 9818039.830 ops/s
Iteration  24: 9819608.692 ops/s
Iteration  25: 9820877.003 ops/s
Iteration  26: 9828395.323 ops/s
Iteration  27: 9818925.004 ops/s
Iteration  28: 9826962.678 ops/s
Iteration  29: 9823291.862 ops/s
Iteration  30: 9836991.586 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_chunk_large_size":
  9808411.159 ±(99.9%) 47619.056 ops/s [Average]
  (min, avg, max) = (9433612.554, 9808411.159, 9836991.586), stdev = 71273.967
  CI (99.9%): [9760792.102, 9856030.215] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_chunk_large_size  thrpt   30  9808411.159 ± 47619.056  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_chunk_zero_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_chunk_zero_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 791014.277 ops/s
# Warmup Iteration   2: 829299.985 ops/s
# Warmup Iteration   3: 1056486.513 ops/s
# Warmup Iteration   4: 1057032.565 ops/s
# Warmup Iteration   5: 1050475.915 ops/s
# Warmup Iteration   6: 1060398.667 ops/s
# Warmup Iteration   7: 1059116.591 ops/s
# Warmup Iteration   8: 1059886.104 ops/s
# Warmup Iteration   9: 1055242.945 ops/s
# Warmup Iteration  10: 1056263.358 ops/s
# Warmup Iteration  11: 973857.474 ops/s
# Warmup Iteration  12: 983354.871 ops/s
# Warmup Iteration  13: 1053925.528 ops/s
# Warmup Iteration  14: 1052308.494 ops/s
# Warmup Iteration  15: 1057029.222 ops/s
# Warmup Iteration  16: 1055120.990 ops/s
# Warmup Iteration  17: 1119958.059 ops/s
# Warmup Iteration  18: 1117994.689 ops/s
# Warmup Iteration  19: 1118182.644 ops/s
# Warmup Iteration  20: 1122004.460 ops/s
# Warmup Iteration  21: 1120393.266 ops/s
# Warmup Iteration  22: 1120315.169 ops/s
# Warmup Iteration  23: 1118618.560 ops/s
# Warmup Iteration  24: 1120720.467 ops/s
# Warmup Iteration  25: 1118473.468 ops/s
# Warmup Iteration  26: 1117937.764 ops/s
# Warmup Iteration  27: 1117262.471 ops/s
# Warmup Iteration  28: 1118449.371 ops/s
# Warmup Iteration  29: 1118864.785 ops/s
# Warmup Iteration  30: 1112840.399 ops/s
Iteration   1: 1117395.859 ops/s
Iteration   2: 1116986.039 ops/s
Iteration   3: 1118075.630 ops/s
Iteration   4: 1119662.423 ops/s
Iteration   5: 1120783.776 ops/s
Iteration   6: 1114595.975 ops/s
Iteration   7: 1116062.415 ops/s
Iteration   8: 1110519.573 ops/s
Iteration   9: 1115844.248 ops/s
Iteration  10: 1118272.733 ops/s
Iteration  11: 1117028.517 ops/s
Iteration  12: 1117901.765 ops/s
Iteration  13: 1120527.029 ops/s
Iteration  14: 1119447.109 ops/s
Iteration  15: 1119435.018 ops/s
Iteration  16: 1118350.875 ops/s
Iteration  17: 1117461.535 ops/s
Iteration  18: 1117179.421 ops/s
Iteration  19: 1118709.973 ops/s
Iteration  20: 1120634.390 ops/s
Iteration  21: 1121379.231 ops/s
Iteration  22: 1119806.674 ops/s
Iteration  23: 1115844.931 ops/s
Iteration  24: 1120638.090 ops/s
Iteration  25: 1120044.283 ops/s
Iteration  26: 1117178.880 ops/s
Iteration  27: 1117344.430 ops/s
Iteration  28: 1117833.836 ops/s
Iteration  29: 1117269.745 ops/s
Iteration  30: 1118704.282 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_chunk_zero_throws":
  1118030.623 ±(99.9%) 1470.864 ops/s [Average]
  (min, avg, max) = (1110519.573, 1118030.623, 1121379.231), stdev = 2201.521
  CI (99.9%): [1116559.758, 1119501.487] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_chunk_zero_throws  thrpt   30  1118030.623 ± 1470.864  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 756906.143 ops/s
# Warmup Iteration   2: 790214.730 ops/s
# Warmup Iteration   3: 990312.651 ops/s
# Warmup Iteration   4: 986736.369 ops/s
# Warmup Iteration   5: 988073.166 ops/s
# Warmup Iteration   6: 980718.759 ops/s
# Warmup Iteration   7: 978122.473 ops/s
# Warmup Iteration   8: 980657.135 ops/s
# Warmup Iteration   9: 982811.033 ops/s
# Warmup Iteration  10: 983578.230 ops/s
# Warmup Iteration  11: 988452.337 ops/s
# Warmup Iteration  12: 841453.289 ops/s
# Warmup Iteration  13: 984632.554 ops/s
# Warmup Iteration  14: 982212.170 ops/s
# Warmup Iteration  15: 983306.702 ops/s
# Warmup Iteration  16: 982810.287 ops/s
# Warmup Iteration  17: 1043263.118 ops/s
# Warmup Iteration  18: 1046185.884 ops/s
# Warmup Iteration  19: 1042626.848 ops/s
# Warmup Iteration  20: 1048288.092 ops/s
# Warmup Iteration  21: 1047713.023 ops/s
# Warmup Iteration  22: 1043675.889 ops/s
# Warmup Iteration  23: 1044741.459 ops/s
# Warmup Iteration  24: 1045591.062 ops/s
# Warmup Iteration  25: 1044020.900 ops/s
# Warmup Iteration  26: 1044036.873 ops/s
# Warmup Iteration  27: 1046458.903 ops/s
# Warmup Iteration  28: 1048717.816 ops/s
# Warmup Iteration  29: 1046983.416 ops/s
# Warmup Iteration  30: 1045924.742 ops/s
Iteration   1: 1050904.057 ops/s
Iteration   2: 1049272.316 ops/s
Iteration   3: 1045581.455 ops/s
Iteration   4: 1042648.566 ops/s
Iteration   5: 1049796.774 ops/s
Iteration   6: 1047224.914 ops/s
Iteration   7: 1047239.984 ops/s
Iteration   8: 1042743.823 ops/s
Iteration   9: 1045283.279 ops/s
Iteration  10: 1044316.029 ops/s
Iteration  11: 1044191.510 ops/s
Iteration  12: 1043137.930 ops/s
Iteration  13: 1045736.094 ops/s
Iteration  14: 1044617.872 ops/s
Iteration  15: 1047177.863 ops/s
Iteration  16: 1045838.318 ops/s
Iteration  17: 1047209.896 ops/s
Iteration  18: 1046206.935 ops/s
Iteration  19: 1046683.626 ops/s
Iteration  20: 1046803.984 ops/s
Iteration  21: 1047894.401 ops/s
Iteration  22: 1045742.350 ops/s
Iteration  23: 1044266.345 ops/s
Iteration  24: 1042951.147 ops/s
Iteration  25: 1047416.813 ops/s
Iteration  26: 1047650.622 ops/s
Iteration  27: 1045661.447 ops/s
Iteration  28: 1041720.340 ops/s
Iteration  29: 1043027.634 ops/s
Iteration  30: 1040883.598 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_clear":
  1045660.997 ±(99.9%) 1597.170 ops/s [Average]
  (min, avg, max) = (1040883.598, 1045660.997, 1050904.057), stdev = 2390.568
  CI (99.9%): [1044063.828, 1047258.167] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_clear  thrpt   30  1045660.997 ± 1597.170  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8751894.332 ops/s
# Warmup Iteration   2: 18638366.870 ops/s
# Warmup Iteration   3: 19187556.609 ops/s
# Warmup Iteration   4: 17129945.848 ops/s
# Warmup Iteration   5: 18086224.272 ops/s
# Warmup Iteration   6: 19172786.912 ops/s
# Warmup Iteration   7: 19205431.975 ops/s
# Warmup Iteration   8: 19173826.574 ops/s
# Warmup Iteration   9: 19209615.131 ops/s
# Warmup Iteration  10: 19194868.290 ops/s
# Warmup Iteration  11: 19161551.487 ops/s
# Warmup Iteration  12: 19114624.454 ops/s
# Warmup Iteration  13: 19221699.686 ops/s
# Warmup Iteration  14: 19203756.968 ops/s
# Warmup Iteration  15: 19191066.654 ops/s
# Warmup Iteration  16: 19183366.584 ops/s
# Warmup Iteration  17: 19208062.461 ops/s
# Warmup Iteration  18: 19166449.915 ops/s
# Warmup Iteration  19: 19177819.190 ops/s
# Warmup Iteration  20: 19160466.513 ops/s
# Warmup Iteration  21: 19192763.221 ops/s
# Warmup Iteration  22: 19205975.728 ops/s
# Warmup Iteration  23: 19182036.306 ops/s
# Warmup Iteration  24: 19172895.863 ops/s
# Warmup Iteration  25: 19198702.819 ops/s
# Warmup Iteration  26: 19201141.954 ops/s
# Warmup Iteration  27: 19207035.743 ops/s
# Warmup Iteration  28: 19182636.599 ops/s
# Warmup Iteration  29: 19186931.605 ops/s
# Warmup Iteration  30: 19200652.487 ops/s
Iteration   1: 19184301.925 ops/s
Iteration   2: 19206023.873 ops/s
Iteration   3: 19180713.898 ops/s
Iteration   4: 19212875.245 ops/s
Iteration   5: 19164982.335 ops/s
Iteration   6: 19186748.781 ops/s
Iteration   7: 19180550.137 ops/s
Iteration   8: 19190443.097 ops/s
Iteration   9: 19220994.454 ops/s
Iteration  10: 19191876.662 ops/s
Iteration  11: 19156877.352 ops/s
Iteration  12: 19169205.058 ops/s
Iteration  13: 19189505.578 ops/s
Iteration  14: 19191813.869 ops/s
Iteration  15: 19221848.701 ops/s
Iteration  16: 19167131.383 ops/s
Iteration  17: 19187239.807 ops/s
Iteration  18: 19178396.930 ops/s
Iteration  19: 19189111.383 ops/s
Iteration  20: 19223872.562 ops/s
Iteration  21: 19161994.410 ops/s
Iteration  22: 19174911.707 ops/s
Iteration  23: 19179593.647 ops/s
Iteration  24: 19213836.741 ops/s
Iteration  25: 19213535.941 ops/s
Iteration  26: 19227762.168 ops/s
Iteration  27: 19184211.885 ops/s
Iteration  28: 19181922.063 ops/s
Iteration  29: 19207538.313 ops/s
Iteration  30: 19209514.550 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_collect":
  19191644.482 ±(99.9%) 13202.369 ops/s [Average]
  (min, avg, max) = (19156877.352, 19191644.482, 19227762.168), stdev = 19760.686
  CI (99.9%): [19178442.113, 19204846.851] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_collect  thrpt   30  19191644.482 ± 13202.369  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_collectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_collectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4261827.176 ops/s
# Warmup Iteration   2: 10283025.346 ops/s
# Warmup Iteration   3: 8530237.267 ops/s
# Warmup Iteration   4: 10363794.879 ops/s
# Warmup Iteration   5: 10370587.772 ops/s
# Warmup Iteration   6: 10371608.279 ops/s
# Warmup Iteration   7: 10361191.165 ops/s
# Warmup Iteration   8: 10368309.110 ops/s
# Warmup Iteration   9: 10350452.771 ops/s
# Warmup Iteration  10: 10350954.891 ops/s
# Warmup Iteration  11: 10367715.781 ops/s
# Warmup Iteration  12: 10359122.381 ops/s
# Warmup Iteration  13: 10363988.918 ops/s
# Warmup Iteration  14: 10347217.722 ops/s
# Warmup Iteration  15: 10372553.225 ops/s
# Warmup Iteration  16: 10380304.249 ops/s
# Warmup Iteration  17: 10352581.006 ops/s
# Warmup Iteration  18: 10369362.781 ops/s
# Warmup Iteration  19: 10360906.868 ops/s
# Warmup Iteration  20: 10372177.560 ops/s
# Warmup Iteration  21: 10365660.797 ops/s
# Warmup Iteration  22: 10357593.333 ops/s
# Warmup Iteration  23: 10360083.078 ops/s
# Warmup Iteration  24: 10357556.940 ops/s
# Warmup Iteration  25: 10337181.970 ops/s
# Warmup Iteration  26: 10354338.817 ops/s
# Warmup Iteration  27: 10359770.511 ops/s
# Warmup Iteration  28: 10391013.229 ops/s
# Warmup Iteration  29: 10359296.070 ops/s
# Warmup Iteration  30: 10361093.947 ops/s
Iteration   1: 10371993.167 ops/s
Iteration   2: 10378958.676 ops/s
Iteration   3: 10358211.403 ops/s
Iteration   4: 10375024.434 ops/s
Iteration   5: 10375504.450 ops/s
Iteration   6: 10373336.534 ops/s
Iteration   7: 10360739.095 ops/s
Iteration   8: 10377040.619 ops/s
Iteration   9: 10361261.806 ops/s
Iteration  10: 10366296.591 ops/s
Iteration  11: 10356871.599 ops/s
Iteration  12: 10294517.315 ops/s
Iteration  13: 10374192.551 ops/s
Iteration  14: 10362858.442 ops/s
Iteration  15: 10372954.590 ops/s
Iteration  16: 10363543.481 ops/s
Iteration  17: 10373557.028 ops/s
Iteration  18: 10375610.079 ops/s
Iteration  19: 10357102.535 ops/s
Iteration  20: 10360039.492 ops/s
Iteration  21: 10365913.067 ops/s
Iteration  22: 10365580.224 ops/s
Iteration  23: 10354521.397 ops/s
Iteration  24: 10376791.183 ops/s
Iteration  25: 10368683.210 ops/s
Iteration  26: 10371270.981 ops/s
Iteration  27: 10352366.757 ops/s
Iteration  28: 10369064.420 ops/s
Iteration  29: 10373126.873 ops/s
Iteration  30: 10345639.124 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_collectBoolean":
  10364419.037 ±(99.9%) 10468.557 ops/s [Average]
  (min, avg, max) = (10294517.315, 10364419.037, 10378958.676), stdev = 15668.844
  CI (99.9%): [10353950.480, 10374887.594] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score       Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_collectBoolean  thrpt   30  10364419.037 ± 10468.557  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_collectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_collectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3389633.010 ops/s
# Warmup Iteration   2: 6563951.687 ops/s
# Warmup Iteration   3: 7210681.177 ops/s
# Warmup Iteration   4: 7245511.864 ops/s
# Warmup Iteration   5: 5965158.803 ops/s
# Warmup Iteration   6: 7210065.955 ops/s
# Warmup Iteration   7: 7221911.476 ops/s
# Warmup Iteration   8: 7233344.033 ops/s
# Warmup Iteration   9: 7228274.467 ops/s
# Warmup Iteration  10: 7233486.868 ops/s
# Warmup Iteration  11: 7232229.664 ops/s
# Warmup Iteration  12: 7219752.222 ops/s
# Warmup Iteration  13: 7227140.555 ops/s
# Warmup Iteration  14: 7233516.864 ops/s
# Warmup Iteration  15: 7229754.504 ops/s
# Warmup Iteration  16: 7226947.081 ops/s
# Warmup Iteration  17: 7253703.364 ops/s
# Warmup Iteration  18: 7247961.150 ops/s
# Warmup Iteration  19: 7247685.851 ops/s
# Warmup Iteration  20: 7253493.933 ops/s
# Warmup Iteration  21: 7254135.882 ops/s
# Warmup Iteration  22: 7239707.003 ops/s
# Warmup Iteration  23: 7251480.448 ops/s
# Warmup Iteration  24: 7255268.849 ops/s
# Warmup Iteration  25: 7249030.133 ops/s
# Warmup Iteration  26: 7245675.685 ops/s
# Warmup Iteration  27: 7248944.516 ops/s
# Warmup Iteration  28: 7250304.697 ops/s
# Warmup Iteration  29: 7244409.031 ops/s
# Warmup Iteration  30: 7253617.433 ops/s
Iteration   1: 7243428.259 ops/s
Iteration   2: 7255721.015 ops/s
Iteration   3: 7241610.563 ops/s
Iteration   4: 7253858.429 ops/s
Iteration   5: 7260033.145 ops/s
Iteration   6: 7253197.275 ops/s
Iteration   7: 7247846.809 ops/s
Iteration   8: 7247690.935 ops/s
Iteration   9: 7248674.353 ops/s
Iteration  10: 7255724.381 ops/s
Iteration  11: 7238327.574 ops/s
Iteration  12: 7256129.771 ops/s
Iteration  13: 7259808.112 ops/s
Iteration  14: 7235352.977 ops/s
Iteration  15: 7215371.106 ops/s
Iteration  16: 7257081.256 ops/s
Iteration  17: 7256983.282 ops/s
Iteration  18: 7240739.704 ops/s
Iteration  19: 7256956.215 ops/s
Iteration  20: 7237683.813 ops/s
Iteration  21: 7247815.779 ops/s
Iteration  22: 7236890.597 ops/s
Iteration  23: 7222383.472 ops/s
Iteration  24: 7242856.362 ops/s
Iteration  25: 7257056.807 ops/s
Iteration  26: 7244163.470 ops/s
Iteration  27: 7222634.627 ops/s
Iteration  28: 7247290.922 ops/s
Iteration  29: 7233224.370 ops/s
Iteration  30: 7256140.419 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_collectByte":
  7245755.860 ±(99.9%) 7840.864 ops/s [Average]
  (min, avg, max) = (7215371.106, 7245755.860, 7260033.145), stdev = 11735.837
  CI (99.9%): [7237914.996, 7253596.724] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_collectByte  thrpt   30  7245755.860 ± 7840.864  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_collectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_collectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3428977.999 ops/s
# Warmup Iteration   2: 6825323.438 ops/s
# Warmup Iteration   3: 7393365.435 ops/s
# Warmup Iteration   4: 7444700.834 ops/s
# Warmup Iteration   5: 6142375.209 ops/s
# Warmup Iteration   6: 7445497.252 ops/s
# Warmup Iteration   7: 7446183.521 ops/s
# Warmup Iteration   8: 7447135.948 ops/s
# Warmup Iteration   9: 7460485.199 ops/s
# Warmup Iteration  10: 7444764.285 ops/s
# Warmup Iteration  11: 7447006.425 ops/s
# Warmup Iteration  12: 7449808.391 ops/s
# Warmup Iteration  13: 7443306.724 ops/s
# Warmup Iteration  14: 7444144.664 ops/s
# Warmup Iteration  15: 7448511.856 ops/s
# Warmup Iteration  16: 7449846.224 ops/s
# Warmup Iteration  17: 7509117.346 ops/s
# Warmup Iteration  18: 7519503.899 ops/s
# Warmup Iteration  19: 7512955.727 ops/s
# Warmup Iteration  20: 7507539.829 ops/s
# Warmup Iteration  21: 7506834.859 ops/s
# Warmup Iteration  22: 7504767.390 ops/s
# Warmup Iteration  23: 7507726.924 ops/s
# Warmup Iteration  24: 7510070.864 ops/s
# Warmup Iteration  25: 7510837.303 ops/s
# Warmup Iteration  26: 7510921.774 ops/s
# Warmup Iteration  27: 7507040.060 ops/s
# Warmup Iteration  28: 7505066.235 ops/s
# Warmup Iteration  29: 7518853.178 ops/s
# Warmup Iteration  30: 7508426.752 ops/s
Iteration   1: 7505680.307 ops/s
Iteration   2: 7505355.835 ops/s
Iteration   3: 7515806.776 ops/s
Iteration   4: 7512394.970 ops/s
Iteration   5: 7514946.437 ops/s
Iteration   6: 7521789.426 ops/s
Iteration   7: 7507945.866 ops/s
Iteration   8: 7504727.967 ops/s
Iteration   9: 7494977.105 ops/s
Iteration  10: 7499727.168 ops/s
Iteration  11: 7511209.402 ops/s
Iteration  12: 7519731.242 ops/s
Iteration  13: 7487247.653 ops/s
Iteration  14: 7492940.920 ops/s
Iteration  15: 7513181.598 ops/s
Iteration  16: 7512762.902 ops/s
Iteration  17: 7504882.069 ops/s
Iteration  18: 7517853.412 ops/s
Iteration  19: 7516033.305 ops/s
Iteration  20: 7513235.416 ops/s
Iteration  21: 7501080.493 ops/s
Iteration  22: 7503661.807 ops/s
Iteration  23: 7510903.638 ops/s
Iteration  24: 7520982.900 ops/s
Iteration  25: 7522073.654 ops/s
Iteration  26: 7512786.661 ops/s
Iteration  27: 7518072.077 ops/s
Iteration  28: 7516265.092 ops/s
Iteration  29: 7509998.904 ops/s
Iteration  30: 7519666.802 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_collectChar":
  7510264.060 ±(99.9%) 5890.408 ops/s [Average]
  (min, avg, max) = (7487247.653, 7510264.060, 7522073.654), stdev = 8816.486
  CI (99.9%): [7504373.652, 7516154.468] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_collectChar  thrpt   30  7510264.060 ± 5890.408  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_collectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_collectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3240489.338 ops/s
# Warmup Iteration   2: 6957405.482 ops/s
# Warmup Iteration   3: 7357801.409 ops/s
# Warmup Iteration   4: 7432441.930 ops/s
# Warmup Iteration   5: 6114231.427 ops/s
# Warmup Iteration   6: 7442002.528 ops/s
# Warmup Iteration   7: 7451549.012 ops/s
# Warmup Iteration   8: 7442030.092 ops/s
# Warmup Iteration   9: 7447167.718 ops/s
# Warmup Iteration  10: 7443940.719 ops/s
# Warmup Iteration  11: 7457208.534 ops/s
# Warmup Iteration  12: 7404026.793 ops/s
# Warmup Iteration  13: 7430353.908 ops/s
# Warmup Iteration  14: 7442372.444 ops/s
# Warmup Iteration  15: 7453233.389 ops/s
# Warmup Iteration  16: 7444078.338 ops/s
# Warmup Iteration  17: 7450101.885 ops/s
# Warmup Iteration  18: 7441358.468 ops/s
# Warmup Iteration  19: 7445362.673 ops/s
# Warmup Iteration  20: 7442364.923 ops/s
# Warmup Iteration  21: 7452624.937 ops/s
# Warmup Iteration  22: 7440208.611 ops/s
# Warmup Iteration  23: 7450320.032 ops/s
# Warmup Iteration  24: 7443135.744 ops/s
# Warmup Iteration  25: 7440951.184 ops/s
# Warmup Iteration  26: 7433683.887 ops/s
# Warmup Iteration  27: 7449239.988 ops/s
# Warmup Iteration  28: 7449143.875 ops/s
# Warmup Iteration  29: 7453781.897 ops/s
# Warmup Iteration  30: 7439166.095 ops/s
Iteration   1: 7451716.234 ops/s
Iteration   2: 7453286.090 ops/s
Iteration   3: 7439603.551 ops/s
Iteration   4: 7443640.283 ops/s
Iteration   5: 7442508.825 ops/s
Iteration   6: 7455383.300 ops/s
Iteration   7: 7443313.833 ops/s
Iteration   8: 7443466.923 ops/s
Iteration   9: 7448897.799 ops/s
Iteration  10: 7462477.785 ops/s
Iteration  11: 7440830.902 ops/s
Iteration  12: 7442267.424 ops/s
Iteration  13: 7441341.777 ops/s
Iteration  14: 7454900.892 ops/s
Iteration  15: 7415792.744 ops/s
Iteration  16: 7445988.328 ops/s
Iteration  17: 7456292.302 ops/s
Iteration  18: 7456876.952 ops/s
Iteration  19: 7447487.245 ops/s
Iteration  20: 7428485.517 ops/s
Iteration  21: 7443494.125 ops/s
Iteration  22: 7454685.282 ops/s
Iteration  23: 7423553.700 ops/s
Iteration  24: 7438273.144 ops/s
Iteration  25: 7444070.624 ops/s
Iteration  26: 7448919.062 ops/s
Iteration  27: 7442845.832 ops/s
Iteration  28: 7441502.069 ops/s
Iteration  29: 7440280.932 ops/s
Iteration  30: 7410409.272 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_collectDouble":
  7443419.758 ±(99.9%) 7748.527 ops/s [Average]
  (min, avg, max) = (7410409.272, 7443419.758, 7462477.785), stdev = 11597.631
  CI (99.9%): [7435671.232, 7451168.285] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_collectDouble  thrpt   30  7443419.758 ± 7748.527  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_collectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_collectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3347065.161 ops/s
# Warmup Iteration   2: 6925462.477 ops/s
# Warmup Iteration   3: 7406509.328 ops/s
# Warmup Iteration   4: 7441404.111 ops/s
# Warmup Iteration   5: 6124152.983 ops/s
# Warmup Iteration   6: 7453679.424 ops/s
# Warmup Iteration   7: 7448253.835 ops/s
# Warmup Iteration   8: 7456889.001 ops/s
# Warmup Iteration   9: 7448969.681 ops/s
# Warmup Iteration  10: 7452750.189 ops/s
# Warmup Iteration  11: 7442896.993 ops/s
# Warmup Iteration  12: 7455999.430 ops/s
# Warmup Iteration  13: 7457587.955 ops/s
# Warmup Iteration  14: 7450280.082 ops/s
# Warmup Iteration  15: 7406458.709 ops/s
# Warmup Iteration  16: 7435031.352 ops/s
# Warmup Iteration  17: 7441348.163 ops/s
# Warmup Iteration  18: 7442902.394 ops/s
# Warmup Iteration  19: 7430269.689 ops/s
# Warmup Iteration  20: 7443774.189 ops/s
# Warmup Iteration  21: 7434720.603 ops/s
# Warmup Iteration  22: 7442487.374 ops/s
# Warmup Iteration  23: 7436504.673 ops/s
# Warmup Iteration  24: 7434964.472 ops/s
# Warmup Iteration  25: 7410291.402 ops/s
# Warmup Iteration  26: 7439811.942 ops/s
# Warmup Iteration  27: 7442984.660 ops/s
# Warmup Iteration  28: 7437468.133 ops/s
# Warmup Iteration  29: 7443110.868 ops/s
# Warmup Iteration  30: 7429308.816 ops/s
Iteration   1: 7440598.819 ops/s
Iteration   2: 7433562.304 ops/s
Iteration   3: 7435324.460 ops/s
Iteration   4: 7449537.637 ops/s
Iteration   5: 7425776.515 ops/s
Iteration   6: 7420454.304 ops/s
Iteration   7: 7444415.372 ops/s
Iteration   8: 7424077.208 ops/s
Iteration   9: 7413676.697 ops/s
Iteration  10: 7437069.904 ops/s
Iteration  11: 7443995.113 ops/s
Iteration  12: 7430521.905 ops/s
Iteration  13: 7442160.530 ops/s
Iteration  14: 7423271.543 ops/s
Iteration  15: 7438448.785 ops/s
Iteration  16: 7432712.668 ops/s
Iteration  17: 7449335.916 ops/s
Iteration  18: 7427056.557 ops/s
Iteration  19: 7432046.464 ops/s
Iteration  20: 7433779.069 ops/s
Iteration  21: 7465776.822 ops/s
Iteration  22: 7427195.381 ops/s
Iteration  23: 7437641.438 ops/s
Iteration  24: 7438872.282 ops/s
Iteration  25: 7399500.131 ops/s
Iteration  26: 7397748.849 ops/s
Iteration  27: 7413254.947 ops/s
Iteration  28: 7422053.601 ops/s
Iteration  29: 7400537.728 ops/s
Iteration  30: 7400073.733 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_collectFloat":
  7429349.223 ±(99.9%) 10788.833 ops/s [Average]
  (min, avg, max) = (7397748.849, 7429349.223, 7465776.822), stdev = 16148.219
  CI (99.9%): [7418560.389, 7440138.056] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_collectFloat  thrpt   30  7429349.223 ± 10788.833  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_collectIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_collectIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7709589.425 ops/s
# Warmup Iteration   2: 16825837.867 ops/s
# Warmup Iteration   3: 17090566.280 ops/s
# Warmup Iteration   4: 14913641.236 ops/s
# Warmup Iteration   5: 16474746.964 ops/s
# Warmup Iteration   6: 17105475.510 ops/s
# Warmup Iteration   7: 17117815.724 ops/s
# Warmup Iteration   8: 17090782.331 ops/s
# Warmup Iteration   9: 17031034.063 ops/s
# Warmup Iteration  10: 17111980.287 ops/s
# Warmup Iteration  11: 17032165.446 ops/s
# Warmup Iteration  12: 17108329.619 ops/s
# Warmup Iteration  13: 17089370.622 ops/s
# Warmup Iteration  14: 17088858.584 ops/s
# Warmup Iteration  15: 17113413.168 ops/s
# Warmup Iteration  16: 17099607.272 ops/s
# Warmup Iteration  17: 16875466.028 ops/s
# Warmup Iteration  18: 16886118.503 ops/s
# Warmup Iteration  19: 16898538.074 ops/s
# Warmup Iteration  20: 16919573.925 ops/s
# Warmup Iteration  21: 16890132.649 ops/s
# Warmup Iteration  22: 16920109.161 ops/s
# Warmup Iteration  23: 16940750.662 ops/s
# Warmup Iteration  24: 16872077.436 ops/s
# Warmup Iteration  25: 16920678.075 ops/s
# Warmup Iteration  26: 16853052.090 ops/s
# Warmup Iteration  27: 16888591.173 ops/s
# Warmup Iteration  28: 16921185.808 ops/s
# Warmup Iteration  29: 16890282.007 ops/s
# Warmup Iteration  30: 16914072.205 ops/s
Iteration   1: 16931773.133 ops/s
Iteration   2: 16921021.784 ops/s
Iteration   3: 16896948.123 ops/s
Iteration   4: 16912250.964 ops/s
Iteration   5: 16945464.557 ops/s
Iteration   6: 16892940.867 ops/s
Iteration   7: 16895814.158 ops/s
Iteration   8: 16897347.486 ops/s
Iteration   9: 16901415.779 ops/s
Iteration  10: 16947123.167 ops/s
Iteration  11: 16908140.750 ops/s
Iteration  12: 16900496.684 ops/s
Iteration  13: 16885342.136 ops/s
Iteration  14: 16822347.372 ops/s
Iteration  15: 16804988.592 ops/s
Iteration  16: 16834643.644 ops/s
Iteration  17: 16845198.700 ops/s
Iteration  18: 16882455.273 ops/s
Iteration  19: 16887021.567 ops/s
Iteration  20: 16916302.015 ops/s
Iteration  21: 16892737.865 ops/s
Iteration  22: 16883898.363 ops/s
Iteration  23: 16888217.360 ops/s
Iteration  24: 16886035.292 ops/s
Iteration  25: 16891073.813 ops/s
Iteration  26: 16923768.209 ops/s
Iteration  27: 16898468.598 ops/s
Iteration  28: 16922353.145 ops/s
Iteration  29: 16897574.314 ops/s
Iteration  30: 16917028.369 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_collectIf":
  16894339.736 ±(99.9%) 21651.865 ops/s [Average]
  (min, avg, max) = (16804988.592, 16894339.736, 16947123.167), stdev = 32407.495
  CI (99.9%): [16872687.870, 16915991.601] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_collectIf  thrpt   30  16894339.736 ± 21651.865  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_collectIfWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_collectIfWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9522827.644 ops/s
# Warmup Iteration   2: 19493294.473 ops/s
# Warmup Iteration   3: 18311647.296 ops/s
# Warmup Iteration   4: 17911313.562 ops/s
# Warmup Iteration   5: 19652564.836 ops/s
# Warmup Iteration   6: 19685772.557 ops/s
# Warmup Iteration   7: 19677118.291 ops/s
# Warmup Iteration   8: 19655851.777 ops/s
# Warmup Iteration   9: 19689752.984 ops/s
# Warmup Iteration  10: 19608709.784 ops/s
# Warmup Iteration  11: 19669254.222 ops/s
# Warmup Iteration  12: 19690730.138 ops/s
# Warmup Iteration  13: 19662791.971 ops/s
# Warmup Iteration  14: 19640621.936 ops/s
# Warmup Iteration  15: 19654066.574 ops/s
# Warmup Iteration  16: 19641157.419 ops/s
# Warmup Iteration  17: 19642342.941 ops/s
# Warmup Iteration  18: 19657330.490 ops/s
# Warmup Iteration  19: 19628500.063 ops/s
# Warmup Iteration  20: 19678515.992 ops/s
# Warmup Iteration  21: 19655335.972 ops/s
# Warmup Iteration  22: 19618151.141 ops/s
# Warmup Iteration  23: 19657829.048 ops/s
# Warmup Iteration  24: 19707329.201 ops/s
# Warmup Iteration  25: 19640621.635 ops/s
# Warmup Iteration  26: 19659792.304 ops/s
# Warmup Iteration  27: 19625730.935 ops/s
# Warmup Iteration  28: 19679341.691 ops/s
# Warmup Iteration  29: 19573227.258 ops/s
# Warmup Iteration  30: 19631433.773 ops/s
Iteration   1: 19739563.835 ops/s
Iteration   2: 19665690.197 ops/s
Iteration   3: 19694686.026 ops/s
Iteration   4: 19704824.134 ops/s
Iteration   5: 19667023.391 ops/s
Iteration   6: 19686799.288 ops/s
Iteration   7: 19641708.071 ops/s
Iteration   8: 19694121.634 ops/s
Iteration   9: 19714127.425 ops/s
Iteration  10: 19646960.061 ops/s
Iteration  11: 19662827.850 ops/s
Iteration  12: 19708654.988 ops/s
Iteration  13: 19703573.842 ops/s
Iteration  14: 19698638.908 ops/s
Iteration  15: 19663290.111 ops/s
Iteration  16: 19681162.727 ops/s
Iteration  17: 19664530.242 ops/s
Iteration  18: 19633480.275 ops/s
Iteration  19: 19628817.383 ops/s
Iteration  20: 19667014.856 ops/s
Iteration  21: 19716620.361 ops/s
Iteration  22: 19661645.411 ops/s
Iteration  23: 19650735.054 ops/s
Iteration  24: 19622057.334 ops/s
Iteration  25: 19626038.482 ops/s
Iteration  26: 19628339.761 ops/s
Iteration  27: 19637054.788 ops/s
Iteration  28: 19612946.287 ops/s
Iteration  29: 19700309.960 ops/s
Iteration  30: 19628577.489 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_collectIfWithTarget":
  19668394.006 ±(99.9%) 22551.668 ops/s [Average]
  (min, avg, max) = (19612946.287, 19668394.006, 19739563.835), stdev = 33754.278
  CI (99.9%): [19645842.337, 19690945.674] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt         Score       Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_collectIfWithTarget  thrpt   30  19668394.006 ± 22551.668  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_collectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_collectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3348160.537 ops/s
# Warmup Iteration   2: 7061044.549 ops/s
# Warmup Iteration   3: 7539201.242 ops/s
# Warmup Iteration   4: 7586588.353 ops/s
# Warmup Iteration   5: 6240027.956 ops/s
# Warmup Iteration   6: 7576919.465 ops/s
# Warmup Iteration   7: 7591653.156 ops/s
# Warmup Iteration   8: 7592715.860 ops/s
# Warmup Iteration   9: 7588338.475 ops/s
# Warmup Iteration  10: 7593904.118 ops/s
# Warmup Iteration  11: 7580967.328 ops/s
# Warmup Iteration  12: 7585646.710 ops/s
# Warmup Iteration  13: 7583808.612 ops/s
# Warmup Iteration  14: 7592951.744 ops/s
# Warmup Iteration  15: 7581738.390 ops/s
# Warmup Iteration  16: 7582266.272 ops/s
# Warmup Iteration  17: 7583983.579 ops/s
# Warmup Iteration  18: 7579032.303 ops/s
# Warmup Iteration  19: 7586297.117 ops/s
# Warmup Iteration  20: 7583527.905 ops/s
# Warmup Iteration  21: 7586325.261 ops/s
# Warmup Iteration  22: 7575771.344 ops/s
# Warmup Iteration  23: 7587068.757 ops/s
# Warmup Iteration  24: 7573512.818 ops/s
# Warmup Iteration  25: 7585248.649 ops/s
# Warmup Iteration  26: 7581572.098 ops/s
# Warmup Iteration  27: 7574857.799 ops/s
# Warmup Iteration  28: 7584598.991 ops/s
# Warmup Iteration  29: 7584706.761 ops/s
# Warmup Iteration  30: 7582508.413 ops/s
Iteration   1: 7569970.668 ops/s
Iteration   2: 7580814.552 ops/s
Iteration   3: 7591063.026 ops/s
Iteration   4: 7577262.911 ops/s
Iteration   5: 7571767.322 ops/s
Iteration   6: 7579434.652 ops/s
Iteration   7: 7596610.570 ops/s
Iteration   8: 7555299.217 ops/s
Iteration   9: 7571229.604 ops/s
Iteration  10: 7589624.557 ops/s
Iteration  11: 7577794.983 ops/s
Iteration  12: 7573884.755 ops/s
Iteration  13: 7564267.746 ops/s
Iteration  14: 7591133.045 ops/s
Iteration  15: 7573934.347 ops/s
Iteration  16: 7575752.384 ops/s
Iteration  17: 7565957.160 ops/s
Iteration  18: 7577787.527 ops/s
Iteration  19: 7573023.739 ops/s
Iteration  20: 7575827.091 ops/s
Iteration  21: 7594379.159 ops/s
Iteration  22: 7581691.205 ops/s
Iteration  23: 7551688.295 ops/s
Iteration  24: 7535304.846 ops/s
Iteration  25: 7600965.709 ops/s
Iteration  26: 7583321.143 ops/s
Iteration  27: 7580984.259 ops/s
Iteration  28: 7592690.527 ops/s
Iteration  29: 7579351.209 ops/s
Iteration  30: 7581943.872 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_collectInt":
  7577158.669 ±(99.9%) 9179.992 ops/s [Average]
  (min, avg, max) = (7535304.846, 7577158.669, 7600965.709), stdev = 13740.180
  CI (99.9%): [7567978.678, 7586338.661] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_collectInt  thrpt   30  7577158.669 ± 9179.992  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_collectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_collectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3244599.521 ops/s
# Warmup Iteration   2: 6956658.784 ops/s
# Warmup Iteration   3: 7368023.331 ops/s
# Warmup Iteration   4: 7394197.331 ops/s
# Warmup Iteration   5: 6129824.793 ops/s
# Warmup Iteration   6: 7391727.582 ops/s
# Warmup Iteration   7: 7411696.674 ops/s
# Warmup Iteration   8: 7387819.308 ops/s
# Warmup Iteration   9: 7398218.407 ops/s
# Warmup Iteration  10: 7393565.926 ops/s
# Warmup Iteration  11: 7396086.766 ops/s
# Warmup Iteration  12: 7386423.046 ops/s
# Warmup Iteration  13: 7414338.461 ops/s
# Warmup Iteration  14: 7384255.936 ops/s
# Warmup Iteration  15: 7377656.598 ops/s
# Warmup Iteration  16: 7390430.544 ops/s
# Warmup Iteration  17: 7392783.646 ops/s
# Warmup Iteration  18: 7368524.695 ops/s
# Warmup Iteration  19: 7399656.065 ops/s
# Warmup Iteration  20: 7383645.828 ops/s
# Warmup Iteration  21: 7397911.163 ops/s
# Warmup Iteration  22: 7393459.370 ops/s
# Warmup Iteration  23: 7403118.091 ops/s
# Warmup Iteration  24: 7402725.406 ops/s
# Warmup Iteration  25: 7395511.593 ops/s
# Warmup Iteration  26: 7396162.346 ops/s
# Warmup Iteration  27: 7395184.889 ops/s
# Warmup Iteration  28: 7378778.688 ops/s
# Warmup Iteration  29: 7399896.829 ops/s
# Warmup Iteration  30: 7391143.887 ops/s
Iteration   1: 7413327.628 ops/s
Iteration   2: 7391377.348 ops/s
Iteration   3: 7397426.869 ops/s
Iteration   4: 7386271.834 ops/s
Iteration   5: 7416436.365 ops/s
Iteration   6: 7393498.972 ops/s
Iteration   7: 7402869.859 ops/s
Iteration   8: 7387250.915 ops/s
Iteration   9: 7395050.498 ops/s
Iteration  10: 7389689.168 ops/s
Iteration  11: 7385526.480 ops/s
Iteration  12: 7408990.004 ops/s
Iteration  13: 7388466.100 ops/s
Iteration  14: 7402658.334 ops/s
Iteration  15: 7401938.690 ops/s
Iteration  16: 7399215.212 ops/s
Iteration  17: 7402659.132 ops/s
Iteration  18: 7399665.243 ops/s
Iteration  19: 7384986.454 ops/s
Iteration  20: 7403074.766 ops/s
Iteration  21: 7384527.090 ops/s
Iteration  22: 7376848.211 ops/s
Iteration  23: 7399600.678 ops/s
Iteration  24: 7417020.294 ops/s
Iteration  25: 7401313.463 ops/s
Iteration  26: 7392586.524 ops/s
Iteration  27: 7391137.336 ops/s
Iteration  28: 7397817.898 ops/s
Iteration  29: 7377415.011 ops/s
Iteration  30: 7398133.170 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_collectLong":
  7396225.985 ±(99.9%) 6828.574 ops/s [Average]
  (min, avg, max) = (7376848.211, 7396225.985, 7417020.294), stdev = 10220.689
  CI (99.9%): [7389397.411, 7403054.559] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_collectLong  thrpt   30  7396225.985 ± 6828.574  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_collectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_collectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3400903.575 ops/s
# Warmup Iteration   2: 6487816.857 ops/s
# Warmup Iteration   3: 7069075.164 ops/s
# Warmup Iteration   4: 7103082.949 ops/s
# Warmup Iteration   5: 6041336.840 ops/s
# Warmup Iteration   6: 6935801.780 ops/s
# Warmup Iteration   7: 7094112.784 ops/s
# Warmup Iteration   8: 7092775.151 ops/s
# Warmup Iteration   9: 7105122.824 ops/s
# Warmup Iteration  10: 7108256.498 ops/s
# Warmup Iteration  11: 7107482.148 ops/s
# Warmup Iteration  12: 7099864.988 ops/s
# Warmup Iteration  13: 7105622.254 ops/s
# Warmup Iteration  14: 7104349.085 ops/s
# Warmup Iteration  15: 7110264.503 ops/s
# Warmup Iteration  16: 7103184.080 ops/s
# Warmup Iteration  17: 7100295.992 ops/s
# Warmup Iteration  18: 7102669.888 ops/s
# Warmup Iteration  19: 7104477.586 ops/s
# Warmup Iteration  20: 7088651.111 ops/s
# Warmup Iteration  21: 7107489.897 ops/s
# Warmup Iteration  22: 7110107.107 ops/s
# Warmup Iteration  23: 7105650.433 ops/s
# Warmup Iteration  24: 7107358.222 ops/s
# Warmup Iteration  25: 7110069.370 ops/s
# Warmup Iteration  26: 7109216.465 ops/s
# Warmup Iteration  27: 7105120.430 ops/s
# Warmup Iteration  28: 7101917.611 ops/s
# Warmup Iteration  29: 7110804.448 ops/s
# Warmup Iteration  30: 7107386.021 ops/s
Iteration   1: 7103653.723 ops/s
Iteration   2: 7102566.116 ops/s
Iteration   3: 7111427.332 ops/s
Iteration   4: 7103401.521 ops/s
Iteration   5: 7118141.884 ops/s
Iteration   6: 7104331.962 ops/s
Iteration   7: 7103893.543 ops/s
Iteration   8: 7117999.472 ops/s
Iteration   9: 7112627.237 ops/s
Iteration  10: 7111197.810 ops/s
Iteration  11: 7116820.338 ops/s
Iteration  12: 7102879.968 ops/s
Iteration  13: 7090473.236 ops/s
Iteration  14: 7121361.839 ops/s
Iteration  15: 7121313.444 ops/s
Iteration  16: 7104764.148 ops/s
Iteration  17: 7099082.561 ops/s
Iteration  18: 7099216.550 ops/s
Iteration  19: 7118879.286 ops/s
Iteration  20: 7109076.023 ops/s
Iteration  21: 7100208.826 ops/s
Iteration  22: 7110337.924 ops/s
Iteration  23: 7105372.038 ops/s
Iteration  24: 7114586.602 ops/s
Iteration  25: 7119199.770 ops/s
Iteration  26: 7101898.984 ops/s
Iteration  27: 7115100.670 ops/s
Iteration  28: 7105905.528 ops/s
Iteration  29: 7103962.336 ops/s
Iteration  30: 7108912.201 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_collectShort":
  7108619.762 ±(99.9%) 5174.123 ops/s [Average]
  (min, avg, max) = (7090473.236, 7108619.762, 7121361.839), stdev = 7744.384
  CI (99.9%): [7103445.639, 7113793.885] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_collectShort  thrpt   30  7108619.762 ± 5174.123  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_collectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_collectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1780940.105 ops/s
# Warmup Iteration   2: 4002623.421 ops/s
# Warmup Iteration   3: 3404940.668 ops/s
# Warmup Iteration   4: 4065987.253 ops/s
# Warmup Iteration   5: 4069832.874 ops/s
# Warmup Iteration   6: 4061395.275 ops/s
# Warmup Iteration   7: 4073568.895 ops/s
# Warmup Iteration   8: 4055910.477 ops/s
# Warmup Iteration   9: 4061009.596 ops/s
# Warmup Iteration  10: 4070252.431 ops/s
# Warmup Iteration  11: 4056987.690 ops/s
# Warmup Iteration  12: 4061739.672 ops/s
# Warmup Iteration  13: 4069766.085 ops/s
# Warmup Iteration  14: 4053258.366 ops/s
# Warmup Iteration  15: 4034232.863 ops/s
# Warmup Iteration  16: 4065384.976 ops/s
# Warmup Iteration  17: 4049071.170 ops/s
# Warmup Iteration  18: 4060378.368 ops/s
# Warmup Iteration  19: 4060011.795 ops/s
# Warmup Iteration  20: 4062320.884 ops/s
# Warmup Iteration  21: 4057799.856 ops/s
# Warmup Iteration  22: 4056205.354 ops/s
# Warmup Iteration  23: 4059368.867 ops/s
# Warmup Iteration  24: 4055098.844 ops/s
# Warmup Iteration  25: 4050461.440 ops/s
# Warmup Iteration  26: 4050066.894 ops/s
# Warmup Iteration  27: 4060666.160 ops/s
# Warmup Iteration  28: 4064765.171 ops/s
# Warmup Iteration  29: 4061516.362 ops/s
# Warmup Iteration  30: 4063616.087 ops/s
Iteration   1: 4062231.498 ops/s
Iteration   2: 4062250.929 ops/s
Iteration   3: 4049828.724 ops/s
Iteration   4: 4049759.714 ops/s
Iteration   5: 4028767.373 ops/s
Iteration   6: 4033621.422 ops/s
Iteration   7: 4038817.411 ops/s
Iteration   8: 4022750.793 ops/s
Iteration   9: 4028016.151 ops/s
Iteration  10: 4031790.412 ops/s
Iteration  11: 4028753.640 ops/s
Iteration  12: 4055060.050 ops/s
Iteration  13: 4051655.336 ops/s
Iteration  14: 4060655.948 ops/s
Iteration  15: 4065024.856 ops/s
Iteration  16: 4056324.475 ops/s
Iteration  17: 4047276.553 ops/s
Iteration  18: 4052581.710 ops/s
Iteration  19: 4060614.103 ops/s
Iteration  20: 4051039.693 ops/s
Iteration  21: 4063112.395 ops/s
Iteration  22: 4057035.808 ops/s
Iteration  23: 4050785.013 ops/s
Iteration  24: 4060040.307 ops/s
Iteration  25: 4061851.769 ops/s
Iteration  26: 4063574.950 ops/s
Iteration  27: 4051609.919 ops/s
Iteration  28: 4061387.962 ops/s
Iteration  29: 4062175.286 ops/s
Iteration  30: 4056817.672 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_collectWith":
  4050840.396 ±(99.9%) 8452.486 ops/s [Average]
  (min, avg, max) = (4022750.793, 4050840.396, 4065024.856), stdev = 12651.284
  CI (99.9%): [4042387.910, 4059292.882] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_collectWith  thrpt   30  4050840.396 ± 8452.486  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_collectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_collectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3026171.830 ops/s
# Warmup Iteration   2: 7095808.215 ops/s
# Warmup Iteration   3: 6066344.727 ops/s
# Warmup Iteration   4: 7210262.543 ops/s
# Warmup Iteration   5: 7216053.736 ops/s
# Warmup Iteration   6: 7208593.089 ops/s
# Warmup Iteration   7: 7217771.417 ops/s
# Warmup Iteration   8: 7204064.043 ops/s
# Warmup Iteration   9: 7204617.036 ops/s
# Warmup Iteration  10: 7202690.288 ops/s
# Warmup Iteration  11: 7203007.208 ops/s
# Warmup Iteration  12: 7210916.640 ops/s
# Warmup Iteration  13: 7220389.892 ops/s
# Warmup Iteration  14: 7197508.106 ops/s
# Warmup Iteration  15: 7209981.258 ops/s
# Warmup Iteration  16: 7208438.711 ops/s
# Warmup Iteration  17: 7215420.518 ops/s
# Warmup Iteration  18: 7199703.559 ops/s
# Warmup Iteration  19: 7203962.244 ops/s
# Warmup Iteration  20: 7208987.569 ops/s
# Warmup Iteration  21: 7187054.462 ops/s
# Warmup Iteration  22: 7189175.775 ops/s
# Warmup Iteration  23: 7199618.026 ops/s
# Warmup Iteration  24: 7185277.059 ops/s
# Warmup Iteration  25: 7188844.380 ops/s
# Warmup Iteration  26: 7208062.830 ops/s
# Warmup Iteration  27: 7194385.447 ops/s
# Warmup Iteration  28: 7206106.855 ops/s
# Warmup Iteration  29: 7196085.639 ops/s
# Warmup Iteration  30: 7192860.131 ops/s
Iteration   1: 7225105.825 ops/s
Iteration   2: 7204497.400 ops/s
Iteration   3: 7160428.932 ops/s
Iteration   4: 7198334.890 ops/s
Iteration   5: 7194417.887 ops/s
Iteration   6: 7194407.141 ops/s
Iteration   7: 7208529.774 ops/s
Iteration   8: 7194306.428 ops/s
Iteration   9: 7200583.621 ops/s
Iteration  10: 7212451.355 ops/s
Iteration  11: 7219564.958 ops/s
Iteration  12: 7214475.446 ops/s
Iteration  13: 7207429.633 ops/s
Iteration  14: 7209436.612 ops/s
Iteration  15: 7195048.469 ops/s
Iteration  16: 7206042.475 ops/s
Iteration  17: 7188071.546 ops/s
Iteration  18: 7202725.065 ops/s
Iteration  19: 7188255.921 ops/s
Iteration  20: 7174163.913 ops/s
Iteration  21: 7199536.769 ops/s
Iteration  22: 7209970.646 ops/s
Iteration  23: 7189413.407 ops/s
Iteration  24: 7203712.874 ops/s
Iteration  25: 7207939.159 ops/s
Iteration  26: 7193444.760 ops/s
Iteration  27: 7210545.838 ops/s
Iteration  28: 7178697.069 ops/s
Iteration  29: 7208052.174 ops/s
Iteration  30: 7198398.771 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_collectWithIndex":
  7199932.959 ±(99.9%) 8996.836 ops/s [Average]
  (min, avg, max) = (7160428.932, 7199932.959, 7225105.825), stdev = 13466.042
  CI (99.9%): [7190936.122, 7208929.795] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_collectWithIndex  thrpt   30  7199932.959 ± 8996.836  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_collectWithIndexWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_collectWithIndexWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 683680.176 ops/s
# Warmup Iteration   2: 1919411.329 ops/s
# Warmup Iteration   3: 2002392.387 ops/s
# Warmup Iteration   4: 1674725.580 ops/s
# Warmup Iteration   5: 2008880.490 ops/s
# Warmup Iteration   6: 2006497.347 ops/s
# Warmup Iteration   7: 2003047.595 ops/s
# Warmup Iteration   8: 2001028.113 ops/s
# Warmup Iteration   9: 2006861.465 ops/s
# Warmup Iteration  10: 2006391.129 ops/s
# Warmup Iteration  11: 2007395.667 ops/s
# Warmup Iteration  12: 2006720.779 ops/s
# Warmup Iteration  13: 2010209.025 ops/s
# Warmup Iteration  14: 2010763.714 ops/s
# Warmup Iteration  15: 2012620.864 ops/s
# Warmup Iteration  16: 2009220.289 ops/s
# Warmup Iteration  17: 2007247.347 ops/s
# Warmup Iteration  18: 2011238.530 ops/s
# Warmup Iteration  19: 2010626.875 ops/s
# Warmup Iteration  20: 2008681.747 ops/s
# Warmup Iteration  21: 2011912.775 ops/s
# Warmup Iteration  22: 2011209.773 ops/s
# Warmup Iteration  23: 2014325.215 ops/s
# Warmup Iteration  24: 2012502.993 ops/s
# Warmup Iteration  25: 2013010.150 ops/s
# Warmup Iteration  26: 2012640.900 ops/s
# Warmup Iteration  27: 2009833.178 ops/s
# Warmup Iteration  28: 2012521.629 ops/s
# Warmup Iteration  29: 2015761.503 ops/s
# Warmup Iteration  30: 2014105.678 ops/s
Iteration   1: 2012021.561 ops/s
Iteration   2: 2011624.568 ops/s
Iteration   3: 2011737.052 ops/s
Iteration   4: 2012349.987 ops/s
Iteration   5: 2009046.107 ops/s
Iteration   6: 2012461.572 ops/s
Iteration   7: 2014860.997 ops/s
Iteration   8: 2013115.326 ops/s
Iteration   9: 2014542.198 ops/s
Iteration  10: 2011866.088 ops/s
Iteration  11: 2013052.607 ops/s
Iteration  12: 2010830.179 ops/s
Iteration  13: 2010284.185 ops/s
Iteration  14: 2013307.774 ops/s
Iteration  15: 2012414.300 ops/s
Iteration  16: 2012495.804 ops/s
Iteration  17: 2011043.012 ops/s
Iteration  18: 1990359.956 ops/s
Iteration  19: 1990542.296 ops/s
Iteration  20: 2004960.334 ops/s
Iteration  21: 2004509.028 ops/s
Iteration  22: 2012723.463 ops/s
Iteration  23: 2010994.401 ops/s
Iteration  24: 2010210.862 ops/s
Iteration  25: 2015202.341 ops/s
Iteration  26: 2011641.528 ops/s
Iteration  27: 2010539.345 ops/s
Iteration  28: 2010844.488 ops/s
Iteration  29: 2009871.440 ops/s
Iteration  30: 2007907.581 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_collectWithIndexWithTarget":
  2009912.013 ±(99.9%) 3878.147 ops/s [Average]
  (min, avg, max) = (1990359.956, 2009912.013, 2015202.341), stdev = 5804.628
  CI (99.9%): [2006033.866, 2013790.159] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score      Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_collectWithIndexWithTarget  thrpt   30  2009912.013 ± 3878.147  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_collectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_collectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2107090.130 ops/s
# Warmup Iteration   2: 4756504.291 ops/s
# Warmup Iteration   3: 4018845.147 ops/s
# Warmup Iteration   4: 4785984.824 ops/s
# Warmup Iteration   5: 4781171.055 ops/s
# Warmup Iteration   6: 4769418.981 ops/s
# Warmup Iteration   7: 4776853.031 ops/s
# Warmup Iteration   8: 4785656.402 ops/s
# Warmup Iteration   9: 4780049.273 ops/s
# Warmup Iteration  10: 4783118.544 ops/s
# Warmup Iteration  11: 4780186.972 ops/s
# Warmup Iteration  12: 4785411.641 ops/s
# Warmup Iteration  13: 4776638.672 ops/s
# Warmup Iteration  14: 4779352.074 ops/s
# Warmup Iteration  15: 4782916.301 ops/s
# Warmup Iteration  16: 4768965.661 ops/s
# Warmup Iteration  17: 4777969.835 ops/s
# Warmup Iteration  18: 4782208.385 ops/s
# Warmup Iteration  19: 4780933.799 ops/s
# Warmup Iteration  20: 4779068.735 ops/s
# Warmup Iteration  21: 4780628.442 ops/s
# Warmup Iteration  22: 4776478.475 ops/s
# Warmup Iteration  23: 4771286.741 ops/s
# Warmup Iteration  24: 4771090.444 ops/s
# Warmup Iteration  25: 4782010.862 ops/s
# Warmup Iteration  26: 4777529.869 ops/s
# Warmup Iteration  27: 4770107.805 ops/s
# Warmup Iteration  28: 4780344.439 ops/s
# Warmup Iteration  29: 4790469.817 ops/s
# Warmup Iteration  30: 4780121.338 ops/s
Iteration   1: 4785183.311 ops/s
Iteration   2: 4722871.499 ops/s
Iteration   3: 4492949.522 ops/s
Iteration   4: 4795886.944 ops/s
Iteration   5: 4783812.232 ops/s
Iteration   6: 4768628.801 ops/s
Iteration   7: 4782732.156 ops/s
Iteration   8: 4777064.310 ops/s
Iteration   9: 4791187.185 ops/s
Iteration  10: 4771923.928 ops/s
Iteration  11: 4776846.155 ops/s
Iteration  12: 4781535.424 ops/s
Iteration  13: 4779887.904 ops/s
Iteration  14: 4778922.153 ops/s
Iteration  15: 4785977.597 ops/s
Iteration  16: 4778562.047 ops/s
Iteration  17: 4779863.342 ops/s
Iteration  18: 4768475.114 ops/s
Iteration  19: 4782347.639 ops/s
Iteration  20: 4774091.165 ops/s
Iteration  21: 4790321.903 ops/s
Iteration  22: 4770637.447 ops/s
Iteration  23: 4784594.631 ops/s
Iteration  24: 4783055.522 ops/s
Iteration  25: 4783389.121 ops/s
Iteration  26: 4767362.943 ops/s
Iteration  27: 4788442.131 ops/s
Iteration  28: 4773563.218 ops/s
Iteration  29: 4784676.959 ops/s
Iteration  30: 4784854.408 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_collectWith_target":
  4768988.224 ±(99.9%) 35835.793 ops/s [Average]
  (min, avg, max) = (4492949.522, 4768988.224, 4795886.944), stdev = 53637.332
  CI (99.9%): [4733152.431, 4804824.017] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_collectWith_target  thrpt   30  4768988.224 ± 35835.793  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_collect_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_collect_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4624378.466 ops/s
# Warmup Iteration   2: 9238365.907 ops/s
# Warmup Iteration   3: 7793425.244 ops/s
# Warmup Iteration   4: 9242379.104 ops/s
# Warmup Iteration   5: 9233761.922 ops/s
# Warmup Iteration   6: 9232113.732 ops/s
# Warmup Iteration   7: 9204590.985 ops/s
# Warmup Iteration   8: 9226650.619 ops/s
# Warmup Iteration   9: 9232052.875 ops/s
# Warmup Iteration  10: 9225233.414 ops/s
# Warmup Iteration  11: 9247516.335 ops/s
# Warmup Iteration  12: 9231068.202 ops/s
# Warmup Iteration  13: 9233552.540 ops/s
# Warmup Iteration  14: 9235737.929 ops/s
# Warmup Iteration  15: 9254762.440 ops/s
# Warmup Iteration  16: 9239928.508 ops/s
# Warmup Iteration  17: 9219612.858 ops/s
# Warmup Iteration  18: 9220945.960 ops/s
# Warmup Iteration  19: 9226250.504 ops/s
# Warmup Iteration  20: 9258714.252 ops/s
# Warmup Iteration  21: 9215175.979 ops/s
# Warmup Iteration  22: 9211208.054 ops/s
# Warmup Iteration  23: 9233196.847 ops/s
# Warmup Iteration  24: 9217203.243 ops/s
# Warmup Iteration  25: 9208177.233 ops/s
# Warmup Iteration  26: 9209269.480 ops/s
# Warmup Iteration  27: 9215385.530 ops/s
# Warmup Iteration  28: 9217377.259 ops/s
# Warmup Iteration  29: 9230810.912 ops/s
# Warmup Iteration  30: 9222230.617 ops/s
Iteration   1: 9201498.362 ops/s
Iteration   2: 9215443.878 ops/s
Iteration   3: 9244655.577 ops/s
Iteration   4: 9245037.604 ops/s
Iteration   5: 9196806.566 ops/s
Iteration   6: 9215405.111 ops/s
Iteration   7: 9215811.162 ops/s
Iteration   8: 9199459.039 ops/s
Iteration   9: 9227366.234 ops/s
Iteration  10: 9208560.090 ops/s
Iteration  11: 9203875.718 ops/s
Iteration  12: 9217463.885 ops/s
Iteration  13: 9212910.394 ops/s
Iteration  14: 9213204.969 ops/s
Iteration  15: 9193752.670 ops/s
Iteration  16: 9243763.170 ops/s
Iteration  17: 9198417.187 ops/s
Iteration  18: 9160499.561 ops/s
Iteration  19: 9231431.527 ops/s
Iteration  20: 9241442.403 ops/s
Iteration  21: 9223619.700 ops/s
Iteration  22: 9230428.279 ops/s
Iteration  23: 9221456.702 ops/s
Iteration  24: 9232453.055 ops/s
Iteration  25: 9208585.029 ops/s
Iteration  26: 9227040.588 ops/s
Iteration  27: 9218349.801 ops/s
Iteration  28: 9223657.763 ops/s
Iteration  29: 9234591.385 ops/s
Iteration  30: 9229807.459 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_collect_target":
  9217893.162 ±(99.9%) 12184.661 ops/s [Average]
  (min, avg, max) = (9160499.561, 9217893.162, 9245037.604), stdev = 18237.429
  CI (99.9%): [9205708.501, 9230077.824] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_collect_target  thrpt   30  9217893.162 ± 12184.661  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5056299.589 ops/s
# Warmup Iteration   2: 10213103.054 ops/s
# Warmup Iteration   3: 9814573.764 ops/s
# Warmup Iteration   4: 8646620.112 ops/s
# Warmup Iteration   5: 9470025.458 ops/s
# Warmup Iteration   6: 9822103.753 ops/s
# Warmup Iteration   7: 9840347.791 ops/s
# Warmup Iteration   8: 9839874.788 ops/s
# Warmup Iteration   9: 9832512.646 ops/s
# Warmup Iteration  10: 9831488.393 ops/s
# Warmup Iteration  11: 9833669.486 ops/s
# Warmup Iteration  12: 9835130.730 ops/s
# Warmup Iteration  13: 9839732.365 ops/s
# Warmup Iteration  14: 9838092.454 ops/s
# Warmup Iteration  15: 9840531.926 ops/s
# Warmup Iteration  16: 9837809.451 ops/s
# Warmup Iteration  17: 9849489.565 ops/s
# Warmup Iteration  18: 9351292.706 ops/s
# Warmup Iteration  19: 9835439.369 ops/s
# Warmup Iteration  20: 9836643.144 ops/s
# Warmup Iteration  21: 9836936.889 ops/s
# Warmup Iteration  22: 9823158.938 ops/s
# Warmup Iteration  23: 9818064.001 ops/s
# Warmup Iteration  24: 9847818.121 ops/s
# Warmup Iteration  25: 9838933.042 ops/s
# Warmup Iteration  26: 9838926.126 ops/s
# Warmup Iteration  27: 9549238.787 ops/s
# Warmup Iteration  28: 9058703.000 ops/s
# Warmup Iteration  29: 9828995.570 ops/s
# Warmup Iteration  30: 9827738.377 ops/s
Iteration   1: 9851055.089 ops/s
Iteration   2: 9843358.085 ops/s
Iteration   3: 9815368.192 ops/s
Iteration   4: 9817774.947 ops/s
Iteration   5: 9823748.991 ops/s
Iteration   6: 9847602.300 ops/s
Iteration   7: 9817298.861 ops/s
Iteration   8: 9827734.519 ops/s
Iteration   9: 9826558.444 ops/s
Iteration  10: 9828670.783 ops/s
Iteration  11: 9845347.383 ops/s
Iteration  12: 9807053.846 ops/s
Iteration  13: 9814819.178 ops/s
Iteration  14: 9832541.230 ops/s
Iteration  15: 9835594.143 ops/s
Iteration  16: 9850610.733 ops/s
Iteration  17: 9830431.304 ops/s
Iteration  18: 9809108.724 ops/s
Iteration  19: 9816508.340 ops/s
Iteration  20: 9839043.257 ops/s
Iteration  21: 9856342.537 ops/s
Iteration  22: 9834235.549 ops/s
Iteration  23: 9838496.750 ops/s
Iteration  24: 9840752.276 ops/s
Iteration  25: 9847855.069 ops/s
Iteration  26: 9860016.476 ops/s
Iteration  27: 9841337.956 ops/s
Iteration  28: 9792638.405 ops/s
Iteration  29: 9804818.025 ops/s
Iteration  30: 9812324.260 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_contains":
  9830301.522 ±(99.9%) 11273.948 ops/s [Average]
  (min, avg, max) = (9792638.405, 9830301.522, 9860016.476), stdev = 16874.317
  CI (99.9%): [9819027.573, 9841575.470] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_contains  thrpt   30  9830301.522 ± 11273.948  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_containsAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_containsAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6038414.236 ops/s
# Warmup Iteration   2: 12685357.901 ops/s
# Warmup Iteration   3: 10815718.137 ops/s
# Warmup Iteration   4: 11950965.981 ops/s
# Warmup Iteration   5: 12330041.406 ops/s
# Warmup Iteration   6: 12292910.303 ops/s
# Warmup Iteration   7: 12310320.458 ops/s
# Warmup Iteration   8: 12349064.243 ops/s
# Warmup Iteration   9: 12315813.940 ops/s
# Warmup Iteration  10: 12300880.146 ops/s
# Warmup Iteration  11: 12315898.126 ops/s
# Warmup Iteration  12: 12342274.239 ops/s
# Warmup Iteration  13: 12325549.989 ops/s
# Warmup Iteration  14: 12278672.921 ops/s
# Warmup Iteration  15: 12313543.078 ops/s
# Warmup Iteration  16: 12306158.524 ops/s
# Warmup Iteration  17: 12358060.804 ops/s
# Warmup Iteration  18: 12360516.512 ops/s
# Warmup Iteration  19: 12380787.573 ops/s
# Warmup Iteration  20: 12352953.301 ops/s
# Warmup Iteration  21: 12352289.143 ops/s
# Warmup Iteration  22: 12358947.843 ops/s
# Warmup Iteration  23: 12377922.344 ops/s
# Warmup Iteration  24: 12380292.489 ops/s
# Warmup Iteration  25: 12407587.769 ops/s
# Warmup Iteration  26: 12391695.802 ops/s
# Warmup Iteration  27: 12378711.740 ops/s
# Warmup Iteration  28: 12374768.664 ops/s
# Warmup Iteration  29: 12381176.458 ops/s
# Warmup Iteration  30: 12380738.227 ops/s
Iteration   1: 12364820.954 ops/s
Iteration   2: 12350165.259 ops/s
Iteration   3: 11479672.268 ops/s
Iteration   4: 12368654.395 ops/s
Iteration   5: 12386205.587 ops/s
Iteration   6: 12410123.501 ops/s
Iteration   7: 12399921.353 ops/s
Iteration   8: 12397020.224 ops/s
Iteration   9: 12388903.116 ops/s
Iteration  10: 12389179.106 ops/s
Iteration  11: 12358378.006 ops/s
Iteration  12: 12331293.913 ops/s
Iteration  13: 12346730.011 ops/s
Iteration  14: 12399880.848 ops/s
Iteration  15: 12382149.565 ops/s
Iteration  16: 12393768.425 ops/s
Iteration  17: 12381392.979 ops/s
Iteration  18: 12374287.899 ops/s
Iteration  19: 12361399.404 ops/s
Iteration  20: 12379355.068 ops/s
Iteration  21: 12356360.686 ops/s
Iteration  22: 12379319.371 ops/s
Iteration  23: 12383743.995 ops/s
Iteration  24: 12378345.895 ops/s
Iteration  25: 12371667.959 ops/s
Iteration  26: 12391723.257 ops/s
Iteration  27: 12383479.796 ops/s
Iteration  28: 12363042.329 ops/s
Iteration  29: 12362157.335 ops/s
Iteration  30: 12372862.646 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_containsAll":
  12346200.172 ±(99.9%) 109973.463 ops/s [Average]
  (min, avg, max) = (11479672.268, 12346200.172, 12410123.501), stdev = 164603.114
  CI (99.9%): [12236226.709, 12456173.634] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score        Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_containsAll  thrpt   30  12346200.172 ± 109973.463  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 22226908.430 ops/s
# Warmup Iteration   2: 44409746.453 ops/s
# Warmup Iteration   3: 39493108.416 ops/s
# Warmup Iteration   4: 42324539.769 ops/s
# Warmup Iteration   5: 44289719.722 ops/s
# Warmup Iteration   6: 44229517.346 ops/s
# Warmup Iteration   7: 44314834.092 ops/s
# Warmup Iteration   8: 44250930.583 ops/s
# Warmup Iteration   9: 44288981.341 ops/s
# Warmup Iteration  10: 44255453.782 ops/s
# Warmup Iteration  11: 44263010.836 ops/s
# Warmup Iteration  12: 44277899.977 ops/s
# Warmup Iteration  13: 44193634.561 ops/s
# Warmup Iteration  14: 44257106.538 ops/s
# Warmup Iteration  15: 44298070.118 ops/s
# Warmup Iteration  16: 44294079.749 ops/s
# Warmup Iteration  17: 44299641.383 ops/s
# Warmup Iteration  18: 44293453.980 ops/s
# Warmup Iteration  19: 44299982.773 ops/s
# Warmup Iteration  20: 44227446.462 ops/s
# Warmup Iteration  21: 44135312.795 ops/s
# Warmup Iteration  22: 44322197.904 ops/s
# Warmup Iteration  23: 44314569.856 ops/s
# Warmup Iteration  24: 44298949.361 ops/s
# Warmup Iteration  25: 44300687.231 ops/s
# Warmup Iteration  26: 44254454.287 ops/s
# Warmup Iteration  27: 44291350.433 ops/s
# Warmup Iteration  28: 44322859.893 ops/s
# Warmup Iteration  29: 44283146.720 ops/s
# Warmup Iteration  30: 44256317.037 ops/s
Iteration   1: 44306612.120 ops/s
Iteration   2: 44277089.656 ops/s
Iteration   3: 44168953.026 ops/s
Iteration   4: 44296588.555 ops/s
Iteration   5: 44316095.008 ops/s
Iteration   6: 44294225.476 ops/s
Iteration   7: 44319391.470 ops/s
Iteration   8: 44313323.063 ops/s
Iteration   9: 44241327.004 ops/s
Iteration  10: 44354078.143 ops/s
Iteration  11: 44285297.851 ops/s
Iteration  12: 44329853.819 ops/s
Iteration  13: 44289476.565 ops/s
Iteration  14: 44279051.552 ops/s
Iteration  15: 44264018.917 ops/s
Iteration  16: 44296033.432 ops/s
Iteration  17: 44274069.081 ops/s
Iteration  18: 44373916.374 ops/s
Iteration  19: 44264731.980 ops/s
Iteration  20: 44370997.908 ops/s
Iteration  21: 44338158.830 ops/s
Iteration  22: 44249479.171 ops/s
Iteration  23: 44301488.752 ops/s
Iteration  24: 44291575.830 ops/s
Iteration  25: 44315154.027 ops/s
Iteration  26: 44278418.281 ops/s
Iteration  27: 44247442.456 ops/s
Iteration  28: 44358254.158 ops/s
Iteration  29: 44331966.468 ops/s
Iteration  30: 44345416.961 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_containsAllArray":
  44299082.864 ±(99.9%) 28922.579 ops/s [Average]
  (min, avg, max) = (44168953.026, 44299082.864, 44373916.374), stdev = 43289.957
  CI (99.9%): [44270160.286, 44328005.443] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_containsAllArray  thrpt   30  44299082.864 ± 28922.579  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8433984.523 ops/s
# Warmup Iteration   2: 15319431.414 ops/s
# Warmup Iteration   3: 16162586.653 ops/s
# Warmup Iteration   4: 16264631.382 ops/s
# Warmup Iteration   5: 13685662.694 ops/s
# Warmup Iteration   6: 16273044.813 ops/s
# Warmup Iteration   7: 16258270.427 ops/s
# Warmup Iteration   8: 16268730.801 ops/s
# Warmup Iteration   9: 16190234.847 ops/s
# Warmup Iteration  10: 16272187.063 ops/s
# Warmup Iteration  11: 16251676.827 ops/s
# Warmup Iteration  12: 16207651.993 ops/s
# Warmup Iteration  13: 16192390.399 ops/s
# Warmup Iteration  14: 16208826.573 ops/s
# Warmup Iteration  15: 16265926.813 ops/s
# Warmup Iteration  16: 16245785.383 ops/s
# Warmup Iteration  17: 16257069.169 ops/s
# Warmup Iteration  18: 16261258.710 ops/s
# Warmup Iteration  19: 16248651.086 ops/s
# Warmup Iteration  20: 16258097.417 ops/s
# Warmup Iteration  21: 16270124.381 ops/s
# Warmup Iteration  22: 16264209.208 ops/s
# Warmup Iteration  23: 16249494.516 ops/s
# Warmup Iteration  24: 16248889.824 ops/s
# Warmup Iteration  25: 16263703.405 ops/s
# Warmup Iteration  26: 16276722.477 ops/s
# Warmup Iteration  27: 16255672.621 ops/s
# Warmup Iteration  28: 16255048.046 ops/s
# Warmup Iteration  29: 16272391.547 ops/s
# Warmup Iteration  30: 16270553.542 ops/s
Iteration   1: 16272343.832 ops/s
Iteration   2: 16260212.498 ops/s
Iteration   3: 16254261.726 ops/s
Iteration   4: 16265751.131 ops/s
Iteration   5: 16255001.438 ops/s
Iteration   6: 16293973.361 ops/s
Iteration   7: 16264462.646 ops/s
Iteration   8: 16258491.482 ops/s
Iteration   9: 16284645.838 ops/s
Iteration  10: 16258942.000 ops/s
Iteration  11: 16287159.848 ops/s
Iteration  12: 16253622.474 ops/s
Iteration  13: 16261464.593 ops/s
Iteration  14: 16288901.357 ops/s
Iteration  15: 16255832.566 ops/s
Iteration  16: 16253303.564 ops/s
Iteration  17: 16274475.491 ops/s
Iteration  18: 16265554.693 ops/s
Iteration  19: 16247024.340 ops/s
Iteration  20: 16274787.317 ops/s
Iteration  21: 16254233.527 ops/s
Iteration  22: 16290786.013 ops/s
Iteration  23: 16261836.752 ops/s
Iteration  24: 16249326.406 ops/s
Iteration  25: 16289555.056 ops/s
Iteration  26: 16248382.148 ops/s
Iteration  27: 16284175.880 ops/s
Iteration  28: 16282383.394 ops/s
Iteration  29: 16267823.056 ops/s
Iteration  30: 16269093.757 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_containsAllIterable":
  16267593.606 ±(99.9%) 9561.920 ops/s [Average]
  (min, avg, max) = (16247024.340, 16267593.606, 16293973.361), stdev = 14311.832
  CI (99.9%): [16258031.686, 16277155.526] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt         Score      Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_containsAllIterable  thrpt   30  16267593.606 ± 9561.920  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_corresponds$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_corresponds

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8351923.592 ops/s
# Warmup Iteration   2: 17046027.452 ops/s
# Warmup Iteration   3: 17440905.075 ops/s
# Warmup Iteration   4: 17497115.625 ops/s
# Warmup Iteration   5: 14791037.937 ops/s
# Warmup Iteration   6: 17508661.748 ops/s
# Warmup Iteration   7: 17512649.944 ops/s
# Warmup Iteration   8: 17488647.780 ops/s
# Warmup Iteration   9: 17504560.174 ops/s
# Warmup Iteration  10: 17496193.048 ops/s
# Warmup Iteration  11: 17516489.622 ops/s
# Warmup Iteration  12: 17506844.293 ops/s
# Warmup Iteration  13: 17515342.193 ops/s
# Warmup Iteration  14: 17503492.243 ops/s
# Warmup Iteration  15: 17531535.547 ops/s
# Warmup Iteration  16: 17504457.832 ops/s
# Warmup Iteration  17: 17550866.575 ops/s
# Warmup Iteration  18: 17491864.082 ops/s
# Warmup Iteration  19: 17510023.029 ops/s
# Warmup Iteration  20: 17512609.539 ops/s
# Warmup Iteration  21: 17500083.775 ops/s
# Warmup Iteration  22: 17517378.201 ops/s
# Warmup Iteration  23: 17497617.401 ops/s
# Warmup Iteration  24: 17532339.666 ops/s
# Warmup Iteration  25: 17504558.433 ops/s
# Warmup Iteration  26: 17508739.312 ops/s
# Warmup Iteration  27: 17480509.907 ops/s
# Warmup Iteration  28: 17523609.998 ops/s
# Warmup Iteration  29: 17514832.494 ops/s
# Warmup Iteration  30: 17507086.027 ops/s
Iteration   1: 17461399.991 ops/s
Iteration   2: 17495249.844 ops/s
Iteration   3: 17548378.923 ops/s
Iteration   4: 17504339.534 ops/s
Iteration   5: 17501626.387 ops/s
Iteration   6: 17498415.820 ops/s
Iteration   7: 17543030.175 ops/s
Iteration   8: 17523645.988 ops/s
Iteration   9: 17535760.047 ops/s
Iteration  10: 17533108.593 ops/s
Iteration  11: 17555849.831 ops/s
Iteration  12: 17516073.944 ops/s
Iteration  13: 17509466.406 ops/s
Iteration  14: 17555764.761 ops/s
Iteration  15: 17496636.966 ops/s
Iteration  16: 17502364.619 ops/s
Iteration  17: 17502426.606 ops/s
Iteration  18: 17555054.373 ops/s
Iteration  19: 17514391.174 ops/s
Iteration  20: 17494608.987 ops/s
Iteration  21: 17520099.637 ops/s
Iteration  22: 17538484.108 ops/s
Iteration  23: 17525461.549 ops/s
Iteration  24: 17512683.950 ops/s
Iteration  25: 17513074.090 ops/s
Iteration  26: 17531849.422 ops/s
Iteration  27: 17515256.953 ops/s
Iteration  28: 17505751.086 ops/s
Iteration  29: 17548613.229 ops/s
Iteration  30: 17509420.065 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_corresponds":
  17518942.902 ±(99.9%) 14868.145 ops/s [Average]
  (min, avg, max) = (17461399.991, 17518942.902, 17555849.831), stdev = 22253.941
  CI (99.9%): [17504074.757, 17533811.047] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_corresponds  thrpt   30  17518942.902 ± 14868.145  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 40978678.125 ops/s
# Warmup Iteration   2: 80257417.836 ops/s
# Warmup Iteration   3: 73486408.481 ops/s
# Warmup Iteration   4: 85233900.916 ops/s
# Warmup Iteration   5: 85833401.583 ops/s
# Warmup Iteration   6: 85795403.656 ops/s
# Warmup Iteration   7: 85669067.335 ops/s
# Warmup Iteration   8: 85548589.470 ops/s
# Warmup Iteration   9: 85690226.737 ops/s
# Warmup Iteration  10: 85655592.129 ops/s
# Warmup Iteration  11: 85841323.290 ops/s
# Warmup Iteration  12: 85820610.614 ops/s
# Warmup Iteration  13: 85659963.192 ops/s
# Warmup Iteration  14: 85920654.240 ops/s
# Warmup Iteration  15: 85825544.554 ops/s
# Warmup Iteration  16: 85691703.399 ops/s
# Warmup Iteration  17: 85724227.293 ops/s
# Warmup Iteration  18: 85671519.873 ops/s
# Warmup Iteration  19: 85562337.722 ops/s
# Warmup Iteration  20: 85603568.553 ops/s
# Warmup Iteration  21: 85721248.052 ops/s
# Warmup Iteration  22: 85853944.928 ops/s
# Warmup Iteration  23: 85709999.504 ops/s
# Warmup Iteration  24: 85862521.221 ops/s
# Warmup Iteration  25: 84304382.392 ops/s
# Warmup Iteration  26: 85503594.974 ops/s
# Warmup Iteration  27: 85708810.329 ops/s
# Warmup Iteration  28: 85703798.957 ops/s
# Warmup Iteration  29: 85655253.804 ops/s
# Warmup Iteration  30: 85509168.004 ops/s
Iteration   1: 85283020.889 ops/s
Iteration   2: 85713330.610 ops/s
Iteration   3: 85850011.151 ops/s
Iteration   4: 85947163.836 ops/s
Iteration   5: 85820446.990 ops/s
Iteration   6: 85713712.878 ops/s
Iteration   7: 85711205.529 ops/s
Iteration   8: 85734365.029 ops/s
Iteration   9: 85881890.271 ops/s
Iteration  10: 85648201.124 ops/s
Iteration  11: 85676402.869 ops/s
Iteration  12: 85455604.544 ops/s
Iteration  13: 85926906.903 ops/s
Iteration  14: 85989443.183 ops/s
Iteration  15: 85884365.887 ops/s
Iteration  16: 85942929.040 ops/s
Iteration  17: 85866711.355 ops/s
Iteration  18: 85682515.231 ops/s
Iteration  19: 85606855.292 ops/s
Iteration  20: 85916491.165 ops/s
Iteration  21: 85903272.923 ops/s
Iteration  22: 85923598.247 ops/s
Iteration  23: 85786837.510 ops/s
Iteration  24: 85317258.198 ops/s
Iteration  25: 85864869.224 ops/s
Iteration  26: 85661053.999 ops/s
Iteration  27: 85443309.442 ops/s
Iteration  28: 85687246.243 ops/s
Iteration  29: 85659397.012 ops/s
Iteration  30: 85809455.536 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_count":
  85743595.737 ±(99.9%) 122713.265 ops/s [Average]
  (min, avg, max) = (85283020.889, 85743595.737, 85989443.183), stdev = 183671.451
  CI (99.9%): [85620882.472, 85866309.002] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score        Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_count  thrpt   30  85743595.737 ± 122713.265  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_countBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_countBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1084396.539 ops/s
# Warmup Iteration   2: 2289497.321 ops/s
# Warmup Iteration   3: 2517555.911 ops/s
# Warmup Iteration   4: 2534654.728 ops/s
# Warmup Iteration   5: 2088957.598 ops/s
# Warmup Iteration   6: 2541734.927 ops/s
# Warmup Iteration   7: 2542063.958 ops/s
# Warmup Iteration   8: 2536656.070 ops/s
# Warmup Iteration   9: 2535575.471 ops/s
# Warmup Iteration  10: 2537779.811 ops/s
# Warmup Iteration  11: 2534720.456 ops/s
# Warmup Iteration  12: 2534232.747 ops/s
# Warmup Iteration  13: 2530502.840 ops/s
# Warmup Iteration  14: 2537095.260 ops/s
# Warmup Iteration  15: 2534028.481 ops/s
# Warmup Iteration  16: 2534439.185 ops/s
# Warmup Iteration  17: 2531910.845 ops/s
# Warmup Iteration  18: 2534116.995 ops/s
# Warmup Iteration  19: 2535741.212 ops/s
# Warmup Iteration  20: 2533964.674 ops/s
# Warmup Iteration  21: 2535499.538 ops/s
# Warmup Iteration  22: 2537476.339 ops/s
# Warmup Iteration  23: 2538185.728 ops/s
# Warmup Iteration  24: 2538692.142 ops/s
# Warmup Iteration  25: 2540351.686 ops/s
# Warmup Iteration  26: 2536234.663 ops/s
# Warmup Iteration  27: 2535984.129 ops/s
# Warmup Iteration  28: 2539538.248 ops/s
# Warmup Iteration  29: 2537420.280 ops/s
# Warmup Iteration  30: 2535509.014 ops/s
Iteration   1: 2532588.776 ops/s
Iteration   2: 2535852.576 ops/s
Iteration   3: 2537747.428 ops/s
Iteration   4: 2530939.513 ops/s
Iteration   5: 2531178.238 ops/s
Iteration   6: 2529928.525 ops/s
Iteration   7: 2533773.369 ops/s
Iteration   8: 2538452.410 ops/s
Iteration   9: 2529900.609 ops/s
Iteration  10: 2538190.399 ops/s
Iteration  11: 2538396.682 ops/s
Iteration  12: 2537912.513 ops/s
Iteration  13: 2535112.969 ops/s
Iteration  14: 2540805.053 ops/s
Iteration  15: 2527985.894 ops/s
Iteration  16: 2535707.715 ops/s
Iteration  17: 2535465.660 ops/s
Iteration  18: 2544565.455 ops/s
Iteration  19: 2537831.973 ops/s
Iteration  20: 2536435.212 ops/s
Iteration  21: 2537144.284 ops/s
Iteration  22: 2539343.785 ops/s
Iteration  23: 2535115.158 ops/s
Iteration  24: 2538360.489 ops/s
Iteration  25: 2550304.819 ops/s
Iteration  26: 2539450.838 ops/s
Iteration  27: 2536133.616 ops/s
Iteration  28: 2535123.281 ops/s
Iteration  29: 2533683.087 ops/s
Iteration  30: 2535303.231 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_countBy":
  2536291.118 ±(99.9%) 2955.963 ops/s [Average]
  (min, avg, max) = (2527985.894, 2536291.118, 2550304.819), stdev = 4424.346
  CI (99.9%): [2533335.156, 2539247.081] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_countBy  thrpt   30  2536291.118 ± 2955.963  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_countByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_countByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 247745.651 ops/s
# Warmup Iteration   2: 411591.100 ops/s
# Warmup Iteration   3: 491045.108 ops/s
# Warmup Iteration   4: 494952.817 ops/s
# Warmup Iteration   5: 494912.227 ops/s
# Warmup Iteration   6: 478310.694 ops/s
# Warmup Iteration   7: 428290.505 ops/s
# Warmup Iteration   8: 494221.450 ops/s
# Warmup Iteration   9: 494987.750 ops/s
# Warmup Iteration  10: 495372.192 ops/s
# Warmup Iteration  11: 495115.492 ops/s
# Warmup Iteration  12: 495065.062 ops/s
# Warmup Iteration  13: 495348.954 ops/s
# Warmup Iteration  14: 495090.164 ops/s
# Warmup Iteration  15: 495024.208 ops/s
# Warmup Iteration  16: 480125.249 ops/s
# Warmup Iteration  17: 495685.167 ops/s
# Warmup Iteration  18: 495285.985 ops/s
# Warmup Iteration  19: 495271.305 ops/s
# Warmup Iteration  20: 495072.803 ops/s
# Warmup Iteration  21: 495528.978 ops/s
# Warmup Iteration  22: 495576.083 ops/s
# Warmup Iteration  23: 495294.319 ops/s
# Warmup Iteration  24: 495510.089 ops/s
# Warmup Iteration  25: 495171.390 ops/s
# Warmup Iteration  26: 495496.201 ops/s
# Warmup Iteration  27: 495159.239 ops/s
# Warmup Iteration  28: 495599.164 ops/s
# Warmup Iteration  29: 495183.170 ops/s
# Warmup Iteration  30: 495335.933 ops/s
Iteration   1: 495968.843 ops/s
Iteration   2: 494630.238 ops/s
Iteration   3: 495796.243 ops/s
Iteration   4: 493541.324 ops/s
Iteration   5: 496074.095 ops/s
Iteration   6: 494961.038 ops/s
Iteration   7: 496210.799 ops/s
Iteration   8: 495673.701 ops/s
Iteration   9: 495915.859 ops/s
Iteration  10: 495217.514 ops/s
Iteration  11: 495670.180 ops/s
Iteration  12: 495042.231 ops/s
Iteration  13: 495549.688 ops/s
Iteration  14: 494873.197 ops/s
Iteration  15: 495004.709 ops/s
Iteration  16: 495601.763 ops/s
Iteration  17: 495814.546 ops/s
Iteration  18: 495040.127 ops/s
Iteration  19: 496454.033 ops/s
Iteration  20: 494183.642 ops/s
Iteration  21: 495956.480 ops/s
Iteration  22: 491063.919 ops/s
Iteration  23: 495836.920 ops/s
Iteration  24: 495381.186 ops/s
Iteration  25: 494530.012 ops/s
Iteration  26: 492640.301 ops/s
Iteration  27: 494450.235 ops/s
Iteration  28: 494277.962 ops/s
Iteration  29: 495114.444 ops/s
Iteration  30: 495329.967 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_countByEach":
  495060.173 ±(99.9%) 747.021 ops/s [Average]
  (min, avg, max) = (491063.919, 495060.173, 496454.033), stdev = 1118.107
  CI (99.9%): [494313.152, 495807.195] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score     Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_countByEach  thrpt   30  495060.173 ± 747.021  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_countByWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_countByWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1088033.394 ops/s
# Warmup Iteration   2: 2181603.063 ops/s
# Warmup Iteration   3: 2395319.691 ops/s
# Warmup Iteration   4: 2408464.377 ops/s
# Warmup Iteration   5: 1988510.819 ops/s
# Warmup Iteration   6: 2412010.068 ops/s
# Warmup Iteration   7: 2411582.564 ops/s
# Warmup Iteration   8: 2407782.778 ops/s
# Warmup Iteration   9: 2410397.204 ops/s
# Warmup Iteration  10: 2405999.149 ops/s
# Warmup Iteration  11: 2409604.414 ops/s
# Warmup Iteration  12: 2412651.965 ops/s
# Warmup Iteration  13: 2406344.010 ops/s
# Warmup Iteration  14: 2408931.333 ops/s
# Warmup Iteration  15: 2412058.852 ops/s
# Warmup Iteration  16: 2411763.827 ops/s
# Warmup Iteration  17: 2411770.208 ops/s
# Warmup Iteration  18: 2407862.362 ops/s
# Warmup Iteration  19: 2409673.113 ops/s
# Warmup Iteration  20: 2407199.759 ops/s
# Warmup Iteration  21: 2411125.685 ops/s
# Warmup Iteration  22: 2408584.753 ops/s
# Warmup Iteration  23: 2398669.711 ops/s
# Warmup Iteration  24: 2408883.466 ops/s
# Warmup Iteration  25: 2411870.395 ops/s
# Warmup Iteration  26: 2405613.754 ops/s
# Warmup Iteration  27: 2404313.165 ops/s
# Warmup Iteration  28: 2409698.077 ops/s
# Warmup Iteration  29: 2406359.555 ops/s
# Warmup Iteration  30: 2405516.556 ops/s
Iteration   1: 2405051.204 ops/s
Iteration   2: 2406812.681 ops/s
Iteration   3: 2407677.338 ops/s
Iteration   4: 2410824.545 ops/s
Iteration   5: 2413698.663 ops/s
Iteration   6: 2405439.692 ops/s
Iteration   7: 2407809.911 ops/s
Iteration   8: 2413619.162 ops/s
Iteration   9: 2407633.822 ops/s
Iteration  10: 2409060.048 ops/s
Iteration  11: 2415145.785 ops/s
Iteration  12: 2411870.133 ops/s
Iteration  13: 2406162.939 ops/s
Iteration  14: 2413260.411 ops/s
Iteration  15: 2409866.690 ops/s
Iteration  16: 2406609.251 ops/s
Iteration  17: 2411929.719 ops/s
Iteration  18: 2407705.497 ops/s
Iteration  19: 2408957.293 ops/s
Iteration  20: 2411234.237 ops/s
Iteration  21: 2409288.586 ops/s
Iteration  22: 2404668.979 ops/s
Iteration  23: 2411614.670 ops/s
Iteration  24: 2394825.320 ops/s
Iteration  25: 2405824.482 ops/s
Iteration  26: 2411895.325 ops/s
Iteration  27: 2406141.775 ops/s
Iteration  28: 2407825.916 ops/s
Iteration  29: 2411594.116 ops/s
Iteration  30: 2407802.041 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_countByWith":
  2408728.341 ±(99.9%) 2600.420 ops/s [Average]
  (min, avg, max) = (2394825.320, 2408728.341, 2415145.785), stdev = 3892.186
  CI (99.9%): [2406127.921, 2411328.761] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_countByWith  thrpt   30  2408728.341 ± 2600.420  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_countWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_countWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 41968939.394 ops/s
# Warmup Iteration   2: 83810443.569 ops/s
# Warmup Iteration   3: 70217872.680 ops/s
# Warmup Iteration   4: 83086992.046 ops/s
# Warmup Iteration   5: 83042841.717 ops/s
# Warmup Iteration   6: 82772900.784 ops/s
# Warmup Iteration   7: 82893360.886 ops/s
# Warmup Iteration   8: 82956931.247 ops/s
# Warmup Iteration   9: 82976813.983 ops/s
# Warmup Iteration  10: 83092625.323 ops/s
# Warmup Iteration  11: 83209423.706 ops/s
# Warmup Iteration  12: 82845327.543 ops/s
# Warmup Iteration  13: 82914304.248 ops/s
# Warmup Iteration  14: 83028898.724 ops/s
# Warmup Iteration  15: 82947327.646 ops/s
# Warmup Iteration  16: 82955897.742 ops/s
# Warmup Iteration  17: 82927963.567 ops/s
# Warmup Iteration  18: 82960893.338 ops/s
# Warmup Iteration  19: 82908447.930 ops/s
# Warmup Iteration  20: 82847910.078 ops/s
# Warmup Iteration  21: 83086833.895 ops/s
# Warmup Iteration  22: 82843191.015 ops/s
# Warmup Iteration  23: 82821537.905 ops/s
# Warmup Iteration  24: 82871018.787 ops/s
# Warmup Iteration  25: 82964977.811 ops/s
# Warmup Iteration  26: 83165966.186 ops/s
# Warmup Iteration  27: 82929566.909 ops/s
# Warmup Iteration  28: 82865139.819 ops/s
# Warmup Iteration  29: 82929245.374 ops/s
# Warmup Iteration  30: 82979252.551 ops/s
Iteration   1: 83023692.313 ops/s
Iteration   2: 82621848.958 ops/s
Iteration   3: 82700205.472 ops/s
Iteration   4: 82784839.860 ops/s
Iteration   5: 82916342.742 ops/s
Iteration   6: 83321314.742 ops/s
Iteration   7: 83607946.675 ops/s
Iteration   8: 83106558.115 ops/s
Iteration   9: 83190853.122 ops/s
Iteration  10: 83059534.921 ops/s
Iteration  11: 83162994.690 ops/s
Iteration  12: 83114191.918 ops/s
Iteration  13: 82919158.152 ops/s
Iteration  14: 83137050.625 ops/s
Iteration  15: 82743346.013 ops/s
Iteration  16: 83142839.987 ops/s
Iteration  17: 83168945.801 ops/s
Iteration  18: 83035084.263 ops/s
Iteration  19: 83241118.286 ops/s
Iteration  20: 83150073.134 ops/s
Iteration  21: 82423790.979 ops/s
Iteration  22: 83170448.782 ops/s
Iteration  23: 82934972.684 ops/s
Iteration  24: 82936153.705 ops/s
Iteration  25: 82866653.301 ops/s
Iteration  26: 82889508.596 ops/s
Iteration  27: 82936067.277 ops/s
Iteration  28: 82810996.281 ops/s
Iteration  29: 82679518.623 ops/s
Iteration  30: 83193332.656 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_countWith":
  82999646.089 ±(99.9%) 159451.111 ops/s [Average]
  (min, avg, max) = (82423790.979, 82999646.089, 83607946.675), stdev = 238658.934
  CI (99.9%): [82840194.979, 83159097.200] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score        Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_countWith  thrpt   30  82999646.089 ± 159451.111  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_detect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_detect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 19778715.327 ops/s
# Warmup Iteration   2: 39132141.898 ops/s
# Warmup Iteration   3: 32438710.708 ops/s
# Warmup Iteration   4: 38184616.199 ops/s
# Warmup Iteration   5: 38229414.829 ops/s
# Warmup Iteration   6: 38163682.350 ops/s
# Warmup Iteration   7: 38251036.071 ops/s
# Warmup Iteration   8: 38211565.702 ops/s
# Warmup Iteration   9: 38128519.288 ops/s
# Warmup Iteration  10: 38202662.822 ops/s
# Warmup Iteration  11: 38088228.371 ops/s
# Warmup Iteration  12: 38247771.304 ops/s
# Warmup Iteration  13: 38191970.652 ops/s
# Warmup Iteration  14: 38164187.727 ops/s
# Warmup Iteration  15: 38193943.344 ops/s
# Warmup Iteration  16: 38169645.648 ops/s
# Warmup Iteration  17: 38058716.406 ops/s
# Warmup Iteration  18: 38183374.573 ops/s
# Warmup Iteration  19: 38072635.038 ops/s
# Warmup Iteration  20: 38080079.660 ops/s
# Warmup Iteration  21: 38239990.964 ops/s
# Warmup Iteration  22: 38204495.887 ops/s
# Warmup Iteration  23: 38153867.266 ops/s
# Warmup Iteration  24: 38122223.984 ops/s
# Warmup Iteration  25: 38096090.243 ops/s
# Warmup Iteration  26: 38029329.146 ops/s
# Warmup Iteration  27: 38062184.711 ops/s
# Warmup Iteration  28: 38179284.102 ops/s
# Warmup Iteration  29: 38133217.668 ops/s
# Warmup Iteration  30: 38127700.156 ops/s
Iteration   1: 38181498.750 ops/s
Iteration   2: 38087064.487 ops/s
Iteration   3: 38145063.321 ops/s
Iteration   4: 38319524.553 ops/s
Iteration   5: 38244748.531 ops/s
Iteration   6: 38199449.017 ops/s
Iteration   7: 38173683.018 ops/s
Iteration   8: 38148467.020 ops/s
Iteration   9: 38152158.519 ops/s
Iteration  10: 38245736.644 ops/s
Iteration  11: 38181909.774 ops/s
Iteration  12: 38158481.455 ops/s
Iteration  13: 38142504.286 ops/s
Iteration  14: 38066726.450 ops/s
Iteration  15: 38195464.510 ops/s
Iteration  16: 38154791.900 ops/s
Iteration  17: 38244716.798 ops/s
Iteration  18: 38181596.866 ops/s
Iteration  19: 38191889.648 ops/s
Iteration  20: 38159032.117 ops/s
Iteration  21: 38239156.020 ops/s
Iteration  22: 38141364.233 ops/s
Iteration  23: 38289298.743 ops/s
Iteration  24: 38154851.252 ops/s
Iteration  25: 38198912.220 ops/s
Iteration  26: 38085632.458 ops/s
Iteration  27: 38108659.268 ops/s
Iteration  28: 38167456.865 ops/s
Iteration  29: 38224818.905 ops/s
Iteration  30: 38088397.499 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_detect":
  38175768.504 ±(99.9%) 39685.695 ops/s [Average]
  (min, avg, max) = (38066726.450, 38175768.504, 38319524.553), stdev = 59399.685
  CI (99.9%): [38136082.809, 38215454.200] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score       Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_detect  thrpt   30  38175768.504 ± 39685.695  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 20368052.623 ops/s
# Warmup Iteration   2: 40878657.490 ops/s
# Warmup Iteration   3: 35209447.854 ops/s
# Warmup Iteration   4: 41295807.443 ops/s
# Warmup Iteration   5: 41223826.933 ops/s
# Warmup Iteration   6: 41477311.284 ops/s
# Warmup Iteration   7: 41421468.443 ops/s
# Warmup Iteration   8: 41347750.516 ops/s
# Warmup Iteration   9: 41495641.953 ops/s
# Warmup Iteration  10: 41402910.197 ops/s
# Warmup Iteration  11: 41545951.835 ops/s
# Warmup Iteration  12: 41474999.749 ops/s
# Warmup Iteration  13: 41322038.585 ops/s
# Warmup Iteration  14: 41367113.020 ops/s
# Warmup Iteration  15: 41387483.657 ops/s
# Warmup Iteration  16: 41407193.977 ops/s
# Warmup Iteration  17: 41342964.984 ops/s
# Warmup Iteration  18: 41360767.770 ops/s
# Warmup Iteration  19: 41322604.113 ops/s
# Warmup Iteration  20: 41440849.348 ops/s
# Warmup Iteration  21: 41420342.915 ops/s
# Warmup Iteration  22: 41439801.887 ops/s
# Warmup Iteration  23: 41406446.398 ops/s
# Warmup Iteration  24: 41509608.037 ops/s
# Warmup Iteration  25: 41471839.751 ops/s
# Warmup Iteration  26: 41471153.414 ops/s
# Warmup Iteration  27: 41523788.719 ops/s
# Warmup Iteration  28: 41513457.922 ops/s
# Warmup Iteration  29: 41548182.249 ops/s
# Warmup Iteration  30: 41439235.024 ops/s
Iteration   1: 41578227.487 ops/s
Iteration   2: 41600542.580 ops/s
Iteration   3: 41455013.047 ops/s
Iteration   4: 41535060.863 ops/s
Iteration   5: 41559477.987 ops/s
Iteration   6: 41554944.745 ops/s
Iteration   7: 41475595.883 ops/s
Iteration   8: 41548761.657 ops/s
Iteration   9: 41496812.463 ops/s
Iteration  10: 41485313.971 ops/s
Iteration  11: 41497600.006 ops/s
Iteration  12: 41596079.897 ops/s
Iteration  13: 41518032.081 ops/s
Iteration  14: 41536645.348 ops/s
Iteration  15: 41517821.551 ops/s
Iteration  16: 41469566.913 ops/s
Iteration  17: 41478633.698 ops/s
Iteration  18: 41406491.755 ops/s
Iteration  19: 41441307.688 ops/s
Iteration  20: 41485232.618 ops/s
Iteration  21: 41558396.749 ops/s
Iteration  22: 41508879.863 ops/s
Iteration  23: 41457118.793 ops/s
Iteration  24: 41417286.455 ops/s
Iteration  25: 41273019.927 ops/s
Iteration  26: 41493786.546 ops/s
Iteration  27: 41526832.961 ops/s
Iteration  28: 41410329.969 ops/s
Iteration  29: 41403259.213 ops/s
Iteration  30: 41364300.030 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_detectIfNone":
  41488345.758 ±(99.9%) 48120.198 ops/s [Average]
  (min, avg, max) = (41273019.927, 41488345.758, 41600542.580), stdev = 72024.052
  CI (99.9%): [41440225.560, 41536465.956] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score       Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_detectIfNone  thrpt   30  41488345.758 ± 48120.198  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_detectIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_detectIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 101968319.361 ops/s
# Warmup Iteration   2: 198148930.602 ops/s
# Warmup Iteration   3: 174252414.984 ops/s
# Warmup Iteration   4: 174008935.489 ops/s
# Warmup Iteration   5: 188296668.976 ops/s
# Warmup Iteration   6: 188773351.100 ops/s
# Warmup Iteration   7: 188498578.477 ops/s
# Warmup Iteration   8: 188689536.620 ops/s
# Warmup Iteration   9: 188441905.845 ops/s
# Warmup Iteration  10: 188593926.711 ops/s
# Warmup Iteration  11: 188625448.005 ops/s
# Warmup Iteration  12: 188923664.710 ops/s
# Warmup Iteration  13: 188437127.403 ops/s
# Warmup Iteration  14: 188639126.306 ops/s
# Warmup Iteration  15: 188513425.764 ops/s
# Warmup Iteration  16: 188643949.265 ops/s
# Warmup Iteration  17: 188508518.194 ops/s
# Warmup Iteration  18: 188601714.043 ops/s
# Warmup Iteration  19: 188485946.439 ops/s
# Warmup Iteration  20: 188516961.063 ops/s
# Warmup Iteration  21: 188445061.933 ops/s
# Warmup Iteration  22: 188571658.427 ops/s
# Warmup Iteration  23: 188611990.436 ops/s
# Warmup Iteration  24: 188760859.515 ops/s
# Warmup Iteration  25: 188529020.438 ops/s
# Warmup Iteration  26: 188730541.907 ops/s
# Warmup Iteration  27: 188559968.655 ops/s
# Warmup Iteration  28: 188641667.324 ops/s
# Warmup Iteration  29: 188558451.811 ops/s
# Warmup Iteration  30: 188815316.578 ops/s
Iteration   1: 188620571.729 ops/s
Iteration   2: 188549093.523 ops/s
Iteration   3: 188834549.123 ops/s
Iteration   4: 188877326.211 ops/s
Iteration   5: 188605647.316 ops/s
Iteration   6: 188362385.602 ops/s
Iteration   7: 188586006.998 ops/s
Iteration   8: 188476252.127 ops/s
Iteration   9: 188529752.286 ops/s
Iteration  10: 188085775.122 ops/s
Iteration  11: 188071999.920 ops/s
Iteration  12: 187997001.081 ops/s
Iteration  13: 188447548.333 ops/s
Iteration  14: 188304315.729 ops/s
Iteration  15: 188532977.343 ops/s
Iteration  16: 188844191.286 ops/s
Iteration  17: 188820948.398 ops/s
Iteration  18: 187639861.836 ops/s
Iteration  19: 187635300.330 ops/s
Iteration  20: 188409793.181 ops/s
Iteration  21: 188295578.877 ops/s
Iteration  22: 188731206.395 ops/s
Iteration  23: 188872669.466 ops/s
Iteration  24: 188228248.595 ops/s
Iteration  25: 187929608.264 ops/s
Iteration  26: 187523294.338 ops/s
Iteration  27: 188432949.513 ops/s
Iteration  28: 188647066.678 ops/s
Iteration  29: 188704918.565 ops/s
Iteration  30: 188417843.891 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_detectIndex":
  188400489.402 ±(99.9%) 249440.176 ops/s [Average]
  (min, avg, max) = (187523294.338, 188400489.402, 188877326.211), stdev = 373350.341
  CI (99.9%): [188151049.226, 188649929.578] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt          Score        Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_detectIndex  thrpt   30  188400489.402 ± 249440.176  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_detectLastIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_detectLastIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 100815827.976 ops/s
# Warmup Iteration   2: 197565679.141 ops/s
# Warmup Iteration   3: 175180897.797 ops/s
# Warmup Iteration   4: 173152884.935 ops/s
# Warmup Iteration   5: 188480456.727 ops/s
# Warmup Iteration   6: 188682438.935 ops/s
# Warmup Iteration   7: 188619696.564 ops/s
# Warmup Iteration   8: 188940245.085 ops/s
# Warmup Iteration   9: 188541820.968 ops/s
# Warmup Iteration  10: 188315099.257 ops/s
# Warmup Iteration  11: 188727222.416 ops/s
# Warmup Iteration  12: 188669586.895 ops/s
# Warmup Iteration  13: 188492132.481 ops/s
# Warmup Iteration  14: 188240722.209 ops/s
# Warmup Iteration  15: 188650234.556 ops/s
# Warmup Iteration  16: 188373383.500 ops/s
# Warmup Iteration  17: 188931460.680 ops/s
# Warmup Iteration  18: 188557168.394 ops/s
# Warmup Iteration  19: 188817203.939 ops/s
# Warmup Iteration  20: 188625652.497 ops/s
# Warmup Iteration  21: 188481354.290 ops/s
# Warmup Iteration  22: 188579645.894 ops/s
# Warmup Iteration  23: 188794879.031 ops/s
# Warmup Iteration  24: 188044757.564 ops/s
# Warmup Iteration  25: 188567196.962 ops/s
# Warmup Iteration  26: 188786143.620 ops/s
# Warmup Iteration  27: 188697768.350 ops/s
# Warmup Iteration  28: 188548614.799 ops/s
# Warmup Iteration  29: 189051258.539 ops/s
# Warmup Iteration  30: 188558715.369 ops/s
Iteration   1: 188539665.534 ops/s
Iteration   2: 188491707.222 ops/s
Iteration   3: 188506054.381 ops/s
Iteration   4: 188722052.576 ops/s
Iteration   5: 188736584.006 ops/s
Iteration   6: 188303369.905 ops/s
Iteration   7: 188412496.493 ops/s
Iteration   8: 188566687.155 ops/s
Iteration   9: 188534271.962 ops/s
Iteration  10: 188737368.980 ops/s
Iteration  11: 188773545.956 ops/s
Iteration  12: 188941290.019 ops/s
Iteration  13: 188694515.003 ops/s
Iteration  14: 188926950.453 ops/s
Iteration  15: 188857700.625 ops/s
Iteration  16: 188667744.210 ops/s
Iteration  17: 188939219.108 ops/s
Iteration  18: 188413751.815 ops/s
Iteration  19: 188547325.499 ops/s
Iteration  20: 188735131.561 ops/s
Iteration  21: 188763837.877 ops/s
Iteration  22: 188990401.333 ops/s
Iteration  23: 188935513.704 ops/s
Iteration  24: 188271367.017 ops/s
Iteration  25: 188623771.397 ops/s
Iteration  26: 188483828.347 ops/s
Iteration  27: 188341685.035 ops/s
Iteration  28: 188619675.742 ops/s
Iteration  29: 188799578.252 ops/s
Iteration  30: 188519880.465 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_detectLastIndex":
  188646565.721 ±(99.9%) 134289.645 ops/s [Average]
  (min, avg, max) = (188271367.017, 188646565.721, 188990401.333), stdev = 200998.434
  CI (99.9%): [188512276.076, 188780855.366] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt          Score        Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_detectLastIndex  thrpt   30  188646565.721 ± 134289.645  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_detectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_detectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9811191.089 ops/s
# Warmup Iteration   2: 20271325.192 ops/s
# Warmup Iteration   3: 17446768.447 ops/s
# Warmup Iteration   4: 20498629.073 ops/s
# Warmup Iteration   5: 20579181.690 ops/s
# Warmup Iteration   6: 20606112.208 ops/s
# Warmup Iteration   7: 20584371.706 ops/s
# Warmup Iteration   8: 20597366.517 ops/s
# Warmup Iteration   9: 20591059.117 ops/s
# Warmup Iteration  10: 20513024.074 ops/s
# Warmup Iteration  11: 20547335.285 ops/s
# Warmup Iteration  12: 20585290.846 ops/s
# Warmup Iteration  13: 20510807.463 ops/s
# Warmup Iteration  14: 20559591.839 ops/s
# Warmup Iteration  15: 20497482.578 ops/s
# Warmup Iteration  16: 20589492.773 ops/s
# Warmup Iteration  17: 20585701.138 ops/s
# Warmup Iteration  18: 20580823.337 ops/s
# Warmup Iteration  19: 20612550.230 ops/s
# Warmup Iteration  20: 20554207.523 ops/s
# Warmup Iteration  21: 20555911.576 ops/s
# Warmup Iteration  22: 20559006.022 ops/s
# Warmup Iteration  23: 20486481.223 ops/s
# Warmup Iteration  24: 20616154.973 ops/s
# Warmup Iteration  25: 20523503.005 ops/s
# Warmup Iteration  26: 20510964.383 ops/s
# Warmup Iteration  27: 20580405.617 ops/s
# Warmup Iteration  28: 20593492.073 ops/s
# Warmup Iteration  29: 20555122.569 ops/s
# Warmup Iteration  30: 20603714.325 ops/s
Iteration   1: 20595645.736 ops/s
Iteration   2: 20549605.132 ops/s
Iteration   3: 20601032.766 ops/s
Iteration   4: 20558996.185 ops/s
Iteration   5: 20631897.572 ops/s
Iteration   6: 20645186.535 ops/s
Iteration   7: 20538753.590 ops/s
Iteration   8: 20633081.292 ops/s
Iteration   9: 20600118.476 ops/s
Iteration  10: 20461874.128 ops/s
Iteration  11: 20582511.354 ops/s
Iteration  12: 20630241.090 ops/s
Iteration  13: 20582850.607 ops/s
Iteration  14: 20606356.322 ops/s
Iteration  15: 20581979.429 ops/s
Iteration  16: 20624345.474 ops/s
Iteration  17: 20554500.595 ops/s
Iteration  18: 20584721.563 ops/s
Iteration  19: 20564845.421 ops/s
Iteration  20: 20375815.483 ops/s
Iteration  21: 20359866.475 ops/s
Iteration  22: 20593889.840 ops/s
Iteration  23: 20552135.722 ops/s
Iteration  24: 20501417.515 ops/s
Iteration  25: 20569081.173 ops/s
Iteration  26: 20591164.747 ops/s
Iteration  27: 20517127.225 ops/s
Iteration  28: 20517146.954 ops/s
Iteration  29: 20533227.230 ops/s
Iteration  30: 20546869.458 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_detectWith":
  20559542.836 ±(99.9%) 44758.321 ops/s [Average]
  (min, avg, max) = (20359866.475, 20559542.836, 20645186.535), stdev = 66992.154
  CI (99.9%): [20514784.515, 20604301.158] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_detectWith  thrpt   30  20559542.836 ± 44758.321  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_detectWithIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_detectWithIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12022704.349 ops/s
# Warmup Iteration   2: 23822085.779 ops/s
# Warmup Iteration   3: 20934044.267 ops/s
# Warmup Iteration   4: 23370017.151 ops/s
# Warmup Iteration   5: 24066902.410 ops/s
# Warmup Iteration   6: 24028388.216 ops/s
# Warmup Iteration   7: 24017274.392 ops/s
# Warmup Iteration   8: 23999437.653 ops/s
# Warmup Iteration   9: 24032875.705 ops/s
# Warmup Iteration  10: 23989539.016 ops/s
# Warmup Iteration  11: 24006014.899 ops/s
# Warmup Iteration  12: 24023866.505 ops/s
# Warmup Iteration  13: 23975715.725 ops/s
# Warmup Iteration  14: 24001166.638 ops/s
# Warmup Iteration  15: 24033804.463 ops/s
# Warmup Iteration  16: 24040711.778 ops/s
# Warmup Iteration  17: 24027346.022 ops/s
# Warmup Iteration  18: 23827593.681 ops/s
# Warmup Iteration  19: 23962756.116 ops/s
# Warmup Iteration  20: 24107935.983 ops/s
# Warmup Iteration  21: 24146462.607 ops/s
# Warmup Iteration  22: 24087734.849 ops/s
# Warmup Iteration  23: 24112674.536 ops/s
# Warmup Iteration  24: 24074497.162 ops/s
# Warmup Iteration  25: 24071592.619 ops/s
# Warmup Iteration  26: 24106131.356 ops/s
# Warmup Iteration  27: 24116937.804 ops/s
# Warmup Iteration  28: 24120292.348 ops/s
# Warmup Iteration  29: 24099764.435 ops/s
# Warmup Iteration  30: 24079095.629 ops/s
Iteration   1: 24143474.279 ops/s
Iteration   2: 24098873.872 ops/s
Iteration   3: 24074100.607 ops/s
Iteration   4: 24135363.509 ops/s
Iteration   5: 24180837.932 ops/s
Iteration   6: 24173160.545 ops/s
Iteration   7: 24148649.472 ops/s
Iteration   8: 24191727.922 ops/s
Iteration   9: 24070242.984 ops/s
Iteration  10: 24174824.137 ops/s
Iteration  11: 24201863.279 ops/s
Iteration  12: 24138277.520 ops/s
Iteration  13: 24177772.849 ops/s
Iteration  14: 24155855.288 ops/s
Iteration  15: 24205574.752 ops/s
Iteration  16: 24065576.150 ops/s
Iteration  17: 24182678.974 ops/s
Iteration  18: 24096828.416 ops/s
Iteration  19: 24143668.753 ops/s
Iteration  20: 24142346.863 ops/s
Iteration  21: 24056695.750 ops/s
Iteration  22: 23974957.646 ops/s
Iteration  23: 23918430.009 ops/s
Iteration  24: 24195509.048 ops/s
Iteration  25: 24121742.470 ops/s
Iteration  26: 24069069.831 ops/s
Iteration  27: 24157975.605 ops/s
Iteration  28: 24145407.062 ops/s
Iteration  29: 24097802.358 ops/s
Iteration  30: 24109675.821 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_detectWithIfNone":
  24124965.457 ±(99.9%) 43811.923 ops/s [Average]
  (min, avg, max) = (23918430.009, 24124965.457, 24205574.752), stdev = 65575.630
  CI (99.9%): [24081153.533, 24168777.380] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_detectWithIfNone  thrpt   30  24124965.457 ± 43811.923  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_distinct$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_distinct

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2011608.966 ops/s
# Warmup Iteration   2: 4654926.947 ops/s
# Warmup Iteration   3: 4688551.445 ops/s
# Warmup Iteration   4: 3939549.303 ops/s
# Warmup Iteration   5: 4704152.515 ops/s
# Warmup Iteration   6: 4671086.202 ops/s
# Warmup Iteration   7: 4700151.653 ops/s
# Warmup Iteration   8: 4688072.013 ops/s
# Warmup Iteration   9: 4673682.218 ops/s
# Warmup Iteration  10: 4690658.306 ops/s
# Warmup Iteration  11: 4703875.332 ops/s
# Warmup Iteration  12: 4700653.664 ops/s
# Warmup Iteration  13: 4708514.711 ops/s
# Warmup Iteration  14: 4704761.125 ops/s
# Warmup Iteration  15: 4705592.844 ops/s
# Warmup Iteration  16: 4705225.886 ops/s
# Warmup Iteration  17: 4704456.261 ops/s
# Warmup Iteration  18: 4688509.952 ops/s
# Warmup Iteration  19: 4691451.107 ops/s
# Warmup Iteration  20: 4697399.067 ops/s
# Warmup Iteration  21: 4701329.465 ops/s
# Warmup Iteration  22: 4696795.890 ops/s
# Warmup Iteration  23: 4706279.622 ops/s
# Warmup Iteration  24: 4702169.928 ops/s
# Warmup Iteration  25: 4697057.691 ops/s
# Warmup Iteration  26: 4699738.115 ops/s
# Warmup Iteration  27: 4703892.432 ops/s
# Warmup Iteration  28: 4702490.440 ops/s
# Warmup Iteration  29: 4694401.116 ops/s
# Warmup Iteration  30: 4703929.786 ops/s
Iteration   1: 4702068.318 ops/s
Iteration   2: 4705044.650 ops/s
Iteration   3: 4707167.475 ops/s
Iteration   4: 4696296.864 ops/s
Iteration   5: 4703248.686 ops/s
Iteration   6: 4707246.401 ops/s
Iteration   7: 4706339.495 ops/s
Iteration   8: 4710521.027 ops/s
Iteration   9: 4704115.193 ops/s
Iteration  10: 4702946.004 ops/s
Iteration  11: 4704110.850 ops/s
Iteration  12: 4702908.283 ops/s
Iteration  13: 4698610.667 ops/s
Iteration  14: 4707041.875 ops/s
Iteration  15: 4700230.205 ops/s
Iteration  16: 4693512.837 ops/s
Iteration  17: 4696273.870 ops/s
Iteration  18: 4713106.354 ops/s
Iteration  19: 4716070.015 ops/s
Iteration  20: 4702725.672 ops/s
Iteration  21: 4703527.844 ops/s
Iteration  22: 4701443.741 ops/s
Iteration  23: 4710267.308 ops/s
Iteration  24: 4691798.619 ops/s
Iteration  25: 4697319.616 ops/s
Iteration  26: 4705533.092 ops/s
Iteration  27: 4708219.110 ops/s
Iteration  28: 4697772.151 ops/s
Iteration  29: 4714713.531 ops/s
Iteration  30: 4714753.560 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_distinct":
  4704164.444 ±(99.9%) 4144.832 ops/s [Average]
  (min, avg, max) = (4691798.619, 4704164.444, 4716070.015), stdev = 6203.790
  CI (99.9%): [4700019.612, 4708309.276] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_distinct  thrpt   30  4704164.444 ± 4144.832  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_distinctBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_distinctBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5190179.098 ops/s
# Warmup Iteration   2: 11570292.976 ops/s
# Warmup Iteration   3: 11542200.458 ops/s
# Warmup Iteration   4: 10198129.084 ops/s
# Warmup Iteration   5: 11783307.447 ops/s
# Warmup Iteration   6: 11772275.336 ops/s
# Warmup Iteration   7: 11790468.826 ops/s
# Warmup Iteration   8: 11767078.138 ops/s
# Warmup Iteration   9: 11790171.681 ops/s
# Warmup Iteration  10: 11806560.253 ops/s
# Warmup Iteration  11: 11770201.696 ops/s
# Warmup Iteration  12: 11752415.641 ops/s
# Warmup Iteration  13: 11757314.358 ops/s
# Warmup Iteration  14: 11790659.016 ops/s
# Warmup Iteration  15: 11785825.353 ops/s
# Warmup Iteration  16: 11804676.199 ops/s
# Warmup Iteration  17: 11815878.850 ops/s
# Warmup Iteration  18: 11810626.752 ops/s
# Warmup Iteration  19: 11804545.404 ops/s
# Warmup Iteration  20: 11814445.418 ops/s
# Warmup Iteration  21: 11803546.141 ops/s
# Warmup Iteration  22: 11814156.184 ops/s
# Warmup Iteration  23: 11805735.373 ops/s
# Warmup Iteration  24: 11785463.996 ops/s
# Warmup Iteration  25: 11795677.294 ops/s
# Warmup Iteration  26: 11802495.576 ops/s
# Warmup Iteration  27: 11810873.439 ops/s
# Warmup Iteration  28: 11801752.423 ops/s
# Warmup Iteration  29: 11786862.833 ops/s
# Warmup Iteration  30: 11802044.127 ops/s
Iteration   1: 11786207.561 ops/s
Iteration   2: 11772614.587 ops/s
Iteration   3: 11813391.700 ops/s
Iteration   4: 11818207.255 ops/s
Iteration   5: 11815921.331 ops/s
Iteration   6: 11772176.913 ops/s
Iteration   7: 11789471.241 ops/s
Iteration   8: 11770128.199 ops/s
Iteration   9: 11809447.829 ops/s
Iteration  10: 11583176.365 ops/s
Iteration  11: 11771160.159 ops/s
Iteration  12: 11762564.992 ops/s
Iteration  13: 11787097.541 ops/s
Iteration  14: 11782840.772 ops/s
Iteration  15: 11815749.306 ops/s
Iteration  16: 11776025.114 ops/s
Iteration  17: 11507051.917 ops/s
Iteration  18: 11791914.950 ops/s
Iteration  19: 11840109.175 ops/s
Iteration  20: 11751060.616 ops/s
Iteration  21: 11811423.750 ops/s
Iteration  22: 11823854.365 ops/s
Iteration  23: 11666189.010 ops/s
Iteration  24: 11722772.648 ops/s
Iteration  25: 11780222.692 ops/s
Iteration  26: 11782881.334 ops/s
Iteration  27: 11800501.119 ops/s
Iteration  28: 11815806.090 ops/s
Iteration  29: 11816884.501 ops/s
Iteration  30: 11815619.563 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_distinctBy":
  11771749.087 ±(99.9%) 47417.854 ops/s [Average]
  (min, avg, max) = (11507051.917, 11771749.087, 11840109.175), stdev = 70972.817
  CI (99.9%): [11724331.232, 11819166.941] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_distinctBy  thrpt   30  11771749.087 ± 47417.854  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_distinctWithHashingStrategy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_distinctWithHashingStrategy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5151441.256 ops/s
# Warmup Iteration   2: 11248310.201 ops/s
# Warmup Iteration   3: 11488567.611 ops/s
# Warmup Iteration   4: 9449131.798 ops/s
# Warmup Iteration   5: 11537405.709 ops/s
# Warmup Iteration   6: 11543227.375 ops/s
# Warmup Iteration   7: 11565137.401 ops/s
# Warmup Iteration   8: 11554949.548 ops/s
# Warmup Iteration   9: 11554262.033 ops/s
# Warmup Iteration  10: 11548296.807 ops/s
# Warmup Iteration  11: 11552762.352 ops/s
# Warmup Iteration  12: 11553314.702 ops/s
# Warmup Iteration  13: 11518221.858 ops/s
# Warmup Iteration  14: 11539450.843 ops/s
# Warmup Iteration  15: 11560118.143 ops/s
# Warmup Iteration  16: 11549269.338 ops/s
# Warmup Iteration  17: 11539727.940 ops/s
# Warmup Iteration  18: 11557469.381 ops/s
# Warmup Iteration  19: 11541979.602 ops/s
# Warmup Iteration  20: 11549913.893 ops/s
# Warmup Iteration  21: 11555400.008 ops/s
# Warmup Iteration  22: 11554072.327 ops/s
# Warmup Iteration  23: 11554221.830 ops/s
# Warmup Iteration  24: 11574703.937 ops/s
# Warmup Iteration  25: 11570685.876 ops/s
# Warmup Iteration  26: 11561382.594 ops/s
# Warmup Iteration  27: 11512172.534 ops/s
# Warmup Iteration  28: 11569168.428 ops/s
# Warmup Iteration  29: 11556675.198 ops/s
# Warmup Iteration  30: 11565768.744 ops/s
Iteration   1: 11556723.274 ops/s
Iteration   2: 11594224.992 ops/s
Iteration   3: 11546465.636 ops/s
Iteration   4: 11535392.267 ops/s
Iteration   5: 11519911.691 ops/s
Iteration   6: 11564050.650 ops/s
Iteration   7: 11554971.759 ops/s
Iteration   8: 11567849.717 ops/s
Iteration   9: 11559718.167 ops/s
Iteration  10: 11555964.486 ops/s
Iteration  11: 11574605.008 ops/s
Iteration  12: 11488901.440 ops/s
Iteration  13: 11444410.163 ops/s
Iteration  14: 11554237.101 ops/s
Iteration  15: 11558649.808 ops/s
Iteration  16: 11556133.738 ops/s
Iteration  17: 11562576.735 ops/s
Iteration  18: 11575814.101 ops/s
Iteration  19: 11578498.216 ops/s
Iteration  20: 11562969.713 ops/s
Iteration  21: 11569766.555 ops/s
Iteration  22: 11566017.362 ops/s
Iteration  23: 11542344.019 ops/s
Iteration  24: 11552790.886 ops/s
Iteration  25: 11561876.849 ops/s
Iteration  26: 11532337.214 ops/s
Iteration  27: 11561181.884 ops/s
Iteration  28: 11548710.134 ops/s
Iteration  29: 11568109.512 ops/s
Iteration  30: 11550437.248 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_distinctWithHashingStrategy":
  11552188.011 ±(99.9%) 18693.946 ops/s [Average]
  (min, avg, max) = (11444410.163, 11552188.011, 11594224.992), stdev = 27980.221
  CI (99.9%): [11533494.065, 11570881.957] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt         Score       Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_distinctWithHashingStrategy  thrpt   30  11552188.011 ± 18693.946  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_drop$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_drop

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1092144.501 ops/s
# Warmup Iteration   2: 1183057.039 ops/s
# Warmup Iteration   3: 1615804.736 ops/s
# Warmup Iteration   4: 1648957.813 ops/s
# Warmup Iteration   5: 1639177.225 ops/s
# Warmup Iteration   6: 1650122.002 ops/s
# Warmup Iteration   7: 1648875.483 ops/s
# Warmup Iteration   8: 1649345.108 ops/s
# Warmup Iteration   9: 1651647.626 ops/s
# Warmup Iteration  10: 1647975.257 ops/s
# Warmup Iteration  11: 1500657.068 ops/s
# Warmup Iteration  12: 1495044.097 ops/s
# Warmup Iteration  13: 1650052.430 ops/s
# Warmup Iteration  14: 1647363.885 ops/s
# Warmup Iteration  15: 1651079.887 ops/s
# Warmup Iteration  16: 1647773.183 ops/s
# Warmup Iteration  17: 1648749.369 ops/s
# Warmup Iteration  18: 1647945.422 ops/s
# Warmup Iteration  19: 1648234.867 ops/s
# Warmup Iteration  20: 1645508.416 ops/s
# Warmup Iteration  21: 1650259.000 ops/s
# Warmup Iteration  22: 1651074.914 ops/s
# Warmup Iteration  23: 1645256.973 ops/s
# Warmup Iteration  24: 1635322.711 ops/s
# Warmup Iteration  25: 1648948.552 ops/s
# Warmup Iteration  26: 1650114.498 ops/s
# Warmup Iteration  27: 1648337.768 ops/s
# Warmup Iteration  28: 1650156.999 ops/s
# Warmup Iteration  29: 1648093.697 ops/s
# Warmup Iteration  30: 1651997.656 ops/s
Iteration   1: 1652704.190 ops/s
Iteration   2: 1646014.306 ops/s
Iteration   3: 1650627.355 ops/s
Iteration   4: 1650850.900 ops/s
Iteration   5: 1650560.081 ops/s
Iteration   6: 1647290.109 ops/s
Iteration   7: 1651289.009 ops/s
Iteration   8: 1649771.764 ops/s
Iteration   9: 1643290.358 ops/s
Iteration  10: 1649222.068 ops/s
Iteration  11: 1650461.798 ops/s
Iteration  12: 1649681.479 ops/s
Iteration  13: 1647558.105 ops/s
Iteration  14: 1649733.947 ops/s
Iteration  15: 1650602.687 ops/s
Iteration  16: 1650963.330 ops/s
Iteration  17: 1647942.874 ops/s
Iteration  18: 1650435.550 ops/s
Iteration  19: 1651925.475 ops/s
Iteration  20: 1656105.535 ops/s
Iteration  21: 1644179.416 ops/s
Iteration  22: 1650034.123 ops/s
Iteration  23: 1650047.077 ops/s
Iteration  24: 1651272.845 ops/s
Iteration  25: 1643322.983 ops/s
Iteration  26: 1650962.277 ops/s
Iteration  27: 1650625.579 ops/s
Iteration  28: 1650011.626 ops/s
Iteration  29: 1645187.686 ops/s
Iteration  30: 1651096.060 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_drop":
  1649459.020 ±(99.9%) 1878.844 ops/s [Average]
  (min, avg, max) = (1643290.358, 1649459.020, 1656105.535), stdev = 2812.166
  CI (99.9%): [1647580.175, 1651337.864] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_drop  thrpt   30  1649459.020 ± 1878.844  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_dropWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_dropWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5523874.448 ops/s
# Warmup Iteration   2: 16667009.076 ops/s
# Warmup Iteration   3: 17868868.623 ops/s
# Warmup Iteration   4: 14973462.373 ops/s
# Warmup Iteration   5: 17153401.051 ops/s
# Warmup Iteration   6: 17115075.514 ops/s
# Warmup Iteration   7: 17171716.825 ops/s
# Warmup Iteration   8: 17154892.734 ops/s
# Warmup Iteration   9: 17158509.741 ops/s
# Warmup Iteration  10: 17117740.210 ops/s
# Warmup Iteration  11: 17137716.793 ops/s
# Warmup Iteration  12: 17134384.383 ops/s
# Warmup Iteration  13: 17150309.870 ops/s
# Warmup Iteration  14: 17136000.545 ops/s
# Warmup Iteration  15: 17141215.487 ops/s
# Warmup Iteration  16: 17159367.758 ops/s
# Warmup Iteration  17: 17138173.274 ops/s
# Warmup Iteration  18: 17129206.936 ops/s
# Warmup Iteration  19: 17149238.655 ops/s
# Warmup Iteration  20: 17164057.948 ops/s
# Warmup Iteration  21: 17152333.999 ops/s
# Warmup Iteration  22: 17136237.329 ops/s
# Warmup Iteration  23: 17151656.829 ops/s
# Warmup Iteration  24: 17168463.603 ops/s
# Warmup Iteration  25: 17129924.228 ops/s
# Warmup Iteration  26: 17143940.637 ops/s
# Warmup Iteration  27: 17176851.899 ops/s
# Warmup Iteration  28: 17144606.383 ops/s
# Warmup Iteration  29: 17168063.887 ops/s
# Warmup Iteration  30: 17165355.594 ops/s
Iteration   1: 17182143.835 ops/s
Iteration   2: 17158415.286 ops/s
Iteration   3: 17158662.247 ops/s
Iteration   4: 17162807.541 ops/s
Iteration   5: 17141066.047 ops/s
Iteration   6: 17154268.737 ops/s
Iteration   7: 17158029.402 ops/s
Iteration   8: 17162189.914 ops/s
Iteration   9: 17165195.056 ops/s
Iteration  10: 17129781.934 ops/s
Iteration  11: 17118040.026 ops/s
Iteration  12: 17150319.728 ops/s
Iteration  13: 17160525.227 ops/s
Iteration  14: 17103864.919 ops/s
Iteration  15: 17144780.588 ops/s
Iteration  16: 17151748.639 ops/s
Iteration  17: 17147847.275 ops/s
Iteration  18: 17168512.801 ops/s
Iteration  19: 17176476.826 ops/s
Iteration  20: 17163807.976 ops/s
Iteration  21: 17148890.730 ops/s
Iteration  22: 17168844.945 ops/s
Iteration  23: 17149579.038 ops/s
Iteration  24: 17202075.134 ops/s
Iteration  25: 17135083.490 ops/s
Iteration  26: 17130409.564 ops/s
Iteration  27: 17163723.332 ops/s
Iteration  28: 17154179.683 ops/s
Iteration  29: 17175338.990 ops/s
Iteration  30: 17163427.264 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_dropWhile":
  17155001.206 ±(99.9%) 12879.179 ops/s [Average]
  (min, avg, max) = (17103864.919, 17155001.206, 17202075.134), stdev = 19276.950
  CI (99.9%): [17142122.027, 17167880.384] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_dropWhile  thrpt   30  17155001.206 ± 12879.179  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_drop_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_drop_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 745010.256 ops/s
# Warmup Iteration   2: 768885.075 ops/s
# Warmup Iteration   3: 978066.884 ops/s
# Warmup Iteration   4: 979886.887 ops/s
# Warmup Iteration   5: 987059.107 ops/s
# Warmup Iteration   6: 972627.701 ops/s
# Warmup Iteration   7: 980179.851 ops/s
# Warmup Iteration   8: 978243.285 ops/s
# Warmup Iteration   9: 990935.834 ops/s
# Warmup Iteration  10: 991812.537 ops/s
# Warmup Iteration  11: 987805.206 ops/s
# Warmup Iteration  12: 859452.960 ops/s
# Warmup Iteration  13: 968095.129 ops/s
# Warmup Iteration  14: 985663.177 ops/s
# Warmup Iteration  15: 984232.361 ops/s
# Warmup Iteration  16: 984431.460 ops/s
# Warmup Iteration  17: 1029504.025 ops/s
# Warmup Iteration  18: 1033846.155 ops/s
# Warmup Iteration  19: 1032911.930 ops/s
# Warmup Iteration  20: 1032197.573 ops/s
# Warmup Iteration  21: 1029660.510 ops/s
# Warmup Iteration  22: 1031394.089 ops/s
# Warmup Iteration  23: 1027501.672 ops/s
# Warmup Iteration  24: 1025299.528 ops/s
# Warmup Iteration  25: 1030071.725 ops/s
# Warmup Iteration  26: 1027213.307 ops/s
# Warmup Iteration  27: 1026084.573 ops/s
# Warmup Iteration  28: 1029279.443 ops/s
# Warmup Iteration  29: 1020338.614 ops/s
# Warmup Iteration  30: 1030067.248 ops/s
Iteration   1: 1028164.988 ops/s
Iteration   2: 1032030.232 ops/s
Iteration   3: 1028927.960 ops/s
Iteration   4: 1027905.394 ops/s
Iteration   5: 1028167.738 ops/s
Iteration   6: 1025307.161 ops/s
Iteration   7: 1031050.018 ops/s
Iteration   8: 1032175.345 ops/s
Iteration   9: 1029142.206 ops/s
Iteration  10: 1028922.528 ops/s
Iteration  11: 1029681.045 ops/s
Iteration  12: 1029327.329 ops/s
Iteration  13: 1018620.458 ops/s
Iteration  14: 1022244.911 ops/s
Iteration  15: 1035012.593 ops/s
Iteration  16: 1032594.605 ops/s
Iteration  17: 1028553.853 ops/s
Iteration  18: 1036856.355 ops/s
Iteration  19: 1033251.682 ops/s
Iteration  20: 1030385.311 ops/s
Iteration  21: 1030301.312 ops/s
Iteration  22: 1036431.043 ops/s
Iteration  23: 1029805.718 ops/s
Iteration  24: 1034470.683 ops/s
Iteration  25: 1029817.222 ops/s
Iteration  26: 1033070.098 ops/s
Iteration  27: 1035207.650 ops/s
Iteration  28: 1030312.658 ops/s
Iteration  29: 1029797.810 ops/s
Iteration  30: 1031305.572 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_drop_throws":
  1030294.716 ±(99.9%) 2558.569 ops/s [Average]
  (min, avg, max) = (1018620.458, 1030294.716, 1036856.355), stdev = 3829.547
  CI (99.9%): [1027736.146, 1032853.285] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_drop_throws  thrpt   30  1030294.716 ± 2558.569  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_each$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_each

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12227173.515 ops/s
# Warmup Iteration   2: 24342184.409 ops/s
# Warmup Iteration   3: 25636458.189 ops/s
# Warmup Iteration   4: 22210618.921 ops/s
# Warmup Iteration   5: 25909700.888 ops/s
# Warmup Iteration   6: 25726391.466 ops/s
# Warmup Iteration   7: 25837176.852 ops/s
# Warmup Iteration   8: 25922680.097 ops/s
# Warmup Iteration   9: 25833073.209 ops/s
# Warmup Iteration  10: 25851807.445 ops/s
# Warmup Iteration  11: 25927783.746 ops/s
# Warmup Iteration  12: 25890760.272 ops/s
# Warmup Iteration  13: 25873999.403 ops/s
# Warmup Iteration  14: 25900430.653 ops/s
# Warmup Iteration  15: 25971608.233 ops/s
# Warmup Iteration  16: 25875349.075 ops/s
# Warmup Iteration  17: 25924422.974 ops/s
# Warmup Iteration  18: 25894340.790 ops/s
# Warmup Iteration  19: 25984861.909 ops/s
# Warmup Iteration  20: 25945735.444 ops/s
# Warmup Iteration  21: 25992474.644 ops/s
# Warmup Iteration  22: 25993920.907 ops/s
# Warmup Iteration  23: 26042920.606 ops/s
# Warmup Iteration  24: 25999331.830 ops/s
# Warmup Iteration  25: 25799525.221 ops/s
# Warmup Iteration  26: 26001994.537 ops/s
# Warmup Iteration  27: 25965355.212 ops/s
# Warmup Iteration  28: 25963007.807 ops/s
# Warmup Iteration  29: 25915874.140 ops/s
# Warmup Iteration  30: 25962402.366 ops/s
Iteration   1: 25537844.375 ops/s
Iteration   2: 25968599.897 ops/s
Iteration   3: 25933272.685 ops/s
Iteration   4: 25985269.643 ops/s
Iteration   5: 25911717.923 ops/s
Iteration   6: 25976926.042 ops/s
Iteration   7: 25949477.784 ops/s
Iteration   8: 25955762.904 ops/s
Iteration   9: 25948771.749 ops/s
Iteration  10: 25981716.475 ops/s
Iteration  11: 25941244.679 ops/s
Iteration  12: 25972358.050 ops/s
Iteration  13: 25941837.133 ops/s
Iteration  14: 25944977.419 ops/s
Iteration  15: 25944339.105 ops/s
Iteration  16: 25913228.811 ops/s
Iteration  17: 25927354.638 ops/s
Iteration  18: 25917104.875 ops/s
Iteration  19: 25928369.416 ops/s
Iteration  20: 25896130.130 ops/s
Iteration  21: 25873452.733 ops/s
Iteration  22: 25184175.783 ops/s
Iteration  23: 26009946.033 ops/s
Iteration  24: 25985142.069 ops/s
Iteration  25: 25935953.790 ops/s
Iteration  26: 25972030.698 ops/s
Iteration  27: 25965233.916 ops/s
Iteration  28: 26003990.695 ops/s
Iteration  29: 25977089.007 ops/s
Iteration  30: 26003495.386 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_each":
  25912893.795 ±(99.9%) 107105.539 ops/s [Average]
  (min, avg, max) = (25184175.783, 25912893.795, 26009946.033), stdev = 160310.540
  CI (99.9%): [25805788.256, 26019999.334] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score        Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_each  thrpt   30  25912893.795 ± 107105.539  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_equalsAndHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_equalsAndHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 35436.914 ops/s
# Warmup Iteration   2: 54124.548 ops/s
# Warmup Iteration   3: 74628.372 ops/s
# Warmup Iteration   4: 73638.006 ops/s
# Warmup Iteration   5: 73946.927 ops/s
# Warmup Iteration   6: 73786.860 ops/s
# Warmup Iteration   7: 74107.295 ops/s
# Warmup Iteration   8: 70155.442 ops/s
# Warmup Iteration   9: 66013.120 ops/s
# Warmup Iteration  10: 73918.497 ops/s
# Warmup Iteration  11: 74186.238 ops/s
# Warmup Iteration  12: 73882.327 ops/s
# Warmup Iteration  13: 74096.437 ops/s
# Warmup Iteration  14: 74055.054 ops/s
# Warmup Iteration  15: 74155.680 ops/s
# Warmup Iteration  16: 74100.642 ops/s
# Warmup Iteration  17: 73907.001 ops/s
# Warmup Iteration  18: 74021.363 ops/s
# Warmup Iteration  19: 73964.352 ops/s
# Warmup Iteration  20: 73858.832 ops/s
# Warmup Iteration  21: 73828.803 ops/s
# Warmup Iteration  22: 74006.540 ops/s
# Warmup Iteration  23: 73838.084 ops/s
# Warmup Iteration  24: 73940.146 ops/s
# Warmup Iteration  25: 73969.151 ops/s
# Warmup Iteration  26: 73906.633 ops/s
# Warmup Iteration  27: 74005.829 ops/s
# Warmup Iteration  28: 73791.454 ops/s
# Warmup Iteration  29: 73874.509 ops/s
# Warmup Iteration  30: 73747.416 ops/s
Iteration   1: 73568.148 ops/s
Iteration   2: 73818.592 ops/s
Iteration   3: 73926.186 ops/s
Iteration   4: 73747.334 ops/s
Iteration   5: 73972.802 ops/s
Iteration   6: 70682.653 ops/s
Iteration   7: 71757.364 ops/s
Iteration   8: 70862.229 ops/s
Iteration   9: 72846.466 ops/s
Iteration  10: 73659.471 ops/s
Iteration  11: 73739.344 ops/s
Iteration  12: 73573.354 ops/s
Iteration  13: 73827.659 ops/s
Iteration  14: 73948.416 ops/s
Iteration  15: 73735.490 ops/s
Iteration  16: 74393.649 ops/s
Iteration  17: 73983.904 ops/s
Iteration  18: 74186.464 ops/s
Iteration  19: 74056.982 ops/s
Iteration  20: 73859.267 ops/s
Iteration  21: 73944.945 ops/s
Iteration  22: 74163.938 ops/s
Iteration  23: 74165.166 ops/s
Iteration  24: 74375.883 ops/s
Iteration  25: 74296.792 ops/s
Iteration  26: 74088.082 ops/s
Iteration  27: 74149.859 ops/s
Iteration  28: 74116.125 ops/s
Iteration  29: 74182.984 ops/s
Iteration  30: 74158.464 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_equalsAndHashCode":
  73659.600 ±(99.9%) 621.491 ops/s [Average]
  (min, avg, max) = (70682.653, 73659.600, 74393.649), stdev = 930.218
  CI (99.9%): [73038.109, 74281.091] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt      Score     Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_equalsAndHashCode  thrpt   30  73659.600 ± 621.491  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_flatCollect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_flatCollect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1553364.604 ops/s
# Warmup Iteration   2: 3814747.947 ops/s
# Warmup Iteration   3: 3901792.312 ops/s
# Warmup Iteration   4: 3223174.330 ops/s
# Warmup Iteration   5: 3913736.320 ops/s
# Warmup Iteration   6: 3903991.304 ops/s
# Warmup Iteration   7: 3911927.850 ops/s
# Warmup Iteration   8: 3909071.676 ops/s
# Warmup Iteration   9: 3904857.288 ops/s
# Warmup Iteration  10: 3905809.937 ops/s
# Warmup Iteration  11: 3901991.771 ops/s
# Warmup Iteration  12: 3882492.375 ops/s
# Warmup Iteration  13: 3898999.744 ops/s
# Warmup Iteration  14: 3907457.527 ops/s
# Warmup Iteration  15: 3914034.354 ops/s
# Warmup Iteration  16: 3915810.566 ops/s
# Warmup Iteration  17: 3912618.068 ops/s
# Warmup Iteration  18: 3912475.420 ops/s
# Warmup Iteration  19: 3917204.370 ops/s
# Warmup Iteration  20: 3911891.340 ops/s
# Warmup Iteration  21: 3912537.323 ops/s
# Warmup Iteration  22: 3911547.632 ops/s
# Warmup Iteration  23: 3912923.908 ops/s
# Warmup Iteration  24: 3898089.841 ops/s
# Warmup Iteration  25: 3902485.440 ops/s
# Warmup Iteration  26: 3905374.914 ops/s
# Warmup Iteration  27: 3899872.409 ops/s
# Warmup Iteration  28: 3898286.451 ops/s
# Warmup Iteration  29: 3906060.242 ops/s
# Warmup Iteration  30: 3916047.393 ops/s
Iteration   1: 3911556.083 ops/s
Iteration   2: 3890883.176 ops/s
Iteration   3: 3883465.577 ops/s
Iteration   4: 3914962.685 ops/s
Iteration   5: 3918175.727 ops/s
Iteration   6: 3913178.939 ops/s
Iteration   7: 3917966.799 ops/s
Iteration   8: 3913474.451 ops/s
Iteration   9: 3910833.743 ops/s
Iteration  10: 3912515.260 ops/s
Iteration  11: 3901604.146 ops/s
Iteration  12: 3914735.989 ops/s
Iteration  13: 3921469.645 ops/s
Iteration  14: 3912703.941 ops/s
Iteration  15: 3910149.040 ops/s
Iteration  16: 3905110.921 ops/s
Iteration  17: 3908043.549 ops/s
Iteration  18: 3907332.916 ops/s
Iteration  19: 3911098.035 ops/s
Iteration  20: 3901408.426 ops/s
Iteration  21: 3891622.128 ops/s
Iteration  22: 3891650.703 ops/s
Iteration  23: 3900565.750 ops/s
Iteration  24: 3909249.219 ops/s
Iteration  25: 3897325.978 ops/s
Iteration  26: 3906702.987 ops/s
Iteration  27: 3905180.878 ops/s
Iteration  28: 3906188.120 ops/s
Iteration  29: 3908622.502 ops/s
Iteration  30: 3901973.051 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_flatCollect":
  3906658.345 ±(99.9%) 5953.019 ops/s [Average]
  (min, avg, max) = (3883465.577, 3906658.345, 3921469.645), stdev = 8910.199
  CI (99.9%): [3900705.327, 3912611.364] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_flatCollect  thrpt   30  3906658.345 ± 5953.019  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_flatCollectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_flatCollectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1527035.726 ops/s
# Warmup Iteration   2: 3806484.422 ops/s
# Warmup Iteration   3: 3772203.120 ops/s
# Warmup Iteration   4: 3133818.888 ops/s
# Warmup Iteration   5: 3781245.987 ops/s
# Warmup Iteration   6: 3774929.618 ops/s
# Warmup Iteration   7: 3788228.963 ops/s
# Warmup Iteration   8: 3761004.992 ops/s
# Warmup Iteration   9: 3780403.041 ops/s
# Warmup Iteration  10: 3789763.754 ops/s
# Warmup Iteration  11: 3776824.121 ops/s
# Warmup Iteration  12: 3783711.890 ops/s
# Warmup Iteration  13: 3781741.874 ops/s
# Warmup Iteration  14: 3694783.736 ops/s
# Warmup Iteration  15: 3787465.613 ops/s
# Warmup Iteration  16: 3788520.178 ops/s
# Warmup Iteration  17: 3789743.373 ops/s
# Warmup Iteration  18: 3787041.775 ops/s
# Warmup Iteration  19: 3785128.947 ops/s
# Warmup Iteration  20: 3781290.166 ops/s
# Warmup Iteration  21: 3729586.104 ops/s
# Warmup Iteration  22: 3775412.176 ops/s
# Warmup Iteration  23: 3763275.933 ops/s
# Warmup Iteration  24: 3784523.408 ops/s
# Warmup Iteration  25: 3778303.579 ops/s
# Warmup Iteration  26: 3775633.368 ops/s
# Warmup Iteration  27: 3776571.121 ops/s
# Warmup Iteration  28: 3785476.313 ops/s
# Warmup Iteration  29: 3781263.005 ops/s
# Warmup Iteration  30: 3791594.004 ops/s
Iteration   1: 3799699.281 ops/s
Iteration   2: 3792245.963 ops/s
Iteration   3: 3779171.946 ops/s
Iteration   4: 3792489.814 ops/s
Iteration   5: 3779788.142 ops/s
Iteration   6: 3792879.020 ops/s
Iteration   7: 3798927.369 ops/s
Iteration   8: 3790024.736 ops/s
Iteration   9: 3794581.813 ops/s
Iteration  10: 3789256.945 ops/s
Iteration  11: 3796010.928 ops/s
Iteration  12: 3790879.420 ops/s
Iteration  13: 3792604.957 ops/s
Iteration  14: 3794394.969 ops/s
Iteration  15: 3804826.870 ops/s
Iteration  16: 3793430.413 ops/s
Iteration  17: 3790636.275 ops/s
Iteration  18: 3788057.576 ops/s
Iteration  19: 3792113.779 ops/s
Iteration  20: 3784307.704 ops/s
Iteration  21: 3793028.326 ops/s
Iteration  22: 3781838.128 ops/s
Iteration  23: 3789198.895 ops/s
Iteration  24: 3789299.743 ops/s
Iteration  25: 3799545.750 ops/s
Iteration  26: 3790790.572 ops/s
Iteration  27: 3789220.527 ops/s
Iteration  28: 3796290.219 ops/s
Iteration  29: 3787410.929 ops/s
Iteration  30: 3793587.420 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_flatCollectWith":
  3791551.281 ±(99.9%) 3779.941 ops/s [Average]
  (min, avg, max) = (3779171.946, 3791551.281, 3804826.870), stdev = 5657.639
  CI (99.9%): [3787771.340, 3795331.222] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_flatCollectWith  thrpt   30  3791551.281 ± 3779.941  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_flatCollectWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_flatCollectWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2127438.330 ops/s
# Warmup Iteration   2: 5248784.286 ops/s
# Warmup Iteration   3: 5275963.319 ops/s
# Warmup Iteration   4: 4339087.472 ops/s
# Warmup Iteration   5: 5272456.233 ops/s
# Warmup Iteration   6: 5272879.474 ops/s
# Warmup Iteration   7: 5272321.527 ops/s
# Warmup Iteration   8: 5191563.028 ops/s
# Warmup Iteration   9: 5261237.795 ops/s
# Warmup Iteration  10: 5262634.039 ops/s
# Warmup Iteration  11: 5272574.661 ops/s
# Warmup Iteration  12: 5268464.111 ops/s
# Warmup Iteration  13: 5283542.653 ops/s
# Warmup Iteration  14: 5280121.379 ops/s
# Warmup Iteration  15: 5275555.432 ops/s
# Warmup Iteration  16: 5272756.916 ops/s
# Warmup Iteration  17: 5274783.328 ops/s
# Warmup Iteration  18: 5280660.491 ops/s
# Warmup Iteration  19: 5270440.190 ops/s
# Warmup Iteration  20: 5279023.813 ops/s
# Warmup Iteration  21: 5283887.535 ops/s
# Warmup Iteration  22: 5292230.695 ops/s
# Warmup Iteration  23: 5277400.824 ops/s
# Warmup Iteration  24: 5279166.918 ops/s
# Warmup Iteration  25: 5291613.237 ops/s
# Warmup Iteration  26: 5275031.772 ops/s
# Warmup Iteration  27: 5284834.686 ops/s
# Warmup Iteration  28: 5214249.181 ops/s
# Warmup Iteration  29: 5255794.809 ops/s
# Warmup Iteration  30: 5231181.382 ops/s
Iteration   1: 5244351.219 ops/s
Iteration   2: 5236420.434 ops/s
Iteration   3: 5232020.438 ops/s
Iteration   4: 5209480.592 ops/s
Iteration   5: 5224063.032 ops/s
Iteration   6: 5225984.289 ops/s
Iteration   7: 5239820.099 ops/s
Iteration   8: 5258413.375 ops/s
Iteration   9: 5264352.413 ops/s
Iteration  10: 5193887.153 ops/s
Iteration  11: 5247721.471 ops/s
Iteration  12: 5167925.263 ops/s
Iteration  13: 5263693.863 ops/s
Iteration  14: 5271734.461 ops/s
Iteration  15: 5272629.544 ops/s
Iteration  16: 5278246.487 ops/s
Iteration  17: 5255483.564 ops/s
Iteration  18: 5170030.752 ops/s
Iteration  19: 5238496.491 ops/s
Iteration  20: 5209353.532 ops/s
Iteration  21: 5233643.438 ops/s
Iteration  22: 5244027.154 ops/s
Iteration  23: 5205847.361 ops/s
Iteration  24: 5066512.212 ops/s
Iteration  25: 4878391.228 ops/s
Iteration  26: 5000822.124 ops/s
Iteration  27: 5207338.545 ops/s
Iteration  28: 5255194.384 ops/s
Iteration  29: 5217650.411 ops/s
Iteration  30: 5201935.047 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_flatCollectWithTarget":
  5207182.346 ±(99.9%) 56879.264 ops/s [Average]
  (min, avg, max) = (4878391.228, 5207182.346, 5278246.487), stdev = 85134.211
  CI (99.9%): [5150303.082, 5264061.609] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_flatCollectWithTarget  thrpt   30  5207182.346 ± 56879.264  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12187591.138 ops/s
# Warmup Iteration   2: 24228131.973 ops/s
# Warmup Iteration   3: 25803297.183 ops/s
# Warmup Iteration   4: 22482117.397 ops/s
# Warmup Iteration   5: 26264958.909 ops/s
# Warmup Iteration   6: 26244368.381 ops/s
# Warmup Iteration   7: 26287457.851 ops/s
# Warmup Iteration   8: 26301548.063 ops/s
# Warmup Iteration   9: 26257622.588 ops/s
# Warmup Iteration  10: 26297559.384 ops/s
# Warmup Iteration  11: 26294712.171 ops/s
# Warmup Iteration  12: 26323060.377 ops/s
# Warmup Iteration  13: 26304357.643 ops/s
# Warmup Iteration  14: 26311711.482 ops/s
# Warmup Iteration  15: 26306413.387 ops/s
# Warmup Iteration  16: 26272205.443 ops/s
# Warmup Iteration  17: 26266381.272 ops/s
# Warmup Iteration  18: 26324119.927 ops/s
# Warmup Iteration  19: 26352049.453 ops/s
# Warmup Iteration  20: 26279404.010 ops/s
# Warmup Iteration  21: 26320736.790 ops/s
# Warmup Iteration  22: 26262880.930 ops/s
# Warmup Iteration  23: 26326085.564 ops/s
# Warmup Iteration  24: 26349130.272 ops/s
# Warmup Iteration  25: 26277041.588 ops/s
# Warmup Iteration  26: 26340395.742 ops/s
# Warmup Iteration  27: 26332453.167 ops/s
# Warmup Iteration  28: 26332199.877 ops/s
# Warmup Iteration  29: 26262639.131 ops/s
# Warmup Iteration  30: 26224769.249 ops/s
Iteration   1: 26310591.548 ops/s
Iteration   2: 26252458.553 ops/s
Iteration   3: 26291827.553 ops/s
Iteration   4: 26312783.553 ops/s
Iteration   5: 26330579.210 ops/s
Iteration   6: 26336305.120 ops/s
Iteration   7: 26372101.839 ops/s
Iteration   8: 26314632.025 ops/s
Iteration   9: 26351674.697 ops/s
Iteration  10: 26351514.861 ops/s
Iteration  11: 26359651.308 ops/s
Iteration  12: 26331504.688 ops/s
Iteration  13: 26276754.931 ops/s
Iteration  14: 26313259.994 ops/s
Iteration  15: 26136494.894 ops/s
Iteration  16: 26260307.731 ops/s
Iteration  17: 26294006.537 ops/s
Iteration  18: 26313690.722 ops/s
Iteration  19: 26228506.160 ops/s
Iteration  20: 26131878.765 ops/s
Iteration  21: 26323817.801 ops/s
Iteration  22: 26301300.656 ops/s
Iteration  23: 26353130.902 ops/s
Iteration  24: 26376607.385 ops/s
Iteration  25: 26394677.986 ops/s
Iteration  26: 26284812.159 ops/s
Iteration  27: 26250884.748 ops/s
Iteration  28: 26304057.993 ops/s
Iteration  29: 26250360.941 ops/s
Iteration  30: 26344243.347 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_forEach":
  26301813.954 ±(99.9%) 40767.374 ops/s [Average]
  (min, avg, max) = (26131878.765, 26301813.954, 26394677.986), stdev = 61018.691
  CI (99.9%): [26261046.580, 26342581.328] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_forEach  thrpt   30  26301813.954 ± 40767.374  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_forEachFromTo$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_forEachFromTo

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 301666.491 ops/s
# Warmup Iteration   2: 321818.765 ops/s
# Warmup Iteration   3: 379550.645 ops/s
# Warmup Iteration   4: 404920.366 ops/s
# Warmup Iteration   5: 405072.814 ops/s
# Warmup Iteration   6: 404124.616 ops/s
# Warmup Iteration   7: 405139.137 ops/s
# Warmup Iteration   8: 405044.442 ops/s
# Warmup Iteration   9: 405711.275 ops/s
# Warmup Iteration  10: 404724.899 ops/s
# Warmup Iteration  11: 404854.316 ops/s
# Warmup Iteration  12: 403681.987 ops/s
# Warmup Iteration  13: 401744.355 ops/s
# Warmup Iteration  14: 347676.504 ops/s
# Warmup Iteration  15: 402859.942 ops/s
# Warmup Iteration  16: 404398.420 ops/s
# Warmup Iteration  17: 425681.319 ops/s
# Warmup Iteration  18: 426152.724 ops/s
# Warmup Iteration  19: 425519.631 ops/s
# Warmup Iteration  20: 425282.569 ops/s
# Warmup Iteration  21: 419953.908 ops/s
# Warmup Iteration  22: 426806.856 ops/s
# Warmup Iteration  23: 425682.264 ops/s
# Warmup Iteration  24: 425040.149 ops/s
# Warmup Iteration  25: 424973.836 ops/s
# Warmup Iteration  26: 425363.540 ops/s
# Warmup Iteration  27: 425298.772 ops/s
# Warmup Iteration  28: 424449.636 ops/s
# Warmup Iteration  29: 426209.924 ops/s
# Warmup Iteration  30: 425028.899 ops/s
Iteration   1: 424526.080 ops/s
Iteration   2: 425377.021 ops/s
Iteration   3: 425442.469 ops/s
Iteration   4: 425345.213 ops/s
Iteration   5: 421344.983 ops/s
Iteration   6: 413824.735 ops/s
Iteration   7: 423394.295 ops/s
Iteration   8: 424191.418 ops/s
Iteration   9: 424455.227 ops/s
Iteration  10: 425258.817 ops/s
Iteration  11: 424206.969 ops/s
Iteration  12: 423934.832 ops/s
Iteration  13: 423206.602 ops/s
Iteration  14: 422991.129 ops/s
Iteration  15: 418550.577 ops/s
Iteration  16: 425084.362 ops/s
Iteration  17: 424467.276 ops/s
Iteration  18: 423002.210 ops/s
Iteration  19: 424247.838 ops/s
Iteration  20: 423480.240 ops/s
Iteration  21: 424998.221 ops/s
Iteration  22: 425433.592 ops/s
Iteration  23: 425004.186 ops/s
Iteration  24: 426340.207 ops/s
Iteration  25: 427255.598 ops/s
Iteration  26: 424466.899 ops/s
Iteration  27: 424460.149 ops/s
Iteration  28: 426550.447 ops/s
Iteration  29: 423656.824 ops/s
Iteration  30: 424208.430 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_forEachFromTo":
  423956.895 ±(99.9%) 1665.119 ops/s [Average]
  (min, avg, max) = (413824.735, 423956.895, 427255.598), stdev = 2492.272
  CI (99.9%): [422291.776, 425622.014] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_forEachFromTo  thrpt   30  423956.895 ± 1665.119  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_forEachWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_forEachWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9047689.248 ops/s
# Warmup Iteration   2: 18590327.481 ops/s
# Warmup Iteration   3: 19219666.284 ops/s
# Warmup Iteration   4: 17233931.035 ops/s
# Warmup Iteration   5: 19732746.291 ops/s
# Warmup Iteration   6: 19462436.027 ops/s
# Warmup Iteration   7: 19727995.254 ops/s
# Warmup Iteration   8: 19731696.453 ops/s
# Warmup Iteration   9: 19732171.774 ops/s
# Warmup Iteration  10: 19753328.289 ops/s
# Warmup Iteration  11: 19727466.940 ops/s
# Warmup Iteration  12: 19739486.474 ops/s
# Warmup Iteration  13: 19725756.973 ops/s
# Warmup Iteration  14: 19658450.333 ops/s
# Warmup Iteration  15: 19683872.002 ops/s
# Warmup Iteration  16: 19729504.028 ops/s
# Warmup Iteration  17: 19791011.840 ops/s
# Warmup Iteration  18: 19722906.757 ops/s
# Warmup Iteration  19: 19748408.061 ops/s
# Warmup Iteration  20: 19827489.318 ops/s
# Warmup Iteration  21: 19799844.977 ops/s
# Warmup Iteration  22: 19805564.451 ops/s
# Warmup Iteration  23: 19841849.783 ops/s
# Warmup Iteration  24: 19737384.614 ops/s
# Warmup Iteration  25: 19807630.094 ops/s
# Warmup Iteration  26: 19814519.084 ops/s
# Warmup Iteration  27: 19802300.562 ops/s
# Warmup Iteration  28: 19788957.483 ops/s
# Warmup Iteration  29: 19788607.829 ops/s
# Warmup Iteration  30: 19812573.969 ops/s
Iteration   1: 19787111.856 ops/s
Iteration   2: 19731690.768 ops/s
Iteration   3: 19794985.988 ops/s
Iteration   4: 19824919.913 ops/s
Iteration   5: 19845132.495 ops/s
Iteration   6: 19799200.196 ops/s
Iteration   7: 19743059.084 ops/s
Iteration   8: 19710774.252 ops/s
Iteration   9: 19832835.922 ops/s
Iteration  10: 19813175.760 ops/s
Iteration  11: 19889080.392 ops/s
Iteration  12: 19853330.853 ops/s
Iteration  13: 19873025.933 ops/s
Iteration  14: 19876244.224 ops/s
Iteration  15: 19841017.076 ops/s
Iteration  16: 19834598.750 ops/s
Iteration  17: 19777594.942 ops/s
Iteration  18: 19734940.374 ops/s
Iteration  19: 19617006.307 ops/s
Iteration  20: 19046425.018 ops/s
Iteration  21: 19263010.780 ops/s
Iteration  22: 19538421.369 ops/s
Iteration  23: 19785869.171 ops/s
Iteration  24: 19798919.190 ops/s
Iteration  25: 19783209.256 ops/s
Iteration  26: 19743498.704 ops/s
Iteration  27: 19767236.923 ops/s
Iteration  28: 19741522.216 ops/s
Iteration  29: 19730959.406 ops/s
Iteration  30: 19785127.954 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_forEachWith":
  19738797.502 ±(99.9%) 118249.237 ops/s [Average]
  (min, avg, max) = (19046425.018, 19738797.502, 19889080.392), stdev = 176989.904
  CI (99.9%): [19620548.265, 19857046.739] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score        Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_forEachWith  thrpt   30  19738797.502 ± 118249.237  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_forEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_forEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 15576333.399 ops/s
# Warmup Iteration   2: 32036969.797 ops/s
# Warmup Iteration   3: 30922710.291 ops/s
# Warmup Iteration   4: 29372389.632 ops/s
# Warmup Iteration   5: 32672727.285 ops/s
# Warmup Iteration   6: 32629332.486 ops/s
# Warmup Iteration   7: 32680955.507 ops/s
# Warmup Iteration   8: 32621016.671 ops/s
# Warmup Iteration   9: 32546020.267 ops/s
# Warmup Iteration  10: 32808660.420 ops/s
# Warmup Iteration  11: 32764849.955 ops/s
# Warmup Iteration  12: 32600705.523 ops/s
# Warmup Iteration  13: 32716961.023 ops/s
# Warmup Iteration  14: 32686106.638 ops/s
# Warmup Iteration  15: 32560589.263 ops/s
# Warmup Iteration  16: 32705290.390 ops/s
# Warmup Iteration  17: 32711354.735 ops/s
# Warmup Iteration  18: 32663985.605 ops/s
# Warmup Iteration  19: 32594480.017 ops/s
# Warmup Iteration  20: 32697780.095 ops/s
# Warmup Iteration  21: 32619642.169 ops/s
# Warmup Iteration  22: 32616821.538 ops/s
# Warmup Iteration  23: 32571222.186 ops/s
# Warmup Iteration  24: 32543260.954 ops/s
# Warmup Iteration  25: 32599449.634 ops/s
# Warmup Iteration  26: 32663525.897 ops/s
# Warmup Iteration  27: 32706805.521 ops/s
# Warmup Iteration  28: 32701770.360 ops/s
# Warmup Iteration  29: 32655349.839 ops/s
# Warmup Iteration  30: 32641041.308 ops/s
Iteration   1: 32716139.092 ops/s
Iteration   2: 32429067.512 ops/s
Iteration   3: 32729488.614 ops/s
Iteration   4: 32723400.905 ops/s
Iteration   5: 32748534.256 ops/s
Iteration   6: 32842416.015 ops/s
Iteration   7: 32694523.467 ops/s
Iteration   8: 32740046.800 ops/s
Iteration   9: 32787205.886 ops/s
Iteration  10: 32742152.762 ops/s
Iteration  11: 32795845.364 ops/s
Iteration  12: 32680999.655 ops/s
Iteration  13: 32772941.450 ops/s
Iteration  14: 32743220.378 ops/s
Iteration  15: 32660035.721 ops/s
Iteration  16: 32694214.436 ops/s
Iteration  17: 32720471.551 ops/s
Iteration  18: 32667555.718 ops/s
Iteration  19: 32779864.028 ops/s
Iteration  20: 32651492.187 ops/s
Iteration  21: 32661582.842 ops/s
Iteration  22: 32557123.534 ops/s
Iteration  23: 32482815.523 ops/s
Iteration  24: 32620165.464 ops/s
Iteration  25: 32662590.797 ops/s
Iteration  26: 32577004.656 ops/s
Iteration  27: 32591414.036 ops/s
Iteration  28: 32643421.391 ops/s
Iteration  29: 32683283.377 ops/s
Iteration  30: 32626757.107 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_forEachWithIndex":
  32680859.151 ±(99.9%) 60641.130 ops/s [Average]
  (min, avg, max) = (32429067.512, 32680859.151, 32842416.015), stdev = 90764.796
  CI (99.9%): [32620218.021, 32741500.281] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_forEachWithIndex  thrpt   30  32680859.151 ± 60641.130  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_forEachWithIndexFromTo$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_forEachWithIndexFromTo

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 296254.077 ops/s
# Warmup Iteration   2: 318921.151 ops/s
# Warmup Iteration   3: 377795.061 ops/s
# Warmup Iteration   4: 400206.059 ops/s
# Warmup Iteration   5: 401238.074 ops/s
# Warmup Iteration   6: 398102.351 ops/s
# Warmup Iteration   7: 399252.390 ops/s
# Warmup Iteration   8: 398867.016 ops/s
# Warmup Iteration   9: 400937.761 ops/s
# Warmup Iteration  10: 399025.193 ops/s
# Warmup Iteration  11: 401525.889 ops/s
# Warmup Iteration  12: 401052.380 ops/s
# Warmup Iteration  13: 386975.391 ops/s
# Warmup Iteration  14: 354108.301 ops/s
# Warmup Iteration  15: 400850.116 ops/s
# Warmup Iteration  16: 399679.118 ops/s
# Warmup Iteration  17: 417949.222 ops/s
# Warmup Iteration  18: 417517.682 ops/s
# Warmup Iteration  19: 417727.310 ops/s
# Warmup Iteration  20: 417637.700 ops/s
# Warmup Iteration  21: 416961.927 ops/s
# Warmup Iteration  22: 417987.671 ops/s
# Warmup Iteration  23: 416115.739 ops/s
# Warmup Iteration  24: 419237.314 ops/s
# Warmup Iteration  25: 418032.140 ops/s
# Warmup Iteration  26: 417476.342 ops/s
# Warmup Iteration  27: 417381.579 ops/s
# Warmup Iteration  28: 418619.585 ops/s
# Warmup Iteration  29: 418564.967 ops/s
# Warmup Iteration  30: 416872.069 ops/s
Iteration   1: 416551.832 ops/s
Iteration   2: 416595.070 ops/s
Iteration   3: 417693.700 ops/s
Iteration   4: 417461.259 ops/s
Iteration   5: 418354.442 ops/s
Iteration   6: 417110.973 ops/s
Iteration   7: 416789.729 ops/s
Iteration   8: 418944.093 ops/s
Iteration   9: 416257.723 ops/s
Iteration  10: 417807.733 ops/s
Iteration  11: 417204.228 ops/s
Iteration  12: 413948.065 ops/s
Iteration  13: 415796.776 ops/s
Iteration  14: 415225.530 ops/s
Iteration  15: 417737.562 ops/s
Iteration  16: 418006.327 ops/s
Iteration  17: 415326.504 ops/s
Iteration  18: 413130.185 ops/s
Iteration  19: 416484.539 ops/s
Iteration  20: 416369.580 ops/s
Iteration  21: 417850.874 ops/s
Iteration  22: 415986.805 ops/s
Iteration  23: 414496.735 ops/s
Iteration  24: 416321.701 ops/s
Iteration  25: 416451.538 ops/s
Iteration  26: 416322.468 ops/s
Iteration  27: 414700.508 ops/s
Iteration  28: 415541.163 ops/s
Iteration  29: 417131.238 ops/s
Iteration  30: 418212.000 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_forEachWithIndexFromTo":
  416527.029 ±(99.9%) 905.839 ops/s [Average]
  (min, avg, max) = (413130.185, 416527.029, 418944.093), stdev = 1355.817
  CI (99.9%): [415621.190, 417432.868] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score     Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_forEachWithIndexFromTo  thrpt   30  416527.029 ± 905.839  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_forLoop$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_forLoop

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 46431810.234 ops/s
# Warmup Iteration   2: 89139507.362 ops/s
# Warmup Iteration   3: 79339713.371 ops/s
# Warmup Iteration   4: 92756226.463 ops/s
# Warmup Iteration   5: 93073793.274 ops/s
# Warmup Iteration   6: 92622914.649 ops/s
# Warmup Iteration   7: 92554699.436 ops/s
# Warmup Iteration   8: 92905675.924 ops/s
# Warmup Iteration   9: 92758556.224 ops/s
# Warmup Iteration  10: 92195528.832 ops/s
# Warmup Iteration  11: 92689856.292 ops/s
# Warmup Iteration  12: 92986157.526 ops/s
# Warmup Iteration  13: 93049111.933 ops/s
# Warmup Iteration  14: 92951251.309 ops/s
# Warmup Iteration  15: 92992712.997 ops/s
# Warmup Iteration  16: 92768880.789 ops/s
# Warmup Iteration  17: 92644773.505 ops/s
# Warmup Iteration  18: 91453933.338 ops/s
# Warmup Iteration  19: 92667795.386 ops/s
# Warmup Iteration  20: 93354445.813 ops/s
# Warmup Iteration  21: 92852838.820 ops/s
# Warmup Iteration  22: 93285508.213 ops/s
# Warmup Iteration  23: 93253745.473 ops/s
# Warmup Iteration  24: 93255176.898 ops/s
# Warmup Iteration  25: 93347815.111 ops/s
# Warmup Iteration  26: 93069871.306 ops/s
# Warmup Iteration  27: 93039923.284 ops/s
# Warmup Iteration  28: 93062251.876 ops/s
# Warmup Iteration  29: 93142473.661 ops/s
# Warmup Iteration  30: 92954705.642 ops/s
Iteration   1: 92933023.735 ops/s
Iteration   2: 92990596.420 ops/s
Iteration   3: 93097560.243 ops/s
Iteration   4: 92927534.015 ops/s
Iteration   5: 92980710.143 ops/s
Iteration   6: 93166232.057 ops/s
Iteration   7: 93277926.950 ops/s
Iteration   8: 93090263.490 ops/s
Iteration   9: 93146662.949 ops/s
Iteration  10: 93226516.979 ops/s
Iteration  11: 93062649.763 ops/s
Iteration  12: 93078006.624 ops/s
Iteration  13: 92983529.812 ops/s
Iteration  14: 93271666.358 ops/s
Iteration  15: 93012156.215 ops/s
Iteration  16: 93239632.686 ops/s
Iteration  17: 92883031.279 ops/s
Iteration  18: 92585458.916 ops/s
Iteration  19: 93160224.519 ops/s
Iteration  20: 93162279.564 ops/s
Iteration  21: 93108098.158 ops/s
Iteration  22: 93161893.092 ops/s
Iteration  23: 93040900.151 ops/s
Iteration  24: 93071467.552 ops/s
Iteration  25: 93056029.164 ops/s
Iteration  26: 93191787.506 ops/s
Iteration  27: 92998625.422 ops/s
Iteration  28: 92551770.486 ops/s
Iteration  29: 93208714.190 ops/s
Iteration  30: 93236651.009 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_forLoop":
  93063386.648 ±(99.9%) 114334.593 ops/s [Average]
  (min, avg, max) = (92551770.486, 93063386.648, 93277926.950), stdev = 171130.649
  CI (99.9%): [92949052.055, 93177721.241] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score        Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_forLoop  thrpt   30  93063386.648 ± 114334.593  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_get$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_get

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 373403.089 ops/s
# Warmup Iteration   2: 387106.624 ops/s
# Warmup Iteration   3: 468083.304 ops/s
# Warmup Iteration   4: 487060.116 ops/s
# Warmup Iteration   5: 487106.799 ops/s
# Warmup Iteration   6: 484511.006 ops/s
# Warmup Iteration   7: 488609.829 ops/s
# Warmup Iteration   8: 487232.972 ops/s
# Warmup Iteration   9: 487096.559 ops/s
# Warmup Iteration  10: 486850.575 ops/s
# Warmup Iteration  11: 485248.087 ops/s
# Warmup Iteration  12: 484620.366 ops/s
# Warmup Iteration  13: 428747.587 ops/s
# Warmup Iteration  14: 466567.737 ops/s
# Warmup Iteration  15: 483726.311 ops/s
# Warmup Iteration  16: 485386.520 ops/s
# Warmup Iteration  17: 512077.498 ops/s
# Warmup Iteration  18: 511481.956 ops/s
# Warmup Iteration  19: 512248.607 ops/s
# Warmup Iteration  20: 510881.804 ops/s
# Warmup Iteration  21: 511717.624 ops/s
# Warmup Iteration  22: 510329.039 ops/s
# Warmup Iteration  23: 507952.649 ops/s
# Warmup Iteration  24: 510186.075 ops/s
# Warmup Iteration  25: 510010.151 ops/s
# Warmup Iteration  26: 511922.032 ops/s
# Warmup Iteration  27: 510188.007 ops/s
# Warmup Iteration  28: 511405.736 ops/s
# Warmup Iteration  29: 511928.619 ops/s
# Warmup Iteration  30: 512048.902 ops/s
Iteration   1: 511960.443 ops/s
Iteration   2: 511421.602 ops/s
Iteration   3: 512201.785 ops/s
Iteration   4: 511339.274 ops/s
Iteration   5: 511657.604 ops/s
Iteration   6: 512766.918 ops/s
Iteration   7: 512304.010 ops/s
Iteration   8: 512314.688 ops/s
Iteration   9: 511840.268 ops/s
Iteration  10: 511962.637 ops/s
Iteration  11: 511335.261 ops/s
Iteration  12: 511889.753 ops/s
Iteration  13: 512807.847 ops/s
Iteration  14: 512456.984 ops/s
Iteration  15: 509581.027 ops/s
Iteration  16: 512999.923 ops/s
Iteration  17: 510784.244 ops/s
Iteration  18: 514881.130 ops/s
Iteration  19: 514154.725 ops/s
Iteration  20: 512803.535 ops/s
Iteration  21: 512266.608 ops/s
Iteration  22: 508624.026 ops/s
Iteration  23: 512459.639 ops/s
Iteration  24: 510446.361 ops/s
Iteration  25: 512247.344 ops/s
Iteration  26: 512532.072 ops/s
Iteration  27: 511371.486 ops/s
Iteration  28: 511439.649 ops/s
Iteration  29: 509002.130 ops/s
Iteration  30: 510668.177 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_get":
  511817.372 ±(99.9%) 876.208 ops/s [Average]
  (min, avg, max) = (508624.026, 511817.372, 514881.130), stdev = 1311.467
  CI (99.9%): [510941.164, 512693.579] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score     Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_get  thrpt   30  511817.372 ± 876.208  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_getFirst$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_getFirst

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 49367411.326 ops/s
# Warmup Iteration   2: 95050425.229 ops/s
# Warmup Iteration   3: 86684472.802 ops/s
# Warmup Iteration   4: 101277493.545 ops/s
# Warmup Iteration   5: 101015720.238 ops/s
# Warmup Iteration   6: 101111430.412 ops/s
# Warmup Iteration   7: 101088166.234 ops/s
# Warmup Iteration   8: 101378040.556 ops/s
# Warmup Iteration   9: 101115210.500 ops/s
# Warmup Iteration  10: 101253579.242 ops/s
# Warmup Iteration  11: 101205782.439 ops/s
# Warmup Iteration  12: 101145536.984 ops/s
# Warmup Iteration  13: 100969595.253 ops/s
# Warmup Iteration  14: 101400801.230 ops/s
# Warmup Iteration  15: 101392868.590 ops/s
# Warmup Iteration  16: 101334932.314 ops/s
# Warmup Iteration  17: 101290811.856 ops/s
# Warmup Iteration  18: 102641336.386 ops/s
# Warmup Iteration  19: 102865433.174 ops/s
# Warmup Iteration  20: 102592835.554 ops/s
# Warmup Iteration  21: 102641666.704 ops/s
# Warmup Iteration  22: 102762922.119 ops/s
# Warmup Iteration  23: 102576015.611 ops/s
# Warmup Iteration  24: 102326372.679 ops/s
# Warmup Iteration  25: 102616828.930 ops/s
# Warmup Iteration  26: 102887987.178 ops/s
# Warmup Iteration  27: 102444169.018 ops/s
# Warmup Iteration  28: 102859947.907 ops/s
# Warmup Iteration  29: 102831218.782 ops/s
# Warmup Iteration  30: 102503672.492 ops/s
Iteration   1: 102678883.777 ops/s
Iteration   2: 102901704.280 ops/s
Iteration   3: 102865413.930 ops/s
Iteration   4: 102900901.847 ops/s
Iteration   5: 102708564.821 ops/s
Iteration   6: 102684310.733 ops/s
Iteration   7: 102617850.578 ops/s
Iteration   8: 102432713.862 ops/s
Iteration   9: 102761175.948 ops/s
Iteration  10: 102932247.269 ops/s
Iteration  11: 103001423.046 ops/s
Iteration  12: 103016321.526 ops/s
Iteration  13: 102793299.550 ops/s
Iteration  14: 103053143.462 ops/s
Iteration  15: 102625996.142 ops/s
Iteration  16: 102454911.951 ops/s
Iteration  17: 102256149.224 ops/s
Iteration  18: 102009455.587 ops/s
Iteration  19: 102145606.398 ops/s
Iteration  20: 102951582.788 ops/s
Iteration  21: 102609629.634 ops/s
Iteration  22: 102802663.454 ops/s
Iteration  23: 102474719.442 ops/s
Iteration  24: 102688882.797 ops/s
Iteration  25: 102379788.167 ops/s
Iteration  26: 102415253.892 ops/s
Iteration  27: 102550032.060 ops/s
Iteration  28: 102803919.866 ops/s
Iteration  29: 102910168.416 ops/s
Iteration  30: 102541891.047 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_getFirst":
  102665620.183 ±(99.9%) 175438.308 ops/s [Average]
  (min, avg, max) = (102009455.587, 102665620.183, 103053143.462), stdev = 262587.821
  CI (99.9%): [102490181.875, 102841058.491] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt          Score        Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_getFirst  thrpt   30  102665620.183 ± 175438.308  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_getLast$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_getLast

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 50094484.703 ops/s
# Warmup Iteration   2: 94543398.251 ops/s
# Warmup Iteration   3: 86812317.445 ops/s
# Warmup Iteration   4: 101994822.373 ops/s
# Warmup Iteration   5: 102011121.356 ops/s
# Warmup Iteration   6: 102217570.507 ops/s
# Warmup Iteration   7: 102386282.904 ops/s
# Warmup Iteration   8: 101869855.544 ops/s
# Warmup Iteration   9: 102099850.977 ops/s
# Warmup Iteration  10: 99796828.916 ops/s
# Warmup Iteration  11: 101960856.577 ops/s
# Warmup Iteration  12: 101766287.971 ops/s
# Warmup Iteration  13: 102078859.781 ops/s
# Warmup Iteration  14: 101793219.752 ops/s
# Warmup Iteration  15: 101601935.811 ops/s
# Warmup Iteration  16: 101883059.110 ops/s
# Warmup Iteration  17: 101910602.469 ops/s
# Warmup Iteration  18: 101345757.233 ops/s
# Warmup Iteration  19: 101762204.427 ops/s
# Warmup Iteration  20: 101451925.958 ops/s
# Warmup Iteration  21: 101582587.193 ops/s
# Warmup Iteration  22: 101628819.861 ops/s
# Warmup Iteration  23: 101893831.074 ops/s
# Warmup Iteration  24: 101904439.827 ops/s
# Warmup Iteration  25: 102057140.301 ops/s
# Warmup Iteration  26: 101781631.863 ops/s
# Warmup Iteration  27: 101897866.476 ops/s
# Warmup Iteration  28: 101848289.446 ops/s
# Warmup Iteration  29: 101450018.934 ops/s
# Warmup Iteration  30: 102053268.734 ops/s
Iteration   1: 101968802.346 ops/s
Iteration   2: 101169381.100 ops/s
Iteration   3: 101911414.658 ops/s
Iteration   4: 101858440.263 ops/s
Iteration   5: 101963116.222 ops/s
Iteration   6: 102127826.906 ops/s
Iteration   7: 102014195.735 ops/s
Iteration   8: 101935154.393 ops/s
Iteration   9: 101771775.449 ops/s
Iteration  10: 101687987.821 ops/s
Iteration  11: 102010584.197 ops/s
Iteration  12: 102343163.878 ops/s
Iteration  13: 102494576.349 ops/s
Iteration  14: 102566209.374 ops/s
Iteration  15: 102047250.610 ops/s
Iteration  16: 102133676.292 ops/s
Iteration  17: 102308739.037 ops/s
Iteration  18: 102444482.340 ops/s
Iteration  19: 102121074.944 ops/s
Iteration  20: 102424648.608 ops/s
Iteration  21: 102223422.419 ops/s
Iteration  22: 101890389.780 ops/s
Iteration  23: 102287719.094 ops/s
Iteration  24: 101974835.352 ops/s
Iteration  25: 102265197.645 ops/s
Iteration  26: 101999147.276 ops/s
Iteration  27: 102101437.484 ops/s
Iteration  28: 102291679.872 ops/s
Iteration  29: 101545277.896 ops/s
Iteration  30: 101725044.799 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_getLast":
  102053555.071 ±(99.9%) 199616.232 ops/s [Average]
  (min, avg, max) = (101169381.100, 102053555.071, 102566209.374), stdev = 298776.201
  CI (99.9%): [101853938.839, 102253171.303] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt          Score        Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_getLast  thrpt   30  102053555.071 ± 199616.232  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_getOnly$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_getOnly

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 795914.881 ops/s
# Warmup Iteration   2: 814752.107 ops/s
# Warmup Iteration   3: 1046548.329 ops/s
# Warmup Iteration   4: 1047828.206 ops/s
# Warmup Iteration   5: 1048668.757 ops/s
# Warmup Iteration   6: 1039568.103 ops/s
# Warmup Iteration   7: 1046993.962 ops/s
# Warmup Iteration   8: 1050470.486 ops/s
# Warmup Iteration   9: 1036685.306 ops/s
# Warmup Iteration  10: 1039514.612 ops/s
# Warmup Iteration  11: 1039551.831 ops/s
# Warmup Iteration  12: 907636.585 ops/s
# Warmup Iteration  13: 1029301.734 ops/s
# Warmup Iteration  14: 1049736.589 ops/s
# Warmup Iteration  15: 1045866.705 ops/s
# Warmup Iteration  16: 1051700.145 ops/s
# Warmup Iteration  17: 1117630.206 ops/s
# Warmup Iteration  18: 1116322.348 ops/s
# Warmup Iteration  19: 1113238.037 ops/s
# Warmup Iteration  20: 1114174.970 ops/s
# Warmup Iteration  21: 1111322.096 ops/s
# Warmup Iteration  22: 1110612.380 ops/s
# Warmup Iteration  23: 1116017.079 ops/s
# Warmup Iteration  24: 1115714.606 ops/s
# Warmup Iteration  25: 1117518.948 ops/s
# Warmup Iteration  26: 1116567.114 ops/s
# Warmup Iteration  27: 1118365.788 ops/s
# Warmup Iteration  28: 1117311.947 ops/s
# Warmup Iteration  29: 1118122.314 ops/s
# Warmup Iteration  30: 1117996.339 ops/s
Iteration   1: 1117572.192 ops/s
Iteration   2: 1113590.887 ops/s
Iteration   3: 1114167.556 ops/s
Iteration   4: 1116201.924 ops/s
Iteration   5: 1116597.066 ops/s
Iteration   6: 1115687.926 ops/s
Iteration   7: 1112236.303 ops/s
Iteration   8: 1120088.908 ops/s
Iteration   9: 1116477.152 ops/s
Iteration  10: 1116280.106 ops/s
Iteration  11: 1118978.967 ops/s
Iteration  12: 1113066.260 ops/s
Iteration  13: 1115691.784 ops/s
Iteration  14: 1116159.265 ops/s
Iteration  15: 1114559.807 ops/s
Iteration  16: 1118151.623 ops/s
Iteration  17: 1117882.831 ops/s
Iteration  18: 1118680.248 ops/s
Iteration  19: 1118011.138 ops/s
Iteration  20: 1115571.596 ops/s
Iteration  21: 1112427.291 ops/s
Iteration  22: 1116472.207 ops/s
Iteration  23: 1119808.565 ops/s
Iteration  24: 1113216.715 ops/s
Iteration  25: 1121288.142 ops/s
Iteration  26: 1120460.911 ops/s
Iteration  27: 1121048.222 ops/s
Iteration  28: 1116507.301 ops/s
Iteration  29: 1116028.958 ops/s
Iteration  30: 1117672.472 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_getOnly":
  1116686.144 ±(99.9%) 1664.976 ops/s [Average]
  (min, avg, max) = (1112236.303, 1116686.144, 1121288.142), stdev = 2492.058
  CI (99.9%): [1115021.168, 1118351.120] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_getOnly  thrpt   30  1116686.144 ± 1664.976  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_groupBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_groupBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1034594.073 ops/s
# Warmup Iteration   2: 2420585.660 ops/s
# Warmup Iteration   3: 2571650.954 ops/s
# Warmup Iteration   4: 2282569.309 ops/s
# Warmup Iteration   5: 2421314.023 ops/s
# Warmup Iteration   6: 2578863.872 ops/s
# Warmup Iteration   7: 2578140.997 ops/s
# Warmup Iteration   8: 2575892.127 ops/s
# Warmup Iteration   9: 2579887.710 ops/s
# Warmup Iteration  10: 2582375.932 ops/s
# Warmup Iteration  11: 2580522.814 ops/s
# Warmup Iteration  12: 2575612.169 ops/s
# Warmup Iteration  13: 2543600.416 ops/s
# Warmup Iteration  14: 2579142.475 ops/s
# Warmup Iteration  15: 2580689.390 ops/s
# Warmup Iteration  16: 2582052.391 ops/s
# Warmup Iteration  17: 2577254.342 ops/s
# Warmup Iteration  18: 2574008.963 ops/s
# Warmup Iteration  19: 2575808.902 ops/s
# Warmup Iteration  20: 2576739.553 ops/s
# Warmup Iteration  21: 2578510.645 ops/s
# Warmup Iteration  22: 2581823.009 ops/s
# Warmup Iteration  23: 2578563.067 ops/s
# Warmup Iteration  24: 2576117.242 ops/s
# Warmup Iteration  25: 2579178.300 ops/s
# Warmup Iteration  26: 2581786.980 ops/s
# Warmup Iteration  27: 2580450.714 ops/s
# Warmup Iteration  28: 2581663.069 ops/s
# Warmup Iteration  29: 2577354.615 ops/s
# Warmup Iteration  30: 2580741.273 ops/s
Iteration   1: 2584343.518 ops/s
Iteration   2: 2580414.774 ops/s
Iteration   3: 2582314.717 ops/s
Iteration   4: 2580063.772 ops/s
Iteration   5: 2580766.015 ops/s
Iteration   6: 2583815.766 ops/s
Iteration   7: 2573055.351 ops/s
Iteration   8: 2580122.958 ops/s
Iteration   9: 2581614.207 ops/s
Iteration  10: 2580864.012 ops/s
Iteration  11: 2581534.824 ops/s
Iteration  12: 2584438.533 ops/s
Iteration  13: 2583415.611 ops/s
Iteration  14: 2580111.407 ops/s
Iteration  15: 2581136.623 ops/s
Iteration  16: 2583343.729 ops/s
Iteration  17: 2579374.183 ops/s
Iteration  18: 2586450.249 ops/s
Iteration  19: 2582305.626 ops/s
Iteration  20: 2572662.732 ops/s
Iteration  21: 2577414.682 ops/s
Iteration  22: 2581761.698 ops/s
Iteration  23: 2582920.181 ops/s
Iteration  24: 2585251.468 ops/s
Iteration  25: 2580510.685 ops/s
Iteration  26: 2579702.151 ops/s
Iteration  27: 2577584.657 ops/s
Iteration  28: 2580420.026 ops/s
Iteration  29: 2573146.822 ops/s
Iteration  30: 2584577.391 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_groupBy":
  2580847.946 ±(99.9%) 2277.875 ops/s [Average]
  (min, avg, max) = (2572662.732, 2580847.946, 2586450.249), stdev = 3409.417
  CI (99.9%): [2578570.070, 2583125.821] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_groupBy  thrpt   30  2580847.946 ± 2277.875  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_groupByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_groupByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 295476.544 ops/s
# Warmup Iteration   2: 536642.087 ops/s
# Warmup Iteration   3: 606867.872 ops/s
# Warmup Iteration   4: 610059.199 ops/s
# Warmup Iteration   5: 608598.879 ops/s
# Warmup Iteration   6: 508321.079 ops/s
# Warmup Iteration   7: 610285.321 ops/s
# Warmup Iteration   8: 609894.280 ops/s
# Warmup Iteration   9: 610478.783 ops/s
# Warmup Iteration  10: 610955.238 ops/s
# Warmup Iteration  11: 609873.935 ops/s
# Warmup Iteration  12: 611346.137 ops/s
# Warmup Iteration  13: 609457.363 ops/s
# Warmup Iteration  14: 611251.264 ops/s
# Warmup Iteration  15: 610472.723 ops/s
# Warmup Iteration  16: 611750.512 ops/s
# Warmup Iteration  17: 609709.669 ops/s
# Warmup Iteration  18: 609534.227 ops/s
# Warmup Iteration  19: 608819.707 ops/s
# Warmup Iteration  20: 609153.515 ops/s
# Warmup Iteration  21: 609141.085 ops/s
# Warmup Iteration  22: 609741.435 ops/s
# Warmup Iteration  23: 610559.809 ops/s
# Warmup Iteration  24: 610878.258 ops/s
# Warmup Iteration  25: 610807.604 ops/s
# Warmup Iteration  26: 610439.455 ops/s
# Warmup Iteration  27: 610772.794 ops/s
# Warmup Iteration  28: 609699.923 ops/s
# Warmup Iteration  29: 609696.628 ops/s
# Warmup Iteration  30: 609432.351 ops/s
Iteration   1: 610029.518 ops/s
Iteration   2: 609570.173 ops/s
Iteration   3: 609769.324 ops/s
Iteration   4: 609047.160 ops/s
Iteration   5: 602688.686 ops/s
Iteration   6: 604173.399 ops/s
Iteration   7: 607996.271 ops/s
Iteration   8: 608891.884 ops/s
Iteration   9: 610068.033 ops/s
Iteration  10: 609533.495 ops/s
Iteration  11: 604945.840 ops/s
Iteration  12: 608625.068 ops/s
Iteration  13: 610893.027 ops/s
Iteration  14: 609236.163 ops/s
Iteration  15: 601331.797 ops/s
Iteration  16: 603737.535 ops/s
Iteration  17: 601238.677 ops/s
Iteration  18: 603693.598 ops/s
Iteration  19: 605875.570 ops/s
Iteration  20: 602734.409 ops/s
Iteration  21: 607923.714 ops/s
Iteration  22: 607588.846 ops/s
Iteration  23: 610424.639 ops/s
Iteration  24: 609058.678 ops/s
Iteration  25: 609153.550 ops/s
Iteration  26: 608483.689 ops/s
Iteration  27: 608997.319 ops/s
Iteration  28: 605807.362 ops/s
Iteration  29: 603521.419 ops/s
Iteration  30: 610858.343 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_groupByEach":
  607196.573 ±(99.9%) 2012.932 ops/s [Average]
  (min, avg, max) = (601238.677, 607196.573, 610893.027), stdev = 3012.862
  CI (99.9%): [605183.641, 609209.505] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_groupByEach  thrpt   30  607196.573 ± 2012.932  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_indexOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_indexOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 43356726.321 ops/s
# Warmup Iteration   2: 85447424.531 ops/s
# Warmup Iteration   3: 77346052.987 ops/s
# Warmup Iteration   4: 90861322.472 ops/s
# Warmup Iteration   5: 90197477.112 ops/s
# Warmup Iteration   6: 90738586.667 ops/s
# Warmup Iteration   7: 90611349.562 ops/s
# Warmup Iteration   8: 90523562.481 ops/s
# Warmup Iteration   9: 90505733.993 ops/s
# Warmup Iteration  10: 90566024.686 ops/s
# Warmup Iteration  11: 90648187.226 ops/s
# Warmup Iteration  12: 90912634.522 ops/s
# Warmup Iteration  13: 90676072.163 ops/s
# Warmup Iteration  14: 90630638.599 ops/s
# Warmup Iteration  15: 90385324.602 ops/s
# Warmup Iteration  16: 90764674.993 ops/s
# Warmup Iteration  17: 89535466.205 ops/s
# Warmup Iteration  18: 90279996.063 ops/s
# Warmup Iteration  19: 90411799.485 ops/s
# Warmup Iteration  20: 90527025.657 ops/s
# Warmup Iteration  21: 90794381.766 ops/s
# Warmup Iteration  22: 90690844.676 ops/s
# Warmup Iteration  23: 90586129.438 ops/s
# Warmup Iteration  24: 90424324.690 ops/s
# Warmup Iteration  25: 90582019.301 ops/s
# Warmup Iteration  26: 90743163.493 ops/s
# Warmup Iteration  27: 90686997.923 ops/s
# Warmup Iteration  28: 90725846.647 ops/s
# Warmup Iteration  29: 90745017.720 ops/s
# Warmup Iteration  30: 90713705.406 ops/s
Iteration   1: 90315293.389 ops/s
Iteration   2: 90081791.544 ops/s
Iteration   3: 90985841.887 ops/s
Iteration   4: 90739872.377 ops/s
Iteration   5: 90386861.409 ops/s
Iteration   6: 90890642.796 ops/s
Iteration   7: 90745017.333 ops/s
Iteration   8: 91482143.360 ops/s
Iteration   9: 90585900.433 ops/s
Iteration  10: 91219982.975 ops/s
Iteration  11: 90787852.534 ops/s
Iteration  12: 90607763.626 ops/s
Iteration  13: 90622110.600 ops/s
Iteration  14: 90838868.266 ops/s
Iteration  15: 90911815.696 ops/s
Iteration  16: 90480973.658 ops/s
Iteration  17: 90411025.150 ops/s
Iteration  18: 90893832.004 ops/s
Iteration  19: 90855614.899 ops/s
Iteration  20: 90633933.906 ops/s
Iteration  21: 90620919.975 ops/s
Iteration  22: 90455275.367 ops/s
Iteration  23: 90646839.175 ops/s
Iteration  24: 90626205.981 ops/s
Iteration  25: 90599267.434 ops/s
Iteration  26: 90590822.849 ops/s
Iteration  27: 90753903.217 ops/s
Iteration  28: 90832903.306 ops/s
Iteration  29: 90238955.123 ops/s
Iteration  30: 90212268.225 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_indexOf":
  90668483.283 ±(99.9%) 194858.693 ops/s [Average]
  (min, avg, max) = (90081791.544, 90668483.283, 91482143.360), stdev = 291655.340
  CI (99.9%): [90473624.590, 90863341.976] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score        Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_indexOf  thrpt   30  90668483.283 ± 194858.693  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 20505708.351 ops/s
# Warmup Iteration   2: 44545174.508 ops/s
# Warmup Iteration   3: 36211097.039 ops/s
# Warmup Iteration   4: 42683538.061 ops/s
# Warmup Iteration   5: 41723848.842 ops/s
# Warmup Iteration   6: 42616823.834 ops/s
# Warmup Iteration   7: 42583196.511 ops/s
# Warmup Iteration   8: 42607604.491 ops/s
# Warmup Iteration   9: 41103845.408 ops/s
# Warmup Iteration  10: 41651568.289 ops/s
# Warmup Iteration  11: 42639859.679 ops/s
# Warmup Iteration  12: 42667246.369 ops/s
# Warmup Iteration  13: 42593295.877 ops/s
# Warmup Iteration  14: 42566242.488 ops/s
# Warmup Iteration  15: 42724461.168 ops/s
# Warmup Iteration  16: 42714192.710 ops/s
# Warmup Iteration  17: 41162998.997 ops/s
# Warmup Iteration  18: 41225329.779 ops/s
# Warmup Iteration  19: 40251002.549 ops/s
# Warmup Iteration  20: 40932187.262 ops/s
# Warmup Iteration  21: 41227053.930 ops/s
# Warmup Iteration  22: 41369958.703 ops/s
# Warmup Iteration  23: 41265730.764 ops/s
# Warmup Iteration  24: 41171747.191 ops/s
# Warmup Iteration  25: 41113143.649 ops/s
# Warmup Iteration  26: 41273112.117 ops/s
# Warmup Iteration  27: 41203728.107 ops/s
# Warmup Iteration  28: 41233859.579 ops/s
# Warmup Iteration  29: 41171891.023 ops/s
# Warmup Iteration  30: 41169803.344 ops/s
Iteration   1: 41167852.941 ops/s
Iteration   2: 41197700.318 ops/s
Iteration   3: 41092649.090 ops/s
Iteration   4: 41254313.808 ops/s
Iteration   5: 41296121.838 ops/s
Iteration   6: 41176702.438 ops/s
Iteration   7: 41254047.486 ops/s
Iteration   8: 41215715.658 ops/s
Iteration   9: 40239740.636 ops/s
Iteration  10: 40705766.812 ops/s
Iteration  11: 41177379.359 ops/s
Iteration  12: 41337068.294 ops/s
Iteration  13: 41339031.961 ops/s
Iteration  14: 41145220.202 ops/s
Iteration  15: 41303469.948 ops/s
Iteration  16: 41374658.706 ops/s
Iteration  17: 41373225.747 ops/s
Iteration  18: 41260710.627 ops/s
Iteration  19: 41232608.563 ops/s
Iteration  20: 41244008.729 ops/s
Iteration  21: 41003584.098 ops/s
Iteration  22: 41009737.216 ops/s
Iteration  23: 40964518.772 ops/s
Iteration  24: 41055054.424 ops/s
Iteration  25: 41142863.352 ops/s
Iteration  26: 40978350.512 ops/s
Iteration  27: 41202257.889 ops/s
Iteration  28: 41225795.032 ops/s
Iteration  29: 41246052.584 ops/s
Iteration  30: 41193319.326 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_injectInto":
  41146984.212 ±(99.9%) 148698.078 ops/s [Average]
  (min, avg, max) = (40239740.636, 41146984.212, 41374658.706), stdev = 222564.300
  CI (99.9%): [40998286.134, 41295682.290] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score        Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_injectInto  thrpt   30  41146984.212 ± 148698.078  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_injectIntoDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_injectIntoDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 22756219.348 ops/s
# Warmup Iteration   2: 43495852.682 ops/s
# Warmup Iteration   3: 47363655.859 ops/s
# Warmup Iteration   4: 39870980.397 ops/s
# Warmup Iteration   5: 47223473.174 ops/s
# Warmup Iteration   6: 47350285.740 ops/s
# Warmup Iteration   7: 47395743.635 ops/s
# Warmup Iteration   8: 47459673.638 ops/s
# Warmup Iteration   9: 47365520.883 ops/s
# Warmup Iteration  10: 47207928.204 ops/s
# Warmup Iteration  11: 47305744.116 ops/s
# Warmup Iteration  12: 47235069.419 ops/s
# Warmup Iteration  13: 47509653.870 ops/s
# Warmup Iteration  14: 47021598.192 ops/s
# Warmup Iteration  15: 47165795.523 ops/s
# Warmup Iteration  16: 47175678.612 ops/s
# Warmup Iteration  17: 47157339.667 ops/s
# Warmup Iteration  18: 47247864.544 ops/s
# Warmup Iteration  19: 47032372.320 ops/s
# Warmup Iteration  20: 47255426.068 ops/s
# Warmup Iteration  21: 47493911.569 ops/s
# Warmup Iteration  22: 47422115.253 ops/s
# Warmup Iteration  23: 47505563.397 ops/s
# Warmup Iteration  24: 47438722.970 ops/s
# Warmup Iteration  25: 47622811.646 ops/s
# Warmup Iteration  26: 47507769.885 ops/s
# Warmup Iteration  27: 47257040.750 ops/s
# Warmup Iteration  28: 47472679.496 ops/s
# Warmup Iteration  29: 47512097.603 ops/s
# Warmup Iteration  30: 47424325.207 ops/s
Iteration   1: 47223142.497 ops/s
Iteration   2: 47331029.812 ops/s
Iteration   3: 47199184.424 ops/s
Iteration   4: 47305586.359 ops/s
Iteration   5: 47211997.323 ops/s
Iteration   6: 47277480.101 ops/s
Iteration   7: 47360837.969 ops/s
Iteration   8: 47379564.650 ops/s
Iteration   9: 47595781.882 ops/s
Iteration  10: 47591791.357 ops/s
Iteration  11: 47211605.303 ops/s
Iteration  12: 47403066.107 ops/s
Iteration  13: 47413519.160 ops/s
Iteration  14: 47389805.446 ops/s
Iteration  15: 47292631.430 ops/s
Iteration  16: 47517607.952 ops/s
Iteration  17: 47399263.115 ops/s
Iteration  18: 47360945.696 ops/s
Iteration  19: 47668150.757 ops/s
Iteration  20: 47456426.725 ops/s
Iteration  21: 47384971.696 ops/s
Iteration  22: 47292425.067 ops/s
Iteration  23: 47620108.378 ops/s
Iteration  24: 47627423.105 ops/s
Iteration  25: 47363171.969 ops/s
Iteration  26: 47445290.793 ops/s
Iteration  27: 47432873.192 ops/s
Iteration  28: 47200140.387 ops/s
Iteration  29: 47182915.184 ops/s
Iteration  30: 47227666.046 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_injectIntoDouble":
  47378880.129 ±(99.9%) 93692.306 ops/s [Average]
  (min, avg, max) = (47182915.184, 47378880.129, 47668150.757), stdev = 140234.243
  CI (99.9%): [47285187.824, 47472572.435] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_injectIntoDouble  thrpt   30  47378880.129 ± 93692.306  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_injectIntoFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_injectIntoFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 23022140.135 ops/s
# Warmup Iteration   2: 43702770.628 ops/s
# Warmup Iteration   3: 46669289.543 ops/s
# Warmup Iteration   4: 39501864.357 ops/s
# Warmup Iteration   5: 46656021.759 ops/s
# Warmup Iteration   6: 46637455.153 ops/s
# Warmup Iteration   7: 46725038.474 ops/s
# Warmup Iteration   8: 46785210.740 ops/s
# Warmup Iteration   9: 46612168.791 ops/s
# Warmup Iteration  10: 46718313.247 ops/s
# Warmup Iteration  11: 46542074.348 ops/s
# Warmup Iteration  12: 46691379.098 ops/s
# Warmup Iteration  13: 46550079.549 ops/s
# Warmup Iteration  14: 46614906.324 ops/s
# Warmup Iteration  15: 46524780.275 ops/s
# Warmup Iteration  16: 46807919.543 ops/s
# Warmup Iteration  17: 46746128.835 ops/s
# Warmup Iteration  18: 46601847.756 ops/s
# Warmup Iteration  19: 46698038.925 ops/s
# Warmup Iteration  20: 46687646.977 ops/s
# Warmup Iteration  21: 46908315.872 ops/s
# Warmup Iteration  22: 46759698.641 ops/s
# Warmup Iteration  23: 46736532.262 ops/s
# Warmup Iteration  24: 46796933.173 ops/s
# Warmup Iteration  25: 46741476.424 ops/s
# Warmup Iteration  26: 46673494.210 ops/s
# Warmup Iteration  27: 46654288.025 ops/s
# Warmup Iteration  28: 46664955.966 ops/s
# Warmup Iteration  29: 46591976.206 ops/s
# Warmup Iteration  30: 46738575.853 ops/s
Iteration   1: 46556375.070 ops/s
Iteration   2: 46602314.564 ops/s
Iteration   3: 46660150.677 ops/s
Iteration   4: 46706872.425 ops/s
Iteration   5: 46698491.417 ops/s
Iteration   6: 46604054.414 ops/s
Iteration   7: 46654949.376 ops/s
Iteration   8: 46753306.312 ops/s
Iteration   9: 46725365.618 ops/s
Iteration  10: 46545499.709 ops/s
Iteration  11: 46658372.116 ops/s
Iteration  12: 46571829.655 ops/s
Iteration  13: 46772915.224 ops/s
Iteration  14: 46884095.927 ops/s
Iteration  15: 46586344.983 ops/s
Iteration  16: 46676796.459 ops/s
Iteration  17: 46535352.132 ops/s
Iteration  18: 46665052.094 ops/s
Iteration  19: 46636572.022 ops/s
Iteration  20: 46803210.290 ops/s
Iteration  21: 46570631.920 ops/s
Iteration  22: 46565984.666 ops/s
Iteration  23: 46795168.075 ops/s
Iteration  24: 46618174.123 ops/s
Iteration  25: 46523588.426 ops/s
Iteration  26: 46522605.980 ops/s
Iteration  27: 46499398.379 ops/s
Iteration  28: 46570053.327 ops/s
Iteration  29: 46580396.846 ops/s
Iteration  30: 46628631.310 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_injectIntoFloat":
  46639085.118 ±(99.9%) 63561.448 ops/s [Average]
  (min, avg, max) = (46499398.379, 46639085.118, 46884095.927), stdev = 95135.791
  CI (99.9%): [46575523.670, 46702646.566] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score       Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_injectIntoFloat  thrpt   30  46639085.118 ± 63561.448  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_injectIntoInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_injectIntoInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 23748080.541 ops/s
# Warmup Iteration   2: 48697796.514 ops/s
# Warmup Iteration   3: 47207369.270 ops/s
# Warmup Iteration   4: 47809699.873 ops/s
# Warmup Iteration   5: 51612618.063 ops/s
# Warmup Iteration   6: 51457330.647 ops/s
# Warmup Iteration   7: 51419764.097 ops/s
# Warmup Iteration   8: 51548071.331 ops/s
# Warmup Iteration   9: 51287419.014 ops/s
# Warmup Iteration  10: 51362421.702 ops/s
# Warmup Iteration  11: 51505579.275 ops/s
# Warmup Iteration  12: 51397977.955 ops/s
# Warmup Iteration  13: 51465257.915 ops/s
# Warmup Iteration  14: 51449602.175 ops/s
# Warmup Iteration  15: 51522053.661 ops/s
# Warmup Iteration  16: 51463013.273 ops/s
# Warmup Iteration  17: 51292024.975 ops/s
# Warmup Iteration  18: 51442777.538 ops/s
# Warmup Iteration  19: 51473127.656 ops/s
# Warmup Iteration  20: 51494898.434 ops/s
# Warmup Iteration  21: 51440437.751 ops/s
# Warmup Iteration  22: 51570362.982 ops/s
# Warmup Iteration  23: 51572746.166 ops/s
# Warmup Iteration  24: 51443824.409 ops/s
# Warmup Iteration  25: 51428125.394 ops/s
# Warmup Iteration  26: 51479478.130 ops/s
# Warmup Iteration  27: 51463995.609 ops/s
# Warmup Iteration  28: 51510322.705 ops/s
# Warmup Iteration  29: 51457921.905 ops/s
# Warmup Iteration  30: 51435804.578 ops/s
Iteration   1: 51418007.382 ops/s
Iteration   2: 51469326.392 ops/s
Iteration   3: 51500288.426 ops/s
Iteration   4: 51603602.125 ops/s
Iteration   5: 51560463.828 ops/s
Iteration   6: 51389195.542 ops/s
Iteration   7: 51465299.397 ops/s
Iteration   8: 51563463.787 ops/s
Iteration   9: 51561572.438 ops/s
Iteration  10: 51375002.157 ops/s
Iteration  11: 51542330.825 ops/s
Iteration  12: 51618471.213 ops/s
Iteration  13: 51577643.164 ops/s
Iteration  14: 51496319.756 ops/s
Iteration  15: 51418806.466 ops/s
Iteration  16: 51489754.310 ops/s
Iteration  17: 51451776.078 ops/s
Iteration  18: 51648110.507 ops/s
Iteration  19: 51573213.013 ops/s
Iteration  20: 51334612.234 ops/s
Iteration  21: 48164142.133 ops/s
Iteration  22: 51494552.941 ops/s
Iteration  23: 51484578.434 ops/s
Iteration  24: 50991244.296 ops/s
Iteration  25: 49834178.977 ops/s
Iteration  26: 50224435.825 ops/s
Iteration  27: 50453982.375 ops/s
Iteration  28: 51327131.435 ops/s
Iteration  29: 51451617.077 ops/s
Iteration  30: 51387996.321 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_injectIntoInt":
  51229037.295 ±(99.9%) 478414.938 ops/s [Average]
  (min, avg, max) = (48164142.133, 51229037.295, 51648110.507), stdev = 716069.011
  CI (99.9%): [50750622.357, 51707452.233] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score        Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_injectIntoInt  thrpt   30  51229037.295 ± 478414.938  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_injectIntoLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_injectIntoLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 23373613.217 ops/s
# Warmup Iteration   2: 48842470.533 ops/s
# Warmup Iteration   3: 46155144.360 ops/s
# Warmup Iteration   4: 43679572.104 ops/s
# Warmup Iteration   5: 48774794.155 ops/s
# Warmup Iteration   6: 48635654.784 ops/s
# Warmup Iteration   7: 48870948.164 ops/s
# Warmup Iteration   8: 48719305.722 ops/s
# Warmup Iteration   9: 48598560.337 ops/s
# Warmup Iteration  10: 48795866.796 ops/s
# Warmup Iteration  11: 48781533.054 ops/s
# Warmup Iteration  12: 48746607.047 ops/s
# Warmup Iteration  13: 48804206.297 ops/s
# Warmup Iteration  14: 48849277.305 ops/s
# Warmup Iteration  15: 48796018.307 ops/s
# Warmup Iteration  16: 48867953.723 ops/s
# Warmup Iteration  17: 48785477.030 ops/s
# Warmup Iteration  18: 48620817.415 ops/s
# Warmup Iteration  19: 48702646.849 ops/s
# Warmup Iteration  20: 48887849.499 ops/s
# Warmup Iteration  21: 48866763.533 ops/s
# Warmup Iteration  22: 48741086.686 ops/s
# Warmup Iteration  23: 48752523.196 ops/s
# Warmup Iteration  24: 48733165.744 ops/s
# Warmup Iteration  25: 48775245.096 ops/s
# Warmup Iteration  26: 48542802.890 ops/s
# Warmup Iteration  27: 48722228.417 ops/s
# Warmup Iteration  28: 48834246.633 ops/s
# Warmup Iteration  29: 48690394.652 ops/s
# Warmup Iteration  30: 48925131.745 ops/s
Iteration   1: 48717854.421 ops/s
Iteration   2: 48710017.657 ops/s
Iteration   3: 48705054.568 ops/s
Iteration   4: 48860718.445 ops/s
Iteration   5: 48715222.293 ops/s
Iteration   6: 48702076.010 ops/s
Iteration   7: 48768578.135 ops/s
Iteration   8: 48984918.324 ops/s
Iteration   9: 48892820.889 ops/s
Iteration  10: 48822208.759 ops/s
Iteration  11: 48842714.080 ops/s
Iteration  12: 48715620.806 ops/s
Iteration  13: 48829753.970 ops/s
Iteration  14: 48816796.938 ops/s
Iteration  15: 48647254.024 ops/s
Iteration  16: 48612943.608 ops/s
Iteration  17: 48610391.959 ops/s
Iteration  18: 47475497.242 ops/s
Iteration  19: 47560021.692 ops/s
Iteration  20: 48057478.952 ops/s
Iteration  21: 48747794.398 ops/s
Iteration  22: 48649970.185 ops/s
Iteration  23: 48738768.367 ops/s
Iteration  24: 48894674.432 ops/s
Iteration  25: 48756682.929 ops/s
Iteration  26: 48828900.158 ops/s
Iteration  27: 48617938.499 ops/s
Iteration  28: 47993330.748 ops/s
Iteration  29: 47633237.209 ops/s
Iteration  30: 47656347.715 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_injectIntoLong":
  48552186.247 ±(99.9%) 293268.146 ops/s [Average]
  (min, avg, max) = (47475497.242, 48552186.247, 48984918.324), stdev = 438949.988
  CI (99.9%): [48258918.101, 48845454.393] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score        Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_injectIntoLong  thrpt   30  48552186.247 ± 293268.146  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 50242903.602 ops/s
# Warmup Iteration   2: 107000777.147 ops/s
# Warmup Iteration   3: 82804896.400 ops/s
# Warmup Iteration   4: 107438195.409 ops/s
# Warmup Iteration   5: 107717732.469 ops/s
# Warmup Iteration   6: 107476885.507 ops/s
# Warmup Iteration   7: 106813337.831 ops/s
# Warmup Iteration   8: 107077693.568 ops/s
# Warmup Iteration   9: 107748506.288 ops/s
# Warmup Iteration  10: 107405627.270 ops/s
# Warmup Iteration  11: 107820451.434 ops/s
# Warmup Iteration  12: 107769335.642 ops/s
# Warmup Iteration  13: 107654932.394 ops/s
# Warmup Iteration  14: 107359850.354 ops/s
# Warmup Iteration  15: 107564788.444 ops/s
# Warmup Iteration  16: 107553979.809 ops/s
# Warmup Iteration  17: 107344674.534 ops/s
# Warmup Iteration  18: 107429082.282 ops/s
# Warmup Iteration  19: 107421474.149 ops/s
# Warmup Iteration  20: 107133142.062 ops/s
# Warmup Iteration  21: 107177543.859 ops/s
# Warmup Iteration  22: 107575778.483 ops/s
# Warmup Iteration  23: 107222341.044 ops/s
# Warmup Iteration  24: 107572960.231 ops/s
# Warmup Iteration  25: 107664878.413 ops/s
# Warmup Iteration  26: 107549651.809 ops/s
# Warmup Iteration  27: 107826294.497 ops/s
# Warmup Iteration  28: 107812348.381 ops/s
# Warmup Iteration  29: 107802822.506 ops/s
# Warmup Iteration  30: 107747840.679 ops/s
Iteration   1: 107731498.897 ops/s
Iteration   2: 107712491.736 ops/s
Iteration   3: 107288032.995 ops/s
Iteration   4: 107993214.642 ops/s
Iteration   5: 107228851.281 ops/s
Iteration   6: 107427922.951 ops/s
Iteration   7: 107552226.880 ops/s
Iteration   8: 107571429.330 ops/s
Iteration   9: 107606078.999 ops/s
Iteration  10: 107698639.817 ops/s
Iteration  11: 107671836.675 ops/s
Iteration  12: 107322861.639 ops/s
Iteration  13: 107357155.018 ops/s
Iteration  14: 108157722.614 ops/s
Iteration  15: 107464137.744 ops/s
Iteration  16: 107581404.838 ops/s
Iteration  17: 107079889.273 ops/s
Iteration  18: 106971001.853 ops/s
Iteration  19: 106816892.600 ops/s
Iteration  20: 107896103.847 ops/s
Iteration  21: 107209499.410 ops/s
Iteration  22: 107508372.280 ops/s
Iteration  23: 107186781.675 ops/s
Iteration  24: 107697110.403 ops/s
Iteration  25: 107442084.041 ops/s
Iteration  26: 107542920.230 ops/s
Iteration  27: 107624010.821 ops/s
Iteration  28: 107907471.953 ops/s
Iteration  29: 107781415.365 ops/s
Iteration  30: 107912098.730 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_isEmpty":
  107531371.951 ±(99.9%) 205866.495 ops/s [Average]
  (min, avg, max) = (106816892.600, 107531371.951, 108157722.614), stdev = 308131.302
  CI (99.9%): [107325505.456, 107737238.446] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt          Score        Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_isEmpty  thrpt   30  107531371.951 ± 205866.495  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_iterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_iterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 381314.245 ops/s
# Warmup Iteration   2: 397114.530 ops/s
# Warmup Iteration   3: 467916.448 ops/s
# Warmup Iteration   4: 495182.610 ops/s
# Warmup Iteration   5: 496519.803 ops/s
# Warmup Iteration   6: 493386.753 ops/s
# Warmup Iteration   7: 495284.437 ops/s
# Warmup Iteration   8: 494584.139 ops/s
# Warmup Iteration   9: 495865.370 ops/s
# Warmup Iteration  10: 494929.606 ops/s
# Warmup Iteration  11: 494327.260 ops/s
# Warmup Iteration  12: 495866.436 ops/s
# Warmup Iteration  13: 495791.818 ops/s
# Warmup Iteration  14: 421342.084 ops/s
# Warmup Iteration  15: 495720.697 ops/s
# Warmup Iteration  16: 496338.331 ops/s
# Warmup Iteration  17: 521279.203 ops/s
# Warmup Iteration  18: 522644.904 ops/s
# Warmup Iteration  19: 520473.372 ops/s
# Warmup Iteration  20: 519588.051 ops/s
# Warmup Iteration  21: 511719.715 ops/s
# Warmup Iteration  22: 508966.199 ops/s
# Warmup Iteration  23: 521050.484 ops/s
# Warmup Iteration  24: 518038.385 ops/s
# Warmup Iteration  25: 517903.787 ops/s
# Warmup Iteration  26: 517498.758 ops/s
# Warmup Iteration  27: 518571.551 ops/s
# Warmup Iteration  28: 521120.992 ops/s
# Warmup Iteration  29: 521069.236 ops/s
# Warmup Iteration  30: 521313.068 ops/s
Iteration   1: 520318.513 ops/s
Iteration   2: 521395.000 ops/s
Iteration   3: 518605.400 ops/s
Iteration   4: 518425.197 ops/s
Iteration   5: 522914.399 ops/s
Iteration   6: 521220.082 ops/s
Iteration   7: 518882.314 ops/s
Iteration   8: 521822.867 ops/s
Iteration   9: 521590.059 ops/s
Iteration  10: 520789.430 ops/s
Iteration  11: 522421.169 ops/s
Iteration  12: 521952.642 ops/s
Iteration  13: 521478.380 ops/s
Iteration  14: 521979.709 ops/s
Iteration  15: 519836.364 ops/s
Iteration  16: 521169.256 ops/s
Iteration  17: 520887.365 ops/s
Iteration  18: 521030.182 ops/s
Iteration  19: 520061.473 ops/s
Iteration  20: 520975.151 ops/s
Iteration  21: 520409.037 ops/s
Iteration  22: 521702.959 ops/s
Iteration  23: 518514.891 ops/s
Iteration  24: 519847.816 ops/s
Iteration  25: 521452.435 ops/s
Iteration  26: 520770.560 ops/s
Iteration  27: 522180.114 ops/s
Iteration  28: 521614.365 ops/s
Iteration  29: 516704.654 ops/s
Iteration  30: 521817.560 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_iterator":
  520758.978 ±(99.9%) 931.691 ops/s [Average]
  (min, avg, max) = (516704.654, 520758.978, 522914.399), stdev = 1394.511
  CI (99.9%): [519827.287, 521690.669] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score     Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_iterator  thrpt   30  520758.978 ± 931.691  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_iteratorRemove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_iteratorRemove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 749277.278 ops/s
# Warmup Iteration   2: 790175.913 ops/s
# Warmup Iteration   3: 1000510.850 ops/s
# Warmup Iteration   4: 991113.584 ops/s
# Warmup Iteration   5: 988065.472 ops/s
# Warmup Iteration   6: 995509.046 ops/s
# Warmup Iteration   7: 993054.426 ops/s
# Warmup Iteration   8: 991512.127 ops/s
# Warmup Iteration   9: 998541.774 ops/s
# Warmup Iteration  10: 993580.059 ops/s
# Warmup Iteration  11: 948972.353 ops/s
# Warmup Iteration  12: 888310.179 ops/s
# Warmup Iteration  13: 992391.919 ops/s
# Warmup Iteration  14: 988183.364 ops/s
# Warmup Iteration  15: 992340.541 ops/s
# Warmup Iteration  16: 988182.988 ops/s
# Warmup Iteration  17: 1056170.124 ops/s
# Warmup Iteration  18: 1057778.305 ops/s
# Warmup Iteration  19: 1052151.492 ops/s
# Warmup Iteration  20: 1049586.609 ops/s
# Warmup Iteration  21: 1053411.168 ops/s
# Warmup Iteration  22: 1054641.523 ops/s
# Warmup Iteration  23: 1053241.389 ops/s
# Warmup Iteration  24: 1055910.893 ops/s
# Warmup Iteration  25: 1046660.733 ops/s
# Warmup Iteration  26: 1057436.951 ops/s
# Warmup Iteration  27: 1053245.916 ops/s
# Warmup Iteration  28: 1059025.758 ops/s
# Warmup Iteration  29: 1054003.299 ops/s
# Warmup Iteration  30: 1050754.480 ops/s
Iteration   1: 1052146.312 ops/s
Iteration   2: 1056422.206 ops/s
Iteration   3: 1050673.245 ops/s
Iteration   4: 1051801.011 ops/s
Iteration   5: 1050215.648 ops/s
Iteration   6: 1057773.402 ops/s
Iteration   7: 1058927.260 ops/s
Iteration   8: 1053878.155 ops/s
Iteration   9: 1050125.164 ops/s
Iteration  10: 1051500.583 ops/s
Iteration  11: 1056428.742 ops/s
Iteration  12: 1057713.214 ops/s
Iteration  13: 1053672.275 ops/s
Iteration  14: 1051688.308 ops/s
Iteration  15: 1052760.655 ops/s
Iteration  16: 1053666.890 ops/s
Iteration  17: 1058080.510 ops/s
Iteration  18: 1059527.509 ops/s
Iteration  19: 1059132.595 ops/s
Iteration  20: 1057332.082 ops/s
Iteration  21: 1056609.813 ops/s
Iteration  22: 1060336.638 ops/s
Iteration  23: 1053208.888 ops/s
Iteration  24: 1054677.908 ops/s
Iteration  25: 1057442.182 ops/s
Iteration  26: 1053002.819 ops/s
Iteration  27: 1057108.904 ops/s
Iteration  28: 1049884.808 ops/s
Iteration  29: 1055251.719 ops/s
Iteration  30: 1059309.528 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_iteratorRemove":
  1055009.966 ±(99.9%) 2139.562 ops/s [Average]
  (min, avg, max) = (1049884.808, 1055009.966, 1060336.638), stdev = 3202.396
  CI (99.9%): [1052870.403, 1057149.528] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_iteratorRemove  thrpt   30  1055009.966 ± 2139.562  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_lastIndexOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_lastIndexOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 44688844.510 ops/s
# Warmup Iteration   2: 88459741.739 ops/s
# Warmup Iteration   3: 78144336.861 ops/s
# Warmup Iteration   4: 91769562.724 ops/s
# Warmup Iteration   5: 91660953.278 ops/s
# Warmup Iteration   6: 91755295.154 ops/s
# Warmup Iteration   7: 91808055.413 ops/s
# Warmup Iteration   8: 91771804.733 ops/s
# Warmup Iteration   9: 91553814.811 ops/s
# Warmup Iteration  10: 91415046.574 ops/s
# Warmup Iteration  11: 91659732.813 ops/s
# Warmup Iteration  12: 91640993.905 ops/s
# Warmup Iteration  13: 91596414.738 ops/s
# Warmup Iteration  14: 91536844.777 ops/s
# Warmup Iteration  15: 91954671.011 ops/s
# Warmup Iteration  16: 91777011.697 ops/s
# Warmup Iteration  17: 91137722.252 ops/s
# Warmup Iteration  18: 91642060.422 ops/s
# Warmup Iteration  19: 91308321.883 ops/s
# Warmup Iteration  20: 91722150.314 ops/s
# Warmup Iteration  21: 91899565.539 ops/s
# Warmup Iteration  22: 91757783.303 ops/s
# Warmup Iteration  23: 90994411.584 ops/s
# Warmup Iteration  24: 91412370.378 ops/s
# Warmup Iteration  25: 91470767.886 ops/s
# Warmup Iteration  26: 91495957.782 ops/s
# Warmup Iteration  27: 91433544.046 ops/s
# Warmup Iteration  28: 91461083.040 ops/s
# Warmup Iteration  29: 91666775.428 ops/s
# Warmup Iteration  30: 90979681.327 ops/s
Iteration   1: 91702756.975 ops/s
Iteration   2: 91773369.216 ops/s
Iteration   3: 91978772.986 ops/s
Iteration   4: 91738515.771 ops/s
Iteration   5: 91147956.334 ops/s
Iteration   6: 91606241.563 ops/s
Iteration   7: 91682739.910 ops/s
Iteration   8: 92204264.583 ops/s
Iteration   9: 91738375.097 ops/s
Iteration  10: 91503844.228 ops/s
Iteration  11: 91560307.798 ops/s
Iteration  12: 91555454.897 ops/s
Iteration  13: 91854980.677 ops/s
Iteration  14: 91275327.446 ops/s
Iteration  15: 91712787.615 ops/s
Iteration  16: 92028607.691 ops/s
Iteration  17: 91247601.538 ops/s
Iteration  18: 91557251.338 ops/s
Iteration  19: 91628959.363 ops/s
Iteration  20: 92226885.245 ops/s
Iteration  21: 91947909.666 ops/s
Iteration  22: 92107393.576 ops/s
Iteration  23: 91548290.991 ops/s
Iteration  24: 91732124.214 ops/s
Iteration  25: 91543229.353 ops/s
Iteration  26: 91380331.271 ops/s
Iteration  27: 91834490.198 ops/s
Iteration  28: 91719414.754 ops/s
Iteration  29: 91426318.842 ops/s
Iteration  30: 91343437.342 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_lastIndexOf":
  91676931.349 ±(99.9%) 181324.831 ops/s [Average]
  (min, avg, max) = (91147956.334, 91676931.349, 92226885.245), stdev = 271398.491
  CI (99.9%): [91495606.519, 91858256.180] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score        Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_lastIndexOf  thrpt   30  91676931.349 ± 181324.831  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_listIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_listIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 147481.216 ops/s
# Warmup Iteration   2: 155252.683 ops/s
# Warmup Iteration   3: 186495.200 ops/s
# Warmup Iteration   4: 194567.071 ops/s
# Warmup Iteration   5: 195238.446 ops/s
# Warmup Iteration   6: 194592.903 ops/s
# Warmup Iteration   7: 194860.711 ops/s
# Warmup Iteration   8: 194788.827 ops/s
# Warmup Iteration   9: 194332.960 ops/s
# Warmup Iteration  10: 195790.655 ops/s
# Warmup Iteration  11: 195475.911 ops/s
# Warmup Iteration  12: 195238.115 ops/s
# Warmup Iteration  13: 179550.696 ops/s
# Warmup Iteration  14: 183019.511 ops/s
# Warmup Iteration  15: 195146.836 ops/s
# Warmup Iteration  16: 195293.388 ops/s
# Warmup Iteration  17: 207084.748 ops/s
# Warmup Iteration  18: 206300.247 ops/s
# Warmup Iteration  19: 206720.187 ops/s
# Warmup Iteration  20: 207383.650 ops/s
# Warmup Iteration  21: 207021.817 ops/s
# Warmup Iteration  22: 207019.817 ops/s
# Warmup Iteration  23: 206696.408 ops/s
# Warmup Iteration  24: 206722.325 ops/s
# Warmup Iteration  25: 206844.936 ops/s
# Warmup Iteration  26: 206655.587 ops/s
# Warmup Iteration  27: 206391.294 ops/s
# Warmup Iteration  28: 205540.432 ops/s
# Warmup Iteration  29: 206148.816 ops/s
# Warmup Iteration  30: 206142.846 ops/s
Iteration   1: 206525.236 ops/s
Iteration   2: 206113.174 ops/s
Iteration   3: 206268.228 ops/s
Iteration   4: 206858.370 ops/s
Iteration   5: 205464.397 ops/s
Iteration   6: 205523.010 ops/s
Iteration   7: 206522.488 ops/s
Iteration   8: 206924.872 ops/s
Iteration   9: 206957.581 ops/s
Iteration  10: 206788.241 ops/s
Iteration  11: 206053.078 ops/s
Iteration  12: 207531.495 ops/s
Iteration  13: 206400.485 ops/s
Iteration  14: 205000.225 ops/s
Iteration  15: 205858.764 ops/s
Iteration  16: 207096.305 ops/s
Iteration  17: 206948.561 ops/s
Iteration  18: 206947.476 ops/s
Iteration  19: 205730.628 ops/s
Iteration  20: 205946.793 ops/s
Iteration  21: 206666.537 ops/s
Iteration  22: 206368.284 ops/s
Iteration  23: 206309.409 ops/s
Iteration  24: 205301.381 ops/s
Iteration  25: 205603.612 ops/s
Iteration  26: 206135.974 ops/s
Iteration  27: 206039.674 ops/s
Iteration  28: 206554.754 ops/s
Iteration  29: 205983.176 ops/s
Iteration  30: 207109.069 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_listIterator":
  206317.709 ±(99.9%) 406.439 ops/s [Average]
  (min, avg, max) = (205000.225, 206317.709, 207531.495), stdev = 608.339
  CI (99.9%): [205911.270, 206724.148] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score     Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_listIterator  thrpt   30  206317.709 ± 406.439  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_listIterator_throwsGreaterThanSize$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_listIterator_throwsGreaterThanSize

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 778347.281 ops/s
# Warmup Iteration   2: 801180.512 ops/s
# Warmup Iteration   3: 997278.703 ops/s
# Warmup Iteration   4: 1031047.035 ops/s
# Warmup Iteration   5: 1030263.369 ops/s
# Warmup Iteration   6: 1027314.751 ops/s
# Warmup Iteration   7: 1031273.632 ops/s
# Warmup Iteration   8: 1031021.571 ops/s
# Warmup Iteration   9: 1030928.931 ops/s
# Warmup Iteration  10: 1032977.295 ops/s
# Warmup Iteration  11: 1031818.077 ops/s
# Warmup Iteration  12: 1030105.890 ops/s
# Warmup Iteration  13: 867858.675 ops/s
# Warmup Iteration  14: 1030828.536 ops/s
# Warmup Iteration  15: 1029014.847 ops/s
# Warmup Iteration  16: 1031458.123 ops/s
# Warmup Iteration  17: 1090956.324 ops/s
# Warmup Iteration  18: 1093532.710 ops/s
# Warmup Iteration  19: 1093885.403 ops/s
# Warmup Iteration  20: 1092513.644 ops/s
# Warmup Iteration  21: 1097439.481 ops/s
# Warmup Iteration  22: 1088967.647 ops/s
# Warmup Iteration  23: 1092104.061 ops/s
# Warmup Iteration  24: 1094113.802 ops/s
# Warmup Iteration  25: 1093832.158 ops/s
# Warmup Iteration  26: 1090193.387 ops/s
# Warmup Iteration  27: 1093229.757 ops/s
# Warmup Iteration  28: 1089742.838 ops/s
# Warmup Iteration  29: 1090272.119 ops/s
# Warmup Iteration  30: 1093671.270 ops/s
Iteration   1: 1096553.110 ops/s
Iteration   2: 1085441.982 ops/s
Iteration   3: 1087065.658 ops/s
Iteration   4: 1085871.455 ops/s
Iteration   5: 1086440.453 ops/s
Iteration   6: 1092653.176 ops/s
Iteration   7: 1093100.803 ops/s
Iteration   8: 1088356.552 ops/s
Iteration   9: 1091999.784 ops/s
Iteration  10: 1091887.345 ops/s
Iteration  11: 1086827.854 ops/s
Iteration  12: 1094748.093 ops/s
Iteration  13: 1097036.210 ops/s
Iteration  14: 1093676.489 ops/s
Iteration  15: 1089548.492 ops/s
Iteration  16: 1089383.356 ops/s
Iteration  17: 1087753.765 ops/s
Iteration  18: 1090635.690 ops/s
Iteration  19: 1092002.849 ops/s
Iteration  20: 1093980.311 ops/s
Iteration  21: 1093343.577 ops/s
Iteration  22: 1095731.865 ops/s
Iteration  23: 1090024.299 ops/s
Iteration  24: 1085569.084 ops/s
Iteration  25: 1086209.491 ops/s
Iteration  26: 1092426.129 ops/s
Iteration  27: 1094601.344 ops/s
Iteration  28: 1094868.161 ops/s
Iteration  29: 1089307.672 ops/s
Iteration  30: 1094385.885 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_listIterator_throwsGreaterThanSize":
  1091047.698 ±(99.9%) 2373.702 ops/s [Average]
  (min, avg, max) = (1085441.982, 1091047.698, 1097036.210), stdev = 3552.845
  CI (99.9%): [1088673.996, 1093421.400] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt        Score      Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_listIterator_throwsGreaterThanSize  thrpt   30  1091047.698 ± 2373.702  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_listIterator_throwsNegative$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_listIterator_throwsNegative

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 779380.191 ops/s
# Warmup Iteration   2: 810116.948 ops/s
# Warmup Iteration   3: 1000395.313 ops/s
# Warmup Iteration   4: 1030204.353 ops/s
# Warmup Iteration   5: 956580.896 ops/s
# Warmup Iteration   6: 1006170.476 ops/s
# Warmup Iteration   7: 1033485.749 ops/s
# Warmup Iteration   8: 1031256.301 ops/s
# Warmup Iteration   9: 1031890.916 ops/s
# Warmup Iteration  10: 1031798.224 ops/s
# Warmup Iteration  11: 1027168.963 ops/s
# Warmup Iteration  12: 1028931.843 ops/s
# Warmup Iteration  13: 873405.893 ops/s
# Warmup Iteration  14: 1032796.743 ops/s
# Warmup Iteration  15: 1031500.619 ops/s
# Warmup Iteration  16: 1028255.895 ops/s
# Warmup Iteration  17: 1092186.158 ops/s
# Warmup Iteration  18: 1090067.794 ops/s
# Warmup Iteration  19: 1092549.598 ops/s
# Warmup Iteration  20: 1094506.528 ops/s
# Warmup Iteration  21: 1096327.446 ops/s
# Warmup Iteration  22: 1089211.518 ops/s
# Warmup Iteration  23: 1090081.673 ops/s
# Warmup Iteration  24: 1094430.093 ops/s
# Warmup Iteration  25: 1091299.784 ops/s
# Warmup Iteration  26: 1095363.635 ops/s
# Warmup Iteration  27: 1085983.165 ops/s
# Warmup Iteration  28: 1094454.174 ops/s
# Warmup Iteration  29: 1096357.972 ops/s
# Warmup Iteration  30: 1094265.859 ops/s
Iteration   1: 1095121.515 ops/s
Iteration   2: 1095498.886 ops/s
Iteration   3: 1096174.641 ops/s
Iteration   4: 1091890.504 ops/s
Iteration   5: 1096031.566 ops/s
Iteration   6: 1097512.285 ops/s
Iteration   7: 1097007.729 ops/s
Iteration   8: 1097609.585 ops/s
Iteration   9: 1098021.379 ops/s
Iteration  10: 1092683.890 ops/s
Iteration  11: 1098967.157 ops/s
Iteration  12: 1096218.935 ops/s
Iteration  13: 1090580.124 ops/s
Iteration  14: 1099142.297 ops/s
Iteration  15: 1091665.435 ops/s
Iteration  16: 1094407.675 ops/s
Iteration  17: 1088246.932 ops/s
Iteration  18: 1091356.975 ops/s
Iteration  19: 1087747.102 ops/s
Iteration  20: 1088740.619 ops/s
Iteration  21: 1086158.523 ops/s
Iteration  22: 1093305.538 ops/s
Iteration  23: 1094114.323 ops/s
Iteration  24: 1093870.793 ops/s
Iteration  25: 1093742.629 ops/s
Iteration  26: 1096011.331 ops/s
Iteration  27: 1094548.223 ops/s
Iteration  28: 1094217.673 ops/s
Iteration  29: 1095855.613 ops/s
Iteration  30: 1100035.506 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_listIterator_throwsNegative":
  1094216.179 ±(99.9%) 2335.101 ops/s [Average]
  (min, avg, max) = (1086158.523, 1094216.179, 1100035.506), stdev = 3495.070
  CI (99.9%): [1091881.078, 1096551.280] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score      Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_listIterator_throwsNegative  thrpt   30  1094216.179 ± 2335.101  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 776262.381 ops/s
# Warmup Iteration   2: 1680986.687 ops/s
# Warmup Iteration   3: 1430313.294 ops/s
# Warmup Iteration   4: 1693297.616 ops/s
# Warmup Iteration   5: 1689658.962 ops/s
# Warmup Iteration   6: 1686477.348 ops/s
# Warmup Iteration   7: 1691123.455 ops/s
# Warmup Iteration   8: 1700653.746 ops/s
# Warmup Iteration   9: 1694937.932 ops/s
# Warmup Iteration  10: 1690177.077 ops/s
# Warmup Iteration  11: 1683340.974 ops/s
# Warmup Iteration  12: 1688285.588 ops/s
# Warmup Iteration  13: 1684590.078 ops/s
# Warmup Iteration  14: 1679887.318 ops/s
# Warmup Iteration  15: 1671417.472 ops/s
# Warmup Iteration  16: 1652359.188 ops/s
# Warmup Iteration  17: 1681596.038 ops/s
# Warmup Iteration  18: 1689138.534 ops/s
# Warmup Iteration  19: 1679099.861 ops/s
# Warmup Iteration  20: 1684820.854 ops/s
# Warmup Iteration  21: 1686514.620 ops/s
# Warmup Iteration  22: 1688913.586 ops/s
# Warmup Iteration  23: 1688280.452 ops/s
# Warmup Iteration  24: 1679807.665 ops/s
# Warmup Iteration  25: 1678753.731 ops/s
# Warmup Iteration  26: 1683413.912 ops/s
# Warmup Iteration  27: 1678525.585 ops/s
# Warmup Iteration  28: 1670450.349 ops/s
# Warmup Iteration  29: 1657186.488 ops/s
# Warmup Iteration  30: 1681202.937 ops/s
Iteration   1: 1666412.311 ops/s
Iteration   2: 1688064.655 ops/s
Iteration   3: 1686063.447 ops/s
Iteration   4: 1686393.435 ops/s
Iteration   5: 1694192.020 ops/s
Iteration   6: 1688187.992 ops/s
Iteration   7: 1692988.282 ops/s
Iteration   8: 1693512.352 ops/s
Iteration   9: 1689913.346 ops/s
Iteration  10: 1692731.241 ops/s
Iteration  11: 1683929.458 ops/s
Iteration  12: 1678635.104 ops/s
Iteration  13: 1692276.278 ops/s
Iteration  14: 1687433.855 ops/s
Iteration  15: 1688659.115 ops/s
Iteration  16: 1687585.418 ops/s
Iteration  17: 1697046.059 ops/s
Iteration  18: 1685348.350 ops/s
Iteration  19: 1690519.661 ops/s
Iteration  20: 1694831.124 ops/s
Iteration  21: 1685929.124 ops/s
Iteration  22: 1685138.305 ops/s
Iteration  23: 1692689.707 ops/s
Iteration  24: 1697132.692 ops/s
Iteration  25: 1689857.350 ops/s
Iteration  26: 1685897.932 ops/s
Iteration  27: 1691089.996 ops/s
Iteration  28: 1697108.690 ops/s
Iteration  29: 1692781.663 ops/s
Iteration  30: 1685140.818 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_makeString":
  1688916.326 ±(99.9%) 4080.086 ops/s [Average]
  (min, avg, max) = (1666412.311, 1688916.326, 1697132.692), stdev = 6106.881
  CI (99.9%): [1684836.240, 1692996.412] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_makeString  thrpt   30  1688916.326 ± 4080.086  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_max$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_max

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 31216455.826 ops/s
# Warmup Iteration   2: 60799605.847 ops/s
# Warmup Iteration   3: 60651927.258 ops/s
# Warmup Iteration   4: 51304766.242 ops/s
# Warmup Iteration   5: 60714049.519 ops/s
# Warmup Iteration   6: 60704843.465 ops/s
# Warmup Iteration   7: 60670304.761 ops/s
# Warmup Iteration   8: 60746593.217 ops/s
# Warmup Iteration   9: 60784646.417 ops/s
# Warmup Iteration  10: 60761230.502 ops/s
# Warmup Iteration  11: 60630424.102 ops/s
# Warmup Iteration  12: 60800709.736 ops/s
# Warmup Iteration  13: 60658338.440 ops/s
# Warmup Iteration  14: 60713293.650 ops/s
# Warmup Iteration  15: 60752517.783 ops/s
# Warmup Iteration  16: 60413465.190 ops/s
# Warmup Iteration  17: 60557582.352 ops/s
# Warmup Iteration  18: 60561661.497 ops/s
# Warmup Iteration  19: 60626760.994 ops/s
# Warmup Iteration  20: 60711793.372 ops/s
# Warmup Iteration  21: 60681024.027 ops/s
# Warmup Iteration  22: 60799248.305 ops/s
# Warmup Iteration  23: 60667841.214 ops/s
# Warmup Iteration  24: 60789701.775 ops/s
# Warmup Iteration  25: 60766332.920 ops/s
# Warmup Iteration  26: 60677365.724 ops/s
# Warmup Iteration  27: 60739135.601 ops/s
# Warmup Iteration  28: 60811838.416 ops/s
# Warmup Iteration  29: 60774541.307 ops/s
# Warmup Iteration  30: 60818896.494 ops/s
Iteration   1: 60644562.419 ops/s
Iteration   2: 60750974.935 ops/s
Iteration   3: 60736261.744 ops/s
Iteration   4: 61030928.974 ops/s
Iteration   5: 60724928.894 ops/s
Iteration   6: 60778854.518 ops/s
Iteration   7: 60778241.812 ops/s
Iteration   8: 60725082.488 ops/s
Iteration   9: 60349429.456 ops/s
Iteration  10: 60479662.811 ops/s
Iteration  11: 60378884.264 ops/s
Iteration  12: 60796191.763 ops/s
Iteration  13: 60854568.740 ops/s
Iteration  14: 60727420.489 ops/s
Iteration  15: 60854107.747 ops/s
Iteration  16: 60680477.749 ops/s
Iteration  17: 60816171.786 ops/s
Iteration  18: 60689085.158 ops/s
Iteration  19: 60815008.481 ops/s
Iteration  20: 60720385.449 ops/s
Iteration  21: 60736458.559 ops/s
Iteration  22: 60728922.644 ops/s
Iteration  23: 60844047.150 ops/s
Iteration  24: 60768901.643 ops/s
Iteration  25: 60749014.768 ops/s
Iteration  26: 60610347.494 ops/s
Iteration  27: 60667312.634 ops/s
Iteration  28: 60918708.334 ops/s
Iteration  29: 60812682.259 ops/s
Iteration  30: 60906649.008 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_max":
  60735809.139 ±(99.9%) 95608.952 ops/s [Average]
  (min, avg, max) = (60349429.456, 60735809.139, 61030928.974), stdev = 143102.990
  CI (99.9%): [60640200.187, 60831418.091] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt         Score       Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_max  thrpt   30  60735809.139 ± 95608.952  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_maxBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_maxBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 31027755.681 ops/s
# Warmup Iteration   2: 58386920.245 ops/s
# Warmup Iteration   3: 49655715.347 ops/s
# Warmup Iteration   4: 57718016.368 ops/s
# Warmup Iteration   5: 58068819.978 ops/s
# Warmup Iteration   6: 57992777.818 ops/s
# Warmup Iteration   7: 58079398.055 ops/s
# Warmup Iteration   8: 58066580.290 ops/s
# Warmup Iteration   9: 58003153.506 ops/s
# Warmup Iteration  10: 58059680.468 ops/s
# Warmup Iteration  11: 57966768.240 ops/s
# Warmup Iteration  12: 58006016.132 ops/s
# Warmup Iteration  13: 58014923.350 ops/s
# Warmup Iteration  14: 58093946.003 ops/s
# Warmup Iteration  15: 58042252.820 ops/s
# Warmup Iteration  16: 57788011.520 ops/s
# Warmup Iteration  17: 58200702.567 ops/s
# Warmup Iteration  18: 58430740.115 ops/s
# Warmup Iteration  19: 58434141.705 ops/s
# Warmup Iteration  20: 58249529.797 ops/s
# Warmup Iteration  21: 58352621.695 ops/s
# Warmup Iteration  22: 58416821.181 ops/s
# Warmup Iteration  23: 58386566.081 ops/s
# Warmup Iteration  24: 58386522.245 ops/s
# Warmup Iteration  25: 58170794.628 ops/s
# Warmup Iteration  26: 58010093.711 ops/s
# Warmup Iteration  27: 57972173.600 ops/s
# Warmup Iteration  28: 58049886.331 ops/s
# Warmup Iteration  29: 58112602.814 ops/s
# Warmup Iteration  30: 58236675.304 ops/s
Iteration   1: 58373020.246 ops/s
Iteration   2: 58167526.008 ops/s
Iteration   3: 58294593.655 ops/s
Iteration   4: 58106171.977 ops/s
Iteration   5: 58291207.024 ops/s
Iteration   6: 58373796.463 ops/s
Iteration   7: 58393796.663 ops/s
Iteration   8: 58310151.268 ops/s
Iteration   9: 58422318.981 ops/s
Iteration  10: 58228947.702 ops/s
Iteration  11: 58255140.579 ops/s
Iteration  12: 58040731.616 ops/s
Iteration  13: 58279750.166 ops/s
Iteration  14: 58290800.848 ops/s
Iteration  15: 58271344.317 ops/s
Iteration  16: 58396116.211 ops/s
Iteration  17: 58361849.668 ops/s
Iteration  18: 58231107.003 ops/s
Iteration  19: 58298253.188 ops/s
Iteration  20: 58027850.381 ops/s
Iteration  21: 57967827.775 ops/s
Iteration  22: 58214980.908 ops/s
Iteration  23: 58349803.455 ops/s
Iteration  24: 58468778.343 ops/s
Iteration  25: 58351739.877 ops/s
Iteration  26: 58275029.034 ops/s
Iteration  27: 58289130.822 ops/s
Iteration  28: 58151013.440 ops/s
Iteration  29: 58031151.117 ops/s
Iteration  30: 58105940.033 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_maxBy":
  58253995.626 ±(99.9%) 85770.132 ops/s [Average]
  (min, avg, max) = (57967827.775, 58253995.626, 58468778.343), stdev = 128376.706
  CI (99.9%): [58168225.494, 58339765.758] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score       Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_maxBy  thrpt   30  58253995.626 ± 85770.132  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_max_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_max_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4617674.292 ops/s
# Warmup Iteration   2: 5841807.591 ops/s
# Warmup Iteration   3: 7342506.794 ops/s
# Warmup Iteration   4: 7317682.461 ops/s
# Warmup Iteration   5: 7336771.673 ops/s
# Warmup Iteration   6: 7339105.066 ops/s
# Warmup Iteration   7: 7339809.891 ops/s
# Warmup Iteration   8: 7343561.014 ops/s
# Warmup Iteration   9: 6171260.193 ops/s
# Warmup Iteration  10: 7366035.012 ops/s
# Warmup Iteration  11: 7372848.156 ops/s
# Warmup Iteration  12: 7367559.716 ops/s
# Warmup Iteration  13: 7360944.556 ops/s
# Warmup Iteration  14: 7371057.748 ops/s
# Warmup Iteration  15: 7365433.481 ops/s
# Warmup Iteration  16: 7336565.501 ops/s
# Warmup Iteration  17: 7422951.092 ops/s
# Warmup Iteration  18: 7413583.583 ops/s
# Warmup Iteration  19: 7412559.388 ops/s
# Warmup Iteration  20: 7419444.503 ops/s
# Warmup Iteration  21: 7426636.323 ops/s
# Warmup Iteration  22: 7431511.068 ops/s
# Warmup Iteration  23: 7413541.485 ops/s
# Warmup Iteration  24: 7420702.217 ops/s
# Warmup Iteration  25: 7413912.729 ops/s
# Warmup Iteration  26: 7402488.327 ops/s
# Warmup Iteration  27: 7399625.414 ops/s
# Warmup Iteration  28: 7421328.064 ops/s
# Warmup Iteration  29: 6978181.152 ops/s
# Warmup Iteration  30: 7405700.966 ops/s
Iteration   1: 7417405.707 ops/s
Iteration   2: 7412394.206 ops/s
Iteration   3: 7399204.130 ops/s
Iteration   4: 7413349.549 ops/s
Iteration   5: 7419143.227 ops/s
Iteration   6: 7406991.999 ops/s
Iteration   7: 7419962.806 ops/s
Iteration   8: 7407683.168 ops/s
Iteration   9: 7400406.105 ops/s
Iteration  10: 7409218.884 ops/s
Iteration  11: 7405293.070 ops/s
Iteration  12: 7388625.371 ops/s
Iteration  13: 7404810.037 ops/s
Iteration  14: 7387465.847 ops/s
Iteration  15: 7420088.929 ops/s
Iteration  16: 7422270.138 ops/s
Iteration  17: 7401993.545 ops/s
Iteration  18: 7422753.894 ops/s
Iteration  19: 7417477.507 ops/s
Iteration  20: 7409459.967 ops/s
Iteration  21: 7410003.049 ops/s
Iteration  22: 7416979.258 ops/s
Iteration  23: 7418284.007 ops/s
Iteration  24: 7403120.616 ops/s
Iteration  25: 7415304.941 ops/s
Iteration  26: 7413459.263 ops/s
Iteration  27: 7418372.075 ops/s
Iteration  28: 7406070.774 ops/s
Iteration  29: 7409249.213 ops/s
Iteration  30: 7388653.587 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_max_null_throws":
  7409516.496 ±(99.9%) 6525.958 ops/s [Average]
  (min, avg, max) = (7387465.847, 7409516.496, 7422753.894), stdev = 9767.748
  CI (99.9%): [7402990.537, 7416042.454] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_max_null_throws  thrpt   30  7409516.496 ± 6525.958  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_max_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_max_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6650315.287 ops/s
# Warmup Iteration   2: 15506633.736 ops/s
# Warmup Iteration   3: 15580503.934 ops/s
# Warmup Iteration   4: 13164840.145 ops/s
# Warmup Iteration   5: 15626419.040 ops/s
# Warmup Iteration   6: 15647878.997 ops/s
# Warmup Iteration   7: 15636680.140 ops/s
# Warmup Iteration   8: 15630845.042 ops/s
# Warmup Iteration   9: 15624095.280 ops/s
# Warmup Iteration  10: 15648060.984 ops/s
# Warmup Iteration  11: 15595893.025 ops/s
# Warmup Iteration  12: 15632624.816 ops/s
# Warmup Iteration  13: 15644058.729 ops/s
# Warmup Iteration  14: 15650866.802 ops/s
# Warmup Iteration  15: 15656004.704 ops/s
# Warmup Iteration  16: 15624299.671 ops/s
# Warmup Iteration  17: 15633924.403 ops/s
# Warmup Iteration  18: 15649802.447 ops/s
# Warmup Iteration  19: 15641209.812 ops/s
# Warmup Iteration  20: 15633520.763 ops/s
# Warmup Iteration  21: 15635497.318 ops/s
# Warmup Iteration  22: 15659734.795 ops/s
# Warmup Iteration  23: 15636518.606 ops/s
# Warmup Iteration  24: 15626864.501 ops/s
# Warmup Iteration  25: 15633940.334 ops/s
# Warmup Iteration  26: 15658568.680 ops/s
# Warmup Iteration  27: 15621824.439 ops/s
# Warmup Iteration  28: 15626188.966 ops/s
# Warmup Iteration  29: 15636434.853 ops/s
# Warmup Iteration  30: 15631933.099 ops/s
Iteration   1: 15643995.684 ops/s
Iteration   2: 15640846.627 ops/s
Iteration   3: 15655285.809 ops/s
Iteration   4: 15624564.695 ops/s
Iteration   5: 15626956.697 ops/s
Iteration   6: 15629189.779 ops/s
Iteration   7: 15667728.104 ops/s
Iteration   8: 15634870.714 ops/s
Iteration   9: 15612918.247 ops/s
Iteration  10: 15627351.180 ops/s
Iteration  11: 15678540.860 ops/s
Iteration  12: 15642414.665 ops/s
Iteration  13: 15625118.742 ops/s
Iteration  14: 15598214.242 ops/s
Iteration  15: 15639260.050 ops/s
Iteration  16: 15634590.636 ops/s
Iteration  17: 15648109.561 ops/s
Iteration  18: 15574063.605 ops/s
Iteration  19: 15594296.784 ops/s
Iteration  20: 15631542.945 ops/s
Iteration  21: 15615188.881 ops/s
Iteration  22: 15642525.663 ops/s
Iteration  23: 15651100.163 ops/s
Iteration  24: 15641813.729 ops/s
Iteration  25: 15636020.969 ops/s
Iteration  26: 15649762.484 ops/s
Iteration  27: 15665919.966 ops/s
Iteration  28: 15661625.056 ops/s
Iteration  29: 15645426.384 ops/s
Iteration  30: 15621636.725 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_max_null_throws_without_comparator":
  15635362.655 ±(99.9%) 14808.536 ops/s [Average]
  (min, avg, max) = (15574063.605, 15635362.655, 15678540.860), stdev = 22164.721
  CI (99.9%): [15620554.119, 15650171.191] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt         Score       Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_max_null_throws_without_comparator  thrpt   30  15635362.655 ± 14808.536  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_max_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_max_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 29860027.532 ops/s
# Warmup Iteration   2: 58587759.595 ops/s
# Warmup Iteration   3: 52495763.552 ops/s
# Warmup Iteration   4: 62049134.553 ops/s
# Warmup Iteration   5: 61924201.432 ops/s
# Warmup Iteration   6: 61932660.372 ops/s
# Warmup Iteration   7: 62145372.238 ops/s
# Warmup Iteration   8: 62140831.367 ops/s
# Warmup Iteration   9: 60939389.182 ops/s
# Warmup Iteration  10: 61889234.600 ops/s
# Warmup Iteration  11: 62004753.766 ops/s
# Warmup Iteration  12: 62095778.429 ops/s
# Warmup Iteration  13: 62259270.157 ops/s
# Warmup Iteration  14: 61978708.981 ops/s
# Warmup Iteration  15: 61960093.330 ops/s
# Warmup Iteration  16: 62164649.725 ops/s
# Warmup Iteration  17: 62048072.247 ops/s
# Warmup Iteration  18: 61928785.380 ops/s
# Warmup Iteration  19: 62074526.929 ops/s
# Warmup Iteration  20: 61925578.385 ops/s
# Warmup Iteration  21: 62118902.599 ops/s
# Warmup Iteration  22: 62150543.044 ops/s
# Warmup Iteration  23: 61866834.346 ops/s
# Warmup Iteration  24: 61904758.339 ops/s
# Warmup Iteration  25: 61856407.143 ops/s
# Warmup Iteration  26: 61789647.416 ops/s
# Warmup Iteration  27: 61879988.045 ops/s
# Warmup Iteration  28: 62012409.470 ops/s
# Warmup Iteration  29: 62233225.439 ops/s
# Warmup Iteration  30: 61910628.234 ops/s
Iteration   1: 62095521.533 ops/s
Iteration   2: 62262266.747 ops/s
Iteration   3: 62275393.071 ops/s
Iteration   4: 61836437.973 ops/s
Iteration   5: 62166214.708 ops/s
Iteration   6: 61749210.775 ops/s
Iteration   7: 61637714.101 ops/s
Iteration   8: 61892762.160 ops/s
Iteration   9: 62019754.325 ops/s
Iteration  10: 62096316.729 ops/s
Iteration  11: 61975441.607 ops/s
Iteration  12: 62040054.102 ops/s
Iteration  13: 62027518.787 ops/s
Iteration  14: 62032987.150 ops/s
Iteration  15: 62012961.613 ops/s
Iteration  16: 62060401.467 ops/s
Iteration  17: 61982506.337 ops/s
Iteration  18: 62181066.121 ops/s
Iteration  19: 62025914.187 ops/s
Iteration  20: 62236100.431 ops/s
Iteration  21: 62204407.358 ops/s
Iteration  22: 62188075.861 ops/s
Iteration  23: 62124209.416 ops/s
Iteration  24: 61875120.244 ops/s
Iteration  25: 62156241.073 ops/s
Iteration  26: 62084677.214 ops/s
Iteration  27: 61959405.990 ops/s
Iteration  28: 61660710.147 ops/s
Iteration  29: 61799745.732 ops/s
Iteration  30: 61789812.129 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_max_without_comparator":
  62014964.970 ±(99.9%) 114712.245 ops/s [Average]
  (min, avg, max) = (61637714.101, 62014964.970, 62275393.071), stdev = 171695.901
  CI (99.9%): [61900252.725, 62129677.215] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt         Score        Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_max_without_comparator  thrpt   30  62014964.970 ± 114712.245  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_min$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_min

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 42618659.283 ops/s
# Warmup Iteration   2: 84166680.885 ops/s
# Warmup Iteration   3: 74272407.526 ops/s
# Warmup Iteration   4: 87746998.083 ops/s
# Warmup Iteration   5: 87657136.498 ops/s
# Warmup Iteration   6: 87899523.093 ops/s
# Warmup Iteration   7: 88144443.420 ops/s
# Warmup Iteration   8: 88344752.291 ops/s
# Warmup Iteration   9: 88344561.109 ops/s
# Warmup Iteration  10: 88254356.805 ops/s
# Warmup Iteration  11: 88160264.558 ops/s
# Warmup Iteration  12: 88271949.831 ops/s
# Warmup Iteration  13: 87839809.730 ops/s
# Warmup Iteration  14: 87873870.779 ops/s
# Warmup Iteration  15: 87990749.559 ops/s
# Warmup Iteration  16: 87624593.850 ops/s
# Warmup Iteration  17: 87678474.388 ops/s
# Warmup Iteration  18: 87614619.374 ops/s
# Warmup Iteration  19: 87980233.906 ops/s
# Warmup Iteration  20: 86820829.247 ops/s
# Warmup Iteration  21: 87081605.158 ops/s
# Warmup Iteration  22: 87726893.774 ops/s
# Warmup Iteration  23: 87892555.419 ops/s
# Warmup Iteration  24: 87596610.028 ops/s
# Warmup Iteration  25: 87991050.490 ops/s
# Warmup Iteration  26: 87910439.653 ops/s
# Warmup Iteration  27: 87911017.551 ops/s
# Warmup Iteration  28: 88267995.731 ops/s
# Warmup Iteration  29: 87725380.420 ops/s
# Warmup Iteration  30: 87275864.264 ops/s
Iteration   1: 88067113.881 ops/s
Iteration   2: 87965315.489 ops/s
Iteration   3: 87728472.433 ops/s
Iteration   4: 87487759.186 ops/s
Iteration   5: 87380163.457 ops/s
Iteration   6: 87363502.972 ops/s
Iteration   7: 87724954.275 ops/s
Iteration   8: 87631893.270 ops/s
Iteration   9: 86807373.132 ops/s
Iteration  10: 85917455.684 ops/s
Iteration  11: 87683933.451 ops/s
Iteration  12: 87740659.817 ops/s
Iteration  13: 87850335.379 ops/s
Iteration  14: 87417032.386 ops/s
Iteration  15: 87588967.766 ops/s
Iteration  16: 87608895.944 ops/s
Iteration  17: 87811463.136 ops/s
Iteration  18: 87761657.014 ops/s
Iteration  19: 88107241.146 ops/s
Iteration  20: 87656792.836 ops/s
Iteration  21: 88006872.396 ops/s
Iteration  22: 87762395.277 ops/s
Iteration  23: 87976646.623 ops/s
Iteration  24: 87841019.416 ops/s
Iteration  25: 86332542.602 ops/s
Iteration  26: 85421255.424 ops/s
Iteration  27: 85546291.417 ops/s
Iteration  28: 87024370.953 ops/s
Iteration  29: 87554063.935 ops/s
Iteration  30: 87263299.686 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_min":
  87400991.346 ±(99.9%) 474654.678 ops/s [Average]
  (min, avg, max) = (85421255.424, 87400991.346, 88107241.146), stdev = 710440.831
  CI (99.9%): [86926336.668, 87875646.025] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt         Score        Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_min  thrpt   30  87400991.346 ± 474654.678  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_minBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_minBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 19177456.794 ops/s
# Warmup Iteration   2: 37907332.376 ops/s
# Warmup Iteration   3: 33017189.597 ops/s
# Warmup Iteration   4: 38822290.888 ops/s
# Warmup Iteration   5: 38757262.766 ops/s
# Warmup Iteration   6: 38331900.607 ops/s
# Warmup Iteration   7: 37203147.008 ops/s
# Warmup Iteration   8: 38685236.910 ops/s
# Warmup Iteration   9: 38844803.719 ops/s
# Warmup Iteration  10: 38825320.916 ops/s
# Warmup Iteration  11: 38819598.478 ops/s
# Warmup Iteration  12: 38712621.938 ops/s
# Warmup Iteration  13: 38883932.096 ops/s
# Warmup Iteration  14: 38885179.855 ops/s
# Warmup Iteration  15: 38817814.948 ops/s
# Warmup Iteration  16: 38104966.537 ops/s
# Warmup Iteration  17: 38720335.787 ops/s
# Warmup Iteration  18: 38760083.903 ops/s
# Warmup Iteration  19: 38708797.900 ops/s
# Warmup Iteration  20: 38913594.781 ops/s
# Warmup Iteration  21: 38859363.535 ops/s
# Warmup Iteration  22: 38915479.685 ops/s
# Warmup Iteration  23: 38863699.474 ops/s
# Warmup Iteration  24: 38794133.916 ops/s
# Warmup Iteration  25: 38871356.432 ops/s
# Warmup Iteration  26: 38854169.474 ops/s
# Warmup Iteration  27: 38383854.897 ops/s
# Warmup Iteration  28: 38520113.224 ops/s
# Warmup Iteration  29: 38728212.726 ops/s
# Warmup Iteration  30: 38629492.632 ops/s
Iteration   1: 38944479.544 ops/s
Iteration   2: 38905162.041 ops/s
Iteration   3: 38892783.416 ops/s
Iteration   4: 38881494.924 ops/s
Iteration   5: 38888669.788 ops/s
Iteration   6: 38904574.151 ops/s
Iteration   7: 38897901.173 ops/s
Iteration   8: 38541087.997 ops/s
Iteration   9: 38859555.668 ops/s
Iteration  10: 38960648.369 ops/s
Iteration  11: 38852096.310 ops/s
Iteration  12: 38890612.094 ops/s
Iteration  13: 38765006.953 ops/s
Iteration  14: 38908951.422 ops/s
Iteration  15: 38875162.014 ops/s
Iteration  16: 39010086.547 ops/s
Iteration  17: 38870366.160 ops/s
Iteration  18: 38984515.619 ops/s
Iteration  19: 38873632.436 ops/s
Iteration  20: 38975778.465 ops/s
Iteration  21: 38908672.418 ops/s
Iteration  22: 38883790.763 ops/s
Iteration  23: 38894421.110 ops/s
Iteration  24: 38973699.109 ops/s
Iteration  25: 38824792.149 ops/s
Iteration  26: 38892457.885 ops/s
Iteration  27: 38917544.974 ops/s
Iteration  28: 38774832.606 ops/s
Iteration  29: 38813830.994 ops/s
Iteration  30: 38865583.025 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_minBy":
  38881073.004 ±(99.9%) 56842.697 ops/s [Average]
  (min, avg, max) = (38541087.997, 38881073.004, 39010086.547), stdev = 85079.480
  CI (99.9%): [38824230.307, 38937915.702] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score       Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_minBy  thrpt   30  38881073.004 ± 56842.697  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_min_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_min_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6936065.677 ops/s
# Warmup Iteration   2: 15388139.435 ops/s
# Warmup Iteration   3: 15459000.711 ops/s
# Warmup Iteration   4: 13033046.398 ops/s
# Warmup Iteration   5: 15470946.793 ops/s
# Warmup Iteration   6: 15508059.400 ops/s
# Warmup Iteration   7: 15501205.115 ops/s
# Warmup Iteration   8: 15475621.993 ops/s
# Warmup Iteration   9: 15489462.670 ops/s
# Warmup Iteration  10: 15481814.201 ops/s
# Warmup Iteration  11: 15464210.457 ops/s
# Warmup Iteration  12: 15471295.401 ops/s
# Warmup Iteration  13: 15492110.206 ops/s
# Warmup Iteration  14: 15466273.712 ops/s
# Warmup Iteration  15: 15444271.147 ops/s
# Warmup Iteration  16: 15480810.929 ops/s
# Warmup Iteration  17: 15469439.641 ops/s
# Warmup Iteration  18: 15480491.711 ops/s
# Warmup Iteration  19: 15471952.908 ops/s
# Warmup Iteration  20: 15481636.688 ops/s
# Warmup Iteration  21: 15486842.628 ops/s
# Warmup Iteration  22: 15462604.303 ops/s
# Warmup Iteration  23: 15482133.027 ops/s
# Warmup Iteration  24: 15481411.247 ops/s
# Warmup Iteration  25: 15490118.724 ops/s
# Warmup Iteration  26: 15487251.030 ops/s
# Warmup Iteration  27: 15470424.501 ops/s
# Warmup Iteration  28: 15453600.373 ops/s
# Warmup Iteration  29: 15447100.110 ops/s
# Warmup Iteration  30: 15489780.382 ops/s
Iteration   1: 15462306.334 ops/s
Iteration   2: 15494889.589 ops/s
Iteration   3: 15514370.195 ops/s
Iteration   4: 15489489.444 ops/s
Iteration   5: 15491050.845 ops/s
Iteration   6: 15479792.265 ops/s
Iteration   7: 15470160.629 ops/s
Iteration   8: 15506015.430 ops/s
Iteration   9: 15410414.238 ops/s
Iteration  10: 15470780.409 ops/s
Iteration  11: 15490243.955 ops/s
Iteration  12: 15501579.391 ops/s
Iteration  13: 15478069.345 ops/s
Iteration  14: 15498655.231 ops/s
Iteration  15: 15468760.962 ops/s
Iteration  16: 15480771.104 ops/s
Iteration  17: 15483808.571 ops/s
Iteration  18: 15501088.600 ops/s
Iteration  19: 15477756.564 ops/s
Iteration  20: 15471607.601 ops/s
Iteration  21: 15447753.995 ops/s
Iteration  22: 15461611.881 ops/s
Iteration  23: 15455374.441 ops/s
Iteration  24: 15491299.687 ops/s
Iteration  25: 15463538.016 ops/s
Iteration  26: 15494209.062 ops/s
Iteration  27: 15472976.822 ops/s
Iteration  28: 15479566.349 ops/s
Iteration  29: 15484882.644 ops/s
Iteration  30: 15485542.153 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_min_null_throws":
  15479278.858 ±(99.9%) 13526.229 ops/s [Average]
  (min, avg, max) = (15410414.238, 15479278.858, 15514370.195), stdev = 20245.425
  CI (99.9%): [15465752.629, 15492805.088] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score       Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_min_null_throws  thrpt   30  15479278.858 ± 13526.229  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_min_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_min_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4615602.927 ops/s
# Warmup Iteration   2: 6066799.123 ops/s
# Warmup Iteration   3: 7350604.156 ops/s
# Warmup Iteration   4: 7358423.460 ops/s
# Warmup Iteration   5: 7383672.917 ops/s
# Warmup Iteration   6: 7380223.646 ops/s
# Warmup Iteration   7: 7374475.080 ops/s
# Warmup Iteration   8: 7238971.218 ops/s
# Warmup Iteration   9: 6299159.251 ops/s
# Warmup Iteration  10: 7373889.810 ops/s
# Warmup Iteration  11: 7375797.340 ops/s
# Warmup Iteration  12: 7358370.231 ops/s
# Warmup Iteration  13: 7371453.434 ops/s
# Warmup Iteration  14: 7374824.066 ops/s
# Warmup Iteration  15: 7376852.046 ops/s
# Warmup Iteration  16: 7372324.413 ops/s
# Warmup Iteration  17: 7375164.400 ops/s
# Warmup Iteration  18: 7349851.256 ops/s
# Warmup Iteration  19: 7346640.020 ops/s
# Warmup Iteration  20: 7335880.347 ops/s
# Warmup Iteration  21: 7358623.930 ops/s
# Warmup Iteration  22: 7355869.862 ops/s
# Warmup Iteration  23: 7365521.061 ops/s
# Warmup Iteration  24: 7372277.948 ops/s
# Warmup Iteration  25: 7377238.551 ops/s
# Warmup Iteration  26: 7364992.616 ops/s
# Warmup Iteration  27: 7360847.202 ops/s
# Warmup Iteration  28: 7364339.662 ops/s
# Warmup Iteration  29: 7370809.564 ops/s
# Warmup Iteration  30: 7366976.246 ops/s
Iteration   1: 7359852.773 ops/s
Iteration   2: 7378363.881 ops/s
Iteration   3: 7365979.997 ops/s
Iteration   4: 7381953.608 ops/s
Iteration   5: 7372232.043 ops/s
Iteration   6: 7369184.018 ops/s
Iteration   7: 7379221.084 ops/s
Iteration   8: 7375061.487 ops/s
Iteration   9: 7367683.774 ops/s
Iteration  10: 7373610.166 ops/s
Iteration  11: 7378312.312 ops/s
Iteration  12: 7367328.356 ops/s
Iteration  13: 7385343.864 ops/s
Iteration  14: 7366349.052 ops/s
Iteration  15: 7375626.431 ops/s
Iteration  16: 7377391.168 ops/s
Iteration  17: 7371020.856 ops/s
Iteration  18: 7371676.892 ops/s
Iteration  19: 7375627.107 ops/s
Iteration  20: 7351248.738 ops/s
Iteration  21: 7366390.224 ops/s
Iteration  22: 7368101.932 ops/s
Iteration  23: 7361778.058 ops/s
Iteration  24: 7382340.826 ops/s
Iteration  25: 7372230.181 ops/s
Iteration  26: 7368487.736 ops/s
Iteration  27: 7383523.427 ops/s
Iteration  28: 7379998.316 ops/s
Iteration  29: 7345370.602 ops/s
Iteration  30: 7374897.780 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_min_null_throws_without_comparator":
  7371539.556 ±(99.9%) 6015.833 ops/s [Average]
  (min, avg, max) = (7345370.602, 7371539.556, 7385343.864), stdev = 9004.216
  CI (99.9%): [7365523.724, 7377555.389] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt        Score      Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_min_null_throws_without_comparator  thrpt   30  7371539.556 ± 6015.833  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_min_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_min_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 42477794.920 ops/s
# Warmup Iteration   2: 82062915.858 ops/s
# Warmup Iteration   3: 78459055.479 ops/s
# Warmup Iteration   4: 92414827.804 ops/s
# Warmup Iteration   5: 92101537.391 ops/s
# Warmup Iteration   6: 92474520.761 ops/s
# Warmup Iteration   7: 92316538.971 ops/s
# Warmup Iteration   8: 92367478.345 ops/s
# Warmup Iteration   9: 92595204.487 ops/s
# Warmup Iteration  10: 92288973.370 ops/s
# Warmup Iteration  11: 92297832.866 ops/s
# Warmup Iteration  12: 92196924.205 ops/s
# Warmup Iteration  13: 92512018.378 ops/s
# Warmup Iteration  14: 92467477.669 ops/s
# Warmup Iteration  15: 92341409.136 ops/s
# Warmup Iteration  16: 92023453.621 ops/s
# Warmup Iteration  17: 92207843.624 ops/s
# Warmup Iteration  18: 92305274.647 ops/s
# Warmup Iteration  19: 92143920.636 ops/s
# Warmup Iteration  20: 92195509.243 ops/s
# Warmup Iteration  21: 92485406.051 ops/s
# Warmup Iteration  22: 92208712.305 ops/s
# Warmup Iteration  23: 92267373.928 ops/s
# Warmup Iteration  24: 92198294.390 ops/s
# Warmup Iteration  25: 92263167.391 ops/s
# Warmup Iteration  26: 92106775.054 ops/s
# Warmup Iteration  27: 92457524.948 ops/s
# Warmup Iteration  28: 92244678.074 ops/s
# Warmup Iteration  29: 92280849.743 ops/s
# Warmup Iteration  30: 92576835.186 ops/s
Iteration   1: 92025659.640 ops/s
Iteration   2: 91852389.529 ops/s
Iteration   3: 91721852.981 ops/s
Iteration   4: 92631199.429 ops/s
Iteration   5: 92216848.420 ops/s
Iteration   6: 92000208.794 ops/s
Iteration   7: 92112196.327 ops/s
Iteration   8: 92339239.460 ops/s
Iteration   9: 92443919.967 ops/s
Iteration  10: 92394396.009 ops/s
Iteration  11: 92354629.042 ops/s
Iteration  12: 92387818.308 ops/s
Iteration  13: 92409044.316 ops/s
Iteration  14: 92233428.945 ops/s
Iteration  15: 92335893.566 ops/s
Iteration  16: 92282132.862 ops/s
Iteration  17: 92327135.826 ops/s
Iteration  18: 92415151.298 ops/s
Iteration  19: 92451765.549 ops/s
Iteration  20: 92309264.488 ops/s
Iteration  21: 92136124.004 ops/s
Iteration  22: 92545562.563 ops/s
Iteration  23: 92703300.157 ops/s
Iteration  24: 92641804.267 ops/s
Iteration  25: 92021234.790 ops/s
Iteration  26: 92119980.422 ops/s
Iteration  27: 92516379.231 ops/s
Iteration  28: 92008330.765 ops/s
Iteration  29: 92229534.263 ops/s
Iteration  30: 92272069.314 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_min_without_comparator":
  92281283.151 ±(99.9%) 154580.264 ops/s [Average]
  (min, avg, max) = (91721852.981, 92281283.151, 92703300.157), stdev = 231368.479
  CI (99.9%): [92126702.887, 92435863.415] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt         Score        Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_min_without_comparator  thrpt   30  92281283.151 ± 154580.264  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 21337182.341 ops/s
# Warmup Iteration   2: 42367930.616 ops/s
# Warmup Iteration   3: 35092895.697 ops/s
# Warmup Iteration   4: 41367644.895 ops/s
# Warmup Iteration   5: 41605857.084 ops/s
# Warmup Iteration   6: 41488515.255 ops/s
# Warmup Iteration   7: 41555454.917 ops/s
# Warmup Iteration   8: 41445949.138 ops/s
# Warmup Iteration   9: 41610432.453 ops/s
# Warmup Iteration  10: 41491314.590 ops/s
# Warmup Iteration  11: 41545134.523 ops/s
# Warmup Iteration  12: 41561926.634 ops/s
# Warmup Iteration  13: 41441427.161 ops/s
# Warmup Iteration  14: 41492696.270 ops/s
# Warmup Iteration  15: 41485348.428 ops/s
# Warmup Iteration  16: 41584217.392 ops/s
# Warmup Iteration  17: 41428105.622 ops/s
# Warmup Iteration  18: 41564700.035 ops/s
# Warmup Iteration  19: 41490488.119 ops/s
# Warmup Iteration  20: 41490983.378 ops/s
# Warmup Iteration  21: 41461192.761 ops/s
# Warmup Iteration  22: 41560479.479 ops/s
# Warmup Iteration  23: 41504276.613 ops/s
# Warmup Iteration  24: 41527491.170 ops/s
# Warmup Iteration  25: 41397135.101 ops/s
# Warmup Iteration  26: 41397115.378 ops/s
# Warmup Iteration  27: 41536003.532 ops/s
# Warmup Iteration  28: 41478237.360 ops/s
# Warmup Iteration  29: 41481342.041 ops/s
# Warmup Iteration  30: 41460781.054 ops/s
Iteration   1: 41373377.022 ops/s
Iteration   2: 41199910.806 ops/s
Iteration   3: 41372762.166 ops/s
Iteration   4: 41413722.216 ops/s
Iteration   5: 41335154.203 ops/s
Iteration   6: 41203410.801 ops/s
Iteration   7: 40754754.936 ops/s
Iteration   8: 41366629.652 ops/s
Iteration   9: 41306695.941 ops/s
Iteration  10: 41439093.148 ops/s
Iteration  11: 41400942.822 ops/s
Iteration  12: 41367534.017 ops/s
Iteration  13: 41257323.944 ops/s
Iteration  14: 41335688.045 ops/s
Iteration  15: 41405662.001 ops/s
Iteration  16: 41354989.497 ops/s
Iteration  17: 41338565.129 ops/s
Iteration  18: 41332807.998 ops/s
Iteration  19: 41369308.913 ops/s
Iteration  20: 41275065.951 ops/s
Iteration  21: 41115050.715 ops/s
Iteration  22: 41169930.452 ops/s
Iteration  23: 41195142.405 ops/s
Iteration  24: 41185166.470 ops/s
Iteration  25: 41381413.215 ops/s
Iteration  26: 41342010.848 ops/s
Iteration  27: 41387012.332 ops/s
Iteration  28: 41430728.018 ops/s
Iteration  29: 41023809.069 ops/s
Iteration  30: 40132644.023 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_noneSatisfy":
  41252210.225 ±(99.9%) 170299.255 ops/s [Average]
  (min, avg, max) = (40132644.023, 41252210.225, 41439093.148), stdev = 254895.927
  CI (99.9%): [41081910.970, 41422509.480] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score        Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_noneSatisfy  thrpt   30  41252210.225 ± 170299.255  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_noneSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_noneSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12361375.154 ops/s
# Warmup Iteration   2: 23925203.036 ops/s
# Warmup Iteration   3: 20848738.988 ops/s
# Warmup Iteration   4: 24582331.808 ops/s
# Warmup Iteration   5: 24528898.588 ops/s
# Warmup Iteration   6: 24586026.979 ops/s
# Warmup Iteration   7: 24454606.902 ops/s
# Warmup Iteration   8: 24569354.755 ops/s
# Warmup Iteration   9: 24599287.393 ops/s
# Warmup Iteration  10: 24629901.155 ops/s
# Warmup Iteration  11: 24585871.917 ops/s
# Warmup Iteration  12: 24532434.685 ops/s
# Warmup Iteration  13: 24584639.957 ops/s
# Warmup Iteration  14: 24570061.434 ops/s
# Warmup Iteration  15: 24646208.809 ops/s
# Warmup Iteration  16: 24669479.155 ops/s
# Warmup Iteration  17: 24619115.819 ops/s
# Warmup Iteration  18: 24606468.434 ops/s
# Warmup Iteration  19: 24615042.384 ops/s
# Warmup Iteration  20: 24621452.350 ops/s
# Warmup Iteration  21: 24524971.125 ops/s
# Warmup Iteration  22: 24641034.556 ops/s
# Warmup Iteration  23: 24673990.114 ops/s
# Warmup Iteration  24: 24604581.228 ops/s
# Warmup Iteration  25: 24651901.357 ops/s
# Warmup Iteration  26: 24598062.843 ops/s
# Warmup Iteration  27: 24595909.399 ops/s
# Warmup Iteration  28: 24617914.088 ops/s
# Warmup Iteration  29: 24633270.437 ops/s
# Warmup Iteration  30: 24657973.791 ops/s
Iteration   1: 24663298.915 ops/s
Iteration   2: 23132887.782 ops/s
Iteration   3: 24659591.941 ops/s
Iteration   4: 24619512.496 ops/s
Iteration   5: 24620712.921 ops/s
Iteration   6: 24644006.628 ops/s
Iteration   7: 24479577.077 ops/s
Iteration   8: 24594806.314 ops/s
Iteration   9: 24590595.288 ops/s
Iteration  10: 24479590.418 ops/s
Iteration  11: 24462637.245 ops/s
Iteration  12: 24531603.044 ops/s
Iteration  13: 24585700.517 ops/s
Iteration  14: 24624192.250 ops/s
Iteration  15: 24588617.600 ops/s
Iteration  16: 24588008.307 ops/s
Iteration  17: 24586891.411 ops/s
Iteration  18: 24626047.220 ops/s
Iteration  19: 24599197.092 ops/s
Iteration  20: 24614038.183 ops/s
Iteration  21: 24647310.692 ops/s
Iteration  22: 24621362.800 ops/s
Iteration  23: 24597015.618 ops/s
Iteration  24: 24637271.363 ops/s
Iteration  25: 24660096.755 ops/s
Iteration  26: 24623061.906 ops/s
Iteration  27: 24611990.360 ops/s
Iteration  28: 24468045.729 ops/s
Iteration  29: 24469668.810 ops/s
Iteration  30: 24489007.527 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_noneSatisfyWith":
  24537211.474 ±(99.9%) 182098.387 ops/s [Average]
  (min, avg, max) = (23132887.782, 24537211.474, 24663298.915), stdev = 272556.314
  CI (99.9%): [24355113.086, 24719309.861] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score        Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_noneSatisfyWith  thrpt   30  24537211.474 ± 182098.387  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_parallelStream$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_parallelStream

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 17996.191 ops/s
# Warmup Iteration   2: 22567.942 ops/s
# Warmup Iteration   3: 22324.061 ops/s
# Warmup Iteration   4: 22910.699 ops/s
# Warmup Iteration   5: 22709.716 ops/s
# Warmup Iteration   6: 23228.588 ops/s
# Warmup Iteration   7: 25272.190 ops/s
# Warmup Iteration   8: 30272.512 ops/s
# Warmup Iteration   9: 32245.031 ops/s
# Warmup Iteration  10: 32410.112 ops/s
# Warmup Iteration  11: 31384.642 ops/s
# Warmup Iteration  12: 31080.461 ops/s
# Warmup Iteration  13: 29952.274 ops/s
# Warmup Iteration  14: 30266.204 ops/s
# Warmup Iteration  15: 30722.233 ops/s
# Warmup Iteration  16: 31160.255 ops/s
# Warmup Iteration  17: 29655.320 ops/s
# Warmup Iteration  18: 32926.177 ops/s
# Warmup Iteration  19: 32229.982 ops/s
# Warmup Iteration  20: 31724.921 ops/s
# Warmup Iteration  21: 31348.638 ops/s
# Warmup Iteration  22: 31646.018 ops/s
# Warmup Iteration  23: 30960.566 ops/s
# Warmup Iteration  24: 30755.470 ops/s
# Warmup Iteration  25: 30899.521 ops/s
# Warmup Iteration  26: 30002.848 ops/s
# Warmup Iteration  27: 31162.399 ops/s
# Warmup Iteration  28: 31570.076 ops/s
# Warmup Iteration  29: 31807.745 ops/s
# Warmup Iteration  30: 31780.936 ops/s
Iteration   1: 31393.452 ops/s
Iteration   2: 32352.315 ops/s
Iteration   3: 32145.035 ops/s
Iteration   4: 31375.601 ops/s
Iteration   5: 31351.348 ops/s
Iteration   6: 31484.336 ops/s
Iteration   7: 31623.513 ops/s
Iteration   8: 33310.752 ops/s
Iteration   9: 31835.531 ops/s
Iteration  10: 32498.879 ops/s
Iteration  11: 32330.654 ops/s
Iteration  12: 26656.985 ops/s
Iteration  13: 22390.471 ops/s
Iteration  14: 22496.238 ops/s
Iteration  15: 21998.874 ops/s
Iteration  16: 23347.726 ops/s
Iteration  17: 31414.240 ops/s
Iteration  18: 31393.864 ops/s
Iteration  19: 32299.486 ops/s
Iteration  20: 31243.018 ops/s
Iteration  21: 30519.717 ops/s
Iteration  22: 31383.726 ops/s
Iteration  23: 31025.561 ops/s
Iteration  24: 31896.914 ops/s
Iteration  25: 32067.487 ops/s
Iteration  26: 31705.377 ops/s
Iteration  27: 32377.954 ops/s
Iteration  28: 31574.209 ops/s
Iteration  29: 31740.731 ops/s
Iteration  30: 32048.380 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_parallelStream":
  30376.079 ±(99.9%) 2206.159 ops/s [Average]
  (min, avg, max) = (21998.874, 30376.079, 33310.752), stdev = 3302.075
  CI (99.9%): [28169.920, 32582.238] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt      Score      Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_parallelStream  thrpt   30  30376.079 ± 2206.159  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_partition$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_partition

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1527555.484 ops/s
# Warmup Iteration   2: 2122404.151 ops/s
# Warmup Iteration   3: 2528889.357 ops/s
# Warmup Iteration   4: 2515401.660 ops/s
# Warmup Iteration   5: 2521575.671 ops/s
# Warmup Iteration   6: 2525953.738 ops/s
# Warmup Iteration   7: 2424246.762 ops/s
# Warmup Iteration   8: 2221005.636 ops/s
# Warmup Iteration   9: 2530701.505 ops/s
# Warmup Iteration  10: 2530534.676 ops/s
# Warmup Iteration  11: 2530313.050 ops/s
# Warmup Iteration  12: 2531389.936 ops/s
# Warmup Iteration  13: 2532914.152 ops/s
# Warmup Iteration  14: 2532917.285 ops/s
# Warmup Iteration  15: 2531698.264 ops/s
# Warmup Iteration  16: 2531377.949 ops/s
# Warmup Iteration  17: 2531737.674 ops/s
# Warmup Iteration  18: 2530788.240 ops/s
# Warmup Iteration  19: 2530507.922 ops/s
# Warmup Iteration  20: 2531566.615 ops/s
# Warmup Iteration  21: 2533306.552 ops/s
# Warmup Iteration  22: 2528838.157 ops/s
# Warmup Iteration  23: 2529079.980 ops/s
# Warmup Iteration  24: 2530908.490 ops/s
# Warmup Iteration  25: 2532148.746 ops/s
# Warmup Iteration  26: 2526323.827 ops/s
# Warmup Iteration  27: 2528153.096 ops/s
# Warmup Iteration  28: 2527917.010 ops/s
# Warmup Iteration  29: 2531717.454 ops/s
# Warmup Iteration  30: 2521906.123 ops/s
Iteration   1: 2524917.767 ops/s
Iteration   2: 2533374.337 ops/s
Iteration   3: 2529812.281 ops/s
Iteration   4: 2525013.872 ops/s
Iteration   5: 2530467.273 ops/s
Iteration   6: 2527509.996 ops/s
Iteration   7: 2531879.810 ops/s
Iteration   8: 2531600.923 ops/s
Iteration   9: 2528174.041 ops/s
Iteration  10: 2530515.596 ops/s
Iteration  11: 2528545.516 ops/s
Iteration  12: 2532295.336 ops/s
Iteration  13: 2529245.683 ops/s
Iteration  14: 2528798.348 ops/s
Iteration  15: 2532958.335 ops/s
Iteration  16: 2526588.331 ops/s
Iteration  17: 2533650.046 ops/s
Iteration  18: 2529000.153 ops/s
Iteration  19: 2533499.261 ops/s
Iteration  20: 2534258.390 ops/s
Iteration  21: 2528840.847 ops/s
Iteration  22: 2535211.305 ops/s
Iteration  23: 2527809.362 ops/s
Iteration  24: 2532252.263 ops/s
Iteration  25: 2530416.035 ops/s
Iteration  26: 2525957.306 ops/s
Iteration  27: 2532950.099 ops/s
Iteration  28: 2530070.494 ops/s
Iteration  29: 2531347.285 ops/s
Iteration  30: 2532959.223 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_partition":
  2530330.651 ±(99.9%) 1855.209 ops/s [Average]
  (min, avg, max) = (2524917.767, 2530330.651, 2535211.305), stdev = 2776.790
  CI (99.9%): [2528475.441, 2532185.860] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_partition  thrpt   30  2530330.651 ± 1855.209  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_partitionWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_partitionWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3493521.699 ops/s
# Warmup Iteration   2: 7628923.085 ops/s
# Warmup Iteration   3: 7524983.144 ops/s
# Warmup Iteration   4: 6585141.193 ops/s
# Warmup Iteration   5: 7668777.548 ops/s
# Warmup Iteration   6: 7665417.833 ops/s
# Warmup Iteration   7: 7679612.786 ops/s
# Warmup Iteration   8: 7663718.846 ops/s
# Warmup Iteration   9: 7679042.642 ops/s
# Warmup Iteration  10: 7685327.243 ops/s
# Warmup Iteration  11: 7674912.424 ops/s
# Warmup Iteration  12: 7677229.016 ops/s
# Warmup Iteration  13: 7672223.961 ops/s
# Warmup Iteration  14: 7679008.711 ops/s
# Warmup Iteration  15: 7688329.402 ops/s
# Warmup Iteration  16: 7672105.673 ops/s
# Warmup Iteration  17: 7680346.687 ops/s
# Warmup Iteration  18: 7666020.709 ops/s
# Warmup Iteration  19: 7666065.043 ops/s
# Warmup Iteration  20: 7672513.336 ops/s
# Warmup Iteration  21: 7682393.742 ops/s
# Warmup Iteration  22: 7683493.388 ops/s
# Warmup Iteration  23: 7674008.631 ops/s
# Warmup Iteration  24: 7681884.315 ops/s
# Warmup Iteration  25: 7672568.828 ops/s
# Warmup Iteration  26: 7674450.429 ops/s
# Warmup Iteration  27: 7674339.937 ops/s
# Warmup Iteration  28: 7660450.374 ops/s
# Warmup Iteration  29: 7671202.581 ops/s
# Warmup Iteration  30: 7680984.141 ops/s
Iteration   1: 7663133.422 ops/s
Iteration   2: 7689352.045 ops/s
Iteration   3: 7674956.467 ops/s
Iteration   4: 7684813.695 ops/s
Iteration   5: 7674446.578 ops/s
Iteration   6: 7663431.861 ops/s
Iteration   7: 7666768.255 ops/s
Iteration   8: 7681208.293 ops/s
Iteration   9: 7686454.808 ops/s
Iteration  10: 7674227.674 ops/s
Iteration  11: 7691849.171 ops/s
Iteration  12: 7680951.678 ops/s
Iteration  13: 7672406.360 ops/s
Iteration  14: 7663450.205 ops/s
Iteration  15: 7690017.034 ops/s
Iteration  16: 7653704.872 ops/s
Iteration  17: 7685944.089 ops/s
Iteration  18: 7681320.520 ops/s
Iteration  19: 7685386.465 ops/s
Iteration  20: 7670132.204 ops/s
Iteration  21: 7676414.924 ops/s
Iteration  22: 7670858.619 ops/s
Iteration  23: 7689395.974 ops/s
Iteration  24: 7681809.867 ops/s
Iteration  25: 7686307.724 ops/s
Iteration  26: 7677330.292 ops/s
Iteration  27: 7680377.149 ops/s
Iteration  28: 7673702.704 ops/s
Iteration  29: 7669602.399 ops/s
Iteration  30: 7669847.330 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_partitionWhile":
  7676986.756 ±(99.9%) 6349.209 ops/s [Average]
  (min, avg, max) = (7653704.872, 7676986.756, 7691849.171), stdev = 9503.197
  CI (99.9%): [7670637.547, 7683335.965] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_partitionWhile  thrpt   30  7676986.756 ± 6349.209  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_partitionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_partitionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1320770.808 ops/s
# Warmup Iteration   2: 1870832.294 ops/s
# Warmup Iteration   3: 2212560.541 ops/s
# Warmup Iteration   4: 2203186.629 ops/s
# Warmup Iteration   5: 2211346.189 ops/s
# Warmup Iteration   6: 2212574.917 ops/s
# Warmup Iteration   7: 1986208.386 ops/s
# Warmup Iteration   8: 2077790.774 ops/s
# Warmup Iteration   9: 2214922.375 ops/s
# Warmup Iteration  10: 2214842.991 ops/s
# Warmup Iteration  11: 2211812.485 ops/s
# Warmup Iteration  12: 2216591.110 ops/s
# Warmup Iteration  13: 2215113.217 ops/s
# Warmup Iteration  14: 2214973.592 ops/s
# Warmup Iteration  15: 2215593.532 ops/s
# Warmup Iteration  16: 2208507.762 ops/s
# Warmup Iteration  17: 2208237.273 ops/s
# Warmup Iteration  18: 2215975.161 ops/s
# Warmup Iteration  19: 2216807.191 ops/s
# Warmup Iteration  20: 2215896.954 ops/s
# Warmup Iteration  21: 2214712.937 ops/s
# Warmup Iteration  22: 2214833.547 ops/s
# Warmup Iteration  23: 2214047.097 ops/s
# Warmup Iteration  24: 2214136.056 ops/s
# Warmup Iteration  25: 2217227.958 ops/s
# Warmup Iteration  26: 2216894.728 ops/s
# Warmup Iteration  27: 2215204.955 ops/s
# Warmup Iteration  28: 2217273.848 ops/s
# Warmup Iteration  29: 2216691.491 ops/s
# Warmup Iteration  30: 2214397.638 ops/s
Iteration   1: 2218042.523 ops/s
Iteration   2: 2211323.944 ops/s
Iteration   3: 2216967.717 ops/s
Iteration   4: 2205582.835 ops/s
Iteration   5: 2210893.463 ops/s
Iteration   6: 2217038.614 ops/s
Iteration   7: 2213220.006 ops/s
Iteration   8: 2218844.830 ops/s
Iteration   9: 2216216.171 ops/s
Iteration  10: 2216283.691 ops/s
Iteration  11: 2218143.435 ops/s
Iteration  12: 2215424.545 ops/s
Iteration  13: 2216803.291 ops/s
Iteration  14: 2212233.729 ops/s
Iteration  15: 2211017.766 ops/s
Iteration  16: 2207310.113 ops/s
Iteration  17: 2214563.165 ops/s
Iteration  18: 2207225.303 ops/s
Iteration  19: 2213092.276 ops/s
Iteration  20: 2216610.863 ops/s
Iteration  21: 2217304.892 ops/s
Iteration  22: 2220090.509 ops/s
Iteration  23: 2217488.063 ops/s
Iteration  24: 2213454.520 ops/s
Iteration  25: 2219556.651 ops/s
Iteration  26: 2213319.944 ops/s
Iteration  27: 2218080.975 ops/s
Iteration  28: 2211607.469 ops/s
Iteration  29: 2215799.015 ops/s
Iteration  30: 2216884.056 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_partitionWith":
  2214680.812 ±(99.9%) 2499.159 ops/s [Average]
  (min, avg, max) = (2205582.835, 2214680.812, 2220090.509), stdev = 3740.624
  CI (99.9%): [2212181.653, 2217179.972] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_partitionWith  thrpt   30  2214680.812 ± 2499.159  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4148500.829 ops/s
# Warmup Iteration   2: 9162185.669 ops/s
# Warmup Iteration   3: 9352922.579 ops/s
# Warmup Iteration   4: 7849458.179 ops/s
# Warmup Iteration   5: 9382626.722 ops/s
# Warmup Iteration   6: 9394163.384 ops/s
# Warmup Iteration   7: 9361717.133 ops/s
# Warmup Iteration   8: 9370005.220 ops/s
# Warmup Iteration   9: 9363342.905 ops/s
# Warmup Iteration  10: 9372650.080 ops/s
# Warmup Iteration  11: 9386461.670 ops/s
# Warmup Iteration  12: 9373294.840 ops/s
# Warmup Iteration  13: 9375008.452 ops/s
# Warmup Iteration  14: 9361720.713 ops/s
# Warmup Iteration  15: 9368708.816 ops/s
# Warmup Iteration  16: 9248075.954 ops/s
# Warmup Iteration  17: 9377811.442 ops/s
# Warmup Iteration  18: 9388943.259 ops/s
# Warmup Iteration  19: 9347666.284 ops/s
# Warmup Iteration  20: 9365968.116 ops/s
# Warmup Iteration  21: 9375546.192 ops/s
# Warmup Iteration  22: 9313114.383 ops/s
# Warmup Iteration  23: 9386019.309 ops/s
# Warmup Iteration  24: 9369818.059 ops/s
# Warmup Iteration  25: 9386894.734 ops/s
# Warmup Iteration  26: 9368163.719 ops/s
# Warmup Iteration  27: 9371990.705 ops/s
# Warmup Iteration  28: 9385268.937 ops/s
# Warmup Iteration  29: 9385714.249 ops/s
# Warmup Iteration  30: 9371418.114 ops/s
Iteration   1: 9386015.981 ops/s
Iteration   2: 9388734.287 ops/s
Iteration   3: 9369081.818 ops/s
Iteration   4: 9382426.692 ops/s
Iteration   5: 9356446.011 ops/s
Iteration   6: 9358851.241 ops/s
Iteration   7: 9358768.695 ops/s
Iteration   8: 9384948.768 ops/s
Iteration   9: 9381815.968 ops/s
Iteration  10: 9377483.767 ops/s
Iteration  11: 9363146.719 ops/s
Iteration  12: 9380737.300 ops/s
Iteration  13: 9382770.910 ops/s
Iteration  14: 9377044.570 ops/s
Iteration  15: 9384110.579 ops/s
Iteration  16: 9381236.505 ops/s
Iteration  17: 9363671.107 ops/s
Iteration  18: 9389419.332 ops/s
Iteration  19: 9384373.879 ops/s
Iteration  20: 9385400.787 ops/s
Iteration  21: 9388949.823 ops/s
Iteration  22: 9381869.197 ops/s
Iteration  23: 9329584.092 ops/s
Iteration  24: 9380473.903 ops/s
Iteration  25: 9392935.836 ops/s
Iteration  26: 9374615.852 ops/s
Iteration  27: 9378782.568 ops/s
Iteration  28: 9389405.402 ops/s
Iteration  29: 9405087.180 ops/s
Iteration  30: 9382327.070 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_reject":
  9378017.195 ±(99.9%) 9510.473 ops/s [Average]
  (min, avg, max) = (9329584.092, 9378017.195, 9405087.180), stdev = 14234.830
  CI (99.9%): [9368506.721, 9387527.668] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_reject  thrpt   30  9378017.195 ± 9510.473  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_rejectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_rejectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3858004.393 ops/s
# Warmup Iteration   2: 10413381.552 ops/s
# Warmup Iteration   3: 9161809.470 ops/s
# Warmup Iteration   4: 10041514.162 ops/s
# Warmup Iteration   5: 10423465.183 ops/s
# Warmup Iteration   6: 10411448.543 ops/s
# Warmup Iteration   7: 10421946.916 ops/s
# Warmup Iteration   8: 10423202.859 ops/s
# Warmup Iteration   9: 10406979.252 ops/s
# Warmup Iteration  10: 10434795.934 ops/s
# Warmup Iteration  11: 10400235.376 ops/s
# Warmup Iteration  12: 10389494.565 ops/s
# Warmup Iteration  13: 10414424.074 ops/s
# Warmup Iteration  14: 10432292.747 ops/s
# Warmup Iteration  15: 10422687.183 ops/s
# Warmup Iteration  16: 10434617.811 ops/s
# Warmup Iteration  17: 10418666.634 ops/s
# Warmup Iteration  18: 10428104.015 ops/s
# Warmup Iteration  19: 10433284.167 ops/s
# Warmup Iteration  20: 10405050.390 ops/s
# Warmup Iteration  21: 10423430.493 ops/s
# Warmup Iteration  22: 10420323.880 ops/s
# Warmup Iteration  23: 10429717.526 ops/s
# Warmup Iteration  24: 10435034.577 ops/s
# Warmup Iteration  25: 10438793.029 ops/s
# Warmup Iteration  26: 10432681.794 ops/s
# Warmup Iteration  27: 10409001.287 ops/s
# Warmup Iteration  28: 10419823.658 ops/s
# Warmup Iteration  29: 10407531.325 ops/s
# Warmup Iteration  30: 10425147.910 ops/s
Iteration   1: 10450425.571 ops/s
Iteration   2: 10427373.996 ops/s
Iteration   3: 10403590.788 ops/s
Iteration   4: 10455512.320 ops/s
Iteration   5: 10455792.972 ops/s
Iteration   6: 10437078.845 ops/s
Iteration   7: 10425042.303 ops/s
Iteration   8: 10401420.923 ops/s
Iteration   9: 10452651.807 ops/s
Iteration  10: 10462455.295 ops/s
Iteration  11: 10447669.053 ops/s
Iteration  12: 10430478.186 ops/s
Iteration  13: 10396363.421 ops/s
Iteration  14: 10451227.274 ops/s
Iteration  15: 10430263.708 ops/s
Iteration  16: 10435171.393 ops/s
Iteration  17: 10443630.481 ops/s
Iteration  18: 10433697.227 ops/s
Iteration  19: 10439622.071 ops/s
Iteration  20: 10378049.397 ops/s
Iteration  21: 10357343.255 ops/s
Iteration  22: 10423101.568 ops/s
Iteration  23: 10434182.057 ops/s
Iteration  24: 10394282.002 ops/s
Iteration  25: 10417305.026 ops/s
Iteration  26: 10439041.194 ops/s
Iteration  27: 10422971.389 ops/s
Iteration  28: 10448238.170 ops/s
Iteration  29: 10424895.189 ops/s
Iteration  30: 10445228.670 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_rejectWith":
  10428803.518 ±(99.9%) 16302.968 ops/s [Average]
  (min, avg, max) = (10357343.255, 10428803.518, 10462455.295), stdev = 24401.516
  CI (99.9%): [10412500.551, 10445106.486] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_rejectWith  thrpt   30  10428803.518 ± 16302.968  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_rejectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_rejectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5010179.821 ops/s
# Warmup Iteration   2: 10741067.555 ops/s
# Warmup Iteration   3: 10807091.832 ops/s
# Warmup Iteration   4: 9250460.341 ops/s
# Warmup Iteration   5: 10618528.616 ops/s
# Warmup Iteration   6: 10802409.879 ops/s
# Warmup Iteration   7: 10819212.138 ops/s
# Warmup Iteration   8: 10754830.306 ops/s
# Warmup Iteration   9: 10755072.386 ops/s
# Warmup Iteration  10: 10806409.215 ops/s
# Warmup Iteration  11: 10786050.251 ops/s
# Warmup Iteration  12: 10792177.938 ops/s
# Warmup Iteration  13: 10824744.110 ops/s
# Warmup Iteration  14: 10802778.795 ops/s
# Warmup Iteration  15: 10804491.781 ops/s
# Warmup Iteration  16: 10781164.802 ops/s
# Warmup Iteration  17: 10790247.226 ops/s
# Warmup Iteration  18: 10807781.373 ops/s
# Warmup Iteration  19: 10807353.757 ops/s
# Warmup Iteration  20: 10812695.891 ops/s
# Warmup Iteration  21: 10801541.621 ops/s
# Warmup Iteration  22: 10780579.061 ops/s
# Warmup Iteration  23: 10814566.039 ops/s
# Warmup Iteration  24: 10782755.272 ops/s
# Warmup Iteration  25: 10802807.496 ops/s
# Warmup Iteration  26: 10806272.514 ops/s
# Warmup Iteration  27: 10803549.616 ops/s
# Warmup Iteration  28: 10806806.444 ops/s
# Warmup Iteration  29: 10801250.464 ops/s
# Warmup Iteration  30: 10795239.489 ops/s
Iteration   1: 10797619.719 ops/s
Iteration   2: 10810095.150 ops/s
Iteration   3: 10832696.115 ops/s
Iteration   4: 10788643.285 ops/s
Iteration   5: 10797636.276 ops/s
Iteration   6: 10804000.120 ops/s
Iteration   7: 10820053.797 ops/s
Iteration   8: 10823277.168 ops/s
Iteration   9: 10783944.324 ops/s
Iteration  10: 10802496.321 ops/s
Iteration  11: 10776040.868 ops/s
Iteration  12: 10796854.614 ops/s
Iteration  13: 10801062.097 ops/s
Iteration  14: 10822415.829 ops/s
Iteration  15: 10796072.664 ops/s
Iteration  16: 10769597.446 ops/s
Iteration  17: 10810639.302 ops/s
Iteration  18: 10812491.760 ops/s
Iteration  19: 10819085.907 ops/s
Iteration  20: 10797081.510 ops/s
Iteration  21: 10795039.221 ops/s
Iteration  22: 10784506.961 ops/s
Iteration  23: 10811803.749 ops/s
Iteration  24: 10797203.566 ops/s
Iteration  25: 10810355.283 ops/s
Iteration  26: 10818848.389 ops/s
Iteration  27: 10792719.886 ops/s
Iteration  28: 10813251.237 ops/s
Iteration  29: 10816070.256 ops/s
Iteration  30: 10818840.713 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_rejectWithIndex":
  10804014.784 ±(99.9%) 9953.904 ops/s [Average]
  (min, avg, max) = (10769597.446, 10804014.784, 10832696.115), stdev = 14898.536
  CI (99.9%): [10794060.880, 10813968.688] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score      Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_rejectWithIndex  thrpt   30  10804014.784 ± 9953.904  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_rejectWithIndexWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_rejectWithIndexWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5413278.140 ops/s
# Warmup Iteration   2: 11628298.888 ops/s
# Warmup Iteration   3: 9872565.529 ops/s
# Warmup Iteration   4: 11745433.908 ops/s
# Warmup Iteration   5: 11750239.146 ops/s
# Warmup Iteration   6: 11767389.101 ops/s
# Warmup Iteration   7: 11746479.110 ops/s
# Warmup Iteration   8: 11732793.837 ops/s
# Warmup Iteration   9: 11677524.345 ops/s
# Warmup Iteration  10: 11721781.055 ops/s
# Warmup Iteration  11: 11728620.736 ops/s
# Warmup Iteration  12: 11766705.232 ops/s
# Warmup Iteration  13: 11710396.701 ops/s
# Warmup Iteration  14: 11760922.948 ops/s
# Warmup Iteration  15: 11702291.564 ops/s
# Warmup Iteration  16: 11722285.717 ops/s
# Warmup Iteration  17: 11719335.992 ops/s
# Warmup Iteration  18: 11752548.422 ops/s
# Warmup Iteration  19: 11733844.197 ops/s
# Warmup Iteration  20: 11609844.950 ops/s
# Warmup Iteration  21: 11555159.139 ops/s
# Warmup Iteration  22: 11740730.534 ops/s
# Warmup Iteration  23: 11735375.380 ops/s
# Warmup Iteration  24: 11750890.083 ops/s
# Warmup Iteration  25: 11701747.229 ops/s
# Warmup Iteration  26: 11738386.015 ops/s
# Warmup Iteration  27: 11725794.521 ops/s
# Warmup Iteration  28: 11714847.274 ops/s
# Warmup Iteration  29: 11728889.837 ops/s
# Warmup Iteration  30: 11689853.891 ops/s
Iteration   1: 11713866.915 ops/s
Iteration   2: 11766636.579 ops/s
Iteration   3: 11703022.747 ops/s
Iteration   4: 11681763.995 ops/s
Iteration   5: 11699790.105 ops/s
Iteration   6: 11703968.351 ops/s
Iteration   7: 11732935.997 ops/s
Iteration   8: 11707061.336 ops/s
Iteration   9: 11674463.426 ops/s
Iteration  10: 11712446.684 ops/s
Iteration  11: 11772925.663 ops/s
Iteration  12: 11736338.196 ops/s
Iteration  13: 11733079.960 ops/s
Iteration  14: 11763618.539 ops/s
Iteration  15: 11731870.387 ops/s
Iteration  16: 11762530.569 ops/s
Iteration  17: 11747351.560 ops/s
Iteration  18: 11691249.497 ops/s
Iteration  19: 11755816.505 ops/s
Iteration  20: 11755304.201 ops/s
Iteration  21: 11745773.296 ops/s
Iteration  22: 11703684.618 ops/s
Iteration  23: 11717331.188 ops/s
Iteration  24: 11676129.600 ops/s
Iteration  25: 11743982.762 ops/s
Iteration  26: 11783316.411 ops/s
Iteration  27: 11691604.075 ops/s
Iteration  28: 11755324.311 ops/s
Iteration  29: 11737318.651 ops/s
Iteration  30: 11754836.475 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_rejectWithIndexWithTarget":
  11728511.420 ±(99.9%) 20434.932 ops/s [Average]
  (min, avg, max) = (11674463.426, 11728511.420, 11783316.411), stdev = 30586.046
  CI (99.9%): [11708076.488, 11748946.352] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt         Score       Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_rejectWithIndexWithTarget  thrpt   30  11728511.420 ± 20434.932  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_rejectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_rejectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6561985.704 ops/s
# Warmup Iteration   2: 14096392.555 ops/s
# Warmup Iteration   3: 11994911.207 ops/s
# Warmup Iteration   4: 14247395.401 ops/s
# Warmup Iteration   5: 14273665.461 ops/s
# Warmup Iteration   6: 14242802.754 ops/s
# Warmup Iteration   7: 14242431.566 ops/s
# Warmup Iteration   8: 14229209.866 ops/s
# Warmup Iteration   9: 14239515.973 ops/s
# Warmup Iteration  10: 14237484.019 ops/s
# Warmup Iteration  11: 14174582.748 ops/s
# Warmup Iteration  12: 13988990.759 ops/s
# Warmup Iteration  13: 14229677.965 ops/s
# Warmup Iteration  14: 14213200.077 ops/s
# Warmup Iteration  15: 14273735.106 ops/s
# Warmup Iteration  16: 14234498.093 ops/s
# Warmup Iteration  17: 14166748.428 ops/s
# Warmup Iteration  18: 14181841.085 ops/s
# Warmup Iteration  19: 14201057.536 ops/s
# Warmup Iteration  20: 14162030.577 ops/s
# Warmup Iteration  21: 14200196.271 ops/s
# Warmup Iteration  22: 14166918.579 ops/s
# Warmup Iteration  23: 14167834.045 ops/s
# Warmup Iteration  24: 14179415.951 ops/s
# Warmup Iteration  25: 14165279.195 ops/s
# Warmup Iteration  26: 14173807.276 ops/s
# Warmup Iteration  27: 14168664.376 ops/s
# Warmup Iteration  28: 14173541.550 ops/s
# Warmup Iteration  29: 14184457.318 ops/s
# Warmup Iteration  30: 14140333.815 ops/s
Iteration   1: 14144724.136 ops/s
Iteration   2: 14147677.049 ops/s
Iteration   3: 14179519.812 ops/s
Iteration   4: 14149732.855 ops/s
Iteration   5: 14191411.083 ops/s
Iteration   6: 14189865.606 ops/s
Iteration   7: 14169039.191 ops/s
Iteration   8: 14211968.111 ops/s
Iteration   9: 14193886.901 ops/s
Iteration  10: 14164630.045 ops/s
Iteration  11: 14180787.737 ops/s
Iteration  12: 14171046.704 ops/s
Iteration  13: 14191796.009 ops/s
Iteration  14: 14176848.146 ops/s
Iteration  15: 14214654.809 ops/s
Iteration  16: 14154259.582 ops/s
Iteration  17: 14194689.227 ops/s
Iteration  18: 14151572.578 ops/s
Iteration  19: 14231399.566 ops/s
Iteration  20: 14217801.917 ops/s
Iteration  21: 14113805.014 ops/s
Iteration  22: 14121999.146 ops/s
Iteration  23: 14189773.731 ops/s
Iteration  24: 14198416.425 ops/s
Iteration  25: 14176275.021 ops/s
Iteration  26: 14187680.848 ops/s
Iteration  27: 14179578.680 ops/s
Iteration  28: 14123383.793 ops/s
Iteration  29: 14173307.341 ops/s
Iteration  30: 14156181.946 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_rejectWith_target":
  14174923.767 ±(99.9%) 19015.008 ops/s [Average]
  (min, avg, max) = (14113805.014, 14174923.767, 14231399.566), stdev = 28460.771
  CI (99.9%): [14155908.759, 14193938.775] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score       Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_rejectWith_target  thrpt   30  14174923.767 ± 19015.008  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_reject_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_reject_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7351193.804 ops/s
# Warmup Iteration   2: 15202804.618 ops/s
# Warmup Iteration   3: 12983247.208 ops/s
# Warmup Iteration   4: 15359161.193 ops/s
# Warmup Iteration   5: 15403275.141 ops/s
# Warmup Iteration   6: 15444863.628 ops/s
# Warmup Iteration   7: 15421272.972 ops/s
# Warmup Iteration   8: 15411900.203 ops/s
# Warmup Iteration   9: 15348737.074 ops/s
# Warmup Iteration  10: 15429942.881 ops/s
# Warmup Iteration  11: 15425270.219 ops/s
# Warmup Iteration  12: 15444607.266 ops/s
# Warmup Iteration  13: 15435109.540 ops/s
# Warmup Iteration  14: 15439341.945 ops/s
# Warmup Iteration  15: 15361240.784 ops/s
# Warmup Iteration  16: 15341849.272 ops/s
# Warmup Iteration  17: 15400092.654 ops/s
# Warmup Iteration  18: 15464786.691 ops/s
# Warmup Iteration  19: 15460123.921 ops/s
# Warmup Iteration  20: 15442230.550 ops/s
# Warmup Iteration  21: 15467894.043 ops/s
# Warmup Iteration  22: 15483290.984 ops/s
# Warmup Iteration  23: 15438488.706 ops/s
# Warmup Iteration  24: 15469470.983 ops/s
# Warmup Iteration  25: 15479608.039 ops/s
# Warmup Iteration  26: 15455511.519 ops/s
# Warmup Iteration  27: 15454383.889 ops/s
# Warmup Iteration  28: 15479851.408 ops/s
# Warmup Iteration  29: 15480285.546 ops/s
# Warmup Iteration  30: 15468105.740 ops/s
Iteration   1: 15485563.739 ops/s
Iteration   2: 15415462.117 ops/s
Iteration   3: 15373049.438 ops/s
Iteration   4: 15471538.130 ops/s
Iteration   5: 15453004.256 ops/s
Iteration   6: 15447562.263 ops/s
Iteration   7: 15443480.394 ops/s
Iteration   8: 15508193.029 ops/s
Iteration   9: 15460403.059 ops/s
Iteration  10: 15486880.871 ops/s
Iteration  11: 15503405.963 ops/s
Iteration  12: 15384317.558 ops/s
Iteration  13: 15339392.960 ops/s
Iteration  14: 15442908.039 ops/s
Iteration  15: 15432700.965 ops/s
Iteration  16: 15473767.907 ops/s
Iteration  17: 15402706.804 ops/s
Iteration  18: 15422016.074 ops/s
Iteration  19: 15483898.846 ops/s
Iteration  20: 15413336.291 ops/s
Iteration  21: 15396033.426 ops/s
Iteration  22: 15493492.968 ops/s
Iteration  23: 15500054.444 ops/s
Iteration  24: 15413950.019 ops/s
Iteration  25: 15474003.975 ops/s
Iteration  26: 15500582.277 ops/s
Iteration  27: 15463646.905 ops/s
Iteration  28: 15477075.593 ops/s
Iteration  29: 15481168.888 ops/s
Iteration  30: 15453708.982 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_reject_target":
  15449910.206 ±(99.9%) 28624.266 ops/s [Average]
  (min, avg, max) = (15339392.960, 15449910.206, 15508193.029), stdev = 42843.458
  CI (99.9%): [15421285.940, 15478534.472] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score       Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_reject_target  thrpt   30  15449910.206 ± 28624.266  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 760915.692 ops/s
# Warmup Iteration   2: 794126.744 ops/s
# Warmup Iteration   3: 1006039.141 ops/s
# Warmup Iteration   4: 997133.926 ops/s
# Warmup Iteration   5: 989965.958 ops/s
# Warmup Iteration   6: 1000702.630 ops/s
# Warmup Iteration   7: 999903.378 ops/s
# Warmup Iteration   8: 1003872.170 ops/s
# Warmup Iteration   9: 998201.230 ops/s
# Warmup Iteration  10: 996980.729 ops/s
# Warmup Iteration  11: 997731.833 ops/s
# Warmup Iteration  12: 849418.510 ops/s
# Warmup Iteration  13: 998309.572 ops/s
# Warmup Iteration  14: 997675.457 ops/s
# Warmup Iteration  15: 1000161.081 ops/s
# Warmup Iteration  16: 998422.539 ops/s
# Warmup Iteration  17: 1066468.242 ops/s
# Warmup Iteration  18: 1065740.878 ops/s
# Warmup Iteration  19: 1067613.778 ops/s
# Warmup Iteration  20: 1063991.269 ops/s
# Warmup Iteration  21: 1065145.142 ops/s
# Warmup Iteration  22: 1059441.594 ops/s
# Warmup Iteration  23: 1065032.815 ops/s
# Warmup Iteration  24: 1062227.134 ops/s
# Warmup Iteration  25: 1063080.885 ops/s
# Warmup Iteration  26: 1061745.795 ops/s
# Warmup Iteration  27: 1066023.116 ops/s
# Warmup Iteration  28: 1062995.393 ops/s
# Warmup Iteration  29: 1064133.698 ops/s
# Warmup Iteration  30: 1064869.954 ops/s
Iteration   1: 1064772.386 ops/s
Iteration   2: 1064162.532 ops/s
Iteration   3: 1065809.670 ops/s
Iteration   4: 1068408.275 ops/s
Iteration   5: 1068363.298 ops/s
Iteration   6: 1067518.620 ops/s
Iteration   7: 1066522.782 ops/s
Iteration   8: 1067034.428 ops/s
Iteration   9: 1067337.540 ops/s
Iteration  10: 1068021.444 ops/s
Iteration  11: 1062798.880 ops/s
Iteration  12: 1064083.432 ops/s
Iteration  13: 1063054.728 ops/s
Iteration  14: 1063943.207 ops/s
Iteration  15: 1060614.435 ops/s
Iteration  16: 1064160.548 ops/s
Iteration  17: 1063437.745 ops/s
Iteration  18: 1064597.778 ops/s
Iteration  19: 1066633.177 ops/s
Iteration  20: 1067513.014 ops/s
Iteration  21: 1062873.470 ops/s
Iteration  22: 1055168.208 ops/s
Iteration  23: 1065221.266 ops/s
Iteration  24: 1059251.850 ops/s
Iteration  25: 1063452.458 ops/s
Iteration  26: 1062278.211 ops/s
Iteration  27: 1059207.228 ops/s
Iteration  28: 1063962.475 ops/s
Iteration  29: 1064750.588 ops/s
Iteration  30: 1064671.652 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_remove":
  1064320.844 ±(99.9%) 1996.199 ops/s [Average]
  (min, avg, max) = (1055168.208, 1064320.844, 1068408.275), stdev = 2987.818
  CI (99.9%): [1062324.645, 1066317.044] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_remove  thrpt   30  1064320.844 ± 1996.199  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 748478.803 ops/s
# Warmup Iteration   2: 788493.691 ops/s
# Warmup Iteration   3: 978792.442 ops/s
# Warmup Iteration   4: 981328.331 ops/s
# Warmup Iteration   5: 978853.169 ops/s
# Warmup Iteration   6: 973017.171 ops/s
# Warmup Iteration   7: 979781.948 ops/s
# Warmup Iteration   8: 980888.598 ops/s
# Warmup Iteration   9: 977871.053 ops/s
# Warmup Iteration  10: 972998.064 ops/s
# Warmup Iteration  11: 980768.598 ops/s
# Warmup Iteration  12: 841073.387 ops/s
# Warmup Iteration  13: 973658.110 ops/s
# Warmup Iteration  14: 973007.606 ops/s
# Warmup Iteration  15: 971638.950 ops/s
# Warmup Iteration  16: 975618.185 ops/s
# Warmup Iteration  17: 1035734.883 ops/s
# Warmup Iteration  18: 1036504.434 ops/s
# Warmup Iteration  19: 1038181.997 ops/s
# Warmup Iteration  20: 1032508.197 ops/s
# Warmup Iteration  21: 1039249.359 ops/s
# Warmup Iteration  22: 1036716.041 ops/s
# Warmup Iteration  23: 1042318.279 ops/s
# Warmup Iteration  24: 1038669.518 ops/s
# Warmup Iteration  25: 1039297.822 ops/s
# Warmup Iteration  26: 1038903.999 ops/s
# Warmup Iteration  27: 1040063.117 ops/s
# Warmup Iteration  28: 1041479.710 ops/s
# Warmup Iteration  29: 1037385.078 ops/s
# Warmup Iteration  30: 1034860.852 ops/s
Iteration   1: 1042242.818 ops/s
Iteration   2: 1037032.425 ops/s
Iteration   3: 1037239.776 ops/s
Iteration   4: 1039340.611 ops/s
Iteration   5: 1040985.556 ops/s
Iteration   6: 1041410.827 ops/s
Iteration   7: 1043390.358 ops/s
Iteration   8: 1041867.442 ops/s
Iteration   9: 1046773.134 ops/s
Iteration  10: 1038870.429 ops/s
Iteration  11: 1037756.671 ops/s
Iteration  12: 1037037.052 ops/s
Iteration  13: 1042475.751 ops/s
Iteration  14: 1037068.752 ops/s
Iteration  15: 1041925.080 ops/s
Iteration  16: 1039749.488 ops/s
Iteration  17: 1043171.149 ops/s
Iteration  18: 1038957.409 ops/s
Iteration  19: 1037256.075 ops/s
Iteration  20: 1042162.538 ops/s
Iteration  21: 1040430.984 ops/s
Iteration  22: 1037543.531 ops/s
Iteration  23: 1039632.979 ops/s
Iteration  24: 1038070.323 ops/s
Iteration  25: 1038645.548 ops/s
Iteration  26: 1037555.463 ops/s
Iteration  27: 1037462.201 ops/s
Iteration  28: 1042781.709 ops/s
Iteration  29: 1037551.948 ops/s
Iteration  30: 1042741.912 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_removeAll":
  1039970.998 ±(99.9%) 1701.953 ops/s [Average]
  (min, avg, max) = (1037032.425, 1039970.998, 1046773.134), stdev = 2547.404
  CI (99.9%): [1038269.044, 1041672.951] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_removeAll  thrpt   30  1039970.998 ± 1701.953  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_removeAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_removeAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 764647.906 ops/s
# Warmup Iteration   2: 793049.757 ops/s
# Warmup Iteration   3: 925438.599 ops/s
# Warmup Iteration   4: 926952.358 ops/s
# Warmup Iteration   5: 931517.161 ops/s
# Warmup Iteration   6: 924760.857 ops/s
# Warmup Iteration   7: 930375.965 ops/s
# Warmup Iteration   8: 932558.297 ops/s
# Warmup Iteration   9: 929227.750 ops/s
# Warmup Iteration  10: 929923.180 ops/s
# Warmup Iteration  11: 925784.138 ops/s
# Warmup Iteration  12: 881427.706 ops/s
# Warmup Iteration  13: 818109.623 ops/s
# Warmup Iteration  14: 927182.070 ops/s
# Warmup Iteration  15: 925856.621 ops/s
# Warmup Iteration  16: 927102.971 ops/s
# Warmup Iteration  17: 980980.002 ops/s
# Warmup Iteration  18: 977530.056 ops/s
# Warmup Iteration  19: 977084.839 ops/s
# Warmup Iteration  20: 976210.014 ops/s
# Warmup Iteration  21: 982126.358 ops/s
# Warmup Iteration  22: 974772.749 ops/s
# Warmup Iteration  23: 976797.944 ops/s
# Warmup Iteration  24: 975772.127 ops/s
# Warmup Iteration  25: 975953.943 ops/s
# Warmup Iteration  26: 974373.788 ops/s
# Warmup Iteration  27: 976573.491 ops/s
# Warmup Iteration  28: 978346.736 ops/s
# Warmup Iteration  29: 976510.312 ops/s
# Warmup Iteration  30: 977614.478 ops/s
Iteration   1: 974522.990 ops/s
Iteration   2: 976808.078 ops/s
Iteration   3: 976932.973 ops/s
Iteration   4: 975602.178 ops/s
Iteration   5: 976316.985 ops/s
Iteration   6: 976463.248 ops/s
Iteration   7: 977054.888 ops/s
Iteration   8: 976736.893 ops/s
Iteration   9: 980009.095 ops/s
Iteration  10: 981961.954 ops/s
Iteration  11: 980023.781 ops/s
Iteration  12: 976483.669 ops/s
Iteration  13: 977221.483 ops/s
Iteration  14: 977133.781 ops/s
Iteration  15: 975255.237 ops/s
Iteration  16: 976930.800 ops/s
Iteration  17: 978846.324 ops/s
Iteration  18: 977919.071 ops/s
Iteration  19: 976991.042 ops/s
Iteration  20: 976359.833 ops/s
Iteration  21: 978215.037 ops/s
Iteration  22: 977878.212 ops/s
Iteration  23: 978057.020 ops/s
Iteration  24: 977918.607 ops/s
Iteration  25: 977377.471 ops/s
Iteration  26: 974618.646 ops/s
Iteration  27: 978212.139 ops/s
Iteration  28: 975630.158 ops/s
Iteration  29: 975715.390 ops/s
Iteration  30: 978470.666 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_removeAtIndex":
  977255.588 ±(99.9%) 1074.751 ops/s [Average]
  (min, avg, max) = (974522.990, 977255.588, 981961.954), stdev = 1608.637
  CI (99.9%): [976180.837, 978330.339] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_removeAtIndex  thrpt   30  977255.588 ± 1074.751  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_replaceAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_replaceAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 763429.790 ops/s
# Warmup Iteration   2: 800092.912 ops/s
# Warmup Iteration   3: 987686.046 ops/s
# Warmup Iteration   4: 990993.266 ops/s
# Warmup Iteration   5: 985343.345 ops/s
# Warmup Iteration   6: 993944.674 ops/s
# Warmup Iteration   7: 992164.128 ops/s
# Warmup Iteration   8: 993607.466 ops/s
# Warmup Iteration   9: 995672.789 ops/s
# Warmup Iteration  10: 995802.971 ops/s
# Warmup Iteration  11: 994266.569 ops/s
# Warmup Iteration  12: 853220.504 ops/s
# Warmup Iteration  13: 1012398.371 ops/s
# Warmup Iteration  14: 994569.039 ops/s
# Warmup Iteration  15: 997794.198 ops/s
# Warmup Iteration  16: 996074.365 ops/s
# Warmup Iteration  17: 1060227.388 ops/s
# Warmup Iteration  18: 1060008.136 ops/s
# Warmup Iteration  19: 1062651.053 ops/s
# Warmup Iteration  20: 1055524.261 ops/s
# Warmup Iteration  21: 1057115.124 ops/s
# Warmup Iteration  22: 1056118.483 ops/s
# Warmup Iteration  23: 1060429.650 ops/s
# Warmup Iteration  24: 1061739.097 ops/s
# Warmup Iteration  25: 1060062.028 ops/s
# Warmup Iteration  26: 1056471.889 ops/s
# Warmup Iteration  27: 1052337.279 ops/s
# Warmup Iteration  28: 1060162.708 ops/s
# Warmup Iteration  29: 1055978.494 ops/s
# Warmup Iteration  30: 1060695.314 ops/s
Iteration   1: 1061416.066 ops/s
Iteration   2: 1056274.963 ops/s
Iteration   3: 1056696.874 ops/s
Iteration   4: 1057226.205 ops/s
Iteration   5: 1062049.841 ops/s
Iteration   6: 1053279.332 ops/s
Iteration   7: 1058864.373 ops/s
Iteration   8: 1059001.220 ops/s
Iteration   9: 1060456.729 ops/s
Iteration  10: 1053449.851 ops/s
Iteration  11: 1059546.499 ops/s
Iteration  12: 1061142.900 ops/s
Iteration  13: 1058502.888 ops/s
Iteration  14: 1057391.763 ops/s
Iteration  15: 1060548.778 ops/s
Iteration  16: 1057349.947 ops/s
Iteration  17: 1058258.874 ops/s
Iteration  18: 1055407.964 ops/s
Iteration  19: 1056162.361 ops/s
Iteration  20: 1058700.104 ops/s
Iteration  21: 1054778.241 ops/s
Iteration  22: 1054872.882 ops/s
Iteration  23: 1064247.723 ops/s
Iteration  24: 1060966.085 ops/s
Iteration  25: 1059588.895 ops/s
Iteration  26: 1055738.825 ops/s
Iteration  27: 1056489.529 ops/s
Iteration  28: 1061514.937 ops/s
Iteration  29: 1054749.439 ops/s
Iteration  30: 1059582.216 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_replaceAll":
  1058141.877 ±(99.9%) 1828.906 ops/s [Average]
  (min, avg, max) = (1053279.332, 1058141.877, 1064247.723), stdev = 2737.421
  CI (99.9%): [1056312.971, 1059970.783] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_replaceAll  thrpt   30  1058141.877 ± 1828.906  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 639295.618 ops/s
# Warmup Iteration   2: 777081.151 ops/s
# Warmup Iteration   3: 970042.844 ops/s
# Warmup Iteration   4: 963614.115 ops/s
# Warmup Iteration   5: 971599.922 ops/s
# Warmup Iteration   6: 969674.327 ops/s
# Warmup Iteration   7: 972067.049 ops/s
# Warmup Iteration   8: 970754.852 ops/s
# Warmup Iteration   9: 813282.707 ops/s
# Warmup Iteration  10: 972284.986 ops/s
# Warmup Iteration  11: 970426.510 ops/s
# Warmup Iteration  12: 970314.698 ops/s
# Warmup Iteration  13: 972058.939 ops/s
# Warmup Iteration  14: 969548.210 ops/s
# Warmup Iteration  15: 968939.684 ops/s
# Warmup Iteration  16: 968388.073 ops/s
# Warmup Iteration  17: 1024482.899 ops/s
# Warmup Iteration  18: 1025470.521 ops/s
# Warmup Iteration  19: 1024530.098 ops/s
# Warmup Iteration  20: 1025085.368 ops/s
# Warmup Iteration  21: 1024584.855 ops/s
# Warmup Iteration  22: 1023995.564 ops/s
# Warmup Iteration  23: 1026341.689 ops/s
# Warmup Iteration  24: 1025634.367 ops/s
# Warmup Iteration  25: 1024983.762 ops/s
# Warmup Iteration  26: 1024755.918 ops/s
# Warmup Iteration  27: 1024357.742 ops/s
# Warmup Iteration  28: 1024785.405 ops/s
# Warmup Iteration  29: 1026078.808 ops/s
# Warmup Iteration  30: 1026672.449 ops/s
Iteration   1: 1025003.616 ops/s
Iteration   2: 1026708.997 ops/s
Iteration   3: 1025922.564 ops/s
Iteration   4: 1025559.532 ops/s
Iteration   5: 1021139.074 ops/s
Iteration   6: 1020750.354 ops/s
Iteration   7: 1026889.326 ops/s
Iteration   8: 1027108.946 ops/s
Iteration   9: 1022169.196 ops/s
Iteration  10: 1026611.853 ops/s
Iteration  11: 1025643.991 ops/s
Iteration  12: 1025251.035 ops/s
Iteration  13: 1026210.684 ops/s
Iteration  14: 1022860.672 ops/s
Iteration  15: 1024850.418 ops/s
Iteration  16: 1023259.510 ops/s
Iteration  17: 1025176.806 ops/s
Iteration  18: 1025982.845 ops/s
Iteration  19: 1026510.617 ops/s
Iteration  20: 1025450.583 ops/s
Iteration  21: 1025548.310 ops/s
Iteration  22: 1023835.771 ops/s
Iteration  23: 1023721.083 ops/s
Iteration  24: 1027489.604 ops/s
Iteration  25: 1025705.840 ops/s
Iteration  26: 1020745.842 ops/s
Iteration  27: 1025531.076 ops/s
Iteration  28: 1022292.621 ops/s
Iteration  29: 1024156.013 ops/s
Iteration  30: 1025059.410 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_retainAll":
  1024771.540 ±(99.9%) 1262.678 ops/s [Average]
  (min, avg, max) = (1020745.842, 1024771.540, 1027489.604), stdev = 1889.917
  CI (99.9%): [1023508.862, 1026034.218] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_retainAll  thrpt   30  1024771.540 ± 1262.678  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_reverseForEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_reverseForEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9730075.621 ops/s
# Warmup Iteration   2: 20146002.929 ops/s
# Warmup Iteration   3: 16788154.292 ops/s
# Warmup Iteration   4: 19882486.854 ops/s
# Warmup Iteration   5: 19892163.290 ops/s
# Warmup Iteration   6: 19861664.515 ops/s
# Warmup Iteration   7: 19873086.884 ops/s
# Warmup Iteration   8: 19820642.879 ops/s
# Warmup Iteration   9: 19797289.497 ops/s
# Warmup Iteration  10: 19857524.758 ops/s
# Warmup Iteration  11: 19867857.234 ops/s
# Warmup Iteration  12: 19916600.092 ops/s
# Warmup Iteration  13: 19868427.611 ops/s
# Warmup Iteration  14: 19775075.990 ops/s
# Warmup Iteration  15: 19884324.539 ops/s
# Warmup Iteration  16: 19890224.695 ops/s
# Warmup Iteration  17: 19877081.338 ops/s
# Warmup Iteration  18: 19886855.260 ops/s
# Warmup Iteration  19: 19894750.061 ops/s
# Warmup Iteration  20: 19889298.781 ops/s
# Warmup Iteration  21: 19909971.424 ops/s
# Warmup Iteration  22: 19901027.514 ops/s
# Warmup Iteration  23: 19881104.767 ops/s
# Warmup Iteration  24: 19918917.158 ops/s
# Warmup Iteration  25: 19901830.247 ops/s
# Warmup Iteration  26: 19860299.176 ops/s
# Warmup Iteration  27: 19824631.815 ops/s
# Warmup Iteration  28: 19828987.762 ops/s
# Warmup Iteration  29: 19902537.877 ops/s
# Warmup Iteration  30: 19912882.616 ops/s
Iteration   1: 19780416.397 ops/s
Iteration   2: 19935671.874 ops/s
Iteration   3: 19845270.665 ops/s
Iteration   4: 19844703.538 ops/s
Iteration   5: 19846267.914 ops/s
Iteration   6: 19872936.515 ops/s
Iteration   7: 19891691.779 ops/s
Iteration   8: 19911892.474 ops/s
Iteration   9: 19872784.024 ops/s
Iteration  10: 19834704.371 ops/s
Iteration  11: 19855827.687 ops/s
Iteration  12: 19835979.141 ops/s
Iteration  13: 19918496.597 ops/s
Iteration  14: 19894027.306 ops/s
Iteration  15: 19893062.230 ops/s
Iteration  16: 19890783.318 ops/s
Iteration  17: 19913487.664 ops/s
Iteration  18: 19931299.457 ops/s
Iteration  19: 19827699.530 ops/s
Iteration  20: 19894068.640 ops/s
Iteration  21: 19879889.363 ops/s
Iteration  22: 19861962.329 ops/s
Iteration  23: 19890063.235 ops/s
Iteration  24: 19869595.497 ops/s
Iteration  25: 19859811.990 ops/s
Iteration  26: 19875835.837 ops/s
Iteration  27: 19914850.043 ops/s
Iteration  28: 19850889.420 ops/s
Iteration  29: 19837817.282 ops/s
Iteration  30: 19835426.066 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_reverseForEach":
  19872240.406 ±(99.9%) 23562.407 ops/s [Average]
  (min, avg, max) = (19780416.397, 19872240.406, 19935671.874), stdev = 35267.104
  CI (99.9%): [19848677.999, 19895802.813] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score       Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_reverseForEach  thrpt   30  19872240.406 ± 23562.407  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_reverseForEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_reverseForEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7710489.431 ops/s
# Warmup Iteration   2: 16684286.955 ops/s
# Warmup Iteration   3: 13648463.835 ops/s
# Warmup Iteration   4: 16209044.816 ops/s
# Warmup Iteration   5: 16200076.836 ops/s
# Warmup Iteration   6: 16229720.375 ops/s
# Warmup Iteration   7: 16224069.209 ops/s
# Warmup Iteration   8: 16235454.178 ops/s
# Warmup Iteration   9: 16200282.442 ops/s
# Warmup Iteration  10: 16210630.946 ops/s
# Warmup Iteration  11: 16235376.459 ops/s
# Warmup Iteration  12: 16241791.356 ops/s
# Warmup Iteration  13: 16268843.033 ops/s
# Warmup Iteration  14: 16241005.755 ops/s
# Warmup Iteration  15: 16258195.612 ops/s
# Warmup Iteration  16: 16199007.678 ops/s
# Warmup Iteration  17: 16243315.934 ops/s
# Warmup Iteration  18: 16253120.024 ops/s
# Warmup Iteration  19: 16290521.622 ops/s
# Warmup Iteration  20: 16246469.170 ops/s
# Warmup Iteration  21: 16270874.695 ops/s
# Warmup Iteration  22: 16251663.060 ops/s
# Warmup Iteration  23: 16243492.130 ops/s
# Warmup Iteration  24: 16237435.199 ops/s
# Warmup Iteration  25: 16207582.254 ops/s
# Warmup Iteration  26: 16245541.443 ops/s
# Warmup Iteration  27: 16271176.363 ops/s
# Warmup Iteration  28: 16223587.756 ops/s
# Warmup Iteration  29: 16217957.762 ops/s
# Warmup Iteration  30: 16258083.074 ops/s
Iteration   1: 16266098.543 ops/s
Iteration   2: 16226387.237 ops/s
Iteration   3: 16289216.745 ops/s
Iteration   4: 16044059.640 ops/s
Iteration   5: 16208351.118 ops/s
Iteration   6: 16226118.264 ops/s
Iteration   7: 16138051.445 ops/s
Iteration   8: 16264392.461 ops/s
Iteration   9: 16251554.766 ops/s
Iteration  10: 16187162.952 ops/s
Iteration  11: 16224915.903 ops/s
Iteration  12: 16264419.804 ops/s
Iteration  13: 16239668.258 ops/s
Iteration  14: 16199759.656 ops/s
Iteration  15: 16263198.072 ops/s
Iteration  16: 16190267.273 ops/s
Iteration  17: 16231450.695 ops/s
Iteration  18: 16243012.563 ops/s
Iteration  19: 16241222.511 ops/s
Iteration  20: 16233296.108 ops/s
Iteration  21: 16286437.825 ops/s
Iteration  22: 16239266.331 ops/s
Iteration  23: 16284954.658 ops/s
Iteration  24: 16260322.551 ops/s
Iteration  25: 16280977.804 ops/s
Iteration  26: 16276307.735 ops/s
Iteration  27: 16263610.638 ops/s
Iteration  28: 16252063.925 ops/s
Iteration  29: 16250340.107 ops/s
Iteration  30: 16280956.779 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_reverseForEachWithIndex":
  16236928.079 ±(99.9%) 33328.485 ops/s [Average]
  (min, avg, max) = (16044059.640, 16236928.079, 16289216.745), stdev = 49884.511
  CI (99.9%): [16203599.594, 16270256.564] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt         Score       Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_reverseForEachWithIndex  thrpt   30  16236928.079 ± 33328.485  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4069771.380 ops/s
# Warmup Iteration   2: 9046120.467 ops/s
# Warmup Iteration   3: 9019492.557 ops/s
# Warmup Iteration   4: 7592413.133 ops/s
# Warmup Iteration   5: 9010939.986 ops/s
# Warmup Iteration   6: 9007255.017 ops/s
# Warmup Iteration   7: 9009725.254 ops/s
# Warmup Iteration   8: 8989374.834 ops/s
# Warmup Iteration   9: 8999978.773 ops/s
# Warmup Iteration  10: 8976871.808 ops/s
# Warmup Iteration  11: 9009346.776 ops/s
# Warmup Iteration  12: 9025254.440 ops/s
# Warmup Iteration  13: 8998477.177 ops/s
# Warmup Iteration  14: 9005400.294 ops/s
# Warmup Iteration  15: 9015087.196 ops/s
# Warmup Iteration  16: 9015943.482 ops/s
# Warmup Iteration  17: 9015418.595 ops/s
# Warmup Iteration  18: 9023249.721 ops/s
# Warmup Iteration  19: 8822951.916 ops/s
# Warmup Iteration  20: 9012618.962 ops/s
# Warmup Iteration  21: 9011225.521 ops/s
# Warmup Iteration  22: 9022269.073 ops/s
# Warmup Iteration  23: 9033083.617 ops/s
# Warmup Iteration  24: 8932673.154 ops/s
# Warmup Iteration  25: 9013751.336 ops/s
# Warmup Iteration  26: 9025214.214 ops/s
# Warmup Iteration  27: 9022653.335 ops/s
# Warmup Iteration  28: 8933383.992 ops/s
# Warmup Iteration  29: 9022795.398 ops/s
# Warmup Iteration  30: 9027641.538 ops/s
Iteration   1: 9032406.668 ops/s
Iteration   2: 9017912.986 ops/s
Iteration   3: 8993067.731 ops/s
Iteration   4: 8984139.053 ops/s
Iteration   5: 9018613.472 ops/s
Iteration   6: 9025676.050 ops/s
Iteration   7: 9017636.931 ops/s
Iteration   8: 9017883.452 ops/s
Iteration   9: 9029016.617 ops/s
Iteration  10: 9025536.189 ops/s
Iteration  11: 9017537.885 ops/s
Iteration  12: 9015518.233 ops/s
Iteration  13: 9029437.663 ops/s
Iteration  14: 9000510.089 ops/s
Iteration  15: 9022422.618 ops/s
Iteration  16: 9025131.947 ops/s
Iteration  17: 9029915.925 ops/s
Iteration  18: 9020556.246 ops/s
Iteration  19: 9027119.861 ops/s
Iteration  20: 9044048.663 ops/s
Iteration  21: 9037957.514 ops/s
Iteration  22: 9022627.689 ops/s
Iteration  23: 9030310.470 ops/s
Iteration  24: 9017861.518 ops/s
Iteration  25: 9024804.312 ops/s
Iteration  26: 9020493.266 ops/s
Iteration  27: 9039678.005 ops/s
Iteration  28: 9021128.393 ops/s
Iteration  29: 9024041.691 ops/s
Iteration  30: 9042195.882 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_select":
  9022506.234 ±(99.9%) 8553.652 ops/s [Average]
  (min, avg, max) = (8984139.053, 9022506.234, 9044048.663), stdev = 12802.705
  CI (99.9%): [9013952.582, 9031059.886] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_select  thrpt   30  9022506.234 ± 8553.652  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_selectInstancesOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_selectInstancesOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7207858.528 ops/s
# Warmup Iteration   2: 12038675.857 ops/s
# Warmup Iteration   3: 13061240.266 ops/s
# Warmup Iteration   4: 13154838.682 ops/s
# Warmup Iteration   5: 13153746.841 ops/s
# Warmup Iteration   6: 11028532.510 ops/s
# Warmup Iteration   7: 13189354.495 ops/s
# Warmup Iteration   8: 13175510.822 ops/s
# Warmup Iteration   9: 13184004.412 ops/s
# Warmup Iteration  10: 13192131.599 ops/s
# Warmup Iteration  11: 13175511.212 ops/s
# Warmup Iteration  12: 13184396.048 ops/s
# Warmup Iteration  13: 13184993.109 ops/s
# Warmup Iteration  14: 13147592.825 ops/s
# Warmup Iteration  15: 13180997.535 ops/s
# Warmup Iteration  16: 13186422.555 ops/s
# Warmup Iteration  17: 13065301.128 ops/s
# Warmup Iteration  18: 13068567.306 ops/s
# Warmup Iteration  19: 13069781.226 ops/s
# Warmup Iteration  20: 13078139.504 ops/s
# Warmup Iteration  21: 13030447.807 ops/s
# Warmup Iteration  22: 13061177.380 ops/s
# Warmup Iteration  23: 13090619.197 ops/s
# Warmup Iteration  24: 12978823.270 ops/s
# Warmup Iteration  25: 13042454.371 ops/s
# Warmup Iteration  26: 13077276.155 ops/s
# Warmup Iteration  27: 13077098.085 ops/s
# Warmup Iteration  28: 13083981.586 ops/s
# Warmup Iteration  29: 13070953.443 ops/s
# Warmup Iteration  30: 13079939.475 ops/s
Iteration   1: 13066836.697 ops/s
Iteration   2: 13087785.305 ops/s
Iteration   3: 13076421.051 ops/s
Iteration   4: 13062175.999 ops/s
Iteration   5: 13091028.503 ops/s
Iteration   6: 13071984.104 ops/s
Iteration   7: 13085038.617 ops/s
Iteration   8: 13014991.073 ops/s
Iteration   9: 13090427.818 ops/s
Iteration  10: 13062883.254 ops/s
Iteration  11: 13083874.343 ops/s
Iteration  12: 13051883.556 ops/s
Iteration  13: 13090614.686 ops/s
Iteration  14: 13061667.117 ops/s
Iteration  15: 13059789.447 ops/s
Iteration  16: 13082248.881 ops/s
Iteration  17: 13077580.331 ops/s
Iteration  18: 13084787.883 ops/s
Iteration  19: 13067754.068 ops/s
Iteration  20: 13080074.744 ops/s
Iteration  21: 13052332.717 ops/s
Iteration  22: 13089504.869 ops/s
Iteration  23: 13064909.343 ops/s
Iteration  24: 13065618.242 ops/s
Iteration  25: 13076599.978 ops/s
Iteration  26: 13054669.727 ops/s
Iteration  27: 13101176.862 ops/s
Iteration  28: 13070449.756 ops/s
Iteration  29: 13065692.992 ops/s
Iteration  30: 13050717.081 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_selectInstancesOf":
  13071383.968 ±(99.9%) 11484.237 ops/s [Average]
  (min, avg, max) = (13014991.073, 13071383.968, 13101176.862), stdev = 17189.066
  CI (99.9%): [13059899.732, 13082868.205] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score       Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_selectInstancesOf  thrpt   30  13071383.968 ± 11484.237  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_selectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_selectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4387038.126 ops/s
# Warmup Iteration   2: 10019876.733 ops/s
# Warmup Iteration   3: 8600535.557 ops/s
# Warmup Iteration   4: 9843991.996 ops/s
# Warmup Iteration   5: 10014030.321 ops/s
# Warmup Iteration   6: 9990293.919 ops/s
# Warmup Iteration   7: 10004632.984 ops/s
# Warmup Iteration   8: 9993888.713 ops/s
# Warmup Iteration   9: 9989775.387 ops/s
# Warmup Iteration  10: 10002963.025 ops/s
# Warmup Iteration  11: 9998316.859 ops/s
# Warmup Iteration  12: 9995104.946 ops/s
# Warmup Iteration  13: 10011637.656 ops/s
# Warmup Iteration  14: 9999089.267 ops/s
# Warmup Iteration  15: 9992649.504 ops/s
# Warmup Iteration  16: 10014803.355 ops/s
# Warmup Iteration  17: 10008467.142 ops/s
# Warmup Iteration  18: 10005925.321 ops/s
# Warmup Iteration  19: 10009904.514 ops/s
# Warmup Iteration  20: 9997477.854 ops/s
# Warmup Iteration  21: 9992691.172 ops/s
# Warmup Iteration  22: 9997812.069 ops/s
# Warmup Iteration  23: 10007947.682 ops/s
# Warmup Iteration  24: 10009644.720 ops/s
# Warmup Iteration  25: 9981262.909 ops/s
# Warmup Iteration  26: 9979195.893 ops/s
# Warmup Iteration  27: 9992295.516 ops/s
# Warmup Iteration  28: 9984567.419 ops/s
# Warmup Iteration  29: 9989685.968 ops/s
# Warmup Iteration  30: 9842129.614 ops/s
Iteration   1: 10018370.840 ops/s
Iteration   2: 9987685.876 ops/s
Iteration   3: 9997605.743 ops/s
Iteration   4: 9980361.866 ops/s
Iteration   5: 10014901.729 ops/s
Iteration   6: 9998316.009 ops/s
Iteration   7: 10004649.488 ops/s
Iteration   8: 9987113.202 ops/s
Iteration   9: 10009492.212 ops/s
Iteration  10: 10006458.708 ops/s
Iteration  11: 10008315.898 ops/s
Iteration  12: 10028620.159 ops/s
Iteration  13: 10039990.880 ops/s
Iteration  14: 9971494.045 ops/s
Iteration  15: 9934720.712 ops/s
Iteration  16: 10003544.715 ops/s
Iteration  17: 10016471.509 ops/s
Iteration  18: 10004506.388 ops/s
Iteration  19: 10006314.642 ops/s
Iteration  20: 10003778.433 ops/s
Iteration  21: 9997670.747 ops/s
Iteration  22: 10041133.826 ops/s
Iteration  23: 10018183.040 ops/s
Iteration  24: 9998798.696 ops/s
Iteration  25: 10034341.620 ops/s
Iteration  26: 9985838.735 ops/s
Iteration  27: 10020069.259 ops/s
Iteration  28: 10010786.967 ops/s
Iteration  29: 10014109.697 ops/s
Iteration  30: 10001898.657 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_selectWith":
  10004851.477 ±(99.9%) 14019.864 ops/s [Average]
  (min, avg, max) = (9934720.712, 10004851.477, 10041133.826), stdev = 20984.273
  CI (99.9%): [9990831.613, 10018871.340] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_selectWith  thrpt   30  10004851.477 ± 14019.864  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_selectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_selectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4971528.766 ops/s
# Warmup Iteration   2: 10698928.063 ops/s
# Warmup Iteration   3: 10676475.279 ops/s
# Warmup Iteration   4: 9333675.064 ops/s
# Warmup Iteration   5: 10393698.922 ops/s
# Warmup Iteration   6: 10718356.473 ops/s
# Warmup Iteration   7: 10727819.991 ops/s
# Warmup Iteration   8: 10722179.248 ops/s
# Warmup Iteration   9: 10723162.396 ops/s
# Warmup Iteration  10: 10719388.147 ops/s
# Warmup Iteration  11: 10717685.987 ops/s
# Warmup Iteration  12: 10724625.953 ops/s
# Warmup Iteration  13: 10706876.244 ops/s
# Warmup Iteration  14: 10716721.979 ops/s
# Warmup Iteration  15: 10737795.415 ops/s
# Warmup Iteration  16: 10724278.766 ops/s
# Warmup Iteration  17: 10719257.954 ops/s
# Warmup Iteration  18: 10739953.871 ops/s
# Warmup Iteration  19: 10722807.695 ops/s
# Warmup Iteration  20: 10717756.817 ops/s
# Warmup Iteration  21: 10725448.294 ops/s
# Warmup Iteration  22: 10728624.267 ops/s
# Warmup Iteration  23: 10708790.207 ops/s
# Warmup Iteration  24: 10709601.109 ops/s
# Warmup Iteration  25: 10725211.747 ops/s
# Warmup Iteration  26: 10687170.991 ops/s
# Warmup Iteration  27: 10729822.242 ops/s
# Warmup Iteration  28: 10730076.054 ops/s
# Warmup Iteration  29: 10722902.973 ops/s
# Warmup Iteration  30: 10721265.738 ops/s
Iteration   1: 10745862.905 ops/s
Iteration   2: 10738838.090 ops/s
Iteration   3: 10726391.777 ops/s
Iteration   4: 10719088.402 ops/s
Iteration   5: 10669770.723 ops/s
Iteration   6: 10736408.828 ops/s
Iteration   7: 10730368.906 ops/s
Iteration   8: 10717020.069 ops/s
Iteration   9: 10720818.675 ops/s
Iteration  10: 10729108.879 ops/s
Iteration  11: 10742495.643 ops/s
Iteration  12: 10684441.091 ops/s
Iteration  13: 10721850.891 ops/s
Iteration  14: 10721811.071 ops/s
Iteration  15: 10731128.701 ops/s
Iteration  16: 10737395.760 ops/s
Iteration  17: 10747404.890 ops/s
Iteration  18: 10701671.576 ops/s
Iteration  19: 10729908.922 ops/s
Iteration  20: 10722536.853 ops/s
Iteration  21: 10727677.319 ops/s
Iteration  22: 10742599.963 ops/s
Iteration  23: 10703841.588 ops/s
Iteration  24: 10730257.351 ops/s
Iteration  25: 10725792.335 ops/s
Iteration  26: 10711674.124 ops/s
Iteration  27: 10741130.951 ops/s
Iteration  28: 10735912.971 ops/s
Iteration  29: 10727122.854 ops/s
Iteration  30: 10731118.681 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_selectWithIndex":
  10725048.360 ±(99.9%) 11506.262 ops/s [Average]
  (min, avg, max) = (10669770.723, 10725048.360, 10747404.890), stdev = 17222.032
  CI (99.9%): [10713542.098, 10736554.621] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score       Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_selectWithIndex  thrpt   30  10725048.360 ± 11506.262  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_selectWithIndexWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_selectWithIndexWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5560502.204 ops/s
# Warmup Iteration   2: 11774110.400 ops/s
# Warmup Iteration   3: 10101268.392 ops/s
# Warmup Iteration   4: 11952132.956 ops/s
# Warmup Iteration   5: 12024056.743 ops/s
# Warmup Iteration   6: 11940908.853 ops/s
# Warmup Iteration   7: 11971057.947 ops/s
# Warmup Iteration   8: 11967601.681 ops/s
# Warmup Iteration   9: 11941823.424 ops/s
# Warmup Iteration  10: 11990784.530 ops/s
# Warmup Iteration  11: 11974138.373 ops/s
# Warmup Iteration  12: 11983874.789 ops/s
# Warmup Iteration  13: 11987006.195 ops/s
# Warmup Iteration  14: 11974242.607 ops/s
# Warmup Iteration  15: 12014604.718 ops/s
# Warmup Iteration  16: 12012953.325 ops/s
# Warmup Iteration  17: 11976733.275 ops/s
# Warmup Iteration  18: 11997096.854 ops/s
# Warmup Iteration  19: 11984613.695 ops/s
# Warmup Iteration  20: 12002688.486 ops/s
# Warmup Iteration  21: 12006404.307 ops/s
# Warmup Iteration  22: 11980746.952 ops/s
# Warmup Iteration  23: 11959568.070 ops/s
# Warmup Iteration  24: 12000082.633 ops/s
# Warmup Iteration  25: 11954306.665 ops/s
# Warmup Iteration  26: 11996763.711 ops/s
# Warmup Iteration  27: 11969089.686 ops/s
# Warmup Iteration  28: 11967826.884 ops/s
# Warmup Iteration  29: 11999402.914 ops/s
# Warmup Iteration  30: 11976462.257 ops/s
Iteration   1: 11983927.468 ops/s
Iteration   2: 12006233.606 ops/s
Iteration   3: 12005987.587 ops/s
Iteration   4: 11967836.523 ops/s
Iteration   5: 11987008.636 ops/s
Iteration   6: 12021848.154 ops/s
Iteration   7: 11966602.641 ops/s
Iteration   8: 12021444.275 ops/s
Iteration   9: 11989084.257 ops/s
Iteration  10: 11945301.439 ops/s
Iteration  11: 11964854.134 ops/s
Iteration  12: 11967589.569 ops/s
Iteration  13: 11966012.092 ops/s
Iteration  14: 11952359.475 ops/s
Iteration  15: 11969213.258 ops/s
Iteration  16: 11988071.984 ops/s
Iteration  17: 11947547.290 ops/s
Iteration  18: 11941717.996 ops/s
Iteration  19: 11991071.814 ops/s
Iteration  20: 11970768.412 ops/s
Iteration  21: 11962987.305 ops/s
Iteration  22: 11989295.384 ops/s
Iteration  23: 11972901.188 ops/s
Iteration  24: 12002048.702 ops/s
Iteration  25: 12014769.957 ops/s
Iteration  26: 11979422.918 ops/s
Iteration  27: 11964848.562 ops/s
Iteration  28: 12005725.352 ops/s
Iteration  29: 11953567.872 ops/s
Iteration  30: 11985459.187 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_selectWithIndexWithTarget":
  11979516.901 ±(99.9%) 14937.661 ops/s [Average]
  (min, avg, max) = (11941717.996, 11979516.901, 12021848.154), stdev = 22357.990
  CI (99.9%): [11964579.240, 11994454.563] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt         Score       Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_selectWithIndexWithTarget  thrpt   30  11979516.901 ± 14937.661  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_selectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_selectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6095489.579 ops/s
# Warmup Iteration   2: 13062369.427 ops/s
# Warmup Iteration   3: 11190266.421 ops/s
# Warmup Iteration   4: 13215679.467 ops/s
# Warmup Iteration   5: 13251879.777 ops/s
# Warmup Iteration   6: 13243971.953 ops/s
# Warmup Iteration   7: 13184066.943 ops/s
# Warmup Iteration   8: 13219891.347 ops/s
# Warmup Iteration   9: 13243621.636 ops/s
# Warmup Iteration  10: 13229597.723 ops/s
# Warmup Iteration  11: 13237883.483 ops/s
# Warmup Iteration  12: 13256982.428 ops/s
# Warmup Iteration  13: 13241313.192 ops/s
# Warmup Iteration  14: 13211718.835 ops/s
# Warmup Iteration  15: 13188307.394 ops/s
# Warmup Iteration  16: 13236036.403 ops/s
# Warmup Iteration  17: 13224530.036 ops/s
# Warmup Iteration  18: 13223288.760 ops/s
# Warmup Iteration  19: 13268264.268 ops/s
# Warmup Iteration  20: 13228000.281 ops/s
# Warmup Iteration  21: 13245568.868 ops/s
# Warmup Iteration  22: 13238153.684 ops/s
# Warmup Iteration  23: 13231596.843 ops/s
# Warmup Iteration  24: 13185843.474 ops/s
# Warmup Iteration  25: 13251067.832 ops/s
# Warmup Iteration  26: 13249147.118 ops/s
# Warmup Iteration  27: 13254125.696 ops/s
# Warmup Iteration  28: 13211249.967 ops/s
# Warmup Iteration  29: 13223153.054 ops/s
# Warmup Iteration  30: 13275618.311 ops/s
Iteration   1: 13239167.377 ops/s
Iteration   2: 13238491.461 ops/s
Iteration   3: 13250535.631 ops/s
Iteration   4: 13214995.269 ops/s
Iteration   5: 13243745.762 ops/s
Iteration   6: 13250354.072 ops/s
Iteration   7: 13211648.088 ops/s
Iteration   8: 13266861.085 ops/s
Iteration   9: 13288265.449 ops/s
Iteration  10: 13229376.839 ops/s
Iteration  11: 13254508.880 ops/s
Iteration  12: 13273668.383 ops/s
Iteration  13: 13232660.500 ops/s
Iteration  14: 13264291.518 ops/s
Iteration  15: 13267341.976 ops/s
Iteration  16: 13258434.147 ops/s
Iteration  17: 13233452.597 ops/s
Iteration  18: 13208044.891 ops/s
Iteration  19: 13248759.538 ops/s
Iteration  20: 13259721.530 ops/s
Iteration  21: 13258795.267 ops/s
Iteration  22: 13242280.700 ops/s
Iteration  23: 13266598.552 ops/s
Iteration  24: 13265372.143 ops/s
Iteration  25: 13229714.962 ops/s
Iteration  26: 13255554.993 ops/s
Iteration  27: 13249679.143 ops/s
Iteration  28: 13226462.527 ops/s
Iteration  29: 13260750.812 ops/s
Iteration  30: 13253186.970 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_selectWith_target":
  13248090.702 ±(99.9%) 12657.331 ops/s [Average]
  (min, avg, max) = (13208044.891, 13248090.702, 13288265.449), stdev = 18944.899
  CI (99.9%): [13235433.371, 13260748.033] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score       Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_selectWith_target  thrpt   30  13248090.702 ± 12657.331  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_select_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_select_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7191923.636 ops/s
# Warmup Iteration   2: 14798006.845 ops/s
# Warmup Iteration   3: 12333144.333 ops/s
# Warmup Iteration   4: 14523121.432 ops/s
# Warmup Iteration   5: 14541423.447 ops/s
# Warmup Iteration   6: 14498381.870 ops/s
# Warmup Iteration   7: 14488861.039 ops/s
# Warmup Iteration   8: 14415036.454 ops/s
# Warmup Iteration   9: 14462493.773 ops/s
# Warmup Iteration  10: 14518790.045 ops/s
# Warmup Iteration  11: 14512784.648 ops/s
# Warmup Iteration  12: 14506254.284 ops/s
# Warmup Iteration  13: 14507570.670 ops/s
# Warmup Iteration  14: 14494983.238 ops/s
# Warmup Iteration  15: 14468304.458 ops/s
# Warmup Iteration  16: 14497654.674 ops/s
# Warmup Iteration  17: 14543627.259 ops/s
# Warmup Iteration  18: 14488343.843 ops/s
# Warmup Iteration  19: 14524822.052 ops/s
# Warmup Iteration  20: 14534869.150 ops/s
# Warmup Iteration  21: 14531513.140 ops/s
# Warmup Iteration  22: 14503171.521 ops/s
# Warmup Iteration  23: 14523290.148 ops/s
# Warmup Iteration  24: 14497520.888 ops/s
# Warmup Iteration  25: 14525272.039 ops/s
# Warmup Iteration  26: 14422791.509 ops/s
# Warmup Iteration  27: 14494996.255 ops/s
# Warmup Iteration  28: 14481678.606 ops/s
# Warmup Iteration  29: 14511614.963 ops/s
# Warmup Iteration  30: 14489522.999 ops/s
Iteration   1: 14528845.525 ops/s
Iteration   2: 14530662.532 ops/s
Iteration   3: 14489307.517 ops/s
Iteration   4: 14452301.455 ops/s
Iteration   5: 14477687.596 ops/s
Iteration   6: 14500788.534 ops/s
Iteration   7: 14533877.741 ops/s
Iteration   8: 14539890.593 ops/s
Iteration   9: 14493706.181 ops/s
Iteration  10: 14502206.723 ops/s
Iteration  11: 14527084.270 ops/s
Iteration  12: 14496719.404 ops/s
Iteration  13: 14556572.522 ops/s
Iteration  14: 14475287.240 ops/s
Iteration  15: 14528295.047 ops/s
Iteration  16: 14526734.985 ops/s
Iteration  17: 14496816.857 ops/s
Iteration  18: 14467249.853 ops/s
Iteration  19: 14501447.827 ops/s
Iteration  20: 14486782.349 ops/s
Iteration  21: 14476100.713 ops/s
Iteration  22: 14501795.801 ops/s
Iteration  23: 14439511.314 ops/s
Iteration  24: 14485325.877 ops/s
Iteration  25: 14517982.357 ops/s
Iteration  26: 14442447.916 ops/s
Iteration  27: 14512229.342 ops/s
Iteration  28: 14482834.821 ops/s
Iteration  29: 14527473.726 ops/s
Iteration  30: 14447258.598 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_select_target":
  14498174.174 ±(99.9%) 20287.217 ops/s [Average]
  (min, avg, max) = (14439511.314, 14498174.174, 14556572.522), stdev = 30364.953
  CI (99.9%): [14477886.957, 14518461.391] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score       Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_select_target  thrpt   30  14498174.174 ± 20287.217  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_set$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_set

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 760501.382 ops/s
# Warmup Iteration   2: 787174.204 ops/s
# Warmup Iteration   3: 1002045.225 ops/s
# Warmup Iteration   4: 1000092.498 ops/s
# Warmup Iteration   5: 1001702.228 ops/s
# Warmup Iteration   6: 994483.962 ops/s
# Warmup Iteration   7: 995427.669 ops/s
# Warmup Iteration   8: 1000270.939 ops/s
# Warmup Iteration   9: 999937.959 ops/s
# Warmup Iteration  10: 1000961.898 ops/s
# Warmup Iteration  11: 1002424.923 ops/s
# Warmup Iteration  12: 824743.424 ops/s
# Warmup Iteration  13: 1004428.583 ops/s
# Warmup Iteration  14: 1003865.216 ops/s
# Warmup Iteration  15: 1003596.100 ops/s
# Warmup Iteration  16: 1004799.840 ops/s
# Warmup Iteration  17: 1065975.766 ops/s
# Warmup Iteration  18: 1065420.149 ops/s
# Warmup Iteration  19: 1066759.966 ops/s
# Warmup Iteration  20: 1065466.431 ops/s
# Warmup Iteration  21: 1064468.274 ops/s
# Warmup Iteration  22: 1065184.892 ops/s
# Warmup Iteration  23: 1067363.345 ops/s
# Warmup Iteration  24: 1066066.954 ops/s
# Warmup Iteration  25: 1067015.964 ops/s
# Warmup Iteration  26: 1066536.475 ops/s
# Warmup Iteration  27: 1065908.977 ops/s
# Warmup Iteration  28: 1066229.787 ops/s
# Warmup Iteration  29: 1065625.962 ops/s
# Warmup Iteration  30: 1064021.467 ops/s
Iteration   1: 1066838.085 ops/s
Iteration   2: 1063485.286 ops/s
Iteration   3: 1057999.986 ops/s
Iteration   4: 1060800.681 ops/s
Iteration   5: 1068002.391 ops/s
Iteration   6: 1066861.212 ops/s
Iteration   7: 1067916.894 ops/s
Iteration   8: 1065669.877 ops/s
Iteration   9: 1065004.162 ops/s
Iteration  10: 1065805.322 ops/s
Iteration  11: 1062652.163 ops/s
Iteration  12: 1068542.030 ops/s
Iteration  13: 1070411.893 ops/s
Iteration  14: 1067821.454 ops/s
Iteration  15: 1064965.212 ops/s
Iteration  16: 1069554.152 ops/s
Iteration  17: 1067786.070 ops/s
Iteration  18: 1067179.146 ops/s
Iteration  19: 1064521.732 ops/s
Iteration  20: 1066697.159 ops/s
Iteration  21: 1065760.532 ops/s
Iteration  22: 1064413.916 ops/s
Iteration  23: 1063193.450 ops/s
Iteration  24: 1066968.415 ops/s
Iteration  25: 1065392.909 ops/s
Iteration  26: 1066370.124 ops/s
Iteration  27: 1062350.416 ops/s
Iteration  28: 1067981.999 ops/s
Iteration  29: 1066912.411 ops/s
Iteration  30: 1066840.076 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_set":
  1065823.305 ±(99.9%) 1749.160 ops/s [Average]
  (min, avg, max) = (1057999.986, 1065823.305, 1070411.893), stdev = 2618.061
  CI (99.9%): [1064074.145, 1067572.466] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_set  thrpt   30  1065823.305 ± 1749.160  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_sort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_sort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 651837.840 ops/s
# Warmup Iteration   2: 781131.085 ops/s
# Warmup Iteration   3: 971083.186 ops/s
# Warmup Iteration   4: 964487.030 ops/s
# Warmup Iteration   5: 971186.849 ops/s
# Warmup Iteration   6: 970434.376 ops/s
# Warmup Iteration   7: 966741.881 ops/s
# Warmup Iteration   8: 969148.540 ops/s
# Warmup Iteration   9: 813811.065 ops/s
# Warmup Iteration  10: 971545.822 ops/s
# Warmup Iteration  11: 969825.117 ops/s
# Warmup Iteration  12: 968996.551 ops/s
# Warmup Iteration  13: 972408.669 ops/s
# Warmup Iteration  14: 970997.354 ops/s
# Warmup Iteration  15: 971351.058 ops/s
# Warmup Iteration  16: 968488.519 ops/s
# Warmup Iteration  17: 1027316.005 ops/s
# Warmup Iteration  18: 1026667.843 ops/s
# Warmup Iteration  19: 1024990.959 ops/s
# Warmup Iteration  20: 1028724.872 ops/s
# Warmup Iteration  21: 1026897.851 ops/s
# Warmup Iteration  22: 1028256.549 ops/s
# Warmup Iteration  23: 1026895.701 ops/s
# Warmup Iteration  24: 1027618.039 ops/s
# Warmup Iteration  25: 1026939.800 ops/s
# Warmup Iteration  26: 1029692.906 ops/s
# Warmup Iteration  27: 1027419.921 ops/s
# Warmup Iteration  28: 1028744.512 ops/s
# Warmup Iteration  29: 1023790.917 ops/s
# Warmup Iteration  30: 1028843.654 ops/s
Iteration   1: 1027710.406 ops/s
Iteration   2: 1026066.364 ops/s
Iteration   3: 1026743.020 ops/s
Iteration   4: 1027296.262 ops/s
Iteration   5: 1026358.250 ops/s
Iteration   6: 1026522.070 ops/s
Iteration   7: 1026037.653 ops/s
Iteration   8: 1028943.668 ops/s
Iteration   9: 1029361.875 ops/s
Iteration  10: 1025581.573 ops/s
Iteration  11: 1026871.016 ops/s
Iteration  12: 1025619.286 ops/s
Iteration  13: 1024891.581 ops/s
Iteration  14: 1029149.658 ops/s
Iteration  15: 1027876.755 ops/s
Iteration  16: 1029372.556 ops/s
Iteration  17: 1028779.571 ops/s
Iteration  18: 1029230.784 ops/s
Iteration  19: 1029304.345 ops/s
Iteration  20: 1030473.433 ops/s
Iteration  21: 1025883.837 ops/s
Iteration  22: 1030765.234 ops/s
Iteration  23: 1030485.766 ops/s
Iteration  24: 1027495.679 ops/s
Iteration  25: 1029664.007 ops/s
Iteration  26: 1027980.167 ops/s
Iteration  27: 1023037.841 ops/s
Iteration  28: 1028413.495 ops/s
Iteration  29: 1024308.936 ops/s
Iteration  30: 1019772.719 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_sort":
  1027333.260 ±(99.9%) 1603.696 ops/s [Average]
  (min, avg, max) = (1019772.719, 1027333.260, 1030765.234), stdev = 2400.337
  CI (99.9%): [1025729.564, 1028936.956] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_sort  thrpt   30  1027333.260 ± 1603.696  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_stream$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_stream

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 312006.839 ops/s
# Warmup Iteration   2: 650480.778 ops/s
# Warmup Iteration   3: 736965.019 ops/s
# Warmup Iteration   4: 750317.037 ops/s
# Warmup Iteration   5: 621768.890 ops/s
# Warmup Iteration   6: 744738.444 ops/s
# Warmup Iteration   7: 748807.877 ops/s
# Warmup Iteration   8: 749526.237 ops/s
# Warmup Iteration   9: 748828.245 ops/s
# Warmup Iteration  10: 749225.007 ops/s
# Warmup Iteration  11: 749392.807 ops/s
# Warmup Iteration  12: 749320.781 ops/s
# Warmup Iteration  13: 748415.660 ops/s
# Warmup Iteration  14: 749363.320 ops/s
# Warmup Iteration  15: 748593.330 ops/s
# Warmup Iteration  16: 748874.335 ops/s
# Warmup Iteration  17: 747389.980 ops/s
# Warmup Iteration  18: 743062.882 ops/s
# Warmup Iteration  19: 744331.012 ops/s
# Warmup Iteration  20: 749819.764 ops/s
# Warmup Iteration  21: 749029.619 ops/s
# Warmup Iteration  22: 748878.922 ops/s
# Warmup Iteration  23: 748800.819 ops/s
# Warmup Iteration  24: 746719.709 ops/s
# Warmup Iteration  25: 747995.656 ops/s
# Warmup Iteration  26: 750260.643 ops/s
# Warmup Iteration  27: 747762.815 ops/s
# Warmup Iteration  28: 749690.969 ops/s
# Warmup Iteration  29: 749468.152 ops/s
# Warmup Iteration  30: 749212.891 ops/s
Iteration   1: 749069.734 ops/s
Iteration   2: 748687.683 ops/s
Iteration   3: 746271.623 ops/s
Iteration   4: 750330.722 ops/s
Iteration   5: 747385.206 ops/s
Iteration   6: 748885.503 ops/s
Iteration   7: 750386.984 ops/s
Iteration   8: 747669.430 ops/s
Iteration   9: 747664.169 ops/s
Iteration  10: 748027.397 ops/s
Iteration  11: 745459.946 ops/s
Iteration  12: 746014.029 ops/s
Iteration  13: 749288.831 ops/s
Iteration  14: 748867.808 ops/s
Iteration  15: 750027.112 ops/s
Iteration  16: 748549.594 ops/s
Iteration  17: 748785.568 ops/s
Iteration  18: 748980.285 ops/s
Iteration  19: 748466.350 ops/s
Iteration  20: 748123.974 ops/s
Iteration  21: 749542.264 ops/s
Iteration  22: 749588.666 ops/s
Iteration  23: 748353.832 ops/s
Iteration  24: 750303.939 ops/s
Iteration  25: 749301.130 ops/s
Iteration  26: 746921.141 ops/s
Iteration  27: 748863.348 ops/s
Iteration  28: 748900.144 ops/s
Iteration  29: 748785.699 ops/s
Iteration  30: 750182.327 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_stream":
  748589.481 ±(99.9%) 840.127 ops/s [Average]
  (min, avg, max) = (745459.946, 748589.481, 750386.984), stdev = 1257.463
  CI (99.9%): [747749.354, 749429.609] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score     Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_stream  thrpt   30  748589.481 ± 840.127  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_subList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_subList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 22253968.212 ops/s
# Warmup Iteration   2: 40819520.551 ops/s
# Warmup Iteration   3: 39192797.859 ops/s
# Warmup Iteration   4: 43472757.755 ops/s
# Warmup Iteration   5: 43377999.122 ops/s
# Warmup Iteration   6: 43486974.425 ops/s
# Warmup Iteration   7: 43151962.512 ops/s
# Warmup Iteration   8: 43371110.043 ops/s
# Warmup Iteration   9: 43423127.254 ops/s
# Warmup Iteration  10: 43609881.295 ops/s
# Warmup Iteration  11: 43386202.972 ops/s
# Warmup Iteration  12: 43482121.864 ops/s
# Warmup Iteration  13: 43618109.139 ops/s
# Warmup Iteration  14: 43690893.213 ops/s
# Warmup Iteration  15: 43396869.067 ops/s
# Warmup Iteration  16: 43539152.029 ops/s
# Warmup Iteration  17: 43536720.507 ops/s
# Warmup Iteration  18: 43701048.153 ops/s
# Warmup Iteration  19: 43169651.782 ops/s
# Warmup Iteration  20: 43710919.223 ops/s
# Warmup Iteration  21: 43439951.152 ops/s
# Warmup Iteration  22: 43601736.710 ops/s
# Warmup Iteration  23: 43345670.579 ops/s
# Warmup Iteration  24: 43631044.129 ops/s
# Warmup Iteration  25: 43719351.658 ops/s
# Warmup Iteration  26: 43614123.876 ops/s
# Warmup Iteration  27: 43518763.521 ops/s
# Warmup Iteration  28: 43445492.080 ops/s
# Warmup Iteration  29: 43360512.425 ops/s
# Warmup Iteration  30: 43581372.810 ops/s
Iteration   1: 43623095.761 ops/s
Iteration   2: 43590568.968 ops/s
Iteration   3: 43548983.247 ops/s
Iteration   4: 43601820.286 ops/s
Iteration   5: 43555439.174 ops/s
Iteration   6: 43336663.150 ops/s
Iteration   7: 43548251.726 ops/s
Iteration   8: 43790670.875 ops/s
Iteration   9: 43563605.625 ops/s
Iteration  10: 43393907.913 ops/s
Iteration  11: 43299996.023 ops/s
Iteration  12: 43403878.335 ops/s
Iteration  13: 43373243.742 ops/s
Iteration  14: 43401969.033 ops/s
Iteration  15: 43580747.075 ops/s
Iteration  16: 43408489.833 ops/s
Iteration  17: 43430321.677 ops/s
Iteration  18: 43596624.001 ops/s
Iteration  19: 43524857.937 ops/s
Iteration  20: 43458153.853 ops/s
Iteration  21: 43669506.818 ops/s
Iteration  22: 43635325.897 ops/s
Iteration  23: 43404816.099 ops/s
Iteration  24: 43439123.242 ops/s
Iteration  25: 43425342.025 ops/s
Iteration  26: 43586692.723 ops/s
Iteration  27: 43715076.438 ops/s
Iteration  28: 43440244.304 ops/s
Iteration  29: 43320622.296 ops/s
Iteration  30: 43474165.723 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_subList":
  43504740.127 ±(99.9%) 81285.643 ops/s [Average]
  (min, avg, max) = (43299996.023, 43504740.127, 43790670.875), stdev = 121664.534
  CI (99.9%): [43423454.483, 43586025.770] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_subList  thrpt   30  43504740.127 ± 81285.643  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_subListFromGreaterThanTO$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_subListFromGreaterThanTO

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 663284.466 ops/s
# Warmup Iteration   2: 681758.117 ops/s
# Warmup Iteration   3: 813538.983 ops/s
# Warmup Iteration   4: 868887.613 ops/s
# Warmup Iteration   5: 867744.856 ops/s
# Warmup Iteration   6: 861097.054 ops/s
# Warmup Iteration   7: 866487.347 ops/s
# Warmup Iteration   8: 866885.553 ops/s
# Warmup Iteration   9: 868176.274 ops/s
# Warmup Iteration  10: 865618.779 ops/s
# Warmup Iteration  11: 865669.272 ops/s
# Warmup Iteration  12: 869434.764 ops/s
# Warmup Iteration  13: 868439.264 ops/s
# Warmup Iteration  14: 729279.782 ops/s
# Warmup Iteration  15: 869569.974 ops/s
# Warmup Iteration  16: 869455.559 ops/s
# Warmup Iteration  17: 917223.552 ops/s
# Warmup Iteration  18: 914278.326 ops/s
# Warmup Iteration  19: 914255.126 ops/s
# Warmup Iteration  20: 915995.450 ops/s
# Warmup Iteration  21: 915131.906 ops/s
# Warmup Iteration  22: 915819.935 ops/s
# Warmup Iteration  23: 916536.401 ops/s
# Warmup Iteration  24: 916211.244 ops/s
# Warmup Iteration  25: 915551.336 ops/s
# Warmup Iteration  26: 912912.479 ops/s
# Warmup Iteration  27: 909392.927 ops/s
# Warmup Iteration  28: 912250.672 ops/s
# Warmup Iteration  29: 916377.846 ops/s
# Warmup Iteration  30: 916163.827 ops/s
Iteration   1: 916562.527 ops/s
Iteration   2: 916970.841 ops/s
Iteration   3: 917353.840 ops/s
Iteration   4: 915050.172 ops/s
Iteration   5: 912492.397 ops/s
Iteration   6: 915318.329 ops/s
Iteration   7: 914044.387 ops/s
Iteration   8: 916946.637 ops/s
Iteration   9: 915124.672 ops/s
Iteration  10: 915158.396 ops/s
Iteration  11: 915352.343 ops/s
Iteration  12: 918073.003 ops/s
Iteration  13: 918243.749 ops/s
Iteration  14: 914125.303 ops/s
Iteration  15: 916765.709 ops/s
Iteration  16: 916962.288 ops/s
Iteration  17: 915034.103 ops/s
Iteration  18: 915824.109 ops/s
Iteration  19: 915210.162 ops/s
Iteration  20: 916309.480 ops/s
Iteration  21: 916413.026 ops/s
Iteration  22: 914287.191 ops/s
Iteration  23: 914848.711 ops/s
Iteration  24: 914720.543 ops/s
Iteration  25: 913723.794 ops/s
Iteration  26: 916182.777 ops/s
Iteration  27: 916058.771 ops/s
Iteration  28: 915634.060 ops/s
Iteration  29: 917510.331 ops/s
Iteration  30: 917322.318 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_subListFromGreaterThanTO":
  915787.465 ±(99.9%) 907.560 ops/s [Average]
  (min, avg, max) = (912492.397, 915787.465, 918243.749), stdev = 1358.393
  CI (99.9%): [914879.906, 916695.025] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score     Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_subListFromGreaterThanTO  thrpt   30  915787.465 ± 907.560  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_subListFromNegative$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_subListFromNegative

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 674307.530 ops/s
# Warmup Iteration   2: 684544.996 ops/s
# Warmup Iteration   3: 806158.524 ops/s
# Warmup Iteration   4: 872696.537 ops/s
# Warmup Iteration   5: 871872.969 ops/s
# Warmup Iteration   6: 872804.980 ops/s
# Warmup Iteration   7: 871612.365 ops/s
# Warmup Iteration   8: 871015.501 ops/s
# Warmup Iteration   9: 874243.489 ops/s
# Warmup Iteration  10: 873223.611 ops/s
# Warmup Iteration  11: 874388.861 ops/s
# Warmup Iteration  12: 872789.644 ops/s
# Warmup Iteration  13: 872945.610 ops/s
# Warmup Iteration  14: 776892.548 ops/s
# Warmup Iteration  15: 830676.989 ops/s
# Warmup Iteration  16: 874232.780 ops/s
# Warmup Iteration  17: 918670.324 ops/s
# Warmup Iteration  18: 920086.171 ops/s
# Warmup Iteration  19: 921406.714 ops/s
# Warmup Iteration  20: 920765.661 ops/s
# Warmup Iteration  21: 922137.124 ops/s
# Warmup Iteration  22: 920454.916 ops/s
# Warmup Iteration  23: 920234.554 ops/s
# Warmup Iteration  24: 918793.241 ops/s
# Warmup Iteration  25: 919306.819 ops/s
# Warmup Iteration  26: 916574.656 ops/s
# Warmup Iteration  27: 918723.378 ops/s
# Warmup Iteration  28: 922409.250 ops/s
# Warmup Iteration  29: 921145.262 ops/s
# Warmup Iteration  30: 921830.991 ops/s
Iteration   1: 922719.402 ops/s
Iteration   2: 919160.529 ops/s
Iteration   3: 919422.089 ops/s
Iteration   4: 920395.122 ops/s
Iteration   5: 922200.355 ops/s
Iteration   6: 922360.448 ops/s
Iteration   7: 919580.736 ops/s
Iteration   8: 921808.299 ops/s
Iteration   9: 921195.177 ops/s
Iteration  10: 920499.554 ops/s
Iteration  11: 921683.898 ops/s
Iteration  12: 918659.110 ops/s
Iteration  13: 920836.669 ops/s
Iteration  14: 920489.029 ops/s
Iteration  15: 920371.255 ops/s
Iteration  16: 920561.172 ops/s
Iteration  17: 922453.268 ops/s
Iteration  18: 922195.399 ops/s
Iteration  19: 921860.512 ops/s
Iteration  20: 921892.221 ops/s
Iteration  21: 917409.291 ops/s
Iteration  22: 920713.683 ops/s
Iteration  23: 922297.787 ops/s
Iteration  24: 918730.098 ops/s
Iteration  25: 921259.493 ops/s
Iteration  26: 917430.720 ops/s
Iteration  27: 920999.353 ops/s
Iteration  28: 923016.463 ops/s
Iteration  29: 921533.935 ops/s
Iteration  30: 921512.103 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_subListFromNegative":
  920841.572 ±(99.9%) 991.155 ops/s [Average]
  (min, avg, max) = (917409.291, 920841.572, 923016.463), stdev = 1483.515
  CI (99.9%): [919850.417, 921832.727] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score     Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_subListFromNegative  thrpt   30  920841.572 ± 991.155  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_subListToGreaterThanSize$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_subListToGreaterThanSize

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 667736.488 ops/s
# Warmup Iteration   2: 691553.236 ops/s
# Warmup Iteration   3: 805883.969 ops/s
# Warmup Iteration   4: 871962.837 ops/s
# Warmup Iteration   5: 871275.872 ops/s
# Warmup Iteration   6: 871019.303 ops/s
# Warmup Iteration   7: 872497.743 ops/s
# Warmup Iteration   8: 872211.024 ops/s
# Warmup Iteration   9: 873692.876 ops/s
# Warmup Iteration  10: 873389.508 ops/s
# Warmup Iteration  11: 873823.948 ops/s
# Warmup Iteration  12: 871344.575 ops/s
# Warmup Iteration  13: 873812.348 ops/s
# Warmup Iteration  14: 775519.429 ops/s
# Warmup Iteration  15: 828252.833 ops/s
# Warmup Iteration  16: 874951.792 ops/s
# Warmup Iteration  17: 914711.044 ops/s
# Warmup Iteration  18: 916580.930 ops/s
# Warmup Iteration  19: 917368.430 ops/s
# Warmup Iteration  20: 919691.805 ops/s
# Warmup Iteration  21: 918284.718 ops/s
# Warmup Iteration  22: 916498.678 ops/s
# Warmup Iteration  23: 918879.582 ops/s
# Warmup Iteration  24: 916788.538 ops/s
# Warmup Iteration  25: 915932.187 ops/s
# Warmup Iteration  26: 916731.898 ops/s
# Warmup Iteration  27: 915827.936 ops/s
# Warmup Iteration  28: 918609.220 ops/s
# Warmup Iteration  29: 916814.583 ops/s
# Warmup Iteration  30: 916091.751 ops/s
Iteration   1: 919398.947 ops/s
Iteration   2: 915776.024 ops/s
Iteration   3: 917779.118 ops/s
Iteration   4: 917717.669 ops/s
Iteration   5: 919616.182 ops/s
Iteration   6: 920409.836 ops/s
Iteration   7: 914517.391 ops/s
Iteration   8: 919973.203 ops/s
Iteration   9: 920359.605 ops/s
Iteration  10: 920389.384 ops/s
Iteration  11: 918029.204 ops/s
Iteration  12: 916122.714 ops/s
Iteration  13: 917974.356 ops/s
Iteration  14: 917794.254 ops/s
Iteration  15: 918598.925 ops/s
Iteration  16: 918151.837 ops/s
Iteration  17: 917899.719 ops/s
Iteration  18: 918137.479 ops/s
Iteration  19: 919697.659 ops/s
Iteration  20: 919695.840 ops/s
Iteration  21: 917499.013 ops/s
Iteration  22: 918111.744 ops/s
Iteration  23: 917004.026 ops/s
Iteration  24: 917872.801 ops/s
Iteration  25: 917910.249 ops/s
Iteration  26: 917429.790 ops/s
Iteration  27: 919881.832 ops/s
Iteration  28: 920038.178 ops/s
Iteration  29: 920681.841 ops/s
Iteration  30: 919195.456 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_subListToGreaterThanSize":
  918455.476 ±(99.9%) 993.954 ops/s [Average]
  (min, avg, max) = (914517.391, 918455.476, 920681.841), stdev = 1487.703
  CI (99.9%): [917461.522, 919449.430] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score     Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_subListToGreaterThanSize  thrpt   30  918455.476 ± 993.954  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_sumByDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_sumByDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 999321.354 ops/s
# Warmup Iteration   2: 1810026.981 ops/s
# Warmup Iteration   3: 2068441.918 ops/s
# Warmup Iteration   4: 2078547.222 ops/s
# Warmup Iteration   5: 2053585.433 ops/s
# Warmup Iteration   6: 1725453.056 ops/s
# Warmup Iteration   7: 2075291.096 ops/s
# Warmup Iteration   8: 2079849.815 ops/s
# Warmup Iteration   9: 2081801.022 ops/s
# Warmup Iteration  10: 2082424.067 ops/s
# Warmup Iteration  11: 2080701.153 ops/s
# Warmup Iteration  12: 2077940.303 ops/s
# Warmup Iteration  13: 2081351.530 ops/s
# Warmup Iteration  14: 2083762.078 ops/s
# Warmup Iteration  15: 2081388.120 ops/s
# Warmup Iteration  16: 2082459.854 ops/s
# Warmup Iteration  17: 2080915.829 ops/s
# Warmup Iteration  18: 2081404.435 ops/s
# Warmup Iteration  19: 2082556.256 ops/s
# Warmup Iteration  20: 2082690.151 ops/s
# Warmup Iteration  21: 2081414.777 ops/s
# Warmup Iteration  22: 2083314.323 ops/s
# Warmup Iteration  23: 2081466.048 ops/s
# Warmup Iteration  24: 2079389.342 ops/s
# Warmup Iteration  25: 2075390.290 ops/s
# Warmup Iteration  26: 2079495.777 ops/s
# Warmup Iteration  27: 2083409.528 ops/s
# Warmup Iteration  28: 2080442.089 ops/s
# Warmup Iteration  29: 2081726.529 ops/s
# Warmup Iteration  30: 2082661.114 ops/s
Iteration   1: 2071317.285 ops/s
Iteration   2: 2065827.527 ops/s
Iteration   3: 2081366.183 ops/s
Iteration   4: 2083688.249 ops/s
Iteration   5: 2079182.581 ops/s
Iteration   6: 2074797.169 ops/s
Iteration   7: 2083153.607 ops/s
Iteration   8: 2080396.362 ops/s
Iteration   9: 2079124.306 ops/s
Iteration  10: 2077724.107 ops/s
Iteration  11: 2075446.953 ops/s
Iteration  12: 2082895.753 ops/s
Iteration  13: 2081011.624 ops/s
Iteration  14: 2081122.836 ops/s
Iteration  15: 2081722.394 ops/s
Iteration  16: 2081018.409 ops/s
Iteration  17: 2085002.434 ops/s
Iteration  18: 2081657.281 ops/s
Iteration  19: 2084933.395 ops/s
Iteration  20: 2080987.367 ops/s
Iteration  21: 2079127.707 ops/s
Iteration  22: 2083301.663 ops/s
Iteration  23: 2079105.832 ops/s
Iteration  24: 2084028.873 ops/s
Iteration  25: 2074212.033 ops/s
Iteration  26: 2078530.840 ops/s
Iteration  27: 2086571.067 ops/s
Iteration  28: 2080288.208 ops/s
Iteration  29: 2086469.558 ops/s
Iteration  30: 2082321.102 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_sumByDouble":
  2080211.090 ±(99.9%) 2981.478 ops/s [Average]
  (min, avg, max) = (2065827.527, 2080211.090, 2086571.067), stdev = 4462.536
  CI (99.9%): [2077229.612, 2083192.568] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_sumByDouble  thrpt   30  2080211.090 ± 2981.478  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_sumByDoubleConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_sumByDoubleConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 62.240 ops/s
# Warmup Iteration   2: 74.420 ops/s
# Warmup Iteration   3: 101.867 ops/s
# Warmup Iteration   4: 102.646 ops/s
# Warmup Iteration   5: 103.500 ops/s
# Warmup Iteration   6: 105.034 ops/s
# Warmup Iteration   7: 103.179 ops/s
# Warmup Iteration   8: 103.054 ops/s
# Warmup Iteration   9: 83.411 ops/s
# Warmup Iteration  10: 103.644 ops/s
# Warmup Iteration  11: 102.492 ops/s
# Warmup Iteration  12: 103.334 ops/s
# Warmup Iteration  13: 103.164 ops/s
# Warmup Iteration  14: 101.058 ops/s
# Warmup Iteration  15: 99.815 ops/s
# Warmup Iteration  16: 101.784 ops/s
# Warmup Iteration  17: 102.469 ops/s
# Warmup Iteration  18: 101.779 ops/s
# Warmup Iteration  19: 103.265 ops/s
# Warmup Iteration  20: 101.407 ops/s
# Warmup Iteration  21: 100.323 ops/s
# Warmup Iteration  22: 102.605 ops/s
# Warmup Iteration  23: 100.532 ops/s
# Warmup Iteration  24: 101.775 ops/s
# Warmup Iteration  25: 101.971 ops/s
# Warmup Iteration  26: 103.152 ops/s
# Warmup Iteration  27: 103.223 ops/s
# Warmup Iteration  28: 101.210 ops/s
# Warmup Iteration  29: 100.607 ops/s
# Warmup Iteration  30: 100.322 ops/s
Iteration   1: 99.982 ops/s
Iteration   2: 101.669 ops/s
Iteration   3: 100.160 ops/s
Iteration   4: 99.337 ops/s
Iteration   5: 98.797 ops/s
Iteration   6: 99.969 ops/s
Iteration   7: 100.220 ops/s
Iteration   8: 102.594 ops/s
Iteration   9: 100.845 ops/s
Iteration  10: 101.733 ops/s
Iteration  11: 101.789 ops/s
Iteration  12: 100.276 ops/s
Iteration  13: 101.058 ops/s
Iteration  14: 101.138 ops/s
Iteration  15: 100.723 ops/s
Iteration  16: 102.023 ops/s
Iteration  17: 101.928 ops/s
Iteration  18: 100.436 ops/s
Iteration  19: 101.568 ops/s
Iteration  20: 103.049 ops/s
Iteration  21: 101.480 ops/s
Iteration  22: 100.385 ops/s
Iteration  23: 101.084 ops/s
Iteration  24: 102.113 ops/s
Iteration  25: 101.392 ops/s
Iteration  26: 103.363 ops/s
Iteration  27: 102.592 ops/s
Iteration  28: 100.917 ops/s
Iteration  29: 99.505 ops/s
Iteration  30: 99.492 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_sumByDoubleConsistentRounding":
  101.054 ±(99.9%) 0.756 ops/s [Average]
  (min, avg, max) = (98.797, 101.054, 103.363), stdev = 1.132
  CI (99.9%): [100.298, 101.810] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt    Score   Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_sumByDoubleConsistentRounding  thrpt   30  101.054 ± 0.756  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_sumByFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_sumByFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 991785.930 ops/s
# Warmup Iteration   2: 1784026.604 ops/s
# Warmup Iteration   3: 2011088.236 ops/s
# Warmup Iteration   4: 2017009.337 ops/s
# Warmup Iteration   5: 2017042.282 ops/s
# Warmup Iteration   6: 1666591.192 ops/s
# Warmup Iteration   7: 2020486.585 ops/s
# Warmup Iteration   8: 2021157.180 ops/s
# Warmup Iteration   9: 2019478.669 ops/s
# Warmup Iteration  10: 2019300.878 ops/s
# Warmup Iteration  11: 2017169.701 ops/s
# Warmup Iteration  12: 2020671.725 ops/s
# Warmup Iteration  13: 2021299.931 ops/s
# Warmup Iteration  14: 2020817.144 ops/s
# Warmup Iteration  15: 2020510.494 ops/s
# Warmup Iteration  16: 2019970.241 ops/s
# Warmup Iteration  17: 2021592.389 ops/s
# Warmup Iteration  18: 2018518.193 ops/s
# Warmup Iteration  19: 2007431.771 ops/s
# Warmup Iteration  20: 2018708.762 ops/s
# Warmup Iteration  21: 2019931.617 ops/s
# Warmup Iteration  22: 2019738.650 ops/s
# Warmup Iteration  23: 2020010.585 ops/s
# Warmup Iteration  24: 2020611.890 ops/s
# Warmup Iteration  25: 2020112.096 ops/s
# Warmup Iteration  26: 2018041.966 ops/s
# Warmup Iteration  27: 2015555.196 ops/s
# Warmup Iteration  28: 2021637.335 ops/s
# Warmup Iteration  29: 2021782.001 ops/s
# Warmup Iteration  30: 2019475.731 ops/s
Iteration   1: 2019119.080 ops/s
Iteration   2: 2022759.932 ops/s
Iteration   3: 2015290.142 ops/s
Iteration   4: 2018051.413 ops/s
Iteration   5: 2017755.646 ops/s
Iteration   6: 2015238.291 ops/s
Iteration   7: 2022677.101 ops/s
Iteration   8: 2018489.342 ops/s
Iteration   9: 2022789.976 ops/s
Iteration  10: 2018732.553 ops/s
Iteration  11: 2019997.352 ops/s
Iteration  12: 2023350.734 ops/s
Iteration  13: 2020231.454 ops/s
Iteration  14: 2023520.778 ops/s
Iteration  15: 2021345.325 ops/s
Iteration  16: 2022886.308 ops/s
Iteration  17: 2021585.552 ops/s
Iteration  18: 2020069.932 ops/s
Iteration  19: 2023765.437 ops/s
Iteration  20: 2018597.819 ops/s
Iteration  21: 2021470.880 ops/s
Iteration  22: 2017356.000 ops/s
Iteration  23: 2020778.616 ops/s
Iteration  24: 2015447.367 ops/s
Iteration  25: 2022188.244 ops/s
Iteration  26: 2018494.040 ops/s
Iteration  27: 2019344.131 ops/s
Iteration  28: 2022756.197 ops/s
Iteration  29: 2020075.350 ops/s
Iteration  30: 2017102.516 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_sumByFloat":
  2020042.250 ±(99.9%) 1698.029 ops/s [Average]
  (min, avg, max) = (2015238.291, 2020042.250, 2023765.437), stdev = 2541.531
  CI (99.9%): [2018344.221, 2021740.280] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_sumByFloat  thrpt   30  2020042.250 ± 1698.029  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_sumByFloatConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_sumByFloatConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 62.983 ops/s
# Warmup Iteration   2: 75.191 ops/s
# Warmup Iteration   3: 102.382 ops/s
# Warmup Iteration   4: 101.835 ops/s
# Warmup Iteration   5: 102.482 ops/s
# Warmup Iteration   6: 102.560 ops/s
# Warmup Iteration   7: 101.949 ops/s
# Warmup Iteration   8: 100.352 ops/s
# Warmup Iteration   9: 85.278 ops/s
# Warmup Iteration  10: 99.417 ops/s
# Warmup Iteration  11: 102.520 ops/s
# Warmup Iteration  12: 103.149 ops/s
# Warmup Iteration  13: 101.704 ops/s
# Warmup Iteration  14: 100.799 ops/s
# Warmup Iteration  15: 101.663 ops/s
# Warmup Iteration  16: 100.833 ops/s
# Warmup Iteration  17: 98.855 ops/s
# Warmup Iteration  18: 99.676 ops/s
# Warmup Iteration  19: 99.052 ops/s
# Warmup Iteration  20: 100.161 ops/s
# Warmup Iteration  21: 101.038 ops/s
# Warmup Iteration  22: 101.374 ops/s
# Warmup Iteration  23: 100.762 ops/s
# Warmup Iteration  24: 101.013 ops/s
# Warmup Iteration  25: 102.124 ops/s
# Warmup Iteration  26: 100.184 ops/s
# Warmup Iteration  27: 102.369 ops/s
# Warmup Iteration  28: 100.918 ops/s
# Warmup Iteration  29: 100.662 ops/s
# Warmup Iteration  30: 100.239 ops/s
Iteration   1: 99.529 ops/s
Iteration   2: 102.690 ops/s
Iteration   3: 101.198 ops/s
Iteration   4: 101.027 ops/s
Iteration   5: 101.962 ops/s
Iteration   6: 100.840 ops/s
Iteration   7: 100.691 ops/s
Iteration   8: 101.665 ops/s
Iteration   9: 101.226 ops/s
Iteration  10: 99.916 ops/s
Iteration  11: 100.102 ops/s
Iteration  12: 98.392 ops/s
Iteration  13: 100.860 ops/s
Iteration  14: 100.542 ops/s
Iteration  15: 100.264 ops/s
Iteration  16: 101.433 ops/s
Iteration  17: 100.797 ops/s
Iteration  18: 101.613 ops/s
Iteration  19: 101.609 ops/s
Iteration  20: 100.636 ops/s
Iteration  21: 100.599 ops/s
Iteration  22: 102.527 ops/s
Iteration  23: 100.272 ops/s
Iteration  24: 99.953 ops/s
Iteration  25: 99.510 ops/s
Iteration  26: 98.165 ops/s
Iteration  27: 99.469 ops/s
Iteration  28: 101.038 ops/s
Iteration  29: 100.798 ops/s
Iteration  30: 99.477 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_sumByFloatConsistentRounding":
  100.627 ±(99.9%) 0.704 ops/s [Average]
  (min, avg, max) = (98.165, 100.627, 102.690), stdev = 1.053
  CI (99.9%): [99.923, 101.330] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt    Score   Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_sumByFloatConsistentRounding  thrpt   30  100.627 ± 0.704  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_sumByInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_sumByInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1361873.611 ops/s
# Warmup Iteration   2: 2672426.244 ops/s
# Warmup Iteration   3: 2935776.529 ops/s
# Warmup Iteration   4: 2957276.483 ops/s
# Warmup Iteration   5: 2429072.899 ops/s
# Warmup Iteration   6: 2946542.772 ops/s
# Warmup Iteration   7: 2951158.532 ops/s
# Warmup Iteration   8: 2951207.671 ops/s
# Warmup Iteration   9: 2952742.174 ops/s
# Warmup Iteration  10: 2950784.086 ops/s
# Warmup Iteration  11: 2950609.612 ops/s
# Warmup Iteration  12: 2922700.275 ops/s
# Warmup Iteration  13: 2931196.414 ops/s
# Warmup Iteration  14: 2936800.459 ops/s
# Warmup Iteration  15: 2931863.628 ops/s
# Warmup Iteration  16: 2952237.999 ops/s
# Warmup Iteration  17: 2955637.488 ops/s
# Warmup Iteration  18: 2958684.392 ops/s
# Warmup Iteration  19: 2957796.954 ops/s
# Warmup Iteration  20: 2955382.192 ops/s
# Warmup Iteration  21: 2964612.270 ops/s
# Warmup Iteration  22: 2959069.324 ops/s
# Warmup Iteration  23: 2965109.591 ops/s
# Warmup Iteration  24: 2963222.288 ops/s
# Warmup Iteration  25: 2964276.170 ops/s
# Warmup Iteration  26: 2950689.219 ops/s
# Warmup Iteration  27: 2960891.132 ops/s
# Warmup Iteration  28: 2963307.952 ops/s
# Warmup Iteration  29: 2961259.698 ops/s
# Warmup Iteration  30: 2960285.009 ops/s
Iteration   1: 2953641.131 ops/s
Iteration   2: 2958168.472 ops/s
Iteration   3: 2961127.622 ops/s
Iteration   4: 2955579.090 ops/s
Iteration   5: 2961719.112 ops/s
Iteration   6: 2964232.446 ops/s
Iteration   7: 2957882.551 ops/s
Iteration   8: 2964034.722 ops/s
Iteration   9: 2965594.965 ops/s
Iteration  10: 2954737.173 ops/s
Iteration  11: 2962474.215 ops/s
Iteration  12: 2962822.727 ops/s
Iteration  13: 2947045.007 ops/s
Iteration  14: 2947487.986 ops/s
Iteration  15: 2961709.054 ops/s
Iteration  16: 2957899.623 ops/s
Iteration  17: 2955701.389 ops/s
Iteration  18: 2958369.837 ops/s
Iteration  19: 2958990.626 ops/s
Iteration  20: 2955288.283 ops/s
Iteration  21: 2961329.920 ops/s
Iteration  22: 2958714.367 ops/s
Iteration  23: 2948330.191 ops/s
Iteration  24: 2961463.444 ops/s
Iteration  25: 2954150.531 ops/s
Iteration  26: 2956587.751 ops/s
Iteration  27: 2960657.633 ops/s
Iteration  28: 2959199.264 ops/s
Iteration  29: 2954711.467 ops/s
Iteration  30: 2963453.619 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_sumByInt":
  2958103.474 ±(99.9%) 3225.868 ops/s [Average]
  (min, avg, max) = (2947045.007, 2958103.474, 2965594.965), stdev = 4828.328
  CI (99.9%): [2954877.605, 2961329.342] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_sumByInt  thrpt   30  2958103.474 ± 3225.868  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_sumByLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_sumByLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1458361.681 ops/s
# Warmup Iteration   2: 2956921.531 ops/s
# Warmup Iteration   3: 3219178.039 ops/s
# Warmup Iteration   4: 3241533.001 ops/s
# Warmup Iteration   5: 2688488.855 ops/s
# Warmup Iteration   6: 3252003.236 ops/s
# Warmup Iteration   7: 3257885.083 ops/s
# Warmup Iteration   8: 3250895.412 ops/s
# Warmup Iteration   9: 3251682.791 ops/s
# Warmup Iteration  10: 3250977.836 ops/s
# Warmup Iteration  11: 3251649.844 ops/s
# Warmup Iteration  12: 3250322.336 ops/s
# Warmup Iteration  13: 3249543.619 ops/s
# Warmup Iteration  14: 3250584.722 ops/s
# Warmup Iteration  15: 3247652.809 ops/s
# Warmup Iteration  16: 3245244.931 ops/s
# Warmup Iteration  17: 3249931.963 ops/s
# Warmup Iteration  18: 3255475.753 ops/s
# Warmup Iteration  19: 3245753.331 ops/s
# Warmup Iteration  20: 3252501.452 ops/s
# Warmup Iteration  21: 3248600.537 ops/s
# Warmup Iteration  22: 3250807.670 ops/s
# Warmup Iteration  23: 3253534.931 ops/s
# Warmup Iteration  24: 3254539.061 ops/s
# Warmup Iteration  25: 3246106.704 ops/s
# Warmup Iteration  26: 3248775.468 ops/s
# Warmup Iteration  27: 3246249.026 ops/s
# Warmup Iteration  28: 3251888.480 ops/s
# Warmup Iteration  29: 3254948.551 ops/s
# Warmup Iteration  30: 3242364.386 ops/s
Iteration   1: 3252224.187 ops/s
Iteration   2: 3252394.721 ops/s
Iteration   3: 3250519.039 ops/s
Iteration   4: 3253018.952 ops/s
Iteration   5: 3253874.809 ops/s
Iteration   6: 3248617.638 ops/s
Iteration   7: 3245917.556 ops/s
Iteration   8: 3254541.194 ops/s
Iteration   9: 3251474.049 ops/s
Iteration  10: 3249863.942 ops/s
Iteration  11: 3252432.768 ops/s
Iteration  12: 3249359.221 ops/s
Iteration  13: 3251134.216 ops/s
Iteration  14: 3253801.007 ops/s
Iteration  15: 3249680.336 ops/s
Iteration  16: 3252203.557 ops/s
Iteration  17: 3250474.162 ops/s
Iteration  18: 3245582.417 ops/s
Iteration  19: 3257306.629 ops/s
Iteration  20: 3250481.137 ops/s
Iteration  21: 3251890.616 ops/s
Iteration  22: 3252100.811 ops/s
Iteration  23: 3255789.917 ops/s
Iteration  24: 3246973.089 ops/s
Iteration  25: 3244569.615 ops/s
Iteration  26: 3261715.074 ops/s
Iteration  27: 3247591.936 ops/s
Iteration  28: 3251000.007 ops/s
Iteration  29: 3249721.622 ops/s
Iteration  30: 3250556.824 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_sumByLong":
  3251227.035 ±(99.9%) 2341.758 ops/s [Average]
  (min, avg, max) = (3244569.615, 3251227.035, 3261715.074), stdev = 3505.034
  CI (99.9%): [3248885.277, 3253568.793] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_sumByLong  thrpt   30  3251227.035 ± 2341.758  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_sumDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_sumDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 21742685.497 ops/s
# Warmup Iteration   2: 45815707.195 ops/s
# Warmup Iteration   3: 46499997.742 ops/s
# Warmup Iteration   4: 39190898.093 ops/s
# Warmup Iteration   5: 46317482.004 ops/s
# Warmup Iteration   6: 46610332.268 ops/s
# Warmup Iteration   7: 46565633.732 ops/s
# Warmup Iteration   8: 46408394.032 ops/s
# Warmup Iteration   9: 46538230.981 ops/s
# Warmup Iteration  10: 46476463.863 ops/s
# Warmup Iteration  11: 46459132.214 ops/s
# Warmup Iteration  12: 46549463.593 ops/s
# Warmup Iteration  13: 46633271.293 ops/s
# Warmup Iteration  14: 46543959.845 ops/s
# Warmup Iteration  15: 46595281.303 ops/s
# Warmup Iteration  16: 46536631.681 ops/s
# Warmup Iteration  17: 46417693.040 ops/s
# Warmup Iteration  18: 46403438.772 ops/s
# Warmup Iteration  19: 46401200.772 ops/s
# Warmup Iteration  20: 46417490.056 ops/s
# Warmup Iteration  21: 46458056.633 ops/s
# Warmup Iteration  22: 46388441.916 ops/s
# Warmup Iteration  23: 46456931.748 ops/s
# Warmup Iteration  24: 46391859.808 ops/s
# Warmup Iteration  25: 46387082.779 ops/s
# Warmup Iteration  26: 46473126.727 ops/s
# Warmup Iteration  27: 46413499.773 ops/s
# Warmup Iteration  28: 46487356.794 ops/s
# Warmup Iteration  29: 46376958.057 ops/s
# Warmup Iteration  30: 46381405.318 ops/s
Iteration   1: 46490390.428 ops/s
Iteration   2: 46443793.648 ops/s
Iteration   3: 46459362.796 ops/s
Iteration   4: 46358299.386 ops/s
Iteration   5: 46457961.268 ops/s
Iteration   6: 46438261.325 ops/s
Iteration   7: 46468576.609 ops/s
Iteration   8: 46318675.423 ops/s
Iteration   9: 46350835.636 ops/s
Iteration  10: 46432282.176 ops/s
Iteration  11: 46367943.133 ops/s
Iteration  12: 46493534.043 ops/s
Iteration  13: 46400583.651 ops/s
Iteration  14: 46387455.364 ops/s
Iteration  15: 46457506.347 ops/s
Iteration  16: 46494179.316 ops/s
Iteration  17: 46486836.548 ops/s
Iteration  18: 46140270.500 ops/s
Iteration  19: 46353484.319 ops/s
Iteration  20: 46439953.061 ops/s
Iteration  21: 46356750.559 ops/s
Iteration  22: 46468709.093 ops/s
Iteration  23: 46415153.993 ops/s
Iteration  24: 46595648.197 ops/s
Iteration  25: 46392782.227 ops/s
Iteration  26: 46445095.206 ops/s
Iteration  27: 46328702.225 ops/s
Iteration  28: 46323552.281 ops/s
Iteration  29: 46322790.707 ops/s
Iteration  30: 46506636.527 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_sumDouble":
  46413200.200 ±(99.9%) 56315.175 ops/s [Average]
  (min, avg, max) = (46140270.500, 46413200.200, 46595648.197), stdev = 84289.909
  CI (99.9%): [46356885.025, 46469515.374] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_sumDouble  thrpt   30  46413200.200 ± 56315.175  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_sumFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_sumFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 21385570.631 ops/s
# Warmup Iteration   2: 41924867.946 ops/s
# Warmup Iteration   3: 39866158.417 ops/s
# Warmup Iteration   4: 37535269.216 ops/s
# Warmup Iteration   5: 44738679.501 ops/s
# Warmup Iteration   6: 44790794.028 ops/s
# Warmup Iteration   7: 44470368.805 ops/s
# Warmup Iteration   8: 44686426.608 ops/s
# Warmup Iteration   9: 44725979.138 ops/s
# Warmup Iteration  10: 44748002.082 ops/s
# Warmup Iteration  11: 44827796.215 ops/s
# Warmup Iteration  12: 44779509.812 ops/s
# Warmup Iteration  13: 44731273.456 ops/s
# Warmup Iteration  14: 44704074.789 ops/s
# Warmup Iteration  15: 44852491.351 ops/s
# Warmup Iteration  16: 44831506.537 ops/s
# Warmup Iteration  17: 44716795.202 ops/s
# Warmup Iteration  18: 44806125.770 ops/s
# Warmup Iteration  19: 44695942.453 ops/s
# Warmup Iteration  20: 44774823.355 ops/s
# Warmup Iteration  21: 44676188.345 ops/s
# Warmup Iteration  22: 44752688.667 ops/s
# Warmup Iteration  23: 44770476.001 ops/s
# Warmup Iteration  24: 44642711.146 ops/s
# Warmup Iteration  25: 44708347.274 ops/s
# Warmup Iteration  26: 44821803.228 ops/s
# Warmup Iteration  27: 44810539.733 ops/s
# Warmup Iteration  28: 44799363.044 ops/s
# Warmup Iteration  29: 44750547.289 ops/s
# Warmup Iteration  30: 44841124.306 ops/s
Iteration   1: 44822659.872 ops/s
Iteration   2: 44868313.134 ops/s
Iteration   3: 44689989.393 ops/s
Iteration   4: 44705831.076 ops/s
Iteration   5: 44815309.235 ops/s
Iteration   6: 44809726.948 ops/s
Iteration   7: 44697650.561 ops/s
Iteration   8: 44814192.690 ops/s
Iteration   9: 44790252.316 ops/s
Iteration  10: 44884064.202 ops/s
Iteration  11: 44749163.911 ops/s
Iteration  12: 44695423.266 ops/s
Iteration  13: 44533296.716 ops/s
Iteration  14: 44580698.571 ops/s
Iteration  15: 44613873.931 ops/s
Iteration  16: 44793389.712 ops/s
Iteration  17: 44724715.790 ops/s
Iteration  18: 44902414.212 ops/s
Iteration  19: 44850376.973 ops/s
Iteration  20: 44706246.267 ops/s
Iteration  21: 44722264.128 ops/s
Iteration  22: 44685528.252 ops/s
Iteration  23: 44744328.260 ops/s
Iteration  24: 44822662.240 ops/s
Iteration  25: 44832548.442 ops/s
Iteration  26: 44736663.943 ops/s
Iteration  27: 44509109.971 ops/s
Iteration  28: 44787169.209 ops/s
Iteration  29: 44511604.380 ops/s
Iteration  30: 44849051.826 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_sumFloat":
  44741617.314 ±(99.9%) 71825.956 ops/s [Average]
  (min, avg, max) = (44509109.971, 44741617.314, 44902414.212), stdev = 107505.717
  CI (99.9%): [44669791.358, 44813443.270] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score       Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_sumFloat  thrpt   30  44741617.314 ± 71825.956  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_sumInteger$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_sumInteger

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 24933119.804 ops/s
# Warmup Iteration   2: 50756950.791 ops/s
# Warmup Iteration   3: 44995647.137 ops/s
# Warmup Iteration   4: 49185192.345 ops/s
# Warmup Iteration   5: 51870412.284 ops/s
# Warmup Iteration   6: 51904631.898 ops/s
# Warmup Iteration   7: 51900996.330 ops/s
# Warmup Iteration   8: 51925043.268 ops/s
# Warmup Iteration   9: 51742854.847 ops/s
# Warmup Iteration  10: 51717056.628 ops/s
# Warmup Iteration  11: 51955160.986 ops/s
# Warmup Iteration  12: 51670021.890 ops/s
# Warmup Iteration  13: 51702307.668 ops/s
# Warmup Iteration  14: 51944931.369 ops/s
# Warmup Iteration  15: 51866222.531 ops/s
# Warmup Iteration  16: 51764274.149 ops/s
# Warmup Iteration  17: 51807755.768 ops/s
# Warmup Iteration  18: 51821366.325 ops/s
# Warmup Iteration  19: 51879614.823 ops/s
# Warmup Iteration  20: 51773159.291 ops/s
# Warmup Iteration  21: 51825124.531 ops/s
# Warmup Iteration  22: 51904406.462 ops/s
# Warmup Iteration  23: 51743427.280 ops/s
# Warmup Iteration  24: 51782260.423 ops/s
# Warmup Iteration  25: 51870566.003 ops/s
# Warmup Iteration  26: 51796110.716 ops/s
# Warmup Iteration  27: 51798528.070 ops/s
# Warmup Iteration  28: 51857165.716 ops/s
# Warmup Iteration  29: 51734331.038 ops/s
# Warmup Iteration  30: 51706564.902 ops/s
Iteration   1: 51986285.885 ops/s
Iteration   2: 51935573.814 ops/s
Iteration   3: 51920748.363 ops/s
Iteration   4: 51792813.337 ops/s
Iteration   5: 51880811.288 ops/s
Iteration   6: 51796937.946 ops/s
Iteration   7: 51784546.829 ops/s
Iteration   8: 51896601.709 ops/s
Iteration   9: 51969489.422 ops/s
Iteration  10: 51780234.341 ops/s
Iteration  11: 51954099.915 ops/s
Iteration  12: 51842395.782 ops/s
Iteration  13: 51893157.764 ops/s
Iteration  14: 51955382.881 ops/s
Iteration  15: 51873472.867 ops/s
Iteration  16: 51775800.415 ops/s
Iteration  17: 51932012.030 ops/s
Iteration  18: 52023870.871 ops/s
Iteration  19: 51836564.596 ops/s
Iteration  20: 51822599.467 ops/s
Iteration  21: 51877922.016 ops/s
Iteration  22: 51678722.070 ops/s
Iteration  23: 51820658.338 ops/s
Iteration  24: 51833481.098 ops/s
Iteration  25: 51842772.666 ops/s
Iteration  26: 49803648.158 ops/s
Iteration  27: 51841099.697 ops/s
Iteration  28: 51904659.481 ops/s
Iteration  29: 50361137.118 ops/s
Iteration  30: 51748888.025 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_sumInteger":
  51745546.273 ±(99.9%) 310235.305 ops/s [Average]
  (min, avg, max) = (49803648.158, 51745546.273, 52023870.871), stdev = 464345.635
  CI (99.9%): [51435310.968, 52055781.578] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score        Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_sumInteger  thrpt   30  51745546.273 ± 310235.305  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_sumLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_sumLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 24395527.717 ops/s
# Warmup Iteration   2: 50140488.920 ops/s
# Warmup Iteration   3: 46511474.500 ops/s
# Warmup Iteration   4: 50699160.757 ops/s
# Warmup Iteration   5: 52482926.043 ops/s
# Warmup Iteration   6: 52606246.597 ops/s
# Warmup Iteration   7: 52678105.366 ops/s
# Warmup Iteration   8: 52537547.809 ops/s
# Warmup Iteration   9: 52674191.793 ops/s
# Warmup Iteration  10: 52625698.459 ops/s
# Warmup Iteration  11: 52519913.199 ops/s
# Warmup Iteration  12: 52605264.255 ops/s
# Warmup Iteration  13: 52688637.039 ops/s
# Warmup Iteration  14: 52658540.108 ops/s
# Warmup Iteration  15: 52660486.620 ops/s
# Warmup Iteration  16: 52553178.041 ops/s
# Warmup Iteration  17: 52671000.065 ops/s
# Warmup Iteration  18: 52768436.912 ops/s
# Warmup Iteration  19: 52715882.171 ops/s
# Warmup Iteration  20: 52635367.759 ops/s
# Warmup Iteration  21: 52736358.776 ops/s
# Warmup Iteration  22: 52801108.410 ops/s
# Warmup Iteration  23: 52644379.979 ops/s
# Warmup Iteration  24: 52816833.125 ops/s
# Warmup Iteration  25: 52597470.618 ops/s
# Warmup Iteration  26: 52723860.778 ops/s
# Warmup Iteration  27: 52734086.828 ops/s
# Warmup Iteration  28: 52679805.101 ops/s
# Warmup Iteration  29: 52595332.232 ops/s
# Warmup Iteration  30: 52651820.273 ops/s
Iteration   1: 52800691.871 ops/s
Iteration   2: 52695270.194 ops/s
Iteration   3: 52570908.415 ops/s
Iteration   4: 52892202.252 ops/s
Iteration   5: 52841884.973 ops/s
Iteration   6: 52664199.097 ops/s
Iteration   7: 52545205.902 ops/s
Iteration   8: 52779165.012 ops/s
Iteration   9: 52432287.830 ops/s
Iteration  10: 52550993.371 ops/s
Iteration  11: 52716336.292 ops/s
Iteration  12: 52591826.173 ops/s
Iteration  13: 52720066.402 ops/s
Iteration  14: 52703325.949 ops/s
Iteration  15: 52653917.964 ops/s
Iteration  16: 52674800.430 ops/s
Iteration  17: 52785047.704 ops/s
Iteration  18: 52729667.676 ops/s
Iteration  19: 52654116.598 ops/s
Iteration  20: 52764776.586 ops/s
Iteration  21: 52817023.992 ops/s
Iteration  22: 52643930.550 ops/s
Iteration  23: 52678369.169 ops/s
Iteration  24: 52636726.648 ops/s
Iteration  25: 52711489.062 ops/s
Iteration  26: 52640391.334 ops/s
Iteration  27: 52563949.604 ops/s
Iteration  28: 52607303.364 ops/s
Iteration  29: 52798169.392 ops/s
Iteration  30: 52672834.107 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_sumLong":
  52684562.597 ±(99.9%) 67288.806 ops/s [Average]
  (min, avg, max) = (52432287.830, 52684562.597, 52892202.252), stdev = 100714.725
  CI (99.9%): [52617273.791, 52751851.403] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_sumLong  thrpt   30  52684562.597 ± 67288.806  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_take$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_take

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3256643.807 ops/s
# Warmup Iteration   2: 6892512.340 ops/s
# Warmup Iteration   3: 7198112.756 ops/s
# Warmup Iteration   4: 7238876.976 ops/s
# Warmup Iteration   5: 5997101.635 ops/s
# Warmup Iteration   6: 7241132.755 ops/s
# Warmup Iteration   7: 7248442.046 ops/s
# Warmup Iteration   8: 7247570.587 ops/s
# Warmup Iteration   9: 7254204.154 ops/s
# Warmup Iteration  10: 7236883.065 ops/s
# Warmup Iteration  11: 7250147.667 ops/s
# Warmup Iteration  12: 7251743.131 ops/s
# Warmup Iteration  13: 7248575.504 ops/s
# Warmup Iteration  14: 7245494.756 ops/s
# Warmup Iteration  15: 7249775.196 ops/s
# Warmup Iteration  16: 7230525.189 ops/s
# Warmup Iteration  17: 7249291.640 ops/s
# Warmup Iteration  18: 7248156.476 ops/s
# Warmup Iteration  19: 7247753.549 ops/s
# Warmup Iteration  20: 7242941.052 ops/s
# Warmup Iteration  21: 7251219.380 ops/s
# Warmup Iteration  22: 7243237.257 ops/s
# Warmup Iteration  23: 7254799.648 ops/s
# Warmup Iteration  24: 7249799.698 ops/s
# Warmup Iteration  25: 7251183.167 ops/s
# Warmup Iteration  26: 7246759.670 ops/s
# Warmup Iteration  27: 7249986.796 ops/s
# Warmup Iteration  28: 7238707.505 ops/s
# Warmup Iteration  29: 7249999.176 ops/s
# Warmup Iteration  30: 7242533.195 ops/s
Iteration   1: 7236740.555 ops/s
Iteration   2: 7254034.827 ops/s
Iteration   3: 7233766.660 ops/s
Iteration   4: 7230331.124 ops/s
Iteration   5: 7250130.450 ops/s
Iteration   6: 7221056.548 ops/s
Iteration   7: 7206306.142 ops/s
Iteration   8: 7234510.190 ops/s
Iteration   9: 7246894.873 ops/s
Iteration  10: 7254832.274 ops/s
Iteration  11: 7242718.109 ops/s
Iteration  12: 7246297.344 ops/s
Iteration  13: 7250218.165 ops/s
Iteration  14: 7260331.378 ops/s
Iteration  15: 7247599.889 ops/s
Iteration  16: 7241004.390 ops/s
Iteration  17: 7246656.878 ops/s
Iteration  18: 7258364.402 ops/s
Iteration  19: 7257756.795 ops/s
Iteration  20: 7244456.172 ops/s
Iteration  21: 7239916.911 ops/s
Iteration  22: 7243039.961 ops/s
Iteration  23: 7239212.493 ops/s
Iteration  24: 7247391.765 ops/s
Iteration  25: 7241297.680 ops/s
Iteration  26: 7242288.333 ops/s
Iteration  27: 7242809.244 ops/s
Iteration  28: 7252332.844 ops/s
Iteration  29: 7202545.176 ops/s
Iteration  30: 7251114.146 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_take":
  7242198.524 ±(99.9%) 8935.716 ops/s [Average]
  (min, avg, max) = (7202545.176, 7242198.524, 7260331.378), stdev = 13374.560
  CI (99.9%): [7233262.808, 7251134.240] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_take  thrpt   30  7242198.524 ± 8935.716  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_takeWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_takeWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7594782.941 ops/s
# Warmup Iteration   2: 14771578.607 ops/s
# Warmup Iteration   3: 15103420.792 ops/s
# Warmup Iteration   4: 15187178.926 ops/s
# Warmup Iteration   5: 12797585.357 ops/s
# Warmup Iteration   6: 15226029.684 ops/s
# Warmup Iteration   7: 15218358.616 ops/s
# Warmup Iteration   8: 15215798.547 ops/s
# Warmup Iteration   9: 15229088.634 ops/s
# Warmup Iteration  10: 15210033.449 ops/s
# Warmup Iteration  11: 15211807.388 ops/s
# Warmup Iteration  12: 15182992.517 ops/s
# Warmup Iteration  13: 15204973.626 ops/s
# Warmup Iteration  14: 15218241.293 ops/s
# Warmup Iteration  15: 15207545.311 ops/s
# Warmup Iteration  16: 15229535.238 ops/s
# Warmup Iteration  17: 15213227.940 ops/s
# Warmup Iteration  18: 15217199.917 ops/s
# Warmup Iteration  19: 15213722.981 ops/s
# Warmup Iteration  20: 15213708.850 ops/s
# Warmup Iteration  21: 15216386.466 ops/s
# Warmup Iteration  22: 15213716.022 ops/s
# Warmup Iteration  23: 15224306.409 ops/s
# Warmup Iteration  24: 15215121.994 ops/s
# Warmup Iteration  25: 15238741.089 ops/s
# Warmup Iteration  26: 15223894.660 ops/s
# Warmup Iteration  27: 15217658.102 ops/s
# Warmup Iteration  28: 15225834.293 ops/s
# Warmup Iteration  29: 15136328.104 ops/s
# Warmup Iteration  30: 15149953.358 ops/s
Iteration   1: 15119076.934 ops/s
Iteration   2: 15238991.144 ops/s
Iteration   3: 15195256.678 ops/s
Iteration   4: 15232444.528 ops/s
Iteration   5: 15248578.874 ops/s
Iteration   6: 15203300.584 ops/s
Iteration   7: 15162446.695 ops/s
Iteration   8: 15249441.639 ops/s
Iteration   9: 15190231.691 ops/s
Iteration  10: 15176372.368 ops/s
Iteration  11: 15213475.557 ops/s
Iteration  12: 15236046.959 ops/s
Iteration  13: 15212020.913 ops/s
Iteration  14: 15221893.559 ops/s
Iteration  15: 15256262.584 ops/s
Iteration  16: 15212804.485 ops/s
Iteration  17: 15207448.966 ops/s
Iteration  18: 15247547.217 ops/s
Iteration  19: 15234049.574 ops/s
Iteration  20: 15201125.556 ops/s
Iteration  21: 15245336.228 ops/s
Iteration  22: 15219654.401 ops/s
Iteration  23: 15239824.396 ops/s
Iteration  24: 15236676.727 ops/s
Iteration  25: 15212970.248 ops/s
Iteration  26: 15220561.904 ops/s
Iteration  27: 15245739.007 ops/s
Iteration  28: 15194497.222 ops/s
Iteration  29: 15225582.100 ops/s
Iteration  30: 15246861.798 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_takeWhile":
  15218217.351 ±(99.9%) 19972.156 ops/s [Average]
  (min, avg, max) = (15119076.934, 15218217.351, 15256262.584), stdev = 29893.385
  CI (99.9%): [15198245.195, 15238189.507] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_takeWhile  thrpt   30  15218217.351 ± 19972.156  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_take_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_take_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 749707.025 ops/s
# Warmup Iteration   2: 772033.094 ops/s
# Warmup Iteration   3: 997388.347 ops/s
# Warmup Iteration   4: 999905.573 ops/s
# Warmup Iteration   5: 1000487.111 ops/s
# Warmup Iteration   6: 994299.293 ops/s
# Warmup Iteration   7: 1001782.531 ops/s
# Warmup Iteration   8: 1009042.560 ops/s
# Warmup Iteration   9: 1000218.741 ops/s
# Warmup Iteration  10: 999821.896 ops/s
# Warmup Iteration  11: 1008918.492 ops/s
# Warmup Iteration  12: 854690.339 ops/s
# Warmup Iteration  13: 1001075.610 ops/s
# Warmup Iteration  14: 999002.022 ops/s
# Warmup Iteration  15: 999155.768 ops/s
# Warmup Iteration  16: 999174.333 ops/s
# Warmup Iteration  17: 1053663.033 ops/s
# Warmup Iteration  18: 1058318.101 ops/s
# Warmup Iteration  19: 1054201.902 ops/s
# Warmup Iteration  20: 1057822.345 ops/s
# Warmup Iteration  21: 1058502.395 ops/s
# Warmup Iteration  22: 1056093.736 ops/s
# Warmup Iteration  23: 1058269.456 ops/s
# Warmup Iteration  24: 1055760.718 ops/s
# Warmup Iteration  25: 1059362.608 ops/s
# Warmup Iteration  26: 1056039.233 ops/s
# Warmup Iteration  27: 1060012.411 ops/s
# Warmup Iteration  28: 1058738.439 ops/s
# Warmup Iteration  29: 1054977.374 ops/s
# Warmup Iteration  30: 1057368.229 ops/s
Iteration   1: 1059251.375 ops/s
Iteration   2: 1056360.643 ops/s
Iteration   3: 1057678.319 ops/s
Iteration   4: 1054459.557 ops/s
Iteration   5: 1059823.024 ops/s
Iteration   6: 1059414.777 ops/s
Iteration   7: 1058589.073 ops/s
Iteration   8: 1056924.030 ops/s
Iteration   9: 1057679.425 ops/s
Iteration  10: 1058466.544 ops/s
Iteration  11: 1057823.839 ops/s
Iteration  12: 1053426.513 ops/s
Iteration  13: 1058752.379 ops/s
Iteration  14: 1058938.729 ops/s
Iteration  15: 1057284.222 ops/s
Iteration  16: 1055018.364 ops/s
Iteration  17: 1059345.900 ops/s
Iteration  18: 1055541.704 ops/s
Iteration  19: 1058047.181 ops/s
Iteration  20: 1054746.770 ops/s
Iteration  21: 1058941.164 ops/s
Iteration  22: 1059480.150 ops/s
Iteration  23: 1054764.094 ops/s
Iteration  24: 1053839.925 ops/s
Iteration  25: 1055325.528 ops/s
Iteration  26: 1058743.860 ops/s
Iteration  27: 1054625.670 ops/s
Iteration  28: 1058186.125 ops/s
Iteration  29: 1058355.419 ops/s
Iteration  30: 1060762.075 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_take_throws":
  1057353.213 ±(99.9%) 1356.041 ops/s [Average]
  (min, avg, max) = (1053426.513, 1057353.213, 1060762.075), stdev = 2029.659
  CI (99.9%): [1055997.171, 1058709.254] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_take_throws  thrpt   30  1057353.213 ± 1356.041  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_tap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_tap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9841911.770 ops/s
# Warmup Iteration   2: 19945461.435 ops/s
# Warmup Iteration   3: 16671139.640 ops/s
# Warmup Iteration   4: 19644698.535 ops/s
# Warmup Iteration   5: 19654733.746 ops/s
# Warmup Iteration   6: 19641307.351 ops/s
# Warmup Iteration   7: 19642197.634 ops/s
# Warmup Iteration   8: 19644870.889 ops/s
# Warmup Iteration   9: 19625915.827 ops/s
# Warmup Iteration  10: 19632458.201 ops/s
# Warmup Iteration  11: 19653248.954 ops/s
# Warmup Iteration  12: 19651121.285 ops/s
# Warmup Iteration  13: 19665229.049 ops/s
# Warmup Iteration  14: 19648941.046 ops/s
# Warmup Iteration  15: 19649109.884 ops/s
# Warmup Iteration  16: 19632644.133 ops/s
# Warmup Iteration  17: 19680924.748 ops/s
# Warmup Iteration  18: 19692315.380 ops/s
# Warmup Iteration  19: 19674045.375 ops/s
# Warmup Iteration  20: 19647701.436 ops/s
# Warmup Iteration  21: 19626122.575 ops/s
# Warmup Iteration  22: 19698540.630 ops/s
# Warmup Iteration  23: 19661887.319 ops/s
# Warmup Iteration  24: 19693294.622 ops/s
# Warmup Iteration  25: 19660212.367 ops/s
# Warmup Iteration  26: 19627956.583 ops/s
# Warmup Iteration  27: 19651313.611 ops/s
# Warmup Iteration  28: 19693653.279 ops/s
# Warmup Iteration  29: 19652548.211 ops/s
# Warmup Iteration  30: 19649375.326 ops/s
Iteration   1: 19634147.393 ops/s
Iteration   2: 19634314.583 ops/s
Iteration   3: 19662340.926 ops/s
Iteration   4: 19683510.287 ops/s
Iteration   5: 19696012.656 ops/s
Iteration   6: 19710701.178 ops/s
Iteration   7: 19714691.978 ops/s
Iteration   8: 19631258.614 ops/s
Iteration   9: 19715256.996 ops/s
Iteration  10: 19684048.634 ops/s
Iteration  11: 19623253.651 ops/s
Iteration  12: 19698251.158 ops/s
Iteration  13: 19539447.917 ops/s
Iteration  14: 19661840.437 ops/s
Iteration  15: 19663478.959 ops/s
Iteration  16: 19585402.991 ops/s
Iteration  17: 19699885.452 ops/s
Iteration  18: 19678939.519 ops/s
Iteration  19: 19694172.738 ops/s
Iteration  20: 19665456.083 ops/s
Iteration  21: 19685919.568 ops/s
Iteration  22: 19715926.440 ops/s
Iteration  23: 19637160.395 ops/s
Iteration  24: 19684682.976 ops/s
Iteration  25: 19723982.818 ops/s
Iteration  26: 19007172.857 ops/s
Iteration  27: 19704015.161 ops/s
Iteration  28: 19719895.509 ops/s
Iteration  29: 19698063.142 ops/s
Iteration  30: 19668626.732 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_tap":
  19650728.592 ±(99.9%) 85861.284 ops/s [Average]
  (min, avg, max) = (19007172.857, 19650728.592, 19723982.818), stdev = 128513.137
  CI (99.9%): [19564867.308, 19736589.875] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt         Score       Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_tap  thrpt   30  19650728.592 ± 85861.284  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1987902.300 ops/s
# Warmup Iteration   2: 4299227.719 ops/s
# Warmup Iteration   3: 4413972.468 ops/s
# Warmup Iteration   4: 3743722.062 ops/s
# Warmup Iteration   5: 4470638.579 ops/s
# Warmup Iteration   6: 4461812.630 ops/s
# Warmup Iteration   7: 4471510.717 ops/s
# Warmup Iteration   8: 4465312.553 ops/s
# Warmup Iteration   9: 4460944.806 ops/s
# Warmup Iteration  10: 4470583.013 ops/s
# Warmup Iteration  11: 4460454.806 ops/s
# Warmup Iteration  12: 4453116.107 ops/s
# Warmup Iteration  13: 4468499.347 ops/s
# Warmup Iteration  14: 4467525.232 ops/s
# Warmup Iteration  15: 4463210.530 ops/s
# Warmup Iteration  16: 4466696.662 ops/s
# Warmup Iteration  17: 4457589.316 ops/s
# Warmup Iteration  18: 4461324.985 ops/s
# Warmup Iteration  19: 4461209.391 ops/s
# Warmup Iteration  20: 4458417.129 ops/s
# Warmup Iteration  21: 4458548.307 ops/s
# Warmup Iteration  22: 4445709.572 ops/s
# Warmup Iteration  23: 4454110.610 ops/s
# Warmup Iteration  24: 4447333.075 ops/s
# Warmup Iteration  25: 4437720.971 ops/s
# Warmup Iteration  26: 4453569.913 ops/s
# Warmup Iteration  27: 4468627.485 ops/s
# Warmup Iteration  28: 4463197.784 ops/s
# Warmup Iteration  29: 4467293.062 ops/s
# Warmup Iteration  30: 4463953.880 ops/s
Iteration   1: 4467013.920 ops/s
Iteration   2: 4460675.299 ops/s
Iteration   3: 4459922.330 ops/s
Iteration   4: 4464950.024 ops/s
Iteration   5: 4459213.670 ops/s
Iteration   6: 4470772.839 ops/s
Iteration   7: 4461822.227 ops/s
Iteration   8: 4441491.483 ops/s
Iteration   9: 4464743.528 ops/s
Iteration  10: 4466655.279 ops/s
Iteration  11: 4461626.913 ops/s
Iteration  12: 4457031.542 ops/s
Iteration  13: 4458818.294 ops/s
Iteration  14: 4454358.541 ops/s
Iteration  15: 4452775.256 ops/s
Iteration  16: 4467945.556 ops/s
Iteration  17: 4473296.938 ops/s
Iteration  18: 4467143.751 ops/s
Iteration  19: 4468009.463 ops/s
Iteration  20: 4450609.883 ops/s
Iteration  21: 4460274.876 ops/s
Iteration  22: 4460271.450 ops/s
Iteration  23: 4458647.782 ops/s
Iteration  24: 4461155.856 ops/s
Iteration  25: 4451799.035 ops/s
Iteration  26: 4473905.703 ops/s
Iteration  27: 4469234.384 ops/s
Iteration  28: 4426207.502 ops/s
Iteration  29: 4461578.955 ops/s
Iteration  30: 4461342.875 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_testToString":
  4460443.172 ±(99.9%) 6366.430 ops/s [Average]
  (min, avg, max) = (4426207.502, 4460443.172, 4473905.703), stdev = 9528.973
  CI (99.9%): [4454076.742, 4466809.601] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_testToString  thrpt   30  4460443.172 ± 6366.430  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8591552.718 ops/s
# Warmup Iteration   2: 17498204.972 ops/s
# Warmup Iteration   3: 15171384.816 ops/s
# Warmup Iteration   4: 17792500.260 ops/s
# Warmup Iteration   5: 17809938.030 ops/s
# Warmup Iteration   6: 17875483.771 ops/s
# Warmup Iteration   7: 17869724.085 ops/s
# Warmup Iteration   8: 17873053.164 ops/s
# Warmup Iteration   9: 17815666.948 ops/s
# Warmup Iteration  10: 17679725.012 ops/s
# Warmup Iteration  11: 17834519.821 ops/s
# Warmup Iteration  12: 17855960.261 ops/s
# Warmup Iteration  13: 17793791.681 ops/s
# Warmup Iteration  14: 17799896.475 ops/s
# Warmup Iteration  15: 17816442.365 ops/s
# Warmup Iteration  16: 17850944.005 ops/s
# Warmup Iteration  17: 17848258.536 ops/s
# Warmup Iteration  18: 17811509.307 ops/s
# Warmup Iteration  19: 17857654.680 ops/s
# Warmup Iteration  20: 17852129.104 ops/s
# Warmup Iteration  21: 17842275.157 ops/s
# Warmup Iteration  22: 17789818.313 ops/s
# Warmup Iteration  23: 17822174.124 ops/s
# Warmup Iteration  24: 17871655.145 ops/s
# Warmup Iteration  25: 17831071.949 ops/s
# Warmup Iteration  26: 17896357.372 ops/s
# Warmup Iteration  27: 17878647.194 ops/s
# Warmup Iteration  28: 17816187.005 ops/s
# Warmup Iteration  29: 17905729.499 ops/s
# Warmup Iteration  30: 17898654.820 ops/s
Iteration   1: 17874713.186 ops/s
Iteration   2: 17828120.532 ops/s
Iteration   3: 17917769.171 ops/s
Iteration   4: 17876909.695 ops/s
Iteration   5: 17855262.466 ops/s
Iteration   6: 17869745.698 ops/s
Iteration   7: 17859745.980 ops/s
Iteration   8: 17876720.430 ops/s
Iteration   9: 17911569.816 ops/s
Iteration  10: 17926581.455 ops/s
Iteration  11: 17952030.719 ops/s
Iteration  12: 17859501.123 ops/s
Iteration  13: 17757779.072 ops/s
Iteration  14: 17860029.629 ops/s
Iteration  15: 17787916.460 ops/s
Iteration  16: 17827546.384 ops/s
Iteration  17: 17787212.229 ops/s
Iteration  18: 17656945.700 ops/s
Iteration  19: 17881789.197 ops/s
Iteration  20: 17839039.150 ops/s
Iteration  21: 17830203.185 ops/s
Iteration  22: 17737747.907 ops/s
Iteration  23: 17798592.593 ops/s
Iteration  24: 17835095.577 ops/s
Iteration  25: 17821743.081 ops/s
Iteration  26: 17870014.180 ops/s
Iteration  27: 17862905.466 ops/s
Iteration  28: 17849344.830 ops/s
Iteration  29: 17760417.554 ops/s
Iteration  30: 17791794.109 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_toArray":
  17838826.219 ±(99.9%) 40769.487 ops/s [Average]
  (min, avg, max) = (17656945.700, 17838826.219, 17952030.719), stdev = 61021.853
  CI (99.9%): [17798056.732, 17879595.706] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_toArray  thrpt   30  17838826.219 ± 40769.487  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_toImmutable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_toImmutable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 165973787.556 ops/s
# Warmup Iteration   2: 301604214.721 ops/s
# Warmup Iteration   3: 276352873.908 ops/s
# Warmup Iteration   4: 313432530.495 ops/s
# Warmup Iteration   5: 311565953.434 ops/s
# Warmup Iteration   6: 312030419.518 ops/s
# Warmup Iteration   7: 312108865.264 ops/s
# Warmup Iteration   8: 311866613.086 ops/s
# Warmup Iteration   9: 311889172.129 ops/s
# Warmup Iteration  10: 311841454.848 ops/s
# Warmup Iteration  11: 313005798.319 ops/s
# Warmup Iteration  12: 312470338.982 ops/s
# Warmup Iteration  13: 311403738.953 ops/s
# Warmup Iteration  14: 313049902.642 ops/s
# Warmup Iteration  15: 311966786.998 ops/s
# Warmup Iteration  16: 313621537.013 ops/s
# Warmup Iteration  17: 311561638.291 ops/s
# Warmup Iteration  18: 311781444.412 ops/s
# Warmup Iteration  19: 314054287.048 ops/s
# Warmup Iteration  20: 312502289.378 ops/s
# Warmup Iteration  21: 311980129.176 ops/s
# Warmup Iteration  22: 311259230.563 ops/s
# Warmup Iteration  23: 311478354.851 ops/s
# Warmup Iteration  24: 311746957.521 ops/s
# Warmup Iteration  25: 312944278.487 ops/s
# Warmup Iteration  26: 312685987.123 ops/s
# Warmup Iteration  27: 312439320.645 ops/s
# Warmup Iteration  28: 312527021.687 ops/s
# Warmup Iteration  29: 311228582.707 ops/s
# Warmup Iteration  30: 312062497.203 ops/s
Iteration   1: 311803743.020 ops/s
Iteration   2: 312020893.677 ops/s
Iteration   3: 311497122.652 ops/s
Iteration   4: 311084374.878 ops/s
Iteration   5: 312703663.255 ops/s
Iteration   6: 313267873.796 ops/s
Iteration   7: 313498189.677 ops/s
Iteration   8: 312903542.275 ops/s
Iteration   9: 313609521.772 ops/s
Iteration  10: 312392859.090 ops/s
Iteration  11: 312880276.910 ops/s
Iteration  12: 311906628.900 ops/s
Iteration  13: 311992140.709 ops/s
Iteration  14: 310670489.354 ops/s
Iteration  15: 312329857.116 ops/s
Iteration  16: 312973068.962 ops/s
Iteration  17: 311167099.084 ops/s
Iteration  18: 311829597.444 ops/s
Iteration  19: 311465772.293 ops/s
Iteration  20: 312075154.923 ops/s
Iteration  21: 311698876.396 ops/s
Iteration  22: 312956136.932 ops/s
Iteration  23: 312761493.373 ops/s
Iteration  24: 312751591.237 ops/s
Iteration  25: 312933605.632 ops/s
Iteration  26: 312487174.321 ops/s
Iteration  27: 311821349.074 ops/s
Iteration  28: 312963070.008 ops/s
Iteration  29: 313586546.264 ops/s
Iteration  30: 312979842.742 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_toImmutable":
  312367051.859 ±(99.9%) 516220.802 ops/s [Average]
  (min, avg, max) = (310670489.354, 312367051.859, 313609521.772), stdev = 772655.052
  CI (99.9%): [311850831.057, 312883272.661] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt          Score        Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_toImmutable  thrpt   30  312367051.859 ± 516220.802  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4159576.813 ops/s
# Warmup Iteration   2: 8613137.023 ops/s
# Warmup Iteration   3: 7393280.835 ops/s
# Warmup Iteration   4: 8656699.859 ops/s
# Warmup Iteration   5: 8669890.719 ops/s
# Warmup Iteration   6: 8659499.325 ops/s
# Warmup Iteration   7: 8651418.507 ops/s
# Warmup Iteration   8: 8644719.965 ops/s
# Warmup Iteration   9: 8648201.818 ops/s
# Warmup Iteration  10: 8649690.931 ops/s
# Warmup Iteration  11: 8663213.374 ops/s
# Warmup Iteration  12: 8630475.531 ops/s
# Warmup Iteration  13: 8644962.463 ops/s
# Warmup Iteration  14: 8675195.143 ops/s
# Warmup Iteration  15: 8662581.624 ops/s
# Warmup Iteration  16: 8659119.871 ops/s
# Warmup Iteration  17: 8644309.180 ops/s
# Warmup Iteration  18: 8612151.990 ops/s
# Warmup Iteration  19: 8625853.800 ops/s
# Warmup Iteration  20: 8637679.452 ops/s
# Warmup Iteration  21: 8593657.420 ops/s
# Warmup Iteration  22: 8613413.592 ops/s
# Warmup Iteration  23: 8629321.591 ops/s
# Warmup Iteration  24: 8642219.307 ops/s
# Warmup Iteration  25: 8645312.582 ops/s
# Warmup Iteration  26: 8637131.105 ops/s
# Warmup Iteration  27: 8648227.274 ops/s
# Warmup Iteration  28: 8633733.977 ops/s
# Warmup Iteration  29: 8655097.213 ops/s
# Warmup Iteration  30: 8639076.152 ops/s
Iteration   1: 8639881.363 ops/s
Iteration   2: 8623698.921 ops/s
Iteration   3: 8646437.382 ops/s
Iteration   4: 8633882.226 ops/s
Iteration   5: 8654880.861 ops/s
Iteration   6: 8633229.957 ops/s
Iteration   7: 8654739.944 ops/s
Iteration   8: 8622177.167 ops/s
Iteration   9: 8634275.941 ops/s
Iteration  10: 8629183.376 ops/s
Iteration  11: 8644364.040 ops/s
Iteration  12: 8635231.383 ops/s
Iteration  13: 8648669.337 ops/s
Iteration  14: 8627627.674 ops/s
Iteration  15: 8614239.359 ops/s
Iteration  16: 8601980.260 ops/s
Iteration  17: 8615152.204 ops/s
Iteration  18: 8592043.148 ops/s
Iteration  19: 8641963.271 ops/s
Iteration  20: 8619877.428 ops/s
Iteration  21: 8642108.094 ops/s
Iteration  22: 8624401.142 ops/s
Iteration  23: 8648765.168 ops/s
Iteration  24: 8627529.126 ops/s
Iteration  25: 8620216.989 ops/s
Iteration  26: 8646592.650 ops/s
Iteration  27: 8610239.594 ops/s
Iteration  28: 8644758.385 ops/s
Iteration  29: 8612327.818 ops/s
Iteration  30: 8657015.403 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_toList":
  8631582.987 ±(99.9%) 10925.441 ops/s [Average]
  (min, avg, max) = (8592043.148, 8631582.987, 8657015.403), stdev = 16352.686
  CI (99.9%): [8620657.547, 8642508.428] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_toList  thrpt   30  8631582.987 ± 10925.441  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_toReversed$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_toReversed

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1934494.461 ops/s
# Warmup Iteration   2: 2317325.337 ops/s
# Warmup Iteration   3: 3025057.310 ops/s
# Warmup Iteration   4: 3025549.876 ops/s
# Warmup Iteration   5: 3021293.790 ops/s
# Warmup Iteration   6: 3021538.132 ops/s
# Warmup Iteration   7: 3025903.327 ops/s
# Warmup Iteration   8: 3028056.011 ops/s
# Warmup Iteration   9: 2689058.658 ops/s
# Warmup Iteration  10: 2825993.147 ops/s
# Warmup Iteration  11: 3025518.410 ops/s
# Warmup Iteration  12: 3027443.576 ops/s
# Warmup Iteration  13: 3028051.599 ops/s
# Warmup Iteration  14: 3028723.313 ops/s
# Warmup Iteration  15: 3030254.325 ops/s
# Warmup Iteration  16: 3027395.961 ops/s
# Warmup Iteration  17: 3013841.932 ops/s
# Warmup Iteration  18: 3014061.656 ops/s
# Warmup Iteration  19: 3013749.952 ops/s
# Warmup Iteration  20: 3016965.634 ops/s
# Warmup Iteration  21: 3015397.660 ops/s
# Warmup Iteration  22: 3018084.957 ops/s
# Warmup Iteration  23: 3017551.549 ops/s
# Warmup Iteration  24: 3014049.546 ops/s
# Warmup Iteration  25: 3016285.598 ops/s
# Warmup Iteration  26: 3008385.228 ops/s
# Warmup Iteration  27: 3016372.246 ops/s
# Warmup Iteration  28: 3015802.869 ops/s
# Warmup Iteration  29: 3015914.483 ops/s
# Warmup Iteration  30: 3015991.304 ops/s
Iteration   1: 3011337.116 ops/s
Iteration   2: 3009231.627 ops/s
Iteration   3: 3018165.890 ops/s
Iteration   4: 3018569.154 ops/s
Iteration   5: 3015723.099 ops/s
Iteration   6: 3013252.933 ops/s
Iteration   7: 3015610.294 ops/s
Iteration   8: 3012825.908 ops/s
Iteration   9: 3006061.029 ops/s
Iteration  10: 3010052.485 ops/s
Iteration  11: 3013947.177 ops/s
Iteration  12: 3023463.569 ops/s
Iteration  13: 3017010.090 ops/s
Iteration  14: 3007743.298 ops/s
Iteration  15: 3012796.318 ops/s
Iteration  16: 3016827.745 ops/s
Iteration  17: 3016012.604 ops/s
Iteration  18: 3016525.936 ops/s
Iteration  19: 3018438.850 ops/s
Iteration  20: 3016828.132 ops/s
Iteration  21: 3013868.455 ops/s
Iteration  22: 3015196.833 ops/s
Iteration  23: 3007537.387 ops/s
Iteration  24: 3015718.859 ops/s
Iteration  25: 3017462.086 ops/s
Iteration  26: 3013668.538 ops/s
Iteration  27: 3010327.456 ops/s
Iteration  28: 3013208.678 ops/s
Iteration  29: 3018256.492 ops/s
Iteration  30: 3011306.524 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_toReversed":
  3014232.485 ±(99.9%) 2589.510 ops/s [Average]
  (min, avg, max) = (3006061.029, 3014232.485, 3023463.569), stdev = 3875.857
  CI (99.9%): [3011642.975, 3016821.996] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_toReversed  thrpt   30  3014232.485 ± 2589.510  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_toSortedList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_toSortedList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3947931.373 ops/s
# Warmup Iteration   2: 8565614.349 ops/s
# Warmup Iteration   3: 8975788.411 ops/s
# Warmup Iteration   4: 8262713.833 ops/s
# Warmup Iteration   5: 8159072.079 ops/s
# Warmup Iteration   6: 8955675.585 ops/s
# Warmup Iteration   7: 8976628.087 ops/s
# Warmup Iteration   8: 8979065.798 ops/s
# Warmup Iteration   9: 8999104.703 ops/s
# Warmup Iteration  10: 8975281.257 ops/s
# Warmup Iteration  11: 8974660.164 ops/s
# Warmup Iteration  12: 8931078.344 ops/s
# Warmup Iteration  13: 8978280.925 ops/s
# Warmup Iteration  14: 8978283.216 ops/s
# Warmup Iteration  15: 8967835.036 ops/s
# Warmup Iteration  16: 8969342.350 ops/s
# Warmup Iteration  17: 8977174.393 ops/s
# Warmup Iteration  18: 8946843.972 ops/s
# Warmup Iteration  19: 8964716.157 ops/s
# Warmup Iteration  20: 8935485.045 ops/s
# Warmup Iteration  21: 8923638.357 ops/s
# Warmup Iteration  22: 8985199.664 ops/s
# Warmup Iteration  23: 8972849.202 ops/s
# Warmup Iteration  24: 8944832.874 ops/s
# Warmup Iteration  25: 8974863.320 ops/s
# Warmup Iteration  26: 8979498.175 ops/s
# Warmup Iteration  27: 8983607.412 ops/s
# Warmup Iteration  28: 8968507.086 ops/s
# Warmup Iteration  29: 8978505.473 ops/s
# Warmup Iteration  30: 8968792.676 ops/s
Iteration   1: 8975305.510 ops/s
Iteration   2: 8929318.777 ops/s
Iteration   3: 8977431.717 ops/s
Iteration   4: 8978601.872 ops/s
Iteration   5: 8979209.313 ops/s
Iteration   6: 8945006.101 ops/s
Iteration   7: 8921835.560 ops/s
Iteration   8: 8946152.728 ops/s
Iteration   9: 8965786.142 ops/s
Iteration  10: 8958350.567 ops/s
Iteration  11: 8963979.634 ops/s
Iteration  12: 9001587.528 ops/s
Iteration  13: 8988260.483 ops/s
Iteration  14: 8881068.378 ops/s
Iteration  15: 8945196.838 ops/s
Iteration  16: 8955567.855 ops/s
Iteration  17: 8959815.010 ops/s
Iteration  18: 8987837.628 ops/s
Iteration  19: 8965932.889 ops/s
Iteration  20: 8967104.701 ops/s
Iteration  21: 8996716.761 ops/s
Iteration  22: 8974582.926 ops/s
Iteration  23: 8973392.985 ops/s
Iteration  24: 8979644.752 ops/s
Iteration  25: 8964056.763 ops/s
Iteration  26: 8967121.482 ops/s
Iteration  27: 8969229.423 ops/s
Iteration  28: 8956983.427 ops/s
Iteration  29: 8976936.198 ops/s
Iteration  30: 8962621.153 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_toSortedList":
  8963821.170 ±(99.9%) 15752.211 ops/s [Average]
  (min, avg, max) = (8881068.378, 8963821.170, 9001587.528), stdev = 23577.169
  CI (99.9%): [8948068.959, 8979573.381] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_toSortedList  thrpt   30  8963821.170 ± 15752.211  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_toSortedListBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_toSortedListBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2795019.439 ops/s
# Warmup Iteration   2: 3003640.254 ops/s
# Warmup Iteration   3: 3980184.211 ops/s
# Warmup Iteration   4: 3961636.270 ops/s
# Warmup Iteration   5: 3950115.472 ops/s
# Warmup Iteration   6: 3949851.961 ops/s
# Warmup Iteration   7: 3959076.079 ops/s
# Warmup Iteration   8: 3965617.969 ops/s
# Warmup Iteration   9: 3960572.768 ops/s
# Warmup Iteration  10: 3303745.028 ops/s
# Warmup Iteration  11: 3960666.265 ops/s
# Warmup Iteration  12: 3968248.653 ops/s
# Warmup Iteration  13: 3964539.664 ops/s
# Warmup Iteration  14: 3961630.038 ops/s
# Warmup Iteration  15: 3960786.986 ops/s
# Warmup Iteration  16: 3964110.279 ops/s
# Warmup Iteration  17: 3959331.935 ops/s
# Warmup Iteration  18: 3964006.945 ops/s
# Warmup Iteration  19: 3957422.453 ops/s
# Warmup Iteration  20: 3963575.388 ops/s
# Warmup Iteration  21: 3980175.855 ops/s
# Warmup Iteration  22: 3974506.181 ops/s
# Warmup Iteration  23: 3980182.583 ops/s
# Warmup Iteration  24: 3975742.019 ops/s
# Warmup Iteration  25: 3975625.511 ops/s
# Warmup Iteration  26: 3975946.857 ops/s
# Warmup Iteration  27: 3960174.702 ops/s
# Warmup Iteration  28: 3962285.015 ops/s
# Warmup Iteration  29: 3969761.243 ops/s
# Warmup Iteration  30: 3975320.660 ops/s
Iteration   1: 3977303.970 ops/s
Iteration   2: 3977106.566 ops/s
Iteration   3: 3968200.801 ops/s
Iteration   4: 3976471.930 ops/s
Iteration   5: 3967890.774 ops/s
Iteration   6: 3966566.320 ops/s
Iteration   7: 3964211.754 ops/s
Iteration   8: 3963734.401 ops/s
Iteration   9: 3948417.104 ops/s
Iteration  10: 3956716.198 ops/s
Iteration  11: 3963955.583 ops/s
Iteration  12: 3963493.246 ops/s
Iteration  13: 3971482.641 ops/s
Iteration  14: 3982154.382 ops/s
Iteration  15: 3964489.943 ops/s
Iteration  16: 3966401.598 ops/s
Iteration  17: 3959477.676 ops/s
Iteration  18: 3962641.474 ops/s
Iteration  19: 3965132.749 ops/s
Iteration  20: 3958784.629 ops/s
Iteration  21: 3965131.467 ops/s
Iteration  22: 3981111.550 ops/s
Iteration  23: 3970505.335 ops/s
Iteration  24: 3979111.059 ops/s
Iteration  25: 3966269.626 ops/s
Iteration  26: 3962043.178 ops/s
Iteration  27: 3956286.722 ops/s
Iteration  28: 3962648.459 ops/s
Iteration  29: 3966909.178 ops/s
Iteration  30: 3962575.130 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_toSortedListBy":
  3966574.181 ±(99.9%) 5158.890 ops/s [Average]
  (min, avg, max) = (3948417.104, 3966574.181, 3982154.382), stdev = 7721.585
  CI (99.9%): [3961415.291, 3971733.072] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_toSortedListBy  thrpt   30  3966574.181 ± 5158.890  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_toSortedSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_toSortedSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3262656.486 ops/s
# Warmup Iteration   2: 7486214.696 ops/s
# Warmup Iteration   3: 6285584.083 ops/s
# Warmup Iteration   4: 7468813.942 ops/s
# Warmup Iteration   5: 7483888.370 ops/s
# Warmup Iteration   6: 7492270.990 ops/s
# Warmup Iteration   7: 7480812.029 ops/s
# Warmup Iteration   8: 7482326.588 ops/s
# Warmup Iteration   9: 7488828.771 ops/s
# Warmup Iteration  10: 7480911.607 ops/s
# Warmup Iteration  11: 7488158.921 ops/s
# Warmup Iteration  12: 7508883.026 ops/s
# Warmup Iteration  13: 7468796.791 ops/s
# Warmup Iteration  14: 7483169.155 ops/s
# Warmup Iteration  15: 7494108.569 ops/s
# Warmup Iteration  16: 7418083.708 ops/s
# Warmup Iteration  17: 7474443.197 ops/s
# Warmup Iteration  18: 7479901.683 ops/s
# Warmup Iteration  19: 7465025.748 ops/s
# Warmup Iteration  20: 7477903.666 ops/s
# Warmup Iteration  21: 7475508.802 ops/s
# Warmup Iteration  22: 7478471.866 ops/s
# Warmup Iteration  23: 7470029.588 ops/s
# Warmup Iteration  24: 7488726.577 ops/s
# Warmup Iteration  25: 7486574.527 ops/s
# Warmup Iteration  26: 7486021.087 ops/s
# Warmup Iteration  27: 7468315.293 ops/s
# Warmup Iteration  28: 7500455.225 ops/s
# Warmup Iteration  29: 7486186.916 ops/s
# Warmup Iteration  30: 7483439.134 ops/s
Iteration   1: 7468748.029 ops/s
Iteration   2: 7473910.186 ops/s
Iteration   3: 7477169.760 ops/s
Iteration   4: 7491921.888 ops/s
Iteration   5: 7493683.802 ops/s
Iteration   6: 7464366.827 ops/s
Iteration   7: 7487171.435 ops/s
Iteration   8: 7506558.404 ops/s
Iteration   9: 7498125.226 ops/s
Iteration  10: 7490159.097 ops/s
Iteration  11: 7475820.128 ops/s
Iteration  12: 7480747.648 ops/s
Iteration  13: 7489278.870 ops/s
Iteration  14: 7474623.543 ops/s
Iteration  15: 7476738.416 ops/s
Iteration  16: 7471173.506 ops/s
Iteration  17: 7460491.162 ops/s
Iteration  18: 7479623.146 ops/s
Iteration  19: 7472684.862 ops/s
Iteration  20: 7488689.282 ops/s
Iteration  21: 7488668.982 ops/s
Iteration  22: 7486202.195 ops/s
Iteration  23: 7502122.665 ops/s
Iteration  24: 7488289.762 ops/s
Iteration  25: 7490812.102 ops/s
Iteration  26: 7494417.067 ops/s
Iteration  27: 7488960.733 ops/s
Iteration  28: 7498078.746 ops/s
Iteration  29: 7488089.518 ops/s
Iteration  30: 7489375.790 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_toSortedSet":
  7484556.759 ±(99.9%) 7443.287 ops/s [Average]
  (min, avg, max) = (7460491.162, 7484556.759, 7506558.404), stdev = 11140.762
  CI (99.9%): [7477113.472, 7492000.046] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_toSortedSet  thrpt   30  7484556.759 ± 7443.287  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_toSortedSetBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_toSortedSetBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 886648.834 ops/s
# Warmup Iteration   2: 1851363.566 ops/s
# Warmup Iteration   3: 1941727.689 ops/s
# Warmup Iteration   4: 1949593.483 ops/s
# Warmup Iteration   5: 1619970.479 ops/s
# Warmup Iteration   6: 1945738.336 ops/s
# Warmup Iteration   7: 1932254.664 ops/s
# Warmup Iteration   8: 1946016.461 ops/s
# Warmup Iteration   9: 1954893.130 ops/s
# Warmup Iteration  10: 1955771.083 ops/s
# Warmup Iteration  11: 1948447.286 ops/s
# Warmup Iteration  12: 1956018.823 ops/s
# Warmup Iteration  13: 1953233.777 ops/s
# Warmup Iteration  14: 1956568.224 ops/s
# Warmup Iteration  15: 1953897.829 ops/s
# Warmup Iteration  16: 1957350.624 ops/s
# Warmup Iteration  17: 1940839.547 ops/s
# Warmup Iteration  18: 1946942.238 ops/s
# Warmup Iteration  19: 1945778.987 ops/s
# Warmup Iteration  20: 1938882.174 ops/s
# Warmup Iteration  21: 1944191.777 ops/s
# Warmup Iteration  22: 1945709.960 ops/s
# Warmup Iteration  23: 1948314.018 ops/s
# Warmup Iteration  24: 1944978.893 ops/s
# Warmup Iteration  25: 1946108.839 ops/s
# Warmup Iteration  26: 1937821.629 ops/s
# Warmup Iteration  27: 1941691.340 ops/s
# Warmup Iteration  28: 1931535.723 ops/s
# Warmup Iteration  29: 1943752.956 ops/s
# Warmup Iteration  30: 1943650.040 ops/s
Iteration   1: 1945173.047 ops/s
Iteration   2: 1946764.872 ops/s
Iteration   3: 1927878.642 ops/s
Iteration   4: 1948351.344 ops/s
Iteration   5: 1947831.130 ops/s
Iteration   6: 1949166.150 ops/s
Iteration   7: 1946433.720 ops/s
Iteration   8: 1946005.915 ops/s
Iteration   9: 1942235.395 ops/s
Iteration  10: 1948183.079 ops/s
Iteration  11: 1947902.522 ops/s
Iteration  12: 1947609.381 ops/s
Iteration  13: 1931543.611 ops/s
Iteration  14: 1948779.493 ops/s
Iteration  15: 1945637.211 ops/s
Iteration  16: 1945445.679 ops/s
Iteration  17: 1952001.630 ops/s
Iteration  18: 1934550.724 ops/s
Iteration  19: 1940197.771 ops/s
Iteration  20: 1944486.869 ops/s
Iteration  21: 1951196.993 ops/s
Iteration  22: 1946221.930 ops/s
Iteration  23: 1946162.452 ops/s
Iteration  24: 1950711.225 ops/s
Iteration  25: 1941336.176 ops/s
Iteration  26: 1945007.949 ops/s
Iteration  27: 1944542.341 ops/s
Iteration  28: 1949560.559 ops/s
Iteration  29: 1895926.174 ops/s
Iteration  30: 1888951.419 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_toSortedSetBy":
  1941526.513 ±(99.9%) 9644.037 ops/s [Average]
  (min, avg, max) = (1888951.419, 1941526.513, 1952001.630), stdev = 14434.742
  CI (99.9%): [1931882.476, 1951170.551] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_toSortedSetBy  thrpt   30  1941526.513 ± 9644.037  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_toSortedSetWithComparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_toSortedSetWithComparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1873731.092 ops/s
# Warmup Iteration   2: 4806191.237 ops/s
# Warmup Iteration   3: 4785164.757 ops/s
# Warmup Iteration   4: 3990905.249 ops/s
# Warmup Iteration   5: 4717064.299 ops/s
# Warmup Iteration   6: 4803732.123 ops/s
# Warmup Iteration   7: 4805718.490 ops/s
# Warmup Iteration   8: 4800525.877 ops/s
# Warmup Iteration   9: 4817146.297 ops/s
# Warmup Iteration  10: 4806973.416 ops/s
# Warmup Iteration  11: 4788931.218 ops/s
# Warmup Iteration  12: 4802000.666 ops/s
# Warmup Iteration  13: 4811516.065 ops/s
# Warmup Iteration  14: 4805507.891 ops/s
# Warmup Iteration  15: 4806429.070 ops/s
# Warmup Iteration  16: 4809447.475 ops/s
# Warmup Iteration  17: 4810684.250 ops/s
# Warmup Iteration  18: 4802551.800 ops/s
# Warmup Iteration  19: 4813712.273 ops/s
# Warmup Iteration  20: 4808430.646 ops/s
# Warmup Iteration  21: 4788363.165 ops/s
# Warmup Iteration  22: 4809642.138 ops/s
# Warmup Iteration  23: 4811281.495 ops/s
# Warmup Iteration  24: 4805933.737 ops/s
# Warmup Iteration  25: 4804732.581 ops/s
# Warmup Iteration  26: 4812574.129 ops/s
# Warmup Iteration  27: 4795915.976 ops/s
# Warmup Iteration  28: 4808026.127 ops/s
# Warmup Iteration  29: 4808674.888 ops/s
# Warmup Iteration  30: 4812544.413 ops/s
Iteration   1: 4799386.936 ops/s
Iteration   2: 4806834.937 ops/s
Iteration   3: 4804926.330 ops/s
Iteration   4: 4793435.687 ops/s
Iteration   5: 4805707.968 ops/s
Iteration   6: 4810176.603 ops/s
Iteration   7: 4809011.709 ops/s
Iteration   8: 4802572.313 ops/s
Iteration   9: 4808848.579 ops/s
Iteration  10: 4811362.178 ops/s
Iteration  11: 4804232.060 ops/s
Iteration  12: 4805554.849 ops/s
Iteration  13: 4810250.191 ops/s
Iteration  14: 4809702.367 ops/s
Iteration  15: 4801167.921 ops/s
Iteration  16: 4807030.162 ops/s
Iteration  17: 4815189.096 ops/s
Iteration  18: 4795840.933 ops/s
Iteration  19: 4808360.496 ops/s
Iteration  20: 4809655.664 ops/s
Iteration  21: 4801963.673 ops/s
Iteration  22: 4801750.797 ops/s
Iteration  23: 4805313.525 ops/s
Iteration  24: 4802887.377 ops/s
Iteration  25: 4812763.418 ops/s
Iteration  26: 4815454.740 ops/s
Iteration  27: 4805214.373 ops/s
Iteration  28: 4805061.974 ops/s
Iteration  29: 4740986.190 ops/s
Iteration  30: 4766476.354 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_toSortedSetWithComparator":
  4802570.647 ±(99.9%) 9738.931 ops/s [Average]
  (min, avg, max) = (4740986.190, 4802570.647, 4815454.740), stdev = 14576.775
  CI (99.9%): [4792831.715, 4812309.578] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score      Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_toSortedSetWithComparator  thrpt   30  4802570.647 ± 9738.931  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_toStack$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_toStack

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4323668.235 ops/s
# Warmup Iteration   2: 10291294.128 ops/s
# Warmup Iteration   3: 8639815.034 ops/s
# Warmup Iteration   4: 10351153.576 ops/s
# Warmup Iteration   5: 10347865.814 ops/s
# Warmup Iteration   6: 10371779.921 ops/s
# Warmup Iteration   7: 10350868.852 ops/s
# Warmup Iteration   8: 10356572.902 ops/s
# Warmup Iteration   9: 10322074.721 ops/s
# Warmup Iteration  10: 10327287.943 ops/s
# Warmup Iteration  11: 10371170.362 ops/s
# Warmup Iteration  12: 10356597.762 ops/s
# Warmup Iteration  13: 10338457.414 ops/s
# Warmup Iteration  14: 10365593.881 ops/s
# Warmup Iteration  15: 10361955.306 ops/s
# Warmup Iteration  16: 10353309.449 ops/s
# Warmup Iteration  17: 10354676.873 ops/s
# Warmup Iteration  18: 10385424.054 ops/s
# Warmup Iteration  19: 10351417.335 ops/s
# Warmup Iteration  20: 10345986.803 ops/s
# Warmup Iteration  21: 10285759.136 ops/s
# Warmup Iteration  22: 10345404.441 ops/s
# Warmup Iteration  23: 10370822.096 ops/s
# Warmup Iteration  24: 10353293.412 ops/s
# Warmup Iteration  25: 10340928.279 ops/s
# Warmup Iteration  26: 10346582.060 ops/s
# Warmup Iteration  27: 10355220.512 ops/s
# Warmup Iteration  28: 10358500.920 ops/s
# Warmup Iteration  29: 10333690.555 ops/s
# Warmup Iteration  30: 10332952.394 ops/s
Iteration   1: 10316826.750 ops/s
Iteration   2: 10302298.339 ops/s
Iteration   3: 10348115.123 ops/s
Iteration   4: 10331124.498 ops/s
Iteration   5: 10373467.928 ops/s
Iteration   6: 10339309.207 ops/s
Iteration   7: 10377482.585 ops/s
Iteration   8: 10341410.616 ops/s
Iteration   9: 10319847.618 ops/s
Iteration  10: 10362793.733 ops/s
Iteration  11: 10372845.389 ops/s
Iteration  12: 10292883.018 ops/s
Iteration  13: 10346501.857 ops/s
Iteration  14: 10359500.765 ops/s
Iteration  15: 10369552.993 ops/s
Iteration  16: 10339660.097 ops/s
Iteration  17: 10338879.541 ops/s
Iteration  18: 10364838.861 ops/s
Iteration  19: 10369307.784 ops/s
Iteration  20: 10358012.336 ops/s
Iteration  21: 10376847.393 ops/s
Iteration  22: 10351577.062 ops/s
Iteration  23: 10359145.149 ops/s
Iteration  24: 10318590.410 ops/s
Iteration  25: 10337757.039 ops/s
Iteration  26: 10333250.818 ops/s
Iteration  27: 10330487.714 ops/s
Iteration  28: 10299159.741 ops/s
Iteration  29: 10355675.122 ops/s
Iteration  30: 10313416.224 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_toStack":
  10343352.190 ±(99.9%) 16029.752 ops/s [Average]
  (min, avg, max) = (10292883.018, 10343352.190, 10377482.585), stdev = 23992.581
  CI (99.9%): [10327322.438, 10359381.943] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_toStack  thrpt   30  10343352.190 ± 16029.752  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_zip$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_zip

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 475394.240 ops/s
# Warmup Iteration   2: 793399.478 ops/s
# Warmup Iteration   3: 902185.663 ops/s
# Warmup Iteration   4: 873677.655 ops/s
# Warmup Iteration   5: 902372.054 ops/s
# Warmup Iteration   6: 752835.393 ops/s
# Warmup Iteration   7: 898210.937 ops/s
# Warmup Iteration   8: 899329.788 ops/s
# Warmup Iteration   9: 906386.736 ops/s
# Warmup Iteration  10: 906744.452 ops/s
# Warmup Iteration  11: 908525.259 ops/s
# Warmup Iteration  12: 906070.957 ops/s
# Warmup Iteration  13: 907813.212 ops/s
# Warmup Iteration  14: 909245.056 ops/s
# Warmup Iteration  15: 907592.208 ops/s
# Warmup Iteration  16: 907194.314 ops/s
# Warmup Iteration  17: 908164.314 ops/s
# Warmup Iteration  18: 909200.209 ops/s
# Warmup Iteration  19: 907982.478 ops/s
# Warmup Iteration  20: 906643.223 ops/s
# Warmup Iteration  21: 907798.905 ops/s
# Warmup Iteration  22: 907917.726 ops/s
# Warmup Iteration  23: 908807.240 ops/s
# Warmup Iteration  24: 908577.172 ops/s
# Warmup Iteration  25: 909025.638 ops/s
# Warmup Iteration  26: 909003.798 ops/s
# Warmup Iteration  27: 909236.465 ops/s
# Warmup Iteration  28: 907432.750 ops/s
# Warmup Iteration  29: 905619.638 ops/s
# Warmup Iteration  30: 908910.593 ops/s
Iteration   1: 907571.601 ops/s
Iteration   2: 909767.693 ops/s
Iteration   3: 908422.936 ops/s
Iteration   4: 906409.406 ops/s
Iteration   5: 908703.010 ops/s
Iteration   6: 906674.720 ops/s
Iteration   7: 909292.096 ops/s
Iteration   8: 907782.836 ops/s
Iteration   9: 909493.910 ops/s
Iteration  10: 908206.587 ops/s
Iteration  11: 909257.842 ops/s
Iteration  12: 908474.066 ops/s
Iteration  13: 910291.964 ops/s
Iteration  14: 907366.864 ops/s
Iteration  15: 908886.646 ops/s
Iteration  16: 907107.218 ops/s
Iteration  17: 907441.191 ops/s
Iteration  18: 909005.646 ops/s
Iteration  19: 908848.856 ops/s
Iteration  20: 909101.247 ops/s
Iteration  21: 907235.471 ops/s
Iteration  22: 909263.910 ops/s
Iteration  23: 907043.822 ops/s
Iteration  24: 909596.322 ops/s
Iteration  25: 907728.254 ops/s
Iteration  26: 909014.635 ops/s
Iteration  27: 907735.691 ops/s
Iteration  28: 910282.942 ops/s
Iteration  29: 908449.082 ops/s
Iteration  30: 909095.004 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_zip":
  908451.716 ±(99.9%) 700.378 ops/s [Average]
  (min, avg, max) = (906409.406, 908451.716, 910291.964), stdev = 1048.293
  CI (99.9%): [907751.338, 909152.093] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score     Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_zip  thrpt   30  908451.716 ± 700.378  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_zipWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_zipWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1081842.242 ops/s
# Warmup Iteration   2: 1943318.238 ops/s
# Warmup Iteration   3: 2115692.281 ops/s
# Warmup Iteration   4: 2134115.906 ops/s
# Warmup Iteration   5: 1947932.465 ops/s
# Warmup Iteration   6: 1967149.238 ops/s
# Warmup Iteration   7: 2136110.343 ops/s
# Warmup Iteration   8: 2136389.249 ops/s
# Warmup Iteration   9: 2132587.143 ops/s
# Warmup Iteration  10: 2133003.823 ops/s
# Warmup Iteration  11: 2135508.273 ops/s
# Warmup Iteration  12: 2125716.009 ops/s
# Warmup Iteration  13: 2122884.785 ops/s
# Warmup Iteration  14: 2127994.690 ops/s
# Warmup Iteration  15: 2128955.729 ops/s
# Warmup Iteration  16: 2134524.892 ops/s
# Warmup Iteration  17: 2138357.898 ops/s
# Warmup Iteration  18: 2134481.124 ops/s
# Warmup Iteration  19: 2131986.876 ops/s
# Warmup Iteration  20: 2136382.093 ops/s
# Warmup Iteration  21: 2135624.599 ops/s
# Warmup Iteration  22: 2124364.816 ops/s
# Warmup Iteration  23: 2125135.296 ops/s
# Warmup Iteration  24: 2134520.283 ops/s
# Warmup Iteration  25: 2131295.005 ops/s
# Warmup Iteration  26: 2137029.084 ops/s
# Warmup Iteration  27: 2135222.621 ops/s
# Warmup Iteration  28: 2133597.964 ops/s
# Warmup Iteration  29: 2137900.211 ops/s
# Warmup Iteration  30: 2129538.883 ops/s
Iteration   1: 2122618.072 ops/s
Iteration   2: 2137022.722 ops/s
Iteration   3: 2140744.046 ops/s
Iteration   4: 2136584.184 ops/s
Iteration   5: 2138585.039 ops/s
Iteration   6: 2136096.357 ops/s
Iteration   7: 2139433.455 ops/s
Iteration   8: 2131481.867 ops/s
Iteration   9: 2129299.879 ops/s
Iteration  10: 2138788.959 ops/s
Iteration  11: 2137395.489 ops/s
Iteration  12: 2140822.287 ops/s
Iteration  13: 2137020.331 ops/s
Iteration  14: 2134094.421 ops/s
Iteration  15: 2136914.797 ops/s
Iteration  16: 2132364.317 ops/s
Iteration  17: 2138420.034 ops/s
Iteration  18: 2135910.858 ops/s
Iteration  19: 2133111.538 ops/s
Iteration  20: 2134687.497 ops/s
Iteration  21: 2136795.787 ops/s
Iteration  22: 2134496.495 ops/s
Iteration  23: 2138499.110 ops/s
Iteration  24: 2137038.511 ops/s
Iteration  25: 2140634.210 ops/s
Iteration  26: 2133571.514 ops/s
Iteration  27: 2138508.753 ops/s
Iteration  28: 2140200.899 ops/s
Iteration  29: 2136536.820 ops/s
Iteration  30: 2134774.128 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableTripletonListTest._Benchmark.benchmark_zipWithIndex":
  2136081.746 ±(99.9%) 2535.054 ops/s [Average]
  (min, avg, max) = (2122618.072, 2136081.746, 2140822.287), stdev = 3794.350
  CI (99.9%): [2133546.692, 2138616.800] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableTripletonListTest._Benchmark.benchmark_zipWithIndex  thrpt   30  2136081.746 ± 2535.054  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7732694.175 ops/s
# Warmup Iteration   2: 13023948.183 ops/s
# Warmup Iteration   3: 15524757.487 ops/s
# Warmup Iteration   4: 15537389.249 ops/s
# Warmup Iteration   5: 15593222.570 ops/s
# Warmup Iteration   6: 15547987.391 ops/s
# Warmup Iteration   7: 15627741.691 ops/s
# Warmup Iteration   8: 15702640.752 ops/s
# Warmup Iteration   9: 15649690.206 ops/s
# Warmup Iteration  10: 15603682.541 ops/s
# Warmup Iteration  11: 15547722.132 ops/s
# Warmup Iteration  12: 15567148.741 ops/s
# Warmup Iteration  13: 15612818.632 ops/s
# Warmup Iteration  14: 15495667.436 ops/s
# Warmup Iteration  15: 15626840.774 ops/s
# Warmup Iteration  16: 15604174.253 ops/s
# Warmup Iteration  17: 15549165.419 ops/s
# Warmup Iteration  18: 15611432.722 ops/s
# Warmup Iteration  19: 15598092.217 ops/s
# Warmup Iteration  20: 15543281.180 ops/s
# Warmup Iteration  21: 15578204.413 ops/s
# Warmup Iteration  22: 15548909.230 ops/s
# Warmup Iteration  23: 15561301.282 ops/s
# Warmup Iteration  24: 15678114.744 ops/s
# Warmup Iteration  25: 15581073.468 ops/s
# Warmup Iteration  26: 15601377.342 ops/s
# Warmup Iteration  27: 15602989.498 ops/s
# Warmup Iteration  28: 15610292.610 ops/s
# Warmup Iteration  29: 15556476.722 ops/s
# Warmup Iteration  30: 15580022.926 ops/s
Iteration   1: 15614412.212 ops/s
Iteration   2: 15592711.949 ops/s
Iteration   3: 15613850.382 ops/s
Iteration   4: 15501446.043 ops/s
Iteration   5: 15556072.599 ops/s
Iteration   6: 15634232.720 ops/s
Iteration   7: 15593993.168 ops/s
Iteration   8: 15603323.598 ops/s
Iteration   9: 15623738.238 ops/s
Iteration  10: 15542273.843 ops/s
Iteration  11: 15548468.704 ops/s
Iteration  12: 15608375.357 ops/s
Iteration  13: 15661484.330 ops/s
Iteration  14: 15660383.231 ops/s
Iteration  15: 15537490.074 ops/s
Iteration  16: 15539287.769 ops/s
Iteration  17: 15646210.376 ops/s
Iteration  18: 15689196.307 ops/s
Iteration  19: 15639045.960 ops/s
Iteration  20: 15514851.388 ops/s
Iteration  21: 15525228.554 ops/s
Iteration  22: 15637781.541 ops/s
Iteration  23: 15582794.911 ops/s
Iteration  24: 15593105.616 ops/s
Iteration  25: 15649361.754 ops/s
Iteration  26: 15700562.560 ops/s
Iteration  27: 15684191.710 ops/s
Iteration  28: 15687245.109 ops/s
Iteration  29: 15614773.491 ops/s
Iteration  30: 15640328.544 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_allSatisfy":
  15607874.068 ±(99.9%) 36890.966 ops/s [Average]
  (min, avg, max) = (15501446.043, 15607874.068, 15700562.560), stdev = 55216.665
  CI (99.9%): [15570983.102, 15644765.034] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score       Error  Units
ImmutableBooleanArrayListTest._Benchmark.benchmark_allSatisfy  thrpt   30  15607874.068 ± 36890.966  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12211478.729 ops/s
# Warmup Iteration   2: 20951084.464 ops/s
# Warmup Iteration   3: 23294114.242 ops/s
# Warmup Iteration   4: 24041801.511 ops/s
# Warmup Iteration   5: 23967888.284 ops/s
# Warmup Iteration   6: 23943831.821 ops/s
# Warmup Iteration   7: 23995553.063 ops/s
# Warmup Iteration   8: 24004249.543 ops/s
# Warmup Iteration   9: 23936148.776 ops/s
# Warmup Iteration  10: 24013763.751 ops/s
# Warmup Iteration  11: 23894932.210 ops/s
# Warmup Iteration  12: 23949609.163 ops/s
# Warmup Iteration  13: 23914719.997 ops/s
# Warmup Iteration  14: 23954057.450 ops/s
# Warmup Iteration  15: 24031492.237 ops/s
# Warmup Iteration  16: 24041838.132 ops/s
# Warmup Iteration  17: 23986575.302 ops/s
# Warmup Iteration  18: 23963312.173 ops/s
# Warmup Iteration  19: 24022567.071 ops/s
# Warmup Iteration  20: 24018382.383 ops/s
# Warmup Iteration  21: 24009886.501 ops/s
# Warmup Iteration  22: 24007771.879 ops/s
# Warmup Iteration  23: 23972654.020 ops/s
# Warmup Iteration  24: 23958427.522 ops/s
# Warmup Iteration  25: 23974355.911 ops/s
# Warmup Iteration  26: 24013026.248 ops/s
# Warmup Iteration  27: 23988278.387 ops/s
# Warmup Iteration  28: 23848250.356 ops/s
# Warmup Iteration  29: 23962034.906 ops/s
# Warmup Iteration  30: 23944858.564 ops/s
Iteration   1: 23946185.479 ops/s
Iteration   2: 24011812.342 ops/s
Iteration   3: 24055549.069 ops/s
Iteration   4: 24005212.695 ops/s
Iteration   5: 24043334.465 ops/s
Iteration   6: 23968916.781 ops/s
Iteration   7: 24047581.181 ops/s
Iteration   8: 24040585.979 ops/s
Iteration   9: 23981600.641 ops/s
Iteration  10: 23997137.082 ops/s
Iteration  11: 23980083.713 ops/s
Iteration  12: 23971265.114 ops/s
Iteration  13: 23951649.952 ops/s
Iteration  14: 24034969.801 ops/s
Iteration  15: 24062463.141 ops/s
Iteration  16: 23993016.240 ops/s
Iteration  17: 24029585.554 ops/s
Iteration  18: 24010153.469 ops/s
Iteration  19: 23895592.424 ops/s
Iteration  20: 23885742.220 ops/s
Iteration  21: 24012800.145 ops/s
Iteration  22: 23989090.504 ops/s
Iteration  23: 23993429.157 ops/s
Iteration  24: 24069662.911 ops/s
Iteration  25: 23972934.149 ops/s
Iteration  26: 23907162.465 ops/s
Iteration  27: 23986922.924 ops/s
Iteration  28: 24109380.472 ops/s
Iteration  29: 23999620.643 ops/s
Iteration  30: 23893491.997 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_anySatisfy":
  23994897.757 ±(99.9%) 35988.919 ops/s [Average]
  (min, avg, max) = (23885742.220, 23994897.757, 24109380.472), stdev = 53866.524
  CI (99.9%): [23958908.838, 24030886.676] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score       Error  Units
ImmutableBooleanArrayListTest._Benchmark.benchmark_anySatisfy  thrpt   30  23994897.757 ± 35988.919  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 437686.300 ops/s
# Warmup Iteration   2: 1094061.647 ops/s
# Warmup Iteration   3: 1094195.749 ops/s
# Warmup Iteration   4: 911842.585 ops/s
# Warmup Iteration   5: 1091945.956 ops/s
# Warmup Iteration   6: 1093776.952 ops/s
# Warmup Iteration   7: 1094057.357 ops/s
# Warmup Iteration   8: 1092473.423 ops/s
# Warmup Iteration   9: 1093435.061 ops/s
# Warmup Iteration  10: 1094854.868 ops/s
# Warmup Iteration  11: 1091060.662 ops/s
# Warmup Iteration  12: 1094656.646 ops/s
# Warmup Iteration  13: 1089733.892 ops/s
# Warmup Iteration  14: 1092808.286 ops/s
# Warmup Iteration  15: 1093511.476 ops/s
# Warmup Iteration  16: 1092726.506 ops/s
# Warmup Iteration  17: 1095589.066 ops/s
# Warmup Iteration  18: 1098151.478 ops/s
# Warmup Iteration  19: 1097551.438 ops/s
# Warmup Iteration  20: 1098374.382 ops/s
# Warmup Iteration  21: 1096248.195 ops/s
# Warmup Iteration  22: 1097495.389 ops/s
# Warmup Iteration  23: 1094914.477 ops/s
# Warmup Iteration  24: 1095654.432 ops/s
# Warmup Iteration  25: 1097059.520 ops/s
# Warmup Iteration  26: 1094729.443 ops/s
# Warmup Iteration  27: 1097019.407 ops/s
# Warmup Iteration  28: 1096426.626 ops/s
# Warmup Iteration  29: 1098248.602 ops/s
# Warmup Iteration  30: 1097250.625 ops/s
Iteration   1: 1096453.635 ops/s
Iteration   2: 1098477.114 ops/s
Iteration   3: 1095430.286 ops/s
Iteration   4: 1094866.055 ops/s
Iteration   5: 1097384.392 ops/s
Iteration   6: 1098202.793 ops/s
Iteration   7: 1097913.403 ops/s
Iteration   8: 1099313.837 ops/s
Iteration   9: 1096058.165 ops/s
Iteration  10: 1097394.669 ops/s
Iteration  11: 1098987.394 ops/s
Iteration  12: 1098755.453 ops/s
Iteration  13: 1099592.686 ops/s
Iteration  14: 1098484.088 ops/s
Iteration  15: 1098601.029 ops/s
Iteration  16: 1093303.599 ops/s
Iteration  17: 1096325.019 ops/s
Iteration  18: 1095165.584 ops/s
Iteration  19: 1095071.077 ops/s
Iteration  20: 1097890.771 ops/s
Iteration  21: 1095129.944 ops/s
Iteration  22: 1096760.353 ops/s
Iteration  23: 1098461.310 ops/s
Iteration  24: 1097281.197 ops/s
Iteration  25: 1097540.530 ops/s
Iteration  26: 1099524.707 ops/s
Iteration  27: 1095486.316 ops/s
Iteration  28: 1097885.136 ops/s
Iteration  29: 1098406.545 ops/s
Iteration  30: 1097836.782 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_appendString":
  1097266.129 ±(99.9%) 1073.757 ops/s [Average]
  (min, avg, max) = (1093303.599, 1097266.129, 1099592.686), stdev = 1607.149
  CI (99.9%): [1096192.372, 1098339.886] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ImmutableBooleanArrayListTest._Benchmark.benchmark_appendString  thrpt   30  1097266.129 ± 1073.757  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_asLazy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_asLazy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7021725.908 ops/s
# Warmup Iteration   2: 10195435.870 ops/s
# Warmup Iteration   3: 11942204.866 ops/s
# Warmup Iteration   4: 11963144.960 ops/s
# Warmup Iteration   5: 11957115.853 ops/s
# Warmup Iteration   6: 11967268.566 ops/s
# Warmup Iteration   7: 9917188.902 ops/s
# Warmup Iteration   8: 11932030.894 ops/s
# Warmup Iteration   9: 11925303.202 ops/s
# Warmup Iteration  10: 11924735.743 ops/s
# Warmup Iteration  11: 11664383.705 ops/s
# Warmup Iteration  12: 11930480.971 ops/s
# Warmup Iteration  13: 11920592.944 ops/s
# Warmup Iteration  14: 11930388.290 ops/s
# Warmup Iteration  15: 11929400.037 ops/s
# Warmup Iteration  16: 11928320.200 ops/s
# Warmup Iteration  17: 11928008.551 ops/s
# Warmup Iteration  18: 11920681.363 ops/s
# Warmup Iteration  19: 11924615.230 ops/s
# Warmup Iteration  20: 11928753.960 ops/s
# Warmup Iteration  21: 11913793.633 ops/s
# Warmup Iteration  22: 11926626.398 ops/s
# Warmup Iteration  23: 11931120.150 ops/s
# Warmup Iteration  24: 11928153.202 ops/s
# Warmup Iteration  25: 11931391.340 ops/s
# Warmup Iteration  26: 11921834.290 ops/s
# Warmup Iteration  27: 11936404.502 ops/s
# Warmup Iteration  28: 11907101.411 ops/s
# Warmup Iteration  29: 11933071.841 ops/s
# Warmup Iteration  30: 11953004.112 ops/s
Iteration   1: 11909163.271 ops/s
Iteration   2: 11870525.602 ops/s
Iteration   3: 11894395.633 ops/s
Iteration   4: 11882485.089 ops/s
Iteration   5: 11910390.833 ops/s
Iteration   6: 11945810.979 ops/s
Iteration   7: 11920744.790 ops/s
Iteration   8: 11927556.816 ops/s
Iteration   9: 11923728.575 ops/s
Iteration  10: 11916612.624 ops/s
Iteration  11: 11919143.476 ops/s
Iteration  12: 11945919.855 ops/s
Iteration  13: 11932047.448 ops/s
Iteration  14: 11925993.789 ops/s
Iteration  15: 11853808.985 ops/s
Iteration  16: 11903384.844 ops/s
Iteration  17: 11935492.834 ops/s
Iteration  18: 11905068.388 ops/s
Iteration  19: 11948533.680 ops/s
Iteration  20: 11921768.995 ops/s
Iteration  21: 11940837.358 ops/s
Iteration  22: 11928358.071 ops/s
Iteration  23: 11951748.532 ops/s
Iteration  24: 11922993.455 ops/s
Iteration  25: 11940739.811 ops/s
Iteration  26: 11912374.427 ops/s
Iteration  27: 11944552.766 ops/s
Iteration  28: 11904974.407 ops/s
Iteration  29: 11933709.155 ops/s
Iteration  30: 11913711.940 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_asLazy":
  11919552.548 ±(99.9%) 15356.210 ops/s [Average]
  (min, avg, max) = (11853808.985, 11919552.548, 11951748.532), stdev = 22984.455
  CI (99.9%): [11904196.337, 11934908.758] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
ImmutableBooleanArrayListTest._Benchmark.benchmark_asLazy  thrpt   30  11919552.548 ± 15356.210  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_booleanIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_booleanIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 21746214.435 ops/s
# Warmup Iteration   2: 40017742.699 ops/s
# Warmup Iteration   3: 34007148.076 ops/s
# Warmup Iteration   4: 40326706.577 ops/s
# Warmup Iteration   5: 40206522.310 ops/s
# Warmup Iteration   6: 40158167.717 ops/s
# Warmup Iteration   7: 40173503.409 ops/s
# Warmup Iteration   8: 40220584.409 ops/s
# Warmup Iteration   9: 40278123.296 ops/s
# Warmup Iteration  10: 40017091.382 ops/s
# Warmup Iteration  11: 39891413.728 ops/s
# Warmup Iteration  12: 40095275.418 ops/s
# Warmup Iteration  13: 40267474.321 ops/s
# Warmup Iteration  14: 40262426.084 ops/s
# Warmup Iteration  15: 40255221.760 ops/s
# Warmup Iteration  16: 40272243.329 ops/s
# Warmup Iteration  17: 40186154.882 ops/s
# Warmup Iteration  18: 40228410.753 ops/s
# Warmup Iteration  19: 40159874.540 ops/s
# Warmup Iteration  20: 40242515.456 ops/s
# Warmup Iteration  21: 40249342.910 ops/s
# Warmup Iteration  22: 40216833.494 ops/s
# Warmup Iteration  23: 40217372.100 ops/s
# Warmup Iteration  24: 40327168.963 ops/s
# Warmup Iteration  25: 40304509.536 ops/s
# Warmup Iteration  26: 40343713.638 ops/s
# Warmup Iteration  27: 40270615.964 ops/s
# Warmup Iteration  28: 40232484.278 ops/s
# Warmup Iteration  29: 40311368.240 ops/s
# Warmup Iteration  30: 40277902.446 ops/s
Iteration   1: 40314881.540 ops/s
Iteration   2: 38420139.185 ops/s
Iteration   3: 40343854.269 ops/s
Iteration   4: 40274751.072 ops/s
Iteration   5: 40325137.687 ops/s
Iteration   6: 40251199.176 ops/s
Iteration   7: 40013766.874 ops/s
Iteration   8: 40275693.941 ops/s
Iteration   9: 40090743.553 ops/s
Iteration  10: 40133707.225 ops/s
Iteration  11: 40102392.202 ops/s
Iteration  12: 40153044.269 ops/s
Iteration  13: 40230142.179 ops/s
Iteration  14: 40258786.339 ops/s
Iteration  15: 40258005.634 ops/s
Iteration  16: 40282515.576 ops/s
Iteration  17: 40435998.743 ops/s
Iteration  18: 40297543.361 ops/s
Iteration  19: 40270567.237 ops/s
Iteration  20: 40295886.572 ops/s
Iteration  21: 40193939.708 ops/s
Iteration  22: 40346990.256 ops/s
Iteration  23: 40139965.650 ops/s
Iteration  24: 40164208.378 ops/s
Iteration  25: 40067164.966 ops/s
Iteration  26: 40154381.385 ops/s
Iteration  27: 40349683.080 ops/s
Iteration  28: 40392177.349 ops/s
Iteration  29: 40283217.460 ops/s
Iteration  30: 40228026.321 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_booleanIterator":
  40178283.706 ±(99.9%) 231680.960 ops/s [Average]
  (min, avg, max) = (38420139.185, 40178283.706, 40435998.743), stdev = 346769.180
  CI (99.9%): [39946602.746, 40409964.666] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score        Error  Units
ImmutableBooleanArrayListTest._Benchmark.benchmark_booleanIterator  thrpt   30  40178283.706 ± 231680.960  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 795736.782 ops/s
# Warmup Iteration   2: 1168626.726 ops/s
# Warmup Iteration   3: 1436905.374 ops/s
# Warmup Iteration   4: 1427105.991 ops/s
# Warmup Iteration   5: 1437496.758 ops/s
# Warmup Iteration   6: 1437549.051 ops/s
# Warmup Iteration   7: 1181792.206 ops/s
# Warmup Iteration   8: 1432557.299 ops/s
# Warmup Iteration   9: 1437433.522 ops/s
# Warmup Iteration  10: 1438617.818 ops/s
# Warmup Iteration  11: 1438340.610 ops/s
# Warmup Iteration  12: 1437967.448 ops/s
# Warmup Iteration  13: 1437635.232 ops/s
# Warmup Iteration  14: 1437437.763 ops/s
# Warmup Iteration  15: 1435074.337 ops/s
# Warmup Iteration  16: 1432744.493 ops/s
# Warmup Iteration  17: 1437737.013 ops/s
# Warmup Iteration  18: 1437405.845 ops/s
# Warmup Iteration  19: 1437551.165 ops/s
# Warmup Iteration  20: 1435659.952 ops/s
# Warmup Iteration  21: 1437486.905 ops/s
# Warmup Iteration  22: 1437870.030 ops/s
# Warmup Iteration  23: 1436969.788 ops/s
# Warmup Iteration  24: 1438026.362 ops/s
# Warmup Iteration  25: 1436579.385 ops/s
# Warmup Iteration  26: 1437244.638 ops/s
# Warmup Iteration  27: 1437040.914 ops/s
# Warmup Iteration  28: 1433333.931 ops/s
# Warmup Iteration  29: 1436916.390 ops/s
# Warmup Iteration  30: 1436688.287 ops/s
Iteration   1: 1431830.881 ops/s
Iteration   2: 1436148.002 ops/s
Iteration   3: 1437465.303 ops/s
Iteration   4: 1439714.576 ops/s
Iteration   5: 1437642.676 ops/s
Iteration   6: 1439097.348 ops/s
Iteration   7: 1436464.330 ops/s
Iteration   8: 1438478.138 ops/s
Iteration   9: 1435740.760 ops/s
Iteration  10: 1438793.569 ops/s
Iteration  11: 1436135.382 ops/s
Iteration  12: 1438753.837 ops/s
Iteration  13: 1438895.605 ops/s
Iteration  14: 1436944.011 ops/s
Iteration  15: 1437443.285 ops/s
Iteration  16: 1435641.342 ops/s
Iteration  17: 1435991.801 ops/s
Iteration  18: 1435299.780 ops/s
Iteration  19: 1437629.702 ops/s
Iteration  20: 1435849.857 ops/s
Iteration  21: 1428124.787 ops/s
Iteration  22: 1430321.604 ops/s
Iteration  23: 1428740.267 ops/s
Iteration  24: 1431730.494 ops/s
Iteration  25: 1432352.667 ops/s
Iteration  26: 1424787.841 ops/s
Iteration  27: 1433978.086 ops/s
Iteration  28: 1437546.808 ops/s
Iteration  29: 1435647.488 ops/s
Iteration  30: 1431466.242 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_collect":
  1435155.216 ±(99.9%) 2456.647 ops/s [Average]
  (min, avg, max) = (1424787.841, 1435155.216, 1439714.576), stdev = 3676.993
  CI (99.9%): [1432698.569, 1437611.862] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableBooleanArrayListTest._Benchmark.benchmark_collect  thrpt   30  1435155.216 ± 2456.647  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13283287.448 ops/s
# Warmup Iteration   2: 21150233.656 ops/s
# Warmup Iteration   3: 24321830.982 ops/s
# Warmup Iteration   4: 24301190.110 ops/s
# Warmup Iteration   5: 24245438.320 ops/s
# Warmup Iteration   6: 24164740.165 ops/s
# Warmup Iteration   7: 24101509.064 ops/s
# Warmup Iteration   8: 24155780.839 ops/s
# Warmup Iteration   9: 24169273.872 ops/s
# Warmup Iteration  10: 24407978.099 ops/s
# Warmup Iteration  11: 24292193.638 ops/s
# Warmup Iteration  12: 24382713.283 ops/s
# Warmup Iteration  13: 24338158.108 ops/s
# Warmup Iteration  14: 24215532.589 ops/s
# Warmup Iteration  15: 24337476.200 ops/s
# Warmup Iteration  16: 24400622.162 ops/s
# Warmup Iteration  17: 24212644.914 ops/s
# Warmup Iteration  18: 24168305.927 ops/s
# Warmup Iteration  19: 24288941.478 ops/s
# Warmup Iteration  20: 24230166.100 ops/s
# Warmup Iteration  21: 24309087.211 ops/s
# Warmup Iteration  22: 24361858.083 ops/s
# Warmup Iteration  23: 24389058.333 ops/s
# Warmup Iteration  24: 24325802.143 ops/s
# Warmup Iteration  25: 24320195.530 ops/s
# Warmup Iteration  26: 24176158.986 ops/s
# Warmup Iteration  27: 24355102.883 ops/s
# Warmup Iteration  28: 24339643.412 ops/s
# Warmup Iteration  29: 24222277.239 ops/s
# Warmup Iteration  30: 24280989.148 ops/s
Iteration   1: 24341378.961 ops/s
Iteration   2: 24176954.836 ops/s
Iteration   3: 24171398.070 ops/s
Iteration   4: 24155724.403 ops/s
Iteration   5: 24244775.108 ops/s
Iteration   6: 24248928.429 ops/s
Iteration   7: 24215023.818 ops/s
Iteration   8: 24277824.321 ops/s
Iteration   9: 24380320.065 ops/s
Iteration  10: 24395386.118 ops/s
Iteration  11: 24338927.387 ops/s
Iteration  12: 24428408.071 ops/s
Iteration  13: 24434866.928 ops/s
Iteration  14: 24399725.271 ops/s
Iteration  15: 24386176.451 ops/s
Iteration  16: 24367107.541 ops/s
Iteration  17: 24339857.148 ops/s
Iteration  18: 24266929.343 ops/s
Iteration  19: 24292610.378 ops/s
Iteration  20: 24393813.561 ops/s
Iteration  21: 24207840.546 ops/s
Iteration  22: 24277084.730 ops/s
Iteration  23: 24248800.266 ops/s
Iteration  24: 24188937.198 ops/s
Iteration  25: 24148319.874 ops/s
Iteration  26: 24241802.548 ops/s
Iteration  27: 24239354.279 ops/s
Iteration  28: 24337147.909 ops/s
Iteration  29: 24325858.486 ops/s
Iteration  30: 24428251.551 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_contains":
  24296651.120 ±(99.9%) 58841.549 ops/s [Average]
  (min, avg, max) = (24148319.874, 24296651.120, 24434866.928), stdev = 88071.267
  CI (99.9%): [24237809.571, 24355492.669] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
ImmutableBooleanArrayListTest._Benchmark.benchmark_contains  thrpt   30  24296651.120 ± 58841.549  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6686578.667 ops/s
# Warmup Iteration   2: 10745549.086 ops/s
# Warmup Iteration   3: 12864256.850 ops/s
# Warmup Iteration   4: 12738205.422 ops/s
# Warmup Iteration   5: 12778778.779 ops/s
# Warmup Iteration   6: 12837916.857 ops/s
# Warmup Iteration   7: 12782975.585 ops/s
# Warmup Iteration   8: 12819355.458 ops/s
# Warmup Iteration   9: 12784849.001 ops/s
# Warmup Iteration  10: 12798981.824 ops/s
# Warmup Iteration  11: 12811067.607 ops/s
# Warmup Iteration  12: 12818868.815 ops/s
# Warmup Iteration  13: 12778179.490 ops/s
# Warmup Iteration  14: 12781066.512 ops/s
# Warmup Iteration  15: 12784827.499 ops/s
# Warmup Iteration  16: 12831033.623 ops/s
# Warmup Iteration  17: 12873021.158 ops/s
# Warmup Iteration  18: 12828405.475 ops/s
# Warmup Iteration  19: 12782967.993 ops/s
# Warmup Iteration  20: 12842503.832 ops/s
# Warmup Iteration  21: 12884955.519 ops/s
# Warmup Iteration  22: 12804498.352 ops/s
# Warmup Iteration  23: 12814429.615 ops/s
# Warmup Iteration  24: 12840874.545 ops/s
# Warmup Iteration  25: 12799391.133 ops/s
# Warmup Iteration  26: 12769317.720 ops/s
# Warmup Iteration  27: 12776646.666 ops/s
# Warmup Iteration  28: 12843994.273 ops/s
# Warmup Iteration  29: 12729039.926 ops/s
# Warmup Iteration  30: 12779511.386 ops/s
Iteration   1: 12760817.155 ops/s
Iteration   2: 12831984.208 ops/s
Iteration   3: 12825492.769 ops/s
Iteration   4: 12884908.548 ops/s
Iteration   5: 12860218.804 ops/s
Iteration   6: 12840940.535 ops/s
Iteration   7: 12833241.809 ops/s
Iteration   8: 12879251.482 ops/s
Iteration   9: 12945270.439 ops/s
Iteration  10: 12884799.493 ops/s
Iteration  11: 12883202.074 ops/s
Iteration  12: 12843100.079 ops/s
Iteration  13: 12796859.688 ops/s
Iteration  14: 12806138.692 ops/s
Iteration  15: 12842624.556 ops/s
Iteration  16: 12810951.411 ops/s
Iteration  17: 12866907.011 ops/s
Iteration  18: 12815808.896 ops/s
Iteration  19: 12794991.068 ops/s
Iteration  20: 12790592.166 ops/s
Iteration  21: 12847621.490 ops/s
Iteration  22: 12733281.824 ops/s
Iteration  23: 12863353.002 ops/s
Iteration  24: 12729699.088 ops/s
Iteration  25: 12794118.619 ops/s
Iteration  26: 12788970.530 ops/s
Iteration  27: 12868178.654 ops/s
Iteration  28: 12886702.080 ops/s
Iteration  29: 12798160.152 ops/s
Iteration  30: 12743374.259 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_containsAllArray":
  12828385.353 ±(99.9%) 33758.503 ops/s [Average]
  (min, avg, max) = (12729699.088, 12828385.353, 12945270.439), stdev = 50528.143
  CI (99.9%): [12794626.849, 12862143.856] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt         Score       Error  Units
ImmutableBooleanArrayListTest._Benchmark.benchmark_containsAllArray  thrpt   30  12828385.353 ± 33758.503  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 805950.600 ops/s
# Warmup Iteration   2: 1831999.187 ops/s
# Warmup Iteration   3: 1592228.839 ops/s
# Warmup Iteration   4: 1753840.472 ops/s
# Warmup Iteration   5: 1834177.199 ops/s
# Warmup Iteration   6: 1833021.346 ops/s
# Warmup Iteration   7: 1832356.390 ops/s
# Warmup Iteration   8: 1831947.859 ops/s
# Warmup Iteration   9: 1831429.437 ops/s
# Warmup Iteration  10: 1829501.425 ops/s
# Warmup Iteration  11: 1834733.380 ops/s
# Warmup Iteration  12: 1835085.720 ops/s
# Warmup Iteration  13: 1833150.371 ops/s
# Warmup Iteration  14: 1828239.173 ops/s
# Warmup Iteration  15: 1829248.928 ops/s
# Warmup Iteration  16: 1827776.256 ops/s
# Warmup Iteration  17: 1829609.830 ops/s
# Warmup Iteration  18: 1831699.355 ops/s
# Warmup Iteration  19: 1826619.459 ops/s
# Warmup Iteration  20: 1825373.709 ops/s
# Warmup Iteration  21: 1833801.583 ops/s
# Warmup Iteration  22: 1833234.698 ops/s
# Warmup Iteration  23: 1834446.899 ops/s
# Warmup Iteration  24: 1831967.971 ops/s
# Warmup Iteration  25: 1814402.362 ops/s
# Warmup Iteration  26: 1831751.664 ops/s
# Warmup Iteration  27: 1834443.207 ops/s
# Warmup Iteration  28: 1828699.369 ops/s
# Warmup Iteration  29: 1824858.783 ops/s
# Warmup Iteration  30: 1819221.482 ops/s
Iteration   1: 1835755.940 ops/s
Iteration   2: 1833187.157 ops/s
Iteration   3: 1831625.709 ops/s
Iteration   4: 1828920.838 ops/s
Iteration   5: 1828004.065 ops/s
Iteration   6: 1837152.885 ops/s
Iteration   7: 1836059.879 ops/s
Iteration   8: 1836980.949 ops/s
Iteration   9: 1834641.423 ops/s
Iteration  10: 1835372.909 ops/s
Iteration  11: 1836299.331 ops/s
Iteration  12: 1837563.555 ops/s
Iteration  13: 1836215.228 ops/s
Iteration  14: 1833417.283 ops/s
Iteration  15: 1832553.276 ops/s
Iteration  16: 1836263.024 ops/s
Iteration  17: 1833637.350 ops/s
Iteration  18: 1833214.592 ops/s
Iteration  19: 1833903.240 ops/s
Iteration  20: 1835507.649 ops/s
Iteration  21: 1830736.934 ops/s
Iteration  22: 1830546.421 ops/s
Iteration  23: 1831332.079 ops/s
Iteration  24: 1834693.944 ops/s
Iteration  25: 1831523.885 ops/s
Iteration  26: 1833042.340 ops/s
Iteration  27: 1833430.493 ops/s
Iteration  28: 1832423.465 ops/s
Iteration  29: 1837490.290 ops/s
Iteration  30: 1828320.012 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_containsAllIterable":
  1833660.538 ±(99.9%) 1802.128 ops/s [Average]
  (min, avg, max) = (1828004.065, 1833660.538, 1837563.555), stdev = 2697.341
  CI (99.9%): [1831858.410, 1835462.667] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
ImmutableBooleanArrayListTest._Benchmark.benchmark_containsAllIterable  thrpt   30  1833660.538 ± 1802.128  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_containsAnyArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_containsAnyArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10400156.961 ops/s
# Warmup Iteration   2: 22531106.307 ops/s
# Warmup Iteration   3: 18885173.955 ops/s
# Warmup Iteration   4: 22636697.260 ops/s
# Warmup Iteration   5: 22622696.378 ops/s
# Warmup Iteration   6: 22669571.073 ops/s
# Warmup Iteration   7: 22667721.041 ops/s
# Warmup Iteration   8: 22685673.800 ops/s
# Warmup Iteration   9: 22670909.124 ops/s
# Warmup Iteration  10: 22670750.917 ops/s
# Warmup Iteration  11: 22654107.012 ops/s
# Warmup Iteration  12: 22659205.557 ops/s
# Warmup Iteration  13: 22668786.638 ops/s
# Warmup Iteration  14: 22636265.961 ops/s
# Warmup Iteration  15: 22669923.038 ops/s
# Warmup Iteration  16: 22709837.869 ops/s
# Warmup Iteration  17: 22692690.165 ops/s
# Warmup Iteration  18: 22662482.045 ops/s
# Warmup Iteration  19: 22676598.334 ops/s
# Warmup Iteration  20: 22685593.111 ops/s
# Warmup Iteration  21: 22650797.372 ops/s
# Warmup Iteration  22: 22645018.791 ops/s
# Warmup Iteration  23: 22669164.475 ops/s
# Warmup Iteration  24: 22702544.869 ops/s
# Warmup Iteration  25: 22692778.998 ops/s
# Warmup Iteration  26: 22680864.409 ops/s
# Warmup Iteration  27: 22705557.278 ops/s
# Warmup Iteration  28: 22634300.083 ops/s
# Warmup Iteration  29: 22569536.922 ops/s
# Warmup Iteration  30: 22678213.454 ops/s
Iteration   1: 22699271.785 ops/s
Iteration   2: 22693110.767 ops/s
Iteration   3: 22715360.230 ops/s
Iteration   4: 22630604.461 ops/s
Iteration   5: 22599583.386 ops/s
Iteration   6: 22709930.335 ops/s
Iteration   7: 22711547.724 ops/s
Iteration   8: 22663463.516 ops/s
Iteration   9: 22663451.400 ops/s
Iteration  10: 22581174.413 ops/s
Iteration  11: 22690297.030 ops/s
Iteration  12: 22670407.750 ops/s
Iteration  13: 22675003.195 ops/s
Iteration  14: 22654058.654 ops/s
Iteration  15: 22679842.624 ops/s
Iteration  16: 22722351.682 ops/s
Iteration  17: 22665720.086 ops/s
Iteration  18: 22653355.760 ops/s
Iteration  19: 22679268.682 ops/s
Iteration  20: 22648756.604 ops/s
Iteration  21: 22664675.519 ops/s
Iteration  22: 22704638.884 ops/s
Iteration  23: 22657089.038 ops/s
Iteration  24: 22746142.865 ops/s
Iteration  25: 22620437.994 ops/s
Iteration  26: 22694625.716 ops/s
Iteration  27: 22729009.735 ops/s
Iteration  28: 22654968.558 ops/s
Iteration  29: 22702359.661 ops/s
Iteration  30: 22636774.716 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_containsAnyArray":
  22673909.426 ±(99.9%) 25204.760 ops/s [Average]
  (min, avg, max) = (22581174.413, 22673909.426, 22746142.865), stdev = 37725.302
  CI (99.9%): [22648704.665, 22699114.186] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt         Score       Error  Units
ImmutableBooleanArrayListTest._Benchmark.benchmark_containsAnyArray  thrpt   30  22673909.426 ± 25204.760  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_containsAnyIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_containsAnyIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 851014.709 ops/s
# Warmup Iteration   2: 1229557.289 ops/s
# Warmup Iteration   3: 1418776.210 ops/s
# Warmup Iteration   4: 1421683.864 ops/s
# Warmup Iteration   5: 1417808.874 ops/s
# Warmup Iteration   6: 1417733.258 ops/s
# Warmup Iteration   7: 1188207.925 ops/s
# Warmup Iteration   8: 1418085.745 ops/s
# Warmup Iteration   9: 1421656.283 ops/s
# Warmup Iteration  10: 1422112.455 ops/s
# Warmup Iteration  11: 1411545.167 ops/s
# Warmup Iteration  12: 1419897.948 ops/s
# Warmup Iteration  13: 1421169.966 ops/s
# Warmup Iteration  14: 1420671.547 ops/s
# Warmup Iteration  15: 1417368.101 ops/s
# Warmup Iteration  16: 1419757.463 ops/s
# Warmup Iteration  17: 1418453.581 ops/s
# Warmup Iteration  18: 1418549.375 ops/s
# Warmup Iteration  19: 1417319.319 ops/s
# Warmup Iteration  20: 1416127.162 ops/s
# Warmup Iteration  21: 1418289.043 ops/s
# Warmup Iteration  22: 1417154.066 ops/s
# Warmup Iteration  23: 1419044.858 ops/s
# Warmup Iteration  24: 1413744.048 ops/s
# Warmup Iteration  25: 1415149.747 ops/s
# Warmup Iteration  26: 1415204.232 ops/s
# Warmup Iteration  27: 1418158.380 ops/s
# Warmup Iteration  28: 1415312.602 ops/s
# Warmup Iteration  29: 1418219.866 ops/s
# Warmup Iteration  30: 1418721.042 ops/s
Iteration   1: 1419741.586 ops/s
Iteration   2: 1417122.422 ops/s
Iteration   3: 1421361.537 ops/s
Iteration   4: 1408786.780 ops/s
Iteration   5: 1413978.877 ops/s
Iteration   6: 1418486.867 ops/s
Iteration   7: 1421633.833 ops/s
Iteration   8: 1419126.173 ops/s
Iteration   9: 1417852.818 ops/s
Iteration  10: 1419983.548 ops/s
Iteration  11: 1414725.768 ops/s
Iteration  12: 1420640.948 ops/s
Iteration  13: 1415770.423 ops/s
Iteration  14: 1419068.418 ops/s
Iteration  15: 1417643.340 ops/s
Iteration  16: 1413354.490 ops/s
Iteration  17: 1415972.186 ops/s
Iteration  18: 1419678.855 ops/s
Iteration  19: 1414269.150 ops/s
Iteration  20: 1416400.630 ops/s
Iteration  21: 1418524.114 ops/s
Iteration  22: 1416920.927 ops/s
Iteration  23: 1419903.264 ops/s
Iteration  24: 1417406.567 ops/s
Iteration  25: 1417117.523 ops/s
Iteration  26: 1415968.517 ops/s
Iteration  27: 1416487.717 ops/s
Iteration  28: 1413234.846 ops/s
Iteration  29: 1419775.375 ops/s
Iteration  30: 1416264.126 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_containsAnyIterable":
  1417240.054 ±(99.9%) 1872.930 ops/s [Average]
  (min, avg, max) = (1408786.780, 1417240.054, 1421633.833), stdev = 2803.314
  CI (99.9%): [1415367.124, 1419112.984] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
ImmutableBooleanArrayListTest._Benchmark.benchmark_containsAnyIterable  thrpt   30  1417240.054 ± 1872.930  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_containsNoneArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_containsNoneArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10402057.249 ops/s
# Warmup Iteration   2: 21782378.920 ops/s
# Warmup Iteration   3: 18593491.983 ops/s
# Warmup Iteration   4: 22595615.226 ops/s
# Warmup Iteration   5: 22589078.356 ops/s
# Warmup Iteration   6: 22628772.329 ops/s
# Warmup Iteration   7: 22583222.422 ops/s
# Warmup Iteration   8: 22536734.412 ops/s
# Warmup Iteration   9: 22574833.296 ops/s
# Warmup Iteration  10: 22593911.632 ops/s
# Warmup Iteration  11: 22579572.490 ops/s
# Warmup Iteration  12: 22594586.169 ops/s
# Warmup Iteration  13: 22604329.946 ops/s
# Warmup Iteration  14: 22613628.006 ops/s
# Warmup Iteration  15: 22590463.090 ops/s
# Warmup Iteration  16: 22596571.050 ops/s
# Warmup Iteration  17: 22610189.013 ops/s
# Warmup Iteration  18: 22625363.125 ops/s
# Warmup Iteration  19: 22598687.645 ops/s
# Warmup Iteration  20: 22625457.799 ops/s
# Warmup Iteration  21: 22658793.228 ops/s
# Warmup Iteration  22: 22614632.652 ops/s
# Warmup Iteration  23: 22615699.185 ops/s
# Warmup Iteration  24: 22577668.874 ops/s
# Warmup Iteration  25: 22552657.397 ops/s
# Warmup Iteration  26: 22624661.476 ops/s
# Warmup Iteration  27: 22594704.108 ops/s
# Warmup Iteration  28: 22599376.184 ops/s
# Warmup Iteration  29: 22586410.774 ops/s
# Warmup Iteration  30: 22643776.290 ops/s
Iteration   1: 22625238.545 ops/s
Iteration   2: 22671230.559 ops/s
Iteration   3: 22629917.024 ops/s
Iteration   4: 22631852.897 ops/s
Iteration   5: 22611596.292 ops/s
Iteration   6: 22570474.284 ops/s
Iteration   7: 22631163.538 ops/s
Iteration   8: 22605493.070 ops/s
Iteration   9: 22658926.681 ops/s
Iteration  10: 22648860.795 ops/s
Iteration  11: 22610013.566 ops/s
Iteration  12: 22609606.204 ops/s
Iteration  13: 22520582.966 ops/s
Iteration  14: 22624981.598 ops/s
Iteration  15: 22637152.895 ops/s
Iteration  16: 22539711.171 ops/s
Iteration  17: 22547686.841 ops/s
Iteration  18: 22634873.759 ops/s
Iteration  19: 22588315.691 ops/s
Iteration  20: 22660273.252 ops/s
Iteration  21: 22594644.506 ops/s
Iteration  22: 22625425.085 ops/s
Iteration  23: 22612562.473 ops/s
Iteration  24: 22572145.753 ops/s
Iteration  25: 22609658.064 ops/s
Iteration  26: 22548677.402 ops/s
Iteration  27: 22591431.705 ops/s
Iteration  28: 22588239.859 ops/s
Iteration  29: 20925232.011 ops/s
Iteration  30: 22695828.210 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_containsNoneArray":
  22554059.890 ±(99.9%) 207252.905 ops/s [Average]
  (min, avg, max) = (20925232.011, 22554059.890, 22695828.210), stdev = 310206.415
  CI (99.9%): [22346806.985, 22761312.795] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt         Score        Error  Units
ImmutableBooleanArrayListTest._Benchmark.benchmark_containsNoneArray  thrpt   30  22554059.890 ± 207252.905  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_containsNoneIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_containsNoneIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 789637.949 ops/s
# Warmup Iteration   2: 1124847.096 ops/s
# Warmup Iteration   3: 1305077.915 ops/s
# Warmup Iteration   4: 1306982.453 ops/s
# Warmup Iteration   5: 1307440.846 ops/s
# Warmup Iteration   6: 1305184.686 ops/s
# Warmup Iteration   7: 1087820.377 ops/s
# Warmup Iteration   8: 1308776.645 ops/s
# Warmup Iteration   9: 1308598.539 ops/s
# Warmup Iteration  10: 1307158.653 ops/s
# Warmup Iteration  11: 1307502.651 ops/s
# Warmup Iteration  12: 1307757.769 ops/s
# Warmup Iteration  13: 1307605.172 ops/s
# Warmup Iteration  14: 1305961.381 ops/s
# Warmup Iteration  15: 1306792.052 ops/s
# Warmup Iteration  16: 1307198.317 ops/s
# Warmup Iteration  17: 1308482.637 ops/s
# Warmup Iteration  18: 1307176.853 ops/s
# Warmup Iteration  19: 1306727.711 ops/s
# Warmup Iteration  20: 1307054.996 ops/s
# Warmup Iteration  21: 1308009.063 ops/s
# Warmup Iteration  22: 1307230.043 ops/s
# Warmup Iteration  23: 1306831.334 ops/s
# Warmup Iteration  24: 1308159.322 ops/s
# Warmup Iteration  25: 1306551.331 ops/s
# Warmup Iteration  26: 1306656.648 ops/s
# Warmup Iteration  27: 1305437.068 ops/s
# Warmup Iteration  28: 1306868.607 ops/s
# Warmup Iteration  29: 1306357.574 ops/s
# Warmup Iteration  30: 1306120.428 ops/s
Iteration   1: 1307032.415 ops/s
Iteration   2: 1307475.951 ops/s
Iteration   3: 1304126.890 ops/s
Iteration   4: 1307353.459 ops/s
Iteration   5: 1307296.146 ops/s
Iteration   6: 1306831.090 ops/s
Iteration   7: 1294750.029 ops/s
Iteration   8: 1304736.948 ops/s
Iteration   9: 1309277.206 ops/s
Iteration  10: 1306989.891 ops/s
Iteration  11: 1308183.317 ops/s
Iteration  12: 1306588.625 ops/s
Iteration  13: 1307502.503 ops/s
Iteration  14: 1308226.750 ops/s
Iteration  15: 1306647.741 ops/s
Iteration  16: 1304552.750 ops/s
Iteration  17: 1303960.501 ops/s
Iteration  18: 1309414.847 ops/s
Iteration  19: 1307790.312 ops/s
Iteration  20: 1312177.432 ops/s
Iteration  21: 1305994.253 ops/s
Iteration  22: 1306668.572 ops/s
Iteration  23: 1305607.937 ops/s
Iteration  24: 1307069.421 ops/s
Iteration  25: 1307751.785 ops/s
Iteration  26: 1305571.772 ops/s
Iteration  27: 1306764.500 ops/s
Iteration  28: 1305581.383 ops/s
Iteration  29: 1306873.688 ops/s
Iteration  30: 1300889.507 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_containsNoneIterable":
  1306322.921 ±(99.9%) 1970.927 ops/s [Average]
  (min, avg, max) = (1294750.029, 1306322.921, 1312177.432), stdev = 2949.991
  CI (99.9%): [1304351.994, 1308293.847] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score      Error  Units
ImmutableBooleanArrayListTest._Benchmark.benchmark_containsNoneIterable  thrpt   30  1306322.921 ± 1970.927  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3997642.104 ops/s
# Warmup Iteration   2: 7148900.249 ops/s
# Warmup Iteration   3: 7677600.369 ops/s
# Warmup Iteration   4: 7683309.483 ops/s
# Warmup Iteration   5: 6674047.464 ops/s
# Warmup Iteration   6: 7375738.326 ops/s
# Warmup Iteration   7: 7690600.965 ops/s
# Warmup Iteration   8: 7685463.766 ops/s
# Warmup Iteration   9: 7683262.446 ops/s
# Warmup Iteration  10: 7682011.126 ops/s
# Warmup Iteration  11: 7687672.793 ops/s
# Warmup Iteration  12: 7684618.132 ops/s
# Warmup Iteration  13: 7682300.708 ops/s
# Warmup Iteration  14: 7682044.916 ops/s
# Warmup Iteration  15: 7665328.875 ops/s
# Warmup Iteration  16: 7659194.052 ops/s
# Warmup Iteration  17: 7678899.934 ops/s
# Warmup Iteration  18: 7660438.098 ops/s
# Warmup Iteration  19: 7687788.060 ops/s
# Warmup Iteration  20: 7681650.853 ops/s
# Warmup Iteration  21: 7670236.532 ops/s
# Warmup Iteration  22: 7669857.917 ops/s
# Warmup Iteration  23: 7651120.026 ops/s
# Warmup Iteration  24: 7674639.973 ops/s
# Warmup Iteration  25: 7690425.750 ops/s
# Warmup Iteration  26: 7683229.715 ops/s
# Warmup Iteration  27: 7691737.724 ops/s
# Warmup Iteration  28: 7690547.892 ops/s
# Warmup Iteration  29: 7696339.456 ops/s
# Warmup Iteration  30: 7687874.454 ops/s
Iteration   1: 7701716.106 ops/s
Iteration   2: 7689440.284 ops/s
Iteration   3: 7698607.508 ops/s
Iteration   4: 7689108.884 ops/s
Iteration   5: 7681063.041 ops/s
Iteration   6: 7686110.680 ops/s
Iteration   7: 7686831.061 ops/s
Iteration   8: 7661201.873 ops/s
Iteration   9: 7647702.730 ops/s
Iteration  10: 7672103.545 ops/s
Iteration  11: 7686059.780 ops/s
Iteration  12: 7648776.231 ops/s
Iteration  13: 7679872.008 ops/s
Iteration  14: 7690912.568 ops/s
Iteration  15: 7678828.815 ops/s
Iteration  16: 7676906.569 ops/s
Iteration  17: 7687021.410 ops/s
Iteration  18: 7686678.510 ops/s
Iteration  19: 7694125.242 ops/s
Iteration  20: 7670320.542 ops/s
Iteration  21: 7679399.876 ops/s
Iteration  22: 7688061.381 ops/s
Iteration  23: 7680546.664 ops/s
Iteration  24: 7683256.614 ops/s
Iteration  25: 7690336.591 ops/s
Iteration  26: 7678207.659 ops/s
Iteration  27: 7694692.673 ops/s
Iteration  28: 7683843.249 ops/s
Iteration  29: 7687218.623 ops/s
Iteration  30: 7662527.004 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_count":
  7681382.591 ±(99.9%) 8577.324 ops/s [Average]
  (min, avg, max) = (7647702.730, 7681382.591, 7701716.106), stdev = 12838.136
  CI (99.9%): [7672805.267, 7689959.915] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ImmutableBooleanArrayListTest._Benchmark.benchmark_count  thrpt   30  7681382.591 ± 8577.324  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5230028.227 ops/s
# Warmup Iteration   2: 10826073.592 ops/s
# Warmup Iteration   3: 10798154.071 ops/s
# Warmup Iteration   4: 9084996.098 ops/s
# Warmup Iteration   5: 10819905.439 ops/s
# Warmup Iteration   6: 10829173.169 ops/s
# Warmup Iteration   7: 10824303.578 ops/s
# Warmup Iteration   8: 10812135.433 ops/s
# Warmup Iteration   9: 10817268.920 ops/s
# Warmup Iteration  10: 10814291.359 ops/s
# Warmup Iteration  11: 10822751.527 ops/s
# Warmup Iteration  12: 10808524.590 ops/s
# Warmup Iteration  13: 10811473.755 ops/s
# Warmup Iteration  14: 10822155.029 ops/s
# Warmup Iteration  15: 10819262.013 ops/s
# Warmup Iteration  16: 10794744.283 ops/s
# Warmup Iteration  17: 10818954.670 ops/s
# Warmup Iteration  18: 10817956.004 ops/s
# Warmup Iteration  19: 10844297.945 ops/s
# Warmup Iteration  20: 10748837.687 ops/s
# Warmup Iteration  21: 10827157.873 ops/s
# Warmup Iteration  22: 10807090.512 ops/s
# Warmup Iteration  23: 10819917.502 ops/s
# Warmup Iteration  24: 10824669.292 ops/s
# Warmup Iteration  25: 10816251.671 ops/s
# Warmup Iteration  26: 10823005.688 ops/s
# Warmup Iteration  27: 10810030.698 ops/s
# Warmup Iteration  28: 10776545.904 ops/s
# Warmup Iteration  29: 10812047.385 ops/s
# Warmup Iteration  30: 10809500.127 ops/s
Iteration   1: 10833671.317 ops/s
Iteration   2: 10838614.630 ops/s
Iteration   3: 10779508.716 ops/s
Iteration   4: 10839325.702 ops/s
Iteration   5: 10831331.616 ops/s
Iteration   6: 10809795.266 ops/s
Iteration   7: 10834039.478 ops/s
Iteration   8: 10823635.953 ops/s
Iteration   9: 10844042.599 ops/s
Iteration  10: 10816954.182 ops/s
Iteration  11: 10840434.744 ops/s
Iteration  12: 10804920.557 ops/s
Iteration  13: 10823402.083 ops/s
Iteration  14: 10837482.956 ops/s
Iteration  15: 10822262.968 ops/s
Iteration  16: 10824524.048 ops/s
Iteration  17: 10830869.960 ops/s
Iteration  18: 10821907.098 ops/s
Iteration  19: 10822343.311 ops/s
Iteration  20: 10810457.575 ops/s
Iteration  21: 10810006.112 ops/s
Iteration  22: 10820596.729 ops/s
Iteration  23: 10841616.759 ops/s
Iteration  24: 10805516.972 ops/s
Iteration  25: 10831007.141 ops/s
Iteration  26: 10840582.163 ops/s
Iteration  27: 10833727.191 ops/s
Iteration  28: 10825927.518 ops/s
Iteration  29: 10831484.019 ops/s
Iteration  30: 10821411.942 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_detectIfNone":
  10825046.710 ±(99.9%) 9365.243 ops/s [Average]
  (min, avg, max) = (10779508.716, 10825046.710, 10844042.599), stdev = 14017.456
  CI (99.9%): [10815681.467, 10834411.953] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score      Error  Units
ImmutableBooleanArrayListTest._Benchmark.benchmark_detectIfNone  thrpt   30  10825046.710 ± 9365.243  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2284566.915 ops/s
# Warmup Iteration   2: 4596734.236 ops/s
# Warmup Iteration   3: 3907755.157 ops/s
# Warmup Iteration   4: 4626131.837 ops/s
# Warmup Iteration   5: 4625695.829 ops/s
# Warmup Iteration   6: 4623854.945 ops/s
# Warmup Iteration   7: 4624996.266 ops/s
# Warmup Iteration   8: 4626235.545 ops/s
# Warmup Iteration   9: 4609699.614 ops/s
# Warmup Iteration  10: 4617410.268 ops/s
# Warmup Iteration  11: 4614197.477 ops/s
# Warmup Iteration  12: 4612963.665 ops/s
# Warmup Iteration  13: 4628895.351 ops/s
# Warmup Iteration  14: 4612512.228 ops/s
# Warmup Iteration  15: 4629119.701 ops/s
# Warmup Iteration  16: 4617330.228 ops/s
# Warmup Iteration  17: 4626965.394 ops/s
# Warmup Iteration  18: 4630529.545 ops/s
# Warmup Iteration  19: 4628834.816 ops/s
# Warmup Iteration  20: 4590965.776 ops/s
# Warmup Iteration  21: 4630939.150 ops/s
# Warmup Iteration  22: 4618416.252 ops/s
# Warmup Iteration  23: 4628113.092 ops/s
# Warmup Iteration  24: 4628487.397 ops/s
# Warmup Iteration  25: 4628718.772 ops/s
# Warmup Iteration  26: 4613715.050 ops/s
# Warmup Iteration  27: 4619638.445 ops/s
# Warmup Iteration  28: 4623831.454 ops/s
# Warmup Iteration  29: 4629112.068 ops/s
# Warmup Iteration  30: 4612522.929 ops/s
Iteration   1: 4620930.406 ops/s
Iteration   2: 4627870.678 ops/s
Iteration   3: 4625566.337 ops/s
Iteration   4: 4630106.846 ops/s
Iteration   5: 4618176.372 ops/s
Iteration   6: 4619565.664 ops/s
Iteration   7: 4631366.110 ops/s
Iteration   8: 4630440.769 ops/s
Iteration   9: 4601130.841 ops/s
Iteration  10: 4602075.502 ops/s
Iteration  11: 4620042.008 ops/s
Iteration  12: 4616634.653 ops/s
Iteration  13: 4629979.046 ops/s
Iteration  14: 4622399.092 ops/s
Iteration  15: 4600640.635 ops/s
Iteration  16: 4639670.653 ops/s
Iteration  17: 4624748.145 ops/s
Iteration  18: 4613552.308 ops/s
Iteration  19: 4615154.023 ops/s
Iteration  20: 4625582.935 ops/s
Iteration  21: 4623909.171 ops/s
Iteration  22: 4622085.709 ops/s
Iteration  23: 4628360.496 ops/s
Iteration  24: 4643623.614 ops/s
Iteration  25: 4600148.098 ops/s
Iteration  26: 4603451.239 ops/s
Iteration  27: 4623852.376 ops/s
Iteration  28: 4627068.253 ops/s
Iteration  29: 4630686.271 ops/s
Iteration  30: 4629053.962 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_forEach":
  4621595.740 ±(99.9%) 7456.622 ops/s [Average]
  (min, avg, max) = (4600148.098, 4621595.740, 4643623.614), stdev = 11160.721
  CI (99.9%): [4614139.119, 4629052.362] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableBooleanArrayListTest._Benchmark.benchmark_forEach  thrpt   30  4621595.740 ± 7456.622  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_forEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_forEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2983786.300 ops/s
# Warmup Iteration   2: 5930196.920 ops/s
# Warmup Iteration   3: 5101375.248 ops/s
# Warmup Iteration   4: 6077803.197 ops/s
# Warmup Iteration   5: 6057203.342 ops/s
# Warmup Iteration   6: 6078063.829 ops/s
# Warmup Iteration   7: 6072061.193 ops/s
# Warmup Iteration   8: 6065624.130 ops/s
# Warmup Iteration   9: 6073679.360 ops/s
# Warmup Iteration  10: 6066260.291 ops/s
# Warmup Iteration  11: 6086949.153 ops/s
# Warmup Iteration  12: 6065515.051 ops/s
# Warmup Iteration  13: 6073443.927 ops/s
# Warmup Iteration  14: 6068575.135 ops/s
# Warmup Iteration  15: 6074272.799 ops/s
# Warmup Iteration  16: 6056021.595 ops/s
# Warmup Iteration  17: 6066278.187 ops/s
# Warmup Iteration  18: 6078514.169 ops/s
# Warmup Iteration  19: 6073840.800 ops/s
# Warmup Iteration  20: 6062204.342 ops/s
# Warmup Iteration  21: 6074331.977 ops/s
# Warmup Iteration  22: 6071455.839 ops/s
# Warmup Iteration  23: 6079553.022 ops/s
# Warmup Iteration  24: 6077268.903 ops/s
# Warmup Iteration  25: 6077118.404 ops/s
# Warmup Iteration  26: 6075315.426 ops/s
# Warmup Iteration  27: 6080220.350 ops/s
# Warmup Iteration  28: 6069183.092 ops/s
# Warmup Iteration  29: 6073821.372 ops/s
# Warmup Iteration  30: 6070964.068 ops/s
Iteration   1: 6087892.546 ops/s
Iteration   2: 6088571.410 ops/s
Iteration   3: 6064062.742 ops/s
Iteration   4: 6090973.425 ops/s
Iteration   5: 6085885.865 ops/s
Iteration   6: 6072210.451 ops/s
Iteration   7: 6063276.327 ops/s
Iteration   8: 6078004.476 ops/s
Iteration   9: 6090005.143 ops/s
Iteration  10: 6084333.350 ops/s
Iteration  11: 6070618.354 ops/s
Iteration  12: 6074135.424 ops/s
Iteration  13: 6071699.307 ops/s
Iteration  14: 6078543.918 ops/s
Iteration  15: 6072980.330 ops/s
Iteration  16: 6099498.673 ops/s
Iteration  17: 6081885.732 ops/s
Iteration  18: 6085998.617 ops/s
Iteration  19: 6077579.174 ops/s
Iteration  20: 6087472.041 ops/s
Iteration  21: 6078959.311 ops/s
Iteration  22: 6075066.778 ops/s
Iteration  23: 6065249.618 ops/s
Iteration  24: 6070334.770 ops/s
Iteration  25: 6071601.481 ops/s
Iteration  26: 6082251.253 ops/s
Iteration  27: 6078212.624 ops/s
Iteration  28: 6076378.331 ops/s
Iteration  29: 6090261.582 ops/s
Iteration  30: 6079726.936 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_forEachWithIndex":
  6079122.333 ±(99.9%) 5875.470 ops/s [Average]
  (min, avg, max) = (6063276.327, 6079122.333, 6099498.673), stdev = 8794.128
  CI (99.9%): [6073246.863, 6084997.803] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
ImmutableBooleanArrayListTest._Benchmark.benchmark_forEachWithIndex  thrpt   30  6079122.333 ± 5875.470  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_get$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_get

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 28067818.165 ops/s
# Warmup Iteration   2: 52395544.484 ops/s
# Warmup Iteration   3: 44055664.389 ops/s
# Warmup Iteration   4: 52132402.487 ops/s
# Warmup Iteration   5: 52304243.000 ops/s
# Warmup Iteration   6: 52045160.254 ops/s
# Warmup Iteration   7: 51565177.180 ops/s
# Warmup Iteration   8: 52359654.825 ops/s
# Warmup Iteration   9: 51850326.177 ops/s
# Warmup Iteration  10: 51934569.615 ops/s
# Warmup Iteration  11: 51728962.956 ops/s
# Warmup Iteration  12: 51946295.568 ops/s
# Warmup Iteration  13: 51959789.074 ops/s
# Warmup Iteration  14: 52346069.556 ops/s
# Warmup Iteration  15: 52054155.403 ops/s
# Warmup Iteration  16: 52225735.102 ops/s
# Warmup Iteration  17: 51818468.196 ops/s
# Warmup Iteration  18: 51928691.923 ops/s
# Warmup Iteration  19: 51848461.503 ops/s
# Warmup Iteration  20: 51938526.249 ops/s
# Warmup Iteration  21: 52163710.924 ops/s
# Warmup Iteration  22: 52099308.302 ops/s
# Warmup Iteration  23: 51980363.458 ops/s
# Warmup Iteration  24: 51887909.054 ops/s
# Warmup Iteration  25: 52081260.313 ops/s
# Warmup Iteration  26: 52114196.715 ops/s
# Warmup Iteration  27: 52253527.174 ops/s
# Warmup Iteration  28: 51916436.209 ops/s
# Warmup Iteration  29: 52108854.041 ops/s
# Warmup Iteration  30: 52297456.345 ops/s
Iteration   1: 51848037.481 ops/s
Iteration   2: 51946753.016 ops/s
Iteration   3: 51425596.330 ops/s
Iteration   4: 51615669.365 ops/s
Iteration   5: 51965805.140 ops/s
Iteration   6: 51988668.405 ops/s
Iteration   7: 51879564.843 ops/s
Iteration   8: 51972559.852 ops/s
Iteration   9: 52418495.957 ops/s
Iteration  10: 52492044.356 ops/s
Iteration  11: 51932968.614 ops/s
Iteration  12: 51615128.073 ops/s
Iteration  13: 52013700.693 ops/s
Iteration  14: 51970518.141 ops/s
Iteration  15: 51939419.594 ops/s
Iteration  16: 51975105.503 ops/s
Iteration  17: 51963669.509 ops/s
Iteration  18: 51982694.350 ops/s
Iteration  19: 51672570.379 ops/s
Iteration  20: 51832246.814 ops/s
Iteration  21: 52416444.997 ops/s
Iteration  22: 52420152.513 ops/s
Iteration  23: 51696205.657 ops/s
Iteration  24: 51727349.391 ops/s
Iteration  25: 52442906.649 ops/s
Iteration  26: 51958083.849 ops/s
Iteration  27: 51882270.811 ops/s
Iteration  28: 51735357.782 ops/s
Iteration  29: 51872541.852 ops/s
Iteration  30: 52078398.676 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_get":
  51956030.953 ±(99.9%) 175240.532 ops/s [Average]
  (min, avg, max) = (51425596.330, 51956030.953, 52492044.356), stdev = 262291.798
  CI (99.9%): [51780790.422, 52131271.485] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score        Error  Units
ImmutableBooleanArrayListTest._Benchmark.benchmark_get  thrpt   30  51956030.953 ± 175240.532  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_getFirst$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_getFirst

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 34194032.386 ops/s
# Warmup Iteration   2: 53866405.270 ops/s
# Warmup Iteration   3: 57738196.171 ops/s
# Warmup Iteration   4: 58752268.460 ops/s
# Warmup Iteration   5: 58937505.408 ops/s
# Warmup Iteration   6: 58717600.254 ops/s
# Warmup Iteration   7: 58896723.170 ops/s
# Warmup Iteration   8: 58922541.275 ops/s
# Warmup Iteration   9: 58905444.805 ops/s
# Warmup Iteration  10: 59061968.633 ops/s
# Warmup Iteration  11: 58875795.388 ops/s
# Warmup Iteration  12: 58786845.823 ops/s
# Warmup Iteration  13: 58841500.498 ops/s
# Warmup Iteration  14: 58734839.809 ops/s
# Warmup Iteration  15: 58750966.986 ops/s
# Warmup Iteration  16: 58893050.375 ops/s
# Warmup Iteration  17: 58610253.619 ops/s
# Warmup Iteration  18: 58829070.520 ops/s
# Warmup Iteration  19: 58673412.869 ops/s
# Warmup Iteration  20: 58917183.317 ops/s
# Warmup Iteration  21: 58728566.479 ops/s
# Warmup Iteration  22: 58744208.823 ops/s
# Warmup Iteration  23: 58900990.919 ops/s
# Warmup Iteration  24: 58794479.102 ops/s
# Warmup Iteration  25: 58734177.440 ops/s
# Warmup Iteration  26: 58822889.394 ops/s
# Warmup Iteration  27: 58666594.921 ops/s
# Warmup Iteration  28: 58752692.170 ops/s
# Warmup Iteration  29: 58749560.747 ops/s
# Warmup Iteration  30: 58799210.264 ops/s
Iteration   1: 58932439.337 ops/s
Iteration   2: 58871900.595 ops/s
Iteration   3: 58996885.657 ops/s
Iteration   4: 58787565.658 ops/s
Iteration   5: 58967400.906 ops/s
Iteration   6: 59020870.725 ops/s
Iteration   7: 58753380.494 ops/s
Iteration   8: 58856815.676 ops/s
Iteration   9: 58721608.991 ops/s
Iteration  10: 58774005.733 ops/s
Iteration  11: 58864228.832 ops/s
Iteration  12: 58749739.957 ops/s
Iteration  13: 59079041.911 ops/s
Iteration  14: 58991182.968 ops/s
Iteration  15: 58859897.746 ops/s
Iteration  16: 58777007.870 ops/s
Iteration  17: 58731377.219 ops/s
Iteration  18: 59008580.404 ops/s
Iteration  19: 58733399.191 ops/s
Iteration  20: 58936958.942 ops/s
Iteration  21: 58773535.062 ops/s
Iteration  22: 58586252.393 ops/s
Iteration  23: 58731144.770 ops/s
Iteration  24: 58779355.733 ops/s
Iteration  25: 58863069.325 ops/s
Iteration  26: 58843023.393 ops/s
Iteration  27: 58800571.297 ops/s
Iteration  28: 59126264.286 ops/s
Iteration  29: 59014802.987 ops/s
Iteration  30: 58969996.506 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_getFirst":
  58863410.152 ±(99.9%) 84646.455 ops/s [Average]
  (min, avg, max) = (58586252.393, 58863410.152, 59126264.286), stdev = 126694.838
  CI (99.9%): [58778763.698, 58948056.607] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
ImmutableBooleanArrayListTest._Benchmark.benchmark_getFirst  thrpt   30  58863410.152 ± 84646.455  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_getLast$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_getLast

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 19050609.644 ops/s
# Warmup Iteration   2: 29338832.225 ops/s
# Warmup Iteration   3: 34962491.036 ops/s
# Warmup Iteration   4: 35625202.826 ops/s
# Warmup Iteration   5: 35577802.598 ops/s
# Warmup Iteration   6: 35625923.563 ops/s
# Warmup Iteration   7: 35733562.152 ops/s
# Warmup Iteration   8: 35522769.358 ops/s
# Warmup Iteration   9: 35655371.927 ops/s
# Warmup Iteration  10: 35628329.274 ops/s
# Warmup Iteration  11: 35650002.758 ops/s
# Warmup Iteration  12: 35746382.549 ops/s
# Warmup Iteration  13: 35950415.913 ops/s
# Warmup Iteration  14: 35667253.224 ops/s
# Warmup Iteration  15: 35860468.796 ops/s
# Warmup Iteration  16: 35842042.716 ops/s
# Warmup Iteration  17: 35779767.550 ops/s
# Warmup Iteration  18: 35811428.692 ops/s
# Warmup Iteration  19: 35880390.125 ops/s
# Warmup Iteration  20: 35833281.210 ops/s
# Warmup Iteration  21: 35750588.214 ops/s
# Warmup Iteration  22: 35898682.639 ops/s
# Warmup Iteration  23: 35750653.959 ops/s
# Warmup Iteration  24: 35770571.993 ops/s
# Warmup Iteration  25: 35880621.977 ops/s
# Warmup Iteration  26: 35696603.196 ops/s
# Warmup Iteration  27: 35725299.093 ops/s
# Warmup Iteration  28: 35735499.180 ops/s
# Warmup Iteration  29: 35847596.733 ops/s
# Warmup Iteration  30: 35798674.683 ops/s
Iteration   1: 35884353.586 ops/s
Iteration   2: 35841240.702 ops/s
Iteration   3: 35712000.656 ops/s
Iteration   4: 35826815.208 ops/s
Iteration   5: 35863293.480 ops/s
Iteration   6: 35677664.928 ops/s
Iteration   7: 36079253.268 ops/s
Iteration   8: 35584252.015 ops/s
Iteration   9: 35765167.058 ops/s
Iteration  10: 35938597.951 ops/s
Iteration  11: 35666513.344 ops/s
Iteration  12: 35918232.357 ops/s
Iteration  13: 35879407.272 ops/s
Iteration  14: 35700110.776 ops/s
Iteration  15: 35749326.912 ops/s
Iteration  16: 35715787.646 ops/s
Iteration  17: 35613737.147 ops/s
Iteration  18: 35426812.850 ops/s
Iteration  19: 35657087.120 ops/s
Iteration  20: 35530071.813 ops/s
Iteration  21: 35728708.678 ops/s
Iteration  22: 35845740.358 ops/s
Iteration  23: 35611468.164 ops/s
Iteration  24: 35708093.833 ops/s
Iteration  25: 35821607.750 ops/s
Iteration  26: 35661397.279 ops/s
Iteration  27: 35868692.753 ops/s
Iteration  28: 35910307.661 ops/s
Iteration  29: 35717608.704 ops/s
Iteration  30: 35867244.874 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_getLast":
  35759019.871 ±(99.9%) 92414.232 ops/s [Average]
  (min, avg, max) = (35426812.850, 35759019.871, 36079253.268), stdev = 138321.282
  CI (99.9%): [35666605.640, 35851434.103] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
ImmutableBooleanArrayListTest._Benchmark.benchmark_getLast  thrpt   30  35759019.871 ± 92414.232  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_get_throws_index_greater_than_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_get_throws_index_greater_than_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 770510.277 ops/s
# Warmup Iteration   2: 779884.028 ops/s
# Warmup Iteration   3: 1006184.071 ops/s
# Warmup Iteration   4: 1012932.992 ops/s
# Warmup Iteration   5: 1012214.154 ops/s
# Warmup Iteration   6: 1018129.116 ops/s
# Warmup Iteration   7: 1018309.340 ops/s
# Warmup Iteration   8: 1019845.586 ops/s
# Warmup Iteration   9: 1018963.835 ops/s
# Warmup Iteration  10: 1014757.303 ops/s
# Warmup Iteration  11: 1013821.750 ops/s
# Warmup Iteration  12: 854785.879 ops/s
# Warmup Iteration  13: 1017254.816 ops/s
# Warmup Iteration  14: 1014961.829 ops/s
# Warmup Iteration  15: 1016850.670 ops/s
# Warmup Iteration  16: 1017457.813 ops/s
# Warmup Iteration  17: 1077244.458 ops/s
# Warmup Iteration  18: 1076116.547 ops/s
# Warmup Iteration  19: 1076161.729 ops/s
# Warmup Iteration  20: 1075962.453 ops/s
# Warmup Iteration  21: 1075708.497 ops/s
# Warmup Iteration  22: 1073525.092 ops/s
# Warmup Iteration  23: 1077342.049 ops/s
# Warmup Iteration  24: 1073785.541 ops/s
# Warmup Iteration  25: 1077118.706 ops/s
# Warmup Iteration  26: 1075490.147 ops/s
# Warmup Iteration  27: 1078200.729 ops/s
# Warmup Iteration  28: 1077163.263 ops/s
# Warmup Iteration  29: 1076927.608 ops/s
# Warmup Iteration  30: 1074578.888 ops/s
Iteration   1: 1075241.333 ops/s
Iteration   2: 1076610.613 ops/s
Iteration   3: 1078385.658 ops/s
Iteration   4: 1075712.539 ops/s
Iteration   5: 1079137.963 ops/s
Iteration   6: 1076933.326 ops/s
Iteration   7: 1068400.705 ops/s
Iteration   8: 1076324.979 ops/s
Iteration   9: 1080333.083 ops/s
Iteration  10: 1078312.342 ops/s
Iteration  11: 1077948.992 ops/s
Iteration  12: 1078777.048 ops/s
Iteration  13: 1074522.637 ops/s
Iteration  14: 1073836.361 ops/s
Iteration  15: 1073362.540 ops/s
Iteration  16: 1079777.042 ops/s
Iteration  17: 1076820.621 ops/s
Iteration  18: 1076668.289 ops/s
Iteration  19: 1074717.034 ops/s
Iteration  20: 1078183.307 ops/s
Iteration  21: 1077504.081 ops/s
Iteration  22: 1078506.631 ops/s
Iteration  23: 1076765.939 ops/s
Iteration  24: 1078637.735 ops/s
Iteration  25: 1079524.808 ops/s
Iteration  26: 1078761.947 ops/s
Iteration  27: 1076320.078 ops/s
Iteration  28: 1077786.214 ops/s
Iteration  29: 1077105.438 ops/s
Iteration  30: 1076089.598 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_get_throws_index_greater_than_size":
  1076900.296 ±(99.9%) 1583.460 ops/s [Average]
  (min, avg, max) = (1068400.705, 1076900.296, 1080333.083), stdev = 2370.049
  CI (99.9%): [1075316.836, 1078483.756] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt        Score      Error  Units
ImmutableBooleanArrayListTest._Benchmark.benchmark_get_throws_index_greater_than_size  thrpt   30  1076900.296 ± 1583.460  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_get_throws_index_negative$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_get_throws_index_negative

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 772152.274 ops/s
# Warmup Iteration   2: 778961.125 ops/s
# Warmup Iteration   3: 1009489.342 ops/s
# Warmup Iteration   4: 1009323.446 ops/s
# Warmup Iteration   5: 1018308.862 ops/s
# Warmup Iteration   6: 1017774.420 ops/s
# Warmup Iteration   7: 1014596.257 ops/s
# Warmup Iteration   8: 1017516.724 ops/s
# Warmup Iteration   9: 1015683.817 ops/s
# Warmup Iteration  10: 1015034.774 ops/s
# Warmup Iteration  11: 1014254.402 ops/s
# Warmup Iteration  12: 857065.871 ops/s
# Warmup Iteration  13: 1017406.709 ops/s
# Warmup Iteration  14: 1015939.046 ops/s
# Warmup Iteration  15: 1014738.381 ops/s
# Warmup Iteration  16: 1017551.969 ops/s
# Warmup Iteration  17: 1089732.765 ops/s
# Warmup Iteration  18: 1089495.856 ops/s
# Warmup Iteration  19: 1088527.042 ops/s
# Warmup Iteration  20: 1086765.571 ops/s
# Warmup Iteration  21: 1092195.931 ops/s
# Warmup Iteration  22: 1088398.497 ops/s
# Warmup Iteration  23: 1088796.694 ops/s
# Warmup Iteration  24: 1088172.452 ops/s
# Warmup Iteration  25: 1089468.739 ops/s
# Warmup Iteration  26: 1088072.954 ops/s
# Warmup Iteration  27: 1090084.859 ops/s
# Warmup Iteration  28: 1087973.971 ops/s
# Warmup Iteration  29: 1089672.254 ops/s
# Warmup Iteration  30: 1089944.637 ops/s
Iteration   1: 1091643.717 ops/s
Iteration   2: 1090558.587 ops/s
Iteration   3: 1088305.441 ops/s
Iteration   4: 1090929.916 ops/s
Iteration   5: 1090969.379 ops/s
Iteration   6: 1091383.127 ops/s
Iteration   7: 1087573.182 ops/s
Iteration   8: 1089211.899 ops/s
Iteration   9: 1090262.354 ops/s
Iteration  10: 1089895.850 ops/s
Iteration  11: 1087507.636 ops/s
Iteration  12: 1090926.273 ops/s
Iteration  13: 1089765.056 ops/s
Iteration  14: 1087698.363 ops/s
Iteration  15: 1084567.785 ops/s
Iteration  16: 1091659.545 ops/s
Iteration  17: 1090260.889 ops/s
Iteration  18: 1089275.747 ops/s
Iteration  19: 1086004.596 ops/s
Iteration  20: 1092046.772 ops/s
Iteration  21: 1091519.775 ops/s
Iteration  22: 1090126.839 ops/s
Iteration  23: 1088346.351 ops/s
Iteration  24: 1090793.930 ops/s
Iteration  25: 1090018.503 ops/s
Iteration  26: 1086762.877 ops/s
Iteration  27: 900256.810 ops/s
Iteration  28: 912695.436 ops/s
Iteration  29: 1090184.128 ops/s
Iteration  30: 1090057.889 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_get_throws_index_negative":
  1077373.622 ±(99.9%) 31079.436 ops/s [Average]
  (min, avg, max) = (900256.810, 1077373.622, 1092046.772), stdev = 46518.241
  CI (99.9%): [1046294.185, 1108453.058] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
ImmutableBooleanArrayListTest._Benchmark.benchmark_get_throws_index_negative  thrpt   30  1077373.622 ± 31079.436  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_indexOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_indexOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12629500.624 ops/s
# Warmup Iteration   2: 20915103.936 ops/s
# Warmup Iteration   3: 24781999.612 ops/s
# Warmup Iteration   4: 24803664.271 ops/s
# Warmup Iteration   5: 24804975.203 ops/s
# Warmup Iteration   6: 24824580.547 ops/s
# Warmup Iteration   7: 24801039.907 ops/s
# Warmup Iteration   8: 24761559.202 ops/s
# Warmup Iteration   9: 24622499.813 ops/s
# Warmup Iteration  10: 24615367.367 ops/s
# Warmup Iteration  11: 24678671.185 ops/s
# Warmup Iteration  12: 24678346.914 ops/s
# Warmup Iteration  13: 24689688.021 ops/s
# Warmup Iteration  14: 24749535.475 ops/s
# Warmup Iteration  15: 24566924.343 ops/s
# Warmup Iteration  16: 24500885.544 ops/s
# Warmup Iteration  17: 24451645.489 ops/s
# Warmup Iteration  18: 24668782.664 ops/s
# Warmup Iteration  19: 24617695.435 ops/s
# Warmup Iteration  20: 24748215.574 ops/s
# Warmup Iteration  21: 24687559.592 ops/s
# Warmup Iteration  22: 24652237.285 ops/s
# Warmup Iteration  23: 24701039.035 ops/s
# Warmup Iteration  24: 24625377.132 ops/s
# Warmup Iteration  25: 24655152.223 ops/s
# Warmup Iteration  26: 24779865.573 ops/s
# Warmup Iteration  27: 24608226.683 ops/s
# Warmup Iteration  28: 24719704.011 ops/s
# Warmup Iteration  29: 24688451.428 ops/s
# Warmup Iteration  30: 24715451.402 ops/s
Iteration   1: 24715160.956 ops/s
Iteration   2: 24449309.937 ops/s
Iteration   3: 24733086.071 ops/s
Iteration   4: 24766592.243 ops/s
Iteration   5: 24839861.842 ops/s
Iteration   6: 24662961.944 ops/s
Iteration   7: 24607051.502 ops/s
Iteration   8: 24730698.337 ops/s
Iteration   9: 24670647.292 ops/s
Iteration  10: 24746708.558 ops/s
Iteration  11: 24870516.420 ops/s
Iteration  12: 24849275.433 ops/s
Iteration  13: 24690658.147 ops/s
Iteration  14: 24750655.472 ops/s
Iteration  15: 24781042.173 ops/s
Iteration  16: 24671037.485 ops/s
Iteration  17: 24756308.212 ops/s
Iteration  18: 24652201.718 ops/s
Iteration  19: 24707597.999 ops/s
Iteration  20: 24838423.436 ops/s
Iteration  21: 24792670.121 ops/s
Iteration  22: 24736613.113 ops/s
Iteration  23: 24691867.924 ops/s
Iteration  24: 24801580.625 ops/s
Iteration  25: 24844978.694 ops/s
Iteration  26: 24771004.544 ops/s
Iteration  27: 24776506.808 ops/s
Iteration  28: 24607850.369 ops/s
Iteration  29: 24809229.832 ops/s
Iteration  30: 24777456.165 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_indexOf":
  24736651.779 ±(99.9%) 59058.823 ops/s [Average]
  (min, avg, max) = (24449309.937, 24736651.779, 24870516.420), stdev = 88396.473
  CI (99.9%): [24677592.956, 24795710.602] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
ImmutableBooleanArrayListTest._Benchmark.benchmark_indexOf  thrpt   30  24736651.779 ± 59058.823  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11361547.861 ops/s
# Warmup Iteration   2: 25166521.963 ops/s
# Warmup Iteration   3: 24974767.743 ops/s
# Warmup Iteration   4: 20758563.136 ops/s
# Warmup Iteration   5: 24999554.664 ops/s
# Warmup Iteration   6: 24973460.273 ops/s
# Warmup Iteration   7: 25002124.141 ops/s
# Warmup Iteration   8: 25031273.374 ops/s
# Warmup Iteration   9: 25030475.446 ops/s
# Warmup Iteration  10: 25005133.176 ops/s
# Warmup Iteration  11: 25024415.314 ops/s
# Warmup Iteration  12: 24995398.530 ops/s
# Warmup Iteration  13: 25030676.955 ops/s
# Warmup Iteration  14: 25035588.543 ops/s
# Warmup Iteration  15: 25027121.240 ops/s
# Warmup Iteration  16: 23629846.135 ops/s
# Warmup Iteration  17: 24536387.113 ops/s
# Warmup Iteration  18: 24949080.204 ops/s
# Warmup Iteration  19: 24973869.814 ops/s
# Warmup Iteration  20: 25068094.738 ops/s
# Warmup Iteration  21: 25025029.718 ops/s
# Warmup Iteration  22: 25024239.020 ops/s
# Warmup Iteration  23: 25027121.603 ops/s
# Warmup Iteration  24: 24984228.801 ops/s
# Warmup Iteration  25: 25023830.941 ops/s
# Warmup Iteration  26: 25023802.950 ops/s
# Warmup Iteration  27: 25014184.303 ops/s
# Warmup Iteration  28: 25037715.360 ops/s
# Warmup Iteration  29: 25031007.110 ops/s
# Warmup Iteration  30: 25016429.570 ops/s
Iteration   1: 25003364.339 ops/s
Iteration   2: 25027255.889 ops/s
Iteration   3: 25051082.457 ops/s
Iteration   4: 25017683.978 ops/s
Iteration   5: 25056074.757 ops/s
Iteration   6: 25057929.249 ops/s
Iteration   7: 24969704.603 ops/s
Iteration   8: 24972480.210 ops/s
Iteration   9: 24874882.950 ops/s
Iteration  10: 24898734.399 ops/s
Iteration  11: 24840233.714 ops/s
Iteration  12: 25025272.039 ops/s
Iteration  13: 24919241.293 ops/s
Iteration  14: 24973331.698 ops/s
Iteration  15: 25003846.589 ops/s
Iteration  16: 25027591.405 ops/s
Iteration  17: 25010125.750 ops/s
Iteration  18: 24935897.862 ops/s
Iteration  19: 24978364.742 ops/s
Iteration  20: 25010593.388 ops/s
Iteration  21: 24995964.142 ops/s
Iteration  22: 25052096.273 ops/s
Iteration  23: 25074369.003 ops/s
Iteration  24: 24930658.681 ops/s
Iteration  25: 25044342.518 ops/s
Iteration  26: 25091590.609 ops/s
Iteration  27: 25045167.746 ops/s
Iteration  28: 25035751.818 ops/s
Iteration  29: 24989471.506 ops/s
Iteration  30: 24988543.869 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_injectInto":
  24996721.583 ±(99.9%) 39892.034 ops/s [Average]
  (min, avg, max) = (24840233.714, 24996721.583, 25091590.609), stdev = 59708.522
  CI (99.9%): [24956829.549, 25036613.616] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score       Error  Units
ImmutableBooleanArrayListTest._Benchmark.benchmark_injectInto  thrpt   30  24996721.583 ± 39892.034  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_injectIntoWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_injectIntoWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11957087.953 ops/s
# Warmup Iteration   2: 26351538.316 ops/s
# Warmup Iteration   3: 26121406.721 ops/s
# Warmup Iteration   4: 22829029.859 ops/s
# Warmup Iteration   5: 24811403.762 ops/s
# Warmup Iteration   6: 26124403.142 ops/s
# Warmup Iteration   7: 26122386.496 ops/s
# Warmup Iteration   8: 26026852.728 ops/s
# Warmup Iteration   9: 26102400.237 ops/s
# Warmup Iteration  10: 26135646.495 ops/s
# Warmup Iteration  11: 26113183.612 ops/s
# Warmup Iteration  12: 26133269.418 ops/s
# Warmup Iteration  13: 26135998.398 ops/s
# Warmup Iteration  14: 26137134.785 ops/s
# Warmup Iteration  15: 26118999.892 ops/s
# Warmup Iteration  16: 26108409.217 ops/s
# Warmup Iteration  17: 26148142.325 ops/s
# Warmup Iteration  18: 26024296.287 ops/s
# Warmup Iteration  19: 26116852.152 ops/s
# Warmup Iteration  20: 26109900.616 ops/s
# Warmup Iteration  21: 26095081.848 ops/s
# Warmup Iteration  22: 26121148.488 ops/s
# Warmup Iteration  23: 26116237.064 ops/s
# Warmup Iteration  24: 26184850.002 ops/s
# Warmup Iteration  25: 26136301.572 ops/s
# Warmup Iteration  26: 26097547.902 ops/s
# Warmup Iteration  27: 26109460.802 ops/s
# Warmup Iteration  28: 26119857.249 ops/s
# Warmup Iteration  29: 26066141.489 ops/s
# Warmup Iteration  30: 26118386.856 ops/s
Iteration   1: 26140528.000 ops/s
Iteration   2: 26119309.174 ops/s
Iteration   3: 26105210.653 ops/s
Iteration   4: 26160182.472 ops/s
Iteration   5: 26119686.774 ops/s
Iteration   6: 26112791.926 ops/s
Iteration   7: 26108956.597 ops/s
Iteration   8: 26067661.503 ops/s
Iteration   9: 26224542.912 ops/s
Iteration  10: 26073078.210 ops/s
Iteration  11: 26083726.692 ops/s
Iteration  12: 26096118.431 ops/s
Iteration  13: 26116606.548 ops/s
Iteration  14: 26221738.842 ops/s
Iteration  15: 26137802.970 ops/s
Iteration  16: 26131808.969 ops/s
Iteration  17: 26095552.745 ops/s
Iteration  18: 25870417.134 ops/s
Iteration  19: 25481853.228 ops/s
Iteration  20: 26109358.906 ops/s
Iteration  21: 26043354.455 ops/s
Iteration  22: 26081635.500 ops/s
Iteration  23: 26106728.122 ops/s
Iteration  24: 26026253.710 ops/s
Iteration  25: 26135426.494 ops/s
Iteration  26: 25962388.153 ops/s
Iteration  27: 26140638.401 ops/s
Iteration  28: 26113317.335 ops/s
Iteration  29: 26107933.930 ops/s
Iteration  30: 26123167.333 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_injectIntoWithIndex":
  26080592.537 ±(99.9%) 87434.563 ops/s [Average]
  (min, avg, max) = (25481853.228, 26080592.537, 26224542.912), stdev = 130867.947
  CI (99.9%): [25993157.974, 26168027.100] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt         Score       Error  Units
ImmutableBooleanArrayListTest._Benchmark.benchmark_injectIntoWithIndex  thrpt   30  26080592.537 ± 87434.563  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2605182.799 ops/s
# Warmup Iteration   2: 4088359.710 ops/s
# Warmup Iteration   3: 4780315.763 ops/s
# Warmup Iteration   4: 4767343.915 ops/s
# Warmup Iteration   5: 4785126.352 ops/s
# Warmup Iteration   6: 4730870.673 ops/s
# Warmup Iteration   7: 4774890.436 ops/s
# Warmup Iteration   8: 4780731.483 ops/s
# Warmup Iteration   9: 4743604.696 ops/s
# Warmup Iteration  10: 4763372.638 ops/s
# Warmup Iteration  11: 4757118.397 ops/s
# Warmup Iteration  12: 4779089.308 ops/s
# Warmup Iteration  13: 4782351.227 ops/s
# Warmup Iteration  14: 4792220.402 ops/s
# Warmup Iteration  15: 4776114.129 ops/s
# Warmup Iteration  16: 4745236.857 ops/s
# Warmup Iteration  17: 4790022.543 ops/s
# Warmup Iteration  18: 4705187.921 ops/s
# Warmup Iteration  19: 4740257.266 ops/s
# Warmup Iteration  20: 4765722.037 ops/s
# Warmup Iteration  21: 4760894.918 ops/s
# Warmup Iteration  22: 4764463.764 ops/s
# Warmup Iteration  23: 4743610.655 ops/s
# Warmup Iteration  24: 4767522.612 ops/s
# Warmup Iteration  25: 4780272.119 ops/s
# Warmup Iteration  26: 4780839.747 ops/s
# Warmup Iteration  27: 4748960.850 ops/s
# Warmup Iteration  28: 4786945.611 ops/s
# Warmup Iteration  29: 4760756.415 ops/s
# Warmup Iteration  30: 4728831.794 ops/s
Iteration   1: 4788227.058 ops/s
Iteration   2: 4736871.630 ops/s
Iteration   3: 4724512.441 ops/s
Iteration   4: 4819518.035 ops/s
Iteration   5: 4757867.525 ops/s
Iteration   6: 4763244.271 ops/s
Iteration   7: 4738462.449 ops/s
Iteration   8: 4718205.656 ops/s
Iteration   9: 4756824.760 ops/s
Iteration  10: 4741091.935 ops/s
Iteration  11: 4739779.606 ops/s
Iteration  12: 4702517.377 ops/s
Iteration  13: 4764973.307 ops/s
Iteration  14: 4754733.289 ops/s
Iteration  15: 4720543.789 ops/s
Iteration  16: 4752567.610 ops/s
Iteration  17: 4748155.421 ops/s
Iteration  18: 4783658.577 ops/s
Iteration  19: 4727677.051 ops/s
Iteration  20: 4797002.939 ops/s
Iteration  21: 4792638.217 ops/s
Iteration  22: 4771809.608 ops/s
Iteration  23: 4757220.355 ops/s
Iteration  24: 4738308.973 ops/s
Iteration  25: 4765200.528 ops/s
Iteration  26: 4752380.350 ops/s
Iteration  27: 4783999.707 ops/s
Iteration  28: 4749357.988 ops/s
Iteration  29: 4767687.816 ops/s
Iteration  30: 4768987.241 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_isEmpty":
  4756134.184 ±(99.9%) 17265.710 ops/s [Average]
  (min, avg, max) = (4702517.377, 4756134.184, 4819518.035), stdev = 25842.504
  CI (99.9%): [4738868.473, 4773399.894] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
ImmutableBooleanArrayListTest._Benchmark.benchmark_isEmpty  thrpt   30  4756134.184 ± 17265.710  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_iterator_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_iterator_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 734060.253 ops/s
# Warmup Iteration   2: 738725.282 ops/s
# Warmup Iteration   3: 890288.963 ops/s
# Warmup Iteration   4: 918480.583 ops/s
# Warmup Iteration   5: 935575.857 ops/s
# Warmup Iteration   6: 933192.361 ops/s
# Warmup Iteration   7: 931923.167 ops/s
# Warmup Iteration   8: 932035.610 ops/s
# Warmup Iteration   9: 934460.483 ops/s
# Warmup Iteration  10: 933851.446 ops/s
# Warmup Iteration  11: 934510.471 ops/s
# Warmup Iteration  12: 935466.288 ops/s
# Warmup Iteration  13: 852248.733 ops/s
# Warmup Iteration  14: 859880.813 ops/s
# Warmup Iteration  15: 933283.871 ops/s
# Warmup Iteration  16: 933842.175 ops/s
# Warmup Iteration  17: 991675.293 ops/s
# Warmup Iteration  18: 991239.464 ops/s
# Warmup Iteration  19: 991730.595 ops/s
# Warmup Iteration  20: 991420.238 ops/s
# Warmup Iteration  21: 990691.813 ops/s
# Warmup Iteration  22: 992012.916 ops/s
# Warmup Iteration  23: 989813.625 ops/s
# Warmup Iteration  24: 990873.335 ops/s
# Warmup Iteration  25: 990165.990 ops/s
# Warmup Iteration  26: 990627.566 ops/s
# Warmup Iteration  27: 990807.854 ops/s
# Warmup Iteration  28: 991322.061 ops/s
# Warmup Iteration  29: 989162.690 ops/s
# Warmup Iteration  30: 991560.057 ops/s
Iteration   1: 992629.656 ops/s
Iteration   2: 991443.821 ops/s
Iteration   3: 990985.883 ops/s
Iteration   4: 992841.153 ops/s
Iteration   5: 990729.554 ops/s
Iteration   6: 991787.403 ops/s
Iteration   7: 989636.712 ops/s
Iteration   8: 991984.963 ops/s
Iteration   9: 991861.475 ops/s
Iteration  10: 991583.745 ops/s
Iteration  11: 989014.505 ops/s
Iteration  12: 991049.428 ops/s
Iteration  13: 992966.611 ops/s
Iteration  14: 989260.148 ops/s
Iteration  15: 989535.670 ops/s
Iteration  16: 987524.387 ops/s
Iteration  17: 992579.960 ops/s
Iteration  18: 991383.969 ops/s
Iteration  19: 990816.260 ops/s
Iteration  20: 990030.879 ops/s
Iteration  21: 991529.788 ops/s
Iteration  22: 991091.591 ops/s
Iteration  23: 991089.816 ops/s
Iteration  24: 991840.084 ops/s
Iteration  25: 989773.183 ops/s
Iteration  26: 991765.525 ops/s
Iteration  27: 992128.802 ops/s
Iteration  28: 992562.032 ops/s
Iteration  29: 989624.164 ops/s
Iteration  30: 989970.462 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_iterator_throws":
  991034.054 ±(99.9%) 870.705 ops/s [Average]
  (min, avg, max) = (987524.387, 991034.054, 992966.611), stdev = 1303.230
  CI (99.9%): [990163.350, 991904.759] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score     Error  Units
ImmutableBooleanArrayListTest._Benchmark.benchmark_iterator_throws  thrpt   30  991034.054 ± 870.705  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_iterator_throws_emptyList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_iterator_throws_emptyList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 869531.798 ops/s
# Warmup Iteration   2: 876085.260 ops/s
# Warmup Iteration   3: 1045978.902 ops/s
# Warmup Iteration   4: 1110888.561 ops/s
# Warmup Iteration   5: 1113698.026 ops/s
# Warmup Iteration   6: 1112931.889 ops/s
# Warmup Iteration   7: 1115691.372 ops/s
# Warmup Iteration   8: 1114833.202 ops/s
# Warmup Iteration   9: 1115259.693 ops/s
# Warmup Iteration  10: 1112935.293 ops/s
# Warmup Iteration  11: 1115437.784 ops/s
# Warmup Iteration  12: 1112601.403 ops/s
# Warmup Iteration  13: 1096635.266 ops/s
# Warmup Iteration  14: 954219.060 ops/s
# Warmup Iteration  15: 1115889.568 ops/s
# Warmup Iteration  16: 1114875.312 ops/s
# Warmup Iteration  17: 1182603.578 ops/s
# Warmup Iteration  18: 1185229.879 ops/s
# Warmup Iteration  19: 1181423.247 ops/s
# Warmup Iteration  20: 1185139.696 ops/s
# Warmup Iteration  21: 1183686.066 ops/s
# Warmup Iteration  22: 1184676.164 ops/s
# Warmup Iteration  23: 1183066.097 ops/s
# Warmup Iteration  24: 1184779.106 ops/s
# Warmup Iteration  25: 1184372.728 ops/s
# Warmup Iteration  26: 1183633.187 ops/s
# Warmup Iteration  27: 1185289.713 ops/s
# Warmup Iteration  28: 1184491.172 ops/s
# Warmup Iteration  29: 1185341.843 ops/s
# Warmup Iteration  30: 1183493.388 ops/s
Iteration   1: 1186463.414 ops/s
Iteration   2: 1184640.468 ops/s
Iteration   3: 1184537.001 ops/s
Iteration   4: 1181402.770 ops/s
Iteration   5: 1184786.239 ops/s
Iteration   6: 1186392.119 ops/s
Iteration   7: 1185375.458 ops/s
Iteration   8: 1184527.933 ops/s
Iteration   9: 1181628.175 ops/s
Iteration  10: 1184601.936 ops/s
Iteration  11: 1183266.785 ops/s
Iteration  12: 1185155.344 ops/s
Iteration  13: 1182445.569 ops/s
Iteration  14: 1184163.851 ops/s
Iteration  15: 1183913.113 ops/s
Iteration  16: 1183795.457 ops/s
Iteration  17: 1184267.791 ops/s
Iteration  18: 1182073.051 ops/s
Iteration  19: 1176976.030 ops/s
Iteration  20: 1179851.898 ops/s
Iteration  21: 1183782.382 ops/s
Iteration  22: 1180730.746 ops/s
Iteration  23: 1182796.392 ops/s
Iteration  24: 1184701.807 ops/s
Iteration  25: 1183519.483 ops/s
Iteration  26: 1183107.806 ops/s
Iteration  27: 1178154.020 ops/s
Iteration  28: 1183598.019 ops/s
Iteration  29: 1185576.519 ops/s
Iteration  30: 1187132.903 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_iterator_throws_emptyList":
  1183445.483 ±(99.9%) 1538.714 ops/s [Average]
  (min, avg, max) = (1176976.030, 1183445.483, 1187132.903), stdev = 2303.075
  CI (99.9%): [1181906.769, 1184984.197] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score      Error  Units
ImmutableBooleanArrayListTest._Benchmark.benchmark_iterator_throws_emptyList  thrpt   30  1183445.483 ± 1538.714  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_iterator_throws_non_empty_collection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_iterator_throws_non_empty_collection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 718681.185 ops/s
# Warmup Iteration   2: 731917.436 ops/s
# Warmup Iteration   3: 872384.443 ops/s
# Warmup Iteration   4: 914977.076 ops/s
# Warmup Iteration   5: 922003.548 ops/s
# Warmup Iteration   6: 919244.372 ops/s
# Warmup Iteration   7: 918194.090 ops/s
# Warmup Iteration   8: 918423.216 ops/s
# Warmup Iteration   9: 922398.570 ops/s
# Warmup Iteration  10: 916226.485 ops/s
# Warmup Iteration  11: 920617.036 ops/s
# Warmup Iteration  12: 924042.160 ops/s
# Warmup Iteration  13: 880458.489 ops/s
# Warmup Iteration  14: 818734.382 ops/s
# Warmup Iteration  15: 922405.304 ops/s
# Warmup Iteration  16: 917763.739 ops/s
# Warmup Iteration  17: 972248.228 ops/s
# Warmup Iteration  18: 971223.038 ops/s
# Warmup Iteration  19: 971316.564 ops/s
# Warmup Iteration  20: 971899.444 ops/s
# Warmup Iteration  21: 970745.480 ops/s
# Warmup Iteration  22: 971919.741 ops/s
# Warmup Iteration  23: 970684.330 ops/s
# Warmup Iteration  24: 972849.932 ops/s
# Warmup Iteration  25: 970723.146 ops/s
# Warmup Iteration  26: 967159.231 ops/s
# Warmup Iteration  27: 971636.085 ops/s
# Warmup Iteration  28: 972234.443 ops/s
# Warmup Iteration  29: 970864.355 ops/s
# Warmup Iteration  30: 970970.261 ops/s
Iteration   1: 973314.599 ops/s
Iteration   2: 971655.310 ops/s
Iteration   3: 971358.695 ops/s
Iteration   4: 965806.674 ops/s
Iteration   5: 973655.989 ops/s
Iteration   6: 971999.569 ops/s
Iteration   7: 972650.209 ops/s
Iteration   8: 970776.681 ops/s
Iteration   9: 971832.554 ops/s
Iteration  10: 972924.178 ops/s
Iteration  11: 974123.351 ops/s
Iteration  12: 972102.792 ops/s
Iteration  13: 968328.117 ops/s
Iteration  14: 972376.828 ops/s
Iteration  15: 970647.991 ops/s
Iteration  16: 965944.422 ops/s
Iteration  17: 965169.151 ops/s
Iteration  18: 969643.395 ops/s
Iteration  19: 968467.643 ops/s
Iteration  20: 965679.608 ops/s
Iteration  21: 967452.784 ops/s
Iteration  22: 965274.958 ops/s
Iteration  23: 964821.504 ops/s
Iteration  24: 963896.223 ops/s
Iteration  25: 968563.877 ops/s
Iteration  26: 968521.605 ops/s
Iteration  27: 971906.038 ops/s
Iteration  28: 972206.921 ops/s
Iteration  29: 970912.709 ops/s
Iteration  30: 971176.910 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_iterator_throws_non_empty_collection":
  969773.043 ±(99.9%) 2029.458 ops/s [Average]
  (min, avg, max) = (963896.223, 969773.043, 974123.351), stdev = 3037.597
  CI (99.9%): [967743.585, 971802.501] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 Mode  Cnt       Score      Error  Units
ImmutableBooleanArrayListTest._Benchmark.benchmark_iterator_throws_non_empty_collection  thrpt   30  969773.043 ± 2029.458  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_lastIndexOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_lastIndexOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13009854.364 ops/s
# Warmup Iteration   2: 20828450.875 ops/s
# Warmup Iteration   3: 24869836.197 ops/s
# Warmup Iteration   4: 24665106.600 ops/s
# Warmup Iteration   5: 24627721.091 ops/s
# Warmup Iteration   6: 24717719.284 ops/s
# Warmup Iteration   7: 24843327.106 ops/s
# Warmup Iteration   8: 24784106.363 ops/s
# Warmup Iteration   9: 24821623.241 ops/s
# Warmup Iteration  10: 24840288.640 ops/s
# Warmup Iteration  11: 24826546.595 ops/s
# Warmup Iteration  12: 24484580.505 ops/s
# Warmup Iteration  13: 24818904.113 ops/s
# Warmup Iteration  14: 24846347.658 ops/s
# Warmup Iteration  15: 24788809.426 ops/s
# Warmup Iteration  16: 24801948.272 ops/s
# Warmup Iteration  17: 24808638.095 ops/s
# Warmup Iteration  18: 24743165.450 ops/s
# Warmup Iteration  19: 24746698.586 ops/s
# Warmup Iteration  20: 24812273.792 ops/s
# Warmup Iteration  21: 24673772.517 ops/s
# Warmup Iteration  22: 24688614.811 ops/s
# Warmup Iteration  23: 24774168.298 ops/s
# Warmup Iteration  24: 24850428.999 ops/s
# Warmup Iteration  25: 24747389.975 ops/s
# Warmup Iteration  26: 24682330.103 ops/s
# Warmup Iteration  27: 24592182.261 ops/s
# Warmup Iteration  28: 24780802.882 ops/s
# Warmup Iteration  29: 24677823.466 ops/s
# Warmup Iteration  30: 24716911.945 ops/s
Iteration   1: 24656218.207 ops/s
Iteration   2: 24602078.638 ops/s
Iteration   3: 24565897.101 ops/s
Iteration   4: 24731594.000 ops/s
Iteration   5: 24693075.639 ops/s
Iteration   6: 24673041.585 ops/s
Iteration   7: 24698559.068 ops/s
Iteration   8: 24612572.894 ops/s
Iteration   9: 24533124.194 ops/s
Iteration  10: 21912593.117 ops/s
Iteration  11: 24640500.661 ops/s
Iteration  12: 24678926.057 ops/s
Iteration  13: 24719312.060 ops/s
Iteration  14: 24607770.269 ops/s
Iteration  15: 24594591.380 ops/s
Iteration  16: 24720113.346 ops/s
Iteration  17: 24612647.832 ops/s
Iteration  18: 24784767.143 ops/s
Iteration  19: 24572630.807 ops/s
Iteration  20: 24870758.122 ops/s
Iteration  21: 24686033.293 ops/s
Iteration  22: 24673228.053 ops/s
Iteration  23: 24659906.688 ops/s
Iteration  24: 24759993.685 ops/s
Iteration  25: 24707386.224 ops/s
Iteration  26: 24608160.660 ops/s
Iteration  27: 24703335.870 ops/s
Iteration  28: 24620969.674 ops/s
Iteration  29: 24765871.102 ops/s
Iteration  30: 24776270.016 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_lastIndexOf":
  24581397.580 ±(99.9%) 340445.922 ops/s [Average]
  (min, avg, max) = (21912593.117, 24581397.580, 24870758.122), stdev = 509563.468
  CI (99.9%): [24240951.657, 24921843.502] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score        Error  Units
ImmutableBooleanArrayListTest._Benchmark.benchmark_lastIndexOf  thrpt   30  24581397.580 ± 340445.922  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 532882.781 ops/s
# Warmup Iteration   2: 1167286.812 ops/s
# Warmup Iteration   3: 1169438.448 ops/s
# Warmup Iteration   4: 979005.109 ops/s
# Warmup Iteration   5: 1163362.743 ops/s
# Warmup Iteration   6: 1164503.734 ops/s
# Warmup Iteration   7: 1162416.207 ops/s
# Warmup Iteration   8: 1161294.280 ops/s
# Warmup Iteration   9: 1164330.209 ops/s
# Warmup Iteration  10: 1163191.551 ops/s
# Warmup Iteration  11: 1156564.371 ops/s
# Warmup Iteration  12: 1159673.457 ops/s
# Warmup Iteration  13: 1153819.157 ops/s
# Warmup Iteration  14: 1150973.728 ops/s
# Warmup Iteration  15: 1149738.288 ops/s
# Warmup Iteration  16: 1153540.281 ops/s
# Warmup Iteration  17: 1158213.354 ops/s
# Warmup Iteration  18: 1158839.106 ops/s
# Warmup Iteration  19: 1159455.646 ops/s
# Warmup Iteration  20: 1160297.150 ops/s
# Warmup Iteration  21: 1160470.665 ops/s
# Warmup Iteration  22: 1165250.785 ops/s
# Warmup Iteration  23: 1161274.693 ops/s
# Warmup Iteration  24: 1161558.324 ops/s
# Warmup Iteration  25: 1162878.470 ops/s
# Warmup Iteration  26: 1155192.131 ops/s
# Warmup Iteration  27: 1159797.528 ops/s
# Warmup Iteration  28: 1161503.397 ops/s
# Warmup Iteration  29: 1157238.326 ops/s
# Warmup Iteration  30: 1157258.811 ops/s
Iteration   1: 1154620.954 ops/s
Iteration   2: 1159601.607 ops/s
Iteration   3: 1161182.676 ops/s
Iteration   4: 1152839.510 ops/s
Iteration   5: 1160566.837 ops/s
Iteration   6: 1161984.984 ops/s
Iteration   7: 1162021.607 ops/s
Iteration   8: 1162735.445 ops/s
Iteration   9: 1160569.002 ops/s
Iteration  10: 1159264.056 ops/s
Iteration  11: 1162705.350 ops/s
Iteration  12: 1160560.249 ops/s
Iteration  13: 1160859.489 ops/s
Iteration  14: 1163362.499 ops/s
Iteration  15: 1161877.908 ops/s
Iteration  16: 1153031.954 ops/s
Iteration  17: 1157417.883 ops/s
Iteration  18: 1154994.215 ops/s
Iteration  19: 1161531.570 ops/s
Iteration  20: 1156770.720 ops/s
Iteration  21: 1156568.642 ops/s
Iteration  22: 1142264.011 ops/s
Iteration  23: 1153495.188 ops/s
Iteration  24: 1154187.392 ops/s
Iteration  25: 1151889.926 ops/s
Iteration  26: 1157193.378 ops/s
Iteration  27: 1148644.851 ops/s
Iteration  28: 1155279.558 ops/s
Iteration  29: 1154207.057 ops/s
Iteration  30: 1158435.019 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_makeString":
  1157355.451 ±(99.9%) 3207.103 ops/s [Average]
  (min, avg, max) = (1142264.011, 1157355.451, 1163362.499), stdev = 4800.241
  CI (99.9%): [1154148.349, 1160562.554] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableBooleanArrayListTest._Benchmark.benchmark_makeString  thrpt   30  1157355.451 ± 3207.103  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_newCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_newCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5355126.064 ops/s
# Warmup Iteration   2: 10943513.791 ops/s
# Warmup Iteration   3: 9313416.606 ops/s
# Warmup Iteration   4: 11111931.942 ops/s
# Warmup Iteration   5: 11056802.882 ops/s
# Warmup Iteration   6: 11121467.043 ops/s
# Warmup Iteration   7: 11082568.609 ops/s
# Warmup Iteration   8: 11088762.714 ops/s
# Warmup Iteration   9: 11090421.273 ops/s
# Warmup Iteration  10: 11091076.116 ops/s
# Warmup Iteration  11: 11099347.527 ops/s
# Warmup Iteration  12: 11137250.736 ops/s
# Warmup Iteration  13: 11098363.976 ops/s
# Warmup Iteration  14: 11103335.046 ops/s
# Warmup Iteration  15: 11070835.177 ops/s
# Warmup Iteration  16: 11089353.696 ops/s
# Warmup Iteration  17: 11015706.272 ops/s
# Warmup Iteration  18: 11041849.353 ops/s
# Warmup Iteration  19: 11021937.768 ops/s
# Warmup Iteration  20: 11066361.390 ops/s
# Warmup Iteration  21: 11047827.423 ops/s
# Warmup Iteration  22: 11082453.948 ops/s
# Warmup Iteration  23: 11056319.236 ops/s
# Warmup Iteration  24: 11066730.440 ops/s
# Warmup Iteration  25: 11032912.291 ops/s
# Warmup Iteration  26: 11035217.778 ops/s
# Warmup Iteration  27: 11042614.177 ops/s
# Warmup Iteration  28: 11024678.966 ops/s
# Warmup Iteration  29: 11005813.910 ops/s
# Warmup Iteration  30: 11049975.265 ops/s
Iteration   1: 11053157.911 ops/s
Iteration   2: 11055818.485 ops/s
Iteration   3: 10958226.352 ops/s
Iteration   4: 10970673.442 ops/s
Iteration   5: 10980408.923 ops/s
Iteration   6: 11028377.543 ops/s
Iteration   7: 10976867.138 ops/s
Iteration   8: 11007018.970 ops/s
Iteration   9: 10994260.017 ops/s
Iteration  10: 11003817.607 ops/s
Iteration  11: 11032683.624 ops/s
Iteration  12: 11007233.519 ops/s
Iteration  13: 11092955.427 ops/s
Iteration  14: 10993038.596 ops/s
Iteration  15: 11012546.659 ops/s
Iteration  16: 11009380.720 ops/s
Iteration  17: 10955658.562 ops/s
Iteration  18: 10871030.312 ops/s
Iteration  19: 11043212.464 ops/s
Iteration  20: 11019155.813 ops/s
Iteration  21: 11070040.427 ops/s
Iteration  22: 11056966.737 ops/s
Iteration  23: 10959483.020 ops/s
Iteration  24: 11037852.873 ops/s
Iteration  25: 11084848.924 ops/s
Iteration  26: 11090484.607 ops/s
Iteration  27: 11062538.041 ops/s
Iteration  28: 11061525.193 ops/s
Iteration  29: 11064549.599 ops/s
Iteration  30: 11084346.470 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_newCollection":
  11021271.933 ±(99.9%) 33582.783 ops/s [Average]
  (min, avg, max) = (10871030.312, 11021271.933, 11092955.427), stdev = 50265.132
  CI (99.9%): [10987689.150, 11054854.715] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
ImmutableBooleanArrayListTest._Benchmark.benchmark_newCollection  thrpt   30  11021271.933 ± 33582.783  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_newCollectionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_newCollectionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8671235.880 ops/s
# Warmup Iteration   2: 13742709.302 ops/s
# Warmup Iteration   3: 16104596.936 ops/s
# Warmup Iteration   4: 16114375.513 ops/s
# Warmup Iteration   5: 16117648.879 ops/s
# Warmup Iteration   6: 15975528.197 ops/s
# Warmup Iteration   7: 16059725.084 ops/s
# Warmup Iteration   8: 16148656.023 ops/s
# Warmup Iteration   9: 16124688.204 ops/s
# Warmup Iteration  10: 16126848.236 ops/s
# Warmup Iteration  11: 16043354.337 ops/s
# Warmup Iteration  12: 16065914.753 ops/s
# Warmup Iteration  13: 16082178.283 ops/s
# Warmup Iteration  14: 16093365.065 ops/s
# Warmup Iteration  15: 16143736.673 ops/s
# Warmup Iteration  16: 16045118.964 ops/s
# Warmup Iteration  17: 16104612.472 ops/s
# Warmup Iteration  18: 16045984.120 ops/s
# Warmup Iteration  19: 16028470.744 ops/s
# Warmup Iteration  20: 15950961.404 ops/s
# Warmup Iteration  21: 16181517.534 ops/s
# Warmup Iteration  22: 16066759.048 ops/s
# Warmup Iteration  23: 16086664.322 ops/s
# Warmup Iteration  24: 16112656.589 ops/s
# Warmup Iteration  25: 16094973.749 ops/s
# Warmup Iteration  26: 16103009.325 ops/s
# Warmup Iteration  27: 16071887.132 ops/s
# Warmup Iteration  28: 16094248.143 ops/s
# Warmup Iteration  29: 16124822.684 ops/s
# Warmup Iteration  30: 16179343.649 ops/s
Iteration   1: 16115924.903 ops/s
Iteration   2: 16107206.883 ops/s
Iteration   3: 16104413.439 ops/s
Iteration   4: 16110119.347 ops/s
Iteration   5: 16110391.589 ops/s
Iteration   6: 16095169.555 ops/s
Iteration   7: 16171001.886 ops/s
Iteration   8: 16113676.611 ops/s
Iteration   9: 16049722.325 ops/s
Iteration  10: 16059265.520 ops/s
Iteration  11: 16004287.796 ops/s
Iteration  12: 16165242.004 ops/s
Iteration  13: 16024935.410 ops/s
Iteration  14: 16022066.863 ops/s
Iteration  15: 16048299.232 ops/s
Iteration  16: 16109255.716 ops/s
Iteration  17: 16107314.692 ops/s
Iteration  18: 16100204.064 ops/s
Iteration  19: 16028489.375 ops/s
Iteration  20: 16070767.879 ops/s
Iteration  21: 16119631.334 ops/s
Iteration  22: 16088756.886 ops/s
Iteration  23: 16063140.879 ops/s
Iteration  24: 16174580.663 ops/s
Iteration  25: 16194912.437 ops/s
Iteration  26: 16150167.143 ops/s
Iteration  27: 16088516.366 ops/s
Iteration  28: 16080907.901 ops/s
Iteration  29: 16112897.770 ops/s
Iteration  30: 16011432.820 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_newCollectionWith":
  16093423.310 ±(99.9%) 32835.734 ops/s [Average]
  (min, avg, max) = (16004287.796, 16093423.310, 16194912.437), stdev = 49146.984
  CI (99.9%): [16060587.576, 16126259.043] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt         Score       Error  Units
ImmutableBooleanArrayListTest._Benchmark.benchmark_newCollectionWith  thrpt   30  16093423.310 ± 32835.734  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_newCollection_throws_empty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_newCollection_throws_empty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 858898.395 ops/s
# Warmup Iteration   2: 865778.203 ops/s
# Warmup Iteration   3: 1011493.385 ops/s
# Warmup Iteration   4: 1083291.346 ops/s
# Warmup Iteration   5: 1083026.894 ops/s
# Warmup Iteration   6: 1082476.568 ops/s
# Warmup Iteration   7: 1083710.881 ops/s
# Warmup Iteration   8: 1082274.427 ops/s
# Warmup Iteration   9: 1083610.361 ops/s
# Warmup Iteration  10: 1083519.244 ops/s
# Warmup Iteration  11: 1085494.186 ops/s
# Warmup Iteration  12: 1082376.696 ops/s
# Warmup Iteration  13: 1083087.370 ops/s
# Warmup Iteration  14: 919686.743 ops/s
# Warmup Iteration  15: 1076600.248 ops/s
# Warmup Iteration  16: 1085055.465 ops/s
# Warmup Iteration  17: 1151432.594 ops/s
# Warmup Iteration  18: 1152622.418 ops/s
# Warmup Iteration  19: 1147285.673 ops/s
# Warmup Iteration  20: 1149851.021 ops/s
# Warmup Iteration  21: 1150592.984 ops/s
# Warmup Iteration  22: 1151705.943 ops/s
# Warmup Iteration  23: 1152658.716 ops/s
# Warmup Iteration  24: 1149355.807 ops/s
# Warmup Iteration  25: 1152854.505 ops/s
# Warmup Iteration  26: 1150060.844 ops/s
# Warmup Iteration  27: 1150147.222 ops/s
# Warmup Iteration  28: 1151864.564 ops/s
# Warmup Iteration  29: 1151565.153 ops/s
# Warmup Iteration  30: 1150174.399 ops/s
Iteration   1: 1150843.827 ops/s
Iteration   2: 1150639.937 ops/s
Iteration   3: 1152714.336 ops/s
Iteration   4: 1150929.555 ops/s
Iteration   5: 1146201.638 ops/s
Iteration   6: 1148972.690 ops/s
Iteration   7: 1145184.564 ops/s
Iteration   8: 1150014.249 ops/s
Iteration   9: 1151901.961 ops/s
Iteration  10: 1148381.336 ops/s
Iteration  11: 1153157.572 ops/s
Iteration  12: 1154032.190 ops/s
Iteration  13: 1150597.380 ops/s
Iteration  14: 1152450.633 ops/s
Iteration  15: 1141456.717 ops/s
Iteration  16: 1150261.583 ops/s
Iteration  17: 1152728.818 ops/s
Iteration  18: 1151837.071 ops/s
Iteration  19: 1151242.707 ops/s
Iteration  20: 1148233.781 ops/s
Iteration  21: 1151572.504 ops/s
Iteration  22: 1152999.714 ops/s
Iteration  23: 1150985.959 ops/s
Iteration  24: 1150688.309 ops/s
Iteration  25: 1152110.974 ops/s
Iteration  26: 1150598.049 ops/s
Iteration  27: 1150118.053 ops/s
Iteration  28: 1152647.040 ops/s
Iteration  29: 1149654.132 ops/s
Iteration  30: 1151157.127 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_newCollection_throws_empty":
  1150477.147 ±(99.9%) 1731.480 ops/s [Average]
  (min, avg, max) = (1141456.717, 1150477.147, 1154032.190), stdev = 2591.597
  CI (99.9%): [1148745.667, 1152208.626] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score      Error  Units
ImmutableBooleanArrayListTest._Benchmark.benchmark_newCollection_throws_empty  thrpt   30  1150477.147 ± 1731.480  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_newCollection_throws_single$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_newCollection_throws_single

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 858754.491 ops/s
# Warmup Iteration   2: 864194.198 ops/s
# Warmup Iteration   3: 1003256.572 ops/s
# Warmup Iteration   4: 1076027.987 ops/s
# Warmup Iteration   5: 1076239.419 ops/s
# Warmup Iteration   6: 1073422.836 ops/s
# Warmup Iteration   7: 1074642.814 ops/s
# Warmup Iteration   8: 1075274.358 ops/s
# Warmup Iteration   9: 1075935.931 ops/s
# Warmup Iteration  10: 1072855.008 ops/s
# Warmup Iteration  11: 1077052.122 ops/s
# Warmup Iteration  12: 1073588.143 ops/s
# Warmup Iteration  13: 1075611.130 ops/s
# Warmup Iteration  14: 927942.928 ops/s
# Warmup Iteration  15: 1046188.860 ops/s
# Warmup Iteration  16: 1075505.437 ops/s
# Warmup Iteration  17: 1140476.453 ops/s
# Warmup Iteration  18: 1142465.424 ops/s
# Warmup Iteration  19: 1140264.374 ops/s
# Warmup Iteration  20: 1140797.213 ops/s
# Warmup Iteration  21: 1142436.230 ops/s
# Warmup Iteration  22: 1140200.944 ops/s
# Warmup Iteration  23: 1142371.735 ops/s
# Warmup Iteration  24: 1139365.973 ops/s
# Warmup Iteration  25: 1141477.860 ops/s
# Warmup Iteration  26: 1140051.182 ops/s
# Warmup Iteration  27: 1138771.994 ops/s
# Warmup Iteration  28: 1141621.363 ops/s
# Warmup Iteration  29: 1140397.720 ops/s
# Warmup Iteration  30: 1142841.368 ops/s
Iteration   1: 1143479.005 ops/s
Iteration   2: 1138068.812 ops/s
Iteration   3: 1141697.733 ops/s
Iteration   4: 1142433.653 ops/s
Iteration   5: 1139528.097 ops/s
Iteration   6: 1139524.890 ops/s
Iteration   7: 1139736.880 ops/s
Iteration   8: 1137252.208 ops/s
Iteration   9: 1140967.593 ops/s
Iteration  10: 1142234.823 ops/s
Iteration  11: 1138054.107 ops/s
Iteration  12: 1143729.348 ops/s
Iteration  13: 1140797.655 ops/s
Iteration  14: 1140185.037 ops/s
Iteration  15: 1141101.182 ops/s
Iteration  16: 1136779.505 ops/s
Iteration  17: 1138139.627 ops/s
Iteration  18: 1140050.284 ops/s
Iteration  19: 1141432.508 ops/s
Iteration  20: 1140259.142 ops/s
Iteration  21: 1138797.147 ops/s
Iteration  22: 1137570.042 ops/s
Iteration  23: 1138492.169 ops/s
Iteration  24: 1141414.690 ops/s
Iteration  25: 1138560.328 ops/s
Iteration  26: 1140831.842 ops/s
Iteration  27: 1140310.581 ops/s
Iteration  28: 1142639.694 ops/s
Iteration  29: 1141684.601 ops/s
Iteration  30: 1136176.726 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_newCollection_throws_single":
  1140064.330 ±(99.9%) 1318.573 ops/s [Average]
  (min, avg, max) = (1136176.726, 1140064.330, 1143729.348), stdev = 1973.578
  CI (99.9%): [1138745.758, 1141382.903] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score      Error  Units
ImmutableBooleanArrayListTest._Benchmark.benchmark_newCollection_throws_single  thrpt   30  1140064.330 ± 1318.573  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_newWithAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_newWithAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 884528.364 ops/s
# Warmup Iteration   2: 1955689.143 ops/s
# Warmup Iteration   3: 1955983.589 ops/s
# Warmup Iteration   4: 1631538.155 ops/s
# Warmup Iteration   5: 1962508.995 ops/s
# Warmup Iteration   6: 1957210.459 ops/s
# Warmup Iteration   7: 1957796.149 ops/s
# Warmup Iteration   8: 1962211.817 ops/s
# Warmup Iteration   9: 1960875.115 ops/s
# Warmup Iteration  10: 1962337.702 ops/s
# Warmup Iteration  11: 1962391.424 ops/s
# Warmup Iteration  12: 1959586.169 ops/s
# Warmup Iteration  13: 1961251.264 ops/s
# Warmup Iteration  14: 1962312.858 ops/s
# Warmup Iteration  15: 1955815.366 ops/s
# Warmup Iteration  16: 1961766.658 ops/s
# Warmup Iteration  17: 1962785.054 ops/s
# Warmup Iteration  18: 1963831.427 ops/s
# Warmup Iteration  19: 1961622.086 ops/s
# Warmup Iteration  20: 1962665.622 ops/s
# Warmup Iteration  21: 1955217.354 ops/s
# Warmup Iteration  22: 1961563.243 ops/s
# Warmup Iteration  23: 1958140.335 ops/s
# Warmup Iteration  24: 1959724.073 ops/s
# Warmup Iteration  25: 1960178.998 ops/s
# Warmup Iteration  26: 1961839.737 ops/s
# Warmup Iteration  27: 1953229.051 ops/s
# Warmup Iteration  28: 1963671.006 ops/s
# Warmup Iteration  29: 1957840.040 ops/s
# Warmup Iteration  30: 1959173.503 ops/s
Iteration   1: 1955742.135 ops/s
Iteration   2: 1961252.082 ops/s
Iteration   3: 1965513.391 ops/s
Iteration   4: 1966684.991 ops/s
Iteration   5: 1962343.265 ops/s
Iteration   6: 1961010.433 ops/s
Iteration   7: 1961426.565 ops/s
Iteration   8: 1960394.701 ops/s
Iteration   9: 1960265.739 ops/s
Iteration  10: 1962562.504 ops/s
Iteration  11: 1956619.743 ops/s
Iteration  12: 1961050.246 ops/s
Iteration  13: 1958656.001 ops/s
Iteration  14: 1962155.279 ops/s
Iteration  15: 1960032.228 ops/s
Iteration  16: 1962205.671 ops/s
Iteration  17: 1952117.308 ops/s
Iteration  18: 1967486.549 ops/s
Iteration  19: 1963306.633 ops/s
Iteration  20: 1963843.431 ops/s
Iteration  21: 1961014.149 ops/s
Iteration  22: 1963020.499 ops/s
Iteration  23: 1958688.739 ops/s
Iteration  24: 1961751.045 ops/s
Iteration  25: 1962686.756 ops/s
Iteration  26: 1964969.185 ops/s
Iteration  27: 1961985.621 ops/s
Iteration  28: 1957190.247 ops/s
Iteration  29: 1962139.115 ops/s
Iteration  30: 1961741.725 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_newWithAll":
  1961328.532 ±(99.9%) 2117.151 ops/s [Average]
  (min, avg, max) = (1952117.308, 1961328.532, 1967486.549), stdev = 3168.852
  CI (99.9%): [1959211.382, 1963445.683] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableBooleanArrayListTest._Benchmark.benchmark_newWithAll  thrpt   30  1961328.532 ± 2117.151  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_newWithOn64ElementCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_newWithOn64ElementCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1130111.772 ops/s
# Warmup Iteration   2: 1172273.857 ops/s
# Warmup Iteration   3: 1273690.689 ops/s
# Warmup Iteration   4: 1496757.954 ops/s
# Warmup Iteration   5: 1493869.872 ops/s
# Warmup Iteration   6: 1496919.737 ops/s
# Warmup Iteration   7: 1495796.207 ops/s
# Warmup Iteration   8: 1495288.921 ops/s
# Warmup Iteration   9: 1493601.749 ops/s
# Warmup Iteration  10: 1495686.415 ops/s
# Warmup Iteration  11: 1494840.494 ops/s
# Warmup Iteration  12: 1493200.901 ops/s
# Warmup Iteration  13: 1491575.102 ops/s
# Warmup Iteration  14: 1495693.701 ops/s
# Warmup Iteration  15: 1491587.459 ops/s
# Warmup Iteration  16: 1212563.035 ops/s
# Warmup Iteration  17: 1494650.031 ops/s
# Warmup Iteration  18: 1495339.813 ops/s
# Warmup Iteration  19: 1495273.568 ops/s
# Warmup Iteration  20: 1495267.204 ops/s
# Warmup Iteration  21: 1495035.726 ops/s
# Warmup Iteration  22: 1493833.342 ops/s
# Warmup Iteration  23: 1496117.284 ops/s
# Warmup Iteration  24: 1492523.922 ops/s
# Warmup Iteration  25: 1494743.093 ops/s
# Warmup Iteration  26: 1496195.287 ops/s
# Warmup Iteration  27: 1492442.385 ops/s
# Warmup Iteration  28: 1497654.462 ops/s
# Warmup Iteration  29: 1497101.862 ops/s
# Warmup Iteration  30: 1493665.390 ops/s
Iteration   1: 1495958.288 ops/s
Iteration   2: 1493678.651 ops/s
Iteration   3: 1491598.002 ops/s
Iteration   4: 1495659.088 ops/s
Iteration   5: 1496077.820 ops/s
Iteration   6: 1493341.536 ops/s
Iteration   7: 1497180.666 ops/s
Iteration   8: 1493290.066 ops/s
Iteration   9: 1495422.567 ops/s
Iteration  10: 1492913.966 ops/s
Iteration  11: 1491950.257 ops/s
Iteration  12: 1495549.851 ops/s
Iteration  13: 1492840.192 ops/s
Iteration  14: 1495761.599 ops/s
Iteration  15: 1496496.631 ops/s
Iteration  16: 1493834.124 ops/s
Iteration  17: 1489586.490 ops/s
Iteration  18: 1495203.996 ops/s
Iteration  19: 1495468.383 ops/s
Iteration  20: 1496786.054 ops/s
Iteration  21: 1496736.201 ops/s
Iteration  22: 1491761.732 ops/s
Iteration  23: 1496172.558 ops/s
Iteration  24: 1495272.743 ops/s
Iteration  25: 1496161.403 ops/s
Iteration  26: 1495556.638 ops/s
Iteration  27: 1497146.523 ops/s
Iteration  28: 1491635.182 ops/s
Iteration  29: 1497512.619 ops/s
Iteration  30: 1494534.095 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_newWithOn64ElementCollection":
  1494702.931 ±(99.9%) 1350.087 ops/s [Average]
  (min, avg, max) = (1489586.490, 1494702.931, 1497512.619), stdev = 2020.748
  CI (99.9%): [1493352.843, 1496053.018] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt        Score      Error  Units
ImmutableBooleanArrayListTest._Benchmark.benchmark_newWithOn64ElementCollection  thrpt   30  1494702.931 ± 1350.087  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_newWithout$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_newWithout

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1011700.269 ops/s
# Warmup Iteration   2: 2213322.837 ops/s
# Warmup Iteration   3: 2324018.941 ops/s
# Warmup Iteration   4: 2219115.911 ops/s
# Warmup Iteration   5: 1995801.952 ops/s
# Warmup Iteration   6: 2329680.432 ops/s
# Warmup Iteration   7: 2328018.402 ops/s
# Warmup Iteration   8: 2329273.852 ops/s
# Warmup Iteration   9: 2332041.144 ops/s
# Warmup Iteration  10: 2329645.341 ops/s
# Warmup Iteration  11: 2329016.990 ops/s
# Warmup Iteration  12: 2330606.385 ops/s
# Warmup Iteration  13: 2332941.526 ops/s
# Warmup Iteration  14: 2329504.377 ops/s
# Warmup Iteration  15: 2333091.587 ops/s
# Warmup Iteration  16: 2329320.577 ops/s
# Warmup Iteration  17: 2326897.259 ops/s
# Warmup Iteration  18: 2333233.521 ops/s
# Warmup Iteration  19: 2327280.659 ops/s
# Warmup Iteration  20: 2333774.120 ops/s
# Warmup Iteration  21: 2324480.814 ops/s
# Warmup Iteration  22: 2332760.061 ops/s
# Warmup Iteration  23: 2331393.557 ops/s
# Warmup Iteration  24: 2327493.025 ops/s
# Warmup Iteration  25: 2331009.643 ops/s
# Warmup Iteration  26: 2328763.540 ops/s
# Warmup Iteration  27: 2332124.892 ops/s
# Warmup Iteration  28: 2323216.445 ops/s
# Warmup Iteration  29: 2327244.446 ops/s
# Warmup Iteration  30: 2329398.288 ops/s
Iteration   1: 2329719.394 ops/s
Iteration   2: 2331073.847 ops/s
Iteration   3: 2326972.173 ops/s
Iteration   4: 2333656.699 ops/s
Iteration   5: 2329349.143 ops/s
Iteration   6: 2328629.309 ops/s
Iteration   7: 2330217.679 ops/s
Iteration   8: 2333804.623 ops/s
Iteration   9: 2327272.535 ops/s
Iteration  10: 2335118.448 ops/s
Iteration  11: 2331194.703 ops/s
Iteration  12: 2331683.363 ops/s
Iteration  13: 2329325.616 ops/s
Iteration  14: 2326688.270 ops/s
Iteration  15: 2333153.214 ops/s
Iteration  16: 2328838.535 ops/s
Iteration  17: 2329010.646 ops/s
Iteration  18: 2334627.439 ops/s
Iteration  19: 2330815.915 ops/s
Iteration  20: 2326194.992 ops/s
Iteration  21: 2324699.301 ops/s
Iteration  22: 2336771.973 ops/s
Iteration  23: 2329180.559 ops/s
Iteration  24: 2328373.303 ops/s
Iteration  25: 2330628.997 ops/s
Iteration  26: 2330760.643 ops/s
Iteration  27: 2333399.592 ops/s
Iteration  28: 2329807.313 ops/s
Iteration  29: 2331599.257 ops/s
Iteration  30: 2330971.971 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_newWithout":
  2330451.315 ±(99.9%) 1865.028 ops/s [Average]
  (min, avg, max) = (2324699.301, 2330451.315, 2336771.973), stdev = 2791.487
  CI (99.9%): [2328586.287, 2332316.343] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableBooleanArrayListTest._Benchmark.benchmark_newWithout  thrpt   30  2330451.315 ± 1865.028  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_newWithoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_newWithoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 508965.515 ops/s
# Warmup Iteration   2: 958500.810 ops/s
# Warmup Iteration   3: 1052025.733 ops/s
# Warmup Iteration   4: 1051232.924 ops/s
# Warmup Iteration   5: 861304.505 ops/s
# Warmup Iteration   6: 1051360.506 ops/s
# Warmup Iteration   7: 1054472.872 ops/s
# Warmup Iteration   8: 1054393.933 ops/s
# Warmup Iteration   9: 1052824.677 ops/s
# Warmup Iteration  10: 1052029.388 ops/s
# Warmup Iteration  11: 1053972.671 ops/s
# Warmup Iteration  12: 1052369.100 ops/s
# Warmup Iteration  13: 1052333.549 ops/s
# Warmup Iteration  14: 1051344.877 ops/s
# Warmup Iteration  15: 1052300.865 ops/s
# Warmup Iteration  16: 1053417.939 ops/s
# Warmup Iteration  17: 1054615.010 ops/s
# Warmup Iteration  18: 1053711.618 ops/s
# Warmup Iteration  19: 1050724.308 ops/s
# Warmup Iteration  20: 1054363.512 ops/s
# Warmup Iteration  21: 1053489.058 ops/s
# Warmup Iteration  22: 1054093.135 ops/s
# Warmup Iteration  23: 1052998.136 ops/s
# Warmup Iteration  24: 1052421.525 ops/s
# Warmup Iteration  25: 1053812.457 ops/s
# Warmup Iteration  26: 1053659.234 ops/s
# Warmup Iteration  27: 1051997.700 ops/s
# Warmup Iteration  28: 1052305.027 ops/s
# Warmup Iteration  29: 1053882.418 ops/s
# Warmup Iteration  30: 1053948.098 ops/s
Iteration   1: 1055417.184 ops/s
Iteration   2: 1052804.151 ops/s
Iteration   3: 1054059.946 ops/s
Iteration   4: 1055062.230 ops/s
Iteration   5: 1054412.589 ops/s
Iteration   6: 1052819.888 ops/s
Iteration   7: 1056573.059 ops/s
Iteration   8: 1052168.267 ops/s
Iteration   9: 1050889.975 ops/s
Iteration  10: 1055251.217 ops/s
Iteration  11: 1051567.229 ops/s
Iteration  12: 1051542.940 ops/s
Iteration  13: 1048776.476 ops/s
Iteration  14: 1053336.983 ops/s
Iteration  15: 1055273.226 ops/s
Iteration  16: 1054634.584 ops/s
Iteration  17: 1053771.214 ops/s
Iteration  18: 1052050.808 ops/s
Iteration  19: 1052256.271 ops/s
Iteration  20: 1051531.371 ops/s
Iteration  21: 1055708.225 ops/s
Iteration  22: 1053132.184 ops/s
Iteration  23: 1054455.001 ops/s
Iteration  24: 1053396.651 ops/s
Iteration  25: 1053793.848 ops/s
Iteration  26: 1053404.643 ops/s
Iteration  27: 1054924.759 ops/s
Iteration  28: 1051735.989 ops/s
Iteration  29: 1050927.589 ops/s
Iteration  30: 1055512.320 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_newWithoutAll":
  1053373.027 ±(99.9%) 1193.814 ops/s [Average]
  (min, avg, max) = (1048776.476, 1053373.027, 1056573.059), stdev = 1786.844
  CI (99.9%): [1052179.214, 1054566.841] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ImmutableBooleanArrayListTest._Benchmark.benchmark_newWithoutAll  thrpt   30  1053373.027 ± 1193.814  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8332934.871 ops/s
# Warmup Iteration   2: 13400311.660 ops/s
# Warmup Iteration   3: 16123569.296 ops/s
# Warmup Iteration   4: 16098181.503 ops/s
# Warmup Iteration   5: 16006763.365 ops/s
# Warmup Iteration   6: 16083506.846 ops/s
# Warmup Iteration   7: 16104018.549 ops/s
# Warmup Iteration   8: 16113643.925 ops/s
# Warmup Iteration   9: 16154178.613 ops/s
# Warmup Iteration  10: 16066292.950 ops/s
# Warmup Iteration  11: 16070599.165 ops/s
# Warmup Iteration  12: 16057531.887 ops/s
# Warmup Iteration  13: 16134290.933 ops/s
# Warmup Iteration  14: 16063310.540 ops/s
# Warmup Iteration  15: 16064030.280 ops/s
# Warmup Iteration  16: 16177206.912 ops/s
# Warmup Iteration  17: 16098419.319 ops/s
# Warmup Iteration  18: 16112864.969 ops/s
# Warmup Iteration  19: 16080890.112 ops/s
# Warmup Iteration  20: 16173399.399 ops/s
# Warmup Iteration  21: 16147786.671 ops/s
# Warmup Iteration  22: 16079041.853 ops/s
# Warmup Iteration  23: 16144637.682 ops/s
# Warmup Iteration  24: 16096021.417 ops/s
# Warmup Iteration  25: 16094906.949 ops/s
# Warmup Iteration  26: 16055410.973 ops/s
# Warmup Iteration  27: 16059417.926 ops/s
# Warmup Iteration  28: 16075799.178 ops/s
# Warmup Iteration  29: 16124181.960 ops/s
# Warmup Iteration  30: 16034684.835 ops/s
Iteration   1: 16046034.090 ops/s
Iteration   2: 16090634.833 ops/s
Iteration   3: 16007698.019 ops/s
Iteration   4: 16218060.868 ops/s
Iteration   5: 16154842.668 ops/s
Iteration   6: 16124006.094 ops/s
Iteration   7: 16104262.392 ops/s
Iteration   8: 16192025.847 ops/s
Iteration   9: 16058059.520 ops/s
Iteration  10: 16068304.218 ops/s
Iteration  11: 16185233.188 ops/s
Iteration  12: 16059590.547 ops/s
Iteration  13: 16165278.156 ops/s
Iteration  14: 16164776.099 ops/s
Iteration  15: 16036396.246 ops/s
Iteration  16: 16135312.384 ops/s
Iteration  17: 16048118.591 ops/s
Iteration  18: 16063803.528 ops/s
Iteration  19: 16099058.653 ops/s
Iteration  20: 16121322.245 ops/s
Iteration  21: 16131506.824 ops/s
Iteration  22: 16230046.043 ops/s
Iteration  23: 16096106.876 ops/s
Iteration  24: 16146150.582 ops/s
Iteration  25: 16142021.956 ops/s
Iteration  26: 16120742.174 ops/s
Iteration  27: 16020952.308 ops/s
Iteration  28: 16095640.783 ops/s
Iteration  29: 16164145.114 ops/s
Iteration  30: 16098235.984 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_noneSatisfy":
  16112945.561 ±(99.9%) 38239.659 ops/s [Average]
  (min, avg, max) = (16007698.019, 16112945.561, 16230046.043), stdev = 57235.326
  CI (99.9%): [16074705.902, 16151185.220] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score       Error  Units
ImmutableBooleanArrayListTest._Benchmark.benchmark_noneSatisfy  thrpt   30  16112945.561 ± 38239.659  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_notEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_notEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13231451.493 ops/s
# Warmup Iteration   2: 28815585.811 ops/s
# Warmup Iteration   3: 23800956.157 ops/s
# Warmup Iteration   4: 28974227.638 ops/s
# Warmup Iteration   5: 28954141.188 ops/s
# Warmup Iteration   6: 28971409.072 ops/s
# Warmup Iteration   7: 28927079.057 ops/s
# Warmup Iteration   8: 28933153.655 ops/s
# Warmup Iteration   9: 28939848.002 ops/s
# Warmup Iteration  10: 28939317.444 ops/s
# Warmup Iteration  11: 28919915.328 ops/s
# Warmup Iteration  12: 28901618.387 ops/s
# Warmup Iteration  13: 28851725.409 ops/s
# Warmup Iteration  14: 28879345.257 ops/s
# Warmup Iteration  15: 28914198.059 ops/s
# Warmup Iteration  16: 28932336.006 ops/s
# Warmup Iteration  17: 28912936.498 ops/s
# Warmup Iteration  18: 28802791.421 ops/s
# Warmup Iteration  19: 28870017.205 ops/s
# Warmup Iteration  20: 28862121.228 ops/s
# Warmup Iteration  21: 28946588.232 ops/s
# Warmup Iteration  22: 28900774.104 ops/s
# Warmup Iteration  23: 28852089.482 ops/s
# Warmup Iteration  24: 28850394.068 ops/s
# Warmup Iteration  25: 28885472.123 ops/s
# Warmup Iteration  26: 28959715.285 ops/s
# Warmup Iteration  27: 28915021.918 ops/s
# Warmup Iteration  28: 28905700.743 ops/s
# Warmup Iteration  29: 28784732.927 ops/s
# Warmup Iteration  30: 28854489.220 ops/s
Iteration   1: 28941202.066 ops/s
Iteration   2: 28939876.465 ops/s
Iteration   3: 28855537.005 ops/s
Iteration   4: 28899854.308 ops/s
Iteration   5: 28935100.890 ops/s
Iteration   6: 28960898.707 ops/s
Iteration   7: 28879345.381 ops/s
Iteration   8: 28957858.055 ops/s
Iteration   9: 28939687.355 ops/s
Iteration  10: 28885220.840 ops/s
Iteration  11: 28917913.434 ops/s
Iteration  12: 28854835.388 ops/s
Iteration  13: 28939662.472 ops/s
Iteration  14: 28976178.144 ops/s
Iteration  15: 28943119.965 ops/s
Iteration  16: 28868677.141 ops/s
Iteration  17: 28874614.375 ops/s
Iteration  18: 28921925.774 ops/s
Iteration  19: 28933247.668 ops/s
Iteration  20: 28878738.063 ops/s
Iteration  21: 28858518.713 ops/s
Iteration  22: 28892865.359 ops/s
Iteration  23: 28838438.512 ops/s
Iteration  24: 28939696.798 ops/s
Iteration  25: 28870620.149 ops/s
Iteration  26: 28823153.580 ops/s
Iteration  27: 28840152.976 ops/s
Iteration  28: 28876799.641 ops/s
Iteration  29: 28882892.249 ops/s
Iteration  30: 28885097.446 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_notEmpty":
  28900390.964 ±(99.9%) 27622.073 ops/s [Average]
  (min, avg, max) = (28823153.580, 28900390.964, 28976178.144), stdev = 41343.422
  CI (99.9%): [28872768.891, 28928013.037] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
ImmutableBooleanArrayListTest._Benchmark.benchmark_notEmpty  thrpt   30  28900390.964 ± 27622.073  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_reduce$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_reduce

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4948071.430 ops/s
# Warmup Iteration   2: 9904529.436 ops/s
# Warmup Iteration   3: 8369069.126 ops/s
# Warmup Iteration   4: 9896135.732 ops/s
# Warmup Iteration   5: 9901679.783 ops/s
# Warmup Iteration   6: 9901591.181 ops/s
# Warmup Iteration   7: 9906485.439 ops/s
# Warmup Iteration   8: 9893168.162 ops/s
# Warmup Iteration   9: 9880000.078 ops/s
# Warmup Iteration  10: 9896009.691 ops/s
# Warmup Iteration  11: 9867844.425 ops/s
# Warmup Iteration  12: 9888173.463 ops/s
# Warmup Iteration  13: 9895750.086 ops/s
# Warmup Iteration  14: 9890017.638 ops/s
# Warmup Iteration  15: 9889778.638 ops/s
# Warmup Iteration  16: 9897237.849 ops/s
# Warmup Iteration  17: 9926525.744 ops/s
# Warmup Iteration  18: 9903792.494 ops/s
# Warmup Iteration  19: 9918093.980 ops/s
# Warmup Iteration  20: 9921025.266 ops/s
# Warmup Iteration  21: 9909422.072 ops/s
# Warmup Iteration  22: 9932695.744 ops/s
# Warmup Iteration  23: 9921560.288 ops/s
# Warmup Iteration  24: 9929295.001 ops/s
# Warmup Iteration  25: 9910990.510 ops/s
# Warmup Iteration  26: 9943101.941 ops/s
# Warmup Iteration  27: 9914970.806 ops/s
# Warmup Iteration  28: 9884539.569 ops/s
# Warmup Iteration  29: 9920037.481 ops/s
# Warmup Iteration  30: 9924981.200 ops/s
Iteration   1: 9912609.941 ops/s
Iteration   2: 9954472.925 ops/s
Iteration   3: 9904522.074 ops/s
Iteration   4: 9920002.544 ops/s
Iteration   5: 9910217.797 ops/s
Iteration   6: 9950628.695 ops/s
Iteration   7: 9937316.757 ops/s
Iteration   8: 9927133.989 ops/s
Iteration   9: 9927710.251 ops/s
Iteration  10: 9919354.643 ops/s
Iteration  11: 9924121.334 ops/s
Iteration  12: 9898526.624 ops/s
Iteration  13: 9945802.279 ops/s
Iteration  14: 9920533.145 ops/s
Iteration  15: 9888599.086 ops/s
Iteration  16: 9921386.031 ops/s
Iteration  17: 9913524.876 ops/s
Iteration  18: 9914759.038 ops/s
Iteration  19: 9920048.668 ops/s
Iteration  20: 9948021.228 ops/s
Iteration  21: 9951427.893 ops/s
Iteration  22: 9896102.185 ops/s
Iteration  23: 9880269.723 ops/s
Iteration  24: 9934247.091 ops/s
Iteration  25: 9888664.521 ops/s
Iteration  26: 9913361.890 ops/s
Iteration  27: 9951996.098 ops/s
Iteration  28: 9910550.874 ops/s
Iteration  29: 9885547.188 ops/s
Iteration  30: 9910834.846 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_reduce":
  9919409.808 ±(99.9%) 13955.851 ops/s [Average]
  (min, avg, max) = (9880269.723, 9919409.808, 9954472.925), stdev = 20888.463
  CI (99.9%): [9905453.956, 9933365.659] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
ImmutableBooleanArrayListTest._Benchmark.benchmark_reduce  thrpt   30  9919409.808 ± 13955.851  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_reduceIfEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_reduceIfEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4902765.314 ops/s
# Warmup Iteration   2: 9823592.729 ops/s
# Warmup Iteration   3: 8282917.243 ops/s
# Warmup Iteration   4: 9789824.705 ops/s
# Warmup Iteration   5: 9797019.740 ops/s
# Warmup Iteration   6: 9772869.785 ops/s
# Warmup Iteration   7: 9797483.846 ops/s
# Warmup Iteration   8: 9790679.500 ops/s
# Warmup Iteration   9: 9695681.632 ops/s
# Warmup Iteration  10: 9767764.467 ops/s
# Warmup Iteration  11: 9802384.015 ops/s
# Warmup Iteration  12: 9780478.624 ops/s
# Warmup Iteration  13: 9777183.353 ops/s
# Warmup Iteration  14: 9782072.499 ops/s
# Warmup Iteration  15: 9797420.484 ops/s
# Warmup Iteration  16: 9776834.619 ops/s
# Warmup Iteration  17: 9774001.768 ops/s
# Warmup Iteration  18: 9836061.650 ops/s
# Warmup Iteration  19: 9799623.262 ops/s
# Warmup Iteration  20: 9835343.498 ops/s
# Warmup Iteration  21: 9796045.134 ops/s
# Warmup Iteration  22: 9807883.193 ops/s
# Warmup Iteration  23: 9834926.668 ops/s
# Warmup Iteration  24: 9833576.409 ops/s
# Warmup Iteration  25: 9836271.686 ops/s
# Warmup Iteration  26: 9833659.117 ops/s
# Warmup Iteration  27: 9835105.022 ops/s
# Warmup Iteration  28: 9834936.349 ops/s
# Warmup Iteration  29: 9841490.177 ops/s
# Warmup Iteration  30: 9838405.106 ops/s
Iteration   1: 9854856.613 ops/s
Iteration   2: 9842974.532 ops/s
Iteration   3: 9856183.626 ops/s
Iteration   4: 9831505.706 ops/s
Iteration   5: 9842987.013 ops/s
Iteration   6: 9834765.205 ops/s
Iteration   7: 9787567.929 ops/s
Iteration   8: 9836783.712 ops/s
Iteration   9: 9873220.708 ops/s
Iteration  10: 9848115.992 ops/s
Iteration  11: 9856366.071 ops/s
Iteration  12: 9816497.175 ops/s
Iteration  13: 9823627.573 ops/s
Iteration  14: 9820434.254 ops/s
Iteration  15: 9850929.820 ops/s
Iteration  16: 9837220.542 ops/s
Iteration  17: 9819090.643 ops/s
Iteration  18: 9838019.716 ops/s
Iteration  19: 9850875.826 ops/s
Iteration  20: 9836103.731 ops/s
Iteration  21: 9821636.456 ops/s
Iteration  22: 9828046.519 ops/s
Iteration  23: 9852614.975 ops/s
Iteration  24: 9825956.205 ops/s
Iteration  25: 9833657.862 ops/s
Iteration  26: 9815029.782 ops/s
Iteration  27: 9610334.481 ops/s
Iteration  28: 9710680.883 ops/s
Iteration  29: 9860020.704 ops/s
Iteration  30: 9825322.071 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_reduceIfEmpty":
  9824714.211 ±(99.9%) 33122.986 ops/s [Average]
  (min, avg, max) = (9610334.481, 9824714.211, 9873220.708), stdev = 49576.929
  CI (99.9%): [9791591.225, 9857837.197] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
ImmutableBooleanArrayListTest._Benchmark.benchmark_reduceIfEmpty  thrpt   30  9824714.211 ± 33122.986  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_reduceOnEmptyThrows$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_reduceOnEmptyThrows

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 840661.640 ops/s
# Warmup Iteration   2: 851587.463 ops/s
# Warmup Iteration   3: 1050253.031 ops/s
# Warmup Iteration   4: 1091705.498 ops/s
# Warmup Iteration   5: 1095911.391 ops/s
# Warmup Iteration   6: 1094262.097 ops/s
# Warmup Iteration   7: 1097804.860 ops/s
# Warmup Iteration   8: 1096105.795 ops/s
# Warmup Iteration   9: 1095272.097 ops/s
# Warmup Iteration  10: 1100109.739 ops/s
# Warmup Iteration  11: 1096769.837 ops/s
# Warmup Iteration  12: 1097386.121 ops/s
# Warmup Iteration  13: 927652.198 ops/s
# Warmup Iteration  14: 1096109.915 ops/s
# Warmup Iteration  15: 1094881.549 ops/s
# Warmup Iteration  16: 1095718.288 ops/s
# Warmup Iteration  17: 1168904.731 ops/s
# Warmup Iteration  18: 1165427.476 ops/s
# Warmup Iteration  19: 1166225.630 ops/s
# Warmup Iteration  20: 1165642.080 ops/s
# Warmup Iteration  21: 1166432.305 ops/s
# Warmup Iteration  22: 1162110.148 ops/s
# Warmup Iteration  23: 1167231.818 ops/s
# Warmup Iteration  24: 1165257.892 ops/s
# Warmup Iteration  25: 1161006.902 ops/s
# Warmup Iteration  26: 1162729.705 ops/s
# Warmup Iteration  27: 1161596.899 ops/s
# Warmup Iteration  28: 1162609.842 ops/s
# Warmup Iteration  29: 1164519.730 ops/s
# Warmup Iteration  30: 1163069.284 ops/s
Iteration   1: 1162328.557 ops/s
Iteration   2: 1159348.940 ops/s
Iteration   3: 1165710.628 ops/s
Iteration   4: 1163232.901 ops/s
Iteration   5: 1164998.105 ops/s
Iteration   6: 1164922.485 ops/s
Iteration   7: 1155223.465 ops/s
Iteration   8: 1155399.492 ops/s
Iteration   9: 1160054.536 ops/s
Iteration  10: 1160948.035 ops/s
Iteration  11: 1163533.030 ops/s
Iteration  12: 1160503.718 ops/s
Iteration  13: 1156174.501 ops/s
Iteration  14: 1154554.998 ops/s
Iteration  15: 1158881.063 ops/s
Iteration  16: 1160088.490 ops/s
Iteration  17: 1161869.503 ops/s
Iteration  18: 1159331.186 ops/s
Iteration  19: 1160401.620 ops/s
Iteration  20: 1159532.446 ops/s
Iteration  21: 1159475.321 ops/s
Iteration  22: 1165559.788 ops/s
Iteration  23: 1165756.385 ops/s
Iteration  24: 1164489.013 ops/s
Iteration  25: 1159490.442 ops/s
Iteration  26: 1163956.769 ops/s
Iteration  27: 1164010.742 ops/s
Iteration  28: 1159653.387 ops/s
Iteration  29: 1160659.836 ops/s
Iteration  30: 1163074.624 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_reduceOnEmptyThrows":
  1161105.467 ±(99.9%) 2132.431 ops/s [Average]
  (min, avg, max) = (1154554.998, 1161105.467, 1165756.385), stdev = 3191.723
  CI (99.9%): [1158973.035, 1163237.898] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
ImmutableBooleanArrayListTest._Benchmark.benchmark_reduceOnEmptyThrows  thrpt   30  1161105.467 ± 2132.431  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1472448.944 ops/s
# Warmup Iteration   2: 3567227.633 ops/s
# Warmup Iteration   3: 2939776.365 ops/s
# Warmup Iteration   4: 3570171.681 ops/s
# Warmup Iteration   5: 3564763.055 ops/s
# Warmup Iteration   6: 3558508.944 ops/s
# Warmup Iteration   7: 3558117.182 ops/s
# Warmup Iteration   8: 3556147.263 ops/s
# Warmup Iteration   9: 3563176.105 ops/s
# Warmup Iteration  10: 3555568.662 ops/s
# Warmup Iteration  11: 3548855.345 ops/s
# Warmup Iteration  12: 3548234.058 ops/s
# Warmup Iteration  13: 3547810.894 ops/s
# Warmup Iteration  14: 3543253.217 ops/s
# Warmup Iteration  15: 3558208.876 ops/s
# Warmup Iteration  16: 3543973.844 ops/s
# Warmup Iteration  17: 3554465.696 ops/s
# Warmup Iteration  18: 3544578.662 ops/s
# Warmup Iteration  19: 3562330.526 ops/s
# Warmup Iteration  20: 3567251.530 ops/s
# Warmup Iteration  21: 3559465.911 ops/s
# Warmup Iteration  22: 3566283.905 ops/s
# Warmup Iteration  23: 3563042.521 ops/s
# Warmup Iteration  24: 3571894.791 ops/s
# Warmup Iteration  25: 3567516.210 ops/s
# Warmup Iteration  26: 3569146.435 ops/s
# Warmup Iteration  27: 3563015.858 ops/s
# Warmup Iteration  28: 3561490.980 ops/s
# Warmup Iteration  29: 3570460.257 ops/s
# Warmup Iteration  30: 3554905.828 ops/s
Iteration   1: 3563887.727 ops/s
Iteration   2: 3569609.513 ops/s
Iteration   3: 3565198.084 ops/s
Iteration   4: 3569128.323 ops/s
Iteration   5: 3564771.112 ops/s
Iteration   6: 3567167.338 ops/s
Iteration   7: 3542396.151 ops/s
Iteration   8: 3567918.576 ops/s
Iteration   9: 3566182.747 ops/s
Iteration  10: 3568223.883 ops/s
Iteration  11: 3552289.293 ops/s
Iteration  12: 3560073.282 ops/s
Iteration  13: 3556423.456 ops/s
Iteration  14: 3559537.759 ops/s
Iteration  15: 3538353.446 ops/s
Iteration  16: 3567452.785 ops/s
Iteration  17: 3565690.497 ops/s
Iteration  18: 3564676.611 ops/s
Iteration  19: 3561912.070 ops/s
Iteration  20: 3564746.536 ops/s
Iteration  21: 3562776.334 ops/s
Iteration  22: 3556028.620 ops/s
Iteration  23: 3564802.991 ops/s
Iteration  24: 3559669.164 ops/s
Iteration  25: 3562944.894 ops/s
Iteration  26: 3558404.251 ops/s
Iteration  27: 3570938.282 ops/s
Iteration  28: 3554382.594 ops/s
Iteration  29: 3547895.973 ops/s
Iteration  30: 3563289.500 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_reject":
  3561225.726 ±(99.9%) 5217.761 ops/s [Average]
  (min, avg, max) = (3538353.446, 3561225.726, 3570938.282), stdev = 7809.700
  CI (99.9%): [3556007.965, 3566443.488] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableBooleanArrayListTest._Benchmark.benchmark_reject  thrpt   30  3561225.726 ± 5217.761  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1507283.359 ops/s
# Warmup Iteration   2: 3467305.186 ops/s
# Warmup Iteration   3: 2855477.160 ops/s
# Warmup Iteration   4: 3483862.307 ops/s
# Warmup Iteration   5: 3488162.922 ops/s
# Warmup Iteration   6: 3486538.341 ops/s
# Warmup Iteration   7: 3482215.753 ops/s
# Warmup Iteration   8: 3490331.363 ops/s
# Warmup Iteration   9: 3478488.353 ops/s
# Warmup Iteration  10: 3487006.293 ops/s
# Warmup Iteration  11: 3483070.692 ops/s
# Warmup Iteration  12: 3484373.355 ops/s
# Warmup Iteration  13: 3481021.682 ops/s
# Warmup Iteration  14: 3485649.558 ops/s
# Warmup Iteration  15: 3487492.727 ops/s
# Warmup Iteration  16: 3489807.057 ops/s
# Warmup Iteration  17: 3484135.679 ops/s
# Warmup Iteration  18: 3483872.204 ops/s
# Warmup Iteration  19: 3477843.796 ops/s
# Warmup Iteration  20: 3484102.886 ops/s
# Warmup Iteration  21: 3478198.931 ops/s
# Warmup Iteration  22: 3488522.426 ops/s
# Warmup Iteration  23: 3472311.154 ops/s
# Warmup Iteration  24: 3484531.869 ops/s
# Warmup Iteration  25: 3481270.641 ops/s
# Warmup Iteration  26: 3483856.514 ops/s
# Warmup Iteration  27: 3479317.812 ops/s
# Warmup Iteration  28: 3474437.547 ops/s
# Warmup Iteration  29: 3474191.388 ops/s
# Warmup Iteration  30: 3480166.963 ops/s
Iteration   1: 3475311.468 ops/s
Iteration   2: 3464894.295 ops/s
Iteration   3: 3477904.889 ops/s
Iteration   4: 3479639.020 ops/s
Iteration   5: 3478816.579 ops/s
Iteration   6: 3481360.770 ops/s
Iteration   7: 3475494.301 ops/s
Iteration   8: 3480108.074 ops/s
Iteration   9: 3487404.474 ops/s
Iteration  10: 3481069.504 ops/s
Iteration  11: 3475952.382 ops/s
Iteration  12: 3487696.817 ops/s
Iteration  13: 3488258.506 ops/s
Iteration  14: 3473786.630 ops/s
Iteration  15: 3479742.095 ops/s
Iteration  16: 3488702.099 ops/s
Iteration  17: 3489621.992 ops/s
Iteration  18: 3490807.958 ops/s
Iteration  19: 3475503.411 ops/s
Iteration  20: 3484815.666 ops/s
Iteration  21: 3484397.256 ops/s
Iteration  22: 3478744.870 ops/s
Iteration  23: 3471326.771 ops/s
Iteration  24: 3485869.638 ops/s
Iteration  25: 3487101.432 ops/s
Iteration  26: 3491079.545 ops/s
Iteration  27: 3478819.193 ops/s
Iteration  28: 3492501.103 ops/s
Iteration  29: 3486426.701 ops/s
Iteration  30: 3488884.131 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_select":
  3482068.052 ±(99.9%) 4470.873 ops/s [Average]
  (min, avg, max) = (3464894.295, 3482068.052, 3492501.103), stdev = 6691.793
  CI (99.9%): [3477597.179, 3486538.926] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableBooleanArrayListTest._Benchmark.benchmark_select  thrpt   30  3482068.052 ± 4470.873  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2040971.319 ops/s
# Warmup Iteration   2: 4386432.776 ops/s
# Warmup Iteration   3: 3627142.572 ops/s
# Warmup Iteration   4: 4356886.538 ops/s
# Warmup Iteration   5: 4357481.888 ops/s
# Warmup Iteration   6: 4345114.564 ops/s
# Warmup Iteration   7: 4347532.667 ops/s
# Warmup Iteration   8: 4339554.815 ops/s
# Warmup Iteration   9: 4342697.838 ops/s
# Warmup Iteration  10: 4347773.980 ops/s
# Warmup Iteration  11: 4340796.978 ops/s
# Warmup Iteration  12: 4346387.540 ops/s
# Warmup Iteration  13: 4341086.166 ops/s
# Warmup Iteration  14: 4347474.314 ops/s
# Warmup Iteration  15: 4351745.424 ops/s
# Warmup Iteration  16: 4356433.628 ops/s
# Warmup Iteration  17: 4352794.945 ops/s
# Warmup Iteration  18: 4343503.832 ops/s
# Warmup Iteration  19: 4346296.146 ops/s
# Warmup Iteration  20: 4344732.520 ops/s
# Warmup Iteration  21: 4349107.136 ops/s
# Warmup Iteration  22: 4338067.964 ops/s
# Warmup Iteration  23: 4327720.731 ops/s
# Warmup Iteration  24: 4335465.835 ops/s
# Warmup Iteration  25: 4344790.715 ops/s
# Warmup Iteration  26: 4354355.801 ops/s
# Warmup Iteration  27: 4354046.027 ops/s
# Warmup Iteration  28: 4352921.282 ops/s
# Warmup Iteration  29: 4349446.434 ops/s
# Warmup Iteration  30: 4360146.814 ops/s
Iteration   1: 4355282.958 ops/s
Iteration   2: 4358736.651 ops/s
Iteration   3: 4348811.024 ops/s
Iteration   4: 4335745.767 ops/s
Iteration   5: 4342732.602 ops/s
Iteration   6: 4349875.779 ops/s
Iteration   7: 4339085.547 ops/s
Iteration   8: 4345069.395 ops/s
Iteration   9: 4345808.930 ops/s
Iteration  10: 4355708.189 ops/s
Iteration  11: 4343242.268 ops/s
Iteration  12: 4357285.675 ops/s
Iteration  13: 4358700.701 ops/s
Iteration  14: 4341709.451 ops/s
Iteration  15: 4356254.700 ops/s
Iteration  16: 4344633.367 ops/s
Iteration  17: 4345442.799 ops/s
Iteration  18: 4358422.229 ops/s
Iteration  19: 4349898.596 ops/s
Iteration  20: 4362371.522 ops/s
Iteration  21: 4363169.452 ops/s
Iteration  22: 4344921.866 ops/s
Iteration  23: 4355499.170 ops/s
Iteration  24: 4349379.924 ops/s
Iteration  25: 4358930.899 ops/s
Iteration  26: 4351705.262 ops/s
Iteration  27: 4346431.304 ops/s
Iteration  28: 4312466.758 ops/s
Iteration  29: 4352040.672 ops/s
Iteration  30: 4367960.569 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_size":
  4349910.801 ±(99.9%) 6987.018 ops/s [Average]
  (min, avg, max) = (4312466.758, 4349910.801, 4367960.569), stdev = 10457.841
  CI (99.9%): [4342923.782, 4356897.819] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableBooleanArrayListTest._Benchmark.benchmark_size  thrpt   30  4349910.801 ± 6987.018  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_subList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_subList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 819524.188 ops/s
# Warmup Iteration   2: 826128.117 ops/s
# Warmup Iteration   3: 1018961.588 ops/s
# Warmup Iteration   4: 1055395.690 ops/s
# Warmup Iteration   5: 1058928.335 ops/s
# Warmup Iteration   6: 1057191.044 ops/s
# Warmup Iteration   7: 1057556.206 ops/s
# Warmup Iteration   8: 1061136.779 ops/s
# Warmup Iteration   9: 1058111.986 ops/s
# Warmup Iteration  10: 1058686.153 ops/s
# Warmup Iteration  11: 1057097.471 ops/s
# Warmup Iteration  12: 1057527.114 ops/s
# Warmup Iteration  13: 893567.530 ops/s
# Warmup Iteration  14: 1057999.372 ops/s
# Warmup Iteration  15: 1057001.816 ops/s
# Warmup Iteration  16: 1056090.821 ops/s
# Warmup Iteration  17: 1122411.331 ops/s
# Warmup Iteration  18: 1126595.690 ops/s
# Warmup Iteration  19: 1127529.107 ops/s
# Warmup Iteration  20: 1126698.267 ops/s
# Warmup Iteration  21: 1122649.840 ops/s
# Warmup Iteration  22: 1129266.234 ops/s
# Warmup Iteration  23: 1127186.450 ops/s
# Warmup Iteration  24: 1126302.847 ops/s
# Warmup Iteration  25: 1127218.355 ops/s
# Warmup Iteration  26: 1125076.032 ops/s
# Warmup Iteration  27: 1128893.683 ops/s
# Warmup Iteration  28: 1128248.040 ops/s
# Warmup Iteration  29: 1130801.153 ops/s
# Warmup Iteration  30: 1127572.328 ops/s
Iteration   1: 1130642.788 ops/s
Iteration   2: 1123992.708 ops/s
Iteration   3: 1127010.743 ops/s
Iteration   4: 1123396.446 ops/s
Iteration   5: 1132579.717 ops/s
Iteration   6: 1129986.273 ops/s
Iteration   7: 1124542.100 ops/s
Iteration   8: 1125219.956 ops/s
Iteration   9: 1129173.790 ops/s
Iteration  10: 1122160.901 ops/s
Iteration  11: 1126364.497 ops/s
Iteration  12: 1124933.672 ops/s
Iteration  13: 1127106.443 ops/s
Iteration  14: 1126128.826 ops/s
Iteration  15: 1129263.457 ops/s
Iteration  16: 1126911.393 ops/s
Iteration  17: 1123711.828 ops/s
Iteration  18: 1128792.244 ops/s
Iteration  19: 1125600.017 ops/s
Iteration  20: 1125526.502 ops/s
Iteration  21: 1131096.762 ops/s
Iteration  22: 1123859.028 ops/s
Iteration  23: 1127331.572 ops/s
Iteration  24: 1127695.476 ops/s
Iteration  25: 1125348.195 ops/s
Iteration  26: 1131004.515 ops/s
Iteration  27: 1122491.941 ops/s
Iteration  28: 1125072.141 ops/s
Iteration  29: 1126937.413 ops/s
Iteration  30: 1131875.764 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_subList":
  1126858.570 ±(99.9%) 1900.497 ops/s [Average]
  (min, avg, max) = (1122160.901, 1126858.570, 1132579.717), stdev = 2844.574
  CI (99.9%): [1124958.074, 1128759.067] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableBooleanArrayListTest._Benchmark.benchmark_subList  thrpt   30  1126858.570 ± 1900.497  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_testEquals$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_testEquals

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 34569.009 ops/s
# Warmup Iteration   2: 57699.393 ops/s
# Warmup Iteration   3: 67581.740 ops/s
# Warmup Iteration   4: 67052.574 ops/s
# Warmup Iteration   5: 67502.425 ops/s
# Warmup Iteration   6: 58110.425 ops/s
# Warmup Iteration   7: 67375.719 ops/s
# Warmup Iteration   8: 67416.914 ops/s
# Warmup Iteration   9: 67383.631 ops/s
# Warmup Iteration  10: 67420.949 ops/s
# Warmup Iteration  11: 67364.618 ops/s
# Warmup Iteration  12: 67369.153 ops/s
# Warmup Iteration  13: 67474.835 ops/s
# Warmup Iteration  14: 67386.134 ops/s
# Warmup Iteration  15: 67431.740 ops/s
# Warmup Iteration  16: 67590.810 ops/s
# Warmup Iteration  17: 67549.794 ops/s
# Warmup Iteration  18: 67653.828 ops/s
# Warmup Iteration  19: 67510.853 ops/s
# Warmup Iteration  20: 67528.924 ops/s
# Warmup Iteration  21: 67318.106 ops/s
# Warmup Iteration  22: 67565.930 ops/s
# Warmup Iteration  23: 67579.518 ops/s
# Warmup Iteration  24: 67269.321 ops/s
# Warmup Iteration  25: 67529.407 ops/s
# Warmup Iteration  26: 67443.577 ops/s
# Warmup Iteration  27: 67372.696 ops/s
# Warmup Iteration  28: 67509.294 ops/s
# Warmup Iteration  29: 67337.674 ops/s
# Warmup Iteration  30: 67416.885 ops/s
Iteration   1: 67552.455 ops/s
Iteration   2: 67534.349 ops/s
Iteration   3: 67592.221 ops/s
Iteration   4: 67447.379 ops/s
Iteration   5: 67542.791 ops/s
Iteration   6: 67374.672 ops/s
Iteration   7: 67388.179 ops/s
Iteration   8: 67179.092 ops/s
Iteration   9: 67497.332 ops/s
Iteration  10: 67221.501 ops/s
Iteration  11: 67201.565 ops/s
Iteration  12: 67583.712 ops/s
Iteration  13: 67460.226 ops/s
Iteration  14: 67399.013 ops/s
Iteration  15: 67413.704 ops/s
Iteration  16: 67619.855 ops/s
Iteration  17: 67552.309 ops/s
Iteration  18: 67579.867 ops/s
Iteration  19: 67379.174 ops/s
Iteration  20: 67380.590 ops/s
Iteration  21: 67643.535 ops/s
Iteration  22: 67661.917 ops/s
Iteration  23: 67499.790 ops/s
Iteration  24: 67200.564 ops/s
Iteration  25: 67448.736 ops/s
Iteration  26: 67443.726 ops/s
Iteration  27: 67542.016 ops/s
Iteration  28: 67502.919 ops/s
Iteration  29: 67122.111 ops/s
Iteration  30: 67963.480 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_testEquals":
  67464.293 ±(99.9%) 114.843 ops/s [Average]
  (min, avg, max) = (67122.111, 67464.293, 67963.480), stdev = 171.891
  CI (99.9%): [67349.450, 67579.135] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt      Score     Error  Units
ImmutableBooleanArrayListTest._Benchmark.benchmark_testEquals  thrpt   30  67464.293 ± 114.843  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_testHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_testHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5643888.902 ops/s
# Warmup Iteration   2: 11972674.024 ops/s
# Warmup Iteration   3: 9607117.569 ops/s
# Warmup Iteration   4: 11419909.885 ops/s
# Warmup Iteration   5: 11469517.260 ops/s
# Warmup Iteration   6: 11489231.083 ops/s
# Warmup Iteration   7: 11469857.542 ops/s
# Warmup Iteration   8: 11470811.907 ops/s
# Warmup Iteration   9: 11488668.726 ops/s
# Warmup Iteration  10: 11478150.025 ops/s
# Warmup Iteration  11: 11459798.509 ops/s
# Warmup Iteration  12: 11460709.866 ops/s
# Warmup Iteration  13: 11508108.177 ops/s
# Warmup Iteration  14: 11446522.242 ops/s
# Warmup Iteration  15: 11484102.439 ops/s
# Warmup Iteration  16: 11499302.011 ops/s
# Warmup Iteration  17: 11491427.824 ops/s
# Warmup Iteration  18: 11473565.283 ops/s
# Warmup Iteration  19: 11471364.682 ops/s
# Warmup Iteration  20: 11503164.882 ops/s
# Warmup Iteration  21: 11472805.883 ops/s
# Warmup Iteration  22: 11453069.574 ops/s
# Warmup Iteration  23: 11480930.395 ops/s
# Warmup Iteration  24: 11491124.107 ops/s
# Warmup Iteration  25: 11469551.615 ops/s
# Warmup Iteration  26: 11506379.617 ops/s
# Warmup Iteration  27: 11473907.337 ops/s
# Warmup Iteration  28: 11488683.332 ops/s
# Warmup Iteration  29: 11485204.228 ops/s
# Warmup Iteration  30: 11472968.929 ops/s
Iteration   1: 11445337.832 ops/s
Iteration   2: 11505189.335 ops/s
Iteration   3: 11493906.348 ops/s
Iteration   4: 11497758.317 ops/s
Iteration   5: 11493617.424 ops/s
Iteration   6: 11487407.071 ops/s
Iteration   7: 11467531.945 ops/s
Iteration   8: 11468862.598 ops/s
Iteration   9: 11494657.293 ops/s
Iteration  10: 11460844.693 ops/s
Iteration  11: 11485366.853 ops/s
Iteration  12: 11486982.605 ops/s
Iteration  13: 11488321.939 ops/s
Iteration  14: 11515479.127 ops/s
Iteration  15: 11500591.375 ops/s
Iteration  16: 11466065.592 ops/s
Iteration  17: 11521705.396 ops/s
Iteration  18: 11503908.279 ops/s
Iteration  19: 11468186.731 ops/s
Iteration  20: 11483706.263 ops/s
Iteration  21: 11493155.508 ops/s
Iteration  22: 11465192.579 ops/s
Iteration  23: 11496610.563 ops/s
Iteration  24: 11456899.451 ops/s
Iteration  25: 11499119.823 ops/s
Iteration  26: 11455381.157 ops/s
Iteration  27: 11476628.516 ops/s
Iteration  28: 11511976.381 ops/s
Iteration  29: 11506071.043 ops/s
Iteration  30: 11472396.554 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_testHashCode":
  11485628.620 ±(99.9%) 12969.863 ops/s [Average]
  (min, avg, max) = (11445337.832, 11485628.620, 11521705.396), stdev = 19412.682
  CI (99.9%): [11472658.757, 11498598.482] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score       Error  Units
ImmutableBooleanArrayListTest._Benchmark.benchmark_testHashCode  thrpt   30  11485628.620 ± 12969.863  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_testNewWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_testNewWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 794485.496 ops/s
# Warmup Iteration   2: 1769051.484 ops/s
# Warmup Iteration   3: 1783976.968 ops/s
# Warmup Iteration   4: 1493623.169 ops/s
# Warmup Iteration   5: 1783454.168 ops/s
# Warmup Iteration   6: 1781914.267 ops/s
# Warmup Iteration   7: 1782958.407 ops/s
# Warmup Iteration   8: 1784416.157 ops/s
# Warmup Iteration   9: 1784401.648 ops/s
# Warmup Iteration  10: 1784559.430 ops/s
# Warmup Iteration  11: 1784301.920 ops/s
# Warmup Iteration  12: 1784763.974 ops/s
# Warmup Iteration  13: 1784696.866 ops/s
# Warmup Iteration  14: 1783397.098 ops/s
# Warmup Iteration  15: 1782949.864 ops/s
# Warmup Iteration  16: 1784451.012 ops/s
# Warmup Iteration  17: 1781760.946 ops/s
# Warmup Iteration  18: 1781958.813 ops/s
# Warmup Iteration  19: 1786016.115 ops/s
# Warmup Iteration  20: 1783668.265 ops/s
# Warmup Iteration  21: 1781458.720 ops/s
# Warmup Iteration  22: 1783718.598 ops/s
# Warmup Iteration  23: 1783258.282 ops/s
# Warmup Iteration  24: 1780127.227 ops/s
# Warmup Iteration  25: 1787015.606 ops/s
# Warmup Iteration  26: 1782815.450 ops/s
# Warmup Iteration  27: 1782158.523 ops/s
# Warmup Iteration  28: 1784994.186 ops/s
# Warmup Iteration  29: 1778906.250 ops/s
# Warmup Iteration  30: 1782851.953 ops/s
Iteration   1: 1784623.089 ops/s
Iteration   2: 1784773.140 ops/s
Iteration   3: 1788490.387 ops/s
Iteration   4: 1784309.292 ops/s
Iteration   5: 1786740.401 ops/s
Iteration   6: 1785740.907 ops/s
Iteration   7: 1783493.253 ops/s
Iteration   8: 1782426.337 ops/s
Iteration   9: 1786240.846 ops/s
Iteration  10: 1784033.986 ops/s
Iteration  11: 1784553.077 ops/s
Iteration  12: 1783541.298 ops/s
Iteration  13: 1779073.519 ops/s
Iteration  14: 1785784.783 ops/s
Iteration  15: 1786531.093 ops/s
Iteration  16: 1787971.925 ops/s
Iteration  17: 1785974.575 ops/s
Iteration  18: 1780399.719 ops/s
Iteration  19: 1778578.652 ops/s
Iteration  20: 1776296.329 ops/s
Iteration  21: 1784907.873 ops/s
Iteration  22: 1781857.966 ops/s
Iteration  23: 1788251.708 ops/s
Iteration  24: 1778767.489 ops/s
Iteration  25: 1784538.037 ops/s
Iteration  26: 1782219.730 ops/s
Iteration  27: 1783588.777 ops/s
Iteration  28: 1779791.551 ops/s
Iteration  29: 1787160.548 ops/s
Iteration  30: 1777846.390 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_testNewWith":
  1783616.889 ±(99.9%) 2187.760 ops/s [Average]
  (min, avg, max) = (1776296.329, 1783616.889, 1788490.387), stdev = 3274.537
  CI (99.9%): [1781429.129, 1785804.649] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ImmutableBooleanArrayListTest._Benchmark.benchmark_testNewWith  thrpt   30  1783616.889 ± 2187.760  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1504961.223 ops/s
# Warmup Iteration   2: 3332506.895 ops/s
# Warmup Iteration   3: 3364996.556 ops/s
# Warmup Iteration   4: 2792425.562 ops/s
# Warmup Iteration   5: 3346180.023 ops/s
# Warmup Iteration   6: 3355960.777 ops/s
# Warmup Iteration   7: 3352048.598 ops/s
# Warmup Iteration   8: 3352969.015 ops/s
# Warmup Iteration   9: 3348847.884 ops/s
# Warmup Iteration  10: 3346745.241 ops/s
# Warmup Iteration  11: 3348986.276 ops/s
# Warmup Iteration  12: 3349169.318 ops/s
# Warmup Iteration  13: 3345931.452 ops/s
# Warmup Iteration  14: 3347876.403 ops/s
# Warmup Iteration  15: 3352407.225 ops/s
# Warmup Iteration  16: 3348044.341 ops/s
# Warmup Iteration  17: 3343289.832 ops/s
# Warmup Iteration  18: 3333106.466 ops/s
# Warmup Iteration  19: 3351887.296 ops/s
# Warmup Iteration  20: 3342159.675 ops/s
# Warmup Iteration  21: 3341393.499 ops/s
# Warmup Iteration  22: 3336638.780 ops/s
# Warmup Iteration  23: 3333719.071 ops/s
# Warmup Iteration  24: 3342387.214 ops/s
# Warmup Iteration  25: 3338897.826 ops/s
# Warmup Iteration  26: 3332429.721 ops/s
# Warmup Iteration  27: 3341072.027 ops/s
# Warmup Iteration  28: 3341925.713 ops/s
# Warmup Iteration  29: 3341703.791 ops/s
# Warmup Iteration  30: 3345945.037 ops/s
Iteration   1: 3339991.400 ops/s
Iteration   2: 3320842.454 ops/s
Iteration   3: 3335832.443 ops/s
Iteration   4: 3335363.821 ops/s
Iteration   5: 3326774.963 ops/s
Iteration   6: 3333516.911 ops/s
Iteration   7: 3347403.144 ops/s
Iteration   8: 3343323.099 ops/s
Iteration   9: 3346289.699 ops/s
Iteration  10: 3338712.210 ops/s
Iteration  11: 3328702.132 ops/s
Iteration  12: 3340387.788 ops/s
Iteration  13: 3335127.144 ops/s
Iteration  14: 3334946.560 ops/s
Iteration  15: 3342300.686 ops/s
Iteration  16: 3319420.118 ops/s
Iteration  17: 3332198.393 ops/s
Iteration  18: 3347411.631 ops/s
Iteration  19: 3344880.716 ops/s
Iteration  20: 3339110.109 ops/s
Iteration  21: 3343891.746 ops/s
Iteration  22: 3347402.821 ops/s
Iteration  23: 3343120.865 ops/s
Iteration  24: 3343435.464 ops/s
Iteration  25: 3343059.517 ops/s
Iteration  26: 3341504.171 ops/s
Iteration  27: 3342870.476 ops/s
Iteration  28: 3340696.981 ops/s
Iteration  29: 3350685.037 ops/s
Iteration  30: 3348170.588 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_testToString":
  3339245.770 ±(99.9%) 5192.825 ops/s [Average]
  (min, avg, max) = (3319420.118, 3339245.770, 3350685.037), stdev = 7772.376
  CI (99.9%): [3334052.945, 3344438.594] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ImmutableBooleanArrayListTest._Benchmark.benchmark_testToString  thrpt   30  3339245.770 ± 5192.825  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4275202.836 ops/s
# Warmup Iteration   2: 7070994.574 ops/s
# Warmup Iteration   3: 8396677.725 ops/s
# Warmup Iteration   4: 8403543.988 ops/s
# Warmup Iteration   5: 8430707.178 ops/s
# Warmup Iteration   6: 8401899.227 ops/s
# Warmup Iteration   7: 8406259.783 ops/s
# Warmup Iteration   8: 8416514.956 ops/s
# Warmup Iteration   9: 8373954.087 ops/s
# Warmup Iteration  10: 8413488.236 ops/s
# Warmup Iteration  11: 8418405.080 ops/s
# Warmup Iteration  12: 8405334.093 ops/s
# Warmup Iteration  13: 8423251.649 ops/s
# Warmup Iteration  14: 8419765.885 ops/s
# Warmup Iteration  15: 8432553.671 ops/s
# Warmup Iteration  16: 8415484.292 ops/s
# Warmup Iteration  17: 8410783.891 ops/s
# Warmup Iteration  18: 8393432.944 ops/s
# Warmup Iteration  19: 8406026.172 ops/s
# Warmup Iteration  20: 8410236.733 ops/s
# Warmup Iteration  21: 8426666.809 ops/s
# Warmup Iteration  22: 8415078.677 ops/s
# Warmup Iteration  23: 8415479.056 ops/s
# Warmup Iteration  24: 8430391.586 ops/s
# Warmup Iteration  25: 8436292.659 ops/s
# Warmup Iteration  26: 8413758.986 ops/s
# Warmup Iteration  27: 8415603.802 ops/s
# Warmup Iteration  28: 8427844.006 ops/s
# Warmup Iteration  29: 8408107.441 ops/s
# Warmup Iteration  30: 8407152.054 ops/s
Iteration   1: 8394569.859 ops/s
Iteration   2: 8413687.984 ops/s
Iteration   3: 8420002.783 ops/s
Iteration   4: 8388678.473 ops/s
Iteration   5: 8389133.440 ops/s
Iteration   6: 8378299.722 ops/s
Iteration   7: 8410034.881 ops/s
Iteration   8: 8415114.507 ops/s
Iteration   9: 8415056.408 ops/s
Iteration  10: 8408661.616 ops/s
Iteration  11: 8391724.735 ops/s
Iteration  12: 8392282.293 ops/s
Iteration  13: 8381184.253 ops/s
Iteration  14: 8349182.654 ops/s
Iteration  15: 8368834.665 ops/s
Iteration  16: 8408371.691 ops/s
Iteration  17: 8408356.255 ops/s
Iteration  18: 8408115.514 ops/s
Iteration  19: 8442208.029 ops/s
Iteration  20: 8401509.042 ops/s
Iteration  21: 8427059.401 ops/s
Iteration  22: 8413841.080 ops/s
Iteration  23: 8418081.162 ops/s
Iteration  24: 8415486.827 ops/s
Iteration  25: 8397385.426 ops/s
Iteration  26: 8425413.082 ops/s
Iteration  27: 8408755.271 ops/s
Iteration  28: 8431037.330 ops/s
Iteration  29: 8417275.070 ops/s
Iteration  30: 8368063.209 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_toArray":
  8403580.222 ±(99.9%) 13651.341 ops/s [Average]
  (min, avg, max) = (8349182.654, 8403580.222, 8442208.029), stdev = 20432.687
  CI (99.9%): [8389928.881, 8417231.564] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
ImmutableBooleanArrayListTest._Benchmark.benchmark_toArray  thrpt   30  8403580.222 ± 13651.341  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_toBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_toBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2076758.606 ops/s
# Warmup Iteration   2: 9102608.245 ops/s
# Warmup Iteration   3: 9534985.698 ops/s
# Warmup Iteration   4: 7909939.966 ops/s
# Warmup Iteration   5: 9550514.208 ops/s
# Warmup Iteration   6: 9541975.624 ops/s
# Warmup Iteration   7: 9566505.839 ops/s
# Warmup Iteration   8: 9546460.695 ops/s
# Warmup Iteration   9: 9547783.107 ops/s
# Warmup Iteration  10: 9539563.259 ops/s
# Warmup Iteration  11: 9545656.840 ops/s
# Warmup Iteration  12: 9548740.785 ops/s
# Warmup Iteration  13: 9537396.789 ops/s
# Warmup Iteration  14: 9536498.836 ops/s
# Warmup Iteration  15: 9558663.807 ops/s
# Warmup Iteration  16: 9533958.548 ops/s
# Warmup Iteration  17: 9533182.305 ops/s
# Warmup Iteration  18: 9532064.338 ops/s
# Warmup Iteration  19: 9532120.590 ops/s
# Warmup Iteration  20: 9528366.133 ops/s
# Warmup Iteration  21: 9526924.889 ops/s
# Warmup Iteration  22: 9543972.124 ops/s
# Warmup Iteration  23: 9537387.299 ops/s
# Warmup Iteration  24: 9530854.044 ops/s
# Warmup Iteration  25: 9537583.319 ops/s
# Warmup Iteration  26: 9537099.416 ops/s
# Warmup Iteration  27: 9539702.661 ops/s
# Warmup Iteration  28: 9535975.616 ops/s
# Warmup Iteration  29: 9539048.615 ops/s
# Warmup Iteration  30: 9544512.929 ops/s
Iteration   1: 9535894.637 ops/s
Iteration   2: 9527901.965 ops/s
Iteration   3: 9540357.685 ops/s
Iteration   4: 9557357.729 ops/s
Iteration   5: 9547154.941 ops/s
Iteration   6: 9531078.926 ops/s
Iteration   7: 9534197.322 ops/s
Iteration   8: 9534139.727 ops/s
Iteration   9: 9540741.849 ops/s
Iteration  10: 9530308.117 ops/s
Iteration  11: 9541413.418 ops/s
Iteration  12: 9528602.069 ops/s
Iteration  13: 9557679.733 ops/s
Iteration  14: 9547000.935 ops/s
Iteration  15: 9536888.226 ops/s
Iteration  16: 9549426.202 ops/s
Iteration  17: 9542533.378 ops/s
Iteration  18: 9554943.415 ops/s
Iteration  19: 9545696.827 ops/s
Iteration  20: 9542922.600 ops/s
Iteration  21: 9528875.010 ops/s
Iteration  22: 9536179.045 ops/s
Iteration  23: 9541716.182 ops/s
Iteration  24: 9544677.910 ops/s
Iteration  25: 9534496.603 ops/s
Iteration  26: 9528973.278 ops/s
Iteration  27: 9538621.084 ops/s
Iteration  28: 9540190.416 ops/s
Iteration  29: 9546217.402 ops/s
Iteration  30: 9536106.559 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_toBag":
  9540076.440 ±(99.9%) 5536.308 ops/s [Average]
  (min, avg, max) = (9527901.965, 9540076.440, 9557679.733), stdev = 8286.486
  CI (99.9%): [9534540.132, 9545612.747] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ImmutableBooleanArrayListTest._Benchmark.benchmark_toBag  thrpt   30  9540076.440 ± 5536.308  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1226695.193 ops/s
# Warmup Iteration   2: 2937761.744 ops/s
# Warmup Iteration   3: 2414909.391 ops/s
# Warmup Iteration   4: 2919108.764 ops/s
# Warmup Iteration   5: 2928173.977 ops/s
# Warmup Iteration   6: 2923340.889 ops/s
# Warmup Iteration   7: 2932947.645 ops/s
# Warmup Iteration   8: 2929940.179 ops/s
# Warmup Iteration   9: 2932281.900 ops/s
# Warmup Iteration  10: 2927249.697 ops/s
# Warmup Iteration  11: 2931542.590 ops/s
# Warmup Iteration  12: 2929545.170 ops/s
# Warmup Iteration  13: 2931630.503 ops/s
# Warmup Iteration  14: 2932407.023 ops/s
# Warmup Iteration  15: 2930271.508 ops/s
# Warmup Iteration  16: 2938378.750 ops/s
# Warmup Iteration  17: 2929961.218 ops/s
# Warmup Iteration  18: 2929337.334 ops/s
# Warmup Iteration  19: 2937694.390 ops/s
# Warmup Iteration  20: 2930513.964 ops/s
# Warmup Iteration  21: 2933954.832 ops/s
# Warmup Iteration  22: 2926216.000 ops/s
# Warmup Iteration  23: 2927634.297 ops/s
# Warmup Iteration  24: 2928248.372 ops/s
# Warmup Iteration  25: 2933622.132 ops/s
# Warmup Iteration  26: 2930200.997 ops/s
# Warmup Iteration  27: 2931305.975 ops/s
# Warmup Iteration  28: 2921855.067 ops/s
# Warmup Iteration  29: 2934119.395 ops/s
# Warmup Iteration  30: 2931304.098 ops/s
Iteration   1: 2931999.609 ops/s
Iteration   2: 2930365.794 ops/s
Iteration   3: 2934169.727 ops/s
Iteration   4: 2931235.099 ops/s
Iteration   5: 2935868.667 ops/s
Iteration   6: 2934397.798 ops/s
Iteration   7: 2920447.160 ops/s
Iteration   8: 2932971.778 ops/s
Iteration   9: 2924362.741 ops/s
Iteration  10: 2929517.477 ops/s
Iteration  11: 2929644.587 ops/s
Iteration  12: 2928987.775 ops/s
Iteration  13: 2932014.927 ops/s
Iteration  14: 2929276.884 ops/s
Iteration  15: 2932020.905 ops/s
Iteration  16: 2937724.374 ops/s
Iteration  17: 2933455.888 ops/s
Iteration  18: 2934791.387 ops/s
Iteration  19: 2928395.864 ops/s
Iteration  20: 2932629.870 ops/s
Iteration  21: 2935910.335 ops/s
Iteration  22: 2916843.338 ops/s
Iteration  23: 2921288.789 ops/s
Iteration  24: 2933516.162 ops/s
Iteration  25: 2926117.405 ops/s
Iteration  26: 2928700.803 ops/s
Iteration  27: 2931019.545 ops/s
Iteration  28: 2929776.241 ops/s
Iteration  29: 2932141.632 ops/s
Iteration  30: 2929246.974 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_toList":
  2930294.651 ±(99.9%) 3137.358 ops/s [Average]
  (min, avg, max) = (2916843.338, 2930294.651, 2937724.374), stdev = 4695.850
  CI (99.9%): [2927157.293, 2933432.009] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableBooleanArrayListTest._Benchmark.benchmark_toList  thrpt   30  2930294.651 ± 3137.358  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_toReversed$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_toReversed

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2485938.295 ops/s
# Warmup Iteration   2: 6096211.212 ops/s
# Warmup Iteration   3: 6085673.791 ops/s
# Warmup Iteration   4: 4954499.010 ops/s
# Warmup Iteration   5: 6081179.333 ops/s
# Warmup Iteration   6: 6081737.124 ops/s
# Warmup Iteration   7: 6085015.520 ops/s
# Warmup Iteration   8: 6084181.408 ops/s
# Warmup Iteration   9: 6078666.767 ops/s
# Warmup Iteration  10: 6061865.038 ops/s
# Warmup Iteration  11: 6085102.048 ops/s
# Warmup Iteration  12: 6095858.777 ops/s
# Warmup Iteration  13: 6084137.463 ops/s
# Warmup Iteration  14: 6086771.489 ops/s
# Warmup Iteration  15: 6075496.355 ops/s
# Warmup Iteration  16: 6077642.597 ops/s
# Warmup Iteration  17: 6090047.886 ops/s
# Warmup Iteration  18: 6080933.467 ops/s
# Warmup Iteration  19: 6075456.685 ops/s
# Warmup Iteration  20: 6082442.338 ops/s
# Warmup Iteration  21: 6089758.447 ops/s
# Warmup Iteration  22: 6080163.993 ops/s
# Warmup Iteration  23: 6090761.545 ops/s
# Warmup Iteration  24: 6089662.985 ops/s
# Warmup Iteration  25: 6083334.406 ops/s
# Warmup Iteration  26: 6094519.007 ops/s
# Warmup Iteration  27: 6091984.737 ops/s
# Warmup Iteration  28: 6078367.834 ops/s
# Warmup Iteration  29: 6091150.474 ops/s
# Warmup Iteration  30: 6081304.607 ops/s
Iteration   1: 6088212.284 ops/s
Iteration   2: 6082837.434 ops/s
Iteration   3: 6083379.195 ops/s
Iteration   4: 6093497.083 ops/s
Iteration   5: 6090152.836 ops/s
Iteration   6: 6086587.053 ops/s
Iteration   7: 6080295.532 ops/s
Iteration   8: 6076009.708 ops/s
Iteration   9: 6072888.858 ops/s
Iteration  10: 6070387.496 ops/s
Iteration  11: 6085317.776 ops/s
Iteration  12: 6089050.131 ops/s
Iteration  13: 6080737.235 ops/s
Iteration  14: 6082326.042 ops/s
Iteration  15: 6089218.626 ops/s
Iteration  16: 6090222.967 ops/s
Iteration  17: 6096236.917 ops/s
Iteration  18: 6078184.573 ops/s
Iteration  19: 6083530.151 ops/s
Iteration  20: 6075488.920 ops/s
Iteration  21: 6081567.003 ops/s
Iteration  22: 6085133.143 ops/s
Iteration  23: 6091545.790 ops/s
Iteration  24: 6078906.081 ops/s
Iteration  25: 6080215.877 ops/s
Iteration  26: 6094164.819 ops/s
Iteration  27: 6081562.170 ops/s
Iteration  28: 6095798.115 ops/s
Iteration  29: 6088429.565 ops/s
Iteration  30: 6085815.181 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_toReversed":
  6084589.952 ±(99.9%) 4419.178 ops/s [Average]
  (min, avg, max) = (6070387.496, 6084589.952, 6096236.917), stdev = 6614.419
  CI (99.9%): [6080170.774, 6089009.130] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableBooleanArrayListTest._Benchmark.benchmark_toReversed  thrpt   30  6084589.952 ± 4419.178  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_toSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_toSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5503363.119 ops/s
# Warmup Iteration   2: 12382528.542 ops/s
# Warmup Iteration   3: 12389328.234 ops/s
# Warmup Iteration   4: 10249293.708 ops/s
# Warmup Iteration   5: 12265595.419 ops/s
# Warmup Iteration   6: 12415385.644 ops/s
# Warmup Iteration   7: 12404007.145 ops/s
# Warmup Iteration   8: 12388213.429 ops/s
# Warmup Iteration   9: 12411575.781 ops/s
# Warmup Iteration  10: 12418069.448 ops/s
# Warmup Iteration  11: 12396745.345 ops/s
# Warmup Iteration  12: 12389603.830 ops/s
# Warmup Iteration  13: 12423144.053 ops/s
# Warmup Iteration  14: 12356954.877 ops/s
# Warmup Iteration  15: 12404223.469 ops/s
# Warmup Iteration  16: 12421197.163 ops/s
# Warmup Iteration  17: 12385710.013 ops/s
# Warmup Iteration  18: 12368982.389 ops/s
# Warmup Iteration  19: 12411573.683 ops/s
# Warmup Iteration  20: 12415157.460 ops/s
# Warmup Iteration  21: 12382002.985 ops/s
# Warmup Iteration  22: 12413705.671 ops/s
# Warmup Iteration  23: 12388962.755 ops/s
# Warmup Iteration  24: 12404949.796 ops/s
# Warmup Iteration  25: 12408504.364 ops/s
# Warmup Iteration  26: 12402414.898 ops/s
# Warmup Iteration  27: 12369312.218 ops/s
# Warmup Iteration  28: 12392296.471 ops/s
# Warmup Iteration  29: 12407859.605 ops/s
# Warmup Iteration  30: 12406322.846 ops/s
Iteration   1: 12411955.682 ops/s
Iteration   2: 12394247.673 ops/s
Iteration   3: 12381363.316 ops/s
Iteration   4: 12416105.229 ops/s
Iteration   5: 12397763.625 ops/s
Iteration   6: 12385092.375 ops/s
Iteration   7: 12419372.613 ops/s
Iteration   8: 12406487.721 ops/s
Iteration   9: 12366725.982 ops/s
Iteration  10: 12375058.661 ops/s
Iteration  11: 12368765.360 ops/s
Iteration  12: 12404433.470 ops/s
Iteration  13: 12382620.233 ops/s
Iteration  14: 12443537.498 ops/s
Iteration  15: 12389777.801 ops/s
Iteration  16: 12446474.951 ops/s
Iteration  17: 12415942.779 ops/s
Iteration  18: 12413908.605 ops/s
Iteration  19: 12381710.540 ops/s
Iteration  20: 12414309.626 ops/s
Iteration  21: 12404541.129 ops/s
Iteration  22: 12403218.033 ops/s
Iteration  23: 12393726.383 ops/s
Iteration  24: 12424305.528 ops/s
Iteration  25: 12405199.215 ops/s
Iteration  26: 12432042.970 ops/s
Iteration  27: 12413077.424 ops/s
Iteration  28: 12412905.928 ops/s
Iteration  29: 12419227.070 ops/s
Iteration  30: 12417684.438 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanArrayListTest._Benchmark.benchmark_toSet":
  12404719.395 ±(99.9%) 13401.035 ops/s [Average]
  (min, avg, max) = (12366725.982, 12404719.395, 12446474.951), stdev = 20058.039
  CI (99.9%): [12391318.361, 12418120.430] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score       Error  Units
ImmutableBooleanArrayListTest._Benchmark.benchmark_toSet  thrpt   30  12404719.395 ± 13401.035  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10484854.706 ops/s
# Warmup Iteration   2: 16888435.931 ops/s
# Warmup Iteration   3: 19725087.720 ops/s
# Warmup Iteration   4: 19755411.647 ops/s
# Warmup Iteration   5: 19754991.931 ops/s
# Warmup Iteration   6: 19702806.580 ops/s
# Warmup Iteration   7: 19666374.581 ops/s
# Warmup Iteration   8: 19758265.187 ops/s
# Warmup Iteration   9: 19747058.212 ops/s
# Warmup Iteration  10: 19742939.191 ops/s
# Warmup Iteration  11: 19640240.065 ops/s
# Warmup Iteration  12: 19635787.976 ops/s
# Warmup Iteration  13: 19724889.968 ops/s
# Warmup Iteration  14: 19725195.192 ops/s
# Warmup Iteration  15: 19626212.326 ops/s
# Warmup Iteration  16: 19596547.853 ops/s
# Warmup Iteration  17: 19688026.359 ops/s
# Warmup Iteration  18: 19678295.028 ops/s
# Warmup Iteration  19: 19710130.722 ops/s
# Warmup Iteration  20: 19695124.099 ops/s
# Warmup Iteration  21: 19690337.904 ops/s
# Warmup Iteration  22: 19682652.244 ops/s
# Warmup Iteration  23: 19623916.447 ops/s
# Warmup Iteration  24: 19692222.894 ops/s
# Warmup Iteration  25: 19655321.685 ops/s
# Warmup Iteration  26: 19652876.144 ops/s
# Warmup Iteration  27: 19697516.770 ops/s
# Warmup Iteration  28: 19694458.017 ops/s
# Warmup Iteration  29: 19643661.280 ops/s
# Warmup Iteration  30: 19593964.601 ops/s
Iteration   1: 19740155.004 ops/s
Iteration   2: 19674859.692 ops/s
Iteration   3: 19764839.784 ops/s
Iteration   4: 19674019.190 ops/s
Iteration   5: 19647539.701 ops/s
Iteration   6: 19666891.347 ops/s
Iteration   7: 19737801.456 ops/s
Iteration   8: 19650622.428 ops/s
Iteration   9: 19712926.710 ops/s
Iteration  10: 19669115.599 ops/s
Iteration  11: 19775473.647 ops/s
Iteration  12: 19741436.966 ops/s
Iteration  13: 19804995.597 ops/s
Iteration  14: 19832649.943 ops/s
Iteration  15: 19723172.705 ops/s
Iteration  16: 19728851.974 ops/s
Iteration  17: 19749267.204 ops/s
Iteration  18: 19710053.483 ops/s
Iteration  19: 19620481.129 ops/s
Iteration  20: 19705027.191 ops/s
Iteration  21: 19715864.444 ops/s
Iteration  22: 19714486.391 ops/s
Iteration  23: 19620148.212 ops/s
Iteration  24: 19645529.916 ops/s
Iteration  25: 19632264.259 ops/s
Iteration  26: 19614101.079 ops/s
Iteration  27: 19656588.447 ops/s
Iteration  28: 19638046.438 ops/s
Iteration  29: 19748243.321 ops/s
Iteration  30: 19681280.933 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_allSatisfy":
  19699891.140 ±(99.9%) 37714.972 ops/s [Average]
  (min, avg, max) = (19614101.079, 19699891.140, 19832649.943), stdev = 56449.999
  CI (99.9%): [19662176.168, 19737606.112] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score       Error  Units
ImmutableBooleanEmptyListTest._Benchmark.benchmark_allSatisfy  thrpt   30  19699891.140 ± 37714.972  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6438957.731 ops/s
# Warmup Iteration   2: 14542981.338 ops/s
# Warmup Iteration   3: 11615640.176 ops/s
# Warmup Iteration   4: 14073533.039 ops/s
# Warmup Iteration   5: 14088490.873 ops/s
# Warmup Iteration   6: 14095668.997 ops/s
# Warmup Iteration   7: 14120034.433 ops/s
# Warmup Iteration   8: 14136059.818 ops/s
# Warmup Iteration   9: 14122717.480 ops/s
# Warmup Iteration  10: 14102441.414 ops/s
# Warmup Iteration  11: 14122319.686 ops/s
# Warmup Iteration  12: 14116472.211 ops/s
# Warmup Iteration  13: 14104247.129 ops/s
# Warmup Iteration  14: 14113254.522 ops/s
# Warmup Iteration  15: 14117370.452 ops/s
# Warmup Iteration  16: 14070108.067 ops/s
# Warmup Iteration  17: 14122311.910 ops/s
# Warmup Iteration  18: 14104001.397 ops/s
# Warmup Iteration  19: 14102187.613 ops/s
# Warmup Iteration  20: 14082155.405 ops/s
# Warmup Iteration  21: 14115473.007 ops/s
# Warmup Iteration  22: 14093154.112 ops/s
# Warmup Iteration  23: 14123312.906 ops/s
# Warmup Iteration  24: 14106839.043 ops/s
# Warmup Iteration  25: 13909390.250 ops/s
# Warmup Iteration  26: 14121041.875 ops/s
# Warmup Iteration  27: 14112960.668 ops/s
# Warmup Iteration  28: 14089034.204 ops/s
# Warmup Iteration  29: 14097662.994 ops/s
# Warmup Iteration  30: 14081285.146 ops/s
Iteration   1: 14049192.235 ops/s
Iteration   2: 14094827.812 ops/s
Iteration   3: 14110629.670 ops/s
Iteration   4: 14097665.574 ops/s
Iteration   5: 14118900.290 ops/s
Iteration   6: 14072904.209 ops/s
Iteration   7: 14128394.818 ops/s
Iteration   8: 14119480.687 ops/s
Iteration   9: 14116246.191 ops/s
Iteration  10: 14110233.898 ops/s
Iteration  11: 14087870.201 ops/s
Iteration  12: 14083218.066 ops/s
Iteration  13: 14139878.950 ops/s
Iteration  14: 14113774.480 ops/s
Iteration  15: 14101417.969 ops/s
Iteration  16: 14122211.720 ops/s
Iteration  17: 14080675.491 ops/s
Iteration  18: 14091251.024 ops/s
Iteration  19: 14129468.302 ops/s
Iteration  20: 14114891.783 ops/s
Iteration  21: 14114811.403 ops/s
Iteration  22: 14112869.474 ops/s
Iteration  23: 14099833.555 ops/s
Iteration  24: 13551662.592 ops/s
Iteration  25: 14127797.681 ops/s
Iteration  26: 14117371.966 ops/s
Iteration  27: 14082872.219 ops/s
Iteration  28: 14067498.304 ops/s
Iteration  29: 14131547.623 ops/s
Iteration  30: 14122543.353 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_anySatisfy":
  14087064.718 ±(99.9%) 69030.328 ops/s [Average]
  (min, avg, max) = (13551662.592, 14087064.718, 14139878.950), stdev = 103321.353
  CI (99.9%): [14018034.390, 14156095.046] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score       Error  Units
ImmutableBooleanEmptyListTest._Benchmark.benchmark_anySatisfy  thrpt   30  14087064.718 ± 69030.328  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1212438.135 ops/s
# Warmup Iteration   2: 2632069.987 ops/s
# Warmup Iteration   3: 2639507.531 ops/s
# Warmup Iteration   4: 2206790.303 ops/s
# Warmup Iteration   5: 2640211.027 ops/s
# Warmup Iteration   6: 2641376.990 ops/s
# Warmup Iteration   7: 2635975.615 ops/s
# Warmup Iteration   8: 2634880.160 ops/s
# Warmup Iteration   9: 2627081.769 ops/s
# Warmup Iteration  10: 2627422.853 ops/s
# Warmup Iteration  11: 2632152.616 ops/s
# Warmup Iteration  12: 2614823.795 ops/s
# Warmup Iteration  13: 2615708.248 ops/s
# Warmup Iteration  14: 2616877.837 ops/s
# Warmup Iteration  15: 2625934.555 ops/s
# Warmup Iteration  16: 2627332.462 ops/s
# Warmup Iteration  17: 2617508.979 ops/s
# Warmup Iteration  18: 2611400.124 ops/s
# Warmup Iteration  19: 2594090.773 ops/s
# Warmup Iteration  20: 2621861.456 ops/s
# Warmup Iteration  21: 2639464.334 ops/s
# Warmup Iteration  22: 2635355.328 ops/s
# Warmup Iteration  23: 2601755.042 ops/s
# Warmup Iteration  24: 2631348.798 ops/s
# Warmup Iteration  25: 2610671.056 ops/s
# Warmup Iteration  26: 2599863.149 ops/s
# Warmup Iteration  27: 2605561.652 ops/s
# Warmup Iteration  28: 2616390.899 ops/s
# Warmup Iteration  29: 2608539.118 ops/s
# Warmup Iteration  30: 2598443.172 ops/s
Iteration   1: 2602665.973 ops/s
Iteration   2: 2633380.717 ops/s
Iteration   3: 2611734.754 ops/s
Iteration   4: 2620321.690 ops/s
Iteration   5: 2611678.482 ops/s
Iteration   6: 2571832.567 ops/s
Iteration   7: 2617179.241 ops/s
Iteration   8: 2599170.380 ops/s
Iteration   9: 2612730.457 ops/s
Iteration  10: 2617535.065 ops/s
Iteration  11: 2616697.505 ops/s
Iteration  12: 2635371.088 ops/s
Iteration  13: 2609738.350 ops/s
Iteration  14: 2632819.469 ops/s
Iteration  15: 2635740.931 ops/s
Iteration  16: 2616808.002 ops/s
Iteration  17: 2635143.549 ops/s
Iteration  18: 2621985.309 ops/s
Iteration  19: 2609283.178 ops/s
Iteration  20: 2615561.789 ops/s
Iteration  21: 2607767.512 ops/s
Iteration  22: 2630333.406 ops/s
Iteration  23: 2625566.654 ops/s
Iteration  24: 2614058.639 ops/s
Iteration  25: 2635071.086 ops/s
Iteration  26: 2609675.160 ops/s
Iteration  27: 2625512.818 ops/s
Iteration  28: 2637880.992 ops/s
Iteration  29: 2608442.935 ops/s
Iteration  30: 2639234.525 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_appendString":
  2618697.407 ±(99.9%) 9641.907 ops/s [Average]
  (min, avg, max) = (2571832.567, 2618697.407, 2639234.525), stdev = 14431.553
  CI (99.9%): [2609055.501, 2628339.314] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ImmutableBooleanEmptyListTest._Benchmark.benchmark_appendString  thrpt   30  2618697.407 ± 9641.907  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_asLazy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_asLazy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 33080384.416 ops/s
# Warmup Iteration   2: 60831065.565 ops/s
# Warmup Iteration   3: 53430959.500 ops/s
# Warmup Iteration   4: 62699964.420 ops/s
# Warmup Iteration   5: 62456286.127 ops/s
# Warmup Iteration   6: 62652744.343 ops/s
# Warmup Iteration   7: 62688545.074 ops/s
# Warmup Iteration   8: 62604853.161 ops/s
# Warmup Iteration   9: 62611165.383 ops/s
# Warmup Iteration  10: 62668841.835 ops/s
# Warmup Iteration  11: 62759512.992 ops/s
# Warmup Iteration  12: 62680815.670 ops/s
# Warmup Iteration  13: 62489787.857 ops/s
# Warmup Iteration  14: 62663021.443 ops/s
# Warmup Iteration  15: 62757198.754 ops/s
# Warmup Iteration  16: 62843289.019 ops/s
# Warmup Iteration  17: 62649663.399 ops/s
# Warmup Iteration  18: 62600922.352 ops/s
# Warmup Iteration  19: 62676305.561 ops/s
# Warmup Iteration  20: 62730337.845 ops/s
# Warmup Iteration  21: 62739264.949 ops/s
# Warmup Iteration  22: 62659355.976 ops/s
# Warmup Iteration  23: 62974528.396 ops/s
# Warmup Iteration  24: 62696485.484 ops/s
# Warmup Iteration  25: 62736310.149 ops/s
# Warmup Iteration  26: 62675274.293 ops/s
# Warmup Iteration  27: 62746626.735 ops/s
# Warmup Iteration  28: 62701664.980 ops/s
# Warmup Iteration  29: 62759707.900 ops/s
# Warmup Iteration  30: 62660298.764 ops/s
Iteration   1: 62467303.874 ops/s
Iteration   2: 62724532.093 ops/s
Iteration   3: 62495389.462 ops/s
Iteration   4: 62576162.198 ops/s
Iteration   5: 62467179.462 ops/s
Iteration   6: 62247043.976 ops/s
Iteration   7: 62532232.889 ops/s
Iteration   8: 62549050.943 ops/s
Iteration   9: 62929039.678 ops/s
Iteration  10: 62857569.081 ops/s
Iteration  11: 62662747.231 ops/s
Iteration  12: 62736775.899 ops/s
Iteration  13: 62414987.989 ops/s
Iteration  14: 62736137.075 ops/s
Iteration  15: 62631410.163 ops/s
Iteration  16: 62697250.881 ops/s
Iteration  17: 62796523.110 ops/s
Iteration  18: 62435138.194 ops/s
Iteration  19: 62845728.830 ops/s
Iteration  20: 62609740.067 ops/s
Iteration  21: 62555577.664 ops/s
Iteration  22: 62688140.636 ops/s
Iteration  23: 62559622.903 ops/s
Iteration  24: 62534310.941 ops/s
Iteration  25: 62803330.892 ops/s
Iteration  26: 62439997.557 ops/s
Iteration  27: 62521773.819 ops/s
Iteration  28: 62530091.536 ops/s
Iteration  29: 62594589.479 ops/s
Iteration  30: 62805064.155 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_asLazy":
  62614814.756 ±(99.9%) 104532.722 ops/s [Average]
  (min, avg, max) = (62247043.976, 62614814.756, 62929039.678), stdev = 156459.669
  CI (99.9%): [62510282.034, 62719347.478] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score        Error  Units
ImmutableBooleanEmptyListTest._Benchmark.benchmark_asLazy  thrpt   30  62614814.756 ± 104532.722  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_booleanIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_booleanIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 171336670.410 ops/s
# Warmup Iteration   2: 297992964.607 ops/s
# Warmup Iteration   3: 278859424.181 ops/s
# Warmup Iteration   4: 316283231.174 ops/s
# Warmup Iteration   5: 315561105.744 ops/s
# Warmup Iteration   6: 315975521.926 ops/s
# Warmup Iteration   7: 315130291.493 ops/s
# Warmup Iteration   8: 313791349.364 ops/s
# Warmup Iteration   9: 315696310.327 ops/s
# Warmup Iteration  10: 315671029.787 ops/s
# Warmup Iteration  11: 315198728.665 ops/s
# Warmup Iteration  12: 316295831.210 ops/s
# Warmup Iteration  13: 316013642.603 ops/s
# Warmup Iteration  14: 316539276.610 ops/s
# Warmup Iteration  15: 316910630.619 ops/s
# Warmup Iteration  16: 314702385.055 ops/s
# Warmup Iteration  17: 315435350.967 ops/s
# Warmup Iteration  18: 313569853.475 ops/s
# Warmup Iteration  19: 314519809.915 ops/s
# Warmup Iteration  20: 314461660.915 ops/s
# Warmup Iteration  21: 314783278.757 ops/s
# Warmup Iteration  22: 315668150.574 ops/s
# Warmup Iteration  23: 312089093.057 ops/s
# Warmup Iteration  24: 315679200.187 ops/s
# Warmup Iteration  25: 315607264.202 ops/s
# Warmup Iteration  26: 314769155.179 ops/s
# Warmup Iteration  27: 316161577.725 ops/s
# Warmup Iteration  28: 314829512.064 ops/s
# Warmup Iteration  29: 314424169.115 ops/s
# Warmup Iteration  30: 315602656.730 ops/s
Iteration   1: 315359216.142 ops/s
Iteration   2: 314007934.216 ops/s
Iteration   3: 315645634.160 ops/s
Iteration   4: 315506979.480 ops/s
Iteration   5: 315339119.505 ops/s
Iteration   6: 314970778.329 ops/s
Iteration   7: 314478930.589 ops/s
Iteration   8: 313598639.632 ops/s
Iteration   9: 313368942.065 ops/s
Iteration  10: 313598276.207 ops/s
Iteration  11: 314756971.517 ops/s
Iteration  12: 313766879.336 ops/s
Iteration  13: 312689630.692 ops/s
Iteration  14: 313598945.522 ops/s
Iteration  15: 314243228.285 ops/s
Iteration  16: 313280767.320 ops/s
Iteration  17: 313791253.285 ops/s
Iteration  18: 313568899.149 ops/s
Iteration  19: 314007725.061 ops/s
Iteration  20: 314275298.443 ops/s
Iteration  21: 313838021.095 ops/s
Iteration  22: 314652863.148 ops/s
Iteration  23: 314358327.372 ops/s
Iteration  24: 313413027.004 ops/s
Iteration  25: 314063983.891 ops/s
Iteration  26: 314632549.749 ops/s
Iteration  27: 314946287.170 ops/s
Iteration  28: 315085435.599 ops/s
Iteration  29: 315636792.204 ops/s
Iteration  30: 313599131.062 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_booleanIterator":
  314269348.908 ±(99.9%) 525866.593 ops/s [Average]
  (min, avg, max) = (312689630.692, 314269348.908, 315645634.160), stdev = 787092.420
  CI (99.9%): [313743482.314, 314795215.501] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt          Score        Error  Units
ImmutableBooleanEmptyListTest._Benchmark.benchmark_booleanIterator  thrpt   30  314269348.908 ± 525866.593  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1557566.268 ops/s
# Warmup Iteration   2: 1698561.687 ops/s
# Warmup Iteration   3: 2019993.722 ops/s
# Warmup Iteration   4: 2192188.764 ops/s
# Warmup Iteration   5: 2184352.323 ops/s
# Warmup Iteration   6: 2189345.302 ops/s
# Warmup Iteration   7: 2198279.056 ops/s
# Warmup Iteration   8: 2196421.032 ops/s
# Warmup Iteration   9: 2199120.832 ops/s
# Warmup Iteration  10: 2196816.089 ops/s
# Warmup Iteration  11: 2197175.578 ops/s
# Warmup Iteration  12: 2190378.492 ops/s
# Warmup Iteration  13: 2200092.514 ops/s
# Warmup Iteration  14: 1818625.369 ops/s
# Warmup Iteration  15: 2198255.171 ops/s
# Warmup Iteration  16: 2196753.061 ops/s
# Warmup Iteration  17: 2199169.523 ops/s
# Warmup Iteration  18: 2199478.404 ops/s
# Warmup Iteration  19: 2195149.492 ops/s
# Warmup Iteration  20: 2199147.109 ops/s
# Warmup Iteration  21: 2185640.477 ops/s
# Warmup Iteration  22: 2195163.431 ops/s
# Warmup Iteration  23: 2193401.508 ops/s
# Warmup Iteration  24: 2196356.334 ops/s
# Warmup Iteration  25: 2197590.886 ops/s
# Warmup Iteration  26: 2195226.644 ops/s
# Warmup Iteration  27: 2198218.154 ops/s
# Warmup Iteration  28: 2200880.427 ops/s
# Warmup Iteration  29: 2197108.203 ops/s
# Warmup Iteration  30: 2197216.816 ops/s
Iteration   1: 2195187.302 ops/s
Iteration   2: 2195311.842 ops/s
Iteration   3: 2199907.483 ops/s
Iteration   4: 2199878.896 ops/s
Iteration   5: 2199894.168 ops/s
Iteration   6: 2194229.474 ops/s
Iteration   7: 2198204.516 ops/s
Iteration   8: 2202910.367 ops/s
Iteration   9: 2200687.638 ops/s
Iteration  10: 2197704.353 ops/s
Iteration  11: 2196766.854 ops/s
Iteration  12: 2192235.059 ops/s
Iteration  13: 2200276.130 ops/s
Iteration  14: 2197695.053 ops/s
Iteration  15: 2199177.093 ops/s
Iteration  16: 2191736.653 ops/s
Iteration  17: 2199798.816 ops/s
Iteration  18: 2197366.528 ops/s
Iteration  19: 2199145.290 ops/s
Iteration  20: 2199250.856 ops/s
Iteration  21: 2193182.219 ops/s
Iteration  22: 2199232.660 ops/s
Iteration  23: 2199214.228 ops/s
Iteration  24: 2199548.462 ops/s
Iteration  25: 2195607.840 ops/s
Iteration  26: 2195761.459 ops/s
Iteration  27: 2197540.011 ops/s
Iteration  28: 2197375.635 ops/s
Iteration  29: 2191361.938 ops/s
Iteration  30: 2193180.490 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_collect":
  2197312.310 ±(99.9%) 1968.595 ops/s [Average]
  (min, avg, max) = (2191361.938, 2197312.310, 2202910.367), stdev = 2946.501
  CI (99.9%): [2195343.715, 2199280.906] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableBooleanEmptyListTest._Benchmark.benchmark_collect  thrpt   30  2197312.310 ± 1968.595  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6479393.284 ops/s
# Warmup Iteration   2: 14705499.291 ops/s
# Warmup Iteration   3: 14302666.025 ops/s
# Warmup Iteration   4: 11834219.355 ops/s
# Warmup Iteration   5: 14373323.321 ops/s
# Warmup Iteration   6: 14370025.031 ops/s
# Warmup Iteration   7: 14331361.279 ops/s
# Warmup Iteration   8: 14400427.622 ops/s
# Warmup Iteration   9: 14383434.737 ops/s
# Warmup Iteration  10: 14404797.734 ops/s
# Warmup Iteration  11: 14323817.812 ops/s
# Warmup Iteration  12: 14393135.872 ops/s
# Warmup Iteration  13: 14372690.784 ops/s
# Warmup Iteration  14: 14384332.338 ops/s
# Warmup Iteration  15: 14351862.503 ops/s
# Warmup Iteration  16: 14369088.621 ops/s
# Warmup Iteration  17: 14366103.927 ops/s
# Warmup Iteration  18: 14384370.183 ops/s
# Warmup Iteration  19: 14354220.415 ops/s
# Warmup Iteration  20: 14349211.802 ops/s
# Warmup Iteration  21: 14398609.944 ops/s
# Warmup Iteration  22: 14362469.105 ops/s
# Warmup Iteration  23: 14373592.139 ops/s
# Warmup Iteration  24: 14391648.922 ops/s
# Warmup Iteration  25: 14384210.811 ops/s
# Warmup Iteration  26: 14385671.473 ops/s
# Warmup Iteration  27: 14336771.583 ops/s
# Warmup Iteration  28: 14384580.625 ops/s
# Warmup Iteration  29: 14394866.402 ops/s
# Warmup Iteration  30: 14394107.611 ops/s
Iteration   1: 14389730.708 ops/s
Iteration   2: 14377190.373 ops/s
Iteration   3: 14384162.320 ops/s
Iteration   4: 14377880.776 ops/s
Iteration   5: 14408274.543 ops/s
Iteration   6: 14378536.824 ops/s
Iteration   7: 14406630.364 ops/s
Iteration   8: 14412937.600 ops/s
Iteration   9: 14351138.989 ops/s
Iteration  10: 14371402.890 ops/s
Iteration  11: 14386731.605 ops/s
Iteration  12: 14388948.962 ops/s
Iteration  13: 14402009.865 ops/s
Iteration  14: 14388721.974 ops/s
Iteration  15: 14395422.818 ops/s
Iteration  16: 14383227.494 ops/s
Iteration  17: 14381750.639 ops/s
Iteration  18: 14405471.624 ops/s
Iteration  19: 14372709.595 ops/s
Iteration  20: 14377112.307 ops/s
Iteration  21: 14387791.328 ops/s
Iteration  22: 14372544.964 ops/s
Iteration  23: 14400822.593 ops/s
Iteration  24: 14389275.726 ops/s
Iteration  25: 14385181.712 ops/s
Iteration  26: 14324255.761 ops/s
Iteration  27: 14375142.948 ops/s
Iteration  28: 14350208.083 ops/s
Iteration  29: 14381200.495 ops/s
Iteration  30: 14357398.142 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_contains":
  14382127.134 ±(99.9%) 12611.011 ops/s [Average]
  (min, avg, max) = (14324255.761, 14382127.134, 14412937.600), stdev = 18875.569
  CI (99.9%): [14369516.123, 14394738.145] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
ImmutableBooleanEmptyListTest._Benchmark.benchmark_contains  thrpt   30  14382127.134 ± 12611.011  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10093375.403 ops/s
# Warmup Iteration   2: 16461758.341 ops/s
# Warmup Iteration   3: 19221903.889 ops/s
# Warmup Iteration   4: 19248402.741 ops/s
# Warmup Iteration   5: 19223413.846 ops/s
# Warmup Iteration   6: 19171608.256 ops/s
# Warmup Iteration   7: 19224151.300 ops/s
# Warmup Iteration   8: 19183589.682 ops/s
# Warmup Iteration   9: 19202904.761 ops/s
# Warmup Iteration  10: 19297017.201 ops/s
# Warmup Iteration  11: 19298746.482 ops/s
# Warmup Iteration  12: 19199198.095 ops/s
# Warmup Iteration  13: 19286914.517 ops/s
# Warmup Iteration  14: 19284175.204 ops/s
# Warmup Iteration  15: 19295188.879 ops/s
# Warmup Iteration  16: 19247877.609 ops/s
# Warmup Iteration  17: 19285789.241 ops/s
# Warmup Iteration  18: 19265419.404 ops/s
# Warmup Iteration  19: 19268123.061 ops/s
# Warmup Iteration  20: 19296987.640 ops/s
# Warmup Iteration  21: 19300181.292 ops/s
# Warmup Iteration  22: 19318195.901 ops/s
# Warmup Iteration  23: 19306063.017 ops/s
# Warmup Iteration  24: 19218167.496 ops/s
# Warmup Iteration  25: 19274037.135 ops/s
# Warmup Iteration  26: 19235788.565 ops/s
# Warmup Iteration  27: 19248817.862 ops/s
# Warmup Iteration  28: 19259928.869 ops/s
# Warmup Iteration  29: 19166360.031 ops/s
# Warmup Iteration  30: 19161075.302 ops/s
Iteration   1: 19286001.891 ops/s
Iteration   2: 19190034.830 ops/s
Iteration   3: 19157201.738 ops/s
Iteration   4: 19204749.595 ops/s
Iteration   5: 19188479.884 ops/s
Iteration   6: 19256835.203 ops/s
Iteration   7: 19223134.694 ops/s
Iteration   8: 19158173.722 ops/s
Iteration   9: 19213652.851 ops/s
Iteration  10: 19323809.844 ops/s
Iteration  11: 19302463.176 ops/s
Iteration  12: 19252558.807 ops/s
Iteration  13: 19235375.711 ops/s
Iteration  14: 19143370.582 ops/s
Iteration  15: 19260000.447 ops/s
Iteration  16: 19254268.524 ops/s
Iteration  17: 19255327.938 ops/s
Iteration  18: 19201369.826 ops/s
Iteration  19: 19285398.983 ops/s
Iteration  20: 19255945.808 ops/s
Iteration  21: 19300646.088 ops/s
Iteration  22: 19258511.670 ops/s
Iteration  23: 19211371.154 ops/s
Iteration  24: 19209129.560 ops/s
Iteration  25: 19237406.211 ops/s
Iteration  26: 19119294.557 ops/s
Iteration  27: 19294024.943 ops/s
Iteration  28: 19283697.955 ops/s
Iteration  29: 19215543.257 ops/s
Iteration  30: 19237581.796 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_containsAllArray":
  19233845.375 ±(99.9%) 33538.213 ops/s [Average]
  (min, avg, max) = (19119294.557, 19233845.375, 19323809.844), stdev = 50198.421
  CI (99.9%): [19200307.162, 19267383.587] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt         Score       Error  Units
ImmutableBooleanEmptyListTest._Benchmark.benchmark_containsAllArray  thrpt   30  19233845.375 ± 33538.213  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1035687.124 ops/s
# Warmup Iteration   2: 2381010.458 ops/s
# Warmup Iteration   3: 1988151.744 ops/s
# Warmup Iteration   4: 2398251.200 ops/s
# Warmup Iteration   5: 2398396.719 ops/s
# Warmup Iteration   6: 2400392.750 ops/s
# Warmup Iteration   7: 2397740.430 ops/s
# Warmup Iteration   8: 2398095.452 ops/s
# Warmup Iteration   9: 2390398.794 ops/s
# Warmup Iteration  10: 2397276.251 ops/s
# Warmup Iteration  11: 2395676.779 ops/s
# Warmup Iteration  12: 2395821.815 ops/s
# Warmup Iteration  13: 2396531.428 ops/s
# Warmup Iteration  14: 2395045.377 ops/s
# Warmup Iteration  15: 2393459.179 ops/s
# Warmup Iteration  16: 2400027.343 ops/s
# Warmup Iteration  17: 2399208.719 ops/s
# Warmup Iteration  18: 2395477.737 ops/s
# Warmup Iteration  19: 2397775.359 ops/s
# Warmup Iteration  20: 2385704.976 ops/s
# Warmup Iteration  21: 2395656.448 ops/s
# Warmup Iteration  22: 2403008.084 ops/s
# Warmup Iteration  23: 2398409.577 ops/s
# Warmup Iteration  24: 2398504.721 ops/s
# Warmup Iteration  25: 2402795.475 ops/s
# Warmup Iteration  26: 2399676.942 ops/s
# Warmup Iteration  27: 2396980.523 ops/s
# Warmup Iteration  28: 2387880.000 ops/s
# Warmup Iteration  29: 2396800.204 ops/s
# Warmup Iteration  30: 2401637.535 ops/s
Iteration   1: 2394368.436 ops/s
Iteration   2: 2398016.157 ops/s
Iteration   3: 2399311.838 ops/s
Iteration   4: 2393391.569 ops/s
Iteration   5: 2392850.534 ops/s
Iteration   6: 2394393.762 ops/s
Iteration   7: 2401754.565 ops/s
Iteration   8: 2398452.390 ops/s
Iteration   9: 2400695.433 ops/s
Iteration  10: 2391077.650 ops/s
Iteration  11: 2402623.144 ops/s
Iteration  12: 2403499.099 ops/s
Iteration  13: 2391236.582 ops/s
Iteration  14: 2401855.023 ops/s
Iteration  15: 2406756.911 ops/s
Iteration  16: 2394585.494 ops/s
Iteration  17: 2394106.388 ops/s
Iteration  18: 2392409.006 ops/s
Iteration  19: 2402699.030 ops/s
Iteration  20: 2396671.906 ops/s
Iteration  21: 2397286.376 ops/s
Iteration  22: 2390005.092 ops/s
Iteration  23: 2398042.892 ops/s
Iteration  24: 2402343.113 ops/s
Iteration  25: 2399310.417 ops/s
Iteration  26: 2391896.610 ops/s
Iteration  27: 2397056.692 ops/s
Iteration  28: 2394856.121 ops/s
Iteration  29: 2389909.700 ops/s
Iteration  30: 2395237.776 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_containsAllIterable":
  2396889.990 ±(99.9%) 3001.086 ops/s [Average]
  (min, avg, max) = (2389909.700, 2396889.990, 2406756.911), stdev = 4491.884
  CI (99.9%): [2393888.905, 2399891.076] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
ImmutableBooleanEmptyListTest._Benchmark.benchmark_containsAllIterable  thrpt   30  2396889.990 ± 3001.086  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_containsAnyArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_containsAnyArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10679357.574 ops/s
# Warmup Iteration   2: 22224089.249 ops/s
# Warmup Iteration   3: 18760252.714 ops/s
# Warmup Iteration   4: 22700579.947 ops/s
# Warmup Iteration   5: 22726323.260 ops/s
# Warmup Iteration   6: 22712960.832 ops/s
# Warmup Iteration   7: 22517315.985 ops/s
# Warmup Iteration   8: 22726338.022 ops/s
# Warmup Iteration   9: 22713810.357 ops/s
# Warmup Iteration  10: 22684595.679 ops/s
# Warmup Iteration  11: 22701747.704 ops/s
# Warmup Iteration  12: 22684723.283 ops/s
# Warmup Iteration  13: 22749952.825 ops/s
# Warmup Iteration  14: 22699748.368 ops/s
# Warmup Iteration  15: 22699017.118 ops/s
# Warmup Iteration  16: 22424757.954 ops/s
# Warmup Iteration  17: 22863801.201 ops/s
# Warmup Iteration  18: 22829749.339 ops/s
# Warmup Iteration  19: 22820474.257 ops/s
# Warmup Iteration  20: 22817353.866 ops/s
# Warmup Iteration  21: 22801126.288 ops/s
# Warmup Iteration  22: 22834756.412 ops/s
# Warmup Iteration  23: 22836974.054 ops/s
# Warmup Iteration  24: 22801038.692 ops/s
# Warmup Iteration  25: 22781570.999 ops/s
# Warmup Iteration  26: 22857330.242 ops/s
# Warmup Iteration  27: 22800849.136 ops/s
# Warmup Iteration  28: 22828586.168 ops/s
# Warmup Iteration  29: 22844836.547 ops/s
# Warmup Iteration  30: 22789731.745 ops/s
Iteration   1: 22832837.260 ops/s
Iteration   2: 22806147.963 ops/s
Iteration   3: 22824985.404 ops/s
Iteration   4: 22777411.030 ops/s
Iteration   5: 22609784.830 ops/s
Iteration   6: 22794236.069 ops/s
Iteration   7: 22817023.493 ops/s
Iteration   8: 22860343.712 ops/s
Iteration   9: 22802748.032 ops/s
Iteration  10: 22850466.489 ops/s
Iteration  11: 22842069.605 ops/s
Iteration  12: 22798888.477 ops/s
Iteration  13: 22861194.639 ops/s
Iteration  14: 22826568.445 ops/s
Iteration  15: 22887202.207 ops/s
Iteration  16: 22825966.955 ops/s
Iteration  17: 22812035.632 ops/s
Iteration  18: 22848656.709 ops/s
Iteration  19: 22830515.357 ops/s
Iteration  20: 22820091.602 ops/s
Iteration  21: 22814666.954 ops/s
Iteration  22: 22841641.796 ops/s
Iteration  23: 22857028.097 ops/s
Iteration  24: 22797629.304 ops/s
Iteration  25: 22872474.312 ops/s
Iteration  26: 22870089.389 ops/s
Iteration  27: 22833935.916 ops/s
Iteration  28: 22880344.277 ops/s
Iteration  29: 22767605.629 ops/s
Iteration  30: 22920232.140 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_containsAnyArray":
  22826160.724 ±(99.9%) 35364.360 ops/s [Average]
  (min, avg, max) = (22609784.830, 22826160.724, 22920232.140), stdev = 52931.713
  CI (99.9%): [22790796.364, 22861525.084] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt         Score       Error  Units
ImmutableBooleanEmptyListTest._Benchmark.benchmark_containsAnyArray  thrpt   30  22826160.724 ± 35364.360  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_containsAnyIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_containsAnyIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 839310.819 ops/s
# Warmup Iteration   2: 1218962.182 ops/s
# Warmup Iteration   3: 1422353.352 ops/s
# Warmup Iteration   4: 1420768.411 ops/s
# Warmup Iteration   5: 1424003.672 ops/s
# Warmup Iteration   6: 1422618.741 ops/s
# Warmup Iteration   7: 1188808.086 ops/s
# Warmup Iteration   8: 1419228.587 ops/s
# Warmup Iteration   9: 1419851.273 ops/s
# Warmup Iteration  10: 1420568.405 ops/s
# Warmup Iteration  11: 1421439.758 ops/s
# Warmup Iteration  12: 1419133.101 ops/s
# Warmup Iteration  13: 1419475.089 ops/s
# Warmup Iteration  14: 1422005.096 ops/s
# Warmup Iteration  15: 1421306.865 ops/s
# Warmup Iteration  16: 1420091.499 ops/s
# Warmup Iteration  17: 1421254.705 ops/s
# Warmup Iteration  18: 1419986.247 ops/s
# Warmup Iteration  19: 1421204.409 ops/s
# Warmup Iteration  20: 1421789.561 ops/s
# Warmup Iteration  21: 1420466.952 ops/s
# Warmup Iteration  22: 1422317.210 ops/s
# Warmup Iteration  23: 1423056.687 ops/s
# Warmup Iteration  24: 1421672.823 ops/s
# Warmup Iteration  25: 1421747.211 ops/s
# Warmup Iteration  26: 1420211.267 ops/s
# Warmup Iteration  27: 1419597.184 ops/s
# Warmup Iteration  28: 1421353.177 ops/s
# Warmup Iteration  29: 1418304.547 ops/s
# Warmup Iteration  30: 1422135.834 ops/s
Iteration   1: 1423179.607 ops/s
Iteration   2: 1418807.744 ops/s
Iteration   3: 1422938.529 ops/s
Iteration   4: 1420695.529 ops/s
Iteration   5: 1421174.135 ops/s
Iteration   6: 1417220.929 ops/s
Iteration   7: 1424420.231 ops/s
Iteration   8: 1421257.997 ops/s
Iteration   9: 1423370.813 ops/s
Iteration  10: 1421905.600 ops/s
Iteration  11: 1421816.413 ops/s
Iteration  12: 1421251.368 ops/s
Iteration  13: 1418469.357 ops/s
Iteration  14: 1421678.961 ops/s
Iteration  15: 1421266.988 ops/s
Iteration  16: 1423348.786 ops/s
Iteration  17: 1419982.326 ops/s
Iteration  18: 1425316.889 ops/s
Iteration  19: 1419556.111 ops/s
Iteration  20: 1419628.223 ops/s
Iteration  21: 1423203.313 ops/s
Iteration  22: 1422638.416 ops/s
Iteration  23: 1419827.808 ops/s
Iteration  24: 1420566.662 ops/s
Iteration  25: 1424035.324 ops/s
Iteration  26: 1420532.944 ops/s
Iteration  27: 1422515.998 ops/s
Iteration  28: 1414402.555 ops/s
Iteration  29: 1423257.100 ops/s
Iteration  30: 1421437.989 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_containsAnyIterable":
  1421323.488 ±(99.9%) 1515.675 ops/s [Average]
  (min, avg, max) = (1414402.555, 1421323.488, 1425316.889), stdev = 2268.592
  CI (99.9%): [1419807.813, 1422839.164] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
ImmutableBooleanEmptyListTest._Benchmark.benchmark_containsAnyIterable  thrpt   30  1421323.488 ± 1515.675  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_containsNoneArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_containsNoneArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10242860.135 ops/s
# Warmup Iteration   2: 21834264.166 ops/s
# Warmup Iteration   3: 18413955.806 ops/s
# Warmup Iteration   4: 22135835.366 ops/s
# Warmup Iteration   5: 22144190.084 ops/s
# Warmup Iteration   6: 22140142.577 ops/s
# Warmup Iteration   7: 22175505.815 ops/s
# Warmup Iteration   8: 22086431.138 ops/s
# Warmup Iteration   9: 22165921.874 ops/s
# Warmup Iteration  10: 22175436.548 ops/s
# Warmup Iteration  11: 22136588.782 ops/s
# Warmup Iteration  12: 22158631.390 ops/s
# Warmup Iteration  13: 22185510.935 ops/s
# Warmup Iteration  14: 22171268.923 ops/s
# Warmup Iteration  15: 22173551.429 ops/s
# Warmup Iteration  16: 22089654.857 ops/s
# Warmup Iteration  17: 22151934.885 ops/s
# Warmup Iteration  18: 22128423.992 ops/s
# Warmup Iteration  19: 22169592.367 ops/s
# Warmup Iteration  20: 22159935.610 ops/s
# Warmup Iteration  21: 22169667.929 ops/s
# Warmup Iteration  22: 22191758.000 ops/s
# Warmup Iteration  23: 22171318.639 ops/s
# Warmup Iteration  24: 22077451.910 ops/s
# Warmup Iteration  25: 22180850.537 ops/s
# Warmup Iteration  26: 22120729.138 ops/s
# Warmup Iteration  27: 22179847.885 ops/s
# Warmup Iteration  28: 22171182.735 ops/s
# Warmup Iteration  29: 22104678.990 ops/s
# Warmup Iteration  30: 22135407.058 ops/s
Iteration   1: 22196565.277 ops/s
Iteration   2: 22033786.483 ops/s
Iteration   3: 22169112.476 ops/s
Iteration   4: 22180949.399 ops/s
Iteration   5: 22143949.043 ops/s
Iteration   6: 22159002.357 ops/s
Iteration   7: 22175493.261 ops/s
Iteration   8: 22060162.586 ops/s
Iteration   9: 22155758.994 ops/s
Iteration  10: 22144165.184 ops/s
Iteration  11: 22142756.281 ops/s
Iteration  12: 22196868.281 ops/s
Iteration  13: 22118017.579 ops/s
Iteration  14: 22208863.839 ops/s
Iteration  15: 22179443.237 ops/s
Iteration  16: 22176541.873 ops/s
Iteration  17: 22165050.927 ops/s
Iteration  18: 22220044.083 ops/s
Iteration  19: 22099897.511 ops/s
Iteration  20: 22151432.442 ops/s
Iteration  21: 22057022.761 ops/s
Iteration  22: 22160899.625 ops/s
Iteration  23: 22171788.908 ops/s
Iteration  24: 22128028.721 ops/s
Iteration  25: 22138751.701 ops/s
Iteration  26: 22086356.978 ops/s
Iteration  27: 22088365.513 ops/s
Iteration  28: 22182739.186 ops/s
Iteration  29: 22057999.755 ops/s
Iteration  30: 22111702.422 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_containsNoneArray":
  22142050.556 ±(99.9%) 32508.828 ops/s [Average]
  (min, avg, max) = (22033786.483, 22142050.556, 22220044.083), stdev = 48657.686
  CI (99.9%): [22109541.729, 22174559.384] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt         Score       Error  Units
ImmutableBooleanEmptyListTest._Benchmark.benchmark_containsNoneArray  thrpt   30  22142050.556 ± 32508.828  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_containsNoneIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_containsNoneIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 783843.662 ops/s
# Warmup Iteration   2: 1115281.029 ops/s
# Warmup Iteration   3: 1293830.468 ops/s
# Warmup Iteration   4: 1293018.065 ops/s
# Warmup Iteration   5: 1293386.801 ops/s
# Warmup Iteration   6: 1292677.745 ops/s
# Warmup Iteration   7: 1081339.319 ops/s
# Warmup Iteration   8: 1292403.130 ops/s
# Warmup Iteration   9: 1296640.063 ops/s
# Warmup Iteration  10: 1292837.025 ops/s
# Warmup Iteration  11: 1295174.370 ops/s
# Warmup Iteration  12: 1293510.382 ops/s
# Warmup Iteration  13: 1292317.668 ops/s
# Warmup Iteration  14: 1293108.533 ops/s
# Warmup Iteration  15: 1291480.683 ops/s
# Warmup Iteration  16: 1294993.020 ops/s
# Warmup Iteration  17: 1295196.152 ops/s
# Warmup Iteration  18: 1291912.828 ops/s
# Warmup Iteration  19: 1292846.069 ops/s
# Warmup Iteration  20: 1294753.172 ops/s
# Warmup Iteration  21: 1295597.807 ops/s
# Warmup Iteration  22: 1294226.321 ops/s
# Warmup Iteration  23: 1294170.536 ops/s
# Warmup Iteration  24: 1294027.325 ops/s
# Warmup Iteration  25: 1293443.986 ops/s
# Warmup Iteration  26: 1282233.524 ops/s
# Warmup Iteration  27: 1294709.459 ops/s
# Warmup Iteration  28: 1295292.021 ops/s
# Warmup Iteration  29: 1294282.510 ops/s
# Warmup Iteration  30: 1296191.409 ops/s
Iteration   1: 1297486.637 ops/s
Iteration   2: 1294760.450 ops/s
Iteration   3: 1295631.416 ops/s
Iteration   4: 1291356.282 ops/s
Iteration   5: 1292020.246 ops/s
Iteration   6: 1293033.058 ops/s
Iteration   7: 1295444.387 ops/s
Iteration   8: 1292884.593 ops/s
Iteration   9: 1293715.161 ops/s
Iteration  10: 1296926.220 ops/s
Iteration  11: 1293764.750 ops/s
Iteration  12: 1295262.084 ops/s
Iteration  13: 1292279.389 ops/s
Iteration  14: 1295458.732 ops/s
Iteration  15: 1294564.868 ops/s
Iteration  16: 1297296.415 ops/s
Iteration  17: 1296641.286 ops/s
Iteration  18: 1292458.171 ops/s
Iteration  19: 1290966.352 ops/s
Iteration  20: 1290404.685 ops/s
Iteration  21: 1296417.288 ops/s
Iteration  22: 1294205.800 ops/s
Iteration  23: 1293229.128 ops/s
Iteration  24: 1293671.785 ops/s
Iteration  25: 1293838.491 ops/s
Iteration  26: 1297105.747 ops/s
Iteration  27: 1293219.341 ops/s
Iteration  28: 1294566.928 ops/s
Iteration  29: 1295769.250 ops/s
Iteration  30: 1296798.165 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_containsNoneIterable":
  1294372.570 ±(99.9%) 1316.528 ops/s [Average]
  (min, avg, max) = (1290404.685, 1294372.570, 1297486.637), stdev = 1970.518
  CI (99.9%): [1293056.042, 1295689.098] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score      Error  Units
ImmutableBooleanEmptyListTest._Benchmark.benchmark_containsNoneIterable  thrpt   30  1294372.570 ± 1316.528  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5478698.471 ops/s
# Warmup Iteration   2: 8946138.549 ops/s
# Warmup Iteration   3: 9573465.128 ops/s
# Warmup Iteration   4: 9578394.325 ops/s
# Warmup Iteration   5: 9586433.463 ops/s
# Warmup Iteration   6: 8007614.186 ops/s
# Warmup Iteration   7: 9584583.857 ops/s
# Warmup Iteration   8: 9575078.182 ops/s
# Warmup Iteration   9: 9562285.233 ops/s
# Warmup Iteration  10: 9564401.055 ops/s
# Warmup Iteration  11: 9593389.794 ops/s
# Warmup Iteration  12: 9558830.261 ops/s
# Warmup Iteration  13: 9590684.288 ops/s
# Warmup Iteration  14: 9572291.632 ops/s
# Warmup Iteration  15: 9577128.369 ops/s
# Warmup Iteration  16: 9565244.628 ops/s
# Warmup Iteration  17: 9585027.096 ops/s
# Warmup Iteration  18: 9566333.612 ops/s
# Warmup Iteration  19: 9583977.878 ops/s
# Warmup Iteration  20: 9578298.229 ops/s
# Warmup Iteration  21: 9576655.628 ops/s
# Warmup Iteration  22: 9574613.567 ops/s
# Warmup Iteration  23: 9573070.916 ops/s
# Warmup Iteration  24: 9538539.492 ops/s
# Warmup Iteration  25: 9581524.727 ops/s
# Warmup Iteration  26: 9572978.366 ops/s
# Warmup Iteration  27: 9550994.466 ops/s
# Warmup Iteration  28: 9574828.203 ops/s
# Warmup Iteration  29: 9587847.971 ops/s
# Warmup Iteration  30: 9568695.230 ops/s
Iteration   1: 9585961.443 ops/s
Iteration   2: 9552714.793 ops/s
Iteration   3: 9585507.716 ops/s
Iteration   4: 9565985.516 ops/s
Iteration   5: 9577305.519 ops/s
Iteration   6: 9569301.034 ops/s
Iteration   7: 9587059.285 ops/s
Iteration   8: 9579951.590 ops/s
Iteration   9: 9592092.029 ops/s
Iteration  10: 9579994.097 ops/s
Iteration  11: 9576185.014 ops/s
Iteration  12: 9569902.608 ops/s
Iteration  13: 9568161.046 ops/s
Iteration  14: 9598255.480 ops/s
Iteration  15: 9583751.293 ops/s
Iteration  16: 9597452.607 ops/s
Iteration  17: 9580777.420 ops/s
Iteration  18: 9601193.874 ops/s
Iteration  19: 9578338.127 ops/s
Iteration  20: 9589147.083 ops/s
Iteration  21: 9593776.259 ops/s
Iteration  22: 9557240.385 ops/s
Iteration  23: 9514634.929 ops/s
Iteration  24: 9603526.045 ops/s
Iteration  25: 9571000.716 ops/s
Iteration  26: 9583607.439 ops/s
Iteration  27: 9539178.099 ops/s
Iteration  28: 9578199.696 ops/s
Iteration  29: 9600529.848 ops/s
Iteration  30: 9576983.393 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_count":
  9577923.813 ±(99.9%) 12632.848 ops/s [Average]
  (min, avg, max) = (9514634.929, 9577923.813, 9603526.045), stdev = 18908.253
  CI (99.9%): [9565290.965, 9590556.661] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
ImmutableBooleanEmptyListTest._Benchmark.benchmark_count  thrpt   30  9577923.813 ± 12632.848  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 18458943.202 ops/s
# Warmup Iteration   2: 30016293.433 ops/s
# Warmup Iteration   3: 34472863.800 ops/s
# Warmup Iteration   4: 34900516.957 ops/s
# Warmup Iteration   5: 34866772.651 ops/s
# Warmup Iteration   6: 34817119.390 ops/s
# Warmup Iteration   7: 34836820.670 ops/s
# Warmup Iteration   8: 34836351.818 ops/s
# Warmup Iteration   9: 34742214.969 ops/s
# Warmup Iteration  10: 34842392.758 ops/s
# Warmup Iteration  11: 34800648.532 ops/s
# Warmup Iteration  12: 34702948.631 ops/s
# Warmup Iteration  13: 34805885.563 ops/s
# Warmup Iteration  14: 34851695.785 ops/s
# Warmup Iteration  15: 34894498.425 ops/s
# Warmup Iteration  16: 34976311.226 ops/s
# Warmup Iteration  17: 34825615.609 ops/s
# Warmup Iteration  18: 34843316.204 ops/s
# Warmup Iteration  19: 34813702.840 ops/s
# Warmup Iteration  20: 34772635.538 ops/s
# Warmup Iteration  21: 34891373.204 ops/s
# Warmup Iteration  22: 34940830.568 ops/s
# Warmup Iteration  23: 34880570.929 ops/s
# Warmup Iteration  24: 34691030.357 ops/s
# Warmup Iteration  25: 34855804.121 ops/s
# Warmup Iteration  26: 34783305.279 ops/s
# Warmup Iteration  27: 34793195.645 ops/s
# Warmup Iteration  28: 34870281.655 ops/s
# Warmup Iteration  29: 34856690.047 ops/s
# Warmup Iteration  30: 34824911.678 ops/s
Iteration   1: 34922495.400 ops/s
Iteration   2: 34879600.598 ops/s
Iteration   3: 34805749.359 ops/s
Iteration   4: 34771739.300 ops/s
Iteration   5: 34882667.618 ops/s
Iteration   6: 34888490.260 ops/s
Iteration   7: 34883873.364 ops/s
Iteration   8: 34820110.100 ops/s
Iteration   9: 34875380.534 ops/s
Iteration  10: 34877766.463 ops/s
Iteration  11: 34799949.109 ops/s
Iteration  12: 34748941.553 ops/s
Iteration  13: 34913195.269 ops/s
Iteration  14: 34934030.117 ops/s
Iteration  15: 34938730.714 ops/s
Iteration  16: 34965624.213 ops/s
Iteration  17: 34847891.698 ops/s
Iteration  18: 34831959.674 ops/s
Iteration  19: 34800652.498 ops/s
Iteration  20: 34743984.286 ops/s
Iteration  21: 34824763.826 ops/s
Iteration  22: 34842183.590 ops/s
Iteration  23: 34851879.538 ops/s
Iteration  24: 34871875.799 ops/s
Iteration  25: 34785866.074 ops/s
Iteration  26: 34813256.992 ops/s
Iteration  27: 34836406.474 ops/s
Iteration  28: 34841589.962 ops/s
Iteration  29: 34816158.606 ops/s
Iteration  30: 34786378.613 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_detectIfNone":
  34846773.053 ±(99.9%) 37429.472 ops/s [Average]
  (min, avg, max) = (34743984.286, 34846773.053, 34965624.213), stdev = 56022.676
  CI (99.9%): [34809343.581, 34884202.525] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score       Error  Units
ImmutableBooleanEmptyListTest._Benchmark.benchmark_detectIfNone  thrpt   30  34846773.053 ± 37429.472  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8157555.783 ops/s
# Warmup Iteration   2: 17741372.211 ops/s
# Warmup Iteration   3: 13894244.620 ops/s
# Warmup Iteration   4: 16735541.890 ops/s
# Warmup Iteration   5: 16716400.965 ops/s
# Warmup Iteration   6: 16692150.165 ops/s
# Warmup Iteration   7: 16662352.945 ops/s
# Warmup Iteration   8: 16695231.983 ops/s
# Warmup Iteration   9: 16714365.411 ops/s
# Warmup Iteration  10: 16777740.744 ops/s
# Warmup Iteration  11: 16743722.328 ops/s
# Warmup Iteration  12: 16744281.789 ops/s
# Warmup Iteration  13: 16741231.631 ops/s
# Warmup Iteration  14: 16756239.313 ops/s
# Warmup Iteration  15: 16730461.610 ops/s
# Warmup Iteration  16: 16709887.389 ops/s
# Warmup Iteration  17: 16724868.183 ops/s
# Warmup Iteration  18: 16728301.583 ops/s
# Warmup Iteration  19: 16721077.670 ops/s
# Warmup Iteration  20: 16713300.596 ops/s
# Warmup Iteration  21: 16777078.824 ops/s
# Warmup Iteration  22: 16779356.562 ops/s
# Warmup Iteration  23: 16688048.832 ops/s
# Warmup Iteration  24: 16740486.783 ops/s
# Warmup Iteration  25: 16736384.052 ops/s
# Warmup Iteration  26: 16697614.207 ops/s
# Warmup Iteration  27: 16695763.439 ops/s
# Warmup Iteration  28: 16724816.189 ops/s
# Warmup Iteration  29: 16689908.802 ops/s
# Warmup Iteration  30: 16740208.153 ops/s
Iteration   1: 16760440.300 ops/s
Iteration   2: 16747688.541 ops/s
Iteration   3: 16781393.688 ops/s
Iteration   4: 16784996.116 ops/s
Iteration   5: 16749074.486 ops/s
Iteration   6: 16799831.770 ops/s
Iteration   7: 16780558.293 ops/s
Iteration   8: 16698305.135 ops/s
Iteration   9: 16736483.507 ops/s
Iteration  10: 16769028.071 ops/s
Iteration  11: 16766465.231 ops/s
Iteration  12: 16699319.067 ops/s
Iteration  13: 16800945.405 ops/s
Iteration  14: 16716885.720 ops/s
Iteration  15: 16764031.576 ops/s
Iteration  16: 16742708.721 ops/s
Iteration  17: 16713592.718 ops/s
Iteration  18: 16722718.096 ops/s
Iteration  19: 16754909.784 ops/s
Iteration  20: 16827165.069 ops/s
Iteration  21: 16772305.177 ops/s
Iteration  22: 16775808.773 ops/s
Iteration  23: 16752183.699 ops/s
Iteration  24: 16751560.198 ops/s
Iteration  25: 16709825.949 ops/s
Iteration  26: 16764191.029 ops/s
Iteration  27: 16783367.156 ops/s
Iteration  28: 16702761.506 ops/s
Iteration  29: 16759872.895 ops/s
Iteration  30: 16766038.607 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_forEach":
  16755148.543 ±(99.9%) 21373.909 ops/s [Average]
  (min, avg, max) = (16698305.135, 16755148.543, 16827165.069), stdev = 31991.463
  CI (99.9%): [16733774.634, 16776522.452] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
ImmutableBooleanEmptyListTest._Benchmark.benchmark_forEach  thrpt   30  16755148.543 ± 21373.909  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_forEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_forEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 76411697.359 ops/s
# Warmup Iteration   2: 119237076.193 ops/s
# Warmup Iteration   3: 151445129.374 ops/s
# Warmup Iteration   4: 151592956.870 ops/s
# Warmup Iteration   5: 152177809.428 ops/s
# Warmup Iteration   6: 151551548.655 ops/s
# Warmup Iteration   7: 151610802.343 ops/s
# Warmup Iteration   8: 151135765.266 ops/s
# Warmup Iteration   9: 151698573.898 ops/s
# Warmup Iteration  10: 151210433.215 ops/s
# Warmup Iteration  11: 151308439.204 ops/s
# Warmup Iteration  12: 151362483.882 ops/s
# Warmup Iteration  13: 151575976.921 ops/s
# Warmup Iteration  14: 151539000.851 ops/s
# Warmup Iteration  15: 151595928.700 ops/s
# Warmup Iteration  16: 151383383.488 ops/s
# Warmup Iteration  17: 151773157.820 ops/s
# Warmup Iteration  18: 151931367.547 ops/s
# Warmup Iteration  19: 151321447.733 ops/s
# Warmup Iteration  20: 151801547.779 ops/s
# Warmup Iteration  21: 151400071.688 ops/s
# Warmup Iteration  22: 151741042.611 ops/s
# Warmup Iteration  23: 151770522.779 ops/s
# Warmup Iteration  24: 151754033.015 ops/s
# Warmup Iteration  25: 151512417.846 ops/s
# Warmup Iteration  26: 151314328.657 ops/s
# Warmup Iteration  27: 151398177.555 ops/s
# Warmup Iteration  28: 151270926.781 ops/s
# Warmup Iteration  29: 150977444.784 ops/s
# Warmup Iteration  30: 151166412.552 ops/s
Iteration   1: 151909298.906 ops/s
Iteration   2: 151200312.023 ops/s
Iteration   3: 151106000.463 ops/s
Iteration   4: 151992359.345 ops/s
Iteration   5: 151501267.056 ops/s
Iteration   6: 151717893.651 ops/s
Iteration   7: 151680984.354 ops/s
Iteration   8: 151520734.065 ops/s
Iteration   9: 151849743.360 ops/s
Iteration  10: 151799719.323 ops/s
Iteration  11: 150945136.901 ops/s
Iteration  12: 151461492.352 ops/s
Iteration  13: 152321403.297 ops/s
Iteration  14: 151410733.376 ops/s
Iteration  15: 151059764.619 ops/s
Iteration  16: 151319044.899 ops/s
Iteration  17: 150893349.190 ops/s
Iteration  18: 151926001.953 ops/s
Iteration  19: 150868435.754 ops/s
Iteration  20: 151913498.781 ops/s
Iteration  21: 151278323.253 ops/s
Iteration  22: 151226214.974 ops/s
Iteration  23: 150837403.072 ops/s
Iteration  24: 151765757.496 ops/s
Iteration  25: 151992303.903 ops/s
Iteration  26: 151624425.790 ops/s
Iteration  27: 151336596.024 ops/s
Iteration  28: 151358362.204 ops/s
Iteration  29: 152123075.692 ops/s
Iteration  30: 151909055.942 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_forEachWithIndex":
  151528289.734 ±(99.9%) 270555.260 ops/s [Average]
  (min, avg, max) = (150837403.072, 151528289.734, 152321403.297), stdev = 404954.406
  CI (99.9%): [151257734.474, 151798844.993] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt          Score        Error  Units
ImmutableBooleanEmptyListTest._Benchmark.benchmark_forEachWithIndex  thrpt   30  151528289.734 ± 270555.260  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_get$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_get

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 835829.223 ops/s
# Warmup Iteration   2: 843654.611 ops/s
# Warmup Iteration   3: 1067989.249 ops/s
# Warmup Iteration   4: 1079407.732 ops/s
# Warmup Iteration   5: 1082458.458 ops/s
# Warmup Iteration   6: 1072206.147 ops/s
# Warmup Iteration   7: 1075571.429 ops/s
# Warmup Iteration   8: 1077615.347 ops/s
# Warmup Iteration   9: 1079413.647 ops/s
# Warmup Iteration  10: 1078796.437 ops/s
# Warmup Iteration  11: 1078352.421 ops/s
# Warmup Iteration  12: 990476.221 ops/s
# Warmup Iteration  13: 1002359.158 ops/s
# Warmup Iteration  14: 1079719.465 ops/s
# Warmup Iteration  15: 1079423.117 ops/s
# Warmup Iteration  16: 1077754.467 ops/s
# Warmup Iteration  17: 1147049.260 ops/s
# Warmup Iteration  18: 1149290.758 ops/s
# Warmup Iteration  19: 1147881.918 ops/s
# Warmup Iteration  20: 1148210.977 ops/s
# Warmup Iteration  21: 1149076.345 ops/s
# Warmup Iteration  22: 1148719.141 ops/s
# Warmup Iteration  23: 1147425.173 ops/s
# Warmup Iteration  24: 1150443.115 ops/s
# Warmup Iteration  25: 1145374.375 ops/s
# Warmup Iteration  26: 1146725.815 ops/s
# Warmup Iteration  27: 1146469.747 ops/s
# Warmup Iteration  28: 1146869.229 ops/s
# Warmup Iteration  29: 1146116.139 ops/s
# Warmup Iteration  30: 1149387.656 ops/s
Iteration   1: 1148501.087 ops/s
Iteration   2: 1143831.912 ops/s
Iteration   3: 1148736.555 ops/s
Iteration   4: 1149711.396 ops/s
Iteration   5: 1150370.202 ops/s
Iteration   6: 1146934.040 ops/s
Iteration   7: 1147629.735 ops/s
Iteration   8: 1148399.093 ops/s
Iteration   9: 1149352.684 ops/s
Iteration  10: 1146154.180 ops/s
Iteration  11: 1147340.039 ops/s
Iteration  12: 1145605.404 ops/s
Iteration  13: 1147359.769 ops/s
Iteration  14: 1142123.484 ops/s
Iteration  15: 1148957.422 ops/s
Iteration  16: 1149217.602 ops/s
Iteration  17: 1147094.731 ops/s
Iteration  18: 1147595.677 ops/s
Iteration  19: 1149231.883 ops/s
Iteration  20: 1150209.561 ops/s
Iteration  21: 1148776.486 ops/s
Iteration  22: 1145549.985 ops/s
Iteration  23: 1148964.805 ops/s
Iteration  24: 1145943.771 ops/s
Iteration  25: 1143763.580 ops/s
Iteration  26: 1144890.326 ops/s
Iteration  27: 1143114.946 ops/s
Iteration  28: 1145485.663 ops/s
Iteration  29: 1142564.185 ops/s
Iteration  30: 1144519.104 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_get":
  1146930.977 ±(99.9%) 1575.316 ops/s [Average]
  (min, avg, max) = (1142123.484, 1146930.977, 1150370.202), stdev = 2357.859
  CI (99.9%): [1145355.661, 1148506.293] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableBooleanEmptyListTest._Benchmark.benchmark_get  thrpt   30  1146930.977 ± 1575.316  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_getFirst$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_getFirst

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 875285.824 ops/s
# Warmup Iteration   2: 880796.292 ops/s
# Warmup Iteration   3: 1055577.275 ops/s
# Warmup Iteration   4: 1118719.390 ops/s
# Warmup Iteration   5: 1122945.386 ops/s
# Warmup Iteration   6: 1119522.126 ops/s
# Warmup Iteration   7: 1120598.310 ops/s
# Warmup Iteration   8: 1118757.618 ops/s
# Warmup Iteration   9: 1117991.129 ops/s
# Warmup Iteration  10: 1119815.378 ops/s
# Warmup Iteration  11: 1119353.820 ops/s
# Warmup Iteration  12: 1120459.383 ops/s
# Warmup Iteration  13: 1086577.935 ops/s
# Warmup Iteration  14: 977965.101 ops/s
# Warmup Iteration  15: 1120988.644 ops/s
# Warmup Iteration  16: 1118495.956 ops/s
# Warmup Iteration  17: 1187137.958 ops/s
# Warmup Iteration  18: 1188526.984 ops/s
# Warmup Iteration  19: 1186094.213 ops/s
# Warmup Iteration  20: 1184527.851 ops/s
# Warmup Iteration  21: 1185199.609 ops/s
# Warmup Iteration  22: 1185349.595 ops/s
# Warmup Iteration  23: 1186616.226 ops/s
# Warmup Iteration  24: 1183486.675 ops/s
# Warmup Iteration  25: 1185079.951 ops/s
# Warmup Iteration  26: 1185060.480 ops/s
# Warmup Iteration  27: 1184098.638 ops/s
# Warmup Iteration  28: 1187667.392 ops/s
# Warmup Iteration  29: 1187327.319 ops/s
# Warmup Iteration  30: 1184034.848 ops/s
Iteration   1: 1187339.121 ops/s
Iteration   2: 1185453.120 ops/s
Iteration   3: 1186294.308 ops/s
Iteration   4: 1186143.165 ops/s
Iteration   5: 1186674.242 ops/s
Iteration   6: 1184578.416 ops/s
Iteration   7: 1181303.118 ops/s
Iteration   8: 1184824.938 ops/s
Iteration   9: 1180700.415 ops/s
Iteration  10: 1187561.329 ops/s
Iteration  11: 1187453.401 ops/s
Iteration  12: 1188564.687 ops/s
Iteration  13: 1187175.355 ops/s
Iteration  14: 1187154.522 ops/s
Iteration  15: 1186719.778 ops/s
Iteration  16: 1185639.337 ops/s
Iteration  17: 1183577.462 ops/s
Iteration  18: 1185500.540 ops/s
Iteration  19: 1187102.533 ops/s
Iteration  20: 1187004.213 ops/s
Iteration  21: 1184501.758 ops/s
Iteration  22: 1185438.478 ops/s
Iteration  23: 1185713.864 ops/s
Iteration  24: 1188554.367 ops/s
Iteration  25: 1188113.760 ops/s
Iteration  26: 1184565.107 ops/s
Iteration  27: 1187265.029 ops/s
Iteration  28: 1187378.226 ops/s
Iteration  29: 1189781.349 ops/s
Iteration  30: 1182476.682 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_getFirst":
  1186018.421 ±(99.9%) 1386.706 ops/s [Average]
  (min, avg, max) = (1180700.415, 1186018.421, 1189781.349), stdev = 2075.556
  CI (99.9%): [1184631.715, 1187405.126] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableBooleanEmptyListTest._Benchmark.benchmark_getFirst  thrpt   30  1186018.421 ± 1386.706  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_getLast$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_getLast

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 875687.738 ops/s
# Warmup Iteration   2: 881295.394 ops/s
# Warmup Iteration   3: 1050963.450 ops/s
# Warmup Iteration   4: 1114328.408 ops/s
# Warmup Iteration   5: 1116853.272 ops/s
# Warmup Iteration   6: 1114242.469 ops/s
# Warmup Iteration   7: 1115347.466 ops/s
# Warmup Iteration   8: 1108017.409 ops/s
# Warmup Iteration   9: 1117202.619 ops/s
# Warmup Iteration  10: 1115649.997 ops/s
# Warmup Iteration  11: 1117263.007 ops/s
# Warmup Iteration  12: 1117490.656 ops/s
# Warmup Iteration  13: 1101794.208 ops/s
# Warmup Iteration  14: 952720.275 ops/s
# Warmup Iteration  15: 1119526.736 ops/s
# Warmup Iteration  16: 1118224.659 ops/s
# Warmup Iteration  17: 1182313.636 ops/s
# Warmup Iteration  18: 1183641.829 ops/s
# Warmup Iteration  19: 1181573.874 ops/s
# Warmup Iteration  20: 1183512.637 ops/s
# Warmup Iteration  21: 1182446.547 ops/s
# Warmup Iteration  22: 1185444.244 ops/s
# Warmup Iteration  23: 1181622.177 ops/s
# Warmup Iteration  24: 1185043.363 ops/s
# Warmup Iteration  25: 1183381.154 ops/s
# Warmup Iteration  26: 1181484.443 ops/s
# Warmup Iteration  27: 1183949.869 ops/s
# Warmup Iteration  28: 1183367.496 ops/s
# Warmup Iteration  29: 1183801.565 ops/s
# Warmup Iteration  30: 1183054.327 ops/s
Iteration   1: 1183860.837 ops/s
Iteration   2: 1184316.254 ops/s
Iteration   3: 1180696.894 ops/s
Iteration   4: 1182820.948 ops/s
Iteration   5: 1186347.630 ops/s
Iteration   6: 1175836.468 ops/s
Iteration   7: 1174214.389 ops/s
Iteration   8: 1183524.022 ops/s
Iteration   9: 1179830.981 ops/s
Iteration  10: 1184186.135 ops/s
Iteration  11: 1185159.051 ops/s
Iteration  12: 1185259.548 ops/s
Iteration  13: 1181898.835 ops/s
Iteration  14: 1184349.458 ops/s
Iteration  15: 1185528.178 ops/s
Iteration  16: 1184054.417 ops/s
Iteration  17: 1179495.781 ops/s
Iteration  18: 1182669.181 ops/s
Iteration  19: 1174950.357 ops/s
Iteration  20: 1179768.386 ops/s
Iteration  21: 1185312.073 ops/s
Iteration  22: 1182123.658 ops/s
Iteration  23: 1184571.293 ops/s
Iteration  24: 1185197.456 ops/s
Iteration  25: 1184310.894 ops/s
Iteration  26: 1184155.085 ops/s
Iteration  27: 1175221.465 ops/s
Iteration  28: 1176541.790 ops/s
Iteration  29: 1183729.256 ops/s
Iteration  30: 1185693.531 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_getLast":
  1182187.475 ±(99.9%) 2398.786 ops/s [Average]
  (min, avg, max) = (1174214.389, 1182187.475, 1186347.630), stdev = 3590.391
  CI (99.9%): [1179788.689, 1184586.262] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableBooleanEmptyListTest._Benchmark.benchmark_getLast  thrpt   30  1182187.475 ± 2398.786  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_get_throws_index_greater_than_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_get_throws_index_greater_than_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 833450.329 ops/s
# Warmup Iteration   2: 840747.040 ops/s
# Warmup Iteration   3: 1063466.668 ops/s
# Warmup Iteration   4: 1071477.862 ops/s
# Warmup Iteration   5: 1074251.037 ops/s
# Warmup Iteration   6: 1071080.273 ops/s
# Warmup Iteration   7: 1075206.043 ops/s
# Warmup Iteration   8: 1076765.960 ops/s
# Warmup Iteration   9: 1072962.197 ops/s
# Warmup Iteration  10: 1075249.136 ops/s
# Warmup Iteration  11: 1074477.695 ops/s
# Warmup Iteration  12: 996947.612 ops/s
# Warmup Iteration  13: 990225.628 ops/s
# Warmup Iteration  14: 1077619.640 ops/s
# Warmup Iteration  15: 1074448.673 ops/s
# Warmup Iteration  16: 1076986.884 ops/s
# Warmup Iteration  17: 1139563.981 ops/s
# Warmup Iteration  18: 1145351.794 ops/s
# Warmup Iteration  19: 1144083.445 ops/s
# Warmup Iteration  20: 1142803.267 ops/s
# Warmup Iteration  21: 1144609.666 ops/s
# Warmup Iteration  22: 1145319.876 ops/s
# Warmup Iteration  23: 1142894.074 ops/s
# Warmup Iteration  24: 1142668.629 ops/s
# Warmup Iteration  25: 1146537.104 ops/s
# Warmup Iteration  26: 1143296.322 ops/s
# Warmup Iteration  27: 1143363.943 ops/s
# Warmup Iteration  28: 1144876.140 ops/s
# Warmup Iteration  29: 1141278.859 ops/s
# Warmup Iteration  30: 1145447.549 ops/s
Iteration   1: 1145330.571 ops/s
Iteration   2: 1142413.451 ops/s
Iteration   3: 1143216.727 ops/s
Iteration   4: 1145180.747 ops/s
Iteration   5: 1144795.390 ops/s
Iteration   6: 1141015.878 ops/s
Iteration   7: 1144231.155 ops/s
Iteration   8: 1142561.179 ops/s
Iteration   9: 1142167.871 ops/s
Iteration  10: 1142073.171 ops/s
Iteration  11: 1145417.178 ops/s
Iteration  12: 1144974.769 ops/s
Iteration  13: 1138017.015 ops/s
Iteration  14: 1140337.172 ops/s
Iteration  15: 1146898.847 ops/s
Iteration  16: 1144534.980 ops/s
Iteration  17: 1143613.518 ops/s
Iteration  18: 1141625.690 ops/s
Iteration  19: 1142120.144 ops/s
Iteration  20: 1140717.759 ops/s
Iteration  21: 1140621.495 ops/s
Iteration  22: 1139492.121 ops/s
Iteration  23: 1143743.520 ops/s
Iteration  24: 1145842.776 ops/s
Iteration  25: 1147665.306 ops/s
Iteration  26: 1146329.649 ops/s
Iteration  27: 1145279.101 ops/s
Iteration  28: 1141935.280 ops/s
Iteration  29: 1143778.082 ops/s
Iteration  30: 1141086.155 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_get_throws_index_greater_than_size":
  1143233.890 ±(99.9%) 1553.891 ops/s [Average]
  (min, avg, max) = (1138017.015, 1143233.890, 1147665.306), stdev = 2325.791
  CI (99.9%): [1141679.999, 1144787.781] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt        Score      Error  Units
ImmutableBooleanEmptyListTest._Benchmark.benchmark_get_throws_index_greater_than_size  thrpt   30  1143233.890 ± 1553.891  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_get_throws_index_negative$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_get_throws_index_negative

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 833514.129 ops/s
# Warmup Iteration   2: 844969.040 ops/s
# Warmup Iteration   3: 1061558.623 ops/s
# Warmup Iteration   4: 1073722.529 ops/s
# Warmup Iteration   5: 1074123.838 ops/s
# Warmup Iteration   6: 1069499.932 ops/s
# Warmup Iteration   7: 1072839.471 ops/s
# Warmup Iteration   8: 1073622.100 ops/s
# Warmup Iteration   9: 1073245.844 ops/s
# Warmup Iteration  10: 1075232.906 ops/s
# Warmup Iteration  11: 1071647.819 ops/s
# Warmup Iteration  12: 995788.667 ops/s
# Warmup Iteration  13: 988728.752 ops/s
# Warmup Iteration  14: 1073595.408 ops/s
# Warmup Iteration  15: 1073658.213 ops/s
# Warmup Iteration  16: 1074788.133 ops/s
# Warmup Iteration  17: 1134437.653 ops/s
# Warmup Iteration  18: 1133785.364 ops/s
# Warmup Iteration  19: 1134502.666 ops/s
# Warmup Iteration  20: 1132830.297 ops/s
# Warmup Iteration  21: 1130260.419 ops/s
# Warmup Iteration  22: 1133848.543 ops/s
# Warmup Iteration  23: 1129182.453 ops/s
# Warmup Iteration  24: 1129501.543 ops/s
# Warmup Iteration  25: 1130305.056 ops/s
# Warmup Iteration  26: 1134922.584 ops/s
# Warmup Iteration  27: 1130849.652 ops/s
# Warmup Iteration  28: 1133947.389 ops/s
# Warmup Iteration  29: 1133032.680 ops/s
# Warmup Iteration  30: 1133046.248 ops/s
Iteration   1: 1135206.846 ops/s
Iteration   2: 1130753.145 ops/s
Iteration   3: 1131319.596 ops/s
Iteration   4: 1133128.661 ops/s
Iteration   5: 1133627.663 ops/s
Iteration   6: 1129302.009 ops/s
Iteration   7: 1131610.405 ops/s
Iteration   8: 1135044.071 ops/s
Iteration   9: 1138248.760 ops/s
Iteration  10: 1132797.288 ops/s
Iteration  11: 1132550.524 ops/s
Iteration  12: 1132698.337 ops/s
Iteration  13: 1132964.687 ops/s
Iteration  14: 1133236.839 ops/s
Iteration  15: 1132357.525 ops/s
Iteration  16: 1131664.691 ops/s
Iteration  17: 1128250.177 ops/s
Iteration  18: 1134603.309 ops/s
Iteration  19: 1133075.825 ops/s
Iteration  20: 1135396.751 ops/s
Iteration  21: 1135951.153 ops/s
Iteration  22: 1133333.366 ops/s
Iteration  23: 1130480.669 ops/s
Iteration  24: 1133677.570 ops/s
Iteration  25: 1134130.299 ops/s
Iteration  26: 1133817.412 ops/s
Iteration  27: 1135167.343 ops/s
Iteration  28: 1135246.093 ops/s
Iteration  29: 1136015.039 ops/s
Iteration  30: 1131724.899 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_get_throws_index_negative":
  1133246.032 ±(99.9%) 1415.491 ops/s [Average]
  (min, avg, max) = (1128250.177, 1133246.032, 1138248.760), stdev = 2118.641
  CI (99.9%): [1131830.541, 1134661.523] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score      Error  Units
ImmutableBooleanEmptyListTest._Benchmark.benchmark_get_throws_index_negative  thrpt   30  1133246.032 ± 1415.491  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_indexOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_indexOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 171910744.697 ops/s
# Warmup Iteration   2: 297750059.841 ops/s
# Warmup Iteration   3: 278700867.109 ops/s
# Warmup Iteration   4: 316557487.840 ops/s
# Warmup Iteration   5: 315220921.166 ops/s
# Warmup Iteration   6: 314879413.969 ops/s
# Warmup Iteration   7: 315025249.585 ops/s
# Warmup Iteration   8: 314266884.245 ops/s
# Warmup Iteration   9: 314542663.379 ops/s
# Warmup Iteration  10: 313645287.783 ops/s
# Warmup Iteration  11: 315493887.932 ops/s
# Warmup Iteration  12: 314663874.148 ops/s
# Warmup Iteration  13: 315331650.608 ops/s
# Warmup Iteration  14: 315647092.129 ops/s
# Warmup Iteration  15: 314979681.831 ops/s
# Warmup Iteration  16: 314932457.300 ops/s
# Warmup Iteration  17: 315850031.882 ops/s
# Warmup Iteration  18: 314128605.117 ops/s
# Warmup Iteration  19: 314820099.295 ops/s
# Warmup Iteration  20: 314487563.666 ops/s
# Warmup Iteration  21: 313876088.126 ops/s
# Warmup Iteration  22: 315289329.910 ops/s
# Warmup Iteration  23: 313027335.887 ops/s
# Warmup Iteration  24: 314501628.189 ops/s
# Warmup Iteration  25: 314264940.446 ops/s
# Warmup Iteration  26: 314061304.081 ops/s
# Warmup Iteration  27: 314136579.654 ops/s
# Warmup Iteration  28: 314259510.292 ops/s
# Warmup Iteration  29: 315656366.976 ops/s
# Warmup Iteration  30: 312945516.755 ops/s
Iteration   1: 314147967.513 ops/s
Iteration   2: 315085761.067 ops/s
Iteration   3: 314732742.649 ops/s
Iteration   4: 312704350.016 ops/s
Iteration   5: 314921078.666 ops/s
Iteration   6: 315818218.581 ops/s
Iteration   7: 314367024.716 ops/s
Iteration   8: 314069076.981 ops/s
Iteration   9: 313483838.342 ops/s
Iteration  10: 313680076.318 ops/s
Iteration  11: 313893076.296 ops/s
Iteration  12: 313647997.713 ops/s
Iteration  13: 313546065.826 ops/s
Iteration  14: 313315270.056 ops/s
Iteration  15: 313777325.283 ops/s
Iteration  16: 314497775.138 ops/s
Iteration  17: 314801254.119 ops/s
Iteration  18: 314569385.517 ops/s
Iteration  19: 312283480.118 ops/s
Iteration  20: 313935553.725 ops/s
Iteration  21: 313670174.119 ops/s
Iteration  22: 315300862.858 ops/s
Iteration  23: 314307971.980 ops/s
Iteration  24: 313808494.948 ops/s
Iteration  25: 314309333.357 ops/s
Iteration  26: 315028650.805 ops/s
Iteration  27: 315282197.348 ops/s
Iteration  28: 314920750.057 ops/s
Iteration  29: 314225715.072 ops/s
Iteration  30: 314481331.941 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_indexOf":
  314220426.704 ±(99.9%) 519099.767 ops/s [Average]
  (min, avg, max) = (312283480.118, 314220426.704, 315818218.581), stdev = 776964.153
  CI (99.9%): [313701326.937, 314739526.471] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt          Score        Error  Units
ImmutableBooleanEmptyListTest._Benchmark.benchmark_indexOf  thrpt   30  314220426.704 ± 519099.767  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11379449.893 ops/s
# Warmup Iteration   2: 25162520.541 ops/s
# Warmup Iteration   3: 25046978.146 ops/s
# Warmup Iteration   4: 20727835.258 ops/s
# Warmup Iteration   5: 25057519.282 ops/s
# Warmup Iteration   6: 25045510.271 ops/s
# Warmup Iteration   7: 25033291.258 ops/s
# Warmup Iteration   8: 25060476.008 ops/s
# Warmup Iteration   9: 25042796.754 ops/s
# Warmup Iteration  10: 25001144.453 ops/s
# Warmup Iteration  11: 25051042.805 ops/s
# Warmup Iteration  12: 25065367.018 ops/s
# Warmup Iteration  13: 25067413.547 ops/s
# Warmup Iteration  14: 25069930.872 ops/s
# Warmup Iteration  15: 25047421.393 ops/s
# Warmup Iteration  16: 25020651.484 ops/s
# Warmup Iteration  17: 25056246.623 ops/s
# Warmup Iteration  18: 25054033.319 ops/s
# Warmup Iteration  19: 25042541.820 ops/s
# Warmup Iteration  20: 25042855.283 ops/s
# Warmup Iteration  21: 25030836.167 ops/s
# Warmup Iteration  22: 25067980.163 ops/s
# Warmup Iteration  23: 25044293.988 ops/s
# Warmup Iteration  24: 25035673.761 ops/s
# Warmup Iteration  25: 24941867.348 ops/s
# Warmup Iteration  26: 25048249.676 ops/s
# Warmup Iteration  27: 25066392.641 ops/s
# Warmup Iteration  28: 25085040.941 ops/s
# Warmup Iteration  29: 25044813.128 ops/s
# Warmup Iteration  30: 25088178.733 ops/s
Iteration   1: 25053024.107 ops/s
Iteration   2: 25086809.530 ops/s
Iteration   3: 25104476.636 ops/s
Iteration   4: 25041057.872 ops/s
Iteration   5: 25035729.395 ops/s
Iteration   6: 25074185.736 ops/s
Iteration   7: 25098415.921 ops/s
Iteration   8: 25081255.125 ops/s
Iteration   9: 25032440.962 ops/s
Iteration  10: 24983439.865 ops/s
Iteration  11: 24965945.438 ops/s
Iteration  12: 25085071.282 ops/s
Iteration  13: 25072991.236 ops/s
Iteration  14: 25046551.929 ops/s
Iteration  15: 25090364.907 ops/s
Iteration  16: 25066433.800 ops/s
Iteration  17: 25109777.523 ops/s
Iteration  18: 25029902.630 ops/s
Iteration  19: 25051427.651 ops/s
Iteration  20: 25044410.293 ops/s
Iteration  21: 25107255.004 ops/s
Iteration  22: 25029239.385 ops/s
Iteration  23: 25068893.759 ops/s
Iteration  24: 25079185.623 ops/s
Iteration  25: 25068968.909 ops/s
Iteration  26: 25072547.958 ops/s
Iteration  27: 25090770.123 ops/s
Iteration  28: 25081350.213 ops/s
Iteration  29: 25086339.359 ops/s
Iteration  30: 25064437.273 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_injectInto":
  25063423.315 ±(99.9%) 22386.887 ops/s [Average]
  (min, avg, max) = (24965945.438, 25063423.315, 25109777.523), stdev = 33507.641
  CI (99.9%): [25041036.428, 25085810.202] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score       Error  Units
ImmutableBooleanEmptyListTest._Benchmark.benchmark_injectInto  thrpt   30  25063423.315 ± 22386.887  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_injectIntoWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_injectIntoWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11921857.647 ops/s
# Warmup Iteration   2: 26107303.129 ops/s
# Warmup Iteration   3: 26089727.043 ops/s
# Warmup Iteration   4: 22982749.053 ops/s
# Warmup Iteration   5: 24602051.412 ops/s
# Warmup Iteration   6: 26088582.162 ops/s
# Warmup Iteration   7: 26146457.087 ops/s
# Warmup Iteration   8: 26104874.319 ops/s
# Warmup Iteration   9: 26104801.114 ops/s
# Warmup Iteration  10: 26129108.734 ops/s
# Warmup Iteration  11: 26112227.927 ops/s
# Warmup Iteration  12: 26132185.207 ops/s
# Warmup Iteration  13: 26121934.068 ops/s
# Warmup Iteration  14: 26146122.840 ops/s
# Warmup Iteration  15: 26116609.807 ops/s
# Warmup Iteration  16: 26107321.383 ops/s
# Warmup Iteration  17: 26125063.200 ops/s
# Warmup Iteration  18: 26064876.056 ops/s
# Warmup Iteration  19: 26072316.936 ops/s
# Warmup Iteration  20: 26130003.862 ops/s
# Warmup Iteration  21: 26104522.610 ops/s
# Warmup Iteration  22: 26109113.008 ops/s
# Warmup Iteration  23: 26091412.448 ops/s
# Warmup Iteration  24: 26095327.723 ops/s
# Warmup Iteration  25: 26124233.709 ops/s
# Warmup Iteration  26: 26045148.358 ops/s
# Warmup Iteration  27: 26122759.784 ops/s
# Warmup Iteration  28: 26121447.943 ops/s
# Warmup Iteration  29: 26120308.643 ops/s
# Warmup Iteration  30: 26154113.493 ops/s
Iteration   1: 26107059.290 ops/s
Iteration   2: 26104933.875 ops/s
Iteration   3: 26107229.997 ops/s
Iteration   4: 26081157.982 ops/s
Iteration   5: 26106588.613 ops/s
Iteration   6: 26147088.643 ops/s
Iteration   7: 26106828.691 ops/s
Iteration   8: 26106875.558 ops/s
Iteration   9: 26114766.705 ops/s
Iteration  10: 26197595.892 ops/s
Iteration  11: 26076310.292 ops/s
Iteration  12: 26107201.039 ops/s
Iteration  13: 26132866.841 ops/s
Iteration  14: 26187860.353 ops/s
Iteration  15: 26104260.004 ops/s
Iteration  16: 26110885.566 ops/s
Iteration  17: 26120305.739 ops/s
Iteration  18: 26056716.257 ops/s
Iteration  19: 26179068.999 ops/s
Iteration  20: 26118005.109 ops/s
Iteration  21: 26097540.637 ops/s
Iteration  22: 26124272.127 ops/s
Iteration  23: 26098951.358 ops/s
Iteration  24: 26142945.992 ops/s
Iteration  25: 26116856.460 ops/s
Iteration  26: 26057087.163 ops/s
Iteration  27: 26081704.525 ops/s
Iteration  28: 26082573.530 ops/s
Iteration  29: 26104929.507 ops/s
Iteration  30: 26141113.734 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_injectIntoWithIndex":
  26114052.683 ±(99.9%) 22188.442 ops/s [Average]
  (min, avg, max) = (26056716.257, 26114052.683, 26197595.892), stdev = 33210.618
  CI (99.9%): [26091864.240, 26136241.125] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt         Score       Error  Units
ImmutableBooleanEmptyListTest._Benchmark.benchmark_injectIntoWithIndex  thrpt   30  26114052.683 ± 22188.442  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 35127538.912 ops/s
# Warmup Iteration   2: 54224178.865 ops/s
# Warmup Iteration   3: 63559393.058 ops/s
# Warmup Iteration   4: 63466145.261 ops/s
# Warmup Iteration   5: 63237078.051 ops/s
# Warmup Iteration   6: 62394760.840 ops/s
# Warmup Iteration   7: 62640638.250 ops/s
# Warmup Iteration   8: 62600475.763 ops/s
# Warmup Iteration   9: 62499150.197 ops/s
# Warmup Iteration  10: 62937891.828 ops/s
# Warmup Iteration  11: 62601692.225 ops/s
# Warmup Iteration  12: 62698476.227 ops/s
# Warmup Iteration  13: 63399455.608 ops/s
# Warmup Iteration  14: 63443583.313 ops/s
# Warmup Iteration  15: 63795771.903 ops/s
# Warmup Iteration  16: 63740674.976 ops/s
# Warmup Iteration  17: 63648635.230 ops/s
# Warmup Iteration  18: 63709851.412 ops/s
# Warmup Iteration  19: 63696988.099 ops/s
# Warmup Iteration  20: 63597073.405 ops/s
# Warmup Iteration  21: 63683168.392 ops/s
# Warmup Iteration  22: 63586053.508 ops/s
# Warmup Iteration  23: 63376579.399 ops/s
# Warmup Iteration  24: 63489113.183 ops/s
# Warmup Iteration  25: 63545386.637 ops/s
# Warmup Iteration  26: 63547513.806 ops/s
# Warmup Iteration  27: 63855926.284 ops/s
# Warmup Iteration  28: 63631543.413 ops/s
# Warmup Iteration  29: 63579655.293 ops/s
# Warmup Iteration  30: 63577973.172 ops/s
Iteration   1: 63600396.085 ops/s
Iteration   2: 63596257.268 ops/s
Iteration   3: 63759143.183 ops/s
Iteration   4: 63018969.231 ops/s
Iteration   5: 63634217.828 ops/s
Iteration   6: 63332088.535 ops/s
Iteration   7: 63622847.738 ops/s
Iteration   8: 62980904.753 ops/s
Iteration   9: 62488973.496 ops/s
Iteration  10: 63406655.069 ops/s
Iteration  11: 63589973.517 ops/s
Iteration  12: 63955677.591 ops/s
Iteration  13: 63788406.002 ops/s
Iteration  14: 63534734.540 ops/s
Iteration  15: 63574426.499 ops/s
Iteration  16: 63367223.950 ops/s
Iteration  17: 63232846.911 ops/s
Iteration  18: 63518264.776 ops/s
Iteration  19: 63515555.387 ops/s
Iteration  20: 63343339.959 ops/s
Iteration  21: 63467874.118 ops/s
Iteration  22: 63475706.007 ops/s
Iteration  23: 63330331.480 ops/s
Iteration  24: 63662419.973 ops/s
Iteration  25: 63040522.154 ops/s
Iteration  26: 63764214.137 ops/s
Iteration  27: 63405558.057 ops/s
Iteration  28: 63544671.582 ops/s
Iteration  29: 63572031.841 ops/s
Iteration  30: 63121669.405 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_isEmpty":
  63441530.036 ±(99.9%) 195917.856 ops/s [Average]
  (min, avg, max) = (62488973.496, 63441530.036, 63955677.591), stdev = 293240.646
  CI (99.9%): [63245612.180, 63637447.891] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score        Error  Units
ImmutableBooleanEmptyListTest._Benchmark.benchmark_isEmpty  thrpt   30  63441530.036 ± 195917.856  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_iterator_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_iterator_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 877793.024 ops/s
# Warmup Iteration   2: 884887.312 ops/s
# Warmup Iteration   3: 1047110.430 ops/s
# Warmup Iteration   4: 1109107.533 ops/s
# Warmup Iteration   5: 1110986.746 ops/s
# Warmup Iteration   6: 1110382.108 ops/s
# Warmup Iteration   7: 1110954.243 ops/s
# Warmup Iteration   8: 1108984.331 ops/s
# Warmup Iteration   9: 1113746.483 ops/s
# Warmup Iteration  10: 1107915.406 ops/s
# Warmup Iteration  11: 1112228.923 ops/s
# Warmup Iteration  12: 1112927.541 ops/s
# Warmup Iteration  13: 1096714.877 ops/s
# Warmup Iteration  14: 949802.088 ops/s
# Warmup Iteration  15: 1109873.348 ops/s
# Warmup Iteration  16: 1108527.999 ops/s
# Warmup Iteration  17: 1176305.601 ops/s
# Warmup Iteration  18: 1187217.225 ops/s
# Warmup Iteration  19: 1183502.101 ops/s
# Warmup Iteration  20: 1177533.925 ops/s
# Warmup Iteration  21: 1183130.480 ops/s
# Warmup Iteration  22: 1186653.911 ops/s
# Warmup Iteration  23: 1183624.768 ops/s
# Warmup Iteration  24: 1189592.865 ops/s
# Warmup Iteration  25: 1188275.947 ops/s
# Warmup Iteration  26: 1183920.164 ops/s
# Warmup Iteration  27: 1177601.482 ops/s
# Warmup Iteration  28: 1183185.065 ops/s
# Warmup Iteration  29: 1183824.913 ops/s
# Warmup Iteration  30: 1179439.085 ops/s
Iteration   1: 1180492.445 ops/s
Iteration   2: 1186374.237 ops/s
Iteration   3: 1182217.413 ops/s
Iteration   4: 1180373.975 ops/s
Iteration   5: 1173574.928 ops/s
Iteration   6: 1184320.017 ops/s
Iteration   7: 1181148.286 ops/s
Iteration   8: 1182623.787 ops/s
Iteration   9: 1182083.300 ops/s
Iteration  10: 1180282.006 ops/s
Iteration  11: 1178331.515 ops/s
Iteration  12: 1183517.620 ops/s
Iteration  13: 1178373.293 ops/s
Iteration  14: 1181599.834 ops/s
Iteration  15: 1179387.043 ops/s
Iteration  16: 1184595.407 ops/s
Iteration  17: 1184992.238 ops/s
Iteration  18: 1184481.840 ops/s
Iteration  19: 1181271.560 ops/s
Iteration  20: 1180701.145 ops/s
Iteration  21: 1176378.363 ops/s
Iteration  22: 1176924.581 ops/s
Iteration  23: 1180075.894 ops/s
Iteration  24: 1186119.523 ops/s
Iteration  25: 1183409.086 ops/s
Iteration  26: 1186249.653 ops/s
Iteration  27: 1182221.728 ops/s
Iteration  28: 1184157.098 ops/s
Iteration  29: 1187805.693 ops/s
Iteration  30: 1184926.060 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_iterator_throws":
  1181966.986 ±(99.9%) 2182.711 ops/s [Average]
  (min, avg, max) = (1173574.928, 1181966.986, 1187805.693), stdev = 3266.979
  CI (99.9%): [1179784.275, 1184149.697] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
ImmutableBooleanEmptyListTest._Benchmark.benchmark_iterator_throws  thrpt   30  1181966.986 ± 2182.711  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_iterator_throws_emptyList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_iterator_throws_emptyList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 862280.084 ops/s
# Warmup Iteration   2: 867536.365 ops/s
# Warmup Iteration   3: 1030074.329 ops/s
# Warmup Iteration   4: 1094057.424 ops/s
# Warmup Iteration   5: 1103788.832 ops/s
# Warmup Iteration   6: 1105805.633 ops/s
# Warmup Iteration   7: 1105432.082 ops/s
# Warmup Iteration   8: 1105616.744 ops/s
# Warmup Iteration   9: 1106464.162 ops/s
# Warmup Iteration  10: 1104607.252 ops/s
# Warmup Iteration  11: 1107717.622 ops/s
# Warmup Iteration  12: 1104843.489 ops/s
# Warmup Iteration  13: 1106233.326 ops/s
# Warmup Iteration  14: 927998.469 ops/s
# Warmup Iteration  15: 1103603.616 ops/s
# Warmup Iteration  16: 1105074.999 ops/s
# Warmup Iteration  17: 1173553.316 ops/s
# Warmup Iteration  18: 1174318.445 ops/s
# Warmup Iteration  19: 1173280.581 ops/s
# Warmup Iteration  20: 1174842.051 ops/s
# Warmup Iteration  21: 1171462.573 ops/s
# Warmup Iteration  22: 1174142.247 ops/s
# Warmup Iteration  23: 1174344.001 ops/s
# Warmup Iteration  24: 1167860.961 ops/s
# Warmup Iteration  25: 1170959.133 ops/s
# Warmup Iteration  26: 1171290.294 ops/s
# Warmup Iteration  27: 1176285.485 ops/s
# Warmup Iteration  28: 1171098.500 ops/s
# Warmup Iteration  29: 1174093.143 ops/s
# Warmup Iteration  30: 1173093.915 ops/s
Iteration   1: 1173822.040 ops/s
Iteration   2: 1173182.514 ops/s
Iteration   3: 1173493.981 ops/s
Iteration   4: 1174886.528 ops/s
Iteration   5: 1174895.231 ops/s
Iteration   6: 1178051.083 ops/s
Iteration   7: 1176848.512 ops/s
Iteration   8: 1174528.647 ops/s
Iteration   9: 1169167.967 ops/s
Iteration  10: 1175254.559 ops/s
Iteration  11: 1174658.758 ops/s
Iteration  12: 1172087.121 ops/s
Iteration  13: 1171890.782 ops/s
Iteration  14: 1171655.582 ops/s
Iteration  15: 1175919.857 ops/s
Iteration  16: 1168653.124 ops/s
Iteration  17: 1174932.981 ops/s
Iteration  18: 1171111.062 ops/s
Iteration  19: 1175460.596 ops/s
Iteration  20: 1173567.743 ops/s
Iteration  21: 1167895.931 ops/s
Iteration  22: 1176367.324 ops/s
Iteration  23: 1170301.995 ops/s
Iteration  24: 1174623.043 ops/s
Iteration  25: 1172214.218 ops/s
Iteration  26: 1169938.941 ops/s
Iteration  27: 1169814.843 ops/s
Iteration  28: 1170569.096 ops/s
Iteration  29: 1169738.829 ops/s
Iteration  30: 1158579.573 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_iterator_throws_emptyList":
  1172470.415 ±(99.9%) 2486.804 ops/s [Average]
  (min, avg, max) = (1158579.573, 1172470.415, 1178051.083), stdev = 3722.132
  CI (99.9%): [1169983.611, 1174957.220] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score      Error  Units
ImmutableBooleanEmptyListTest._Benchmark.benchmark_iterator_throws_emptyList  thrpt   30  1172470.415 ± 2486.804  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_iterator_throws_non_empty_collection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_iterator_throws_non_empty_collection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 725064.319 ops/s
# Warmup Iteration   2: 733113.217 ops/s
# Warmup Iteration   3: 877450.544 ops/s
# Warmup Iteration   4: 922750.576 ops/s
# Warmup Iteration   5: 926633.121 ops/s
# Warmup Iteration   6: 927635.365 ops/s
# Warmup Iteration   7: 926636.342 ops/s
# Warmup Iteration   8: 924310.613 ops/s
# Warmup Iteration   9: 928115.098 ops/s
# Warmup Iteration  10: 929453.558 ops/s
# Warmup Iteration  11: 928850.529 ops/s
# Warmup Iteration  12: 924204.708 ops/s
# Warmup Iteration  13: 865169.932 ops/s
# Warmup Iteration  14: 833826.920 ops/s
# Warmup Iteration  15: 927866.261 ops/s
# Warmup Iteration  16: 926591.284 ops/s
# Warmup Iteration  17: 980374.563 ops/s
# Warmup Iteration  18: 979530.376 ops/s
# Warmup Iteration  19: 982634.775 ops/s
# Warmup Iteration  20: 983417.877 ops/s
# Warmup Iteration  21: 981861.580 ops/s
# Warmup Iteration  22: 982395.471 ops/s
# Warmup Iteration  23: 983573.335 ops/s
# Warmup Iteration  24: 980632.282 ops/s
# Warmup Iteration  25: 980894.874 ops/s
# Warmup Iteration  26: 982179.709 ops/s
# Warmup Iteration  27: 979761.471 ops/s
# Warmup Iteration  28: 982042.656 ops/s
# Warmup Iteration  29: 983563.831 ops/s
# Warmup Iteration  30: 980426.879 ops/s
Iteration   1: 982762.919 ops/s
Iteration   2: 978281.179 ops/s
Iteration   3: 974451.806 ops/s
Iteration   4: 984360.841 ops/s
Iteration   5: 984809.732 ops/s
Iteration   6: 981144.915 ops/s
Iteration   7: 982892.472 ops/s
Iteration   8: 981532.290 ops/s
Iteration   9: 983928.293 ops/s
Iteration  10: 978919.559 ops/s
Iteration  11: 982783.841 ops/s
Iteration  12: 978706.642 ops/s
Iteration  13: 980624.335 ops/s
Iteration  14: 980549.140 ops/s
Iteration  15: 974492.820 ops/s
Iteration  16: 982548.644 ops/s
Iteration  17: 981658.848 ops/s
Iteration  18: 981473.335 ops/s
Iteration  19: 982918.776 ops/s
Iteration  20: 982384.417 ops/s
Iteration  21: 979501.237 ops/s
Iteration  22: 981494.074 ops/s
Iteration  23: 978482.144 ops/s
Iteration  24: 984590.935 ops/s
Iteration  25: 977535.875 ops/s
Iteration  26: 983177.610 ops/s
Iteration  27: 982873.526 ops/s
Iteration  28: 982006.067 ops/s
Iteration  29: 983888.970 ops/s
Iteration  30: 977534.150 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_iterator_throws_non_empty_collection":
  981076.980 ±(99.9%) 1835.711 ops/s [Average]
  (min, avg, max) = (974451.806, 981076.980, 984809.732), stdev = 2747.606
  CI (99.9%): [979241.269, 982912.691] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 Mode  Cnt       Score      Error  Units
ImmutableBooleanEmptyListTest._Benchmark.benchmark_iterator_throws_non_empty_collection  thrpt   30  981076.980 ± 1835.711  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_lastIndexOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_lastIndexOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 171123545.278 ops/s
# Warmup Iteration   2: 298061351.026 ops/s
# Warmup Iteration   3: 254532844.097 ops/s
# Warmup Iteration   4: 286372990.012 ops/s
# Warmup Iteration   5: 285680591.606 ops/s
# Warmup Iteration   6: 286418947.059 ops/s
# Warmup Iteration   7: 285716829.097 ops/s
# Warmup Iteration   8: 286124899.302 ops/s
# Warmup Iteration   9: 286674179.389 ops/s
# Warmup Iteration  10: 286514988.922 ops/s
# Warmup Iteration  11: 287235340.781 ops/s
# Warmup Iteration  12: 286378967.670 ops/s
# Warmup Iteration  13: 287080955.796 ops/s
# Warmup Iteration  14: 286962818.873 ops/s
# Warmup Iteration  15: 286087473.572 ops/s
# Warmup Iteration  16: 286093938.600 ops/s
# Warmup Iteration  17: 287603553.485 ops/s
# Warmup Iteration  18: 286409275.197 ops/s
# Warmup Iteration  19: 286163976.736 ops/s
# Warmup Iteration  20: 285906826.346 ops/s
# Warmup Iteration  21: 285570112.738 ops/s
# Warmup Iteration  22: 287000107.628 ops/s
# Warmup Iteration  23: 286280529.609 ops/s
# Warmup Iteration  24: 286011703.414 ops/s
# Warmup Iteration  25: 285762853.684 ops/s
# Warmup Iteration  26: 287253149.968 ops/s
# Warmup Iteration  27: 286424239.619 ops/s
# Warmup Iteration  28: 284914782.841 ops/s
# Warmup Iteration  29: 286411364.612 ops/s
# Warmup Iteration  30: 286386183.669 ops/s
Iteration   1: 286819583.442 ops/s
Iteration   2: 286560402.628 ops/s
Iteration   3: 286991573.057 ops/s
Iteration   4: 285980997.944 ops/s
Iteration   5: 288395732.524 ops/s
Iteration   6: 288144281.653 ops/s
Iteration   7: 286194350.410 ops/s
Iteration   8: 285942330.285 ops/s
Iteration   9: 286237214.743 ops/s
Iteration  10: 287739360.072 ops/s
Iteration  11: 287322577.255 ops/s
Iteration  12: 286800936.592 ops/s
Iteration  13: 285708773.735 ops/s
Iteration  14: 286882921.211 ops/s
Iteration  15: 287112141.286 ops/s
Iteration  16: 287284794.833 ops/s
Iteration  17: 286787904.601 ops/s
Iteration  18: 287819941.367 ops/s
Iteration  19: 285636086.641 ops/s
Iteration  20: 286497286.662 ops/s
Iteration  21: 286159071.882 ops/s
Iteration  22: 285917360.517 ops/s
Iteration  23: 286082710.572 ops/s
Iteration  24: 285369466.852 ops/s
Iteration  25: 287548970.998 ops/s
Iteration  26: 287057881.141 ops/s
Iteration  27: 286559475.428 ops/s
Iteration  28: 286501089.363 ops/s
Iteration  29: 286218989.146 ops/s
Iteration  30: 286536270.959 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_lastIndexOf":
  286693682.593 ±(99.9%) 500948.759 ops/s [Average]
  (min, avg, max) = (285369466.852, 286693682.593, 288395732.524), stdev = 749796.576
  CI (99.9%): [286192733.835, 287194631.352] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt          Score        Error  Units
ImmutableBooleanEmptyListTest._Benchmark.benchmark_lastIndexOf  thrpt   30  286693682.593 ± 500948.759  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1381228.929 ops/s
# Warmup Iteration   2: 2984346.390 ops/s
# Warmup Iteration   3: 2989873.730 ops/s
# Warmup Iteration   4: 2494339.701 ops/s
# Warmup Iteration   5: 2979882.887 ops/s
# Warmup Iteration   6: 2968916.461 ops/s
# Warmup Iteration   7: 2937171.520 ops/s
# Warmup Iteration   8: 2937622.186 ops/s
# Warmup Iteration   9: 2976891.219 ops/s
# Warmup Iteration  10: 2977589.034 ops/s
# Warmup Iteration  11: 2971420.229 ops/s
# Warmup Iteration  12: 2968191.484 ops/s
# Warmup Iteration  13: 2963585.291 ops/s
# Warmup Iteration  14: 2993735.673 ops/s
# Warmup Iteration  15: 2989162.589 ops/s
# Warmup Iteration  16: 2983849.961 ops/s
# Warmup Iteration  17: 2969534.309 ops/s
# Warmup Iteration  18: 2982078.599 ops/s
# Warmup Iteration  19: 2953144.321 ops/s
# Warmup Iteration  20: 2983597.950 ops/s
# Warmup Iteration  21: 2992349.253 ops/s
# Warmup Iteration  22: 2985592.701 ops/s
# Warmup Iteration  23: 2994214.630 ops/s
# Warmup Iteration  24: 2992767.786 ops/s
# Warmup Iteration  25: 2983007.284 ops/s
# Warmup Iteration  26: 2954254.628 ops/s
# Warmup Iteration  27: 2974235.908 ops/s
# Warmup Iteration  28: 2979333.610 ops/s
# Warmup Iteration  29: 2983406.058 ops/s
# Warmup Iteration  30: 2975363.107 ops/s
Iteration   1: 2961679.583 ops/s
Iteration   2: 2993317.169 ops/s
Iteration   3: 2974540.133 ops/s
Iteration   4: 2979323.072 ops/s
Iteration   5: 2951250.633 ops/s
Iteration   6: 2960617.158 ops/s
Iteration   7: 3010916.940 ops/s
Iteration   8: 2966894.729 ops/s
Iteration   9: 2983093.430 ops/s
Iteration  10: 2977013.452 ops/s
Iteration  11: 2976985.765 ops/s
Iteration  12: 2940476.225 ops/s
Iteration  13: 2909623.947 ops/s
Iteration  14: 2974216.789 ops/s
Iteration  15: 2984150.621 ops/s
Iteration  16: 2998206.619 ops/s
Iteration  17: 2977187.969 ops/s
Iteration  18: 2981717.356 ops/s
Iteration  19: 3000888.251 ops/s
Iteration  20: 3007304.020 ops/s
Iteration  21: 2973339.976 ops/s
Iteration  22: 2986864.519 ops/s
Iteration  23: 2967024.971 ops/s
Iteration  24: 2991374.228 ops/s
Iteration  25: 3013636.350 ops/s
Iteration  26: 2962920.841 ops/s
Iteration  27: 2981836.870 ops/s
Iteration  28: 2986898.390 ops/s
Iteration  29: 2963830.875 ops/s
Iteration  30: 2992565.467 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_makeString":
  2977656.545 ±(99.9%) 14204.413 ops/s [Average]
  (min, avg, max) = (2909623.947, 2977656.545, 3013636.350), stdev = 21260.498
  CI (99.9%): [2963452.132, 2991860.958] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ImmutableBooleanEmptyListTest._Benchmark.benchmark_makeString  thrpt   30  2977656.545 ± 14204.413  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_newCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_newCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 14480772.072 ops/s
# Warmup Iteration   2: 24011747.769 ops/s
# Warmup Iteration   3: 27860839.095 ops/s
# Warmup Iteration   4: 28848112.339 ops/s
# Warmup Iteration   5: 28897225.700 ops/s
# Warmup Iteration   6: 28738988.092 ops/s
# Warmup Iteration   7: 28879044.856 ops/s
# Warmup Iteration   8: 28710101.889 ops/s
# Warmup Iteration   9: 28810630.275 ops/s
# Warmup Iteration  10: 28792691.266 ops/s
# Warmup Iteration  11: 28760359.875 ops/s
# Warmup Iteration  12: 28771409.116 ops/s
# Warmup Iteration  13: 28785312.620 ops/s
# Warmup Iteration  14: 28844176.838 ops/s
# Warmup Iteration  15: 28786963.657 ops/s
# Warmup Iteration  16: 28786858.716 ops/s
# Warmup Iteration  17: 28767807.426 ops/s
# Warmup Iteration  18: 28880322.707 ops/s
# Warmup Iteration  19: 28867360.734 ops/s
# Warmup Iteration  20: 28880685.986 ops/s
# Warmup Iteration  21: 28757077.624 ops/s
# Warmup Iteration  22: 28874218.100 ops/s
# Warmup Iteration  23: 28847123.530 ops/s
# Warmup Iteration  24: 28851413.775 ops/s
# Warmup Iteration  25: 28848522.059 ops/s
# Warmup Iteration  26: 28849864.805 ops/s
# Warmup Iteration  27: 28938988.492 ops/s
# Warmup Iteration  28: 28881357.759 ops/s
# Warmup Iteration  29: 28858037.043 ops/s
# Warmup Iteration  30: 28959180.135 ops/s
Iteration   1: 28925543.286 ops/s
Iteration   2: 29008670.039 ops/s
Iteration   3: 28982211.564 ops/s
Iteration   4: 28888268.280 ops/s
Iteration   5: 28791046.257 ops/s
Iteration   6: 28905106.251 ops/s
Iteration   7: 28977917.213 ops/s
Iteration   8: 28806087.198 ops/s
Iteration   9: 28959709.770 ops/s
Iteration  10: 28863798.986 ops/s
Iteration  11: 28961583.976 ops/s
Iteration  12: 28916777.321 ops/s
Iteration  13: 28873463.153 ops/s
Iteration  14: 28966781.516 ops/s
Iteration  15: 28920884.516 ops/s
Iteration  16: 28911738.086 ops/s
Iteration  17: 28825491.807 ops/s
Iteration  18: 28871397.383 ops/s
Iteration  19: 28838513.876 ops/s
Iteration  20: 28989975.438 ops/s
Iteration  21: 28957768.510 ops/s
Iteration  22: 28903646.138 ops/s
Iteration  23: 28657782.892 ops/s
Iteration  24: 28791540.378 ops/s
Iteration  25: 28829190.628 ops/s
Iteration  26: 28848531.197 ops/s
Iteration  27: 28885253.217 ops/s
Iteration  28: 28728804.120 ops/s
Iteration  29: 28843659.669 ops/s
Iteration  30: 28968528.675 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_newCollection":
  28886655.711 ±(99.9%) 54444.677 ops/s [Average]
  (min, avg, max) = (28657782.892, 28886655.711, 29008670.039), stdev = 81490.235
  CI (99.9%): [28832211.035, 28941100.388] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
ImmutableBooleanEmptyListTest._Benchmark.benchmark_newCollection  thrpt   30  28886655.711 ± 54444.677  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_newCollectionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_newCollectionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8647356.949 ops/s
# Warmup Iteration   2: 13707529.950 ops/s
# Warmup Iteration   3: 15991284.288 ops/s
# Warmup Iteration   4: 15826715.944 ops/s
# Warmup Iteration   5: 15872302.526 ops/s
# Warmup Iteration   6: 16024550.300 ops/s
# Warmup Iteration   7: 16023355.889 ops/s
# Warmup Iteration   8: 16046657.005 ops/s
# Warmup Iteration   9: 16002167.585 ops/s
# Warmup Iteration  10: 15932785.314 ops/s
# Warmup Iteration  11: 16031976.150 ops/s
# Warmup Iteration  12: 16029678.161 ops/s
# Warmup Iteration  13: 15972371.935 ops/s
# Warmup Iteration  14: 15962556.420 ops/s
# Warmup Iteration  15: 15953927.993 ops/s
# Warmup Iteration  16: 15974172.069 ops/s
# Warmup Iteration  17: 15998906.009 ops/s
# Warmup Iteration  18: 16019051.823 ops/s
# Warmup Iteration  19: 16082273.183 ops/s
# Warmup Iteration  20: 15905536.271 ops/s
# Warmup Iteration  21: 16030969.119 ops/s
# Warmup Iteration  22: 15987086.897 ops/s
# Warmup Iteration  23: 15956038.808 ops/s
# Warmup Iteration  24: 15965252.571 ops/s
# Warmup Iteration  25: 16038607.511 ops/s
# Warmup Iteration  26: 16029423.583 ops/s
# Warmup Iteration  27: 16047674.096 ops/s
# Warmup Iteration  28: 15996258.612 ops/s
# Warmup Iteration  29: 15970038.864 ops/s
# Warmup Iteration  30: 16034439.796 ops/s
Iteration   1: 15914640.239 ops/s
Iteration   2: 16066416.719 ops/s
Iteration   3: 15961328.929 ops/s
Iteration   4: 15957597.715 ops/s
Iteration   5: 16064929.116 ops/s
Iteration   6: 15857904.231 ops/s
Iteration   7: 15931476.014 ops/s
Iteration   8: 15910031.882 ops/s
Iteration   9: 15851026.073 ops/s
Iteration  10: 15926527.319 ops/s
Iteration  11: 15956747.798 ops/s
Iteration  12: 15980268.233 ops/s
Iteration  13: 15981267.248 ops/s
Iteration  14: 15868852.795 ops/s
Iteration  15: 16032465.615 ops/s
Iteration  16: 15981974.309 ops/s
Iteration  17: 15978366.701 ops/s
Iteration  18: 16001102.753 ops/s
Iteration  19: 15967625.422 ops/s
Iteration  20: 15862055.414 ops/s
Iteration  21: 16014942.020 ops/s
Iteration  22: 15979971.981 ops/s
Iteration  23: 16029831.732 ops/s
Iteration  24: 15965968.012 ops/s
Iteration  25: 15888682.297 ops/s
Iteration  26: 15977560.783 ops/s
Iteration  27: 16031650.396 ops/s
Iteration  28: 15862379.276 ops/s
Iteration  29: 16026857.333 ops/s
Iteration  30: 15917212.470 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_newCollectionWith":
  15958255.361 ±(99.9%) 41579.553 ops/s [Average]
  (min, avg, max) = (15851026.073, 15958255.361, 16066416.719), stdev = 62234.323
  CI (99.9%): [15916675.808, 15999834.914] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt         Score       Error  Units
ImmutableBooleanEmptyListTest._Benchmark.benchmark_newCollectionWith  thrpt   30  15958255.361 ± 41579.553  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_newWithAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_newWithAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 878051.680 ops/s
# Warmup Iteration   2: 1845583.875 ops/s
# Warmup Iteration   3: 1965426.699 ops/s
# Warmup Iteration   4: 1963363.774 ops/s
# Warmup Iteration   5: 1636813.358 ops/s
# Warmup Iteration   6: 1961101.514 ops/s
# Warmup Iteration   7: 1968455.398 ops/s
# Warmup Iteration   8: 1966124.756 ops/s
# Warmup Iteration   9: 1969264.207 ops/s
# Warmup Iteration  10: 1968714.221 ops/s
# Warmup Iteration  11: 1969147.356 ops/s
# Warmup Iteration  12: 1968026.657 ops/s
# Warmup Iteration  13: 1966926.163 ops/s
# Warmup Iteration  14: 1967782.888 ops/s
# Warmup Iteration  15: 1965717.890 ops/s
# Warmup Iteration  16: 1969674.671 ops/s
# Warmup Iteration  17: 1966354.745 ops/s
# Warmup Iteration  18: 1966801.801 ops/s
# Warmup Iteration  19: 1965891.088 ops/s
# Warmup Iteration  20: 1968788.048 ops/s
# Warmup Iteration  21: 1967106.227 ops/s
# Warmup Iteration  22: 1969640.745 ops/s
# Warmup Iteration  23: 1967349.747 ops/s
# Warmup Iteration  24: 1970407.135 ops/s
# Warmup Iteration  25: 1965299.306 ops/s
# Warmup Iteration  26: 1968498.720 ops/s
# Warmup Iteration  27: 1969490.619 ops/s
# Warmup Iteration  28: 1970117.105 ops/s
# Warmup Iteration  29: 1971520.648 ops/s
# Warmup Iteration  30: 1968081.917 ops/s
Iteration   1: 1972043.498 ops/s
Iteration   2: 1969376.095 ops/s
Iteration   3: 1969196.135 ops/s
Iteration   4: 1967183.724 ops/s
Iteration   5: 1971219.162 ops/s
Iteration   6: 1973520.310 ops/s
Iteration   7: 1971253.591 ops/s
Iteration   8: 1965809.756 ops/s
Iteration   9: 1970195.615 ops/s
Iteration  10: 1969260.536 ops/s
Iteration  11: 1971438.281 ops/s
Iteration  12: 1969647.033 ops/s
Iteration  13: 1972082.419 ops/s
Iteration  14: 1970394.988 ops/s
Iteration  15: 1968343.473 ops/s
Iteration  16: 1970239.770 ops/s
Iteration  17: 1971645.773 ops/s
Iteration  18: 1968018.142 ops/s
Iteration  19: 1969531.641 ops/s
Iteration  20: 1969147.881 ops/s
Iteration  21: 1972348.376 ops/s
Iteration  22: 1964073.996 ops/s
Iteration  23: 1967110.996 ops/s
Iteration  24: 1971955.122 ops/s
Iteration  25: 1971262.244 ops/s
Iteration  26: 1965932.439 ops/s
Iteration  27: 1964985.932 ops/s
Iteration  28: 1968328.387 ops/s
Iteration  29: 1964154.819 ops/s
Iteration  30: 1969289.419 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_newWithAll":
  1969299.652 ±(99.9%) 1676.659 ops/s [Average]
  (min, avg, max) = (1964073.996, 1969299.652, 1973520.310), stdev = 2509.545
  CI (99.9%): [1967622.993, 1970976.311] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableBooleanEmptyListTest._Benchmark.benchmark_newWithAll  thrpt   30  1969299.652 ± 1676.659  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_newWithOn64ElementCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_newWithOn64ElementCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1129541.566 ops/s
# Warmup Iteration   2: 1170326.098 ops/s
# Warmup Iteration   3: 1274211.857 ops/s
# Warmup Iteration   4: 1494251.316 ops/s
# Warmup Iteration   5: 1488333.151 ops/s
# Warmup Iteration   6: 1492641.864 ops/s
# Warmup Iteration   7: 1493271.770 ops/s
# Warmup Iteration   8: 1493439.476 ops/s
# Warmup Iteration   9: 1492694.553 ops/s
# Warmup Iteration  10: 1494335.469 ops/s
# Warmup Iteration  11: 1491058.164 ops/s
# Warmup Iteration  12: 1496039.494 ops/s
# Warmup Iteration  13: 1490551.179 ops/s
# Warmup Iteration  14: 1493610.021 ops/s
# Warmup Iteration  15: 1493883.998 ops/s
# Warmup Iteration  16: 1209511.077 ops/s
# Warmup Iteration  17: 1494985.866 ops/s
# Warmup Iteration  18: 1491313.066 ops/s
# Warmup Iteration  19: 1493792.545 ops/s
# Warmup Iteration  20: 1494346.967 ops/s
# Warmup Iteration  21: 1493689.690 ops/s
# Warmup Iteration  22: 1494204.338 ops/s
# Warmup Iteration  23: 1495129.815 ops/s
# Warmup Iteration  24: 1493391.181 ops/s
# Warmup Iteration  25: 1494157.961 ops/s
# Warmup Iteration  26: 1493120.109 ops/s
# Warmup Iteration  27: 1495534.506 ops/s
# Warmup Iteration  28: 1495698.152 ops/s
# Warmup Iteration  29: 1495963.116 ops/s
# Warmup Iteration  30: 1494278.867 ops/s
Iteration   1: 1495689.708 ops/s
Iteration   2: 1496543.503 ops/s
Iteration   3: 1490182.612 ops/s
Iteration   4: 1492899.399 ops/s
Iteration   5: 1496166.069 ops/s
Iteration   6: 1493301.223 ops/s
Iteration   7: 1495243.608 ops/s
Iteration   8: 1496046.461 ops/s
Iteration   9: 1491975.214 ops/s
Iteration  10: 1493241.600 ops/s
Iteration  11: 1490781.665 ops/s
Iteration  12: 1495735.040 ops/s
Iteration  13: 1495770.994 ops/s
Iteration  14: 1497821.474 ops/s
Iteration  15: 1496626.427 ops/s
Iteration  16: 1495022.706 ops/s
Iteration  17: 1492814.137 ops/s
Iteration  18: 1493942.435 ops/s
Iteration  19: 1494412.901 ops/s
Iteration  20: 1496726.329 ops/s
Iteration  21: 1493619.977 ops/s
Iteration  22: 1494024.322 ops/s
Iteration  23: 1494611.618 ops/s
Iteration  24: 1497275.672 ops/s
Iteration  25: 1496734.958 ops/s
Iteration  26: 1494317.413 ops/s
Iteration  27: 1495404.748 ops/s
Iteration  28: 1491668.592 ops/s
Iteration  29: 1488752.035 ops/s
Iteration  30: 1496679.271 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_newWithOn64ElementCollection":
  1494467.737 ±(99.9%) 1484.426 ops/s [Average]
  (min, avg, max) = (1488752.035, 1494467.737, 1497821.474), stdev = 2221.820
  CI (99.9%): [1492983.311, 1495952.163] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt        Score      Error  Units
ImmutableBooleanEmptyListTest._Benchmark.benchmark_newWithOn64ElementCollection  thrpt   30  1494467.737 ± 1484.426  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_newWithout$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_newWithout

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 54009949.973 ops/s
# Warmup Iteration   2: 84807934.168 ops/s
# Warmup Iteration   3: 101728987.171 ops/s
# Warmup Iteration   4: 102426485.665 ops/s
# Warmup Iteration   5: 102271564.468 ops/s
# Warmup Iteration   6: 102191557.152 ops/s
# Warmup Iteration   7: 102104953.963 ops/s
# Warmup Iteration   8: 101469398.082 ops/s
# Warmup Iteration   9: 101312353.009 ops/s
# Warmup Iteration  10: 102327048.703 ops/s
# Warmup Iteration  11: 102149691.044 ops/s
# Warmup Iteration  12: 101228025.829 ops/s
# Warmup Iteration  13: 102435684.440 ops/s
# Warmup Iteration  14: 102063472.204 ops/s
# Warmup Iteration  15: 102401906.373 ops/s
# Warmup Iteration  16: 102181659.459 ops/s
# Warmup Iteration  17: 101679017.511 ops/s
# Warmup Iteration  18: 101835638.207 ops/s
# Warmup Iteration  19: 102147871.426 ops/s
# Warmup Iteration  20: 102371518.965 ops/s
# Warmup Iteration  21: 102494155.412 ops/s
# Warmup Iteration  22: 102055051.389 ops/s
# Warmup Iteration  23: 102580433.954 ops/s
# Warmup Iteration  24: 102308905.553 ops/s
# Warmup Iteration  25: 102541364.637 ops/s
# Warmup Iteration  26: 102558550.340 ops/s
# Warmup Iteration  27: 102056519.315 ops/s
# Warmup Iteration  28: 102375966.617 ops/s
# Warmup Iteration  29: 102338770.395 ops/s
# Warmup Iteration  30: 102637012.897 ops/s
Iteration   1: 102465126.976 ops/s
Iteration   2: 102262338.829 ops/s
Iteration   3: 102637174.967 ops/s
Iteration   4: 102566864.350 ops/s
Iteration   5: 102565094.401 ops/s
Iteration   6: 102292413.967 ops/s
Iteration   7: 102566224.268 ops/s
Iteration   8: 102228355.670 ops/s
Iteration   9: 102084682.546 ops/s
Iteration  10: 102563818.791 ops/s
Iteration  11: 102466537.581 ops/s
Iteration  12: 102179720.639 ops/s
Iteration  13: 102135069.711 ops/s
Iteration  14: 102669289.131 ops/s
Iteration  15: 102594952.416 ops/s
Iteration  16: 102568775.284 ops/s
Iteration  17: 102411299.044 ops/s
Iteration  18: 102285979.380 ops/s
Iteration  19: 102246518.571 ops/s
Iteration  20: 102482403.422 ops/s
Iteration  21: 102490225.381 ops/s
Iteration  22: 102107719.731 ops/s
Iteration  23: 102382417.324 ops/s
Iteration  24: 102247946.630 ops/s
Iteration  25: 102355697.289 ops/s
Iteration  26: 102450995.212 ops/s
Iteration  27: 102523354.370 ops/s
Iteration  28: 102093487.875 ops/s
Iteration  29: 101747628.179 ops/s
Iteration  30: 102087903.115 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_newWithout":
  102358667.168 ±(99.9%) 143485.474 ops/s [Average]
  (min, avg, max) = (101747628.179, 102358667.168, 102669289.131), stdev = 214762.319
  CI (99.9%): [102215181.694, 102502152.643] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt          Score        Error  Units
ImmutableBooleanEmptyListTest._Benchmark.benchmark_newWithout  thrpt   30  102358667.168 ± 143485.474  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_newWithoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_newWithoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 994392.023 ops/s
# Warmup Iteration   2: 2198072.452 ops/s
# Warmup Iteration   3: 2239978.206 ops/s
# Warmup Iteration   4: 2056123.973 ops/s
# Warmup Iteration   5: 2042999.446 ops/s
# Warmup Iteration   6: 2237959.461 ops/s
# Warmup Iteration   7: 2240082.656 ops/s
# Warmup Iteration   8: 2242649.208 ops/s
# Warmup Iteration   9: 2242659.159 ops/s
# Warmup Iteration  10: 2242087.060 ops/s
# Warmup Iteration  11: 2242694.694 ops/s
# Warmup Iteration  12: 2239501.317 ops/s
# Warmup Iteration  13: 2240970.313 ops/s
# Warmup Iteration  14: 2244711.835 ops/s
# Warmup Iteration  15: 2243327.214 ops/s
# Warmup Iteration  16: 2247612.622 ops/s
# Warmup Iteration  17: 2241215.935 ops/s
# Warmup Iteration  18: 2237647.274 ops/s
# Warmup Iteration  19: 2241291.282 ops/s
# Warmup Iteration  20: 2239254.900 ops/s
# Warmup Iteration  21: 2245736.614 ops/s
# Warmup Iteration  22: 2240630.175 ops/s
# Warmup Iteration  23: 2240485.405 ops/s
# Warmup Iteration  24: 2242702.210 ops/s
# Warmup Iteration  25: 2240664.910 ops/s
# Warmup Iteration  26: 2244774.316 ops/s
# Warmup Iteration  27: 2241811.114 ops/s
# Warmup Iteration  28: 2238451.656 ops/s
# Warmup Iteration  29: 2238001.753 ops/s
# Warmup Iteration  30: 2240865.530 ops/s
Iteration   1: 2246028.813 ops/s
Iteration   2: 2241201.087 ops/s
Iteration   3: 2241275.098 ops/s
Iteration   4: 2243067.368 ops/s
Iteration   5: 2236009.282 ops/s
Iteration   6: 2245223.897 ops/s
Iteration   7: 2239017.898 ops/s
Iteration   8: 2243295.263 ops/s
Iteration   9: 2237025.218 ops/s
Iteration  10: 2240701.375 ops/s
Iteration  11: 2247334.924 ops/s
Iteration  12: 2236328.023 ops/s
Iteration  13: 2244047.198 ops/s
Iteration  14: 2244930.281 ops/s
Iteration  15: 2243764.746 ops/s
Iteration  16: 2244709.979 ops/s
Iteration  17: 2241287.773 ops/s
Iteration  18: 2240836.547 ops/s
Iteration  19: 2239339.653 ops/s
Iteration  20: 2244111.858 ops/s
Iteration  21: 2244879.908 ops/s
Iteration  22: 2241536.477 ops/s
Iteration  23: 2243583.967 ops/s
Iteration  24: 2243995.683 ops/s
Iteration  25: 2237327.134 ops/s
Iteration  26: 2242074.638 ops/s
Iteration  27: 2241164.216 ops/s
Iteration  28: 2244531.749 ops/s
Iteration  29: 2244318.728 ops/s
Iteration  30: 2239321.414 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_newWithoutAll":
  2242075.673 ±(99.9%) 1982.791 ops/s [Average]
  (min, avg, max) = (2236009.282, 2242075.673, 2247334.924), stdev = 2967.749
  CI (99.9%): [2240092.882, 2244058.465] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ImmutableBooleanEmptyListTest._Benchmark.benchmark_newWithoutAll  thrpt   30  2242075.673 ± 1982.791  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10647875.621 ops/s
# Warmup Iteration   2: 17003601.678 ops/s
# Warmup Iteration   3: 19900318.729 ops/s
# Warmup Iteration   4: 19933995.281 ops/s
# Warmup Iteration   5: 19875870.861 ops/s
# Warmup Iteration   6: 19903167.970 ops/s
# Warmup Iteration   7: 19907492.653 ops/s
# Warmup Iteration   8: 19957026.917 ops/s
# Warmup Iteration   9: 19833750.556 ops/s
# Warmup Iteration  10: 19921462.335 ops/s
# Warmup Iteration  11: 19869894.640 ops/s
# Warmup Iteration  12: 19900780.291 ops/s
# Warmup Iteration  13: 19870805.506 ops/s
# Warmup Iteration  14: 19868685.392 ops/s
# Warmup Iteration  15: 19877491.948 ops/s
# Warmup Iteration  16: 19873039.061 ops/s
# Warmup Iteration  17: 19851061.989 ops/s
# Warmup Iteration  18: 19910376.165 ops/s
# Warmup Iteration  19: 19888824.640 ops/s
# Warmup Iteration  20: 19926879.488 ops/s
# Warmup Iteration  21: 19928666.495 ops/s
# Warmup Iteration  22: 19894666.043 ops/s
# Warmup Iteration  23: 19956457.644 ops/s
# Warmup Iteration  24: 19932942.194 ops/s
# Warmup Iteration  25: 19917604.546 ops/s
# Warmup Iteration  26: 19945671.099 ops/s
# Warmup Iteration  27: 19976081.382 ops/s
# Warmup Iteration  28: 19921458.901 ops/s
# Warmup Iteration  29: 19888966.478 ops/s
# Warmup Iteration  30: 19988485.186 ops/s
Iteration   1: 19875731.608 ops/s
Iteration   2: 19927817.405 ops/s
Iteration   3: 19937231.609 ops/s
Iteration   4: 19947815.409 ops/s
Iteration   5: 19986244.424 ops/s
Iteration   6: 20003460.141 ops/s
Iteration   7: 19905420.890 ops/s
Iteration   8: 19798501.279 ops/s
Iteration   9: 19875683.880 ops/s
Iteration  10: 19951834.885 ops/s
Iteration  11: 19936587.969 ops/s
Iteration  12: 19833571.110 ops/s
Iteration  13: 19886488.631 ops/s
Iteration  14: 19852403.453 ops/s
Iteration  15: 19844567.249 ops/s
Iteration  16: 19879887.414 ops/s
Iteration  17: 19896108.769 ops/s
Iteration  18: 19902136.436 ops/s
Iteration  19: 19871853.149 ops/s
Iteration  20: 19904732.053 ops/s
Iteration  21: 19869149.572 ops/s
Iteration  22: 19908514.067 ops/s
Iteration  23: 19871537.837 ops/s
Iteration  24: 19831896.877 ops/s
Iteration  25: 19981399.186 ops/s
Iteration  26: 19872651.146 ops/s
Iteration  27: 19852933.014 ops/s
Iteration  28: 19979004.075 ops/s
Iteration  29: 19921509.596 ops/s
Iteration  30: 19820138.240 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_noneSatisfy":
  19897560.379 ±(99.9%) 34707.984 ops/s [Average]
  (min, avg, max) = (19798501.279, 19897560.379, 20003460.141), stdev = 51949.280
  CI (99.9%): [19862852.396, 19932268.363] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score       Error  Units
ImmutableBooleanEmptyListTest._Benchmark.benchmark_noneSatisfy  thrpt   30  19897560.379 ± 34707.984  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_notEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_notEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 170125894.648 ops/s
# Warmup Iteration   2: 298866194.158 ops/s
# Warmup Iteration   3: 276449167.151 ops/s
# Warmup Iteration   4: 314218610.453 ops/s
# Warmup Iteration   5: 312671143.231 ops/s
# Warmup Iteration   6: 312860319.943 ops/s
# Warmup Iteration   7: 314728960.322 ops/s
# Warmup Iteration   8: 313580445.782 ops/s
# Warmup Iteration   9: 313535117.802 ops/s
# Warmup Iteration  10: 313440662.619 ops/s
# Warmup Iteration  11: 313306162.003 ops/s
# Warmup Iteration  12: 314359765.115 ops/s
# Warmup Iteration  13: 313329339.457 ops/s
# Warmup Iteration  14: 314333565.719 ops/s
# Warmup Iteration  15: 314273849.076 ops/s
# Warmup Iteration  16: 313485185.732 ops/s
# Warmup Iteration  17: 313941583.603 ops/s
# Warmup Iteration  18: 313355080.233 ops/s
# Warmup Iteration  19: 313560636.213 ops/s
# Warmup Iteration  20: 312552281.573 ops/s
# Warmup Iteration  21: 312708583.281 ops/s
# Warmup Iteration  22: 313463604.443 ops/s
# Warmup Iteration  23: 312311760.185 ops/s
# Warmup Iteration  24: 313766080.769 ops/s
# Warmup Iteration  25: 312594797.372 ops/s
# Warmup Iteration  26: 313963602.285 ops/s
# Warmup Iteration  27: 313556344.416 ops/s
# Warmup Iteration  28: 313376177.658 ops/s
# Warmup Iteration  29: 313292786.063 ops/s
# Warmup Iteration  30: 312764889.572 ops/s
Iteration   1: 311890500.023 ops/s
Iteration   2: 313151631.306 ops/s
Iteration   3: 314039535.586 ops/s
Iteration   4: 312762903.274 ops/s
Iteration   5: 314019862.671 ops/s
Iteration   6: 313977112.972 ops/s
Iteration   7: 313103205.745 ops/s
Iteration   8: 313923059.893 ops/s
Iteration   9: 312945400.089 ops/s
Iteration  10: 313255229.018 ops/s
Iteration  11: 314577663.371 ops/s
Iteration  12: 314215357.934 ops/s
Iteration  13: 312752256.331 ops/s
Iteration  14: 314299340.256 ops/s
Iteration  15: 314268357.203 ops/s
Iteration  16: 312130210.803 ops/s
Iteration  17: 313631384.764 ops/s
Iteration  18: 312128023.488 ops/s
Iteration  19: 313478517.891 ops/s
Iteration  20: 312847508.772 ops/s
Iteration  21: 313097135.464 ops/s
Iteration  22: 311404332.226 ops/s
Iteration  23: 312401250.555 ops/s
Iteration  24: 313922958.995 ops/s
Iteration  25: 313221254.416 ops/s
Iteration  26: 313410830.620 ops/s
Iteration  27: 314208796.058 ops/s
Iteration  28: 313853874.967 ops/s
Iteration  29: 313460320.311 ops/s
Iteration  30: 314428676.476 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_notEmpty":
  313360216.383 ±(99.9%) 545649.471 ops/s [Average]
  (min, avg, max) = (311404332.226, 313360216.383, 314577663.371), stdev = 816702.503
  CI (99.9%): [312814566.911, 313905865.854] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt          Score        Error  Units
ImmutableBooleanEmptyListTest._Benchmark.benchmark_notEmpty  thrpt   30  313360216.383 ± 545649.471  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_reduce$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_reduce

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5004243.190 ops/s
# Warmup Iteration   2: 10010060.009 ops/s
# Warmup Iteration   3: 8445022.953 ops/s
# Warmup Iteration   4: 9931344.908 ops/s
# Warmup Iteration   5: 9936631.654 ops/s
# Warmup Iteration   6: 9946968.351 ops/s
# Warmup Iteration   7: 9942492.409 ops/s
# Warmup Iteration   8: 9956938.082 ops/s
# Warmup Iteration   9: 9946300.885 ops/s
# Warmup Iteration  10: 9941782.920 ops/s
# Warmup Iteration  11: 9923704.659 ops/s
# Warmup Iteration  12: 9937855.118 ops/s
# Warmup Iteration  13: 9905280.897 ops/s
# Warmup Iteration  14: 9924242.883 ops/s
# Warmup Iteration  15: 9903890.893 ops/s
# Warmup Iteration  16: 9960770.785 ops/s
# Warmup Iteration  17: 9980549.084 ops/s
# Warmup Iteration  18: 9961483.416 ops/s
# Warmup Iteration  19: 9961633.673 ops/s
# Warmup Iteration  20: 9970743.151 ops/s
# Warmup Iteration  21: 9966597.203 ops/s
# Warmup Iteration  22: 9953270.854 ops/s
# Warmup Iteration  23: 9948638.412 ops/s
# Warmup Iteration  24: 9961525.110 ops/s
# Warmup Iteration  25: 9951395.101 ops/s
# Warmup Iteration  26: 9958929.059 ops/s
# Warmup Iteration  27: 9956851.195 ops/s
# Warmup Iteration  28: 9976580.805 ops/s
# Warmup Iteration  29: 9970406.041 ops/s
# Warmup Iteration  30: 9970654.589 ops/s
Iteration   1: 9970805.521 ops/s
Iteration   2: 9947242.947 ops/s
Iteration   3: 9964208.126 ops/s
Iteration   4: 9984719.628 ops/s
Iteration   5: 9958451.990 ops/s
Iteration   6: 9963501.517 ops/s
Iteration   7: 9959683.343 ops/s
Iteration   8: 9975784.885 ops/s
Iteration   9: 9970228.998 ops/s
Iteration  10: 9972989.356 ops/s
Iteration  11: 10006070.234 ops/s
Iteration  12: 9969782.452 ops/s
Iteration  13: 9915423.434 ops/s
Iteration  14: 9959762.826 ops/s
Iteration  15: 9973516.814 ops/s
Iteration  16: 9934306.259 ops/s
Iteration  17: 9943632.727 ops/s
Iteration  18: 9975205.658 ops/s
Iteration  19: 9963257.532 ops/s
Iteration  20: 9951532.598 ops/s
Iteration  21: 9928267.727 ops/s
Iteration  22: 9999431.822 ops/s
Iteration  23: 9951958.389 ops/s
Iteration  24: 9967908.466 ops/s
Iteration  25: 9953680.513 ops/s
Iteration  26: 10001497.310 ops/s
Iteration  27: 9932039.247 ops/s
Iteration  28: 9947360.440 ops/s
Iteration  29: 9936892.927 ops/s
Iteration  30: 9986309.116 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_reduce":
  9962181.760 ±(99.9%) 14442.285 ops/s [Average]
  (min, avg, max) = (9915423.434, 9962181.760, 10006070.234), stdev = 21616.534
  CI (99.9%): [9947739.475, 9976624.045] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
ImmutableBooleanEmptyListTest._Benchmark.benchmark_reduce  thrpt   30  9962181.760 ± 14442.285  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_reduceIfEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_reduceIfEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4961599.148 ops/s
# Warmup Iteration   2: 9929494.625 ops/s
# Warmup Iteration   3: 8401653.825 ops/s
# Warmup Iteration   4: 9937911.384 ops/s
# Warmup Iteration   5: 9971465.389 ops/s
# Warmup Iteration   6: 9964934.131 ops/s
# Warmup Iteration   7: 9946277.596 ops/s
# Warmup Iteration   8: 9957305.955 ops/s
# Warmup Iteration   9: 9972361.953 ops/s
# Warmup Iteration  10: 9924793.196 ops/s
# Warmup Iteration  11: 9954592.719 ops/s
# Warmup Iteration  12: 9952240.913 ops/s
# Warmup Iteration  13: 9912005.466 ops/s
# Warmup Iteration  14: 9973023.566 ops/s
# Warmup Iteration  15: 9944226.462 ops/s
# Warmup Iteration  16: 9950785.439 ops/s
# Warmup Iteration  17: 9968962.140 ops/s
# Warmup Iteration  18: 9963452.759 ops/s
# Warmup Iteration  19: 9974644.928 ops/s
# Warmup Iteration  20: 9952858.222 ops/s
# Warmup Iteration  21: 9986706.160 ops/s
# Warmup Iteration  22: 9962682.235 ops/s
# Warmup Iteration  23: 9981133.069 ops/s
# Warmup Iteration  24: 9955504.797 ops/s
# Warmup Iteration  25: 9980817.701 ops/s
# Warmup Iteration  26: 9961562.699 ops/s
# Warmup Iteration  27: 9958986.428 ops/s
# Warmup Iteration  28: 9946682.949 ops/s
# Warmup Iteration  29: 9942910.637 ops/s
# Warmup Iteration  30: 9943337.549 ops/s
Iteration   1: 9966844.394 ops/s
Iteration   2: 9968358.741 ops/s
Iteration   3: 9994001.202 ops/s
Iteration   4: 10006232.867 ops/s
Iteration   5: 9961272.462 ops/s
Iteration   6: 9982020.148 ops/s
Iteration   7: 9972510.774 ops/s
Iteration   8: 9992358.517 ops/s
Iteration   9: 9969633.043 ops/s
Iteration  10: 9931094.178 ops/s
Iteration  11: 9974864.135 ops/s
Iteration  12: 9939373.300 ops/s
Iteration  13: 9979616.115 ops/s
Iteration  14: 9964972.956 ops/s
Iteration  15: 9983528.065 ops/s
Iteration  16: 9923321.686 ops/s
Iteration  17: 9967700.631 ops/s
Iteration  18: 9926937.957 ops/s
Iteration  19: 9978222.683 ops/s
Iteration  20: 9956878.812 ops/s
Iteration  21: 9930852.482 ops/s
Iteration  22: 9989759.473 ops/s
Iteration  23: 9973393.815 ops/s
Iteration  24: 9993513.336 ops/s
Iteration  25: 9979148.855 ops/s
Iteration  26: 9988433.928 ops/s
Iteration  27: 9983903.336 ops/s
Iteration  28: 9923775.416 ops/s
Iteration  29: 9981143.126 ops/s
Iteration  30: 9972847.921 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_reduceIfEmpty":
  9968550.478 ±(99.9%) 15191.304 ops/s [Average]
  (min, avg, max) = (9923321.686, 9968550.478, 10006232.867), stdev = 22737.630
  CI (99.9%): [9953359.175, 9983741.782] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
ImmutableBooleanEmptyListTest._Benchmark.benchmark_reduceIfEmpty  thrpt   30  9968550.478 ± 15191.304  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_reduceOnEmptyThrows$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_reduceOnEmptyThrows

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 832950.720 ops/s
# Warmup Iteration   2: 836341.295 ops/s
# Warmup Iteration   3: 1037774.450 ops/s
# Warmup Iteration   4: 1092547.226 ops/s
# Warmup Iteration   5: 1090910.558 ops/s
# Warmup Iteration   6: 1091558.327 ops/s
# Warmup Iteration   7: 1091588.100 ops/s
# Warmup Iteration   8: 1091896.726 ops/s
# Warmup Iteration   9: 1093567.314 ops/s
# Warmup Iteration  10: 1091478.471 ops/s
# Warmup Iteration  11: 1091112.080 ops/s
# Warmup Iteration  12: 1095116.379 ops/s
# Warmup Iteration  13: 921015.261 ops/s
# Warmup Iteration  14: 1089108.724 ops/s
# Warmup Iteration  15: 1088530.381 ops/s
# Warmup Iteration  16: 1091357.536 ops/s
# Warmup Iteration  17: 1158487.124 ops/s
# Warmup Iteration  18: 1157297.910 ops/s
# Warmup Iteration  19: 1155939.316 ops/s
# Warmup Iteration  20: 1159306.002 ops/s
# Warmup Iteration  21: 1159591.776 ops/s
# Warmup Iteration  22: 1159713.689 ops/s
# Warmup Iteration  23: 1159107.764 ops/s
# Warmup Iteration  24: 1159767.862 ops/s
# Warmup Iteration  25: 1159118.392 ops/s
# Warmup Iteration  26: 1158776.747 ops/s
# Warmup Iteration  27: 1156938.333 ops/s
# Warmup Iteration  28: 1157167.053 ops/s
# Warmup Iteration  29: 1158812.810 ops/s
# Warmup Iteration  30: 1158512.849 ops/s
Iteration   1: 1159870.075 ops/s
Iteration   2: 1162064.616 ops/s
Iteration   3: 1155236.415 ops/s
Iteration   4: 1157124.062 ops/s
Iteration   5: 1157872.391 ops/s
Iteration   6: 1157381.119 ops/s
Iteration   7: 1157157.174 ops/s
Iteration   8: 1157434.611 ops/s
Iteration   9: 1157073.877 ops/s
Iteration  10: 1156101.578 ops/s
Iteration  11: 1159113.252 ops/s
Iteration  12: 1158284.864 ops/s
Iteration  13: 1153664.057 ops/s
Iteration  14: 1157189.009 ops/s
Iteration  15: 1156414.455 ops/s
Iteration  16: 1158426.969 ops/s
Iteration  17: 1153819.441 ops/s
Iteration  18: 1151660.008 ops/s
Iteration  19: 1159561.136 ops/s
Iteration  20: 1160107.453 ops/s
Iteration  21: 1158585.854 ops/s
Iteration  22: 1156835.667 ops/s
Iteration  23: 1160317.298 ops/s
Iteration  24: 1154158.328 ops/s
Iteration  25: 1154696.918 ops/s
Iteration  26: 1153754.276 ops/s
Iteration  27: 1156253.908 ops/s
Iteration  28: 1155306.260 ops/s
Iteration  29: 1158739.155 ops/s
Iteration  30: 1158003.118 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_reduceOnEmptyThrows":
  1157073.578 ±(99.9%) 1560.501 ops/s [Average]
  (min, avg, max) = (1151660.008, 1157073.578, 1162064.616), stdev = 2335.685
  CI (99.9%): [1155513.077, 1158634.080] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
ImmutableBooleanEmptyListTest._Benchmark.benchmark_reduceOnEmptyThrows  thrpt   30  1157073.578 ± 1560.501  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1821584.295 ops/s
# Warmup Iteration   2: 4247241.042 ops/s
# Warmup Iteration   3: 3506839.498 ops/s
# Warmup Iteration   4: 4242539.997 ops/s
# Warmup Iteration   5: 4262616.870 ops/s
# Warmup Iteration   6: 4254987.581 ops/s
# Warmup Iteration   7: 4259967.993 ops/s
# Warmup Iteration   8: 4260768.476 ops/s
# Warmup Iteration   9: 4258958.914 ops/s
# Warmup Iteration  10: 4256856.708 ops/s
# Warmup Iteration  11: 4262105.534 ops/s
# Warmup Iteration  12: 4260513.298 ops/s
# Warmup Iteration  13: 4257718.970 ops/s
# Warmup Iteration  14: 4261170.375 ops/s
# Warmup Iteration  15: 4261255.502 ops/s
# Warmup Iteration  16: 4266782.119 ops/s
# Warmup Iteration  17: 4268226.758 ops/s
# Warmup Iteration  18: 4256330.271 ops/s
# Warmup Iteration  19: 4268237.901 ops/s
# Warmup Iteration  20: 4270065.925 ops/s
# Warmup Iteration  21: 4259175.593 ops/s
# Warmup Iteration  22: 4264539.512 ops/s
# Warmup Iteration  23: 4268749.156 ops/s
# Warmup Iteration  24: 4266182.898 ops/s
# Warmup Iteration  25: 4266077.530 ops/s
# Warmup Iteration  26: 4259691.540 ops/s
# Warmup Iteration  27: 4262444.471 ops/s
# Warmup Iteration  28: 4243154.563 ops/s
# Warmup Iteration  29: 4261360.155 ops/s
# Warmup Iteration  30: 4240525.603 ops/s
Iteration   1: 4245981.466 ops/s
Iteration   2: 4270031.177 ops/s
Iteration   3: 4263438.245 ops/s
Iteration   4: 4246165.263 ops/s
Iteration   5: 4267035.280 ops/s
Iteration   6: 4255441.813 ops/s
Iteration   7: 4248556.032 ops/s
Iteration   8: 4261416.847 ops/s
Iteration   9: 4264790.568 ops/s
Iteration  10: 4255140.771 ops/s
Iteration  11: 4260732.906 ops/s
Iteration  12: 4268777.779 ops/s
Iteration  13: 4255954.674 ops/s
Iteration  14: 4241935.953 ops/s
Iteration  15: 4266064.529 ops/s
Iteration  16: 4254915.465 ops/s
Iteration  17: 4265438.436 ops/s
Iteration  18: 4271897.733 ops/s
Iteration  19: 4253087.761 ops/s
Iteration  20: 4266433.160 ops/s
Iteration  21: 4262775.055 ops/s
Iteration  22: 4257720.604 ops/s
Iteration  23: 4261951.110 ops/s
Iteration  24: 4260962.519 ops/s
Iteration  25: 4274155.743 ops/s
Iteration  26: 4273749.566 ops/s
Iteration  27: 4271945.907 ops/s
Iteration  28: 4252250.293 ops/s
Iteration  29: 4267109.152 ops/s
Iteration  30: 4278184.578 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_reject":
  4261468.013 ±(99.9%) 6102.905 ops/s [Average]
  (min, avg, max) = (4241935.953, 4261468.013, 4278184.578), stdev = 9134.541
  CI (99.9%): [4255365.108, 4267570.918] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableBooleanEmptyListTest._Benchmark.benchmark_reject  thrpt   30  4261468.013 ± 6102.905  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1780368.240 ops/s
# Warmup Iteration   2: 4109131.208 ops/s
# Warmup Iteration   3: 3412687.763 ops/s
# Warmup Iteration   4: 4127900.102 ops/s
# Warmup Iteration   5: 4122603.856 ops/s
# Warmup Iteration   6: 4111494.661 ops/s
# Warmup Iteration   7: 4130158.532 ops/s
# Warmup Iteration   8: 4124721.573 ops/s
# Warmup Iteration   9: 4129547.944 ops/s
# Warmup Iteration  10: 4127032.138 ops/s
# Warmup Iteration  11: 4111258.054 ops/s
# Warmup Iteration  12: 4124884.466 ops/s
# Warmup Iteration  13: 4117054.505 ops/s
# Warmup Iteration  14: 4128444.282 ops/s
# Warmup Iteration  15: 4124854.044 ops/s
# Warmup Iteration  16: 4120455.338 ops/s
# Warmup Iteration  17: 4131769.108 ops/s
# Warmup Iteration  18: 4125916.048 ops/s
# Warmup Iteration  19: 4128352.797 ops/s
# Warmup Iteration  20: 4130439.685 ops/s
# Warmup Iteration  21: 4130519.497 ops/s
# Warmup Iteration  22: 4132531.508 ops/s
# Warmup Iteration  23: 4128878.807 ops/s
# Warmup Iteration  24: 4129481.131 ops/s
# Warmup Iteration  25: 4127502.841 ops/s
# Warmup Iteration  26: 4126295.088 ops/s
# Warmup Iteration  27: 4122168.673 ops/s
# Warmup Iteration  28: 4110466.502 ops/s
# Warmup Iteration  29: 4124715.481 ops/s
# Warmup Iteration  30: 4128372.521 ops/s
Iteration   1: 4130840.224 ops/s
Iteration   2: 4128603.609 ops/s
Iteration   3: 4122651.856 ops/s
Iteration   4: 4130480.058 ops/s
Iteration   5: 4134855.620 ops/s
Iteration   6: 4129451.472 ops/s
Iteration   7: 4127872.499 ops/s
Iteration   8: 4121422.034 ops/s
Iteration   9: 4111174.192 ops/s
Iteration  10: 4123530.465 ops/s
Iteration  11: 4127995.174 ops/s
Iteration  12: 4136197.117 ops/s
Iteration  13: 4125046.779 ops/s
Iteration  14: 4133346.461 ops/s
Iteration  15: 4127410.166 ops/s
Iteration  16: 4130665.645 ops/s
Iteration  17: 4128518.186 ops/s
Iteration  18: 4132801.969 ops/s
Iteration  19: 4131102.096 ops/s
Iteration  20: 4124762.971 ops/s
Iteration  21: 4127888.769 ops/s
Iteration  22: 4132942.371 ops/s
Iteration  23: 4120286.891 ops/s
Iteration  24: 4114468.390 ops/s
Iteration  25: 4120896.223 ops/s
Iteration  26: 4121357.635 ops/s
Iteration  27: 4116427.805 ops/s
Iteration  28: 4128606.555 ops/s
Iteration  29: 4132369.820 ops/s
Iteration  30: 4121639.755 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_select":
  4126520.427 ±(99.9%) 4084.412 ops/s [Average]
  (min, avg, max) = (4111174.192, 4126520.427, 4136197.117), stdev = 6113.356
  CI (99.9%): [4122436.015, 4130604.839] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableBooleanEmptyListTest._Benchmark.benchmark_select  thrpt   30  4126520.427 ± 4084.412  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6848662.897 ops/s
# Warmup Iteration   2: 10907148.538 ops/s
# Warmup Iteration   3: 12747122.539 ops/s
# Warmup Iteration   4: 12787762.504 ops/s
# Warmup Iteration   5: 12738933.327 ops/s
# Warmup Iteration   6: 12746089.551 ops/s
# Warmup Iteration   7: 12699379.900 ops/s
# Warmup Iteration   8: 12768125.692 ops/s
# Warmup Iteration   9: 12788637.852 ops/s
# Warmup Iteration  10: 12750922.574 ops/s
# Warmup Iteration  11: 12763311.685 ops/s
# Warmup Iteration  12: 12728332.659 ops/s
# Warmup Iteration  13: 12747150.378 ops/s
# Warmup Iteration  14: 12717631.124 ops/s
# Warmup Iteration  15: 12716001.690 ops/s
# Warmup Iteration  16: 12757488.666 ops/s
# Warmup Iteration  17: 12721023.122 ops/s
# Warmup Iteration  18: 12689422.125 ops/s
# Warmup Iteration  19: 12714052.797 ops/s
# Warmup Iteration  20: 12743553.328 ops/s
# Warmup Iteration  21: 12744405.505 ops/s
# Warmup Iteration  22: 12740104.842 ops/s
# Warmup Iteration  23: 12798218.507 ops/s
# Warmup Iteration  24: 12782838.761 ops/s
# Warmup Iteration  25: 12740906.293 ops/s
# Warmup Iteration  26: 12717824.152 ops/s
# Warmup Iteration  27: 12667851.570 ops/s
# Warmup Iteration  28: 12760313.013 ops/s
# Warmup Iteration  29: 12716461.186 ops/s
# Warmup Iteration  30: 12796072.813 ops/s
Iteration   1: 12733809.718 ops/s
Iteration   2: 12690784.869 ops/s
Iteration   3: 12761779.839 ops/s
Iteration   4: 12688087.996 ops/s
Iteration   5: 12777038.242 ops/s
Iteration   6: 12741313.953 ops/s
Iteration   7: 12737973.087 ops/s
Iteration   8: 12727167.435 ops/s
Iteration   9: 12789332.270 ops/s
Iteration  10: 12763187.701 ops/s
Iteration  11: 12787897.827 ops/s
Iteration  12: 12708060.733 ops/s
Iteration  13: 12786859.145 ops/s
Iteration  14: 12707926.836 ops/s
Iteration  15: 12751452.838 ops/s
Iteration  16: 12739355.998 ops/s
Iteration  17: 12665647.652 ops/s
Iteration  18: 12748930.056 ops/s
Iteration  19: 12685486.918 ops/s
Iteration  20: 12797801.456 ops/s
Iteration  21: 12748531.747 ops/s
Iteration  22: 12687680.912 ops/s
Iteration  23: 12737920.405 ops/s
Iteration  24: 12749162.859 ops/s
Iteration  25: 12735127.518 ops/s
Iteration  26: 12773027.958 ops/s
Iteration  27: 12711676.949 ops/s
Iteration  28: 12748410.557 ops/s
Iteration  29: 12798584.415 ops/s
Iteration  30: 12684563.181 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_size":
  12738819.369 ±(99.9%) 24839.086 ops/s [Average]
  (min, avg, max) = (12665647.652, 12738819.369, 12798584.415), stdev = 37177.977
  CI (99.9%): [12713980.283, 12763658.455] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
ImmutableBooleanEmptyListTest._Benchmark.benchmark_size  thrpt   30  12738819.369 ± 24839.086  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_subList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_subList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 878095.217 ops/s
# Warmup Iteration   2: 885189.807 ops/s
# Warmup Iteration   3: 1051460.116 ops/s
# Warmup Iteration   4: 1114755.544 ops/s
# Warmup Iteration   5: 1119792.175 ops/s
# Warmup Iteration   6: 1116098.454 ops/s
# Warmup Iteration   7: 1116016.185 ops/s
# Warmup Iteration   8: 1115741.779 ops/s
# Warmup Iteration   9: 1115161.144 ops/s
# Warmup Iteration  10: 1117224.108 ops/s
# Warmup Iteration  11: 1119916.898 ops/s
# Warmup Iteration  12: 1115395.844 ops/s
# Warmup Iteration  13: 1088961.325 ops/s
# Warmup Iteration  14: 966116.665 ops/s
# Warmup Iteration  15: 1117012.081 ops/s
# Warmup Iteration  16: 1117854.429 ops/s
# Warmup Iteration  17: 1180691.195 ops/s
# Warmup Iteration  18: 1183309.731 ops/s
# Warmup Iteration  19: 1180856.116 ops/s
# Warmup Iteration  20: 1182906.805 ops/s
# Warmup Iteration  21: 1179107.861 ops/s
# Warmup Iteration  22: 1179527.055 ops/s
# Warmup Iteration  23: 1182389.162 ops/s
# Warmup Iteration  24: 1185173.906 ops/s
# Warmup Iteration  25: 1182440.029 ops/s
# Warmup Iteration  26: 1181220.124 ops/s
# Warmup Iteration  27: 1179401.372 ops/s
# Warmup Iteration  28: 1182753.637 ops/s
# Warmup Iteration  29: 1184367.906 ops/s
# Warmup Iteration  30: 1179799.754 ops/s
Iteration   1: 1183475.946 ops/s
Iteration   2: 1183671.735 ops/s
Iteration   3: 1183054.790 ops/s
Iteration   4: 1181458.605 ops/s
Iteration   5: 1184677.363 ops/s
Iteration   6: 1183217.116 ops/s
Iteration   7: 1181584.249 ops/s
Iteration   8: 1182816.719 ops/s
Iteration   9: 1177521.309 ops/s
Iteration  10: 1181417.720 ops/s
Iteration  11: 1181123.677 ops/s
Iteration  12: 1184961.253 ops/s
Iteration  13: 1181284.273 ops/s
Iteration  14: 1182822.326 ops/s
Iteration  15: 1183400.629 ops/s
Iteration  16: 1181990.570 ops/s
Iteration  17: 1183038.311 ops/s
Iteration  18: 1182465.699 ops/s
Iteration  19: 1181303.484 ops/s
Iteration  20: 1180818.402 ops/s
Iteration  21: 1180505.702 ops/s
Iteration  22: 1180945.679 ops/s
Iteration  23: 1180303.304 ops/s
Iteration  24: 1179599.929 ops/s
Iteration  25: 1180430.290 ops/s
Iteration  26: 1183416.890 ops/s
Iteration  27: 1181135.781 ops/s
Iteration  28: 1181845.528 ops/s
Iteration  29: 1184376.232 ops/s
Iteration  30: 1184374.313 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_subList":
  1182101.261 ±(99.9%) 1111.974 ops/s [Average]
  (min, avg, max) = (1177521.309, 1182101.261, 1184961.253), stdev = 1664.350
  CI (99.9%): [1180989.287, 1183213.235] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableBooleanEmptyListTest._Benchmark.benchmark_subList  thrpt   30  1182101.261 ± 1111.974  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_testEquals$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_testEquals

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 118873.839 ops/s
# Warmup Iteration   2: 209068.604 ops/s
# Warmup Iteration   3: 236551.257 ops/s
# Warmup Iteration   4: 235374.472 ops/s
# Warmup Iteration   5: 224705.552 ops/s
# Warmup Iteration   6: 217334.693 ops/s
# Warmup Iteration   7: 237361.500 ops/s
# Warmup Iteration   8: 238131.547 ops/s
# Warmup Iteration   9: 237024.974 ops/s
# Warmup Iteration  10: 237923.764 ops/s
# Warmup Iteration  11: 237900.083 ops/s
# Warmup Iteration  12: 237355.719 ops/s
# Warmup Iteration  13: 237964.204 ops/s
# Warmup Iteration  14: 237959.828 ops/s
# Warmup Iteration  15: 237458.327 ops/s
# Warmup Iteration  16: 237890.357 ops/s
# Warmup Iteration  17: 237115.202 ops/s
# Warmup Iteration  18: 237690.050 ops/s
# Warmup Iteration  19: 238830.417 ops/s
# Warmup Iteration  20: 237524.560 ops/s
# Warmup Iteration  21: 237502.895 ops/s
# Warmup Iteration  22: 236245.070 ops/s
# Warmup Iteration  23: 238137.226 ops/s
# Warmup Iteration  24: 236064.659 ops/s
# Warmup Iteration  25: 237200.500 ops/s
# Warmup Iteration  26: 237703.144 ops/s
# Warmup Iteration  27: 237566.375 ops/s
# Warmup Iteration  28: 237854.914 ops/s
# Warmup Iteration  29: 236130.058 ops/s
# Warmup Iteration  30: 238641.974 ops/s
Iteration   1: 236918.623 ops/s
Iteration   2: 237888.358 ops/s
Iteration   3: 238267.569 ops/s
Iteration   4: 238811.969 ops/s
Iteration   5: 238090.893 ops/s
Iteration   6: 236698.939 ops/s
Iteration   7: 238631.776 ops/s
Iteration   8: 239125.641 ops/s
Iteration   9: 238443.418 ops/s
Iteration  10: 237824.945 ops/s
Iteration  11: 236679.079 ops/s
Iteration  12: 237115.463 ops/s
Iteration  13: 238588.033 ops/s
Iteration  14: 238176.526 ops/s
Iteration  15: 237435.446 ops/s
Iteration  16: 238376.126 ops/s
Iteration  17: 239250.924 ops/s
Iteration  18: 236833.059 ops/s
Iteration  19: 238099.342 ops/s
Iteration  20: 239348.582 ops/s
Iteration  21: 238675.220 ops/s
Iteration  22: 237348.370 ops/s
Iteration  23: 238725.708 ops/s
Iteration  24: 238526.971 ops/s
Iteration  25: 238679.339 ops/s
Iteration  26: 238454.426 ops/s
Iteration  27: 236327.974 ops/s
Iteration  28: 237867.414 ops/s
Iteration  29: 238527.564 ops/s
Iteration  30: 237171.613 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_testEquals":
  238030.310 ±(99.9%) 551.077 ops/s [Average]
  (min, avg, max) = (236327.974, 238030.310, 239348.582), stdev = 824.827
  CI (99.9%): [237479.233, 238581.388] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score     Error  Units
ImmutableBooleanEmptyListTest._Benchmark.benchmark_testEquals  thrpt   30  238030.310 ± 551.077  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_testHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_testHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5681702.627 ops/s
# Warmup Iteration   2: 11952959.914 ops/s
# Warmup Iteration   3: 9621779.267 ops/s
# Warmup Iteration   4: 11466784.036 ops/s
# Warmup Iteration   5: 11463812.702 ops/s
# Warmup Iteration   6: 11455881.172 ops/s
# Warmup Iteration   7: 11466474.585 ops/s
# Warmup Iteration   8: 11441555.889 ops/s
# Warmup Iteration   9: 11463421.379 ops/s
# Warmup Iteration  10: 11475112.655 ops/s
# Warmup Iteration  11: 11468092.067 ops/s
# Warmup Iteration  12: 11440949.386 ops/s
# Warmup Iteration  13: 11486975.215 ops/s
# Warmup Iteration  14: 11464070.191 ops/s
# Warmup Iteration  15: 11437891.421 ops/s
# Warmup Iteration  16: 11459466.929 ops/s
# Warmup Iteration  17: 11459149.747 ops/s
# Warmup Iteration  18: 11456676.018 ops/s
# Warmup Iteration  19: 11464647.767 ops/s
# Warmup Iteration  20: 11499583.183 ops/s
# Warmup Iteration  21: 11456786.371 ops/s
# Warmup Iteration  22: 11439341.756 ops/s
# Warmup Iteration  23: 11478919.380 ops/s
# Warmup Iteration  24: 11467332.128 ops/s
# Warmup Iteration  25: 11452148.435 ops/s
# Warmup Iteration  26: 11476562.903 ops/s
# Warmup Iteration  27: 11474487.244 ops/s
# Warmup Iteration  28: 11478274.051 ops/s
# Warmup Iteration  29: 11478883.914 ops/s
# Warmup Iteration  30: 11474244.748 ops/s
Iteration   1: 11473775.749 ops/s
Iteration   2: 11469083.469 ops/s
Iteration   3: 11469418.995 ops/s
Iteration   4: 11461453.688 ops/s
Iteration   5: 11438202.664 ops/s
Iteration   6: 11422011.589 ops/s
Iteration   7: 11425014.862 ops/s
Iteration   8: 11453818.314 ops/s
Iteration   9: 11495600.883 ops/s
Iteration  10: 11428369.492 ops/s
Iteration  11: 11493657.427 ops/s
Iteration  12: 11464120.693 ops/s
Iteration  13: 11461437.350 ops/s
Iteration  14: 11493520.825 ops/s
Iteration  15: 11472395.134 ops/s
Iteration  16: 11434610.341 ops/s
Iteration  17: 11491436.424 ops/s
Iteration  18: 11471898.954 ops/s
Iteration  19: 11434621.820 ops/s
Iteration  20: 11465888.050 ops/s
Iteration  21: 11456328.953 ops/s
Iteration  22: 11447955.999 ops/s
Iteration  23: 11482918.174 ops/s
Iteration  24: 11474032.898 ops/s
Iteration  25: 11460164.448 ops/s
Iteration  26: 11489208.171 ops/s
Iteration  27: 11469129.988 ops/s
Iteration  28: 11488022.710 ops/s
Iteration  29: 11465988.615 ops/s
Iteration  30: 11478868.348 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_testHashCode":
  11464431.834 ±(99.9%) 14199.343 ops/s [Average]
  (min, avg, max) = (11422011.589, 11464431.834, 11495600.883), stdev = 21252.910
  CI (99.9%): [11450232.491, 11478631.177] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score       Error  Units
ImmutableBooleanEmptyListTest._Benchmark.benchmark_testHashCode  thrpt   30  11464431.834 ± 14199.343  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_testNewWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_testNewWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1063529.879 ops/s
# Warmup Iteration   2: 2588878.566 ops/s
# Warmup Iteration   3: 2608417.622 ops/s
# Warmup Iteration   4: 2163704.042 ops/s
# Warmup Iteration   5: 2614287.485 ops/s
# Warmup Iteration   6: 2613815.732 ops/s
# Warmup Iteration   7: 2602468.458 ops/s
# Warmup Iteration   8: 2607726.731 ops/s
# Warmup Iteration   9: 2614179.664 ops/s
# Warmup Iteration  10: 2615378.472 ops/s
# Warmup Iteration  11: 2610858.618 ops/s
# Warmup Iteration  12: 2608730.492 ops/s
# Warmup Iteration  13: 2612045.458 ops/s
# Warmup Iteration  14: 2609445.077 ops/s
# Warmup Iteration  15: 2607718.784 ops/s
# Warmup Iteration  16: 2610698.045 ops/s
# Warmup Iteration  17: 2606679.159 ops/s
# Warmup Iteration  18: 2609019.039 ops/s
# Warmup Iteration  19: 2603986.278 ops/s
# Warmup Iteration  20: 2609254.847 ops/s
# Warmup Iteration  21: 2608289.275 ops/s
# Warmup Iteration  22: 2602022.011 ops/s
# Warmup Iteration  23: 2602876.735 ops/s
# Warmup Iteration  24: 2606898.377 ops/s
# Warmup Iteration  25: 2605942.160 ops/s
# Warmup Iteration  26: 2605588.614 ops/s
# Warmup Iteration  27: 2607464.208 ops/s
# Warmup Iteration  28: 2608925.620 ops/s
# Warmup Iteration  29: 2602684.271 ops/s
# Warmup Iteration  30: 2605694.123 ops/s
Iteration   1: 2608679.236 ops/s
Iteration   2: 2606992.036 ops/s
Iteration   3: 2606550.468 ops/s
Iteration   4: 2610221.456 ops/s
Iteration   5: 2601083.320 ops/s
Iteration   6: 2607975.808 ops/s
Iteration   7: 2609723.021 ops/s
Iteration   8: 2609784.565 ops/s
Iteration   9: 2612941.564 ops/s
Iteration  10: 2612453.335 ops/s
Iteration  11: 2605496.408 ops/s
Iteration  12: 2611998.849 ops/s
Iteration  13: 2614132.055 ops/s
Iteration  14: 2614838.740 ops/s
Iteration  15: 2607879.095 ops/s
Iteration  16: 2615175.930 ops/s
Iteration  17: 2611221.244 ops/s
Iteration  18: 2610658.694 ops/s
Iteration  19: 2616131.378 ops/s
Iteration  20: 2607420.041 ops/s
Iteration  21: 2608145.860 ops/s
Iteration  22: 2609758.079 ops/s
Iteration  23: 2611445.469 ops/s
Iteration  24: 2614764.891 ops/s
Iteration  25: 2608933.135 ops/s
Iteration  26: 2609403.067 ops/s
Iteration  27: 2607618.619 ops/s
Iteration  28: 2612650.300 ops/s
Iteration  29: 2604312.671 ops/s
Iteration  30: 2610759.701 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_testNewWith":
  2609971.635 ±(99.9%) 2283.434 ops/s [Average]
  (min, avg, max) = (2601083.320, 2609971.635, 2616131.378), stdev = 3417.737
  CI (99.9%): [2607688.200, 2612255.069] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ImmutableBooleanEmptyListTest._Benchmark.benchmark_testNewWith  thrpt   30  2609971.635 ± 2283.434  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4044759.021 ops/s
# Warmup Iteration   2: 8578999.424 ops/s
# Warmup Iteration   3: 7176648.518 ops/s
# Warmup Iteration   4: 8498971.503 ops/s
# Warmup Iteration   5: 8610048.523 ops/s
# Warmup Iteration   6: 8582726.987 ops/s
# Warmup Iteration   7: 8507125.387 ops/s
# Warmup Iteration   8: 8549237.721 ops/s
# Warmup Iteration   9: 8575072.184 ops/s
# Warmup Iteration  10: 8457385.940 ops/s
# Warmup Iteration  11: 8484338.834 ops/s
# Warmup Iteration  12: 8561495.533 ops/s
# Warmup Iteration  13: 8546023.045 ops/s
# Warmup Iteration  14: 8599521.182 ops/s
# Warmup Iteration  15: 8554532.159 ops/s
# Warmup Iteration  16: 8538379.912 ops/s
# Warmup Iteration  17: 8656387.398 ops/s
# Warmup Iteration  18: 8599890.667 ops/s
# Warmup Iteration  19: 8522311.422 ops/s
# Warmup Iteration  20: 8484317.212 ops/s
# Warmup Iteration  21: 8571824.345 ops/s
# Warmup Iteration  22: 8550074.560 ops/s
# Warmup Iteration  23: 8632145.035 ops/s
# Warmup Iteration  24: 8571124.997 ops/s
# Warmup Iteration  25: 8601290.575 ops/s
# Warmup Iteration  26: 8569348.368 ops/s
# Warmup Iteration  27: 8585776.223 ops/s
# Warmup Iteration  28: 8584248.714 ops/s
# Warmup Iteration  29: 8609962.599 ops/s
# Warmup Iteration  30: 8614282.047 ops/s
Iteration   1: 8603515.670 ops/s
Iteration   2: 8574302.634 ops/s
Iteration   3: 8623220.231 ops/s
Iteration   4: 8532472.272 ops/s
Iteration   5: 8609484.814 ops/s
Iteration   6: 8614869.356 ops/s
Iteration   7: 8545576.119 ops/s
Iteration   8: 8578344.626 ops/s
Iteration   9: 8658106.652 ops/s
Iteration  10: 8574015.706 ops/s
Iteration  11: 8541451.556 ops/s
Iteration  12: 8646923.061 ops/s
Iteration  13: 8644355.535 ops/s
Iteration  14: 8536495.402 ops/s
Iteration  15: 8369726.607 ops/s
Iteration  16: 8591214.403 ops/s
Iteration  17: 8525743.385 ops/s
Iteration  18: 8535437.920 ops/s
Iteration  19: 8603426.932 ops/s
Iteration  20: 8559923.877 ops/s
Iteration  21: 8558644.696 ops/s
Iteration  22: 8472653.856 ops/s
Iteration  23: 8529399.067 ops/s
Iteration  24: 8553476.410 ops/s
Iteration  25: 8553454.053 ops/s
Iteration  26: 8606666.162 ops/s
Iteration  27: 8525605.374 ops/s
Iteration  28: 8643607.286 ops/s
Iteration  29: 8616763.311 ops/s
Iteration  30: 8612873.236 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_testToString":
  8571391.674 ±(99.9%) 39275.197 ops/s [Average]
  (min, avg, max) = (8369726.607, 8571391.674, 8658106.652), stdev = 58785.271
  CI (99.9%): [8532116.477, 8610666.871] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
ImmutableBooleanEmptyListTest._Benchmark.benchmark_testToString  thrpt   30  8571391.674 ± 39275.197  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7265247.684 ops/s
# Warmup Iteration   2: 16163984.207 ops/s
# Warmup Iteration   3: 13731284.631 ops/s
# Warmup Iteration   4: 16725266.769 ops/s
# Warmup Iteration   5: 16649892.660 ops/s
# Warmup Iteration   6: 16717933.827 ops/s
# Warmup Iteration   7: 16716221.352 ops/s
# Warmup Iteration   8: 16701370.677 ops/s
# Warmup Iteration   9: 16711257.708 ops/s
# Warmup Iteration  10: 16729907.437 ops/s
# Warmup Iteration  11: 16705960.740 ops/s
# Warmup Iteration  12: 16706144.385 ops/s
# Warmup Iteration  13: 16708773.945 ops/s
# Warmup Iteration  14: 16716639.188 ops/s
# Warmup Iteration  15: 16650483.011 ops/s
# Warmup Iteration  16: 16710561.758 ops/s
# Warmup Iteration  17: 16714762.290 ops/s
# Warmup Iteration  18: 16692193.582 ops/s
# Warmup Iteration  19: 16688498.085 ops/s
# Warmup Iteration  20: 16688270.307 ops/s
# Warmup Iteration  21: 16708664.033 ops/s
# Warmup Iteration  22: 16703712.636 ops/s
# Warmup Iteration  23: 16714846.268 ops/s
# Warmup Iteration  24: 16696914.674 ops/s
# Warmup Iteration  25: 16681422.447 ops/s
# Warmup Iteration  26: 16710499.988 ops/s
# Warmup Iteration  27: 16688971.070 ops/s
# Warmup Iteration  28: 16703252.954 ops/s
# Warmup Iteration  29: 16709370.840 ops/s
# Warmup Iteration  30: 16696942.437 ops/s
Iteration   1: 16721706.303 ops/s
Iteration   2: 16673027.940 ops/s
Iteration   3: 16726324.187 ops/s
Iteration   4: 16716617.802 ops/s
Iteration   5: 16698588.433 ops/s
Iteration   6: 16691604.022 ops/s
Iteration   7: 16674444.000 ops/s
Iteration   8: 16737950.699 ops/s
Iteration   9: 16632646.312 ops/s
Iteration  10: 16695787.073 ops/s
Iteration  11: 16682753.707 ops/s
Iteration  12: 16687282.477 ops/s
Iteration  13: 16680770.352 ops/s
Iteration  14: 16706565.000 ops/s
Iteration  15: 16643454.818 ops/s
Iteration  16: 16714760.506 ops/s
Iteration  17: 16696828.460 ops/s
Iteration  18: 16706609.390 ops/s
Iteration  19: 16679817.293 ops/s
Iteration  20: 16754499.172 ops/s
Iteration  21: 16680371.892 ops/s
Iteration  22: 16739713.713 ops/s
Iteration  23: 16704225.178 ops/s
Iteration  24: 16723114.498 ops/s
Iteration  25: 16664255.711 ops/s
Iteration  26: 16741324.921 ops/s
Iteration  27: 16701518.958 ops/s
Iteration  28: 16694973.222 ops/s
Iteration  29: 16697789.199 ops/s
Iteration  30: 16788814.561 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_toArray":
  16701937.993 ±(99.9%) 21458.016 ops/s [Average]
  (min, avg, max) = (16632646.312, 16701937.993, 16788814.561), stdev = 32117.351
  CI (99.9%): [16680479.977, 16723396.009] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
ImmutableBooleanEmptyListTest._Benchmark.benchmark_toArray  thrpt   30  16701937.993 ± 21458.016  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_toBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_toBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4196653.281 ops/s
# Warmup Iteration   2: 9129549.037 ops/s
# Warmup Iteration   3: 9376571.569 ops/s
# Warmup Iteration   4: 7791437.804 ops/s
# Warmup Iteration   5: 9360752.083 ops/s
# Warmup Iteration   6: 9363893.548 ops/s
# Warmup Iteration   7: 9351384.899 ops/s
# Warmup Iteration   8: 9377716.950 ops/s
# Warmup Iteration   9: 9379894.156 ops/s
# Warmup Iteration  10: 9390318.960 ops/s
# Warmup Iteration  11: 9397196.723 ops/s
# Warmup Iteration  12: 9367197.127 ops/s
# Warmup Iteration  13: 9366904.098 ops/s
# Warmup Iteration  14: 9376875.983 ops/s
# Warmup Iteration  15: 9352620.153 ops/s
# Warmup Iteration  16: 9376220.831 ops/s
# Warmup Iteration  17: 9369682.460 ops/s
# Warmup Iteration  18: 9385070.927 ops/s
# Warmup Iteration  19: 9388960.586 ops/s
# Warmup Iteration  20: 9400606.744 ops/s
# Warmup Iteration  21: 9368967.143 ops/s
# Warmup Iteration  22: 9368621.303 ops/s
# Warmup Iteration  23: 9406833.297 ops/s
# Warmup Iteration  24: 9302841.645 ops/s
# Warmup Iteration  25: 9380403.726 ops/s
# Warmup Iteration  26: 9383898.995 ops/s
# Warmup Iteration  27: 9372367.551 ops/s
# Warmup Iteration  28: 9377241.645 ops/s
# Warmup Iteration  29: 9378729.867 ops/s
# Warmup Iteration  30: 9384018.461 ops/s
Iteration   1: 9387686.963 ops/s
Iteration   2: 9361386.715 ops/s
Iteration   3: 9393032.889 ops/s
Iteration   4: 9388423.105 ops/s
Iteration   5: 9377004.345 ops/s
Iteration   6: 9368613.498 ops/s
Iteration   7: 9399470.943 ops/s
Iteration   8: 9385299.469 ops/s
Iteration   9: 9415584.926 ops/s
Iteration  10: 9354830.590 ops/s
Iteration  11: 9373089.623 ops/s
Iteration  12: 9382582.867 ops/s
Iteration  13: 9378055.815 ops/s
Iteration  14: 9400965.984 ops/s
Iteration  15: 9348666.358 ops/s
Iteration  16: 9367648.394 ops/s
Iteration  17: 9406436.571 ops/s
Iteration  18: 9365913.974 ops/s
Iteration  19: 9393454.294 ops/s
Iteration  20: 9382198.891 ops/s
Iteration  21: 9363281.893 ops/s
Iteration  22: 9383480.997 ops/s
Iteration  23: 9395287.537 ops/s
Iteration  24: 9367959.584 ops/s
Iteration  25: 9395479.567 ops/s
Iteration  26: 9414337.407 ops/s
Iteration  27: 9397994.876 ops/s
Iteration  28: 9404783.040 ops/s
Iteration  29: 9395493.797 ops/s
Iteration  30: 9408609.791 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_toBag":
  9385235.157 ±(99.9%) 11815.966 ops/s [Average]
  (min, avg, max) = (9348666.358, 9385235.157, 9415584.926), stdev = 17685.582
  CI (99.9%): [9373419.191, 9397051.122] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
ImmutableBooleanEmptyListTest._Benchmark.benchmark_toBag  thrpt   30  9385235.157 ± 11815.966  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2422177.390 ops/s
# Warmup Iteration   2: 5212801.554 ops/s
# Warmup Iteration   3: 4377384.684 ops/s
# Warmup Iteration   4: 5230633.638 ops/s
# Warmup Iteration   5: 5229443.954 ops/s
# Warmup Iteration   6: 5208483.203 ops/s
# Warmup Iteration   7: 5218946.076 ops/s
# Warmup Iteration   8: 5239225.429 ops/s
# Warmup Iteration   9: 5224685.953 ops/s
# Warmup Iteration  10: 5223250.307 ops/s
# Warmup Iteration  11: 5228198.336 ops/s
# Warmup Iteration  12: 5228129.248 ops/s
# Warmup Iteration  13: 5225242.163 ops/s
# Warmup Iteration  14: 5225883.233 ops/s
# Warmup Iteration  15: 5223436.457 ops/s
# Warmup Iteration  16: 5211535.207 ops/s
# Warmup Iteration  17: 5231301.522 ops/s
# Warmup Iteration  18: 5219276.224 ops/s
# Warmup Iteration  19: 5232070.614 ops/s
# Warmup Iteration  20: 5212460.621 ops/s
# Warmup Iteration  21: 5220741.379 ops/s
# Warmup Iteration  22: 5210795.067 ops/s
# Warmup Iteration  23: 5226770.223 ops/s
# Warmup Iteration  24: 5235824.137 ops/s
# Warmup Iteration  25: 5216577.967 ops/s
# Warmup Iteration  26: 5231063.267 ops/s
# Warmup Iteration  27: 5226417.513 ops/s
# Warmup Iteration  28: 5232317.287 ops/s
# Warmup Iteration  29: 5230361.291 ops/s
# Warmup Iteration  30: 5232509.357 ops/s
Iteration   1: 5219389.479 ops/s
Iteration   2: 5212739.843 ops/s
Iteration   3: 5240481.032 ops/s
Iteration   4: 5224922.608 ops/s
Iteration   5: 5223418.250 ops/s
Iteration   6: 5235145.883 ops/s
Iteration   7: 5235257.136 ops/s
Iteration   8: 5223752.982 ops/s
Iteration   9: 5218203.872 ops/s
Iteration  10: 5234568.242 ops/s
Iteration  11: 5217370.725 ops/s
Iteration  12: 5220606.597 ops/s
Iteration  13: 5231551.555 ops/s
Iteration  14: 5240862.341 ops/s
Iteration  15: 5230797.366 ops/s
Iteration  16: 5239381.342 ops/s
Iteration  17: 5237904.153 ops/s
Iteration  18: 5230475.047 ops/s
Iteration  19: 5219467.429 ops/s
Iteration  20: 5215718.561 ops/s
Iteration  21: 5242107.666 ops/s
Iteration  22: 5212711.292 ops/s
Iteration  23: 5226594.609 ops/s
Iteration  24: 5215132.656 ops/s
Iteration  25: 5233704.984 ops/s
Iteration  26: 5225407.129 ops/s
Iteration  27: 5226321.688 ops/s
Iteration  28: 5226100.808 ops/s
Iteration  29: 5209361.335 ops/s
Iteration  30: 5208044.044 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_toList":
  5225916.688 ±(99.9%) 6595.898 ops/s [Average]
  (min, avg, max) = (5208044.044, 5225916.688, 5242107.666), stdev = 9872.430
  CI (99.9%): [5219320.790, 5232512.586] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableBooleanEmptyListTest._Benchmark.benchmark_toList  thrpt   30  5225916.688 ± 6595.898  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_toReversed$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_toReversed

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 171506951.214 ops/s
# Warmup Iteration   2: 297727666.756 ops/s
# Warmup Iteration   3: 276968408.102 ops/s
# Warmup Iteration   4: 312188437.234 ops/s
# Warmup Iteration   5: 311965630.696 ops/s
# Warmup Iteration   6: 310454381.923 ops/s
# Warmup Iteration   7: 311091667.082 ops/s
# Warmup Iteration   8: 310860524.507 ops/s
# Warmup Iteration   9: 310307458.355 ops/s
# Warmup Iteration  10: 311614067.650 ops/s
# Warmup Iteration  11: 311885215.377 ops/s
# Warmup Iteration  12: 310079297.165 ops/s
# Warmup Iteration  13: 310028946.436 ops/s
# Warmup Iteration  14: 310414023.333 ops/s
# Warmup Iteration  15: 311718428.844 ops/s
# Warmup Iteration  16: 309942246.248 ops/s
# Warmup Iteration  17: 310679638.417 ops/s
# Warmup Iteration  18: 310552646.708 ops/s
# Warmup Iteration  19: 310626181.761 ops/s
# Warmup Iteration  20: 311182773.711 ops/s
# Warmup Iteration  21: 310202320.927 ops/s
# Warmup Iteration  22: 311066797.689 ops/s
# Warmup Iteration  23: 310843475.094 ops/s
# Warmup Iteration  24: 310127369.102 ops/s
# Warmup Iteration  25: 310501900.477 ops/s
# Warmup Iteration  26: 310215936.476 ops/s
# Warmup Iteration  27: 310494283.427 ops/s
# Warmup Iteration  28: 310597485.334 ops/s
# Warmup Iteration  29: 310246751.919 ops/s
# Warmup Iteration  30: 310918134.718 ops/s
Iteration   1: 310797330.081 ops/s
Iteration   2: 310373801.310 ops/s
Iteration   3: 311150849.855 ops/s
Iteration   4: 310423185.874 ops/s
Iteration   5: 311537031.487 ops/s
Iteration   6: 311578239.961 ops/s
Iteration   7: 311103680.802 ops/s
Iteration   8: 309388408.583 ops/s
Iteration   9: 310156390.539 ops/s
Iteration  10: 309439985.030 ops/s
Iteration  11: 310878681.626 ops/s
Iteration  12: 309778736.670 ops/s
Iteration  13: 310592793.327 ops/s
Iteration  14: 311472974.907 ops/s
Iteration  15: 311096641.961 ops/s
Iteration  16: 308817681.272 ops/s
Iteration  17: 310008828.017 ops/s
Iteration  18: 308480776.011 ops/s
Iteration  19: 309979405.969 ops/s
Iteration  20: 310012332.515 ops/s
Iteration  21: 309730398.082 ops/s
Iteration  22: 309787115.547 ops/s
Iteration  23: 309630621.577 ops/s
Iteration  24: 310771301.612 ops/s
Iteration  25: 309664308.531 ops/s
Iteration  26: 310819352.590 ops/s
Iteration  27: 311015934.363 ops/s
Iteration  28: 310203082.471 ops/s
Iteration  29: 311107447.689 ops/s
Iteration  30: 309917092.784 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_toReversed":
  310323813.701 ±(99.9%) 527945.284 ops/s [Average]
  (min, avg, max) = (308480776.011, 310323813.701, 311578239.961), stdev = 790203.707
  CI (99.9%): [309795868.417, 310851758.986] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt          Score        Error  Units
ImmutableBooleanEmptyListTest._Benchmark.benchmark_toReversed  thrpt   30  310323813.701 ± 527945.284  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_toSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_toSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5473115.171 ops/s
# Warmup Iteration   2: 12459522.855 ops/s
# Warmup Iteration   3: 12344618.157 ops/s
# Warmup Iteration   4: 10224859.567 ops/s
# Warmup Iteration   5: 12166191.120 ops/s
# Warmup Iteration   6: 12348406.112 ops/s
# Warmup Iteration   7: 12358031.279 ops/s
# Warmup Iteration   8: 12340493.103 ops/s
# Warmup Iteration   9: 12348763.279 ops/s
# Warmup Iteration  10: 12348315.718 ops/s
# Warmup Iteration  11: 12354371.834 ops/s
# Warmup Iteration  12: 12356232.751 ops/s
# Warmup Iteration  13: 12363748.177 ops/s
# Warmup Iteration  14: 12367314.928 ops/s
# Warmup Iteration  15: 12350556.989 ops/s
# Warmup Iteration  16: 12346636.077 ops/s
# Warmup Iteration  17: 12366306.143 ops/s
# Warmup Iteration  18: 12356183.270 ops/s
# Warmup Iteration  19: 12358242.700 ops/s
# Warmup Iteration  20: 12342131.399 ops/s
# Warmup Iteration  21: 12337328.942 ops/s
# Warmup Iteration  22: 12356151.118 ops/s
# Warmup Iteration  23: 12328076.970 ops/s
# Warmup Iteration  24: 12323059.041 ops/s
# Warmup Iteration  25: 12344256.935 ops/s
# Warmup Iteration  26: 12354773.315 ops/s
# Warmup Iteration  27: 12355449.386 ops/s
# Warmup Iteration  28: 12368277.977 ops/s
# Warmup Iteration  29: 12342322.962 ops/s
# Warmup Iteration  30: 12353536.144 ops/s
Iteration   1: 12374198.650 ops/s
Iteration   2: 12343998.544 ops/s
Iteration   3: 12355592.360 ops/s
Iteration   4: 12366959.016 ops/s
Iteration   5: 12359381.524 ops/s
Iteration   6: 12362924.623 ops/s
Iteration   7: 12353555.692 ops/s
Iteration   8: 12336404.240 ops/s
Iteration   9: 12365496.300 ops/s
Iteration  10: 12363503.246 ops/s
Iteration  11: 12343195.857 ops/s
Iteration  12: 12335271.557 ops/s
Iteration  13: 12377726.753 ops/s
Iteration  14: 12360002.088 ops/s
Iteration  15: 12345719.394 ops/s
Iteration  16: 12347038.264 ops/s
Iteration  17: 12354046.423 ops/s
Iteration  18: 12357611.449 ops/s
Iteration  19: 12367047.126 ops/s
Iteration  20: 12356036.718 ops/s
Iteration  21: 12349883.225 ops/s
Iteration  22: 12382164.060 ops/s
Iteration  23: 12358973.314 ops/s
Iteration  24: 12341068.201 ops/s
Iteration  25: 12392288.871 ops/s
Iteration  26: 12343878.918 ops/s
Iteration  27: 12365806.729 ops/s
Iteration  28: 12338190.187 ops/s
Iteration  29: 12332840.568 ops/s
Iteration  30: 12369612.012 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanEmptyListTest._Benchmark.benchmark_toSet":
  12356680.530 ±(99.9%) 9710.571 ops/s [Average]
  (min, avg, max) = (12332840.568, 12356680.530, 12392288.871), stdev = 14534.327
  CI (99.9%): [12346969.959, 12366391.101] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score      Error  Units
ImmutableBooleanEmptyListTest._Benchmark.benchmark_toSet  thrpt   30  12356680.530 ± 9710.571  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2828199.733 ops/s
# Warmup Iteration   2: 16569941.507 ops/s
# Warmup Iteration   3: 14339050.439 ops/s
# Warmup Iteration   4: 16748268.904 ops/s
# Warmup Iteration   5: 16799332.266 ops/s
# Warmup Iteration   6: 16752037.142 ops/s
# Warmup Iteration   7: 16774460.114 ops/s
# Warmup Iteration   8: 16836543.821 ops/s
# Warmup Iteration   9: 16782645.684 ops/s
# Warmup Iteration  10: 16796505.436 ops/s
# Warmup Iteration  11: 16803400.132 ops/s
# Warmup Iteration  12: 16801140.181 ops/s
# Warmup Iteration  13: 16851748.491 ops/s
# Warmup Iteration  14: 16834071.244 ops/s
# Warmup Iteration  15: 16855032.339 ops/s
# Warmup Iteration  16: 16820660.102 ops/s
# Warmup Iteration  17: 16821974.878 ops/s
# Warmup Iteration  18: 16832217.645 ops/s
# Warmup Iteration  19: 16835595.941 ops/s
# Warmup Iteration  20: 16762998.126 ops/s
# Warmup Iteration  21: 16806190.069 ops/s
# Warmup Iteration  22: 16843556.167 ops/s
# Warmup Iteration  23: 16787625.458 ops/s
# Warmup Iteration  24: 16779490.368 ops/s
# Warmup Iteration  25: 16814624.663 ops/s
# Warmup Iteration  26: 16842192.477 ops/s
# Warmup Iteration  27: 16753578.899 ops/s
# Warmup Iteration  28: 16839152.889 ops/s
# Warmup Iteration  29: 16781762.107 ops/s
# Warmup Iteration  30: 16820163.487 ops/s
Iteration   1: 16729358.801 ops/s
Iteration   2: 16745147.016 ops/s
Iteration   3: 16780165.495 ops/s
Iteration   4: 16734605.330 ops/s
Iteration   5: 16825201.249 ops/s
Iteration   6: 16801178.508 ops/s
Iteration   7: 16744363.303 ops/s
Iteration   8: 16805536.954 ops/s
Iteration   9: 16857537.547 ops/s
Iteration  10: 16860777.381 ops/s
Iteration  11: 16831325.044 ops/s
Iteration  12: 16767188.208 ops/s
Iteration  13: 16805649.103 ops/s
Iteration  14: 16763337.049 ops/s
Iteration  15: 16659977.764 ops/s
Iteration  16: 16837538.596 ops/s
Iteration  17: 16841397.918 ops/s
Iteration  18: 16881913.610 ops/s
Iteration  19: 16769250.069 ops/s
Iteration  20: 16866739.722 ops/s
Iteration  21: 16724087.253 ops/s
Iteration  22: 16836249.802 ops/s
Iteration  23: 16841287.685 ops/s
Iteration  24: 16741522.813 ops/s
Iteration  25: 16796564.250 ops/s
Iteration  26: 16863179.399 ops/s
Iteration  27: 16803720.139 ops/s
Iteration  28: 16810838.045 ops/s
Iteration  29: 16814643.983 ops/s
Iteration  30: 16766325.761 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_allSatisfy":
  16796886.927 ±(99.9%) 34893.528 ops/s [Average]
  (min, avg, max) = (16659977.764, 16796886.927, 16881913.610), stdev = 52226.995
  CI (99.9%): [16761993.398, 16831780.455] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score       Error  Units
ImmutableBooleanSingletonListTest._Benchmark.benchmark_allSatisfy  thrpt   30  16796886.927 ± 34893.528  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 14341416.208 ops/s
# Warmup Iteration   2: 23555895.325 ops/s
# Warmup Iteration   3: 27800711.177 ops/s
# Warmup Iteration   4: 27810215.117 ops/s
# Warmup Iteration   5: 27734417.933 ops/s
# Warmup Iteration   6: 27687170.260 ops/s
# Warmup Iteration   7: 27744979.989 ops/s
# Warmup Iteration   8: 27840492.975 ops/s
# Warmup Iteration   9: 27754888.712 ops/s
# Warmup Iteration  10: 27800290.567 ops/s
# Warmup Iteration  11: 27812668.344 ops/s
# Warmup Iteration  12: 27806979.861 ops/s
# Warmup Iteration  13: 27711479.881 ops/s
# Warmup Iteration  14: 27750523.279 ops/s
# Warmup Iteration  15: 27747094.196 ops/s
# Warmup Iteration  16: 27788153.232 ops/s
# Warmup Iteration  17: 27616111.270 ops/s
# Warmup Iteration  18: 27531301.580 ops/s
# Warmup Iteration  19: 27587687.164 ops/s
# Warmup Iteration  20: 27672882.513 ops/s
# Warmup Iteration  21: 27723486.430 ops/s
# Warmup Iteration  22: 27653797.544 ops/s
# Warmup Iteration  23: 27778515.336 ops/s
# Warmup Iteration  24: 27749329.368 ops/s
# Warmup Iteration  25: 27876577.092 ops/s
# Warmup Iteration  26: 27803958.039 ops/s
# Warmup Iteration  27: 27753562.951 ops/s
# Warmup Iteration  28: 27740959.083 ops/s
# Warmup Iteration  29: 27843977.148 ops/s
# Warmup Iteration  30: 27732445.923 ops/s
Iteration   1: 27808312.729 ops/s
Iteration   2: 27804846.703 ops/s
Iteration   3: 27824753.577 ops/s
Iteration   4: 27900041.737 ops/s
Iteration   5: 27807811.109 ops/s
Iteration   6: 27857309.494 ops/s
Iteration   7: 27838067.344 ops/s
Iteration   8: 27838541.145 ops/s
Iteration   9: 27781467.252 ops/s
Iteration  10: 27870964.608 ops/s
Iteration  11: 27784741.772 ops/s
Iteration  12: 27800239.408 ops/s
Iteration  13: 27845098.957 ops/s
Iteration  14: 27785079.682 ops/s
Iteration  15: 27961229.386 ops/s
Iteration  16: 27729695.400 ops/s
Iteration  17: 27730137.332 ops/s
Iteration  18: 27851304.962 ops/s
Iteration  19: 27578600.392 ops/s
Iteration  20: 27838082.847 ops/s
Iteration  21: 27830836.441 ops/s
Iteration  22: 27816731.001 ops/s
Iteration  23: 27865366.814 ops/s
Iteration  24: 27893269.867 ops/s
Iteration  25: 27858563.505 ops/s
Iteration  26: 27833584.609 ops/s
Iteration  27: 27749704.231 ops/s
Iteration  28: 27821015.564 ops/s
Iteration  29: 27730466.387 ops/s
Iteration  30: 27910291.830 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_anySatisfy":
  27818205.203 ±(99.9%) 46845.074 ops/s [Average]
  (min, avg, max) = (27578600.392, 27818205.203, 27961229.386), stdev = 70115.507
  CI (99.9%): [27771360.128, 27865050.277] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score       Error  Units
ImmutableBooleanSingletonListTest._Benchmark.benchmark_anySatisfy  thrpt   30  27818205.203 ± 46845.074  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 538223.811 ops/s
# Warmup Iteration   2: 1694305.894 ops/s
# Warmup Iteration   3: 1718501.162 ops/s
# Warmup Iteration   4: 1420717.869 ops/s
# Warmup Iteration   5: 1695961.647 ops/s
# Warmup Iteration   6: 1699817.316 ops/s
# Warmup Iteration   7: 1706025.999 ops/s
# Warmup Iteration   8: 1699415.961 ops/s
# Warmup Iteration   9: 1698616.660 ops/s
# Warmup Iteration  10: 1712268.351 ops/s
# Warmup Iteration  11: 1703577.521 ops/s
# Warmup Iteration  12: 1690166.691 ops/s
# Warmup Iteration  13: 1701984.447 ops/s
# Warmup Iteration  14: 1697947.246 ops/s
# Warmup Iteration  15: 1714753.935 ops/s
# Warmup Iteration  16: 1714448.173 ops/s
# Warmup Iteration  17: 1695562.689 ops/s
# Warmup Iteration  18: 1696644.775 ops/s
# Warmup Iteration  19: 1696934.478 ops/s
# Warmup Iteration  20: 1687742.047 ops/s
# Warmup Iteration  21: 1706479.189 ops/s
# Warmup Iteration  22: 1704498.286 ops/s
# Warmup Iteration  23: 1706887.230 ops/s
# Warmup Iteration  24: 1708896.478 ops/s
# Warmup Iteration  25: 1692019.163 ops/s
# Warmup Iteration  26: 1701637.430 ops/s
# Warmup Iteration  27: 1718039.344 ops/s
# Warmup Iteration  28: 1696183.512 ops/s
# Warmup Iteration  29: 1695440.631 ops/s
# Warmup Iteration  30: 1699945.259 ops/s
Iteration   1: 1695539.970 ops/s
Iteration   2: 1681831.539 ops/s
Iteration   3: 1686869.373 ops/s
Iteration   4: 1683507.902 ops/s
Iteration   5: 1679624.961 ops/s
Iteration   6: 1685515.790 ops/s
Iteration   7: 1682413.182 ops/s
Iteration   8: 1703473.024 ops/s
Iteration   9: 1673977.021 ops/s
Iteration  10: 1693011.621 ops/s
Iteration  11: 1689035.712 ops/s
Iteration  12: 1686288.700 ops/s
Iteration  13: 1674460.824 ops/s
Iteration  14: 1704248.958 ops/s
Iteration  15: 1685670.491 ops/s
Iteration  16: 1702997.109 ops/s
Iteration  17: 1687318.360 ops/s
Iteration  18: 1674565.266 ops/s
Iteration  19: 1674928.127 ops/s
Iteration  20: 1708473.586 ops/s
Iteration  21: 1701204.101 ops/s
Iteration  22: 1678591.481 ops/s
Iteration  23: 1707587.318 ops/s
Iteration  24: 1693850.705 ops/s
Iteration  25: 1695407.752 ops/s
Iteration  26: 1675317.523 ops/s
Iteration  27: 1693647.553 ops/s
Iteration  28: 1711243.614 ops/s
Iteration  29: 1694137.586 ops/s
Iteration  30: 1690563.717 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_appendString":
  1689843.429 ±(99.9%) 7390.672 ops/s [Average]
  (min, avg, max) = (1673977.021, 1689843.429, 1711243.614), stdev = 11062.010
  CI (99.9%): [1682452.757, 1697234.101] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
ImmutableBooleanSingletonListTest._Benchmark.benchmark_appendString  thrpt   30  1689843.429 ± 7390.672  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_asLazy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_asLazy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12344766.920 ops/s
# Warmup Iteration   2: 27239318.476 ops/s
# Warmup Iteration   3: 22286462.539 ops/s
# Warmup Iteration   4: 27029741.765 ops/s
# Warmup Iteration   5: 27005468.752 ops/s
# Warmup Iteration   6: 27009981.721 ops/s
# Warmup Iteration   7: 27048958.472 ops/s
# Warmup Iteration   8: 26962540.283 ops/s
# Warmup Iteration   9: 26960330.975 ops/s
# Warmup Iteration  10: 26905713.649 ops/s
# Warmup Iteration  11: 27003833.120 ops/s
# Warmup Iteration  12: 26994031.457 ops/s
# Warmup Iteration  13: 26968601.547 ops/s
# Warmup Iteration  14: 27032646.516 ops/s
# Warmup Iteration  15: 27044563.330 ops/s
# Warmup Iteration  16: 27038516.149 ops/s
# Warmup Iteration  17: 27027406.127 ops/s
# Warmup Iteration  18: 27014745.765 ops/s
# Warmup Iteration  19: 27034887.337 ops/s
# Warmup Iteration  20: 26999453.311 ops/s
# Warmup Iteration  21: 27056180.411 ops/s
# Warmup Iteration  22: 27056769.123 ops/s
# Warmup Iteration  23: 26950178.722 ops/s
# Warmup Iteration  24: 27100228.549 ops/s
# Warmup Iteration  25: 27023861.592 ops/s
# Warmup Iteration  26: 27032348.330 ops/s
# Warmup Iteration  27: 27005972.864 ops/s
# Warmup Iteration  28: 27002993.186 ops/s
# Warmup Iteration  29: 26989740.859 ops/s
# Warmup Iteration  30: 26994284.086 ops/s
Iteration   1: 27114377.655 ops/s
Iteration   2: 27004313.976 ops/s
Iteration   3: 27059722.215 ops/s
Iteration   4: 27061122.778 ops/s
Iteration   5: 27161001.871 ops/s
Iteration   6: 27008178.291 ops/s
Iteration   7: 27010244.037 ops/s
Iteration   8: 27011780.645 ops/s
Iteration   9: 26959353.555 ops/s
Iteration  10: 27088656.120 ops/s
Iteration  11: 26987700.772 ops/s
Iteration  12: 27030445.430 ops/s
Iteration  13: 27046240.425 ops/s
Iteration  14: 27027902.458 ops/s
Iteration  15: 27068208.882 ops/s
Iteration  16: 27060812.305 ops/s
Iteration  17: 27055241.083 ops/s
Iteration  18: 27104956.987 ops/s
Iteration  19: 27100946.015 ops/s
Iteration  20: 27093100.617 ops/s
Iteration  21: 27076599.413 ops/s
Iteration  22: 26951323.463 ops/s
Iteration  23: 26854641.918 ops/s
Iteration  24: 27029188.717 ops/s
Iteration  25: 27073782.008 ops/s
Iteration  26: 27029508.849 ops/s
Iteration  27: 26989925.137 ops/s
Iteration  28: 26823541.565 ops/s
Iteration  29: 27096722.760 ops/s
Iteration  30: 26994819.109 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_asLazy":
  27032478.635 ±(99.9%) 47555.514 ops/s [Average]
  (min, avg, max) = (26823541.565, 27032478.635, 27161001.871), stdev = 71178.860
  CI (99.9%): [26984923.121, 27080034.149] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score       Error  Units
ImmutableBooleanSingletonListTest._Benchmark.benchmark_asLazy  thrpt   30  27032478.635 ± 47555.514  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_booleanIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_booleanIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 43608787.968 ops/s
# Warmup Iteration   2: 73226398.263 ops/s
# Warmup Iteration   3: 67131562.294 ops/s
# Warmup Iteration   4: 76005646.691 ops/s
# Warmup Iteration   5: 76246053.054 ops/s
# Warmup Iteration   6: 76068553.375 ops/s
# Warmup Iteration   7: 76228684.838 ops/s
# Warmup Iteration   8: 76263469.876 ops/s
# Warmup Iteration   9: 76313668.451 ops/s
# Warmup Iteration  10: 76483663.686 ops/s
# Warmup Iteration  11: 76426955.351 ops/s
# Warmup Iteration  12: 76390095.830 ops/s
# Warmup Iteration  13: 76362157.320 ops/s
# Warmup Iteration  14: 76203650.245 ops/s
# Warmup Iteration  15: 76533713.910 ops/s
# Warmup Iteration  16: 76333815.706 ops/s
# Warmup Iteration  17: 76389871.447 ops/s
# Warmup Iteration  18: 76216967.961 ops/s
# Warmup Iteration  19: 76228359.090 ops/s
# Warmup Iteration  20: 76454012.469 ops/s
# Warmup Iteration  21: 76448770.506 ops/s
# Warmup Iteration  22: 76254441.737 ops/s
# Warmup Iteration  23: 76515536.972 ops/s
# Warmup Iteration  24: 76244562.736 ops/s
# Warmup Iteration  25: 76291627.922 ops/s
# Warmup Iteration  26: 76381949.659 ops/s
# Warmup Iteration  27: 76232834.057 ops/s
# Warmup Iteration  28: 76525598.503 ops/s
# Warmup Iteration  29: 76465908.990 ops/s
# Warmup Iteration  30: 76249880.336 ops/s
Iteration   1: 76522774.754 ops/s
Iteration   2: 76550611.222 ops/s
Iteration   3: 76291268.232 ops/s
Iteration   4: 76322158.480 ops/s
Iteration   5: 76365807.223 ops/s
Iteration   6: 76065201.823 ops/s
Iteration   7: 76328427.193 ops/s
Iteration   8: 76499340.849 ops/s
Iteration   9: 76281347.707 ops/s
Iteration  10: 76152784.837 ops/s
Iteration  11: 76505336.003 ops/s
Iteration  12: 76385901.817 ops/s
Iteration  13: 76474395.429 ops/s
Iteration  14: 76566323.306 ops/s
Iteration  15: 76290052.281 ops/s
Iteration  16: 76478307.463 ops/s
Iteration  17: 76147227.647 ops/s
Iteration  18: 76270424.033 ops/s
Iteration  19: 76131183.358 ops/s
Iteration  20: 76068470.909 ops/s
Iteration  21: 76651715.349 ops/s
Iteration  22: 76431280.853 ops/s
Iteration  23: 76522074.388 ops/s
Iteration  24: 76484381.153 ops/s
Iteration  25: 76455956.853 ops/s
Iteration  26: 76248644.485 ops/s
Iteration  27: 76515432.255 ops/s
Iteration  28: 76227883.519 ops/s
Iteration  29: 76214236.311 ops/s
Iteration  30: 76642548.980 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_booleanIterator":
  76369716.624 ±(99.9%) 111371.082 ops/s [Average]
  (min, avg, max) = (76065201.823, 76369716.624, 76651715.349), stdev = 166695.005
  CI (99.9%): [76258345.542, 76481087.706] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt         Score        Error  Units
ImmutableBooleanSingletonListTest._Benchmark.benchmark_booleanIterator  thrpt   30  76369716.624 ± 111371.082  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1250760.393 ops/s
# Warmup Iteration   2: 1615305.367 ops/s
# Warmup Iteration   3: 2084392.320 ops/s
# Warmup Iteration   4: 2076233.556 ops/s
# Warmup Iteration   5: 2077898.877 ops/s
# Warmup Iteration   6: 2084107.118 ops/s
# Warmup Iteration   7: 2082164.050 ops/s
# Warmup Iteration   8: 2074995.559 ops/s
# Warmup Iteration   9: 1710552.656 ops/s
# Warmup Iteration  10: 2079573.317 ops/s
# Warmup Iteration  11: 2080086.920 ops/s
# Warmup Iteration  12: 2083217.922 ops/s
# Warmup Iteration  13: 2082080.512 ops/s
# Warmup Iteration  14: 2085923.046 ops/s
# Warmup Iteration  15: 2082241.647 ops/s
# Warmup Iteration  16: 2084438.095 ops/s
# Warmup Iteration  17: 2083350.622 ops/s
# Warmup Iteration  18: 2080926.397 ops/s
# Warmup Iteration  19: 2079932.528 ops/s
# Warmup Iteration  20: 2073026.794 ops/s
# Warmup Iteration  21: 2082122.732 ops/s
# Warmup Iteration  22: 2083256.588 ops/s
# Warmup Iteration  23: 2080270.441 ops/s
# Warmup Iteration  24: 2085289.890 ops/s
# Warmup Iteration  25: 2084341.079 ops/s
# Warmup Iteration  26: 2082363.279 ops/s
# Warmup Iteration  27: 2081130.352 ops/s
# Warmup Iteration  28: 2086417.613 ops/s
# Warmup Iteration  29: 2084202.038 ops/s
# Warmup Iteration  30: 2075315.800 ops/s
Iteration   1: 2087885.706 ops/s
Iteration   2: 2085756.982 ops/s
Iteration   3: 2083979.061 ops/s
Iteration   4: 2085165.048 ops/s
Iteration   5: 2086224.580 ops/s
Iteration   6: 2074080.943 ops/s
Iteration   7: 2083416.349 ops/s
Iteration   8: 2068859.770 ops/s
Iteration   9: 2073461.448 ops/s
Iteration  10: 2084166.400 ops/s
Iteration  11: 2085611.562 ops/s
Iteration  12: 2079506.837 ops/s
Iteration  13: 2085221.470 ops/s
Iteration  14: 2081684.684 ops/s
Iteration  15: 2079449.527 ops/s
Iteration  16: 2086878.745 ops/s
Iteration  17: 2084292.980 ops/s
Iteration  18: 2081579.410 ops/s
Iteration  19: 2083541.187 ops/s
Iteration  20: 2081366.112 ops/s
Iteration  21: 2086920.778 ops/s
Iteration  22: 2084790.180 ops/s
Iteration  23: 2078119.215 ops/s
Iteration  24: 2084529.117 ops/s
Iteration  25: 2085182.762 ops/s
Iteration  26: 2074926.301 ops/s
Iteration  27: 2085832.991 ops/s
Iteration  28: 2082207.091 ops/s
Iteration  29: 2084428.485 ops/s
Iteration  30: 2084504.590 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_collect":
  2082452.344 ±(99.9%) 3034.323 ops/s [Average]
  (min, avg, max) = (2068859.770, 2082452.344, 2087885.706), stdev = 4541.633
  CI (99.9%): [2079418.020, 2085486.667] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ImmutableBooleanSingletonListTest._Benchmark.benchmark_collect  thrpt   30  2082452.344 ± 3034.323  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4853403.182 ops/s
# Warmup Iteration   2: 27388922.051 ops/s
# Warmup Iteration   3: 23409340.927 ops/s
# Warmup Iteration   4: 27451014.638 ops/s
# Warmup Iteration   5: 27533988.067 ops/s
# Warmup Iteration   6: 27602072.522 ops/s
# Warmup Iteration   7: 27611269.496 ops/s
# Warmup Iteration   8: 27595378.295 ops/s
# Warmup Iteration   9: 27622136.494 ops/s
# Warmup Iteration  10: 27531861.660 ops/s
# Warmup Iteration  11: 27592267.243 ops/s
# Warmup Iteration  12: 27585047.720 ops/s
# Warmup Iteration  13: 27610368.990 ops/s
# Warmup Iteration  14: 27601851.016 ops/s
# Warmup Iteration  15: 27597384.437 ops/s
# Warmup Iteration  16: 27491051.440 ops/s
# Warmup Iteration  17: 27622173.810 ops/s
# Warmup Iteration  18: 27574339.580 ops/s
# Warmup Iteration  19: 27503905.716 ops/s
# Warmup Iteration  20: 27529716.223 ops/s
# Warmup Iteration  21: 27611243.542 ops/s
# Warmup Iteration  22: 27449242.644 ops/s
# Warmup Iteration  23: 27540893.712 ops/s
# Warmup Iteration  24: 27584843.325 ops/s
# Warmup Iteration  25: 27553180.200 ops/s
# Warmup Iteration  26: 27596985.791 ops/s
# Warmup Iteration  27: 27576643.692 ops/s
# Warmup Iteration  28: 27566827.579 ops/s
# Warmup Iteration  29: 27571815.382 ops/s
# Warmup Iteration  30: 27517266.273 ops/s
Iteration   1: 27505428.155 ops/s
Iteration   2: 27385275.268 ops/s
Iteration   3: 27440138.479 ops/s
Iteration   4: 27564282.573 ops/s
Iteration   5: 27441934.402 ops/s
Iteration   6: 27418595.607 ops/s
Iteration   7: 27527986.968 ops/s
Iteration   8: 27449778.422 ops/s
Iteration   9: 27420533.278 ops/s
Iteration  10: 27514604.882 ops/s
Iteration  11: 27408597.791 ops/s
Iteration  12: 27563732.488 ops/s
Iteration  13: 27584473.635 ops/s
Iteration  14: 27354523.245 ops/s
Iteration  15: 27460360.351 ops/s
Iteration  16: 27551978.767 ops/s
Iteration  17: 27585349.174 ops/s
Iteration  18: 27539474.447 ops/s
Iteration  19: 27466105.040 ops/s
Iteration  20: 27527772.228 ops/s
Iteration  21: 27651107.200 ops/s
Iteration  22: 27458340.097 ops/s
Iteration  23: 27455525.111 ops/s
Iteration  24: 27558056.457 ops/s
Iteration  25: 27466566.852 ops/s
Iteration  26: 27582635.033 ops/s
Iteration  27: 27615135.276 ops/s
Iteration  28: 27566492.268 ops/s
Iteration  29: 27506915.969 ops/s
Iteration  30: 27561110.528 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_contains":
  27504427.000 ±(99.9%) 48880.199 ops/s [Average]
  (min, avg, max) = (27354523.245, 27504427.000, 27651107.200), stdev = 73161.586
  CI (99.9%): [27455546.801, 27553307.199] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score       Error  Units
ImmutableBooleanSingletonListTest._Benchmark.benchmark_contains  thrpt   30  27504427.000 ± 48880.199  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7174729.675 ops/s
# Warmup Iteration   2: 11754992.713 ops/s
# Warmup Iteration   3: 13951629.886 ops/s
# Warmup Iteration   4: 13917334.251 ops/s
# Warmup Iteration   5: 13887375.737 ops/s
# Warmup Iteration   6: 13873151.887 ops/s
# Warmup Iteration   7: 13881621.542 ops/s
# Warmup Iteration   8: 13882022.060 ops/s
# Warmup Iteration   9: 13902758.539 ops/s
# Warmup Iteration  10: 13869650.505 ops/s
# Warmup Iteration  11: 13938149.239 ops/s
# Warmup Iteration  12: 13903978.231 ops/s
# Warmup Iteration  13: 13960776.739 ops/s
# Warmup Iteration  14: 13860439.359 ops/s
# Warmup Iteration  15: 13901270.471 ops/s
# Warmup Iteration  16: 13872082.080 ops/s
# Warmup Iteration  17: 13860376.073 ops/s
# Warmup Iteration  18: 13902331.650 ops/s
# Warmup Iteration  19: 13929829.265 ops/s
# Warmup Iteration  20: 13964798.957 ops/s
# Warmup Iteration  21: 13927108.413 ops/s
# Warmup Iteration  22: 13903123.562 ops/s
# Warmup Iteration  23: 13939275.313 ops/s
# Warmup Iteration  24: 13974891.613 ops/s
# Warmup Iteration  25: 13921567.343 ops/s
# Warmup Iteration  26: 13908955.554 ops/s
# Warmup Iteration  27: 13900757.380 ops/s
# Warmup Iteration  28: 13974232.542 ops/s
# Warmup Iteration  29: 13842671.922 ops/s
# Warmup Iteration  30: 13925631.336 ops/s
Iteration   1: 13984006.506 ops/s
Iteration   2: 13942180.970 ops/s
Iteration   3: 14004140.086 ops/s
Iteration   4: 13925713.059 ops/s
Iteration   5: 13912295.555 ops/s
Iteration   6: 13962106.592 ops/s
Iteration   7: 13905717.211 ops/s
Iteration   8: 13912513.274 ops/s
Iteration   9: 13941668.841 ops/s
Iteration  10: 13977313.700 ops/s
Iteration  11: 13912225.739 ops/s
Iteration  12: 14054671.918 ops/s
Iteration  13: 14021459.134 ops/s
Iteration  14: 13917870.941 ops/s
Iteration  15: 13985924.943 ops/s
Iteration  16: 13985990.481 ops/s
Iteration  17: 13997431.564 ops/s
Iteration  18: 13992010.281 ops/s
Iteration  19: 14008291.194 ops/s
Iteration  20: 13960955.899 ops/s
Iteration  21: 13984900.053 ops/s
Iteration  22: 13963306.047 ops/s
Iteration  23: 13980226.923 ops/s
Iteration  24: 13921136.140 ops/s
Iteration  25: 13973644.882 ops/s
Iteration  26: 13816759.408 ops/s
Iteration  27: 13954949.529 ops/s
Iteration  28: 13987153.511 ops/s
Iteration  29: 13953309.196 ops/s
Iteration  30: 13965976.038 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_containsAllArray":
  13960194.987 ±(99.9%) 30170.000 ops/s [Average]
  (min, avg, max) = (13816759.408, 13960194.987, 14054671.918), stdev = 45157.038
  CI (99.9%): [13930024.988, 13990364.987] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt         Score       Error  Units
ImmutableBooleanSingletonListTest._Benchmark.benchmark_containsAllArray  thrpt   30  13960194.987 ± 30170.000  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 862355.147 ops/s
# Warmup Iteration   2: 1962617.636 ops/s
# Warmup Iteration   3: 1632942.393 ops/s
# Warmup Iteration   4: 1977809.863 ops/s
# Warmup Iteration   5: 1981106.651 ops/s
# Warmup Iteration   6: 1979255.950 ops/s
# Warmup Iteration   7: 1973129.161 ops/s
# Warmup Iteration   8: 1977315.256 ops/s
# Warmup Iteration   9: 1976332.864 ops/s
# Warmup Iteration  10: 1979866.936 ops/s
# Warmup Iteration  11: 1972360.024 ops/s
# Warmup Iteration  12: 1978843.619 ops/s
# Warmup Iteration  13: 1979411.236 ops/s
# Warmup Iteration  14: 1978825.631 ops/s
# Warmup Iteration  15: 1980787.170 ops/s
# Warmup Iteration  16: 1975973.131 ops/s
# Warmup Iteration  17: 1976384.132 ops/s
# Warmup Iteration  18: 1977653.953 ops/s
# Warmup Iteration  19: 1977066.836 ops/s
# Warmup Iteration  20: 1974815.675 ops/s
# Warmup Iteration  21: 1979465.041 ops/s
# Warmup Iteration  22: 1974981.042 ops/s
# Warmup Iteration  23: 1979142.847 ops/s
# Warmup Iteration  24: 1977525.696 ops/s
# Warmup Iteration  25: 1982124.217 ops/s
# Warmup Iteration  26: 1974993.127 ops/s
# Warmup Iteration  27: 1979372.096 ops/s
# Warmup Iteration  28: 1979164.112 ops/s
# Warmup Iteration  29: 1980679.928 ops/s
# Warmup Iteration  30: 1978598.756 ops/s
Iteration   1: 1975199.644 ops/s
Iteration   2: 1983450.067 ops/s
Iteration   3: 1981684.319 ops/s
Iteration   4: 1975083.020 ops/s
Iteration   5: 1982933.543 ops/s
Iteration   6: 1979277.209 ops/s
Iteration   7: 1971619.925 ops/s
Iteration   8: 1975655.656 ops/s
Iteration   9: 1976357.593 ops/s
Iteration  10: 1984404.345 ops/s
Iteration  11: 1982736.099 ops/s
Iteration  12: 1984790.444 ops/s
Iteration  13: 1976250.565 ops/s
Iteration  14: 1981265.439 ops/s
Iteration  15: 1981604.333 ops/s
Iteration  16: 1978378.451 ops/s
Iteration  17: 1983749.141 ops/s
Iteration  18: 1981328.043 ops/s
Iteration  19: 1981659.297 ops/s
Iteration  20: 1982290.923 ops/s
Iteration  21: 1975221.454 ops/s
Iteration  22: 1983919.622 ops/s
Iteration  23: 1977015.038 ops/s
Iteration  24: 1982668.829 ops/s
Iteration  25: 1975831.437 ops/s
Iteration  26: 1981405.730 ops/s
Iteration  27: 1977405.489 ops/s
Iteration  28: 1980246.638 ops/s
Iteration  29: 1971977.241 ops/s
Iteration  30: 1982015.652 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_containsAllIterable":
  1979580.840 ±(99.9%) 2516.737 ops/s [Average]
  (min, avg, max) = (1971619.925, 1979580.840, 1984790.444), stdev = 3766.934
  CI (99.9%): [1977064.103, 1982097.576] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score      Error  Units
ImmutableBooleanSingletonListTest._Benchmark.benchmark_containsAllIterable  thrpt   30  1979580.840 ± 2516.737  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_containsAnyArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_containsAnyArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10768577.818 ops/s
# Warmup Iteration   2: 22923002.529 ops/s
# Warmup Iteration   3: 18891434.739 ops/s
# Warmup Iteration   4: 22747530.292 ops/s
# Warmup Iteration   5: 22687805.323 ops/s
# Warmup Iteration   6: 22724090.152 ops/s
# Warmup Iteration   7: 22757979.289 ops/s
# Warmup Iteration   8: 22707003.036 ops/s
# Warmup Iteration   9: 22754296.398 ops/s
# Warmup Iteration  10: 22723823.287 ops/s
# Warmup Iteration  11: 22709867.366 ops/s
# Warmup Iteration  12: 22695623.837 ops/s
# Warmup Iteration  13: 22732166.178 ops/s
# Warmup Iteration  14: 22774407.255 ops/s
# Warmup Iteration  15: 22726512.205 ops/s
# Warmup Iteration  16: 22739228.327 ops/s
# Warmup Iteration  17: 22702975.673 ops/s
# Warmup Iteration  18: 22721324.067 ops/s
# Warmup Iteration  19: 22707070.261 ops/s
# Warmup Iteration  20: 22702717.355 ops/s
# Warmup Iteration  21: 22723867.795 ops/s
# Warmup Iteration  22: 22729910.533 ops/s
# Warmup Iteration  23: 22761556.753 ops/s
# Warmup Iteration  24: 22723747.358 ops/s
# Warmup Iteration  25: 22754124.642 ops/s
# Warmup Iteration  26: 22708583.251 ops/s
# Warmup Iteration  27: 22781972.520 ops/s
# Warmup Iteration  28: 22743649.645 ops/s
# Warmup Iteration  29: 22753065.844 ops/s
# Warmup Iteration  30: 22687079.089 ops/s
Iteration   1: 22751821.725 ops/s
Iteration   2: 22657671.370 ops/s
Iteration   3: 22782359.831 ops/s
Iteration   4: 22755343.306 ops/s
Iteration   5: 22750196.693 ops/s
Iteration   6: 22785051.264 ops/s
Iteration   7: 22697257.810 ops/s
Iteration   8: 22717897.184 ops/s
Iteration   9: 22740243.501 ops/s
Iteration  10: 22763168.121 ops/s
Iteration  11: 22733296.544 ops/s
Iteration  12: 22722830.122 ops/s
Iteration  13: 22716887.544 ops/s
Iteration  14: 22734463.050 ops/s
Iteration  15: 22788555.937 ops/s
Iteration  16: 22755174.291 ops/s
Iteration  17: 22734658.951 ops/s
Iteration  18: 22783605.984 ops/s
Iteration  19: 22690905.191 ops/s
Iteration  20: 22805353.348 ops/s
Iteration  21: 22768021.717 ops/s
Iteration  22: 22679134.115 ops/s
Iteration  23: 22756188.904 ops/s
Iteration  24: 22719843.857 ops/s
Iteration  25: 22781860.367 ops/s
Iteration  26: 22749778.034 ops/s
Iteration  27: 22673974.391 ops/s
Iteration  28: 22743548.071 ops/s
Iteration  29: 22706381.768 ops/s
Iteration  30: 22693678.090 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_containsAnyArray":
  22737971.703 ±(99.9%) 24988.592 ops/s [Average]
  (min, avg, max) = (22657671.370, 22737971.703, 22805353.348), stdev = 37401.751
  CI (99.9%): [22712983.111, 22762960.295] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt         Score       Error  Units
ImmutableBooleanSingletonListTest._Benchmark.benchmark_containsAnyArray  thrpt   30  22737971.703 ± 24988.592  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_containsAnyIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_containsAnyIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 849456.793 ops/s
# Warmup Iteration   2: 1249241.155 ops/s
# Warmup Iteration   3: 1443791.280 ops/s
# Warmup Iteration   4: 1445702.585 ops/s
# Warmup Iteration   5: 1445034.040 ops/s
# Warmup Iteration   6: 1443314.246 ops/s
# Warmup Iteration   7: 1204089.700 ops/s
# Warmup Iteration   8: 1445960.646 ops/s
# Warmup Iteration   9: 1446955.001 ops/s
# Warmup Iteration  10: 1442402.124 ops/s
# Warmup Iteration  11: 1445712.103 ops/s
# Warmup Iteration  12: 1444808.759 ops/s
# Warmup Iteration  13: 1445780.999 ops/s
# Warmup Iteration  14: 1443995.638 ops/s
# Warmup Iteration  15: 1444520.097 ops/s
# Warmup Iteration  16: 1445570.385 ops/s
# Warmup Iteration  17: 1445568.025 ops/s
# Warmup Iteration  18: 1445368.635 ops/s
# Warmup Iteration  19: 1445316.583 ops/s
# Warmup Iteration  20: 1446449.005 ops/s
# Warmup Iteration  21: 1443450.116 ops/s
# Warmup Iteration  22: 1445455.764 ops/s
# Warmup Iteration  23: 1445024.690 ops/s
# Warmup Iteration  24: 1442475.211 ops/s
# Warmup Iteration  25: 1445183.683 ops/s
# Warmup Iteration  26: 1443069.509 ops/s
# Warmup Iteration  27: 1445056.556 ops/s
# Warmup Iteration  28: 1445266.521 ops/s
# Warmup Iteration  29: 1444050.214 ops/s
# Warmup Iteration  30: 1438439.541 ops/s
Iteration   1: 1442577.707 ops/s
Iteration   2: 1446686.543 ops/s
Iteration   3: 1441540.608 ops/s
Iteration   4: 1445384.056 ops/s
Iteration   5: 1443068.201 ops/s
Iteration   6: 1446416.152 ops/s
Iteration   7: 1438589.832 ops/s
Iteration   8: 1445477.692 ops/s
Iteration   9: 1442970.340 ops/s
Iteration  10: 1448079.681 ops/s
Iteration  11: 1445654.145 ops/s
Iteration  12: 1446167.265 ops/s
Iteration  13: 1446859.707 ops/s
Iteration  14: 1445276.724 ops/s
Iteration  15: 1445564.552 ops/s
Iteration  16: 1446075.791 ops/s
Iteration  17: 1447548.293 ops/s
Iteration  18: 1440900.968 ops/s
Iteration  19: 1445184.860 ops/s
Iteration  20: 1441453.359 ops/s
Iteration  21: 1445591.831 ops/s
Iteration  22: 1442147.762 ops/s
Iteration  23: 1447348.692 ops/s
Iteration  24: 1443976.181 ops/s
Iteration  25: 1441323.358 ops/s
Iteration  26: 1444647.532 ops/s
Iteration  27: 1445481.205 ops/s
Iteration  28: 1446277.631 ops/s
Iteration  29: 1441681.834 ops/s
Iteration  30: 1439258.567 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_containsAnyIterable":
  1444307.036 ±(99.9%) 1684.373 ops/s [Average]
  (min, avg, max) = (1438589.832, 1444307.036, 1448079.681), stdev = 2521.090
  CI (99.9%): [1442622.663, 1445991.408] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score      Error  Units
ImmutableBooleanSingletonListTest._Benchmark.benchmark_containsAnyIterable  thrpt   30  1444307.036 ± 1684.373  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_containsNoneArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_containsNoneArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10286826.036 ops/s
# Warmup Iteration   2: 21891813.979 ops/s
# Warmup Iteration   3: 18312889.333 ops/s
# Warmup Iteration   4: 22073925.838 ops/s
# Warmup Iteration   5: 22038906.921 ops/s
# Warmup Iteration   6: 22000924.904 ops/s
# Warmup Iteration   7: 22068280.909 ops/s
# Warmup Iteration   8: 22045991.756 ops/s
# Warmup Iteration   9: 22086395.144 ops/s
# Warmup Iteration  10: 22114034.369 ops/s
# Warmup Iteration  11: 22061369.218 ops/s
# Warmup Iteration  12: 22098352.634 ops/s
# Warmup Iteration  13: 22053430.440 ops/s
# Warmup Iteration  14: 22052042.964 ops/s
# Warmup Iteration  15: 22066393.035 ops/s
# Warmup Iteration  16: 22056631.805 ops/s
# Warmup Iteration  17: 22055080.393 ops/s
# Warmup Iteration  18: 22086014.578 ops/s
# Warmup Iteration  19: 22077272.067 ops/s
# Warmup Iteration  20: 22058739.992 ops/s
# Warmup Iteration  21: 22068638.367 ops/s
# Warmup Iteration  22: 22070434.348 ops/s
# Warmup Iteration  23: 22061265.549 ops/s
# Warmup Iteration  24: 22080988.176 ops/s
# Warmup Iteration  25: 22051071.048 ops/s
# Warmup Iteration  26: 22044538.825 ops/s
# Warmup Iteration  27: 22081235.702 ops/s
# Warmup Iteration  28: 22023010.681 ops/s
# Warmup Iteration  29: 22092180.462 ops/s
# Warmup Iteration  30: 22100157.221 ops/s
Iteration   1: 22012112.390 ops/s
Iteration   2: 22082655.571 ops/s
Iteration   3: 22117707.796 ops/s
Iteration   4: 22119108.178 ops/s
Iteration   5: 22060369.185 ops/s
Iteration   6: 22048974.935 ops/s
Iteration   7: 22064453.950 ops/s
Iteration   8: 22067058.605 ops/s
Iteration   9: 22019950.329 ops/s
Iteration  10: 22017841.192 ops/s
Iteration  11: 22063527.785 ops/s
Iteration  12: 22131862.327 ops/s
Iteration  13: 22076027.653 ops/s
Iteration  14: 21998100.099 ops/s
Iteration  15: 22100060.984 ops/s
Iteration  16: 22153170.187 ops/s
Iteration  17: 22025694.183 ops/s
Iteration  18: 22080505.806 ops/s
Iteration  19: 22089671.284 ops/s
Iteration  20: 22068034.266 ops/s
Iteration  21: 22103667.881 ops/s
Iteration  22: 22101691.471 ops/s
Iteration  23: 22025568.168 ops/s
Iteration  24: 22083137.074 ops/s
Iteration  25: 22060407.008 ops/s
Iteration  26: 22081333.883 ops/s
Iteration  27: 22153771.499 ops/s
Iteration  28: 21962980.888 ops/s
Iteration  29: 22044898.648 ops/s
Iteration  30: 22009442.310 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_containsNoneArray":
  22067459.518 ±(99.9%) 30500.424 ops/s [Average]
  (min, avg, max) = (21962980.888, 22067459.518, 22153771.499), stdev = 45651.602
  CI (99.9%): [22036959.094, 22097959.942] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt         Score       Error  Units
ImmutableBooleanSingletonListTest._Benchmark.benchmark_containsNoneArray  thrpt   30  22067459.518 ± 30500.424  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_containsNoneIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_containsNoneIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 786160.627 ops/s
# Warmup Iteration   2: 1116528.155 ops/s
# Warmup Iteration   3: 1297043.197 ops/s
# Warmup Iteration   4: 1297117.510 ops/s
# Warmup Iteration   5: 1293421.961 ops/s
# Warmup Iteration   6: 1298167.277 ops/s
# Warmup Iteration   7: 1088804.633 ops/s
# Warmup Iteration   8: 1298938.156 ops/s
# Warmup Iteration   9: 1301842.430 ops/s
# Warmup Iteration  10: 1299017.748 ops/s
# Warmup Iteration  11: 1299983.654 ops/s
# Warmup Iteration  12: 1299701.822 ops/s
# Warmup Iteration  13: 1300464.935 ops/s
# Warmup Iteration  14: 1299141.686 ops/s
# Warmup Iteration  15: 1299809.185 ops/s
# Warmup Iteration  16: 1299237.444 ops/s
# Warmup Iteration  17: 1300665.560 ops/s
# Warmup Iteration  18: 1300207.517 ops/s
# Warmup Iteration  19: 1299894.245 ops/s
# Warmup Iteration  20: 1299511.655 ops/s
# Warmup Iteration  21: 1300709.419 ops/s
# Warmup Iteration  22: 1300234.928 ops/s
# Warmup Iteration  23: 1300413.058 ops/s
# Warmup Iteration  24: 1299321.499 ops/s
# Warmup Iteration  25: 1297875.085 ops/s
# Warmup Iteration  26: 1299004.361 ops/s
# Warmup Iteration  27: 1299713.497 ops/s
# Warmup Iteration  28: 1295126.727 ops/s
# Warmup Iteration  29: 1300058.464 ops/s
# Warmup Iteration  30: 1297191.593 ops/s
Iteration   1: 1298229.601 ops/s
Iteration   2: 1302197.799 ops/s
Iteration   3: 1300903.036 ops/s
Iteration   4: 1296557.769 ops/s
Iteration   5: 1296758.438 ops/s
Iteration   6: 1297801.757 ops/s
Iteration   7: 1302205.818 ops/s
Iteration   8: 1297740.425 ops/s
Iteration   9: 1300981.021 ops/s
Iteration  10: 1300052.011 ops/s
Iteration  11: 1301082.154 ops/s
Iteration  12: 1301154.713 ops/s
Iteration  13: 1299579.866 ops/s
Iteration  14: 1302359.191 ops/s
Iteration  15: 1298092.194 ops/s
Iteration  16: 1299340.603 ops/s
Iteration  17: 1296682.188 ops/s
Iteration  18: 1301866.511 ops/s
Iteration  19: 1299221.017 ops/s
Iteration  20: 1300554.242 ops/s
Iteration  21: 1298233.040 ops/s
Iteration  22: 1298352.569 ops/s
Iteration  23: 1300055.530 ops/s
Iteration  24: 1295581.617 ops/s
Iteration  25: 1298667.327 ops/s
Iteration  26: 1304351.509 ops/s
Iteration  27: 1301363.500 ops/s
Iteration  28: 1298926.966 ops/s
Iteration  29: 1299941.236 ops/s
Iteration  30: 1300545.460 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_containsNoneIterable":
  1299645.970 ±(99.9%) 1360.523 ops/s [Average]
  (min, avg, max) = (1295581.617, 1299645.970, 1304351.509), stdev = 2036.367
  CI (99.9%): [1298285.447, 1301006.493] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score      Error  Units
ImmutableBooleanSingletonListTest._Benchmark.benchmark_containsNoneIterable  thrpt   30  1299645.970 ± 1360.523  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3112079.290 ops/s
# Warmup Iteration   2: 7866413.658 ops/s
# Warmup Iteration   3: 8919494.642 ops/s
# Warmup Iteration   4: 8931693.971 ops/s
# Warmup Iteration   5: 7671715.002 ops/s
# Warmup Iteration   6: 8760377.699 ops/s
# Warmup Iteration   7: 8931077.627 ops/s
# Warmup Iteration   8: 8926032.017 ops/s
# Warmup Iteration   9: 8930443.958 ops/s
# Warmup Iteration  10: 8936023.614 ops/s
# Warmup Iteration  11: 8943130.619 ops/s
# Warmup Iteration  12: 8921169.036 ops/s
# Warmup Iteration  13: 8937614.977 ops/s
# Warmup Iteration  14: 8935184.264 ops/s
# Warmup Iteration  15: 8935038.922 ops/s
# Warmup Iteration  16: 8927385.557 ops/s
# Warmup Iteration  17: 8922986.466 ops/s
# Warmup Iteration  18: 8941541.830 ops/s
# Warmup Iteration  19: 8931432.489 ops/s
# Warmup Iteration  20: 8940662.168 ops/s
# Warmup Iteration  21: 8945998.109 ops/s
# Warmup Iteration  22: 8908401.026 ops/s
# Warmup Iteration  23: 8936565.483 ops/s
# Warmup Iteration  24: 8926805.316 ops/s
# Warmup Iteration  25: 8932798.883 ops/s
# Warmup Iteration  26: 8941357.752 ops/s
# Warmup Iteration  27: 8942145.024 ops/s
# Warmup Iteration  28: 8943897.503 ops/s
# Warmup Iteration  29: 8922676.828 ops/s
# Warmup Iteration  30: 8940646.873 ops/s
Iteration   1: 8928620.904 ops/s
Iteration   2: 8942167.782 ops/s
Iteration   3: 8938575.284 ops/s
Iteration   4: 8943346.146 ops/s
Iteration   5: 8939181.721 ops/s
Iteration   6: 8944437.319 ops/s
Iteration   7: 8929743.767 ops/s
Iteration   8: 8945000.141 ops/s
Iteration   9: 8892481.207 ops/s
Iteration  10: 8945031.037 ops/s
Iteration  11: 8935738.696 ops/s
Iteration  12: 8923781.185 ops/s
Iteration  13: 8941284.248 ops/s
Iteration  14: 8929620.047 ops/s
Iteration  15: 8934019.965 ops/s
Iteration  16: 8955596.288 ops/s
Iteration  17: 8930481.684 ops/s
Iteration  18: 8922792.894 ops/s
Iteration  19: 8948408.363 ops/s
Iteration  20: 8943015.809 ops/s
Iteration  21: 8931592.059 ops/s
Iteration  22: 8948073.932 ops/s
Iteration  23: 8949360.350 ops/s
Iteration  24: 8930107.558 ops/s
Iteration  25: 8929705.211 ops/s
Iteration  26: 8898609.341 ops/s
Iteration  27: 8915309.848 ops/s
Iteration  28: 8940090.258 ops/s
Iteration  29: 8931527.981 ops/s
Iteration  30: 8949225.600 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_count":
  8934564.221 ±(99.9%) 9397.897 ops/s [Average]
  (min, avg, max) = (8892481.207, 8934564.221, 8955596.288), stdev = 14066.331
  CI (99.9%): [8925166.324, 8943962.118] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableBooleanSingletonListTest._Benchmark.benchmark_count  thrpt   30  8934564.221 ± 9397.897  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13644017.344 ops/s
# Warmup Iteration   2: 23377760.386 ops/s
# Warmup Iteration   3: 25711250.068 ops/s
# Warmup Iteration   4: 26502064.515 ops/s
# Warmup Iteration   5: 26583702.631 ops/s
# Warmup Iteration   6: 26558855.729 ops/s
# Warmup Iteration   7: 26619291.956 ops/s
# Warmup Iteration   8: 26504642.744 ops/s
# Warmup Iteration   9: 26514990.995 ops/s
# Warmup Iteration  10: 26555072.895 ops/s
# Warmup Iteration  11: 26544077.341 ops/s
# Warmup Iteration  12: 26576838.762 ops/s
# Warmup Iteration  13: 26523436.491 ops/s
# Warmup Iteration  14: 26583739.414 ops/s
# Warmup Iteration  15: 26584409.452 ops/s
# Warmup Iteration  16: 26600054.197 ops/s
# Warmup Iteration  17: 26524844.383 ops/s
# Warmup Iteration  18: 26589952.917 ops/s
# Warmup Iteration  19: 26509104.848 ops/s
# Warmup Iteration  20: 26472957.005 ops/s
# Warmup Iteration  21: 26515463.359 ops/s
# Warmup Iteration  22: 26599945.690 ops/s
# Warmup Iteration  23: 26595209.571 ops/s
# Warmup Iteration  24: 26579239.502 ops/s
# Warmup Iteration  25: 26663195.359 ops/s
# Warmup Iteration  26: 26609805.827 ops/s
# Warmup Iteration  27: 26525707.253 ops/s
# Warmup Iteration  28: 26550224.387 ops/s
# Warmup Iteration  29: 26513391.284 ops/s
# Warmup Iteration  30: 26537936.547 ops/s
Iteration   1: 26593203.149 ops/s
Iteration   2: 26578869.298 ops/s
Iteration   3: 26612105.069 ops/s
Iteration   4: 26550504.552 ops/s
Iteration   5: 26627841.896 ops/s
Iteration   6: 26537367.046 ops/s
Iteration   7: 26508503.995 ops/s
Iteration   8: 26516029.125 ops/s
Iteration   9: 26529746.027 ops/s
Iteration  10: 26534040.850 ops/s
Iteration  11: 26600014.750 ops/s
Iteration  12: 26594683.463 ops/s
Iteration  13: 26564467.760 ops/s
Iteration  14: 26474033.103 ops/s
Iteration  15: 26575025.506 ops/s
Iteration  16: 26596698.442 ops/s
Iteration  17: 26526807.473 ops/s
Iteration  18: 26613006.489 ops/s
Iteration  19: 26586423.654 ops/s
Iteration  20: 26487653.505 ops/s
Iteration  21: 26624433.705 ops/s
Iteration  22: 26539420.725 ops/s
Iteration  23: 26636043.401 ops/s
Iteration  24: 26511332.598 ops/s
Iteration  25: 26571383.783 ops/s
Iteration  26: 26630595.768 ops/s
Iteration  27: 26632698.650 ops/s
Iteration  28: 26637151.470 ops/s
Iteration  29: 26586408.564 ops/s
Iteration  30: 26610918.737 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_detectIfNone":
  26572913.752 ±(99.9%) 31520.370 ops/s [Average]
  (min, avg, max) = (26474033.103, 26572913.752, 26637151.470), stdev = 47178.210
  CI (99.9%): [26541393.382, 26604434.122] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt         Score       Error  Units
ImmutableBooleanSingletonListTest._Benchmark.benchmark_detectIfNone  thrpt   30  26572913.752 ± 31520.370  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4219606.343 ops/s
# Warmup Iteration   2: 7883073.789 ops/s
# Warmup Iteration   3: 8404231.314 ops/s
# Warmup Iteration   4: 8900186.351 ops/s
# Warmup Iteration   5: 8915023.336 ops/s
# Warmup Iteration   6: 8913262.149 ops/s
# Warmup Iteration   7: 8874003.726 ops/s
# Warmup Iteration   8: 8869918.962 ops/s
# Warmup Iteration   9: 8880315.164 ops/s
# Warmup Iteration  10: 8873916.573 ops/s
# Warmup Iteration  11: 8885571.479 ops/s
# Warmup Iteration  12: 8865723.463 ops/s
# Warmup Iteration  13: 8855028.407 ops/s
# Warmup Iteration  14: 8854002.084 ops/s
# Warmup Iteration  15: 8882112.782 ops/s
# Warmup Iteration  16: 8875368.769 ops/s
# Warmup Iteration  17: 8878064.184 ops/s
# Warmup Iteration  18: 8885034.440 ops/s
# Warmup Iteration  19: 8889649.190 ops/s
# Warmup Iteration  20: 8887345.916 ops/s
# Warmup Iteration  21: 8874948.093 ops/s
# Warmup Iteration  22: 8876036.027 ops/s
# Warmup Iteration  23: 8872054.555 ops/s
# Warmup Iteration  24: 8884100.566 ops/s
# Warmup Iteration  25: 8893098.102 ops/s
# Warmup Iteration  26: 8845517.354 ops/s
# Warmup Iteration  27: 8868468.647 ops/s
# Warmup Iteration  28: 8896208.987 ops/s
# Warmup Iteration  29: 8885756.185 ops/s
# Warmup Iteration  30: 8897464.306 ops/s
Iteration   1: 8897033.821 ops/s
Iteration   2: 8932317.274 ops/s
Iteration   3: 8866788.502 ops/s
Iteration   4: 8859907.579 ops/s
Iteration   5: 8878404.128 ops/s
Iteration   6: 8904697.157 ops/s
Iteration   7: 8889690.279 ops/s
Iteration   8: 8891256.342 ops/s
Iteration   9: 8869980.454 ops/s
Iteration  10: 8872649.291 ops/s
Iteration  11: 8886427.414 ops/s
Iteration  12: 8868240.365 ops/s
Iteration  13: 8859367.539 ops/s
Iteration  14: 8879074.497 ops/s
Iteration  15: 8861330.366 ops/s
Iteration  16: 8886033.371 ops/s
Iteration  17: 8918652.121 ops/s
Iteration  18: 8882347.477 ops/s
Iteration  19: 8893472.814 ops/s
Iteration  20: 8915609.718 ops/s
Iteration  21: 8906217.197 ops/s
Iteration  22: 8903598.046 ops/s
Iteration  23: 8865376.752 ops/s
Iteration  24: 8901117.734 ops/s
Iteration  25: 8882317.002 ops/s
Iteration  26: 8891796.380 ops/s
Iteration  27: 8875841.041 ops/s
Iteration  28: 8875663.820 ops/s
Iteration  29: 8845106.613 ops/s
Iteration  30: 8903853.827 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_forEach":
  8885472.297 ±(99.9%) 13308.010 ops/s [Average]
  (min, avg, max) = (8845106.613, 8885472.297, 8932317.274), stdev = 19918.805
  CI (99.9%): [8872164.287, 8898780.308] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ImmutableBooleanSingletonListTest._Benchmark.benchmark_forEach  thrpt   30  8885472.297 ± 13308.010  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_forEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_forEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9372624.175 ops/s
# Warmup Iteration   2: 21047597.657 ops/s
# Warmup Iteration   3: 17826627.383 ops/s
# Warmup Iteration   4: 20992338.411 ops/s
# Warmup Iteration   5: 20999213.401 ops/s
# Warmup Iteration   6: 20996685.511 ops/s
# Warmup Iteration   7: 20826221.310 ops/s
# Warmup Iteration   8: 20937161.969 ops/s
# Warmup Iteration   9: 21013128.322 ops/s
# Warmup Iteration  10: 21096225.670 ops/s
# Warmup Iteration  11: 21102517.533 ops/s
# Warmup Iteration  12: 21059150.066 ops/s
# Warmup Iteration  13: 21062608.237 ops/s
# Warmup Iteration  14: 21061490.142 ops/s
# Warmup Iteration  15: 20999234.177 ops/s
# Warmup Iteration  16: 20931637.181 ops/s
# Warmup Iteration  17: 20994873.351 ops/s
# Warmup Iteration  18: 21142096.320 ops/s
# Warmup Iteration  19: 21058634.714 ops/s
# Warmup Iteration  20: 21001793.763 ops/s
# Warmup Iteration  21: 21037177.366 ops/s
# Warmup Iteration  22: 21007375.664 ops/s
# Warmup Iteration  23: 20943233.732 ops/s
# Warmup Iteration  24: 20873466.712 ops/s
# Warmup Iteration  25: 20968891.539 ops/s
# Warmup Iteration  26: 21051165.961 ops/s
# Warmup Iteration  27: 20973903.901 ops/s
# Warmup Iteration  28: 21047569.397 ops/s
# Warmup Iteration  29: 21048405.821 ops/s
# Warmup Iteration  30: 21068518.112 ops/s
Iteration   1: 20937161.143 ops/s
Iteration   2: 21091458.819 ops/s
Iteration   3: 21091305.696 ops/s
Iteration   4: 20940454.400 ops/s
Iteration   5: 21050942.026 ops/s
Iteration   6: 21017090.501 ops/s
Iteration   7: 20975554.538 ops/s
Iteration   8: 21080098.830 ops/s
Iteration   9: 20964824.661 ops/s
Iteration  10: 21073738.498 ops/s
Iteration  11: 20983377.884 ops/s
Iteration  12: 21033749.724 ops/s
Iteration  13: 21003752.314 ops/s
Iteration  14: 21120994.718 ops/s
Iteration  15: 21164369.659 ops/s
Iteration  16: 21024317.189 ops/s
Iteration  17: 21166073.507 ops/s
Iteration  18: 21108814.384 ops/s
Iteration  19: 20965659.058 ops/s
Iteration  20: 21082104.243 ops/s
Iteration  21: 20980320.608 ops/s
Iteration  22: 21049308.725 ops/s
Iteration  23: 21129840.100 ops/s
Iteration  24: 20974225.836 ops/s
Iteration  25: 20978982.646 ops/s
Iteration  26: 21075460.959 ops/s
Iteration  27: 20919521.351 ops/s
Iteration  28: 20756050.584 ops/s
Iteration  29: 20904343.183 ops/s
Iteration  30: 21043462.542 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_forEachWithIndex":
  21022911.944 ±(99.9%) 58131.838 ops/s [Average]
  (min, avg, max) = (20756050.584, 21022911.944, 21166073.507), stdev = 87009.005
  CI (99.9%): [20964780.106, 21081043.782] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt         Score       Error  Units
ImmutableBooleanSingletonListTest._Benchmark.benchmark_forEachWithIndex  thrpt   30  21022911.944 ± 58131.838  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_get$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_get

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 43784797.445 ops/s
# Warmup Iteration   2: 73425050.162 ops/s
# Warmup Iteration   3: 76401907.564 ops/s
# Warmup Iteration   4: 86658467.953 ops/s
# Warmup Iteration   5: 86006015.688 ops/s
# Warmup Iteration   6: 86479271.468 ops/s
# Warmup Iteration   7: 86889922.008 ops/s
# Warmup Iteration   8: 86768171.447 ops/s
# Warmup Iteration   9: 86567751.308 ops/s
# Warmup Iteration  10: 86590465.546 ops/s
# Warmup Iteration  11: 86479666.135 ops/s
# Warmup Iteration  12: 86494388.664 ops/s
# Warmup Iteration  13: 86327756.670 ops/s
# Warmup Iteration  14: 86323269.603 ops/s
# Warmup Iteration  15: 86660624.494 ops/s
# Warmup Iteration  16: 86663146.414 ops/s
# Warmup Iteration  17: 86979879.422 ops/s
# Warmup Iteration  18: 86725000.321 ops/s
# Warmup Iteration  19: 86565887.277 ops/s
# Warmup Iteration  20: 86634608.309 ops/s
# Warmup Iteration  21: 86657121.101 ops/s
# Warmup Iteration  22: 86951914.746 ops/s
# Warmup Iteration  23: 86772242.782 ops/s
# Warmup Iteration  24: 86636448.750 ops/s
# Warmup Iteration  25: 86677186.090 ops/s
# Warmup Iteration  26: 86807416.046 ops/s
# Warmup Iteration  27: 86685424.434 ops/s
# Warmup Iteration  28: 86691718.833 ops/s
# Warmup Iteration  29: 86723095.176 ops/s
# Warmup Iteration  30: 86985030.075 ops/s
Iteration   1: 87021641.698 ops/s
Iteration   2: 86594832.840 ops/s
Iteration   3: 86260214.026 ops/s
Iteration   4: 86831493.151 ops/s
Iteration   5: 86701388.777 ops/s
Iteration   6: 86585309.196 ops/s
Iteration   7: 86470213.391 ops/s
Iteration   8: 86697506.373 ops/s
Iteration   9: 86495185.891 ops/s
Iteration  10: 86687473.922 ops/s
Iteration  11: 86757193.635 ops/s
Iteration  12: 86651148.396 ops/s
Iteration  13: 86362259.760 ops/s
Iteration  14: 86699241.087 ops/s
Iteration  15: 86376408.633 ops/s
Iteration  16: 86938431.853 ops/s
Iteration  17: 86848887.149 ops/s
Iteration  18: 86955861.111 ops/s
Iteration  19: 86830340.400 ops/s
Iteration  20: 86487852.859 ops/s
Iteration  21: 86813295.167 ops/s
Iteration  22: 86298682.218 ops/s
Iteration  23: 86737768.078 ops/s
Iteration  24: 86598812.563 ops/s
Iteration  25: 86301239.786 ops/s
Iteration  26: 86583562.472 ops/s
Iteration  27: 86735337.585 ops/s
Iteration  28: 86790773.572 ops/s
Iteration  29: 86922727.854 ops/s
Iteration  30: 86940942.251 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_get":
  86665867.523 ±(99.9%) 141702.277 ops/s [Average]
  (min, avg, max) = (86260214.026, 86665867.523, 87021641.698), stdev = 212093.314
  CI (99.9%): [86524165.246, 86807569.801] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score        Error  Units
ImmutableBooleanSingletonListTest._Benchmark.benchmark_get  thrpt   30  86665867.523 ± 141702.277  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_getFirst$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_getFirst

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 43560734.712 ops/s
# Warmup Iteration   2: 73304785.662 ops/s
# Warmup Iteration   3: 75936632.441 ops/s
# Warmup Iteration   4: 86973659.017 ops/s
# Warmup Iteration   5: 87266395.690 ops/s
# Warmup Iteration   6: 87190323.549 ops/s
# Warmup Iteration   7: 87025152.010 ops/s
# Warmup Iteration   8: 87073429.034 ops/s
# Warmup Iteration   9: 86858090.156 ops/s
# Warmup Iteration  10: 87127562.209 ops/s
# Warmup Iteration  11: 87229809.473 ops/s
# Warmup Iteration  12: 87258902.236 ops/s
# Warmup Iteration  13: 87308725.962 ops/s
# Warmup Iteration  14: 87302888.076 ops/s
# Warmup Iteration  15: 86959065.577 ops/s
# Warmup Iteration  16: 87211997.451 ops/s
# Warmup Iteration  17: 87259229.179 ops/s
# Warmup Iteration  18: 87083417.218 ops/s
# Warmup Iteration  19: 87143149.224 ops/s
# Warmup Iteration  20: 87204244.141 ops/s
# Warmup Iteration  21: 87205625.825 ops/s
# Warmup Iteration  22: 87224803.994 ops/s
# Warmup Iteration  23: 86961529.908 ops/s
# Warmup Iteration  24: 87112064.299 ops/s
# Warmup Iteration  25: 86871091.431 ops/s
# Warmup Iteration  26: 87041757.118 ops/s
# Warmup Iteration  27: 86843481.673 ops/s
# Warmup Iteration  28: 87198983.117 ops/s
# Warmup Iteration  29: 87306583.616 ops/s
# Warmup Iteration  30: 87042299.998 ops/s
Iteration   1: 87321170.111 ops/s
Iteration   2: 87013575.914 ops/s
Iteration   3: 87143975.014 ops/s
Iteration   4: 87168686.520 ops/s
Iteration   5: 87045985.327 ops/s
Iteration   6: 86736695.508 ops/s
Iteration   7: 86979611.392 ops/s
Iteration   8: 87277116.753 ops/s
Iteration   9: 87293681.123 ops/s
Iteration  10: 87211178.445 ops/s
Iteration  11: 86782921.518 ops/s
Iteration  12: 86902609.711 ops/s
Iteration  13: 87009654.803 ops/s
Iteration  14: 86946151.748 ops/s
Iteration  15: 87319837.513 ops/s
Iteration  16: 87123563.734 ops/s
Iteration  17: 86946509.632 ops/s
Iteration  18: 87450995.662 ops/s
Iteration  19: 87173558.018 ops/s
Iteration  20: 87109169.864 ops/s
Iteration  21: 87608414.381 ops/s
Iteration  22: 87233165.921 ops/s
Iteration  23: 87550968.543 ops/s
Iteration  24: 87453832.185 ops/s
Iteration  25: 87100729.624 ops/s
Iteration  26: 87467214.887 ops/s
Iteration  27: 87395668.545 ops/s
Iteration  28: 87382397.766 ops/s
Iteration  29: 87473117.185 ops/s
Iteration  30: 87471879.844 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_getFirst":
  87203134.573 ±(99.9%) 153528.844 ops/s [Average]
  (min, avg, max) = (86736695.508, 87203134.573, 87608414.381), stdev = 229794.763
  CI (99.9%): [87049605.729, 87356663.417] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score        Error  Units
ImmutableBooleanSingletonListTest._Benchmark.benchmark_getFirst  thrpt   30  87203134.573 ± 153528.844  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_getLast$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_getLast

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 25404002.705 ops/s
# Warmup Iteration   2: 43247415.796 ops/s
# Warmup Iteration   3: 45309760.938 ops/s
# Warmup Iteration   4: 47284657.609 ops/s
# Warmup Iteration   5: 47175256.240 ops/s
# Warmup Iteration   6: 47216183.922 ops/s
# Warmup Iteration   7: 47262378.297 ops/s
# Warmup Iteration   8: 47394285.290 ops/s
# Warmup Iteration   9: 47293305.595 ops/s
# Warmup Iteration  10: 47218399.954 ops/s
# Warmup Iteration  11: 47297440.026 ops/s
# Warmup Iteration  12: 47274573.408 ops/s
# Warmup Iteration  13: 47112611.962 ops/s
# Warmup Iteration  14: 47300093.946 ops/s
# Warmup Iteration  15: 47315602.269 ops/s
# Warmup Iteration  16: 47324847.066 ops/s
# Warmup Iteration  17: 47243341.051 ops/s
# Warmup Iteration  18: 47349976.046 ops/s
# Warmup Iteration  19: 47209880.104 ops/s
# Warmup Iteration  20: 47257183.534 ops/s
# Warmup Iteration  21: 47052087.272 ops/s
# Warmup Iteration  22: 47225283.088 ops/s
# Warmup Iteration  23: 47282420.334 ops/s
# Warmup Iteration  24: 47261259.191 ops/s
# Warmup Iteration  25: 47296849.782 ops/s
# Warmup Iteration  26: 47368145.517 ops/s
# Warmup Iteration  27: 47257424.190 ops/s
# Warmup Iteration  28: 47294181.277 ops/s
# Warmup Iteration  29: 47380833.844 ops/s
# Warmup Iteration  30: 47416583.338 ops/s
Iteration   1: 47190069.054 ops/s
Iteration   2: 47289301.399 ops/s
Iteration   3: 47302044.851 ops/s
Iteration   4: 47374923.568 ops/s
Iteration   5: 47230279.204 ops/s
Iteration   6: 47285466.099 ops/s
Iteration   7: 47230931.984 ops/s
Iteration   8: 47226899.862 ops/s
Iteration   9: 47137306.434 ops/s
Iteration  10: 47403083.972 ops/s
Iteration  11: 47309719.974 ops/s
Iteration  12: 47232059.988 ops/s
Iteration  13: 47115353.223 ops/s
Iteration  14: 47321651.271 ops/s
Iteration  15: 47207207.434 ops/s
Iteration  16: 47373401.505 ops/s
Iteration  17: 47401907.057 ops/s
Iteration  18: 47221690.695 ops/s
Iteration  19: 47197243.325 ops/s
Iteration  20: 47114090.028 ops/s
Iteration  21: 47333528.486 ops/s
Iteration  22: 47253050.782 ops/s
Iteration  23: 47204776.264 ops/s
Iteration  24: 47407227.863 ops/s
Iteration  25: 47247616.679 ops/s
Iteration  26: 47112936.462 ops/s
Iteration  27: 47334513.794 ops/s
Iteration  28: 47317049.466 ops/s
Iteration  29: 47357706.835 ops/s
Iteration  30: 47217420.931 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_getLast":
  47265015.283 ±(99.9%) 58396.918 ops/s [Average]
  (min, avg, max) = (47112936.462, 47265015.283, 47407227.863), stdev = 87405.764
  CI (99.9%): [47206618.365, 47323412.201] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score       Error  Units
ImmutableBooleanSingletonListTest._Benchmark.benchmark_getLast  thrpt   30  47265015.283 ± 58396.918  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_get_throws_index_greater_than_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_get_throws_index_greater_than_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 782400.616 ops/s
# Warmup Iteration   2: 797448.058 ops/s
# Warmup Iteration   3: 1027462.178 ops/s
# Warmup Iteration   4: 1050417.049 ops/s
# Warmup Iteration   5: 1051826.869 ops/s
# Warmup Iteration   6: 1048283.209 ops/s
# Warmup Iteration   7: 1049380.630 ops/s
# Warmup Iteration   8: 1050953.129 ops/s
# Warmup Iteration   9: 1048288.824 ops/s
# Warmup Iteration  10: 1049817.229 ops/s
# Warmup Iteration  11: 1050389.248 ops/s
# Warmup Iteration  12: 884842.113 ops/s
# Warmup Iteration  13: 1053208.738 ops/s
# Warmup Iteration  14: 1050338.148 ops/s
# Warmup Iteration  15: 1050772.145 ops/s
# Warmup Iteration  16: 1050854.396 ops/s
# Warmup Iteration  17: 1119818.798 ops/s
# Warmup Iteration  18: 1116995.581 ops/s
# Warmup Iteration  19: 1117186.778 ops/s
# Warmup Iteration  20: 1117264.445 ops/s
# Warmup Iteration  21: 1115096.063 ops/s
# Warmup Iteration  22: 1114178.468 ops/s
# Warmup Iteration  23: 1117737.153 ops/s
# Warmup Iteration  24: 1114065.616 ops/s
# Warmup Iteration  25: 1116334.848 ops/s
# Warmup Iteration  26: 1117005.819 ops/s
# Warmup Iteration  27: 1113025.147 ops/s
# Warmup Iteration  28: 1113132.976 ops/s
# Warmup Iteration  29: 1118592.329 ops/s
# Warmup Iteration  30: 1113929.929 ops/s
Iteration   1: 1118797.674 ops/s
Iteration   2: 1115763.974 ops/s
Iteration   3: 1113429.048 ops/s
Iteration   4: 1117100.990 ops/s
Iteration   5: 1115685.754 ops/s
Iteration   6: 1117954.473 ops/s
Iteration   7: 1118154.656 ops/s
Iteration   8: 1113670.761 ops/s
Iteration   9: 1118662.490 ops/s
Iteration  10: 1117451.961 ops/s
Iteration  11: 1114254.364 ops/s
Iteration  12: 1117857.652 ops/s
Iteration  13: 1115753.507 ops/s
Iteration  14: 1114997.898 ops/s
Iteration  15: 1116368.559 ops/s
Iteration  16: 1120203.200 ops/s
Iteration  17: 1119928.231 ops/s
Iteration  18: 1120007.518 ops/s
Iteration  19: 1116591.076 ops/s
Iteration  20: 1117812.458 ops/s
Iteration  21: 1121739.270 ops/s
Iteration  22: 1114347.415 ops/s
Iteration  23: 1119403.772 ops/s
Iteration  24: 1116674.546 ops/s
Iteration  25: 1116888.142 ops/s
Iteration  26: 1117023.984 ops/s
Iteration  27: 1113104.216 ops/s
Iteration  28: 1114734.132 ops/s
Iteration  29: 1118498.509 ops/s
Iteration  30: 1118321.970 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_get_throws_index_greater_than_size":
  1117039.407 ±(99.9%) 1458.173 ops/s [Average]
  (min, avg, max) = (1113104.216, 1117039.407, 1121739.270), stdev = 2182.525
  CI (99.9%): [1115581.234, 1118497.580] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                   Mode  Cnt        Score      Error  Units
ImmutableBooleanSingletonListTest._Benchmark.benchmark_get_throws_index_greater_than_size  thrpt   30  1117039.407 ± 1458.173  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_get_throws_index_negative$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_get_throws_index_negative

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 782608.150 ops/s
# Warmup Iteration   2: 795419.876 ops/s
# Warmup Iteration   3: 1034684.990 ops/s
# Warmup Iteration   4: 1037213.272 ops/s
# Warmup Iteration   5: 1034885.664 ops/s
# Warmup Iteration   6: 1031930.758 ops/s
# Warmup Iteration   7: 1034092.053 ops/s
# Warmup Iteration   8: 1034888.608 ops/s
# Warmup Iteration   9: 1033245.996 ops/s
# Warmup Iteration  10: 1030816.604 ops/s
# Warmup Iteration  11: 1035303.662 ops/s
# Warmup Iteration  12: 875965.202 ops/s
# Warmup Iteration  13: 1030023.264 ops/s
# Warmup Iteration  14: 1033485.938 ops/s
# Warmup Iteration  15: 1037574.787 ops/s
# Warmup Iteration  16: 1036038.412 ops/s
# Warmup Iteration  17: 1100086.107 ops/s
# Warmup Iteration  18: 1100890.672 ops/s
# Warmup Iteration  19: 1098684.881 ops/s
# Warmup Iteration  20: 1099830.504 ops/s
# Warmup Iteration  21: 1098622.485 ops/s
# Warmup Iteration  22: 1095060.790 ops/s
# Warmup Iteration  23: 1099180.312 ops/s
# Warmup Iteration  24: 1098459.925 ops/s
# Warmup Iteration  25: 1097490.859 ops/s
# Warmup Iteration  26: 1092336.540 ops/s
# Warmup Iteration  27: 1100399.111 ops/s
# Warmup Iteration  28: 1100179.121 ops/s
# Warmup Iteration  29: 1099527.813 ops/s
# Warmup Iteration  30: 1099062.370 ops/s
Iteration   1: 1102875.769 ops/s
Iteration   2: 1094661.380 ops/s
Iteration   3: 1098151.612 ops/s
Iteration   4: 1099157.353 ops/s
Iteration   5: 1101299.684 ops/s
Iteration   6: 1098987.776 ops/s
Iteration   7: 1100073.570 ops/s
Iteration   8: 1096536.462 ops/s
Iteration   9: 1099740.379 ops/s
Iteration  10: 1101094.823 ops/s
Iteration  11: 1100729.082 ops/s
Iteration  12: 1098006.600 ops/s
Iteration  13: 1101778.296 ops/s
Iteration  14: 1099534.189 ops/s
Iteration  15: 1102749.143 ops/s
Iteration  16: 1099444.015 ops/s
Iteration  17: 1098903.665 ops/s
Iteration  18: 1100690.392 ops/s
Iteration  19: 1102712.481 ops/s
Iteration  20: 1099000.373 ops/s
Iteration  21: 1097077.717 ops/s
Iteration  22: 1095466.722 ops/s
Iteration  23: 1098918.636 ops/s
Iteration  24: 1090635.140 ops/s
Iteration  25: 1101150.902 ops/s
Iteration  26: 1099727.842 ops/s
Iteration  27: 1099735.822 ops/s
Iteration  28: 1104236.080 ops/s
Iteration  29: 1098055.555 ops/s
Iteration  30: 1104367.242 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_get_throws_index_negative":
  1099516.623 ±(99.9%) 1905.457 ops/s [Average]
  (min, avg, max) = (1090635.140, 1099516.623, 1104367.242), stdev = 2851.998
  CI (99.9%): [1097611.167, 1101422.080] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt        Score      Error  Units
ImmutableBooleanSingletonListTest._Benchmark.benchmark_get_throws_index_negative  thrpt   30  1099516.623 ± 1905.457  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_indexOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_indexOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 20255611.956 ops/s
# Warmup Iteration   2: 32499237.718 ops/s
# Warmup Iteration   3: 39065575.014 ops/s
# Warmup Iteration   4: 38947483.856 ops/s
# Warmup Iteration   5: 38831679.733 ops/s
# Warmup Iteration   6: 38908094.326 ops/s
# Warmup Iteration   7: 38902966.015 ops/s
# Warmup Iteration   8: 39136637.983 ops/s
# Warmup Iteration   9: 39181831.615 ops/s
# Warmup Iteration  10: 39151899.431 ops/s
# Warmup Iteration  11: 38746430.675 ops/s
# Warmup Iteration  12: 39138373.807 ops/s
# Warmup Iteration  13: 38948733.191 ops/s
# Warmup Iteration  14: 39075509.342 ops/s
# Warmup Iteration  15: 39030762.051 ops/s
# Warmup Iteration  16: 39059023.760 ops/s
# Warmup Iteration  17: 38844547.272 ops/s
# Warmup Iteration  18: 38843561.427 ops/s
# Warmup Iteration  19: 38890923.673 ops/s
# Warmup Iteration  20: 39093563.845 ops/s
# Warmup Iteration  21: 39001708.383 ops/s
# Warmup Iteration  22: 38908775.168 ops/s
# Warmup Iteration  23: 38837492.443 ops/s
# Warmup Iteration  24: 38881624.284 ops/s
# Warmup Iteration  25: 38875661.448 ops/s
# Warmup Iteration  26: 38664873.382 ops/s
# Warmup Iteration  27: 38898733.688 ops/s
# Warmup Iteration  28: 38871632.937 ops/s
# Warmup Iteration  29: 38846092.528 ops/s
# Warmup Iteration  30: 38931181.958 ops/s
Iteration   1: 38565327.177 ops/s
Iteration   2: 38986670.337 ops/s
Iteration   3: 38800725.615 ops/s
Iteration   4: 38792520.589 ops/s
Iteration   5: 38860633.233 ops/s
Iteration   6: 38723897.270 ops/s
Iteration   7: 38813592.551 ops/s
Iteration   8: 39082297.688 ops/s
Iteration   9: 38842270.259 ops/s
Iteration  10: 38819036.849 ops/s
Iteration  11: 39067797.595 ops/s
Iteration  12: 38885809.245 ops/s
Iteration  13: 38780575.862 ops/s
Iteration  14: 39006777.875 ops/s
Iteration  15: 39127176.576 ops/s
Iteration  16: 38797406.712 ops/s
Iteration  17: 39136047.591 ops/s
Iteration  18: 38759382.352 ops/s
Iteration  19: 39082154.077 ops/s
Iteration  20: 38881560.683 ops/s
Iteration  21: 38828253.814 ops/s
Iteration  22: 38991093.733 ops/s
Iteration  23: 39035732.196 ops/s
Iteration  24: 38941151.795 ops/s
Iteration  25: 38643650.964 ops/s
Iteration  26: 38891061.304 ops/s
Iteration  27: 38978118.712 ops/s
Iteration  28: 38978839.720 ops/s
Iteration  29: 38902495.642 ops/s
Iteration  30: 38924934.740 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_indexOf":
  38897566.425 ±(99.9%) 92955.272 ops/s [Average]
  (min, avg, max) = (38565327.177, 38897566.425, 39136047.591), stdev = 139131.086
  CI (99.9%): [38804611.153, 38990521.698] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score       Error  Units
ImmutableBooleanSingletonListTest._Benchmark.benchmark_indexOf  thrpt   30  38897566.425 ± 92955.272  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11575167.142 ops/s
# Warmup Iteration   2: 25166798.834 ops/s
# Warmup Iteration   3: 25108461.914 ops/s
# Warmup Iteration   4: 20784972.742 ops/s
# Warmup Iteration   5: 25167008.987 ops/s
# Warmup Iteration   6: 25159067.378 ops/s
# Warmup Iteration   7: 25206723.448 ops/s
# Warmup Iteration   8: 25133557.473 ops/s
# Warmup Iteration   9: 25131070.307 ops/s
# Warmup Iteration  10: 25123101.852 ops/s
# Warmup Iteration  11: 25047868.504 ops/s
# Warmup Iteration  12: 25153687.363 ops/s
# Warmup Iteration  13: 25181134.322 ops/s
# Warmup Iteration  14: 25144715.368 ops/s
# Warmup Iteration  15: 25181780.325 ops/s
# Warmup Iteration  16: 25136969.967 ops/s
# Warmup Iteration  17: 25167017.873 ops/s
# Warmup Iteration  18: 25154431.176 ops/s
# Warmup Iteration  19: 25112150.170 ops/s
# Warmup Iteration  20: 25158896.137 ops/s
# Warmup Iteration  21: 25194252.046 ops/s
# Warmup Iteration  22: 25157605.024 ops/s
# Warmup Iteration  23: 25122694.720 ops/s
# Warmup Iteration  24: 25188550.327 ops/s
# Warmup Iteration  25: 25174385.069 ops/s
# Warmup Iteration  26: 25143729.142 ops/s
# Warmup Iteration  27: 25162404.883 ops/s
# Warmup Iteration  28: 25149414.735 ops/s
# Warmup Iteration  29: 25127920.718 ops/s
# Warmup Iteration  30: 25113291.396 ops/s
Iteration   1: 25146157.691 ops/s
Iteration   2: 25141351.953 ops/s
Iteration   3: 25143684.342 ops/s
Iteration   4: 25164373.263 ops/s
Iteration   5: 25182158.454 ops/s
Iteration   6: 25180864.683 ops/s
Iteration   7: 25188322.984 ops/s
Iteration   8: 25166119.362 ops/s
Iteration   9: 25164740.438 ops/s
Iteration  10: 25097356.869 ops/s
Iteration  11: 25130408.939 ops/s
Iteration  12: 25145934.415 ops/s
Iteration  13: 25145396.617 ops/s
Iteration  14: 25184583.907 ops/s
Iteration  15: 25036042.953 ops/s
Iteration  16: 25148080.396 ops/s
Iteration  17: 25100834.131 ops/s
Iteration  18: 25191547.080 ops/s
Iteration  19: 25210656.556 ops/s
Iteration  20: 25117797.195 ops/s
Iteration  21: 25116148.379 ops/s
Iteration  22: 25116947.840 ops/s
Iteration  23: 25158335.656 ops/s
Iteration  24: 25164141.077 ops/s
Iteration  25: 25152568.134 ops/s
Iteration  26: 25156269.101 ops/s
Iteration  27: 25123466.794 ops/s
Iteration  28: 25134063.298 ops/s
Iteration  29: 25149166.064 ops/s
Iteration  30: 25165986.742 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_injectInto":
  25147450.177 ±(99.9%) 22903.430 ops/s [Average]
  (min, avg, max) = (25036042.953, 25147450.177, 25210656.556), stdev = 34280.778
  CI (99.9%): [25124546.747, 25170353.607] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score       Error  Units
ImmutableBooleanSingletonListTest._Benchmark.benchmark_injectInto  thrpt   30  25147450.177 ± 22903.430  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_injectIntoWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_injectIntoWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11924843.308 ops/s
# Warmup Iteration   2: 26366579.517 ops/s
# Warmup Iteration   3: 26055430.960 ops/s
# Warmup Iteration   4: 22888339.637 ops/s
# Warmup Iteration   5: 24714554.202 ops/s
# Warmup Iteration   6: 26092974.791 ops/s
# Warmup Iteration   7: 26094872.960 ops/s
# Warmup Iteration   8: 26077870.398 ops/s
# Warmup Iteration   9: 26108088.713 ops/s
# Warmup Iteration  10: 26100673.913 ops/s
# Warmup Iteration  11: 26088663.947 ops/s
# Warmup Iteration  12: 26101006.548 ops/s
# Warmup Iteration  13: 26080566.919 ops/s
# Warmup Iteration  14: 26139136.872 ops/s
# Warmup Iteration  15: 26052117.593 ops/s
# Warmup Iteration  16: 26068337.132 ops/s
# Warmup Iteration  17: 26120743.077 ops/s
# Warmup Iteration  18: 26070071.228 ops/s
# Warmup Iteration  19: 26092215.461 ops/s
# Warmup Iteration  20: 26050978.802 ops/s
# Warmup Iteration  21: 25988574.730 ops/s
# Warmup Iteration  22: 26139942.777 ops/s
# Warmup Iteration  23: 26068424.608 ops/s
# Warmup Iteration  24: 26112256.311 ops/s
# Warmup Iteration  25: 26059229.580 ops/s
# Warmup Iteration  26: 26053206.114 ops/s
# Warmup Iteration  27: 26089668.007 ops/s
# Warmup Iteration  28: 26067605.917 ops/s
# Warmup Iteration  29: 26051497.020 ops/s
# Warmup Iteration  30: 26093380.370 ops/s
Iteration   1: 26065184.966 ops/s
Iteration   2: 26007237.443 ops/s
Iteration   3: 26076403.308 ops/s
Iteration   4: 26063839.751 ops/s
Iteration   5: 26054274.318 ops/s
Iteration   6: 26078482.072 ops/s
Iteration   7: 26062342.867 ops/s
Iteration   8: 26098433.227 ops/s
Iteration   9: 26122309.460 ops/s
Iteration  10: 26073996.917 ops/s
Iteration  11: 26112439.243 ops/s
Iteration  12: 26075802.238 ops/s
Iteration  13: 26065751.060 ops/s
Iteration  14: 26124229.496 ops/s
Iteration  15: 26059524.975 ops/s
Iteration  16: 26016656.071 ops/s
Iteration  17: 26086902.687 ops/s
Iteration  18: 26112828.527 ops/s
Iteration  19: 26090366.483 ops/s
Iteration  20: 26057507.252 ops/s
Iteration  21: 26090674.479 ops/s
Iteration  22: 26114143.854 ops/s
Iteration  23: 26082062.391 ops/s
Iteration  24: 26132470.816 ops/s
Iteration  25: 26062571.562 ops/s
Iteration  26: 26131160.453 ops/s
Iteration  27: 26051969.158 ops/s
Iteration  28: 26110266.976 ops/s
Iteration  29: 26129092.516 ops/s
Iteration  30: 26095831.291 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_injectIntoWithIndex":
  26083491.862 ±(99.9%) 21230.951 ops/s [Average]
  (min, avg, max) = (26007237.443, 26083491.862, 26132470.816), stdev = 31777.490
  CI (99.9%): [26062260.911, 26104722.813] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt         Score       Error  Units
ImmutableBooleanSingletonListTest._Benchmark.benchmark_injectIntoWithIndex  thrpt   30  26083491.862 ± 21230.951  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2613722.264 ops/s
# Warmup Iteration   2: 4138250.077 ops/s
# Warmup Iteration   3: 4813078.550 ops/s
# Warmup Iteration   4: 4819573.447 ops/s
# Warmup Iteration   5: 4814279.835 ops/s
# Warmup Iteration   6: 4807205.058 ops/s
# Warmup Iteration   7: 4810228.107 ops/s
# Warmup Iteration   8: 4793977.202 ops/s
# Warmup Iteration   9: 4781998.512 ops/s
# Warmup Iteration  10: 4812089.103 ops/s
# Warmup Iteration  11: 4832474.543 ops/s
# Warmup Iteration  12: 4811445.271 ops/s
# Warmup Iteration  13: 4812939.398 ops/s
# Warmup Iteration  14: 4843152.228 ops/s
# Warmup Iteration  15: 4801274.656 ops/s
# Warmup Iteration  16: 4807498.209 ops/s
# Warmup Iteration  17: 4834799.077 ops/s
# Warmup Iteration  18: 4829973.615 ops/s
# Warmup Iteration  19: 4811207.315 ops/s
# Warmup Iteration  20: 4800259.060 ops/s
# Warmup Iteration  21: 4856657.650 ops/s
# Warmup Iteration  22: 4831560.288 ops/s
# Warmup Iteration  23: 4827801.563 ops/s
# Warmup Iteration  24: 4865489.961 ops/s
# Warmup Iteration  25: 4840676.819 ops/s
# Warmup Iteration  26: 4816064.921 ops/s
# Warmup Iteration  27: 4829466.036 ops/s
# Warmup Iteration  28: 4816168.459 ops/s
# Warmup Iteration  29: 4809783.901 ops/s
# Warmup Iteration  30: 4830928.880 ops/s
Iteration   1: 4841953.460 ops/s
Iteration   2: 4846877.670 ops/s
Iteration   3: 4835082.726 ops/s
Iteration   4: 4801474.036 ops/s
Iteration   5: 4810515.490 ops/s
Iteration   6: 4839597.357 ops/s
Iteration   7: 4802254.213 ops/s
Iteration   8: 4829785.376 ops/s
Iteration   9: 4821530.910 ops/s
Iteration  10: 4825927.959 ops/s
Iteration  11: 4843969.964 ops/s
Iteration  12: 4815868.744 ops/s
Iteration  13: 4827520.067 ops/s
Iteration  14: 4843965.664 ops/s
Iteration  15: 4848160.045 ops/s
Iteration  16: 4829318.281 ops/s
Iteration  17: 4800195.538 ops/s
Iteration  18: 4820129.291 ops/s
Iteration  19: 4776437.331 ops/s
Iteration  20: 4823903.904 ops/s
Iteration  21: 4854339.696 ops/s
Iteration  22: 4780438.489 ops/s
Iteration  23: 4790285.923 ops/s
Iteration  24: 4833886.994 ops/s
Iteration  25: 4845822.815 ops/s
Iteration  26: 4802945.985 ops/s
Iteration  27: 4861303.019 ops/s
Iteration  28: 4831151.153 ops/s
Iteration  29: 4850707.463 ops/s
Iteration  30: 4864521.197 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_isEmpty":
  4826662.359 ±(99.9%) 15349.197 ops/s [Average]
  (min, avg, max) = (4776437.331, 4826662.359, 4864521.197), stdev = 22973.957
  CI (99.9%): [4811313.162, 4842011.555] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ImmutableBooleanSingletonListTest._Benchmark.benchmark_isEmpty  thrpt   30  4826662.359 ± 15349.197  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_iterator_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_iterator_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 753672.541 ops/s
# Warmup Iteration   2: 778060.235 ops/s
# Warmup Iteration   3: 1019183.747 ops/s
# Warmup Iteration   4: 1014707.516 ops/s
# Warmup Iteration   5: 1012058.800 ops/s
# Warmup Iteration   6: 1014180.890 ops/s
# Warmup Iteration   7: 1015341.759 ops/s
# Warmup Iteration   8: 1013761.073 ops/s
# Warmup Iteration   9: 1014152.897 ops/s
# Warmup Iteration  10: 1015153.163 ops/s
# Warmup Iteration  11: 986166.521 ops/s
# Warmup Iteration  12: 887610.795 ops/s
# Warmup Iteration  13: 1012182.008 ops/s
# Warmup Iteration  14: 1014226.467 ops/s
# Warmup Iteration  15: 1013099.145 ops/s
# Warmup Iteration  16: 1013731.685 ops/s
# Warmup Iteration  17: 1077439.352 ops/s
# Warmup Iteration  18: 1072694.251 ops/s
# Warmup Iteration  19: 1078609.767 ops/s
# Warmup Iteration  20: 1073589.878 ops/s
# Warmup Iteration  21: 1072857.016 ops/s
# Warmup Iteration  22: 1074759.405 ops/s
# Warmup Iteration  23: 1074879.215 ops/s
# Warmup Iteration  24: 1071355.061 ops/s
# Warmup Iteration  25: 1076998.433 ops/s
# Warmup Iteration  26: 1074276.912 ops/s
# Warmup Iteration  27: 1073061.919 ops/s
# Warmup Iteration  28: 1071125.390 ops/s
# Warmup Iteration  29: 1077073.464 ops/s
# Warmup Iteration  30: 1075252.571 ops/s
Iteration   1: 1075407.320 ops/s
Iteration   2: 1069312.489 ops/s
Iteration   3: 1072940.493 ops/s
Iteration   4: 1075521.229 ops/s
Iteration   5: 1076417.747 ops/s
Iteration   6: 1071272.253 ops/s
Iteration   7: 1069478.027 ops/s
Iteration   8: 1078673.535 ops/s
Iteration   9: 1073126.080 ops/s
Iteration  10: 1074843.345 ops/s
Iteration  11: 1070579.805 ops/s
Iteration  12: 1074765.327 ops/s
Iteration  13: 1072691.280 ops/s
Iteration  14: 1077377.076 ops/s
Iteration  15: 1074263.544 ops/s
Iteration  16: 1077180.405 ops/s
Iteration  17: 1068873.267 ops/s
Iteration  18: 1071409.280 ops/s
Iteration  19: 1074810.712 ops/s
Iteration  20: 1071182.103 ops/s
Iteration  21: 1071144.480 ops/s
Iteration  22: 1073218.546 ops/s
Iteration  23: 1074431.891 ops/s
Iteration  24: 1070017.629 ops/s
Iteration  25: 1074672.608 ops/s
Iteration  26: 1076703.919 ops/s
Iteration  27: 1074098.864 ops/s
Iteration  28: 1079545.598 ops/s
Iteration  29: 1078487.086 ops/s
Iteration  30: 1049633.251 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_iterator_throws":
  1073069.306 ±(99.9%) 3537.157 ops/s [Average]
  (min, avg, max) = (1049633.251, 1073069.306, 1079545.598), stdev = 5294.251
  CI (99.9%): [1069532.149, 1076606.464] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
ImmutableBooleanSingletonListTest._Benchmark.benchmark_iterator_throws  thrpt   30  1073069.306 ± 3537.157  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_iterator_throws_emptyList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_iterator_throws_emptyList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 863009.303 ops/s
# Warmup Iteration   2: 872193.693 ops/s
# Warmup Iteration   3: 1033769.316 ops/s
# Warmup Iteration   4: 1108173.564 ops/s
# Warmup Iteration   5: 1105607.907 ops/s
# Warmup Iteration   6: 1106271.438 ops/s
# Warmup Iteration   7: 1107397.933 ops/s
# Warmup Iteration   8: 1107599.402 ops/s
# Warmup Iteration   9: 1108706.841 ops/s
# Warmup Iteration  10: 1108270.386 ops/s
# Warmup Iteration  11: 1110496.921 ops/s
# Warmup Iteration  12: 1104064.226 ops/s
# Warmup Iteration  13: 1108402.285 ops/s
# Warmup Iteration  14: 931157.901 ops/s
# Warmup Iteration  15: 1106402.307 ops/s
# Warmup Iteration  16: 1107983.717 ops/s
# Warmup Iteration  17: 1173449.037 ops/s
# Warmup Iteration  18: 1181538.731 ops/s
# Warmup Iteration  19: 1160584.794 ops/s
# Warmup Iteration  20: 1179760.248 ops/s
# Warmup Iteration  21: 1178245.136 ops/s
# Warmup Iteration  22: 1181095.727 ops/s
# Warmup Iteration  23: 1175432.311 ops/s
# Warmup Iteration  24: 1179547.538 ops/s
# Warmup Iteration  25: 1177627.726 ops/s
# Warmup Iteration  26: 1176688.468 ops/s
# Warmup Iteration  27: 1176932.456 ops/s
# Warmup Iteration  28: 1176495.794 ops/s
# Warmup Iteration  29: 1180074.601 ops/s
# Warmup Iteration  30: 1179334.255 ops/s
Iteration   1: 1179004.317 ops/s
Iteration   2: 1178542.766 ops/s
Iteration   3: 1179029.395 ops/s
Iteration   4: 1177561.809 ops/s
Iteration   5: 1176204.071 ops/s
Iteration   6: 1177474.705 ops/s
Iteration   7: 1179812.971 ops/s
Iteration   8: 1176714.900 ops/s
Iteration   9: 1174791.450 ops/s
Iteration  10: 1147893.516 ops/s
Iteration  11: 1179403.894 ops/s
Iteration  12: 1181331.846 ops/s
Iteration  13: 1175956.413 ops/s
Iteration  14: 1176202.691 ops/s
Iteration  15: 1178345.953 ops/s
Iteration  16: 1176161.233 ops/s
Iteration  17: 1179542.972 ops/s
Iteration  18: 1176755.279 ops/s
Iteration  19: 1179232.058 ops/s
Iteration  20: 1175206.732 ops/s
Iteration  21: 1175966.434 ops/s
Iteration  22: 1178335.642 ops/s
Iteration  23: 1179318.564 ops/s
Iteration  24: 1179356.378 ops/s
Iteration  25: 1180129.082 ops/s
Iteration  26: 1176132.296 ops/s
Iteration  27: 1177580.990 ops/s
Iteration  28: 1180253.839 ops/s
Iteration  29: 1176635.138 ops/s
Iteration  30: 1177629.396 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_iterator_throws_emptyList":
  1176883.558 ±(99.9%) 3825.221 ops/s [Average]
  (min, avg, max) = (1147893.516, 1176883.558, 1181331.846), stdev = 5725.411
  CI (99.9%): [1173058.337, 1180708.778] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt        Score      Error  Units
ImmutableBooleanSingletonListTest._Benchmark.benchmark_iterator_throws_emptyList  thrpt   30  1176883.558 ± 3825.221  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_iterator_throws_non_empty_collection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_iterator_throws_non_empty_collection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 721336.243 ops/s
# Warmup Iteration   2: 735294.752 ops/s
# Warmup Iteration   3: 889193.843 ops/s
# Warmup Iteration   4: 938050.523 ops/s
# Warmup Iteration   5: 940270.965 ops/s
# Warmup Iteration   6: 939974.449 ops/s
# Warmup Iteration   7: 937284.785 ops/s
# Warmup Iteration   8: 939390.150 ops/s
# Warmup Iteration   9: 941188.339 ops/s
# Warmup Iteration  10: 941587.643 ops/s
# Warmup Iteration  11: 940570.337 ops/s
# Warmup Iteration  12: 941411.379 ops/s
# Warmup Iteration  13: 844506.942 ops/s
# Warmup Iteration  14: 882178.455 ops/s
# Warmup Iteration  15: 939405.365 ops/s
# Warmup Iteration  16: 941465.172 ops/s
# Warmup Iteration  17: 995265.113 ops/s
# Warmup Iteration  18: 992534.209 ops/s
# Warmup Iteration  19: 996442.698 ops/s
# Warmup Iteration  20: 992909.748 ops/s
# Warmup Iteration  21: 994562.295 ops/s
# Warmup Iteration  22: 994133.779 ops/s
# Warmup Iteration  23: 994279.374 ops/s
# Warmup Iteration  24: 994492.511 ops/s
# Warmup Iteration  25: 994246.680 ops/s
# Warmup Iteration  26: 993402.414 ops/s
# Warmup Iteration  27: 991859.552 ops/s
# Warmup Iteration  28: 995349.567 ops/s
# Warmup Iteration  29: 994373.727 ops/s
# Warmup Iteration  30: 992929.043 ops/s
Iteration   1: 994597.045 ops/s
Iteration   2: 992543.332 ops/s
Iteration   3: 994337.797 ops/s
Iteration   4: 993131.969 ops/s
Iteration   5: 992712.538 ops/s
Iteration   6: 994642.713 ops/s
Iteration   7: 991803.354 ops/s
Iteration   8: 993386.742 ops/s
Iteration   9: 994609.256 ops/s
Iteration  10: 995437.234 ops/s
Iteration  11: 992959.438 ops/s
Iteration  12: 994369.286 ops/s
Iteration  13: 992975.372 ops/s
Iteration  14: 995384.076 ops/s
Iteration  15: 993398.715 ops/s
Iteration  16: 992824.840 ops/s
Iteration  17: 993628.520 ops/s
Iteration  18: 996020.138 ops/s
Iteration  19: 993847.996 ops/s
Iteration  20: 994004.201 ops/s
Iteration  21: 994958.778 ops/s
Iteration  22: 993836.019 ops/s
Iteration  23: 993606.697 ops/s
Iteration  24: 992192.106 ops/s
Iteration  25: 994701.573 ops/s
Iteration  26: 994285.470 ops/s
Iteration  27: 994450.031 ops/s
Iteration  28: 995701.837 ops/s
Iteration  29: 996513.272 ops/s
Iteration  30: 995995.634 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_iterator_throws_non_empty_collection":
  994095.199 ±(99.9%) 797.240 ops/s [Average]
  (min, avg, max) = (991803.354, 994095.199, 996513.272), stdev = 1193.272
  CI (99.9%): [993297.959, 994892.440] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                     Mode  Cnt       Score     Error  Units
ImmutableBooleanSingletonListTest._Benchmark.benchmark_iterator_throws_non_empty_collection  thrpt   30  994095.199 ± 797.240  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_lastIndexOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_lastIndexOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 20293131.191 ops/s
# Warmup Iteration   2: 32547013.675 ops/s
# Warmup Iteration   3: 39060592.372 ops/s
# Warmup Iteration   4: 39001641.217 ops/s
# Warmup Iteration   5: 39033544.638 ops/s
# Warmup Iteration   6: 38898202.824 ops/s
# Warmup Iteration   7: 38817475.337 ops/s
# Warmup Iteration   8: 38910217.778 ops/s
# Warmup Iteration   9: 38975797.240 ops/s
# Warmup Iteration  10: 38790008.320 ops/s
# Warmup Iteration  11: 38971217.428 ops/s
# Warmup Iteration  12: 38918313.269 ops/s
# Warmup Iteration  13: 38927185.450 ops/s
# Warmup Iteration  14: 39112510.635 ops/s
# Warmup Iteration  15: 39091706.263 ops/s
# Warmup Iteration  16: 38801461.460 ops/s
# Warmup Iteration  17: 38874848.428 ops/s
# Warmup Iteration  18: 38878659.424 ops/s
# Warmup Iteration  19: 38775973.114 ops/s
# Warmup Iteration  20: 38740282.888 ops/s
# Warmup Iteration  21: 38876715.090 ops/s
# Warmup Iteration  22: 39016668.435 ops/s
# Warmup Iteration  23: 38924940.991 ops/s
# Warmup Iteration  24: 38685984.679 ops/s
# Warmup Iteration  25: 38889852.879 ops/s
# Warmup Iteration  26: 38996376.754 ops/s
# Warmup Iteration  27: 38951587.494 ops/s
# Warmup Iteration  28: 39063517.510 ops/s
# Warmup Iteration  29: 38732192.872 ops/s
# Warmup Iteration  30: 38959545.991 ops/s
Iteration   1: 38717307.040 ops/s
Iteration   2: 38967620.859 ops/s
Iteration   3: 38770419.748 ops/s
Iteration   4: 38856883.319 ops/s
Iteration   5: 39165563.960 ops/s
Iteration   6: 38795058.927 ops/s
Iteration   7: 38982454.717 ops/s
Iteration   8: 38853301.645 ops/s
Iteration   9: 38904387.852 ops/s
Iteration  10: 38564524.300 ops/s
Iteration  11: 38849933.223 ops/s
Iteration  12: 39009321.938 ops/s
Iteration  13: 38898063.031 ops/s
Iteration  14: 38622699.168 ops/s
Iteration  15: 38922548.707 ops/s
Iteration  16: 38891207.961 ops/s
Iteration  17: 39114502.989 ops/s
Iteration  18: 38969308.754 ops/s
Iteration  19: 38895367.902 ops/s
Iteration  20: 39254546.747 ops/s
Iteration  21: 38865460.293 ops/s
Iteration  22: 39052327.629 ops/s
Iteration  23: 38993950.034 ops/s
Iteration  24: 39160283.615 ops/s
Iteration  25: 38954304.807 ops/s
Iteration  26: 39237775.534 ops/s
Iteration  27: 38943597.545 ops/s
Iteration  28: 38850117.441 ops/s
Iteration  29: 38848673.394 ops/s
Iteration  30: 38996495.063 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_lastIndexOf":
  38930266.938 ±(99.9%) 106365.887 ops/s [Average]
  (min, avg, max) = (38564524.300, 38930266.938, 39254546.747), stdev = 159203.464
  CI (99.9%): [38823901.051, 39036632.825] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score        Error  Units
ImmutableBooleanSingletonListTest._Benchmark.benchmark_lastIndexOf  thrpt   30  38930266.938 ± 106365.887  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 912525.443 ops/s
# Warmup Iteration   2: 2077417.303 ops/s
# Warmup Iteration   3: 1772170.468 ops/s
# Warmup Iteration   4: 2022028.290 ops/s
# Warmup Iteration   5: 2059320.102 ops/s
# Warmup Iteration   6: 2045194.554 ops/s
# Warmup Iteration   7: 2044680.709 ops/s
# Warmup Iteration   8: 2048858.200 ops/s
# Warmup Iteration   9: 2069026.753 ops/s
# Warmup Iteration  10: 2057565.086 ops/s
# Warmup Iteration  11: 2064211.932 ops/s
# Warmup Iteration  12: 2056961.223 ops/s
# Warmup Iteration  13: 2059214.239 ops/s
# Warmup Iteration  14: 2053939.522 ops/s
# Warmup Iteration  15: 2067779.517 ops/s
# Warmup Iteration  16: 2061829.956 ops/s
# Warmup Iteration  17: 2056215.938 ops/s
# Warmup Iteration  18: 2063146.058 ops/s
# Warmup Iteration  19: 2051679.922 ops/s
# Warmup Iteration  20: 2039437.665 ops/s
# Warmup Iteration  21: 2065282.006 ops/s
# Warmup Iteration  22: 2063125.533 ops/s
# Warmup Iteration  23: 2049779.996 ops/s
# Warmup Iteration  24: 2049341.753 ops/s
# Warmup Iteration  25: 2057365.291 ops/s
# Warmup Iteration  26: 2048164.797 ops/s
# Warmup Iteration  27: 2056611.342 ops/s
# Warmup Iteration  28: 2054504.241 ops/s
# Warmup Iteration  29: 2052667.921 ops/s
# Warmup Iteration  30: 2063516.436 ops/s
Iteration   1: 2077828.903 ops/s
Iteration   2: 2061570.613 ops/s
Iteration   3: 2076230.631 ops/s
Iteration   4: 2057179.780 ops/s
Iteration   5: 2082482.547 ops/s
Iteration   6: 2074384.933 ops/s
Iteration   7: 2072676.567 ops/s
Iteration   8: 2078279.972 ops/s
Iteration   9: 2053378.945 ops/s
Iteration  10: 2068970.483 ops/s
Iteration  11: 2066603.601 ops/s
Iteration  12: 2066046.552 ops/s
Iteration  13: 2073335.504 ops/s
Iteration  14: 2041156.078 ops/s
Iteration  15: 2070057.238 ops/s
Iteration  16: 2061126.361 ops/s
Iteration  17: 2071415.119 ops/s
Iteration  18: 2066392.300 ops/s
Iteration  19: 2041984.750 ops/s
Iteration  20: 2063352.881 ops/s
Iteration  21: 2058919.157 ops/s
Iteration  22: 2058629.249 ops/s
Iteration  23: 2027437.304 ops/s
Iteration  24: 2046749.604 ops/s
Iteration  25: 2065416.454 ops/s
Iteration  26: 2050638.537 ops/s
Iteration  27: 2037489.612 ops/s
Iteration  28: 2062753.482 ops/s
Iteration  29: 2051432.925 ops/s
Iteration  30: 2076504.017 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_makeString":
  2062014.137 ±(99.9%) 8980.870 ops/s [Average]
  (min, avg, max) = (2027437.304, 2062014.137, 2082482.547), stdev = 13442.144
  CI (99.9%): [2053033.267, 2070995.006] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ImmutableBooleanSingletonListTest._Benchmark.benchmark_makeString  thrpt   30  2062014.137 ± 8980.870  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_newCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_newCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 14302908.150 ops/s
# Warmup Iteration   2: 24168678.871 ops/s
# Warmup Iteration   3: 28046899.324 ops/s
# Warmup Iteration   4: 29145183.557 ops/s
# Warmup Iteration   5: 29112476.325 ops/s
# Warmup Iteration   6: 29033134.166 ops/s
# Warmup Iteration   7: 29076783.803 ops/s
# Warmup Iteration   8: 29204806.147 ops/s
# Warmup Iteration   9: 29103745.957 ops/s
# Warmup Iteration  10: 29193163.842 ops/s
# Warmup Iteration  11: 29205975.077 ops/s
# Warmup Iteration  12: 29254671.949 ops/s
# Warmup Iteration  13: 29220132.350 ops/s
# Warmup Iteration  14: 29133279.939 ops/s
# Warmup Iteration  15: 29059081.591 ops/s
# Warmup Iteration  16: 29164048.464 ops/s
# Warmup Iteration  17: 29159809.542 ops/s
# Warmup Iteration  18: 29245374.393 ops/s
# Warmup Iteration  19: 29347067.010 ops/s
# Warmup Iteration  20: 29151489.186 ops/s
# Warmup Iteration  21: 29193999.538 ops/s
# Warmup Iteration  22: 29072354.457 ops/s
# Warmup Iteration  23: 29143230.921 ops/s
# Warmup Iteration  24: 29205304.644 ops/s
# Warmup Iteration  25: 29184255.515 ops/s
# Warmup Iteration  26: 28996407.970 ops/s
# Warmup Iteration  27: 29087841.367 ops/s
# Warmup Iteration  28: 29112361.505 ops/s
# Warmup Iteration  29: 29193052.158 ops/s
# Warmup Iteration  30: 29154401.544 ops/s
Iteration   1: 29153778.728 ops/s
Iteration   2: 28957593.710 ops/s
Iteration   3: 29090368.468 ops/s
Iteration   4: 29186184.497 ops/s
Iteration   5: 29010678.350 ops/s
Iteration   6: 28952044.339 ops/s
Iteration   7: 29070274.239 ops/s
Iteration   8: 29099601.880 ops/s
Iteration   9: 29090285.961 ops/s
Iteration  10: 28978108.489 ops/s
Iteration  11: 28955376.137 ops/s
Iteration  12: 29053352.661 ops/s
Iteration  13: 29044954.482 ops/s
Iteration  14: 28950223.733 ops/s
Iteration  15: 29008094.099 ops/s
Iteration  16: 29064809.950 ops/s
Iteration  17: 28964014.046 ops/s
Iteration  18: 28978704.853 ops/s
Iteration  19: 28773914.711 ops/s
Iteration  20: 28742263.950 ops/s
Iteration  21: 29027357.640 ops/s
Iteration  22: 29043770.023 ops/s
Iteration  23: 29173704.733 ops/s
Iteration  24: 29198418.582 ops/s
Iteration  25: 29313516.746 ops/s
Iteration  26: 29232329.692 ops/s
Iteration  27: 29117721.872 ops/s
Iteration  28: 29232695.863 ops/s
Iteration  29: 29021544.762 ops/s
Iteration  30: 29107082.312 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_newCollection":
  29053092.317 ±(99.9%) 82940.713 ops/s [Average]
  (min, avg, max) = (28742263.950, 29053092.317, 29313516.746), stdev = 124141.764
  CI (99.9%): [28970151.604, 29136033.030] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt         Score       Error  Units
ImmutableBooleanSingletonListTest._Benchmark.benchmark_newCollection  thrpt   30  29053092.317 ± 82940.713  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_newCollectionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_newCollectionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8644777.842 ops/s
# Warmup Iteration   2: 13746770.183 ops/s
# Warmup Iteration   3: 16073803.632 ops/s
# Warmup Iteration   4: 16018119.681 ops/s
# Warmup Iteration   5: 16026101.723 ops/s
# Warmup Iteration   6: 16002515.091 ops/s
# Warmup Iteration   7: 15946216.928 ops/s
# Warmup Iteration   8: 16051407.329 ops/s
# Warmup Iteration   9: 16040616.958 ops/s
# Warmup Iteration  10: 16020440.230 ops/s
# Warmup Iteration  11: 16009811.904 ops/s
# Warmup Iteration  12: 15970565.526 ops/s
# Warmup Iteration  13: 16041062.825 ops/s
# Warmup Iteration  14: 15963921.221 ops/s
# Warmup Iteration  15: 16065153.827 ops/s
# Warmup Iteration  16: 16007656.327 ops/s
# Warmup Iteration  17: 15941210.893 ops/s
# Warmup Iteration  18: 15997504.307 ops/s
# Warmup Iteration  19: 15948856.858 ops/s
# Warmup Iteration  20: 15922444.649 ops/s
# Warmup Iteration  21: 15842707.252 ops/s
# Warmup Iteration  22: 16011848.681 ops/s
# Warmup Iteration  23: 16006219.992 ops/s
# Warmup Iteration  24: 15963756.081 ops/s
# Warmup Iteration  25: 15926560.613 ops/s
# Warmup Iteration  26: 15920289.480 ops/s
# Warmup Iteration  27: 16031102.999 ops/s
# Warmup Iteration  28: 15988919.159 ops/s
# Warmup Iteration  29: 16023403.839 ops/s
# Warmup Iteration  30: 15999004.959 ops/s
Iteration   1: 16013263.422 ops/s
Iteration   2: 15970876.938 ops/s
Iteration   3: 15954491.747 ops/s
Iteration   4: 15998436.420 ops/s
Iteration   5: 15966452.176 ops/s
Iteration   6: 15983318.891 ops/s
Iteration   7: 16043694.914 ops/s
Iteration   8: 16065724.469 ops/s
Iteration   9: 15959554.856 ops/s
Iteration  10: 16008753.442 ops/s
Iteration  11: 16039551.868 ops/s
Iteration  12: 16054217.730 ops/s
Iteration  13: 15998254.163 ops/s
Iteration  14: 15905053.545 ops/s
Iteration  15: 16023137.762 ops/s
Iteration  16: 15988396.559 ops/s
Iteration  17: 15991476.104 ops/s
Iteration  18: 15925242.841 ops/s
Iteration  19: 16026260.664 ops/s
Iteration  20: 16006130.443 ops/s
Iteration  21: 15985503.862 ops/s
Iteration  22: 15987095.904 ops/s
Iteration  23: 16036063.385 ops/s
Iteration  24: 16026380.581 ops/s
Iteration  25: 15983891.336 ops/s
Iteration  26: 16034321.180 ops/s
Iteration  27: 16008747.810 ops/s
Iteration  28: 16025445.403 ops/s
Iteration  29: 15991286.507 ops/s
Iteration  30: 15948807.128 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_newCollectionWith":
  15998327.735 ±(99.9%) 24865.830 ops/s [Average]
  (min, avg, max) = (15905053.545, 15998327.735, 16065724.469), stdev = 37218.006
  CI (99.9%): [15973461.905, 16023193.565] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt         Score       Error  Units
ImmutableBooleanSingletonListTest._Benchmark.benchmark_newCollectionWith  thrpt   30  15998327.735 ± 24865.830  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_newWithAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_newWithAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 660597.894 ops/s
# Warmup Iteration   2: 1621774.636 ops/s
# Warmup Iteration   3: 1603406.683 ops/s
# Warmup Iteration   4: 1319096.970 ops/s
# Warmup Iteration   5: 1605067.535 ops/s
# Warmup Iteration   6: 1606605.525 ops/s
# Warmup Iteration   7: 1607243.403 ops/s
# Warmup Iteration   8: 1606645.877 ops/s
# Warmup Iteration   9: 1602786.106 ops/s
# Warmup Iteration  10: 1602857.674 ops/s
# Warmup Iteration  11: 1606857.432 ops/s
# Warmup Iteration  12: 1609407.162 ops/s
# Warmup Iteration  13: 1608252.271 ops/s
# Warmup Iteration  14: 1605008.877 ops/s
# Warmup Iteration  15: 1605840.031 ops/s
# Warmup Iteration  16: 1608495.419 ops/s
# Warmup Iteration  17: 1608091.688 ops/s
# Warmup Iteration  18: 1604086.250 ops/s
# Warmup Iteration  19: 1607016.018 ops/s
# Warmup Iteration  20: 1604595.723 ops/s
# Warmup Iteration  21: 1608586.167 ops/s
# Warmup Iteration  22: 1607437.224 ops/s
# Warmup Iteration  23: 1608008.305 ops/s
# Warmup Iteration  24: 1604008.914 ops/s
# Warmup Iteration  25: 1583424.929 ops/s
# Warmup Iteration  26: 1605945.902 ops/s
# Warmup Iteration  27: 1607263.843 ops/s
# Warmup Iteration  28: 1607842.594 ops/s
# Warmup Iteration  29: 1607346.513 ops/s
# Warmup Iteration  30: 1604933.447 ops/s
Iteration   1: 1605782.530 ops/s
Iteration   2: 1602220.681 ops/s
Iteration   3: 1601323.102 ops/s
Iteration   4: 1606160.275 ops/s
Iteration   5: 1604763.547 ops/s
Iteration   6: 1598243.449 ops/s
Iteration   7: 1603837.702 ops/s
Iteration   8: 1604851.063 ops/s
Iteration   9: 1601398.159 ops/s
Iteration  10: 1602227.673 ops/s
Iteration  11: 1602697.134 ops/s
Iteration  12: 1596460.322 ops/s
Iteration  13: 1603932.378 ops/s
Iteration  14: 1607209.387 ops/s
Iteration  15: 1608352.663 ops/s
Iteration  16: 1606891.277 ops/s
Iteration  17: 1606856.323 ops/s
Iteration  18: 1609509.965 ops/s
Iteration  19: 1596947.341 ops/s
Iteration  20: 1609310.139 ops/s
Iteration  21: 1604906.721 ops/s
Iteration  22: 1606950.168 ops/s
Iteration  23: 1606131.350 ops/s
Iteration  24: 1607601.759 ops/s
Iteration  25: 1603181.374 ops/s
Iteration  26: 1603686.029 ops/s
Iteration  27: 1605713.248 ops/s
Iteration  28: 1607985.106 ops/s
Iteration  29: 1595026.553 ops/s
Iteration  30: 1598158.913 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_newWithAll":
  1603943.878 ±(99.9%) 2591.575 ops/s [Average]
  (min, avg, max) = (1595026.553, 1603943.878, 1609509.965), stdev = 3878.947
  CI (99.9%): [1601352.303, 1606535.452] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ImmutableBooleanSingletonListTest._Benchmark.benchmark_newWithAll  thrpt   30  1603943.878 ± 2591.575  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_newWithOn64ElementCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_newWithOn64ElementCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1137331.324 ops/s
# Warmup Iteration   2: 1177155.997 ops/s
# Warmup Iteration   3: 1289042.137 ops/s
# Warmup Iteration   4: 1499012.854 ops/s
# Warmup Iteration   5: 1499285.015 ops/s
# Warmup Iteration   6: 1498760.770 ops/s
# Warmup Iteration   7: 1496744.657 ops/s
# Warmup Iteration   8: 1501749.737 ops/s
# Warmup Iteration   9: 1498758.182 ops/s
# Warmup Iteration  10: 1502249.997 ops/s
# Warmup Iteration  11: 1499677.933 ops/s
# Warmup Iteration  12: 1500689.361 ops/s
# Warmup Iteration  13: 1498459.483 ops/s
# Warmup Iteration  14: 1500319.287 ops/s
# Warmup Iteration  15: 1495513.733 ops/s
# Warmup Iteration  16: 1229582.384 ops/s
# Warmup Iteration  17: 1501722.636 ops/s
# Warmup Iteration  18: 1501926.942 ops/s
# Warmup Iteration  19: 1495297.127 ops/s
# Warmup Iteration  20: 1499024.192 ops/s
# Warmup Iteration  21: 1499409.916 ops/s
# Warmup Iteration  22: 1497208.490 ops/s
# Warmup Iteration  23: 1490367.322 ops/s
# Warmup Iteration  24: 1500180.971 ops/s
# Warmup Iteration  25: 1500046.136 ops/s
# Warmup Iteration  26: 1499299.531 ops/s
# Warmup Iteration  27: 1500384.672 ops/s
# Warmup Iteration  28: 1496506.408 ops/s
# Warmup Iteration  29: 1500044.386 ops/s
# Warmup Iteration  30: 1499728.517 ops/s
Iteration   1: 1498882.445 ops/s
Iteration   2: 1492327.184 ops/s
Iteration   3: 1502302.020 ops/s
Iteration   4: 1500927.062 ops/s
Iteration   5: 1476024.062 ops/s
Iteration   6: 1503033.027 ops/s
Iteration   7: 1501863.847 ops/s
Iteration   8: 1501724.980 ops/s
Iteration   9: 1500517.828 ops/s
Iteration  10: 1502760.363 ops/s
Iteration  11: 1497628.804 ops/s
Iteration  12: 1497833.295 ops/s
Iteration  13: 1500774.164 ops/s
Iteration  14: 1501132.080 ops/s
Iteration  15: 1497065.343 ops/s
Iteration  16: 1499491.754 ops/s
Iteration  17: 1500917.162 ops/s
Iteration  18: 1463136.037 ops/s
Iteration  19: 1501101.166 ops/s
Iteration  20: 1503090.033 ops/s
Iteration  21: 1499350.158 ops/s
Iteration  22: 1494753.802 ops/s
Iteration  23: 1499999.351 ops/s
Iteration  24: 1501427.899 ops/s
Iteration  25: 1500266.434 ops/s
Iteration  26: 1501900.871 ops/s
Iteration  27: 1495251.177 ops/s
Iteration  28: 1500642.204 ops/s
Iteration  29: 1498938.040 ops/s
Iteration  30: 1499923.952 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_newWithOn64ElementCollection":
  1497832.885 ±(99.9%) 5511.018 ops/s [Average]
  (min, avg, max) = (1463136.037, 1497832.885, 1503090.033), stdev = 8248.632
  CI (99.9%): [1492321.867, 1503343.902] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt        Score      Error  Units
ImmutableBooleanSingletonListTest._Benchmark.benchmark_newWithOn64ElementCollection  thrpt   30  1497832.885 ± 5511.018  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_newWithout$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_newWithout

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7408345.434 ops/s
# Warmup Iteration   2: 12891259.254 ops/s
# Warmup Iteration   3: 13658870.751 ops/s
# Warmup Iteration   4: 14428094.726 ops/s
# Warmup Iteration   5: 14412572.144 ops/s
# Warmup Iteration   6: 14452193.333 ops/s
# Warmup Iteration   7: 14486380.930 ops/s
# Warmup Iteration   8: 14476924.686 ops/s
# Warmup Iteration   9: 14475340.020 ops/s
# Warmup Iteration  10: 14454694.856 ops/s
# Warmup Iteration  11: 14485520.011 ops/s
# Warmup Iteration  12: 14464162.514 ops/s
# Warmup Iteration  13: 14429585.061 ops/s
# Warmup Iteration  14: 14424743.922 ops/s
# Warmup Iteration  15: 14437732.305 ops/s
# Warmup Iteration  16: 14490577.560 ops/s
# Warmup Iteration  17: 14458837.699 ops/s
# Warmup Iteration  18: 14405621.956 ops/s
# Warmup Iteration  19: 14474699.132 ops/s
# Warmup Iteration  20: 14447405.364 ops/s
# Warmup Iteration  21: 14473329.636 ops/s
# Warmup Iteration  22: 14439065.615 ops/s
# Warmup Iteration  23: 14509120.678 ops/s
# Warmup Iteration  24: 14456479.968 ops/s
# Warmup Iteration  25: 14456350.076 ops/s
# Warmup Iteration  26: 14508556.985 ops/s
# Warmup Iteration  27: 14464122.233 ops/s
# Warmup Iteration  28: 14500735.050 ops/s
# Warmup Iteration  29: 14495024.769 ops/s
# Warmup Iteration  30: 14461072.667 ops/s
Iteration   1: 14453857.478 ops/s
Iteration   2: 14383989.546 ops/s
Iteration   3: 14379234.456 ops/s
Iteration   4: 14388488.669 ops/s
Iteration   5: 14469081.259 ops/s
Iteration   6: 14476404.020 ops/s
Iteration   7: 14350862.429 ops/s
Iteration   8: 14383856.829 ops/s
Iteration   9: 14410325.906 ops/s
Iteration  10: 14425512.583 ops/s
Iteration  11: 14410142.621 ops/s
Iteration  12: 14447489.899 ops/s
Iteration  13: 14470361.943 ops/s
Iteration  14: 14435907.333 ops/s
Iteration  15: 14517499.142 ops/s
Iteration  16: 14437939.637 ops/s
Iteration  17: 14458922.629 ops/s
Iteration  18: 14401279.395 ops/s
Iteration  19: 14428259.478 ops/s
Iteration  20: 14444516.597 ops/s
Iteration  21: 14482460.653 ops/s
Iteration  22: 14471322.448 ops/s
Iteration  23: 14451810.015 ops/s
Iteration  24: 14437148.548 ops/s
Iteration  25: 14458025.786 ops/s
Iteration  26: 14449276.950 ops/s
Iteration  27: 14393643.948 ops/s
Iteration  28: 14449605.930 ops/s
Iteration  29: 14431379.993 ops/s
Iteration  30: 14415410.733 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_newWithout":
  14433800.562 ±(99.9%) 24518.502 ops/s [Average]
  (min, avg, max) = (14350862.429, 14433800.562, 14517499.142), stdev = 36698.143
  CI (99.9%): [14409282.060, 14458319.064] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score       Error  Units
ImmutableBooleanSingletonListTest._Benchmark.benchmark_newWithout  thrpt   30  14433800.562 ± 24518.502  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_newWithoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_newWithoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 737006.604 ops/s
# Warmup Iteration   2: 1688059.888 ops/s
# Warmup Iteration   3: 1776687.507 ops/s
# Warmup Iteration   4: 1624660.194 ops/s
# Warmup Iteration   5: 1621204.097 ops/s
# Warmup Iteration   6: 1765942.410 ops/s
# Warmup Iteration   7: 1769230.352 ops/s
# Warmup Iteration   8: 1776676.779 ops/s
# Warmup Iteration   9: 1777543.068 ops/s
# Warmup Iteration  10: 1772815.908 ops/s
# Warmup Iteration  11: 1777286.927 ops/s
# Warmup Iteration  12: 1776022.398 ops/s
# Warmup Iteration  13: 1773463.572 ops/s
# Warmup Iteration  14: 1765712.372 ops/s
# Warmup Iteration  15: 1776189.694 ops/s
# Warmup Iteration  16: 1771018.412 ops/s
# Warmup Iteration  17: 1772541.186 ops/s
# Warmup Iteration  18: 1771688.842 ops/s
# Warmup Iteration  19: 1774165.618 ops/s
# Warmup Iteration  20: 1775330.290 ops/s
# Warmup Iteration  21: 1767568.808 ops/s
# Warmup Iteration  22: 1777170.032 ops/s
# Warmup Iteration  23: 1774712.642 ops/s
# Warmup Iteration  24: 1776707.933 ops/s
# Warmup Iteration  25: 1777633.497 ops/s
# Warmup Iteration  26: 1774707.826 ops/s
# Warmup Iteration  27: 1778121.025 ops/s
# Warmup Iteration  28: 1775736.322 ops/s
# Warmup Iteration  29: 1777078.926 ops/s
# Warmup Iteration  30: 1778602.849 ops/s
Iteration   1: 1771559.127 ops/s
Iteration   2: 1773903.672 ops/s
Iteration   3: 1776054.328 ops/s
Iteration   4: 1777105.477 ops/s
Iteration   5: 1777178.596 ops/s
Iteration   6: 1777159.411 ops/s
Iteration   7: 1778304.083 ops/s
Iteration   8: 1774141.533 ops/s
Iteration   9: 1773503.992 ops/s
Iteration  10: 1778921.826 ops/s
Iteration  11: 1778214.883 ops/s
Iteration  12: 1777552.111 ops/s
Iteration  13: 1779846.974 ops/s
Iteration  14: 1777539.059 ops/s
Iteration  15: 1776215.328 ops/s
Iteration  16: 1779677.914 ops/s
Iteration  17: 1778992.259 ops/s
Iteration  18: 1776679.292 ops/s
Iteration  19: 1773877.656 ops/s
Iteration  20: 1779986.893 ops/s
Iteration  21: 1778801.470 ops/s
Iteration  22: 1775336.555 ops/s
Iteration  23: 1776385.214 ops/s
Iteration  24: 1774783.489 ops/s
Iteration  25: 1781558.095 ops/s
Iteration  26: 1775483.931 ops/s
Iteration  27: 1775672.020 ops/s
Iteration  28: 1773420.345 ops/s
Iteration  29: 1776032.804 ops/s
Iteration  30: 1768828.219 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_newWithoutAll":
  1776423.885 ±(99.9%) 1812.195 ops/s [Average]
  (min, avg, max) = (1768828.219, 1776423.885, 1781558.095), stdev = 2712.409
  CI (99.9%): [1774611.690, 1778236.081] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
ImmutableBooleanSingletonListTest._Benchmark.benchmark_newWithoutAll  thrpt   30  1776423.885 ± 1812.195  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8773899.034 ops/s
# Warmup Iteration   2: 14395931.329 ops/s
# Warmup Iteration   3: 16997614.869 ops/s
# Warmup Iteration   4: 17006736.198 ops/s
# Warmup Iteration   5: 17068189.581 ops/s
# Warmup Iteration   6: 16997797.966 ops/s
# Warmup Iteration   7: 17027546.266 ops/s
# Warmup Iteration   8: 17038783.553 ops/s
# Warmup Iteration   9: 17023990.218 ops/s
# Warmup Iteration  10: 17021351.725 ops/s
# Warmup Iteration  11: 17034008.157 ops/s
# Warmup Iteration  12: 16996263.371 ops/s
# Warmup Iteration  13: 16981532.248 ops/s
# Warmup Iteration  14: 16840544.766 ops/s
# Warmup Iteration  15: 16937857.385 ops/s
# Warmup Iteration  16: 17014567.003 ops/s
# Warmup Iteration  17: 16985169.950 ops/s
# Warmup Iteration  18: 16964772.398 ops/s
# Warmup Iteration  19: 16924237.066 ops/s
# Warmup Iteration  20: 16964676.644 ops/s
# Warmup Iteration  21: 16974932.495 ops/s
# Warmup Iteration  22: 16980557.502 ops/s
# Warmup Iteration  23: 16964769.711 ops/s
# Warmup Iteration  24: 16999322.048 ops/s
# Warmup Iteration  25: 17002618.522 ops/s
# Warmup Iteration  26: 16961951.274 ops/s
# Warmup Iteration  27: 16968128.218 ops/s
# Warmup Iteration  28: 16962751.672 ops/s
# Warmup Iteration  29: 16912492.883 ops/s
# Warmup Iteration  30: 16965751.542 ops/s
Iteration   1: 16910913.467 ops/s
Iteration   2: 16899646.567 ops/s
Iteration   3: 16941678.761 ops/s
Iteration   4: 16982324.534 ops/s
Iteration   5: 16973858.462 ops/s
Iteration   6: 16872142.686 ops/s
Iteration   7: 17007601.317 ops/s
Iteration   8: 16933757.989 ops/s
Iteration   9: 16947417.135 ops/s
Iteration  10: 16934925.175 ops/s
Iteration  11: 16838400.261 ops/s
Iteration  12: 16980607.060 ops/s
Iteration  13: 16968637.820 ops/s
Iteration  14: 17030537.554 ops/s
Iteration  15: 16975388.427 ops/s
Iteration  16: 16917112.160 ops/s
Iteration  17: 17031033.037 ops/s
Iteration  18: 16911374.814 ops/s
Iteration  19: 17028360.396 ops/s
Iteration  20: 16986230.270 ops/s
Iteration  21: 17065819.682 ops/s
Iteration  22: 16976722.205 ops/s
Iteration  23: 16994073.202 ops/s
Iteration  24: 17099356.487 ops/s
Iteration  25: 17047818.965 ops/s
Iteration  26: 16946137.541 ops/s
Iteration  27: 17013458.922 ops/s
Iteration  28: 17026503.878 ops/s
Iteration  29: 16948834.697 ops/s
Iteration  30: 16954129.336 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_noneSatisfy":
  16971493.427 ±(99.9%) 38657.322 ops/s [Average]
  (min, avg, max) = (16838400.261, 16971493.427, 17099356.487), stdev = 57860.465
  CI (99.9%): [16932836.104, 17010150.749] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score       Error  Units
ImmutableBooleanSingletonListTest._Benchmark.benchmark_noneSatisfy  thrpt   30  16971493.427 ± 38657.322  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_notEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_notEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 15193747.583 ops/s
# Warmup Iteration   2: 34282508.441 ops/s
# Warmup Iteration   3: 30265030.566 ops/s
# Warmup Iteration   4: 31766298.074 ops/s
# Warmup Iteration   5: 34273881.065 ops/s
# Warmup Iteration   6: 34308046.706 ops/s
# Warmup Iteration   7: 34148800.622 ops/s
# Warmup Iteration   8: 34325309.825 ops/s
# Warmup Iteration   9: 34192297.499 ops/s
# Warmup Iteration  10: 34260288.514 ops/s
# Warmup Iteration  11: 34130688.661 ops/s
# Warmup Iteration  12: 34221721.572 ops/s
# Warmup Iteration  13: 34224621.331 ops/s
# Warmup Iteration  14: 34245095.962 ops/s
# Warmup Iteration  15: 34076147.001 ops/s
# Warmup Iteration  16: 34228732.073 ops/s
# Warmup Iteration  17: 34272109.485 ops/s
# Warmup Iteration  18: 34216115.178 ops/s
# Warmup Iteration  19: 34222725.624 ops/s
# Warmup Iteration  20: 34144554.468 ops/s
# Warmup Iteration  21: 34180059.349 ops/s
# Warmup Iteration  22: 34237579.227 ops/s
# Warmup Iteration  23: 34273372.940 ops/s
# Warmup Iteration  24: 34258378.121 ops/s
# Warmup Iteration  25: 34283221.018 ops/s
# Warmup Iteration  26: 34277590.112 ops/s
# Warmup Iteration  27: 34299178.300 ops/s
# Warmup Iteration  28: 34270227.723 ops/s
# Warmup Iteration  29: 34175319.646 ops/s
# Warmup Iteration  30: 34317463.141 ops/s
Iteration   1: 34296722.196 ops/s
Iteration   2: 34202634.697 ops/s
Iteration   3: 34317865.246 ops/s
Iteration   4: 34236454.101 ops/s
Iteration   5: 34331780.883 ops/s
Iteration   6: 34189474.835 ops/s
Iteration   7: 34329368.686 ops/s
Iteration   8: 34183434.336 ops/s
Iteration   9: 34258316.695 ops/s
Iteration  10: 34312598.100 ops/s
Iteration  11: 34187785.505 ops/s
Iteration  12: 34321465.889 ops/s
Iteration  13: 34358724.485 ops/s
Iteration  14: 34254774.807 ops/s
Iteration  15: 34185457.123 ops/s
Iteration  16: 34288010.462 ops/s
Iteration  17: 34103291.515 ops/s
Iteration  18: 34238257.431 ops/s
Iteration  19: 34267353.149 ops/s
Iteration  20: 34253344.606 ops/s
Iteration  21: 34190415.711 ops/s
Iteration  22: 34181900.755 ops/s
Iteration  23: 34226786.974 ops/s
Iteration  24: 34295763.725 ops/s
Iteration  25: 34246550.798 ops/s
Iteration  26: 34268925.904 ops/s
Iteration  27: 34212175.073 ops/s
Iteration  28: 34101366.779 ops/s
Iteration  29: 34324289.986 ops/s
Iteration  30: 34294004.250 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_notEmpty":
  34248643.157 ±(99.9%) 43829.504 ops/s [Average]
  (min, avg, max) = (34101366.779, 34248643.157, 34358724.485), stdev = 65601.944
  CI (99.9%): [34204813.652, 34292472.661] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score       Error  Units
ImmutableBooleanSingletonListTest._Benchmark.benchmark_notEmpty  thrpt   30  34248643.157 ± 43829.504  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_reduce$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_reduce

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4987239.046 ops/s
# Warmup Iteration   2: 9999037.767 ops/s
# Warmup Iteration   3: 8433905.802 ops/s
# Warmup Iteration   4: 10013071.304 ops/s
# Warmup Iteration   5: 10004844.614 ops/s
# Warmup Iteration   6: 10004790.048 ops/s
# Warmup Iteration   7: 9951637.033 ops/s
# Warmup Iteration   8: 9982759.342 ops/s
# Warmup Iteration   9: 10006317.650 ops/s
# Warmup Iteration  10: 10000147.930 ops/s
# Warmup Iteration  11: 9993426.740 ops/s
# Warmup Iteration  12: 10024017.294 ops/s
# Warmup Iteration  13: 9995849.921 ops/s
# Warmup Iteration  14: 9980153.975 ops/s
# Warmup Iteration  15: 9970976.253 ops/s
# Warmup Iteration  16: 10010605.304 ops/s
# Warmup Iteration  17: 10024255.993 ops/s
# Warmup Iteration  18: 10017218.787 ops/s
# Warmup Iteration  19: 10024088.782 ops/s
# Warmup Iteration  20: 10012952.460 ops/s
# Warmup Iteration  21: 10036532.787 ops/s
# Warmup Iteration  22: 10037774.149 ops/s
# Warmup Iteration  23: 10025138.490 ops/s
# Warmup Iteration  24: 10042965.145 ops/s
# Warmup Iteration  25: 10000584.929 ops/s
# Warmup Iteration  26: 10010961.534 ops/s
# Warmup Iteration  27: 10019130.965 ops/s
# Warmup Iteration  28: 10031690.405 ops/s
# Warmup Iteration  29: 10019427.152 ops/s
# Warmup Iteration  30: 10013414.444 ops/s
Iteration   1: 9995904.854 ops/s
Iteration   2: 9977216.045 ops/s
Iteration   3: 10013478.148 ops/s
Iteration   4: 10005487.377 ops/s
Iteration   5: 10016583.827 ops/s
Iteration   6: 10046469.440 ops/s
Iteration   7: 10015332.304 ops/s
Iteration   8: 9982483.545 ops/s
Iteration   9: 10036366.039 ops/s
Iteration  10: 10053852.207 ops/s
Iteration  11: 10013806.692 ops/s
Iteration  12: 9993500.180 ops/s
Iteration  13: 10016307.839 ops/s
Iteration  14: 10064627.046 ops/s
Iteration  15: 9991707.515 ops/s
Iteration  16: 10013186.159 ops/s
Iteration  17: 10040696.704 ops/s
Iteration  18: 10036574.963 ops/s
Iteration  19: 10011582.541 ops/s
Iteration  20: 10007298.387 ops/s
Iteration  21: 10034145.726 ops/s
Iteration  22: 10024119.626 ops/s
Iteration  23: 10011147.348 ops/s
Iteration  24: 10013011.127 ops/s
Iteration  25: 10010448.767 ops/s
Iteration  26: 10021657.578 ops/s
Iteration  27: 9983769.997 ops/s
Iteration  28: 10010139.869 ops/s
Iteration  29: 10022083.587 ops/s
Iteration  30: 10018734.651 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_reduce":
  10016057.336 ±(99.9%) 13667.063 ops/s [Average]
  (min, avg, max) = (9977216.045, 10016057.336, 10064627.046), stdev = 20456.219
  CI (99.9%): [10002390.273, 10029724.400] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score       Error  Units
ImmutableBooleanSingletonListTest._Benchmark.benchmark_reduce  thrpt   30  10016057.336 ± 13667.063  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_reduceIfEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_reduceIfEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4998617.560 ops/s
# Warmup Iteration   2: 10042135.827 ops/s
# Warmup Iteration   3: 8556599.538 ops/s
# Warmup Iteration   4: 10005312.594 ops/s
# Warmup Iteration   5: 10071352.820 ops/s
# Warmup Iteration   6: 10054887.059 ops/s
# Warmup Iteration   7: 10038928.140 ops/s
# Warmup Iteration   8: 10033903.014 ops/s
# Warmup Iteration   9: 10061173.716 ops/s
# Warmup Iteration  10: 10055207.027 ops/s
# Warmup Iteration  11: 10048194.268 ops/s
# Warmup Iteration  12: 10059013.302 ops/s
# Warmup Iteration  13: 10080468.663 ops/s
# Warmup Iteration  14: 10067022.215 ops/s
# Warmup Iteration  15: 10060070.016 ops/s
# Warmup Iteration  16: 10056206.980 ops/s
# Warmup Iteration  17: 10093699.853 ops/s
# Warmup Iteration  18: 10070281.355 ops/s
# Warmup Iteration  19: 10096763.460 ops/s
# Warmup Iteration  20: 10083238.973 ops/s
# Warmup Iteration  21: 10107165.884 ops/s
# Warmup Iteration  22: 10060883.824 ops/s
# Warmup Iteration  23: 10082748.627 ops/s
# Warmup Iteration  24: 10063816.914 ops/s
# Warmup Iteration  25: 10075021.793 ops/s
# Warmup Iteration  26: 10100420.874 ops/s
# Warmup Iteration  27: 10080662.784 ops/s
# Warmup Iteration  28: 10059271.019 ops/s
# Warmup Iteration  29: 10105147.874 ops/s
# Warmup Iteration  30: 10113307.542 ops/s
Iteration   1: 10113937.373 ops/s
Iteration   2: 10110746.811 ops/s
Iteration   3: 10104453.659 ops/s
Iteration   4: 10110762.474 ops/s
Iteration   5: 10118612.595 ops/s
Iteration   6: 10099803.387 ops/s
Iteration   7: 10139539.875 ops/s
Iteration   8: 10077835.815 ops/s
Iteration   9: 10129596.004 ops/s
Iteration  10: 10099274.746 ops/s
Iteration  11: 10123503.241 ops/s
Iteration  12: 10086222.451 ops/s
Iteration  13: 10110481.563 ops/s
Iteration  14: 10090639.640 ops/s
Iteration  15: 10096007.405 ops/s
Iteration  16: 10068551.625 ops/s
Iteration  17: 10122274.999 ops/s
Iteration  18: 10087782.742 ops/s
Iteration  19: 10088308.347 ops/s
Iteration  20: 10106862.926 ops/s
Iteration  21: 10126122.951 ops/s
Iteration  22: 10108079.930 ops/s
Iteration  23: 10078893.279 ops/s
Iteration  24: 10068957.277 ops/s
Iteration  25: 10083931.187 ops/s
Iteration  26: 10092037.993 ops/s
Iteration  27: 10062858.397 ops/s
Iteration  28: 10095675.296 ops/s
Iteration  29: 10099020.177 ops/s
Iteration  30: 10070835.836 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_reduceIfEmpty":
  10099053.667 ±(99.9%) 13128.761 ops/s [Average]
  (min, avg, max) = (10062858.397, 10099053.667, 10139539.875), stdev = 19650.513
  CI (99.9%): [10085924.906, 10112182.428] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt         Score       Error  Units
ImmutableBooleanSingletonListTest._Benchmark.benchmark_reduceIfEmpty  thrpt   30  10099053.667 ± 13128.761  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_reduceOnEmptyThrows$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_reduceOnEmptyThrows

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 840190.073 ops/s
# Warmup Iteration   2: 849012.633 ops/s
# Warmup Iteration   3: 1044458.842 ops/s
# Warmup Iteration   4: 1087389.794 ops/s
# Warmup Iteration   5: 1087731.968 ops/s
# Warmup Iteration   6: 1089941.217 ops/s
# Warmup Iteration   7: 1093190.012 ops/s
# Warmup Iteration   8: 1092224.193 ops/s
# Warmup Iteration   9: 1090167.052 ops/s
# Warmup Iteration  10: 1090530.625 ops/s
# Warmup Iteration  11: 1091184.612 ops/s
# Warmup Iteration  12: 1091757.947 ops/s
# Warmup Iteration  13: 923093.116 ops/s
# Warmup Iteration  14: 1091027.234 ops/s
# Warmup Iteration  15: 1091066.938 ops/s
# Warmup Iteration  16: 1089660.108 ops/s
# Warmup Iteration  17: 1155895.025 ops/s
# Warmup Iteration  18: 1158507.018 ops/s
# Warmup Iteration  19: 1158774.925 ops/s
# Warmup Iteration  20: 1159854.666 ops/s
# Warmup Iteration  21: 1158955.328 ops/s
# Warmup Iteration  22: 1157638.338 ops/s
# Warmup Iteration  23: 1157649.127 ops/s
# Warmup Iteration  24: 1157819.897 ops/s
# Warmup Iteration  25: 1158707.339 ops/s
# Warmup Iteration  26: 1156304.087 ops/s
# Warmup Iteration  27: 1157286.582 ops/s
# Warmup Iteration  28: 1156588.998 ops/s
# Warmup Iteration  29: 1157961.341 ops/s
# Warmup Iteration  30: 1156740.713 ops/s
Iteration   1: 1157305.459 ops/s
Iteration   2: 1155838.125 ops/s
Iteration   3: 1155253.331 ops/s
Iteration   4: 1156064.233 ops/s
Iteration   5: 1157663.053 ops/s
Iteration   6: 1159046.117 ops/s
Iteration   7: 1155548.088 ops/s
Iteration   8: 1156679.264 ops/s
Iteration   9: 1156965.085 ops/s
Iteration  10: 1153998.607 ops/s
Iteration  11: 1158547.933 ops/s
Iteration  12: 1155564.925 ops/s
Iteration  13: 1156337.169 ops/s
Iteration  14: 1155353.722 ops/s
Iteration  15: 1158184.125 ops/s
Iteration  16: 1157734.478 ops/s
Iteration  17: 1153926.202 ops/s
Iteration  18: 1158376.349 ops/s
Iteration  19: 1159031.058 ops/s
Iteration  20: 1159254.784 ops/s
Iteration  21: 1154184.004 ops/s
Iteration  22: 1159011.962 ops/s
Iteration  23: 1159058.243 ops/s
Iteration  24: 1156655.261 ops/s
Iteration  25: 1158310.255 ops/s
Iteration  26: 1157045.967 ops/s
Iteration  27: 1161796.880 ops/s
Iteration  28: 1152919.431 ops/s
Iteration  29: 1156782.207 ops/s
Iteration  30: 1151209.880 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_reduceOnEmptyThrows":
  1156788.207 ±(99.9%) 1474.529 ops/s [Average]
  (min, avg, max) = (1151209.880, 1156788.207, 1161796.880), stdev = 2207.005
  CI (99.9%): [1155313.678, 1158262.735] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score      Error  Units
ImmutableBooleanSingletonListTest._Benchmark.benchmark_reduceOnEmptyThrows  thrpt   30  1156788.207 ± 1474.529  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1859541.436 ops/s
# Warmup Iteration   2: 4194728.833 ops/s
# Warmup Iteration   3: 3502918.749 ops/s
# Warmup Iteration   4: 4241100.060 ops/s
# Warmup Iteration   5: 4234844.100 ops/s
# Warmup Iteration   6: 4248172.200 ops/s
# Warmup Iteration   7: 4252046.094 ops/s
# Warmup Iteration   8: 4243029.521 ops/s
# Warmup Iteration   9: 4248597.348 ops/s
# Warmup Iteration  10: 4250318.585 ops/s
# Warmup Iteration  11: 4251347.549 ops/s
# Warmup Iteration  12: 4242271.595 ops/s
# Warmup Iteration  13: 4218614.379 ops/s
# Warmup Iteration  14: 4232686.387 ops/s
# Warmup Iteration  15: 4246023.861 ops/s
# Warmup Iteration  16: 4251035.777 ops/s
# Warmup Iteration  17: 4232903.898 ops/s
# Warmup Iteration  18: 4246728.868 ops/s
# Warmup Iteration  19: 4252574.409 ops/s
# Warmup Iteration  20: 4258053.725 ops/s
# Warmup Iteration  21: 4252371.864 ops/s
# Warmup Iteration  22: 4247283.007 ops/s
# Warmup Iteration  23: 4249892.027 ops/s
# Warmup Iteration  24: 4251395.533 ops/s
# Warmup Iteration  25: 4242771.923 ops/s
# Warmup Iteration  26: 4241608.775 ops/s
# Warmup Iteration  27: 4251444.336 ops/s
# Warmup Iteration  28: 4254774.302 ops/s
# Warmup Iteration  29: 4248496.675 ops/s
# Warmup Iteration  30: 4249458.396 ops/s
Iteration   1: 4235394.354 ops/s
Iteration   2: 4260030.825 ops/s
Iteration   3: 4239246.472 ops/s
Iteration   4: 4242100.163 ops/s
Iteration   5: 4257546.807 ops/s
Iteration   6: 4249528.613 ops/s
Iteration   7: 4247923.371 ops/s
Iteration   8: 4243585.389 ops/s
Iteration   9: 4247101.396 ops/s
Iteration  10: 4247347.520 ops/s
Iteration  11: 4246715.667 ops/s
Iteration  12: 4250359.715 ops/s
Iteration  13: 4241133.053 ops/s
Iteration  14: 4240265.365 ops/s
Iteration  15: 4246817.515 ops/s
Iteration  16: 4261325.209 ops/s
Iteration  17: 4244064.574 ops/s
Iteration  18: 4256867.645 ops/s
Iteration  19: 4252399.701 ops/s
Iteration  20: 4242058.327 ops/s
Iteration  21: 4236947.967 ops/s
Iteration  22: 4229008.268 ops/s
Iteration  23: 4247386.638 ops/s
Iteration  24: 4238914.151 ops/s
Iteration  25: 4230093.192 ops/s
Iteration  26: 4225288.664 ops/s
Iteration  27: 4232644.496 ops/s
Iteration  28: 4248359.466 ops/s
Iteration  29: 4248980.927 ops/s
Iteration  30: 4247444.935 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_reject":
  4244562.679 ±(99.9%) 5893.015 ops/s [Average]
  (min, avg, max) = (4225288.664, 4244562.679, 4261325.209), stdev = 8820.389
  CI (99.9%): [4238669.664, 4250455.695] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableBooleanSingletonListTest._Benchmark.benchmark_reject  thrpt   30  4244562.679 ± 5893.015  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1892925.804 ops/s
# Warmup Iteration   2: 4417685.094 ops/s
# Warmup Iteration   3: 3645094.381 ops/s
# Warmup Iteration   4: 4405457.247 ops/s
# Warmup Iteration   5: 4389592.380 ops/s
# Warmup Iteration   6: 4404833.961 ops/s
# Warmup Iteration   7: 4397930.625 ops/s
# Warmup Iteration   8: 4407425.441 ops/s
# Warmup Iteration   9: 4400874.209 ops/s
# Warmup Iteration  10: 4410921.564 ops/s
# Warmup Iteration  11: 4398595.278 ops/s
# Warmup Iteration  12: 4409400.781 ops/s
# Warmup Iteration  13: 4404713.014 ops/s
# Warmup Iteration  14: 4407741.912 ops/s
# Warmup Iteration  15: 4410430.847 ops/s
# Warmup Iteration  16: 4411966.048 ops/s
# Warmup Iteration  17: 4406155.215 ops/s
# Warmup Iteration  18: 4403484.277 ops/s
# Warmup Iteration  19: 4396708.828 ops/s
# Warmup Iteration  20: 4399984.850 ops/s
# Warmup Iteration  21: 4405796.939 ops/s
# Warmup Iteration  22: 4394679.573 ops/s
# Warmup Iteration  23: 4407320.189 ops/s
# Warmup Iteration  24: 4403043.412 ops/s
# Warmup Iteration  25: 4395905.777 ops/s
# Warmup Iteration  26: 4394379.911 ops/s
# Warmup Iteration  27: 4400057.245 ops/s
# Warmup Iteration  28: 4393125.436 ops/s
# Warmup Iteration  29: 4388232.458 ops/s
# Warmup Iteration  30: 4401949.956 ops/s
Iteration   1: 4411912.228 ops/s
Iteration   2: 4407414.183 ops/s
Iteration   3: 4413279.571 ops/s
Iteration   4: 4409426.721 ops/s
Iteration   5: 4414099.255 ops/s
Iteration   6: 4406408.314 ops/s
Iteration   7: 4399323.413 ops/s
Iteration   8: 4416970.451 ops/s
Iteration   9: 4408405.115 ops/s
Iteration  10: 4412154.470 ops/s
Iteration  11: 4407108.424 ops/s
Iteration  12: 4405213.054 ops/s
Iteration  13: 4385762.653 ops/s
Iteration  14: 4379426.401 ops/s
Iteration  15: 4382555.250 ops/s
Iteration  16: 4410477.345 ops/s
Iteration  17: 4403963.431 ops/s
Iteration  18: 4413433.994 ops/s
Iteration  19: 4404167.024 ops/s
Iteration  20: 4410699.297 ops/s
Iteration  21: 4402325.338 ops/s
Iteration  22: 4403260.370 ops/s
Iteration  23: 4398057.323 ops/s
Iteration  24: 4411391.700 ops/s
Iteration  25: 4398970.377 ops/s
Iteration  26: 4403841.679 ops/s
Iteration  27: 4391556.557 ops/s
Iteration  28: 4407729.623 ops/s
Iteration  29: 4417419.783 ops/s
Iteration  30: 4413940.091 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_select":
  4405023.115 ±(99.9%) 6436.865 ops/s [Average]
  (min, avg, max) = (4379426.401, 4405023.115, 4417419.783), stdev = 9634.397
  CI (99.9%): [4398586.250, 4411459.980] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableBooleanSingletonListTest._Benchmark.benchmark_select  thrpt   30  4405023.115 ± 6436.865  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6834407.052 ops/s
# Warmup Iteration   2: 10849814.039 ops/s
# Warmup Iteration   3: 12721310.626 ops/s
# Warmup Iteration   4: 12724651.551 ops/s
# Warmup Iteration   5: 12763081.769 ops/s
# Warmup Iteration   6: 12678861.685 ops/s
# Warmup Iteration   7: 12683069.141 ops/s
# Warmup Iteration   8: 12686591.597 ops/s
# Warmup Iteration   9: 12673323.348 ops/s
# Warmup Iteration  10: 12736172.905 ops/s
# Warmup Iteration  11: 12707385.823 ops/s
# Warmup Iteration  12: 12692394.440 ops/s
# Warmup Iteration  13: 12722702.618 ops/s
# Warmup Iteration  14: 12687462.532 ops/s
# Warmup Iteration  15: 12654756.234 ops/s
# Warmup Iteration  16: 12669663.490 ops/s
# Warmup Iteration  17: 12680782.939 ops/s
# Warmup Iteration  18: 12742620.791 ops/s
# Warmup Iteration  19: 12741318.739 ops/s
# Warmup Iteration  20: 12701166.124 ops/s
# Warmup Iteration  21: 12748892.782 ops/s
# Warmup Iteration  22: 12732416.239 ops/s
# Warmup Iteration  23: 12746431.128 ops/s
# Warmup Iteration  24: 12692589.950 ops/s
# Warmup Iteration  25: 12647495.282 ops/s
# Warmup Iteration  26: 12681148.813 ops/s
# Warmup Iteration  27: 12696489.687 ops/s
# Warmup Iteration  28: 12714473.027 ops/s
# Warmup Iteration  29: 12660627.957 ops/s
# Warmup Iteration  30: 12658592.490 ops/s
Iteration   1: 12748843.893 ops/s
Iteration   2: 12660232.508 ops/s
Iteration   3: 12731658.144 ops/s
Iteration   4: 12759732.852 ops/s
Iteration   5: 12608570.397 ops/s
Iteration   6: 12687385.353 ops/s
Iteration   7: 12713995.597 ops/s
Iteration   8: 12713706.741 ops/s
Iteration   9: 12643561.436 ops/s
Iteration  10: 12657561.260 ops/s
Iteration  11: 12723700.596 ops/s
Iteration  12: 12678017.450 ops/s
Iteration  13: 12740394.434 ops/s
Iteration  14: 12762366.469 ops/s
Iteration  15: 12689782.138 ops/s
Iteration  16: 12760601.077 ops/s
Iteration  17: 12724121.882 ops/s
Iteration  18: 12667687.239 ops/s
Iteration  19: 12656443.905 ops/s
Iteration  20: 12720005.215 ops/s
Iteration  21: 12735506.028 ops/s
Iteration  22: 12594000.218 ops/s
Iteration  23: 12665367.687 ops/s
Iteration  24: 12736382.885 ops/s
Iteration  25: 12648184.532 ops/s
Iteration  26: 12710346.390 ops/s
Iteration  27: 12745102.237 ops/s
Iteration  28: 12678883.113 ops/s
Iteration  29: 12568060.394 ops/s
Iteration  30: 12640592.150 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_size":
  12692359.807 ±(99.9%) 34240.815 ops/s [Average]
  (min, avg, max) = (12568060.394, 12692359.807, 12762366.469), stdev = 51250.043
  CI (99.9%): [12658118.993, 12726600.622] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
ImmutableBooleanSingletonListTest._Benchmark.benchmark_size  thrpt   30  12692359.807 ± 34240.815  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_subList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_subList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 824359.365 ops/s
# Warmup Iteration   2: 838585.295 ops/s
# Warmup Iteration   3: 1030606.655 ops/s
# Warmup Iteration   4: 1079576.694 ops/s
# Warmup Iteration   5: 1080129.235 ops/s
# Warmup Iteration   6: 1078768.868 ops/s
# Warmup Iteration   7: 1079097.772 ops/s
# Warmup Iteration   8: 1077481.671 ops/s
# Warmup Iteration   9: 1077972.138 ops/s
# Warmup Iteration  10: 1078683.139 ops/s
# Warmup Iteration  11: 1075815.436 ops/s
# Warmup Iteration  12: 1077294.697 ops/s
# Warmup Iteration  13: 907233.810 ops/s
# Warmup Iteration  14: 1076059.547 ops/s
# Warmup Iteration  15: 1079940.820 ops/s
# Warmup Iteration  16: 1078205.690 ops/s
# Warmup Iteration  17: 1146600.480 ops/s
# Warmup Iteration  18: 1149025.945 ops/s
# Warmup Iteration  19: 1147176.604 ops/s
# Warmup Iteration  20: 1146259.190 ops/s
# Warmup Iteration  21: 1142779.097 ops/s
# Warmup Iteration  22: 1144219.909 ops/s
# Warmup Iteration  23: 1149125.188 ops/s
# Warmup Iteration  24: 1147118.722 ops/s
# Warmup Iteration  25: 1146620.449 ops/s
# Warmup Iteration  26: 1148266.281 ops/s
# Warmup Iteration  27: 1147811.719 ops/s
# Warmup Iteration  28: 1145456.173 ops/s
# Warmup Iteration  29: 1145410.155 ops/s
# Warmup Iteration  30: 1144419.924 ops/s
Iteration   1: 1146191.623 ops/s
Iteration   2: 1147038.791 ops/s
Iteration   3: 1139629.175 ops/s
Iteration   4: 1148507.056 ops/s
Iteration   5: 1147566.684 ops/s
Iteration   6: 1150261.353 ops/s
Iteration   7: 1148013.771 ops/s
Iteration   8: 1146050.876 ops/s
Iteration   9: 1141517.207 ops/s
Iteration  10: 1149720.772 ops/s
Iteration  11: 1145641.659 ops/s
Iteration  12: 1144216.031 ops/s
Iteration  13: 1144379.918 ops/s
Iteration  14: 1145485.613 ops/s
Iteration  15: 1148341.275 ops/s
Iteration  16: 1142012.666 ops/s
Iteration  17: 1144038.396 ops/s
Iteration  18: 1144111.373 ops/s
Iteration  19: 1144904.671 ops/s
Iteration  20: 1148263.158 ops/s
Iteration  21: 1142523.701 ops/s
Iteration  22: 1142705.135 ops/s
Iteration  23: 1144618.528 ops/s
Iteration  24: 1147864.702 ops/s
Iteration  25: 1145761.787 ops/s
Iteration  26: 1148509.408 ops/s
Iteration  27: 1143047.945 ops/s
Iteration  28: 1145135.056 ops/s
Iteration  29: 1150854.837 ops/s
Iteration  30: 1146615.634 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_subList":
  1145784.293 ±(99.9%) 1817.515 ops/s [Average]
  (min, avg, max) = (1139629.175, 1145784.293, 1150854.837), stdev = 2720.372
  CI (99.9%): [1143966.778, 1147601.809] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ImmutableBooleanSingletonListTest._Benchmark.benchmark_subList  thrpt   30  1145784.293 ± 1817.515  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_testEquals$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_testEquals

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 34595.523 ops/s
# Warmup Iteration   2: 57160.102 ops/s
# Warmup Iteration   3: 67181.474 ops/s
# Warmup Iteration   4: 66829.647 ops/s
# Warmup Iteration   5: 66752.948 ops/s
# Warmup Iteration   6: 57245.579 ops/s
# Warmup Iteration   7: 67072.898 ops/s
# Warmup Iteration   8: 66846.009 ops/s
# Warmup Iteration   9: 66921.043 ops/s
# Warmup Iteration  10: 66830.726 ops/s
# Warmup Iteration  11: 66888.795 ops/s
# Warmup Iteration  12: 66900.657 ops/s
# Warmup Iteration  13: 66961.838 ops/s
# Warmup Iteration  14: 67039.874 ops/s
# Warmup Iteration  15: 66802.625 ops/s
# Warmup Iteration  16: 66937.716 ops/s
# Warmup Iteration  17: 66939.765 ops/s
# Warmup Iteration  18: 66770.803 ops/s
# Warmup Iteration  19: 66954.611 ops/s
# Warmup Iteration  20: 66930.269 ops/s
# Warmup Iteration  21: 67045.039 ops/s
# Warmup Iteration  22: 66955.880 ops/s
# Warmup Iteration  23: 66763.334 ops/s
# Warmup Iteration  24: 66873.765 ops/s
# Warmup Iteration  25: 66904.304 ops/s
# Warmup Iteration  26: 66992.087 ops/s
# Warmup Iteration  27: 67095.730 ops/s
# Warmup Iteration  28: 67180.151 ops/s
# Warmup Iteration  29: 67053.916 ops/s
# Warmup Iteration  30: 67030.333 ops/s
Iteration   1: 66853.788 ops/s
Iteration   2: 67027.049 ops/s
Iteration   3: 67191.312 ops/s
Iteration   4: 67249.172 ops/s
Iteration   5: 67510.682 ops/s
Iteration   6: 67235.433 ops/s
Iteration   7: 67300.862 ops/s
Iteration   8: 67100.227 ops/s
Iteration   9: 67289.096 ops/s
Iteration  10: 67149.051 ops/s
Iteration  11: 67128.182 ops/s
Iteration  12: 66801.871 ops/s
Iteration  13: 67218.242 ops/s
Iteration  14: 66878.736 ops/s
Iteration  15: 65996.532 ops/s
Iteration  16: 66754.575 ops/s
Iteration  17: 66397.445 ops/s
Iteration  18: 66803.544 ops/s
Iteration  19: 66531.485 ops/s
Iteration  20: 66707.608 ops/s
Iteration  21: 66711.481 ops/s
Iteration  22: 66721.112 ops/s
Iteration  23: 66380.342 ops/s
Iteration  24: 66928.766 ops/s
Iteration  25: 66494.104 ops/s
Iteration  26: 66701.879 ops/s
Iteration  27: 66577.101 ops/s
Iteration  28: 66973.408 ops/s
Iteration  29: 66639.425 ops/s
Iteration  30: 66619.302 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_testEquals":
  66862.394 ±(99.9%) 225.941 ops/s [Average]
  (min, avg, max) = (65996.532, 66862.394, 67510.682), stdev = 338.178
  CI (99.9%): [66636.453, 67088.334] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt      Score     Error  Units
ImmutableBooleanSingletonListTest._Benchmark.benchmark_testEquals  thrpt   30  66862.394 ± 225.941  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_testHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_testHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5676322.200 ops/s
# Warmup Iteration   2: 11993095.899 ops/s
# Warmup Iteration   3: 9578182.228 ops/s
# Warmup Iteration   4: 11423194.621 ops/s
# Warmup Iteration   5: 11419079.984 ops/s
# Warmup Iteration   6: 11418235.106 ops/s
# Warmup Iteration   7: 11424417.150 ops/s
# Warmup Iteration   8: 11402840.707 ops/s
# Warmup Iteration   9: 11420788.770 ops/s
# Warmup Iteration  10: 11428009.219 ops/s
# Warmup Iteration  11: 11411721.183 ops/s
# Warmup Iteration  12: 11393334.391 ops/s
# Warmup Iteration  13: 11443156.789 ops/s
# Warmup Iteration  14: 11410731.207 ops/s
# Warmup Iteration  15: 11426777.492 ops/s
# Warmup Iteration  16: 11446758.943 ops/s
# Warmup Iteration  17: 11409574.414 ops/s
# Warmup Iteration  18: 11393547.681 ops/s
# Warmup Iteration  19: 11410597.670 ops/s
# Warmup Iteration  20: 11410957.983 ops/s
# Warmup Iteration  21: 11425303.248 ops/s
# Warmup Iteration  22: 11429691.342 ops/s
# Warmup Iteration  23: 11419816.775 ops/s
# Warmup Iteration  24: 11442850.291 ops/s
# Warmup Iteration  25: 11432426.810 ops/s
# Warmup Iteration  26: 11408044.787 ops/s
# Warmup Iteration  27: 11419264.930 ops/s
# Warmup Iteration  28: 11390834.469 ops/s
# Warmup Iteration  29: 11431648.308 ops/s
# Warmup Iteration  30: 11405258.375 ops/s
Iteration   1: 11431119.745 ops/s
Iteration   2: 11401342.560 ops/s
Iteration   3: 11430728.161 ops/s
Iteration   4: 11427619.989 ops/s
Iteration   5: 11437195.243 ops/s
Iteration   6: 11435595.816 ops/s
Iteration   7: 11445591.459 ops/s
Iteration   8: 11411338.345 ops/s
Iteration   9: 11436696.576 ops/s
Iteration  10: 11425938.374 ops/s
Iteration  11: 11425405.696 ops/s
Iteration  12: 11422700.062 ops/s
Iteration  13: 11459922.594 ops/s
Iteration  14: 11430694.166 ops/s
Iteration  15: 11439964.408 ops/s
Iteration  16: 11440575.868 ops/s
Iteration  17: 11396447.396 ops/s
Iteration  18: 11413360.923 ops/s
Iteration  19: 11401266.486 ops/s
Iteration  20: 11393826.891 ops/s
Iteration  21: 11397324.963 ops/s
Iteration  22: 11430769.667 ops/s
Iteration  23: 11399398.127 ops/s
Iteration  24: 11425088.227 ops/s
Iteration  25: 11454077.178 ops/s
Iteration  26: 11417664.751 ops/s
Iteration  27: 11448194.369 ops/s
Iteration  28: 11429476.680 ops/s
Iteration  29: 11434772.670 ops/s
Iteration  30: 11418985.109 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_testHashCode":
  11425436.083 ±(99.9%) 11700.268 ops/s [Average]
  (min, avg, max) = (11393826.891, 11425436.083, 11459922.594), stdev = 17512.411
  CI (99.9%): [11413735.816, 11437136.351] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt         Score       Error  Units
ImmutableBooleanSingletonListTest._Benchmark.benchmark_testHashCode  thrpt   30  11425436.083 ± 11700.268  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_testNewWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_testNewWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 939214.500 ops/s
# Warmup Iteration   2: 2277142.195 ops/s
# Warmup Iteration   3: 2066462.357 ops/s
# Warmup Iteration   4: 2120173.667 ops/s
# Warmup Iteration   5: 2280164.617 ops/s
# Warmup Iteration   6: 2284239.278 ops/s
# Warmup Iteration   7: 2285000.505 ops/s
# Warmup Iteration   8: 2279187.124 ops/s
# Warmup Iteration   9: 2279919.435 ops/s
# Warmup Iteration  10: 2283755.159 ops/s
# Warmup Iteration  11: 2283002.766 ops/s
# Warmup Iteration  12: 2279704.363 ops/s
# Warmup Iteration  13: 2279549.204 ops/s
# Warmup Iteration  14: 2283211.880 ops/s
# Warmup Iteration  15: 2280291.412 ops/s
# Warmup Iteration  16: 2280268.723 ops/s
# Warmup Iteration  17: 2284237.509 ops/s
# Warmup Iteration  18: 2281381.160 ops/s
# Warmup Iteration  19: 2278702.890 ops/s
# Warmup Iteration  20: 2285301.571 ops/s
# Warmup Iteration  21: 2286677.943 ops/s
# Warmup Iteration  22: 2284058.982 ops/s
# Warmup Iteration  23: 2284242.219 ops/s
# Warmup Iteration  24: 2279173.353 ops/s
# Warmup Iteration  25: 2283911.637 ops/s
# Warmup Iteration  26: 2283069.184 ops/s
# Warmup Iteration  27: 2284114.404 ops/s
# Warmup Iteration  28: 2278228.693 ops/s
# Warmup Iteration  29: 2285219.854 ops/s
# Warmup Iteration  30: 2281797.518 ops/s
Iteration   1: 2278501.336 ops/s
Iteration   2: 2282729.598 ops/s
Iteration   3: 2279632.406 ops/s
Iteration   4: 2279576.849 ops/s
Iteration   5: 2278690.330 ops/s
Iteration   6: 2280193.268 ops/s
Iteration   7: 2276440.579 ops/s
Iteration   8: 2275615.060 ops/s
Iteration   9: 2281658.399 ops/s
Iteration  10: 2275188.701 ops/s
Iteration  11: 2278109.579 ops/s
Iteration  12: 2272380.883 ops/s
Iteration  13: 2282359.416 ops/s
Iteration  14: 2279848.101 ops/s
Iteration  15: 2285667.027 ops/s
Iteration  16: 2281614.428 ops/s
Iteration  17: 2282556.147 ops/s
Iteration  18: 2291950.912 ops/s
Iteration  19: 2277239.669 ops/s
Iteration  20: 2284435.690 ops/s
Iteration  21: 2280744.507 ops/s
Iteration  22: 2272749.962 ops/s
Iteration  23: 2281888.174 ops/s
Iteration  24: 2285067.653 ops/s
Iteration  25: 2278243.987 ops/s
Iteration  26: 2280415.125 ops/s
Iteration  27: 2280184.546 ops/s
Iteration  28: 2284086.051 ops/s
Iteration  29: 2279508.993 ops/s
Iteration  30: 2285288.521 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_testNewWith":
  2280418.863 ±(99.9%) 2699.512 ops/s [Average]
  (min, avg, max) = (2272380.883, 2280418.863, 2291950.912), stdev = 4040.503
  CI (99.9%): [2277719.351, 2283118.375] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
ImmutableBooleanSingletonListTest._Benchmark.benchmark_testNewWith  thrpt   30  2280418.863 ± 2699.512  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3224049.586 ops/s
# Warmup Iteration   2: 6772917.133 ops/s
# Warmup Iteration   3: 5778011.474 ops/s
# Warmup Iteration   4: 6852809.805 ops/s
# Warmup Iteration   5: 6868335.248 ops/s
# Warmup Iteration   6: 6845976.269 ops/s
# Warmup Iteration   7: 6855892.840 ops/s
# Warmup Iteration   8: 6889562.260 ops/s
# Warmup Iteration   9: 6851683.608 ops/s
# Warmup Iteration  10: 6863074.394 ops/s
# Warmup Iteration  11: 6877259.273 ops/s
# Warmup Iteration  12: 6858950.949 ops/s
# Warmup Iteration  13: 6850464.729 ops/s
# Warmup Iteration  14: 6863441.578 ops/s
# Warmup Iteration  15: 6871813.559 ops/s
# Warmup Iteration  16: 6849049.796 ops/s
# Warmup Iteration  17: 6878318.313 ops/s
# Warmup Iteration  18: 6875406.430 ops/s
# Warmup Iteration  19: 6847870.970 ops/s
# Warmup Iteration  20: 6842545.365 ops/s
# Warmup Iteration  21: 6865614.944 ops/s
# Warmup Iteration  22: 6836745.156 ops/s
# Warmup Iteration  23: 6883993.392 ops/s
# Warmup Iteration  24: 6869290.956 ops/s
# Warmup Iteration  25: 6837923.343 ops/s
# Warmup Iteration  26: 6837687.423 ops/s
# Warmup Iteration  27: 6849031.527 ops/s
# Warmup Iteration  28: 6888899.239 ops/s
# Warmup Iteration  29: 6863725.762 ops/s
# Warmup Iteration  30: 6867789.631 ops/s
Iteration   1: 6877719.486 ops/s
Iteration   2: 6860361.605 ops/s
Iteration   3: 6870848.217 ops/s
Iteration   4: 6899943.120 ops/s
Iteration   5: 6881477.641 ops/s
Iteration   6: 6895075.125 ops/s
Iteration   7: 6893401.700 ops/s
Iteration   8: 6871045.756 ops/s
Iteration   9: 6880792.155 ops/s
Iteration  10: 6936960.888 ops/s
Iteration  11: 6882228.226 ops/s
Iteration  12: 6893398.566 ops/s
Iteration  13: 6928451.881 ops/s
Iteration  14: 6849892.463 ops/s
Iteration  15: 6893835.892 ops/s
Iteration  16: 6911290.124 ops/s
Iteration  17: 6888789.261 ops/s
Iteration  18: 6863238.887 ops/s
Iteration  19: 6851175.029 ops/s
Iteration  20: 6875202.053 ops/s
Iteration  21: 6867451.520 ops/s
Iteration  22: 6881435.636 ops/s
Iteration  23: 6938054.163 ops/s
Iteration  24: 6867681.499 ops/s
Iteration  25: 6873759.044 ops/s
Iteration  26: 6852917.007 ops/s
Iteration  27: 6846924.658 ops/s
Iteration  28: 6866217.161 ops/s
Iteration  29: 6889167.000 ops/s
Iteration  30: 6880149.737 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_testToString":
  6882296.183 ±(99.9%) 15738.080 ops/s [Average]
  (min, avg, max) = (6846924.658, 6882296.183, 6938054.163), stdev = 23556.018
  CI (99.9%): [6866558.104, 6898034.263] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
ImmutableBooleanSingletonListTest._Benchmark.benchmark_testToString  thrpt   30  6882296.183 ± 15738.080  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5065565.587 ops/s
# Warmup Iteration   2: 10939595.947 ops/s
# Warmup Iteration   3: 9215400.398 ops/s
# Warmup Iteration   4: 11114742.948 ops/s
# Warmup Iteration   5: 11120992.107 ops/s
# Warmup Iteration   6: 11141019.334 ops/s
# Warmup Iteration   7: 11124203.323 ops/s
# Warmup Iteration   8: 11076085.819 ops/s
# Warmup Iteration   9: 11115165.829 ops/s
# Warmup Iteration  10: 11078704.576 ops/s
# Warmup Iteration  11: 11070599.626 ops/s
# Warmup Iteration  12: 11077832.797 ops/s
# Warmup Iteration  13: 11063524.205 ops/s
# Warmup Iteration  14: 11127124.615 ops/s
# Warmup Iteration  15: 11128676.587 ops/s
# Warmup Iteration  16: 11137662.967 ops/s
# Warmup Iteration  17: 11116335.322 ops/s
# Warmup Iteration  18: 11163939.824 ops/s
# Warmup Iteration  19: 11109086.418 ops/s
# Warmup Iteration  20: 11159551.741 ops/s
# Warmup Iteration  21: 11118026.456 ops/s
# Warmup Iteration  22: 11107927.133 ops/s
# Warmup Iteration  23: 11125409.198 ops/s
# Warmup Iteration  24: 11138882.533 ops/s
# Warmup Iteration  25: 11139788.949 ops/s
# Warmup Iteration  26: 11140260.909 ops/s
# Warmup Iteration  27: 11109743.293 ops/s
# Warmup Iteration  28: 11160103.187 ops/s
# Warmup Iteration  29: 11080314.291 ops/s
# Warmup Iteration  30: 11109027.441 ops/s
Iteration   1: 11115170.518 ops/s
Iteration   2: 11136824.964 ops/s
Iteration   3: 11147507.531 ops/s
Iteration   4: 11169236.248 ops/s
Iteration   5: 11147559.143 ops/s
Iteration   6: 11103434.781 ops/s
Iteration   7: 11091468.027 ops/s
Iteration   8: 11110552.142 ops/s
Iteration   9: 11098662.363 ops/s
Iteration  10: 11075453.473 ops/s
Iteration  11: 11041572.906 ops/s
Iteration  12: 11105079.095 ops/s
Iteration  13: 11107769.990 ops/s
Iteration  14: 11159199.345 ops/s
Iteration  15: 11140651.132 ops/s
Iteration  16: 11130565.785 ops/s
Iteration  17: 11096345.961 ops/s
Iteration  18: 11155468.811 ops/s
Iteration  19: 11071662.193 ops/s
Iteration  20: 11110027.673 ops/s
Iteration  21: 11122375.166 ops/s
Iteration  22: 11124027.407 ops/s
Iteration  23: 11100985.202 ops/s
Iteration  24: 11094658.087 ops/s
Iteration  25: 11136764.963 ops/s
Iteration  26: 11156153.321 ops/s
Iteration  27: 11062624.858 ops/s
Iteration  28: 11115935.313 ops/s
Iteration  29: 11088169.327 ops/s
Iteration  30: 11139311.551 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_toArray":
  11115173.909 ±(99.9%) 20508.378 ops/s [Average]
  (min, avg, max) = (11041572.906, 11115173.909, 11169236.248), stdev = 30695.977
  CI (99.9%): [11094665.531, 11135682.287] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score       Error  Units
ImmutableBooleanSingletonListTest._Benchmark.benchmark_toArray  thrpt   30  11115173.909 ± 20508.378  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_toBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_toBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4252912.770 ops/s
# Warmup Iteration   2: 9252818.285 ops/s
# Warmup Iteration   3: 9426920.741 ops/s
# Warmup Iteration   4: 7839024.235 ops/s
# Warmup Iteration   5: 9421277.130 ops/s
# Warmup Iteration   6: 9426473.505 ops/s
# Warmup Iteration   7: 9431387.733 ops/s
# Warmup Iteration   8: 9448830.118 ops/s
# Warmup Iteration   9: 9429802.422 ops/s
# Warmup Iteration  10: 9432600.821 ops/s
# Warmup Iteration  11: 9441403.378 ops/s
# Warmup Iteration  12: 9444530.006 ops/s
# Warmup Iteration  13: 9422086.692 ops/s
# Warmup Iteration  14: 9429993.035 ops/s
# Warmup Iteration  15: 9442466.677 ops/s
# Warmup Iteration  16: 9436120.270 ops/s
# Warmup Iteration  17: 9420039.583 ops/s
# Warmup Iteration  18: 9432343.612 ops/s
# Warmup Iteration  19: 9443733.594 ops/s
# Warmup Iteration  20: 9435135.342 ops/s
# Warmup Iteration  21: 9436571.779 ops/s
# Warmup Iteration  22: 9440923.327 ops/s
# Warmup Iteration  23: 9435179.462 ops/s
# Warmup Iteration  24: 9448914.549 ops/s
# Warmup Iteration  25: 9440716.073 ops/s
# Warmup Iteration  26: 9429403.487 ops/s
# Warmup Iteration  27: 9423761.077 ops/s
# Warmup Iteration  28: 9437483.046 ops/s
# Warmup Iteration  29: 9434821.867 ops/s
# Warmup Iteration  30: 9436868.552 ops/s
Iteration   1: 9444602.109 ops/s
Iteration   2: 9425523.834 ops/s
Iteration   3: 9451605.763 ops/s
Iteration   4: 9435119.724 ops/s
Iteration   5: 9434557.144 ops/s
Iteration   6: 9420683.420 ops/s
Iteration   7: 9458085.295 ops/s
Iteration   8: 9431137.961 ops/s
Iteration   9: 9448612.354 ops/s
Iteration  10: 9435670.093 ops/s
Iteration  11: 9451833.142 ops/s
Iteration  12: 9438069.954 ops/s
Iteration  13: 9437799.657 ops/s
Iteration  14: 9466674.394 ops/s
Iteration  15: 9422342.645 ops/s
Iteration  16: 9442608.893 ops/s
Iteration  17: 9396910.986 ops/s
Iteration  18: 9444110.125 ops/s
Iteration  19: 9429101.219 ops/s
Iteration  20: 9441999.210 ops/s
Iteration  21: 9423262.582 ops/s
Iteration  22: 9436808.720 ops/s
Iteration  23: 9439137.821 ops/s
Iteration  24: 9441571.435 ops/s
Iteration  25: 9358575.297 ops/s
Iteration  26: 9432413.486 ops/s
Iteration  27: 9447664.038 ops/s
Iteration  28: 9416911.838 ops/s
Iteration  29: 9432847.940 ops/s
Iteration  30: 9418164.319 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_toBag":
  9433480.180 ±(99.9%) 13183.179 ops/s [Average]
  (min, avg, max) = (9358575.297, 9433480.180, 9466674.394), stdev = 19731.963
  CI (99.9%): [9420297.001, 9446663.359] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
ImmutableBooleanSingletonListTest._Benchmark.benchmark_toBag  thrpt   30  9433480.180 ± 13183.179  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1711721.694 ops/s
# Warmup Iteration   2: 4098640.135 ops/s
# Warmup Iteration   3: 3440134.439 ops/s
# Warmup Iteration   4: 4112315.624 ops/s
# Warmup Iteration   5: 4104463.842 ops/s
# Warmup Iteration   6: 4120766.857 ops/s
# Warmup Iteration   7: 4111400.503 ops/s
# Warmup Iteration   8: 4097494.001 ops/s
# Warmup Iteration   9: 4106285.922 ops/s
# Warmup Iteration  10: 4109861.044 ops/s
# Warmup Iteration  11: 4101662.533 ops/s
# Warmup Iteration  12: 4108579.844 ops/s
# Warmup Iteration  13: 4109230.571 ops/s
# Warmup Iteration  14: 4107746.983 ops/s
# Warmup Iteration  15: 4115851.713 ops/s
# Warmup Iteration  16: 4113159.715 ops/s
# Warmup Iteration  17: 4104142.579 ops/s
# Warmup Iteration  18: 4112774.051 ops/s
# Warmup Iteration  19: 4107605.258 ops/s
# Warmup Iteration  20: 4115308.643 ops/s
# Warmup Iteration  21: 4105661.118 ops/s
# Warmup Iteration  22: 4107957.758 ops/s
# Warmup Iteration  23: 4103364.764 ops/s
# Warmup Iteration  24: 4110016.463 ops/s
# Warmup Iteration  25: 4114080.754 ops/s
# Warmup Iteration  26: 4109688.383 ops/s
# Warmup Iteration  27: 4112855.306 ops/s
# Warmup Iteration  28: 4115902.288 ops/s
# Warmup Iteration  29: 4115923.328 ops/s
# Warmup Iteration  30: 4099363.952 ops/s
Iteration   1: 4117593.016 ops/s
Iteration   2: 4121883.939 ops/s
Iteration   3: 4110475.276 ops/s
Iteration   4: 4110575.807 ops/s
Iteration   5: 4118745.819 ops/s
Iteration   6: 4105085.241 ops/s
Iteration   7: 4116141.015 ops/s
Iteration   8: 4123834.209 ops/s
Iteration   9: 4111921.108 ops/s
Iteration  10: 4120496.553 ops/s
Iteration  11: 4120716.770 ops/s
Iteration  12: 4109689.720 ops/s
Iteration  13: 4110686.567 ops/s
Iteration  14: 4114266.919 ops/s
Iteration  15: 4117777.349 ops/s
Iteration  16: 4110668.908 ops/s
Iteration  17: 4102309.283 ops/s
Iteration  18: 4117131.250 ops/s
Iteration  19: 4100875.748 ops/s
Iteration  20: 4107691.248 ops/s
Iteration  21: 4102557.606 ops/s
Iteration  22: 4107210.066 ops/s
Iteration  23: 4099923.446 ops/s
Iteration  24: 4109027.298 ops/s
Iteration  25: 4116966.154 ops/s
Iteration  26: 4099915.802 ops/s
Iteration  27: 4099937.868 ops/s
Iteration  28: 4116037.608 ops/s
Iteration  29: 4102367.010 ops/s
Iteration  30: 4108746.498 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_toList":
  4111041.837 ±(99.9%) 4832.243 ops/s [Average]
  (min, avg, max) = (4099915.802, 4111041.837, 4123834.209), stdev = 7232.675
  CI (99.9%): [4106209.593, 4115874.080] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableBooleanSingletonListTest._Benchmark.benchmark_toList  thrpt   30  4111041.837 ± 4832.243  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_toReversed$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_toReversed

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 26219787.440 ops/s
# Warmup Iteration   2: 42789923.838 ops/s
# Warmup Iteration   3: 47223028.086 ops/s
# Warmup Iteration   4: 47913629.485 ops/s
# Warmup Iteration   5: 48451036.948 ops/s
# Warmup Iteration   6: 48342863.755 ops/s
# Warmup Iteration   7: 48370272.625 ops/s
# Warmup Iteration   8: 48376170.640 ops/s
# Warmup Iteration   9: 48221309.651 ops/s
# Warmup Iteration  10: 48353536.981 ops/s
# Warmup Iteration  11: 48479065.229 ops/s
# Warmup Iteration  12: 48320314.674 ops/s
# Warmup Iteration  13: 47984355.335 ops/s
# Warmup Iteration  14: 47985857.271 ops/s
# Warmup Iteration  15: 48281774.510 ops/s
# Warmup Iteration  16: 48418228.045 ops/s
# Warmup Iteration  17: 48254701.292 ops/s
# Warmup Iteration  18: 48502533.222 ops/s
# Warmup Iteration  19: 48558176.478 ops/s
# Warmup Iteration  20: 48133991.653 ops/s
# Warmup Iteration  21: 48078984.125 ops/s
# Warmup Iteration  22: 48233028.689 ops/s
# Warmup Iteration  23: 47892412.628 ops/s
# Warmup Iteration  24: 48014335.307 ops/s
# Warmup Iteration  25: 48172567.654 ops/s
# Warmup Iteration  26: 47976056.779 ops/s
# Warmup Iteration  27: 48027198.973 ops/s
# Warmup Iteration  28: 48083528.743 ops/s
# Warmup Iteration  29: 48227449.970 ops/s
# Warmup Iteration  30: 48089173.588 ops/s
Iteration   1: 48053832.024 ops/s
Iteration   2: 48362941.094 ops/s
Iteration   3: 48132454.647 ops/s
Iteration   4: 48264575.916 ops/s
Iteration   5: 48540683.035 ops/s
Iteration   6: 48126102.844 ops/s
Iteration   7: 48096142.298 ops/s
Iteration   8: 47885526.402 ops/s
Iteration   9: 48376677.311 ops/s
Iteration  10: 48187325.346 ops/s
Iteration  11: 47919531.667 ops/s
Iteration  12: 48198142.095 ops/s
Iteration  13: 48399761.366 ops/s
Iteration  14: 48153610.956 ops/s
Iteration  15: 48087676.810 ops/s
Iteration  16: 47755854.166 ops/s
Iteration  17: 48336854.600 ops/s
Iteration  18: 48216237.015 ops/s
Iteration  19: 48464835.296 ops/s
Iteration  20: 47946950.338 ops/s
Iteration  21: 48299554.218 ops/s
Iteration  22: 48404410.615 ops/s
Iteration  23: 48212164.827 ops/s
Iteration  24: 48152051.448 ops/s
Iteration  25: 48471885.719 ops/s
Iteration  26: 47979329.112 ops/s
Iteration  27: 48315326.049 ops/s
Iteration  28: 48046252.017 ops/s
Iteration  29: 48324428.727 ops/s
Iteration  30: 48465556.970 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_toReversed":
  48205889.164 ±(99.9%) 130218.977 ops/s [Average]
  (min, avg, max) = (47755854.166, 48205889.164, 48540683.035), stdev = 194905.650
  CI (99.9%): [48075670.187, 48336108.142] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score        Error  Units
ImmutableBooleanSingletonListTest._Benchmark.benchmark_toReversed  thrpt   30  48205889.164 ± 130218.977  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_toSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_toSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5455891.249 ops/s
# Warmup Iteration   2: 12398269.770 ops/s
# Warmup Iteration   3: 12301196.106 ops/s
# Warmup Iteration   4: 10282946.475 ops/s
# Warmup Iteration   5: 12088635.013 ops/s
# Warmup Iteration   6: 12310114.858 ops/s
# Warmup Iteration   7: 12322318.582 ops/s
# Warmup Iteration   8: 12287325.040 ops/s
# Warmup Iteration   9: 12313868.592 ops/s
# Warmup Iteration  10: 12312431.945 ops/s
# Warmup Iteration  11: 12308811.327 ops/s
# Warmup Iteration  12: 12322903.580 ops/s
# Warmup Iteration  13: 12324878.824 ops/s
# Warmup Iteration  14: 12311189.636 ops/s
# Warmup Iteration  15: 12324142.405 ops/s
# Warmup Iteration  16: 12351217.082 ops/s
# Warmup Iteration  17: 12313093.553 ops/s
# Warmup Iteration  18: 12321243.219 ops/s
# Warmup Iteration  19: 12328851.282 ops/s
# Warmup Iteration  20: 12314776.892 ops/s
# Warmup Iteration  21: 12322817.335 ops/s
# Warmup Iteration  22: 12323469.941 ops/s
# Warmup Iteration  23: 12325540.749 ops/s
# Warmup Iteration  24: 12331494.062 ops/s
# Warmup Iteration  25: 12289063.650 ops/s
# Warmup Iteration  26: 12320375.083 ops/s
# Warmup Iteration  27: 12331529.359 ops/s
# Warmup Iteration  28: 12338278.539 ops/s
# Warmup Iteration  29: 12317928.390 ops/s
# Warmup Iteration  30: 12328613.896 ops/s
Iteration   1: 12314224.810 ops/s
Iteration   2: 12335994.616 ops/s
Iteration   3: 12297385.752 ops/s
Iteration   4: 12284960.073 ops/s
Iteration   5: 12307821.739 ops/s
Iteration   6: 12338325.844 ops/s
Iteration   7: 12300593.366 ops/s
Iteration   8: 12291396.755 ops/s
Iteration   9: 12283092.111 ops/s
Iteration  10: 12299880.773 ops/s
Iteration  11: 12296043.255 ops/s
Iteration  12: 12338874.043 ops/s
Iteration  13: 12277836.605 ops/s
Iteration  14: 12294350.856 ops/s
Iteration  15: 12324823.057 ops/s
Iteration  16: 12331961.107 ops/s
Iteration  17: 12309895.865 ops/s
Iteration  18: 12338695.413 ops/s
Iteration  19: 12312562.757 ops/s
Iteration  20: 12316391.985 ops/s
Iteration  21: 12330439.649 ops/s
Iteration  22: 12306594.074 ops/s
Iteration  23: 12319452.917 ops/s
Iteration  24: 12298001.497 ops/s
Iteration  25: 12317853.258 ops/s
Iteration  26: 12347911.895 ops/s
Iteration  27: 12295969.536 ops/s
Iteration  28: 12342641.135 ops/s
Iteration  29: 12350764.319 ops/s
Iteration  30: 12319094.328 ops/s


Result "org.eclipse.collections.impl.list.immutable.primitive.ImmutableBooleanSingletonListTest._Benchmark.benchmark_toSet":
  12314127.780 ±(99.9%) 13639.191 ops/s [Average]
  (min, avg, max) = (12277836.605, 12314127.780, 12350764.319), stdev = 20414.501
  CI (99.9%): [12300488.588, 12327766.971] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score       Error  Units
ImmutableBooleanSingletonListTest._Benchmark.benchmark_toSet  thrpt   30  12314127.780 ± 13639.191  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 710589.885 ops/s
# Warmup Iteration   2: 794367.923 ops/s
# Warmup Iteration   3: 1025239.168 ops/s
# Warmup Iteration   4: 1017021.372 ops/s
# Warmup Iteration   5: 1021106.109 ops/s
# Warmup Iteration   6: 1022329.671 ops/s
# Warmup Iteration   7: 1020347.347 ops/s
# Warmup Iteration   8: 1020497.694 ops/s
# Warmup Iteration   9: 1020508.546 ops/s
# Warmup Iteration  10: 915999.422 ops/s
# Warmup Iteration  11: 959091.240 ops/s
# Warmup Iteration  12: 1017765.399 ops/s
# Warmup Iteration  13: 1020944.789 ops/s
# Warmup Iteration  14: 1017637.842 ops/s
# Warmup Iteration  15: 1017644.853 ops/s
# Warmup Iteration  16: 1013950.473 ops/s
# Warmup Iteration  17: 1076490.054 ops/s
# Warmup Iteration  18: 1079253.651 ops/s
# Warmup Iteration  19: 1079029.005 ops/s
# Warmup Iteration  20: 1080234.020 ops/s
# Warmup Iteration  21: 1082126.748 ops/s
# Warmup Iteration  22: 1080072.068 ops/s
# Warmup Iteration  23: 1077332.263 ops/s
# Warmup Iteration  24: 1077267.850 ops/s
# Warmup Iteration  25: 1076574.345 ops/s
# Warmup Iteration  26: 1081729.113 ops/s
# Warmup Iteration  27: 1079943.765 ops/s
# Warmup Iteration  28: 1082627.331 ops/s
# Warmup Iteration  29: 1079704.898 ops/s
# Warmup Iteration  30: 1080580.781 ops/s
Iteration   1: 1081288.148 ops/s
Iteration   2: 1076109.105 ops/s
Iteration   3: 1077751.773 ops/s
Iteration   4: 1077315.541 ops/s
Iteration   5: 1080396.454 ops/s
Iteration   6: 1077531.470 ops/s
Iteration   7: 1084138.507 ops/s
Iteration   8: 1079023.638 ops/s
Iteration   9: 1081523.025 ops/s
Iteration  10: 1082814.618 ops/s
Iteration  11: 1080948.477 ops/s
Iteration  12: 1078889.591 ops/s
Iteration  13: 1080713.338 ops/s
Iteration  14: 1079489.069 ops/s
Iteration  15: 1077808.619 ops/s
Iteration  16: 1082573.371 ops/s
Iteration  17: 1080004.209 ops/s
Iteration  18: 1073585.890 ops/s
Iteration  19: 1080069.438 ops/s
Iteration  20: 1080362.606 ops/s
Iteration  21: 1080386.382 ops/s
Iteration  22: 1082509.746 ops/s
Iteration  23: 1077287.394 ops/s
Iteration  24: 1077403.208 ops/s
Iteration  25: 1080514.599 ops/s
Iteration  26: 1084522.032 ops/s
Iteration  27: 1082351.515 ops/s
Iteration  28: 1075445.692 ops/s
Iteration  29: 1081398.892 ops/s
Iteration  30: 1082816.250 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_add":
  1079899.087 ±(99.9%) 1738.482 ops/s [Average]
  (min, avg, max) = (1073585.890, 1079899.087, 1084522.032), stdev = 2602.079
  CI (99.9%): [1078160.604, 1081637.569] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_add  thrpt   30  1079899.087 ± 1738.482  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_addAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_addAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 710575.512 ops/s
# Warmup Iteration   2: 801805.925 ops/s
# Warmup Iteration   3: 1026763.766 ops/s
# Warmup Iteration   4: 1018175.944 ops/s
# Warmup Iteration   5: 1014018.937 ops/s
# Warmup Iteration   6: 1018837.252 ops/s
# Warmup Iteration   7: 1019026.557 ops/s
# Warmup Iteration   8: 1016283.078 ops/s
# Warmup Iteration   9: 1014973.902 ops/s
# Warmup Iteration  10: 886500.602 ops/s
# Warmup Iteration  11: 989610.404 ops/s
# Warmup Iteration  12: 1017062.777 ops/s
# Warmup Iteration  13: 1020258.643 ops/s
# Warmup Iteration  14: 1017275.215 ops/s
# Warmup Iteration  15: 1021704.724 ops/s
# Warmup Iteration  16: 1013226.539 ops/s
# Warmup Iteration  17: 1079970.296 ops/s
# Warmup Iteration  18: 1079162.913 ops/s
# Warmup Iteration  19: 1077239.940 ops/s
# Warmup Iteration  20: 1080085.969 ops/s
# Warmup Iteration  21: 1078738.224 ops/s
# Warmup Iteration  22: 1081996.770 ops/s
# Warmup Iteration  23: 1079257.288 ops/s
# Warmup Iteration  24: 1077174.789 ops/s
# Warmup Iteration  25: 1080009.799 ops/s
# Warmup Iteration  26: 1071663.800 ops/s
# Warmup Iteration  27: 1078075.267 ops/s
# Warmup Iteration  28: 1081366.365 ops/s
# Warmup Iteration  29: 1078823.322 ops/s
# Warmup Iteration  30: 1081306.028 ops/s
Iteration   1: 1074746.521 ops/s
Iteration   2: 1073415.946 ops/s
Iteration   3: 1076501.135 ops/s
Iteration   4: 1075450.387 ops/s
Iteration   5: 1081027.973 ops/s
Iteration   6: 1077753.927 ops/s
Iteration   7: 1076668.072 ops/s
Iteration   8: 1072478.688 ops/s
Iteration   9: 1076531.150 ops/s
Iteration  10: 1077018.490 ops/s
Iteration  11: 1077117.943 ops/s
Iteration  12: 1076809.731 ops/s
Iteration  13: 1074486.951 ops/s
Iteration  14: 1075608.794 ops/s
Iteration  15: 1077979.938 ops/s
Iteration  16: 1077142.966 ops/s
Iteration  17: 1074414.092 ops/s
Iteration  18: 1078278.106 ops/s
Iteration  19: 1081695.005 ops/s
Iteration  20: 1080514.628 ops/s
Iteration  21: 1079199.357 ops/s
Iteration  22: 1080876.242 ops/s
Iteration  23: 1078074.330 ops/s
Iteration  24: 1077691.104 ops/s
Iteration  25: 1082352.185 ops/s
Iteration  26: 1077909.689 ops/s
Iteration  27: 1078989.395 ops/s
Iteration  28: 1079637.559 ops/s
Iteration  29: 1078883.645 ops/s
Iteration  30: 1075577.330 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_addAll":
  1077494.376 ±(99.9%) 1618.848 ops/s [Average]
  (min, avg, max) = (1072478.688, 1077494.376, 1082352.185), stdev = 2423.016
  CI (99.9%): [1075875.528, 1079113.224] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_addAll  thrpt   30  1077494.376 ± 1618.848  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_addAllAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_addAllAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 697718.773 ops/s
# Warmup Iteration   2: 776625.547 ops/s
# Warmup Iteration   3: 992645.527 ops/s
# Warmup Iteration   4: 986351.069 ops/s
# Warmup Iteration   5: 989664.531 ops/s
# Warmup Iteration   6: 985122.081 ops/s
# Warmup Iteration   7: 990311.993 ops/s
# Warmup Iteration   8: 984793.709 ops/s
# Warmup Iteration   9: 986294.191 ops/s
# Warmup Iteration  10: 936158.838 ops/s
# Warmup Iteration  11: 878623.067 ops/s
# Warmup Iteration  12: 983068.529 ops/s
# Warmup Iteration  13: 982949.727 ops/s
# Warmup Iteration  14: 984690.597 ops/s
# Warmup Iteration  15: 984481.017 ops/s
# Warmup Iteration  16: 985949.988 ops/s
# Warmup Iteration  17: 1043495.522 ops/s
# Warmup Iteration  18: 1040969.550 ops/s
# Warmup Iteration  19: 1042500.982 ops/s
# Warmup Iteration  20: 1043188.881 ops/s
# Warmup Iteration  21: 1041903.278 ops/s
# Warmup Iteration  22: 1042936.092 ops/s
# Warmup Iteration  23: 1041461.233 ops/s
# Warmup Iteration  24: 1043435.312 ops/s
# Warmup Iteration  25: 1042241.770 ops/s
# Warmup Iteration  26: 1041932.436 ops/s
# Warmup Iteration  27: 1038024.228 ops/s
# Warmup Iteration  28: 1043183.593 ops/s
# Warmup Iteration  29: 1042146.885 ops/s
# Warmup Iteration  30: 1042726.668 ops/s
Iteration   1: 1042125.041 ops/s
Iteration   2: 1044607.977 ops/s
Iteration   3: 1042730.427 ops/s
Iteration   4: 1041803.783 ops/s
Iteration   5: 1038960.630 ops/s
Iteration   6: 1012347.516 ops/s
Iteration   7: 1039191.937 ops/s
Iteration   8: 1041179.499 ops/s
Iteration   9: 1038961.965 ops/s
Iteration  10: 1040518.439 ops/s
Iteration  11: 1046503.871 ops/s
Iteration  12: 1045497.670 ops/s
Iteration  13: 1040028.718 ops/s
Iteration  14: 1045046.877 ops/s
Iteration  15: 1041568.135 ops/s
Iteration  16: 1042298.970 ops/s
Iteration  17: 1044177.402 ops/s
Iteration  18: 1043864.868 ops/s
Iteration  19: 1041491.041 ops/s
Iteration  20: 1043759.864 ops/s
Iteration  21: 1044759.610 ops/s
Iteration  22: 1044169.508 ops/s
Iteration  23: 1042682.932 ops/s
Iteration  24: 1044267.818 ops/s
Iteration  25: 1046296.329 ops/s
Iteration  26: 1040348.339 ops/s
Iteration  27: 1042689.879 ops/s
Iteration  28: 1043542.534 ops/s
Iteration  29: 1040052.687 ops/s
Iteration  30: 1042376.126 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_addAllAtIndex":
  1041595.013 ±(99.9%) 3951.451 ops/s [Average]
  (min, avg, max) = (1012347.516, 1041595.013, 1046503.871), stdev = 5914.346
  CI (99.9%): [1037643.562, 1045546.464] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_addAllAtIndex  thrpt   30  1041595.013 ± 3951.451  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_addAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_addAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 709395.360 ops/s
# Warmup Iteration   2: 803267.525 ops/s
# Warmup Iteration   3: 1022171.050 ops/s
# Warmup Iteration   4: 1019626.091 ops/s
# Warmup Iteration   5: 1017960.800 ops/s
# Warmup Iteration   6: 1017651.265 ops/s
# Warmup Iteration   7: 1016931.740 ops/s
# Warmup Iteration   8: 1021362.266 ops/s
# Warmup Iteration   9: 1018719.405 ops/s
# Warmup Iteration  10: 858659.425 ops/s
# Warmup Iteration  11: 1022099.464 ops/s
# Warmup Iteration  12: 1018575.555 ops/s
# Warmup Iteration  13: 1021231.530 ops/s
# Warmup Iteration  14: 1019736.996 ops/s
# Warmup Iteration  15: 1022096.016 ops/s
# Warmup Iteration  16: 1019331.022 ops/s
# Warmup Iteration  17: 1078945.455 ops/s
# Warmup Iteration  18: 1079861.058 ops/s
# Warmup Iteration  19: 1077967.280 ops/s
# Warmup Iteration  20: 1079586.288 ops/s
# Warmup Iteration  21: 1078552.150 ops/s
# Warmup Iteration  22: 1079090.919 ops/s
# Warmup Iteration  23: 1072489.792 ops/s
# Warmup Iteration  24: 1077141.454 ops/s
# Warmup Iteration  25: 1078895.170 ops/s
# Warmup Iteration  26: 1079024.452 ops/s
# Warmup Iteration  27: 1076774.536 ops/s
# Warmup Iteration  28: 1079263.586 ops/s
# Warmup Iteration  29: 1079044.842 ops/s
# Warmup Iteration  30: 1076835.227 ops/s
Iteration   1: 1076488.797 ops/s
Iteration   2: 1079935.524 ops/s
Iteration   3: 1077413.113 ops/s
Iteration   4: 1080205.240 ops/s
Iteration   5: 1077679.549 ops/s
Iteration   6: 1074452.659 ops/s
Iteration   7: 1081963.481 ops/s
Iteration   8: 1080672.001 ops/s
Iteration   9: 1079635.265 ops/s
Iteration  10: 1074846.051 ops/s
Iteration  11: 1078589.133 ops/s
Iteration  12: 1072261.674 ops/s
Iteration  13: 1079888.855 ops/s
Iteration  14: 1077621.312 ops/s
Iteration  15: 1079742.034 ops/s
Iteration  16: 1076285.787 ops/s
Iteration  17: 1078984.596 ops/s
Iteration  18: 1075962.910 ops/s
Iteration  19: 1077776.531 ops/s
Iteration  20: 1079263.966 ops/s
Iteration  21: 1077013.216 ops/s
Iteration  22: 1077361.767 ops/s
Iteration  23: 1076864.203 ops/s
Iteration  24: 1079704.865 ops/s
Iteration  25: 1074359.959 ops/s
Iteration  26: 1080086.445 ops/s
Iteration  27: 1081318.168 ops/s
Iteration  28: 1079397.838 ops/s
Iteration  29: 1078444.435 ops/s
Iteration  30: 1078834.063 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_addAllIterable":
  1078101.781 ±(99.9%) 1498.308 ops/s [Average]
  (min, avg, max) = (1072261.674, 1078101.781, 1081963.481), stdev = 2242.598
  CI (99.9%): [1076603.473, 1079600.090] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_addAllIterable  thrpt   30  1078101.781 ± 1498.308  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_addAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_addAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 702417.608 ops/s
# Warmup Iteration   2: 771999.014 ops/s
# Warmup Iteration   3: 992052.542 ops/s
# Warmup Iteration   4: 985640.869 ops/s
# Warmup Iteration   5: 982297.051 ops/s
# Warmup Iteration   6: 984381.202 ops/s
# Warmup Iteration   7: 983371.694 ops/s
# Warmup Iteration   8: 984727.133 ops/s
# Warmup Iteration   9: 982049.564 ops/s
# Warmup Iteration  10: 960544.917 ops/s
# Warmup Iteration  11: 844706.760 ops/s
# Warmup Iteration  12: 983833.437 ops/s
# Warmup Iteration  13: 980529.515 ops/s
# Warmup Iteration  14: 981350.460 ops/s
# Warmup Iteration  15: 979320.423 ops/s
# Warmup Iteration  16: 982308.521 ops/s
# Warmup Iteration  17: 1043644.718 ops/s
# Warmup Iteration  18: 1039075.433 ops/s
# Warmup Iteration  19: 1040552.170 ops/s
# Warmup Iteration  20: 1041912.594 ops/s
# Warmup Iteration  21: 1041390.561 ops/s
# Warmup Iteration  22: 1039116.372 ops/s
# Warmup Iteration  23: 1040092.851 ops/s
# Warmup Iteration  24: 1041371.314 ops/s
# Warmup Iteration  25: 1040742.479 ops/s
# Warmup Iteration  26: 1041700.104 ops/s
# Warmup Iteration  27: 1041132.452 ops/s
# Warmup Iteration  28: 1041800.341 ops/s
# Warmup Iteration  29: 1039520.967 ops/s
# Warmup Iteration  30: 1040851.906 ops/s
Iteration   1: 1043057.185 ops/s
Iteration   2: 1037518.939 ops/s
Iteration   3: 1039082.296 ops/s
Iteration   4: 1043831.962 ops/s
Iteration   5: 1036350.092 ops/s
Iteration   6: 1041515.235 ops/s
Iteration   7: 1041450.697 ops/s
Iteration   8: 1044155.129 ops/s
Iteration   9: 1041768.693 ops/s
Iteration  10: 1040651.943 ops/s
Iteration  11: 1042160.476 ops/s
Iteration  12: 1044601.995 ops/s
Iteration  13: 1044644.814 ops/s
Iteration  14: 1039579.196 ops/s
Iteration  15: 1043589.622 ops/s
Iteration  16: 1043242.024 ops/s
Iteration  17: 1039873.666 ops/s
Iteration  18: 1045732.706 ops/s
Iteration  19: 1045503.521 ops/s
Iteration  20: 1039982.084 ops/s
Iteration  21: 1042718.971 ops/s
Iteration  22: 1044726.469 ops/s
Iteration  23: 1043904.057 ops/s
Iteration  24: 1039591.881 ops/s
Iteration  25: 1037626.239 ops/s
Iteration  26: 1039619.461 ops/s
Iteration  27: 1042506.800 ops/s
Iteration  28: 1039197.496 ops/s
Iteration  29: 1037790.988 ops/s
Iteration  30: 1044091.181 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_addAtIndex":
  1041668.861 ±(99.9%) 1752.988 ops/s [Average]
  (min, avg, max) = (1036350.092, 1041668.861, 1045732.706), stdev = 2623.791
  CI (99.9%): [1039915.872, 1043421.849] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_addAtIndex  thrpt   30  1041668.861 ± 1752.988  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 705588.954 ops/s
# Warmup Iteration   2: 779871.114 ops/s
# Warmup Iteration   3: 1002747.515 ops/s
# Warmup Iteration   4: 997642.157 ops/s
# Warmup Iteration   5: 997911.750 ops/s
# Warmup Iteration   6: 998306.567 ops/s
# Warmup Iteration   7: 998192.623 ops/s
# Warmup Iteration   8: 998816.101 ops/s
# Warmup Iteration   9: 999145.369 ops/s
# Warmup Iteration  10: 919282.813 ops/s
# Warmup Iteration  11: 920559.990 ops/s
# Warmup Iteration  12: 999061.699 ops/s
# Warmup Iteration  13: 997902.140 ops/s
# Warmup Iteration  14: 999874.279 ops/s
# Warmup Iteration  15: 997099.180 ops/s
# Warmup Iteration  16: 1001452.884 ops/s
# Warmup Iteration  17: 1058140.152 ops/s
# Warmup Iteration  18: 1057829.615 ops/s
# Warmup Iteration  19: 1056555.955 ops/s
# Warmup Iteration  20: 1059163.841 ops/s
# Warmup Iteration  21: 1056897.375 ops/s
# Warmup Iteration  22: 1059293.151 ops/s
# Warmup Iteration  23: 1057062.067 ops/s
# Warmup Iteration  24: 1057431.989 ops/s
# Warmup Iteration  25: 1056983.296 ops/s
# Warmup Iteration  26: 1058210.440 ops/s
# Warmup Iteration  27: 1060347.861 ops/s
# Warmup Iteration  28: 1059904.474 ops/s
# Warmup Iteration  29: 1058118.932 ops/s
# Warmup Iteration  30: 1058147.594 ops/s
Iteration   1: 1060139.010 ops/s
Iteration   2: 1056864.164 ops/s
Iteration   3: 1060077.687 ops/s
Iteration   4: 1059059.458 ops/s
Iteration   5: 1058719.150 ops/s
Iteration   6: 1058482.665 ops/s
Iteration   7: 1063164.797 ops/s
Iteration   8: 1059774.087 ops/s
Iteration   9: 1061337.058 ops/s
Iteration  10: 1056426.458 ops/s
Iteration  11: 1060075.524 ops/s
Iteration  12: 1058517.672 ops/s
Iteration  13: 1060272.313 ops/s
Iteration  14: 1059887.104 ops/s
Iteration  15: 1056753.978 ops/s
Iteration  16: 1061583.337 ops/s
Iteration  17: 1059875.043 ops/s
Iteration  18: 1058326.841 ops/s
Iteration  19: 1057045.128 ops/s
Iteration  20: 1060976.634 ops/s
Iteration  21: 1060201.224 ops/s
Iteration  22: 1057961.963 ops/s
Iteration  23: 1060001.888 ops/s
Iteration  24: 1059599.975 ops/s
Iteration  25: 1059822.236 ops/s
Iteration  26: 1058926.920 ops/s
Iteration  27: 1057273.214 ops/s
Iteration  28: 1058429.179 ops/s
Iteration  29: 1061823.409 ops/s
Iteration  30: 1060501.052 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_clear":
  1059396.639 ±(99.9%) 1076.152 ops/s [Average]
  (min, avg, max) = (1056426.458, 1059396.639, 1063164.797), stdev = 1610.734
  CI (99.9%): [1058320.487, 1060472.791] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_clear  thrpt   30  1059396.639 ± 1076.152  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3434961.746 ops/s
# Warmup Iteration   2: 7648336.575 ops/s
# Warmup Iteration   3: 6459147.742 ops/s
# Warmup Iteration   4: 7733509.694 ops/s
# Warmup Iteration   5: 7746296.924 ops/s
# Warmup Iteration   6: 7756747.187 ops/s
# Warmup Iteration   7: 7745449.327 ops/s
# Warmup Iteration   8: 7751675.500 ops/s
# Warmup Iteration   9: 7752576.640 ops/s
# Warmup Iteration  10: 7754963.005 ops/s
# Warmup Iteration  11: 7746155.459 ops/s
# Warmup Iteration  12: 7753857.753 ops/s
# Warmup Iteration  13: 7744557.789 ops/s
# Warmup Iteration  14: 7736255.623 ops/s
# Warmup Iteration  15: 7747468.665 ops/s
# Warmup Iteration  16: 7748147.812 ops/s
# Warmup Iteration  17: 7732689.742 ops/s
# Warmup Iteration  18: 7730671.751 ops/s
# Warmup Iteration  19: 7740726.431 ops/s
# Warmup Iteration  20: 7750212.468 ops/s
# Warmup Iteration  21: 7742837.765 ops/s
# Warmup Iteration  22: 7746245.439 ops/s
# Warmup Iteration  23: 7758579.810 ops/s
# Warmup Iteration  24: 7749235.915 ops/s
# Warmup Iteration  25: 7751554.273 ops/s
# Warmup Iteration  26: 7739077.093 ops/s
# Warmup Iteration  27: 7745489.033 ops/s
# Warmup Iteration  28: 7758049.856 ops/s
# Warmup Iteration  29: 7738066.756 ops/s
# Warmup Iteration  30: 7750396.872 ops/s
Iteration   1: 7757991.440 ops/s
Iteration   2: 7720119.923 ops/s
Iteration   3: 7740198.412 ops/s
Iteration   4: 7710311.732 ops/s
Iteration   5: 7755527.664 ops/s
Iteration   6: 7718587.175 ops/s
Iteration   7: 7747123.513 ops/s
Iteration   8: 7745851.598 ops/s
Iteration   9: 7713034.635 ops/s
Iteration  10: 7735871.691 ops/s
Iteration  11: 7734324.674 ops/s
Iteration  12: 7755652.499 ops/s
Iteration  13: 7733309.049 ops/s
Iteration  14: 7771864.666 ops/s
Iteration  15: 7728967.449 ops/s
Iteration  16: 7763191.255 ops/s
Iteration  17: 7737800.689 ops/s
Iteration  18: 7745987.520 ops/s
Iteration  19: 7726690.442 ops/s
Iteration  20: 7747063.131 ops/s
Iteration  21: 7730204.831 ops/s
Iteration  22: 7768646.252 ops/s
Iteration  23: 7727276.895 ops/s
Iteration  24: 7768493.485 ops/s
Iteration  25: 7736992.784 ops/s
Iteration  26: 7746202.725 ops/s
Iteration  27: 7714383.963 ops/s
Iteration  28: 7746279.833 ops/s
Iteration  29: 7726484.339 ops/s
Iteration  30: 7760171.540 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_collect":
  7740486.860 ±(99.9%) 11511.792 ops/s [Average]
  (min, avg, max) = (7710311.732, 7740486.860, 7771864.666), stdev = 17230.309
  CI (99.9%): [7728975.069, 7751998.652] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_collect  thrpt   30  7740486.860 ± 11511.792  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4888562.253 ops/s
# Warmup Iteration   2: 10440072.187 ops/s
# Warmup Iteration   3: 9003268.232 ops/s
# Warmup Iteration   4: 10679436.626 ops/s
# Warmup Iteration   5: 10671992.381 ops/s
# Warmup Iteration   6: 10668763.103 ops/s
# Warmup Iteration   7: 10700060.079 ops/s
# Warmup Iteration   8: 10652597.003 ops/s
# Warmup Iteration   9: 10700585.389 ops/s
# Warmup Iteration  10: 10675421.374 ops/s
# Warmup Iteration  11: 10671283.601 ops/s
# Warmup Iteration  12: 10685145.314 ops/s
# Warmup Iteration  13: 10673989.100 ops/s
# Warmup Iteration  14: 10717173.786 ops/s
# Warmup Iteration  15: 10689009.033 ops/s
# Warmup Iteration  16: 10683508.557 ops/s
# Warmup Iteration  17: 10672903.838 ops/s
# Warmup Iteration  18: 10652458.743 ops/s
# Warmup Iteration  19: 10659860.985 ops/s
# Warmup Iteration  20: 10687373.529 ops/s
# Warmup Iteration  21: 10683661.437 ops/s
# Warmup Iteration  22: 10664614.468 ops/s
# Warmup Iteration  23: 10676922.808 ops/s
# Warmup Iteration  24: 10680019.870 ops/s
# Warmup Iteration  25: 10674851.988 ops/s
# Warmup Iteration  26: 10621755.433 ops/s
# Warmup Iteration  27: 10653457.990 ops/s
# Warmup Iteration  28: 10651453.867 ops/s
# Warmup Iteration  29: 10646351.478 ops/s
# Warmup Iteration  30: 10692270.775 ops/s
Iteration   1: 10683855.768 ops/s
Iteration   2: 10687389.297 ops/s
Iteration   3: 10648349.032 ops/s
Iteration   4: 10667761.971 ops/s
Iteration   5: 10652384.737 ops/s
Iteration   6: 10670293.270 ops/s
Iteration   7: 10658569.229 ops/s
Iteration   8: 10658019.470 ops/s
Iteration   9: 10653812.920 ops/s
Iteration  10: 10638820.554 ops/s
Iteration  11: 10692901.071 ops/s
Iteration  12: 10672773.397 ops/s
Iteration  13: 10682151.069 ops/s
Iteration  14: 10683155.616 ops/s
Iteration  15: 10698257.588 ops/s
Iteration  16: 10668140.133 ops/s
Iteration  17: 10701336.086 ops/s
Iteration  18: 10653142.518 ops/s
Iteration  19: 10685457.201 ops/s
Iteration  20: 10683464.890 ops/s
Iteration  21: 10621597.442 ops/s
Iteration  22: 10699471.226 ops/s
Iteration  23: 10669124.219 ops/s
Iteration  24: 10714532.695 ops/s
Iteration  25: 10634785.174 ops/s
Iteration  26: 10673919.878 ops/s
Iteration  27: 10644529.302 ops/s
Iteration  28: 10636333.009 ops/s
Iteration  29: 10671132.252 ops/s
Iteration  30: 10648394.911 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectBoolean":
  10668461.864 ±(99.9%) 15071.844 ops/s [Average]
  (min, avg, max) = (10621597.442, 10668461.864, 10714532.695), stdev = 22558.829
  CI (99.9%): [10653390.020, 10683533.708] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt         Score       Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectBoolean  thrpt   30  10668461.864 ± 15071.844  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5721078.600 ops/s
# Warmup Iteration   2: 13256509.113 ops/s
# Warmup Iteration   3: 10954480.514 ops/s
# Warmup Iteration   4: 13172513.649 ops/s
# Warmup Iteration   5: 13152138.402 ops/s
# Warmup Iteration   6: 13135419.745 ops/s
# Warmup Iteration   7: 13153090.453 ops/s
# Warmup Iteration   8: 13185219.179 ops/s
# Warmup Iteration   9: 13171050.490 ops/s
# Warmup Iteration  10: 13166790.283 ops/s
# Warmup Iteration  11: 13169703.460 ops/s
# Warmup Iteration  12: 13161040.844 ops/s
# Warmup Iteration  13: 13143797.814 ops/s
# Warmup Iteration  14: 13143301.818 ops/s
# Warmup Iteration  15: 13155782.497 ops/s
# Warmup Iteration  16: 13139905.289 ops/s
# Warmup Iteration  17: 13153631.876 ops/s
# Warmup Iteration  18: 13146753.825 ops/s
# Warmup Iteration  19: 13172912.025 ops/s
# Warmup Iteration  20: 13146023.273 ops/s
# Warmup Iteration  21: 13160277.609 ops/s
# Warmup Iteration  22: 13170785.814 ops/s
# Warmup Iteration  23: 13162901.234 ops/s
# Warmup Iteration  24: 13156231.161 ops/s
# Warmup Iteration  25: 13192305.812 ops/s
# Warmup Iteration  26: 13179468.570 ops/s
# Warmup Iteration  27: 13203096.264 ops/s
# Warmup Iteration  28: 13155037.468 ops/s
# Warmup Iteration  29: 13143726.577 ops/s
# Warmup Iteration  30: 13194951.519 ops/s
Iteration   1: 13135170.482 ops/s
Iteration   2: 13184663.021 ops/s
Iteration   3: 13117555.002 ops/s
Iteration   4: 13191223.230 ops/s
Iteration   5: 13152686.217 ops/s
Iteration   6: 13171132.415 ops/s
Iteration   7: 13185854.462 ops/s
Iteration   8: 13198888.313 ops/s
Iteration   9: 13129673.466 ops/s
Iteration  10: 13201895.883 ops/s
Iteration  11: 13176182.992 ops/s
Iteration  12: 13160931.285 ops/s
Iteration  13: 13193120.964 ops/s
Iteration  14: 13220625.087 ops/s
Iteration  15: 13150049.377 ops/s
Iteration  16: 13157102.301 ops/s
Iteration  17: 13187506.215 ops/s
Iteration  18: 13096693.187 ops/s
Iteration  19: 13158550.030 ops/s
Iteration  20: 13147523.578 ops/s
Iteration  21: 13143337.823 ops/s
Iteration  22: 13140192.391 ops/s
Iteration  23: 13176130.732 ops/s
Iteration  24: 13157061.117 ops/s
Iteration  25: 13125087.404 ops/s
Iteration  26: 13148148.037 ops/s
Iteration  27: 13182412.593 ops/s
Iteration  28: 13131590.572 ops/s
Iteration  29: 13181244.882 ops/s
Iteration  30: 13151853.553 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectByte":
  13161802.887 ±(99.9%) 18867.266 ops/s [Average]
  (min, avg, max) = (13096693.187, 13161802.887, 13220625.087), stdev = 28239.637
  CI (99.9%): [13142935.622, 13180670.153] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt         Score       Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectByte  thrpt   30  13161802.887 ± 18867.266  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5601749.174 ops/s
# Warmup Iteration   2: 12981492.661 ops/s
# Warmup Iteration   3: 10863337.246 ops/s
# Warmup Iteration   4: 13050331.206 ops/s
# Warmup Iteration   5: 13037939.287 ops/s
# Warmup Iteration   6: 13063406.830 ops/s
# Warmup Iteration   7: 13013818.598 ops/s
# Warmup Iteration   8: 13026433.296 ops/s
# Warmup Iteration   9: 13041200.133 ops/s
# Warmup Iteration  10: 13013344.485 ops/s
# Warmup Iteration  11: 13076825.572 ops/s
# Warmup Iteration  12: 13080116.586 ops/s
# Warmup Iteration  13: 13047126.358 ops/s
# Warmup Iteration  14: 13055169.394 ops/s
# Warmup Iteration  15: 13073367.336 ops/s
# Warmup Iteration  16: 13079734.964 ops/s
# Warmup Iteration  17: 13059162.073 ops/s
# Warmup Iteration  18: 13068380.216 ops/s
# Warmup Iteration  19: 13042645.062 ops/s
# Warmup Iteration  20: 13047391.387 ops/s
# Warmup Iteration  21: 13051404.184 ops/s
# Warmup Iteration  22: 13042523.764 ops/s
# Warmup Iteration  23: 13030954.164 ops/s
# Warmup Iteration  24: 13050342.600 ops/s
# Warmup Iteration  25: 13066297.692 ops/s
# Warmup Iteration  26: 13051449.383 ops/s
# Warmup Iteration  27: 13059280.815 ops/s
# Warmup Iteration  28: 13049934.254 ops/s
# Warmup Iteration  29: 13063908.777 ops/s
# Warmup Iteration  30: 13031169.139 ops/s
Iteration   1: 13079825.140 ops/s
Iteration   2: 13005492.390 ops/s
Iteration   3: 13051987.956 ops/s
Iteration   4: 13111620.813 ops/s
Iteration   5: 13053378.300 ops/s
Iteration   6: 13047825.723 ops/s
Iteration   7: 13039381.493 ops/s
Iteration   8: 13071274.660 ops/s
Iteration   9: 13078533.955 ops/s
Iteration  10: 13058564.247 ops/s
Iteration  11: 13037878.782 ops/s
Iteration  12: 13083586.215 ops/s
Iteration  13: 13051147.405 ops/s
Iteration  14: 12936728.326 ops/s
Iteration  15: 12809272.332 ops/s
Iteration  16: 13072392.595 ops/s
Iteration  17: 13030714.518 ops/s
Iteration  18: 13037498.994 ops/s
Iteration  19: 13067597.261 ops/s
Iteration  20: 13018565.663 ops/s
Iteration  21: 12990589.311 ops/s
Iteration  22: 13041685.492 ops/s
Iteration  23: 13039207.289 ops/s
Iteration  24: 13032737.965 ops/s
Iteration  25: 13070114.476 ops/s
Iteration  26: 13072870.798 ops/s
Iteration  27: 13016741.700 ops/s
Iteration  28: 13078095.458 ops/s
Iteration  29: 13027752.429 ops/s
Iteration  30: 13088966.150 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectChar":
  13040067.594 ±(99.9%) 36890.365 ops/s [Average]
  (min, avg, max) = (12809272.332, 13040067.594, 13111620.813), stdev = 55215.766
  CI (99.9%): [13003177.230, 13076957.959] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt         Score       Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectChar  thrpt   30  13040067.594 ± 36890.365  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5690986.266 ops/s
# Warmup Iteration   2: 12909917.064 ops/s
# Warmup Iteration   3: 10965619.907 ops/s
# Warmup Iteration   4: 13101434.211 ops/s
# Warmup Iteration   5: 13161718.748 ops/s
# Warmup Iteration   6: 13091460.310 ops/s
# Warmup Iteration   7: 13131296.191 ops/s
# Warmup Iteration   8: 13131769.535 ops/s
# Warmup Iteration   9: 13146350.388 ops/s
# Warmup Iteration  10: 13175966.538 ops/s
# Warmup Iteration  11: 13147049.579 ops/s
# Warmup Iteration  12: 13115418.917 ops/s
# Warmup Iteration  13: 13134598.706 ops/s
# Warmup Iteration  14: 13147157.921 ops/s
# Warmup Iteration  15: 13149085.656 ops/s
# Warmup Iteration  16: 13120955.464 ops/s
# Warmup Iteration  17: 13132576.824 ops/s
# Warmup Iteration  18: 13090201.824 ops/s
# Warmup Iteration  19: 13108363.267 ops/s
# Warmup Iteration  20: 13136111.080 ops/s
# Warmup Iteration  21: 13129399.180 ops/s
# Warmup Iteration  22: 13123047.548 ops/s
# Warmup Iteration  23: 13114702.543 ops/s
# Warmup Iteration  24: 13148117.610 ops/s
# Warmup Iteration  25: 13105856.937 ops/s
# Warmup Iteration  26: 13132333.996 ops/s
# Warmup Iteration  27: 13149880.570 ops/s
# Warmup Iteration  28: 13125724.163 ops/s
# Warmup Iteration  29: 13167653.135 ops/s
# Warmup Iteration  30: 13096642.343 ops/s
Iteration   1: 13088267.975 ops/s
Iteration   2: 13041576.030 ops/s
Iteration   3: 13124937.639 ops/s
Iteration   4: 13089835.631 ops/s
Iteration   5: 13122198.032 ops/s
Iteration   6: 13094071.064 ops/s
Iteration   7: 13197943.364 ops/s
Iteration   8: 13043310.876 ops/s
Iteration   9: 13112982.498 ops/s
Iteration  10: 13063697.440 ops/s
Iteration  11: 13137839.060 ops/s
Iteration  12: 13082361.152 ops/s
Iteration  13: 13156500.553 ops/s
Iteration  14: 13074581.747 ops/s
Iteration  15: 13137110.650 ops/s
Iteration  16: 13118947.266 ops/s
Iteration  17: 13115747.558 ops/s
Iteration  18: 13123656.947 ops/s
Iteration  19: 13114997.656 ops/s
Iteration  20: 13142619.820 ops/s
Iteration  21: 13107827.320 ops/s
Iteration  22: 13127305.131 ops/s
Iteration  23: 13114391.271 ops/s
Iteration  24: 13132241.699 ops/s
Iteration  25: 13060199.841 ops/s
Iteration  26: 13159893.388 ops/s
Iteration  27: 13104774.892 ops/s
Iteration  28: 13132761.855 ops/s
Iteration  29: 13089238.657 ops/s
Iteration  30: 13037304.072 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectDouble":
  13108304.036 ±(99.9%) 24676.983 ops/s [Average]
  (min, avg, max) = (13037304.072, 13108304.036, 13197943.364), stdev = 36935.350
  CI (99.9%): [13083627.053, 13132981.020] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt         Score       Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectDouble  thrpt   30  13108304.036 ± 24676.983  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5755821.972 ops/s
# Warmup Iteration   2: 13311717.318 ops/s
# Warmup Iteration   3: 10968311.661 ops/s
# Warmup Iteration   4: 13159022.485 ops/s
# Warmup Iteration   5: 13189755.067 ops/s
# Warmup Iteration   6: 13185412.878 ops/s
# Warmup Iteration   7: 13203010.741 ops/s
# Warmup Iteration   8: 13168560.009 ops/s
# Warmup Iteration   9: 13190736.979 ops/s
# Warmup Iteration  10: 13187693.787 ops/s
# Warmup Iteration  11: 13222078.588 ops/s
# Warmup Iteration  12: 13177039.017 ops/s
# Warmup Iteration  13: 13214368.090 ops/s
# Warmup Iteration  14: 13197972.077 ops/s
# Warmup Iteration  15: 13215112.934 ops/s
# Warmup Iteration  16: 13185817.945 ops/s
# Warmup Iteration  17: 13205341.357 ops/s
# Warmup Iteration  18: 13169682.039 ops/s
# Warmup Iteration  19: 13143252.431 ops/s
# Warmup Iteration  20: 13179548.583 ops/s
# Warmup Iteration  21: 13170235.812 ops/s
# Warmup Iteration  22: 13188226.665 ops/s
# Warmup Iteration  23: 13175986.498 ops/s
# Warmup Iteration  24: 13206281.512 ops/s
# Warmup Iteration  25: 13196276.111 ops/s
# Warmup Iteration  26: 13179301.216 ops/s
# Warmup Iteration  27: 13201486.834 ops/s
# Warmup Iteration  28: 13139500.555 ops/s
# Warmup Iteration  29: 13185804.526 ops/s
# Warmup Iteration  30: 13158912.598 ops/s
Iteration   1: 13141043.782 ops/s
Iteration   2: 13177353.102 ops/s
Iteration   3: 13152530.119 ops/s
Iteration   4: 13206307.549 ops/s
Iteration   5: 13171849.087 ops/s
Iteration   6: 13158576.619 ops/s
Iteration   7: 13195203.413 ops/s
Iteration   8: 13175484.077 ops/s
Iteration   9: 13159804.386 ops/s
Iteration  10: 13193545.542 ops/s
Iteration  11: 13171644.271 ops/s
Iteration  12: 13184016.821 ops/s
Iteration  13: 13168161.775 ops/s
Iteration  14: 13208438.847 ops/s
Iteration  15: 13099021.265 ops/s
Iteration  16: 13187783.954 ops/s
Iteration  17: 13159497.719 ops/s
Iteration  18: 13210617.619 ops/s
Iteration  19: 13188318.803 ops/s
Iteration  20: 13210688.371 ops/s
Iteration  21: 13194998.382 ops/s
Iteration  22: 13166383.889 ops/s
Iteration  23: 13196272.290 ops/s
Iteration  24: 13148139.355 ops/s
Iteration  25: 13222903.726 ops/s
Iteration  26: 13164542.572 ops/s
Iteration  27: 13217191.474 ops/s
Iteration  28: 13154400.007 ops/s
Iteration  29: 13138605.165 ops/s
Iteration  30: 13207404.191 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectFloat":
  13177690.939 ±(99.9%) 18599.211 ops/s [Average]
  (min, avg, max) = (13099021.265, 13177690.939, 13222903.726), stdev = 27838.426
  CI (99.9%): [13159091.728, 13196290.150] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt         Score       Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectFloat  thrpt   30  13177690.939 ± 18599.211  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2214096.707 ops/s
# Warmup Iteration   2: 9614301.549 ops/s
# Warmup Iteration   3: 8186186.991 ops/s
# Warmup Iteration   4: 9718073.913 ops/s
# Warmup Iteration   5: 9715467.572 ops/s
# Warmup Iteration   6: 9706277.100 ops/s
# Warmup Iteration   7: 9727289.554 ops/s
# Warmup Iteration   8: 9699440.130 ops/s
# Warmup Iteration   9: 9688274.135 ops/s
# Warmup Iteration  10: 9739585.453 ops/s
# Warmup Iteration  11: 9738545.175 ops/s
# Warmup Iteration  12: 9728431.066 ops/s
# Warmup Iteration  13: 9723641.654 ops/s
# Warmup Iteration  14: 9693255.448 ops/s
# Warmup Iteration  15: 9745882.385 ops/s
# Warmup Iteration  16: 9740238.071 ops/s
# Warmup Iteration  17: 9698278.415 ops/s
# Warmup Iteration  18: 9722984.697 ops/s
# Warmup Iteration  19: 9704857.924 ops/s
# Warmup Iteration  20: 9740860.550 ops/s
# Warmup Iteration  21: 9720122.636 ops/s
# Warmup Iteration  22: 9732015.462 ops/s
# Warmup Iteration  23: 9733698.781 ops/s
# Warmup Iteration  24: 9690306.053 ops/s
# Warmup Iteration  25: 9718664.623 ops/s
# Warmup Iteration  26: 9726255.958 ops/s
# Warmup Iteration  27: 9744833.064 ops/s
# Warmup Iteration  28: 9715368.555 ops/s
# Warmup Iteration  29: 9731483.422 ops/s
# Warmup Iteration  30: 9728320.949 ops/s
Iteration   1: 9730760.775 ops/s
Iteration   2: 9744735.542 ops/s
Iteration   3: 9753424.139 ops/s
Iteration   4: 9759809.937 ops/s
Iteration   5: 9692447.735 ops/s
Iteration   6: 9721835.227 ops/s
Iteration   7: 9728259.217 ops/s
Iteration   8: 9726321.970 ops/s
Iteration   9: 9747488.811 ops/s
Iteration  10: 9746434.658 ops/s
Iteration  11: 9747609.005 ops/s
Iteration  12: 9767273.901 ops/s
Iteration  13: 9731442.895 ops/s
Iteration  14: 9744613.419 ops/s
Iteration  15: 9741878.193 ops/s
Iteration  16: 9730705.424 ops/s
Iteration  17: 9775259.707 ops/s
Iteration  18: 9749206.064 ops/s
Iteration  19: 9734266.107 ops/s
Iteration  20: 9715046.966 ops/s
Iteration  21: 9746378.460 ops/s
Iteration  22: 9727685.673 ops/s
Iteration  23: 9759441.667 ops/s
Iteration  24: 9746384.429 ops/s
Iteration  25: 9728722.993 ops/s
Iteration  26: 9757153.142 ops/s
Iteration  27: 9756602.097 ops/s
Iteration  28: 9715287.527 ops/s
Iteration  29: 9708793.342 ops/s
Iteration  30: 9715939.775 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectIf":
  9738373.627 ±(99.9%) 12441.202 ops/s [Average]
  (min, avg, max) = (9692447.735, 9738373.627, 9775259.707), stdev = 18621.406
  CI (99.9%): [9725932.425, 9750814.828] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectIf  thrpt   30  9738373.627 ± 12441.202  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3143129.545 ops/s
# Warmup Iteration   2: 13313834.711 ops/s
# Warmup Iteration   3: 11188685.627 ops/s
# Warmup Iteration   4: 13457942.124 ops/s
# Warmup Iteration   5: 13448138.564 ops/s
# Warmup Iteration   6: 13447699.049 ops/s
# Warmup Iteration   7: 13441334.330 ops/s
# Warmup Iteration   8: 13458640.892 ops/s
# Warmup Iteration   9: 13419807.329 ops/s
# Warmup Iteration  10: 13457319.855 ops/s
# Warmup Iteration  11: 13450744.424 ops/s
# Warmup Iteration  12: 13450089.133 ops/s
# Warmup Iteration  13: 13441248.776 ops/s
# Warmup Iteration  14: 13456452.869 ops/s
# Warmup Iteration  15: 13452792.527 ops/s
# Warmup Iteration  16: 13462660.919 ops/s
# Warmup Iteration  17: 13396382.044 ops/s
# Warmup Iteration  18: 13374646.051 ops/s
# Warmup Iteration  19: 13397726.184 ops/s
# Warmup Iteration  20: 13386564.432 ops/s
# Warmup Iteration  21: 13394972.749 ops/s
# Warmup Iteration  22: 13396448.891 ops/s
# Warmup Iteration  23: 13385971.848 ops/s
# Warmup Iteration  24: 13359245.791 ops/s
# Warmup Iteration  25: 13405540.907 ops/s
# Warmup Iteration  26: 13403820.070 ops/s
# Warmup Iteration  27: 13379512.835 ops/s
# Warmup Iteration  28: 13402982.182 ops/s
# Warmup Iteration  29: 13379069.018 ops/s
# Warmup Iteration  30: 13387350.582 ops/s
Iteration   1: 13384963.313 ops/s
Iteration   2: 13386888.980 ops/s
Iteration   3: 13365131.514 ops/s
Iteration   4: 13364314.673 ops/s
Iteration   5: 13386232.822 ops/s
Iteration   6: 13383377.967 ops/s
Iteration   7: 13425486.641 ops/s
Iteration   8: 13368050.746 ops/s
Iteration   9: 13405961.533 ops/s
Iteration  10: 13381926.279 ops/s
Iteration  11: 13400365.220 ops/s
Iteration  12: 13408026.630 ops/s
Iteration  13: 13379083.094 ops/s
Iteration  14: 13382700.927 ops/s
Iteration  15: 13400099.594 ops/s
Iteration  16: 13428107.550 ops/s
Iteration  17: 13351866.994 ops/s
Iteration  18: 13407295.129 ops/s
Iteration  19: 13380030.392 ops/s
Iteration  20: 13426575.230 ops/s
Iteration  21: 13378821.821 ops/s
Iteration  22: 13365672.359 ops/s
Iteration  23: 13371598.418 ops/s
Iteration  24: 13418467.465 ops/s
Iteration  25: 13334811.510 ops/s
Iteration  26: 13418916.340 ops/s
Iteration  27: 13377858.092 ops/s
Iteration  28: 13398321.569 ops/s
Iteration  29: 13376556.560 ops/s
Iteration  30: 13443019.954 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectInt":
  13390017.644 ±(99.9%) 16523.521 ops/s [Average]
  (min, avg, max) = (13334811.510, 13390017.644, 13443019.954), stdev = 24731.631
  CI (99.9%): [13373494.122, 13406541.165] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score       Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectInt  thrpt   30  13390017.644 ± 16523.521  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5724966.220 ops/s
# Warmup Iteration   2: 13172991.172 ops/s
# Warmup Iteration   3: 10967510.086 ops/s
# Warmup Iteration   4: 13174780.801 ops/s
# Warmup Iteration   5: 13168945.466 ops/s
# Warmup Iteration   6: 13190939.238 ops/s
# Warmup Iteration   7: 13181667.960 ops/s
# Warmup Iteration   8: 13194250.429 ops/s
# Warmup Iteration   9: 13160134.801 ops/s
# Warmup Iteration  10: 13142830.403 ops/s
# Warmup Iteration  11: 13176468.758 ops/s
# Warmup Iteration  12: 13198768.036 ops/s
# Warmup Iteration  13: 13183181.420 ops/s
# Warmup Iteration  14: 13146009.769 ops/s
# Warmup Iteration  15: 13207776.968 ops/s
# Warmup Iteration  16: 13171301.702 ops/s
# Warmup Iteration  17: 13185740.870 ops/s
# Warmup Iteration  18: 13139327.622 ops/s
# Warmup Iteration  19: 13138596.698 ops/s
# Warmup Iteration  20: 13167050.939 ops/s
# Warmup Iteration  21: 13204055.613 ops/s
# Warmup Iteration  22: 13190821.956 ops/s
# Warmup Iteration  23: 13177299.522 ops/s
# Warmup Iteration  24: 13210648.968 ops/s
# Warmup Iteration  25: 13164133.401 ops/s
# Warmup Iteration  26: 13183109.923 ops/s
# Warmup Iteration  27: 13192487.223 ops/s
# Warmup Iteration  28: 13151348.780 ops/s
# Warmup Iteration  29: 13206196.662 ops/s
# Warmup Iteration  30: 13178599.891 ops/s
Iteration   1: 13190261.373 ops/s
Iteration   2: 13223521.724 ops/s
Iteration   3: 13211474.878 ops/s
Iteration   4: 13228632.631 ops/s
Iteration   5: 13142662.216 ops/s
Iteration   6: 13217780.273 ops/s
Iteration   7: 13134898.963 ops/s
Iteration   8: 13235416.143 ops/s
Iteration   9: 13145578.783 ops/s
Iteration  10: 13203337.844 ops/s
Iteration  11: 13114195.506 ops/s
Iteration  12: 13232447.484 ops/s
Iteration  13: 13110330.154 ops/s
Iteration  14: 13185223.742 ops/s
Iteration  15: 13149214.494 ops/s
Iteration  16: 13188544.556 ops/s
Iteration  17: 13153823.929 ops/s
Iteration  18: 13142235.665 ops/s
Iteration  19: 13220165.549 ops/s
Iteration  20: 13148712.055 ops/s
Iteration  21: 13209617.966 ops/s
Iteration  22: 13147431.472 ops/s
Iteration  23: 13217585.677 ops/s
Iteration  24: 13165196.870 ops/s
Iteration  25: 13177225.671 ops/s
Iteration  26: 13170427.469 ops/s
Iteration  27: 13219837.206 ops/s
Iteration  28: 13162168.638 ops/s
Iteration  29: 13182910.003 ops/s
Iteration  30: 13113990.442 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectLong":
  13178161.646 ±(99.9%) 25587.592 ops/s [Average]
  (min, avg, max) = (13110330.154, 13178161.646, 13235416.143), stdev = 38298.306
  CI (99.9%): [13152574.054, 13203749.238] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt         Score       Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectLong  thrpt   30  13178161.646 ± 25587.592  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5668132.180 ops/s
# Warmup Iteration   2: 12891924.566 ops/s
# Warmup Iteration   3: 10972508.238 ops/s
# Warmup Iteration   4: 13170804.588 ops/s
# Warmup Iteration   5: 13145600.601 ops/s
# Warmup Iteration   6: 13195823.482 ops/s
# Warmup Iteration   7: 13167530.157 ops/s
# Warmup Iteration   8: 13163408.017 ops/s
# Warmup Iteration   9: 13162693.452 ops/s
# Warmup Iteration  10: 13181200.976 ops/s
# Warmup Iteration  11: 13170511.076 ops/s
# Warmup Iteration  12: 13157795.895 ops/s
# Warmup Iteration  13: 13169340.815 ops/s
# Warmup Iteration  14: 13149520.512 ops/s
# Warmup Iteration  15: 13165227.534 ops/s
# Warmup Iteration  16: 13164521.025 ops/s
# Warmup Iteration  17: 13084896.446 ops/s
# Warmup Iteration  18: 13054165.355 ops/s
# Warmup Iteration  19: 13057162.172 ops/s
# Warmup Iteration  20: 13072311.205 ops/s
# Warmup Iteration  21: 13026709.025 ops/s
# Warmup Iteration  22: 13112649.556 ops/s
# Warmup Iteration  23: 13086683.220 ops/s
# Warmup Iteration  24: 13102909.949 ops/s
# Warmup Iteration  25: 13081412.578 ops/s
# Warmup Iteration  26: 13097620.582 ops/s
# Warmup Iteration  27: 13080354.089 ops/s
# Warmup Iteration  28: 13029675.014 ops/s
# Warmup Iteration  29: 13067211.678 ops/s
# Warmup Iteration  30: 13076443.600 ops/s
Iteration   1: 13061456.168 ops/s
Iteration   2: 13060035.172 ops/s
Iteration   3: 13095006.081 ops/s
Iteration   4: 13060410.234 ops/s
Iteration   5: 13070709.664 ops/s
Iteration   6: 13067369.086 ops/s
Iteration   7: 13100443.626 ops/s
Iteration   8: 13050875.841 ops/s
Iteration   9: 13052581.426 ops/s
Iteration  10: 13062960.546 ops/s
Iteration  11: 13109471.074 ops/s
Iteration  12: 13050134.861 ops/s
Iteration  13: 13105759.585 ops/s
Iteration  14: 13099430.831 ops/s
Iteration  15: 13042831.286 ops/s
Iteration  16: 13102826.987 ops/s
Iteration  17: 13006024.682 ops/s
Iteration  18: 13100734.312 ops/s
Iteration  19: 13105585.991 ops/s
Iteration  20: 13074442.219 ops/s
Iteration  21: 13097670.150 ops/s
Iteration  22: 13150177.933 ops/s
Iteration  23: 13102538.249 ops/s
Iteration  24: 13050771.883 ops/s
Iteration  25: 13066526.647 ops/s
Iteration  26: 13072360.589 ops/s
Iteration  27: 13058669.567 ops/s
Iteration  28: 13057699.200 ops/s
Iteration  29: 13119719.556 ops/s
Iteration  30: 13020360.768 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectShort":
  13075852.807 ±(99.9%) 20614.153 ops/s [Average]
  (min, avg, max) = (13006024.682, 13075852.807, 13150177.933), stdev = 30854.297
  CI (99.9%): [13055238.654, 13096466.961] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt         Score       Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectShort  thrpt   30  13075852.807 ± 20614.153  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3578898.920 ops/s
# Warmup Iteration   2: 8201409.500 ops/s
# Warmup Iteration   3: 6640529.368 ops/s
# Warmup Iteration   4: 7960252.575 ops/s
# Warmup Iteration   5: 7936845.426 ops/s
# Warmup Iteration   6: 7949241.261 ops/s
# Warmup Iteration   7: 7962216.184 ops/s
# Warmup Iteration   8: 7986750.105 ops/s
# Warmup Iteration   9: 7955031.475 ops/s
# Warmup Iteration  10: 7969452.255 ops/s
# Warmup Iteration  11: 7974521.232 ops/s
# Warmup Iteration  12: 7971746.456 ops/s
# Warmup Iteration  13: 7952935.861 ops/s
# Warmup Iteration  14: 7967320.300 ops/s
# Warmup Iteration  15: 7959503.551 ops/s
# Warmup Iteration  16: 7970069.412 ops/s
# Warmup Iteration  17: 7982124.716 ops/s
# Warmup Iteration  18: 7965885.342 ops/s
# Warmup Iteration  19: 7964411.551 ops/s
# Warmup Iteration  20: 7973017.172 ops/s
# Warmup Iteration  21: 7965603.536 ops/s
# Warmup Iteration  22: 7964071.299 ops/s
# Warmup Iteration  23: 7943784.985 ops/s
# Warmup Iteration  24: 7972446.640 ops/s
# Warmup Iteration  25: 7980316.454 ops/s
# Warmup Iteration  26: 7960285.923 ops/s
# Warmup Iteration  27: 7970837.763 ops/s
# Warmup Iteration  28: 7979747.665 ops/s
# Warmup Iteration  29: 7975957.269 ops/s
# Warmup Iteration  30: 7985752.571 ops/s
Iteration   1: 7974310.990 ops/s
Iteration   2: 7952382.753 ops/s
Iteration   3: 7969858.506 ops/s
Iteration   4: 7945807.202 ops/s
Iteration   5: 7965130.443 ops/s
Iteration   6: 7970005.464 ops/s
Iteration   7: 7943387.915 ops/s
Iteration   8: 7952845.042 ops/s
Iteration   9: 7962207.470 ops/s
Iteration  10: 7981658.900 ops/s
Iteration  11: 7975614.823 ops/s
Iteration  12: 7968210.589 ops/s
Iteration  13: 7990592.574 ops/s
Iteration  14: 7987335.811 ops/s
Iteration  15: 7978887.173 ops/s
Iteration  16: 7937239.433 ops/s
Iteration  17: 7988832.277 ops/s
Iteration  18: 7971316.148 ops/s
Iteration  19: 7993363.566 ops/s
Iteration  20: 7947569.268 ops/s
Iteration  21: 8008122.737 ops/s
Iteration  22: 7949762.358 ops/s
Iteration  23: 7943277.433 ops/s
Iteration  24: 7969548.197 ops/s
Iteration  25: 7962721.683 ops/s
Iteration  26: 7952742.443 ops/s
Iteration  27: 7974332.863 ops/s
Iteration  28: 7967343.775 ops/s
Iteration  29: 7978796.867 ops/s
Iteration  30: 7967654.040 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectWith":
  7967695.291 ±(99.9%) 11324.277 ops/s [Average]
  (min, avg, max) = (7937239.433, 7967695.291, 8008122.737), stdev = 16949.646
  CI (99.9%): [7956371.014, 7979019.568] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectWith  thrpt   30  7967695.291 ± 11324.277  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_corresponds$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_corresponds

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2786686.592 ops/s
# Warmup Iteration   2: 6993632.401 ops/s
# Warmup Iteration   3: 6736710.071 ops/s
# Warmup Iteration   4: 6289135.612 ops/s
# Warmup Iteration   5: 7143319.094 ops/s
# Warmup Iteration   6: 7153548.620 ops/s
# Warmup Iteration   7: 7150351.470 ops/s
# Warmup Iteration   8: 7146172.786 ops/s
# Warmup Iteration   9: 7140598.289 ops/s
# Warmup Iteration  10: 7139744.612 ops/s
# Warmup Iteration  11: 7149784.088 ops/s
# Warmup Iteration  12: 7146708.659 ops/s
# Warmup Iteration  13: 7150204.565 ops/s
# Warmup Iteration  14: 7155664.355 ops/s
# Warmup Iteration  15: 7140434.162 ops/s
# Warmup Iteration  16: 7141754.603 ops/s
# Warmup Iteration  17: 7147077.190 ops/s
# Warmup Iteration  18: 7160627.897 ops/s
# Warmup Iteration  19: 7158572.228 ops/s
# Warmup Iteration  20: 7159366.530 ops/s
# Warmup Iteration  21: 7157959.137 ops/s
# Warmup Iteration  22: 7160898.507 ops/s
# Warmup Iteration  23: 7156982.668 ops/s
# Warmup Iteration  24: 7160245.668 ops/s
# Warmup Iteration  25: 7152125.778 ops/s
# Warmup Iteration  26: 7158016.566 ops/s
# Warmup Iteration  27: 7157183.445 ops/s
# Warmup Iteration  28: 7157407.575 ops/s
# Warmup Iteration  29: 7156808.581 ops/s
# Warmup Iteration  30: 7145360.348 ops/s
Iteration   1: 7145637.532 ops/s
Iteration   2: 7149119.080 ops/s
Iteration   3: 7163565.138 ops/s
Iteration   4: 7167132.716 ops/s
Iteration   5: 7149231.187 ops/s
Iteration   6: 7146179.649 ops/s
Iteration   7: 7154041.168 ops/s
Iteration   8: 7162450.915 ops/s
Iteration   9: 7144745.201 ops/s
Iteration  10: 7136924.823 ops/s
Iteration  11: 7163307.442 ops/s
Iteration  12: 7153528.118 ops/s
Iteration  13: 7154036.651 ops/s
Iteration  14: 7165095.552 ops/s
Iteration  15: 7162086.089 ops/s
Iteration  16: 7154398.930 ops/s
Iteration  17: 7165222.469 ops/s
Iteration  18: 7156509.331 ops/s
Iteration  19: 7143329.521 ops/s
Iteration  20: 7140065.897 ops/s
Iteration  21: 7154368.469 ops/s
Iteration  22: 7110434.636 ops/s
Iteration  23: 7153896.324 ops/s
Iteration  24: 7169761.758 ops/s
Iteration  25: 7175337.735 ops/s
Iteration  26: 7157125.698 ops/s
Iteration  27: 7145740.787 ops/s
Iteration  28: 7145982.416 ops/s
Iteration  29: 7158907.880 ops/s
Iteration  30: 7166763.665 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_corresponds":
  7153830.893 ±(99.9%) 8356.008 ops/s [Average]
  (min, avg, max) = (7110434.636, 7153830.893, 7175337.735), stdev = 12506.880
  CI (99.9%): [7145474.885, 7162186.900] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_corresponds  thrpt   30  7153830.893 ± 8356.008  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_detectIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_detectIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12996934.219 ops/s
# Warmup Iteration   2: 26333914.158 ops/s
# Warmup Iteration   3: 22410501.902 ops/s
# Warmup Iteration   4: 26314615.936 ops/s
# Warmup Iteration   5: 26295297.420 ops/s
# Warmup Iteration   6: 26335310.385 ops/s
# Warmup Iteration   7: 26343177.744 ops/s
# Warmup Iteration   8: 26367998.292 ops/s
# Warmup Iteration   9: 26394958.548 ops/s
# Warmup Iteration  10: 26386423.686 ops/s
# Warmup Iteration  11: 26353332.951 ops/s
# Warmup Iteration  12: 26316952.778 ops/s
# Warmup Iteration  13: 26341342.064 ops/s
# Warmup Iteration  14: 26324366.451 ops/s
# Warmup Iteration  15: 26323795.709 ops/s
# Warmup Iteration  16: 26397047.743 ops/s
# Warmup Iteration  17: 26389805.188 ops/s
# Warmup Iteration  18: 26386396.567 ops/s
# Warmup Iteration  19: 26283328.020 ops/s
# Warmup Iteration  20: 26385953.496 ops/s
# Warmup Iteration  21: 26322583.999 ops/s
# Warmup Iteration  22: 26391238.488 ops/s
# Warmup Iteration  23: 26382876.984 ops/s
# Warmup Iteration  24: 26363411.076 ops/s
# Warmup Iteration  25: 26337313.135 ops/s
# Warmup Iteration  26: 26415377.064 ops/s
# Warmup Iteration  27: 26336882.191 ops/s
# Warmup Iteration  28: 26382489.903 ops/s
# Warmup Iteration  29: 26314915.725 ops/s
# Warmup Iteration  30: 26363795.776 ops/s
Iteration   1: 26322506.132 ops/s
Iteration   2: 26311896.299 ops/s
Iteration   3: 26297630.075 ops/s
Iteration   4: 26347864.217 ops/s
Iteration   5: 26377272.977 ops/s
Iteration   6: 26341112.161 ops/s
Iteration   7: 26339334.932 ops/s
Iteration   8: 26418105.730 ops/s
Iteration   9: 26413258.142 ops/s
Iteration  10: 26441426.982 ops/s
Iteration  11: 26426989.847 ops/s
Iteration  12: 26375085.419 ops/s
Iteration  13: 26394746.053 ops/s
Iteration  14: 26358198.355 ops/s
Iteration  15: 26326938.964 ops/s
Iteration  16: 26411663.179 ops/s
Iteration  17: 26352023.532 ops/s
Iteration  18: 26413692.866 ops/s
Iteration  19: 26301916.496 ops/s
Iteration  20: 26334346.778 ops/s
Iteration  21: 26377783.833 ops/s
Iteration  22: 26349522.164 ops/s
Iteration  23: 26252927.388 ops/s
Iteration  24: 26343893.219 ops/s
Iteration  25: 26348964.092 ops/s
Iteration  26: 26343400.808 ops/s
Iteration  27: 26382497.969 ops/s
Iteration  28: 26303575.665 ops/s
Iteration  29: 26353209.803 ops/s
Iteration  30: 26305887.333 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_detectIndex":
  26355589.047 ±(99.9%) 29614.047 ops/s [Average]
  (min, avg, max) = (26252927.388, 26355589.047, 26441426.982), stdev = 44324.914
  CI (99.9%): [26325975.000, 26385203.094] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt         Score       Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_detectIndex  thrpt   30  26355589.047 ± 29614.047  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_detectLastIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_detectLastIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12634361.463 ops/s
# Warmup Iteration   2: 26725200.311 ops/s
# Warmup Iteration   3: 22600698.149 ops/s
# Warmup Iteration   4: 26812398.241 ops/s
# Warmup Iteration   5: 26802498.790 ops/s
# Warmup Iteration   6: 26818906.366 ops/s
# Warmup Iteration   7: 26833627.238 ops/s
# Warmup Iteration   8: 26773112.534 ops/s
# Warmup Iteration   9: 26830277.845 ops/s
# Warmup Iteration  10: 26845707.406 ops/s
# Warmup Iteration  11: 26849012.634 ops/s
# Warmup Iteration  12: 26845178.587 ops/s
# Warmup Iteration  13: 26789204.196 ops/s
# Warmup Iteration  14: 26846184.343 ops/s
# Warmup Iteration  15: 26777653.317 ops/s
# Warmup Iteration  16: 26863186.135 ops/s
# Warmup Iteration  17: 26835980.821 ops/s
# Warmup Iteration  18: 26723070.884 ops/s
# Warmup Iteration  19: 26876085.207 ops/s
# Warmup Iteration  20: 26810702.447 ops/s
# Warmup Iteration  21: 26825734.963 ops/s
# Warmup Iteration  22: 26763609.049 ops/s
# Warmup Iteration  23: 26862223.223 ops/s
# Warmup Iteration  24: 26858663.477 ops/s
# Warmup Iteration  25: 26849668.724 ops/s
# Warmup Iteration  26: 26824908.016 ops/s
# Warmup Iteration  27: 26836936.706 ops/s
# Warmup Iteration  28: 26797596.029 ops/s
# Warmup Iteration  29: 26806022.565 ops/s
# Warmup Iteration  30: 26819499.363 ops/s
Iteration   1: 26816662.270 ops/s
Iteration   2: 26826655.827 ops/s
Iteration   3: 26829850.569 ops/s
Iteration   4: 26829111.669 ops/s
Iteration   5: 26838101.541 ops/s
Iteration   6: 26817843.187 ops/s
Iteration   7: 26848855.631 ops/s
Iteration   8: 26853232.809 ops/s
Iteration   9: 26824682.742 ops/s
Iteration  10: 26842492.835 ops/s
Iteration  11: 26890034.144 ops/s
Iteration  12: 26864245.278 ops/s
Iteration  13: 26776394.992 ops/s
Iteration  14: 26875623.290 ops/s
Iteration  15: 26815341.177 ops/s
Iteration  16: 26854110.726 ops/s
Iteration  17: 26802140.387 ops/s
Iteration  18: 26850180.880 ops/s
Iteration  19: 26770284.039 ops/s
Iteration  20: 26886446.584 ops/s
Iteration  21: 26809615.634 ops/s
Iteration  22: 26951001.139 ops/s
Iteration  23: 26832342.674 ops/s
Iteration  24: 26847311.955 ops/s
Iteration  25: 26860056.711 ops/s
Iteration  26: 26864691.776 ops/s
Iteration  27: 26813733.474 ops/s
Iteration  28: 26814200.847 ops/s
Iteration  29: 26822028.697 ops/s
Iteration  30: 26851730.375 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_detectLastIndex":
  26839300.129 ±(99.9%) 23497.462 ops/s [Average]
  (min, avg, max) = (26770284.039, 26839300.129, 26951001.139), stdev = 35169.897
  CI (99.9%): [26815802.667, 26862797.590] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt         Score       Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_detectLastIndex  thrpt   30  26839300.129 ± 23497.462  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_flatCollect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_flatCollect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1291654.970 ops/s
# Warmup Iteration   2: 3247145.854 ops/s
# Warmup Iteration   3: 3401450.551 ops/s
# Warmup Iteration   4: 2793704.353 ops/s
# Warmup Iteration   5: 3429531.548 ops/s
# Warmup Iteration   6: 3441151.458 ops/s
# Warmup Iteration   7: 3440100.111 ops/s
# Warmup Iteration   8: 3442398.996 ops/s
# Warmup Iteration   9: 3442454.904 ops/s
# Warmup Iteration  10: 3440337.383 ops/s
# Warmup Iteration  11: 3439011.027 ops/s
# Warmup Iteration  12: 3439419.963 ops/s
# Warmup Iteration  13: 3438278.334 ops/s
# Warmup Iteration  14: 3443493.631 ops/s
# Warmup Iteration  15: 3432002.591 ops/s
# Warmup Iteration  16: 3437604.866 ops/s
# Warmup Iteration  17: 3433578.642 ops/s
# Warmup Iteration  18: 3431656.362 ops/s
# Warmup Iteration  19: 3440741.951 ops/s
# Warmup Iteration  20: 3439391.509 ops/s
# Warmup Iteration  21: 3442182.272 ops/s
# Warmup Iteration  22: 3444154.741 ops/s
# Warmup Iteration  23: 3438815.949 ops/s
# Warmup Iteration  24: 3432364.019 ops/s
# Warmup Iteration  25: 3432958.333 ops/s
# Warmup Iteration  26: 3438560.683 ops/s
# Warmup Iteration  27: 3444835.789 ops/s
# Warmup Iteration  28: 3429032.965 ops/s
# Warmup Iteration  29: 3440614.766 ops/s
# Warmup Iteration  30: 3438141.801 ops/s
Iteration   1: 3439057.882 ops/s
Iteration   2: 3442476.750 ops/s
Iteration   3: 3426418.847 ops/s
Iteration   4: 3449394.945 ops/s
Iteration   5: 3442143.254 ops/s
Iteration   6: 3440431.662 ops/s
Iteration   7: 3444288.353 ops/s
Iteration   8: 3438195.824 ops/s
Iteration   9: 3425491.440 ops/s
Iteration  10: 3441563.839 ops/s
Iteration  11: 3441489.548 ops/s
Iteration  12: 3429234.354 ops/s
Iteration  13: 3428838.092 ops/s
Iteration  14: 3447731.614 ops/s
Iteration  15: 3440912.211 ops/s
Iteration  16: 3442588.510 ops/s
Iteration  17: 3437141.591 ops/s
Iteration  18: 3429316.352 ops/s
Iteration  19: 3438772.406 ops/s
Iteration  20: 3436354.271 ops/s
Iteration  21: 3439536.104 ops/s
Iteration  22: 3435478.414 ops/s
Iteration  23: 3436145.393 ops/s
Iteration  24: 3437172.438 ops/s
Iteration  25: 3442368.821 ops/s
Iteration  26: 3439808.598 ops/s
Iteration  27: 3434211.887 ops/s
Iteration  28: 3432918.114 ops/s
Iteration  29: 3439842.456 ops/s
Iteration  30: 3445780.511 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_flatCollect":
  3438170.149 ±(99.9%) 3985.638 ops/s [Average]
  (min, avg, max) = (3425491.440, 3438170.149, 3449394.945), stdev = 5965.515
  CI (99.9%): [3434184.512, 3442155.787] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_flatCollect  thrpt   30  3438170.149 ± 3985.638  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_groupBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_groupBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4948373.561 ops/s
# Warmup Iteration   2: 11332742.876 ops/s
# Warmup Iteration   3: 9711309.922 ops/s
# Warmup Iteration   4: 11522228.944 ops/s
# Warmup Iteration   5: 11493693.500 ops/s
# Warmup Iteration   6: 11475680.288 ops/s
# Warmup Iteration   7: 11518234.107 ops/s
# Warmup Iteration   8: 11472566.944 ops/s
# Warmup Iteration   9: 11497680.188 ops/s
# Warmup Iteration  10: 11486037.260 ops/s
# Warmup Iteration  11: 11466662.523 ops/s
# Warmup Iteration  12: 11507913.584 ops/s
# Warmup Iteration  13: 11503757.858 ops/s
# Warmup Iteration  14: 11496734.104 ops/s
# Warmup Iteration  15: 11451993.223 ops/s
# Warmup Iteration  16: 11469074.177 ops/s
# Warmup Iteration  17: 11638241.016 ops/s
# Warmup Iteration  18: 11610912.780 ops/s
# Warmup Iteration  19: 11633588.086 ops/s
# Warmup Iteration  20: 11577819.255 ops/s
# Warmup Iteration  21: 11595251.957 ops/s
# Warmup Iteration  22: 11643090.580 ops/s
# Warmup Iteration  23: 11622999.584 ops/s
# Warmup Iteration  24: 11642029.931 ops/s
# Warmup Iteration  25: 11622644.280 ops/s
# Warmup Iteration  26: 11601322.610 ops/s
# Warmup Iteration  27: 11581377.584 ops/s
# Warmup Iteration  28: 11587889.831 ops/s
# Warmup Iteration  29: 11571635.621 ops/s
# Warmup Iteration  30: 11615147.909 ops/s
Iteration   1: 11617885.446 ops/s
Iteration   2: 11637830.859 ops/s
Iteration   3: 11655657.349 ops/s
Iteration   4: 11605842.618 ops/s
Iteration   5: 11613773.177 ops/s
Iteration   6: 11590932.732 ops/s
Iteration   7: 11573955.940 ops/s
Iteration   8: 11591211.054 ops/s
Iteration   9: 11608419.056 ops/s
Iteration  10: 11670260.607 ops/s
Iteration  11: 11614114.199 ops/s
Iteration  12: 11667633.683 ops/s
Iteration  13: 11607779.974 ops/s
Iteration  14: 11578499.413 ops/s
Iteration  15: 11599837.113 ops/s
Iteration  16: 11662420.389 ops/s
Iteration  17: 11665775.143 ops/s
Iteration  18: 11622729.303 ops/s
Iteration  19: 11613837.832 ops/s
Iteration  20: 11612828.537 ops/s
Iteration  21: 11649697.234 ops/s
Iteration  22: 11610101.845 ops/s
Iteration  23: 11644782.888 ops/s
Iteration  24: 11630268.262 ops/s
Iteration  25: 11621442.779 ops/s
Iteration  26: 11634517.742 ops/s
Iteration  27: 11599834.262 ops/s
Iteration  28: 11627300.529 ops/s
Iteration  29: 11649082.574 ops/s
Iteration  30: 11679106.766 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_groupBy":
  11625245.310 ±(99.9%) 18711.643 ops/s [Average]
  (min, avg, max) = (11573955.940, 11625245.310, 11679106.766), stdev = 28006.708
  CI (99.9%): [11606533.667, 11643956.953] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score       Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_groupBy  thrpt   30  11625245.310 ± 18711.643  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_iteratorRemove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_iteratorRemove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 702421.099 ops/s
# Warmup Iteration   2: 779880.713 ops/s
# Warmup Iteration   3: 1023003.122 ops/s
# Warmup Iteration   4: 1016036.207 ops/s
# Warmup Iteration   5: 1017768.899 ops/s
# Warmup Iteration   6: 1014871.747 ops/s
# Warmup Iteration   7: 1016073.794 ops/s
# Warmup Iteration   8: 1019463.950 ops/s
# Warmup Iteration   9: 1016747.916 ops/s
# Warmup Iteration  10: 853538.333 ops/s
# Warmup Iteration  11: 1018045.708 ops/s
# Warmup Iteration  12: 1013901.331 ops/s
# Warmup Iteration  13: 1014394.300 ops/s
# Warmup Iteration  14: 1015792.523 ops/s
# Warmup Iteration  15: 1015894.162 ops/s
# Warmup Iteration  16: 1016751.902 ops/s
# Warmup Iteration  17: 1076996.852 ops/s
# Warmup Iteration  18: 1081756.555 ops/s
# Warmup Iteration  19: 1082831.876 ops/s
# Warmup Iteration  20: 1081224.691 ops/s
# Warmup Iteration  21: 1081772.540 ops/s
# Warmup Iteration  22: 1079708.534 ops/s
# Warmup Iteration  23: 1081610.522 ops/s
# Warmup Iteration  24: 1082308.139 ops/s
# Warmup Iteration  25: 1084134.373 ops/s
# Warmup Iteration  26: 1078263.160 ops/s
# Warmup Iteration  27: 1082449.006 ops/s
# Warmup Iteration  28: 1079656.324 ops/s
# Warmup Iteration  29: 1081201.859 ops/s
# Warmup Iteration  30: 1082167.654 ops/s
Iteration   1: 1084081.405 ops/s
Iteration   2: 1081893.859 ops/s
Iteration   3: 1081834.028 ops/s
Iteration   4: 1083280.707 ops/s
Iteration   5: 1076248.172 ops/s
Iteration   6: 1080923.236 ops/s
Iteration   7: 1084657.378 ops/s
Iteration   8: 1083890.270 ops/s
Iteration   9: 1077686.405 ops/s
Iteration  10: 1078469.901 ops/s
Iteration  11: 1081530.946 ops/s
Iteration  12: 1076250.078 ops/s
Iteration  13: 1083073.716 ops/s
Iteration  14: 1084769.184 ops/s
Iteration  15: 1078511.963 ops/s
Iteration  16: 1077182.968 ops/s
Iteration  17: 1082253.421 ops/s
Iteration  18: 1084536.354 ops/s
Iteration  19: 1080708.923 ops/s
Iteration  20: 1079801.980 ops/s
Iteration  21: 1082039.872 ops/s
Iteration  22: 1079544.995 ops/s
Iteration  23: 1080407.239 ops/s
Iteration  24: 1076404.131 ops/s
Iteration  25: 1080133.144 ops/s
Iteration  26: 1080502.690 ops/s
Iteration  27: 1084639.206 ops/s
Iteration  28: 1083554.534 ops/s
Iteration  29: 1083168.459 ops/s
Iteration  30: 1078154.309 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_iteratorRemove":
  1081004.449 ±(99.9%) 1814.224 ops/s [Average]
  (min, avg, max) = (1076248.172, 1081004.449, 1084769.184), stdev = 2715.445
  CI (99.9%): [1079190.225, 1082818.673] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_iteratorRemove  thrpt   30  1081004.449 ± 1814.224  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_listIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_listIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 236650.229 ops/s
# Warmup Iteration   2: 251444.567 ops/s
# Warmup Iteration   3: 319493.343 ops/s
# Warmup Iteration   4: 320474.492 ops/s
# Warmup Iteration   5: 321373.925 ops/s
# Warmup Iteration   6: 320194.753 ops/s
# Warmup Iteration   7: 319803.274 ops/s
# Warmup Iteration   8: 319716.233 ops/s
# Warmup Iteration   9: 319959.314 ops/s
# Warmup Iteration  10: 320628.710 ops/s
# Warmup Iteration  11: 320272.886 ops/s
# Warmup Iteration  12: 275334.477 ops/s
# Warmup Iteration  13: 320388.858 ops/s
# Warmup Iteration  14: 319097.400 ops/s
# Warmup Iteration  15: 320152.459 ops/s
# Warmup Iteration  16: 320009.081 ops/s
# Warmup Iteration  17: 340626.486 ops/s
# Warmup Iteration  18: 340906.554 ops/s
# Warmup Iteration  19: 340257.683 ops/s
# Warmup Iteration  20: 340656.685 ops/s
# Warmup Iteration  21: 340869.956 ops/s
# Warmup Iteration  22: 340414.129 ops/s
# Warmup Iteration  23: 341215.581 ops/s
# Warmup Iteration  24: 339567.692 ops/s
# Warmup Iteration  25: 340326.222 ops/s
# Warmup Iteration  26: 340375.529 ops/s
# Warmup Iteration  27: 340273.215 ops/s
# Warmup Iteration  28: 340075.607 ops/s
# Warmup Iteration  29: 339852.989 ops/s
# Warmup Iteration  30: 340319.969 ops/s
Iteration   1: 339893.874 ops/s
Iteration   2: 341281.380 ops/s
Iteration   3: 339731.645 ops/s
Iteration   4: 340789.380 ops/s
Iteration   5: 340474.538 ops/s
Iteration   6: 340586.794 ops/s
Iteration   7: 340685.324 ops/s
Iteration   8: 340156.207 ops/s
Iteration   9: 340778.170 ops/s
Iteration  10: 341313.748 ops/s
Iteration  11: 339175.732 ops/s
Iteration  12: 341273.524 ops/s
Iteration  13: 340381.584 ops/s
Iteration  14: 340781.605 ops/s
Iteration  15: 339819.824 ops/s
Iteration  16: 341557.826 ops/s
Iteration  17: 341856.385 ops/s
Iteration  18: 338570.448 ops/s
Iteration  19: 340570.066 ops/s
Iteration  20: 339582.595 ops/s
Iteration  21: 339112.021 ops/s
Iteration  22: 341342.525 ops/s
Iteration  23: 340555.142 ops/s
Iteration  24: 341934.740 ops/s
Iteration  25: 341119.594 ops/s
Iteration  26: 340871.941 ops/s
Iteration  27: 340768.095 ops/s
Iteration  28: 341347.752 ops/s
Iteration  29: 340767.370 ops/s
Iteration  30: 333080.058 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_listIterator":
  340338.663 ±(99.9%) 1062.522 ops/s [Average]
  (min, avg, max) = (333080.058, 340338.663, 341934.740), stdev = 1590.333
  CI (99.9%): [339276.141, 341401.185] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_listIterator  thrpt   30  340338.663 ± 1062.522  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_newEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_newEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7326957.874 ops/s
# Warmup Iteration   2: 15197249.258 ops/s
# Warmup Iteration   3: 13466720.873 ops/s
# Warmup Iteration   4: 16035337.851 ops/s
# Warmup Iteration   5: 15966074.753 ops/s
# Warmup Iteration   6: 16022019.192 ops/s
# Warmup Iteration   7: 16007289.902 ops/s
# Warmup Iteration   8: 15999474.545 ops/s
# Warmup Iteration   9: 15969921.157 ops/s
# Warmup Iteration  10: 15990803.465 ops/s
# Warmup Iteration  11: 15987207.535 ops/s
# Warmup Iteration  12: 15984980.469 ops/s
# Warmup Iteration  13: 16031764.963 ops/s
# Warmup Iteration  14: 16002786.427 ops/s
# Warmup Iteration  15: 16009602.525 ops/s
# Warmup Iteration  16: 16019853.927 ops/s
# Warmup Iteration  17: 15983725.561 ops/s
# Warmup Iteration  18: 16014187.550 ops/s
# Warmup Iteration  19: 15982869.092 ops/s
# Warmup Iteration  20: 15949554.500 ops/s
# Warmup Iteration  21: 16015188.301 ops/s
# Warmup Iteration  22: 16032069.462 ops/s
# Warmup Iteration  23: 15993432.013 ops/s
# Warmup Iteration  24: 16023838.513 ops/s
# Warmup Iteration  25: 15928849.119 ops/s
# Warmup Iteration  26: 16021386.057 ops/s
# Warmup Iteration  27: 15942915.079 ops/s
# Warmup Iteration  28: 15979268.341 ops/s
# Warmup Iteration  29: 16015449.003 ops/s
# Warmup Iteration  30: 15924804.366 ops/s
Iteration   1: 15945054.203 ops/s
Iteration   2: 15969693.044 ops/s
Iteration   3: 15962383.647 ops/s
Iteration   4: 15976573.699 ops/s
Iteration   5: 15945079.750 ops/s
Iteration   6: 15888075.951 ops/s
Iteration   7: 16014362.280 ops/s
Iteration   8: 15979147.904 ops/s
Iteration   9: 15973907.383 ops/s
Iteration  10: 16000989.412 ops/s
Iteration  11: 16027816.103 ops/s
Iteration  12: 16014552.065 ops/s
Iteration  13: 16003730.778 ops/s
Iteration  14: 16044426.602 ops/s
Iteration  15: 16012853.502 ops/s
Iteration  16: 16000206.750 ops/s
Iteration  17: 15999300.119 ops/s
Iteration  18: 15987018.234 ops/s
Iteration  19: 15983840.951 ops/s
Iteration  20: 15999688.728 ops/s
Iteration  21: 15940109.660 ops/s
Iteration  22: 15946950.745 ops/s
Iteration  23: 15996032.112 ops/s
Iteration  24: 16031395.936 ops/s
Iteration  25: 15935665.340 ops/s
Iteration  26: 15966507.730 ops/s
Iteration  27: 15958903.883 ops/s
Iteration  28: 15925353.266 ops/s
Iteration  29: 16028960.226 ops/s
Iteration  30: 15977311.752 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_newEmpty":
  15981196.392 ±(99.9%) 23866.557 ops/s [Average]
  (min, avg, max) = (15888075.951, 15981196.392, 16044426.602), stdev = 35722.341
  CI (99.9%): [15957329.835, 16005062.949] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_newEmpty  thrpt   30  15981196.392 ± 23866.557  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_partition$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_partition

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5989270.386 ops/s
# Warmup Iteration   2: 11108641.490 ops/s
# Warmup Iteration   3: 11822885.075 ops/s
# Warmup Iteration   4: 12393241.864 ops/s
# Warmup Iteration   5: 12375733.886 ops/s
# Warmup Iteration   6: 12407766.927 ops/s
# Warmup Iteration   7: 12395334.689 ops/s
# Warmup Iteration   8: 12449199.464 ops/s
# Warmup Iteration   9: 12414734.206 ops/s
# Warmup Iteration  10: 12420587.638 ops/s
# Warmup Iteration  11: 12364003.087 ops/s
# Warmup Iteration  12: 12406854.079 ops/s
# Warmup Iteration  13: 12433283.185 ops/s
# Warmup Iteration  14: 12393130.092 ops/s
# Warmup Iteration  15: 12407233.172 ops/s
# Warmup Iteration  16: 12421640.936 ops/s
# Warmup Iteration  17: 12385056.408 ops/s
# Warmup Iteration  18: 12449868.460 ops/s
# Warmup Iteration  19: 12369093.747 ops/s
# Warmup Iteration  20: 12403793.002 ops/s
# Warmup Iteration  21: 12391765.420 ops/s
# Warmup Iteration  22: 12376288.954 ops/s
# Warmup Iteration  23: 12405958.500 ops/s
# Warmup Iteration  24: 12427417.610 ops/s
# Warmup Iteration  25: 12353193.543 ops/s
# Warmup Iteration  26: 12377313.841 ops/s
# Warmup Iteration  27: 12381829.352 ops/s
# Warmup Iteration  28: 12387082.465 ops/s
# Warmup Iteration  29: 12386052.886 ops/s
# Warmup Iteration  30: 12435776.311 ops/s
Iteration   1: 12374577.118 ops/s
Iteration   2: 12388547.575 ops/s
Iteration   3: 12401815.120 ops/s
Iteration   4: 12365192.991 ops/s
Iteration   5: 12338800.044 ops/s
Iteration   6: 12445110.856 ops/s
Iteration   7: 12390189.507 ops/s
Iteration   8: 12321383.571 ops/s
Iteration   9: 12379468.018 ops/s
Iteration  10: 12426616.329 ops/s
Iteration  11: 12397268.134 ops/s
Iteration  12: 12352672.683 ops/s
Iteration  13: 12334955.350 ops/s
Iteration  14: 12416722.431 ops/s
Iteration  15: 12434966.986 ops/s
Iteration  16: 12355336.138 ops/s
Iteration  17: 12386083.699 ops/s
Iteration  18: 12421487.806 ops/s
Iteration  19: 12403538.811 ops/s
Iteration  20: 12343806.628 ops/s
Iteration  21: 12395644.480 ops/s
Iteration  22: 12349705.286 ops/s
Iteration  23: 12393899.785 ops/s
Iteration  24: 12367861.540 ops/s
Iteration  25: 12393367.576 ops/s
Iteration  26: 12394751.045 ops/s
Iteration  27: 12387033.374 ops/s
Iteration  28: 12379010.253 ops/s
Iteration  29: 12383408.516 ops/s
Iteration  30: 12379989.670 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_partition":
  12383440.377 ±(99.9%) 19900.180 ops/s [Average]
  (min, avg, max) = (12321383.571, 12383440.377, 12445110.856), stdev = 29785.655
  CI (99.9%): [12363540.197, 12403340.558] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score       Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_partition  thrpt   30  12383440.377 ± 19900.180  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_partitionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_partitionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6677276.182 ops/s
# Warmup Iteration   2: 11621081.562 ops/s
# Warmup Iteration   3: 13835063.142 ops/s
# Warmup Iteration   4: 13860809.105 ops/s
# Warmup Iteration   5: 13824580.293 ops/s
# Warmup Iteration   6: 13849914.410 ops/s
# Warmup Iteration   7: 13767001.384 ops/s
# Warmup Iteration   8: 13846624.972 ops/s
# Warmup Iteration   9: 13816620.600 ops/s
# Warmup Iteration  10: 13811668.403 ops/s
# Warmup Iteration  11: 13846920.220 ops/s
# Warmup Iteration  12: 13864081.925 ops/s
# Warmup Iteration  13: 13861035.972 ops/s
# Warmup Iteration  14: 13810766.623 ops/s
# Warmup Iteration  15: 13829421.050 ops/s
# Warmup Iteration  16: 13848236.029 ops/s
# Warmup Iteration  17: 13881734.041 ops/s
# Warmup Iteration  18: 13785009.735 ops/s
# Warmup Iteration  19: 13882279.698 ops/s
# Warmup Iteration  20: 13860750.832 ops/s
# Warmup Iteration  21: 13873586.266 ops/s
# Warmup Iteration  22: 13837335.221 ops/s
# Warmup Iteration  23: 13802759.178 ops/s
# Warmup Iteration  24: 13756837.541 ops/s
# Warmup Iteration  25: 13858031.931 ops/s
# Warmup Iteration  26: 13832802.606 ops/s
# Warmup Iteration  27: 13854128.037 ops/s
# Warmup Iteration  28: 13918562.704 ops/s
# Warmup Iteration  29: 13854167.300 ops/s
# Warmup Iteration  30: 13860492.614 ops/s
Iteration   1: 13773562.279 ops/s
Iteration   2: 13845438.472 ops/s
Iteration   3: 13885553.724 ops/s
Iteration   4: 13792055.771 ops/s
Iteration   5: 13788588.817 ops/s
Iteration   6: 13898783.730 ops/s
Iteration   7: 13882803.004 ops/s
Iteration   8: 13736657.884 ops/s
Iteration   9: 13767406.971 ops/s
Iteration  10: 13849586.210 ops/s
Iteration  11: 13853702.450 ops/s
Iteration  12: 13879295.783 ops/s
Iteration  13: 13840517.660 ops/s
Iteration  14: 13807984.639 ops/s
Iteration  15: 13802686.364 ops/s
Iteration  16: 13834418.382 ops/s
Iteration  17: 13876232.803 ops/s
Iteration  18: 13893459.884 ops/s
Iteration  19: 13859147.403 ops/s
Iteration  20: 13797386.562 ops/s
Iteration  21: 13827599.395 ops/s
Iteration  22: 13786427.942 ops/s
Iteration  23: 13823117.865 ops/s
Iteration  24: 13835084.316 ops/s
Iteration  25: 13899867.518 ops/s
Iteration  26: 13842097.967 ops/s
Iteration  27: 13906059.012 ops/s
Iteration  28: 13863329.766 ops/s
Iteration  29: 13855585.030 ops/s
Iteration  30: 13920911.925 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_partitionWith":
  13840844.984 ±(99.9%) 30872.349 ops/s [Average]
  (min, avg, max) = (13736657.884, 13840844.984, 13920911.925), stdev = 46208.283
  CI (99.9%): [13809972.635, 13871717.334] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt         Score       Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_partitionWith  thrpt   30  13840844.984 ± 30872.349  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2254137.314 ops/s
# Warmup Iteration   2: 9613316.010 ops/s
# Warmup Iteration   3: 8231479.185 ops/s
# Warmup Iteration   4: 9693006.170 ops/s
# Warmup Iteration   5: 9739194.442 ops/s
# Warmup Iteration   6: 9713532.356 ops/s
# Warmup Iteration   7: 9754005.112 ops/s
# Warmup Iteration   8: 9729247.640 ops/s
# Warmup Iteration   9: 9748689.836 ops/s
# Warmup Iteration  10: 9713816.293 ops/s
# Warmup Iteration  11: 9733300.901 ops/s
# Warmup Iteration  12: 9745284.908 ops/s
# Warmup Iteration  13: 9718594.055 ops/s
# Warmup Iteration  14: 9733608.781 ops/s
# Warmup Iteration  15: 9707349.353 ops/s
# Warmup Iteration  16: 9751722.155 ops/s
# Warmup Iteration  17: 9741245.130 ops/s
# Warmup Iteration  18: 9719722.692 ops/s
# Warmup Iteration  19: 9742537.917 ops/s
# Warmup Iteration  20: 9730199.520 ops/s
# Warmup Iteration  21: 9699954.162 ops/s
# Warmup Iteration  22: 9704116.430 ops/s
# Warmup Iteration  23: 9712577.367 ops/s
# Warmup Iteration  24: 9705157.544 ops/s
# Warmup Iteration  25: 9697872.845 ops/s
# Warmup Iteration  26: 9711782.867 ops/s
# Warmup Iteration  27: 9684099.431 ops/s
# Warmup Iteration  28: 9707235.577 ops/s
# Warmup Iteration  29: 9725936.916 ops/s
# Warmup Iteration  30: 9739968.519 ops/s
Iteration   1: 9725520.406 ops/s
Iteration   2: 9738084.175 ops/s
Iteration   3: 9645018.700 ops/s
Iteration   4: 9726570.538 ops/s
Iteration   5: 9701276.239 ops/s
Iteration   6: 9716410.982 ops/s
Iteration   7: 9742086.316 ops/s
Iteration   8: 9715097.864 ops/s
Iteration   9: 9695631.089 ops/s
Iteration  10: 9728733.152 ops/s
Iteration  11: 9710563.753 ops/s
Iteration  12: 9710028.787 ops/s
Iteration  13: 9725764.900 ops/s
Iteration  14: 9705271.853 ops/s
Iteration  15: 9727204.231 ops/s
Iteration  16: 9728333.211 ops/s
Iteration  17: 9730952.211 ops/s
Iteration  18: 9722763.815 ops/s
Iteration  19: 9706078.843 ops/s
Iteration  20: 9664954.833 ops/s
Iteration  21: 9693850.762 ops/s
Iteration  22: 9719298.364 ops/s
Iteration  23: 9691414.565 ops/s
Iteration  24: 9718100.856 ops/s
Iteration  25: 9699179.136 ops/s
Iteration  26: 9696287.984 ops/s
Iteration  27: 9718826.752 ops/s
Iteration  28: 9738172.532 ops/s
Iteration  29: 9712424.284 ops/s
Iteration  30: 9721123.009 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_reject":
  9712500.805 ±(99.9%) 13972.391 ops/s [Average]
  (min, avg, max) = (9645018.700, 9712500.805, 9742086.316), stdev = 20913.219
  CI (99.9%): [9698528.413, 9726473.196] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_reject  thrpt   30  9712500.805 ± 13972.391  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_rejectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_rejectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4881846.640 ops/s
# Warmup Iteration   2: 9367450.217 ops/s
# Warmup Iteration   3: 9777844.762 ops/s
# Warmup Iteration   4: 10356633.839 ops/s
# Warmup Iteration   5: 10351513.881 ops/s
# Warmup Iteration   6: 10295888.138 ops/s
# Warmup Iteration   7: 10396050.280 ops/s
# Warmup Iteration   8: 10322380.703 ops/s
# Warmup Iteration   9: 10328875.504 ops/s
# Warmup Iteration  10: 10334742.232 ops/s
# Warmup Iteration  11: 10332315.797 ops/s
# Warmup Iteration  12: 10377720.136 ops/s
# Warmup Iteration  13: 10361823.436 ops/s
# Warmup Iteration  14: 10311553.007 ops/s
# Warmup Iteration  15: 10313623.630 ops/s
# Warmup Iteration  16: 10373884.829 ops/s
# Warmup Iteration  17: 10421673.857 ops/s
# Warmup Iteration  18: 10379844.106 ops/s
# Warmup Iteration  19: 10394982.074 ops/s
# Warmup Iteration  20: 10432160.677 ops/s
# Warmup Iteration  21: 10413222.295 ops/s
# Warmup Iteration  22: 10431841.848 ops/s
# Warmup Iteration  23: 10406948.934 ops/s
# Warmup Iteration  24: 10399475.921 ops/s
# Warmup Iteration  25: 10397823.355 ops/s
# Warmup Iteration  26: 10405084.628 ops/s
# Warmup Iteration  27: 10369394.598 ops/s
# Warmup Iteration  28: 10415169.243 ops/s
# Warmup Iteration  29: 10371972.098 ops/s
# Warmup Iteration  30: 10427219.823 ops/s
Iteration   1: 10405575.783 ops/s
Iteration   2: 10438719.758 ops/s
Iteration   3: 10376663.312 ops/s
Iteration   4: 10411214.782 ops/s
Iteration   5: 10447293.268 ops/s
Iteration   6: 10420949.763 ops/s
Iteration   7: 10408947.166 ops/s
Iteration   8: 10403924.597 ops/s
Iteration   9: 10374700.834 ops/s
Iteration  10: 10384564.727 ops/s
Iteration  11: 10425905.173 ops/s
Iteration  12: 10400447.515 ops/s
Iteration  13: 10400477.588 ops/s
Iteration  14: 10403202.231 ops/s
Iteration  15: 10368833.123 ops/s
Iteration  16: 10397428.338 ops/s
Iteration  17: 10408622.449 ops/s
Iteration  18: 10386534.601 ops/s
Iteration  19: 10340775.594 ops/s
Iteration  20: 10386100.114 ops/s
Iteration  21: 10342032.277 ops/s
Iteration  22: 10400838.764 ops/s
Iteration  23: 10415824.106 ops/s
Iteration  24: 10363994.913 ops/s
Iteration  25: 10350955.995 ops/s
Iteration  26: 10425901.458 ops/s
Iteration  27: 10387663.206 ops/s
Iteration  28: 10408694.451 ops/s
Iteration  29: 10378672.703 ops/s
Iteration  30: 10389609.200 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_rejectWith":
  10395168.926 ±(99.9%) 17342.774 ops/s [Average]
  (min, avg, max) = (10340775.594, 10395168.926, 10447293.268), stdev = 25957.850
  CI (99.9%): [10377826.152, 10412511.700] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score       Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_rejectWith  thrpt   30  10395168.926 ± 17342.774  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 710028.621 ops/s
# Warmup Iteration   2: 789820.930 ops/s
# Warmup Iteration   3: 1025053.158 ops/s
# Warmup Iteration   4: 1017971.443 ops/s
# Warmup Iteration   5: 1015871.809 ops/s
# Warmup Iteration   6: 1006871.365 ops/s
# Warmup Iteration   7: 1015539.343 ops/s
# Warmup Iteration   8: 1016326.469 ops/s
# Warmup Iteration   9: 1017176.311 ops/s
# Warmup Iteration  10: 894985.871 ops/s
# Warmup Iteration  11: 978694.243 ops/s
# Warmup Iteration  12: 1018464.181 ops/s
# Warmup Iteration  13: 1017668.707 ops/s
# Warmup Iteration  14: 1017896.925 ops/s
# Warmup Iteration  15: 1017621.190 ops/s
# Warmup Iteration  16: 1014961.342 ops/s
# Warmup Iteration  17: 1082095.860 ops/s
# Warmup Iteration  18: 1079627.924 ops/s
# Warmup Iteration  19: 1079788.024 ops/s
# Warmup Iteration  20: 1080293.221 ops/s
# Warmup Iteration  21: 1081246.342 ops/s
# Warmup Iteration  22: 1079354.442 ops/s
# Warmup Iteration  23: 1085938.036 ops/s
# Warmup Iteration  24: 1079063.723 ops/s
# Warmup Iteration  25: 1083013.284 ops/s
# Warmup Iteration  26: 1081026.695 ops/s
# Warmup Iteration  27: 1076364.680 ops/s
# Warmup Iteration  28: 1082259.558 ops/s
# Warmup Iteration  29: 1082436.195 ops/s
# Warmup Iteration  30: 1082786.918 ops/s
Iteration   1: 1078786.940 ops/s
Iteration   2: 1076830.587 ops/s
Iteration   3: 1076588.581 ops/s
Iteration   4: 1078310.449 ops/s
Iteration   5: 1079977.263 ops/s
Iteration   6: 1085756.288 ops/s
Iteration   7: 1077510.546 ops/s
Iteration   8: 1079384.113 ops/s
Iteration   9: 1079283.416 ops/s
Iteration  10: 1083465.466 ops/s
Iteration  11: 1079495.785 ops/s
Iteration  12: 1081080.438 ops/s
Iteration  13: 1084810.619 ops/s
Iteration  14: 1076472.690 ops/s
Iteration  15: 1084354.194 ops/s
Iteration  16: 1083754.471 ops/s
Iteration  17: 1079656.243 ops/s
Iteration  18: 1074617.728 ops/s
Iteration  19: 1076920.181 ops/s
Iteration  20: 1077852.671 ops/s
Iteration  21: 1082752.740 ops/s
Iteration  22: 1079574.361 ops/s
Iteration  23: 1081063.988 ops/s
Iteration  24: 1081242.533 ops/s
Iteration  25: 1080631.192 ops/s
Iteration  26: 1085787.307 ops/s
Iteration  27: 1079092.098 ops/s
Iteration  28: 1085471.861 ops/s
Iteration  29: 1081391.574 ops/s
Iteration  30: 1076155.947 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_remove":
  1080269.076 ±(99.9%) 2080.163 ops/s [Average]
  (min, avg, max) = (1074617.728, 1080269.076, 1085787.307), stdev = 3113.490
  CI (99.9%): [1078188.913, 1082349.238] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_remove  thrpt   30  1080269.076 ± 2080.163  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 709564.171 ops/s
# Warmup Iteration   2: 797743.963 ops/s
# Warmup Iteration   3: 1014826.228 ops/s
# Warmup Iteration   4: 1008735.396 ops/s
# Warmup Iteration   5: 1013493.096 ops/s
# Warmup Iteration   6: 1012186.511 ops/s
# Warmup Iteration   7: 1010387.966 ops/s
# Warmup Iteration   8: 1012181.056 ops/s
# Warmup Iteration   9: 1005049.872 ops/s
# Warmup Iteration  10: 876347.172 ops/s
# Warmup Iteration  11: 986286.868 ops/s
# Warmup Iteration  12: 1005215.936 ops/s
# Warmup Iteration  13: 1011692.743 ops/s
# Warmup Iteration  14: 1006682.798 ops/s
# Warmup Iteration  15: 1010976.075 ops/s
# Warmup Iteration  16: 1007587.445 ops/s
# Warmup Iteration  17: 1074546.120 ops/s
# Warmup Iteration  18: 1076308.222 ops/s
# Warmup Iteration  19: 1073339.826 ops/s
# Warmup Iteration  20: 1077323.757 ops/s
# Warmup Iteration  21: 1075540.806 ops/s
# Warmup Iteration  22: 1077412.840 ops/s
# Warmup Iteration  23: 1074540.671 ops/s
# Warmup Iteration  24: 1074654.271 ops/s
# Warmup Iteration  25: 1075572.960 ops/s
# Warmup Iteration  26: 1073318.028 ops/s
# Warmup Iteration  27: 1075199.036 ops/s
# Warmup Iteration  28: 1077002.324 ops/s
# Warmup Iteration  29: 1071718.938 ops/s
# Warmup Iteration  30: 1075574.119 ops/s
Iteration   1: 1076125.742 ops/s
Iteration   2: 1076021.758 ops/s
Iteration   3: 1076264.190 ops/s
Iteration   4: 1074808.897 ops/s
Iteration   5: 1073398.665 ops/s
Iteration   6: 1077161.499 ops/s
Iteration   7: 1077095.519 ops/s
Iteration   8: 1075564.342 ops/s
Iteration   9: 1077459.830 ops/s
Iteration  10: 1077114.523 ops/s
Iteration  11: 1076547.119 ops/s
Iteration  12: 1077923.063 ops/s
Iteration  13: 1069480.638 ops/s
Iteration  14: 1075684.142 ops/s
Iteration  15: 1075174.736 ops/s
Iteration  16: 1075313.556 ops/s
Iteration  17: 1072397.181 ops/s
Iteration  18: 1076039.716 ops/s
Iteration  19: 1076838.593 ops/s
Iteration  20: 1074146.076 ops/s
Iteration  21: 1074358.203 ops/s
Iteration  22: 1079223.296 ops/s
Iteration  23: 1074262.964 ops/s
Iteration  24: 1070079.717 ops/s
Iteration  25: 1073840.533 ops/s
Iteration  26: 1075521.097 ops/s
Iteration  27: 1076849.444 ops/s
Iteration  28: 1066359.050 ops/s
Iteration  29: 1075352.540 ops/s
Iteration  30: 1075442.635 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_removeAll":
  1075061.642 ±(99.9%) 1768.908 ops/s [Average]
  (min, avg, max) = (1066359.050, 1075061.642, 1079223.296), stdev = 2647.618
  CI (99.9%): [1073292.735, 1076830.550] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_removeAll  thrpt   30  1075061.642 ± 1768.908  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_removeAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_removeAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 703159.321 ops/s
# Warmup Iteration   2: 796001.716 ops/s
# Warmup Iteration   3: 1023646.403 ops/s
# Warmup Iteration   4: 1014664.431 ops/s
# Warmup Iteration   5: 1018138.835 ops/s
# Warmup Iteration   6: 1015390.625 ops/s
# Warmup Iteration   7: 1020320.272 ops/s
# Warmup Iteration   8: 1019896.105 ops/s
# Warmup Iteration   9: 1019171.398 ops/s
# Warmup Iteration  10: 856648.801 ops/s
# Warmup Iteration  11: 1020873.965 ops/s
# Warmup Iteration  12: 1019976.275 ops/s
# Warmup Iteration  13: 1021292.689 ops/s
# Warmup Iteration  14: 1018603.152 ops/s
# Warmup Iteration  15: 1013208.169 ops/s
# Warmup Iteration  16: 1020410.886 ops/s
# Warmup Iteration  17: 1086260.950 ops/s
# Warmup Iteration  18: 1086499.297 ops/s
# Warmup Iteration  19: 1084502.496 ops/s
# Warmup Iteration  20: 1080701.119 ops/s
# Warmup Iteration  21: 1083295.418 ops/s
# Warmup Iteration  22: 1084431.383 ops/s
# Warmup Iteration  23: 1084054.715 ops/s
# Warmup Iteration  24: 1080189.292 ops/s
# Warmup Iteration  25: 1077180.428 ops/s
# Warmup Iteration  26: 1081737.013 ops/s
# Warmup Iteration  27: 1081060.360 ops/s
# Warmup Iteration  28: 1081183.851 ops/s
# Warmup Iteration  29: 1084101.486 ops/s
# Warmup Iteration  30: 1079386.449 ops/s
Iteration   1: 1084871.316 ops/s
Iteration   2: 1074337.159 ops/s
Iteration   3: 1081211.184 ops/s
Iteration   4: 1064936.339 ops/s
Iteration   5: 1080192.853 ops/s
Iteration   6: 1083143.380 ops/s
Iteration   7: 1077395.723 ops/s
Iteration   8: 1075558.879 ops/s
Iteration   9: 1082640.746 ops/s
Iteration  10: 1069811.373 ops/s
Iteration  11: 1084706.856 ops/s
Iteration  12: 1082694.806 ops/s
Iteration  13: 1083053.542 ops/s
Iteration  14: 1083585.469 ops/s
Iteration  15: 1076705.408 ops/s
Iteration  16: 1081868.032 ops/s
Iteration  17: 1082785.038 ops/s
Iteration  18: 1081016.712 ops/s
Iteration  19: 1080834.399 ops/s
Iteration  20: 1085391.180 ops/s
Iteration  21: 1078863.121 ops/s
Iteration  22: 1075168.503 ops/s
Iteration  23: 1068029.263 ops/s
Iteration  24: 1080348.408 ops/s
Iteration  25: 1085356.712 ops/s
Iteration  26: 1079840.372 ops/s
Iteration  27: 1087492.975 ops/s
Iteration  28: 1077595.013 ops/s
Iteration  29: 1084002.189 ops/s
Iteration  30: 1082273.197 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_removeAllIterable":
  1079857.005 ±(99.9%) 3542.174 ops/s [Average]
  (min, avg, max) = (1064936.339, 1079857.005, 1087492.975), stdev = 5301.759
  CI (99.9%): [1076314.831, 1083399.179] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score      Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_removeAllIterable  thrpt   30  1079857.005 ± 3542.174  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_removeAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_removeAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 690841.199 ops/s
# Warmup Iteration   2: 772943.132 ops/s
# Warmup Iteration   3: 985214.266 ops/s
# Warmup Iteration   4: 977283.125 ops/s
# Warmup Iteration   5: 969316.315 ops/s
# Warmup Iteration   6: 974907.139 ops/s
# Warmup Iteration   7: 978742.578 ops/s
# Warmup Iteration   8: 976136.226 ops/s
# Warmup Iteration   9: 975475.928 ops/s
# Warmup Iteration  10: 947074.106 ops/s
# Warmup Iteration  11: 849599.172 ops/s
# Warmup Iteration  12: 978328.387 ops/s
# Warmup Iteration  13: 977750.311 ops/s
# Warmup Iteration  14: 977850.891 ops/s
# Warmup Iteration  15: 977135.691 ops/s
# Warmup Iteration  16: 973967.182 ops/s
# Warmup Iteration  17: 1039922.423 ops/s
# Warmup Iteration  18: 1038459.894 ops/s
# Warmup Iteration  19: 1041329.516 ops/s
# Warmup Iteration  20: 1038354.905 ops/s
# Warmup Iteration  21: 1038958.543 ops/s
# Warmup Iteration  22: 1037880.834 ops/s
# Warmup Iteration  23: 1040511.487 ops/s
# Warmup Iteration  24: 1040475.748 ops/s
# Warmup Iteration  25: 1036514.558 ops/s
# Warmup Iteration  26: 1038181.405 ops/s
# Warmup Iteration  27: 1037678.218 ops/s
# Warmup Iteration  28: 1040055.171 ops/s
# Warmup Iteration  29: 1040769.114 ops/s
# Warmup Iteration  30: 1038552.231 ops/s
Iteration   1: 1038539.464 ops/s
Iteration   2: 1038486.750 ops/s
Iteration   3: 1037945.287 ops/s
Iteration   4: 1032493.436 ops/s
Iteration   5: 1038546.309 ops/s
Iteration   6: 1037947.187 ops/s
Iteration   7: 1040729.541 ops/s
Iteration   8: 1039044.601 ops/s
Iteration   9: 1038906.797 ops/s
Iteration  10: 1038759.722 ops/s
Iteration  11: 1038418.338 ops/s
Iteration  12: 1038324.878 ops/s
Iteration  13: 1038589.665 ops/s
Iteration  14: 1041189.213 ops/s
Iteration  15: 1039811.120 ops/s
Iteration  16: 1041324.566 ops/s
Iteration  17: 1034769.223 ops/s
Iteration  18: 1038683.715 ops/s
Iteration  19: 1040615.225 ops/s
Iteration  20: 1035606.518 ops/s
Iteration  21: 1039187.911 ops/s
Iteration  22: 1037694.536 ops/s
Iteration  23: 1039955.267 ops/s
Iteration  24: 1040764.584 ops/s
Iteration  25: 1041557.178 ops/s
Iteration  26: 1042451.028 ops/s
Iteration  27: 1040131.588 ops/s
Iteration  28: 1040487.162 ops/s
Iteration  29: 1042142.406 ops/s
Iteration  30: 1037982.560 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_removeAtIndex":
  1039036.193 ±(99.9%) 1418.994 ops/s [Average]
  (min, avg, max) = (1032493.436, 1039036.193, 1042451.028), stdev = 2123.883
  CI (99.9%): [1037617.199, 1040455.186] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_removeAtIndex  thrpt   30  1039036.193 ± 1418.994  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_removeFromIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_removeFromIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 696218.786 ops/s
# Warmup Iteration   2: 772312.085 ops/s
# Warmup Iteration   3: 992048.876 ops/s
# Warmup Iteration   4: 981409.820 ops/s
# Warmup Iteration   5: 977806.501 ops/s
# Warmup Iteration   6: 981828.663 ops/s
# Warmup Iteration   7: 981107.008 ops/s
# Warmup Iteration   8: 981078.610 ops/s
# Warmup Iteration   9: 980280.019 ops/s
# Warmup Iteration  10: 942849.519 ops/s
# Warmup Iteration  11: 862552.490 ops/s
# Warmup Iteration  12: 983629.284 ops/s
# Warmup Iteration  13: 978521.178 ops/s
# Warmup Iteration  14: 979639.683 ops/s
# Warmup Iteration  15: 980464.995 ops/s
# Warmup Iteration  16: 978253.287 ops/s
# Warmup Iteration  17: 1044504.676 ops/s
# Warmup Iteration  18: 1043780.025 ops/s
# Warmup Iteration  19: 1045432.862 ops/s
# Warmup Iteration  20: 1045646.552 ops/s
# Warmup Iteration  21: 1041756.265 ops/s
# Warmup Iteration  22: 1043728.466 ops/s
# Warmup Iteration  23: 1045508.787 ops/s
# Warmup Iteration  24: 1043864.051 ops/s
# Warmup Iteration  25: 1044552.184 ops/s
# Warmup Iteration  26: 1044513.706 ops/s
# Warmup Iteration  27: 1043614.071 ops/s
# Warmup Iteration  28: 1043521.230 ops/s
# Warmup Iteration  29: 1046776.374 ops/s
# Warmup Iteration  30: 1045797.686 ops/s
Iteration   1: 1042591.099 ops/s
Iteration   2: 1044131.871 ops/s
Iteration   3: 1040821.593 ops/s
Iteration   4: 1044527.455 ops/s
Iteration   5: 1046359.043 ops/s
Iteration   6: 1045245.742 ops/s
Iteration   7: 1031544.961 ops/s
Iteration   8: 1044080.021 ops/s
Iteration   9: 1031800.923 ops/s
Iteration  10: 1043410.324 ops/s
Iteration  11: 1035757.757 ops/s
Iteration  12: 1044997.143 ops/s
Iteration  13: 1041708.947 ops/s
Iteration  14: 1047155.211 ops/s
Iteration  15: 1045598.952 ops/s
Iteration  16: 1041531.108 ops/s
Iteration  17: 1046481.128 ops/s
Iteration  18: 1045970.232 ops/s
Iteration  19: 1043114.718 ops/s
Iteration  20: 1035716.707 ops/s
Iteration  21: 1042087.474 ops/s
Iteration  22: 1037262.735 ops/s
Iteration  23: 1039688.804 ops/s
Iteration  24: 1040571.241 ops/s
Iteration  25: 1043273.115 ops/s
Iteration  26: 1044155.207 ops/s
Iteration  27: 1044890.278 ops/s
Iteration  28: 1045124.767 ops/s
Iteration  29: 1040369.633 ops/s
Iteration  30: 1035880.796 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_removeFromIndex":
  1041861.633 ±(99.9%) 2828.973 ops/s [Average]
  (min, avg, max) = (1031544.961, 1041861.633, 1047155.211), stdev = 4234.274
  CI (99.9%): [1039032.660, 1044690.606] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score      Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_removeFromIndex  thrpt   30  1041861.633 ± 2828.973  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_removeIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_removeIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 702560.685 ops/s
# Warmup Iteration   2: 785675.367 ops/s
# Warmup Iteration   3: 1027219.427 ops/s
# Warmup Iteration   4: 1015808.063 ops/s
# Warmup Iteration   5: 1018358.798 ops/s
# Warmup Iteration   6: 1015261.958 ops/s
# Warmup Iteration   7: 1017317.355 ops/s
# Warmup Iteration   8: 1018588.307 ops/s
# Warmup Iteration   9: 1018690.678 ops/s
# Warmup Iteration  10: 869261.671 ops/s
# Warmup Iteration  11: 1004572.228 ops/s
# Warmup Iteration  12: 1019726.258 ops/s
# Warmup Iteration  13: 1019020.399 ops/s
# Warmup Iteration  14: 1017653.797 ops/s
# Warmup Iteration  15: 1018669.762 ops/s
# Warmup Iteration  16: 1014606.924 ops/s
# Warmup Iteration  17: 1084676.617 ops/s
# Warmup Iteration  18: 1084700.098 ops/s
# Warmup Iteration  19: 1085259.244 ops/s
# Warmup Iteration  20: 1085703.616 ops/s
# Warmup Iteration  21: 1082389.089 ops/s
# Warmup Iteration  22: 1085826.549 ops/s
# Warmup Iteration  23: 1086761.870 ops/s
# Warmup Iteration  24: 1085814.636 ops/s
# Warmup Iteration  25: 1084789.158 ops/s
# Warmup Iteration  26: 1083840.526 ops/s
# Warmup Iteration  27: 1082378.683 ops/s
# Warmup Iteration  28: 1087022.363 ops/s
# Warmup Iteration  29: 1082263.447 ops/s
# Warmup Iteration  30: 1084835.784 ops/s
Iteration   1: 1086166.286 ops/s
Iteration   2: 1084953.970 ops/s
Iteration   3: 1085004.170 ops/s
Iteration   4: 1088098.330 ops/s
Iteration   5: 1082257.752 ops/s
Iteration   6: 1081177.529 ops/s
Iteration   7: 1087367.511 ops/s
Iteration   8: 1081767.790 ops/s
Iteration   9: 1081003.149 ops/s
Iteration  10: 1081129.040 ops/s
Iteration  11: 1085740.382 ops/s
Iteration  12: 1085129.672 ops/s
Iteration  13: 1083119.594 ops/s
Iteration  14: 1085642.805 ops/s
Iteration  15: 1089102.823 ops/s
Iteration  16: 1083820.644 ops/s
Iteration  17: 1085823.291 ops/s
Iteration  18: 1080626.567 ops/s
Iteration  19: 1086163.982 ops/s
Iteration  20: 1083958.175 ops/s
Iteration  21: 1084701.621 ops/s
Iteration  22: 1088927.287 ops/s
Iteration  23: 1078351.927 ops/s
Iteration  24: 1083956.243 ops/s
Iteration  25: 1087890.732 ops/s
Iteration  26: 1083601.959 ops/s
Iteration  27: 1058007.320 ops/s
Iteration  28: 1087120.629 ops/s
Iteration  29: 1085831.367 ops/s
Iteration  30: 1084425.626 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_removeIf":
  1083695.606 ±(99.9%) 3678.864 ops/s [Average]
  (min, avg, max) = (1058007.320, 1083695.606, 1089102.823), stdev = 5506.351
  CI (99.9%): [1080016.742, 1087374.470] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_removeIf  thrpt   30  1083695.606 ± 3678.864  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_removeIfWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_removeIfWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 706646.830 ops/s
# Warmup Iteration   2: 796951.881 ops/s
# Warmup Iteration   3: 1017179.808 ops/s
# Warmup Iteration   4: 1009476.368 ops/s
# Warmup Iteration   5: 1012367.030 ops/s
# Warmup Iteration   6: 1014001.659 ops/s
# Warmup Iteration   7: 1011001.341 ops/s
# Warmup Iteration   8: 1011687.389 ops/s
# Warmup Iteration   9: 1011271.680 ops/s
# Warmup Iteration  10: 851089.773 ops/s
# Warmup Iteration  11: 1011560.052 ops/s
# Warmup Iteration  12: 1011850.004 ops/s
# Warmup Iteration  13: 1013348.348 ops/s
# Warmup Iteration  14: 1013090.869 ops/s
# Warmup Iteration  15: 1013392.091 ops/s
# Warmup Iteration  16: 1013715.512 ops/s
# Warmup Iteration  17: 1076210.415 ops/s
# Warmup Iteration  18: 1076196.975 ops/s
# Warmup Iteration  19: 1077926.230 ops/s
# Warmup Iteration  20: 1072797.997 ops/s
# Warmup Iteration  21: 1077318.617 ops/s
# Warmup Iteration  22: 1077918.355 ops/s
# Warmup Iteration  23: 1079804.915 ops/s
# Warmup Iteration  24: 1077637.630 ops/s
# Warmup Iteration  25: 1076512.724 ops/s
# Warmup Iteration  26: 1079248.776 ops/s
# Warmup Iteration  27: 1079259.111 ops/s
# Warmup Iteration  28: 1078024.445 ops/s
# Warmup Iteration  29: 1078340.973 ops/s
# Warmup Iteration  30: 1077954.169 ops/s
Iteration   1: 1076329.376 ops/s
Iteration   2: 1073536.156 ops/s
Iteration   3: 1074363.758 ops/s
Iteration   4: 1078448.209 ops/s
Iteration   5: 1076492.482 ops/s
Iteration   6: 1069295.262 ops/s
Iteration   7: 1059480.653 ops/s
Iteration   8: 1078452.701 ops/s
Iteration   9: 1076131.340 ops/s
Iteration  10: 1077879.525 ops/s
Iteration  11: 1078312.108 ops/s
Iteration  12: 1078758.226 ops/s
Iteration  13: 1073003.611 ops/s
Iteration  14: 1081610.941 ops/s
Iteration  15: 1080941.445 ops/s
Iteration  16: 1077066.232 ops/s
Iteration  17: 1075827.474 ops/s
Iteration  18: 1077708.828 ops/s
Iteration  19: 1071778.996 ops/s
Iteration  20: 1074257.955 ops/s
Iteration  21: 1077838.793 ops/s
Iteration  22: 1073261.887 ops/s
Iteration  23: 1076960.783 ops/s
Iteration  24: 1081067.410 ops/s
Iteration  25: 1075947.903 ops/s
Iteration  26: 1080384.679 ops/s
Iteration  27: 1079053.221 ops/s
Iteration  28: 1075728.741 ops/s
Iteration  29: 1079311.539 ops/s
Iteration  30: 1078830.581 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_removeIfWith":
  1076268.694 ±(99.9%) 2851.314 ops/s [Average]
  (min, avg, max) = (1059480.653, 1076268.694, 1081610.941), stdev = 4267.713
  CI (99.9%): [1073417.379, 1079120.008] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_removeIfWith  thrpt   30  1076268.694 ± 2851.314  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 700603.255 ops/s
# Warmup Iteration   2: 790502.592 ops/s
# Warmup Iteration   3: 1016440.796 ops/s
# Warmup Iteration   4: 1009173.478 ops/s
# Warmup Iteration   5: 1005336.077 ops/s
# Warmup Iteration   6: 1005496.014 ops/s
# Warmup Iteration   7: 1010229.793 ops/s
# Warmup Iteration   8: 1008143.022 ops/s
# Warmup Iteration   9: 1007120.695 ops/s
# Warmup Iteration  10: 886228.123 ops/s
# Warmup Iteration  11: 980239.299 ops/s
# Warmup Iteration  12: 1011845.057 ops/s
# Warmup Iteration  13: 1008025.565 ops/s
# Warmup Iteration  14: 1009894.237 ops/s
# Warmup Iteration  15: 1010015.929 ops/s
# Warmup Iteration  16: 1008041.396 ops/s
# Warmup Iteration  17: 1069892.239 ops/s
# Warmup Iteration  18: 1064212.666 ops/s
# Warmup Iteration  19: 1066742.087 ops/s
# Warmup Iteration  20: 1062797.029 ops/s
# Warmup Iteration  21: 1068367.388 ops/s
# Warmup Iteration  22: 1070434.417 ops/s
# Warmup Iteration  23: 1070298.136 ops/s
# Warmup Iteration  24: 1068143.525 ops/s
# Warmup Iteration  25: 1064599.003 ops/s
# Warmup Iteration  26: 1070036.167 ops/s
# Warmup Iteration  27: 1070273.463 ops/s
# Warmup Iteration  28: 1070699.104 ops/s
# Warmup Iteration  29: 1070353.353 ops/s
# Warmup Iteration  30: 1067352.522 ops/s
Iteration   1: 1072002.079 ops/s
Iteration   2: 1071889.369 ops/s
Iteration   3: 1069821.086 ops/s
Iteration   4: 1058170.716 ops/s
Iteration   5: 1071299.688 ops/s
Iteration   6: 1064575.099 ops/s
Iteration   7: 1063940.856 ops/s
Iteration   8: 1067395.427 ops/s
Iteration   9: 1067081.160 ops/s
Iteration  10: 1064494.332 ops/s
Iteration  11: 1066554.260 ops/s
Iteration  12: 1066758.340 ops/s
Iteration  13: 1069746.468 ops/s
Iteration  14: 1067744.309 ops/s
Iteration  15: 1063732.173 ops/s
Iteration  16: 1070341.969 ops/s
Iteration  17: 1069326.590 ops/s
Iteration  18: 1067225.937 ops/s
Iteration  19: 1064257.537 ops/s
Iteration  20: 1069486.791 ops/s
Iteration  21: 1072027.674 ops/s
Iteration  22: 1067150.873 ops/s
Iteration  23: 1069424.572 ops/s
Iteration  24: 1071019.628 ops/s
Iteration  25: 1069505.500 ops/s
Iteration  26: 1068454.638 ops/s
Iteration  27: 1066855.116 ops/s
Iteration  28: 1068261.500 ops/s
Iteration  29: 1068514.085 ops/s
Iteration  30: 1065651.892 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_retainAll":
  1067756.989 ±(99.9%) 2033.465 ops/s [Average]
  (min, avg, max) = (1058170.716, 1067756.989, 1072027.674), stdev = 3043.595
  CI (99.9%): [1065723.524, 1069790.454] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_retainAll  thrpt   30  1067756.989 ± 2033.465  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_retainAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_retainAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 698608.915 ops/s
# Warmup Iteration   2: 782501.442 ops/s
# Warmup Iteration   3: 995863.271 ops/s
# Warmup Iteration   4: 989565.410 ops/s
# Warmup Iteration   5: 987405.767 ops/s
# Warmup Iteration   6: 988380.359 ops/s
# Warmup Iteration   7: 988398.598 ops/s
# Warmup Iteration   8: 989512.122 ops/s
# Warmup Iteration   9: 990204.145 ops/s
# Warmup Iteration  10: 859074.340 ops/s
# Warmup Iteration  11: 958381.744 ops/s
# Warmup Iteration  12: 986705.444 ops/s
# Warmup Iteration  13: 988079.038 ops/s
# Warmup Iteration  14: 988019.174 ops/s
# Warmup Iteration  15: 989189.034 ops/s
# Warmup Iteration  16: 987061.406 ops/s
# Warmup Iteration  17: 1053615.748 ops/s
# Warmup Iteration  18: 1054466.223 ops/s
# Warmup Iteration  19: 1052655.338 ops/s
# Warmup Iteration  20: 1044216.596 ops/s
# Warmup Iteration  21: 1049843.065 ops/s
# Warmup Iteration  22: 1054270.522 ops/s
# Warmup Iteration  23: 1052231.038 ops/s
# Warmup Iteration  24: 1054787.501 ops/s
# Warmup Iteration  25: 1052427.628 ops/s
# Warmup Iteration  26: 1052409.010 ops/s
# Warmup Iteration  27: 1051505.775 ops/s
# Warmup Iteration  28: 1049436.299 ops/s
# Warmup Iteration  29: 1052415.805 ops/s
# Warmup Iteration  30: 1056209.438 ops/s
Iteration   1: 1050918.162 ops/s
Iteration   2: 1052895.780 ops/s
Iteration   3: 1056109.893 ops/s
Iteration   4: 1052259.439 ops/s
Iteration   5: 1050912.240 ops/s
Iteration   6: 1049461.166 ops/s
Iteration   7: 1056768.993 ops/s
Iteration   8: 1050260.118 ops/s
Iteration   9: 1048139.628 ops/s
Iteration  10: 1053586.762 ops/s
Iteration  11: 1057321.670 ops/s
Iteration  12: 1048457.232 ops/s
Iteration  13: 1058510.607 ops/s
Iteration  14: 1063875.196 ops/s
Iteration  15: 1050000.435 ops/s
Iteration  16: 1063369.875 ops/s
Iteration  17: 1054901.262 ops/s
Iteration  18: 1057886.555 ops/s
Iteration  19: 1056465.958 ops/s
Iteration  20: 1052931.192 ops/s
Iteration  21: 1057654.475 ops/s
Iteration  22: 1050723.325 ops/s
Iteration  23: 1062173.301 ops/s
Iteration  24: 1056095.304 ops/s
Iteration  25: 1055666.750 ops/s
Iteration  26: 1047961.792 ops/s
Iteration  27: 1059358.331 ops/s
Iteration  28: 1053677.247 ops/s
Iteration  29: 1062937.993 ops/s
Iteration  30: 1052612.148 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_retainAllIterable":
  1054796.428 ±(99.9%) 3082.168 ops/s [Average]
  (min, avg, max) = (1047961.792, 1054796.428, 1063875.196), stdev = 4613.245
  CI (99.9%): [1051714.259, 1057878.596] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score      Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_retainAllIterable  thrpt   30  1054796.428 ± 3082.168  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_reverseThis$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_reverseThis

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 692323.400 ops/s
# Warmup Iteration   2: 768484.115 ops/s
# Warmup Iteration   3: 984491.415 ops/s
# Warmup Iteration   4: 975266.116 ops/s
# Warmup Iteration   5: 978690.796 ops/s
# Warmup Iteration   6: 977477.339 ops/s
# Warmup Iteration   7: 979517.193 ops/s
# Warmup Iteration   8: 981827.220 ops/s
# Warmup Iteration   9: 979612.599 ops/s
# Warmup Iteration  10: 923544.770 ops/s
# Warmup Iteration  11: 877745.476 ops/s
# Warmup Iteration  12: 979200.153 ops/s
# Warmup Iteration  13: 980196.322 ops/s
# Warmup Iteration  14: 979622.597 ops/s
# Warmup Iteration  15: 981566.074 ops/s
# Warmup Iteration  16: 979408.665 ops/s
# Warmup Iteration  17: 1039593.122 ops/s
# Warmup Iteration  18: 1036313.979 ops/s
# Warmup Iteration  19: 1038319.744 ops/s
# Warmup Iteration  20: 1039470.389 ops/s
# Warmup Iteration  21: 1038739.294 ops/s
# Warmup Iteration  22: 1036142.873 ops/s
# Warmup Iteration  23: 1036715.606 ops/s
# Warmup Iteration  24: 1037271.208 ops/s
# Warmup Iteration  25: 1035383.751 ops/s
# Warmup Iteration  26: 1038266.335 ops/s
# Warmup Iteration  27: 1037093.061 ops/s
# Warmup Iteration  28: 1038239.749 ops/s
# Warmup Iteration  29: 1038938.306 ops/s
# Warmup Iteration  30: 1032951.292 ops/s
Iteration   1: 1034823.133 ops/s
Iteration   2: 1038866.968 ops/s
Iteration   3: 1037236.064 ops/s
Iteration   4: 1033669.681 ops/s
Iteration   5: 1039427.215 ops/s
Iteration   6: 1037643.785 ops/s
Iteration   7: 1036789.741 ops/s
Iteration   8: 1037006.566 ops/s
Iteration   9: 1035565.888 ops/s
Iteration  10: 1037155.078 ops/s
Iteration  11: 1037622.713 ops/s
Iteration  12: 1030229.086 ops/s
Iteration  13: 1036983.397 ops/s
Iteration  14: 1037486.626 ops/s
Iteration  15: 1038486.958 ops/s
Iteration  16: 1037110.384 ops/s
Iteration  17: 1037627.423 ops/s
Iteration  18: 1038181.284 ops/s
Iteration  19: 1038172.131 ops/s
Iteration  20: 1037687.407 ops/s
Iteration  21: 1036700.508 ops/s
Iteration  22: 1037126.073 ops/s
Iteration  23: 1036329.525 ops/s
Iteration  24: 1037399.350 ops/s
Iteration  25: 1035346.259 ops/s
Iteration  26: 1036794.581 ops/s
Iteration  27: 1037950.713 ops/s
Iteration  28: 1039233.890 ops/s
Iteration  29: 1030584.124 ops/s
Iteration  30: 1037250.267 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_reverseThis":
  1036749.561 ±(99.9%) 1408.353 ops/s [Average]
  (min, avg, max) = (1030229.086, 1036749.561, 1039427.215), stdev = 2107.957
  CI (99.9%): [1035341.207, 1038157.914] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_reverseThis  thrpt   30  1036749.561 ± 1408.353  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4458939.058 ops/s
# Warmup Iteration   2: 9469821.624 ops/s
# Warmup Iteration   3: 8322463.894 ops/s
# Warmup Iteration   4: 9660882.366 ops/s
# Warmup Iteration   5: 9666038.858 ops/s
# Warmup Iteration   6: 9667375.004 ops/s
# Warmup Iteration   7: 9663620.855 ops/s
# Warmup Iteration   8: 9668622.648 ops/s
# Warmup Iteration   9: 9685158.581 ops/s
# Warmup Iteration  10: 9662689.480 ops/s
# Warmup Iteration  11: 9674190.816 ops/s
# Warmup Iteration  12: 9665807.759 ops/s
# Warmup Iteration  13: 9658239.381 ops/s
# Warmup Iteration  14: 9650590.873 ops/s
# Warmup Iteration  15: 9669121.849 ops/s
# Warmup Iteration  16: 9630799.431 ops/s
# Warmup Iteration  17: 9666097.679 ops/s
# Warmup Iteration  18: 9639744.758 ops/s
# Warmup Iteration  19: 9651149.114 ops/s
# Warmup Iteration  20: 9660831.899 ops/s
# Warmup Iteration  21: 9650094.031 ops/s
# Warmup Iteration  22: 9672164.433 ops/s
# Warmup Iteration  23: 9646036.476 ops/s
# Warmup Iteration  24: 9670567.814 ops/s
# Warmup Iteration  25: 9658846.354 ops/s
# Warmup Iteration  26: 9672098.964 ops/s
# Warmup Iteration  27: 9654039.351 ops/s
# Warmup Iteration  28: 9666879.237 ops/s
# Warmup Iteration  29: 9663653.299 ops/s
# Warmup Iteration  30: 9662916.183 ops/s
Iteration   1: 9676422.759 ops/s
Iteration   2: 9613901.890 ops/s
Iteration   3: 9651886.878 ops/s
Iteration   4: 9674012.062 ops/s
Iteration   5: 9666961.073 ops/s
Iteration   6: 9686750.857 ops/s
Iteration   7: 9669115.098 ops/s
Iteration   8: 9621875.003 ops/s
Iteration   9: 9676591.707 ops/s
Iteration  10: 9661683.623 ops/s
Iteration  11: 9646122.448 ops/s
Iteration  12: 9661355.261 ops/s
Iteration  13: 9653038.589 ops/s
Iteration  14: 9660126.797 ops/s
Iteration  15: 9694811.073 ops/s
Iteration  16: 9644087.388 ops/s
Iteration  17: 9637612.668 ops/s
Iteration  18: 9652846.351 ops/s
Iteration  19: 9676664.458 ops/s
Iteration  20: 9670730.603 ops/s
Iteration  21: 9651323.006 ops/s
Iteration  22: 9640153.849 ops/s
Iteration  23: 9621439.812 ops/s
Iteration  24: 9672096.118 ops/s
Iteration  25: 9671469.001 ops/s
Iteration  26: 9651098.854 ops/s
Iteration  27: 9635624.565 ops/s
Iteration  28: 9630456.035 ops/s
Iteration  29: 9633613.153 ops/s
Iteration  30: 9696825.541 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_select":
  9656689.884 ±(99.9%) 14357.674 ops/s [Average]
  (min, avg, max) = (9613901.890, 9656689.884, 9696825.541), stdev = 21489.892
  CI (99.9%): [9642332.210, 9671047.558] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_select  thrpt   30  9656689.884 ± 14357.674  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_selectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_selectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2195999.665 ops/s
# Warmup Iteration   2: 9678359.460 ops/s
# Warmup Iteration   3: 8182853.037 ops/s
# Warmup Iteration   4: 9655051.013 ops/s
# Warmup Iteration   5: 9711474.297 ops/s
# Warmup Iteration   6: 9673249.163 ops/s
# Warmup Iteration   7: 9686599.616 ops/s
# Warmup Iteration   8: 9682833.118 ops/s
# Warmup Iteration   9: 9663947.773 ops/s
# Warmup Iteration  10: 9701400.516 ops/s
# Warmup Iteration  11: 9661249.423 ops/s
# Warmup Iteration  12: 9687702.965 ops/s
# Warmup Iteration  13: 9702086.335 ops/s
# Warmup Iteration  14: 9695955.044 ops/s
# Warmup Iteration  15: 9716460.224 ops/s
# Warmup Iteration  16: 9671216.460 ops/s
# Warmup Iteration  17: 9694797.425 ops/s
# Warmup Iteration  18: 9682562.858 ops/s
# Warmup Iteration  19: 9718408.994 ops/s
# Warmup Iteration  20: 9711708.120 ops/s
# Warmup Iteration  21: 9706957.372 ops/s
# Warmup Iteration  22: 9689611.865 ops/s
# Warmup Iteration  23: 9723293.448 ops/s
# Warmup Iteration  24: 9701113.078 ops/s
# Warmup Iteration  25: 9703572.729 ops/s
# Warmup Iteration  26: 9713574.059 ops/s
# Warmup Iteration  27: 9693320.934 ops/s
# Warmup Iteration  28: 9690571.906 ops/s
# Warmup Iteration  29: 9714809.285 ops/s
# Warmup Iteration  30: 9703796.013 ops/s
Iteration   1: 9699481.965 ops/s
Iteration   2: 9713070.097 ops/s
Iteration   3: 9713767.398 ops/s
Iteration   4: 9693429.258 ops/s
Iteration   5: 9678245.240 ops/s
Iteration   6: 9669861.958 ops/s
Iteration   7: 9684201.416 ops/s
Iteration   8: 9676104.910 ops/s
Iteration   9: 9698052.327 ops/s
Iteration  10: 9708326.111 ops/s
Iteration  11: 9731046.868 ops/s
Iteration  12: 9711727.584 ops/s
Iteration  13: 9704366.955 ops/s
Iteration  14: 9694712.273 ops/s
Iteration  15: 9694547.470 ops/s
Iteration  16: 9700921.786 ops/s
Iteration  17: 9697537.290 ops/s
Iteration  18: 9709059.075 ops/s
Iteration  19: 9742729.971 ops/s
Iteration  20: 9691637.995 ops/s
Iteration  21: 9722362.616 ops/s
Iteration  22: 9716106.277 ops/s
Iteration  23: 9734077.669 ops/s
Iteration  24: 9722102.015 ops/s
Iteration  25: 9678894.928 ops/s
Iteration  26: 9710212.100 ops/s
Iteration  27: 9714320.418 ops/s
Iteration  28: 9702213.353 ops/s
Iteration  29: 9669030.464 ops/s
Iteration  30: 9724021.312 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_selectWith":
  9703538.970 ±(99.9%) 12512.421 ops/s [Average]
  (min, avg, max) = (9669030.464, 9703538.970, 9742729.971), stdev = 18728.005
  CI (99.9%): [9691026.549, 9716051.391] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_selectWith  thrpt   30  9703538.970 ± 12512.421  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_serialization$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_serialization

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 37260.705 ops/s
# Warmup Iteration   2: 46766.465 ops/s
# Warmup Iteration   3: 65742.593 ops/s
# Warmup Iteration   4: 66128.810 ops/s
# Warmup Iteration   5: 66016.995 ops/s
# Warmup Iteration   6: 66286.349 ops/s
# Warmup Iteration   7: 66252.902 ops/s
# Warmup Iteration   8: 66147.877 ops/s
# Warmup Iteration   9: 66085.944 ops/s
# Warmup Iteration  10: 65386.880 ops/s
# Warmup Iteration  11: 56648.650 ops/s
# Warmup Iteration  12: 66319.080 ops/s
# Warmup Iteration  13: 66229.621 ops/s
# Warmup Iteration  14: 66198.199 ops/s
# Warmup Iteration  15: 66194.006 ops/s
# Warmup Iteration  16: 66132.949 ops/s
# Warmup Iteration  17: 66153.483 ops/s
# Warmup Iteration  18: 66063.046 ops/s
# Warmup Iteration  19: 66107.239 ops/s
# Warmup Iteration  20: 66124.653 ops/s
# Warmup Iteration  21: 66136.694 ops/s
# Warmup Iteration  22: 65984.841 ops/s
# Warmup Iteration  23: 66197.242 ops/s
# Warmup Iteration  24: 66214.323 ops/s
# Warmup Iteration  25: 65947.663 ops/s
# Warmup Iteration  26: 66157.828 ops/s
# Warmup Iteration  27: 66026.531 ops/s
# Warmup Iteration  28: 66068.210 ops/s
# Warmup Iteration  29: 66059.848 ops/s
# Warmup Iteration  30: 66010.605 ops/s
Iteration   1: 66161.153 ops/s
Iteration   2: 66095.189 ops/s
Iteration   3: 66219.543 ops/s
Iteration   4: 66151.508 ops/s
Iteration   5: 66259.962 ops/s
Iteration   6: 66026.794 ops/s
Iteration   7: 66204.029 ops/s
Iteration   8: 66172.236 ops/s
Iteration   9: 66241.033 ops/s
Iteration  10: 66075.484 ops/s
Iteration  11: 65917.928 ops/s
Iteration  12: 66094.238 ops/s
Iteration  13: 66131.159 ops/s
Iteration  14: 66189.821 ops/s
Iteration  15: 66041.056 ops/s
Iteration  16: 66174.953 ops/s
Iteration  17: 66198.106 ops/s
Iteration  18: 66085.542 ops/s
Iteration  19: 66153.954 ops/s
Iteration  20: 66010.182 ops/s
Iteration  21: 66168.789 ops/s
Iteration  22: 66097.043 ops/s
Iteration  23: 66207.711 ops/s
Iteration  24: 66251.302 ops/s
Iteration  25: 65993.908 ops/s
Iteration  26: 65796.578 ops/s
Iteration  27: 66174.058 ops/s
Iteration  28: 66241.015 ops/s
Iteration  29: 65988.628 ops/s
Iteration  30: 66120.116 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_serialization":
  66121.434 ±(99.9%) 70.974 ops/s [Average]
  (min, avg, max) = (65796.578, 66121.434, 66259.962), stdev = 106.230
  CI (99.9%): [66050.460, 66192.408] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt      Score    Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_serialization  thrpt   30  66121.434 ± 70.974  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_set$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_set

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 699342.380 ops/s
# Warmup Iteration   2: 769888.072 ops/s
# Warmup Iteration   3: 990257.564 ops/s
# Warmup Iteration   4: 983759.342 ops/s
# Warmup Iteration   5: 983085.379 ops/s
# Warmup Iteration   6: 983784.778 ops/s
# Warmup Iteration   7: 983627.393 ops/s
# Warmup Iteration   8: 984499.359 ops/s
# Warmup Iteration   9: 983097.585 ops/s
# Warmup Iteration  10: 963204.250 ops/s
# Warmup Iteration  11: 845469.351 ops/s
# Warmup Iteration  12: 984266.922 ops/s
# Warmup Iteration  13: 983434.125 ops/s
# Warmup Iteration  14: 981470.701 ops/s
# Warmup Iteration  15: 985998.483 ops/s
# Warmup Iteration  16: 977735.385 ops/s
# Warmup Iteration  17: 1047097.028 ops/s
# Warmup Iteration  18: 1044726.899 ops/s
# Warmup Iteration  19: 1047479.010 ops/s
# Warmup Iteration  20: 1045390.984 ops/s
# Warmup Iteration  21: 1044090.874 ops/s
# Warmup Iteration  22: 1046283.970 ops/s
# Warmup Iteration  23: 1046316.770 ops/s
# Warmup Iteration  24: 1047734.453 ops/s
# Warmup Iteration  25: 1045120.801 ops/s
# Warmup Iteration  26: 1045500.308 ops/s
# Warmup Iteration  27: 1049281.047 ops/s
# Warmup Iteration  28: 1047218.158 ops/s
# Warmup Iteration  29: 1046076.994 ops/s
# Warmup Iteration  30: 1047474.221 ops/s
Iteration   1: 1044262.793 ops/s
Iteration   2: 1047498.179 ops/s
Iteration   3: 1045193.958 ops/s
Iteration   4: 1048125.142 ops/s
Iteration   5: 1050265.704 ops/s
Iteration   6: 1045650.039 ops/s
Iteration   7: 1048608.578 ops/s
Iteration   8: 1050817.786 ops/s
Iteration   9: 1042316.393 ops/s
Iteration  10: 1042354.254 ops/s
Iteration  11: 1046239.724 ops/s
Iteration  12: 1049355.596 ops/s
Iteration  13: 1045025.076 ops/s
Iteration  14: 1050674.877 ops/s
Iteration  15: 1048041.596 ops/s
Iteration  16: 1047511.518 ops/s
Iteration  17: 1048092.141 ops/s
Iteration  18: 1051862.551 ops/s
Iteration  19: 1045453.399 ops/s
Iteration  20: 1046131.287 ops/s
Iteration  21: 1048761.571 ops/s
Iteration  22: 1045802.736 ops/s
Iteration  23: 1049473.056 ops/s
Iteration  24: 1047304.669 ops/s
Iteration  25: 1045398.934 ops/s
Iteration  26: 1047456.410 ops/s
Iteration  27: 1047086.285 ops/s
Iteration  28: 1049872.616 ops/s
Iteration  29: 1044969.452 ops/s
Iteration  30: 1046715.789 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_set":
  1047210.737 ±(99.9%) 1583.709 ops/s [Average]
  (min, avg, max) = (1042316.393, 1047210.737, 1051862.551), stdev = 2370.421
  CI (99.9%): [1045627.028, 1048794.446] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_set  thrpt   30  1047210.737 ± 1583.709  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_setAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_setAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 699853.782 ops/s
# Warmup Iteration   2: 773445.184 ops/s
# Warmup Iteration   3: 983291.554 ops/s
# Warmup Iteration   4: 975014.109 ops/s
# Warmup Iteration   5: 977847.355 ops/s
# Warmup Iteration   6: 978623.794 ops/s
# Warmup Iteration   7: 975575.469 ops/s
# Warmup Iteration   8: 976530.223 ops/s
# Warmup Iteration   9: 973919.012 ops/s
# Warmup Iteration  10: 972568.544 ops/s
# Warmup Iteration  11: 829633.021 ops/s
# Warmup Iteration  12: 975066.635 ops/s
# Warmup Iteration  13: 977666.078 ops/s
# Warmup Iteration  14: 974826.722 ops/s
# Warmup Iteration  15: 973871.606 ops/s
# Warmup Iteration  16: 973026.484 ops/s
# Warmup Iteration  17: 1037943.952 ops/s
# Warmup Iteration  18: 1038601.674 ops/s
# Warmup Iteration  19: 1035589.276 ops/s
# Warmup Iteration  20: 1034822.769 ops/s
# Warmup Iteration  21: 1037277.374 ops/s
# Warmup Iteration  22: 1038363.953 ops/s
# Warmup Iteration  23: 1037223.610 ops/s
# Warmup Iteration  24: 1040912.196 ops/s
# Warmup Iteration  25: 1035487.417 ops/s
# Warmup Iteration  26: 1032727.703 ops/s
# Warmup Iteration  27: 1039894.670 ops/s
# Warmup Iteration  28: 1038906.394 ops/s
# Warmup Iteration  29: 1030227.570 ops/s
# Warmup Iteration  30: 1035923.187 ops/s
Iteration   1: 1036173.231 ops/s
Iteration   2: 1039915.458 ops/s
Iteration   3: 1040389.097 ops/s
Iteration   4: 1038213.035 ops/s
Iteration   5: 1036326.827 ops/s
Iteration   6: 1037921.035 ops/s
Iteration   7: 1038235.625 ops/s
Iteration   8: 1034903.254 ops/s
Iteration   9: 1029133.308 ops/s
Iteration  10: 1035649.088 ops/s
Iteration  11: 1038408.725 ops/s
Iteration  12: 1038365.680 ops/s
Iteration  13: 1037854.772 ops/s
Iteration  14: 1035747.099 ops/s
Iteration  15: 1038837.791 ops/s
Iteration  16: 1039275.179 ops/s
Iteration  17: 1038405.293 ops/s
Iteration  18: 1040021.067 ops/s
Iteration  19: 1036561.177 ops/s
Iteration  20: 1039762.818 ops/s
Iteration  21: 1035171.210 ops/s
Iteration  22: 1036682.714 ops/s
Iteration  23: 1036449.334 ops/s
Iteration  24: 1036329.425 ops/s
Iteration  25: 1041644.456 ops/s
Iteration  26: 1038576.127 ops/s
Iteration  27: 1033992.391 ops/s
Iteration  28: 1039883.365 ops/s
Iteration  29: 1036475.842 ops/s
Iteration  30: 1036213.699 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_setAtIndex":
  1037383.937 ±(99.9%) 1611.849 ops/s [Average]
  (min, avg, max) = (1029133.308, 1037383.937, 1041644.456), stdev = 2412.540
  CI (99.9%): [1035772.089, 1038995.786] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_setAtIndex  thrpt   30  1037383.937 ± 1611.849  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThis$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThis

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 584688.549 ops/s
# Warmup Iteration   2: 719047.894 ops/s
# Warmup Iteration   3: 898416.640 ops/s
# Warmup Iteration   4: 892466.901 ops/s
# Warmup Iteration   5: 892717.868 ops/s
# Warmup Iteration   6: 892057.107 ops/s
# Warmup Iteration   7: 892380.598 ops/s
# Warmup Iteration   8: 858579.967 ops/s
# Warmup Iteration   9: 780918.188 ops/s
# Warmup Iteration  10: 894344.528 ops/s
# Warmup Iteration  11: 895728.345 ops/s
# Warmup Iteration  12: 893193.902 ops/s
# Warmup Iteration  13: 895058.276 ops/s
# Warmup Iteration  14: 895561.027 ops/s
# Warmup Iteration  15: 892565.003 ops/s
# Warmup Iteration  16: 893413.909 ops/s
# Warmup Iteration  17: 939827.177 ops/s
# Warmup Iteration  18: 939157.308 ops/s
# Warmup Iteration  19: 940167.807 ops/s
# Warmup Iteration  20: 937358.499 ops/s
# Warmup Iteration  21: 940799.454 ops/s
# Warmup Iteration  22: 939658.793 ops/s
# Warmup Iteration  23: 937218.324 ops/s
# Warmup Iteration  24: 939778.346 ops/s
# Warmup Iteration  25: 940995.892 ops/s
# Warmup Iteration  26: 939939.148 ops/s
# Warmup Iteration  27: 938456.168 ops/s
# Warmup Iteration  28: 940773.255 ops/s
# Warmup Iteration  29: 939026.196 ops/s
# Warmup Iteration  30: 938660.782 ops/s
Iteration   1: 938981.599 ops/s
Iteration   2: 939620.258 ops/s
Iteration   3: 940168.197 ops/s
Iteration   4: 941064.476 ops/s
Iteration   5: 937848.329 ops/s
Iteration   6: 938010.205 ops/s
Iteration   7: 940910.486 ops/s
Iteration   8: 940868.678 ops/s
Iteration   9: 940459.714 ops/s
Iteration  10: 939302.078 ops/s
Iteration  11: 935018.799 ops/s
Iteration  12: 941219.814 ops/s
Iteration  13: 940854.478 ops/s
Iteration  14: 938518.257 ops/s
Iteration  15: 941625.950 ops/s
Iteration  16: 943107.816 ops/s
Iteration  17: 940374.234 ops/s
Iteration  18: 940205.319 ops/s
Iteration  19: 937662.368 ops/s
Iteration  20: 936089.909 ops/s
Iteration  21: 937487.636 ops/s
Iteration  22: 939357.341 ops/s
Iteration  23: 941651.869 ops/s
Iteration  24: 934682.663 ops/s
Iteration  25: 941575.647 ops/s
Iteration  26: 937033.256 ops/s
Iteration  27: 940451.687 ops/s
Iteration  28: 938324.634 ops/s
Iteration  29: 940520.459 ops/s
Iteration  30: 940167.598 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThis":
  939438.792 ±(99.9%) 1350.837 ops/s [Average]
  (min, avg, max) = (934682.663, 939438.792, 943107.816), stdev = 2021.869
  CI (99.9%): [938087.955, 940789.629] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThis  thrpt   30  939438.792 ± 1350.837  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 693606.591 ops/s
# Warmup Iteration   2: 773052.434 ops/s
# Warmup Iteration   3: 995588.144 ops/s
# Warmup Iteration   4: 987774.131 ops/s
# Warmup Iteration   5: 986748.708 ops/s
# Warmup Iteration   6: 984808.972 ops/s
# Warmup Iteration   7: 990115.452 ops/s
# Warmup Iteration   8: 984778.982 ops/s
# Warmup Iteration   9: 984672.305 ops/s
# Warmup Iteration  10: 913549.168 ops/s
# Warmup Iteration  11: 901547.672 ops/s
# Warmup Iteration  12: 987476.867 ops/s
# Warmup Iteration  13: 988295.679 ops/s
# Warmup Iteration  14: 984860.663 ops/s
# Warmup Iteration  15: 987787.478 ops/s
# Warmup Iteration  16: 986185.630 ops/s
# Warmup Iteration  17: 1048041.270 ops/s
# Warmup Iteration  18: 1046967.920 ops/s
# Warmup Iteration  19: 1046186.963 ops/s
# Warmup Iteration  20: 1048765.679 ops/s
# Warmup Iteration  21: 1048162.652 ops/s
# Warmup Iteration  22: 1046561.054 ops/s
# Warmup Iteration  23: 1045230.338 ops/s
# Warmup Iteration  24: 1046401.681 ops/s
# Warmup Iteration  25: 1047863.127 ops/s
# Warmup Iteration  26: 1044186.864 ops/s
# Warmup Iteration  27: 1048180.326 ops/s
# Warmup Iteration  28: 1044722.712 ops/s
# Warmup Iteration  29: 1047843.296 ops/s
# Warmup Iteration  30: 1045074.310 ops/s
Iteration   1: 1047731.647 ops/s
Iteration   2: 1043140.279 ops/s
Iteration   3: 1045905.199 ops/s
Iteration   4: 1044556.195 ops/s
Iteration   5: 1048020.565 ops/s
Iteration   6: 1050493.414 ops/s
Iteration   7: 1049754.232 ops/s
Iteration   8: 1048859.482 ops/s
Iteration   9: 1045767.817 ops/s
Iteration  10: 1047773.824 ops/s
Iteration  11: 1050066.961 ops/s
Iteration  12: 1041957.486 ops/s
Iteration  13: 1045827.272 ops/s
Iteration  14: 1045168.960 ops/s
Iteration  15: 1044396.805 ops/s
Iteration  16: 1046050.352 ops/s
Iteration  17: 1049183.847 ops/s
Iteration  18: 1044159.759 ops/s
Iteration  19: 1046570.092 ops/s
Iteration  20: 1049834.971 ops/s
Iteration  21: 1049530.316 ops/s
Iteration  22: 1041654.756 ops/s
Iteration  23: 1046629.164 ops/s
Iteration  24: 1046244.026 ops/s
Iteration  25: 1044108.834 ops/s
Iteration  26: 1047267.837 ops/s
Iteration  27: 1049712.162 ops/s
Iteration  28: 1047209.118 ops/s
Iteration  29: 1042266.045 ops/s
Iteration  30: 1048265.511 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisBy":
  1046603.564 ±(99.9%) 1701.631 ops/s [Average]
  (min, avg, max) = (1041654.756, 1046603.564, 1050493.414), stdev = 2546.922
  CI (99.9%): [1044901.933, 1048305.196] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisBy  thrpt   30  1046603.564 ± 1701.631  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 692614.528 ops/s
# Warmup Iteration   2: 783032.211 ops/s
# Warmup Iteration   3: 995465.279 ops/s
# Warmup Iteration   4: 989184.765 ops/s
# Warmup Iteration   5: 989529.389 ops/s
# Warmup Iteration   6: 990890.868 ops/s
# Warmup Iteration   7: 992020.818 ops/s
# Warmup Iteration   8: 989802.418 ops/s
# Warmup Iteration   9: 989643.094 ops/s
# Warmup Iteration  10: 859696.194 ops/s
# Warmup Iteration  11: 963689.420 ops/s
# Warmup Iteration  12: 991666.077 ops/s
# Warmup Iteration  13: 992368.829 ops/s
# Warmup Iteration  14: 989506.111 ops/s
# Warmup Iteration  15: 992388.863 ops/s
# Warmup Iteration  16: 989378.283 ops/s
# Warmup Iteration  17: 1048770.180 ops/s
# Warmup Iteration  18: 1046343.162 ops/s
# Warmup Iteration  19: 1050101.916 ops/s
# Warmup Iteration  20: 1053881.889 ops/s
# Warmup Iteration  21: 1049355.225 ops/s
# Warmup Iteration  22: 1051977.605 ops/s
# Warmup Iteration  23: 1048598.493 ops/s
# Warmup Iteration  24: 1048130.368 ops/s
# Warmup Iteration  25: 1051691.952 ops/s
# Warmup Iteration  26: 1050100.269 ops/s
# Warmup Iteration  27: 1045681.446 ops/s
# Warmup Iteration  28: 1051624.908 ops/s
# Warmup Iteration  29: 1049797.525 ops/s
# Warmup Iteration  30: 1045295.517 ops/s
Iteration   1: 1046313.315 ops/s
Iteration   2: 1050005.764 ops/s
Iteration   3: 1049659.884 ops/s
Iteration   4: 1049485.902 ops/s
Iteration   5: 1051461.532 ops/s
Iteration   6: 1051108.814 ops/s
Iteration   7: 1053118.552 ops/s
Iteration   8: 1052440.712 ops/s
Iteration   9: 1049635.505 ops/s
Iteration  10: 1047701.634 ops/s
Iteration  11: 1050572.662 ops/s
Iteration  12: 1048110.980 ops/s
Iteration  13: 1052769.944 ops/s
Iteration  14: 1045903.549 ops/s
Iteration  15: 1049457.149 ops/s
Iteration  16: 1048524.773 ops/s
Iteration  17: 1048209.546 ops/s
Iteration  18: 1052362.096 ops/s
Iteration  19: 1049693.403 ops/s
Iteration  20: 1044704.938 ops/s
Iteration  21: 1046937.812 ops/s
Iteration  22: 1046353.068 ops/s
Iteration  23: 1051382.022 ops/s
Iteration  24: 1051654.131 ops/s
Iteration  25: 1051105.287 ops/s
Iteration  26: 1049389.050 ops/s
Iteration  27: 1049190.821 ops/s
Iteration  28: 1052536.985 ops/s
Iteration  29: 1051319.538 ops/s
Iteration  30: 1042223.662 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByBoolean":
  1049444.434 ±(99.9%) 1733.079 ops/s [Average]
  (min, avg, max) = (1042223.662, 1049444.434, 1053118.552), stdev = 2593.991
  CI (99.9%): [1047711.355, 1051177.513] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score      Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByBoolean  thrpt   30  1049444.434 ± 1733.079  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 694803.541 ops/s
# Warmup Iteration   2: 779314.032 ops/s
# Warmup Iteration   3: 991152.260 ops/s
# Warmup Iteration   4: 978638.127 ops/s
# Warmup Iteration   5: 981460.947 ops/s
# Warmup Iteration   6: 984206.186 ops/s
# Warmup Iteration   7: 983353.248 ops/s
# Warmup Iteration   8: 984453.367 ops/s
# Warmup Iteration   9: 983818.665 ops/s
# Warmup Iteration  10: 893146.376 ops/s
# Warmup Iteration  11: 915742.290 ops/s
# Warmup Iteration  12: 983811.924 ops/s
# Warmup Iteration  13: 985264.526 ops/s
# Warmup Iteration  14: 984597.580 ops/s
# Warmup Iteration  15: 984851.256 ops/s
# Warmup Iteration  16: 984869.106 ops/s
# Warmup Iteration  17: 1044059.054 ops/s
# Warmup Iteration  18: 1044386.571 ops/s
# Warmup Iteration  19: 1043400.026 ops/s
# Warmup Iteration  20: 1044109.844 ops/s
# Warmup Iteration  21: 1044277.412 ops/s
# Warmup Iteration  22: 1044351.033 ops/s
# Warmup Iteration  23: 1042819.526 ops/s
# Warmup Iteration  24: 1042325.813 ops/s
# Warmup Iteration  25: 1043483.252 ops/s
# Warmup Iteration  26: 1042501.210 ops/s
# Warmup Iteration  27: 1031960.797 ops/s
# Warmup Iteration  28: 1042035.994 ops/s
# Warmup Iteration  29: 1041059.118 ops/s
# Warmup Iteration  30: 1042995.200 ops/s
Iteration   1: 1044242.154 ops/s
Iteration   2: 1044739.226 ops/s
Iteration   3: 1043509.608 ops/s
Iteration   4: 1045427.618 ops/s
Iteration   5: 1041328.685 ops/s
Iteration   6: 1045260.874 ops/s
Iteration   7: 1046954.972 ops/s
Iteration   8: 1041541.919 ops/s
Iteration   9: 1039603.954 ops/s
Iteration  10: 1045196.897 ops/s
Iteration  11: 1043148.414 ops/s
Iteration  12: 1041181.927 ops/s
Iteration  13: 1044226.040 ops/s
Iteration  14: 1039967.923 ops/s
Iteration  15: 1041662.967 ops/s
Iteration  16: 1046292.824 ops/s
Iteration  17: 1046625.496 ops/s
Iteration  18: 1042957.266 ops/s
Iteration  19: 1045901.975 ops/s
Iteration  20: 1044301.193 ops/s
Iteration  21: 1040909.810 ops/s
Iteration  22: 1044152.316 ops/s
Iteration  23: 1044182.429 ops/s
Iteration  24: 1040921.972 ops/s
Iteration  25: 1041734.657 ops/s
Iteration  26: 1040748.792 ops/s
Iteration  27: 1041745.523 ops/s
Iteration  28: 1039295.179 ops/s
Iteration  29: 1040180.837 ops/s
Iteration  30: 1043107.223 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByByte":
  1043035.022 ±(99.9%) 1488.640 ops/s [Average]
  (min, avg, max) = (1039295.179, 1043035.022, 1046954.972), stdev = 2228.127
  CI (99.9%): [1041546.382, 1044523.663] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByByte  thrpt   30  1043035.022 ± 1488.640  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 689275.050 ops/s
# Warmup Iteration   2: 764832.870 ops/s
# Warmup Iteration   3: 986007.647 ops/s
# Warmup Iteration   4: 979613.641 ops/s
# Warmup Iteration   5: 976470.164 ops/s
# Warmup Iteration   6: 979561.231 ops/s
# Warmup Iteration   7: 979562.912 ops/s
# Warmup Iteration   8: 979046.372 ops/s
# Warmup Iteration   9: 978492.205 ops/s
# Warmup Iteration  10: 903840.965 ops/s
# Warmup Iteration  11: 901047.590 ops/s
# Warmup Iteration  12: 978680.145 ops/s
# Warmup Iteration  13: 980916.379 ops/s
# Warmup Iteration  14: 981415.974 ops/s
# Warmup Iteration  15: 977623.981 ops/s
# Warmup Iteration  16: 977701.271 ops/s
# Warmup Iteration  17: 1038922.503 ops/s
# Warmup Iteration  18: 1036910.366 ops/s
# Warmup Iteration  19: 1034011.378 ops/s
# Warmup Iteration  20: 1036382.341 ops/s
# Warmup Iteration  21: 1035686.465 ops/s
# Warmup Iteration  22: 1034050.783 ops/s
# Warmup Iteration  23: 1037873.319 ops/s
# Warmup Iteration  24: 1037296.427 ops/s
# Warmup Iteration  25: 1036704.474 ops/s
# Warmup Iteration  26: 1036290.612 ops/s
# Warmup Iteration  27: 1035565.680 ops/s
# Warmup Iteration  28: 1035013.463 ops/s
# Warmup Iteration  29: 1035129.055 ops/s
# Warmup Iteration  30: 1036133.228 ops/s
Iteration   1: 1031132.187 ops/s
Iteration   2: 1035100.936 ops/s
Iteration   3: 1032601.882 ops/s
Iteration   4: 1032429.711 ops/s
Iteration   5: 1032963.425 ops/s
Iteration   6: 1036361.409 ops/s
Iteration   7: 1035932.787 ops/s
Iteration   8: 1034887.052 ops/s
Iteration   9: 1035912.827 ops/s
Iteration  10: 1036861.111 ops/s
Iteration  11: 1040426.400 ops/s
Iteration  12: 1035977.318 ops/s
Iteration  13: 1038065.672 ops/s
Iteration  14: 1033114.376 ops/s
Iteration  15: 1035848.288 ops/s
Iteration  16: 1037835.117 ops/s
Iteration  17: 1032172.874 ops/s
Iteration  18: 1035636.196 ops/s
Iteration  19: 1039520.875 ops/s
Iteration  20: 1036966.632 ops/s
Iteration  21: 1038696.832 ops/s
Iteration  22: 1041438.823 ops/s
Iteration  23: 1035676.135 ops/s
Iteration  24: 1036533.665 ops/s
Iteration  25: 1037747.129 ops/s
Iteration  26: 1035782.905 ops/s
Iteration  27: 1040397.753 ops/s
Iteration  28: 1037504.161 ops/s
Iteration  29: 1032976.079 ops/s
Iteration  30: 1037988.941 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByChar":
  1036149.650 ±(99.9%) 1746.654 ops/s [Average]
  (min, avg, max) = (1031132.187, 1036149.650, 1041438.823), stdev = 2614.310
  CI (99.9%): [1034402.996, 1037896.304] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByChar  thrpt   30  1036149.650 ± 1746.654  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 689476.773 ops/s
# Warmup Iteration   2: 778980.583 ops/s
# Warmup Iteration   3: 991484.150 ops/s
# Warmup Iteration   4: 982310.284 ops/s
# Warmup Iteration   5: 984443.638 ops/s
# Warmup Iteration   6: 983354.941 ops/s
# Warmup Iteration   7: 988595.528 ops/s
# Warmup Iteration   8: 983955.614 ops/s
# Warmup Iteration   9: 981840.799 ops/s
# Warmup Iteration  10: 867366.784 ops/s
# Warmup Iteration  11: 945919.879 ops/s
# Warmup Iteration  12: 984931.490 ops/s
# Warmup Iteration  13: 983625.491 ops/s
# Warmup Iteration  14: 982785.072 ops/s
# Warmup Iteration  15: 986534.618 ops/s
# Warmup Iteration  16: 984954.915 ops/s
# Warmup Iteration  17: 1047743.908 ops/s
# Warmup Iteration  18: 1046571.042 ops/s
# Warmup Iteration  19: 1046675.800 ops/s
# Warmup Iteration  20: 1051134.502 ops/s
# Warmup Iteration  21: 1047350.201 ops/s
# Warmup Iteration  22: 1044038.915 ops/s
# Warmup Iteration  23: 1048294.805 ops/s
# Warmup Iteration  24: 1047372.009 ops/s
# Warmup Iteration  25: 1046843.228 ops/s
# Warmup Iteration  26: 1049814.824 ops/s
# Warmup Iteration  27: 1043332.709 ops/s
# Warmup Iteration  28: 1045328.558 ops/s
# Warmup Iteration  29: 1045920.610 ops/s
# Warmup Iteration  30: 1049015.196 ops/s
Iteration   1: 1041764.228 ops/s
Iteration   2: 1043412.218 ops/s
Iteration   3: 1047673.476 ops/s
Iteration   4: 1040769.346 ops/s
Iteration   5: 1047739.466 ops/s
Iteration   6: 1050530.621 ops/s
Iteration   7: 1047301.857 ops/s
Iteration   8: 1051290.226 ops/s
Iteration   9: 1051664.792 ops/s
Iteration  10: 1048625.371 ops/s
Iteration  11: 1046350.917 ops/s
Iteration  12: 1047631.646 ops/s
Iteration  13: 1046457.722 ops/s
Iteration  14: 1047310.351 ops/s
Iteration  15: 1050665.571 ops/s
Iteration  16: 1049762.899 ops/s
Iteration  17: 1046287.926 ops/s
Iteration  18: 1044266.222 ops/s
Iteration  19: 1046707.277 ops/s
Iteration  20: 1045093.786 ops/s
Iteration  21: 1047307.332 ops/s
Iteration  22: 1045652.948 ops/s
Iteration  23: 1049022.204 ops/s
Iteration  24: 1045726.153 ops/s
Iteration  25: 1044561.345 ops/s
Iteration  26: 1046321.283 ops/s
Iteration  27: 1046532.261 ops/s
Iteration  28: 1048043.214 ops/s
Iteration  29: 1046070.922 ops/s
Iteration  30: 1047402.989 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByDouble":
  1046931.552 ±(99.9%) 1690.539 ops/s [Average]
  (min, avg, max) = (1040769.346, 1046931.552, 1051664.792), stdev = 2530.319
  CI (99.9%): [1045241.014, 1048622.091] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score      Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByDouble  thrpt   30  1046931.552 ± 1690.539  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 698383.235 ops/s
# Warmup Iteration   2: 783341.442 ops/s
# Warmup Iteration   3: 994868.703 ops/s
# Warmup Iteration   4: 989002.504 ops/s
# Warmup Iteration   5: 985301.335 ops/s
# Warmup Iteration   6: 986790.455 ops/s
# Warmup Iteration   7: 985893.886 ops/s
# Warmup Iteration   8: 989611.425 ops/s
# Warmup Iteration   9: 986081.290 ops/s
# Warmup Iteration  10: 886569.342 ops/s
# Warmup Iteration  11: 932997.525 ops/s
# Warmup Iteration  12: 986839.738 ops/s
# Warmup Iteration  13: 989134.593 ops/s
# Warmup Iteration  14: 985558.828 ops/s
# Warmup Iteration  15: 985608.921 ops/s
# Warmup Iteration  16: 986531.374 ops/s
# Warmup Iteration  17: 1045106.580 ops/s
# Warmup Iteration  18: 1044147.741 ops/s
# Warmup Iteration  19: 1043668.615 ops/s
# Warmup Iteration  20: 1042354.136 ops/s
# Warmup Iteration  21: 1042215.255 ops/s
# Warmup Iteration  22: 1044518.775 ops/s
# Warmup Iteration  23: 1044592.169 ops/s
# Warmup Iteration  24: 1042490.438 ops/s
# Warmup Iteration  25: 1047636.806 ops/s
# Warmup Iteration  26: 1042930.065 ops/s
# Warmup Iteration  27: 1042207.463 ops/s
# Warmup Iteration  28: 1043104.633 ops/s
# Warmup Iteration  29: 1042717.245 ops/s
# Warmup Iteration  30: 1044561.626 ops/s
Iteration   1: 1040421.216 ops/s
Iteration   2: 1044778.186 ops/s
Iteration   3: 1047455.511 ops/s
Iteration   4: 1044370.279 ops/s
Iteration   5: 1043537.530 ops/s
Iteration   6: 1043336.288 ops/s
Iteration   7: 1045829.998 ops/s
Iteration   8: 1045053.854 ops/s
Iteration   9: 1045560.767 ops/s
Iteration  10: 1042958.145 ops/s
Iteration  11: 1042743.333 ops/s
Iteration  12: 1048394.814 ops/s
Iteration  13: 1043832.666 ops/s
Iteration  14: 1040499.498 ops/s
Iteration  15: 1046488.131 ops/s
Iteration  16: 1041645.482 ops/s
Iteration  17: 1042036.368 ops/s
Iteration  18: 1044175.909 ops/s
Iteration  19: 1041860.611 ops/s
Iteration  20: 1043330.344 ops/s
Iteration  21: 1041347.286 ops/s
Iteration  22: 1040107.347 ops/s
Iteration  23: 1045156.550 ops/s
Iteration  24: 1043801.149 ops/s
Iteration  25: 1045546.442 ops/s
Iteration  26: 1044628.290 ops/s
Iteration  27: 1044073.520 ops/s
Iteration  28: 1041563.821 ops/s
Iteration  29: 1041540.562 ops/s
Iteration  30: 1040964.408 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByFloat":
  1043567.943 ±(99.9%) 1414.047 ops/s [Average]
  (min, avg, max) = (1040107.347, 1043567.943, 1048394.814), stdev = 2116.479
  CI (99.9%): [1042153.897, 1044981.990] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score      Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByFloat  thrpt   30  1043567.943 ± 1414.047  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 691560.951 ops/s
# Warmup Iteration   2: 776227.346 ops/s
# Warmup Iteration   3: 988731.892 ops/s
# Warmup Iteration   4: 985510.549 ops/s
# Warmup Iteration   5: 985134.063 ops/s
# Warmup Iteration   6: 984359.637 ops/s
# Warmup Iteration   7: 985606.782 ops/s
# Warmup Iteration   8: 980677.926 ops/s
# Warmup Iteration   9: 982330.692 ops/s
# Warmup Iteration  10: 892279.756 ops/s
# Warmup Iteration  11: 913669.340 ops/s
# Warmup Iteration  12: 982195.377 ops/s
# Warmup Iteration  13: 979883.449 ops/s
# Warmup Iteration  14: 981701.815 ops/s
# Warmup Iteration  15: 983246.638 ops/s
# Warmup Iteration  16: 979751.250 ops/s
# Warmup Iteration  17: 1044351.454 ops/s
# Warmup Iteration  18: 1042360.644 ops/s
# Warmup Iteration  19: 1046408.752 ops/s
# Warmup Iteration  20: 1044224.839 ops/s
# Warmup Iteration  21: 1045456.739 ops/s
# Warmup Iteration  22: 1044555.071 ops/s
# Warmup Iteration  23: 1042004.727 ops/s
# Warmup Iteration  24: 1045145.328 ops/s
# Warmup Iteration  25: 1047156.003 ops/s
# Warmup Iteration  26: 1043975.209 ops/s
# Warmup Iteration  27: 1044002.570 ops/s
# Warmup Iteration  28: 1040845.534 ops/s
# Warmup Iteration  29: 1040053.662 ops/s
# Warmup Iteration  30: 1041878.240 ops/s
Iteration   1: 1040373.247 ops/s
Iteration   2: 1045141.842 ops/s
Iteration   3: 1045919.361 ops/s
Iteration   4: 1035625.314 ops/s
Iteration   5: 1043180.241 ops/s
Iteration   6: 1043251.692 ops/s
Iteration   7: 1040197.047 ops/s
Iteration   8: 1041487.402 ops/s
Iteration   9: 1046705.632 ops/s
Iteration  10: 1046656.945 ops/s
Iteration  11: 1039972.345 ops/s
Iteration  12: 1041282.836 ops/s
Iteration  13: 1044161.262 ops/s
Iteration  14: 1044492.352 ops/s
Iteration  15: 1043784.857 ops/s
Iteration  16: 1039928.472 ops/s
Iteration  17: 1045957.805 ops/s
Iteration  18: 1043118.955 ops/s
Iteration  19: 1038304.111 ops/s
Iteration  20: 1044211.157 ops/s
Iteration  21: 1040899.571 ops/s
Iteration  22: 1041111.413 ops/s
Iteration  23: 1040317.069 ops/s
Iteration  24: 1044279.301 ops/s
Iteration  25: 1045609.481 ops/s
Iteration  26: 1041890.497 ops/s
Iteration  27: 1043807.974 ops/s
Iteration  28: 1041905.219 ops/s
Iteration  29: 1044774.104 ops/s
Iteration  30: 1047434.799 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByInt":
  1042859.410 ±(99.9%) 1834.703 ops/s [Average]
  (min, avg, max) = (1035625.314, 1042859.410, 1047434.799), stdev = 2746.098
  CI (99.9%): [1041024.707, 1044694.114] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByInt  thrpt   30  1042859.410 ± 1834.703  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 692967.516 ops/s
# Warmup Iteration   2: 779126.596 ops/s
# Warmup Iteration   3: 985596.032 ops/s
# Warmup Iteration   4: 979762.978 ops/s
# Warmup Iteration   5: 979718.651 ops/s
# Warmup Iteration   6: 983167.390 ops/s
# Warmup Iteration   7: 981273.983 ops/s
# Warmup Iteration   8: 978530.160 ops/s
# Warmup Iteration   9: 978907.446 ops/s
# Warmup Iteration  10: 897612.299 ops/s
# Warmup Iteration  11: 909006.168 ops/s
# Warmup Iteration  12: 979338.646 ops/s
# Warmup Iteration  13: 978697.159 ops/s
# Warmup Iteration  14: 980067.983 ops/s
# Warmup Iteration  15: 980476.181 ops/s
# Warmup Iteration  16: 979219.715 ops/s
# Warmup Iteration  17: 1031704.350 ops/s
# Warmup Iteration  18: 1031894.841 ops/s
# Warmup Iteration  19: 1031585.824 ops/s
# Warmup Iteration  20: 1032460.158 ops/s
# Warmup Iteration  21: 1030981.619 ops/s
# Warmup Iteration  22: 1034132.390 ops/s
# Warmup Iteration  23: 1033026.873 ops/s
# Warmup Iteration  24: 1030990.221 ops/s
# Warmup Iteration  25: 1033026.251 ops/s
# Warmup Iteration  26: 1030880.262 ops/s
# Warmup Iteration  27: 1030372.685 ops/s
# Warmup Iteration  28: 1029441.966 ops/s
# Warmup Iteration  29: 1033692.924 ops/s
# Warmup Iteration  30: 1032717.649 ops/s
Iteration   1: 1033769.778 ops/s
Iteration   2: 1033258.464 ops/s
Iteration   3: 1033769.384 ops/s
Iteration   4: 1035801.282 ops/s
Iteration   5: 1027755.966 ops/s
Iteration   6: 1034777.907 ops/s
Iteration   7: 1033901.375 ops/s
Iteration   8: 1034284.865 ops/s
Iteration   9: 1032709.580 ops/s
Iteration  10: 1032397.666 ops/s
Iteration  11: 1033739.065 ops/s
Iteration  12: 1032109.992 ops/s
Iteration  13: 1035758.907 ops/s
Iteration  14: 1035120.117 ops/s
Iteration  15: 1029332.132 ops/s
Iteration  16: 1035163.619 ops/s
Iteration  17: 1036551.674 ops/s
Iteration  18: 1031096.221 ops/s
Iteration  19: 1036665.332 ops/s
Iteration  20: 1032798.729 ops/s
Iteration  21: 1036950.254 ops/s
Iteration  22: 1029605.219 ops/s
Iteration  23: 1029935.518 ops/s
Iteration  24: 1032027.952 ops/s
Iteration  25: 1031574.005 ops/s
Iteration  26: 1030529.846 ops/s
Iteration  27: 1035529.163 ops/s
Iteration  28: 1036391.822 ops/s
Iteration  29: 1029659.752 ops/s
Iteration  30: 1035671.330 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByLong":
  1033287.897 ±(99.9%) 1679.569 ops/s [Average]
  (min, avg, max) = (1027755.966, 1033287.897, 1036950.254), stdev = 2513.899
  CI (99.9%): [1031608.329, 1034967.466] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByLong  thrpt   30  1033287.897 ± 1679.569  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 691917.063 ops/s
# Warmup Iteration   2: 773511.434 ops/s
# Warmup Iteration   3: 987111.731 ops/s
# Warmup Iteration   4: 977139.099 ops/s
# Warmup Iteration   5: 978370.581 ops/s
# Warmup Iteration   6: 975113.533 ops/s
# Warmup Iteration   7: 976068.856 ops/s
# Warmup Iteration   8: 974970.753 ops/s
# Warmup Iteration   9: 976922.845 ops/s
# Warmup Iteration  10: 903609.304 ops/s
# Warmup Iteration  11: 898311.238 ops/s
# Warmup Iteration  12: 972664.949 ops/s
# Warmup Iteration  13: 973365.566 ops/s
# Warmup Iteration  14: 974916.836 ops/s
# Warmup Iteration  15: 976993.351 ops/s
# Warmup Iteration  16: 976048.796 ops/s
# Warmup Iteration  17: 1037572.848 ops/s
# Warmup Iteration  18: 1039509.839 ops/s
# Warmup Iteration  19: 1039365.766 ops/s
# Warmup Iteration  20: 1040550.035 ops/s
# Warmup Iteration  21: 1043188.341 ops/s
# Warmup Iteration  22: 1042114.470 ops/s
# Warmup Iteration  23: 1037225.735 ops/s
# Warmup Iteration  24: 1037620.176 ops/s
# Warmup Iteration  25: 1041722.575 ops/s
# Warmup Iteration  26: 1039679.772 ops/s
# Warmup Iteration  27: 1041248.980 ops/s
# Warmup Iteration  28: 1041137.514 ops/s
# Warmup Iteration  29: 1040800.363 ops/s
# Warmup Iteration  30: 1042201.240 ops/s
Iteration   1: 1042559.141 ops/s
Iteration   2: 1037089.332 ops/s
Iteration   3: 1040397.555 ops/s
Iteration   4: 1038218.956 ops/s
Iteration   5: 1039961.723 ops/s
Iteration   6: 1043043.825 ops/s
Iteration   7: 1043241.077 ops/s
Iteration   8: 1035762.854 ops/s
Iteration   9: 1040467.164 ops/s
Iteration  10: 1042956.450 ops/s
Iteration  11: 1043206.137 ops/s
Iteration  12: 1037685.833 ops/s
Iteration  13: 1038622.775 ops/s
Iteration  14: 1041770.842 ops/s
Iteration  15: 1040648.349 ops/s
Iteration  16: 1042611.134 ops/s
Iteration  17: 1039411.496 ops/s
Iteration  18: 1035575.088 ops/s
Iteration  19: 1044563.061 ops/s
Iteration  20: 1042659.453 ops/s
Iteration  21: 1038668.736 ops/s
Iteration  22: 1039971.226 ops/s
Iteration  23: 1037272.376 ops/s
Iteration  24: 1041202.266 ops/s
Iteration  25: 1039782.082 ops/s
Iteration  26: 1044805.275 ops/s
Iteration  27: 1039270.916 ops/s
Iteration  28: 1038724.490 ops/s
Iteration  29: 1044034.924 ops/s
Iteration  30: 1040782.696 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByShort":
  1040498.908 ±(99.9%) 1692.671 ops/s [Average]
  (min, avg, max) = (1035575.088, 1040498.908, 1044805.275), stdev = 2533.511
  CI (99.9%): [1038806.236, 1042191.579] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score      Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByShort  thrpt   30  1040498.908 ± 1692.671  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisWithComparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisWithComparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 586179.792 ops/s
# Warmup Iteration   2: 718510.428 ops/s
# Warmup Iteration   3: 891286.732 ops/s
# Warmup Iteration   4: 887206.944 ops/s
# Warmup Iteration   5: 886916.144 ops/s
# Warmup Iteration   6: 881472.056 ops/s
# Warmup Iteration   7: 886181.927 ops/s
# Warmup Iteration   8: 865405.826 ops/s
# Warmup Iteration   9: 761604.562 ops/s
# Warmup Iteration  10: 885999.487 ops/s
# Warmup Iteration  11: 883500.969 ops/s
# Warmup Iteration  12: 886290.381 ops/s
# Warmup Iteration  13: 884092.207 ops/s
# Warmup Iteration  14: 876921.059 ops/s
# Warmup Iteration  15: 885075.450 ops/s
# Warmup Iteration  16: 885661.794 ops/s
# Warmup Iteration  17: 924640.327 ops/s
# Warmup Iteration  18: 928356.644 ops/s
# Warmup Iteration  19: 926638.286 ops/s
# Warmup Iteration  20: 922393.445 ops/s
# Warmup Iteration  21: 924563.050 ops/s
# Warmup Iteration  22: 923348.910 ops/s
# Warmup Iteration  23: 928174.907 ops/s
# Warmup Iteration  24: 926957.978 ops/s
# Warmup Iteration  25: 925092.623 ops/s
# Warmup Iteration  26: 926221.705 ops/s
# Warmup Iteration  27: 926186.121 ops/s
# Warmup Iteration  28: 928169.666 ops/s
# Warmup Iteration  29: 927439.778 ops/s
# Warmup Iteration  30: 928081.076 ops/s
Iteration   1: 930208.612 ops/s
Iteration   2: 928292.789 ops/s
Iteration   3: 926117.623 ops/s
Iteration   4: 923430.329 ops/s
Iteration   5: 920250.474 ops/s
Iteration   6: 928744.576 ops/s
Iteration   7: 923289.702 ops/s
Iteration   8: 929792.755 ops/s
Iteration   9: 927301.951 ops/s
Iteration  10: 928006.206 ops/s
Iteration  11: 930722.273 ops/s
Iteration  12: 925075.714 ops/s
Iteration  13: 926315.582 ops/s
Iteration  14: 926990.004 ops/s
Iteration  15: 928037.875 ops/s
Iteration  16: 929355.603 ops/s
Iteration  17: 924434.654 ops/s
Iteration  18: 924044.470 ops/s
Iteration  19: 928306.030 ops/s
Iteration  20: 927227.593 ops/s
Iteration  21: 927753.621 ops/s
Iteration  22: 927604.189 ops/s
Iteration  23: 925898.191 ops/s
Iteration  24: 929083.104 ops/s
Iteration  25: 924765.715 ops/s
Iteration  26: 924373.119 ops/s
Iteration  27: 929208.721 ops/s
Iteration  28: 926953.660 ops/s
Iteration  29: 926876.940 ops/s
Iteration  30: 927929.286 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisWithComparator":
  926879.712 ±(99.9%) 1580.007 ops/s [Average]
  (min, avg, max) = (920250.474, 926879.712, 930722.273), stdev = 2364.881
  CI (99.9%): [925299.705, 928459.719] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score      Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisWithComparator  thrpt   30  926879.712 ± 1580.007  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_subList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_subList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 96264.024 ops/s
# Warmup Iteration   2: 104078.849 ops/s
# Warmup Iteration   3: 133750.382 ops/s
# Warmup Iteration   4: 135549.858 ops/s
# Warmup Iteration   5: 135305.149 ops/s
# Warmup Iteration   6: 135630.584 ops/s
# Warmup Iteration   7: 135849.307 ops/s
# Warmup Iteration   8: 135694.995 ops/s
# Warmup Iteration   9: 136147.283 ops/s
# Warmup Iteration  10: 135796.811 ops/s
# Warmup Iteration  11: 135153.427 ops/s
# Warmup Iteration  12: 115453.676 ops/s
# Warmup Iteration  13: 135777.973 ops/s
# Warmup Iteration  14: 135594.627 ops/s
# Warmup Iteration  15: 136348.680 ops/s
# Warmup Iteration  16: 135392.878 ops/s
# Warmup Iteration  17: 142635.861 ops/s
# Warmup Iteration  18: 142792.800 ops/s
# Warmup Iteration  19: 142954.550 ops/s
# Warmup Iteration  20: 142508.734 ops/s
# Warmup Iteration  21: 142365.700 ops/s
# Warmup Iteration  22: 142535.095 ops/s
# Warmup Iteration  23: 142901.019 ops/s
# Warmup Iteration  24: 142558.210 ops/s
# Warmup Iteration  25: 142448.168 ops/s
# Warmup Iteration  26: 142739.302 ops/s
# Warmup Iteration  27: 142826.668 ops/s
# Warmup Iteration  28: 142521.853 ops/s
# Warmup Iteration  29: 142879.959 ops/s
# Warmup Iteration  30: 143064.428 ops/s
Iteration   1: 142944.023 ops/s
Iteration   2: 142692.576 ops/s
Iteration   3: 142849.110 ops/s
Iteration   4: 142731.345 ops/s
Iteration   5: 142785.282 ops/s
Iteration   6: 142944.715 ops/s
Iteration   7: 143019.192 ops/s
Iteration   8: 142904.297 ops/s
Iteration   9: 142764.575 ops/s
Iteration  10: 142667.705 ops/s
Iteration  11: 143051.879 ops/s
Iteration  12: 142922.218 ops/s
Iteration  13: 142982.181 ops/s
Iteration  14: 143218.345 ops/s
Iteration  15: 142967.078 ops/s
Iteration  16: 140947.284 ops/s
Iteration  17: 142894.364 ops/s
Iteration  18: 143291.525 ops/s
Iteration  19: 142623.565 ops/s
Iteration  20: 143083.124 ops/s
Iteration  21: 143122.221 ops/s
Iteration  22: 143462.745 ops/s
Iteration  23: 142864.966 ops/s
Iteration  24: 142811.852 ops/s
Iteration  25: 142815.874 ops/s
Iteration  26: 143104.815 ops/s
Iteration  27: 143396.982 ops/s
Iteration  28: 142351.694 ops/s
Iteration  29: 143028.795 ops/s
Iteration  30: 143388.449 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_subList":
  142887.759 ±(99.9%) 293.923 ops/s [Average]
  (min, avg, max) = (140947.284, 142887.759, 143462.745), stdev = 439.930
  CI (99.9%): [142593.836, 143181.682] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score     Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_subList  thrpt   30  142887.759 ± 293.923  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_subListListIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_subListListIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 226543.618 ops/s
# Warmup Iteration   2: 241475.930 ops/s
# Warmup Iteration   3: 305424.406 ops/s
# Warmup Iteration   4: 306655.848 ops/s
# Warmup Iteration   5: 307654.343 ops/s
# Warmup Iteration   6: 305966.062 ops/s
# Warmup Iteration   7: 306640.730 ops/s
# Warmup Iteration   8: 307208.215 ops/s
# Warmup Iteration   9: 306934.869 ops/s
# Warmup Iteration  10: 307501.518 ops/s
# Warmup Iteration  11: 309072.002 ops/s
# Warmup Iteration  12: 265362.870 ops/s
# Warmup Iteration  13: 307022.616 ops/s
# Warmup Iteration  14: 307944.190 ops/s
# Warmup Iteration  15: 307859.145 ops/s
# Warmup Iteration  16: 307071.402 ops/s
# Warmup Iteration  17: 323788.901 ops/s
# Warmup Iteration  18: 323949.163 ops/s
# Warmup Iteration  19: 323410.960 ops/s
# Warmup Iteration  20: 325118.752 ops/s
# Warmup Iteration  21: 324539.233 ops/s
# Warmup Iteration  22: 323100.822 ops/s
# Warmup Iteration  23: 322662.001 ops/s
# Warmup Iteration  24: 323661.551 ops/s
# Warmup Iteration  25: 324347.041 ops/s
# Warmup Iteration  26: 323740.964 ops/s
# Warmup Iteration  27: 324235.892 ops/s
# Warmup Iteration  28: 324216.513 ops/s
# Warmup Iteration  29: 323951.456 ops/s
# Warmup Iteration  30: 323955.721 ops/s
Iteration   1: 324311.879 ops/s
Iteration   2: 324530.159 ops/s
Iteration   3: 324189.190 ops/s
Iteration   4: 323861.728 ops/s
Iteration   5: 323201.479 ops/s
Iteration   6: 322819.281 ops/s
Iteration   7: 325135.180 ops/s
Iteration   8: 323976.525 ops/s
Iteration   9: 325079.347 ops/s
Iteration  10: 323330.905 ops/s
Iteration  11: 324207.953 ops/s
Iteration  12: 323244.248 ops/s
Iteration  13: 324541.566 ops/s
Iteration  14: 324616.029 ops/s
Iteration  15: 324016.093 ops/s
Iteration  16: 322749.674 ops/s
Iteration  17: 324375.642 ops/s
Iteration  18: 322835.049 ops/s
Iteration  19: 325797.969 ops/s
Iteration  20: 323427.763 ops/s
Iteration  21: 323717.148 ops/s
Iteration  22: 323635.674 ops/s
Iteration  23: 323750.461 ops/s
Iteration  24: 322800.350 ops/s
Iteration  25: 322911.708 ops/s
Iteration  26: 324650.354 ops/s
Iteration  27: 324569.472 ops/s
Iteration  28: 324018.103 ops/s
Iteration  29: 323124.002 ops/s
Iteration  30: 325197.203 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_subListListIterator":
  323954.071 ±(99.9%) 541.635 ops/s [Average]
  (min, avg, max) = (322749.674, 323954.071, 325797.969), stdev = 810.693
  CI (99.9%): [323412.436, 324495.706] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score     Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_subListListIterator  thrpt   30  323954.071 ± 541.635  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_tap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_tap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9294677.661 ops/s
# Warmup Iteration   2: 18410598.019 ops/s
# Warmup Iteration   3: 17608390.426 ops/s
# Warmup Iteration   4: 19570051.250 ops/s
# Warmup Iteration   5: 19547282.574 ops/s
# Warmup Iteration   6: 19551425.802 ops/s
# Warmup Iteration   7: 19494874.465 ops/s
# Warmup Iteration   8: 19489707.477 ops/s
# Warmup Iteration   9: 19523994.176 ops/s
# Warmup Iteration  10: 19548408.131 ops/s
# Warmup Iteration  11: 19574334.847 ops/s
# Warmup Iteration  12: 19585056.128 ops/s
# Warmup Iteration  13: 19539906.595 ops/s
# Warmup Iteration  14: 19592763.780 ops/s
# Warmup Iteration  15: 19564027.985 ops/s
# Warmup Iteration  16: 19571013.588 ops/s
# Warmup Iteration  17: 19544367.326 ops/s
# Warmup Iteration  18: 19583143.088 ops/s
# Warmup Iteration  19: 19571015.733 ops/s
# Warmup Iteration  20: 19640649.272 ops/s
# Warmup Iteration  21: 19633691.542 ops/s
# Warmup Iteration  22: 19591497.804 ops/s
# Warmup Iteration  23: 19551007.885 ops/s
# Warmup Iteration  24: 19548961.108 ops/s
# Warmup Iteration  25: 19599617.689 ops/s
# Warmup Iteration  26: 19562581.766 ops/s
# Warmup Iteration  27: 19538255.712 ops/s
# Warmup Iteration  28: 19610989.726 ops/s
# Warmup Iteration  29: 19514901.256 ops/s
# Warmup Iteration  30: 19583633.113 ops/s
Iteration   1: 19513951.911 ops/s
Iteration   2: 19602553.222 ops/s
Iteration   3: 19597784.924 ops/s
Iteration   4: 19579097.680 ops/s
Iteration   5: 19608483.080 ops/s
Iteration   6: 19678051.597 ops/s
Iteration   7: 19577246.995 ops/s
Iteration   8: 19615164.706 ops/s
Iteration   9: 19566176.162 ops/s
Iteration  10: 19593954.416 ops/s
Iteration  11: 19546818.551 ops/s
Iteration  12: 19587657.271 ops/s
Iteration  13: 19573145.369 ops/s
Iteration  14: 19550126.475 ops/s
Iteration  15: 19491768.031 ops/s
Iteration  16: 19526121.459 ops/s
Iteration  17: 19521088.249 ops/s
Iteration  18: 19567033.949 ops/s
Iteration  19: 19593801.889 ops/s
Iteration  20: 19563901.460 ops/s
Iteration  21: 19567248.743 ops/s
Iteration  22: 19605215.780 ops/s
Iteration  23: 19606256.223 ops/s
Iteration  24: 19567196.851 ops/s
Iteration  25: 19602782.511 ops/s
Iteration  26: 19634022.194 ops/s
Iteration  27: 19575744.608 ops/s
Iteration  28: 19620434.664 ops/s
Iteration  29: 19588444.444 ops/s
Iteration  30: 19559567.978 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_tap":
  19579361.380 ±(99.9%) 25224.514 ops/s [Average]
  (min, avg, max) = (19491768.031, 19579361.380, 19678051.597), stdev = 37754.867
  CI (99.9%): [19554136.866, 19604585.893] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_tap  thrpt   30  19579361.380 ± 25224.514  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_testAppendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_testAppendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4018598.070 ops/s
# Warmup Iteration   2: 8536928.142 ops/s
# Warmup Iteration   3: 7085978.266 ops/s
# Warmup Iteration   4: 8424970.404 ops/s
# Warmup Iteration   5: 8419961.792 ops/s
# Warmup Iteration   6: 8266819.978 ops/s
# Warmup Iteration   7: 8432069.905 ops/s
# Warmup Iteration   8: 8393358.386 ops/s
# Warmup Iteration   9: 8399935.033 ops/s
# Warmup Iteration  10: 8405683.376 ops/s
# Warmup Iteration  11: 8408294.940 ops/s
# Warmup Iteration  12: 8406924.504 ops/s
# Warmup Iteration  13: 8408578.280 ops/s
# Warmup Iteration  14: 8397529.428 ops/s
# Warmup Iteration  15: 8419819.376 ops/s
# Warmup Iteration  16: 8403591.337 ops/s
# Warmup Iteration  17: 8392201.456 ops/s
# Warmup Iteration  18: 8413060.033 ops/s
# Warmup Iteration  19: 8420680.766 ops/s
# Warmup Iteration  20: 8399389.058 ops/s
# Warmup Iteration  21: 8394045.391 ops/s
# Warmup Iteration  22: 8372084.083 ops/s
# Warmup Iteration  23: 8388671.990 ops/s
# Warmup Iteration  24: 8378938.427 ops/s
# Warmup Iteration  25: 8403029.941 ops/s
# Warmup Iteration  26: 8354504.860 ops/s
# Warmup Iteration  27: 8365493.595 ops/s
# Warmup Iteration  28: 8372380.558 ops/s
# Warmup Iteration  29: 8397389.323 ops/s
# Warmup Iteration  30: 8377860.364 ops/s
Iteration   1: 8429864.674 ops/s
Iteration   2: 8374484.984 ops/s
Iteration   3: 8411497.005 ops/s
Iteration   4: 8379507.542 ops/s
Iteration   5: 8440039.943 ops/s
Iteration   6: 8393796.162 ops/s
Iteration   7: 8416735.561 ops/s
Iteration   8: 8439987.400 ops/s
Iteration   9: 8385609.589 ops/s
Iteration  10: 8417551.349 ops/s
Iteration  11: 8414418.372 ops/s
Iteration  12: 8373171.758 ops/s
Iteration  13: 8426165.220 ops/s
Iteration  14: 8408811.762 ops/s
Iteration  15: 8433506.915 ops/s
Iteration  16: 8409593.384 ops/s
Iteration  17: 8439858.471 ops/s
Iteration  18: 8398127.682 ops/s
Iteration  19: 8408299.027 ops/s
Iteration  20: 8428114.134 ops/s
Iteration  21: 8412223.621 ops/s
Iteration  22: 8446237.022 ops/s
Iteration  23: 8445759.697 ops/s
Iteration  24: 8436327.800 ops/s
Iteration  25: 8405235.247 ops/s
Iteration  26: 8430342.397 ops/s
Iteration  27: 8421075.586 ops/s
Iteration  28: 8370837.196 ops/s
Iteration  29: 8366643.585 ops/s
Iteration  30: 8377215.323 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_testAppendString":
  8411367.947 ±(99.9%) 16264.222 ops/s [Average]
  (min, avg, max) = (8366643.585, 8411367.947, 8446237.022), stdev = 24343.523
  CI (99.9%): [8395103.725, 8427632.168] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_testAppendString  thrpt   30  8411367.947 ± 16264.222  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_testClone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_testClone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5841358.376 ops/s
# Warmup Iteration   2: 9993244.741 ops/s
# Warmup Iteration   3: 11665361.722 ops/s
# Warmup Iteration   4: 11616913.508 ops/s
# Warmup Iteration   5: 11668183.678 ops/s
# Warmup Iteration   6: 11623534.114 ops/s
# Warmup Iteration   7: 11635057.997 ops/s
# Warmup Iteration   8: 11605762.545 ops/s
# Warmup Iteration   9: 11596704.094 ops/s
# Warmup Iteration  10: 11681158.681 ops/s
# Warmup Iteration  11: 11674987.185 ops/s
# Warmup Iteration  12: 11604142.728 ops/s
# Warmup Iteration  13: 11608634.167 ops/s
# Warmup Iteration  14: 11623607.620 ops/s
# Warmup Iteration  15: 11624543.254 ops/s
# Warmup Iteration  16: 11599694.980 ops/s
# Warmup Iteration  17: 11643570.380 ops/s
# Warmup Iteration  18: 11648667.558 ops/s
# Warmup Iteration  19: 11650735.310 ops/s
# Warmup Iteration  20: 11669366.143 ops/s
# Warmup Iteration  21: 11659782.488 ops/s
# Warmup Iteration  22: 11659350.390 ops/s
# Warmup Iteration  23: 11672470.854 ops/s
# Warmup Iteration  24: 11631268.395 ops/s
# Warmup Iteration  25: 11672656.114 ops/s
# Warmup Iteration  26: 11686047.354 ops/s
# Warmup Iteration  27: 11654229.344 ops/s
# Warmup Iteration  28: 11645235.936 ops/s
# Warmup Iteration  29: 11706381.362 ops/s
# Warmup Iteration  30: 11708996.105 ops/s
Iteration   1: 11644912.611 ops/s
Iteration   2: 11639085.974 ops/s
Iteration   3: 11681500.791 ops/s
Iteration   4: 11651071.307 ops/s
Iteration   5: 11671717.546 ops/s
Iteration   6: 11593168.110 ops/s
Iteration   7: 11717129.907 ops/s
Iteration   8: 11666223.099 ops/s
Iteration   9: 11602372.617 ops/s
Iteration  10: 11698619.949 ops/s
Iteration  11: 11594859.916 ops/s
Iteration  12: 11612106.550 ops/s
Iteration  13: 11665978.524 ops/s
Iteration  14: 11660389.084 ops/s
Iteration  15: 11704338.136 ops/s
Iteration  16: 11651665.769 ops/s
Iteration  17: 11699262.294 ops/s
Iteration  18: 11643057.828 ops/s
Iteration  19: 11669622.319 ops/s
Iteration  20: 11648773.573 ops/s
Iteration  21: 11698636.474 ops/s
Iteration  22: 11715662.107 ops/s
Iteration  23: 11632187.286 ops/s
Iteration  24: 11661752.652 ops/s
Iteration  25: 11691604.206 ops/s
Iteration  26: 11658966.340 ops/s
Iteration  27: 11684773.573 ops/s
Iteration  28: 11725182.388 ops/s
Iteration  29: 11737945.241 ops/s
Iteration  30: 11687501.165 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_testClone":
  11667002.245 ±(99.9%) 25174.005 ops/s [Average]
  (min, avg, max) = (11593168.110, 11667002.245, 11737945.241), stdev = 37679.269
  CI (99.9%): [11641828.239, 11692176.250] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score       Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_testClone  thrpt   30  11667002.245 ± 25174.005  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_testEquals$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_testEquals

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8361365.515 ops/s
# Warmup Iteration   2: 16201493.482 ops/s
# Warmup Iteration   3: 14451184.136 ops/s
# Warmup Iteration   4: 16559530.646 ops/s
# Warmup Iteration   5: 16587533.174 ops/s
# Warmup Iteration   6: 16588335.497 ops/s
# Warmup Iteration   7: 16597132.545 ops/s
# Warmup Iteration   8: 16593536.044 ops/s
# Warmup Iteration   9: 16577557.942 ops/s
# Warmup Iteration  10: 16571428.673 ops/s
# Warmup Iteration  11: 16477288.405 ops/s
# Warmup Iteration  12: 16551819.183 ops/s
# Warmup Iteration  13: 16576451.993 ops/s
# Warmup Iteration  14: 16579460.375 ops/s
# Warmup Iteration  15: 16566243.671 ops/s
# Warmup Iteration  16: 16537303.146 ops/s
# Warmup Iteration  17: 16560234.698 ops/s
# Warmup Iteration  18: 16584256.482 ops/s
# Warmup Iteration  19: 16574383.689 ops/s
# Warmup Iteration  20: 16571177.230 ops/s
# Warmup Iteration  21: 16554206.135 ops/s
# Warmup Iteration  22: 16537987.117 ops/s
# Warmup Iteration  23: 16543324.764 ops/s
# Warmup Iteration  24: 16491916.999 ops/s
# Warmup Iteration  25: 16574489.113 ops/s
# Warmup Iteration  26: 16554519.412 ops/s
# Warmup Iteration  27: 16587021.689 ops/s
# Warmup Iteration  28: 16558641.877 ops/s
# Warmup Iteration  29: 16543897.530 ops/s
# Warmup Iteration  30: 16528147.363 ops/s
Iteration   1: 16560263.674 ops/s
Iteration   2: 16595034.760 ops/s
Iteration   3: 16485893.003 ops/s
Iteration   4: 16609331.508 ops/s
Iteration   5: 16591000.096 ops/s
Iteration   6: 16574528.390 ops/s
Iteration   7: 16606258.404 ops/s
Iteration   8: 16636032.518 ops/s
Iteration   9: 16620530.182 ops/s
Iteration  10: 16620677.683 ops/s
Iteration  11: 16536976.805 ops/s
Iteration  12: 16563251.067 ops/s
Iteration  13: 16637179.286 ops/s
Iteration  14: 16520755.391 ops/s
Iteration  15: 16560153.606 ops/s
Iteration  16: 16571815.847 ops/s
Iteration  17: 16608518.260 ops/s
Iteration  18: 16544629.715 ops/s
Iteration  19: 16549209.783 ops/s
Iteration  20: 16537306.818 ops/s
Iteration  21: 16597519.950 ops/s
Iteration  22: 16539910.662 ops/s
Iteration  23: 16601483.858 ops/s
Iteration  24: 16533879.713 ops/s
Iteration  25: 16565094.247 ops/s
Iteration  26: 16580016.232 ops/s
Iteration  27: 16594001.450 ops/s
Iteration  28: 16467994.946 ops/s
Iteration  29: 16573246.760 ops/s
Iteration  30: 16577387.187 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_testEquals":
  16571996.060 ±(99.9%) 27014.662 ops/s [Average]
  (min, avg, max) = (16467994.946, 16571996.060, 16637179.286), stdev = 40434.278
  CI (99.9%): [16544981.398, 16599010.722] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score       Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_testEquals  thrpt   30  16571996.060 ± 27014.662  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_testMakeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_testMakeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3075991.422 ops/s
# Warmup Iteration   2: 6708912.187 ops/s
# Warmup Iteration   3: 5686815.809 ops/s
# Warmup Iteration   4: 6803986.359 ops/s
# Warmup Iteration   5: 6797571.059 ops/s
# Warmup Iteration   6: 6793685.431 ops/s
# Warmup Iteration   7: 6790352.688 ops/s
# Warmup Iteration   8: 6787645.507 ops/s
# Warmup Iteration   9: 6797072.626 ops/s
# Warmup Iteration  10: 6820544.502 ops/s
# Warmup Iteration  11: 6818832.777 ops/s
# Warmup Iteration  12: 6809751.046 ops/s
# Warmup Iteration  13: 6787807.796 ops/s
# Warmup Iteration  14: 6785411.933 ops/s
# Warmup Iteration  15: 6806079.337 ops/s
# Warmup Iteration  16: 6788235.030 ops/s
# Warmup Iteration  17: 6804683.925 ops/s
# Warmup Iteration  18: 6787008.552 ops/s
# Warmup Iteration  19: 6777387.846 ops/s
# Warmup Iteration  20: 6781765.458 ops/s
# Warmup Iteration  21: 6801252.586 ops/s
# Warmup Iteration  22: 6783261.653 ops/s
# Warmup Iteration  23: 6794392.282 ops/s
# Warmup Iteration  24: 6791379.138 ops/s
# Warmup Iteration  25: 6808836.591 ops/s
# Warmup Iteration  26: 6783320.796 ops/s
# Warmup Iteration  27: 6807078.587 ops/s
# Warmup Iteration  28: 6790328.106 ops/s
# Warmup Iteration  29: 6797212.941 ops/s
# Warmup Iteration  30: 6775792.191 ops/s
Iteration   1: 6751679.962 ops/s
Iteration   2: 6798402.073 ops/s
Iteration   3: 6759081.506 ops/s
Iteration   4: 6794874.640 ops/s
Iteration   5: 6773660.227 ops/s
Iteration   6: 6795013.754 ops/s
Iteration   7: 6793026.499 ops/s
Iteration   8: 6809885.557 ops/s
Iteration   9: 6782167.541 ops/s
Iteration  10: 6767845.560 ops/s
Iteration  11: 6786786.262 ops/s
Iteration  12: 6758413.905 ops/s
Iteration  13: 6798488.645 ops/s
Iteration  14: 6808526.145 ops/s
Iteration  15: 6794116.564 ops/s
Iteration  16: 6758646.585 ops/s
Iteration  17: 6801822.459 ops/s
Iteration  18: 6781267.479 ops/s
Iteration  19: 6778141.682 ops/s
Iteration  20: 6804453.011 ops/s
Iteration  21: 6784418.214 ops/s
Iteration  22: 6797386.109 ops/s
Iteration  23: 6811107.109 ops/s
Iteration  24: 6797033.194 ops/s
Iteration  25: 6806093.708 ops/s
Iteration  26: 6811838.603 ops/s
Iteration  27: 6817101.121 ops/s
Iteration  28: 6767259.606 ops/s
Iteration  29: 6788560.562 ops/s
Iteration  30: 6770982.619 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_testMakeString":
  6788269.363 ±(99.9%) 12154.946 ops/s [Average]
  (min, avg, max) = (6751679.962, 6788269.363, 6817101.121), stdev = 18192.952
  CI (99.9%): [6776114.417, 6800424.309] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_testMakeString  thrpt   30  6788269.363 ± 12154.946  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_with$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_with

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 700350.020 ops/s
# Warmup Iteration   2: 774279.937 ops/s
# Warmup Iteration   3: 1005683.548 ops/s
# Warmup Iteration   4: 1003705.695 ops/s
# Warmup Iteration   5: 998006.611 ops/s
# Warmup Iteration   6: 999853.212 ops/s
# Warmup Iteration   7: 1001972.714 ops/s
# Warmup Iteration   8: 998049.283 ops/s
# Warmup Iteration   9: 1000848.199 ops/s
# Warmup Iteration  10: 921414.436 ops/s
# Warmup Iteration  11: 919831.603 ops/s
# Warmup Iteration  12: 1001778.384 ops/s
# Warmup Iteration  13: 1000828.675 ops/s
# Warmup Iteration  14: 1001421.881 ops/s
# Warmup Iteration  15: 1002029.840 ops/s
# Warmup Iteration  16: 1001701.721 ops/s
# Warmup Iteration  17: 1062713.851 ops/s
# Warmup Iteration  18: 1058861.063 ops/s
# Warmup Iteration  19: 1062724.259 ops/s
# Warmup Iteration  20: 1063936.065 ops/s
# Warmup Iteration  21: 1060677.231 ops/s
# Warmup Iteration  22: 1062482.173 ops/s
# Warmup Iteration  23: 1064119.274 ops/s
# Warmup Iteration  24: 1060872.641 ops/s
# Warmup Iteration  25: 1063251.993 ops/s
# Warmup Iteration  26: 1064375.476 ops/s
# Warmup Iteration  27: 1064843.725 ops/s
# Warmup Iteration  28: 1061159.117 ops/s
# Warmup Iteration  29: 1063386.787 ops/s
# Warmup Iteration  30: 1062385.598 ops/s
Iteration   1: 1056417.325 ops/s
Iteration   2: 1064074.172 ops/s
Iteration   3: 1065952.655 ops/s
Iteration   4: 1062299.642 ops/s
Iteration   5: 1057977.156 ops/s
Iteration   6: 1064342.957 ops/s
Iteration   7: 1060187.885 ops/s
Iteration   8: 1062476.329 ops/s
Iteration   9: 1066410.545 ops/s
Iteration  10: 1060862.026 ops/s
Iteration  11: 1058615.297 ops/s
Iteration  12: 1064634.431 ops/s
Iteration  13: 1064504.844 ops/s
Iteration  14: 1063524.007 ops/s
Iteration  15: 1061538.904 ops/s
Iteration  16: 1065868.028 ops/s
Iteration  17: 1058933.624 ops/s
Iteration  18: 1062797.371 ops/s
Iteration  19: 1060622.554 ops/s
Iteration  20: 1064893.217 ops/s
Iteration  21: 1064962.262 ops/s
Iteration  22: 1062165.369 ops/s
Iteration  23: 1059908.567 ops/s
Iteration  24: 1060450.117 ops/s
Iteration  25: 1062230.580 ops/s
Iteration  26: 1060179.510 ops/s
Iteration  27: 1061306.392 ops/s
Iteration  28: 1056738.855 ops/s
Iteration  29: 1061847.938 ops/s
Iteration  30: 1061186.289 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_with":
  1061930.295 ±(99.9%) 1785.996 ops/s [Average]
  (min, avg, max) = (1056417.325, 1061930.295, 1066410.545), stdev = 2673.195
  CI (99.9%): [1060144.299, 1063716.291] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_with  thrpt   30  1061930.295 ± 1785.996  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_withAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_withAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 686489.989 ops/s
# Warmup Iteration   2: 771549.182 ops/s
# Warmup Iteration   3: 995492.083 ops/s
# Warmup Iteration   4: 983409.621 ops/s
# Warmup Iteration   5: 982279.358 ops/s
# Warmup Iteration   6: 986295.758 ops/s
# Warmup Iteration   7: 991371.917 ops/s
# Warmup Iteration   8: 988662.984 ops/s
# Warmup Iteration   9: 992001.419 ops/s
# Warmup Iteration  10: 870205.306 ops/s
# Warmup Iteration  11: 953135.190 ops/s
# Warmup Iteration  12: 992505.324 ops/s
# Warmup Iteration  13: 992244.765 ops/s
# Warmup Iteration  14: 990094.340 ops/s
# Warmup Iteration  15: 989803.915 ops/s
# Warmup Iteration  16: 990972.883 ops/s
# Warmup Iteration  17: 1047866.929 ops/s
# Warmup Iteration  18: 1051104.395 ops/s
# Warmup Iteration  19: 1051927.369 ops/s
# Warmup Iteration  20: 1049313.164 ops/s
# Warmup Iteration  21: 1051774.248 ops/s
# Warmup Iteration  22: 1050049.755 ops/s
# Warmup Iteration  23: 1051833.895 ops/s
# Warmup Iteration  24: 1051216.749 ops/s
# Warmup Iteration  25: 1050604.228 ops/s
# Warmup Iteration  26: 1050063.100 ops/s
# Warmup Iteration  27: 1048923.796 ops/s
# Warmup Iteration  28: 1049913.001 ops/s
# Warmup Iteration  29: 1052630.756 ops/s
# Warmup Iteration  30: 1055144.087 ops/s
Iteration   1: 1053467.391 ops/s
Iteration   2: 1054093.805 ops/s
Iteration   3: 1050291.963 ops/s
Iteration   4: 1052718.914 ops/s
Iteration   5: 1050327.101 ops/s
Iteration   6: 1050219.526 ops/s
Iteration   7: 1044904.892 ops/s
Iteration   8: 1048230.229 ops/s
Iteration   9: 1051803.385 ops/s
Iteration  10: 1046168.318 ops/s
Iteration  11: 1054074.234 ops/s
Iteration  12: 1051125.166 ops/s
Iteration  13: 1050281.714 ops/s
Iteration  14: 1047061.862 ops/s
Iteration  15: 1044853.631 ops/s
Iteration  16: 1045891.213 ops/s
Iteration  17: 1051778.945 ops/s
Iteration  18: 1055316.049 ops/s
Iteration  19: 1050707.869 ops/s
Iteration  20: 1048843.088 ops/s
Iteration  21: 1048101.996 ops/s
Iteration  22: 1053784.439 ops/s
Iteration  23: 1048301.304 ops/s
Iteration  24: 1054453.867 ops/s
Iteration  25: 1052345.813 ops/s
Iteration  26: 1059117.235 ops/s
Iteration  27: 1047120.093 ops/s
Iteration  28: 1048805.077 ops/s
Iteration  29: 1050663.463 ops/s
Iteration  30: 1048305.841 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_withAll":
  1050438.614 ±(99.9%) 2230.366 ops/s [Average]
  (min, avg, max) = (1044853.631, 1050438.614, 1059117.235), stdev = 3338.308
  CI (99.9%): [1048208.248, 1052668.980] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_withAll  thrpt   30  1050438.614 ± 2230.366  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_without$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_without

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 702378.654 ops/s
# Warmup Iteration   2: 780057.697 ops/s
# Warmup Iteration   3: 1002764.534 ops/s
# Warmup Iteration   4: 993104.050 ops/s
# Warmup Iteration   5: 997208.893 ops/s
# Warmup Iteration   6: 998310.385 ops/s
# Warmup Iteration   7: 1000953.413 ops/s
# Warmup Iteration   8: 996876.570 ops/s
# Warmup Iteration   9: 997127.615 ops/s
# Warmup Iteration  10: 922040.628 ops/s
# Warmup Iteration  11: 916358.329 ops/s
# Warmup Iteration  12: 999622.604 ops/s
# Warmup Iteration  13: 998741.071 ops/s
# Warmup Iteration  14: 998370.091 ops/s
# Warmup Iteration  15: 997932.566 ops/s
# Warmup Iteration  16: 998674.146 ops/s
# Warmup Iteration  17: 1063268.404 ops/s
# Warmup Iteration  18: 1061888.916 ops/s
# Warmup Iteration  19: 1064071.060 ops/s
# Warmup Iteration  20: 1062996.562 ops/s
# Warmup Iteration  21: 1064177.041 ops/s
# Warmup Iteration  22: 1063731.007 ops/s
# Warmup Iteration  23: 1064722.370 ops/s
# Warmup Iteration  24: 1064110.172 ops/s
# Warmup Iteration  25: 1066530.947 ops/s
# Warmup Iteration  26: 1065841.332 ops/s
# Warmup Iteration  27: 1064967.739 ops/s
# Warmup Iteration  28: 1066512.912 ops/s
# Warmup Iteration  29: 1064839.630 ops/s
# Warmup Iteration  30: 1063701.610 ops/s
Iteration   1: 1065319.886 ops/s
Iteration   2: 1062790.937 ops/s
Iteration   3: 1066487.920 ops/s
Iteration   4: 1064912.966 ops/s
Iteration   5: 1061589.090 ops/s
Iteration   6: 1063930.823 ops/s
Iteration   7: 1065645.511 ops/s
Iteration   8: 1057479.570 ops/s
Iteration   9: 1062927.302 ops/s
Iteration  10: 1063325.913 ops/s
Iteration  11: 1061636.402 ops/s
Iteration  12: 1059102.896 ops/s
Iteration  13: 1060118.917 ops/s
Iteration  14: 1065318.507 ops/s
Iteration  15: 1062845.951 ops/s
Iteration  16: 1063855.411 ops/s
Iteration  17: 1066219.785 ops/s
Iteration  18: 1067049.328 ops/s
Iteration  19: 1060646.577 ops/s
Iteration  20: 1064939.369 ops/s
Iteration  21: 1065599.876 ops/s
Iteration  22: 1066460.502 ops/s
Iteration  23: 1063628.525 ops/s
Iteration  24: 1063702.332 ops/s
Iteration  25: 1062861.500 ops/s
Iteration  26: 1061476.489 ops/s
Iteration  27: 1066379.820 ops/s
Iteration  28: 1061769.173 ops/s
Iteration  29: 1065538.163 ops/s
Iteration  30: 1064829.446 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_without":
  1063612.963 ±(99.9%) 1582.279 ops/s [Average]
  (min, avg, max) = (1057479.570, 1063612.963, 1067049.328), stdev = 2368.281
  CI (99.9%): [1062030.684, 1065195.242] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_without  thrpt   30  1063612.963 ± 1582.279  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_withoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_withoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 685222.140 ops/s
# Warmup Iteration   2: 775121.216 ops/s
# Warmup Iteration   3: 997629.482 ops/s
# Warmup Iteration   4: 992372.547 ops/s
# Warmup Iteration   5: 991260.458 ops/s
# Warmup Iteration   6: 993697.805 ops/s
# Warmup Iteration   7: 992241.871 ops/s
# Warmup Iteration   8: 993821.221 ops/s
# Warmup Iteration   9: 991765.335 ops/s
# Warmup Iteration  10: 836986.533 ops/s
# Warmup Iteration  11: 993015.837 ops/s
# Warmup Iteration  12: 995771.245 ops/s
# Warmup Iteration  13: 994901.629 ops/s
# Warmup Iteration  14: 996058.814 ops/s
# Warmup Iteration  15: 996498.198 ops/s
# Warmup Iteration  16: 996698.048 ops/s
# Warmup Iteration  17: 1055825.262 ops/s
# Warmup Iteration  18: 1057525.086 ops/s
# Warmup Iteration  19: 1054546.245 ops/s
# Warmup Iteration  20: 1057147.872 ops/s
# Warmup Iteration  21: 1057644.316 ops/s
# Warmup Iteration  22: 1055446.720 ops/s
# Warmup Iteration  23: 1059240.709 ops/s
# Warmup Iteration  24: 1055528.529 ops/s
# Warmup Iteration  25: 1053487.507 ops/s
# Warmup Iteration  26: 1054467.500 ops/s
# Warmup Iteration  27: 1054000.037 ops/s
# Warmup Iteration  28: 1057467.620 ops/s
# Warmup Iteration  29: 1054094.666 ops/s
# Warmup Iteration  30: 1054701.307 ops/s
Iteration   1: 1057077.125 ops/s
Iteration   2: 1059587.744 ops/s
Iteration   3: 1055919.291 ops/s
Iteration   4: 1055062.005 ops/s
Iteration   5: 1055830.583 ops/s
Iteration   6: 1052674.798 ops/s
Iteration   7: 1055353.163 ops/s
Iteration   8: 1054541.782 ops/s
Iteration   9: 1054282.311 ops/s
Iteration  10: 1057415.172 ops/s
Iteration  11: 1056904.238 ops/s
Iteration  12: 1055721.693 ops/s
Iteration  13: 1052480.404 ops/s
Iteration  14: 1059467.870 ops/s
Iteration  15: 1055029.327 ops/s
Iteration  16: 1055492.539 ops/s
Iteration  17: 1055263.186 ops/s
Iteration  18: 1057809.053 ops/s
Iteration  19: 1055005.121 ops/s
Iteration  20: 1055844.335 ops/s
Iteration  21: 1055532.099 ops/s
Iteration  22: 1051274.214 ops/s
Iteration  23: 1056026.060 ops/s
Iteration  24: 1055118.660 ops/s
Iteration  25: 1056358.195 ops/s
Iteration  26: 1052346.152 ops/s
Iteration  27: 1056711.814 ops/s
Iteration  28: 1053620.578 ops/s
Iteration  29: 1047498.548 ops/s
Iteration  30: 1051989.093 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_withoutAll":
  1055107.905 ±(99.9%) 1628.540 ops/s [Average]
  (min, avg, max) = (1047498.548, 1055107.905, 1059587.744), stdev = 2437.522
  CI (99.9%): [1053479.365, 1056736.445] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_withoutAll  thrpt   30  1055107.905 ± 1628.540  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_zip$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_zip

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 416995.546 ops/s
# Warmup Iteration   2: 580035.579 ops/s
# Warmup Iteration   3: 774279.644 ops/s
# Warmup Iteration   4: 769160.803 ops/s
# Warmup Iteration   5: 774871.455 ops/s
# Warmup Iteration   6: 773658.021 ops/s
# Warmup Iteration   7: 772586.427 ops/s
# Warmup Iteration   8: 742404.682 ops/s
# Warmup Iteration   9: 671417.469 ops/s
# Warmup Iteration  10: 775911.627 ops/s
# Warmup Iteration  11: 776024.180 ops/s
# Warmup Iteration  12: 775530.006 ops/s
# Warmup Iteration  13: 774510.715 ops/s
# Warmup Iteration  14: 772448.493 ops/s
# Warmup Iteration  15: 775292.204 ops/s
# Warmup Iteration  16: 774907.042 ops/s
# Warmup Iteration  17: 776370.845 ops/s
# Warmup Iteration  18: 775029.697 ops/s
# Warmup Iteration  19: 774657.243 ops/s
# Warmup Iteration  20: 775044.478 ops/s
# Warmup Iteration  21: 774377.106 ops/s
# Warmup Iteration  22: 776825.159 ops/s
# Warmup Iteration  23: 775123.670 ops/s
# Warmup Iteration  24: 774307.984 ops/s
# Warmup Iteration  25: 774711.317 ops/s
# Warmup Iteration  26: 776141.920 ops/s
# Warmup Iteration  27: 776007.824 ops/s
# Warmup Iteration  28: 774368.999 ops/s
# Warmup Iteration  29: 776464.972 ops/s
# Warmup Iteration  30: 775007.017 ops/s
Iteration   1: 772741.734 ops/s
Iteration   2: 776402.239 ops/s
Iteration   3: 775694.480 ops/s
Iteration   4: 774795.019 ops/s
Iteration   5: 776399.356 ops/s
Iteration   6: 776382.223 ops/s
Iteration   7: 773762.172 ops/s
Iteration   8: 776154.215 ops/s
Iteration   9: 776337.460 ops/s
Iteration  10: 774058.654 ops/s
Iteration  11: 775900.499 ops/s
Iteration  12: 774084.306 ops/s
Iteration  13: 776052.890 ops/s
Iteration  14: 776713.836 ops/s
Iteration  15: 775335.543 ops/s
Iteration  16: 772666.786 ops/s
Iteration  17: 772961.784 ops/s
Iteration  18: 774157.548 ops/s
Iteration  19: 776534.833 ops/s
Iteration  20: 776085.652 ops/s
Iteration  21: 774445.355 ops/s
Iteration  22: 776586.248 ops/s
Iteration  23: 773345.370 ops/s
Iteration  24: 776306.315 ops/s
Iteration  25: 776946.696 ops/s
Iteration  26: 775002.413 ops/s
Iteration  27: 775749.944 ops/s
Iteration  28: 774448.130 ops/s
Iteration  29: 774075.657 ops/s
Iteration  30: 776058.178 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_zip":
  775206.185 ±(99.9%) 870.865 ops/s [Average]
  (min, avg, max) = (772666.786, 775206.185, 776946.696), stdev = 1303.470
  CI (99.9%): [774335.319, 776077.050] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score     Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_zip  thrpt   30  775206.185 ± 870.865  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_zipWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_zipWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 486835.451 ops/s
# Warmup Iteration   2: 958051.965 ops/s
# Warmup Iteration   3: 1352057.257 ops/s
# Warmup Iteration   4: 1343632.079 ops/s
# Warmup Iteration   5: 1350422.814 ops/s
# Warmup Iteration   6: 1345425.059 ops/s
# Warmup Iteration   7: 1168628.614 ops/s
# Warmup Iteration   8: 1304416.339 ops/s
# Warmup Iteration   9: 1350607.735 ops/s
# Warmup Iteration  10: 1353108.342 ops/s
# Warmup Iteration  11: 1347864.863 ops/s
# Warmup Iteration  12: 1351235.549 ops/s
# Warmup Iteration  13: 1352342.011 ops/s
# Warmup Iteration  14: 1349985.359 ops/s
# Warmup Iteration  15: 1352294.826 ops/s
# Warmup Iteration  16: 1351173.591 ops/s
# Warmup Iteration  17: 1350969.165 ops/s
# Warmup Iteration  18: 1351577.713 ops/s
# Warmup Iteration  19: 1353205.886 ops/s
# Warmup Iteration  20: 1351911.485 ops/s
# Warmup Iteration  21: 1350650.425 ops/s
# Warmup Iteration  22: 1351169.585 ops/s
# Warmup Iteration  23: 1351093.743 ops/s
# Warmup Iteration  24: 1350863.377 ops/s
# Warmup Iteration  25: 1352397.925 ops/s
# Warmup Iteration  26: 1352236.027 ops/s
# Warmup Iteration  27: 1350959.958 ops/s
# Warmup Iteration  28: 1352537.101 ops/s
# Warmup Iteration  29: 1352885.992 ops/s
# Warmup Iteration  30: 1352665.079 ops/s
Iteration   1: 1348550.091 ops/s
Iteration   2: 1353349.568 ops/s
Iteration   3: 1350505.378 ops/s
Iteration   4: 1352519.446 ops/s
Iteration   5: 1348206.766 ops/s
Iteration   6: 1349044.370 ops/s
Iteration   7: 1352570.141 ops/s
Iteration   8: 1352643.350 ops/s
Iteration   9: 1352826.485 ops/s
Iteration  10: 1347286.189 ops/s
Iteration  11: 1353824.633 ops/s
Iteration  12: 1348572.268 ops/s
Iteration  13: 1355112.554 ops/s
Iteration  14: 1351217.293 ops/s
Iteration  15: 1350189.606 ops/s
Iteration  16: 1350406.456 ops/s
Iteration  17: 1355006.026 ops/s
Iteration  18: 1352410.039 ops/s
Iteration  19: 1353623.797 ops/s
Iteration  20: 1352495.370 ops/s
Iteration  21: 1351074.255 ops/s
Iteration  22: 1353922.183 ops/s
Iteration  23: 1348938.462 ops/s
Iteration  24: 1354531.155 ops/s
Iteration  25: 1349976.857 ops/s
Iteration  26: 1352307.643 ops/s
Iteration  27: 1352441.782 ops/s
Iteration  28: 1354278.660 ops/s
Iteration  29: 1350567.048 ops/s
Iteration  30: 1355398.064 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_zipWithIndex":
  1351793.198 ±(99.9%) 1511.868 ops/s [Average]
  (min, avg, max) = (1347286.189, 1351793.198, 1355398.064), stdev = 2262.893
  CI (99.9%): [1350281.330, 1353305.066] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
ArrayListAdapterAsUnmodifiableTest._Benchmark.benchmark_zipWithIndex  thrpt   30  1351793.198 ± 1511.868  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_adapt_null$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_adapt_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 814526.319 ops/s
# Warmup Iteration   2: 840199.470 ops/s
# Warmup Iteration   3: 959655.527 ops/s
# Warmup Iteration   4: 1023289.560 ops/s
# Warmup Iteration   5: 1024136.718 ops/s
# Warmup Iteration   6: 1025727.845 ops/s
# Warmup Iteration   7: 1021871.160 ops/s
# Warmup Iteration   8: 1021934.531 ops/s
# Warmup Iteration   9: 1026185.077 ops/s
# Warmup Iteration  10: 1026868.501 ops/s
# Warmup Iteration  11: 1027229.285 ops/s
# Warmup Iteration  12: 1022637.142 ops/s
# Warmup Iteration  13: 1027121.437 ops/s
# Warmup Iteration  14: 932859.398 ops/s
# Warmup Iteration  15: 959611.965 ops/s
# Warmup Iteration  16: 1027326.203 ops/s
# Warmup Iteration  17: 1086700.363 ops/s
# Warmup Iteration  18: 1087029.885 ops/s
# Warmup Iteration  19: 1086938.320 ops/s
# Warmup Iteration  20: 1086716.523 ops/s
# Warmup Iteration  21: 1088699.519 ops/s
# Warmup Iteration  22: 1085190.330 ops/s
# Warmup Iteration  23: 1089260.996 ops/s
# Warmup Iteration  24: 1088103.580 ops/s
# Warmup Iteration  25: 1089436.843 ops/s
# Warmup Iteration  26: 1089830.938 ops/s
# Warmup Iteration  27: 1085925.029 ops/s
# Warmup Iteration  28: 1087107.313 ops/s
# Warmup Iteration  29: 1087867.359 ops/s
# Warmup Iteration  30: 1086976.168 ops/s
Iteration   1: 1087652.791 ops/s
Iteration   2: 1088066.757 ops/s
Iteration   3: 1085763.871 ops/s
Iteration   4: 1088994.359 ops/s
Iteration   5: 1088479.851 ops/s
Iteration   6: 1088608.791 ops/s
Iteration   7: 1090524.446 ops/s
Iteration   8: 1087704.003 ops/s
Iteration   9: 1088776.729 ops/s
Iteration  10: 1082996.479 ops/s
Iteration  11: 1090225.644 ops/s
Iteration  12: 1086965.769 ops/s
Iteration  13: 1087157.015 ops/s
Iteration  14: 1086945.022 ops/s
Iteration  15: 1087067.333 ops/s
Iteration  16: 1083748.300 ops/s
Iteration  17: 1086098.363 ops/s
Iteration  18: 1089560.548 ops/s
Iteration  19: 1085523.483 ops/s
Iteration  20: 1087996.010 ops/s
Iteration  21: 1087423.410 ops/s
Iteration  22: 1086261.249 ops/s
Iteration  23: 1086066.761 ops/s
Iteration  24: 1089301.269 ops/s
Iteration  25: 1087444.845 ops/s
Iteration  26: 1081561.749 ops/s
Iteration  27: 1085767.360 ops/s
Iteration  28: 1085028.024 ops/s
Iteration  29: 1085155.164 ops/s
Iteration  30: 1088247.894 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_adapt_null":
  1087037.110 ±(99.9%) 1373.125 ops/s [Average]
  (min, avg, max) = (1081561.749, 1087037.110, 1090524.446), stdev = 2055.228
  CI (99.9%): [1085663.985, 1088410.234] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_adapt_null  thrpt   30  1087037.110 ± 1373.125  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_addAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_addAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2747734.287 ops/s
# Warmup Iteration   2: 5971654.756 ops/s
# Warmup Iteration   3: 5091408.862 ops/s
# Warmup Iteration   4: 6049353.605 ops/s
# Warmup Iteration   5: 6075798.174 ops/s
# Warmup Iteration   6: 6061652.244 ops/s
# Warmup Iteration   7: 6086415.340 ops/s
# Warmup Iteration   8: 6088858.715 ops/s
# Warmup Iteration   9: 6053949.913 ops/s
# Warmup Iteration  10: 6067084.445 ops/s
# Warmup Iteration  11: 6078255.582 ops/s
# Warmup Iteration  12: 6083259.880 ops/s
# Warmup Iteration  13: 6076959.348 ops/s
# Warmup Iteration  14: 6068144.250 ops/s
# Warmup Iteration  15: 6076788.961 ops/s
# Warmup Iteration  16: 6084616.613 ops/s
# Warmup Iteration  17: 6062020.715 ops/s
# Warmup Iteration  18: 6053667.468 ops/s
# Warmup Iteration  19: 6056188.008 ops/s
# Warmup Iteration  20: 6066190.151 ops/s
# Warmup Iteration  21: 6061066.564 ops/s
# Warmup Iteration  22: 6073190.175 ops/s
# Warmup Iteration  23: 6068616.596 ops/s
# Warmup Iteration  24: 6072160.237 ops/s
# Warmup Iteration  25: 6063213.649 ops/s
# Warmup Iteration  26: 6063145.327 ops/s
# Warmup Iteration  27: 6054539.643 ops/s
# Warmup Iteration  28: 6080303.913 ops/s
# Warmup Iteration  29: 6078792.261 ops/s
# Warmup Iteration  30: 6055907.685 ops/s
Iteration   1: 6066181.537 ops/s
Iteration   2: 6052795.469 ops/s
Iteration   3: 6056470.674 ops/s
Iteration   4: 6052928.463 ops/s
Iteration   5: 6044643.676 ops/s
Iteration   6: 6042521.003 ops/s
Iteration   7: 6066900.224 ops/s
Iteration   8: 6032111.323 ops/s
Iteration   9: 6064679.682 ops/s
Iteration  10: 6034680.491 ops/s
Iteration  11: 6050793.926 ops/s
Iteration  12: 6053869.327 ops/s
Iteration  13: 6057778.637 ops/s
Iteration  14: 6066184.154 ops/s
Iteration  15: 6061158.182 ops/s
Iteration  16: 6056134.666 ops/s
Iteration  17: 6086904.215 ops/s
Iteration  18: 6047128.590 ops/s
Iteration  19: 6070044.526 ops/s
Iteration  20: 6049970.230 ops/s
Iteration  21: 6032857.203 ops/s
Iteration  22: 6056877.848 ops/s
Iteration  23: 6054479.365 ops/s
Iteration  24: 6087268.535 ops/s
Iteration  25: 6057895.073 ops/s
Iteration  26: 6067423.028 ops/s
Iteration  27: 6062831.990 ops/s
Iteration  28: 6047796.303 ops/s
Iteration  29: 6065227.548 ops/s
Iteration  30: 6061241.384 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_addAll":
  6056925.909 ±(99.9%) 8717.711 ops/s [Average]
  (min, avg, max) = (6032111.323, 6056925.909, 6087268.535), stdev = 13048.260
  CI (99.9%): [6048208.199, 6065643.620] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_addAll  thrpt   30  6056925.909 ± 8717.711  ops/s
----------------------------------------
