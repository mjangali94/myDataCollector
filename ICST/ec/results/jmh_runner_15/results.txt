=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_with$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_with

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 675739.337 ops/s
# Warmup Iteration   2: 740370.513 ops/s
# Warmup Iteration   3: 984459.640 ops/s
# Warmup Iteration   4: 984019.756 ops/s
# Warmup Iteration   5: 983059.305 ops/s
# Warmup Iteration   6: 984672.982 ops/s
# Warmup Iteration   7: 986927.595 ops/s
# Warmup Iteration   8: 984588.553 ops/s
# Warmup Iteration   9: 981460.045 ops/s
# Warmup Iteration  10: 817627.841 ops/s
# Warmup Iteration  11: 985928.702 ops/s
# Warmup Iteration  12: 983936.199 ops/s
# Warmup Iteration  13: 985517.808 ops/s
# Warmup Iteration  14: 982575.980 ops/s
# Warmup Iteration  15: 984971.741 ops/s
# Warmup Iteration  16: 985845.059 ops/s
# Warmup Iteration  17: 1037336.099 ops/s
# Warmup Iteration  18: 1035341.871 ops/s
# Warmup Iteration  19: 1037217.868 ops/s
# Warmup Iteration  20: 1031353.082 ops/s
# Warmup Iteration  21: 1034647.679 ops/s
# Warmup Iteration  22: 1036217.965 ops/s
# Warmup Iteration  23: 1037590.579 ops/s
# Warmup Iteration  24: 1036568.184 ops/s
# Warmup Iteration  25: 1035358.844 ops/s
# Warmup Iteration  26: 1037775.212 ops/s
# Warmup Iteration  27: 1038552.604 ops/s
# Warmup Iteration  28: 1035866.676 ops/s
# Warmup Iteration  29: 1030833.758 ops/s
# Warmup Iteration  30: 1036628.607 ops/s
Iteration   1: 1031236.378 ops/s
Iteration   2: 1038859.768 ops/s
Iteration   3: 1029783.239 ops/s
Iteration   4: 1034536.531 ops/s
Iteration   5: 1034596.754 ops/s
Iteration   6: 1034389.031 ops/s
Iteration   7: 1036730.988 ops/s
Iteration   8: 1033279.870 ops/s
Iteration   9: 1035229.725 ops/s
Iteration  10: 1032934.327 ops/s
Iteration  11: 1039150.295 ops/s
Iteration  12: 1039218.997 ops/s
Iteration  13: 1032944.745 ops/s
Iteration  14: 1036270.252 ops/s
Iteration  15: 1038294.806 ops/s
Iteration  16: 1034258.757 ops/s
Iteration  17: 1034796.799 ops/s
Iteration  18: 1040119.072 ops/s
Iteration  19: 1037887.453 ops/s
Iteration  20: 1039064.643 ops/s
Iteration  21: 1030437.505 ops/s
Iteration  22: 1026791.139 ops/s
Iteration  23: 1034997.128 ops/s
Iteration  24: 1035132.282 ops/s
Iteration  25: 1034087.061 ops/s
Iteration  26: 1034840.011 ops/s
Iteration  27: 1036449.410 ops/s
Iteration  28: 1036070.490 ops/s
Iteration  29: 1034345.203 ops/s
Iteration  30: 1036122.046 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_with":
  1035095.157 ±(99.9%) 2017.415 ops/s [Average]
  (min, avg, max) = (1026791.139, 1035095.157, 1040119.072), stdev = 3019.572
  CI (99.9%): [1033077.742, 1037112.572] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_with  thrpt   30  1035095.157 ± 2017.415  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_withAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_withAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 664581.111 ops/s
# Warmup Iteration   2: 743887.002 ops/s
# Warmup Iteration   3: 978089.456 ops/s
# Warmup Iteration   4: 985009.394 ops/s
# Warmup Iteration   5: 983822.238 ops/s
# Warmup Iteration   6: 982565.797 ops/s
# Warmup Iteration   7: 982336.735 ops/s
# Warmup Iteration   8: 986717.815 ops/s
# Warmup Iteration   9: 983949.164 ops/s
# Warmup Iteration  10: 814669.842 ops/s
# Warmup Iteration  11: 984723.306 ops/s
# Warmup Iteration  12: 978043.408 ops/s
# Warmup Iteration  13: 982578.805 ops/s
# Warmup Iteration  14: 983398.245 ops/s
# Warmup Iteration  15: 986021.590 ops/s
# Warmup Iteration  16: 984877.803 ops/s
# Warmup Iteration  17: 1040225.762 ops/s
# Warmup Iteration  18: 1040394.049 ops/s
# Warmup Iteration  19: 1037030.591 ops/s
# Warmup Iteration  20: 1039520.797 ops/s
# Warmup Iteration  21: 1043584.449 ops/s
# Warmup Iteration  22: 1039901.336 ops/s
# Warmup Iteration  23: 1038269.402 ops/s
# Warmup Iteration  24: 1039593.443 ops/s
# Warmup Iteration  25: 1041749.066 ops/s
# Warmup Iteration  26: 1037890.158 ops/s
# Warmup Iteration  27: 1030882.475 ops/s
# Warmup Iteration  28: 1035475.853 ops/s
# Warmup Iteration  29: 1040456.755 ops/s
# Warmup Iteration  30: 1040480.118 ops/s
Iteration   1: 1038894.965 ops/s
Iteration   2: 1040113.764 ops/s
Iteration   3: 1038765.098 ops/s
Iteration   4: 1044612.264 ops/s
Iteration   5: 1042036.698 ops/s
Iteration   6: 1037571.339 ops/s
Iteration   7: 1039365.722 ops/s
Iteration   8: 1040333.101 ops/s
Iteration   9: 1038624.694 ops/s
Iteration  10: 1038379.776 ops/s
Iteration  11: 1040782.737 ops/s
Iteration  12: 1041927.835 ops/s
Iteration  13: 1041008.480 ops/s
Iteration  14: 1042452.301 ops/s
Iteration  15: 1040303.247 ops/s
Iteration  16: 1040289.112 ops/s
Iteration  17: 1035557.472 ops/s
Iteration  18: 1040958.434 ops/s
Iteration  19: 1039871.440 ops/s
Iteration  20: 1038616.954 ops/s
Iteration  21: 1044063.222 ops/s
Iteration  22: 1041073.835 ops/s
Iteration  23: 1042710.087 ops/s
Iteration  24: 1041999.271 ops/s
Iteration  25: 1040281.183 ops/s
Iteration  26: 1042072.916 ops/s
Iteration  27: 1038366.611 ops/s
Iteration  28: 1039565.936 ops/s
Iteration  29: 1042011.845 ops/s
Iteration  30: 1039230.991 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_withAll":
  1040394.711 ±(99.9%) 1297.833 ops/s [Average]
  (min, avg, max) = (1035557.472, 1040394.711, 1044612.264), stdev = 1942.536
  CI (99.9%): [1039096.878, 1041692.544] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_withAll  thrpt   30  1040394.711 ± 1297.833  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_without$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_without

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1343641.041 ops/s
# Warmup Iteration   2: 2890288.914 ops/s
# Warmup Iteration   3: 3528902.431 ops/s
# Warmup Iteration   4: 2911487.464 ops/s
# Warmup Iteration   5: 3528714.750 ops/s
# Warmup Iteration   6: 3531540.791 ops/s
# Warmup Iteration   7: 3530979.794 ops/s
# Warmup Iteration   8: 3529219.853 ops/s
# Warmup Iteration   9: 3533179.307 ops/s
# Warmup Iteration  10: 3519752.424 ops/s
# Warmup Iteration  11: 3525514.414 ops/s
# Warmup Iteration  12: 3528990.314 ops/s
# Warmup Iteration  13: 3528372.746 ops/s
# Warmup Iteration  14: 3530243.812 ops/s
# Warmup Iteration  15: 3526357.111 ops/s
# Warmup Iteration  16: 3536359.617 ops/s
# Warmup Iteration  17: 3535328.625 ops/s
# Warmup Iteration  18: 3529921.434 ops/s
# Warmup Iteration  19: 3533393.120 ops/s
# Warmup Iteration  20: 3532934.840 ops/s
# Warmup Iteration  21: 3530452.824 ops/s
# Warmup Iteration  22: 3526245.894 ops/s
# Warmup Iteration  23: 3535083.977 ops/s
# Warmup Iteration  24: 3531988.898 ops/s
# Warmup Iteration  25: 3527667.372 ops/s
# Warmup Iteration  26: 3529533.409 ops/s
# Warmup Iteration  27: 3528629.771 ops/s
# Warmup Iteration  28: 3525749.765 ops/s
# Warmup Iteration  29: 3523958.812 ops/s
# Warmup Iteration  30: 3521160.522 ops/s
Iteration   1: 3527810.149 ops/s
Iteration   2: 3527138.737 ops/s
Iteration   3: 3529634.101 ops/s
Iteration   4: 3532415.969 ops/s
Iteration   5: 3532126.653 ops/s
Iteration   6: 3528286.256 ops/s
Iteration   7: 3530395.506 ops/s
Iteration   8: 3527937.475 ops/s
Iteration   9: 3533524.697 ops/s
Iteration  10: 3539552.601 ops/s
Iteration  11: 3516742.887 ops/s
Iteration  12: 3528068.136 ops/s
Iteration  13: 3533613.721 ops/s
Iteration  14: 3524542.064 ops/s
Iteration  15: 3521999.325 ops/s
Iteration  16: 3533387.084 ops/s
Iteration  17: 3529618.350 ops/s
Iteration  18: 3535186.207 ops/s
Iteration  19: 3517592.131 ops/s
Iteration  20: 3518981.424 ops/s
Iteration  21: 3533182.499 ops/s
Iteration  22: 3526014.382 ops/s
Iteration  23: 3519367.031 ops/s
Iteration  24: 3525513.150 ops/s
Iteration  25: 3529776.248 ops/s
Iteration  26: 3525449.380 ops/s
Iteration  27: 3527969.839 ops/s
Iteration  28: 3528895.667 ops/s
Iteration  29: 3535155.402 ops/s
Iteration  30: 3537517.813 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_without":
  3528579.829 ±(99.9%) 3809.059 ops/s [Average]
  (min, avg, max) = (3516742.887, 3528579.829, 3539552.601), stdev = 5701.220
  CI (99.9%): [3524770.771, 3532388.888] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_without  thrpt   30  3528579.829 ± 3809.059  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_withoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_withoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1265061.261 ops/s
# Warmup Iteration   2: 2923718.888 ops/s
# Warmup Iteration   3: 3398261.567 ops/s
# Warmup Iteration   4: 2819720.139 ops/s
# Warmup Iteration   5: 3402929.479 ops/s
# Warmup Iteration   6: 3395291.137 ops/s
# Warmup Iteration   7: 3401096.211 ops/s
# Warmup Iteration   8: 3403421.034 ops/s
# Warmup Iteration   9: 3399879.076 ops/s
# Warmup Iteration  10: 3396389.713 ops/s
# Warmup Iteration  11: 3397946.252 ops/s
# Warmup Iteration  12: 3408493.823 ops/s
# Warmup Iteration  13: 3399278.875 ops/s
# Warmup Iteration  14: 3400060.766 ops/s
# Warmup Iteration  15: 3401366.531 ops/s
# Warmup Iteration  16: 3406347.636 ops/s
# Warmup Iteration  17: 3402187.959 ops/s
# Warmup Iteration  18: 3402293.933 ops/s
# Warmup Iteration  19: 3382539.094 ops/s
# Warmup Iteration  20: 3397649.345 ops/s
# Warmup Iteration  21: 3402741.037 ops/s
# Warmup Iteration  22: 3402578.840 ops/s
# Warmup Iteration  23: 3401594.354 ops/s
# Warmup Iteration  24: 3391307.107 ops/s
# Warmup Iteration  25: 3400286.334 ops/s
# Warmup Iteration  26: 3375409.875 ops/s
# Warmup Iteration  27: 3400198.750 ops/s
# Warmup Iteration  28: 3396057.977 ops/s
# Warmup Iteration  29: 3402924.962 ops/s
# Warmup Iteration  30: 3393447.732 ops/s
Iteration   1: 3402924.824 ops/s
Iteration   2: 3397868.599 ops/s
Iteration   3: 3408457.858 ops/s
Iteration   4: 3405743.815 ops/s
Iteration   5: 3402487.041 ops/s
Iteration   6: 3401682.720 ops/s
Iteration   7: 3404304.853 ops/s
Iteration   8: 3407998.351 ops/s
Iteration   9: 3398923.450 ops/s
Iteration  10: 3406289.254 ops/s
Iteration  11: 3403536.234 ops/s
Iteration  12: 3398991.176 ops/s
Iteration  13: 3400972.735 ops/s
Iteration  14: 3405803.172 ops/s
Iteration  15: 3408693.222 ops/s
Iteration  16: 3403786.183 ops/s
Iteration  17: 3347390.221 ops/s
Iteration  18: 3402084.024 ops/s
Iteration  19: 3346921.647 ops/s
Iteration  20: 3407622.178 ops/s
Iteration  21: 3409792.597 ops/s
Iteration  22: 3404516.724 ops/s
Iteration  23: 3393616.496 ops/s
Iteration  24: 3382986.912 ops/s
Iteration  25: 3403036.548 ops/s
Iteration  26: 3407412.687 ops/s
Iteration  27: 3402050.146 ops/s
Iteration  28: 3416431.677 ops/s
Iteration  29: 3401610.270 ops/s
Iteration  30: 3402865.504 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_withoutAll":
  3399560.037 ±(99.9%) 10249.723 ops/s [Average]
  (min, avg, max) = (3346921.647, 3399560.037, 3416431.677), stdev = 15341.305
  CI (99.9%): [3389310.314, 3409809.761] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
SynchronizedFloatBooleanMapValuesTest._Benchmark.benchmark_withoutAll  thrpt   30  3399560.037 ± 10249.723  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 682897.068 ops/s
# Warmup Iteration   2: 751681.778 ops/s
# Warmup Iteration   3: 986823.990 ops/s
# Warmup Iteration   4: 985238.106 ops/s
# Warmup Iteration   5: 977850.007 ops/s
# Warmup Iteration   6: 985421.827 ops/s
# Warmup Iteration   7: 986070.993 ops/s
# Warmup Iteration   8: 985258.503 ops/s
# Warmup Iteration   9: 984599.564 ops/s
# Warmup Iteration  10: 814473.678 ops/s
# Warmup Iteration  11: 987768.588 ops/s
# Warmup Iteration  12: 984570.023 ops/s
# Warmup Iteration  13: 987851.616 ops/s
# Warmup Iteration  14: 982178.130 ops/s
# Warmup Iteration  15: 989237.861 ops/s
# Warmup Iteration  16: 986687.496 ops/s
# Warmup Iteration  17: 1042360.147 ops/s
# Warmup Iteration  18: 1042586.446 ops/s
# Warmup Iteration  19: 1040635.240 ops/s
# Warmup Iteration  20: 1040796.645 ops/s
# Warmup Iteration  21: 1044749.192 ops/s
# Warmup Iteration  22: 1042939.394 ops/s
# Warmup Iteration  23: 1042487.273 ops/s
# Warmup Iteration  24: 1034213.521 ops/s
# Warmup Iteration  25: 1039462.887 ops/s
# Warmup Iteration  26: 1041877.107 ops/s
# Warmup Iteration  27: 1038908.016 ops/s
# Warmup Iteration  28: 1044144.830 ops/s
# Warmup Iteration  29: 1036652.444 ops/s
# Warmup Iteration  30: 1037928.698 ops/s
Iteration   1: 1042055.235 ops/s
Iteration   2: 1043575.430 ops/s
Iteration   3: 1038930.294 ops/s
Iteration   4: 1040741.365 ops/s
Iteration   5: 1029776.451 ops/s
Iteration   6: 1042558.938 ops/s
Iteration   7: 1041617.199 ops/s
Iteration   8: 1041452.044 ops/s
Iteration   9: 1042024.696 ops/s
Iteration  10: 1047053.827 ops/s
Iteration  11: 1043165.305 ops/s
Iteration  12: 1041485.312 ops/s
Iteration  13: 1043559.977 ops/s
Iteration  14: 1042902.885 ops/s
Iteration  15: 1042220.792 ops/s
Iteration  16: 1043751.472 ops/s
Iteration  17: 1041892.402 ops/s
Iteration  18: 1046069.903 ops/s
Iteration  19: 1035158.344 ops/s
Iteration  20: 1038677.730 ops/s
Iteration  21: 1045988.016 ops/s
Iteration  22: 1040883.951 ops/s
Iteration  23: 1044201.974 ops/s
Iteration  24: 1040526.350 ops/s
Iteration  25: 1033263.984 ops/s
Iteration  26: 1028331.174 ops/s
Iteration  27: 1045148.611 ops/s
Iteration  28: 1042814.626 ops/s
Iteration  29: 1042864.626 ops/s
Iteration  30: 1043948.495 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_add":
  1041221.380 ±(99.9%) 2925.096 ops/s [Average]
  (min, avg, max) = (1028331.174, 1041221.380, 1047053.827), stdev = 4378.147
  CI (99.9%): [1038296.284, 1044146.477] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_add  thrpt   30  1041221.380 ± 2925.096  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_addAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_addAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 688527.853 ops/s
# Warmup Iteration   2: 771350.456 ops/s
# Warmup Iteration   3: 985218.856 ops/s
# Warmup Iteration   4: 984759.957 ops/s
# Warmup Iteration   5: 982728.648 ops/s
# Warmup Iteration   6: 985782.243 ops/s
# Warmup Iteration   7: 985515.163 ops/s
# Warmup Iteration   8: 985586.129 ops/s
# Warmup Iteration   9: 986222.847 ops/s
# Warmup Iteration  10: 815651.740 ops/s
# Warmup Iteration  11: 989027.648 ops/s
# Warmup Iteration  12: 985250.141 ops/s
# Warmup Iteration  13: 985985.321 ops/s
# Warmup Iteration  14: 988918.516 ops/s
# Warmup Iteration  15: 980139.675 ops/s
# Warmup Iteration  16: 988463.654 ops/s
# Warmup Iteration  17: 1057797.092 ops/s
# Warmup Iteration  18: 1062396.758 ops/s
# Warmup Iteration  19: 1057820.558 ops/s
# Warmup Iteration  20: 1059131.986 ops/s
# Warmup Iteration  21: 1061091.160 ops/s
# Warmup Iteration  22: 1060643.812 ops/s
# Warmup Iteration  23: 1058276.756 ops/s
# Warmup Iteration  24: 1060929.880 ops/s
# Warmup Iteration  25: 1046592.858 ops/s
# Warmup Iteration  26: 1058021.962 ops/s
# Warmup Iteration  27: 1057167.544 ops/s
# Warmup Iteration  28: 1059874.539 ops/s
# Warmup Iteration  29: 1058735.840 ops/s
# Warmup Iteration  30: 1059050.352 ops/s
Iteration   1: 1057565.483 ops/s
Iteration   2: 1060087.446 ops/s
Iteration   3: 1061346.584 ops/s
Iteration   4: 1058433.283 ops/s
Iteration   5: 1058559.108 ops/s
Iteration   6: 1056848.787 ops/s
Iteration   7: 1061746.581 ops/s
Iteration   8: 1057030.992 ops/s
Iteration   9: 1063198.921 ops/s
Iteration  10: 1060398.962 ops/s
Iteration  11: 1056914.264 ops/s
Iteration  12: 1058038.308 ops/s
Iteration  13: 1057149.229 ops/s
Iteration  14: 1061932.813 ops/s
Iteration  15: 1056873.855 ops/s
Iteration  16: 1060506.935 ops/s
Iteration  17: 1062868.424 ops/s
Iteration  18: 1056398.731 ops/s
Iteration  19: 1062324.782 ops/s
Iteration  20: 1059146.721 ops/s
Iteration  21: 1056914.792 ops/s
Iteration  22: 1061773.552 ops/s
Iteration  23: 1052834.837 ops/s
Iteration  24: 1055630.896 ops/s
Iteration  25: 1060014.706 ops/s
Iteration  26: 1059275.291 ops/s
Iteration  27: 1060204.217 ops/s
Iteration  28: 1057851.387 ops/s
Iteration  29: 1058161.144 ops/s
Iteration  30: 1052988.857 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_addAllArray":
  1058767.330 ±(99.9%) 1764.559 ops/s [Average]
  (min, avg, max) = (1052834.837, 1058767.330, 1063198.921), stdev = 2641.109
  CI (99.9%): [1057002.771, 1060531.888] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_addAllArray  thrpt   30  1058767.330 ± 1764.559  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_addAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_addAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 684121.576 ops/s
# Warmup Iteration   2: 766242.175 ops/s
# Warmup Iteration   3: 996040.107 ops/s
# Warmup Iteration   4: 998167.954 ops/s
# Warmup Iteration   5: 996159.758 ops/s
# Warmup Iteration   6: 999138.448 ops/s
# Warmup Iteration   7: 998586.832 ops/s
# Warmup Iteration   8: 998056.742 ops/s
# Warmup Iteration   9: 998028.894 ops/s
# Warmup Iteration  10: 831751.110 ops/s
# Warmup Iteration  11: 999845.412 ops/s
# Warmup Iteration  12: 999080.043 ops/s
# Warmup Iteration  13: 983637.074 ops/s
# Warmup Iteration  14: 997338.678 ops/s
# Warmup Iteration  15: 1000245.924 ops/s
# Warmup Iteration  16: 999691.571 ops/s
# Warmup Iteration  17: 1055705.940 ops/s
# Warmup Iteration  18: 1058281.749 ops/s
# Warmup Iteration  19: 1054200.551 ops/s
# Warmup Iteration  20: 1056708.533 ops/s
# Warmup Iteration  21: 1055563.885 ops/s
# Warmup Iteration  22: 1049480.407 ops/s
# Warmup Iteration  23: 1056531.180 ops/s
# Warmup Iteration  24: 1056490.511 ops/s
# Warmup Iteration  25: 1051471.878 ops/s
# Warmup Iteration  26: 1053284.541 ops/s
# Warmup Iteration  27: 1056879.672 ops/s
# Warmup Iteration  28: 1054632.403 ops/s
# Warmup Iteration  29: 1059813.006 ops/s
# Warmup Iteration  30: 1054718.707 ops/s
Iteration   1: 1059488.529 ops/s
Iteration   2: 1056668.866 ops/s
Iteration   3: 1061128.007 ops/s
Iteration   4: 1056557.149 ops/s
Iteration   5: 1054393.213 ops/s
Iteration   6: 1058558.324 ops/s
Iteration   7: 1057789.838 ops/s
Iteration   8: 1052108.646 ops/s
Iteration   9: 1057468.017 ops/s
Iteration  10: 1058063.502 ops/s
Iteration  11: 1052575.528 ops/s
Iteration  12: 1053831.735 ops/s
Iteration  13: 1057178.151 ops/s
Iteration  14: 1056653.865 ops/s
Iteration  15: 1054242.133 ops/s
Iteration  16: 1041173.973 ops/s
Iteration  17: 1061569.362 ops/s
Iteration  18: 1051316.894 ops/s
Iteration  19: 1057577.666 ops/s
Iteration  20: 1055670.904 ops/s
Iteration  21: 1056504.835 ops/s
Iteration  22: 1057960.327 ops/s
Iteration  23: 1055475.779 ops/s
Iteration  24: 1053895.505 ops/s
Iteration  25: 1053968.145 ops/s
Iteration  26: 1061262.075 ops/s
Iteration  27: 1053687.511 ops/s
Iteration  28: 1058763.756 ops/s
Iteration  29: 1057014.130 ops/s
Iteration  30: 1047968.902 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_addAllIterable":
  1055683.842 ±(99.9%) 2734.892 ops/s [Average]
  (min, avg, max) = (1041173.973, 1055683.842, 1061569.362), stdev = 4093.458
  CI (99.9%): [1052948.950, 1058418.734] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score      Error  Units
SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_addAllIterable  thrpt   30  1055683.842 ± 2734.892  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 866100.043 ops/s
# Warmup Iteration   2: 1952180.962 ops/s
# Warmup Iteration   3: 2653988.848 ops/s
# Warmup Iteration   4: 3154446.867 ops/s
# Warmup Iteration   5: 3174559.198 ops/s
# Warmup Iteration   6: 3153363.002 ops/s
# Warmup Iteration   7: 3135949.992 ops/s
# Warmup Iteration   8: 3171741.794 ops/s
# Warmup Iteration   9: 3174689.674 ops/s
# Warmup Iteration  10: 3148302.827 ops/s
# Warmup Iteration  11: 3155200.708 ops/s
# Warmup Iteration  12: 3156553.027 ops/s
# Warmup Iteration  13: 3155047.611 ops/s
# Warmup Iteration  14: 3162704.228 ops/s
# Warmup Iteration  15: 3146499.187 ops/s
# Warmup Iteration  16: 3157230.299 ops/s
# Warmup Iteration  17: 3157739.904 ops/s
# Warmup Iteration  18: 3163856.576 ops/s
# Warmup Iteration  19: 3173464.013 ops/s
# Warmup Iteration  20: 3155613.041 ops/s
# Warmup Iteration  21: 3162572.746 ops/s
# Warmup Iteration  22: 3166956.949 ops/s
# Warmup Iteration  23: 3163951.556 ops/s
# Warmup Iteration  24: 3162735.611 ops/s
# Warmup Iteration  25: 3164237.197 ops/s
# Warmup Iteration  26: 3155633.215 ops/s
# Warmup Iteration  27: 3170945.542 ops/s
# Warmup Iteration  28: 3162410.715 ops/s
# Warmup Iteration  29: 3162532.162 ops/s
# Warmup Iteration  30: 3164745.289 ops/s
Iteration   1: 3154284.825 ops/s
Iteration   2: 3173504.401 ops/s
Iteration   3: 3168239.602 ops/s
Iteration   4: 3168097.693 ops/s
Iteration   5: 3162200.548 ops/s
Iteration   6: 3168117.557 ops/s
Iteration   7: 3169872.496 ops/s
Iteration   8: 3173584.755 ops/s
Iteration   9: 3162945.579 ops/s
Iteration  10: 3158463.199 ops/s
Iteration  11: 3171974.490 ops/s
Iteration  12: 3170680.446 ops/s
Iteration  13: 3149860.282 ops/s
Iteration  14: 3169113.996 ops/s
Iteration  15: 3169539.510 ops/s
Iteration  16: 3174934.248 ops/s
Iteration  17: 3165909.294 ops/s
Iteration  18: 3159791.497 ops/s
Iteration  19: 3164883.211 ops/s
Iteration  20: 3166357.763 ops/s
Iteration  21: 3166613.880 ops/s
Iteration  22: 3150930.926 ops/s
Iteration  23: 3182148.835 ops/s
Iteration  24: 3191148.479 ops/s
Iteration  25: 3174941.341 ops/s
Iteration  26: 3172728.556 ops/s
Iteration  27: 3174645.012 ops/s
Iteration  28: 3165052.844 ops/s
Iteration  29: 3177567.112 ops/s
Iteration  30: 3186403.307 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_allSatisfy":
  3168817.856 ±(99.9%) 6145.993 ops/s [Average]
  (min, avg, max) = (3149860.282, 3168817.856, 3191148.479), stdev = 9199.033
  CI (99.9%): [3162671.863, 3174963.849] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_allSatisfy  thrpt   30  3168817.856 ± 6145.993  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1086703.168 ops/s
# Warmup Iteration   2: 2318562.548 ops/s
# Warmup Iteration   3: 2835390.751 ops/s
# Warmup Iteration   4: 3360044.703 ops/s
# Warmup Iteration   5: 3366398.475 ops/s
# Warmup Iteration   6: 3358942.155 ops/s
# Warmup Iteration   7: 3359439.791 ops/s
# Warmup Iteration   8: 3367715.694 ops/s
# Warmup Iteration   9: 3370029.500 ops/s
# Warmup Iteration  10: 3365818.623 ops/s
# Warmup Iteration  11: 3362912.667 ops/s
# Warmup Iteration  12: 3366170.658 ops/s
# Warmup Iteration  13: 3367631.100 ops/s
# Warmup Iteration  14: 3360481.328 ops/s
# Warmup Iteration  15: 3354547.124 ops/s
# Warmup Iteration  16: 3375361.084 ops/s
# Warmup Iteration  17: 3335701.754 ops/s
# Warmup Iteration  18: 3374599.031 ops/s
# Warmup Iteration  19: 3378366.324 ops/s
# Warmup Iteration  20: 3388694.683 ops/s
# Warmup Iteration  21: 3385844.132 ops/s
# Warmup Iteration  22: 3363500.358 ops/s
# Warmup Iteration  23: 3376277.503 ops/s
# Warmup Iteration  24: 3355533.750 ops/s
# Warmup Iteration  25: 3378207.705 ops/s
# Warmup Iteration  26: 3384895.807 ops/s
# Warmup Iteration  27: 3360687.920 ops/s
# Warmup Iteration  28: 3363348.974 ops/s
# Warmup Iteration  29: 3359320.797 ops/s
# Warmup Iteration  30: 3351388.417 ops/s
Iteration   1: 3374130.413 ops/s
Iteration   2: 3379319.922 ops/s
Iteration   3: 3341070.069 ops/s
Iteration   4: 3364822.273 ops/s
Iteration   5: 3376347.044 ops/s
Iteration   6: 3318165.230 ops/s
Iteration   7: 3375212.741 ops/s
Iteration   8: 3362691.748 ops/s
Iteration   9: 3367835.930 ops/s
Iteration  10: 3373382.965 ops/s
Iteration  11: 3376170.050 ops/s
Iteration  12: 3375132.992 ops/s
Iteration  13: 3366519.462 ops/s
Iteration  14: 3377015.409 ops/s
Iteration  15: 3372159.185 ops/s
Iteration  16: 3377078.655 ops/s
Iteration  17: 3374617.107 ops/s
Iteration  18: 3375909.164 ops/s
Iteration  19: 3363114.469 ops/s
Iteration  20: 3368274.260 ops/s
Iteration  21: 3323530.480 ops/s
Iteration  22: 3380638.079 ops/s
Iteration  23: 3385509.094 ops/s
Iteration  24: 3371065.438 ops/s
Iteration  25: 3380305.670 ops/s
Iteration  26: 3343533.461 ops/s
Iteration  27: 3372040.039 ops/s
Iteration  28: 3385839.621 ops/s
Iteration  29: 3385561.501 ops/s
Iteration  30: 3361865.068 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_anySatisfy":
  3368295.251 ±(99.9%) 11010.273 ops/s [Average]
  (min, avg, max) = (3318165.230, 3368295.251, 3385839.621), stdev = 16479.659
  CI (99.9%): [3357284.978, 3379305.524] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_anySatisfy  thrpt   30  3368295.251 ± 11010.273  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 960486.829 ops/s
# Warmup Iteration   2: 2018881.319 ops/s
# Warmup Iteration   3: 1957167.520 ops/s
# Warmup Iteration   4: 2354173.200 ops/s
# Warmup Iteration   5: 2353869.320 ops/s
# Warmup Iteration   6: 2344765.257 ops/s
# Warmup Iteration   7: 2360076.893 ops/s
# Warmup Iteration   8: 2370032.944 ops/s
# Warmup Iteration   9: 2344398.568 ops/s
# Warmup Iteration  10: 2369050.031 ops/s
# Warmup Iteration  11: 2333968.037 ops/s
# Warmup Iteration  12: 2356158.015 ops/s
# Warmup Iteration  13: 2349555.269 ops/s
# Warmup Iteration  14: 2356871.637 ops/s
# Warmup Iteration  15: 2366953.428 ops/s
# Warmup Iteration  16: 2357828.913 ops/s
# Warmup Iteration  17: 2359200.411 ops/s
# Warmup Iteration  18: 2361089.433 ops/s
# Warmup Iteration  19: 2348512.266 ops/s
# Warmup Iteration  20: 2356590.481 ops/s
# Warmup Iteration  21: 2357658.111 ops/s
# Warmup Iteration  22: 2357072.061 ops/s
# Warmup Iteration  23: 2350397.475 ops/s
# Warmup Iteration  24: 2337822.756 ops/s
# Warmup Iteration  25: 2349605.800 ops/s
# Warmup Iteration  26: 2356876.508 ops/s
# Warmup Iteration  27: 2362148.378 ops/s
# Warmup Iteration  28: 2359437.778 ops/s
# Warmup Iteration  29: 2365684.742 ops/s
# Warmup Iteration  30: 2353697.721 ops/s
Iteration   1: 2335667.155 ops/s
Iteration   2: 2338694.755 ops/s
Iteration   3: 2336963.716 ops/s
Iteration   4: 2337745.520 ops/s
Iteration   5: 2379387.283 ops/s
Iteration   6: 2314675.912 ops/s
Iteration   7: 2373152.972 ops/s
Iteration   8: 2357514.941 ops/s
Iteration   9: 2363782.233 ops/s
Iteration  10: 2355852.443 ops/s
Iteration  11: 2352052.845 ops/s
Iteration  12: 2341651.458 ops/s
Iteration  13: 2361358.763 ops/s
Iteration  14: 2357627.145 ops/s
Iteration  15: 2356892.844 ops/s
Iteration  16: 2356448.551 ops/s
Iteration  17: 2306056.867 ops/s
Iteration  18: 2343738.501 ops/s
Iteration  19: 2351816.718 ops/s
Iteration  20: 2347731.140 ops/s
Iteration  21: 2358063.164 ops/s
Iteration  22: 2355507.501 ops/s
Iteration  23: 2341413.724 ops/s
Iteration  24: 2355027.996 ops/s
Iteration  25: 2358985.887 ops/s
Iteration  26: 2363171.460 ops/s
Iteration  27: 2368811.808 ops/s
Iteration  28: 2366804.630 ops/s
Iteration  29: 2353485.812 ops/s
Iteration  30: 2371593.409 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_appendString":
  2352055.905 ±(99.9%) 10634.110 ops/s [Average]
  (min, avg, max) = (2306056.867, 2352055.905, 2379387.283), stdev = 15916.636
  CI (99.9%): [2341421.795, 2362690.015] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_appendString  thrpt   30  2352055.905 ± 10634.110  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_asLazy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_asLazy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2732317.548 ops/s
# Warmup Iteration   2: 5221063.998 ops/s
# Warmup Iteration   3: 6559254.360 ops/s
# Warmup Iteration   4: 6612093.370 ops/s
# Warmup Iteration   5: 5563378.867 ops/s
# Warmup Iteration   6: 6610101.339 ops/s
# Warmup Iteration   7: 6619052.720 ops/s
# Warmup Iteration   8: 6629966.898 ops/s
# Warmup Iteration   9: 6621854.200 ops/s
# Warmup Iteration  10: 6636283.661 ops/s
# Warmup Iteration  11: 6648386.983 ops/s
# Warmup Iteration  12: 6632711.557 ops/s
# Warmup Iteration  13: 6625093.267 ops/s
# Warmup Iteration  14: 6631535.682 ops/s
# Warmup Iteration  15: 6621772.103 ops/s
# Warmup Iteration  16: 6628786.034 ops/s
# Warmup Iteration  17: 6648828.723 ops/s
# Warmup Iteration  18: 6648934.687 ops/s
# Warmup Iteration  19: 6654337.737 ops/s
# Warmup Iteration  20: 6603212.912 ops/s
# Warmup Iteration  21: 6602452.362 ops/s
# Warmup Iteration  22: 6659447.680 ops/s
# Warmup Iteration  23: 6638871.570 ops/s
# Warmup Iteration  24: 6651181.485 ops/s
# Warmup Iteration  25: 6662506.773 ops/s
# Warmup Iteration  26: 6638365.465 ops/s
# Warmup Iteration  27: 6647556.695 ops/s
# Warmup Iteration  28: 6642461.123 ops/s
# Warmup Iteration  29: 6644363.860 ops/s
# Warmup Iteration  30: 6564539.933 ops/s
Iteration   1: 6633093.842 ops/s
Iteration   2: 6647447.469 ops/s
Iteration   3: 6656619.235 ops/s
Iteration   4: 6637125.924 ops/s
Iteration   5: 6637019.118 ops/s
Iteration   6: 6649920.240 ops/s
Iteration   7: 6652580.238 ops/s
Iteration   8: 6642186.489 ops/s
Iteration   9: 6634364.729 ops/s
Iteration  10: 6678475.435 ops/s
Iteration  11: 6668680.891 ops/s
Iteration  12: 6643527.702 ops/s
Iteration  13: 6656405.346 ops/s
Iteration  14: 6653190.110 ops/s
Iteration  15: 6647979.543 ops/s
Iteration  16: 6636928.183 ops/s
Iteration  17: 6637544.138 ops/s
Iteration  18: 6652659.404 ops/s
Iteration  19: 6634122.140 ops/s
Iteration  20: 6637375.304 ops/s
Iteration  21: 6662550.535 ops/s
Iteration  22: 6668428.701 ops/s
Iteration  23: 6629560.422 ops/s
Iteration  24: 6639335.620 ops/s
Iteration  25: 6664006.533 ops/s
Iteration  26: 6610882.836 ops/s
Iteration  27: 6634823.489 ops/s
Iteration  28: 6663519.766 ops/s
Iteration  29: 6652767.966 ops/s
Iteration  30: 6666033.037 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_asLazy":
  6647638.479 ±(99.9%) 9807.966 ops/s [Average]
  (min, avg, max) = (6610882.836, 6647638.479, 6678475.435), stdev = 14680.103
  CI (99.9%): [6637830.513, 6657446.446] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_asLazy  thrpt   30  6647638.479 ± 9807.966  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_asSynchronized$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_asSynchronized

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6694258.875 ops/s
# Warmup Iteration   2: 11176544.636 ops/s
# Warmup Iteration   3: 12911238.179 ops/s
# Warmup Iteration   4: 13188613.563 ops/s
# Warmup Iteration   5: 13122449.879 ops/s
# Warmup Iteration   6: 13197836.265 ops/s
# Warmup Iteration   7: 13170219.522 ops/s
# Warmup Iteration   8: 13126211.273 ops/s
# Warmup Iteration   9: 13202966.332 ops/s
# Warmup Iteration  10: 13187550.974 ops/s
# Warmup Iteration  11: 13144182.606 ops/s
# Warmup Iteration  12: 13162428.397 ops/s
# Warmup Iteration  13: 13153274.021 ops/s
# Warmup Iteration  14: 13142317.783 ops/s
# Warmup Iteration  15: 13172060.686 ops/s
# Warmup Iteration  16: 13130565.827 ops/s
# Warmup Iteration  17: 13125947.449 ops/s
# Warmup Iteration  18: 13144490.309 ops/s
# Warmup Iteration  19: 13167320.861 ops/s
# Warmup Iteration  20: 13213253.601 ops/s
# Warmup Iteration  21: 13144368.045 ops/s
# Warmup Iteration  22: 13102075.327 ops/s
# Warmup Iteration  23: 13156275.459 ops/s
# Warmup Iteration  24: 13143481.188 ops/s
# Warmup Iteration  25: 13154966.271 ops/s
# Warmup Iteration  26: 13168888.413 ops/s
# Warmup Iteration  27: 13115664.143 ops/s
# Warmup Iteration  28: 13163798.079 ops/s
# Warmup Iteration  29: 13140189.095 ops/s
# Warmup Iteration  30: 13066541.615 ops/s
Iteration   1: 13165834.766 ops/s
Iteration   2: 13171356.778 ops/s
Iteration   3: 13159155.752 ops/s
Iteration   4: 13047466.577 ops/s
Iteration   5: 13146018.282 ops/s
Iteration   6: 13166075.342 ops/s
Iteration   7: 13194983.812 ops/s
Iteration   8: 13134445.991 ops/s
Iteration   9: 13144651.828 ops/s
Iteration  10: 13080480.392 ops/s
Iteration  11: 13149517.143 ops/s
Iteration  12: 13164068.953 ops/s
Iteration  13: 13195925.396 ops/s
Iteration  14: 13227375.321 ops/s
Iteration  15: 13112462.849 ops/s
Iteration  16: 13078060.315 ops/s
Iteration  17: 13180454.829 ops/s
Iteration  18: 13168470.166 ops/s
Iteration  19: 12920551.917 ops/s
Iteration  20: 13157734.245 ops/s
Iteration  21: 13099562.776 ops/s
Iteration  22: 13141583.715 ops/s
Iteration  23: 13029146.216 ops/s
Iteration  24: 13166658.129 ops/s
Iteration  25: 13177346.576 ops/s
Iteration  26: 13086899.563 ops/s
Iteration  27: 13135623.167 ops/s
Iteration  28: 13157865.807 ops/s
Iteration  29: 13142942.858 ops/s
Iteration  30: 13116772.010 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_asSynchronized":
  13133983.049 ±(99.9%) 39915.956 ops/s [Average]
  (min, avg, max) = (12920551.917, 13133983.049, 13227375.321), stdev = 59744.328
  CI (99.9%): [13094067.093, 13173899.005] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt         Score       Error  Units
SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_asSynchronized  thrpt   30  13133983.049 ± 39915.956  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_asUnmodifiable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_asUnmodifiable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3847460.101 ops/s
# Warmup Iteration   2: 7965538.661 ops/s
# Warmup Iteration   3: 9073621.825 ops/s
# Warmup Iteration   4: 10644421.645 ops/s
# Warmup Iteration   5: 10592791.435 ops/s
# Warmup Iteration   6: 10633996.620 ops/s
# Warmup Iteration   7: 10682371.028 ops/s
# Warmup Iteration   8: 10658213.452 ops/s
# Warmup Iteration   9: 10662104.621 ops/s
# Warmup Iteration  10: 10687023.140 ops/s
# Warmup Iteration  11: 10623471.926 ops/s
# Warmup Iteration  12: 10668316.531 ops/s
# Warmup Iteration  13: 10678355.527 ops/s
# Warmup Iteration  14: 10666528.162 ops/s
# Warmup Iteration  15: 10612139.710 ops/s
# Warmup Iteration  16: 10660496.608 ops/s
# Warmup Iteration  17: 10608031.209 ops/s
# Warmup Iteration  18: 10618666.094 ops/s
# Warmup Iteration  19: 10626520.189 ops/s
# Warmup Iteration  20: 10581009.750 ops/s
# Warmup Iteration  21: 10622296.092 ops/s
# Warmup Iteration  22: 10510622.209 ops/s
# Warmup Iteration  23: 10602189.176 ops/s
# Warmup Iteration  24: 10616827.808 ops/s
# Warmup Iteration  25: 10618889.660 ops/s
# Warmup Iteration  26: 10586623.460 ops/s
# Warmup Iteration  27: 10606665.513 ops/s
# Warmup Iteration  28: 10573589.573 ops/s
# Warmup Iteration  29: 10622201.463 ops/s
# Warmup Iteration  30: 10626720.672 ops/s
Iteration   1: 10583757.196 ops/s
Iteration   2: 10597312.431 ops/s
Iteration   3: 10575236.437 ops/s
Iteration   4: 10621097.997 ops/s
Iteration   5: 10614004.732 ops/s
Iteration   6: 10599826.881 ops/s
Iteration   7: 10601304.404 ops/s
Iteration   8: 10606982.728 ops/s
Iteration   9: 10614935.925 ops/s
Iteration  10: 10607341.686 ops/s
Iteration  11: 10621229.451 ops/s
Iteration  12: 10601914.148 ops/s
Iteration  13: 10626104.048 ops/s
Iteration  14: 10582830.535 ops/s
Iteration  15: 10592942.577 ops/s
Iteration  16: 10594295.420 ops/s
Iteration  17: 10606569.767 ops/s
Iteration  18: 10629554.891 ops/s
Iteration  19: 10580591.540 ops/s
Iteration  20: 10591807.003 ops/s
Iteration  21: 10627095.962 ops/s
Iteration  22: 10613030.257 ops/s
Iteration  23: 10582293.337 ops/s
Iteration  24: 10584141.377 ops/s
Iteration  25: 10568916.834 ops/s
Iteration  26: 10601495.075 ops/s
Iteration  27: 10642066.676 ops/s
Iteration  28: 10584728.373 ops/s
Iteration  29: 10574157.240 ops/s
Iteration  30: 10605335.836 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_asUnmodifiable":
  10601096.692 ±(99.9%) 12298.674 ops/s [Average]
  (min, avg, max) = (10568916.834, 10601096.692, 10642066.676), stdev = 18408.077
  CI (99.9%): [10588798.018, 10613395.366] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt         Score       Error  Units
SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_asUnmodifiable  thrpt   30  10601096.692 ± 12298.674  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_booleanIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_booleanIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4843084.141 ops/s
# Warmup Iteration   2: 10955358.810 ops/s
# Warmup Iteration   3: 8985337.752 ops/s
# Warmup Iteration   4: 10691225.575 ops/s
# Warmup Iteration   5: 10716713.928 ops/s
# Warmup Iteration   6: 10696573.210 ops/s
# Warmup Iteration   7: 10687755.599 ops/s
# Warmup Iteration   8: 10678734.592 ops/s
# Warmup Iteration   9: 10706631.524 ops/s
# Warmup Iteration  10: 10659453.131 ops/s
# Warmup Iteration  11: 10676459.197 ops/s
# Warmup Iteration  12: 10692314.164 ops/s
# Warmup Iteration  13: 10681977.522 ops/s
# Warmup Iteration  14: 10674620.809 ops/s
# Warmup Iteration  15: 10575194.819 ops/s
# Warmup Iteration  16: 10633374.603 ops/s
# Warmup Iteration  17: 10687241.929 ops/s
# Warmup Iteration  18: 10685922.817 ops/s
# Warmup Iteration  19: 10677524.647 ops/s
# Warmup Iteration  20: 10731232.654 ops/s
# Warmup Iteration  21: 10614262.250 ops/s
# Warmup Iteration  22: 10713583.921 ops/s
# Warmup Iteration  23: 10694790.141 ops/s
# Warmup Iteration  24: 10662825.482 ops/s
# Warmup Iteration  25: 10710249.561 ops/s
# Warmup Iteration  26: 10702024.487 ops/s
# Warmup Iteration  27: 10687036.264 ops/s
# Warmup Iteration  28: 10710264.840 ops/s
# Warmup Iteration  29: 10665692.105 ops/s
# Warmup Iteration  30: 10683882.007 ops/s
Iteration   1: 10659552.620 ops/s
Iteration   2: 10678495.050 ops/s
Iteration   3: 10482393.567 ops/s
Iteration   4: 10713635.397 ops/s
Iteration   5: 10670440.271 ops/s
Iteration   6: 10713355.381 ops/s
Iteration   7: 10713868.515 ops/s
Iteration   8: 10647796.735 ops/s
Iteration   9: 10700060.628 ops/s
Iteration  10: 10664796.344 ops/s
Iteration  11: 10686072.821 ops/s
Iteration  12: 10725179.093 ops/s
Iteration  13: 10716519.810 ops/s
Iteration  14: 10674580.329 ops/s
Iteration  15: 10522075.444 ops/s
Iteration  16: 10719499.481 ops/s
Iteration  17: 10701375.131 ops/s
Iteration  18: 10692233.999 ops/s
Iteration  19: 10728146.927 ops/s
Iteration  20: 10675880.339 ops/s
Iteration  21: 10708084.465 ops/s
Iteration  22: 10713089.505 ops/s
Iteration  23: 10717670.758 ops/s
Iteration  24: 10698924.587 ops/s
Iteration  25: 10681917.350 ops/s
Iteration  26: 10688781.697 ops/s
Iteration  27: 10712298.085 ops/s
Iteration  28: 10679279.175 ops/s
Iteration  29: 10685295.993 ops/s
Iteration  30: 10684651.978 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_booleanIterator":
  10681865.049 ±(99.9%) 35577.920 ops/s [Average]
  (min, avg, max) = (10482393.567, 10681865.049, 10728146.927), stdev = 53251.360
  CI (99.9%): [10646287.129, 10717442.969] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt         Score       Error  Units
SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_booleanIterator  thrpt   30  10681865.049 ± 35577.920  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 532772.625 ops/s
# Warmup Iteration   2: 748617.661 ops/s
# Warmup Iteration   3: 885333.947 ops/s
# Warmup Iteration   4: 882586.045 ops/s
# Warmup Iteration   5: 884460.800 ops/s
# Warmup Iteration   6: 884948.919 ops/s
# Warmup Iteration   7: 762210.622 ops/s
# Warmup Iteration   8: 867640.833 ops/s
# Warmup Iteration   9: 886845.349 ops/s
# Warmup Iteration  10: 884439.429 ops/s
# Warmup Iteration  11: 884890.503 ops/s
# Warmup Iteration  12: 886948.576 ops/s
# Warmup Iteration  13: 884787.590 ops/s
# Warmup Iteration  14: 884402.528 ops/s
# Warmup Iteration  15: 884076.341 ops/s
# Warmup Iteration  16: 879126.179 ops/s
# Warmup Iteration  17: 935411.968 ops/s
# Warmup Iteration  18: 934226.912 ops/s
# Warmup Iteration  19: 933744.661 ops/s
# Warmup Iteration  20: 932719.330 ops/s
# Warmup Iteration  21: 931918.790 ops/s
# Warmup Iteration  22: 934566.752 ops/s
# Warmup Iteration  23: 926918.818 ops/s
# Warmup Iteration  24: 933068.025 ops/s
# Warmup Iteration  25: 934430.020 ops/s
# Warmup Iteration  26: 927706.132 ops/s
# Warmup Iteration  27: 934625.376 ops/s
# Warmup Iteration  28: 936139.361 ops/s
# Warmup Iteration  29: 931915.839 ops/s
# Warmup Iteration  30: 933967.290 ops/s
Iteration   1: 933808.122 ops/s
Iteration   2: 931845.545 ops/s
Iteration   3: 937247.579 ops/s
Iteration   4: 932347.527 ops/s
Iteration   5: 931429.291 ops/s
Iteration   6: 933868.996 ops/s
Iteration   7: 930563.203 ops/s
Iteration   8: 927006.399 ops/s
Iteration   9: 930223.413 ops/s
Iteration  10: 933325.038 ops/s
Iteration  11: 932929.711 ops/s
Iteration  12: 934839.283 ops/s
Iteration  13: 932601.075 ops/s
Iteration  14: 932052.441 ops/s
Iteration  15: 935554.270 ops/s
Iteration  16: 934049.065 ops/s
Iteration  17: 929778.064 ops/s
Iteration  18: 934086.424 ops/s
Iteration  19: 933078.769 ops/s
Iteration  20: 933937.946 ops/s
Iteration  21: 935022.298 ops/s
Iteration  22: 932257.288 ops/s
Iteration  23: 934244.075 ops/s
Iteration  24: 935826.387 ops/s
Iteration  25: 933053.299 ops/s
Iteration  26: 931920.220 ops/s
Iteration  27: 931491.319 ops/s
Iteration  28: 933954.893 ops/s
Iteration  29: 931220.486 ops/s
Iteration  30: 931318.917 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove":
  932829.378 ±(99.9%) 1367.663 ops/s [Average]
  (min, avg, max) = (927006.399, 932829.378, 937247.579), stdev = 2047.054
  CI (99.9%): [931461.715, 934197.041] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt       Score      Error  Units
SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove  thrpt   30  932829.378 ± 1367.663  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_chunk$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_chunk

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 134984.785 ops/s
# Warmup Iteration   2: 229586.000 ops/s
# Warmup Iteration   3: 263648.825 ops/s
# Warmup Iteration   4: 264518.634 ops/s
# Warmup Iteration   5: 264032.737 ops/s
# Warmup Iteration   6: 222801.748 ops/s
# Warmup Iteration   7: 264124.182 ops/s
# Warmup Iteration   8: 262124.100 ops/s
# Warmup Iteration   9: 263830.185 ops/s
# Warmup Iteration  10: 264934.703 ops/s
# Warmup Iteration  11: 264338.645 ops/s
# Warmup Iteration  12: 264517.180 ops/s
# Warmup Iteration  13: 264343.900 ops/s
# Warmup Iteration  14: 264682.363 ops/s
# Warmup Iteration  15: 263959.849 ops/s
# Warmup Iteration  16: 263705.827 ops/s
# Warmup Iteration  17: 272484.267 ops/s
# Warmup Iteration  18: 271714.656 ops/s
# Warmup Iteration  19: 272398.043 ops/s
# Warmup Iteration  20: 272549.257 ops/s
# Warmup Iteration  21: 272275.862 ops/s
# Warmup Iteration  22: 272633.921 ops/s
# Warmup Iteration  23: 272433.454 ops/s
# Warmup Iteration  24: 273068.827 ops/s
# Warmup Iteration  25: 272405.610 ops/s
# Warmup Iteration  26: 272205.837 ops/s
# Warmup Iteration  27: 272168.519 ops/s
# Warmup Iteration  28: 272790.960 ops/s
# Warmup Iteration  29: 272682.958 ops/s
# Warmup Iteration  30: 272694.140 ops/s
Iteration   1: 272303.581 ops/s
Iteration   2: 272413.152 ops/s
Iteration   3: 271610.349 ops/s
Iteration   4: 272861.169 ops/s
Iteration   5: 272284.984 ops/s
Iteration   6: 272894.960 ops/s
Iteration   7: 272909.325 ops/s
Iteration   8: 272558.494 ops/s
Iteration   9: 272047.184 ops/s
Iteration  10: 272197.910 ops/s
Iteration  11: 272909.112 ops/s
Iteration  12: 271904.289 ops/s
Iteration  13: 272704.720 ops/s
Iteration  14: 272300.537 ops/s
Iteration  15: 272288.216 ops/s
Iteration  16: 273500.829 ops/s
Iteration  17: 272470.000 ops/s
Iteration  18: 272489.324 ops/s
Iteration  19: 272525.309 ops/s
Iteration  20: 272126.479 ops/s
Iteration  21: 272108.184 ops/s
Iteration  22: 272373.809 ops/s
Iteration  23: 272541.712 ops/s
Iteration  24: 272861.990 ops/s
Iteration  25: 272380.825 ops/s
Iteration  26: 271306.188 ops/s
Iteration  27: 272481.437 ops/s
Iteration  28: 272313.918 ops/s
Iteration  29: 273071.430 ops/s
Iteration  30: 272185.681 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_chunk":
  272430.837 ±(99.9%) 290.630 ops/s [Average]
  (min, avg, max) = (271306.188, 272430.837, 273500.829), stdev = 435.002
  CI (99.9%): [272140.206, 272721.467] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score     Error  Units
SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_chunk  thrpt   30  272430.837 ± 290.630  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4226551.912 ops/s
# Warmup Iteration   2: 7332460.875 ops/s
# Warmup Iteration   3: 8743878.988 ops/s
# Warmup Iteration   4: 8672358.574 ops/s
# Warmup Iteration   5: 8732271.185 ops/s
# Warmup Iteration   6: 8785561.232 ops/s
# Warmup Iteration   7: 8744825.425 ops/s
# Warmup Iteration   8: 8684833.197 ops/s
# Warmup Iteration   9: 8725820.415 ops/s
# Warmup Iteration  10: 8724429.304 ops/s
# Warmup Iteration  11: 8796151.697 ops/s
# Warmup Iteration  12: 8788196.560 ops/s
# Warmup Iteration  13: 8659070.264 ops/s
# Warmup Iteration  14: 8754143.199 ops/s
# Warmup Iteration  15: 8721821.533 ops/s
# Warmup Iteration  16: 8749444.610 ops/s
# Warmup Iteration  17: 8770063.261 ops/s
# Warmup Iteration  18: 8751522.060 ops/s
# Warmup Iteration  19: 8762135.303 ops/s
# Warmup Iteration  20: 8744781.120 ops/s
# Warmup Iteration  21: 8734561.097 ops/s
# Warmup Iteration  22: 8761887.654 ops/s
# Warmup Iteration  23: 8796581.839 ops/s
# Warmup Iteration  24: 8665788.559 ops/s
# Warmup Iteration  25: 8725055.959 ops/s
# Warmup Iteration  26: 8741597.976 ops/s
# Warmup Iteration  27: 8745436.356 ops/s
# Warmup Iteration  28: 8761858.009 ops/s
# Warmup Iteration  29: 8737452.237 ops/s
# Warmup Iteration  30: 8754343.691 ops/s
Iteration   1: 8769658.230 ops/s
Iteration   2: 8793841.082 ops/s
Iteration   3: 8766496.145 ops/s
Iteration   4: 8708535.579 ops/s
Iteration   5: 8747028.742 ops/s
Iteration   6: 8766999.564 ops/s
Iteration   7: 8773700.338 ops/s
Iteration   8: 8734224.515 ops/s
Iteration   9: 8746230.834 ops/s
Iteration  10: 8699147.818 ops/s
Iteration  11: 8759935.692 ops/s
Iteration  12: 8789206.376 ops/s
Iteration  13: 8721542.748 ops/s
Iteration  14: 8689901.686 ops/s
Iteration  15: 8709968.069 ops/s
Iteration  16: 8770065.534 ops/s
Iteration  17: 8753135.788 ops/s
Iteration  18: 8757406.899 ops/s
Iteration  19: 8735858.990 ops/s
Iteration  20: 8750129.952 ops/s
Iteration  21: 8739344.948 ops/s
Iteration  22: 8771248.447 ops/s
Iteration  23: 8630252.717 ops/s
Iteration  24: 8748886.886 ops/s
Iteration  25: 8562759.595 ops/s
Iteration  26: 8565632.686 ops/s
Iteration  27: 8731366.394 ops/s
Iteration  28: 8763679.427 ops/s
Iteration  29: 8772256.072 ops/s
Iteration  30: 8753789.650 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_clear":
  8732741.047 ±(99.9%) 37712.556 ops/s [Average]
  (min, avg, max) = (8562759.595, 8732741.047, 8793841.082), stdev = 56446.382
  CI (99.9%): [8695028.491, 8770453.602] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_clear  thrpt   30  8732741.047 ± 37712.556  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 692153.483 ops/s
# Warmup Iteration   2: 1803630.420 ops/s
# Warmup Iteration   3: 1884672.853 ops/s
# Warmup Iteration   4: 1564095.053 ops/s
# Warmup Iteration   5: 1890757.551 ops/s
# Warmup Iteration   6: 1888238.160 ops/s
# Warmup Iteration   7: 1874596.924 ops/s
# Warmup Iteration   8: 1886156.480 ops/s
# Warmup Iteration   9: 1860853.649 ops/s
# Warmup Iteration  10: 1878950.917 ops/s
# Warmup Iteration  11: 1889452.200 ops/s
# Warmup Iteration  12: 1888944.092 ops/s
# Warmup Iteration  13: 1887681.994 ops/s
# Warmup Iteration  14: 1872113.775 ops/s
# Warmup Iteration  15: 1885200.560 ops/s
# Warmup Iteration  16: 1875804.678 ops/s
# Warmup Iteration  17: 1884523.319 ops/s
# Warmup Iteration  18: 1886179.748 ops/s
# Warmup Iteration  19: 1887551.155 ops/s
# Warmup Iteration  20: 1885795.285 ops/s
# Warmup Iteration  21: 1885965.248 ops/s
# Warmup Iteration  22: 1885822.213 ops/s
# Warmup Iteration  23: 1882691.022 ops/s
# Warmup Iteration  24: 1864073.615 ops/s
# Warmup Iteration  25: 1888794.798 ops/s
# Warmup Iteration  26: 1869352.746 ops/s
# Warmup Iteration  27: 1885780.694 ops/s
# Warmup Iteration  28: 1887234.479 ops/s
# Warmup Iteration  29: 1884172.732 ops/s
# Warmup Iteration  30: 1886709.743 ops/s
Iteration   1: 1885977.127 ops/s
Iteration   2: 1881223.809 ops/s
Iteration   3: 1888135.215 ops/s
Iteration   4: 1890210.266 ops/s
Iteration   5: 1885209.657 ops/s
Iteration   6: 1886556.563 ops/s
Iteration   7: 1883163.957 ops/s
Iteration   8: 1879749.535 ops/s
Iteration   9: 1884144.705 ops/s
Iteration  10: 1887648.594 ops/s
Iteration  11: 1889371.976 ops/s
Iteration  12: 1886569.956 ops/s
Iteration  13: 1883006.751 ops/s
Iteration  14: 1887139.869 ops/s
Iteration  15: 1881285.486 ops/s
Iteration  16: 1887503.864 ops/s
Iteration  17: 1887704.625 ops/s
Iteration  18: 1887551.164 ops/s
Iteration  19: 1886765.774 ops/s
Iteration  20: 1887659.147 ops/s
Iteration  21: 1885242.817 ops/s
Iteration  22: 1887182.236 ops/s
Iteration  23: 1887713.579 ops/s
Iteration  24: 1881309.926 ops/s
Iteration  25: 1865677.228 ops/s
Iteration  26: 1887074.626 ops/s
Iteration  27: 1882467.122 ops/s
Iteration  28: 1879816.571 ops/s
Iteration  29: 1881530.763 ops/s
Iteration  30: 1887066.727 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_collect":
  1884721.988 ±(99.9%) 3084.966 ops/s [Average]
  (min, avg, max) = (1865677.228, 1884721.988, 1890210.266), stdev = 4617.432
  CI (99.9%): [1881637.022, 1887806.954] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_collect  thrpt   30  1884721.988 ± 3084.966  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1849276.631 ops/s
# Warmup Iteration   2: 3943411.054 ops/s
# Warmup Iteration   3: 4756824.063 ops/s
# Warmup Iteration   4: 5649202.884 ops/s
# Warmup Iteration   5: 5641957.506 ops/s
# Warmup Iteration   6: 5637153.079 ops/s
# Warmup Iteration   7: 5639108.003 ops/s
# Warmup Iteration   8: 5643962.925 ops/s
# Warmup Iteration   9: 5652991.991 ops/s
# Warmup Iteration  10: 5650462.454 ops/s
# Warmup Iteration  11: 5633312.841 ops/s
# Warmup Iteration  12: 5650636.489 ops/s
# Warmup Iteration  13: 5644055.693 ops/s
# Warmup Iteration  14: 5651430.524 ops/s
# Warmup Iteration  15: 5639201.838 ops/s
# Warmup Iteration  16: 5650297.764 ops/s
# Warmup Iteration  17: 5650378.991 ops/s
# Warmup Iteration  18: 5596995.493 ops/s
# Warmup Iteration  19: 5642611.573 ops/s
# Warmup Iteration  20: 5653105.076 ops/s
# Warmup Iteration  21: 5637365.282 ops/s
# Warmup Iteration  22: 5638972.750 ops/s
# Warmup Iteration  23: 5651295.494 ops/s
# Warmup Iteration  24: 5635947.077 ops/s
# Warmup Iteration  25: 5646957.295 ops/s
# Warmup Iteration  26: 5657031.530 ops/s
# Warmup Iteration  27: 5655490.233 ops/s
# Warmup Iteration  28: 5622920.134 ops/s
# Warmup Iteration  29: 5648354.977 ops/s
# Warmup Iteration  30: 5641905.588 ops/s
Iteration   1: 5641395.574 ops/s
Iteration   2: 5653288.399 ops/s
Iteration   3: 5653735.763 ops/s
Iteration   4: 5670534.271 ops/s
Iteration   5: 5645693.661 ops/s
Iteration   6: 5619782.224 ops/s
Iteration   7: 5642741.309 ops/s
Iteration   8: 5613725.181 ops/s
Iteration   9: 5622390.866 ops/s
Iteration  10: 5628872.847 ops/s
Iteration  11: 5648571.437 ops/s
Iteration  12: 5645482.270 ops/s
Iteration  13: 5664292.522 ops/s
Iteration  14: 5569987.938 ops/s
Iteration  15: 5552784.893 ops/s
Iteration  16: 5635905.948 ops/s
Iteration  17: 5653021.246 ops/s
Iteration  18: 5655730.988 ops/s
Iteration  19: 5671214.733 ops/s
Iteration  20: 5648727.392 ops/s
Iteration  21: 5643894.509 ops/s
Iteration  22: 5623956.220 ops/s
Iteration  23: 5634454.484 ops/s
Iteration  24: 5671034.206 ops/s
Iteration  25: 5610263.926 ops/s
Iteration  26: 5644927.498 ops/s
Iteration  27: 5618805.807 ops/s
Iteration  28: 5642226.073 ops/s
Iteration  29: 5637715.786 ops/s
Iteration  30: 5647694.563 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_contains":
  5637095.084 ±(99.9%) 17545.061 ops/s [Average]
  (min, avg, max) = (5552784.893, 5637095.084, 5671214.733), stdev = 26260.624
  CI (99.9%): [5619550.023, 5654640.146] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_contains  thrpt   30  5637095.084 ± 17545.061  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6476870.151 ops/s
# Warmup Iteration   2: 11021760.556 ops/s
# Warmup Iteration   3: 13076916.578 ops/s
# Warmup Iteration   4: 13005043.536 ops/s
# Warmup Iteration   5: 13037099.645 ops/s
# Warmup Iteration   6: 13010215.657 ops/s
# Warmup Iteration   7: 13051363.357 ops/s
# Warmup Iteration   8: 13091048.938 ops/s
# Warmup Iteration   9: 13041786.441 ops/s
# Warmup Iteration  10: 13037856.231 ops/s
# Warmup Iteration  11: 13076645.080 ops/s
# Warmup Iteration  12: 12948407.004 ops/s
# Warmup Iteration  13: 13044258.242 ops/s
# Warmup Iteration  14: 13103714.066 ops/s
# Warmup Iteration  15: 13006564.539 ops/s
# Warmup Iteration  16: 12916958.525 ops/s
# Warmup Iteration  17: 13051996.863 ops/s
# Warmup Iteration  18: 12993868.269 ops/s
# Warmup Iteration  19: 13044006.941 ops/s
# Warmup Iteration  20: 13031204.476 ops/s
# Warmup Iteration  21: 13037237.399 ops/s
# Warmup Iteration  22: 13062409.701 ops/s
# Warmup Iteration  23: 13040260.647 ops/s
# Warmup Iteration  24: 13055982.904 ops/s
# Warmup Iteration  25: 13111519.469 ops/s
# Warmup Iteration  26: 13076798.972 ops/s
# Warmup Iteration  27: 13122376.440 ops/s
# Warmup Iteration  28: 13080165.520 ops/s
# Warmup Iteration  29: 12985034.375 ops/s
# Warmup Iteration  30: 13111528.353 ops/s
Iteration   1: 13064546.413 ops/s
Iteration   2: 12992657.659 ops/s
Iteration   3: 12909372.329 ops/s
Iteration   4: 12991522.427 ops/s
Iteration   5: 13118541.119 ops/s
Iteration   6: 13079177.304 ops/s
Iteration   7: 13052148.783 ops/s
Iteration   8: 13119286.358 ops/s
Iteration   9: 13107855.413 ops/s
Iteration  10: 13109336.839 ops/s
Iteration  11: 13025514.254 ops/s
Iteration  12: 12876123.649 ops/s
Iteration  13: 12924071.404 ops/s
Iteration  14: 12910536.201 ops/s
Iteration  15: 12897521.819 ops/s
Iteration  16: 12952905.555 ops/s
Iteration  17: 13026274.505 ops/s
Iteration  18: 13108465.254 ops/s
Iteration  19: 13106749.298 ops/s
Iteration  20: 13086040.533 ops/s
Iteration  21: 13105427.290 ops/s
Iteration  22: 13096321.341 ops/s
Iteration  23: 13020222.980 ops/s
Iteration  24: 12980501.895 ops/s
Iteration  25: 13049376.319 ops/s
Iteration  26: 13008667.275 ops/s
Iteration  27: 12948329.398 ops/s
Iteration  28: 12986418.265 ops/s
Iteration  29: 13032678.554 ops/s
Iteration  30: 13127134.695 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_containsAllArray":
  13027124.171 ±(99.9%) 50974.095 ops/s [Average]
  (min, avg, max) = (12876123.649, 13027124.171, 13127134.695), stdev = 76295.631
  CI (99.9%): [12976150.076, 13078098.266] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt         Score       Error  Units
SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_containsAllArray  thrpt   30  13027124.171 ± 50974.095  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4024368.889 ops/s
# Warmup Iteration   2: 7404475.763 ops/s
# Warmup Iteration   3: 8681952.633 ops/s
# Warmup Iteration   4: 8713245.144 ops/s
# Warmup Iteration   5: 8690975.540 ops/s
# Warmup Iteration   6: 8748166.419 ops/s
# Warmup Iteration   7: 8751498.870 ops/s
# Warmup Iteration   8: 8711880.135 ops/s
# Warmup Iteration   9: 8706006.401 ops/s
# Warmup Iteration  10: 8674014.183 ops/s
# Warmup Iteration  11: 8746467.654 ops/s
# Warmup Iteration  12: 8704239.137 ops/s
# Warmup Iteration  13: 8707902.308 ops/s
# Warmup Iteration  14: 8678096.162 ops/s
# Warmup Iteration  15: 8765826.515 ops/s
# Warmup Iteration  16: 8756878.535 ops/s
# Warmup Iteration  17: 8686279.822 ops/s
# Warmup Iteration  18: 8709812.190 ops/s
# Warmup Iteration  19: 8684421.845 ops/s
# Warmup Iteration  20: 8731688.516 ops/s
# Warmup Iteration  21: 8757967.422 ops/s
# Warmup Iteration  22: 8735302.978 ops/s
# Warmup Iteration  23: 8730578.853 ops/s
# Warmup Iteration  24: 8706143.363 ops/s
# Warmup Iteration  25: 8738590.514 ops/s
# Warmup Iteration  26: 8729440.100 ops/s
# Warmup Iteration  27: 8709015.701 ops/s
# Warmup Iteration  28: 8721124.793 ops/s
# Warmup Iteration  29: 8738532.208 ops/s
# Warmup Iteration  30: 8731466.516 ops/s
Iteration   1: 8721182.611 ops/s
Iteration   2: 8710825.272 ops/s
Iteration   3: 8743178.487 ops/s
Iteration   4: 8731869.910 ops/s
Iteration   5: 8710726.702 ops/s
Iteration   6: 8716256.928 ops/s
Iteration   7: 8611779.403 ops/s
Iteration   8: 8665019.808 ops/s
Iteration   9: 8745674.718 ops/s
Iteration  10: 8747866.028 ops/s
Iteration  11: 8726584.383 ops/s
Iteration  12: 8742053.429 ops/s
Iteration  13: 8730113.647 ops/s
Iteration  14: 8686243.428 ops/s
Iteration  15: 8726631.398 ops/s
Iteration  16: 8734298.023 ops/s
Iteration  17: 8744188.417 ops/s
Iteration  18: 8726325.472 ops/s
Iteration  19: 8755993.766 ops/s
Iteration  20: 8750246.322 ops/s
Iteration  21: 8726542.118 ops/s
Iteration  22: 8740550.041 ops/s
Iteration  23: 8761758.156 ops/s
Iteration  24: 8597518.166 ops/s
Iteration  25: 8705612.735 ops/s
Iteration  26: 8736876.747 ops/s
Iteration  27: 8727555.358 ops/s
Iteration  28: 8711371.821 ops/s
Iteration  29: 8728915.185 ops/s
Iteration  30: 8736068.105 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_containsAllIterable":
  8719994.219 ±(99.9%) 24832.000 ops/s [Average]
  (min, avg, max) = (8597518.166, 8719994.219, 8761758.156), stdev = 37167.371
  CI (99.9%): [8695162.220, 8744826.219] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_containsAllIterable  thrpt   30  8719994.219 ± 24832.000  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_containsAnyArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_containsAnyArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1070055.641 ops/s
# Warmup Iteration   2: 2350275.258 ops/s
# Warmup Iteration   3: 4371286.181 ops/s
# Warmup Iteration   4: 4150736.921 ops/s
# Warmup Iteration   5: 4675082.572 ops/s
# Warmup Iteration   6: 4652951.970 ops/s
# Warmup Iteration   7: 4657892.785 ops/s
# Warmup Iteration   8: 4668681.879 ops/s
# Warmup Iteration   9: 4647312.213 ops/s
# Warmup Iteration  10: 4658478.974 ops/s
# Warmup Iteration  11: 4659535.917 ops/s
# Warmup Iteration  12: 4652541.598 ops/s
# Warmup Iteration  13: 4657958.538 ops/s
# Warmup Iteration  14: 4661525.566 ops/s
# Warmup Iteration  15: 4663468.717 ops/s
# Warmup Iteration  16: 4644033.546 ops/s
# Warmup Iteration  17: 4651061.840 ops/s
# Warmup Iteration  18: 4644182.564 ops/s
# Warmup Iteration  19: 4658306.078 ops/s
# Warmup Iteration  20: 4651035.900 ops/s
# Warmup Iteration  21: 4648598.168 ops/s
# Warmup Iteration  22: 4623257.127 ops/s
# Warmup Iteration  23: 4648249.970 ops/s
# Warmup Iteration  24: 4656249.921 ops/s
# Warmup Iteration  25: 4657264.608 ops/s
# Warmup Iteration  26: 4655956.548 ops/s
# Warmup Iteration  27: 4666359.501 ops/s
# Warmup Iteration  28: 4646158.221 ops/s
# Warmup Iteration  29: 4651634.583 ops/s
# Warmup Iteration  30: 4665097.209 ops/s
Iteration   1: 4586337.565 ops/s
Iteration   2: 4667618.188 ops/s
Iteration   3: 4656532.024 ops/s
Iteration   4: 4663482.499 ops/s
Iteration   5: 4658564.140 ops/s
Iteration   6: 4653067.915 ops/s
Iteration   7: 4682459.123 ops/s
Iteration   8: 4661580.163 ops/s
Iteration   9: 4645335.968 ops/s
Iteration  10: 4655186.696 ops/s
Iteration  11: 4663373.050 ops/s
Iteration  12: 4649648.825 ops/s
Iteration  13: 4647852.709 ops/s
Iteration  14: 4663350.971 ops/s
Iteration  15: 4644672.825 ops/s
Iteration  16: 4662922.746 ops/s
Iteration  17: 4663808.230 ops/s
Iteration  18: 4660587.832 ops/s
Iteration  19: 4649204.558 ops/s
Iteration  20: 4649624.681 ops/s
Iteration  21: 4594261.844 ops/s
Iteration  22: 4650619.085 ops/s
Iteration  23: 4592162.319 ops/s
Iteration  24: 4655322.079 ops/s
Iteration  25: 4668854.848 ops/s
Iteration  26: 4663209.817 ops/s
Iteration  27: 4662350.663 ops/s
Iteration  28: 4660974.173 ops/s
Iteration  29: 4668513.692 ops/s
Iteration  30: 4657369.407 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_containsAnyArray":
  4651961.621 ±(99.9%) 14853.100 ops/s [Average]
  (min, avg, max) = (4586337.565, 4651961.621, 4682459.123), stdev = 22231.422
  CI (99.9%): [4637108.522, 4666814.721] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_containsAnyArray  thrpt   30  4651961.621 ± 14853.100  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_containsAnyIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_containsAnyIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 516512.465 ops/s
# Warmup Iteration   2: 828543.067 ops/s
# Warmup Iteration   3: 1048476.496 ops/s
# Warmup Iteration   4: 1045635.774 ops/s
# Warmup Iteration   5: 1056200.432 ops/s
# Warmup Iteration   6: 880405.102 ops/s
# Warmup Iteration   7: 1050628.350 ops/s
# Warmup Iteration   8: 1051923.522 ops/s
# Warmup Iteration   9: 1053134.211 ops/s
# Warmup Iteration  10: 1052589.007 ops/s
# Warmup Iteration  11: 1053830.991 ops/s
# Warmup Iteration  12: 1045784.675 ops/s
# Warmup Iteration  13: 1052360.340 ops/s
# Warmup Iteration  14: 1053712.908 ops/s
# Warmup Iteration  15: 1053222.778 ops/s
# Warmup Iteration  16: 1045111.924 ops/s
# Warmup Iteration  17: 1052312.930 ops/s
# Warmup Iteration  18: 1053080.563 ops/s
# Warmup Iteration  19: 1053120.895 ops/s
# Warmup Iteration  20: 1051126.443 ops/s
# Warmup Iteration  21: 1052961.616 ops/s
# Warmup Iteration  22: 1052401.255 ops/s
# Warmup Iteration  23: 1052899.461 ops/s
# Warmup Iteration  24: 1053659.896 ops/s
# Warmup Iteration  25: 1053920.091 ops/s
# Warmup Iteration  26: 1054845.346 ops/s
# Warmup Iteration  27: 1051645.827 ops/s
# Warmup Iteration  28: 1052421.764 ops/s
# Warmup Iteration  29: 1052308.189 ops/s
# Warmup Iteration  30: 1051861.147 ops/s
Iteration   1: 1054659.840 ops/s
Iteration   2: 1051405.454 ops/s
Iteration   3: 1052857.477 ops/s
Iteration   4: 1052911.260 ops/s
Iteration   5: 1054106.083 ops/s
Iteration   6: 1053425.027 ops/s
Iteration   7: 1053182.896 ops/s
Iteration   8: 1054541.632 ops/s
Iteration   9: 1053722.631 ops/s
Iteration  10: 1052909.117 ops/s
Iteration  11: 1054331.531 ops/s
Iteration  12: 1051853.807 ops/s
Iteration  13: 1056264.677 ops/s
Iteration  14: 1052293.336 ops/s
Iteration  15: 1052764.572 ops/s
Iteration  16: 1053179.842 ops/s
Iteration  17: 1035909.600 ops/s
Iteration  18: 1053671.525 ops/s
Iteration  19: 1051089.892 ops/s
Iteration  20: 1052584.547 ops/s
Iteration  21: 1055437.020 ops/s
Iteration  22: 1049105.740 ops/s
Iteration  23: 1051933.017 ops/s
Iteration  24: 1053731.795 ops/s
Iteration  25: 1051839.455 ops/s
Iteration  26: 1054193.096 ops/s
Iteration  27: 1054767.241 ops/s
Iteration  28: 1054947.302 ops/s
Iteration  29: 1051943.183 ops/s
Iteration  30: 1054009.170 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_containsAnyIterable":
  1052652.392 ±(99.9%) 2325.459 ops/s [Average]
  (min, avg, max) = (1035909.600, 1052652.392, 1056264.677), stdev = 3480.638
  CI (99.9%): [1050326.933, 1054977.851] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score      Error  Units
SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_containsAnyIterable  thrpt   30  1052652.392 ± 2325.459  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_containsNoneArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_containsNoneArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1074930.663 ops/s
# Warmup Iteration   2: 2360126.345 ops/s
# Warmup Iteration   3: 4379739.079 ops/s
# Warmup Iteration   4: 4245612.110 ops/s
# Warmup Iteration   5: 4698542.087 ops/s
# Warmup Iteration   6: 4682579.585 ops/s
# Warmup Iteration   7: 4697000.256 ops/s
# Warmup Iteration   8: 4704451.772 ops/s
# Warmup Iteration   9: 4698431.336 ops/s
# Warmup Iteration  10: 4702486.248 ops/s
# Warmup Iteration  11: 4684787.164 ops/s
# Warmup Iteration  12: 4704831.570 ops/s
# Warmup Iteration  13: 4696356.267 ops/s
# Warmup Iteration  14: 4692001.562 ops/s
# Warmup Iteration  15: 4695519.858 ops/s
# Warmup Iteration  16: 4696429.203 ops/s
# Warmup Iteration  17: 4701936.421 ops/s
# Warmup Iteration  18: 4695393.948 ops/s
# Warmup Iteration  19: 4699464.412 ops/s
# Warmup Iteration  20: 4664881.490 ops/s
# Warmup Iteration  21: 4685146.484 ops/s
# Warmup Iteration  22: 4700783.917 ops/s
# Warmup Iteration  23: 4704872.992 ops/s
# Warmup Iteration  24: 4689533.271 ops/s
# Warmup Iteration  25: 4691922.266 ops/s
# Warmup Iteration  26: 4696616.707 ops/s
# Warmup Iteration  27: 4704344.285 ops/s
# Warmup Iteration  28: 4697732.514 ops/s
# Warmup Iteration  29: 4691673.294 ops/s
# Warmup Iteration  30: 4696562.950 ops/s
Iteration   1: 4707188.050 ops/s
Iteration   2: 4694363.656 ops/s
Iteration   3: 4702479.451 ops/s
Iteration   4: 4700223.359 ops/s
Iteration   5: 4704953.923 ops/s
Iteration   6: 4696505.236 ops/s
Iteration   7: 4716268.573 ops/s
Iteration   8: 4677860.984 ops/s
Iteration   9: 4702706.799 ops/s
Iteration  10: 4699903.369 ops/s
Iteration  11: 4696730.399 ops/s
Iteration  12: 4702396.475 ops/s
Iteration  13: 4703404.586 ops/s
Iteration  14: 4695100.387 ops/s
Iteration  15: 4682941.123 ops/s
Iteration  16: 4708463.190 ops/s
Iteration  17: 4703273.887 ops/s
Iteration  18: 4714413.016 ops/s
Iteration  19: 4690264.696 ops/s
Iteration  20: 4696992.969 ops/s
Iteration  21: 4694586.074 ops/s
Iteration  22: 4688612.578 ops/s
Iteration  23: 4703912.646 ops/s
Iteration  24: 4687788.809 ops/s
Iteration  25: 4686115.758 ops/s
Iteration  26: 4678218.045 ops/s
Iteration  27: 4696882.972 ops/s
Iteration  28: 4696717.663 ops/s
Iteration  29: 4696922.816 ops/s
Iteration  30: 4694520.076 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_containsNoneArray":
  4697357.052 ±(99.9%) 6161.602 ops/s [Average]
  (min, avg, max) = (4677860.984, 4697357.052, 4716268.573), stdev = 9222.397
  CI (99.9%): [4691195.450, 4703518.654] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score      Error  Units
SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_containsNoneArray  thrpt   30  4697357.052 ± 6161.602  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_containsNoneIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_containsNoneIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 486742.793 ops/s
# Warmup Iteration   2: 758083.723 ops/s
# Warmup Iteration   3: 955466.259 ops/s
# Warmup Iteration   4: 955976.490 ops/s
# Warmup Iteration   5: 955273.627 ops/s
# Warmup Iteration   6: 799672.608 ops/s
# Warmup Iteration   7: 955872.589 ops/s
# Warmup Iteration   8: 955387.513 ops/s
# Warmup Iteration   9: 956928.135 ops/s
# Warmup Iteration  10: 956076.085 ops/s
# Warmup Iteration  11: 957362.268 ops/s
# Warmup Iteration  12: 956639.740 ops/s
# Warmup Iteration  13: 955864.221 ops/s
# Warmup Iteration  14: 958539.904 ops/s
# Warmup Iteration  15: 956687.150 ops/s
# Warmup Iteration  16: 957868.859 ops/s
# Warmup Iteration  17: 956617.618 ops/s
# Warmup Iteration  18: 956087.712 ops/s
# Warmup Iteration  19: 956083.065 ops/s
# Warmup Iteration  20: 955637.001 ops/s
# Warmup Iteration  21: 954527.368 ops/s
# Warmup Iteration  22: 949281.322 ops/s
# Warmup Iteration  23: 951255.848 ops/s
# Warmup Iteration  24: 953894.560 ops/s
# Warmup Iteration  25: 955687.290 ops/s
# Warmup Iteration  26: 954170.509 ops/s
# Warmup Iteration  27: 955552.682 ops/s
# Warmup Iteration  28: 956221.382 ops/s
# Warmup Iteration  29: 954788.070 ops/s
# Warmup Iteration  30: 956865.048 ops/s
Iteration   1: 956489.480 ops/s
Iteration   2: 954744.537 ops/s
Iteration   3: 942167.813 ops/s
Iteration   4: 954058.198 ops/s
Iteration   5: 956898.972 ops/s
Iteration   6: 955322.113 ops/s
Iteration   7: 957219.756 ops/s
Iteration   8: 950587.719 ops/s
Iteration   9: 956457.319 ops/s
Iteration  10: 956691.949 ops/s
Iteration  11: 951790.804 ops/s
Iteration  12: 951943.014 ops/s
Iteration  13: 955596.891 ops/s
Iteration  14: 936787.225 ops/s
Iteration  15: 954188.388 ops/s
Iteration  16: 955496.698 ops/s
Iteration  17: 954653.284 ops/s
Iteration  18: 956268.226 ops/s
Iteration  19: 949951.871 ops/s
Iteration  20: 953835.878 ops/s
Iteration  21: 958279.317 ops/s
Iteration  22: 937629.197 ops/s
Iteration  23: 957157.912 ops/s
Iteration  24: 954402.398 ops/s
Iteration  25: 955433.333 ops/s
Iteration  26: 956489.358 ops/s
Iteration  27: 955352.642 ops/s
Iteration  28: 941048.502 ops/s
Iteration  29: 956309.169 ops/s
Iteration  30: 948178.404 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_containsNoneIterable":
  952714.346 ±(99.9%) 3900.304 ops/s [Average]
  (min, avg, max) = (936787.225, 952714.346, 958279.317), stdev = 5837.792
  CI (99.9%): [948814.041, 956614.650] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score      Error  Units
SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_containsNoneIterable  thrpt   30  952714.346 ± 3900.304  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1002159.254 ops/s
# Warmup Iteration   2: 2284464.669 ops/s
# Warmup Iteration   3: 2727665.459 ops/s
# Warmup Iteration   4: 2269633.505 ops/s
# Warmup Iteration   5: 2721304.462 ops/s
# Warmup Iteration   6: 2730080.198 ops/s
# Warmup Iteration   7: 2710730.185 ops/s
# Warmup Iteration   8: 2728094.747 ops/s
# Warmup Iteration   9: 2730204.814 ops/s
# Warmup Iteration  10: 2703662.974 ops/s
# Warmup Iteration  11: 2731015.080 ops/s
# Warmup Iteration  12: 2731795.287 ops/s
# Warmup Iteration  13: 2727833.014 ops/s
# Warmup Iteration  14: 2729392.259 ops/s
# Warmup Iteration  15: 2707982.607 ops/s
# Warmup Iteration  16: 2708598.599 ops/s
# Warmup Iteration  17: 2728837.297 ops/s
# Warmup Iteration  18: 2727414.248 ops/s
# Warmup Iteration  19: 2736485.706 ops/s
# Warmup Iteration  20: 2732879.469 ops/s
# Warmup Iteration  21: 2733281.804 ops/s
# Warmup Iteration  22: 2725876.533 ops/s
# Warmup Iteration  23: 2724093.523 ops/s
# Warmup Iteration  24: 2728526.847 ops/s
# Warmup Iteration  25: 2726767.440 ops/s
# Warmup Iteration  26: 2733036.223 ops/s
# Warmup Iteration  27: 2730506.586 ops/s
# Warmup Iteration  28: 2726584.089 ops/s
# Warmup Iteration  29: 2732217.503 ops/s
# Warmup Iteration  30: 2731741.697 ops/s
Iteration   1: 2732066.572 ops/s
Iteration   2: 2727719.008 ops/s
Iteration   3: 2732753.910 ops/s
Iteration   4: 2730873.438 ops/s
Iteration   5: 2730878.749 ops/s
Iteration   6: 2725315.570 ops/s
Iteration   7: 2734911.191 ops/s
Iteration   8: 2684444.175 ops/s
Iteration   9: 2734165.858 ops/s
Iteration  10: 2730542.571 ops/s
Iteration  11: 2728805.664 ops/s
Iteration  12: 2732114.227 ops/s
Iteration  13: 2737617.482 ops/s
Iteration  14: 2734856.687 ops/s
Iteration  15: 2732562.236 ops/s
Iteration  16: 2716720.680 ops/s
Iteration  17: 2730296.044 ops/s
Iteration  18: 2731954.573 ops/s
Iteration  19: 2729290.834 ops/s
Iteration  20: 2738767.137 ops/s
Iteration  21: 2733672.271 ops/s
Iteration  22: 2733496.797 ops/s
Iteration  23: 2728711.895 ops/s
Iteration  24: 2735252.163 ops/s
Iteration  25: 2731013.011 ops/s
Iteration  26: 2732771.081 ops/s
Iteration  27: 2728841.658 ops/s
Iteration  28: 2726919.507 ops/s
Iteration  29: 2736441.240 ops/s
Iteration  30: 2734593.574 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_count":
  2729945.660 ±(99.9%) 6382.227 ops/s [Average]
  (min, avg, max) = (2684444.175, 2729945.660, 2738767.137), stdev = 9552.618
  CI (99.9%): [2723563.433, 2736327.888] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_count  thrpt   30  2729945.660 ± 6382.227  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1357235.697 ops/s
# Warmup Iteration   2: 3141247.679 ops/s
# Warmup Iteration   3: 5147992.930 ops/s
# Warmup Iteration   4: 4585809.740 ops/s
# Warmup Iteration   5: 5322762.077 ops/s
# Warmup Iteration   6: 5323665.468 ops/s
# Warmup Iteration   7: 5305349.514 ops/s
# Warmup Iteration   8: 5325441.320 ops/s
# Warmup Iteration   9: 5317051.356 ops/s
# Warmup Iteration  10: 5315764.632 ops/s
# Warmup Iteration  11: 5326612.050 ops/s
# Warmup Iteration  12: 5317897.867 ops/s
# Warmup Iteration  13: 5315130.108 ops/s
# Warmup Iteration  14: 5322811.474 ops/s
# Warmup Iteration  15: 5316100.627 ops/s
# Warmup Iteration  16: 5330860.273 ops/s
# Warmup Iteration  17: 5330284.347 ops/s
# Warmup Iteration  18: 5275079.443 ops/s
# Warmup Iteration  19: 5317247.445 ops/s
# Warmup Iteration  20: 5325318.056 ops/s
# Warmup Iteration  21: 5307414.615 ops/s
# Warmup Iteration  22: 5322401.012 ops/s
# Warmup Iteration  23: 5322296.647 ops/s
# Warmup Iteration  24: 5312926.512 ops/s
# Warmup Iteration  25: 5332982.303 ops/s
# Warmup Iteration  26: 5296800.625 ops/s
# Warmup Iteration  27: 5317359.245 ops/s
# Warmup Iteration  28: 5337732.009 ops/s
# Warmup Iteration  29: 5316953.981 ops/s
# Warmup Iteration  30: 5316138.688 ops/s
Iteration   1: 5323384.796 ops/s
Iteration   2: 5303671.238 ops/s
Iteration   3: 5323933.704 ops/s
Iteration   4: 5310700.650 ops/s
Iteration   5: 5344743.604 ops/s
Iteration   6: 5316062.526 ops/s
Iteration   7: 5332744.554 ops/s
Iteration   8: 5233416.450 ops/s
Iteration   9: 5297879.623 ops/s
Iteration  10: 5336951.035 ops/s
Iteration  11: 5325278.530 ops/s
Iteration  12: 5319295.582 ops/s
Iteration  13: 5207447.215 ops/s
Iteration  14: 5323229.156 ops/s
Iteration  15: 5335098.696 ops/s
Iteration  16: 5321582.159 ops/s
Iteration  17: 5336982.544 ops/s
Iteration  18: 5316902.062 ops/s
Iteration  19: 5341616.570 ops/s
Iteration  20: 5318878.280 ops/s
Iteration  21: 5330896.920 ops/s
Iteration  22: 5330972.035 ops/s
Iteration  23: 5333253.329 ops/s
Iteration  24: 5310409.172 ops/s
Iteration  25: 5316533.376 ops/s
Iteration  26: 5320948.940 ops/s
Iteration  27: 5256018.721 ops/s
Iteration  28: 5329206.569 ops/s
Iteration  29: 5331925.221 ops/s
Iteration  30: 5319099.043 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_detectIfNone":
  5314968.743 ±(99.9%) 20472.363 ops/s [Average]
  (min, avg, max) = (5207447.215, 5314968.743, 5344743.604), stdev = 30642.072
  CI (99.9%): [5294496.380, 5335441.107] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_detectIfNone  thrpt   30  5314968.743 ± 20472.363  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1933036.932 ops/s
# Warmup Iteration   2: 4112662.249 ops/s
# Warmup Iteration   3: 4564672.777 ops/s
# Warmup Iteration   4: 5529482.166 ops/s
# Warmup Iteration   5: 5537005.287 ops/s
# Warmup Iteration   6: 5494779.258 ops/s
# Warmup Iteration   7: 5479929.980 ops/s
# Warmup Iteration   8: 5527765.461 ops/s
# Warmup Iteration   9: 5513357.614 ops/s
# Warmup Iteration  10: 5533409.229 ops/s
# Warmup Iteration  11: 5526296.545 ops/s
# Warmup Iteration  12: 5491293.646 ops/s
# Warmup Iteration  13: 5473390.427 ops/s
# Warmup Iteration  14: 5528298.293 ops/s
# Warmup Iteration  15: 5519456.827 ops/s
# Warmup Iteration  16: 5474727.385 ops/s
# Warmup Iteration  17: 5520912.594 ops/s
# Warmup Iteration  18: 5532106.741 ops/s
# Warmup Iteration  19: 5524001.980 ops/s
# Warmup Iteration  20: 5483323.033 ops/s
# Warmup Iteration  21: 5484166.041 ops/s
# Warmup Iteration  22: 5527703.096 ops/s
# Warmup Iteration  23: 5541808.753 ops/s
# Warmup Iteration  24: 5532711.938 ops/s
# Warmup Iteration  25: 5542333.200 ops/s
# Warmup Iteration  26: 5530550.108 ops/s
# Warmup Iteration  27: 5509115.120 ops/s
# Warmup Iteration  28: 5516236.402 ops/s
# Warmup Iteration  29: 5528096.318 ops/s
# Warmup Iteration  30: 5527688.823 ops/s
Iteration   1: 5546052.589 ops/s
Iteration   2: 5517834.690 ops/s
Iteration   3: 5545540.502 ops/s
Iteration   4: 5503527.762 ops/s
Iteration   5: 5521939.464 ops/s
Iteration   6: 5526807.654 ops/s
Iteration   7: 5527652.091 ops/s
Iteration   8: 5538194.002 ops/s
Iteration   9: 5526107.595 ops/s
Iteration  10: 5527975.080 ops/s
Iteration  11: 5532054.528 ops/s
Iteration  12: 5531573.400 ops/s
Iteration  13: 5542955.755 ops/s
Iteration  14: 5520450.895 ops/s
Iteration  15: 5531961.050 ops/s
Iteration  16: 5520732.153 ops/s
Iteration  17: 5550565.412 ops/s
Iteration  18: 5550835.989 ops/s
Iteration  19: 5520470.222 ops/s
Iteration  20: 5537040.947 ops/s
Iteration  21: 5503464.608 ops/s
Iteration  22: 5544186.715 ops/s
Iteration  23: 5529871.091 ops/s
Iteration  24: 5537568.199 ops/s
Iteration  25: 5525663.143 ops/s
Iteration  26: 5540989.320 ops/s
Iteration  27: 5509699.605 ops/s
Iteration  28: 5544029.645 ops/s
Iteration  29: 5528078.159 ops/s
Iteration  30: 5534122.073 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_forEach":
  5530598.145 ±(99.9%) 8404.572 ops/s [Average]
  (min, avg, max) = (5503464.608, 5530598.145, 5550835.989), stdev = 12579.568
  CI (99.9%): [5522193.573, 5539002.716] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_forEach  thrpt   30  5530598.145 ± 8404.572  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6317706.979 ops/s
# Warmup Iteration   2: 12840850.910 ops/s
# Warmup Iteration   3: 14888300.049 ops/s
# Warmup Iteration   4: 17471868.830 ops/s
# Warmup Iteration   5: 17460426.249 ops/s
# Warmup Iteration   6: 17293199.287 ops/s
# Warmup Iteration   7: 17297265.526 ops/s
# Warmup Iteration   8: 17378004.951 ops/s
# Warmup Iteration   9: 17330984.381 ops/s
# Warmup Iteration  10: 17358840.137 ops/s
# Warmup Iteration  11: 17316735.799 ops/s
# Warmup Iteration  12: 17460526.515 ops/s
# Warmup Iteration  13: 17351267.601 ops/s
# Warmup Iteration  14: 17319348.071 ops/s
# Warmup Iteration  15: 17411945.937 ops/s
# Warmup Iteration  16: 17395548.147 ops/s
# Warmup Iteration  17: 17283694.709 ops/s
# Warmup Iteration  18: 17347365.214 ops/s
# Warmup Iteration  19: 17333038.817 ops/s
# Warmup Iteration  20: 17383308.540 ops/s
# Warmup Iteration  21: 17369268.782 ops/s
# Warmup Iteration  22: 17408455.438 ops/s
# Warmup Iteration  23: 17427908.698 ops/s
# Warmup Iteration  24: 17111464.658 ops/s
# Warmup Iteration  25: 17486145.444 ops/s
# Warmup Iteration  26: 17431903.274 ops/s
# Warmup Iteration  27: 17354859.675 ops/s
# Warmup Iteration  28: 17377928.595 ops/s
# Warmup Iteration  29: 17397151.064 ops/s
# Warmup Iteration  30: 17416723.595 ops/s
Iteration   1: 17453629.940 ops/s
Iteration   2: 17430489.299 ops/s
Iteration   3: 17385863.791 ops/s
Iteration   4: 17422616.281 ops/s
Iteration   5: 17104661.835 ops/s
Iteration   6: 17347375.533 ops/s
Iteration   7: 17450427.918 ops/s
Iteration   8: 17390347.071 ops/s
Iteration   9: 17412004.333 ops/s
Iteration  10: 17424477.657 ops/s
Iteration  11: 17336574.492 ops/s
Iteration  12: 17381323.605 ops/s
Iteration  13: 17397480.251 ops/s
Iteration  14: 17482195.263 ops/s
Iteration  15: 17406752.293 ops/s
Iteration  16: 17374649.611 ops/s
Iteration  17: 17431040.466 ops/s
Iteration  18: 17418200.811 ops/s
Iteration  19: 17461803.263 ops/s
Iteration  20: 17383783.119 ops/s
Iteration  21: 17415294.143 ops/s
Iteration  22: 17370300.700 ops/s
Iteration  23: 17321540.544 ops/s
Iteration  24: 17468810.806 ops/s
Iteration  25: 17303760.125 ops/s
Iteration  26: 17359089.705 ops/s
Iteration  27: 17392791.931 ops/s
Iteration  28: 17416733.119 ops/s
Iteration  29: 17526346.748 ops/s
Iteration  30: 17355379.574 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_injectInto":
  17394191.474 ±(99.9%) 48892.955 ops/s [Average]
  (min, avg, max) = (17104661.835, 17394191.474, 17526346.748), stdev = 73180.679
  CI (99.9%): [17345298.519, 17443084.429] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt         Score       Error  Units
SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_injectInto  thrpt   30  17394191.474 ± 48892.955  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 830568.360 ops/s
# Warmup Iteration   2: 1670853.663 ops/s
# Warmup Iteration   3: 1948223.338 ops/s
# Warmup Iteration   4: 2293801.322 ops/s
# Warmup Iteration   5: 2287680.326 ops/s
# Warmup Iteration   6: 2281032.324 ops/s
# Warmup Iteration   7: 2285558.479 ops/s
# Warmup Iteration   8: 2279305.436 ops/s
# Warmup Iteration   9: 2270415.768 ops/s
# Warmup Iteration  10: 2277589.359 ops/s
# Warmup Iteration  11: 2275261.214 ops/s
# Warmup Iteration  12: 2278815.476 ops/s
# Warmup Iteration  13: 2289192.716 ops/s
# Warmup Iteration  14: 2282529.020 ops/s
# Warmup Iteration  15: 2284489.443 ops/s
# Warmup Iteration  16: 2282352.151 ops/s
# Warmup Iteration  17: 2288636.771 ops/s
# Warmup Iteration  18: 2279741.490 ops/s
# Warmup Iteration  19: 2284496.489 ops/s
# Warmup Iteration  20: 2276320.395 ops/s
# Warmup Iteration  21: 2264720.247 ops/s
# Warmup Iteration  22: 2282409.317 ops/s
# Warmup Iteration  23: 2280574.065 ops/s
# Warmup Iteration  24: 2291965.898 ops/s
# Warmup Iteration  25: 2289540.364 ops/s
# Warmup Iteration  26: 2285043.686 ops/s
# Warmup Iteration  27: 2284794.918 ops/s
# Warmup Iteration  28: 2286511.929 ops/s
# Warmup Iteration  29: 2275443.478 ops/s
# Warmup Iteration  30: 2291800.420 ops/s
Iteration   1: 2280237.376 ops/s
Iteration   2: 2292221.372 ops/s
Iteration   3: 2292744.019 ops/s
Iteration   4: 2279882.596 ops/s
Iteration   5: 2291607.521 ops/s
Iteration   6: 2290842.650 ops/s
Iteration   7: 2281289.966 ops/s
Iteration   8: 2276065.114 ops/s
Iteration   9: 2282357.143 ops/s
Iteration  10: 2270250.407 ops/s
Iteration  11: 2289402.354 ops/s
Iteration  12: 2287144.227 ops/s
Iteration  13: 2274707.512 ops/s
Iteration  14: 2271091.569 ops/s
Iteration  15: 2282119.372 ops/s
Iteration  16: 2289114.454 ops/s
Iteration  17: 2284732.463 ops/s
Iteration  18: 2283938.669 ops/s
Iteration  19: 2286066.779 ops/s
Iteration  20: 2284877.625 ops/s
Iteration  21: 2280498.966 ops/s
Iteration  22: 2295953.245 ops/s
Iteration  23: 2266853.613 ops/s
Iteration  24: 2277621.015 ops/s
Iteration  25: 2271754.267 ops/s
Iteration  26: 2295377.975 ops/s
Iteration  27: 2297949.871 ops/s
Iteration  28: 2283692.967 ops/s
Iteration  29: 2274208.291 ops/s
Iteration  30: 2281928.889 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_isEmpty":
  2283217.743 ±(99.9%) 5429.171 ops/s [Average]
  (min, avg, max) = (2266853.613, 2283217.743, 2297949.871), stdev = 8126.127
  CI (99.9%): [2277788.572, 2288646.914] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_isEmpty  thrpt   30  2283217.743 ± 5429.171  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_iterator_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_iterator_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 664788.375 ops/s
# Warmup Iteration   2: 682414.693 ops/s
# Warmup Iteration   3: 890251.392 ops/s
# Warmup Iteration   4: 898631.846 ops/s
# Warmup Iteration   5: 899586.670 ops/s
# Warmup Iteration   6: 895959.830 ops/s
# Warmup Iteration   7: 899914.652 ops/s
# Warmup Iteration   8: 899809.640 ops/s
# Warmup Iteration   9: 890886.005 ops/s
# Warmup Iteration  10: 900101.677 ops/s
# Warmup Iteration  11: 895298.530 ops/s
# Warmup Iteration  12: 750269.734 ops/s
# Warmup Iteration  13: 896964.493 ops/s
# Warmup Iteration  14: 901180.025 ops/s
# Warmup Iteration  15: 899996.530 ops/s
# Warmup Iteration  16: 896501.747 ops/s
# Warmup Iteration  17: 952016.408 ops/s
# Warmup Iteration  18: 955871.345 ops/s
# Warmup Iteration  19: 956312.213 ops/s
# Warmup Iteration  20: 955025.464 ops/s
# Warmup Iteration  21: 948962.015 ops/s
# Warmup Iteration  22: 953775.822 ops/s
# Warmup Iteration  23: 954017.081 ops/s
# Warmup Iteration  24: 954649.091 ops/s
# Warmup Iteration  25: 941383.899 ops/s
# Warmup Iteration  26: 955938.572 ops/s
# Warmup Iteration  27: 951998.614 ops/s
# Warmup Iteration  28: 955543.754 ops/s
# Warmup Iteration  29: 953516.851 ops/s
# Warmup Iteration  30: 953847.284 ops/s
Iteration   1: 956541.108 ops/s
Iteration   2: 954812.384 ops/s
Iteration   3: 955736.127 ops/s
Iteration   4: 951890.221 ops/s
Iteration   5: 954839.171 ops/s
Iteration   6: 957038.944 ops/s
Iteration   7: 953847.335 ops/s
Iteration   8: 952655.007 ops/s
Iteration   9: 955535.857 ops/s
Iteration  10: 949957.965 ops/s
Iteration  11: 957809.417 ops/s
Iteration  12: 952844.577 ops/s
Iteration  13: 955188.885 ops/s
Iteration  14: 955300.856 ops/s
Iteration  15: 950747.065 ops/s
Iteration  16: 951181.458 ops/s
Iteration  17: 953466.552 ops/s
Iteration  18: 956866.362 ops/s
Iteration  19: 957235.900 ops/s
Iteration  20: 957373.725 ops/s
Iteration  21: 957526.929 ops/s
Iteration  22: 956087.116 ops/s
Iteration  23: 948399.831 ops/s
Iteration  24: 955580.600 ops/s
Iteration  25: 955068.255 ops/s
Iteration  26: 958196.640 ops/s
Iteration  27: 952682.212 ops/s
Iteration  28: 959232.530 ops/s
Iteration  29: 958107.431 ops/s
Iteration  30: 954543.532 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_iterator_throws":
  954876.466 ±(99.9%) 1778.632 ops/s [Average]
  (min, avg, max) = (948399.831, 954876.466, 959232.530), stdev = 2662.173
  CI (99.9%): [953097.834, 956655.099] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_iterator_throws  thrpt   30  954876.466 ± 1778.632  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 719237.485 ops/s
# Warmup Iteration   2: 781394.132 ops/s
# Warmup Iteration   3: 1009151.903 ops/s
# Warmup Iteration   4: 1003807.426 ops/s
# Warmup Iteration   5: 1005144.267 ops/s
# Warmup Iteration   6: 1002033.908 ops/s
# Warmup Iteration   7: 1003406.302 ops/s
# Warmup Iteration   8: 1000476.577 ops/s
# Warmup Iteration   9: 999150.669 ops/s
# Warmup Iteration  10: 938258.302 ops/s
# Warmup Iteration  11: 901852.993 ops/s
# Warmup Iteration  12: 996591.438 ops/s
# Warmup Iteration  13: 997095.868 ops/s
# Warmup Iteration  14: 999030.162 ops/s
# Warmup Iteration  15: 991554.502 ops/s
# Warmup Iteration  16: 997000.994 ops/s
# Warmup Iteration  17: 1063363.591 ops/s
# Warmup Iteration  18: 1064755.168 ops/s
# Warmup Iteration  19: 1065748.352 ops/s
# Warmup Iteration  20: 1061002.106 ops/s
# Warmup Iteration  21: 1063073.479 ops/s
# Warmup Iteration  22: 1064455.286 ops/s
# Warmup Iteration  23: 1059035.355 ops/s
# Warmup Iteration  24: 1070059.669 ops/s
# Warmup Iteration  25: 1062189.981 ops/s
# Warmup Iteration  26: 1051931.321 ops/s
# Warmup Iteration  27: 1063144.145 ops/s
# Warmup Iteration  28: 1062853.400 ops/s
# Warmup Iteration  29: 1068973.294 ops/s
# Warmup Iteration  30: 1065579.842 ops/s
Iteration   1: 1062941.519 ops/s
Iteration   2: 1064196.177 ops/s
Iteration   3: 1060154.570 ops/s
Iteration   4: 1069356.907 ops/s
Iteration   5: 1055752.801 ops/s
Iteration   6: 1064726.761 ops/s
Iteration   7: 1069192.194 ops/s
Iteration   8: 1063147.723 ops/s
Iteration   9: 1056975.290 ops/s
Iteration  10: 1064537.119 ops/s
Iteration  11: 1063922.085 ops/s
Iteration  12: 1060698.072 ops/s
Iteration  13: 1060926.080 ops/s
Iteration  14: 1061103.458 ops/s
Iteration  15: 1062909.453 ops/s
Iteration  16: 1059195.231 ops/s
Iteration  17: 1065926.388 ops/s
Iteration  18: 1065400.304 ops/s
Iteration  19: 1061529.721 ops/s
Iteration  20: 1061149.115 ops/s
Iteration  21: 1067144.876 ops/s
Iteration  22: 1058133.251 ops/s
Iteration  23: 1066988.320 ops/s
Iteration  24: 1061697.030 ops/s
Iteration  25: 1063960.200 ops/s
Iteration  26: 1061777.823 ops/s
Iteration  27: 1062158.644 ops/s
Iteration  28: 1061708.007 ops/s
Iteration  29: 1060778.620 ops/s
Iteration  30: 1063541.441 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList":
  1062720.973 ±(99.9%) 2138.351 ops/s [Average]
  (min, avg, max) = (1055752.801, 1062720.973, 1069356.907), stdev = 3200.584
  CI (99.9%): [1060582.621, 1064859.324] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt        Score      Error  Units
SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList  thrpt   30  1062720.973 ± 2138.351  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 631290.164 ops/s
# Warmup Iteration   2: 667805.266 ops/s
# Warmup Iteration   3: 849499.222 ops/s
# Warmup Iteration   4: 846982.404 ops/s
# Warmup Iteration   5: 848363.182 ops/s
# Warmup Iteration   6: 852764.003 ops/s
# Warmup Iteration   7: 850796.193 ops/s
# Warmup Iteration   8: 849349.630 ops/s
# Warmup Iteration   9: 851276.328 ops/s
# Warmup Iteration  10: 850228.741 ops/s
# Warmup Iteration  11: 853621.313 ops/s
# Warmup Iteration  12: 711923.513 ops/s
# Warmup Iteration  13: 852447.162 ops/s
# Warmup Iteration  14: 850468.513 ops/s
# Warmup Iteration  15: 852184.496 ops/s
# Warmup Iteration  16: 849156.508 ops/s
# Warmup Iteration  17: 937925.921 ops/s
# Warmup Iteration  18: 938458.218 ops/s
# Warmup Iteration  19: 939917.861 ops/s
# Warmup Iteration  20: 936915.080 ops/s
# Warmup Iteration  21: 938847.308 ops/s
# Warmup Iteration  22: 934528.082 ops/s
# Warmup Iteration  23: 930986.654 ops/s
# Warmup Iteration  24: 940253.560 ops/s
# Warmup Iteration  25: 936757.756 ops/s
# Warmup Iteration  26: 936856.363 ops/s
# Warmup Iteration  27: 935943.132 ops/s
# Warmup Iteration  28: 939134.981 ops/s
# Warmup Iteration  29: 937266.131 ops/s
# Warmup Iteration  30: 941139.232 ops/s
Iteration   1: 938692.674 ops/s
Iteration   2: 939403.866 ops/s
Iteration   3: 939734.911 ops/s
Iteration   4: 941992.013 ops/s
Iteration   5: 938206.155 ops/s
Iteration   6: 938160.230 ops/s
Iteration   7: 938270.242 ops/s
Iteration   8: 941307.750 ops/s
Iteration   9: 922061.518 ops/s
Iteration  10: 940059.863 ops/s
Iteration  11: 937723.698 ops/s
Iteration  12: 940670.738 ops/s
Iteration  13: 942438.987 ops/s
Iteration  14: 941126.680 ops/s
Iteration  15: 941726.081 ops/s
Iteration  16: 938285.581 ops/s
Iteration  17: 939131.641 ops/s
Iteration  18: 941359.465 ops/s
Iteration  19: 938410.007 ops/s
Iteration  20: 936183.414 ops/s
Iteration  21: 939769.897 ops/s
Iteration  22: 937710.812 ops/s
Iteration  23: 938719.146 ops/s
Iteration  24: 935842.645 ops/s
Iteration  25: 940715.500 ops/s
Iteration  26: 939178.959 ops/s
Iteration  27: 941341.948 ops/s
Iteration  28: 924495.490 ops/s
Iteration  29: 939743.166 ops/s
Iteration  30: 936485.942 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection":
  938298.301 ±(99.9%) 2964.101 ops/s [Average]
  (min, avg, max) = (922061.518, 938298.301, 942438.987), stdev = 4436.528
  CI (99.9%): [935334.199, 941262.402] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                       Mode  Cnt       Score      Error  Units
SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection  thrpt   30  938298.301 ± 2964.101  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 722482.354 ops/s
# Warmup Iteration   2: 803838.006 ops/s
# Warmup Iteration   3: 1005504.936 ops/s
# Warmup Iteration   4: 1013071.530 ops/s
# Warmup Iteration   5: 1007230.524 ops/s
# Warmup Iteration   6: 1012710.825 ops/s
# Warmup Iteration   7: 1008841.503 ops/s
# Warmup Iteration   8: 1012965.121 ops/s
# Warmup Iteration   9: 1012868.251 ops/s
# Warmup Iteration  10: 853967.323 ops/s
# Warmup Iteration  11: 1008597.651 ops/s
# Warmup Iteration  12: 1008091.031 ops/s
# Warmup Iteration  13: 1011068.277 ops/s
# Warmup Iteration  14: 1008975.663 ops/s
# Warmup Iteration  15: 1011491.629 ops/s
# Warmup Iteration  16: 1005466.923 ops/s
# Warmup Iteration  17: 1081273.538 ops/s
# Warmup Iteration  18: 1079224.026 ops/s
# Warmup Iteration  19: 1077906.598 ops/s
# Warmup Iteration  20: 1079929.359 ops/s
# Warmup Iteration  21: 1082325.007 ops/s
# Warmup Iteration  22: 1078513.362 ops/s
# Warmup Iteration  23: 1080900.648 ops/s
# Warmup Iteration  24: 1076659.248 ops/s
# Warmup Iteration  25: 1079010.552 ops/s
# Warmup Iteration  26: 1078513.912 ops/s
# Warmup Iteration  27: 1082302.678 ops/s
# Warmup Iteration  28: 1081400.734 ops/s
# Warmup Iteration  29: 1080515.195 ops/s
# Warmup Iteration  30: 1078872.264 ops/s
Iteration   1: 1082656.485 ops/s
Iteration   2: 1085507.988 ops/s
Iteration   3: 1078728.573 ops/s
Iteration   4: 1087112.188 ops/s
Iteration   5: 1082717.366 ops/s
Iteration   6: 1081388.518 ops/s
Iteration   7: 1080823.897 ops/s
Iteration   8: 1083088.748 ops/s
Iteration   9: 1081228.394 ops/s
Iteration  10: 1080391.176 ops/s
Iteration  11: 1084027.482 ops/s
Iteration  12: 1079797.952 ops/s
Iteration  13: 1078024.067 ops/s
Iteration  14: 1083684.696 ops/s
Iteration  15: 1080099.141 ops/s
Iteration  16: 1083446.683 ops/s
Iteration  17: 1079666.371 ops/s
Iteration  18: 1077593.767 ops/s
Iteration  19: 1076774.434 ops/s
Iteration  20: 1078056.282 ops/s
Iteration  21: 1077982.523 ops/s
Iteration  22: 1077451.778 ops/s
Iteration  23: 1077461.823 ops/s
Iteration  24: 1077350.214 ops/s
Iteration  25: 1082772.590 ops/s
Iteration  26: 1081263.623 ops/s
Iteration  27: 1084243.237 ops/s
Iteration  28: 1084832.890 ops/s
Iteration  29: 1079302.999 ops/s
Iteration  30: 1078175.914 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove":
  1080855.060 ±(99.9%) 1894.005 ops/s [Average]
  (min, avg, max) = (1076774.434, 1080855.060, 1087112.188), stdev = 2834.857
  CI (99.9%): [1078961.055, 1082749.065] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                      Mode  Cnt        Score      Error  Units
SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove  thrpt   30  1080855.060 ± 1894.005  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 722595.960 ops/s
# Warmup Iteration   2: 801584.302 ops/s
# Warmup Iteration   3: 1009090.621 ops/s
# Warmup Iteration   4: 1011192.576 ops/s
# Warmup Iteration   5: 1005534.291 ops/s
# Warmup Iteration   6: 1014851.500 ops/s
# Warmup Iteration   7: 1012362.777 ops/s
# Warmup Iteration   8: 1012001.519 ops/s
# Warmup Iteration   9: 1013036.907 ops/s
# Warmup Iteration  10: 845777.957 ops/s
# Warmup Iteration  11: 1005026.721 ops/s
# Warmup Iteration  12: 1010532.206 ops/s
# Warmup Iteration  13: 1008736.454 ops/s
# Warmup Iteration  14: 1008368.834 ops/s
# Warmup Iteration  15: 1012465.761 ops/s
# Warmup Iteration  16: 1002208.804 ops/s
# Warmup Iteration  17: 1073945.664 ops/s
# Warmup Iteration  18: 1076572.405 ops/s
# Warmup Iteration  19: 1075099.124 ops/s
# Warmup Iteration  20: 1073125.614 ops/s
# Warmup Iteration  21: 1072213.559 ops/s
# Warmup Iteration  22: 1075008.255 ops/s
# Warmup Iteration  23: 1073487.146 ops/s
# Warmup Iteration  24: 1073470.247 ops/s
# Warmup Iteration  25: 1071903.656 ops/s
# Warmup Iteration  26: 1072884.127 ops/s
# Warmup Iteration  27: 1069859.788 ops/s
# Warmup Iteration  28: 1070604.103 ops/s
# Warmup Iteration  29: 1072370.506 ops/s
# Warmup Iteration  30: 1074114.786 ops/s
Iteration   1: 1072232.946 ops/s
Iteration   2: 1073903.511 ops/s
Iteration   3: 1069028.020 ops/s
Iteration   4: 1076851.624 ops/s
Iteration   5: 1076496.633 ops/s
Iteration   6: 1077567.566 ops/s
Iteration   7: 1078030.124 ops/s
Iteration   8: 1075396.777 ops/s
Iteration   9: 1076144.090 ops/s
Iteration  10: 1073738.876 ops/s
Iteration  11: 1077346.434 ops/s
Iteration  12: 1076354.515 ops/s
Iteration  13: 1071274.735 ops/s
Iteration  14: 1073793.619 ops/s
Iteration  15: 1076220.487 ops/s
Iteration  16: 1074459.287 ops/s
Iteration  17: 1072010.566 ops/s
Iteration  18: 1073066.930 ops/s
Iteration  19: 1072847.363 ops/s
Iteration  20: 1075162.077 ops/s
Iteration  21: 1071831.133 ops/s
Iteration  22: 1075464.038 ops/s
Iteration  23: 1073400.271 ops/s
Iteration  24: 1074447.234 ops/s
Iteration  25: 1072351.953 ops/s
Iteration  26: 1075926.651 ops/s
Iteration  27: 1071208.186 ops/s
Iteration  28: 1073967.638 ops/s
Iteration  29: 1071439.065 ops/s
Iteration  30: 1070728.055 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next":
  1074089.680 ±(99.9%) 1536.195 ops/s [Average]
  (min, avg, max) = (1069028.020, 1074089.680, 1078030.124), stdev = 2299.304
  CI (99.9%): [1072553.486, 1075625.875] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                      Mode  Cnt        Score      Error  Units
SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next  thrpt   30  1074089.680 ± 1536.195  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 650158.872 ops/s
# Warmup Iteration   2: 1335715.062 ops/s
# Warmup Iteration   3: 1262086.966 ops/s
# Warmup Iteration   4: 1458232.072 ops/s
# Warmup Iteration   5: 1476610.679 ops/s
# Warmup Iteration   6: 1462498.138 ops/s
# Warmup Iteration   7: 1479257.742 ops/s
# Warmup Iteration   8: 1473886.497 ops/s
# Warmup Iteration   9: 1475789.867 ops/s
# Warmup Iteration  10: 1470901.127 ops/s
# Warmup Iteration  11: 1467826.760 ops/s
# Warmup Iteration  12: 1476902.933 ops/s
# Warmup Iteration  13: 1475239.054 ops/s
# Warmup Iteration  14: 1476916.706 ops/s
# Warmup Iteration  15: 1479192.691 ops/s
# Warmup Iteration  16: 1475479.861 ops/s
# Warmup Iteration  17: 1479533.027 ops/s
# Warmup Iteration  18: 1482869.604 ops/s
# Warmup Iteration  19: 1475342.310 ops/s
# Warmup Iteration  20: 1477897.382 ops/s
# Warmup Iteration  21: 1487716.819 ops/s
# Warmup Iteration  22: 1485796.251 ops/s
# Warmup Iteration  23: 1484549.674 ops/s
# Warmup Iteration  24: 1478139.238 ops/s
# Warmup Iteration  25: 1478566.555 ops/s
# Warmup Iteration  26: 1485263.881 ops/s
# Warmup Iteration  27: 1478179.802 ops/s
# Warmup Iteration  28: 1478297.635 ops/s
# Warmup Iteration  29: 1477541.566 ops/s
# Warmup Iteration  30: 1478113.528 ops/s
Iteration   1: 1480444.946 ops/s
Iteration   2: 1482475.651 ops/s
Iteration   3: 1478304.141 ops/s
Iteration   4: 1483769.840 ops/s
Iteration   5: 1479680.104 ops/s
Iteration   6: 1482374.010 ops/s
Iteration   7: 1474548.356 ops/s
Iteration   8: 1482513.636 ops/s
Iteration   9: 1477295.119 ops/s
Iteration  10: 1471066.999 ops/s
Iteration  11: 1464067.202 ops/s
Iteration  12: 1478159.200 ops/s
Iteration  13: 1486139.219 ops/s
Iteration  14: 1489119.365 ops/s
Iteration  15: 1484230.705 ops/s
Iteration  16: 1479312.208 ops/s
Iteration  17: 1483521.079 ops/s
Iteration  18: 1474563.752 ops/s
Iteration  19: 1472555.698 ops/s
Iteration  20: 1477628.560 ops/s
Iteration  21: 1478365.161 ops/s
Iteration  22: 1482150.906 ops/s
Iteration  23: 1476188.623 ops/s
Iteration  24: 1478401.881 ops/s
Iteration  25: 1485834.381 ops/s
Iteration  26: 1482922.598 ops/s
Iteration  27: 1489607.963 ops/s
Iteration  28: 1475999.916 ops/s
Iteration  29: 1483266.531 ops/s
Iteration  30: 1474254.041 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_makeString":
  1479625.393 ±(99.9%) 3652.073 ops/s [Average]
  (min, avg, max) = (1464067.202, 1479625.393, 1489607.963), stdev = 5466.251
  CI (99.9%): [1475973.320, 1483277.466] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_makeString  thrpt   30  1479625.393 ± 3652.073  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_newCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_newCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 168062743.931 ops/s
# Warmup Iteration   2: 302307456.070 ops/s
# Warmup Iteration   3: 253234661.542 ops/s
# Warmup Iteration   4: 280018503.825 ops/s
# Warmup Iteration   5: 280503498.242 ops/s
# Warmup Iteration   6: 280713107.723 ops/s
# Warmup Iteration   7: 280896657.603 ops/s
# Warmup Iteration   8: 281713918.997 ops/s
# Warmup Iteration   9: 281181531.243 ops/s
# Warmup Iteration  10: 281261149.508 ops/s
# Warmup Iteration  11: 281788120.549 ops/s
# Warmup Iteration  12: 281056752.116 ops/s
# Warmup Iteration  13: 281468012.345 ops/s
# Warmup Iteration  14: 281179063.968 ops/s
# Warmup Iteration  15: 280185533.398 ops/s
# Warmup Iteration  16: 280722677.859 ops/s
# Warmup Iteration  17: 278234480.018 ops/s
# Warmup Iteration  18: 277426344.768 ops/s
# Warmup Iteration  19: 273516724.775 ops/s
# Warmup Iteration  20: 279748609.653 ops/s
# Warmup Iteration  21: 277129394.854 ops/s
# Warmup Iteration  22: 278615271.677 ops/s
# Warmup Iteration  23: 277156919.117 ops/s
# Warmup Iteration  24: 277503172.630 ops/s
# Warmup Iteration  25: 277849787.907 ops/s
# Warmup Iteration  26: 276818889.835 ops/s
# Warmup Iteration  27: 278490845.471 ops/s
# Warmup Iteration  28: 277267898.118 ops/s
# Warmup Iteration  29: 277197650.635 ops/s
# Warmup Iteration  30: 278031883.883 ops/s
Iteration   1: 278530452.637 ops/s
Iteration   2: 277511361.852 ops/s
Iteration   3: 276852331.460 ops/s
Iteration   4: 276608730.123 ops/s
Iteration   5: 278352684.139 ops/s
Iteration   6: 273838050.069 ops/s
Iteration   7: 278066141.593 ops/s
Iteration   8: 276921858.116 ops/s
Iteration   9: 277485557.679 ops/s
Iteration  10: 276492497.516 ops/s
Iteration  11: 278804931.603 ops/s
Iteration  12: 278811594.064 ops/s
Iteration  13: 276729466.055 ops/s
Iteration  14: 278059155.261 ops/s
Iteration  15: 279103681.837 ops/s
Iteration  16: 279724104.988 ops/s
Iteration  17: 279267212.722 ops/s
Iteration  18: 276028348.009 ops/s
Iteration  19: 277621156.810 ops/s
Iteration  20: 276323602.101 ops/s
Iteration  21: 278463219.394 ops/s
Iteration  22: 278328277.496 ops/s
Iteration  23: 278360836.248 ops/s
Iteration  24: 280642086.861 ops/s
Iteration  25: 277308099.334 ops/s
Iteration  26: 278526452.587 ops/s
Iteration  27: 277252708.880 ops/s
Iteration  28: 276827918.152 ops/s
Iteration  29: 277860563.036 ops/s
Iteration  30: 278464799.353 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_newCollection":
  277772262.666 ±(99.9%) 870989.017 ops/s [Average]
  (min, avg, max) = (273838050.069, 277772262.666, 280642086.861), stdev = 1303655.457
  CI (99.9%): [276901273.648, 278643251.683] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt          Score        Error  Units
SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_newCollection  thrpt   30  277772262.666 ± 870989.017  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_newCollectionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_newCollectionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1256574.789 ops/s
# Warmup Iteration   2: 2882170.502 ops/s
# Warmup Iteration   3: 4372065.650 ops/s
# Warmup Iteration   4: 5230546.505 ops/s
# Warmup Iteration   5: 5231397.557 ops/s
# Warmup Iteration   6: 5252057.846 ops/s
# Warmup Iteration   7: 5233449.801 ops/s
# Warmup Iteration   8: 5232090.683 ops/s
# Warmup Iteration   9: 5236987.073 ops/s
# Warmup Iteration  10: 5210987.927 ops/s
# Warmup Iteration  11: 5223190.244 ops/s
# Warmup Iteration  12: 5222670.653 ops/s
# Warmup Iteration  13: 5232423.972 ops/s
# Warmup Iteration  14: 5244323.755 ops/s
# Warmup Iteration  15: 5229122.406 ops/s
# Warmup Iteration  16: 5205686.096 ops/s
# Warmup Iteration  17: 5202230.434 ops/s
# Warmup Iteration  18: 5218923.976 ops/s
# Warmup Iteration  19: 5203990.669 ops/s
# Warmup Iteration  20: 5211660.747 ops/s
# Warmup Iteration  21: 5201672.906 ops/s
# Warmup Iteration  22: 5224374.599 ops/s
# Warmup Iteration  23: 5209788.698 ops/s
# Warmup Iteration  24: 5206912.807 ops/s
# Warmup Iteration  25: 5235940.135 ops/s
# Warmup Iteration  26: 5231590.352 ops/s
# Warmup Iteration  27: 5206120.577 ops/s
# Warmup Iteration  28: 5226243.968 ops/s
# Warmup Iteration  29: 5215474.923 ops/s
# Warmup Iteration  30: 5247310.261 ops/s
Iteration   1: 5244397.060 ops/s
Iteration   2: 5254907.566 ops/s
Iteration   3: 5213664.218 ops/s
Iteration   4: 5185495.608 ops/s
Iteration   5: 5221584.843 ops/s
Iteration   6: 5222175.622 ops/s
Iteration   7: 5201938.076 ops/s
Iteration   8: 5226810.298 ops/s
Iteration   9: 5237586.122 ops/s
Iteration  10: 5234482.189 ops/s
Iteration  11: 5222584.748 ops/s
Iteration  12: 5238141.575 ops/s
Iteration  13: 5210434.901 ops/s
Iteration  14: 5245432.073 ops/s
Iteration  15: 5237206.564 ops/s
Iteration  16: 5215743.380 ops/s
Iteration  17: 5217033.534 ops/s
Iteration  18: 5203782.353 ops/s
Iteration  19: 5206355.008 ops/s
Iteration  20: 5242023.025 ops/s
Iteration  21: 5246960.809 ops/s
Iteration  22: 5209079.299 ops/s
Iteration  23: 5198543.860 ops/s
Iteration  24: 5195652.779 ops/s
Iteration  25: 5089957.324 ops/s
Iteration  26: 5235663.827 ops/s
Iteration  27: 5207464.926 ops/s
Iteration  28: 5135781.518 ops/s
Iteration  29: 5203638.937 ops/s
Iteration  30: 5225108.607 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_newCollectionWith":
  5214321.022 ±(99.9%) 22161.049 ops/s [Average]
  (min, avg, max) = (5089957.324, 5214321.022, 5254907.566), stdev = 33169.617
  CI (99.9%): [5192159.973, 5236482.070] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_newCollectionWith  thrpt   30  5214321.022 ± 22161.049  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1014218.553 ops/s
# Warmup Iteration   2: 2152711.909 ops/s
# Warmup Iteration   3: 2390576.647 ops/s
# Warmup Iteration   4: 2834186.645 ops/s
# Warmup Iteration   5: 2838046.851 ops/s
# Warmup Iteration   6: 2838950.625 ops/s
# Warmup Iteration   7: 2830750.561 ops/s
# Warmup Iteration   8: 2770174.462 ops/s
# Warmup Iteration   9: 2837473.906 ops/s
# Warmup Iteration  10: 2834418.066 ops/s
# Warmup Iteration  11: 2802346.608 ops/s
# Warmup Iteration  12: 2836619.040 ops/s
# Warmup Iteration  13: 2842002.458 ops/s
# Warmup Iteration  14: 2832327.204 ops/s
# Warmup Iteration  15: 2838586.943 ops/s
# Warmup Iteration  16: 2834221.937 ops/s
# Warmup Iteration  17: 2840324.913 ops/s
# Warmup Iteration  18: 2833232.956 ops/s
# Warmup Iteration  19: 2833745.873 ops/s
# Warmup Iteration  20: 2827596.007 ops/s
# Warmup Iteration  21: 2837493.320 ops/s
# Warmup Iteration  22: 2836542.188 ops/s
# Warmup Iteration  23: 2813344.427 ops/s
# Warmup Iteration  24: 2812521.179 ops/s
# Warmup Iteration  25: 2813661.177 ops/s
# Warmup Iteration  26: 2840911.730 ops/s
# Warmup Iteration  27: 2838311.891 ops/s
# Warmup Iteration  28: 2841589.983 ops/s
# Warmup Iteration  29: 2840426.138 ops/s
# Warmup Iteration  30: 2836825.692 ops/s
Iteration   1: 2841221.666 ops/s
Iteration   2: 2840798.216 ops/s
Iteration   3: 2835536.816 ops/s
Iteration   4: 2840514.816 ops/s
Iteration   5: 2831702.491 ops/s
Iteration   6: 2835299.736 ops/s
Iteration   7: 2798711.096 ops/s
Iteration   8: 2845104.498 ops/s
Iteration   9: 2846219.648 ops/s
Iteration  10: 2825767.615 ops/s
Iteration  11: 2842515.511 ops/s
Iteration  12: 2841147.007 ops/s
Iteration  13: 2834451.137 ops/s
Iteration  14: 2834042.307 ops/s
Iteration  15: 2836939.199 ops/s
Iteration  16: 2837526.209 ops/s
Iteration  17: 2837842.040 ops/s
Iteration  18: 2840091.039 ops/s
Iteration  19: 2832500.929 ops/s
Iteration  20: 2847108.717 ops/s
Iteration  21: 2823327.123 ops/s
Iteration  22: 2793779.031 ops/s
Iteration  23: 2840443.158 ops/s
Iteration  24: 2838127.972 ops/s
Iteration  25: 2843208.018 ops/s
Iteration  26: 2828445.693 ops/s
Iteration  27: 2839727.364 ops/s
Iteration  28: 2840772.237 ops/s
Iteration  29: 2833934.010 ops/s
Iteration  30: 2834848.332 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_noneSatisfy":
  2834721.788 ±(99.9%) 7921.031 ops/s [Average]
  (min, avg, max) = (2793779.031, 2834721.788, 2847108.717), stdev = 11855.827
  CI (99.9%): [2826800.757, 2842642.819] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_noneSatisfy  thrpt   30  2834721.788 ± 7921.031  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_notEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_notEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2121980.768 ops/s
# Warmup Iteration   2: 4470906.528 ops/s
# Warmup Iteration   3: 5531496.683 ops/s
# Warmup Iteration   4: 6535311.032 ops/s
# Warmup Iteration   5: 6574626.374 ops/s
# Warmup Iteration   6: 6501245.858 ops/s
# Warmup Iteration   7: 6518563.150 ops/s
# Warmup Iteration   8: 6564720.403 ops/s
# Warmup Iteration   9: 6453783.074 ops/s
# Warmup Iteration  10: 6560084.430 ops/s
# Warmup Iteration  11: 6551103.958 ops/s
# Warmup Iteration  12: 6537881.260 ops/s
# Warmup Iteration  13: 6574380.177 ops/s
# Warmup Iteration  14: 6561873.072 ops/s
# Warmup Iteration  15: 6558383.470 ops/s
# Warmup Iteration  16: 6562235.842 ops/s
# Warmup Iteration  17: 6550996.648 ops/s
# Warmup Iteration  18: 6543353.886 ops/s
# Warmup Iteration  19: 6569457.215 ops/s
# Warmup Iteration  20: 6558243.098 ops/s
# Warmup Iteration  21: 6564129.481 ops/s
# Warmup Iteration  22: 6548063.898 ops/s
# Warmup Iteration  23: 6537709.248 ops/s
# Warmup Iteration  24: 6561911.185 ops/s
# Warmup Iteration  25: 6546547.151 ops/s
# Warmup Iteration  26: 6540957.571 ops/s
# Warmup Iteration  27: 6579794.897 ops/s
# Warmup Iteration  28: 6537356.782 ops/s
# Warmup Iteration  29: 6552507.715 ops/s
# Warmup Iteration  30: 6562403.057 ops/s
Iteration   1: 6549650.676 ops/s
Iteration   2: 6530438.195 ops/s
Iteration   3: 6523887.177 ops/s
Iteration   4: 6541194.903 ops/s
Iteration   5: 6551909.769 ops/s
Iteration   6: 6582814.795 ops/s
Iteration   7: 6506480.327 ops/s
Iteration   8: 6440429.632 ops/s
Iteration   9: 6563714.992 ops/s
Iteration  10: 6547771.401 ops/s
Iteration  11: 6562560.434 ops/s
Iteration  12: 6534786.016 ops/s
Iteration  13: 6567957.265 ops/s
Iteration  14: 6570261.546 ops/s
Iteration  15: 6562151.618 ops/s
Iteration  16: 6544918.857 ops/s
Iteration  17: 6565465.667 ops/s
Iteration  18: 6520620.568 ops/s
Iteration  19: 6560911.524 ops/s
Iteration  20: 6565723.112 ops/s
Iteration  21: 6528447.327 ops/s
Iteration  22: 6567606.850 ops/s
Iteration  23: 6574113.318 ops/s
Iteration  24: 6412073.876 ops/s
Iteration  25: 6568682.878 ops/s
Iteration  26: 6579705.593 ops/s
Iteration  27: 6574978.029 ops/s
Iteration  28: 6566565.199 ops/s
Iteration  29: 6544441.642 ops/s
Iteration  30: 6538665.564 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_notEmpty":
  6544964.292 ±(99.9%) 25117.554 ops/s [Average]
  (min, avg, max) = (6412073.876, 6544964.292, 6582814.795), stdev = 37594.776
  CI (99.9%): [6519846.737, 6570081.846] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_notEmpty  thrpt   30  6544964.292 ± 25117.554  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_reduce$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_reduce

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1371748.222 ops/s
# Warmup Iteration   2: 2694908.762 ops/s
# Warmup Iteration   3: 2615367.169 ops/s
# Warmup Iteration   4: 3075143.540 ops/s
# Warmup Iteration   5: 3070790.103 ops/s
# Warmup Iteration   6: 3077718.938 ops/s
# Warmup Iteration   7: 3067276.924 ops/s
# Warmup Iteration   8: 3065355.871 ops/s
# Warmup Iteration   9: 3077651.986 ops/s
# Warmup Iteration  10: 3070538.841 ops/s
# Warmup Iteration  11: 3070031.239 ops/s
# Warmup Iteration  12: 3075068.260 ops/s
# Warmup Iteration  13: 3028203.396 ops/s
# Warmup Iteration  14: 3077531.615 ops/s
# Warmup Iteration  15: 3074046.236 ops/s
# Warmup Iteration  16: 3071291.123 ops/s
# Warmup Iteration  17: 3074485.804 ops/s
# Warmup Iteration  18: 3065057.436 ops/s
# Warmup Iteration  19: 3073028.180 ops/s
# Warmup Iteration  20: 3073677.121 ops/s
# Warmup Iteration  21: 3060036.005 ops/s
# Warmup Iteration  22: 3032300.177 ops/s
# Warmup Iteration  23: 3068777.830 ops/s
# Warmup Iteration  24: 3070834.526 ops/s
# Warmup Iteration  25: 3073607.010 ops/s
# Warmup Iteration  26: 3079690.681 ops/s
# Warmup Iteration  27: 3069779.016 ops/s
# Warmup Iteration  28: 3074254.199 ops/s
# Warmup Iteration  29: 3074067.842 ops/s
# Warmup Iteration  30: 3075122.977 ops/s
Iteration   1: 3075386.033 ops/s
Iteration   2: 3066568.303 ops/s
Iteration   3: 3065786.732 ops/s
Iteration   4: 3068594.621 ops/s
Iteration   5: 3079595.663 ops/s
Iteration   6: 3074478.259 ops/s
Iteration   7: 3066425.602 ops/s
Iteration   8: 3064821.189 ops/s
Iteration   9: 3078471.816 ops/s
Iteration  10: 3076482.000 ops/s
Iteration  11: 3083362.113 ops/s
Iteration  12: 3088842.109 ops/s
Iteration  13: 3082114.879 ops/s
Iteration  14: 3088395.628 ops/s
Iteration  15: 3079689.428 ops/s
Iteration  16: 3082507.054 ops/s
Iteration  17: 3068287.442 ops/s
Iteration  18: 3062065.194 ops/s
Iteration  19: 3058692.368 ops/s
Iteration  20: 3064066.877 ops/s
Iteration  21: 3054270.303 ops/s
Iteration  22: 3069721.507 ops/s
Iteration  23: 3075988.398 ops/s
Iteration  24: 3084284.477 ops/s
Iteration  25: 3088329.425 ops/s
Iteration  26: 3077160.395 ops/s
Iteration  27: 3081868.556 ops/s
Iteration  28: 3087124.135 ops/s
Iteration  29: 3085780.962 ops/s
Iteration  30: 3084386.792 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_reduce":
  3075451.609 ±(99.9%) 6443.289 ops/s [Average]
  (min, avg, max) = (3054270.303, 3075451.609, 3088842.109), stdev = 9644.012
  CI (99.9%): [3069008.320, 3081894.898] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_reduce  thrpt   30  3075451.609 ± 6443.289  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_reduceIfEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_reduceIfEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 984570.553 ops/s
# Warmup Iteration   2: 2085419.575 ops/s
# Warmup Iteration   3: 2184898.451 ops/s
# Warmup Iteration   4: 2603109.918 ops/s
# Warmup Iteration   5: 2607041.830 ops/s
# Warmup Iteration   6: 2597886.667 ops/s
# Warmup Iteration   7: 2583885.742 ops/s
# Warmup Iteration   8: 2589795.840 ops/s
# Warmup Iteration   9: 2592470.476 ops/s
# Warmup Iteration  10: 2599513.133 ops/s
# Warmup Iteration  11: 2604224.853 ops/s
# Warmup Iteration  12: 2600866.840 ops/s
# Warmup Iteration  13: 2602660.145 ops/s
# Warmup Iteration  14: 2599157.842 ops/s
# Warmup Iteration  15: 2595626.604 ops/s
# Warmup Iteration  16: 2591311.231 ops/s
# Warmup Iteration  17: 2604553.207 ops/s
# Warmup Iteration  18: 2599041.740 ops/s
# Warmup Iteration  19: 2611902.678 ops/s
# Warmup Iteration  20: 2611595.935 ops/s
# Warmup Iteration  21: 2609477.124 ops/s
# Warmup Iteration  22: 2604049.162 ops/s
# Warmup Iteration  23: 2605819.341 ops/s
# Warmup Iteration  24: 2602156.253 ops/s
# Warmup Iteration  25: 2604274.926 ops/s
# Warmup Iteration  26: 2602098.736 ops/s
# Warmup Iteration  27: 2595639.610 ops/s
# Warmup Iteration  28: 2595156.771 ops/s
# Warmup Iteration  29: 2593238.149 ops/s
# Warmup Iteration  30: 2604815.719 ops/s
Iteration   1: 2608038.877 ops/s
Iteration   2: 2597745.760 ops/s
Iteration   3: 2585605.314 ops/s
Iteration   4: 2593724.549 ops/s
Iteration   5: 2603168.119 ops/s
Iteration   6: 2585019.239 ops/s
Iteration   7: 2591340.356 ops/s
Iteration   8: 2596635.729 ops/s
Iteration   9: 2602673.591 ops/s
Iteration  10: 2589321.045 ops/s
Iteration  11: 2591293.089 ops/s
Iteration  12: 2593146.696 ops/s
Iteration  13: 2586541.182 ops/s
Iteration  14: 2589647.707 ops/s
Iteration  15: 2601406.604 ops/s
Iteration  16: 2593912.101 ops/s
Iteration  17: 2594425.856 ops/s
Iteration  18: 2591982.936 ops/s
Iteration  19: 2585639.554 ops/s
Iteration  20: 2585127.030 ops/s
Iteration  21: 2589679.308 ops/s
Iteration  22: 2588685.214 ops/s
Iteration  23: 2607067.118 ops/s
Iteration  24: 2585945.607 ops/s
Iteration  25: 2591579.453 ops/s
Iteration  26: 2595517.914 ops/s
Iteration  27: 2588056.109 ops/s
Iteration  28: 2590994.108 ops/s
Iteration  29: 2602378.149 ops/s
Iteration  30: 2603316.736 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_reduceIfEmpty":
  2593653.835 ±(99.9%) 4535.370 ops/s [Average]
  (min, avg, max) = (2585019.239, 2593653.835, 2608038.877), stdev = 6788.329
  CI (99.9%): [2589118.465, 2598189.205] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_reduceIfEmpty  thrpt   30  2593653.835 ± 4535.370  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 720145.008 ops/s
# Warmup Iteration   2: 780774.160 ops/s
# Warmup Iteration   3: 1015481.885 ops/s
# Warmup Iteration   4: 1014625.784 ops/s
# Warmup Iteration   5: 1016785.299 ops/s
# Warmup Iteration   6: 1015237.656 ops/s
# Warmup Iteration   7: 1016349.454 ops/s
# Warmup Iteration   8: 1016038.778 ops/s
# Warmup Iteration   9: 1016853.625 ops/s
# Warmup Iteration  10: 944579.913 ops/s
# Warmup Iteration  11: 921602.930 ops/s
# Warmup Iteration  12: 1013744.837 ops/s
# Warmup Iteration  13: 1012441.485 ops/s
# Warmup Iteration  14: 1012932.578 ops/s
# Warmup Iteration  15: 1015085.127 ops/s
# Warmup Iteration  16: 1010395.472 ops/s
# Warmup Iteration  17: 1074279.798 ops/s
# Warmup Iteration  18: 1073326.437 ops/s
# Warmup Iteration  19: 1074716.651 ops/s
# Warmup Iteration  20: 1072132.109 ops/s
# Warmup Iteration  21: 1076503.627 ops/s
# Warmup Iteration  22: 1074585.472 ops/s
# Warmup Iteration  23: 1072407.749 ops/s
# Warmup Iteration  24: 1075213.509 ops/s
# Warmup Iteration  25: 1080440.370 ops/s
# Warmup Iteration  26: 1074164.353 ops/s
# Warmup Iteration  27: 1076646.882 ops/s
# Warmup Iteration  28: 1076605.561 ops/s
# Warmup Iteration  29: 1074799.970 ops/s
# Warmup Iteration  30: 1075353.727 ops/s
Iteration   1: 1067316.878 ops/s
Iteration   2: 1072864.954 ops/s
Iteration   3: 1074833.604 ops/s
Iteration   4: 1070484.351 ops/s
Iteration   5: 1075777.810 ops/s
Iteration   6: 1079555.459 ops/s
Iteration   7: 1077710.377 ops/s
Iteration   8: 1075413.007 ops/s
Iteration   9: 1070610.053 ops/s
Iteration  10: 1073210.863 ops/s
Iteration  11: 1075497.712 ops/s
Iteration  12: 1075351.923 ops/s
Iteration  13: 1074498.598 ops/s
Iteration  14: 1075854.271 ops/s
Iteration  15: 1072437.543 ops/s
Iteration  16: 1072963.477 ops/s
Iteration  17: 1078105.617 ops/s
Iteration  18: 1080443.098 ops/s
Iteration  19: 1068938.369 ops/s
Iteration  20: 1075224.473 ops/s
Iteration  21: 1079776.040 ops/s
Iteration  22: 1075216.751 ops/s
Iteration  23: 1078438.985 ops/s
Iteration  24: 1078122.710 ops/s
Iteration  25: 1079185.920 ops/s
Iteration  26: 1078173.984 ops/s
Iteration  27: 1076294.570 ops/s
Iteration  28: 1076460.687 ops/s
Iteration  29: 1074184.728 ops/s
Iteration  30: 1077307.681 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows":
  1075341.816 ±(99.9%) 2155.358 ops/s [Average]
  (min, avg, max) = (1067316.878, 1075341.816, 1080443.098), stdev = 3226.039
  CI (99.9%): [1073186.458, 1077497.174] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score      Error  Units
SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows  thrpt   30  1075341.816 ± 2155.358  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4273678.517 ops/s
# Warmup Iteration   2: 8912464.898 ops/s
# Warmup Iteration   3: 9094805.668 ops/s
# Warmup Iteration   4: 10649848.701 ops/s
# Warmup Iteration   5: 10673015.908 ops/s
# Warmup Iteration   6: 10708557.272 ops/s
# Warmup Iteration   7: 10709490.142 ops/s
# Warmup Iteration   8: 10702571.798 ops/s
# Warmup Iteration   9: 10732217.965 ops/s
# Warmup Iteration  10: 10734968.531 ops/s
# Warmup Iteration  11: 10693101.601 ops/s
# Warmup Iteration  12: 10640043.881 ops/s
# Warmup Iteration  13: 10638899.994 ops/s
# Warmup Iteration  14: 10694434.081 ops/s
# Warmup Iteration  15: 10719994.388 ops/s
# Warmup Iteration  16: 10707112.273 ops/s
# Warmup Iteration  17: 10657293.886 ops/s
# Warmup Iteration  18: 10638001.882 ops/s
# Warmup Iteration  19: 10631778.520 ops/s
# Warmup Iteration  20: 10748100.227 ops/s
# Warmup Iteration  21: 10653512.162 ops/s
# Warmup Iteration  22: 10705623.355 ops/s
# Warmup Iteration  23: 10668525.167 ops/s
# Warmup Iteration  24: 10751360.280 ops/s
# Warmup Iteration  25: 10665048.451 ops/s
# Warmup Iteration  26: 10673771.143 ops/s
# Warmup Iteration  27: 10687473.352 ops/s
# Warmup Iteration  28: 10701461.017 ops/s
# Warmup Iteration  29: 10677643.838 ops/s
# Warmup Iteration  30: 10639588.898 ops/s
Iteration   1: 10699253.435 ops/s
Iteration   2: 10734196.240 ops/s
Iteration   3: 10662816.909 ops/s
Iteration   4: 10616474.034 ops/s
Iteration   5: 10674717.344 ops/s
Iteration   6: 10681788.482 ops/s
Iteration   7: 10631471.382 ops/s
Iteration   8: 10637033.993 ops/s
Iteration   9: 10735220.442 ops/s
Iteration  10: 10709168.586 ops/s
Iteration  11: 10648198.831 ops/s
Iteration  12: 10607470.222 ops/s
Iteration  13: 10687198.101 ops/s
Iteration  14: 10629653.666 ops/s
Iteration  15: 10673370.292 ops/s
Iteration  16: 10674725.920 ops/s
Iteration  17: 10746301.972 ops/s
Iteration  18: 10690411.017 ops/s
Iteration  19: 10698272.868 ops/s
Iteration  20: 10634998.425 ops/s
Iteration  21: 10693259.825 ops/s
Iteration  22: 10629962.813 ops/s
Iteration  23: 10732664.046 ops/s
Iteration  24: 10734474.704 ops/s
Iteration  25: 10734618.666 ops/s
Iteration  26: 10646897.147 ops/s
Iteration  27: 10628168.592 ops/s
Iteration  28: 10722147.215 ops/s
Iteration  29: 10705863.864 ops/s
Iteration  30: 10684417.200 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_reject":
  10679507.208 ±(99.9%) 27521.349 ops/s [Average]
  (min, avg, max) = (10607470.222, 10679507.208, 10746301.972), stdev = 41192.663
  CI (99.9%): [10651985.858, 10707028.557] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score       Error  Units
SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_reject  thrpt   30  10679507.208 ± 27521.349  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8392918.181 ops/s
# Warmup Iteration   2: 17158648.897 ops/s
# Warmup Iteration   3: 14879187.500 ops/s
# Warmup Iteration   4: 17413514.327 ops/s
# Warmup Iteration   5: 17606832.439 ops/s
# Warmup Iteration   6: 17528153.522 ops/s
# Warmup Iteration   7: 17538084.027 ops/s
# Warmup Iteration   8: 17633537.882 ops/s
# Warmup Iteration   9: 17583705.914 ops/s
# Warmup Iteration  10: 17543820.830 ops/s
# Warmup Iteration  11: 17589211.548 ops/s
# Warmup Iteration  12: 17592902.784 ops/s
# Warmup Iteration  13: 17515231.462 ops/s
# Warmup Iteration  14: 17553212.443 ops/s
# Warmup Iteration  15: 17565744.231 ops/s
# Warmup Iteration  16: 17559225.277 ops/s
# Warmup Iteration  17: 17550616.996 ops/s
# Warmup Iteration  18: 17550243.947 ops/s
# Warmup Iteration  19: 17533473.619 ops/s
# Warmup Iteration  20: 17570521.850 ops/s
# Warmup Iteration  21: 17491129.473 ops/s
# Warmup Iteration  22: 17514045.815 ops/s
# Warmup Iteration  23: 17525069.773 ops/s
# Warmup Iteration  24: 17567977.138 ops/s
# Warmup Iteration  25: 17515723.687 ops/s
# Warmup Iteration  26: 17539295.832 ops/s
# Warmup Iteration  27: 17565494.936 ops/s
# Warmup Iteration  28: 17601001.577 ops/s
# Warmup Iteration  29: 17520113.278 ops/s
# Warmup Iteration  30: 17548493.021 ops/s
Iteration   1: 17550889.702 ops/s
Iteration   2: 17494832.407 ops/s
Iteration   3: 17509868.618 ops/s
Iteration   4: 17623260.216 ops/s
Iteration   5: 17621004.359 ops/s
Iteration   6: 17594660.004 ops/s
Iteration   7: 17573831.631 ops/s
Iteration   8: 17539477.007 ops/s
Iteration   9: 17606943.573 ops/s
Iteration  10: 17548979.259 ops/s
Iteration  11: 17576023.022 ops/s
Iteration  12: 17564525.882 ops/s
Iteration  13: 17544465.952 ops/s
Iteration  14: 17586965.454 ops/s
Iteration  15: 17607390.976 ops/s
Iteration  16: 17585394.940 ops/s
Iteration  17: 17585012.872 ops/s
Iteration  18: 17538796.113 ops/s
Iteration  19: 17586457.956 ops/s
Iteration  20: 17537810.439 ops/s
Iteration  21: 17605154.514 ops/s
Iteration  22: 17532184.004 ops/s
Iteration  23: 17535150.760 ops/s
Iteration  24: 17516452.236 ops/s
Iteration  25: 17512050.938 ops/s
Iteration  26: 17578349.108 ops/s
Iteration  27: 17557412.768 ops/s
Iteration  28: 17597560.719 ops/s
Iteration  29: 17549065.261 ops/s
Iteration  30: 17482827.658 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_remove":
  17561426.612 ±(99.9%) 24968.735 ops/s [Average]
  (min, avg, max) = (17482827.658, 17561426.612, 17623260.216), stdev = 37372.031
  CI (99.9%): [17536457.876, 17586395.347] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score       Error  Units
SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_remove  thrpt   30  17561426.612 ± 24968.735  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2375832.964 ops/s
# Warmup Iteration   2: 5156960.271 ops/s
# Warmup Iteration   3: 4372191.184 ops/s
# Warmup Iteration   4: 5198761.904 ops/s
# Warmup Iteration   5: 5194620.311 ops/s
# Warmup Iteration   6: 5225096.868 ops/s
# Warmup Iteration   7: 5207889.381 ops/s
# Warmup Iteration   8: 5221485.789 ops/s
# Warmup Iteration   9: 5209754.446 ops/s
# Warmup Iteration  10: 5217533.644 ops/s
# Warmup Iteration  11: 5202859.308 ops/s
# Warmup Iteration  12: 5201704.052 ops/s
# Warmup Iteration  13: 5219482.419 ops/s
# Warmup Iteration  14: 5188499.035 ops/s
# Warmup Iteration  15: 5205829.237 ops/s
# Warmup Iteration  16: 5215864.661 ops/s
# Warmup Iteration  17: 5214101.498 ops/s
# Warmup Iteration  18: 5209511.452 ops/s
# Warmup Iteration  19: 5204337.012 ops/s
# Warmup Iteration  20: 5217864.817 ops/s
# Warmup Iteration  21: 5204944.122 ops/s
# Warmup Iteration  22: 5200395.172 ops/s
# Warmup Iteration  23: 5205224.654 ops/s
# Warmup Iteration  24: 5212945.901 ops/s
# Warmup Iteration  25: 5196457.386 ops/s
# Warmup Iteration  26: 5206701.140 ops/s
# Warmup Iteration  27: 5167051.476 ops/s
# Warmup Iteration  28: 5218705.794 ops/s
# Warmup Iteration  29: 5221789.163 ops/s
# Warmup Iteration  30: 5215656.501 ops/s
Iteration   1: 5122134.065 ops/s
Iteration   2: 5237957.843 ops/s
Iteration   3: 5213681.676 ops/s
Iteration   4: 5232334.483 ops/s
Iteration   5: 5223523.215 ops/s
Iteration   6: 5210212.407 ops/s
Iteration   7: 5205734.630 ops/s
Iteration   8: 5188658.543 ops/s
Iteration   9: 5229681.375 ops/s
Iteration  10: 5196835.051 ops/s
Iteration  11: 5192455.561 ops/s
Iteration  12: 5210540.971 ops/s
Iteration  13: 5197804.042 ops/s
Iteration  14: 5226008.662 ops/s
Iteration  15: 5232166.766 ops/s
Iteration  16: 5201272.429 ops/s
Iteration  17: 5194140.904 ops/s
Iteration  18: 5191543.589 ops/s
Iteration  19: 5216419.299 ops/s
Iteration  20: 5217880.204 ops/s
Iteration  21: 5220155.721 ops/s
Iteration  22: 5205048.439 ops/s
Iteration  23: 5230487.963 ops/s
Iteration  24: 5218046.516 ops/s
Iteration  25: 5215419.350 ops/s
Iteration  26: 5231977.518 ops/s
Iteration  27: 5199426.336 ops/s
Iteration  28: 5202658.172 ops/s
Iteration  29: 5189739.312 ops/s
Iteration  30: 5212472.628 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_removeAll":
  5208880.589 ±(99.9%) 14615.028 ops/s [Average]
  (min, avg, max) = (5122134.065, 5208880.589, 5237957.843), stdev = 21875.088
  CI (99.9%): [5194265.560, 5223495.617] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_removeAll  thrpt   30  5208880.589 ± 14615.028  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_removeAll_iterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_removeAll_iterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1735869.136 ops/s
# Warmup Iteration   2: 3750526.505 ops/s
# Warmup Iteration   3: 3197872.422 ops/s
# Warmup Iteration   4: 3838869.465 ops/s
# Warmup Iteration   5: 3847992.782 ops/s
# Warmup Iteration   6: 3811481.297 ops/s
# Warmup Iteration   7: 3845973.805 ops/s
# Warmup Iteration   8: 3814891.177 ops/s
# Warmup Iteration   9: 3851594.932 ops/s
# Warmup Iteration  10: 3816584.678 ops/s
# Warmup Iteration  11: 3846196.471 ops/s
# Warmup Iteration  12: 3844576.590 ops/s
# Warmup Iteration  13: 3852396.730 ops/s
# Warmup Iteration  14: 3840955.506 ops/s
# Warmup Iteration  15: 3801194.487 ops/s
# Warmup Iteration  16: 3838968.545 ops/s
# Warmup Iteration  17: 3844283.623 ops/s
# Warmup Iteration  18: 3846722.192 ops/s
# Warmup Iteration  19: 3839920.562 ops/s
# Warmup Iteration  20: 3837196.823 ops/s
# Warmup Iteration  21: 3842851.345 ops/s
# Warmup Iteration  22: 3853718.438 ops/s
# Warmup Iteration  23: 3842552.472 ops/s
# Warmup Iteration  24: 3815203.465 ops/s
# Warmup Iteration  25: 3846643.026 ops/s
# Warmup Iteration  26: 3844882.175 ops/s
# Warmup Iteration  27: 3843696.666 ops/s
# Warmup Iteration  28: 3842095.892 ops/s
# Warmup Iteration  29: 3846096.589 ops/s
# Warmup Iteration  30: 3849567.069 ops/s
Iteration   1: 3840574.958 ops/s
Iteration   2: 3842954.955 ops/s
Iteration   3: 3834867.614 ops/s
Iteration   4: 3841491.424 ops/s
Iteration   5: 3842955.768 ops/s
Iteration   6: 3833900.859 ops/s
Iteration   7: 3849157.216 ops/s
Iteration   8: 3843236.721 ops/s
Iteration   9: 3843366.250 ops/s
Iteration  10: 3851153.898 ops/s
Iteration  11: 3854149.612 ops/s
Iteration  12: 3792004.841 ops/s
Iteration  13: 3832880.628 ops/s
Iteration  14: 3775701.410 ops/s
Iteration  15: 3851454.965 ops/s
Iteration  16: 3847564.903 ops/s
Iteration  17: 3837153.272 ops/s
Iteration  18: 3826629.098 ops/s
Iteration  19: 3839741.386 ops/s
Iteration  20: 3851395.917 ops/s
Iteration  21: 3836076.919 ops/s
Iteration  22: 3836116.594 ops/s
Iteration  23: 3844011.135 ops/s
Iteration  24: 3828971.409 ops/s
Iteration  25: 3838348.186 ops/s
Iteration  26: 3853920.538 ops/s
Iteration  27: 3836438.526 ops/s
Iteration  28: 3853256.595 ops/s
Iteration  29: 3824935.390 ops/s
Iteration  30: 3843242.112 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_removeAll_iterable":
  3837588.437 ±(99.9%) 11182.246 ops/s [Average]
  (min, avg, max) = (3775701.410, 3837588.437, 3854149.612), stdev = 16737.060
  CI (99.9%): [3826406.191, 3848770.682] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_removeAll_iterable  thrpt   30  3837588.437 ± 11182.246  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1155820.359 ops/s
# Warmup Iteration   2: 2598535.225 ops/s
# Warmup Iteration   3: 2329189.016 ops/s
# Warmup Iteration   4: 2767676.742 ops/s
# Warmup Iteration   5: 2763481.762 ops/s
# Warmup Iteration   6: 2775847.357 ops/s
# Warmup Iteration   7: 2774957.117 ops/s
# Warmup Iteration   8: 2763646.496 ops/s
# Warmup Iteration   9: 2773074.761 ops/s
# Warmup Iteration  10: 2775939.800 ops/s
# Warmup Iteration  11: 2772281.884 ops/s
# Warmup Iteration  12: 2777174.014 ops/s
# Warmup Iteration  13: 2769983.938 ops/s
# Warmup Iteration  14: 2780148.209 ops/s
# Warmup Iteration  15: 2769391.612 ops/s
# Warmup Iteration  16: 2774231.355 ops/s
# Warmup Iteration  17: 2783088.540 ops/s
# Warmup Iteration  18: 2771397.682 ops/s
# Warmup Iteration  19: 2784868.242 ops/s
# Warmup Iteration  20: 2784434.760 ops/s
# Warmup Iteration  21: 2754281.826 ops/s
# Warmup Iteration  22: 2758196.175 ops/s
# Warmup Iteration  23: 2757043.574 ops/s
# Warmup Iteration  24: 2745985.191 ops/s
# Warmup Iteration  25: 2783601.922 ops/s
# Warmup Iteration  26: 2779851.738 ops/s
# Warmup Iteration  27: 2778266.597 ops/s
# Warmup Iteration  28: 2779430.215 ops/s
# Warmup Iteration  29: 2779087.417 ops/s
# Warmup Iteration  30: 2779408.221 ops/s
Iteration   1: 2777935.592 ops/s
Iteration   2: 2780362.099 ops/s
Iteration   3: 2762807.602 ops/s
Iteration   4: 2768863.354 ops/s
Iteration   5: 2777070.713 ops/s
Iteration   6: 2788416.686 ops/s
Iteration   7: 2765117.814 ops/s
Iteration   8: 2754044.048 ops/s
Iteration   9: 2763225.905 ops/s
Iteration  10: 2779778.800 ops/s
Iteration  11: 2779931.694 ops/s
Iteration  12: 2770173.584 ops/s
Iteration  13: 2775582.939 ops/s
Iteration  14: 2768721.619 ops/s
Iteration  15: 2785342.394 ops/s
Iteration  16: 2786795.383 ops/s
Iteration  17: 2771070.301 ops/s
Iteration  18: 2779320.803 ops/s
Iteration  19: 2784198.114 ops/s
Iteration  20: 2784091.281 ops/s
Iteration  21: 2772671.537 ops/s
Iteration  22: 2773231.497 ops/s
Iteration  23: 2778877.111 ops/s
Iteration  24: 2769755.419 ops/s
Iteration  25: 2768563.502 ops/s
Iteration  26: 2777033.982 ops/s
Iteration  27: 2775561.026 ops/s
Iteration  28: 2782755.478 ops/s
Iteration  29: 2785222.800 ops/s
Iteration  30: 2790612.082 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_retainAll":
  2775904.505 ±(99.9%) 5714.970 ops/s [Average]
  (min, avg, max) = (2754044.048, 2775904.505, 2790612.082), stdev = 8553.898
  CI (99.9%): [2770189.536, 2781619.475] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_retainAll  thrpt   30  2775904.505 ± 5714.970  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_retainAll_iterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_retainAll_iterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 671842.312 ops/s
# Warmup Iteration   2: 1504754.162 ops/s
# Warmup Iteration   3: 1420122.231 ops/s
# Warmup Iteration   4: 1452268.353 ops/s
# Warmup Iteration   5: 1565389.659 ops/s
# Warmup Iteration   6: 1564701.281 ops/s
# Warmup Iteration   7: 1563298.431 ops/s
# Warmup Iteration   8: 1565349.035 ops/s
# Warmup Iteration   9: 1565584.747 ops/s
# Warmup Iteration  10: 1562305.484 ops/s
# Warmup Iteration  11: 1566404.412 ops/s
# Warmup Iteration  12: 1564247.088 ops/s
# Warmup Iteration  13: 1567958.559 ops/s
# Warmup Iteration  14: 1564980.944 ops/s
# Warmup Iteration  15: 1566983.558 ops/s
# Warmup Iteration  16: 1564056.152 ops/s
# Warmup Iteration  17: 1563546.662 ops/s
# Warmup Iteration  18: 1565628.152 ops/s
# Warmup Iteration  19: 1564441.599 ops/s
# Warmup Iteration  20: 1565136.965 ops/s
# Warmup Iteration  21: 1570749.033 ops/s
# Warmup Iteration  22: 1567453.802 ops/s
# Warmup Iteration  23: 1565003.924 ops/s
# Warmup Iteration  24: 1565021.720 ops/s
# Warmup Iteration  25: 1566065.845 ops/s
# Warmup Iteration  26: 1561836.577 ops/s
# Warmup Iteration  27: 1566777.759 ops/s
# Warmup Iteration  28: 1567444.565 ops/s
# Warmup Iteration  29: 1564316.236 ops/s
# Warmup Iteration  30: 1553400.055 ops/s
Iteration   1: 1568941.693 ops/s
Iteration   2: 1567275.202 ops/s
Iteration   3: 1568047.559 ops/s
Iteration   4: 1564664.235 ops/s
Iteration   5: 1565895.215 ops/s
Iteration   6: 1562111.932 ops/s
Iteration   7: 1553460.866 ops/s
Iteration   8: 1564864.768 ops/s
Iteration   9: 1570427.273 ops/s
Iteration  10: 1564725.506 ops/s
Iteration  11: 1565826.805 ops/s
Iteration  12: 1566050.729 ops/s
Iteration  13: 1566788.963 ops/s
Iteration  14: 1564845.579 ops/s
Iteration  15: 1565656.028 ops/s
Iteration  16: 1565121.858 ops/s
Iteration  17: 1562795.935 ops/s
Iteration  18: 1562165.908 ops/s
Iteration  19: 1569486.337 ops/s
Iteration  20: 1565246.014 ops/s
Iteration  21: 1567603.411 ops/s
Iteration  22: 1566344.743 ops/s
Iteration  23: 1563982.903 ops/s
Iteration  24: 1567410.494 ops/s
Iteration  25: 1566901.151 ops/s
Iteration  26: 1567464.827 ops/s
Iteration  27: 1565782.470 ops/s
Iteration  28: 1562406.359 ops/s
Iteration  29: 1538040.388 ops/s
Iteration  30: 1566884.330 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_retainAll_iterable":
  1564573.983 ±(99.9%) 3919.130 ops/s [Average]
  (min, avg, max) = (1538040.388, 1564573.983, 1570427.273), stdev = 5865.969
  CI (99.9%): [1560654.853, 1568493.112] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score      Error  Units
SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_retainAll_iterable  thrpt   30  1564573.983 ± 3919.130  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4218505.680 ops/s
# Warmup Iteration   2: 8881396.572 ops/s
# Warmup Iteration   3: 8907470.942 ops/s
# Warmup Iteration   4: 10522287.356 ops/s
# Warmup Iteration   5: 10496438.883 ops/s
# Warmup Iteration   6: 10521584.463 ops/s
# Warmup Iteration   7: 10502025.528 ops/s
# Warmup Iteration   8: 10517005.008 ops/s
# Warmup Iteration   9: 10501835.153 ops/s
# Warmup Iteration  10: 10555388.997 ops/s
# Warmup Iteration  11: 10506172.713 ops/s
# Warmup Iteration  12: 10512479.066 ops/s
# Warmup Iteration  13: 10508749.570 ops/s
# Warmup Iteration  14: 10555290.217 ops/s
# Warmup Iteration  15: 10547397.626 ops/s
# Warmup Iteration  16: 10541092.975 ops/s
# Warmup Iteration  17: 10573732.594 ops/s
# Warmup Iteration  18: 10574225.638 ops/s
# Warmup Iteration  19: 10572423.326 ops/s
# Warmup Iteration  20: 10513759.526 ops/s
# Warmup Iteration  21: 10562688.069 ops/s
# Warmup Iteration  22: 10591544.954 ops/s
# Warmup Iteration  23: 10580735.546 ops/s
# Warmup Iteration  24: 10514500.818 ops/s
# Warmup Iteration  25: 10545360.076 ops/s
# Warmup Iteration  26: 10556487.798 ops/s
# Warmup Iteration  27: 10584642.062 ops/s
# Warmup Iteration  28: 10549702.144 ops/s
# Warmup Iteration  29: 10555788.282 ops/s
# Warmup Iteration  30: 10539797.463 ops/s
Iteration   1: 10526546.579 ops/s
Iteration   2: 10518961.391 ops/s
Iteration   3: 10509600.428 ops/s
Iteration   4: 10505552.044 ops/s
Iteration   5: 10534612.506 ops/s
Iteration   6: 10468735.828 ops/s
Iteration   7: 10476624.424 ops/s
Iteration   8: 10571673.585 ops/s
Iteration   9: 10540420.702 ops/s
Iteration  10: 10490180.856 ops/s
Iteration  11: 10471122.396 ops/s
Iteration  12: 10538955.053 ops/s
Iteration  13: 10481663.781 ops/s
Iteration  14: 10476895.358 ops/s
Iteration  15: 10479056.929 ops/s
Iteration  16: 10607193.662 ops/s
Iteration  17: 10573013.007 ops/s
Iteration  18: 10544212.290 ops/s
Iteration  19: 10478614.394 ops/s
Iteration  20: 10537550.503 ops/s
Iteration  21: 10528249.084 ops/s
Iteration  22: 10500504.639 ops/s
Iteration  23: 10540502.997 ops/s
Iteration  24: 10567571.303 ops/s
Iteration  25: 10617619.080 ops/s
Iteration  26: 10573669.940 ops/s
Iteration  27: 10575207.173 ops/s
Iteration  28: 10514997.085 ops/s
Iteration  29: 10502126.740 ops/s
Iteration  30: 10522483.430 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_select":
  10525803.906 ±(99.9%) 27113.910 ops/s [Average]
  (min, avg, max) = (10468735.828, 10525803.906, 10617619.080), stdev = 40582.826
  CI (99.9%): [10498689.997, 10552917.816] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score       Error  Units
SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_select  thrpt   30  10525803.906 ± 27113.910  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1679308.456 ops/s
# Warmup Iteration   2: 3414057.576 ops/s
# Warmup Iteration   3: 3967360.286 ops/s
# Warmup Iteration   4: 4669407.563 ops/s
# Warmup Iteration   5: 4710629.691 ops/s
# Warmup Iteration   6: 4718858.011 ops/s
# Warmup Iteration   7: 4692442.982 ops/s
# Warmup Iteration   8: 4689259.310 ops/s
# Warmup Iteration   9: 4715995.367 ops/s
# Warmup Iteration  10: 4713237.334 ops/s
# Warmup Iteration  11: 4698655.486 ops/s
# Warmup Iteration  12: 4664283.836 ops/s
# Warmup Iteration  13: 4659617.477 ops/s
# Warmup Iteration  14: 4715469.565 ops/s
# Warmup Iteration  15: 4720253.284 ops/s
# Warmup Iteration  16: 4696129.512 ops/s
# Warmup Iteration  17: 4714532.627 ops/s
# Warmup Iteration  18: 4653937.467 ops/s
# Warmup Iteration  19: 4674690.339 ops/s
# Warmup Iteration  20: 4685398.341 ops/s
# Warmup Iteration  21: 4703138.835 ops/s
# Warmup Iteration  22: 4664131.070 ops/s
# Warmup Iteration  23: 4651665.776 ops/s
# Warmup Iteration  24: 4706348.729 ops/s
# Warmup Iteration  25: 4679605.816 ops/s
# Warmup Iteration  26: 4656081.914 ops/s
# Warmup Iteration  27: 4668951.123 ops/s
# Warmup Iteration  28: 4698989.470 ops/s
# Warmup Iteration  29: 4649957.046 ops/s
# Warmup Iteration  30: 4670826.318 ops/s
Iteration   1: 4683320.897 ops/s
Iteration   2: 4713253.075 ops/s
Iteration   3: 4716365.690 ops/s
Iteration   4: 4647792.967 ops/s
Iteration   5: 4684874.592 ops/s
Iteration   6: 4606274.543 ops/s
Iteration   7: 4640830.255 ops/s
Iteration   8: 4716361.696 ops/s
Iteration   9: 4675843.096 ops/s
Iteration  10: 4683904.112 ops/s
Iteration  11: 4704713.060 ops/s
Iteration  12: 4724563.531 ops/s
Iteration  13: 4708493.635 ops/s
Iteration  14: 4681612.466 ops/s
Iteration  15: 4701194.912 ops/s
Iteration  16: 4680138.859 ops/s
Iteration  17: 4688709.305 ops/s
Iteration  18: 4694780.347 ops/s
Iteration  19: 4691947.991 ops/s
Iteration  20: 4692179.966 ops/s
Iteration  21: 4693535.415 ops/s
Iteration  22: 4686728.638 ops/s
Iteration  23: 4714935.324 ops/s
Iteration  24: 4709685.775 ops/s
Iteration  25: 4684879.620 ops/s
Iteration  26: 4676225.230 ops/s
Iteration  27: 4701817.104 ops/s
Iteration  28: 4713350.891 ops/s
Iteration  29: 4716722.833 ops/s
Iteration  30: 4686613.718 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_size":
  4690721.651 ±(99.9%) 16723.883 ops/s [Average]
  (min, avg, max) = (4606274.543, 4690721.651, 4724563.531), stdev = 25031.523
  CI (99.9%): [4673997.769, 4707445.534] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_size  thrpt   30  4690721.651 ± 16723.883  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_testEquals$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_testEquals

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 173157500.762 ops/s
# Warmup Iteration   2: 297730102.464 ops/s
# Warmup Iteration   3: 280840345.174 ops/s
# Warmup Iteration   4: 315152486.237 ops/s
# Warmup Iteration   5: 314811896.385 ops/s
# Warmup Iteration   6: 314799384.003 ops/s
# Warmup Iteration   7: 315399189.229 ops/s
# Warmup Iteration   8: 314153252.433 ops/s
# Warmup Iteration   9: 314161002.199 ops/s
# Warmup Iteration  10: 314763595.347 ops/s
# Warmup Iteration  11: 312443546.705 ops/s
# Warmup Iteration  12: 313010361.469 ops/s
# Warmup Iteration  13: 315517694.459 ops/s
# Warmup Iteration  14: 315187297.162 ops/s
# Warmup Iteration  15: 313274052.076 ops/s
# Warmup Iteration  16: 313578130.717 ops/s
# Warmup Iteration  17: 314297723.970 ops/s
# Warmup Iteration  18: 314552185.763 ops/s
# Warmup Iteration  19: 314727881.589 ops/s
# Warmup Iteration  20: 313163132.028 ops/s
# Warmup Iteration  21: 314068473.402 ops/s
# Warmup Iteration  22: 311622222.619 ops/s
# Warmup Iteration  23: 314168879.694 ops/s
# Warmup Iteration  24: 314258303.176 ops/s
# Warmup Iteration  25: 313035372.480 ops/s
# Warmup Iteration  26: 314197414.385 ops/s
# Warmup Iteration  27: 313877300.846 ops/s
# Warmup Iteration  28: 313874118.239 ops/s
# Warmup Iteration  29: 314573972.125 ops/s
# Warmup Iteration  30: 314748788.787 ops/s
Iteration   1: 313588096.590 ops/s
Iteration   2: 311649817.563 ops/s
Iteration   3: 315839783.745 ops/s
Iteration   4: 314085504.655 ops/s
Iteration   5: 313417111.725 ops/s
Iteration   6: 314779188.721 ops/s
Iteration   7: 313522175.288 ops/s
Iteration   8: 315201696.494 ops/s
Iteration   9: 315056263.391 ops/s
Iteration  10: 314619765.433 ops/s
Iteration  11: 314174454.069 ops/s
Iteration  12: 313558797.667 ops/s
Iteration  13: 313305591.725 ops/s
Iteration  14: 313139684.096 ops/s
Iteration  15: 314454673.718 ops/s
Iteration  16: 314614687.950 ops/s
Iteration  17: 312468318.689 ops/s
Iteration  18: 309395629.586 ops/s
Iteration  19: 313190279.912 ops/s
Iteration  20: 314379025.124 ops/s
Iteration  21: 309296336.045 ops/s
Iteration  22: 313310250.840 ops/s
Iteration  23: 313914926.920 ops/s
Iteration  24: 308812762.056 ops/s
Iteration  25: 314391729.511 ops/s
Iteration  26: 314705336.804 ops/s
Iteration  27: 313657320.281 ops/s
Iteration  28: 314584454.178 ops/s
Iteration  29: 313646679.817 ops/s
Iteration  30: 315303495.125 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_testEquals":
  313535461.257 ±(99.9%) 1147566.598 ops/s [Average]
  (min, avg, max) = (308812762.056, 313535461.257, 315839783.745), stdev = 1717623.790
  CI (99.9%): [312387894.659, 314683027.855] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt          Score         Error  Units
SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_testEquals  thrpt   30  313535461.257 ± 1147566.598  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_testHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_testHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 172543197.300 ops/s
# Warmup Iteration   2: 298947295.855 ops/s
# Warmup Iteration   3: 286372428.498 ops/s
# Warmup Iteration   4: 317321329.133 ops/s
# Warmup Iteration   5: 312304338.420 ops/s
# Warmup Iteration   6: 317451748.343 ops/s
# Warmup Iteration   7: 316660122.785 ops/s
# Warmup Iteration   8: 317755006.046 ops/s
# Warmup Iteration   9: 318356659.663 ops/s
# Warmup Iteration  10: 316313938.155 ops/s
# Warmup Iteration  11: 317654283.381 ops/s
# Warmup Iteration  12: 317522541.146 ops/s
# Warmup Iteration  13: 316828590.848 ops/s
# Warmup Iteration  14: 316751232.452 ops/s
# Warmup Iteration  15: 314116930.617 ops/s
# Warmup Iteration  16: 316614950.080 ops/s
# Warmup Iteration  17: 316993527.095 ops/s
# Warmup Iteration  18: 317323334.967 ops/s
# Warmup Iteration  19: 316917514.946 ops/s
# Warmup Iteration  20: 314235906.491 ops/s
# Warmup Iteration  21: 316140800.559 ops/s
# Warmup Iteration  22: 317062784.453 ops/s
# Warmup Iteration  23: 317313470.329 ops/s
# Warmup Iteration  24: 316427189.911 ops/s
# Warmup Iteration  25: 317508286.843 ops/s
# Warmup Iteration  26: 316828816.832 ops/s
# Warmup Iteration  27: 316554863.791 ops/s
# Warmup Iteration  28: 317727790.840 ops/s
# Warmup Iteration  29: 317109054.189 ops/s
# Warmup Iteration  30: 316442036.452 ops/s
Iteration   1: 316838656.593 ops/s
Iteration   2: 316712095.807 ops/s
Iteration   3: 317003216.672 ops/s
Iteration   4: 315164855.075 ops/s
Iteration   5: 317822505.332 ops/s
Iteration   6: 310315693.245 ops/s
Iteration   7: 318497302.403 ops/s
Iteration   8: 317651488.896 ops/s
Iteration   9: 316188880.946 ops/s
Iteration  10: 316380468.245 ops/s
Iteration  11: 311958464.680 ops/s
Iteration  12: 319370629.030 ops/s
Iteration  13: 316966816.863 ops/s
Iteration  14: 315807828.301 ops/s
Iteration  15: 316245480.110 ops/s
Iteration  16: 315659398.446 ops/s
Iteration  17: 316461805.952 ops/s
Iteration  18: 316144252.002 ops/s
Iteration  19: 313428175.814 ops/s
Iteration  20: 315059858.960 ops/s
Iteration  21: 314759547.899 ops/s
Iteration  22: 315548362.684 ops/s
Iteration  23: 317531394.164 ops/s
Iteration  24: 316625447.484 ops/s
Iteration  25: 315518490.293 ops/s
Iteration  26: 316314566.172 ops/s
Iteration  27: 316201164.899 ops/s
Iteration  28: 316901442.556 ops/s
Iteration  29: 317550591.619 ops/s
Iteration  30: 317517572.064 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_testHashCode":
  316138215.107 ±(99.9%) 1203268.890 ops/s [Average]
  (min, avg, max) = (310315693.245, 316138215.107, 319370629.030), stdev = 1800996.366
  CI (99.9%): [314934946.216, 317341483.997] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt          Score         Error  Units
SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_testHashCode  thrpt   30  316138215.107 ± 1203268.890  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 173742711.259 ops/s
# Warmup Iteration   2: 297536939.054 ops/s
# Warmup Iteration   3: 281044226.524 ops/s
# Warmup Iteration   4: 314630162.385 ops/s
# Warmup Iteration   5: 310960323.120 ops/s
# Warmup Iteration   6: 313592981.193 ops/s
# Warmup Iteration   7: 312907276.910 ops/s
# Warmup Iteration   8: 313445064.728 ops/s
# Warmup Iteration   9: 312935108.649 ops/s
# Warmup Iteration  10: 311406555.260 ops/s
# Warmup Iteration  11: 313343346.840 ops/s
# Warmup Iteration  12: 313826328.548 ops/s
# Warmup Iteration  13: 313105333.363 ops/s
# Warmup Iteration  14: 312623856.337 ops/s
# Warmup Iteration  15: 313246628.200 ops/s
# Warmup Iteration  16: 310860351.017 ops/s
# Warmup Iteration  17: 312191024.556 ops/s
# Warmup Iteration  18: 310881152.953 ops/s
# Warmup Iteration  19: 312936857.539 ops/s
# Warmup Iteration  20: 313332469.362 ops/s
# Warmup Iteration  21: 314382620.084 ops/s
# Warmup Iteration  22: 312681912.046 ops/s
# Warmup Iteration  23: 312956417.143 ops/s
# Warmup Iteration  24: 314092952.152 ops/s
# Warmup Iteration  25: 311011613.144 ops/s
# Warmup Iteration  26: 315211035.101 ops/s
# Warmup Iteration  27: 315337775.384 ops/s
# Warmup Iteration  28: 313229359.934 ops/s
# Warmup Iteration  29: 314781420.018 ops/s
# Warmup Iteration  30: 312792741.991 ops/s
Iteration   1: 310233188.197 ops/s
Iteration   2: 313590651.835 ops/s
Iteration   3: 314684741.191 ops/s
Iteration   4: 314554281.578 ops/s
Iteration   5: 316234243.165 ops/s
Iteration   6: 313715195.318 ops/s
Iteration   7: 313647554.622 ops/s
Iteration   8: 312650651.122 ops/s
Iteration   9: 313100492.899 ops/s
Iteration  10: 314743883.335 ops/s
Iteration  11: 315298784.952 ops/s
Iteration  12: 315157485.270 ops/s
Iteration  13: 316178961.092 ops/s
Iteration  14: 315891039.091 ops/s
Iteration  15: 314072358.806 ops/s
Iteration  16: 310660165.879 ops/s
Iteration  17: 311301627.593 ops/s
Iteration  18: 311749596.756 ops/s
Iteration  19: 310185552.189 ops/s
Iteration  20: 313573440.774 ops/s
Iteration  21: 314211843.900 ops/s
Iteration  22: 312260084.080 ops/s
Iteration  23: 311846048.263 ops/s
Iteration  24: 311953769.009 ops/s
Iteration  25: 313633063.501 ops/s
Iteration  26: 310555327.820 ops/s
Iteration  27: 312646297.480 ops/s
Iteration  28: 314128064.740 ops/s
Iteration  29: 315299361.538 ops/s
Iteration  30: 314260662.698 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_testToString":
  313400613.956 ±(99.9%) 1175857.185 ops/s [Average]
  (min, avg, max) = (310185552.189, 313400613.956, 316234243.165), stdev = 1759967.813
  CI (99.9%): [312224756.771, 314576471.142] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt          Score         Error  Units
SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_testToString  thrpt   30  313400613.956 ± 1175857.185  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1433704.328 ops/s
# Warmup Iteration   2: 3039594.552 ops/s
# Warmup Iteration   3: 3196429.301 ops/s
# Warmup Iteration   4: 3836496.595 ops/s
# Warmup Iteration   5: 3826628.690 ops/s
# Warmup Iteration   6: 3827063.691 ops/s
# Warmup Iteration   7: 3823565.061 ops/s
# Warmup Iteration   8: 3831774.045 ops/s
# Warmup Iteration   9: 3833924.600 ops/s
# Warmup Iteration  10: 3832869.932 ops/s
# Warmup Iteration  11: 3834648.424 ops/s
# Warmup Iteration  12: 3834330.335 ops/s
# Warmup Iteration  13: 3818376.547 ops/s
# Warmup Iteration  14: 3837618.036 ops/s
# Warmup Iteration  15: 3830948.012 ops/s
# Warmup Iteration  16: 3826571.557 ops/s
# Warmup Iteration  17: 3817271.563 ops/s
# Warmup Iteration  18: 3824321.435 ops/s
# Warmup Iteration  19: 3838563.560 ops/s
# Warmup Iteration  20: 3831875.755 ops/s
# Warmup Iteration  21: 3817571.838 ops/s
# Warmup Iteration  22: 3822337.767 ops/s
# Warmup Iteration  23: 3825174.910 ops/s
# Warmup Iteration  24: 3841612.679 ops/s
# Warmup Iteration  25: 3820322.387 ops/s
# Warmup Iteration  26: 3816684.528 ops/s
# Warmup Iteration  27: 3821579.836 ops/s
# Warmup Iteration  28: 3819607.754 ops/s
# Warmup Iteration  29: 3827627.458 ops/s
# Warmup Iteration  30: 3824696.569 ops/s
Iteration   1: 3821282.600 ops/s
Iteration   2: 3799634.002 ops/s
Iteration   3: 3830697.197 ops/s
Iteration   4: 3830438.737 ops/s
Iteration   5: 3825256.486 ops/s
Iteration   6: 3831308.170 ops/s
Iteration   7: 3831729.376 ops/s
Iteration   8: 3815632.597 ops/s
Iteration   9: 3823260.225 ops/s
Iteration  10: 3804452.259 ops/s
Iteration  11: 3817215.942 ops/s
Iteration  12: 3839161.053 ops/s
Iteration  13: 3825508.165 ops/s
Iteration  14: 3834981.344 ops/s
Iteration  15: 3821435.514 ops/s
Iteration  16: 3814593.309 ops/s
Iteration  17: 3825855.941 ops/s
Iteration  18: 3839604.681 ops/s
Iteration  19: 3829125.419 ops/s
Iteration  20: 3826279.616 ops/s
Iteration  21: 3818131.618 ops/s
Iteration  22: 3824750.487 ops/s
Iteration  23: 3766050.777 ops/s
Iteration  24: 3829085.098 ops/s
Iteration  25: 3832493.921 ops/s
Iteration  26: 3767526.352 ops/s
Iteration  27: 3814372.265 ops/s
Iteration  28: 3820045.112 ops/s
Iteration  29: 3818622.659 ops/s
Iteration  30: 3823160.271 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_toArray":
  3820056.373 ±(99.9%) 11356.434 ops/s [Average]
  (min, avg, max) = (3766050.777, 3820056.373, 3839604.681), stdev = 16997.777
  CI (99.9%): [3808699.939, 3831412.807] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_toArray  thrpt   30  3820056.373 ± 11356.434  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_toBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_toBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1058973.789 ops/s
# Warmup Iteration   2: 2273276.890 ops/s
# Warmup Iteration   3: 2421931.290 ops/s
# Warmup Iteration   4: 2739618.229 ops/s
# Warmup Iteration   5: 2801069.257 ops/s
# Warmup Iteration   6: 2813036.076 ops/s
# Warmup Iteration   7: 2794088.222 ops/s
# Warmup Iteration   8: 2805204.752 ops/s
# Warmup Iteration   9: 2813709.437 ops/s
# Warmup Iteration  10: 2811237.746 ops/s
# Warmup Iteration  11: 2808800.550 ops/s
# Warmup Iteration  12: 2810271.879 ops/s
# Warmup Iteration  13: 2789718.967 ops/s
# Warmup Iteration  14: 2793832.998 ops/s
# Warmup Iteration  15: 2803680.280 ops/s
# Warmup Iteration  16: 2789691.581 ops/s
# Warmup Iteration  17: 2811471.415 ops/s
# Warmup Iteration  18: 2806031.573 ops/s
# Warmup Iteration  19: 2796435.927 ops/s
# Warmup Iteration  20: 2807631.120 ops/s
# Warmup Iteration  21: 2790986.955 ops/s
# Warmup Iteration  22: 2800190.590 ops/s
# Warmup Iteration  23: 2809309.378 ops/s
# Warmup Iteration  24: 2794310.834 ops/s
# Warmup Iteration  25: 2816932.257 ops/s
# Warmup Iteration  26: 2801975.800 ops/s
# Warmup Iteration  27: 2805213.226 ops/s
# Warmup Iteration  28: 2806405.692 ops/s
# Warmup Iteration  29: 2800851.172 ops/s
# Warmup Iteration  30: 2767487.400 ops/s
Iteration   1: 2807524.567 ops/s
Iteration   2: 2806976.233 ops/s
Iteration   3: 2810569.215 ops/s
Iteration   4: 2805043.837 ops/s
Iteration   5: 2802164.282 ops/s
Iteration   6: 2811304.558 ops/s
Iteration   7: 2807080.548 ops/s
Iteration   8: 2811822.450 ops/s
Iteration   9: 2805973.568 ops/s
Iteration  10: 2802340.320 ops/s
Iteration  11: 2805105.463 ops/s
Iteration  12: 2802501.708 ops/s
Iteration  13: 2805142.968 ops/s
Iteration  14: 2798718.168 ops/s
Iteration  15: 2800882.679 ops/s
Iteration  16: 2798095.638 ops/s
Iteration  17: 2765766.153 ops/s
Iteration  18: 2802236.477 ops/s
Iteration  19: 2803720.605 ops/s
Iteration  20: 2807683.839 ops/s
Iteration  21: 2810090.464 ops/s
Iteration  22: 2789157.425 ops/s
Iteration  23: 2805650.543 ops/s
Iteration  24: 2806640.870 ops/s
Iteration  25: 2813354.749 ops/s
Iteration  26: 2805513.201 ops/s
Iteration  27: 2811398.613 ops/s
Iteration  28: 2814810.939 ops/s
Iteration  29: 2800135.810 ops/s
Iteration  30: 2803647.904 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_toBag":
  2804035.127 ±(99.9%) 5948.608 ops/s [Average]
  (min, avg, max) = (2765766.153, 2804035.127, 2814810.939), stdev = 8903.597
  CI (99.9%): [2798086.518, 2809983.735] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_toBag  thrpt   30  2804035.127 ± 5948.608  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1166626.660 ops/s
# Warmup Iteration   2: 2586196.872 ops/s
# Warmup Iteration   3: 2455067.586 ops/s
# Warmup Iteration   4: 2972960.227 ops/s
# Warmup Iteration   5: 2947051.618 ops/s
# Warmup Iteration   6: 2969055.172 ops/s
# Warmup Iteration   7: 2970388.524 ops/s
# Warmup Iteration   8: 2963700.072 ops/s
# Warmup Iteration   9: 2964260.142 ops/s
# Warmup Iteration  10: 2949882.660 ops/s
# Warmup Iteration  11: 2965892.817 ops/s
# Warmup Iteration  12: 2948248.183 ops/s
# Warmup Iteration  13: 2966577.114 ops/s
# Warmup Iteration  14: 2963160.881 ops/s
# Warmup Iteration  15: 2962804.994 ops/s
# Warmup Iteration  16: 2965155.362 ops/s
# Warmup Iteration  17: 2968207.702 ops/s
# Warmup Iteration  18: 2969693.916 ops/s
# Warmup Iteration  19: 2964347.076 ops/s
# Warmup Iteration  20: 2968932.072 ops/s
# Warmup Iteration  21: 2945517.074 ops/s
# Warmup Iteration  22: 2967952.154 ops/s
# Warmup Iteration  23: 2963780.985 ops/s
# Warmup Iteration  24: 2963296.493 ops/s
# Warmup Iteration  25: 2972315.578 ops/s
# Warmup Iteration  26: 2967169.942 ops/s
# Warmup Iteration  27: 2975447.503 ops/s
# Warmup Iteration  28: 2970881.341 ops/s
# Warmup Iteration  29: 2967455.043 ops/s
# Warmup Iteration  30: 2964651.892 ops/s
Iteration   1: 2972845.298 ops/s
Iteration   2: 2973480.469 ops/s
Iteration   3: 2965893.361 ops/s
Iteration   4: 2965468.669 ops/s
Iteration   5: 2966536.587 ops/s
Iteration   6: 2966541.124 ops/s
Iteration   7: 2970877.635 ops/s
Iteration   8: 2965495.489 ops/s
Iteration   9: 2976336.710 ops/s
Iteration  10: 2973225.253 ops/s
Iteration  11: 2978507.279 ops/s
Iteration  12: 2964318.790 ops/s
Iteration  13: 2967460.449 ops/s
Iteration  14: 2966295.396 ops/s
Iteration  15: 2976009.170 ops/s
Iteration  16: 2963784.374 ops/s
Iteration  17: 2974115.169 ops/s
Iteration  18: 2971275.821 ops/s
Iteration  19: 2971260.971 ops/s
Iteration  20: 2966627.948 ops/s
Iteration  21: 2959313.652 ops/s
Iteration  22: 2960067.523 ops/s
Iteration  23: 2974625.877 ops/s
Iteration  24: 2915510.561 ops/s
Iteration  25: 2965909.439 ops/s
Iteration  26: 2972418.710 ops/s
Iteration  27: 2962864.900 ops/s
Iteration  28: 2968092.147 ops/s
Iteration  29: 2967785.474 ops/s
Iteration  30: 2970421.293 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_toList":
  2967112.185 ±(99.9%) 7255.074 ops/s [Average]
  (min, avg, max) = (2915510.561, 2967112.185, 2978507.279), stdev = 10859.055
  CI (99.9%): [2959857.110, 2974367.259] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_toList  thrpt   30  2967112.185 ± 7255.074  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_toSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_toSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1552614.017 ops/s
# Warmup Iteration   2: 3503194.690 ops/s
# Warmup Iteration   3: 3444640.188 ops/s
# Warmup Iteration   4: 4157877.287 ops/s
# Warmup Iteration   5: 4169477.614 ops/s
# Warmup Iteration   6: 4156704.732 ops/s
# Warmup Iteration   7: 4160209.210 ops/s
# Warmup Iteration   8: 4156660.554 ops/s
# Warmup Iteration   9: 4162085.669 ops/s
# Warmup Iteration  10: 4154974.289 ops/s
# Warmup Iteration  11: 4169990.189 ops/s
# Warmup Iteration  12: 4157744.813 ops/s
# Warmup Iteration  13: 4160303.830 ops/s
# Warmup Iteration  14: 4165674.537 ops/s
# Warmup Iteration  15: 4169935.100 ops/s
# Warmup Iteration  16: 4156890.384 ops/s
# Warmup Iteration  17: 4161834.177 ops/s
# Warmup Iteration  18: 4158229.652 ops/s
# Warmup Iteration  19: 4152450.949 ops/s
# Warmup Iteration  20: 4172068.424 ops/s
# Warmup Iteration  21: 4153507.737 ops/s
# Warmup Iteration  22: 4159298.492 ops/s
# Warmup Iteration  23: 4167780.289 ops/s
# Warmup Iteration  24: 4157007.934 ops/s
# Warmup Iteration  25: 4167449.498 ops/s
# Warmup Iteration  26: 4156784.876 ops/s
# Warmup Iteration  27: 4159490.234 ops/s
# Warmup Iteration  28: 4159122.073 ops/s
# Warmup Iteration  29: 4163620.036 ops/s
# Warmup Iteration  30: 4142599.386 ops/s
Iteration   1: 4162876.421 ops/s
Iteration   2: 4160941.981 ops/s
Iteration   3: 4159257.016 ops/s
Iteration   4: 4158701.014 ops/s
Iteration   5: 4097397.573 ops/s
Iteration   6: 4164673.175 ops/s
Iteration   7: 4169136.273 ops/s
Iteration   8: 4107050.852 ops/s
Iteration   9: 4101999.484 ops/s
Iteration  10: 4167060.227 ops/s
Iteration  11: 4106677.604 ops/s
Iteration  12: 4175382.325 ops/s
Iteration  13: 4109144.569 ops/s
Iteration  14: 4156810.671 ops/s
Iteration  15: 4146048.648 ops/s
Iteration  16: 4171209.020 ops/s
Iteration  17: 4168825.166 ops/s
Iteration  18: 4169592.237 ops/s
Iteration  19: 4164074.929 ops/s
Iteration  20: 4156400.708 ops/s
Iteration  21: 4171488.526 ops/s
Iteration  22: 4159526.811 ops/s
Iteration  23: 4163345.449 ops/s
Iteration  24: 4164482.489 ops/s
Iteration  25: 4158820.044 ops/s
Iteration  26: 4161459.194 ops/s
Iteration  27: 4158745.279 ops/s
Iteration  28: 4169485.918 ops/s
Iteration  29: 4160448.121 ops/s
Iteration  30: 4160798.386 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_toSet":
  4153395.337 ±(99.9%) 15396.185 ops/s [Average]
  (min, avg, max) = (4097397.573, 4153395.337, 4175382.325), stdev = 23044.286
  CI (99.9%): [4137999.152, 4168791.522] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_toSet  thrpt   30  4153395.337 ± 15396.185  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_with$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_with

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 697971.531 ops/s
# Warmup Iteration   2: 782303.611 ops/s
# Warmup Iteration   3: 1011159.908 ops/s
# Warmup Iteration   4: 1011717.686 ops/s
# Warmup Iteration   5: 1006146.852 ops/s
# Warmup Iteration   6: 1010573.464 ops/s
# Warmup Iteration   7: 1008826.867 ops/s
# Warmup Iteration   8: 1006520.022 ops/s
# Warmup Iteration   9: 1008388.426 ops/s
# Warmup Iteration  10: 843909.827 ops/s
# Warmup Iteration  11: 1010606.672 ops/s
# Warmup Iteration  12: 1000177.557 ops/s
# Warmup Iteration  13: 1007579.119 ops/s
# Warmup Iteration  14: 1007402.496 ops/s
# Warmup Iteration  15: 1006834.367 ops/s
# Warmup Iteration  16: 1010910.213 ops/s
# Warmup Iteration  17: 1052227.899 ops/s
# Warmup Iteration  18: 1069584.221 ops/s
# Warmup Iteration  19: 1068236.828 ops/s
# Warmup Iteration  20: 1068714.326 ops/s
# Warmup Iteration  21: 1070310.295 ops/s
# Warmup Iteration  22: 1070523.824 ops/s
# Warmup Iteration  23: 1070631.713 ops/s
# Warmup Iteration  24: 1070834.668 ops/s
# Warmup Iteration  25: 1071482.907 ops/s
# Warmup Iteration  26: 1069838.819 ops/s
# Warmup Iteration  27: 1073151.181 ops/s
# Warmup Iteration  28: 1068611.582 ops/s
# Warmup Iteration  29: 1069098.131 ops/s
# Warmup Iteration  30: 1069901.598 ops/s
Iteration   1: 1070060.657 ops/s
Iteration   2: 1070483.018 ops/s
Iteration   3: 1069958.839 ops/s
Iteration   4: 1069814.973 ops/s
Iteration   5: 1071013.599 ops/s
Iteration   6: 1070701.691 ops/s
Iteration   7: 1069021.331 ops/s
Iteration   8: 1067729.043 ops/s
Iteration   9: 1067930.947 ops/s
Iteration  10: 1070875.673 ops/s
Iteration  11: 1061850.685 ops/s
Iteration  12: 1068811.199 ops/s
Iteration  13: 1068606.925 ops/s
Iteration  14: 1062431.941 ops/s
Iteration  15: 1068203.164 ops/s
Iteration  16: 1068524.524 ops/s
Iteration  17: 1068928.483 ops/s
Iteration  18: 1068725.662 ops/s
Iteration  19: 1072064.563 ops/s
Iteration  20: 1070320.330 ops/s
Iteration  21: 1066326.192 ops/s
Iteration  22: 1067410.630 ops/s
Iteration  23: 1064977.774 ops/s
Iteration  24: 1072502.236 ops/s
Iteration  25: 1067536.662 ops/s
Iteration  26: 1066209.312 ops/s
Iteration  27: 1065728.814 ops/s
Iteration  28: 1064164.639 ops/s
Iteration  29: 1065951.435 ops/s
Iteration  30: 1069407.796 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_with":
  1068209.091 ±(99.9%) 1743.450 ops/s [Average]
  (min, avg, max) = (1061850.685, 1068209.091, 1072502.236), stdev = 2609.515
  CI (99.9%): [1066465.641, 1069952.542] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_with  thrpt   30  1068209.091 ± 1743.450  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_withAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_withAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 682438.826 ops/s
# Warmup Iteration   2: 762807.567 ops/s
# Warmup Iteration   3: 997361.000 ops/s
# Warmup Iteration   4: 996812.977 ops/s
# Warmup Iteration   5: 993435.457 ops/s
# Warmup Iteration   6: 994875.423 ops/s
# Warmup Iteration   7: 992757.579 ops/s
# Warmup Iteration   8: 996166.395 ops/s
# Warmup Iteration   9: 985202.782 ops/s
# Warmup Iteration  10: 828604.838 ops/s
# Warmup Iteration  11: 995587.510 ops/s
# Warmup Iteration  12: 985693.723 ops/s
# Warmup Iteration  13: 993911.171 ops/s
# Warmup Iteration  14: 996437.953 ops/s
# Warmup Iteration  15: 988388.718 ops/s
# Warmup Iteration  16: 994787.350 ops/s
# Warmup Iteration  17: 1047347.826 ops/s
# Warmup Iteration  18: 1052913.054 ops/s
# Warmup Iteration  19: 1049819.474 ops/s
# Warmup Iteration  20: 1051630.022 ops/s
# Warmup Iteration  21: 1051337.753 ops/s
# Warmup Iteration  22: 1050181.820 ops/s
# Warmup Iteration  23: 1048739.697 ops/s
# Warmup Iteration  24: 1051392.712 ops/s
# Warmup Iteration  25: 1050844.878 ops/s
# Warmup Iteration  26: 1051313.269 ops/s
# Warmup Iteration  27: 1047537.413 ops/s
# Warmup Iteration  28: 1047826.953 ops/s
# Warmup Iteration  29: 1047828.300 ops/s
# Warmup Iteration  30: 1039307.650 ops/s
Iteration   1: 1050754.325 ops/s
Iteration   2: 1048675.456 ops/s
Iteration   3: 1049192.096 ops/s
Iteration   4: 1051604.279 ops/s
Iteration   5: 1048629.812 ops/s
Iteration   6: 1048083.987 ops/s
Iteration   7: 1051435.439 ops/s
Iteration   8: 1052229.533 ops/s
Iteration   9: 1050132.525 ops/s
Iteration  10: 1045079.947 ops/s
Iteration  11: 1050562.961 ops/s
Iteration  12: 1043650.011 ops/s
Iteration  13: 1050972.743 ops/s
Iteration  14: 1046066.160 ops/s
Iteration  15: 1048664.105 ops/s
Iteration  16: 1050007.613 ops/s
Iteration  17: 1044858.765 ops/s
Iteration  18: 1048869.511 ops/s
Iteration  19: 1051997.179 ops/s
Iteration  20: 1049542.554 ops/s
Iteration  21: 1052792.766 ops/s
Iteration  22: 1054255.583 ops/s
Iteration  23: 1054080.116 ops/s
Iteration  24: 1048325.951 ops/s
Iteration  25: 1047356.464 ops/s
Iteration  26: 1033806.322 ops/s
Iteration  27: 1051366.012 ops/s
Iteration  28: 1051285.762 ops/s
Iteration  29: 1054459.156 ops/s
Iteration  30: 1049196.100 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_withAll":
  1049264.441 ±(99.9%) 2647.885 ops/s [Average]
  (min, avg, max) = (1033806.322, 1049264.441, 1054459.156), stdev = 3963.230
  CI (99.9%): [1046616.556, 1051912.326] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_withAll  thrpt   30  1049264.441 ± 2647.885  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_without$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_without

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1787135.098 ops/s
# Warmup Iteration   2: 4089786.588 ops/s
# Warmup Iteration   3: 4186279.970 ops/s
# Warmup Iteration   4: 4824422.878 ops/s
# Warmup Iteration   5: 4935820.107 ops/s
# Warmup Iteration   6: 4946344.344 ops/s
# Warmup Iteration   7: 4943233.957 ops/s
# Warmup Iteration   8: 4938010.038 ops/s
# Warmup Iteration   9: 4940739.597 ops/s
# Warmup Iteration  10: 4927369.251 ops/s
# Warmup Iteration  11: 4939307.026 ops/s
# Warmup Iteration  12: 4948796.874 ops/s
# Warmup Iteration  13: 4930014.772 ops/s
# Warmup Iteration  14: 4915188.603 ops/s
# Warmup Iteration  15: 4946597.367 ops/s
# Warmup Iteration  16: 4944193.319 ops/s
# Warmup Iteration  17: 4928511.238 ops/s
# Warmup Iteration  18: 4935560.453 ops/s
# Warmup Iteration  19: 4929109.788 ops/s
# Warmup Iteration  20: 4934547.735 ops/s
# Warmup Iteration  21: 4932482.595 ops/s
# Warmup Iteration  22: 4934312.088 ops/s
# Warmup Iteration  23: 4932372.767 ops/s
# Warmup Iteration  24: 4937934.317 ops/s
# Warmup Iteration  25: 4921916.361 ops/s
# Warmup Iteration  26: 4935329.096 ops/s
# Warmup Iteration  27: 4933546.653 ops/s
# Warmup Iteration  28: 4924028.642 ops/s
# Warmup Iteration  29: 4940021.457 ops/s
# Warmup Iteration  30: 4945862.994 ops/s
Iteration   1: 4938243.826 ops/s
Iteration   2: 4881561.250 ops/s
Iteration   3: 4943850.067 ops/s
Iteration   4: 4927301.036 ops/s
Iteration   5: 4928105.866 ops/s
Iteration   6: 4937918.696 ops/s
Iteration   7: 4933347.968 ops/s
Iteration   8: 4960996.433 ops/s
Iteration   9: 4933013.078 ops/s
Iteration  10: 4925672.512 ops/s
Iteration  11: 4919547.018 ops/s
Iteration  12: 4941527.457 ops/s
Iteration  13: 4931621.658 ops/s
Iteration  14: 4900553.241 ops/s
Iteration  15: 4929885.091 ops/s
Iteration  16: 4940810.221 ops/s
Iteration  17: 4930256.663 ops/s
Iteration  18: 4944172.881 ops/s
Iteration  19: 4940154.093 ops/s
Iteration  20: 4947333.524 ops/s
Iteration  21: 4928136.547 ops/s
Iteration  22: 4938317.905 ops/s
Iteration  23: 4929761.585 ops/s
Iteration  24: 4918575.500 ops/s
Iteration  25: 4933860.999 ops/s
Iteration  26: 4935011.519 ops/s
Iteration  27: 4923409.305 ops/s
Iteration  28: 4943047.644 ops/s
Iteration  29: 4945074.196 ops/s
Iteration  30: 4917746.053 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_without":
  4931627.128 ±(99.9%) 9822.055 ops/s [Average]
  (min, avg, max) = (4881561.250, 4931627.128, 4960996.433), stdev = 14701.191
  CI (99.9%): [4921805.072, 4941449.183] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_without  thrpt   30  4931627.128 ± 9822.055  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_withoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_withoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1781467.214 ops/s
# Warmup Iteration   2: 3995532.814 ops/s
# Warmup Iteration   3: 3867158.065 ops/s
# Warmup Iteration   4: 4670464.676 ops/s
# Warmup Iteration   5: 4668624.162 ops/s
# Warmup Iteration   6: 4662788.415 ops/s
# Warmup Iteration   7: 4634468.136 ops/s
# Warmup Iteration   8: 4653737.310 ops/s
# Warmup Iteration   9: 4650206.018 ops/s
# Warmup Iteration  10: 4667464.897 ops/s
# Warmup Iteration  11: 4662343.361 ops/s
# Warmup Iteration  12: 4669419.404 ops/s
# Warmup Iteration  13: 4663763.534 ops/s
# Warmup Iteration  14: 4655304.848 ops/s
# Warmup Iteration  15: 4658189.861 ops/s
# Warmup Iteration  16: 4672913.415 ops/s
# Warmup Iteration  17: 4649892.387 ops/s
# Warmup Iteration  18: 4665435.183 ops/s
# Warmup Iteration  19: 4657889.676 ops/s
# Warmup Iteration  20: 4662760.625 ops/s
# Warmup Iteration  21: 4625103.722 ops/s
# Warmup Iteration  22: 4644249.433 ops/s
# Warmup Iteration  23: 4656870.092 ops/s
# Warmup Iteration  24: 4663530.000 ops/s
# Warmup Iteration  25: 4624445.056 ops/s
# Warmup Iteration  26: 4653959.727 ops/s
# Warmup Iteration  27: 4662504.583 ops/s
# Warmup Iteration  28: 4647349.741 ops/s
# Warmup Iteration  29: 4666090.371 ops/s
# Warmup Iteration  30: 4661386.886 ops/s
Iteration   1: 4666651.313 ops/s
Iteration   2: 4653021.779 ops/s
Iteration   3: 4632633.922 ops/s
Iteration   4: 4668547.690 ops/s
Iteration   5: 4669765.352 ops/s
Iteration   6: 4654589.020 ops/s
Iteration   7: 4656536.597 ops/s
Iteration   8: 4641010.545 ops/s
Iteration   9: 4663276.242 ops/s
Iteration  10: 4669774.085 ops/s
Iteration  11: 4653026.569 ops/s
Iteration  12: 4649162.035 ops/s
Iteration  13: 4660296.555 ops/s
Iteration  14: 4654487.708 ops/s
Iteration  15: 4670273.837 ops/s
Iteration  16: 4664148.982 ops/s
Iteration  17: 4671650.857 ops/s
Iteration  18: 4641047.677 ops/s
Iteration  19: 4656377.335 ops/s
Iteration  20: 4672482.056 ops/s
Iteration  21: 4664493.288 ops/s
Iteration  22: 4657739.332 ops/s
Iteration  23: 4665216.516 ops/s
Iteration  24: 4643324.303 ops/s
Iteration  25: 4649471.273 ops/s
Iteration  26: 4654459.300 ops/s
Iteration  27: 4658788.722 ops/s
Iteration  28: 4678639.325 ops/s
Iteration  29: 4661503.138 ops/s
Iteration  30: 4655719.474 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_withoutAll":
  4658603.828 ±(99.9%) 7110.509 ops/s [Average]
  (min, avg, max) = (4632633.922, 4658603.828, 4678639.325), stdev = 10642.676
  CI (99.9%): [4651493.319, 4665714.337] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
SynchronizedIntBooleanMapValuesTest._Benchmark.benchmark_withoutAll  thrpt   30  4658603.828 ± 7110.509  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 681481.923 ops/s
# Warmup Iteration   2: 771295.476 ops/s
# Warmup Iteration   3: 985631.011 ops/s
# Warmup Iteration   4: 985191.857 ops/s
# Warmup Iteration   5: 984516.315 ops/s
# Warmup Iteration   6: 974719.996 ops/s
# Warmup Iteration   7: 984476.246 ops/s
# Warmup Iteration   8: 985310.379 ops/s
# Warmup Iteration   9: 986968.854 ops/s
# Warmup Iteration  10: 822276.140 ops/s
# Warmup Iteration  11: 987430.350 ops/s
# Warmup Iteration  12: 983954.250 ops/s
# Warmup Iteration  13: 987364.815 ops/s
# Warmup Iteration  14: 978692.765 ops/s
# Warmup Iteration  15: 969914.448 ops/s
# Warmup Iteration  16: 986669.374 ops/s
# Warmup Iteration  17: 1040789.994 ops/s
# Warmup Iteration  18: 1038563.598 ops/s
# Warmup Iteration  19: 1041212.667 ops/s
# Warmup Iteration  20: 1036689.576 ops/s
# Warmup Iteration  21: 1038220.783 ops/s
# Warmup Iteration  22: 1040412.889 ops/s
# Warmup Iteration  23: 1039258.120 ops/s
# Warmup Iteration  24: 1038709.931 ops/s
# Warmup Iteration  25: 1036981.449 ops/s
# Warmup Iteration  26: 1035001.754 ops/s
# Warmup Iteration  27: 1034352.979 ops/s
# Warmup Iteration  28: 1036946.524 ops/s
# Warmup Iteration  29: 1038057.111 ops/s
# Warmup Iteration  30: 1035693.328 ops/s
Iteration   1: 1035559.623 ops/s
Iteration   2: 1036602.328 ops/s
Iteration   3: 1037355.572 ops/s
Iteration   4: 1035249.635 ops/s
Iteration   5: 1038917.829 ops/s
Iteration   6: 1042626.564 ops/s
Iteration   7: 1030071.931 ops/s
Iteration   8: 1041051.125 ops/s
Iteration   9: 1039566.704 ops/s
Iteration  10: 1036235.807 ops/s
Iteration  11: 1039057.540 ops/s
Iteration  12: 1039871.855 ops/s
Iteration  13: 1038453.575 ops/s
Iteration  14: 1035040.732 ops/s
Iteration  15: 1044360.218 ops/s
Iteration  16: 1032495.834 ops/s
Iteration  17: 1040355.101 ops/s
Iteration  18: 1039800.362 ops/s
Iteration  19: 1036195.178 ops/s
Iteration  20: 1036238.920 ops/s
Iteration  21: 1037447.139 ops/s
Iteration  22: 1037079.583 ops/s
Iteration  23: 1035147.929 ops/s
Iteration  24: 1033755.861 ops/s
Iteration  25: 1034526.505 ops/s
Iteration  26: 1038745.447 ops/s
Iteration  27: 1042729.785 ops/s
Iteration  28: 1039973.544 ops/s
Iteration  29: 1042350.622 ops/s
Iteration  30: 1039666.294 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_add":
  1037884.305 ±(99.9%) 2159.010 ops/s [Average]
  (min, avg, max) = (1030071.931, 1037884.305, 1044360.218), stdev = 3231.505
  CI (99.9%): [1035725.294, 1040043.315] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_add  thrpt   30  1037884.305 ± 2159.010  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_addAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_addAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 681191.334 ops/s
# Warmup Iteration   2: 764445.426 ops/s
# Warmup Iteration   3: 989508.706 ops/s
# Warmup Iteration   4: 988333.217 ops/s
# Warmup Iteration   5: 987740.982 ops/s
# Warmup Iteration   6: 989032.187 ops/s
# Warmup Iteration   7: 986692.387 ops/s
# Warmup Iteration   8: 988412.561 ops/s
# Warmup Iteration   9: 987630.890 ops/s
# Warmup Iteration  10: 831085.572 ops/s
# Warmup Iteration  11: 988719.555 ops/s
# Warmup Iteration  12: 988135.579 ops/s
# Warmup Iteration  13: 982417.716 ops/s
# Warmup Iteration  14: 990114.108 ops/s
# Warmup Iteration  15: 987931.145 ops/s
# Warmup Iteration  16: 988581.581 ops/s
# Warmup Iteration  17: 1050695.303 ops/s
# Warmup Iteration  18: 1048255.297 ops/s
# Warmup Iteration  19: 1049759.891 ops/s
# Warmup Iteration  20: 1049697.269 ops/s
# Warmup Iteration  21: 1049116.784 ops/s
# Warmup Iteration  22: 1049143.043 ops/s
# Warmup Iteration  23: 1048350.939 ops/s
# Warmup Iteration  24: 1047777.914 ops/s
# Warmup Iteration  25: 1047713.715 ops/s
# Warmup Iteration  26: 1045837.858 ops/s
# Warmup Iteration  27: 1044765.147 ops/s
# Warmup Iteration  28: 1050405.382 ops/s
# Warmup Iteration  29: 1046089.983 ops/s
# Warmup Iteration  30: 1050041.786 ops/s
Iteration   1: 1049074.191 ops/s
Iteration   2: 1050147.074 ops/s
Iteration   3: 1048319.489 ops/s
Iteration   4: 1050585.213 ops/s
Iteration   5: 1049403.478 ops/s
Iteration   6: 1050986.755 ops/s
Iteration   7: 1050986.165 ops/s
Iteration   8: 1038272.357 ops/s
Iteration   9: 1049176.759 ops/s
Iteration  10: 1047350.617 ops/s
Iteration  11: 1048173.868 ops/s
Iteration  12: 1047873.850 ops/s
Iteration  13: 1051245.664 ops/s
Iteration  14: 1051784.270 ops/s
Iteration  15: 1050394.855 ops/s
Iteration  16: 1050315.021 ops/s
Iteration  17: 1051370.294 ops/s
Iteration  18: 1050817.580 ops/s
Iteration  19: 1049155.575 ops/s
Iteration  20: 1053977.251 ops/s
Iteration  21: 1054287.766 ops/s
Iteration  22: 1046650.611 ops/s
Iteration  23: 1051208.859 ops/s
Iteration  24: 1048241.018 ops/s
Iteration  25: 1048412.773 ops/s
Iteration  26: 1050907.067 ops/s
Iteration  27: 1052568.568 ops/s
Iteration  28: 1044729.832 ops/s
Iteration  29: 1049398.828 ops/s
Iteration  30: 1050392.260 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_addAllArray":
  1049540.264 ±(99.9%) 1959.892 ops/s [Average]
  (min, avg, max) = (1038272.357, 1049540.264, 1054287.766), stdev = 2933.475
  CI (99.9%): [1047580.371, 1051500.156] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_addAllArray  thrpt   30  1049540.264 ± 1959.892  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_addAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_addAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 672148.164 ops/s
# Warmup Iteration   2: 769498.464 ops/s
# Warmup Iteration   3: 986024.183 ops/s
# Warmup Iteration   4: 985461.601 ops/s
# Warmup Iteration   5: 984627.651 ops/s
# Warmup Iteration   6: 986444.529 ops/s
# Warmup Iteration   7: 986059.972 ops/s
# Warmup Iteration   8: 982919.959 ops/s
# Warmup Iteration   9: 986239.369 ops/s
# Warmup Iteration  10: 818370.409 ops/s
# Warmup Iteration  11: 982649.304 ops/s
# Warmup Iteration  12: 982168.562 ops/s
# Warmup Iteration  13: 983972.427 ops/s
# Warmup Iteration  14: 977936.572 ops/s
# Warmup Iteration  15: 980431.549 ops/s
# Warmup Iteration  16: 981192.514 ops/s
# Warmup Iteration  17: 1039084.753 ops/s
# Warmup Iteration  18: 1037967.221 ops/s
# Warmup Iteration  19: 1037031.811 ops/s
# Warmup Iteration  20: 1037214.965 ops/s
# Warmup Iteration  21: 1036291.008 ops/s
# Warmup Iteration  22: 1038096.401 ops/s
# Warmup Iteration  23: 1038975.353 ops/s
# Warmup Iteration  24: 1037331.005 ops/s
# Warmup Iteration  25: 1038073.123 ops/s
# Warmup Iteration  26: 1039667.786 ops/s
# Warmup Iteration  27: 1041172.080 ops/s
# Warmup Iteration  28: 1040292.767 ops/s
# Warmup Iteration  29: 1038768.435 ops/s
# Warmup Iteration  30: 1036870.168 ops/s
Iteration   1: 1038935.113 ops/s
Iteration   2: 1033932.763 ops/s
Iteration   3: 1037155.671 ops/s
Iteration   4: 1040317.861 ops/s
Iteration   5: 1040595.742 ops/s
Iteration   6: 1039134.868 ops/s
Iteration   7: 1035926.978 ops/s
Iteration   8: 1038458.041 ops/s
Iteration   9: 1032680.397 ops/s
Iteration  10: 1037694.284 ops/s
Iteration  11: 1037127.323 ops/s
Iteration  12: 1041810.468 ops/s
Iteration  13: 1039720.478 ops/s
Iteration  14: 1039409.100 ops/s
Iteration  15: 1038978.096 ops/s
Iteration  16: 1039058.902 ops/s
Iteration  17: 1042197.972 ops/s
Iteration  18: 1040495.894 ops/s
Iteration  19: 1031818.940 ops/s
Iteration  20: 1041525.882 ops/s
Iteration  21: 1039856.175 ops/s
Iteration  22: 1033423.356 ops/s
Iteration  23: 1039666.264 ops/s
Iteration  24: 1037744.036 ops/s
Iteration  25: 1038596.428 ops/s
Iteration  26: 1037848.853 ops/s
Iteration  27: 1036497.749 ops/s
Iteration  28: 1034110.828 ops/s
Iteration  29: 1041061.585 ops/s
Iteration  30: 1040991.232 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_addAllIterable":
  1038225.709 ±(99.9%) 1852.725 ops/s [Average]
  (min, avg, max) = (1031818.940, 1038225.709, 1042197.972), stdev = 2773.072
  CI (99.9%): [1036372.984, 1040078.434] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score      Error  Units
SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_addAllIterable  thrpt   30  1038225.709 ± 1852.725  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 956588.203 ops/s
# Warmup Iteration   2: 2054176.117 ops/s
# Warmup Iteration   3: 2145884.283 ops/s
# Warmup Iteration   4: 2564407.898 ops/s
# Warmup Iteration   5: 2566572.819 ops/s
# Warmup Iteration   6: 2573901.798 ops/s
# Warmup Iteration   7: 2562772.775 ops/s
# Warmup Iteration   8: 2556083.178 ops/s
# Warmup Iteration   9: 2573771.641 ops/s
# Warmup Iteration  10: 2548861.943 ops/s
# Warmup Iteration  11: 2575182.788 ops/s
# Warmup Iteration  12: 2567512.446 ops/s
# Warmup Iteration  13: 2563321.438 ops/s
# Warmup Iteration  14: 2584702.492 ops/s
# Warmup Iteration  15: 2572288.889 ops/s
# Warmup Iteration  16: 2574417.602 ops/s
# Warmup Iteration  17: 2582614.656 ops/s
# Warmup Iteration  18: 2572276.142 ops/s
# Warmup Iteration  19: 2576453.373 ops/s
# Warmup Iteration  20: 2581047.873 ops/s
# Warmup Iteration  21: 2578204.580 ops/s
# Warmup Iteration  22: 2560398.087 ops/s
# Warmup Iteration  23: 2574949.431 ops/s
# Warmup Iteration  24: 2569705.763 ops/s
# Warmup Iteration  25: 2573877.933 ops/s
# Warmup Iteration  26: 2572684.485 ops/s
# Warmup Iteration  27: 2567157.075 ops/s
# Warmup Iteration  28: 2575352.748 ops/s
# Warmup Iteration  29: 2564109.159 ops/s
# Warmup Iteration  30: 2570002.045 ops/s
Iteration   1: 2566044.562 ops/s
Iteration   2: 2583008.502 ops/s
Iteration   3: 2579892.833 ops/s
Iteration   4: 2567046.628 ops/s
Iteration   5: 2562236.866 ops/s
Iteration   6: 2567098.209 ops/s
Iteration   7: 2561433.003 ops/s
Iteration   8: 2574068.308 ops/s
Iteration   9: 2570152.631 ops/s
Iteration  10: 2571379.762 ops/s
Iteration  11: 2567890.034 ops/s
Iteration  12: 2575032.981 ops/s
Iteration  13: 2552172.213 ops/s
Iteration  14: 2554676.091 ops/s
Iteration  15: 2572390.741 ops/s
Iteration  16: 2576838.163 ops/s
Iteration  17: 2567617.195 ops/s
Iteration  18: 2578587.657 ops/s
Iteration  19: 2573095.713 ops/s
Iteration  20: 2570989.475 ops/s
Iteration  21: 2576425.986 ops/s
Iteration  22: 2572044.672 ops/s
Iteration  23: 2580395.877 ops/s
Iteration  24: 2573722.581 ops/s
Iteration  25: 2574828.804 ops/s
Iteration  26: 2572052.942 ops/s
Iteration  27: 2572580.280 ops/s
Iteration  28: 2574141.682 ops/s
Iteration  29: 2569656.619 ops/s
Iteration  30: 2577009.747 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_allSatisfy":
  2571150.359 ±(99.9%) 4650.748 ops/s [Average]
  (min, avg, max) = (2552172.213, 2571150.359, 2583008.502), stdev = 6961.021
  CI (99.9%): [2566499.611, 2575801.106] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_allSatisfy  thrpt   30  2571150.359 ± 4650.748  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 959238.312 ops/s
# Warmup Iteration   2: 2094865.484 ops/s
# Warmup Iteration   3: 2292897.297 ops/s
# Warmup Iteration   4: 2732521.061 ops/s
# Warmup Iteration   5: 2735352.982 ops/s
# Warmup Iteration   6: 2730006.213 ops/s
# Warmup Iteration   7: 2747301.248 ops/s
# Warmup Iteration   8: 2748576.888 ops/s
# Warmup Iteration   9: 2741545.998 ops/s
# Warmup Iteration  10: 2744128.623 ops/s
# Warmup Iteration  11: 2739251.411 ops/s
# Warmup Iteration  12: 2737496.565 ops/s
# Warmup Iteration  13: 2737663.691 ops/s
# Warmup Iteration  14: 2743200.868 ops/s
# Warmup Iteration  15: 2749797.744 ops/s
# Warmup Iteration  16: 2741005.485 ops/s
# Warmup Iteration  17: 2747075.008 ops/s
# Warmup Iteration  18: 2728186.086 ops/s
# Warmup Iteration  19: 2740822.664 ops/s
# Warmup Iteration  20: 2744740.083 ops/s
# Warmup Iteration  21: 2749902.243 ops/s
# Warmup Iteration  22: 2733134.218 ops/s
# Warmup Iteration  23: 2730397.596 ops/s
# Warmup Iteration  24: 2724377.951 ops/s
# Warmup Iteration  25: 2749014.686 ops/s
# Warmup Iteration  26: 2730301.491 ops/s
# Warmup Iteration  27: 2738243.131 ops/s
# Warmup Iteration  28: 2731053.909 ops/s
# Warmup Iteration  29: 2745119.938 ops/s
# Warmup Iteration  30: 2746613.405 ops/s
Iteration   1: 2753641.318 ops/s
Iteration   2: 2745298.618 ops/s
Iteration   3: 2736741.564 ops/s
Iteration   4: 2722933.163 ops/s
Iteration   5: 2729675.935 ops/s
Iteration   6: 2720608.665 ops/s
Iteration   7: 2732757.945 ops/s
Iteration   8: 2742651.593 ops/s
Iteration   9: 2748172.069 ops/s
Iteration  10: 2738510.440 ops/s
Iteration  11: 2735925.941 ops/s
Iteration  12: 2718870.597 ops/s
Iteration  13: 2734181.027 ops/s
Iteration  14: 2730748.454 ops/s
Iteration  15: 2734044.316 ops/s
Iteration  16: 2738256.534 ops/s
Iteration  17: 2741760.436 ops/s
Iteration  18: 2751449.154 ops/s
Iteration  19: 2733620.802 ops/s
Iteration  20: 2722259.253 ops/s
Iteration  21: 2738076.057 ops/s
Iteration  22: 2733728.832 ops/s
Iteration  23: 2723659.566 ops/s
Iteration  24: 2735547.498 ops/s
Iteration  25: 2740694.997 ops/s
Iteration  26: 2742329.818 ops/s
Iteration  27: 2755909.487 ops/s
Iteration  28: 2745315.372 ops/s
Iteration  29: 2727873.179 ops/s
Iteration  30: 2730274.955 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_anySatisfy":
  2736183.920 ±(99.9%) 6398.300 ops/s [Average]
  (min, avg, max) = (2718870.597, 2736183.920, 2755909.487), stdev = 9576.675
  CI (99.9%): [2729785.619, 2742582.220] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_anySatisfy  thrpt   30  2736183.920 ± 6398.300  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 854423.863 ops/s
# Warmup Iteration   2: 1848647.577 ops/s
# Warmup Iteration   3: 1783657.258 ops/s
# Warmup Iteration   4: 2125960.579 ops/s
# Warmup Iteration   5: 2132356.156 ops/s
# Warmup Iteration   6: 2122937.115 ops/s
# Warmup Iteration   7: 2129082.005 ops/s
# Warmup Iteration   8: 2137396.118 ops/s
# Warmup Iteration   9: 2106962.804 ops/s
# Warmup Iteration  10: 2129749.683 ops/s
# Warmup Iteration  11: 2130838.466 ops/s
# Warmup Iteration  12: 2131612.102 ops/s
# Warmup Iteration  13: 2134955.930 ops/s
# Warmup Iteration  14: 2129359.525 ops/s
# Warmup Iteration  15: 2124083.768 ops/s
# Warmup Iteration  16: 2121665.405 ops/s
# Warmup Iteration  17: 2125264.033 ops/s
# Warmup Iteration  18: 2134727.793 ops/s
# Warmup Iteration  19: 2110385.565 ops/s
# Warmup Iteration  20: 2120235.990 ops/s
# Warmup Iteration  21: 2106887.212 ops/s
# Warmup Iteration  22: 2131660.936 ops/s
# Warmup Iteration  23: 2109736.033 ops/s
# Warmup Iteration  24: 2115968.672 ops/s
# Warmup Iteration  25: 2112363.662 ops/s
# Warmup Iteration  26: 2130867.176 ops/s
# Warmup Iteration  27: 2121447.168 ops/s
# Warmup Iteration  28: 2139362.104 ops/s
# Warmup Iteration  29: 2128193.590 ops/s
# Warmup Iteration  30: 2123997.124 ops/s
Iteration   1: 2124739.184 ops/s
Iteration   2: 2121722.435 ops/s
Iteration   3: 2117612.486 ops/s
Iteration   4: 2132903.205 ops/s
Iteration   5: 2132778.535 ops/s
Iteration   6: 2119659.216 ops/s
Iteration   7: 2119164.105 ops/s
Iteration   8: 2137359.476 ops/s
Iteration   9: 2134250.706 ops/s
Iteration  10: 2125733.262 ops/s
Iteration  11: 2137858.790 ops/s
Iteration  12: 2119893.469 ops/s
Iteration  13: 2122431.044 ops/s
Iteration  14: 2123543.593 ops/s
Iteration  15: 2133785.731 ops/s
Iteration  16: 2135294.969 ops/s
Iteration  17: 2117397.778 ops/s
Iteration  18: 2132495.715 ops/s
Iteration  19: 2113017.146 ops/s
Iteration  20: 2128771.712 ops/s
Iteration  21: 2132038.720 ops/s
Iteration  22: 2124095.615 ops/s
Iteration  23: 2132909.745 ops/s
Iteration  24: 2122707.421 ops/s
Iteration  25: 2119137.743 ops/s
Iteration  26: 2112273.014 ops/s
Iteration  27: 2134074.067 ops/s
Iteration  28: 2135971.012 ops/s
Iteration  29: 2115721.406 ops/s
Iteration  30: 2119285.480 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_appendString":
  2125954.226 ±(99.9%) 5195.330 ops/s [Average]
  (min, avg, max) = (2112273.014, 2125954.226, 2137858.790), stdev = 7776.126
  CI (99.9%): [2120758.896, 2131149.556] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_appendString  thrpt   30  2125954.226 ± 5195.330  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_asLazy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_asLazy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2499050.466 ops/s
# Warmup Iteration   2: 5115590.645 ops/s
# Warmup Iteration   3: 6202757.397 ops/s
# Warmup Iteration   4: 5442203.261 ops/s
# Warmup Iteration   5: 5973728.137 ops/s
# Warmup Iteration   6: 6189286.697 ops/s
# Warmup Iteration   7: 6192657.426 ops/s
# Warmup Iteration   8: 6227500.673 ops/s
# Warmup Iteration   9: 6217624.068 ops/s
# Warmup Iteration  10: 6221320.964 ops/s
# Warmup Iteration  11: 6204805.313 ops/s
# Warmup Iteration  12: 6213671.565 ops/s
# Warmup Iteration  13: 6207957.612 ops/s
# Warmup Iteration  14: 6197078.140 ops/s
# Warmup Iteration  15: 6210843.069 ops/s
# Warmup Iteration  16: 6220897.915 ops/s
# Warmup Iteration  17: 6202511.772 ops/s
# Warmup Iteration  18: 6213970.452 ops/s
# Warmup Iteration  19: 6220790.390 ops/s
# Warmup Iteration  20: 6218107.718 ops/s
# Warmup Iteration  21: 6204183.453 ops/s
# Warmup Iteration  22: 6207206.345 ops/s
# Warmup Iteration  23: 6231308.115 ops/s
# Warmup Iteration  24: 6208691.555 ops/s
# Warmup Iteration  25: 6211228.809 ops/s
# Warmup Iteration  26: 6183211.836 ops/s
# Warmup Iteration  27: 6221910.859 ops/s
# Warmup Iteration  28: 6210767.717 ops/s
# Warmup Iteration  29: 6218286.529 ops/s
# Warmup Iteration  30: 6200472.797 ops/s
Iteration   1: 6229434.923 ops/s
Iteration   2: 6223604.389 ops/s
Iteration   3: 6207355.474 ops/s
Iteration   4: 6198192.432 ops/s
Iteration   5: 6220610.420 ops/s
Iteration   6: 6202102.918 ops/s
Iteration   7: 6119027.346 ops/s
Iteration   8: 6206413.452 ops/s
Iteration   9: 6229612.545 ops/s
Iteration  10: 6210852.480 ops/s
Iteration  11: 6212417.559 ops/s
Iteration  12: 6118453.009 ops/s
Iteration  13: 6205177.264 ops/s
Iteration  14: 6207280.776 ops/s
Iteration  15: 6211840.747 ops/s
Iteration  16: 6220188.030 ops/s
Iteration  17: 6211837.605 ops/s
Iteration  18: 6218010.686 ops/s
Iteration  19: 6203950.559 ops/s
Iteration  20: 6211964.622 ops/s
Iteration  21: 6214783.127 ops/s
Iteration  22: 6221606.017 ops/s
Iteration  23: 6209946.738 ops/s
Iteration  24: 6237596.648 ops/s
Iteration  25: 6213276.985 ops/s
Iteration  26: 6207559.239 ops/s
Iteration  27: 6204022.073 ops/s
Iteration  28: 6218952.993 ops/s
Iteration  29: 6146305.658 ops/s
Iteration  30: 6207521.547 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_asLazy":
  6204996.609 ±(99.9%) 18632.463 ops/s [Average]
  (min, avg, max) = (6118453.009, 6204996.609, 6237596.648), stdev = 27888.196
  CI (99.9%): [6186364.145, 6223629.072] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_asLazy  thrpt   30  6204996.609 ± 18632.463  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_asSynchronized$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_asSynchronized

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3485302.864 ops/s
# Warmup Iteration   2: 7121898.860 ops/s
# Warmup Iteration   3: 8148816.837 ops/s
# Warmup Iteration   4: 9528975.475 ops/s
# Warmup Iteration   5: 9527974.921 ops/s
# Warmup Iteration   6: 9510835.593 ops/s
# Warmup Iteration   7: 9549209.421 ops/s
# Warmup Iteration   8: 9519047.047 ops/s
# Warmup Iteration   9: 9404048.940 ops/s
# Warmup Iteration  10: 9500913.772 ops/s
# Warmup Iteration  11: 9518143.228 ops/s
# Warmup Iteration  12: 9517409.562 ops/s
# Warmup Iteration  13: 9411899.346 ops/s
# Warmup Iteration  14: 9518361.696 ops/s
# Warmup Iteration  15: 9588980.689 ops/s
# Warmup Iteration  16: 9549219.210 ops/s
# Warmup Iteration  17: 9529107.908 ops/s
# Warmup Iteration  18: 9541300.354 ops/s
# Warmup Iteration  19: 9587302.007 ops/s
# Warmup Iteration  20: 9514955.354 ops/s
# Warmup Iteration  21: 9592681.782 ops/s
# Warmup Iteration  22: 9524170.816 ops/s
# Warmup Iteration  23: 9533124.613 ops/s
# Warmup Iteration  24: 9416215.461 ops/s
# Warmup Iteration  25: 9250707.338 ops/s
# Warmup Iteration  26: 9557827.839 ops/s
# Warmup Iteration  27: 9604138.238 ops/s
# Warmup Iteration  28: 9504318.276 ops/s
# Warmup Iteration  29: 9584292.251 ops/s
# Warmup Iteration  30: 9529511.667 ops/s
Iteration   1: 9478341.575 ops/s
Iteration   2: 9474459.402 ops/s
Iteration   3: 9501229.038 ops/s
Iteration   4: 9501304.856 ops/s
Iteration   5: 9531065.415 ops/s
Iteration   6: 9569037.607 ops/s
Iteration   7: 9503196.908 ops/s
Iteration   8: 9522428.812 ops/s
Iteration   9: 9522127.672 ops/s
Iteration  10: 9535766.467 ops/s
Iteration  11: 9551567.285 ops/s
Iteration  12: 9499229.698 ops/s
Iteration  13: 9649174.969 ops/s
Iteration  14: 9550413.452 ops/s
Iteration  15: 9612494.015 ops/s
Iteration  16: 9510440.135 ops/s
Iteration  17: 9601841.904 ops/s
Iteration  18: 9563957.034 ops/s
Iteration  19: 9466374.287 ops/s
Iteration  20: 9540226.276 ops/s
Iteration  21: 9526603.454 ops/s
Iteration  22: 9592720.713 ops/s
Iteration  23: 9670566.175 ops/s
Iteration  24: 9530927.985 ops/s
Iteration  25: 9523245.418 ops/s
Iteration  26: 9511728.376 ops/s
Iteration  27: 9440266.771 ops/s
Iteration  28: 9558126.951 ops/s
Iteration  29: 9553447.931 ops/s
Iteration  30: 9584916.820 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_asSynchronized":
  9539240.913 ±(99.9%) 34520.197 ops/s [Average]
  (min, avg, max) = (9440266.771, 9539240.913, 9670566.175), stdev = 51668.209
  CI (99.9%): [9504720.717, 9573761.110] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_asSynchronized  thrpt   30  9539240.913 ± 34520.197  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_asUnmodifiable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_asUnmodifiable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3526729.156 ops/s
# Warmup Iteration   2: 7380282.390 ops/s
# Warmup Iteration   3: 8045232.295 ops/s
# Warmup Iteration   4: 9345435.382 ops/s
# Warmup Iteration   5: 9440713.971 ops/s
# Warmup Iteration   6: 9488733.697 ops/s
# Warmup Iteration   7: 9374560.759 ops/s
# Warmup Iteration   8: 9333114.623 ops/s
# Warmup Iteration   9: 9372087.247 ops/s
# Warmup Iteration  10: 9443708.382 ops/s
# Warmup Iteration  11: 9255340.017 ops/s
# Warmup Iteration  12: 9607222.580 ops/s
# Warmup Iteration  13: 9366009.774 ops/s
# Warmup Iteration  14: 9520521.569 ops/s
# Warmup Iteration  15: 9500805.331 ops/s
# Warmup Iteration  16: 9508523.578 ops/s
# Warmup Iteration  17: 9410592.133 ops/s
# Warmup Iteration  18: 9355831.726 ops/s
# Warmup Iteration  19: 9359400.866 ops/s
# Warmup Iteration  20: 9529811.936 ops/s
# Warmup Iteration  21: 9464739.873 ops/s
# Warmup Iteration  22: 9422925.712 ops/s
# Warmup Iteration  23: 9552078.270 ops/s
# Warmup Iteration  24: 9353802.808 ops/s
# Warmup Iteration  25: 9536505.127 ops/s
# Warmup Iteration  26: 9497762.544 ops/s
# Warmup Iteration  27: 9371843.570 ops/s
# Warmup Iteration  28: 9476185.829 ops/s
# Warmup Iteration  29: 9322620.848 ops/s
# Warmup Iteration  30: 9407975.432 ops/s
Iteration   1: 9504986.430 ops/s
Iteration   2: 9466248.824 ops/s
Iteration   3: 9425281.899 ops/s
Iteration   4: 9527596.072 ops/s
Iteration   5: 9483533.386 ops/s
Iteration   6: 9461841.856 ops/s
Iteration   7: 9456127.276 ops/s
Iteration   8: 9425752.006 ops/s
Iteration   9: 9398870.810 ops/s
Iteration  10: 9303843.837 ops/s
Iteration  11: 9399656.358 ops/s
Iteration  12: 9348847.396 ops/s
Iteration  13: 9514948.969 ops/s
Iteration  14: 9548267.504 ops/s
Iteration  15: 9312753.602 ops/s
Iteration  16: 9599295.978 ops/s
Iteration  17: 9242654.226 ops/s
Iteration  18: 9468859.499 ops/s
Iteration  19: 9486681.854 ops/s
Iteration  20: 9427660.943 ops/s
Iteration  21: 9225177.593 ops/s
Iteration  22: 9499506.294 ops/s
Iteration  23: 9474672.420 ops/s
Iteration  24: 9374739.452 ops/s
Iteration  25: 9569538.920 ops/s
Iteration  26: 9406588.154 ops/s
Iteration  27: 9376246.373 ops/s
Iteration  28: 9550095.039 ops/s
Iteration  29: 9425910.468 ops/s
Iteration  30: 9645780.768 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_asUnmodifiable":
  9445065.474 ±(99.9%) 65394.011 ops/s [Average]
  (min, avg, max) = (9225177.593, 9445065.474, 9645780.768), stdev = 97878.684
  CI (99.9%): [9379671.463, 9510459.484] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_asUnmodifiable  thrpt   30  9445065.474 ± 65394.011  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_booleanIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_booleanIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4638550.070 ops/s
# Warmup Iteration   2: 9930178.159 ops/s
# Warmup Iteration   3: 8465820.587 ops/s
# Warmup Iteration   4: 10117316.607 ops/s
# Warmup Iteration   5: 10144741.222 ops/s
# Warmup Iteration   6: 10139676.135 ops/s
# Warmup Iteration   7: 10016767.408 ops/s
# Warmup Iteration   8: 10124891.588 ops/s
# Warmup Iteration   9: 10017876.444 ops/s
# Warmup Iteration  10: 10128645.459 ops/s
# Warmup Iteration  11: 10107127.961 ops/s
# Warmup Iteration  12: 10104384.554 ops/s
# Warmup Iteration  13: 10119492.871 ops/s
# Warmup Iteration  14: 10038946.613 ops/s
# Warmup Iteration  15: 10120746.296 ops/s
# Warmup Iteration  16: 10091509.928 ops/s
# Warmup Iteration  17: 10005855.780 ops/s
# Warmup Iteration  18: 10137126.096 ops/s
# Warmup Iteration  19: 10143614.620 ops/s
# Warmup Iteration  20: 10132581.614 ops/s
# Warmup Iteration  21: 10150723.699 ops/s
# Warmup Iteration  22: 10135642.477 ops/s
# Warmup Iteration  23: 10104833.315 ops/s
# Warmup Iteration  24: 10123844.947 ops/s
# Warmup Iteration  25: 10139005.567 ops/s
# Warmup Iteration  26: 10132818.340 ops/s
# Warmup Iteration  27: 10124732.730 ops/s
# Warmup Iteration  28: 10127924.688 ops/s
# Warmup Iteration  29: 10129540.015 ops/s
# Warmup Iteration  30: 10148227.345 ops/s
Iteration   1: 10102759.402 ops/s
Iteration   2: 10085666.958 ops/s
Iteration   3: 10109844.675 ops/s
Iteration   4: 10060961.679 ops/s
Iteration   5: 10149444.602 ops/s
Iteration   6: 10021807.644 ops/s
Iteration   7: 10081504.774 ops/s
Iteration   8: 10146044.255 ops/s
Iteration   9: 10168039.431 ops/s
Iteration  10: 10143708.023 ops/s
Iteration  11: 10174897.536 ops/s
Iteration  12: 10140232.169 ops/s
Iteration  13: 10111188.871 ops/s
Iteration  14: 10125317.418 ops/s
Iteration  15: 10148017.424 ops/s
Iteration  16: 10122859.888 ops/s
Iteration  17: 10133449.938 ops/s
Iteration  18: 10120849.380 ops/s
Iteration  19: 10128548.941 ops/s
Iteration  20: 10105409.519 ops/s
Iteration  21: 10142506.469 ops/s
Iteration  22: 10125695.980 ops/s
Iteration  23: 10105770.882 ops/s
Iteration  24: 10115919.873 ops/s
Iteration  25: 10120114.154 ops/s
Iteration  26: 10117738.697 ops/s
Iteration  27: 10097324.537 ops/s
Iteration  28: 10089571.725 ops/s
Iteration  29: 10125563.856 ops/s
Iteration  30: 10151528.911 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_booleanIterator":
  10119076.254 ±(99.9%) 20979.854 ops/s [Average]
  (min, avg, max) = (10021807.644, 10119076.254, 10174897.536), stdev = 31401.661
  CI (99.9%): [10098096.399, 10140056.108] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt         Score       Error  Units
SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_booleanIterator  thrpt   30  10119076.254 ± 20979.854  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 515653.411 ops/s
# Warmup Iteration   2: 723400.432 ops/s
# Warmup Iteration   3: 854060.594 ops/s
# Warmup Iteration   4: 860589.550 ops/s
# Warmup Iteration   5: 857215.379 ops/s
# Warmup Iteration   6: 852632.457 ops/s
# Warmup Iteration   7: 745438.860 ops/s
# Warmup Iteration   8: 833147.557 ops/s
# Warmup Iteration   9: 861365.674 ops/s
# Warmup Iteration  10: 852142.580 ops/s
# Warmup Iteration  11: 860110.312 ops/s
# Warmup Iteration  12: 858990.942 ops/s
# Warmup Iteration  13: 850566.266 ops/s
# Warmup Iteration  14: 852614.469 ops/s
# Warmup Iteration  15: 859073.418 ops/s
# Warmup Iteration  16: 861364.052 ops/s
# Warmup Iteration  17: 910504.452 ops/s
# Warmup Iteration  18: 907494.645 ops/s
# Warmup Iteration  19: 907146.092 ops/s
# Warmup Iteration  20: 905828.785 ops/s
# Warmup Iteration  21: 905448.440 ops/s
# Warmup Iteration  22: 907129.220 ops/s
# Warmup Iteration  23: 907218.025 ops/s
# Warmup Iteration  24: 902874.004 ops/s
# Warmup Iteration  25: 906768.634 ops/s
# Warmup Iteration  26: 909409.845 ops/s
# Warmup Iteration  27: 908626.463 ops/s
# Warmup Iteration  28: 909092.734 ops/s
# Warmup Iteration  29: 906012.072 ops/s
# Warmup Iteration  30: 905565.283 ops/s
Iteration   1: 909827.958 ops/s
Iteration   2: 904965.214 ops/s
Iteration   3: 907173.564 ops/s
Iteration   4: 890227.437 ops/s
Iteration   5: 905907.580 ops/s
Iteration   6: 903890.499 ops/s
Iteration   7: 908853.906 ops/s
Iteration   8: 909049.600 ops/s
Iteration   9: 908872.484 ops/s
Iteration  10: 906270.803 ops/s
Iteration  11: 905296.431 ops/s
Iteration  12: 904334.952 ops/s
Iteration  13: 906625.140 ops/s
Iteration  14: 905385.979 ops/s
Iteration  15: 907572.372 ops/s
Iteration  16: 902700.513 ops/s
Iteration  17: 907988.003 ops/s
Iteration  18: 906196.479 ops/s
Iteration  19: 908824.477 ops/s
Iteration  20: 906226.566 ops/s
Iteration  21: 910198.228 ops/s
Iteration  22: 905720.740 ops/s
Iteration  23: 908620.029 ops/s
Iteration  24: 904036.808 ops/s
Iteration  25: 909948.471 ops/s
Iteration  26: 907376.207 ops/s
Iteration  27: 906479.509 ops/s
Iteration  28: 904565.697 ops/s
Iteration  29: 905698.371 ops/s
Iteration  30: 909755.699 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove":
  906286.324 ±(99.9%) 2435.753 ops/s [Average]
  (min, avg, max) = (890227.437, 906286.324, 910198.228), stdev = 3645.720
  CI (99.9%): [903850.571, 908722.077] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt       Score      Error  Units
SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove  thrpt   30  906286.324 ± 2435.753  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_chunk$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_chunk

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 130036.100 ops/s
# Warmup Iteration   2: 227013.249 ops/s
# Warmup Iteration   3: 260124.394 ops/s
# Warmup Iteration   4: 261258.030 ops/s
# Warmup Iteration   5: 261153.215 ops/s
# Warmup Iteration   6: 218303.737 ops/s
# Warmup Iteration   7: 259206.757 ops/s
# Warmup Iteration   8: 259394.849 ops/s
# Warmup Iteration   9: 261470.707 ops/s
# Warmup Iteration  10: 262057.895 ops/s
# Warmup Iteration  11: 261452.346 ops/s
# Warmup Iteration  12: 261054.591 ops/s
# Warmup Iteration  13: 261323.659 ops/s
# Warmup Iteration  14: 261402.923 ops/s
# Warmup Iteration  15: 261415.517 ops/s
# Warmup Iteration  16: 261638.681 ops/s
# Warmup Iteration  17: 269952.073 ops/s
# Warmup Iteration  18: 269522.223 ops/s
# Warmup Iteration  19: 269269.788 ops/s
# Warmup Iteration  20: 269446.958 ops/s
# Warmup Iteration  21: 269682.105 ops/s
# Warmup Iteration  22: 269535.484 ops/s
# Warmup Iteration  23: 267570.662 ops/s
# Warmup Iteration  24: 270091.018 ops/s
# Warmup Iteration  25: 269584.026 ops/s
# Warmup Iteration  26: 269878.750 ops/s
# Warmup Iteration  27: 270044.078 ops/s
# Warmup Iteration  28: 270269.665 ops/s
# Warmup Iteration  29: 269805.988 ops/s
# Warmup Iteration  30: 270199.733 ops/s
Iteration   1: 269331.056 ops/s
Iteration   2: 269286.560 ops/s
Iteration   3: 270785.057 ops/s
Iteration   4: 269398.051 ops/s
Iteration   5: 270299.140 ops/s
Iteration   6: 270358.483 ops/s
Iteration   7: 269360.400 ops/s
Iteration   8: 265802.069 ops/s
Iteration   9: 270377.166 ops/s
Iteration  10: 269666.860 ops/s
Iteration  11: 269704.437 ops/s
Iteration  12: 270621.555 ops/s
Iteration  13: 269711.766 ops/s
Iteration  14: 270284.120 ops/s
Iteration  15: 270720.886 ops/s
Iteration  16: 269202.038 ops/s
Iteration  17: 270687.911 ops/s
Iteration  18: 268714.009 ops/s
Iteration  19: 269321.244 ops/s
Iteration  20: 270167.448 ops/s
Iteration  21: 270438.578 ops/s
Iteration  22: 269661.549 ops/s
Iteration  23: 270453.152 ops/s
Iteration  24: 270372.060 ops/s
Iteration  25: 269757.199 ops/s
Iteration  26: 270598.152 ops/s
Iteration  27: 269539.580 ops/s
Iteration  28: 269717.218 ops/s
Iteration  29: 270284.769 ops/s
Iteration  30: 269877.613 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_chunk":
  269816.671 ±(99.9%) 623.975 ops/s [Average]
  (min, avg, max) = (265802.069, 269816.671, 270785.057), stdev = 933.937
  CI (99.9%): [269192.696, 270440.646] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score     Error  Units
SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_chunk  thrpt   30  269816.671 ± 623.975  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3558150.454 ops/s
# Warmup Iteration   2: 6282498.587 ops/s
# Warmup Iteration   3: 7674781.820 ops/s
# Warmup Iteration   4: 7573914.761 ops/s
# Warmup Iteration   5: 7657450.480 ops/s
# Warmup Iteration   6: 7617018.947 ops/s
# Warmup Iteration   7: 7598406.502 ops/s
# Warmup Iteration   8: 7615845.334 ops/s
# Warmup Iteration   9: 7569006.606 ops/s
# Warmup Iteration  10: 7590638.025 ops/s
# Warmup Iteration  11: 7630080.192 ops/s
# Warmup Iteration  12: 7661098.110 ops/s
# Warmup Iteration  13: 7560349.047 ops/s
# Warmup Iteration  14: 7609920.613 ops/s
# Warmup Iteration  15: 7614213.188 ops/s
# Warmup Iteration  16: 7599439.661 ops/s
# Warmup Iteration  17: 7652387.682 ops/s
# Warmup Iteration  18: 7624111.244 ops/s
# Warmup Iteration  19: 7613447.771 ops/s
# Warmup Iteration  20: 7597051.155 ops/s
# Warmup Iteration  21: 7610151.092 ops/s
# Warmup Iteration  22: 7612172.012 ops/s
# Warmup Iteration  23: 7649884.471 ops/s
# Warmup Iteration  24: 7680868.534 ops/s
# Warmup Iteration  25: 7541181.495 ops/s
# Warmup Iteration  26: 7557720.821 ops/s
# Warmup Iteration  27: 7674316.751 ops/s
# Warmup Iteration  28: 7668888.166 ops/s
# Warmup Iteration  29: 7671981.339 ops/s
# Warmup Iteration  30: 7600757.021 ops/s
Iteration   1: 7551484.774 ops/s
Iteration   2: 7613730.012 ops/s
Iteration   3: 7667750.040 ops/s
Iteration   4: 7620441.608 ops/s
Iteration   5: 7659342.694 ops/s
Iteration   6: 7678572.682 ops/s
Iteration   7: 7691098.831 ops/s
Iteration   8: 7662497.466 ops/s
Iteration   9: 7606852.805 ops/s
Iteration  10: 7623309.610 ops/s
Iteration  11: 7676214.005 ops/s
Iteration  12: 7605502.171 ops/s
Iteration  13: 7687723.034 ops/s
Iteration  14: 7583246.192 ops/s
Iteration  15: 7651355.893 ops/s
Iteration  16: 7685381.317 ops/s
Iteration  17: 7598025.812 ops/s
Iteration  18: 7599370.089 ops/s
Iteration  19: 7632199.784 ops/s
Iteration  20: 7590185.716 ops/s
Iteration  21: 7579560.351 ops/s
Iteration  22: 7583166.253 ops/s
Iteration  23: 7639237.350 ops/s
Iteration  24: 7651732.682 ops/s
Iteration  25: 7611548.216 ops/s
Iteration  26: 7628996.938 ops/s
Iteration  27: 7571153.445 ops/s
Iteration  28: 7505067.429 ops/s
Iteration  29: 7588988.466 ops/s
Iteration  30: 7554820.046 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_clear":
  7619951.857 ±(99.9%) 30610.747 ops/s [Average]
  (min, avg, max) = (7505067.429, 7619951.857, 7691098.831), stdev = 45816.728
  CI (99.9%): [7589341.111, 7650562.604] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_clear  thrpt   30  7619951.857 ± 30610.747  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 630301.623 ops/s
# Warmup Iteration   2: 1671113.179 ops/s
# Warmup Iteration   3: 1732581.227 ops/s
# Warmup Iteration   4: 1432557.593 ops/s
# Warmup Iteration   5: 1738162.676 ops/s
# Warmup Iteration   6: 1738997.413 ops/s
# Warmup Iteration   7: 1736526.641 ops/s
# Warmup Iteration   8: 1734912.640 ops/s
# Warmup Iteration   9: 1736668.785 ops/s
# Warmup Iteration  10: 1734493.351 ops/s
# Warmup Iteration  11: 1733060.378 ops/s
# Warmup Iteration  12: 1732343.346 ops/s
# Warmup Iteration  13: 1736707.877 ops/s
# Warmup Iteration  14: 1734727.910 ops/s
# Warmup Iteration  15: 1734315.588 ops/s
# Warmup Iteration  16: 1735566.164 ops/s
# Warmup Iteration  17: 1736892.151 ops/s
# Warmup Iteration  18: 1731004.429 ops/s
# Warmup Iteration  19: 1734861.254 ops/s
# Warmup Iteration  20: 1733203.531 ops/s
# Warmup Iteration  21: 1730962.770 ops/s
# Warmup Iteration  22: 1737760.352 ops/s
# Warmup Iteration  23: 1737051.185 ops/s
# Warmup Iteration  24: 1735397.974 ops/s
# Warmup Iteration  25: 1731497.198 ops/s
# Warmup Iteration  26: 1738616.221 ops/s
# Warmup Iteration  27: 1735223.553 ops/s
# Warmup Iteration  28: 1735387.176 ops/s
# Warmup Iteration  29: 1734238.239 ops/s
# Warmup Iteration  30: 1736060.946 ops/s
Iteration   1: 1739232.599 ops/s
Iteration   2: 1737420.250 ops/s
Iteration   3: 1733389.053 ops/s
Iteration   4: 1734506.766 ops/s
Iteration   5: 1734091.875 ops/s
Iteration   6: 1730254.751 ops/s
Iteration   7: 1732610.069 ops/s
Iteration   8: 1740764.420 ops/s
Iteration   9: 1735585.992 ops/s
Iteration  10: 1735354.578 ops/s
Iteration  11: 1738327.929 ops/s
Iteration  12: 1736326.482 ops/s
Iteration  13: 1729808.867 ops/s
Iteration  14: 1737502.636 ops/s
Iteration  15: 1730772.786 ops/s
Iteration  16: 1734608.751 ops/s
Iteration  17: 1738561.547 ops/s
Iteration  18: 1736845.526 ops/s
Iteration  19: 1737215.883 ops/s
Iteration  20: 1739108.259 ops/s
Iteration  21: 1734965.904 ops/s
Iteration  22: 1730607.623 ops/s
Iteration  23: 1733563.627 ops/s
Iteration  24: 1736650.026 ops/s
Iteration  25: 1736692.855 ops/s
Iteration  26: 1737273.342 ops/s
Iteration  27: 1736772.688 ops/s
Iteration  28: 1735720.354 ops/s
Iteration  29: 1736826.945 ops/s
Iteration  30: 1737217.080 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_collect":
  1735619.315 ±(99.9%) 1856.140 ops/s [Average]
  (min, avg, max) = (1729808.867, 1735619.315, 1740764.420), stdev = 2778.183
  CI (99.9%): [1733763.175, 1737475.455] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_collect  thrpt   30  1735619.315 ± 1856.140  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1665077.955 ops/s
# Warmup Iteration   2: 3566511.775 ops/s
# Warmup Iteration   3: 3838711.344 ops/s
# Warmup Iteration   4: 4594858.222 ops/s
# Warmup Iteration   5: 4602038.124 ops/s
# Warmup Iteration   6: 4596522.957 ops/s
# Warmup Iteration   7: 4592401.593 ops/s
# Warmup Iteration   8: 4593497.301 ops/s
# Warmup Iteration   9: 4590356.464 ops/s
# Warmup Iteration  10: 4608502.368 ops/s
# Warmup Iteration  11: 4602118.997 ops/s
# Warmup Iteration  12: 4588111.109 ops/s
# Warmup Iteration  13: 4601806.642 ops/s
# Warmup Iteration  14: 4606533.725 ops/s
# Warmup Iteration  15: 4598133.121 ops/s
# Warmup Iteration  16: 4607784.998 ops/s
# Warmup Iteration  17: 4599104.092 ops/s
# Warmup Iteration  18: 4553622.746 ops/s
# Warmup Iteration  19: 4529523.021 ops/s
# Warmup Iteration  20: 4591620.659 ops/s
# Warmup Iteration  21: 4609033.425 ops/s
# Warmup Iteration  22: 4603395.040 ops/s
# Warmup Iteration  23: 4582151.460 ops/s
# Warmup Iteration  24: 4607114.762 ops/s
# Warmup Iteration  25: 4590589.868 ops/s
# Warmup Iteration  26: 4602435.967 ops/s
# Warmup Iteration  27: 4605475.149 ops/s
# Warmup Iteration  28: 4605018.927 ops/s
# Warmup Iteration  29: 4588210.683 ops/s
# Warmup Iteration  30: 4616219.705 ops/s
Iteration   1: 4611123.308 ops/s
Iteration   2: 4615159.548 ops/s
Iteration   3: 4609367.809 ops/s
Iteration   4: 4599864.811 ops/s
Iteration   5: 4584593.650 ops/s
Iteration   6: 4596426.255 ops/s
Iteration   7: 4593720.767 ops/s
Iteration   8: 4589041.044 ops/s
Iteration   9: 4613751.381 ops/s
Iteration  10: 4605572.718 ops/s
Iteration  11: 4593548.087 ops/s
Iteration  12: 4615813.446 ops/s
Iteration  13: 4610515.965 ops/s
Iteration  14: 4612138.171 ops/s
Iteration  15: 4606241.267 ops/s
Iteration  16: 4607414.855 ops/s
Iteration  17: 4559684.714 ops/s
Iteration  18: 4618788.536 ops/s
Iteration  19: 4594625.117 ops/s
Iteration  20: 4600319.470 ops/s
Iteration  21: 4586224.793 ops/s
Iteration  22: 4612047.667 ops/s
Iteration  23: 4580298.310 ops/s
Iteration  24: 4592984.205 ops/s
Iteration  25: 4614934.729 ops/s
Iteration  26: 4609792.188 ops/s
Iteration  27: 4607577.326 ops/s
Iteration  28: 4616097.817 ops/s
Iteration  29: 4592191.338 ops/s
Iteration  30: 4587846.079 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_contains":
  4601256.846 ±(99.9%) 9024.485 ops/s [Average]
  (min, avg, max) = (4559684.714, 4601256.846, 4618788.536), stdev = 13507.426
  CI (99.9%): [4592232.360, 4610281.331] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_contains  thrpt   30  4601256.846 ± 9024.485  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1691780.114 ops/s
# Warmup Iteration   2: 3892499.647 ops/s
# Warmup Iteration   3: 5929864.345 ops/s
# Warmup Iteration   4: 7052308.812 ops/s
# Warmup Iteration   5: 7050096.188 ops/s
# Warmup Iteration   6: 7056289.222 ops/s
# Warmup Iteration   7: 7064107.903 ops/s
# Warmup Iteration   8: 7027749.812 ops/s
# Warmup Iteration   9: 7055167.829 ops/s
# Warmup Iteration  10: 7083467.690 ops/s
# Warmup Iteration  11: 7048994.744 ops/s
# Warmup Iteration  12: 6940337.417 ops/s
# Warmup Iteration  13: 7064070.382 ops/s
# Warmup Iteration  14: 7061870.542 ops/s
# Warmup Iteration  15: 7071237.587 ops/s
# Warmup Iteration  16: 7049735.191 ops/s
# Warmup Iteration  17: 7049440.189 ops/s
# Warmup Iteration  18: 7054872.617 ops/s
# Warmup Iteration  19: 7032091.048 ops/s
# Warmup Iteration  20: 7043057.963 ops/s
# Warmup Iteration  21: 6997264.183 ops/s
# Warmup Iteration  22: 7063651.498 ops/s
# Warmup Iteration  23: 7054285.360 ops/s
# Warmup Iteration  24: 7069356.275 ops/s
# Warmup Iteration  25: 7061044.215 ops/s
# Warmup Iteration  26: 7068614.352 ops/s
# Warmup Iteration  27: 7073035.722 ops/s
# Warmup Iteration  28: 7041448.816 ops/s
# Warmup Iteration  29: 7070167.457 ops/s
# Warmup Iteration  30: 7069528.276 ops/s
Iteration   1: 7044870.022 ops/s
Iteration   2: 7049448.539 ops/s
Iteration   3: 7033790.470 ops/s
Iteration   4: 7061174.169 ops/s
Iteration   5: 7050688.013 ops/s
Iteration   6: 7063564.876 ops/s
Iteration   7: 7071884.916 ops/s
Iteration   8: 7049381.888 ops/s
Iteration   9: 7070221.785 ops/s
Iteration  10: 7066633.776 ops/s
Iteration  11: 7077325.892 ops/s
Iteration  12: 7047959.397 ops/s
Iteration  13: 7066928.996 ops/s
Iteration  14: 7072402.170 ops/s
Iteration  15: 7105649.716 ops/s
Iteration  16: 7074172.471 ops/s
Iteration  17: 7059607.444 ops/s
Iteration  18: 7035045.870 ops/s
Iteration  19: 7046503.827 ops/s
Iteration  20: 7086375.174 ops/s
Iteration  21: 7063086.605 ops/s
Iteration  22: 7065196.897 ops/s
Iteration  23: 7050480.637 ops/s
Iteration  24: 7068407.924 ops/s
Iteration  25: 7046200.462 ops/s
Iteration  26: 7064175.499 ops/s
Iteration  27: 7090903.316 ops/s
Iteration  28: 7055132.590 ops/s
Iteration  29: 7048898.727 ops/s
Iteration  30: 7018718.511 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_containsAllArray":
  7060161.019 ±(99.9%) 11883.058 ops/s [Average]
  (min, avg, max) = (7018718.511, 7060161.019, 7105649.716), stdev = 17786.003
  CI (99.9%): [7048277.961, 7072044.077] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_containsAllArray  thrpt   30  7060161.019 ± 11883.058  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3440661.039 ops/s
# Warmup Iteration   2: 6491769.823 ops/s
# Warmup Iteration   3: 7672198.439 ops/s
# Warmup Iteration   4: 7651779.430 ops/s
# Warmup Iteration   5: 7676682.592 ops/s
# Warmup Iteration   6: 7719538.623 ops/s
# Warmup Iteration   7: 7672963.754 ops/s
# Warmup Iteration   8: 7692401.142 ops/s
# Warmup Iteration   9: 7664879.399 ops/s
# Warmup Iteration  10: 7650367.880 ops/s
# Warmup Iteration  11: 7624683.293 ops/s
# Warmup Iteration  12: 7684114.550 ops/s
# Warmup Iteration  13: 7675802.396 ops/s
# Warmup Iteration  14: 7652845.965 ops/s
# Warmup Iteration  15: 7645733.944 ops/s
# Warmup Iteration  16: 7691960.353 ops/s
# Warmup Iteration  17: 7681248.667 ops/s
# Warmup Iteration  18: 7625355.021 ops/s
# Warmup Iteration  19: 7655091.015 ops/s
# Warmup Iteration  20: 7671562.731 ops/s
# Warmup Iteration  21: 7684100.470 ops/s
# Warmup Iteration  22: 7635203.063 ops/s
# Warmup Iteration  23: 7683617.408 ops/s
# Warmup Iteration  24: 7655937.532 ops/s
# Warmup Iteration  25: 7614296.468 ops/s
# Warmup Iteration  26: 7688119.270 ops/s
# Warmup Iteration  27: 7657590.485 ops/s
# Warmup Iteration  28: 7698122.911 ops/s
# Warmup Iteration  29: 7633086.608 ops/s
# Warmup Iteration  30: 7662856.267 ops/s
Iteration   1: 7493456.180 ops/s
Iteration   2: 7678838.512 ops/s
Iteration   3: 7692076.668 ops/s
Iteration   4: 7687096.444 ops/s
Iteration   5: 7658424.264 ops/s
Iteration   6: 7596685.436 ops/s
Iteration   7: 7627576.857 ops/s
Iteration   8: 7677338.410 ops/s
Iteration   9: 7653684.046 ops/s
Iteration  10: 7677585.862 ops/s
Iteration  11: 7663979.297 ops/s
Iteration  12: 7674496.968 ops/s
Iteration  13: 7694691.476 ops/s
Iteration  14: 7653278.180 ops/s
Iteration  15: 7652177.011 ops/s
Iteration  16: 7659249.087 ops/s
Iteration  17: 7630642.640 ops/s
Iteration  18: 7651000.158 ops/s
Iteration  19: 7681073.881 ops/s
Iteration  20: 7677503.340 ops/s
Iteration  21: 7672488.090 ops/s
Iteration  22: 7649199.182 ops/s
Iteration  23: 7660896.908 ops/s
Iteration  24: 7676403.648 ops/s
Iteration  25: 7663025.782 ops/s
Iteration  26: 7690790.210 ops/s
Iteration  27: 7594850.239 ops/s
Iteration  28: 7657007.775 ops/s
Iteration  29: 7646965.419 ops/s
Iteration  30: 7695856.997 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_containsAllIterable":
  7656277.966 ±(99.9%) 26490.235 ops/s [Average]
  (min, avg, max) = (7493456.180, 7656277.966, 7695856.997), stdev = 39649.339
  CI (99.9%): [7629787.731, 7682768.200] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score       Error  Units
SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_containsAllIterable  thrpt   30  7656277.966 ± 26490.235  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_containsAnyArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_containsAnyArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 949636.806 ops/s
# Warmup Iteration   2: 2245002.325 ops/s
# Warmup Iteration   3: 3441464.460 ops/s
# Warmup Iteration   4: 3832754.918 ops/s
# Warmup Iteration   5: 3985553.545 ops/s
# Warmup Iteration   6: 3992714.593 ops/s
# Warmup Iteration   7: 3980222.272 ops/s
# Warmup Iteration   8: 3987367.871 ops/s
# Warmup Iteration   9: 3989226.265 ops/s
# Warmup Iteration  10: 3993533.326 ops/s
# Warmup Iteration  11: 3955051.472 ops/s
# Warmup Iteration  12: 3979980.736 ops/s
# Warmup Iteration  13: 3985510.793 ops/s
# Warmup Iteration  14: 3983547.333 ops/s
# Warmup Iteration  15: 3989830.727 ops/s
# Warmup Iteration  16: 3991245.424 ops/s
# Warmup Iteration  17: 3984082.566 ops/s
# Warmup Iteration  18: 3971921.302 ops/s
# Warmup Iteration  19: 3988175.082 ops/s
# Warmup Iteration  20: 3990150.690 ops/s
# Warmup Iteration  21: 3977964.343 ops/s
# Warmup Iteration  22: 3988541.789 ops/s
# Warmup Iteration  23: 3957539.606 ops/s
# Warmup Iteration  24: 3991657.834 ops/s
# Warmup Iteration  25: 3987786.144 ops/s
# Warmup Iteration  26: 3981775.016 ops/s
# Warmup Iteration  27: 3993871.266 ops/s
# Warmup Iteration  28: 3982973.865 ops/s
# Warmup Iteration  29: 3989272.022 ops/s
# Warmup Iteration  30: 3990720.511 ops/s
Iteration   1: 4003791.306 ops/s
Iteration   2: 3993603.090 ops/s
Iteration   3: 3999463.601 ops/s
Iteration   4: 3971624.966 ops/s
Iteration   5: 3977811.370 ops/s
Iteration   6: 3995166.941 ops/s
Iteration   7: 3988978.321 ops/s
Iteration   8: 3974914.216 ops/s
Iteration   9: 3981448.208 ops/s
Iteration  10: 3980243.031 ops/s
Iteration  11: 3994725.763 ops/s
Iteration  12: 3981342.836 ops/s
Iteration  13: 3984687.915 ops/s
Iteration  14: 3971242.469 ops/s
Iteration  15: 3984598.941 ops/s
Iteration  16: 3983630.332 ops/s
Iteration  17: 3978807.130 ops/s
Iteration  18: 3977419.651 ops/s
Iteration  19: 3984803.691 ops/s
Iteration  20: 3996441.470 ops/s
Iteration  21: 3987236.402 ops/s
Iteration  22: 3959636.010 ops/s
Iteration  23: 3974039.960 ops/s
Iteration  24: 3976223.129 ops/s
Iteration  25: 3987011.080 ops/s
Iteration  26: 3972135.573 ops/s
Iteration  27: 3969152.480 ops/s
Iteration  28: 3997717.030 ops/s
Iteration  29: 3921081.783 ops/s
Iteration  30: 3982795.274 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_containsAnyArray":
  3981059.132 ±(99.9%) 10156.376 ops/s [Average]
  (min, avg, max) = (3921081.783, 3981059.132, 4003791.306), stdev = 15201.587
  CI (99.9%): [3970902.756, 3991215.509] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_containsAnyArray  thrpt   30  3981059.132 ± 10156.376  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_containsAnyIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_containsAnyIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 479018.434 ops/s
# Warmup Iteration   2: 821830.838 ops/s
# Warmup Iteration   3: 1033950.037 ops/s
# Warmup Iteration   4: 1035797.508 ops/s
# Warmup Iteration   5: 894674.406 ops/s
# Warmup Iteration   6: 1001164.056 ops/s
# Warmup Iteration   7: 1026872.441 ops/s
# Warmup Iteration   8: 1037018.333 ops/s
# Warmup Iteration   9: 1036018.517 ops/s
# Warmup Iteration  10: 1034906.914 ops/s
# Warmup Iteration  11: 1034474.143 ops/s
# Warmup Iteration  12: 1035989.091 ops/s
# Warmup Iteration  13: 1036352.142 ops/s
# Warmup Iteration  14: 1036457.301 ops/s
# Warmup Iteration  15: 1033568.387 ops/s
# Warmup Iteration  16: 1035542.583 ops/s
# Warmup Iteration  17: 1036375.451 ops/s
# Warmup Iteration  18: 1037149.808 ops/s
# Warmup Iteration  19: 1038052.133 ops/s
# Warmup Iteration  20: 1033952.826 ops/s
# Warmup Iteration  21: 1034928.570 ops/s
# Warmup Iteration  22: 1032416.073 ops/s
# Warmup Iteration  23: 1035949.259 ops/s
# Warmup Iteration  24: 1036570.800 ops/s
# Warmup Iteration  25: 1033328.349 ops/s
# Warmup Iteration  26: 1035557.540 ops/s
# Warmup Iteration  27: 1035765.495 ops/s
# Warmup Iteration  28: 1036067.207 ops/s
# Warmup Iteration  29: 1036832.423 ops/s
# Warmup Iteration  30: 1035180.484 ops/s
Iteration   1: 1034950.401 ops/s
Iteration   2: 1036800.924 ops/s
Iteration   3: 1035077.144 ops/s
Iteration   4: 1034752.975 ops/s
Iteration   5: 1036195.565 ops/s
Iteration   6: 1034387.720 ops/s
Iteration   7: 1036274.752 ops/s
Iteration   8: 1039192.599 ops/s
Iteration   9: 1032914.913 ops/s
Iteration  10: 1034173.854 ops/s
Iteration  11: 1037678.249 ops/s
Iteration  12: 1034093.634 ops/s
Iteration  13: 1035245.267 ops/s
Iteration  14: 1038103.898 ops/s
Iteration  15: 1034198.180 ops/s
Iteration  16: 1037612.836 ops/s
Iteration  17: 1037001.472 ops/s
Iteration  18: 1030455.603 ops/s
Iteration  19: 999306.438 ops/s
Iteration  20: 1036435.457 ops/s
Iteration  21: 1034452.024 ops/s
Iteration  22: 1035245.688 ops/s
Iteration  23: 1039329.565 ops/s
Iteration  24: 1035214.719 ops/s
Iteration  25: 1033592.566 ops/s
Iteration  26: 1035924.133 ops/s
Iteration  27: 1036610.852 ops/s
Iteration  28: 1037072.495 ops/s
Iteration  29: 1036088.758 ops/s
Iteration  30: 1032891.219 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_containsAnyIterable":
  1034375.797 ±(99.9%) 4605.615 ops/s [Average]
  (min, avg, max) = (999306.438, 1034375.797, 1039329.565), stdev = 6893.469
  CI (99.9%): [1029770.181, 1038981.412] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score      Error  Units
SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_containsAnyIterable  thrpt   30  1034375.797 ± 4605.615  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_containsNoneArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_containsNoneArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 973745.051 ops/s
# Warmup Iteration   2: 2311452.278 ops/s
# Warmup Iteration   3: 3498935.341 ops/s
# Warmup Iteration   4: 4240090.193 ops/s
# Warmup Iteration   5: 4242689.235 ops/s
# Warmup Iteration   6: 4240780.951 ops/s
# Warmup Iteration   7: 4200585.947 ops/s
# Warmup Iteration   8: 4227186.906 ops/s
# Warmup Iteration   9: 4246905.065 ops/s
# Warmup Iteration  10: 4229622.489 ops/s
# Warmup Iteration  11: 4226034.986 ops/s
# Warmup Iteration  12: 4237509.419 ops/s
# Warmup Iteration  13: 4195429.928 ops/s
# Warmup Iteration  14: 4231948.219 ops/s
# Warmup Iteration  15: 4236400.166 ops/s
# Warmup Iteration  16: 4254606.089 ops/s
# Warmup Iteration  17: 4236347.189 ops/s
# Warmup Iteration  18: 4240893.338 ops/s
# Warmup Iteration  19: 4238331.038 ops/s
# Warmup Iteration  20: 4242569.989 ops/s
# Warmup Iteration  21: 4240060.624 ops/s
# Warmup Iteration  22: 4243257.766 ops/s
# Warmup Iteration  23: 4241780.509 ops/s
# Warmup Iteration  24: 4241416.044 ops/s
# Warmup Iteration  25: 4243924.952 ops/s
# Warmup Iteration  26: 4237124.416 ops/s
# Warmup Iteration  27: 4244129.022 ops/s
# Warmup Iteration  28: 4249240.760 ops/s
# Warmup Iteration  29: 4249259.443 ops/s
# Warmup Iteration  30: 4253627.013 ops/s
Iteration   1: 4263276.575 ops/s
Iteration   2: 4255133.903 ops/s
Iteration   3: 4249614.822 ops/s
Iteration   4: 4255902.173 ops/s
Iteration   5: 4240171.433 ops/s
Iteration   6: 4237479.328 ops/s
Iteration   7: 4260453.779 ops/s
Iteration   8: 4266911.198 ops/s
Iteration   9: 4250480.135 ops/s
Iteration  10: 4229405.967 ops/s
Iteration  11: 4229452.119 ops/s
Iteration  12: 4246061.953 ops/s
Iteration  13: 4248844.136 ops/s
Iteration  14: 4238999.231 ops/s
Iteration  15: 4264500.501 ops/s
Iteration  16: 4261621.652 ops/s
Iteration  17: 4247698.961 ops/s
Iteration  18: 4255330.559 ops/s
Iteration  19: 4254530.050 ops/s
Iteration  20: 4234905.201 ops/s
Iteration  21: 4241357.074 ops/s
Iteration  22: 4230986.803 ops/s
Iteration  23: 4248980.122 ops/s
Iteration  24: 4243817.781 ops/s
Iteration  25: 4262063.236 ops/s
Iteration  26: 4252969.056 ops/s
Iteration  27: 4249843.643 ops/s
Iteration  28: 4248203.411 ops/s
Iteration  29: 4254075.292 ops/s
Iteration  30: 4238695.839 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_containsNoneArray":
  4248725.531 ±(99.9%) 7047.522 ops/s [Average]
  (min, avg, max) = (4229405.967, 4248725.531, 4266911.198), stdev = 10548.401
  CI (99.9%): [4241678.008, 4255773.053] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score      Error  Units
SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_containsNoneArray  thrpt   30  4248725.531 ± 7047.522  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_containsNoneIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_containsNoneIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 454295.789 ops/s
# Warmup Iteration   2: 754779.596 ops/s
# Warmup Iteration   3: 935701.267 ops/s
# Warmup Iteration   4: 934828.875 ops/s
# Warmup Iteration   5: 920902.936 ops/s
# Warmup Iteration   6: 788027.109 ops/s
# Warmup Iteration   7: 933689.702 ops/s
# Warmup Iteration   8: 934428.052 ops/s
# Warmup Iteration   9: 934443.843 ops/s
# Warmup Iteration  10: 932866.993 ops/s
# Warmup Iteration  11: 935004.367 ops/s
# Warmup Iteration  12: 933565.725 ops/s
# Warmup Iteration  13: 936259.401 ops/s
# Warmup Iteration  14: 934854.586 ops/s
# Warmup Iteration  15: 935296.337 ops/s
# Warmup Iteration  16: 934840.289 ops/s
# Warmup Iteration  17: 936840.859 ops/s
# Warmup Iteration  18: 934570.118 ops/s
# Warmup Iteration  19: 935400.314 ops/s
# Warmup Iteration  20: 934926.399 ops/s
# Warmup Iteration  21: 934102.431 ops/s
# Warmup Iteration  22: 935821.497 ops/s
# Warmup Iteration  23: 934851.666 ops/s
# Warmup Iteration  24: 935292.121 ops/s
# Warmup Iteration  25: 933359.718 ops/s
# Warmup Iteration  26: 934737.361 ops/s
# Warmup Iteration  27: 935361.133 ops/s
# Warmup Iteration  28: 935230.893 ops/s
# Warmup Iteration  29: 934794.722 ops/s
# Warmup Iteration  30: 934513.019 ops/s
Iteration   1: 934640.312 ops/s
Iteration   2: 934258.597 ops/s
Iteration   3: 933397.811 ops/s
Iteration   4: 933832.871 ops/s
Iteration   5: 935235.718 ops/s
Iteration   6: 934140.563 ops/s
Iteration   7: 933934.930 ops/s
Iteration   8: 935322.340 ops/s
Iteration   9: 935208.367 ops/s
Iteration  10: 933495.466 ops/s
Iteration  11: 935688.408 ops/s
Iteration  12: 932310.617 ops/s
Iteration  13: 932854.230 ops/s
Iteration  14: 934505.220 ops/s
Iteration  15: 935086.163 ops/s
Iteration  16: 935963.415 ops/s
Iteration  17: 935156.793 ops/s
Iteration  18: 934583.577 ops/s
Iteration  19: 936643.228 ops/s
Iteration  20: 933100.555 ops/s
Iteration  21: 935493.507 ops/s
Iteration  22: 934971.633 ops/s
Iteration  23: 933374.564 ops/s
Iteration  24: 935632.670 ops/s
Iteration  25: 932822.332 ops/s
Iteration  26: 937089.956 ops/s
Iteration  27: 934288.298 ops/s
Iteration  28: 934368.045 ops/s
Iteration  29: 934937.776 ops/s
Iteration  30: 933049.997 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_containsNoneIterable":
  934512.932 ±(99.9%) 774.165 ops/s [Average]
  (min, avg, max) = (932310.617, 934512.932, 937089.956), stdev = 1158.734
  CI (99.9%): [933738.767, 935287.097] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score     Error  Units
SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_containsNoneIterable  thrpt   30  934512.932 ± 774.165  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 925545.501 ops/s
# Warmup Iteration   2: 2143770.185 ops/s
# Warmup Iteration   3: 2443091.391 ops/s
# Warmup Iteration   4: 2014183.180 ops/s
# Warmup Iteration   5: 2451102.638 ops/s
# Warmup Iteration   6: 2447596.905 ops/s
# Warmup Iteration   7: 2445712.477 ops/s
# Warmup Iteration   8: 2443701.501 ops/s
# Warmup Iteration   9: 2449911.522 ops/s
# Warmup Iteration  10: 2446787.089 ops/s
# Warmup Iteration  11: 2443769.395 ops/s
# Warmup Iteration  12: 2447671.372 ops/s
# Warmup Iteration  13: 2447118.271 ops/s
# Warmup Iteration  14: 2438506.199 ops/s
# Warmup Iteration  15: 2444838.690 ops/s
# Warmup Iteration  16: 2446526.578 ops/s
# Warmup Iteration  17: 2443239.033 ops/s
# Warmup Iteration  18: 2446930.990 ops/s
# Warmup Iteration  19: 2445118.830 ops/s
# Warmup Iteration  20: 2447821.553 ops/s
# Warmup Iteration  21: 2446617.854 ops/s
# Warmup Iteration  22: 2438941.415 ops/s
# Warmup Iteration  23: 2445785.096 ops/s
# Warmup Iteration  24: 2446475.362 ops/s
# Warmup Iteration  25: 2446415.627 ops/s
# Warmup Iteration  26: 2447427.595 ops/s
# Warmup Iteration  27: 2446633.124 ops/s
# Warmup Iteration  28: 2441643.535 ops/s
# Warmup Iteration  29: 2445269.726 ops/s
# Warmup Iteration  30: 2447637.188 ops/s
Iteration   1: 2441769.238 ops/s
Iteration   2: 2425293.613 ops/s
Iteration   3: 2441937.134 ops/s
Iteration   4: 2441248.074 ops/s
Iteration   5: 2450764.542 ops/s
Iteration   6: 2444845.254 ops/s
Iteration   7: 2445373.816 ops/s
Iteration   8: 2441226.488 ops/s
Iteration   9: 2446002.352 ops/s
Iteration  10: 2448288.143 ops/s
Iteration  11: 2455415.689 ops/s
Iteration  12: 2452894.881 ops/s
Iteration  13: 2450846.726 ops/s
Iteration  14: 2450895.527 ops/s
Iteration  15: 2410341.239 ops/s
Iteration  16: 2441201.386 ops/s
Iteration  17: 2442695.612 ops/s
Iteration  18: 2446572.493 ops/s
Iteration  19: 2444716.512 ops/s
Iteration  20: 2438807.774 ops/s
Iteration  21: 2441405.705 ops/s
Iteration  22: 2451020.021 ops/s
Iteration  23: 2449244.255 ops/s
Iteration  24: 2439749.464 ops/s
Iteration  25: 2452291.364 ops/s
Iteration  26: 2451099.655 ops/s
Iteration  27: 2450783.787 ops/s
Iteration  28: 2449552.388 ops/s
Iteration  29: 2453516.835 ops/s
Iteration  30: 2450252.526 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_count":
  2445001.750 ±(99.9%) 5979.290 ops/s [Average]
  (min, avg, max) = (2410341.239, 2445001.750, 2455415.689), stdev = 8949.520
  CI (99.9%): [2439022.460, 2450981.040] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_count  thrpt   30  2445001.750 ± 5979.290  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1236427.768 ops/s
# Warmup Iteration   2: 2926123.237 ops/s
# Warmup Iteration   3: 4040963.819 ops/s
# Warmup Iteration   4: 4383911.144 ops/s
# Warmup Iteration   5: 4602852.271 ops/s
# Warmup Iteration   6: 4611347.583 ops/s
# Warmup Iteration   7: 4597810.930 ops/s
# Warmup Iteration   8: 4612986.901 ops/s
# Warmup Iteration   9: 4604116.159 ops/s
# Warmup Iteration  10: 4608768.569 ops/s
# Warmup Iteration  11: 4601553.445 ops/s
# Warmup Iteration  12: 4610249.701 ops/s
# Warmup Iteration  13: 4614146.393 ops/s
# Warmup Iteration  14: 4606898.271 ops/s
# Warmup Iteration  15: 4602847.742 ops/s
# Warmup Iteration  16: 4609832.547 ops/s
# Warmup Iteration  17: 4612710.188 ops/s
# Warmup Iteration  18: 4602712.254 ops/s
# Warmup Iteration  19: 4596753.173 ops/s
# Warmup Iteration  20: 4615930.501 ops/s
# Warmup Iteration  21: 4600852.415 ops/s
# Warmup Iteration  22: 4612540.176 ops/s
# Warmup Iteration  23: 4605861.789 ops/s
# Warmup Iteration  24: 4594668.039 ops/s
# Warmup Iteration  25: 4602032.655 ops/s
# Warmup Iteration  26: 4603269.046 ops/s
# Warmup Iteration  27: 4598387.460 ops/s
# Warmup Iteration  28: 4595691.695 ops/s
# Warmup Iteration  29: 4621218.603 ops/s
# Warmup Iteration  30: 4592523.306 ops/s
Iteration   1: 4614933.952 ops/s
Iteration   2: 4600313.006 ops/s
Iteration   3: 4603879.047 ops/s
Iteration   4: 4596493.922 ops/s
Iteration   5: 4615168.813 ops/s
Iteration   6: 4597707.852 ops/s
Iteration   7: 4597886.460 ops/s
Iteration   8: 4590354.600 ops/s
Iteration   9: 4603450.389 ops/s
Iteration  10: 4598913.744 ops/s
Iteration  11: 4615689.147 ops/s
Iteration  12: 4614703.082 ops/s
Iteration  13: 4615051.892 ops/s
Iteration  14: 4599500.926 ops/s
Iteration  15: 4612110.765 ops/s
Iteration  16: 4617823.329 ops/s
Iteration  17: 4606864.794 ops/s
Iteration  18: 4598348.583 ops/s
Iteration  19: 4615701.021 ops/s
Iteration  20: 4603242.727 ops/s
Iteration  21: 4612717.114 ops/s
Iteration  22: 4598540.506 ops/s
Iteration  23: 4610506.111 ops/s
Iteration  24: 4594269.599 ops/s
Iteration  25: 4613498.595 ops/s
Iteration  26: 4596830.662 ops/s
Iteration  27: 4612833.977 ops/s
Iteration  28: 4604156.152 ops/s
Iteration  29: 4602935.295 ops/s
Iteration  30: 4590738.746 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_detectIfNone":
  4605172.160 ±(99.9%) 5589.730 ops/s [Average]
  (min, avg, max) = (4590354.600, 4605172.160, 4617823.329), stdev = 8366.446
  CI (99.9%): [4599582.430, 4610761.891] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_detectIfNone  thrpt   30  4605172.160 ± 5589.730  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1989237.764 ops/s
# Warmup Iteration   2: 4212176.122 ops/s
# Warmup Iteration   3: 4677909.435 ops/s
# Warmup Iteration   4: 5601513.672 ops/s
# Warmup Iteration   5: 5605489.096 ops/s
# Warmup Iteration   6: 5565516.214 ops/s
# Warmup Iteration   7: 5544027.216 ops/s
# Warmup Iteration   8: 5601756.799 ops/s
# Warmup Iteration   9: 5550674.409 ops/s
# Warmup Iteration  10: 5596934.431 ops/s
# Warmup Iteration  11: 5596535.148 ops/s
# Warmup Iteration  12: 5589039.105 ops/s
# Warmup Iteration  13: 5594514.118 ops/s
# Warmup Iteration  14: 5613233.877 ops/s
# Warmup Iteration  15: 5590793.879 ops/s
# Warmup Iteration  16: 5598345.000 ops/s
# Warmup Iteration  17: 5605691.050 ops/s
# Warmup Iteration  18: 5603106.011 ops/s
# Warmup Iteration  19: 5598391.475 ops/s
# Warmup Iteration  20: 5599156.419 ops/s
# Warmup Iteration  21: 5560641.031 ops/s
# Warmup Iteration  22: 5592050.214 ops/s
# Warmup Iteration  23: 5603924.417 ops/s
# Warmup Iteration  24: 5582673.810 ops/s
# Warmup Iteration  25: 5589321.795 ops/s
# Warmup Iteration  26: 5591949.645 ops/s
# Warmup Iteration  27: 5582732.442 ops/s
# Warmup Iteration  28: 5601966.060 ops/s
# Warmup Iteration  29: 5578289.759 ops/s
# Warmup Iteration  30: 5517585.144 ops/s
Iteration   1: 5592374.367 ops/s
Iteration   2: 5606394.230 ops/s
Iteration   3: 5540174.721 ops/s
Iteration   4: 5576663.968 ops/s
Iteration   5: 5593308.451 ops/s
Iteration   6: 5613619.195 ops/s
Iteration   7: 5565062.443 ops/s
Iteration   8: 5582569.279 ops/s
Iteration   9: 5587556.955 ops/s
Iteration  10: 5602245.921 ops/s
Iteration  11: 5608843.669 ops/s
Iteration  12: 5557136.406 ops/s
Iteration  13: 5596796.580 ops/s
Iteration  14: 5581827.809 ops/s
Iteration  15: 5610209.843 ops/s
Iteration  16: 5618477.447 ops/s
Iteration  17: 5602566.996 ops/s
Iteration  18: 5584270.054 ops/s
Iteration  19: 5564176.618 ops/s
Iteration  20: 5583228.425 ops/s
Iteration  21: 5615989.965 ops/s
Iteration  22: 5608257.003 ops/s
Iteration  23: 5622873.737 ops/s
Iteration  24: 5584653.425 ops/s
Iteration  25: 5592587.678 ops/s
Iteration  26: 5591654.279 ops/s
Iteration  27: 5585401.954 ops/s
Iteration  28: 5507755.823 ops/s
Iteration  29: 5574969.684 ops/s
Iteration  30: 5578655.903 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_forEach":
  5587676.761 ±(99.9%) 16229.838 ops/s [Average]
  (min, avg, max) = (5507755.823, 5587676.761, 5622873.737), stdev = 24292.060
  CI (99.9%): [5571446.923, 5603906.599] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_forEach  thrpt   30  5587676.761 ± 16229.838  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5710810.264 ops/s
# Warmup Iteration   2: 11616625.501 ops/s
# Warmup Iteration   3: 11721665.221 ops/s
# Warmup Iteration   4: 13899023.729 ops/s
# Warmup Iteration   5: 13948065.368 ops/s
# Warmup Iteration   6: 13897651.844 ops/s
# Warmup Iteration   7: 13968719.204 ops/s
# Warmup Iteration   8: 13969253.908 ops/s
# Warmup Iteration   9: 13920169.140 ops/s
# Warmup Iteration  10: 13811589.117 ops/s
# Warmup Iteration  11: 13952096.951 ops/s
# Warmup Iteration  12: 13922700.702 ops/s
# Warmup Iteration  13: 13933295.729 ops/s
# Warmup Iteration  14: 13913031.866 ops/s
# Warmup Iteration  15: 13986250.015 ops/s
# Warmup Iteration  16: 13934564.758 ops/s
# Warmup Iteration  17: 13894883.741 ops/s
# Warmup Iteration  18: 13943371.227 ops/s
# Warmup Iteration  19: 13964801.752 ops/s
# Warmup Iteration  20: 13946040.167 ops/s
# Warmup Iteration  21: 13879223.842 ops/s
# Warmup Iteration  22: 13922498.041 ops/s
# Warmup Iteration  23: 13905251.810 ops/s
# Warmup Iteration  24: 13972988.116 ops/s
# Warmup Iteration  25: 13794410.542 ops/s
# Warmup Iteration  26: 13943818.475 ops/s
# Warmup Iteration  27: 13937900.806 ops/s
# Warmup Iteration  28: 13929763.798 ops/s
# Warmup Iteration  29: 13946441.619 ops/s
# Warmup Iteration  30: 14010248.011 ops/s
Iteration   1: 13986032.311 ops/s
Iteration   2: 14039342.340 ops/s
Iteration   3: 13983338.315 ops/s
Iteration   4: 13939844.652 ops/s
Iteration   5: 13926947.968 ops/s
Iteration   6: 13990380.916 ops/s
Iteration   7: 14003796.085 ops/s
Iteration   8: 13979710.603 ops/s
Iteration   9: 13960792.137 ops/s
Iteration  10: 13897839.053 ops/s
Iteration  11: 13924486.182 ops/s
Iteration  12: 13936249.500 ops/s
Iteration  13: 13932369.276 ops/s
Iteration  14: 14014355.430 ops/s
Iteration  15: 13987045.339 ops/s
Iteration  16: 13963586.984 ops/s
Iteration  17: 13977722.848 ops/s
Iteration  18: 13962256.829 ops/s
Iteration  19: 13888326.883 ops/s
Iteration  20: 13989765.165 ops/s
Iteration  21: 13927247.974 ops/s
Iteration  22: 13846708.386 ops/s
Iteration  23: 13936562.338 ops/s
Iteration  24: 14032905.424 ops/s
Iteration  25: 13959919.133 ops/s
Iteration  26: 13918158.715 ops/s
Iteration  27: 13928817.788 ops/s
Iteration  28: 13927944.217 ops/s
Iteration  29: 13952917.304 ops/s
Iteration  30: 13950644.771 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_injectInto":
  13955533.829 ±(99.9%) 28237.457 ops/s [Average]
  (min, avg, max) = (13846708.386, 13955533.829, 14039342.340), stdev = 42264.500
  CI (99.9%): [13927296.372, 13983771.286] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt         Score       Error  Units
SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_injectInto  thrpt   30  13955533.829 ± 28237.457  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 779749.706 ops/s
# Warmup Iteration   2: 1601115.171 ops/s
# Warmup Iteration   3: 1770620.403 ops/s
# Warmup Iteration   4: 2063067.415 ops/s
# Warmup Iteration   5: 2073118.238 ops/s
# Warmup Iteration   6: 2069705.951 ops/s
# Warmup Iteration   7: 2073958.970 ops/s
# Warmup Iteration   8: 2070391.089 ops/s
# Warmup Iteration   9: 2064248.139 ops/s
# Warmup Iteration  10: 2080514.723 ops/s
# Warmup Iteration  11: 2065560.184 ops/s
# Warmup Iteration  12: 2075576.135 ops/s
# Warmup Iteration  13: 2070114.623 ops/s
# Warmup Iteration  14: 2093507.103 ops/s
# Warmup Iteration  15: 2086341.732 ops/s
# Warmup Iteration  16: 2070687.524 ops/s
# Warmup Iteration  17: 2075391.552 ops/s
# Warmup Iteration  18: 2071921.000 ops/s
# Warmup Iteration  19: 2099710.915 ops/s
# Warmup Iteration  20: 2085288.218 ops/s
# Warmup Iteration  21: 2076183.115 ops/s
# Warmup Iteration  22: 2084621.131 ops/s
# Warmup Iteration  23: 2082157.957 ops/s
# Warmup Iteration  24: 2098745.738 ops/s
# Warmup Iteration  25: 2093841.134 ops/s
# Warmup Iteration  26: 2078498.426 ops/s
# Warmup Iteration  27: 2070606.756 ops/s
# Warmup Iteration  28: 2075696.435 ops/s
# Warmup Iteration  29: 2085692.930 ops/s
# Warmup Iteration  30: 2094495.093 ops/s
Iteration   1: 2082767.633 ops/s
Iteration   2: 2074700.689 ops/s
Iteration   3: 2049485.242 ops/s
Iteration   4: 2088567.589 ops/s
Iteration   5: 2094863.172 ops/s
Iteration   6: 2093930.859 ops/s
Iteration   7: 2079643.029 ops/s
Iteration   8: 2074764.042 ops/s
Iteration   9: 2081972.431 ops/s
Iteration  10: 2090979.591 ops/s
Iteration  11: 2090039.923 ops/s
Iteration  12: 2087968.805 ops/s
Iteration  13: 2086457.237 ops/s
Iteration  14: 2077761.267 ops/s
Iteration  15: 2050560.379 ops/s
Iteration  16: 2089464.407 ops/s
Iteration  17: 2082955.171 ops/s
Iteration  18: 2073710.946 ops/s
Iteration  19: 2082281.053 ops/s
Iteration  20: 2094866.766 ops/s
Iteration  21: 2095667.726 ops/s
Iteration  22: 2094702.245 ops/s
Iteration  23: 2085740.366 ops/s
Iteration  24: 2088479.060 ops/s
Iteration  25: 2079774.217 ops/s
Iteration  26: 2083708.112 ops/s
Iteration  27: 2085781.907 ops/s
Iteration  28: 2083664.428 ops/s
Iteration  29: 2083255.709 ops/s
Iteration  30: 2065852.518 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_isEmpty":
  2082478.884 ±(99.9%) 7549.251 ops/s [Average]
  (min, avg, max) = (2049485.242, 2082478.884, 2095667.726), stdev = 11299.364
  CI (99.9%): [2074929.633, 2090028.135] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_isEmpty  thrpt   30  2082478.884 ± 7549.251  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_iterator_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_iterator_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 645163.629 ops/s
# Warmup Iteration   2: 664267.817 ops/s
# Warmup Iteration   3: 880317.819 ops/s
# Warmup Iteration   4: 883074.936 ops/s
# Warmup Iteration   5: 880343.361 ops/s
# Warmup Iteration   6: 885767.645 ops/s
# Warmup Iteration   7: 884652.278 ops/s
# Warmup Iteration   8: 884678.159 ops/s
# Warmup Iteration   9: 883938.971 ops/s
# Warmup Iteration  10: 882325.312 ops/s
# Warmup Iteration  11: 866969.859 ops/s
# Warmup Iteration  12: 755995.727 ops/s
# Warmup Iteration  13: 883831.938 ops/s
# Warmup Iteration  14: 884972.288 ops/s
# Warmup Iteration  15: 886293.784 ops/s
# Warmup Iteration  16: 885886.549 ops/s
# Warmup Iteration  17: 938776.871 ops/s
# Warmup Iteration  18: 937133.740 ops/s
# Warmup Iteration  19: 937936.301 ops/s
# Warmup Iteration  20: 935813.851 ops/s
# Warmup Iteration  21: 940595.978 ops/s
# Warmup Iteration  22: 936785.637 ops/s
# Warmup Iteration  23: 938034.231 ops/s
# Warmup Iteration  24: 935412.787 ops/s
# Warmup Iteration  25: 936820.759 ops/s
# Warmup Iteration  26: 937447.572 ops/s
# Warmup Iteration  27: 934904.458 ops/s
# Warmup Iteration  28: 936528.232 ops/s
# Warmup Iteration  29: 936491.235 ops/s
# Warmup Iteration  30: 939671.861 ops/s
Iteration   1: 939758.809 ops/s
Iteration   2: 936285.989 ops/s
Iteration   3: 938093.426 ops/s
Iteration   4: 935480.230 ops/s
Iteration   5: 937812.492 ops/s
Iteration   6: 938708.206 ops/s
Iteration   7: 936944.991 ops/s
Iteration   8: 938367.469 ops/s
Iteration   9: 937276.667 ops/s
Iteration  10: 937809.940 ops/s
Iteration  11: 937407.114 ops/s
Iteration  12: 939517.854 ops/s
Iteration  13: 935323.117 ops/s
Iteration  14: 938752.787 ops/s
Iteration  15: 938396.311 ops/s
Iteration  16: 940833.809 ops/s
Iteration  17: 938693.979 ops/s
Iteration  18: 936798.122 ops/s
Iteration  19: 940730.194 ops/s
Iteration  20: 936497.269 ops/s
Iteration  21: 935371.275 ops/s
Iteration  22: 940078.491 ops/s
Iteration  23: 935830.402 ops/s
Iteration  24: 939013.698 ops/s
Iteration  25: 938979.528 ops/s
Iteration  26: 938966.204 ops/s
Iteration  27: 937285.216 ops/s
Iteration  28: 936737.303 ops/s
Iteration  29: 940498.714 ops/s
Iteration  30: 940075.688 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_iterator_throws":
  938077.510 ±(99.9%) 1083.583 ops/s [Average]
  (min, avg, max) = (935323.117, 938077.510, 940833.809), stdev = 1621.857
  CI (99.9%): [936993.926, 939161.093] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_iterator_throws  thrpt   30  938077.510 ± 1083.583  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 703722.850 ops/s
# Warmup Iteration   2: 781457.797 ops/s
# Warmup Iteration   3: 1002177.109 ops/s
# Warmup Iteration   4: 1006148.178 ops/s
# Warmup Iteration   5: 1001455.031 ops/s
# Warmup Iteration   6: 999199.496 ops/s
# Warmup Iteration   7: 989095.095 ops/s
# Warmup Iteration   8: 1001449.696 ops/s
# Warmup Iteration   9: 1004303.026 ops/s
# Warmup Iteration  10: 834104.610 ops/s
# Warmup Iteration  11: 999215.300 ops/s
# Warmup Iteration  12: 1001539.992 ops/s
# Warmup Iteration  13: 1000429.599 ops/s
# Warmup Iteration  14: 1000278.294 ops/s
# Warmup Iteration  15: 1000944.080 ops/s
# Warmup Iteration  16: 1002643.956 ops/s
# Warmup Iteration  17: 1072838.704 ops/s
# Warmup Iteration  18: 1063324.077 ops/s
# Warmup Iteration  19: 1072936.844 ops/s
# Warmup Iteration  20: 1071779.085 ops/s
# Warmup Iteration  21: 1072138.276 ops/s
# Warmup Iteration  22: 1072551.518 ops/s
# Warmup Iteration  23: 1063942.955 ops/s
# Warmup Iteration  24: 1075110.764 ops/s
# Warmup Iteration  25: 1072967.410 ops/s
# Warmup Iteration  26: 1064888.399 ops/s
# Warmup Iteration  27: 1073619.823 ops/s
# Warmup Iteration  28: 1071122.298 ops/s
# Warmup Iteration  29: 1074336.739 ops/s
# Warmup Iteration  30: 1063580.634 ops/s
Iteration   1: 1075848.198 ops/s
Iteration   2: 1070351.088 ops/s
Iteration   3: 1074595.738 ops/s
Iteration   4: 1076752.331 ops/s
Iteration   5: 1071120.737 ops/s
Iteration   6: 1075292.289 ops/s
Iteration   7: 1072968.205 ops/s
Iteration   8: 1072444.708 ops/s
Iteration   9: 1075825.444 ops/s
Iteration  10: 1074358.752 ops/s
Iteration  11: 1072613.809 ops/s
Iteration  12: 1077590.695 ops/s
Iteration  13: 1070402.363 ops/s
Iteration  14: 1066517.227 ops/s
Iteration  15: 1075371.749 ops/s
Iteration  16: 1075530.777 ops/s
Iteration  17: 1070631.348 ops/s
Iteration  18: 1074329.860 ops/s
Iteration  19: 1074666.853 ops/s
Iteration  20: 1073929.326 ops/s
Iteration  21: 1069258.516 ops/s
Iteration  22: 1076240.411 ops/s
Iteration  23: 1071623.410 ops/s
Iteration  24: 1074485.056 ops/s
Iteration  25: 1072386.479 ops/s
Iteration  26: 1072959.644 ops/s
Iteration  27: 1071802.393 ops/s
Iteration  28: 1071049.271 ops/s
Iteration  29: 1075430.902 ops/s
Iteration  30: 1073268.426 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList":
  1073321.534 ±(99.9%) 1668.327 ops/s [Average]
  (min, avg, max) = (1066517.227, 1073321.534, 1077590.695), stdev = 2497.073
  CI (99.9%): [1071653.207, 1074989.860] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt        Score      Error  Units
SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList  thrpt   30  1073321.534 ± 1668.327  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 626510.365 ops/s
# Warmup Iteration   2: 672541.153 ops/s
# Warmup Iteration   3: 875539.137 ops/s
# Warmup Iteration   4: 873269.561 ops/s
# Warmup Iteration   5: 875071.546 ops/s
# Warmup Iteration   6: 874694.003 ops/s
# Warmup Iteration   7: 876841.408 ops/s
# Warmup Iteration   8: 867362.313 ops/s
# Warmup Iteration   9: 872851.544 ops/s
# Warmup Iteration  10: 875779.204 ops/s
# Warmup Iteration  11: 733479.485 ops/s
# Warmup Iteration  12: 872396.325 ops/s
# Warmup Iteration  13: 874645.847 ops/s
# Warmup Iteration  14: 873182.983 ops/s
# Warmup Iteration  15: 875347.354 ops/s
# Warmup Iteration  16: 874903.384 ops/s
# Warmup Iteration  17: 923749.711 ops/s
# Warmup Iteration  18: 929674.948 ops/s
# Warmup Iteration  19: 927305.180 ops/s
# Warmup Iteration  20: 925904.833 ops/s
# Warmup Iteration  21: 925009.579 ops/s
# Warmup Iteration  22: 925367.746 ops/s
# Warmup Iteration  23: 928448.080 ops/s
# Warmup Iteration  24: 930036.156 ops/s
# Warmup Iteration  25: 926137.894 ops/s
# Warmup Iteration  26: 926261.085 ops/s
# Warmup Iteration  27: 926833.696 ops/s
# Warmup Iteration  28: 924123.138 ops/s
# Warmup Iteration  29: 922737.016 ops/s
# Warmup Iteration  30: 925700.711 ops/s
Iteration   1: 927389.372 ops/s
Iteration   2: 923834.398 ops/s
Iteration   3: 920688.916 ops/s
Iteration   4: 926097.931 ops/s
Iteration   5: 926125.584 ops/s
Iteration   6: 918583.684 ops/s
Iteration   7: 924279.360 ops/s
Iteration   8: 923934.242 ops/s
Iteration   9: 928011.354 ops/s
Iteration  10: 923930.213 ops/s
Iteration  11: 926061.245 ops/s
Iteration  12: 924502.387 ops/s
Iteration  13: 923537.687 ops/s
Iteration  14: 922422.344 ops/s
Iteration  15: 930057.142 ops/s
Iteration  16: 927013.515 ops/s
Iteration  17: 926194.846 ops/s
Iteration  18: 929440.110 ops/s
Iteration  19: 928550.978 ops/s
Iteration  20: 928575.037 ops/s
Iteration  21: 925051.371 ops/s
Iteration  22: 928572.002 ops/s
Iteration  23: 926870.152 ops/s
Iteration  24: 926389.927 ops/s
Iteration  25: 927807.490 ops/s
Iteration  26: 928518.136 ops/s
Iteration  27: 925392.699 ops/s
Iteration  28: 927058.564 ops/s
Iteration  29: 926784.776 ops/s
Iteration  30: 926215.802 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection":
  925929.709 ±(99.9%) 1705.870 ops/s [Average]
  (min, avg, max) = (918583.684, 925929.709, 930057.142), stdev = 2553.265
  CI (99.9%): [924223.839, 927635.578] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                        Mode  Cnt       Score      Error  Units
SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection  thrpt   30  925929.709 ± 1705.870  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 690053.881 ops/s
# Warmup Iteration   2: 787919.193 ops/s
# Warmup Iteration   3: 991778.365 ops/s
# Warmup Iteration   4: 984782.217 ops/s
# Warmup Iteration   5: 996445.832 ops/s
# Warmup Iteration   6: 994757.411 ops/s
# Warmup Iteration   7: 995622.090 ops/s
# Warmup Iteration   8: 997288.652 ops/s
# Warmup Iteration   9: 950255.219 ops/s
# Warmup Iteration  10: 880036.911 ops/s
# Warmup Iteration  11: 995323.578 ops/s
# Warmup Iteration  12: 994706.023 ops/s
# Warmup Iteration  13: 993307.546 ops/s
# Warmup Iteration  14: 993665.737 ops/s
# Warmup Iteration  15: 987349.116 ops/s
# Warmup Iteration  16: 997960.735 ops/s
# Warmup Iteration  17: 1058647.647 ops/s
# Warmup Iteration  18: 1060391.871 ops/s
# Warmup Iteration  19: 1057102.385 ops/s
# Warmup Iteration  20: 1050935.822 ops/s
# Warmup Iteration  21: 1055287.986 ops/s
# Warmup Iteration  22: 1058444.198 ops/s
# Warmup Iteration  23: 1059898.144 ops/s
# Warmup Iteration  24: 1057964.402 ops/s
# Warmup Iteration  25: 1055136.737 ops/s
# Warmup Iteration  26: 1057951.747 ops/s
# Warmup Iteration  27: 1059742.245 ops/s
# Warmup Iteration  28: 1060068.430 ops/s
# Warmup Iteration  29: 1061195.751 ops/s
# Warmup Iteration  30: 1048554.662 ops/s
Iteration   1: 1063029.645 ops/s
Iteration   2: 1043728.482 ops/s
Iteration   3: 1056785.386 ops/s
Iteration   4: 1060482.074 ops/s
Iteration   5: 1052364.406 ops/s
Iteration   6: 1059124.868 ops/s
Iteration   7: 1054067.067 ops/s
Iteration   8: 1057650.174 ops/s
Iteration   9: 1038991.099 ops/s
Iteration  10: 1054573.325 ops/s
Iteration  11: 1052215.578 ops/s
Iteration  12: 1057812.839 ops/s
Iteration  13: 1059298.908 ops/s
Iteration  14: 1055441.155 ops/s
Iteration  15: 1060277.170 ops/s
Iteration  16: 1059914.870 ops/s
Iteration  17: 1055553.930 ops/s
Iteration  18: 1062482.843 ops/s
Iteration  19: 1054379.086 ops/s
Iteration  20: 1049954.420 ops/s
Iteration  21: 1055376.317 ops/s
Iteration  22: 1052779.559 ops/s
Iteration  23: 1055194.808 ops/s
Iteration  24: 1057497.276 ops/s
Iteration  25: 1059685.826 ops/s
Iteration  26: 1058929.791 ops/s
Iteration  27: 1059039.489 ops/s
Iteration  28: 1056708.585 ops/s
Iteration  29: 1050958.951 ops/s
Iteration  30: 1063442.232 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove":
  1055924.672 ±(99.9%) 3534.247 ops/s [Average]
  (min, avg, max) = (1038991.099, 1055924.672, 1063442.232), stdev = 5289.895
  CI (99.9%): [1052390.425, 1059458.919] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                       Mode  Cnt        Score      Error  Units
SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove  thrpt   30  1055924.672 ± 3534.247  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 692208.736 ops/s
# Warmup Iteration   2: 794723.871 ops/s
# Warmup Iteration   3: 998292.806 ops/s
# Warmup Iteration   4: 998318.049 ops/s
# Warmup Iteration   5: 995003.183 ops/s
# Warmup Iteration   6: 1000060.005 ops/s
# Warmup Iteration   7: 1000735.103 ops/s
# Warmup Iteration   8: 996609.342 ops/s
# Warmup Iteration   9: 939379.347 ops/s
# Warmup Iteration  10: 896177.476 ops/s
# Warmup Iteration  11: 999243.472 ops/s
# Warmup Iteration  12: 1000895.162 ops/s
# Warmup Iteration  13: 1002203.608 ops/s
# Warmup Iteration  14: 1001199.035 ops/s
# Warmup Iteration  15: 1000020.430 ops/s
# Warmup Iteration  16: 999589.076 ops/s
# Warmup Iteration  17: 1058714.796 ops/s
# Warmup Iteration  18: 1060018.187 ops/s
# Warmup Iteration  19: 1061459.563 ops/s
# Warmup Iteration  20: 1060265.594 ops/s
# Warmup Iteration  21: 1060222.456 ops/s
# Warmup Iteration  22: 1061121.909 ops/s
# Warmup Iteration  23: 1059444.163 ops/s
# Warmup Iteration  24: 1058264.720 ops/s
# Warmup Iteration  25: 1055148.987 ops/s
# Warmup Iteration  26: 1060996.936 ops/s
# Warmup Iteration  27: 1059197.336 ops/s
# Warmup Iteration  28: 1052506.423 ops/s
# Warmup Iteration  29: 1062419.650 ops/s
# Warmup Iteration  30: 1060824.527 ops/s
Iteration   1: 1062007.179 ops/s
Iteration   2: 1054888.796 ops/s
Iteration   3: 1061283.000 ops/s
Iteration   4: 1064444.356 ops/s
Iteration   5: 1060441.039 ops/s
Iteration   6: 1053298.465 ops/s
Iteration   7: 1059450.339 ops/s
Iteration   8: 1053870.378 ops/s
Iteration   9: 1058238.069 ops/s
Iteration  10: 1059967.218 ops/s
Iteration  11: 1062997.854 ops/s
Iteration  12: 1060126.431 ops/s
Iteration  13: 1059886.522 ops/s
Iteration  14: 1059297.977 ops/s
Iteration  15: 1061248.877 ops/s
Iteration  16: 1063136.520 ops/s
Iteration  17: 1051632.938 ops/s
Iteration  18: 1057374.153 ops/s
Iteration  19: 1056748.926 ops/s
Iteration  20: 1057451.805 ops/s
Iteration  21: 1059859.212 ops/s
Iteration  22: 1054411.591 ops/s
Iteration  23: 1053140.363 ops/s
Iteration  24: 1057824.411 ops/s
Iteration  25: 1057839.547 ops/s
Iteration  26: 1055282.577 ops/s
Iteration  27: 1058004.823 ops/s
Iteration  28: 1059922.026 ops/s
Iteration  29: 1058906.510 ops/s
Iteration  30: 1059987.478 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next":
  1058432.313 ±(99.9%) 2126.995 ops/s [Average]
  (min, avg, max) = (1051632.938, 1058432.313, 1064444.356), stdev = 3183.586
  CI (99.9%): [1056305.318, 1060559.307] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                       Mode  Cnt        Score      Error  Units
SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next  thrpt   30  1058432.313 ± 2126.995  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 587152.635 ops/s
# Warmup Iteration   2: 1221770.884 ops/s
# Warmup Iteration   3: 1113220.182 ops/s
# Warmup Iteration   4: 1325507.148 ops/s
# Warmup Iteration   5: 1324007.664 ops/s
# Warmup Iteration   6: 1321417.901 ops/s
# Warmup Iteration   7: 1320384.756 ops/s
# Warmup Iteration   8: 1328232.417 ops/s
# Warmup Iteration   9: 1320333.369 ops/s
# Warmup Iteration  10: 1325098.746 ops/s
# Warmup Iteration  11: 1322881.174 ops/s
# Warmup Iteration  12: 1326151.334 ops/s
# Warmup Iteration  13: 1326998.023 ops/s
# Warmup Iteration  14: 1324850.680 ops/s
# Warmup Iteration  15: 1336314.170 ops/s
# Warmup Iteration  16: 1331173.219 ops/s
# Warmup Iteration  17: 1320387.287 ops/s
# Warmup Iteration  18: 1319159.833 ops/s
# Warmup Iteration  19: 1327933.399 ops/s
# Warmup Iteration  20: 1325050.394 ops/s
# Warmup Iteration  21: 1334233.895 ops/s
# Warmup Iteration  22: 1324541.045 ops/s
# Warmup Iteration  23: 1324425.970 ops/s
# Warmup Iteration  24: 1324985.000 ops/s
# Warmup Iteration  25: 1320264.060 ops/s
# Warmup Iteration  26: 1327876.093 ops/s
# Warmup Iteration  27: 1326115.915 ops/s
# Warmup Iteration  28: 1327213.626 ops/s
# Warmup Iteration  29: 1333581.103 ops/s
# Warmup Iteration  30: 1333686.828 ops/s
Iteration   1: 1329241.861 ops/s
Iteration   2: 1332634.414 ops/s
Iteration   3: 1336066.961 ops/s
Iteration   4: 1324845.422 ops/s
Iteration   5: 1331012.307 ops/s
Iteration   6: 1326985.285 ops/s
Iteration   7: 1315628.384 ops/s
Iteration   8: 1332548.475 ops/s
Iteration   9: 1325678.477 ops/s
Iteration  10: 1320842.393 ops/s
Iteration  11: 1319013.647 ops/s
Iteration  12: 1333167.673 ops/s
Iteration  13: 1332374.470 ops/s
Iteration  14: 1326071.036 ops/s
Iteration  15: 1325965.646 ops/s
Iteration  16: 1321529.974 ops/s
Iteration  17: 1326189.946 ops/s
Iteration  18: 1314915.902 ops/s
Iteration  19: 1328826.015 ops/s
Iteration  20: 1323942.743 ops/s
Iteration  21: 1331054.206 ops/s
Iteration  22: 1319106.428 ops/s
Iteration  23: 1323449.071 ops/s
Iteration  24: 1326703.128 ops/s
Iteration  25: 1312948.924 ops/s
Iteration  26: 1321213.099 ops/s
Iteration  27: 1330575.079 ops/s
Iteration  28: 1328162.015 ops/s
Iteration  29: 1325045.259 ops/s
Iteration  30: 1332762.691 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_makeString":
  1325950.031 ±(99.9%) 3926.941 ops/s [Average]
  (min, avg, max) = (1312948.924, 1325950.031, 1336066.961), stdev = 5877.661
  CI (99.9%): [1322023.090, 1329876.972] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_makeString  thrpt   30  1325950.031 ± 3926.941  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_newCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_newCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 170456051.893 ops/s
# Warmup Iteration   2: 299823708.278 ops/s
# Warmup Iteration   3: 278312856.666 ops/s
# Warmup Iteration   4: 315073584.119 ops/s
# Warmup Iteration   5: 314526232.916 ops/s
# Warmup Iteration   6: 312984681.827 ops/s
# Warmup Iteration   7: 314677598.506 ops/s
# Warmup Iteration   8: 313458929.492 ops/s
# Warmup Iteration   9: 314032659.421 ops/s
# Warmup Iteration  10: 316366609.617 ops/s
# Warmup Iteration  11: 314132327.498 ops/s
# Warmup Iteration  12: 314593200.601 ops/s
# Warmup Iteration  13: 314427084.516 ops/s
# Warmup Iteration  14: 316235461.291 ops/s
# Warmup Iteration  15: 314235894.812 ops/s
# Warmup Iteration  16: 314887420.682 ops/s
# Warmup Iteration  17: 314643546.235 ops/s
# Warmup Iteration  18: 315915122.368 ops/s
# Warmup Iteration  19: 314047263.900 ops/s
# Warmup Iteration  20: 313892267.361 ops/s
# Warmup Iteration  21: 314274995.666 ops/s
# Warmup Iteration  22: 315416048.453 ops/s
# Warmup Iteration  23: 316013729.070 ops/s
# Warmup Iteration  24: 314763458.552 ops/s
# Warmup Iteration  25: 314989759.120 ops/s
# Warmup Iteration  26: 316274210.884 ops/s
# Warmup Iteration  27: 316065153.844 ops/s
# Warmup Iteration  28: 316152307.694 ops/s
# Warmup Iteration  29: 314091038.337 ops/s
# Warmup Iteration  30: 315785810.009 ops/s
Iteration   1: 316111469.704 ops/s
Iteration   2: 315148522.407 ops/s
Iteration   3: 316452601.531 ops/s
Iteration   4: 315421060.333 ops/s
Iteration   5: 316425973.746 ops/s
Iteration   6: 313896989.160 ops/s
Iteration   7: 313486940.717 ops/s
Iteration   8: 314893768.117 ops/s
Iteration   9: 316430504.349 ops/s
Iteration  10: 316127279.791 ops/s
Iteration  11: 315382079.795 ops/s
Iteration  12: 315664711.417 ops/s
Iteration  13: 315744652.521 ops/s
Iteration  14: 316570092.603 ops/s
Iteration  15: 316005390.840 ops/s
Iteration  16: 314765953.422 ops/s
Iteration  17: 315142097.716 ops/s
Iteration  18: 315499210.843 ops/s
Iteration  19: 315869759.536 ops/s
Iteration  20: 315098162.520 ops/s
Iteration  21: 312384682.295 ops/s
Iteration  22: 313577247.691 ops/s
Iteration  23: 313933975.296 ops/s
Iteration  24: 313467033.364 ops/s
Iteration  25: 313521656.050 ops/s
Iteration  26: 314526588.255 ops/s
Iteration  27: 314434869.044 ops/s
Iteration  28: 311649781.031 ops/s
Iteration  29: 313673967.841 ops/s
Iteration  30: 313392215.636 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_newCollection":
  314823307.919 ±(99.9%) 858039.425 ops/s [Average]
  (min, avg, max) = (311649781.031, 314823307.919, 316570092.603), stdev = 1284273.114
  CI (99.9%): [313965268.494, 315681347.344] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt          Score        Error  Units
SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_newCollection  thrpt   30  314823307.919 ± 858039.425  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_newCollectionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_newCollectionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1165272.579 ops/s
# Warmup Iteration   2: 2650906.453 ops/s
# Warmup Iteration   3: 3541691.557 ops/s
# Warmup Iteration   4: 4223858.807 ops/s
# Warmup Iteration   5: 4234252.194 ops/s
# Warmup Iteration   6: 4221533.341 ops/s
# Warmup Iteration   7: 4219277.448 ops/s
# Warmup Iteration   8: 4232217.361 ops/s
# Warmup Iteration   9: 4232160.381 ops/s
# Warmup Iteration  10: 4219843.506 ops/s
# Warmup Iteration  11: 4230588.006 ops/s
# Warmup Iteration  12: 4228088.690 ops/s
# Warmup Iteration  13: 4241168.649 ops/s
# Warmup Iteration  14: 4218866.870 ops/s
# Warmup Iteration  15: 4227711.124 ops/s
# Warmup Iteration  16: 4219253.224 ops/s
# Warmup Iteration  17: 4234418.334 ops/s
# Warmup Iteration  18: 4219479.696 ops/s
# Warmup Iteration  19: 4221236.326 ops/s
# Warmup Iteration  20: 4236243.507 ops/s
# Warmup Iteration  21: 4221535.456 ops/s
# Warmup Iteration  22: 4221797.411 ops/s
# Warmup Iteration  23: 4220592.318 ops/s
# Warmup Iteration  24: 4226777.853 ops/s
# Warmup Iteration  25: 4214617.339 ops/s
# Warmup Iteration  26: 4234617.167 ops/s
# Warmup Iteration  27: 4226162.525 ops/s
# Warmup Iteration  28: 4239203.710 ops/s
# Warmup Iteration  29: 4228071.611 ops/s
# Warmup Iteration  30: 4232474.217 ops/s
Iteration   1: 4232793.210 ops/s
Iteration   2: 4231328.088 ops/s
Iteration   3: 4226281.579 ops/s
Iteration   4: 4220921.899 ops/s
Iteration   5: 4166412.288 ops/s
Iteration   6: 4238481.727 ops/s
Iteration   7: 4223127.143 ops/s
Iteration   8: 4229455.391 ops/s
Iteration   9: 4245474.579 ops/s
Iteration  10: 4225628.966 ops/s
Iteration  11: 4168366.417 ops/s
Iteration  12: 4235698.333 ops/s
Iteration  13: 4240789.504 ops/s
Iteration  14: 4167435.099 ops/s
Iteration  15: 4226727.792 ops/s
Iteration  16: 4152267.010 ops/s
Iteration  17: 4239627.069 ops/s
Iteration  18: 4228303.871 ops/s
Iteration  19: 4224521.754 ops/s
Iteration  20: 4162355.747 ops/s
Iteration  21: 4214057.839 ops/s
Iteration  22: 4238804.489 ops/s
Iteration  23: 4215376.517 ops/s
Iteration  24: 4235316.141 ops/s
Iteration  25: 4238965.101 ops/s
Iteration  26: 4227309.916 ops/s
Iteration  27: 4224169.776 ops/s
Iteration  28: 4235965.365 ops/s
Iteration  29: 4240817.620 ops/s
Iteration  30: 4253350.482 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_newCollectionWith":
  4220337.690 ±(99.9%) 18291.159 ops/s [Average]
  (min, avg, max) = (4152267.010, 4220337.690, 4253350.482), stdev = 27377.348
  CI (99.9%): [4202046.531, 4238628.849] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_newCollectionWith  thrpt   30  4220337.690 ± 18291.159  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 760841.119 ops/s
# Warmup Iteration   2: 1645133.482 ops/s
# Warmup Iteration   3: 1847924.068 ops/s
# Warmup Iteration   4: 2223364.754 ops/s
# Warmup Iteration   5: 2229675.248 ops/s
# Warmup Iteration   6: 2217060.399 ops/s
# Warmup Iteration   7: 2231854.426 ops/s
# Warmup Iteration   8: 2224701.694 ops/s
# Warmup Iteration   9: 2231406.980 ops/s
# Warmup Iteration  10: 2231587.067 ops/s
# Warmup Iteration  11: 2232048.160 ops/s
# Warmup Iteration  12: 2226229.391 ops/s
# Warmup Iteration  13: 2229290.933 ops/s
# Warmup Iteration  14: 2222187.570 ops/s
# Warmup Iteration  15: 2229582.697 ops/s
# Warmup Iteration  16: 2230848.602 ops/s
# Warmup Iteration  17: 2232633.545 ops/s
# Warmup Iteration  18: 2227368.809 ops/s
# Warmup Iteration  19: 2229661.938 ops/s
# Warmup Iteration  20: 2228188.082 ops/s
# Warmup Iteration  21: 2228314.189 ops/s
# Warmup Iteration  22: 2233000.290 ops/s
# Warmup Iteration  23: 2227995.580 ops/s
# Warmup Iteration  24: 2220252.168 ops/s
# Warmup Iteration  25: 2226942.837 ops/s
# Warmup Iteration  26: 2233551.413 ops/s
# Warmup Iteration  27: 2221833.884 ops/s
# Warmup Iteration  28: 2236021.626 ops/s
# Warmup Iteration  29: 2224508.051 ops/s
# Warmup Iteration  30: 2238317.931 ops/s
Iteration   1: 2233220.302 ops/s
Iteration   2: 2229320.442 ops/s
Iteration   3: 2224567.262 ops/s
Iteration   4: 2221338.243 ops/s
Iteration   5: 2222860.750 ops/s
Iteration   6: 2225157.118 ops/s
Iteration   7: 2223670.132 ops/s
Iteration   8: 2227804.049 ops/s
Iteration   9: 2226341.781 ops/s
Iteration  10: 2234112.158 ops/s
Iteration  11: 2234431.171 ops/s
Iteration  12: 2227641.986 ops/s
Iteration  13: 2235443.701 ops/s
Iteration  14: 2223150.820 ops/s
Iteration  15: 2226046.696 ops/s
Iteration  16: 2215856.128 ops/s
Iteration  17: 2224355.123 ops/s
Iteration  18: 2235542.774 ops/s
Iteration  19: 2223570.238 ops/s
Iteration  20: 2220878.970 ops/s
Iteration  21: 2221889.042 ops/s
Iteration  22: 2231802.575 ops/s
Iteration  23: 2234754.912 ops/s
Iteration  24: 2232748.870 ops/s
Iteration  25: 2230885.089 ops/s
Iteration  26: 2239418.837 ops/s
Iteration  27: 2230216.701 ops/s
Iteration  28: 2219617.458 ops/s
Iteration  29: 2218790.018 ops/s
Iteration  30: 2229828.154 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_noneSatisfy":
  2227508.717 ±(99.9%) 3934.186 ops/s [Average]
  (min, avg, max) = (2215856.128, 2227508.717, 2239418.837), stdev = 5888.505
  CI (99.9%): [2223574.530, 2231442.903] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_noneSatisfy  thrpt   30  2227508.717 ± 3934.186  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_notEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_notEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1882831.204 ops/s
# Warmup Iteration   2: 4052008.570 ops/s
# Warmup Iteration   3: 4679845.511 ops/s
# Warmup Iteration   4: 5475168.601 ops/s
# Warmup Iteration   5: 5495566.571 ops/s
# Warmup Iteration   6: 5538631.241 ops/s
# Warmup Iteration   7: 5561053.670 ops/s
# Warmup Iteration   8: 5544056.947 ops/s
# Warmup Iteration   9: 5547550.368 ops/s
# Warmup Iteration  10: 5519924.726 ops/s
# Warmup Iteration  11: 5524822.236 ops/s
# Warmup Iteration  12: 5545575.929 ops/s
# Warmup Iteration  13: 5497138.609 ops/s
# Warmup Iteration  14: 5547858.255 ops/s
# Warmup Iteration  15: 5547387.045 ops/s
# Warmup Iteration  16: 5555184.317 ops/s
# Warmup Iteration  17: 5507994.101 ops/s
# Warmup Iteration  18: 5527437.980 ops/s
# Warmup Iteration  19: 5478561.901 ops/s
# Warmup Iteration  20: 5577026.477 ops/s
# Warmup Iteration  21: 5501597.954 ops/s
# Warmup Iteration  22: 5507113.178 ops/s
# Warmup Iteration  23: 5492582.314 ops/s
# Warmup Iteration  24: 5526438.835 ops/s
# Warmup Iteration  25: 5486071.713 ops/s
# Warmup Iteration  26: 5507349.725 ops/s
# Warmup Iteration  27: 5513016.259 ops/s
# Warmup Iteration  28: 5505613.673 ops/s
# Warmup Iteration  29: 5513180.981 ops/s
# Warmup Iteration  30: 5546848.257 ops/s
Iteration   1: 5488758.632 ops/s
Iteration   2: 5557366.616 ops/s
Iteration   3: 5534413.311 ops/s
Iteration   4: 5551181.710 ops/s
Iteration   5: 5538512.497 ops/s
Iteration   6: 5519518.700 ops/s
Iteration   7: 5528046.246 ops/s
Iteration   8: 5516805.757 ops/s
Iteration   9: 5537679.715 ops/s
Iteration  10: 5529016.745 ops/s
Iteration  11: 5521047.865 ops/s
Iteration  12: 5536231.588 ops/s
Iteration  13: 5519343.436 ops/s
Iteration  14: 5533563.925 ops/s
Iteration  15: 5424588.677 ops/s
Iteration  16: 5530066.117 ops/s
Iteration  17: 5520493.221 ops/s
Iteration  18: 5517740.720 ops/s
Iteration  19: 5435896.912 ops/s
Iteration  20: 5542292.956 ops/s
Iteration  21: 5554009.891 ops/s
Iteration  22: 5510420.605 ops/s
Iteration  23: 5522157.887 ops/s
Iteration  24: 5519360.457 ops/s
Iteration  25: 5555461.537 ops/s
Iteration  26: 5542816.608 ops/s
Iteration  27: 5553332.869 ops/s
Iteration  28: 5529836.745 ops/s
Iteration  29: 5530807.675 ops/s
Iteration  30: 5490943.441 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_notEmpty":
  5523057.102 ±(99.9%) 20201.552 ops/s [Average]
  (min, avg, max) = (5424588.677, 5523057.102, 5557366.616), stdev = 30236.734
  CI (99.9%): [5502855.550, 5543258.654] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_notEmpty  thrpt   30  5523057.102 ± 20201.552  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_reduce$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_reduce

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1193433.122 ops/s
# Warmup Iteration   2: 2443943.603 ops/s
# Warmup Iteration   3: 2280146.316 ops/s
# Warmup Iteration   4: 2699439.007 ops/s
# Warmup Iteration   5: 2688062.501 ops/s
# Warmup Iteration   6: 2695176.754 ops/s
# Warmup Iteration   7: 2698806.303 ops/s
# Warmup Iteration   8: 2690016.601 ops/s
# Warmup Iteration   9: 2681685.750 ops/s
# Warmup Iteration  10: 2699075.614 ops/s
# Warmup Iteration  11: 2691372.096 ops/s
# Warmup Iteration  12: 2697708.179 ops/s
# Warmup Iteration  13: 2702512.203 ops/s
# Warmup Iteration  14: 2700572.118 ops/s
# Warmup Iteration  15: 2696358.972 ops/s
# Warmup Iteration  16: 2696536.935 ops/s
# Warmup Iteration  17: 2699632.412 ops/s
# Warmup Iteration  18: 2696234.550 ops/s
# Warmup Iteration  19: 2698338.189 ops/s
# Warmup Iteration  20: 2698934.764 ops/s
# Warmup Iteration  21: 2700841.186 ops/s
# Warmup Iteration  22: 2694549.210 ops/s
# Warmup Iteration  23: 2703967.694 ops/s
# Warmup Iteration  24: 2702501.339 ops/s
# Warmup Iteration  25: 2700086.038 ops/s
# Warmup Iteration  26: 2705130.404 ops/s
# Warmup Iteration  27: 2704551.916 ops/s
# Warmup Iteration  28: 2702352.357 ops/s
# Warmup Iteration  29: 2703132.416 ops/s
# Warmup Iteration  30: 2688635.866 ops/s
Iteration   1: 2704172.938 ops/s
Iteration   2: 2699648.232 ops/s
Iteration   3: 2695836.391 ops/s
Iteration   4: 2701942.715 ops/s
Iteration   5: 2695532.028 ops/s
Iteration   6: 2695463.868 ops/s
Iteration   7: 2692261.356 ops/s
Iteration   8: 2703285.878 ops/s
Iteration   9: 2700445.409 ops/s
Iteration  10: 2698221.480 ops/s
Iteration  11: 2688984.153 ops/s
Iteration  12: 2689709.998 ops/s
Iteration  13: 2696310.824 ops/s
Iteration  14: 2710173.231 ops/s
Iteration  15: 2688108.244 ops/s
Iteration  16: 2694896.916 ops/s
Iteration  17: 2702255.370 ops/s
Iteration  18: 2706279.618 ops/s
Iteration  19: 2701574.875 ops/s
Iteration  20: 2702034.897 ops/s
Iteration  21: 2698995.409 ops/s
Iteration  22: 2696716.380 ops/s
Iteration  23: 2692413.430 ops/s
Iteration  24: 2706631.331 ops/s
Iteration  25: 2693315.490 ops/s
Iteration  26: 2661806.748 ops/s
Iteration  27: 2704407.853 ops/s
Iteration  28: 2664707.892 ops/s
Iteration  29: 2694874.485 ops/s
Iteration  30: 2705427.296 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_reduce":
  2696214.491 ±(99.9%) 7044.122 ops/s [Average]
  (min, avg, max) = (2661806.748, 2696214.491, 2710173.231), stdev = 10543.311
  CI (99.9%): [2689170.369, 2703258.613] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_reduce  thrpt   30  2696214.491 ± 7044.122  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_reduceIfEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_reduceIfEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 793819.559 ops/s
# Warmup Iteration   2: 1524932.566 ops/s
# Warmup Iteration   3: 1421563.199 ops/s
# Warmup Iteration   4: 1670893.917 ops/s
# Warmup Iteration   5: 1664163.267 ops/s
# Warmup Iteration   6: 1671694.729 ops/s
# Warmup Iteration   7: 1661497.884 ops/s
# Warmup Iteration   8: 1663007.846 ops/s
# Warmup Iteration   9: 1662177.902 ops/s
# Warmup Iteration  10: 1650808.056 ops/s
# Warmup Iteration  11: 1672061.667 ops/s
# Warmup Iteration  12: 1662624.072 ops/s
# Warmup Iteration  13: 1670252.079 ops/s
# Warmup Iteration  14: 1679451.104 ops/s
# Warmup Iteration  15: 1678557.126 ops/s
# Warmup Iteration  16: 1649843.079 ops/s
# Warmup Iteration  17: 1667149.812 ops/s
# Warmup Iteration  18: 1657598.552 ops/s
# Warmup Iteration  19: 1673824.952 ops/s
# Warmup Iteration  20: 1662920.561 ops/s
# Warmup Iteration  21: 1661906.594 ops/s
# Warmup Iteration  22: 1662278.913 ops/s
# Warmup Iteration  23: 1665477.506 ops/s
# Warmup Iteration  24: 1665579.624 ops/s
# Warmup Iteration  25: 1671513.763 ops/s
# Warmup Iteration  26: 1673931.741 ops/s
# Warmup Iteration  27: 1662504.024 ops/s
# Warmup Iteration  28: 1674321.233 ops/s
# Warmup Iteration  29: 1657236.376 ops/s
# Warmup Iteration  30: 1665960.850 ops/s
Iteration   1: 1680393.331 ops/s
Iteration   2: 1661640.836 ops/s
Iteration   3: 1639805.909 ops/s
Iteration   4: 1663775.992 ops/s
Iteration   5: 1666395.299 ops/s
Iteration   6: 1666599.383 ops/s
Iteration   7: 1683573.980 ops/s
Iteration   8: 1673818.492 ops/s
Iteration   9: 1650300.396 ops/s
Iteration  10: 1664558.806 ops/s
Iteration  11: 1679164.022 ops/s
Iteration  12: 1674646.008 ops/s
Iteration  13: 1675758.375 ops/s
Iteration  14: 1669290.568 ops/s
Iteration  15: 1666112.037 ops/s
Iteration  16: 1655074.937 ops/s
Iteration  17: 1648535.560 ops/s
Iteration  18: 1673045.972 ops/s
Iteration  19: 1670182.681 ops/s
Iteration  20: 1663274.884 ops/s
Iteration  21: 1669258.253 ops/s
Iteration  22: 1666832.327 ops/s
Iteration  23: 1672612.937 ops/s
Iteration  24: 1675493.874 ops/s
Iteration  25: 1670136.493 ops/s
Iteration  26: 1655836.718 ops/s
Iteration  27: 1667914.909 ops/s
Iteration  28: 1670233.830 ops/s
Iteration  29: 1665352.687 ops/s
Iteration  30: 1663465.877 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_reduceIfEmpty":
  1666769.512 ±(99.9%) 6405.403 ops/s [Average]
  (min, avg, max) = (1639805.909, 1666769.512, 1683573.980), stdev = 9587.307
  CI (99.9%): [1660364.109, 1673174.916] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score      Error  Units
SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_reduceIfEmpty  thrpt   30  1666769.512 ± 6405.403  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 687188.591 ops/s
# Warmup Iteration   2: 768517.269 ops/s
# Warmup Iteration   3: 988582.567 ops/s
# Warmup Iteration   4: 985233.271 ops/s
# Warmup Iteration   5: 985977.967 ops/s
# Warmup Iteration   6: 982680.924 ops/s
# Warmup Iteration   7: 984768.362 ops/s
# Warmup Iteration   8: 987273.694 ops/s
# Warmup Iteration   9: 991720.195 ops/s
# Warmup Iteration  10: 824646.301 ops/s
# Warmup Iteration  11: 988718.926 ops/s
# Warmup Iteration  12: 988291.512 ops/s
# Warmup Iteration  13: 989280.386 ops/s
# Warmup Iteration  14: 987231.087 ops/s
# Warmup Iteration  15: 989081.550 ops/s
# Warmup Iteration  16: 983831.694 ops/s
# Warmup Iteration  17: 1044166.132 ops/s
# Warmup Iteration  18: 1048850.354 ops/s
# Warmup Iteration  19: 1048193.406 ops/s
# Warmup Iteration  20: 1047917.507 ops/s
# Warmup Iteration  21: 1046983.218 ops/s
# Warmup Iteration  22: 1048201.930 ops/s
# Warmup Iteration  23: 1046668.986 ops/s
# Warmup Iteration  24: 1047792.405 ops/s
# Warmup Iteration  25: 1047574.285 ops/s
# Warmup Iteration  26: 1049987.509 ops/s
# Warmup Iteration  27: 1050225.107 ops/s
# Warmup Iteration  28: 1048998.536 ops/s
# Warmup Iteration  29: 1050366.354 ops/s
# Warmup Iteration  30: 1049516.682 ops/s
Iteration   1: 1050999.219 ops/s
Iteration   2: 1048888.591 ops/s
Iteration   3: 1045298.845 ops/s
Iteration   4: 1050699.050 ops/s
Iteration   5: 1049160.733 ops/s
Iteration   6: 1054320.761 ops/s
Iteration   7: 1033376.066 ops/s
Iteration   8: 1051768.481 ops/s
Iteration   9: 1045930.054 ops/s
Iteration  10: 1047651.055 ops/s
Iteration  11: 1043804.403 ops/s
Iteration  12: 1046134.170 ops/s
Iteration  13: 1048532.216 ops/s
Iteration  14: 1030365.379 ops/s
Iteration  15: 1046986.034 ops/s
Iteration  16: 1051745.584 ops/s
Iteration  17: 1048215.841 ops/s
Iteration  18: 1049787.230 ops/s
Iteration  19: 1050570.823 ops/s
Iteration  20: 1051469.576 ops/s
Iteration  21: 1047956.080 ops/s
Iteration  22: 1050003.153 ops/s
Iteration  23: 1049035.447 ops/s
Iteration  24: 1018980.720 ops/s
Iteration  25: 1045794.057 ops/s
Iteration  26: 1052678.495 ops/s
Iteration  27: 1050448.235 ops/s
Iteration  28: 1042107.024 ops/s
Iteration  29: 1028888.804 ops/s
Iteration  30: 1025357.545 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows":
  1045231.789 ±(99.9%) 5858.905 ops/s [Average]
  (min, avg, max) = (1018980.720, 1045231.789, 1054320.761), stdev = 8769.334
  CI (99.9%): [1039372.884, 1051090.694] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score      Error  Units
SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows  thrpt   30  1045231.789 ± 5858.905  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4129476.666 ops/s
# Warmup Iteration   2: 8517432.456 ops/s
# Warmup Iteration   3: 8877914.495 ops/s
# Warmup Iteration   4: 10543139.526 ops/s
# Warmup Iteration   5: 10548190.505 ops/s
# Warmup Iteration   6: 10493509.549 ops/s
# Warmup Iteration   7: 10553061.665 ops/s
# Warmup Iteration   8: 10545063.358 ops/s
# Warmup Iteration   9: 10563943.232 ops/s
# Warmup Iteration  10: 10526895.913 ops/s
# Warmup Iteration  11: 10548352.089 ops/s
# Warmup Iteration  12: 10600380.755 ops/s
# Warmup Iteration  13: 10511896.549 ops/s
# Warmup Iteration  14: 10444183.949 ops/s
# Warmup Iteration  15: 10560559.514 ops/s
# Warmup Iteration  16: 10511039.463 ops/s
# Warmup Iteration  17: 10558009.629 ops/s
# Warmup Iteration  18: 10544622.032 ops/s
# Warmup Iteration  19: 10524280.159 ops/s
# Warmup Iteration  20: 10559497.775 ops/s
# Warmup Iteration  21: 10496213.978 ops/s
# Warmup Iteration  22: 10512812.400 ops/s
# Warmup Iteration  23: 10559357.746 ops/s
# Warmup Iteration  24: 10538326.636 ops/s
# Warmup Iteration  25: 10541694.261 ops/s
# Warmup Iteration  26: 10541346.164 ops/s
# Warmup Iteration  27: 10520968.727 ops/s
# Warmup Iteration  28: 10573544.506 ops/s
# Warmup Iteration  29: 10538412.197 ops/s
# Warmup Iteration  30: 10589073.847 ops/s
Iteration   1: 10577244.398 ops/s
Iteration   2: 10584702.969 ops/s
Iteration   3: 10542419.962 ops/s
Iteration   4: 10507019.545 ops/s
Iteration   5: 10567167.306 ops/s
Iteration   6: 10537755.717 ops/s
Iteration   7: 10595405.934 ops/s
Iteration   8: 10430615.599 ops/s
Iteration   9: 10544098.095 ops/s
Iteration  10: 10520506.632 ops/s
Iteration  11: 10601904.692 ops/s
Iteration  12: 10582477.258 ops/s
Iteration  13: 10568872.993 ops/s
Iteration  14: 10479446.092 ops/s
Iteration  15: 10567339.094 ops/s
Iteration  16: 10572615.118 ops/s
Iteration  17: 10394353.984 ops/s
Iteration  18: 10535045.344 ops/s
Iteration  19: 10532343.428 ops/s
Iteration  20: 10509426.161 ops/s
Iteration  21: 10477924.471 ops/s
Iteration  22: 10509175.641 ops/s
Iteration  23: 10540021.606 ops/s
Iteration  24: 10550618.362 ops/s
Iteration  25: 10527056.323 ops/s
Iteration  26: 10544699.554 ops/s
Iteration  27: 10470679.131 ops/s
Iteration  28: 10496365.306 ops/s
Iteration  29: 10550840.345 ops/s
Iteration  30: 10498707.816 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_reject":
  10530561.629 ±(99.9%) 31824.141 ops/s [Average]
  (min, avg, max) = (10394353.984, 10530561.629, 10601904.692), stdev = 47632.879
  CI (99.9%): [10498737.488, 10562385.770] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_reject  thrpt   30  10530561.629 ± 31824.141  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8348877.815 ops/s
# Warmup Iteration   2: 16940377.026 ops/s
# Warmup Iteration   3: 14652091.426 ops/s
# Warmup Iteration   4: 17421752.571 ops/s
# Warmup Iteration   5: 17391441.781 ops/s
# Warmup Iteration   6: 17351739.056 ops/s
# Warmup Iteration   7: 17414004.391 ops/s
# Warmup Iteration   8: 17368623.994 ops/s
# Warmup Iteration   9: 17372435.290 ops/s
# Warmup Iteration  10: 17377872.516 ops/s
# Warmup Iteration  11: 17398225.918 ops/s
# Warmup Iteration  12: 17373119.714 ops/s
# Warmup Iteration  13: 17381681.133 ops/s
# Warmup Iteration  14: 17397972.827 ops/s
# Warmup Iteration  15: 17372130.572 ops/s
# Warmup Iteration  16: 17380995.794 ops/s
# Warmup Iteration  17: 17409399.257 ops/s
# Warmup Iteration  18: 17355229.604 ops/s
# Warmup Iteration  19: 17400201.863 ops/s
# Warmup Iteration  20: 17389484.369 ops/s
# Warmup Iteration  21: 17382771.360 ops/s
# Warmup Iteration  22: 17416106.804 ops/s
# Warmup Iteration  23: 17338531.490 ops/s
# Warmup Iteration  24: 17357206.042 ops/s
# Warmup Iteration  25: 17391078.032 ops/s
# Warmup Iteration  26: 17397046.605 ops/s
# Warmup Iteration  27: 17419538.295 ops/s
# Warmup Iteration  28: 17344462.590 ops/s
# Warmup Iteration  29: 17379315.047 ops/s
# Warmup Iteration  30: 17388322.557 ops/s
Iteration   1: 17375570.910 ops/s
Iteration   2: 17392718.876 ops/s
Iteration   3: 17358018.595 ops/s
Iteration   4: 17367669.334 ops/s
Iteration   5: 17368902.676 ops/s
Iteration   6: 17397012.769 ops/s
Iteration   7: 17407564.126 ops/s
Iteration   8: 17370363.899 ops/s
Iteration   9: 17408676.751 ops/s
Iteration  10: 17409793.477 ops/s
Iteration  11: 17336462.039 ops/s
Iteration  12: 17381420.953 ops/s
Iteration  13: 17385840.867 ops/s
Iteration  14: 17408957.729 ops/s
Iteration  15: 17459270.132 ops/s
Iteration  16: 17406112.963 ops/s
Iteration  17: 17375867.276 ops/s
Iteration  18: 17381901.294 ops/s
Iteration  19: 17386799.337 ops/s
Iteration  20: 17427201.170 ops/s
Iteration  21: 17399239.614 ops/s
Iteration  22: 17406178.742 ops/s
Iteration  23: 17383567.473 ops/s
Iteration  24: 17344329.359 ops/s
Iteration  25: 17419953.638 ops/s
Iteration  26: 17392556.891 ops/s
Iteration  27: 17387046.421 ops/s
Iteration  28: 17415159.528 ops/s
Iteration  29: 17396750.005 ops/s
Iteration  30: 17226365.739 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_remove":
  17385909.086 ±(99.9%) 26035.882 ops/s [Average]
  (min, avg, max) = (17226365.739, 17385909.086, 17459270.132), stdev = 38969.285
  CI (99.9%): [17359873.204, 17411944.968] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_remove  thrpt   30  17385909.086 ± 26035.882  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1949985.557 ops/s
# Warmup Iteration   2: 4216788.822 ops/s
# Warmup Iteration   3: 3554181.253 ops/s
# Warmup Iteration   4: 4246138.338 ops/s
# Warmup Iteration   5: 4229426.898 ops/s
# Warmup Iteration   6: 4237545.772 ops/s
# Warmup Iteration   7: 4233589.756 ops/s
# Warmup Iteration   8: 4242461.063 ops/s
# Warmup Iteration   9: 4240948.198 ops/s
# Warmup Iteration  10: 4234539.146 ops/s
# Warmup Iteration  11: 4232575.806 ops/s
# Warmup Iteration  12: 4237454.777 ops/s
# Warmup Iteration  13: 4229716.744 ops/s
# Warmup Iteration  14: 4236486.593 ops/s
# Warmup Iteration  15: 4240495.357 ops/s
# Warmup Iteration  16: 4236377.236 ops/s
# Warmup Iteration  17: 4241948.042 ops/s
# Warmup Iteration  18: 4221832.102 ops/s
# Warmup Iteration  19: 4229013.187 ops/s
# Warmup Iteration  20: 4241551.584 ops/s
# Warmup Iteration  21: 4237925.816 ops/s
# Warmup Iteration  22: 4210163.005 ops/s
# Warmup Iteration  23: 4248455.622 ops/s
# Warmup Iteration  24: 4239772.347 ops/s
# Warmup Iteration  25: 4240895.444 ops/s
# Warmup Iteration  26: 4242208.881 ops/s
# Warmup Iteration  27: 4238969.633 ops/s
# Warmup Iteration  28: 4234746.673 ops/s
# Warmup Iteration  29: 4239271.167 ops/s
# Warmup Iteration  30: 4241183.435 ops/s
Iteration   1: 4240907.413 ops/s
Iteration   2: 4236264.015 ops/s
Iteration   3: 4228542.507 ops/s
Iteration   4: 4241426.428 ops/s
Iteration   5: 4223146.379 ops/s
Iteration   6: 4234661.363 ops/s
Iteration   7: 4204089.699 ops/s
Iteration   8: 4243098.601 ops/s
Iteration   9: 4232729.153 ops/s
Iteration  10: 4245537.915 ops/s
Iteration  11: 4229291.913 ops/s
Iteration  12: 4252696.405 ops/s
Iteration  13: 4247574.397 ops/s
Iteration  14: 4250701.150 ops/s
Iteration  15: 4240911.272 ops/s
Iteration  16: 4235480.675 ops/s
Iteration  17: 4232782.073 ops/s
Iteration  18: 4253921.930 ops/s
Iteration  19: 4242526.323 ops/s
Iteration  20: 4243668.077 ops/s
Iteration  21: 4233204.367 ops/s
Iteration  22: 4252492.473 ops/s
Iteration  23: 4239614.303 ops/s
Iteration  24: 4252053.070 ops/s
Iteration  25: 4241193.166 ops/s
Iteration  26: 4251340.278 ops/s
Iteration  27: 4231421.706 ops/s
Iteration  28: 4233074.510 ops/s
Iteration  29: 4233367.647 ops/s
Iteration  30: 4241011.657 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_removeAll":
  4238957.695 ±(99.9%) 7006.943 ops/s [Average]
  (min, avg, max) = (4204089.699, 4238957.695, 4253921.930), stdev = 10487.663
  CI (99.9%): [4231950.753, 4245964.638] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_removeAll  thrpt   30  4238957.695 ± 7006.943  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_removeAll_iterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_removeAll_iterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1439487.952 ops/s
# Warmup Iteration   2: 3288392.344 ops/s
# Warmup Iteration   3: 2773149.815 ops/s
# Warmup Iteration   4: 3316976.710 ops/s
# Warmup Iteration   5: 3307524.844 ops/s
# Warmup Iteration   6: 3321423.055 ops/s
# Warmup Iteration   7: 3318098.550 ops/s
# Warmup Iteration   8: 3322512.379 ops/s
# Warmup Iteration   9: 3317627.920 ops/s
# Warmup Iteration  10: 3317424.635 ops/s
# Warmup Iteration  11: 3324335.397 ops/s
# Warmup Iteration  12: 3316426.135 ops/s
# Warmup Iteration  13: 3310793.151 ops/s
# Warmup Iteration  14: 3317858.058 ops/s
# Warmup Iteration  15: 3311597.073 ops/s
# Warmup Iteration  16: 3317195.253 ops/s
# Warmup Iteration  17: 3316658.269 ops/s
# Warmup Iteration  18: 3289364.512 ops/s
# Warmup Iteration  19: 3323030.699 ops/s
# Warmup Iteration  20: 3323799.228 ops/s
# Warmup Iteration  21: 3306900.127 ops/s
# Warmup Iteration  22: 3320045.861 ops/s
# Warmup Iteration  23: 3315030.547 ops/s
# Warmup Iteration  24: 3324268.088 ops/s
# Warmup Iteration  25: 3322567.532 ops/s
# Warmup Iteration  26: 3316445.669 ops/s
# Warmup Iteration  27: 3295869.343 ops/s
# Warmup Iteration  28: 3312883.832 ops/s
# Warmup Iteration  29: 3315862.444 ops/s
# Warmup Iteration  30: 3311462.314 ops/s
Iteration   1: 3320185.152 ops/s
Iteration   2: 3311488.240 ops/s
Iteration   3: 3306710.687 ops/s
Iteration   4: 3329465.066 ops/s
Iteration   5: 3313453.454 ops/s
Iteration   6: 3328490.073 ops/s
Iteration   7: 3311153.179 ops/s
Iteration   8: 3319820.326 ops/s
Iteration   9: 3326666.524 ops/s
Iteration  10: 3251999.352 ops/s
Iteration  11: 3333156.518 ops/s
Iteration  12: 3320012.153 ops/s
Iteration  13: 3313303.754 ops/s
Iteration  14: 3325772.525 ops/s
Iteration  15: 3313373.597 ops/s
Iteration  16: 3271221.942 ops/s
Iteration  17: 3312207.006 ops/s
Iteration  18: 3325612.420 ops/s
Iteration  19: 3309530.712 ops/s
Iteration  20: 3317039.829 ops/s
Iteration  21: 3320157.154 ops/s
Iteration  22: 3322811.604 ops/s
Iteration  23: 3325744.468 ops/s
Iteration  24: 3315644.464 ops/s
Iteration  25: 3306731.284 ops/s
Iteration  26: 3315940.265 ops/s
Iteration  27: 3318601.413 ops/s
Iteration  28: 3324089.058 ops/s
Iteration  29: 3321884.427 ops/s
Iteration  30: 3309807.446 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_removeAll_iterable":
  3314735.803 ±(99.9%) 10839.026 ops/s [Average]
  (min, avg, max) = (3251999.352, 3314735.803, 3333156.518), stdev = 16223.345
  CI (99.9%): [3303896.777, 3325574.829] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_removeAll_iterable  thrpt   30  3314735.803 ± 10839.026  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 814911.369 ops/s
# Warmup Iteration   2: 1857356.361 ops/s
# Warmup Iteration   3: 1556294.724 ops/s
# Warmup Iteration   4: 1867898.434 ops/s
# Warmup Iteration   5: 1857178.671 ops/s
# Warmup Iteration   6: 1860153.970 ops/s
# Warmup Iteration   7: 1852638.800 ops/s
# Warmup Iteration   8: 1861623.845 ops/s
# Warmup Iteration   9: 1861643.728 ops/s
# Warmup Iteration  10: 1862620.982 ops/s
# Warmup Iteration  11: 1863447.077 ops/s
# Warmup Iteration  12: 1861119.876 ops/s
# Warmup Iteration  13: 1863319.026 ops/s
# Warmup Iteration  14: 1858192.389 ops/s
# Warmup Iteration  15: 1865136.440 ops/s
# Warmup Iteration  16: 1862933.176 ops/s
# Warmup Iteration  17: 1855904.304 ops/s
# Warmup Iteration  18: 1862046.899 ops/s
# Warmup Iteration  19: 1865122.540 ops/s
# Warmup Iteration  20: 1856835.260 ops/s
# Warmup Iteration  21: 1851399.664 ops/s
# Warmup Iteration  22: 1859415.711 ops/s
# Warmup Iteration  23: 1861244.024 ops/s
# Warmup Iteration  24: 1864885.553 ops/s
# Warmup Iteration  25: 1867054.096 ops/s
# Warmup Iteration  26: 1866916.371 ops/s
# Warmup Iteration  27: 1847854.325 ops/s
# Warmup Iteration  28: 1866547.264 ops/s
# Warmup Iteration  29: 1868594.828 ops/s
# Warmup Iteration  30: 1863285.001 ops/s
Iteration   1: 1830970.298 ops/s
Iteration   2: 1858554.731 ops/s
Iteration   3: 1864021.981 ops/s
Iteration   4: 1869413.404 ops/s
Iteration   5: 1867771.505 ops/s
Iteration   6: 1862189.849 ops/s
Iteration   7: 1860927.974 ops/s
Iteration   8: 1864393.106 ops/s
Iteration   9: 1866142.963 ops/s
Iteration  10: 1858678.152 ops/s
Iteration  11: 1862103.818 ops/s
Iteration  12: 1863769.781 ops/s
Iteration  13: 1863344.067 ops/s
Iteration  14: 1862791.779 ops/s
Iteration  15: 1864355.810 ops/s
Iteration  16: 1863456.255 ops/s
Iteration  17: 1862489.606 ops/s
Iteration  18: 1863448.837 ops/s
Iteration  19: 1871054.397 ops/s
Iteration  20: 1865890.401 ops/s
Iteration  21: 1865382.219 ops/s
Iteration  22: 1866975.995 ops/s
Iteration  23: 1861150.961 ops/s
Iteration  24: 1857530.172 ops/s
Iteration  25: 1863795.139 ops/s
Iteration  26: 1868602.076 ops/s
Iteration  27: 1862721.869 ops/s
Iteration  28: 1857220.033 ops/s
Iteration  29: 1866258.144 ops/s
Iteration  30: 1864938.165 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_retainAll":
  1862678.116 ±(99.9%) 4566.775 ops/s [Average]
  (min, avg, max) = (1830970.298, 1862678.116, 1871054.397), stdev = 6835.335
  CI (99.9%): [1858111.341, 1867244.892] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_retainAll  thrpt   30  1862678.116 ± 4566.775  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_retainAll_iterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_retainAll_iterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 554699.801 ops/s
# Warmup Iteration   2: 1297263.050 ops/s
# Warmup Iteration   3: 1313797.340 ops/s
# Warmup Iteration   4: 1138909.317 ops/s
# Warmup Iteration   5: 1335131.324 ops/s
# Warmup Iteration   6: 1327142.578 ops/s
# Warmup Iteration   7: 1333059.148 ops/s
# Warmup Iteration   8: 1340790.181 ops/s
# Warmup Iteration   9: 1338938.266 ops/s
# Warmup Iteration  10: 1340586.254 ops/s
# Warmup Iteration  11: 1336875.654 ops/s
# Warmup Iteration  12: 1338389.487 ops/s
# Warmup Iteration  13: 1335652.056 ops/s
# Warmup Iteration  14: 1341355.607 ops/s
# Warmup Iteration  15: 1337597.663 ops/s
# Warmup Iteration  16: 1338974.419 ops/s
# Warmup Iteration  17: 1327636.657 ops/s
# Warmup Iteration  18: 1338418.063 ops/s
# Warmup Iteration  19: 1336178.788 ops/s
# Warmup Iteration  20: 1333562.859 ops/s
# Warmup Iteration  21: 1338098.581 ops/s
# Warmup Iteration  22: 1339855.063 ops/s
# Warmup Iteration  23: 1335646.688 ops/s
# Warmup Iteration  24: 1340662.290 ops/s
# Warmup Iteration  25: 1335096.306 ops/s
# Warmup Iteration  26: 1340472.412 ops/s
# Warmup Iteration  27: 1329314.917 ops/s
# Warmup Iteration  28: 1338518.193 ops/s
# Warmup Iteration  29: 1339309.569 ops/s
# Warmup Iteration  30: 1327508.253 ops/s
Iteration   1: 1337492.686 ops/s
Iteration   2: 1339998.889 ops/s
Iteration   3: 1336696.510 ops/s
Iteration   4: 1336882.803 ops/s
Iteration   5: 1336917.112 ops/s
Iteration   6: 1343485.108 ops/s
Iteration   7: 1339659.640 ops/s
Iteration   8: 1338717.609 ops/s
Iteration   9: 1340601.122 ops/s
Iteration  10: 1337454.266 ops/s
Iteration  11: 1340833.058 ops/s
Iteration  12: 1338746.288 ops/s
Iteration  13: 1341114.981 ops/s
Iteration  14: 1335188.701 ops/s
Iteration  15: 1339577.838 ops/s
Iteration  16: 1341194.165 ops/s
Iteration  17: 1340028.101 ops/s
Iteration  18: 1339431.987 ops/s
Iteration  19: 1337484.695 ops/s
Iteration  20: 1338311.434 ops/s
Iteration  21: 1340196.640 ops/s
Iteration  22: 1332499.675 ops/s
Iteration  23: 1339553.556 ops/s
Iteration  24: 1341775.502 ops/s
Iteration  25: 1315137.502 ops/s
Iteration  26: 1328240.641 ops/s
Iteration  27: 1339404.109 ops/s
Iteration  28: 1339646.856 ops/s
Iteration  29: 1338589.067 ops/s
Iteration  30: 1342311.679 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_retainAll_iterable":
  1337905.741 ±(99.9%) 3481.005 ops/s [Average]
  (min, avg, max) = (1315137.502, 1337905.741, 1343485.108), stdev = 5210.205
  CI (99.9%): [1334424.736, 1341386.746] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score      Error  Units
SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_retainAll_iterable  thrpt   30  1337905.741 ± 3481.005  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4140281.853 ops/s
# Warmup Iteration   2: 8519310.166 ops/s
# Warmup Iteration   3: 8510269.064 ops/s
# Warmup Iteration   4: 10132186.343 ops/s
# Warmup Iteration   5: 10090567.170 ops/s
# Warmup Iteration   6: 10097777.554 ops/s
# Warmup Iteration   7: 10060566.213 ops/s
# Warmup Iteration   8: 10121736.419 ops/s
# Warmup Iteration   9: 10119073.599 ops/s
# Warmup Iteration  10: 10135078.854 ops/s
# Warmup Iteration  11: 10076932.893 ops/s
# Warmup Iteration  12: 10116971.664 ops/s
# Warmup Iteration  13: 10047962.960 ops/s
# Warmup Iteration  14: 10111223.951 ops/s
# Warmup Iteration  15: 10123397.856 ops/s
# Warmup Iteration  16: 10129031.362 ops/s
# Warmup Iteration  17: 10020405.666 ops/s
# Warmup Iteration  18: 10154486.527 ops/s
# Warmup Iteration  19: 10099847.936 ops/s
# Warmup Iteration  20: 10091661.516 ops/s
# Warmup Iteration  21: 10102377.753 ops/s
# Warmup Iteration  22: 10105796.322 ops/s
# Warmup Iteration  23: 10127290.984 ops/s
# Warmup Iteration  24: 10126350.019 ops/s
# Warmup Iteration  25: 10074936.949 ops/s
# Warmup Iteration  26: 10100164.016 ops/s
# Warmup Iteration  27: 10129289.577 ops/s
# Warmup Iteration  28: 10114373.095 ops/s
# Warmup Iteration  29: 10127329.104 ops/s
# Warmup Iteration  30: 10144641.673 ops/s
Iteration   1: 10131237.726 ops/s
Iteration   2: 10167395.446 ops/s
Iteration   3: 10158555.737 ops/s
Iteration   4: 10073206.026 ops/s
Iteration   5: 10136057.637 ops/s
Iteration   6: 10095325.443 ops/s
Iteration   7: 10128985.853 ops/s
Iteration   8: 10118778.770 ops/s
Iteration   9: 10154151.606 ops/s
Iteration  10: 10138685.831 ops/s
Iteration  11: 10083280.124 ops/s
Iteration  12: 10127991.711 ops/s
Iteration  13: 10127042.768 ops/s
Iteration  14: 10002339.704 ops/s
Iteration  15: 10144923.377 ops/s
Iteration  16: 10120519.947 ops/s
Iteration  17: 10103826.104 ops/s
Iteration  18: 10128364.020 ops/s
Iteration  19: 10141228.600 ops/s
Iteration  20: 10130168.761 ops/s
Iteration  21: 10139842.042 ops/s
Iteration  22: 10132305.324 ops/s
Iteration  23: 10114373.230 ops/s
Iteration  24: 10122370.418 ops/s
Iteration  25: 10131596.539 ops/s
Iteration  26: 10161888.388 ops/s
Iteration  27: 10160802.069 ops/s
Iteration  28: 10139259.698 ops/s
Iteration  29: 10111362.081 ops/s
Iteration  30: 10126975.720 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_select":
  10125094.690 ±(99.9%) 21192.300 ops/s [Average]
  (min, avg, max) = (10002339.704, 10125094.690, 10167395.446), stdev = 31719.639
  CI (99.9%): [10103902.390, 10146286.990] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_select  thrpt   30  10125094.690 ± 21192.300  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1505048.055 ops/s
# Warmup Iteration   2: 2902654.554 ops/s
# Warmup Iteration   3: 3510457.898 ops/s
# Warmup Iteration   4: 3875412.366 ops/s
# Warmup Iteration   5: 3901670.932 ops/s
# Warmup Iteration   6: 3887014.636 ops/s
# Warmup Iteration   7: 3904856.316 ops/s
# Warmup Iteration   8: 3915509.359 ops/s
# Warmup Iteration   9: 3916132.921 ops/s
# Warmup Iteration  10: 3913715.087 ops/s
# Warmup Iteration  11: 3922187.416 ops/s
# Warmup Iteration  12: 3907141.229 ops/s
# Warmup Iteration  13: 3902258.219 ops/s
# Warmup Iteration  14: 3924347.567 ops/s
# Warmup Iteration  15: 3900172.889 ops/s
# Warmup Iteration  16: 3906809.686 ops/s
# Warmup Iteration  17: 3916519.083 ops/s
# Warmup Iteration  18: 3888448.084 ops/s
# Warmup Iteration  19: 3908262.690 ops/s
# Warmup Iteration  20: 3918194.132 ops/s
# Warmup Iteration  21: 3901571.510 ops/s
# Warmup Iteration  22: 3929519.279 ops/s
# Warmup Iteration  23: 3897793.305 ops/s
# Warmup Iteration  24: 3904558.640 ops/s
# Warmup Iteration  25: 3919923.283 ops/s
# Warmup Iteration  26: 3909680.275 ops/s
# Warmup Iteration  27: 3901682.753 ops/s
# Warmup Iteration  28: 3906617.753 ops/s
# Warmup Iteration  29: 3905366.377 ops/s
# Warmup Iteration  30: 3908612.454 ops/s
Iteration   1: 3927106.712 ops/s
Iteration   2: 3880242.842 ops/s
Iteration   3: 3903080.462 ops/s
Iteration   4: 3922362.683 ops/s
Iteration   5: 3931873.556 ops/s
Iteration   6: 3918842.541 ops/s
Iteration   7: 3924582.534 ops/s
Iteration   8: 3895551.931 ops/s
Iteration   9: 3878133.683 ops/s
Iteration  10: 3912663.291 ops/s
Iteration  11: 3913013.512 ops/s
Iteration  12: 3916455.488 ops/s
Iteration  13: 3912759.881 ops/s
Iteration  14: 3886121.601 ops/s
Iteration  15: 3851698.197 ops/s
Iteration  16: 3928260.278 ops/s
Iteration  17: 3927526.495 ops/s
Iteration  18: 3901658.393 ops/s
Iteration  19: 3848164.616 ops/s
Iteration  20: 3910228.573 ops/s
Iteration  21: 3918401.112 ops/s
Iteration  22: 3927689.352 ops/s
Iteration  23: 3915976.945 ops/s
Iteration  24: 3917831.065 ops/s
Iteration  25: 3907483.947 ops/s
Iteration  26: 3905553.517 ops/s
Iteration  27: 3922030.702 ops/s
Iteration  28: 3941789.573 ops/s
Iteration  29: 3890629.348 ops/s
Iteration  30: 3912639.309 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_size":
  3908345.071 ±(99.9%) 14628.646 ops/s [Average]
  (min, avg, max) = (3848164.616, 3908345.071, 3941789.573), stdev = 21895.470
  CI (99.9%): [3893716.426, 3922973.717] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_size  thrpt   30  3908345.071 ± 14628.646  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_testEquals$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_testEquals

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 167967011.090 ops/s
# Warmup Iteration   2: 298255463.748 ops/s
# Warmup Iteration   3: 272007336.058 ops/s
# Warmup Iteration   4: 312804620.746 ops/s
# Warmup Iteration   5: 310732678.190 ops/s
# Warmup Iteration   6: 312648033.914 ops/s
# Warmup Iteration   7: 313796205.156 ops/s
# Warmup Iteration   8: 313143745.633 ops/s
# Warmup Iteration   9: 314082171.436 ops/s
# Warmup Iteration  10: 311766386.811 ops/s
# Warmup Iteration  11: 311463822.553 ops/s
# Warmup Iteration  12: 311889448.623 ops/s
# Warmup Iteration  13: 313253217.624 ops/s
# Warmup Iteration  14: 314135529.716 ops/s
# Warmup Iteration  15: 313289490.848 ops/s
# Warmup Iteration  16: 312521858.509 ops/s
# Warmup Iteration  17: 310767942.734 ops/s
# Warmup Iteration  18: 311352093.829 ops/s
# Warmup Iteration  19: 313076615.073 ops/s
# Warmup Iteration  20: 310834540.033 ops/s
# Warmup Iteration  21: 308798804.013 ops/s
# Warmup Iteration  22: 310248603.464 ops/s
# Warmup Iteration  23: 311300355.693 ops/s
# Warmup Iteration  24: 310371058.258 ops/s
# Warmup Iteration  25: 311549255.618 ops/s
# Warmup Iteration  26: 310326786.094 ops/s
# Warmup Iteration  27: 312059493.515 ops/s
# Warmup Iteration  28: 310568457.057 ops/s
# Warmup Iteration  29: 312333871.609 ops/s
# Warmup Iteration  30: 311870929.351 ops/s
Iteration   1: 312074290.639 ops/s
Iteration   2: 310031883.071 ops/s
Iteration   3: 311908573.502 ops/s
Iteration   4: 312107987.935 ops/s
Iteration   5: 312571817.682 ops/s
Iteration   6: 311145564.115 ops/s
Iteration   7: 310351421.781 ops/s
Iteration   8: 310979639.058 ops/s
Iteration   9: 310208221.467 ops/s
Iteration  10: 312758275.164 ops/s
Iteration  11: 312183099.253 ops/s
Iteration  12: 311897052.346 ops/s
Iteration  13: 309624690.684 ops/s
Iteration  14: 310843478.361 ops/s
Iteration  15: 310906456.671 ops/s
Iteration  16: 311296759.385 ops/s
Iteration  17: 297847308.892 ops/s
Iteration  18: 311618612.724 ops/s
Iteration  19: 311836784.183 ops/s
Iteration  20: 311035089.704 ops/s
Iteration  21: 312179581.266 ops/s
Iteration  22: 312259086.116 ops/s
Iteration  23: 311318843.314 ops/s
Iteration  24: 310881047.056 ops/s
Iteration  25: 310359262.033 ops/s
Iteration  26: 312040669.516 ops/s
Iteration  27: 310440317.879 ops/s
Iteration  28: 311856762.125 ops/s
Iteration  29: 310928593.873 ops/s
Iteration  30: 311234659.088 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_testEquals":
  310890860.963 ±(99.9%) 1729841.660 ops/s [Average]
  (min, avg, max) = (297847308.892, 310890860.963, 312758275.164), stdev = 2589145.758
  CI (99.9%): [309161019.303, 312620702.623] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt          Score         Error  Units
SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_testEquals  thrpt   30  310890860.963 ± 1729841.660  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_testHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_testHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 170910782.591 ops/s
# Warmup Iteration   2: 299010366.398 ops/s
# Warmup Iteration   3: 279187145.703 ops/s
# Warmup Iteration   4: 311699973.961 ops/s
# Warmup Iteration   5: 314295713.248 ops/s
# Warmup Iteration   6: 314893546.105 ops/s
# Warmup Iteration   7: 313028740.503 ops/s
# Warmup Iteration   8: 311772443.895 ops/s
# Warmup Iteration   9: 312600317.949 ops/s
# Warmup Iteration  10: 314124549.985 ops/s
# Warmup Iteration  11: 314558850.869 ops/s
# Warmup Iteration  12: 315008748.713 ops/s
# Warmup Iteration  13: 315210818.925 ops/s
# Warmup Iteration  14: 313973790.291 ops/s
# Warmup Iteration  15: 313709700.550 ops/s
# Warmup Iteration  16: 314197810.719 ops/s
# Warmup Iteration  17: 314603783.095 ops/s
# Warmup Iteration  18: 314629287.897 ops/s
# Warmup Iteration  19: 314766502.187 ops/s
# Warmup Iteration  20: 315365533.822 ops/s
# Warmup Iteration  21: 314507240.224 ops/s
# Warmup Iteration  22: 314899465.394 ops/s
# Warmup Iteration  23: 315246852.891 ops/s
# Warmup Iteration  24: 314841738.952 ops/s
# Warmup Iteration  25: 315830647.609 ops/s
# Warmup Iteration  26: 315669092.344 ops/s
# Warmup Iteration  27: 315028350.301 ops/s
# Warmup Iteration  28: 314610408.170 ops/s
# Warmup Iteration  29: 315060030.730 ops/s
# Warmup Iteration  30: 314466824.874 ops/s
Iteration   1: 314384138.225 ops/s
Iteration   2: 315020175.635 ops/s
Iteration   3: 314372228.052 ops/s
Iteration   4: 315623079.828 ops/s
Iteration   5: 312688043.501 ops/s
Iteration   6: 314660312.787 ops/s
Iteration   7: 314749345.317 ops/s
Iteration   8: 314632970.554 ops/s
Iteration   9: 316313092.879 ops/s
Iteration  10: 315153617.428 ops/s
Iteration  11: 313750909.974 ops/s
Iteration  12: 314326546.525 ops/s
Iteration  13: 314599307.786 ops/s
Iteration  14: 314891313.274 ops/s
Iteration  15: 315206979.930 ops/s
Iteration  16: 313241327.772 ops/s
Iteration  17: 314525452.529 ops/s
Iteration  18: 315357847.734 ops/s
Iteration  19: 314169733.152 ops/s
Iteration  20: 314399165.530 ops/s
Iteration  21: 313443103.839 ops/s
Iteration  22: 314029520.119 ops/s
Iteration  23: 313880358.190 ops/s
Iteration  24: 315235215.599 ops/s
Iteration  25: 314778988.667 ops/s
Iteration  26: 314885707.159 ops/s
Iteration  27: 314772761.215 ops/s
Iteration  28: 314005757.099 ops/s
Iteration  29: 315475649.872 ops/s
Iteration  30: 316026834.675 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_testHashCode":
  314619982.828 ±(99.9%) 526633.828 ops/s [Average]
  (min, avg, max) = (312688043.501, 314619982.828, 316313092.879), stdev = 788240.782
  CI (99.9%): [314093349.000, 315146616.657] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt          Score        Error  Units
SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_testHashCode  thrpt   30  314619982.828 ± 526633.828  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 171207440.718 ops/s
# Warmup Iteration   2: 298567440.905 ops/s
# Warmup Iteration   3: 280381552.723 ops/s
# Warmup Iteration   4: 314572530.263 ops/s
# Warmup Iteration   5: 315246636.505 ops/s
# Warmup Iteration   6: 315722119.239 ops/s
# Warmup Iteration   7: 314646737.448 ops/s
# Warmup Iteration   8: 315338723.991 ops/s
# Warmup Iteration   9: 314997477.993 ops/s
# Warmup Iteration  10: 314593102.447 ops/s
# Warmup Iteration  11: 314735307.244 ops/s
# Warmup Iteration  12: 316179252.750 ops/s
# Warmup Iteration  13: 314728189.568 ops/s
# Warmup Iteration  14: 315353673.957 ops/s
# Warmup Iteration  15: 315747075.561 ops/s
# Warmup Iteration  16: 315085753.129 ops/s
# Warmup Iteration  17: 315753804.587 ops/s
# Warmup Iteration  18: 313568460.159 ops/s
# Warmup Iteration  19: 314455140.415 ops/s
# Warmup Iteration  20: 314760857.826 ops/s
# Warmup Iteration  21: 313626554.689 ops/s
# Warmup Iteration  22: 314392854.272 ops/s
# Warmup Iteration  23: 313907434.117 ops/s
# Warmup Iteration  24: 315403406.380 ops/s
# Warmup Iteration  25: 314549115.953 ops/s
# Warmup Iteration  26: 314387338.160 ops/s
# Warmup Iteration  27: 314789407.043 ops/s
# Warmup Iteration  28: 314492249.689 ops/s
# Warmup Iteration  29: 314366387.063 ops/s
# Warmup Iteration  30: 314161770.553 ops/s
Iteration   1: 315821105.863 ops/s
Iteration   2: 313841129.571 ops/s
Iteration   3: 313416270.788 ops/s
Iteration   4: 313809005.674 ops/s
Iteration   5: 316128348.245 ops/s
Iteration   6: 314808542.122 ops/s
Iteration   7: 315507058.210 ops/s
Iteration   8: 312108726.121 ops/s
Iteration   9: 314415435.876 ops/s
Iteration  10: 315180044.560 ops/s
Iteration  11: 314879162.225 ops/s
Iteration  12: 315368126.304 ops/s
Iteration  13: 315290767.275 ops/s
Iteration  14: 309984811.171 ops/s
Iteration  15: 313699463.764 ops/s
Iteration  16: 315831890.046 ops/s
Iteration  17: 315224636.750 ops/s
Iteration  18: 315007865.779 ops/s
Iteration  19: 314084254.629 ops/s
Iteration  20: 313147693.670 ops/s
Iteration  21: 314307770.922 ops/s
Iteration  22: 314171980.814 ops/s
Iteration  23: 314703873.635 ops/s
Iteration  24: 315512351.594 ops/s
Iteration  25: 313097807.396 ops/s
Iteration  26: 314212908.683 ops/s
Iteration  27: 314787331.561 ops/s
Iteration  28: 314041121.448 ops/s
Iteration  29: 315056917.883 ops/s
Iteration  30: 314405130.258 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_testToString":
  314395051.095 ±(99.9%) 826973.172 ops/s [Average]
  (min, avg, max) = (309984811.171, 314395051.095, 316128348.245), stdev = 1237774.607
  CI (99.9%): [313568077.922, 315222024.267] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt          Score        Error  Units
SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_testToString  thrpt   30  314395051.095 ± 826973.172  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1279097.338 ops/s
# Warmup Iteration   2: 2830403.538 ops/s
# Warmup Iteration   3: 2759377.326 ops/s
# Warmup Iteration   4: 3339445.946 ops/s
# Warmup Iteration   5: 3321574.606 ops/s
# Warmup Iteration   6: 3299426.862 ops/s
# Warmup Iteration   7: 3346770.684 ops/s
# Warmup Iteration   8: 3343428.998 ops/s
# Warmup Iteration   9: 3338668.720 ops/s
# Warmup Iteration  10: 3329706.348 ops/s
# Warmup Iteration  11: 3337712.171 ops/s
# Warmup Iteration  12: 3312553.576 ops/s
# Warmup Iteration  13: 3332192.242 ops/s
# Warmup Iteration  14: 3322768.521 ops/s
# Warmup Iteration  15: 3340662.255 ops/s
# Warmup Iteration  16: 3322070.506 ops/s
# Warmup Iteration  17: 3335861.322 ops/s
# Warmup Iteration  18: 3344916.803 ops/s
# Warmup Iteration  19: 3346267.811 ops/s
# Warmup Iteration  20: 3318436.439 ops/s
# Warmup Iteration  21: 3337509.487 ops/s
# Warmup Iteration  22: 3324409.775 ops/s
# Warmup Iteration  23: 3301221.616 ops/s
# Warmup Iteration  24: 3324373.635 ops/s
# Warmup Iteration  25: 3318693.871 ops/s
# Warmup Iteration  26: 3340946.426 ops/s
# Warmup Iteration  27: 3346389.583 ops/s
# Warmup Iteration  28: 3333391.953 ops/s
# Warmup Iteration  29: 3330435.264 ops/s
# Warmup Iteration  30: 3334756.816 ops/s
Iteration   1: 3328803.161 ops/s
Iteration   2: 3327814.875 ops/s
Iteration   3: 3342142.939 ops/s
Iteration   4: 3347007.442 ops/s
Iteration   5: 3338898.292 ops/s
Iteration   6: 3338408.030 ops/s
Iteration   7: 3336874.516 ops/s
Iteration   8: 3351924.566 ops/s
Iteration   9: 3341625.512 ops/s
Iteration  10: 3345332.341 ops/s
Iteration  11: 3338219.359 ops/s
Iteration  12: 3340909.919 ops/s
Iteration  13: 3337539.411 ops/s
Iteration  14: 3333151.288 ops/s
Iteration  15: 3345925.647 ops/s
Iteration  16: 3347001.907 ops/s
Iteration  17: 3329029.825 ops/s
Iteration  18: 3333962.807 ops/s
Iteration  19: 3336277.935 ops/s
Iteration  20: 3349998.722 ops/s
Iteration  21: 3339114.803 ops/s
Iteration  22: 3338250.953 ops/s
Iteration  23: 3320483.941 ops/s
Iteration  24: 3345446.910 ops/s
Iteration  25: 3329526.597 ops/s
Iteration  26: 3346826.215 ops/s
Iteration  27: 3340578.463 ops/s
Iteration  28: 3299805.979 ops/s
Iteration  29: 3308235.752 ops/s
Iteration  30: 3332871.590 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_toArray":
  3336399.657 ±(99.9%) 7631.315 ops/s [Average]
  (min, avg, max) = (3299805.979, 3336399.657, 3351924.566), stdev = 11422.194
  CI (99.9%): [3328768.342, 3344030.971] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_toArray  thrpt   30  3336399.657 ± 7631.315  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_toBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_toBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 901354.017 ops/s
# Warmup Iteration   2: 1980773.005 ops/s
# Warmup Iteration   3: 1942769.675 ops/s
# Warmup Iteration   4: 2328772.970 ops/s
# Warmup Iteration   5: 2322468.142 ops/s
# Warmup Iteration   6: 2330991.109 ops/s
# Warmup Iteration   7: 2324706.612 ops/s
# Warmup Iteration   8: 2323932.359 ops/s
# Warmup Iteration   9: 2328007.336 ops/s
# Warmup Iteration  10: 2320238.804 ops/s
# Warmup Iteration  11: 2325745.282 ops/s
# Warmup Iteration  12: 2324931.343 ops/s
# Warmup Iteration  13: 2306253.454 ops/s
# Warmup Iteration  14: 2324996.640 ops/s
# Warmup Iteration  15: 2327469.343 ops/s
# Warmup Iteration  16: 2328731.854 ops/s
# Warmup Iteration  17: 2304206.920 ops/s
# Warmup Iteration  18: 2320509.015 ops/s
# Warmup Iteration  19: 2304635.440 ops/s
# Warmup Iteration  20: 2326263.886 ops/s
# Warmup Iteration  21: 2322661.809 ops/s
# Warmup Iteration  22: 2325386.620 ops/s
# Warmup Iteration  23: 2327305.887 ops/s
# Warmup Iteration  24: 2326776.095 ops/s
# Warmup Iteration  25: 2305305.813 ops/s
# Warmup Iteration  26: 2320895.872 ops/s
# Warmup Iteration  27: 2319760.908 ops/s
# Warmup Iteration  28: 2329992.185 ops/s
# Warmup Iteration  29: 2324173.619 ops/s
# Warmup Iteration  30: 2318883.990 ops/s
Iteration   1: 2319425.966 ops/s
Iteration   2: 2327676.450 ops/s
Iteration   3: 2318533.296 ops/s
Iteration   4: 2327180.977 ops/s
Iteration   5: 2326292.127 ops/s
Iteration   6: 2327067.679 ops/s
Iteration   7: 2319061.633 ops/s
Iteration   8: 2329516.278 ops/s
Iteration   9: 2316583.190 ops/s
Iteration  10: 2325211.979 ops/s
Iteration  11: 2331268.253 ops/s
Iteration  12: 2318019.816 ops/s
Iteration  13: 2323559.034 ops/s
Iteration  14: 2328265.256 ops/s
Iteration  15: 2320436.728 ops/s
Iteration  16: 2331894.237 ops/s
Iteration  17: 2333733.667 ops/s
Iteration  18: 2325882.330 ops/s
Iteration  19: 2328735.199 ops/s
Iteration  20: 2319617.725 ops/s
Iteration  21: 2318486.647 ops/s
Iteration  22: 2330711.015 ops/s
Iteration  23: 2320928.025 ops/s
Iteration  24: 2330740.039 ops/s
Iteration  25: 2322652.616 ops/s
Iteration  26: 2323895.280 ops/s
Iteration  27: 2319591.988 ops/s
Iteration  28: 2278462.110 ops/s
Iteration  29: 2321796.059 ops/s
Iteration  30: 2323489.730 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_toBag":
  2322957.178 ±(99.9%) 6470.530 ops/s [Average]
  (min, avg, max) = (2278462.110, 2322957.178, 2333733.667), stdev = 9684.786
  CI (99.9%): [2316486.647, 2329427.708] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_toBag  thrpt   30  2322957.178 ± 6470.530  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1045403.790 ops/s
# Warmup Iteration   2: 2368265.734 ops/s
# Warmup Iteration   3: 2143682.061 ops/s
# Warmup Iteration   4: 2595784.124 ops/s
# Warmup Iteration   5: 2599928.592 ops/s
# Warmup Iteration   6: 2597257.947 ops/s
# Warmup Iteration   7: 2600895.301 ops/s
# Warmup Iteration   8: 2602857.455 ops/s
# Warmup Iteration   9: 2585589.087 ops/s
# Warmup Iteration  10: 2599986.107 ops/s
# Warmup Iteration  11: 2597650.993 ops/s
# Warmup Iteration  12: 2579163.152 ops/s
# Warmup Iteration  13: 2602294.850 ops/s
# Warmup Iteration  14: 2597937.050 ops/s
# Warmup Iteration  15: 2597774.691 ops/s
# Warmup Iteration  16: 2596410.168 ops/s
# Warmup Iteration  17: 2589954.336 ops/s
# Warmup Iteration  18: 2581903.732 ops/s
# Warmup Iteration  19: 2598435.456 ops/s
# Warmup Iteration  20: 2571302.257 ops/s
# Warmup Iteration  21: 2604650.130 ops/s
# Warmup Iteration  22: 2581300.457 ops/s
# Warmup Iteration  23: 2599483.639 ops/s
# Warmup Iteration  24: 2582922.662 ops/s
# Warmup Iteration  25: 2592750.857 ops/s
# Warmup Iteration  26: 2604268.159 ops/s
# Warmup Iteration  27: 2600274.492 ops/s
# Warmup Iteration  28: 2596353.809 ops/s
# Warmup Iteration  29: 2595980.394 ops/s
# Warmup Iteration  30: 2605715.697 ops/s
Iteration   1: 2596221.329 ops/s
Iteration   2: 2605585.303 ops/s
Iteration   3: 2599647.337 ops/s
Iteration   4: 2583911.117 ops/s
Iteration   5: 2597453.976 ops/s
Iteration   6: 2600621.294 ops/s
Iteration   7: 2546960.945 ops/s
Iteration   8: 2599007.669 ops/s
Iteration   9: 2596207.847 ops/s
Iteration  10: 2602845.965 ops/s
Iteration  11: 2600052.678 ops/s
Iteration  12: 2609135.488 ops/s
Iteration  13: 2555669.643 ops/s
Iteration  14: 2594116.241 ops/s
Iteration  15: 2593127.861 ops/s
Iteration  16: 2597001.079 ops/s
Iteration  17: 2599907.992 ops/s
Iteration  18: 2596883.956 ops/s
Iteration  19: 2588784.730 ops/s
Iteration  20: 2594477.460 ops/s
Iteration  21: 2603718.415 ops/s
Iteration  22: 2552672.650 ops/s
Iteration  23: 2601084.990 ops/s
Iteration  24: 2603488.020 ops/s
Iteration  25: 2602801.375 ops/s
Iteration  26: 2603607.803 ops/s
Iteration  27: 2603302.641 ops/s
Iteration  28: 2602150.446 ops/s
Iteration  29: 2599983.880 ops/s
Iteration  30: 2600669.904 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_toList":
  2594370.001 ±(99.9%) 10235.504 ops/s [Average]
  (min, avg, max) = (2546960.945, 2594370.001, 2609135.488), stdev = 15320.022
  CI (99.9%): [2584134.497, 2604605.505] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_toList  thrpt   30  2594370.001 ± 10235.504  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_toSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_toSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1446420.565 ops/s
# Warmup Iteration   2: 3305318.706 ops/s
# Warmup Iteration   3: 3085396.254 ops/s
# Warmup Iteration   4: 3726067.177 ops/s
# Warmup Iteration   5: 3734638.621 ops/s
# Warmup Iteration   6: 3728820.425 ops/s
# Warmup Iteration   7: 3725786.344 ops/s
# Warmup Iteration   8: 3722272.838 ops/s
# Warmup Iteration   9: 3731055.553 ops/s
# Warmup Iteration  10: 3722611.698 ops/s
# Warmup Iteration  11: 3732492.248 ops/s
# Warmup Iteration  12: 3730807.784 ops/s
# Warmup Iteration  13: 3701889.939 ops/s
# Warmup Iteration  14: 3733512.720 ops/s
# Warmup Iteration  15: 3699486.866 ops/s
# Warmup Iteration  16: 3731532.660 ops/s
# Warmup Iteration  17: 3725589.358 ops/s
# Warmup Iteration  18: 3733425.230 ops/s
# Warmup Iteration  19: 3728349.935 ops/s
# Warmup Iteration  20: 3725487.411 ops/s
# Warmup Iteration  21: 3719675.542 ops/s
# Warmup Iteration  22: 3718855.996 ops/s
# Warmup Iteration  23: 3724823.759 ops/s
# Warmup Iteration  24: 3725248.803 ops/s
# Warmup Iteration  25: 3730870.463 ops/s
# Warmup Iteration  26: 3734181.594 ops/s
# Warmup Iteration  27: 3723447.887 ops/s
# Warmup Iteration  28: 3729923.109 ops/s
# Warmup Iteration  29: 3726158.350 ops/s
# Warmup Iteration  30: 3725368.694 ops/s
Iteration   1: 3737086.887 ops/s
Iteration   2: 3728548.069 ops/s
Iteration   3: 3718095.367 ops/s
Iteration   4: 3723965.959 ops/s
Iteration   5: 3713621.697 ops/s
Iteration   6: 3728932.991 ops/s
Iteration   7: 3729511.499 ops/s
Iteration   8: 3736762.537 ops/s
Iteration   9: 3724211.148 ops/s
Iteration  10: 3732182.482 ops/s
Iteration  11: 3739200.979 ops/s
Iteration  12: 3669454.212 ops/s
Iteration  13: 3721579.426 ops/s
Iteration  14: 3730330.670 ops/s
Iteration  15: 3718455.404 ops/s
Iteration  16: 3732952.524 ops/s
Iteration  17: 3715533.349 ops/s
Iteration  18: 3715580.618 ops/s
Iteration  19: 3721925.610 ops/s
Iteration  20: 3729148.353 ops/s
Iteration  21: 3713018.091 ops/s
Iteration  22: 3733894.482 ops/s
Iteration  23: 3721719.614 ops/s
Iteration  24: 3727359.619 ops/s
Iteration  25: 3729691.395 ops/s
Iteration  26: 3730126.243 ops/s
Iteration  27: 3720499.622 ops/s
Iteration  28: 3733760.870 ops/s
Iteration  29: 3731001.337 ops/s
Iteration  30: 3716650.988 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_toSet":
  3724160.068 ±(99.9%) 8478.613 ops/s [Average]
  (min, avg, max) = (3669454.212, 3724160.068, 3739200.979), stdev = 12690.390
  CI (99.9%): [3715681.455, 3732638.682] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_toSet  thrpt   30  3724160.068 ± 8478.613  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_with$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_with

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 666766.660 ops/s
# Warmup Iteration   2: 754638.424 ops/s
# Warmup Iteration   3: 980376.778 ops/s
# Warmup Iteration   4: 974034.759 ops/s
# Warmup Iteration   5: 977892.669 ops/s
# Warmup Iteration   6: 976507.147 ops/s
# Warmup Iteration   7: 981485.019 ops/s
# Warmup Iteration   8: 980235.748 ops/s
# Warmup Iteration   9: 981675.981 ops/s
# Warmup Iteration  10: 813390.313 ops/s
# Warmup Iteration  11: 981408.900 ops/s
# Warmup Iteration  12: 980496.067 ops/s
# Warmup Iteration  13: 981163.331 ops/s
# Warmup Iteration  14: 981390.729 ops/s
# Warmup Iteration  15: 980997.745 ops/s
# Warmup Iteration  16: 980689.324 ops/s
# Warmup Iteration  17: 1041595.901 ops/s
# Warmup Iteration  18: 1043981.641 ops/s
# Warmup Iteration  19: 1042799.830 ops/s
# Warmup Iteration  20: 1039095.345 ops/s
# Warmup Iteration  21: 1040030.836 ops/s
# Warmup Iteration  22: 1042399.511 ops/s
# Warmup Iteration  23: 1036442.515 ops/s
# Warmup Iteration  24: 1042344.744 ops/s
# Warmup Iteration  25: 1041749.082 ops/s
# Warmup Iteration  26: 1038830.139 ops/s
# Warmup Iteration  27: 1041893.873 ops/s
# Warmup Iteration  28: 1044833.998 ops/s
# Warmup Iteration  29: 1033236.394 ops/s
# Warmup Iteration  30: 1042927.320 ops/s
Iteration   1: 1043373.030 ops/s
Iteration   2: 1043370.471 ops/s
Iteration   3: 1041502.895 ops/s
Iteration   4: 1040425.113 ops/s
Iteration   5: 1045383.148 ops/s
Iteration   6: 1045529.998 ops/s
Iteration   7: 1038492.771 ops/s
Iteration   8: 1044014.876 ops/s
Iteration   9: 1041645.213 ops/s
Iteration  10: 1036329.669 ops/s
Iteration  11: 1041699.152 ops/s
Iteration  12: 1045557.325 ops/s
Iteration  13: 1038907.636 ops/s
Iteration  14: 1043604.742 ops/s
Iteration  15: 1042235.999 ops/s
Iteration  16: 1039447.254 ops/s
Iteration  17: 1042952.264 ops/s
Iteration  18: 1044163.472 ops/s
Iteration  19: 1041458.059 ops/s
Iteration  20: 1043914.614 ops/s
Iteration  21: 1041525.130 ops/s
Iteration  22: 1037118.317 ops/s
Iteration  23: 1040446.862 ops/s
Iteration  24: 1039610.500 ops/s
Iteration  25: 1041342.081 ops/s
Iteration  26: 1041524.455 ops/s
Iteration  27: 1046389.849 ops/s
Iteration  28: 1040139.795 ops/s
Iteration  29: 1041205.881 ops/s
Iteration  30: 1043831.586 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_with":
  1041904.739 ±(99.9%) 1661.365 ops/s [Average]
  (min, avg, max) = (1036329.669, 1041904.739, 1046389.849), stdev = 2486.653
  CI (99.9%): [1040243.374, 1043566.104] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_with  thrpt   30  1041904.739 ± 1661.365  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_withAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_withAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 662477.819 ops/s
# Warmup Iteration   2: 753928.619 ops/s
# Warmup Iteration   3: 978370.362 ops/s
# Warmup Iteration   4: 979292.572 ops/s
# Warmup Iteration   5: 974833.978 ops/s
# Warmup Iteration   6: 981644.918 ops/s
# Warmup Iteration   7: 974343.135 ops/s
# Warmup Iteration   8: 975317.261 ops/s
# Warmup Iteration   9: 979087.019 ops/s
# Warmup Iteration  10: 814624.838 ops/s
# Warmup Iteration  11: 982894.824 ops/s
# Warmup Iteration  12: 982346.984 ops/s
# Warmup Iteration  13: 976853.051 ops/s
# Warmup Iteration  14: 979725.004 ops/s
# Warmup Iteration  15: 983487.373 ops/s
# Warmup Iteration  16: 982797.571 ops/s
# Warmup Iteration  17: 1033693.849 ops/s
# Warmup Iteration  18: 1034245.688 ops/s
# Warmup Iteration  19: 1035411.338 ops/s
# Warmup Iteration  20: 1036139.683 ops/s
# Warmup Iteration  21: 1037369.690 ops/s
# Warmup Iteration  22: 1035109.914 ops/s
# Warmup Iteration  23: 1033220.539 ops/s
# Warmup Iteration  24: 1033905.562 ops/s
# Warmup Iteration  25: 1024453.523 ops/s
# Warmup Iteration  26: 1034412.597 ops/s
# Warmup Iteration  27: 1032479.742 ops/s
# Warmup Iteration  28: 1032389.469 ops/s
# Warmup Iteration  29: 1034293.388 ops/s
# Warmup Iteration  30: 1038364.715 ops/s
Iteration   1: 1031133.156 ops/s
Iteration   2: 1037306.483 ops/s
Iteration   3: 1020694.429 ops/s
Iteration   4: 1038206.769 ops/s
Iteration   5: 1034277.666 ops/s
Iteration   6: 1034190.811 ops/s
Iteration   7: 1033949.810 ops/s
Iteration   8: 1034034.304 ops/s
Iteration   9: 1036518.832 ops/s
Iteration  10: 1033398.083 ops/s
Iteration  11: 1036969.562 ops/s
Iteration  12: 1034474.057 ops/s
Iteration  13: 1035459.475 ops/s
Iteration  14: 1035974.242 ops/s
Iteration  15: 1037736.920 ops/s
Iteration  16: 1035689.441 ops/s
Iteration  17: 1034418.836 ops/s
Iteration  18: 1037889.848 ops/s
Iteration  19: 1038420.534 ops/s
Iteration  20: 1033440.361 ops/s
Iteration  21: 1033869.761 ops/s
Iteration  22: 1033542.137 ops/s
Iteration  23: 1019487.525 ops/s
Iteration  24: 1014161.449 ops/s
Iteration  25: 1034065.248 ops/s
Iteration  26: 1039775.737 ops/s
Iteration  27: 1040103.412 ops/s
Iteration  28: 1038955.225 ops/s
Iteration  29: 1019571.199 ops/s
Iteration  30: 1035674.525 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_withAll":
  1033446.328 ±(99.9%) 4278.252 ops/s [Average]
  (min, avg, max) = (1014161.449, 1033446.328, 1040103.412), stdev = 6403.487
  CI (99.9%): [1029168.076, 1037724.580] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_withAll  thrpt   30  1033446.328 ± 4278.252  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_without$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_without

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1638902.409 ops/s
# Warmup Iteration   2: 3795686.164 ops/s
# Warmup Iteration   3: 3630480.981 ops/s
# Warmup Iteration   4: 4376190.046 ops/s
# Warmup Iteration   5: 4417354.717 ops/s
# Warmup Iteration   6: 4409030.535 ops/s
# Warmup Iteration   7: 4415851.158 ops/s
# Warmup Iteration   8: 4409492.720 ops/s
# Warmup Iteration   9: 4376558.092 ops/s
# Warmup Iteration  10: 4404549.512 ops/s
# Warmup Iteration  11: 4412633.689 ops/s
# Warmup Iteration  12: 4416112.553 ops/s
# Warmup Iteration  13: 4415345.764 ops/s
# Warmup Iteration  14: 4408735.437 ops/s
# Warmup Iteration  15: 4409995.084 ops/s
# Warmup Iteration  16: 4418235.924 ops/s
# Warmup Iteration  17: 4417140.149 ops/s
# Warmup Iteration  18: 4427319.519 ops/s
# Warmup Iteration  19: 4407945.626 ops/s
# Warmup Iteration  20: 4413586.536 ops/s
# Warmup Iteration  21: 4425226.876 ops/s
# Warmup Iteration  22: 4416697.922 ops/s
# Warmup Iteration  23: 4423628.283 ops/s
# Warmup Iteration  24: 4416722.200 ops/s
# Warmup Iteration  25: 4406669.933 ops/s
# Warmup Iteration  26: 4409308.152 ops/s
# Warmup Iteration  27: 4406913.481 ops/s
# Warmup Iteration  28: 4418036.766 ops/s
# Warmup Iteration  29: 4417628.586 ops/s
# Warmup Iteration  30: 4409119.104 ops/s
Iteration   1: 4402832.465 ops/s
Iteration   2: 4406578.139 ops/s
Iteration   3: 4413566.645 ops/s
Iteration   4: 4390370.701 ops/s
Iteration   5: 4420038.827 ops/s
Iteration   6: 4416817.139 ops/s
Iteration   7: 4416213.352 ops/s
Iteration   8: 4418288.452 ops/s
Iteration   9: 4414131.004 ops/s
Iteration  10: 4419264.879 ops/s
Iteration  11: 4396740.196 ops/s
Iteration  12: 4415087.075 ops/s
Iteration  13: 4421031.698 ops/s
Iteration  14: 4407142.481 ops/s
Iteration  15: 4416397.709 ops/s
Iteration  16: 4413783.025 ops/s
Iteration  17: 4422838.451 ops/s
Iteration  18: 4423181.011 ops/s
Iteration  19: 4408804.115 ops/s
Iteration  20: 4418405.402 ops/s
Iteration  21: 4416850.025 ops/s
Iteration  22: 4413664.285 ops/s
Iteration  23: 4424717.953 ops/s
Iteration  24: 4407246.560 ops/s
Iteration  25: 4426405.454 ops/s
Iteration  26: 4428776.001 ops/s
Iteration  27: 4420343.765 ops/s
Iteration  28: 4411029.330 ops/s
Iteration  29: 4407403.950 ops/s
Iteration  30: 4414975.286 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_without":
  4414430.846 ±(99.9%) 5648.487 ops/s [Average]
  (min, avg, max) = (4390370.701, 4414430.846, 4428776.001), stdev = 8454.390
  CI (99.9%): [4408782.359, 4420079.333] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_without  thrpt   30  4414430.846 ± 5648.487  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_withoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_withoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1590293.759 ops/s
# Warmup Iteration   2: 3769948.163 ops/s
# Warmup Iteration   3: 3513566.516 ops/s
# Warmup Iteration   4: 4268687.080 ops/s
# Warmup Iteration   5: 4275563.629 ops/s
# Warmup Iteration   6: 4276745.525 ops/s
# Warmup Iteration   7: 4272180.195 ops/s
# Warmup Iteration   8: 4280112.074 ops/s
# Warmup Iteration   9: 4282913.731 ops/s
# Warmup Iteration  10: 4234072.980 ops/s
# Warmup Iteration  11: 4271928.763 ops/s
# Warmup Iteration  12: 4278871.304 ops/s
# Warmup Iteration  13: 4276299.724 ops/s
# Warmup Iteration  14: 4270620.926 ops/s
# Warmup Iteration  15: 4277762.222 ops/s
# Warmup Iteration  16: 4282321.016 ops/s
# Warmup Iteration  17: 4268254.041 ops/s
# Warmup Iteration  18: 4246754.287 ops/s
# Warmup Iteration  19: 4248335.627 ops/s
# Warmup Iteration  20: 4276909.640 ops/s
# Warmup Iteration  21: 4268165.399 ops/s
# Warmup Iteration  22: 4280523.103 ops/s
# Warmup Iteration  23: 4271440.373 ops/s
# Warmup Iteration  24: 4267950.985 ops/s
# Warmup Iteration  25: 4268032.650 ops/s
# Warmup Iteration  26: 4277362.853 ops/s
# Warmup Iteration  27: 4279458.881 ops/s
# Warmup Iteration  28: 4273910.906 ops/s
# Warmup Iteration  29: 4279056.478 ops/s
# Warmup Iteration  30: 4277623.732 ops/s
Iteration   1: 4258510.966 ops/s
Iteration   2: 4206961.593 ops/s
Iteration   3: 4250321.653 ops/s
Iteration   4: 4217261.040 ops/s
Iteration   5: 4275647.300 ops/s
Iteration   6: 4269188.632 ops/s
Iteration   7: 4288977.264 ops/s
Iteration   8: 4281396.344 ops/s
Iteration   9: 4209000.320 ops/s
Iteration  10: 4279958.434 ops/s
Iteration  11: 4284294.566 ops/s
Iteration  12: 4268676.811 ops/s
Iteration  13: 4255263.307 ops/s
Iteration  14: 4289717.227 ops/s
Iteration  15: 4285764.524 ops/s
Iteration  16: 4285097.320 ops/s
Iteration  17: 4257369.455 ops/s
Iteration  18: 4216963.128 ops/s
Iteration  19: 4286807.822 ops/s
Iteration  20: 4282534.987 ops/s
Iteration  21: 4277819.820 ops/s
Iteration  22: 4270322.139 ops/s
Iteration  23: 4271227.356 ops/s
Iteration  24: 4235647.388 ops/s
Iteration  25: 4282748.643 ops/s
Iteration  26: 4276944.449 ops/s
Iteration  27: 4288846.750 ops/s
Iteration  28: 4260895.215 ops/s
Iteration  29: 4277393.809 ops/s
Iteration  30: 4286724.162 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_withoutAll":
  4265942.747 ±(99.9%) 16668.206 ops/s [Average]
  (min, avg, max) = (4206961.593, 4265942.747, 4289717.227), stdev = 24948.188
  CI (99.9%): [4249274.541, 4282610.954] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
SynchronizedLongBooleanMapValuesTest._Benchmark.benchmark_withoutAll  thrpt   30  4265942.747 ± 16668.206  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 687189.978 ops/s
# Warmup Iteration   2: 750839.808 ops/s
# Warmup Iteration   3: 1003152.674 ops/s
# Warmup Iteration   4: 999077.012 ops/s
# Warmup Iteration   5: 991462.204 ops/s
# Warmup Iteration   6: 999192.289 ops/s
# Warmup Iteration   7: 999731.419 ops/s
# Warmup Iteration   8: 1001909.289 ops/s
# Warmup Iteration   9: 1001501.982 ops/s
# Warmup Iteration  10: 832294.489 ops/s
# Warmup Iteration  11: 996044.038 ops/s
# Warmup Iteration  12: 998511.627 ops/s
# Warmup Iteration  13: 999481.951 ops/s
# Warmup Iteration  14: 1000392.757 ops/s
# Warmup Iteration  15: 997288.094 ops/s
# Warmup Iteration  16: 994550.082 ops/s
# Warmup Iteration  17: 1063728.181 ops/s
# Warmup Iteration  18: 1062650.924 ops/s
# Warmup Iteration  19: 1062120.283 ops/s
# Warmup Iteration  20: 1061041.431 ops/s
# Warmup Iteration  21: 1064199.793 ops/s
# Warmup Iteration  22: 1062995.156 ops/s
# Warmup Iteration  23: 1064901.637 ops/s
# Warmup Iteration  24: 1060797.503 ops/s
# Warmup Iteration  25: 1060479.903 ops/s
# Warmup Iteration  26: 1062922.186 ops/s
# Warmup Iteration  27: 1063198.379 ops/s
# Warmup Iteration  28: 1054102.528 ops/s
# Warmup Iteration  29: 1051960.317 ops/s
# Warmup Iteration  30: 1065730.130 ops/s
Iteration   1: 1064456.622 ops/s
Iteration   2: 1063340.909 ops/s
Iteration   3: 1062526.318 ops/s
Iteration   4: 1055462.296 ops/s
Iteration   5: 1063658.175 ops/s
Iteration   6: 1060262.927 ops/s
Iteration   7: 1064403.103 ops/s
Iteration   8: 1064663.631 ops/s
Iteration   9: 1060726.127 ops/s
Iteration  10: 1063555.989 ops/s
Iteration  11: 1047679.695 ops/s
Iteration  12: 1062442.927 ops/s
Iteration  13: 1063864.181 ops/s
Iteration  14: 1066510.810 ops/s
Iteration  15: 1063515.203 ops/s
Iteration  16: 1062983.666 ops/s
Iteration  17: 1063797.264 ops/s
Iteration  18: 1066230.375 ops/s
Iteration  19: 1060594.435 ops/s
Iteration  20: 1060913.043 ops/s
Iteration  21: 1061575.482 ops/s
Iteration  22: 1059072.443 ops/s
Iteration  23: 1065369.551 ops/s
Iteration  24: 1063186.697 ops/s
Iteration  25: 1062118.019 ops/s
Iteration  26: 1066037.632 ops/s
Iteration  27: 1063699.585 ops/s
Iteration  28: 1063858.723 ops/s
Iteration  29: 1066070.094 ops/s
Iteration  30: 1063343.949 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_add":
  1062530.662 ±(99.9%) 2432.017 ops/s [Average]
  (min, avg, max) = (1047679.695, 1062530.662, 1066510.810), stdev = 3640.128
  CI (99.9%): [1060098.646, 1064962.679] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_add  thrpt   30  1062530.662 ± 2432.017  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_addAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_addAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 694640.271 ops/s
# Warmup Iteration   2: 766889.291 ops/s
# Warmup Iteration   3: 1000859.765 ops/s
# Warmup Iteration   4: 1001935.143 ops/s
# Warmup Iteration   5: 1004043.530 ops/s
# Warmup Iteration   6: 986249.702 ops/s
# Warmup Iteration   7: 985924.935 ops/s
# Warmup Iteration   8: 1002587.217 ops/s
# Warmup Iteration   9: 1002606.780 ops/s
# Warmup Iteration  10: 828785.452 ops/s
# Warmup Iteration  11: 1001386.233 ops/s
# Warmup Iteration  12: 990288.135 ops/s
# Warmup Iteration  13: 1002391.276 ops/s
# Warmup Iteration  14: 1003996.401 ops/s
# Warmup Iteration  15: 999002.697 ops/s
# Warmup Iteration  16: 993572.564 ops/s
# Warmup Iteration  17: 1060453.436 ops/s
# Warmup Iteration  18: 1059935.655 ops/s
# Warmup Iteration  19: 1057775.263 ops/s
# Warmup Iteration  20: 1058376.249 ops/s
# Warmup Iteration  21: 1057114.572 ops/s
# Warmup Iteration  22: 1059738.289 ops/s
# Warmup Iteration  23: 1058748.043 ops/s
# Warmup Iteration  24: 1058297.662 ops/s
# Warmup Iteration  25: 1058687.107 ops/s
# Warmup Iteration  26: 1058750.439 ops/s
# Warmup Iteration  27: 1061353.482 ops/s
# Warmup Iteration  28: 1060442.875 ops/s
# Warmup Iteration  29: 1060579.035 ops/s
# Warmup Iteration  30: 1057583.198 ops/s
Iteration   1: 1058599.187 ops/s
Iteration   2: 1060791.918 ops/s
Iteration   3: 1058127.142 ops/s
Iteration   4: 1058725.128 ops/s
Iteration   5: 1061986.274 ops/s
Iteration   6: 1055815.592 ops/s
Iteration   7: 1059048.357 ops/s
Iteration   8: 1057201.903 ops/s
Iteration   9: 1058293.164 ops/s
Iteration  10: 1062146.995 ops/s
Iteration  11: 1057830.492 ops/s
Iteration  12: 1057079.539 ops/s
Iteration  13: 1063618.464 ops/s
Iteration  14: 1063481.543 ops/s
Iteration  15: 1056646.657 ops/s
Iteration  16: 1058467.746 ops/s
Iteration  17: 1062733.848 ops/s
Iteration  18: 1059976.984 ops/s
Iteration  19: 1057048.250 ops/s
Iteration  20: 1060648.064 ops/s
Iteration  21: 1060583.244 ops/s
Iteration  22: 1059647.229 ops/s
Iteration  23: 1061792.514 ops/s
Iteration  24: 1059096.718 ops/s
Iteration  25: 1054627.423 ops/s
Iteration  26: 1060940.671 ops/s
Iteration  27: 1063407.702 ops/s
Iteration  28: 1061088.656 ops/s
Iteration  29: 1064118.343 ops/s
Iteration  30: 1056610.501 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_addAllArray":
  1059672.675 ±(99.9%) 1693.668 ops/s [Average]
  (min, avg, max) = (1054627.423, 1059672.675, 1064118.343), stdev = 2535.002
  CI (99.9%): [1057979.007, 1061366.343] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_addAllArray  thrpt   30  1059672.675 ± 1693.668  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_addAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_addAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 689229.129 ops/s
# Warmup Iteration   2: 767251.788 ops/s
# Warmup Iteration   3: 1003509.843 ops/s
# Warmup Iteration   4: 999174.194 ops/s
# Warmup Iteration   5: 999761.340 ops/s
# Warmup Iteration   6: 988875.483 ops/s
# Warmup Iteration   7: 1001527.220 ops/s
# Warmup Iteration   8: 988686.915 ops/s
# Warmup Iteration   9: 1000709.649 ops/s
# Warmup Iteration  10: 833030.677 ops/s
# Warmup Iteration  11: 1000322.338 ops/s
# Warmup Iteration  12: 1000985.561 ops/s
# Warmup Iteration  13: 1000044.897 ops/s
# Warmup Iteration  14: 1001532.580 ops/s
# Warmup Iteration  15: 999986.833 ops/s
# Warmup Iteration  16: 1000933.039 ops/s
# Warmup Iteration  17: 1063783.375 ops/s
# Warmup Iteration  18: 1053454.656 ops/s
# Warmup Iteration  19: 1064539.802 ops/s
# Warmup Iteration  20: 1066451.034 ops/s
# Warmup Iteration  21: 1067904.157 ops/s
# Warmup Iteration  22: 1064188.984 ops/s
# Warmup Iteration  23: 1067583.222 ops/s
# Warmup Iteration  24: 1062905.311 ops/s
# Warmup Iteration  25: 1063932.894 ops/s
# Warmup Iteration  26: 1067107.244 ops/s
# Warmup Iteration  27: 1062642.266 ops/s
# Warmup Iteration  28: 1063177.553 ops/s
# Warmup Iteration  29: 1069369.053 ops/s
# Warmup Iteration  30: 1063567.977 ops/s
Iteration   1: 1064868.338 ops/s
Iteration   2: 1064973.687 ops/s
Iteration   3: 1067654.345 ops/s
Iteration   4: 1063552.431 ops/s
Iteration   5: 1066094.052 ops/s
Iteration   6: 1065505.133 ops/s
Iteration   7: 1068111.065 ops/s
Iteration   8: 1065587.957 ops/s
Iteration   9: 1063307.970 ops/s
Iteration  10: 1061559.915 ops/s
Iteration  11: 1066414.857 ops/s
Iteration  12: 1065783.674 ops/s
Iteration  13: 1066890.466 ops/s
Iteration  14: 1068549.002 ops/s
Iteration  15: 1062200.039 ops/s
Iteration  16: 1065225.804 ops/s
Iteration  17: 1065466.019 ops/s
Iteration  18: 1060341.489 ops/s
Iteration  19: 1057409.386 ops/s
Iteration  20: 1064329.379 ops/s
Iteration  21: 1046573.154 ops/s
Iteration  22: 1064279.409 ops/s
Iteration  23: 1067358.501 ops/s
Iteration  24: 1066831.241 ops/s
Iteration  25: 1058163.824 ops/s
Iteration  26: 1067090.241 ops/s
Iteration  27: 1059594.957 ops/s
Iteration  28: 1064855.156 ops/s
Iteration  29: 1069946.059 ops/s
Iteration  30: 1067754.749 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_addAllIterable":
  1064209.077 ±(99.9%) 2999.722 ops/s [Average]
  (min, avg, max) = (1046573.154, 1064209.077, 1069946.059), stdev = 4489.843
  CI (99.9%): [1061209.355, 1067208.798] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score      Error  Units
SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_addAllIterable  thrpt   30  1064209.077 ± 2999.722  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1070066.696 ops/s
# Warmup Iteration   2: 2350599.731 ops/s
# Warmup Iteration   3: 2916345.281 ops/s
# Warmup Iteration   4: 3482569.609 ops/s
# Warmup Iteration   5: 3475303.653 ops/s
# Warmup Iteration   6: 3473687.362 ops/s
# Warmup Iteration   7: 3484254.519 ops/s
# Warmup Iteration   8: 3476679.497 ops/s
# Warmup Iteration   9: 3473475.927 ops/s
# Warmup Iteration  10: 3466813.012 ops/s
# Warmup Iteration  11: 3475998.510 ops/s
# Warmup Iteration  12: 3468742.002 ops/s
# Warmup Iteration  13: 3477748.645 ops/s
# Warmup Iteration  14: 3426982.524 ops/s
# Warmup Iteration  15: 3474814.716 ops/s
# Warmup Iteration  16: 3483489.143 ops/s
# Warmup Iteration  17: 3457566.921 ops/s
# Warmup Iteration  18: 3478369.716 ops/s
# Warmup Iteration  19: 3473055.429 ops/s
# Warmup Iteration  20: 3494832.071 ops/s
# Warmup Iteration  21: 3470180.489 ops/s
# Warmup Iteration  22: 3497683.753 ops/s
# Warmup Iteration  23: 3458969.957 ops/s
# Warmup Iteration  24: 3476414.726 ops/s
# Warmup Iteration  25: 3483474.006 ops/s
# Warmup Iteration  26: 3480801.889 ops/s
# Warmup Iteration  27: 3487225.252 ops/s
# Warmup Iteration  28: 3486244.859 ops/s
# Warmup Iteration  29: 3464275.920 ops/s
# Warmup Iteration  30: 3483438.672 ops/s
Iteration   1: 3496239.578 ops/s
Iteration   2: 3490148.337 ops/s
Iteration   3: 3490672.864 ops/s
Iteration   4: 3474064.372 ops/s
Iteration   5: 3497470.580 ops/s
Iteration   6: 3462459.268 ops/s
Iteration   7: 3475101.547 ops/s
Iteration   8: 3487127.377 ops/s
Iteration   9: 3477220.938 ops/s
Iteration  10: 3478216.365 ops/s
Iteration  11: 3475883.321 ops/s
Iteration  12: 3489687.612 ops/s
Iteration  13: 3485778.309 ops/s
Iteration  14: 3488432.297 ops/s
Iteration  15: 3487668.906 ops/s
Iteration  16: 3479619.696 ops/s
Iteration  17: 3484312.190 ops/s
Iteration  18: 3501306.853 ops/s
Iteration  19: 3488210.715 ops/s
Iteration  20: 3478202.788 ops/s
Iteration  21: 3472831.683 ops/s
Iteration  22: 3481728.076 ops/s
Iteration  23: 3481507.522 ops/s
Iteration  24: 3436957.299 ops/s
Iteration  25: 3476937.837 ops/s
Iteration  26: 3470687.844 ops/s
Iteration  27: 3494959.721 ops/s
Iteration  28: 3490177.780 ops/s
Iteration  29: 3479678.156 ops/s
Iteration  30: 3502726.438 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_allSatisfy":
  3482533.876 ±(99.9%) 8495.259 ops/s [Average]
  (min, avg, max) = (3436957.299, 3482533.876, 3502726.438), stdev = 12715.305
  CI (99.9%): [3474038.616, 3491029.135] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_allSatisfy  thrpt   30  3482533.876 ± 8495.259  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1073537.505 ops/s
# Warmup Iteration   2: 2362037.331 ops/s
# Warmup Iteration   3: 3054473.674 ops/s
# Warmup Iteration   4: 3617670.782 ops/s
# Warmup Iteration   5: 3585443.369 ops/s
# Warmup Iteration   6: 3584570.274 ops/s
# Warmup Iteration   7: 3628534.845 ops/s
# Warmup Iteration   8: 3626696.653 ops/s
# Warmup Iteration   9: 3621004.505 ops/s
# Warmup Iteration  10: 3612637.647 ops/s
# Warmup Iteration  11: 3614061.959 ops/s
# Warmup Iteration  12: 3623067.706 ops/s
# Warmup Iteration  13: 3615595.275 ops/s
# Warmup Iteration  14: 3613130.038 ops/s
# Warmup Iteration  15: 3616200.412 ops/s
# Warmup Iteration  16: 3626941.159 ops/s
# Warmup Iteration  17: 3628514.099 ops/s
# Warmup Iteration  18: 3637900.411 ops/s
# Warmup Iteration  19: 3618097.158 ops/s
# Warmup Iteration  20: 3626461.593 ops/s
# Warmup Iteration  21: 3632597.482 ops/s
# Warmup Iteration  22: 3621623.148 ops/s
# Warmup Iteration  23: 3629300.041 ops/s
# Warmup Iteration  24: 3624523.495 ops/s
# Warmup Iteration  25: 3626901.522 ops/s
# Warmup Iteration  26: 3634194.624 ops/s
# Warmup Iteration  27: 3620671.518 ops/s
# Warmup Iteration  28: 3620078.307 ops/s
# Warmup Iteration  29: 3601139.404 ops/s
# Warmup Iteration  30: 3613957.854 ops/s
Iteration   1: 3619144.331 ops/s
Iteration   2: 3627042.287 ops/s
Iteration   3: 3617480.593 ops/s
Iteration   4: 3614577.185 ops/s
Iteration   5: 3632692.394 ops/s
Iteration   6: 3626871.969 ops/s
Iteration   7: 3648514.172 ops/s
Iteration   8: 3621380.609 ops/s
Iteration   9: 3630744.824 ops/s
Iteration  10: 3652189.325 ops/s
Iteration  11: 3640787.776 ops/s
Iteration  12: 3628018.938 ops/s
Iteration  13: 3622988.470 ops/s
Iteration  14: 3646965.249 ops/s
Iteration  15: 3614162.916 ops/s
Iteration  16: 3614715.845 ops/s
Iteration  17: 3635495.932 ops/s
Iteration  18: 3610208.815 ops/s
Iteration  19: 3612322.264 ops/s
Iteration  20: 3631938.641 ops/s
Iteration  21: 3621376.971 ops/s
Iteration  22: 3621413.863 ops/s
Iteration  23: 3617894.169 ops/s
Iteration  24: 3601748.653 ops/s
Iteration  25: 3574796.365 ops/s
Iteration  26: 3610448.559 ops/s
Iteration  27: 3606101.635 ops/s
Iteration  28: 3649394.438 ops/s
Iteration  29: 3633165.562 ops/s
Iteration  30: 3637796.118 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_anySatisfy":
  3624079.296 ±(99.9%) 10827.847 ops/s [Average]
  (min, avg, max) = (3574796.365, 3624079.296, 3652189.325), stdev = 16206.613
  CI (99.9%): [3613251.448, 3634907.143] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_anySatisfy  thrpt   30  3624079.296 ± 10827.847  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 958638.343 ops/s
# Warmup Iteration   2: 2064985.535 ops/s
# Warmup Iteration   3: 2068849.182 ops/s
# Warmup Iteration   4: 2479156.500 ops/s
# Warmup Iteration   5: 2481487.644 ops/s
# Warmup Iteration   6: 2473846.761 ops/s
# Warmup Iteration   7: 2470077.425 ops/s
# Warmup Iteration   8: 2477234.451 ops/s
# Warmup Iteration   9: 2460904.651 ops/s
# Warmup Iteration  10: 2459817.961 ops/s
# Warmup Iteration  11: 2466718.059 ops/s
# Warmup Iteration  12: 2469960.367 ops/s
# Warmup Iteration  13: 2460703.557 ops/s
# Warmup Iteration  14: 2467345.207 ops/s
# Warmup Iteration  15: 2438291.390 ops/s
# Warmup Iteration  16: 2473591.729 ops/s
# Warmup Iteration  17: 2459936.133 ops/s
# Warmup Iteration  18: 2460153.892 ops/s
# Warmup Iteration  19: 2464267.644 ops/s
# Warmup Iteration  20: 2477420.954 ops/s
# Warmup Iteration  21: 2463286.005 ops/s
# Warmup Iteration  22: 2465332.468 ops/s
# Warmup Iteration  23: 2465407.494 ops/s
# Warmup Iteration  24: 2481275.200 ops/s
# Warmup Iteration  25: 2470096.811 ops/s
# Warmup Iteration  26: 2479554.608 ops/s
# Warmup Iteration  27: 2484186.416 ops/s
# Warmup Iteration  28: 2457759.197 ops/s
# Warmup Iteration  29: 2471369.262 ops/s
# Warmup Iteration  30: 2490226.197 ops/s
Iteration   1: 2464988.015 ops/s
Iteration   2: 2465566.061 ops/s
Iteration   3: 2466183.677 ops/s
Iteration   4: 2473501.459 ops/s
Iteration   5: 2483230.949 ops/s
Iteration   6: 2471697.247 ops/s
Iteration   7: 2467899.860 ops/s
Iteration   8: 2464902.560 ops/s
Iteration   9: 2475639.915 ops/s
Iteration  10: 2473803.328 ops/s
Iteration  11: 2481626.623 ops/s
Iteration  12: 2461119.235 ops/s
Iteration  13: 2458346.116 ops/s
Iteration  14: 2479424.477 ops/s
Iteration  15: 2459450.615 ops/s
Iteration  16: 2480922.976 ops/s
Iteration  17: 2464746.088 ops/s
Iteration  18: 2467289.829 ops/s
Iteration  19: 2491221.174 ops/s
Iteration  20: 2484885.144 ops/s
Iteration  21: 2483370.474 ops/s
Iteration  22: 2460568.818 ops/s
Iteration  23: 2453198.476 ops/s
Iteration  24: 2417963.151 ops/s
Iteration  25: 2460841.027 ops/s
Iteration  26: 2470532.143 ops/s
Iteration  27: 2486235.332 ops/s
Iteration  28: 2478628.680 ops/s
Iteration  29: 2468438.183 ops/s
Iteration  30: 2471680.448 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_appendString":
  2469596.736 ±(99.9%) 9102.366 ops/s [Average]
  (min, avg, max) = (2417963.151, 2469596.736, 2491221.174), stdev = 13623.994
  CI (99.9%): [2460494.370, 2478699.102] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score      Error  Units
SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_appendString  thrpt   30  2469596.736 ± 9102.366  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_asLazy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_asLazy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2688295.154 ops/s
# Warmup Iteration   2: 5015274.503 ops/s
# Warmup Iteration   3: 6595053.849 ops/s
# Warmup Iteration   4: 6606370.092 ops/s
# Warmup Iteration   5: 5525015.690 ops/s
# Warmup Iteration   6: 6606288.923 ops/s
# Warmup Iteration   7: 6601050.879 ops/s
# Warmup Iteration   8: 6604896.265 ops/s
# Warmup Iteration   9: 6562126.569 ops/s
# Warmup Iteration  10: 6596242.913 ops/s
# Warmup Iteration  11: 6520609.983 ops/s
# Warmup Iteration  12: 6618949.916 ops/s
# Warmup Iteration  13: 6627432.561 ops/s
# Warmup Iteration  14: 6614731.688 ops/s
# Warmup Iteration  15: 6613412.578 ops/s
# Warmup Iteration  16: 6614067.880 ops/s
# Warmup Iteration  17: 6637283.158 ops/s
# Warmup Iteration  18: 6628792.233 ops/s
# Warmup Iteration  19: 6623528.481 ops/s
# Warmup Iteration  20: 6622710.630 ops/s
# Warmup Iteration  21: 6630567.829 ops/s
# Warmup Iteration  22: 6600266.326 ops/s
# Warmup Iteration  23: 6615511.079 ops/s
# Warmup Iteration  24: 6599404.194 ops/s
# Warmup Iteration  25: 6622792.065 ops/s
# Warmup Iteration  26: 6606468.438 ops/s
# Warmup Iteration  27: 6626328.944 ops/s
# Warmup Iteration  28: 6624158.189 ops/s
# Warmup Iteration  29: 6607247.011 ops/s
# Warmup Iteration  30: 6643191.126 ops/s
Iteration   1: 6637017.749 ops/s
Iteration   2: 6592517.838 ops/s
Iteration   3: 6652545.040 ops/s
Iteration   4: 6614752.272 ops/s
Iteration   5: 6630869.263 ops/s
Iteration   6: 6584702.795 ops/s
Iteration   7: 6625054.901 ops/s
Iteration   8: 6609475.953 ops/s
Iteration   9: 6557087.004 ops/s
Iteration  10: 6638264.331 ops/s
Iteration  11: 6624220.933 ops/s
Iteration  12: 6648260.764 ops/s
Iteration  13: 6626003.384 ops/s
Iteration  14: 6603266.130 ops/s
Iteration  15: 6613457.946 ops/s
Iteration  16: 6629892.187 ops/s
Iteration  17: 6668369.294 ops/s
Iteration  18: 6536924.216 ops/s
Iteration  19: 6604448.741 ops/s
Iteration  20: 6615860.113 ops/s
Iteration  21: 6635084.145 ops/s
Iteration  22: 6605490.058 ops/s
Iteration  23: 6636451.138 ops/s
Iteration  24: 6641001.676 ops/s
Iteration  25: 6654179.883 ops/s
Iteration  26: 6599932.927 ops/s
Iteration  27: 6607309.103 ops/s
Iteration  28: 6631320.316 ops/s
Iteration  29: 6609421.797 ops/s
Iteration  30: 6613830.007 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_asLazy":
  6618233.730 ±(99.9%) 18302.593 ops/s [Average]
  (min, avg, max) = (6536924.216, 6618233.730, 6668369.294), stdev = 27394.461
  CI (99.9%): [6599931.138, 6636536.323] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_asLazy  thrpt   30  6618233.730 ± 18302.593  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_asSynchronized$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_asSynchronized

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3756105.511 ops/s
# Warmup Iteration   2: 7771470.791 ops/s
# Warmup Iteration   3: 9072799.878 ops/s
# Warmup Iteration   4: 10750044.076 ops/s
# Warmup Iteration   5: 10556294.816 ops/s
# Warmup Iteration   6: 10751224.824 ops/s
# Warmup Iteration   7: 10755298.908 ops/s
# Warmup Iteration   8: 10718416.787 ops/s
# Warmup Iteration   9: 10687000.956 ops/s
# Warmup Iteration  10: 10727530.779 ops/s
# Warmup Iteration  11: 10747618.583 ops/s
# Warmup Iteration  12: 10745968.764 ops/s
# Warmup Iteration  13: 10731865.933 ops/s
# Warmup Iteration  14: 10752521.928 ops/s
# Warmup Iteration  15: 10736635.739 ops/s
# Warmup Iteration  16: 10774531.615 ops/s
# Warmup Iteration  17: 10693364.527 ops/s
# Warmup Iteration  18: 10715207.234 ops/s
# Warmup Iteration  19: 10768514.602 ops/s
# Warmup Iteration  20: 10671549.058 ops/s
# Warmup Iteration  21: 10675481.682 ops/s
# Warmup Iteration  22: 10719179.568 ops/s
# Warmup Iteration  23: 10674385.191 ops/s
# Warmup Iteration  24: 10654618.157 ops/s
# Warmup Iteration  25: 10686046.018 ops/s
# Warmup Iteration  26: 10683901.447 ops/s
# Warmup Iteration  27: 10646860.946 ops/s
# Warmup Iteration  28: 10700584.454 ops/s
# Warmup Iteration  29: 10646419.519 ops/s
# Warmup Iteration  30: 10684481.963 ops/s
Iteration   1: 10647436.228 ops/s
Iteration   2: 10689947.441 ops/s
Iteration   3: 10680973.427 ops/s
Iteration   4: 10682632.567 ops/s
Iteration   5: 10743924.623 ops/s
Iteration   6: 10676700.659 ops/s
Iteration   7: 10648875.959 ops/s
Iteration   8: 10522504.649 ops/s
Iteration   9: 10660549.281 ops/s
Iteration  10: 10722022.877 ops/s
Iteration  11: 10732105.578 ops/s
Iteration  12: 10716066.995 ops/s
Iteration  13: 10697033.473 ops/s
Iteration  14: 10636842.953 ops/s
Iteration  15: 10684092.692 ops/s
Iteration  16: 10743978.361 ops/s
Iteration  17: 10677350.849 ops/s
Iteration  18: 10739630.584 ops/s
Iteration  19: 10671829.337 ops/s
Iteration  20: 10697745.215 ops/s
Iteration  21: 10755289.371 ops/s
Iteration  22: 10677475.622 ops/s
Iteration  23: 10604187.365 ops/s
Iteration  24: 10720115.643 ops/s
Iteration  25: 10666780.649 ops/s
Iteration  26: 10697067.973 ops/s
Iteration  27: 10658095.927 ops/s
Iteration  28: 10701075.379 ops/s
Iteration  29: 10721559.556 ops/s
Iteration  30: 10693828.013 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_asSynchronized":
  10685590.641 ±(99.9%) 31092.600 ops/s [Average]
  (min, avg, max) = (10522504.649, 10685590.641, 10755289.371), stdev = 46537.943
  CI (99.9%): [10654498.042, 10716683.241] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt         Score       Error  Units
SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_asSynchronized  thrpt   30  10685590.641 ± 31092.600  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_asUnmodifiable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_asUnmodifiable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3713180.259 ops/s
# Warmup Iteration   2: 7867069.557 ops/s
# Warmup Iteration   3: 9171781.431 ops/s
# Warmup Iteration   4: 10876030.155 ops/s
# Warmup Iteration   5: 10870116.605 ops/s
# Warmup Iteration   6: 10803941.417 ops/s
# Warmup Iteration   7: 10859663.516 ops/s
# Warmup Iteration   8: 10790808.339 ops/s
# Warmup Iteration   9: 10740243.823 ops/s
# Warmup Iteration  10: 10800364.655 ops/s
# Warmup Iteration  11: 10810507.822 ops/s
# Warmup Iteration  12: 10754369.528 ops/s
# Warmup Iteration  13: 10812309.387 ops/s
# Warmup Iteration  14: 10742763.740 ops/s
# Warmup Iteration  15: 10862889.376 ops/s
# Warmup Iteration  16: 10821823.307 ops/s
# Warmup Iteration  17: 10752565.114 ops/s
# Warmup Iteration  18: 10802528.507 ops/s
# Warmup Iteration  19: 10810090.194 ops/s
# Warmup Iteration  20: 10747733.090 ops/s
# Warmup Iteration  21: 10775809.934 ops/s
# Warmup Iteration  22: 10729826.253 ops/s
# Warmup Iteration  23: 10784779.488 ops/s
# Warmup Iteration  24: 10798836.097 ops/s
# Warmup Iteration  25: 10747612.593 ops/s
# Warmup Iteration  26: 10751787.708 ops/s
# Warmup Iteration  27: 10766793.789 ops/s
# Warmup Iteration  28: 10764428.740 ops/s
# Warmup Iteration  29: 10703672.867 ops/s
# Warmup Iteration  30: 10775719.144 ops/s
Iteration   1: 10734395.757 ops/s
Iteration   2: 10840737.708 ops/s
Iteration   3: 10779574.893 ops/s
Iteration   4: 10824683.376 ops/s
Iteration   5: 10799978.209 ops/s
Iteration   6: 10744617.031 ops/s
Iteration   7: 10769768.344 ops/s
Iteration   8: 10806847.750 ops/s
Iteration   9: 10763802.807 ops/s
Iteration  10: 10785983.200 ops/s
Iteration  11: 10759927.091 ops/s
Iteration  12: 10773427.295 ops/s
Iteration  13: 10611971.241 ops/s
Iteration  14: 10825951.434 ops/s
Iteration  15: 10774951.301 ops/s
Iteration  16: 10789326.720 ops/s
Iteration  17: 10720585.488 ops/s
Iteration  18: 10751295.774 ops/s
Iteration  19: 10790051.001 ops/s
Iteration  20: 10765589.437 ops/s
Iteration  21: 10793513.021 ops/s
Iteration  22: 10788127.539 ops/s
Iteration  23: 10747921.727 ops/s
Iteration  24: 10744809.450 ops/s
Iteration  25: 10780561.608 ops/s
Iteration  26: 10722119.683 ops/s
Iteration  27: 10746220.247 ops/s
Iteration  28: 10709047.992 ops/s
Iteration  29: 10776327.697 ops/s
Iteration  30: 10809577.437 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_asUnmodifiable":
  10767723.075 ±(99.9%) 28967.410 ops/s [Average]
  (min, avg, max) = (10611971.241, 10767723.075, 10840737.708), stdev = 43357.058
  CI (99.9%): [10738755.666, 10796690.485] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt         Score       Error  Units
SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_asUnmodifiable  thrpt   30  10767723.075 ± 28967.410  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_booleanIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_booleanIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4738698.885 ops/s
# Warmup Iteration   2: 10761678.862 ops/s
# Warmup Iteration   3: 8861414.884 ops/s
# Warmup Iteration   4: 10507354.741 ops/s
# Warmup Iteration   5: 10505963.698 ops/s
# Warmup Iteration   6: 10517172.047 ops/s
# Warmup Iteration   7: 10498811.673 ops/s
# Warmup Iteration   8: 10504619.340 ops/s
# Warmup Iteration   9: 10543465.607 ops/s
# Warmup Iteration  10: 10475952.043 ops/s
# Warmup Iteration  11: 10512842.771 ops/s
# Warmup Iteration  12: 10523624.145 ops/s
# Warmup Iteration  13: 10496152.985 ops/s
# Warmup Iteration  14: 10527785.028 ops/s
# Warmup Iteration  15: 10500257.721 ops/s
# Warmup Iteration  16: 10514398.385 ops/s
# Warmup Iteration  17: 10427816.431 ops/s
# Warmup Iteration  18: 10514279.680 ops/s
# Warmup Iteration  19: 10520430.316 ops/s
# Warmup Iteration  20: 10447391.275 ops/s
# Warmup Iteration  21: 10516780.683 ops/s
# Warmup Iteration  22: 10511010.643 ops/s
# Warmup Iteration  23: 10520521.124 ops/s
# Warmup Iteration  24: 10485364.842 ops/s
# Warmup Iteration  25: 10514561.207 ops/s
# Warmup Iteration  26: 10524985.278 ops/s
# Warmup Iteration  27: 10497687.467 ops/s
# Warmup Iteration  28: 10500812.397 ops/s
# Warmup Iteration  29: 10487176.198 ops/s
# Warmup Iteration  30: 10506559.249 ops/s
Iteration   1: 10513636.033 ops/s
Iteration   2: 10489944.955 ops/s
Iteration   3: 10459029.851 ops/s
Iteration   4: 10514281.342 ops/s
Iteration   5: 10533955.557 ops/s
Iteration   6: 10493352.709 ops/s
Iteration   7: 10503136.045 ops/s
Iteration   8: 10541899.932 ops/s
Iteration   9: 10506753.176 ops/s
Iteration  10: 10507409.134 ops/s
Iteration  11: 10551731.723 ops/s
Iteration  12: 10473082.541 ops/s
Iteration  13: 10498709.657 ops/s
Iteration  14: 10409093.031 ops/s
Iteration  15: 10502126.142 ops/s
Iteration  16: 10528491.638 ops/s
Iteration  17: 10499568.025 ops/s
Iteration  18: 10487659.539 ops/s
Iteration  19: 10548760.259 ops/s
Iteration  20: 10513881.619 ops/s
Iteration  21: 10471689.092 ops/s
Iteration  22: 10515825.662 ops/s
Iteration  23: 10513110.743 ops/s
Iteration  24: 10513690.382 ops/s
Iteration  25: 10461919.628 ops/s
Iteration  26: 10544825.068 ops/s
Iteration  27: 10489884.854 ops/s
Iteration  28: 10504493.659 ops/s
Iteration  29: 10482322.530 ops/s
Iteration  30: 10524495.899 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_booleanIterator":
  10503292.014 ±(99.9%) 20012.170 ops/s [Average]
  (min, avg, max) = (10409093.031, 10503292.014, 10551731.723), stdev = 29953.276
  CI (99.9%): [10483279.845, 10523304.184] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt         Score       Error  Units
SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_booleanIterator  thrpt   30  10503292.014 ± 20012.170  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 531088.489 ops/s
# Warmup Iteration   2: 743340.958 ops/s
# Warmup Iteration   3: 883330.192 ops/s
# Warmup Iteration   4: 883699.222 ops/s
# Warmup Iteration   5: 877419.161 ops/s
# Warmup Iteration   6: 880958.581 ops/s
# Warmup Iteration   7: 786938.634 ops/s
# Warmup Iteration   8: 831899.954 ops/s
# Warmup Iteration   9: 882436.247 ops/s
# Warmup Iteration  10: 881491.260 ops/s
# Warmup Iteration  11: 884001.119 ops/s
# Warmup Iteration  12: 880725.197 ops/s
# Warmup Iteration  13: 883244.244 ops/s
# Warmup Iteration  14: 883481.628 ops/s
# Warmup Iteration  15: 882205.810 ops/s
# Warmup Iteration  16: 883282.004 ops/s
# Warmup Iteration  17: 930737.725 ops/s
# Warmup Iteration  18: 930013.182 ops/s
# Warmup Iteration  19: 926669.094 ops/s
# Warmup Iteration  20: 930929.815 ops/s
# Warmup Iteration  21: 931665.013 ops/s
# Warmup Iteration  22: 930308.003 ops/s
# Warmup Iteration  23: 927208.281 ops/s
# Warmup Iteration  24: 930767.685 ops/s
# Warmup Iteration  25: 931736.358 ops/s
# Warmup Iteration  26: 930527.892 ops/s
# Warmup Iteration  27: 930428.882 ops/s
# Warmup Iteration  28: 931488.106 ops/s
# Warmup Iteration  29: 931692.261 ops/s
# Warmup Iteration  30: 930369.565 ops/s
Iteration   1: 928531.488 ops/s
Iteration   2: 930016.995 ops/s
Iteration   3: 929593.849 ops/s
Iteration   4: 932498.630 ops/s
Iteration   5: 929675.074 ops/s
Iteration   6: 931558.477 ops/s
Iteration   7: 929382.552 ops/s
Iteration   8: 933205.485 ops/s
Iteration   9: 931895.015 ops/s
Iteration  10: 926804.731 ops/s
Iteration  11: 929898.920 ops/s
Iteration  12: 929489.399 ops/s
Iteration  13: 928254.935 ops/s
Iteration  14: 930033.534 ops/s
Iteration  15: 931061.240 ops/s
Iteration  16: 930147.316 ops/s
Iteration  17: 928165.423 ops/s
Iteration  18: 934149.632 ops/s
Iteration  19: 927061.318 ops/s
Iteration  20: 928764.900 ops/s
Iteration  21: 927445.374 ops/s
Iteration  22: 932206.571 ops/s
Iteration  23: 929999.295 ops/s
Iteration  24: 929698.296 ops/s
Iteration  25: 928110.305 ops/s
Iteration  26: 931089.818 ops/s
Iteration  27: 933443.517 ops/s
Iteration  28: 917655.488 ops/s
Iteration  29: 933016.036 ops/s
Iteration  30: 929239.688 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove":
  929736.443 ±(99.9%) 1996.060 ops/s [Average]
  (min, avg, max) = (917655.488, 929736.443, 934149.632), stdev = 2987.609
  CI (99.9%): [927740.383, 931732.504] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                Mode  Cnt       Score      Error  Units
SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove  thrpt   30  929736.443 ± 1996.060  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_chunk$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_chunk

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 135165.058 ops/s
# Warmup Iteration   2: 223971.086 ops/s
# Warmup Iteration   3: 260780.124 ops/s
# Warmup Iteration   4: 262942.103 ops/s
# Warmup Iteration   5: 262400.793 ops/s
# Warmup Iteration   6: 220431.990 ops/s
# Warmup Iteration   7: 263558.073 ops/s
# Warmup Iteration   8: 263021.348 ops/s
# Warmup Iteration   9: 263276.296 ops/s
# Warmup Iteration  10: 263695.720 ops/s
# Warmup Iteration  11: 263581.381 ops/s
# Warmup Iteration  12: 263706.277 ops/s
# Warmup Iteration  13: 263909.480 ops/s
# Warmup Iteration  14: 263389.161 ops/s
# Warmup Iteration  15: 261158.746 ops/s
# Warmup Iteration  16: 263661.922 ops/s
# Warmup Iteration  17: 272508.415 ops/s
# Warmup Iteration  18: 269915.729 ops/s
# Warmup Iteration  19: 272561.117 ops/s
# Warmup Iteration  20: 272018.624 ops/s
# Warmup Iteration  21: 271184.405 ops/s
# Warmup Iteration  22: 271916.134 ops/s
# Warmup Iteration  23: 271134.490 ops/s
# Warmup Iteration  24: 272464.710 ops/s
# Warmup Iteration  25: 271805.571 ops/s
# Warmup Iteration  26: 271938.253 ops/s
# Warmup Iteration  27: 271813.791 ops/s
# Warmup Iteration  28: 272706.265 ops/s
# Warmup Iteration  29: 270484.756 ops/s
# Warmup Iteration  30: 272696.848 ops/s
Iteration   1: 271907.946 ops/s
Iteration   2: 271505.961 ops/s
Iteration   3: 271217.890 ops/s
Iteration   4: 271968.216 ops/s
Iteration   5: 271992.764 ops/s
Iteration   6: 271878.800 ops/s
Iteration   7: 272680.434 ops/s
Iteration   8: 271707.389 ops/s
Iteration   9: 272555.657 ops/s
Iteration  10: 272778.577 ops/s
Iteration  11: 271888.766 ops/s
Iteration  12: 271683.513 ops/s
Iteration  13: 272353.955 ops/s
Iteration  14: 272624.010 ops/s
Iteration  15: 272443.113 ops/s
Iteration  16: 271761.495 ops/s
Iteration  17: 272011.310 ops/s
Iteration  18: 272196.435 ops/s
Iteration  19: 272671.490 ops/s
Iteration  20: 272049.704 ops/s
Iteration  21: 271797.240 ops/s
Iteration  22: 273079.929 ops/s
Iteration  23: 271342.046 ops/s
Iteration  24: 272457.575 ops/s
Iteration  25: 272081.861 ops/s
Iteration  26: 272249.953 ops/s
Iteration  27: 272214.293 ops/s
Iteration  28: 271855.355 ops/s
Iteration  29: 271073.642 ops/s
Iteration  30: 271975.477 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_chunk":
  272066.827 ±(99.9%) 314.513 ops/s [Average]
  (min, avg, max) = (271073.642, 272066.827, 273079.929), stdev = 470.748
  CI (99.9%): [271752.314, 272381.339] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score     Error  Units
SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_chunk  thrpt   30  272066.827 ± 314.513  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4248982.037 ops/s
# Warmup Iteration   2: 7395918.666 ops/s
# Warmup Iteration   3: 8833742.420 ops/s
# Warmup Iteration   4: 8837012.276 ops/s
# Warmup Iteration   5: 8839450.029 ops/s
# Warmup Iteration   6: 8692710.780 ops/s
# Warmup Iteration   7: 8852715.611 ops/s
# Warmup Iteration   8: 8873718.102 ops/s
# Warmup Iteration   9: 8838635.056 ops/s
# Warmup Iteration  10: 8774825.064 ops/s
# Warmup Iteration  11: 8841707.203 ops/s
# Warmup Iteration  12: 8816604.599 ops/s
# Warmup Iteration  13: 8844599.865 ops/s
# Warmup Iteration  14: 8867304.692 ops/s
# Warmup Iteration  15: 8830651.509 ops/s
# Warmup Iteration  16: 8853846.898 ops/s
# Warmup Iteration  17: 8628081.764 ops/s
# Warmup Iteration  18: 8854057.611 ops/s
# Warmup Iteration  19: 8795044.538 ops/s
# Warmup Iteration  20: 8777136.295 ops/s
# Warmup Iteration  21: 8839218.263 ops/s
# Warmup Iteration  22: 8875641.010 ops/s
# Warmup Iteration  23: 8840184.917 ops/s
# Warmup Iteration  24: 8860838.948 ops/s
# Warmup Iteration  25: 8787765.120 ops/s
# Warmup Iteration  26: 8820329.746 ops/s
# Warmup Iteration  27: 8809649.147 ops/s
# Warmup Iteration  28: 8863191.454 ops/s
# Warmup Iteration  29: 8872622.925 ops/s
# Warmup Iteration  30: 8872277.926 ops/s
Iteration   1: 8801241.383 ops/s
Iteration   2: 8881157.369 ops/s
Iteration   3: 8865586.129 ops/s
Iteration   4: 8870910.559 ops/s
Iteration   5: 8876277.659 ops/s
Iteration   6: 8892683.304 ops/s
Iteration   7: 8832837.344 ops/s
Iteration   8: 8823105.730 ops/s
Iteration   9: 8744402.316 ops/s
Iteration  10: 8848791.288 ops/s
Iteration  11: 8893523.258 ops/s
Iteration  12: 8870916.338 ops/s
Iteration  13: 8851666.616 ops/s
Iteration  14: 8825639.680 ops/s
Iteration  15: 8902743.498 ops/s
Iteration  16: 8871586.077 ops/s
Iteration  17: 8914638.328 ops/s
Iteration  18: 8840139.016 ops/s
Iteration  19: 8846449.566 ops/s
Iteration  20: 8885537.663 ops/s
Iteration  21: 8869013.370 ops/s
Iteration  22: 8911167.191 ops/s
Iteration  23: 8836244.206 ops/s
Iteration  24: 8809988.427 ops/s
Iteration  25: 8829981.682 ops/s
Iteration  26: 8880708.882 ops/s
Iteration  27: 8719969.596 ops/s
Iteration  28: 8813990.217 ops/s
Iteration  29: 8816505.591 ops/s
Iteration  30: 8844408.328 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_clear":
  8849060.354 ±(99.9%) 29621.711 ops/s [Average]
  (min, avg, max) = (8719969.596, 8849060.354, 8914638.328), stdev = 44336.385
  CI (99.9%): [8819438.643, 8878682.064] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_clear  thrpt   30  8849060.354 ± 29621.711  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 685887.850 ops/s
# Warmup Iteration   2: 1721960.873 ops/s
# Warmup Iteration   3: 1799800.877 ops/s
# Warmup Iteration   4: 1499989.908 ops/s
# Warmup Iteration   5: 1801631.077 ops/s
# Warmup Iteration   6: 1815372.514 ops/s
# Warmup Iteration   7: 1806718.367 ops/s
# Warmup Iteration   8: 1815951.663 ops/s
# Warmup Iteration   9: 1816249.159 ops/s
# Warmup Iteration  10: 1817776.024 ops/s
# Warmup Iteration  11: 1816303.177 ops/s
# Warmup Iteration  12: 1816411.723 ops/s
# Warmup Iteration  13: 1813587.267 ops/s
# Warmup Iteration  14: 1813798.442 ops/s
# Warmup Iteration  15: 1814936.387 ops/s
# Warmup Iteration  16: 1798487.191 ops/s
# Warmup Iteration  17: 1815059.799 ops/s
# Warmup Iteration  18: 1816597.583 ops/s
# Warmup Iteration  19: 1815726.983 ops/s
# Warmup Iteration  20: 1815414.060 ops/s
# Warmup Iteration  21: 1811930.538 ops/s
# Warmup Iteration  22: 1815898.044 ops/s
# Warmup Iteration  23: 1815845.348 ops/s
# Warmup Iteration  24: 1818034.901 ops/s
# Warmup Iteration  25: 1815559.791 ops/s
# Warmup Iteration  26: 1816335.491 ops/s
# Warmup Iteration  27: 1813912.722 ops/s
# Warmup Iteration  28: 1816672.419 ops/s
# Warmup Iteration  29: 1818222.121 ops/s
# Warmup Iteration  30: 1814615.338 ops/s
Iteration   1: 1818911.379 ops/s
Iteration   2: 1817423.823 ops/s
Iteration   3: 1817029.030 ops/s
Iteration   4: 1814241.026 ops/s
Iteration   5: 1813042.940 ops/s
Iteration   6: 1821434.101 ops/s
Iteration   7: 1813404.971 ops/s
Iteration   8: 1815411.361 ops/s
Iteration   9: 1815059.002 ops/s
Iteration  10: 1816199.413 ops/s
Iteration  11: 1814762.683 ops/s
Iteration  12: 1814089.985 ops/s
Iteration  13: 1819536.814 ops/s
Iteration  14: 1813326.154 ops/s
Iteration  15: 1813571.997 ops/s
Iteration  16: 1817882.968 ops/s
Iteration  17: 1816137.348 ops/s
Iteration  18: 1817966.078 ops/s
Iteration  19: 1807991.186 ops/s
Iteration  20: 1817823.946 ops/s
Iteration  21: 1816116.816 ops/s
Iteration  22: 1813348.626 ops/s
Iteration  23: 1813276.313 ops/s
Iteration  24: 1813563.760 ops/s
Iteration  25: 1813207.019 ops/s
Iteration  26: 1813044.393 ops/s
Iteration  27: 1812907.284 ops/s
Iteration  28: 1818511.820 ops/s
Iteration  29: 1809649.766 ops/s
Iteration  30: 1814904.205 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_collect":
  1815125.874 ±(99.9%) 1913.898 ops/s [Average]
  (min, avg, max) = (1807991.186, 1815125.874, 1821434.101), stdev = 2864.632
  CI (99.9%): [1813211.976, 1817039.771] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_collect  thrpt   30  1815125.874 ± 1913.898  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1817159.813 ops/s
# Warmup Iteration   2: 4017912.685 ops/s
# Warmup Iteration   3: 4928081.040 ops/s
# Warmup Iteration   4: 5853245.455 ops/s
# Warmup Iteration   5: 5876498.647 ops/s
# Warmup Iteration   6: 5870165.231 ops/s
# Warmup Iteration   7: 5863889.285 ops/s
# Warmup Iteration   8: 5853434.491 ops/s
# Warmup Iteration   9: 5882728.006 ops/s
# Warmup Iteration  10: 5869296.339 ops/s
# Warmup Iteration  11: 5861237.451 ops/s
# Warmup Iteration  12: 5866085.403 ops/s
# Warmup Iteration  13: 5845856.695 ops/s
# Warmup Iteration  14: 5871123.058 ops/s
# Warmup Iteration  15: 5861489.216 ops/s
# Warmup Iteration  16: 5779181.347 ops/s
# Warmup Iteration  17: 5882178.391 ops/s
# Warmup Iteration  18: 5862207.621 ops/s
# Warmup Iteration  19: 5857685.837 ops/s
# Warmup Iteration  20: 5868642.278 ops/s
# Warmup Iteration  21: 5859783.917 ops/s
# Warmup Iteration  22: 5875670.264 ops/s
# Warmup Iteration  23: 5862070.996 ops/s
# Warmup Iteration  24: 5890315.419 ops/s
# Warmup Iteration  25: 5825678.146 ops/s
# Warmup Iteration  26: 5872254.204 ops/s
# Warmup Iteration  27: 5877205.819 ops/s
# Warmup Iteration  28: 5859750.601 ops/s
# Warmup Iteration  29: 5861637.257 ops/s
# Warmup Iteration  30: 5873455.327 ops/s
Iteration   1: 5849081.174 ops/s
Iteration   2: 5877304.178 ops/s
Iteration   3: 5860080.694 ops/s
Iteration   4: 5881356.034 ops/s
Iteration   5: 5860735.646 ops/s
Iteration   6: 5873415.238 ops/s
Iteration   7: 5883259.530 ops/s
Iteration   8: 5884661.770 ops/s
Iteration   9: 5856005.614 ops/s
Iteration  10: 5864173.214 ops/s
Iteration  11: 5880780.933 ops/s
Iteration  12: 5856116.757 ops/s
Iteration  13: 5859005.368 ops/s
Iteration  14: 5863610.093 ops/s
Iteration  15: 5868918.724 ops/s
Iteration  16: 5874306.986 ops/s
Iteration  17: 5873010.842 ops/s
Iteration  18: 5880033.689 ops/s
Iteration  19: 5878169.385 ops/s
Iteration  20: 5851608.046 ops/s
Iteration  21: 5883832.221 ops/s
Iteration  22: 5868560.236 ops/s
Iteration  23: 5870386.452 ops/s
Iteration  24: 5870019.870 ops/s
Iteration  25: 5865720.712 ops/s
Iteration  26: 5873857.770 ops/s
Iteration  27: 5864814.488 ops/s
Iteration  28: 5863206.814 ops/s
Iteration  29: 5821428.141 ops/s
Iteration  30: 5863272.507 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_contains":
  5867357.771 ±(99.9%) 8716.731 ops/s [Average]
  (min, avg, max) = (5821428.141, 5867357.771, 5884661.770), stdev = 13046.793
  CI (99.9%): [5858641.040, 5876074.502] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_contains  thrpt   30  5867357.771 ± 8716.731  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6522682.211 ops/s
# Warmup Iteration   2: 12376907.078 ops/s
# Warmup Iteration   3: 12117615.162 ops/s
# Warmup Iteration   4: 13377073.663 ops/s
# Warmup Iteration   5: 13430968.296 ops/s
# Warmup Iteration   6: 13354615.694 ops/s
# Warmup Iteration   7: 13373022.265 ops/s
# Warmup Iteration   8: 13341187.570 ops/s
# Warmup Iteration   9: 13395889.114 ops/s
# Warmup Iteration  10: 13406048.727 ops/s
# Warmup Iteration  11: 13383208.769 ops/s
# Warmup Iteration  12: 13386592.900 ops/s
# Warmup Iteration  13: 13411265.752 ops/s
# Warmup Iteration  14: 13357853.511 ops/s
# Warmup Iteration  15: 13397755.665 ops/s
# Warmup Iteration  16: 13370318.400 ops/s
# Warmup Iteration  17: 13293492.610 ops/s
# Warmup Iteration  18: 13407717.062 ops/s
# Warmup Iteration  19: 13353236.592 ops/s
# Warmup Iteration  20: 13403977.913 ops/s
# Warmup Iteration  21: 13423051.986 ops/s
# Warmup Iteration  22: 13416191.054 ops/s
# Warmup Iteration  23: 13420813.305 ops/s
# Warmup Iteration  24: 13412731.295 ops/s
# Warmup Iteration  25: 13352421.741 ops/s
# Warmup Iteration  26: 13425421.148 ops/s
# Warmup Iteration  27: 13423196.401 ops/s
# Warmup Iteration  28: 13361263.329 ops/s
# Warmup Iteration  29: 13352909.317 ops/s
# Warmup Iteration  30: 13399481.606 ops/s
Iteration   1: 13385547.570 ops/s
Iteration   2: 13304236.887 ops/s
Iteration   3: 13373281.661 ops/s
Iteration   4: 13357271.769 ops/s
Iteration   5: 13331000.830 ops/s
Iteration   6: 13343945.797 ops/s
Iteration   7: 13474973.011 ops/s
Iteration   8: 13440583.252 ops/s
Iteration   9: 13428197.019 ops/s
Iteration  10: 13422156.243 ops/s
Iteration  11: 13401767.462 ops/s
Iteration  12: 13422565.491 ops/s
Iteration  13: 13382814.696 ops/s
Iteration  14: 13427521.082 ops/s
Iteration  15: 13407172.826 ops/s
Iteration  16: 13395573.652 ops/s
Iteration  17: 13297142.004 ops/s
Iteration  18: 13313584.396 ops/s
Iteration  19: 13409681.785 ops/s
Iteration  20: 13444202.805 ops/s
Iteration  21: 13362987.164 ops/s
Iteration  22: 13384292.894 ops/s
Iteration  23: 13330639.108 ops/s
Iteration  24: 13336683.533 ops/s
Iteration  25: 13430388.115 ops/s
Iteration  26: 13402163.495 ops/s
Iteration  27: 13451453.332 ops/s
Iteration  28: 13435957.672 ops/s
Iteration  29: 13434069.168 ops/s
Iteration  30: 13393605.896 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_containsAllArray":
  13390848.687 ±(99.9%) 31411.193 ops/s [Average]
  (min, avg, max) = (13297142.004, 13390848.687, 13474973.011), stdev = 47014.799
  CI (99.9%): [13359437.494, 13422259.880] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt         Score       Error  Units
SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_containsAllArray  thrpt   30  13390848.687 ± 31411.193  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4059352.358 ops/s
# Warmup Iteration   2: 7906548.870 ops/s
# Warmup Iteration   3: 8437840.093 ops/s
# Warmup Iteration   4: 8892911.231 ops/s
# Warmup Iteration   5: 8870490.121 ops/s
# Warmup Iteration   6: 8890759.480 ops/s
# Warmup Iteration   7: 8867939.595 ops/s
# Warmup Iteration   8: 8871239.920 ops/s
# Warmup Iteration   9: 8922587.750 ops/s
# Warmup Iteration  10: 8841162.344 ops/s
# Warmup Iteration  11: 8888864.371 ops/s
# Warmup Iteration  12: 8876008.346 ops/s
# Warmup Iteration  13: 8946947.917 ops/s
# Warmup Iteration  14: 8874727.855 ops/s
# Warmup Iteration  15: 8909127.781 ops/s
# Warmup Iteration  16: 8877253.892 ops/s
# Warmup Iteration  17: 8917716.706 ops/s
# Warmup Iteration  18: 8867233.362 ops/s
# Warmup Iteration  19: 8893827.926 ops/s
# Warmup Iteration  20: 8892113.331 ops/s
# Warmup Iteration  21: 8928961.438 ops/s
# Warmup Iteration  22: 8927903.348 ops/s
# Warmup Iteration  23: 8906986.024 ops/s
# Warmup Iteration  24: 8842472.703 ops/s
# Warmup Iteration  25: 8813840.690 ops/s
# Warmup Iteration  26: 8911740.663 ops/s
# Warmup Iteration  27: 8918084.395 ops/s
# Warmup Iteration  28: 8867630.030 ops/s
# Warmup Iteration  29: 8886450.951 ops/s
# Warmup Iteration  30: 8911442.387 ops/s
Iteration   1: 8896897.151 ops/s
Iteration   2: 8769331.832 ops/s
Iteration   3: 8894480.056 ops/s
Iteration   4: 8896438.624 ops/s
Iteration   5: 8935653.247 ops/s
Iteration   6: 8914283.379 ops/s
Iteration   7: 8906091.194 ops/s
Iteration   8: 8899725.117 ops/s
Iteration   9: 8895524.841 ops/s
Iteration  10: 8896768.136 ops/s
Iteration  11: 8908979.991 ops/s
Iteration  12: 8887651.489 ops/s
Iteration  13: 8909261.992 ops/s
Iteration  14: 8859968.906 ops/s
Iteration  15: 8911537.101 ops/s
Iteration  16: 8910695.200 ops/s
Iteration  17: 8930008.254 ops/s
Iteration  18: 8839826.625 ops/s
Iteration  19: 8897980.239 ops/s
Iteration  20: 8907295.535 ops/s
Iteration  21: 8891204.918 ops/s
Iteration  22: 8893177.928 ops/s
Iteration  23: 8908892.446 ops/s
Iteration  24: 8871128.686 ops/s
Iteration  25: 8887412.495 ops/s
Iteration  26: 8900736.717 ops/s
Iteration  27: 8928818.071 ops/s
Iteration  28: 8893355.778 ops/s
Iteration  29: 8863829.839 ops/s
Iteration  30: 8897968.413 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_containsAllIterable":
  8893497.473 ±(99.9%) 20585.653 ops/s [Average]
  (min, avg, max) = (8769331.832, 8893497.473, 8935653.247), stdev = 30811.639
  CI (99.9%): [8872911.820, 8914083.126] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score       Error  Units
SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_containsAllIterable  thrpt   30  8893497.473 ± 20585.653  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_containsAnyArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_containsAnyArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1116597.170 ops/s
# Warmup Iteration   2: 2300698.491 ops/s
# Warmup Iteration   3: 4788099.622 ops/s
# Warmup Iteration   4: 3954586.508 ops/s
# Warmup Iteration   5: 4797014.942 ops/s
# Warmup Iteration   6: 4796055.935 ops/s
# Warmup Iteration   7: 4799316.920 ops/s
# Warmup Iteration   8: 4782621.377 ops/s
# Warmup Iteration   9: 4797197.938 ops/s
# Warmup Iteration  10: 4809177.527 ops/s
# Warmup Iteration  11: 4798817.054 ops/s
# Warmup Iteration  12: 4799553.663 ops/s
# Warmup Iteration  13: 4765837.837 ops/s
# Warmup Iteration  14: 4788350.669 ops/s
# Warmup Iteration  15: 4800737.148 ops/s
# Warmup Iteration  16: 4793775.782 ops/s
# Warmup Iteration  17: 4786588.803 ops/s
# Warmup Iteration  18: 4799978.702 ops/s
# Warmup Iteration  19: 4795544.229 ops/s
# Warmup Iteration  20: 4799213.943 ops/s
# Warmup Iteration  21: 4798957.454 ops/s
# Warmup Iteration  22: 4799368.814 ops/s
# Warmup Iteration  23: 4808218.933 ops/s
# Warmup Iteration  24: 4810070.930 ops/s
# Warmup Iteration  25: 4804438.904 ops/s
# Warmup Iteration  26: 4761232.107 ops/s
# Warmup Iteration  27: 4800391.670 ops/s
# Warmup Iteration  28: 4807344.957 ops/s
# Warmup Iteration  29: 4800023.217 ops/s
# Warmup Iteration  30: 4770950.139 ops/s
Iteration   1: 4788292.318 ops/s
Iteration   2: 4811083.675 ops/s
Iteration   3: 4786670.056 ops/s
Iteration   4: 4811133.353 ops/s
Iteration   5: 4807162.351 ops/s
Iteration   6: 4808569.329 ops/s
Iteration   7: 4788539.377 ops/s
Iteration   8: 4799796.284 ops/s
Iteration   9: 4808123.768 ops/s
Iteration  10: 4783576.504 ops/s
Iteration  11: 4782757.465 ops/s
Iteration  12: 4796247.862 ops/s
Iteration  13: 4778276.725 ops/s
Iteration  14: 4785624.130 ops/s
Iteration  15: 4810440.374 ops/s
Iteration  16: 4792293.229 ops/s
Iteration  17: 4800448.348 ops/s
Iteration  18: 4797273.678 ops/s
Iteration  19: 4805361.676 ops/s
Iteration  20: 4798202.385 ops/s
Iteration  21: 4799057.126 ops/s
Iteration  22: 4782611.809 ops/s
Iteration  23: 4811280.054 ops/s
Iteration  24: 4798218.572 ops/s
Iteration  25: 4806898.497 ops/s
Iteration  26: 4791891.040 ops/s
Iteration  27: 4811690.806 ops/s
Iteration  28: 4801434.312 ops/s
Iteration  29: 4792841.236 ops/s
Iteration  30: 4808881.200 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_containsAnyArray":
  4798155.918 ±(99.9%) 6868.784 ops/s [Average]
  (min, avg, max) = (4778276.725, 4798155.918, 4811690.806), stdev = 10280.873
  CI (99.9%): [4791287.134, 4805024.702] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score      Error  Units
SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_containsAnyArray  thrpt   30  4798155.918 ± 6868.784  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_containsAnyIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_containsAnyIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 524085.945 ops/s
# Warmup Iteration   2: 814668.403 ops/s
# Warmup Iteration   3: 1074777.554 ops/s
# Warmup Iteration   4: 1075416.030 ops/s
# Warmup Iteration   5: 1076467.684 ops/s
# Warmup Iteration   6: 894426.348 ops/s
# Warmup Iteration   7: 1076870.276 ops/s
# Warmup Iteration   8: 1070360.055 ops/s
# Warmup Iteration   9: 1074744.541 ops/s
# Warmup Iteration  10: 1076104.703 ops/s
# Warmup Iteration  11: 1075691.799 ops/s
# Warmup Iteration  12: 1076104.146 ops/s
# Warmup Iteration  13: 1076755.515 ops/s
# Warmup Iteration  14: 1075443.080 ops/s
# Warmup Iteration  15: 1076830.824 ops/s
# Warmup Iteration  16: 1076260.121 ops/s
# Warmup Iteration  17: 1076475.245 ops/s
# Warmup Iteration  18: 1074747.347 ops/s
# Warmup Iteration  19: 1078160.246 ops/s
# Warmup Iteration  20: 1075660.999 ops/s
# Warmup Iteration  21: 1076507.970 ops/s
# Warmup Iteration  22: 1075526.377 ops/s
# Warmup Iteration  23: 1074934.492 ops/s
# Warmup Iteration  24: 1076556.333 ops/s
# Warmup Iteration  25: 1073865.885 ops/s
# Warmup Iteration  26: 1073939.119 ops/s
# Warmup Iteration  27: 1075693.274 ops/s
# Warmup Iteration  28: 1075643.645 ops/s
# Warmup Iteration  29: 1068701.760 ops/s
# Warmup Iteration  30: 1066481.062 ops/s
Iteration   1: 1058243.891 ops/s
Iteration   2: 1076139.453 ops/s
Iteration   3: 1075914.404 ops/s
Iteration   4: 1074886.608 ops/s
Iteration   5: 1074777.098 ops/s
Iteration   6: 1074999.709 ops/s
Iteration   7: 1072863.763 ops/s
Iteration   8: 1076016.923 ops/s
Iteration   9: 1076739.924 ops/s
Iteration  10: 1072888.509 ops/s
Iteration  11: 1070788.874 ops/s
Iteration  12: 1077277.646 ops/s
Iteration  13: 1072918.214 ops/s
Iteration  14: 1076144.343 ops/s
Iteration  15: 1075335.710 ops/s
Iteration  16: 1077548.224 ops/s
Iteration  17: 1077144.355 ops/s
Iteration  18: 1072812.703 ops/s
Iteration  19: 1077269.784 ops/s
Iteration  20: 1074995.200 ops/s
Iteration  21: 1077750.932 ops/s
Iteration  22: 1074138.162 ops/s
Iteration  23: 1077234.907 ops/s
Iteration  24: 1074316.637 ops/s
Iteration  25: 1075226.291 ops/s
Iteration  26: 1076464.092 ops/s
Iteration  27: 1075611.846 ops/s
Iteration  28: 1069029.820 ops/s
Iteration  29: 1075068.001 ops/s
Iteration  30: 1077180.331 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_containsAnyIterable":
  1074590.878 ±(99.9%) 2473.463 ops/s [Average]
  (min, avg, max) = (1058243.891, 1074590.878, 1077750.932), stdev = 3702.163
  CI (99.9%): [1072117.416, 1077064.341] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score      Error  Units
SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_containsAnyIterable  thrpt   30  1074590.878 ± 2473.463  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_containsNoneArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_containsNoneArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1111581.112 ops/s
# Warmup Iteration   2: 2354061.373 ops/s
# Warmup Iteration   3: 4924116.533 ops/s
# Warmup Iteration   4: 4055605.380 ops/s
# Warmup Iteration   5: 4938732.158 ops/s
# Warmup Iteration   6: 4934106.879 ops/s
# Warmup Iteration   7: 4920337.338 ops/s
# Warmup Iteration   8: 4922526.573 ops/s
# Warmup Iteration   9: 4923155.752 ops/s
# Warmup Iteration  10: 4924024.003 ops/s
# Warmup Iteration  11: 4925764.560 ops/s
# Warmup Iteration  12: 4920130.724 ops/s
# Warmup Iteration  13: 4930040.273 ops/s
# Warmup Iteration  14: 4930280.107 ops/s
# Warmup Iteration  15: 4924597.848 ops/s
# Warmup Iteration  16: 4931359.143 ops/s
# Warmup Iteration  17: 4909298.132 ops/s
# Warmup Iteration  18: 4934103.606 ops/s
# Warmup Iteration  19: 4938277.016 ops/s
# Warmup Iteration  20: 4926309.970 ops/s
# Warmup Iteration  21: 4923255.225 ops/s
# Warmup Iteration  22: 4933878.980 ops/s
# Warmup Iteration  23: 4936219.633 ops/s
# Warmup Iteration  24: 4928507.014 ops/s
# Warmup Iteration  25: 4932737.158 ops/s
# Warmup Iteration  26: 4931196.598 ops/s
# Warmup Iteration  27: 4932982.973 ops/s
# Warmup Iteration  28: 4928569.865 ops/s
# Warmup Iteration  29: 4920980.731 ops/s
# Warmup Iteration  30: 4928747.377 ops/s
Iteration   1: 4939750.998 ops/s
Iteration   2: 4929201.181 ops/s
Iteration   3: 4926725.138 ops/s
Iteration   4: 4909116.484 ops/s
Iteration   5: 4926231.282 ops/s
Iteration   6: 4929529.505 ops/s
Iteration   7: 4943419.971 ops/s
Iteration   8: 4916909.345 ops/s
Iteration   9: 4927021.470 ops/s
Iteration  10: 4923434.871 ops/s
Iteration  11: 4922592.695 ops/s
Iteration  12: 4938822.699 ops/s
Iteration  13: 4928824.687 ops/s
Iteration  14: 4925415.857 ops/s
Iteration  15: 4936147.507 ops/s
Iteration  16: 4917810.556 ops/s
Iteration  17: 4937646.452 ops/s
Iteration  18: 4907365.578 ops/s
Iteration  19: 4938100.075 ops/s
Iteration  20: 4937646.677 ops/s
Iteration  21: 4940132.827 ops/s
Iteration  22: 4920249.129 ops/s
Iteration  23: 4942129.585 ops/s
Iteration  24: 4915012.514 ops/s
Iteration  25: 4861251.060 ops/s
Iteration  26: 4919416.450 ops/s
Iteration  27: 4941030.796 ops/s
Iteration  28: 4917526.343 ops/s
Iteration  29: 4928240.083 ops/s
Iteration  30: 4896232.373 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_containsNoneArray":
  4924764.473 ±(99.9%) 11098.833 ops/s [Average]
  (min, avg, max) = (4861251.060, 4924764.473, 4943419.971), stdev = 16612.212
  CI (99.9%): [4913665.640, 4935863.306] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_containsNoneArray  thrpt   30  4924764.473 ± 11098.833  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_containsNoneIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_containsNoneIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 495591.681 ops/s
# Warmup Iteration   2: 753370.877 ops/s
# Warmup Iteration   3: 966007.598 ops/s
# Warmup Iteration   4: 969187.238 ops/s
# Warmup Iteration   5: 966629.575 ops/s
# Warmup Iteration   6: 804976.030 ops/s
# Warmup Iteration   7: 969326.256 ops/s
# Warmup Iteration   8: 968495.448 ops/s
# Warmup Iteration   9: 969018.448 ops/s
# Warmup Iteration  10: 969910.479 ops/s
# Warmup Iteration  11: 966095.345 ops/s
# Warmup Iteration  12: 969944.765 ops/s
# Warmup Iteration  13: 966586.966 ops/s
# Warmup Iteration  14: 967455.746 ops/s
# Warmup Iteration  15: 968386.101 ops/s
# Warmup Iteration  16: 967323.778 ops/s
# Warmup Iteration  17: 967299.648 ops/s
# Warmup Iteration  18: 967541.180 ops/s
# Warmup Iteration  19: 960123.130 ops/s
# Warmup Iteration  20: 968197.327 ops/s
# Warmup Iteration  21: 967514.442 ops/s
# Warmup Iteration  22: 967824.125 ops/s
# Warmup Iteration  23: 967585.310 ops/s
# Warmup Iteration  24: 968473.372 ops/s
# Warmup Iteration  25: 967800.749 ops/s
# Warmup Iteration  26: 967916.396 ops/s
# Warmup Iteration  27: 966210.752 ops/s
# Warmup Iteration  28: 968316.507 ops/s
# Warmup Iteration  29: 967347.539 ops/s
# Warmup Iteration  30: 967674.392 ops/s
Iteration   1: 966700.369 ops/s
Iteration   2: 969095.133 ops/s
Iteration   3: 965639.717 ops/s
Iteration   4: 968216.727 ops/s
Iteration   5: 961667.943 ops/s
Iteration   6: 968905.304 ops/s
Iteration   7: 966106.598 ops/s
Iteration   8: 967179.492 ops/s
Iteration   9: 966355.783 ops/s
Iteration  10: 952834.557 ops/s
Iteration  11: 967120.600 ops/s
Iteration  12: 969454.573 ops/s
Iteration  13: 967667.590 ops/s
Iteration  14: 968550.746 ops/s
Iteration  15: 967421.795 ops/s
Iteration  16: 965235.371 ops/s
Iteration  17: 967268.642 ops/s
Iteration  18: 967194.319 ops/s
Iteration  19: 970222.834 ops/s
Iteration  20: 966875.498 ops/s
Iteration  21: 968945.778 ops/s
Iteration  22: 966312.720 ops/s
Iteration  23: 969858.771 ops/s
Iteration  24: 968795.348 ops/s
Iteration  25: 964422.302 ops/s
Iteration  26: 966199.400 ops/s
Iteration  27: 960337.997 ops/s
Iteration  28: 970156.209 ops/s
Iteration  29: 968090.147 ops/s
Iteration  30: 970049.956 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_containsNoneIterable":
  966762.741 ±(99.9%) 2322.894 ops/s [Average]
  (min, avg, max) = (952834.557, 966762.741, 970222.834), stdev = 3476.799
  CI (99.9%): [964439.846, 969085.635] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score      Error  Units
SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_containsNoneIterable  thrpt   30  966762.741 ± 2322.894  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1014857.872 ops/s
# Warmup Iteration   2: 1845801.623 ops/s
# Warmup Iteration   3: 2449145.312 ops/s
# Warmup Iteration   4: 2442719.593 ops/s
# Warmup Iteration   5: 2038539.500 ops/s
# Warmup Iteration   6: 2445596.198 ops/s
# Warmup Iteration   7: 2417186.086 ops/s
# Warmup Iteration   8: 2446661.627 ops/s
# Warmup Iteration   9: 2443051.734 ops/s
# Warmup Iteration  10: 2442171.835 ops/s
# Warmup Iteration  11: 2451060.738 ops/s
# Warmup Iteration  12: 2448589.347 ops/s
# Warmup Iteration  13: 2442130.766 ops/s
# Warmup Iteration  14: 2443158.397 ops/s
# Warmup Iteration  15: 2441604.178 ops/s
# Warmup Iteration  16: 2436553.293 ops/s
# Warmup Iteration  17: 2600533.811 ops/s
# Warmup Iteration  18: 2604680.900 ops/s
# Warmup Iteration  19: 2603063.444 ops/s
# Warmup Iteration  20: 2606433.024 ops/s
# Warmup Iteration  21: 2602903.084 ops/s
# Warmup Iteration  22: 2585094.620 ops/s
# Warmup Iteration  23: 2598471.146 ops/s
# Warmup Iteration  24: 2603760.462 ops/s
# Warmup Iteration  25: 2603510.432 ops/s
# Warmup Iteration  26: 2601811.385 ops/s
# Warmup Iteration  27: 2603249.426 ops/s
# Warmup Iteration  28: 2594042.889 ops/s
# Warmup Iteration  29: 2606579.865 ops/s
# Warmup Iteration  30: 2606048.334 ops/s
Iteration   1: 2602363.008 ops/s
Iteration   2: 2608095.009 ops/s
Iteration   3: 2608831.352 ops/s
Iteration   4: 2603881.944 ops/s
Iteration   5: 2597106.509 ops/s
Iteration   6: 2605590.056 ops/s
Iteration   7: 2605278.557 ops/s
Iteration   8: 2609674.820 ops/s
Iteration   9: 2606422.107 ops/s
Iteration  10: 2601849.333 ops/s
Iteration  11: 2605068.889 ops/s
Iteration  12: 2599158.314 ops/s
Iteration  13: 2609250.187 ops/s
Iteration  14: 2605105.293 ops/s
Iteration  15: 2607757.474 ops/s
Iteration  16: 2607081.945 ops/s
Iteration  17: 2603941.831 ops/s
Iteration  18: 2599842.394 ops/s
Iteration  19: 2608714.666 ops/s
Iteration  20: 2604948.333 ops/s
Iteration  21: 2605691.559 ops/s
Iteration  22: 2602427.430 ops/s
Iteration  23: 2601665.237 ops/s
Iteration  24: 2599736.100 ops/s
Iteration  25: 2608242.686 ops/s
Iteration  26: 2599717.913 ops/s
Iteration  27: 2603365.121 ops/s
Iteration  28: 2601803.300 ops/s
Iteration  29: 2603891.807 ops/s
Iteration  30: 2604485.956 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_count":
  2604366.304 ±(99.9%) 2223.998 ops/s [Average]
  (min, avg, max) = (2597106.509, 2604366.304, 2609674.820), stdev = 3328.775
  CI (99.9%): [2602142.307, 2606590.302] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_count  thrpt   30  2604366.304 ± 2223.998  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1237741.950 ops/s
# Warmup Iteration   2: 2372256.598 ops/s
# Warmup Iteration   3: 5112562.321 ops/s
# Warmup Iteration   4: 4283245.738 ops/s
# Warmup Iteration   5: 5167935.882 ops/s
# Warmup Iteration   6: 5162083.577 ops/s
# Warmup Iteration   7: 5152720.923 ops/s
# Warmup Iteration   8: 5116943.212 ops/s
# Warmup Iteration   9: 5154473.105 ops/s
# Warmup Iteration  10: 5161488.364 ops/s
# Warmup Iteration  11: 5154391.943 ops/s
# Warmup Iteration  12: 5155434.521 ops/s
# Warmup Iteration  13: 5116359.969 ops/s
# Warmup Iteration  14: 5164500.627 ops/s
# Warmup Iteration  15: 5163398.379 ops/s
# Warmup Iteration  16: 5116231.093 ops/s
# Warmup Iteration  17: 5158310.356 ops/s
# Warmup Iteration  18: 5150983.153 ops/s
# Warmup Iteration  19: 5159780.510 ops/s
# Warmup Iteration  20: 5159757.862 ops/s
# Warmup Iteration  21: 5157339.712 ops/s
# Warmup Iteration  22: 5167173.449 ops/s
# Warmup Iteration  23: 5148015.023 ops/s
# Warmup Iteration  24: 5157323.895 ops/s
# Warmup Iteration  25: 5161370.012 ops/s
# Warmup Iteration  26: 5155605.747 ops/s
# Warmup Iteration  27: 5165422.977 ops/s
# Warmup Iteration  28: 5117786.670 ops/s
# Warmup Iteration  29: 5121582.096 ops/s
# Warmup Iteration  30: 5150266.694 ops/s
Iteration   1: 5153180.138 ops/s
Iteration   2: 5129413.210 ops/s
Iteration   3: 5139574.859 ops/s
Iteration   4: 5153546.345 ops/s
Iteration   5: 5150671.492 ops/s
Iteration   6: 5170318.367 ops/s
Iteration   7: 5162293.383 ops/s
Iteration   8: 5157747.058 ops/s
Iteration   9: 5143614.730 ops/s
Iteration  10: 5136590.564 ops/s
Iteration  11: 5158841.505 ops/s
Iteration  12: 5158031.571 ops/s
Iteration  13: 5154110.476 ops/s
Iteration  14: 5148967.086 ops/s
Iteration  15: 5150317.763 ops/s
Iteration  16: 5134406.719 ops/s
Iteration  17: 5077904.112 ops/s
Iteration  18: 5158715.321 ops/s
Iteration  19: 5162775.986 ops/s
Iteration  20: 5169109.129 ops/s
Iteration  21: 5159002.678 ops/s
Iteration  22: 5161448.745 ops/s
Iteration  23: 5155094.108 ops/s
Iteration  24: 5168185.293 ops/s
Iteration  25: 5166982.793 ops/s
Iteration  26: 5152615.940 ops/s
Iteration  27: 5164186.813 ops/s
Iteration  28: 5168148.600 ops/s
Iteration  29: 5153532.419 ops/s
Iteration  30: 5157876.475 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_detectIfNone":
  5152573.456 ±(99.9%) 11689.023 ops/s [Average]
  (min, avg, max) = (5077904.112, 5152573.456, 5170318.367), stdev = 17495.581
  CI (99.9%): [5140884.433, 5164262.479] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_detectIfNone  thrpt   30  5152573.456 ± 11689.023  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1885900.467 ops/s
# Warmup Iteration   2: 4104960.393 ops/s
# Warmup Iteration   3: 4906549.311 ops/s
# Warmup Iteration   4: 5257090.435 ops/s
# Warmup Iteration   5: 5515097.989 ops/s
# Warmup Iteration   6: 5521448.154 ops/s
# Warmup Iteration   7: 5505431.932 ops/s
# Warmup Iteration   8: 5512465.769 ops/s
# Warmup Iteration   9: 5514523.021 ops/s
# Warmup Iteration  10: 5529796.863 ops/s
# Warmup Iteration  11: 5520555.690 ops/s
# Warmup Iteration  12: 5515894.675 ops/s
# Warmup Iteration  13: 5503720.076 ops/s
# Warmup Iteration  14: 5526248.283 ops/s
# Warmup Iteration  15: 5515184.426 ops/s
# Warmup Iteration  16: 5497565.809 ops/s
# Warmup Iteration  17: 5524050.077 ops/s
# Warmup Iteration  18: 5527243.089 ops/s
# Warmup Iteration  19: 5529218.223 ops/s
# Warmup Iteration  20: 5525106.479 ops/s
# Warmup Iteration  21: 5524299.066 ops/s
# Warmup Iteration  22: 5514039.978 ops/s
# Warmup Iteration  23: 5512066.121 ops/s
# Warmup Iteration  24: 5533037.385 ops/s
# Warmup Iteration  25: 5510882.783 ops/s
# Warmup Iteration  26: 5511065.974 ops/s
# Warmup Iteration  27: 5506577.388 ops/s
# Warmup Iteration  28: 5524947.189 ops/s
# Warmup Iteration  29: 5509053.158 ops/s
# Warmup Iteration  30: 5509105.674 ops/s
Iteration   1: 5515917.892 ops/s
Iteration   2: 5533664.225 ops/s
Iteration   3: 5531612.314 ops/s
Iteration   4: 5501551.256 ops/s
Iteration   5: 5491954.006 ops/s
Iteration   6: 5507353.547 ops/s
Iteration   7: 5517336.229 ops/s
Iteration   8: 5503632.215 ops/s
Iteration   9: 5538091.437 ops/s
Iteration  10: 5512547.498 ops/s
Iteration  11: 5511466.366 ops/s
Iteration  12: 5527842.946 ops/s
Iteration  13: 5434221.541 ops/s
Iteration  14: 5521852.320 ops/s
Iteration  15: 5493832.204 ops/s
Iteration  16: 5515720.809 ops/s
Iteration  17: 5491246.436 ops/s
Iteration  18: 5514838.272 ops/s
Iteration  19: 5483915.789 ops/s
Iteration  20: 5510605.956 ops/s
Iteration  21: 5519352.573 ops/s
Iteration  22: 5500637.900 ops/s
Iteration  23: 5515080.345 ops/s
Iteration  24: 5523043.477 ops/s
Iteration  25: 5515219.970 ops/s
Iteration  26: 5511595.311 ops/s
Iteration  27: 5526827.122 ops/s
Iteration  28: 5412666.917 ops/s
Iteration  29: 5517547.805 ops/s
Iteration  30: 5498213.997 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_forEach":
  5506646.289 ±(99.9%) 17512.879 ops/s [Average]
  (min, avg, max) = (5412666.917, 5506646.289, 5538091.437), stdev = 26212.454
  CI (99.9%): [5489133.410, 5524159.168] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_forEach  thrpt   30  5506646.289 ± 17512.879  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6260697.429 ops/s
# Warmup Iteration   2: 12921335.995 ops/s
# Warmup Iteration   3: 15165396.398 ops/s
# Warmup Iteration   4: 17934520.055 ops/s
# Warmup Iteration   5: 17991380.191 ops/s
# Warmup Iteration   6: 17901618.807 ops/s
# Warmup Iteration   7: 17885344.901 ops/s
# Warmup Iteration   8: 17914537.867 ops/s
# Warmup Iteration   9: 17879976.608 ops/s
# Warmup Iteration  10: 17986825.442 ops/s
# Warmup Iteration  11: 17813733.279 ops/s
# Warmup Iteration  12: 17917290.934 ops/s
# Warmup Iteration  13: 18015499.778 ops/s
# Warmup Iteration  14: 17883835.322 ops/s
# Warmup Iteration  15: 17888596.934 ops/s
# Warmup Iteration  16: 17931897.635 ops/s
# Warmup Iteration  17: 17908967.849 ops/s
# Warmup Iteration  18: 17953055.576 ops/s
# Warmup Iteration  19: 17939195.436 ops/s
# Warmup Iteration  20: 17934084.691 ops/s
# Warmup Iteration  21: 17922758.567 ops/s
# Warmup Iteration  22: 17961449.930 ops/s
# Warmup Iteration  23: 17882111.488 ops/s
# Warmup Iteration  24: 17979044.090 ops/s
# Warmup Iteration  25: 17895966.267 ops/s
# Warmup Iteration  26: 17866904.452 ops/s
# Warmup Iteration  27: 17967311.073 ops/s
# Warmup Iteration  28: 17961999.513 ops/s
# Warmup Iteration  29: 17942488.991 ops/s
# Warmup Iteration  30: 17904060.312 ops/s
Iteration   1: 17947882.050 ops/s
Iteration   2: 17938325.555 ops/s
Iteration   3: 17909614.951 ops/s
Iteration   4: 18004577.745 ops/s
Iteration   5: 17919908.090 ops/s
Iteration   6: 17857006.174 ops/s
Iteration   7: 17965787.581 ops/s
Iteration   8: 17877975.629 ops/s
Iteration   9: 17923351.408 ops/s
Iteration  10: 17964377.516 ops/s
Iteration  11: 17939670.965 ops/s
Iteration  12: 17944332.721 ops/s
Iteration  13: 17923795.162 ops/s
Iteration  14: 17670920.665 ops/s
Iteration  15: 17864735.644 ops/s
Iteration  16: 17978597.274 ops/s
Iteration  17: 17941649.862 ops/s
Iteration  18: 17873442.227 ops/s
Iteration  19: 17974004.195 ops/s
Iteration  20: 17951848.998 ops/s
Iteration  21: 17913203.464 ops/s
Iteration  22: 17909306.159 ops/s
Iteration  23: 17899149.114 ops/s
Iteration  24: 17904532.908 ops/s
Iteration  25: 17937432.444 ops/s
Iteration  26: 17950758.419 ops/s
Iteration  27: 17967520.344 ops/s
Iteration  28: 17868273.205 ops/s
Iteration  29: 17906844.004 ops/s
Iteration  30: 17715742.478 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_injectInto":
  17911485.565 ±(99.9%) 46588.592 ops/s [Average]
  (min, avg, max) = (17670920.665, 17911485.565, 18004577.745), stdev = 69731.616
  CI (99.9%): [17864896.973, 17958074.157] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt         Score       Error  Units
SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_injectInto  thrpt   30  17911485.565 ± 46588.592  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 824540.751 ops/s
# Warmup Iteration   2: 1660065.456 ops/s
# Warmup Iteration   3: 1936097.493 ops/s
# Warmup Iteration   4: 2273694.224 ops/s
# Warmup Iteration   5: 2258831.763 ops/s
# Warmup Iteration   6: 2270410.542 ops/s
# Warmup Iteration   7: 2271362.389 ops/s
# Warmup Iteration   8: 2263135.924 ops/s
# Warmup Iteration   9: 2264190.222 ops/s
# Warmup Iteration  10: 2259738.734 ops/s
# Warmup Iteration  11: 2265295.702 ops/s
# Warmup Iteration  12: 2276256.833 ops/s
# Warmup Iteration  13: 2263693.710 ops/s
# Warmup Iteration  14: 2257264.990 ops/s
# Warmup Iteration  15: 2266280.328 ops/s
# Warmup Iteration  16: 2259261.254 ops/s
# Warmup Iteration  17: 2264094.447 ops/s
# Warmup Iteration  18: 2272063.244 ops/s
# Warmup Iteration  19: 2265722.554 ops/s
# Warmup Iteration  20: 2277064.286 ops/s
# Warmup Iteration  21: 2260486.324 ops/s
# Warmup Iteration  22: 2275221.264 ops/s
# Warmup Iteration  23: 2285442.992 ops/s
# Warmup Iteration  24: 2288526.284 ops/s
# Warmup Iteration  25: 2255197.054 ops/s
# Warmup Iteration  26: 2271450.088 ops/s
# Warmup Iteration  27: 2271187.673 ops/s
# Warmup Iteration  28: 2273383.592 ops/s
# Warmup Iteration  29: 2268747.506 ops/s
# Warmup Iteration  30: 2267701.886 ops/s
Iteration   1: 2277863.142 ops/s
Iteration   2: 2285612.446 ops/s
Iteration   3: 2273299.497 ops/s
Iteration   4: 2279060.788 ops/s
Iteration   5: 2267456.898 ops/s
Iteration   6: 2273793.526 ops/s
Iteration   7: 2276197.902 ops/s
Iteration   8: 2268703.430 ops/s
Iteration   9: 2282513.577 ops/s
Iteration  10: 2263756.376 ops/s
Iteration  11: 2269672.121 ops/s
Iteration  12: 2238778.392 ops/s
Iteration  13: 2273057.944 ops/s
Iteration  14: 2274259.217 ops/s
Iteration  15: 2266924.549 ops/s
Iteration  16: 2263320.972 ops/s
Iteration  17: 2267935.137 ops/s
Iteration  18: 2239990.331 ops/s
Iteration  19: 2275755.868 ops/s
Iteration  20: 2277183.691 ops/s
Iteration  21: 2270765.805 ops/s
Iteration  22: 2237381.029 ops/s
Iteration  23: 2271913.034 ops/s
Iteration  24: 2270448.116 ops/s
Iteration  25: 2274463.860 ops/s
Iteration  26: 2261457.950 ops/s
Iteration  27: 2254398.134 ops/s
Iteration  28: 2278901.039 ops/s
Iteration  29: 2282232.798 ops/s
Iteration  30: 2272458.831 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_isEmpty":
  2268985.213 ±(99.9%) 8144.876 ops/s [Average]
  (min, avg, max) = (2237381.029, 2268985.213, 2285612.446), stdev = 12190.867
  CI (99.9%): [2260840.338, 2277130.089] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_isEmpty  thrpt   30  2268985.213 ± 8144.876  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_iterator_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_iterator_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 667472.674 ops/s
# Warmup Iteration   2: 685099.081 ops/s
# Warmup Iteration   3: 879535.792 ops/s
# Warmup Iteration   4: 903250.128 ops/s
# Warmup Iteration   5: 907212.526 ops/s
# Warmup Iteration   6: 902792.427 ops/s
# Warmup Iteration   7: 903527.402 ops/s
# Warmup Iteration   8: 905117.037 ops/s
# Warmup Iteration   9: 902548.342 ops/s
# Warmup Iteration  10: 904862.848 ops/s
# Warmup Iteration  11: 903245.586 ops/s
# Warmup Iteration  12: 782732.749 ops/s
# Warmup Iteration  13: 870671.653 ops/s
# Warmup Iteration  14: 905050.917 ops/s
# Warmup Iteration  15: 901343.744 ops/s
# Warmup Iteration  16: 905664.810 ops/s
# Warmup Iteration  17: 953724.079 ops/s
# Warmup Iteration  18: 953066.563 ops/s
# Warmup Iteration  19: 955010.751 ops/s
# Warmup Iteration  20: 956935.828 ops/s
# Warmup Iteration  21: 954897.037 ops/s
# Warmup Iteration  22: 955064.661 ops/s
# Warmup Iteration  23: 947525.914 ops/s
# Warmup Iteration  24: 955262.858 ops/s
# Warmup Iteration  25: 952490.658 ops/s
# Warmup Iteration  26: 953478.120 ops/s
# Warmup Iteration  27: 952075.685 ops/s
# Warmup Iteration  28: 953777.942 ops/s
# Warmup Iteration  29: 952483.130 ops/s
# Warmup Iteration  30: 953283.380 ops/s
Iteration   1: 953715.187 ops/s
Iteration   2: 955106.338 ops/s
Iteration   3: 955236.145 ops/s
Iteration   4: 954133.222 ops/s
Iteration   5: 952035.002 ops/s
Iteration   6: 954463.382 ops/s
Iteration   7: 955305.217 ops/s
Iteration   8: 950781.934 ops/s
Iteration   9: 951555.679 ops/s
Iteration  10: 953121.534 ops/s
Iteration  11: 953287.814 ops/s
Iteration  12: 938860.733 ops/s
Iteration  13: 950279.806 ops/s
Iteration  14: 954418.267 ops/s
Iteration  15: 953575.481 ops/s
Iteration  16: 952628.663 ops/s
Iteration  17: 951257.514 ops/s
Iteration  18: 953717.631 ops/s
Iteration  19: 939993.751 ops/s
Iteration  20: 954572.185 ops/s
Iteration  21: 951527.930 ops/s
Iteration  22: 955069.317 ops/s
Iteration  23: 954217.842 ops/s
Iteration  24: 954152.771 ops/s
Iteration  25: 951945.020 ops/s
Iteration  26: 954423.444 ops/s
Iteration  27: 955474.862 ops/s
Iteration  28: 951677.240 ops/s
Iteration  29: 948315.745 ops/s
Iteration  30: 956215.963 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_iterator_throws":
  952368.854 ±(99.9%) 2638.591 ops/s [Average]
  (min, avg, max) = (938860.733, 952368.854, 956215.963), stdev = 3949.319
  CI (99.9%): [949730.263, 955007.445] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_iterator_throws  thrpt   30  952368.854 ± 2638.591  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 729812.495 ops/s
# Warmup Iteration   2: 762799.846 ops/s
# Warmup Iteration   3: 1020960.975 ops/s
# Warmup Iteration   4: 1009922.962 ops/s
# Warmup Iteration   5: 1016050.120 ops/s
# Warmup Iteration   6: 1013806.307 ops/s
# Warmup Iteration   7: 1015258.264 ops/s
# Warmup Iteration   8: 1016933.445 ops/s
# Warmup Iteration   9: 1009871.062 ops/s
# Warmup Iteration  10: 1016365.122 ops/s
# Warmup Iteration  11: 840910.466 ops/s
# Warmup Iteration  12: 1011071.689 ops/s
# Warmup Iteration  13: 1011634.048 ops/s
# Warmup Iteration  14: 1014555.023 ops/s
# Warmup Iteration  15: 1013117.993 ops/s
# Warmup Iteration  16: 1016795.457 ops/s
# Warmup Iteration  17: 1076316.170 ops/s
# Warmup Iteration  18: 1074926.419 ops/s
# Warmup Iteration  19: 1073084.300 ops/s
# Warmup Iteration  20: 1073834.848 ops/s
# Warmup Iteration  21: 1072065.716 ops/s
# Warmup Iteration  22: 1075574.071 ops/s
# Warmup Iteration  23: 1074580.028 ops/s
# Warmup Iteration  24: 1078043.743 ops/s
# Warmup Iteration  25: 1073986.564 ops/s
# Warmup Iteration  26: 1077307.972 ops/s
# Warmup Iteration  27: 1072362.948 ops/s
# Warmup Iteration  28: 1075162.684 ops/s
# Warmup Iteration  29: 1076036.765 ops/s
# Warmup Iteration  30: 1076701.844 ops/s
Iteration   1: 1076097.585 ops/s
Iteration   2: 1073316.365 ops/s
Iteration   3: 1073339.947 ops/s
Iteration   4: 1074737.309 ops/s
Iteration   5: 1073680.201 ops/s
Iteration   6: 1070356.637 ops/s
Iteration   7: 1073626.456 ops/s
Iteration   8: 1076893.097 ops/s
Iteration   9: 1074815.353 ops/s
Iteration  10: 1075775.358 ops/s
Iteration  11: 1075977.078 ops/s
Iteration  12: 1072701.436 ops/s
Iteration  13: 1070060.621 ops/s
Iteration  14: 1078363.318 ops/s
Iteration  15: 1073469.949 ops/s
Iteration  16: 1076388.060 ops/s
Iteration  17: 1079029.994 ops/s
Iteration  18: 1072227.857 ops/s
Iteration  19: 1074908.465 ops/s
Iteration  20: 1070767.934 ops/s
Iteration  21: 1067389.516 ops/s
Iteration  22: 1075427.044 ops/s
Iteration  23: 1074323.173 ops/s
Iteration  24: 1074692.825 ops/s
Iteration  25: 1070464.789 ops/s
Iteration  26: 1075196.424 ops/s
Iteration  27: 1075516.283 ops/s
Iteration  28: 1075173.509 ops/s
Iteration  29: 1075148.491 ops/s
Iteration  30: 1077486.607 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList":
  1074245.056 ±(99.9%) 1723.558 ops/s [Average]
  (min, avg, max) = (1067389.516, 1074245.056, 1079029.994), stdev = 2579.741
  CI (99.9%): [1072521.498, 1075968.614] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt        Score      Error  Units
SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList  thrpt   30  1074245.056 ± 1723.558  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 655445.609 ops/s
# Warmup Iteration   2: 669626.805 ops/s
# Warmup Iteration   3: 880454.416 ops/s
# Warmup Iteration   4: 882728.430 ops/s
# Warmup Iteration   5: 883733.454 ops/s
# Warmup Iteration   6: 883468.704 ops/s
# Warmup Iteration   7: 880243.160 ops/s
# Warmup Iteration   8: 884700.637 ops/s
# Warmup Iteration   9: 875739.774 ops/s
# Warmup Iteration  10: 883439.558 ops/s
# Warmup Iteration  11: 887142.930 ops/s
# Warmup Iteration  12: 732662.003 ops/s
# Warmup Iteration  13: 885482.979 ops/s
# Warmup Iteration  14: 885198.318 ops/s
# Warmup Iteration  15: 881223.605 ops/s
# Warmup Iteration  16: 884195.968 ops/s
# Warmup Iteration  17: 938532.342 ops/s
# Warmup Iteration  18: 927220.585 ops/s
# Warmup Iteration  19: 937773.326 ops/s
# Warmup Iteration  20: 934396.909 ops/s
# Warmup Iteration  21: 937310.130 ops/s
# Warmup Iteration  22: 932529.625 ops/s
# Warmup Iteration  23: 930916.753 ops/s
# Warmup Iteration  24: 938279.231 ops/s
# Warmup Iteration  25: 934743.667 ops/s
# Warmup Iteration  26: 933274.202 ops/s
# Warmup Iteration  27: 934331.463 ops/s
# Warmup Iteration  28: 934204.165 ops/s
# Warmup Iteration  29: 935682.429 ops/s
# Warmup Iteration  30: 928398.392 ops/s
Iteration   1: 936495.139 ops/s
Iteration   2: 937181.424 ops/s
Iteration   3: 933994.090 ops/s
Iteration   4: 934279.325 ops/s
Iteration   5: 938570.015 ops/s
Iteration   6: 937795.321 ops/s
Iteration   7: 934688.340 ops/s
Iteration   8: 938075.099 ops/s
Iteration   9: 938265.064 ops/s
Iteration  10: 933012.389 ops/s
Iteration  11: 933539.230 ops/s
Iteration  12: 936798.848 ops/s
Iteration  13: 932827.752 ops/s
Iteration  14: 938646.696 ops/s
Iteration  15: 937172.408 ops/s
Iteration  16: 936733.992 ops/s
Iteration  17: 936503.849 ops/s
Iteration  18: 933045.878 ops/s
Iteration  19: 936254.421 ops/s
Iteration  20: 937745.188 ops/s
Iteration  21: 935656.281 ops/s
Iteration  22: 936604.048 ops/s
Iteration  23: 937560.601 ops/s
Iteration  24: 935936.311 ops/s
Iteration  25: 934565.747 ops/s
Iteration  26: 935654.112 ops/s
Iteration  27: 931011.519 ops/s
Iteration  28: 931498.946 ops/s
Iteration  29: 938415.029 ops/s
Iteration  30: 932777.802 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection":
  935710.162 ±(99.9%) 1469.224 ops/s [Average]
  (min, avg, max) = (931011.519, 935710.162, 938646.696), stdev = 2199.066
  CI (99.9%): [934240.938, 937179.386] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                         Mode  Cnt       Score      Error  Units
SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection  thrpt   30  935710.162 ± 1469.224  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 721798.517 ops/s
# Warmup Iteration   2: 787842.634 ops/s
# Warmup Iteration   3: 1020806.363 ops/s
# Warmup Iteration   4: 1017679.180 ops/s
# Warmup Iteration   5: 1008395.858 ops/s
# Warmup Iteration   6: 1012126.578 ops/s
# Warmup Iteration   7: 1017747.750 ops/s
# Warmup Iteration   8: 1015365.636 ops/s
# Warmup Iteration   9: 1018981.890 ops/s
# Warmup Iteration  10: 938659.859 ops/s
# Warmup Iteration  11: 921654.604 ops/s
# Warmup Iteration  12: 1005251.038 ops/s
# Warmup Iteration  13: 1013232.311 ops/s
# Warmup Iteration  14: 1014754.955 ops/s
# Warmup Iteration  15: 1014083.779 ops/s
# Warmup Iteration  16: 1011842.981 ops/s
# Warmup Iteration  17: 1082549.170 ops/s
# Warmup Iteration  18: 1080297.378 ops/s
# Warmup Iteration  19: 1078211.320 ops/s
# Warmup Iteration  20: 1082522.971 ops/s
# Warmup Iteration  21: 1082947.951 ops/s
# Warmup Iteration  22: 1080468.341 ops/s
# Warmup Iteration  23: 1082288.231 ops/s
# Warmup Iteration  24: 1080713.907 ops/s
# Warmup Iteration  25: 1082502.185 ops/s
# Warmup Iteration  26: 1080416.079 ops/s
# Warmup Iteration  27: 1081975.933 ops/s
# Warmup Iteration  28: 1079483.082 ops/s
# Warmup Iteration  29: 1083127.426 ops/s
# Warmup Iteration  30: 1084914.665 ops/s
Iteration   1: 1083454.919 ops/s
Iteration   2: 1080795.798 ops/s
Iteration   3: 1083501.910 ops/s
Iteration   4: 1084508.556 ops/s
Iteration   5: 1083364.671 ops/s
Iteration   6: 1084993.811 ops/s
Iteration   7: 1081394.209 ops/s
Iteration   8: 1084523.752 ops/s
Iteration   9: 1083850.367 ops/s
Iteration  10: 1081364.340 ops/s
Iteration  11: 1081522.862 ops/s
Iteration  12: 1081180.353 ops/s
Iteration  13: 1084274.366 ops/s
Iteration  14: 1082660.427 ops/s
Iteration  15: 1083166.639 ops/s
Iteration  16: 1082731.320 ops/s
Iteration  17: 1083219.599 ops/s
Iteration  18: 1084085.718 ops/s
Iteration  19: 1078521.402 ops/s
Iteration  20: 1080341.932 ops/s
Iteration  21: 1078980.498 ops/s
Iteration  22: 1081772.258 ops/s
Iteration  23: 1080689.371 ops/s
Iteration  24: 1082671.144 ops/s
Iteration  25: 1075628.790 ops/s
Iteration  26: 1082256.195 ops/s
Iteration  27: 1065948.597 ops/s
Iteration  28: 1083587.575 ops/s
Iteration  29: 1082673.355 ops/s
Iteration  30: 1085678.438 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove":
  1081778.106 ±(99.9%) 2441.497 ops/s [Average]
  (min, avg, max) = (1065948.597, 1081778.106, 1085678.438), stdev = 3654.318
  CI (99.9%): [1079336.609, 1084219.603] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                        Mode  Cnt        Score      Error  Units
SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove  thrpt   30  1081778.106 ± 2441.497  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 724736.226 ops/s
# Warmup Iteration   2: 794058.294 ops/s
# Warmup Iteration   3: 1019124.901 ops/s
# Warmup Iteration   4: 1015754.824 ops/s
# Warmup Iteration   5: 1003037.212 ops/s
# Warmup Iteration   6: 1006031.917 ops/s
# Warmup Iteration   7: 1017486.220 ops/s
# Warmup Iteration   8: 1006085.041 ops/s
# Warmup Iteration   9: 1012725.003 ops/s
# Warmup Iteration  10: 947130.162 ops/s
# Warmup Iteration  11: 922080.812 ops/s
# Warmup Iteration  12: 1018709.536 ops/s
# Warmup Iteration  13: 1018430.349 ops/s
# Warmup Iteration  14: 1010156.949 ops/s
# Warmup Iteration  15: 1018682.620 ops/s
# Warmup Iteration  16: 1017416.538 ops/s
# Warmup Iteration  17: 1079189.546 ops/s
# Warmup Iteration  18: 1079919.493 ops/s
# Warmup Iteration  19: 1079317.712 ops/s
# Warmup Iteration  20: 1078364.369 ops/s
# Warmup Iteration  21: 1079386.272 ops/s
# Warmup Iteration  22: 1078838.349 ops/s
# Warmup Iteration  23: 1079410.354 ops/s
# Warmup Iteration  24: 1074176.342 ops/s
# Warmup Iteration  25: 1075022.625 ops/s
# Warmup Iteration  26: 1077636.429 ops/s
# Warmup Iteration  27: 1078370.876 ops/s
# Warmup Iteration  28: 1078692.994 ops/s
# Warmup Iteration  29: 1081462.301 ops/s
# Warmup Iteration  30: 1081350.335 ops/s
Iteration   1: 1078078.971 ops/s
Iteration   2: 1077758.291 ops/s
Iteration   3: 1081697.589 ops/s
Iteration   4: 1080827.506 ops/s
Iteration   5: 1080347.171 ops/s
Iteration   6: 1080945.572 ops/s
Iteration   7: 1077576.420 ops/s
Iteration   8: 1076210.869 ops/s
Iteration   9: 1080289.644 ops/s
Iteration  10: 1081175.149 ops/s
Iteration  11: 1080953.872 ops/s
Iteration  12: 1078853.729 ops/s
Iteration  13: 1058871.357 ops/s
Iteration  14: 1079799.570 ops/s
Iteration  15: 1070588.787 ops/s
Iteration  16: 1082035.045 ops/s
Iteration  17: 1063651.904 ops/s
Iteration  18: 1079143.152 ops/s
Iteration  19: 1078172.775 ops/s
Iteration  20: 1081271.750 ops/s
Iteration  21: 1079141.575 ops/s
Iteration  22: 1079389.971 ops/s
Iteration  23: 1081887.944 ops/s
Iteration  24: 1075327.205 ops/s
Iteration  25: 1078477.382 ops/s
Iteration  26: 1083023.588 ops/s
Iteration  27: 1079404.455 ops/s
Iteration  28: 1082257.449 ops/s
Iteration  29: 1078459.519 ops/s
Iteration  30: 1080926.853 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next":
  1078218.169 ±(99.9%) 3510.731 ops/s [Average]
  (min, avg, max) = (1058871.357, 1078218.169, 1083023.588), stdev = 5254.697
  CI (99.9%): [1074707.438, 1081728.900] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                        Mode  Cnt        Score      Error  Units
SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next  thrpt   30  1078218.169 ± 3510.731  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 667389.005 ops/s
# Warmup Iteration   2: 1368611.954 ops/s
# Warmup Iteration   3: 1352465.709 ops/s
# Warmup Iteration   4: 1480204.894 ops/s
# Warmup Iteration   5: 1526277.212 ops/s
# Warmup Iteration   6: 1532344.762 ops/s
# Warmup Iteration   7: 1544821.247 ops/s
# Warmup Iteration   8: 1531782.736 ops/s
# Warmup Iteration   9: 1540413.387 ops/s
# Warmup Iteration  10: 1524585.045 ops/s
# Warmup Iteration  11: 1531430.090 ops/s
# Warmup Iteration  12: 1542259.069 ops/s
# Warmup Iteration  13: 1538616.788 ops/s
# Warmup Iteration  14: 1546387.036 ops/s
# Warmup Iteration  15: 1542518.856 ops/s
# Warmup Iteration  16: 1540410.060 ops/s
# Warmup Iteration  17: 1537962.504 ops/s
# Warmup Iteration  18: 1538069.392 ops/s
# Warmup Iteration  19: 1539561.471 ops/s
# Warmup Iteration  20: 1538751.640 ops/s
# Warmup Iteration  21: 1546969.804 ops/s
# Warmup Iteration  22: 1532350.190 ops/s
# Warmup Iteration  23: 1533238.085 ops/s
# Warmup Iteration  24: 1537496.627 ops/s
# Warmup Iteration  25: 1538452.406 ops/s
# Warmup Iteration  26: 1538778.277 ops/s
# Warmup Iteration  27: 1524471.323 ops/s
# Warmup Iteration  28: 1536263.221 ops/s
# Warmup Iteration  29: 1535465.351 ops/s
# Warmup Iteration  30: 1533990.814 ops/s
Iteration   1: 1544292.657 ops/s
Iteration   2: 1534949.904 ops/s
Iteration   3: 1533959.023 ops/s
Iteration   4: 1544080.247 ops/s
Iteration   5: 1531224.828 ops/s
Iteration   6: 1534078.201 ops/s
Iteration   7: 1537438.726 ops/s
Iteration   8: 1542802.552 ops/s
Iteration   9: 1531367.860 ops/s
Iteration  10: 1534257.870 ops/s
Iteration  11: 1533625.387 ops/s
Iteration  12: 1531005.985 ops/s
Iteration  13: 1535037.979 ops/s
Iteration  14: 1527024.880 ops/s
Iteration  15: 1517985.447 ops/s
Iteration  16: 1545629.397 ops/s
Iteration  17: 1528325.586 ops/s
Iteration  18: 1530374.629 ops/s
Iteration  19: 1541028.760 ops/s
Iteration  20: 1532892.375 ops/s
Iteration  21: 1537363.602 ops/s
Iteration  22: 1538846.189 ops/s
Iteration  23: 1533918.462 ops/s
Iteration  24: 1534708.244 ops/s
Iteration  25: 1528253.558 ops/s
Iteration  26: 1542844.544 ops/s
Iteration  27: 1545778.867 ops/s
Iteration  28: 1540258.249 ops/s
Iteration  29: 1529730.815 ops/s
Iteration  30: 1512766.515 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_makeString":
  1534528.378 ±(99.9%) 5030.629 ops/s [Average]
  (min, avg, max) = (1512766.515, 1534528.378, 1545778.867), stdev = 7529.610
  CI (99.9%): [1529497.748, 1539559.007] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_makeString  thrpt   30  1534528.378 ± 5030.629  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_newCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_newCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 170775475.182 ops/s
# Warmup Iteration   2: 297683519.033 ops/s
# Warmup Iteration   3: 279990294.285 ops/s
# Warmup Iteration   4: 314203501.388 ops/s
# Warmup Iteration   5: 315338485.683 ops/s
# Warmup Iteration   6: 314431805.485 ops/s
# Warmup Iteration   7: 313051806.608 ops/s
# Warmup Iteration   8: 314861419.691 ops/s
# Warmup Iteration   9: 314570293.986 ops/s
# Warmup Iteration  10: 314796345.929 ops/s
# Warmup Iteration  11: 315210521.192 ops/s
# Warmup Iteration  12: 313067028.574 ops/s
# Warmup Iteration  13: 314447708.245 ops/s
# Warmup Iteration  14: 315223839.205 ops/s
# Warmup Iteration  15: 317658211.313 ops/s
# Warmup Iteration  16: 314745297.879 ops/s
# Warmup Iteration  17: 314593283.810 ops/s
# Warmup Iteration  18: 315303878.532 ops/s
# Warmup Iteration  19: 314302900.157 ops/s
# Warmup Iteration  20: 314575931.276 ops/s
# Warmup Iteration  21: 315472945.607 ops/s
# Warmup Iteration  22: 312383978.754 ops/s
# Warmup Iteration  23: 314237501.472 ops/s
# Warmup Iteration  24: 314963968.729 ops/s
# Warmup Iteration  25: 314918841.947 ops/s
# Warmup Iteration  26: 313624129.107 ops/s
# Warmup Iteration  27: 314210635.880 ops/s
# Warmup Iteration  28: 315012221.168 ops/s
# Warmup Iteration  29: 315444541.829 ops/s
# Warmup Iteration  30: 313878561.753 ops/s
Iteration   1: 316283889.328 ops/s
Iteration   2: 313126593.954 ops/s
Iteration   3: 315174790.662 ops/s
Iteration   4: 314721251.825 ops/s
Iteration   5: 315142677.936 ops/s
Iteration   6: 314834057.301 ops/s
Iteration   7: 315069126.607 ops/s
Iteration   8: 315554690.135 ops/s
Iteration   9: 316353357.539 ops/s
Iteration  10: 316023253.338 ops/s
Iteration  11: 314590722.989 ops/s
Iteration  12: 312680783.200 ops/s
Iteration  13: 314505016.649 ops/s
Iteration  14: 315580784.247 ops/s
Iteration  15: 315731505.912 ops/s
Iteration  16: 314127670.335 ops/s
Iteration  17: 313952083.591 ops/s
Iteration  18: 314767861.473 ops/s
Iteration  19: 314419717.809 ops/s
Iteration  20: 313675108.078 ops/s
Iteration  21: 312835227.152 ops/s
Iteration  22: 313398484.055 ops/s
Iteration  23: 313826931.897 ops/s
Iteration  24: 315667740.264 ops/s
Iteration  25: 309445947.695 ops/s
Iteration  26: 315450986.452 ops/s
Iteration  27: 313833478.725 ops/s
Iteration  28: 314365494.314 ops/s
Iteration  29: 315150172.500 ops/s
Iteration  30: 315695370.101 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_newCollection":
  314532825.869 ±(99.9%) 920259.978 ops/s [Average]
  (min, avg, max) = (309445947.695, 314532825.869, 316353357.539), stdev = 1377401.917
  CI (99.9%): [313612565.890, 315453085.847] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt          Score        Error  Units
SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_newCollection  thrpt   30  314532825.869 ± 920259.978  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_newCollectionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_newCollectionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1238491.001 ops/s
# Warmup Iteration   2: 2901941.262 ops/s
# Warmup Iteration   3: 4538283.502 ops/s
# Warmup Iteration   4: 5396846.852 ops/s
# Warmup Iteration   5: 5403494.176 ops/s
# Warmup Iteration   6: 5403546.819 ops/s
# Warmup Iteration   7: 5391808.484 ops/s
# Warmup Iteration   8: 5397566.401 ops/s
# Warmup Iteration   9: 5407169.413 ops/s
# Warmup Iteration  10: 5393947.163 ops/s
# Warmup Iteration  11: 5403111.590 ops/s
# Warmup Iteration  12: 5409283.937 ops/s
# Warmup Iteration  13: 5400775.296 ops/s
# Warmup Iteration  14: 5423518.397 ops/s
# Warmup Iteration  15: 5410180.046 ops/s
# Warmup Iteration  16: 5409426.161 ops/s
# Warmup Iteration  17: 5410239.067 ops/s
# Warmup Iteration  18: 5399926.287 ops/s
# Warmup Iteration  19: 5415676.933 ops/s
# Warmup Iteration  20: 5387876.942 ops/s
# Warmup Iteration  21: 5406324.246 ops/s
# Warmup Iteration  22: 5414871.806 ops/s
# Warmup Iteration  23: 5396699.461 ops/s
# Warmup Iteration  24: 5393965.951 ops/s
# Warmup Iteration  25: 5400202.323 ops/s
# Warmup Iteration  26: 5398616.256 ops/s
# Warmup Iteration  27: 5398531.458 ops/s
# Warmup Iteration  28: 5421767.612 ops/s
# Warmup Iteration  29: 5245024.469 ops/s
# Warmup Iteration  30: 5415313.550 ops/s
Iteration   1: 5410803.633 ops/s
Iteration   2: 5388403.560 ops/s
Iteration   3: 5409394.956 ops/s
Iteration   4: 5408651.947 ops/s
Iteration   5: 5384281.581 ops/s
Iteration   6: 5411427.000 ops/s
Iteration   7: 5384994.234 ops/s
Iteration   8: 5321948.620 ops/s
Iteration   9: 5397075.006 ops/s
Iteration  10: 5426149.794 ops/s
Iteration  11: 5408200.376 ops/s
Iteration  12: 5426257.492 ops/s
Iteration  13: 5406346.492 ops/s
Iteration  14: 5411624.051 ops/s
Iteration  15: 5397510.282 ops/s
Iteration  16: 5406945.985 ops/s
Iteration  17: 5406222.058 ops/s
Iteration  18: 5400134.689 ops/s
Iteration  19: 5379105.367 ops/s
Iteration  20: 5399351.166 ops/s
Iteration  21: 5316220.442 ops/s
Iteration  22: 5380293.640 ops/s
Iteration  23: 5400127.645 ops/s
Iteration  24: 5381553.387 ops/s
Iteration  25: 5381612.723 ops/s
Iteration  26: 5417405.110 ops/s
Iteration  27: 5395315.410 ops/s
Iteration  28: 5390296.457 ops/s
Iteration  29: 5397703.515 ops/s
Iteration  30: 5393991.419 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_newCollectionWith":
  5394644.935 ±(99.9%) 16152.188 ops/s [Average]
  (min, avg, max) = (5316220.442, 5394644.935, 5426257.492), stdev = 24175.837
  CI (99.9%): [5378492.746, 5410797.123] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_newCollectionWith  thrpt   30  5394644.935 ± 16152.188  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 973389.831 ops/s
# Warmup Iteration   2: 2133587.953 ops/s
# Warmup Iteration   3: 2252910.753 ops/s
# Warmup Iteration   4: 2666974.206 ops/s
# Warmup Iteration   5: 2693117.338 ops/s
# Warmup Iteration   6: 2676455.801 ops/s
# Warmup Iteration   7: 2691797.217 ops/s
# Warmup Iteration   8: 2692557.689 ops/s
# Warmup Iteration   9: 2685934.188 ops/s
# Warmup Iteration  10: 2684401.357 ops/s
# Warmup Iteration  11: 2693105.185 ops/s
# Warmup Iteration  12: 2685103.431 ops/s
# Warmup Iteration  13: 2685976.613 ops/s
# Warmup Iteration  14: 2688275.174 ops/s
# Warmup Iteration  15: 2674048.028 ops/s
# Warmup Iteration  16: 2688168.739 ops/s
# Warmup Iteration  17: 2689391.442 ops/s
# Warmup Iteration  18: 2685928.499 ops/s
# Warmup Iteration  19: 2684188.806 ops/s
# Warmup Iteration  20: 2678099.582 ops/s
# Warmup Iteration  21: 2685617.766 ops/s
# Warmup Iteration  22: 2689481.558 ops/s
# Warmup Iteration  23: 2696009.960 ops/s
# Warmup Iteration  24: 2686734.252 ops/s
# Warmup Iteration  25: 2661447.843 ops/s
# Warmup Iteration  26: 2668341.532 ops/s
# Warmup Iteration  27: 2665234.922 ops/s
# Warmup Iteration  28: 2687028.423 ops/s
# Warmup Iteration  29: 2657169.137 ops/s
# Warmup Iteration  30: 2687151.946 ops/s
Iteration   1: 2687426.697 ops/s
Iteration   2: 2686098.847 ops/s
Iteration   3: 2679394.153 ops/s
Iteration   4: 2676083.004 ops/s
Iteration   5: 2679883.023 ops/s
Iteration   6: 2689261.577 ops/s
Iteration   7: 2691526.353 ops/s
Iteration   8: 2683488.171 ops/s
Iteration   9: 2693386.063 ops/s
Iteration  10: 2678479.075 ops/s
Iteration  11: 2675144.503 ops/s
Iteration  12: 2689128.404 ops/s
Iteration  13: 2693862.576 ops/s
Iteration  14: 2684086.036 ops/s
Iteration  15: 2696661.369 ops/s
Iteration  16: 2677922.982 ops/s
Iteration  17: 2684645.546 ops/s
Iteration  18: 2644349.512 ops/s
Iteration  19: 2691654.749 ops/s
Iteration  20: 2688831.954 ops/s
Iteration  21: 2693323.660 ops/s
Iteration  22: 2681804.919 ops/s
Iteration  23: 2691207.250 ops/s
Iteration  24: 2688355.323 ops/s
Iteration  25: 2687874.371 ops/s
Iteration  26: 2687466.021 ops/s
Iteration  27: 2677542.328 ops/s
Iteration  28: 2689637.469 ops/s
Iteration  29: 2679665.151 ops/s
Iteration  30: 2690456.981 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_noneSatisfy":
  2684621.602 ±(99.9%) 6429.872 ops/s [Average]
  (min, avg, max) = (2644349.512, 2684621.602, 2696661.369), stdev = 9623.930
  CI (99.9%): [2678191.731, 2691051.474] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_noneSatisfy  thrpt   30  2684621.602 ± 6429.872  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_notEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_notEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2101218.120 ops/s
# Warmup Iteration   2: 4562537.079 ops/s
# Warmup Iteration   3: 5924128.561 ops/s
# Warmup Iteration   4: 6961580.956 ops/s
# Warmup Iteration   5: 6970297.958 ops/s
# Warmup Iteration   6: 6985821.975 ops/s
# Warmup Iteration   7: 6967560.588 ops/s
# Warmup Iteration   8: 6959591.922 ops/s
# Warmup Iteration   9: 6959632.901 ops/s
# Warmup Iteration  10: 6957162.037 ops/s
# Warmup Iteration  11: 6945220.814 ops/s
# Warmup Iteration  12: 6968432.419 ops/s
# Warmup Iteration  13: 6934695.043 ops/s
# Warmup Iteration  14: 6900862.266 ops/s
# Warmup Iteration  15: 6971932.951 ops/s
# Warmup Iteration  16: 6969012.635 ops/s
# Warmup Iteration  17: 6964848.142 ops/s
# Warmup Iteration  18: 6890687.805 ops/s
# Warmup Iteration  19: 6972664.308 ops/s
# Warmup Iteration  20: 6986245.284 ops/s
# Warmup Iteration  21: 7000095.936 ops/s
# Warmup Iteration  22: 6966173.886 ops/s
# Warmup Iteration  23: 6979534.721 ops/s
# Warmup Iteration  24: 6990393.216 ops/s
# Warmup Iteration  25: 6976183.028 ops/s
# Warmup Iteration  26: 6992259.324 ops/s
# Warmup Iteration  27: 6950201.675 ops/s
# Warmup Iteration  28: 6989060.618 ops/s
# Warmup Iteration  29: 6972135.820 ops/s
# Warmup Iteration  30: 6975969.902 ops/s
Iteration   1: 6992242.593 ops/s
Iteration   2: 6948874.813 ops/s
Iteration   3: 7001571.848 ops/s
Iteration   4: 6974311.610 ops/s
Iteration   5: 6980420.823 ops/s
Iteration   6: 6970679.709 ops/s
Iteration   7: 6985145.098 ops/s
Iteration   8: 7002036.279 ops/s
Iteration   9: 6991411.349 ops/s
Iteration  10: 6963238.117 ops/s
Iteration  11: 6962208.558 ops/s
Iteration  12: 7001498.973 ops/s
Iteration  13: 6976424.576 ops/s
Iteration  14: 6991802.348 ops/s
Iteration  15: 6939924.009 ops/s
Iteration  16: 6960427.684 ops/s
Iteration  17: 6978813.942 ops/s
Iteration  18: 6986945.145 ops/s
Iteration  19: 7007227.587 ops/s
Iteration  20: 6862002.033 ops/s
Iteration  21: 6918121.099 ops/s
Iteration  22: 7006356.356 ops/s
Iteration  23: 7002266.573 ops/s
Iteration  24: 7009436.644 ops/s
Iteration  25: 6968563.144 ops/s
Iteration  26: 6971004.626 ops/s
Iteration  27: 6975000.002 ops/s
Iteration  28: 6972774.702 ops/s
Iteration  29: 6880648.100 ops/s
Iteration  30: 6979036.768 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_notEmpty":
  6972013.837 ±(99.9%) 23008.839 ops/s [Average]
  (min, avg, max) = (6862002.033, 6972013.837, 7009436.644), stdev = 34438.550
  CI (99.9%): [6949004.997, 6995022.676] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_notEmpty  thrpt   30  6972013.837 ± 23008.839  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_reduce$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_reduce

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1385383.422 ops/s
# Warmup Iteration   2: 2790909.601 ops/s
# Warmup Iteration   3: 2714219.029 ops/s
# Warmup Iteration   4: 3207675.606 ops/s
# Warmup Iteration   5: 3199905.103 ops/s
# Warmup Iteration   6: 3216677.338 ops/s
# Warmup Iteration   7: 3219085.427 ops/s
# Warmup Iteration   8: 3203719.900 ops/s
# Warmup Iteration   9: 3219482.496 ops/s
# Warmup Iteration  10: 3201523.273 ops/s
# Warmup Iteration  11: 3219198.163 ops/s
# Warmup Iteration  12: 3218518.146 ops/s
# Warmup Iteration  13: 3212058.053 ops/s
# Warmup Iteration  14: 3185666.777 ops/s
# Warmup Iteration  15: 3199436.000 ops/s
# Warmup Iteration  16: 3213018.850 ops/s
# Warmup Iteration  17: 3210250.712 ops/s
# Warmup Iteration  18: 3216432.710 ops/s
# Warmup Iteration  19: 3204688.328 ops/s
# Warmup Iteration  20: 3162417.997 ops/s
# Warmup Iteration  21: 3209253.130 ops/s
# Warmup Iteration  22: 3205682.879 ops/s
# Warmup Iteration  23: 3215115.939 ops/s
# Warmup Iteration  24: 3180323.515 ops/s
# Warmup Iteration  25: 3203851.456 ops/s
# Warmup Iteration  26: 3204465.721 ops/s
# Warmup Iteration  27: 3204787.054 ops/s
# Warmup Iteration  28: 3209797.919 ops/s
# Warmup Iteration  29: 3205793.556 ops/s
# Warmup Iteration  30: 3205189.462 ops/s
Iteration   1: 3208131.576 ops/s
Iteration   2: 3220365.546 ops/s
Iteration   3: 3205454.686 ops/s
Iteration   4: 3200949.284 ops/s
Iteration   5: 3216259.576 ops/s
Iteration   6: 3206165.681 ops/s
Iteration   7: 3220258.237 ops/s
Iteration   8: 3215963.537 ops/s
Iteration   9: 3202085.753 ops/s
Iteration  10: 3197756.144 ops/s
Iteration  11: 3211506.160 ops/s
Iteration  12: 3207152.939 ops/s
Iteration  13: 3213297.391 ops/s
Iteration  14: 3204020.798 ops/s
Iteration  15: 3210507.288 ops/s
Iteration  16: 3209681.454 ops/s
Iteration  17: 3220855.234 ops/s
Iteration  18: 3211078.924 ops/s
Iteration  19: 3184752.389 ops/s
Iteration  20: 3223881.613 ops/s
Iteration  21: 3192377.700 ops/s
Iteration  22: 3209874.479 ops/s
Iteration  23: 3216598.752 ops/s
Iteration  24: 3208134.417 ops/s
Iteration  25: 3213203.595 ops/s
Iteration  26: 3203055.818 ops/s
Iteration  27: 3213647.142 ops/s
Iteration  28: 3211618.824 ops/s
Iteration  29: 3215591.155 ops/s
Iteration  30: 3219096.701 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_reduce":
  3209777.426 ±(99.9%) 5781.706 ops/s [Average]
  (min, avg, max) = (3184752.389, 3209777.426, 3223881.613), stdev = 8653.786
  CI (99.9%): [3203995.720, 3215559.133] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_reduce  thrpt   30  3209777.426 ± 5781.706  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_reduceIfEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_reduceIfEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 986545.625 ops/s
# Warmup Iteration   2: 2006408.034 ops/s
# Warmup Iteration   3: 2055034.528 ops/s
# Warmup Iteration   4: 2424665.413 ops/s
# Warmup Iteration   5: 2421227.530 ops/s
# Warmup Iteration   6: 2417583.858 ops/s
# Warmup Iteration   7: 2417678.283 ops/s
# Warmup Iteration   8: 2420226.970 ops/s
# Warmup Iteration   9: 2419142.102 ops/s
# Warmup Iteration  10: 2405970.526 ops/s
# Warmup Iteration  11: 2414974.187 ops/s
# Warmup Iteration  12: 2400797.962 ops/s
# Warmup Iteration  13: 2420065.498 ops/s
# Warmup Iteration  14: 2416493.510 ops/s
# Warmup Iteration  15: 2398135.193 ops/s
# Warmup Iteration  16: 2416983.057 ops/s
# Warmup Iteration  17: 2422371.919 ops/s
# Warmup Iteration  18: 2421669.576 ops/s
# Warmup Iteration  19: 2422599.655 ops/s
# Warmup Iteration  20: 2423178.823 ops/s
# Warmup Iteration  21: 2425591.362 ops/s
# Warmup Iteration  22: 2423033.019 ops/s
# Warmup Iteration  23: 2419636.484 ops/s
# Warmup Iteration  24: 2430493.023 ops/s
# Warmup Iteration  25: 2423326.940 ops/s
# Warmup Iteration  26: 2428135.103 ops/s
# Warmup Iteration  27: 2418853.017 ops/s
# Warmup Iteration  28: 2416569.364 ops/s
# Warmup Iteration  29: 2418152.758 ops/s
# Warmup Iteration  30: 2424116.365 ops/s
Iteration   1: 2417758.981 ops/s
Iteration   2: 2427292.849 ops/s
Iteration   3: 2425754.428 ops/s
Iteration   4: 2431674.989 ops/s
Iteration   5: 2423939.073 ops/s
Iteration   6: 2421280.112 ops/s
Iteration   7: 2418277.647 ops/s
Iteration   8: 2425920.707 ops/s
Iteration   9: 2383402.464 ops/s
Iteration  10: 2422290.818 ops/s
Iteration  11: 2423996.616 ops/s
Iteration  12: 2424199.987 ops/s
Iteration  13: 2415530.644 ops/s
Iteration  14: 2403505.853 ops/s
Iteration  15: 2372416.828 ops/s
Iteration  16: 2429340.644 ops/s
Iteration  17: 2425842.854 ops/s
Iteration  18: 2420202.835 ops/s
Iteration  19: 2415161.728 ops/s
Iteration  20: 2419832.741 ops/s
Iteration  21: 2422665.244 ops/s
Iteration  22: 2416050.614 ops/s
Iteration  23: 2416127.880 ops/s
Iteration  24: 2421701.351 ops/s
Iteration  25: 2427388.774 ops/s
Iteration  26: 2429083.209 ops/s
Iteration  27: 2420010.989 ops/s
Iteration  28: 2416818.114 ops/s
Iteration  29: 2379347.279 ops/s
Iteration  30: 2421805.269 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_reduceIfEmpty":
  2417287.384 ±(99.9%) 9598.100 ops/s [Average]
  (min, avg, max) = (2372416.828, 2417287.384, 2431674.989), stdev = 14365.985
  CI (99.9%): [2407689.284, 2426885.484] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score      Error  Units
SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_reduceIfEmpty  thrpt   30  2417287.384 ± 9598.100  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 723877.654 ops/s
# Warmup Iteration   2: 765749.754 ops/s
# Warmup Iteration   3: 1023375.428 ops/s
# Warmup Iteration   4: 1022357.904 ops/s
# Warmup Iteration   5: 1016087.351 ops/s
# Warmup Iteration   6: 1023751.065 ops/s
# Warmup Iteration   7: 1022225.831 ops/s
# Warmup Iteration   8: 1021064.406 ops/s
# Warmup Iteration   9: 1021481.237 ops/s
# Warmup Iteration  10: 1020141.629 ops/s
# Warmup Iteration  11: 849276.183 ops/s
# Warmup Iteration  12: 1022118.793 ops/s
# Warmup Iteration  13: 1020027.234 ops/s
# Warmup Iteration  14: 1022279.552 ops/s
# Warmup Iteration  15: 1022497.345 ops/s
# Warmup Iteration  16: 1021812.901 ops/s
# Warmup Iteration  17: 1081422.435 ops/s
# Warmup Iteration  18: 1088669.749 ops/s
# Warmup Iteration  19: 1090151.612 ops/s
# Warmup Iteration  20: 1089136.396 ops/s
# Warmup Iteration  21: 1087050.785 ops/s
# Warmup Iteration  22: 1087548.234 ops/s
# Warmup Iteration  23: 1087243.482 ops/s
# Warmup Iteration  24: 1086306.668 ops/s
# Warmup Iteration  25: 1088263.463 ops/s
# Warmup Iteration  26: 1090099.990 ops/s
# Warmup Iteration  27: 1087260.673 ops/s
# Warmup Iteration  28: 1092008.078 ops/s
# Warmup Iteration  29: 1086413.711 ops/s
# Warmup Iteration  30: 1088987.272 ops/s
Iteration   1: 1085227.555 ops/s
Iteration   2: 1088193.234 ops/s
Iteration   3: 1088790.864 ops/s
Iteration   4: 1084925.002 ops/s
Iteration   5: 1090992.001 ops/s
Iteration   6: 1093487.046 ops/s
Iteration   7: 1089955.876 ops/s
Iteration   8: 1092411.162 ops/s
Iteration   9: 1091751.079 ops/s
Iteration  10: 1092467.437 ops/s
Iteration  11: 1083543.774 ops/s
Iteration  12: 1091816.629 ops/s
Iteration  13: 1086503.202 ops/s
Iteration  14: 1085377.506 ops/s
Iteration  15: 1074010.100 ops/s
Iteration  16: 1091122.238 ops/s
Iteration  17: 1091869.131 ops/s
Iteration  18: 1069977.263 ops/s
Iteration  19: 1085864.106 ops/s
Iteration  20: 1091035.774 ops/s
Iteration  21: 1086451.921 ops/s
Iteration  22: 1090509.821 ops/s
Iteration  23: 1088667.385 ops/s
Iteration  24: 1085392.734 ops/s
Iteration  25: 1087867.493 ops/s
Iteration  26: 1092271.418 ops/s
Iteration  27: 1089238.798 ops/s
Iteration  28: 1090700.437 ops/s
Iteration  29: 1091757.392 ops/s
Iteration  30: 1091321.471 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows":
  1088116.662 ±(99.9%) 3474.991 ops/s [Average]
  (min, avg, max) = (1069977.263, 1088116.662, 1093487.046), stdev = 5201.203
  CI (99.9%): [1084641.671, 1091591.652] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score      Error  Units
SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows  thrpt   30  1088116.662 ± 3474.991  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3448278.711 ops/s
# Warmup Iteration   2: 8887916.558 ops/s
# Warmup Iteration   3: 9086684.310 ops/s
# Warmup Iteration   4: 10812848.637 ops/s
# Warmup Iteration   5: 10786454.373 ops/s
# Warmup Iteration   6: 10784263.272 ops/s
# Warmup Iteration   7: 10670476.431 ops/s
# Warmup Iteration   8: 10785751.068 ops/s
# Warmup Iteration   9: 10775570.497 ops/s
# Warmup Iteration  10: 10721827.851 ops/s
# Warmup Iteration  11: 10789904.243 ops/s
# Warmup Iteration  12: 10811793.536 ops/s
# Warmup Iteration  13: 10819481.081 ops/s
# Warmup Iteration  14: 10783616.066 ops/s
# Warmup Iteration  15: 10830621.432 ops/s
# Warmup Iteration  16: 10538465.625 ops/s
# Warmup Iteration  17: 10813032.657 ops/s
# Warmup Iteration  18: 10824761.308 ops/s
# Warmup Iteration  19: 10780596.715 ops/s
# Warmup Iteration  20: 10760173.950 ops/s
# Warmup Iteration  21: 10782839.094 ops/s
# Warmup Iteration  22: 10782531.075 ops/s
# Warmup Iteration  23: 10831177.879 ops/s
# Warmup Iteration  24: 10818900.372 ops/s
# Warmup Iteration  25: 10811156.872 ops/s
# Warmup Iteration  26: 10720869.663 ops/s
# Warmup Iteration  27: 10785515.330 ops/s
# Warmup Iteration  28: 10778476.931 ops/s
# Warmup Iteration  29: 10803274.290 ops/s
# Warmup Iteration  30: 10787522.158 ops/s
Iteration   1: 10767622.997 ops/s
Iteration   2: 10823133.452 ops/s
Iteration   3: 10814916.932 ops/s
Iteration   4: 10786282.819 ops/s
Iteration   5: 10851239.743 ops/s
Iteration   6: 10767304.174 ops/s
Iteration   7: 10781219.924 ops/s
Iteration   8: 10848567.612 ops/s
Iteration   9: 10823195.353 ops/s
Iteration  10: 10779520.972 ops/s
Iteration  11: 10779205.023 ops/s
Iteration  12: 10774586.707 ops/s
Iteration  13: 10802975.103 ops/s
Iteration  14: 10804697.157 ops/s
Iteration  15: 10845955.996 ops/s
Iteration  16: 10783416.834 ops/s
Iteration  17: 10628453.643 ops/s
Iteration  18: 10828529.370 ops/s
Iteration  19: 10801492.779 ops/s
Iteration  20: 10800064.844 ops/s
Iteration  21: 10822678.742 ops/s
Iteration  22: 10779215.448 ops/s
Iteration  23: 10794947.958 ops/s
Iteration  24: 10829060.526 ops/s
Iteration  25: 10833075.571 ops/s
Iteration  26: 10786042.991 ops/s
Iteration  27: 10809818.940 ops/s
Iteration  28: 10766470.166 ops/s
Iteration  29: 10768978.568 ops/s
Iteration  30: 10782540.770 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_reject":
  10795507.037 ±(99.9%) 27205.537 ops/s [Average]
  (min, avg, max) = (10628453.643, 10795507.037, 10851239.743), stdev = 40719.970
  CI (99.9%): [10768301.500, 10822712.574] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score       Error  Units
SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_reject  thrpt   30  10795507.037 ± 27205.537  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8495861.864 ops/s
# Warmup Iteration   2: 17725339.876 ops/s
# Warmup Iteration   3: 16735656.598 ops/s
# Warmup Iteration   4: 16152340.262 ops/s
# Warmup Iteration   5: 17827273.399 ops/s
# Warmup Iteration   6: 17884837.380 ops/s
# Warmup Iteration   7: 17729577.386 ops/s
# Warmup Iteration   8: 17882780.472 ops/s
# Warmup Iteration   9: 17885441.443 ops/s
# Warmup Iteration  10: 17890988.988 ops/s
# Warmup Iteration  11: 17870297.871 ops/s
# Warmup Iteration  12: 17884311.889 ops/s
# Warmup Iteration  13: 17872559.688 ops/s
# Warmup Iteration  14: 17906656.351 ops/s
# Warmup Iteration  15: 17902541.479 ops/s
# Warmup Iteration  16: 17839293.057 ops/s
# Warmup Iteration  17: 17892304.436 ops/s
# Warmup Iteration  18: 17917126.883 ops/s
# Warmup Iteration  19: 17908590.906 ops/s
# Warmup Iteration  20: 17879444.084 ops/s
# Warmup Iteration  21: 17924813.015 ops/s
# Warmup Iteration  22: 17632083.310 ops/s
# Warmup Iteration  23: 17777014.173 ops/s
# Warmup Iteration  24: 17893260.500 ops/s
# Warmup Iteration  25: 17905506.618 ops/s
# Warmup Iteration  26: 17648289.185 ops/s
# Warmup Iteration  27: 17878035.768 ops/s
# Warmup Iteration  28: 17876688.305 ops/s
# Warmup Iteration  29: 17848196.070 ops/s
# Warmup Iteration  30: 17856375.804 ops/s
Iteration   1: 17916286.151 ops/s
Iteration   2: 17902341.236 ops/s
Iteration   3: 17948538.220 ops/s
Iteration   4: 17920420.305 ops/s
Iteration   5: 17898810.654 ops/s
Iteration   6: 17900202.228 ops/s
Iteration   7: 17926949.560 ops/s
Iteration   8: 17867095.977 ops/s
Iteration   9: 17889568.316 ops/s
Iteration  10: 17926359.966 ops/s
Iteration  11: 17895861.918 ops/s
Iteration  12: 17919566.463 ops/s
Iteration  13: 17924486.652 ops/s
Iteration  14: 17923363.417 ops/s
Iteration  15: 17628093.531 ops/s
Iteration  16: 17919818.219 ops/s
Iteration  17: 17928869.671 ops/s
Iteration  18: 17901476.374 ops/s
Iteration  19: 17860808.209 ops/s
Iteration  20: 17830063.280 ops/s
Iteration  21: 17878070.186 ops/s
Iteration  22: 17872623.093 ops/s
Iteration  23: 17879175.609 ops/s
Iteration  24: 17859664.281 ops/s
Iteration  25: 17896786.158 ops/s
Iteration  26: 17864500.313 ops/s
Iteration  27: 17972416.599 ops/s
Iteration  28: 17909360.261 ops/s
Iteration  29: 17802813.441 ops/s
Iteration  30: 17787088.805 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_remove":
  17885049.303 ±(99.9%) 41921.212 ops/s [Average]
  (min, avg, max) = (17628093.531, 17885049.303, 17972416.599), stdev = 62745.701
  CI (99.9%): [17843128.092, 17926970.515] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score       Error  Units
SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_remove  thrpt   30  17885049.303 ± 41921.212  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2436626.654 ops/s
# Warmup Iteration   2: 5346094.527 ops/s
# Warmup Iteration   3: 4507312.555 ops/s
# Warmup Iteration   4: 5407339.587 ops/s
# Warmup Iteration   5: 5402127.373 ops/s
# Warmup Iteration   6: 5397140.472 ops/s
# Warmup Iteration   7: 5341325.510 ops/s
# Warmup Iteration   8: 5398912.727 ops/s
# Warmup Iteration   9: 5402850.054 ops/s
# Warmup Iteration  10: 5407967.876 ops/s
# Warmup Iteration  11: 5399163.012 ops/s
# Warmup Iteration  12: 5381830.931 ops/s
# Warmup Iteration  13: 5389785.143 ops/s
# Warmup Iteration  14: 5406475.688 ops/s
# Warmup Iteration  15: 5400058.364 ops/s
# Warmup Iteration  16: 5406085.098 ops/s
# Warmup Iteration  17: 5409101.783 ops/s
# Warmup Iteration  18: 5404863.501 ops/s
# Warmup Iteration  19: 5405654.773 ops/s
# Warmup Iteration  20: 5392270.715 ops/s
# Warmup Iteration  21: 5404327.177 ops/s
# Warmup Iteration  22: 5400590.360 ops/s
# Warmup Iteration  23: 5409214.555 ops/s
# Warmup Iteration  24: 5396772.274 ops/s
# Warmup Iteration  25: 5407554.054 ops/s
# Warmup Iteration  26: 5396560.926 ops/s
# Warmup Iteration  27: 5398390.693 ops/s
# Warmup Iteration  28: 5370141.114 ops/s
# Warmup Iteration  29: 5405795.447 ops/s
# Warmup Iteration  30: 5393105.654 ops/s
Iteration   1: 5406285.390 ops/s
Iteration   2: 5387299.810 ops/s
Iteration   3: 5403236.196 ops/s
Iteration   4: 5408583.097 ops/s
Iteration   5: 5417200.195 ops/s
Iteration   6: 5401977.303 ops/s
Iteration   7: 5401631.956 ops/s
Iteration   8: 5382570.868 ops/s
Iteration   9: 5407649.040 ops/s
Iteration  10: 5395082.476 ops/s
Iteration  11: 5395547.511 ops/s
Iteration  12: 5404980.854 ops/s
Iteration  13: 5394371.661 ops/s
Iteration  14: 5416325.747 ops/s
Iteration  15: 5403474.478 ops/s
Iteration  16: 5404634.123 ops/s
Iteration  17: 5401727.009 ops/s
Iteration  18: 5414401.402 ops/s
Iteration  19: 5378786.872 ops/s
Iteration  20: 5415085.832 ops/s
Iteration  21: 5395862.866 ops/s
Iteration  22: 5409111.346 ops/s
Iteration  23: 5392708.267 ops/s
Iteration  24: 5374766.809 ops/s
Iteration  25: 5387399.759 ops/s
Iteration  26: 5400463.743 ops/s
Iteration  27: 5400081.094 ops/s
Iteration  28: 5421972.839 ops/s
Iteration  29: 5401050.908 ops/s
Iteration  30: 5418229.404 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_removeAll":
  5401416.629 ±(99.9%) 7790.676 ops/s [Average]
  (min, avg, max) = (5374766.809, 5401416.629, 5421972.839), stdev = 11660.718
  CI (99.9%): [5393625.952, 5409207.305] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_removeAll  thrpt   30  5401416.629 ± 7790.676  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_removeAll_iterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_removeAll_iterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1686366.665 ops/s
# Warmup Iteration   2: 3801214.176 ops/s
# Warmup Iteration   3: 3178653.274 ops/s
# Warmup Iteration   4: 3806257.035 ops/s
# Warmup Iteration   5: 3806927.959 ops/s
# Warmup Iteration   6: 3779898.184 ops/s
# Warmup Iteration   7: 3760960.402 ops/s
# Warmup Iteration   8: 3813189.168 ops/s
# Warmup Iteration   9: 3812696.452 ops/s
# Warmup Iteration  10: 3807872.444 ops/s
# Warmup Iteration  11: 3802956.113 ops/s
# Warmup Iteration  12: 3810807.812 ops/s
# Warmup Iteration  13: 3796779.789 ops/s
# Warmup Iteration  14: 3801280.577 ops/s
# Warmup Iteration  15: 3811198.593 ops/s
# Warmup Iteration  16: 3803955.399 ops/s
# Warmup Iteration  17: 3776067.456 ops/s
# Warmup Iteration  18: 3802914.063 ops/s
# Warmup Iteration  19: 3812718.005 ops/s
# Warmup Iteration  20: 3799182.939 ops/s
# Warmup Iteration  21: 3807067.170 ops/s
# Warmup Iteration  22: 3802993.250 ops/s
# Warmup Iteration  23: 3813854.317 ops/s
# Warmup Iteration  24: 3814724.670 ops/s
# Warmup Iteration  25: 3806069.893 ops/s
# Warmup Iteration  26: 3787301.521 ops/s
# Warmup Iteration  27: 3812950.283 ops/s
# Warmup Iteration  28: 3806167.781 ops/s
# Warmup Iteration  29: 3805475.121 ops/s
# Warmup Iteration  30: 3804606.126 ops/s
Iteration   1: 3828094.011 ops/s
Iteration   2: 3814522.104 ops/s
Iteration   3: 3813695.303 ops/s
Iteration   4: 3796550.607 ops/s
Iteration   5: 3813612.180 ops/s
Iteration   6: 3812547.313 ops/s
Iteration   7: 3815010.874 ops/s
Iteration   8: 3812612.798 ops/s
Iteration   9: 3810349.142 ops/s
Iteration  10: 3808289.012 ops/s
Iteration  11: 3806617.005 ops/s
Iteration  12: 3811156.683 ops/s
Iteration  13: 3754624.280 ops/s
Iteration  14: 3814272.268 ops/s
Iteration  15: 3813397.873 ops/s
Iteration  16: 3813683.775 ops/s
Iteration  17: 3810726.288 ops/s
Iteration  18: 3789145.183 ops/s
Iteration  19: 3818000.803 ops/s
Iteration  20: 3813637.348 ops/s
Iteration  21: 3813814.003 ops/s
Iteration  22: 3813444.615 ops/s
Iteration  23: 3818903.923 ops/s
Iteration  24: 3803723.191 ops/s
Iteration  25: 3821216.946 ops/s
Iteration  26: 3810060.890 ops/s
Iteration  27: 3808013.920 ops/s
Iteration  28: 3747852.938 ops/s
Iteration  29: 3811285.941 ops/s
Iteration  30: 3802974.949 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_removeAll_iterable":
  3807394.539 ±(99.9%) 11246.031 ops/s [Average]
  (min, avg, max) = (3747852.938, 3807394.539, 3828094.011), stdev = 16832.531
  CI (99.9%): [3796148.508, 3818640.570] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score       Error  Units
SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_removeAll_iterable  thrpt   30  3807394.539 ± 11246.031  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1104293.383 ops/s
# Warmup Iteration   2: 2520928.290 ops/s
# Warmup Iteration   3: 2247054.019 ops/s
# Warmup Iteration   4: 2697575.142 ops/s
# Warmup Iteration   5: 2703306.927 ops/s
# Warmup Iteration   6: 2694575.146 ops/s
# Warmup Iteration   7: 2691650.131 ops/s
# Warmup Iteration   8: 2696956.165 ops/s
# Warmup Iteration   9: 2697802.757 ops/s
# Warmup Iteration  10: 2683596.692 ops/s
# Warmup Iteration  11: 2691945.683 ops/s
# Warmup Iteration  12: 2694968.364 ops/s
# Warmup Iteration  13: 2691000.012 ops/s
# Warmup Iteration  14: 2699992.167 ops/s
# Warmup Iteration  15: 2702340.424 ops/s
# Warmup Iteration  16: 2679993.385 ops/s
# Warmup Iteration  17: 2693449.471 ops/s
# Warmup Iteration  18: 2693106.362 ops/s
# Warmup Iteration  19: 2668150.253 ops/s
# Warmup Iteration  20: 2700785.179 ops/s
# Warmup Iteration  21: 2701575.986 ops/s
# Warmup Iteration  22: 2699449.980 ops/s
# Warmup Iteration  23: 2693434.667 ops/s
# Warmup Iteration  24: 2699568.193 ops/s
# Warmup Iteration  25: 2690228.236 ops/s
# Warmup Iteration  26: 2694420.713 ops/s
# Warmup Iteration  27: 2691179.724 ops/s
# Warmup Iteration  28: 2693417.338 ops/s
# Warmup Iteration  29: 2702192.251 ops/s
# Warmup Iteration  30: 2700193.399 ops/s
Iteration   1: 2697471.066 ops/s
Iteration   2: 2692986.129 ops/s
Iteration   3: 2709736.106 ops/s
Iteration   4: 2696740.447 ops/s
Iteration   5: 2695849.497 ops/s
Iteration   6: 2686866.468 ops/s
Iteration   7: 2691601.289 ops/s
Iteration   8: 2688102.150 ops/s
Iteration   9: 2695604.913 ops/s
Iteration  10: 2694700.147 ops/s
Iteration  11: 2701758.699 ops/s
Iteration  12: 2650032.870 ops/s
Iteration  13: 2693764.682 ops/s
Iteration  14: 2685460.299 ops/s
Iteration  15: 2689119.012 ops/s
Iteration  16: 2704191.023 ops/s
Iteration  17: 2698075.122 ops/s
Iteration  18: 2702923.327 ops/s
Iteration  19: 2691783.709 ops/s
Iteration  20: 2704652.005 ops/s
Iteration  21: 2686757.266 ops/s
Iteration  22: 2695225.468 ops/s
Iteration  23: 2694076.110 ops/s
Iteration  24: 2692374.381 ops/s
Iteration  25: 2696179.075 ops/s
Iteration  26: 2691857.611 ops/s
Iteration  27: 2700473.977 ops/s
Iteration  28: 2686776.520 ops/s
Iteration  29: 2698593.054 ops/s
Iteration  30: 2669653.193 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_retainAll":
  2692779.521 ±(99.9%) 7343.914 ops/s [Average]
  (min, avg, max) = (2650032.870, 2692779.521, 2709736.106), stdev = 10992.026
  CI (99.9%): [2685435.606, 2700123.435] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_retainAll  thrpt   30  2692779.521 ± 7343.914  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_retainAll_iterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_retainAll_iterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 641574.046 ops/s
# Warmup Iteration   2: 1495651.112 ops/s
# Warmup Iteration   3: 1546577.310 ops/s
# Warmup Iteration   4: 1284032.342 ops/s
# Warmup Iteration   5: 1544023.626 ops/s
# Warmup Iteration   6: 1548115.592 ops/s
# Warmup Iteration   7: 1548991.044 ops/s
# Warmup Iteration   8: 1548441.085 ops/s
# Warmup Iteration   9: 1550728.013 ops/s
# Warmup Iteration  10: 1548843.795 ops/s
# Warmup Iteration  11: 1549342.273 ops/s
# Warmup Iteration  12: 1546481.210 ops/s
# Warmup Iteration  13: 1549056.628 ops/s
# Warmup Iteration  14: 1543726.316 ops/s
# Warmup Iteration  15: 1546229.989 ops/s
# Warmup Iteration  16: 1548504.860 ops/s
# Warmup Iteration  17: 1550819.550 ops/s
# Warmup Iteration  18: 1545271.270 ops/s
# Warmup Iteration  19: 1548485.946 ops/s
# Warmup Iteration  20: 1547149.060 ops/s
# Warmup Iteration  21: 1548806.819 ops/s
# Warmup Iteration  22: 1547933.623 ops/s
# Warmup Iteration  23: 1549229.423 ops/s
# Warmup Iteration  24: 1549586.033 ops/s
# Warmup Iteration  25: 1549420.261 ops/s
# Warmup Iteration  26: 1547862.768 ops/s
# Warmup Iteration  27: 1548723.669 ops/s
# Warmup Iteration  28: 1547947.315 ops/s
# Warmup Iteration  29: 1547633.155 ops/s
# Warmup Iteration  30: 1549622.000 ops/s
Iteration   1: 1548726.955 ops/s
Iteration   2: 1543320.990 ops/s
Iteration   3: 1550148.880 ops/s
Iteration   4: 1546700.688 ops/s
Iteration   5: 1549070.095 ops/s
Iteration   6: 1549262.457 ops/s
Iteration   7: 1547437.328 ops/s
Iteration   8: 1546693.779 ops/s
Iteration   9: 1547407.085 ops/s
Iteration  10: 1548109.447 ops/s
Iteration  11: 1552370.980 ops/s
Iteration  12: 1550423.823 ops/s
Iteration  13: 1545928.904 ops/s
Iteration  14: 1540875.752 ops/s
Iteration  15: 1522992.862 ops/s
Iteration  16: 1551668.955 ops/s
Iteration  17: 1549317.513 ops/s
Iteration  18: 1548646.862 ops/s
Iteration  19: 1552127.113 ops/s
Iteration  20: 1544311.163 ops/s
Iteration  21: 1549035.171 ops/s
Iteration  22: 1548664.190 ops/s
Iteration  23: 1545485.471 ops/s
Iteration  24: 1548060.593 ops/s
Iteration  25: 1535616.287 ops/s
Iteration  26: 1548616.462 ops/s
Iteration  27: 1551059.446 ops/s
Iteration  28: 1546351.171 ops/s
Iteration  29: 1548020.707 ops/s
Iteration  30: 1543212.831 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_retainAll_iterable":
  1546655.465 ±(99.9%) 3779.069 ops/s [Average]
  (min, avg, max) = (1522992.862, 1546655.465, 1552370.980), stdev = 5656.334
  CI (99.9%): [1542876.396, 1550434.535] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score      Error  Units
SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_retainAll_iterable  thrpt   30  1546655.465 ± 3779.069  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4147423.798 ops/s
# Warmup Iteration   2: 8642674.751 ops/s
# Warmup Iteration   3: 9105829.192 ops/s
# Warmup Iteration   4: 10781470.728 ops/s
# Warmup Iteration   5: 10735501.933 ops/s
# Warmup Iteration   6: 10806651.155 ops/s
# Warmup Iteration   7: 10818984.786 ops/s
# Warmup Iteration   8: 10667652.601 ops/s
# Warmup Iteration   9: 10716970.920 ops/s
# Warmup Iteration  10: 10803374.127 ops/s
# Warmup Iteration  11: 10813738.942 ops/s
# Warmup Iteration  12: 10812514.528 ops/s
# Warmup Iteration  13: 10824724.854 ops/s
# Warmup Iteration  14: 10799341.649 ops/s
# Warmup Iteration  15: 10812819.587 ops/s
# Warmup Iteration  16: 10714693.450 ops/s
# Warmup Iteration  17: 10825409.835 ops/s
# Warmup Iteration  18: 10830279.067 ops/s
# Warmup Iteration  19: 10774130.434 ops/s
# Warmup Iteration  20: 10810899.029 ops/s
# Warmup Iteration  21: 10810184.390 ops/s
# Warmup Iteration  22: 10773598.205 ops/s
# Warmup Iteration  23: 10798470.043 ops/s
# Warmup Iteration  24: 10733759.199 ops/s
# Warmup Iteration  25: 10778387.383 ops/s
# Warmup Iteration  26: 10836737.734 ops/s
# Warmup Iteration  27: 10825547.086 ops/s
# Warmup Iteration  28: 10814563.350 ops/s
# Warmup Iteration  29: 10832058.063 ops/s
# Warmup Iteration  30: 10820672.091 ops/s
Iteration   1: 10779776.674 ops/s
Iteration   2: 10810535.231 ops/s
Iteration   3: 10810934.375 ops/s
Iteration   4: 10817517.078 ops/s
Iteration   5: 10825706.190 ops/s
Iteration   6: 10798818.708 ops/s
Iteration   7: 10821267.046 ops/s
Iteration   8: 10813626.542 ops/s
Iteration   9: 10822378.103 ops/s
Iteration  10: 10807277.724 ops/s
Iteration  11: 10732535.993 ops/s
Iteration  12: 10799280.730 ops/s
Iteration  13: 10851662.508 ops/s
Iteration  14: 10789458.763 ops/s
Iteration  15: 10861558.981 ops/s
Iteration  16: 10852359.424 ops/s
Iteration  17: 10782097.117 ops/s
Iteration  18: 10848281.094 ops/s
Iteration  19: 10853636.917 ops/s
Iteration  20: 10755285.034 ops/s
Iteration  21: 10835942.333 ops/s
Iteration  22: 10772002.618 ops/s
Iteration  23: 10777131.350 ops/s
Iteration  24: 10798156.596 ops/s
Iteration  25: 10857925.630 ops/s
Iteration  26: 10788493.181 ops/s
Iteration  27: 10819477.556 ops/s
Iteration  28: 10802825.908 ops/s
Iteration  29: 10865176.737 ops/s
Iteration  30: 10821931.060 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_select":
  10812435.240 ±(99.9%) 21758.700 ops/s [Average]
  (min, avg, max) = (10732535.993, 10812435.240, 10865176.737), stdev = 32567.400
  CI (99.9%): [10790676.540, 10834193.940] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score       Error  Units
SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_select  thrpt   30  10812435.240 ± 21758.700  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1658781.118 ops/s
# Warmup Iteration   2: 3385090.465 ops/s
# Warmup Iteration   3: 4170955.975 ops/s
# Warmup Iteration   4: 4906338.417 ops/s
# Warmup Iteration   5: 4918834.845 ops/s
# Warmup Iteration   6: 4896465.218 ops/s
# Warmup Iteration   7: 4895356.700 ops/s
# Warmup Iteration   8: 4922624.520 ops/s
# Warmup Iteration   9: 4907611.477 ops/s
# Warmup Iteration  10: 4917959.597 ops/s
# Warmup Iteration  11: 4902543.614 ops/s
# Warmup Iteration  12: 4881366.223 ops/s
# Warmup Iteration  13: 4916023.571 ops/s
# Warmup Iteration  14: 4891901.713 ops/s
# Warmup Iteration  15: 4901174.701 ops/s
# Warmup Iteration  16: 4912836.718 ops/s
# Warmup Iteration  17: 4910129.889 ops/s
# Warmup Iteration  18: 4901375.658 ops/s
# Warmup Iteration  19: 4919725.310 ops/s
# Warmup Iteration  20: 4926234.256 ops/s
# Warmup Iteration  21: 4918093.448 ops/s
# Warmup Iteration  22: 4905436.765 ops/s
# Warmup Iteration  23: 4902143.314 ops/s
# Warmup Iteration  24: 4916018.236 ops/s
# Warmup Iteration  25: 4907150.117 ops/s
# Warmup Iteration  26: 4905522.880 ops/s
# Warmup Iteration  27: 4915956.272 ops/s
# Warmup Iteration  28: 4908306.960 ops/s
# Warmup Iteration  29: 4924462.411 ops/s
# Warmup Iteration  30: 4907658.618 ops/s
Iteration   1: 4828990.216 ops/s
Iteration   2: 4929138.510 ops/s
Iteration   3: 4861280.696 ops/s
Iteration   4: 4899564.801 ops/s
Iteration   5: 4921676.033 ops/s
Iteration   6: 4914791.907 ops/s
Iteration   7: 4903023.621 ops/s
Iteration   8: 4908829.523 ops/s
Iteration   9: 4920745.645 ops/s
Iteration  10: 4923342.479 ops/s
Iteration  11: 4921322.782 ops/s
Iteration  12: 4906225.568 ops/s
Iteration  13: 4889392.106 ops/s
Iteration  14: 4883533.302 ops/s
Iteration  15: 4934245.726 ops/s
Iteration  16: 4929883.305 ops/s
Iteration  17: 4908462.699 ops/s
Iteration  18: 4900759.473 ops/s
Iteration  19: 4883043.773 ops/s
Iteration  20: 4935057.774 ops/s
Iteration  21: 4908749.346 ops/s
Iteration  22: 4928682.055 ops/s
Iteration  23: 4907831.255 ops/s
Iteration  24: 4793627.198 ops/s
Iteration  25: 4889134.034 ops/s
Iteration  26: 4935035.777 ops/s
Iteration  27: 4913103.562 ops/s
Iteration  28: 4914731.176 ops/s
Iteration  29: 4863814.826 ops/s
Iteration  30: 4893675.890 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_size":
  4901723.169 ±(99.9%) 21107.081 ops/s [Average]
  (min, avg, max) = (4793627.198, 4901723.169, 4935057.774), stdev = 31592.087
  CI (99.9%): [4880616.088, 4922830.249] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_size  thrpt   30  4901723.169 ± 21107.081  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_testEquals$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_testEquals

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 167206470.827 ops/s
# Warmup Iteration   2: 298668007.411 ops/s
# Warmup Iteration   3: 272954363.657 ops/s
# Warmup Iteration   4: 316661670.326 ops/s
# Warmup Iteration   5: 316708607.923 ops/s
# Warmup Iteration   6: 316318286.241 ops/s
# Warmup Iteration   7: 316777673.713 ops/s
# Warmup Iteration   8: 316675590.457 ops/s
# Warmup Iteration   9: 313858564.676 ops/s
# Warmup Iteration  10: 316146222.435 ops/s
# Warmup Iteration  11: 316313389.341 ops/s
# Warmup Iteration  12: 316118280.812 ops/s
# Warmup Iteration  13: 316219043.988 ops/s
# Warmup Iteration  14: 315810057.943 ops/s
# Warmup Iteration  15: 316916613.961 ops/s
# Warmup Iteration  16: 316091593.453 ops/s
# Warmup Iteration  17: 315334299.660 ops/s
# Warmup Iteration  18: 314774901.465 ops/s
# Warmup Iteration  19: 315275668.631 ops/s
# Warmup Iteration  20: 314557111.738 ops/s
# Warmup Iteration  21: 315340889.484 ops/s
# Warmup Iteration  22: 315575718.102 ops/s
# Warmup Iteration  23: 314973533.744 ops/s
# Warmup Iteration  24: 315085975.365 ops/s
# Warmup Iteration  25: 313825448.588 ops/s
# Warmup Iteration  26: 315317808.619 ops/s
# Warmup Iteration  27: 314974002.876 ops/s
# Warmup Iteration  28: 311848982.012 ops/s
# Warmup Iteration  29: 315605119.303 ops/s
# Warmup Iteration  30: 315641518.262 ops/s
Iteration   1: 315582969.633 ops/s
Iteration   2: 315116113.051 ops/s
Iteration   3: 315931770.913 ops/s
Iteration   4: 309140035.478 ops/s
Iteration   5: 315601312.817 ops/s
Iteration   6: 315297683.098 ops/s
Iteration   7: 314584631.627 ops/s
Iteration   8: 316496299.948 ops/s
Iteration   9: 315119009.261 ops/s
Iteration  10: 315607351.239 ops/s
Iteration  11: 315478902.163 ops/s
Iteration  12: 315907432.199 ops/s
Iteration  13: 316723745.996 ops/s
Iteration  14: 315905500.877 ops/s
Iteration  15: 313829316.471 ops/s
Iteration  16: 314507366.921 ops/s
Iteration  17: 315260021.410 ops/s
Iteration  18: 315174067.014 ops/s
Iteration  19: 315171835.859 ops/s
Iteration  20: 314469566.631 ops/s
Iteration  21: 314398366.167 ops/s
Iteration  22: 315948772.259 ops/s
Iteration  23: 315642814.970 ops/s
Iteration  24: 315025583.362 ops/s
Iteration  25: 313722738.037 ops/s
Iteration  26: 314876227.600 ops/s
Iteration  27: 315736790.488 ops/s
Iteration  28: 314911069.519 ops/s
Iteration  29: 315537863.669 ops/s
Iteration  30: 316030320.132 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_testEquals":
  315091182.627 ±(99.9%) 882926.857 ops/s [Average]
  (min, avg, max) = (309140035.478, 315091182.627, 316723745.996), stdev = 1321523.454
  CI (99.9%): [314208255.770, 315974109.484] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt          Score        Error  Units
SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_testEquals  thrpt   30  315091182.627 ± 882926.857  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_testHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_testHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 169297157.698 ops/s
# Warmup Iteration   2: 300357808.310 ops/s
# Warmup Iteration   3: 275574074.080 ops/s
# Warmup Iteration   4: 312682573.630 ops/s
# Warmup Iteration   5: 307340004.761 ops/s
# Warmup Iteration   6: 311315667.016 ops/s
# Warmup Iteration   7: 311922214.432 ops/s
# Warmup Iteration   8: 311234223.015 ops/s
# Warmup Iteration   9: 312047172.589 ops/s
# Warmup Iteration  10: 311018144.132 ops/s
# Warmup Iteration  11: 310574099.017 ops/s
# Warmup Iteration  12: 311217782.221 ops/s
# Warmup Iteration  13: 311431668.537 ops/s
# Warmup Iteration  14: 312297940.351 ops/s
# Warmup Iteration  15: 311377970.181 ops/s
# Warmup Iteration  16: 312401184.724 ops/s
# Warmup Iteration  17: 310565198.146 ops/s
# Warmup Iteration  18: 311691282.325 ops/s
# Warmup Iteration  19: 311687280.942 ops/s
# Warmup Iteration  20: 311747119.926 ops/s
# Warmup Iteration  21: 309950049.173 ops/s
# Warmup Iteration  22: 311185003.617 ops/s
# Warmup Iteration  23: 311465736.696 ops/s
# Warmup Iteration  24: 310381375.817 ops/s
# Warmup Iteration  25: 310763893.179 ops/s
# Warmup Iteration  26: 312320032.957 ops/s
# Warmup Iteration  27: 312147860.871 ops/s
# Warmup Iteration  28: 308518291.429 ops/s
# Warmup Iteration  29: 311131516.224 ops/s
# Warmup Iteration  30: 311182172.811 ops/s
Iteration   1: 310311686.936 ops/s
Iteration   2: 311867656.531 ops/s
Iteration   3: 311001943.949 ops/s
Iteration   4: 311312523.551 ops/s
Iteration   5: 310706555.274 ops/s
Iteration   6: 310685172.297 ops/s
Iteration   7: 309707796.713 ops/s
Iteration   8: 311245851.267 ops/s
Iteration   9: 310859791.975 ops/s
Iteration  10: 311365819.419 ops/s
Iteration  11: 310669712.482 ops/s
Iteration  12: 311256699.604 ops/s
Iteration  13: 311106478.209 ops/s
Iteration  14: 311506188.231 ops/s
Iteration  15: 311902246.708 ops/s
Iteration  16: 312987481.242 ops/s
Iteration  17: 311446790.244 ops/s
Iteration  18: 306891553.251 ops/s
Iteration  19: 309021955.772 ops/s
Iteration  20: 311531193.810 ops/s
Iteration  21: 310710841.673 ops/s
Iteration  22: 310204597.647 ops/s
Iteration  23: 310626965.489 ops/s
Iteration  24: 311708542.930 ops/s
Iteration  25: 308911811.595 ops/s
Iteration  26: 310932464.901 ops/s
Iteration  27: 311048315.830 ops/s
Iteration  28: 309303887.296 ops/s
Iteration  29: 310573425.455 ops/s
Iteration  30: 309741621.476 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_testHashCode":
  310704919.059 ±(99.9%) 761044.902 ops/s [Average]
  (min, avg, max) = (306891553.251, 310704919.059, 312987481.242), stdev = 1139096.267
  CI (99.9%): [309943874.157, 311465963.960] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt          Score        Error  Units
SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_testHashCode  thrpt   30  310704919.059 ± 761044.902  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 169591252.011 ops/s
# Warmup Iteration   2: 300030902.291 ops/s
# Warmup Iteration   3: 278469284.929 ops/s
# Warmup Iteration   4: 316094024.418 ops/s
# Warmup Iteration   5: 314009238.052 ops/s
# Warmup Iteration   6: 315197060.669 ops/s
# Warmup Iteration   7: 314607815.037 ops/s
# Warmup Iteration   8: 314869099.455 ops/s
# Warmup Iteration   9: 315106948.985 ops/s
# Warmup Iteration  10: 315206495.207 ops/s
# Warmup Iteration  11: 313750860.217 ops/s
# Warmup Iteration  12: 316138354.549 ops/s
# Warmup Iteration  13: 314989894.956 ops/s
# Warmup Iteration  14: 315622425.873 ops/s
# Warmup Iteration  15: 315772708.477 ops/s
# Warmup Iteration  16: 314217560.838 ops/s
# Warmup Iteration  17: 315182519.536 ops/s
# Warmup Iteration  18: 315052172.236 ops/s
# Warmup Iteration  19: 315052201.492 ops/s
# Warmup Iteration  20: 314981298.079 ops/s
# Warmup Iteration  21: 315145486.894 ops/s
# Warmup Iteration  22: 314668171.602 ops/s
# Warmup Iteration  23: 312380846.449 ops/s
# Warmup Iteration  24: 312229458.908 ops/s
# Warmup Iteration  25: 314752462.479 ops/s
# Warmup Iteration  26: 315054539.787 ops/s
# Warmup Iteration  27: 314894833.551 ops/s
# Warmup Iteration  28: 315205650.790 ops/s
# Warmup Iteration  29: 317799495.399 ops/s
# Warmup Iteration  30: 316982465.272 ops/s
Iteration   1: 317249758.104 ops/s
Iteration   2: 316111471.523 ops/s
Iteration   3: 317332693.353 ops/s
Iteration   4: 317479832.990 ops/s
Iteration   5: 316478054.168 ops/s
Iteration   6: 316945953.287 ops/s
Iteration   7: 316794068.304 ops/s
Iteration   8: 316463149.929 ops/s
Iteration   9: 316310845.122 ops/s
Iteration  10: 316932267.032 ops/s
Iteration  11: 316037469.525 ops/s
Iteration  12: 316116929.894 ops/s
Iteration  13: 316073456.002 ops/s
Iteration  14: 318025064.906 ops/s
Iteration  15: 315991904.697 ops/s
Iteration  16: 316095767.545 ops/s
Iteration  17: 315536238.544 ops/s
Iteration  18: 312989149.691 ops/s
Iteration  19: 317128329.700 ops/s
Iteration  20: 316690312.732 ops/s
Iteration  21: 317574640.946 ops/s
Iteration  22: 312675359.155 ops/s
Iteration  23: 315575759.927 ops/s
Iteration  24: 316680646.767 ops/s
Iteration  25: 317221572.846 ops/s
Iteration  26: 316411534.785 ops/s
Iteration  27: 316413584.008 ops/s
Iteration  28: 315190622.276 ops/s
Iteration  29: 316740660.179 ops/s
Iteration  30: 316138723.668 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_testToString":
  316313527.387 ±(99.9%) 763961.013 ops/s [Average]
  (min, avg, max) = (312675359.155, 316313527.387, 318025064.906), stdev = 1143460.967
  CI (99.9%): [315549566.373, 317077488.400] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt          Score        Error  Units
SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_testToString  thrpt   30  316313527.387 ± 763961.013  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1463351.874 ops/s
# Warmup Iteration   2: 3096832.726 ops/s
# Warmup Iteration   3: 3251151.703 ops/s
# Warmup Iteration   4: 3896613.004 ops/s
# Warmup Iteration   5: 3906702.095 ops/s
# Warmup Iteration   6: 3900178.959 ops/s
# Warmup Iteration   7: 3894432.990 ops/s
# Warmup Iteration   8: 3903229.616 ops/s
# Warmup Iteration   9: 3895288.275 ops/s
# Warmup Iteration  10: 3902167.176 ops/s
# Warmup Iteration  11: 3899617.023 ops/s
# Warmup Iteration  12: 3897900.254 ops/s
# Warmup Iteration  13: 3903470.915 ops/s
# Warmup Iteration  14: 3895994.512 ops/s
# Warmup Iteration  15: 3901304.626 ops/s
# Warmup Iteration  16: 3899290.705 ops/s
# Warmup Iteration  17: 3904372.859 ops/s
# Warmup Iteration  18: 3885536.268 ops/s
# Warmup Iteration  19: 3866946.838 ops/s
# Warmup Iteration  20: 3902156.232 ops/s
# Warmup Iteration  21: 3902972.976 ops/s
# Warmup Iteration  22: 3901757.999 ops/s
# Warmup Iteration  23: 3902014.616 ops/s
# Warmup Iteration  24: 3893882.613 ops/s
# Warmup Iteration  25: 3900931.356 ops/s
# Warmup Iteration  26: 3890993.219 ops/s
# Warmup Iteration  27: 3900667.112 ops/s
# Warmup Iteration  28: 3894616.036 ops/s
# Warmup Iteration  29: 3901785.572 ops/s
# Warmup Iteration  30: 3905174.833 ops/s
Iteration   1: 3905626.778 ops/s
Iteration   2: 3909065.592 ops/s
Iteration   3: 3908820.996 ops/s
Iteration   4: 3905814.678 ops/s
Iteration   5: 3912960.709 ops/s
Iteration   6: 3907559.064 ops/s
Iteration   7: 3889901.718 ops/s
Iteration   8: 3907904.578 ops/s
Iteration   9: 3907273.452 ops/s
Iteration  10: 3899415.289 ops/s
Iteration  11: 3907933.288 ops/s
Iteration  12: 3913308.957 ops/s
Iteration  13: 3898959.308 ops/s
Iteration  14: 3886259.291 ops/s
Iteration  15: 3895395.862 ops/s
Iteration  16: 3908412.325 ops/s
Iteration  17: 3905160.524 ops/s
Iteration  18: 3911931.545 ops/s
Iteration  19: 3901489.049 ops/s
Iteration  20: 3906507.658 ops/s
Iteration  21: 3902735.945 ops/s
Iteration  22: 3900570.905 ops/s
Iteration  23: 3896153.362 ops/s
Iteration  24: 3922133.991 ops/s
Iteration  25: 3832253.329 ops/s
Iteration  26: 3899459.103 ops/s
Iteration  27: 3903890.242 ops/s
Iteration  28: 3899142.110 ops/s
Iteration  29: 3893342.388 ops/s
Iteration  30: 3895710.352 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_toArray":
  3901169.746 ±(99.9%) 10036.074 ops/s [Average]
  (min, avg, max) = (3832253.329, 3901169.746, 3922133.991), stdev = 15021.525
  CI (99.9%): [3891133.672, 3911205.820] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_toArray  thrpt   30  3901169.746 ± 10036.074  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_toBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_toBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 877606.550 ops/s
# Warmup Iteration   2: 1771869.095 ops/s
# Warmup Iteration   3: 2184284.395 ops/s
# Warmup Iteration   4: 1972576.243 ops/s
# Warmup Iteration   5: 2045742.985 ops/s
# Warmup Iteration   6: 2187670.518 ops/s
# Warmup Iteration   7: 2192140.570 ops/s
# Warmup Iteration   8: 2187300.555 ops/s
# Warmup Iteration   9: 2190815.867 ops/s
# Warmup Iteration  10: 2187872.539 ops/s
# Warmup Iteration  11: 2191502.389 ops/s
# Warmup Iteration  12: 2187161.268 ops/s
# Warmup Iteration  13: 2188236.272 ops/s
# Warmup Iteration  14: 2190944.245 ops/s
# Warmup Iteration  15: 2188621.380 ops/s
# Warmup Iteration  16: 2189392.795 ops/s
# Warmup Iteration  17: 2189308.225 ops/s
# Warmup Iteration  18: 2189407.681 ops/s
# Warmup Iteration  19: 2192036.314 ops/s
# Warmup Iteration  20: 2191225.746 ops/s
# Warmup Iteration  21: 2194225.474 ops/s
# Warmup Iteration  22: 2193932.624 ops/s
# Warmup Iteration  23: 2172284.917 ops/s
# Warmup Iteration  24: 2189648.870 ops/s
# Warmup Iteration  25: 2193899.515 ops/s
# Warmup Iteration  26: 2185004.979 ops/s
# Warmup Iteration  27: 2182919.303 ops/s
# Warmup Iteration  28: 2189643.742 ops/s
# Warmup Iteration  29: 2187938.484 ops/s
# Warmup Iteration  30: 2192080.245 ops/s
Iteration   1: 2187216.872 ops/s
Iteration   2: 2184734.097 ops/s
Iteration   3: 2184455.767 ops/s
Iteration   4: 2190474.094 ops/s
Iteration   5: 2188317.372 ops/s
Iteration   6: 2184824.272 ops/s
Iteration   7: 2200263.153 ops/s
Iteration   8: 2190018.636 ops/s
Iteration   9: 2186128.497 ops/s
Iteration  10: 2196604.546 ops/s
Iteration  11: 2189529.749 ops/s
Iteration  12: 2191132.990 ops/s
Iteration  13: 2189502.048 ops/s
Iteration  14: 2187030.854 ops/s
Iteration  15: 2173974.837 ops/s
Iteration  16: 2189059.954 ops/s
Iteration  17: 2197307.705 ops/s
Iteration  18: 2184677.938 ops/s
Iteration  19: 2191572.849 ops/s
Iteration  20: 2187323.906 ops/s
Iteration  21: 2190194.440 ops/s
Iteration  22: 2189747.951 ops/s
Iteration  23: 2193890.906 ops/s
Iteration  24: 2198149.482 ops/s
Iteration  25: 2179625.197 ops/s
Iteration  26: 2189941.297 ops/s
Iteration  27: 2188586.541 ops/s
Iteration  28: 2191891.836 ops/s
Iteration  29: 2185845.218 ops/s
Iteration  30: 2154204.635 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_toBag":
  2187874.255 ±(99.9%) 5517.075 ops/s [Average]
  (min, avg, max) = (2154204.635, 2187874.255, 2200263.153), stdev = 8257.698
  CI (99.9%): [2182357.180, 2193391.329] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_toBag  thrpt   30  2187874.255 ± 5517.075  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1151984.757 ops/s
# Warmup Iteration   2: 2615076.971 ops/s
# Warmup Iteration   3: 2386459.290 ops/s
# Warmup Iteration   4: 2881999.887 ops/s
# Warmup Iteration   5: 2865591.968 ops/s
# Warmup Iteration   6: 2881127.146 ops/s
# Warmup Iteration   7: 2890797.030 ops/s
# Warmup Iteration   8: 2889760.185 ops/s
# Warmup Iteration   9: 2882080.217 ops/s
# Warmup Iteration  10: 2889460.404 ops/s
# Warmup Iteration  11: 2885326.861 ops/s
# Warmup Iteration  12: 2884661.259 ops/s
# Warmup Iteration  13: 2886573.401 ops/s
# Warmup Iteration  14: 2884221.976 ops/s
# Warmup Iteration  15: 2882496.824 ops/s
# Warmup Iteration  16: 2853929.078 ops/s
# Warmup Iteration  17: 2884968.552 ops/s
# Warmup Iteration  18: 2884961.272 ops/s
# Warmup Iteration  19: 2888079.649 ops/s
# Warmup Iteration  20: 2888660.810 ops/s
# Warmup Iteration  21: 2894345.049 ops/s
# Warmup Iteration  22: 2886530.667 ops/s
# Warmup Iteration  23: 2884984.944 ops/s
# Warmup Iteration  24: 2892608.550 ops/s
# Warmup Iteration  25: 2869054.242 ops/s
# Warmup Iteration  26: 2887400.305 ops/s
# Warmup Iteration  27: 2895892.096 ops/s
# Warmup Iteration  28: 2888409.090 ops/s
# Warmup Iteration  29: 2885767.488 ops/s
# Warmup Iteration  30: 2888405.279 ops/s
Iteration   1: 2894071.253 ops/s
Iteration   2: 2883284.085 ops/s
Iteration   3: 2889086.125 ops/s
Iteration   4: 2882848.272 ops/s
Iteration   5: 2892864.830 ops/s
Iteration   6: 2884620.674 ops/s
Iteration   7: 2879483.398 ops/s
Iteration   8: 2889570.911 ops/s
Iteration   9: 2897864.785 ops/s
Iteration  10: 2887358.565 ops/s
Iteration  11: 2892391.364 ops/s
Iteration  12: 2887364.860 ops/s
Iteration  13: 2883196.789 ops/s
Iteration  14: 2892892.160 ops/s
Iteration  15: 2890450.131 ops/s
Iteration  16: 2888027.027 ops/s
Iteration  17: 2885937.109 ops/s
Iteration  18: 2875453.796 ops/s
Iteration  19: 2880501.722 ops/s
Iteration  20: 2890575.807 ops/s
Iteration  21: 2890783.116 ops/s
Iteration  22: 2884218.067 ops/s
Iteration  23: 2887924.883 ops/s
Iteration  24: 2899457.009 ops/s
Iteration  25: 2828332.782 ops/s
Iteration  26: 2866146.072 ops/s
Iteration  27: 2887339.358 ops/s
Iteration  28: 2876423.013 ops/s
Iteration  29: 2891643.981 ops/s
Iteration  30: 2883744.113 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_toList":
  2884795.202 ±(99.9%) 8451.644 ops/s [Average]
  (min, avg, max) = (2828332.782, 2884795.202, 2899457.009), stdev = 12650.024
  CI (99.9%): [2876343.558, 2893246.846] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_toList  thrpt   30  2884795.202 ± 8451.644  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_toSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_toSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1520061.580 ops/s
# Warmup Iteration   2: 3504794.398 ops/s
# Warmup Iteration   3: 3798397.785 ops/s
# Warmup Iteration   4: 3896138.456 ops/s
# Warmup Iteration   5: 4219721.443 ops/s
# Warmup Iteration   6: 4211650.289 ops/s
# Warmup Iteration   7: 4220643.740 ops/s
# Warmup Iteration   8: 4202493.520 ops/s
# Warmup Iteration   9: 4216594.892 ops/s
# Warmup Iteration  10: 4189874.155 ops/s
# Warmup Iteration  11: 4212695.131 ops/s
# Warmup Iteration  12: 4218266.137 ops/s
# Warmup Iteration  13: 4141048.288 ops/s
# Warmup Iteration  14: 4218363.934 ops/s
# Warmup Iteration  15: 4218523.030 ops/s
# Warmup Iteration  16: 4222506.063 ops/s
# Warmup Iteration  17: 4217080.734 ops/s
# Warmup Iteration  18: 4194114.804 ops/s
# Warmup Iteration  19: 4216758.526 ops/s
# Warmup Iteration  20: 4175750.652 ops/s
# Warmup Iteration  21: 4214358.504 ops/s
# Warmup Iteration  22: 4185028.960 ops/s
# Warmup Iteration  23: 4229810.533 ops/s
# Warmup Iteration  24: 4180465.796 ops/s
# Warmup Iteration  25: 4225227.016 ops/s
# Warmup Iteration  26: 4204446.883 ops/s
# Warmup Iteration  27: 4227150.780 ops/s
# Warmup Iteration  28: 4212106.078 ops/s
# Warmup Iteration  29: 4211867.540 ops/s
# Warmup Iteration  30: 4211204.665 ops/s
Iteration   1: 4208573.717 ops/s
Iteration   2: 4217898.257 ops/s
Iteration   3: 4147532.039 ops/s
Iteration   4: 4223290.289 ops/s
Iteration   5: 4214672.560 ops/s
Iteration   6: 4211447.633 ops/s
Iteration   7: 4228829.728 ops/s
Iteration   8: 4224690.895 ops/s
Iteration   9: 4225826.199 ops/s
Iteration  10: 4211614.152 ops/s
Iteration  11: 4216453.220 ops/s
Iteration  12: 4222449.440 ops/s
Iteration  13: 4212621.812 ops/s
Iteration  14: 4199204.092 ops/s
Iteration  15: 4229222.071 ops/s
Iteration  16: 4219246.204 ops/s
Iteration  17: 4185161.822 ops/s
Iteration  18: 4220353.763 ops/s
Iteration  19: 4222344.630 ops/s
Iteration  20: 4211955.482 ops/s
Iteration  21: 4223055.192 ops/s
Iteration  22: 4230291.002 ops/s
Iteration  23: 4230754.132 ops/s
Iteration  24: 4236638.330 ops/s
Iteration  25: 4214275.660 ops/s
Iteration  26: 4192930.470 ops/s
Iteration  27: 4213045.462 ops/s
Iteration  28: 4218832.244 ops/s
Iteration  29: 4212058.391 ops/s
Iteration  30: 4224422.822 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_toSet":
  4214989.724 ±(99.9%) 11255.705 ops/s [Average]
  (min, avg, max) = (4147532.039, 4214989.724, 4236638.330), stdev = 16847.011
  CI (99.9%): [4203734.019, 4226245.429] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_toSet  thrpt   30  4214989.724 ± 11255.705  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_with$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_with

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 692136.580 ops/s
# Warmup Iteration   2: 755017.255 ops/s
# Warmup Iteration   3: 982819.746 ops/s
# Warmup Iteration   4: 985271.104 ops/s
# Warmup Iteration   5: 985878.206 ops/s
# Warmup Iteration   6: 985880.283 ops/s
# Warmup Iteration   7: 987205.853 ops/s
# Warmup Iteration   8: 983931.927 ops/s
# Warmup Iteration   9: 984024.688 ops/s
# Warmup Iteration  10: 846879.265 ops/s
# Warmup Iteration  11: 957063.322 ops/s
# Warmup Iteration  12: 985578.182 ops/s
# Warmup Iteration  13: 983855.472 ops/s
# Warmup Iteration  14: 984965.421 ops/s
# Warmup Iteration  15: 988187.940 ops/s
# Warmup Iteration  16: 985648.984 ops/s
# Warmup Iteration  17: 1052958.774 ops/s
# Warmup Iteration  18: 1052987.100 ops/s
# Warmup Iteration  19: 1050314.095 ops/s
# Warmup Iteration  20: 1051552.016 ops/s
# Warmup Iteration  21: 1040567.970 ops/s
# Warmup Iteration  22: 1049785.654 ops/s
# Warmup Iteration  23: 1052440.039 ops/s
# Warmup Iteration  24: 1047042.217 ops/s
# Warmup Iteration  25: 1052820.937 ops/s
# Warmup Iteration  26: 1049733.723 ops/s
# Warmup Iteration  27: 1051102.376 ops/s
# Warmup Iteration  28: 1052989.757 ops/s
# Warmup Iteration  29: 1045638.607 ops/s
# Warmup Iteration  30: 1048649.879 ops/s
Iteration   1: 1050225.020 ops/s
Iteration   2: 1036540.116 ops/s
Iteration   3: 1050323.062 ops/s
Iteration   4: 1049060.905 ops/s
Iteration   5: 1052592.344 ops/s
Iteration   6: 1051496.319 ops/s
Iteration   7: 1049863.737 ops/s
Iteration   8: 1055960.882 ops/s
Iteration   9: 1053367.986 ops/s
Iteration  10: 1044575.484 ops/s
Iteration  11: 1051844.848 ops/s
Iteration  12: 1051511.430 ops/s
Iteration  13: 1049327.079 ops/s
Iteration  14: 1052008.118 ops/s
Iteration  15: 1050421.455 ops/s
Iteration  16: 1048643.394 ops/s
Iteration  17: 1051801.044 ops/s
Iteration  18: 1052245.568 ops/s
Iteration  19: 1051177.511 ops/s
Iteration  20: 1050181.796 ops/s
Iteration  21: 1049081.119 ops/s
Iteration  22: 1050291.626 ops/s
Iteration  23: 1048591.351 ops/s
Iteration  24: 1052379.506 ops/s
Iteration  25: 1051821.032 ops/s
Iteration  26: 1047962.671 ops/s
Iteration  27: 1050860.429 ops/s
Iteration  28: 1048798.371 ops/s
Iteration  29: 1047707.094 ops/s
Iteration  30: 1054571.511 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_with":
  1050174.427 ±(99.9%) 2263.477 ops/s [Average]
  (min, avg, max) = (1036540.116, 1050174.427, 1055960.882), stdev = 3387.866
  CI (99.9%): [1047910.950, 1052437.904] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_with  thrpt   30  1050174.427 ± 2263.477  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_withAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_withAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 680972.435 ops/s
# Warmup Iteration   2: 752392.306 ops/s
# Warmup Iteration   3: 980361.253 ops/s
# Warmup Iteration   4: 982437.312 ops/s
# Warmup Iteration   5: 972658.619 ops/s
# Warmup Iteration   6: 980032.392 ops/s
# Warmup Iteration   7: 983332.482 ops/s
# Warmup Iteration   8: 983564.004 ops/s
# Warmup Iteration   9: 978057.714 ops/s
# Warmup Iteration  10: 858243.891 ops/s
# Warmup Iteration  11: 939211.131 ops/s
# Warmup Iteration  12: 973619.054 ops/s
# Warmup Iteration  13: 983377.325 ops/s
# Warmup Iteration  14: 980855.340 ops/s
# Warmup Iteration  15: 980857.046 ops/s
# Warmup Iteration  16: 983550.186 ops/s
# Warmup Iteration  17: 1048277.622 ops/s
# Warmup Iteration  18: 1044156.903 ops/s
# Warmup Iteration  19: 1047717.559 ops/s
# Warmup Iteration  20: 1048266.588 ops/s
# Warmup Iteration  21: 1047262.977 ops/s
# Warmup Iteration  22: 1046488.482 ops/s
# Warmup Iteration  23: 1048743.834 ops/s
# Warmup Iteration  24: 1048311.761 ops/s
# Warmup Iteration  25: 1041989.259 ops/s
# Warmup Iteration  26: 1044418.870 ops/s
# Warmup Iteration  27: 1045881.198 ops/s
# Warmup Iteration  28: 1047750.207 ops/s
# Warmup Iteration  29: 1044210.460 ops/s
# Warmup Iteration  30: 1046817.098 ops/s
Iteration   1: 1047088.604 ops/s
Iteration   2: 1047913.689 ops/s
Iteration   3: 1049196.828 ops/s
Iteration   4: 1045968.613 ops/s
Iteration   5: 1045055.359 ops/s
Iteration   6: 1045227.810 ops/s
Iteration   7: 1044256.984 ops/s
Iteration   8: 1026622.527 ops/s
Iteration   9: 1050990.909 ops/s
Iteration  10: 1048780.430 ops/s
Iteration  11: 1046870.919 ops/s
Iteration  12: 1048611.308 ops/s
Iteration  13: 1047836.745 ops/s
Iteration  14: 1047448.728 ops/s
Iteration  15: 1049708.072 ops/s
Iteration  16: 1047250.690 ops/s
Iteration  17: 1042946.518 ops/s
Iteration  18: 1047770.270 ops/s
Iteration  19: 1045509.100 ops/s
Iteration  20: 1041496.032 ops/s
Iteration  21: 1050625.947 ops/s
Iteration  22: 1048598.507 ops/s
Iteration  23: 1042411.109 ops/s
Iteration  24: 1049018.532 ops/s
Iteration  25: 1029352.768 ops/s
Iteration  26: 1042522.656 ops/s
Iteration  27: 1050387.407 ops/s
Iteration  28: 1047458.680 ops/s
Iteration  29: 1050419.414 ops/s
Iteration  30: 1046367.846 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_withAll":
  1045790.433 ±(99.9%) 3655.535 ops/s [Average]
  (min, avg, max) = (1026622.527, 1045790.433, 1050990.909), stdev = 5471.434
  CI (99.9%): [1042134.898, 1049445.969] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_withAll  thrpt   30  1045790.433 ± 3655.535  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_without$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_without

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1810332.677 ops/s
# Warmup Iteration   2: 4200386.963 ops/s
# Warmup Iteration   3: 4749884.519 ops/s
# Warmup Iteration   4: 4578505.774 ops/s
# Warmup Iteration   5: 5104473.991 ops/s
# Warmup Iteration   6: 5100875.172 ops/s
# Warmup Iteration   7: 5103441.710 ops/s
# Warmup Iteration   8: 5109408.012 ops/s
# Warmup Iteration   9: 5114531.927 ops/s
# Warmup Iteration  10: 5097235.625 ops/s
# Warmup Iteration  11: 5113936.959 ops/s
# Warmup Iteration  12: 5110622.129 ops/s
# Warmup Iteration  13: 5102919.399 ops/s
# Warmup Iteration  14: 5109832.148 ops/s
# Warmup Iteration  15: 5100194.812 ops/s
# Warmup Iteration  16: 5112854.053 ops/s
# Warmup Iteration  17: 5106208.288 ops/s
# Warmup Iteration  18: 5106025.183 ops/s
# Warmup Iteration  19: 5108444.867 ops/s
# Warmup Iteration  20: 5115298.508 ops/s
# Warmup Iteration  21: 5114632.653 ops/s
# Warmup Iteration  22: 5111598.008 ops/s
# Warmup Iteration  23: 5115524.166 ops/s
# Warmup Iteration  24: 5105027.435 ops/s
# Warmup Iteration  25: 5109500.904 ops/s
# Warmup Iteration  26: 5109582.626 ops/s
# Warmup Iteration  27: 5100313.465 ops/s
# Warmup Iteration  28: 5064723.013 ops/s
# Warmup Iteration  29: 5110173.098 ops/s
# Warmup Iteration  30: 5120875.503 ops/s
Iteration   1: 5121537.710 ops/s
Iteration   2: 5111845.315 ops/s
Iteration   3: 5111020.101 ops/s
Iteration   4: 5102347.572 ops/s
Iteration   5: 5120096.707 ops/s
Iteration   6: 5097891.503 ops/s
Iteration   7: 5102253.740 ops/s
Iteration   8: 5116452.856 ops/s
Iteration   9: 5110106.763 ops/s
Iteration  10: 5098929.978 ops/s
Iteration  11: 5114483.532 ops/s
Iteration  12: 5122031.870 ops/s
Iteration  13: 5111142.594 ops/s
Iteration  14: 5094428.430 ops/s
Iteration  15: 5098730.905 ops/s
Iteration  16: 5092577.800 ops/s
Iteration  17: 5109450.257 ops/s
Iteration  18: 5096480.696 ops/s
Iteration  19: 5115774.611 ops/s
Iteration  20: 5109659.321 ops/s
Iteration  21: 5125211.380 ops/s
Iteration  22: 5109258.952 ops/s
Iteration  23: 5110461.676 ops/s
Iteration  24: 5032135.718 ops/s
Iteration  25: 5099904.456 ops/s
Iteration  26: 5108166.515 ops/s
Iteration  27: 5102055.497 ops/s
Iteration  28: 5121484.954 ops/s
Iteration  29: 5107736.743 ops/s
Iteration  30: 5113202.679 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_without":
  5106228.694 ±(99.9%) 11033.169 ops/s [Average]
  (min, avg, max) = (5032135.718, 5106228.694, 5125211.380), stdev = 16513.929
  CI (99.9%): [5095195.525, 5117261.863] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_without  thrpt   30  5106228.694 ± 11033.169  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_withoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_withoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1769786.279 ops/s
# Warmup Iteration   2: 4120599.269 ops/s
# Warmup Iteration   3: 4061684.273 ops/s
# Warmup Iteration   4: 4594233.970 ops/s
# Warmup Iteration   5: 4709996.101 ops/s
# Warmup Iteration   6: 4744582.605 ops/s
# Warmup Iteration   7: 4735573.948 ops/s
# Warmup Iteration   8: 4735599.748 ops/s
# Warmup Iteration   9: 4728250.388 ops/s
# Warmup Iteration  10: 4738906.421 ops/s
# Warmup Iteration  11: 4665046.907 ops/s
# Warmup Iteration  12: 4731672.226 ops/s
# Warmup Iteration  13: 4730371.266 ops/s
# Warmup Iteration  14: 4726843.870 ops/s
# Warmup Iteration  15: 4693782.780 ops/s
# Warmup Iteration  16: 4697800.236 ops/s
# Warmup Iteration  17: 4723594.615 ops/s
# Warmup Iteration  18: 4724179.665 ops/s
# Warmup Iteration  19: 4732315.847 ops/s
# Warmup Iteration  20: 4731825.293 ops/s
# Warmup Iteration  21: 4733189.465 ops/s
# Warmup Iteration  22: 4732802.055 ops/s
# Warmup Iteration  23: 4721807.498 ops/s
# Warmup Iteration  24: 4740534.513 ops/s
# Warmup Iteration  25: 4696058.460 ops/s
# Warmup Iteration  26: 4727651.698 ops/s
# Warmup Iteration  27: 4697664.711 ops/s
# Warmup Iteration  28: 4735015.331 ops/s
# Warmup Iteration  29: 4740558.669 ops/s
# Warmup Iteration  30: 4731288.978 ops/s
Iteration   1: 4746993.084 ops/s
Iteration   2: 4737909.770 ops/s
Iteration   3: 4735198.258 ops/s
Iteration   4: 4712309.864 ops/s
Iteration   5: 4671454.063 ops/s
Iteration   6: 4740379.927 ops/s
Iteration   7: 4727389.877 ops/s
Iteration   8: 4742244.753 ops/s
Iteration   9: 4656805.620 ops/s
Iteration  10: 4643307.269 ops/s
Iteration  11: 4718832.039 ops/s
Iteration  12: 4695142.494 ops/s
Iteration  13: 4736601.213 ops/s
Iteration  14: 4730440.803 ops/s
Iteration  15: 4734210.086 ops/s
Iteration  16: 4732479.426 ops/s
Iteration  17: 4739672.033 ops/s
Iteration  18: 4731215.995 ops/s
Iteration  19: 4750590.537 ops/s
Iteration  20: 4646237.210 ops/s
Iteration  21: 4724422.180 ops/s
Iteration  22: 4739551.138 ops/s
Iteration  23: 4724397.096 ops/s
Iteration  24: 4735937.871 ops/s
Iteration  25: 4726736.139 ops/s
Iteration  26: 4735723.371 ops/s
Iteration  27: 4728538.147 ops/s
Iteration  28: 4740949.920 ops/s
Iteration  29: 4732747.602 ops/s
Iteration  30: 4724692.732 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_withoutAll":
  4721437.017 ±(99.9%) 19375.465 ops/s [Average]
  (min, avg, max) = (4643307.269, 4721437.017, 4750590.537), stdev = 29000.286
  CI (99.9%): [4702061.553, 4740812.482] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
SynchronizedShortBooleanMapValuesTest._Benchmark.benchmark_withoutAll  thrpt   30  4721437.017 ± 19375.465  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 716530.683 ops/s
# Warmup Iteration   2: 801733.296 ops/s
# Warmup Iteration   3: 1024281.593 ops/s
# Warmup Iteration   4: 1022768.027 ops/s
# Warmup Iteration   5: 1023897.869 ops/s
# Warmup Iteration   6: 1017683.210 ops/s
# Warmup Iteration   7: 1024845.723 ops/s
# Warmup Iteration   8: 1025833.948 ops/s
# Warmup Iteration   9: 1024940.312 ops/s
# Warmup Iteration  10: 858232.795 ops/s
# Warmup Iteration  11: 1027571.919 ops/s
# Warmup Iteration  12: 1023353.740 ops/s
# Warmup Iteration  13: 1024058.486 ops/s
# Warmup Iteration  14: 1025742.548 ops/s
# Warmup Iteration  15: 1016362.799 ops/s
# Warmup Iteration  16: 1027727.425 ops/s
# Warmup Iteration  17: 1098539.998 ops/s
# Warmup Iteration  18: 1098907.256 ops/s
# Warmup Iteration  19: 1095532.800 ops/s
# Warmup Iteration  20: 1098463.549 ops/s
# Warmup Iteration  21: 1099293.880 ops/s
# Warmup Iteration  22: 1094917.846 ops/s
# Warmup Iteration  23: 1101669.525 ops/s
# Warmup Iteration  24: 1097394.457 ops/s
# Warmup Iteration  25: 1096679.046 ops/s
# Warmup Iteration  26: 1094604.111 ops/s
# Warmup Iteration  27: 1095922.485 ops/s
# Warmup Iteration  28: 1096044.999 ops/s
# Warmup Iteration  29: 1098185.914 ops/s
# Warmup Iteration  30: 1097178.622 ops/s
Iteration   1: 1095779.804 ops/s
Iteration   2: 1099318.758 ops/s
Iteration   3: 1100221.346 ops/s
Iteration   4: 1099768.890 ops/s
Iteration   5: 1099383.278 ops/s
Iteration   6: 1097798.586 ops/s
Iteration   7: 1096406.234 ops/s
Iteration   8: 1096314.502 ops/s
Iteration   9: 1100894.999 ops/s
Iteration  10: 1100241.184 ops/s
Iteration  11: 1089491.471 ops/s
Iteration  12: 1097728.270 ops/s
Iteration  13: 1103835.091 ops/s
Iteration  14: 1095551.199 ops/s
Iteration  15: 1099067.314 ops/s
Iteration  16: 1099947.153 ops/s
Iteration  17: 1092820.718 ops/s
Iteration  18: 1094845.839 ops/s
Iteration  19: 1098713.763 ops/s
Iteration  20: 1093888.888 ops/s
Iteration  21: 1094003.133 ops/s
Iteration  22: 1099745.640 ops/s
Iteration  23: 1098198.803 ops/s
Iteration  24: 1096156.660 ops/s
Iteration  25: 1097117.656 ops/s
Iteration  26: 1094926.866 ops/s
Iteration  27: 1099802.717 ops/s
Iteration  28: 1095799.375 ops/s
Iteration  29: 1097580.827 ops/s
Iteration  30: 1094568.293 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_add":
  1097330.575 ±(99.9%) 1947.404 ops/s [Average]
  (min, avg, max) = (1089491.471, 1097330.575, 1103835.091), stdev = 2914.782
  CI (99.9%): [1095383.171, 1099277.979] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_add  thrpt   30  1097330.575 ± 1947.404  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_addAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_addAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 714466.356 ops/s
# Warmup Iteration   2: 795917.090 ops/s
# Warmup Iteration   3: 1017378.025 ops/s
# Warmup Iteration   4: 1020116.067 ops/s
# Warmup Iteration   5: 1016967.302 ops/s
# Warmup Iteration   6: 1021772.383 ops/s
# Warmup Iteration   7: 1021989.682 ops/s
# Warmup Iteration   8: 1018782.216 ops/s
# Warmup Iteration   9: 1014732.958 ops/s
# Warmup Iteration  10: 852285.209 ops/s
# Warmup Iteration  11: 1021344.596 ops/s
# Warmup Iteration  12: 1020524.892 ops/s
# Warmup Iteration  13: 1021370.041 ops/s
# Warmup Iteration  14: 1021254.576 ops/s
# Warmup Iteration  15: 1019403.599 ops/s
# Warmup Iteration  16: 1020581.558 ops/s
# Warmup Iteration  17: 1090715.127 ops/s
# Warmup Iteration  18: 1090396.931 ops/s
# Warmup Iteration  19: 1092179.495 ops/s
# Warmup Iteration  20: 1089901.285 ops/s
# Warmup Iteration  21: 1084465.305 ops/s
# Warmup Iteration  22: 1093619.481 ops/s
# Warmup Iteration  23: 1090340.287 ops/s
# Warmup Iteration  24: 1090459.241 ops/s
# Warmup Iteration  25: 1089105.712 ops/s
# Warmup Iteration  26: 1079626.155 ops/s
# Warmup Iteration  27: 1085584.458 ops/s
# Warmup Iteration  28: 1078014.060 ops/s
# Warmup Iteration  29: 1087827.402 ops/s
# Warmup Iteration  30: 1088106.586 ops/s
Iteration   1: 1087349.427 ops/s
Iteration   2: 1071364.116 ops/s
Iteration   3: 1092834.879 ops/s
Iteration   4: 1088377.448 ops/s
Iteration   5: 1090098.990 ops/s
Iteration   6: 1088166.951 ops/s
Iteration   7: 1089407.471 ops/s
Iteration   8: 1084473.181 ops/s
Iteration   9: 1088770.809 ops/s
Iteration  10: 1086918.905 ops/s
Iteration  11: 1086261.778 ops/s
Iteration  12: 1090177.113 ops/s
Iteration  13: 1090990.145 ops/s
Iteration  14: 1087656.167 ops/s
Iteration  15: 1090501.456 ops/s
Iteration  16: 1085826.094 ops/s
Iteration  17: 1086452.912 ops/s
Iteration  18: 1085654.539 ops/s
Iteration  19: 1087129.552 ops/s
Iteration  20: 1083338.563 ops/s
Iteration  21: 1079431.728 ops/s
Iteration  22: 1090278.588 ops/s
Iteration  23: 1085271.335 ops/s
Iteration  24: 1087158.494 ops/s
Iteration  25: 1082367.095 ops/s
Iteration  26: 1072798.712 ops/s
Iteration  27: 1088359.916 ops/s
Iteration  28: 1090556.196 ops/s
Iteration  29: 1087559.047 ops/s
Iteration  30: 1088794.581 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_addAllArray":
  1086477.540 ±(99.9%) 3204.200 ops/s [Average]
  (min, avg, max) = (1071364.116, 1086477.540, 1092834.879), stdev = 4795.896
  CI (99.9%): [1083273.340, 1089681.740] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_addAllArray  thrpt   30  1086477.540 ± 3204.200  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_addAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_addAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 710878.785 ops/s
# Warmup Iteration   2: 795883.936 ops/s
# Warmup Iteration   3: 1032461.998 ops/s
# Warmup Iteration   4: 1031973.661 ops/s
# Warmup Iteration   5: 1031136.406 ops/s
# Warmup Iteration   6: 1022391.845 ops/s
# Warmup Iteration   7: 1034119.380 ops/s
# Warmup Iteration   8: 1032529.002 ops/s
# Warmup Iteration   9: 1029745.067 ops/s
# Warmup Iteration  10: 860719.939 ops/s
# Warmup Iteration  11: 1028020.968 ops/s
# Warmup Iteration  12: 1033472.562 ops/s
# Warmup Iteration  13: 1031963.809 ops/s
# Warmup Iteration  14: 1023611.934 ops/s
# Warmup Iteration  15: 1031320.202 ops/s
# Warmup Iteration  16: 1032440.043 ops/s
# Warmup Iteration  17: 1092281.927 ops/s
# Warmup Iteration  18: 1093547.982 ops/s
# Warmup Iteration  19: 1089492.359 ops/s
# Warmup Iteration  20: 1092582.553 ops/s
# Warmup Iteration  21: 1094429.605 ops/s
# Warmup Iteration  22: 1093111.353 ops/s
# Warmup Iteration  23: 1094980.946 ops/s
# Warmup Iteration  24: 1094959.407 ops/s
# Warmup Iteration  25: 1088937.449 ops/s
# Warmup Iteration  26: 1090465.620 ops/s
# Warmup Iteration  27: 1093651.577 ops/s
# Warmup Iteration  28: 1093630.561 ops/s
# Warmup Iteration  29: 1091652.343 ops/s
# Warmup Iteration  30: 1093970.750 ops/s
Iteration   1: 1094058.596 ops/s
Iteration   2: 1092264.870 ops/s
Iteration   3: 1097362.781 ops/s
Iteration   4: 1091925.370 ops/s
Iteration   5: 1077678.609 ops/s
Iteration   6: 1094942.075 ops/s
Iteration   7: 1091180.671 ops/s
Iteration   8: 1095834.970 ops/s
Iteration   9: 1094685.985 ops/s
Iteration  10: 1093115.068 ops/s
Iteration  11: 1095271.044 ops/s
Iteration  12: 1090055.447 ops/s
Iteration  13: 1093252.343 ops/s
Iteration  14: 1095077.389 ops/s
Iteration  15: 1094299.437 ops/s
Iteration  16: 1092913.819 ops/s
Iteration  17: 1095072.097 ops/s
Iteration  18: 1093695.980 ops/s
Iteration  19: 1091707.663 ops/s
Iteration  20: 1092210.616 ops/s
Iteration  21: 1087859.311 ops/s
Iteration  22: 1090525.539 ops/s
Iteration  23: 1085244.269 ops/s
Iteration  24: 1088519.055 ops/s
Iteration  25: 1094733.190 ops/s
Iteration  26: 1092443.821 ops/s
Iteration  27: 1093200.493 ops/s
Iteration  28: 1095510.176 ops/s
Iteration  29: 1094082.571 ops/s
Iteration  30: 1091883.906 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_addAllIterable":
  1092353.572 ±(99.9%) 2523.930 ops/s [Average]
  (min, avg, max) = (1077678.609, 1092353.572, 1097362.781), stdev = 3777.700
  CI (99.9%): [1089829.642, 1094877.502] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score      Error  Units
UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_addAllIterable  thrpt   30  1092353.572 ± 2523.930  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2095442.101 ops/s
# Warmup Iteration   2: 4184257.552 ops/s
# Warmup Iteration   3: 4198629.936 ops/s
# Warmup Iteration   4: 4568261.343 ops/s
# Warmup Iteration   5: 4587136.891 ops/s
# Warmup Iteration   6: 4587532.313 ops/s
# Warmup Iteration   7: 4577168.974 ops/s
# Warmup Iteration   8: 4587056.970 ops/s
# Warmup Iteration   9: 4584326.374 ops/s
# Warmup Iteration  10: 4573331.216 ops/s
# Warmup Iteration  11: 4581074.381 ops/s
# Warmup Iteration  12: 4560392.235 ops/s
# Warmup Iteration  13: 4583558.110 ops/s
# Warmup Iteration  14: 4583241.152 ops/s
# Warmup Iteration  15: 4573935.637 ops/s
# Warmup Iteration  16: 4578546.408 ops/s
# Warmup Iteration  17: 4545642.048 ops/s
# Warmup Iteration  18: 4581126.256 ops/s
# Warmup Iteration  19: 4581572.313 ops/s
# Warmup Iteration  20: 4574549.489 ops/s
# Warmup Iteration  21: 4561186.011 ops/s
# Warmup Iteration  22: 4583080.957 ops/s
# Warmup Iteration  23: 4572450.209 ops/s
# Warmup Iteration  24: 4577123.207 ops/s
# Warmup Iteration  25: 4567424.667 ops/s
# Warmup Iteration  26: 4574810.826 ops/s
# Warmup Iteration  27: 4583339.746 ops/s
# Warmup Iteration  28: 4565753.101 ops/s
# Warmup Iteration  29: 4582038.840 ops/s
# Warmup Iteration  30: 4582527.662 ops/s
Iteration   1: 4583099.103 ops/s
Iteration   2: 4582617.598 ops/s
Iteration   3: 4567739.487 ops/s
Iteration   4: 4572757.105 ops/s
Iteration   5: 4581604.738 ops/s
Iteration   6: 4580135.980 ops/s
Iteration   7: 4590061.970 ops/s
Iteration   8: 4575279.247 ops/s
Iteration   9: 4590800.221 ops/s
Iteration  10: 4582594.133 ops/s
Iteration  11: 4571448.677 ops/s
Iteration  12: 4582016.488 ops/s
Iteration  13: 4592020.797 ops/s
Iteration  14: 4590005.800 ops/s
Iteration  15: 4582158.784 ops/s
Iteration  16: 4586495.652 ops/s
Iteration  17: 4577127.789 ops/s
Iteration  18: 4586042.094 ops/s
Iteration  19: 4575458.413 ops/s
Iteration  20: 4577089.885 ops/s
Iteration  21: 4558786.481 ops/s
Iteration  22: 4585231.932 ops/s
Iteration  23: 4575626.355 ops/s
Iteration  24: 4592155.378 ops/s
Iteration  25: 4577926.339 ops/s
Iteration  26: 4578080.600 ops/s
Iteration  27: 4572966.748 ops/s
Iteration  28: 4577488.102 ops/s
Iteration  29: 4592369.408 ops/s
Iteration  30: 4571833.469 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_allSatisfy":
  4580300.626 ±(99.9%) 5316.399 ops/s [Average]
  (min, avg, max) = (4558786.481, 4580300.626, 4592369.408), stdev = 7957.336
  CI (99.9%): [4574984.227, 4585617.025] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_allSatisfy  thrpt   30  4580300.626 ± 5316.399  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2506689.384 ops/s
# Warmup Iteration   2: 4524523.567 ops/s
# Warmup Iteration   3: 5364095.547 ops/s
# Warmup Iteration   4: 5355552.245 ops/s
# Warmup Iteration   5: 5348043.526 ops/s
# Warmup Iteration   6: 5362167.509 ops/s
# Warmup Iteration   7: 5320736.982 ops/s
# Warmup Iteration   8: 5353068.856 ops/s
# Warmup Iteration   9: 5365800.110 ops/s
# Warmup Iteration  10: 5354519.284 ops/s
# Warmup Iteration  11: 5353015.975 ops/s
# Warmup Iteration  12: 5364991.609 ops/s
# Warmup Iteration  13: 5333379.217 ops/s
# Warmup Iteration  14: 5373351.824 ops/s
# Warmup Iteration  15: 5362203.480 ops/s
# Warmup Iteration  16: 5360546.193 ops/s
# Warmup Iteration  17: 5367308.438 ops/s
# Warmup Iteration  18: 5332078.660 ops/s
# Warmup Iteration  19: 5363805.137 ops/s
# Warmup Iteration  20: 5362471.304 ops/s
# Warmup Iteration  21: 5353516.551 ops/s
# Warmup Iteration  22: 5368076.404 ops/s
# Warmup Iteration  23: 5360706.177 ops/s
# Warmup Iteration  24: 5359177.626 ops/s
# Warmup Iteration  25: 5310322.497 ops/s
# Warmup Iteration  26: 5363262.510 ops/s
# Warmup Iteration  27: 5369587.432 ops/s
# Warmup Iteration  28: 5360444.795 ops/s
# Warmup Iteration  29: 5357857.956 ops/s
# Warmup Iteration  30: 5353977.843 ops/s
Iteration   1: 5362780.217 ops/s
Iteration   2: 5346836.965 ops/s
Iteration   3: 5369678.932 ops/s
Iteration   4: 5353016.555 ops/s
Iteration   5: 5383575.592 ops/s
Iteration   6: 5349660.485 ops/s
Iteration   7: 5359308.274 ops/s
Iteration   8: 5396496.207 ops/s
Iteration   9: 5349146.499 ops/s
Iteration  10: 5359817.101 ops/s
Iteration  11: 5366134.512 ops/s
Iteration  12: 5376911.230 ops/s
Iteration  13: 5376151.190 ops/s
Iteration  14: 5345219.250 ops/s
Iteration  15: 5359034.742 ops/s
Iteration  16: 5353855.437 ops/s
Iteration  17: 5381969.642 ops/s
Iteration  18: 5364212.904 ops/s
Iteration  19: 5368972.170 ops/s
Iteration  20: 5344666.272 ops/s
Iteration  21: 5368609.969 ops/s
Iteration  22: 5364711.661 ops/s
Iteration  23: 5379902.059 ops/s
Iteration  24: 5383222.071 ops/s
Iteration  25: 5344417.977 ops/s
Iteration  26: 5362960.793 ops/s
Iteration  27: 5373437.170 ops/s
Iteration  28: 5379403.388 ops/s
Iteration  29: 5373593.496 ops/s
Iteration  30: 5377872.909 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_anySatisfy":
  5365852.522 ±(99.9%) 9126.265 ops/s [Average]
  (min, avg, max) = (5344417.977, 5365852.522, 5396496.207), stdev = 13659.766
  CI (99.9%): [5356726.257, 5374978.788] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_anySatisfy  thrpt   30  5365852.522 ± 9126.265  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1438887.874 ops/s
# Warmup Iteration   2: 3115542.068 ops/s
# Warmup Iteration   3: 2619192.827 ops/s
# Warmup Iteration   4: 3135944.812 ops/s
# Warmup Iteration   5: 3122121.716 ops/s
# Warmup Iteration   6: 3137717.659 ops/s
# Warmup Iteration   7: 3095910.625 ops/s
# Warmup Iteration   8: 3123939.428 ops/s
# Warmup Iteration   9: 3096588.998 ops/s
# Warmup Iteration  10: 3109156.778 ops/s
# Warmup Iteration  11: 3103347.575 ops/s
# Warmup Iteration  12: 3139627.652 ops/s
# Warmup Iteration  13: 3127325.781 ops/s
# Warmup Iteration  14: 3133342.288 ops/s
# Warmup Iteration  15: 3133332.169 ops/s
# Warmup Iteration  16: 3136904.866 ops/s
# Warmup Iteration  17: 3100317.880 ops/s
# Warmup Iteration  18: 3094520.753 ops/s
# Warmup Iteration  19: 3126450.693 ops/s
# Warmup Iteration  20: 3097989.790 ops/s
# Warmup Iteration  21: 3113224.346 ops/s
# Warmup Iteration  22: 3135355.477 ops/s
# Warmup Iteration  23: 3078677.376 ops/s
# Warmup Iteration  24: 3126947.415 ops/s
# Warmup Iteration  25: 3091440.614 ops/s
# Warmup Iteration  26: 3112522.356 ops/s
# Warmup Iteration  27: 3138655.461 ops/s
# Warmup Iteration  28: 3129894.119 ops/s
# Warmup Iteration  29: 3133549.146 ops/s
# Warmup Iteration  30: 3121248.636 ops/s
Iteration   1: 3099780.883 ops/s
Iteration   2: 3104822.070 ops/s
Iteration   3: 3117026.377 ops/s
Iteration   4: 3070772.002 ops/s
Iteration   5: 3119095.454 ops/s
Iteration   6: 3102774.926 ops/s
Iteration   7: 3128437.543 ops/s
Iteration   8: 3064835.107 ops/s
Iteration   9: 3085433.730 ops/s
Iteration  10: 3136965.606 ops/s
Iteration  11: 3114784.580 ops/s
Iteration  12: 3117436.336 ops/s
Iteration  13: 3111734.776 ops/s
Iteration  14: 3104273.361 ops/s
Iteration  15: 3117731.809 ops/s
Iteration  16: 3109018.557 ops/s
Iteration  17: 3116718.433 ops/s
Iteration  18: 3084252.590 ops/s
Iteration  19: 3110501.997 ops/s
Iteration  20: 3061447.725 ops/s
Iteration  21: 3098587.932 ops/s
Iteration  22: 3101964.941 ops/s
Iteration  23: 3145143.851 ops/s
Iteration  24: 3109082.668 ops/s
Iteration  25: 3086192.497 ops/s
Iteration  26: 3135417.720 ops/s
Iteration  27: 3125980.556 ops/s
Iteration  28: 3123491.808 ops/s
Iteration  29: 3120950.169 ops/s
Iteration  30: 3121438.761 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_appendString":
  3108203.159 ±(99.9%) 13613.378 ops/s [Average]
  (min, avg, max) = (3061447.725, 3108203.159, 3145143.851), stdev = 20375.864
  CI (99.9%): [3094589.781, 3121816.537] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_appendString  thrpt   30  3108203.159 ± 13613.378  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_asLazy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_asLazy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3464744.958 ops/s
# Warmup Iteration   2: 7208281.778 ops/s
# Warmup Iteration   3: 7454679.828 ops/s
# Warmup Iteration   4: 7215014.740 ops/s
# Warmup Iteration   5: 6506666.805 ops/s
# Warmup Iteration   6: 7488823.090 ops/s
# Warmup Iteration   7: 7479535.477 ops/s
# Warmup Iteration   8: 7503844.985 ops/s
# Warmup Iteration   9: 7494558.271 ops/s
# Warmup Iteration  10: 7464199.633 ops/s
# Warmup Iteration  11: 7495726.036 ops/s
# Warmup Iteration  12: 7480068.048 ops/s
# Warmup Iteration  13: 7491310.744 ops/s
# Warmup Iteration  14: 7458010.560 ops/s
# Warmup Iteration  15: 7490898.110 ops/s
# Warmup Iteration  16: 7467713.149 ops/s
# Warmup Iteration  17: 7494472.225 ops/s
# Warmup Iteration  18: 7463975.610 ops/s
# Warmup Iteration  19: 7502544.867 ops/s
# Warmup Iteration  20: 7426174.682 ops/s
# Warmup Iteration  21: 7487694.242 ops/s
# Warmup Iteration  22: 7480924.610 ops/s
# Warmup Iteration  23: 7470068.918 ops/s
# Warmup Iteration  24: 7490740.653 ops/s
# Warmup Iteration  25: 7490887.586 ops/s
# Warmup Iteration  26: 7505974.937 ops/s
# Warmup Iteration  27: 7474955.686 ops/s
# Warmup Iteration  28: 7479449.507 ops/s
# Warmup Iteration  29: 7472928.035 ops/s
# Warmup Iteration  30: 7484103.564 ops/s
Iteration   1: 7475644.922 ops/s
Iteration   2: 7456301.567 ops/s
Iteration   3: 7481431.446 ops/s
Iteration   4: 7472959.065 ops/s
Iteration   5: 7485570.625 ops/s
Iteration   6: 7467438.255 ops/s
Iteration   7: 7493259.316 ops/s
Iteration   8: 7486273.288 ops/s
Iteration   9: 7505475.438 ops/s
Iteration  10: 7473088.405 ops/s
Iteration  11: 7484306.159 ops/s
Iteration  12: 7488627.037 ops/s
Iteration  13: 7454226.884 ops/s
Iteration  14: 7364101.926 ops/s
Iteration  15: 7473258.882 ops/s
Iteration  16: 7487263.210 ops/s
Iteration  17: 7486929.003 ops/s
Iteration  18: 7498107.925 ops/s
Iteration  19: 7481005.875 ops/s
Iteration  20: 7460606.579 ops/s
Iteration  21: 7497368.510 ops/s
Iteration  22: 7486498.801 ops/s
Iteration  23: 7489315.240 ops/s
Iteration  24: 7454382.830 ops/s
Iteration  25: 7474323.258 ops/s
Iteration  26: 7468140.114 ops/s
Iteration  27: 7479462.386 ops/s
Iteration  28: 7467564.235 ops/s
Iteration  29: 7463072.815 ops/s
Iteration  30: 7349364.207 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_asLazy":
  7470178.940 ±(99.9%) 22416.793 ops/s [Average]
  (min, avg, max) = (7349364.207, 7470178.940, 7505475.438), stdev = 33552.404
  CI (99.9%): [7447762.147, 7492595.734] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_asLazy  thrpt   30  7470178.940 ± 22416.793  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_asSynchronized$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_asSynchronized

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9161189.898 ops/s
# Warmup Iteration   2: 19130224.167 ops/s
# Warmup Iteration   3: 16121392.326 ops/s
# Warmup Iteration   4: 19367212.712 ops/s
# Warmup Iteration   5: 19390232.680 ops/s
# Warmup Iteration   6: 19351357.236 ops/s
# Warmup Iteration   7: 19356128.600 ops/s
# Warmup Iteration   8: 19361891.301 ops/s
# Warmup Iteration   9: 19299385.115 ops/s
# Warmup Iteration  10: 19369027.365 ops/s
# Warmup Iteration  11: 19375807.023 ops/s
# Warmup Iteration  12: 19311002.131 ops/s
# Warmup Iteration  13: 19369015.349 ops/s
# Warmup Iteration  14: 19158918.245 ops/s
# Warmup Iteration  15: 19361708.601 ops/s
# Warmup Iteration  16: 19353728.741 ops/s
# Warmup Iteration  17: 19322849.582 ops/s
# Warmup Iteration  18: 19199172.375 ops/s
# Warmup Iteration  19: 19321711.666 ops/s
# Warmup Iteration  20: 19325005.183 ops/s
# Warmup Iteration  21: 19325712.455 ops/s
# Warmup Iteration  22: 19145747.962 ops/s
# Warmup Iteration  23: 19252148.409 ops/s
# Warmup Iteration  24: 19293673.300 ops/s
# Warmup Iteration  25: 19313632.511 ops/s
# Warmup Iteration  26: 19249216.449 ops/s
# Warmup Iteration  27: 19354502.684 ops/s
# Warmup Iteration  28: 19303136.550 ops/s
# Warmup Iteration  29: 19298688.124 ops/s
# Warmup Iteration  30: 19367543.262 ops/s
Iteration   1: 19338240.876 ops/s
Iteration   2: 19317823.865 ops/s
Iteration   3: 19307559.856 ops/s
Iteration   4: 19370357.813 ops/s
Iteration   5: 19400682.930 ops/s
Iteration   6: 19299547.147 ops/s
Iteration   7: 19363915.353 ops/s
Iteration   8: 19362752.488 ops/s
Iteration   9: 19363107.125 ops/s
Iteration  10: 19344852.834 ops/s
Iteration  11: 19246111.191 ops/s
Iteration  12: 19402086.016 ops/s
Iteration  13: 19269489.313 ops/s
Iteration  14: 19345175.673 ops/s
Iteration  15: 19294630.070 ops/s
Iteration  16: 19369537.306 ops/s
Iteration  17: 19374816.324 ops/s
Iteration  18: 19304290.304 ops/s
Iteration  19: 19305136.769 ops/s
Iteration  20: 19287739.457 ops/s
Iteration  21: 19355295.070 ops/s
Iteration  22: 19379114.892 ops/s
Iteration  23: 19250881.151 ops/s
Iteration  24: 19329052.108 ops/s
Iteration  25: 19287177.994 ops/s
Iteration  26: 19366523.712 ops/s
Iteration  27: 19348833.702 ops/s
Iteration  28: 19213709.269 ops/s
Iteration  29: 19376993.083 ops/s
Iteration  30: 19261728.546 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_asSynchronized":
  19327905.408 ±(99.9%) 32570.784 ops/s [Average]
  (min, avg, max) = (19213709.269, 19327905.408, 19402086.016), stdev = 48750.420
  CI (99.9%): [19295334.624, 19360476.192] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt         Score       Error  Units
UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_asSynchronized  thrpt   30  19327905.408 ± 32570.784  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_asUnmodifiable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_asUnmodifiable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7908485.612 ops/s
# Warmup Iteration   2: 14524099.751 ops/s
# Warmup Iteration   3: 13987738.520 ops/s
# Warmup Iteration   4: 15541424.078 ops/s
# Warmup Iteration   5: 15513022.101 ops/s
# Warmup Iteration   6: 15503073.121 ops/s
# Warmup Iteration   7: 15422621.522 ops/s
# Warmup Iteration   8: 15485554.154 ops/s
# Warmup Iteration   9: 15582263.385 ops/s
# Warmup Iteration  10: 15467301.756 ops/s
# Warmup Iteration  11: 15509393.322 ops/s
# Warmup Iteration  12: 15559008.241 ops/s
# Warmup Iteration  13: 15354239.382 ops/s
# Warmup Iteration  14: 15451308.735 ops/s
# Warmup Iteration  15: 15534204.519 ops/s
# Warmup Iteration  16: 15536112.262 ops/s
# Warmup Iteration  17: 15565955.307 ops/s
# Warmup Iteration  18: 15524242.219 ops/s
# Warmup Iteration  19: 15490942.859 ops/s
# Warmup Iteration  20: 15504348.877 ops/s
# Warmup Iteration  21: 15555980.017 ops/s
# Warmup Iteration  22: 15493362.221 ops/s
# Warmup Iteration  23: 15493244.686 ops/s
# Warmup Iteration  24: 15541871.339 ops/s
# Warmup Iteration  25: 15519578.589 ops/s
# Warmup Iteration  26: 15545165.600 ops/s
# Warmup Iteration  27: 15502927.458 ops/s
# Warmup Iteration  28: 15471511.555 ops/s
# Warmup Iteration  29: 15548639.752 ops/s
# Warmup Iteration  30: 15471130.647 ops/s
Iteration   1: 15491941.031 ops/s
Iteration   2: 15532519.617 ops/s
Iteration   3: 15539810.449 ops/s
Iteration   4: 15593892.438 ops/s
Iteration   5: 15552360.684 ops/s
Iteration   6: 15505341.001 ops/s
Iteration   7: 15436182.719 ops/s
Iteration   8: 15558695.108 ops/s
Iteration   9: 15334680.123 ops/s
Iteration  10: 15540075.741 ops/s
Iteration  11: 15535973.133 ops/s
Iteration  12: 15540564.828 ops/s
Iteration  13: 15450411.822 ops/s
Iteration  14: 15272105.701 ops/s
Iteration  15: 15235152.353 ops/s
Iteration  16: 15517415.896 ops/s
Iteration  17: 15605093.300 ops/s
Iteration  18: 15498002.631 ops/s
Iteration  19: 15435437.755 ops/s
Iteration  20: 15440865.066 ops/s
Iteration  21: 15539834.153 ops/s
Iteration  22: 15522292.693 ops/s
Iteration  23: 15419866.952 ops/s
Iteration  24: 15518330.629 ops/s
Iteration  25: 15522458.725 ops/s
Iteration  26: 15576570.927 ops/s
Iteration  27: 15501265.379 ops/s
Iteration  28: 15461353.627 ops/s
Iteration  29: 15469437.621 ops/s
Iteration  30: 15509355.701 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_asUnmodifiable":
  15488576.260 ±(99.9%) 56996.400 ops/s [Average]
  (min, avg, max) = (15235152.353, 15488576.260, 15605093.300), stdev = 85309.535
  CI (99.9%): [15431579.860, 15545572.660] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt         Score       Error  Units
UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_asUnmodifiable  thrpt   30  15488576.260 ± 56996.400  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_booleanIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_booleanIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 549530.120 ops/s
# Warmup Iteration   2: 587824.213 ops/s
# Warmup Iteration   3: 789399.236 ops/s
# Warmup Iteration   4: 796432.352 ops/s
# Warmup Iteration   5: 796504.668 ops/s
# Warmup Iteration   6: 797794.017 ops/s
# Warmup Iteration   7: 794027.283 ops/s
# Warmup Iteration   8: 794751.248 ops/s
# Warmup Iteration   9: 797581.140 ops/s
# Warmup Iteration  10: 796712.891 ops/s
# Warmup Iteration  11: 712486.195 ops/s
# Warmup Iteration  12: 743268.287 ops/s
# Warmup Iteration  13: 796273.970 ops/s
# Warmup Iteration  14: 795945.580 ops/s
# Warmup Iteration  15: 796425.011 ops/s
# Warmup Iteration  16: 794714.480 ops/s
# Warmup Iteration  17: 835411.715 ops/s
# Warmup Iteration  18: 837208.628 ops/s
# Warmup Iteration  19: 838719.156 ops/s
# Warmup Iteration  20: 828605.451 ops/s
# Warmup Iteration  21: 837721.077 ops/s
# Warmup Iteration  22: 838346.348 ops/s
# Warmup Iteration  23: 837391.900 ops/s
# Warmup Iteration  24: 837404.872 ops/s
# Warmup Iteration  25: 837579.165 ops/s
# Warmup Iteration  26: 838250.024 ops/s
# Warmup Iteration  27: 839779.538 ops/s
# Warmup Iteration  28: 836127.216 ops/s
# Warmup Iteration  29: 834049.097 ops/s
# Warmup Iteration  30: 837022.895 ops/s
Iteration   1: 837624.324 ops/s
Iteration   2: 821656.630 ops/s
Iteration   3: 839560.207 ops/s
Iteration   4: 834168.416 ops/s
Iteration   5: 838055.578 ops/s
Iteration   6: 840409.563 ops/s
Iteration   7: 837681.682 ops/s
Iteration   8: 837139.976 ops/s
Iteration   9: 839166.445 ops/s
Iteration  10: 841527.076 ops/s
Iteration  11: 833523.861 ops/s
Iteration  12: 837114.555 ops/s
Iteration  13: 838627.672 ops/s
Iteration  14: 837793.670 ops/s
Iteration  15: 838806.847 ops/s
Iteration  16: 840992.927 ops/s
Iteration  17: 839862.527 ops/s
Iteration  18: 835457.103 ops/s
Iteration  19: 834493.724 ops/s
Iteration  20: 840682.785 ops/s
Iteration  21: 840886.102 ops/s
Iteration  22: 836864.123 ops/s
Iteration  23: 838191.486 ops/s
Iteration  24: 838395.722 ops/s
Iteration  25: 838074.171 ops/s
Iteration  26: 839587.462 ops/s
Iteration  27: 839480.998 ops/s
Iteration  28: 837193.012 ops/s
Iteration  29: 839113.621 ops/s
Iteration  30: 835416.631 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_booleanIterator":
  837584.963 ±(99.9%) 2428.117 ops/s [Average]
  (min, avg, max) = (821656.630, 837584.963, 841527.076), stdev = 3634.291
  CI (99.9%): [835156.846, 840013.080] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_booleanIterator  thrpt   30  837584.963 ± 2428.117  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 684482.261 ops/s
# Warmup Iteration   2: 788066.370 ops/s
# Warmup Iteration   3: 998810.460 ops/s
# Warmup Iteration   4: 1000566.571 ops/s
# Warmup Iteration   5: 996501.139 ops/s
# Warmup Iteration   6: 998187.062 ops/s
# Warmup Iteration   7: 988793.240 ops/s
# Warmup Iteration   8: 999293.693 ops/s
# Warmup Iteration   9: 998289.557 ops/s
# Warmup Iteration  10: 840257.312 ops/s
# Warmup Iteration  11: 999870.500 ops/s
# Warmup Iteration  12: 991011.851 ops/s
# Warmup Iteration  13: 998166.021 ops/s
# Warmup Iteration  14: 998399.465 ops/s
# Warmup Iteration  15: 998358.989 ops/s
# Warmup Iteration  16: 1002937.911 ops/s
# Warmup Iteration  17: 1059022.761 ops/s
# Warmup Iteration  18: 1060146.308 ops/s
# Warmup Iteration  19: 1062077.704 ops/s
# Warmup Iteration  20: 1063138.881 ops/s
# Warmup Iteration  21: 1054348.276 ops/s
# Warmup Iteration  22: 1053713.754 ops/s
# Warmup Iteration  23: 1060271.343 ops/s
# Warmup Iteration  24: 1061724.110 ops/s
# Warmup Iteration  25: 1055009.171 ops/s
# Warmup Iteration  26: 1063150.613 ops/s
# Warmup Iteration  27: 1063906.786 ops/s
# Warmup Iteration  28: 1062652.349 ops/s
# Warmup Iteration  29: 1062608.288 ops/s
# Warmup Iteration  30: 1059089.217 ops/s
Iteration   1: 1066001.716 ops/s
Iteration   2: 1059100.844 ops/s
Iteration   3: 1061757.547 ops/s
Iteration   4: 1059615.111 ops/s
Iteration   5: 1064118.009 ops/s
Iteration   6: 1064399.497 ops/s
Iteration   7: 1063356.576 ops/s
Iteration   8: 1059608.996 ops/s
Iteration   9: 1059940.107 ops/s
Iteration  10: 1061178.988 ops/s
Iteration  11: 1061522.920 ops/s
Iteration  12: 1043021.259 ops/s
Iteration  13: 1061778.179 ops/s
Iteration  14: 1055248.730 ops/s
Iteration  15: 1060993.418 ops/s
Iteration  16: 1064405.304 ops/s
Iteration  17: 1066269.921 ops/s
Iteration  18: 1061510.926 ops/s
Iteration  19: 1065152.196 ops/s
Iteration  20: 1061333.582 ops/s
Iteration  21: 1064778.676 ops/s
Iteration  22: 1060405.213 ops/s
Iteration  23: 1057905.903 ops/s
Iteration  24: 1060292.395 ops/s
Iteration  25: 1058299.926 ops/s
Iteration  26: 1062447.034 ops/s
Iteration  27: 1061090.370 ops/s
Iteration  28: 1060385.805 ops/s
Iteration  29: 1059254.632 ops/s
Iteration  30: 1062585.951 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove":
  1060925.324 ±(99.9%) 2815.714 ops/s [Average]
  (min, avg, max) = (1043021.259, 1060925.324, 1066269.921), stdev = 4214.429
  CI (99.9%): [1058109.610, 1063741.038] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt        Score      Error  Units
UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove  thrpt   30  1060925.324 ± 2815.714  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_chunk$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_chunk

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 142042.819 ops/s
# Warmup Iteration   2: 238015.605 ops/s
# Warmup Iteration   3: 273543.860 ops/s
# Warmup Iteration   4: 274590.047 ops/s
# Warmup Iteration   5: 274417.911 ops/s
# Warmup Iteration   6: 229845.947 ops/s
# Warmup Iteration   7: 275100.588 ops/s
# Warmup Iteration   8: 275072.565 ops/s
# Warmup Iteration   9: 275051.668 ops/s
# Warmup Iteration  10: 274491.351 ops/s
# Warmup Iteration  11: 274894.499 ops/s
# Warmup Iteration  12: 275466.680 ops/s
# Warmup Iteration  13: 275632.376 ops/s
# Warmup Iteration  14: 275504.383 ops/s
# Warmup Iteration  15: 275366.823 ops/s
# Warmup Iteration  16: 274998.703 ops/s
# Warmup Iteration  17: 284145.720 ops/s
# Warmup Iteration  18: 283834.885 ops/s
# Warmup Iteration  19: 284155.451 ops/s
# Warmup Iteration  20: 283513.889 ops/s
# Warmup Iteration  21: 284053.703 ops/s
# Warmup Iteration  22: 283505.526 ops/s
# Warmup Iteration  23: 284151.901 ops/s
# Warmup Iteration  24: 284277.980 ops/s
# Warmup Iteration  25: 284092.260 ops/s
# Warmup Iteration  26: 284010.831 ops/s
# Warmup Iteration  27: 282798.246 ops/s
# Warmup Iteration  28: 284227.864 ops/s
# Warmup Iteration  29: 284047.455 ops/s
# Warmup Iteration  30: 284011.373 ops/s
Iteration   1: 283890.336 ops/s
Iteration   2: 284517.035 ops/s
Iteration   3: 283483.258 ops/s
Iteration   4: 284129.249 ops/s
Iteration   5: 284414.484 ops/s
Iteration   6: 284719.652 ops/s
Iteration   7: 283609.841 ops/s
Iteration   8: 284799.272 ops/s
Iteration   9: 283831.487 ops/s
Iteration  10: 283820.913 ops/s
Iteration  11: 284026.320 ops/s
Iteration  12: 283502.636 ops/s
Iteration  13: 283837.058 ops/s
Iteration  14: 283531.415 ops/s
Iteration  15: 285296.206 ops/s
Iteration  16: 283366.381 ops/s
Iteration  17: 279433.026 ops/s
Iteration  18: 284621.349 ops/s
Iteration  19: 285023.187 ops/s
Iteration  20: 279448.160 ops/s
Iteration  21: 283437.262 ops/s
Iteration  22: 283918.059 ops/s
Iteration  23: 284394.388 ops/s
Iteration  24: 284501.431 ops/s
Iteration  25: 284108.853 ops/s
Iteration  26: 284623.909 ops/s
Iteration  27: 283635.309 ops/s
Iteration  28: 282796.946 ops/s
Iteration  29: 284424.227 ops/s
Iteration  30: 284078.095 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_chunk":
  283773.991 ±(99.9%) 868.946 ops/s [Average]
  (min, avg, max) = (279433.026, 283773.991, 285296.206), stdev = 1300.598
  CI (99.9%): [282905.045, 284642.938] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score     Error  Units
UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_chunk  thrpt   30  283773.991 ± 868.946  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 722214.551 ops/s
# Warmup Iteration   2: 801976.186 ops/s
# Warmup Iteration   3: 1017424.232 ops/s
# Warmup Iteration   4: 1010016.732 ops/s
# Warmup Iteration   5: 1009931.689 ops/s
# Warmup Iteration   6: 1011039.972 ops/s
# Warmup Iteration   7: 1011352.744 ops/s
# Warmup Iteration   8: 1011786.173 ops/s
# Warmup Iteration   9: 1012753.414 ops/s
# Warmup Iteration  10: 847262.621 ops/s
# Warmup Iteration  11: 1014177.411 ops/s
# Warmup Iteration  12: 1015540.514 ops/s
# Warmup Iteration  13: 1014584.484 ops/s
# Warmup Iteration  14: 1015707.428 ops/s
# Warmup Iteration  15: 1013264.316 ops/s
# Warmup Iteration  16: 1016143.864 ops/s
# Warmup Iteration  17: 1079443.933 ops/s
# Warmup Iteration  18: 1080447.993 ops/s
# Warmup Iteration  19: 1078692.506 ops/s
# Warmup Iteration  20: 1077479.028 ops/s
# Warmup Iteration  21: 1078772.854 ops/s
# Warmup Iteration  22: 1076505.551 ops/s
# Warmup Iteration  23: 1077898.202 ops/s
# Warmup Iteration  24: 1079364.187 ops/s
# Warmup Iteration  25: 1076498.000 ops/s
# Warmup Iteration  26: 1079481.594 ops/s
# Warmup Iteration  27: 1077645.134 ops/s
# Warmup Iteration  28: 1080064.105 ops/s
# Warmup Iteration  29: 1080705.334 ops/s
# Warmup Iteration  30: 1073257.389 ops/s
Iteration   1: 1075043.000 ops/s
Iteration   2: 1075198.991 ops/s
Iteration   3: 1082688.572 ops/s
Iteration   4: 1080333.813 ops/s
Iteration   5: 1078717.036 ops/s
Iteration   6: 1077157.483 ops/s
Iteration   7: 1082414.197 ops/s
Iteration   8: 1073748.975 ops/s
Iteration   9: 1074920.787 ops/s
Iteration  10: 1078628.747 ops/s
Iteration  11: 1080489.485 ops/s
Iteration  12: 1076079.028 ops/s
Iteration  13: 1079053.980 ops/s
Iteration  14: 1080301.926 ops/s
Iteration  15: 1076608.600 ops/s
Iteration  16: 1075136.095 ops/s
Iteration  17: 1080291.512 ops/s
Iteration  18: 1077410.932 ops/s
Iteration  19: 1079328.705 ops/s
Iteration  20: 1081818.903 ops/s
Iteration  21: 1064224.469 ops/s
Iteration  22: 1079755.020 ops/s
Iteration  23: 1062560.807 ops/s
Iteration  24: 1078206.501 ops/s
Iteration  25: 1078652.828 ops/s
Iteration  26: 1078622.616 ops/s
Iteration  27: 1080384.491 ops/s
Iteration  28: 1078530.150 ops/s
Iteration  29: 1081012.064 ops/s
Iteration  30: 1079330.979 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_clear":
  1077555.023 ±(99.9%) 2998.178 ops/s [Average]
  (min, avg, max) = (1062560.807, 1077555.023, 1082688.572), stdev = 4487.531
  CI (99.9%): [1074556.846, 1080553.201] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_clear  thrpt   30  1077555.023 ± 2998.178  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 746261.323 ops/s
# Warmup Iteration   2: 1852427.830 ops/s
# Warmup Iteration   3: 1901904.124 ops/s
# Warmup Iteration   4: 1569394.391 ops/s
# Warmup Iteration   5: 1906018.479 ops/s
# Warmup Iteration   6: 1905757.948 ops/s
# Warmup Iteration   7: 1908282.939 ops/s
# Warmup Iteration   8: 1903659.993 ops/s
# Warmup Iteration   9: 1905788.101 ops/s
# Warmup Iteration  10: 1904410.652 ops/s
# Warmup Iteration  11: 1902983.299 ops/s
# Warmup Iteration  12: 1908841.043 ops/s
# Warmup Iteration  13: 1905282.932 ops/s
# Warmup Iteration  14: 1904997.297 ops/s
# Warmup Iteration  15: 1904176.960 ops/s
# Warmup Iteration  16: 1900602.714 ops/s
# Warmup Iteration  17: 1903502.824 ops/s
# Warmup Iteration  18: 1903893.062 ops/s
# Warmup Iteration  19: 1898939.393 ops/s
# Warmup Iteration  20: 1905511.025 ops/s
# Warmup Iteration  21: 1902928.579 ops/s
# Warmup Iteration  22: 1903977.113 ops/s
# Warmup Iteration  23: 1903818.844 ops/s
# Warmup Iteration  24: 1903106.457 ops/s
# Warmup Iteration  25: 1903109.482 ops/s
# Warmup Iteration  26: 1903757.687 ops/s
# Warmup Iteration  27: 1901172.822 ops/s
# Warmup Iteration  28: 1889995.193 ops/s
# Warmup Iteration  29: 1905161.172 ops/s
# Warmup Iteration  30: 1903679.742 ops/s
Iteration   1: 1906160.012 ops/s
Iteration   2: 1900117.832 ops/s
Iteration   3: 1892530.609 ops/s
Iteration   4: 1908975.090 ops/s
Iteration   5: 1875407.787 ops/s
Iteration   6: 1906021.965 ops/s
Iteration   7: 1906703.625 ops/s
Iteration   8: 1907579.427 ops/s
Iteration   9: 1900512.872 ops/s
Iteration  10: 1906520.135 ops/s
Iteration  11: 1903002.403 ops/s
Iteration  12: 1906874.600 ops/s
Iteration  13: 1895126.973 ops/s
Iteration  14: 1900833.937 ops/s
Iteration  15: 1867467.416 ops/s
Iteration  16: 1905368.112 ops/s
Iteration  17: 1877038.307 ops/s
Iteration  18: 1902061.819 ops/s
Iteration  19: 1874296.567 ops/s
Iteration  20: 1906242.295 ops/s
Iteration  21: 1903272.604 ops/s
Iteration  22: 1908056.395 ops/s
Iteration  23: 1902192.512 ops/s
Iteration  24: 1904584.809 ops/s
Iteration  25: 1904407.794 ops/s
Iteration  26: 1907794.962 ops/s
Iteration  27: 1905309.906 ops/s
Iteration  28: 1904773.432 ops/s
Iteration  29: 1903714.668 ops/s
Iteration  30: 1907268.317 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_collect":
  1900007.239 ±(99.9%) 7504.443 ops/s [Average]
  (min, avg, max) = (1867467.416, 1900007.239, 1908975.090), stdev = 11232.298
  CI (99.9%): [1892502.797, 1907511.682] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_collect  thrpt   30  1900007.239 ± 7504.443  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4256001.798 ops/s
# Warmup Iteration   2: 7298620.283 ops/s
# Warmup Iteration   3: 8588195.394 ops/s
# Warmup Iteration   4: 8673209.786 ops/s
# Warmup Iteration   5: 8660719.679 ops/s
# Warmup Iteration   6: 8670477.225 ops/s
# Warmup Iteration   7: 8687636.364 ops/s
# Warmup Iteration   8: 8675346.603 ops/s
# Warmup Iteration   9: 8704104.167 ops/s
# Warmup Iteration  10: 8664247.363 ops/s
# Warmup Iteration  11: 8665339.251 ops/s
# Warmup Iteration  12: 8663875.538 ops/s
# Warmup Iteration  13: 8673962.713 ops/s
# Warmup Iteration  14: 8658784.586 ops/s
# Warmup Iteration  15: 8684978.866 ops/s
# Warmup Iteration  16: 8658702.415 ops/s
# Warmup Iteration  17: 8667442.799 ops/s
# Warmup Iteration  18: 8686956.372 ops/s
# Warmup Iteration  19: 8664020.968 ops/s
# Warmup Iteration  20: 8682904.937 ops/s
# Warmup Iteration  21: 8705870.180 ops/s
# Warmup Iteration  22: 8668227.649 ops/s
# Warmup Iteration  23: 8599740.601 ops/s
# Warmup Iteration  24: 8690242.212 ops/s
# Warmup Iteration  25: 8681616.027 ops/s
# Warmup Iteration  26: 8684784.339 ops/s
# Warmup Iteration  27: 8576219.909 ops/s
# Warmup Iteration  28: 8674891.676 ops/s
# Warmup Iteration  29: 8672747.740 ops/s
# Warmup Iteration  30: 8597393.392 ops/s
Iteration   1: 8680395.182 ops/s
Iteration   2: 8689777.590 ops/s
Iteration   3: 8682240.847 ops/s
Iteration   4: 8703252.971 ops/s
Iteration   5: 8662355.586 ops/s
Iteration   6: 8682443.719 ops/s
Iteration   7: 8671831.372 ops/s
Iteration   8: 8683657.065 ops/s
Iteration   9: 8696070.977 ops/s
Iteration  10: 8668318.719 ops/s
Iteration  11: 8654085.357 ops/s
Iteration  12: 8673407.396 ops/s
Iteration  13: 8700450.370 ops/s
Iteration  14: 8689371.410 ops/s
Iteration  15: 8695655.105 ops/s
Iteration  16: 8657300.173 ops/s
Iteration  17: 8677203.740 ops/s
Iteration  18: 8638740.312 ops/s
Iteration  19: 8694068.356 ops/s
Iteration  20: 8674948.437 ops/s
Iteration  21: 8693068.679 ops/s
Iteration  22: 8673002.181 ops/s
Iteration  23: 8655879.158 ops/s
Iteration  24: 8673141.450 ops/s
Iteration  25: 8688826.015 ops/s
Iteration  26: 8571264.629 ops/s
Iteration  27: 8656557.671 ops/s
Iteration  28: 8706795.219 ops/s
Iteration  29: 8654447.033 ops/s
Iteration  30: 8470737.239 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_contains":
  8667309.799 ±(99.9%) 30129.953 ops/s [Average]
  (min, avg, max) = (8470737.239, 8667309.799, 8706795.219), stdev = 45097.099
  CI (99.9%): [8637179.845, 8697439.752] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_contains  thrpt   30  8667309.799 ± 30129.953  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7825022.438 ops/s
# Warmup Iteration   2: 15034629.349 ops/s
# Warmup Iteration   3: 13906386.022 ops/s
# Warmup Iteration   4: 15900003.148 ops/s
# Warmup Iteration   5: 15907291.663 ops/s
# Warmup Iteration   6: 15861896.615 ops/s
# Warmup Iteration   7: 15942386.515 ops/s
# Warmup Iteration   8: 15882757.300 ops/s
# Warmup Iteration   9: 15894526.497 ops/s
# Warmup Iteration  10: 15900162.719 ops/s
# Warmup Iteration  11: 15824520.795 ops/s
# Warmup Iteration  12: 15918701.602 ops/s
# Warmup Iteration  13: 15912860.497 ops/s
# Warmup Iteration  14: 15894798.384 ops/s
# Warmup Iteration  15: 15904137.242 ops/s
# Warmup Iteration  16: 15891968.020 ops/s
# Warmup Iteration  17: 15906960.461 ops/s
# Warmup Iteration  18: 15954379.240 ops/s
# Warmup Iteration  19: 15864192.275 ops/s
# Warmup Iteration  20: 15895441.856 ops/s
# Warmup Iteration  21: 15993005.114 ops/s
# Warmup Iteration  22: 15915411.810 ops/s
# Warmup Iteration  23: 15923867.837 ops/s
# Warmup Iteration  24: 15931662.975 ops/s
# Warmup Iteration  25: 15797552.244 ops/s
# Warmup Iteration  26: 15914088.214 ops/s
# Warmup Iteration  27: 15940233.420 ops/s
# Warmup Iteration  28: 15869096.824 ops/s
# Warmup Iteration  29: 15930468.152 ops/s
# Warmup Iteration  30: 15867453.932 ops/s
Iteration   1: 15890565.988 ops/s
Iteration   2: 15651317.301 ops/s
Iteration   3: 15921999.525 ops/s
Iteration   4: 15908750.918 ops/s
Iteration   5: 15961434.203 ops/s
Iteration   6: 15906086.927 ops/s
Iteration   7: 15952507.677 ops/s
Iteration   8: 15919097.849 ops/s
Iteration   9: 15894486.925 ops/s
Iteration  10: 15917734.683 ops/s
Iteration  11: 15820381.907 ops/s
Iteration  12: 15889693.441 ops/s
Iteration  13: 15951406.997 ops/s
Iteration  14: 15656590.925 ops/s
Iteration  15: 16034968.565 ops/s
Iteration  16: 15986487.541 ops/s
Iteration  17: 15936391.445 ops/s
Iteration  18: 15878772.558 ops/s
Iteration  19: 15830023.909 ops/s
Iteration  20: 15876496.651 ops/s
Iteration  21: 15768452.893 ops/s
Iteration  22: 15896252.798 ops/s
Iteration  23: 15880268.531 ops/s
Iteration  24: 15900807.049 ops/s
Iteration  25: 15931991.213 ops/s
Iteration  26: 15930999.057 ops/s
Iteration  27: 15944185.011 ops/s
Iteration  28: 15923429.698 ops/s
Iteration  29: 15946423.012 ops/s
Iteration  30: 15924305.709 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_containsAllArray":
  15894410.364 ±(99.9%) 54790.024 ops/s [Average]
  (min, avg, max) = (15651317.301, 15894410.364, 16034968.565), stdev = 82007.136
  CI (99.9%): [15839620.339, 15949200.388] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt         Score       Error  Units
UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_containsAllArray  thrpt   30  15894410.364 ± 54790.024  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4366458.921 ops/s
# Warmup Iteration   2: 8286059.377 ops/s
# Warmup Iteration   3: 8941751.810 ops/s
# Warmup Iteration   4: 9360921.257 ops/s
# Warmup Iteration   5: 9390155.093 ops/s
# Warmup Iteration   6: 9368296.196 ops/s
# Warmup Iteration   7: 9313339.796 ops/s
# Warmup Iteration   8: 9387841.578 ops/s
# Warmup Iteration   9: 9398701.291 ops/s
# Warmup Iteration  10: 9378787.654 ops/s
# Warmup Iteration  11: 9367859.250 ops/s
# Warmup Iteration  12: 9319428.901 ops/s
# Warmup Iteration  13: 9401773.089 ops/s
# Warmup Iteration  14: 9392165.914 ops/s
# Warmup Iteration  15: 9381182.762 ops/s
# Warmup Iteration  16: 9384680.773 ops/s
# Warmup Iteration  17: 9380425.138 ops/s
# Warmup Iteration  18: 9382464.729 ops/s
# Warmup Iteration  19: 9388779.712 ops/s
# Warmup Iteration  20: 9370701.432 ops/s
# Warmup Iteration  21: 9374394.269 ops/s
# Warmup Iteration  22: 9364788.685 ops/s
# Warmup Iteration  23: 9367486.880 ops/s
# Warmup Iteration  24: 9313636.897 ops/s
# Warmup Iteration  25: 9395946.808 ops/s
# Warmup Iteration  26: 9385081.064 ops/s
# Warmup Iteration  27: 9400881.461 ops/s
# Warmup Iteration  28: 9372950.194 ops/s
# Warmup Iteration  29: 9404916.378 ops/s
# Warmup Iteration  30: 9331139.499 ops/s
Iteration   1: 9407105.104 ops/s
Iteration   2: 9402582.283 ops/s
Iteration   3: 9410602.565 ops/s
Iteration   4: 9376598.577 ops/s
Iteration   5: 9406372.569 ops/s
Iteration   6: 9380067.039 ops/s
Iteration   7: 9368702.107 ops/s
Iteration   8: 9405572.694 ops/s
Iteration   9: 9201512.538 ops/s
Iteration  10: 9401901.283 ops/s
Iteration  11: 9333609.286 ops/s
Iteration  12: 9409250.347 ops/s
Iteration  13: 9386860.897 ops/s
Iteration  14: 9428549.722 ops/s
Iteration  15: 9408194.972 ops/s
Iteration  16: 9364306.428 ops/s
Iteration  17: 9327030.595 ops/s
Iteration  18: 9372374.712 ops/s
Iteration  19: 9383516.125 ops/s
Iteration  20: 9425513.084 ops/s
Iteration  21: 9396776.322 ops/s
Iteration  22: 9375025.796 ops/s
Iteration  23: 9372369.377 ops/s
Iteration  24: 9355328.486 ops/s
Iteration  25: 9374853.383 ops/s
Iteration  26: 9423757.607 ops/s
Iteration  27: 9405967.426 ops/s
Iteration  28: 9404180.279 ops/s
Iteration  29: 9352575.325 ops/s
Iteration  30: 9396137.056 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_containsAllIterable":
  9381906.466 ±(99.9%) 28422.867 ops/s [Average]
  (min, avg, max) = (9201512.538, 9381906.466, 9428549.722), stdev = 42542.012
  CI (99.9%): [9353483.599, 9410329.333] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score       Error  Units
UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_containsAllIterable  thrpt   30  9381906.466 ± 28422.867  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_containsAnyArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_containsAnyArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3582813.442 ops/s
# Warmup Iteration   2: 7450426.443 ops/s
# Warmup Iteration   3: 6323191.958 ops/s
# Warmup Iteration   4: 7545809.843 ops/s
# Warmup Iteration   5: 7542845.539 ops/s
# Warmup Iteration   6: 7549552.045 ops/s
# Warmup Iteration   7: 7536049.046 ops/s
# Warmup Iteration   8: 7497610.730 ops/s
# Warmup Iteration   9: 7566899.010 ops/s
# Warmup Iteration  10: 7529472.658 ops/s
# Warmup Iteration  11: 7565505.902 ops/s
# Warmup Iteration  12: 7524646.487 ops/s
# Warmup Iteration  13: 7546920.687 ops/s
# Warmup Iteration  14: 7488885.985 ops/s
# Warmup Iteration  15: 7538333.223 ops/s
# Warmup Iteration  16: 7526573.371 ops/s
# Warmup Iteration  17: 7518392.805 ops/s
# Warmup Iteration  18: 7508968.802 ops/s
# Warmup Iteration  19: 7555164.252 ops/s
# Warmup Iteration  20: 7537797.743 ops/s
# Warmup Iteration  21: 7522371.626 ops/s
# Warmup Iteration  22: 7553345.695 ops/s
# Warmup Iteration  23: 7552611.030 ops/s
# Warmup Iteration  24: 7548224.916 ops/s
# Warmup Iteration  25: 7533036.488 ops/s
# Warmup Iteration  26: 7524235.369 ops/s
# Warmup Iteration  27: 7553640.503 ops/s
# Warmup Iteration  28: 7550876.823 ops/s
# Warmup Iteration  29: 7558327.235 ops/s
# Warmup Iteration  30: 7542697.326 ops/s
Iteration   1: 7542511.039 ops/s
Iteration   2: 7425989.005 ops/s
Iteration   3: 7564002.205 ops/s
Iteration   4: 7549314.379 ops/s
Iteration   5: 7531321.110 ops/s
Iteration   6: 7552877.048 ops/s
Iteration   7: 7450131.744 ops/s
Iteration   8: 7550640.629 ops/s
Iteration   9: 7561339.598 ops/s
Iteration  10: 7529711.729 ops/s
Iteration  11: 7546220.429 ops/s
Iteration  12: 7576760.589 ops/s
Iteration  13: 7526795.129 ops/s
Iteration  14: 7424694.131 ops/s
Iteration  15: 7536321.894 ops/s
Iteration  16: 7493925.417 ops/s
Iteration  17: 7528730.131 ops/s
Iteration  18: 7562356.103 ops/s
Iteration  19: 7550104.477 ops/s
Iteration  20: 7518638.418 ops/s
Iteration  21: 7574660.189 ops/s
Iteration  22: 7536333.400 ops/s
Iteration  23: 7544738.597 ops/s
Iteration  24: 7547969.930 ops/s
Iteration  25: 7532809.713 ops/s
Iteration  26: 7537722.567 ops/s
Iteration  27: 7529388.804 ops/s
Iteration  28: 7540206.275 ops/s
Iteration  29: 7553078.387 ops/s
Iteration  30: 7424591.161 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_containsAnyArray":
  7528129.474 ±(99.9%) 28175.226 ops/s [Average]
  (min, avg, max) = (7424591.161, 7528129.474, 7576760.589), stdev = 42171.355
  CI (99.9%): [7499954.248, 7556304.700] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_containsAnyArray  thrpt   30  7528129.474 ± 28175.226  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_containsAnyIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_containsAnyIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 635303.233 ops/s
# Warmup Iteration   2: 1025960.967 ops/s
# Warmup Iteration   3: 1168132.258 ops/s
# Warmup Iteration   4: 1168801.004 ops/s
# Warmup Iteration   5: 1167070.460 ops/s
# Warmup Iteration   6: 970390.524 ops/s
# Warmup Iteration   7: 1165470.551 ops/s
# Warmup Iteration   8: 1169070.920 ops/s
# Warmup Iteration   9: 1168759.262 ops/s
# Warmup Iteration  10: 1155670.451 ops/s
# Warmup Iteration  11: 1169021.980 ops/s
# Warmup Iteration  12: 1169563.924 ops/s
# Warmup Iteration  13: 1169483.309 ops/s
# Warmup Iteration  14: 1169431.944 ops/s
# Warmup Iteration  15: 1168429.627 ops/s
# Warmup Iteration  16: 1160588.254 ops/s
# Warmup Iteration  17: 1167424.985 ops/s
# Warmup Iteration  18: 1169103.746 ops/s
# Warmup Iteration  19: 1171748.606 ops/s
# Warmup Iteration  20: 1168445.795 ops/s
# Warmup Iteration  21: 1170344.691 ops/s
# Warmup Iteration  22: 1158552.994 ops/s
# Warmup Iteration  23: 1145407.325 ops/s
# Warmup Iteration  24: 1168914.646 ops/s
# Warmup Iteration  25: 1170865.656 ops/s
# Warmup Iteration  26: 1168793.445 ops/s
# Warmup Iteration  27: 1169107.604 ops/s
# Warmup Iteration  28: 1170354.665 ops/s
# Warmup Iteration  29: 1170077.755 ops/s
# Warmup Iteration  30: 1168234.375 ops/s
Iteration   1: 1167999.479 ops/s
Iteration   2: 1165597.968 ops/s
Iteration   3: 1171431.325 ops/s
Iteration   4: 1168085.779 ops/s
Iteration   5: 1171999.434 ops/s
Iteration   6: 1162985.899 ops/s
Iteration   7: 1146810.096 ops/s
Iteration   8: 1171288.652 ops/s
Iteration   9: 1166754.641 ops/s
Iteration  10: 1171635.598 ops/s
Iteration  11: 1168274.130 ops/s
Iteration  12: 1169767.535 ops/s
Iteration  13: 1166331.845 ops/s
Iteration  14: 1170389.056 ops/s
Iteration  15: 1170228.822 ops/s
Iteration  16: 1171813.974 ops/s
Iteration  17: 1169468.830 ops/s
Iteration  18: 1170714.254 ops/s
Iteration  19: 1167521.008 ops/s
Iteration  20: 1168923.172 ops/s
Iteration  21: 1167434.410 ops/s
Iteration  22: 1170617.129 ops/s
Iteration  23: 1169396.713 ops/s
Iteration  24: 1172150.842 ops/s
Iteration  25: 1167067.766 ops/s
Iteration  26: 1167193.525 ops/s
Iteration  27: 1170264.495 ops/s
Iteration  28: 1167195.494 ops/s
Iteration  29: 1171220.658 ops/s
Iteration  30: 1164111.063 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_containsAnyIterable":
  1168155.786 ±(99.9%) 3122.671 ops/s [Average]
  (min, avg, max) = (1146810.096, 1168155.786, 1172150.842), stdev = 4673.868
  CI (99.9%): [1165033.115, 1171278.458] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score      Error  Units
UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_containsAnyIterable  thrpt   30  1168155.786 ± 3122.671  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_containsNoneArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_containsNoneArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3524657.368 ops/s
# Warmup Iteration   2: 7414338.889 ops/s
# Warmup Iteration   3: 6311237.264 ops/s
# Warmup Iteration   4: 7524062.749 ops/s
# Warmup Iteration   5: 7506363.706 ops/s
# Warmup Iteration   6: 7513849.635 ops/s
# Warmup Iteration   7: 7522173.540 ops/s
# Warmup Iteration   8: 7518880.149 ops/s
# Warmup Iteration   9: 7531031.345 ops/s
# Warmup Iteration  10: 7481155.580 ops/s
# Warmup Iteration  11: 7510219.225 ops/s
# Warmup Iteration  12: 7537225.133 ops/s
# Warmup Iteration  13: 7454803.708 ops/s
# Warmup Iteration  14: 7529172.938 ops/s
# Warmup Iteration  15: 7447966.353 ops/s
# Warmup Iteration  16: 7516799.569 ops/s
# Warmup Iteration  17: 7534478.741 ops/s
# Warmup Iteration  18: 7470192.502 ops/s
# Warmup Iteration  19: 7517536.331 ops/s
# Warmup Iteration  20: 7475981.854 ops/s
# Warmup Iteration  21: 7505279.651 ops/s
# Warmup Iteration  22: 7509074.141 ops/s
# Warmup Iteration  23: 7531973.921 ops/s
# Warmup Iteration  24: 7524355.242 ops/s
# Warmup Iteration  25: 7537564.705 ops/s
# Warmup Iteration  26: 7541028.151 ops/s
# Warmup Iteration  27: 7516733.399 ops/s
# Warmup Iteration  28: 7509939.345 ops/s
# Warmup Iteration  29: 7478925.778 ops/s
# Warmup Iteration  30: 7492910.391 ops/s
Iteration   1: 7535181.264 ops/s
Iteration   2: 7519035.119 ops/s
Iteration   3: 7521557.177 ops/s
Iteration   4: 7505866.349 ops/s
Iteration   5: 7514773.930 ops/s
Iteration   6: 7517435.954 ops/s
Iteration   7: 7550163.903 ops/s
Iteration   8: 7534649.225 ops/s
Iteration   9: 7521364.689 ops/s
Iteration  10: 7519818.037 ops/s
Iteration  11: 7509125.340 ops/s
Iteration  12: 7558662.922 ops/s
Iteration  13: 7530738.188 ops/s
Iteration  14: 7525928.142 ops/s
Iteration  15: 7491343.780 ops/s
Iteration  16: 7517441.473 ops/s
Iteration  17: 7510787.791 ops/s
Iteration  18: 7502509.713 ops/s
Iteration  19: 7535660.072 ops/s
Iteration  20: 7544870.830 ops/s
Iteration  21: 7506657.766 ops/s
Iteration  22: 7428024.851 ops/s
Iteration  23: 7506615.239 ops/s
Iteration  24: 7520683.762 ops/s
Iteration  25: 7451881.895 ops/s
Iteration  26: 7404009.294 ops/s
Iteration  27: 7407447.467 ops/s
Iteration  28: 7540972.860 ops/s
Iteration  29: 7497225.690 ops/s
Iteration  30: 7514106.002 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_containsNoneArray":
  7508151.291 ±(99.9%) 25365.309 ops/s [Average]
  (min, avg, max) = (7404009.294, 7508151.291, 7558662.922), stdev = 37965.603
  CI (99.9%): [7482785.982, 7533516.600] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_containsNoneArray  thrpt   30  7508151.291 ± 25365.309  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_containsNoneIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_containsNoneIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 593421.479 ops/s
# Warmup Iteration   2: 929878.891 ops/s
# Warmup Iteration   3: 1073228.612 ops/s
# Warmup Iteration   4: 1076612.663 ops/s
# Warmup Iteration   5: 1078504.432 ops/s
# Warmup Iteration   6: 951907.232 ops/s
# Warmup Iteration   7: 1023292.181 ops/s
# Warmup Iteration   8: 1079321.577 ops/s
# Warmup Iteration   9: 1069491.658 ops/s
# Warmup Iteration  10: 1080090.703 ops/s
# Warmup Iteration  11: 1075806.266 ops/s
# Warmup Iteration  12: 1077825.615 ops/s
# Warmup Iteration  13: 1079797.894 ops/s
# Warmup Iteration  14: 1075484.199 ops/s
# Warmup Iteration  15: 1077675.677 ops/s
# Warmup Iteration  16: 1078622.384 ops/s
# Warmup Iteration  17: 1078099.759 ops/s
# Warmup Iteration  18: 1076793.955 ops/s
# Warmup Iteration  19: 1076665.503 ops/s
# Warmup Iteration  20: 1078117.037 ops/s
# Warmup Iteration  21: 1078694.383 ops/s
# Warmup Iteration  22: 1078035.553 ops/s
# Warmup Iteration  23: 1077851.430 ops/s
# Warmup Iteration  24: 1078406.976 ops/s
# Warmup Iteration  25: 1077645.308 ops/s
# Warmup Iteration  26: 1076449.309 ops/s
# Warmup Iteration  27: 1075188.866 ops/s
# Warmup Iteration  28: 1078507.139 ops/s
# Warmup Iteration  29: 1078089.529 ops/s
# Warmup Iteration  30: 1078701.839 ops/s
Iteration   1: 1079190.477 ops/s
Iteration   2: 1077589.711 ops/s
Iteration   3: 1061828.693 ops/s
Iteration   4: 1073753.918 ops/s
Iteration   5: 1081057.920 ops/s
Iteration   6: 1077899.801 ops/s
Iteration   7: 1081923.446 ops/s
Iteration   8: 1076948.075 ops/s
Iteration   9: 1079966.038 ops/s
Iteration  10: 1074854.223 ops/s
Iteration  11: 1076407.120 ops/s
Iteration  12: 1078993.711 ops/s
Iteration  13: 1080568.132 ops/s
Iteration  14: 1078656.763 ops/s
Iteration  15: 1080314.099 ops/s
Iteration  16: 1077788.457 ops/s
Iteration  17: 1079980.704 ops/s
Iteration  18: 1077051.381 ops/s
Iteration  19: 1078050.814 ops/s
Iteration  20: 1075641.209 ops/s
Iteration  21: 1079010.130 ops/s
Iteration  22: 1073212.838 ops/s
Iteration  23: 1080598.471 ops/s
Iteration  24: 1077428.919 ops/s
Iteration  25: 1080563.104 ops/s
Iteration  26: 1077512.709 ops/s
Iteration  27: 1063413.234 ops/s
Iteration  28: 1076043.526 ops/s
Iteration  29: 1080582.371 ops/s
Iteration  30: 1076906.621 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_containsNoneIterable":
  1077124.554 ±(99.9%) 3004.292 ops/s [Average]
  (min, avg, max) = (1061828.693, 1077124.554, 1081923.446), stdev = 4496.683
  CI (99.9%): [1074120.262, 1080128.846] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score      Error  Units
UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_containsNoneIterable  thrpt   30  1077124.554 ± 3004.292  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1380069.709 ops/s
# Warmup Iteration   2: 2550800.914 ops/s
# Warmup Iteration   3: 2724910.533 ops/s
# Warmup Iteration   4: 2723450.250 ops/s
# Warmup Iteration   5: 2269098.387 ops/s
# Warmup Iteration   6: 2722977.550 ops/s
# Warmup Iteration   7: 2726274.765 ops/s
# Warmup Iteration   8: 2727017.142 ops/s
# Warmup Iteration   9: 2717862.032 ops/s
# Warmup Iteration  10: 2723899.762 ops/s
# Warmup Iteration  11: 2727829.404 ops/s
# Warmup Iteration  12: 2721449.597 ops/s
# Warmup Iteration  13: 2727577.118 ops/s
# Warmup Iteration  14: 2730100.257 ops/s
# Warmup Iteration  15: 2726012.751 ops/s
# Warmup Iteration  16: 2720304.933 ops/s
# Warmup Iteration  17: 2706633.899 ops/s
# Warmup Iteration  18: 2727678.181 ops/s
# Warmup Iteration  19: 2726394.500 ops/s
# Warmup Iteration  20: 2722343.359 ops/s
# Warmup Iteration  21: 2724825.763 ops/s
# Warmup Iteration  22: 2723957.059 ops/s
# Warmup Iteration  23: 2720570.500 ops/s
# Warmup Iteration  24: 2727288.468 ops/s
# Warmup Iteration  25: 2727558.348 ops/s
# Warmup Iteration  26: 2728776.166 ops/s
# Warmup Iteration  27: 2724429.375 ops/s
# Warmup Iteration  28: 2727080.467 ops/s
# Warmup Iteration  29: 2729065.970 ops/s
# Warmup Iteration  30: 2727887.107 ops/s
Iteration   1: 2725796.046 ops/s
Iteration   2: 2721943.440 ops/s
Iteration   3: 2721987.415 ops/s
Iteration   4: 2729242.795 ops/s
Iteration   5: 2674160.470 ops/s
Iteration   6: 2729625.497 ops/s
Iteration   7: 2727175.181 ops/s
Iteration   8: 2724333.594 ops/s
Iteration   9: 2683657.522 ops/s
Iteration  10: 2718135.107 ops/s
Iteration  11: 2728230.452 ops/s
Iteration  12: 2726673.827 ops/s
Iteration  13: 2720617.662 ops/s
Iteration  14: 2723777.009 ops/s
Iteration  15: 2722042.567 ops/s
Iteration  16: 2723197.417 ops/s
Iteration  17: 2728743.533 ops/s
Iteration  18: 2722646.627 ops/s
Iteration  19: 2681204.868 ops/s
Iteration  20: 2727848.713 ops/s
Iteration  21: 2724386.677 ops/s
Iteration  22: 2724242.489 ops/s
Iteration  23: 2730060.080 ops/s
Iteration  24: 2722208.657 ops/s
Iteration  25: 2717646.125 ops/s
Iteration  26: 2735133.446 ops/s
Iteration  27: 2731230.261 ops/s
Iteration  28: 2729325.161 ops/s
Iteration  29: 2720525.687 ops/s
Iteration  30: 2680995.584 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_count":
  2719226.464 ±(99.9%) 10816.669 ops/s [Average]
  (min, avg, max) = (2674160.470, 2719226.464, 2735133.446), stdev = 16189.882
  CI (99.9%): [2708409.795, 2730043.132] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_count  thrpt   30  2719226.464 ± 10816.669  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2499144.544 ops/s
# Warmup Iteration   2: 5550103.925 ops/s
# Warmup Iteration   3: 5479679.000 ops/s
# Warmup Iteration   4: 4800566.386 ops/s
# Warmup Iteration   5: 5586412.083 ops/s
# Warmup Iteration   6: 5574055.180 ops/s
# Warmup Iteration   7: 5564173.327 ops/s
# Warmup Iteration   8: 5551501.457 ops/s
# Warmup Iteration   9: 5578206.463 ops/s
# Warmup Iteration  10: 5571549.846 ops/s
# Warmup Iteration  11: 5555228.879 ops/s
# Warmup Iteration  12: 5576636.847 ops/s
# Warmup Iteration  13: 5555440.606 ops/s
# Warmup Iteration  14: 5555245.710 ops/s
# Warmup Iteration  15: 5569438.646 ops/s
# Warmup Iteration  16: 5587119.004 ops/s
# Warmup Iteration  17: 5589557.577 ops/s
# Warmup Iteration  18: 5572782.967 ops/s
# Warmup Iteration  19: 5579029.884 ops/s
# Warmup Iteration  20: 5564780.250 ops/s
# Warmup Iteration  21: 5572474.478 ops/s
# Warmup Iteration  22: 5581483.761 ops/s
# Warmup Iteration  23: 5574866.731 ops/s
# Warmup Iteration  24: 5573586.695 ops/s
# Warmup Iteration  25: 5572282.398 ops/s
# Warmup Iteration  26: 5574575.488 ops/s
# Warmup Iteration  27: 5566434.538 ops/s
# Warmup Iteration  28: 5536342.885 ops/s
# Warmup Iteration  29: 5573923.574 ops/s
# Warmup Iteration  30: 5561624.517 ops/s
Iteration   1: 5571114.005 ops/s
Iteration   2: 5579300.761 ops/s
Iteration   3: 5577913.442 ops/s
Iteration   4: 5583994.247 ops/s
Iteration   5: 5572302.556 ops/s
Iteration   6: 5563843.739 ops/s
Iteration   7: 5595641.282 ops/s
Iteration   8: 5580636.665 ops/s
Iteration   9: 5578784.644 ops/s
Iteration  10: 5575057.823 ops/s
Iteration  11: 5567085.002 ops/s
Iteration  12: 5571025.243 ops/s
Iteration  13: 5567620.652 ops/s
Iteration  14: 5574593.106 ops/s
Iteration  15: 5575589.528 ops/s
Iteration  16: 5568849.335 ops/s
Iteration  17: 5580963.632 ops/s
Iteration  18: 5573653.969 ops/s
Iteration  19: 5551144.457 ops/s
Iteration  20: 5576722.914 ops/s
Iteration  21: 5581412.715 ops/s
Iteration  22: 5589216.301 ops/s
Iteration  23: 5563210.513 ops/s
Iteration  24: 5576071.185 ops/s
Iteration  25: 5587754.148 ops/s
Iteration  26: 5566028.567 ops/s
Iteration  27: 5476350.238 ops/s
Iteration  28: 5557679.729 ops/s
Iteration  29: 5574254.590 ops/s
Iteration  30: 5579065.606 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_detectIfNone":
  5571229.353 ±(99.9%) 13452.035 ops/s [Average]
  (min, avg, max) = (5476350.238, 5571229.353, 5595641.282), stdev = 20134.374
  CI (99.9%): [5557777.318, 5584681.388] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_detectIfNone  thrpt   30  5571229.353 ± 13452.035  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3602039.703 ops/s
# Warmup Iteration   2: 7258543.773 ops/s
# Warmup Iteration   3: 6134548.190 ops/s
# Warmup Iteration   4: 7337372.593 ops/s
# Warmup Iteration   5: 7339508.510 ops/s
# Warmup Iteration   6: 7326757.710 ops/s
# Warmup Iteration   7: 7329945.767 ops/s
# Warmup Iteration   8: 7325417.524 ops/s
# Warmup Iteration   9: 7328773.586 ops/s
# Warmup Iteration  10: 7299057.490 ops/s
# Warmup Iteration  11: 7343771.930 ops/s
# Warmup Iteration  12: 7357132.362 ops/s
# Warmup Iteration  13: 7324575.360 ops/s
# Warmup Iteration  14: 7331428.137 ops/s
# Warmup Iteration  15: 7313348.782 ops/s
# Warmup Iteration  16: 7310896.081 ops/s
# Warmup Iteration  17: 7314081.644 ops/s
# Warmup Iteration  18: 7337044.069 ops/s
# Warmup Iteration  19: 7260066.901 ops/s
# Warmup Iteration  20: 7328130.540 ops/s
# Warmup Iteration  21: 7344491.989 ops/s
# Warmup Iteration  22: 7323695.108 ops/s
# Warmup Iteration  23: 7313326.138 ops/s
# Warmup Iteration  24: 7278062.158 ops/s
# Warmup Iteration  25: 7329385.033 ops/s
# Warmup Iteration  26: 7326772.205 ops/s
# Warmup Iteration  27: 7331958.923 ops/s
# Warmup Iteration  28: 7327186.837 ops/s
# Warmup Iteration  29: 7243272.486 ops/s
# Warmup Iteration  30: 7320155.090 ops/s
Iteration   1: 7342823.115 ops/s
Iteration   2: 7313403.271 ops/s
Iteration   3: 7324141.558 ops/s
Iteration   4: 7326247.582 ops/s
Iteration   5: 7328289.029 ops/s
Iteration   6: 7331453.045 ops/s
Iteration   7: 7319036.992 ops/s
Iteration   8: 7358305.739 ops/s
Iteration   9: 7317552.298 ops/s
Iteration  10: 7343859.851 ops/s
Iteration  11: 7317616.761 ops/s
Iteration  12: 7346185.046 ops/s
Iteration  13: 7334452.086 ops/s
Iteration  14: 7331367.285 ops/s
Iteration  15: 7365389.927 ops/s
Iteration  16: 7330781.691 ops/s
Iteration  17: 7338019.085 ops/s
Iteration  18: 7309196.441 ops/s
Iteration  19: 7362074.383 ops/s
Iteration  20: 7359770.537 ops/s
Iteration  21: 7305996.609 ops/s
Iteration  22: 7334906.657 ops/s
Iteration  23: 7307501.604 ops/s
Iteration  24: 7221111.488 ops/s
Iteration  25: 7338837.275 ops/s
Iteration  26: 7318530.356 ops/s
Iteration  27: 7346370.204 ops/s
Iteration  28: 7317592.418 ops/s
Iteration  29: 7331284.217 ops/s
Iteration  30: 7345318.780 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_forEach":
  7328913.844 ±(99.9%) 17395.546 ops/s [Average]
  (min, avg, max) = (7221111.488, 7328913.844, 7365389.927), stdev = 26036.837
  CI (99.9%): [7311518.298, 7346309.391] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_forEach  thrpt   30  7328913.844 ± 17395.546  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12902415.226 ops/s
# Warmup Iteration   2: 24771968.080 ops/s
# Warmup Iteration   3: 23142065.406 ops/s
# Warmup Iteration   4: 25657729.019 ops/s
# Warmup Iteration   5: 25738401.579 ops/s
# Warmup Iteration   6: 25507819.507 ops/s
# Warmup Iteration   7: 25606966.965 ops/s
# Warmup Iteration   8: 25611139.558 ops/s
# Warmup Iteration   9: 25549448.454 ops/s
# Warmup Iteration  10: 25767871.221 ops/s
# Warmup Iteration  11: 25563445.662 ops/s
# Warmup Iteration  12: 25669747.178 ops/s
# Warmup Iteration  13: 25700982.123 ops/s
# Warmup Iteration  14: 25634537.705 ops/s
# Warmup Iteration  15: 25601247.362 ops/s
# Warmup Iteration  16: 25747186.231 ops/s
# Warmup Iteration  17: 25661393.157 ops/s
# Warmup Iteration  18: 25720638.777 ops/s
# Warmup Iteration  19: 25702600.405 ops/s
# Warmup Iteration  20: 25683746.517 ops/s
# Warmup Iteration  21: 25761602.779 ops/s
# Warmup Iteration  22: 25689289.716 ops/s
# Warmup Iteration  23: 25660779.581 ops/s
# Warmup Iteration  24: 25718082.453 ops/s
# Warmup Iteration  25: 25680889.251 ops/s
# Warmup Iteration  26: 25681227.722 ops/s
# Warmup Iteration  27: 25441689.955 ops/s
# Warmup Iteration  28: 25719826.890 ops/s
# Warmup Iteration  29: 25620456.124 ops/s
# Warmup Iteration  30: 25727952.987 ops/s
Iteration   1: 25756164.161 ops/s
Iteration   2: 25686945.168 ops/s
Iteration   3: 25599649.898 ops/s
Iteration   4: 25719116.485 ops/s
Iteration   5: 25821122.628 ops/s
Iteration   6: 25565597.099 ops/s
Iteration   7: 25686562.830 ops/s
Iteration   8: 25677766.892 ops/s
Iteration   9: 25688008.106 ops/s
Iteration  10: 25832657.704 ops/s
Iteration  11: 25769758.667 ops/s
Iteration  12: 25760179.435 ops/s
Iteration  13: 25619106.262 ops/s
Iteration  14: 25748692.476 ops/s
Iteration  15: 25768697.350 ops/s
Iteration  16: 25690313.051 ops/s
Iteration  17: 25726326.113 ops/s
Iteration  18: 25784696.986 ops/s
Iteration  19: 25613639.741 ops/s
Iteration  20: 25748805.104 ops/s
Iteration  21: 25617473.388 ops/s
Iteration  22: 25827332.964 ops/s
Iteration  23: 25699487.289 ops/s
Iteration  24: 25551609.916 ops/s
Iteration  25: 25745288.174 ops/s
Iteration  26: 25758937.575 ops/s
Iteration  27: 25788820.568 ops/s
Iteration  28: 25635424.491 ops/s
Iteration  29: 25686317.053 ops/s
Iteration  30: 25666850.195 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_injectInto":
  25708044.926 ±(99.9%) 50670.809 ops/s [Average]
  (min, avg, max) = (25551609.916, 25708044.926, 25832657.704), stdev = 75841.687
  CI (99.9%): [25657374.117, 25758715.735] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt         Score       Error  Units
UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_injectInto  thrpt   30  25708044.926 ± 50670.809  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1371454.179 ops/s
# Warmup Iteration   2: 2283859.478 ops/s
# Warmup Iteration   3: 2508866.163 ops/s
# Warmup Iteration   4: 2593430.014 ops/s
# Warmup Iteration   5: 2569438.591 ops/s
# Warmup Iteration   6: 2580388.153 ops/s
# Warmup Iteration   7: 2582712.469 ops/s
# Warmup Iteration   8: 2566644.539 ops/s
# Warmup Iteration   9: 2566653.963 ops/s
# Warmup Iteration  10: 2584660.060 ops/s
# Warmup Iteration  11: 2570784.610 ops/s
# Warmup Iteration  12: 2580631.783 ops/s
# Warmup Iteration  13: 2575910.120 ops/s
# Warmup Iteration  14: 2573753.484 ops/s
# Warmup Iteration  15: 2580567.144 ops/s
# Warmup Iteration  16: 2580886.177 ops/s
# Warmup Iteration  17: 2579932.640 ops/s
# Warmup Iteration  18: 2585949.120 ops/s
# Warmup Iteration  19: 2574323.815 ops/s
# Warmup Iteration  20: 2590042.268 ops/s
# Warmup Iteration  21: 2591571.074 ops/s
# Warmup Iteration  22: 2580700.370 ops/s
# Warmup Iteration  23: 2590050.848 ops/s
# Warmup Iteration  24: 2573101.936 ops/s
# Warmup Iteration  25: 2581139.988 ops/s
# Warmup Iteration  26: 2582402.224 ops/s
# Warmup Iteration  27: 2578675.436 ops/s
# Warmup Iteration  28: 2580127.306 ops/s
# Warmup Iteration  29: 2590171.184 ops/s
# Warmup Iteration  30: 2570289.344 ops/s
Iteration   1: 2580830.593 ops/s
Iteration   2: 2595183.015 ops/s
Iteration   3: 2590003.324 ops/s
Iteration   4: 2585354.287 ops/s
Iteration   5: 2589723.471 ops/s
Iteration   6: 2540155.302 ops/s
Iteration   7: 2594686.334 ops/s
Iteration   8: 2577859.956 ops/s
Iteration   9: 2578898.541 ops/s
Iteration  10: 2567419.067 ops/s
Iteration  11: 2591988.059 ops/s
Iteration  12: 2585948.621 ops/s
Iteration  13: 2560879.866 ops/s
Iteration  14: 2582708.659 ops/s
Iteration  15: 2579237.504 ops/s
Iteration  16: 2585753.418 ops/s
Iteration  17: 2578258.418 ops/s
Iteration  18: 2569804.491 ops/s
Iteration  19: 2585047.423 ops/s
Iteration  20: 2589696.871 ops/s
Iteration  21: 2584549.073 ops/s
Iteration  22: 2587620.136 ops/s
Iteration  23: 2587134.691 ops/s
Iteration  24: 2539802.648 ops/s
Iteration  25: 2563999.561 ops/s
Iteration  26: 2585966.437 ops/s
Iteration  27: 2584692.758 ops/s
Iteration  28: 2589462.419 ops/s
Iteration  29: 2585792.960 ops/s
Iteration  30: 2597222.061 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_isEmpty":
  2580522.665 ±(99.9%) 9370.571 ops/s [Average]
  (min, avg, max) = (2539802.648, 2580522.665, 2597222.061), stdev = 14025.430
  CI (99.9%): [2571152.095, 2589893.236] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_isEmpty  thrpt   30  2580522.665 ± 9370.571  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_iterator_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_iterator_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 678086.603 ops/s
# Warmup Iteration   2: 696596.274 ops/s
# Warmup Iteration   3: 864934.040 ops/s
# Warmup Iteration   4: 891110.852 ops/s
# Warmup Iteration   5: 897242.455 ops/s
# Warmup Iteration   6: 888582.247 ops/s
# Warmup Iteration   7: 895849.831 ops/s
# Warmup Iteration   8: 897752.763 ops/s
# Warmup Iteration   9: 897978.579 ops/s
# Warmup Iteration  10: 897713.064 ops/s
# Warmup Iteration  11: 896244.177 ops/s
# Warmup Iteration  12: 899020.918 ops/s
# Warmup Iteration  13: 750564.895 ops/s
# Warmup Iteration  14: 895409.063 ops/s
# Warmup Iteration  15: 893022.814 ops/s
# Warmup Iteration  16: 899823.511 ops/s
# Warmup Iteration  17: 948302.854 ops/s
# Warmup Iteration  18: 951211.483 ops/s
# Warmup Iteration  19: 951388.998 ops/s
# Warmup Iteration  20: 950208.449 ops/s
# Warmup Iteration  21: 949861.069 ops/s
# Warmup Iteration  22: 947705.018 ops/s
# Warmup Iteration  23: 948801.313 ops/s
# Warmup Iteration  24: 952444.847 ops/s
# Warmup Iteration  25: 939753.959 ops/s
# Warmup Iteration  26: 951537.911 ops/s
# Warmup Iteration  27: 936739.907 ops/s
# Warmup Iteration  28: 951066.067 ops/s
# Warmup Iteration  29: 949351.264 ops/s
# Warmup Iteration  30: 942162.594 ops/s
Iteration   1: 951656.193 ops/s
Iteration   2: 953614.049 ops/s
Iteration   3: 950183.524 ops/s
Iteration   4: 949033.376 ops/s
Iteration   5: 949148.263 ops/s
Iteration   6: 951221.604 ops/s
Iteration   7: 949478.730 ops/s
Iteration   8: 935113.822 ops/s
Iteration   9: 948994.484 ops/s
Iteration  10: 949089.112 ops/s
Iteration  11: 950269.318 ops/s
Iteration  12: 949881.030 ops/s
Iteration  13: 952774.521 ops/s
Iteration  14: 942510.648 ops/s
Iteration  15: 949666.733 ops/s
Iteration  16: 948294.837 ops/s
Iteration  17: 950925.294 ops/s
Iteration  18: 949240.597 ops/s
Iteration  19: 949357.667 ops/s
Iteration  20: 951283.348 ops/s
Iteration  21: 951310.057 ops/s
Iteration  22: 950326.732 ops/s
Iteration  23: 951430.874 ops/s
Iteration  24: 950330.901 ops/s
Iteration  25: 949413.289 ops/s
Iteration  26: 952244.418 ops/s
Iteration  27: 947738.410 ops/s
Iteration  28: 950309.779 ops/s
Iteration  29: 948713.688 ops/s
Iteration  30: 949629.676 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_iterator_throws":
  949439.499 ±(99.9%) 2219.441 ops/s [Average]
  (min, avg, max) = (935113.822, 949439.499, 953614.049), stdev = 3321.956
  CI (99.9%): [947220.058, 951658.940] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_iterator_throws  thrpt   30  949439.499 ± 2219.441  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 743935.423 ops/s
# Warmup Iteration   2: 769791.364 ops/s
# Warmup Iteration   3: 1023510.002 ops/s
# Warmup Iteration   4: 1017061.087 ops/s
# Warmup Iteration   5: 1017682.198 ops/s
# Warmup Iteration   6: 1018702.573 ops/s
# Warmup Iteration   7: 1017291.873 ops/s
# Warmup Iteration   8: 1017759.172 ops/s
# Warmup Iteration   9: 1017715.704 ops/s
# Warmup Iteration  10: 1018335.024 ops/s
# Warmup Iteration  11: 922381.933 ops/s
# Warmup Iteration  12: 946730.028 ops/s
# Warmup Iteration  13: 1015986.364 ops/s
# Warmup Iteration  14: 1018535.370 ops/s
# Warmup Iteration  15: 1017499.736 ops/s
# Warmup Iteration  16: 1017478.148 ops/s
# Warmup Iteration  17: 1084559.702 ops/s
# Warmup Iteration  18: 1082246.258 ops/s
# Warmup Iteration  19: 1082391.107 ops/s
# Warmup Iteration  20: 1085634.222 ops/s
# Warmup Iteration  21: 1085158.982 ops/s
# Warmup Iteration  22: 1080459.643 ops/s
# Warmup Iteration  23: 1078334.585 ops/s
# Warmup Iteration  24: 1074833.020 ops/s
# Warmup Iteration  25: 1084686.077 ops/s
# Warmup Iteration  26: 1083721.423 ops/s
# Warmup Iteration  27: 1079154.510 ops/s
# Warmup Iteration  28: 1081798.846 ops/s
# Warmup Iteration  29: 1081177.038 ops/s
# Warmup Iteration  30: 1086330.887 ops/s
Iteration   1: 1087457.598 ops/s
Iteration   2: 1087834.839 ops/s
Iteration   3: 1086310.264 ops/s
Iteration   4: 1082012.931 ops/s
Iteration   5: 1085111.658 ops/s
Iteration   6: 1083391.139 ops/s
Iteration   7: 1082518.883 ops/s
Iteration   8: 1078015.687 ops/s
Iteration   9: 1082433.956 ops/s
Iteration  10: 1080151.027 ops/s
Iteration  11: 1083178.216 ops/s
Iteration  12: 1086656.358 ops/s
Iteration  13: 1084053.500 ops/s
Iteration  14: 1081136.333 ops/s
Iteration  15: 1077598.030 ops/s
Iteration  16: 1085074.716 ops/s
Iteration  17: 1084592.610 ops/s
Iteration  18: 1082550.157 ops/s
Iteration  19: 1081514.124 ops/s
Iteration  20: 1074551.810 ops/s
Iteration  21: 1085552.166 ops/s
Iteration  22: 1081660.462 ops/s
Iteration  23: 1081094.758 ops/s
Iteration  24: 1087205.438 ops/s
Iteration  25: 1080996.248 ops/s
Iteration  26: 1077925.231 ops/s
Iteration  27: 1083847.349 ops/s
Iteration  28: 1081896.304 ops/s
Iteration  29: 1081598.615 ops/s
Iteration  30: 1083157.913 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList":
  1082702.611 ±(99.9%) 2082.503 ops/s [Average]
  (min, avg, max) = (1074551.810, 1082702.611, 1087834.839), stdev = 3116.993
  CI (99.9%): [1080620.108, 1084785.114] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt        Score      Error  Units
UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList  thrpt   30  1082702.611 ± 2082.503  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 664210.197 ops/s
# Warmup Iteration   2: 680701.843 ops/s
# Warmup Iteration   3: 869684.497 ops/s
# Warmup Iteration   4: 894879.847 ops/s
# Warmup Iteration   5: 894282.428 ops/s
# Warmup Iteration   6: 889285.417 ops/s
# Warmup Iteration   7: 893428.136 ops/s
# Warmup Iteration   8: 895824.609 ops/s
# Warmup Iteration   9: 895530.696 ops/s
# Warmup Iteration  10: 883919.748 ops/s
# Warmup Iteration  11: 894941.716 ops/s
# Warmup Iteration  12: 799535.628 ops/s
# Warmup Iteration  13: 836331.679 ops/s
# Warmup Iteration  14: 894648.101 ops/s
# Warmup Iteration  15: 894408.627 ops/s
# Warmup Iteration  16: 894533.470 ops/s
# Warmup Iteration  17: 953311.842 ops/s
# Warmup Iteration  18: 950745.002 ops/s
# Warmup Iteration  19: 950496.854 ops/s
# Warmup Iteration  20: 950582.773 ops/s
# Warmup Iteration  21: 948623.546 ops/s
# Warmup Iteration  22: 951378.217 ops/s
# Warmup Iteration  23: 942603.410 ops/s
# Warmup Iteration  24: 949072.380 ops/s
# Warmup Iteration  25: 951082.345 ops/s
# Warmup Iteration  26: 949141.360 ops/s
# Warmup Iteration  27: 950952.035 ops/s
# Warmup Iteration  28: 949515.467 ops/s
# Warmup Iteration  29: 946759.740 ops/s
# Warmup Iteration  30: 948769.038 ops/s
Iteration   1: 946795.150 ops/s
Iteration   2: 947856.027 ops/s
Iteration   3: 949616.761 ops/s
Iteration   4: 947668.854 ops/s
Iteration   5: 944618.945 ops/s
Iteration   6: 950335.562 ops/s
Iteration   7: 948626.433 ops/s
Iteration   8: 949842.579 ops/s
Iteration   9: 945682.560 ops/s
Iteration  10: 948736.522 ops/s
Iteration  11: 947767.072 ops/s
Iteration  12: 952074.326 ops/s
Iteration  13: 950556.334 ops/s
Iteration  14: 949138.011 ops/s
Iteration  15: 951587.792 ops/s
Iteration  16: 950346.576 ops/s
Iteration  17: 948841.335 ops/s
Iteration  18: 952476.380 ops/s
Iteration  19: 953505.537 ops/s
Iteration  20: 953676.807 ops/s
Iteration  21: 951211.180 ops/s
Iteration  22: 952655.185 ops/s
Iteration  23: 948424.255 ops/s
Iteration  24: 950643.915 ops/s
Iteration  25: 951080.244 ops/s
Iteration  26: 952857.768 ops/s
Iteration  27: 937507.923 ops/s
Iteration  28: 953879.110 ops/s
Iteration  29: 947303.627 ops/s
Iteration  30: 951505.189 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection":
  949560.599 ±(99.9%) 2196.772 ops/s [Average]
  (min, avg, max) = (937507.923, 949560.599, 953879.110), stdev = 3288.025
  CI (99.9%): [947363.827, 951757.370] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                        Mode  Cnt       Score      Error  Units
UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection  thrpt   30  949560.599 ± 2196.772  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 173081051.903 ops/s
# Warmup Iteration   2: 297743211.671 ops/s
# Warmup Iteration   3: 284904489.320 ops/s
# Warmup Iteration   4: 317637904.843 ops/s
# Warmup Iteration   5: 317867436.770 ops/s
# Warmup Iteration   6: 317663089.995 ops/s
# Warmup Iteration   7: 314882532.821 ops/s
# Warmup Iteration   8: 309654029.826 ops/s
# Warmup Iteration   9: 317190219.283 ops/s
# Warmup Iteration  10: 318044784.302 ops/s
# Warmup Iteration  11: 317011656.114 ops/s
# Warmup Iteration  12: 317122263.982 ops/s
# Warmup Iteration  13: 317341005.652 ops/s
# Warmup Iteration  14: 318341514.411 ops/s
# Warmup Iteration  15: 317463081.641 ops/s
# Warmup Iteration  16: 317999311.288 ops/s
# Warmup Iteration  17: 317097445.088 ops/s
# Warmup Iteration  18: 316772992.866 ops/s
# Warmup Iteration  19: 317663463.861 ops/s
# Warmup Iteration  20: 315620696.485 ops/s
# Warmup Iteration  21: 317023043.250 ops/s
# Warmup Iteration  22: 315613386.953 ops/s
# Warmup Iteration  23: 314512455.481 ops/s
# Warmup Iteration  24: 316495614.811 ops/s
# Warmup Iteration  25: 317532451.661 ops/s
# Warmup Iteration  26: 316219352.612 ops/s
# Warmup Iteration  27: 317556162.625 ops/s
# Warmup Iteration  28: 317231750.534 ops/s
# Warmup Iteration  29: 315948028.515 ops/s
# Warmup Iteration  30: 318037508.727 ops/s
Iteration   1: 309614392.320 ops/s
Iteration   2: 316441295.219 ops/s
Iteration   3: 317135734.956 ops/s
Iteration   4: 318822941.681 ops/s
Iteration   5: 318180181.869 ops/s
Iteration   6: 318285226.179 ops/s
Iteration   7: 316287756.212 ops/s
Iteration   8: 317207314.569 ops/s
Iteration   9: 317108548.231 ops/s
Iteration  10: 316600205.677 ops/s
Iteration  11: 316461424.012 ops/s
Iteration  12: 311331666.397 ops/s
Iteration  13: 318235431.553 ops/s
Iteration  14: 316636103.451 ops/s
Iteration  15: 317502457.252 ops/s
Iteration  16: 316824775.583 ops/s
Iteration  17: 317229359.431 ops/s
Iteration  18: 315556855.306 ops/s
Iteration  19: 316548345.360 ops/s
Iteration  20: 316309984.691 ops/s
Iteration  21: 315825627.161 ops/s
Iteration  22: 317846486.127 ops/s
Iteration  23: 315797788.893 ops/s
Iteration  24: 316364532.880 ops/s
Iteration  25: 317618993.420 ops/s
Iteration  26: 316397604.878 ops/s
Iteration  27: 317932230.340 ops/s
Iteration  28: 317625721.940 ops/s
Iteration  29: 317105684.921 ops/s
Iteration  30: 316784350.468 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove":
  316587300.699 ±(99.9%) 1240928.882 ops/s [Average]
  (min, avg, max) = (309614392.320, 316587300.699, 318822941.681), stdev = 1857364.072
  CI (99.9%): [315346371.817, 317828229.581] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                       Mode  Cnt          Score         Error  Units
UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove  thrpt   30  316587300.699 ± 1240928.882  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 695743.618 ops/s
# Warmup Iteration   2: 790134.223 ops/s
# Warmup Iteration   3: 1002052.100 ops/s
# Warmup Iteration   4: 1002262.432 ops/s
# Warmup Iteration   5: 1004320.418 ops/s
# Warmup Iteration   6: 992923.561 ops/s
# Warmup Iteration   7: 1001655.994 ops/s
# Warmup Iteration   8: 1002322.345 ops/s
# Warmup Iteration   9: 983406.316 ops/s
# Warmup Iteration  10: 856409.719 ops/s
# Warmup Iteration  11: 1000605.615 ops/s
# Warmup Iteration  12: 1001692.700 ops/s
# Warmup Iteration  13: 1003864.247 ops/s
# Warmup Iteration  14: 1001094.511 ops/s
# Warmup Iteration  15: 1001228.459 ops/s
# Warmup Iteration  16: 1001920.268 ops/s
# Warmup Iteration  17: 1065611.541 ops/s
# Warmup Iteration  18: 1063030.124 ops/s
# Warmup Iteration  19: 1064910.419 ops/s
# Warmup Iteration  20: 1064919.341 ops/s
# Warmup Iteration  21: 1064839.830 ops/s
# Warmup Iteration  22: 1065731.694 ops/s
# Warmup Iteration  23: 1066763.683 ops/s
# Warmup Iteration  24: 1065187.555 ops/s
# Warmup Iteration  25: 1060207.322 ops/s
# Warmup Iteration  26: 1052841.061 ops/s
# Warmup Iteration  27: 1062779.571 ops/s
# Warmup Iteration  28: 1063220.937 ops/s
# Warmup Iteration  29: 1064713.334 ops/s
# Warmup Iteration  30: 1064011.033 ops/s
Iteration   1: 1061095.000 ops/s
Iteration   2: 1049087.027 ops/s
Iteration   3: 1063181.358 ops/s
Iteration   4: 1066833.092 ops/s
Iteration   5: 1065622.040 ops/s
Iteration   6: 1061634.120 ops/s
Iteration   7: 1065025.774 ops/s
Iteration   8: 1046899.834 ops/s
Iteration   9: 1061750.493 ops/s
Iteration  10: 1062018.119 ops/s
Iteration  11: 1064611.679 ops/s
Iteration  12: 1065456.306 ops/s
Iteration  13: 1060823.725 ops/s
Iteration  14: 1057888.105 ops/s
Iteration  15: 1056972.589 ops/s
Iteration  16: 1064079.657 ops/s
Iteration  17: 1065631.561 ops/s
Iteration  18: 1063152.765 ops/s
Iteration  19: 1064947.472 ops/s
Iteration  20: 1065093.421 ops/s
Iteration  21: 1064945.638 ops/s
Iteration  22: 1063399.783 ops/s
Iteration  23: 1068449.965 ops/s
Iteration  24: 1064346.826 ops/s
Iteration  25: 1065458.744 ops/s
Iteration  26: 1065624.719 ops/s
Iteration  27: 1058360.942 ops/s
Iteration  28: 1068698.568 ops/s
Iteration  29: 1062579.176 ops/s
Iteration  30: 1060786.658 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next":
  1062481.839 ±(99.9%) 3230.565 ops/s [Average]
  (min, avg, max) = (1046899.834, 1062481.839, 1068698.568), stdev = 4835.357
  CI (99.9%): [1059251.274, 1065712.403] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                       Mode  Cnt        Score      Error  Units
UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next  thrpt   30  1062481.839 ± 3230.565  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 959561.266 ops/s
# Warmup Iteration   2: 2011085.992 ops/s
# Warmup Iteration   3: 1687983.789 ops/s
# Warmup Iteration   4: 1984190.807 ops/s
# Warmup Iteration   5: 1983844.090 ops/s
# Warmup Iteration   6: 2000301.369 ops/s
# Warmup Iteration   7: 1976201.037 ops/s
# Warmup Iteration   8: 1997729.975 ops/s
# Warmup Iteration   9: 1997490.379 ops/s
# Warmup Iteration  10: 1989893.466 ops/s
# Warmup Iteration  11: 1994070.861 ops/s
# Warmup Iteration  12: 2006973.143 ops/s
# Warmup Iteration  13: 1974103.052 ops/s
# Warmup Iteration  14: 1991602.921 ops/s
# Warmup Iteration  15: 2004550.656 ops/s
# Warmup Iteration  16: 2002232.362 ops/s
# Warmup Iteration  17: 2009943.740 ops/s
# Warmup Iteration  18: 2004550.668 ops/s
# Warmup Iteration  19: 2000169.368 ops/s
# Warmup Iteration  20: 2002549.003 ops/s
# Warmup Iteration  21: 2007549.426 ops/s
# Warmup Iteration  22: 1996828.421 ops/s
# Warmup Iteration  23: 2005099.147 ops/s
# Warmup Iteration  24: 2013502.355 ops/s
# Warmup Iteration  25: 2001211.686 ops/s
# Warmup Iteration  26: 2002171.218 ops/s
# Warmup Iteration  27: 2001906.754 ops/s
# Warmup Iteration  28: 1989927.164 ops/s
# Warmup Iteration  29: 1981800.818 ops/s
# Warmup Iteration  30: 2001910.349 ops/s
Iteration   1: 1988457.974 ops/s
Iteration   2: 1996755.015 ops/s
Iteration   3: 2017423.622 ops/s
Iteration   4: 1995811.304 ops/s
Iteration   5: 2002016.907 ops/s
Iteration   6: 2003101.915 ops/s
Iteration   7: 1992274.658 ops/s
Iteration   8: 1996663.568 ops/s
Iteration   9: 1994969.299 ops/s
Iteration  10: 2004248.879 ops/s
Iteration  11: 2005813.205 ops/s
Iteration  12: 1996910.326 ops/s
Iteration  13: 1993552.522 ops/s
Iteration  14: 1976083.245 ops/s
Iteration  15: 2000967.174 ops/s
Iteration  16: 1999317.063 ops/s
Iteration  17: 2007850.499 ops/s
Iteration  18: 2005237.498 ops/s
Iteration  19: 1991268.207 ops/s
Iteration  20: 1980379.974 ops/s
Iteration  21: 1972423.648 ops/s
Iteration  22: 1979543.655 ops/s
Iteration  23: 1990682.113 ops/s
Iteration  24: 2000438.117 ops/s
Iteration  25: 1984765.275 ops/s
Iteration  26: 2012565.519 ops/s
Iteration  27: 1981264.512 ops/s
Iteration  28: 2009253.433 ops/s
Iteration  29: 2001494.750 ops/s
Iteration  30: 1970608.620 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_makeString":
  1995071.417 ±(99.9%) 7877.168 ops/s [Average]
  (min, avg, max) = (1970608.620, 1995071.417, 2017423.622), stdev = 11790.175
  CI (99.9%): [1987194.249, 2002948.584] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_makeString  thrpt   30  1995071.417 ± 7877.168  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_newCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_newCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 172883125.531 ops/s
# Warmup Iteration   2: 299449051.713 ops/s
# Warmup Iteration   3: 284534112.378 ops/s
# Warmup Iteration   4: 315973431.056 ops/s
# Warmup Iteration   5: 317398463.761 ops/s
# Warmup Iteration   6: 317353123.292 ops/s
# Warmup Iteration   7: 316178218.628 ops/s
# Warmup Iteration   8: 317365022.109 ops/s
# Warmup Iteration   9: 315214935.489 ops/s
# Warmup Iteration  10: 314778963.825 ops/s
# Warmup Iteration  11: 315013131.698 ops/s
# Warmup Iteration  12: 313547688.745 ops/s
# Warmup Iteration  13: 313597622.478 ops/s
# Warmup Iteration  14: 315311701.099 ops/s
# Warmup Iteration  15: 315758049.240 ops/s
# Warmup Iteration  16: 314895577.590 ops/s
# Warmup Iteration  17: 315519993.937 ops/s
# Warmup Iteration  18: 314461554.771 ops/s
# Warmup Iteration  19: 315825520.893 ops/s
# Warmup Iteration  20: 313285289.635 ops/s
# Warmup Iteration  21: 313665797.274 ops/s
# Warmup Iteration  22: 314822879.295 ops/s
# Warmup Iteration  23: 314526833.003 ops/s
# Warmup Iteration  24: 312091817.920 ops/s
# Warmup Iteration  25: 315220683.416 ops/s
# Warmup Iteration  26: 314693149.848 ops/s
# Warmup Iteration  27: 315296710.897 ops/s
# Warmup Iteration  28: 314231263.453 ops/s
# Warmup Iteration  29: 314982461.943 ops/s
# Warmup Iteration  30: 315598809.653 ops/s
Iteration   1: 314977323.486 ops/s
Iteration   2: 315163994.810 ops/s
Iteration   3: 315648965.845 ops/s
Iteration   4: 314373730.956 ops/s
Iteration   5: 314034307.065 ops/s
Iteration   6: 315493202.105 ops/s
Iteration   7: 316706900.220 ops/s
Iteration   8: 315813722.130 ops/s
Iteration   9: 315288474.555 ops/s
Iteration  10: 314712956.931 ops/s
Iteration  11: 316434881.714 ops/s
Iteration  12: 313888860.010 ops/s
Iteration  13: 315574047.037 ops/s
Iteration  14: 315230368.079 ops/s
Iteration  15: 315687206.298 ops/s
Iteration  16: 314244669.471 ops/s
Iteration  17: 314425239.948 ops/s
Iteration  18: 316201518.378 ops/s
Iteration  19: 316903370.985 ops/s
Iteration  20: 314138636.906 ops/s
Iteration  21: 312763773.391 ops/s
Iteration  22: 314692171.802 ops/s
Iteration  23: 316284362.899 ops/s
Iteration  24: 316871001.622 ops/s
Iteration  25: 316372158.786 ops/s
Iteration  26: 316448141.363 ops/s
Iteration  27: 316018726.932 ops/s
Iteration  28: 317000079.007 ops/s
Iteration  29: 314864837.642 ops/s
Iteration  30: 315910820.045 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_newCollection":
  315405615.014 ±(99.9%) 699529.169 ops/s [Average]
  (min, avg, max) = (312763773.391, 315405615.014, 317000079.007), stdev = 1047022.408
  CI (99.9%): [314706085.845, 316105144.183] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt          Score        Error  Units
UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_newCollection  thrpt   30  315405615.014 ± 699529.169  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_newCollectionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_newCollectionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3790604.273 ops/s
# Warmup Iteration   2: 6499757.343 ops/s
# Warmup Iteration   3: 7624935.657 ops/s
# Warmup Iteration   4: 7704642.860 ops/s
# Warmup Iteration   5: 7672647.178 ops/s
# Warmup Iteration   6: 7680129.725 ops/s
# Warmup Iteration   7: 7663359.631 ops/s
# Warmup Iteration   8: 7692081.711 ops/s
# Warmup Iteration   9: 7686152.494 ops/s
# Warmup Iteration  10: 7674401.666 ops/s
# Warmup Iteration  11: 7706463.911 ops/s
# Warmup Iteration  12: 7685704.144 ops/s
# Warmup Iteration  13: 7697582.861 ops/s
# Warmup Iteration  14: 7713287.999 ops/s
# Warmup Iteration  15: 7669793.653 ops/s
# Warmup Iteration  16: 7706240.425 ops/s
# Warmup Iteration  17: 7678371.204 ops/s
# Warmup Iteration  18: 7671730.681 ops/s
# Warmup Iteration  19: 7705744.058 ops/s
# Warmup Iteration  20: 7625887.540 ops/s
# Warmup Iteration  21: 7683641.388 ops/s
# Warmup Iteration  22: 7629876.205 ops/s
# Warmup Iteration  23: 7664249.123 ops/s
# Warmup Iteration  24: 7682838.075 ops/s
# Warmup Iteration  25: 7624978.826 ops/s
# Warmup Iteration  26: 7633280.554 ops/s
# Warmup Iteration  27: 7671003.579 ops/s
# Warmup Iteration  28: 7682947.583 ops/s
# Warmup Iteration  29: 7666361.956 ops/s
# Warmup Iteration  30: 7700218.606 ops/s
Iteration   1: 7674057.508 ops/s
Iteration   2: 7646368.525 ops/s
Iteration   3: 7666353.685 ops/s
Iteration   4: 7687139.197 ops/s
Iteration   5: 7695359.059 ops/s
Iteration   6: 7691036.114 ops/s
Iteration   7: 7733508.750 ops/s
Iteration   8: 7603143.455 ops/s
Iteration   9: 7641054.627 ops/s
Iteration  10: 7701003.676 ops/s
Iteration  11: 7697787.582 ops/s
Iteration  12: 7681805.831 ops/s
Iteration  13: 7660873.228 ops/s
Iteration  14: 7682511.542 ops/s
Iteration  15: 7691450.400 ops/s
Iteration  16: 7703456.645 ops/s
Iteration  17: 7692064.474 ops/s
Iteration  18: 7562834.186 ops/s
Iteration  19: 7655480.490 ops/s
Iteration  20: 7639147.005 ops/s
Iteration  21: 7713262.125 ops/s
Iteration  22: 7702632.740 ops/s
Iteration  23: 7654354.711 ops/s
Iteration  24: 7669492.278 ops/s
Iteration  25: 7663390.143 ops/s
Iteration  26: 7681892.338 ops/s
Iteration  27: 7685790.167 ops/s
Iteration  28: 7696804.613 ops/s
Iteration  29: 7684496.440 ops/s
Iteration  30: 7680324.768 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_newCollectionWith":
  7674629.210 ±(99.9%) 22243.043 ops/s [Average]
  (min, avg, max) = (7562834.186, 7674629.210, 7733508.750), stdev = 33292.342
  CI (99.9%): [7652386.167, 7696872.253] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_newCollectionWith  thrpt   30  7674629.210 ± 22243.043  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1685092.295 ops/s
# Warmup Iteration   2: 3438272.277 ops/s
# Warmup Iteration   3: 2915000.165 ops/s
# Warmup Iteration   4: 3458872.123 ops/s
# Warmup Iteration   5: 3458298.678 ops/s
# Warmup Iteration   6: 3455280.702 ops/s
# Warmup Iteration   7: 3450653.943 ops/s
# Warmup Iteration   8: 3456549.194 ops/s
# Warmup Iteration   9: 3460987.438 ops/s
# Warmup Iteration  10: 3452296.835 ops/s
# Warmup Iteration  11: 3445197.128 ops/s
# Warmup Iteration  12: 3434027.548 ops/s
# Warmup Iteration  13: 3455400.123 ops/s
# Warmup Iteration  14: 3463471.710 ops/s
# Warmup Iteration  15: 3431385.063 ops/s
# Warmup Iteration  16: 3454824.526 ops/s
# Warmup Iteration  17: 3459482.287 ops/s
# Warmup Iteration  18: 3448429.443 ops/s
# Warmup Iteration  19: 3458766.194 ops/s
# Warmup Iteration  20: 3459951.028 ops/s
# Warmup Iteration  21: 3456566.500 ops/s
# Warmup Iteration  22: 3457747.107 ops/s
# Warmup Iteration  23: 3453269.537 ops/s
# Warmup Iteration  24: 3402597.431 ops/s
# Warmup Iteration  25: 3457201.963 ops/s
# Warmup Iteration  26: 3455771.127 ops/s
# Warmup Iteration  27: 3432787.565 ops/s
# Warmup Iteration  28: 3447144.620 ops/s
# Warmup Iteration  29: 3446620.083 ops/s
# Warmup Iteration  30: 3446050.110 ops/s
Iteration   1: 3452852.003 ops/s
Iteration   2: 3449780.178 ops/s
Iteration   3: 3463551.624 ops/s
Iteration   4: 3449930.612 ops/s
Iteration   5: 3460717.472 ops/s
Iteration   6: 3455750.932 ops/s
Iteration   7: 3459410.270 ops/s
Iteration   8: 3457133.634 ops/s
Iteration   9: 3454361.773 ops/s
Iteration  10: 3458073.776 ops/s
Iteration  11: 3451702.992 ops/s
Iteration  12: 3454883.621 ops/s
Iteration  13: 3453255.744 ops/s
Iteration  14: 3459861.836 ops/s
Iteration  15: 3403075.265 ops/s
Iteration  16: 3460801.623 ops/s
Iteration  17: 3459461.838 ops/s
Iteration  18: 3454920.284 ops/s
Iteration  19: 3457582.055 ops/s
Iteration  20: 3445318.312 ops/s
Iteration  21: 3460430.210 ops/s
Iteration  22: 3447933.385 ops/s
Iteration  23: 3459999.022 ops/s
Iteration  24: 3461672.039 ops/s
Iteration  25: 3445071.943 ops/s
Iteration  26: 3463562.340 ops/s
Iteration  27: 3463631.694 ops/s
Iteration  28: 3469990.274 ops/s
Iteration  29: 3456529.606 ops/s
Iteration  30: 3392923.839 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_noneSatisfy":
  3452805.673 ±(99.9%) 10684.679 ops/s [Average]
  (min, avg, max) = (3392923.839, 3452805.673, 3469990.274), stdev = 15992.326
  CI (99.9%): [3442120.994, 3463490.353] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_noneSatisfy  thrpt   30  3452805.673 ± 10684.679  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_notEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_notEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5810305.140 ops/s
# Warmup Iteration   2: 9352792.898 ops/s
# Warmup Iteration   3: 10929422.522 ops/s
# Warmup Iteration   4: 10950236.944 ops/s
# Warmup Iteration   5: 10950186.824 ops/s
# Warmup Iteration   6: 11000038.885 ops/s
# Warmup Iteration   7: 10994571.166 ops/s
# Warmup Iteration   8: 10986606.970 ops/s
# Warmup Iteration   9: 10948394.203 ops/s
# Warmup Iteration  10: 11016760.319 ops/s
# Warmup Iteration  11: 10964940.217 ops/s
# Warmup Iteration  12: 11009431.667 ops/s
# Warmup Iteration  13: 10969094.138 ops/s
# Warmup Iteration  14: 10989766.646 ops/s
# Warmup Iteration  15: 11009137.779 ops/s
# Warmup Iteration  16: 11002594.862 ops/s
# Warmup Iteration  17: 10945654.932 ops/s
# Warmup Iteration  18: 11035482.099 ops/s
# Warmup Iteration  19: 11009104.559 ops/s
# Warmup Iteration  20: 10968830.097 ops/s
# Warmup Iteration  21: 10981894.526 ops/s
# Warmup Iteration  22: 10974640.612 ops/s
# Warmup Iteration  23: 10992976.782 ops/s
# Warmup Iteration  24: 11014521.390 ops/s
# Warmup Iteration  25: 10940232.686 ops/s
# Warmup Iteration  26: 11023374.353 ops/s
# Warmup Iteration  27: 11010427.095 ops/s
# Warmup Iteration  28: 10930480.190 ops/s
# Warmup Iteration  29: 11033617.135 ops/s
# Warmup Iteration  30: 11039683.270 ops/s
Iteration   1: 11001995.678 ops/s
Iteration   2: 11009924.433 ops/s
Iteration   3: 11014258.738 ops/s
Iteration   4: 11050516.330 ops/s
Iteration   5: 11032099.538 ops/s
Iteration   6: 11023814.324 ops/s
Iteration   7: 11011798.813 ops/s
Iteration   8: 11024586.752 ops/s
Iteration   9: 11014367.757 ops/s
Iteration  10: 11041309.596 ops/s
Iteration  11: 10998349.008 ops/s
Iteration  12: 11065752.923 ops/s
Iteration  13: 10992886.671 ops/s
Iteration  14: 10929205.067 ops/s
Iteration  15: 11048583.398 ops/s
Iteration  16: 11028161.925 ops/s
Iteration  17: 10999912.377 ops/s
Iteration  18: 10974492.421 ops/s
Iteration  19: 11003698.996 ops/s
Iteration  20: 11071524.150 ops/s
Iteration  21: 10986651.475 ops/s
Iteration  22: 11057363.497 ops/s
Iteration  23: 11068305.773 ops/s
Iteration  24: 10959712.318 ops/s
Iteration  25: 10997918.654 ops/s
Iteration  26: 10846521.152 ops/s
Iteration  27: 11030674.521 ops/s
Iteration  28: 10858626.698 ops/s
Iteration  29: 10977862.215 ops/s
Iteration  30: 11033261.077 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_notEmpty":
  11005137.876 ±(99.9%) 35196.866 ops/s [Average]
  (min, avg, max) = (10846521.152, 11005137.876, 11071524.150), stdev = 52681.016
  CI (99.9%): [10969941.010, 11040334.742] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score       Error  Units
UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_notEmpty  thrpt   30  11005137.876 ± 35196.866  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_reduce$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_reduce

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 942486.379 ops/s
# Warmup Iteration   2: 3595326.260 ops/s
# Warmup Iteration   3: 3408212.952 ops/s
# Warmup Iteration   4: 3428846.192 ops/s
# Warmup Iteration   5: 3702486.195 ops/s
# Warmup Iteration   6: 3710157.826 ops/s
# Warmup Iteration   7: 3714173.400 ops/s
# Warmup Iteration   8: 3707605.290 ops/s
# Warmup Iteration   9: 3711954.581 ops/s
# Warmup Iteration  10: 3713000.468 ops/s
# Warmup Iteration  11: 3711498.521 ops/s
# Warmup Iteration  12: 3718279.921 ops/s
# Warmup Iteration  13: 3703907.848 ops/s
# Warmup Iteration  14: 3714104.721 ops/s
# Warmup Iteration  15: 3673807.602 ops/s
# Warmup Iteration  16: 3712897.261 ops/s
# Warmup Iteration  17: 3699328.948 ops/s
# Warmup Iteration  18: 3714717.906 ops/s
# Warmup Iteration  19: 3707528.945 ops/s
# Warmup Iteration  20: 3702324.079 ops/s
# Warmup Iteration  21: 3708039.516 ops/s
# Warmup Iteration  22: 3704884.175 ops/s
# Warmup Iteration  23: 3709920.922 ops/s
# Warmup Iteration  24: 3702593.687 ops/s
# Warmup Iteration  25: 3710717.215 ops/s
# Warmup Iteration  26: 3709631.348 ops/s
# Warmup Iteration  27: 3715053.182 ops/s
# Warmup Iteration  28: 3716555.739 ops/s
# Warmup Iteration  29: 3711682.164 ops/s
# Warmup Iteration  30: 3708454.016 ops/s
Iteration   1: 3701754.000 ops/s
Iteration   2: 3719990.268 ops/s
Iteration   3: 3704291.431 ops/s
Iteration   4: 3708997.308 ops/s
Iteration   5: 3707707.206 ops/s
Iteration   6: 3707008.982 ops/s
Iteration   7: 3720759.278 ops/s
Iteration   8: 3711256.593 ops/s
Iteration   9: 3715694.211 ops/s
Iteration  10: 3718178.220 ops/s
Iteration  11: 3717047.939 ops/s
Iteration  12: 3719674.797 ops/s
Iteration  13: 3710720.913 ops/s
Iteration  14: 3710435.008 ops/s
Iteration  15: 3711803.975 ops/s
Iteration  16: 3712200.059 ops/s
Iteration  17: 3714804.340 ops/s
Iteration  18: 3712261.686 ops/s
Iteration  19: 3719989.557 ops/s
Iteration  20: 3707936.615 ops/s
Iteration  21: 3711270.701 ops/s
Iteration  22: 3706465.391 ops/s
Iteration  23: 3703186.317 ops/s
Iteration  24: 3720659.119 ops/s
Iteration  25: 3713733.581 ops/s
Iteration  26: 3707722.465 ops/s
Iteration  27: 3718191.712 ops/s
Iteration  28: 3710774.592 ops/s
Iteration  29: 3718418.523 ops/s
Iteration  30: 3713777.805 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_reduce":
  3712557.086 ±(99.9%) 3652.112 ops/s [Average]
  (min, avg, max) = (3701754.000, 3712557.086, 3720759.278), stdev = 5466.310
  CI (99.9%): [3708904.974, 3716209.199] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_reduce  thrpt   30  3712557.086 ± 3652.112  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_reduceIfEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_reduceIfEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1677176.718 ops/s
# Warmup Iteration   2: 3301818.442 ops/s
# Warmup Iteration   3: 2759644.820 ops/s
# Warmup Iteration   4: 3314983.719 ops/s
# Warmup Iteration   5: 3309828.826 ops/s
# Warmup Iteration   6: 3315823.440 ops/s
# Warmup Iteration   7: 3305025.020 ops/s
# Warmup Iteration   8: 3311022.559 ops/s
# Warmup Iteration   9: 3314779.345 ops/s
# Warmup Iteration  10: 3321511.491 ops/s
# Warmup Iteration  11: 3309358.803 ops/s
# Warmup Iteration  12: 3313883.425 ops/s
# Warmup Iteration  13: 3315269.349 ops/s
# Warmup Iteration  14: 3311684.214 ops/s
# Warmup Iteration  15: 3316527.633 ops/s
# Warmup Iteration  16: 3314979.463 ops/s
# Warmup Iteration  17: 3317632.679 ops/s
# Warmup Iteration  18: 3311328.748 ops/s
# Warmup Iteration  19: 3306129.583 ops/s
# Warmup Iteration  20: 3313653.984 ops/s
# Warmup Iteration  21: 3314620.813 ops/s
# Warmup Iteration  22: 3308672.979 ops/s
# Warmup Iteration  23: 3312847.391 ops/s
# Warmup Iteration  24: 3313554.943 ops/s
# Warmup Iteration  25: 3304070.448 ops/s
# Warmup Iteration  26: 3290285.923 ops/s
# Warmup Iteration  27: 3317248.988 ops/s
# Warmup Iteration  28: 3310554.098 ops/s
# Warmup Iteration  29: 3315735.195 ops/s
# Warmup Iteration  30: 3307798.318 ops/s
Iteration   1: 3302407.536 ops/s
Iteration   2: 3306771.613 ops/s
Iteration   3: 3312971.964 ops/s
Iteration   4: 3308971.428 ops/s
Iteration   5: 3316814.582 ops/s
Iteration   6: 3299557.892 ops/s
Iteration   7: 3321524.895 ops/s
Iteration   8: 3305478.212 ops/s
Iteration   9: 3321391.695 ops/s
Iteration  10: 3313772.807 ops/s
Iteration  11: 3303057.600 ops/s
Iteration  12: 3313513.677 ops/s
Iteration  13: 3316645.993 ops/s
Iteration  14: 3313483.003 ops/s
Iteration  15: 3305378.290 ops/s
Iteration  16: 3306411.875 ops/s
Iteration  17: 3306459.372 ops/s
Iteration  18: 3322764.756 ops/s
Iteration  19: 3308047.333 ops/s
Iteration  20: 3315500.887 ops/s
Iteration  21: 3316272.759 ops/s
Iteration  22: 3302767.965 ops/s
Iteration  23: 3305755.684 ops/s
Iteration  24: 3310891.700 ops/s
Iteration  25: 3317568.846 ops/s
Iteration  26: 3311611.647 ops/s
Iteration  27: 3313886.707 ops/s
Iteration  28: 3303019.615 ops/s
Iteration  29: 3303670.629 ops/s
Iteration  30: 3316597.482 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_reduceIfEmpty":
  3310765.615 ±(99.9%) 4282.531 ops/s [Average]
  (min, avg, max) = (3299557.892, 3310765.615, 3322764.756), stdev = 6409.891
  CI (99.9%): [3306483.084, 3315048.145] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score      Error  Units
UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_reduceIfEmpty  thrpt   30  3310765.615 ± 4282.531  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 721811.371 ops/s
# Warmup Iteration   2: 761061.394 ops/s
# Warmup Iteration   3: 1016547.323 ops/s
# Warmup Iteration   4: 997789.813 ops/s
# Warmup Iteration   5: 1007879.983 ops/s
# Warmup Iteration   6: 1012798.376 ops/s
# Warmup Iteration   7: 1000264.779 ops/s
# Warmup Iteration   8: 1007439.603 ops/s
# Warmup Iteration   9: 1010481.940 ops/s
# Warmup Iteration  10: 1007195.688 ops/s
# Warmup Iteration  11: 837741.110 ops/s
# Warmup Iteration  12: 1011291.524 ops/s
# Warmup Iteration  13: 1010337.169 ops/s
# Warmup Iteration  14: 1008722.834 ops/s
# Warmup Iteration  15: 1007747.523 ops/s
# Warmup Iteration  16: 1007919.151 ops/s
# Warmup Iteration  17: 1075578.985 ops/s
# Warmup Iteration  18: 1072051.384 ops/s
# Warmup Iteration  19: 1075321.412 ops/s
# Warmup Iteration  20: 1066321.330 ops/s
# Warmup Iteration  21: 1075777.271 ops/s
# Warmup Iteration  22: 1073007.824 ops/s
# Warmup Iteration  23: 1076323.257 ops/s
# Warmup Iteration  24: 1074554.307 ops/s
# Warmup Iteration  25: 1076371.040 ops/s
# Warmup Iteration  26: 1077851.405 ops/s
# Warmup Iteration  27: 1076512.114 ops/s
# Warmup Iteration  28: 1076260.081 ops/s
# Warmup Iteration  29: 1069354.894 ops/s
# Warmup Iteration  30: 1076089.212 ops/s
Iteration   1: 1079219.016 ops/s
Iteration   2: 1074134.840 ops/s
Iteration   3: 1077322.430 ops/s
Iteration   4: 1073549.284 ops/s
Iteration   5: 1077279.521 ops/s
Iteration   6: 1073673.371 ops/s
Iteration   7: 1080447.612 ops/s
Iteration   8: 1073234.546 ops/s
Iteration   9: 1076851.627 ops/s
Iteration  10: 1075527.997 ops/s
Iteration  11: 1076674.455 ops/s
Iteration  12: 1073612.282 ops/s
Iteration  13: 1075517.672 ops/s
Iteration  14: 1075685.741 ops/s
Iteration  15: 1074736.065 ops/s
Iteration  16: 1077686.171 ops/s
Iteration  17: 1073552.501 ops/s
Iteration  18: 1071730.976 ops/s
Iteration  19: 1068511.725 ops/s
Iteration  20: 1076262.550 ops/s
Iteration  21: 1074958.418 ops/s
Iteration  22: 1075074.266 ops/s
Iteration  23: 1077400.087 ops/s
Iteration  24: 1068163.244 ops/s
Iteration  25: 1078656.247 ops/s
Iteration  26: 1072445.012 ops/s
Iteration  27: 1073642.770 ops/s
Iteration  28: 1075123.247 ops/s
Iteration  29: 1073655.509 ops/s
Iteration  30: 1078717.666 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows":
  1075101.562 ±(99.9%) 1874.627 ops/s [Average]
  (min, avg, max) = (1068163.244, 1075101.562, 1080447.612), stdev = 2805.854
  CI (99.9%): [1073226.935, 1076976.189] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score      Error  Units
UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows  thrpt   30  1075101.562 ± 1874.627  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3604108.166 ops/s
# Warmup Iteration   2: 15176795.004 ops/s
# Warmup Iteration   3: 13226844.344 ops/s
# Warmup Iteration   4: 15616238.557 ops/s
# Warmup Iteration   5: 15582263.962 ops/s
# Warmup Iteration   6: 15605983.309 ops/s
# Warmup Iteration   7: 15566893.772 ops/s
# Warmup Iteration   8: 15568443.488 ops/s
# Warmup Iteration   9: 15573390.878 ops/s
# Warmup Iteration  10: 15439727.720 ops/s
# Warmup Iteration  11: 15602093.253 ops/s
# Warmup Iteration  12: 15623110.482 ops/s
# Warmup Iteration  13: 15574069.891 ops/s
# Warmup Iteration  14: 15567017.101 ops/s
# Warmup Iteration  15: 15543020.365 ops/s
# Warmup Iteration  16: 15550352.610 ops/s
# Warmup Iteration  17: 15626325.102 ops/s
# Warmup Iteration  18: 15554540.577 ops/s
# Warmup Iteration  19: 15529670.940 ops/s
# Warmup Iteration  20: 15585333.445 ops/s
# Warmup Iteration  21: 15605414.096 ops/s
# Warmup Iteration  22: 15524584.637 ops/s
# Warmup Iteration  23: 15615846.871 ops/s
# Warmup Iteration  24: 15592431.616 ops/s
# Warmup Iteration  25: 15499471.646 ops/s
# Warmup Iteration  26: 15604532.831 ops/s
# Warmup Iteration  27: 15594645.938 ops/s
# Warmup Iteration  28: 15588864.991 ops/s
# Warmup Iteration  29: 15630007.940 ops/s
# Warmup Iteration  30: 15567453.912 ops/s
Iteration   1: 15535627.907 ops/s
Iteration   2: 15585701.436 ops/s
Iteration   3: 15590738.151 ops/s
Iteration   4: 15608151.596 ops/s
Iteration   5: 15597213.709 ops/s
Iteration   6: 15586448.132 ops/s
Iteration   7: 15641379.381 ops/s
Iteration   8: 15666203.845 ops/s
Iteration   9: 15581305.600 ops/s
Iteration  10: 15368037.183 ops/s
Iteration  11: 15496174.780 ops/s
Iteration  12: 15561259.358 ops/s
Iteration  13: 15383725.431 ops/s
Iteration  14: 15602625.236 ops/s
Iteration  15: 15521721.889 ops/s
Iteration  16: 15474343.825 ops/s
Iteration  17: 15558750.928 ops/s
Iteration  18: 15549372.810 ops/s
Iteration  19: 15637829.925 ops/s
Iteration  20: 15639724.860 ops/s
Iteration  21: 15522052.550 ops/s
Iteration  22: 15582693.382 ops/s
Iteration  23: 15575458.457 ops/s
Iteration  24: 15622838.451 ops/s
Iteration  25: 15358506.460 ops/s
Iteration  26: 15580982.746 ops/s
Iteration  27: 15568621.294 ops/s
Iteration  28: 15600350.863 ops/s
Iteration  29: 15582758.821 ops/s
Iteration  30: 15587785.077 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_reject":
  15558946.136 ±(99.9%) 51190.297 ops/s [Average]
  (min, avg, max) = (15358506.460, 15558946.136, 15666203.845), stdev = 76619.233
  CI (99.9%): [15507755.839, 15610136.434] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_reject  thrpt   30  15558946.136 ± 51190.297  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8752840.888 ops/s
# Warmup Iteration   2: 17766462.823 ops/s
# Warmup Iteration   3: 17775789.633 ops/s
# Warmup Iteration   4: 15370799.229 ops/s
# Warmup Iteration   5: 18155092.912 ops/s
# Warmup Iteration   6: 18155666.234 ops/s
# Warmup Iteration   7: 18123408.783 ops/s
# Warmup Iteration   8: 18133120.769 ops/s
# Warmup Iteration   9: 18138398.595 ops/s
# Warmup Iteration  10: 18173993.588 ops/s
# Warmup Iteration  11: 18169787.894 ops/s
# Warmup Iteration  12: 18110373.630 ops/s
# Warmup Iteration  13: 18142972.385 ops/s
# Warmup Iteration  14: 18156219.450 ops/s
# Warmup Iteration  15: 18097205.225 ops/s
# Warmup Iteration  16: 18157723.999 ops/s
# Warmup Iteration  17: 18141343.465 ops/s
# Warmup Iteration  18: 18124429.860 ops/s
# Warmup Iteration  19: 18144440.386 ops/s
# Warmup Iteration  20: 18134936.375 ops/s
# Warmup Iteration  21: 18127636.723 ops/s
# Warmup Iteration  22: 18156674.896 ops/s
# Warmup Iteration  23: 18103437.127 ops/s
# Warmup Iteration  24: 18134432.066 ops/s
# Warmup Iteration  25: 18139435.178 ops/s
# Warmup Iteration  26: 18110330.993 ops/s
# Warmup Iteration  27: 18153237.653 ops/s
# Warmup Iteration  28: 18138781.319 ops/s
# Warmup Iteration  29: 18115663.804 ops/s
# Warmup Iteration  30: 18134324.147 ops/s
Iteration   1: 18151525.982 ops/s
Iteration   2: 18130393.636 ops/s
Iteration   3: 18119606.625 ops/s
Iteration   4: 18170692.624 ops/s
Iteration   5: 18121445.093 ops/s
Iteration   6: 18164447.399 ops/s
Iteration   7: 18096862.603 ops/s
Iteration   8: 18128388.275 ops/s
Iteration   9: 18079449.791 ops/s
Iteration  10: 18181790.223 ops/s
Iteration  11: 18089643.535 ops/s
Iteration  12: 18145178.029 ops/s
Iteration  13: 18137438.201 ops/s
Iteration  14: 18108250.100 ops/s
Iteration  15: 18172660.141 ops/s
Iteration  16: 18198522.166 ops/s
Iteration  17: 18150147.456 ops/s
Iteration  18: 18180289.915 ops/s
Iteration  19: 18165894.147 ops/s
Iteration  20: 18146987.309 ops/s
Iteration  21: 18181193.666 ops/s
Iteration  22: 18179933.904 ops/s
Iteration  23: 18124669.894 ops/s
Iteration  24: 18148519.376 ops/s
Iteration  25: 18079896.130 ops/s
Iteration  26: 18184525.017 ops/s
Iteration  27: 18143325.798 ops/s
Iteration  28: 18139565.301 ops/s
Iteration  29: 17861072.959 ops/s
Iteration  30: 18113982.638 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_remove":
  18133209.931 ±(99.9%) 40534.903 ops/s [Average]
  (min, avg, max) = (17861072.959, 18133209.931, 18198522.166), stdev = 60670.740
  CI (99.9%): [18092675.028, 18173744.834] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_remove  thrpt   30  18133209.931 ± 40534.903  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 720681.099 ops/s
# Warmup Iteration   2: 801893.358 ops/s
# Warmup Iteration   3: 1013368.377 ops/s
# Warmup Iteration   4: 1012325.396 ops/s
# Warmup Iteration   5: 1008563.874 ops/s
# Warmup Iteration   6: 1007166.054 ops/s
# Warmup Iteration   7: 1009742.172 ops/s
# Warmup Iteration   8: 1009465.049 ops/s
# Warmup Iteration   9: 1012089.133 ops/s
# Warmup Iteration  10: 851942.352 ops/s
# Warmup Iteration  11: 1003873.009 ops/s
# Warmup Iteration  12: 1011299.529 ops/s
# Warmup Iteration  13: 1012069.640 ops/s
# Warmup Iteration  14: 1003091.045 ops/s
# Warmup Iteration  15: 1012876.569 ops/s
# Warmup Iteration  16: 1010697.992 ops/s
# Warmup Iteration  17: 1068006.502 ops/s
# Warmup Iteration  18: 1079390.448 ops/s
# Warmup Iteration  19: 1074242.611 ops/s
# Warmup Iteration  20: 1075623.595 ops/s
# Warmup Iteration  21: 1078082.983 ops/s
# Warmup Iteration  22: 1072674.461 ops/s
# Warmup Iteration  23: 1077677.849 ops/s
# Warmup Iteration  24: 1077312.851 ops/s
# Warmup Iteration  25: 1073213.309 ops/s
# Warmup Iteration  26: 1073853.245 ops/s
# Warmup Iteration  27: 1074375.163 ops/s
# Warmup Iteration  28: 1073038.708 ops/s
# Warmup Iteration  29: 1073376.797 ops/s
# Warmup Iteration  30: 1073866.975 ops/s
Iteration   1: 1062727.074 ops/s
Iteration   2: 1075086.441 ops/s
Iteration   3: 1079743.875 ops/s
Iteration   4: 1075762.692 ops/s
Iteration   5: 1073491.575 ops/s
Iteration   6: 1077639.568 ops/s
Iteration   7: 1080763.035 ops/s
Iteration   8: 1075213.034 ops/s
Iteration   9: 1079653.154 ops/s
Iteration  10: 1056127.233 ops/s
Iteration  11: 1071693.312 ops/s
Iteration  12: 1077002.279 ops/s
Iteration  13: 1079406.172 ops/s
Iteration  14: 1077810.782 ops/s
Iteration  15: 1075977.579 ops/s
Iteration  16: 1073091.896 ops/s
Iteration  17: 1078889.157 ops/s
Iteration  18: 1074814.237 ops/s
Iteration  19: 1077201.189 ops/s
Iteration  20: 1079481.975 ops/s
Iteration  21: 1076655.342 ops/s
Iteration  22: 1077683.558 ops/s
Iteration  23: 1067892.286 ops/s
Iteration  24: 1076223.226 ops/s
Iteration  25: 1078229.671 ops/s
Iteration  26: 1076484.276 ops/s
Iteration  27: 1078954.962 ops/s
Iteration  28: 1081224.488 ops/s
Iteration  29: 1078449.165 ops/s
Iteration  30: 1076660.013 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_removeAll":
  1075667.775 ±(99.9%) 3533.693 ops/s [Average]
  (min, avg, max) = (1056127.233, 1075667.775, 1081224.488), stdev = 5289.065
  CI (99.9%): [1072134.082, 1079201.468] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_removeAll  thrpt   30  1075667.775 ± 3533.693  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_removeAll_iterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_removeAll_iterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 697680.622 ops/s
# Warmup Iteration   2: 809601.764 ops/s
# Warmup Iteration   3: 1009262.345 ops/s
# Warmup Iteration   4: 1010140.605 ops/s
# Warmup Iteration   5: 1005160.348 ops/s
# Warmup Iteration   6: 1011973.783 ops/s
# Warmup Iteration   7: 1011128.114 ops/s
# Warmup Iteration   8: 1013112.968 ops/s
# Warmup Iteration   9: 929320.740 ops/s
# Warmup Iteration  10: 938137.650 ops/s
# Warmup Iteration  11: 1008579.517 ops/s
# Warmup Iteration  12: 1010723.280 ops/s
# Warmup Iteration  13: 1009960.998 ops/s
# Warmup Iteration  14: 1010967.548 ops/s
# Warmup Iteration  15: 1009228.818 ops/s
# Warmup Iteration  16: 1012265.113 ops/s
# Warmup Iteration  17: 1076406.677 ops/s
# Warmup Iteration  18: 1076727.711 ops/s
# Warmup Iteration  19: 1072820.577 ops/s
# Warmup Iteration  20: 1073555.288 ops/s
# Warmup Iteration  21: 1062144.777 ops/s
# Warmup Iteration  22: 1076768.198 ops/s
# Warmup Iteration  23: 1075620.382 ops/s
# Warmup Iteration  24: 1076011.396 ops/s
# Warmup Iteration  25: 1075849.318 ops/s
# Warmup Iteration  26: 1076988.098 ops/s
# Warmup Iteration  27: 1075597.093 ops/s
# Warmup Iteration  28: 1073404.585 ops/s
# Warmup Iteration  29: 1074862.804 ops/s
# Warmup Iteration  30: 1075271.483 ops/s
Iteration   1: 1072019.251 ops/s
Iteration   2: 1073943.784 ops/s
Iteration   3: 1066418.175 ops/s
Iteration   4: 1074182.222 ops/s
Iteration   5: 1076211.637 ops/s
Iteration   6: 1078780.133 ops/s
Iteration   7: 1076081.988 ops/s
Iteration   8: 1073485.137 ops/s
Iteration   9: 1078008.537 ops/s
Iteration  10: 1073205.550 ops/s
Iteration  11: 1073995.565 ops/s
Iteration  12: 1069547.710 ops/s
Iteration  13: 1068838.433 ops/s
Iteration  14: 1075101.303 ops/s
Iteration  15: 1077164.662 ops/s
Iteration  16: 1075774.852 ops/s
Iteration  17: 1074210.025 ops/s
Iteration  18: 1074019.887 ops/s
Iteration  19: 1075888.248 ops/s
Iteration  20: 1071207.847 ops/s
Iteration  21: 1074218.318 ops/s
Iteration  22: 1075140.623 ops/s
Iteration  23: 1081303.076 ops/s
Iteration  24: 1078426.335 ops/s
Iteration  25: 1072832.384 ops/s
Iteration  26: 1073569.399 ops/s
Iteration  27: 1074947.089 ops/s
Iteration  28: 1075281.587 ops/s
Iteration  29: 1077007.003 ops/s
Iteration  30: 1078721.356 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_removeAll_iterable":
  1074651.071 ±(99.9%) 2074.950 ops/s [Average]
  (min, avg, max) = (1066418.175, 1074651.071, 1081303.076), stdev = 3105.688
  CI (99.9%): [1072576.120, 1076726.021] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score      Error  Units
UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_removeAll_iterable  thrpt   30  1074651.071 ± 2074.950  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 725281.606 ops/s
# Warmup Iteration   2: 807020.838 ops/s
# Warmup Iteration   3: 1018419.222 ops/s
# Warmup Iteration   4: 1012246.329 ops/s
# Warmup Iteration   5: 1010161.408 ops/s
# Warmup Iteration   6: 1010412.597 ops/s
# Warmup Iteration   7: 1014845.714 ops/s
# Warmup Iteration   8: 1012471.396 ops/s
# Warmup Iteration   9: 1011840.348 ops/s
# Warmup Iteration  10: 852942.624 ops/s
# Warmup Iteration  11: 999834.926 ops/s
# Warmup Iteration  12: 1009773.002 ops/s
# Warmup Iteration  13: 1010885.920 ops/s
# Warmup Iteration  14: 1011615.059 ops/s
# Warmup Iteration  15: 1010010.782 ops/s
# Warmup Iteration  16: 1013797.564 ops/s
# Warmup Iteration  17: 1073536.182 ops/s
# Warmup Iteration  18: 1074819.000 ops/s
# Warmup Iteration  19: 1074481.766 ops/s
# Warmup Iteration  20: 1075740.445 ops/s
# Warmup Iteration  21: 1066044.452 ops/s
# Warmup Iteration  22: 1078590.356 ops/s
# Warmup Iteration  23: 1076831.535 ops/s
# Warmup Iteration  24: 1071700.389 ops/s
# Warmup Iteration  25: 1078572.552 ops/s
# Warmup Iteration  26: 1074429.474 ops/s
# Warmup Iteration  27: 1082738.570 ops/s
# Warmup Iteration  28: 1080695.641 ops/s
# Warmup Iteration  29: 1075280.364 ops/s
# Warmup Iteration  30: 1071056.806 ops/s
Iteration   1: 1077663.957 ops/s
Iteration   2: 1079054.642 ops/s
Iteration   3: 1082548.531 ops/s
Iteration   4: 1082133.777 ops/s
Iteration   5: 1075153.854 ops/s
Iteration   6: 1080809.597 ops/s
Iteration   7: 1078320.542 ops/s
Iteration   8: 1075566.344 ops/s
Iteration   9: 1063767.978 ops/s
Iteration  10: 1077569.654 ops/s
Iteration  11: 1077019.727 ops/s
Iteration  12: 1080123.367 ops/s
Iteration  13: 1076121.400 ops/s
Iteration  14: 1077844.621 ops/s
Iteration  15: 1078775.905 ops/s
Iteration  16: 1080935.762 ops/s
Iteration  17: 1079006.498 ops/s
Iteration  18: 1068626.377 ops/s
Iteration  19: 1076806.997 ops/s
Iteration  20: 1080923.382 ops/s
Iteration  21: 1076727.107 ops/s
Iteration  22: 1081442.265 ops/s
Iteration  23: 1077021.204 ops/s
Iteration  24: 1075380.354 ops/s
Iteration  25: 1076409.484 ops/s
Iteration  26: 1079746.422 ops/s
Iteration  27: 1080878.663 ops/s
Iteration  28: 1075123.881 ops/s
Iteration  29: 1079612.767 ops/s
Iteration  30: 1080127.948 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_retainAll":
  1077708.100 ±(99.9%) 2569.234 ops/s [Average]
  (min, avg, max) = (1063767.978, 1077708.100, 1082548.531), stdev = 3845.509
  CI (99.9%): [1075138.866, 1080277.335] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_retainAll  thrpt   30  1077708.100 ± 2569.234  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_retainAll_iterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_retainAll_iterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 706305.007 ops/s
# Warmup Iteration   2: 814932.186 ops/s
# Warmup Iteration   3: 1012764.975 ops/s
# Warmup Iteration   4: 1008589.956 ops/s
# Warmup Iteration   5: 1016092.699 ops/s
# Warmup Iteration   6: 1017831.331 ops/s
# Warmup Iteration   7: 1018265.649 ops/s
# Warmup Iteration   8: 1013403.172 ops/s
# Warmup Iteration   9: 915146.424 ops/s
# Warmup Iteration  10: 950784.899 ops/s
# Warmup Iteration  11: 1011396.261 ops/s
# Warmup Iteration  12: 1016249.718 ops/s
# Warmup Iteration  13: 1012289.216 ops/s
# Warmup Iteration  14: 1012268.737 ops/s
# Warmup Iteration  15: 1015850.788 ops/s
# Warmup Iteration  16: 1014542.245 ops/s
# Warmup Iteration  17: 1067311.587 ops/s
# Warmup Iteration  18: 1068939.319 ops/s
# Warmup Iteration  19: 1063487.293 ops/s
# Warmup Iteration  20: 1072320.287 ops/s
# Warmup Iteration  21: 1073691.408 ops/s
# Warmup Iteration  22: 1071304.627 ops/s
# Warmup Iteration  23: 1071714.882 ops/s
# Warmup Iteration  24: 1071131.091 ops/s
# Warmup Iteration  25: 1073206.437 ops/s
# Warmup Iteration  26: 1071034.719 ops/s
# Warmup Iteration  27: 1064136.626 ops/s
# Warmup Iteration  28: 1069296.531 ops/s
# Warmup Iteration  29: 1072006.469 ops/s
# Warmup Iteration  30: 1071510.755 ops/s
Iteration   1: 1072946.932 ops/s
Iteration   2: 1066132.312 ops/s
Iteration   3: 1071164.045 ops/s
Iteration   4: 1075109.572 ops/s
Iteration   5: 1078375.952 ops/s
Iteration   6: 1070240.693 ops/s
Iteration   7: 1069665.413 ops/s
Iteration   8: 1078842.564 ops/s
Iteration   9: 1072170.370 ops/s
Iteration  10: 1072725.079 ops/s
Iteration  11: 1069589.453 ops/s
Iteration  12: 1078289.639 ops/s
Iteration  13: 1072242.294 ops/s
Iteration  14: 1069775.445 ops/s
Iteration  15: 1073219.077 ops/s
Iteration  16: 1073990.012 ops/s
Iteration  17: 1076082.218 ops/s
Iteration  18: 1071165.765 ops/s
Iteration  19: 1068705.539 ops/s
Iteration  20: 1064954.177 ops/s
Iteration  21: 1076336.947 ops/s
Iteration  22: 1071881.775 ops/s
Iteration  23: 1072450.952 ops/s
Iteration  24: 1074798.762 ops/s
Iteration  25: 1071354.026 ops/s
Iteration  26: 1073519.174 ops/s
Iteration  27: 1073389.126 ops/s
Iteration  28: 1070489.976 ops/s
Iteration  29: 1074034.768 ops/s
Iteration  30: 1073357.216 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_retainAll_iterable":
  1072566.642 ±(99.9%) 2170.593 ops/s [Average]
  (min, avg, max) = (1064954.177, 1072566.642, 1078842.564), stdev = 3248.842
  CI (99.9%): [1070396.049, 1074737.235] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score      Error  Units
UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_retainAll_iterable  thrpt   30  1072566.642 ± 2170.593  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3618949.532 ops/s
# Warmup Iteration   2: 15248747.569 ops/s
# Warmup Iteration   3: 13053406.048 ops/s
# Warmup Iteration   4: 15399537.350 ops/s
# Warmup Iteration   5: 15410291.399 ops/s
# Warmup Iteration   6: 15386615.538 ops/s
# Warmup Iteration   7: 15427923.209 ops/s
# Warmup Iteration   8: 15396015.065 ops/s
# Warmup Iteration   9: 15386480.380 ops/s
# Warmup Iteration  10: 15420254.403 ops/s
# Warmup Iteration  11: 15335786.097 ops/s
# Warmup Iteration  12: 15400248.970 ops/s
# Warmup Iteration  13: 15423473.989 ops/s
# Warmup Iteration  14: 15376807.142 ops/s
# Warmup Iteration  15: 15373714.359 ops/s
# Warmup Iteration  16: 15430559.995 ops/s
# Warmup Iteration  17: 15362489.393 ops/s
# Warmup Iteration  18: 15408765.846 ops/s
# Warmup Iteration  19: 15415014.666 ops/s
# Warmup Iteration  20: 15370114.852 ops/s
# Warmup Iteration  21: 15360399.335 ops/s
# Warmup Iteration  22: 15335002.645 ops/s
# Warmup Iteration  23: 15387123.826 ops/s
# Warmup Iteration  24: 15240315.611 ops/s
# Warmup Iteration  25: 15410817.364 ops/s
# Warmup Iteration  26: 15369142.737 ops/s
# Warmup Iteration  27: 15426835.260 ops/s
# Warmup Iteration  28: 15350154.289 ops/s
# Warmup Iteration  29: 15352884.884 ops/s
# Warmup Iteration  30: 15445916.989 ops/s
Iteration   1: 15416980.305 ops/s
Iteration   2: 15339219.156 ops/s
Iteration   3: 15424368.476 ops/s
Iteration   4: 15372297.067 ops/s
Iteration   5: 15255897.579 ops/s
Iteration   6: 15430165.017 ops/s
Iteration   7: 15198943.102 ops/s
Iteration   8: 15107259.652 ops/s
Iteration   9: 15386529.079 ops/s
Iteration  10: 15387439.580 ops/s
Iteration  11: 15407424.594 ops/s
Iteration  12: 15463440.392 ops/s
Iteration  13: 15354257.433 ops/s
Iteration  14: 15307912.350 ops/s
Iteration  15: 15486092.405 ops/s
Iteration  16: 15490059.690 ops/s
Iteration  17: 15386275.064 ops/s
Iteration  18: 15403198.246 ops/s
Iteration  19: 15412136.515 ops/s
Iteration  20: 15371494.614 ops/s
Iteration  21: 15459162.565 ops/s
Iteration  22: 15148749.882 ops/s
Iteration  23: 15418413.987 ops/s
Iteration  24: 15336612.513 ops/s
Iteration  25: 15381702.398 ops/s
Iteration  26: 15415752.391 ops/s
Iteration  27: 15409498.468 ops/s
Iteration  28: 15397484.970 ops/s
Iteration  29: 15452494.815 ops/s
Iteration  30: 15405607.880 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_select":
  15374229.006 ±(99.9%) 60695.653 ops/s [Average]
  (min, avg, max) = (15107259.652, 15374229.006, 15490059.690), stdev = 90846.403
  CI (99.9%): [15313533.353, 15434924.659] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_select  thrpt   30  15374229.006 ± 60695.653  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3793255.316 ops/s
# Warmup Iteration   2: 6144853.699 ops/s
# Warmup Iteration   3: 7162771.543 ops/s
# Warmup Iteration   4: 7271124.762 ops/s
# Warmup Iteration   5: 7242591.856 ops/s
# Warmup Iteration   6: 7227084.748 ops/s
# Warmup Iteration   7: 7261086.093 ops/s
# Warmup Iteration   8: 7166972.415 ops/s
# Warmup Iteration   9: 7198281.567 ops/s
# Warmup Iteration  10: 7272841.562 ops/s
# Warmup Iteration  11: 7230914.831 ops/s
# Warmup Iteration  12: 7227560.388 ops/s
# Warmup Iteration  13: 7275065.333 ops/s
# Warmup Iteration  14: 7187899.081 ops/s
# Warmup Iteration  15: 7214528.856 ops/s
# Warmup Iteration  16: 7274503.949 ops/s
# Warmup Iteration  17: 7233719.342 ops/s
# Warmup Iteration  18: 7266698.610 ops/s
# Warmup Iteration  19: 7243877.365 ops/s
# Warmup Iteration  20: 7260727.489 ops/s
# Warmup Iteration  21: 7258607.003 ops/s
# Warmup Iteration  22: 7237903.530 ops/s
# Warmup Iteration  23: 7269618.451 ops/s
# Warmup Iteration  24: 7288735.271 ops/s
# Warmup Iteration  25: 7164347.590 ops/s
# Warmup Iteration  26: 7257596.912 ops/s
# Warmup Iteration  27: 7245206.186 ops/s
# Warmup Iteration  28: 7264589.580 ops/s
# Warmup Iteration  29: 7273327.264 ops/s
# Warmup Iteration  30: 7213159.688 ops/s
Iteration   1: 7253099.476 ops/s
Iteration   2: 7229989.892 ops/s
Iteration   3: 7241843.561 ops/s
Iteration   4: 7233271.707 ops/s
Iteration   5: 7193381.866 ops/s
Iteration   6: 7266289.742 ops/s
Iteration   7: 7264365.173 ops/s
Iteration   8: 7313046.420 ops/s
Iteration   9: 7266237.545 ops/s
Iteration  10: 7234297.972 ops/s
Iteration  11: 7233743.176 ops/s
Iteration  12: 7226620.996 ops/s
Iteration  13: 7293649.923 ops/s
Iteration  14: 7233647.534 ops/s
Iteration  15: 7277179.981 ops/s
Iteration  16: 7201699.740 ops/s
Iteration  17: 7262168.896 ops/s
Iteration  18: 7268265.030 ops/s
Iteration  19: 7257405.377 ops/s
Iteration  20: 7285306.494 ops/s
Iteration  21: 7213854.618 ops/s
Iteration  22: 7214144.763 ops/s
Iteration  23: 7233958.144 ops/s
Iteration  24: 7257636.463 ops/s
Iteration  25: 7260538.113 ops/s
Iteration  26: 7209516.259 ops/s
Iteration  27: 7177856.078 ops/s
Iteration  28: 7161553.341 ops/s
Iteration  29: 7134408.704 ops/s
Iteration  30: 7272729.443 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_size":
  7239056.881 ±(99.9%) 26238.537 ops/s [Average]
  (min, avg, max) = (7134408.704, 7239056.881, 7313046.420), stdev = 39272.610
  CI (99.9%): [7212818.344, 7265295.418] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_size  thrpt   30  7239056.881 ± 26238.537  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_testEquals$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_testEquals

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 171696006.528 ops/s
# Warmup Iteration   2: 296390460.538 ops/s
# Warmup Iteration   3: 243144982.364 ops/s
# Warmup Iteration   4: 275158120.364 ops/s
# Warmup Iteration   5: 275981815.554 ops/s
# Warmup Iteration   6: 275158958.668 ops/s
# Warmup Iteration   7: 273390948.073 ops/s
# Warmup Iteration   8: 276149820.959 ops/s
# Warmup Iteration   9: 274941912.014 ops/s
# Warmup Iteration  10: 275164025.889 ops/s
# Warmup Iteration  11: 272078359.197 ops/s
# Warmup Iteration  12: 274308323.993 ops/s
# Warmup Iteration  13: 275203682.818 ops/s
# Warmup Iteration  14: 275284229.784 ops/s
# Warmup Iteration  15: 274492351.964 ops/s
# Warmup Iteration  16: 274883486.095 ops/s
# Warmup Iteration  17: 274694525.164 ops/s
# Warmup Iteration  18: 274647918.427 ops/s
# Warmup Iteration  19: 273636916.506 ops/s
# Warmup Iteration  20: 274704287.026 ops/s
# Warmup Iteration  21: 275236120.082 ops/s
# Warmup Iteration  22: 274471904.897 ops/s
# Warmup Iteration  23: 274536430.763 ops/s
# Warmup Iteration  24: 275196084.573 ops/s
# Warmup Iteration  25: 275594986.101 ops/s
# Warmup Iteration  26: 275470947.229 ops/s
# Warmup Iteration  27: 275327352.690 ops/s
# Warmup Iteration  28: 275522541.563 ops/s
# Warmup Iteration  29: 274838207.351 ops/s
# Warmup Iteration  30: 275128986.443 ops/s
Iteration   1: 276143952.013 ops/s
Iteration   2: 274781622.835 ops/s
Iteration   3: 275587560.782 ops/s
Iteration   4: 276049234.800 ops/s
Iteration   5: 274859639.006 ops/s
Iteration   6: 276617552.759 ops/s
Iteration   7: 274384177.797 ops/s
Iteration   8: 275126145.334 ops/s
Iteration   9: 275103846.088 ops/s
Iteration  10: 275138510.394 ops/s
Iteration  11: 276080516.345 ops/s
Iteration  12: 274622185.498 ops/s
Iteration  13: 275664256.634 ops/s
Iteration  14: 274548618.213 ops/s
Iteration  15: 275664570.251 ops/s
Iteration  16: 275415112.673 ops/s
Iteration  17: 275810619.689 ops/s
Iteration  18: 275431325.434 ops/s
Iteration  19: 274606155.756 ops/s
Iteration  20: 275000901.160 ops/s
Iteration  21: 271958945.887 ops/s
Iteration  22: 276051567.849 ops/s
Iteration  23: 274824279.624 ops/s
Iteration  24: 274544710.612 ops/s
Iteration  25: 274366616.527 ops/s
Iteration  26: 274466021.766 ops/s
Iteration  27: 275871921.794 ops/s
Iteration  28: 275306026.191 ops/s
Iteration  29: 275338472.597 ops/s
Iteration  30: 274799287.500 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_testEquals":
  275138811.794 ±(99.9%) 570433.629 ops/s [Average]
  (min, avg, max) = (271958945.887, 275138811.794, 276617552.759), stdev = 853798.266
  CI (99.9%): [274568378.165, 275709245.423] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt          Score        Error  Units
UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_testEquals  thrpt   30  275138811.794 ± 570433.629  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_testHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_testHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 173404594.558 ops/s
# Warmup Iteration   2: 298084588.966 ops/s
# Warmup Iteration   3: 285365920.507 ops/s
# Warmup Iteration   4: 314919884.319 ops/s
# Warmup Iteration   5: 317724678.731 ops/s
# Warmup Iteration   6: 316326144.862 ops/s
# Warmup Iteration   7: 311964735.790 ops/s
# Warmup Iteration   8: 317194606.801 ops/s
# Warmup Iteration   9: 317126555.556 ops/s
# Warmup Iteration  10: 314640283.823 ops/s
# Warmup Iteration  11: 315266098.692 ops/s
# Warmup Iteration  12: 317388746.939 ops/s
# Warmup Iteration  13: 317405318.756 ops/s
# Warmup Iteration  14: 316830364.196 ops/s
# Warmup Iteration  15: 318522811.097 ops/s
# Warmup Iteration  16: 313097609.940 ops/s
# Warmup Iteration  17: 316593338.002 ops/s
# Warmup Iteration  18: 316778315.427 ops/s
# Warmup Iteration  19: 316063916.203 ops/s
# Warmup Iteration  20: 314451473.229 ops/s
# Warmup Iteration  21: 315815456.497 ops/s
# Warmup Iteration  22: 316787704.725 ops/s
# Warmup Iteration  23: 313998582.874 ops/s
# Warmup Iteration  24: 317071701.159 ops/s
# Warmup Iteration  25: 315551949.336 ops/s
# Warmup Iteration  26: 317187095.228 ops/s
# Warmup Iteration  27: 314973008.818 ops/s
# Warmup Iteration  28: 313072193.287 ops/s
# Warmup Iteration  29: 317170642.114 ops/s
# Warmup Iteration  30: 317187277.808 ops/s
Iteration   1: 315821173.776 ops/s
Iteration   2: 316071957.722 ops/s
Iteration   3: 317582878.399 ops/s
Iteration   4: 318351002.451 ops/s
Iteration   5: 317077083.082 ops/s
Iteration   6: 315280708.197 ops/s
Iteration   7: 317379801.258 ops/s
Iteration   8: 317674025.363 ops/s
Iteration   9: 315523956.017 ops/s
Iteration  10: 317236872.744 ops/s
Iteration  11: 316312750.974 ops/s
Iteration  12: 318017018.939 ops/s
Iteration  13: 317526072.491 ops/s
Iteration  14: 317284431.868 ops/s
Iteration  15: 318479642.981 ops/s
Iteration  16: 318784189.979 ops/s
Iteration  17: 317909573.040 ops/s
Iteration  18: 315904241.787 ops/s
Iteration  19: 314595495.649 ops/s
Iteration  20: 317976138.089 ops/s
Iteration  21: 316993584.020 ops/s
Iteration  22: 316853148.802 ops/s
Iteration  23: 314916847.629 ops/s
Iteration  24: 315847725.500 ops/s
Iteration  25: 316400373.884 ops/s
Iteration  26: 317035051.510 ops/s
Iteration  27: 314460899.148 ops/s
Iteration  28: 314500738.371 ops/s
Iteration  29: 313990515.153 ops/s
Iteration  30: 316926779.691 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_testHashCode":
  316623822.617 ±(99.9%) 875260.953 ops/s [Average]
  (min, avg, max) = (313990515.153, 316623822.617, 318784189.979), stdev = 1310049.490
  CI (99.9%): [315748561.664, 317499083.571] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt          Score        Error  Units
UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_testHashCode  thrpt   30  316623822.617 ± 875260.953  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 172705006.105 ops/s
# Warmup Iteration   2: 298349362.063 ops/s
# Warmup Iteration   3: 245662038.808 ops/s
# Warmup Iteration   4: 271157429.764 ops/s
# Warmup Iteration   5: 270570324.738 ops/s
# Warmup Iteration   6: 271156491.275 ops/s
# Warmup Iteration   7: 268945173.668 ops/s
# Warmup Iteration   8: 270585468.831 ops/s
# Warmup Iteration   9: 268582681.449 ops/s
# Warmup Iteration  10: 268999755.839 ops/s
# Warmup Iteration  11: 270775044.624 ops/s
# Warmup Iteration  12: 271106820.031 ops/s
# Warmup Iteration  13: 271301361.881 ops/s
# Warmup Iteration  14: 271003039.354 ops/s
# Warmup Iteration  15: 270085695.916 ops/s
# Warmup Iteration  16: 270420108.127 ops/s
# Warmup Iteration  17: 270667539.993 ops/s
# Warmup Iteration  18: 269646051.649 ops/s
# Warmup Iteration  19: 270468708.214 ops/s
# Warmup Iteration  20: 270825996.560 ops/s
# Warmup Iteration  21: 270914561.122 ops/s
# Warmup Iteration  22: 271184472.663 ops/s
# Warmup Iteration  23: 270335801.366 ops/s
# Warmup Iteration  24: 270911859.957 ops/s
# Warmup Iteration  25: 269840975.746 ops/s
# Warmup Iteration  26: 271457570.490 ops/s
# Warmup Iteration  27: 271076747.128 ops/s
# Warmup Iteration  28: 271400476.222 ops/s
# Warmup Iteration  29: 264299802.061 ops/s
# Warmup Iteration  30: 270709718.619 ops/s
Iteration   1: 271781564.094 ops/s
Iteration   2: 271069934.054 ops/s
Iteration   3: 271148199.958 ops/s
Iteration   4: 269456163.349 ops/s
Iteration   5: 271396109.347 ops/s
Iteration   6: 270766631.633 ops/s
Iteration   7: 270524270.278 ops/s
Iteration   8: 270707484.676 ops/s
Iteration   9: 271185278.517 ops/s
Iteration  10: 270632726.978 ops/s
Iteration  11: 270530202.071 ops/s
Iteration  12: 271147773.954 ops/s
Iteration  13: 271084904.837 ops/s
Iteration  14: 270920693.458 ops/s
Iteration  15: 271048239.709 ops/s
Iteration  16: 271034816.168 ops/s
Iteration  17: 271000652.182 ops/s
Iteration  18: 271200328.059 ops/s
Iteration  19: 269676372.396 ops/s
Iteration  20: 270554572.697 ops/s
Iteration  21: 269000495.268 ops/s
Iteration  22: 271443167.136 ops/s
Iteration  23: 270623561.737 ops/s
Iteration  24: 271374635.563 ops/s
Iteration  25: 270410144.845 ops/s
Iteration  26: 271104249.633 ops/s
Iteration  27: 271136202.123 ops/s
Iteration  28: 271064120.055 ops/s
Iteration  29: 270919676.763 ops/s
Iteration  30: 270399269.311 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_testToString":
  270811414.695 ±(99.9%) 394716.039 ops/s [Average]
  (min, avg, max) = (269000495.268, 270811414.695, 271781564.094), stdev = 590792.429
  CI (99.9%): [270416698.656, 271206130.734] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt          Score        Error  Units
UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_testToString  thrpt   30  270811414.695 ± 394716.039  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2440166.690 ops/s
# Warmup Iteration   2: 5534286.397 ops/s
# Warmup Iteration   3: 4613793.554 ops/s
# Warmup Iteration   4: 5596802.283 ops/s
# Warmup Iteration   5: 5554727.241 ops/s
# Warmup Iteration   6: 5593567.994 ops/s
# Warmup Iteration   7: 5592323.336 ops/s
# Warmup Iteration   8: 5599598.146 ops/s
# Warmup Iteration   9: 5604061.431 ops/s
# Warmup Iteration  10: 5588788.267 ops/s
# Warmup Iteration  11: 5596972.183 ops/s
# Warmup Iteration  12: 5591264.670 ops/s
# Warmup Iteration  13: 5595345.580 ops/s
# Warmup Iteration  14: 5578938.379 ops/s
# Warmup Iteration  15: 5585970.921 ops/s
# Warmup Iteration  16: 5596447.063 ops/s
# Warmup Iteration  17: 5589844.843 ops/s
# Warmup Iteration  18: 5603439.525 ops/s
# Warmup Iteration  19: 5573505.413 ops/s
# Warmup Iteration  20: 5591452.813 ops/s
# Warmup Iteration  21: 5617401.836 ops/s
# Warmup Iteration  22: 5556535.042 ops/s
# Warmup Iteration  23: 5585237.308 ops/s
# Warmup Iteration  24: 5599213.639 ops/s
# Warmup Iteration  25: 5598517.577 ops/s
# Warmup Iteration  26: 5592007.403 ops/s
# Warmup Iteration  27: 5601024.592 ops/s
# Warmup Iteration  28: 5590155.720 ops/s
# Warmup Iteration  29: 5605792.123 ops/s
# Warmup Iteration  30: 5608907.157 ops/s
Iteration   1: 5596894.170 ops/s
Iteration   2: 5583417.662 ops/s
Iteration   3: 5596773.747 ops/s
Iteration   4: 5590455.549 ops/s
Iteration   5: 5609111.357 ops/s
Iteration   6: 5590854.993 ops/s
Iteration   7: 5593189.144 ops/s
Iteration   8: 5615703.945 ops/s
Iteration   9: 5519325.562 ops/s
Iteration  10: 5610733.306 ops/s
Iteration  11: 5595342.185 ops/s
Iteration  12: 5599885.396 ops/s
Iteration  13: 5608630.352 ops/s
Iteration  14: 5604512.187 ops/s
Iteration  15: 5607980.279 ops/s
Iteration  16: 5606261.671 ops/s
Iteration  17: 5593859.400 ops/s
Iteration  18: 5595601.211 ops/s
Iteration  19: 5591585.615 ops/s
Iteration  20: 5518304.992 ops/s
Iteration  21: 5597283.346 ops/s
Iteration  22: 5582112.244 ops/s
Iteration  23: 5595744.169 ops/s
Iteration  24: 5571587.147 ops/s
Iteration  25: 5613680.125 ops/s
Iteration  26: 5589928.122 ops/s
Iteration  27: 5607499.898 ops/s
Iteration  28: 5605509.282 ops/s
Iteration  29: 5592628.434 ops/s
Iteration  30: 5611956.127 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_toArray":
  5593211.721 ±(99.9%) 15110.301 ops/s [Average]
  (min, avg, max) = (5518304.992, 5593211.721, 5615703.945), stdev = 22616.390
  CI (99.9%): [5578101.419, 5608322.022] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_toArray  thrpt   30  5593211.721 ± 15110.301  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_toBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_toBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1087827.459 ops/s
# Warmup Iteration   2: 2810999.477 ops/s
# Warmup Iteration   3: 2792414.075 ops/s
# Warmup Iteration   4: 2332375.329 ops/s
# Warmup Iteration   5: 2795157.751 ops/s
# Warmup Iteration   6: 2790317.729 ops/s
# Warmup Iteration   7: 2793816.314 ops/s
# Warmup Iteration   8: 2796860.926 ops/s
# Warmup Iteration   9: 2794708.339 ops/s
# Warmup Iteration  10: 2786815.671 ops/s
# Warmup Iteration  11: 2793932.481 ops/s
# Warmup Iteration  12: 2793404.574 ops/s
# Warmup Iteration  13: 2795212.347 ops/s
# Warmup Iteration  14: 2785702.471 ops/s
# Warmup Iteration  15: 2795915.295 ops/s
# Warmup Iteration  16: 2795502.667 ops/s
# Warmup Iteration  17: 2798637.326 ops/s
# Warmup Iteration  18: 2792434.145 ops/s
# Warmup Iteration  19: 2791263.420 ops/s
# Warmup Iteration  20: 2794210.631 ops/s
# Warmup Iteration  21: 2788941.047 ops/s
# Warmup Iteration  22: 2792692.380 ops/s
# Warmup Iteration  23: 2785534.195 ops/s
# Warmup Iteration  24: 2793260.558 ops/s
# Warmup Iteration  25: 2791176.681 ops/s
# Warmup Iteration  26: 2792873.883 ops/s
# Warmup Iteration  27: 2789199.779 ops/s
# Warmup Iteration  28: 2772079.022 ops/s
# Warmup Iteration  29: 2789050.107 ops/s
# Warmup Iteration  30: 2788914.967 ops/s
Iteration   1: 2794318.337 ops/s
Iteration   2: 2790523.741 ops/s
Iteration   3: 2793213.369 ops/s
Iteration   4: 2799378.622 ops/s
Iteration   5: 2792029.517 ops/s
Iteration   6: 2793690.508 ops/s
Iteration   7: 2772318.004 ops/s
Iteration   8: 2795761.468 ops/s
Iteration   9: 2796184.651 ops/s
Iteration  10: 2792195.008 ops/s
Iteration  11: 2797236.241 ops/s
Iteration  12: 2790613.477 ops/s
Iteration  13: 2801519.209 ops/s
Iteration  14: 2790486.193 ops/s
Iteration  15: 2790135.272 ops/s
Iteration  16: 2786703.394 ops/s
Iteration  17: 2786532.447 ops/s
Iteration  18: 2800818.989 ops/s
Iteration  19: 2793669.457 ops/s
Iteration  20: 2788746.221 ops/s
Iteration  21: 2792699.824 ops/s
Iteration  22: 2795060.202 ops/s
Iteration  23: 2795380.219 ops/s
Iteration  24: 2795161.908 ops/s
Iteration  25: 2795813.805 ops/s
Iteration  26: 2793819.153 ops/s
Iteration  27: 2792506.867 ops/s
Iteration  28: 2792176.718 ops/s
Iteration  29: 2793382.872 ops/s
Iteration  30: 2790342.284 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_toBag":
  2792747.266 ±(99.9%) 3503.742 ops/s [Average]
  (min, avg, max) = (2772318.004, 2792747.266, 2801519.209), stdev = 5244.237
  CI (99.9%): [2789243.524, 2796251.008] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_toBag  thrpt   30  2792747.266 ± 3503.742  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1470037.572 ops/s
# Warmup Iteration   2: 3438095.996 ops/s
# Warmup Iteration   3: 2771723.098 ops/s
# Warmup Iteration   4: 3349784.663 ops/s
# Warmup Iteration   5: 3351043.227 ops/s
# Warmup Iteration   6: 3354140.047 ops/s
# Warmup Iteration   7: 3355917.738 ops/s
# Warmup Iteration   8: 3350596.968 ops/s
# Warmup Iteration   9: 3354645.252 ops/s
# Warmup Iteration  10: 3348097.555 ops/s
# Warmup Iteration  11: 3345437.030 ops/s
# Warmup Iteration  12: 3353819.303 ops/s
# Warmup Iteration  13: 3344080.860 ops/s
# Warmup Iteration  14: 3341763.159 ops/s
# Warmup Iteration  15: 3352440.331 ops/s
# Warmup Iteration  16: 3342954.064 ops/s
# Warmup Iteration  17: 3352413.913 ops/s
# Warmup Iteration  18: 3351254.477 ops/s
# Warmup Iteration  19: 3353365.970 ops/s
# Warmup Iteration  20: 3346321.543 ops/s
# Warmup Iteration  21: 3351740.892 ops/s
# Warmup Iteration  22: 3345596.873 ops/s
# Warmup Iteration  23: 3355866.119 ops/s
# Warmup Iteration  24: 3347276.122 ops/s
# Warmup Iteration  25: 3328368.767 ops/s
# Warmup Iteration  26: 3353907.077 ops/s
# Warmup Iteration  27: 3353097.563 ops/s
# Warmup Iteration  28: 3344147.895 ops/s
# Warmup Iteration  29: 3353134.617 ops/s
# Warmup Iteration  30: 3351201.244 ops/s
Iteration   1: 3344114.342 ops/s
Iteration   2: 3346575.853 ops/s
Iteration   3: 3321115.025 ops/s
Iteration   4: 3349385.854 ops/s
Iteration   5: 3350594.121 ops/s
Iteration   6: 3345389.869 ops/s
Iteration   7: 3331255.251 ops/s
Iteration   8: 3346818.205 ops/s
Iteration   9: 3342914.966 ops/s
Iteration  10: 3348146.983 ops/s
Iteration  11: 3349450.974 ops/s
Iteration  12: 3347821.632 ops/s
Iteration  13: 3361820.717 ops/s
Iteration  14: 3360128.863 ops/s
Iteration  15: 3348438.521 ops/s
Iteration  16: 3356613.577 ops/s
Iteration  17: 3351794.567 ops/s
Iteration  18: 3346210.043 ops/s
Iteration  19: 3354941.142 ops/s
Iteration  20: 3361360.895 ops/s
Iteration  21: 3347064.199 ops/s
Iteration  22: 3347930.939 ops/s
Iteration  23: 3345028.543 ops/s
Iteration  24: 3292882.398 ops/s
Iteration  25: 3297974.496 ops/s
Iteration  26: 3349988.194 ops/s
Iteration  27: 3332250.554 ops/s
Iteration  28: 3349811.574 ops/s
Iteration  29: 3347052.598 ops/s
Iteration  30: 3348902.063 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_toList":
  3344125.899 ±(99.9%) 10438.422 ops/s [Average]
  (min, avg, max) = (3292882.398, 3344125.899, 3361820.717), stdev = 15623.740
  CI (99.9%): [3333687.476, 3354564.321] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_toList  thrpt   30  3344125.899 ± 10438.422  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_toSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_toSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1234152.694 ops/s
# Warmup Iteration   2: 5095330.459 ops/s
# Warmup Iteration   3: 5729394.308 ops/s
# Warmup Iteration   4: 4694591.141 ops/s
# Warmup Iteration   5: 5724271.791 ops/s
# Warmup Iteration   6: 5717513.671 ops/s
# Warmup Iteration   7: 5723544.860 ops/s
# Warmup Iteration   8: 5731900.194 ops/s
# Warmup Iteration   9: 5708673.095 ops/s
# Warmup Iteration  10: 5716777.997 ops/s
# Warmup Iteration  11: 5712360.743 ops/s
# Warmup Iteration  12: 5706149.736 ops/s
# Warmup Iteration  13: 5720419.726 ops/s
# Warmup Iteration  14: 5728745.510 ops/s
# Warmup Iteration  15: 5711739.663 ops/s
# Warmup Iteration  16: 5714053.233 ops/s
# Warmup Iteration  17: 5662478.922 ops/s
# Warmup Iteration  18: 5708648.056 ops/s
# Warmup Iteration  19: 5722053.979 ops/s
# Warmup Iteration  20: 5705411.649 ops/s
# Warmup Iteration  21: 5715244.492 ops/s
# Warmup Iteration  22: 5713897.130 ops/s
# Warmup Iteration  23: 5727814.920 ops/s
# Warmup Iteration  24: 5734427.021 ops/s
# Warmup Iteration  25: 5720628.572 ops/s
# Warmup Iteration  26: 5716005.600 ops/s
# Warmup Iteration  27: 5718777.557 ops/s
# Warmup Iteration  28: 5722602.608 ops/s
# Warmup Iteration  29: 5726760.820 ops/s
# Warmup Iteration  30: 5714024.332 ops/s
Iteration   1: 5721562.866 ops/s
Iteration   2: 5716820.837 ops/s
Iteration   3: 5707863.921 ops/s
Iteration   4: 5741863.390 ops/s
Iteration   5: 5740014.265 ops/s
Iteration   6: 5662758.104 ops/s
Iteration   7: 5718443.167 ops/s
Iteration   8: 5726145.283 ops/s
Iteration   9: 5743872.508 ops/s
Iteration  10: 5712541.240 ops/s
Iteration  11: 5729676.858 ops/s
Iteration  12: 5631785.609 ops/s
Iteration  13: 5743004.158 ops/s
Iteration  14: 5733956.072 ops/s
Iteration  15: 5737133.864 ops/s
Iteration  16: 5737747.423 ops/s
Iteration  17: 5690757.549 ops/s
Iteration  18: 5724292.647 ops/s
Iteration  19: 5722906.010 ops/s
Iteration  20: 5719916.622 ops/s
Iteration  21: 5737577.130 ops/s
Iteration  22: 5730499.145 ops/s
Iteration  23: 5696021.830 ops/s
Iteration  24: 5750254.380 ops/s
Iteration  25: 5730296.138 ops/s
Iteration  26: 5735743.092 ops/s
Iteration  27: 5758657.347 ops/s
Iteration  28: 5708771.814 ops/s
Iteration  29: 5720037.318 ops/s
Iteration  30: 5705798.747 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_toSet":
  5721223.978 ±(99.9%) 17151.216 ops/s [Average]
  (min, avg, max) = (5631785.609, 5721223.978, 5758657.347), stdev = 25671.135
  CI (99.9%): [5704072.762, 5738375.194] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_toSet  thrpt   30  5721223.978 ± 17151.216  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_with$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_with

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 715313.940 ops/s
# Warmup Iteration   2: 798863.286 ops/s
# Warmup Iteration   3: 1025250.224 ops/s
# Warmup Iteration   4: 1027526.521 ops/s
# Warmup Iteration   5: 1019497.036 ops/s
# Warmup Iteration   6: 1029061.415 ops/s
# Warmup Iteration   7: 1031129.708 ops/s
# Warmup Iteration   8: 1020908.390 ops/s
# Warmup Iteration   9: 1031543.877 ops/s
# Warmup Iteration  10: 857903.860 ops/s
# Warmup Iteration  11: 1029114.448 ops/s
# Warmup Iteration  12: 1030601.845 ops/s
# Warmup Iteration  13: 1029374.968 ops/s
# Warmup Iteration  14: 1028600.889 ops/s
# Warmup Iteration  15: 1030340.448 ops/s
# Warmup Iteration  16: 1030142.350 ops/s
# Warmup Iteration  17: 1097818.521 ops/s
# Warmup Iteration  18: 1099488.437 ops/s
# Warmup Iteration  19: 1102259.610 ops/s
# Warmup Iteration  20: 1097293.435 ops/s
# Warmup Iteration  21: 1098208.708 ops/s
# Warmup Iteration  22: 1094645.099 ops/s
# Warmup Iteration  23: 1095152.511 ops/s
# Warmup Iteration  24: 1094986.173 ops/s
# Warmup Iteration  25: 1092595.356 ops/s
# Warmup Iteration  26: 1097201.917 ops/s
# Warmup Iteration  27: 1096076.139 ops/s
# Warmup Iteration  28: 1092060.644 ops/s
# Warmup Iteration  29: 1092436.090 ops/s
# Warmup Iteration  30: 1090455.708 ops/s
Iteration   1: 1096938.984 ops/s
Iteration   2: 1097414.117 ops/s
Iteration   3: 1094131.242 ops/s
Iteration   4: 1096556.398 ops/s
Iteration   5: 1094259.105 ops/s
Iteration   6: 1095927.554 ops/s
Iteration   7: 1097615.162 ops/s
Iteration   8: 1094920.897 ops/s
Iteration   9: 1099001.659 ops/s
Iteration  10: 1092169.325 ops/s
Iteration  11: 1090699.417 ops/s
Iteration  12: 1103379.508 ops/s
Iteration  13: 1098644.686 ops/s
Iteration  14: 1076124.485 ops/s
Iteration  15: 1092570.525 ops/s
Iteration  16: 1098090.988 ops/s
Iteration  17: 1095599.533 ops/s
Iteration  18: 1098821.325 ops/s
Iteration  19: 1096637.482 ops/s
Iteration  20: 1093133.709 ops/s
Iteration  21: 1096078.660 ops/s
Iteration  22: 1097331.456 ops/s
Iteration  23: 1081377.118 ops/s
Iteration  24: 1098009.546 ops/s
Iteration  25: 1092108.905 ops/s
Iteration  26: 1089856.678 ops/s
Iteration  27: 1091099.932 ops/s
Iteration  28: 1091145.667 ops/s
Iteration  29: 1090496.614 ops/s
Iteration  30: 1091422.522 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_with":
  1094052.107 ±(99.9%) 3535.648 ops/s [Average]
  (min, avg, max) = (1076124.485, 1094052.107, 1103379.508), stdev = 5291.992
  CI (99.9%): [1090516.459, 1097587.754] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_with  thrpt   30  1094052.107 ± 3535.648  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_withAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_withAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 715340.588 ops/s
# Warmup Iteration   2: 800778.118 ops/s
# Warmup Iteration   3: 1021719.040 ops/s
# Warmup Iteration   4: 1022900.980 ops/s
# Warmup Iteration   5: 1023991.043 ops/s
# Warmup Iteration   6: 1014802.966 ops/s
# Warmup Iteration   7: 1023019.511 ops/s
# Warmup Iteration   8: 1023171.683 ops/s
# Warmup Iteration   9: 1022111.420 ops/s
# Warmup Iteration  10: 857190.839 ops/s
# Warmup Iteration  11: 1027965.293 ops/s
# Warmup Iteration  12: 1025489.558 ops/s
# Warmup Iteration  13: 1027369.340 ops/s
# Warmup Iteration  14: 1023666.227 ops/s
# Warmup Iteration  15: 1025599.511 ops/s
# Warmup Iteration  16: 1015389.190 ops/s
# Warmup Iteration  17: 1086850.452 ops/s
# Warmup Iteration  18: 1087520.548 ops/s
# Warmup Iteration  19: 1088378.576 ops/s
# Warmup Iteration  20: 1090351.825 ops/s
# Warmup Iteration  21: 1090937.187 ops/s
# Warmup Iteration  22: 1087588.629 ops/s
# Warmup Iteration  23: 1086257.006 ops/s
# Warmup Iteration  24: 1087189.664 ops/s
# Warmup Iteration  25: 1084371.297 ops/s
# Warmup Iteration  26: 1086140.825 ops/s
# Warmup Iteration  27: 1087323.380 ops/s
# Warmup Iteration  28: 1083320.088 ops/s
# Warmup Iteration  29: 1076895.463 ops/s
# Warmup Iteration  30: 1084736.883 ops/s
Iteration   1: 1085400.049 ops/s
Iteration   2: 1086063.592 ops/s
Iteration   3: 1081872.671 ops/s
Iteration   4: 1085503.863 ops/s
Iteration   5: 1085268.854 ops/s
Iteration   6: 1087367.204 ops/s
Iteration   7: 1092335.481 ops/s
Iteration   8: 1087949.941 ops/s
Iteration   9: 1084075.994 ops/s
Iteration  10: 1087680.077 ops/s
Iteration  11: 1085119.909 ops/s
Iteration  12: 1080917.100 ops/s
Iteration  13: 1086767.940 ops/s
Iteration  14: 1082788.919 ops/s
Iteration  15: 1085384.082 ops/s
Iteration  16: 1086586.497 ops/s
Iteration  17: 1084989.652 ops/s
Iteration  18: 1092122.576 ops/s
Iteration  19: 1091799.087 ops/s
Iteration  20: 1086719.535 ops/s
Iteration  21: 1090009.889 ops/s
Iteration  22: 1085206.585 ops/s
Iteration  23: 1084445.484 ops/s
Iteration  24: 1078345.970 ops/s
Iteration  25: 1090035.975 ops/s
Iteration  26: 1087962.291 ops/s
Iteration  27: 1088463.032 ops/s
Iteration  28: 1090062.573 ops/s
Iteration  29: 1088257.092 ops/s
Iteration  30: 1089792.669 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_withAll":
  1086643.153 ±(99.9%) 2180.490 ops/s [Average]
  (min, avg, max) = (1078345.970, 1086643.153, 1092335.481), stdev = 3263.655
  CI (99.9%): [1084462.663, 1088823.643] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_withAll  thrpt   30  1086643.153 ± 2180.490  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_without$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_without

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 715356.718 ops/s
# Warmup Iteration   2: 797622.627 ops/s
# Warmup Iteration   3: 1014624.307 ops/s
# Warmup Iteration   4: 1023602.987 ops/s
# Warmup Iteration   5: 1018903.990 ops/s
# Warmup Iteration   6: 1013903.353 ops/s
# Warmup Iteration   7: 1018336.546 ops/s
# Warmup Iteration   8: 1019641.073 ops/s
# Warmup Iteration   9: 1021799.552 ops/s
# Warmup Iteration  10: 856051.441 ops/s
# Warmup Iteration  11: 1021709.667 ops/s
# Warmup Iteration  12: 1020143.924 ops/s
# Warmup Iteration  13: 1020731.054 ops/s
# Warmup Iteration  14: 1019671.822 ops/s
# Warmup Iteration  15: 1022347.416 ops/s
# Warmup Iteration  16: 1023114.332 ops/s
# Warmup Iteration  17: 1079848.350 ops/s
# Warmup Iteration  18: 1082831.794 ops/s
# Warmup Iteration  19: 1082025.645 ops/s
# Warmup Iteration  20: 1080201.300 ops/s
# Warmup Iteration  21: 1082543.107 ops/s
# Warmup Iteration  22: 1074961.942 ops/s
# Warmup Iteration  23: 1085342.259 ops/s
# Warmup Iteration  24: 1082817.678 ops/s
# Warmup Iteration  25: 1081674.469 ops/s
# Warmup Iteration  26: 1080646.248 ops/s
# Warmup Iteration  27: 1082700.915 ops/s
# Warmup Iteration  28: 1081272.995 ops/s
# Warmup Iteration  29: 1082092.551 ops/s
# Warmup Iteration  30: 1083065.380 ops/s
Iteration   1: 1083989.885 ops/s
Iteration   2: 1081294.083 ops/s
Iteration   3: 1080854.501 ops/s
Iteration   4: 1083871.211 ops/s
Iteration   5: 1078396.565 ops/s
Iteration   6: 1082652.657 ops/s
Iteration   7: 1083758.687 ops/s
Iteration   8: 1083124.435 ops/s
Iteration   9: 1081854.496 ops/s
Iteration  10: 1085434.127 ops/s
Iteration  11: 1079354.422 ops/s
Iteration  12: 1080938.066 ops/s
Iteration  13: 1080468.718 ops/s
Iteration  14: 1076462.533 ops/s
Iteration  15: 1081260.020 ops/s
Iteration  16: 1083009.796 ops/s
Iteration  17: 1083087.077 ops/s
Iteration  18: 1083972.876 ops/s
Iteration  19: 1082997.642 ops/s
Iteration  20: 1084708.588 ops/s
Iteration  21: 1081647.748 ops/s
Iteration  22: 1083191.333 ops/s
Iteration  23: 1076401.176 ops/s
Iteration  24: 1079015.355 ops/s
Iteration  25: 1078852.342 ops/s
Iteration  26: 1082329.826 ops/s
Iteration  27: 1080212.867 ops/s
Iteration  28: 1080572.283 ops/s
Iteration  29: 1084616.922 ops/s
Iteration  30: 1077879.141 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_without":
  1081540.313 ±(99.9%) 1615.233 ops/s [Average]
  (min, avg, max) = (1076401.176, 1081540.313, 1085434.127), stdev = 2417.605
  CI (99.9%): [1079925.080, 1083155.545] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_without  thrpt   30  1081540.313 ± 1615.233  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_withoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_withoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 706318.318 ops/s
# Warmup Iteration   2: 800803.684 ops/s
# Warmup Iteration   3: 1019576.771 ops/s
# Warmup Iteration   4: 1029148.809 ops/s
# Warmup Iteration   5: 1030743.236 ops/s
# Warmup Iteration   6: 1030108.688 ops/s
# Warmup Iteration   7: 1027465.190 ops/s
# Warmup Iteration   8: 1026295.892 ops/s
# Warmup Iteration   9: 1032075.910 ops/s
# Warmup Iteration  10: 860884.932 ops/s
# Warmup Iteration  11: 1028689.269 ops/s
# Warmup Iteration  12: 1026486.687 ops/s
# Warmup Iteration  13: 1030605.515 ops/s
# Warmup Iteration  14: 1027503.321 ops/s
# Warmup Iteration  15: 1028082.298 ops/s
# Warmup Iteration  16: 1026355.464 ops/s
# Warmup Iteration  17: 1094446.193 ops/s
# Warmup Iteration  18: 1090334.128 ops/s
# Warmup Iteration  19: 1097137.926 ops/s
# Warmup Iteration  20: 1096483.888 ops/s
# Warmup Iteration  21: 1090746.735 ops/s
# Warmup Iteration  22: 1092291.021 ops/s
# Warmup Iteration  23: 1092214.183 ops/s
# Warmup Iteration  24: 1091334.505 ops/s
# Warmup Iteration  25: 1096448.797 ops/s
# Warmup Iteration  26: 1089778.211 ops/s
# Warmup Iteration  27: 1089738.673 ops/s
# Warmup Iteration  28: 1093393.225 ops/s
# Warmup Iteration  29: 1088598.934 ops/s
# Warmup Iteration  30: 1093200.451 ops/s
Iteration   1: 1081562.549 ops/s
Iteration   2: 1076918.087 ops/s
Iteration   3: 1092384.522 ops/s
Iteration   4: 1093409.977 ops/s
Iteration   5: 1091216.332 ops/s
Iteration   6: 1097875.993 ops/s
Iteration   7: 1093616.881 ops/s
Iteration   8: 1096761.206 ops/s
Iteration   9: 1092637.818 ops/s
Iteration  10: 1092060.300 ops/s
Iteration  11: 1093948.862 ops/s
Iteration  12: 1092519.036 ops/s
Iteration  13: 1092384.005 ops/s
Iteration  14: 1096766.978 ops/s
Iteration  15: 1097130.801 ops/s
Iteration  16: 1092246.740 ops/s
Iteration  17: 1094565.492 ops/s
Iteration  18: 1091538.398 ops/s
Iteration  19: 1053604.892 ops/s
Iteration  20: 1094145.450 ops/s
Iteration  21: 1096458.125 ops/s
Iteration  22: 1090637.735 ops/s
Iteration  23: 1095301.793 ops/s
Iteration  24: 1096686.030 ops/s
Iteration  25: 1091409.888 ops/s
Iteration  26: 1079845.304 ops/s
Iteration  27: 1096035.782 ops/s
Iteration  28: 1089590.133 ops/s
Iteration  29: 1095051.972 ops/s
Iteration  30: 1092929.923 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_withoutAll":
  1091041.367 ±(99.9%) 5746.874 ops/s [Average]
  (min, avg, max) = (1053604.892, 1091041.367, 1097875.993), stdev = 8601.652
  CI (99.9%): [1085294.492, 1096788.241] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
UnmodifiableByteBooleanMapValuesTest._Benchmark.benchmark_withoutAll  thrpt   30  1091041.367 ± 5746.874  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 714434.410 ops/s
# Warmup Iteration   2: 800130.032 ops/s
# Warmup Iteration   3: 1015388.590 ops/s
# Warmup Iteration   4: 1029689.160 ops/s
# Warmup Iteration   5: 1024001.848 ops/s
# Warmup Iteration   6: 1028140.491 ops/s
# Warmup Iteration   7: 1018039.944 ops/s
# Warmup Iteration   8: 1030282.078 ops/s
# Warmup Iteration   9: 1025093.994 ops/s
# Warmup Iteration  10: 857178.526 ops/s
# Warmup Iteration  11: 1028626.014 ops/s
# Warmup Iteration  12: 1028687.569 ops/s
# Warmup Iteration  13: 1029379.984 ops/s
# Warmup Iteration  14: 1028987.535 ops/s
# Warmup Iteration  15: 1029136.034 ops/s
# Warmup Iteration  16: 1031481.706 ops/s
# Warmup Iteration  17: 1093456.203 ops/s
# Warmup Iteration  18: 1086239.844 ops/s
# Warmup Iteration  19: 1093594.600 ops/s
# Warmup Iteration  20: 1082693.799 ops/s
# Warmup Iteration  21: 1094322.452 ops/s
# Warmup Iteration  22: 1093679.435 ops/s
# Warmup Iteration  23: 1092392.764 ops/s
# Warmup Iteration  24: 1092122.108 ops/s
# Warmup Iteration  25: 1094086.926 ops/s
# Warmup Iteration  26: 1092243.770 ops/s
# Warmup Iteration  27: 1090596.129 ops/s
# Warmup Iteration  28: 1079934.632 ops/s
# Warmup Iteration  29: 1084961.730 ops/s
# Warmup Iteration  30: 1092115.280 ops/s
Iteration   1: 1094903.872 ops/s
Iteration   2: 1090517.244 ops/s
Iteration   3: 1092294.640 ops/s
Iteration   4: 1088788.983 ops/s
Iteration   5: 1092584.471 ops/s
Iteration   6: 1092576.914 ops/s
Iteration   7: 1088584.894 ops/s
Iteration   8: 1096456.385 ops/s
Iteration   9: 1094079.649 ops/s
Iteration  10: 1088579.455 ops/s
Iteration  11: 1094893.254 ops/s
Iteration  12: 1092422.987 ops/s
Iteration  13: 1091910.023 ops/s
Iteration  14: 1090507.628 ops/s
Iteration  15: 1089580.947 ops/s
Iteration  16: 1092104.680 ops/s
Iteration  17: 1088738.055 ops/s
Iteration  18: 1094774.754 ops/s
Iteration  19: 1090952.425 ops/s
Iteration  20: 1074902.563 ops/s
Iteration  21: 1088266.559 ops/s
Iteration  22: 1089123.938 ops/s
Iteration  23: 1087528.977 ops/s
Iteration  24: 1087496.885 ops/s
Iteration  25: 1090117.370 ops/s
Iteration  26: 1088933.460 ops/s
Iteration  27: 1092040.084 ops/s
Iteration  28: 1095904.559 ops/s
Iteration  29: 1084911.413 ops/s
Iteration  30: 1089306.848 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_add":
  1090459.464 ±(99.9%) 2702.904 ops/s [Average]
  (min, avg, max) = (1074902.563, 1090459.464, 1096456.385), stdev = 4045.579
  CI (99.9%): [1087756.560, 1093162.368] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_add  thrpt   30  1090459.464 ± 2702.904  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_addAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_addAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 710151.918 ops/s
# Warmup Iteration   2: 797109.793 ops/s
# Warmup Iteration   3: 1020204.176 ops/s
# Warmup Iteration   4: 1025910.599 ops/s
# Warmup Iteration   5: 1023622.293 ops/s
# Warmup Iteration   6: 1023909.218 ops/s
# Warmup Iteration   7: 1022555.069 ops/s
# Warmup Iteration   8: 1026042.564 ops/s
# Warmup Iteration   9: 1027202.617 ops/s
# Warmup Iteration  10: 850440.327 ops/s
# Warmup Iteration  11: 1023561.127 ops/s
# Warmup Iteration  12: 1022326.659 ops/s
# Warmup Iteration  13: 1021878.622 ops/s
# Warmup Iteration  14: 1025618.788 ops/s
# Warmup Iteration  15: 1014898.938 ops/s
# Warmup Iteration  16: 1023094.946 ops/s
# Warmup Iteration  17: 1090681.914 ops/s
# Warmup Iteration  18: 1090356.095 ops/s
# Warmup Iteration  19: 1091855.575 ops/s
# Warmup Iteration  20: 1089334.669 ops/s
# Warmup Iteration  21: 1086971.548 ops/s
# Warmup Iteration  22: 1089687.112 ops/s
# Warmup Iteration  23: 1090341.665 ops/s
# Warmup Iteration  24: 1089139.653 ops/s
# Warmup Iteration  25: 1089707.883 ops/s
# Warmup Iteration  26: 1088850.330 ops/s
# Warmup Iteration  27: 1089235.471 ops/s
# Warmup Iteration  28: 1089216.770 ops/s
# Warmup Iteration  29: 1090386.595 ops/s
# Warmup Iteration  30: 1093281.652 ops/s
Iteration   1: 1091404.587 ops/s
Iteration   2: 1092114.752 ops/s
Iteration   3: 1091753.690 ops/s
Iteration   4: 1087688.682 ops/s
Iteration   5: 1086551.298 ops/s
Iteration   6: 1091832.223 ops/s
Iteration   7: 1085215.870 ops/s
Iteration   8: 1092463.891 ops/s
Iteration   9: 1068414.370 ops/s
Iteration  10: 1088551.572 ops/s
Iteration  11: 1092502.766 ops/s
Iteration  12: 1091845.143 ops/s
Iteration  13: 1088935.374 ops/s
Iteration  14: 1089084.846 ops/s
Iteration  15: 1092875.360 ops/s
Iteration  16: 1089293.024 ops/s
Iteration  17: 1091272.044 ops/s
Iteration  18: 1089108.254 ops/s
Iteration  19: 1082533.532 ops/s
Iteration  20: 1086794.505 ops/s
Iteration  21: 1089092.874 ops/s
Iteration  22: 1085384.979 ops/s
Iteration  23: 1093769.166 ops/s
Iteration  24: 1090684.112 ops/s
Iteration  25: 1089096.769 ops/s
Iteration  26: 1088721.959 ops/s
Iteration  27: 1089954.279 ops/s
Iteration  28: 1089332.791 ops/s
Iteration  29: 1084371.247 ops/s
Iteration  30: 1092287.388 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_addAllArray":
  1088764.378 ±(99.9%) 3155.161 ops/s [Average]
  (min, avg, max) = (1068414.370, 1088764.378, 1093769.166), stdev = 4722.497
  CI (99.9%): [1085609.217, 1091919.539] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_addAllArray  thrpt   30  1088764.378 ± 3155.161  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_addAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_addAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 702508.247 ops/s
# Warmup Iteration   2: 783638.635 ops/s
# Warmup Iteration   3: 1018679.512 ops/s
# Warmup Iteration   4: 1020792.380 ops/s
# Warmup Iteration   5: 1016959.390 ops/s
# Warmup Iteration   6: 1016415.448 ops/s
# Warmup Iteration   7: 1016889.074 ops/s
# Warmup Iteration   8: 1008949.292 ops/s
# Warmup Iteration   9: 1019225.062 ops/s
# Warmup Iteration  10: 849540.295 ops/s
# Warmup Iteration  11: 1020741.641 ops/s
# Warmup Iteration  12: 1016821.682 ops/s
# Warmup Iteration  13: 1022323.947 ops/s
# Warmup Iteration  14: 1018196.815 ops/s
# Warmup Iteration  15: 1014147.256 ops/s
# Warmup Iteration  16: 1020712.382 ops/s
# Warmup Iteration  17: 1089882.537 ops/s
# Warmup Iteration  18: 1081635.691 ops/s
# Warmup Iteration  19: 1090346.507 ops/s
# Warmup Iteration  20: 1089930.246 ops/s
# Warmup Iteration  21: 1092298.191 ops/s
# Warmup Iteration  22: 1092546.737 ops/s
# Warmup Iteration  23: 1092878.398 ops/s
# Warmup Iteration  24: 1090543.259 ops/s
# Warmup Iteration  25: 1092309.757 ops/s
# Warmup Iteration  26: 1082757.128 ops/s
# Warmup Iteration  27: 1091485.263 ops/s
# Warmup Iteration  28: 1088833.993 ops/s
# Warmup Iteration  29: 1093008.767 ops/s
# Warmup Iteration  30: 1090615.254 ops/s
Iteration   1: 1086845.875 ops/s
Iteration   2: 1091036.044 ops/s
Iteration   3: 1094390.338 ops/s
Iteration   4: 1085728.052 ops/s
Iteration   5: 1092446.405 ops/s
Iteration   6: 1093717.208 ops/s
Iteration   7: 1090434.605 ops/s
Iteration   8: 1093286.545 ops/s
Iteration   9: 1092305.833 ops/s
Iteration  10: 1087554.954 ops/s
Iteration  11: 1092750.882 ops/s
Iteration  12: 1091811.701 ops/s
Iteration  13: 1090122.359 ops/s
Iteration  14: 1092540.528 ops/s
Iteration  15: 1088493.772 ops/s
Iteration  16: 1089663.665 ops/s
Iteration  17: 1090758.316 ops/s
Iteration  18: 1083315.656 ops/s
Iteration  19: 1086494.553 ops/s
Iteration  20: 1089963.829 ops/s
Iteration  21: 1086920.642 ops/s
Iteration  22: 1087647.698 ops/s
Iteration  23: 1082116.512 ops/s
Iteration  24: 1091259.631 ops/s
Iteration  25: 1084924.498 ops/s
Iteration  26: 1089885.979 ops/s
Iteration  27: 1089989.799 ops/s
Iteration  28: 1093409.173 ops/s
Iteration  29: 1088759.170 ops/s
Iteration  30: 1091495.463 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_addAllIterable":
  1089668.990 ±(99.9%) 2092.691 ops/s [Average]
  (min, avg, max) = (1082116.512, 1089668.990, 1094390.338), stdev = 3132.242
  CI (99.9%): [1087576.298, 1091761.681] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score      Error  Units
UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_addAllIterable  thrpt   30  1089668.990 ± 2092.691  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2183324.379 ops/s
# Warmup Iteration   2: 3851573.877 ops/s
# Warmup Iteration   3: 4566988.122 ops/s
# Warmup Iteration   4: 4575631.871 ops/s
# Warmup Iteration   5: 4572141.755 ops/s
# Warmup Iteration   6: 4579910.397 ops/s
# Warmup Iteration   7: 4578027.783 ops/s
# Warmup Iteration   8: 4548123.858 ops/s
# Warmup Iteration   9: 4560557.488 ops/s
# Warmup Iteration  10: 4569202.389 ops/s
# Warmup Iteration  11: 4567726.361 ops/s
# Warmup Iteration  12: 4569642.031 ops/s
# Warmup Iteration  13: 4571423.073 ops/s
# Warmup Iteration  14: 4561871.622 ops/s
# Warmup Iteration  15: 4562554.356 ops/s
# Warmup Iteration  16: 4571418.152 ops/s
# Warmup Iteration  17: 4561429.557 ops/s
# Warmup Iteration  18: 4564461.790 ops/s
# Warmup Iteration  19: 4577503.521 ops/s
# Warmup Iteration  20: 4564838.759 ops/s
# Warmup Iteration  21: 4577851.924 ops/s
# Warmup Iteration  22: 4543242.505 ops/s
# Warmup Iteration  23: 4576451.966 ops/s
# Warmup Iteration  24: 4573825.060 ops/s
# Warmup Iteration  25: 4560218.076 ops/s
# Warmup Iteration  26: 4565696.152 ops/s
# Warmup Iteration  27: 4542933.851 ops/s
# Warmup Iteration  28: 4573955.433 ops/s
# Warmup Iteration  29: 4566654.467 ops/s
# Warmup Iteration  30: 4577721.466 ops/s
Iteration   1: 4566201.318 ops/s
Iteration   2: 4554376.168 ops/s
Iteration   3: 4576060.252 ops/s
Iteration   4: 4584892.973 ops/s
Iteration   5: 4574395.686 ops/s
Iteration   6: 4580625.920 ops/s
Iteration   7: 4548830.849 ops/s
Iteration   8: 4564064.815 ops/s
Iteration   9: 4593403.116 ops/s
Iteration  10: 4585234.090 ops/s
Iteration  11: 4591898.272 ops/s
Iteration  12: 4568332.942 ops/s
Iteration  13: 4568297.893 ops/s
Iteration  14: 4581236.803 ops/s
Iteration  15: 4582659.618 ops/s
Iteration  16: 4588184.636 ops/s
Iteration  17: 4580416.795 ops/s
Iteration  18: 4575927.634 ops/s
Iteration  19: 4581760.908 ops/s
Iteration  20: 4580902.430 ops/s
Iteration  21: 4567046.714 ops/s
Iteration  22: 4563618.437 ops/s
Iteration  23: 4560307.994 ops/s
Iteration  24: 4548161.509 ops/s
Iteration  25: 4572106.587 ops/s
Iteration  26: 4568169.162 ops/s
Iteration  27: 4570230.393 ops/s
Iteration  28: 4500541.134 ops/s
Iteration  29: 4578495.001 ops/s
Iteration  30: 4576267.460 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_allSatisfy":
  4571088.250 ±(99.9%) 11733.393 ops/s [Average]
  (min, avg, max) = (4500541.134, 4571088.250, 4593403.116), stdev = 17561.992
  CI (99.9%): [4559354.857, 4582821.643] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_allSatisfy  thrpt   30  4571088.250 ± 11733.393  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2381618.673 ops/s
# Warmup Iteration   2: 4274340.376 ops/s
# Warmup Iteration   3: 5078138.116 ops/s
# Warmup Iteration   4: 5066393.871 ops/s
# Warmup Iteration   5: 5081661.059 ops/s
# Warmup Iteration   6: 5087180.450 ops/s
# Warmup Iteration   7: 5074529.673 ops/s
# Warmup Iteration   8: 5052119.249 ops/s
# Warmup Iteration   9: 5092864.716 ops/s
# Warmup Iteration  10: 5062504.906 ops/s
# Warmup Iteration  11: 5081967.249 ops/s
# Warmup Iteration  12: 5086719.329 ops/s
# Warmup Iteration  13: 5081016.020 ops/s
# Warmup Iteration  14: 5073308.695 ops/s
# Warmup Iteration  15: 5069423.763 ops/s
# Warmup Iteration  16: 5067817.829 ops/s
# Warmup Iteration  17: 5086144.790 ops/s
# Warmup Iteration  18: 5078033.610 ops/s
# Warmup Iteration  19: 5074173.924 ops/s
# Warmup Iteration  20: 5092872.510 ops/s
# Warmup Iteration  21: 5086201.116 ops/s
# Warmup Iteration  22: 5080325.231 ops/s
# Warmup Iteration  23: 5094077.184 ops/s
# Warmup Iteration  24: 5068587.091 ops/s
# Warmup Iteration  25: 5088344.537 ops/s
# Warmup Iteration  26: 5070872.896 ops/s
# Warmup Iteration  27: 5077729.036 ops/s
# Warmup Iteration  28: 5085311.208 ops/s
# Warmup Iteration  29: 5076030.936 ops/s
# Warmup Iteration  30: 5069688.207 ops/s
Iteration   1: 5077890.010 ops/s
Iteration   2: 5094868.856 ops/s
Iteration   3: 5076635.979 ops/s
Iteration   4: 5082450.430 ops/s
Iteration   5: 5081520.554 ops/s
Iteration   6: 5075087.175 ops/s
Iteration   7: 5091623.117 ops/s
Iteration   8: 5046493.826 ops/s
Iteration   9: 5081651.680 ops/s
Iteration  10: 5073120.306 ops/s
Iteration  11: 5094526.244 ops/s
Iteration  12: 5071867.053 ops/s
Iteration  13: 5082510.467 ops/s
Iteration  14: 5088481.010 ops/s
Iteration  15: 5078268.220 ops/s
Iteration  16: 5078436.833 ops/s
Iteration  17: 5075202.871 ops/s
Iteration  18: 5087591.735 ops/s
Iteration  19: 5081685.593 ops/s
Iteration  20: 5066251.660 ops/s
Iteration  21: 5049859.019 ops/s
Iteration  22: 5082245.358 ops/s
Iteration  23: 5085136.143 ops/s
Iteration  24: 5100759.921 ops/s
Iteration  25: 5079858.837 ops/s
Iteration  26: 5081965.076 ops/s
Iteration  27: 5079691.064 ops/s
Iteration  28: 5005845.382 ops/s
Iteration  29: 5065550.498 ops/s
Iteration  30: 5086347.753 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_anySatisfy":
  5076780.756 ±(99.9%) 11784.515 ops/s [Average]
  (min, avg, max) = (5005845.382, 5076780.756, 5100759.921), stdev = 17638.508
  CI (99.9%): [5064996.241, 5088565.270] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_anySatisfy  thrpt   30  5076780.756 ± 11784.515  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1446357.850 ops/s
# Warmup Iteration   2: 3036019.433 ops/s
# Warmup Iteration   3: 2576443.870 ops/s
# Warmup Iteration   4: 3075641.423 ops/s
# Warmup Iteration   5: 3060575.970 ops/s
# Warmup Iteration   6: 3024354.096 ops/s
# Warmup Iteration   7: 3052729.096 ops/s
# Warmup Iteration   8: 3051785.414 ops/s
# Warmup Iteration   9: 3064896.424 ops/s
# Warmup Iteration  10: 3066957.932 ops/s
# Warmup Iteration  11: 3026625.324 ops/s
# Warmup Iteration  12: 3045941.620 ops/s
# Warmup Iteration  13: 3048816.723 ops/s
# Warmup Iteration  14: 3058224.488 ops/s
# Warmup Iteration  15: 3058314.103 ops/s
# Warmup Iteration  16: 3053220.441 ops/s
# Warmup Iteration  17: 3057567.700 ops/s
# Warmup Iteration  18: 3019376.982 ops/s
# Warmup Iteration  19: 3050200.539 ops/s
# Warmup Iteration  20: 3058532.855 ops/s
# Warmup Iteration  21: 3051355.297 ops/s
# Warmup Iteration  22: 3067253.538 ops/s
# Warmup Iteration  23: 3051582.563 ops/s
# Warmup Iteration  24: 3041040.963 ops/s
# Warmup Iteration  25: 3035430.694 ops/s
# Warmup Iteration  26: 3061226.594 ops/s
# Warmup Iteration  27: 3050051.380 ops/s
# Warmup Iteration  28: 3063402.922 ops/s
# Warmup Iteration  29: 3091678.914 ops/s
# Warmup Iteration  30: 3081407.154 ops/s
Iteration   1: 3043542.069 ops/s
Iteration   2: 3057651.822 ops/s
Iteration   3: 3050086.025 ops/s
Iteration   4: 3072909.156 ops/s
Iteration   5: 3053881.578 ops/s
Iteration   6: 3057681.158 ops/s
Iteration   7: 3003136.966 ops/s
Iteration   8: 3015217.421 ops/s
Iteration   9: 3089813.382 ops/s
Iteration  10: 3058828.051 ops/s
Iteration  11: 3034134.912 ops/s
Iteration  12: 3075945.643 ops/s
Iteration  13: 3031428.399 ops/s
Iteration  14: 3050169.692 ops/s
Iteration  15: 3071818.819 ops/s
Iteration  16: 3045920.784 ops/s
Iteration  17: 3073064.260 ops/s
Iteration  18: 3056021.334 ops/s
Iteration  19: 3041243.802 ops/s
Iteration  20: 2968171.168 ops/s
Iteration  21: 2993121.035 ops/s
Iteration  22: 3045766.232 ops/s
Iteration  23: 3065902.464 ops/s
Iteration  24: 3076187.479 ops/s
Iteration  25: 3073602.878 ops/s
Iteration  26: 3061484.240 ops/s
Iteration  27: 3044024.949 ops/s
Iteration  28: 3029726.228 ops/s
Iteration  29: 3045439.343 ops/s
Iteration  30: 3032206.002 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_appendString":
  3047270.910 ±(99.9%) 17682.282 ops/s [Average]
  (min, avg, max) = (2968171.168, 3047270.910, 3089813.382), stdev = 26466.009
  CI (99.9%): [3029588.628, 3064953.192] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_appendString  thrpt   30  3047270.910 ± 17682.282  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_asLazy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_asLazy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3279738.034 ops/s
# Warmup Iteration   2: 6251882.801 ops/s
# Warmup Iteration   3: 6698482.824 ops/s
# Warmup Iteration   4: 6695890.147 ops/s
# Warmup Iteration   5: 5595754.290 ops/s
# Warmup Iteration   6: 6716437.053 ops/s
# Warmup Iteration   7: 6719505.606 ops/s
# Warmup Iteration   8: 6716275.166 ops/s
# Warmup Iteration   9: 6714498.512 ops/s
# Warmup Iteration  10: 6716382.545 ops/s
# Warmup Iteration  11: 6721470.742 ops/s
# Warmup Iteration  12: 6722577.463 ops/s
# Warmup Iteration  13: 6709810.653 ops/s
# Warmup Iteration  14: 6724065.712 ops/s
# Warmup Iteration  15: 6710464.285 ops/s
# Warmup Iteration  16: 6715027.191 ops/s
# Warmup Iteration  17: 6727403.747 ops/s
# Warmup Iteration  18: 6727664.722 ops/s
# Warmup Iteration  19: 6717760.236 ops/s
# Warmup Iteration  20: 6715403.392 ops/s
# Warmup Iteration  21: 6710953.019 ops/s
# Warmup Iteration  22: 6721702.439 ops/s
# Warmup Iteration  23: 6712539.791 ops/s
# Warmup Iteration  24: 6714444.423 ops/s
# Warmup Iteration  25: 6712206.321 ops/s
# Warmup Iteration  26: 6711264.715 ops/s
# Warmup Iteration  27: 6723124.145 ops/s
# Warmup Iteration  28: 6716836.813 ops/s
# Warmup Iteration  29: 6716711.312 ops/s
# Warmup Iteration  30: 6723460.048 ops/s
Iteration   1: 6725113.074 ops/s
Iteration   2: 6695183.107 ops/s
Iteration   3: 6713730.738 ops/s
Iteration   4: 6750535.166 ops/s
Iteration   5: 6716991.461 ops/s
Iteration   6: 6712869.619 ops/s
Iteration   7: 6722725.241 ops/s
Iteration   8: 6701331.558 ops/s
Iteration   9: 6720892.223 ops/s
Iteration  10: 6734109.663 ops/s
Iteration  11: 6724295.682 ops/s
Iteration  12: 6706144.110 ops/s
Iteration  13: 6733927.037 ops/s
Iteration  14: 6726631.532 ops/s
Iteration  15: 6719844.753 ops/s
Iteration  16: 6704643.092 ops/s
Iteration  17: 6729439.465 ops/s
Iteration  18: 6698429.937 ops/s
Iteration  19: 6707484.677 ops/s
Iteration  20: 6715351.949 ops/s
Iteration  21: 6685388.616 ops/s
Iteration  22: 6710062.965 ops/s
Iteration  23: 6710427.242 ops/s
Iteration  24: 6716745.190 ops/s
Iteration  25: 6719223.643 ops/s
Iteration  26: 6707450.357 ops/s
Iteration  27: 6709047.990 ops/s
Iteration  28: 6722321.449 ops/s
Iteration  29: 6734082.957 ops/s
Iteration  30: 6718446.558 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_asLazy":
  6716429.035 ±(99.9%) 8900.624 ops/s [Average]
  (min, avg, max) = (6685388.616, 6716429.035, 6750535.166), stdev = 13322.036
  CI (99.9%): [6707528.411, 6725329.659] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_asLazy  thrpt   30  6716429.035 ± 8900.624  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_asSynchronized$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_asSynchronized

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8676247.101 ops/s
# Warmup Iteration   2: 17906862.517 ops/s
# Warmup Iteration   3: 14940042.400 ops/s
# Warmup Iteration   4: 18011296.533 ops/s
# Warmup Iteration   5: 18010026.716 ops/s
# Warmup Iteration   6: 18002841.382 ops/s
# Warmup Iteration   7: 18035414.064 ops/s
# Warmup Iteration   8: 18030652.882 ops/s
# Warmup Iteration   9: 17990885.805 ops/s
# Warmup Iteration  10: 18040072.236 ops/s
# Warmup Iteration  11: 18018350.586 ops/s
# Warmup Iteration  12: 17848307.813 ops/s
# Warmup Iteration  13: 18016178.912 ops/s
# Warmup Iteration  14: 18010354.481 ops/s
# Warmup Iteration  15: 17960819.603 ops/s
# Warmup Iteration  16: 17976071.513 ops/s
# Warmup Iteration  17: 18016604.635 ops/s
# Warmup Iteration  18: 18013960.042 ops/s
# Warmup Iteration  19: 17985804.043 ops/s
# Warmup Iteration  20: 18004443.224 ops/s
# Warmup Iteration  21: 18021275.323 ops/s
# Warmup Iteration  22: 18027436.524 ops/s
# Warmup Iteration  23: 18014224.317 ops/s
# Warmup Iteration  24: 17992391.190 ops/s
# Warmup Iteration  25: 18006277.946 ops/s
# Warmup Iteration  26: 17988186.912 ops/s
# Warmup Iteration  27: 18001281.945 ops/s
# Warmup Iteration  28: 18028047.459 ops/s
# Warmup Iteration  29: 17945124.235 ops/s
# Warmup Iteration  30: 17993227.191 ops/s
Iteration   1: 18041250.377 ops/s
Iteration   2: 18009705.630 ops/s
Iteration   3: 17998759.419 ops/s
Iteration   4: 18049811.858 ops/s
Iteration   5: 18008418.063 ops/s
Iteration   6: 18032713.731 ops/s
Iteration   7: 17970903.998 ops/s
Iteration   8: 17930184.378 ops/s
Iteration   9: 17943190.933 ops/s
Iteration  10: 17991006.915 ops/s
Iteration  11: 18068874.205 ops/s
Iteration  12: 18013464.927 ops/s
Iteration  13: 18050648.560 ops/s
Iteration  14: 17982664.688 ops/s
Iteration  15: 18004984.960 ops/s
Iteration  16: 18003326.329 ops/s
Iteration  17: 18047608.338 ops/s
Iteration  18: 18036355.642 ops/s
Iteration  19: 17959317.897 ops/s
Iteration  20: 18027612.054 ops/s
Iteration  21: 18034096.832 ops/s
Iteration  22: 17968271.211 ops/s
Iteration  23: 18045345.527 ops/s
Iteration  24: 18021086.269 ops/s
Iteration  25: 18090167.735 ops/s
Iteration  26: 18080123.457 ops/s
Iteration  27: 18043996.269 ops/s
Iteration  28: 17990547.281 ops/s
Iteration  29: 18010099.039 ops/s
Iteration  30: 17964913.154 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_asSynchronized":
  18013981.656 ±(99.9%) 26316.679 ops/s [Average]
  (min, avg, max) = (17930184.378, 18013981.656, 18090167.735), stdev = 39389.569
  CI (99.9%): [17987664.977, 18040298.335] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt         Score       Error  Units
UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_asSynchronized  thrpt   30  18013981.656 ± 26316.679  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_asUnmodifiable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_asUnmodifiable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7732156.510 ops/s
# Warmup Iteration   2: 13914207.074 ops/s
# Warmup Iteration   3: 14169030.717 ops/s
# Warmup Iteration   4: 15148729.728 ops/s
# Warmup Iteration   5: 15046281.860 ops/s
# Warmup Iteration   6: 15169935.926 ops/s
# Warmup Iteration   7: 15175474.277 ops/s
# Warmup Iteration   8: 15162856.629 ops/s
# Warmup Iteration   9: 15215359.487 ops/s
# Warmup Iteration  10: 15144149.145 ops/s
# Warmup Iteration  11: 15192732.031 ops/s
# Warmup Iteration  12: 15103573.362 ops/s
# Warmup Iteration  13: 15193098.422 ops/s
# Warmup Iteration  14: 15196360.506 ops/s
# Warmup Iteration  15: 15146890.954 ops/s
# Warmup Iteration  16: 15146793.106 ops/s
# Warmup Iteration  17: 15130975.882 ops/s
# Warmup Iteration  18: 15158247.777 ops/s
# Warmup Iteration  19: 15156908.993 ops/s
# Warmup Iteration  20: 15112799.775 ops/s
# Warmup Iteration  21: 15058082.264 ops/s
# Warmup Iteration  22: 15000136.852 ops/s
# Warmup Iteration  23: 15056789.044 ops/s
# Warmup Iteration  24: 15134850.898 ops/s
# Warmup Iteration  25: 15096084.161 ops/s
# Warmup Iteration  26: 15080096.657 ops/s
# Warmup Iteration  27: 15058935.890 ops/s
# Warmup Iteration  28: 15080443.846 ops/s
# Warmup Iteration  29: 15094582.811 ops/s
# Warmup Iteration  30: 15138519.952 ops/s
Iteration   1: 15054565.834 ops/s
Iteration   2: 15044462.573 ops/s
Iteration   3: 15109854.147 ops/s
Iteration   4: 15062839.695 ops/s
Iteration   5: 15125914.900 ops/s
Iteration   6: 15110877.769 ops/s
Iteration   7: 15099280.003 ops/s
Iteration   8: 15115048.979 ops/s
Iteration   9: 15107499.732 ops/s
Iteration  10: 15116802.309 ops/s
Iteration  11: 15058985.408 ops/s
Iteration  12: 15078251.450 ops/s
Iteration  13: 15116284.880 ops/s
Iteration  14: 15118495.717 ops/s
Iteration  15: 15082326.195 ops/s
Iteration  16: 15095332.697 ops/s
Iteration  17: 15122719.631 ops/s
Iteration  18: 15042935.225 ops/s
Iteration  19: 15084314.836 ops/s
Iteration  20: 15093143.485 ops/s
Iteration  21: 15151832.462 ops/s
Iteration  22: 14839299.712 ops/s
Iteration  23: 15087596.862 ops/s
Iteration  24: 15047267.586 ops/s
Iteration  25: 15054051.042 ops/s
Iteration  26: 15010445.805 ops/s
Iteration  27: 15073537.577 ops/s
Iteration  28: 15085764.798 ops/s
Iteration  29: 14776678.734 ops/s
Iteration  30: 15115258.938 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_asUnmodifiable":
  15069388.966 ±(99.9%) 52110.845 ops/s [Average]
  (min, avg, max) = (14776678.734, 15069388.966, 15151832.462), stdev = 77997.066
  CI (99.9%): [15017278.121, 15121499.811] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt         Score       Error  Units
UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_asUnmodifiable  thrpt   30  15069388.966 ± 52110.845  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_booleanIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_booleanIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 532228.090 ops/s
# Warmup Iteration   2: 565622.915 ops/s
# Warmup Iteration   3: 763438.994 ops/s
# Warmup Iteration   4: 768142.431 ops/s
# Warmup Iteration   5: 768906.644 ops/s
# Warmup Iteration   6: 770522.740 ops/s
# Warmup Iteration   7: 768385.360 ops/s
# Warmup Iteration   8: 768528.165 ops/s
# Warmup Iteration   9: 770661.704 ops/s
# Warmup Iteration  10: 767560.918 ops/s
# Warmup Iteration  11: 678109.454 ops/s
# Warmup Iteration  12: 732099.029 ops/s
# Warmup Iteration  13: 768225.968 ops/s
# Warmup Iteration  14: 767805.279 ops/s
# Warmup Iteration  15: 771549.171 ops/s
# Warmup Iteration  16: 766820.674 ops/s
# Warmup Iteration  17: 805330.287 ops/s
# Warmup Iteration  18: 806258.564 ops/s
# Warmup Iteration  19: 804946.653 ops/s
# Warmup Iteration  20: 801128.106 ops/s
# Warmup Iteration  21: 804055.283 ops/s
# Warmup Iteration  22: 805231.777 ops/s
# Warmup Iteration  23: 804280.927 ops/s
# Warmup Iteration  24: 807114.957 ops/s
# Warmup Iteration  25: 805242.653 ops/s
# Warmup Iteration  26: 807392.283 ops/s
# Warmup Iteration  27: 802513.968 ops/s
# Warmup Iteration  28: 805777.420 ops/s
# Warmup Iteration  29: 807880.468 ops/s
# Warmup Iteration  30: 804463.622 ops/s
Iteration   1: 798541.785 ops/s
Iteration   2: 804205.833 ops/s
Iteration   3: 806076.425 ops/s
Iteration   4: 804038.156 ops/s
Iteration   5: 805650.869 ops/s
Iteration   6: 806618.291 ops/s
Iteration   7: 805701.805 ops/s
Iteration   8: 806530.792 ops/s
Iteration   9: 806518.185 ops/s
Iteration  10: 807105.491 ops/s
Iteration  11: 803840.691 ops/s
Iteration  12: 805659.995 ops/s
Iteration  13: 806298.636 ops/s
Iteration  14: 806640.786 ops/s
Iteration  15: 801588.934 ops/s
Iteration  16: 806887.741 ops/s
Iteration  17: 805558.926 ops/s
Iteration  18: 805709.975 ops/s
Iteration  19: 804127.432 ops/s
Iteration  20: 806280.706 ops/s
Iteration  21: 808388.055 ops/s
Iteration  22: 802975.190 ops/s
Iteration  23: 805551.525 ops/s
Iteration  24: 806037.738 ops/s
Iteration  25: 805527.526 ops/s
Iteration  26: 804863.318 ops/s
Iteration  27: 803217.573 ops/s
Iteration  28: 806020.213 ops/s
Iteration  29: 806423.033 ops/s
Iteration  30: 807129.031 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_booleanIterator":
  805323.822 ±(99.9%) 1280.349 ops/s [Average]
  (min, avg, max) = (798541.785, 805323.822, 808388.055), stdev = 1916.366
  CI (99.9%): [804043.473, 806604.171] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_booleanIterator  thrpt   30  805323.822 ± 1280.349  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 682902.039 ops/s
# Warmup Iteration   2: 780567.567 ops/s
# Warmup Iteration   3: 987072.451 ops/s
# Warmup Iteration   4: 995223.614 ops/s
# Warmup Iteration   5: 992140.879 ops/s
# Warmup Iteration   6: 992619.836 ops/s
# Warmup Iteration   7: 997770.365 ops/s
# Warmup Iteration   8: 995228.197 ops/s
# Warmup Iteration   9: 978013.177 ops/s
# Warmup Iteration  10: 843774.986 ops/s
# Warmup Iteration  11: 995325.762 ops/s
# Warmup Iteration  12: 996066.877 ops/s
# Warmup Iteration  13: 995686.680 ops/s
# Warmup Iteration  14: 997871.709 ops/s
# Warmup Iteration  15: 994991.577 ops/s
# Warmup Iteration  16: 997773.976 ops/s
# Warmup Iteration  17: 1052257.086 ops/s
# Warmup Iteration  18: 1049873.973 ops/s
# Warmup Iteration  19: 1050781.776 ops/s
# Warmup Iteration  20: 1049063.040 ops/s
# Warmup Iteration  21: 1051013.627 ops/s
# Warmup Iteration  22: 1042969.408 ops/s
# Warmup Iteration  23: 1053263.965 ops/s
# Warmup Iteration  24: 1051570.128 ops/s
# Warmup Iteration  25: 1051807.321 ops/s
# Warmup Iteration  26: 1044475.811 ops/s
# Warmup Iteration  27: 1050041.411 ops/s
# Warmup Iteration  28: 1052826.700 ops/s
# Warmup Iteration  29: 1051795.121 ops/s
# Warmup Iteration  30: 1052272.632 ops/s
Iteration   1: 1049105.849 ops/s
Iteration   2: 1050592.307 ops/s
Iteration   3: 1047982.156 ops/s
Iteration   4: 1052284.282 ops/s
Iteration   5: 1048721.246 ops/s
Iteration   6: 1050324.210 ops/s
Iteration   7: 1051382.009 ops/s
Iteration   8: 1053027.538 ops/s
Iteration   9: 1050666.150 ops/s
Iteration  10: 1053117.045 ops/s
Iteration  11: 1051542.161 ops/s
Iteration  12: 1051529.733 ops/s
Iteration  13: 1054850.468 ops/s
Iteration  14: 1032310.595 ops/s
Iteration  15: 1048739.228 ops/s
Iteration  16: 1052331.392 ops/s
Iteration  17: 1051680.133 ops/s
Iteration  18: 1051446.432 ops/s
Iteration  19: 1049068.072 ops/s
Iteration  20: 1052983.939 ops/s
Iteration  21: 1049664.060 ops/s
Iteration  22: 1051475.588 ops/s
Iteration  23: 1050105.410 ops/s
Iteration  24: 1053089.912 ops/s
Iteration  25: 1052157.686 ops/s
Iteration  26: 1053114.341 ops/s
Iteration  27: 1051690.632 ops/s
Iteration  28: 1050422.819 ops/s
Iteration  29: 1052222.543 ops/s
Iteration  30: 1051270.427 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove":
  1050629.945 ±(99.9%) 2543.124 ops/s [Average]
  (min, avg, max) = (1032310.595, 1050629.945, 1054850.468), stdev = 3806.429
  CI (99.9%): [1048086.821, 1053173.070] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt        Score      Error  Units
UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove  thrpt   30  1050629.945 ± 2543.124  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_chunk$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_chunk

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 139924.119 ops/s
# Warmup Iteration   2: 233903.592 ops/s
# Warmup Iteration   3: 268298.370 ops/s
# Warmup Iteration   4: 270236.322 ops/s
# Warmup Iteration   5: 267194.682 ops/s
# Warmup Iteration   6: 226320.056 ops/s
# Warmup Iteration   7: 270345.579 ops/s
# Warmup Iteration   8: 270450.280 ops/s
# Warmup Iteration   9: 270056.847 ops/s
# Warmup Iteration  10: 270101.576 ops/s
# Warmup Iteration  11: 270132.509 ops/s
# Warmup Iteration  12: 270461.372 ops/s
# Warmup Iteration  13: 270173.951 ops/s
# Warmup Iteration  14: 269957.069 ops/s
# Warmup Iteration  15: 270343.410 ops/s
# Warmup Iteration  16: 267736.708 ops/s
# Warmup Iteration  17: 279059.331 ops/s
# Warmup Iteration  18: 278531.433 ops/s
# Warmup Iteration  19: 279169.346 ops/s
# Warmup Iteration  20: 279183.276 ops/s
# Warmup Iteration  21: 278863.512 ops/s
# Warmup Iteration  22: 278412.389 ops/s
# Warmup Iteration  23: 279132.935 ops/s
# Warmup Iteration  24: 279197.644 ops/s
# Warmup Iteration  25: 279525.740 ops/s
# Warmup Iteration  26: 276585.011 ops/s
# Warmup Iteration  27: 279269.232 ops/s
# Warmup Iteration  28: 279012.916 ops/s
# Warmup Iteration  29: 279291.254 ops/s
# Warmup Iteration  30: 279062.042 ops/s
Iteration   1: 278892.077 ops/s
Iteration   2: 278869.915 ops/s
Iteration   3: 278342.873 ops/s
Iteration   4: 279726.909 ops/s
Iteration   5: 278320.925 ops/s
Iteration   6: 279449.915 ops/s
Iteration   7: 278347.435 ops/s
Iteration   8: 279435.746 ops/s
Iteration   9: 279899.286 ops/s
Iteration  10: 278345.987 ops/s
Iteration  11: 278950.709 ops/s
Iteration  12: 278623.685 ops/s
Iteration  13: 279124.326 ops/s
Iteration  14: 278506.619 ops/s
Iteration  15: 278860.531 ops/s
Iteration  16: 277282.390 ops/s
Iteration  17: 278498.065 ops/s
Iteration  18: 279301.684 ops/s
Iteration  19: 278083.370 ops/s
Iteration  20: 279868.263 ops/s
Iteration  21: 278102.313 ops/s
Iteration  22: 278983.952 ops/s
Iteration  23: 278537.468 ops/s
Iteration  24: 279000.423 ops/s
Iteration  25: 278822.681 ops/s
Iteration  26: 279330.415 ops/s
Iteration  27: 278762.886 ops/s
Iteration  28: 279891.054 ops/s
Iteration  29: 278893.243 ops/s
Iteration  30: 279288.787 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_chunk":
  278878.131 ±(99.9%) 401.524 ops/s [Average]
  (min, avg, max) = (277282.390, 278878.131, 279899.286), stdev = 600.982
  CI (99.9%): [278476.607, 279279.655] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score     Error  Units
UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_chunk  thrpt   30  278878.131 ± 401.524  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 717472.119 ops/s
# Warmup Iteration   2: 787855.834 ops/s
# Warmup Iteration   3: 1011018.262 ops/s
# Warmup Iteration   4: 1007320.562 ops/s
# Warmup Iteration   5: 1010019.157 ops/s
# Warmup Iteration   6: 1008392.024 ops/s
# Warmup Iteration   7: 1006092.149 ops/s
# Warmup Iteration   8: 1006752.658 ops/s
# Warmup Iteration   9: 1008416.496 ops/s
# Warmup Iteration  10: 846612.123 ops/s
# Warmup Iteration  11: 1013262.605 ops/s
# Warmup Iteration  12: 1006426.084 ops/s
# Warmup Iteration  13: 1013241.592 ops/s
# Warmup Iteration  14: 1009737.287 ops/s
# Warmup Iteration  15: 1010581.712 ops/s
# Warmup Iteration  16: 1011476.675 ops/s
# Warmup Iteration  17: 1076081.758 ops/s
# Warmup Iteration  18: 1076550.545 ops/s
# Warmup Iteration  19: 1075516.809 ops/s
# Warmup Iteration  20: 1070957.055 ops/s
# Warmup Iteration  21: 1073993.396 ops/s
# Warmup Iteration  22: 1073714.006 ops/s
# Warmup Iteration  23: 1076869.588 ops/s
# Warmup Iteration  24: 1076702.136 ops/s
# Warmup Iteration  25: 1073554.817 ops/s
# Warmup Iteration  26: 1067025.032 ops/s
# Warmup Iteration  27: 1075744.406 ops/s
# Warmup Iteration  28: 1074862.757 ops/s
# Warmup Iteration  29: 1074740.190 ops/s
# Warmup Iteration  30: 1074590.088 ops/s
Iteration   1: 1074782.670 ops/s
Iteration   2: 1075050.560 ops/s
Iteration   3: 1075823.844 ops/s
Iteration   4: 1076201.682 ops/s
Iteration   5: 1073145.988 ops/s
Iteration   6: 1078879.730 ops/s
Iteration   7: 1073510.325 ops/s
Iteration   8: 1076049.030 ops/s
Iteration   9: 1072935.871 ops/s
Iteration  10: 1066294.259 ops/s
Iteration  11: 1073393.033 ops/s
Iteration  12: 1076861.058 ops/s
Iteration  13: 1075972.859 ops/s
Iteration  14: 1073178.511 ops/s
Iteration  15: 1074990.756 ops/s
Iteration  16: 1076804.731 ops/s
Iteration  17: 1071426.741 ops/s
Iteration  18: 1075982.745 ops/s
Iteration  19: 1074758.378 ops/s
Iteration  20: 1068479.669 ops/s
Iteration  21: 1074826.300 ops/s
Iteration  22: 1074871.921 ops/s
Iteration  23: 1058204.277 ops/s
Iteration  24: 1075750.317 ops/s
Iteration  25: 1073913.826 ops/s
Iteration  26: 1074736.315 ops/s
Iteration  27: 1064467.753 ops/s
Iteration  28: 1074874.448 ops/s
Iteration  29: 1077056.852 ops/s
Iteration  30: 1072539.378 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_clear":
  1073525.461 ±(99.9%) 2812.384 ops/s [Average]
  (min, avg, max) = (1058204.277, 1073525.461, 1078879.730), stdev = 4209.444
  CI (99.9%): [1070713.077, 1076337.845] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_clear  thrpt   30  1073525.461 ± 2812.384  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 744595.664 ops/s
# Warmup Iteration   2: 1897451.961 ops/s
# Warmup Iteration   3: 1930485.502 ops/s
# Warmup Iteration   4: 1596992.243 ops/s
# Warmup Iteration   5: 1926973.436 ops/s
# Warmup Iteration   6: 1929806.775 ops/s
# Warmup Iteration   7: 1932093.321 ops/s
# Warmup Iteration   8: 1932357.927 ops/s
# Warmup Iteration   9: 1931141.758 ops/s
# Warmup Iteration  10: 1937541.162 ops/s
# Warmup Iteration  11: 1936997.861 ops/s
# Warmup Iteration  12: 1934308.065 ops/s
# Warmup Iteration  13: 1934080.053 ops/s
# Warmup Iteration  14: 1932881.201 ops/s
# Warmup Iteration  15: 1935572.010 ops/s
# Warmup Iteration  16: 1928336.414 ops/s
# Warmup Iteration  17: 1899831.778 ops/s
# Warmup Iteration  18: 1935324.547 ops/s
# Warmup Iteration  19: 1932712.265 ops/s
# Warmup Iteration  20: 1932014.526 ops/s
# Warmup Iteration  21: 1933714.084 ops/s
# Warmup Iteration  22: 1935274.301 ops/s
# Warmup Iteration  23: 1932132.267 ops/s
# Warmup Iteration  24: 1935106.248 ops/s
# Warmup Iteration  25: 1933418.246 ops/s
# Warmup Iteration  26: 1924982.676 ops/s
# Warmup Iteration  27: 1934716.841 ops/s
# Warmup Iteration  28: 1929134.411 ops/s
# Warmup Iteration  29: 1933063.160 ops/s
# Warmup Iteration  30: 1930594.276 ops/s
Iteration   1: 1931093.128 ops/s
Iteration   2: 1934728.695 ops/s
Iteration   3: 1936032.636 ops/s
Iteration   4: 1928626.770 ops/s
Iteration   5: 1931999.897 ops/s
Iteration   6: 1928520.920 ops/s
Iteration   7: 1930096.845 ops/s
Iteration   8: 1934546.192 ops/s
Iteration   9: 1936202.965 ops/s
Iteration  10: 1932454.066 ops/s
Iteration  11: 1932957.822 ops/s
Iteration  12: 1935336.103 ops/s
Iteration  13: 1904425.047 ops/s
Iteration  14: 1938763.315 ops/s
Iteration  15: 1934328.671 ops/s
Iteration  16: 1934608.029 ops/s
Iteration  17: 1938513.079 ops/s
Iteration  18: 1921762.210 ops/s
Iteration  19: 1933631.390 ops/s
Iteration  20: 1933963.596 ops/s
Iteration  21: 1934385.295 ops/s
Iteration  22: 1936542.649 ops/s
Iteration  23: 1932423.864 ops/s
Iteration  24: 1934350.501 ops/s
Iteration  25: 1936348.672 ops/s
Iteration  26: 1935041.930 ops/s
Iteration  27: 1931907.322 ops/s
Iteration  28: 1932302.541 ops/s
Iteration  29: 1937664.395 ops/s
Iteration  30: 1930566.737 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_collect":
  1932470.843 ±(99.9%) 4203.446 ops/s [Average]
  (min, avg, max) = (1904425.047, 1932470.843, 1938763.315), stdev = 6291.521
  CI (99.9%): [1928267.396, 1936674.289] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_collect  thrpt   30  1932470.843 ± 4203.446  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3481109.977 ops/s
# Warmup Iteration   2: 7312079.464 ops/s
# Warmup Iteration   3: 8498741.215 ops/s
# Warmup Iteration   4: 8528708.978 ops/s
# Warmup Iteration   5: 8538434.345 ops/s
# Warmup Iteration   6: 8549028.254 ops/s
# Warmup Iteration   7: 8538811.689 ops/s
# Warmup Iteration   8: 8559386.833 ops/s
# Warmup Iteration   9: 8558144.296 ops/s
# Warmup Iteration  10: 8508186.086 ops/s
# Warmup Iteration  11: 8521935.100 ops/s
# Warmup Iteration  12: 8545936.879 ops/s
# Warmup Iteration  13: 8544067.768 ops/s
# Warmup Iteration  14: 8582664.949 ops/s
# Warmup Iteration  15: 8532014.479 ops/s
# Warmup Iteration  16: 8529537.190 ops/s
# Warmup Iteration  17: 8555023.376 ops/s
# Warmup Iteration  18: 8558228.205 ops/s
# Warmup Iteration  19: 8557101.858 ops/s
# Warmup Iteration  20: 8555929.324 ops/s
# Warmup Iteration  21: 8566168.192 ops/s
# Warmup Iteration  22: 8532953.510 ops/s
# Warmup Iteration  23: 8556790.017 ops/s
# Warmup Iteration  24: 8526464.146 ops/s
# Warmup Iteration  25: 8529263.817 ops/s
# Warmup Iteration  26: 8535381.892 ops/s
# Warmup Iteration  27: 8572310.502 ops/s
# Warmup Iteration  28: 8566207.850 ops/s
# Warmup Iteration  29: 8528283.847 ops/s
# Warmup Iteration  30: 8461148.683 ops/s
Iteration   1: 8534898.503 ops/s
Iteration   2: 8546867.116 ops/s
Iteration   3: 8551977.599 ops/s
Iteration   4: 8576674.821 ops/s
Iteration   5: 8584357.925 ops/s
Iteration   6: 8526685.922 ops/s
Iteration   7: 8584190.703 ops/s
Iteration   8: 8568439.286 ops/s
Iteration   9: 8504270.529 ops/s
Iteration  10: 8562571.091 ops/s
Iteration  11: 8546204.259 ops/s
Iteration  12: 8574942.595 ops/s
Iteration  13: 8574963.163 ops/s
Iteration  14: 8542189.737 ops/s
Iteration  15: 8447912.966 ops/s
Iteration  16: 8585341.748 ops/s
Iteration  17: 8554690.480 ops/s
Iteration  18: 8399872.452 ops/s
Iteration  19: 8568662.125 ops/s
Iteration  20: 8517925.427 ops/s
Iteration  21: 8583627.508 ops/s
Iteration  22: 8503745.157 ops/s
Iteration  23: 8581357.613 ops/s
Iteration  24: 8534917.067 ops/s
Iteration  25: 8488601.544 ops/s
Iteration  26: 8532479.361 ops/s
Iteration  27: 8549227.185 ops/s
Iteration  28: 8584057.319 ops/s
Iteration  29: 8539935.399 ops/s
Iteration  30: 8575120.705 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_contains":
  8544223.577 ±(99.9%) 28511.875 ops/s [Average]
  (min, avg, max) = (8399872.452, 8544223.577, 8585341.748), stdev = 42675.235
  CI (99.9%): [8515711.702, 8572735.452] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_contains  thrpt   30  8544223.577 ± 28511.875  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7679285.480 ops/s
# Warmup Iteration   2: 13960028.078 ops/s
# Warmup Iteration   3: 14408201.253 ops/s
# Warmup Iteration   4: 15468368.104 ops/s
# Warmup Iteration   5: 15469026.357 ops/s
# Warmup Iteration   6: 15408840.157 ops/s
# Warmup Iteration   7: 15472582.924 ops/s
# Warmup Iteration   8: 15425744.164 ops/s
# Warmup Iteration   9: 15434628.673 ops/s
# Warmup Iteration  10: 15313052.847 ops/s
# Warmup Iteration  11: 15474559.119 ops/s
# Warmup Iteration  12: 15380017.575 ops/s
# Warmup Iteration  13: 15447962.958 ops/s
# Warmup Iteration  14: 15458244.776 ops/s
# Warmup Iteration  15: 15331981.935 ops/s
# Warmup Iteration  16: 15430793.894 ops/s
# Warmup Iteration  17: 15449395.816 ops/s
# Warmup Iteration  18: 15489234.680 ops/s
# Warmup Iteration  19: 15445254.022 ops/s
# Warmup Iteration  20: 15438340.129 ops/s
# Warmup Iteration  21: 15478762.875 ops/s
# Warmup Iteration  22: 15464453.156 ops/s
# Warmup Iteration  23: 15345574.142 ops/s
# Warmup Iteration  24: 15461695.543 ops/s
# Warmup Iteration  25: 15467398.131 ops/s
# Warmup Iteration  26: 15466036.108 ops/s
# Warmup Iteration  27: 15401838.271 ops/s
# Warmup Iteration  28: 15461693.535 ops/s
# Warmup Iteration  29: 15470990.232 ops/s
# Warmup Iteration  30: 15471156.443 ops/s
Iteration   1: 15514053.324 ops/s
Iteration   2: 15497856.290 ops/s
Iteration   3: 15515802.424 ops/s
Iteration   4: 15377118.864 ops/s
Iteration   5: 15442658.865 ops/s
Iteration   6: 15489589.942 ops/s
Iteration   7: 15419939.020 ops/s
Iteration   8: 15464337.263 ops/s
Iteration   9: 15421386.015 ops/s
Iteration  10: 15448723.682 ops/s
Iteration  11: 15387940.197 ops/s
Iteration  12: 15511226.262 ops/s
Iteration  13: 15508225.089 ops/s
Iteration  14: 15480275.678 ops/s
Iteration  15: 15463821.039 ops/s
Iteration  16: 15447545.699 ops/s
Iteration  17: 15467682.639 ops/s
Iteration  18: 15461530.519 ops/s
Iteration  19: 15461659.914 ops/s
Iteration  20: 15372487.724 ops/s
Iteration  21: 15446965.717 ops/s
Iteration  22: 15471066.867 ops/s
Iteration  23: 15379004.004 ops/s
Iteration  24: 15445512.697 ops/s
Iteration  25: 15437409.759 ops/s
Iteration  26: 15410590.170 ops/s
Iteration  27: 15390012.484 ops/s
Iteration  28: 15436828.400 ops/s
Iteration  29: 15541146.065 ops/s
Iteration  30: 15479163.593 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_containsAllArray":
  15453052.007 ±(99.9%) 29918.834 ops/s [Average]
  (min, avg, max) = (15372487.724, 15453052.007, 15541146.065), stdev = 44781.106
  CI (99.9%): [15423133.173, 15482970.841] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt         Score       Error  Units
UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_containsAllArray  thrpt   30  15453052.007 ± 29918.834  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4726717.548 ops/s
# Warmup Iteration   2: 8344505.712 ops/s
# Warmup Iteration   3: 9975225.062 ops/s
# Warmup Iteration   4: 9947429.659 ops/s
# Warmup Iteration   5: 9886169.797 ops/s
# Warmup Iteration   6: 9951062.141 ops/s
# Warmup Iteration   7: 9935976.232 ops/s
# Warmup Iteration   8: 9980679.188 ops/s
# Warmup Iteration   9: 9952323.517 ops/s
# Warmup Iteration  10: 9966714.329 ops/s
# Warmup Iteration  11: 9990652.004 ops/s
# Warmup Iteration  12: 9960914.292 ops/s
# Warmup Iteration  13: 9932763.350 ops/s
# Warmup Iteration  14: 9921283.085 ops/s
# Warmup Iteration  15: 9841567.338 ops/s
# Warmup Iteration  16: 9969700.469 ops/s
# Warmup Iteration  17: 9842014.455 ops/s
# Warmup Iteration  18: 9851668.572 ops/s
# Warmup Iteration  19: 9952757.256 ops/s
# Warmup Iteration  20: 9951548.816 ops/s
# Warmup Iteration  21: 9949610.585 ops/s
# Warmup Iteration  22: 9982703.367 ops/s
# Warmup Iteration  23: 9983604.382 ops/s
# Warmup Iteration  24: 9969815.704 ops/s
# Warmup Iteration  25: 9957261.151 ops/s
# Warmup Iteration  26: 9918691.624 ops/s
# Warmup Iteration  27: 9949910.927 ops/s
# Warmup Iteration  28: 9980417.866 ops/s
# Warmup Iteration  29: 9934091.713 ops/s
# Warmup Iteration  30: 9980987.231 ops/s
Iteration   1: 9957006.911 ops/s
Iteration   2: 9939180.612 ops/s
Iteration   3: 9972038.144 ops/s
Iteration   4: 9966485.322 ops/s
Iteration   5: 9944615.167 ops/s
Iteration   6: 9972870.634 ops/s
Iteration   7: 9971302.995 ops/s
Iteration   8: 9974322.615 ops/s
Iteration   9: 9922524.125 ops/s
Iteration  10: 9938585.943 ops/s
Iteration  11: 9935051.793 ops/s
Iteration  12: 9991349.154 ops/s
Iteration  13: 9994246.342 ops/s
Iteration  14: 9932708.590 ops/s
Iteration  15: 9972327.216 ops/s
Iteration  16: 9918814.589 ops/s
Iteration  17: 10002736.187 ops/s
Iteration  18: 9988026.883 ops/s
Iteration  19: 9978621.533 ops/s
Iteration  20: 9918730.049 ops/s
Iteration  21: 9921999.650 ops/s
Iteration  22: 9974760.558 ops/s
Iteration  23: 9950101.152 ops/s
Iteration  24: 9937267.189 ops/s
Iteration  25: 9974819.884 ops/s
Iteration  26: 9961207.052 ops/s
Iteration  27: 9944873.768 ops/s
Iteration  28: 9956872.882 ops/s
Iteration  29: 9956607.816 ops/s
Iteration  30: 9979465.535 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_containsAllIterable":
  9958317.343 ±(99.9%) 15840.738 ops/s [Average]
  (min, avg, max) = (9918730.049, 9958317.343, 10002736.187), stdev = 23709.672
  CI (99.9%): [9942476.605, 9974158.081] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score       Error  Units
UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_containsAllIterable  thrpt   30  9958317.343 ± 15840.738  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_containsAnyArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_containsAnyArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3539523.279 ops/s
# Warmup Iteration   2: 7300298.765 ops/s
# Warmup Iteration   3: 6441548.600 ops/s
# Warmup Iteration   4: 7494456.693 ops/s
# Warmup Iteration   5: 7506475.903 ops/s
# Warmup Iteration   6: 7507316.669 ops/s
# Warmup Iteration   7: 7469791.371 ops/s
# Warmup Iteration   8: 7531463.807 ops/s
# Warmup Iteration   9: 7492602.359 ops/s
# Warmup Iteration  10: 7530226.698 ops/s
# Warmup Iteration  11: 7525051.114 ops/s
# Warmup Iteration  12: 7441121.387 ops/s
# Warmup Iteration  13: 7401911.832 ops/s
# Warmup Iteration  14: 7507507.915 ops/s
# Warmup Iteration  15: 7514382.065 ops/s
# Warmup Iteration  16: 7554806.920 ops/s
# Warmup Iteration  17: 7509993.243 ops/s
# Warmup Iteration  18: 7519220.853 ops/s
# Warmup Iteration  19: 7540073.150 ops/s
# Warmup Iteration  20: 7515133.868 ops/s
# Warmup Iteration  21: 7531929.931 ops/s
# Warmup Iteration  22: 7524018.317 ops/s
# Warmup Iteration  23: 7535384.369 ops/s
# Warmup Iteration  24: 7524280.835 ops/s
# Warmup Iteration  25: 7498628.628 ops/s
# Warmup Iteration  26: 7511449.412 ops/s
# Warmup Iteration  27: 7540916.554 ops/s
# Warmup Iteration  28: 7520775.876 ops/s
# Warmup Iteration  29: 7510034.100 ops/s
# Warmup Iteration  30: 7477421.406 ops/s
Iteration   1: 7525623.260 ops/s
Iteration   2: 7518964.948 ops/s
Iteration   3: 7524577.457 ops/s
Iteration   4: 7515460.660 ops/s
Iteration   5: 7519560.968 ops/s
Iteration   6: 7531607.808 ops/s
Iteration   7: 7530397.759 ops/s
Iteration   8: 7499058.757 ops/s
Iteration   9: 7515969.674 ops/s
Iteration  10: 7537870.775 ops/s
Iteration  11: 7524486.359 ops/s
Iteration  12: 7524915.131 ops/s
Iteration  13: 7524259.794 ops/s
Iteration  14: 7520137.455 ops/s
Iteration  15: 7545646.007 ops/s
Iteration  16: 7505542.899 ops/s
Iteration  17: 7529431.318 ops/s
Iteration  18: 7519429.124 ops/s
Iteration  19: 7517782.692 ops/s
Iteration  20: 7521587.630 ops/s
Iteration  21: 7539914.293 ops/s
Iteration  22: 7520964.544 ops/s
Iteration  23: 7516518.042 ops/s
Iteration  24: 7519108.220 ops/s
Iteration  25: 7534447.668 ops/s
Iteration  26: 7519064.705 ops/s
Iteration  27: 7496858.539 ops/s
Iteration  28: 7491800.931 ops/s
Iteration  29: 7534071.706 ops/s
Iteration  30: 7501742.057 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_containsAnyArray":
  7520893.373 ±(99.9%) 8392.096 ops/s [Average]
  (min, avg, max) = (7491800.931, 7520893.373, 7545646.007), stdev = 12560.895
  CI (99.9%): [7512501.277, 7529285.468] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score      Error  Units
UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_containsAnyArray  thrpt   30  7520893.373 ± 8392.096  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_containsAnyIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_containsAnyIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 623670.158 ops/s
# Warmup Iteration   2: 1028988.678 ops/s
# Warmup Iteration   3: 1158050.348 ops/s
# Warmup Iteration   4: 1148059.058 ops/s
# Warmup Iteration   5: 1155759.338 ops/s
# Warmup Iteration   6: 964848.973 ops/s
# Warmup Iteration   7: 1161351.162 ops/s
# Warmup Iteration   8: 1158769.052 ops/s
# Warmup Iteration   9: 1159865.187 ops/s
# Warmup Iteration  10: 1160576.005 ops/s
# Warmup Iteration  11: 1157875.687 ops/s
# Warmup Iteration  12: 1160514.741 ops/s
# Warmup Iteration  13: 1150130.007 ops/s
# Warmup Iteration  14: 1159505.318 ops/s
# Warmup Iteration  15: 1157460.158 ops/s
# Warmup Iteration  16: 1158316.664 ops/s
# Warmup Iteration  17: 1158283.118 ops/s
# Warmup Iteration  18: 1159886.877 ops/s
# Warmup Iteration  19: 1160773.510 ops/s
# Warmup Iteration  20: 1150534.396 ops/s
# Warmup Iteration  21: 1159735.997 ops/s
# Warmup Iteration  22: 1159558.298 ops/s
# Warmup Iteration  23: 1150219.530 ops/s
# Warmup Iteration  24: 1159531.172 ops/s
# Warmup Iteration  25: 1159633.854 ops/s
# Warmup Iteration  26: 1148294.572 ops/s
# Warmup Iteration  27: 1156281.699 ops/s
# Warmup Iteration  28: 1159199.550 ops/s
# Warmup Iteration  29: 1159109.374 ops/s
# Warmup Iteration  30: 1159484.879 ops/s
Iteration   1: 1160507.418 ops/s
Iteration   2: 1157386.085 ops/s
Iteration   3: 1161659.376 ops/s
Iteration   4: 1158813.767 ops/s
Iteration   5: 1159239.822 ops/s
Iteration   6: 1158877.083 ops/s
Iteration   7: 1160261.997 ops/s
Iteration   8: 1161684.236 ops/s
Iteration   9: 1155154.082 ops/s
Iteration  10: 1158294.221 ops/s
Iteration  11: 1157152.859 ops/s
Iteration  12: 1160608.544 ops/s
Iteration  13: 1155107.406 ops/s
Iteration  14: 1161113.140 ops/s
Iteration  15: 1158055.232 ops/s
Iteration  16: 1160570.475 ops/s
Iteration  17: 1158692.470 ops/s
Iteration  18: 1158938.484 ops/s
Iteration  19: 1159807.966 ops/s
Iteration  20: 1157442.692 ops/s
Iteration  21: 1153849.643 ops/s
Iteration  22: 1158929.392 ops/s
Iteration  23: 1161147.798 ops/s
Iteration  24: 1158063.218 ops/s
Iteration  25: 1160711.081 ops/s
Iteration  26: 1156480.051 ops/s
Iteration  27: 1159956.634 ops/s
Iteration  28: 1158244.820 ops/s
Iteration  29: 1162171.354 ops/s
Iteration  30: 1156730.769 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_containsAnyIterable":
  1158855.070 ±(99.9%) 1390.739 ops/s [Average]
  (min, avg, max) = (1153849.643, 1158855.070, 1162171.354), stdev = 2081.593
  CI (99.9%): [1157464.331, 1160245.810] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score      Error  Units
UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_containsAnyIterable  thrpt   30  1158855.070 ± 1390.739  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_containsNoneArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_containsNoneArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3558320.185 ops/s
# Warmup Iteration   2: 7300113.764 ops/s
# Warmup Iteration   3: 6558985.307 ops/s
# Warmup Iteration   4: 7549591.795 ops/s
# Warmup Iteration   5: 7562586.207 ops/s
# Warmup Iteration   6: 7569330.872 ops/s
# Warmup Iteration   7: 7570468.490 ops/s
# Warmup Iteration   8: 7548191.686 ops/s
# Warmup Iteration   9: 7556710.175 ops/s
# Warmup Iteration  10: 7575835.008 ops/s
# Warmup Iteration  11: 7547849.201 ops/s
# Warmup Iteration  12: 7569893.978 ops/s
# Warmup Iteration  13: 7567403.867 ops/s
# Warmup Iteration  14: 7556969.995 ops/s
# Warmup Iteration  15: 7572993.337 ops/s
# Warmup Iteration  16: 7504206.861 ops/s
# Warmup Iteration  17: 7548821.381 ops/s
# Warmup Iteration  18: 7560037.808 ops/s
# Warmup Iteration  19: 7554832.861 ops/s
# Warmup Iteration  20: 7552773.585 ops/s
# Warmup Iteration  21: 7473063.512 ops/s
# Warmup Iteration  22: 7493752.325 ops/s
# Warmup Iteration  23: 7568162.275 ops/s
# Warmup Iteration  24: 7567769.561 ops/s
# Warmup Iteration  25: 7547627.205 ops/s
# Warmup Iteration  26: 7551331.899 ops/s
# Warmup Iteration  27: 7556325.969 ops/s
# Warmup Iteration  28: 7555591.628 ops/s
# Warmup Iteration  29: 7496102.428 ops/s
# Warmup Iteration  30: 7570882.180 ops/s
Iteration   1: 7545522.700 ops/s
Iteration   2: 7555616.994 ops/s
Iteration   3: 7553217.515 ops/s
Iteration   4: 7551197.837 ops/s
Iteration   5: 7575909.895 ops/s
Iteration   6: 7573242.292 ops/s
Iteration   7: 7557186.531 ops/s
Iteration   8: 7580352.784 ops/s
Iteration   9: 7557080.855 ops/s
Iteration  10: 7559516.118 ops/s
Iteration  11: 7560311.191 ops/s
Iteration  12: 7437811.463 ops/s
Iteration  13: 7546027.673 ops/s
Iteration  14: 7577371.540 ops/s
Iteration  15: 7567918.250 ops/s
Iteration  16: 7580560.853 ops/s
Iteration  17: 7584484.818 ops/s
Iteration  18: 7532829.313 ops/s
Iteration  19: 7546674.912 ops/s
Iteration  20: 7577488.603 ops/s
Iteration  21: 7468570.336 ops/s
Iteration  22: 7579843.154 ops/s
Iteration  23: 7565668.404 ops/s
Iteration  24: 7550385.037 ops/s
Iteration  25: 7564379.082 ops/s
Iteration  26: 7450380.377 ops/s
Iteration  27: 7577514.863 ops/s
Iteration  28: 7546074.336 ops/s
Iteration  29: 7555051.896 ops/s
Iteration  30: 7570454.843 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_containsNoneArray":
  7551621.482 ±(99.9%) 24307.730 ops/s [Average]
  (min, avg, max) = (7437811.463, 7551621.482, 7584484.818), stdev = 36382.669
  CI (99.9%): [7527313.752, 7575929.212] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_containsNoneArray  thrpt   30  7551621.482 ± 24307.730  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_containsNoneIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_containsNoneIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 573879.725 ops/s
# Warmup Iteration   2: 914120.092 ops/s
# Warmup Iteration   3: 1048859.959 ops/s
# Warmup Iteration   4: 1049207.395 ops/s
# Warmup Iteration   5: 1040366.959 ops/s
# Warmup Iteration   6: 906856.197 ops/s
# Warmup Iteration   7: 1007907.395 ops/s
# Warmup Iteration   8: 1049620.992 ops/s
# Warmup Iteration   9: 1049573.011 ops/s
# Warmup Iteration  10: 1049547.274 ops/s
# Warmup Iteration  11: 1050573.142 ops/s
# Warmup Iteration  12: 1048836.564 ops/s
# Warmup Iteration  13: 1049992.076 ops/s
# Warmup Iteration  14: 1049774.406 ops/s
# Warmup Iteration  15: 1051601.091 ops/s
# Warmup Iteration  16: 1048651.116 ops/s
# Warmup Iteration  17: 1049969.872 ops/s
# Warmup Iteration  18: 1049012.181 ops/s
# Warmup Iteration  19: 1049562.640 ops/s
# Warmup Iteration  20: 1047964.548 ops/s
# Warmup Iteration  21: 1035043.362 ops/s
# Warmup Iteration  22: 1049394.722 ops/s
# Warmup Iteration  23: 1048275.119 ops/s
# Warmup Iteration  24: 1048487.746 ops/s
# Warmup Iteration  25: 1049525.524 ops/s
# Warmup Iteration  26: 1050572.700 ops/s
# Warmup Iteration  27: 1048689.640 ops/s
# Warmup Iteration  28: 1041358.687 ops/s
# Warmup Iteration  29: 1050664.364 ops/s
# Warmup Iteration  30: 1050447.307 ops/s
Iteration   1: 1050864.363 ops/s
Iteration   2: 1047002.610 ops/s
Iteration   3: 1051250.356 ops/s
Iteration   4: 1049379.073 ops/s
Iteration   5: 1050497.797 ops/s
Iteration   6: 1047291.915 ops/s
Iteration   7: 1045374.063 ops/s
Iteration   8: 1051392.618 ops/s
Iteration   9: 1049361.938 ops/s
Iteration  10: 1051507.752 ops/s
Iteration  11: 1047207.827 ops/s
Iteration  12: 1051306.783 ops/s
Iteration  13: 1049378.421 ops/s
Iteration  14: 1051585.006 ops/s
Iteration  15: 1049869.934 ops/s
Iteration  16: 1052345.296 ops/s
Iteration  17: 1051140.396 ops/s
Iteration  18: 1049116.383 ops/s
Iteration  19: 1045028.140 ops/s
Iteration  20: 1050546.156 ops/s
Iteration  21: 1048140.273 ops/s
Iteration  22: 1052034.803 ops/s
Iteration  23: 1048229.915 ops/s
Iteration  24: 1051892.254 ops/s
Iteration  25: 1048165.007 ops/s
Iteration  26: 1052235.163 ops/s
Iteration  27: 1047037.971 ops/s
Iteration  28: 1048472.030 ops/s
Iteration  29: 1047931.082 ops/s
Iteration  30: 1050772.058 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_containsNoneIterable":
  1049545.246 ±(99.9%) 1374.590 ops/s [Average]
  (min, avg, max) = (1045028.140, 1049545.246, 1052345.296), stdev = 2057.422
  CI (99.9%): [1048170.656, 1050919.837] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score      Error  Units
UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_containsNoneIterable  thrpt   30  1049545.246 ± 1374.590  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1332965.603 ops/s
# Warmup Iteration   2: 3018985.825 ops/s
# Warmup Iteration   3: 3050495.394 ops/s
# Warmup Iteration   4: 2518078.814 ops/s
# Warmup Iteration   5: 3041380.516 ops/s
# Warmup Iteration   6: 3046758.916 ops/s
# Warmup Iteration   7: 3038275.405 ops/s
# Warmup Iteration   8: 3047887.001 ops/s
# Warmup Iteration   9: 3042650.976 ops/s
# Warmup Iteration  10: 3041366.630 ops/s
# Warmup Iteration  11: 3044638.675 ops/s
# Warmup Iteration  12: 3024448.527 ops/s
# Warmup Iteration  13: 3041138.628 ops/s
# Warmup Iteration  14: 3042292.278 ops/s
# Warmup Iteration  15: 3028296.668 ops/s
# Warmup Iteration  16: 3045790.229 ops/s
# Warmup Iteration  17: 3045182.587 ops/s
# Warmup Iteration  18: 3038878.580 ops/s
# Warmup Iteration  19: 3047293.448 ops/s
# Warmup Iteration  20: 3043859.166 ops/s
# Warmup Iteration  21: 3048599.834 ops/s
# Warmup Iteration  22: 3043808.638 ops/s
# Warmup Iteration  23: 3042541.655 ops/s
# Warmup Iteration  24: 3050907.766 ops/s
# Warmup Iteration  25: 3042944.719 ops/s
# Warmup Iteration  26: 3028708.653 ops/s
# Warmup Iteration  27: 3043248.894 ops/s
# Warmup Iteration  28: 3045814.422 ops/s
# Warmup Iteration  29: 3043101.777 ops/s
# Warmup Iteration  30: 3049129.671 ops/s
Iteration   1: 3043484.610 ops/s
Iteration   2: 3044019.405 ops/s
Iteration   3: 3046991.164 ops/s
Iteration   4: 3046296.749 ops/s
Iteration   5: 2997846.244 ops/s
Iteration   6: 3050517.820 ops/s
Iteration   7: 3036899.221 ops/s
Iteration   8: 3039880.545 ops/s
Iteration   9: 3052607.949 ops/s
Iteration  10: 3044020.171 ops/s
Iteration  11: 3045447.332 ops/s
Iteration  12: 3048943.162 ops/s
Iteration  13: 3049297.585 ops/s
Iteration  14: 3050029.931 ops/s
Iteration  15: 3047438.195 ops/s
Iteration  16: 3047961.679 ops/s
Iteration  17: 3046721.753 ops/s
Iteration  18: 3041874.620 ops/s
Iteration  19: 3034672.199 ops/s
Iteration  20: 3039475.424 ops/s
Iteration  21: 3051326.167 ops/s
Iteration  22: 3040349.209 ops/s
Iteration  23: 3041522.735 ops/s
Iteration  24: 3044089.771 ops/s
Iteration  25: 3050663.470 ops/s
Iteration  26: 3033423.527 ops/s
Iteration  27: 3040182.974 ops/s
Iteration  28: 3044494.176 ops/s
Iteration  29: 3045636.802 ops/s
Iteration  30: 3040521.029 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_count":
  3042887.854 ±(99.9%) 6551.316 ops/s [Average]
  (min, avg, max) = (2997846.244, 3042887.854, 3052607.949), stdev = 9805.702
  CI (99.9%): [3036336.538, 3049439.170] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_count  thrpt   30  3042887.854 ± 6551.316  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2397367.758 ops/s
# Warmup Iteration   2: 5309799.110 ops/s
# Warmup Iteration   3: 5075405.277 ops/s
# Warmup Iteration   4: 4901956.660 ops/s
# Warmup Iteration   5: 5428956.719 ops/s
# Warmup Iteration   6: 5428186.998 ops/s
# Warmup Iteration   7: 5441774.212 ops/s
# Warmup Iteration   8: 5412269.329 ops/s
# Warmup Iteration   9: 5428773.650 ops/s
# Warmup Iteration  10: 5435758.563 ops/s
# Warmup Iteration  11: 5429699.769 ops/s
# Warmup Iteration  12: 5438761.825 ops/s
# Warmup Iteration  13: 5435918.519 ops/s
# Warmup Iteration  14: 5392807.137 ops/s
# Warmup Iteration  15: 5445904.446 ops/s
# Warmup Iteration  16: 5430973.524 ops/s
# Warmup Iteration  17: 5373830.958 ops/s
# Warmup Iteration  18: 5435553.921 ops/s
# Warmup Iteration  19: 5419885.941 ops/s
# Warmup Iteration  20: 5429131.363 ops/s
# Warmup Iteration  21: 5342888.895 ops/s
# Warmup Iteration  22: 5425637.784 ops/s
# Warmup Iteration  23: 5434036.370 ops/s
# Warmup Iteration  24: 5425679.917 ops/s
# Warmup Iteration  25: 5425481.274 ops/s
# Warmup Iteration  26: 5426715.989 ops/s
# Warmup Iteration  27: 5431126.839 ops/s
# Warmup Iteration  28: 5425326.726 ops/s
# Warmup Iteration  29: 5416447.511 ops/s
# Warmup Iteration  30: 5416825.912 ops/s
Iteration   1: 5439861.390 ops/s
Iteration   2: 5436348.990 ops/s
Iteration   3: 5437324.351 ops/s
Iteration   4: 5433095.634 ops/s
Iteration   5: 5426032.606 ops/s
Iteration   6: 5430160.516 ops/s
Iteration   7: 5420275.766 ops/s
Iteration   8: 5449299.664 ops/s
Iteration   9: 5289001.317 ops/s
Iteration  10: 5429849.515 ops/s
Iteration  11: 5422737.459 ops/s
Iteration  12: 5428348.029 ops/s
Iteration  13: 5423246.385 ops/s
Iteration  14: 5421693.389 ops/s
Iteration  15: 5418120.915 ops/s
Iteration  16: 5420498.904 ops/s
Iteration  17: 5417965.991 ops/s
Iteration  18: 5426684.983 ops/s
Iteration  19: 5425481.328 ops/s
Iteration  20: 5414743.328 ops/s
Iteration  21: 5443669.556 ops/s
Iteration  22: 5414186.643 ops/s
Iteration  23: 5442597.420 ops/s
Iteration  24: 5438094.545 ops/s
Iteration  25: 5428531.677 ops/s
Iteration  26: 5435861.539 ops/s
Iteration  27: 5424994.179 ops/s
Iteration  28: 5434537.066 ops/s
Iteration  29: 5430384.614 ops/s
Iteration  30: 5429607.516 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_detectIfNone":
  5424441.174 ±(99.9%) 18060.486 ops/s [Average]
  (min, avg, max) = (5289001.317, 5424441.174, 5449299.664), stdev = 27032.087
  CI (99.9%): [5406380.688, 5442501.660] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_detectIfNone  thrpt   30  5424441.174 ± 18060.486  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2309115.322 ops/s
# Warmup Iteration   2: 7071085.301 ops/s
# Warmup Iteration   3: 5979066.545 ops/s
# Warmup Iteration   4: 7134719.858 ops/s
# Warmup Iteration   5: 7132814.331 ops/s
# Warmup Iteration   6: 7136685.697 ops/s
# Warmup Iteration   7: 7134545.878 ops/s
# Warmup Iteration   8: 7100610.175 ops/s
# Warmup Iteration   9: 7132952.478 ops/s
# Warmup Iteration  10: 7128853.689 ops/s
# Warmup Iteration  11: 7082853.229 ops/s
# Warmup Iteration  12: 7143312.061 ops/s
# Warmup Iteration  13: 7143415.773 ops/s
# Warmup Iteration  14: 7106579.756 ops/s
# Warmup Iteration  15: 7139423.666 ops/s
# Warmup Iteration  16: 7118417.239 ops/s
# Warmup Iteration  17: 7144033.443 ops/s
# Warmup Iteration  18: 7137263.505 ops/s
# Warmup Iteration  19: 7148778.924 ops/s
# Warmup Iteration  20: 7143585.285 ops/s
# Warmup Iteration  21: 7151663.536 ops/s
# Warmup Iteration  22: 7149659.483 ops/s
# Warmup Iteration  23: 7125780.618 ops/s
# Warmup Iteration  24: 7138747.490 ops/s
# Warmup Iteration  25: 7088644.243 ops/s
# Warmup Iteration  26: 7139678.036 ops/s
# Warmup Iteration  27: 7092834.428 ops/s
# Warmup Iteration  28: 7144038.877 ops/s
# Warmup Iteration  29: 7158423.560 ops/s
# Warmup Iteration  30: 7144966.205 ops/s
Iteration   1: 7003238.692 ops/s
Iteration   2: 7120524.354 ops/s
Iteration   3: 7168398.067 ops/s
Iteration   4: 7144216.046 ops/s
Iteration   5: 7039314.120 ops/s
Iteration   6: 7153814.502 ops/s
Iteration   7: 7116562.777 ops/s
Iteration   8: 7149489.894 ops/s
Iteration   9: 7121747.054 ops/s
Iteration  10: 7154392.504 ops/s
Iteration  11: 7134595.211 ops/s
Iteration  12: 7150300.489 ops/s
Iteration  13: 7143236.699 ops/s
Iteration  14: 7155950.494 ops/s
Iteration  15: 7141792.060 ops/s
Iteration  16: 7165655.481 ops/s
Iteration  17: 7111825.242 ops/s
Iteration  18: 7132460.792 ops/s
Iteration  19: 7140109.017 ops/s
Iteration  20: 7151033.145 ops/s
Iteration  21: 7157124.595 ops/s
Iteration  22: 7140750.940 ops/s
Iteration  23: 7168683.846 ops/s
Iteration  24: 7115151.465 ops/s
Iteration  25: 7144983.613 ops/s
Iteration  26: 7161321.814 ops/s
Iteration  27: 7137522.038 ops/s
Iteration  28: 7142513.553 ops/s
Iteration  29: 7152122.201 ops/s
Iteration  30: 7125547.969 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_forEach":
  7134812.622 ±(99.9%) 23284.626 ops/s [Average]
  (min, avg, max) = (7003238.692, 7134812.622, 7168683.846), stdev = 34851.334
  CI (99.9%): [7111527.997, 7158097.248] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_forEach  thrpt   30  7134812.622 ± 23284.626  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12007408.774 ops/s
# Warmup Iteration   2: 22621595.692 ops/s
# Warmup Iteration   3: 21790258.417 ops/s
# Warmup Iteration   4: 25023992.167 ops/s
# Warmup Iteration   5: 25035072.396 ops/s
# Warmup Iteration   6: 24945983.101 ops/s
# Warmup Iteration   7: 24922464.484 ops/s
# Warmup Iteration   8: 24926523.152 ops/s
# Warmup Iteration   9: 25006580.849 ops/s
# Warmup Iteration  10: 24969250.331 ops/s
# Warmup Iteration  11: 24977032.093 ops/s
# Warmup Iteration  12: 25027484.356 ops/s
# Warmup Iteration  13: 25010404.056 ops/s
# Warmup Iteration  14: 24928933.803 ops/s
# Warmup Iteration  15: 24809477.179 ops/s
# Warmup Iteration  16: 24881236.462 ops/s
# Warmup Iteration  17: 25070343.724 ops/s
# Warmup Iteration  18: 24956377.902 ops/s
# Warmup Iteration  19: 25019710.876 ops/s
# Warmup Iteration  20: 24725173.355 ops/s
# Warmup Iteration  21: 24978052.813 ops/s
# Warmup Iteration  22: 25071465.458 ops/s
# Warmup Iteration  23: 25004447.114 ops/s
# Warmup Iteration  24: 24845880.311 ops/s
# Warmup Iteration  25: 24968806.248 ops/s
# Warmup Iteration  26: 24846999.070 ops/s
# Warmup Iteration  27: 24969575.051 ops/s
# Warmup Iteration  28: 25039325.374 ops/s
# Warmup Iteration  29: 24959061.964 ops/s
# Warmup Iteration  30: 24928162.452 ops/s
Iteration   1: 25050327.816 ops/s
Iteration   2: 24957430.670 ops/s
Iteration   3: 24863919.203 ops/s
Iteration   4: 24924079.600 ops/s
Iteration   5: 25003029.306 ops/s
Iteration   6: 25081836.130 ops/s
Iteration   7: 24994512.747 ops/s
Iteration   8: 24803147.135 ops/s
Iteration   9: 25004081.518 ops/s
Iteration  10: 25005080.224 ops/s
Iteration  11: 24967052.393 ops/s
Iteration  12: 25068443.383 ops/s
Iteration  13: 24927721.324 ops/s
Iteration  14: 24655440.603 ops/s
Iteration  15: 24901221.966 ops/s
Iteration  16: 24957191.172 ops/s
Iteration  17: 25095482.086 ops/s
Iteration  18: 25051488.241 ops/s
Iteration  19: 25031269.254 ops/s
Iteration  20: 24938191.237 ops/s
Iteration  21: 24859461.102 ops/s
Iteration  22: 25013356.698 ops/s
Iteration  23: 24992600.520 ops/s
Iteration  24: 25008411.685 ops/s
Iteration  25: 24973715.105 ops/s
Iteration  26: 25069334.625 ops/s
Iteration  27: 25113448.026 ops/s
Iteration  28: 25094018.019 ops/s
Iteration  29: 24967406.429 ops/s
Iteration  30: 24897378.719 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_injectInto":
  24975669.231 ±(99.9%) 64838.290 ops/s [Average]
  (min, avg, max) = (24655440.603, 24975669.231, 25113448.026), stdev = 97046.907
  CI (99.9%): [24910830.941, 25040507.521] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt         Score       Error  Units
UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_injectInto  thrpt   30  24975669.231 ± 64838.290  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1358945.983 ops/s
# Warmup Iteration   2: 2128437.356 ops/s
# Warmup Iteration   3: 2403261.781 ops/s
# Warmup Iteration   4: 2407498.302 ops/s
# Warmup Iteration   5: 2416725.731 ops/s
# Warmup Iteration   6: 2409803.339 ops/s
# Warmup Iteration   7: 2416190.173 ops/s
# Warmup Iteration   8: 2400922.513 ops/s
# Warmup Iteration   9: 2407768.522 ops/s
# Warmup Iteration  10: 2416066.566 ops/s
# Warmup Iteration  11: 2421490.912 ops/s
# Warmup Iteration  12: 2414467.065 ops/s
# Warmup Iteration  13: 2423593.144 ops/s
# Warmup Iteration  14: 2404425.168 ops/s
# Warmup Iteration  15: 2410988.411 ops/s
# Warmup Iteration  16: 2418898.738 ops/s
# Warmup Iteration  17: 2485040.362 ops/s
# Warmup Iteration  18: 2485923.848 ops/s
# Warmup Iteration  19: 2472432.542 ops/s
# Warmup Iteration  20: 2485275.107 ops/s
# Warmup Iteration  21: 2487479.394 ops/s
# Warmup Iteration  22: 2478095.006 ops/s
# Warmup Iteration  23: 2489096.184 ops/s
# Warmup Iteration  24: 2487251.285 ops/s
# Warmup Iteration  25: 2477165.294 ops/s
# Warmup Iteration  26: 2487633.328 ops/s
# Warmup Iteration  27: 2484848.421 ops/s
# Warmup Iteration  28: 2477790.452 ops/s
# Warmup Iteration  29: 2478194.841 ops/s
# Warmup Iteration  30: 2486865.937 ops/s
Iteration   1: 2472268.778 ops/s
Iteration   2: 2474228.951 ops/s
Iteration   3: 2474033.013 ops/s
Iteration   4: 2492197.194 ops/s
Iteration   5: 2485710.204 ops/s
Iteration   6: 2483778.350 ops/s
Iteration   7: 2481407.655 ops/s
Iteration   8: 2461142.440 ops/s
Iteration   9: 2486368.771 ops/s
Iteration  10: 2480836.442 ops/s
Iteration  11: 2479615.872 ops/s
Iteration  12: 2470468.411 ops/s
Iteration  13: 2471119.315 ops/s
Iteration  14: 2480336.528 ops/s
Iteration  15: 2465974.263 ops/s
Iteration  16: 2480657.790 ops/s
Iteration  17: 2488697.404 ops/s
Iteration  18: 2455908.931 ops/s
Iteration  19: 2473950.256 ops/s
Iteration  20: 2435297.308 ops/s
Iteration  21: 2490864.917 ops/s
Iteration  22: 2488065.199 ops/s
Iteration  23: 2479428.731 ops/s
Iteration  24: 2474018.496 ops/s
Iteration  25: 2486837.896 ops/s
Iteration  26: 2491745.265 ops/s
Iteration  27: 2499706.746 ops/s
Iteration  28: 2487318.947 ops/s
Iteration  29: 2481270.250 ops/s
Iteration  30: 2474321.781 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_isEmpty":
  2478252.537 ±(99.9%) 8386.447 ops/s [Average]
  (min, avg, max) = (2435297.308, 2478252.537, 2499706.746), stdev = 12552.440
  CI (99.9%): [2469866.090, 2486638.984] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_isEmpty  thrpt   30  2478252.537 ± 8386.447  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_iterator_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_iterator_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 663142.225 ops/s
# Warmup Iteration   2: 680785.239 ops/s
# Warmup Iteration   3: 841988.651 ops/s
# Warmup Iteration   4: 879636.121 ops/s
# Warmup Iteration   5: 874781.014 ops/s
# Warmup Iteration   6: 880764.466 ops/s
# Warmup Iteration   7: 882057.694 ops/s
# Warmup Iteration   8: 874302.658 ops/s
# Warmup Iteration   9: 879152.986 ops/s
# Warmup Iteration  10: 871021.009 ops/s
# Warmup Iteration  11: 882309.532 ops/s
# Warmup Iteration  12: 881588.869 ops/s
# Warmup Iteration  13: 733717.052 ops/s
# Warmup Iteration  14: 878306.527 ops/s
# Warmup Iteration  15: 870663.217 ops/s
# Warmup Iteration  16: 875178.357 ops/s
# Warmup Iteration  17: 937338.085 ops/s
# Warmup Iteration  18: 936388.515 ops/s
# Warmup Iteration  19: 939039.495 ops/s
# Warmup Iteration  20: 935205.162 ops/s
# Warmup Iteration  21: 934191.312 ops/s
# Warmup Iteration  22: 934782.737 ops/s
# Warmup Iteration  23: 935816.636 ops/s
# Warmup Iteration  24: 934635.368 ops/s
# Warmup Iteration  25: 936971.251 ops/s
# Warmup Iteration  26: 935769.809 ops/s
# Warmup Iteration  27: 937480.483 ops/s
# Warmup Iteration  28: 929442.412 ops/s
# Warmup Iteration  29: 936146.315 ops/s
# Warmup Iteration  30: 935532.680 ops/s
Iteration   1: 936195.694 ops/s
Iteration   2: 932384.815 ops/s
Iteration   3: 939824.434 ops/s
Iteration   4: 936430.177 ops/s
Iteration   5: 938135.252 ops/s
Iteration   6: 935093.622 ops/s
Iteration   7: 936488.976 ops/s
Iteration   8: 936462.468 ops/s
Iteration   9: 934806.136 ops/s
Iteration  10: 934220.179 ops/s
Iteration  11: 938036.674 ops/s
Iteration  12: 937145.198 ops/s
Iteration  13: 934660.906 ops/s
Iteration  14: 936049.287 ops/s
Iteration  15: 937501.562 ops/s
Iteration  16: 935217.378 ops/s
Iteration  17: 935409.436 ops/s
Iteration  18: 938384.680 ops/s
Iteration  19: 931953.134 ops/s
Iteration  20: 921591.356 ops/s
Iteration  21: 935815.396 ops/s
Iteration  22: 934848.604 ops/s
Iteration  23: 937354.476 ops/s
Iteration  24: 936400.175 ops/s
Iteration  25: 933742.495 ops/s
Iteration  26: 934504.255 ops/s
Iteration  27: 936635.541 ops/s
Iteration  28: 935604.306 ops/s
Iteration  29: 917184.627 ops/s
Iteration  30: 936702.512 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_iterator_throws":
  934826.125 ±(99.9%) 3046.333 ops/s [Average]
  (min, avg, max) = (917184.627, 934826.125, 939824.434), stdev = 4559.609
  CI (99.9%): [931779.792, 937872.458] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_iterator_throws  thrpt   30  934826.125 ± 3046.333  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 731348.278 ops/s
# Warmup Iteration   2: 756270.873 ops/s
# Warmup Iteration   3: 1012747.306 ops/s
# Warmup Iteration   4: 1006682.840 ops/s
# Warmup Iteration   5: 1007656.606 ops/s
# Warmup Iteration   6: 1008609.547 ops/s
# Warmup Iteration   7: 1006126.658 ops/s
# Warmup Iteration   8: 1003612.076 ops/s
# Warmup Iteration   9: 1009275.685 ops/s
# Warmup Iteration  10: 1007741.042 ops/s
# Warmup Iteration  11: 888419.304 ops/s
# Warmup Iteration  12: 961791.168 ops/s
# Warmup Iteration  13: 1006485.743 ops/s
# Warmup Iteration  14: 1006041.217 ops/s
# Warmup Iteration  15: 1009565.452 ops/s
# Warmup Iteration  16: 1006392.190 ops/s
# Warmup Iteration  17: 1068412.601 ops/s
# Warmup Iteration  18: 1072102.070 ops/s
# Warmup Iteration  19: 1070228.564 ops/s
# Warmup Iteration  20: 1072951.331 ops/s
# Warmup Iteration  21: 1071773.073 ops/s
# Warmup Iteration  22: 1075621.126 ops/s
# Warmup Iteration  23: 1073878.840 ops/s
# Warmup Iteration  24: 1075004.140 ops/s
# Warmup Iteration  25: 1075567.226 ops/s
# Warmup Iteration  26: 1075426.703 ops/s
# Warmup Iteration  27: 1075266.250 ops/s
# Warmup Iteration  28: 1073279.240 ops/s
# Warmup Iteration  29: 1074119.035 ops/s
# Warmup Iteration  30: 1073361.357 ops/s
Iteration   1: 1073829.127 ops/s
Iteration   2: 1070688.179 ops/s
Iteration   3: 1071621.624 ops/s
Iteration   4: 1073990.651 ops/s
Iteration   5: 1074714.398 ops/s
Iteration   6: 1072789.452 ops/s
Iteration   7: 1076960.226 ops/s
Iteration   8: 1075201.879 ops/s
Iteration   9: 1073909.532 ops/s
Iteration  10: 1075168.836 ops/s
Iteration  11: 1073795.025 ops/s
Iteration  12: 1073488.387 ops/s
Iteration  13: 1072976.882 ops/s
Iteration  14: 1071724.225 ops/s
Iteration  15: 1071107.248 ops/s
Iteration  16: 1072130.107 ops/s
Iteration  17: 1074150.888 ops/s
Iteration  18: 1056095.075 ops/s
Iteration  19: 1076176.884 ops/s
Iteration  20: 1071424.472 ops/s
Iteration  21: 1069419.343 ops/s
Iteration  22: 1076282.873 ops/s
Iteration  23: 1073822.129 ops/s
Iteration  24: 1074361.308 ops/s
Iteration  25: 1071110.222 ops/s
Iteration  26: 1077455.674 ops/s
Iteration  27: 1074430.597 ops/s
Iteration  28: 1071696.164 ops/s
Iteration  29: 1073549.844 ops/s
Iteration  30: 1076287.282 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList":
  1073011.951 ±(99.9%) 2508.688 ops/s [Average]
  (min, avg, max) = (1056095.075, 1073011.951, 1077455.674), stdev = 3754.886
  CI (99.9%): [1070503.263, 1075520.639] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt        Score      Error  Units
UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList  thrpt   30  1073011.951 ± 2508.688  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 653549.822 ops/s
# Warmup Iteration   2: 674583.290 ops/s
# Warmup Iteration   3: 865999.488 ops/s
# Warmup Iteration   4: 886862.317 ops/s
# Warmup Iteration   5: 885597.254 ops/s
# Warmup Iteration   6: 887412.660 ops/s
# Warmup Iteration   7: 887077.073 ops/s
# Warmup Iteration   8: 889304.445 ops/s
# Warmup Iteration   9: 889486.803 ops/s
# Warmup Iteration  10: 886957.344 ops/s
# Warmup Iteration  11: 890377.112 ops/s
# Warmup Iteration  12: 759861.658 ops/s
# Warmup Iteration  13: 866687.652 ops/s
# Warmup Iteration  14: 888411.670 ops/s
# Warmup Iteration  15: 890176.336 ops/s
# Warmup Iteration  16: 889836.426 ops/s
# Warmup Iteration  17: 938978.193 ops/s
# Warmup Iteration  18: 939569.037 ops/s
# Warmup Iteration  19: 940192.087 ops/s
# Warmup Iteration  20: 933842.301 ops/s
# Warmup Iteration  21: 937803.584 ops/s
# Warmup Iteration  22: 937443.723 ops/s
# Warmup Iteration  23: 940162.176 ops/s
# Warmup Iteration  24: 939718.212 ops/s
# Warmup Iteration  25: 940928.660 ops/s
# Warmup Iteration  26: 937044.143 ops/s
# Warmup Iteration  27: 937358.583 ops/s
# Warmup Iteration  28: 939650.751 ops/s
# Warmup Iteration  29: 938974.838 ops/s
# Warmup Iteration  30: 937863.735 ops/s
Iteration   1: 938968.196 ops/s
Iteration   2: 940629.954 ops/s
Iteration   3: 940297.758 ops/s
Iteration   4: 942822.373 ops/s
Iteration   5: 939336.364 ops/s
Iteration   6: 941784.712 ops/s
Iteration   7: 939380.522 ops/s
Iteration   8: 938360.345 ops/s
Iteration   9: 936258.475 ops/s
Iteration  10: 941223.682 ops/s
Iteration  11: 942359.967 ops/s
Iteration  12: 942640.892 ops/s
Iteration  13: 938159.480 ops/s
Iteration  14: 941422.646 ops/s
Iteration  15: 939417.401 ops/s
Iteration  16: 936362.940 ops/s
Iteration  17: 936879.027 ops/s
Iteration  18: 943142.408 ops/s
Iteration  19: 939534.279 ops/s
Iteration  20: 936258.634 ops/s
Iteration  21: 939564.874 ops/s
Iteration  22: 942834.595 ops/s
Iteration  23: 943597.321 ops/s
Iteration  24: 937383.778 ops/s
Iteration  25: 942955.958 ops/s
Iteration  26: 938851.603 ops/s
Iteration  27: 937022.271 ops/s
Iteration  28: 923429.118 ops/s
Iteration  29: 942047.717 ops/s
Iteration  30: 939964.420 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection":
  939429.724 ±(99.9%) 2521.393 ops/s [Average]
  (min, avg, max) = (923429.118, 939429.724, 943597.321), stdev = 3773.903
  CI (99.9%): [936908.331, 941951.117] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                        Mode  Cnt       Score      Error  Units
UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection  thrpt   30  939429.724 ± 2521.393  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 168199255.081 ops/s
# Warmup Iteration   2: 299090395.463 ops/s
# Warmup Iteration   3: 271721645.647 ops/s
# Warmup Iteration   4: 312087508.977 ops/s
# Warmup Iteration   5: 311539799.349 ops/s
# Warmup Iteration   6: 312153243.768 ops/s
# Warmup Iteration   7: 312744648.281 ops/s
# Warmup Iteration   8: 312039455.809 ops/s
# Warmup Iteration   9: 311855150.508 ops/s
# Warmup Iteration  10: 312023256.839 ops/s
# Warmup Iteration  11: 311614049.916 ops/s
# Warmup Iteration  12: 310430682.120 ops/s
# Warmup Iteration  13: 311724263.973 ops/s
# Warmup Iteration  14: 310646845.554 ops/s
# Warmup Iteration  15: 312076956.047 ops/s
# Warmup Iteration  16: 312596995.208 ops/s
# Warmup Iteration  17: 310672919.169 ops/s
# Warmup Iteration  18: 311627827.024 ops/s
# Warmup Iteration  19: 310781601.423 ops/s
# Warmup Iteration  20: 311167330.503 ops/s
# Warmup Iteration  21: 311489739.206 ops/s
# Warmup Iteration  22: 310564026.498 ops/s
# Warmup Iteration  23: 311796680.335 ops/s
# Warmup Iteration  24: 311323184.691 ops/s
# Warmup Iteration  25: 311349594.713 ops/s
# Warmup Iteration  26: 311405825.154 ops/s
# Warmup Iteration  27: 310400256.029 ops/s
# Warmup Iteration  28: 311252247.400 ops/s
# Warmup Iteration  29: 311440175.323 ops/s
# Warmup Iteration  30: 310991127.736 ops/s
Iteration   1: 310317924.464 ops/s
Iteration   2: 312085655.989 ops/s
Iteration   3: 312549183.634 ops/s
Iteration   4: 313092839.281 ops/s
Iteration   5: 311937731.963 ops/s
Iteration   6: 309940447.965 ops/s
Iteration   7: 310328066.699 ops/s
Iteration   8: 310453348.945 ops/s
Iteration   9: 311835765.078 ops/s
Iteration  10: 308961535.816 ops/s
Iteration  11: 310604939.439 ops/s
Iteration  12: 311062666.686 ops/s
Iteration  13: 310876849.344 ops/s
Iteration  14: 311986727.258 ops/s
Iteration  15: 308976126.875 ops/s
Iteration  16: 312230256.555 ops/s
Iteration  17: 308966138.261 ops/s
Iteration  18: 311054921.421 ops/s
Iteration  19: 311222437.872 ops/s
Iteration  20: 312012036.837 ops/s
Iteration  21: 309138272.240 ops/s
Iteration  22: 310153420.771 ops/s
Iteration  23: 310942660.585 ops/s
Iteration  24: 310508646.516 ops/s
Iteration  25: 311861592.962 ops/s
Iteration  26: 311338621.694 ops/s
Iteration  27: 309019139.609 ops/s
Iteration  28: 310433453.600 ops/s
Iteration  29: 310262208.500 ops/s
Iteration  30: 311808117.873 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove":
  310865391.158 ±(99.9%) 766647.281 ops/s [Average]
  (min, avg, max) = (308961535.816, 310865391.158, 313092839.281), stdev = 1147481.645
  CI (99.9%): [310098743.877, 311632038.438] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                       Mode  Cnt          Score        Error  Units
UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove  thrpt   30  310865391.158 ± 766647.281  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 689696.659 ops/s
# Warmup Iteration   2: 787855.029 ops/s
# Warmup Iteration   3: 1006776.429 ops/s
# Warmup Iteration   4: 1005737.561 ops/s
# Warmup Iteration   5: 1007339.271 ops/s
# Warmup Iteration   6: 1007132.352 ops/s
# Warmup Iteration   7: 1006194.958 ops/s
# Warmup Iteration   8: 1007838.006 ops/s
# Warmup Iteration   9: 955400.393 ops/s
# Warmup Iteration  10: 885616.620 ops/s
# Warmup Iteration  11: 1008449.054 ops/s
# Warmup Iteration  12: 1007517.578 ops/s
# Warmup Iteration  13: 1002664.272 ops/s
# Warmup Iteration  14: 998867.747 ops/s
# Warmup Iteration  15: 999490.487 ops/s
# Warmup Iteration  16: 1002057.446 ops/s
# Warmup Iteration  17: 1067532.609 ops/s
# Warmup Iteration  18: 1066174.078 ops/s
# Warmup Iteration  19: 1067995.281 ops/s
# Warmup Iteration  20: 1068581.222 ops/s
# Warmup Iteration  21: 1058360.971 ops/s
# Warmup Iteration  22: 1067847.149 ops/s
# Warmup Iteration  23: 1066603.674 ops/s
# Warmup Iteration  24: 1065444.222 ops/s
# Warmup Iteration  25: 1064577.290 ops/s
# Warmup Iteration  26: 1062491.605 ops/s
# Warmup Iteration  27: 1067712.612 ops/s
# Warmup Iteration  28: 1066933.124 ops/s
# Warmup Iteration  29: 1068634.032 ops/s
# Warmup Iteration  30: 1058481.615 ops/s
Iteration   1: 1069461.544 ops/s
Iteration   2: 1062753.975 ops/s
Iteration   3: 1069648.245 ops/s
Iteration   4: 1049040.090 ops/s
Iteration   5: 1067073.462 ops/s
Iteration   6: 1068195.229 ops/s
Iteration   7: 1067957.761 ops/s
Iteration   8: 1064386.967 ops/s
Iteration   9: 1065515.448 ops/s
Iteration  10: 1070009.400 ops/s
Iteration  11: 1058945.659 ops/s
Iteration  12: 1068050.017 ops/s
Iteration  13: 1066496.985 ops/s
Iteration  14: 1067866.189 ops/s
Iteration  15: 1069252.187 ops/s
Iteration  16: 1068480.940 ops/s
Iteration  17: 1068865.750 ops/s
Iteration  18: 1070592.240 ops/s
Iteration  19: 1065901.910 ops/s
Iteration  20: 1066613.470 ops/s
Iteration  21: 1050079.746 ops/s
Iteration  22: 1068659.462 ops/s
Iteration  23: 1065000.193 ops/s
Iteration  24: 1066676.467 ops/s
Iteration  25: 1068834.304 ops/s
Iteration  26: 1067138.176 ops/s
Iteration  27: 1071284.915 ops/s
Iteration  28: 1069242.973 ops/s
Iteration  29: 1065005.253 ops/s
Iteration  30: 1066876.670 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next":
  1066130.188 ±(99.9%) 3436.654 ops/s [Average]
  (min, avg, max) = (1049040.090, 1066130.188, 1071284.915), stdev = 5143.822
  CI (99.9%): [1062693.534, 1069566.841] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                       Mode  Cnt        Score      Error  Units
UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next  thrpt   30  1066130.188 ± 3436.654  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 956790.344 ops/s
# Warmup Iteration   2: 2027436.943 ops/s
# Warmup Iteration   3: 1691025.990 ops/s
# Warmup Iteration   4: 2022679.592 ops/s
# Warmup Iteration   5: 2021810.596 ops/s
# Warmup Iteration   6: 2013746.091 ops/s
# Warmup Iteration   7: 2023506.946 ops/s
# Warmup Iteration   8: 2018097.298 ops/s
# Warmup Iteration   9: 2012407.580 ops/s
# Warmup Iteration  10: 1994879.127 ops/s
# Warmup Iteration  11: 1995444.304 ops/s
# Warmup Iteration  12: 2017204.814 ops/s
# Warmup Iteration  13: 2023211.219 ops/s
# Warmup Iteration  14: 2022258.527 ops/s
# Warmup Iteration  15: 2019029.585 ops/s
# Warmup Iteration  16: 2033939.437 ops/s
# Warmup Iteration  17: 2009290.004 ops/s
# Warmup Iteration  18: 2021909.325 ops/s
# Warmup Iteration  19: 2030329.497 ops/s
# Warmup Iteration  20: 2024601.808 ops/s
# Warmup Iteration  21: 2020782.134 ops/s
# Warmup Iteration  22: 2017791.190 ops/s
# Warmup Iteration  23: 2012434.849 ops/s
# Warmup Iteration  24: 2027252.717 ops/s
# Warmup Iteration  25: 2027634.847 ops/s
# Warmup Iteration  26: 2029694.500 ops/s
# Warmup Iteration  27: 2008731.476 ops/s
# Warmup Iteration  28: 2032968.742 ops/s
# Warmup Iteration  29: 2019573.131 ops/s
# Warmup Iteration  30: 2037036.143 ops/s
Iteration   1: 1996726.162 ops/s
Iteration   2: 2016893.973 ops/s
Iteration   3: 2034385.334 ops/s
Iteration   4: 2009194.859 ops/s
Iteration   5: 2005016.460 ops/s
Iteration   6: 2013496.825 ops/s
Iteration   7: 2019660.555 ops/s
Iteration   8: 2032731.191 ops/s
Iteration   9: 2019035.616 ops/s
Iteration  10: 2033501.273 ops/s
Iteration  11: 2026890.351 ops/s
Iteration  12: 2034640.474 ops/s
Iteration  13: 2026214.919 ops/s
Iteration  14: 2024001.290 ops/s
Iteration  15: 2015547.532 ops/s
Iteration  16: 2009992.902 ops/s
Iteration  17: 2032102.175 ops/s
Iteration  18: 2015057.826 ops/s
Iteration  19: 2024078.255 ops/s
Iteration  20: 2016567.976 ops/s
Iteration  21: 2009439.902 ops/s
Iteration  22: 2019004.852 ops/s
Iteration  23: 1998465.513 ops/s
Iteration  24: 1996499.802 ops/s
Iteration  25: 2014882.246 ops/s
Iteration  26: 2020455.514 ops/s
Iteration  27: 2025063.928 ops/s
Iteration  28: 2023002.578 ops/s
Iteration  29: 2026313.330 ops/s
Iteration  30: 2015399.219 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_makeString":
  2018475.428 ±(99.9%) 7131.112 ops/s [Average]
  (min, avg, max) = (1996499.802, 2018475.428, 2034640.474), stdev = 10673.513
  CI (99.9%): [2011344.316, 2025606.539] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_makeString  thrpt   30  2018475.428 ± 7131.112  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_newCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_newCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 171088246.158 ops/s
# Warmup Iteration   2: 298745885.945 ops/s
# Warmup Iteration   3: 256427686.801 ops/s
# Warmup Iteration   4: 287151234.149 ops/s
# Warmup Iteration   5: 286421787.770 ops/s
# Warmup Iteration   6: 287840909.231 ops/s
# Warmup Iteration   7: 287442391.918 ops/s
# Warmup Iteration   8: 287318899.696 ops/s
# Warmup Iteration   9: 287295792.257 ops/s
# Warmup Iteration  10: 285651774.998 ops/s
# Warmup Iteration  11: 287434976.338 ops/s
# Warmup Iteration  12: 287542321.170 ops/s
# Warmup Iteration  13: 287037765.439 ops/s
# Warmup Iteration  14: 286525304.333 ops/s
# Warmup Iteration  15: 286573304.215 ops/s
# Warmup Iteration  16: 286123336.256 ops/s
# Warmup Iteration  17: 288137630.097 ops/s
# Warmup Iteration  18: 287339908.037 ops/s
# Warmup Iteration  19: 286093431.653 ops/s
# Warmup Iteration  20: 285228340.283 ops/s
# Warmup Iteration  21: 287126934.647 ops/s
# Warmup Iteration  22: 288651324.100 ops/s
# Warmup Iteration  23: 286789796.889 ops/s
# Warmup Iteration  24: 286631157.417 ops/s
# Warmup Iteration  25: 286981912.032 ops/s
# Warmup Iteration  26: 287946347.669 ops/s
# Warmup Iteration  27: 287590097.816 ops/s
# Warmup Iteration  28: 287346570.269 ops/s
# Warmup Iteration  29: 287672892.495 ops/s
# Warmup Iteration  30: 287868194.736 ops/s
Iteration   1: 287568710.593 ops/s
Iteration   2: 288136875.822 ops/s
Iteration   3: 286542163.496 ops/s
Iteration   4: 286314432.553 ops/s
Iteration   5: 287511708.445 ops/s
Iteration   6: 282923923.076 ops/s
Iteration   7: 287718367.512 ops/s
Iteration   8: 288090079.685 ops/s
Iteration   9: 287086942.616 ops/s
Iteration  10: 286818993.926 ops/s
Iteration  11: 286196103.556 ops/s
Iteration  12: 286896294.905 ops/s
Iteration  13: 288045868.695 ops/s
Iteration  14: 287848743.720 ops/s
Iteration  15: 286852095.985 ops/s
Iteration  16: 288882197.427 ops/s
Iteration  17: 288230848.115 ops/s
Iteration  18: 287652709.350 ops/s
Iteration  19: 287427871.007 ops/s
Iteration  20: 285985924.976 ops/s
Iteration  21: 285541301.606 ops/s
Iteration  22: 286600930.543 ops/s
Iteration  23: 288133572.309 ops/s
Iteration  24: 286171362.132 ops/s
Iteration  25: 286782325.942 ops/s
Iteration  26: 286095275.734 ops/s
Iteration  27: 283240994.880 ops/s
Iteration  28: 287433116.619 ops/s
Iteration  29: 286542971.665 ops/s
Iteration  30: 286804152.306 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_newCollection":
  286869228.640 ±(99.9%) 870945.843 ops/s [Average]
  (min, avg, max) = (282923923.076, 286869228.640, 288882197.427), stdev = 1303590.836
  CI (99.9%): [285998282.797, 287740174.483] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt          Score        Error  Units
UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_newCollection  thrpt   30  286869228.640 ± 870945.843  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_newCollectionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_newCollectionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3664028.746 ops/s
# Warmup Iteration   2: 6352592.956 ops/s
# Warmup Iteration   3: 7537734.584 ops/s
# Warmup Iteration   4: 7512123.051 ops/s
# Warmup Iteration   5: 7522516.055 ops/s
# Warmup Iteration   6: 7496591.885 ops/s
# Warmup Iteration   7: 7511525.083 ops/s
# Warmup Iteration   8: 7553069.328 ops/s
# Warmup Iteration   9: 7446903.834 ops/s
# Warmup Iteration  10: 7521582.902 ops/s
# Warmup Iteration  11: 7544945.657 ops/s
# Warmup Iteration  12: 7521212.652 ops/s
# Warmup Iteration  13: 7525438.307 ops/s
# Warmup Iteration  14: 7517644.901 ops/s
# Warmup Iteration  15: 7524510.761 ops/s
# Warmup Iteration  16: 7513201.231 ops/s
# Warmup Iteration  17: 7537910.993 ops/s
# Warmup Iteration  18: 7516348.845 ops/s
# Warmup Iteration  19: 7532671.942 ops/s
# Warmup Iteration  20: 7461094.373 ops/s
# Warmup Iteration  21: 7421390.668 ops/s
# Warmup Iteration  22: 7551880.129 ops/s
# Warmup Iteration  23: 7540227.646 ops/s
# Warmup Iteration  24: 7480411.807 ops/s
# Warmup Iteration  25: 7508325.103 ops/s
# Warmup Iteration  26: 7516287.781 ops/s
# Warmup Iteration  27: 7556692.371 ops/s
# Warmup Iteration  28: 7542256.150 ops/s
# Warmup Iteration  29: 7513583.800 ops/s
# Warmup Iteration  30: 7514247.605 ops/s
Iteration   1: 7457896.801 ops/s
Iteration   2: 7512595.150 ops/s
Iteration   3: 7440844.771 ops/s
Iteration   4: 7543939.751 ops/s
Iteration   5: 7519334.356 ops/s
Iteration   6: 7526132.056 ops/s
Iteration   7: 7535941.558 ops/s
Iteration   8: 7520445.676 ops/s
Iteration   9: 7311675.999 ops/s
Iteration  10: 7501783.113 ops/s
Iteration  11: 7507502.840 ops/s
Iteration  12: 7518303.684 ops/s
Iteration  13: 7466467.026 ops/s
Iteration  14: 7420438.740 ops/s
Iteration  15: 7417204.526 ops/s
Iteration  16: 7520233.432 ops/s
Iteration  17: 7495093.042 ops/s
Iteration  18: 7544493.074 ops/s
Iteration  19: 7493701.118 ops/s
Iteration  20: 7488793.674 ops/s
Iteration  21: 7530322.327 ops/s
Iteration  22: 7560108.483 ops/s
Iteration  23: 7555356.214 ops/s
Iteration  24: 7532619.367 ops/s
Iteration  25: 7499095.099 ops/s
Iteration  26: 7539389.401 ops/s
Iteration  27: 7518426.999 ops/s
Iteration  28: 7568560.429 ops/s
Iteration  29: 7547859.179 ops/s
Iteration  30: 7524402.776 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_newCollectionWith":
  7503965.355 ±(99.9%) 35210.056 ops/s [Average]
  (min, avg, max) = (7311675.999, 7503965.355, 7568560.429), stdev = 52700.758
  CI (99.9%): [7468755.299, 7539175.411] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_newCollectionWith  thrpt   30  7503965.355 ± 35210.056  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1671002.901 ops/s
# Warmup Iteration   2: 3494323.488 ops/s
# Warmup Iteration   3: 2950015.139 ops/s
# Warmup Iteration   4: 3513147.544 ops/s
# Warmup Iteration   5: 3489857.308 ops/s
# Warmup Iteration   6: 3514746.199 ops/s
# Warmup Iteration   7: 3507157.751 ops/s
# Warmup Iteration   8: 3510998.455 ops/s
# Warmup Iteration   9: 3509309.927 ops/s
# Warmup Iteration  10: 3526888.886 ops/s
# Warmup Iteration  11: 3506602.177 ops/s
# Warmup Iteration  12: 3515658.813 ops/s
# Warmup Iteration  13: 3516219.632 ops/s
# Warmup Iteration  14: 3508504.344 ops/s
# Warmup Iteration  15: 3492753.682 ops/s
# Warmup Iteration  16: 3489527.696 ops/s
# Warmup Iteration  17: 3505437.052 ops/s
# Warmup Iteration  18: 3503802.761 ops/s
# Warmup Iteration  19: 3503479.771 ops/s
# Warmup Iteration  20: 3504608.457 ops/s
# Warmup Iteration  21: 3510789.719 ops/s
# Warmup Iteration  22: 3495690.426 ops/s
# Warmup Iteration  23: 3513906.344 ops/s
# Warmup Iteration  24: 3510957.827 ops/s
# Warmup Iteration  25: 3513822.412 ops/s
# Warmup Iteration  26: 3483043.618 ops/s
# Warmup Iteration  27: 3507047.830 ops/s
# Warmup Iteration  28: 3510088.296 ops/s
# Warmup Iteration  29: 3512189.366 ops/s
# Warmup Iteration  30: 3503771.281 ops/s
Iteration   1: 3514740.068 ops/s
Iteration   2: 3508028.976 ops/s
Iteration   3: 3518096.479 ops/s
Iteration   4: 3505574.634 ops/s
Iteration   5: 3508763.271 ops/s
Iteration   6: 3494355.164 ops/s
Iteration   7: 3513745.222 ops/s
Iteration   8: 3503969.764 ops/s
Iteration   9: 3495138.161 ops/s
Iteration  10: 3497614.017 ops/s
Iteration  11: 3518140.629 ops/s
Iteration  12: 3512185.541 ops/s
Iteration  13: 3514237.906 ops/s
Iteration  14: 3521439.180 ops/s
Iteration  15: 3509540.340 ops/s
Iteration  16: 3506285.389 ops/s
Iteration  17: 3516017.382 ops/s
Iteration  18: 3509913.166 ops/s
Iteration  19: 3519466.577 ops/s
Iteration  20: 3514082.414 ops/s
Iteration  21: 3498920.616 ops/s
Iteration  22: 3514095.684 ops/s
Iteration  23: 3504874.036 ops/s
Iteration  24: 3515672.600 ops/s
Iteration  25: 3505227.723 ops/s
Iteration  26: 3508996.012 ops/s
Iteration  27: 3507670.333 ops/s
Iteration  28: 3506483.386 ops/s
Iteration  29: 3516921.049 ops/s
Iteration  30: 3505344.001 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_noneSatisfy":
  3509517.991 ±(99.9%) 4742.148 ops/s [Average]
  (min, avg, max) = (3494355.164, 3509517.991, 3521439.180), stdev = 7097.824
  CI (99.9%): [3504775.843, 3514260.138] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_noneSatisfy  thrpt   30  3509517.991 ± 4742.148  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_notEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_notEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4536866.636 ops/s
# Warmup Iteration   2: 7420339.319 ops/s
# Warmup Iteration   3: 8775700.307 ops/s
# Warmup Iteration   4: 8725562.914 ops/s
# Warmup Iteration   5: 8758430.696 ops/s
# Warmup Iteration   6: 8761252.144 ops/s
# Warmup Iteration   7: 8714754.956 ops/s
# Warmup Iteration   8: 8756233.848 ops/s
# Warmup Iteration   9: 8761065.253 ops/s
# Warmup Iteration  10: 8686775.262 ops/s
# Warmup Iteration  11: 8769496.736 ops/s
# Warmup Iteration  12: 8727004.580 ops/s
# Warmup Iteration  13: 8759467.356 ops/s
# Warmup Iteration  14: 8693215.236 ops/s
# Warmup Iteration  15: 8679745.300 ops/s
# Warmup Iteration  16: 8765166.169 ops/s
# Warmup Iteration  17: 8770522.382 ops/s
# Warmup Iteration  18: 8737765.388 ops/s
# Warmup Iteration  19: 8663312.906 ops/s
# Warmup Iteration  20: 8759068.928 ops/s
# Warmup Iteration  21: 8769077.323 ops/s
# Warmup Iteration  22: 8780121.648 ops/s
# Warmup Iteration  23: 8723954.601 ops/s
# Warmup Iteration  24: 8772015.439 ops/s
# Warmup Iteration  25: 8781276.016 ops/s
# Warmup Iteration  26: 8764941.387 ops/s
# Warmup Iteration  27: 8759178.080 ops/s
# Warmup Iteration  28: 8790922.846 ops/s
# Warmup Iteration  29: 8733509.955 ops/s
# Warmup Iteration  30: 8783947.839 ops/s
Iteration   1: 8793858.334 ops/s
Iteration   2: 8759122.143 ops/s
Iteration   3: 8578977.282 ops/s
Iteration   4: 8767798.035 ops/s
Iteration   5: 8776819.515 ops/s
Iteration   6: 8777778.747 ops/s
Iteration   7: 8799678.584 ops/s
Iteration   8: 8734653.810 ops/s
Iteration   9: 8770903.239 ops/s
Iteration  10: 8761379.756 ops/s
Iteration  11: 8768907.919 ops/s
Iteration  12: 8745918.540 ops/s
Iteration  13: 8686060.980 ops/s
Iteration  14: 8721388.829 ops/s
Iteration  15: 8689941.504 ops/s
Iteration  16: 8783287.570 ops/s
Iteration  17: 8766663.392 ops/s
Iteration  18: 8761150.560 ops/s
Iteration  19: 8755260.078 ops/s
Iteration  20: 8608996.113 ops/s
Iteration  21: 8788703.012 ops/s
Iteration  22: 8742193.076 ops/s
Iteration  23: 8815972.202 ops/s
Iteration  24: 8820165.901 ops/s
Iteration  25: 8756986.853 ops/s
Iteration  26: 8731661.587 ops/s
Iteration  27: 8744873.141 ops/s
Iteration  28: 8721568.893 ops/s
Iteration  29: 8737306.517 ops/s
Iteration  30: 8769372.678 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_notEmpty":
  8747911.626 ±(99.9%) 34893.229 ops/s [Average]
  (min, avg, max) = (8578977.282, 8747911.626, 8820165.901), stdev = 52226.546
  CI (99.9%): [8713018.398, 8782804.855] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_notEmpty  thrpt   30  8747911.626 ± 34893.229  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_reduce$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_reduce

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1752215.945 ops/s
# Warmup Iteration   2: 3678482.934 ops/s
# Warmup Iteration   3: 3099411.297 ops/s
# Warmup Iteration   4: 3688411.061 ops/s
# Warmup Iteration   5: 3696670.937 ops/s
# Warmup Iteration   6: 3693475.939 ops/s
# Warmup Iteration   7: 3702380.573 ops/s
# Warmup Iteration   8: 3694354.842 ops/s
# Warmup Iteration   9: 3688629.131 ops/s
# Warmup Iteration  10: 3697375.036 ops/s
# Warmup Iteration  11: 3695310.354 ops/s
# Warmup Iteration  12: 3691661.862 ops/s
# Warmup Iteration  13: 3700602.721 ops/s
# Warmup Iteration  14: 3691662.512 ops/s
# Warmup Iteration  15: 3700075.617 ops/s
# Warmup Iteration  16: 3699875.406 ops/s
# Warmup Iteration  17: 3689388.154 ops/s
# Warmup Iteration  18: 3667903.547 ops/s
# Warmup Iteration  19: 3696737.069 ops/s
# Warmup Iteration  20: 3654508.918 ops/s
# Warmup Iteration  21: 3694388.675 ops/s
# Warmup Iteration  22: 3694522.806 ops/s
# Warmup Iteration  23: 3687437.036 ops/s
# Warmup Iteration  24: 3686147.283 ops/s
# Warmup Iteration  25: 3697357.410 ops/s
# Warmup Iteration  26: 3694691.680 ops/s
# Warmup Iteration  27: 3681564.204 ops/s
# Warmup Iteration  28: 3692671.889 ops/s
# Warmup Iteration  29: 3664138.132 ops/s
# Warmup Iteration  30: 3693896.282 ops/s
Iteration   1: 3686324.393 ops/s
Iteration   2: 3697212.765 ops/s
Iteration   3: 3693018.374 ops/s
Iteration   4: 3687014.368 ops/s
Iteration   5: 3683593.964 ops/s
Iteration   6: 3699498.640 ops/s
Iteration   7: 3692420.623 ops/s
Iteration   8: 3692539.355 ops/s
Iteration   9: 3697904.973 ops/s
Iteration  10: 3688007.577 ops/s
Iteration  11: 3690305.940 ops/s
Iteration  12: 3700378.814 ops/s
Iteration  13: 3696263.183 ops/s
Iteration  14: 3682311.578 ops/s
Iteration  15: 3697772.095 ops/s
Iteration  16: 3691780.086 ops/s
Iteration  17: 3697128.651 ops/s
Iteration  18: 3686467.692 ops/s
Iteration  19: 3687799.193 ops/s
Iteration  20: 3681925.926 ops/s
Iteration  21: 3693398.861 ops/s
Iteration  22: 3694531.664 ops/s
Iteration  23: 3693429.440 ops/s
Iteration  24: 3675467.641 ops/s
Iteration  25: 3693745.733 ops/s
Iteration  26: 3694695.135 ops/s
Iteration  27: 3697367.556 ops/s
Iteration  28: 3622869.604 ops/s
Iteration  29: 3639363.273 ops/s
Iteration  30: 3689518.106 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_reduce":
  3687468.507 ±(99.9%) 11041.535 ops/s [Average]
  (min, avg, max) = (3622869.604, 3687468.507, 3700378.814), stdev = 16526.450
  CI (99.9%): [3676426.972, 3698510.041] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_reduce  thrpt   30  3687468.507 ± 11041.535  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_reduceIfEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_reduceIfEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1473049.518 ops/s
# Warmup Iteration   2: 3116527.890 ops/s
# Warmup Iteration   3: 2619932.914 ops/s
# Warmup Iteration   4: 3128919.160 ops/s
# Warmup Iteration   5: 3131187.085 ops/s
# Warmup Iteration   6: 3138191.719 ops/s
# Warmup Iteration   7: 3132096.100 ops/s
# Warmup Iteration   8: 3129391.335 ops/s
# Warmup Iteration   9: 3093880.511 ops/s
# Warmup Iteration  10: 3131641.428 ops/s
# Warmup Iteration  11: 3131993.910 ops/s
# Warmup Iteration  12: 3132174.208 ops/s
# Warmup Iteration  13: 3130428.035 ops/s
# Warmup Iteration  14: 3105542.634 ops/s
# Warmup Iteration  15: 3135751.628 ops/s
# Warmup Iteration  16: 3128903.494 ops/s
# Warmup Iteration  17: 3139580.843 ops/s
# Warmup Iteration  18: 3106287.578 ops/s
# Warmup Iteration  19: 3135523.548 ops/s
# Warmup Iteration  20: 3141264.781 ops/s
# Warmup Iteration  21: 3131889.919 ops/s
# Warmup Iteration  22: 3132740.043 ops/s
# Warmup Iteration  23: 3113737.179 ops/s
# Warmup Iteration  24: 3137222.518 ops/s
# Warmup Iteration  25: 3131474.631 ops/s
# Warmup Iteration  26: 3131750.433 ops/s
# Warmup Iteration  27: 3126408.529 ops/s
# Warmup Iteration  28: 3117786.263 ops/s
# Warmup Iteration  29: 3110620.766 ops/s
# Warmup Iteration  30: 3136122.713 ops/s
Iteration   1: 3148320.102 ops/s
Iteration   2: 3126634.823 ops/s
Iteration   3: 3140773.510 ops/s
Iteration   4: 3135603.551 ops/s
Iteration   5: 3130957.762 ops/s
Iteration   6: 3141220.901 ops/s
Iteration   7: 3129251.539 ops/s
Iteration   8: 3143479.352 ops/s
Iteration   9: 3128625.509 ops/s
Iteration  10: 3135021.869 ops/s
Iteration  11: 3133800.152 ops/s
Iteration  12: 3137801.095 ops/s
Iteration  13: 3132131.414 ops/s
Iteration  14: 3137623.885 ops/s
Iteration  15: 3136534.677 ops/s
Iteration  16: 3130387.961 ops/s
Iteration  17: 3133672.531 ops/s
Iteration  18: 3127549.027 ops/s
Iteration  19: 3144102.698 ops/s
Iteration  20: 3116771.301 ops/s
Iteration  21: 3135603.745 ops/s
Iteration  22: 3128706.655 ops/s
Iteration  23: 3139638.489 ops/s
Iteration  24: 3138980.723 ops/s
Iteration  25: 3129693.932 ops/s
Iteration  26: 3130681.763 ops/s
Iteration  27: 3129486.438 ops/s
Iteration  28: 3140168.265 ops/s
Iteration  29: 3100502.829 ops/s
Iteration  30: 3138218.520 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_reduceIfEmpty":
  3133398.167 ±(99.9%) 5958.821 ops/s [Average]
  (min, avg, max) = (3100502.829, 3133398.167, 3148320.102), stdev = 8918.884
  CI (99.9%): [3127439.346, 3139356.989] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score      Error  Units
UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_reduceIfEmpty  thrpt   30  3133398.167 ± 5958.821  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 705148.495 ops/s
# Warmup Iteration   2: 744683.794 ops/s
# Warmup Iteration   3: 996504.428 ops/s
# Warmup Iteration   4: 986658.923 ops/s
# Warmup Iteration   5: 979503.890 ops/s
# Warmup Iteration   6: 989822.664 ops/s
# Warmup Iteration   7: 987530.855 ops/s
# Warmup Iteration   8: 987574.571 ops/s
# Warmup Iteration   9: 987689.598 ops/s
# Warmup Iteration  10: 989521.342 ops/s
# Warmup Iteration  11: 827266.899 ops/s
# Warmup Iteration  12: 992135.254 ops/s
# Warmup Iteration  13: 989385.582 ops/s
# Warmup Iteration  14: 993743.149 ops/s
# Warmup Iteration  15: 991320.178 ops/s
# Warmup Iteration  16: 991456.401 ops/s
# Warmup Iteration  17: 1048392.564 ops/s
# Warmup Iteration  18: 1055543.982 ops/s
# Warmup Iteration  19: 1056526.322 ops/s
# Warmup Iteration  20: 1053745.717 ops/s
# Warmup Iteration  21: 1044149.072 ops/s
# Warmup Iteration  22: 1053669.695 ops/s
# Warmup Iteration  23: 1055124.746 ops/s
# Warmup Iteration  24: 1057276.475 ops/s
# Warmup Iteration  25: 1054590.886 ops/s
# Warmup Iteration  26: 1054243.199 ops/s
# Warmup Iteration  27: 1056653.827 ops/s
# Warmup Iteration  28: 1057004.018 ops/s
# Warmup Iteration  29: 1055392.501 ops/s
# Warmup Iteration  30: 1055226.934 ops/s
Iteration   1: 1054067.572 ops/s
Iteration   2: 1057169.832 ops/s
Iteration   3: 1054339.390 ops/s
Iteration   4: 1051421.322 ops/s
Iteration   5: 1052664.576 ops/s
Iteration   6: 1059237.606 ops/s
Iteration   7: 1058441.651 ops/s
Iteration   8: 1055196.925 ops/s
Iteration   9: 1040129.529 ops/s
Iteration  10: 1058116.657 ops/s
Iteration  11: 1056724.922 ops/s
Iteration  12: 1050526.560 ops/s
Iteration  13: 1055762.093 ops/s
Iteration  14: 1055443.205 ops/s
Iteration  15: 1054062.461 ops/s
Iteration  16: 1056948.564 ops/s
Iteration  17: 1038512.529 ops/s
Iteration  18: 1052436.812 ops/s
Iteration  19: 1052483.158 ops/s
Iteration  20: 1052469.814 ops/s
Iteration  21: 1053160.006 ops/s
Iteration  22: 1047082.460 ops/s
Iteration  23: 1055178.576 ops/s
Iteration  24: 1054614.400 ops/s
Iteration  25: 1054010.041 ops/s
Iteration  26: 1053429.004 ops/s
Iteration  27: 1055759.108 ops/s
Iteration  28: 1055489.494 ops/s
Iteration  29: 1051642.441 ops/s
Iteration  30: 1052861.435 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows":
  1053312.738 ±(99.9%) 3052.873 ops/s [Average]
  (min, avg, max) = (1038512.529, 1053312.738, 1059237.606), stdev = 4569.397
  CI (99.9%): [1050259.865, 1056365.611] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score      Error  Units
UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows  thrpt   30  1053312.738 ± 3052.873  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7067141.646 ops/s
# Warmup Iteration   2: 14211796.839 ops/s
# Warmup Iteration   3: 13047750.607 ops/s
# Warmup Iteration   4: 14692372.108 ops/s
# Warmup Iteration   5: 14754171.225 ops/s
# Warmup Iteration   6: 14751988.029 ops/s
# Warmup Iteration   7: 14658541.676 ops/s
# Warmup Iteration   8: 14751625.321 ops/s
# Warmup Iteration   9: 14727898.601 ops/s
# Warmup Iteration  10: 14720032.829 ops/s
# Warmup Iteration  11: 14747959.819 ops/s
# Warmup Iteration  12: 14742230.366 ops/s
# Warmup Iteration  13: 14726049.813 ops/s
# Warmup Iteration  14: 14730472.848 ops/s
# Warmup Iteration  15: 14739376.679 ops/s
# Warmup Iteration  16: 14713677.950 ops/s
# Warmup Iteration  17: 14768538.692 ops/s
# Warmup Iteration  18: 14698573.461 ops/s
# Warmup Iteration  19: 14726494.568 ops/s
# Warmup Iteration  20: 14765145.367 ops/s
# Warmup Iteration  21: 14729610.564 ops/s
# Warmup Iteration  22: 14795700.809 ops/s
# Warmup Iteration  23: 14707803.348 ops/s
# Warmup Iteration  24: 14698431.129 ops/s
# Warmup Iteration  25: 14780560.090 ops/s
# Warmup Iteration  26: 14742266.081 ops/s
# Warmup Iteration  27: 14716485.707 ops/s
# Warmup Iteration  28: 14746341.331 ops/s
# Warmup Iteration  29: 14688920.084 ops/s
# Warmup Iteration  30: 14765919.632 ops/s
Iteration   1: 14700898.283 ops/s
Iteration   2: 14774815.140 ops/s
Iteration   3: 14744245.194 ops/s
Iteration   4: 14711547.418 ops/s
Iteration   5: 14744847.191 ops/s
Iteration   6: 14759159.925 ops/s
Iteration   7: 14765898.686 ops/s
Iteration   8: 14700690.044 ops/s
Iteration   9: 14706642.054 ops/s
Iteration  10: 14742064.464 ops/s
Iteration  11: 14795816.911 ops/s
Iteration  12: 14694028.874 ops/s
Iteration  13: 14712411.194 ops/s
Iteration  14: 14594415.521 ops/s
Iteration  15: 14705183.757 ops/s
Iteration  16: 14725109.606 ops/s
Iteration  17: 14653792.570 ops/s
Iteration  18: 14793894.955 ops/s
Iteration  19: 14721426.348 ops/s
Iteration  20: 14727990.815 ops/s
Iteration  21: 14494933.064 ops/s
Iteration  22: 14792665.868 ops/s
Iteration  23: 14790221.980 ops/s
Iteration  24: 14715497.386 ops/s
Iteration  25: 14619203.282 ops/s
Iteration  26: 14719528.059 ops/s
Iteration  27: 14768057.549 ops/s
Iteration  28: 14733365.025 ops/s
Iteration  29: 14739181.981 ops/s
Iteration  30: 14670491.913 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_reject":
  14717267.502 ±(99.9%) 42592.943 ops/s [Average]
  (min, avg, max) = (14494933.064, 14717267.502, 14795816.911), stdev = 63751.117
  CI (99.9%): [14674674.559, 14759860.445] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_reject  thrpt   30  14717267.502 ± 42592.943  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7473516.879 ops/s
# Warmup Iteration   2: 17727882.721 ops/s
# Warmup Iteration   3: 17413095.280 ops/s
# Warmup Iteration   4: 15798134.445 ops/s
# Warmup Iteration   5: 18043660.804 ops/s
# Warmup Iteration   6: 18065194.507 ops/s
# Warmup Iteration   7: 18033398.118 ops/s
# Warmup Iteration   8: 18045116.100 ops/s
# Warmup Iteration   9: 18093264.719 ops/s
# Warmup Iteration  10: 17892614.396 ops/s
# Warmup Iteration  11: 18043174.856 ops/s
# Warmup Iteration  12: 18081514.866 ops/s
# Warmup Iteration  13: 17884938.028 ops/s
# Warmup Iteration  14: 18029595.140 ops/s
# Warmup Iteration  15: 17995253.229 ops/s
# Warmup Iteration  16: 18079844.509 ops/s
# Warmup Iteration  17: 18080264.048 ops/s
# Warmup Iteration  18: 18057383.088 ops/s
# Warmup Iteration  19: 18047204.689 ops/s
# Warmup Iteration  20: 18037555.675 ops/s
# Warmup Iteration  21: 18045882.416 ops/s
# Warmup Iteration  22: 18011611.198 ops/s
# Warmup Iteration  23: 18086882.927 ops/s
# Warmup Iteration  24: 17901010.031 ops/s
# Warmup Iteration  25: 17972753.936 ops/s
# Warmup Iteration  26: 18112971.297 ops/s
# Warmup Iteration  27: 18091714.392 ops/s
# Warmup Iteration  28: 18064582.420 ops/s
# Warmup Iteration  29: 18096010.723 ops/s
# Warmup Iteration  30: 18034555.100 ops/s
Iteration   1: 18087792.196 ops/s
Iteration   2: 17918412.976 ops/s
Iteration   3: 18026926.305 ops/s
Iteration   4: 18003108.947 ops/s
Iteration   5: 18042451.871 ops/s
Iteration   6: 18019467.233 ops/s
Iteration   7: 18009808.188 ops/s
Iteration   8: 18064431.221 ops/s
Iteration   9: 18072117.448 ops/s
Iteration  10: 18070357.408 ops/s
Iteration  11: 18063999.376 ops/s
Iteration  12: 18013317.070 ops/s
Iteration  13: 18056569.469 ops/s
Iteration  14: 17818755.429 ops/s
Iteration  15: 18111876.941 ops/s
Iteration  16: 18031296.266 ops/s
Iteration  17: 18052533.177 ops/s
Iteration  18: 18039708.252 ops/s
Iteration  19: 18120889.025 ops/s
Iteration  20: 18091100.811 ops/s
Iteration  21: 18059086.074 ops/s
Iteration  22: 18071053.234 ops/s
Iteration  23: 18039136.156 ops/s
Iteration  24: 18091663.495 ops/s
Iteration  25: 18103092.579 ops/s
Iteration  26: 18076621.486 ops/s
Iteration  27: 18057990.095 ops/s
Iteration  28: 18053081.939 ops/s
Iteration  29: 18084751.384 ops/s
Iteration  30: 18028455.359 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_remove":
  18045995.047 ±(99.9%) 38923.048 ops/s [Average]
  (min, avg, max) = (17818755.429, 18045995.047, 18120889.025), stdev = 58258.191
  CI (99.9%): [18007071.999, 18084918.095] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_remove  thrpt   30  18045995.047 ± 38923.048  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 722532.012 ops/s
# Warmup Iteration   2: 791876.072 ops/s
# Warmup Iteration   3: 1016756.436 ops/s
# Warmup Iteration   4: 1011248.287 ops/s
# Warmup Iteration   5: 1009720.789 ops/s
# Warmup Iteration   6: 1013332.344 ops/s
# Warmup Iteration   7: 1002286.506 ops/s
# Warmup Iteration   8: 1005259.058 ops/s
# Warmup Iteration   9: 1009686.728 ops/s
# Warmup Iteration  10: 847808.075 ops/s
# Warmup Iteration  11: 1006285.590 ops/s
# Warmup Iteration  12: 1010663.054 ops/s
# Warmup Iteration  13: 1008052.587 ops/s
# Warmup Iteration  14: 1002370.376 ops/s
# Warmup Iteration  15: 1007886.174 ops/s
# Warmup Iteration  16: 1010855.583 ops/s
# Warmup Iteration  17: 1059243.806 ops/s
# Warmup Iteration  18: 1067152.246 ops/s
# Warmup Iteration  19: 1060549.192 ops/s
# Warmup Iteration  20: 1070272.216 ops/s
# Warmup Iteration  21: 1070022.014 ops/s
# Warmup Iteration  22: 1072560.124 ops/s
# Warmup Iteration  23: 1067758.815 ops/s
# Warmup Iteration  24: 1069646.809 ops/s
# Warmup Iteration  25: 1067347.733 ops/s
# Warmup Iteration  26: 1069683.156 ops/s
# Warmup Iteration  27: 1064283.447 ops/s
# Warmup Iteration  28: 1069636.647 ops/s
# Warmup Iteration  29: 1068583.762 ops/s
# Warmup Iteration  30: 1051278.957 ops/s
Iteration   1: 1071165.050 ops/s
Iteration   2: 1069825.348 ops/s
Iteration   3: 1068563.885 ops/s
Iteration   4: 1066304.670 ops/s
Iteration   5: 1071057.081 ops/s
Iteration   6: 1069048.952 ops/s
Iteration   7: 1058717.717 ops/s
Iteration   8: 1066544.502 ops/s
Iteration   9: 1065190.444 ops/s
Iteration  10: 1044557.610 ops/s
Iteration  11: 1067121.111 ops/s
Iteration  12: 1067098.957 ops/s
Iteration  13: 1067434.858 ops/s
Iteration  14: 1067982.605 ops/s
Iteration  15: 1055302.357 ops/s
Iteration  16: 1069582.259 ops/s
Iteration  17: 1066416.997 ops/s
Iteration  18: 1069405.640 ops/s
Iteration  19: 1069483.504 ops/s
Iteration  20: 1071322.404 ops/s
Iteration  21: 1070699.585 ops/s
Iteration  22: 1070132.713 ops/s
Iteration  23: 1069933.713 ops/s
Iteration  24: 1069299.510 ops/s
Iteration  25: 1069221.456 ops/s
Iteration  26: 1070388.682 ops/s
Iteration  27: 1071023.611 ops/s
Iteration  28: 1052657.177 ops/s
Iteration  29: 1067780.628 ops/s
Iteration  30: 1068447.891 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_removeAll":
  1066723.697 ±(99.9%) 4070.503 ops/s [Average]
  (min, avg, max) = (1044557.610, 1066723.697, 1071322.404), stdev = 6092.537
  CI (99.9%): [1062653.194, 1070794.200] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_removeAll  thrpt   30  1066723.697 ± 4070.503  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_removeAll_iterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_removeAll_iterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 699810.995 ops/s
# Warmup Iteration   2: 810973.850 ops/s
# Warmup Iteration   3: 1007562.610 ops/s
# Warmup Iteration   4: 1006340.261 ops/s
# Warmup Iteration   5: 1005776.750 ops/s
# Warmup Iteration   6: 990039.450 ops/s
# Warmup Iteration   7: 1007370.907 ops/s
# Warmup Iteration   8: 1004992.751 ops/s
# Warmup Iteration   9: 892248.760 ops/s
# Warmup Iteration  10: 964449.084 ops/s
# Warmup Iteration  11: 989500.402 ops/s
# Warmup Iteration  12: 1007961.096 ops/s
# Warmup Iteration  13: 1007507.532 ops/s
# Warmup Iteration  14: 1005423.477 ops/s
# Warmup Iteration  15: 1003351.697 ops/s
# Warmup Iteration  16: 1004149.582 ops/s
# Warmup Iteration  17: 1069691.282 ops/s
# Warmup Iteration  18: 1069912.857 ops/s
# Warmup Iteration  19: 1069036.649 ops/s
# Warmup Iteration  20: 1068749.582 ops/s
# Warmup Iteration  21: 1056516.807 ops/s
# Warmup Iteration  22: 1070094.121 ops/s
# Warmup Iteration  23: 1068241.133 ops/s
# Warmup Iteration  24: 1066939.750 ops/s
# Warmup Iteration  25: 1069089.026 ops/s
# Warmup Iteration  26: 1070884.674 ops/s
# Warmup Iteration  27: 1068607.699 ops/s
# Warmup Iteration  28: 1066486.699 ops/s
# Warmup Iteration  29: 1059927.490 ops/s
# Warmup Iteration  30: 1068898.034 ops/s
Iteration   1: 1059872.172 ops/s
Iteration   2: 1068891.767 ops/s
Iteration   3: 1053987.413 ops/s
Iteration   4: 1069179.155 ops/s
Iteration   5: 1067222.568 ops/s
Iteration   6: 1071295.433 ops/s
Iteration   7: 1071512.110 ops/s
Iteration   8: 1051189.985 ops/s
Iteration   9: 1085176.406 ops/s
Iteration  10: 1072442.154 ops/s
Iteration  11: 1068993.328 ops/s
Iteration  12: 1068709.785 ops/s
Iteration  13: 1066586.962 ops/s
Iteration  14: 1069696.861 ops/s
Iteration  15: 1066462.134 ops/s
Iteration  16: 1072087.928 ops/s
Iteration  17: 1069850.600 ops/s
Iteration  18: 1067490.668 ops/s
Iteration  19: 1069288.776 ops/s
Iteration  20: 1068230.290 ops/s
Iteration  21: 1057947.150 ops/s
Iteration  22: 1071351.930 ops/s
Iteration  23: 1068205.775 ops/s
Iteration  24: 1068866.340 ops/s
Iteration  25: 1071117.313 ops/s
Iteration  26: 1071467.768 ops/s
Iteration  27: 1049354.565 ops/s
Iteration  28: 1066014.766 ops/s
Iteration  29: 1069217.971 ops/s
Iteration  30: 1065284.474 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_removeAll_iterable":
  1067233.152 ±(99.9%) 4632.509 ops/s [Average]
  (min, avg, max) = (1049354.565, 1067233.152, 1085176.406), stdev = 6933.722
  CI (99.9%): [1062600.643, 1071865.661] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score      Error  Units
UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_removeAll_iterable  thrpt   30  1067233.152 ± 4632.509  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 721835.031 ops/s
# Warmup Iteration   2: 804619.760 ops/s
# Warmup Iteration   3: 1017300.415 ops/s
# Warmup Iteration   4: 1011466.623 ops/s
# Warmup Iteration   5: 1006964.495 ops/s
# Warmup Iteration   6: 993435.841 ops/s
# Warmup Iteration   7: 1007748.044 ops/s
# Warmup Iteration   8: 1004626.444 ops/s
# Warmup Iteration   9: 1010086.158 ops/s
# Warmup Iteration  10: 847974.724 ops/s
# Warmup Iteration  11: 1009218.594 ops/s
# Warmup Iteration  12: 1001888.781 ops/s
# Warmup Iteration  13: 1008332.964 ops/s
# Warmup Iteration  14: 1008549.976 ops/s
# Warmup Iteration  15: 1009533.499 ops/s
# Warmup Iteration  16: 1009157.709 ops/s
# Warmup Iteration  17: 1069360.359 ops/s
# Warmup Iteration  18: 1064823.247 ops/s
# Warmup Iteration  19: 1072353.831 ops/s
# Warmup Iteration  20: 1072524.318 ops/s
# Warmup Iteration  21: 1069250.199 ops/s
# Warmup Iteration  22: 1062013.799 ops/s
# Warmup Iteration  23: 1070770.116 ops/s
# Warmup Iteration  24: 1071870.970 ops/s
# Warmup Iteration  25: 1071530.775 ops/s
# Warmup Iteration  26: 1058037.136 ops/s
# Warmup Iteration  27: 1072844.297 ops/s
# Warmup Iteration  28: 1071258.862 ops/s
# Warmup Iteration  29: 1070325.026 ops/s
# Warmup Iteration  30: 1071588.648 ops/s
Iteration   1: 1072763.357 ops/s
Iteration   2: 1073400.164 ops/s
Iteration   3: 1054220.125 ops/s
Iteration   4: 1072161.945 ops/s
Iteration   5: 1073692.197 ops/s
Iteration   6: 1073248.799 ops/s
Iteration   7: 1052490.290 ops/s
Iteration   8: 1071740.788 ops/s
Iteration   9: 1070681.008 ops/s
Iteration  10: 1063169.459 ops/s
Iteration  11: 1068010.560 ops/s
Iteration  12: 1069920.009 ops/s
Iteration  13: 1073563.441 ops/s
Iteration  14: 1070834.479 ops/s
Iteration  15: 1076420.657 ops/s
Iteration  16: 1072022.402 ops/s
Iteration  17: 1053214.301 ops/s
Iteration  18: 1071758.632 ops/s
Iteration  19: 1071605.177 ops/s
Iteration  20: 1067221.156 ops/s
Iteration  21: 1070410.668 ops/s
Iteration  22: 1070727.669 ops/s
Iteration  23: 1068296.289 ops/s
Iteration  24: 1070175.427 ops/s
Iteration  25: 1071786.817 ops/s
Iteration  26: 1066530.142 ops/s
Iteration  27: 1069908.015 ops/s
Iteration  28: 1067349.916 ops/s
Iteration  29: 1072067.834 ops/s
Iteration  30: 1069944.312 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_retainAll":
  1068977.868 ±(99.9%) 3943.759 ops/s [Average]
  (min, avg, max) = (1052490.290, 1068977.868, 1076420.657), stdev = 5902.833
  CI (99.9%): [1065034.109, 1072921.627] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_retainAll  thrpt   30  1068977.868 ± 3943.759  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_retainAll_iterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_retainAll_iterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 702509.279 ops/s
# Warmup Iteration   2: 824116.309 ops/s
# Warmup Iteration   3: 1018632.121 ops/s
# Warmup Iteration   4: 1014080.821 ops/s
# Warmup Iteration   5: 1014407.858 ops/s
# Warmup Iteration   6: 1015473.101 ops/s
# Warmup Iteration   7: 1013791.505 ops/s
# Warmup Iteration   8: 1012533.474 ops/s
# Warmup Iteration   9: 871297.363 ops/s
# Warmup Iteration  10: 998526.407 ops/s
# Warmup Iteration  11: 1013031.632 ops/s
# Warmup Iteration  12: 1013818.869 ops/s
# Warmup Iteration  13: 1011896.055 ops/s
# Warmup Iteration  14: 1013367.182 ops/s
# Warmup Iteration  15: 1014545.059 ops/s
# Warmup Iteration  16: 1014141.160 ops/s
# Warmup Iteration  17: 1075128.048 ops/s
# Warmup Iteration  18: 1073449.691 ops/s
# Warmup Iteration  19: 1066244.500 ops/s
# Warmup Iteration  20: 1071383.588 ops/s
# Warmup Iteration  21: 1071924.654 ops/s
# Warmup Iteration  22: 1074157.377 ops/s
# Warmup Iteration  23: 1076050.538 ops/s
# Warmup Iteration  24: 1070047.067 ops/s
# Warmup Iteration  25: 1073878.694 ops/s
# Warmup Iteration  26: 1071361.146 ops/s
# Warmup Iteration  27: 1074329.169 ops/s
# Warmup Iteration  28: 1071967.789 ops/s
# Warmup Iteration  29: 1072574.257 ops/s
# Warmup Iteration  30: 1069343.612 ops/s
Iteration   1: 1073385.557 ops/s
Iteration   2: 1075032.853 ops/s
Iteration   3: 1071657.267 ops/s
Iteration   4: 1076485.287 ops/s
Iteration   5: 1066644.840 ops/s
Iteration   6: 1073474.176 ops/s
Iteration   7: 1072908.723 ops/s
Iteration   8: 1080497.935 ops/s
Iteration   9: 1072545.409 ops/s
Iteration  10: 1073210.879 ops/s
Iteration  11: 1055894.427 ops/s
Iteration  12: 1036516.961 ops/s
Iteration  13: 1069144.864 ops/s
Iteration  14: 1068060.872 ops/s
Iteration  15: 1072479.330 ops/s
Iteration  16: 1073205.928 ops/s
Iteration  17: 1072010.179 ops/s
Iteration  18: 1075295.889 ops/s
Iteration  19: 1074658.872 ops/s
Iteration  20: 1069601.785 ops/s
Iteration  21: 1070397.473 ops/s
Iteration  22: 1074715.429 ops/s
Iteration  23: 1078325.641 ops/s
Iteration  24: 1072381.820 ops/s
Iteration  25: 1073376.052 ops/s
Iteration  26: 1075421.299 ops/s
Iteration  27: 1072188.029 ops/s
Iteration  28: 1074406.467 ops/s
Iteration  29: 1072920.317 ops/s
Iteration  30: 1075319.291 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_retainAll_iterable":
  1071405.462 ±(99.9%) 5227.364 ops/s [Average]
  (min, avg, max) = (1036516.961, 1071405.462, 1080497.935), stdev = 7824.073
  CI (99.9%): [1066178.098, 1076632.826] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score      Error  Units
UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_retainAll_iterable  thrpt   30  1071405.462 ± 5227.364  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7268958.323 ops/s
# Warmup Iteration   2: 14173509.413 ops/s
# Warmup Iteration   3: 13829233.792 ops/s
# Warmup Iteration   4: 15100765.005 ops/s
# Warmup Iteration   5: 15144334.699 ops/s
# Warmup Iteration   6: 15161247.041 ops/s
# Warmup Iteration   7: 15195435.681 ops/s
# Warmup Iteration   8: 15209660.601 ops/s
# Warmup Iteration   9: 15130380.792 ops/s
# Warmup Iteration  10: 15182617.778 ops/s
# Warmup Iteration  11: 15170027.794 ops/s
# Warmup Iteration  12: 15043151.293 ops/s
# Warmup Iteration  13: 15177552.182 ops/s
# Warmup Iteration  14: 15183096.124 ops/s
# Warmup Iteration  15: 15035868.610 ops/s
# Warmup Iteration  16: 15137910.309 ops/s
# Warmup Iteration  17: 15153604.695 ops/s
# Warmup Iteration  18: 15201503.722 ops/s
# Warmup Iteration  19: 15225619.993 ops/s
# Warmup Iteration  20: 15164457.218 ops/s
# Warmup Iteration  21: 15183585.146 ops/s
# Warmup Iteration  22: 15151199.787 ops/s
# Warmup Iteration  23: 15164234.449 ops/s
# Warmup Iteration  24: 15095046.516 ops/s
# Warmup Iteration  25: 15160499.402 ops/s
# Warmup Iteration  26: 15149017.681 ops/s
# Warmup Iteration  27: 15176301.644 ops/s
# Warmup Iteration  28: 15168103.869 ops/s
# Warmup Iteration  29: 15147711.349 ops/s
# Warmup Iteration  30: 15191692.319 ops/s
Iteration   1: 15218033.922 ops/s
Iteration   2: 15124682.233 ops/s
Iteration   3: 15155517.562 ops/s
Iteration   4: 15040714.535 ops/s
Iteration   5: 15135381.997 ops/s
Iteration   6: 15142176.618 ops/s
Iteration   7: 15128545.437 ops/s
Iteration   8: 15158481.806 ops/s
Iteration   9: 15193198.514 ops/s
Iteration  10: 15178524.169 ops/s
Iteration  11: 15179666.882 ops/s
Iteration  12: 15145591.781 ops/s
Iteration  13: 15177049.689 ops/s
Iteration  14: 15140085.539 ops/s
Iteration  15: 15158732.041 ops/s
Iteration  16: 14934962.515 ops/s
Iteration  17: 15157819.641 ops/s
Iteration  18: 15142896.456 ops/s
Iteration  19: 15151357.562 ops/s
Iteration  20: 15227258.983 ops/s
Iteration  21: 15176806.654 ops/s
Iteration  22: 15210432.038 ops/s
Iteration  23: 15212727.647 ops/s
Iteration  24: 15118165.911 ops/s
Iteration  25: 15191549.948 ops/s
Iteration  26: 15166829.440 ops/s
Iteration  27: 15172971.808 ops/s
Iteration  28: 15148521.814 ops/s
Iteration  29: 15112205.525 ops/s
Iteration  30: 14946912.210 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_select":
  15144926.696 ±(99.9%) 44494.162 ops/s [Average]
  (min, avg, max) = (14934962.515, 15144926.696, 15227258.983), stdev = 66596.772
  CI (99.9%): [15100432.534, 15189420.858] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_select  thrpt   30  15144926.696 ± 44494.162  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3609032.266 ops/s
# Warmup Iteration   2: 5906239.564 ops/s
# Warmup Iteration   3: 6951065.937 ops/s
# Warmup Iteration   4: 6931831.737 ops/s
# Warmup Iteration   5: 6926890.339 ops/s
# Warmup Iteration   6: 6906305.937 ops/s
# Warmup Iteration   7: 6924489.086 ops/s
# Warmup Iteration   8: 6915699.312 ops/s
# Warmup Iteration   9: 6942423.218 ops/s
# Warmup Iteration  10: 6938548.595 ops/s
# Warmup Iteration  11: 6964429.720 ops/s
# Warmup Iteration  12: 6873155.861 ops/s
# Warmup Iteration  13: 6956881.339 ops/s
# Warmup Iteration  14: 6832354.157 ops/s
# Warmup Iteration  15: 6941030.153 ops/s
# Warmup Iteration  16: 6961119.253 ops/s
# Warmup Iteration  17: 6971707.303 ops/s
# Warmup Iteration  18: 6881918.403 ops/s
# Warmup Iteration  19: 6901549.715 ops/s
# Warmup Iteration  20: 6959500.509 ops/s
# Warmup Iteration  21: 6875863.710 ops/s
# Warmup Iteration  22: 6948485.588 ops/s
# Warmup Iteration  23: 6931630.404 ops/s
# Warmup Iteration  24: 6932981.174 ops/s
# Warmup Iteration  25: 6894403.063 ops/s
# Warmup Iteration  26: 6941614.436 ops/s
# Warmup Iteration  27: 6917983.927 ops/s
# Warmup Iteration  28: 6908495.522 ops/s
# Warmup Iteration  29: 6922153.248 ops/s
# Warmup Iteration  30: 6943114.792 ops/s
Iteration   1: 6929671.039 ops/s
Iteration   2: 6926784.906 ops/s
Iteration   3: 6925789.047 ops/s
Iteration   4: 6924922.619 ops/s
Iteration   5: 6922604.781 ops/s
Iteration   6: 6951554.448 ops/s
Iteration   7: 6920652.432 ops/s
Iteration   8: 6937055.147 ops/s
Iteration   9: 6915273.319 ops/s
Iteration  10: 6920919.663 ops/s
Iteration  11: 6905875.140 ops/s
Iteration  12: 6945175.574 ops/s
Iteration  13: 6944268.314 ops/s
Iteration  14: 6936474.141 ops/s
Iteration  15: 6963291.389 ops/s
Iteration  16: 6915054.878 ops/s
Iteration  17: 6833743.119 ops/s
Iteration  18: 6920862.983 ops/s
Iteration  19: 6947809.003 ops/s
Iteration  20: 6927393.482 ops/s
Iteration  21: 6989402.104 ops/s
Iteration  22: 6930365.886 ops/s
Iteration  23: 6949386.579 ops/s
Iteration  24: 6914107.796 ops/s
Iteration  25: 6915816.384 ops/s
Iteration  26: 6942848.867 ops/s
Iteration  27: 6893092.601 ops/s
Iteration  28: 6940929.196 ops/s
Iteration  29: 6959892.117 ops/s
Iteration  30: 6900601.154 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_size":
  6928387.270 ±(99.9%) 17874.403 ops/s [Average]
  (min, avg, max) = (6833743.119, 6928387.270, 6989402.104), stdev = 26753.567
  CI (99.9%): [6910512.867, 6946261.673] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_size  thrpt   30  6928387.270 ± 17874.403  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_testEquals$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_testEquals

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 173190315.537 ops/s
# Warmup Iteration   2: 297217194.799 ops/s
# Warmup Iteration   3: 284294715.844 ops/s
# Warmup Iteration   4: 315447028.010 ops/s
# Warmup Iteration   5: 318362919.215 ops/s
# Warmup Iteration   6: 318000585.724 ops/s
# Warmup Iteration   7: 317409163.737 ops/s
# Warmup Iteration   8: 319256794.757 ops/s
# Warmup Iteration   9: 318852253.326 ops/s
# Warmup Iteration  10: 315661799.249 ops/s
# Warmup Iteration  11: 317187783.985 ops/s
# Warmup Iteration  12: 318788437.926 ops/s
# Warmup Iteration  13: 319564925.088 ops/s
# Warmup Iteration  14: 318165894.319 ops/s
# Warmup Iteration  15: 317531874.269 ops/s
# Warmup Iteration  16: 317970865.111 ops/s
# Warmup Iteration  17: 317432383.947 ops/s
# Warmup Iteration  18: 318063318.145 ops/s
# Warmup Iteration  19: 317681164.831 ops/s
# Warmup Iteration  20: 317320740.657 ops/s
# Warmup Iteration  21: 316127427.487 ops/s
# Warmup Iteration  22: 317859642.728 ops/s
# Warmup Iteration  23: 316522704.823 ops/s
# Warmup Iteration  24: 318324663.928 ops/s
# Warmup Iteration  25: 317518064.611 ops/s
# Warmup Iteration  26: 313521488.119 ops/s
# Warmup Iteration  27: 317329829.291 ops/s
# Warmup Iteration  28: 317707141.079 ops/s
# Warmup Iteration  29: 317093615.029 ops/s
# Warmup Iteration  30: 318017046.601 ops/s
Iteration   1: 315890452.390 ops/s
Iteration   2: 318380660.353 ops/s
Iteration   3: 318705542.486 ops/s
Iteration   4: 316827154.360 ops/s
Iteration   5: 317455407.454 ops/s
Iteration   6: 316688119.309 ops/s
Iteration   7: 311235027.218 ops/s
Iteration   8: 317561381.773 ops/s
Iteration   9: 317574558.061 ops/s
Iteration  10: 317508414.899 ops/s
Iteration  11: 318630698.601 ops/s
Iteration  12: 318138866.575 ops/s
Iteration  13: 317500705.712 ops/s
Iteration  14: 318865942.969 ops/s
Iteration  15: 317610569.460 ops/s
Iteration  16: 317068004.207 ops/s
Iteration  17: 317072605.820 ops/s
Iteration  18: 317259033.204 ops/s
Iteration  19: 317562010.776 ops/s
Iteration  20: 316867400.921 ops/s
Iteration  21: 315789159.994 ops/s
Iteration  22: 315866870.148 ops/s
Iteration  23: 318152844.706 ops/s
Iteration  24: 317303961.879 ops/s
Iteration  25: 311743697.040 ops/s
Iteration  26: 317267762.190 ops/s
Iteration  27: 317292798.209 ops/s
Iteration  28: 317148256.209 ops/s
Iteration  29: 318043662.309 ops/s
Iteration  30: 316377189.646 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_testEquals":
  316979625.296 ±(99.9%) 1126440.697 ops/s [Average]
  (min, avg, max) = (311235027.218, 316979625.296, 318865942.969), stdev = 1686003.533
  CI (99.9%): [315853184.599, 318106065.993] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt          Score         Error  Units
UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_testEquals  thrpt   30  316979625.296 ± 1126440.697  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_testHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_testHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 174321754.413 ops/s
# Warmup Iteration   2: 297969859.128 ops/s
# Warmup Iteration   3: 288306531.384 ops/s
# Warmup Iteration   4: 316903480.239 ops/s
# Warmup Iteration   5: 317423894.937 ops/s
# Warmup Iteration   6: 317451047.207 ops/s
# Warmup Iteration   7: 317120355.153 ops/s
# Warmup Iteration   8: 318770297.968 ops/s
# Warmup Iteration   9: 316404015.412 ops/s
# Warmup Iteration  10: 316900147.860 ops/s
# Warmup Iteration  11: 313534015.176 ops/s
# Warmup Iteration  12: 315913650.860 ops/s
# Warmup Iteration  13: 314542815.286 ops/s
# Warmup Iteration  14: 316721518.810 ops/s
# Warmup Iteration  15: 317627644.434 ops/s
# Warmup Iteration  16: 316881734.069 ops/s
# Warmup Iteration  17: 316964049.009 ops/s
# Warmup Iteration  18: 313993831.913 ops/s
# Warmup Iteration  19: 317402618.260 ops/s
# Warmup Iteration  20: 316741814.642 ops/s
# Warmup Iteration  21: 314292865.516 ops/s
# Warmup Iteration  22: 317440725.166 ops/s
# Warmup Iteration  23: 315995743.081 ops/s
# Warmup Iteration  24: 316197628.549 ops/s
# Warmup Iteration  25: 316761708.467 ops/s
# Warmup Iteration  26: 316046884.404 ops/s
# Warmup Iteration  27: 315810307.243 ops/s
# Warmup Iteration  28: 315908031.357 ops/s
# Warmup Iteration  29: 317067314.096 ops/s
# Warmup Iteration  30: 317262626.379 ops/s
Iteration   1: 316005001.340 ops/s
Iteration   2: 315922513.465 ops/s
Iteration   3: 317907684.586 ops/s
Iteration   4: 317581884.872 ops/s
Iteration   5: 312917655.228 ops/s
Iteration   6: 315780412.258 ops/s
Iteration   7: 315725184.173 ops/s
Iteration   8: 317573879.924 ops/s
Iteration   9: 316986819.343 ops/s
Iteration  10: 317612698.295 ops/s
Iteration  11: 316494700.272 ops/s
Iteration  12: 316925688.926 ops/s
Iteration  13: 316821117.467 ops/s
Iteration  14: 317345315.250 ops/s
Iteration  15: 318000577.052 ops/s
Iteration  16: 317010154.559 ops/s
Iteration  17: 315826177.580 ops/s
Iteration  18: 315685645.644 ops/s
Iteration  19: 316164346.309 ops/s
Iteration  20: 316709024.523 ops/s
Iteration  21: 316931036.031 ops/s
Iteration  22: 318334770.779 ops/s
Iteration  23: 311544297.215 ops/s
Iteration  24: 315518532.852 ops/s
Iteration  25: 317319826.598 ops/s
Iteration  26: 318023921.223 ops/s
Iteration  27: 316392142.699 ops/s
Iteration  28: 317280001.634 ops/s
Iteration  29: 316426831.966 ops/s
Iteration  30: 316260351.172 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_testHashCode":
  316500939.775 ±(99.9%) 943602.126 ops/s [Average]
  (min, avg, max) = (311544297.215, 316500939.775, 318334770.779), stdev = 1412339.347
  CI (99.9%): [315557337.649, 317444541.900] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt          Score        Error  Units
UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_testHashCode  thrpt   30  316500939.775 ± 943602.126  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 172623444.014 ops/s
# Warmup Iteration   2: 298210203.512 ops/s
# Warmup Iteration   3: 282859793.080 ops/s
# Warmup Iteration   4: 315694538.358 ops/s
# Warmup Iteration   5: 315781976.897 ops/s
# Warmup Iteration   6: 316741784.290 ops/s
# Warmup Iteration   7: 316063022.579 ops/s
# Warmup Iteration   8: 316603257.810 ops/s
# Warmup Iteration   9: 316388653.671 ops/s
# Warmup Iteration  10: 316117575.158 ops/s
# Warmup Iteration  11: 316691486.546 ops/s
# Warmup Iteration  12: 316411315.581 ops/s
# Warmup Iteration  13: 315202414.862 ops/s
# Warmup Iteration  14: 316235217.498 ops/s
# Warmup Iteration  15: 313561836.065 ops/s
# Warmup Iteration  16: 314508191.871 ops/s
# Warmup Iteration  17: 314353230.831 ops/s
# Warmup Iteration  18: 314987298.747 ops/s
# Warmup Iteration  19: 316015872.963 ops/s
# Warmup Iteration  20: 316960434.151 ops/s
# Warmup Iteration  21: 315966159.211 ops/s
# Warmup Iteration  22: 316614448.004 ops/s
# Warmup Iteration  23: 316517923.328 ops/s
# Warmup Iteration  24: 315205618.135 ops/s
# Warmup Iteration  25: 316860966.670 ops/s
# Warmup Iteration  26: 315854094.443 ops/s
# Warmup Iteration  27: 316854084.749 ops/s
# Warmup Iteration  28: 317161270.379 ops/s
# Warmup Iteration  29: 314295508.383 ops/s
# Warmup Iteration  30: 316299405.715 ops/s
Iteration   1: 318132679.840 ops/s
Iteration   2: 315918338.927 ops/s
Iteration   3: 317039079.581 ops/s
Iteration   4: 314198829.477 ops/s
Iteration   5: 312126143.501 ops/s
Iteration   6: 315632241.260 ops/s
Iteration   7: 317484079.874 ops/s
Iteration   8: 316528161.927 ops/s
Iteration   9: 316674218.802 ops/s
Iteration  10: 316258330.691 ops/s
Iteration  11: 317227358.028 ops/s
Iteration  12: 316490388.134 ops/s
Iteration  13: 317469640.471 ops/s
Iteration  14: 316537787.295 ops/s
Iteration  15: 317398043.319 ops/s
Iteration  16: 316585232.392 ops/s
Iteration  17: 316292667.891 ops/s
Iteration  18: 316681272.858 ops/s
Iteration  19: 316459918.638 ops/s
Iteration  20: 316604386.215 ops/s
Iteration  21: 312063879.684 ops/s
Iteration  22: 315301246.199 ops/s
Iteration  23: 313956469.755 ops/s
Iteration  24: 316742951.741 ops/s
Iteration  25: 315910170.517 ops/s
Iteration  26: 316722053.425 ops/s
Iteration  27: 315754612.857 ops/s
Iteration  28: 315553416.984 ops/s
Iteration  29: 315660525.594 ops/s
Iteration  30: 316180692.316 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_testToString":
  316052827.273 ±(99.9%) 930124.950 ops/s [Average]
  (min, avg, max) = (312063879.684, 316052827.273, 318132679.840), stdev = 1392167.344
  CI (99.9%): [315122702.323, 316982952.223] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt          Score        Error  Units
UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_testToString  thrpt   30  316052827.273 ± 930124.950  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2370763.736 ops/s
# Warmup Iteration   2: 5488506.865 ops/s
# Warmup Iteration   3: 4545556.406 ops/s
# Warmup Iteration   4: 5513020.384 ops/s
# Warmup Iteration   5: 5502175.821 ops/s
# Warmup Iteration   6: 5513582.805 ops/s
# Warmup Iteration   7: 5495579.853 ops/s
# Warmup Iteration   8: 5507135.639 ops/s
# Warmup Iteration   9: 5506945.150 ops/s
# Warmup Iteration  10: 5510003.956 ops/s
# Warmup Iteration  11: 5498374.611 ops/s
# Warmup Iteration  12: 5487842.594 ops/s
# Warmup Iteration  13: 5494295.226 ops/s
# Warmup Iteration  14: 5504952.616 ops/s
# Warmup Iteration  15: 5507441.280 ops/s
# Warmup Iteration  16: 5506612.833 ops/s
# Warmup Iteration  17: 5494426.868 ops/s
# Warmup Iteration  18: 5488814.816 ops/s
# Warmup Iteration  19: 5504823.219 ops/s
# Warmup Iteration  20: 5464057.004 ops/s
# Warmup Iteration  21: 5509895.720 ops/s
# Warmup Iteration  22: 5504524.937 ops/s
# Warmup Iteration  23: 5495221.453 ops/s
# Warmup Iteration  24: 5495789.245 ops/s
# Warmup Iteration  25: 5508977.093 ops/s
# Warmup Iteration  26: 5493689.820 ops/s
# Warmup Iteration  27: 5506286.199 ops/s
# Warmup Iteration  28: 5504063.288 ops/s
# Warmup Iteration  29: 5479582.652 ops/s
# Warmup Iteration  30: 5509494.123 ops/s
Iteration   1: 5500657.685 ops/s
Iteration   2: 5519683.384 ops/s
Iteration   3: 5481801.754 ops/s
Iteration   4: 5505038.289 ops/s
Iteration   5: 5499169.045 ops/s
Iteration   6: 5415621.773 ops/s
Iteration   7: 5495587.600 ops/s
Iteration   8: 5503231.947 ops/s
Iteration   9: 5504015.387 ops/s
Iteration  10: 5498987.173 ops/s
Iteration  11: 5488349.350 ops/s
Iteration  12: 5495998.704 ops/s
Iteration  13: 5495363.531 ops/s
Iteration  14: 5506091.366 ops/s
Iteration  15: 5510642.639 ops/s
Iteration  16: 5506740.859 ops/s
Iteration  17: 5503851.605 ops/s
Iteration  18: 5499051.657 ops/s
Iteration  19: 5511947.690 ops/s
Iteration  20: 5478070.674 ops/s
Iteration  21: 5500234.389 ops/s
Iteration  22: 5507067.397 ops/s
Iteration  23: 5494234.655 ops/s
Iteration  24: 5513130.985 ops/s
Iteration  25: 5511686.177 ops/s
Iteration  26: 5510008.894 ops/s
Iteration  27: 5477277.915 ops/s
Iteration  28: 5505148.506 ops/s
Iteration  29: 5485850.539 ops/s
Iteration  30: 5490845.473 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_toArray":
  5497179.568 ±(99.9%) 12407.089 ops/s [Average]
  (min, avg, max) = (5415621.773, 5497179.568, 5519683.384), stdev = 18570.348
  CI (99.9%): [5484772.479, 5509586.657] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_toArray  thrpt   30  5497179.568 ± 12407.089  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_toBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_toBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1388843.482 ops/s
# Warmup Iteration   2: 2480188.497 ops/s
# Warmup Iteration   3: 2469011.476 ops/s
# Warmup Iteration   4: 2093297.150 ops/s
# Warmup Iteration   5: 2489934.939 ops/s
# Warmup Iteration   6: 2470000.335 ops/s
# Warmup Iteration   7: 2488770.390 ops/s
# Warmup Iteration   8: 2488884.707 ops/s
# Warmup Iteration   9: 2487838.172 ops/s
# Warmup Iteration  10: 2491056.487 ops/s
# Warmup Iteration  11: 2490247.455 ops/s
# Warmup Iteration  12: 2490052.767 ops/s
# Warmup Iteration  13: 2491503.207 ops/s
# Warmup Iteration  14: 2492646.125 ops/s
# Warmup Iteration  15: 2490157.435 ops/s
# Warmup Iteration  16: 2491646.234 ops/s
# Warmup Iteration  17: 2491736.020 ops/s
# Warmup Iteration  18: 2492129.347 ops/s
# Warmup Iteration  19: 2491609.384 ops/s
# Warmup Iteration  20: 2488142.977 ops/s
# Warmup Iteration  21: 2491429.547 ops/s
# Warmup Iteration  22: 2488682.402 ops/s
# Warmup Iteration  23: 2488468.171 ops/s
# Warmup Iteration  24: 2488010.632 ops/s
# Warmup Iteration  25: 2490765.182 ops/s
# Warmup Iteration  26: 2490615.106 ops/s
# Warmup Iteration  27: 2481344.774 ops/s
# Warmup Iteration  28: 2492665.225 ops/s
# Warmup Iteration  29: 2490893.119 ops/s
# Warmup Iteration  30: 2486529.533 ops/s
Iteration   1: 2483502.145 ops/s
Iteration   2: 2496716.700 ops/s
Iteration   3: 2493604.361 ops/s
Iteration   4: 2493004.879 ops/s
Iteration   5: 2483370.402 ops/s
Iteration   6: 2494533.710 ops/s
Iteration   7: 2483011.172 ops/s
Iteration   8: 2491276.014 ops/s
Iteration   9: 2486424.807 ops/s
Iteration  10: 2490178.812 ops/s
Iteration  11: 2493432.839 ops/s
Iteration  12: 2495589.032 ops/s
Iteration  13: 2453161.253 ops/s
Iteration  14: 2486933.763 ops/s
Iteration  15: 2483969.066 ops/s
Iteration  16: 2494129.779 ops/s
Iteration  17: 2486187.445 ops/s
Iteration  18: 2490734.819 ops/s
Iteration  19: 2493479.755 ops/s
Iteration  20: 2489283.534 ops/s
Iteration  21: 2492172.756 ops/s
Iteration  22: 2488271.101 ops/s
Iteration  23: 2491428.738 ops/s
Iteration  24: 2489986.786 ops/s
Iteration  25: 2492159.908 ops/s
Iteration  26: 2489809.269 ops/s
Iteration  27: 2492378.789 ops/s
Iteration  28: 2488875.841 ops/s
Iteration  29: 2489257.620 ops/s
Iteration  30: 2491305.209 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_toBag":
  2488939.010 ±(99.9%) 5141.835 ops/s [Average]
  (min, avg, max) = (2453161.253, 2488939.010, 2496716.700), stdev = 7696.057
  CI (99.9%): [2483797.175, 2494080.845] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_toBag  thrpt   30  2488939.010 ± 5141.835  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1446845.833 ops/s
# Warmup Iteration   2: 3398761.403 ops/s
# Warmup Iteration   3: 2804131.526 ops/s
# Warmup Iteration   4: 3401966.801 ops/s
# Warmup Iteration   5: 3374480.338 ops/s
# Warmup Iteration   6: 3398861.459 ops/s
# Warmup Iteration   7: 3398644.482 ops/s
# Warmup Iteration   8: 3395209.378 ops/s
# Warmup Iteration   9: 3398611.459 ops/s
# Warmup Iteration  10: 3398283.148 ops/s
# Warmup Iteration  11: 3391142.742 ops/s
# Warmup Iteration  12: 3397065.072 ops/s
# Warmup Iteration  13: 3400835.456 ops/s
# Warmup Iteration  14: 3394911.310 ops/s
# Warmup Iteration  15: 3396491.671 ops/s
# Warmup Iteration  16: 3388778.974 ops/s
# Warmup Iteration  17: 3395288.613 ops/s
# Warmup Iteration  18: 3400765.071 ops/s
# Warmup Iteration  19: 3398987.384 ops/s
# Warmup Iteration  20: 3398603.771 ops/s
# Warmup Iteration  21: 3405553.893 ops/s
# Warmup Iteration  22: 3396415.382 ops/s
# Warmup Iteration  23: 3390136.284 ops/s
# Warmup Iteration  24: 3394947.335 ops/s
# Warmup Iteration  25: 3391758.583 ops/s
# Warmup Iteration  26: 3374579.461 ops/s
# Warmup Iteration  27: 3403667.321 ops/s
# Warmup Iteration  28: 3398284.701 ops/s
# Warmup Iteration  29: 3393933.625 ops/s
# Warmup Iteration  30: 3400551.329 ops/s
Iteration   1: 3398345.648 ops/s
Iteration   2: 3398025.629 ops/s
Iteration   3: 3404082.877 ops/s
Iteration   4: 3393974.216 ops/s
Iteration   5: 3406325.049 ops/s
Iteration   6: 3392332.471 ops/s
Iteration   7: 3391994.844 ops/s
Iteration   8: 3396983.566 ops/s
Iteration   9: 3397606.855 ops/s
Iteration  10: 3384945.805 ops/s
Iteration  11: 3394956.936 ops/s
Iteration  12: 3404483.978 ops/s
Iteration  13: 3392166.345 ops/s
Iteration  14: 3394817.102 ops/s
Iteration  15: 3384581.808 ops/s
Iteration  16: 3400317.884 ops/s
Iteration  17: 3339545.156 ops/s
Iteration  18: 3344545.360 ops/s
Iteration  19: 3392137.451 ops/s
Iteration  20: 3390996.415 ops/s
Iteration  21: 3404412.146 ops/s
Iteration  22: 3403469.471 ops/s
Iteration  23: 3377102.337 ops/s
Iteration  24: 3393456.957 ops/s
Iteration  25: 3398592.165 ops/s
Iteration  26: 3388545.625 ops/s
Iteration  27: 3402134.376 ops/s
Iteration  28: 3404258.182 ops/s
Iteration  29: 3379616.850 ops/s
Iteration  30: 3393017.546 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_toList":
  3391592.368 ±(99.9%) 10235.586 ops/s [Average]
  (min, avg, max) = (3339545.156, 3391592.368, 3406325.049), stdev = 15320.145
  CI (99.9%): [3381356.782, 3401827.955] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_toList  thrpt   30  3391592.368 ± 10235.586  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_toSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_toSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2181652.995 ops/s
# Warmup Iteration   2: 5133401.049 ops/s
# Warmup Iteration   3: 4212975.069 ops/s
# Warmup Iteration   4: 5146979.418 ops/s
# Warmup Iteration   5: 5140829.362 ops/s
# Warmup Iteration   6: 5137284.367 ops/s
# Warmup Iteration   7: 5145359.673 ops/s
# Warmup Iteration   8: 5093380.182 ops/s
# Warmup Iteration   9: 5061159.370 ops/s
# Warmup Iteration  10: 5125920.303 ops/s
# Warmup Iteration  11: 5152520.634 ops/s
# Warmup Iteration  12: 5134544.975 ops/s
# Warmup Iteration  13: 5133625.050 ops/s
# Warmup Iteration  14: 5146625.337 ops/s
# Warmup Iteration  15: 5147799.939 ops/s
# Warmup Iteration  16: 5131957.128 ops/s
# Warmup Iteration  17: 5126477.830 ops/s
# Warmup Iteration  18: 5148024.513 ops/s
# Warmup Iteration  19: 5137538.929 ops/s
# Warmup Iteration  20: 5141019.135 ops/s
# Warmup Iteration  21: 5138967.153 ops/s
# Warmup Iteration  22: 5144904.960 ops/s
# Warmup Iteration  23: 5095900.555 ops/s
# Warmup Iteration  24: 5155018.386 ops/s
# Warmup Iteration  25: 5149775.507 ops/s
# Warmup Iteration  26: 5138969.025 ops/s
# Warmup Iteration  27: 5147913.271 ops/s
# Warmup Iteration  28: 5139686.554 ops/s
# Warmup Iteration  29: 5138599.570 ops/s
# Warmup Iteration  30: 5098637.567 ops/s
Iteration   1: 5158617.787 ops/s
Iteration   2: 5137415.488 ops/s
Iteration   3: 5134131.920 ops/s
Iteration   4: 5154110.350 ops/s
Iteration   5: 5141880.083 ops/s
Iteration   6: 5149831.316 ops/s
Iteration   7: 5135192.597 ops/s
Iteration   8: 5136269.638 ops/s
Iteration   9: 5156986.624 ops/s
Iteration  10: 5055103.458 ops/s
Iteration  11: 5138739.862 ops/s
Iteration  12: 5127732.597 ops/s
Iteration  13: 5146227.104 ops/s
Iteration  14: 5138725.209 ops/s
Iteration  15: 5148332.936 ops/s
Iteration  16: 5147174.356 ops/s
Iteration  17: 5147811.324 ops/s
Iteration  18: 5061515.237 ops/s
Iteration  19: 5158614.294 ops/s
Iteration  20: 5138041.209 ops/s
Iteration  21: 5140850.069 ops/s
Iteration  22: 5151006.395 ops/s
Iteration  23: 5135784.178 ops/s
Iteration  24: 5156740.575 ops/s
Iteration  25: 5142926.369 ops/s
Iteration  26: 5131079.133 ops/s
Iteration  27: 5139642.405 ops/s
Iteration  28: 5149287.669 ops/s
Iteration  29: 5138337.685 ops/s
Iteration  30: 5157585.999 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_toSet":
  5138523.129 ±(99.9%) 15666.489 ops/s [Average]
  (min, avg, max) = (5055103.458, 5138523.129, 5158617.787), stdev = 23448.865
  CI (99.9%): [5122856.640, 5154189.618] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_toSet  thrpt   30  5138523.129 ± 15666.489  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_with$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_with

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 715337.842 ops/s
# Warmup Iteration   2: 799293.664 ops/s
# Warmup Iteration   3: 1026761.185 ops/s
# Warmup Iteration   4: 1028647.144 ops/s
# Warmup Iteration   5: 1025469.046 ops/s
# Warmup Iteration   6: 1025477.859 ops/s
# Warmup Iteration   7: 1018888.792 ops/s
# Warmup Iteration   8: 1021076.552 ops/s
# Warmup Iteration   9: 1028625.417 ops/s
# Warmup Iteration  10: 860266.147 ops/s
# Warmup Iteration  11: 1026062.712 ops/s
# Warmup Iteration  12: 1028956.852 ops/s
# Warmup Iteration  13: 1028951.886 ops/s
# Warmup Iteration  14: 1028231.713 ops/s
# Warmup Iteration  15: 1024180.546 ops/s
# Warmup Iteration  16: 1022598.019 ops/s
# Warmup Iteration  17: 1093611.835 ops/s
# Warmup Iteration  18: 1092974.845 ops/s
# Warmup Iteration  19: 1093045.324 ops/s
# Warmup Iteration  20: 1092332.279 ops/s
# Warmup Iteration  21: 1092508.972 ops/s
# Warmup Iteration  22: 1092337.824 ops/s
# Warmup Iteration  23: 1095241.023 ops/s
# Warmup Iteration  24: 1093684.398 ops/s
# Warmup Iteration  25: 1092669.443 ops/s
# Warmup Iteration  26: 1092296.269 ops/s
# Warmup Iteration  27: 1093307.100 ops/s
# Warmup Iteration  28: 1093520.378 ops/s
# Warmup Iteration  29: 1095028.710 ops/s
# Warmup Iteration  30: 1097013.227 ops/s
Iteration   1: 1090879.520 ops/s
Iteration   2: 1097036.589 ops/s
Iteration   3: 1099196.416 ops/s
Iteration   4: 1095076.431 ops/s
Iteration   5: 1093230.420 ops/s
Iteration   6: 1091830.714 ops/s
Iteration   7: 1094156.081 ops/s
Iteration   8: 1097409.537 ops/s
Iteration   9: 1096684.826 ops/s
Iteration  10: 1092662.540 ops/s
Iteration  11: 1097069.628 ops/s
Iteration  12: 1095442.562 ops/s
Iteration  13: 1093038.230 ops/s
Iteration  14: 1076801.587 ops/s
Iteration  15: 1096010.623 ops/s
Iteration  16: 1093935.042 ops/s
Iteration  17: 1092193.301 ops/s
Iteration  18: 1095122.860 ops/s
Iteration  19: 1098569.420 ops/s
Iteration  20: 1094826.366 ops/s
Iteration  21: 1093335.075 ops/s
Iteration  22: 1097008.815 ops/s
Iteration  23: 1099121.350 ops/s
Iteration  24: 1096410.503 ops/s
Iteration  25: 1095628.972 ops/s
Iteration  26: 1091423.309 ops/s
Iteration  27: 1088155.722 ops/s
Iteration  28: 1093838.333 ops/s
Iteration  29: 1092056.996 ops/s
Iteration  30: 1096519.981 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_with":
  1094155.725 ±(99.9%) 2790.284 ops/s [Average]
  (min, avg, max) = (1076801.587, 1094155.725, 1099196.416), stdev = 4176.366
  CI (99.9%): [1091365.441, 1096946.009] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_with  thrpt   30  1094155.725 ± 2790.284  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_withAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_withAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 702913.628 ops/s
# Warmup Iteration   2: 791592.594 ops/s
# Warmup Iteration   3: 1020465.747 ops/s
# Warmup Iteration   4: 1016036.321 ops/s
# Warmup Iteration   5: 1022056.712 ops/s
# Warmup Iteration   6: 1019824.596 ops/s
# Warmup Iteration   7: 1018818.762 ops/s
# Warmup Iteration   8: 1022087.863 ops/s
# Warmup Iteration   9: 1012897.511 ops/s
# Warmup Iteration  10: 849498.191 ops/s
# Warmup Iteration  11: 1023244.882 ops/s
# Warmup Iteration  12: 1019735.919 ops/s
# Warmup Iteration  13: 1020489.498 ops/s
# Warmup Iteration  14: 1023739.331 ops/s
# Warmup Iteration  15: 1015270.789 ops/s
# Warmup Iteration  16: 1021350.758 ops/s
# Warmup Iteration  17: 1086338.616 ops/s
# Warmup Iteration  18: 1090224.489 ops/s
# Warmup Iteration  19: 1089653.621 ops/s
# Warmup Iteration  20: 1078325.729 ops/s
# Warmup Iteration  21: 1088813.975 ops/s
# Warmup Iteration  22: 1086864.610 ops/s
# Warmup Iteration  23: 1087072.434 ops/s
# Warmup Iteration  24: 1086548.308 ops/s
# Warmup Iteration  25: 1088866.511 ops/s
# Warmup Iteration  26: 1088552.259 ops/s
# Warmup Iteration  27: 1087455.638 ops/s
# Warmup Iteration  28: 1084782.544 ops/s
# Warmup Iteration  29: 1079098.602 ops/s
# Warmup Iteration  30: 1090548.998 ops/s
Iteration   1: 1087189.717 ops/s
Iteration   2: 1088117.030 ops/s
Iteration   3: 1086279.888 ops/s
Iteration   4: 1086479.329 ops/s
Iteration   5: 1085043.959 ops/s
Iteration   6: 1084382.285 ops/s
Iteration   7: 1087060.475 ops/s
Iteration   8: 1089867.705 ops/s
Iteration   9: 1091015.567 ops/s
Iteration  10: 1088165.450 ops/s
Iteration  11: 1092031.362 ops/s
Iteration  12: 1090357.337 ops/s
Iteration  13: 1086880.572 ops/s
Iteration  14: 1088917.032 ops/s
Iteration  15: 1091629.722 ops/s
Iteration  16: 1087013.955 ops/s
Iteration  17: 1091282.816 ops/s
Iteration  18: 1089941.835 ops/s
Iteration  19: 1068149.808 ops/s
Iteration  20: 1089975.655 ops/s
Iteration  21: 1091071.009 ops/s
Iteration  22: 1089434.345 ops/s
Iteration  23: 1086042.056 ops/s
Iteration  24: 1091959.843 ops/s
Iteration  25: 1089721.427 ops/s
Iteration  26: 1085307.425 ops/s
Iteration  27: 1090937.037 ops/s
Iteration  28: 1087801.406 ops/s
Iteration  29: 1085628.836 ops/s
Iteration  30: 1089526.334 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_withAll":
  1087907.041 ±(99.9%) 2907.912 ops/s [Average]
  (min, avg, max) = (1068149.808, 1087907.041, 1092031.362), stdev = 4352.426
  CI (99.9%): [1084999.129, 1090814.953] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_withAll  thrpt   30  1087907.041 ± 2907.912  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_without$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_without

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 713517.240 ops/s
# Warmup Iteration   2: 801844.671 ops/s
# Warmup Iteration   3: 1019571.781 ops/s
# Warmup Iteration   4: 1018111.093 ops/s
# Warmup Iteration   5: 1020709.696 ops/s
# Warmup Iteration   6: 1018760.458 ops/s
# Warmup Iteration   7: 1017306.615 ops/s
# Warmup Iteration   8: 1017370.190 ops/s
# Warmup Iteration   9: 1020227.954 ops/s
# Warmup Iteration  10: 852854.478 ops/s
# Warmup Iteration  11: 1017332.439 ops/s
# Warmup Iteration  12: 1010609.167 ops/s
# Warmup Iteration  13: 1019141.265 ops/s
# Warmup Iteration  14: 1019764.508 ops/s
# Warmup Iteration  15: 1019740.955 ops/s
# Warmup Iteration  16: 1015003.122 ops/s
# Warmup Iteration  17: 1085631.211 ops/s
# Warmup Iteration  18: 1089057.320 ops/s
# Warmup Iteration  19: 1090671.978 ops/s
# Warmup Iteration  20: 1086352.603 ops/s
# Warmup Iteration  21: 1085878.856 ops/s
# Warmup Iteration  22: 1082475.134 ops/s
# Warmup Iteration  23: 1085546.055 ops/s
# Warmup Iteration  24: 1088839.265 ops/s
# Warmup Iteration  25: 1085166.606 ops/s
# Warmup Iteration  26: 1086812.775 ops/s
# Warmup Iteration  27: 1084236.305 ops/s
# Warmup Iteration  28: 1089287.987 ops/s
# Warmup Iteration  29: 1085850.339 ops/s
# Warmup Iteration  30: 1090457.997 ops/s
Iteration   1: 1066230.277 ops/s
Iteration   2: 1089871.713 ops/s
Iteration   3: 1092083.248 ops/s
Iteration   4: 1082796.507 ops/s
Iteration   5: 1087872.069 ops/s
Iteration   6: 1088733.684 ops/s
Iteration   7: 1081379.939 ops/s
Iteration   8: 1092071.578 ops/s
Iteration   9: 1087633.479 ops/s
Iteration  10: 1087471.900 ops/s
Iteration  11: 1088339.058 ops/s
Iteration  12: 1091027.436 ops/s
Iteration  13: 1086256.587 ops/s
Iteration  14: 1087197.039 ops/s
Iteration  15: 1088636.124 ops/s
Iteration  16: 1088578.304 ops/s
Iteration  17: 1090800.196 ops/s
Iteration  18: 1087481.123 ops/s
Iteration  19: 1086034.303 ops/s
Iteration  20: 1089324.540 ops/s
Iteration  21: 1091895.633 ops/s
Iteration  22: 1089789.672 ops/s
Iteration  23: 1080536.344 ops/s
Iteration  24: 1088159.841 ops/s
Iteration  25: 1085138.688 ops/s
Iteration  26: 1082694.923 ops/s
Iteration  27: 1086612.098 ops/s
Iteration  28: 1087832.327 ops/s
Iteration  29: 1087374.991 ops/s
Iteration  30: 1088609.218 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_without":
  1086948.761 ±(99.9%) 3258.888 ops/s [Average]
  (min, avg, max) = (1066230.277, 1086948.761, 1092083.248), stdev = 4877.751
  CI (99.9%): [1083689.873, 1090207.650] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_without  thrpt   30  1086948.761 ± 3258.888  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_withoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_withoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 700148.527 ops/s
# Warmup Iteration   2: 793691.198 ops/s
# Warmup Iteration   3: 1014379.215 ops/s
# Warmup Iteration   4: 1019459.470 ops/s
# Warmup Iteration   5: 1016927.656 ops/s
# Warmup Iteration   6: 1017553.967 ops/s
# Warmup Iteration   7: 1017351.944 ops/s
# Warmup Iteration   8: 1014986.501 ops/s
# Warmup Iteration   9: 1017482.839 ops/s
# Warmup Iteration  10: 848769.469 ops/s
# Warmup Iteration  11: 1015754.850 ops/s
# Warmup Iteration  12: 1014265.988 ops/s
# Warmup Iteration  13: 1019313.549 ops/s
# Warmup Iteration  14: 1011121.297 ops/s
# Warmup Iteration  15: 1014298.336 ops/s
# Warmup Iteration  16: 1012606.369 ops/s
# Warmup Iteration  17: 1086664.874 ops/s
# Warmup Iteration  18: 1086175.373 ops/s
# Warmup Iteration  19: 1089290.556 ops/s
# Warmup Iteration  20: 1088071.634 ops/s
# Warmup Iteration  21: 1088223.468 ops/s
# Warmup Iteration  22: 1086607.078 ops/s
# Warmup Iteration  23: 1087028.010 ops/s
# Warmup Iteration  24: 1084990.976 ops/s
# Warmup Iteration  25: 1085240.434 ops/s
# Warmup Iteration  26: 1087039.545 ops/s
# Warmup Iteration  27: 1086690.739 ops/s
# Warmup Iteration  28: 1086504.287 ops/s
# Warmup Iteration  29: 1086641.374 ops/s
# Warmup Iteration  30: 1087671.993 ops/s
Iteration   1: 1086317.838 ops/s
Iteration   2: 1092181.981 ops/s
Iteration   3: 1087405.523 ops/s
Iteration   4: 1085609.973 ops/s
Iteration   5: 1088597.891 ops/s
Iteration   6: 1085789.968 ops/s
Iteration   7: 1086297.702 ops/s
Iteration   8: 1089314.354 ops/s
Iteration   9: 1087323.488 ops/s
Iteration  10: 1081357.635 ops/s
Iteration  11: 1086398.150 ops/s
Iteration  12: 1087544.131 ops/s
Iteration  13: 1085664.047 ops/s
Iteration  14: 1090250.968 ops/s
Iteration  15: 1091411.998 ops/s
Iteration  16: 1086524.742 ops/s
Iteration  17: 1089025.846 ops/s
Iteration  18: 1086334.144 ops/s
Iteration  19: 1081986.224 ops/s
Iteration  20: 1090969.951 ops/s
Iteration  21: 1087137.187 ops/s
Iteration  22: 1083077.508 ops/s
Iteration  23: 1085136.806 ops/s
Iteration  24: 1089002.099 ops/s
Iteration  25: 1086245.918 ops/s
Iteration  26: 1091632.119 ops/s
Iteration  27: 1088344.338 ops/s
Iteration  28: 1078014.201 ops/s
Iteration  29: 1086992.570 ops/s
Iteration  30: 1086818.849 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_withoutAll":
  1086956.938 ±(99.9%) 2064.156 ops/s [Average]
  (min, avg, max) = (1078014.201, 1086956.938, 1092181.981), stdev = 3089.531
  CI (99.9%): [1084892.782, 1089021.094] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
UnmodifiableCharBooleanMapValuesTest._Benchmark.benchmark_withoutAll  thrpt   30  1086956.938 ± 2064.156  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 688104.495 ops/s
# Warmup Iteration   2: 797863.686 ops/s
# Warmup Iteration   3: 1000406.834 ops/s
# Warmup Iteration   4: 1006810.513 ops/s
# Warmup Iteration   5: 1008996.367 ops/s
# Warmup Iteration   6: 1006227.429 ops/s
# Warmup Iteration   7: 1008556.846 ops/s
# Warmup Iteration   8: 1003786.038 ops/s
# Warmup Iteration   9: 954015.283 ops/s
# Warmup Iteration  10: 878877.577 ops/s
# Warmup Iteration  11: 999558.243 ops/s
# Warmup Iteration  12: 1002450.982 ops/s
# Warmup Iteration  13: 1000695.272 ops/s
# Warmup Iteration  14: 1002439.670 ops/s
# Warmup Iteration  15: 1001488.052 ops/s
# Warmup Iteration  16: 1001654.880 ops/s
# Warmup Iteration  17: 1078181.888 ops/s
# Warmup Iteration  18: 1075161.365 ops/s
# Warmup Iteration  19: 1075338.287 ops/s
# Warmup Iteration  20: 1076949.605 ops/s
# Warmup Iteration  21: 1073083.237 ops/s
# Warmup Iteration  22: 1073645.441 ops/s
# Warmup Iteration  23: 1075823.880 ops/s
# Warmup Iteration  24: 1073848.227 ops/s
# Warmup Iteration  25: 1074020.933 ops/s
# Warmup Iteration  26: 1076544.622 ops/s
# Warmup Iteration  27: 1075953.909 ops/s
# Warmup Iteration  28: 1077441.536 ops/s
# Warmup Iteration  29: 1076063.944 ops/s
# Warmup Iteration  30: 1076123.788 ops/s
Iteration   1: 1073564.877 ops/s
Iteration   2: 1076445.267 ops/s
Iteration   3: 1078596.281 ops/s
Iteration   4: 1077664.762 ops/s
Iteration   5: 1075027.155 ops/s
Iteration   6: 1078712.076 ops/s
Iteration   7: 1075611.333 ops/s
Iteration   8: 1070795.092 ops/s
Iteration   9: 1077097.882 ops/s
Iteration  10: 1072585.414 ops/s
Iteration  11: 1069385.405 ops/s
Iteration  12: 1055400.762 ops/s
Iteration  13: 1073929.640 ops/s
Iteration  14: 1075084.313 ops/s
Iteration  15: 1076742.572 ops/s
Iteration  16: 1075365.311 ops/s
Iteration  17: 1071426.235 ops/s
Iteration  18: 1078230.431 ops/s
Iteration  19: 1075675.258 ops/s
Iteration  20: 1074292.876 ops/s
Iteration  21: 1074064.906 ops/s
Iteration  22: 1074972.331 ops/s
Iteration  23: 1076199.256 ops/s
Iteration  24: 1076899.201 ops/s
Iteration  25: 1075481.526 ops/s
Iteration  26: 1072991.873 ops/s
Iteration  27: 1073925.128 ops/s
Iteration  28: 1077801.662 ops/s
Iteration  29: 1075873.019 ops/s
Iteration  30: 1076790.199 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_add":
  1074554.401 ±(99.9%) 2849.697 ops/s [Average]
  (min, avg, max) = (1055400.762, 1074554.401, 1078712.076), stdev = 4265.293
  CI (99.9%): [1071704.704, 1077404.098] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_add  thrpt   30  1074554.401 ± 2849.697  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_addAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_addAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 693077.060 ops/s
# Warmup Iteration   2: 797345.629 ops/s
# Warmup Iteration   3: 1013224.553 ops/s
# Warmup Iteration   4: 1011649.626 ops/s
# Warmup Iteration   5: 1017639.581 ops/s
# Warmup Iteration   6: 1014983.133 ops/s
# Warmup Iteration   7: 1017862.868 ops/s
# Warmup Iteration   8: 1015293.231 ops/s
# Warmup Iteration   9: 922632.987 ops/s
# Warmup Iteration  10: 944387.099 ops/s
# Warmup Iteration  11: 1008993.695 ops/s
# Warmup Iteration  12: 1016020.125 ops/s
# Warmup Iteration  13: 1017307.839 ops/s
# Warmup Iteration  14: 1017467.692 ops/s
# Warmup Iteration  15: 1014911.824 ops/s
# Warmup Iteration  16: 1017893.313 ops/s
# Warmup Iteration  17: 1077381.663 ops/s
# Warmup Iteration  18: 1079161.873 ops/s
# Warmup Iteration  19: 1079196.211 ops/s
# Warmup Iteration  20: 1069223.899 ops/s
# Warmup Iteration  21: 1078685.666 ops/s
# Warmup Iteration  22: 1079306.953 ops/s
# Warmup Iteration  23: 1079261.759 ops/s
# Warmup Iteration  24: 1080991.151 ops/s
# Warmup Iteration  25: 1076012.844 ops/s
# Warmup Iteration  26: 1077316.464 ops/s
# Warmup Iteration  27: 1067549.418 ops/s
# Warmup Iteration  28: 1076088.268 ops/s
# Warmup Iteration  29: 1080877.804 ops/s
# Warmup Iteration  30: 1079028.852 ops/s
Iteration   1: 1079089.221 ops/s
Iteration   2: 1079267.027 ops/s
Iteration   3: 1077382.659 ops/s
Iteration   4: 1080843.131 ops/s
Iteration   5: 1059755.907 ops/s
Iteration   6: 1076540.707 ops/s
Iteration   7: 1082010.010 ops/s
Iteration   8: 1077148.863 ops/s
Iteration   9: 1078201.905 ops/s
Iteration  10: 1082738.757 ops/s
Iteration  11: 1081395.088 ops/s
Iteration  12: 1078953.748 ops/s
Iteration  13: 1076497.118 ops/s
Iteration  14: 1081191.589 ops/s
Iteration  15: 1081407.142 ops/s
Iteration  16: 1077765.330 ops/s
Iteration  17: 1074965.067 ops/s
Iteration  18: 1077432.487 ops/s
Iteration  19: 1078019.634 ops/s
Iteration  20: 1078901.071 ops/s
Iteration  21: 1078595.520 ops/s
Iteration  22: 1074013.580 ops/s
Iteration  23: 1082448.775 ops/s
Iteration  24: 1084049.325 ops/s
Iteration  25: 1075094.574 ops/s
Iteration  26: 1077410.898 ops/s
Iteration  27: 1079567.289 ops/s
Iteration  28: 1071306.069 ops/s
Iteration  29: 1074893.928 ops/s
Iteration  30: 1081640.163 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_addAllArray":
  1077950.886 ±(99.9%) 2998.012 ops/s [Average]
  (min, avg, max) = (1059755.907, 1077950.886, 1084049.325), stdev = 4487.284
  CI (99.9%): [1074952.874, 1080948.898] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score      Error  Units
UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_addAllArray  thrpt   30  1077950.886 ± 2998.012  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_addAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_addAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 689223.857 ops/s
# Warmup Iteration   2: 800275.596 ops/s
# Warmup Iteration   3: 1013550.938 ops/s
# Warmup Iteration   4: 1008902.462 ops/s
# Warmup Iteration   5: 1013332.716 ops/s
# Warmup Iteration   6: 1010042.422 ops/s
# Warmup Iteration   7: 1014648.855 ops/s
# Warmup Iteration   8: 1009402.897 ops/s
# Warmup Iteration   9: 924180.796 ops/s
# Warmup Iteration  10: 931314.833 ops/s
# Warmup Iteration  11: 1012635.007 ops/s
# Warmup Iteration  12: 1014926.004 ops/s
# Warmup Iteration  13: 1013221.507 ops/s
# Warmup Iteration  14: 1006172.119 ops/s
# Warmup Iteration  15: 1010594.007 ops/s
# Warmup Iteration  16: 1010926.674 ops/s
# Warmup Iteration  17: 1071638.406 ops/s
# Warmup Iteration  18: 1072053.281 ops/s
# Warmup Iteration  19: 1070330.135 ops/s
# Warmup Iteration  20: 1069556.388 ops/s
# Warmup Iteration  21: 1054834.132 ops/s
# Warmup Iteration  22: 1074102.601 ops/s
# Warmup Iteration  23: 1074559.751 ops/s
# Warmup Iteration  24: 1070174.135 ops/s
# Warmup Iteration  25: 1073541.256 ops/s
# Warmup Iteration  26: 1074514.220 ops/s
# Warmup Iteration  27: 1072988.460 ops/s
# Warmup Iteration  28: 1072222.538 ops/s
# Warmup Iteration  29: 1065959.095 ops/s
# Warmup Iteration  30: 1073144.921 ops/s
Iteration   1: 1054135.130 ops/s
Iteration   2: 1069639.767 ops/s
Iteration   3: 1069819.928 ops/s
Iteration   4: 1071403.048 ops/s
Iteration   5: 1073355.965 ops/s
Iteration   6: 1078876.522 ops/s
Iteration   7: 1066238.851 ops/s
Iteration   8: 1074229.615 ops/s
Iteration   9: 1058797.854 ops/s
Iteration  10: 1066335.465 ops/s
Iteration  11: 1076381.152 ops/s
Iteration  12: 1075197.136 ops/s
Iteration  13: 1070138.648 ops/s
Iteration  14: 1067863.885 ops/s
Iteration  15: 1070655.760 ops/s
Iteration  16: 1076048.311 ops/s
Iteration  17: 1075621.894 ops/s
Iteration  18: 1074421.783 ops/s
Iteration  19: 1072506.113 ops/s
Iteration  20: 1073660.336 ops/s
Iteration  21: 1072131.969 ops/s
Iteration  22: 1068362.413 ops/s
Iteration  23: 1069778.860 ops/s
Iteration  24: 1068627.210 ops/s
Iteration  25: 1070473.866 ops/s
Iteration  26: 1076646.627 ops/s
Iteration  27: 1072335.072 ops/s
Iteration  28: 1067518.044 ops/s
Iteration  29: 1072947.174 ops/s
Iteration  30: 1071481.130 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_addAllIterable":
  1070854.318 ±(99.9%) 3395.751 ops/s [Average]
  (min, avg, max) = (1054135.130, 1070854.318, 1078876.522), stdev = 5082.601
  CI (99.9%): [1067458.567, 1074250.069] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score      Error  Units
UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_addAllIterable  thrpt   30  1070854.318 ± 3395.751  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 976136.141 ops/s
# Warmup Iteration   2: 2170124.216 ops/s
# Warmup Iteration   3: 1798731.797 ops/s
# Warmup Iteration   4: 2160211.689 ops/s
# Warmup Iteration   5: 2147812.689 ops/s
# Warmup Iteration   6: 2163854.506 ops/s
# Warmup Iteration   7: 2162793.265 ops/s
# Warmup Iteration   8: 2158833.200 ops/s
# Warmup Iteration   9: 2164021.255 ops/s
# Warmup Iteration  10: 2162058.249 ops/s
# Warmup Iteration  11: 2161426.954 ops/s
# Warmup Iteration  12: 2159128.797 ops/s
# Warmup Iteration  13: 2153035.022 ops/s
# Warmup Iteration  14: 2162625.420 ops/s
# Warmup Iteration  15: 2167747.322 ops/s
# Warmup Iteration  16: 2163743.655 ops/s
# Warmup Iteration  17: 2159809.697 ops/s
# Warmup Iteration  18: 2160915.722 ops/s
# Warmup Iteration  19: 2154824.195 ops/s
# Warmup Iteration  20: 2153236.879 ops/s
# Warmup Iteration  21: 2159045.608 ops/s
# Warmup Iteration  22: 2159023.809 ops/s
# Warmup Iteration  23: 2154889.978 ops/s
# Warmup Iteration  24: 2144597.621 ops/s
# Warmup Iteration  25: 2115899.271 ops/s
# Warmup Iteration  26: 2158644.809 ops/s
# Warmup Iteration  27: 2158899.911 ops/s
# Warmup Iteration  28: 2162249.702 ops/s
# Warmup Iteration  29: 2160089.216 ops/s
# Warmup Iteration  30: 2170709.961 ops/s
Iteration   1: 2157308.986 ops/s
Iteration   2: 2158934.063 ops/s
Iteration   3: 2158960.539 ops/s
Iteration   4: 2159091.368 ops/s
Iteration   5: 2164894.514 ops/s
Iteration   6: 2149950.072 ops/s
Iteration   7: 2156484.642 ops/s
Iteration   8: 2163692.754 ops/s
Iteration   9: 2161642.363 ops/s
Iteration  10: 2165391.185 ops/s
Iteration  11: 2165901.216 ops/s
Iteration  12: 2158405.808 ops/s
Iteration  13: 2161502.597 ops/s
Iteration  14: 2160599.154 ops/s
Iteration  15: 2156515.483 ops/s
Iteration  16: 2156285.970 ops/s
Iteration  17: 2152449.769 ops/s
Iteration  18: 2153491.061 ops/s
Iteration  19: 2157255.463 ops/s
Iteration  20: 2163677.127 ops/s
Iteration  21: 2168424.624 ops/s
Iteration  22: 2160528.190 ops/s
Iteration  23: 2159616.285 ops/s
Iteration  24: 2155901.184 ops/s
Iteration  25: 2159838.614 ops/s
Iteration  26: 2158481.731 ops/s
Iteration  27: 2164098.267 ops/s
Iteration  28: 2155492.398 ops/s
Iteration  29: 2156058.367 ops/s
Iteration  30: 2167369.172 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_allSatisfy":
  2159608.099 ±(99.9%) 2967.790 ops/s [Average]
  (min, avg, max) = (2149950.072, 2159608.099, 2168424.624), stdev = 4442.048
  CI (99.9%): [2156640.309, 2162575.888] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_allSatisfy  thrpt   30  2159608.099 ± 2967.790  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1084825.659 ops/s
# Warmup Iteration   2: 2326590.321 ops/s
# Warmup Iteration   3: 1949591.607 ops/s
# Warmup Iteration   4: 2351530.746 ops/s
# Warmup Iteration   5: 2337967.994 ops/s
# Warmup Iteration   6: 2337979.465 ops/s
# Warmup Iteration   7: 2347330.322 ops/s
# Warmup Iteration   8: 2346704.799 ops/s
# Warmup Iteration   9: 2347953.660 ops/s
# Warmup Iteration  10: 2353618.442 ops/s
# Warmup Iteration  11: 2349521.793 ops/s
# Warmup Iteration  12: 2342809.973 ops/s
# Warmup Iteration  13: 2335357.749 ops/s
# Warmup Iteration  14: 2330779.461 ops/s
# Warmup Iteration  15: 2340133.590 ops/s
# Warmup Iteration  16: 2342736.180 ops/s
# Warmup Iteration  17: 2344503.741 ops/s
# Warmup Iteration  18: 2338139.049 ops/s
# Warmup Iteration  19: 2335976.167 ops/s
# Warmup Iteration  20: 2336442.140 ops/s
# Warmup Iteration  21: 2339246.023 ops/s
# Warmup Iteration  22: 2329215.845 ops/s
# Warmup Iteration  23: 2342701.837 ops/s
# Warmup Iteration  24: 2338627.893 ops/s
# Warmup Iteration  25: 2341256.043 ops/s
# Warmup Iteration  26: 2352927.580 ops/s
# Warmup Iteration  27: 2329640.279 ops/s
# Warmup Iteration  28: 2320329.797 ops/s
# Warmup Iteration  29: 2338396.934 ops/s
# Warmup Iteration  30: 2346027.338 ops/s
Iteration   1: 2330833.328 ops/s
Iteration   2: 2331947.053 ops/s
Iteration   3: 2343279.520 ops/s
Iteration   4: 2352971.740 ops/s
Iteration   5: 2334985.209 ops/s
Iteration   6: 2344772.367 ops/s
Iteration   7: 2338333.041 ops/s
Iteration   8: 2347737.600 ops/s
Iteration   9: 2336071.940 ops/s
Iteration  10: 2347438.296 ops/s
Iteration  11: 2342331.459 ops/s
Iteration  12: 2345110.017 ops/s
Iteration  13: 2337622.742 ops/s
Iteration  14: 2345681.028 ops/s
Iteration  15: 2336198.259 ops/s
Iteration  16: 2349483.714 ops/s
Iteration  17: 2336504.166 ops/s
Iteration  18: 2354954.722 ops/s
Iteration  19: 2344313.137 ops/s
Iteration  20: 2359056.852 ops/s
Iteration  21: 2344599.098 ops/s
Iteration  22: 2334206.633 ops/s
Iteration  23: 2354537.074 ops/s
Iteration  24: 2329549.168 ops/s
Iteration  25: 2349205.733 ops/s
Iteration  26: 2352386.925 ops/s
Iteration  27: 2341758.015 ops/s
Iteration  28: 2320752.406 ops/s
Iteration  29: 2340241.354 ops/s
Iteration  30: 2342511.288 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_anySatisfy":
  2342312.463 ±(99.9%) 5730.793 ops/s [Average]
  (min, avg, max) = (2320752.406, 2342312.463, 2359056.852), stdev = 8577.581
  CI (99.9%): [2336581.670, 2348043.255] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_anySatisfy  thrpt   30  2342312.463 ± 5730.793  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 877629.457 ops/s
# Warmup Iteration   2: 1911139.013 ops/s
# Warmup Iteration   3: 1634121.870 ops/s
# Warmup Iteration   4: 1857996.076 ops/s
# Warmup Iteration   5: 1901050.137 ops/s
# Warmup Iteration   6: 1907022.582 ops/s
# Warmup Iteration   7: 1891271.676 ops/s
# Warmup Iteration   8: 1888626.639 ops/s
# Warmup Iteration   9: 1893526.206 ops/s
# Warmup Iteration  10: 1901935.178 ops/s
# Warmup Iteration  11: 1904083.396 ops/s
# Warmup Iteration  12: 1904857.810 ops/s
# Warmup Iteration  13: 1898305.346 ops/s
# Warmup Iteration  14: 1905808.943 ops/s
# Warmup Iteration  15: 1899120.436 ops/s
# Warmup Iteration  16: 1902314.475 ops/s
# Warmup Iteration  17: 1907925.794 ops/s
# Warmup Iteration  18: 1906742.495 ops/s
# Warmup Iteration  19: 1897112.412 ops/s
# Warmup Iteration  20: 1907339.664 ops/s
# Warmup Iteration  21: 1902643.590 ops/s
# Warmup Iteration  22: 1900614.491 ops/s
# Warmup Iteration  23: 1901798.832 ops/s
# Warmup Iteration  24: 1901969.817 ops/s
# Warmup Iteration  25: 1872923.107 ops/s
# Warmup Iteration  26: 1900444.343 ops/s
# Warmup Iteration  27: 1908219.948 ops/s
# Warmup Iteration  28: 1900058.648 ops/s
# Warmup Iteration  29: 1898464.751 ops/s
# Warmup Iteration  30: 1893620.730 ops/s
Iteration   1: 1911153.029 ops/s
Iteration   2: 1901670.285 ops/s
Iteration   3: 1871613.965 ops/s
Iteration   4: 1897241.776 ops/s
Iteration   5: 1882581.953 ops/s
Iteration   6: 1896463.216 ops/s
Iteration   7: 1888609.056 ops/s
Iteration   8: 1911986.583 ops/s
Iteration   9: 1895091.876 ops/s
Iteration  10: 1903184.222 ops/s
Iteration  11: 1893100.209 ops/s
Iteration  12: 1909302.773 ops/s
Iteration  13: 1900919.517 ops/s
Iteration  14: 1898963.065 ops/s
Iteration  15: 1881883.507 ops/s
Iteration  16: 1894457.700 ops/s
Iteration  17: 1907951.240 ops/s
Iteration  18: 1898649.690 ops/s
Iteration  19: 1890889.741 ops/s
Iteration  20: 1900467.373 ops/s
Iteration  21: 1895650.733 ops/s
Iteration  22: 1899636.948 ops/s
Iteration  23: 1883563.598 ops/s
Iteration  24: 1896808.971 ops/s
Iteration  25: 1900716.693 ops/s
Iteration  26: 1906151.073 ops/s
Iteration  27: 1877678.535 ops/s
Iteration  28: 1907126.898 ops/s
Iteration  29: 1862427.713 ops/s
Iteration  30: 1908041.009 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_appendString":
  1895799.432 ±(99.9%) 7886.830 ops/s [Average]
  (min, avg, max) = (1862427.713, 1895799.432, 1911986.583), stdev = 11804.637
  CI (99.9%): [1887912.601, 1903686.262] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score      Error  Units
UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_appendString  thrpt   30  1895799.432 ± 7886.830  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_asLazy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_asLazy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3439383.241 ops/s
# Warmup Iteration   2: 7537209.822 ops/s
# Warmup Iteration   3: 7503916.942 ops/s
# Warmup Iteration   4: 6291078.824 ops/s
# Warmup Iteration   5: 7504387.930 ops/s
# Warmup Iteration   6: 7516745.443 ops/s
# Warmup Iteration   7: 7496398.230 ops/s
# Warmup Iteration   8: 7515101.900 ops/s
# Warmup Iteration   9: 7515511.328 ops/s
# Warmup Iteration  10: 7496188.909 ops/s
# Warmup Iteration  11: 7496335.757 ops/s
# Warmup Iteration  12: 7486690.475 ops/s
# Warmup Iteration  13: 7523504.940 ops/s
# Warmup Iteration  14: 7501061.609 ops/s
# Warmup Iteration  15: 7518429.132 ops/s
# Warmup Iteration  16: 7498670.361 ops/s
# Warmup Iteration  17: 7493141.511 ops/s
# Warmup Iteration  18: 7492485.867 ops/s
# Warmup Iteration  19: 7513862.962 ops/s
# Warmup Iteration  20: 7501204.361 ops/s
# Warmup Iteration  21: 7486205.634 ops/s
# Warmup Iteration  22: 7487591.916 ops/s
# Warmup Iteration  23: 7426087.129 ops/s
# Warmup Iteration  24: 7501431.390 ops/s
# Warmup Iteration  25: 7491598.843 ops/s
# Warmup Iteration  26: 7505456.677 ops/s
# Warmup Iteration  27: 7494724.300 ops/s
# Warmup Iteration  28: 7497045.947 ops/s
# Warmup Iteration  29: 7496229.217 ops/s
# Warmup Iteration  30: 7482075.924 ops/s
Iteration   1: 7495964.271 ops/s
Iteration   2: 7494132.798 ops/s
Iteration   3: 7505436.962 ops/s
Iteration   4: 7483602.729 ops/s
Iteration   5: 7523345.064 ops/s
Iteration   6: 7496675.445 ops/s
Iteration   7: 7492741.589 ops/s
Iteration   8: 7502363.750 ops/s
Iteration   9: 7499684.116 ops/s
Iteration  10: 7486421.104 ops/s
Iteration  11: 7500883.934 ops/s
Iteration  12: 7501149.015 ops/s
Iteration  13: 7376346.388 ops/s
Iteration  14: 7486910.284 ops/s
Iteration  15: 7498183.909 ops/s
Iteration  16: 7508498.342 ops/s
Iteration  17: 7494278.278 ops/s
Iteration  18: 7462702.197 ops/s
Iteration  19: 7480291.390 ops/s
Iteration  20: 7479146.617 ops/s
Iteration  21: 7488322.093 ops/s
Iteration  22: 7502964.909 ops/s
Iteration  23: 7504227.351 ops/s
Iteration  24: 7503336.209 ops/s
Iteration  25: 7481987.330 ops/s
Iteration  26: 7369239.418 ops/s
Iteration  27: 7477223.125 ops/s
Iteration  28: 7501978.206 ops/s
Iteration  29: 7493537.325 ops/s
Iteration  30: 7492118.999 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_asLazy":
  7486123.105 ±(99.9%) 21977.717 ops/s [Average]
  (min, avg, max) = (7369239.418, 7486123.105, 7523345.064), stdev = 32895.215
  CI (99.9%): [7464145.388, 7508100.822] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_asLazy  thrpt   30  7486123.105 ± 21977.717  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_asSynchronized$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_asSynchronized

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11455946.609 ops/s
# Warmup Iteration   2: 17831920.041 ops/s
# Warmup Iteration   3: 19527229.346 ops/s
# Warmup Iteration   4: 20101381.613 ops/s
# Warmup Iteration   5: 20051166.440 ops/s
# Warmup Iteration   6: 19969516.994 ops/s
# Warmup Iteration   7: 20171889.200 ops/s
# Warmup Iteration   8: 20102987.798 ops/s
# Warmup Iteration   9: 19898013.436 ops/s
# Warmup Iteration  10: 20140049.068 ops/s
# Warmup Iteration  11: 20058331.083 ops/s
# Warmup Iteration  12: 20044849.673 ops/s
# Warmup Iteration  13: 20099123.077 ops/s
# Warmup Iteration  14: 19999055.607 ops/s
# Warmup Iteration  15: 19891483.602 ops/s
# Warmup Iteration  16: 20191154.974 ops/s
# Warmup Iteration  17: 20053218.472 ops/s
# Warmup Iteration  18: 19939744.863 ops/s
# Warmup Iteration  19: 20124478.987 ops/s
# Warmup Iteration  20: 19922288.493 ops/s
# Warmup Iteration  21: 20098921.781 ops/s
# Warmup Iteration  22: 20020755.783 ops/s
# Warmup Iteration  23: 19992004.416 ops/s
# Warmup Iteration  24: 20138719.709 ops/s
# Warmup Iteration  25: 20091166.223 ops/s
# Warmup Iteration  26: 20057838.453 ops/s
# Warmup Iteration  27: 20075255.159 ops/s
# Warmup Iteration  28: 19922877.692 ops/s
# Warmup Iteration  29: 20079048.472 ops/s
# Warmup Iteration  30: 20096551.779 ops/s
Iteration   1: 20146395.381 ops/s
Iteration   2: 20172507.909 ops/s
Iteration   3: 19944889.138 ops/s
Iteration   4: 19907954.441 ops/s
Iteration   5: 20152099.157 ops/s
Iteration   6: 20165727.396 ops/s
Iteration   7: 19997505.586 ops/s
Iteration   8: 19951827.681 ops/s
Iteration   9: 20018807.084 ops/s
Iteration  10: 20171572.940 ops/s
Iteration  11: 20161985.479 ops/s
Iteration  12: 20068218.448 ops/s
Iteration  13: 19893385.738 ops/s
Iteration  14: 19938593.502 ops/s
Iteration  15: 19998803.381 ops/s
Iteration  16: 19969762.266 ops/s
Iteration  17: 20143309.228 ops/s
Iteration  18: 20081550.477 ops/s
Iteration  19: 19935394.792 ops/s
Iteration  20: 20049999.796 ops/s
Iteration  21: 20127247.887 ops/s
Iteration  22: 20094617.207 ops/s
Iteration  23: 20136279.829 ops/s
Iteration  24: 20066864.104 ops/s
Iteration  25: 20012127.806 ops/s
Iteration  26: 20041213.812 ops/s
Iteration  27: 20145072.618 ops/s
Iteration  28: 20093468.721 ops/s
Iteration  29: 20030755.115 ops/s
Iteration  30: 19958222.438 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_asSynchronized":
  20052538.645 ±(99.9%) 58970.019 ops/s [Average]
  (min, avg, max) = (19893385.738, 20052538.645, 20172507.909), stdev = 88263.555
  CI (99.9%): [19993568.626, 20111508.665] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt         Score       Error  Units
UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_asSynchronized  thrpt   30  20052538.645 ± 58970.019  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_asUnmodifiable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_asUnmodifiable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5343310.113 ops/s
# Warmup Iteration   2: 10254644.023 ops/s
# Warmup Iteration   3: 9386457.344 ops/s
# Warmup Iteration   4: 10735944.857 ops/s
# Warmup Iteration   5: 10725006.239 ops/s
# Warmup Iteration   6: 10695462.377 ops/s
# Warmup Iteration   7: 10700088.592 ops/s
# Warmup Iteration   8: 10684353.521 ops/s
# Warmup Iteration   9: 10736886.809 ops/s
# Warmup Iteration  10: 10704047.969 ops/s
# Warmup Iteration  11: 10696488.493 ops/s
# Warmup Iteration  12: 10730937.401 ops/s
# Warmup Iteration  13: 10761617.595 ops/s
# Warmup Iteration  14: 10708610.405 ops/s
# Warmup Iteration  15: 10757147.640 ops/s
# Warmup Iteration  16: 10703747.544 ops/s
# Warmup Iteration  17: 10718527.418 ops/s
# Warmup Iteration  18: 10757471.452 ops/s
# Warmup Iteration  19: 10737602.126 ops/s
# Warmup Iteration  20: 10729869.138 ops/s
# Warmup Iteration  21: 10743024.608 ops/s
# Warmup Iteration  22: 10647733.979 ops/s
# Warmup Iteration  23: 10733697.918 ops/s
# Warmup Iteration  24: 10752576.178 ops/s
# Warmup Iteration  25: 10694239.241 ops/s
# Warmup Iteration  26: 10735594.126 ops/s
# Warmup Iteration  27: 10696693.890 ops/s
# Warmup Iteration  28: 10726979.947 ops/s
# Warmup Iteration  29: 10750529.588 ops/s
# Warmup Iteration  30: 10730193.763 ops/s
Iteration   1: 10603502.576 ops/s
Iteration   2: 10748618.472 ops/s
Iteration   3: 10743902.993 ops/s
Iteration   4: 10774809.340 ops/s
Iteration   5: 10720100.436 ops/s
Iteration   6: 10730923.616 ops/s
Iteration   7: 10734840.819 ops/s
Iteration   8: 10757927.908 ops/s
Iteration   9: 10731384.913 ops/s
Iteration  10: 10560659.646 ops/s
Iteration  11: 10756226.932 ops/s
Iteration  12: 10699102.114 ops/s
Iteration  13: 10698196.839 ops/s
Iteration  14: 10755635.301 ops/s
Iteration  15: 10712535.446 ops/s
Iteration  16: 10761212.318 ops/s
Iteration  17: 10704939.319 ops/s
Iteration  18: 10527005.169 ops/s
Iteration  19: 10706984.771 ops/s
Iteration  20: 10707812.485 ops/s
Iteration  21: 10751351.185 ops/s
Iteration  22: 10691428.931 ops/s
Iteration  23: 10690169.499 ops/s
Iteration  24: 10700152.498 ops/s
Iteration  25: 10726783.437 ops/s
Iteration  26: 10707819.461 ops/s
Iteration  27: 10705213.162 ops/s
Iteration  28: 10667384.592 ops/s
Iteration  29: 10712243.665 ops/s
Iteration  30: 10712246.347 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_asUnmodifiable":
  10706703.806 ±(99.9%) 37092.141 ops/s [Average]
  (min, avg, max) = (10527005.169, 10706703.806, 10774809.340), stdev = 55517.774
  CI (99.9%): [10669611.666, 10743795.947] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt         Score       Error  Units
UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_asUnmodifiable  thrpt   30  10706703.806 ± 37092.141  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_booleanIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_booleanIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 509304.746 ops/s
# Warmup Iteration   2: 552048.711 ops/s
# Warmup Iteration   3: 743556.386 ops/s
# Warmup Iteration   4: 740872.058 ops/s
# Warmup Iteration   5: 741952.867 ops/s
# Warmup Iteration   6: 739863.993 ops/s
# Warmup Iteration   7: 740890.760 ops/s
# Warmup Iteration   8: 741307.439 ops/s
# Warmup Iteration   9: 739341.390 ops/s
# Warmup Iteration  10: 744967.940 ops/s
# Warmup Iteration  11: 615368.634 ops/s
# Warmup Iteration  12: 741427.223 ops/s
# Warmup Iteration  13: 740602.649 ops/s
# Warmup Iteration  14: 741062.669 ops/s
# Warmup Iteration  15: 741564.189 ops/s
# Warmup Iteration  16: 740800.107 ops/s
# Warmup Iteration  17: 774283.191 ops/s
# Warmup Iteration  18: 775786.806 ops/s
# Warmup Iteration  19: 773531.342 ops/s
# Warmup Iteration  20: 776087.227 ops/s
# Warmup Iteration  21: 775970.348 ops/s
# Warmup Iteration  22: 775463.624 ops/s
# Warmup Iteration  23: 776259.343 ops/s
# Warmup Iteration  24: 775982.492 ops/s
# Warmup Iteration  25: 775020.881 ops/s
# Warmup Iteration  26: 776299.214 ops/s
# Warmup Iteration  27: 775207.268 ops/s
# Warmup Iteration  28: 776292.664 ops/s
# Warmup Iteration  29: 774844.011 ops/s
# Warmup Iteration  30: 776350.856 ops/s
Iteration   1: 761391.657 ops/s
Iteration   2: 776038.901 ops/s
Iteration   3: 776248.203 ops/s
Iteration   4: 776725.817 ops/s
Iteration   5: 772067.691 ops/s
Iteration   6: 777221.453 ops/s
Iteration   7: 776194.425 ops/s
Iteration   8: 770480.513 ops/s
Iteration   9: 775484.064 ops/s
Iteration  10: 776389.285 ops/s
Iteration  11: 777761.809 ops/s
Iteration  12: 774533.977 ops/s
Iteration  13: 775197.864 ops/s
Iteration  14: 776537.734 ops/s
Iteration  15: 774490.283 ops/s
Iteration  16: 776768.213 ops/s
Iteration  17: 777094.257 ops/s
Iteration  18: 775440.994 ops/s
Iteration  19: 773624.926 ops/s
Iteration  20: 775817.773 ops/s
Iteration  21: 775467.607 ops/s
Iteration  22: 773378.400 ops/s
Iteration  23: 776563.879 ops/s
Iteration  24: 775100.444 ops/s
Iteration  25: 775444.091 ops/s
Iteration  26: 771827.503 ops/s
Iteration  27: 776063.064 ops/s
Iteration  28: 772881.859 ops/s
Iteration  29: 773412.624 ops/s
Iteration  30: 775769.658 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_booleanIterator":
  774713.966 ±(99.9%) 2042.255 ops/s [Average]
  (min, avg, max) = (761391.657, 774713.966, 777761.809), stdev = 3056.751
  CI (99.9%): [772671.711, 776756.220] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score      Error  Units
UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_booleanIterator  thrpt   30  774713.966 ± 2042.255  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 648516.688 ops/s
# Warmup Iteration   2: 754579.289 ops/s
# Warmup Iteration   3: 957416.087 ops/s
# Warmup Iteration   4: 958319.738 ops/s
# Warmup Iteration   5: 956949.510 ops/s
# Warmup Iteration   6: 956026.656 ops/s
# Warmup Iteration   7: 957996.582 ops/s
# Warmup Iteration   8: 955041.864 ops/s
# Warmup Iteration   9: 888053.453 ops/s
# Warmup Iteration  10: 876606.233 ops/s
# Warmup Iteration  11: 957444.479 ops/s
# Warmup Iteration  12: 956948.567 ops/s
# Warmup Iteration  13: 956400.731 ops/s
# Warmup Iteration  14: 957508.438 ops/s
# Warmup Iteration  15: 958196.599 ops/s
# Warmup Iteration  16: 951247.275 ops/s
# Warmup Iteration  17: 1015536.239 ops/s
# Warmup Iteration  18: 1003399.907 ops/s
# Warmup Iteration  19: 1012833.584 ops/s
# Warmup Iteration  20: 1014617.194 ops/s
# Warmup Iteration  21: 1012518.418 ops/s
# Warmup Iteration  22: 1012853.745 ops/s
# Warmup Iteration  23: 1015421.192 ops/s
# Warmup Iteration  24: 1014615.785 ops/s
# Warmup Iteration  25: 1016406.493 ops/s
# Warmup Iteration  26: 1016589.467 ops/s
# Warmup Iteration  27: 1013391.450 ops/s
# Warmup Iteration  28: 1014265.963 ops/s
# Warmup Iteration  29: 1014767.652 ops/s
# Warmup Iteration  30: 1006141.502 ops/s
Iteration   1: 1012538.164 ops/s
Iteration   2: 1014198.059 ops/s
Iteration   3: 1017098.141 ops/s
Iteration   4: 1016076.001 ops/s
Iteration   5: 1009418.308 ops/s
Iteration   6: 1013694.298 ops/s
Iteration   7: 1016184.718 ops/s
Iteration   8: 1015225.121 ops/s
Iteration   9: 1017885.516 ops/s
Iteration  10: 1013119.122 ops/s
Iteration  11: 1010358.410 ops/s
Iteration  12: 1015319.766 ops/s
Iteration  13: 1011898.396 ops/s
Iteration  14: 1013299.552 ops/s
Iteration  15: 1011354.394 ops/s
Iteration  16: 1006829.191 ops/s
Iteration  17: 1015379.581 ops/s
Iteration  18: 1016964.197 ops/s
Iteration  19: 1013496.433 ops/s
Iteration  20: 1013612.405 ops/s
Iteration  21: 1015977.570 ops/s
Iteration  22: 1014140.590 ops/s
Iteration  23: 1015979.382 ops/s
Iteration  24: 992990.885 ops/s
Iteration  25: 1010760.675 ops/s
Iteration  26: 1012640.717 ops/s
Iteration  27: 1011730.130 ops/s
Iteration  28: 1012758.457 ops/s
Iteration  29: 1014742.555 ops/s
Iteration  30: 997650.801 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove":
  1012444.051 ±(99.9%) 3535.811 ops/s [Average]
  (min, avg, max) = (992990.885, 1012444.051, 1017885.516), stdev = 5292.235
  CI (99.9%): [1008908.241, 1015979.862] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 Mode  Cnt        Score      Error  Units
UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove  thrpt   30  1012444.051 ± 3535.811  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_chunk$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_chunk

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 134918.713 ops/s
# Warmup Iteration   2: 232239.806 ops/s
# Warmup Iteration   3: 262288.230 ops/s
# Warmup Iteration   4: 263345.117 ops/s
# Warmup Iteration   5: 263527.466 ops/s
# Warmup Iteration   6: 221168.776 ops/s
# Warmup Iteration   7: 263312.270 ops/s
# Warmup Iteration   8: 263315.220 ops/s
# Warmup Iteration   9: 263095.422 ops/s
# Warmup Iteration  10: 263650.746 ops/s
# Warmup Iteration  11: 263899.734 ops/s
# Warmup Iteration  12: 263647.000 ops/s
# Warmup Iteration  13: 263246.560 ops/s
# Warmup Iteration  14: 263311.581 ops/s
# Warmup Iteration  15: 263627.151 ops/s
# Warmup Iteration  16: 261564.033 ops/s
# Warmup Iteration  17: 271576.314 ops/s
# Warmup Iteration  18: 271811.682 ops/s
# Warmup Iteration  19: 270531.390 ops/s
# Warmup Iteration  20: 271305.343 ops/s
# Warmup Iteration  21: 271593.716 ops/s
# Warmup Iteration  22: 271605.386 ops/s
# Warmup Iteration  23: 271280.366 ops/s
# Warmup Iteration  24: 271549.389 ops/s
# Warmup Iteration  25: 271092.301 ops/s
# Warmup Iteration  26: 270941.024 ops/s
# Warmup Iteration  27: 271331.824 ops/s
# Warmup Iteration  28: 270175.094 ops/s
# Warmup Iteration  29: 271907.082 ops/s
# Warmup Iteration  30: 271418.939 ops/s
Iteration   1: 271557.987 ops/s
Iteration   2: 271436.373 ops/s
Iteration   3: 270983.211 ops/s
Iteration   4: 270610.489 ops/s
Iteration   5: 272173.095 ops/s
Iteration   6: 271151.529 ops/s
Iteration   7: 271416.800 ops/s
Iteration   8: 271423.021 ops/s
Iteration   9: 271850.213 ops/s
Iteration  10: 272117.027 ops/s
Iteration  11: 271192.425 ops/s
Iteration  12: 267004.028 ops/s
Iteration  13: 271315.996 ops/s
Iteration  14: 271548.881 ops/s
Iteration  15: 272002.478 ops/s
Iteration  16: 270956.310 ops/s
Iteration  17: 271034.364 ops/s
Iteration  18: 271238.577 ops/s
Iteration  19: 271721.770 ops/s
Iteration  20: 271478.317 ops/s
Iteration  21: 271721.682 ops/s
Iteration  22: 271617.912 ops/s
Iteration  23: 271439.532 ops/s
Iteration  24: 271844.111 ops/s
Iteration  25: 270823.877 ops/s
Iteration  26: 271644.699 ops/s
Iteration  27: 271565.299 ops/s
Iteration  28: 272415.055 ops/s
Iteration  29: 270631.766 ops/s
Iteration  30: 271603.431 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_chunk":
  271317.342 ±(99.9%) 615.999 ops/s [Average]
  (min, avg, max) = (267004.028, 271317.342, 272415.055), stdev = 921.998
  CI (99.9%): [270701.343, 271933.340] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score     Error  Units
UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_chunk  thrpt   30  271317.342 ± 615.999  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 684845.873 ops/s
# Warmup Iteration   2: 799456.839 ops/s
# Warmup Iteration   3: 992433.510 ops/s
# Warmup Iteration   4: 986236.564 ops/s
# Warmup Iteration   5: 986543.086 ops/s
# Warmup Iteration   6: 984369.853 ops/s
# Warmup Iteration   7: 984400.417 ops/s
# Warmup Iteration   8: 987513.506 ops/s
# Warmup Iteration   9: 831789.320 ops/s
# Warmup Iteration  10: 983074.661 ops/s
# Warmup Iteration  11: 982495.607 ops/s
# Warmup Iteration  12: 981032.738 ops/s
# Warmup Iteration  13: 982034.099 ops/s
# Warmup Iteration  14: 980553.044 ops/s
# Warmup Iteration  15: 984452.740 ops/s
# Warmup Iteration  16: 977621.891 ops/s
# Warmup Iteration  17: 1037268.386 ops/s
# Warmup Iteration  18: 1035996.095 ops/s
# Warmup Iteration  19: 1040922.816 ops/s
# Warmup Iteration  20: 1040950.416 ops/s
# Warmup Iteration  21: 1041111.307 ops/s
# Warmup Iteration  22: 1039755.328 ops/s
# Warmup Iteration  23: 1040841.646 ops/s
# Warmup Iteration  24: 1037142.257 ops/s
# Warmup Iteration  25: 1034364.228 ops/s
# Warmup Iteration  26: 1039134.405 ops/s
# Warmup Iteration  27: 1040429.009 ops/s
# Warmup Iteration  28: 1042672.594 ops/s
# Warmup Iteration  29: 1037029.277 ops/s
# Warmup Iteration  30: 1041449.059 ops/s
Iteration   1: 1041862.201 ops/s
Iteration   2: 1041528.247 ops/s
Iteration   3: 1038947.469 ops/s
Iteration   4: 1041570.504 ops/s
Iteration   5: 1040724.134 ops/s
Iteration   6: 1040255.270 ops/s
Iteration   7: 1040907.237 ops/s
Iteration   8: 1040495.000 ops/s
Iteration   9: 1036206.433 ops/s
Iteration  10: 1042175.338 ops/s
Iteration  11: 1043212.201 ops/s
Iteration  12: 1036985.676 ops/s
Iteration  13: 1037683.318 ops/s
Iteration  14: 1040391.563 ops/s
Iteration  15: 1041347.332 ops/s
Iteration  16: 1040702.459 ops/s
Iteration  17: 1030334.594 ops/s
Iteration  18: 1041258.892 ops/s
Iteration  19: 1044034.211 ops/s
Iteration  20: 1035123.628 ops/s
Iteration  21: 1039879.783 ops/s
Iteration  22: 1037171.751 ops/s
Iteration  23: 1039478.886 ops/s
Iteration  24: 1037716.556 ops/s
Iteration  25: 1041236.233 ops/s
Iteration  26: 1036850.526 ops/s
Iteration  27: 1038842.153 ops/s
Iteration  28: 1040956.400 ops/s
Iteration  29: 1037876.014 ops/s
Iteration  30: 1038123.688 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_clear":
  1039462.590 ±(99.9%) 1836.086 ops/s [Average]
  (min, avg, max) = (1030334.594, 1039462.590, 1044034.211), stdev = 2748.167
  CI (99.9%): [1037626.504, 1041298.676] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_clear  thrpt   30  1039462.590 ± 1836.086  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 627402.410 ops/s
# Warmup Iteration   2: 1552331.987 ops/s
# Warmup Iteration   3: 1594055.272 ops/s
# Warmup Iteration   4: 1315498.405 ops/s
# Warmup Iteration   5: 1594791.785 ops/s
# Warmup Iteration   6: 1595140.591 ops/s
# Warmup Iteration   7: 1599804.162 ops/s
# Warmup Iteration   8: 1592248.028 ops/s
# Warmup Iteration   9: 1594087.072 ops/s
# Warmup Iteration  10: 1600413.792 ops/s
# Warmup Iteration  11: 1598101.163 ops/s
# Warmup Iteration  12: 1594014.253 ops/s
# Warmup Iteration  13: 1595816.468 ops/s
# Warmup Iteration  14: 1593498.849 ops/s
# Warmup Iteration  15: 1594882.348 ops/s
# Warmup Iteration  16: 1596312.002 ops/s
# Warmup Iteration  17: 1591001.835 ops/s
# Warmup Iteration  18: 1580512.985 ops/s
# Warmup Iteration  19: 1594424.375 ops/s
# Warmup Iteration  20: 1593786.659 ops/s
# Warmup Iteration  21: 1594374.109 ops/s
# Warmup Iteration  22: 1598565.031 ops/s
# Warmup Iteration  23: 1595651.904 ops/s
# Warmup Iteration  24: 1593928.795 ops/s
# Warmup Iteration  25: 1595989.968 ops/s
# Warmup Iteration  26: 1593006.272 ops/s
# Warmup Iteration  27: 1594763.644 ops/s
# Warmup Iteration  28: 1582247.537 ops/s
# Warmup Iteration  29: 1595802.013 ops/s
# Warmup Iteration  30: 1596367.075 ops/s
Iteration   1: 1592664.159 ops/s
Iteration   2: 1591775.611 ops/s
Iteration   3: 1601022.880 ops/s
Iteration   4: 1595452.372 ops/s
Iteration   5: 1589587.423 ops/s
Iteration   6: 1591219.852 ops/s
Iteration   7: 1596437.799 ops/s
Iteration   8: 1595495.423 ops/s
Iteration   9: 1591915.517 ops/s
Iteration  10: 1599429.368 ops/s
Iteration  11: 1572908.640 ops/s
Iteration  12: 1597889.689 ops/s
Iteration  13: 1597032.697 ops/s
Iteration  14: 1600125.876 ops/s
Iteration  15: 1594173.023 ops/s
Iteration  16: 1592970.167 ops/s
Iteration  17: 1593228.561 ops/s
Iteration  18: 1598236.218 ops/s
Iteration  19: 1596197.660 ops/s
Iteration  20: 1594171.909 ops/s
Iteration  21: 1595557.093 ops/s
Iteration  22: 1595977.535 ops/s
Iteration  23: 1598425.091 ops/s
Iteration  24: 1593374.340 ops/s
Iteration  25: 1595995.249 ops/s
Iteration  26: 1594125.618 ops/s
Iteration  27: 1585198.435 ops/s
Iteration  28: 1593147.100 ops/s
Iteration  29: 1593354.006 ops/s
Iteration  30: 1596416.318 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_collect":
  1594116.854 ±(99.9%) 3449.154 ops/s [Average]
  (min, avg, max) = (1572908.640, 1594116.854, 1601022.880), stdev = 5162.531
  CI (99.9%): [1590667.701, 1597566.008] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_collect  thrpt   30  1594116.854 ± 3449.154  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1502712.239 ops/s
# Warmup Iteration   2: 3304581.104 ops/s
# Warmup Iteration   3: 2744779.653 ops/s
# Warmup Iteration   4: 3311608.255 ops/s
# Warmup Iteration   5: 3302762.259 ops/s
# Warmup Iteration   6: 3304196.910 ops/s
# Warmup Iteration   7: 3304016.639 ops/s
# Warmup Iteration   8: 3309098.968 ops/s
# Warmup Iteration   9: 3316811.965 ops/s
# Warmup Iteration  10: 3303597.224 ops/s
# Warmup Iteration  11: 3293415.814 ops/s
# Warmup Iteration  12: 3308154.227 ops/s
# Warmup Iteration  13: 3313929.865 ops/s
# Warmup Iteration  14: 3301194.449 ops/s
# Warmup Iteration  15: 3301988.679 ops/s
# Warmup Iteration  16: 3300683.959 ops/s
# Warmup Iteration  17: 3307569.520 ops/s
# Warmup Iteration  18: 3301924.717 ops/s
# Warmup Iteration  19: 3308349.953 ops/s
# Warmup Iteration  20: 3308117.622 ops/s
# Warmup Iteration  21: 3314143.563 ops/s
# Warmup Iteration  22: 3304892.792 ops/s
# Warmup Iteration  23: 3306055.674 ops/s
# Warmup Iteration  24: 3306232.326 ops/s
# Warmup Iteration  25: 3298921.756 ops/s
# Warmup Iteration  26: 3306923.867 ops/s
# Warmup Iteration  27: 3305992.504 ops/s
# Warmup Iteration  28: 3299000.914 ops/s
# Warmup Iteration  29: 3305549.938 ops/s
# Warmup Iteration  30: 3306054.041 ops/s
Iteration   1: 3303696.050 ops/s
Iteration   2: 3302612.546 ops/s
Iteration   3: 3306973.471 ops/s
Iteration   4: 3303317.411 ops/s
Iteration   5: 3312140.362 ops/s
Iteration   6: 3301161.238 ops/s
Iteration   7: 3283775.922 ops/s
Iteration   8: 3308872.557 ops/s
Iteration   9: 3311959.080 ops/s
Iteration  10: 3303477.591 ops/s
Iteration  11: 3302733.786 ops/s
Iteration  12: 3315347.436 ops/s
Iteration  13: 3310785.285 ops/s
Iteration  14: 3303865.290 ops/s
Iteration  15: 3294996.808 ops/s
Iteration  16: 3297663.926 ops/s
Iteration  17: 3305434.241 ops/s
Iteration  18: 3311726.728 ops/s
Iteration  19: 3309168.755 ops/s
Iteration  20: 3300174.239 ops/s
Iteration  21: 3310208.980 ops/s
Iteration  22: 3306606.500 ops/s
Iteration  23: 3307813.093 ops/s
Iteration  24: 3305782.510 ops/s
Iteration  25: 3313478.777 ops/s
Iteration  26: 3310594.760 ops/s
Iteration  27: 3311672.976 ops/s
Iteration  28: 3298226.010 ops/s
Iteration  29: 3302432.304 ops/s
Iteration  30: 3307378.895 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_contains":
  3305469.251 ±(99.9%) 4334.294 ops/s [Average]
  (min, avg, max) = (3283775.922, 3305469.251, 3315347.436), stdev = 6487.368
  CI (99.9%): [3301134.956, 3309803.545] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_contains  thrpt   30  3305469.251 ± 4334.294  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3311204.477 ops/s
# Warmup Iteration   2: 6991787.533 ops/s
# Warmup Iteration   3: 5942705.366 ops/s
# Warmup Iteration   4: 7029784.571 ops/s
# Warmup Iteration   5: 7102902.244 ops/s
# Warmup Iteration   6: 7088893.117 ops/s
# Warmup Iteration   7: 7070446.464 ops/s
# Warmup Iteration   8: 7111605.672 ops/s
# Warmup Iteration   9: 7074486.298 ops/s
# Warmup Iteration  10: 7097811.261 ops/s
# Warmup Iteration  11: 7110308.950 ops/s
# Warmup Iteration  12: 7101425.559 ops/s
# Warmup Iteration  13: 7102737.914 ops/s
# Warmup Iteration  14: 7104685.599 ops/s
# Warmup Iteration  15: 7108000.183 ops/s
# Warmup Iteration  16: 7102362.820 ops/s
# Warmup Iteration  17: 7115448.243 ops/s
# Warmup Iteration  18: 7086769.972 ops/s
# Warmup Iteration  19: 7104860.208 ops/s
# Warmup Iteration  20: 7108574.548 ops/s
# Warmup Iteration  21: 6995254.979 ops/s
# Warmup Iteration  22: 7105708.204 ops/s
# Warmup Iteration  23: 7058521.383 ops/s
# Warmup Iteration  24: 7103182.522 ops/s
# Warmup Iteration  25: 7100579.119 ops/s
# Warmup Iteration  26: 7105563.591 ops/s
# Warmup Iteration  27: 7089771.861 ops/s
# Warmup Iteration  28: 7104339.918 ops/s
# Warmup Iteration  29: 7092980.846 ops/s
# Warmup Iteration  30: 7097936.895 ops/s
Iteration   1: 7111296.752 ops/s
Iteration   2: 7081073.592 ops/s
Iteration   3: 7080818.806 ops/s
Iteration   4: 7090433.964 ops/s
Iteration   5: 7107675.124 ops/s
Iteration   6: 6972215.101 ops/s
Iteration   7: 7102301.336 ops/s
Iteration   8: 7100586.284 ops/s
Iteration   9: 7097944.160 ops/s
Iteration  10: 7105931.116 ops/s
Iteration  11: 7098280.852 ops/s
Iteration  12: 7109873.062 ops/s
Iteration  13: 7097086.792 ops/s
Iteration  14: 7093638.848 ops/s
Iteration  15: 7090849.054 ops/s
Iteration  16: 7131181.335 ops/s
Iteration  17: 7066460.979 ops/s
Iteration  18: 7084032.647 ops/s
Iteration  19: 7077654.673 ops/s
Iteration  20: 7076744.432 ops/s
Iteration  21: 7120849.027 ops/s
Iteration  22: 7107483.580 ops/s
Iteration  23: 7099850.728 ops/s
Iteration  24: 7109852.977 ops/s
Iteration  25: 7114858.131 ops/s
Iteration  26: 7110348.726 ops/s
Iteration  27: 7092489.610 ops/s
Iteration  28: 7082121.298 ops/s
Iteration  29: 7087194.939 ops/s
Iteration  30: 7083256.412 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_containsAllArray":
  7092812.811 ±(99.9%) 18059.895 ops/s [Average]
  (min, avg, max) = (6972215.101, 7092812.811, 7131181.335), stdev = 27031.203
  CI (99.9%): [7074752.916, 7110872.707] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_containsAllArray  thrpt   30  7092812.811 ± 18059.895  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1533595.174 ops/s
# Warmup Iteration   2: 3487739.666 ops/s
# Warmup Iteration   3: 3491772.812 ops/s
# Warmup Iteration   4: 2911735.567 ops/s
# Warmup Iteration   5: 3496007.257 ops/s
# Warmup Iteration   6: 3495980.281 ops/s
# Warmup Iteration   7: 3495163.700 ops/s
# Warmup Iteration   8: 3502797.855 ops/s
# Warmup Iteration   9: 3501464.365 ops/s
# Warmup Iteration  10: 3488558.040 ops/s
# Warmup Iteration  11: 3502298.616 ops/s
# Warmup Iteration  12: 3499633.932 ops/s
# Warmup Iteration  13: 3499689.367 ops/s
# Warmup Iteration  14: 3494576.236 ops/s
# Warmup Iteration  15: 3474850.720 ops/s
# Warmup Iteration  16: 3495217.880 ops/s
# Warmup Iteration  17: 3469515.546 ops/s
# Warmup Iteration  18: 3464519.778 ops/s
# Warmup Iteration  19: 3495154.462 ops/s
# Warmup Iteration  20: 3490808.930 ops/s
# Warmup Iteration  21: 3493101.601 ops/s
# Warmup Iteration  22: 3501652.303 ops/s
# Warmup Iteration  23: 3466097.852 ops/s
# Warmup Iteration  24: 3495887.661 ops/s
# Warmup Iteration  25: 3484471.131 ops/s
# Warmup Iteration  26: 3498803.014 ops/s
# Warmup Iteration  27: 3500844.420 ops/s
# Warmup Iteration  28: 3495329.787 ops/s
# Warmup Iteration  29: 3497339.295 ops/s
# Warmup Iteration  30: 3500998.468 ops/s
Iteration   1: 3506329.163 ops/s
Iteration   2: 3497828.346 ops/s
Iteration   3: 3504905.212 ops/s
Iteration   4: 3499083.719 ops/s
Iteration   5: 3494977.846 ops/s
Iteration   6: 3494191.810 ops/s
Iteration   7: 3500325.530 ops/s
Iteration   8: 3499961.645 ops/s
Iteration   9: 3499922.923 ops/s
Iteration  10: 3494817.204 ops/s
Iteration  11: 3500372.571 ops/s
Iteration  12: 3503028.343 ops/s
Iteration  13: 3484993.013 ops/s
Iteration  14: 3505234.536 ops/s
Iteration  15: 3500037.230 ops/s
Iteration  16: 3503596.854 ops/s
Iteration  17: 3496069.806 ops/s
Iteration  18: 3495392.958 ops/s
Iteration  19: 3500705.705 ops/s
Iteration  20: 3505520.646 ops/s
Iteration  21: 3487393.785 ops/s
Iteration  22: 3508840.025 ops/s
Iteration  23: 3495149.016 ops/s
Iteration  24: 3496902.712 ops/s
Iteration  25: 3496832.863 ops/s
Iteration  26: 3504873.249 ops/s
Iteration  27: 3487071.531 ops/s
Iteration  28: 3491752.470 ops/s
Iteration  29: 3494875.490 ops/s
Iteration  30: 3499701.975 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_containsAllIterable":
  3498356.272 ±(99.9%) 3888.894 ops/s [Average]
  (min, avg, max) = (3484993.013, 3498356.272, 3508840.025), stdev = 5820.714
  CI (99.9%): [3494467.378, 3502245.167] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt        Score      Error  Units
UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_containsAllIterable  thrpt   30  3498356.272 ± 3888.894  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_containsAnyArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_containsAnyArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1249980.343 ops/s
# Warmup Iteration   2: 2810189.115 ops/s
# Warmup Iteration   3: 2789383.314 ops/s
# Warmup Iteration   4: 2337313.063 ops/s
# Warmup Iteration   5: 2807525.509 ops/s
# Warmup Iteration   6: 2791785.016 ops/s
# Warmup Iteration   7: 2815498.500 ops/s
# Warmup Iteration   8: 2813038.929 ops/s
# Warmup Iteration   9: 2813687.871 ops/s
# Warmup Iteration  10: 2812690.920 ops/s
# Warmup Iteration  11: 2812577.698 ops/s
# Warmup Iteration  12: 2813739.528 ops/s
# Warmup Iteration  13: 2806685.132 ops/s
# Warmup Iteration  14: 2814995.017 ops/s
# Warmup Iteration  15: 2812307.778 ops/s
# Warmup Iteration  16: 2808204.996 ops/s
# Warmup Iteration  17: 2808917.740 ops/s
# Warmup Iteration  18: 2809867.382 ops/s
# Warmup Iteration  19: 2813198.359 ops/s
# Warmup Iteration  20: 2812707.471 ops/s
# Warmup Iteration  21: 2812617.068 ops/s
# Warmup Iteration  22: 2810971.182 ops/s
# Warmup Iteration  23: 2817332.782 ops/s
# Warmup Iteration  24: 2811772.161 ops/s
# Warmup Iteration  25: 2789954.365 ops/s
# Warmup Iteration  26: 2812574.145 ops/s
# Warmup Iteration  27: 2816754.866 ops/s
# Warmup Iteration  28: 2811641.274 ops/s
# Warmup Iteration  29: 2799409.542 ops/s
# Warmup Iteration  30: 2814998.541 ops/s
Iteration   1: 2818143.076 ops/s
Iteration   2: 2805325.588 ops/s
Iteration   3: 2811814.725 ops/s
Iteration   4: 2812893.573 ops/s
Iteration   5: 2819820.573 ops/s
Iteration   6: 2819964.213 ops/s
Iteration   7: 2819056.172 ops/s
Iteration   8: 2817212.963 ops/s
Iteration   9: 2807834.673 ops/s
Iteration  10: 2819081.060 ops/s
Iteration  11: 2821636.774 ops/s
Iteration  12: 2814993.332 ops/s
Iteration  13: 2813415.385 ops/s
Iteration  14: 2816735.321 ops/s
Iteration  15: 2808845.610 ops/s
Iteration  16: 2816564.642 ops/s
Iteration  17: 2817004.266 ops/s
Iteration  18: 2812546.300 ops/s
Iteration  19: 2812707.748 ops/s
Iteration  20: 2820299.994 ops/s
Iteration  21: 2817983.296 ops/s
Iteration  22: 2814835.940 ops/s
Iteration  23: 2810956.005 ops/s
Iteration  24: 2807411.799 ops/s
Iteration  25: 2809325.613 ops/s
Iteration  26: 2813982.882 ops/s
Iteration  27: 2763658.608 ops/s
Iteration  28: 2809745.917 ops/s
Iteration  29: 2818695.435 ops/s
Iteration  30: 2812053.608 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_containsAnyArray":
  2812818.170 ±(99.9%) 6849.182 ops/s [Average]
  (min, avg, max) = (2763658.608, 2812818.170, 2821636.774), stdev = 10251.535
  CI (99.9%): [2805968.987, 2819667.352] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score      Error  Units
UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_containsAnyArray  thrpt   30  2812818.170 ± 6849.182  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_containsAnyIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_containsAnyIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 489380.661 ops/s
# Warmup Iteration   2: 765394.495 ops/s
# Warmup Iteration   3: 882662.681 ops/s
# Warmup Iteration   4: 882302.383 ops/s
# Warmup Iteration   5: 882221.509 ops/s
# Warmup Iteration   6: 792518.269 ops/s
# Warmup Iteration   7: 823195.741 ops/s
# Warmup Iteration   8: 882826.067 ops/s
# Warmup Iteration   9: 881133.658 ops/s
# Warmup Iteration  10: 884255.194 ops/s
# Warmup Iteration  11: 885403.893 ops/s
# Warmup Iteration  12: 884018.491 ops/s
# Warmup Iteration  13: 885062.554 ops/s
# Warmup Iteration  14: 885298.975 ops/s
# Warmup Iteration  15: 883801.225 ops/s
# Warmup Iteration  16: 884035.937 ops/s
# Warmup Iteration  17: 882567.382 ops/s
# Warmup Iteration  18: 882284.720 ops/s
# Warmup Iteration  19: 886234.469 ops/s
# Warmup Iteration  20: 882014.903 ops/s
# Warmup Iteration  21: 882034.057 ops/s
# Warmup Iteration  22: 883727.365 ops/s
# Warmup Iteration  23: 883881.333 ops/s
# Warmup Iteration  24: 884336.347 ops/s
# Warmup Iteration  25: 884418.786 ops/s
# Warmup Iteration  26: 883094.788 ops/s
# Warmup Iteration  27: 883079.641 ops/s
# Warmup Iteration  28: 883430.132 ops/s
# Warmup Iteration  29: 883407.579 ops/s
# Warmup Iteration  30: 883859.505 ops/s
Iteration   1: 882095.141 ops/s
Iteration   2: 882385.253 ops/s
Iteration   3: 883413.733 ops/s
Iteration   4: 883746.484 ops/s
Iteration   5: 885245.242 ops/s
Iteration   6: 884858.869 ops/s
Iteration   7: 883967.011 ops/s
Iteration   8: 888886.143 ops/s
Iteration   9: 882130.861 ops/s
Iteration  10: 884830.546 ops/s
Iteration  11: 882752.642 ops/s
Iteration  12: 884511.748 ops/s
Iteration  13: 882791.672 ops/s
Iteration  14: 883827.404 ops/s
Iteration  15: 884528.803 ops/s
Iteration  16: 883525.009 ops/s
Iteration  17: 884232.453 ops/s
Iteration  18: 882424.790 ops/s
Iteration  19: 884088.578 ops/s
Iteration  20: 883313.181 ops/s
Iteration  21: 884597.231 ops/s
Iteration  22: 884974.664 ops/s
Iteration  23: 885429.941 ops/s
Iteration  24: 882720.280 ops/s
Iteration  25: 883565.097 ops/s
Iteration  26: 883062.728 ops/s
Iteration  27: 883846.040 ops/s
Iteration  28: 881256.901 ops/s
Iteration  29: 884047.644 ops/s
Iteration  30: 882580.851 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_containsAnyIterable":
  883787.898 ±(99.9%) 945.591 ops/s [Average]
  (min, avg, max) = (881256.901, 883787.898, 888886.143), stdev = 1415.317
  CI (99.9%): [882842.307, 884733.489] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score     Error  Units
UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_containsAnyIterable  thrpt   30  883787.898 ± 945.591  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_containsNoneArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_containsNoneArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1246747.941 ops/s
# Warmup Iteration   2: 2758712.543 ops/s
# Warmup Iteration   3: 2768700.797 ops/s
# Warmup Iteration   4: 2285225.840 ops/s
# Warmup Iteration   5: 2772414.216 ops/s
# Warmup Iteration   6: 2771154.931 ops/s
# Warmup Iteration   7: 2774794.802 ops/s
# Warmup Iteration   8: 2767588.627 ops/s
# Warmup Iteration   9: 2772626.688 ops/s
# Warmup Iteration  10: 2771552.975 ops/s
# Warmup Iteration  11: 2768012.151 ops/s
# Warmup Iteration  12: 2767551.230 ops/s
# Warmup Iteration  13: 2767040.435 ops/s
# Warmup Iteration  14: 2771335.947 ops/s
# Warmup Iteration  15: 2746030.247 ops/s
# Warmup Iteration  16: 2765947.502 ops/s
# Warmup Iteration  17: 2767934.236 ops/s
# Warmup Iteration  18: 2765701.814 ops/s
# Warmup Iteration  19: 2765919.456 ops/s
# Warmup Iteration  20: 2769149.853 ops/s
# Warmup Iteration  21: 2769021.623 ops/s
# Warmup Iteration  22: 2772256.525 ops/s
# Warmup Iteration  23: 2765709.409 ops/s
# Warmup Iteration  24: 2762515.118 ops/s
# Warmup Iteration  25: 2750485.282 ops/s
# Warmup Iteration  26: 2775490.843 ops/s
# Warmup Iteration  27: 2772717.690 ops/s
# Warmup Iteration  28: 2772073.027 ops/s
# Warmup Iteration  29: 2772607.284 ops/s
# Warmup Iteration  30: 2773364.527 ops/s
Iteration   1: 2769522.523 ops/s
Iteration   2: 2770734.153 ops/s
Iteration   3: 2769438.375 ops/s
Iteration   4: 2761283.691 ops/s
Iteration   5: 2721376.807 ops/s
Iteration   6: 2773906.864 ops/s
Iteration   7: 2768769.166 ops/s
Iteration   8: 2769446.519 ops/s
Iteration   9: 2773523.637 ops/s
Iteration  10: 2767299.695 ops/s
Iteration  11: 2770939.546 ops/s
Iteration  12: 2774159.447 ops/s
Iteration  13: 2771494.494 ops/s
Iteration  14: 2767277.656 ops/s
Iteration  15: 2731281.590 ops/s
Iteration  16: 2773451.225 ops/s
Iteration  17: 2773616.406 ops/s
Iteration  18: 2767166.801 ops/s
Iteration  19: 2776799.080 ops/s
Iteration  20: 2775690.059 ops/s
Iteration  21: 2770317.919 ops/s
Iteration  22: 2776592.477 ops/s
Iteration  23: 2774404.332 ops/s
Iteration  24: 2771534.705 ops/s
Iteration  25: 2773590.087 ops/s
Iteration  26: 2768600.664 ops/s
Iteration  27: 2774731.665 ops/s
Iteration  28: 2773032.688 ops/s
Iteration  29: 2771645.509 ops/s
Iteration  30: 2772481.414 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_containsNoneArray":
  2768470.306 ±(99.9%) 8008.751 ops/s [Average]
  (min, avg, max) = (2721376.807, 2768470.306, 2776799.080), stdev = 11987.123
  CI (99.9%): [2760461.555, 2776479.058] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score      Error  Units
UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_containsNoneArray  thrpt   30  2768470.306 ± 8008.751  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_containsNoneIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_containsNoneIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 455552.088 ops/s
# Warmup Iteration   2: 716965.955 ops/s
# Warmup Iteration   3: 819108.573 ops/s
# Warmup Iteration   4: 825439.856 ops/s
# Warmup Iteration   5: 822052.939 ops/s
# Warmup Iteration   6: 714270.278 ops/s
# Warmup Iteration   7: 786344.017 ops/s
# Warmup Iteration   8: 814990.877 ops/s
# Warmup Iteration   9: 822968.644 ops/s
# Warmup Iteration  10: 824578.133 ops/s
# Warmup Iteration  11: 823360.815 ops/s
# Warmup Iteration  12: 823046.300 ops/s
# Warmup Iteration  13: 824121.202 ops/s
# Warmup Iteration  14: 825049.887 ops/s
# Warmup Iteration  15: 824876.156 ops/s
# Warmup Iteration  16: 823497.374 ops/s
# Warmup Iteration  17: 824339.537 ops/s
# Warmup Iteration  18: 824548.319 ops/s
# Warmup Iteration  19: 824492.168 ops/s
# Warmup Iteration  20: 824724.834 ops/s
# Warmup Iteration  21: 824405.507 ops/s
# Warmup Iteration  22: 817953.880 ops/s
# Warmup Iteration  23: 825352.089 ops/s
# Warmup Iteration  24: 825638.034 ops/s
# Warmup Iteration  25: 823678.508 ops/s
# Warmup Iteration  26: 823533.269 ops/s
# Warmup Iteration  27: 824882.737 ops/s
# Warmup Iteration  28: 823944.006 ops/s
# Warmup Iteration  29: 818616.495 ops/s
# Warmup Iteration  30: 824117.149 ops/s
Iteration   1: 825796.688 ops/s
Iteration   2: 824082.316 ops/s
Iteration   3: 817816.386 ops/s
Iteration   4: 825510.302 ops/s
Iteration   5: 824969.973 ops/s
Iteration   6: 824212.027 ops/s
Iteration   7: 826510.594 ops/s
Iteration   8: 824790.429 ops/s
Iteration   9: 825168.597 ops/s
Iteration  10: 823281.590 ops/s
Iteration  11: 824836.848 ops/s
Iteration  12: 823878.778 ops/s
Iteration  13: 823548.222 ops/s
Iteration  14: 824168.491 ops/s
Iteration  15: 823285.483 ops/s
Iteration  16: 824316.144 ops/s
Iteration  17: 824297.826 ops/s
Iteration  18: 826017.556 ops/s
Iteration  19: 822411.511 ops/s
Iteration  20: 826171.270 ops/s
Iteration  21: 821937.640 ops/s
Iteration  22: 824058.669 ops/s
Iteration  23: 823826.785 ops/s
Iteration  24: 824332.518 ops/s
Iteration  25: 823284.210 ops/s
Iteration  26: 824849.179 ops/s
Iteration  27: 822790.859 ops/s
Iteration  28: 821906.758 ops/s
Iteration  29: 822102.532 ops/s
Iteration  30: 821971.675 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_containsNoneIterable":
  823871.062 ±(99.9%) 1145.128 ops/s [Average]
  (min, avg, max) = (817816.386, 823871.062, 826510.594), stdev = 1713.974
  CI (99.9%): [822725.934, 825016.190] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt       Score      Error  Units
UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_containsNoneIterable  thrpt   30  823871.062 ± 1145.128  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 896764.918 ops/s
# Warmup Iteration   2: 1785776.810 ops/s
# Warmup Iteration   3: 1901519.840 ops/s
# Warmup Iteration   4: 1898831.860 ops/s
# Warmup Iteration   5: 1553409.202 ops/s
# Warmup Iteration   6: 1905355.240 ops/s
# Warmup Iteration   7: 1895998.937 ops/s
# Warmup Iteration   8: 1901477.345 ops/s
# Warmup Iteration   9: 1902175.470 ops/s
# Warmup Iteration  10: 1901432.028 ops/s
# Warmup Iteration  11: 1899057.998 ops/s
# Warmup Iteration  12: 1900851.155 ops/s
# Warmup Iteration  13: 1901686.760 ops/s
# Warmup Iteration  14: 1899771.632 ops/s
# Warmup Iteration  15: 1898344.275 ops/s
# Warmup Iteration  16: 1898616.668 ops/s
# Warmup Iteration  17: 1900811.775 ops/s
# Warmup Iteration  18: 1903035.138 ops/s
# Warmup Iteration  19: 1902478.055 ops/s
# Warmup Iteration  20: 1902428.345 ops/s
# Warmup Iteration  21: 1899381.058 ops/s
# Warmup Iteration  22: 1901300.034 ops/s
# Warmup Iteration  23: 1896818.976 ops/s
# Warmup Iteration  24: 1893788.742 ops/s
# Warmup Iteration  25: 1897928.749 ops/s
# Warmup Iteration  26: 1897979.595 ops/s
# Warmup Iteration  27: 1899111.706 ops/s
# Warmup Iteration  28: 1902269.428 ops/s
# Warmup Iteration  29: 1900327.875 ops/s
# Warmup Iteration  30: 1900993.069 ops/s
Iteration   1: 1895990.707 ops/s
Iteration   2: 1896729.591 ops/s
Iteration   3: 1898789.064 ops/s
Iteration   4: 1902132.636 ops/s
Iteration   5: 1895529.926 ops/s
Iteration   6: 1900549.093 ops/s
Iteration   7: 1901926.841 ops/s
Iteration   8: 1904276.064 ops/s
Iteration   9: 1901684.318 ops/s
Iteration  10: 1901101.762 ops/s
Iteration  11: 1906270.156 ops/s
Iteration  12: 1898381.283 ops/s
Iteration  13: 1898003.000 ops/s
Iteration  14: 1908284.461 ops/s
Iteration  15: 1905439.733 ops/s
Iteration  16: 1898006.846 ops/s
Iteration  17: 1904892.724 ops/s
Iteration  18: 1903178.658 ops/s
Iteration  19: 1902237.982 ops/s
Iteration  20: 1897428.128 ops/s
Iteration  21: 1905251.035 ops/s
Iteration  22: 1897378.628 ops/s
Iteration  23: 1899855.615 ops/s
Iteration  24: 1903074.361 ops/s
Iteration  25: 1892088.363 ops/s
Iteration  26: 1901419.128 ops/s
Iteration  27: 1900743.991 ops/s
Iteration  28: 1905259.686 ops/s
Iteration  29: 1895124.588 ops/s
Iteration  30: 1901424.552 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_count":
  1900748.431 ±(99.9%) 2538.459 ops/s [Average]
  (min, avg, max) = (1892088.363, 1900748.431, 1908284.461), stdev = 3799.447
  CI (99.9%): [1898209.971, 1903286.890] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_count  thrpt   30  1900748.431 ± 2538.459  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1343040.308 ops/s
# Warmup Iteration   2: 3020672.947 ops/s
# Warmup Iteration   3: 3014177.760 ops/s
# Warmup Iteration   4: 2518703.139 ops/s
# Warmup Iteration   5: 3017487.113 ops/s
# Warmup Iteration   6: 2996049.420 ops/s
# Warmup Iteration   7: 3016677.362 ops/s
# Warmup Iteration   8: 3021861.016 ops/s
# Warmup Iteration   9: 3019345.182 ops/s
# Warmup Iteration  10: 3021776.738 ops/s
# Warmup Iteration  11: 3019814.763 ops/s
# Warmup Iteration  12: 3020238.618 ops/s
# Warmup Iteration  13: 3019299.099 ops/s
# Warmup Iteration  14: 2995295.756 ops/s
# Warmup Iteration  15: 3024022.686 ops/s
# Warmup Iteration  16: 3020492.924 ops/s
# Warmup Iteration  17: 2996807.914 ops/s
# Warmup Iteration  18: 3024282.407 ops/s
# Warmup Iteration  19: 3015587.091 ops/s
# Warmup Iteration  20: 2994722.976 ops/s
# Warmup Iteration  21: 3022580.212 ops/s
# Warmup Iteration  22: 3019979.975 ops/s
# Warmup Iteration  23: 3021948.912 ops/s
# Warmup Iteration  24: 3021769.717 ops/s
# Warmup Iteration  25: 3020730.414 ops/s
# Warmup Iteration  26: 3013859.766 ops/s
# Warmup Iteration  27: 3020492.983 ops/s
# Warmup Iteration  28: 3025072.613 ops/s
# Warmup Iteration  29: 3021640.321 ops/s
# Warmup Iteration  30: 3021591.405 ops/s
Iteration   1: 3020660.188 ops/s
Iteration   2: 3023011.346 ops/s
Iteration   3: 3020441.906 ops/s
Iteration   4: 3019334.925 ops/s
Iteration   5: 3026115.301 ops/s
Iteration   6: 3019223.141 ops/s
Iteration   7: 3016236.912 ops/s
Iteration   8: 3017907.115 ops/s
Iteration   9: 3023242.115 ops/s
Iteration  10: 3019236.975 ops/s
Iteration  11: 3020468.590 ops/s
Iteration  12: 3025442.756 ops/s
Iteration  13: 3025043.658 ops/s
Iteration  14: 3023541.059 ops/s
Iteration  15: 3025815.393 ops/s
Iteration  16: 3023751.938 ops/s
Iteration  17: 3016150.972 ops/s
Iteration  18: 3025656.891 ops/s
Iteration  19: 3021434.282 ops/s
Iteration  20: 3020772.287 ops/s
Iteration  21: 3024355.786 ops/s
Iteration  22: 3025024.398 ops/s
Iteration  23: 3017752.451 ops/s
Iteration  24: 3016449.130 ops/s
Iteration  25: 3026125.597 ops/s
Iteration  26: 3019134.439 ops/s
Iteration  27: 3021963.866 ops/s
Iteration  28: 3019788.504 ops/s
Iteration  29: 3023587.058 ops/s
Iteration  30: 3023138.593 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_detectIfNone":
  3021693.586 ±(99.9%) 2089.625 ops/s [Average]
  (min, avg, max) = (3016150.972, 3021693.586, 3026125.597), stdev = 3127.653
  CI (99.9%): [3019603.960, 3023783.211] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score      Error  Units
UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_detectIfNone  thrpt   30  3021693.586 ± 2089.625  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2003417.939 ops/s
# Warmup Iteration   2: 4211625.820 ops/s
# Warmup Iteration   3: 3530186.927 ops/s
# Warmup Iteration   4: 4243654.522 ops/s
# Warmup Iteration   5: 4251053.762 ops/s
# Warmup Iteration   6: 4242942.224 ops/s
# Warmup Iteration   7: 4231555.430 ops/s
# Warmup Iteration   8: 4235194.076 ops/s
# Warmup Iteration   9: 4252912.321 ops/s
# Warmup Iteration  10: 4251404.393 ops/s
# Warmup Iteration  11: 4235531.190 ops/s
# Warmup Iteration  12: 4239309.668 ops/s
# Warmup Iteration  13: 4235382.740 ops/s
# Warmup Iteration  14: 4247762.239 ops/s
# Warmup Iteration  15: 4242294.236 ops/s
# Warmup Iteration  16: 4232483.555 ops/s
# Warmup Iteration  17: 4240727.331 ops/s
# Warmup Iteration  18: 4239073.563 ops/s
# Warmup Iteration  19: 4245365.945 ops/s
# Warmup Iteration  20: 4240858.225 ops/s
# Warmup Iteration  21: 4231843.617 ops/s
# Warmup Iteration  22: 4252154.550 ops/s
# Warmup Iteration  23: 4239163.747 ops/s
# Warmup Iteration  24: 4248057.914 ops/s
# Warmup Iteration  25: 4227141.991 ops/s
# Warmup Iteration  26: 4241727.027 ops/s
# Warmup Iteration  27: 4242157.418 ops/s
# Warmup Iteration  28: 4218539.722 ops/s
# Warmup Iteration  29: 4243905.179 ops/s
# Warmup Iteration  30: 4237599.321 ops/s
Iteration   1: 4247102.225 ops/s
Iteration   2: 4233975.195 ops/s
Iteration   3: 4252829.358 ops/s
Iteration   4: 4233798.399 ops/s
Iteration   5: 4220422.530 ops/s
Iteration   6: 4254516.107 ops/s
Iteration   7: 4236851.164 ops/s
Iteration   8: 4236473.583 ops/s
Iteration   9: 4235956.775 ops/s
Iteration  10: 4254770.664 ops/s
Iteration  11: 4250607.391 ops/s
Iteration  12: 4179058.870 ops/s
Iteration  13: 4250320.871 ops/s
Iteration  14: 4254838.037 ops/s
Iteration  15: 4240675.165 ops/s
Iteration  16: 4252378.365 ops/s
Iteration  17: 4245419.546 ops/s
Iteration  18: 4237788.956 ops/s
Iteration  19: 4207884.293 ops/s
Iteration  20: 4239115.361 ops/s
Iteration  21: 4242548.076 ops/s
Iteration  22: 4236415.473 ops/s
Iteration  23: 4251253.442 ops/s
Iteration  24: 4246826.995 ops/s
Iteration  25: 4246157.282 ops/s
Iteration  26: 4166127.333 ops/s
Iteration  27: 4235199.472 ops/s
Iteration  28: 4258285.441 ops/s
Iteration  29: 4243416.978 ops/s
Iteration  30: 4248225.099 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_forEach":
  4237974.615 ±(99.9%) 13879.349 ops/s [Average]
  (min, avg, max) = (4166127.333, 4237974.615, 4258285.441), stdev = 20773.958
  CI (99.9%): [4224095.266, 4251853.964] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_forEach  thrpt   30  4237974.615 ± 13879.349  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5503892.448 ops/s
# Warmup Iteration   2: 11690570.416 ops/s
# Warmup Iteration   3: 9939340.655 ops/s
# Warmup Iteration   4: 11966007.700 ops/s
# Warmup Iteration   5: 11955088.347 ops/s
# Warmup Iteration   6: 11945664.944 ops/s
# Warmup Iteration   7: 11993245.516 ops/s
# Warmup Iteration   8: 11932426.398 ops/s
# Warmup Iteration   9: 11956235.820 ops/s
# Warmup Iteration  10: 11972628.806 ops/s
# Warmup Iteration  11: 11951191.672 ops/s
# Warmup Iteration  12: 11924965.180 ops/s
# Warmup Iteration  13: 11975852.071 ops/s
# Warmup Iteration  14: 11957253.431 ops/s
# Warmup Iteration  15: 11943068.053 ops/s
# Warmup Iteration  16: 11960531.588 ops/s
# Warmup Iteration  17: 11929143.132 ops/s
# Warmup Iteration  18: 11971200.093 ops/s
# Warmup Iteration  19: 11994107.724 ops/s
# Warmup Iteration  20: 11940170.052 ops/s
# Warmup Iteration  21: 11968944.384 ops/s
# Warmup Iteration  22: 11983847.972 ops/s
# Warmup Iteration  23: 11929148.158 ops/s
# Warmup Iteration  24: 11940766.965 ops/s
# Warmup Iteration  25: 11977283.114 ops/s
# Warmup Iteration  26: 11985812.820 ops/s
# Warmup Iteration  27: 11987460.425 ops/s
# Warmup Iteration  28: 11930290.190 ops/s
# Warmup Iteration  29: 11961309.519 ops/s
# Warmup Iteration  30: 11981809.213 ops/s
Iteration   1: 11963667.228 ops/s
Iteration   2: 11953302.828 ops/s
Iteration   3: 11965387.037 ops/s
Iteration   4: 11966571.829 ops/s
Iteration   5: 12011403.579 ops/s
Iteration   6: 11974257.791 ops/s
Iteration   7: 11990970.611 ops/s
Iteration   8: 11955529.165 ops/s
Iteration   9: 11955503.851 ops/s
Iteration  10: 12001510.750 ops/s
Iteration  11: 11914305.633 ops/s
Iteration  12: 11886389.590 ops/s
Iteration  13: 12002113.560 ops/s
Iteration  14: 11918220.176 ops/s
Iteration  15: 11984652.251 ops/s
Iteration  16: 11966000.448 ops/s
Iteration  17: 11964547.271 ops/s
Iteration  18: 11968676.958 ops/s
Iteration  19: 11976820.344 ops/s
Iteration  20: 11952644.654 ops/s
Iteration  21: 12004071.064 ops/s
Iteration  22: 11970286.830 ops/s
Iteration  23: 11970249.836 ops/s
Iteration  24: 11980304.820 ops/s
Iteration  25: 11966846.645 ops/s
Iteration  26: 12014452.713 ops/s
Iteration  27: 11946637.015 ops/s
Iteration  28: 11930858.219 ops/s
Iteration  29: 11973921.932 ops/s
Iteration  30: 11916407.242 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_injectInto":
  11964883.729 ±(99.9%) 19921.985 ops/s [Average]
  (min, avg, max) = (11886389.590, 11964883.729, 12014452.713), stdev = 29818.292
  CI (99.9%): [11944961.744, 11984805.714] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt         Score       Error  Units
UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_injectInto  thrpt   30  11964883.729 ± 19921.985  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1195981.942 ops/s
# Warmup Iteration   2: 1935488.171 ops/s
# Warmup Iteration   3: 2283402.585 ops/s
# Warmup Iteration   4: 2280188.407 ops/s
# Warmup Iteration   5: 2268144.640 ops/s
# Warmup Iteration   6: 2289617.810 ops/s
# Warmup Iteration   7: 2286252.253 ops/s
# Warmup Iteration   8: 2288261.242 ops/s
# Warmup Iteration   9: 2277106.280 ops/s
# Warmup Iteration  10: 2259822.737 ops/s
# Warmup Iteration  11: 2283090.521 ops/s
# Warmup Iteration  12: 2289997.714 ops/s
# Warmup Iteration  13: 2265546.113 ops/s
# Warmup Iteration  14: 2251641.661 ops/s
# Warmup Iteration  15: 2280776.734 ops/s
# Warmup Iteration  16: 2290483.075 ops/s
# Warmup Iteration  17: 2285715.467 ops/s
# Warmup Iteration  18: 2288792.178 ops/s
# Warmup Iteration  19: 2274851.556 ops/s
# Warmup Iteration  20: 2260221.084 ops/s
# Warmup Iteration  21: 2256547.071 ops/s
# Warmup Iteration  22: 2295913.764 ops/s
# Warmup Iteration  23: 2289069.189 ops/s
# Warmup Iteration  24: 2258222.414 ops/s
# Warmup Iteration  25: 2262179.456 ops/s
# Warmup Iteration  26: 2275978.544 ops/s
# Warmup Iteration  27: 2289843.314 ops/s
# Warmup Iteration  28: 2267405.209 ops/s
# Warmup Iteration  29: 2270876.307 ops/s
# Warmup Iteration  30: 2263030.707 ops/s
Iteration   1: 2294268.858 ops/s
Iteration   2: 2288626.804 ops/s
Iteration   3: 2312272.669 ops/s
Iteration   4: 2296248.940 ops/s
Iteration   5: 2294007.977 ops/s
Iteration   6: 2268015.098 ops/s
Iteration   7: 2245154.681 ops/s
Iteration   8: 2262472.040 ops/s
Iteration   9: 2258026.942 ops/s
Iteration  10: 2255260.995 ops/s
Iteration  11: 2273685.279 ops/s
Iteration  12: 2287628.097 ops/s
Iteration  13: 2274814.933 ops/s
Iteration  14: 2243594.428 ops/s
Iteration  15: 2280833.158 ops/s
Iteration  16: 2271469.696 ops/s
Iteration  17: 2255596.184 ops/s
Iteration  18: 2267704.491 ops/s
Iteration  19: 2275527.653 ops/s
Iteration  20: 2274977.129 ops/s
Iteration  21: 2272868.617 ops/s
Iteration  22: 2273952.313 ops/s
Iteration  23: 2269989.927 ops/s
Iteration  24: 2264778.853 ops/s
Iteration  25: 2264761.633 ops/s
Iteration  26: 2282953.113 ops/s
Iteration  27: 2276019.208 ops/s
Iteration  28: 2280251.982 ops/s
Iteration  29: 2260975.482 ops/s
Iteration  30: 2260799.399 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_isEmpty":
  2272917.886 ±(99.9%) 10198.668 ops/s [Average]
  (min, avg, max) = (2243594.428, 2272917.886, 2312272.669), stdev = 15264.888
  CI (99.9%): [2262719.218, 2283116.554] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_isEmpty  thrpt   30  2272917.886 ± 10198.668  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_iterator_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_iterator_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 650153.368 ops/s
# Warmup Iteration   2: 670424.296 ops/s
# Warmup Iteration   3: 876607.166 ops/s
# Warmup Iteration   4: 886921.839 ops/s
# Warmup Iteration   5: 887228.092 ops/s
# Warmup Iteration   6: 881726.485 ops/s
# Warmup Iteration   7: 886605.139 ops/s
# Warmup Iteration   8: 887785.705 ops/s
# Warmup Iteration   9: 886497.543 ops/s
# Warmup Iteration  10: 885375.743 ops/s
# Warmup Iteration  11: 880121.325 ops/s
# Warmup Iteration  12: 737055.279 ops/s
# Warmup Iteration  13: 886351.087 ops/s
# Warmup Iteration  14: 879455.713 ops/s
# Warmup Iteration  15: 888258.278 ops/s
# Warmup Iteration  16: 887613.823 ops/s
# Warmup Iteration  17: 939938.947 ops/s
# Warmup Iteration  18: 943826.989 ops/s
# Warmup Iteration  19: 947958.094 ops/s
# Warmup Iteration  20: 945220.274 ops/s
# Warmup Iteration  21: 944980.737 ops/s
# Warmup Iteration  22: 943899.203 ops/s
# Warmup Iteration  23: 944412.701 ops/s
# Warmup Iteration  24: 944164.168 ops/s
# Warmup Iteration  25: 946006.775 ops/s
# Warmup Iteration  26: 945346.242 ops/s
# Warmup Iteration  27: 945069.944 ops/s
# Warmup Iteration  28: 945027.822 ops/s
# Warmup Iteration  29: 945950.638 ops/s
# Warmup Iteration  30: 943304.311 ops/s
Iteration   1: 943925.222 ops/s
Iteration   2: 942109.350 ops/s
Iteration   3: 944629.694 ops/s
Iteration   4: 943317.456 ops/s
Iteration   5: 929708.714 ops/s
Iteration   6: 946459.385 ops/s
Iteration   7: 944681.685 ops/s
Iteration   8: 945426.533 ops/s
Iteration   9: 944697.044 ops/s
Iteration  10: 946006.488 ops/s
Iteration  11: 941216.198 ops/s
Iteration  12: 944232.847 ops/s
Iteration  13: 943350.716 ops/s
Iteration  14: 944137.975 ops/s
Iteration  15: 945211.001 ops/s
Iteration  16: 944865.139 ops/s
Iteration  17: 943578.644 ops/s
Iteration  18: 946582.246 ops/s
Iteration  19: 912839.440 ops/s
Iteration  20: 942597.972 ops/s
Iteration  21: 940155.065 ops/s
Iteration  22: 945281.109 ops/s
Iteration  23: 942526.606 ops/s
Iteration  24: 945003.267 ops/s
Iteration  25: 945706.360 ops/s
Iteration  26: 946978.148 ops/s
Iteration  27: 943107.933 ops/s
Iteration  28: 947689.331 ops/s
Iteration  29: 942153.550 ops/s
Iteration  30: 944100.253 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_iterator_throws":
  942742.512 ±(99.9%) 4322.334 ops/s [Average]
  (min, avg, max) = (912839.440, 942742.512, 947689.331), stdev = 6469.467
  CI (99.9%): [938420.178, 947064.846] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score      Error  Units
UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_iterator_throws  thrpt   30  942742.512 ± 4322.334  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 701271.231 ops/s
# Warmup Iteration   2: 766999.353 ops/s
# Warmup Iteration   3: 988597.525 ops/s
# Warmup Iteration   4: 982976.014 ops/s
# Warmup Iteration   5: 980671.923 ops/s
# Warmup Iteration   6: 981634.648 ops/s
# Warmup Iteration   7: 980108.373 ops/s
# Warmup Iteration   8: 978110.009 ops/s
# Warmup Iteration   9: 977140.267 ops/s
# Warmup Iteration  10: 845584.234 ops/s
# Warmup Iteration  11: 957052.890 ops/s
# Warmup Iteration  12: 981797.638 ops/s
# Warmup Iteration  13: 982455.588 ops/s
# Warmup Iteration  14: 982931.452 ops/s
# Warmup Iteration  15: 983790.023 ops/s
# Warmup Iteration  16: 981664.624 ops/s
# Warmup Iteration  17: 1041595.794 ops/s
# Warmup Iteration  18: 1045886.060 ops/s
# Warmup Iteration  19: 1041709.801 ops/s
# Warmup Iteration  20: 1042860.670 ops/s
# Warmup Iteration  21: 1042736.063 ops/s
# Warmup Iteration  22: 1030455.872 ops/s
# Warmup Iteration  23: 1041442.915 ops/s
# Warmup Iteration  24: 1042552.113 ops/s
# Warmup Iteration  25: 1041405.889 ops/s
# Warmup Iteration  26: 1041595.886 ops/s
# Warmup Iteration  27: 1041091.712 ops/s
# Warmup Iteration  28: 1041856.419 ops/s
# Warmup Iteration  29: 1042973.122 ops/s
# Warmup Iteration  30: 1035600.450 ops/s
Iteration   1: 1042202.186 ops/s
Iteration   2: 1043237.229 ops/s
Iteration   3: 1041275.172 ops/s
Iteration   4: 1043223.836 ops/s
Iteration   5: 1046414.388 ops/s
Iteration   6: 1041646.020 ops/s
Iteration   7: 1040598.757 ops/s
Iteration   8: 1044605.087 ops/s
Iteration   9: 1040070.342 ops/s
Iteration  10: 1038497.675 ops/s
Iteration  11: 1046343.497 ops/s
Iteration  12: 1042264.549 ops/s
Iteration  13: 1043543.033 ops/s
Iteration  14: 1040786.533 ops/s
Iteration  15: 1039252.656 ops/s
Iteration  16: 1039301.278 ops/s
Iteration  17: 1039585.123 ops/s
Iteration  18: 1044750.757 ops/s
Iteration  19: 1043534.208 ops/s
Iteration  20: 1042414.014 ops/s
Iteration  21: 1043521.323 ops/s
Iteration  22: 1039277.463 ops/s
Iteration  23: 1034073.914 ops/s
Iteration  24: 1040790.915 ops/s
Iteration  25: 1042745.573 ops/s
Iteration  26: 1039301.524 ops/s
Iteration  27: 1035846.664 ops/s
Iteration  28: 1040833.699 ops/s
Iteration  29: 1049069.832 ops/s
Iteration  30: 1038240.303 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList":
  1041574.918 ±(99.9%) 2080.679 ops/s [Average]
  (min, avg, max) = (1034073.914, 1041574.918, 1049069.832), stdev = 3114.263
  CI (99.9%): [1039494.239, 1043655.598] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt        Score      Error  Units
UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList  thrpt   30  1041574.918 ± 2080.679  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 625173.794 ops/s
# Warmup Iteration   2: 655866.790 ops/s
# Warmup Iteration   3: 874251.698 ops/s
# Warmup Iteration   4: 872497.069 ops/s
# Warmup Iteration   5: 873324.942 ops/s
# Warmup Iteration   6: 873611.655 ops/s
# Warmup Iteration   7: 870845.378 ops/s
# Warmup Iteration   8: 868471.604 ops/s
# Warmup Iteration   9: 870319.479 ops/s
# Warmup Iteration  10: 867451.775 ops/s
# Warmup Iteration  11: 722377.492 ops/s
# Warmup Iteration  12: 869816.140 ops/s
# Warmup Iteration  13: 867733.090 ops/s
# Warmup Iteration  14: 870077.970 ops/s
# Warmup Iteration  15: 870322.785 ops/s
# Warmup Iteration  16: 870287.700 ops/s
# Warmup Iteration  17: 919864.486 ops/s
# Warmup Iteration  18: 921803.850 ops/s
# Warmup Iteration  19: 920369.258 ops/s
# Warmup Iteration  20: 918993.440 ops/s
# Warmup Iteration  21: 920744.641 ops/s
# Warmup Iteration  22: 919956.874 ops/s
# Warmup Iteration  23: 919785.088 ops/s
# Warmup Iteration  24: 918027.277 ops/s
# Warmup Iteration  25: 920947.309 ops/s
# Warmup Iteration  26: 919366.299 ops/s
# Warmup Iteration  27: 921583.333 ops/s
# Warmup Iteration  28: 917664.282 ops/s
# Warmup Iteration  29: 920499.182 ops/s
# Warmup Iteration  30: 919784.079 ops/s
Iteration   1: 918091.216 ops/s
Iteration   2: 918717.100 ops/s
Iteration   3: 921398.717 ops/s
Iteration   4: 917744.544 ops/s
Iteration   5: 920861.117 ops/s
Iteration   6: 911353.378 ops/s
Iteration   7: 918339.476 ops/s
Iteration   8: 924315.004 ops/s
Iteration   9: 922670.555 ops/s
Iteration  10: 921512.043 ops/s
Iteration  11: 920174.544 ops/s
Iteration  12: 922228.420 ops/s
Iteration  13: 920553.534 ops/s
Iteration  14: 922407.581 ops/s
Iteration  15: 922043.051 ops/s
Iteration  16: 919871.632 ops/s
Iteration  17: 921155.534 ops/s
Iteration  18: 921890.730 ops/s
Iteration  19: 921416.362 ops/s
Iteration  20: 923538.165 ops/s
Iteration  21: 917297.749 ops/s
Iteration  22: 921264.294 ops/s
Iteration  23: 917575.532 ops/s
Iteration  24: 920552.415 ops/s
Iteration  25: 906603.636 ops/s
Iteration  26: 920963.426 ops/s
Iteration  27: 919744.092 ops/s
Iteration  28: 925663.269 ops/s
Iteration  29: 919800.094 ops/s
Iteration  30: 918878.655 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection":
  919954.195 ±(99.9%) 2425.487 ops/s [Average]
  (min, avg, max) = (906603.636, 919954.195, 925663.269), stdev = 3630.354
  CI (99.9%): [917528.709, 922379.682] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                          Mode  Cnt       Score      Error  Units
UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection  thrpt   30  919954.195 ± 2425.487  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 170733944.123 ops/s
# Warmup Iteration   2: 297987205.406 ops/s
# Warmup Iteration   3: 275434758.130 ops/s
# Warmup Iteration   4: 312435507.788 ops/s
# Warmup Iteration   5: 312948714.743 ops/s
# Warmup Iteration   6: 312870757.993 ops/s
# Warmup Iteration   7: 312844864.889 ops/s
# Warmup Iteration   8: 312156460.471 ops/s
# Warmup Iteration   9: 310157523.098 ops/s
# Warmup Iteration  10: 312535870.026 ops/s
# Warmup Iteration  11: 312184550.390 ops/s
# Warmup Iteration  12: 313204984.931 ops/s
# Warmup Iteration  13: 313254764.328 ops/s
# Warmup Iteration  14: 311609835.905 ops/s
# Warmup Iteration  15: 313672093.522 ops/s
# Warmup Iteration  16: 310272360.038 ops/s
# Warmup Iteration  17: 311702868.384 ops/s
# Warmup Iteration  18: 313142831.233 ops/s
# Warmup Iteration  19: 310924277.613 ops/s
# Warmup Iteration  20: 312308916.018 ops/s
# Warmup Iteration  21: 311491308.566 ops/s
# Warmup Iteration  22: 311456524.090 ops/s
# Warmup Iteration  23: 313018923.704 ops/s
# Warmup Iteration  24: 312260902.426 ops/s
# Warmup Iteration  25: 310992480.055 ops/s
# Warmup Iteration  26: 312175485.128 ops/s
# Warmup Iteration  27: 312074137.734 ops/s
# Warmup Iteration  28: 311700146.086 ops/s
# Warmup Iteration  29: 312053679.738 ops/s
# Warmup Iteration  30: 312338655.790 ops/s
Iteration   1: 311969167.598 ops/s
Iteration   2: 312883624.954 ops/s
Iteration   3: 312874569.755 ops/s
Iteration   4: 311334545.525 ops/s
Iteration   5: 312253699.080 ops/s
Iteration   6: 312104856.137 ops/s
Iteration   7: 312437021.586 ops/s
Iteration   8: 312594968.142 ops/s
Iteration   9: 313327041.402 ops/s
Iteration  10: 313358374.366 ops/s
Iteration  11: 311680977.253 ops/s
Iteration  12: 311812337.902 ops/s
Iteration  13: 311916659.247 ops/s
Iteration  14: 311582725.889 ops/s
Iteration  15: 313158405.624 ops/s
Iteration  16: 312401373.461 ops/s
Iteration  17: 311749892.170 ops/s
Iteration  18: 306669863.576 ops/s
Iteration  19: 312340255.786 ops/s
Iteration  20: 309498009.496 ops/s
Iteration  21: 311137877.134 ops/s
Iteration  22: 309922908.723 ops/s
Iteration  23: 310944993.234 ops/s
Iteration  24: 310667355.467 ops/s
Iteration  25: 312068445.632 ops/s
Iteration  26: 310630895.405 ops/s
Iteration  27: 309932506.121 ops/s
Iteration  28: 312595246.804 ops/s
Iteration  29: 311420536.310 ops/s
Iteration  30: 312419403.408 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove":
  311656284.573 ±(99.9%) 914284.860 ops/s [Average]
  (min, avg, max) = (306669863.576, 311656284.573, 313358374.366), stdev = 1368458.641
  CI (99.9%): [310741999.713, 312570569.433] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                         Mode  Cnt          Score        Error  Units
UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove  thrpt   30  311656284.573 ± 914284.860  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 659783.141 ops/s
# Warmup Iteration   2: 772425.778 ops/s
# Warmup Iteration   3: 967638.590 ops/s
# Warmup Iteration   4: 963723.779 ops/s
# Warmup Iteration   5: 967791.616 ops/s
# Warmup Iteration   6: 957110.713 ops/s
# Warmup Iteration   7: 967152.568 ops/s
# Warmup Iteration   8: 965150.037 ops/s
# Warmup Iteration   9: 867331.723 ops/s
# Warmup Iteration  10: 907432.004 ops/s
# Warmup Iteration  11: 968881.630 ops/s
# Warmup Iteration  12: 968269.686 ops/s
# Warmup Iteration  13: 967156.832 ops/s
# Warmup Iteration  14: 965638.864 ops/s
# Warmup Iteration  15: 968321.647 ops/s
# Warmup Iteration  16: 961381.095 ops/s
# Warmup Iteration  17: 1025583.065 ops/s
# Warmup Iteration  18: 1026250.176 ops/s
# Warmup Iteration  19: 1025656.078 ops/s
# Warmup Iteration  20: 1022877.499 ops/s
# Warmup Iteration  21: 1026650.818 ops/s
# Warmup Iteration  22: 1024610.675 ops/s
# Warmup Iteration  23: 1022825.050 ops/s
# Warmup Iteration  24: 1027994.044 ops/s
# Warmup Iteration  25: 1026343.286 ops/s
# Warmup Iteration  26: 1023276.502 ops/s
# Warmup Iteration  27: 1024135.796 ops/s
# Warmup Iteration  28: 1024187.271 ops/s
# Warmup Iteration  29: 1028558.687 ops/s
# Warmup Iteration  30: 1027103.411 ops/s
Iteration   1: 1023148.036 ops/s
Iteration   2: 1029262.713 ops/s
Iteration   3: 1029692.683 ops/s
Iteration   4: 1024730.977 ops/s
Iteration   5: 1029872.586 ops/s
Iteration   6: 1025365.965 ops/s
Iteration   7: 1022566.231 ops/s
Iteration   8: 1025208.296 ops/s
Iteration   9: 1027643.714 ops/s
Iteration  10: 1021197.237 ops/s
Iteration  11: 1026841.778 ops/s
Iteration  12: 1023589.904 ops/s
Iteration  13: 1024640.588 ops/s
Iteration  14: 1022160.820 ops/s
Iteration  15: 1027435.705 ops/s
Iteration  16: 1021743.845 ops/s
Iteration  17: 1023148.588 ops/s
Iteration  18: 1024130.650 ops/s
Iteration  19: 1024380.173 ops/s
Iteration  20: 1023263.224 ops/s
Iteration  21: 1026192.439 ops/s
Iteration  22: 1024428.461 ops/s
Iteration  23: 1026915.063 ops/s
Iteration  24: 1029088.313 ops/s
Iteration  25: 1021253.697 ops/s
Iteration  26: 1026078.333 ops/s
Iteration  27: 1028805.540 ops/s
Iteration  28: 1020062.933 ops/s
Iteration  29: 1026824.411 ops/s
Iteration  30: 1027327.964 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next":
  1025233.362 ±(99.9%) 1823.280 ops/s [Average]
  (min, avg, max) = (1020062.933, 1025233.362, 1029872.586), stdev = 2729.000
  CI (99.9%): [1023410.082, 1027056.642] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                         Mode  Cnt        Score      Error  Units
UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next  thrpt   30  1025233.362 ± 1823.280  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 590474.820 ops/s
# Warmup Iteration   2: 1262151.984 ops/s
# Warmup Iteration   3: 1263490.470 ops/s
# Warmup Iteration   4: 1054556.374 ops/s
# Warmup Iteration   5: 1255954.511 ops/s
# Warmup Iteration   6: 1264467.820 ops/s
# Warmup Iteration   7: 1265676.776 ops/s
# Warmup Iteration   8: 1263609.376 ops/s
# Warmup Iteration   9: 1259241.058 ops/s
# Warmup Iteration  10: 1258917.691 ops/s
# Warmup Iteration  11: 1255008.522 ops/s
# Warmup Iteration  12: 1259495.058 ops/s
# Warmup Iteration  13: 1259594.513 ops/s
# Warmup Iteration  14: 1240372.334 ops/s
# Warmup Iteration  15: 1264216.586 ops/s
# Warmup Iteration  16: 1267742.395 ops/s
# Warmup Iteration  17: 1267413.394 ops/s
# Warmup Iteration  18: 1266215.990 ops/s
# Warmup Iteration  19: 1241825.202 ops/s
# Warmup Iteration  20: 1266886.292 ops/s
# Warmup Iteration  21: 1263755.176 ops/s
# Warmup Iteration  22: 1261490.679 ops/s
# Warmup Iteration  23: 1260410.311 ops/s
# Warmup Iteration  24: 1264090.746 ops/s
# Warmup Iteration  25: 1263988.638 ops/s
# Warmup Iteration  26: 1263051.702 ops/s
# Warmup Iteration  27: 1264105.131 ops/s
# Warmup Iteration  28: 1269715.579 ops/s
# Warmup Iteration  29: 1267499.311 ops/s
# Warmup Iteration  30: 1261023.762 ops/s
Iteration   1: 1270072.991 ops/s
Iteration   2: 1270512.415 ops/s
Iteration   3: 1252583.862 ops/s
Iteration   4: 1257800.514 ops/s
Iteration   5: 1264895.169 ops/s
Iteration   6: 1270955.843 ops/s
Iteration   7: 1278620.942 ops/s
Iteration   8: 1267671.412 ops/s
Iteration   9: 1259431.588 ops/s
Iteration  10: 1260739.047 ops/s
Iteration  11: 1265152.276 ops/s
Iteration  12: 1266865.097 ops/s
Iteration  13: 1263456.697 ops/s
Iteration  14: 1265945.135 ops/s
Iteration  15: 1257527.412 ops/s
Iteration  16: 1266756.835 ops/s
Iteration  17: 1265771.725 ops/s
Iteration  18: 1256290.861 ops/s
Iteration  19: 1252030.639 ops/s
Iteration  20: 1262624.055 ops/s
Iteration  21: 1258548.949 ops/s
Iteration  22: 1255328.510 ops/s
Iteration  23: 1260790.330 ops/s
Iteration  24: 1260201.747 ops/s
Iteration  25: 1263842.673 ops/s
Iteration  26: 1266854.550 ops/s
Iteration  27: 1253938.600 ops/s
Iteration  28: 1267954.775 ops/s
Iteration  29: 1263801.583 ops/s
Iteration  30: 1266338.730 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_makeString":
  1263110.165 ±(99.9%) 4045.506 ops/s [Average]
  (min, avg, max) = (1252030.639, 1263110.165, 1278620.942), stdev = 6055.123
  CI (99.9%): [1259064.659, 1267155.671] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_makeString  thrpt   30  1263110.165 ± 4045.506  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_newCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_newCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 171618172.705 ops/s
# Warmup Iteration   2: 297645326.461 ops/s
# Warmup Iteration   3: 277031493.270 ops/s
# Warmup Iteration   4: 314758513.354 ops/s
# Warmup Iteration   5: 315619665.980 ops/s
# Warmup Iteration   6: 314973693.895 ops/s
# Warmup Iteration   7: 315986693.589 ops/s
# Warmup Iteration   8: 314882935.149 ops/s
# Warmup Iteration   9: 313934984.665 ops/s
# Warmup Iteration  10: 313686823.760 ops/s
# Warmup Iteration  11: 314273157.118 ops/s
# Warmup Iteration  12: 314068940.862 ops/s
# Warmup Iteration  13: 314394526.312 ops/s
# Warmup Iteration  14: 314423601.149 ops/s
# Warmup Iteration  15: 311628052.995 ops/s
# Warmup Iteration  16: 314779897.159 ops/s
# Warmup Iteration  17: 314333140.779 ops/s
# Warmup Iteration  18: 314427984.344 ops/s
# Warmup Iteration  19: 315159848.221 ops/s
# Warmup Iteration  20: 314359411.139 ops/s
# Warmup Iteration  21: 312349827.190 ops/s
# Warmup Iteration  22: 315209976.189 ops/s
# Warmup Iteration  23: 313636440.586 ops/s
# Warmup Iteration  24: 315411166.050 ops/s
# Warmup Iteration  25: 314750711.809 ops/s
# Warmup Iteration  26: 312645993.768 ops/s
# Warmup Iteration  27: 314548739.738 ops/s
# Warmup Iteration  28: 313606580.317 ops/s
# Warmup Iteration  29: 314739864.040 ops/s
# Warmup Iteration  30: 314969951.668 ops/s
Iteration   1: 315220585.084 ops/s
Iteration   2: 314108849.356 ops/s
Iteration   3: 314608101.609 ops/s
Iteration   4: 315158593.291 ops/s
Iteration   5: 315371523.003 ops/s
Iteration   6: 314149512.598 ops/s
Iteration   7: 313534575.613 ops/s
Iteration   8: 314497743.299 ops/s
Iteration   9: 315769972.857 ops/s
Iteration  10: 315471301.657 ops/s
Iteration  11: 315810991.068 ops/s
Iteration  12: 315411295.264 ops/s
Iteration  13: 313730308.107 ops/s
Iteration  14: 309706952.783 ops/s
Iteration  15: 314935239.400 ops/s
Iteration  16: 314952164.981 ops/s
Iteration  17: 313987193.342 ops/s
Iteration  18: 313720849.078 ops/s
Iteration  19: 313781332.979 ops/s
Iteration  20: 314062351.457 ops/s
Iteration  21: 314800108.119 ops/s
Iteration  22: 314835145.247 ops/s
Iteration  23: 314441898.117 ops/s
Iteration  24: 312306893.938 ops/s
Iteration  25: 313686724.825 ops/s
Iteration  26: 314558415.653 ops/s
Iteration  27: 315011598.119 ops/s
Iteration  28: 315407089.374 ops/s
Iteration  29: 310368904.169 ops/s
Iteration  30: 314676539.993 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_newCollection":
  314269425.146 ±(99.9%) 927112.106 ops/s [Average]
  (min, avg, max) = (309706952.783, 314269425.146, 315810991.068), stdev = 1387657.860
  CI (99.9%): [313342313.040, 315196537.252] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt          Score        Error  Units
UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_newCollection  thrpt   30  314269425.146 ± 927112.106  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_newCollectionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_newCollectionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2012276.059 ops/s
# Warmup Iteration   2: 3935868.141 ops/s
# Warmup Iteration   3: 4018741.503 ops/s
# Warmup Iteration   4: 4335828.512 ops/s
# Warmup Iteration   5: 4340975.250 ops/s
# Warmup Iteration   6: 4337019.314 ops/s
# Warmup Iteration   7: 4336597.829 ops/s
# Warmup Iteration   8: 4351880.284 ops/s
# Warmup Iteration   9: 4298429.393 ops/s
# Warmup Iteration  10: 4324322.488 ops/s
# Warmup Iteration  11: 4339546.960 ops/s
# Warmup Iteration  12: 4316721.622 ops/s
# Warmup Iteration  13: 4342894.385 ops/s
# Warmup Iteration  14: 4324925.981 ops/s
# Warmup Iteration  15: 4337888.013 ops/s
# Warmup Iteration  16: 4350427.165 ops/s
# Warmup Iteration  17: 4354999.871 ops/s
# Warmup Iteration  18: 4353732.820 ops/s
# Warmup Iteration  19: 4330629.481 ops/s
# Warmup Iteration  20: 4335736.361 ops/s
# Warmup Iteration  21: 4337660.330 ops/s
# Warmup Iteration  22: 4343765.889 ops/s
# Warmup Iteration  23: 4345291.943 ops/s
# Warmup Iteration  24: 4332353.851 ops/s
# Warmup Iteration  25: 4344993.124 ops/s
# Warmup Iteration  26: 4342383.656 ops/s
# Warmup Iteration  27: 4335048.800 ops/s
# Warmup Iteration  28: 4351556.882 ops/s
# Warmup Iteration  29: 4323527.896 ops/s
# Warmup Iteration  30: 4331133.504 ops/s
Iteration   1: 4357377.591 ops/s
Iteration   2: 4333539.569 ops/s
Iteration   3: 4305539.024 ops/s
Iteration   4: 4318196.066 ops/s
Iteration   5: 4349753.484 ops/s
Iteration   6: 4367645.931 ops/s
Iteration   7: 4370871.583 ops/s
Iteration   8: 4361830.862 ops/s
Iteration   9: 4344522.683 ops/s
Iteration  10: 4339058.184 ops/s
Iteration  11: 4344583.093 ops/s
Iteration  12: 4347521.386 ops/s
Iteration  13: 4345538.840 ops/s
Iteration  14: 4340494.161 ops/s
Iteration  15: 4335834.507 ops/s
Iteration  16: 4339850.179 ops/s
Iteration  17: 4346153.978 ops/s
Iteration  18: 4322366.379 ops/s
Iteration  19: 4348485.373 ops/s
Iteration  20: 4343365.756 ops/s
Iteration  21: 4337931.784 ops/s
Iteration  22: 4331970.526 ops/s
Iteration  23: 4322187.599 ops/s
Iteration  24: 4365847.746 ops/s
Iteration  25: 4363792.752 ops/s
Iteration  26: 4331817.112 ops/s
Iteration  27: 4344382.234 ops/s
Iteration  28: 4342904.130 ops/s
Iteration  29: 4342888.610 ops/s
Iteration  30: 4332969.849 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_newCollectionWith":
  4342640.699 ±(99.9%) 9955.057 ops/s [Average]
  (min, avg, max) = (4305539.024, 4342640.699, 4370871.583), stdev = 14900.262
  CI (99.9%): [4332685.642, 4352595.756] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score      Error  Units
UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_newCollectionWith  thrpt   30  4342640.699 ± 9955.057  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1005416.139 ops/s
# Warmup Iteration   2: 2245263.439 ops/s
# Warmup Iteration   3: 1862865.673 ops/s
# Warmup Iteration   4: 2239421.724 ops/s
# Warmup Iteration   5: 2245399.593 ops/s
# Warmup Iteration   6: 2235060.589 ops/s
# Warmup Iteration   7: 2228904.049 ops/s
# Warmup Iteration   8: 2242013.818 ops/s
# Warmup Iteration   9: 2233200.749 ops/s
# Warmup Iteration  10: 2239329.561 ops/s
# Warmup Iteration  11: 2224866.726 ops/s
# Warmup Iteration  12: 2238178.433 ops/s
# Warmup Iteration  13: 2239453.987 ops/s
# Warmup Iteration  14: 2238186.598 ops/s
# Warmup Iteration  15: 2241871.454 ops/s
# Warmup Iteration  16: 2242275.291 ops/s
# Warmup Iteration  17: 2235546.008 ops/s
# Warmup Iteration  18: 2218707.651 ops/s
# Warmup Iteration  19: 2241514.091 ops/s
# Warmup Iteration  20: 2231523.500 ops/s
# Warmup Iteration  21: 2245671.913 ops/s
# Warmup Iteration  22: 2224292.548 ops/s
# Warmup Iteration  23: 2238777.780 ops/s
# Warmup Iteration  24: 2245693.040 ops/s
# Warmup Iteration  25: 2241943.910 ops/s
# Warmup Iteration  26: 2232913.369 ops/s
# Warmup Iteration  27: 2231300.340 ops/s
# Warmup Iteration  28: 2220080.534 ops/s
# Warmup Iteration  29: 2242059.761 ops/s
# Warmup Iteration  30: 2226835.683 ops/s
Iteration   1: 2238886.699 ops/s
Iteration   2: 2236885.177 ops/s
Iteration   3: 2238519.545 ops/s
Iteration   4: 2237660.427 ops/s
Iteration   5: 2240551.610 ops/s
Iteration   6: 2241675.001 ops/s
Iteration   7: 2243610.346 ops/s
Iteration   8: 2244552.823 ops/s
Iteration   9: 2236993.968 ops/s
Iteration  10: 2242374.401 ops/s
Iteration  11: 2237805.031 ops/s
Iteration  12: 2241649.470 ops/s
Iteration  13: 2238536.410 ops/s
Iteration  14: 2245367.870 ops/s
Iteration  15: 2240333.802 ops/s
Iteration  16: 2243345.932 ops/s
Iteration  17: 2233798.627 ops/s
Iteration  18: 2249337.131 ops/s
Iteration  19: 2239477.403 ops/s
Iteration  20: 2242725.185 ops/s
Iteration  21: 2242484.191 ops/s
Iteration  22: 2245279.879 ops/s
Iteration  23: 2243769.046 ops/s
Iteration  24: 2240424.097 ops/s
Iteration  25: 2168726.769 ops/s
Iteration  26: 2243195.182 ops/s
Iteration  27: 2240906.091 ops/s
Iteration  28: 2250932.595 ops/s
Iteration  29: 2242324.702 ops/s
Iteration  30: 2236683.847 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_noneSatisfy":
  2238960.442 ±(99.9%) 9197.705 ops/s [Average]
  (min, avg, max) = (2168726.769, 2238960.442, 2250932.595), stdev = 13766.694
  CI (99.9%): [2229762.736, 2248158.147] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score      Error  Units
UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_noneSatisfy  thrpt   30  2238960.442 ± 9197.705  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_notEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_notEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3296794.574 ops/s
# Warmup Iteration   2: 5488934.575 ops/s
# Warmup Iteration   3: 6509687.689 ops/s
# Warmup Iteration   4: 6540379.591 ops/s
# Warmup Iteration   5: 6474135.433 ops/s
# Warmup Iteration   6: 6514585.750 ops/s
# Warmup Iteration   7: 6495986.712 ops/s
# Warmup Iteration   8: 6515112.539 ops/s
# Warmup Iteration   9: 6489023.900 ops/s
# Warmup Iteration  10: 6530589.774 ops/s
# Warmup Iteration  11: 6504425.164 ops/s
# Warmup Iteration  12: 6503608.398 ops/s
# Warmup Iteration  13: 6516465.328 ops/s
# Warmup Iteration  14: 6502289.662 ops/s
# Warmup Iteration  15: 6548721.473 ops/s
# Warmup Iteration  16: 6517186.296 ops/s
# Warmup Iteration  17: 6498938.894 ops/s
# Warmup Iteration  18: 6511320.992 ops/s
# Warmup Iteration  19: 6513244.436 ops/s
# Warmup Iteration  20: 6461594.253 ops/s
# Warmup Iteration  21: 6527340.434 ops/s
# Warmup Iteration  22: 6471493.768 ops/s
# Warmup Iteration  23: 6520966.429 ops/s
# Warmup Iteration  24: 6496862.436 ops/s
# Warmup Iteration  25: 6498726.716 ops/s
# Warmup Iteration  26: 6499151.128 ops/s
# Warmup Iteration  27: 6514928.328 ops/s
# Warmup Iteration  28: 6518154.578 ops/s
# Warmup Iteration  29: 6525147.254 ops/s
# Warmup Iteration  30: 6534864.612 ops/s
Iteration   1: 6519457.508 ops/s
Iteration   2: 6395357.174 ops/s
Iteration   3: 6509383.871 ops/s
Iteration   4: 6538664.800 ops/s
Iteration   5: 6547609.085 ops/s
Iteration   6: 6531757.459 ops/s
Iteration   7: 6481274.897 ops/s
Iteration   8: 6504376.924 ops/s
Iteration   9: 6513785.109 ops/s
Iteration  10: 6495068.119 ops/s
Iteration  11: 6528137.936 ops/s
Iteration  12: 6496523.428 ops/s
Iteration  13: 6495575.759 ops/s
Iteration  14: 6506629.366 ops/s
Iteration  15: 6544122.868 ops/s
Iteration  16: 6518320.002 ops/s
Iteration  17: 6512768.470 ops/s
Iteration  18: 6483226.184 ops/s
Iteration  19: 6465344.315 ops/s
Iteration  20: 6489819.264 ops/s
Iteration  21: 6544296.922 ops/s
Iteration  22: 6416209.949 ops/s
Iteration  23: 6524032.988 ops/s
Iteration  24: 6523479.263 ops/s
Iteration  25: 6513659.263 ops/s
Iteration  26: 6505489.657 ops/s
Iteration  27: 6534768.614 ops/s
Iteration  28: 6516580.790 ops/s
Iteration  29: 6505692.423 ops/s
Iteration  30: 6548587.947 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_notEmpty":
  6507000.012 ±(99.9%) 23012.529 ops/s [Average]
  (min, avg, max) = (6395357.174, 6507000.012, 6548587.947), stdev = 34444.072
  CI (99.9%): [6483987.483, 6530012.541] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_notEmpty  thrpt   30  6507000.012 ± 23012.529  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_reduce$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_reduce

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1207200.138 ops/s
# Warmup Iteration   2: 2687532.435 ops/s
# Warmup Iteration   3: 2232329.447 ops/s
# Warmup Iteration   4: 2699008.599 ops/s
# Warmup Iteration   5: 2703562.555 ops/s
# Warmup Iteration   6: 2705717.243 ops/s
# Warmup Iteration   7: 2698445.005 ops/s
# Warmup Iteration   8: 2695799.786 ops/s
# Warmup Iteration   9: 2697393.305 ops/s
# Warmup Iteration  10: 2695722.265 ops/s
# Warmup Iteration  11: 2700153.824 ops/s
# Warmup Iteration  12: 2686414.121 ops/s
# Warmup Iteration  13: 2704096.207 ops/s
# Warmup Iteration  14: 2698486.393 ops/s
# Warmup Iteration  15: 2706629.238 ops/s
# Warmup Iteration  16: 2706590.507 ops/s
# Warmup Iteration  17: 2703759.192 ops/s
# Warmup Iteration  18: 2691170.010 ops/s
# Warmup Iteration  19: 2704098.476 ops/s
# Warmup Iteration  20: 2695153.031 ops/s
# Warmup Iteration  21: 2700387.943 ops/s
# Warmup Iteration  22: 2700311.615 ops/s
# Warmup Iteration  23: 2694539.756 ops/s
# Warmup Iteration  24: 2701460.170 ops/s
# Warmup Iteration  25: 2700512.180 ops/s
# Warmup Iteration  26: 2706688.002 ops/s
# Warmup Iteration  27: 2702464.616 ops/s
# Warmup Iteration  28: 2696015.488 ops/s
# Warmup Iteration  29: 2694070.914 ops/s
# Warmup Iteration  30: 2704292.575 ops/s
Iteration   1: 2698364.228 ops/s
Iteration   2: 2702227.197 ops/s
Iteration   3: 2694097.257 ops/s
Iteration   4: 2690806.862 ops/s
Iteration   5: 2699468.967 ops/s
Iteration   6: 2693405.416 ops/s
Iteration   7: 2705313.840 ops/s
Iteration   8: 2679431.809 ops/s
Iteration   9: 2704640.857 ops/s
Iteration  10: 2701948.186 ops/s
Iteration  11: 2697073.964 ops/s
Iteration  12: 2708791.392 ops/s
Iteration  13: 2692974.125 ops/s
Iteration  14: 2699782.658 ops/s
Iteration  15: 2699362.908 ops/s
Iteration  16: 2700303.415 ops/s
Iteration  17: 2697378.196 ops/s
Iteration  18: 2705638.052 ops/s
Iteration  19: 2657557.516 ops/s
Iteration  20: 2703755.266 ops/s
Iteration  21: 2695264.706 ops/s
Iteration  22: 2698515.342 ops/s
Iteration  23: 2698985.058 ops/s
Iteration  24: 2701818.642 ops/s
Iteration  25: 2740794.737 ops/s
Iteration  26: 2701274.309 ops/s
Iteration  27: 2700733.357 ops/s
Iteration  28: 2694597.885 ops/s
Iteration  29: 2695216.686 ops/s
Iteration  30: 2697282.129 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_reduce":
  2698560.165 ±(99.9%) 8163.716 ops/s [Average]
  (min, avg, max) = (2657557.516, 2698560.165, 2740794.737), stdev = 12219.067
  CI (99.9%): [2690396.449, 2706723.882] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_reduce  thrpt   30  2698560.165 ± 8163.716  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_reduceIfEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_reduceIfEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 727615.866 ops/s
# Warmup Iteration   2: 1560149.638 ops/s
# Warmup Iteration   3: 1569454.032 ops/s
# Warmup Iteration   4: 1288401.717 ops/s
# Warmup Iteration   5: 1570911.213 ops/s
# Warmup Iteration   6: 1567003.598 ops/s
# Warmup Iteration   7: 1555719.007 ops/s
# Warmup Iteration   8: 1564889.852 ops/s
# Warmup Iteration   9: 1562184.583 ops/s
# Warmup Iteration  10: 1571727.739 ops/s
# Warmup Iteration  11: 1567480.033 ops/s
# Warmup Iteration  12: 1569792.290 ops/s
# Warmup Iteration  13: 1568639.411 ops/s
# Warmup Iteration  14: 1565913.676 ops/s
# Warmup Iteration  15: 1557038.581 ops/s
# Warmup Iteration  16: 1567462.841 ops/s
# Warmup Iteration  17: 1561390.164 ops/s
# Warmup Iteration  18: 1568251.444 ops/s
# Warmup Iteration  19: 1570458.566 ops/s
# Warmup Iteration  20: 1567803.424 ops/s
# Warmup Iteration  21: 1567077.292 ops/s
# Warmup Iteration  22: 1568590.599 ops/s
# Warmup Iteration  23: 1567424.010 ops/s
# Warmup Iteration  24: 1563997.014 ops/s
# Warmup Iteration  25: 1569454.133 ops/s
# Warmup Iteration  26: 1564363.148 ops/s
# Warmup Iteration  27: 1568627.758 ops/s
# Warmup Iteration  28: 1561293.855 ops/s
# Warmup Iteration  29: 1568780.056 ops/s
# Warmup Iteration  30: 1552399.295 ops/s
Iteration   1: 1564577.910 ops/s
Iteration   2: 1567870.702 ops/s
Iteration   3: 1569412.951 ops/s
Iteration   4: 1567041.835 ops/s
Iteration   5: 1569387.714 ops/s
Iteration   6: 1566182.069 ops/s
Iteration   7: 1570011.886 ops/s
Iteration   8: 1562966.236 ops/s
Iteration   9: 1568133.240 ops/s
Iteration  10: 1563683.036 ops/s
Iteration  11: 1572164.985 ops/s
Iteration  12: 1562872.689 ops/s
Iteration  13: 1570474.846 ops/s
Iteration  14: 1566183.548 ops/s
Iteration  15: 1566711.598 ops/s
Iteration  16: 1566122.498 ops/s
Iteration  17: 1569874.793 ops/s
Iteration  18: 1564739.954 ops/s
Iteration  19: 1569017.897 ops/s
Iteration  20: 1568906.534 ops/s
Iteration  21: 1564856.977 ops/s
Iteration  22: 1563886.076 ops/s
Iteration  23: 1566420.889 ops/s
Iteration  24: 1567791.177 ops/s
Iteration  25: 1567816.513 ops/s
Iteration  26: 1566808.227 ops/s
Iteration  27: 1567632.829 ops/s
Iteration  28: 1571649.468 ops/s
Iteration  29: 1539470.943 ops/s
Iteration  30: 1564858.262 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_reduceIfEmpty":
  1566250.943 ±(99.9%) 3759.835 ops/s [Average]
  (min, avg, max) = (1539470.943, 1566250.943, 1572164.985), stdev = 5627.545
  CI (99.9%): [1562491.108, 1570010.778] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score      Error  Units
UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_reduceIfEmpty  thrpt   30  1566250.943 ± 3759.835  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 646738.635 ops/s
# Warmup Iteration   2: 670120.803 ops/s
# Warmup Iteration   3: 879679.697 ops/s
# Warmup Iteration   4: 865455.160 ops/s
# Warmup Iteration   5: 876327.911 ops/s
# Warmup Iteration   6: 879285.283 ops/s
# Warmup Iteration   7: 869396.549 ops/s
# Warmup Iteration   8: 877798.236 ops/s
# Warmup Iteration   9: 879062.139 ops/s
# Warmup Iteration  10: 879029.702 ops/s
# Warmup Iteration  11: 804120.319 ops/s
# Warmup Iteration  12: 811755.628 ops/s
# Warmup Iteration  13: 872697.608 ops/s
# Warmup Iteration  14: 877709.011 ops/s
# Warmup Iteration  15: 876964.953 ops/s
# Warmup Iteration  16: 879078.831 ops/s
# Warmup Iteration  17: 924153.609 ops/s
# Warmup Iteration  18: 919146.550 ops/s
# Warmup Iteration  19: 922529.915 ops/s
# Warmup Iteration  20: 917502.697 ops/s
# Warmup Iteration  21: 920610.481 ops/s
# Warmup Iteration  22: 921465.694 ops/s
# Warmup Iteration  23: 921117.386 ops/s
# Warmup Iteration  24: 920213.593 ops/s
# Warmup Iteration  25: 914000.112 ops/s
# Warmup Iteration  26: 922681.479 ops/s
# Warmup Iteration  27: 921454.245 ops/s
# Warmup Iteration  28: 919652.917 ops/s
# Warmup Iteration  29: 919064.384 ops/s
# Warmup Iteration  30: 919329.954 ops/s
Iteration   1: 918472.156 ops/s
Iteration   2: 921760.488 ops/s
Iteration   3: 923169.755 ops/s
Iteration   4: 922310.983 ops/s
Iteration   5: 921746.973 ops/s
Iteration   6: 923488.872 ops/s
Iteration   7: 922673.538 ops/s
Iteration   8: 907707.021 ops/s
Iteration   9: 922009.589 ops/s
Iteration  10: 921585.476 ops/s
Iteration  11: 920243.782 ops/s
Iteration  12: 920673.816 ops/s
Iteration  13: 919985.722 ops/s
Iteration  14: 919272.567 ops/s
Iteration  15: 924441.877 ops/s
Iteration  16: 922283.667 ops/s
Iteration  17: 923470.902 ops/s
Iteration  18: 922422.315 ops/s
Iteration  19: 919388.296 ops/s
Iteration  20: 919416.428 ops/s
Iteration  21: 923814.719 ops/s
Iteration  22: 919702.863 ops/s
Iteration  23: 916157.127 ops/s
Iteration  24: 922538.067 ops/s
Iteration  25: 924945.697 ops/s
Iteration  26: 919900.710 ops/s
Iteration  27: 920210.402 ops/s
Iteration  28: 919284.176 ops/s
Iteration  29: 918271.795 ops/s
Iteration  30: 921826.592 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows":
  920772.546 ±(99.9%) 2130.083 ops/s [Average]
  (min, avg, max) = (907707.021, 920772.546, 924945.697), stdev = 3188.208
  CI (99.9%): [918642.463, 922902.629] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score      Error  Units
UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows  thrpt   30  920772.546 ± 2130.083  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4485724.761 ops/s
# Warmup Iteration   2: 9297556.905 ops/s
# Warmup Iteration   3: 7723274.326 ops/s
# Warmup Iteration   4: 9240197.995 ops/s
# Warmup Iteration   5: 9243079.035 ops/s
# Warmup Iteration   6: 9237746.959 ops/s
# Warmup Iteration   7: 9244554.182 ops/s
# Warmup Iteration   8: 9213165.179 ops/s
# Warmup Iteration   9: 9236507.494 ops/s
# Warmup Iteration  10: 9249292.389 ops/s
# Warmup Iteration  11: 9219733.907 ops/s
# Warmup Iteration  12: 9246318.018 ops/s
# Warmup Iteration  13: 9235671.674 ops/s
# Warmup Iteration  14: 9242875.333 ops/s
# Warmup Iteration  15: 9256600.967 ops/s
# Warmup Iteration  16: 9227478.322 ops/s
# Warmup Iteration  17: 9257609.881 ops/s
# Warmup Iteration  18: 9247191.004 ops/s
# Warmup Iteration  19: 9256252.685 ops/s
# Warmup Iteration  20: 9229717.634 ops/s
# Warmup Iteration  21: 9255992.271 ops/s
# Warmup Iteration  22: 9248037.161 ops/s
# Warmup Iteration  23: 9242722.801 ops/s
# Warmup Iteration  24: 9249195.180 ops/s
# Warmup Iteration  25: 9231324.555 ops/s
# Warmup Iteration  26: 9263753.913 ops/s
# Warmup Iteration  27: 9257189.732 ops/s
# Warmup Iteration  28: 9260488.292 ops/s
# Warmup Iteration  29: 9188890.831 ops/s
# Warmup Iteration  30: 9244494.813 ops/s
Iteration   1: 9243930.240 ops/s
Iteration   2: 9250686.601 ops/s
Iteration   3: 9236310.180 ops/s
Iteration   4: 9274480.140 ops/s
Iteration   5: 9193080.648 ops/s
Iteration   6: 9273199.473 ops/s
Iteration   7: 9087614.545 ops/s
Iteration   8: 9255627.280 ops/s
Iteration   9: 9231636.915 ops/s
Iteration  10: 9234804.837 ops/s
Iteration  11: 9187288.583 ops/s
Iteration  12: 9277813.931 ops/s
Iteration  13: 9225284.002 ops/s
Iteration  14: 9239768.247 ops/s
Iteration  15: 9226472.968 ops/s
Iteration  16: 9249805.467 ops/s
Iteration  17: 9264643.299 ops/s
Iteration  18: 9258004.878 ops/s
Iteration  19: 9246148.388 ops/s
Iteration  20: 9253772.447 ops/s
Iteration  21: 9229221.964 ops/s
Iteration  22: 9264235.041 ops/s
Iteration  23: 9257133.801 ops/s
Iteration  24: 9284316.799 ops/s
Iteration  25: 9250731.922 ops/s
Iteration  26: 9231415.110 ops/s
Iteration  27: 9234234.969 ops/s
Iteration  28: 9258465.002 ops/s
Iteration  29: 9276886.927 ops/s
Iteration  30: 9259497.074 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_reject":
  9241883.723 ±(99.9%) 24569.899 ops/s [Average]
  (min, avg, max) = (9087614.545, 9241883.723, 9284316.799), stdev = 36775.071
  CI (99.9%): [9217313.824, 9266453.622] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_reject  thrpt   30  9241883.723 ± 24569.899  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4370410.740 ops/s
# Warmup Iteration   2: 8159120.666 ops/s
# Warmup Iteration   3: 8535250.148 ops/s
# Warmup Iteration   4: 8541173.490 ops/s
# Warmup Iteration   5: 7153263.975 ops/s
# Warmup Iteration   6: 8536418.591 ops/s
# Warmup Iteration   7: 8541633.173 ops/s
# Warmup Iteration   8: 8473598.949 ops/s
# Warmup Iteration   9: 8536377.751 ops/s
# Warmup Iteration  10: 8562166.371 ops/s
# Warmup Iteration  11: 8548077.784 ops/s
# Warmup Iteration  12: 8533618.705 ops/s
# Warmup Iteration  13: 8535881.468 ops/s
# Warmup Iteration  14: 8551922.336 ops/s
# Warmup Iteration  15: 8540279.549 ops/s
# Warmup Iteration  16: 8545006.865 ops/s
# Warmup Iteration  17: 8547319.106 ops/s
# Warmup Iteration  18: 8552414.798 ops/s
# Warmup Iteration  19: 8528394.003 ops/s
# Warmup Iteration  20: 8545423.023 ops/s
# Warmup Iteration  21: 8540508.580 ops/s
# Warmup Iteration  22: 8527795.903 ops/s
# Warmup Iteration  23: 8543903.888 ops/s
# Warmup Iteration  24: 8543781.282 ops/s
# Warmup Iteration  25: 8531312.286 ops/s
# Warmup Iteration  26: 8544131.717 ops/s
# Warmup Iteration  27: 8547796.519 ops/s
# Warmup Iteration  28: 8540848.756 ops/s
# Warmup Iteration  29: 8556790.237 ops/s
# Warmup Iteration  30: 8543821.311 ops/s
Iteration   1: 8529120.080 ops/s
Iteration   2: 8523280.425 ops/s
Iteration   3: 8432144.309 ops/s
Iteration   4: 8535192.013 ops/s
Iteration   5: 8535004.061 ops/s
Iteration   6: 8555979.467 ops/s
Iteration   7: 8549292.419 ops/s
Iteration   8: 8503370.720 ops/s
Iteration   9: 8550064.006 ops/s
Iteration  10: 8530357.618 ops/s
Iteration  11: 8554963.541 ops/s
Iteration  12: 8552088.648 ops/s
Iteration  13: 8547885.581 ops/s
Iteration  14: 8409181.444 ops/s
Iteration  15: 8565470.792 ops/s
Iteration  16: 8532945.513 ops/s
Iteration  17: 8554496.609 ops/s
Iteration  18: 8537390.721 ops/s
Iteration  19: 8528166.555 ops/s
Iteration  20: 8560569.407 ops/s
Iteration  21: 8544837.790 ops/s
Iteration  22: 8548231.860 ops/s
Iteration  23: 8520972.548 ops/s
Iteration  24: 8558378.186 ops/s
Iteration  25: 8532065.583 ops/s
Iteration  26: 8536967.405 ops/s
Iteration  27: 8558143.185 ops/s
Iteration  28: 8549604.145 ops/s
Iteration  29: 8537936.215 ops/s
Iteration  30: 8552307.639 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_remove":
  8534213.616 ±(99.9%) 22679.437 ops/s [Average]
  (min, avg, max) = (8409181.444, 8534213.616, 8565470.792), stdev = 33945.516
  CI (99.9%): [8511534.179, 8556893.053] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_remove  thrpt   30  8534213.616 ± 22679.437  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 686356.237 ops/s
# Warmup Iteration   2: 806118.084 ops/s
# Warmup Iteration   3: 990135.275 ops/s
# Warmup Iteration   4: 983733.807 ops/s
# Warmup Iteration   5: 971293.496 ops/s
# Warmup Iteration   6: 973213.134 ops/s
# Warmup Iteration   7: 980039.156 ops/s
# Warmup Iteration   8: 982670.710 ops/s
# Warmup Iteration   9: 829740.271 ops/s
# Warmup Iteration  10: 980141.899 ops/s
# Warmup Iteration  11: 982066.809 ops/s
# Warmup Iteration  12: 984672.268 ops/s
# Warmup Iteration  13: 984312.459 ops/s
# Warmup Iteration  14: 984832.392 ops/s
# Warmup Iteration  15: 980320.229 ops/s
# Warmup Iteration  16: 981971.570 ops/s
# Warmup Iteration  17: 1043638.163 ops/s
# Warmup Iteration  18: 1030387.209 ops/s
# Warmup Iteration  19: 1040237.994 ops/s
# Warmup Iteration  20: 1032381.080 ops/s
# Warmup Iteration  21: 1043790.681 ops/s
# Warmup Iteration  22: 1046461.451 ops/s
# Warmup Iteration  23: 1043217.745 ops/s
# Warmup Iteration  24: 1045663.681 ops/s
# Warmup Iteration  25: 1046087.674 ops/s
# Warmup Iteration  26: 1038083.920 ops/s
# Warmup Iteration  27: 1045335.492 ops/s
# Warmup Iteration  28: 1045343.622 ops/s
# Warmup Iteration  29: 1045322.980 ops/s
# Warmup Iteration  30: 1040839.253 ops/s
Iteration   1: 1041860.454 ops/s
Iteration   2: 1042646.742 ops/s
Iteration   3: 1045141.145 ops/s
Iteration   4: 1047206.612 ops/s
Iteration   5: 1042455.626 ops/s
Iteration   6: 1043233.896 ops/s
Iteration   7: 1043145.264 ops/s
Iteration   8: 1043873.494 ops/s
Iteration   9: 1045267.800 ops/s
Iteration  10: 1044965.598 ops/s
Iteration  11: 1039922.035 ops/s
Iteration  12: 1045001.331 ops/s
Iteration  13: 1045205.381 ops/s
Iteration  14: 1040100.214 ops/s
Iteration  15: 1043971.019 ops/s
Iteration  16: 1044356.136 ops/s
Iteration  17: 1044886.419 ops/s
Iteration  18: 1041341.436 ops/s
Iteration  19: 1030017.584 ops/s
Iteration  20: 1044004.495 ops/s
Iteration  21: 1043024.010 ops/s
Iteration  22: 1041547.214 ops/s
Iteration  23: 1040936.874 ops/s
Iteration  24: 1046873.477 ops/s
Iteration  25: 1044108.464 ops/s
Iteration  26: 1043110.289 ops/s
Iteration  27: 1042447.733 ops/s
Iteration  28: 1042021.153 ops/s
Iteration  29: 1043818.638 ops/s
Iteration  30: 1039326.715 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_removeAll":
  1042860.575 ±(99.9%) 2063.726 ops/s [Average]
  (min, avg, max) = (1030017.584, 1042860.575, 1047206.612), stdev = 3088.889
  CI (99.9%): [1040796.849, 1044924.301] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_removeAll  thrpt   30  1042860.575 ± 2063.726  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_removeAll_iterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_removeAll_iterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 664233.202 ops/s
# Warmup Iteration   2: 805628.304 ops/s
# Warmup Iteration   3: 981997.129 ops/s
# Warmup Iteration   4: 974417.792 ops/s
# Warmup Iteration   5: 984062.126 ops/s
# Warmup Iteration   6: 983024.837 ops/s
# Warmup Iteration   7: 970990.989 ops/s
# Warmup Iteration   8: 982759.751 ops/s
# Warmup Iteration   9: 830348.561 ops/s
# Warmup Iteration  10: 980889.262 ops/s
# Warmup Iteration  11: 979091.605 ops/s
# Warmup Iteration  12: 981269.028 ops/s
# Warmup Iteration  13: 980393.959 ops/s
# Warmup Iteration  14: 979415.757 ops/s
# Warmup Iteration  15: 978516.812 ops/s
# Warmup Iteration  16: 978974.296 ops/s
# Warmup Iteration  17: 1041549.724 ops/s
# Warmup Iteration  18: 1040209.681 ops/s
# Warmup Iteration  19: 1035658.455 ops/s
# Warmup Iteration  20: 1041731.501 ops/s
# Warmup Iteration  21: 1039094.346 ops/s
# Warmup Iteration  22: 1037489.386 ops/s
# Warmup Iteration  23: 1040176.994 ops/s
# Warmup Iteration  24: 1041012.203 ops/s
# Warmup Iteration  25: 1040280.672 ops/s
# Warmup Iteration  26: 1041356.988 ops/s
# Warmup Iteration  27: 1038797.845 ops/s
# Warmup Iteration  28: 1041815.107 ops/s
# Warmup Iteration  29: 1038638.614 ops/s
# Warmup Iteration  30: 1034791.150 ops/s
Iteration   1: 1043926.745 ops/s
Iteration   2: 1038879.959 ops/s
Iteration   3: 1041928.537 ops/s
Iteration   4: 1040799.952 ops/s
Iteration   5: 1039361.080 ops/s
Iteration   6: 1041035.937 ops/s
Iteration   7: 1042124.034 ops/s
Iteration   8: 1041595.980 ops/s
Iteration   9: 1032843.297 ops/s
Iteration  10: 1038615.768 ops/s
Iteration  11: 1039895.834 ops/s
Iteration  12: 1041398.915 ops/s
Iteration  13: 1037937.857 ops/s
Iteration  14: 1043277.591 ops/s
Iteration  15: 1041079.122 ops/s
Iteration  16: 1038270.749 ops/s
Iteration  17: 1044945.610 ops/s
Iteration  18: 1041293.468 ops/s
Iteration  19: 1035083.173 ops/s
Iteration  20: 1042954.093 ops/s
Iteration  21: 1041213.090 ops/s
Iteration  22: 1038340.216 ops/s
Iteration  23: 1041649.084 ops/s
Iteration  24: 1037410.731 ops/s
Iteration  25: 1044233.455 ops/s
Iteration  26: 1039103.332 ops/s
Iteration  27: 1041949.237 ops/s
Iteration  28: 1038140.299 ops/s
Iteration  29: 1019078.743 ops/s
Iteration  30: 1040326.438 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_removeAll_iterable":
  1039623.077 ±(99.9%) 3128.903 ops/s [Average]
  (min, avg, max) = (1019078.743, 1039623.077, 1044945.610), stdev = 4683.195
  CI (99.9%): [1036494.175, 1042751.980] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score      Error  Units
UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_removeAll_iterable  thrpt   30  1039623.077 ± 3128.903  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 680729.226 ops/s
# Warmup Iteration   2: 799970.964 ops/s
# Warmup Iteration   3: 985781.077 ops/s
# Warmup Iteration   4: 983643.293 ops/s
# Warmup Iteration   5: 982350.959 ops/s
# Warmup Iteration   6: 982565.562 ops/s
# Warmup Iteration   7: 973017.046 ops/s
# Warmup Iteration   8: 979690.596 ops/s
# Warmup Iteration   9: 827216.489 ops/s
# Warmup Iteration  10: 984754.898 ops/s
# Warmup Iteration  11: 983100.118 ops/s
# Warmup Iteration  12: 983710.292 ops/s
# Warmup Iteration  13: 981807.084 ops/s
# Warmup Iteration  14: 982961.904 ops/s
# Warmup Iteration  15: 983948.378 ops/s
# Warmup Iteration  16: 981691.917 ops/s
# Warmup Iteration  17: 1043523.497 ops/s
# Warmup Iteration  18: 1044685.493 ops/s
# Warmup Iteration  19: 1044998.315 ops/s
# Warmup Iteration  20: 1042780.419 ops/s
# Warmup Iteration  21: 1041259.052 ops/s
# Warmup Iteration  22: 1043611.939 ops/s
# Warmup Iteration  23: 1045004.661 ops/s
# Warmup Iteration  24: 1045368.650 ops/s
# Warmup Iteration  25: 1047949.826 ops/s
# Warmup Iteration  26: 1043987.071 ops/s
# Warmup Iteration  27: 1043415.416 ops/s
# Warmup Iteration  28: 1044773.263 ops/s
# Warmup Iteration  29: 1034800.948 ops/s
# Warmup Iteration  30: 1046932.897 ops/s
Iteration   1: 1047380.863 ops/s
Iteration   2: 1043731.324 ops/s
Iteration   3: 1044339.008 ops/s
Iteration   4: 1046207.985 ops/s
Iteration   5: 1037611.552 ops/s
Iteration   6: 1045847.922 ops/s
Iteration   7: 1043818.959 ops/s
Iteration   8: 1043165.140 ops/s
Iteration   9: 1045342.109 ops/s
Iteration  10: 1042208.370 ops/s
Iteration  11: 1042774.371 ops/s
Iteration  12: 1045786.597 ops/s
Iteration  13: 1042920.413 ops/s
Iteration  14: 1042190.635 ops/s
Iteration  15: 1047734.372 ops/s
Iteration  16: 1049694.905 ops/s
Iteration  17: 1045441.925 ops/s
Iteration  18: 1041784.339 ops/s
Iteration  19: 1044637.820 ops/s
Iteration  20: 1044128.617 ops/s
Iteration  21: 1044056.484 ops/s
Iteration  22: 1043529.582 ops/s
Iteration  23: 1045621.065 ops/s
Iteration  24: 1045077.859 ops/s
Iteration  25: 1043909.673 ops/s
Iteration  26: 1011115.412 ops/s
Iteration  27: 1044777.149 ops/s
Iteration  28: 1048417.963 ops/s
Iteration  29: 1041807.207 ops/s
Iteration  30: 1046235.445 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_retainAll":
  1043376.502 ±(99.9%) 4356.565 ops/s [Average]
  (min, avg, max) = (1011115.412, 1043376.502, 1049694.905), stdev = 6520.702
  CI (99.9%): [1039019.937, 1047733.067] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_retainAll  thrpt   30  1043376.502 ± 4356.565  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_retainAll_iterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_retainAll_iterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 666349.148 ops/s
# Warmup Iteration   2: 809780.990 ops/s
# Warmup Iteration   3: 980530.621 ops/s
# Warmup Iteration   4: 984804.061 ops/s
# Warmup Iteration   5: 986457.956 ops/s
# Warmup Iteration   6: 982775.913 ops/s
# Warmup Iteration   7: 979904.574 ops/s
# Warmup Iteration   8: 961761.755 ops/s
# Warmup Iteration   9: 828858.090 ops/s
# Warmup Iteration  10: 979536.956 ops/s
# Warmup Iteration  11: 979703.775 ops/s
# Warmup Iteration  12: 980377.156 ops/s
# Warmup Iteration  13: 976841.649 ops/s
# Warmup Iteration  14: 981438.398 ops/s
# Warmup Iteration  15: 980310.036 ops/s
# Warmup Iteration  16: 977370.109 ops/s
# Warmup Iteration  17: 1044486.854 ops/s
# Warmup Iteration  18: 1048169.234 ops/s
# Warmup Iteration  19: 1043102.891 ops/s
# Warmup Iteration  20: 1042528.087 ops/s
# Warmup Iteration  21: 1048417.103 ops/s
# Warmup Iteration  22: 1045872.405 ops/s
# Warmup Iteration  23: 1048504.002 ops/s
# Warmup Iteration  24: 1045025.058 ops/s
# Warmup Iteration  25: 1046373.648 ops/s
# Warmup Iteration  26: 1048702.932 ops/s
# Warmup Iteration  27: 1046347.879 ops/s
# Warmup Iteration  28: 1047540.840 ops/s
# Warmup Iteration  29: 1049732.496 ops/s
# Warmup Iteration  30: 1045568.811 ops/s
Iteration   1: 1034639.634 ops/s
Iteration   2: 1047596.917 ops/s
Iteration   3: 1048604.209 ops/s
Iteration   4: 1047973.789 ops/s
Iteration   5: 1049441.732 ops/s
Iteration   6: 1047269.919 ops/s
Iteration   7: 1043466.415 ops/s
Iteration   8: 1047928.466 ops/s
Iteration   9: 1048496.752 ops/s
Iteration  10: 1049837.407 ops/s
Iteration  11: 1053705.166 ops/s
Iteration  12: 1048830.632 ops/s
Iteration  13: 1050675.162 ops/s
Iteration  14: 1021405.935 ops/s
Iteration  15: 1047117.373 ops/s
Iteration  16: 1050752.887 ops/s
Iteration  17: 1042819.144 ops/s
Iteration  18: 1044100.227 ops/s
Iteration  19: 1047239.151 ops/s
Iteration  20: 1047345.177 ops/s
Iteration  21: 1044561.835 ops/s
Iteration  22: 1027236.222 ops/s
Iteration  23: 1047018.624 ops/s
Iteration  24: 1048349.690 ops/s
Iteration  25: 1048814.206 ops/s
Iteration  26: 1043453.612 ops/s
Iteration  27: 1044373.561 ops/s
Iteration  28: 1048999.715 ops/s
Iteration  29: 1047092.453 ops/s
Iteration  30: 1046536.715 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_retainAll_iterable":
  1045522.757 ±(99.9%) 4478.852 ops/s [Average]
  (min, avg, max) = (1021405.935, 1045522.757, 1053705.166), stdev = 6703.735
  CI (99.9%): [1041043.906, 1050001.609] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score      Error  Units
UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_retainAll_iterable  thrpt   30  1045522.757 ± 4478.852  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4476767.040 ops/s
# Warmup Iteration   2: 9224626.264 ops/s
# Warmup Iteration   3: 7857779.923 ops/s
# Warmup Iteration   4: 9323311.725 ops/s
# Warmup Iteration   5: 9339124.162 ops/s
# Warmup Iteration   6: 9327204.089 ops/s
# Warmup Iteration   7: 9325068.057 ops/s
# Warmup Iteration   8: 9360711.091 ops/s
# Warmup Iteration   9: 9334534.203 ops/s
# Warmup Iteration  10: 9269017.848 ops/s
# Warmup Iteration  11: 9330438.229 ops/s
# Warmup Iteration  12: 9326776.844 ops/s
# Warmup Iteration  13: 9310266.593 ops/s
# Warmup Iteration  14: 9349239.076 ops/s
# Warmup Iteration  15: 9352182.496 ops/s
# Warmup Iteration  16: 9328966.587 ops/s
# Warmup Iteration  17: 9354205.971 ops/s
# Warmup Iteration  18: 9366625.693 ops/s
# Warmup Iteration  19: 9343795.293 ops/s
# Warmup Iteration  20: 9346004.604 ops/s
# Warmup Iteration  21: 9357352.976 ops/s
# Warmup Iteration  22: 9261056.465 ops/s
# Warmup Iteration  23: 9328322.401 ops/s
# Warmup Iteration  24: 9366499.592 ops/s
# Warmup Iteration  25: 9335488.669 ops/s
# Warmup Iteration  26: 9344717.970 ops/s
# Warmup Iteration  27: 9342990.395 ops/s
# Warmup Iteration  28: 9239154.466 ops/s
# Warmup Iteration  29: 9359383.591 ops/s
# Warmup Iteration  30: 9340995.774 ops/s
Iteration   1: 9374719.370 ops/s
Iteration   2: 9342977.255 ops/s
Iteration   3: 9344598.090 ops/s
Iteration   4: 9293717.296 ops/s
Iteration   5: 9211520.918 ops/s
Iteration   6: 9362532.657 ops/s
Iteration   7: 9326281.964 ops/s
Iteration   8: 9346767.172 ops/s
Iteration   9: 9357589.504 ops/s
Iteration  10: 9326175.886 ops/s
Iteration  11: 9297119.587 ops/s
Iteration  12: 9360303.533 ops/s
Iteration  13: 9325036.096 ops/s
Iteration  14: 9378205.172 ops/s
Iteration  15: 9357923.954 ops/s
Iteration  16: 9350785.384 ops/s
Iteration  17: 9330531.892 ops/s
Iteration  18: 9342231.151 ops/s
Iteration  19: 9352420.762 ops/s
Iteration  20: 9361967.109 ops/s
Iteration  21: 9335579.701 ops/s
Iteration  22: 9325045.523 ops/s
Iteration  23: 9354504.939 ops/s
Iteration  24: 9346948.549 ops/s
Iteration  25: 9319024.295 ops/s
Iteration  26: 9356285.032 ops/s
Iteration  27: 9347599.166 ops/s
Iteration  28: 9302097.800 ops/s
Iteration  29: 9317813.822 ops/s
Iteration  30: 9377547.426 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_select":
  9337528.367 ±(99.9%) 21720.415 ops/s [Average]
  (min, avg, max) = (9211520.918, 9337528.367, 9378205.172), stdev = 32510.097
  CI (99.9%): [9315807.952, 9359248.782] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_select  thrpt   30  9337528.367 ± 21720.415  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2644728.518 ops/s
# Warmup Iteration   2: 4449918.306 ops/s
# Warmup Iteration   3: 5225308.771 ops/s
# Warmup Iteration   4: 5241735.764 ops/s
# Warmup Iteration   5: 5248170.012 ops/s
# Warmup Iteration   6: 5222670.834 ops/s
# Warmup Iteration   7: 5243996.192 ops/s
# Warmup Iteration   8: 5248860.492 ops/s
# Warmup Iteration   9: 5232608.314 ops/s
# Warmup Iteration  10: 5261209.924 ops/s
# Warmup Iteration  11: 5236743.084 ops/s
# Warmup Iteration  12: 5178330.103 ops/s
# Warmup Iteration  13: 5249971.381 ops/s
# Warmup Iteration  14: 5202483.199 ops/s
# Warmup Iteration  15: 5208703.729 ops/s
# Warmup Iteration  16: 5234128.977 ops/s
# Warmup Iteration  17: 5132127.747 ops/s
# Warmup Iteration  18: 5157646.984 ops/s
# Warmup Iteration  19: 5139050.249 ops/s
# Warmup Iteration  20: 5163282.132 ops/s
# Warmup Iteration  21: 5155019.918 ops/s
# Warmup Iteration  22: 5097677.781 ops/s
# Warmup Iteration  23: 5130333.696 ops/s
# Warmup Iteration  24: 5069292.868 ops/s
# Warmup Iteration  25: 5142196.621 ops/s
# Warmup Iteration  26: 5139252.328 ops/s
# Warmup Iteration  27: 5142371.249 ops/s
# Warmup Iteration  28: 5081365.244 ops/s
# Warmup Iteration  29: 5084256.291 ops/s
# Warmup Iteration  30: 5094075.735 ops/s
Iteration   1: 5124555.932 ops/s
Iteration   2: 5150842.070 ops/s
Iteration   3: 5061172.717 ops/s
Iteration   4: 5116442.979 ops/s
Iteration   5: 5110201.601 ops/s
Iteration   6: 5083757.367 ops/s
Iteration   7: 5145230.283 ops/s
Iteration   8: 5135807.229 ops/s
Iteration   9: 5153028.555 ops/s
Iteration  10: 5127293.514 ops/s
Iteration  11: 5095272.033 ops/s
Iteration  12: 5116772.626 ops/s
Iteration  13: 5101615.655 ops/s
Iteration  14: 5150318.242 ops/s
Iteration  15: 5121847.374 ops/s
Iteration  16: 5137733.285 ops/s
Iteration  17: 5100234.573 ops/s
Iteration  18: 5114993.680 ops/s
Iteration  19: 5133263.717 ops/s
Iteration  20: 5153729.760 ops/s
Iteration  21: 5129724.623 ops/s
Iteration  22: 5122377.588 ops/s
Iteration  23: 5103610.510 ops/s
Iteration  24: 5099363.858 ops/s
Iteration  25: 5026139.327 ops/s
Iteration  26: 5139001.482 ops/s
Iteration  27: 5114065.562 ops/s
Iteration  28: 5013758.478 ops/s
Iteration  29: 5114166.941 ops/s
Iteration  30: 5149393.412 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_size":
  5114857.166 ±(99.9%) 22607.243 ops/s [Average]
  (min, avg, max) = (5013758.478, 5114857.166, 5153729.760), stdev = 33837.459
  CI (99.9%): [5092249.923, 5137464.409] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_size  thrpt   30  5114857.166 ± 22607.243  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_testEquals$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_testEquals

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 169022708.257 ops/s
# Warmup Iteration   2: 297336815.914 ops/s
# Warmup Iteration   3: 277994902.467 ops/s
# Warmup Iteration   4: 316301913.041 ops/s
# Warmup Iteration   5: 315957249.271 ops/s
# Warmup Iteration   6: 316225981.322 ops/s
# Warmup Iteration   7: 315812094.170 ops/s
# Warmup Iteration   8: 315196791.497 ops/s
# Warmup Iteration   9: 316409560.978 ops/s
# Warmup Iteration  10: 315796342.300 ops/s
# Warmup Iteration  11: 315779482.703 ops/s
# Warmup Iteration  12: 316375893.361 ops/s
# Warmup Iteration  13: 315836160.842 ops/s
# Warmup Iteration  14: 315922524.127 ops/s
# Warmup Iteration  15: 316965707.497 ops/s
# Warmup Iteration  16: 314751604.644 ops/s
# Warmup Iteration  17: 315651751.284 ops/s
# Warmup Iteration  18: 315847726.842 ops/s
# Warmup Iteration  19: 315010055.306 ops/s
# Warmup Iteration  20: 314560251.063 ops/s
# Warmup Iteration  21: 314688896.215 ops/s
# Warmup Iteration  22: 316508566.244 ops/s
# Warmup Iteration  23: 315138544.715 ops/s
# Warmup Iteration  24: 315631831.562 ops/s
# Warmup Iteration  25: 313804328.677 ops/s
# Warmup Iteration  26: 315118264.008 ops/s
# Warmup Iteration  27: 312959891.950 ops/s
# Warmup Iteration  28: 315395499.857 ops/s
# Warmup Iteration  29: 315207725.905 ops/s
# Warmup Iteration  30: 313998316.165 ops/s
Iteration   1: 315412234.761 ops/s
Iteration   2: 315242862.940 ops/s
Iteration   3: 314977331.205 ops/s
Iteration   4: 313634020.787 ops/s
Iteration   5: 314335108.335 ops/s
Iteration   6: 316336567.139 ops/s
Iteration   7: 316185033.838 ops/s
Iteration   8: 317321179.707 ops/s
Iteration   9: 315228948.306 ops/s
Iteration  10: 316729679.913 ops/s
Iteration  11: 315531409.452 ops/s
Iteration  12: 313838215.074 ops/s
Iteration  13: 313700061.471 ops/s
Iteration  14: 315408282.409 ops/s
Iteration  15: 316647057.157 ops/s
Iteration  16: 315435405.598 ops/s
Iteration  17: 314207090.161 ops/s
Iteration  18: 315369848.438 ops/s
Iteration  19: 316300010.546 ops/s
Iteration  20: 314883087.140 ops/s
Iteration  21: 309750926.906 ops/s
Iteration  22: 313781398.889 ops/s
Iteration  23: 314745935.743 ops/s
Iteration  24: 316708153.870 ops/s
Iteration  25: 315251407.714 ops/s
Iteration  26: 315440207.807 ops/s
Iteration  27: 315635429.357 ops/s
Iteration  28: 310115239.329 ops/s
Iteration  29: 313828757.440 ops/s
Iteration  30: 314362468.900 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_testEquals":
  314878112.011 ±(99.9%) 1115863.385 ops/s [Average]
  (min, avg, max) = (309750926.906, 314878112.011, 317321179.707), stdev = 1670171.910
  CI (99.9%): [313762248.626, 315993975.396] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt          Score         Error  Units
UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_testEquals  thrpt   30  314878112.011 ± 1115863.385  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_testHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_testHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 170984239.043 ops/s
# Warmup Iteration   2: 298680999.782 ops/s
# Warmup Iteration   3: 279807667.046 ops/s
# Warmup Iteration   4: 313372109.413 ops/s
# Warmup Iteration   5: 311766816.231 ops/s
# Warmup Iteration   6: 313020338.322 ops/s
# Warmup Iteration   7: 314999691.962 ops/s
# Warmup Iteration   8: 314510258.041 ops/s
# Warmup Iteration   9: 314677590.381 ops/s
# Warmup Iteration  10: 315372372.274 ops/s
# Warmup Iteration  11: 314241757.734 ops/s
# Warmup Iteration  12: 315107164.452 ops/s
# Warmup Iteration  13: 314448780.028 ops/s
# Warmup Iteration  14: 315336089.017 ops/s
# Warmup Iteration  15: 314120262.330 ops/s
# Warmup Iteration  16: 313816001.552 ops/s
# Warmup Iteration  17: 313707825.985 ops/s
# Warmup Iteration  18: 310695594.305 ops/s
# Warmup Iteration  19: 314062741.579 ops/s
# Warmup Iteration  20: 314001367.071 ops/s
# Warmup Iteration  21: 313582343.209 ops/s
# Warmup Iteration  22: 314361802.120 ops/s
# Warmup Iteration  23: 314420439.482 ops/s
# Warmup Iteration  24: 314407583.771 ops/s
# Warmup Iteration  25: 314154613.630 ops/s
# Warmup Iteration  26: 313486769.014 ops/s
# Warmup Iteration  27: 312314179.617 ops/s
# Warmup Iteration  28: 313300858.935 ops/s
# Warmup Iteration  29: 314809484.304 ops/s
# Warmup Iteration  30: 314334585.954 ops/s
Iteration   1: 310275536.471 ops/s
Iteration   2: 311282465.015 ops/s
Iteration   3: 314622288.948 ops/s
Iteration   4: 314969743.606 ops/s
Iteration   5: 313145918.850 ops/s
Iteration   6: 312490246.795 ops/s
Iteration   7: 313318202.618 ops/s
Iteration   8: 314121257.449 ops/s
Iteration   9: 314158825.814 ops/s
Iteration  10: 313436805.994 ops/s
Iteration  11: 314908628.636 ops/s
Iteration  12: 314345806.557 ops/s
Iteration  13: 314215367.356 ops/s
Iteration  14: 313486992.291 ops/s
Iteration  15: 314361156.606 ops/s
Iteration  16: 313759202.032 ops/s
Iteration  17: 313332974.034 ops/s
Iteration  18: 314915540.017 ops/s
Iteration  19: 314606334.651 ops/s
Iteration  20: 314166139.338 ops/s
Iteration  21: 313958647.862 ops/s
Iteration  22: 307686809.925 ops/s
Iteration  23: 313135726.860 ops/s
Iteration  24: 314281789.032 ops/s
Iteration  25: 314602344.018 ops/s
Iteration  26: 314363904.995 ops/s
Iteration  27: 313267027.279 ops/s
Iteration  28: 312158892.398 ops/s
Iteration  29: 314423500.086 ops/s
Iteration  30: 313905598.119 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_testHashCode":
  313523455.788 ±(99.9%) 1023210.174 ops/s [Average]
  (min, avg, max) = (307686809.925, 313523455.788, 314969743.606), stdev = 1531492.935
  CI (99.9%): [312500245.615, 314546665.962] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt          Score         Error  Units
UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_testHashCode  thrpt   30  313523455.788 ± 1023210.174  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 168796898.496 ops/s
# Warmup Iteration   2: 300498770.270 ops/s
# Warmup Iteration   3: 276005586.544 ops/s
# Warmup Iteration   4: 313810256.650 ops/s
# Warmup Iteration   5: 315497944.211 ops/s
# Warmup Iteration   6: 315229865.048 ops/s
# Warmup Iteration   7: 315085835.563 ops/s
# Warmup Iteration   8: 314947676.228 ops/s
# Warmup Iteration   9: 314403477.927 ops/s
# Warmup Iteration  10: 311890638.173 ops/s
# Warmup Iteration  11: 314442883.878 ops/s
# Warmup Iteration  12: 313705490.659 ops/s
# Warmup Iteration  13: 314364255.551 ops/s
# Warmup Iteration  14: 315235871.594 ops/s
# Warmup Iteration  15: 314361982.130 ops/s
# Warmup Iteration  16: 314462587.255 ops/s
# Warmup Iteration  17: 314925216.109 ops/s
# Warmup Iteration  18: 311602148.575 ops/s
# Warmup Iteration  19: 313690501.673 ops/s
# Warmup Iteration  20: 313470019.574 ops/s
# Warmup Iteration  21: 313305036.640 ops/s
# Warmup Iteration  22: 315171086.595 ops/s
# Warmup Iteration  23: 314766514.892 ops/s
# Warmup Iteration  24: 314206358.943 ops/s
# Warmup Iteration  25: 314778364.348 ops/s
# Warmup Iteration  26: 313746378.884 ops/s
# Warmup Iteration  27: 314574534.705 ops/s
# Warmup Iteration  28: 315003789.663 ops/s
# Warmup Iteration  29: 313516621.641 ops/s
# Warmup Iteration  30: 314254142.072 ops/s
Iteration   1: 313381566.849 ops/s
Iteration   2: 315530407.779 ops/s
Iteration   3: 309984620.612 ops/s
Iteration   4: 314244941.969 ops/s
Iteration   5: 313820384.161 ops/s
Iteration   6: 314564401.422 ops/s
Iteration   7: 310591166.489 ops/s
Iteration   8: 315112124.085 ops/s
Iteration   9: 314549102.513 ops/s
Iteration  10: 313591854.435 ops/s
Iteration  11: 313180193.656 ops/s
Iteration  12: 315687709.924 ops/s
Iteration  13: 311790011.239 ops/s
Iteration  14: 315312605.144 ops/s
Iteration  15: 313357308.137 ops/s
Iteration  16: 315034048.154 ops/s
Iteration  17: 309266139.985 ops/s
Iteration  18: 315928056.818 ops/s
Iteration  19: 313356350.474 ops/s
Iteration  20: 312602218.329 ops/s
Iteration  21: 314306134.705 ops/s
Iteration  22: 313914903.502 ops/s
Iteration  23: 312943908.196 ops/s
Iteration  24: 315409559.258 ops/s
Iteration  25: 314051873.269 ops/s
Iteration  26: 313649582.034 ops/s
Iteration  27: 315199773.571 ops/s
Iteration  28: 315761710.699 ops/s
Iteration  29: 313652666.325 ops/s
Iteration  30: 312368953.587 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_testToString":
  313738142.577 ±(99.9%) 1118544.704 ops/s [Average]
  (min, avg, max) = (309266139.985, 313738142.577, 315928056.818), stdev = 1674185.182
  CI (99.9%): [312619597.873, 314856687.281] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt          Score         Error  Units
UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_testToString  thrpt   30  313738142.577 ± 1118544.704  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1421879.012 ops/s
# Warmup Iteration   2: 3172423.345 ops/s
# Warmup Iteration   3: 2638262.376 ops/s
# Warmup Iteration   4: 3184539.142 ops/s
# Warmup Iteration   5: 3201500.425 ops/s
# Warmup Iteration   6: 3189180.271 ops/s
# Warmup Iteration   7: 3191399.836 ops/s
# Warmup Iteration   8: 3196327.706 ops/s
# Warmup Iteration   9: 3193568.152 ops/s
# Warmup Iteration  10: 3187045.605 ops/s
# Warmup Iteration  11: 3191117.258 ops/s
# Warmup Iteration  12: 3187427.009 ops/s
# Warmup Iteration  13: 3190433.175 ops/s
# Warmup Iteration  14: 3178021.855 ops/s
# Warmup Iteration  15: 3186610.568 ops/s
# Warmup Iteration  16: 3189888.192 ops/s
# Warmup Iteration  17: 3184999.171 ops/s
# Warmup Iteration  18: 3187703.914 ops/s
# Warmup Iteration  19: 3187798.494 ops/s
# Warmup Iteration  20: 3193202.572 ops/s
# Warmup Iteration  21: 3196685.752 ops/s
# Warmup Iteration  22: 3132494.993 ops/s
# Warmup Iteration  23: 3186426.028 ops/s
# Warmup Iteration  24: 3188796.443 ops/s
# Warmup Iteration  25: 3194571.977 ops/s
# Warmup Iteration  26: 3189024.457 ops/s
# Warmup Iteration  27: 3185498.813 ops/s
# Warmup Iteration  28: 3186122.080 ops/s
# Warmup Iteration  29: 3186419.285 ops/s
# Warmup Iteration  30: 3189411.367 ops/s
Iteration   1: 3185071.936 ops/s
Iteration   2: 3190150.860 ops/s
Iteration   3: 3184837.865 ops/s
Iteration   4: 3191097.345 ops/s
Iteration   5: 3190877.660 ops/s
Iteration   6: 3194308.238 ops/s
Iteration   7: 3192247.167 ops/s
Iteration   8: 3189247.734 ops/s
Iteration   9: 3185024.542 ops/s
Iteration  10: 3190676.064 ops/s
Iteration  11: 3193648.706 ops/s
Iteration  12: 3186651.073 ops/s
Iteration  13: 3190756.218 ops/s
Iteration  14: 3185815.561 ops/s
Iteration  15: 3192020.789 ops/s
Iteration  16: 3183904.915 ops/s
Iteration  17: 3187566.273 ops/s
Iteration  18: 3201774.817 ops/s
Iteration  19: 3184527.668 ops/s
Iteration  20: 3186448.205 ops/s
Iteration  21: 3186756.038 ops/s
Iteration  22: 3183406.084 ops/s
Iteration  23: 3197228.916 ops/s
Iteration  24: 3191933.942 ops/s
Iteration  25: 3189202.370 ops/s
Iteration  26: 3190714.974 ops/s
Iteration  27: 3165189.110 ops/s
Iteration  28: 3189733.479 ops/s
Iteration  29: 3179686.122 ops/s
Iteration  30: 3133632.118 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_toArray":
  3186471.226 ±(99.9%) 7856.625 ops/s [Average]
  (min, avg, max) = (3133632.118, 3186471.226, 3201774.817), stdev = 11759.427
  CI (99.9%): [3178614.601, 3194327.851] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_toArray  thrpt   30  3186471.226 ± 7856.625  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_toBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_toBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1093692.682 ops/s
# Warmup Iteration   2: 2424490.168 ops/s
# Warmup Iteration   3: 2053598.459 ops/s
# Warmup Iteration   4: 2414084.142 ops/s
# Warmup Iteration   5: 2437858.006 ops/s
# Warmup Iteration   6: 2435191.589 ops/s
# Warmup Iteration   7: 2437880.906 ops/s
# Warmup Iteration   8: 2437428.212 ops/s
# Warmup Iteration   9: 2433224.878 ops/s
# Warmup Iteration  10: 2443025.621 ops/s
# Warmup Iteration  11: 2437711.665 ops/s
# Warmup Iteration  12: 2422292.080 ops/s
# Warmup Iteration  13: 2438199.895 ops/s
# Warmup Iteration  14: 2439107.064 ops/s
# Warmup Iteration  15: 2437978.540 ops/s
# Warmup Iteration  16: 2439561.118 ops/s
# Warmup Iteration  17: 2406723.808 ops/s
# Warmup Iteration  18: 2419701.223 ops/s
# Warmup Iteration  19: 2412031.676 ops/s
# Warmup Iteration  20: 2416675.387 ops/s
# Warmup Iteration  21: 2420489.488 ops/s
# Warmup Iteration  22: 2392765.411 ops/s
# Warmup Iteration  23: 2400722.510 ops/s
# Warmup Iteration  24: 2418943.889 ops/s
# Warmup Iteration  25: 2418737.863 ops/s
# Warmup Iteration  26: 2412727.179 ops/s
# Warmup Iteration  27: 2417036.322 ops/s
# Warmup Iteration  28: 2415386.410 ops/s
# Warmup Iteration  29: 2419483.997 ops/s
# Warmup Iteration  30: 2413475.657 ops/s
Iteration   1: 2418034.791 ops/s
Iteration   2: 2395604.765 ops/s
Iteration   3: 2420300.080 ops/s
Iteration   4: 2420017.013 ops/s
Iteration   5: 2418643.953 ops/s
Iteration   6: 2416882.898 ops/s
Iteration   7: 2416828.162 ops/s
Iteration   8: 2413730.509 ops/s
Iteration   9: 2418187.895 ops/s
Iteration  10: 2412984.308 ops/s
Iteration  11: 2380236.285 ops/s
Iteration  12: 2416375.947 ops/s
Iteration  13: 2423309.408 ops/s
Iteration  14: 2422532.132 ops/s
Iteration  15: 2418706.806 ops/s
Iteration  16: 2410569.077 ops/s
Iteration  17: 2416279.594 ops/s
Iteration  18: 2414517.817 ops/s
Iteration  19: 2419341.767 ops/s
Iteration  20: 2420972.829 ops/s
Iteration  21: 2416102.215 ops/s
Iteration  22: 2419542.027 ops/s
Iteration  23: 2418990.681 ops/s
Iteration  24: 2418083.939 ops/s
Iteration  25: 2415493.969 ops/s
Iteration  26: 2419578.133 ops/s
Iteration  27: 2411484.291 ops/s
Iteration  28: 2420380.909 ops/s
Iteration  29: 2416003.453 ops/s
Iteration  30: 2416984.315 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_toBag":
  2415556.666 ±(99.9%) 5556.766 ops/s [Average]
  (min, avg, max) = (2380236.285, 2415556.666, 2423309.408), stdev = 8317.107
  CI (99.9%): [2409999.899, 2421113.432] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_toBag  thrpt   30  2415556.666 ± 5556.766  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 982869.395 ops/s
# Warmup Iteration   2: 2315226.572 ops/s
# Warmup Iteration   3: 1949648.155 ops/s
# Warmup Iteration   4: 2326429.020 ops/s
# Warmup Iteration   5: 2344945.555 ops/s
# Warmup Iteration   6: 2345354.183 ops/s
# Warmup Iteration   7: 2328143.572 ops/s
# Warmup Iteration   8: 2347592.632 ops/s
# Warmup Iteration   9: 2341675.741 ops/s
# Warmup Iteration  10: 2347965.579 ops/s
# Warmup Iteration  11: 2346467.579 ops/s
# Warmup Iteration  12: 2328535.095 ops/s
# Warmup Iteration  13: 2342693.137 ops/s
# Warmup Iteration  14: 2340142.878 ops/s
# Warmup Iteration  15: 2340129.424 ops/s
# Warmup Iteration  16: 2351224.523 ops/s
# Warmup Iteration  17: 2347792.192 ops/s
# Warmup Iteration  18: 2348572.402 ops/s
# Warmup Iteration  19: 2351583.517 ops/s
# Warmup Iteration  20: 2346161.118 ops/s
# Warmup Iteration  21: 2347086.636 ops/s
# Warmup Iteration  22: 2343052.872 ops/s
# Warmup Iteration  23: 2352258.500 ops/s
# Warmup Iteration  24: 2348448.290 ops/s
# Warmup Iteration  25: 2337525.647 ops/s
# Warmup Iteration  26: 2328698.142 ops/s
# Warmup Iteration  27: 2342856.078 ops/s
# Warmup Iteration  28: 2348089.576 ops/s
# Warmup Iteration  29: 2327048.847 ops/s
# Warmup Iteration  30: 2350479.777 ops/s
Iteration   1: 2348423.666 ops/s
Iteration   2: 2348556.456 ops/s
Iteration   3: 2351112.504 ops/s
Iteration   4: 2352070.393 ops/s
Iteration   5: 2355078.674 ops/s
Iteration   6: 2345340.846 ops/s
Iteration   7: 2349097.746 ops/s
Iteration   8: 2356461.751 ops/s
Iteration   9: 2351962.322 ops/s
Iteration  10: 2350658.463 ops/s
Iteration  11: 2348647.355 ops/s
Iteration  12: 2345349.751 ops/s
Iteration  13: 2347507.450 ops/s
Iteration  14: 2351470.260 ops/s
Iteration  15: 2352699.828 ops/s
Iteration  16: 2349358.418 ops/s
Iteration  17: 2341156.233 ops/s
Iteration  18: 2345556.588 ops/s
Iteration  19: 2350765.166 ops/s
Iteration  20: 2351589.221 ops/s
Iteration  21: 2348519.258 ops/s
Iteration  22: 2349082.035 ops/s
Iteration  23: 2350100.391 ops/s
Iteration  24: 2347128.675 ops/s
Iteration  25: 2348882.883 ops/s
Iteration  26: 2345414.424 ops/s
Iteration  27: 2349825.868 ops/s
Iteration  28: 2344120.431 ops/s
Iteration  29: 2347244.927 ops/s
Iteration  30: 2344444.014 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_toList":
  2348920.867 ±(99.9%) 2207.987 ops/s [Average]
  (min, avg, max) = (2341156.233, 2348920.867, 2356461.751), stdev = 3304.811
  CI (99.9%): [2346712.880, 2351128.853] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_toList  thrpt   30  2348920.867 ± 2207.987  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_toSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_toSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1314989.472 ops/s
# Warmup Iteration   2: 3032597.249 ops/s
# Warmup Iteration   3: 3047686.303 ops/s
# Warmup Iteration   4: 2508763.227 ops/s
# Warmup Iteration   5: 3046366.601 ops/s
# Warmup Iteration   6: 3044373.343 ops/s
# Warmup Iteration   7: 3018577.095 ops/s
# Warmup Iteration   8: 3044766.292 ops/s
# Warmup Iteration   9: 3027910.946 ops/s
# Warmup Iteration  10: 3045435.550 ops/s
# Warmup Iteration  11: 3047086.002 ops/s
# Warmup Iteration  12: 3044291.550 ops/s
# Warmup Iteration  13: 3046586.496 ops/s
# Warmup Iteration  14: 3048096.393 ops/s
# Warmup Iteration  15: 3042752.357 ops/s
# Warmup Iteration  16: 3048583.419 ops/s
# Warmup Iteration  17: 3049271.522 ops/s
# Warmup Iteration  18: 3047196.187 ops/s
# Warmup Iteration  19: 3046046.672 ops/s
# Warmup Iteration  20: 3047525.154 ops/s
# Warmup Iteration  21: 3048276.381 ops/s
# Warmup Iteration  22: 3041862.722 ops/s
# Warmup Iteration  23: 3048347.458 ops/s
# Warmup Iteration  24: 3049201.338 ops/s
# Warmup Iteration  25: 3024543.029 ops/s
# Warmup Iteration  26: 3043182.567 ops/s
# Warmup Iteration  27: 3038375.541 ops/s
# Warmup Iteration  28: 3046723.044 ops/s
# Warmup Iteration  29: 3044244.901 ops/s
# Warmup Iteration  30: 3041907.490 ops/s
Iteration   1: 3045912.061 ops/s
Iteration   2: 3043775.389 ops/s
Iteration   3: 3047863.730 ops/s
Iteration   4: 3039065.530 ops/s
Iteration   5: 3044661.576 ops/s
Iteration   6: 3047291.937 ops/s
Iteration   7: 3046933.371 ops/s
Iteration   8: 3048413.588 ops/s
Iteration   9: 3046251.455 ops/s
Iteration  10: 3046233.581 ops/s
Iteration  11: 3046001.682 ops/s
Iteration  12: 3046942.440 ops/s
Iteration  13: 3049458.648 ops/s
Iteration  14: 3052847.005 ops/s
Iteration  15: 3052660.324 ops/s
Iteration  16: 3038879.132 ops/s
Iteration  17: 3043518.899 ops/s
Iteration  18: 3046903.624 ops/s
Iteration  19: 3031088.862 ops/s
Iteration  20: 3045075.335 ops/s
Iteration  21: 3042527.390 ops/s
Iteration  22: 3049501.602 ops/s
Iteration  23: 2990517.507 ops/s
Iteration  24: 3044696.081 ops/s
Iteration  25: 3046615.974 ops/s
Iteration  26: 3036928.089 ops/s
Iteration  27: 2987125.428 ops/s
Iteration  28: 3052261.581 ops/s
Iteration  29: 3040755.375 ops/s
Iteration  30: 3043934.176 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_toSet":
  3041488.046 ±(99.9%) 10052.541 ops/s [Average]
  (min, avg, max) = (2987125.428, 3041488.046, 3052847.005), stdev = 15046.171
  CI (99.9%): [3031435.505, 3051540.587] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_toSet  thrpt   30  3041488.046 ± 10052.541  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_with$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_with

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 691474.243 ops/s
# Warmup Iteration   2: 789618.899 ops/s
# Warmup Iteration   3: 1005608.768 ops/s
# Warmup Iteration   4: 1003942.676 ops/s
# Warmup Iteration   5: 1004964.076 ops/s
# Warmup Iteration   6: 1006632.763 ops/s
# Warmup Iteration   7: 1004167.799 ops/s
# Warmup Iteration   8: 1004429.407 ops/s
# Warmup Iteration   9: 957561.078 ops/s
# Warmup Iteration  10: 884071.985 ops/s
# Warmup Iteration  11: 1004279.406 ops/s
# Warmup Iteration  12: 1002423.008 ops/s
# Warmup Iteration  13: 1004232.096 ops/s
# Warmup Iteration  14: 1004403.259 ops/s
# Warmup Iteration  15: 1002162.777 ops/s
# Warmup Iteration  16: 1003407.029 ops/s
# Warmup Iteration  17: 1072168.928 ops/s
# Warmup Iteration  18: 1066948.141 ops/s
# Warmup Iteration  19: 1066353.055 ops/s
# Warmup Iteration  20: 1071446.856 ops/s
# Warmup Iteration  21: 1068229.278 ops/s
# Warmup Iteration  22: 1069542.557 ops/s
# Warmup Iteration  23: 1072413.698 ops/s
# Warmup Iteration  24: 1066323.969 ops/s
# Warmup Iteration  25: 1069284.761 ops/s
# Warmup Iteration  26: 1068625.532 ops/s
# Warmup Iteration  27: 1069203.158 ops/s
# Warmup Iteration  28: 1066497.062 ops/s
# Warmup Iteration  29: 1060962.904 ops/s
# Warmup Iteration  30: 1069776.096 ops/s
Iteration   1: 1067830.511 ops/s
Iteration   2: 1067982.642 ops/s
Iteration   3: 1068699.211 ops/s
Iteration   4: 1069220.447 ops/s
Iteration   5: 1060425.452 ops/s
Iteration   6: 1069478.953 ops/s
Iteration   7: 1070883.979 ops/s
Iteration   8: 1071235.235 ops/s
Iteration   9: 1069765.153 ops/s
Iteration  10: 1072515.306 ops/s
Iteration  11: 1070370.601 ops/s
Iteration  12: 1069814.245 ops/s
Iteration  13: 1071755.453 ops/s
Iteration  14: 1066763.832 ops/s
Iteration  15: 1069598.580 ops/s
Iteration  16: 1068909.695 ops/s
Iteration  17: 1065194.749 ops/s
Iteration  18: 1070020.031 ops/s
Iteration  19: 1067043.522 ops/s
Iteration  20: 1065508.795 ops/s
Iteration  21: 1067116.560 ops/s
Iteration  22: 1052023.837 ops/s
Iteration  23: 1065810.737 ops/s
Iteration  24: 1061260.657 ops/s
Iteration  25: 1068333.345 ops/s
Iteration  26: 1067015.984 ops/s
Iteration  27: 1069754.299 ops/s
Iteration  28: 1066095.673 ops/s
Iteration  29: 1065489.055 ops/s
Iteration  30: 1071252.480 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_with":
  1067572.301 ±(99.9%) 2707.533 ops/s [Average]
  (min, avg, max) = (1052023.837, 1067572.301, 1072515.306), stdev = 4052.509
  CI (99.9%): [1064864.767, 1070279.834] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_with  thrpt   30  1067572.301 ± 2707.533  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_withAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_withAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 689089.543 ops/s
# Warmup Iteration   2: 795681.086 ops/s
# Warmup Iteration   3: 1008375.841 ops/s
# Warmup Iteration   4: 1010602.444 ops/s
# Warmup Iteration   5: 1007115.418 ops/s
# Warmup Iteration   6: 1005846.808 ops/s
# Warmup Iteration   7: 1008759.630 ops/s
# Warmup Iteration   8: 1004862.099 ops/s
# Warmup Iteration   9: 931758.359 ops/s
# Warmup Iteration  10: 917860.349 ops/s
# Warmup Iteration  11: 1008901.261 ops/s
# Warmup Iteration  12: 1006933.183 ops/s
# Warmup Iteration  13: 1011739.438 ops/s
# Warmup Iteration  14: 1006873.654 ops/s
# Warmup Iteration  15: 1007184.687 ops/s
# Warmup Iteration  16: 1008314.091 ops/s
# Warmup Iteration  17: 1070467.145 ops/s
# Warmup Iteration  18: 1072591.520 ops/s
# Warmup Iteration  19: 1073852.724 ops/s
# Warmup Iteration  20: 1072255.514 ops/s
# Warmup Iteration  21: 1070622.014 ops/s
# Warmup Iteration  22: 1071814.936 ops/s
# Warmup Iteration  23: 1074110.477 ops/s
# Warmup Iteration  24: 1070092.480 ops/s
# Warmup Iteration  25: 1065206.737 ops/s
# Warmup Iteration  26: 1069915.232 ops/s
# Warmup Iteration  27: 1070033.779 ops/s
# Warmup Iteration  28: 1071724.356 ops/s
# Warmup Iteration  29: 1071690.665 ops/s
# Warmup Iteration  30: 1067840.860 ops/s
Iteration   1: 1070287.997 ops/s
Iteration   2: 1069711.103 ops/s
Iteration   3: 1071899.857 ops/s
Iteration   4: 1072838.036 ops/s
Iteration   5: 1077092.356 ops/s
Iteration   6: 1074164.514 ops/s
Iteration   7: 1069942.789 ops/s
Iteration   8: 1071030.642 ops/s
Iteration   9: 1073204.029 ops/s
Iteration  10: 1073414.318 ops/s
Iteration  11: 1071145.499 ops/s
Iteration  12: 1074739.494 ops/s
Iteration  13: 1068008.648 ops/s
Iteration  14: 1070497.060 ops/s
Iteration  15: 1072488.287 ops/s
Iteration  16: 1071418.407 ops/s
Iteration  17: 1073447.028 ops/s
Iteration  18: 1069168.834 ops/s
Iteration  19: 1072151.830 ops/s
Iteration  20: 1075465.318 ops/s
Iteration  21: 1057871.547 ops/s
Iteration  22: 1049482.562 ops/s
Iteration  23: 1071322.803 ops/s
Iteration  24: 1073850.752 ops/s
Iteration  25: 1068899.209 ops/s
Iteration  26: 1074223.653 ops/s
Iteration  27: 1072846.660 ops/s
Iteration  28: 1071603.715 ops/s
Iteration  29: 1073140.244 ops/s
Iteration  30: 1069593.914 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_withAll":
  1070831.703 ±(99.9%) 3485.711 ops/s [Average]
  (min, avg, max) = (1049482.562, 1070831.703, 1077092.356), stdev = 5217.249
  CI (99.9%): [1067345.992, 1074317.415] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_withAll  thrpt   30  1070831.703 ± 3485.711  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_without$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_without

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 670739.090 ops/s
# Warmup Iteration   2: 771360.243 ops/s
# Warmup Iteration   3: 987957.258 ops/s
# Warmup Iteration   4: 990015.558 ops/s
# Warmup Iteration   5: 986078.169 ops/s
# Warmup Iteration   6: 968374.094 ops/s
# Warmup Iteration   7: 975900.784 ops/s
# Warmup Iteration   8: 987244.942 ops/s
# Warmup Iteration   9: 973282.810 ops/s
# Warmup Iteration  10: 832472.017 ops/s
# Warmup Iteration  11: 986808.691 ops/s
# Warmup Iteration  12: 985418.565 ops/s
# Warmup Iteration  13: 985300.257 ops/s
# Warmup Iteration  14: 986310.508 ops/s
# Warmup Iteration  15: 986325.927 ops/s
# Warmup Iteration  16: 988718.568 ops/s
# Warmup Iteration  17: 1057486.319 ops/s
# Warmup Iteration  18: 1056090.988 ops/s
# Warmup Iteration  19: 1055407.248 ops/s
# Warmup Iteration  20: 1054034.076 ops/s
# Warmup Iteration  21: 1044093.976 ops/s
# Warmup Iteration  22: 1058175.474 ops/s
# Warmup Iteration  23: 1050674.169 ops/s
# Warmup Iteration  24: 1053041.843 ops/s
# Warmup Iteration  25: 1056835.692 ops/s
# Warmup Iteration  26: 1044727.135 ops/s
# Warmup Iteration  27: 1051626.085 ops/s
# Warmup Iteration  28: 1052060.636 ops/s
# Warmup Iteration  29: 1055175.372 ops/s
# Warmup Iteration  30: 1056155.750 ops/s
Iteration   1: 1060568.812 ops/s
Iteration   2: 1050761.401 ops/s
Iteration   3: 1051386.012 ops/s
Iteration   4: 1054643.159 ops/s
Iteration   5: 1058598.396 ops/s
Iteration   6: 1044749.245 ops/s
Iteration   7: 1056125.617 ops/s
Iteration   8: 1055152.713 ops/s
Iteration   9: 1050841.012 ops/s
Iteration  10: 1057701.534 ops/s
Iteration  11: 1056938.468 ops/s
Iteration  12: 1052773.699 ops/s
Iteration  13: 1049422.537 ops/s
Iteration  14: 1050705.278 ops/s
Iteration  15: 1047011.569 ops/s
Iteration  16: 1060075.894 ops/s
Iteration  17: 1056838.069 ops/s
Iteration  18: 1050041.511 ops/s
Iteration  19: 1054927.495 ops/s
Iteration  20: 1059456.126 ops/s
Iteration  21: 1058347.541 ops/s
Iteration  22: 1052562.916 ops/s
Iteration  23: 1056069.415 ops/s
Iteration  24: 1058384.635 ops/s
Iteration  25: 1051651.324 ops/s
Iteration  26: 1056233.964 ops/s
Iteration  27: 1054680.881 ops/s
Iteration  28: 1053710.884 ops/s
Iteration  29: 1054198.188 ops/s
Iteration  30: 1057508.751 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_without":
  1054402.235 ±(99.9%) 2608.957 ops/s [Average]
  (min, avg, max) = (1044749.245, 1054402.235, 1060568.812), stdev = 3904.964
  CI (99.9%): [1051793.278, 1057011.192] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_without  thrpt   30  1054402.235 ± 2608.957  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_withoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_withoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 679594.746 ops/s
# Warmup Iteration   2: 785515.738 ops/s
# Warmup Iteration   3: 1007105.469 ops/s
# Warmup Iteration   4: 1008422.473 ops/s
# Warmup Iteration   5: 1012098.670 ops/s
# Warmup Iteration   6: 1011197.807 ops/s
# Warmup Iteration   7: 1005483.970 ops/s
# Warmup Iteration   8: 1006466.848 ops/s
# Warmup Iteration   9: 911091.206 ops/s
# Warmup Iteration  10: 934433.270 ops/s
# Warmup Iteration  11: 1006251.025 ops/s
# Warmup Iteration  12: 1007105.497 ops/s
# Warmup Iteration  13: 1008272.411 ops/s
# Warmup Iteration  14: 1009707.436 ops/s
# Warmup Iteration  15: 1012051.194 ops/s
# Warmup Iteration  16: 1008744.399 ops/s
# Warmup Iteration  17: 1075203.897 ops/s
# Warmup Iteration  18: 1069678.224 ops/s
# Warmup Iteration  19: 1070602.400 ops/s
# Warmup Iteration  20: 1075269.394 ops/s
# Warmup Iteration  21: 1072794.750 ops/s
# Warmup Iteration  22: 1063466.397 ops/s
# Warmup Iteration  23: 1073674.828 ops/s
# Warmup Iteration  24: 1071133.173 ops/s
# Warmup Iteration  25: 1071971.608 ops/s
# Warmup Iteration  26: 1074492.103 ops/s
# Warmup Iteration  27: 1073062.853 ops/s
# Warmup Iteration  28: 1071272.678 ops/s
# Warmup Iteration  29: 1071130.670 ops/s
# Warmup Iteration  30: 1074745.674 ops/s
Iteration   1: 1072326.626 ops/s
Iteration   2: 1066709.709 ops/s
Iteration   3: 1071569.859 ops/s
Iteration   4: 1072685.970 ops/s
Iteration   5: 1073604.828 ops/s
Iteration   6: 1073482.769 ops/s
Iteration   7: 1070757.467 ops/s
Iteration   8: 1072474.915 ops/s
Iteration   9: 1072284.512 ops/s
Iteration  10: 1070852.710 ops/s
Iteration  11: 1076891.946 ops/s
Iteration  12: 1075016.537 ops/s
Iteration  13: 1057440.350 ops/s
Iteration  14: 1071432.992 ops/s
Iteration  15: 1072204.934 ops/s
Iteration  16: 1072442.397 ops/s
Iteration  17: 1074600.341 ops/s
Iteration  18: 1073849.108 ops/s
Iteration  19: 1072094.646 ops/s
Iteration  20: 1076308.760 ops/s
Iteration  21: 1073663.415 ops/s
Iteration  22: 1072199.895 ops/s
Iteration  23: 1072956.350 ops/s
Iteration  24: 1070153.053 ops/s
Iteration  25: 1071379.400 ops/s
Iteration  26: 1077388.631 ops/s
Iteration  27: 1056592.891 ops/s
Iteration  28: 1070366.092 ops/s
Iteration  29: 1075166.763 ops/s
Iteration  30: 1070502.380 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_withoutAll":
  1071646.675 ±(99.9%) 3029.201 ops/s [Average]
  (min, avg, max) = (1056592.891, 1071646.675, 1077388.631), stdev = 4533.966
  CI (99.9%): [1068617.473, 1074675.876] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
UnmodifiableDoubleBooleanMapValuesTest._Benchmark.benchmark_withoutAll  thrpt   30  1071646.675 ± 3029.201  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 700476.749 ops/s
# Warmup Iteration   2: 791245.838 ops/s
# Warmup Iteration   3: 1023895.111 ops/s
# Warmup Iteration   4: 1028374.623 ops/s
# Warmup Iteration   5: 1026664.278 ops/s
# Warmup Iteration   6: 1018779.912 ops/s
# Warmup Iteration   7: 1024962.900 ops/s
# Warmup Iteration   8: 1022661.046 ops/s
# Warmup Iteration   9: 1027242.788 ops/s
# Warmup Iteration  10: 851194.006 ops/s
# Warmup Iteration  11: 1028050.346 ops/s
# Warmup Iteration  12: 1024952.465 ops/s
# Warmup Iteration  13: 1026745.441 ops/s
# Warmup Iteration  14: 1025331.085 ops/s
# Warmup Iteration  15: 1025662.976 ops/s
# Warmup Iteration  16: 1027978.925 ops/s
# Warmup Iteration  17: 1090038.000 ops/s
# Warmup Iteration  18: 1087575.060 ops/s
# Warmup Iteration  19: 1090653.995 ops/s
# Warmup Iteration  20: 1081568.633 ops/s
# Warmup Iteration  21: 1083461.658 ops/s
# Warmup Iteration  22: 1089617.417 ops/s
# Warmup Iteration  23: 1080342.662 ops/s
# Warmup Iteration  24: 1091586.216 ops/s
# Warmup Iteration  25: 1082686.763 ops/s
# Warmup Iteration  26: 1089222.816 ops/s
# Warmup Iteration  27: 1088150.930 ops/s
# Warmup Iteration  28: 1088840.904 ops/s
# Warmup Iteration  29: 1090630.154 ops/s
# Warmup Iteration  30: 1089076.974 ops/s
Iteration   1: 1086903.533 ops/s
Iteration   2: 1093082.638 ops/s
Iteration   3: 1092335.496 ops/s
Iteration   4: 1085534.198 ops/s
Iteration   5: 1085492.051 ops/s
Iteration   6: 1086179.672 ops/s
Iteration   7: 1091692.935 ops/s
Iteration   8: 1089495.525 ops/s
Iteration   9: 1087774.590 ops/s
Iteration  10: 1091628.057 ops/s
Iteration  11: 1091139.515 ops/s
Iteration  12: 1086604.571 ops/s
Iteration  13: 1091589.820 ops/s
Iteration  14: 1090670.754 ops/s
Iteration  15: 1082185.341 ops/s
Iteration  16: 1089546.891 ops/s
Iteration  17: 1089150.762 ops/s
Iteration  18: 1086349.604 ops/s
Iteration  19: 1089289.902 ops/s
Iteration  20: 1090581.223 ops/s
Iteration  21: 1088530.592 ops/s
Iteration  22: 1085515.471 ops/s
Iteration  23: 1083466.998 ops/s
Iteration  24: 1088776.820 ops/s
Iteration  25: 1092629.693 ops/s
Iteration  26: 1084432.040 ops/s
Iteration  27: 1075623.855 ops/s
Iteration  28: 1089703.933 ops/s
Iteration  29: 1094074.665 ops/s
Iteration  30: 1089618.849 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_add":
  1088320.000 ±(99.9%) 2558.571 ops/s [Average]
  (min, avg, max) = (1075623.855, 1088320.000, 1094074.665), stdev = 3829.548
  CI (99.9%): [1085761.429, 1090878.570] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_add  thrpt   30  1088320.000 ± 2558.571  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_addAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_addAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 695014.126 ops/s
# Warmup Iteration   2: 785768.437 ops/s
# Warmup Iteration   3: 1001507.743 ops/s
# Warmup Iteration   4: 1008930.181 ops/s
# Warmup Iteration   5: 1006419.521 ops/s
# Warmup Iteration   6: 1009850.796 ops/s
# Warmup Iteration   7: 1008722.739 ops/s
# Warmup Iteration   8: 1006747.967 ops/s
# Warmup Iteration   9: 1000014.075 ops/s
# Warmup Iteration  10: 831389.190 ops/s
# Warmup Iteration  11: 1006943.664 ops/s
# Warmup Iteration  12: 1009226.025 ops/s
# Warmup Iteration  13: 998289.555 ops/s
# Warmup Iteration  14: 1012822.113 ops/s
# Warmup Iteration  15: 1010618.182 ops/s
# Warmup Iteration  16: 1010515.708 ops/s
# Warmup Iteration  17: 1079008.498 ops/s
# Warmup Iteration  18: 1076107.902 ops/s
# Warmup Iteration  19: 1079129.544 ops/s
# Warmup Iteration  20: 1078788.252 ops/s
# Warmup Iteration  21: 1067638.339 ops/s
# Warmup Iteration  22: 1078192.009 ops/s
# Warmup Iteration  23: 1076106.979 ops/s
# Warmup Iteration  24: 1077014.653 ops/s
# Warmup Iteration  25: 1078346.041 ops/s
# Warmup Iteration  26: 1067254.895 ops/s
# Warmup Iteration  27: 1079279.819 ops/s
# Warmup Iteration  28: 1081795.435 ops/s
# Warmup Iteration  29: 1080086.848 ops/s
# Warmup Iteration  30: 1080691.124 ops/s
Iteration   1: 1078782.545 ops/s
Iteration   2: 1078490.223 ops/s
Iteration   3: 1084636.083 ops/s
Iteration   4: 1081302.604 ops/s
Iteration   5: 1064484.120 ops/s
Iteration   6: 1075897.537 ops/s
Iteration   7: 1079008.069 ops/s
Iteration   8: 1084966.020 ops/s
Iteration   9: 1079192.906 ops/s
Iteration  10: 1073832.139 ops/s
Iteration  11: 1069926.738 ops/s
Iteration  12: 1078072.613 ops/s
Iteration  13: 1073499.126 ops/s
Iteration  14: 1080454.093 ops/s
Iteration  15: 1067185.721 ops/s
Iteration  16: 1077714.552 ops/s
Iteration  17: 1081858.939 ops/s
Iteration  18: 1079998.654 ops/s
Iteration  19: 1080447.234 ops/s
Iteration  20: 1081273.623 ops/s
Iteration  21: 1080839.160 ops/s
Iteration  22: 1074935.390 ops/s
Iteration  23: 1073526.784 ops/s
Iteration  24: 1079600.732 ops/s
Iteration  25: 1077185.036 ops/s
Iteration  26: 1083169.547 ops/s
Iteration  27: 1083975.385 ops/s
Iteration  28: 1078133.306 ops/s
Iteration  29: 1062989.826 ops/s
Iteration  30: 1075718.504 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_addAllArray":
  1077369.907 ±(99.9%) 3674.210 ops/s [Average]
  (min, avg, max) = (1062989.826, 1077369.907, 1084966.020), stdev = 5499.384
  CI (99.9%): [1073695.697, 1081044.117] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_addAllArray  thrpt   30  1077369.907 ± 3674.210  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_addAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_addAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 693710.136 ops/s
# Warmup Iteration   2: 784952.002 ops/s
# Warmup Iteration   3: 1016151.241 ops/s
# Warmup Iteration   4: 1017900.620 ops/s
# Warmup Iteration   5: 1011538.132 ops/s
# Warmup Iteration   6: 1016706.073 ops/s
# Warmup Iteration   7: 1010995.682 ops/s
# Warmup Iteration   8: 1008894.720 ops/s
# Warmup Iteration   9: 1013932.967 ops/s
# Warmup Iteration  10: 839453.985 ops/s
# Warmup Iteration  11: 1017195.754 ops/s
# Warmup Iteration  12: 1015597.128 ops/s
# Warmup Iteration  13: 1017721.185 ops/s
# Warmup Iteration  14: 1011570.850 ops/s
# Warmup Iteration  15: 1018514.751 ops/s
# Warmup Iteration  16: 1017700.887 ops/s
# Warmup Iteration  17: 1074544.737 ops/s
# Warmup Iteration  18: 1072035.203 ops/s
# Warmup Iteration  19: 1070381.705 ops/s
# Warmup Iteration  20: 1070244.015 ops/s
# Warmup Iteration  21: 1063540.151 ops/s
# Warmup Iteration  22: 1075399.648 ops/s
# Warmup Iteration  23: 1071663.725 ops/s
# Warmup Iteration  24: 1073037.753 ops/s
# Warmup Iteration  25: 1069475.711 ops/s
# Warmup Iteration  26: 1058270.665 ops/s
# Warmup Iteration  27: 1075702.298 ops/s
# Warmup Iteration  28: 1074364.287 ops/s
# Warmup Iteration  29: 1072508.308 ops/s
# Warmup Iteration  30: 1073390.919 ops/s
Iteration   1: 1074457.143 ops/s
Iteration   2: 1070193.895 ops/s
Iteration   3: 1055527.363 ops/s
Iteration   4: 1071885.206 ops/s
Iteration   5: 1071306.817 ops/s
Iteration   6: 1073310.001 ops/s
Iteration   7: 1070327.336 ops/s
Iteration   8: 1076376.715 ops/s
Iteration   9: 1074524.217 ops/s
Iteration  10: 1066334.040 ops/s
Iteration  11: 1073732.937 ops/s
Iteration  12: 1076010.033 ops/s
Iteration  13: 1072407.739 ops/s
Iteration  14: 1074315.960 ops/s
Iteration  15: 1073250.355 ops/s
Iteration  16: 1072846.444 ops/s
Iteration  17: 1074044.993 ops/s
Iteration  18: 1073211.569 ops/s
Iteration  19: 1068237.756 ops/s
Iteration  20: 1069191.688 ops/s
Iteration  21: 1072378.766 ops/s
Iteration  22: 1075735.012 ops/s
Iteration  23: 1071299.650 ops/s
Iteration  24: 1054047.140 ops/s
Iteration  25: 1060359.548 ops/s
Iteration  26: 1071980.660 ops/s
Iteration  27: 1075383.096 ops/s
Iteration  28: 1071347.101 ops/s
Iteration  29: 1071842.105 ops/s
Iteration  30: 1070623.785 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_addAllIterable":
  1070882.969 ±(99.9%) 3609.894 ops/s [Average]
  (min, avg, max) = (1054047.140, 1070882.969, 1076376.715), stdev = 5403.119
  CI (99.9%): [1067273.075, 1074492.863] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score      Error  Units
UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_addAllIterable  thrpt   30  1070882.969 ± 3609.894  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1214127.009 ops/s
# Warmup Iteration   2: 2592772.130 ops/s
# Warmup Iteration   3: 2179780.978 ops/s
# Warmup Iteration   4: 2582303.752 ops/s
# Warmup Iteration   5: 2600329.227 ops/s
# Warmup Iteration   6: 2599767.265 ops/s
# Warmup Iteration   7: 2598884.042 ops/s
# Warmup Iteration   8: 2596793.440 ops/s
# Warmup Iteration   9: 2609417.526 ops/s
# Warmup Iteration  10: 2599063.360 ops/s
# Warmup Iteration  11: 2602171.947 ops/s
# Warmup Iteration  12: 2596001.959 ops/s
# Warmup Iteration  13: 2558316.013 ops/s
# Warmup Iteration  14: 2599212.773 ops/s
# Warmup Iteration  15: 2604911.170 ops/s
# Warmup Iteration  16: 2600118.453 ops/s
# Warmup Iteration  17: 2601195.882 ops/s
# Warmup Iteration  18: 2599945.310 ops/s
# Warmup Iteration  19: 2601309.839 ops/s
# Warmup Iteration  20: 2599629.197 ops/s
# Warmup Iteration  21: 2605759.378 ops/s
# Warmup Iteration  22: 2593627.420 ops/s
# Warmup Iteration  23: 2598070.797 ops/s
# Warmup Iteration  24: 2596219.882 ops/s
# Warmup Iteration  25: 2602027.810 ops/s
# Warmup Iteration  26: 2606350.386 ops/s
# Warmup Iteration  27: 2602392.382 ops/s
# Warmup Iteration  28: 2580263.270 ops/s
# Warmup Iteration  29: 2603178.561 ops/s
# Warmup Iteration  30: 2604665.125 ops/s
Iteration   1: 2595973.588 ops/s
Iteration   2: 2607960.130 ops/s
Iteration   3: 2601997.431 ops/s
Iteration   4: 2617048.766 ops/s
Iteration   5: 2605435.479 ops/s
Iteration   6: 2593766.627 ops/s
Iteration   7: 2607056.524 ops/s
Iteration   8: 2598498.938 ops/s
Iteration   9: 2606190.288 ops/s
Iteration  10: 2604147.457 ops/s
Iteration  11: 2607039.223 ops/s
Iteration  12: 2606264.952 ops/s
Iteration  13: 2600987.329 ops/s
Iteration  14: 2593574.749 ops/s
Iteration  15: 2604057.378 ops/s
Iteration  16: 2594025.794 ops/s
Iteration  17: 2602222.932 ops/s
Iteration  18: 2591788.829 ops/s
Iteration  19: 2594709.866 ops/s
Iteration  20: 2599975.959 ops/s
Iteration  21: 2610126.811 ops/s
Iteration  22: 2598123.890 ops/s
Iteration  23: 2597392.929 ops/s
Iteration  24: 2598108.253 ops/s
Iteration  25: 2603562.011 ops/s
Iteration  26: 2562342.822 ops/s
Iteration  27: 2568522.685 ops/s
Iteration  28: 2598819.477 ops/s
Iteration  29: 2610510.813 ops/s
Iteration  30: 2606141.422 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_allSatisfy":
  2599545.778 ±(99.9%) 7355.706 ops/s [Average]
  (min, avg, max) = (2562342.822, 2599545.778, 2617048.766), stdev = 11009.675
  CI (99.9%): [2592190.072, 2606901.484] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_allSatisfy  thrpt   30  2599545.778 ± 7355.706  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1353701.030 ops/s
# Warmup Iteration   2: 2867784.546 ops/s
# Warmup Iteration   3: 2393274.256 ops/s
# Warmup Iteration   4: 2876753.012 ops/s
# Warmup Iteration   5: 2877297.808 ops/s
# Warmup Iteration   6: 2873615.881 ops/s
# Warmup Iteration   7: 2872439.702 ops/s
# Warmup Iteration   8: 2866362.499 ops/s
# Warmup Iteration   9: 2861787.585 ops/s
# Warmup Iteration  10: 2871234.836 ops/s
# Warmup Iteration  11: 2850486.812 ops/s
# Warmup Iteration  12: 2851094.243 ops/s
# Warmup Iteration  13: 2875960.663 ops/s
# Warmup Iteration  14: 2883334.968 ops/s
# Warmup Iteration  15: 2880404.551 ops/s
# Warmup Iteration  16: 2875928.100 ops/s
# Warmup Iteration  17: 2851801.401 ops/s
# Warmup Iteration  18: 2873489.148 ops/s
# Warmup Iteration  19: 2858560.667 ops/s
# Warmup Iteration  20: 2872765.573 ops/s
# Warmup Iteration  21: 2870712.425 ops/s
# Warmup Iteration  22: 2878806.537 ops/s
# Warmup Iteration  23: 2875695.274 ops/s
# Warmup Iteration  24: 2877286.147 ops/s
# Warmup Iteration  25: 2884610.351 ops/s
# Warmup Iteration  26: 2874843.926 ops/s
# Warmup Iteration  27: 2884503.270 ops/s
# Warmup Iteration  28: 2879297.571 ops/s
# Warmup Iteration  29: 2880434.777 ops/s
# Warmup Iteration  30: 2884993.596 ops/s
Iteration   1: 2878575.586 ops/s
Iteration   2: 2883043.285 ops/s
Iteration   3: 2866640.193 ops/s
Iteration   4: 2871928.860 ops/s
Iteration   5: 2887151.672 ops/s
Iteration   6: 2869927.875 ops/s
Iteration   7: 2877610.927 ops/s
Iteration   8: 2867311.434 ops/s
Iteration   9: 2877194.499 ops/s
Iteration  10: 2862046.375 ops/s
Iteration  11: 2889904.597 ops/s
Iteration  12: 2888772.543 ops/s
Iteration  13: 2866780.288 ops/s
Iteration  14: 2877262.375 ops/s
Iteration  15: 2873270.165 ops/s
Iteration  16: 2882293.655 ops/s
Iteration  17: 2861557.719 ops/s
Iteration  18: 2871993.617 ops/s
Iteration  19: 2870763.592 ops/s
Iteration  20: 2880083.695 ops/s
Iteration  21: 2859925.546 ops/s
Iteration  22: 2867977.229 ops/s
Iteration  23: 2874301.530 ops/s
Iteration  24: 2869933.295 ops/s
Iteration  25: 2850824.488 ops/s
Iteration  26: 2876073.917 ops/s
Iteration  27: 2877172.739 ops/s
Iteration  28: 2886709.478 ops/s
Iteration  29: 2885713.283 ops/s
Iteration  30: 2883738.545 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_anySatisfy":
  2874549.433 ±(99.9%) 6275.016 ops/s [Average]
  (min, avg, max) = (2850824.488, 2874549.433, 2889904.597), stdev = 9392.150
  CI (99.9%): [2868274.417, 2880824.450] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_anySatisfy  thrpt   30  2874549.433 ± 6275.016  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 966523.787 ops/s
# Warmup Iteration   2: 2046660.207 ops/s
# Warmup Iteration   3: 2083029.551 ops/s
# Warmup Iteration   4: 1728362.481 ops/s
# Warmup Iteration   5: 2067670.925 ops/s
# Warmup Iteration   6: 2082142.777 ops/s
# Warmup Iteration   7: 2074027.294 ops/s
# Warmup Iteration   8: 2075741.860 ops/s
# Warmup Iteration   9: 2045229.976 ops/s
# Warmup Iteration  10: 2072741.990 ops/s
# Warmup Iteration  11: 2053087.105 ops/s
# Warmup Iteration  12: 2078875.541 ops/s
# Warmup Iteration  13: 2071825.176 ops/s
# Warmup Iteration  14: 2042044.385 ops/s
# Warmup Iteration  15: 2065888.874 ops/s
# Warmup Iteration  16: 2033910.696 ops/s
# Warmup Iteration  17: 2052644.339 ops/s
# Warmup Iteration  18: 2055531.621 ops/s
# Warmup Iteration  19: 2045155.611 ops/s
# Warmup Iteration  20: 2055532.322 ops/s
# Warmup Iteration  21: 2036913.496 ops/s
# Warmup Iteration  22: 2076031.940 ops/s
# Warmup Iteration  23: 2042426.315 ops/s
# Warmup Iteration  24: 2061167.204 ops/s
# Warmup Iteration  25: 2055162.575 ops/s
# Warmup Iteration  26: 2058701.569 ops/s
# Warmup Iteration  27: 2064442.281 ops/s
# Warmup Iteration  28: 2043203.011 ops/s
# Warmup Iteration  29: 2078316.629 ops/s
# Warmup Iteration  30: 2049762.421 ops/s
Iteration   1: 2059364.309 ops/s
Iteration   2: 2038613.466 ops/s
Iteration   3: 2060216.806 ops/s
Iteration   4: 2076712.310 ops/s
Iteration   5: 2039828.751 ops/s
Iteration   6: 2050835.274 ops/s
Iteration   7: 2044034.465 ops/s
Iteration   8: 2060311.913 ops/s
Iteration   9: 2070228.392 ops/s
Iteration  10: 2039467.250 ops/s
Iteration  11: 2085249.918 ops/s
Iteration  12: 2050606.132 ops/s
Iteration  13: 2037326.266 ops/s
Iteration  14: 2075149.746 ops/s
Iteration  15: 2054536.901 ops/s
Iteration  16: 2048609.935 ops/s
Iteration  17: 2077132.442 ops/s
Iteration  18: 2076892.710 ops/s
Iteration  19: 2079849.519 ops/s
Iteration  20: 2069658.970 ops/s
Iteration  21: 2061292.426 ops/s
Iteration  22: 2090929.655 ops/s
Iteration  23: 2071645.532 ops/s
Iteration  24: 2071591.164 ops/s
Iteration  25: 2061756.405 ops/s
Iteration  26: 2089877.473 ops/s
Iteration  27: 2086494.718 ops/s
Iteration  28: 2049693.194 ops/s
Iteration  29: 2077890.501 ops/s
Iteration  30: 2057065.283 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_appendString":
  2063762.061 ±(99.9%) 10773.512 ops/s [Average]
  (min, avg, max) = (2037326.266, 2063762.061, 2090929.655), stdev = 16125.287
  CI (99.9%): [2052988.549, 2074535.573] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_appendString  thrpt   30  2063762.061 ± 10773.512  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_asLazy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_asLazy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2873481.396 ops/s
# Warmup Iteration   2: 5212608.415 ops/s
# Warmup Iteration   3: 5648422.658 ops/s
# Warmup Iteration   4: 5653360.363 ops/s
# Warmup Iteration   5: 4775072.623 ops/s
# Warmup Iteration   6: 5529705.502 ops/s
# Warmup Iteration   7: 5643208.802 ops/s
# Warmup Iteration   8: 5648792.259 ops/s
# Warmup Iteration   9: 5643118.143 ops/s
# Warmup Iteration  10: 5669712.560 ops/s
# Warmup Iteration  11: 5657242.784 ops/s
# Warmup Iteration  12: 5665677.003 ops/s
# Warmup Iteration  13: 5654014.054 ops/s
# Warmup Iteration  14: 5652803.493 ops/s
# Warmup Iteration  15: 5656112.207 ops/s
# Warmup Iteration  16: 5661592.911 ops/s
# Warmup Iteration  17: 5670802.684 ops/s
# Warmup Iteration  18: 5660709.299 ops/s
# Warmup Iteration  19: 5668790.092 ops/s
# Warmup Iteration  20: 5654328.469 ops/s
# Warmup Iteration  21: 5638827.319 ops/s
# Warmup Iteration  22: 5675110.255 ops/s
# Warmup Iteration  23: 5655360.203 ops/s
# Warmup Iteration  24: 5605918.493 ops/s
# Warmup Iteration  25: 5665031.050 ops/s
# Warmup Iteration  26: 5656519.535 ops/s
# Warmup Iteration  27: 5655186.733 ops/s
# Warmup Iteration  28: 5658322.070 ops/s
# Warmup Iteration  29: 5658454.995 ops/s
# Warmup Iteration  30: 5650889.112 ops/s
Iteration   1: 5660704.002 ops/s
Iteration   2: 5569831.411 ops/s
Iteration   3: 5647361.954 ops/s
Iteration   4: 5664493.167 ops/s
Iteration   5: 5667660.487 ops/s
Iteration   6: 5642515.479 ops/s
Iteration   7: 5654070.089 ops/s
Iteration   8: 5668459.819 ops/s
Iteration   9: 5644360.775 ops/s
Iteration  10: 5653908.157 ops/s
Iteration  11: 5657379.777 ops/s
Iteration  12: 5645493.063 ops/s
Iteration  13: 5663596.685 ops/s
Iteration  14: 5644299.357 ops/s
Iteration  15: 5639000.016 ops/s
Iteration  16: 5671991.216 ops/s
Iteration  17: 5650775.718 ops/s
Iteration  18: 5654968.788 ops/s
Iteration  19: 5659614.964 ops/s
Iteration  20: 5651689.338 ops/s
Iteration  21: 5677487.085 ops/s
Iteration  22: 5650996.391 ops/s
Iteration  23: 5647859.079 ops/s
Iteration  24: 5587331.775 ops/s
Iteration  25: 5645609.692 ops/s
Iteration  26: 5644242.028 ops/s
Iteration  27: 5658777.368 ops/s
Iteration  28: 5643577.843 ops/s
Iteration  29: 5672424.071 ops/s
Iteration  30: 5652719.319 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_asLazy":
  5649773.297 ±(99.9%) 14635.560 ops/s [Average]
  (min, avg, max) = (5569831.411, 5649773.297, 5677487.085), stdev = 21905.818
  CI (99.9%): [5635137.738, 5664408.857] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_asLazy  thrpt   30  5649773.297 ± 14635.560  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_asSynchronized$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_asSynchronized

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13712396.174 ops/s
# Warmup Iteration   2: 22128610.914 ops/s
# Warmup Iteration   3: 26336374.618 ops/s
# Warmup Iteration   4: 26177083.927 ops/s
# Warmup Iteration   5: 26339851.114 ops/s
# Warmup Iteration   6: 26194453.151 ops/s
# Warmup Iteration   7: 26294743.990 ops/s
# Warmup Iteration   8: 26284240.897 ops/s
# Warmup Iteration   9: 26233891.416 ops/s
# Warmup Iteration  10: 26346932.392 ops/s
# Warmup Iteration  11: 26296272.111 ops/s
# Warmup Iteration  12: 26125744.617 ops/s
# Warmup Iteration  13: 26294018.013 ops/s
# Warmup Iteration  14: 26210311.719 ops/s
# Warmup Iteration  15: 26108326.556 ops/s
# Warmup Iteration  16: 26326450.570 ops/s
# Warmup Iteration  17: 26109830.941 ops/s
# Warmup Iteration  18: 26305280.331 ops/s
# Warmup Iteration  19: 26165714.883 ops/s
# Warmup Iteration  20: 26167025.153 ops/s
# Warmup Iteration  21: 26246314.613 ops/s
# Warmup Iteration  22: 25944743.741 ops/s
# Warmup Iteration  23: 26242494.138 ops/s
# Warmup Iteration  24: 26364413.024 ops/s
# Warmup Iteration  25: 26257023.512 ops/s
# Warmup Iteration  26: 26275294.667 ops/s
# Warmup Iteration  27: 26251537.243 ops/s
# Warmup Iteration  28: 26270420.997 ops/s
# Warmup Iteration  29: 26296358.853 ops/s
# Warmup Iteration  30: 26242138.135 ops/s
Iteration   1: 26240816.560 ops/s
Iteration   2: 26075990.843 ops/s
Iteration   3: 26063996.581 ops/s
Iteration   4: 26077126.087 ops/s
Iteration   5: 26277783.344 ops/s
Iteration   6: 26361087.010 ops/s
Iteration   7: 26161313.283 ops/s
Iteration   8: 25631582.855 ops/s
Iteration   9: 26360426.911 ops/s
Iteration  10: 26494644.216 ops/s
Iteration  11: 26426276.020 ops/s
Iteration  12: 26236171.694 ops/s
Iteration  13: 26296453.380 ops/s
Iteration  14: 26182392.981 ops/s
Iteration  15: 26235956.726 ops/s
Iteration  16: 26316039.796 ops/s
Iteration  17: 26358146.355 ops/s
Iteration  18: 26347275.118 ops/s
Iteration  19: 26181212.387 ops/s
Iteration  20: 26203529.016 ops/s
Iteration  21: 26172352.124 ops/s
Iteration  22: 26398071.625 ops/s
Iteration  23: 26118438.718 ops/s
Iteration  24: 26223627.939 ops/s
Iteration  25: 26407806.415 ops/s
Iteration  26: 26518570.869 ops/s
Iteration  27: 26496588.455 ops/s
Iteration  28: 26560656.074 ops/s
Iteration  29: 26306768.511 ops/s
Iteration  30: 26435184.258 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_asSynchronized":
  26272209.538 ±(99.9%) 121807.494 ops/s [Average]
  (min, avg, max) = (25631582.855, 26272209.538, 26560656.074), stdev = 182315.736
  CI (99.9%): [26150402.045, 26394017.032] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt         Score        Error  Units
UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_asSynchronized  thrpt   30  26272209.538 ± 121807.494  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_asUnmodifiable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_asUnmodifiable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5014786.118 ops/s
# Warmup Iteration   2: 10133546.367 ops/s
# Warmup Iteration   3: 8601674.585 ops/s
# Warmup Iteration   4: 10156346.327 ops/s
# Warmup Iteration   5: 10194717.926 ops/s
# Warmup Iteration   6: 10162247.532 ops/s
# Warmup Iteration   7: 10163918.184 ops/s
# Warmup Iteration   8: 10172073.360 ops/s
# Warmup Iteration   9: 10180070.641 ops/s
# Warmup Iteration  10: 10159213.221 ops/s
# Warmup Iteration  11: 10172536.626 ops/s
# Warmup Iteration  12: 10102648.171 ops/s
# Warmup Iteration  13: 10188783.932 ops/s
# Warmup Iteration  14: 10172655.320 ops/s
# Warmup Iteration  15: 10118059.843 ops/s
# Warmup Iteration  16: 10179299.447 ops/s
# Warmup Iteration  17: 10177962.451 ops/s
# Warmup Iteration  18: 10182975.933 ops/s
# Warmup Iteration  19: 10160387.543 ops/s
# Warmup Iteration  20: 10160918.015 ops/s
# Warmup Iteration  21: 10180347.065 ops/s
# Warmup Iteration  22: 10195534.561 ops/s
# Warmup Iteration  23: 10192021.618 ops/s
# Warmup Iteration  24: 10098610.698 ops/s
# Warmup Iteration  25: 10203362.551 ops/s
# Warmup Iteration  26: 10195280.768 ops/s
# Warmup Iteration  27: 10171762.124 ops/s
# Warmup Iteration  28: 10173421.184 ops/s
# Warmup Iteration  29: 10133611.168 ops/s
# Warmup Iteration  30: 10175886.428 ops/s
Iteration   1: 10188184.932 ops/s
Iteration   2: 10161173.426 ops/s
Iteration   3: 10185089.066 ops/s
Iteration   4: 10203170.522 ops/s
Iteration   5: 10201534.070 ops/s
Iteration   6: 10180688.802 ops/s
Iteration   7: 10174895.603 ops/s
Iteration   8: 10190308.190 ops/s
Iteration   9: 10200526.832 ops/s
Iteration  10: 10171694.024 ops/s
Iteration  11: 10193118.367 ops/s
Iteration  12: 10163954.261 ops/s
Iteration  13: 10166710.207 ops/s
Iteration  14: 10177513.356 ops/s
Iteration  15: 10207012.955 ops/s
Iteration  16: 10181012.734 ops/s
Iteration  17: 10166733.288 ops/s
Iteration  18: 10132443.543 ops/s
Iteration  19: 10029189.345 ops/s
Iteration  20: 10210235.470 ops/s
Iteration  21: 10209593.712 ops/s
Iteration  22: 10192810.080 ops/s
Iteration  23: 10171848.854 ops/s
Iteration  24: 10176094.753 ops/s
Iteration  25: 10193441.255 ops/s
Iteration  26: 10209709.864 ops/s
Iteration  27: 10175261.862 ops/s
Iteration  28: 10166831.017 ops/s
Iteration  29: 10184786.913 ops/s
Iteration  30: 10190915.390 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_asUnmodifiable":
  10178549.423 ±(99.9%) 22182.931 ops/s [Average]
  (min, avg, max) = (10029189.345, 10178549.423, 10210235.470), stdev = 33202.369
  CI (99.9%): [10156366.492, 10200732.354] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt         Score       Error  Units
UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_asUnmodifiable  thrpt   30  10178549.423 ± 22182.931  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_booleanIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_booleanIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 539156.505 ops/s
# Warmup Iteration   2: 578850.693 ops/s
# Warmup Iteration   3: 781787.332 ops/s
# Warmup Iteration   4: 783896.861 ops/s
# Warmup Iteration   5: 782948.744 ops/s
# Warmup Iteration   6: 784344.271 ops/s
# Warmup Iteration   7: 782386.873 ops/s
# Warmup Iteration   8: 783263.100 ops/s
# Warmup Iteration   9: 781404.989 ops/s
# Warmup Iteration  10: 783755.049 ops/s
# Warmup Iteration  11: 650536.503 ops/s
# Warmup Iteration  12: 785639.544 ops/s
# Warmup Iteration  13: 783096.280 ops/s
# Warmup Iteration  14: 783601.781 ops/s
# Warmup Iteration  15: 784412.304 ops/s
# Warmup Iteration  16: 783203.483 ops/s
# Warmup Iteration  17: 820511.772 ops/s
# Warmup Iteration  18: 820315.341 ops/s
# Warmup Iteration  19: 820045.633 ops/s
# Warmup Iteration  20: 823078.921 ops/s
# Warmup Iteration  21: 822972.211 ops/s
# Warmup Iteration  22: 820624.985 ops/s
# Warmup Iteration  23: 822914.801 ops/s
# Warmup Iteration  24: 818439.914 ops/s
# Warmup Iteration  25: 822002.189 ops/s
# Warmup Iteration  26: 822472.034 ops/s
# Warmup Iteration  27: 815777.851 ops/s
# Warmup Iteration  28: 823630.984 ops/s
# Warmup Iteration  29: 819683.740 ops/s
# Warmup Iteration  30: 822528.057 ops/s
Iteration   1: 820963.120 ops/s
Iteration   2: 806443.207 ops/s
Iteration   3: 822096.381 ops/s
Iteration   4: 821214.116 ops/s
Iteration   5: 820850.714 ops/s
Iteration   6: 819498.617 ops/s
Iteration   7: 822945.995 ops/s
Iteration   8: 823278.983 ops/s
Iteration   9: 821688.499 ops/s
Iteration  10: 823813.771 ops/s
Iteration  11: 821823.214 ops/s
Iteration  12: 819174.114 ops/s
Iteration  13: 818284.428 ops/s
Iteration  14: 824246.135 ops/s
Iteration  15: 819402.377 ops/s
Iteration  16: 823217.214 ops/s
Iteration  17: 820180.513 ops/s
Iteration  18: 820703.540 ops/s
Iteration  19: 822502.177 ops/s
Iteration  20: 808843.078 ops/s
Iteration  21: 820758.988 ops/s
Iteration  22: 821720.592 ops/s
Iteration  23: 811916.843 ops/s
Iteration  24: 821938.682 ops/s
Iteration  25: 822827.732 ops/s
Iteration  26: 820138.652 ops/s
Iteration  27: 824085.414 ops/s
Iteration  28: 824234.559 ops/s
Iteration  29: 821378.381 ops/s
Iteration  30: 823498.657 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_booleanIterator":
  820455.623 ±(99.9%) 2825.097 ops/s [Average]
  (min, avg, max) = (806443.207, 820455.623, 824246.135), stdev = 4228.472
  CI (99.9%): [817630.526, 823280.720] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_booleanIterator  thrpt   30  820455.623 ± 2825.097  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 673837.867 ops/s
# Warmup Iteration   2: 772898.232 ops/s
# Warmup Iteration   3: 977175.082 ops/s
# Warmup Iteration   4: 978327.322 ops/s
# Warmup Iteration   5: 973837.186 ops/s
# Warmup Iteration   6: 979952.559 ops/s
# Warmup Iteration   7: 979203.758 ops/s
# Warmup Iteration   8: 973728.395 ops/s
# Warmup Iteration   9: 956640.316 ops/s
# Warmup Iteration  10: 844795.271 ops/s
# Warmup Iteration  11: 976233.638 ops/s
# Warmup Iteration  12: 982458.192 ops/s
# Warmup Iteration  13: 981554.968 ops/s
# Warmup Iteration  14: 979578.454 ops/s
# Warmup Iteration  15: 979081.243 ops/s
# Warmup Iteration  16: 978032.547 ops/s
# Warmup Iteration  17: 1040355.082 ops/s
# Warmup Iteration  18: 1041511.493 ops/s
# Warmup Iteration  19: 1039248.862 ops/s
# Warmup Iteration  20: 1041118.780 ops/s
# Warmup Iteration  21: 1042192.580 ops/s
# Warmup Iteration  22: 1042918.161 ops/s
# Warmup Iteration  23: 1039326.891 ops/s
# Warmup Iteration  24: 1040883.056 ops/s
# Warmup Iteration  25: 1042186.517 ops/s
# Warmup Iteration  26: 1041432.893 ops/s
# Warmup Iteration  27: 1039174.438 ops/s
# Warmup Iteration  28: 1039060.786 ops/s
# Warmup Iteration  29: 1039470.831 ops/s
# Warmup Iteration  30: 1041515.278 ops/s
Iteration   1: 1040010.850 ops/s
Iteration   2: 1040441.536 ops/s
Iteration   3: 1037080.666 ops/s
Iteration   4: 1042816.179 ops/s
Iteration   5: 1041602.606 ops/s
Iteration   6: 1037468.986 ops/s
Iteration   7: 1044828.141 ops/s
Iteration   8: 1026777.591 ops/s
Iteration   9: 1038867.669 ops/s
Iteration  10: 1042166.559 ops/s
Iteration  11: 1039878.498 ops/s
Iteration  12: 1030427.366 ops/s
Iteration  13: 1040094.635 ops/s
Iteration  14: 1036999.978 ops/s
Iteration  15: 1037094.913 ops/s
Iteration  16: 1040760.693 ops/s
Iteration  17: 1043708.519 ops/s
Iteration  18: 1020044.526 ops/s
Iteration  19: 1041329.945 ops/s
Iteration  20: 1040203.632 ops/s
Iteration  21: 1040153.699 ops/s
Iteration  22: 1042125.054 ops/s
Iteration  23: 1040544.758 ops/s
Iteration  24: 1043787.720 ops/s
Iteration  25: 1044872.065 ops/s
Iteration  26: 1039085.293 ops/s
Iteration  27: 1041399.705 ops/s
Iteration  28: 1040822.101 ops/s
Iteration  29: 1042002.088 ops/s
Iteration  30: 1038409.870 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove":
  1039193.528 ±(99.9%) 3479.633 ops/s [Average]
  (min, avg, max) = (1020044.526, 1039193.528, 1044872.065), stdev = 5208.151
  CI (99.9%): [1035713.895, 1042673.161] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                Mode  Cnt        Score      Error  Units
UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove  thrpt   30  1039193.528 ± 3479.633  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_chunk$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_chunk

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 139452.991 ops/s
# Warmup Iteration   2: 237875.727 ops/s
# Warmup Iteration   3: 268893.620 ops/s
# Warmup Iteration   4: 270385.207 ops/s
# Warmup Iteration   5: 269403.380 ops/s
# Warmup Iteration   6: 226841.340 ops/s
# Warmup Iteration   7: 270876.619 ops/s
# Warmup Iteration   8: 270405.123 ops/s
# Warmup Iteration   9: 270565.994 ops/s
# Warmup Iteration  10: 269902.721 ops/s
# Warmup Iteration  11: 270468.094 ops/s
# Warmup Iteration  12: 270161.056 ops/s
# Warmup Iteration  13: 270764.026 ops/s
# Warmup Iteration  14: 270931.714 ops/s
# Warmup Iteration  15: 270447.475 ops/s
# Warmup Iteration  16: 270304.603 ops/s
# Warmup Iteration  17: 278053.143 ops/s
# Warmup Iteration  18: 276673.659 ops/s
# Warmup Iteration  19: 279065.373 ops/s
# Warmup Iteration  20: 278369.487 ops/s
# Warmup Iteration  21: 277969.379 ops/s
# Warmup Iteration  22: 277745.382 ops/s
# Warmup Iteration  23: 278511.758 ops/s
# Warmup Iteration  24: 278611.252 ops/s
# Warmup Iteration  25: 276265.736 ops/s
# Warmup Iteration  26: 278098.256 ops/s
# Warmup Iteration  27: 278041.438 ops/s
# Warmup Iteration  28: 277914.287 ops/s
# Warmup Iteration  29: 278678.468 ops/s
# Warmup Iteration  30: 278515.665 ops/s
Iteration   1: 273608.425 ops/s
Iteration   2: 273737.807 ops/s
Iteration   3: 278211.985 ops/s
Iteration   4: 279066.349 ops/s
Iteration   5: 278432.442 ops/s
Iteration   6: 278851.013 ops/s
Iteration   7: 278036.165 ops/s
Iteration   8: 278072.279 ops/s
Iteration   9: 278111.198 ops/s
Iteration  10: 278030.854 ops/s
Iteration  11: 277865.657 ops/s
Iteration  12: 278937.308 ops/s
Iteration  13: 279010.247 ops/s
Iteration  14: 279013.243 ops/s
Iteration  15: 278968.202 ops/s
Iteration  16: 278065.049 ops/s
Iteration  17: 277928.584 ops/s
Iteration  18: 278629.218 ops/s
Iteration  19: 274710.438 ops/s
Iteration  20: 277019.452 ops/s
Iteration  21: 278460.582 ops/s
Iteration  22: 278359.211 ops/s
Iteration  23: 278610.303 ops/s
Iteration  24: 278198.990 ops/s
Iteration  25: 277987.249 ops/s
Iteration  26: 278810.416 ops/s
Iteration  27: 278454.080 ops/s
Iteration  28: 278246.260 ops/s
Iteration  29: 277498.676 ops/s
Iteration  30: 278190.350 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_chunk":
  277904.068 ±(99.9%) 939.324 ops/s [Average]
  (min, avg, max) = (273608.425, 277904.068, 279066.349), stdev = 1405.936
  CI (99.9%): [276964.744, 278843.392] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score     Error  Units
UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_chunk  thrpt   30  277904.068 ± 939.324  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 711294.483 ops/s
# Warmup Iteration   2: 799383.355 ops/s
# Warmup Iteration   3: 1011993.284 ops/s
# Warmup Iteration   4: 1004007.687 ops/s
# Warmup Iteration   5: 1005701.682 ops/s
# Warmup Iteration   6: 1001850.591 ops/s
# Warmup Iteration   7: 1004898.745 ops/s
# Warmup Iteration   8: 1006000.266 ops/s
# Warmup Iteration   9: 973779.328 ops/s
# Warmup Iteration  10: 879828.226 ops/s
# Warmup Iteration  11: 1004740.820 ops/s
# Warmup Iteration  12: 1003294.323 ops/s
# Warmup Iteration  13: 1005923.176 ops/s
# Warmup Iteration  14: 1002785.628 ops/s
# Warmup Iteration  15: 995536.044 ops/s
# Warmup Iteration  16: 1004668.933 ops/s
# Warmup Iteration  17: 1068885.163 ops/s
# Warmup Iteration  18: 1053917.019 ops/s
# Warmup Iteration  19: 1063848.711 ops/s
# Warmup Iteration  20: 1063162.905 ops/s
# Warmup Iteration  21: 1062189.704 ops/s
# Warmup Iteration  22: 1061924.277 ops/s
# Warmup Iteration  23: 1054524.228 ops/s
# Warmup Iteration  24: 1061704.276 ops/s
# Warmup Iteration  25: 1063977.080 ops/s
# Warmup Iteration  26: 1061495.764 ops/s
# Warmup Iteration  27: 1051768.073 ops/s
# Warmup Iteration  28: 1062764.511 ops/s
# Warmup Iteration  29: 1054300.625 ops/s
# Warmup Iteration  30: 1056652.473 ops/s
Iteration   1: 1059745.939 ops/s
Iteration   2: 1062755.679 ops/s
Iteration   3: 1063210.500 ops/s
Iteration   4: 1064786.002 ops/s
Iteration   5: 1065828.276 ops/s
Iteration   6: 1056594.516 ops/s
Iteration   7: 1063261.973 ops/s
Iteration   8: 1064320.323 ops/s
Iteration   9: 1058019.743 ops/s
Iteration  10: 1060862.538 ops/s
Iteration  11: 1057564.969 ops/s
Iteration  12: 1061445.529 ops/s
Iteration  13: 1062100.667 ops/s
Iteration  14: 1060875.657 ops/s
Iteration  15: 1059618.003 ops/s
Iteration  16: 1069433.874 ops/s
Iteration  17: 1062828.544 ops/s
Iteration  18: 1057875.500 ops/s
Iteration  19: 1066647.653 ops/s
Iteration  20: 1061036.621 ops/s
Iteration  21: 1061917.161 ops/s
Iteration  22: 1061442.001 ops/s
Iteration  23: 1058559.663 ops/s
Iteration  24: 1045221.113 ops/s
Iteration  25: 1062666.946 ops/s
Iteration  26: 1062802.798 ops/s
Iteration  27: 1053817.443 ops/s
Iteration  28: 1062638.310 ops/s
Iteration  29: 1063504.121 ops/s
Iteration  30: 1062717.222 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_clear":
  1061136.643 ±(99.9%) 2903.854 ops/s [Average]
  (min, avg, max) = (1045221.113, 1061136.643, 1069433.874), stdev = 4346.352
  CI (99.9%): [1058232.789, 1064040.496] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_clear  thrpt   30  1061136.643 ± 2903.854  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 689614.257 ops/s
# Warmup Iteration   2: 1764278.617 ops/s
# Warmup Iteration   3: 1791935.728 ops/s
# Warmup Iteration   4: 1484911.457 ops/s
# Warmup Iteration   5: 1801993.295 ops/s
# Warmup Iteration   6: 1798168.468 ops/s
# Warmup Iteration   7: 1803253.004 ops/s
# Warmup Iteration   8: 1802434.288 ops/s
# Warmup Iteration   9: 1795651.759 ops/s
# Warmup Iteration  10: 1801041.368 ops/s
# Warmup Iteration  11: 1800265.752 ops/s
# Warmup Iteration  12: 1794290.558 ops/s
# Warmup Iteration  13: 1788274.365 ops/s
# Warmup Iteration  14: 1802010.626 ops/s
# Warmup Iteration  15: 1798493.418 ops/s
# Warmup Iteration  16: 1797329.788 ops/s
# Warmup Iteration  17: 1795865.891 ops/s
# Warmup Iteration  18: 1800055.111 ops/s
# Warmup Iteration  19: 1798265.077 ops/s
# Warmup Iteration  20: 1804232.433 ops/s
# Warmup Iteration  21: 1799726.332 ops/s
# Warmup Iteration  22: 1799331.186 ops/s
# Warmup Iteration  23: 1796236.613 ops/s
# Warmup Iteration  24: 1800006.481 ops/s
# Warmup Iteration  25: 1800447.295 ops/s
# Warmup Iteration  26: 1795508.550 ops/s
# Warmup Iteration  27: 1800197.248 ops/s
# Warmup Iteration  28: 1800362.870 ops/s
# Warmup Iteration  29: 1800038.316 ops/s
# Warmup Iteration  30: 1799559.925 ops/s
Iteration   1: 1797342.054 ops/s
Iteration   2: 1801573.400 ops/s
Iteration   3: 1801351.378 ops/s
Iteration   4: 1798198.139 ops/s
Iteration   5: 1799208.107 ops/s
Iteration   6: 1802273.680 ops/s
Iteration   7: 1797457.011 ops/s
Iteration   8: 1797657.427 ops/s
Iteration   9: 1801952.121 ops/s
Iteration  10: 1798152.018 ops/s
Iteration  11: 1801550.809 ops/s
Iteration  12: 1795172.972 ops/s
Iteration  13: 1799793.369 ops/s
Iteration  14: 1799494.557 ops/s
Iteration  15: 1794833.780 ops/s
Iteration  16: 1801322.041 ops/s
Iteration  17: 1790435.253 ops/s
Iteration  18: 1794609.968 ops/s
Iteration  19: 1798865.386 ops/s
Iteration  20: 1794815.503 ops/s
Iteration  21: 1801220.927 ops/s
Iteration  22: 1799057.755 ops/s
Iteration  23: 1795622.972 ops/s
Iteration  24: 1797193.733 ops/s
Iteration  25: 1800615.293 ops/s
Iteration  26: 1803262.275 ops/s
Iteration  27: 1801999.985 ops/s
Iteration  28: 1797360.040 ops/s
Iteration  29: 1794712.635 ops/s
Iteration  30: 1795843.252 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_collect":
  1798431.595 ±(99.9%) 2021.828 ops/s [Average]
  (min, avg, max) = (1790435.253, 1798431.595, 1803262.275), stdev = 3026.177
  CI (99.9%): [1796409.767, 1800453.422] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_collect  thrpt   30  1798431.595 ± 2021.828  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1760065.017 ops/s
# Warmup Iteration   2: 3737812.279 ops/s
# Warmup Iteration   3: 3112570.774 ops/s
# Warmup Iteration   4: 3759088.243 ops/s
# Warmup Iteration   5: 3758665.594 ops/s
# Warmup Iteration   6: 3758901.119 ops/s
# Warmup Iteration   7: 3761592.731 ops/s
# Warmup Iteration   8: 3753498.694 ops/s
# Warmup Iteration   9: 3756624.664 ops/s
# Warmup Iteration  10: 3763227.871 ops/s
# Warmup Iteration  11: 3734254.093 ops/s
# Warmup Iteration  12: 3752816.218 ops/s
# Warmup Iteration  13: 3753922.358 ops/s
# Warmup Iteration  14: 3757665.662 ops/s
# Warmup Iteration  15: 3760466.822 ops/s
# Warmup Iteration  16: 3760264.897 ops/s
# Warmup Iteration  17: 3757097.772 ops/s
# Warmup Iteration  18: 3755325.474 ops/s
# Warmup Iteration  19: 3756725.814 ops/s
# Warmup Iteration  20: 3725395.497 ops/s
# Warmup Iteration  21: 3759551.025 ops/s
# Warmup Iteration  22: 3749137.712 ops/s
# Warmup Iteration  23: 3758668.825 ops/s
# Warmup Iteration  24: 3751887.607 ops/s
# Warmup Iteration  25: 3751145.233 ops/s
# Warmup Iteration  26: 3725667.720 ops/s
# Warmup Iteration  27: 3757858.457 ops/s
# Warmup Iteration  28: 3752603.243 ops/s
# Warmup Iteration  29: 3759175.486 ops/s
# Warmup Iteration  30: 3757775.097 ops/s
Iteration   1: 3752416.305 ops/s
Iteration   2: 3750577.084 ops/s
Iteration   3: 3759616.781 ops/s
Iteration   4: 3759973.290 ops/s
Iteration   5: 3746804.413 ops/s
Iteration   6: 3768040.879 ops/s
Iteration   7: 3757247.672 ops/s
Iteration   8: 3753572.485 ops/s
Iteration   9: 3746601.701 ops/s
Iteration  10: 3744933.170 ops/s
Iteration  11: 3748672.439 ops/s
Iteration  12: 3771727.946 ops/s
Iteration  13: 3762028.475 ops/s
Iteration  14: 3751137.141 ops/s
Iteration  15: 3757239.935 ops/s
Iteration  16: 3763007.446 ops/s
Iteration  17: 3761232.206 ops/s
Iteration  18: 3760717.957 ops/s
Iteration  19: 3762007.472 ops/s
Iteration  20: 3750111.816 ops/s
Iteration  21: 3741355.933 ops/s
Iteration  22: 3756823.467 ops/s
Iteration  23: 3737425.204 ops/s
Iteration  24: 3749520.864 ops/s
Iteration  25: 3758658.084 ops/s
Iteration  26: 3751192.871 ops/s
Iteration  27: 3752598.548 ops/s
Iteration  28: 3746428.186 ops/s
Iteration  29: 3753998.902 ops/s
Iteration  30: 3753957.138 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_contains":
  3754320.860 ±(99.9%) 5130.502 ops/s [Average]
  (min, avg, max) = (3737425.204, 3754320.860, 3771727.946), stdev = 7679.095
  CI (99.9%): [3749190.358, 3759451.362] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_contains  thrpt   30  3754320.860 ± 5130.502  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3480435.227 ops/s
# Warmup Iteration   2: 7180091.530 ops/s
# Warmup Iteration   3: 7155657.880 ops/s
# Warmup Iteration   4: 6055036.410 ops/s
# Warmup Iteration   5: 7124962.926 ops/s
# Warmup Iteration   6: 7186138.758 ops/s
# Warmup Iteration   7: 7170053.126 ops/s
# Warmup Iteration   8: 7169765.048 ops/s
# Warmup Iteration   9: 7176812.934 ops/s
# Warmup Iteration  10: 7165710.875 ops/s
# Warmup Iteration  11: 7135978.506 ops/s
# Warmup Iteration  12: 7174889.184 ops/s
# Warmup Iteration  13: 7137305.406 ops/s
# Warmup Iteration  14: 7167592.193 ops/s
# Warmup Iteration  15: 7172155.558 ops/s
# Warmup Iteration  16: 7183792.065 ops/s
# Warmup Iteration  17: 7175134.054 ops/s
# Warmup Iteration  18: 7117701.339 ops/s
# Warmup Iteration  19: 7187216.749 ops/s
# Warmup Iteration  20: 7156060.000 ops/s
# Warmup Iteration  21: 7108224.479 ops/s
# Warmup Iteration  22: 7167886.604 ops/s
# Warmup Iteration  23: 7172955.310 ops/s
# Warmup Iteration  24: 7171510.313 ops/s
# Warmup Iteration  25: 7182597.375 ops/s
# Warmup Iteration  26: 7170023.383 ops/s
# Warmup Iteration  27: 7166764.504 ops/s
# Warmup Iteration  28: 7170152.528 ops/s
# Warmup Iteration  29: 7137150.101 ops/s
# Warmup Iteration  30: 7177931.244 ops/s
Iteration   1: 7186148.764 ops/s
Iteration   2: 7180215.571 ops/s
Iteration   3: 7172813.156 ops/s
Iteration   4: 7154403.522 ops/s
Iteration   5: 7196656.668 ops/s
Iteration   6: 7157740.804 ops/s
Iteration   7: 7153489.050 ops/s
Iteration   8: 7185858.426 ops/s
Iteration   9: 7176283.021 ops/s
Iteration  10: 7120987.410 ops/s
Iteration  11: 7142964.141 ops/s
Iteration  12: 7165933.726 ops/s
Iteration  13: 7151253.964 ops/s
Iteration  14: 7154902.044 ops/s
Iteration  15: 7147760.166 ops/s
Iteration  16: 7180890.966 ops/s
Iteration  17: 7171810.639 ops/s
Iteration  18: 7181872.142 ops/s
Iteration  19: 7183540.107 ops/s
Iteration  20: 7179347.781 ops/s
Iteration  21: 7156333.247 ops/s
Iteration  22: 7056638.129 ops/s
Iteration  23: 7198364.359 ops/s
Iteration  24: 7193873.058 ops/s
Iteration  25: 7035741.610 ops/s
Iteration  26: 7171433.837 ops/s
Iteration  27: 7158679.569 ops/s
Iteration  28: 7170750.134 ops/s
Iteration  29: 7177192.429 ops/s
Iteration  30: 7200148.101 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_containsAllArray":
  7162134.218 ±(99.9%) 24334.148 ops/s [Average]
  (min, avg, max) = (7035741.610, 7162134.218, 7200148.101), stdev = 36422.210
  CI (99.9%): [7137800.070, 7186468.366] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_containsAllArray  thrpt   30  7162134.218 ± 24334.148  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1629119.331 ops/s
# Warmup Iteration   2: 3570973.892 ops/s
# Warmup Iteration   3: 3593349.722 ops/s
# Warmup Iteration   4: 2975354.139 ops/s
# Warmup Iteration   5: 3600131.870 ops/s
# Warmup Iteration   6: 3566454.724 ops/s
# Warmup Iteration   7: 3566087.701 ops/s
# Warmup Iteration   8: 3591903.378 ops/s
# Warmup Iteration   9: 3599240.880 ops/s
# Warmup Iteration  10: 3599825.984 ops/s
# Warmup Iteration  11: 3598807.488 ops/s
# Warmup Iteration  12: 3599046.748 ops/s
# Warmup Iteration  13: 3591807.828 ops/s
# Warmup Iteration  14: 3578892.840 ops/s
# Warmup Iteration  15: 3595214.038 ops/s
# Warmup Iteration  16: 3572224.202 ops/s
# Warmup Iteration  17: 3600902.990 ops/s
# Warmup Iteration  18: 3589686.136 ops/s
# Warmup Iteration  19: 3598566.658 ops/s
# Warmup Iteration  20: 3574157.869 ops/s
# Warmup Iteration  21: 3593642.617 ops/s
# Warmup Iteration  22: 3589364.747 ops/s
# Warmup Iteration  23: 3591599.541 ops/s
# Warmup Iteration  24: 3567674.333 ops/s
# Warmup Iteration  25: 3595783.554 ops/s
# Warmup Iteration  26: 3594100.315 ops/s
# Warmup Iteration  27: 3590604.139 ops/s
# Warmup Iteration  28: 3594894.667 ops/s
# Warmup Iteration  29: 3560188.328 ops/s
# Warmup Iteration  30: 3562456.097 ops/s
Iteration   1: 3574650.164 ops/s
Iteration   2: 3593980.946 ops/s
Iteration   3: 3596837.216 ops/s
Iteration   4: 3596096.961 ops/s
Iteration   5: 3593733.355 ops/s
Iteration   6: 3593447.195 ops/s
Iteration   7: 3589357.569 ops/s
Iteration   8: 3595954.255 ops/s
Iteration   9: 3578027.120 ops/s
Iteration  10: 3590649.648 ops/s
Iteration  11: 3606721.572 ops/s
Iteration  12: 3591988.530 ops/s
Iteration  13: 3590176.768 ops/s
Iteration  14: 3582306.852 ops/s
Iteration  15: 3598037.847 ops/s
Iteration  16: 3599993.686 ops/s
Iteration  17: 3596063.141 ops/s
Iteration  18: 3600140.650 ops/s
Iteration  19: 3592170.337 ops/s
Iteration  20: 3589284.723 ops/s
Iteration  21: 3575240.832 ops/s
Iteration  22: 3595898.249 ops/s
Iteration  23: 3600902.456 ops/s
Iteration  24: 3605925.053 ops/s
Iteration  25: 3595420.235 ops/s
Iteration  26: 3596716.184 ops/s
Iteration  27: 3596141.835 ops/s
Iteration  28: 3597028.481 ops/s
Iteration  29: 3584471.200 ops/s
Iteration  30: 3591626.887 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_containsAllIterable":
  3592966.332 ±(99.9%) 5188.346 ops/s [Average]
  (min, avg, max) = (3574650.164, 3592966.332, 3606721.572), stdev = 7765.673
  CI (99.9%): [3587777.985, 3598154.678] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score      Error  Units
UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_containsAllIterable  thrpt   30  3592966.332 ± 5188.346  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_containsAnyArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_containsAnyArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1341663.779 ops/s
# Warmup Iteration   2: 2858741.891 ops/s
# Warmup Iteration   3: 2851800.996 ops/s
# Warmup Iteration   4: 2621684.076 ops/s
# Warmup Iteration   5: 2643011.149 ops/s
# Warmup Iteration   6: 2856947.553 ops/s
# Warmup Iteration   7: 2852814.818 ops/s
# Warmup Iteration   8: 2852075.709 ops/s
# Warmup Iteration   9: 2859026.563 ops/s
# Warmup Iteration  10: 2852381.024 ops/s
# Warmup Iteration  11: 2854861.925 ops/s
# Warmup Iteration  12: 2852321.687 ops/s
# Warmup Iteration  13: 2859962.731 ops/s
# Warmup Iteration  14: 2855898.528 ops/s
# Warmup Iteration  15: 2853985.117 ops/s
# Warmup Iteration  16: 2854669.734 ops/s
# Warmup Iteration  17: 2854678.678 ops/s
# Warmup Iteration  18: 2855765.217 ops/s
# Warmup Iteration  19: 2830982.363 ops/s
# Warmup Iteration  20: 2861497.304 ops/s
# Warmup Iteration  21: 2858752.254 ops/s
# Warmup Iteration  22: 2856959.741 ops/s
# Warmup Iteration  23: 2854832.768 ops/s
# Warmup Iteration  24: 2854548.528 ops/s
# Warmup Iteration  25: 2856283.781 ops/s
# Warmup Iteration  26: 2850281.299 ops/s
# Warmup Iteration  27: 2846334.401 ops/s
# Warmup Iteration  28: 2853157.715 ops/s
# Warmup Iteration  29: 2853779.094 ops/s
# Warmup Iteration  30: 2854793.101 ops/s
Iteration   1: 2824146.982 ops/s
Iteration   2: 2857372.478 ops/s
Iteration   3: 2860379.123 ops/s
Iteration   4: 2855809.728 ops/s
Iteration   5: 2805176.119 ops/s
Iteration   6: 2846542.149 ops/s
Iteration   7: 2861818.382 ops/s
Iteration   8: 2854441.290 ops/s
Iteration   9: 2852364.061 ops/s
Iteration  10: 2856436.971 ops/s
Iteration  11: 2855660.844 ops/s
Iteration  12: 2856179.647 ops/s
Iteration  13: 2803072.894 ops/s
Iteration  14: 2857263.590 ops/s
Iteration  15: 2853829.480 ops/s
Iteration  16: 2862413.138 ops/s
Iteration  17: 2854995.111 ops/s
Iteration  18: 2856743.158 ops/s
Iteration  19: 2858237.526 ops/s
Iteration  20: 2855962.307 ops/s
Iteration  21: 2861825.904 ops/s
Iteration  22: 2854137.288 ops/s
Iteration  23: 2855049.501 ops/s
Iteration  24: 2854873.688 ops/s
Iteration  25: 2856671.251 ops/s
Iteration  26: 2816594.378 ops/s
Iteration  27: 2856937.225 ops/s
Iteration  28: 2813095.445 ops/s
Iteration  29: 2856506.632 ops/s
Iteration  30: 2863588.733 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_containsAnyArray":
  2849270.834 ±(99.9%) 11603.447 ops/s [Average]
  (min, avg, max) = (2803072.894, 2849270.834, 2863588.733), stdev = 17367.495
  CI (99.9%): [2837667.387, 2860874.281] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_containsAnyArray  thrpt   30  2849270.834 ± 11603.447  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_containsAnyIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_containsAnyIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 530294.926 ops/s
# Warmup Iteration   2: 779825.253 ops/s
# Warmup Iteration   3: 902206.984 ops/s
# Warmup Iteration   4: 907703.889 ops/s
# Warmup Iteration   5: 903625.302 ops/s
# Warmup Iteration   6: 909681.388 ops/s
# Warmup Iteration   7: 754217.256 ops/s
# Warmup Iteration   8: 904053.042 ops/s
# Warmup Iteration   9: 909762.798 ops/s
# Warmup Iteration  10: 911561.392 ops/s
# Warmup Iteration  11: 911412.357 ops/s
# Warmup Iteration  12: 911221.442 ops/s
# Warmup Iteration  13: 903786.408 ops/s
# Warmup Iteration  14: 903690.544 ops/s
# Warmup Iteration  15: 910862.101 ops/s
# Warmup Iteration  16: 909949.088 ops/s
# Warmup Iteration  17: 910370.839 ops/s
# Warmup Iteration  18: 908936.430 ops/s
# Warmup Iteration  19: 910552.269 ops/s
# Warmup Iteration  20: 906860.288 ops/s
# Warmup Iteration  21: 911418.671 ops/s
# Warmup Iteration  22: 909934.724 ops/s
# Warmup Iteration  23: 910827.417 ops/s
# Warmup Iteration  24: 910958.514 ops/s
# Warmup Iteration  25: 910109.650 ops/s
# Warmup Iteration  26: 909957.581 ops/s
# Warmup Iteration  27: 910252.283 ops/s
# Warmup Iteration  28: 910094.584 ops/s
# Warmup Iteration  29: 909116.644 ops/s
# Warmup Iteration  30: 910123.015 ops/s
Iteration   1: 907223.230 ops/s
Iteration   2: 891418.093 ops/s
Iteration   3: 910497.622 ops/s
Iteration   4: 906653.515 ops/s
Iteration   5: 908683.625 ops/s
Iteration   6: 908557.938 ops/s
Iteration   7: 907477.153 ops/s
Iteration   8: 911380.571 ops/s
Iteration   9: 908981.347 ops/s
Iteration  10: 911478.621 ops/s
Iteration  11: 909134.105 ops/s
Iteration  12: 909737.198 ops/s
Iteration  13: 906879.186 ops/s
Iteration  14: 894779.891 ops/s
Iteration  15: 909483.984 ops/s
Iteration  16: 909530.245 ops/s
Iteration  17: 910301.253 ops/s
Iteration  18: 909867.024 ops/s
Iteration  19: 910454.313 ops/s
Iteration  20: 909998.144 ops/s
Iteration  21: 909644.842 ops/s
Iteration  22: 908807.478 ops/s
Iteration  23: 910140.730 ops/s
Iteration  24: 910593.966 ops/s
Iteration  25: 895154.885 ops/s
Iteration  26: 908552.230 ops/s
Iteration  27: 910319.919 ops/s
Iteration  28: 910076.745 ops/s
Iteration  29: 902380.861 ops/s
Iteration  30: 911220.973 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_containsAnyIterable":
  907646.990 ±(99.9%) 3376.559 ops/s [Average]
  (min, avg, max) = (891418.093, 907646.990, 911478.621), stdev = 5053.876
  CI (99.9%): [904270.430, 911023.549] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score      Error  Units
UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_containsAnyIterable  thrpt   30  907646.990 ± 3376.559  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_containsNoneArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_containsNoneArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1430539.525 ops/s
# Warmup Iteration   2: 3000943.957 ops/s
# Warmup Iteration   3: 3008669.132 ops/s
# Warmup Iteration   4: 2513763.811 ops/s
# Warmup Iteration   5: 3001299.293 ops/s
# Warmup Iteration   6: 3001564.812 ops/s
# Warmup Iteration   7: 2991670.100 ops/s
# Warmup Iteration   8: 3005720.391 ops/s
# Warmup Iteration   9: 3000569.629 ops/s
# Warmup Iteration  10: 2996891.416 ops/s
# Warmup Iteration  11: 2993177.002 ops/s
# Warmup Iteration  12: 2993983.126 ops/s
# Warmup Iteration  13: 2997498.546 ops/s
# Warmup Iteration  14: 2999800.992 ops/s
# Warmup Iteration  15: 2975976.930 ops/s
# Warmup Iteration  16: 2997174.612 ops/s
# Warmup Iteration  17: 2996350.781 ops/s
# Warmup Iteration  18: 2991072.495 ops/s
# Warmup Iteration  19: 2994300.555 ops/s
# Warmup Iteration  20: 3001081.781 ops/s
# Warmup Iteration  21: 2997947.913 ops/s
# Warmup Iteration  22: 3001554.982 ops/s
# Warmup Iteration  23: 2971791.085 ops/s
# Warmup Iteration  24: 2996838.972 ops/s
# Warmup Iteration  25: 2999745.985 ops/s
# Warmup Iteration  26: 2995585.481 ops/s
# Warmup Iteration  27: 3003104.034 ops/s
# Warmup Iteration  28: 3001357.518 ops/s
# Warmup Iteration  29: 2993822.771 ops/s
# Warmup Iteration  30: 2996820.364 ops/s
Iteration   1: 2991771.423 ops/s
Iteration   2: 2999614.928 ops/s
Iteration   3: 3007679.576 ops/s
Iteration   4: 3000890.661 ops/s
Iteration   5: 3000837.394 ops/s
Iteration   6: 2999344.303 ops/s
Iteration   7: 3005870.296 ops/s
Iteration   8: 2951009.506 ops/s
Iteration   9: 3002129.091 ops/s
Iteration  10: 2999873.294 ops/s
Iteration  11: 2998074.306 ops/s
Iteration  12: 2998428.626 ops/s
Iteration  13: 3001266.651 ops/s
Iteration  14: 3008903.362 ops/s
Iteration  15: 2999747.947 ops/s
Iteration  16: 3001250.932 ops/s
Iteration  17: 3005393.074 ops/s
Iteration  18: 3002696.316 ops/s
Iteration  19: 2994536.491 ops/s
Iteration  20: 2999026.459 ops/s
Iteration  21: 2990727.442 ops/s
Iteration  22: 2996610.299 ops/s
Iteration  23: 2989526.040 ops/s
Iteration  24: 2990694.240 ops/s
Iteration  25: 2998336.030 ops/s
Iteration  26: 3000948.660 ops/s
Iteration  27: 2994322.508 ops/s
Iteration  28: 3006008.334 ops/s
Iteration  29: 3001675.113 ops/s
Iteration  30: 2991473.834 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_containsNoneArray":
  2997622.238 ±(99.9%) 6790.056 ops/s [Average]
  (min, avg, max) = (2951009.506, 2997622.238, 3008903.362), stdev = 10163.037
  CI (99.9%): [2990832.182, 3004412.294] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score      Error  Units
UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_containsNoneArray  thrpt   30  2997622.238 ± 6790.056  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_containsNoneIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_containsNoneIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 491386.496 ops/s
# Warmup Iteration   2: 729587.536 ops/s
# Warmup Iteration   3: 850394.936 ops/s
# Warmup Iteration   4: 852261.859 ops/s
# Warmup Iteration   5: 850812.426 ops/s
# Warmup Iteration   6: 850494.859 ops/s
# Warmup Iteration   7: 701660.913 ops/s
# Warmup Iteration   8: 846676.382 ops/s
# Warmup Iteration   9: 852072.691 ops/s
# Warmup Iteration  10: 850358.181 ops/s
# Warmup Iteration  11: 849714.799 ops/s
# Warmup Iteration  12: 851085.579 ops/s
# Warmup Iteration  13: 851200.913 ops/s
# Warmup Iteration  14: 851645.703 ops/s
# Warmup Iteration  15: 851533.757 ops/s
# Warmup Iteration  16: 850306.490 ops/s
# Warmup Iteration  17: 850181.301 ops/s
# Warmup Iteration  18: 851860.406 ops/s
# Warmup Iteration  19: 852149.209 ops/s
# Warmup Iteration  20: 850783.057 ops/s
# Warmup Iteration  21: 851715.443 ops/s
# Warmup Iteration  22: 850949.905 ops/s
# Warmup Iteration  23: 850541.172 ops/s
# Warmup Iteration  24: 848062.719 ops/s
# Warmup Iteration  25: 852185.104 ops/s
# Warmup Iteration  26: 850986.629 ops/s
# Warmup Iteration  27: 852440.872 ops/s
# Warmup Iteration  28: 852024.723 ops/s
# Warmup Iteration  29: 851673.827 ops/s
# Warmup Iteration  30: 852114.270 ops/s
Iteration   1: 850295.068 ops/s
Iteration   2: 851156.709 ops/s
Iteration   3: 851522.397 ops/s
Iteration   4: 853212.282 ops/s
Iteration   5: 848885.728 ops/s
Iteration   6: 850911.532 ops/s
Iteration   7: 848477.508 ops/s
Iteration   8: 852533.847 ops/s
Iteration   9: 851348.338 ops/s
Iteration  10: 848717.093 ops/s
Iteration  11: 834993.226 ops/s
Iteration  12: 854039.417 ops/s
Iteration  13: 851572.790 ops/s
Iteration  14: 853754.176 ops/s
Iteration  15: 851701.876 ops/s
Iteration  16: 853221.206 ops/s
Iteration  17: 849356.866 ops/s
Iteration  18: 853795.069 ops/s
Iteration  19: 851589.899 ops/s
Iteration  20: 850503.626 ops/s
Iteration  21: 851512.549 ops/s
Iteration  22: 838345.543 ops/s
Iteration  23: 854795.635 ops/s
Iteration  24: 852029.602 ops/s
Iteration  25: 852147.513 ops/s
Iteration  26: 850132.324 ops/s
Iteration  27: 854935.381 ops/s
Iteration  28: 853015.976 ops/s
Iteration  29: 852882.378 ops/s
Iteration  30: 848792.623 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_containsNoneIterable":
  850672.606 ±(99.9%) 2820.417 ops/s [Average]
  (min, avg, max) = (834993.226, 850672.606, 854935.381), stdev = 4221.468
  CI (99.9%): [847852.189, 853493.023] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score      Error  Units
UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_containsNoneIterable  thrpt   30  850672.606 ± 2820.417  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1050426.980 ops/s
# Warmup Iteration   2: 1971721.175 ops/s
# Warmup Iteration   3: 2106906.355 ops/s
# Warmup Iteration   4: 2109171.582 ops/s
# Warmup Iteration   5: 1756189.174 ops/s
# Warmup Iteration   6: 2107410.300 ops/s
# Warmup Iteration   7: 2101733.232 ops/s
# Warmup Iteration   8: 2108371.488 ops/s
# Warmup Iteration   9: 2109786.420 ops/s
# Warmup Iteration  10: 2112117.495 ops/s
# Warmup Iteration  11: 2107922.523 ops/s
# Warmup Iteration  12: 2094316.034 ops/s
# Warmup Iteration  13: 2106710.217 ops/s
# Warmup Iteration  14: 2111620.694 ops/s
# Warmup Iteration  15: 2107806.881 ops/s
# Warmup Iteration  16: 2111427.145 ops/s
# Warmup Iteration  17: 2106502.085 ops/s
# Warmup Iteration  18: 2113010.425 ops/s
# Warmup Iteration  19: 2110071.840 ops/s
# Warmup Iteration  20: 2111154.389 ops/s
# Warmup Iteration  21: 2111342.041 ops/s
# Warmup Iteration  22: 2108968.470 ops/s
# Warmup Iteration  23: 2105430.589 ops/s
# Warmup Iteration  24: 2110683.766 ops/s
# Warmup Iteration  25: 2113913.555 ops/s
# Warmup Iteration  26: 2108327.811 ops/s
# Warmup Iteration  27: 2107992.728 ops/s
# Warmup Iteration  28: 2113952.415 ops/s
# Warmup Iteration  29: 2114511.435 ops/s
# Warmup Iteration  30: 2113915.645 ops/s
Iteration   1: 2113759.244 ops/s
Iteration   2: 2111020.749 ops/s
Iteration   3: 2111835.262 ops/s
Iteration   4: 2101893.433 ops/s
Iteration   5: 2109806.105 ops/s
Iteration   6: 2111071.583 ops/s
Iteration   7: 2111821.022 ops/s
Iteration   8: 2111950.154 ops/s
Iteration   9: 2110338.301 ops/s
Iteration  10: 2107754.053 ops/s
Iteration  11: 2112449.470 ops/s
Iteration  12: 2104323.482 ops/s
Iteration  13: 2107182.538 ops/s
Iteration  14: 2118232.383 ops/s
Iteration  15: 2108373.585 ops/s
Iteration  16: 2106599.170 ops/s
Iteration  17: 2117674.418 ops/s
Iteration  18: 2109009.374 ops/s
Iteration  19: 2069225.550 ops/s
Iteration  20: 2103686.053 ops/s
Iteration  21: 2109654.539 ops/s
Iteration  22: 2111441.321 ops/s
Iteration  23: 2109348.121 ops/s
Iteration  24: 2110497.436 ops/s
Iteration  25: 2106184.413 ops/s
Iteration  26: 2111775.431 ops/s
Iteration  27: 2109594.825 ops/s
Iteration  28: 2113680.872 ops/s
Iteration  29: 2111532.719 ops/s
Iteration  30: 2108464.352 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_count":
  2108672.665 ±(99.9%) 5512.628 ops/s [Average]
  (min, avg, max) = (2069225.550, 2108672.665, 2118232.383), stdev = 8251.043
  CI (99.9%): [2103160.037, 2114185.294] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_count  thrpt   30  2108672.665 ± 5512.628  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1702830.261 ops/s
# Warmup Iteration   2: 3790872.051 ops/s
# Warmup Iteration   3: 3833678.181 ops/s
# Warmup Iteration   4: 3196396.371 ops/s
# Warmup Iteration   5: 3837097.934 ops/s
# Warmup Iteration   6: 3841902.909 ops/s
# Warmup Iteration   7: 3828410.576 ops/s
# Warmup Iteration   8: 3807573.508 ops/s
# Warmup Iteration   9: 3830875.605 ops/s
# Warmup Iteration  10: 3844247.639 ops/s
# Warmup Iteration  11: 3834352.045 ops/s
# Warmup Iteration  12: 3835797.360 ops/s
# Warmup Iteration  13: 3843266.878 ops/s
# Warmup Iteration  14: 3833904.906 ops/s
# Warmup Iteration  15: 3839612.370 ops/s
# Warmup Iteration  16: 3833358.353 ops/s
# Warmup Iteration  17: 3824045.244 ops/s
# Warmup Iteration  18: 3836551.353 ops/s
# Warmup Iteration  19: 3837935.409 ops/s
# Warmup Iteration  20: 3835111.823 ops/s
# Warmup Iteration  21: 3831931.960 ops/s
# Warmup Iteration  22: 3835600.740 ops/s
# Warmup Iteration  23: 3837293.311 ops/s
# Warmup Iteration  24: 3830436.743 ops/s
# Warmup Iteration  25: 3827413.798 ops/s
# Warmup Iteration  26: 3831121.936 ops/s
# Warmup Iteration  27: 3819175.838 ops/s
# Warmup Iteration  28: 3837179.629 ops/s
# Warmup Iteration  29: 3834893.046 ops/s
# Warmup Iteration  30: 3831057.997 ops/s
Iteration   1: 3835594.923 ops/s
Iteration   2: 3813555.428 ops/s
Iteration   3: 3836787.892 ops/s
Iteration   4: 3830556.917 ops/s
Iteration   5: 3837669.925 ops/s
Iteration   6: 3842458.210 ops/s
Iteration   7: 3752771.362 ops/s
Iteration   8: 3834005.725 ops/s
Iteration   9: 3869610.266 ops/s
Iteration  10: 3846748.897 ops/s
Iteration  11: 3819948.128 ops/s
Iteration  12: 3820845.773 ops/s
Iteration  13: 3831214.974 ops/s
Iteration  14: 3836045.361 ops/s
Iteration  15: 3773202.993 ops/s
Iteration  16: 3824374.164 ops/s
Iteration  17: 3837719.950 ops/s
Iteration  18: 3830542.135 ops/s
Iteration  19: 3821567.128 ops/s
Iteration  20: 3765248.039 ops/s
Iteration  21: 3848274.204 ops/s
Iteration  22: 3834840.008 ops/s
Iteration  23: 3829583.723 ops/s
Iteration  24: 3846198.797 ops/s
Iteration  25: 3829180.414 ops/s
Iteration  26: 3834606.701 ops/s
Iteration  27: 3841005.172 ops/s
Iteration  28: 3841033.970 ops/s
Iteration  29: 3840554.743 ops/s
Iteration  30: 3774296.154 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_detectIfNone":
  3826001.403 ±(99.9%) 17464.409 ops/s [Average]
  (min, avg, max) = (3752771.362, 3826001.403, 3869610.266), stdev = 26139.908
  CI (99.9%): [3808536.993, 3843465.812] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_detectIfNone  thrpt   30  3826001.403 ± 17464.409  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2670414.182 ops/s
# Warmup Iteration   2: 5478648.500 ops/s
# Warmup Iteration   3: 4656799.759 ops/s
# Warmup Iteration   4: 5549251.511 ops/s
# Warmup Iteration   5: 5550237.822 ops/s
# Warmup Iteration   6: 5495610.286 ops/s
# Warmup Iteration   7: 5539625.839 ops/s
# Warmup Iteration   8: 5551092.344 ops/s
# Warmup Iteration   9: 5547891.749 ops/s
# Warmup Iteration  10: 5534346.922 ops/s
# Warmup Iteration  11: 5540982.077 ops/s
# Warmup Iteration  12: 5550680.145 ops/s
# Warmup Iteration  13: 5549764.774 ops/s
# Warmup Iteration  14: 5510754.453 ops/s
# Warmup Iteration  15: 5542765.310 ops/s
# Warmup Iteration  16: 5523166.660 ops/s
# Warmup Iteration  17: 5549320.471 ops/s
# Warmup Iteration  18: 5548555.585 ops/s
# Warmup Iteration  19: 5558015.738 ops/s
# Warmup Iteration  20: 5557559.562 ops/s
# Warmup Iteration  21: 5544203.654 ops/s
# Warmup Iteration  22: 5545659.863 ops/s
# Warmup Iteration  23: 5549264.889 ops/s
# Warmup Iteration  24: 5561560.567 ops/s
# Warmup Iteration  25: 5547450.801 ops/s
# Warmup Iteration  26: 5542531.838 ops/s
# Warmup Iteration  27: 5555802.117 ops/s
# Warmup Iteration  28: 5550855.188 ops/s
# Warmup Iteration  29: 5533992.106 ops/s
# Warmup Iteration  30: 5552248.972 ops/s
Iteration   1: 5559940.182 ops/s
Iteration   2: 5539207.366 ops/s
Iteration   3: 5558151.955 ops/s
Iteration   4: 5556950.866 ops/s
Iteration   5: 5546924.375 ops/s
Iteration   6: 5561316.614 ops/s
Iteration   7: 5537079.656 ops/s
Iteration   8: 5547595.598 ops/s
Iteration   9: 5548153.386 ops/s
Iteration  10: 5557793.663 ops/s
Iteration  11: 5547024.039 ops/s
Iteration  12: 5522385.378 ops/s
Iteration  13: 5556184.139 ops/s
Iteration  14: 5538972.349 ops/s
Iteration  15: 5515706.155 ops/s
Iteration  16: 5557891.072 ops/s
Iteration  17: 5537422.422 ops/s
Iteration  18: 5466693.302 ops/s
Iteration  19: 5542135.041 ops/s
Iteration  20: 5562814.446 ops/s
Iteration  21: 5566953.759 ops/s
Iteration  22: 5520005.882 ops/s
Iteration  23: 5549493.146 ops/s
Iteration  24: 5537940.455 ops/s
Iteration  25: 5547923.035 ops/s
Iteration  26: 5571478.730 ops/s
Iteration  27: 5547344.715 ops/s
Iteration  28: 5560728.390 ops/s
Iteration  29: 5550268.463 ops/s
Iteration  30: 5462153.224 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_forEach":
  5542487.727 ±(99.9%) 16711.113 ops/s [Average]
  (min, avg, max) = (5462153.224, 5542487.727, 5571478.730), stdev = 25012.409
  CI (99.9%): [5525776.614, 5559198.840] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_forEach  thrpt   30  5542487.727 ± 16711.113  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6601945.372 ops/s
# Warmup Iteration   2: 13618239.175 ops/s
# Warmup Iteration   3: 11474558.333 ops/s
# Warmup Iteration   4: 13672485.454 ops/s
# Warmup Iteration   5: 13680374.137 ops/s
# Warmup Iteration   6: 13625499.174 ops/s
# Warmup Iteration   7: 13670949.595 ops/s
# Warmup Iteration   8: 13638845.595 ops/s
# Warmup Iteration   9: 13642085.734 ops/s
# Warmup Iteration  10: 13626650.366 ops/s
# Warmup Iteration  11: 13673858.000 ops/s
# Warmup Iteration  12: 13641333.493 ops/s
# Warmup Iteration  13: 13595555.535 ops/s
# Warmup Iteration  14: 13641752.515 ops/s
# Warmup Iteration  15: 13673208.942 ops/s
# Warmup Iteration  16: 13607080.378 ops/s
# Warmup Iteration  17: 13658781.434 ops/s
# Warmup Iteration  18: 13626202.722 ops/s
# Warmup Iteration  19: 13600465.528 ops/s
# Warmup Iteration  20: 13579475.738 ops/s
# Warmup Iteration  21: 13601938.627 ops/s
# Warmup Iteration  22: 13619183.378 ops/s
# Warmup Iteration  23: 13500057.623 ops/s
# Warmup Iteration  24: 13622781.982 ops/s
# Warmup Iteration  25: 13609849.785 ops/s
# Warmup Iteration  26: 13613113.134 ops/s
# Warmup Iteration  27: 13639578.858 ops/s
# Warmup Iteration  28: 13583249.727 ops/s
# Warmup Iteration  29: 13628766.571 ops/s
# Warmup Iteration  30: 13655361.501 ops/s
Iteration   1: 13634838.560 ops/s
Iteration   2: 13641001.737 ops/s
Iteration   3: 13647878.981 ops/s
Iteration   4: 13662656.167 ops/s
Iteration   5: 13626107.061 ops/s
Iteration   6: 13522330.806 ops/s
Iteration   7: 13589897.084 ops/s
Iteration   8: 13559884.234 ops/s
Iteration   9: 13632823.480 ops/s
Iteration  10: 13637525.669 ops/s
Iteration  11: 13586992.177 ops/s
Iteration  12: 13601224.715 ops/s
Iteration  13: 13648243.525 ops/s
Iteration  14: 13640476.346 ops/s
Iteration  15: 13587769.651 ops/s
Iteration  16: 13596879.721 ops/s
Iteration  17: 13626225.661 ops/s
Iteration  18: 13635109.192 ops/s
Iteration  19: 13615185.251 ops/s
Iteration  20: 13645043.338 ops/s
Iteration  21: 13631745.706 ops/s
Iteration  22: 13625402.087 ops/s
Iteration  23: 13657753.459 ops/s
Iteration  24: 13672311.209 ops/s
Iteration  25: 13638351.241 ops/s
Iteration  26: 13307297.878 ops/s
Iteration  27: 13629190.030 ops/s
Iteration  28: 13612907.699 ops/s
Iteration  29: 13605318.297 ops/s
Iteration  30: 13658680.776 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_injectInto":
  13612568.391 ±(99.9%) 43971.358 ops/s [Average]
  (min, avg, max) = (13307297.878, 13612568.391, 13672311.209), stdev = 65814.263
  CI (99.9%): [13568597.033, 13656539.749] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt         Score       Error  Units
UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_injectInto  thrpt   30  13612568.391 ± 43971.358  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1301003.033 ops/s
# Warmup Iteration   2: 2088302.511 ops/s
# Warmup Iteration   3: 2442620.223 ops/s
# Warmup Iteration   4: 2442893.820 ops/s
# Warmup Iteration   5: 2421319.123 ops/s
# Warmup Iteration   6: 2424495.894 ops/s
# Warmup Iteration   7: 2437888.084 ops/s
# Warmup Iteration   8: 2428183.379 ops/s
# Warmup Iteration   9: 2443255.625 ops/s
# Warmup Iteration  10: 2457473.517 ops/s
# Warmup Iteration  11: 2457319.388 ops/s
# Warmup Iteration  12: 2456511.692 ops/s
# Warmup Iteration  13: 2462027.823 ops/s
# Warmup Iteration  14: 2438298.716 ops/s
# Warmup Iteration  15: 2421796.259 ops/s
# Warmup Iteration  16: 2460879.770 ops/s
# Warmup Iteration  17: 2464056.972 ops/s
# Warmup Iteration  18: 2444345.581 ops/s
# Warmup Iteration  19: 2422048.449 ops/s
# Warmup Iteration  20: 2447666.508 ops/s
# Warmup Iteration  21: 2457059.996 ops/s
# Warmup Iteration  22: 2444997.572 ops/s
# Warmup Iteration  23: 2439738.650 ops/s
# Warmup Iteration  24: 2438377.905 ops/s
# Warmup Iteration  25: 2409531.939 ops/s
# Warmup Iteration  26: 2421267.319 ops/s
# Warmup Iteration  27: 2452557.874 ops/s
# Warmup Iteration  28: 2409787.880 ops/s
# Warmup Iteration  29: 2425443.126 ops/s
# Warmup Iteration  30: 2424208.778 ops/s
Iteration   1: 2460947.936 ops/s
Iteration   2: 2444928.202 ops/s
Iteration   3: 2423615.028 ops/s
Iteration   4: 2428508.034 ops/s
Iteration   5: 2439481.525 ops/s
Iteration   6: 2413672.969 ops/s
Iteration   7: 2425725.221 ops/s
Iteration   8: 2457726.562 ops/s
Iteration   9: 2435536.348 ops/s
Iteration  10: 2439193.487 ops/s
Iteration  11: 2403012.694 ops/s
Iteration  12: 2428377.059 ops/s
Iteration  13: 2443436.971 ops/s
Iteration  14: 2409819.917 ops/s
Iteration  15: 2410703.592 ops/s
Iteration  16: 2428173.999 ops/s
Iteration  17: 2449993.982 ops/s
Iteration  18: 2432410.961 ops/s
Iteration  19: 2433138.370 ops/s
Iteration  20: 2418790.202 ops/s
Iteration  21: 2447784.950 ops/s
Iteration  22: 2469291.657 ops/s
Iteration  23: 2445264.087 ops/s
Iteration  24: 2431286.179 ops/s
Iteration  25: 2402828.606 ops/s
Iteration  26: 2428942.982 ops/s
Iteration  27: 2444907.864 ops/s
Iteration  28: 2452622.148 ops/s
Iteration  29: 2453769.012 ops/s
Iteration  30: 2450646.497 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_isEmpty":
  2435151.235 ±(99.9%) 11425.601 ops/s [Average]
  (min, avg, max) = (2402828.606, 2435151.235, 2469291.657), stdev = 17101.303
  CI (99.9%): [2423725.634, 2446576.835] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_isEmpty  thrpt   30  2435151.235 ± 11425.601  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_iterator_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_iterator_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 654726.678 ops/s
# Warmup Iteration   2: 668357.249 ops/s
# Warmup Iteration   3: 843125.717 ops/s
# Warmup Iteration   4: 879307.293 ops/s
# Warmup Iteration   5: 878145.740 ops/s
# Warmup Iteration   6: 878971.521 ops/s
# Warmup Iteration   7: 875799.142 ops/s
# Warmup Iteration   8: 876399.385 ops/s
# Warmup Iteration   9: 877223.507 ops/s
# Warmup Iteration  10: 876309.514 ops/s
# Warmup Iteration  11: 875603.755 ops/s
# Warmup Iteration  12: 858593.027 ops/s
# Warmup Iteration  13: 746984.835 ops/s
# Warmup Iteration  14: 876637.851 ops/s
# Warmup Iteration  15: 875530.706 ops/s
# Warmup Iteration  16: 877401.424 ops/s
# Warmup Iteration  17: 926197.897 ops/s
# Warmup Iteration  18: 925691.247 ops/s
# Warmup Iteration  19: 925061.670 ops/s
# Warmup Iteration  20: 925331.962 ops/s
# Warmup Iteration  21: 927608.786 ops/s
# Warmup Iteration  22: 924455.363 ops/s
# Warmup Iteration  23: 928016.830 ops/s
# Warmup Iteration  24: 926832.899 ops/s
# Warmup Iteration  25: 926238.614 ops/s
# Warmup Iteration  26: 927630.744 ops/s
# Warmup Iteration  27: 929113.639 ops/s
# Warmup Iteration  28: 925490.713 ops/s
# Warmup Iteration  29: 926498.743 ops/s
# Warmup Iteration  30: 924761.861 ops/s
Iteration   1: 926675.545 ops/s
Iteration   2: 923375.959 ops/s
Iteration   3: 928428.251 ops/s
Iteration   4: 926584.386 ops/s
Iteration   5: 924968.213 ops/s
Iteration   6: 926277.191 ops/s
Iteration   7: 925205.437 ops/s
Iteration   8: 928696.197 ops/s
Iteration   9: 926505.402 ops/s
Iteration  10: 929974.000 ops/s
Iteration  11: 926897.544 ops/s
Iteration  12: 924927.626 ops/s
Iteration  13: 926214.194 ops/s
Iteration  14: 925807.226 ops/s
Iteration  15: 922404.425 ops/s
Iteration  16: 926206.573 ops/s
Iteration  17: 929188.856 ops/s
Iteration  18: 929020.699 ops/s
Iteration  19: 922086.418 ops/s
Iteration  20: 928642.074 ops/s
Iteration  21: 928141.029 ops/s
Iteration  22: 925923.260 ops/s
Iteration  23: 930725.334 ops/s
Iteration  24: 922373.018 ops/s
Iteration  25: 926252.205 ops/s
Iteration  26: 926500.264 ops/s
Iteration  27: 927085.410 ops/s
Iteration  28: 928492.207 ops/s
Iteration  29: 927208.076 ops/s
Iteration  30: 921167.741 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_iterator_throws":
  926398.492 ±(99.9%) 1584.412 ops/s [Average]
  (min, avg, max) = (921167.741, 926398.492, 930725.334), stdev = 2371.474
  CI (99.9%): [924814.079, 927982.904] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_iterator_throws  thrpt   30  926398.492 ± 1584.412  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 721671.524 ops/s
# Warmup Iteration   2: 766484.381 ops/s
# Warmup Iteration   3: 1005036.513 ops/s
# Warmup Iteration   4: 997640.460 ops/s
# Warmup Iteration   5: 994724.085 ops/s
# Warmup Iteration   6: 997765.956 ops/s
# Warmup Iteration   7: 999714.923 ops/s
# Warmup Iteration   8: 996983.764 ops/s
# Warmup Iteration   9: 996540.340 ops/s
# Warmup Iteration  10: 1004615.917 ops/s
# Warmup Iteration  11: 841647.375 ops/s
# Warmup Iteration  12: 999113.492 ops/s
# Warmup Iteration  13: 997168.553 ops/s
# Warmup Iteration  14: 996048.126 ops/s
# Warmup Iteration  15: 997965.454 ops/s
# Warmup Iteration  16: 996176.629 ops/s
# Warmup Iteration  17: 1043526.849 ops/s
# Warmup Iteration  18: 1049690.092 ops/s
# Warmup Iteration  19: 1057628.593 ops/s
# Warmup Iteration  20: 1057411.148 ops/s
# Warmup Iteration  21: 1056087.473 ops/s
# Warmup Iteration  22: 1058622.794 ops/s
# Warmup Iteration  23: 1063514.941 ops/s
# Warmup Iteration  24: 1059927.626 ops/s
# Warmup Iteration  25: 1062183.848 ops/s
# Warmup Iteration  26: 1063215.203 ops/s
# Warmup Iteration  27: 1060808.907 ops/s
# Warmup Iteration  28: 1059945.153 ops/s
# Warmup Iteration  29: 1058758.708 ops/s
# Warmup Iteration  30: 1061443.194 ops/s
Iteration   1: 1057359.650 ops/s
Iteration   2: 1057744.895 ops/s
Iteration   3: 1056934.957 ops/s
Iteration   4: 1057718.059 ops/s
Iteration   5: 1053565.566 ops/s
Iteration   6: 1060005.965 ops/s
Iteration   7: 1060738.099 ops/s
Iteration   8: 1060727.854 ops/s
Iteration   9: 1062209.719 ops/s
Iteration  10: 1059497.882 ops/s
Iteration  11: 1058813.938 ops/s
Iteration  12: 1059438.200 ops/s
Iteration  13: 1042913.371 ops/s
Iteration  14: 1060265.808 ops/s
Iteration  15: 1053443.366 ops/s
Iteration  16: 1055819.744 ops/s
Iteration  17: 1061646.407 ops/s
Iteration  18: 1039969.883 ops/s
Iteration  19: 1057066.074 ops/s
Iteration  20: 1060974.556 ops/s
Iteration  21: 1059529.606 ops/s
Iteration  22: 1061428.266 ops/s
Iteration  23: 1060779.848 ops/s
Iteration  24: 1063173.816 ops/s
Iteration  25: 1060162.013 ops/s
Iteration  26: 1056921.666 ops/s
Iteration  27: 1056172.554 ops/s
Iteration  28: 1062959.170 ops/s
Iteration  29: 1058538.461 ops/s
Iteration  30: 1062844.610 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList":
  1057978.800 ±(99.9%) 3454.895 ops/s [Average]
  (min, avg, max) = (1039969.883, 1057978.800, 1063173.816), stdev = 5171.125
  CI (99.9%): [1054523.905, 1061433.695] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt        Score      Error  Units
UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList  thrpt   30  1057978.800 ± 3454.895  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 675316.536 ops/s
# Warmup Iteration   2: 719627.407 ops/s
# Warmup Iteration   3: 964646.398 ops/s
# Warmup Iteration   4: 962538.724 ops/s
# Warmup Iteration   5: 961937.556 ops/s
# Warmup Iteration   6: 953141.591 ops/s
# Warmup Iteration   7: 968407.240 ops/s
# Warmup Iteration   8: 963137.289 ops/s
# Warmup Iteration   9: 962928.718 ops/s
# Warmup Iteration  10: 959997.425 ops/s
# Warmup Iteration  11: 799092.602 ops/s
# Warmup Iteration  12: 965440.557 ops/s
# Warmup Iteration  13: 965200.529 ops/s
# Warmup Iteration  14: 966216.099 ops/s
# Warmup Iteration  15: 965883.905 ops/s
# Warmup Iteration  16: 966598.426 ops/s
# Warmup Iteration  17: 1015692.559 ops/s
# Warmup Iteration  18: 1023330.935 ops/s
# Warmup Iteration  19: 1020848.877 ops/s
# Warmup Iteration  20: 1020675.621 ops/s
# Warmup Iteration  21: 1018408.144 ops/s
# Warmup Iteration  22: 1023385.906 ops/s
# Warmup Iteration  23: 1023249.831 ops/s
# Warmup Iteration  24: 1022685.932 ops/s
# Warmup Iteration  25: 1025069.118 ops/s
# Warmup Iteration  26: 1021633.829 ops/s
# Warmup Iteration  27: 1021068.040 ops/s
# Warmup Iteration  28: 1021580.589 ops/s
# Warmup Iteration  29: 1024499.825 ops/s
# Warmup Iteration  30: 1022734.234 ops/s
Iteration   1: 1023479.142 ops/s
Iteration   2: 1024770.771 ops/s
Iteration   3: 1020615.256 ops/s
Iteration   4: 1024875.422 ops/s
Iteration   5: 1023705.138 ops/s
Iteration   6: 1019746.509 ops/s
Iteration   7: 1018964.254 ops/s
Iteration   8: 1007873.160 ops/s
Iteration   9: 1022547.550 ops/s
Iteration  10: 1024100.620 ops/s
Iteration  11: 1023361.304 ops/s
Iteration  12: 1022611.493 ops/s
Iteration  13: 1026103.182 ops/s
Iteration  14: 1020672.670 ops/s
Iteration  15: 1027933.672 ops/s
Iteration  16: 1025739.742 ops/s
Iteration  17: 1020507.441 ops/s
Iteration  18: 1020756.261 ops/s
Iteration  19: 1024127.701 ops/s
Iteration  20: 1022743.209 ops/s
Iteration  21: 1025168.588 ops/s
Iteration  22: 1022266.232 ops/s
Iteration  23: 1022454.813 ops/s
Iteration  24: 1023878.818 ops/s
Iteration  25: 1024363.658 ops/s
Iteration  26: 1024368.070 ops/s
Iteration  27: 1021495.389 ops/s
Iteration  28: 1024724.525 ops/s
Iteration  29: 1029194.015 ops/s
Iteration  30: 1023992.040 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection":
  1022904.688 ±(99.9%) 2432.105 ops/s [Average]
  (min, avg, max) = (1007873.160, 1022904.688, 1029194.015), stdev = 3640.261
  CI (99.9%): [1020472.583, 1025336.793] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                         Mode  Cnt        Score      Error  Units
UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection  thrpt   30  1022904.688 ± 2432.105  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 170881500.986 ops/s
# Warmup Iteration   2: 298350062.993 ops/s
# Warmup Iteration   3: 279145389.524 ops/s
# Warmup Iteration   4: 315526136.733 ops/s
# Warmup Iteration   5: 314541457.251 ops/s
# Warmup Iteration   6: 315445401.018 ops/s
# Warmup Iteration   7: 315853854.733 ops/s
# Warmup Iteration   8: 314748024.143 ops/s
# Warmup Iteration   9: 315623449.503 ops/s
# Warmup Iteration  10: 315016813.099 ops/s
# Warmup Iteration  11: 315114116.359 ops/s
# Warmup Iteration  12: 315104999.413 ops/s
# Warmup Iteration  13: 314023340.889 ops/s
# Warmup Iteration  14: 316590796.115 ops/s
# Warmup Iteration  15: 315468453.857 ops/s
# Warmup Iteration  16: 314738113.530 ops/s
# Warmup Iteration  17: 315568359.390 ops/s
# Warmup Iteration  18: 313390973.781 ops/s
# Warmup Iteration  19: 314851884.644 ops/s
# Warmup Iteration  20: 314742688.855 ops/s
# Warmup Iteration  21: 314289630.235 ops/s
# Warmup Iteration  22: 314073728.207 ops/s
# Warmup Iteration  23: 315199354.179 ops/s
# Warmup Iteration  24: 312998692.378 ops/s
# Warmup Iteration  25: 314751084.249 ops/s
# Warmup Iteration  26: 314801409.388 ops/s
# Warmup Iteration  27: 313997126.587 ops/s
# Warmup Iteration  28: 314226437.070 ops/s
# Warmup Iteration  29: 314723901.038 ops/s
# Warmup Iteration  30: 315463051.428 ops/s
Iteration   1: 315076287.888 ops/s
Iteration   2: 314307352.614 ops/s
Iteration   3: 315681635.719 ops/s
Iteration   4: 313915811.150 ops/s
Iteration   5: 315046596.037 ops/s
Iteration   6: 315182837.821 ops/s
Iteration   7: 314598223.282 ops/s
Iteration   8: 316181079.861 ops/s
Iteration   9: 315066619.294 ops/s
Iteration  10: 314429146.944 ops/s
Iteration  11: 314134555.605 ops/s
Iteration  12: 310214675.971 ops/s
Iteration  13: 314899568.880 ops/s
Iteration  14: 315637312.514 ops/s
Iteration  15: 311987812.021 ops/s
Iteration  16: 313053258.363 ops/s
Iteration  17: 314116430.886 ops/s
Iteration  18: 314953131.244 ops/s
Iteration  19: 314267451.930 ops/s
Iteration  20: 314691689.136 ops/s
Iteration  21: 314251589.380 ops/s
Iteration  22: 314415214.463 ops/s
Iteration  23: 315086373.963 ops/s
Iteration  24: 314505025.877 ops/s
Iteration  25: 313613971.038 ops/s
Iteration  26: 313514107.657 ops/s
Iteration  27: 314700591.557 ops/s
Iteration  28: 314056226.171 ops/s
Iteration  29: 314747487.395 ops/s
Iteration  30: 314132183.168 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove":
  314348808.261 ±(99.9%) 752100.608 ops/s [Average]
  (min, avg, max) = (310214675.971, 314348808.261, 316181079.861), stdev = 1125708.869
  CI (99.9%): [313596707.653, 315100908.869] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                        Mode  Cnt          Score        Error  Units
UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove  thrpt   30  314348808.261 ± 752100.608  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 669570.731 ops/s
# Warmup Iteration   2: 763377.029 ops/s
# Warmup Iteration   3: 977027.936 ops/s
# Warmup Iteration   4: 981051.876 ops/s
# Warmup Iteration   5: 976270.702 ops/s
# Warmup Iteration   6: 967582.384 ops/s
# Warmup Iteration   7: 976455.918 ops/s
# Warmup Iteration   8: 968110.290 ops/s
# Warmup Iteration   9: 964513.885 ops/s
# Warmup Iteration  10: 828471.497 ops/s
# Warmup Iteration  11: 975885.064 ops/s
# Warmup Iteration  12: 972436.843 ops/s
# Warmup Iteration  13: 975244.712 ops/s
# Warmup Iteration  14: 977687.331 ops/s
# Warmup Iteration  15: 974714.955 ops/s
# Warmup Iteration  16: 975876.302 ops/s
# Warmup Iteration  17: 1037469.835 ops/s
# Warmup Iteration  18: 1038914.873 ops/s
# Warmup Iteration  19: 1030728.950 ops/s
# Warmup Iteration  20: 1037452.511 ops/s
# Warmup Iteration  21: 1040460.218 ops/s
# Warmup Iteration  22: 1033434.962 ops/s
# Warmup Iteration  23: 1020564.324 ops/s
# Warmup Iteration  24: 1040412.164 ops/s
# Warmup Iteration  25: 1036190.800 ops/s
# Warmup Iteration  26: 1035210.386 ops/s
# Warmup Iteration  27: 1036094.987 ops/s
# Warmup Iteration  28: 1039039.794 ops/s
# Warmup Iteration  29: 1039388.837 ops/s
# Warmup Iteration  30: 1039022.516 ops/s
Iteration   1: 1036905.354 ops/s
Iteration   2: 1039106.456 ops/s
Iteration   3: 1040164.541 ops/s
Iteration   4: 1038966.448 ops/s
Iteration   5: 1036022.207 ops/s
Iteration   6: 1035804.783 ops/s
Iteration   7: 1040262.758 ops/s
Iteration   8: 1037570.361 ops/s
Iteration   9: 1037749.784 ops/s
Iteration  10: 1040466.062 ops/s
Iteration  11: 1040013.542 ops/s
Iteration  12: 1036581.370 ops/s
Iteration  13: 1038623.073 ops/s
Iteration  14: 1042626.046 ops/s
Iteration  15: 1033370.313 ops/s
Iteration  16: 1038526.999 ops/s
Iteration  17: 1043441.063 ops/s
Iteration  18: 1035604.391 ops/s
Iteration  19: 1041095.192 ops/s
Iteration  20: 1037884.563 ops/s
Iteration  21: 1037031.341 ops/s
Iteration  22: 1041615.096 ops/s
Iteration  23: 1038854.992 ops/s
Iteration  24: 1041047.065 ops/s
Iteration  25: 1037789.760 ops/s
Iteration  26: 1042957.855 ops/s
Iteration  27: 1036604.825 ops/s
Iteration  28: 1039987.623 ops/s
Iteration  29: 1041568.892 ops/s
Iteration  30: 1038673.180 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next":
  1038897.198 ±(99.9%) 1599.971 ops/s [Average]
  (min, avg, max) = (1033370.313, 1038897.198, 1043441.063), stdev = 2394.762
  CI (99.9%): [1037297.226, 1040497.169] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                        Mode  Cnt        Score      Error  Units
UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next  thrpt   30  1038897.198 ± 1599.971  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 645310.435 ops/s
# Warmup Iteration   2: 1373703.845 ops/s
# Warmup Iteration   3: 1368650.813 ops/s
# Warmup Iteration   4: 1136501.123 ops/s
# Warmup Iteration   5: 1361147.816 ops/s
# Warmup Iteration   6: 1367248.475 ops/s
# Warmup Iteration   7: 1353821.697 ops/s
# Warmup Iteration   8: 1365442.344 ops/s
# Warmup Iteration   9: 1368093.133 ops/s
# Warmup Iteration  10: 1357668.764 ops/s
# Warmup Iteration  11: 1348031.333 ops/s
# Warmup Iteration  12: 1355414.287 ops/s
# Warmup Iteration  13: 1362903.180 ops/s
# Warmup Iteration  14: 1357750.930 ops/s
# Warmup Iteration  15: 1370350.352 ops/s
# Warmup Iteration  16: 1357788.455 ops/s
# Warmup Iteration  17: 1355532.455 ops/s
# Warmup Iteration  18: 1351900.072 ops/s
# Warmup Iteration  19: 1343211.380 ops/s
# Warmup Iteration  20: 1335388.373 ops/s
# Warmup Iteration  21: 1356843.749 ops/s
# Warmup Iteration  22: 1365991.852 ops/s
# Warmup Iteration  23: 1360357.583 ops/s
# Warmup Iteration  24: 1362002.065 ops/s
# Warmup Iteration  25: 1349832.783 ops/s
# Warmup Iteration  26: 1359453.746 ops/s
# Warmup Iteration  27: 1350039.053 ops/s
# Warmup Iteration  28: 1355104.545 ops/s
# Warmup Iteration  29: 1362673.820 ops/s
# Warmup Iteration  30: 1347756.468 ops/s
Iteration   1: 1363180.277 ops/s
Iteration   2: 1360933.651 ops/s
Iteration   3: 1360968.079 ops/s
Iteration   4: 1347398.229 ops/s
Iteration   5: 1353101.908 ops/s
Iteration   6: 1342197.052 ops/s
Iteration   7: 1361806.684 ops/s
Iteration   8: 1358757.497 ops/s
Iteration   9: 1351226.255 ops/s
Iteration  10: 1359148.025 ops/s
Iteration  11: 1356130.484 ops/s
Iteration  12: 1346035.716 ops/s
Iteration  13: 1365531.423 ops/s
Iteration  14: 1344465.853 ops/s
Iteration  15: 1345579.402 ops/s
Iteration  16: 1357042.054 ops/s
Iteration  17: 1370954.962 ops/s
Iteration  18: 1362354.276 ops/s
Iteration  19: 1367343.736 ops/s
Iteration  20: 1351765.087 ops/s
Iteration  21: 1345360.926 ops/s
Iteration  22: 1337399.644 ops/s
Iteration  23: 1359045.320 ops/s
Iteration  24: 1354716.773 ops/s
Iteration  25: 1385882.757 ops/s
Iteration  26: 1378128.660 ops/s
Iteration  27: 1358073.225 ops/s
Iteration  28: 1360924.612 ops/s
Iteration  29: 1354215.226 ops/s
Iteration  30: 1358102.538 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_makeString":
  1357259.011 ±(99.9%) 6943.631 ops/s [Average]
  (min, avg, max) = (1337399.644, 1357259.011, 1385882.757), stdev = 10392.901
  CI (99.9%): [1350315.380, 1364202.642] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_makeString  thrpt   30  1357259.011 ± 6943.631  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_newCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_newCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 168527201.454 ops/s
# Warmup Iteration   2: 300835721.781 ops/s
# Warmup Iteration   3: 279293332.691 ops/s
# Warmup Iteration   4: 314268378.497 ops/s
# Warmup Iteration   5: 314797331.843 ops/s
# Warmup Iteration   6: 314099494.761 ops/s
# Warmup Iteration   7: 314899762.649 ops/s
# Warmup Iteration   8: 313475381.230 ops/s
# Warmup Iteration   9: 314086639.032 ops/s
# Warmup Iteration  10: 313929507.031 ops/s
# Warmup Iteration  11: 314207449.309 ops/s
# Warmup Iteration  12: 312677128.904 ops/s
# Warmup Iteration  13: 313371756.349 ops/s
# Warmup Iteration  14: 314965810.070 ops/s
# Warmup Iteration  15: 314960273.540 ops/s
# Warmup Iteration  16: 313848519.101 ops/s
# Warmup Iteration  17: 314332506.154 ops/s
# Warmup Iteration  18: 314758531.783 ops/s
# Warmup Iteration  19: 314843160.630 ops/s
# Warmup Iteration  20: 314634038.563 ops/s
# Warmup Iteration  21: 311750252.515 ops/s
# Warmup Iteration  22: 314846741.743 ops/s
# Warmup Iteration  23: 312812733.604 ops/s
# Warmup Iteration  24: 314972971.687 ops/s
# Warmup Iteration  25: 314649407.091 ops/s
# Warmup Iteration  26: 313734100.448 ops/s
# Warmup Iteration  27: 313857756.257 ops/s
# Warmup Iteration  28: 313781252.835 ops/s
# Warmup Iteration  29: 313303390.111 ops/s
# Warmup Iteration  30: 314328075.920 ops/s
Iteration   1: 313744132.283 ops/s
Iteration   2: 311740468.659 ops/s
Iteration   3: 315058311.642 ops/s
Iteration   4: 314877795.177 ops/s
Iteration   5: 315026568.257 ops/s
Iteration   6: 316186391.685 ops/s
Iteration   7: 312440055.196 ops/s
Iteration   8: 313208523.323 ops/s
Iteration   9: 314276140.934 ops/s
Iteration  10: 314093826.379 ops/s
Iteration  11: 314424356.840 ops/s
Iteration  12: 313627166.185 ops/s
Iteration  13: 312675231.879 ops/s
Iteration  14: 314478995.577 ops/s
Iteration  15: 314321405.622 ops/s
Iteration  16: 315610743.800 ops/s
Iteration  17: 314141507.507 ops/s
Iteration  18: 314880571.871 ops/s
Iteration  19: 306006122.907 ops/s
Iteration  20: 313657385.538 ops/s
Iteration  21: 316183944.997 ops/s
Iteration  22: 309525396.164 ops/s
Iteration  23: 314261910.941 ops/s
Iteration  24: 314468433.666 ops/s
Iteration  25: 314533088.788 ops/s
Iteration  26: 313511281.397 ops/s
Iteration  27: 315524956.574 ops/s
Iteration  28: 314023711.998 ops/s
Iteration  29: 313892352.147 ops/s
Iteration  30: 313768593.766 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_newCollection":
  313805645.723 ±(99.9%) 1317184.366 ops/s [Average]
  (min, avg, max) = (306006122.907, 313805645.723, 316186391.685), stdev = 1971499.700
  CI (99.9%): [312488461.357, 315122830.089] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt          Score         Error  Units
UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_newCollection  thrpt   30  313805645.723 ± 1317184.366  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_newCollectionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_newCollectionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2356275.600 ops/s
# Warmup Iteration   2: 4591649.554 ops/s
# Warmup Iteration   3: 4462507.039 ops/s
# Warmup Iteration   4: 4945376.794 ops/s
# Warmup Iteration   5: 4948526.075 ops/s
# Warmup Iteration   6: 4944620.224 ops/s
# Warmup Iteration   7: 4951522.131 ops/s
# Warmup Iteration   8: 4923706.722 ops/s
# Warmup Iteration   9: 4938530.437 ops/s
# Warmup Iteration  10: 4940886.982 ops/s
# Warmup Iteration  11: 4926000.715 ops/s
# Warmup Iteration  12: 4955503.086 ops/s
# Warmup Iteration  13: 4929942.791 ops/s
# Warmup Iteration  14: 4913915.452 ops/s
# Warmup Iteration  15: 4930321.852 ops/s
# Warmup Iteration  16: 4943763.864 ops/s
# Warmup Iteration  17: 4938193.575 ops/s
# Warmup Iteration  18: 4954789.340 ops/s
# Warmup Iteration  19: 4927653.175 ops/s
# Warmup Iteration  20: 4945763.114 ops/s
# Warmup Iteration  21: 4949255.695 ops/s
# Warmup Iteration  22: 4939641.200 ops/s
# Warmup Iteration  23: 4946501.358 ops/s
# Warmup Iteration  24: 4963338.642 ops/s
# Warmup Iteration  25: 4944624.355 ops/s
# Warmup Iteration  26: 4920842.842 ops/s
# Warmup Iteration  27: 4929110.457 ops/s
# Warmup Iteration  28: 4936527.910 ops/s
# Warmup Iteration  29: 4947390.974 ops/s
# Warmup Iteration  30: 4946131.257 ops/s
Iteration   1: 4870258.513 ops/s
Iteration   2: 4950871.388 ops/s
Iteration   3: 4932892.652 ops/s
Iteration   4: 4934318.858 ops/s
Iteration   5: 4939170.143 ops/s
Iteration   6: 4945936.916 ops/s
Iteration   7: 4936283.356 ops/s
Iteration   8: 4941714.743 ops/s
Iteration   9: 4959752.431 ops/s
Iteration  10: 4933533.291 ops/s
Iteration  11: 4935531.375 ops/s
Iteration  12: 4916324.991 ops/s
Iteration  13: 4954373.508 ops/s
Iteration  14: 4949756.232 ops/s
Iteration  15: 4938844.198 ops/s
Iteration  16: 4935395.463 ops/s
Iteration  17: 4953365.794 ops/s
Iteration  18: 4962296.157 ops/s
Iteration  19: 4959204.806 ops/s
Iteration  20: 4945380.574 ops/s
Iteration  21: 4957301.966 ops/s
Iteration  22: 4958437.832 ops/s
Iteration  23: 4946655.739 ops/s
Iteration  24: 4930788.440 ops/s
Iteration  25: 4933817.446 ops/s
Iteration  26: 4932885.446 ops/s
Iteration  27: 4956606.852 ops/s
Iteration  28: 4918767.215 ops/s
Iteration  29: 4876659.196 ops/s
Iteration  30: 4959337.888 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_newCollectionWith":
  4938882.114 ±(99.9%) 14393.889 ops/s [Average]
  (min, avg, max) = (4870258.513, 4938882.114, 4962296.157), stdev = 21544.096
  CI (99.9%): [4924488.225, 4953276.002] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_newCollectionWith  thrpt   30  4938882.114 ± 14393.889  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1260191.394 ops/s
# Warmup Iteration   2: 2638321.400 ops/s
# Warmup Iteration   3: 2223445.614 ops/s
# Warmup Iteration   4: 2647142.693 ops/s
# Warmup Iteration   5: 2648898.254 ops/s
# Warmup Iteration   6: 2647644.814 ops/s
# Warmup Iteration   7: 2650328.581 ops/s
# Warmup Iteration   8: 2623016.777 ops/s
# Warmup Iteration   9: 2647507.702 ops/s
# Warmup Iteration  10: 2651985.408 ops/s
# Warmup Iteration  11: 2653066.639 ops/s
# Warmup Iteration  12: 2647700.780 ops/s
# Warmup Iteration  13: 2651820.346 ops/s
# Warmup Iteration  14: 2652948.941 ops/s
# Warmup Iteration  15: 2647924.169 ops/s
# Warmup Iteration  16: 2650883.740 ops/s
# Warmup Iteration  17: 2656194.212 ops/s
# Warmup Iteration  18: 2649382.912 ops/s
# Warmup Iteration  19: 2654386.597 ops/s
# Warmup Iteration  20: 2654589.478 ops/s
# Warmup Iteration  21: 2653473.974 ops/s
# Warmup Iteration  22: 2653447.964 ops/s
# Warmup Iteration  23: 2645837.923 ops/s
# Warmup Iteration  24: 2654755.519 ops/s
# Warmup Iteration  25: 2657505.363 ops/s
# Warmup Iteration  26: 2639297.591 ops/s
# Warmup Iteration  27: 2643551.570 ops/s
# Warmup Iteration  28: 2658126.548 ops/s
# Warmup Iteration  29: 2644591.235 ops/s
# Warmup Iteration  30: 2644747.624 ops/s
Iteration   1: 2656444.350 ops/s
Iteration   2: 2644444.588 ops/s
Iteration   3: 2643355.839 ops/s
Iteration   4: 2642661.782 ops/s
Iteration   5: 2643517.111 ops/s
Iteration   6: 2636711.805 ops/s
Iteration   7: 2651157.019 ops/s
Iteration   8: 2650066.335 ops/s
Iteration   9: 2655724.083 ops/s
Iteration  10: 2654500.679 ops/s
Iteration  11: 2646480.802 ops/s
Iteration  12: 2633163.120 ops/s
Iteration  13: 2652823.896 ops/s
Iteration  14: 2647706.404 ops/s
Iteration  15: 2652258.992 ops/s
Iteration  16: 2649793.813 ops/s
Iteration  17: 2649613.059 ops/s
Iteration  18: 2651390.503 ops/s
Iteration  19: 2650827.453 ops/s
Iteration  20: 2659019.599 ops/s
Iteration  21: 2663046.371 ops/s
Iteration  22: 2648410.685 ops/s
Iteration  23: 2652769.827 ops/s
Iteration  24: 2645844.367 ops/s
Iteration  25: 2654487.794 ops/s
Iteration  26: 2635619.447 ops/s
Iteration  27: 2652833.945 ops/s
Iteration  28: 2653083.445 ops/s
Iteration  29: 2648815.952 ops/s
Iteration  30: 2651557.346 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_noneSatisfy":
  2649271.014 ±(99.9%) 4424.392 ops/s [Average]
  (min, avg, max) = (2633163.120, 2649271.014, 2663046.371), stdev = 6622.222
  CI (99.9%): [2644846.622, 2653695.405] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_noneSatisfy  thrpt   30  2649271.014 ± 4424.392  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_notEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_notEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4148642.370 ops/s
# Warmup Iteration   2: 6799367.150 ops/s
# Warmup Iteration   3: 7957669.260 ops/s
# Warmup Iteration   4: 7977890.383 ops/s
# Warmup Iteration   5: 8094180.628 ops/s
# Warmup Iteration   6: 8030466.814 ops/s
# Warmup Iteration   7: 7977878.004 ops/s
# Warmup Iteration   8: 7971453.909 ops/s
# Warmup Iteration   9: 8078504.559 ops/s
# Warmup Iteration  10: 7964600.585 ops/s
# Warmup Iteration  11: 7953719.947 ops/s
# Warmup Iteration  12: 8015257.669 ops/s
# Warmup Iteration  13: 7966806.516 ops/s
# Warmup Iteration  14: 8035224.955 ops/s
# Warmup Iteration  15: 8021711.312 ops/s
# Warmup Iteration  16: 8039360.095 ops/s
# Warmup Iteration  17: 8029212.105 ops/s
# Warmup Iteration  18: 8018088.872 ops/s
# Warmup Iteration  19: 8001141.158 ops/s
# Warmup Iteration  20: 7983361.144 ops/s
# Warmup Iteration  21: 8042757.694 ops/s
# Warmup Iteration  22: 8013949.984 ops/s
# Warmup Iteration  23: 8012965.846 ops/s
# Warmup Iteration  24: 8024669.673 ops/s
# Warmup Iteration  25: 8021137.301 ops/s
# Warmup Iteration  26: 8002539.329 ops/s
# Warmup Iteration  27: 7988415.677 ops/s
# Warmup Iteration  28: 8055860.376 ops/s
# Warmup Iteration  29: 8037373.370 ops/s
# Warmup Iteration  30: 8011570.179 ops/s
Iteration   1: 8032684.909 ops/s
Iteration   2: 8067785.991 ops/s
Iteration   3: 8076076.745 ops/s
Iteration   4: 7907657.569 ops/s
Iteration   5: 7984120.826 ops/s
Iteration   6: 8025211.714 ops/s
Iteration   7: 8033152.304 ops/s
Iteration   8: 8039589.584 ops/s
Iteration   9: 8009960.657 ops/s
Iteration  10: 7997681.054 ops/s
Iteration  11: 7975171.654 ops/s
Iteration  12: 8073129.951 ops/s
Iteration  13: 8007681.370 ops/s
Iteration  14: 8048922.487 ops/s
Iteration  15: 8032573.022 ops/s
Iteration  16: 7960803.552 ops/s
Iteration  17: 8030034.705 ops/s
Iteration  18: 8046357.927 ops/s
Iteration  19: 7977818.809 ops/s
Iteration  20: 8060022.864 ops/s
Iteration  21: 8046548.355 ops/s
Iteration  22: 8005596.981 ops/s
Iteration  23: 8011795.151 ops/s
Iteration  24: 8049341.707 ops/s
Iteration  25: 8081763.386 ops/s
Iteration  26: 7866919.528 ops/s
Iteration  27: 8022115.847 ops/s
Iteration  28: 8045144.012 ops/s
Iteration  29: 8063985.643 ops/s
Iteration  30: 7972217.364 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_notEmpty":
  8018395.522 ±(99.9%) 32401.199 ops/s [Average]
  (min, avg, max) = (7866919.528, 8018395.522, 8081763.386), stdev = 48496.593
  CI (99.9%): [7985994.324, 8050796.721] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_notEmpty  thrpt   30  8018395.522 ± 32401.199  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_reduce$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_reduce

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1477004.141 ops/s
# Warmup Iteration   2: 3158055.420 ops/s
# Warmup Iteration   3: 2639503.094 ops/s
# Warmup Iteration   4: 3172650.711 ops/s
# Warmup Iteration   5: 3172133.851 ops/s
# Warmup Iteration   6: 3178814.301 ops/s
# Warmup Iteration   7: 3167443.974 ops/s
# Warmup Iteration   8: 3178082.163 ops/s
# Warmup Iteration   9: 3172179.449 ops/s
# Warmup Iteration  10: 3144674.786 ops/s
# Warmup Iteration  11: 3173954.769 ops/s
# Warmup Iteration  12: 3165319.818 ops/s
# Warmup Iteration  13: 3131899.284 ops/s
# Warmup Iteration  14: 3173828.477 ops/s
# Warmup Iteration  15: 3173832.350 ops/s
# Warmup Iteration  16: 3166526.097 ops/s
# Warmup Iteration  17: 3170967.228 ops/s
# Warmup Iteration  18: 3170131.785 ops/s
# Warmup Iteration  19: 3178548.980 ops/s
# Warmup Iteration  20: 3176940.732 ops/s
# Warmup Iteration  21: 3174832.299 ops/s
# Warmup Iteration  22: 3170653.561 ops/s
# Warmup Iteration  23: 3167428.756 ops/s
# Warmup Iteration  24: 3139608.916 ops/s
# Warmup Iteration  25: 3165076.813 ops/s
# Warmup Iteration  26: 3180172.997 ops/s
# Warmup Iteration  27: 3174254.548 ops/s
# Warmup Iteration  28: 3178468.952 ops/s
# Warmup Iteration  29: 3171340.229 ops/s
# Warmup Iteration  30: 3170902.822 ops/s
Iteration   1: 3171822.727 ops/s
Iteration   2: 3154895.095 ops/s
Iteration   3: 3166810.922 ops/s
Iteration   4: 3174463.598 ops/s
Iteration   5: 3171128.835 ops/s
Iteration   6: 3181731.353 ops/s
Iteration   7: 3171000.492 ops/s
Iteration   8: 3174345.423 ops/s
Iteration   9: 3174859.367 ops/s
Iteration  10: 3180568.199 ops/s
Iteration  11: 3172332.571 ops/s
Iteration  12: 3164210.486 ops/s
Iteration  13: 3173797.994 ops/s
Iteration  14: 3172157.439 ops/s
Iteration  15: 3173989.806 ops/s
Iteration  16: 3179444.036 ops/s
Iteration  17: 3174587.365 ops/s
Iteration  18: 3182769.532 ops/s
Iteration  19: 3185215.477 ops/s
Iteration  20: 3171769.529 ops/s
Iteration  21: 3172772.484 ops/s
Iteration  22: 3177621.175 ops/s
Iteration  23: 3125402.783 ops/s
Iteration  24: 3179880.361 ops/s
Iteration  25: 3178425.636 ops/s
Iteration  26: 3172378.223 ops/s
Iteration  27: 3167126.293 ops/s
Iteration  28: 3169500.964 ops/s
Iteration  29: 3181631.790 ops/s
Iteration  30: 3173470.378 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_reduce":
  3172337.011 ±(99.9%) 7189.913 ops/s [Average]
  (min, avg, max) = (3125402.783, 3172337.011, 3185215.477), stdev = 10761.524
  CI (99.9%): [3165147.098, 3179526.924] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_reduce  thrpt   30  3172337.011 ± 7189.913  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_reduceIfEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_reduceIfEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 791013.209 ops/s
# Warmup Iteration   2: 1727291.745 ops/s
# Warmup Iteration   3: 1721597.639 ops/s
# Warmup Iteration   4: 1440736.083 ops/s
# Warmup Iteration   5: 1725404.588 ops/s
# Warmup Iteration   6: 1727587.224 ops/s
# Warmup Iteration   7: 1729039.642 ops/s
# Warmup Iteration   8: 1728468.435 ops/s
# Warmup Iteration   9: 1729943.867 ops/s
# Warmup Iteration  10: 1727954.144 ops/s
# Warmup Iteration  11: 1729388.431 ops/s
# Warmup Iteration  12: 1724818.419 ops/s
# Warmup Iteration  13: 1727613.312 ops/s
# Warmup Iteration  14: 1727792.354 ops/s
# Warmup Iteration  15: 1727429.410 ops/s
# Warmup Iteration  16: 1726551.140 ops/s
# Warmup Iteration  17: 1726618.119 ops/s
# Warmup Iteration  18: 1727545.920 ops/s
# Warmup Iteration  19: 1725504.249 ops/s
# Warmup Iteration  20: 1730767.928 ops/s
# Warmup Iteration  21: 1732181.633 ops/s
# Warmup Iteration  22: 1725621.287 ops/s
# Warmup Iteration  23: 1727893.676 ops/s
# Warmup Iteration  24: 1726172.929 ops/s
# Warmup Iteration  25: 1719482.274 ops/s
# Warmup Iteration  26: 1724812.597 ops/s
# Warmup Iteration  27: 1728880.407 ops/s
# Warmup Iteration  28: 1729419.710 ops/s
# Warmup Iteration  29: 1730604.523 ops/s
# Warmup Iteration  30: 1723108.495 ops/s
Iteration   1: 1697160.072 ops/s
Iteration   2: 1696949.643 ops/s
Iteration   3: 1725518.927 ops/s
Iteration   4: 1729599.961 ops/s
Iteration   5: 1723940.884 ops/s
Iteration   6: 1704124.265 ops/s
Iteration   7: 1723457.438 ops/s
Iteration   8: 1730187.482 ops/s
Iteration   9: 1731860.535 ops/s
Iteration  10: 1730552.021 ops/s
Iteration  11: 1729455.929 ops/s
Iteration  12: 1727742.686 ops/s
Iteration  13: 1733047.967 ops/s
Iteration  14: 1727857.055 ops/s
Iteration  15: 1730143.248 ops/s
Iteration  16: 1726965.592 ops/s
Iteration  17: 1728095.452 ops/s
Iteration  18: 1728446.540 ops/s
Iteration  19: 1723560.212 ops/s
Iteration  20: 1730932.518 ops/s
Iteration  21: 1729601.559 ops/s
Iteration  22: 1725256.925 ops/s
Iteration  23: 1728209.617 ops/s
Iteration  24: 1730919.959 ops/s
Iteration  25: 1701519.655 ops/s
Iteration  26: 1729638.360 ops/s
Iteration  27: 1732481.013 ops/s
Iteration  28: 1730984.400 ops/s
Iteration  29: 1700694.112 ops/s
Iteration  30: 1731397.653 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_reduceIfEmpty":
  1724010.056 ±(99.9%) 7495.732 ops/s [Average]
  (min, avg, max) = (1696949.643, 1724010.056, 1733047.967), stdev = 11219.259
  CI (99.9%): [1716514.324, 1731505.788] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score      Error  Units
UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_reduceIfEmpty  thrpt   30  1724010.056 ± 7495.732  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 670310.518 ops/s
# Warmup Iteration   2: 682889.768 ops/s
# Warmup Iteration   3: 891488.862 ops/s
# Warmup Iteration   4: 898615.135 ops/s
# Warmup Iteration   5: 902403.534 ops/s
# Warmup Iteration   6: 895709.326 ops/s
# Warmup Iteration   7: 900558.931 ops/s
# Warmup Iteration   8: 900849.508 ops/s
# Warmup Iteration   9: 894620.665 ops/s
# Warmup Iteration  10: 902018.289 ops/s
# Warmup Iteration  11: 902004.739 ops/s
# Warmup Iteration  12: 751631.653 ops/s
# Warmup Iteration  13: 905344.249 ops/s
# Warmup Iteration  14: 900477.518 ops/s
# Warmup Iteration  15: 900881.953 ops/s
# Warmup Iteration  16: 903350.896 ops/s
# Warmup Iteration  17: 952420.530 ops/s
# Warmup Iteration  18: 953369.490 ops/s
# Warmup Iteration  19: 948005.031 ops/s
# Warmup Iteration  20: 946564.496 ops/s
# Warmup Iteration  21: 953727.035 ops/s
# Warmup Iteration  22: 951547.025 ops/s
# Warmup Iteration  23: 953127.131 ops/s
# Warmup Iteration  24: 952112.952 ops/s
# Warmup Iteration  25: 953342.520 ops/s
# Warmup Iteration  26: 951796.855 ops/s
# Warmup Iteration  27: 949707.530 ops/s
# Warmup Iteration  28: 944862.804 ops/s
# Warmup Iteration  29: 954749.590 ops/s
# Warmup Iteration  30: 950690.604 ops/s
Iteration   1: 955096.039 ops/s
Iteration   2: 955283.169 ops/s
Iteration   3: 956486.059 ops/s
Iteration   4: 954951.094 ops/s
Iteration   5: 954904.123 ops/s
Iteration   6: 955841.397 ops/s
Iteration   7: 954249.601 ops/s
Iteration   8: 947904.153 ops/s
Iteration   9: 952274.878 ops/s
Iteration  10: 954423.544 ops/s
Iteration  11: 950198.570 ops/s
Iteration  12: 954877.699 ops/s
Iteration  13: 951606.239 ops/s
Iteration  14: 959282.265 ops/s
Iteration  15: 951583.669 ops/s
Iteration  16: 955561.738 ops/s
Iteration  17: 956801.022 ops/s
Iteration  18: 953810.688 ops/s
Iteration  19: 950381.097 ops/s
Iteration  20: 952396.747 ops/s
Iteration  21: 955626.307 ops/s
Iteration  22: 953433.129 ops/s
Iteration  23: 948828.993 ops/s
Iteration  24: 955186.667 ops/s
Iteration  25: 955102.408 ops/s
Iteration  26: 956323.785 ops/s
Iteration  27: 953783.191 ops/s
Iteration  28: 958478.013 ops/s
Iteration  29: 953171.040 ops/s
Iteration  30: 959730.759 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows":
  954252.603 ±(99.9%) 1859.497 ops/s [Average]
  (min, avg, max) = (947904.153, 954252.603, 959730.759), stdev = 2783.207
  CI (99.9%): [952393.106, 956112.099] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score      Error  Units
UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows  thrpt   30  954252.603 ± 1859.497  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3576254.994 ops/s
# Warmup Iteration   2: 9758970.085 ops/s
# Warmup Iteration   3: 8251283.185 ops/s
# Warmup Iteration   4: 9791554.190 ops/s
# Warmup Iteration   5: 9784441.396 ops/s
# Warmup Iteration   6: 9770679.364 ops/s
# Warmup Iteration   7: 9776907.486 ops/s
# Warmup Iteration   8: 9788653.961 ops/s
# Warmup Iteration   9: 9789721.347 ops/s
# Warmup Iteration  10: 9790689.441 ops/s
# Warmup Iteration  11: 9788077.911 ops/s
# Warmup Iteration  12: 9781979.772 ops/s
# Warmup Iteration  13: 9780168.085 ops/s
# Warmup Iteration  14: 9772553.736 ops/s
# Warmup Iteration  15: 9776571.700 ops/s
# Warmup Iteration  16: 9779664.504 ops/s
# Warmup Iteration  17: 9781909.373 ops/s
# Warmup Iteration  18: 9765829.485 ops/s
# Warmup Iteration  19: 9765011.353 ops/s
# Warmup Iteration  20: 9801016.075 ops/s
# Warmup Iteration  21: 9798073.312 ops/s
# Warmup Iteration  22: 9813677.659 ops/s
# Warmup Iteration  23: 9792648.603 ops/s
# Warmup Iteration  24: 9750046.690 ops/s
# Warmup Iteration  25: 9786299.798 ops/s
# Warmup Iteration  26: 9797129.777 ops/s
# Warmup Iteration  27: 9807060.652 ops/s
# Warmup Iteration  28: 9775885.769 ops/s
# Warmup Iteration  29: 9794038.684 ops/s
# Warmup Iteration  30: 9798268.073 ops/s
Iteration   1: 9777149.137 ops/s
Iteration   2: 9813314.126 ops/s
Iteration   3: 9615614.194 ops/s
Iteration   4: 9782608.031 ops/s
Iteration   5: 9781378.590 ops/s
Iteration   6: 9797835.387 ops/s
Iteration   7: 9796054.493 ops/s
Iteration   8: 9794911.598 ops/s
Iteration   9: 9804669.151 ops/s
Iteration  10: 9777990.867 ops/s
Iteration  11: 9770610.864 ops/s
Iteration  12: 9755994.489 ops/s
Iteration  13: 9811828.762 ops/s
Iteration  14: 9782035.417 ops/s
Iteration  15: 9772041.943 ops/s
Iteration  16: 9815002.998 ops/s
Iteration  17: 9831690.723 ops/s
Iteration  18: 9745906.361 ops/s
Iteration  19: 9823268.578 ops/s
Iteration  20: 9762758.197 ops/s
Iteration  21: 9819377.225 ops/s
Iteration  22: 9791731.841 ops/s
Iteration  23: 9829775.007 ops/s
Iteration  24: 9843666.283 ops/s
Iteration  25: 9781141.480 ops/s
Iteration  26: 9814773.914 ops/s
Iteration  27: 9789322.551 ops/s
Iteration  28: 9770520.028 ops/s
Iteration  29: 9772859.266 ops/s
Iteration  30: 9809600.938 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_reject":
  9787847.748 ±(99.9%) 26959.665 ops/s [Average]
  (min, avg, max) = (9615614.194, 9787847.748, 9843666.283), stdev = 40351.960
  CI (99.9%): [9760888.083, 9814807.413] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_reject  thrpt   30  9787847.748 ± 26959.665  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5028571.283 ops/s
# Warmup Iteration   2: 9164909.826 ops/s
# Warmup Iteration   3: 9686458.523 ops/s
# Warmup Iteration   4: 9663436.665 ops/s
# Warmup Iteration   5: 8098430.557 ops/s
# Warmup Iteration   6: 9680923.558 ops/s
# Warmup Iteration   7: 9659286.844 ops/s
# Warmup Iteration   8: 9692164.933 ops/s
# Warmup Iteration   9: 9665169.954 ops/s
# Warmup Iteration  10: 9668847.491 ops/s
# Warmup Iteration  11: 9682663.989 ops/s
# Warmup Iteration  12: 9665355.613 ops/s
# Warmup Iteration  13: 9684864.413 ops/s
# Warmup Iteration  14: 9695837.299 ops/s
# Warmup Iteration  15: 9676870.433 ops/s
# Warmup Iteration  16: 9678577.351 ops/s
# Warmup Iteration  17: 9671324.503 ops/s
# Warmup Iteration  18: 9684067.915 ops/s
# Warmup Iteration  19: 9718216.964 ops/s
# Warmup Iteration  20: 9681050.159 ops/s
# Warmup Iteration  21: 9683263.495 ops/s
# Warmup Iteration  22: 9667545.169 ops/s
# Warmup Iteration  23: 9693015.431 ops/s
# Warmup Iteration  24: 9688802.894 ops/s
# Warmup Iteration  25: 9672691.223 ops/s
# Warmup Iteration  26: 9682633.786 ops/s
# Warmup Iteration  27: 9681438.897 ops/s
# Warmup Iteration  28: 9674228.700 ops/s
# Warmup Iteration  29: 9672743.220 ops/s
# Warmup Iteration  30: 9675145.424 ops/s
Iteration   1: 9672003.780 ops/s
Iteration   2: 9700162.709 ops/s
Iteration   3: 9676693.881 ops/s
Iteration   4: 9685874.366 ops/s
Iteration   5: 9688652.747 ops/s
Iteration   6: 9656824.471 ops/s
Iteration   7: 9673944.106 ops/s
Iteration   8: 9656464.016 ops/s
Iteration   9: 9663715.167 ops/s
Iteration  10: 9679873.395 ops/s
Iteration  11: 9677038.374 ops/s
Iteration  12: 9679525.265 ops/s
Iteration  13: 9662208.289 ops/s
Iteration  14: 9691083.447 ops/s
Iteration  15: 9651137.091 ops/s
Iteration  16: 9676483.968 ops/s
Iteration  17: 9697740.075 ops/s
Iteration  18: 9736204.792 ops/s
Iteration  19: 9679258.064 ops/s
Iteration  20: 9693253.941 ops/s
Iteration  21: 9660144.847 ops/s
Iteration  22: 9679799.400 ops/s
Iteration  23: 9655481.647 ops/s
Iteration  24: 9664353.947 ops/s
Iteration  25: 9670029.164 ops/s
Iteration  26: 9648228.093 ops/s
Iteration  27: 9639017.221 ops/s
Iteration  28: 9707853.117 ops/s
Iteration  29: 9665077.590 ops/s
Iteration  30: 9660590.214 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_remove":
  9674957.240 ±(99.9%) 13344.070 ops/s [Average]
  (min, avg, max) = (9639017.221, 9674957.240, 9736204.792), stdev = 19972.778
  CI (99.9%): [9661613.169, 9688301.310] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_remove  thrpt   30  9674957.240 ± 13344.070  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 704753.017 ops/s
# Warmup Iteration   2: 799799.053 ops/s
# Warmup Iteration   3: 1006292.252 ops/s
# Warmup Iteration   4: 1003286.215 ops/s
# Warmup Iteration   5: 996124.187 ops/s
# Warmup Iteration   6: 995622.365 ops/s
# Warmup Iteration   7: 997936.234 ops/s
# Warmup Iteration   8: 996930.731 ops/s
# Warmup Iteration   9: 958617.191 ops/s
# Warmup Iteration  10: 880283.121 ops/s
# Warmup Iteration  11: 991905.738 ops/s
# Warmup Iteration  12: 998063.752 ops/s
# Warmup Iteration  13: 995846.997 ops/s
# Warmup Iteration  14: 998532.893 ops/s
# Warmup Iteration  15: 997482.279 ops/s
# Warmup Iteration  16: 996352.734 ops/s
# Warmup Iteration  17: 1059168.709 ops/s
# Warmup Iteration  18: 1059456.062 ops/s
# Warmup Iteration  19: 1060165.848 ops/s
# Warmup Iteration  20: 1059314.415 ops/s
# Warmup Iteration  21: 1060064.384 ops/s
# Warmup Iteration  22: 1059755.919 ops/s
# Warmup Iteration  23: 1061522.724 ops/s
# Warmup Iteration  24: 1061583.418 ops/s
# Warmup Iteration  25: 1055371.916 ops/s
# Warmup Iteration  26: 1061350.963 ops/s
# Warmup Iteration  27: 1061329.479 ops/s
# Warmup Iteration  28: 1059297.773 ops/s
# Warmup Iteration  29: 1061164.984 ops/s
# Warmup Iteration  30: 1050328.842 ops/s
Iteration   1: 1059419.324 ops/s
Iteration   2: 1062213.981 ops/s
Iteration   3: 1058969.663 ops/s
Iteration   4: 1061101.942 ops/s
Iteration   5: 1062267.278 ops/s
Iteration   6: 1058213.721 ops/s
Iteration   7: 1062172.193 ops/s
Iteration   8: 1060873.240 ops/s
Iteration   9: 1040065.199 ops/s
Iteration  10: 1055249.407 ops/s
Iteration  11: 1059713.117 ops/s
Iteration  12: 1054959.402 ops/s
Iteration  13: 1060564.155 ops/s
Iteration  14: 1061943.854 ops/s
Iteration  15: 1052992.940 ops/s
Iteration  16: 1054936.192 ops/s
Iteration  17: 1057308.705 ops/s
Iteration  18: 1056460.648 ops/s
Iteration  19: 1056520.147 ops/s
Iteration  20: 1043541.854 ops/s
Iteration  21: 1056106.174 ops/s
Iteration  22: 1060493.081 ops/s
Iteration  23: 1058469.181 ops/s
Iteration  24: 1059962.196 ops/s
Iteration  25: 1057859.780 ops/s
Iteration  26: 1061887.979 ops/s
Iteration  27: 1060956.998 ops/s
Iteration  28: 1060653.342 ops/s
Iteration  29: 1060298.594 ops/s
Iteration  30: 1056425.512 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_removeAll":
  1057753.327 ±(99.9%) 3368.204 ops/s [Average]
  (min, avg, max) = (1040065.199, 1057753.327, 1062267.278), stdev = 5041.369
  CI (99.9%): [1054385.123, 1061121.531] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_removeAll  thrpt   30  1057753.327 ± 3368.204  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_removeAll_iterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_removeAll_iterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 690240.953 ops/s
# Warmup Iteration   2: 808440.033 ops/s
# Warmup Iteration   3: 994897.229 ops/s
# Warmup Iteration   4: 995034.776 ops/s
# Warmup Iteration   5: 994638.182 ops/s
# Warmup Iteration   6: 994942.178 ops/s
# Warmup Iteration   7: 1000469.497 ops/s
# Warmup Iteration   8: 997101.631 ops/s
# Warmup Iteration   9: 837572.275 ops/s
# Warmup Iteration  10: 999146.989 ops/s
# Warmup Iteration  11: 995803.150 ops/s
# Warmup Iteration  12: 998569.344 ops/s
# Warmup Iteration  13: 996289.841 ops/s
# Warmup Iteration  14: 993904.865 ops/s
# Warmup Iteration  15: 995431.714 ops/s
# Warmup Iteration  16: 993372.117 ops/s
# Warmup Iteration  17: 1056959.007 ops/s
# Warmup Iteration  18: 1059385.332 ops/s
# Warmup Iteration  19: 1058739.430 ops/s
# Warmup Iteration  20: 1057083.110 ops/s
# Warmup Iteration  21: 1058472.905 ops/s
# Warmup Iteration  22: 1054196.621 ops/s
# Warmup Iteration  23: 1060456.294 ops/s
# Warmup Iteration  24: 1058056.096 ops/s
# Warmup Iteration  25: 1048954.148 ops/s
# Warmup Iteration  26: 1056898.293 ops/s
# Warmup Iteration  27: 1054639.629 ops/s
# Warmup Iteration  28: 1058520.094 ops/s
# Warmup Iteration  29: 1055792.617 ops/s
# Warmup Iteration  30: 1055612.900 ops/s
Iteration   1: 1062232.506 ops/s
Iteration   2: 1056884.222 ops/s
Iteration   3: 1054699.059 ops/s
Iteration   4: 1059522.713 ops/s
Iteration   5: 1053741.334 ops/s
Iteration   6: 1059469.268 ops/s
Iteration   7: 1058673.524 ops/s
Iteration   8: 1051329.768 ops/s
Iteration   9: 1057456.395 ops/s
Iteration  10: 1058137.320 ops/s
Iteration  11: 1055079.330 ops/s
Iteration  12: 1059310.866 ops/s
Iteration  13: 1058844.365 ops/s
Iteration  14: 1059372.828 ops/s
Iteration  15: 1061240.745 ops/s
Iteration  16: 1053549.512 ops/s
Iteration  17: 1058152.550 ops/s
Iteration  18: 1059387.565 ops/s
Iteration  19: 1059220.433 ops/s
Iteration  20: 1060161.806 ops/s
Iteration  21: 1058964.758 ops/s
Iteration  22: 1052985.240 ops/s
Iteration  23: 1058620.765 ops/s
Iteration  24: 1056887.832 ops/s
Iteration  25: 1057474.518 ops/s
Iteration  26: 1051924.073 ops/s
Iteration  27: 1057455.122 ops/s
Iteration  28: 1045825.193 ops/s
Iteration  29: 1058821.799 ops/s
Iteration  30: 1060495.938 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_removeAll_iterable":
  1057197.378 ±(99.9%) 2321.687 ops/s [Average]
  (min, avg, max) = (1045825.193, 1057197.378, 1062232.506), stdev = 3474.993
  CI (99.9%): [1054875.691, 1059519.066] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score      Error  Units
UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_removeAll_iterable  thrpt   30  1057197.378 ± 2321.687  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 703502.170 ops/s
# Warmup Iteration   2: 799592.816 ops/s
# Warmup Iteration   3: 1005730.552 ops/s
# Warmup Iteration   4: 999911.326 ops/s
# Warmup Iteration   5: 1000185.585 ops/s
# Warmup Iteration   6: 999281.154 ops/s
# Warmup Iteration   7: 997389.501 ops/s
# Warmup Iteration   8: 999875.412 ops/s
# Warmup Iteration   9: 956237.134 ops/s
# Warmup Iteration  10: 881048.154 ops/s
# Warmup Iteration  11: 996477.473 ops/s
# Warmup Iteration  12: 997851.368 ops/s
# Warmup Iteration  13: 996937.208 ops/s
# Warmup Iteration  14: 996787.676 ops/s
# Warmup Iteration  15: 992264.690 ops/s
# Warmup Iteration  16: 997395.951 ops/s
# Warmup Iteration  17: 1056820.794 ops/s
# Warmup Iteration  18: 1058026.164 ops/s
# Warmup Iteration  19: 1055720.911 ops/s
# Warmup Iteration  20: 1057622.482 ops/s
# Warmup Iteration  21: 1054417.373 ops/s
# Warmup Iteration  22: 1058496.139 ops/s
# Warmup Iteration  23: 1056264.021 ops/s
# Warmup Iteration  24: 1055417.541 ops/s
# Warmup Iteration  25: 1054836.198 ops/s
# Warmup Iteration  26: 1055229.151 ops/s
# Warmup Iteration  27: 1057083.508 ops/s
# Warmup Iteration  28: 1056207.746 ops/s
# Warmup Iteration  29: 1054147.769 ops/s
# Warmup Iteration  30: 1044702.411 ops/s
Iteration   1: 1054490.890 ops/s
Iteration   2: 1055859.423 ops/s
Iteration   3: 1060586.378 ops/s
Iteration   4: 1053205.363 ops/s
Iteration   5: 1049117.125 ops/s
Iteration   6: 1056903.240 ops/s
Iteration   7: 1052863.504 ops/s
Iteration   8: 1053293.165 ops/s
Iteration   9: 1050639.396 ops/s
Iteration  10: 1055027.253 ops/s
Iteration  11: 1052652.655 ops/s
Iteration  12: 1049615.190 ops/s
Iteration  13: 1057659.095 ops/s
Iteration  14: 1055193.111 ops/s
Iteration  15: 1051473.948 ops/s
Iteration  16: 1056447.000 ops/s
Iteration  17: 1057090.996 ops/s
Iteration  18: 1049908.672 ops/s
Iteration  19: 1054734.565 ops/s
Iteration  20: 1054415.584 ops/s
Iteration  21: 1054433.014 ops/s
Iteration  22: 1060785.710 ops/s
Iteration  23: 1057657.204 ops/s
Iteration  24: 1054674.865 ops/s
Iteration  25: 1055794.857 ops/s
Iteration  26: 1051027.635 ops/s
Iteration  27: 1054589.457 ops/s
Iteration  28: 1058071.029 ops/s
Iteration  29: 1055920.321 ops/s
Iteration  30: 1052062.653 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_retainAll":
  1054539.777 ±(99.9%) 1989.275 ops/s [Average]
  (min, avg, max) = (1049117.125, 1054539.777, 1060785.710), stdev = 2977.454
  CI (99.9%): [1052550.502, 1056529.052] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_retainAll  thrpt   30  1054539.777 ± 1989.275  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_retainAll_iterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_retainAll_iterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 684346.497 ops/s
# Warmup Iteration   2: 803670.057 ops/s
# Warmup Iteration   3: 987824.618 ops/s
# Warmup Iteration   4: 984730.943 ops/s
# Warmup Iteration   5: 986289.218 ops/s
# Warmup Iteration   6: 984197.588 ops/s
# Warmup Iteration   7: 987691.944 ops/s
# Warmup Iteration   8: 983790.995 ops/s
# Warmup Iteration   9: 833264.074 ops/s
# Warmup Iteration  10: 988248.409 ops/s
# Warmup Iteration  11: 985797.623 ops/s
# Warmup Iteration  12: 984980.923 ops/s
# Warmup Iteration  13: 984862.791 ops/s
# Warmup Iteration  14: 984977.354 ops/s
# Warmup Iteration  15: 988618.479 ops/s
# Warmup Iteration  16: 984946.149 ops/s
# Warmup Iteration  17: 1043015.286 ops/s
# Warmup Iteration  18: 1047395.184 ops/s
# Warmup Iteration  19: 1043522.296 ops/s
# Warmup Iteration  20: 1045127.174 ops/s
# Warmup Iteration  21: 1041780.236 ops/s
# Warmup Iteration  22: 1045912.779 ops/s
# Warmup Iteration  23: 1043931.458 ops/s
# Warmup Iteration  24: 1044919.430 ops/s
# Warmup Iteration  25: 1046403.580 ops/s
# Warmup Iteration  26: 1046399.644 ops/s
# Warmup Iteration  27: 1047432.986 ops/s
# Warmup Iteration  28: 1045268.258 ops/s
# Warmup Iteration  29: 1042320.732 ops/s
# Warmup Iteration  30: 1046590.773 ops/s
Iteration   1: 1047808.885 ops/s
Iteration   2: 1046673.105 ops/s
Iteration   3: 1049675.784 ops/s
Iteration   4: 1046140.781 ops/s
Iteration   5: 1049919.713 ops/s
Iteration   6: 1045375.410 ops/s
Iteration   7: 1048159.127 ops/s
Iteration   8: 1046838.668 ops/s
Iteration   9: 1049039.924 ops/s
Iteration  10: 1050447.891 ops/s
Iteration  11: 1047025.217 ops/s
Iteration  12: 1050221.075 ops/s
Iteration  13: 1048754.404 ops/s
Iteration  14: 1049209.615 ops/s
Iteration  15: 1050358.673 ops/s
Iteration  16: 1042987.407 ops/s
Iteration  17: 1042579.784 ops/s
Iteration  18: 1046456.216 ops/s
Iteration  19: 1046865.392 ops/s
Iteration  20: 1042849.808 ops/s
Iteration  21: 1045824.768 ops/s
Iteration  22: 1048795.944 ops/s
Iteration  23: 1046649.118 ops/s
Iteration  24: 1049974.218 ops/s
Iteration  25: 1049649.138 ops/s
Iteration  26: 1045438.714 ops/s
Iteration  27: 1048271.586 ops/s
Iteration  28: 1047130.162 ops/s
Iteration  29: 1044981.015 ops/s
Iteration  30: 1047554.587 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_retainAll_iterable":
  1047388.538 ±(99.9%) 1491.658 ops/s [Average]
  (min, avg, max) = (1042579.784, 1047388.538, 1050447.891), stdev = 2232.644
  CI (99.9%): [1045896.879, 1048880.196] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score      Error  Units
UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_retainAll_iterable  thrpt   30  1047388.538 ± 1491.658  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3454112.210 ops/s
# Warmup Iteration   2: 9567830.655 ops/s
# Warmup Iteration   3: 8096886.337 ops/s
# Warmup Iteration   4: 9609184.236 ops/s
# Warmup Iteration   5: 9584009.649 ops/s
# Warmup Iteration   6: 9486349.194 ops/s
# Warmup Iteration   7: 9562983.845 ops/s
# Warmup Iteration   8: 9582240.227 ops/s
# Warmup Iteration   9: 9601633.874 ops/s
# Warmup Iteration  10: 9614369.579 ops/s
# Warmup Iteration  11: 9565468.856 ops/s
# Warmup Iteration  12: 9565934.746 ops/s
# Warmup Iteration  13: 9588537.336 ops/s
# Warmup Iteration  14: 9577182.749 ops/s
# Warmup Iteration  15: 9586837.636 ops/s
# Warmup Iteration  16: 9610201.251 ops/s
# Warmup Iteration  17: 9575417.121 ops/s
# Warmup Iteration  18: 9573934.425 ops/s
# Warmup Iteration  19: 9551030.604 ops/s
# Warmup Iteration  20: 9579900.860 ops/s
# Warmup Iteration  21: 9597562.808 ops/s
# Warmup Iteration  22: 9574653.812 ops/s
# Warmup Iteration  23: 9554766.309 ops/s
# Warmup Iteration  24: 9518547.117 ops/s
# Warmup Iteration  25: 9556098.779 ops/s
# Warmup Iteration  26: 9603265.407 ops/s
# Warmup Iteration  27: 9618132.956 ops/s
# Warmup Iteration  28: 9579672.419 ops/s
# Warmup Iteration  29: 9581059.234 ops/s
# Warmup Iteration  30: 9577360.661 ops/s
Iteration   1: 9602044.248 ops/s
Iteration   2: 9382117.159 ops/s
Iteration   3: 9603874.454 ops/s
Iteration   4: 9613107.554 ops/s
Iteration   5: 9594418.291 ops/s
Iteration   6: 9608422.779 ops/s
Iteration   7: 9491447.064 ops/s
Iteration   8: 9594283.830 ops/s
Iteration   9: 9541544.657 ops/s
Iteration  10: 9582085.106 ops/s
Iteration  11: 9592166.173 ops/s
Iteration  12: 9522408.205 ops/s
Iteration  13: 9560726.648 ops/s
Iteration  14: 9515711.456 ops/s
Iteration  15: 9610444.609 ops/s
Iteration  16: 9578215.105 ops/s
Iteration  17: 9577931.247 ops/s
Iteration  18: 9584227.250 ops/s
Iteration  19: 9607063.238 ops/s
Iteration  20: 9589303.963 ops/s
Iteration  21: 9586043.395 ops/s
Iteration  22: 9593298.461 ops/s
Iteration  23: 9577609.397 ops/s
Iteration  24: 9530785.966 ops/s
Iteration  25: 9456130.407 ops/s
Iteration  26: 9600786.533 ops/s
Iteration  27: 9608128.322 ops/s
Iteration  28: 9623438.949 ops/s
Iteration  29: 9555205.637 ops/s
Iteration  30: 9610766.425 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_select":
  9569791.218 ±(99.9%) 35336.769 ops/s [Average]
  (min, avg, max) = (9382117.159, 9569791.218, 9623438.949), stdev = 52890.416
  CI (99.9%): [9534454.449, 9605127.986] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_select  thrpt   30  9569791.218 ± 35336.769  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3301611.814 ops/s
# Warmup Iteration   2: 5314505.693 ops/s
# Warmup Iteration   3: 6288585.124 ops/s
# Warmup Iteration   4: 6294741.775 ops/s
# Warmup Iteration   5: 6288943.654 ops/s
# Warmup Iteration   6: 6296956.765 ops/s
# Warmup Iteration   7: 6276852.066 ops/s
# Warmup Iteration   8: 6228572.200 ops/s
# Warmup Iteration   9: 6269538.481 ops/s
# Warmup Iteration  10: 6306536.864 ops/s
# Warmup Iteration  11: 6245437.196 ops/s
# Warmup Iteration  12: 6265778.915 ops/s
# Warmup Iteration  13: 6280212.399 ops/s
# Warmup Iteration  14: 6236354.711 ops/s
# Warmup Iteration  15: 6269294.948 ops/s
# Warmup Iteration  16: 6253769.778 ops/s
# Warmup Iteration  17: 6254960.699 ops/s
# Warmup Iteration  18: 6251988.793 ops/s
# Warmup Iteration  19: 6260834.369 ops/s
# Warmup Iteration  20: 6280035.336 ops/s
# Warmup Iteration  21: 6256964.924 ops/s
# Warmup Iteration  22: 6232256.545 ops/s
# Warmup Iteration  23: 6303438.255 ops/s
# Warmup Iteration  24: 6285141.617 ops/s
# Warmup Iteration  25: 6255134.752 ops/s
# Warmup Iteration  26: 6286417.520 ops/s
# Warmup Iteration  27: 6276769.072 ops/s
# Warmup Iteration  28: 6263463.934 ops/s
# Warmup Iteration  29: 6281280.138 ops/s
# Warmup Iteration  30: 6290016.909 ops/s
Iteration   1: 6274579.446 ops/s
Iteration   2: 6301691.774 ops/s
Iteration   3: 6270250.774 ops/s
Iteration   4: 6321819.736 ops/s
Iteration   5: 6174035.448 ops/s
Iteration   6: 6241700.284 ops/s
Iteration   7: 6244773.473 ops/s
Iteration   8: 6268097.578 ops/s
Iteration   9: 6308476.114 ops/s
Iteration  10: 6292119.981 ops/s
Iteration  11: 6240936.456 ops/s
Iteration  12: 6289013.767 ops/s
Iteration  13: 6309706.682 ops/s
Iteration  14: 6327465.389 ops/s
Iteration  15: 6317126.409 ops/s
Iteration  16: 6300189.433 ops/s
Iteration  17: 6238197.576 ops/s
Iteration  18: 6259426.068 ops/s
Iteration  19: 6303950.264 ops/s
Iteration  20: 6324686.569 ops/s
Iteration  21: 6305808.690 ops/s
Iteration  22: 6248860.155 ops/s
Iteration  23: 6279662.857 ops/s
Iteration  24: 6277931.608 ops/s
Iteration  25: 6332822.906 ops/s
Iteration  26: 6352540.454 ops/s
Iteration  27: 6322551.065 ops/s
Iteration  28: 6306444.186 ops/s
Iteration  29: 6261975.964 ops/s
Iteration  30: 6256172.791 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_size":
  6285100.463 ±(99.9%) 25110.319 ops/s [Average]
  (min, avg, max) = (6174035.448, 6285100.463, 6352540.454), stdev = 37583.946
  CI (99.9%): [6259990.144, 6310210.782] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_size  thrpt   30  6285100.463 ± 25110.319  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_testEquals$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_testEquals

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 170170505.763 ops/s
# Warmup Iteration   2: 298684067.204 ops/s
# Warmup Iteration   3: 244614893.594 ops/s
# Warmup Iteration   4: 273575382.712 ops/s
# Warmup Iteration   5: 274404602.554 ops/s
# Warmup Iteration   6: 274629137.242 ops/s
# Warmup Iteration   7: 275504471.393 ops/s
# Warmup Iteration   8: 274442634.105 ops/s
# Warmup Iteration   9: 273257579.508 ops/s
# Warmup Iteration  10: 274120891.974 ops/s
# Warmup Iteration  11: 274506770.399 ops/s
# Warmup Iteration  12: 273928428.606 ops/s
# Warmup Iteration  13: 274617958.718 ops/s
# Warmup Iteration  14: 273810926.457 ops/s
# Warmup Iteration  15: 274785828.336 ops/s
# Warmup Iteration  16: 274726333.088 ops/s
# Warmup Iteration  17: 273770757.778 ops/s
# Warmup Iteration  18: 274550137.237 ops/s
# Warmup Iteration  19: 274510394.346 ops/s
# Warmup Iteration  20: 274432511.303 ops/s
# Warmup Iteration  21: 274546070.849 ops/s
# Warmup Iteration  22: 274706400.503 ops/s
# Warmup Iteration  23: 275005425.521 ops/s
# Warmup Iteration  24: 273969012.584 ops/s
# Warmup Iteration  25: 275109012.883 ops/s
# Warmup Iteration  26: 274995709.989 ops/s
# Warmup Iteration  27: 271428637.783 ops/s
# Warmup Iteration  28: 273884689.362 ops/s
# Warmup Iteration  29: 273619548.398 ops/s
# Warmup Iteration  30: 274438287.655 ops/s
Iteration   1: 275822914.428 ops/s
Iteration   2: 274722348.079 ops/s
Iteration   3: 274482760.585 ops/s
Iteration   4: 275485526.566 ops/s
Iteration   5: 274834691.550 ops/s
Iteration   6: 276140676.573 ops/s
Iteration   7: 274496983.429 ops/s
Iteration   8: 274523974.215 ops/s
Iteration   9: 275232287.126 ops/s
Iteration  10: 274721703.725 ops/s
Iteration  11: 273243568.328 ops/s
Iteration  12: 275282163.419 ops/s
Iteration  13: 273297500.668 ops/s
Iteration  14: 274235466.012 ops/s
Iteration  15: 275335915.108 ops/s
Iteration  16: 275994525.905 ops/s
Iteration  17: 274203550.299 ops/s
Iteration  18: 273849628.530 ops/s
Iteration  19: 274307655.311 ops/s
Iteration  20: 273155518.393 ops/s
Iteration  21: 273951052.500 ops/s
Iteration  22: 274067291.176 ops/s
Iteration  23: 274251418.488 ops/s
Iteration  24: 274757709.200 ops/s
Iteration  25: 273950188.874 ops/s
Iteration  26: 274844115.042 ops/s
Iteration  27: 275796672.171 ops/s
Iteration  28: 275321168.391 ops/s
Iteration  29: 274485558.619 ops/s
Iteration  30: 275001299.665 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_testEquals":
  274659861.079 ±(99.9%) 526849.905 ops/s [Average]
  (min, avg, max) = (273155518.393, 274659861.079, 276140676.573), stdev = 788564.195
  CI (99.9%): [274133011.174, 275186710.984] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt          Score        Error  Units
UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_testEquals  thrpt   30  274659861.079 ± 526849.905  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_testHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_testHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 170661780.585 ops/s
# Warmup Iteration   2: 299183574.921 ops/s
# Warmup Iteration   3: 279637832.086 ops/s
# Warmup Iteration   4: 314221201.113 ops/s
# Warmup Iteration   5: 314102832.705 ops/s
# Warmup Iteration   6: 311969855.461 ops/s
# Warmup Iteration   7: 314586561.372 ops/s
# Warmup Iteration   8: 314298081.371 ops/s
# Warmup Iteration   9: 314851187.874 ops/s
# Warmup Iteration  10: 314713505.983 ops/s
# Warmup Iteration  11: 313948370.319 ops/s
# Warmup Iteration  12: 314168625.112 ops/s
# Warmup Iteration  13: 312359898.926 ops/s
# Warmup Iteration  14: 315678084.234 ops/s
# Warmup Iteration  15: 312899372.774 ops/s
# Warmup Iteration  16: 312533159.020 ops/s
# Warmup Iteration  17: 314882209.554 ops/s
# Warmup Iteration  18: 314147699.339 ops/s
# Warmup Iteration  19: 313973722.418 ops/s
# Warmup Iteration  20: 313321235.362 ops/s
# Warmup Iteration  21: 313475349.326 ops/s
# Warmup Iteration  22: 313055090.814 ops/s
# Warmup Iteration  23: 313609442.863 ops/s
# Warmup Iteration  24: 314892744.861 ops/s
# Warmup Iteration  25: 314878270.139 ops/s
# Warmup Iteration  26: 313893618.245 ops/s
# Warmup Iteration  27: 311927004.477 ops/s
# Warmup Iteration  28: 311873361.302 ops/s
# Warmup Iteration  29: 314961362.772 ops/s
# Warmup Iteration  30: 314363946.983 ops/s
Iteration   1: 315211793.442 ops/s
Iteration   2: 313246591.472 ops/s
Iteration   3: 314420776.091 ops/s
Iteration   4: 313267369.333 ops/s
Iteration   5: 313678093.121 ops/s
Iteration   6: 315045145.057 ops/s
Iteration   7: 314328153.300 ops/s
Iteration   8: 314145439.256 ops/s
Iteration   9: 309695195.996 ops/s
Iteration  10: 313144083.424 ops/s
Iteration  11: 313481436.342 ops/s
Iteration  12: 315686901.708 ops/s
Iteration  13: 315934126.758 ops/s
Iteration  14: 313327064.387 ops/s
Iteration  15: 314032981.261 ops/s
Iteration  16: 313540338.898 ops/s
Iteration  17: 315056734.967 ops/s
Iteration  18: 311524576.529 ops/s
Iteration  19: 313948611.854 ops/s
Iteration  20: 314234396.374 ops/s
Iteration  21: 312324814.217 ops/s
Iteration  22: 313313624.312 ops/s
Iteration  23: 315225792.447 ops/s
Iteration  24: 312373690.047 ops/s
Iteration  25: 314817889.798 ops/s
Iteration  26: 312621031.254 ops/s
Iteration  27: 308759058.644 ops/s
Iteration  28: 313009990.359 ops/s
Iteration  29: 313803897.500 ops/s
Iteration  30: 313917473.846 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_testHashCode":
  313570569.066 ±(99.9%) 1046255.227 ops/s [Average]
  (min, avg, max) = (308759058.644, 313570569.066, 315934126.758), stdev = 1565985.688
  CI (99.9%): [312524313.840, 314616824.293] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt          Score         Error  Units
UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_testHashCode  thrpt   30  313570569.066 ± 1046255.227  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 169298389.038 ops/s
# Warmup Iteration   2: 299343467.918 ops/s
# Warmup Iteration   3: 273156979.041 ops/s
# Warmup Iteration   4: 310117414.760 ops/s
# Warmup Iteration   5: 310473825.931 ops/s
# Warmup Iteration   6: 311700278.766 ops/s
# Warmup Iteration   7: 311376537.406 ops/s
# Warmup Iteration   8: 310637983.572 ops/s
# Warmup Iteration   9: 312100949.073 ops/s
# Warmup Iteration  10: 309457523.350 ops/s
# Warmup Iteration  11: 311174185.996 ops/s
# Warmup Iteration  12: 309572266.081 ops/s
# Warmup Iteration  13: 310341386.814 ops/s
# Warmup Iteration  14: 310957497.458 ops/s
# Warmup Iteration  15: 309982213.171 ops/s
# Warmup Iteration  16: 311159190.224 ops/s
# Warmup Iteration  17: 310336674.871 ops/s
# Warmup Iteration  18: 310865758.022 ops/s
# Warmup Iteration  19: 312026754.259 ops/s
# Warmup Iteration  20: 309948285.186 ops/s
# Warmup Iteration  21: 309741218.702 ops/s
# Warmup Iteration  22: 311165725.124 ops/s
# Warmup Iteration  23: 311173799.723 ops/s
# Warmup Iteration  24: 309567754.495 ops/s
# Warmup Iteration  25: 310111464.229 ops/s
# Warmup Iteration  26: 311186498.178 ops/s
# Warmup Iteration  27: 310041502.101 ops/s
# Warmup Iteration  28: 311027023.117 ops/s
# Warmup Iteration  29: 309945758.757 ops/s
# Warmup Iteration  30: 311986425.867 ops/s
Iteration   1: 311000014.090 ops/s
Iteration   2: 310939974.439 ops/s
Iteration   3: 310497818.519 ops/s
Iteration   4: 310434059.091 ops/s
Iteration   5: 310820621.551 ops/s
Iteration   6: 310781714.057 ops/s
Iteration   7: 310827633.512 ops/s
Iteration   8: 311287404.394 ops/s
Iteration   9: 309576011.919 ops/s
Iteration  10: 309587655.834 ops/s
Iteration  11: 311100525.374 ops/s
Iteration  12: 311938269.280 ops/s
Iteration  13: 311515914.452 ops/s
Iteration  14: 309070921.528 ops/s
Iteration  15: 309729299.207 ops/s
Iteration  16: 309760351.399 ops/s
Iteration  17: 310326220.481 ops/s
Iteration  18: 310997584.785 ops/s
Iteration  19: 309995237.523 ops/s
Iteration  20: 310033262.420 ops/s
Iteration  21: 310535488.543 ops/s
Iteration  22: 311217028.704 ops/s
Iteration  23: 310882575.644 ops/s
Iteration  24: 312179604.045 ops/s
Iteration  25: 304360128.733 ops/s
Iteration  26: 309943118.762 ops/s
Iteration  27: 311401741.580 ops/s
Iteration  28: 310586458.377 ops/s
Iteration  29: 309617274.196 ops/s
Iteration  30: 307906947.521 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_testToString":
  310295028.665 ±(99.9%) 952907.920 ops/s [Average]
  (min, avg, max) = (304360128.733, 310295028.665, 312179604.045), stdev = 1426267.823
  CI (99.9%): [309342120.745, 311247936.585] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt          Score        Error  Units
UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_testToString  thrpt   30  310295028.665 ± 952907.920  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1756937.392 ops/s
# Warmup Iteration   2: 3957379.414 ops/s
# Warmup Iteration   3: 3290258.440 ops/s
# Warmup Iteration   4: 3986056.223 ops/s
# Warmup Iteration   5: 3978398.395 ops/s
# Warmup Iteration   6: 3980304.228 ops/s
# Warmup Iteration   7: 3992582.322 ops/s
# Warmup Iteration   8: 3989356.803 ops/s
# Warmup Iteration   9: 3983166.828 ops/s
# Warmup Iteration  10: 3951910.048 ops/s
# Warmup Iteration  11: 3986464.022 ops/s
# Warmup Iteration  12: 3985824.737 ops/s
# Warmup Iteration  13: 3991266.710 ops/s
# Warmup Iteration  14: 3988422.980 ops/s
# Warmup Iteration  15: 3982050.912 ops/s
# Warmup Iteration  16: 3986764.564 ops/s
# Warmup Iteration  17: 3971165.922 ops/s
# Warmup Iteration  18: 3986923.672 ops/s
# Warmup Iteration  19: 3993061.711 ops/s
# Warmup Iteration  20: 3985379.757 ops/s
# Warmup Iteration  21: 3980565.081 ops/s
# Warmup Iteration  22: 3983900.276 ops/s
# Warmup Iteration  23: 3982913.240 ops/s
# Warmup Iteration  24: 3978761.652 ops/s
# Warmup Iteration  25: 3936330.458 ops/s
# Warmup Iteration  26: 3990097.222 ops/s
# Warmup Iteration  27: 3955326.794 ops/s
# Warmup Iteration  28: 3981009.742 ops/s
# Warmup Iteration  29: 3993610.083 ops/s
# Warmup Iteration  30: 3926109.073 ops/s
Iteration   1: 3982292.847 ops/s
Iteration   2: 3988943.908 ops/s
Iteration   3: 3990030.705 ops/s
Iteration   4: 3960537.817 ops/s
Iteration   5: 3988022.881 ops/s
Iteration   6: 3949271.240 ops/s
Iteration   7: 3981270.916 ops/s
Iteration   8: 3992694.991 ops/s
Iteration   9: 3978483.383 ops/s
Iteration  10: 3986979.572 ops/s
Iteration  11: 3983872.852 ops/s
Iteration  12: 3994965.237 ops/s
Iteration  13: 3983645.278 ops/s
Iteration  14: 3968966.009 ops/s
Iteration  15: 3991476.315 ops/s
Iteration  16: 3987381.630 ops/s
Iteration  17: 3995299.988 ops/s
Iteration  18: 3990776.105 ops/s
Iteration  19: 3984632.138 ops/s
Iteration  20: 3996364.709 ops/s
Iteration  21: 3992631.428 ops/s
Iteration  22: 3990452.711 ops/s
Iteration  23: 3979327.528 ops/s
Iteration  24: 3977324.848 ops/s
Iteration  25: 3983795.843 ops/s
Iteration  26: 3981959.389 ops/s
Iteration  27: 3994592.651 ops/s
Iteration  28: 3986500.567 ops/s
Iteration  29: 3987169.157 ops/s
Iteration  30: 3979823.891 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_toArray":
  3984316.218 ±(99.9%) 6828.254 ops/s [Average]
  (min, avg, max) = (3949271.240, 3984316.218, 3996364.709), stdev = 10220.210
  CI (99.9%): [3977487.964, 3991144.472] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_toArray  thrpt   30  3984316.218 ± 6828.254  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_toBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_toBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1354630.354 ops/s
# Warmup Iteration   2: 2909210.858 ops/s
# Warmup Iteration   3: 2420428.009 ops/s
# Warmup Iteration   4: 2903232.625 ops/s
# Warmup Iteration   5: 2895156.253 ops/s
# Warmup Iteration   6: 2906063.939 ops/s
# Warmup Iteration   7: 2891760.325 ops/s
# Warmup Iteration   8: 2900782.161 ops/s
# Warmup Iteration   9: 2897154.829 ops/s
# Warmup Iteration  10: 2903052.436 ops/s
# Warmup Iteration  11: 2904733.712 ops/s
# Warmup Iteration  12: 2906935.218 ops/s
# Warmup Iteration  13: 2907506.481 ops/s
# Warmup Iteration  14: 2902331.342 ops/s
# Warmup Iteration  15: 2899128.164 ops/s
# Warmup Iteration  16: 2896403.948 ops/s
# Warmup Iteration  17: 2907606.936 ops/s
# Warmup Iteration  18: 2898517.849 ops/s
# Warmup Iteration  19: 2899919.793 ops/s
# Warmup Iteration  20: 2901593.775 ops/s
# Warmup Iteration  21: 2902773.049 ops/s
# Warmup Iteration  22: 2905391.331 ops/s
# Warmup Iteration  23: 2904403.606 ops/s
# Warmup Iteration  24: 2868529.681 ops/s
# Warmup Iteration  25: 2902149.406 ops/s
# Warmup Iteration  26: 2901686.851 ops/s
# Warmup Iteration  27: 2905241.471 ops/s
# Warmup Iteration  28: 2897731.174 ops/s
# Warmup Iteration  29: 2896558.462 ops/s
# Warmup Iteration  30: 2902189.374 ops/s
Iteration   1: 2896501.784 ops/s
Iteration   2: 2909011.412 ops/s
Iteration   3: 2905368.507 ops/s
Iteration   4: 2898499.206 ops/s
Iteration   5: 2902218.002 ops/s
Iteration   6: 2907241.288 ops/s
Iteration   7: 2911579.438 ops/s
Iteration   8: 2898200.655 ops/s
Iteration   9: 2903414.533 ops/s
Iteration  10: 2898583.869 ops/s
Iteration  11: 2907878.623 ops/s
Iteration  12: 2902303.683 ops/s
Iteration  13: 2903589.242 ops/s
Iteration  14: 2898066.066 ops/s
Iteration  15: 2899256.790 ops/s
Iteration  16: 2906271.419 ops/s
Iteration  17: 2905250.885 ops/s
Iteration  18: 2901981.969 ops/s
Iteration  19: 2897854.296 ops/s
Iteration  20: 2906898.279 ops/s
Iteration  21: 2891649.995 ops/s
Iteration  22: 2899435.822 ops/s
Iteration  23: 2896471.603 ops/s
Iteration  24: 2898930.288 ops/s
Iteration  25: 2902598.806 ops/s
Iteration  26: 2892585.712 ops/s
Iteration  27: 2905323.227 ops/s
Iteration  28: 2894383.725 ops/s
Iteration  29: 2905821.808 ops/s
Iteration  30: 2900956.598 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_toBag":
  2901604.251 ±(99.9%) 3290.128 ops/s [Average]
  (min, avg, max) = (2891649.995, 2901604.251, 2911579.438), stdev = 4924.509
  CI (99.9%): [2898314.123, 2904894.379] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_toBag  thrpt   30  2901604.251 ± 3290.128  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1121200.461 ops/s
# Warmup Iteration   2: 2577687.169 ops/s
# Warmup Iteration   3: 2419531.717 ops/s
# Warmup Iteration   4: 2373443.537 ops/s
# Warmup Iteration   5: 2631543.162 ops/s
# Warmup Iteration   6: 2612021.121 ops/s
# Warmup Iteration   7: 2628448.135 ops/s
# Warmup Iteration   8: 2631787.370 ops/s
# Warmup Iteration   9: 2634468.314 ops/s
# Warmup Iteration  10: 2634620.363 ops/s
# Warmup Iteration  11: 2633291.573 ops/s
# Warmup Iteration  12: 2628722.294 ops/s
# Warmup Iteration  13: 2637734.882 ops/s
# Warmup Iteration  14: 2634652.190 ops/s
# Warmup Iteration  15: 2605937.495 ops/s
# Warmup Iteration  16: 2634927.247 ops/s
# Warmup Iteration  17: 2635405.615 ops/s
# Warmup Iteration  18: 2635604.745 ops/s
# Warmup Iteration  19: 2625204.245 ops/s
# Warmup Iteration  20: 2633827.578 ops/s
# Warmup Iteration  21: 2633052.944 ops/s
# Warmup Iteration  22: 2633338.108 ops/s
# Warmup Iteration  23: 2630414.312 ops/s
# Warmup Iteration  24: 2639731.157 ops/s
# Warmup Iteration  25: 2631427.651 ops/s
# Warmup Iteration  26: 2629952.397 ops/s
# Warmup Iteration  27: 2614939.484 ops/s
# Warmup Iteration  28: 2637278.387 ops/s
# Warmup Iteration  29: 2635556.426 ops/s
# Warmup Iteration  30: 2628066.946 ops/s
Iteration   1: 2619316.717 ops/s
Iteration   2: 2635910.617 ops/s
Iteration   3: 2637942.792 ops/s
Iteration   4: 2638701.458 ops/s
Iteration   5: 2640189.129 ops/s
Iteration   6: 2638022.612 ops/s
Iteration   7: 2638897.157 ops/s
Iteration   8: 2631259.777 ops/s
Iteration   9: 2636116.502 ops/s
Iteration  10: 2637047.642 ops/s
Iteration  11: 2631816.928 ops/s
Iteration  12: 2617709.916 ops/s
Iteration  13: 2627565.829 ops/s
Iteration  14: 2636278.039 ops/s
Iteration  15: 2627412.847 ops/s
Iteration  16: 2632889.026 ops/s
Iteration  17: 2625101.977 ops/s
Iteration  18: 2631678.998 ops/s
Iteration  19: 2631186.302 ops/s
Iteration  20: 2628916.997 ops/s
Iteration  21: 2591211.007 ops/s
Iteration  22: 2635552.963 ops/s
Iteration  23: 2637091.640 ops/s
Iteration  24: 2632378.789 ops/s
Iteration  25: 2637809.970 ops/s
Iteration  26: 2634479.844 ops/s
Iteration  27: 2634547.510 ops/s
Iteration  28: 2623850.398 ops/s
Iteration  29: 2638219.176 ops/s
Iteration  30: 2632954.087 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_toList":
  2631401.888 ±(99.9%) 6345.862 ops/s [Average]
  (min, avg, max) = (2591211.007, 2631401.888, 2640189.129), stdev = 9498.188
  CI (99.9%): [2625056.027, 2637747.750] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_toList  thrpt   30  2631401.888 ± 6345.862  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_toSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_toSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1641438.977 ops/s
# Warmup Iteration   2: 3765248.265 ops/s
# Warmup Iteration   3: 3385861.787 ops/s
# Warmup Iteration   4: 3361595.723 ops/s
# Warmup Iteration   5: 3655082.528 ops/s
# Warmup Iteration   6: 3677738.713 ops/s
# Warmup Iteration   7: 3648002.346 ops/s
# Warmup Iteration   8: 3693100.161 ops/s
# Warmup Iteration   9: 3678806.241 ops/s
# Warmup Iteration  10: 3689525.022 ops/s
# Warmup Iteration  11: 3691749.258 ops/s
# Warmup Iteration  12: 3623951.353 ops/s
# Warmup Iteration  13: 3687861.961 ops/s
# Warmup Iteration  14: 3681190.379 ops/s
# Warmup Iteration  15: 3689298.945 ops/s
# Warmup Iteration  16: 3684875.354 ops/s
# Warmup Iteration  17: 3693412.112 ops/s
# Warmup Iteration  18: 3682976.072 ops/s
# Warmup Iteration  19: 3682044.486 ops/s
# Warmup Iteration  20: 3686180.502 ops/s
# Warmup Iteration  21: 3681526.291 ops/s
# Warmup Iteration  22: 3670140.442 ops/s
# Warmup Iteration  23: 3686718.601 ops/s
# Warmup Iteration  24: 3690379.877 ops/s
# Warmup Iteration  25: 3662110.784 ops/s
# Warmup Iteration  26: 3694919.645 ops/s
# Warmup Iteration  27: 3688739.844 ops/s
# Warmup Iteration  28: 3679432.269 ops/s
# Warmup Iteration  29: 3682701.623 ops/s
# Warmup Iteration  30: 3689177.759 ops/s
Iteration   1: 3700828.461 ops/s
Iteration   2: 3685895.873 ops/s
Iteration   3: 3684086.948 ops/s
Iteration   4: 3696463.814 ops/s
Iteration   5: 3670357.720 ops/s
Iteration   6: 3667311.625 ops/s
Iteration   7: 3682915.238 ops/s
Iteration   8: 3687437.151 ops/s
Iteration   9: 3681548.733 ops/s
Iteration  10: 3684165.513 ops/s
Iteration  11: 3690375.537 ops/s
Iteration  12: 3686194.863 ops/s
Iteration  13: 3699294.041 ops/s
Iteration  14: 3694186.392 ops/s
Iteration  15: 3690288.751 ops/s
Iteration  16: 3680268.081 ops/s
Iteration  17: 3690081.942 ops/s
Iteration  18: 3695659.009 ops/s
Iteration  19: 3688113.065 ops/s
Iteration  20: 3667168.877 ops/s
Iteration  21: 3681783.000 ops/s
Iteration  22: 3688870.188 ops/s
Iteration  23: 3694512.138 ops/s
Iteration  24: 3687572.022 ops/s
Iteration  25: 3667827.171 ops/s
Iteration  26: 3683118.424 ops/s
Iteration  27: 3680750.694 ops/s
Iteration  28: 3677836.491 ops/s
Iteration  29: 3672888.370 ops/s
Iteration  30: 3688624.578 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_toSet":
  3684880.824 ±(99.9%) 6103.069 ops/s [Average]
  (min, avg, max) = (3667168.877, 3684880.824, 3700828.461), stdev = 9134.787
  CI (99.9%): [3678777.755, 3690983.893] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_toSet  thrpt   30  3684880.824 ± 6103.069  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_with$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_with

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 695390.823 ops/s
# Warmup Iteration   2: 786592.648 ops/s
# Warmup Iteration   3: 1000993.413 ops/s
# Warmup Iteration   4: 1009587.098 ops/s
# Warmup Iteration   5: 1017230.464 ops/s
# Warmup Iteration   6: 1019290.807 ops/s
# Warmup Iteration   7: 1016637.271 ops/s
# Warmup Iteration   8: 1017635.087 ops/s
# Warmup Iteration   9: 1018831.907 ops/s
# Warmup Iteration  10: 845485.128 ops/s
# Warmup Iteration  11: 1022124.496 ops/s
# Warmup Iteration  12: 1015796.887 ops/s
# Warmup Iteration  13: 1018249.890 ops/s
# Warmup Iteration  14: 1019518.057 ops/s
# Warmup Iteration  15: 1016905.865 ops/s
# Warmup Iteration  16: 1016167.281 ops/s
# Warmup Iteration  17: 1084389.315 ops/s
# Warmup Iteration  18: 1078339.133 ops/s
# Warmup Iteration  19: 1083073.924 ops/s
# Warmup Iteration  20: 1075062.554 ops/s
# Warmup Iteration  21: 1077265.064 ops/s
# Warmup Iteration  22: 1077868.954 ops/s
# Warmup Iteration  23: 1078754.663 ops/s
# Warmup Iteration  24: 1081255.819 ops/s
# Warmup Iteration  25: 1080556.478 ops/s
# Warmup Iteration  26: 1080317.755 ops/s
# Warmup Iteration  27: 1081054.431 ops/s
# Warmup Iteration  28: 1078503.355 ops/s
# Warmup Iteration  29: 1077750.941 ops/s
# Warmup Iteration  30: 1079622.603 ops/s
Iteration   1: 1079764.201 ops/s
Iteration   2: 1079947.326 ops/s
Iteration   3: 1083108.765 ops/s
Iteration   4: 1080566.177 ops/s
Iteration   5: 1083672.537 ops/s
Iteration   6: 1080523.575 ops/s
Iteration   7: 1079700.612 ops/s
Iteration   8: 1078888.534 ops/s
Iteration   9: 1084317.044 ops/s
Iteration  10: 1079547.616 ops/s
Iteration  11: 1083972.636 ops/s
Iteration  12: 1083446.094 ops/s
Iteration  13: 1080900.231 ops/s
Iteration  14: 1083162.478 ops/s
Iteration  15: 1080275.614 ops/s
Iteration  16: 1079007.936 ops/s
Iteration  17: 1085649.272 ops/s
Iteration  18: 1081208.152 ops/s
Iteration  19: 1076159.227 ops/s
Iteration  20: 1086062.784 ops/s
Iteration  21: 1079471.407 ops/s
Iteration  22: 1078136.839 ops/s
Iteration  23: 1084043.981 ops/s
Iteration  24: 1079098.022 ops/s
Iteration  25: 1073873.873 ops/s
Iteration  26: 1076874.003 ops/s
Iteration  27: 1068425.106 ops/s
Iteration  28: 1077842.812 ops/s
Iteration  29: 1079488.905 ops/s
Iteration  30: 1074257.811 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_with":
  1080046.452 ±(99.9%) 2507.239 ops/s [Average]
  (min, avg, max) = (1068425.106, 1080046.452, 1086062.784), stdev = 3752.718
  CI (99.9%): [1077539.213, 1082553.691] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_with  thrpt   30  1080046.452 ± 2507.239  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_withAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_withAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 695393.995 ops/s
# Warmup Iteration   2: 793579.235 ops/s
# Warmup Iteration   3: 1005635.886 ops/s
# Warmup Iteration   4: 1012075.210 ops/s
# Warmup Iteration   5: 1007260.277 ops/s
# Warmup Iteration   6: 1009300.327 ops/s
# Warmup Iteration   7: 1009076.352 ops/s
# Warmup Iteration   8: 1008144.412 ops/s
# Warmup Iteration   9: 1007682.175 ops/s
# Warmup Iteration  10: 840475.389 ops/s
# Warmup Iteration  11: 1008899.457 ops/s
# Warmup Iteration  12: 1004238.430 ops/s
# Warmup Iteration  13: 1008009.842 ops/s
# Warmup Iteration  14: 1011644.247 ops/s
# Warmup Iteration  15: 1011017.687 ops/s
# Warmup Iteration  16: 1010109.223 ops/s
# Warmup Iteration  17: 1076254.408 ops/s
# Warmup Iteration  18: 1075339.386 ops/s
# Warmup Iteration  19: 1079152.430 ops/s
# Warmup Iteration  20: 1077191.947 ops/s
# Warmup Iteration  21: 1079278.128 ops/s
# Warmup Iteration  22: 1075610.829 ops/s
# Warmup Iteration  23: 1075936.540 ops/s
# Warmup Iteration  24: 1075972.200 ops/s
# Warmup Iteration  25: 1076596.962 ops/s
# Warmup Iteration  26: 1075471.511 ops/s
# Warmup Iteration  27: 1076318.081 ops/s
# Warmup Iteration  28: 1077165.707 ops/s
# Warmup Iteration  29: 1076196.331 ops/s
# Warmup Iteration  30: 1076058.268 ops/s
Iteration   1: 1078339.105 ops/s
Iteration   2: 1078398.306 ops/s
Iteration   3: 1073471.883 ops/s
Iteration   4: 1073930.319 ops/s
Iteration   5: 1073483.862 ops/s
Iteration   6: 1074108.370 ops/s
Iteration   7: 1073473.016 ops/s
Iteration   8: 1078000.680 ops/s
Iteration   9: 1075015.088 ops/s
Iteration  10: 1073541.258 ops/s
Iteration  11: 1073873.250 ops/s
Iteration  12: 1077040.628 ops/s
Iteration  13: 1073468.698 ops/s
Iteration  14: 1075315.655 ops/s
Iteration  15: 1075978.136 ops/s
Iteration  16: 1074804.173 ops/s
Iteration  17: 1078306.100 ops/s
Iteration  18: 1079930.595 ops/s
Iteration  19: 1076650.267 ops/s
Iteration  20: 1076094.373 ops/s
Iteration  21: 1076976.799 ops/s
Iteration  22: 1075333.057 ops/s
Iteration  23: 1077623.202 ops/s
Iteration  24: 1075737.332 ops/s
Iteration  25: 1073868.739 ops/s
Iteration  26: 1078586.351 ops/s
Iteration  27: 1082430.759 ops/s
Iteration  28: 1072575.945 ops/s
Iteration  29: 1077517.819 ops/s
Iteration  30: 1071979.860 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_withAll":
  1075861.787 ±(99.9%) 1620.602 ops/s [Average]
  (min, avg, max) = (1071979.860, 1075861.787, 1082430.759), stdev = 2425.640
  CI (99.9%): [1074241.186, 1077482.389] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_withAll  thrpt   30  1075861.787 ± 1620.602  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_without$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_without

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 701163.830 ops/s
# Warmup Iteration   2: 793623.539 ops/s
# Warmup Iteration   3: 1017534.370 ops/s
# Warmup Iteration   4: 1018409.966 ops/s
# Warmup Iteration   5: 1017269.043 ops/s
# Warmup Iteration   6: 1018607.544 ops/s
# Warmup Iteration   7: 1016997.432 ops/s
# Warmup Iteration   8: 1015487.408 ops/s
# Warmup Iteration   9: 1008644.477 ops/s
# Warmup Iteration  10: 857702.571 ops/s
# Warmup Iteration  11: 1021430.676 ops/s
# Warmup Iteration  12: 1017121.650 ops/s
# Warmup Iteration  13: 1018287.925 ops/s
# Warmup Iteration  14: 1018186.917 ops/s
# Warmup Iteration  15: 1018149.733 ops/s
# Warmup Iteration  16: 1017904.994 ops/s
# Warmup Iteration  17: 1077205.807 ops/s
# Warmup Iteration  18: 1080243.822 ops/s
# Warmup Iteration  19: 1077486.313 ops/s
# Warmup Iteration  20: 1080168.098 ops/s
# Warmup Iteration  21: 1073253.112 ops/s
# Warmup Iteration  22: 1069454.464 ops/s
# Warmup Iteration  23: 1078260.368 ops/s
# Warmup Iteration  24: 1077636.147 ops/s
# Warmup Iteration  25: 1070317.336 ops/s
# Warmup Iteration  26: 1075726.234 ops/s
# Warmup Iteration  27: 1077057.440 ops/s
# Warmup Iteration  28: 1083371.652 ops/s
# Warmup Iteration  29: 1082136.013 ops/s
# Warmup Iteration  30: 1080687.180 ops/s
Iteration   1: 1075748.843 ops/s
Iteration   2: 1081468.436 ops/s
Iteration   3: 1073633.320 ops/s
Iteration   4: 1071857.753 ops/s
Iteration   5: 1081503.018 ops/s
Iteration   6: 1082874.211 ops/s
Iteration   7: 1080280.810 ops/s
Iteration   8: 1078046.438 ops/s
Iteration   9: 1073856.054 ops/s
Iteration  10: 1074686.296 ops/s
Iteration  11: 1081498.531 ops/s
Iteration  12: 1082249.935 ops/s
Iteration  13: 1067959.707 ops/s
Iteration  14: 1082990.052 ops/s
Iteration  15: 1073283.119 ops/s
Iteration  16: 1075162.036 ops/s
Iteration  17: 1077427.638 ops/s
Iteration  18: 1077108.773 ops/s
Iteration  19: 1080202.904 ops/s
Iteration  20: 1077890.616 ops/s
Iteration  21: 1082969.511 ops/s
Iteration  22: 1078728.821 ops/s
Iteration  23: 1076418.977 ops/s
Iteration  24: 1076204.955 ops/s
Iteration  25: 1076236.113 ops/s
Iteration  26: 1079281.480 ops/s
Iteration  27: 1081970.709 ops/s
Iteration  28: 1076606.314 ops/s
Iteration  29: 1076607.581 ops/s
Iteration  30: 1083099.866 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_without":
  1077928.427 ±(99.9%) 2532.831 ops/s [Average]
  (min, avg, max) = (1067959.707, 1077928.427, 1083099.866), stdev = 3791.023
  CI (99.9%): [1075395.596, 1080461.258] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_without  thrpt   30  1077928.427 ± 2532.831  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_withoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_withoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 688744.122 ops/s
# Warmup Iteration   2: 792998.134 ops/s
# Warmup Iteration   3: 1007056.347 ops/s
# Warmup Iteration   4: 1005951.677 ops/s
# Warmup Iteration   5: 1001379.923 ops/s
# Warmup Iteration   6: 1004522.260 ops/s
# Warmup Iteration   7: 1008128.158 ops/s
# Warmup Iteration   8: 1009110.453 ops/s
# Warmup Iteration   9: 999606.821 ops/s
# Warmup Iteration  10: 849740.320 ops/s
# Warmup Iteration  11: 1005294.514 ops/s
# Warmup Iteration  12: 1006407.536 ops/s
# Warmup Iteration  13: 1007383.317 ops/s
# Warmup Iteration  14: 1007302.599 ops/s
# Warmup Iteration  15: 1007715.202 ops/s
# Warmup Iteration  16: 1008012.656 ops/s
# Warmup Iteration  17: 1063507.358 ops/s
# Warmup Iteration  18: 1059508.398 ops/s
# Warmup Iteration  19: 1065871.833 ops/s
# Warmup Iteration  20: 1066985.907 ops/s
# Warmup Iteration  21: 1065183.649 ops/s
# Warmup Iteration  22: 1066993.968 ops/s
# Warmup Iteration  23: 1064134.793 ops/s
# Warmup Iteration  24: 1066837.677 ops/s
# Warmup Iteration  25: 1069406.908 ops/s
# Warmup Iteration  26: 1062921.015 ops/s
# Warmup Iteration  27: 1069428.865 ops/s
# Warmup Iteration  28: 1066503.173 ops/s
# Warmup Iteration  29: 1050124.497 ops/s
# Warmup Iteration  30: 1067963.394 ops/s
Iteration   1: 1045072.795 ops/s
Iteration   2: 1066073.380 ops/s
Iteration   3: 1067399.777 ops/s
Iteration   4: 1068502.105 ops/s
Iteration   5: 1069832.971 ops/s
Iteration   6: 1063810.251 ops/s
Iteration   7: 1058375.493 ops/s
Iteration   8: 1066592.638 ops/s
Iteration   9: 1067015.685 ops/s
Iteration  10: 1071188.005 ops/s
Iteration  11: 1067265.277 ops/s
Iteration  12: 1069275.904 ops/s
Iteration  13: 1068070.182 ops/s
Iteration  14: 1067855.009 ops/s
Iteration  15: 1068156.159 ops/s
Iteration  16: 1064722.741 ops/s
Iteration  17: 1070304.877 ops/s
Iteration  18: 1067592.762 ops/s
Iteration  19: 1065330.460 ops/s
Iteration  20: 1064371.945 ops/s
Iteration  21: 1070095.341 ops/s
Iteration  22: 1061844.640 ops/s
Iteration  23: 1061895.157 ops/s
Iteration  24: 1064660.836 ops/s
Iteration  25: 1070852.022 ops/s
Iteration  26: 1064209.419 ops/s
Iteration  27: 1067752.979 ops/s
Iteration  28: 1068138.190 ops/s
Iteration  29: 1066028.483 ops/s
Iteration  30: 1067550.463 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_withoutAll":
  1065994.532 ±(99.9%) 3263.835 ops/s [Average]
  (min, avg, max) = (1045072.795, 1065994.532, 1071188.005), stdev = 4885.155
  CI (99.9%): [1062730.697, 1069258.366] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
UnmodifiableFloatBooleanMapValuesTest._Benchmark.benchmark_withoutAll  thrpt   30  1065994.532 ± 3263.835  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 703679.989 ops/s
# Warmup Iteration   2: 795040.252 ops/s
# Warmup Iteration   3: 1015559.016 ops/s
# Warmup Iteration   4: 1012904.666 ops/s
# Warmup Iteration   5: 1014213.848 ops/s
# Warmup Iteration   6: 1013159.020 ops/s
# Warmup Iteration   7: 1013187.876 ops/s
# Warmup Iteration   8: 1012145.022 ops/s
# Warmup Iteration   9: 1013214.990 ops/s
# Warmup Iteration  10: 837845.096 ops/s
# Warmup Iteration  11: 1008271.953 ops/s
# Warmup Iteration  12: 1011871.541 ops/s
# Warmup Iteration  13: 1012958.999 ops/s
# Warmup Iteration  14: 1011959.521 ops/s
# Warmup Iteration  15: 1013616.199 ops/s
# Warmup Iteration  16: 1012295.112 ops/s
# Warmup Iteration  17: 1084026.114 ops/s
# Warmup Iteration  18: 1079078.607 ops/s
# Warmup Iteration  19: 1082601.807 ops/s
# Warmup Iteration  20: 1080182.297 ops/s
# Warmup Iteration  21: 1077219.873 ops/s
# Warmup Iteration  22: 1076141.999 ops/s
# Warmup Iteration  23: 1082151.054 ops/s
# Warmup Iteration  24: 1080372.059 ops/s
# Warmup Iteration  25: 1082078.774 ops/s
# Warmup Iteration  26: 1082887.233 ops/s
# Warmup Iteration  27: 1080106.543 ops/s
# Warmup Iteration  28: 1079357.872 ops/s
# Warmup Iteration  29: 1078457.483 ops/s
# Warmup Iteration  30: 1072260.496 ops/s
Iteration   1: 1079507.451 ops/s
Iteration   2: 1076826.941 ops/s
Iteration   3: 1085047.989 ops/s
Iteration   4: 1084558.955 ops/s
Iteration   5: 1082373.942 ops/s
Iteration   6: 1083734.099 ops/s
Iteration   7: 1077497.967 ops/s
Iteration   8: 1079478.520 ops/s
Iteration   9: 1081049.594 ops/s
Iteration  10: 1081564.550 ops/s
Iteration  11: 1079315.833 ops/s
Iteration  12: 1085826.741 ops/s
Iteration  13: 1080984.799 ops/s
Iteration  14: 1085915.735 ops/s
Iteration  15: 1078304.041 ops/s
Iteration  16: 1080405.925 ops/s
Iteration  17: 1076607.327 ops/s
Iteration  18: 1079643.446 ops/s
Iteration  19: 1078845.860 ops/s
Iteration  20: 1079804.219 ops/s
Iteration  21: 1081048.765 ops/s
Iteration  22: 1082901.329 ops/s
Iteration  23: 1080894.889 ops/s
Iteration  24: 1081998.087 ops/s
Iteration  25: 1082200.698 ops/s
Iteration  26: 1078254.059 ops/s
Iteration  27: 1082447.409 ops/s
Iteration  28: 1079315.851 ops/s
Iteration  29: 1066613.102 ops/s
Iteration  30: 1080761.975 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_add":
  1080457.670 ±(99.9%) 2401.996 ops/s [Average]
  (min, avg, max) = (1066613.102, 1080457.670, 1085915.735), stdev = 3595.194
  CI (99.9%): [1078055.674, 1082859.665] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_add  thrpt   30  1080457.670 ± 2401.996  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_addAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_addAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 698631.076 ops/s
# Warmup Iteration   2: 781272.765 ops/s
# Warmup Iteration   3: 1019204.516 ops/s
# Warmup Iteration   4: 1019789.210 ops/s
# Warmup Iteration   5: 1023518.878 ops/s
# Warmup Iteration   6: 1021731.607 ops/s
# Warmup Iteration   7: 1020523.252 ops/s
# Warmup Iteration   8: 1016684.864 ops/s
# Warmup Iteration   9: 1013076.631 ops/s
# Warmup Iteration  10: 864027.047 ops/s
# Warmup Iteration  11: 1025059.995 ops/s
# Warmup Iteration  12: 1024660.391 ops/s
# Warmup Iteration  13: 1020178.836 ops/s
# Warmup Iteration  14: 1023306.108 ops/s
# Warmup Iteration  15: 1022792.473 ops/s
# Warmup Iteration  16: 1023967.443 ops/s
# Warmup Iteration  17: 1086249.757 ops/s
# Warmup Iteration  18: 1090516.309 ops/s
# Warmup Iteration  19: 1085314.258 ops/s
# Warmup Iteration  20: 1086372.921 ops/s
# Warmup Iteration  21: 1089341.066 ops/s
# Warmup Iteration  22: 1077167.431 ops/s
# Warmup Iteration  23: 1085494.021 ops/s
# Warmup Iteration  24: 1089216.114 ops/s
# Warmup Iteration  25: 1080021.951 ops/s
# Warmup Iteration  26: 1085242.242 ops/s
# Warmup Iteration  27: 1088936.866 ops/s
# Warmup Iteration  28: 1086083.724 ops/s
# Warmup Iteration  29: 1077513.257 ops/s
# Warmup Iteration  30: 1078072.746 ops/s
Iteration   1: 1089609.383 ops/s
Iteration   2: 1089401.697 ops/s
Iteration   3: 1069217.418 ops/s
Iteration   4: 1088895.763 ops/s
Iteration   5: 1088921.857 ops/s
Iteration   6: 1084792.241 ops/s
Iteration   7: 1089286.498 ops/s
Iteration   8: 1092768.378 ops/s
Iteration   9: 1085014.455 ops/s
Iteration  10: 1091263.789 ops/s
Iteration  11: 1086793.817 ops/s
Iteration  12: 1085745.148 ops/s
Iteration  13: 1086376.937 ops/s
Iteration  14: 1092920.103 ops/s
Iteration  15: 1084388.955 ops/s
Iteration  16: 1088789.151 ops/s
Iteration  17: 1090667.398 ops/s
Iteration  18: 1085553.115 ops/s
Iteration  19: 1088416.752 ops/s
Iteration  20: 1087263.699 ops/s
Iteration  21: 1087171.119 ops/s
Iteration  22: 1085552.749 ops/s
Iteration  23: 1087335.458 ops/s
Iteration  24: 1086195.518 ops/s
Iteration  25: 1091650.034 ops/s
Iteration  26: 1089146.156 ops/s
Iteration  27: 1087870.138 ops/s
Iteration  28: 1089836.337 ops/s
Iteration  29: 1091586.512 ops/s
Iteration  30: 1087382.495 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_addAllArray":
  1087660.436 ±(99.9%) 2808.066 ops/s [Average]
  (min, avg, max) = (1069217.418, 1087660.436, 1092920.103), stdev = 4202.981
  CI (99.9%): [1084852.370, 1090468.502] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_addAllArray  thrpt   30  1087660.436 ± 2808.066  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_addAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_addAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 695096.399 ops/s
# Warmup Iteration   2: 788175.995 ops/s
# Warmup Iteration   3: 1018300.462 ops/s
# Warmup Iteration   4: 1015678.313 ops/s
# Warmup Iteration   5: 1014238.253 ops/s
# Warmup Iteration   6: 1010358.421 ops/s
# Warmup Iteration   7: 1010922.315 ops/s
# Warmup Iteration   8: 1013560.103 ops/s
# Warmup Iteration   9: 1015830.446 ops/s
# Warmup Iteration  10: 845129.292 ops/s
# Warmup Iteration  11: 1011006.892 ops/s
# Warmup Iteration  12: 1007936.153 ops/s
# Warmup Iteration  13: 1007955.638 ops/s
# Warmup Iteration  14: 1011418.281 ops/s
# Warmup Iteration  15: 1007459.681 ops/s
# Warmup Iteration  16: 1012077.287 ops/s
# Warmup Iteration  17: 1070754.431 ops/s
# Warmup Iteration  18: 1063580.209 ops/s
# Warmup Iteration  19: 1066568.141 ops/s
# Warmup Iteration  20: 1067497.627 ops/s
# Warmup Iteration  21: 1071896.183 ops/s
# Warmup Iteration  22: 1062551.116 ops/s
# Warmup Iteration  23: 1071495.322 ops/s
# Warmup Iteration  24: 1072431.777 ops/s
# Warmup Iteration  25: 1070612.819 ops/s
# Warmup Iteration  26: 1050617.487 ops/s
# Warmup Iteration  27: 1072434.673 ops/s
# Warmup Iteration  28: 1073087.095 ops/s
# Warmup Iteration  29: 1068173.334 ops/s
# Warmup Iteration  30: 1070294.906 ops/s
Iteration   1: 1064454.427 ops/s
Iteration   2: 1072060.816 ops/s
Iteration   3: 1073767.887 ops/s
Iteration   4: 1069572.121 ops/s
Iteration   5: 1070678.797 ops/s
Iteration   6: 1056604.110 ops/s
Iteration   7: 1072436.078 ops/s
Iteration   8: 1076067.488 ops/s
Iteration   9: 1071303.077 ops/s
Iteration  10: 1067142.644 ops/s
Iteration  11: 1072834.286 ops/s
Iteration  12: 1073655.135 ops/s
Iteration  13: 1070028.031 ops/s
Iteration  14: 1070093.066 ops/s
Iteration  15: 1073987.156 ops/s
Iteration  16: 1068875.540 ops/s
Iteration  17: 1071166.612 ops/s
Iteration  18: 1071637.100 ops/s
Iteration  19: 1068185.383 ops/s
Iteration  20: 1074064.767 ops/s
Iteration  21: 1074120.877 ops/s
Iteration  22: 1069066.726 ops/s
Iteration  23: 1074367.106 ops/s
Iteration  24: 1073090.862 ops/s
Iteration  25: 1071733.533 ops/s
Iteration  26: 1068155.961 ops/s
Iteration  27: 1052341.468 ops/s
Iteration  28: 1064641.934 ops/s
Iteration  29: 1069411.381 ops/s
Iteration  30: 1073295.456 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_addAllIterable":
  1069961.327 ±(99.9%) 3395.181 ops/s [Average]
  (min, avg, max) = (1052341.468, 1069961.327, 1076067.488), stdev = 5081.748
  CI (99.9%): [1066566.146, 1073356.509] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score      Error  Units
UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_addAllIterable  thrpt   30  1069961.327 ± 3395.181  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1985758.449 ops/s
# Warmup Iteration   2: 3607732.551 ops/s
# Warmup Iteration   3: 4301667.269 ops/s
# Warmup Iteration   4: 4263536.043 ops/s
# Warmup Iteration   5: 4285800.284 ops/s
# Warmup Iteration   6: 4307696.192 ops/s
# Warmup Iteration   7: 4294586.955 ops/s
# Warmup Iteration   8: 4313792.018 ops/s
# Warmup Iteration   9: 4290664.492 ops/s
# Warmup Iteration  10: 4289476.415 ops/s
# Warmup Iteration  11: 4307842.614 ops/s
# Warmup Iteration  12: 4314257.318 ops/s
# Warmup Iteration  13: 4294723.889 ops/s
# Warmup Iteration  14: 4283387.327 ops/s
# Warmup Iteration  15: 4323189.881 ops/s
# Warmup Iteration  16: 4313845.770 ops/s
# Warmup Iteration  17: 4295116.208 ops/s
# Warmup Iteration  18: 4331601.759 ops/s
# Warmup Iteration  19: 4317564.224 ops/s
# Warmup Iteration  20: 4307725.801 ops/s
# Warmup Iteration  21: 4284364.272 ops/s
# Warmup Iteration  22: 4291535.067 ops/s
# Warmup Iteration  23: 4282708.344 ops/s
# Warmup Iteration  24: 4264164.788 ops/s
# Warmup Iteration  25: 4274386.045 ops/s
# Warmup Iteration  26: 4240970.166 ops/s
# Warmup Iteration  27: 4281717.489 ops/s
# Warmup Iteration  28: 4318212.105 ops/s
# Warmup Iteration  29: 4289414.636 ops/s
# Warmup Iteration  30: 4311086.111 ops/s
Iteration   1: 4309896.331 ops/s
Iteration   2: 4297875.321 ops/s
Iteration   3: 4279202.073 ops/s
Iteration   4: 4294062.159 ops/s
Iteration   5: 4292368.990 ops/s
Iteration   6: 4296626.906 ops/s
Iteration   7: 4300190.013 ops/s
Iteration   8: 4298813.467 ops/s
Iteration   9: 4274907.211 ops/s
Iteration  10: 4281659.529 ops/s
Iteration  11: 4307393.960 ops/s
Iteration  12: 4295805.575 ops/s
Iteration  13: 4290337.490 ops/s
Iteration  14: 4315996.179 ops/s
Iteration  15: 4301549.765 ops/s
Iteration  16: 4318878.388 ops/s
Iteration  17: 4306389.782 ops/s
Iteration  18: 4295268.832 ops/s
Iteration  19: 4315273.014 ops/s
Iteration  20: 4305631.638 ops/s
Iteration  21: 4295807.921 ops/s
Iteration  22: 4316925.709 ops/s
Iteration  23: 4320282.397 ops/s
Iteration  24: 4302278.574 ops/s
Iteration  25: 4329463.225 ops/s
Iteration  26: 4292989.559 ops/s
Iteration  27: 4274722.162 ops/s
Iteration  28: 4314395.923 ops/s
Iteration  29: 4312585.251 ops/s
Iteration  30: 4310158.498 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_allSatisfy":
  4301591.195 ±(99.9%) 9104.680 ops/s [Average]
  (min, avg, max) = (4274722.162, 4301591.195, 4329463.225), stdev = 13627.457
  CI (99.9%): [4292486.515, 4310695.874] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_allSatisfy  thrpt   30  4301591.195 ± 9104.680  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2138227.111 ops/s
# Warmup Iteration   2: 3657665.963 ops/s
# Warmup Iteration   3: 4309446.776 ops/s
# Warmup Iteration   4: 4290974.676 ops/s
# Warmup Iteration   5: 4329427.309 ops/s
# Warmup Iteration   6: 4309901.567 ops/s
# Warmup Iteration   7: 4318730.983 ops/s
# Warmup Iteration   8: 4293387.544 ops/s
# Warmup Iteration   9: 4299093.496 ops/s
# Warmup Iteration  10: 4320692.232 ops/s
# Warmup Iteration  11: 4319424.148 ops/s
# Warmup Iteration  12: 4303129.251 ops/s
# Warmup Iteration  13: 4317887.345 ops/s
# Warmup Iteration  14: 4329930.372 ops/s
# Warmup Iteration  15: 4333138.415 ops/s
# Warmup Iteration  16: 4302070.046 ops/s
# Warmup Iteration  17: 4274923.774 ops/s
# Warmup Iteration  18: 4284282.132 ops/s
# Warmup Iteration  19: 4315460.870 ops/s
# Warmup Iteration  20: 4332555.830 ops/s
# Warmup Iteration  21: 4285466.556 ops/s
# Warmup Iteration  22: 4326665.795 ops/s
# Warmup Iteration  23: 4327136.364 ops/s
# Warmup Iteration  24: 4313011.172 ops/s
# Warmup Iteration  25: 4327527.565 ops/s
# Warmup Iteration  26: 4314191.148 ops/s
# Warmup Iteration  27: 4322882.448 ops/s
# Warmup Iteration  28: 4322982.226 ops/s
# Warmup Iteration  29: 4323751.071 ops/s
# Warmup Iteration  30: 4322186.852 ops/s
Iteration   1: 4329172.181 ops/s
Iteration   2: 4320344.954 ops/s
Iteration   3: 4317534.351 ops/s
Iteration   4: 4319260.329 ops/s
Iteration   5: 4270816.922 ops/s
Iteration   6: 4321768.621 ops/s
Iteration   7: 4332825.106 ops/s
Iteration   8: 4303630.479 ops/s
Iteration   9: 4330604.726 ops/s
Iteration  10: 4319723.003 ops/s
Iteration  11: 4328886.185 ops/s
Iteration  12: 4325376.450 ops/s
Iteration  13: 4332865.938 ops/s
Iteration  14: 4311418.947 ops/s
Iteration  15: 4284961.730 ops/s
Iteration  16: 4336211.168 ops/s
Iteration  17: 4313693.510 ops/s
Iteration  18: 4316265.626 ops/s
Iteration  19: 4319630.531 ops/s
Iteration  20: 4289982.785 ops/s
Iteration  21: 4282808.745 ops/s
Iteration  22: 4339648.742 ops/s
Iteration  23: 4343504.779 ops/s
Iteration  24: 4312436.901 ops/s
Iteration  25: 4322025.098 ops/s
Iteration  26: 4196374.954 ops/s
Iteration  27: 4307891.060 ops/s
Iteration  28: 4320823.817 ops/s
Iteration  29: 4314582.182 ops/s
Iteration  30: 4329705.015 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_anySatisfy":
  4313159.161 ±(99.9%) 18561.572 ops/s [Average]
  (min, avg, max) = (4196374.954, 4313159.161, 4343504.779), stdev = 27782.089
  CI (99.9%): [4294597.589, 4331720.733] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_anySatisfy  thrpt   30  4313159.161 ± 18561.572  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1376397.596 ops/s
# Warmup Iteration   2: 2913555.111 ops/s
# Warmup Iteration   3: 2430782.320 ops/s
# Warmup Iteration   4: 2913256.963 ops/s
# Warmup Iteration   5: 2882553.758 ops/s
# Warmup Iteration   6: 2912192.957 ops/s
# Warmup Iteration   7: 2927560.597 ops/s
# Warmup Iteration   8: 2884823.846 ops/s
# Warmup Iteration   9: 2885044.750 ops/s
# Warmup Iteration  10: 2891311.222 ops/s
# Warmup Iteration  11: 2881062.694 ops/s
# Warmup Iteration  12: 2892102.620 ops/s
# Warmup Iteration  13: 2905455.137 ops/s
# Warmup Iteration  14: 2902680.945 ops/s
# Warmup Iteration  15: 2920763.984 ops/s
# Warmup Iteration  16: 2899120.838 ops/s
# Warmup Iteration  17: 2899035.307 ops/s
# Warmup Iteration  18: 2905398.821 ops/s
# Warmup Iteration  19: 2893304.435 ops/s
# Warmup Iteration  20: 2924253.805 ops/s
# Warmup Iteration  21: 2901520.776 ops/s
# Warmup Iteration  22: 2922769.537 ops/s
# Warmup Iteration  23: 2923274.033 ops/s
# Warmup Iteration  24: 2923498.868 ops/s
# Warmup Iteration  25: 2886148.785 ops/s
# Warmup Iteration  26: 2903783.604 ops/s
# Warmup Iteration  27: 2928540.859 ops/s
# Warmup Iteration  28: 2894499.872 ops/s
# Warmup Iteration  29: 2917707.799 ops/s
# Warmup Iteration  30: 2940604.119 ops/s
Iteration   1: 2937293.525 ops/s
Iteration   2: 2905358.245 ops/s
Iteration   3: 2935201.374 ops/s
Iteration   4: 2944561.988 ops/s
Iteration   5: 2905360.662 ops/s
Iteration   6: 2874065.359 ops/s
Iteration   7: 2926457.733 ops/s
Iteration   8: 2913054.552 ops/s
Iteration   9: 2902125.442 ops/s
Iteration  10: 2875549.475 ops/s
Iteration  11: 2920854.188 ops/s
Iteration  12: 2932532.218 ops/s
Iteration  13: 2883185.241 ops/s
Iteration  14: 2920853.082 ops/s
Iteration  15: 2905118.376 ops/s
Iteration  16: 2898500.816 ops/s
Iteration  17: 2910952.056 ops/s
Iteration  18: 2968216.361 ops/s
Iteration  19: 2904969.118 ops/s
Iteration  20: 2935617.009 ops/s
Iteration  21: 2916922.695 ops/s
Iteration  22: 2936761.233 ops/s
Iteration  23: 2933711.639 ops/s
Iteration  24: 2938125.677 ops/s
Iteration  25: 2916240.751 ops/s
Iteration  26: 2921422.433 ops/s
Iteration  27: 2916843.353 ops/s
Iteration  28: 2906388.817 ops/s
Iteration  29: 2918927.357 ops/s
Iteration  30: 2873351.942 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_appendString":
  2915950.757 ±(99.9%) 14592.900 ops/s [Average]
  (min, avg, max) = (2873351.942, 2915950.757, 2968216.361), stdev = 21841.967
  CI (99.9%): [2901357.858, 2930543.657] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_appendString  thrpt   30  2915950.757 ± 14592.900  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_asLazy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_asLazy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3286542.047 ops/s
# Warmup Iteration   2: 7000913.205 ops/s
# Warmup Iteration   3: 7156642.154 ops/s
# Warmup Iteration   4: 6439269.593 ops/s
# Warmup Iteration   5: 6715809.811 ops/s
# Warmup Iteration   6: 7177258.618 ops/s
# Warmup Iteration   7: 7174426.995 ops/s
# Warmup Iteration   8: 7168889.505 ops/s
# Warmup Iteration   9: 7122759.811 ops/s
# Warmup Iteration  10: 7152056.029 ops/s
# Warmup Iteration  11: 7172508.364 ops/s
# Warmup Iteration  12: 7151782.125 ops/s
# Warmup Iteration  13: 7160767.148 ops/s
# Warmup Iteration  14: 7185524.611 ops/s
# Warmup Iteration  15: 7154477.647 ops/s
# Warmup Iteration  16: 7158802.190 ops/s
# Warmup Iteration  17: 7177409.909 ops/s
# Warmup Iteration  18: 7161876.178 ops/s
# Warmup Iteration  19: 7175887.554 ops/s
# Warmup Iteration  20: 7178255.736 ops/s
# Warmup Iteration  21: 7160491.577 ops/s
# Warmup Iteration  22: 7181783.080 ops/s
# Warmup Iteration  23: 7168298.736 ops/s
# Warmup Iteration  24: 7171819.365 ops/s
# Warmup Iteration  25: 7192699.891 ops/s
# Warmup Iteration  26: 7171161.340 ops/s
# Warmup Iteration  27: 7178980.783 ops/s
# Warmup Iteration  28: 7156744.805 ops/s
# Warmup Iteration  29: 7197943.948 ops/s
# Warmup Iteration  30: 7171248.118 ops/s
Iteration   1: 7163883.530 ops/s
Iteration   2: 7183293.694 ops/s
Iteration   3: 7182170.803 ops/s
Iteration   4: 7161733.579 ops/s
Iteration   5: 7165354.054 ops/s
Iteration   6: 7169516.562 ops/s
Iteration   7: 7163884.993 ops/s
Iteration   8: 7183740.299 ops/s
Iteration   9: 7139195.943 ops/s
Iteration  10: 7163539.848 ops/s
Iteration  11: 7182306.143 ops/s
Iteration  12: 7174626.854 ops/s
Iteration  13: 7169581.331 ops/s
Iteration  14: 7171641.366 ops/s
Iteration  15: 7107587.464 ops/s
Iteration  16: 7144513.260 ops/s
Iteration  17: 7143592.620 ops/s
Iteration  18: 7160827.864 ops/s
Iteration  19: 7189440.227 ops/s
Iteration  20: 7027394.358 ops/s
Iteration  21: 7128171.404 ops/s
Iteration  22: 7169118.727 ops/s
Iteration  23: 7188779.419 ops/s
Iteration  24: 7167273.760 ops/s
Iteration  25: 7167002.813 ops/s
Iteration  26: 7147151.693 ops/s
Iteration  27: 7180719.445 ops/s
Iteration  28: 7155848.809 ops/s
Iteration  29: 7169422.682 ops/s
Iteration  30: 7003480.705 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_asLazy":
  7154159.808 ±(99.9%) 28029.999 ops/s [Average]
  (min, avg, max) = (7003480.705, 7154159.808, 7189440.227), stdev = 41953.985
  CI (99.9%): [7126129.810, 7182189.807] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_asLazy  thrpt   30  7154159.808 ± 28029.999  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_asSynchronized$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_asSynchronized

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8322401.587 ops/s
# Warmup Iteration   2: 17629973.984 ops/s
# Warmup Iteration   3: 14864613.253 ops/s
# Warmup Iteration   4: 17719582.422 ops/s
# Warmup Iteration   5: 17807457.089 ops/s
# Warmup Iteration   6: 17762898.406 ops/s
# Warmup Iteration   7: 17778491.104 ops/s
# Warmup Iteration   8: 17790032.764 ops/s
# Warmup Iteration   9: 17801735.680 ops/s
# Warmup Iteration  10: 17734369.525 ops/s
# Warmup Iteration  11: 17678626.431 ops/s
# Warmup Iteration  12: 17762222.962 ops/s
# Warmup Iteration  13: 17785643.159 ops/s
# Warmup Iteration  14: 17638089.754 ops/s
# Warmup Iteration  15: 17745764.554 ops/s
# Warmup Iteration  16: 17771217.811 ops/s
# Warmup Iteration  17: 17705314.940 ops/s
# Warmup Iteration  18: 17735722.502 ops/s
# Warmup Iteration  19: 17666230.793 ops/s
# Warmup Iteration  20: 17783668.262 ops/s
# Warmup Iteration  21: 17774417.382 ops/s
# Warmup Iteration  22: 17728997.635 ops/s
# Warmup Iteration  23: 17778568.977 ops/s
# Warmup Iteration  24: 17755905.921 ops/s
# Warmup Iteration  25: 17792640.693 ops/s
# Warmup Iteration  26: 17732609.390 ops/s
# Warmup Iteration  27: 17738900.354 ops/s
# Warmup Iteration  28: 17709500.807 ops/s
# Warmup Iteration  29: 17754984.743 ops/s
# Warmup Iteration  30: 17787869.165 ops/s
Iteration   1: 17780587.705 ops/s
Iteration   2: 17728553.459 ops/s
Iteration   3: 17703501.642 ops/s
Iteration   4: 17746303.218 ops/s
Iteration   5: 17725963.619 ops/s
Iteration   6: 17804861.560 ops/s
Iteration   7: 17754397.491 ops/s
Iteration   8: 17672982.970 ops/s
Iteration   9: 17744922.287 ops/s
Iteration  10: 17671307.487 ops/s
Iteration  11: 17801049.297 ops/s
Iteration  12: 17749288.335 ops/s
Iteration  13: 17732043.970 ops/s
Iteration  14: 17748374.909 ops/s
Iteration  15: 17763510.504 ops/s
Iteration  16: 17553959.980 ops/s
Iteration  17: 17794124.694 ops/s
Iteration  18: 17791320.107 ops/s
Iteration  19: 17795435.336 ops/s
Iteration  20: 17711307.594 ops/s
Iteration  21: 17731705.741 ops/s
Iteration  22: 17816308.956 ops/s
Iteration  23: 17761674.815 ops/s
Iteration  24: 17766239.137 ops/s
Iteration  25: 17771626.997 ops/s
Iteration  26: 17744997.830 ops/s
Iteration  27: 17810467.054 ops/s
Iteration  28: 17673200.110 ops/s
Iteration  29: 17826699.952 ops/s
Iteration  30: 17772295.613 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_asSynchronized":
  17748300.412 ±(99.9%) 37128.931 ops/s [Average]
  (min, avg, max) = (17553959.980, 17748300.412, 17826699.952), stdev = 55572.840
  CI (99.9%): [17711171.482, 17785429.343] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt         Score       Error  Units
UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_asSynchronized  thrpt   30  17748300.412 ± 37128.931  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_asUnmodifiable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_asUnmodifiable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7216790.619 ops/s
# Warmup Iteration   2: 12711387.672 ops/s
# Warmup Iteration   3: 13413868.366 ops/s
# Warmup Iteration   4: 14089417.000 ops/s
# Warmup Iteration   5: 14147244.102 ops/s
# Warmup Iteration   6: 14185805.306 ops/s
# Warmup Iteration   7: 14217097.579 ops/s
# Warmup Iteration   8: 14204668.195 ops/s
# Warmup Iteration   9: 14194760.554 ops/s
# Warmup Iteration  10: 14197581.008 ops/s
# Warmup Iteration  11: 14191801.000 ops/s
# Warmup Iteration  12: 14215494.081 ops/s
# Warmup Iteration  13: 14136524.380 ops/s
# Warmup Iteration  14: 14093562.945 ops/s
# Warmup Iteration  15: 14176115.082 ops/s
# Warmup Iteration  16: 14173138.792 ops/s
# Warmup Iteration  17: 14158984.245 ops/s
# Warmup Iteration  18: 14225292.548 ops/s
# Warmup Iteration  19: 14140522.949 ops/s
# Warmup Iteration  20: 14126008.292 ops/s
# Warmup Iteration  21: 14139775.951 ops/s
# Warmup Iteration  22: 14167400.091 ops/s
# Warmup Iteration  23: 14199280.043 ops/s
# Warmup Iteration  24: 14225357.383 ops/s
# Warmup Iteration  25: 14223387.354 ops/s
# Warmup Iteration  26: 14224246.606 ops/s
# Warmup Iteration  27: 14245190.107 ops/s
# Warmup Iteration  28: 14215895.393 ops/s
# Warmup Iteration  29: 14204616.432 ops/s
# Warmup Iteration  30: 14145531.714 ops/s
Iteration   1: 14142552.693 ops/s
Iteration   2: 14151348.850 ops/s
Iteration   3: 14254973.388 ops/s
Iteration   4: 14259597.729 ops/s
Iteration   5: 14290441.112 ops/s
Iteration   6: 13953691.607 ops/s
Iteration   7: 14140687.825 ops/s
Iteration   8: 14130600.862 ops/s
Iteration   9: 14258460.558 ops/s
Iteration  10: 14215648.854 ops/s
Iteration  11: 14279946.820 ops/s
Iteration  12: 14187572.818 ops/s
Iteration  13: 14236484.749 ops/s
Iteration  14: 14130727.222 ops/s
Iteration  15: 14143505.523 ops/s
Iteration  16: 14175906.615 ops/s
Iteration  17: 14146760.081 ops/s
Iteration  18: 14166606.043 ops/s
Iteration  19: 14221691.939 ops/s
Iteration  20: 14199733.804 ops/s
Iteration  21: 14232724.741 ops/s
Iteration  22: 14246173.044 ops/s
Iteration  23: 14230004.469 ops/s
Iteration  24: 14218221.129 ops/s
Iteration  25: 14279646.952 ops/s
Iteration  26: 14285582.965 ops/s
Iteration  27: 14238838.942 ops/s
Iteration  28: 14281806.091 ops/s
Iteration  29: 14157299.653 ops/s
Iteration  30: 14261217.838 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_asUnmodifiable":
  14203948.497 ±(99.9%) 47301.408 ops/s [Average]
  (min, avg, max) = (13953691.607, 14203948.497, 14290441.112), stdev = 70798.526
  CI (99.9%): [14156647.089, 14251249.905] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt         Score       Error  Units
UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_asUnmodifiable  thrpt   30  14203948.497 ± 47301.408  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_booleanIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_booleanIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 543877.227 ops/s
# Warmup Iteration   2: 583273.408 ops/s
# Warmup Iteration   3: 789863.650 ops/s
# Warmup Iteration   4: 786763.153 ops/s
# Warmup Iteration   5: 788155.911 ops/s
# Warmup Iteration   6: 789058.834 ops/s
# Warmup Iteration   7: 786075.626 ops/s
# Warmup Iteration   8: 785356.681 ops/s
# Warmup Iteration   9: 780989.218 ops/s
# Warmup Iteration  10: 790260.460 ops/s
# Warmup Iteration  11: 653897.190 ops/s
# Warmup Iteration  12: 782254.199 ops/s
# Warmup Iteration  13: 787472.556 ops/s
# Warmup Iteration  14: 790619.632 ops/s
# Warmup Iteration  15: 786422.621 ops/s
# Warmup Iteration  16: 791529.736 ops/s
# Warmup Iteration  17: 826030.588 ops/s
# Warmup Iteration  18: 826177.396 ops/s
# Warmup Iteration  19: 815526.534 ops/s
# Warmup Iteration  20: 827030.860 ops/s
# Warmup Iteration  21: 826355.896 ops/s
# Warmup Iteration  22: 825066.512 ops/s
# Warmup Iteration  23: 825997.936 ops/s
# Warmup Iteration  24: 826491.699 ops/s
# Warmup Iteration  25: 827046.193 ops/s
# Warmup Iteration  26: 826201.242 ops/s
# Warmup Iteration  27: 826272.543 ops/s
# Warmup Iteration  28: 824455.747 ops/s
# Warmup Iteration  29: 826216.374 ops/s
# Warmup Iteration  30: 824891.655 ops/s
Iteration   1: 826717.943 ops/s
Iteration   2: 828104.103 ops/s
Iteration   3: 828211.091 ops/s
Iteration   4: 828022.111 ops/s
Iteration   5: 821499.031 ops/s
Iteration   6: 826356.541 ops/s
Iteration   7: 826473.815 ops/s
Iteration   8: 828782.240 ops/s
Iteration   9: 824202.125 ops/s
Iteration  10: 828709.486 ops/s
Iteration  11: 825543.796 ops/s
Iteration  12: 824019.899 ops/s
Iteration  13: 826484.480 ops/s
Iteration  14: 826888.855 ops/s
Iteration  15: 828029.250 ops/s
Iteration  16: 824277.240 ops/s
Iteration  17: 826697.692 ops/s
Iteration  18: 827859.697 ops/s
Iteration  19: 826942.981 ops/s
Iteration  20: 826014.307 ops/s
Iteration  21: 824675.186 ops/s
Iteration  22: 828263.977 ops/s
Iteration  23: 827341.550 ops/s
Iteration  24: 830633.566 ops/s
Iteration  25: 830110.960 ops/s
Iteration  26: 826174.768 ops/s
Iteration  27: 826324.717 ops/s
Iteration  28: 825459.014 ops/s
Iteration  29: 826036.107 ops/s
Iteration  30: 814955.854 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_booleanIterator":
  826327.079 ±(99.9%) 1906.590 ops/s [Average]
  (min, avg, max) = (814955.854, 826327.079, 830633.566), stdev = 2853.695
  CI (99.9%): [824420.489, 828233.670] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_booleanIterator  thrpt   30  826327.079 ± 1906.590  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 673455.880 ops/s
# Warmup Iteration   2: 785310.861 ops/s
# Warmup Iteration   3: 986391.204 ops/s
# Warmup Iteration   4: 989892.372 ops/s
# Warmup Iteration   5: 982203.769 ops/s
# Warmup Iteration   6: 987803.534 ops/s
# Warmup Iteration   7: 987416.872 ops/s
# Warmup Iteration   8: 985089.166 ops/s
# Warmup Iteration   9: 940969.236 ops/s
# Warmup Iteration  10: 875550.681 ops/s
# Warmup Iteration  11: 986242.052 ops/s
# Warmup Iteration  12: 992279.791 ops/s
# Warmup Iteration  13: 987624.506 ops/s
# Warmup Iteration  14: 987691.193 ops/s
# Warmup Iteration  15: 988283.007 ops/s
# Warmup Iteration  16: 988031.170 ops/s
# Warmup Iteration  17: 1055142.255 ops/s
# Warmup Iteration  18: 1055280.432 ops/s
# Warmup Iteration  19: 1054402.055 ops/s
# Warmup Iteration  20: 1055370.349 ops/s
# Warmup Iteration  21: 1054057.657 ops/s
# Warmup Iteration  22: 1056062.360 ops/s
# Warmup Iteration  23: 1054934.617 ops/s
# Warmup Iteration  24: 1045522.440 ops/s
# Warmup Iteration  25: 1052461.262 ops/s
# Warmup Iteration  26: 1054701.274 ops/s
# Warmup Iteration  27: 1054673.737 ops/s
# Warmup Iteration  28: 1055883.949 ops/s
# Warmup Iteration  29: 1056364.582 ops/s
# Warmup Iteration  30: 1056313.001 ops/s
Iteration   1: 1054665.265 ops/s
Iteration   2: 1047909.857 ops/s
Iteration   3: 1055390.033 ops/s
Iteration   4: 1055487.239 ops/s
Iteration   5: 1036227.413 ops/s
Iteration   6: 1055926.359 ops/s
Iteration   7: 1055260.476 ops/s
Iteration   8: 1046870.054 ops/s
Iteration   9: 1035650.569 ops/s
Iteration  10: 1056587.220 ops/s
Iteration  11: 1057632.609 ops/s
Iteration  12: 1054888.809 ops/s
Iteration  13: 1053894.432 ops/s
Iteration  14: 1056637.368 ops/s
Iteration  15: 1053386.865 ops/s
Iteration  16: 1037699.190 ops/s
Iteration  17: 1057901.696 ops/s
Iteration  18: 1056023.303 ops/s
Iteration  19: 1053469.930 ops/s
Iteration  20: 1052140.713 ops/s
Iteration  21: 1059596.975 ops/s
Iteration  22: 1057787.712 ops/s
Iteration  23: 1053238.405 ops/s
Iteration  24: 1053558.038 ops/s
Iteration  25: 1057832.918 ops/s
Iteration  26: 1053237.758 ops/s
Iteration  27: 1054171.104 ops/s
Iteration  28: 1056945.196 ops/s
Iteration  29: 1057378.664 ops/s
Iteration  30: 1054862.231 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove":
  1053075.280 ±(99.9%) 4159.620 ops/s [Average]
  (min, avg, max) = (1035650.569, 1053075.280, 1059596.975), stdev = 6225.925
  CI (99.9%): [1048915.659, 1057234.900] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt        Score      Error  Units
UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove  thrpt   30  1053075.280 ± 4159.620  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_chunk$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_chunk

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 137118.373 ops/s
# Warmup Iteration   2: 236969.693 ops/s
# Warmup Iteration   3: 272412.505 ops/s
# Warmup Iteration   4: 272817.750 ops/s
# Warmup Iteration   5: 272602.315 ops/s
# Warmup Iteration   6: 229349.089 ops/s
# Warmup Iteration   7: 274024.436 ops/s
# Warmup Iteration   8: 274329.295 ops/s
# Warmup Iteration   9: 273621.466 ops/s
# Warmup Iteration  10: 274144.099 ops/s
# Warmup Iteration  11: 274180.624 ops/s
# Warmup Iteration  12: 274605.587 ops/s
# Warmup Iteration  13: 272109.246 ops/s
# Warmup Iteration  14: 273370.748 ops/s
# Warmup Iteration  15: 273973.746 ops/s
# Warmup Iteration  16: 274501.141 ops/s
# Warmup Iteration  17: 282316.099 ops/s
# Warmup Iteration  18: 283037.966 ops/s
# Warmup Iteration  19: 283204.304 ops/s
# Warmup Iteration  20: 283173.201 ops/s
# Warmup Iteration  21: 282973.828 ops/s
# Warmup Iteration  22: 283172.433 ops/s
# Warmup Iteration  23: 282410.070 ops/s
# Warmup Iteration  24: 282638.365 ops/s
# Warmup Iteration  25: 281900.359 ops/s
# Warmup Iteration  26: 283013.306 ops/s
# Warmup Iteration  27: 283186.429 ops/s
# Warmup Iteration  28: 283484.555 ops/s
# Warmup Iteration  29: 282688.342 ops/s
# Warmup Iteration  30: 282296.265 ops/s
Iteration   1: 283016.758 ops/s
Iteration   2: 283547.453 ops/s
Iteration   3: 281844.669 ops/s
Iteration   4: 281724.881 ops/s
Iteration   5: 282293.186 ops/s
Iteration   6: 282751.220 ops/s
Iteration   7: 282540.362 ops/s
Iteration   8: 281652.398 ops/s
Iteration   9: 282392.588 ops/s
Iteration  10: 282566.222 ops/s
Iteration  11: 282994.801 ops/s
Iteration  12: 283157.473 ops/s
Iteration  13: 282061.830 ops/s
Iteration  14: 282619.976 ops/s
Iteration  15: 282077.270 ops/s
Iteration  16: 282679.115 ops/s
Iteration  17: 282431.294 ops/s
Iteration  18: 282460.161 ops/s
Iteration  19: 282096.933 ops/s
Iteration  20: 283266.208 ops/s
Iteration  21: 281693.963 ops/s
Iteration  22: 283075.980 ops/s
Iteration  23: 282900.661 ops/s
Iteration  24: 283112.848 ops/s
Iteration  25: 282978.279 ops/s
Iteration  26: 282709.551 ops/s
Iteration  27: 283651.031 ops/s
Iteration  28: 282847.487 ops/s
Iteration  29: 282864.142 ops/s
Iteration  30: 282400.105 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_chunk":
  282613.628 ±(99.9%) 352.606 ops/s [Average]
  (min, avg, max) = (281652.398, 282613.628, 283651.031), stdev = 527.764
  CI (99.9%): [282261.022, 282966.235] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score     Error  Units
UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_chunk  thrpt   30  282613.628 ± 352.606  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 709747.321 ops/s
# Warmup Iteration   2: 806528.542 ops/s
# Warmup Iteration   3: 1007888.640 ops/s
# Warmup Iteration   4: 1002640.765 ops/s
# Warmup Iteration   5: 1001135.126 ops/s
# Warmup Iteration   6: 1002231.163 ops/s
# Warmup Iteration   7: 999646.164 ops/s
# Warmup Iteration   8: 1003320.014 ops/s
# Warmup Iteration   9: 971811.946 ops/s
# Warmup Iteration  10: 868100.004 ops/s
# Warmup Iteration  11: 1001432.517 ops/s
# Warmup Iteration  12: 997803.213 ops/s
# Warmup Iteration  13: 998011.608 ops/s
# Warmup Iteration  14: 998432.248 ops/s
# Warmup Iteration  15: 999702.003 ops/s
# Warmup Iteration  16: 998295.740 ops/s
# Warmup Iteration  17: 1057632.977 ops/s
# Warmup Iteration  18: 1054947.320 ops/s
# Warmup Iteration  19: 1057576.757 ops/s
# Warmup Iteration  20: 1053998.473 ops/s
# Warmup Iteration  21: 1047823.431 ops/s
# Warmup Iteration  22: 1057566.194 ops/s
# Warmup Iteration  23: 1048452.078 ops/s
# Warmup Iteration  24: 1054878.086 ops/s
# Warmup Iteration  25: 1049956.728 ops/s
# Warmup Iteration  26: 1057220.246 ops/s
# Warmup Iteration  27: 1054420.753 ops/s
# Warmup Iteration  28: 1055476.412 ops/s
# Warmup Iteration  29: 1056118.631 ops/s
# Warmup Iteration  30: 1053466.991 ops/s
Iteration   1: 1060257.230 ops/s
Iteration   2: 1055390.925 ops/s
Iteration   3: 1057967.034 ops/s
Iteration   4: 1056280.364 ops/s
Iteration   5: 1058391.603 ops/s
Iteration   6: 1058033.640 ops/s
Iteration   7: 1052566.675 ops/s
Iteration   8: 1059356.437 ops/s
Iteration   9: 1054553.904 ops/s
Iteration  10: 1055476.281 ops/s
Iteration  11: 1058957.035 ops/s
Iteration  12: 1053413.031 ops/s
Iteration  13: 1057461.469 ops/s
Iteration  14: 1058579.171 ops/s
Iteration  15: 1057777.936 ops/s
Iteration  16: 1057810.076 ops/s
Iteration  17: 1056434.946 ops/s
Iteration  18: 1049954.404 ops/s
Iteration  19: 1046351.388 ops/s
Iteration  20: 1059920.720 ops/s
Iteration  21: 1062111.320 ops/s
Iteration  22: 1042471.650 ops/s
Iteration  23: 1056763.353 ops/s
Iteration  24: 1041514.633 ops/s
Iteration  25: 1057228.542 ops/s
Iteration  26: 1059121.706 ops/s
Iteration  27: 1060970.275 ops/s
Iteration  28: 1057984.697 ops/s
Iteration  29: 1058727.071 ops/s
Iteration  30: 1059169.220 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_clear":
  1056033.225 ±(99.9%) 3332.960 ops/s [Average]
  (min, avg, max) = (1041514.633, 1056033.225, 1062111.320), stdev = 4988.618
  CI (99.9%): [1052700.264, 1059366.185] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_clear  thrpt   30  1056033.225 ± 3332.960  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 724317.983 ops/s
# Warmup Iteration   2: 1924316.599 ops/s
# Warmup Iteration   3: 1921408.332 ops/s
# Warmup Iteration   4: 1591945.899 ops/s
# Warmup Iteration   5: 1925762.801 ops/s
# Warmup Iteration   6: 1927259.662 ops/s
# Warmup Iteration   7: 1923646.463 ops/s
# Warmup Iteration   8: 1928074.768 ops/s
# Warmup Iteration   9: 1923254.589 ops/s
# Warmup Iteration  10: 1925468.251 ops/s
# Warmup Iteration  11: 1924685.351 ops/s
# Warmup Iteration  12: 1927908.210 ops/s
# Warmup Iteration  13: 1929682.657 ops/s
# Warmup Iteration  14: 1926076.218 ops/s
# Warmup Iteration  15: 1925657.010 ops/s
# Warmup Iteration  16: 1926034.684 ops/s
# Warmup Iteration  17: 1921276.880 ops/s
# Warmup Iteration  18: 1923675.573 ops/s
# Warmup Iteration  19: 1920009.353 ops/s
# Warmup Iteration  20: 1924755.021 ops/s
# Warmup Iteration  21: 1922488.080 ops/s
# Warmup Iteration  22: 1924457.087 ops/s
# Warmup Iteration  23: 1927047.991 ops/s
# Warmup Iteration  24: 1922568.658 ops/s
# Warmup Iteration  25: 1924012.779 ops/s
# Warmup Iteration  26: 1925794.221 ops/s
# Warmup Iteration  27: 1929009.184 ops/s
# Warmup Iteration  28: 1925111.520 ops/s
# Warmup Iteration  29: 1924497.862 ops/s
# Warmup Iteration  30: 1922000.178 ops/s
Iteration   1: 1925241.594 ops/s
Iteration   2: 1924239.661 ops/s
Iteration   3: 1925903.403 ops/s
Iteration   4: 1924101.823 ops/s
Iteration   5: 1919079.477 ops/s
Iteration   6: 1924388.590 ops/s
Iteration   7: 1922193.484 ops/s
Iteration   8: 1924644.993 ops/s
Iteration   9: 1922982.967 ops/s
Iteration  10: 1930546.385 ops/s
Iteration  11: 1922987.813 ops/s
Iteration  12: 1917527.464 ops/s
Iteration  13: 1925701.950 ops/s
Iteration  14: 1926096.351 ops/s
Iteration  15: 1924906.375 ops/s
Iteration  16: 1920370.244 ops/s
Iteration  17: 1924624.061 ops/s
Iteration  18: 1927679.862 ops/s
Iteration  19: 1921775.216 ops/s
Iteration  20: 1922175.409 ops/s
Iteration  21: 1919937.201 ops/s
Iteration  22: 1922296.238 ops/s
Iteration  23: 1926797.522 ops/s
Iteration  24: 1923362.750 ops/s
Iteration  25: 1926899.102 ops/s
Iteration  26: 1927881.020 ops/s
Iteration  27: 1922650.610 ops/s
Iteration  28: 1923119.327 ops/s
Iteration  29: 1920839.342 ops/s
Iteration  30: 1927180.924 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_collect":
  1923937.705 ±(99.9%) 1911.076 ops/s [Average]
  (min, avg, max) = (1917527.464, 1923937.705, 1930546.385), stdev = 2860.409
  CI (99.9%): [1922026.629, 1925848.781] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_collect  thrpt   30  1923937.705 ± 1911.076  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3776157.654 ops/s
# Warmup Iteration   2: 6553139.177 ops/s
# Warmup Iteration   3: 7726414.657 ops/s
# Warmup Iteration   4: 7771956.028 ops/s
# Warmup Iteration   5: 7800565.288 ops/s
# Warmup Iteration   6: 7778306.758 ops/s
# Warmup Iteration   7: 7765035.682 ops/s
# Warmup Iteration   8: 7772697.499 ops/s
# Warmup Iteration   9: 7771631.488 ops/s
# Warmup Iteration  10: 7769613.698 ops/s
# Warmup Iteration  11: 7787833.752 ops/s
# Warmup Iteration  12: 7766005.925 ops/s
# Warmup Iteration  13: 7787992.551 ops/s
# Warmup Iteration  14: 7761640.654 ops/s
# Warmup Iteration  15: 7768669.027 ops/s
# Warmup Iteration  16: 7745977.129 ops/s
# Warmup Iteration  17: 7783054.042 ops/s
# Warmup Iteration  18: 7775018.942 ops/s
# Warmup Iteration  19: 7776496.187 ops/s
# Warmup Iteration  20: 7783239.967 ops/s
# Warmup Iteration  21: 7754903.723 ops/s
# Warmup Iteration  22: 7773770.052 ops/s
# Warmup Iteration  23: 7744241.267 ops/s
# Warmup Iteration  24: 7789429.630 ops/s
# Warmup Iteration  25: 7788508.847 ops/s
# Warmup Iteration  26: 7735131.154 ops/s
# Warmup Iteration  27: 7794129.902 ops/s
# Warmup Iteration  28: 7778279.969 ops/s
# Warmup Iteration  29: 7767903.441 ops/s
# Warmup Iteration  30: 7713921.144 ops/s
Iteration   1: 7725781.952 ops/s
Iteration   2: 7768110.013 ops/s
Iteration   3: 7749050.939 ops/s
Iteration   4: 7765646.029 ops/s
Iteration   5: 7794777.771 ops/s
Iteration   6: 7742041.813 ops/s
Iteration   7: 7763527.669 ops/s
Iteration   8: 7752958.143 ops/s
Iteration   9: 7768806.546 ops/s
Iteration  10: 7798105.762 ops/s
Iteration  11: 7753243.848 ops/s
Iteration  12: 7808147.184 ops/s
Iteration  13: 7802641.196 ops/s
Iteration  14: 7775262.911 ops/s
Iteration  15: 7786464.743 ops/s
Iteration  16: 7768032.828 ops/s
Iteration  17: 7776956.756 ops/s
Iteration  18: 7775076.782 ops/s
Iteration  19: 7627555.790 ops/s
Iteration  20: 7749043.042 ops/s
Iteration  21: 7694434.287 ops/s
Iteration  22: 7660313.539 ops/s
Iteration  23: 7789946.568 ops/s
Iteration  24: 7764268.315 ops/s
Iteration  25: 7796390.396 ops/s
Iteration  26: 7790954.653 ops/s
Iteration  27: 7814690.192 ops/s
Iteration  28: 7767907.558 ops/s
Iteration  29: 7774493.186 ops/s
Iteration  30: 7776962.088 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_contains":
  7762719.750 ±(99.9%) 27359.583 ops/s [Average]
  (min, avg, max) = (7627555.790, 7762719.750, 7814690.192), stdev = 40950.539
  CI (99.9%): [7735360.167, 7790079.333] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_contains  thrpt   30  7762719.750 ± 27359.583  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7246548.968 ops/s
# Warmup Iteration   2: 12122497.880 ops/s
# Warmup Iteration   3: 14317278.824 ops/s
# Warmup Iteration   4: 14444394.881 ops/s
# Warmup Iteration   5: 14385361.828 ops/s
# Warmup Iteration   6: 14377298.395 ops/s
# Warmup Iteration   7: 14449868.341 ops/s
# Warmup Iteration   8: 14484719.917 ops/s
# Warmup Iteration   9: 14383032.470 ops/s
# Warmup Iteration  10: 14395193.434 ops/s
# Warmup Iteration  11: 14412667.850 ops/s
# Warmup Iteration  12: 14463104.708 ops/s
# Warmup Iteration  13: 14448983.916 ops/s
# Warmup Iteration  14: 14490562.533 ops/s
# Warmup Iteration  15: 14391027.491 ops/s
# Warmup Iteration  16: 14435007.917 ops/s
# Warmup Iteration  17: 14317817.611 ops/s
# Warmup Iteration  18: 14369916.106 ops/s
# Warmup Iteration  19: 14420951.354 ops/s
# Warmup Iteration  20: 14343330.922 ops/s
# Warmup Iteration  21: 14443026.660 ops/s
# Warmup Iteration  22: 14492755.326 ops/s
# Warmup Iteration  23: 14472477.696 ops/s
# Warmup Iteration  24: 14418436.519 ops/s
# Warmup Iteration  25: 14282966.884 ops/s
# Warmup Iteration  26: 14325567.254 ops/s
# Warmup Iteration  27: 14447971.892 ops/s
# Warmup Iteration  28: 14305337.131 ops/s
# Warmup Iteration  29: 14319253.569 ops/s
# Warmup Iteration  30: 14168574.376 ops/s
Iteration   1: 14409394.122 ops/s
Iteration   2: 14385566.831 ops/s
Iteration   3: 14470009.085 ops/s
Iteration   4: 14288254.363 ops/s
Iteration   5: 14285396.018 ops/s
Iteration   6: 14407191.021 ops/s
Iteration   7: 14402057.534 ops/s
Iteration   8: 14409584.922 ops/s
Iteration   9: 14378646.450 ops/s
Iteration  10: 14124063.846 ops/s
Iteration  11: 14436271.894 ops/s
Iteration  12: 14536522.050 ops/s
Iteration  13: 14437440.485 ops/s
Iteration  14: 14408827.226 ops/s
Iteration  15: 14475416.419 ops/s
Iteration  16: 14441216.867 ops/s
Iteration  17: 14408768.143 ops/s
Iteration  18: 14344454.715 ops/s
Iteration  19: 14324047.633 ops/s
Iteration  20: 14285583.325 ops/s
Iteration  21: 14337350.270 ops/s
Iteration  22: 14455916.194 ops/s
Iteration  23: 14483486.408 ops/s
Iteration  24: 14391421.581 ops/s
Iteration  25: 14453433.464 ops/s
Iteration  26: 14492655.920 ops/s
Iteration  27: 14434395.484 ops/s
Iteration  28: 14306013.728 ops/s
Iteration  29: 14410631.796 ops/s
Iteration  30: 14404199.606 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_containsAllArray":
  14394273.913 ±(99.9%) 54518.920 ops/s [Average]
  (min, avg, max) = (14124063.846, 14394273.913, 14536522.050), stdev = 81601.359
  CI (99.9%): [14339754.993, 14448792.833] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt         Score       Error  Units
UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_containsAllArray  thrpt   30  14394273.913 ± 54518.920  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4509881.238 ops/s
# Warmup Iteration   2: 8121044.682 ops/s
# Warmup Iteration   3: 9760744.532 ops/s
# Warmup Iteration   4: 9716388.033 ops/s
# Warmup Iteration   5: 9749740.428 ops/s
# Warmup Iteration   6: 9762894.951 ops/s
# Warmup Iteration   7: 9622405.320 ops/s
# Warmup Iteration   8: 9727428.103 ops/s
# Warmup Iteration   9: 9737511.027 ops/s
# Warmup Iteration  10: 9693824.209 ops/s
# Warmup Iteration  11: 9750665.469 ops/s
# Warmup Iteration  12: 9708792.263 ops/s
# Warmup Iteration  13: 9749068.641 ops/s
# Warmup Iteration  14: 9714779.648 ops/s
# Warmup Iteration  15: 9560885.476 ops/s
# Warmup Iteration  16: 9752479.997 ops/s
# Warmup Iteration  17: 9704433.383 ops/s
# Warmup Iteration  18: 9702184.876 ops/s
# Warmup Iteration  19: 9763203.204 ops/s
# Warmup Iteration  20: 9772149.347 ops/s
# Warmup Iteration  21: 9723087.820 ops/s
# Warmup Iteration  22: 9700983.090 ops/s
# Warmup Iteration  23: 9731129.978 ops/s
# Warmup Iteration  24: 9737689.470 ops/s
# Warmup Iteration  25: 9783325.514 ops/s
# Warmup Iteration  26: 9740613.349 ops/s
# Warmup Iteration  27: 9758433.855 ops/s
# Warmup Iteration  28: 9666502.687 ops/s
# Warmup Iteration  29: 9706280.477 ops/s
# Warmup Iteration  30: 9719370.055 ops/s
Iteration   1: 9653636.816 ops/s
Iteration   2: 9648270.991 ops/s
Iteration   3: 9703754.800 ops/s
Iteration   4: 9695415.054 ops/s
Iteration   5: 9685753.904 ops/s
Iteration   6: 9795669.109 ops/s
Iteration   7: 9784367.315 ops/s
Iteration   8: 9750596.037 ops/s
Iteration   9: 9653621.742 ops/s
Iteration  10: 9679700.169 ops/s
Iteration  11: 9741532.427 ops/s
Iteration  12: 9664362.848 ops/s
Iteration  13: 9612167.519 ops/s
Iteration  14: 9686876.193 ops/s
Iteration  15: 9712858.683 ops/s
Iteration  16: 9657687.205 ops/s
Iteration  17: 9720803.404 ops/s
Iteration  18: 9705802.924 ops/s
Iteration  19: 9623394.997 ops/s
Iteration  20: 9703924.012 ops/s
Iteration  21: 9755245.563 ops/s
Iteration  22: 9725650.592 ops/s
Iteration  23: 9559284.711 ops/s
Iteration  24: 9725597.615 ops/s
Iteration  25: 9716721.410 ops/s
Iteration  26: 9723768.566 ops/s
Iteration  27: 9727829.781 ops/s
Iteration  28: 9778544.809 ops/s
Iteration  29: 9745143.824 ops/s
Iteration  30: 9742831.613 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_containsAllIterable":
  9702693.821 ±(99.9%) 35364.908 ops/s [Average]
  (min, avg, max) = (9559284.711, 9702693.821, 9795669.109), stdev = 52932.534
  CI (99.9%): [9667328.913, 9738058.730] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_containsAllIterable  thrpt   30  9702693.821 ± 35364.908  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_containsAnyArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_containsAnyArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3508527.896 ops/s
# Warmup Iteration   2: 6300160.844 ops/s
# Warmup Iteration   3: 7065141.231 ops/s
# Warmup Iteration   4: 7302154.766 ops/s
# Warmup Iteration   5: 7325956.800 ops/s
# Warmup Iteration   6: 7259550.061 ops/s
# Warmup Iteration   7: 7294640.181 ops/s
# Warmup Iteration   8: 7299268.887 ops/s
# Warmup Iteration   9: 7287310.013 ops/s
# Warmup Iteration  10: 7332923.992 ops/s
# Warmup Iteration  11: 7300274.901 ops/s
# Warmup Iteration  12: 7283992.309 ops/s
# Warmup Iteration  13: 7298140.629 ops/s
# Warmup Iteration  14: 7215659.858 ops/s
# Warmup Iteration  15: 7273864.451 ops/s
# Warmup Iteration  16: 7305486.029 ops/s
# Warmup Iteration  17: 7290430.984 ops/s
# Warmup Iteration  18: 7292994.637 ops/s
# Warmup Iteration  19: 7307728.086 ops/s
# Warmup Iteration  20: 7301524.728 ops/s
# Warmup Iteration  21: 7304801.914 ops/s
# Warmup Iteration  22: 7301977.197 ops/s
# Warmup Iteration  23: 7320339.741 ops/s
# Warmup Iteration  24: 7321927.440 ops/s
# Warmup Iteration  25: 7305388.664 ops/s
# Warmup Iteration  26: 7295061.242 ops/s
# Warmup Iteration  27: 7310930.230 ops/s
# Warmup Iteration  28: 7297985.323 ops/s
# Warmup Iteration  29: 7305696.582 ops/s
# Warmup Iteration  30: 7299351.064 ops/s
Iteration   1: 7365350.767 ops/s
Iteration   2: 7334877.246 ops/s
Iteration   3: 7303662.983 ops/s
Iteration   4: 7242691.978 ops/s
Iteration   5: 7304469.571 ops/s
Iteration   6: 7328410.058 ops/s
Iteration   7: 7288816.023 ops/s
Iteration   8: 7250966.532 ops/s
Iteration   9: 7311285.858 ops/s
Iteration  10: 7333418.001 ops/s
Iteration  11: 7353609.932 ops/s
Iteration  12: 7350085.421 ops/s
Iteration  13: 7308347.264 ops/s
Iteration  14: 7318269.772 ops/s
Iteration  15: 7273673.912 ops/s
Iteration  16: 7309492.841 ops/s
Iteration  17: 7311897.874 ops/s
Iteration  18: 7345043.535 ops/s
Iteration  19: 7306573.434 ops/s
Iteration  20: 7320595.944 ops/s
Iteration  21: 7338276.241 ops/s
Iteration  22: 7197291.615 ops/s
Iteration  23: 7324952.570 ops/s
Iteration  24: 7276249.461 ops/s
Iteration  25: 7311776.474 ops/s
Iteration  26: 7262391.704 ops/s
Iteration  27: 7316129.380 ops/s
Iteration  28: 7294357.720 ops/s
Iteration  29: 7275199.154 ops/s
Iteration  30: 7195458.520 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_containsAnyArray":
  7301787.393 ±(99.9%) 27487.286 ops/s [Average]
  (min, avg, max) = (7195458.520, 7301787.393, 7365350.767), stdev = 41141.679
  CI (99.9%): [7274300.107, 7329274.679] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_containsAnyArray  thrpt   30  7301787.393 ± 27487.286  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_containsAnyIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_containsAnyIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 603406.151 ops/s
# Warmup Iteration   2: 1036294.399 ops/s
# Warmup Iteration   3: 1150325.940 ops/s
# Warmup Iteration   4: 1150315.223 ops/s
# Warmup Iteration   5: 1149244.214 ops/s
# Warmup Iteration   6: 954701.728 ops/s
# Warmup Iteration   7: 1148788.617 ops/s
# Warmup Iteration   8: 1149962.345 ops/s
# Warmup Iteration   9: 1147296.492 ops/s
# Warmup Iteration  10: 1150793.638 ops/s
# Warmup Iteration  11: 1152845.641 ops/s
# Warmup Iteration  12: 1151210.939 ops/s
# Warmup Iteration  13: 1150109.936 ops/s
# Warmup Iteration  14: 1148610.659 ops/s
# Warmup Iteration  15: 1148851.637 ops/s
# Warmup Iteration  16: 1147718.654 ops/s
# Warmup Iteration  17: 1143587.792 ops/s
# Warmup Iteration  18: 1152055.805 ops/s
# Warmup Iteration  19: 1152261.123 ops/s
# Warmup Iteration  20: 1151970.879 ops/s
# Warmup Iteration  21: 1149258.297 ops/s
# Warmup Iteration  22: 1146902.756 ops/s
# Warmup Iteration  23: 1148616.864 ops/s
# Warmup Iteration  24: 1149347.791 ops/s
# Warmup Iteration  25: 1150581.766 ops/s
# Warmup Iteration  26: 1150278.896 ops/s
# Warmup Iteration  27: 1148347.390 ops/s
# Warmup Iteration  28: 1149332.209 ops/s
# Warmup Iteration  29: 1149424.048 ops/s
# Warmup Iteration  30: 1150034.551 ops/s
Iteration   1: 1151605.124 ops/s
Iteration   2: 1148224.832 ops/s
Iteration   3: 1145903.447 ops/s
Iteration   4: 1148566.340 ops/s
Iteration   5: 1146885.982 ops/s
Iteration   6: 1150368.865 ops/s
Iteration   7: 1150753.452 ops/s
Iteration   8: 1152122.325 ops/s
Iteration   9: 1149795.312 ops/s
Iteration  10: 1150823.003 ops/s
Iteration  11: 1149579.072 ops/s
Iteration  12: 1147122.069 ops/s
Iteration  13: 1151106.203 ops/s
Iteration  14: 1150682.467 ops/s
Iteration  15: 1150887.267 ops/s
Iteration  16: 1149411.743 ops/s
Iteration  17: 1149849.365 ops/s
Iteration  18: 1150354.308 ops/s
Iteration  19: 1148925.514 ops/s
Iteration  20: 1152644.095 ops/s
Iteration  21: 1151546.118 ops/s
Iteration  22: 1149579.271 ops/s
Iteration  23: 1147989.753 ops/s
Iteration  24: 1147365.624 ops/s
Iteration  25: 1152881.935 ops/s
Iteration  26: 1148657.262 ops/s
Iteration  27: 1150019.109 ops/s
Iteration  28: 1147418.909 ops/s
Iteration  29: 1152630.319 ops/s
Iteration  30: 1148426.120 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_containsAnyIterable":
  1149737.507 ±(99.9%) 1224.505 ops/s [Average]
  (min, avg, max) = (1145903.447, 1149737.507, 1152881.935), stdev = 1832.781
  CI (99.9%): [1148513.002, 1150962.012] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score      Error  Units
UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_containsAnyIterable  thrpt   30  1149737.507 ± 1224.505  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_containsNoneArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_containsNoneArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3427973.374 ops/s
# Warmup Iteration   2: 6434530.068 ops/s
# Warmup Iteration   3: 7441217.705 ops/s
# Warmup Iteration   4: 7555422.920 ops/s
# Warmup Iteration   5: 7553322.344 ops/s
# Warmup Iteration   6: 7571114.362 ops/s
# Warmup Iteration   7: 7520712.904 ops/s
# Warmup Iteration   8: 7536673.783 ops/s
# Warmup Iteration   9: 7561645.945 ops/s
# Warmup Iteration  10: 7483456.904 ops/s
# Warmup Iteration  11: 7518581.053 ops/s
# Warmup Iteration  12: 7550518.596 ops/s
# Warmup Iteration  13: 7531803.153 ops/s
# Warmup Iteration  14: 7537199.053 ops/s
# Warmup Iteration  15: 7548135.921 ops/s
# Warmup Iteration  16: 7540617.877 ops/s
# Warmup Iteration  17: 7551864.449 ops/s
# Warmup Iteration  18: 7577681.091 ops/s
# Warmup Iteration  19: 7544698.139 ops/s
# Warmup Iteration  20: 7523305.439 ops/s
# Warmup Iteration  21: 7592915.094 ops/s
# Warmup Iteration  22: 7535796.074 ops/s
# Warmup Iteration  23: 7504977.178 ops/s
# Warmup Iteration  24: 7580162.383 ops/s
# Warmup Iteration  25: 7588404.384 ops/s
# Warmup Iteration  26: 7590156.036 ops/s
# Warmup Iteration  27: 7570299.727 ops/s
# Warmup Iteration  28: 7570732.235 ops/s
# Warmup Iteration  29: 7588824.001 ops/s
# Warmup Iteration  30: 7569658.472 ops/s
Iteration   1: 7576084.600 ops/s
Iteration   2: 7530116.417 ops/s
Iteration   3: 7492480.495 ops/s
Iteration   4: 7518714.164 ops/s
Iteration   5: 7528752.360 ops/s
Iteration   6: 7432923.288 ops/s
Iteration   7: 7511941.008 ops/s
Iteration   8: 7596170.822 ops/s
Iteration   9: 7565412.180 ops/s
Iteration  10: 7572300.934 ops/s
Iteration  11: 7472619.010 ops/s
Iteration  12: 7480556.337 ops/s
Iteration  13: 7506537.477 ops/s
Iteration  14: 7528951.373 ops/s
Iteration  15: 7453385.126 ops/s
Iteration  16: 7537748.837 ops/s
Iteration  17: 7554914.091 ops/s
Iteration  18: 7600460.807 ops/s
Iteration  19: 7521341.898 ops/s
Iteration  20: 7460784.289 ops/s
Iteration  21: 7406002.458 ops/s
Iteration  22: 7469670.059 ops/s
Iteration  23: 7497282.638 ops/s
Iteration  24: 7515690.957 ops/s
Iteration  25: 7558510.559 ops/s
Iteration  26: 7554827.926 ops/s
Iteration  27: 7538944.197 ops/s
Iteration  28: 7577214.174 ops/s
Iteration  29: 7513959.739 ops/s
Iteration  30: 7512318.886 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_containsNoneArray":
  7519553.903 ±(99.9%) 31588.578 ops/s [Average]
  (min, avg, max) = (7406002.458, 7519553.903, 7600460.807), stdev = 47280.300
  CI (99.9%): [7487965.326, 7551142.481] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_containsNoneArray  thrpt   30  7519553.903 ± 31588.578  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_containsNoneIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_containsNoneIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 563135.491 ops/s
# Warmup Iteration   2: 923765.755 ops/s
# Warmup Iteration   3: 1037022.588 ops/s
# Warmup Iteration   4: 1039203.366 ops/s
# Warmup Iteration   5: 1039399.822 ops/s
# Warmup Iteration   6: 865675.377 ops/s
# Warmup Iteration   7: 1038667.475 ops/s
# Warmup Iteration   8: 1038722.641 ops/s
# Warmup Iteration   9: 1039198.611 ops/s
# Warmup Iteration  10: 1039753.419 ops/s
# Warmup Iteration  11: 1038593.379 ops/s
# Warmup Iteration  12: 1039268.697 ops/s
# Warmup Iteration  13: 1032894.841 ops/s
# Warmup Iteration  14: 1037949.996 ops/s
# Warmup Iteration  15: 1038611.130 ops/s
# Warmup Iteration  16: 1038472.493 ops/s
# Warmup Iteration  17: 1040286.465 ops/s
# Warmup Iteration  18: 1039710.077 ops/s
# Warmup Iteration  19: 1038362.677 ops/s
# Warmup Iteration  20: 1039387.335 ops/s
# Warmup Iteration  21: 1039375.547 ops/s
# Warmup Iteration  22: 1039092.194 ops/s
# Warmup Iteration  23: 1040267.403 ops/s
# Warmup Iteration  24: 1039241.887 ops/s
# Warmup Iteration  25: 1040121.904 ops/s
# Warmup Iteration  26: 1033338.088 ops/s
# Warmup Iteration  27: 1037322.914 ops/s
# Warmup Iteration  28: 1036390.581 ops/s
# Warmup Iteration  29: 1039185.245 ops/s
# Warmup Iteration  30: 1035487.804 ops/s
Iteration   1: 1042318.827 ops/s
Iteration   2: 1037328.157 ops/s
Iteration   3: 1038655.347 ops/s
Iteration   4: 1039596.877 ops/s
Iteration   5: 1039042.569 ops/s
Iteration   6: 1039822.033 ops/s
Iteration   7: 1037727.147 ops/s
Iteration   8: 1041435.136 ops/s
Iteration   9: 1040485.116 ops/s
Iteration  10: 1040505.141 ops/s
Iteration  11: 1040152.064 ops/s
Iteration  12: 1041076.355 ops/s
Iteration  13: 1038471.189 ops/s
Iteration  14: 1040475.940 ops/s
Iteration  15: 1040027.746 ops/s
Iteration  16: 1040352.722 ops/s
Iteration  17: 1037328.665 ops/s
Iteration  18: 1040568.410 ops/s
Iteration  19: 1035604.913 ops/s
Iteration  20: 1035852.557 ops/s
Iteration  21: 1040587.221 ops/s
Iteration  22: 1036375.341 ops/s
Iteration  23: 1041193.294 ops/s
Iteration  24: 1040339.974 ops/s
Iteration  25: 1041212.479 ops/s
Iteration  26: 1035350.865 ops/s
Iteration  27: 1039086.467 ops/s
Iteration  28: 1037573.504 ops/s
Iteration  29: 1038242.911 ops/s
Iteration  30: 1035963.099 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_containsNoneIterable":
  1039091.736 ±(99.9%) 1303.948 ops/s [Average]
  (min, avg, max) = (1035350.865, 1039091.736, 1042318.827), stdev = 1951.689
  CI (99.9%): [1037787.787, 1040395.684] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score      Error  Units
UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_containsNoneIterable  thrpt   30  1039091.736 ± 1303.948  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1365195.055 ops/s
# Warmup Iteration   2: 3077568.176 ops/s
# Warmup Iteration   3: 3106960.313 ops/s
# Warmup Iteration   4: 2579105.164 ops/s
# Warmup Iteration   5: 3111654.713 ops/s
# Warmup Iteration   6: 3109958.651 ops/s
# Warmup Iteration   7: 3112868.981 ops/s
# Warmup Iteration   8: 3110523.436 ops/s
# Warmup Iteration   9: 3113026.637 ops/s
# Warmup Iteration  10: 3101803.501 ops/s
# Warmup Iteration  11: 3109864.973 ops/s
# Warmup Iteration  12: 3102868.837 ops/s
# Warmup Iteration  13: 3098966.246 ops/s
# Warmup Iteration  14: 3099240.482 ops/s
# Warmup Iteration  15: 3111031.581 ops/s
# Warmup Iteration  16: 3112700.064 ops/s
# Warmup Iteration  17: 3112137.486 ops/s
# Warmup Iteration  18: 3108479.040 ops/s
# Warmup Iteration  19: 3098687.287 ops/s
# Warmup Iteration  20: 3114662.359 ops/s
# Warmup Iteration  21: 3109330.578 ops/s
# Warmup Iteration  22: 3100418.571 ops/s
# Warmup Iteration  23: 3103194.555 ops/s
# Warmup Iteration  24: 3097811.204 ops/s
# Warmup Iteration  25: 3099880.657 ops/s
# Warmup Iteration  26: 3093242.488 ops/s
# Warmup Iteration  27: 3099890.886 ops/s
# Warmup Iteration  28: 3110726.947 ops/s
# Warmup Iteration  29: 3112957.909 ops/s
# Warmup Iteration  30: 3100573.713 ops/s
Iteration   1: 3103920.426 ops/s
Iteration   2: 3106402.336 ops/s
Iteration   3: 3112697.128 ops/s
Iteration   4: 3090454.870 ops/s
Iteration   5: 3114052.947 ops/s
Iteration   6: 3106127.821 ops/s
Iteration   7: 3109688.752 ops/s
Iteration   8: 3109196.856 ops/s
Iteration   9: 3102861.556 ops/s
Iteration  10: 3106507.980 ops/s
Iteration  11: 3111523.948 ops/s
Iteration  12: 3104989.346 ops/s
Iteration  13: 3105595.372 ops/s
Iteration  14: 3106145.095 ops/s
Iteration  15: 3113657.792 ops/s
Iteration  16: 3105838.668 ops/s
Iteration  17: 3108266.587 ops/s
Iteration  18: 3102288.168 ops/s
Iteration  19: 3108456.489 ops/s
Iteration  20: 3097592.925 ops/s
Iteration  21: 3095570.308 ops/s
Iteration  22: 3108030.174 ops/s
Iteration  23: 3099334.723 ops/s
Iteration  24: 3093862.386 ops/s
Iteration  25: 3098638.625 ops/s
Iteration  26: 3110366.114 ops/s
Iteration  27: 3095164.742 ops/s
Iteration  28: 3107143.755 ops/s
Iteration  29: 3106945.964 ops/s
Iteration  30: 3098378.079 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_count":
  3104656.664 ±(99.9%) 4072.050 ops/s [Average]
  (min, avg, max) = (3090454.870, 3104656.664, 3114052.947), stdev = 6094.853
  CI (99.9%): [3100584.614, 3108728.714] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_count  thrpt   30  3104656.664 ± 4072.050  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2331520.979 ops/s
# Warmup Iteration   2: 5258526.194 ops/s
# Warmup Iteration   3: 4477609.388 ops/s
# Warmup Iteration   4: 5371721.944 ops/s
# Warmup Iteration   5: 5372462.481 ops/s
# Warmup Iteration   6: 5369740.032 ops/s
# Warmup Iteration   7: 5344760.475 ops/s
# Warmup Iteration   8: 5378252.678 ops/s
# Warmup Iteration   9: 5353005.459 ops/s
# Warmup Iteration  10: 5356716.828 ops/s
# Warmup Iteration  11: 5374747.403 ops/s
# Warmup Iteration  12: 5360257.392 ops/s
# Warmup Iteration  13: 5374161.532 ops/s
# Warmup Iteration  14: 5372090.846 ops/s
# Warmup Iteration  15: 5325555.448 ops/s
# Warmup Iteration  16: 5372914.609 ops/s
# Warmup Iteration  17: 5379382.854 ops/s
# Warmup Iteration  18: 5363084.196 ops/s
# Warmup Iteration  19: 5373007.283 ops/s
# Warmup Iteration  20: 5353903.314 ops/s
# Warmup Iteration  21: 5344855.571 ops/s
# Warmup Iteration  22: 5356047.327 ops/s
# Warmup Iteration  23: 5349334.747 ops/s
# Warmup Iteration  24: 5348739.906 ops/s
# Warmup Iteration  25: 5353691.906 ops/s
# Warmup Iteration  26: 5360202.636 ops/s
# Warmup Iteration  27: 5356999.447 ops/s
# Warmup Iteration  28: 5362071.481 ops/s
# Warmup Iteration  29: 5311423.407 ops/s
# Warmup Iteration  30: 5339408.581 ops/s
Iteration   1: 5364922.078 ops/s
Iteration   2: 5368092.267 ops/s
Iteration   3: 5342819.274 ops/s
Iteration   4: 5376796.325 ops/s
Iteration   5: 5373391.615 ops/s
Iteration   6: 5386949.922 ops/s
Iteration   7: 5375732.878 ops/s
Iteration   8: 5368351.893 ops/s
Iteration   9: 5349099.217 ops/s
Iteration  10: 5362089.724 ops/s
Iteration  11: 5286886.253 ops/s
Iteration  12: 5371525.428 ops/s
Iteration  13: 5373391.860 ops/s
Iteration  14: 5286951.321 ops/s
Iteration  15: 5347975.851 ops/s
Iteration  16: 5350968.044 ops/s
Iteration  17: 5394787.399 ops/s
Iteration  18: 5357181.177 ops/s
Iteration  19: 5369911.470 ops/s
Iteration  20: 5371263.100 ops/s
Iteration  21: 5386220.915 ops/s
Iteration  22: 5353533.607 ops/s
Iteration  23: 5356475.428 ops/s
Iteration  24: 5358635.554 ops/s
Iteration  25: 5358883.472 ops/s
Iteration  26: 5374031.371 ops/s
Iteration  27: 5353146.396 ops/s
Iteration  28: 5364709.526 ops/s
Iteration  29: 5347515.083 ops/s
Iteration  30: 5341198.553 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_detectIfNone":
  5359114.567 ±(99.9%) 15777.856 ops/s [Average]
  (min, avg, max) = (5286886.253, 5359114.567, 5394787.399), stdev = 23615.554
  CI (99.9%): [5343336.710, 5374892.423] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_detectIfNone  thrpt   30  5359114.567 ± 15777.856  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3208439.061 ops/s
# Warmup Iteration   2: 6841955.772 ops/s
# Warmup Iteration   3: 5619553.868 ops/s
# Warmup Iteration   4: 6652468.942 ops/s
# Warmup Iteration   5: 6689437.231 ops/s
# Warmup Iteration   6: 6697682.091 ops/s
# Warmup Iteration   7: 6699233.912 ops/s
# Warmup Iteration   8: 6686081.267 ops/s
# Warmup Iteration   9: 6684928.756 ops/s
# Warmup Iteration  10: 6691843.219 ops/s
# Warmup Iteration  11: 6707409.110 ops/s
# Warmup Iteration  12: 6649262.482 ops/s
# Warmup Iteration  13: 6693494.116 ops/s
# Warmup Iteration  14: 6684260.744 ops/s
# Warmup Iteration  15: 6710683.584 ops/s
# Warmup Iteration  16: 6701655.046 ops/s
# Warmup Iteration  17: 6708031.514 ops/s
# Warmup Iteration  18: 6678290.078 ops/s
# Warmup Iteration  19: 6678400.379 ops/s
# Warmup Iteration  20: 6685243.204 ops/s
# Warmup Iteration  21: 6713923.907 ops/s
# Warmup Iteration  22: 6718175.208 ops/s
# Warmup Iteration  23: 6674510.647 ops/s
# Warmup Iteration  24: 6682033.220 ops/s
# Warmup Iteration  25: 6690917.565 ops/s
# Warmup Iteration  26: 6685222.874 ops/s
# Warmup Iteration  27: 6694072.938 ops/s
# Warmup Iteration  28: 6690036.693 ops/s
# Warmup Iteration  29: 6707636.759 ops/s
# Warmup Iteration  30: 6700808.144 ops/s
Iteration   1: 6693637.944 ops/s
Iteration   2: 6722253.686 ops/s
Iteration   3: 6708852.167 ops/s
Iteration   4: 6694961.373 ops/s
Iteration   5: 6702557.922 ops/s
Iteration   6: 6685521.978 ops/s
Iteration   7: 6681914.000 ops/s
Iteration   8: 6694963.790 ops/s
Iteration   9: 6594454.740 ops/s
Iteration  10: 6718016.168 ops/s
Iteration  11: 6691877.521 ops/s
Iteration  12: 6684341.620 ops/s
Iteration  13: 6704253.886 ops/s
Iteration  14: 6708077.622 ops/s
Iteration  15: 6707417.790 ops/s
Iteration  16: 6644969.608 ops/s
Iteration  17: 6677137.298 ops/s
Iteration  18: 6695143.476 ops/s
Iteration  19: 6699943.098 ops/s
Iteration  20: 6690633.255 ops/s
Iteration  21: 6682704.904 ops/s
Iteration  22: 6679762.122 ops/s
Iteration  23: 6692637.351 ops/s
Iteration  24: 6709759.176 ops/s
Iteration  25: 6708123.398 ops/s
Iteration  26: 6685765.036 ops/s
Iteration  27: 6603722.390 ops/s
Iteration  28: 6719310.242 ops/s
Iteration  29: 6679515.312 ops/s
Iteration  30: 6690670.439 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_forEach":
  6688429.977 ±(99.9%) 19237.782 ops/s [Average]
  (min, avg, max) = (6594454.740, 6688429.977, 6722253.686), stdev = 28794.208
  CI (99.9%): [6669192.195, 6707667.759] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_forEach  thrpt   30  6688429.977 ± 19237.782  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7337166.333 ops/s
# Warmup Iteration   2: 22530173.529 ops/s
# Warmup Iteration   3: 21326101.548 ops/s
# Warmup Iteration   4: 24034738.240 ops/s
# Warmup Iteration   5: 24091054.557 ops/s
# Warmup Iteration   6: 24237017.004 ops/s
# Warmup Iteration   7: 24094725.051 ops/s
# Warmup Iteration   8: 24039626.688 ops/s
# Warmup Iteration   9: 24243827.656 ops/s
# Warmup Iteration  10: 23970823.168 ops/s
# Warmup Iteration  11: 24198277.074 ops/s
# Warmup Iteration  12: 24203730.398 ops/s
# Warmup Iteration  13: 24011308.365 ops/s
# Warmup Iteration  14: 24052019.955 ops/s
# Warmup Iteration  15: 23933953.306 ops/s
# Warmup Iteration  16: 24049821.518 ops/s
# Warmup Iteration  17: 24100960.920 ops/s
# Warmup Iteration  18: 24111607.181 ops/s
# Warmup Iteration  19: 24241431.981 ops/s
# Warmup Iteration  20: 24271912.866 ops/s
# Warmup Iteration  21: 24077276.452 ops/s
# Warmup Iteration  22: 24149786.285 ops/s
# Warmup Iteration  23: 23820541.715 ops/s
# Warmup Iteration  24: 24182618.936 ops/s
# Warmup Iteration  25: 24231187.788 ops/s
# Warmup Iteration  26: 24112153.903 ops/s
# Warmup Iteration  27: 24124187.049 ops/s
# Warmup Iteration  28: 24071500.693 ops/s
# Warmup Iteration  29: 24094766.404 ops/s
# Warmup Iteration  30: 24158756.942 ops/s
Iteration   1: 24247662.042 ops/s
Iteration   2: 24234060.496 ops/s
Iteration   3: 24113637.304 ops/s
Iteration   4: 24188175.597 ops/s
Iteration   5: 23990029.879 ops/s
Iteration   6: 24183614.013 ops/s
Iteration   7: 23980125.079 ops/s
Iteration   8: 23515527.356 ops/s
Iteration   9: 24269445.280 ops/s
Iteration  10: 24012749.183 ops/s
Iteration  11: 24254228.202 ops/s
Iteration  12: 24264426.559 ops/s
Iteration  13: 24348448.427 ops/s
Iteration  14: 23994101.797 ops/s
Iteration  15: 23704254.196 ops/s
Iteration  16: 24151680.864 ops/s
Iteration  17: 24295279.509 ops/s
Iteration  18: 24252491.930 ops/s
Iteration  19: 24572358.242 ops/s
Iteration  20: 24173242.448 ops/s
Iteration  21: 24027387.989 ops/s
Iteration  22: 24012959.464 ops/s
Iteration  23: 24272223.931 ops/s
Iteration  24: 24243738.965 ops/s
Iteration  25: 24085594.283 ops/s
Iteration  26: 24341676.348 ops/s
Iteration  27: 24119642.668 ops/s
Iteration  28: 23977331.489 ops/s
Iteration  29: 24266544.941 ops/s
Iteration  30: 24190238.159 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_injectInto":
  24142762.555 ±(99.9%) 133062.052 ops/s [Average]
  (min, avg, max) = (23515527.356, 24142762.555, 24572358.242), stdev = 199161.030
  CI (99.9%): [24009700.503, 24275824.607] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt         Score        Error  Units
UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_injectInto  thrpt   30  24142762.555 ± 133062.052  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1333720.329 ops/s
# Warmup Iteration   2: 2153175.755 ops/s
# Warmup Iteration   3: 2423000.965 ops/s
# Warmup Iteration   4: 2415466.046 ops/s
# Warmup Iteration   5: 2423491.657 ops/s
# Warmup Iteration   6: 2409933.362 ops/s
# Warmup Iteration   7: 2415151.144 ops/s
# Warmup Iteration   8: 2413474.432 ops/s
# Warmup Iteration   9: 2405418.536 ops/s
# Warmup Iteration  10: 2427357.653 ops/s
# Warmup Iteration  11: 2428892.414 ops/s
# Warmup Iteration  12: 2387513.561 ops/s
# Warmup Iteration  13: 2426762.130 ops/s
# Warmup Iteration  14: 2409930.312 ops/s
# Warmup Iteration  15: 2401932.890 ops/s
# Warmup Iteration  16: 2430727.080 ops/s
# Warmup Iteration  17: 2484272.059 ops/s
# Warmup Iteration  18: 2514034.163 ops/s
# Warmup Iteration  19: 2511408.993 ops/s
# Warmup Iteration  20: 2498795.282 ops/s
# Warmup Iteration  21: 2514081.347 ops/s
# Warmup Iteration  22: 2497120.413 ops/s
# Warmup Iteration  23: 2482682.280 ops/s
# Warmup Iteration  24: 2512108.687 ops/s
# Warmup Iteration  25: 2491806.471 ops/s
# Warmup Iteration  26: 2493141.391 ops/s
# Warmup Iteration  27: 2497608.801 ops/s
# Warmup Iteration  28: 2491424.980 ops/s
# Warmup Iteration  29: 2495880.422 ops/s
# Warmup Iteration  30: 2500004.162 ops/s
Iteration   1: 2522114.001 ops/s
Iteration   2: 2495081.135 ops/s
Iteration   3: 2480817.941 ops/s
Iteration   4: 2507347.604 ops/s
Iteration   5: 2520521.761 ops/s
Iteration   6: 2510673.981 ops/s
Iteration   7: 2490207.562 ops/s
Iteration   8: 2517175.801 ops/s
Iteration   9: 2475933.512 ops/s
Iteration  10: 2518390.464 ops/s
Iteration  11: 2511037.366 ops/s
Iteration  12: 2506293.449 ops/s
Iteration  13: 2498301.935 ops/s
Iteration  14: 2485214.209 ops/s
Iteration  15: 2505023.279 ops/s
Iteration  16: 2514253.866 ops/s
Iteration  17: 2514043.291 ops/s
Iteration  18: 2487845.302 ops/s
Iteration  19: 2465546.488 ops/s
Iteration  20: 2504083.358 ops/s
Iteration  21: 2512925.565 ops/s
Iteration  22: 2511476.713 ops/s
Iteration  23: 2490713.019 ops/s
Iteration  24: 2491885.874 ops/s
Iteration  25: 2445768.946 ops/s
Iteration  26: 2495774.817 ops/s
Iteration  27: 2496995.589 ops/s
Iteration  28: 2519372.253 ops/s
Iteration  29: 2497221.948 ops/s
Iteration  30: 2492415.103 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_isEmpty":
  2499481.871 ±(99.9%) 11631.617 ops/s [Average]
  (min, avg, max) = (2445768.946, 2499481.871, 2522114.001), stdev = 17409.659
  CI (99.9%): [2487850.254, 2511113.488] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_isEmpty  thrpt   30  2499481.871 ± 11631.617  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_iterator_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_iterator_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 653756.841 ops/s
# Warmup Iteration   2: 675472.157 ops/s
# Warmup Iteration   3: 850304.053 ops/s
# Warmup Iteration   4: 883952.339 ops/s
# Warmup Iteration   5: 884949.666 ops/s
# Warmup Iteration   6: 882091.987 ops/s
# Warmup Iteration   7: 876267.280 ops/s
# Warmup Iteration   8: 881810.580 ops/s
# Warmup Iteration   9: 884341.752 ops/s
# Warmup Iteration  10: 884758.291 ops/s
# Warmup Iteration  11: 884066.353 ops/s
# Warmup Iteration  12: 849339.528 ops/s
# Warmup Iteration  13: 770253.812 ops/s
# Warmup Iteration  14: 885181.199 ops/s
# Warmup Iteration  15: 885869.565 ops/s
# Warmup Iteration  16: 882985.035 ops/s
# Warmup Iteration  17: 937446.414 ops/s
# Warmup Iteration  18: 940051.810 ops/s
# Warmup Iteration  19: 937887.857 ops/s
# Warmup Iteration  20: 936030.025 ops/s
# Warmup Iteration  21: 933107.761 ops/s
# Warmup Iteration  22: 939069.324 ops/s
# Warmup Iteration  23: 936273.208 ops/s
# Warmup Iteration  24: 940213.084 ops/s
# Warmup Iteration  25: 935251.450 ops/s
# Warmup Iteration  26: 935172.754 ops/s
# Warmup Iteration  27: 933646.927 ops/s
# Warmup Iteration  28: 936384.247 ops/s
# Warmup Iteration  29: 928307.233 ops/s
# Warmup Iteration  30: 934913.647 ops/s
Iteration   1: 935553.502 ops/s
Iteration   2: 940407.090 ops/s
Iteration   3: 937829.613 ops/s
Iteration   4: 938491.304 ops/s
Iteration   5: 938277.890 ops/s
Iteration   6: 938914.981 ops/s
Iteration   7: 937315.713 ops/s
Iteration   8: 938233.572 ops/s
Iteration   9: 939627.149 ops/s
Iteration  10: 939519.919 ops/s
Iteration  11: 933743.512 ops/s
Iteration  12: 936709.050 ops/s
Iteration  13: 937766.708 ops/s
Iteration  14: 941555.870 ops/s
Iteration  15: 937929.729 ops/s
Iteration  16: 936493.451 ops/s
Iteration  17: 938255.943 ops/s
Iteration  18: 938599.634 ops/s
Iteration  19: 934370.733 ops/s
Iteration  20: 938929.722 ops/s
Iteration  21: 939357.456 ops/s
Iteration  22: 939087.244 ops/s
Iteration  23: 939123.126 ops/s
Iteration  24: 937084.016 ops/s
Iteration  25: 924278.679 ops/s
Iteration  26: 941574.160 ops/s
Iteration  27: 936218.392 ops/s
Iteration  28: 940062.613 ops/s
Iteration  29: 939755.629 ops/s
Iteration  30: 940087.516 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_iterator_throws":
  937838.464 ±(99.9%) 2105.181 ops/s [Average]
  (min, avg, max) = (924278.679, 937838.464, 941574.160), stdev = 3150.936
  CI (99.9%): [935733.283, 939943.645] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_iterator_throws  thrpt   30  937838.464 ± 2105.181  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 719712.484 ops/s
# Warmup Iteration   2: 763098.045 ops/s
# Warmup Iteration   3: 1002308.407 ops/s
# Warmup Iteration   4: 993848.047 ops/s
# Warmup Iteration   5: 994568.339 ops/s
# Warmup Iteration   6: 995519.608 ops/s
# Warmup Iteration   7: 995402.596 ops/s
# Warmup Iteration   8: 992279.063 ops/s
# Warmup Iteration   9: 992690.035 ops/s
# Warmup Iteration  10: 995351.979 ops/s
# Warmup Iteration  11: 837402.225 ops/s
# Warmup Iteration  12: 995278.516 ops/s
# Warmup Iteration  13: 993881.258 ops/s
# Warmup Iteration  14: 995474.784 ops/s
# Warmup Iteration  15: 995759.746 ops/s
# Warmup Iteration  16: 997365.806 ops/s
# Warmup Iteration  17: 1055542.332 ops/s
# Warmup Iteration  18: 1058256.949 ops/s
# Warmup Iteration  19: 1056100.565 ops/s
# Warmup Iteration  20: 1053003.543 ops/s
# Warmup Iteration  21: 1054272.845 ops/s
# Warmup Iteration  22: 1054105.706 ops/s
# Warmup Iteration  23: 1059041.076 ops/s
# Warmup Iteration  24: 1058483.515 ops/s
# Warmup Iteration  25: 1053082.723 ops/s
# Warmup Iteration  26: 1053564.398 ops/s
# Warmup Iteration  27: 1054873.263 ops/s
# Warmup Iteration  28: 1058013.255 ops/s
# Warmup Iteration  29: 1058195.864 ops/s
# Warmup Iteration  30: 1056789.769 ops/s
Iteration   1: 1050600.399 ops/s
Iteration   2: 1053753.456 ops/s
Iteration   3: 1059501.809 ops/s
Iteration   4: 1049341.748 ops/s
Iteration   5: 1060037.992 ops/s
Iteration   6: 1059321.658 ops/s
Iteration   7: 1058356.364 ops/s
Iteration   8: 1057427.526 ops/s
Iteration   9: 1056153.633 ops/s
Iteration  10: 1056867.043 ops/s
Iteration  11: 1059892.152 ops/s
Iteration  12: 1053335.903 ops/s
Iteration  13: 1060510.206 ops/s
Iteration  14: 1060048.760 ops/s
Iteration  15: 1055613.779 ops/s
Iteration  16: 1062220.053 ops/s
Iteration  17: 1049276.366 ops/s
Iteration  18: 1054908.951 ops/s
Iteration  19: 1054291.820 ops/s
Iteration  20: 1061507.512 ops/s
Iteration  21: 1052100.043 ops/s
Iteration  22: 1055856.789 ops/s
Iteration  23: 1051617.282 ops/s
Iteration  24: 1058168.863 ops/s
Iteration  25: 1057309.650 ops/s
Iteration  26: 1061305.303 ops/s
Iteration  27: 1043908.517 ops/s
Iteration  28: 1058723.814 ops/s
Iteration  29: 1055853.357 ops/s
Iteration  30: 1051318.995 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList":
  1055970.991 ±(99.9%) 2905.633 ops/s [Average]
  (min, avg, max) = (1043908.517, 1055970.991, 1062220.053), stdev = 4349.016
  CI (99.9%): [1053065.358, 1058876.625] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt        Score      Error  Units
UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList  thrpt   30  1055970.991 ± 2905.633  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 648464.733 ops/s
# Warmup Iteration   2: 665956.707 ops/s
# Warmup Iteration   3: 878194.949 ops/s
# Warmup Iteration   4: 880858.753 ops/s
# Warmup Iteration   5: 875534.505 ops/s
# Warmup Iteration   6: 882522.180 ops/s
# Warmup Iteration   7: 881535.554 ops/s
# Warmup Iteration   8: 881600.084 ops/s
# Warmup Iteration   9: 881778.875 ops/s
# Warmup Iteration  10: 880247.707 ops/s
# Warmup Iteration  11: 883305.744 ops/s
# Warmup Iteration  12: 734573.388 ops/s
# Warmup Iteration  13: 881930.041 ops/s
# Warmup Iteration  14: 881811.790 ops/s
# Warmup Iteration  15: 882948.236 ops/s
# Warmup Iteration  16: 883639.602 ops/s
# Warmup Iteration  17: 936813.933 ops/s
# Warmup Iteration  18: 936944.032 ops/s
# Warmup Iteration  19: 935743.107 ops/s
# Warmup Iteration  20: 934552.837 ops/s
# Warmup Iteration  21: 933101.225 ops/s
# Warmup Iteration  22: 933658.392 ops/s
# Warmup Iteration  23: 934479.510 ops/s
# Warmup Iteration  24: 933010.257 ops/s
# Warmup Iteration  25: 934279.932 ops/s
# Warmup Iteration  26: 932454.075 ops/s
# Warmup Iteration  27: 934490.406 ops/s
# Warmup Iteration  28: 935873.057 ops/s
# Warmup Iteration  29: 935036.094 ops/s
# Warmup Iteration  30: 925902.607 ops/s
Iteration   1: 934874.781 ops/s
Iteration   2: 932583.393 ops/s
Iteration   3: 935391.941 ops/s
Iteration   4: 937191.313 ops/s
Iteration   5: 936474.855 ops/s
Iteration   6: 929865.315 ops/s
Iteration   7: 938583.903 ops/s
Iteration   8: 935582.631 ops/s
Iteration   9: 933916.679 ops/s
Iteration  10: 919752.183 ops/s
Iteration  11: 935358.006 ops/s
Iteration  12: 933494.862 ops/s
Iteration  13: 937259.674 ops/s
Iteration  14: 934840.893 ops/s
Iteration  15: 935253.313 ops/s
Iteration  16: 935066.723 ops/s
Iteration  17: 936997.062 ops/s
Iteration  18: 935418.865 ops/s
Iteration  19: 936164.622 ops/s
Iteration  20: 936092.364 ops/s
Iteration  21: 921116.840 ops/s
Iteration  22: 936761.209 ops/s
Iteration  23: 932930.723 ops/s
Iteration  24: 935470.989 ops/s
Iteration  25: 933831.620 ops/s
Iteration  26: 936520.689 ops/s
Iteration  27: 934331.616 ops/s
Iteration  28: 936130.264 ops/s
Iteration  29: 933452.043 ops/s
Iteration  30: 932084.479 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection":
  934093.128 ±(99.9%) 2753.261 ops/s [Average]
  (min, avg, max) = (919752.183, 934093.128, 938583.903), stdev = 4120.952
  CI (99.9%): [931339.867, 936846.390] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                       Mode  Cnt       Score      Error  Units
UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection  thrpt   30  934093.128 ± 2753.261  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 168952282.349 ops/s
# Warmup Iteration   2: 299412741.701 ops/s
# Warmup Iteration   3: 275636639.598 ops/s
# Warmup Iteration   4: 315900402.685 ops/s
# Warmup Iteration   5: 315034247.900 ops/s
# Warmup Iteration   6: 316638142.310 ops/s
# Warmup Iteration   7: 315918830.138 ops/s
# Warmup Iteration   8: 315177706.933 ops/s
# Warmup Iteration   9: 316683699.879 ops/s
# Warmup Iteration  10: 317432218.821 ops/s
# Warmup Iteration  11: 316457409.731 ops/s
# Warmup Iteration  12: 315835639.566 ops/s
# Warmup Iteration  13: 316385156.897 ops/s
# Warmup Iteration  14: 316735316.286 ops/s
# Warmup Iteration  15: 317648766.614 ops/s
# Warmup Iteration  16: 316754671.566 ops/s
# Warmup Iteration  17: 314440417.988 ops/s
# Warmup Iteration  18: 314209550.502 ops/s
# Warmup Iteration  19: 316637233.145 ops/s
# Warmup Iteration  20: 314848032.488 ops/s
# Warmup Iteration  21: 314669805.171 ops/s
# Warmup Iteration  22: 314509207.155 ops/s
# Warmup Iteration  23: 314090214.886 ops/s
# Warmup Iteration  24: 314539483.645 ops/s
# Warmup Iteration  25: 315858653.998 ops/s
# Warmup Iteration  26: 314107095.121 ops/s
# Warmup Iteration  27: 314255879.228 ops/s
# Warmup Iteration  28: 314745546.567 ops/s
# Warmup Iteration  29: 312802446.338 ops/s
# Warmup Iteration  30: 313371162.788 ops/s
Iteration   1: 314925411.281 ops/s
Iteration   2: 314733354.748 ops/s
Iteration   3: 314617512.804 ops/s
Iteration   4: 316335854.756 ops/s
Iteration   5: 315050589.971 ops/s
Iteration   6: 314973956.806 ops/s
Iteration   7: 315290118.357 ops/s
Iteration   8: 315073404.402 ops/s
Iteration   9: 315305222.065 ops/s
Iteration  10: 314689691.965 ops/s
Iteration  11: 315528334.152 ops/s
Iteration  12: 313491646.488 ops/s
Iteration  13: 314483306.552 ops/s
Iteration  14: 314527186.654 ops/s
Iteration  15: 313943245.434 ops/s
Iteration  16: 315684642.156 ops/s
Iteration  17: 312683694.316 ops/s
Iteration  18: 314071724.261 ops/s
Iteration  19: 309897448.179 ops/s
Iteration  20: 309791141.896 ops/s
Iteration  21: 313105146.518 ops/s
Iteration  22: 314376427.210 ops/s
Iteration  23: 313285877.467 ops/s
Iteration  24: 313144575.012 ops/s
Iteration  25: 314502147.397 ops/s
Iteration  26: 316242012.258 ops/s
Iteration  27: 314586756.696 ops/s
Iteration  28: 312363457.040 ops/s
Iteration  29: 313655100.089 ops/s
Iteration  30: 312540010.829 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove":
  314096633.259 ±(99.9%) 1030311.427 ops/s [Average]
  (min, avg, max) = (309791141.896, 314096633.259, 316335854.756), stdev = 1542121.756
  CI (99.9%): [313066321.832, 315126944.685] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                      Mode  Cnt          Score         Error  Units
UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove  thrpt   30  314096633.259 ± 1030311.427  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 678300.391 ops/s
# Warmup Iteration   2: 790944.626 ops/s
# Warmup Iteration   3: 995734.255 ops/s
# Warmup Iteration   4: 990489.105 ops/s
# Warmup Iteration   5: 986851.271 ops/s
# Warmup Iteration   6: 980239.796 ops/s
# Warmup Iteration   7: 986015.806 ops/s
# Warmup Iteration   8: 993992.036 ops/s
# Warmup Iteration   9: 936066.447 ops/s
# Warmup Iteration  10: 887864.142 ops/s
# Warmup Iteration  11: 995224.439 ops/s
# Warmup Iteration  12: 992606.343 ops/s
# Warmup Iteration  13: 994483.418 ops/s
# Warmup Iteration  14: 990658.528 ops/s
# Warmup Iteration  15: 995769.205 ops/s
# Warmup Iteration  16: 989840.293 ops/s
# Warmup Iteration  17: 1060388.550 ops/s
# Warmup Iteration  18: 1058582.427 ops/s
# Warmup Iteration  19: 1056286.035 ops/s
# Warmup Iteration  20: 1057558.414 ops/s
# Warmup Iteration  21: 1057739.430 ops/s
# Warmup Iteration  22: 1056648.831 ops/s
# Warmup Iteration  23: 1057943.508 ops/s
# Warmup Iteration  24: 1048538.588 ops/s
# Warmup Iteration  25: 1058607.660 ops/s
# Warmup Iteration  26: 1055446.864 ops/s
# Warmup Iteration  27: 1057564.775 ops/s
# Warmup Iteration  28: 1054155.270 ops/s
# Warmup Iteration  29: 1055114.448 ops/s
# Warmup Iteration  30: 1054579.258 ops/s
Iteration   1: 1055413.640 ops/s
Iteration   2: 1053500.226 ops/s
Iteration   3: 1057719.852 ops/s
Iteration   4: 1059200.236 ops/s
Iteration   5: 1054640.365 ops/s
Iteration   6: 1057472.164 ops/s
Iteration   7: 1057859.042 ops/s
Iteration   8: 1057570.041 ops/s
Iteration   9: 1057994.779 ops/s
Iteration  10: 1058879.123 ops/s
Iteration  11: 1050921.794 ops/s
Iteration  12: 1058274.009 ops/s
Iteration  13: 1057898.284 ops/s
Iteration  14: 1055700.307 ops/s
Iteration  15: 1058700.267 ops/s
Iteration  16: 1060708.461 ops/s
Iteration  17: 1056391.976 ops/s
Iteration  18: 1055733.704 ops/s
Iteration  19: 1053975.015 ops/s
Iteration  20: 1056898.600 ops/s
Iteration  21: 1051364.964 ops/s
Iteration  22: 1052053.232 ops/s
Iteration  23: 1048763.478 ops/s
Iteration  24: 1057107.177 ops/s
Iteration  25: 1060477.393 ops/s
Iteration  26: 1055609.759 ops/s
Iteration  27: 1055835.340 ops/s
Iteration  28: 1053494.320 ops/s
Iteration  29: 1053920.053 ops/s
Iteration  30: 1054553.239 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next":
  1055954.361 ±(99.9%) 1900.912 ops/s [Average]
  (min, avg, max) = (1048763.478, 1055954.361, 1060708.461), stdev = 2845.196
  CI (99.9%): [1054053.449, 1057855.273] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                      Mode  Cnt        Score      Error  Units
UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next  thrpt   30  1055954.361 ± 1900.912  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 911849.599 ops/s
# Warmup Iteration   2: 1969996.690 ops/s
# Warmup Iteration   3: 1652985.875 ops/s
# Warmup Iteration   4: 1941340.266 ops/s
# Warmup Iteration   5: 1938226.703 ops/s
# Warmup Iteration   6: 1943992.085 ops/s
# Warmup Iteration   7: 1955571.831 ops/s
# Warmup Iteration   8: 1951182.907 ops/s
# Warmup Iteration   9: 1959327.533 ops/s
# Warmup Iteration  10: 1945829.971 ops/s
# Warmup Iteration  11: 1943696.902 ops/s
# Warmup Iteration  12: 1941328.279 ops/s
# Warmup Iteration  13: 1943779.533 ops/s
# Warmup Iteration  14: 1957185.464 ops/s
# Warmup Iteration  15: 1948865.090 ops/s
# Warmup Iteration  16: 1957913.078 ops/s
# Warmup Iteration  17: 1948665.566 ops/s
# Warmup Iteration  18: 1949921.738 ops/s
# Warmup Iteration  19: 1933935.845 ops/s
# Warmup Iteration  20: 1947540.469 ops/s
# Warmup Iteration  21: 1933503.745 ops/s
# Warmup Iteration  22: 1954002.284 ops/s
# Warmup Iteration  23: 1957100.794 ops/s
# Warmup Iteration  24: 1950895.509 ops/s
# Warmup Iteration  25: 1957530.358 ops/s
# Warmup Iteration  26: 1951868.557 ops/s
# Warmup Iteration  27: 1946994.501 ops/s
# Warmup Iteration  28: 1961880.284 ops/s
# Warmup Iteration  29: 1951829.768 ops/s
# Warmup Iteration  30: 1965355.702 ops/s
Iteration   1: 1968009.201 ops/s
Iteration   2: 1959586.367 ops/s
Iteration   3: 1952582.048 ops/s
Iteration   4: 1961552.536 ops/s
Iteration   5: 1946128.110 ops/s
Iteration   6: 1951438.076 ops/s
Iteration   7: 1950165.975 ops/s
Iteration   8: 1943322.415 ops/s
Iteration   9: 1917571.900 ops/s
Iteration  10: 1970675.399 ops/s
Iteration  11: 1948322.621 ops/s
Iteration  12: 1949183.968 ops/s
Iteration  13: 1949775.310 ops/s
Iteration  14: 1935372.639 ops/s
Iteration  15: 1955097.062 ops/s
Iteration  16: 1944768.176 ops/s
Iteration  17: 1927676.841 ops/s
Iteration  18: 1927507.460 ops/s
Iteration  19: 1944462.818 ops/s
Iteration  20: 1939750.681 ops/s
Iteration  21: 1951337.412 ops/s
Iteration  22: 1937008.489 ops/s
Iteration  23: 1953246.943 ops/s
Iteration  24: 1956493.489 ops/s
Iteration  25: 1945790.592 ops/s
Iteration  26: 1953937.569 ops/s
Iteration  27: 1953536.807 ops/s
Iteration  28: 1962143.522 ops/s
Iteration  29: 1967760.311 ops/s
Iteration  30: 1931346.926 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_makeString":
  1948518.389 ±(99.9%) 8342.755 ops/s [Average]
  (min, avg, max) = (1917571.900, 1948518.389, 1970675.399), stdev = 12487.044
  CI (99.9%): [1940175.634, 1956861.144] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_makeString  thrpt   30  1948518.389 ± 8342.755  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_newCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_newCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 169906526.347 ops/s
# Warmup Iteration   2: 299799514.278 ops/s
# Warmup Iteration   3: 277699219.822 ops/s
# Warmup Iteration   4: 311311767.277 ops/s
# Warmup Iteration   5: 314568080.518 ops/s
# Warmup Iteration   6: 313353192.691 ops/s
# Warmup Iteration   7: 313956382.315 ops/s
# Warmup Iteration   8: 314664627.702 ops/s
# Warmup Iteration   9: 313652649.215 ops/s
# Warmup Iteration  10: 313563086.441 ops/s
# Warmup Iteration  11: 314479185.738 ops/s
# Warmup Iteration  12: 314074406.475 ops/s
# Warmup Iteration  13: 313707868.575 ops/s
# Warmup Iteration  14: 314524228.340 ops/s
# Warmup Iteration  15: 313608105.997 ops/s
# Warmup Iteration  16: 313795384.445 ops/s
# Warmup Iteration  17: 314051886.424 ops/s
# Warmup Iteration  18: 312445193.839 ops/s
# Warmup Iteration  19: 314776090.364 ops/s
# Warmup Iteration  20: 314478403.072 ops/s
# Warmup Iteration  21: 312523081.862 ops/s
# Warmup Iteration  22: 313395197.176 ops/s
# Warmup Iteration  23: 313966844.330 ops/s
# Warmup Iteration  24: 312630932.848 ops/s
# Warmup Iteration  25: 313520811.253 ops/s
# Warmup Iteration  26: 311291127.336 ops/s
# Warmup Iteration  27: 314158203.753 ops/s
# Warmup Iteration  28: 314244329.152 ops/s
# Warmup Iteration  29: 313702589.631 ops/s
# Warmup Iteration  30: 313761088.355 ops/s
Iteration   1: 313791651.540 ops/s
Iteration   2: 313309979.670 ops/s
Iteration   3: 311461005.213 ops/s
Iteration   4: 312725412.042 ops/s
Iteration   5: 314025928.063 ops/s
Iteration   6: 305353344.337 ops/s
Iteration   7: 314346328.710 ops/s
Iteration   8: 314825162.436 ops/s
Iteration   9: 314623337.271 ops/s
Iteration  10: 314928440.704 ops/s
Iteration  11: 315141163.625 ops/s
Iteration  12: 309114619.049 ops/s
Iteration  13: 308482131.829 ops/s
Iteration  14: 308954934.724 ops/s
Iteration  15: 313929898.055 ops/s
Iteration  16: 312386592.336 ops/s
Iteration  17: 312787801.359 ops/s
Iteration  18: 312249545.072 ops/s
Iteration  19: 314263253.835 ops/s
Iteration  20: 312959751.256 ops/s
Iteration  21: 314409850.654 ops/s
Iteration  22: 307795679.055 ops/s
Iteration  23: 313036806.347 ops/s
Iteration  24: 313729434.088 ops/s
Iteration  25: 313819936.887 ops/s
Iteration  26: 313994355.976 ops/s
Iteration  27: 311916102.107 ops/s
Iteration  28: 315062932.983 ops/s
Iteration  29: 315173730.946 ops/s
Iteration  30: 308229813.959 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_newCollection":
  312560964.138 ±(99.9%) 1721268.556 ops/s [Average]
  (min, avg, max) = (305353344.337, 312560964.138, 315173730.946), stdev = 2576313.939
  CI (99.9%): [310839695.581, 314282232.694] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt          Score         Error  Units
UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_newCollection  thrpt   30  312560964.138 ± 1721268.556  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_newCollectionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_newCollectionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3475039.895 ops/s
# Warmup Iteration   2: 5977370.150 ops/s
# Warmup Iteration   3: 7077379.733 ops/s
# Warmup Iteration   4: 7092806.143 ops/s
# Warmup Iteration   5: 7106614.883 ops/s
# Warmup Iteration   6: 7095695.928 ops/s
# Warmup Iteration   7: 7118806.839 ops/s
# Warmup Iteration   8: 7067642.572 ops/s
# Warmup Iteration   9: 7017101.599 ops/s
# Warmup Iteration  10: 7051833.381 ops/s
# Warmup Iteration  11: 7125364.174 ops/s
# Warmup Iteration  12: 7126367.478 ops/s
# Warmup Iteration  13: 7093200.406 ops/s
# Warmup Iteration  14: 7117497.059 ops/s
# Warmup Iteration  15: 7094831.090 ops/s
# Warmup Iteration  16: 7080952.191 ops/s
# Warmup Iteration  17: 7098408.896 ops/s
# Warmup Iteration  18: 7086806.923 ops/s
# Warmup Iteration  19: 7031834.681 ops/s
# Warmup Iteration  20: 7075490.516 ops/s
# Warmup Iteration  21: 7068688.536 ops/s
# Warmup Iteration  22: 7110519.128 ops/s
# Warmup Iteration  23: 7082380.262 ops/s
# Warmup Iteration  24: 7078773.854 ops/s
# Warmup Iteration  25: 7103590.436 ops/s
# Warmup Iteration  26: 7073192.988 ops/s
# Warmup Iteration  27: 7094454.000 ops/s
# Warmup Iteration  28: 7046970.517 ops/s
# Warmup Iteration  29: 7116324.066 ops/s
# Warmup Iteration  30: 7076812.546 ops/s
Iteration   1: 6945750.367 ops/s
Iteration   2: 7109705.277 ops/s
Iteration   3: 7098874.650 ops/s
Iteration   4: 7093695.827 ops/s
Iteration   5: 7107004.444 ops/s
Iteration   6: 7069374.137 ops/s
Iteration   7: 7068377.230 ops/s
Iteration   8: 7002984.758 ops/s
Iteration   9: 7084498.404 ops/s
Iteration  10: 7066389.751 ops/s
Iteration  11: 7028356.934 ops/s
Iteration  12: 7045243.374 ops/s
Iteration  13: 6968547.101 ops/s
Iteration  14: 7114756.311 ops/s
Iteration  15: 7084451.198 ops/s
Iteration  16: 7049836.986 ops/s
Iteration  17: 6906496.624 ops/s
Iteration  18: 7063345.349 ops/s
Iteration  19: 7056303.000 ops/s
Iteration  20: 7024616.733 ops/s
Iteration  21: 7107717.160 ops/s
Iteration  22: 7046488.564 ops/s
Iteration  23: 7064786.487 ops/s
Iteration  24: 7122701.094 ops/s
Iteration  25: 7094254.699 ops/s
Iteration  26: 7064423.320 ops/s
Iteration  27: 7114107.935 ops/s
Iteration  28: 7093491.100 ops/s
Iteration  29: 7076012.762 ops/s
Iteration  30: 7038549.708 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_newCollectionWith":
  7060371.376 ±(99.9%) 33958.626 ops/s [Average]
  (min, avg, max) = (6906496.624, 7060371.376, 7122701.094), stdev = 50827.677
  CI (99.9%): [7026412.750, 7094330.002] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_newCollectionWith  thrpt   30  7060371.376 ± 33958.626  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1593278.449 ops/s
# Warmup Iteration   2: 3087525.902 ops/s
# Warmup Iteration   3: 2965321.473 ops/s
# Warmup Iteration   4: 3301472.469 ops/s
# Warmup Iteration   5: 3299168.152 ops/s
# Warmup Iteration   6: 3292870.381 ops/s
# Warmup Iteration   7: 3301347.611 ops/s
# Warmup Iteration   8: 3297697.661 ops/s
# Warmup Iteration   9: 3312553.693 ops/s
# Warmup Iteration  10: 3303258.993 ops/s
# Warmup Iteration  11: 3291760.876 ops/s
# Warmup Iteration  12: 3288353.664 ops/s
# Warmup Iteration  13: 3295369.254 ops/s
# Warmup Iteration  14: 3298503.451 ops/s
# Warmup Iteration  15: 3274059.602 ops/s
# Warmup Iteration  16: 3263381.885 ops/s
# Warmup Iteration  17: 3286453.789 ops/s
# Warmup Iteration  18: 3292979.257 ops/s
# Warmup Iteration  19: 3306546.717 ops/s
# Warmup Iteration  20: 3307120.191 ops/s
# Warmup Iteration  21: 3298062.440 ops/s
# Warmup Iteration  22: 3267121.645 ops/s
# Warmup Iteration  23: 3270256.729 ops/s
# Warmup Iteration  24: 3297030.498 ops/s
# Warmup Iteration  25: 3297087.636 ops/s
# Warmup Iteration  26: 3309133.705 ops/s
# Warmup Iteration  27: 3298364.424 ops/s
# Warmup Iteration  28: 3276941.287 ops/s
# Warmup Iteration  29: 3296624.549 ops/s
# Warmup Iteration  30: 3306987.254 ops/s
Iteration   1: 3303659.988 ops/s
Iteration   2: 3305260.623 ops/s
Iteration   3: 3296925.375 ops/s
Iteration   4: 3291198.458 ops/s
Iteration   5: 3300232.235 ops/s
Iteration   6: 3312790.066 ops/s
Iteration   7: 3301346.272 ops/s
Iteration   8: 3298051.763 ops/s
Iteration   9: 3300179.997 ops/s
Iteration  10: 3301450.006 ops/s
Iteration  11: 3301372.217 ops/s
Iteration  12: 3309497.174 ops/s
Iteration  13: 3310449.159 ops/s
Iteration  14: 3252236.682 ops/s
Iteration  15: 3299574.841 ops/s
Iteration  16: 3282002.673 ops/s
Iteration  17: 3303681.213 ops/s
Iteration  18: 3310712.252 ops/s
Iteration  19: 3255801.234 ops/s
Iteration  20: 3252886.383 ops/s
Iteration  21: 3308926.942 ops/s
Iteration  22: 3284550.408 ops/s
Iteration  23: 3303407.297 ops/s
Iteration  24: 3272144.737 ops/s
Iteration  25: 3298944.746 ops/s
Iteration  26: 3294421.588 ops/s
Iteration  27: 3307852.718 ops/s
Iteration  28: 3261817.243 ops/s
Iteration  29: 3305752.078 ops/s
Iteration  30: 3290553.447 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_noneSatisfy":
  3293922.660 ±(99.9%) 11821.824 ops/s [Average]
  (min, avg, max) = (3252236.682, 3293922.660, 3312790.066), stdev = 17694.351
  CI (99.9%): [3282100.836, 3305744.484] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_noneSatisfy  thrpt   30  3293922.660 ± 11821.824  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_notEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_notEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4341016.532 ops/s
# Warmup Iteration   2: 7002944.343 ops/s
# Warmup Iteration   3: 8242256.014 ops/s
# Warmup Iteration   4: 8183334.701 ops/s
# Warmup Iteration   5: 8191478.753 ops/s
# Warmup Iteration   6: 8257549.635 ops/s
# Warmup Iteration   7: 8150635.452 ops/s
# Warmup Iteration   8: 8181758.026 ops/s
# Warmup Iteration   9: 8179337.898 ops/s
# Warmup Iteration  10: 8234246.374 ops/s
# Warmup Iteration  11: 8202671.816 ops/s
# Warmup Iteration  12: 8223745.480 ops/s
# Warmup Iteration  13: 8259025.569 ops/s
# Warmup Iteration  14: 8166192.515 ops/s
# Warmup Iteration  15: 8214588.003 ops/s
# Warmup Iteration  16: 8233267.287 ops/s
# Warmup Iteration  17: 8273717.116 ops/s
# Warmup Iteration  18: 8239958.608 ops/s
# Warmup Iteration  19: 8231936.556 ops/s
# Warmup Iteration  20: 8212244.473 ops/s
# Warmup Iteration  21: 8150956.583 ops/s
# Warmup Iteration  22: 8208362.219 ops/s
# Warmup Iteration  23: 8227685.976 ops/s
# Warmup Iteration  24: 8228588.546 ops/s
# Warmup Iteration  25: 8219339.136 ops/s
# Warmup Iteration  26: 8220524.808 ops/s
# Warmup Iteration  27: 8216529.204 ops/s
# Warmup Iteration  28: 8229919.289 ops/s
# Warmup Iteration  29: 8221499.502 ops/s
# Warmup Iteration  30: 8197594.835 ops/s
Iteration   1: 8248060.829 ops/s
Iteration   2: 8107327.128 ops/s
Iteration   3: 8233606.042 ops/s
Iteration   4: 8222819.439 ops/s
Iteration   5: 8153653.013 ops/s
Iteration   6: 8324207.855 ops/s
Iteration   7: 8204823.881 ops/s
Iteration   8: 8280114.508 ops/s
Iteration   9: 8260327.373 ops/s
Iteration  10: 8244750.852 ops/s
Iteration  11: 8284214.986 ops/s
Iteration  12: 8125262.842 ops/s
Iteration  13: 8192432.218 ops/s
Iteration  14: 8252855.136 ops/s
Iteration  15: 8203379.053 ops/s
Iteration  16: 8250982.070 ops/s
Iteration  17: 8235906.786 ops/s
Iteration  18: 8199852.722 ops/s
Iteration  19: 8259279.577 ops/s
Iteration  20: 8239228.287 ops/s
Iteration  21: 8239904.942 ops/s
Iteration  22: 8221512.796 ops/s
Iteration  23: 8224407.223 ops/s
Iteration  24: 8228404.057 ops/s
Iteration  25: 8185028.804 ops/s
Iteration  26: 8165141.220 ops/s
Iteration  27: 8188118.738 ops/s
Iteration  28: 8166761.597 ops/s
Iteration  29: 8082382.332 ops/s
Iteration  30: 8237667.427 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_notEmpty":
  8215413.791 ±(99.9%) 35300.312 ops/s [Average]
  (min, avg, max) = (8082382.332, 8215413.791, 8324207.855), stdev = 52835.849
  CI (99.9%): [8180113.479, 8250714.103] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_notEmpty  thrpt   30  8215413.791 ± 35300.312  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_reduce$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_reduce

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 845771.654 ops/s
# Warmup Iteration   2: 3540260.798 ops/s
# Warmup Iteration   3: 3004577.264 ops/s
# Warmup Iteration   4: 3587107.815 ops/s
# Warmup Iteration   5: 3578951.795 ops/s
# Warmup Iteration   6: 3590760.650 ops/s
# Warmup Iteration   7: 3585333.404 ops/s
# Warmup Iteration   8: 3580310.796 ops/s
# Warmup Iteration   9: 3588270.155 ops/s
# Warmup Iteration  10: 3576953.311 ops/s
# Warmup Iteration  11: 3583191.450 ops/s
# Warmup Iteration  12: 3549131.025 ops/s
# Warmup Iteration  13: 3585761.595 ops/s
# Warmup Iteration  14: 3584199.324 ops/s
# Warmup Iteration  15: 3585058.919 ops/s
# Warmup Iteration  16: 3584167.568 ops/s
# Warmup Iteration  17: 3575911.849 ops/s
# Warmup Iteration  18: 3582113.305 ops/s
# Warmup Iteration  19: 3579992.308 ops/s
# Warmup Iteration  20: 3560569.766 ops/s
# Warmup Iteration  21: 3588473.426 ops/s
# Warmup Iteration  22: 3580879.630 ops/s
# Warmup Iteration  23: 3572122.508 ops/s
# Warmup Iteration  24: 3525174.468 ops/s
# Warmup Iteration  25: 3584055.824 ops/s
# Warmup Iteration  26: 3570673.914 ops/s
# Warmup Iteration  27: 3579565.236 ops/s
# Warmup Iteration  28: 3587148.684 ops/s
# Warmup Iteration  29: 3555443.270 ops/s
# Warmup Iteration  30: 3547816.916 ops/s
Iteration   1: 3577875.087 ops/s
Iteration   2: 3579648.117 ops/s
Iteration   3: 3583930.246 ops/s
Iteration   4: 3538346.001 ops/s
Iteration   5: 3586625.339 ops/s
Iteration   6: 3593770.174 ops/s
Iteration   7: 3589823.923 ops/s
Iteration   8: 3589210.794 ops/s
Iteration   9: 3580232.357 ops/s
Iteration  10: 3592363.985 ops/s
Iteration  11: 3585250.775 ops/s
Iteration  12: 3590295.774 ops/s
Iteration  13: 3581790.094 ops/s
Iteration  14: 3586680.110 ops/s
Iteration  15: 3587981.602 ops/s
Iteration  16: 3589140.630 ops/s
Iteration  17: 3587217.675 ops/s
Iteration  18: 3572693.680 ops/s
Iteration  19: 3602057.340 ops/s
Iteration  20: 3587224.963 ops/s
Iteration  21: 3579702.531 ops/s
Iteration  22: 3584788.026 ops/s
Iteration  23: 3581661.575 ops/s
Iteration  24: 3521129.937 ops/s
Iteration  25: 3531786.169 ops/s
Iteration  26: 3585745.320 ops/s
Iteration  27: 3588730.618 ops/s
Iteration  28: 3580490.431 ops/s
Iteration  29: 3580996.011 ops/s
Iteration  30: 3590934.561 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_reduce":
  3580270.795 ±(99.9%) 11989.916 ops/s [Average]
  (min, avg, max) = (3521129.937, 3580270.795, 3602057.340), stdev = 17945.943
  CI (99.9%): [3568280.879, 3592260.711] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_reduce  thrpt   30  3580270.795 ± 11989.916  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_reduceIfEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_reduceIfEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1465711.657 ops/s
# Warmup Iteration   2: 2967841.702 ops/s
# Warmup Iteration   3: 2541985.944 ops/s
# Warmup Iteration   4: 3017145.437 ops/s
# Warmup Iteration   5: 3004428.376 ops/s
# Warmup Iteration   6: 3007747.427 ops/s
# Warmup Iteration   7: 3016577.293 ops/s
# Warmup Iteration   8: 3016370.338 ops/s
# Warmup Iteration   9: 3013901.785 ops/s
# Warmup Iteration  10: 3018986.053 ops/s
# Warmup Iteration  11: 2998124.728 ops/s
# Warmup Iteration  12: 3018845.509 ops/s
# Warmup Iteration  13: 3013331.812 ops/s
# Warmup Iteration  14: 3022801.489 ops/s
# Warmup Iteration  15: 2997876.806 ops/s
# Warmup Iteration  16: 3009323.796 ops/s
# Warmup Iteration  17: 3018020.315 ops/s
# Warmup Iteration  18: 3022498.777 ops/s
# Warmup Iteration  19: 3022762.251 ops/s
# Warmup Iteration  20: 3005693.884 ops/s
# Warmup Iteration  21: 2993911.473 ops/s
# Warmup Iteration  22: 3014835.000 ops/s
# Warmup Iteration  23: 3013401.192 ops/s
# Warmup Iteration  24: 2998697.926 ops/s
# Warmup Iteration  25: 3007607.249 ops/s
# Warmup Iteration  26: 3004686.676 ops/s
# Warmup Iteration  27: 2996786.790 ops/s
# Warmup Iteration  28: 3020956.961 ops/s
# Warmup Iteration  29: 3020142.276 ops/s
# Warmup Iteration  30: 2998386.619 ops/s
Iteration   1: 3010621.168 ops/s
Iteration   2: 3013941.847 ops/s
Iteration   3: 3025182.572 ops/s
Iteration   4: 3000654.982 ops/s
Iteration   5: 3015691.366 ops/s
Iteration   6: 2996653.492 ops/s
Iteration   7: 3008312.001 ops/s
Iteration   8: 3012928.497 ops/s
Iteration   9: 2997089.411 ops/s
Iteration  10: 3011212.292 ops/s
Iteration  11: 3009997.984 ops/s
Iteration  12: 3012411.968 ops/s
Iteration  13: 2969416.432 ops/s
Iteration  14: 3011323.958 ops/s
Iteration  15: 2998765.964 ops/s
Iteration  16: 2977972.227 ops/s
Iteration  17: 2948434.716 ops/s
Iteration  18: 2988980.905 ops/s
Iteration  19: 3021553.956 ops/s
Iteration  20: 3016962.532 ops/s
Iteration  21: 2999614.015 ops/s
Iteration  22: 3006690.307 ops/s
Iteration  23: 3018327.024 ops/s
Iteration  24: 3011310.275 ops/s
Iteration  25: 3003260.984 ops/s
Iteration  26: 2995360.297 ops/s
Iteration  27: 3014832.064 ops/s
Iteration  28: 3000151.468 ops/s
Iteration  29: 2999459.464 ops/s
Iteration  30: 3030887.336 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_reduceIfEmpty":
  3004266.717 ±(99.9%) 11149.145 ops/s [Average]
  (min, avg, max) = (2948434.716, 3004266.717, 3030887.336), stdev = 16687.516
  CI (99.9%): [2993117.572, 3015415.862] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_reduceIfEmpty  thrpt   30  3004266.717 ± 11149.145  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 705358.781 ops/s
# Warmup Iteration   2: 761872.786 ops/s
# Warmup Iteration   3: 995491.644 ops/s
# Warmup Iteration   4: 989112.469 ops/s
# Warmup Iteration   5: 989290.505 ops/s
# Warmup Iteration   6: 989377.090 ops/s
# Warmup Iteration   7: 982955.055 ops/s
# Warmup Iteration   8: 989018.381 ops/s
# Warmup Iteration   9: 990358.859 ops/s
# Warmup Iteration  10: 936068.232 ops/s
# Warmup Iteration  11: 885036.412 ops/s
# Warmup Iteration  12: 992739.782 ops/s
# Warmup Iteration  13: 991694.405 ops/s
# Warmup Iteration  14: 991552.630 ops/s
# Warmup Iteration  15: 993600.156 ops/s
# Warmup Iteration  16: 991589.412 ops/s
# Warmup Iteration  17: 1050746.065 ops/s
# Warmup Iteration  18: 1048698.896 ops/s
# Warmup Iteration  19: 1043510.419 ops/s
# Warmup Iteration  20: 1054224.719 ops/s
# Warmup Iteration  21: 1038107.167 ops/s
# Warmup Iteration  22: 1050214.907 ops/s
# Warmup Iteration  23: 1049009.793 ops/s
# Warmup Iteration  24: 1054208.160 ops/s
# Warmup Iteration  25: 1053322.254 ops/s
# Warmup Iteration  26: 1051506.188 ops/s
# Warmup Iteration  27: 1045403.044 ops/s
# Warmup Iteration  28: 1053164.146 ops/s
# Warmup Iteration  29: 1049804.060 ops/s
# Warmup Iteration  30: 1049229.381 ops/s
Iteration   1: 1050374.211 ops/s
Iteration   2: 1048534.989 ops/s
Iteration   3: 1053004.982 ops/s
Iteration   4: 1036812.471 ops/s
Iteration   5: 1035693.067 ops/s
Iteration   6: 1049510.305 ops/s
Iteration   7: 1054512.979 ops/s
Iteration   8: 1031013.378 ops/s
Iteration   9: 1051542.437 ops/s
Iteration  10: 1047485.924 ops/s
Iteration  11: 1052453.599 ops/s
Iteration  12: 1050939.535 ops/s
Iteration  13: 1052115.239 ops/s
Iteration  14: 1052681.139 ops/s
Iteration  15: 1052399.552 ops/s
Iteration  16: 1047808.173 ops/s
Iteration  17: 1052977.562 ops/s
Iteration  18: 1051695.484 ops/s
Iteration  19: 1049124.213 ops/s
Iteration  20: 1052804.256 ops/s
Iteration  21: 1051257.907 ops/s
Iteration  22: 1047910.973 ops/s
Iteration  23: 1053415.277 ops/s
Iteration  24: 1054305.353 ops/s
Iteration  25: 1048755.130 ops/s
Iteration  26: 1050946.063 ops/s
Iteration  27: 1037444.393 ops/s
Iteration  28: 1048834.084 ops/s
Iteration  29: 1049482.646 ops/s
Iteration  30: 1052133.753 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows":
  1048932.302 ±(99.9%) 3918.245 ops/s [Average]
  (min, avg, max) = (1031013.378, 1048932.302, 1054512.979), stdev = 5864.645
  CI (99.9%): [1045014.057, 1052850.548] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score      Error  Units
UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows  thrpt   30  1048932.302 ± 3918.245  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7035219.043 ops/s
# Warmup Iteration   2: 13441849.987 ops/s
# Warmup Iteration   3: 13291326.051 ops/s
# Warmup Iteration   4: 14598992.208 ops/s
# Warmup Iteration   5: 14559954.408 ops/s
# Warmup Iteration   6: 14669050.092 ops/s
# Warmup Iteration   7: 14521594.956 ops/s
# Warmup Iteration   8: 14586277.898 ops/s
# Warmup Iteration   9: 14590881.794 ops/s
# Warmup Iteration  10: 14563959.598 ops/s
# Warmup Iteration  11: 14658706.377 ops/s
# Warmup Iteration  12: 14578135.667 ops/s
# Warmup Iteration  13: 14669421.778 ops/s
# Warmup Iteration  14: 14650883.007 ops/s
# Warmup Iteration  15: 14580589.321 ops/s
# Warmup Iteration  16: 14598457.196 ops/s
# Warmup Iteration  17: 14578938.799 ops/s
# Warmup Iteration  18: 14567293.404 ops/s
# Warmup Iteration  19: 14638142.023 ops/s
# Warmup Iteration  20: 14635403.258 ops/s
# Warmup Iteration  21: 14525293.750 ops/s
# Warmup Iteration  22: 14619915.968 ops/s
# Warmup Iteration  23: 14658743.966 ops/s
# Warmup Iteration  24: 14560674.538 ops/s
# Warmup Iteration  25: 14573626.283 ops/s
# Warmup Iteration  26: 14645804.178 ops/s
# Warmup Iteration  27: 14625656.324 ops/s
# Warmup Iteration  28: 14634471.498 ops/s
# Warmup Iteration  29: 14672818.474 ops/s
# Warmup Iteration  30: 14606285.032 ops/s
Iteration   1: 14636019.532 ops/s
Iteration   2: 14688522.264 ops/s
Iteration   3: 14635509.360 ops/s
Iteration   4: 14502628.743 ops/s
Iteration   5: 14570914.981 ops/s
Iteration   6: 14576955.797 ops/s
Iteration   7: 14687264.152 ops/s
Iteration   8: 14644664.459 ops/s
Iteration   9: 14370816.872 ops/s
Iteration  10: 14590907.225 ops/s
Iteration  11: 14612326.983 ops/s
Iteration  12: 14670666.791 ops/s
Iteration  13: 14609047.794 ops/s
Iteration  14: 14611586.522 ops/s
Iteration  15: 14645065.371 ops/s
Iteration  16: 14513994.057 ops/s
Iteration  17: 14636824.610 ops/s
Iteration  18: 14673562.907 ops/s
Iteration  19: 14492066.388 ops/s
Iteration  20: 14598370.083 ops/s
Iteration  21: 14620239.695 ops/s
Iteration  22: 14644136.915 ops/s
Iteration  23: 14619659.356 ops/s
Iteration  24: 14632823.052 ops/s
Iteration  25: 14663472.455 ops/s
Iteration  26: 14638081.315 ops/s
Iteration  27: 14542119.415 ops/s
Iteration  28: 14617971.371 ops/s
Iteration  29: 14641029.901 ops/s
Iteration  30: 14631737.087 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_reject":
  14607299.515 ±(99.9%) 44860.539 ops/s [Average]
  (min, avg, max) = (14370816.872, 14607299.515, 14688522.264), stdev = 67145.148
  CI (99.9%): [14562438.976, 14652160.054] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score       Error  Units
UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_reject  thrpt   30  14607299.515 ± 44860.539  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7198181.300 ops/s
# Warmup Iteration   2: 17072600.634 ops/s
# Warmup Iteration   3: 15510881.241 ops/s
# Warmup Iteration   4: 16198410.374 ops/s
# Warmup Iteration   5: 17305852.721 ops/s
# Warmup Iteration   6: 17318644.453 ops/s
# Warmup Iteration   7: 17269157.604 ops/s
# Warmup Iteration   8: 17334309.659 ops/s
# Warmup Iteration   9: 17293946.112 ops/s
# Warmup Iteration  10: 17288570.682 ops/s
# Warmup Iteration  11: 17333557.314 ops/s
# Warmup Iteration  12: 17213687.069 ops/s
# Warmup Iteration  13: 17291153.544 ops/s
# Warmup Iteration  14: 17304006.693 ops/s
# Warmup Iteration  15: 17159465.582 ops/s
# Warmup Iteration  16: 17343458.712 ops/s
# Warmup Iteration  17: 17172717.790 ops/s
# Warmup Iteration  18: 17342214.376 ops/s
# Warmup Iteration  19: 17270119.306 ops/s
# Warmup Iteration  20: 17186803.071 ops/s
# Warmup Iteration  21: 17339641.279 ops/s
# Warmup Iteration  22: 17343497.707 ops/s
# Warmup Iteration  23: 17303713.176 ops/s
# Warmup Iteration  24: 17323195.137 ops/s
# Warmup Iteration  25: 17349475.882 ops/s
# Warmup Iteration  26: 17327579.493 ops/s
# Warmup Iteration  27: 17295160.126 ops/s
# Warmup Iteration  28: 17230303.547 ops/s
# Warmup Iteration  29: 17296522.638 ops/s
# Warmup Iteration  30: 17266836.255 ops/s
Iteration   1: 17303800.679 ops/s
Iteration   2: 17242359.813 ops/s
Iteration   3: 17281466.055 ops/s
Iteration   4: 17302540.815 ops/s
Iteration   5: 17362759.527 ops/s
Iteration   6: 17309657.441 ops/s
Iteration   7: 17269030.126 ops/s
Iteration   8: 17200285.173 ops/s
Iteration   9: 17291404.771 ops/s
Iteration  10: 17218666.517 ops/s
Iteration  11: 17353304.211 ops/s
Iteration  12: 17338705.170 ops/s
Iteration  13: 17244436.339 ops/s
Iteration  14: 17357179.591 ops/s
Iteration  15: 17296381.867 ops/s
Iteration  16: 17304318.232 ops/s
Iteration  17: 17346574.313 ops/s
Iteration  18: 17360242.283 ops/s
Iteration  19: 17346088.198 ops/s
Iteration  20: 17362777.756 ops/s
Iteration  21: 17343433.804 ops/s
Iteration  22: 17282800.306 ops/s
Iteration  23: 17357264.503 ops/s
Iteration  24: 17334952.025 ops/s
Iteration  25: 17243201.566 ops/s
Iteration  26: 17385462.392 ops/s
Iteration  27: 17345392.892 ops/s
Iteration  28: 17326783.178 ops/s
Iteration  29: 17025883.583 ops/s
Iteration  30: 17304976.490 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_remove":
  17301404.321 ±(99.9%) 46915.415 ops/s [Average]
  (min, avg, max) = (17025883.583, 17301404.321, 17385462.392), stdev = 70220.789
  CI (99.9%): [17254488.906, 17348319.735] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score       Error  Units
UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_remove  thrpt   30  17301404.321 ± 46915.415  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 707653.317 ops/s
# Warmup Iteration   2: 800389.931 ops/s
# Warmup Iteration   3: 1003714.464 ops/s
# Warmup Iteration   4: 998303.240 ops/s
# Warmup Iteration   5: 997854.580 ops/s
# Warmup Iteration   6: 998596.370 ops/s
# Warmup Iteration   7: 1001516.931 ops/s
# Warmup Iteration   8: 1000455.349 ops/s
# Warmup Iteration   9: 957712.072 ops/s
# Warmup Iteration  10: 882011.582 ops/s
# Warmup Iteration  11: 992090.302 ops/s
# Warmup Iteration  12: 999687.844 ops/s
# Warmup Iteration  13: 999676.020 ops/s
# Warmup Iteration  14: 1000030.579 ops/s
# Warmup Iteration  15: 990231.978 ops/s
# Warmup Iteration  16: 1000739.486 ops/s
# Warmup Iteration  17: 1060113.083 ops/s
# Warmup Iteration  18: 1060915.671 ops/s
# Warmup Iteration  19: 1058941.241 ops/s
# Warmup Iteration  20: 1058067.369 ops/s
# Warmup Iteration  21: 1052491.261 ops/s
# Warmup Iteration  22: 1058386.213 ops/s
# Warmup Iteration  23: 1061926.088 ops/s
# Warmup Iteration  24: 1057654.316 ops/s
# Warmup Iteration  25: 1061039.102 ops/s
# Warmup Iteration  26: 1061121.484 ops/s
# Warmup Iteration  27: 1050615.162 ops/s
# Warmup Iteration  28: 1063565.040 ops/s
# Warmup Iteration  29: 1058581.529 ops/s
# Warmup Iteration  30: 1059207.648 ops/s
Iteration   1: 1059120.884 ops/s
Iteration   2: 1054113.593 ops/s
Iteration   3: 1056130.352 ops/s
Iteration   4: 1062866.665 ops/s
Iteration   5: 1061254.678 ops/s
Iteration   6: 1059701.749 ops/s
Iteration   7: 1060650.862 ops/s
Iteration   8: 1061016.354 ops/s
Iteration   9: 1052652.188 ops/s
Iteration  10: 1062608.862 ops/s
Iteration  11: 1056957.181 ops/s
Iteration  12: 1055248.881 ops/s
Iteration  13: 1060188.802 ops/s
Iteration  14: 1059503.395 ops/s
Iteration  15: 1061442.601 ops/s
Iteration  16: 1064327.740 ops/s
Iteration  17: 1048151.465 ops/s
Iteration  18: 1052604.693 ops/s
Iteration  19: 1063299.458 ops/s
Iteration  20: 1044738.720 ops/s
Iteration  21: 1060990.781 ops/s
Iteration  22: 1060923.962 ops/s
Iteration  23: 1058753.423 ops/s
Iteration  24: 1059590.665 ops/s
Iteration  25: 1063955.485 ops/s
Iteration  26: 1061485.138 ops/s
Iteration  27: 1053425.085 ops/s
Iteration  28: 1059254.499 ops/s
Iteration  29: 1060960.798 ops/s
Iteration  30: 1051569.938 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_removeAll":
  1058249.630 ±(99.9%) 3186.323 ops/s [Average]
  (min, avg, max) = (1044738.720, 1058249.630, 1064327.740), stdev = 4769.138
  CI (99.9%): [1055063.307, 1061435.953] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_removeAll  thrpt   30  1058249.630 ± 3186.323  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_removeAll_iterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_removeAll_iterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 686640.543 ops/s
# Warmup Iteration   2: 807167.914 ops/s
# Warmup Iteration   3: 986407.609 ops/s
# Warmup Iteration   4: 995002.261 ops/s
# Warmup Iteration   5: 991309.555 ops/s
# Warmup Iteration   6: 999415.384 ops/s
# Warmup Iteration   7: 999746.754 ops/s
# Warmup Iteration   8: 994649.539 ops/s
# Warmup Iteration   9: 839654.434 ops/s
# Warmup Iteration  10: 985859.521 ops/s
# Warmup Iteration  11: 993619.748 ops/s
# Warmup Iteration  12: 994615.799 ops/s
# Warmup Iteration  13: 986237.022 ops/s
# Warmup Iteration  14: 983554.567 ops/s
# Warmup Iteration  15: 995607.534 ops/s
# Warmup Iteration  16: 995059.019 ops/s
# Warmup Iteration  17: 1055222.687 ops/s
# Warmup Iteration  18: 1054952.040 ops/s
# Warmup Iteration  19: 1053399.684 ops/s
# Warmup Iteration  20: 1053332.683 ops/s
# Warmup Iteration  21: 1041709.164 ops/s
# Warmup Iteration  22: 1054858.650 ops/s
# Warmup Iteration  23: 1052064.815 ops/s
# Warmup Iteration  24: 1051904.017 ops/s
# Warmup Iteration  25: 1055320.861 ops/s
# Warmup Iteration  26: 1054967.942 ops/s
# Warmup Iteration  27: 1054361.556 ops/s
# Warmup Iteration  28: 1052823.701 ops/s
# Warmup Iteration  29: 1055605.046 ops/s
# Warmup Iteration  30: 1051183.728 ops/s
Iteration   1: 1055712.099 ops/s
Iteration   2: 1052108.428 ops/s
Iteration   3: 1054438.899 ops/s
Iteration   4: 1052132.322 ops/s
Iteration   5: 1047635.143 ops/s
Iteration   6: 1056531.581 ops/s
Iteration   7: 1056027.429 ops/s
Iteration   8: 1045777.973 ops/s
Iteration   9: 1056091.368 ops/s
Iteration  10: 1055279.557 ops/s
Iteration  11: 1051311.311 ops/s
Iteration  12: 1057782.455 ops/s
Iteration  13: 1056519.440 ops/s
Iteration  14: 1054550.085 ops/s
Iteration  15: 1055050.729 ops/s
Iteration  16: 1041182.525 ops/s
Iteration  17: 1055398.494 ops/s
Iteration  18: 1058228.612 ops/s
Iteration  19: 1053077.120 ops/s
Iteration  20: 1051335.605 ops/s
Iteration  21: 1048936.507 ops/s
Iteration  22: 1050890.856 ops/s
Iteration  23: 1059262.447 ops/s
Iteration  24: 1057135.933 ops/s
Iteration  25: 1056455.040 ops/s
Iteration  26: 1034782.696 ops/s
Iteration  27: 1049505.652 ops/s
Iteration  28: 1051695.733 ops/s
Iteration  29: 1044970.166 ops/s
Iteration  30: 1057333.006 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_removeAll_iterable":
  1052571.307 ±(99.9%) 3641.031 ops/s [Average]
  (min, avg, max) = (1034782.696, 1052571.307, 1059262.447), stdev = 5449.724
  CI (99.9%): [1048930.276, 1056212.338] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score      Error  Units
UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_removeAll_iterable  thrpt   30  1052571.307 ± 3641.031  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 698171.319 ops/s
# Warmup Iteration   2: 787557.181 ops/s
# Warmup Iteration   3: 993050.699 ops/s
# Warmup Iteration   4: 985656.339 ops/s
# Warmup Iteration   5: 986149.578 ops/s
# Warmup Iteration   6: 982366.506 ops/s
# Warmup Iteration   7: 983880.874 ops/s
# Warmup Iteration   8: 980311.735 ops/s
# Warmup Iteration   9: 976852.348 ops/s
# Warmup Iteration  10: 834069.413 ops/s
# Warmup Iteration  11: 983897.813 ops/s
# Warmup Iteration  12: 980716.550 ops/s
# Warmup Iteration  13: 982450.064 ops/s
# Warmup Iteration  14: 984367.702 ops/s
# Warmup Iteration  15: 980812.830 ops/s
# Warmup Iteration  16: 983415.501 ops/s
# Warmup Iteration  17: 1043081.908 ops/s
# Warmup Iteration  18: 1042584.262 ops/s
# Warmup Iteration  19: 1028829.855 ops/s
# Warmup Iteration  20: 1042738.234 ops/s
# Warmup Iteration  21: 1043685.234 ops/s
# Warmup Iteration  22: 1045258.847 ops/s
# Warmup Iteration  23: 1042612.174 ops/s
# Warmup Iteration  24: 1044371.135 ops/s
# Warmup Iteration  25: 1022543.542 ops/s
# Warmup Iteration  26: 1043539.754 ops/s
# Warmup Iteration  27: 1040993.429 ops/s
# Warmup Iteration  28: 1040750.399 ops/s
# Warmup Iteration  29: 1043975.934 ops/s
# Warmup Iteration  30: 1040470.174 ops/s
Iteration   1: 1043324.703 ops/s
Iteration   2: 1043486.129 ops/s
Iteration   3: 1041861.612 ops/s
Iteration   4: 1042407.127 ops/s
Iteration   5: 1041937.194 ops/s
Iteration   6: 1029160.583 ops/s
Iteration   7: 1024664.237 ops/s
Iteration   8: 1042705.437 ops/s
Iteration   9: 1045245.696 ops/s
Iteration  10: 1041708.111 ops/s
Iteration  11: 1041536.191 ops/s
Iteration  12: 1044667.328 ops/s
Iteration  13: 1040323.616 ops/s
Iteration  14: 1042846.038 ops/s
Iteration  15: 1042913.636 ops/s
Iteration  16: 1044531.976 ops/s
Iteration  17: 1027290.754 ops/s
Iteration  18: 1046675.525 ops/s
Iteration  19: 1041441.091 ops/s
Iteration  20: 1042993.668 ops/s
Iteration  21: 1042194.640 ops/s
Iteration  22: 1045048.054 ops/s
Iteration  23: 1043710.344 ops/s
Iteration  24: 1044262.801 ops/s
Iteration  25: 1040947.991 ops/s
Iteration  26: 1045237.803 ops/s
Iteration  27: 1031998.013 ops/s
Iteration  28: 1043865.777 ops/s
Iteration  29: 1042817.104 ops/s
Iteration  30: 1043738.270 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_retainAll":
  1041184.715 ±(99.9%) 3626.673 ops/s [Average]
  (min, avg, max) = (1024664.237, 1041184.715, 1046675.525), stdev = 5428.235
  CI (99.9%): [1037558.041, 1044811.388] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_retainAll  thrpt   30  1041184.715 ± 3626.673  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_retainAll_iterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_retainAll_iterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 677658.580 ops/s
# Warmup Iteration   2: 791991.290 ops/s
# Warmup Iteration   3: 974728.908 ops/s
# Warmup Iteration   4: 979120.768 ops/s
# Warmup Iteration   5: 973838.836 ops/s
# Warmup Iteration   6: 974564.885 ops/s
# Warmup Iteration   7: 977986.754 ops/s
# Warmup Iteration   8: 974298.950 ops/s
# Warmup Iteration   9: 849899.846 ops/s
# Warmup Iteration  10: 950289.472 ops/s
# Warmup Iteration  11: 976505.592 ops/s
# Warmup Iteration  12: 965782.318 ops/s
# Warmup Iteration  13: 975659.786 ops/s
# Warmup Iteration  14: 974894.083 ops/s
# Warmup Iteration  15: 974830.241 ops/s
# Warmup Iteration  16: 965663.270 ops/s
# Warmup Iteration  17: 1037399.438 ops/s
# Warmup Iteration  18: 1035799.091 ops/s
# Warmup Iteration  19: 1037695.905 ops/s
# Warmup Iteration  20: 1041216.496 ops/s
# Warmup Iteration  21: 1039498.279 ops/s
# Warmup Iteration  22: 1043801.046 ops/s
# Warmup Iteration  23: 1040792.521 ops/s
# Warmup Iteration  24: 1039263.425 ops/s
# Warmup Iteration  25: 1039276.473 ops/s
# Warmup Iteration  26: 1040508.923 ops/s
# Warmup Iteration  27: 1038048.348 ops/s
# Warmup Iteration  28: 1041887.488 ops/s
# Warmup Iteration  29: 1038121.196 ops/s
# Warmup Iteration  30: 1040578.871 ops/s
Iteration   1: 1043268.564 ops/s
Iteration   2: 1041505.865 ops/s
Iteration   3: 1038564.580 ops/s
Iteration   4: 1040808.277 ops/s
Iteration   5: 1035281.140 ops/s
Iteration   6: 1042607.784 ops/s
Iteration   7: 1041702.922 ops/s
Iteration   8: 1042773.907 ops/s
Iteration   9: 1041986.671 ops/s
Iteration  10: 1042981.136 ops/s
Iteration  11: 1045985.699 ops/s
Iteration  12: 1040571.848 ops/s
Iteration  13: 1038606.464 ops/s
Iteration  14: 1042202.946 ops/s
Iteration  15: 1034701.042 ops/s
Iteration  16: 1037712.677 ops/s
Iteration  17: 1041542.869 ops/s
Iteration  18: 1042933.410 ops/s
Iteration  19: 1042322.111 ops/s
Iteration  20: 1046180.111 ops/s
Iteration  21: 1038607.017 ops/s
Iteration  22: 1040010.490 ops/s
Iteration  23: 1043173.212 ops/s
Iteration  24: 1036652.047 ops/s
Iteration  25: 1041004.075 ops/s
Iteration  26: 1023572.792 ops/s
Iteration  27: 1038625.542 ops/s
Iteration  28: 1043892.810 ops/s
Iteration  29: 1038587.098 ops/s
Iteration  30: 1038745.535 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_retainAll_iterable":
  1040237.021 ±(99.9%) 2807.286 ops/s [Average]
  (min, avg, max) = (1023572.792, 1040237.021, 1046180.111), stdev = 4201.813
  CI (99.9%): [1037429.736, 1043044.307] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score      Error  Units
UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_retainAll_iterable  thrpt   30  1040237.021 ± 2807.286  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3404312.364 ops/s
# Warmup Iteration   2: 14313663.752 ops/s
# Warmup Iteration   3: 12373402.172 ops/s
# Warmup Iteration   4: 14530431.624 ops/s
# Warmup Iteration   5: 14658809.781 ops/s
# Warmup Iteration   6: 14680731.689 ops/s
# Warmup Iteration   7: 14659072.583 ops/s
# Warmup Iteration   8: 14609724.434 ops/s
# Warmup Iteration   9: 14694733.404 ops/s
# Warmup Iteration  10: 14543890.095 ops/s
# Warmup Iteration  11: 14689925.814 ops/s
# Warmup Iteration  12: 14672597.767 ops/s
# Warmup Iteration  13: 14720960.870 ops/s
# Warmup Iteration  14: 14708285.030 ops/s
# Warmup Iteration  15: 14692091.830 ops/s
# Warmup Iteration  16: 14689205.129 ops/s
# Warmup Iteration  17: 14608667.349 ops/s
# Warmup Iteration  18: 14633007.822 ops/s
# Warmup Iteration  19: 14511022.907 ops/s
# Warmup Iteration  20: 14567080.337 ops/s
# Warmup Iteration  21: 14681770.690 ops/s
# Warmup Iteration  22: 14627773.857 ops/s
# Warmup Iteration  23: 14645490.472 ops/s
# Warmup Iteration  24: 14654274.151 ops/s
# Warmup Iteration  25: 14688506.101 ops/s
# Warmup Iteration  26: 14641359.792 ops/s
# Warmup Iteration  27: 14672312.396 ops/s
# Warmup Iteration  28: 14621449.802 ops/s
# Warmup Iteration  29: 14708824.753 ops/s
# Warmup Iteration  30: 14673007.403 ops/s
Iteration   1: 14678460.178 ops/s
Iteration   2: 14672139.515 ops/s
Iteration   3: 14646299.756 ops/s
Iteration   4: 14481452.354 ops/s
Iteration   5: 14652636.500 ops/s
Iteration   6: 14728314.414 ops/s
Iteration   7: 14578575.000 ops/s
Iteration   8: 14605348.687 ops/s
Iteration   9: 14778927.629 ops/s
Iteration  10: 14615825.028 ops/s
Iteration  11: 14735506.770 ops/s
Iteration  12: 14607014.558 ops/s
Iteration  13: 14562198.733 ops/s
Iteration  14: 14669390.806 ops/s
Iteration  15: 14706594.368 ops/s
Iteration  16: 14666874.802 ops/s
Iteration  17: 14562252.462 ops/s
Iteration  18: 14567518.254 ops/s
Iteration  19: 14613086.134 ops/s
Iteration  20: 14713032.422 ops/s
Iteration  21: 14664049.749 ops/s
Iteration  22: 14714614.391 ops/s
Iteration  23: 14696097.074 ops/s
Iteration  24: 14698224.963 ops/s
Iteration  25: 14651282.497 ops/s
Iteration  26: 14665280.868 ops/s
Iteration  27: 14681324.965 ops/s
Iteration  28: 14733413.231 ops/s
Iteration  29: 14704427.068 ops/s
Iteration  30: 14672870.995 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_select":
  14657434.472 ±(99.9%) 43003.075 ops/s [Average]
  (min, avg, max) = (14481452.354, 14657434.472, 14778927.629), stdev = 64364.984
  CI (99.9%): [14614431.397, 14700437.548] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score       Error  Units
UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_select  thrpt   30  14657434.472 ± 43003.075  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3328619.792 ops/s
# Warmup Iteration   2: 5335758.683 ops/s
# Warmup Iteration   3: 6211703.118 ops/s
# Warmup Iteration   4: 6252077.902 ops/s
# Warmup Iteration   5: 6248628.633 ops/s
# Warmup Iteration   6: 6219620.884 ops/s
# Warmup Iteration   7: 6290596.008 ops/s
# Warmup Iteration   8: 6319997.903 ops/s
# Warmup Iteration   9: 6217200.359 ops/s
# Warmup Iteration  10: 6287155.468 ops/s
# Warmup Iteration  11: 6265957.765 ops/s
# Warmup Iteration  12: 6236061.702 ops/s
# Warmup Iteration  13: 6302008.545 ops/s
# Warmup Iteration  14: 6172815.150 ops/s
# Warmup Iteration  15: 6288889.548 ops/s
# Warmup Iteration  16: 6314437.447 ops/s
# Warmup Iteration  17: 6246040.836 ops/s
# Warmup Iteration  18: 6324401.395 ops/s
# Warmup Iteration  19: 6319131.547 ops/s
# Warmup Iteration  20: 6326929.122 ops/s
# Warmup Iteration  21: 6208209.533 ops/s
# Warmup Iteration  22: 6285594.024 ops/s
# Warmup Iteration  23: 6256729.571 ops/s
# Warmup Iteration  24: 6312696.859 ops/s
# Warmup Iteration  25: 6331390.408 ops/s
# Warmup Iteration  26: 6269798.796 ops/s
# Warmup Iteration  27: 6257921.539 ops/s
# Warmup Iteration  28: 6290265.524 ops/s
# Warmup Iteration  29: 6269379.504 ops/s
# Warmup Iteration  30: 6304750.037 ops/s
Iteration   1: 6328457.870 ops/s
Iteration   2: 6281356.427 ops/s
Iteration   3: 6192402.670 ops/s
Iteration   4: 6261286.926 ops/s
Iteration   5: 6251911.839 ops/s
Iteration   6: 6215923.375 ops/s
Iteration   7: 6227442.761 ops/s
Iteration   8: 6224382.909 ops/s
Iteration   9: 6301446.875 ops/s
Iteration  10: 6339142.365 ops/s
Iteration  11: 6292068.634 ops/s
Iteration  12: 6301583.306 ops/s
Iteration  13: 6251715.272 ops/s
Iteration  14: 6241994.353 ops/s
Iteration  15: 6291725.837 ops/s
Iteration  16: 6305816.006 ops/s
Iteration  17: 6274539.014 ops/s
Iteration  18: 6258911.634 ops/s
Iteration  19: 6199549.055 ops/s
Iteration  20: 6299274.644 ops/s
Iteration  21: 6308178.908 ops/s
Iteration  22: 6294446.530 ops/s
Iteration  23: 6310222.108 ops/s
Iteration  24: 6276850.492 ops/s
Iteration  25: 6236405.866 ops/s
Iteration  26: 6305734.456 ops/s
Iteration  27: 6297590.437 ops/s
Iteration  28: 6280163.971 ops/s
Iteration  29: 6312779.407 ops/s
Iteration  30: 6285643.138 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_size":
  6274964.903 ±(99.9%) 25183.709 ops/s [Average]
  (min, avg, max) = (6192402.670, 6274964.903, 6339142.365), stdev = 37693.794
  CI (99.9%): [6249781.193, 6300148.612] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_size  thrpt   30  6274964.903 ± 25183.709  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_testEquals$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_testEquals

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 170979386.221 ops/s
# Warmup Iteration   2: 298382616.031 ops/s
# Warmup Iteration   3: 243819803.531 ops/s
# Warmup Iteration   4: 274622850.524 ops/s
# Warmup Iteration   5: 273673457.795 ops/s
# Warmup Iteration   6: 274917520.962 ops/s
# Warmup Iteration   7: 273782892.627 ops/s
# Warmup Iteration   8: 274711357.852 ops/s
# Warmup Iteration   9: 275079644.419 ops/s
# Warmup Iteration  10: 274394704.981 ops/s
# Warmup Iteration  11: 274244991.056 ops/s
# Warmup Iteration  12: 275001208.719 ops/s
# Warmup Iteration  13: 274662471.546 ops/s
# Warmup Iteration  14: 274942984.103 ops/s
# Warmup Iteration  15: 274320860.272 ops/s
# Warmup Iteration  16: 275096525.477 ops/s
# Warmup Iteration  17: 274615494.091 ops/s
# Warmup Iteration  18: 273587734.539 ops/s
# Warmup Iteration  19: 275792174.804 ops/s
# Warmup Iteration  20: 275229887.228 ops/s
# Warmup Iteration  21: 275095156.525 ops/s
# Warmup Iteration  22: 274457439.463 ops/s
# Warmup Iteration  23: 274818234.443 ops/s
# Warmup Iteration  24: 274839226.664 ops/s
# Warmup Iteration  25: 275171719.587 ops/s
# Warmup Iteration  26: 274957109.479 ops/s
# Warmup Iteration  27: 273502423.365 ops/s
# Warmup Iteration  28: 275285424.560 ops/s
# Warmup Iteration  29: 275490141.612 ops/s
# Warmup Iteration  30: 275604031.619 ops/s
Iteration   1: 275643042.193 ops/s
Iteration   2: 274132458.633 ops/s
Iteration   3: 275441984.418 ops/s
Iteration   4: 273357476.977 ops/s
Iteration   5: 274668344.048 ops/s
Iteration   6: 275879710.232 ops/s
Iteration   7: 275060064.377 ops/s
Iteration   8: 274833075.379 ops/s
Iteration   9: 276373437.406 ops/s
Iteration  10: 276170813.782 ops/s
Iteration  11: 275415938.790 ops/s
Iteration  12: 274618099.301 ops/s
Iteration  13: 275096303.441 ops/s
Iteration  14: 275663583.225 ops/s
Iteration  15: 274206143.929 ops/s
Iteration  16: 273235887.409 ops/s
Iteration  17: 268568582.239 ops/s
Iteration  18: 274694206.007 ops/s
Iteration  19: 276487698.412 ops/s
Iteration  20: 273867534.846 ops/s
Iteration  21: 274725380.498 ops/s
Iteration  22: 274300915.782 ops/s
Iteration  23: 275646999.986 ops/s
Iteration  24: 275142869.392 ops/s
Iteration  25: 274490693.913 ops/s
Iteration  26: 273600390.414 ops/s
Iteration  27: 274250396.059 ops/s
Iteration  28: 274053855.376 ops/s
Iteration  29: 273553965.942 ops/s
Iteration  30: 275459051.085 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_testEquals":
  274621296.783 ±(99.9%) 963987.779 ops/s [Average]
  (min, avg, max) = (268568582.239, 274621296.783, 276487698.412), stdev = 1442851.636
  CI (99.9%): [273657309.004, 275585284.562] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt          Score        Error  Units
UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_testEquals  thrpt   30  274621296.783 ± 963987.779  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_testHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_testHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 170184333.746 ops/s
# Warmup Iteration   2: 299688980.732 ops/s
# Warmup Iteration   3: 279466385.136 ops/s
# Warmup Iteration   4: 312193095.365 ops/s
# Warmup Iteration   5: 311673556.223 ops/s
# Warmup Iteration   6: 313728241.875 ops/s
# Warmup Iteration   7: 315707449.647 ops/s
# Warmup Iteration   8: 313664696.900 ops/s
# Warmup Iteration   9: 313087809.308 ops/s
# Warmup Iteration  10: 313172665.757 ops/s
# Warmup Iteration  11: 312792290.265 ops/s
# Warmup Iteration  12: 313956583.509 ops/s
# Warmup Iteration  13: 314761743.217 ops/s
# Warmup Iteration  14: 315924648.604 ops/s
# Warmup Iteration  15: 313315434.600 ops/s
# Warmup Iteration  16: 314354929.119 ops/s
# Warmup Iteration  17: 313285227.163 ops/s
# Warmup Iteration  18: 313727304.834 ops/s
# Warmup Iteration  19: 313700709.825 ops/s
# Warmup Iteration  20: 312580567.365 ops/s
# Warmup Iteration  21: 314554583.011 ops/s
# Warmup Iteration  22: 315062690.984 ops/s
# Warmup Iteration  23: 312125290.776 ops/s
# Warmup Iteration  24: 315269516.500 ops/s
# Warmup Iteration  25: 312295870.141 ops/s
# Warmup Iteration  26: 313375910.494 ops/s
# Warmup Iteration  27: 314001932.476 ops/s
# Warmup Iteration  28: 313226900.573 ops/s
# Warmup Iteration  29: 314364997.308 ops/s
# Warmup Iteration  30: 313991701.814 ops/s
Iteration   1: 313608852.178 ops/s
Iteration   2: 312664725.643 ops/s
Iteration   3: 314326707.336 ops/s
Iteration   4: 313125557.539 ops/s
Iteration   5: 313703792.879 ops/s
Iteration   6: 312574516.499 ops/s
Iteration   7: 307537861.842 ops/s
Iteration   8: 314981910.358 ops/s
Iteration   9: 314032278.279 ops/s
Iteration  10: 314850819.268 ops/s
Iteration  11: 312992385.485 ops/s
Iteration  12: 311234360.733 ops/s
Iteration  13: 312386330.697 ops/s
Iteration  14: 314216068.534 ops/s
Iteration  15: 308952568.125 ops/s
Iteration  16: 314620355.830 ops/s
Iteration  17: 312120874.113 ops/s
Iteration  18: 312797360.697 ops/s
Iteration  19: 312188080.390 ops/s
Iteration  20: 311009252.430 ops/s
Iteration  21: 313848658.347 ops/s
Iteration  22: 312350577.018 ops/s
Iteration  23: 314578359.213 ops/s
Iteration  24: 312412125.202 ops/s
Iteration  25: 310137062.144 ops/s
Iteration  26: 314069309.004 ops/s
Iteration  27: 314294185.629 ops/s
Iteration  28: 314676964.092 ops/s
Iteration  29: 312706074.128 ops/s
Iteration  30: 312781063.120 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_testHashCode":
  312859301.225 ±(99.9%) 1163519.968 ops/s [Average]
  (min, avg, max) = (307537861.842, 312859301.225, 314981910.358), stdev = 1741502.045
  CI (99.9%): [311695781.257, 314022821.193] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt          Score         Error  Units
UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_testHashCode  thrpt   30  312859301.225 ± 1163519.968  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 169572924.548 ops/s
# Warmup Iteration   2: 298823263.243 ops/s
# Warmup Iteration   3: 265926528.258 ops/s
# Warmup Iteration   4: 286081549.524 ops/s
# Warmup Iteration   5: 284235459.230 ops/s
# Warmup Iteration   6: 287758966.418 ops/s
# Warmup Iteration   7: 287671733.649 ops/s
# Warmup Iteration   8: 286070905.223 ops/s
# Warmup Iteration   9: 287283598.074 ops/s
# Warmup Iteration  10: 287027317.348 ops/s
# Warmup Iteration  11: 287034411.953 ops/s
# Warmup Iteration  12: 285778773.547 ops/s
# Warmup Iteration  13: 287261830.214 ops/s
# Warmup Iteration  14: 286820503.482 ops/s
# Warmup Iteration  15: 287060441.282 ops/s
# Warmup Iteration  16: 286092530.200 ops/s
# Warmup Iteration  17: 287170979.532 ops/s
# Warmup Iteration  18: 286786749.468 ops/s
# Warmup Iteration  19: 285537527.624 ops/s
# Warmup Iteration  20: 286071575.907 ops/s
# Warmup Iteration  21: 286519021.432 ops/s
# Warmup Iteration  22: 284607331.308 ops/s
# Warmup Iteration  23: 287412926.303 ops/s
# Warmup Iteration  24: 285658914.134 ops/s
# Warmup Iteration  25: 283176343.323 ops/s
# Warmup Iteration  26: 287230696.648 ops/s
# Warmup Iteration  27: 285040138.972 ops/s
# Warmup Iteration  28: 287219001.216 ops/s
# Warmup Iteration  29: 287944888.155 ops/s
# Warmup Iteration  30: 287599929.158 ops/s
Iteration   1: 286465632.215 ops/s
Iteration   2: 286122196.573 ops/s
Iteration   3: 287416990.355 ops/s
Iteration   4: 285748069.010 ops/s
Iteration   5: 287260434.058 ops/s
Iteration   6: 287232479.440 ops/s
Iteration   7: 286655294.190 ops/s
Iteration   8: 286877774.606 ops/s
Iteration   9: 286235013.649 ops/s
Iteration  10: 287347005.753 ops/s
Iteration  11: 287381499.808 ops/s
Iteration  12: 286302937.381 ops/s
Iteration  13: 286741692.509 ops/s
Iteration  14: 286476537.138 ops/s
Iteration  15: 288036690.030 ops/s
Iteration  16: 287646194.767 ops/s
Iteration  17: 287129623.919 ops/s
Iteration  18: 284585779.899 ops/s
Iteration  19: 285545353.676 ops/s
Iteration  20: 287970443.400 ops/s
Iteration  21: 287979489.650 ops/s
Iteration  22: 288321052.488 ops/s
Iteration  23: 285939394.069 ops/s
Iteration  24: 284036123.853 ops/s
Iteration  25: 286768361.407 ops/s
Iteration  26: 285895973.926 ops/s
Iteration  27: 287042930.374 ops/s
Iteration  28: 287508176.196 ops/s
Iteration  29: 285412023.334 ops/s
Iteration  30: 285449304.148 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_testToString":
  286651015.727 ±(99.9%) 685682.543 ops/s [Average]
  (min, avg, max) = (284036123.853, 286651015.727, 288321052.488), stdev = 1026297.428
  CI (99.9%): [285965333.185, 287336698.270] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt          Score        Error  Units
UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_testToString  thrpt   30  286651015.727 ± 685682.543  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2363999.001 ops/s
# Warmup Iteration   2: 5053930.874 ops/s
# Warmup Iteration   3: 4494731.239 ops/s
# Warmup Iteration   4: 5229072.426 ops/s
# Warmup Iteration   5: 5235763.036 ops/s
# Warmup Iteration   6: 5263428.608 ops/s
# Warmup Iteration   7: 5268841.158 ops/s
# Warmup Iteration   8: 5256207.692 ops/s
# Warmup Iteration   9: 5239753.330 ops/s
# Warmup Iteration  10: 5243323.264 ops/s
# Warmup Iteration  11: 5250733.428 ops/s
# Warmup Iteration  12: 5223028.020 ops/s
# Warmup Iteration  13: 5262762.501 ops/s
# Warmup Iteration  14: 5234230.435 ops/s
# Warmup Iteration  15: 5250527.742 ops/s
# Warmup Iteration  16: 5243726.523 ops/s
# Warmup Iteration  17: 5251123.065 ops/s
# Warmup Iteration  18: 5206575.312 ops/s
# Warmup Iteration  19: 5246095.223 ops/s
# Warmup Iteration  20: 5252294.113 ops/s
# Warmup Iteration  21: 5238121.684 ops/s
# Warmup Iteration  22: 5220115.361 ops/s
# Warmup Iteration  23: 5229620.281 ops/s
# Warmup Iteration  24: 5199085.103 ops/s
# Warmup Iteration  25: 5247503.002 ops/s
# Warmup Iteration  26: 5258014.487 ops/s
# Warmup Iteration  27: 5230881.828 ops/s
# Warmup Iteration  28: 5265247.445 ops/s
# Warmup Iteration  29: 5249853.246 ops/s
# Warmup Iteration  30: 5249085.050 ops/s
Iteration   1: 5242054.923 ops/s
Iteration   2: 5245180.178 ops/s
Iteration   3: 5236078.817 ops/s
Iteration   4: 5238857.715 ops/s
Iteration   5: 5271018.867 ops/s
Iteration   6: 5234814.296 ops/s
Iteration   7: 5182402.124 ops/s
Iteration   8: 5261478.099 ops/s
Iteration   9: 5266580.087 ops/s
Iteration  10: 5273633.326 ops/s
Iteration  11: 5235621.725 ops/s
Iteration  12: 5238284.215 ops/s
Iteration  13: 5232183.984 ops/s
Iteration  14: 5239085.853 ops/s
Iteration  15: 5262891.984 ops/s
Iteration  16: 5253490.534 ops/s
Iteration  17: 5240323.916 ops/s
Iteration  18: 5254042.792 ops/s
Iteration  19: 5279566.932 ops/s
Iteration  20: 5266406.981 ops/s
Iteration  21: 5243097.176 ops/s
Iteration  22: 5232898.442 ops/s
Iteration  23: 5235521.687 ops/s
Iteration  24: 5246459.622 ops/s
Iteration  25: 5278853.099 ops/s
Iteration  26: 5271242.180 ops/s
Iteration  27: 5243512.763 ops/s
Iteration  28: 5249172.151 ops/s
Iteration  29: 5274320.909 ops/s
Iteration  30: 5253996.823 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_toArray":
  5249435.740 ±(99.9%) 13194.364 ops/s [Average]
  (min, avg, max) = (5182402.124, 5249435.740, 5279566.932), stdev = 19748.705
  CI (99.9%): [5236241.376, 5262630.104] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_toArray  thrpt   30  5249435.740 ± 13194.364  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_toBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_toBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1520738.871 ops/s
# Warmup Iteration   2: 3218732.583 ops/s
# Warmup Iteration   3: 2726016.424 ops/s
# Warmup Iteration   4: 3247787.586 ops/s
# Warmup Iteration   5: 3257279.118 ops/s
# Warmup Iteration   6: 3248350.937 ops/s
# Warmup Iteration   7: 3243764.528 ops/s
# Warmup Iteration   8: 3257056.472 ops/s
# Warmup Iteration   9: 3252998.138 ops/s
# Warmup Iteration  10: 3246568.256 ops/s
# Warmup Iteration  11: 3241418.361 ops/s
# Warmup Iteration  12: 3256659.481 ops/s
# Warmup Iteration  13: 3238981.654 ops/s
# Warmup Iteration  14: 3248652.309 ops/s
# Warmup Iteration  15: 3248055.145 ops/s
# Warmup Iteration  16: 3257393.968 ops/s
# Warmup Iteration  17: 3247028.703 ops/s
# Warmup Iteration  18: 3244248.863 ops/s
# Warmup Iteration  19: 3244156.249 ops/s
# Warmup Iteration  20: 3252131.281 ops/s
# Warmup Iteration  21: 3241916.035 ops/s
# Warmup Iteration  22: 3259340.050 ops/s
# Warmup Iteration  23: 3258867.307 ops/s
# Warmup Iteration  24: 3244505.093 ops/s
# Warmup Iteration  25: 3248866.594 ops/s
# Warmup Iteration  26: 3246297.269 ops/s
# Warmup Iteration  27: 3232498.325 ops/s
# Warmup Iteration  28: 3258549.223 ops/s
# Warmup Iteration  29: 3251369.780 ops/s
# Warmup Iteration  30: 3250191.163 ops/s
Iteration   1: 3247878.701 ops/s
Iteration   2: 3201990.256 ops/s
Iteration   3: 3252114.471 ops/s
Iteration   4: 3252319.769 ops/s
Iteration   5: 3255980.384 ops/s
Iteration   6: 3202660.895 ops/s
Iteration   7: 3236199.541 ops/s
Iteration   8: 3204167.845 ops/s
Iteration   9: 3259730.028 ops/s
Iteration  10: 3231321.001 ops/s
Iteration  11: 3259551.470 ops/s
Iteration  12: 3174201.431 ops/s
Iteration  13: 3247715.384 ops/s
Iteration  14: 3259015.503 ops/s
Iteration  15: 3231675.377 ops/s
Iteration  16: 3264653.754 ops/s
Iteration  17: 3259534.044 ops/s
Iteration  18: 3248729.776 ops/s
Iteration  19: 3249603.055 ops/s
Iteration  20: 3242524.840 ops/s
Iteration  21: 3251609.387 ops/s
Iteration  22: 3242604.598 ops/s
Iteration  23: 3242005.063 ops/s
Iteration  24: 3248763.958 ops/s
Iteration  25: 3200657.622 ops/s
Iteration  26: 3243758.511 ops/s
Iteration  27: 3252328.449 ops/s
Iteration  28: 3250540.364 ops/s
Iteration  29: 3203653.345 ops/s
Iteration  30: 3256823.876 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_toBag":
  3239143.757 ±(99.9%) 15302.753 ops/s [Average]
  (min, avg, max) = (3174201.431, 3239143.757, 3264653.754), stdev = 22904.442
  CI (99.9%): [3223841.003, 3254446.510] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_toBag  thrpt   30  3239143.757 ± 15302.753  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1390810.712 ops/s
# Warmup Iteration   2: 3334888.068 ops/s
# Warmup Iteration   3: 2721851.050 ops/s
# Warmup Iteration   4: 3314151.160 ops/s
# Warmup Iteration   5: 3327730.619 ops/s
# Warmup Iteration   6: 3322098.936 ops/s
# Warmup Iteration   7: 3325427.892 ops/s
# Warmup Iteration   8: 3321458.481 ops/s
# Warmup Iteration   9: 3316283.336 ops/s
# Warmup Iteration  10: 3322843.037 ops/s
# Warmup Iteration  11: 3308985.162 ops/s
# Warmup Iteration  12: 3316726.338 ops/s
# Warmup Iteration  13: 3323141.392 ops/s
# Warmup Iteration  14: 3316371.991 ops/s
# Warmup Iteration  15: 3320759.698 ops/s
# Warmup Iteration  16: 3320047.837 ops/s
# Warmup Iteration  17: 3315256.985 ops/s
# Warmup Iteration  18: 3324672.548 ops/s
# Warmup Iteration  19: 3318393.157 ops/s
# Warmup Iteration  20: 3314120.599 ops/s
# Warmup Iteration  21: 3316677.361 ops/s
# Warmup Iteration  22: 3329319.933 ops/s
# Warmup Iteration  23: 3318647.257 ops/s
# Warmup Iteration  24: 3307441.524 ops/s
# Warmup Iteration  25: 3322964.777 ops/s
# Warmup Iteration  26: 3309163.691 ops/s
# Warmup Iteration  27: 3323853.656 ops/s
# Warmup Iteration  28: 3311312.726 ops/s
# Warmup Iteration  29: 3319082.741 ops/s
# Warmup Iteration  30: 3303183.523 ops/s
Iteration   1: 3306349.287 ops/s
Iteration   2: 3330973.015 ops/s
Iteration   3: 3240273.395 ops/s
Iteration   4: 3319544.156 ops/s
Iteration   5: 3324228.608 ops/s
Iteration   6: 3312785.271 ops/s
Iteration   7: 3318720.970 ops/s
Iteration   8: 3322212.442 ops/s
Iteration   9: 3319547.314 ops/s
Iteration  10: 3314473.529 ops/s
Iteration  11: 3314613.896 ops/s
Iteration  12: 3315541.359 ops/s
Iteration  13: 3318418.880 ops/s
Iteration  14: 3335522.817 ops/s
Iteration  15: 3268717.421 ops/s
Iteration  16: 3275058.529 ops/s
Iteration  17: 3306498.865 ops/s
Iteration  18: 3263605.994 ops/s
Iteration  19: 3311131.032 ops/s
Iteration  20: 3328248.332 ops/s
Iteration  21: 3304235.340 ops/s
Iteration  22: 3304920.351 ops/s
Iteration  23: 3316707.702 ops/s
Iteration  24: 3312405.726 ops/s
Iteration  25: 3307285.852 ops/s
Iteration  26: 3324866.921 ops/s
Iteration  27: 3322761.119 ops/s
Iteration  28: 3323429.751 ops/s
Iteration  29: 3305879.672 ops/s
Iteration  30: 3332174.594 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_toList":
  3310037.738 ±(99.9%) 14330.018 ops/s [Average]
  (min, avg, max) = (3240273.395, 3310037.738, 3335522.817), stdev = 21448.498
  CI (99.9%): [3295707.720, 3324367.756] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_toList  thrpt   30  3310037.738 ± 14330.018  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_toSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_toSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2219664.731 ops/s
# Warmup Iteration   2: 4954486.806 ops/s
# Warmup Iteration   3: 4081233.795 ops/s
# Warmup Iteration   4: 4986612.676 ops/s
# Warmup Iteration   5: 4978103.423 ops/s
# Warmup Iteration   6: 4962625.548 ops/s
# Warmup Iteration   7: 4971342.236 ops/s
# Warmup Iteration   8: 4968050.480 ops/s
# Warmup Iteration   9: 4963517.514 ops/s
# Warmup Iteration  10: 4975511.096 ops/s
# Warmup Iteration  11: 4957564.508 ops/s
# Warmup Iteration  12: 4968120.664 ops/s
# Warmup Iteration  13: 4978765.128 ops/s
# Warmup Iteration  14: 4972459.189 ops/s
# Warmup Iteration  15: 4967186.774 ops/s
# Warmup Iteration  16: 4973520.636 ops/s
# Warmup Iteration  17: 4975936.816 ops/s
# Warmup Iteration  18: 4962724.823 ops/s
# Warmup Iteration  19: 4968447.964 ops/s
# Warmup Iteration  20: 4960074.346 ops/s
# Warmup Iteration  21: 4964453.776 ops/s
# Warmup Iteration  22: 4978550.036 ops/s
# Warmup Iteration  23: 4973962.618 ops/s
# Warmup Iteration  24: 4979481.694 ops/s
# Warmup Iteration  25: 4981557.144 ops/s
# Warmup Iteration  26: 4974651.947 ops/s
# Warmup Iteration  27: 4973580.729 ops/s
# Warmup Iteration  28: 4972639.159 ops/s
# Warmup Iteration  29: 4974257.973 ops/s
# Warmup Iteration  30: 4973655.873 ops/s
Iteration   1: 4952786.169 ops/s
Iteration   2: 4966810.463 ops/s
Iteration   3: 4962375.505 ops/s
Iteration   4: 4979213.623 ops/s
Iteration   5: 4956137.250 ops/s
Iteration   6: 4964043.599 ops/s
Iteration   7: 4980566.422 ops/s
Iteration   8: 4958060.840 ops/s
Iteration   9: 4960738.267 ops/s
Iteration  10: 4935813.900 ops/s
Iteration  11: 4963329.475 ops/s
Iteration  12: 4961633.416 ops/s
Iteration  13: 4956915.185 ops/s
Iteration  14: 4950362.226 ops/s
Iteration  15: 4973270.317 ops/s
Iteration  16: 4966630.972 ops/s
Iteration  17: 4991925.041 ops/s
Iteration  18: 4971712.705 ops/s
Iteration  19: 4989503.073 ops/s
Iteration  20: 4968039.244 ops/s
Iteration  21: 4970641.954 ops/s
Iteration  22: 4963028.562 ops/s
Iteration  23: 4972807.940 ops/s
Iteration  24: 4953572.395 ops/s
Iteration  25: 4972884.937 ops/s
Iteration  26: 4966783.383 ops/s
Iteration  27: 4976983.375 ops/s
Iteration  28: 4960763.069 ops/s
Iteration  29: 4975033.305 ops/s
Iteration  30: 4962487.645 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_toSet":
  4966161.809 ±(99.9%) 7714.457 ops/s [Average]
  (min, avg, max) = (4935813.900, 4966161.809, 4991925.041), stdev = 11546.637
  CI (99.9%): [4958447.351, 4973876.266] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_toSet  thrpt   30  4966161.809 ± 7714.457  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_with$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_with

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 703799.262 ops/s
# Warmup Iteration   2: 796333.817 ops/s
# Warmup Iteration   3: 1020642.145 ops/s
# Warmup Iteration   4: 1024816.522 ops/s
# Warmup Iteration   5: 1024063.305 ops/s
# Warmup Iteration   6: 1024202.964 ops/s
# Warmup Iteration   7: 1021335.564 ops/s
# Warmup Iteration   8: 1019840.192 ops/s
# Warmup Iteration   9: 1022053.174 ops/s
# Warmup Iteration  10: 846164.979 ops/s
# Warmup Iteration  11: 1019755.941 ops/s
# Warmup Iteration  12: 1017752.262 ops/s
# Warmup Iteration  13: 1017975.008 ops/s
# Warmup Iteration  14: 1018741.601 ops/s
# Warmup Iteration  15: 1019667.314 ops/s
# Warmup Iteration  16: 1017928.359 ops/s
# Warmup Iteration  17: 1085010.996 ops/s
# Warmup Iteration  18: 1083460.498 ops/s
# Warmup Iteration  19: 1088714.351 ops/s
# Warmup Iteration  20: 1084781.257 ops/s
# Warmup Iteration  21: 1086962.457 ops/s
# Warmup Iteration  22: 1083285.356 ops/s
# Warmup Iteration  23: 1085371.641 ops/s
# Warmup Iteration  24: 1085189.368 ops/s
# Warmup Iteration  25: 1086143.959 ops/s
# Warmup Iteration  26: 1087435.114 ops/s
# Warmup Iteration  27: 1084151.292 ops/s
# Warmup Iteration  28: 1087092.741 ops/s
# Warmup Iteration  29: 1087987.976 ops/s
# Warmup Iteration  30: 1079008.149 ops/s
Iteration   1: 1086733.908 ops/s
Iteration   2: 1087533.840 ops/s
Iteration   3: 1078910.146 ops/s
Iteration   4: 1087487.548 ops/s
Iteration   5: 1089350.531 ops/s
Iteration   6: 1088170.977 ops/s
Iteration   7: 1083247.692 ops/s
Iteration   8: 1084539.090 ops/s
Iteration   9: 1084386.384 ops/s
Iteration  10: 1078229.451 ops/s
Iteration  11: 1087023.513 ops/s
Iteration  12: 1087071.886 ops/s
Iteration  13: 1086231.996 ops/s
Iteration  14: 1086795.907 ops/s
Iteration  15: 1086786.978 ops/s
Iteration  16: 1084363.438 ops/s
Iteration  17: 1087329.910 ops/s
Iteration  18: 1085409.855 ops/s
Iteration  19: 1081629.066 ops/s
Iteration  20: 1081778.085 ops/s
Iteration  21: 1082320.827 ops/s
Iteration  22: 1086556.174 ops/s
Iteration  23: 1082419.337 ops/s
Iteration  24: 1085175.306 ops/s
Iteration  25: 1082817.722 ops/s
Iteration  26: 1091084.991 ops/s
Iteration  27: 1086334.183 ops/s
Iteration  28: 1079999.061 ops/s
Iteration  29: 1085655.233 ops/s
Iteration  30: 1082089.729 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_with":
  1084915.425 ±(99.9%) 2034.091 ops/s [Average]
  (min, avg, max) = (1078229.451, 1084915.425, 1091084.991), stdev = 3044.531
  CI (99.9%): [1082881.335, 1086949.516] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_with  thrpt   30  1084915.425 ± 2034.091  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_withAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_withAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 691675.981 ops/s
# Warmup Iteration   2: 788610.603 ops/s
# Warmup Iteration   3: 1019488.494 ops/s
# Warmup Iteration   4: 1018237.087 ops/s
# Warmup Iteration   5: 1016919.349 ops/s
# Warmup Iteration   6: 1001195.006 ops/s
# Warmup Iteration   7: 1015608.653 ops/s
# Warmup Iteration   8: 1018299.983 ops/s
# Warmup Iteration   9: 1015935.128 ops/s
# Warmup Iteration  10: 838860.251 ops/s
# Warmup Iteration  11: 1016944.661 ops/s
# Warmup Iteration  12: 1014054.034 ops/s
# Warmup Iteration  13: 1015019.124 ops/s
# Warmup Iteration  14: 1016671.651 ops/s
# Warmup Iteration  15: 1017770.346 ops/s
# Warmup Iteration  16: 1016596.507 ops/s
# Warmup Iteration  17: 1078034.235 ops/s
# Warmup Iteration  18: 1078242.682 ops/s
# Warmup Iteration  19: 1080334.835 ops/s
# Warmup Iteration  20: 1071585.310 ops/s
# Warmup Iteration  21: 1077484.018 ops/s
# Warmup Iteration  22: 1070815.012 ops/s
# Warmup Iteration  23: 1068393.754 ops/s
# Warmup Iteration  24: 1066860.488 ops/s
# Warmup Iteration  25: 1079360.407 ops/s
# Warmup Iteration  26: 1076754.572 ops/s
# Warmup Iteration  27: 1078708.293 ops/s
# Warmup Iteration  28: 1076525.564 ops/s
# Warmup Iteration  29: 1074593.070 ops/s
# Warmup Iteration  30: 1068843.152 ops/s
Iteration   1: 1079771.698 ops/s
Iteration   2: 1076066.714 ops/s
Iteration   3: 1075328.868 ops/s
Iteration   4: 1079310.082 ops/s
Iteration   5: 1078632.867 ops/s
Iteration   6: 1077826.620 ops/s
Iteration   7: 1077237.922 ops/s
Iteration   8: 1079093.139 ops/s
Iteration   9: 1077860.653 ops/s
Iteration  10: 1082153.518 ops/s
Iteration  11: 1081741.260 ops/s
Iteration  12: 1078818.726 ops/s
Iteration  13: 1074559.758 ops/s
Iteration  14: 1078890.466 ops/s
Iteration  15: 1077723.939 ops/s
Iteration  16: 1079230.573 ops/s
Iteration  17: 1078147.227 ops/s
Iteration  18: 1079631.628 ops/s
Iteration  19: 1081956.554 ops/s
Iteration  20: 1081917.411 ops/s
Iteration  21: 1083310.609 ops/s
Iteration  22: 1080637.462 ops/s
Iteration  23: 1073966.115 ops/s
Iteration  24: 1080752.623 ops/s
Iteration  25: 1077574.575 ops/s
Iteration  26: 1082455.657 ops/s
Iteration  27: 1077346.785 ops/s
Iteration  28: 1073217.753 ops/s
Iteration  29: 1076056.108 ops/s
Iteration  30: 1072671.493 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_withAll":
  1078462.960 ±(99.9%) 1864.517 ops/s [Average]
  (min, avg, max) = (1072671.493, 1078462.960, 1083310.609), stdev = 2790.722
  CI (99.9%): [1076598.443, 1080327.477] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_withAll  thrpt   30  1078462.960 ± 1864.517  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_without$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_without

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 692583.076 ops/s
# Warmup Iteration   2: 782238.568 ops/s
# Warmup Iteration   3: 1005478.252 ops/s
# Warmup Iteration   4: 1009130.928 ops/s
# Warmup Iteration   5: 998142.547 ops/s
# Warmup Iteration   6: 1006982.387 ops/s
# Warmup Iteration   7: 1002913.793 ops/s
# Warmup Iteration   8: 1003614.134 ops/s
# Warmup Iteration   9: 1005537.615 ops/s
# Warmup Iteration  10: 838942.116 ops/s
# Warmup Iteration  11: 1007355.976 ops/s
# Warmup Iteration  12: 1004281.821 ops/s
# Warmup Iteration  13: 1004923.601 ops/s
# Warmup Iteration  14: 1003629.025 ops/s
# Warmup Iteration  15: 1007075.542 ops/s
# Warmup Iteration  16: 1005977.313 ops/s
# Warmup Iteration  17: 1069200.476 ops/s
# Warmup Iteration  18: 1068057.824 ops/s
# Warmup Iteration  19: 1068358.969 ops/s
# Warmup Iteration  20: 1068247.633 ops/s
# Warmup Iteration  21: 1071169.802 ops/s
# Warmup Iteration  22: 1069654.759 ops/s
# Warmup Iteration  23: 1066547.841 ops/s
# Warmup Iteration  24: 1069602.187 ops/s
# Warmup Iteration  25: 1070002.192 ops/s
# Warmup Iteration  26: 1062273.689 ops/s
# Warmup Iteration  27: 1069629.371 ops/s
# Warmup Iteration  28: 1067986.917 ops/s
# Warmup Iteration  29: 1052537.508 ops/s
# Warmup Iteration  30: 1066666.871 ops/s
Iteration   1: 1065665.494 ops/s
Iteration   2: 1071622.802 ops/s
Iteration   3: 1070179.706 ops/s
Iteration   4: 1069255.133 ops/s
Iteration   5: 1072586.401 ops/s
Iteration   6: 1072428.436 ops/s
Iteration   7: 1063415.596 ops/s
Iteration   8: 1070259.417 ops/s
Iteration   9: 1067921.505 ops/s
Iteration  10: 1070095.793 ops/s
Iteration  11: 1069426.866 ops/s
Iteration  12: 1073446.609 ops/s
Iteration  13: 1070059.483 ops/s
Iteration  14: 1070030.734 ops/s
Iteration  15: 1069443.197 ops/s
Iteration  16: 1067795.013 ops/s
Iteration  17: 1067483.536 ops/s
Iteration  18: 1067794.742 ops/s
Iteration  19: 1068421.462 ops/s
Iteration  20: 1072920.835 ops/s
Iteration  21: 1050409.066 ops/s
Iteration  22: 1064473.921 ops/s
Iteration  23: 1067501.283 ops/s
Iteration  24: 1070342.721 ops/s
Iteration  25: 1064948.410 ops/s
Iteration  26: 1063289.765 ops/s
Iteration  27: 1070338.802 ops/s
Iteration  28: 1067224.957 ops/s
Iteration  29: 1069491.349 ops/s
Iteration  30: 1074239.988 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_without":
  1068417.101 ±(99.9%) 2946.608 ops/s [Average]
  (min, avg, max) = (1050409.066, 1068417.101, 1074239.988), stdev = 4410.345
  CI (99.9%): [1065470.493, 1071363.709] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_without  thrpt   30  1068417.101 ± 2946.608  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_withoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_withoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 695527.041 ops/s
# Warmup Iteration   2: 794414.327 ops/s
# Warmup Iteration   3: 1027311.432 ops/s
# Warmup Iteration   4: 1024402.770 ops/s
# Warmup Iteration   5: 1026100.254 ops/s
# Warmup Iteration   6: 1022770.525 ops/s
# Warmup Iteration   7: 1019892.391 ops/s
# Warmup Iteration   8: 1022114.237 ops/s
# Warmup Iteration   9: 979573.853 ops/s
# Warmup Iteration  10: 895006.156 ops/s
# Warmup Iteration  11: 1021179.670 ops/s
# Warmup Iteration  12: 1020301.942 ops/s
# Warmup Iteration  13: 1020366.816 ops/s
# Warmup Iteration  14: 1023554.440 ops/s
# Warmup Iteration  15: 1020776.710 ops/s
# Warmup Iteration  16: 1024032.402 ops/s
# Warmup Iteration  17: 1084386.509 ops/s
# Warmup Iteration  18: 1082267.520 ops/s
# Warmup Iteration  19: 1087487.437 ops/s
# Warmup Iteration  20: 1086873.308 ops/s
# Warmup Iteration  21: 1080884.613 ops/s
# Warmup Iteration  22: 1081498.493 ops/s
# Warmup Iteration  23: 1086464.962 ops/s
# Warmup Iteration  24: 1083137.600 ops/s
# Warmup Iteration  25: 1087189.754 ops/s
# Warmup Iteration  26: 1082945.087 ops/s
# Warmup Iteration  27: 1082550.998 ops/s
# Warmup Iteration  28: 1081105.669 ops/s
# Warmup Iteration  29: 1084953.646 ops/s
# Warmup Iteration  30: 1081346.077 ops/s
Iteration   1: 1081575.266 ops/s
Iteration   2: 1082676.806 ops/s
Iteration   3: 1086494.769 ops/s
Iteration   4: 1084432.617 ops/s
Iteration   5: 1082295.507 ops/s
Iteration   6: 1068202.674 ops/s
Iteration   7: 1083128.723 ops/s
Iteration   8: 1083810.506 ops/s
Iteration   9: 1086294.065 ops/s
Iteration  10: 1085903.323 ops/s
Iteration  11: 1074508.425 ops/s
Iteration  12: 1085039.478 ops/s
Iteration  13: 1080984.483 ops/s
Iteration  14: 1081243.841 ops/s
Iteration  15: 1085594.700 ops/s
Iteration  16: 1084579.719 ops/s
Iteration  17: 1081324.246 ops/s
Iteration  18: 1085965.822 ops/s
Iteration  19: 1088413.682 ops/s
Iteration  20: 1081079.959 ops/s
Iteration  21: 1086792.473 ops/s
Iteration  22: 1087288.598 ops/s
Iteration  23: 1084262.293 ops/s
Iteration  24: 1079844.886 ops/s
Iteration  25: 1085359.486 ops/s
Iteration  26: 1086813.597 ops/s
Iteration  27: 1079093.306 ops/s
Iteration  28: 1083991.766 ops/s
Iteration  29: 1084517.733 ops/s
Iteration  30: 1086606.364 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_withoutAll":
  1083270.637 ±(99.9%) 2737.442 ops/s [Average]
  (min, avg, max) = (1068202.674, 1083270.637, 1088413.682), stdev = 4097.274
  CI (99.9%): [1080533.195, 1086008.079] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
UnmodifiableIntBooleanMapValuesTest._Benchmark.benchmark_withoutAll  thrpt   30  1083270.637 ± 2737.442  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 696145.393 ops/s
# Warmup Iteration   2: 793425.196 ops/s
# Warmup Iteration   3: 1010792.563 ops/s
# Warmup Iteration   4: 1013397.756 ops/s
# Warmup Iteration   5: 1010323.467 ops/s
# Warmup Iteration   6: 1010200.573 ops/s
# Warmup Iteration   7: 997960.844 ops/s
# Warmup Iteration   8: 1010963.564 ops/s
# Warmup Iteration   9: 950739.629 ops/s
# Warmup Iteration  10: 898306.226 ops/s
# Warmup Iteration  11: 1009180.089 ops/s
# Warmup Iteration  12: 1000913.261 ops/s
# Warmup Iteration  13: 1006666.447 ops/s
# Warmup Iteration  14: 1011495.019 ops/s
# Warmup Iteration  15: 1009451.990 ops/s
# Warmup Iteration  16: 1009554.531 ops/s
# Warmup Iteration  17: 1077021.441 ops/s
# Warmup Iteration  18: 1072649.563 ops/s
# Warmup Iteration  19: 1074492.666 ops/s
# Warmup Iteration  20: 1074283.081 ops/s
# Warmup Iteration  21: 1075135.026 ops/s
# Warmup Iteration  22: 1070800.970 ops/s
# Warmup Iteration  23: 1075079.448 ops/s
# Warmup Iteration  24: 1076220.007 ops/s
# Warmup Iteration  25: 1070950.557 ops/s
# Warmup Iteration  26: 1075718.038 ops/s
# Warmup Iteration  27: 1074584.105 ops/s
# Warmup Iteration  28: 1071971.945 ops/s
# Warmup Iteration  29: 1073429.468 ops/s
# Warmup Iteration  30: 1075118.285 ops/s
Iteration   1: 1078814.415 ops/s
Iteration   2: 1072870.652 ops/s
Iteration   3: 1077790.386 ops/s
Iteration   4: 1076097.099 ops/s
Iteration   5: 1074738.337 ops/s
Iteration   6: 1056646.764 ops/s
Iteration   7: 1077003.622 ops/s
Iteration   8: 1075007.135 ops/s
Iteration   9: 1077404.673 ops/s
Iteration  10: 1077922.951 ops/s
Iteration  11: 1072471.248 ops/s
Iteration  12: 1074135.312 ops/s
Iteration  13: 1072352.777 ops/s
Iteration  14: 1076724.888 ops/s
Iteration  15: 1080802.793 ops/s
Iteration  16: 1076489.206 ops/s
Iteration  17: 1075014.053 ops/s
Iteration  18: 1071636.360 ops/s
Iteration  19: 1076131.413 ops/s
Iteration  20: 1067510.192 ops/s
Iteration  21: 1073032.944 ops/s
Iteration  22: 1072976.804 ops/s
Iteration  23: 1069619.417 ops/s
Iteration  24: 1077347.906 ops/s
Iteration  25: 1070741.488 ops/s
Iteration  26: 1074535.183 ops/s
Iteration  27: 1078161.826 ops/s
Iteration  28: 1073665.630 ops/s
Iteration  29: 1069004.659 ops/s
Iteration  30: 1078710.942 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_add":
  1074178.703 ±(99.9%) 3056.810 ops/s [Average]
  (min, avg, max) = (1056646.764, 1074178.703, 1080802.793), stdev = 4575.290
  CI (99.9%): [1071121.892, 1077235.513] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_add  thrpt   30  1074178.703 ± 3056.810  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_addAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_addAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 691798.387 ops/s
# Warmup Iteration   2: 788732.047 ops/s
# Warmup Iteration   3: 1004982.918 ops/s
# Warmup Iteration   4: 1008387.289 ops/s
# Warmup Iteration   5: 1008569.515 ops/s
# Warmup Iteration   6: 1005100.751 ops/s
# Warmup Iteration   7: 1003805.833 ops/s
# Warmup Iteration   8: 1004215.713 ops/s
# Warmup Iteration   9: 934248.914 ops/s
# Warmup Iteration  10: 901188.177 ops/s
# Warmup Iteration  11: 1005873.392 ops/s
# Warmup Iteration  12: 1007188.939 ops/s
# Warmup Iteration  13: 1004856.934 ops/s
# Warmup Iteration  14: 1007804.292 ops/s
# Warmup Iteration  15: 1011010.889 ops/s
# Warmup Iteration  16: 1014800.089 ops/s
# Warmup Iteration  17: 1069051.875 ops/s
# Warmup Iteration  18: 1073127.722 ops/s
# Warmup Iteration  19: 1071974.626 ops/s
# Warmup Iteration  20: 1071572.604 ops/s
# Warmup Iteration  21: 1072637.166 ops/s
# Warmup Iteration  22: 1071388.482 ops/s
# Warmup Iteration  23: 1064682.139 ops/s
# Warmup Iteration  24: 1065344.686 ops/s
# Warmup Iteration  25: 1071090.892 ops/s
# Warmup Iteration  26: 1072729.992 ops/s
# Warmup Iteration  27: 1069374.644 ops/s
# Warmup Iteration  28: 1062443.354 ops/s
# Warmup Iteration  29: 1074119.087 ops/s
# Warmup Iteration  30: 1072668.036 ops/s
Iteration   1: 1070941.155 ops/s
Iteration   2: 1077475.285 ops/s
Iteration   3: 1069083.229 ops/s
Iteration   4: 1071561.220 ops/s
Iteration   5: 1071165.041 ops/s
Iteration   6: 1051494.733 ops/s
Iteration   7: 1077448.070 ops/s
Iteration   8: 1056816.874 ops/s
Iteration   9: 1071569.198 ops/s
Iteration  10: 1073080.753 ops/s
Iteration  11: 1078245.703 ops/s
Iteration  12: 1073798.603 ops/s
Iteration  13: 1070249.788 ops/s
Iteration  14: 1070880.802 ops/s
Iteration  15: 1056881.735 ops/s
Iteration  16: 1069172.537 ops/s
Iteration  17: 1076852.990 ops/s
Iteration  18: 1083684.104 ops/s
Iteration  19: 1062690.732 ops/s
Iteration  20: 1076874.097 ops/s
Iteration  21: 1076523.175 ops/s
Iteration  22: 1085298.420 ops/s
Iteration  23: 1068145.092 ops/s
Iteration  24: 1056408.630 ops/s
Iteration  25: 1064494.095 ops/s
Iteration  26: 1057472.624 ops/s
Iteration  27: 1075929.880 ops/s
Iteration  28: 1066265.315 ops/s
Iteration  29: 1066194.733 ops/s
Iteration  30: 1069995.233 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_addAllArray":
  1069889.795 ±(99.9%) 5480.315 ops/s [Average]
  (min, avg, max) = (1051494.733, 1069889.795, 1085298.420), stdev = 8202.678
  CI (99.9%): [1064409.480, 1075370.110] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_addAllArray  thrpt   30  1069889.795 ± 5480.315  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_addAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_addAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 691905.037 ops/s
# Warmup Iteration   2: 799486.267 ops/s
# Warmup Iteration   3: 1019443.632 ops/s
# Warmup Iteration   4: 1010534.253 ops/s
# Warmup Iteration   5: 1022833.991 ops/s
# Warmup Iteration   6: 1021392.900 ops/s
# Warmup Iteration   7: 1022094.151 ops/s
# Warmup Iteration   8: 1014036.392 ops/s
# Warmup Iteration   9: 912859.343 ops/s
# Warmup Iteration  10: 949543.484 ops/s
# Warmup Iteration  11: 1019388.884 ops/s
# Warmup Iteration  12: 1014712.523 ops/s
# Warmup Iteration  13: 1020797.268 ops/s
# Warmup Iteration  14: 1018564.316 ops/s
# Warmup Iteration  15: 1019719.922 ops/s
# Warmup Iteration  16: 1017417.765 ops/s
# Warmup Iteration  17: 1071971.368 ops/s
# Warmup Iteration  18: 1088305.085 ops/s
# Warmup Iteration  19: 1081035.288 ops/s
# Warmup Iteration  20: 1084088.419 ops/s
# Warmup Iteration  21: 1086416.148 ops/s
# Warmup Iteration  22: 1083356.549 ops/s
# Warmup Iteration  23: 1088237.547 ops/s
# Warmup Iteration  24: 1085749.701 ops/s
# Warmup Iteration  25: 1083786.816 ops/s
# Warmup Iteration  26: 1074118.993 ops/s
# Warmup Iteration  27: 1079035.361 ops/s
# Warmup Iteration  28: 1088942.687 ops/s
# Warmup Iteration  29: 1082746.327 ops/s
# Warmup Iteration  30: 1085601.452 ops/s
Iteration   1: 1090149.924 ops/s
Iteration   2: 1085393.914 ops/s
Iteration   3: 1076226.672 ops/s
Iteration   4: 1077211.349 ops/s
Iteration   5: 1092654.896 ops/s
Iteration   6: 1085695.913 ops/s
Iteration   7: 1068404.984 ops/s
Iteration   8: 1084256.864 ops/s
Iteration   9: 1087919.054 ops/s
Iteration  10: 1085202.438 ops/s
Iteration  11: 1085899.004 ops/s
Iteration  12: 1066198.920 ops/s
Iteration  13: 1079782.972 ops/s
Iteration  14: 1086690.834 ops/s
Iteration  15: 1066133.020 ops/s
Iteration  16: 1083191.013 ops/s
Iteration  17: 1080724.992 ops/s
Iteration  18: 1078717.426 ops/s
Iteration  19: 1082970.300 ops/s
Iteration  20: 1083229.408 ops/s
Iteration  21: 1082107.040 ops/s
Iteration  22: 1080354.063 ops/s
Iteration  23: 1081696.988 ops/s
Iteration  24: 1080316.043 ops/s
Iteration  25: 1084005.196 ops/s
Iteration  26: 1086877.251 ops/s
Iteration  27: 1079612.021 ops/s
Iteration  28: 1084270.948 ops/s
Iteration  29: 1078920.244 ops/s
Iteration  30: 1082905.335 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_addAllIterable":
  1081590.634 ±(99.9%) 4126.029 ops/s [Average]
  (min, avg, max) = (1066133.020, 1081590.634, 1092654.896), stdev = 6175.647
  CI (99.9%): [1077464.605, 1085716.664] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score      Error  Units
UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_addAllIterable  thrpt   30  1081590.634 ± 4126.029  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1507354.595 ops/s
# Warmup Iteration   2: 2718919.786 ops/s
# Warmup Iteration   3: 3222414.016 ops/s
# Warmup Iteration   4: 3202979.211 ops/s
# Warmup Iteration   5: 3213374.417 ops/s
# Warmup Iteration   6: 3162668.686 ops/s
# Warmup Iteration   7: 3224744.629 ops/s
# Warmup Iteration   8: 3213560.986 ops/s
# Warmup Iteration   9: 3237830.488 ops/s
# Warmup Iteration  10: 3219962.164 ops/s
# Warmup Iteration  11: 3246176.923 ops/s
# Warmup Iteration  12: 3231183.586 ops/s
# Warmup Iteration  13: 3233545.750 ops/s
# Warmup Iteration  14: 3235142.746 ops/s
# Warmup Iteration  15: 3208754.198 ops/s
# Warmup Iteration  16: 3206827.841 ops/s
# Warmup Iteration  17: 3232567.860 ops/s
# Warmup Iteration  18: 3235688.869 ops/s
# Warmup Iteration  19: 3236786.336 ops/s
# Warmup Iteration  20: 3233263.159 ops/s
# Warmup Iteration  21: 3228506.424 ops/s
# Warmup Iteration  22: 3200879.737 ops/s
# Warmup Iteration  23: 3228223.304 ops/s
# Warmup Iteration  24: 3231008.116 ops/s
# Warmup Iteration  25: 3232631.256 ops/s
# Warmup Iteration  26: 3229820.877 ops/s
# Warmup Iteration  27: 3237880.272 ops/s
# Warmup Iteration  28: 3195099.409 ops/s
# Warmup Iteration  29: 3224998.686 ops/s
# Warmup Iteration  30: 3227456.703 ops/s
Iteration   1: 3212971.376 ops/s
Iteration   2: 3247549.011 ops/s
Iteration   3: 3189792.930 ops/s
Iteration   4: 3222174.269 ops/s
Iteration   5: 3205569.456 ops/s
Iteration   6: 3216987.525 ops/s
Iteration   7: 3201596.603 ops/s
Iteration   8: 3240527.526 ops/s
Iteration   9: 3229472.159 ops/s
Iteration  10: 3230784.388 ops/s
Iteration  11: 3215464.861 ops/s
Iteration  12: 3218194.257 ops/s
Iteration  13: 3241637.499 ops/s
Iteration  14: 3197363.191 ops/s
Iteration  15: 3253404.222 ops/s
Iteration  16: 3236286.567 ops/s
Iteration  17: 3249646.820 ops/s
Iteration  18: 3224438.503 ops/s
Iteration  19: 3252795.735 ops/s
Iteration  20: 3239931.958 ops/s
Iteration  21: 3230817.459 ops/s
Iteration  22: 3203135.592 ops/s
Iteration  23: 3243301.567 ops/s
Iteration  24: 3253753.197 ops/s
Iteration  25: 3225997.207 ops/s
Iteration  26: 3217843.615 ops/s
Iteration  27: 3228513.160 ops/s
Iteration  28: 3223711.644 ops/s
Iteration  29: 3250929.276 ops/s
Iteration  30: 3242900.980 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_allSatisfy":
  3228249.752 ±(99.9%) 11974.605 ops/s [Average]
  (min, avg, max) = (3189792.930, 3228249.752, 3253753.197), stdev = 17923.027
  CI (99.9%): [3216275.147, 3240224.357] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_allSatisfy  thrpt   30  3228249.752 ± 11974.605  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1504840.976 ops/s
# Warmup Iteration   2: 2796095.063 ops/s
# Warmup Iteration   3: 3334003.523 ops/s
# Warmup Iteration   4: 3339441.344 ops/s
# Warmup Iteration   5: 3331451.512 ops/s
# Warmup Iteration   6: 3313293.222 ops/s
# Warmup Iteration   7: 3347653.971 ops/s
# Warmup Iteration   8: 3340265.015 ops/s
# Warmup Iteration   9: 3347637.040 ops/s
# Warmup Iteration  10: 3336076.781 ops/s
# Warmup Iteration  11: 3315584.093 ops/s
# Warmup Iteration  12: 3353553.599 ops/s
# Warmup Iteration  13: 3346591.522 ops/s
# Warmup Iteration  14: 3354849.742 ops/s
# Warmup Iteration  15: 3336541.008 ops/s
# Warmup Iteration  16: 3308780.356 ops/s
# Warmup Iteration  17: 3337635.152 ops/s
# Warmup Iteration  18: 3346633.007 ops/s
# Warmup Iteration  19: 3345926.190 ops/s
# Warmup Iteration  20: 3364463.169 ops/s
# Warmup Iteration  21: 3350479.148 ops/s
# Warmup Iteration  22: 3317921.046 ops/s
# Warmup Iteration  23: 3320501.367 ops/s
# Warmup Iteration  24: 3338711.438 ops/s
# Warmup Iteration  25: 3351946.100 ops/s
# Warmup Iteration  26: 3352044.405 ops/s
# Warmup Iteration  27: 3360710.103 ops/s
# Warmup Iteration  28: 3344147.722 ops/s
# Warmup Iteration  29: 3337405.526 ops/s
# Warmup Iteration  30: 3355706.268 ops/s
Iteration   1: 3340042.649 ops/s
Iteration   2: 3333189.167 ops/s
Iteration   3: 3336016.149 ops/s
Iteration   4: 3334960.678 ops/s
Iteration   5: 3351761.327 ops/s
Iteration   6: 3354522.139 ops/s
Iteration   7: 3349823.932 ops/s
Iteration   8: 3355338.884 ops/s
Iteration   9: 3360910.073 ops/s
Iteration  10: 3352458.935 ops/s
Iteration  11: 3360457.661 ops/s
Iteration  12: 3349667.566 ops/s
Iteration  13: 3344088.780 ops/s
Iteration  14: 3324801.248 ops/s
Iteration  15: 3342265.117 ops/s
Iteration  16: 3338611.202 ops/s
Iteration  17: 3324540.005 ops/s
Iteration  18: 3336688.742 ops/s
Iteration  19: 3349291.523 ops/s
Iteration  20: 3331320.644 ops/s
Iteration  21: 3351383.315 ops/s
Iteration  22: 3353236.911 ops/s
Iteration  23: 3320055.134 ops/s
Iteration  24: 3335880.546 ops/s
Iteration  25: 3337605.704 ops/s
Iteration  26: 3284315.050 ops/s
Iteration  27: 3340154.332 ops/s
Iteration  28: 3331465.118 ops/s
Iteration  29: 3368950.240 ops/s
Iteration  30: 3339920.989 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_anySatisfy":
  3341124.125 ±(99.9%) 10555.565 ops/s [Average]
  (min, avg, max) = (3284315.050, 3341124.125, 3368950.240), stdev = 15799.074
  CI (99.9%): [3330568.561, 3351679.690] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_anySatisfy  thrpt   30  3341124.125 ± 10555.565  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1152557.717 ops/s
# Warmup Iteration   2: 2439855.594 ops/s
# Warmup Iteration   3: 2020702.164 ops/s
# Warmup Iteration   4: 2452977.899 ops/s
# Warmup Iteration   5: 2422374.293 ops/s
# Warmup Iteration   6: 2444267.899 ops/s
# Warmup Iteration   7: 2446516.139 ops/s
# Warmup Iteration   8: 2414475.741 ops/s
# Warmup Iteration   9: 2416854.074 ops/s
# Warmup Iteration  10: 2431536.361 ops/s
# Warmup Iteration  11: 2456035.510 ops/s
# Warmup Iteration  12: 2416631.303 ops/s
# Warmup Iteration  13: 2414402.661 ops/s
# Warmup Iteration  14: 2447931.416 ops/s
# Warmup Iteration  15: 2462106.586 ops/s
# Warmup Iteration  16: 2451042.860 ops/s
# Warmup Iteration  17: 2446963.058 ops/s
# Warmup Iteration  18: 2432080.749 ops/s
# Warmup Iteration  19: 2433580.719 ops/s
# Warmup Iteration  20: 2426922.401 ops/s
# Warmup Iteration  21: 2444043.611 ops/s
# Warmup Iteration  22: 2468848.550 ops/s
# Warmup Iteration  23: 2456983.350 ops/s
# Warmup Iteration  24: 2436571.023 ops/s
# Warmup Iteration  25: 2459368.559 ops/s
# Warmup Iteration  26: 2459545.447 ops/s
# Warmup Iteration  27: 2453283.110 ops/s
# Warmup Iteration  28: 2415693.014 ops/s
# Warmup Iteration  29: 2448638.929 ops/s
# Warmup Iteration  30: 2465893.703 ops/s
Iteration   1: 2458733.111 ops/s
Iteration   2: 2467263.498 ops/s
Iteration   3: 2479468.751 ops/s
Iteration   4: 2441847.248 ops/s
Iteration   5: 2414043.099 ops/s
Iteration   6: 2456694.119 ops/s
Iteration   7: 2440654.933 ops/s
Iteration   8: 2457529.682 ops/s
Iteration   9: 2421047.018 ops/s
Iteration  10: 2446083.703 ops/s
Iteration  11: 2434944.040 ops/s
Iteration  12: 2425440.275 ops/s
Iteration  13: 2431221.528 ops/s
Iteration  14: 2423797.624 ops/s
Iteration  15: 2428502.942 ops/s
Iteration  16: 2433796.344 ops/s
Iteration  17: 2447518.682 ops/s
Iteration  18: 2466028.966 ops/s
Iteration  19: 2416245.833 ops/s
Iteration  20: 2455982.302 ops/s
Iteration  21: 2438769.529 ops/s
Iteration  22: 2430795.699 ops/s
Iteration  23: 2425525.101 ops/s
Iteration  24: 2385812.497 ops/s
Iteration  25: 2427310.534 ops/s
Iteration  26: 2426885.642 ops/s
Iteration  27: 2465319.160 ops/s
Iteration  28: 2471401.094 ops/s
Iteration  29: 2431043.297 ops/s
Iteration  30: 2437471.726 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_appendString":
  2439572.599 ±(99.9%) 13526.333 ops/s [Average]
  (min, avg, max) = (2385812.497, 2439572.599, 2479468.751), stdev = 20245.581
  CI (99.9%): [2426046.266, 2453098.933] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_appendString  thrpt   30  2439572.599 ± 13526.333  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_asLazy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_asLazy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3122002.840 ops/s
# Warmup Iteration   2: 6906433.247 ops/s
# Warmup Iteration   3: 6898614.255 ops/s
# Warmup Iteration   4: 5765594.319 ops/s
# Warmup Iteration   5: 6893983.712 ops/s
# Warmup Iteration   6: 6904626.634 ops/s
# Warmup Iteration   7: 6895819.397 ops/s
# Warmup Iteration   8: 6852551.212 ops/s
# Warmup Iteration   9: 6900564.650 ops/s
# Warmup Iteration  10: 6905142.359 ops/s
# Warmup Iteration  11: 6900752.991 ops/s
# Warmup Iteration  12: 6895913.060 ops/s
# Warmup Iteration  13: 6898948.792 ops/s
# Warmup Iteration  14: 6878047.660 ops/s
# Warmup Iteration  15: 6911390.361 ops/s
# Warmup Iteration  16: 6906121.330 ops/s
# Warmup Iteration  17: 6911267.017 ops/s
# Warmup Iteration  18: 6918214.531 ops/s
# Warmup Iteration  19: 6902240.243 ops/s
# Warmup Iteration  20: 6916822.886 ops/s
# Warmup Iteration  21: 6909928.927 ops/s
# Warmup Iteration  22: 6912748.341 ops/s
# Warmup Iteration  23: 6921883.161 ops/s
# Warmup Iteration  24: 6920335.777 ops/s
# Warmup Iteration  25: 6922286.302 ops/s
# Warmup Iteration  26: 6902467.464 ops/s
# Warmup Iteration  27: 6907231.412 ops/s
# Warmup Iteration  28: 6890950.716 ops/s
# Warmup Iteration  29: 6907860.303 ops/s
# Warmup Iteration  30: 6905703.338 ops/s
Iteration   1: 6908910.545 ops/s
Iteration   2: 6912018.989 ops/s
Iteration   3: 6901883.954 ops/s
Iteration   4: 6902010.557 ops/s
Iteration   5: 6920777.308 ops/s
Iteration   6: 6926773.087 ops/s
Iteration   7: 6898527.501 ops/s
Iteration   8: 6907953.218 ops/s
Iteration   9: 6921031.739 ops/s
Iteration  10: 6903617.648 ops/s
Iteration  11: 6913461.560 ops/s
Iteration  12: 6918391.380 ops/s
Iteration  13: 6904800.457 ops/s
Iteration  14: 6921364.000 ops/s
Iteration  15: 6935235.693 ops/s
Iteration  16: 6923274.097 ops/s
Iteration  17: 6930089.575 ops/s
Iteration  18: 6911950.926 ops/s
Iteration  19: 6920624.340 ops/s
Iteration  20: 6911093.040 ops/s
Iteration  21: 6916722.101 ops/s
Iteration  22: 6900524.844 ops/s
Iteration  23: 6920687.466 ops/s
Iteration  24: 6923317.882 ops/s
Iteration  25: 6929345.948 ops/s
Iteration  26: 6933872.944 ops/s
Iteration  27: 6939659.583 ops/s
Iteration  28: 6925287.540 ops/s
Iteration  29: 6914242.096 ops/s
Iteration  30: 6921359.976 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_asLazy":
  6917293.666 ±(99.9%) 7275.600 ops/s [Average]
  (min, avg, max) = (6898527.501, 6917293.666, 6939659.583), stdev = 10889.777
  CI (99.9%): [6910018.066, 6924569.267] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_asLazy  thrpt   30  6917293.666 ± 7275.600  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_asSynchronized$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_asSynchronized

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11183601.977 ops/s
# Warmup Iteration   2: 17893635.939 ops/s
# Warmup Iteration   3: 18899809.081 ops/s
# Warmup Iteration   4: 19872664.274 ops/s
# Warmup Iteration   5: 19834401.029 ops/s
# Warmup Iteration   6: 19828777.177 ops/s
# Warmup Iteration   7: 19898245.417 ops/s
# Warmup Iteration   8: 19901160.783 ops/s
# Warmup Iteration   9: 19711138.827 ops/s
# Warmup Iteration  10: 19777902.194 ops/s
# Warmup Iteration  11: 19766429.200 ops/s
# Warmup Iteration  12: 19808719.115 ops/s
# Warmup Iteration  13: 19893986.467 ops/s
# Warmup Iteration  14: 19657182.955 ops/s
# Warmup Iteration  15: 19872435.641 ops/s
# Warmup Iteration  16: 19754144.820 ops/s
# Warmup Iteration  17: 19781690.758 ops/s
# Warmup Iteration  18: 19942319.053 ops/s
# Warmup Iteration  19: 19758785.800 ops/s
# Warmup Iteration  20: 19894083.868 ops/s
# Warmup Iteration  21: 19816541.881 ops/s
# Warmup Iteration  22: 19827077.091 ops/s
# Warmup Iteration  23: 19854733.971 ops/s
# Warmup Iteration  24: 19946774.129 ops/s
# Warmup Iteration  25: 19861375.146 ops/s
# Warmup Iteration  26: 19934916.444 ops/s
# Warmup Iteration  27: 19843926.105 ops/s
# Warmup Iteration  28: 19863444.718 ops/s
# Warmup Iteration  29: 19946953.429 ops/s
# Warmup Iteration  30: 19594143.915 ops/s
Iteration   1: 19798234.319 ops/s
Iteration   2: 19757182.949 ops/s
Iteration   3: 19582840.420 ops/s
Iteration   4: 19505390.128 ops/s
Iteration   5: 19912552.619 ops/s
Iteration   6: 19851689.585 ops/s
Iteration   7: 19775100.206 ops/s
Iteration   8: 19852649.621 ops/s
Iteration   9: 19835876.526 ops/s
Iteration  10: 19973764.352 ops/s
Iteration  11: 19871548.000 ops/s
Iteration  12: 19871070.572 ops/s
Iteration  13: 19860205.215 ops/s
Iteration  14: 19904796.237 ops/s
Iteration  15: 19757767.719 ops/s
Iteration  16: 19832889.823 ops/s
Iteration  17: 19798882.925 ops/s
Iteration  18: 19819399.308 ops/s
Iteration  19: 19852008.267 ops/s
Iteration  20: 19779326.086 ops/s
Iteration  21: 19857909.380 ops/s
Iteration  22: 19784649.031 ops/s
Iteration  23: 19858263.662 ops/s
Iteration  24: 19490754.589 ops/s
Iteration  25: 19827242.463 ops/s
Iteration  26: 19873750.181 ops/s
Iteration  27: 19876417.774 ops/s
Iteration  28: 19879744.897 ops/s
Iteration  29: 19685868.193 ops/s
Iteration  30: 19427439.153 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_asSynchronized":
  19791840.473 ±(99.9%) 86666.796 ops/s [Average]
  (min, avg, max) = (19427439.153, 19791840.473, 19973764.352), stdev = 129718.790
  CI (99.9%): [19705173.677, 19878507.269] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt         Score       Error  Units
UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_asSynchronized  thrpt   30  19791840.473 ± 86666.796  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_asUnmodifiable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_asUnmodifiable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6585597.869 ops/s
# Warmup Iteration   2: 10894453.575 ops/s
# Warmup Iteration   3: 12594253.823 ops/s
# Warmup Iteration   4: 12707627.544 ops/s
# Warmup Iteration   5: 12707867.485 ops/s
# Warmup Iteration   6: 12644979.935 ops/s
# Warmup Iteration   7: 12683278.673 ops/s
# Warmup Iteration   8: 12586005.858 ops/s
# Warmup Iteration   9: 12696865.494 ops/s
# Warmup Iteration  10: 12720277.060 ops/s
# Warmup Iteration  11: 12602514.036 ops/s
# Warmup Iteration  12: 12704528.908 ops/s
# Warmup Iteration  13: 12671160.147 ops/s
# Warmup Iteration  14: 12676373.975 ops/s
# Warmup Iteration  15: 12716247.075 ops/s
# Warmup Iteration  16: 12515834.019 ops/s
# Warmup Iteration  17: 12634901.927 ops/s
# Warmup Iteration  18: 12574732.860 ops/s
# Warmup Iteration  19: 12662480.984 ops/s
# Warmup Iteration  20: 12698190.345 ops/s
# Warmup Iteration  21: 12729200.307 ops/s
# Warmup Iteration  22: 12735083.433 ops/s
# Warmup Iteration  23: 12744258.913 ops/s
# Warmup Iteration  24: 12701665.639 ops/s
# Warmup Iteration  25: 12668472.365 ops/s
# Warmup Iteration  26: 12657616.970 ops/s
# Warmup Iteration  27: 12739906.587 ops/s
# Warmup Iteration  28: 12697765.261 ops/s
# Warmup Iteration  29: 12765685.485 ops/s
# Warmup Iteration  30: 12737438.863 ops/s
Iteration   1: 12567112.568 ops/s
Iteration   2: 12589234.605 ops/s
Iteration   3: 12712635.566 ops/s
Iteration   4: 12721771.664 ops/s
Iteration   5: 12667315.755 ops/s
Iteration   6: 12632475.181 ops/s
Iteration   7: 12657806.615 ops/s
Iteration   8: 12711618.042 ops/s
Iteration   9: 12748076.820 ops/s
Iteration  10: 12654145.404 ops/s
Iteration  11: 12733705.033 ops/s
Iteration  12: 12758859.294 ops/s
Iteration  13: 12733558.841 ops/s
Iteration  14: 12632382.676 ops/s
Iteration  15: 12559968.552 ops/s
Iteration  16: 12568357.574 ops/s
Iteration  17: 12519433.747 ops/s
Iteration  18: 12554840.772 ops/s
Iteration  19: 12760040.840 ops/s
Iteration  20: 12710785.804 ops/s
Iteration  21: 12590051.624 ops/s
Iteration  22: 12717400.152 ops/s
Iteration  23: 12668587.343 ops/s
Iteration  24: 12654436.811 ops/s
Iteration  25: 12733440.532 ops/s
Iteration  26: 12638555.048 ops/s
Iteration  27: 12788807.935 ops/s
Iteration  28: 12661071.634 ops/s
Iteration  29: 12520112.055 ops/s
Iteration  30: 12681989.982 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_asUnmodifiable":
  12661619.282 ±(99.9%) 50455.845 ops/s [Average]
  (min, avg, max) = (12519433.747, 12661619.282, 12788807.935), stdev = 75519.939
  CI (99.9%): [12611163.437, 12712075.127] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt         Score       Error  Units
UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_asUnmodifiable  thrpt   30  12661619.282 ± 50455.845  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_booleanIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_booleanIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 519270.798 ops/s
# Warmup Iteration   2: 573753.393 ops/s
# Warmup Iteration   3: 765825.661 ops/s
# Warmup Iteration   4: 765771.413 ops/s
# Warmup Iteration   5: 764631.922 ops/s
# Warmup Iteration   6: 764308.797 ops/s
# Warmup Iteration   7: 767392.731 ops/s
# Warmup Iteration   8: 766835.495 ops/s
# Warmup Iteration   9: 765963.999 ops/s
# Warmup Iteration  10: 724775.247 ops/s
# Warmup Iteration  11: 677494.038 ops/s
# Warmup Iteration  12: 764585.624 ops/s
# Warmup Iteration  13: 764785.016 ops/s
# Warmup Iteration  14: 764674.046 ops/s
# Warmup Iteration  15: 765286.253 ops/s
# Warmup Iteration  16: 764502.596 ops/s
# Warmup Iteration  17: 806954.821 ops/s
# Warmup Iteration  18: 803786.225 ops/s
# Warmup Iteration  19: 806742.455 ops/s
# Warmup Iteration  20: 806630.870 ops/s
# Warmup Iteration  21: 805120.178 ops/s
# Warmup Iteration  22: 806546.983 ops/s
# Warmup Iteration  23: 805607.154 ops/s
# Warmup Iteration  24: 807006.618 ops/s
# Warmup Iteration  25: 806684.155 ops/s
# Warmup Iteration  26: 805352.026 ops/s
# Warmup Iteration  27: 805892.831 ops/s
# Warmup Iteration  28: 804553.115 ops/s
# Warmup Iteration  29: 806191.367 ops/s
# Warmup Iteration  30: 805356.849 ops/s
Iteration   1: 806989.370 ops/s
Iteration   2: 805005.964 ops/s
Iteration   3: 807259.871 ops/s
Iteration   4: 806014.152 ops/s
Iteration   5: 805593.513 ops/s
Iteration   6: 804002.416 ops/s
Iteration   7: 805810.750 ops/s
Iteration   8: 806901.246 ops/s
Iteration   9: 804598.153 ops/s
Iteration  10: 807180.677 ops/s
Iteration  11: 803932.134 ops/s
Iteration  12: 807792.985 ops/s
Iteration  13: 805222.906 ops/s
Iteration  14: 805670.811 ops/s
Iteration  15: 804854.070 ops/s
Iteration  16: 802446.499 ops/s
Iteration  17: 806062.431 ops/s
Iteration  18: 809106.099 ops/s
Iteration  19: 800247.474 ops/s
Iteration  20: 806091.787 ops/s
Iteration  21: 808252.532 ops/s
Iteration  22: 802055.248 ops/s
Iteration  23: 806957.772 ops/s
Iteration  24: 807577.322 ops/s
Iteration  25: 808225.556 ops/s
Iteration  26: 804013.935 ops/s
Iteration  27: 804590.666 ops/s
Iteration  28: 807513.956 ops/s
Iteration  29: 808060.832 ops/s
Iteration  30: 803994.054 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_booleanIterator":
  805734.173 ±(99.9%) 1360.086 ops/s [Average]
  (min, avg, max) = (800247.474, 805734.173, 809106.099), stdev = 2035.712
  CI (99.9%): [804374.087, 807094.258] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_booleanIterator  thrpt   30  805734.173 ± 1360.086  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 662861.591 ops/s
# Warmup Iteration   2: 785206.758 ops/s
# Warmup Iteration   3: 966422.476 ops/s
# Warmup Iteration   4: 965641.070 ops/s
# Warmup Iteration   5: 967396.151 ops/s
# Warmup Iteration   6: 968794.473 ops/s
# Warmup Iteration   7: 965392.966 ops/s
# Warmup Iteration   8: 969060.465 ops/s
# Warmup Iteration   9: 863294.994 ops/s
# Warmup Iteration  10: 923550.017 ops/s
# Warmup Iteration  11: 971985.728 ops/s
# Warmup Iteration  12: 972110.693 ops/s
# Warmup Iteration  13: 970415.963 ops/s
# Warmup Iteration  14: 966726.228 ops/s
# Warmup Iteration  15: 963033.425 ops/s
# Warmup Iteration  16: 971247.660 ops/s
# Warmup Iteration  17: 1037918.599 ops/s
# Warmup Iteration  18: 1040538.069 ops/s
# Warmup Iteration  19: 1039109.358 ops/s
# Warmup Iteration  20: 1037558.100 ops/s
# Warmup Iteration  21: 1038940.645 ops/s
# Warmup Iteration  22: 1040883.773 ops/s
# Warmup Iteration  23: 1040070.138 ops/s
# Warmup Iteration  24: 1045409.347 ops/s
# Warmup Iteration  25: 1034227.445 ops/s
# Warmup Iteration  26: 1038285.158 ops/s
# Warmup Iteration  27: 1041745.881 ops/s
# Warmup Iteration  28: 1043193.008 ops/s
# Warmup Iteration  29: 1042310.682 ops/s
# Warmup Iteration  30: 1039205.903 ops/s
Iteration   1: 1037484.568 ops/s
Iteration   2: 1041147.068 ops/s
Iteration   3: 1038738.993 ops/s
Iteration   4: 1047557.208 ops/s
Iteration   5: 1038470.612 ops/s
Iteration   6: 1037162.106 ops/s
Iteration   7: 1042644.429 ops/s
Iteration   8: 1039477.418 ops/s
Iteration   9: 1046010.520 ops/s
Iteration  10: 1041706.392 ops/s
Iteration  11: 1040123.197 ops/s
Iteration  12: 1037711.315 ops/s
Iteration  13: 1038076.103 ops/s
Iteration  14: 1039780.332 ops/s
Iteration  15: 1041822.245 ops/s
Iteration  16: 1043447.671 ops/s
Iteration  17: 1042461.744 ops/s
Iteration  18: 1038018.828 ops/s
Iteration  19: 1042690.516 ops/s
Iteration  20: 1043343.116 ops/s
Iteration  21: 1042641.392 ops/s
Iteration  22: 1042926.324 ops/s
Iteration  23: 1039881.831 ops/s
Iteration  24: 1038702.243 ops/s
Iteration  25: 1039180.923 ops/s
Iteration  26: 1040371.482 ops/s
Iteration  27: 1040577.796 ops/s
Iteration  28: 1038969.922 ops/s
Iteration  29: 1038910.253 ops/s
Iteration  30: 1040189.657 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove":
  1040674.207 ±(99.9%) 1676.863 ops/s [Average]
  (min, avg, max) = (1037162.106, 1040674.207, 1047557.208), stdev = 2509.851
  CI (99.9%): [1038997.343, 1042351.070] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt        Score      Error  Units
UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_booleanIterator_with_remove  thrpt   30  1040674.207 ± 1676.863  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_chunk$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_chunk

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 134824.713 ops/s
# Warmup Iteration   2: 235436.069 ops/s
# Warmup Iteration   3: 266324.829 ops/s
# Warmup Iteration   4: 267052.260 ops/s
# Warmup Iteration   5: 267312.821 ops/s
# Warmup Iteration   6: 223949.292 ops/s
# Warmup Iteration   7: 267470.728 ops/s
# Warmup Iteration   8: 267719.399 ops/s
# Warmup Iteration   9: 266822.097 ops/s
# Warmup Iteration  10: 267014.156 ops/s
# Warmup Iteration  11: 266635.439 ops/s
# Warmup Iteration  12: 267472.801 ops/s
# Warmup Iteration  13: 266995.413 ops/s
# Warmup Iteration  14: 266795.068 ops/s
# Warmup Iteration  15: 266298.484 ops/s
# Warmup Iteration  16: 267507.775 ops/s
# Warmup Iteration  17: 276557.796 ops/s
# Warmup Iteration  18: 275782.984 ops/s
# Warmup Iteration  19: 275970.263 ops/s
# Warmup Iteration  20: 276828.863 ops/s
# Warmup Iteration  21: 276261.277 ops/s
# Warmup Iteration  22: 275938.846 ops/s
# Warmup Iteration  23: 276566.909 ops/s
# Warmup Iteration  24: 276038.750 ops/s
# Warmup Iteration  25: 276352.177 ops/s
# Warmup Iteration  26: 276241.957 ops/s
# Warmup Iteration  27: 276303.007 ops/s
# Warmup Iteration  28: 276028.321 ops/s
# Warmup Iteration  29: 276831.280 ops/s
# Warmup Iteration  30: 275998.274 ops/s
Iteration   1: 276553.145 ops/s
Iteration   2: 276558.107 ops/s
Iteration   3: 275566.618 ops/s
Iteration   4: 276091.986 ops/s
Iteration   5: 276503.221 ops/s
Iteration   6: 275373.548 ops/s
Iteration   7: 275864.045 ops/s
Iteration   8: 275549.363 ops/s
Iteration   9: 276502.379 ops/s
Iteration  10: 276042.048 ops/s
Iteration  11: 276092.802 ops/s
Iteration  12: 277190.956 ops/s
Iteration  13: 276602.463 ops/s
Iteration  14: 277837.445 ops/s
Iteration  15: 275605.325 ops/s
Iteration  16: 276405.829 ops/s
Iteration  17: 276419.734 ops/s
Iteration  18: 275987.261 ops/s
Iteration  19: 276693.744 ops/s
Iteration  20: 276225.160 ops/s
Iteration  21: 276002.833 ops/s
Iteration  22: 275567.372 ops/s
Iteration  23: 275008.768 ops/s
Iteration  24: 277056.225 ops/s
Iteration  25: 274160.532 ops/s
Iteration  26: 276809.980 ops/s
Iteration  27: 277029.750 ops/s
Iteration  28: 276011.751 ops/s
Iteration  29: 275449.330 ops/s
Iteration  30: 275098.788 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_chunk":
  276128.684 ±(99.9%) 498.339 ops/s [Average]
  (min, avg, max) = (274160.532, 276128.684, 277837.445), stdev = 745.891
  CI (99.9%): [275630.344, 276627.023] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score     Error  Units
UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_chunk  thrpt   30  276128.684 ± 498.339  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 685752.000 ops/s
# Warmup Iteration   2: 804132.412 ops/s
# Warmup Iteration   3: 986268.303 ops/s
# Warmup Iteration   4: 985881.929 ops/s
# Warmup Iteration   5: 985825.444 ops/s
# Warmup Iteration   6: 979755.008 ops/s
# Warmup Iteration   7: 978668.939 ops/s
# Warmup Iteration   8: 980273.118 ops/s
# Warmup Iteration   9: 832592.768 ops/s
# Warmup Iteration  10: 977231.768 ops/s
# Warmup Iteration  11: 982328.005 ops/s
# Warmup Iteration  12: 982617.940 ops/s
# Warmup Iteration  13: 982696.643 ops/s
# Warmup Iteration  14: 977218.158 ops/s
# Warmup Iteration  15: 984619.343 ops/s
# Warmup Iteration  16: 982572.660 ops/s
# Warmup Iteration  17: 1038136.009 ops/s
# Warmup Iteration  18: 1038758.047 ops/s
# Warmup Iteration  19: 1037861.472 ops/s
# Warmup Iteration  20: 1038250.108 ops/s
# Warmup Iteration  21: 1037483.778 ops/s
# Warmup Iteration  22: 1039751.266 ops/s
# Warmup Iteration  23: 1038440.932 ops/s
# Warmup Iteration  24: 1033164.885 ops/s
# Warmup Iteration  25: 1037323.252 ops/s
# Warmup Iteration  26: 1035930.916 ops/s
# Warmup Iteration  27: 1038078.511 ops/s
# Warmup Iteration  28: 1037747.383 ops/s
# Warmup Iteration  29: 1038925.464 ops/s
# Warmup Iteration  30: 1035384.367 ops/s
Iteration   1: 1037628.012 ops/s
Iteration   2: 1037691.982 ops/s
Iteration   3: 1034469.109 ops/s
Iteration   4: 1037234.758 ops/s
Iteration   5: 1038643.534 ops/s
Iteration   6: 1036843.557 ops/s
Iteration   7: 1038850.989 ops/s
Iteration   8: 1021202.800 ops/s
Iteration   9: 1035160.670 ops/s
Iteration  10: 1037657.851 ops/s
Iteration  11: 1036432.105 ops/s
Iteration  12: 1032700.848 ops/s
Iteration  13: 1041515.081 ops/s
Iteration  14: 1038380.303 ops/s
Iteration  15: 1037820.910 ops/s
Iteration  16: 1041345.331 ops/s
Iteration  17: 1039452.557 ops/s
Iteration  18: 1037045.632 ops/s
Iteration  19: 1029202.239 ops/s
Iteration  20: 1034497.322 ops/s
Iteration  21: 1040084.167 ops/s
Iteration  22: 1028781.316 ops/s
Iteration  23: 1037780.404 ops/s
Iteration  24: 1040043.069 ops/s
Iteration  25: 1038416.096 ops/s
Iteration  26: 1035173.771 ops/s
Iteration  27: 1041459.242 ops/s
Iteration  28: 1040979.763 ops/s
Iteration  29: 1036952.457 ops/s
Iteration  30: 1039975.802 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_clear":
  1036780.723 ±(99.9%) 2872.317 ops/s [Average]
  (min, avg, max) = (1021202.800, 1036780.723, 1041515.081), stdev = 4299.150
  CI (99.9%): [1033908.405, 1039653.040] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_clear  thrpt   30  1036780.723 ± 2872.317  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 700306.204 ops/s
# Warmup Iteration   2: 1884693.317 ops/s
# Warmup Iteration   3: 1890369.765 ops/s
# Warmup Iteration   4: 1557723.891 ops/s
# Warmup Iteration   5: 1893785.069 ops/s
# Warmup Iteration   6: 1897161.423 ops/s
# Warmup Iteration   7: 1888683.184 ops/s
# Warmup Iteration   8: 1889973.101 ops/s
# Warmup Iteration   9: 1890510.087 ops/s
# Warmup Iteration  10: 1869093.466 ops/s
# Warmup Iteration  11: 1889512.475 ops/s
# Warmup Iteration  12: 1891099.432 ops/s
# Warmup Iteration  13: 1885878.034 ops/s
# Warmup Iteration  14: 1894756.816 ops/s
# Warmup Iteration  15: 1897051.553 ops/s
# Warmup Iteration  16: 1896712.826 ops/s
# Warmup Iteration  17: 1895604.295 ops/s
# Warmup Iteration  18: 1879821.965 ops/s
# Warmup Iteration  19: 1892286.953 ops/s
# Warmup Iteration  20: 1892404.633 ops/s
# Warmup Iteration  21: 1894731.354 ops/s
# Warmup Iteration  22: 1864266.545 ops/s
# Warmup Iteration  23: 1886825.111 ops/s
# Warmup Iteration  24: 1884724.877 ops/s
# Warmup Iteration  25: 1890765.268 ops/s
# Warmup Iteration  26: 1878066.557 ops/s
# Warmup Iteration  27: 1889997.859 ops/s
# Warmup Iteration  28: 1891416.299 ops/s
# Warmup Iteration  29: 1896689.605 ops/s
# Warmup Iteration  30: 1895727.150 ops/s
Iteration   1: 1891468.567 ops/s
Iteration   2: 1897972.885 ops/s
Iteration   3: 1893171.421 ops/s
Iteration   4: 1893382.435 ops/s
Iteration   5: 1888134.431 ops/s
Iteration   6: 1887974.016 ops/s
Iteration   7: 1889390.571 ops/s
Iteration   8: 1894375.484 ops/s
Iteration   9: 1891560.343 ops/s
Iteration  10: 1891874.577 ops/s
Iteration  11: 1891277.824 ops/s
Iteration  12: 1878076.896 ops/s
Iteration  13: 1864304.351 ops/s
Iteration  14: 1892969.743 ops/s
Iteration  15: 1894605.828 ops/s
Iteration  16: 1895090.775 ops/s
Iteration  17: 1896512.470 ops/s
Iteration  18: 1890554.426 ops/s
Iteration  19: 1892230.278 ops/s
Iteration  20: 1894136.096 ops/s
Iteration  21: 1890211.747 ops/s
Iteration  22: 1892404.353 ops/s
Iteration  23: 1885481.633 ops/s
Iteration  24: 1886040.283 ops/s
Iteration  25: 1883209.693 ops/s
Iteration  26: 1891025.012 ops/s
Iteration  27: 1896183.203 ops/s
Iteration  28: 1890050.789 ops/s
Iteration  29: 1880568.001 ops/s
Iteration  30: 1890760.624 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_collect":
  1889833.292 ±(99.9%) 4405.815 ops/s [Average]
  (min, avg, max) = (1864304.351, 1889833.292, 1897972.885), stdev = 6594.417
  CI (99.9%): [1885427.477, 1894239.107] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_collect  thrpt   30  1889833.292 ± 4405.815  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2662367.565 ops/s
# Warmup Iteration   2: 4677440.136 ops/s
# Warmup Iteration   3: 5691775.259 ops/s
# Warmup Iteration   4: 5650941.671 ops/s
# Warmup Iteration   5: 5649306.706 ops/s
# Warmup Iteration   6: 5646711.054 ops/s
# Warmup Iteration   7: 5678777.120 ops/s
# Warmup Iteration   8: 5652834.001 ops/s
# Warmup Iteration   9: 5667056.013 ops/s
# Warmup Iteration  10: 5596177.208 ops/s
# Warmup Iteration  11: 5656082.252 ops/s
# Warmup Iteration  12: 5671255.070 ops/s
# Warmup Iteration  13: 5653234.729 ops/s
# Warmup Iteration  14: 5670822.070 ops/s
# Warmup Iteration  15: 5680700.303 ops/s
# Warmup Iteration  16: 5635050.882 ops/s
# Warmup Iteration  17: 5663575.035 ops/s
# Warmup Iteration  18: 5654698.163 ops/s
# Warmup Iteration  19: 5677351.005 ops/s
# Warmup Iteration  20: 5677379.267 ops/s
# Warmup Iteration  21: 5676333.258 ops/s
# Warmup Iteration  22: 5570486.261 ops/s
# Warmup Iteration  23: 5682380.608 ops/s
# Warmup Iteration  24: 5709658.303 ops/s
# Warmup Iteration  25: 5662398.992 ops/s
# Warmup Iteration  26: 5700717.468 ops/s
# Warmup Iteration  27: 5672845.216 ops/s
# Warmup Iteration  28: 5671827.221 ops/s
# Warmup Iteration  29: 5700459.324 ops/s
# Warmup Iteration  30: 5690081.702 ops/s
Iteration   1: 5639675.961 ops/s
Iteration   2: 5691016.894 ops/s
Iteration   3: 5699172.939 ops/s
Iteration   4: 5699791.604 ops/s
Iteration   5: 5684217.382 ops/s
Iteration   6: 5669775.695 ops/s
Iteration   7: 5677356.852 ops/s
Iteration   8: 5671766.670 ops/s
Iteration   9: 5695135.024 ops/s
Iteration  10: 5667205.866 ops/s
Iteration  11: 5660902.041 ops/s
Iteration  12: 5705985.926 ops/s
Iteration  13: 5668962.991 ops/s
Iteration  14: 5720317.792 ops/s
Iteration  15: 5687423.760 ops/s
Iteration  16: 5706246.038 ops/s
Iteration  17: 5674579.218 ops/s
Iteration  18: 5652363.652 ops/s
Iteration  19: 5635101.642 ops/s
Iteration  20: 5665377.703 ops/s
Iteration  21: 5644527.868 ops/s
Iteration  22: 5682510.756 ops/s
Iteration  23: 5691274.046 ops/s
Iteration  24: 5697542.388 ops/s
Iteration  25: 5680314.526 ops/s
Iteration  26: 5682922.286 ops/s
Iteration  27: 5712889.813 ops/s
Iteration  28: 5713681.438 ops/s
Iteration  29: 5704228.023 ops/s
Iteration  30: 5663164.203 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_contains":
  5681514.367 ±(99.9%) 14875.739 ops/s [Average]
  (min, avg, max) = (5635101.642, 5681514.367, 5720317.792), stdev = 22265.308
  CI (99.9%): [5666638.628, 5696390.106] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_contains  thrpt   30  5681514.367 ± 14875.739  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5423008.560 ops/s
# Warmup Iteration   2: 9953122.741 ops/s
# Warmup Iteration   3: 10403524.324 ops/s
# Warmup Iteration   4: 11164677.906 ops/s
# Warmup Iteration   5: 11140878.603 ops/s
# Warmup Iteration   6: 11099805.888 ops/s
# Warmup Iteration   7: 11041328.948 ops/s
# Warmup Iteration   8: 11123798.171 ops/s
# Warmup Iteration   9: 11132078.453 ops/s
# Warmup Iteration  10: 11133738.929 ops/s
# Warmup Iteration  11: 11116897.946 ops/s
# Warmup Iteration  12: 11104146.339 ops/s
# Warmup Iteration  13: 11065592.262 ops/s
# Warmup Iteration  14: 11124797.052 ops/s
# Warmup Iteration  15: 11076043.967 ops/s
# Warmup Iteration  16: 11115585.825 ops/s
# Warmup Iteration  17: 10985926.212 ops/s
# Warmup Iteration  18: 11101131.834 ops/s
# Warmup Iteration  19: 11089957.026 ops/s
# Warmup Iteration  20: 11118702.538 ops/s
# Warmup Iteration  21: 11029954.608 ops/s
# Warmup Iteration  22: 11026262.373 ops/s
# Warmup Iteration  23: 11065410.293 ops/s
# Warmup Iteration  24: 11049464.843 ops/s
# Warmup Iteration  25: 11014286.056 ops/s
# Warmup Iteration  26: 11096530.002 ops/s
# Warmup Iteration  27: 11028077.190 ops/s
# Warmup Iteration  28: 11122914.832 ops/s
# Warmup Iteration  29: 11123447.320 ops/s
# Warmup Iteration  30: 11083296.733 ops/s
Iteration   1: 11104810.387 ops/s
Iteration   2: 11077341.702 ops/s
Iteration   3: 11106649.862 ops/s
Iteration   4: 11127795.669 ops/s
Iteration   5: 11128435.290 ops/s
Iteration   6: 11055314.582 ops/s
Iteration   7: 11131085.541 ops/s
Iteration   8: 11149068.298 ops/s
Iteration   9: 11128296.049 ops/s
Iteration  10: 10836766.871 ops/s
Iteration  11: 11001181.302 ops/s
Iteration  12: 11093792.026 ops/s
Iteration  13: 11067586.779 ops/s
Iteration  14: 10977068.286 ops/s
Iteration  15: 11104373.438 ops/s
Iteration  16: 11068966.900 ops/s
Iteration  17: 11100483.427 ops/s
Iteration  18: 11078148.328 ops/s
Iteration  19: 11116596.143 ops/s
Iteration  20: 10919334.076 ops/s
Iteration  21: 11113815.189 ops/s
Iteration  22: 11054701.150 ops/s
Iteration  23: 11051015.524 ops/s
Iteration  24: 11085679.140 ops/s
Iteration  25: 11151486.322 ops/s
Iteration  26: 11138414.202 ops/s
Iteration  27: 11101074.283 ops/s
Iteration  28: 11107616.182 ops/s
Iteration  29: 11148665.458 ops/s
Iteration  30: 11137417.639 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_containsAllArray":
  11082099.335 ±(99.9%) 46612.223 ops/s [Average]
  (min, avg, max) = (10836766.871, 11082099.335, 11151486.322), stdev = 69766.986
  CI (99.9%): [11035487.112, 11128711.557] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt         Score       Error  Units
UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_containsAllArray  thrpt   30  11082099.335 ± 46612.223  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3621730.047 ops/s
# Warmup Iteration   2: 6878941.052 ops/s
# Warmup Iteration   3: 7925363.377 ops/s
# Warmup Iteration   4: 8113288.470 ops/s
# Warmup Iteration   5: 8070027.280 ops/s
# Warmup Iteration   6: 8020906.734 ops/s
# Warmup Iteration   7: 8110929.779 ops/s
# Warmup Iteration   8: 8084796.078 ops/s
# Warmup Iteration   9: 8126426.182 ops/s
# Warmup Iteration  10: 8124902.382 ops/s
# Warmup Iteration  11: 8137353.422 ops/s
# Warmup Iteration  12: 8103292.775 ops/s
# Warmup Iteration  13: 8053686.030 ops/s
# Warmup Iteration  14: 8098100.201 ops/s
# Warmup Iteration  15: 8103472.723 ops/s
# Warmup Iteration  16: 8009209.095 ops/s
# Warmup Iteration  17: 8072289.451 ops/s
# Warmup Iteration  18: 8059290.134 ops/s
# Warmup Iteration  19: 8071401.105 ops/s
# Warmup Iteration  20: 8106021.564 ops/s
# Warmup Iteration  21: 8074129.487 ops/s
# Warmup Iteration  22: 8010925.234 ops/s
# Warmup Iteration  23: 8049770.266 ops/s
# Warmup Iteration  24: 8064699.577 ops/s
# Warmup Iteration  25: 8112793.724 ops/s
# Warmup Iteration  26: 8015799.238 ops/s
# Warmup Iteration  27: 7972866.111 ops/s
# Warmup Iteration  28: 8004347.608 ops/s
# Warmup Iteration  29: 8092505.284 ops/s
# Warmup Iteration  30: 8015513.926 ops/s
Iteration   1: 8056946.881 ops/s
Iteration   2: 8011194.542 ops/s
Iteration   3: 8004627.445 ops/s
Iteration   4: 8051412.886 ops/s
Iteration   5: 8087725.587 ops/s
Iteration   6: 8079998.893 ops/s
Iteration   7: 8017137.965 ops/s
Iteration   8: 8031859.206 ops/s
Iteration   9: 8086776.405 ops/s
Iteration  10: 7999592.376 ops/s
Iteration  11: 8056964.223 ops/s
Iteration  12: 8097889.407 ops/s
Iteration  13: 8112820.596 ops/s
Iteration  14: 8129365.581 ops/s
Iteration  15: 8090549.691 ops/s
Iteration  16: 8013717.526 ops/s
Iteration  17: 8005891.315 ops/s
Iteration  18: 8065203.379 ops/s
Iteration  19: 8004954.882 ops/s
Iteration  20: 8043749.647 ops/s
Iteration  21: 8070963.315 ops/s
Iteration  22: 8077256.852 ops/s
Iteration  23: 8073057.941 ops/s
Iteration  24: 8002109.884 ops/s
Iteration  25: 8010036.630 ops/s
Iteration  26: 8048550.441 ops/s
Iteration  27: 8031827.224 ops/s
Iteration  28: 8051082.371 ops/s
Iteration  29: 8087790.054 ops/s
Iteration  30: 8059124.344 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_containsAllIterable":
  8052005.916 ±(99.9%) 24299.697 ops/s [Average]
  (min, avg, max) = (7999592.376, 8052005.916, 8129365.581), stdev = 36370.645
  CI (99.9%): [8027706.220, 8076305.613] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score       Error  Units
UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_containsAllIterable  thrpt   30  8052005.916 ± 24299.697  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_containsAnyArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_containsAnyArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2733164.432 ops/s
# Warmup Iteration   2: 5181900.228 ops/s
# Warmup Iteration   3: 6007434.202 ops/s
# Warmup Iteration   4: 6118275.513 ops/s
# Warmup Iteration   5: 6123987.895 ops/s
# Warmup Iteration   6: 6124466.166 ops/s
# Warmup Iteration   7: 6115313.986 ops/s
# Warmup Iteration   8: 6112139.058 ops/s
# Warmup Iteration   9: 6119953.423 ops/s
# Warmup Iteration  10: 6149958.108 ops/s
# Warmup Iteration  11: 6111567.022 ops/s
# Warmup Iteration  12: 6123698.941 ops/s
# Warmup Iteration  13: 6143669.462 ops/s
# Warmup Iteration  14: 6103688.345 ops/s
# Warmup Iteration  15: 6113203.162 ops/s
# Warmup Iteration  16: 6076225.009 ops/s
# Warmup Iteration  17: 6086105.864 ops/s
# Warmup Iteration  18: 6122481.428 ops/s
# Warmup Iteration  19: 6142975.159 ops/s
# Warmup Iteration  20: 6111688.813 ops/s
# Warmup Iteration  21: 6102766.467 ops/s
# Warmup Iteration  22: 6135553.329 ops/s
# Warmup Iteration  23: 6068230.696 ops/s
# Warmup Iteration  24: 6090272.173 ops/s
# Warmup Iteration  25: 6129412.527 ops/s
# Warmup Iteration  26: 6089782.424 ops/s
# Warmup Iteration  27: 6124234.260 ops/s
# Warmup Iteration  28: 6122372.510 ops/s
# Warmup Iteration  29: 6088702.470 ops/s
# Warmup Iteration  30: 6128462.347 ops/s
Iteration   1: 6064038.080 ops/s
Iteration   2: 6068590.322 ops/s
Iteration   3: 6113333.232 ops/s
Iteration   4: 6152871.599 ops/s
Iteration   5: 6156440.201 ops/s
Iteration   6: 6149662.406 ops/s
Iteration   7: 6147291.224 ops/s
Iteration   8: 6143817.942 ops/s
Iteration   9: 6107101.427 ops/s
Iteration  10: 6084302.137 ops/s
Iteration  11: 6108504.999 ops/s
Iteration  12: 6114829.183 ops/s
Iteration  13: 6156895.629 ops/s
Iteration  14: 6083229.145 ops/s
Iteration  15: 6119127.205 ops/s
Iteration  16: 6096259.752 ops/s
Iteration  17: 6123327.820 ops/s
Iteration  18: 6156708.231 ops/s
Iteration  19: 6149247.171 ops/s
Iteration  20: 6137909.029 ops/s
Iteration  21: 6114600.632 ops/s
Iteration  22: 6136851.445 ops/s
Iteration  23: 6154546.234 ops/s
Iteration  24: 6144579.237 ops/s
Iteration  25: 6102298.528 ops/s
Iteration  26: 6130189.437 ops/s
Iteration  27: 6155198.296 ops/s
Iteration  28: 6145279.939 ops/s
Iteration  29: 6132980.582 ops/s
Iteration  30: 6164888.710 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_containsAnyArray":
  6127163.326 ±(99.9%) 18766.932 ops/s [Average]
  (min, avg, max) = (6064038.080, 6127163.326, 6164888.710), stdev = 28089.463
  CI (99.9%): [6108396.393, 6145930.258] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_containsAnyArray  thrpt   30  6127163.326 ± 18766.932  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_containsAnyIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_containsAnyIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 565220.666 ops/s
# Warmup Iteration   2: 1041829.198 ops/s
# Warmup Iteration   3: 1129726.514 ops/s
# Warmup Iteration   4: 1133201.605 ops/s
# Warmup Iteration   5: 938899.305 ops/s
# Warmup Iteration   6: 1134543.320 ops/s
# Warmup Iteration   7: 1126046.333 ops/s
# Warmup Iteration   8: 1132897.924 ops/s
# Warmup Iteration   9: 1134279.654 ops/s
# Warmup Iteration  10: 1133995.618 ops/s
# Warmup Iteration  11: 1133347.875 ops/s
# Warmup Iteration  12: 1132353.999 ops/s
# Warmup Iteration  13: 1133473.523 ops/s
# Warmup Iteration  14: 1134071.819 ops/s
# Warmup Iteration  15: 1134704.359 ops/s
# Warmup Iteration  16: 1134073.913 ops/s
# Warmup Iteration  17: 1131039.009 ops/s
# Warmup Iteration  18: 1132118.247 ops/s
# Warmup Iteration  19: 1133516.141 ops/s
# Warmup Iteration  20: 1132640.745 ops/s
# Warmup Iteration  21: 1134372.228 ops/s
# Warmup Iteration  22: 1133074.903 ops/s
# Warmup Iteration  23: 1132970.949 ops/s
# Warmup Iteration  24: 1126343.542 ops/s
# Warmup Iteration  25: 1134980.743 ops/s
# Warmup Iteration  26: 1132677.325 ops/s
# Warmup Iteration  27: 1135490.569 ops/s
# Warmup Iteration  28: 1133854.054 ops/s
# Warmup Iteration  29: 1133567.171 ops/s
# Warmup Iteration  30: 1134498.841 ops/s
Iteration   1: 1134083.335 ops/s
Iteration   2: 1132827.026 ops/s
Iteration   3: 1131794.267 ops/s
Iteration   4: 1137080.149 ops/s
Iteration   5: 1119953.513 ops/s
Iteration   6: 1133780.949 ops/s
Iteration   7: 1137228.861 ops/s
Iteration   8: 1129412.501 ops/s
Iteration   9: 1117409.039 ops/s
Iteration  10: 1133816.693 ops/s
Iteration  11: 1135925.632 ops/s
Iteration  12: 1134710.014 ops/s
Iteration  13: 1131018.041 ops/s
Iteration  14: 1134624.739 ops/s
Iteration  15: 1135912.402 ops/s
Iteration  16: 1132469.707 ops/s
Iteration  17: 1136288.058 ops/s
Iteration  18: 1134024.138 ops/s
Iteration  19: 1132975.513 ops/s
Iteration  20: 1135169.566 ops/s
Iteration  21: 1135446.293 ops/s
Iteration  22: 1132336.262 ops/s
Iteration  23: 1133020.360 ops/s
Iteration  24: 1116323.485 ops/s
Iteration  25: 1132015.701 ops/s
Iteration  26: 1136235.293 ops/s
Iteration  27: 1132622.203 ops/s
Iteration  28: 1133270.810 ops/s
Iteration  29: 1135731.020 ops/s
Iteration  30: 1132732.863 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_containsAnyIterable":
  1132341.281 ±(99.9%) 3506.254 ops/s [Average]
  (min, avg, max) = (1116323.485, 1132341.281, 1137228.861), stdev = 5247.997
  CI (99.9%): [1128835.027, 1135847.535] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score      Error  Units
UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_containsAnyIterable  thrpt   30  1132341.281 ± 3506.254  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_containsNoneArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_containsNoneArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2804515.863 ops/s
# Warmup Iteration   2: 5143780.363 ops/s
# Warmup Iteration   3: 6218978.051 ops/s
# Warmup Iteration   4: 6238468.596 ops/s
# Warmup Iteration   5: 6204920.360 ops/s
# Warmup Iteration   6: 6220415.915 ops/s
# Warmup Iteration   7: 6213276.630 ops/s
# Warmup Iteration   8: 6222517.064 ops/s
# Warmup Iteration   9: 6229800.181 ops/s
# Warmup Iteration  10: 6213976.512 ops/s
# Warmup Iteration  11: 6213935.964 ops/s
# Warmup Iteration  12: 6203667.864 ops/s
# Warmup Iteration  13: 6231377.085 ops/s
# Warmup Iteration  14: 6225335.392 ops/s
# Warmup Iteration  15: 6234506.649 ops/s
# Warmup Iteration  16: 6207855.545 ops/s
# Warmup Iteration  17: 6194210.744 ops/s
# Warmup Iteration  18: 6227269.598 ops/s
# Warmup Iteration  19: 6160841.653 ops/s
# Warmup Iteration  20: 6172882.437 ops/s
# Warmup Iteration  21: 6223855.137 ops/s
# Warmup Iteration  22: 6194671.712 ops/s
# Warmup Iteration  23: 6221516.067 ops/s
# Warmup Iteration  24: 6158912.475 ops/s
# Warmup Iteration  25: 6158831.739 ops/s
# Warmup Iteration  26: 6205359.304 ops/s
# Warmup Iteration  27: 6150904.786 ops/s
# Warmup Iteration  28: 6189688.959 ops/s
# Warmup Iteration  29: 6210647.703 ops/s
# Warmup Iteration  30: 6188072.372 ops/s
Iteration   1: 6192783.743 ops/s
Iteration   2: 6208560.763 ops/s
Iteration   3: 6135568.314 ops/s
Iteration   4: 6229841.534 ops/s
Iteration   5: 6189408.820 ops/s
Iteration   6: 6220452.076 ops/s
Iteration   7: 6205942.191 ops/s
Iteration   8: 6209831.682 ops/s
Iteration   9: 6161219.296 ops/s
Iteration  10: 6205250.736 ops/s
Iteration  11: 6230729.543 ops/s
Iteration  12: 6184964.800 ops/s
Iteration  13: 6195331.206 ops/s
Iteration  14: 6213964.959 ops/s
Iteration  15: 6220417.242 ops/s
Iteration  16: 6220576.518 ops/s
Iteration  17: 6212861.825 ops/s
Iteration  18: 6233605.739 ops/s
Iteration  19: 6216694.177 ops/s
Iteration  20: 6240985.147 ops/s
Iteration  21: 6215660.387 ops/s
Iteration  22: 6213217.066 ops/s
Iteration  23: 6188756.899 ops/s
Iteration  24: 6210096.477 ops/s
Iteration  25: 6223898.125 ops/s
Iteration  26: 6228899.834 ops/s
Iteration  27: 6196286.324 ops/s
Iteration  28: 6171478.463 ops/s
Iteration  29: 6181611.470 ops/s
Iteration  30: 6250862.315 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_containsNoneArray":
  6206991.922 ±(99.9%) 16262.672 ops/s [Average]
  (min, avg, max) = (6135568.314, 6206991.922, 6250862.315), stdev = 24341.203
  CI (99.9%): [6190729.251, 6223254.594] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_containsNoneArray  thrpt   30  6206991.922 ± 16262.672  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_containsNoneIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_containsNoneIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 525512.523 ops/s
# Warmup Iteration   2: 933659.437 ops/s
# Warmup Iteration   3: 1025329.580 ops/s
# Warmup Iteration   4: 1024630.653 ops/s
# Warmup Iteration   5: 973033.104 ops/s
# Warmup Iteration   6: 906880.648 ops/s
# Warmup Iteration   7: 1026293.723 ops/s
# Warmup Iteration   8: 1026743.019 ops/s
# Warmup Iteration   9: 1028475.499 ops/s
# Warmup Iteration  10: 1027468.373 ops/s
# Warmup Iteration  11: 1026423.871 ops/s
# Warmup Iteration  12: 1026008.703 ops/s
# Warmup Iteration  13: 1025931.333 ops/s
# Warmup Iteration  14: 1029180.180 ops/s
# Warmup Iteration  15: 1025972.302 ops/s
# Warmup Iteration  16: 1026647.003 ops/s
# Warmup Iteration  17: 1029406.049 ops/s
# Warmup Iteration  18: 1029256.717 ops/s
# Warmup Iteration  19: 1028929.931 ops/s
# Warmup Iteration  20: 1028786.371 ops/s
# Warmup Iteration  21: 1025610.512 ops/s
# Warmup Iteration  22: 1031256.814 ops/s
# Warmup Iteration  23: 1030486.884 ops/s
# Warmup Iteration  24: 1029042.115 ops/s
# Warmup Iteration  25: 1029131.661 ops/s
# Warmup Iteration  26: 1029033.633 ops/s
# Warmup Iteration  27: 1032144.026 ops/s
# Warmup Iteration  28: 1028698.374 ops/s
# Warmup Iteration  29: 1029768.860 ops/s
# Warmup Iteration  30: 1029971.960 ops/s
Iteration   1: 1030854.969 ops/s
Iteration   2: 1030707.571 ops/s
Iteration   3: 1031705.261 ops/s
Iteration   4: 1027777.490 ops/s
Iteration   5: 1034398.162 ops/s
Iteration   6: 1027276.532 ops/s
Iteration   7: 1030198.740 ops/s
Iteration   8: 1032897.316 ops/s
Iteration   9: 1030097.306 ops/s
Iteration  10: 1032603.277 ops/s
Iteration  11: 1028821.166 ops/s
Iteration  12: 1029637.257 ops/s
Iteration  13: 1031246.314 ops/s
Iteration  14: 1027167.020 ops/s
Iteration  15: 1026056.992 ops/s
Iteration  16: 1032013.121 ops/s
Iteration  17: 1028541.328 ops/s
Iteration  18: 1030712.296 ops/s
Iteration  19: 1024402.532 ops/s
Iteration  20: 1028416.151 ops/s
Iteration  21: 1015535.589 ops/s
Iteration  22: 1029452.068 ops/s
Iteration  23: 1032174.311 ops/s
Iteration  24: 1028741.916 ops/s
Iteration  25: 1029777.785 ops/s
Iteration  26: 1033636.698 ops/s
Iteration  27: 1031366.614 ops/s
Iteration  28: 1030656.167 ops/s
Iteration  29: 1028387.366 ops/s
Iteration  30: 1027303.218 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_containsNoneIterable":
  1029418.751 ±(99.9%) 2318.985 ops/s [Average]
  (min, avg, max) = (1015535.589, 1029418.751, 1034398.162), stdev = 3470.948
  CI (99.9%): [1027099.766, 1031737.736] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score      Error  Units
UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_containsNoneIterable  thrpt   30  1029418.751 ± 2318.985  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1156038.876 ops/s
# Warmup Iteration   2: 2730981.942 ops/s
# Warmup Iteration   3: 2694515.967 ops/s
# Warmup Iteration   4: 2196947.814 ops/s
# Warmup Iteration   5: 2690441.262 ops/s
# Warmup Iteration   6: 2682027.830 ops/s
# Warmup Iteration   7: 2699246.366 ops/s
# Warmup Iteration   8: 2695838.754 ops/s
# Warmup Iteration   9: 2701055.233 ops/s
# Warmup Iteration  10: 2692545.752 ops/s
# Warmup Iteration  11: 2692952.026 ops/s
# Warmup Iteration  12: 2689747.612 ops/s
# Warmup Iteration  13: 2695712.295 ops/s
# Warmup Iteration  14: 2691639.187 ops/s
# Warmup Iteration  15: 2691245.754 ops/s
# Warmup Iteration  16: 2669714.902 ops/s
# Warmup Iteration  17: 2690870.258 ops/s
# Warmup Iteration  18: 2692944.390 ops/s
# Warmup Iteration  19: 2686583.531 ops/s
# Warmup Iteration  20: 2695027.927 ops/s
# Warmup Iteration  21: 2691334.041 ops/s
# Warmup Iteration  22: 2684311.276 ops/s
# Warmup Iteration  23: 2698094.246 ops/s
# Warmup Iteration  24: 2697045.545 ops/s
# Warmup Iteration  25: 2691354.052 ops/s
# Warmup Iteration  26: 2692396.403 ops/s
# Warmup Iteration  27: 2677318.999 ops/s
# Warmup Iteration  28: 2703879.562 ops/s
# Warmup Iteration  29: 2691765.973 ops/s
# Warmup Iteration  30: 2690332.888 ops/s
Iteration   1: 2705442.044 ops/s
Iteration   2: 2699200.910 ops/s
Iteration   3: 2701260.351 ops/s
Iteration   4: 2695153.319 ops/s
Iteration   5: 2692289.608 ops/s
Iteration   6: 2699410.960 ops/s
Iteration   7: 2699775.219 ops/s
Iteration   8: 2704892.545 ops/s
Iteration   9: 2705884.707 ops/s
Iteration  10: 2684210.769 ops/s
Iteration  11: 2699200.702 ops/s
Iteration  12: 2687062.484 ops/s
Iteration  13: 2693411.755 ops/s
Iteration  14: 2694038.124 ops/s
Iteration  15: 2689265.731 ops/s
Iteration  16: 2688155.526 ops/s
Iteration  17: 2699077.875 ops/s
Iteration  18: 2702678.164 ops/s
Iteration  19: 2700405.055 ops/s
Iteration  20: 2700181.264 ops/s
Iteration  21: 2693382.066 ops/s
Iteration  22: 2698701.295 ops/s
Iteration  23: 2700733.929 ops/s
Iteration  24: 2704184.583 ops/s
Iteration  25: 2696947.630 ops/s
Iteration  26: 2697323.229 ops/s
Iteration  27: 2692734.463 ops/s
Iteration  28: 2696965.182 ops/s
Iteration  29: 2703259.301 ops/s
Iteration  30: 2694335.697 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_count":
  2697318.816 ±(99.9%) 3727.767 ops/s [Average]
  (min, avg, max) = (2684210.769, 2697318.816, 2705884.707), stdev = 5579.546
  CI (99.9%): [2693591.049, 2701046.583] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_count  thrpt   30  2697318.816 ± 3727.767  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2286636.426 ops/s
# Warmup Iteration   2: 5149338.945 ops/s
# Warmup Iteration   3: 4318218.389 ops/s
# Warmup Iteration   4: 5172924.336 ops/s
# Warmup Iteration   5: 5197314.038 ops/s
# Warmup Iteration   6: 5187831.394 ops/s
# Warmup Iteration   7: 5150551.207 ops/s
# Warmup Iteration   8: 5181355.589 ops/s
# Warmup Iteration   9: 5176956.109 ops/s
# Warmup Iteration  10: 5188538.601 ops/s
# Warmup Iteration  11: 5194927.935 ops/s
# Warmup Iteration  12: 5177796.720 ops/s
# Warmup Iteration  13: 5196040.616 ops/s
# Warmup Iteration  14: 5175260.628 ops/s
# Warmup Iteration  15: 5167907.448 ops/s
# Warmup Iteration  16: 5159980.158 ops/s
# Warmup Iteration  17: 5179484.185 ops/s
# Warmup Iteration  18: 5166726.265 ops/s
# Warmup Iteration  19: 5193549.728 ops/s
# Warmup Iteration  20: 5186444.213 ops/s
# Warmup Iteration  21: 5192071.331 ops/s
# Warmup Iteration  22: 5180956.694 ops/s
# Warmup Iteration  23: 5191032.660 ops/s
# Warmup Iteration  24: 5177836.081 ops/s
# Warmup Iteration  25: 5184507.012 ops/s
# Warmup Iteration  26: 5181090.923 ops/s
# Warmup Iteration  27: 5197721.425 ops/s
# Warmup Iteration  28: 5199820.523 ops/s
# Warmup Iteration  29: 5191143.725 ops/s
# Warmup Iteration  30: 5188600.813 ops/s
Iteration   1: 5173410.835 ops/s
Iteration   2: 5192568.126 ops/s
Iteration   3: 5181001.891 ops/s
Iteration   4: 5177284.534 ops/s
Iteration   5: 5168324.140 ops/s
Iteration   6: 5192964.501 ops/s
Iteration   7: 5163282.059 ops/s
Iteration   8: 5194524.781 ops/s
Iteration   9: 5186467.103 ops/s
Iteration  10: 5168114.655 ops/s
Iteration  11: 5191043.412 ops/s
Iteration  12: 5185437.598 ops/s
Iteration  13: 5173836.678 ops/s
Iteration  14: 5186380.609 ops/s
Iteration  15: 5203755.443 ops/s
Iteration  16: 5175389.572 ops/s
Iteration  17: 5177968.568 ops/s
Iteration  18: 5193323.803 ops/s
Iteration  19: 5186363.457 ops/s
Iteration  20: 5179805.566 ops/s
Iteration  21: 5189544.526 ops/s
Iteration  22: 5188571.038 ops/s
Iteration  23: 5188323.075 ops/s
Iteration  24: 5198059.530 ops/s
Iteration  25: 5212415.832 ops/s
Iteration  26: 5197082.683 ops/s
Iteration  27: 5180260.588 ops/s
Iteration  28: 5200523.851 ops/s
Iteration  29: 5188464.882 ops/s
Iteration  30: 5209471.771 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_detectIfNone":
  5186798.837 ±(99.9%) 7947.046 ops/s [Average]
  (min, avg, max) = (5163282.059, 5186798.837, 5212415.832), stdev = 11894.765
  CI (99.9%): [5178851.791, 5194745.883] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_detectIfNone  thrpt   30  5186798.837 ± 7947.046  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3040258.979 ops/s
# Warmup Iteration   2: 5976325.125 ops/s
# Warmup Iteration   3: 5733276.258 ops/s
# Warmup Iteration   4: 6372399.583 ops/s
# Warmup Iteration   5: 6372341.756 ops/s
# Warmup Iteration   6: 6370565.700 ops/s
# Warmup Iteration   7: 6374903.259 ops/s
# Warmup Iteration   8: 6387202.027 ops/s
# Warmup Iteration   9: 6380024.683 ops/s
# Warmup Iteration  10: 6329360.649 ops/s
# Warmup Iteration  11: 6392861.038 ops/s
# Warmup Iteration  12: 6386889.022 ops/s
# Warmup Iteration  13: 6387905.359 ops/s
# Warmup Iteration  14: 6364436.947 ops/s
# Warmup Iteration  15: 6335520.798 ops/s
# Warmup Iteration  16: 6377564.948 ops/s
# Warmup Iteration  17: 6382818.538 ops/s
# Warmup Iteration  18: 6310495.031 ops/s
# Warmup Iteration  19: 6407133.199 ops/s
# Warmup Iteration  20: 6379450.986 ops/s
# Warmup Iteration  21: 6331747.200 ops/s
# Warmup Iteration  22: 6399959.857 ops/s
# Warmup Iteration  23: 6298571.506 ops/s
# Warmup Iteration  24: 6393854.944 ops/s
# Warmup Iteration  25: 6368512.056 ops/s
# Warmup Iteration  26: 6394498.081 ops/s
# Warmup Iteration  27: 6375659.642 ops/s
# Warmup Iteration  28: 6384019.046 ops/s
# Warmup Iteration  29: 6317991.781 ops/s
# Warmup Iteration  30: 6389317.630 ops/s
Iteration   1: 6423857.006 ops/s
Iteration   2: 6394177.146 ops/s
Iteration   3: 6400732.380 ops/s
Iteration   4: 6367821.514 ops/s
Iteration   5: 6410519.173 ops/s
Iteration   6: 6266651.476 ops/s
Iteration   7: 6321543.310 ops/s
Iteration   8: 6366133.449 ops/s
Iteration   9: 6392170.273 ops/s
Iteration  10: 6392353.343 ops/s
Iteration  11: 6413858.516 ops/s
Iteration  12: 6390378.297 ops/s
Iteration  13: 6382848.999 ops/s
Iteration  14: 6362903.167 ops/s
Iteration  15: 6364287.134 ops/s
Iteration  16: 6380636.723 ops/s
Iteration  17: 6379006.749 ops/s
Iteration  18: 6375263.246 ops/s
Iteration  19: 6361159.579 ops/s
Iteration  20: 6342959.872 ops/s
Iteration  21: 6385464.144 ops/s
Iteration  22: 6336369.093 ops/s
Iteration  23: 6409318.561 ops/s
Iteration  24: 6377803.402 ops/s
Iteration  25: 6391000.164 ops/s
Iteration  26: 6404716.016 ops/s
Iteration  27: 6349778.262 ops/s
Iteration  28: 6374548.358 ops/s
Iteration  29: 6373834.614 ops/s
Iteration  30: 6393955.711 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_forEach":
  6376201.656 ±(99.9%) 20840.440 ops/s [Average]
  (min, avg, max) = (6266651.476, 6376201.656, 6423857.006), stdev = 31192.991
  CI (99.9%): [6355361.216, 6397042.095] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_forEach  thrpt   30  6376201.656 ± 20840.440  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9202089.080 ops/s
# Warmup Iteration   2: 15694532.097 ops/s
# Warmup Iteration   3: 18821673.223 ops/s
# Warmup Iteration   4: 18912803.468 ops/s
# Warmup Iteration   5: 18884671.283 ops/s
# Warmup Iteration   6: 18963016.851 ops/s
# Warmup Iteration   7: 19005665.727 ops/s
# Warmup Iteration   8: 18988977.192 ops/s
# Warmup Iteration   9: 19026860.196 ops/s
# Warmup Iteration  10: 18884362.195 ops/s
# Warmup Iteration  11: 18830277.368 ops/s
# Warmup Iteration  12: 18949565.707 ops/s
# Warmup Iteration  13: 18973318.732 ops/s
# Warmup Iteration  14: 19015419.534 ops/s
# Warmup Iteration  15: 18992131.148 ops/s
# Warmup Iteration  16: 19003619.124 ops/s
# Warmup Iteration  17: 18709803.233 ops/s
# Warmup Iteration  18: 18891341.776 ops/s
# Warmup Iteration  19: 18998731.857 ops/s
# Warmup Iteration  20: 19027616.813 ops/s
# Warmup Iteration  21: 19011951.967 ops/s
# Warmup Iteration  22: 18965035.456 ops/s
# Warmup Iteration  23: 18970675.885 ops/s
# Warmup Iteration  24: 18884196.717 ops/s
# Warmup Iteration  25: 18726859.412 ops/s
# Warmup Iteration  26: 18923209.598 ops/s
# Warmup Iteration  27: 18998490.018 ops/s
# Warmup Iteration  28: 19011705.465 ops/s
# Warmup Iteration  29: 18980985.104 ops/s
# Warmup Iteration  30: 18916751.363 ops/s
Iteration   1: 18986519.931 ops/s
Iteration   2: 18815004.816 ops/s
Iteration   3: 18750356.433 ops/s
Iteration   4: 18829319.081 ops/s
Iteration   5: 18955533.367 ops/s
Iteration   6: 19072489.177 ops/s
Iteration   7: 18973127.380 ops/s
Iteration   8: 19068345.704 ops/s
Iteration   9: 18932279.640 ops/s
Iteration  10: 19049547.491 ops/s
Iteration  11: 18992113.667 ops/s
Iteration  12: 18970593.484 ops/s
Iteration  13: 18898089.064 ops/s
Iteration  14: 18740588.103 ops/s
Iteration  15: 18851363.165 ops/s
Iteration  16: 18980925.507 ops/s
Iteration  17: 18949668.611 ops/s
Iteration  18: 18969858.453 ops/s
Iteration  19: 18934346.728 ops/s
Iteration  20: 19081882.324 ops/s
Iteration  21: 18903070.434 ops/s
Iteration  22: 18963950.882 ops/s
Iteration  23: 19016170.414 ops/s
Iteration  24: 18969084.353 ops/s
Iteration  25: 18906799.823 ops/s
Iteration  26: 19021534.237 ops/s
Iteration  27: 19035046.774 ops/s
Iteration  28: 19022828.828 ops/s
Iteration  29: 18794999.749 ops/s
Iteration  30: 18850725.842 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_injectInto":
  18942872.115 ±(99.9%) 62064.666 ops/s [Average]
  (min, avg, max) = (18740588.103, 18942872.115, 19081882.324), stdev = 92895.478
  CI (99.9%): [18880807.449, 19004936.782] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt         Score       Error  Units
UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_injectInto  thrpt   30  18942872.115 ± 62064.666  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1212153.121 ops/s
# Warmup Iteration   2: 1969453.296 ops/s
# Warmup Iteration   3: 2342669.115 ops/s
# Warmup Iteration   4: 2331705.499 ops/s
# Warmup Iteration   5: 2289475.258 ops/s
# Warmup Iteration   6: 2300176.874 ops/s
# Warmup Iteration   7: 2318815.368 ops/s
# Warmup Iteration   8: 2319798.014 ops/s
# Warmup Iteration   9: 2325812.029 ops/s
# Warmup Iteration  10: 2305537.650 ops/s
# Warmup Iteration  11: 2337397.793 ops/s
# Warmup Iteration  12: 2312302.280 ops/s
# Warmup Iteration  13: 2310687.615 ops/s
# Warmup Iteration  14: 2315111.301 ops/s
# Warmup Iteration  15: 2336918.443 ops/s
# Warmup Iteration  16: 2309099.447 ops/s
# Warmup Iteration  17: 2301362.947 ops/s
# Warmup Iteration  18: 2309303.948 ops/s
# Warmup Iteration  19: 2340324.918 ops/s
# Warmup Iteration  20: 2341905.367 ops/s
# Warmup Iteration  21: 2338699.620 ops/s
# Warmup Iteration  22: 2323317.473 ops/s
# Warmup Iteration  23: 2317004.414 ops/s
# Warmup Iteration  24: 2342263.699 ops/s
# Warmup Iteration  25: 2342377.770 ops/s
# Warmup Iteration  26: 2338016.978 ops/s
# Warmup Iteration  27: 2324746.324 ops/s
# Warmup Iteration  28: 2311721.904 ops/s
# Warmup Iteration  29: 2331234.063 ops/s
# Warmup Iteration  30: 2357393.860 ops/s
Iteration   1: 2341954.900 ops/s
Iteration   2: 2338771.885 ops/s
Iteration   3: 2344516.741 ops/s
Iteration   4: 2342293.671 ops/s
Iteration   5: 2333478.459 ops/s
Iteration   6: 2311724.420 ops/s
Iteration   7: 2293822.292 ops/s
Iteration   8: 2287445.344 ops/s
Iteration   9: 2306073.801 ops/s
Iteration  10: 2310232.416 ops/s
Iteration  11: 2344481.944 ops/s
Iteration  12: 2342104.986 ops/s
Iteration  13: 2337487.426 ops/s
Iteration  14: 2325933.264 ops/s
Iteration  15: 2321820.265 ops/s
Iteration  16: 2291735.984 ops/s
Iteration  17: 2322345.929 ops/s
Iteration  18: 2284210.713 ops/s
Iteration  19: 2311977.810 ops/s
Iteration  20: 2315695.342 ops/s
Iteration  21: 2335732.533 ops/s
Iteration  22: 2333921.988 ops/s
Iteration  23: 2311755.795 ops/s
Iteration  24: 2309233.263 ops/s
Iteration  25: 2299671.939 ops/s
Iteration  26: 2318330.039 ops/s
Iteration  27: 2303975.704 ops/s
Iteration  28: 2318835.044 ops/s
Iteration  29: 2317648.844 ops/s
Iteration  30: 2343227.742 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_isEmpty":
  2320014.683 ±(99.9%) 12195.024 ops/s [Average]
  (min, avg, max) = (2284210.713, 2320014.683, 2344516.741), stdev = 18252.939
  CI (99.9%): [2307819.659, 2332209.707] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_isEmpty  thrpt   30  2320014.683 ± 12195.024  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_iterator_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_iterator_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 648956.958 ops/s
# Warmup Iteration   2: 668751.700 ops/s
# Warmup Iteration   3: 869358.843 ops/s
# Warmup Iteration   4: 878521.161 ops/s
# Warmup Iteration   5: 880420.361 ops/s
# Warmup Iteration   6: 873895.537 ops/s
# Warmup Iteration   7: 878681.540 ops/s
# Warmup Iteration   8: 879607.477 ops/s
# Warmup Iteration   9: 878853.296 ops/s
# Warmup Iteration  10: 876128.915 ops/s
# Warmup Iteration  11: 877329.104 ops/s
# Warmup Iteration  12: 730789.225 ops/s
# Warmup Iteration  13: 880705.852 ops/s
# Warmup Iteration  14: 879817.300 ops/s
# Warmup Iteration  15: 878642.227 ops/s
# Warmup Iteration  16: 879548.038 ops/s
# Warmup Iteration  17: 931272.125 ops/s
# Warmup Iteration  18: 935466.533 ops/s
# Warmup Iteration  19: 931243.133 ops/s
# Warmup Iteration  20: 933997.845 ops/s
# Warmup Iteration  21: 929088.641 ops/s
# Warmup Iteration  22: 929715.634 ops/s
# Warmup Iteration  23: 934895.210 ops/s
# Warmup Iteration  24: 932872.183 ops/s
# Warmup Iteration  25: 932366.502 ops/s
# Warmup Iteration  26: 929954.051 ops/s
# Warmup Iteration  27: 930111.020 ops/s
# Warmup Iteration  28: 932864.918 ops/s
# Warmup Iteration  29: 932991.452 ops/s
# Warmup Iteration  30: 931340.917 ops/s
Iteration   1: 935414.322 ops/s
Iteration   2: 932084.262 ops/s
Iteration   3: 931648.208 ops/s
Iteration   4: 931124.602 ops/s
Iteration   5: 934638.958 ops/s
Iteration   6: 934852.491 ops/s
Iteration   7: 933986.753 ops/s
Iteration   8: 929451.825 ops/s
Iteration   9: 927547.218 ops/s
Iteration  10: 933806.122 ops/s
Iteration  11: 933332.429 ops/s
Iteration  12: 931329.005 ops/s
Iteration  13: 936397.213 ops/s
Iteration  14: 932742.418 ops/s
Iteration  15: 932256.304 ops/s
Iteration  16: 931264.607 ops/s
Iteration  17: 933356.901 ops/s
Iteration  18: 932052.367 ops/s
Iteration  19: 932191.923 ops/s
Iteration  20: 930677.630 ops/s
Iteration  21: 931706.197 ops/s
Iteration  22: 929373.271 ops/s
Iteration  23: 933092.286 ops/s
Iteration  24: 933588.576 ops/s
Iteration  25: 932555.265 ops/s
Iteration  26: 933035.521 ops/s
Iteration  27: 932279.651 ops/s
Iteration  28: 935692.994 ops/s
Iteration  29: 933441.726 ops/s
Iteration  30: 933185.265 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_iterator_throws":
  932603.544 ±(99.9%) 1276.661 ops/s [Average]
  (min, avg, max) = (927547.218, 932603.544, 936397.213), stdev = 1910.846
  CI (99.9%): [931326.882, 933880.205] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_iterator_throws  thrpt   30  932603.544 ± 1276.661  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 701961.635 ops/s
# Warmup Iteration   2: 771364.313 ops/s
# Warmup Iteration   3: 988167.172 ops/s
# Warmup Iteration   4: 983597.751 ops/s
# Warmup Iteration   5: 987506.948 ops/s
# Warmup Iteration   6: 982941.953 ops/s
# Warmup Iteration   7: 980514.025 ops/s
# Warmup Iteration   8: 985715.788 ops/s
# Warmup Iteration   9: 982253.252 ops/s
# Warmup Iteration  10: 840547.616 ops/s
# Warmup Iteration  11: 961869.951 ops/s
# Warmup Iteration  12: 980244.089 ops/s
# Warmup Iteration  13: 985296.781 ops/s
# Warmup Iteration  14: 982884.882 ops/s
# Warmup Iteration  15: 983247.336 ops/s
# Warmup Iteration  16: 984230.633 ops/s
# Warmup Iteration  17: 1039855.168 ops/s
# Warmup Iteration  18: 1041091.110 ops/s
# Warmup Iteration  19: 1043166.964 ops/s
# Warmup Iteration  20: 1041904.758 ops/s
# Warmup Iteration  21: 1039884.397 ops/s
# Warmup Iteration  22: 1038969.270 ops/s
# Warmup Iteration  23: 1041627.976 ops/s
# Warmup Iteration  24: 1040279.951 ops/s
# Warmup Iteration  25: 1040836.263 ops/s
# Warmup Iteration  26: 1036947.665 ops/s
# Warmup Iteration  27: 1042765.702 ops/s
# Warmup Iteration  28: 1043404.188 ops/s
# Warmup Iteration  29: 1032915.660 ops/s
# Warmup Iteration  30: 1042439.458 ops/s
Iteration   1: 1037892.779 ops/s
Iteration   2: 1040436.639 ops/s
Iteration   3: 1039256.642 ops/s
Iteration   4: 1036994.040 ops/s
Iteration   5: 1045622.964 ops/s
Iteration   6: 1038318.891 ops/s
Iteration   7: 1033598.742 ops/s
Iteration   8: 1045531.271 ops/s
Iteration   9: 1042008.178 ops/s
Iteration  10: 1035700.405 ops/s
Iteration  11: 1039494.539 ops/s
Iteration  12: 1046889.819 ops/s
Iteration  13: 1041405.411 ops/s
Iteration  14: 1039845.851 ops/s
Iteration  15: 1043565.903 ops/s
Iteration  16: 1040813.812 ops/s
Iteration  17: 1037261.317 ops/s
Iteration  18: 1045888.501 ops/s
Iteration  19: 1036632.089 ops/s
Iteration  20: 1040673.612 ops/s
Iteration  21: 1039773.707 ops/s
Iteration  22: 1041186.879 ops/s
Iteration  23: 1040032.859 ops/s
Iteration  24: 1041481.224 ops/s
Iteration  25: 1039280.187 ops/s
Iteration  26: 1040403.967 ops/s
Iteration  27: 1046541.495 ops/s
Iteration  28: 1043882.705 ops/s
Iteration  29: 1036052.093 ops/s
Iteration  30: 1032257.954 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList":
  1040290.816 ±(99.9%) 2465.808 ops/s [Average]
  (min, avg, max) = (1032257.954, 1040290.816, 1046889.819), stdev = 3690.705
  CI (99.9%): [1037825.008, 1042756.624] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt        Score      Error  Units
UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_emptyList  thrpt   30  1040290.816 ± 2465.808  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 626650.003 ops/s
# Warmup Iteration   2: 663273.251 ops/s
# Warmup Iteration   3: 874637.777 ops/s
# Warmup Iteration   4: 874149.018 ops/s
# Warmup Iteration   5: 868823.735 ops/s
# Warmup Iteration   6: 874415.859 ops/s
# Warmup Iteration   7: 873359.212 ops/s
# Warmup Iteration   8: 872753.012 ops/s
# Warmup Iteration   9: 871621.771 ops/s
# Warmup Iteration  10: 874935.890 ops/s
# Warmup Iteration  11: 724329.015 ops/s
# Warmup Iteration  12: 865667.141 ops/s
# Warmup Iteration  13: 862508.334 ops/s
# Warmup Iteration  14: 873797.594 ops/s
# Warmup Iteration  15: 871819.383 ops/s
# Warmup Iteration  16: 874407.260 ops/s
# Warmup Iteration  17: 924999.063 ops/s
# Warmup Iteration  18: 923306.294 ops/s
# Warmup Iteration  19: 925563.430 ops/s
# Warmup Iteration  20: 926946.268 ops/s
# Warmup Iteration  21: 924997.439 ops/s
# Warmup Iteration  22: 923491.117 ops/s
# Warmup Iteration  23: 925264.590 ops/s
# Warmup Iteration  24: 926504.880 ops/s
# Warmup Iteration  25: 925755.910 ops/s
# Warmup Iteration  26: 921093.454 ops/s
# Warmup Iteration  27: 920336.829 ops/s
# Warmup Iteration  28: 916199.791 ops/s
# Warmup Iteration  29: 925135.704 ops/s
# Warmup Iteration  30: 923695.201 ops/s
Iteration   1: 925460.570 ops/s
Iteration   2: 924723.160 ops/s
Iteration   3: 926385.224 ops/s
Iteration   4: 924950.399 ops/s
Iteration   5: 924763.541 ops/s
Iteration   6: 921659.127 ops/s
Iteration   7: 924310.787 ops/s
Iteration   8: 923292.205 ops/s
Iteration   9: 925034.118 ops/s
Iteration  10: 926722.897 ops/s
Iteration  11: 918863.383 ops/s
Iteration  12: 918051.821 ops/s
Iteration  13: 923710.729 ops/s
Iteration  14: 922214.314 ops/s
Iteration  15: 921452.132 ops/s
Iteration  16: 926075.585 ops/s
Iteration  17: 926915.117 ops/s
Iteration  18: 926805.642 ops/s
Iteration  19: 926916.071 ops/s
Iteration  20: 924211.680 ops/s
Iteration  21: 926367.547 ops/s
Iteration  22: 922313.467 ops/s
Iteration  23: 922874.486 ops/s
Iteration  24: 922613.435 ops/s
Iteration  25: 925240.139 ops/s
Iteration  26: 923966.761 ops/s
Iteration  27: 924556.298 ops/s
Iteration  28: 926979.304 ops/s
Iteration  29: 922440.984 ops/s
Iteration  30: 921525.469 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection":
  924046.546 ±(99.9%) 1549.581 ops/s [Average]
  (min, avg, max) = (918051.821, 924046.546, 926979.304), stdev = 2319.339
  CI (99.9%): [922496.966, 925596.127] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                        Mode  Cnt       Score      Error  Units
UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_non_empty_collection  thrpt   30  924046.546 ± 1549.581  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 169733385.503 ops/s
# Warmup Iteration   2: 297855885.658 ops/s
# Warmup Iteration   3: 273556010.625 ops/s
# Warmup Iteration   4: 311138180.370 ops/s
# Warmup Iteration   5: 313726334.652 ops/s
# Warmup Iteration   6: 316413817.816 ops/s
# Warmup Iteration   7: 316625587.840 ops/s
# Warmup Iteration   8: 314437212.528 ops/s
# Warmup Iteration   9: 315336036.061 ops/s
# Warmup Iteration  10: 313150086.141 ops/s
# Warmup Iteration  11: 316133186.000 ops/s
# Warmup Iteration  12: 316045473.835 ops/s
# Warmup Iteration  13: 317095005.760 ops/s
# Warmup Iteration  14: 316579268.564 ops/s
# Warmup Iteration  15: 317280439.490 ops/s
# Warmup Iteration  16: 316015266.103 ops/s
# Warmup Iteration  17: 312972961.841 ops/s
# Warmup Iteration  18: 314063164.581 ops/s
# Warmup Iteration  19: 316216151.459 ops/s
# Warmup Iteration  20: 314593713.150 ops/s
# Warmup Iteration  21: 315763617.792 ops/s
# Warmup Iteration  22: 315966594.301 ops/s
# Warmup Iteration  23: 315538837.352 ops/s
# Warmup Iteration  24: 312937606.044 ops/s
# Warmup Iteration  25: 314213599.801 ops/s
# Warmup Iteration  26: 314891004.494 ops/s
# Warmup Iteration  27: 315611517.775 ops/s
# Warmup Iteration  28: 313024445.753 ops/s
# Warmup Iteration  29: 315037930.528 ops/s
# Warmup Iteration  30: 314255862.228 ops/s
Iteration   1: 316403241.262 ops/s
Iteration   2: 313493339.009 ops/s
Iteration   3: 314232784.004 ops/s
Iteration   4: 313128651.189 ops/s
Iteration   5: 315695783.922 ops/s
Iteration   6: 314890420.290 ops/s
Iteration   7: 315323834.647 ops/s
Iteration   8: 316013547.982 ops/s
Iteration   9: 315480911.202 ops/s
Iteration  10: 315561963.591 ops/s
Iteration  11: 310363972.709 ops/s
Iteration  12: 315381758.775 ops/s
Iteration  13: 315172516.343 ops/s
Iteration  14: 312999416.060 ops/s
Iteration  15: 314355393.265 ops/s
Iteration  16: 314188463.000 ops/s
Iteration  17: 314689378.980 ops/s
Iteration  18: 314041804.456 ops/s
Iteration  19: 312927539.672 ops/s
Iteration  20: 314445550.898 ops/s
Iteration  21: 313086650.361 ops/s
Iteration  22: 313915862.677 ops/s
Iteration  23: 311415339.516 ops/s
Iteration  24: 313479146.872 ops/s
Iteration  25: 313710988.938 ops/s
Iteration  26: 309953815.691 ops/s
Iteration  27: 315837083.095 ops/s
Iteration  28: 313862637.870 ops/s
Iteration  29: 314485674.393 ops/s
Iteration  30: 315181740.593 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove":
  314123973.709 ±(99.9%) 1032509.518 ops/s [Average]
  (min, avg, max) = (309953815.691, 314123973.709, 316403241.262), stdev = 1545411.756
  CI (99.9%): [313091464.191, 315156483.226] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                       Mode  Cnt          Score         Error  Units
UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove  thrpt   30  314123973.709 ± 1032509.518  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 673699.060 ops/s
# Warmup Iteration   2: 798970.027 ops/s
# Warmup Iteration   3: 994426.143 ops/s
# Warmup Iteration   4: 989956.381 ops/s
# Warmup Iteration   5: 984835.815 ops/s
# Warmup Iteration   6: 991186.923 ops/s
# Warmup Iteration   7: 993308.591 ops/s
# Warmup Iteration   8: 995854.712 ops/s
# Warmup Iteration   9: 832581.721 ops/s
# Warmup Iteration  10: 995208.355 ops/s
# Warmup Iteration  11: 996143.181 ops/s
# Warmup Iteration  12: 997131.677 ops/s
# Warmup Iteration  13: 993709.933 ops/s
# Warmup Iteration  14: 993253.916 ops/s
# Warmup Iteration  15: 993550.517 ops/s
# Warmup Iteration  16: 995287.402 ops/s
# Warmup Iteration  17: 1057965.363 ops/s
# Warmup Iteration  18: 1056057.484 ops/s
# Warmup Iteration  19: 1057775.104 ops/s
# Warmup Iteration  20: 1050401.808 ops/s
# Warmup Iteration  21: 1058009.633 ops/s
# Warmup Iteration  22: 1056166.827 ops/s
# Warmup Iteration  23: 1057825.356 ops/s
# Warmup Iteration  24: 1056131.009 ops/s
# Warmup Iteration  25: 1057158.554 ops/s
# Warmup Iteration  26: 1056280.062 ops/s
# Warmup Iteration  27: 1050202.063 ops/s
# Warmup Iteration  28: 1053208.577 ops/s
# Warmup Iteration  29: 1056003.905 ops/s
# Warmup Iteration  30: 1057100.898 ops/s
Iteration   1: 1059496.281 ops/s
Iteration   2: 1056527.286 ops/s
Iteration   3: 1052821.635 ops/s
Iteration   4: 1057904.781 ops/s
Iteration   5: 1055607.083 ops/s
Iteration   6: 1053864.681 ops/s
Iteration   7: 1055763.768 ops/s
Iteration   8: 1053698.600 ops/s
Iteration   9: 1060314.215 ops/s
Iteration  10: 1053777.879 ops/s
Iteration  11: 1054393.506 ops/s
Iteration  12: 1059569.782 ops/s
Iteration  13: 1056398.067 ops/s
Iteration  14: 1057119.506 ops/s
Iteration  15: 1064586.942 ops/s
Iteration  16: 1056262.029 ops/s
Iteration  17: 1053999.357 ops/s
Iteration  18: 1060277.928 ops/s
Iteration  19: 1053936.377 ops/s
Iteration  20: 1055247.504 ops/s
Iteration  21: 1056599.086 ops/s
Iteration  22: 1051417.886 ops/s
Iteration  23: 1056335.626 ops/s
Iteration  24: 1058286.607 ops/s
Iteration  25: 1058340.201 ops/s
Iteration  26: 1060336.973 ops/s
Iteration  27: 1063346.966 ops/s
Iteration  28: 1050286.260 ops/s
Iteration  29: 1054233.300 ops/s
Iteration  30: 1058970.634 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next":
  1056657.358 ±(99.9%) 2198.815 ops/s [Average]
  (min, avg, max) = (1050286.260, 1056657.358, 1064586.942), stdev = 3291.083
  CI (99.9%): [1054458.543, 1058856.173] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                       Mode  Cnt        Score      Error  Units
UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next  thrpt   30  1056657.358 ± 2198.815  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 793445.461 ops/s
# Warmup Iteration   2: 1663551.750 ops/s
# Warmup Iteration   3: 1408952.795 ops/s
# Warmup Iteration   4: 1704047.230 ops/s
# Warmup Iteration   5: 1702483.119 ops/s
# Warmup Iteration   6: 1713968.192 ops/s
# Warmup Iteration   7: 1711007.308 ops/s
# Warmup Iteration   8: 1714085.184 ops/s
# Warmup Iteration   9: 1713072.535 ops/s
# Warmup Iteration  10: 1707710.792 ops/s
# Warmup Iteration  11: 1709327.206 ops/s
# Warmup Iteration  12: 1708214.908 ops/s
# Warmup Iteration  13: 1714700.906 ops/s
# Warmup Iteration  14: 1717766.582 ops/s
# Warmup Iteration  15: 1715330.635 ops/s
# Warmup Iteration  16: 1698047.583 ops/s
# Warmup Iteration  17: 1723785.347 ops/s
# Warmup Iteration  18: 1710206.012 ops/s
# Warmup Iteration  19: 1722479.693 ops/s
# Warmup Iteration  20: 1710573.293 ops/s
# Warmup Iteration  21: 1720809.479 ops/s
# Warmup Iteration  22: 1708422.244 ops/s
# Warmup Iteration  23: 1714151.127 ops/s
# Warmup Iteration  24: 1710808.547 ops/s
# Warmup Iteration  25: 1716474.598 ops/s
# Warmup Iteration  26: 1725798.834 ops/s
# Warmup Iteration  27: 1736965.183 ops/s
# Warmup Iteration  28: 1694203.072 ops/s
# Warmup Iteration  29: 1720053.418 ops/s
# Warmup Iteration  30: 1725702.214 ops/s
Iteration   1: 1721098.078 ops/s
Iteration   2: 1712223.244 ops/s
Iteration   3: 1711430.203 ops/s
Iteration   4: 1704902.454 ops/s
Iteration   5: 1731647.436 ops/s
Iteration   6: 1695500.820 ops/s
Iteration   7: 1702396.148 ops/s
Iteration   8: 1710252.652 ops/s
Iteration   9: 1700070.878 ops/s
Iteration  10: 1705352.904 ops/s
Iteration  11: 1716928.150 ops/s
Iteration  12: 1701835.810 ops/s
Iteration  13: 1718971.908 ops/s
Iteration  14: 1711877.302 ops/s
Iteration  15: 1722352.908 ops/s
Iteration  16: 1710912.739 ops/s
Iteration  17: 1701881.365 ops/s
Iteration  18: 1716680.345 ops/s
Iteration  19: 1694750.454 ops/s
Iteration  20: 1699684.639 ops/s
Iteration  21: 1708888.931 ops/s
Iteration  22: 1703315.644 ops/s
Iteration  23: 1714187.081 ops/s
Iteration  24: 1721514.446 ops/s
Iteration  25: 1733572.512 ops/s
Iteration  26: 1733322.586 ops/s
Iteration  27: 1708849.238 ops/s
Iteration  28: 1724251.570 ops/s
Iteration  29: 1719498.929 ops/s
Iteration  30: 1713337.916 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_makeString":
  1712382.976 ±(99.9%) 7068.159 ops/s [Average]
  (min, avg, max) = (1694750.454, 1712382.976, 1733572.512), stdev = 10579.289
  CI (99.9%): [1705314.817, 1719451.136] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_makeString  thrpt   30  1712382.976 ± 7068.159  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_newCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_newCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 169197175.894 ops/s
# Warmup Iteration   2: 299742152.374 ops/s
# Warmup Iteration   3: 276744687.554 ops/s
# Warmup Iteration   4: 313138065.784 ops/s
# Warmup Iteration   5: 314637258.448 ops/s
# Warmup Iteration   6: 312215730.986 ops/s
# Warmup Iteration   7: 312514894.972 ops/s
# Warmup Iteration   8: 310128860.608 ops/s
# Warmup Iteration   9: 315279050.018 ops/s
# Warmup Iteration  10: 314104962.383 ops/s
# Warmup Iteration  11: 311056709.476 ops/s
# Warmup Iteration  12: 312903030.457 ops/s
# Warmup Iteration  13: 311282455.059 ops/s
# Warmup Iteration  14: 313887490.303 ops/s
# Warmup Iteration  15: 314723210.969 ops/s
# Warmup Iteration  16: 313423960.227 ops/s
# Warmup Iteration  17: 313361518.139 ops/s
# Warmup Iteration  18: 311530368.299 ops/s
# Warmup Iteration  19: 313362822.464 ops/s
# Warmup Iteration  20: 313782345.417 ops/s
# Warmup Iteration  21: 313419376.624 ops/s
# Warmup Iteration  22: 315647714.459 ops/s
# Warmup Iteration  23: 311172920.113 ops/s
# Warmup Iteration  24: 312120770.012 ops/s
# Warmup Iteration  25: 311863909.307 ops/s
# Warmup Iteration  26: 312984287.838 ops/s
# Warmup Iteration  27: 310913250.836 ops/s
# Warmup Iteration  28: 313028840.490 ops/s
# Warmup Iteration  29: 313223621.773 ops/s
# Warmup Iteration  30: 314225246.317 ops/s
Iteration   1: 311583548.992 ops/s
Iteration   2: 312345962.877 ops/s
Iteration   3: 313538848.302 ops/s
Iteration   4: 312595409.621 ops/s
Iteration   5: 312908232.819 ops/s
Iteration   6: 309557243.454 ops/s
Iteration   7: 312912983.651 ops/s
Iteration   8: 313662297.942 ops/s
Iteration   9: 313978558.064 ops/s
Iteration  10: 313521209.316 ops/s
Iteration  11: 311225897.178 ops/s
Iteration  12: 313357072.131 ops/s
Iteration  13: 312797805.571 ops/s
Iteration  14: 314061271.964 ops/s
Iteration  15: 313400003.504 ops/s
Iteration  16: 313597958.077 ops/s
Iteration  17: 312846713.039 ops/s
Iteration  18: 312929283.118 ops/s
Iteration  19: 313387157.988 ops/s
Iteration  20: 313262458.649 ops/s
Iteration  21: 310827539.001 ops/s
Iteration  22: 310202647.656 ops/s
Iteration  23: 312868224.534 ops/s
Iteration  24: 311119682.954 ops/s
Iteration  25: 313807999.624 ops/s
Iteration  26: 311735757.898 ops/s
Iteration  27: 314643873.396 ops/s
Iteration  28: 312449129.876 ops/s
Iteration  29: 312261160.744 ops/s
Iteration  30: 313652163.219 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_newCollection":
  312701269.839 ±(99.9%) 797116.628 ops/s [Average]
  (min, avg, max) = (309557243.454, 312701269.839, 314643873.396), stdev = 1193086.733
  CI (99.9%): [311904153.211, 313498386.466] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt          Score        Error  Units
UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_newCollection  thrpt   30  312701269.839 ± 797116.628  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_newCollectionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_newCollectionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2863582.600 ops/s
# Warmup Iteration   2: 5094770.274 ops/s
# Warmup Iteration   3: 6120043.405 ops/s
# Warmup Iteration   4: 6168520.327 ops/s
# Warmup Iteration   5: 6120998.833 ops/s
# Warmup Iteration   6: 6081627.840 ops/s
# Warmup Iteration   7: 6144570.868 ops/s
# Warmup Iteration   8: 6107238.683 ops/s
# Warmup Iteration   9: 6079469.714 ops/s
# Warmup Iteration  10: 6113168.903 ops/s
# Warmup Iteration  11: 6145546.960 ops/s
# Warmup Iteration  12: 6173846.869 ops/s
# Warmup Iteration  13: 6145860.250 ops/s
# Warmup Iteration  14: 6067671.797 ops/s
# Warmup Iteration  15: 6091364.104 ops/s
# Warmup Iteration  16: 6123284.064 ops/s
# Warmup Iteration  17: 6090013.840 ops/s
# Warmup Iteration  18: 6085374.456 ops/s
# Warmup Iteration  19: 6104773.670 ops/s
# Warmup Iteration  20: 6106801.359 ops/s
# Warmup Iteration  21: 6099509.011 ops/s
# Warmup Iteration  22: 6119173.087 ops/s
# Warmup Iteration  23: 6097076.921 ops/s
# Warmup Iteration  24: 6059791.451 ops/s
# Warmup Iteration  25: 6048910.246 ops/s
# Warmup Iteration  26: 6125122.855 ops/s
# Warmup Iteration  27: 6138879.156 ops/s
# Warmup Iteration  28: 6068465.444 ops/s
# Warmup Iteration  29: 6102699.969 ops/s
# Warmup Iteration  30: 6036189.685 ops/s
Iteration   1: 6067396.820 ops/s
Iteration   2: 6164233.477 ops/s
Iteration   3: 6138897.494 ops/s
Iteration   4: 5991098.115 ops/s
Iteration   5: 6049990.143 ops/s
Iteration   6: 6090241.681 ops/s
Iteration   7: 6119624.363 ops/s
Iteration   8: 6103031.449 ops/s
Iteration   9: 6166988.677 ops/s
Iteration  10: 6048841.867 ops/s
Iteration  11: 6126178.701 ops/s
Iteration  12: 6114515.999 ops/s
Iteration  13: 6166371.451 ops/s
Iteration  14: 6110916.319 ops/s
Iteration  15: 5898707.475 ops/s
Iteration  16: 6139524.902 ops/s
Iteration  17: 6060521.274 ops/s
Iteration  18: 6098992.805 ops/s
Iteration  19: 6130580.192 ops/s
Iteration  20: 6084440.606 ops/s
Iteration  21: 6069901.067 ops/s
Iteration  22: 6125716.490 ops/s
Iteration  23: 6102659.641 ops/s
Iteration  24: 6129378.352 ops/s
Iteration  25: 6089452.471 ops/s
Iteration  26: 6144643.991 ops/s
Iteration  27: 6107717.132 ops/s
Iteration  28: 6049285.417 ops/s
Iteration  29: 6102242.747 ops/s
Iteration  30: 6093920.171 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_newCollectionWith":
  6096200.376 ±(99.9%) 36314.739 ops/s [Average]
  (min, avg, max) = (5898707.475, 6096200.376, 6166988.677), stdev = 54354.196
  CI (99.9%): [6059885.637, 6132515.115] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_newCollectionWith  thrpt   30  6096200.376 ± 36314.739  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1330574.687 ops/s
# Warmup Iteration   2: 2470379.047 ops/s
# Warmup Iteration   3: 2785206.296 ops/s
# Warmup Iteration   4: 2867602.272 ops/s
# Warmup Iteration   5: 2871681.314 ops/s
# Warmup Iteration   6: 2861508.503 ops/s
# Warmup Iteration   7: 2846413.425 ops/s
# Warmup Iteration   8: 2861846.809 ops/s
# Warmup Iteration   9: 2840104.687 ops/s
# Warmup Iteration  10: 2848288.196 ops/s
# Warmup Iteration  11: 2864571.967 ops/s
# Warmup Iteration  12: 2853102.249 ops/s
# Warmup Iteration  13: 2849562.683 ops/s
# Warmup Iteration  14: 2844031.861 ops/s
# Warmup Iteration  15: 2821313.249 ops/s
# Warmup Iteration  16: 2833412.089 ops/s
# Warmup Iteration  17: 2848150.221 ops/s
# Warmup Iteration  18: 2865773.515 ops/s
# Warmup Iteration  19: 2849121.294 ops/s
# Warmup Iteration  20: 2849590.960 ops/s
# Warmup Iteration  21: 2852950.140 ops/s
# Warmup Iteration  22: 2869523.230 ops/s
# Warmup Iteration  23: 2844736.904 ops/s
# Warmup Iteration  24: 2853175.647 ops/s
# Warmup Iteration  25: 2855132.853 ops/s
# Warmup Iteration  26: 2850278.959 ops/s
# Warmup Iteration  27: 2856450.222 ops/s
# Warmup Iteration  28: 2856782.246 ops/s
# Warmup Iteration  29: 2862880.255 ops/s
# Warmup Iteration  30: 2860496.856 ops/s
Iteration   1: 2849428.257 ops/s
Iteration   2: 2869852.911 ops/s
Iteration   3: 2864729.700 ops/s
Iteration   4: 2851210.997 ops/s
Iteration   5: 2845911.175 ops/s
Iteration   6: 2856322.662 ops/s
Iteration   7: 2851212.472 ops/s
Iteration   8: 2843912.620 ops/s
Iteration   9: 2842901.895 ops/s
Iteration  10: 2841168.913 ops/s
Iteration  11: 2865917.650 ops/s
Iteration  12: 2826932.863 ops/s
Iteration  13: 2850160.758 ops/s
Iteration  14: 2856321.151 ops/s
Iteration  15: 2876918.826 ops/s
Iteration  16: 2862609.817 ops/s
Iteration  17: 2857181.582 ops/s
Iteration  18: 2857538.487 ops/s
Iteration  19: 2861341.809 ops/s
Iteration  20: 2856309.066 ops/s
Iteration  21: 2850438.482 ops/s
Iteration  22: 2858913.476 ops/s
Iteration  23: 2855977.014 ops/s
Iteration  24: 2833269.460 ops/s
Iteration  25: 2855465.885 ops/s
Iteration  26: 2856341.270 ops/s
Iteration  27: 2859032.380 ops/s
Iteration  28: 2858978.176 ops/s
Iteration  29: 2857412.681 ops/s
Iteration  30: 2862292.370 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_noneSatisfy":
  2854533.494 ±(99.9%) 6839.868 ops/s [Average]
  (min, avg, max) = (2826932.863, 2854533.494, 2876918.826), stdev = 10237.592
  CI (99.9%): [2847693.626, 2861373.361] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_noneSatisfy  thrpt   30  2854533.494 ± 6839.868  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_notEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_notEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3452536.401 ops/s
# Warmup Iteration   2: 5802538.041 ops/s
# Warmup Iteration   3: 6925321.451 ops/s
# Warmup Iteration   4: 6883109.153 ops/s
# Warmup Iteration   5: 6898909.372 ops/s
# Warmup Iteration   6: 6895774.698 ops/s
# Warmup Iteration   7: 6855827.348 ops/s
# Warmup Iteration   8: 6889242.716 ops/s
# Warmup Iteration   9: 6931909.134 ops/s
# Warmup Iteration  10: 6829021.172 ops/s
# Warmup Iteration  11: 6901937.780 ops/s
# Warmup Iteration  12: 6893002.017 ops/s
# Warmup Iteration  13: 6850796.350 ops/s
# Warmup Iteration  14: 6920291.502 ops/s
# Warmup Iteration  15: 6907481.350 ops/s
# Warmup Iteration  16: 6879986.675 ops/s
# Warmup Iteration  17: 6867329.198 ops/s
# Warmup Iteration  18: 6908492.061 ops/s
# Warmup Iteration  19: 6889926.902 ops/s
# Warmup Iteration  20: 6918523.337 ops/s
# Warmup Iteration  21: 6918705.368 ops/s
# Warmup Iteration  22: 6846918.381 ops/s
# Warmup Iteration  23: 6930921.338 ops/s
# Warmup Iteration  24: 6913081.960 ops/s
# Warmup Iteration  25: 6923735.225 ops/s
# Warmup Iteration  26: 6913581.276 ops/s
# Warmup Iteration  27: 6896215.161 ops/s
# Warmup Iteration  28: 6906466.778 ops/s
# Warmup Iteration  29: 6911602.858 ops/s
# Warmup Iteration  30: 6864772.659 ops/s
Iteration   1: 6938351.099 ops/s
Iteration   2: 6898851.610 ops/s
Iteration   3: 6899560.607 ops/s
Iteration   4: 6968491.976 ops/s
Iteration   5: 6916240.217 ops/s
Iteration   6: 6875214.918 ops/s
Iteration   7: 6821669.412 ops/s
Iteration   8: 6925959.566 ops/s
Iteration   9: 6893558.501 ops/s
Iteration  10: 6886676.099 ops/s
Iteration  11: 6876642.153 ops/s
Iteration  12: 6885032.819 ops/s
Iteration  13: 6931398.026 ops/s
Iteration  14: 6912027.160 ops/s
Iteration  15: 6919392.883 ops/s
Iteration  16: 6815221.261 ops/s
Iteration  17: 6886362.444 ops/s
Iteration  18: 6903673.394 ops/s
Iteration  19: 6928819.880 ops/s
Iteration  20: 6928424.535 ops/s
Iteration  21: 6899227.916 ops/s
Iteration  22: 6849185.251 ops/s
Iteration  23: 6922316.586 ops/s
Iteration  24: 6943406.026 ops/s
Iteration  25: 6974345.652 ops/s
Iteration  26: 6930088.153 ops/s
Iteration  27: 6900664.892 ops/s
Iteration  28: 6917075.616 ops/s
Iteration  29: 6937197.115 ops/s
Iteration  30: 6876820.007 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_notEmpty":
  6905396.526 ±(99.9%) 24219.293 ops/s [Average]
  (min, avg, max) = (6815221.261, 6905396.526, 6974345.652), stdev = 36250.301
  CI (99.9%): [6881177.232, 6929615.819] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_notEmpty  thrpt   30  6905396.526 ± 24219.293  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_reduce$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_reduce

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1473248.810 ops/s
# Warmup Iteration   2: 3234733.037 ops/s
# Warmup Iteration   3: 2716274.372 ops/s
# Warmup Iteration   4: 3262720.364 ops/s
# Warmup Iteration   5: 3284843.216 ops/s
# Warmup Iteration   6: 3276775.476 ops/s
# Warmup Iteration   7: 3281419.445 ops/s
# Warmup Iteration   8: 3260708.092 ops/s
# Warmup Iteration   9: 3268828.206 ops/s
# Warmup Iteration  10: 3265538.013 ops/s
# Warmup Iteration  11: 3268963.786 ops/s
# Warmup Iteration  12: 3276136.851 ops/s
# Warmup Iteration  13: 3262077.382 ops/s
# Warmup Iteration  14: 3262857.297 ops/s
# Warmup Iteration  15: 3269492.541 ops/s
# Warmup Iteration  16: 3265143.089 ops/s
# Warmup Iteration  17: 3258691.512 ops/s
# Warmup Iteration  18: 3265358.504 ops/s
# Warmup Iteration  19: 3271865.472 ops/s
# Warmup Iteration  20: 3274168.486 ops/s
# Warmup Iteration  21: 3274206.489 ops/s
# Warmup Iteration  22: 3265551.457 ops/s
# Warmup Iteration  23: 3267260.264 ops/s
# Warmup Iteration  24: 3274680.287 ops/s
# Warmup Iteration  25: 3274991.984 ops/s
# Warmup Iteration  26: 3269922.830 ops/s
# Warmup Iteration  27: 3278917.934 ops/s
# Warmup Iteration  28: 3271838.162 ops/s
# Warmup Iteration  29: 3267063.416 ops/s
# Warmup Iteration  30: 3267246.274 ops/s
Iteration   1: 3261962.712 ops/s
Iteration   2: 3272519.569 ops/s
Iteration   3: 3273263.767 ops/s
Iteration   4: 3250564.215 ops/s
Iteration   5: 3273205.513 ops/s
Iteration   6: 3271533.555 ops/s
Iteration   7: 3270036.980 ops/s
Iteration   8: 3266594.896 ops/s
Iteration   9: 3278336.751 ops/s
Iteration  10: 3292787.601 ops/s
Iteration  11: 3261988.541 ops/s
Iteration  12: 3280425.913 ops/s
Iteration  13: 3241135.372 ops/s
Iteration  14: 3271772.975 ops/s
Iteration  15: 3277447.246 ops/s
Iteration  16: 3272262.390 ops/s
Iteration  17: 3263540.853 ops/s
Iteration  18: 3268633.773 ops/s
Iteration  19: 3274405.005 ops/s
Iteration  20: 3266706.013 ops/s
Iteration  21: 3273748.861 ops/s
Iteration  22: 3265759.024 ops/s
Iteration  23: 3269109.667 ops/s
Iteration  24: 3270796.504 ops/s
Iteration  25: 3248206.349 ops/s
Iteration  26: 3272531.727 ops/s
Iteration  27: 3269840.308 ops/s
Iteration  28: 3271849.684 ops/s
Iteration  29: 3265627.925 ops/s
Iteration  30: 3264735.050 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_reduce":
  3268710.958 ±(99.9%) 6483.811 ops/s [Average]
  (min, avg, max) = (3241135.372, 3268710.958, 3292787.601), stdev = 9704.664
  CI (99.9%): [3262227.147, 3275194.769] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_reduce  thrpt   30  3268710.958 ± 6483.811  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_reduceIfEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_reduceIfEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1193410.050 ops/s
# Warmup Iteration   2: 2508084.298 ops/s
# Warmup Iteration   3: 2190720.678 ops/s
# Warmup Iteration   4: 2536826.127 ops/s
# Warmup Iteration   5: 2540076.716 ops/s
# Warmup Iteration   6: 2539724.381 ops/s
# Warmup Iteration   7: 2558016.821 ops/s
# Warmup Iteration   8: 2565507.148 ops/s
# Warmup Iteration   9: 2564561.342 ops/s
# Warmup Iteration  10: 2565628.541 ops/s
# Warmup Iteration  11: 2558745.713 ops/s
# Warmup Iteration  12: 2569573.520 ops/s
# Warmup Iteration  13: 2559865.354 ops/s
# Warmup Iteration  14: 2571347.747 ops/s
# Warmup Iteration  15: 2567210.870 ops/s
# Warmup Iteration  16: 2574033.951 ops/s
# Warmup Iteration  17: 2543399.942 ops/s
# Warmup Iteration  18: 2535192.454 ops/s
# Warmup Iteration  19: 2547400.585 ops/s
# Warmup Iteration  20: 2554032.759 ops/s
# Warmup Iteration  21: 2544617.081 ops/s
# Warmup Iteration  22: 2545815.320 ops/s
# Warmup Iteration  23: 2546007.157 ops/s
# Warmup Iteration  24: 2551078.485 ops/s
# Warmup Iteration  25: 2551430.296 ops/s
# Warmup Iteration  26: 2555882.803 ops/s
# Warmup Iteration  27: 2549007.880 ops/s
# Warmup Iteration  28: 2558260.643 ops/s
# Warmup Iteration  29: 2550875.424 ops/s
# Warmup Iteration  30: 2557534.814 ops/s
Iteration   1: 2552546.998 ops/s
Iteration   2: 2556246.087 ops/s
Iteration   3: 2546928.849 ops/s
Iteration   4: 2537796.612 ops/s
Iteration   5: 2551557.060 ops/s
Iteration   6: 2547459.486 ops/s
Iteration   7: 2549856.992 ops/s
Iteration   8: 2549594.604 ops/s
Iteration   9: 2554124.899 ops/s
Iteration  10: 2556447.695 ops/s
Iteration  11: 2553961.102 ops/s
Iteration  12: 2554127.532 ops/s
Iteration  13: 2552663.523 ops/s
Iteration  14: 2549403.396 ops/s
Iteration  15: 2550929.017 ops/s
Iteration  16: 2561971.795 ops/s
Iteration  17: 2560642.330 ops/s
Iteration  18: 2555564.839 ops/s
Iteration  19: 2543081.851 ops/s
Iteration  20: 2543755.300 ops/s
Iteration  21: 2560200.611 ops/s
Iteration  22: 2560004.740 ops/s
Iteration  23: 2558656.546 ops/s
Iteration  24: 2560883.809 ops/s
Iteration  25: 2558293.263 ops/s
Iteration  26: 2539723.235 ops/s
Iteration  27: 2539168.458 ops/s
Iteration  28: 2553758.871 ops/s
Iteration  29: 2554090.278 ops/s
Iteration  30: 2543557.362 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_reduceIfEmpty":
  2551899.905 ±(99.9%) 4542.024 ops/s [Average]
  (min, avg, max) = (2537796.612, 2551899.905, 2561971.795), stdev = 6798.288
  CI (99.9%): [2547357.881, 2556441.929] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score      Error  Units
UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_reduceIfEmpty  thrpt   30  2551899.905 ± 4542.024  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 698554.385 ops/s
# Warmup Iteration   2: 762206.295 ops/s
# Warmup Iteration   3: 990103.247 ops/s
# Warmup Iteration   4: 987953.063 ops/s
# Warmup Iteration   5: 993054.302 ops/s
# Warmup Iteration   6: 981353.186 ops/s
# Warmup Iteration   7: 985433.230 ops/s
# Warmup Iteration   8: 990154.918 ops/s
# Warmup Iteration   9: 990644.879 ops/s
# Warmup Iteration  10: 860563.320 ops/s
# Warmup Iteration  11: 955970.623 ops/s
# Warmup Iteration  12: 992888.096 ops/s
# Warmup Iteration  13: 983707.870 ops/s
# Warmup Iteration  14: 984760.744 ops/s
# Warmup Iteration  15: 992308.546 ops/s
# Warmup Iteration  16: 996047.841 ops/s
# Warmup Iteration  17: 1058751.782 ops/s
# Warmup Iteration  18: 1030448.436 ops/s
# Warmup Iteration  19: 1049709.435 ops/s
# Warmup Iteration  20: 1038231.191 ops/s
# Warmup Iteration  21: 1044894.572 ops/s
# Warmup Iteration  22: 1044217.539 ops/s
# Warmup Iteration  23: 1047301.305 ops/s
# Warmup Iteration  24: 1044057.207 ops/s
# Warmup Iteration  25: 1043435.368 ops/s
# Warmup Iteration  26: 1047826.096 ops/s
# Warmup Iteration  27: 1047885.246 ops/s
# Warmup Iteration  28: 1042438.378 ops/s
# Warmup Iteration  29: 1040332.647 ops/s
# Warmup Iteration  30: 1047288.090 ops/s
Iteration   1: 1033069.617 ops/s
Iteration   2: 1045608.443 ops/s
Iteration   3: 1046070.734 ops/s
Iteration   4: 1044745.942 ops/s
Iteration   5: 1047190.176 ops/s
Iteration   6: 1044657.508 ops/s
Iteration   7: 1030519.316 ops/s
Iteration   8: 1050634.302 ops/s
Iteration   9: 1041313.777 ops/s
Iteration  10: 1046512.991 ops/s
Iteration  11: 1041714.510 ops/s
Iteration  12: 1043967.760 ops/s
Iteration  13: 1046540.641 ops/s
Iteration  14: 1046010.256 ops/s
Iteration  15: 1052251.932 ops/s
Iteration  16: 1044013.429 ops/s
Iteration  17: 1045092.446 ops/s
Iteration  18: 1051011.661 ops/s
Iteration  19: 1046021.000 ops/s
Iteration  20: 1041992.593 ops/s
Iteration  21: 1046996.797 ops/s
Iteration  22: 1044337.213 ops/s
Iteration  23: 1045642.125 ops/s
Iteration  24: 1043376.249 ops/s
Iteration  25: 1029242.992 ops/s
Iteration  26: 1044653.346 ops/s
Iteration  27: 1048336.845 ops/s
Iteration  28: 1047953.821 ops/s
Iteration  29: 1044826.175 ops/s
Iteration  30: 1043944.402 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows":
  1044274.967 ±(99.9%) 3470.083 ops/s [Average]
  (min, avg, max) = (1029242.992, 1044274.967, 1052251.932), stdev = 5193.858
  CI (99.9%): [1040804.883, 1047745.050] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score      Error  Units
UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_reduceOnEmptyThrows  thrpt   30  1044274.967 ± 3470.083  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5779838.328 ops/s
# Warmup Iteration   2: 10589735.502 ops/s
# Warmup Iteration   3: 10863858.420 ops/s
# Warmup Iteration   4: 11733295.684 ops/s
# Warmup Iteration   5: 11694409.695 ops/s
# Warmup Iteration   6: 11617299.244 ops/s
# Warmup Iteration   7: 11667947.249 ops/s
# Warmup Iteration   8: 11666664.173 ops/s
# Warmup Iteration   9: 11703450.029 ops/s
# Warmup Iteration  10: 11711853.508 ops/s
# Warmup Iteration  11: 11722260.966 ops/s
# Warmup Iteration  12: 11670474.372 ops/s
# Warmup Iteration  13: 11710515.616 ops/s
# Warmup Iteration  14: 11703220.107 ops/s
# Warmup Iteration  15: 11731274.667 ops/s
# Warmup Iteration  16: 11697793.860 ops/s
# Warmup Iteration  17: 11664151.675 ops/s
# Warmup Iteration  18: 11727013.165 ops/s
# Warmup Iteration  19: 11690853.561 ops/s
# Warmup Iteration  20: 11726313.350 ops/s
# Warmup Iteration  21: 11703200.282 ops/s
# Warmup Iteration  22: 11676908.983 ops/s
# Warmup Iteration  23: 11733426.482 ops/s
# Warmup Iteration  24: 11704673.877 ops/s
# Warmup Iteration  25: 11699259.557 ops/s
# Warmup Iteration  26: 11684953.969 ops/s
# Warmup Iteration  27: 11685585.647 ops/s
# Warmup Iteration  28: 11587851.724 ops/s
# Warmup Iteration  29: 11645098.296 ops/s
# Warmup Iteration  30: 11621806.572 ops/s
Iteration   1: 11671062.536 ops/s
Iteration   2: 11720308.998 ops/s
Iteration   3: 11685614.486 ops/s
Iteration   4: 11620336.965 ops/s
Iteration   5: 11680878.342 ops/s
Iteration   6: 11681162.571 ops/s
Iteration   7: 11701500.836 ops/s
Iteration   8: 11762712.128 ops/s
Iteration   9: 11783720.916 ops/s
Iteration  10: 11689228.278 ops/s
Iteration  11: 11619159.051 ops/s
Iteration  12: 11704137.515 ops/s
Iteration  13: 11675750.184 ops/s
Iteration  14: 11698985.689 ops/s
Iteration  15: 11684384.382 ops/s
Iteration  16: 11681698.239 ops/s
Iteration  17: 11720567.187 ops/s
Iteration  18: 11733674.406 ops/s
Iteration  19: 11692321.989 ops/s
Iteration  20: 11731957.607 ops/s
Iteration  21: 11736505.721 ops/s
Iteration  22: 11643335.892 ops/s
Iteration  23: 11642098.186 ops/s
Iteration  24: 11727272.697 ops/s
Iteration  25: 11723023.650 ops/s
Iteration  26: 11725837.119 ops/s
Iteration  27: 11642440.149 ops/s
Iteration  28: 11619345.863 ops/s
Iteration  29: 11601900.987 ops/s
Iteration  30: 11683288.996 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_reject":
  11689473.719 ±(99.9%) 29405.239 ops/s [Average]
  (min, avg, max) = (11601900.987, 11689473.719, 11783720.916), stdev = 44012.381
  CI (99.9%): [11660068.480, 11718878.958] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_reject  thrpt   30  11689473.719 ± 29405.239  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8246647.793 ops/s
# Warmup Iteration   2: 17173295.913 ops/s
# Warmup Iteration   3: 14776697.077 ops/s
# Warmup Iteration   4: 17630025.147 ops/s
# Warmup Iteration   5: 17632863.358 ops/s
# Warmup Iteration   6: 17675040.603 ops/s
# Warmup Iteration   7: 17646642.034 ops/s
# Warmup Iteration   8: 17632015.758 ops/s
# Warmup Iteration   9: 17647971.015 ops/s
# Warmup Iteration  10: 17648818.397 ops/s
# Warmup Iteration  11: 17584953.775 ops/s
# Warmup Iteration  12: 17664421.906 ops/s
# Warmup Iteration  13: 17683310.779 ops/s
# Warmup Iteration  14: 17646948.397 ops/s
# Warmup Iteration  15: 17656635.935 ops/s
# Warmup Iteration  16: 17640851.135 ops/s
# Warmup Iteration  17: 17622901.984 ops/s
# Warmup Iteration  18: 17660695.170 ops/s
# Warmup Iteration  19: 17639852.706 ops/s
# Warmup Iteration  20: 17622722.620 ops/s
# Warmup Iteration  21: 17633918.257 ops/s
# Warmup Iteration  22: 17646467.207 ops/s
# Warmup Iteration  23: 17530858.636 ops/s
# Warmup Iteration  24: 17570450.336 ops/s
# Warmup Iteration  25: 17622085.700 ops/s
# Warmup Iteration  26: 17627108.926 ops/s
# Warmup Iteration  27: 17634316.437 ops/s
# Warmup Iteration  28: 17662874.774 ops/s
# Warmup Iteration  29: 17626862.984 ops/s
# Warmup Iteration  30: 17699327.484 ops/s
Iteration   1: 17717870.834 ops/s
Iteration   2: 17685749.243 ops/s
Iteration   3: 17660996.844 ops/s
Iteration   4: 17629902.582 ops/s
Iteration   5: 17730501.591 ops/s
Iteration   6: 17677409.806 ops/s
Iteration   7: 17639801.737 ops/s
Iteration   8: 17687277.681 ops/s
Iteration   9: 17672620.124 ops/s
Iteration  10: 17647447.843 ops/s
Iteration  11: 17673859.743 ops/s
Iteration  12: 17660139.868 ops/s
Iteration  13: 17554279.793 ops/s
Iteration  14: 17627574.750 ops/s
Iteration  15: 17660368.034 ops/s
Iteration  16: 17718425.944 ops/s
Iteration  17: 17662385.738 ops/s
Iteration  18: 17703105.758 ops/s
Iteration  19: 17652271.723 ops/s
Iteration  20: 17627783.287 ops/s
Iteration  21: 17704205.589 ops/s
Iteration  22: 17692062.356 ops/s
Iteration  23: 17607784.312 ops/s
Iteration  24: 17682402.148 ops/s
Iteration  25: 17334854.266 ops/s
Iteration  26: 17696975.134 ops/s
Iteration  27: 17684765.848 ops/s
Iteration  28: 17630875.551 ops/s
Iteration  29: 17655078.106 ops/s
Iteration  30: 17723817.174 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_remove":
  17656753.114 ±(99.9%) 47889.316 ops/s [Average]
  (min, avg, max) = (17334854.266, 17656753.114, 17730501.591), stdev = 71678.479
  CI (99.9%): [17608863.798, 17704642.430] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_remove  thrpt   30  17656753.114 ± 47889.316  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 680227.733 ops/s
# Warmup Iteration   2: 795034.241 ops/s
# Warmup Iteration   3: 983877.061 ops/s
# Warmup Iteration   4: 975848.027 ops/s
# Warmup Iteration   5: 975305.807 ops/s
# Warmup Iteration   6: 977680.699 ops/s
# Warmup Iteration   7: 983481.569 ops/s
# Warmup Iteration   8: 979205.506 ops/s
# Warmup Iteration   9: 827468.237 ops/s
# Warmup Iteration  10: 982675.650 ops/s
# Warmup Iteration  11: 974456.970 ops/s
# Warmup Iteration  12: 982564.577 ops/s
# Warmup Iteration  13: 980743.974 ops/s
# Warmup Iteration  14: 978016.731 ops/s
# Warmup Iteration  15: 974311.724 ops/s
# Warmup Iteration  16: 980863.007 ops/s
# Warmup Iteration  17: 1039505.167 ops/s
# Warmup Iteration  18: 1042277.967 ops/s
# Warmup Iteration  19: 1039247.031 ops/s
# Warmup Iteration  20: 1041305.690 ops/s
# Warmup Iteration  21: 1039520.147 ops/s
# Warmup Iteration  22: 1041285.190 ops/s
# Warmup Iteration  23: 1039159.714 ops/s
# Warmup Iteration  24: 1040088.368 ops/s
# Warmup Iteration  25: 1041250.856 ops/s
# Warmup Iteration  26: 1039793.520 ops/s
# Warmup Iteration  27: 1041129.392 ops/s
# Warmup Iteration  28: 1040542.923 ops/s
# Warmup Iteration  29: 1041964.224 ops/s
# Warmup Iteration  30: 1042622.858 ops/s
Iteration   1: 1036415.678 ops/s
Iteration   2: 1042212.739 ops/s
Iteration   3: 1040098.241 ops/s
Iteration   4: 1039024.954 ops/s
Iteration   5: 1038059.989 ops/s
Iteration   6: 1044857.649 ops/s
Iteration   7: 1042870.806 ops/s
Iteration   8: 1041916.737 ops/s
Iteration   9: 1039773.020 ops/s
Iteration  10: 1040467.925 ops/s
Iteration  11: 1031326.994 ops/s
Iteration  12: 1039890.128 ops/s
Iteration  13: 1041847.029 ops/s
Iteration  14: 1038748.050 ops/s
Iteration  15: 1042529.807 ops/s
Iteration  16: 1035593.954 ops/s
Iteration  17: 1039419.799 ops/s
Iteration  18: 1038956.080 ops/s
Iteration  19: 1041439.780 ops/s
Iteration  20: 1037639.381 ops/s
Iteration  21: 1039497.489 ops/s
Iteration  22: 1039618.531 ops/s
Iteration  23: 1036010.435 ops/s
Iteration  24: 1040617.733 ops/s
Iteration  25: 1039285.136 ops/s
Iteration  26: 1042989.840 ops/s
Iteration  27: 1038370.162 ops/s
Iteration  28: 1037563.111 ops/s
Iteration  29: 1042077.402 ops/s
Iteration  30: 1041814.546 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_removeAll":
  1039697.771 ±(99.9%) 1810.490 ops/s [Average]
  (min, avg, max) = (1031326.994, 1039697.771, 1044857.649), stdev = 2709.857
  CI (99.9%): [1037887.281, 1041508.261] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_removeAll  thrpt   30  1039697.771 ± 1810.490  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_removeAll_iterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_removeAll_iterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 668868.007 ops/s
# Warmup Iteration   2: 817290.107 ops/s
# Warmup Iteration   3: 992148.398 ops/s
# Warmup Iteration   4: 994584.375 ops/s
# Warmup Iteration   5: 992355.186 ops/s
# Warmup Iteration   6: 994645.917 ops/s
# Warmup Iteration   7: 992667.317 ops/s
# Warmup Iteration   8: 967973.672 ops/s
# Warmup Iteration   9: 857282.959 ops/s
# Warmup Iteration  10: 991527.083 ops/s
# Warmup Iteration  11: 995134.529 ops/s
# Warmup Iteration  12: 993166.656 ops/s
# Warmup Iteration  13: 991517.697 ops/s
# Warmup Iteration  14: 990855.141 ops/s
# Warmup Iteration  15: 993180.544 ops/s
# Warmup Iteration  16: 993007.214 ops/s
# Warmup Iteration  17: 1056150.352 ops/s
# Warmup Iteration  18: 1052244.453 ops/s
# Warmup Iteration  19: 1046658.487 ops/s
# Warmup Iteration  20: 1048388.568 ops/s
# Warmup Iteration  21: 1052953.038 ops/s
# Warmup Iteration  22: 1054868.462 ops/s
# Warmup Iteration  23: 1056371.164 ops/s
# Warmup Iteration  24: 1050225.864 ops/s
# Warmup Iteration  25: 1052553.487 ops/s
# Warmup Iteration  26: 1054126.242 ops/s
# Warmup Iteration  27: 1051548.393 ops/s
# Warmup Iteration  28: 1052029.057 ops/s
# Warmup Iteration  29: 1055134.613 ops/s
# Warmup Iteration  30: 1051294.702 ops/s
Iteration   1: 1052894.279 ops/s
Iteration   2: 1050491.998 ops/s
Iteration   3: 1052471.628 ops/s
Iteration   4: 1048643.930 ops/s
Iteration   5: 1056131.604 ops/s
Iteration   6: 1054101.296 ops/s
Iteration   7: 1052215.030 ops/s
Iteration   8: 1055281.417 ops/s
Iteration   9: 1049739.375 ops/s
Iteration  10: 1053387.779 ops/s
Iteration  11: 1050850.136 ops/s
Iteration  12: 1054148.702 ops/s
Iteration  13: 1055643.561 ops/s
Iteration  14: 1053461.066 ops/s
Iteration  15: 1054357.405 ops/s
Iteration  16: 1058169.968 ops/s
Iteration  17: 1053198.979 ops/s
Iteration  18: 1058931.710 ops/s
Iteration  19: 1052843.620 ops/s
Iteration  20: 1051750.676 ops/s
Iteration  21: 1037344.558 ops/s
Iteration  22: 1052875.161 ops/s
Iteration  23: 1051370.084 ops/s
Iteration  24: 1055084.924 ops/s
Iteration  25: 1044931.634 ops/s
Iteration  26: 1052340.922 ops/s
Iteration  27: 1052162.057 ops/s
Iteration  28: 1052732.702 ops/s
Iteration  29: 1056330.235 ops/s
Iteration  30: 1050845.519 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_removeAll_iterable":
  1052491.065 ±(99.9%) 2655.356 ops/s [Average]
  (min, avg, max) = (1037344.558, 1052491.065, 1058931.710), stdev = 3974.412
  CI (99.9%): [1049835.709, 1055146.421] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score      Error  Units
UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_removeAll_iterable  thrpt   30  1052491.065 ± 2655.356  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 686176.997 ops/s
# Warmup Iteration   2: 799775.141 ops/s
# Warmup Iteration   3: 987071.458 ops/s
# Warmup Iteration   4: 982402.277 ops/s
# Warmup Iteration   5: 986279.403 ops/s
# Warmup Iteration   6: 990125.989 ops/s
# Warmup Iteration   7: 986245.626 ops/s
# Warmup Iteration   8: 983618.286 ops/s
# Warmup Iteration   9: 828450.714 ops/s
# Warmup Iteration  10: 987052.413 ops/s
# Warmup Iteration  11: 987342.550 ops/s
# Warmup Iteration  12: 987198.922 ops/s
# Warmup Iteration  13: 987588.945 ops/s
# Warmup Iteration  14: 985539.254 ops/s
# Warmup Iteration  15: 987246.244 ops/s
# Warmup Iteration  16: 985802.935 ops/s
# Warmup Iteration  17: 1044464.688 ops/s
# Warmup Iteration  18: 1043365.777 ops/s
# Warmup Iteration  19: 1051532.606 ops/s
# Warmup Iteration  20: 1050017.287 ops/s
# Warmup Iteration  21: 1049898.140 ops/s
# Warmup Iteration  22: 1051322.851 ops/s
# Warmup Iteration  23: 1046667.411 ops/s
# Warmup Iteration  24: 1044780.675 ops/s
# Warmup Iteration  25: 1049611.952 ops/s
# Warmup Iteration  26: 1046934.373 ops/s
# Warmup Iteration  27: 1047800.768 ops/s
# Warmup Iteration  28: 1048032.339 ops/s
# Warmup Iteration  29: 1049536.067 ops/s
# Warmup Iteration  30: 1045468.508 ops/s
Iteration   1: 1047896.976 ops/s
Iteration   2: 1050570.354 ops/s
Iteration   3: 1054337.902 ops/s
Iteration   4: 1046143.889 ops/s
Iteration   5: 1049129.564 ops/s
Iteration   6: 1051182.675 ops/s
Iteration   7: 1046643.064 ops/s
Iteration   8: 1047523.507 ops/s
Iteration   9: 1046853.792 ops/s
Iteration  10: 1049436.599 ops/s
Iteration  11: 1047526.847 ops/s
Iteration  12: 1052442.948 ops/s
Iteration  13: 1050326.638 ops/s
Iteration  14: 1052056.400 ops/s
Iteration  15: 1050243.444 ops/s
Iteration  16: 1046923.978 ops/s
Iteration  17: 1047270.991 ops/s
Iteration  18: 1051493.857 ops/s
Iteration  19: 1049728.759 ops/s
Iteration  20: 1054179.603 ops/s
Iteration  21: 1050728.079 ops/s
Iteration  22: 1049361.856 ops/s
Iteration  23: 1049125.626 ops/s
Iteration  24: 1049141.145 ops/s
Iteration  25: 1048624.680 ops/s
Iteration  26: 1049584.276 ops/s
Iteration  27: 1052559.734 ops/s
Iteration  28: 1045504.631 ops/s
Iteration  29: 1049245.039 ops/s
Iteration  30: 1051536.971 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_retainAll":
  1049577.461 ±(99.9%) 1520.563 ops/s [Average]
  (min, avg, max) = (1045504.631, 1049577.461, 1054337.902), stdev = 2275.907
  CI (99.9%): [1048056.898, 1051098.023] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_retainAll  thrpt   30  1049577.461 ± 1520.563  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_retainAll_iterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_retainAll_iterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 667223.698 ops/s
# Warmup Iteration   2: 813476.683 ops/s
# Warmup Iteration   3: 989770.979 ops/s
# Warmup Iteration   4: 989218.959 ops/s
# Warmup Iteration   5: 988388.034 ops/s
# Warmup Iteration   6: 987849.429 ops/s
# Warmup Iteration   7: 989490.376 ops/s
# Warmup Iteration   8: 971934.972 ops/s
# Warmup Iteration   9: 852967.062 ops/s
# Warmup Iteration  10: 987580.526 ops/s
# Warmup Iteration  11: 987399.152 ops/s
# Warmup Iteration  12: 989289.040 ops/s
# Warmup Iteration  13: 987263.839 ops/s
# Warmup Iteration  14: 989726.896 ops/s
# Warmup Iteration  15: 988434.578 ops/s
# Warmup Iteration  16: 978585.187 ops/s
# Warmup Iteration  17: 1049792.936 ops/s
# Warmup Iteration  18: 1050476.420 ops/s
# Warmup Iteration  19: 1046768.632 ops/s
# Warmup Iteration  20: 1049043.324 ops/s
# Warmup Iteration  21: 1048520.879 ops/s
# Warmup Iteration  22: 1040340.103 ops/s
# Warmup Iteration  23: 1041117.277 ops/s
# Warmup Iteration  24: 1046806.900 ops/s
# Warmup Iteration  25: 1047421.206 ops/s
# Warmup Iteration  26: 1046865.962 ops/s
# Warmup Iteration  27: 1046425.607 ops/s
# Warmup Iteration  28: 1048749.399 ops/s
# Warmup Iteration  29: 1048568.738 ops/s
# Warmup Iteration  30: 1049102.116 ops/s
Iteration   1: 1048189.108 ops/s
Iteration   2: 1045567.518 ops/s
Iteration   3: 1048814.262 ops/s
Iteration   4: 1043085.643 ops/s
Iteration   5: 1045475.531 ops/s
Iteration   6: 1052309.395 ops/s
Iteration   7: 1051791.158 ops/s
Iteration   8: 1048199.752 ops/s
Iteration   9: 1051443.563 ops/s
Iteration  10: 1044608.820 ops/s
Iteration  11: 1045021.964 ops/s
Iteration  12: 1050744.703 ops/s
Iteration  13: 1051162.808 ops/s
Iteration  14: 1054736.973 ops/s
Iteration  15: 1039870.092 ops/s
Iteration  16: 1047605.644 ops/s
Iteration  17: 1046456.350 ops/s
Iteration  18: 1049025.030 ops/s
Iteration  19: 1048392.726 ops/s
Iteration  20: 1045762.636 ops/s
Iteration  21: 1046760.855 ops/s
Iteration  22: 1053915.942 ops/s
Iteration  23: 1046525.798 ops/s
Iteration  24: 1044964.310 ops/s
Iteration  25: 1050878.824 ops/s
Iteration  26: 1046565.298 ops/s
Iteration  27: 1051347.784 ops/s
Iteration  28: 1048824.181 ops/s
Iteration  29: 1042050.351 ops/s
Iteration  30: 1049757.378 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_retainAll_iterable":
  1047995.147 ±(99.9%) 2316.936 ops/s [Average]
  (min, avg, max) = (1039870.092, 1047995.147, 1054736.973), stdev = 3467.881
  CI (99.9%): [1045678.211, 1050312.082] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score      Error  Units
UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_retainAll_iterable  thrpt   30  1047995.147 ± 2316.936  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6750297.678 ops/s
# Warmup Iteration   2: 12344857.602 ops/s
# Warmup Iteration   3: 13247428.201 ops/s
# Warmup Iteration   4: 13860427.539 ops/s
# Warmup Iteration   5: 13835900.702 ops/s
# Warmup Iteration   6: 13874110.264 ops/s
# Warmup Iteration   7: 13917445.636 ops/s
# Warmup Iteration   8: 13958294.876 ops/s
# Warmup Iteration   9: 13813985.965 ops/s
# Warmup Iteration  10: 13931302.775 ops/s
# Warmup Iteration  11: 13822531.052 ops/s
# Warmup Iteration  12: 13847878.391 ops/s
# Warmup Iteration  13: 13937962.693 ops/s
# Warmup Iteration  14: 13941968.870 ops/s
# Warmup Iteration  15: 13921543.075 ops/s
# Warmup Iteration  16: 13893327.195 ops/s
# Warmup Iteration  17: 13844053.843 ops/s
# Warmup Iteration  18: 13924646.498 ops/s
# Warmup Iteration  19: 13821035.814 ops/s
# Warmup Iteration  20: 13849659.011 ops/s
# Warmup Iteration  21: 13852448.270 ops/s
# Warmup Iteration  22: 13915986.179 ops/s
# Warmup Iteration  23: 13940011.865 ops/s
# Warmup Iteration  24: 13932513.138 ops/s
# Warmup Iteration  25: 13920691.644 ops/s
# Warmup Iteration  26: 13799473.492 ops/s
# Warmup Iteration  27: 13852843.354 ops/s
# Warmup Iteration  28: 13805653.234 ops/s
# Warmup Iteration  29: 13915711.136 ops/s
# Warmup Iteration  30: 13892183.087 ops/s
Iteration   1: 13827203.309 ops/s
Iteration   2: 13847821.601 ops/s
Iteration   3: 13853149.872 ops/s
Iteration   4: 13839473.874 ops/s
Iteration   5: 13846562.994 ops/s
Iteration   6: 13864157.895 ops/s
Iteration   7: 13864523.778 ops/s
Iteration   8: 13790466.855 ops/s
Iteration   9: 13867566.147 ops/s
Iteration  10: 13956032.990 ops/s
Iteration  11: 13782607.547 ops/s
Iteration  12: 13862094.875 ops/s
Iteration  13: 13909640.018 ops/s
Iteration  14: 13895884.881 ops/s
Iteration  15: 13780892.598 ops/s
Iteration  16: 13858301.504 ops/s
Iteration  17: 13889901.885 ops/s
Iteration  18: 13868533.131 ops/s
Iteration  19: 13825178.377 ops/s
Iteration  20: 13934600.694 ops/s
Iteration  21: 13918734.641 ops/s
Iteration  22: 13735113.416 ops/s
Iteration  23: 13892131.707 ops/s
Iteration  24: 13921865.465 ops/s
Iteration  25: 13866439.021 ops/s
Iteration  26: 13886235.762 ops/s
Iteration  27: 13936747.273 ops/s
Iteration  28: 13927117.558 ops/s
Iteration  29: 13890710.750 ops/s
Iteration  30: 13856560.981 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_select":
  13866541.713 ±(99.9%) 33858.373 ops/s [Average]
  (min, avg, max) = (13735113.416, 13866541.713, 13956032.990), stdev = 50677.622
  CI (99.9%): [13832683.341, 13900400.086] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_select  thrpt   30  13866541.713 ± 33858.373  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2625169.507 ops/s
# Warmup Iteration   2: 4424051.218 ops/s
# Warmup Iteration   3: 5213045.153 ops/s
# Warmup Iteration   4: 5166617.989 ops/s
# Warmup Iteration   5: 5246970.345 ops/s
# Warmup Iteration   6: 5190240.672 ops/s
# Warmup Iteration   7: 5260399.787 ops/s
# Warmup Iteration   8: 5225260.100 ops/s
# Warmup Iteration   9: 5216888.490 ops/s
# Warmup Iteration  10: 5208320.325 ops/s
# Warmup Iteration  11: 5201882.803 ops/s
# Warmup Iteration  12: 5206167.451 ops/s
# Warmup Iteration  13: 5182091.249 ops/s
# Warmup Iteration  14: 5198191.903 ops/s
# Warmup Iteration  15: 5256027.011 ops/s
# Warmup Iteration  16: 5218204.520 ops/s
# Warmup Iteration  17: 5190330.594 ops/s
# Warmup Iteration  18: 5190235.343 ops/s
# Warmup Iteration  19: 5232074.152 ops/s
# Warmup Iteration  20: 5232490.029 ops/s
# Warmup Iteration  21: 5211797.935 ops/s
# Warmup Iteration  22: 5237095.442 ops/s
# Warmup Iteration  23: 5204692.391 ops/s
# Warmup Iteration  24: 5207237.706 ops/s
# Warmup Iteration  25: 5242713.872 ops/s
# Warmup Iteration  26: 5201577.036 ops/s
# Warmup Iteration  27: 5258178.724 ops/s
# Warmup Iteration  28: 5192729.431 ops/s
# Warmup Iteration  29: 5250557.799 ops/s
# Warmup Iteration  30: 5210557.714 ops/s
Iteration   1: 5188086.032 ops/s
Iteration   2: 5248832.283 ops/s
Iteration   3: 5201523.082 ops/s
Iteration   4: 5216088.594 ops/s
Iteration   5: 5214690.006 ops/s
Iteration   6: 5215239.777 ops/s
Iteration   7: 5167672.191 ops/s
Iteration   8: 5228263.961 ops/s
Iteration   9: 5214226.255 ops/s
Iteration  10: 5264533.765 ops/s
Iteration  11: 5197517.808 ops/s
Iteration  12: 5222283.157 ops/s
Iteration  13: 5234170.133 ops/s
Iteration  14: 5173952.156 ops/s
Iteration  15: 5228765.524 ops/s
Iteration  16: 5264407.559 ops/s
Iteration  17: 5260084.145 ops/s
Iteration  18: 5238154.529 ops/s
Iteration  19: 5231501.889 ops/s
Iteration  20: 5273728.286 ops/s
Iteration  21: 5254272.157 ops/s
Iteration  22: 5265023.324 ops/s
Iteration  23: 5273642.579 ops/s
Iteration  24: 5143973.777 ops/s
Iteration  25: 5207055.371 ops/s
Iteration  26: 5240989.568 ops/s
Iteration  27: 5182344.227 ops/s
Iteration  28: 5239310.956 ops/s
Iteration  29: 5226677.949 ops/s
Iteration  30: 5203358.567 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_size":
  5224012.320 ±(99.9%) 21848.651 ops/s [Average]
  (min, avg, max) = (5143973.777, 5224012.320, 5273728.286), stdev = 32702.035
  CI (99.9%): [5202163.669, 5245860.971] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_size  thrpt   30  5224012.320 ± 21848.651  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_testEquals$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_testEquals

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 170634944.982 ops/s
# Warmup Iteration   2: 298374078.470 ops/s
# Warmup Iteration   3: 278732590.919 ops/s
# Warmup Iteration   4: 316307030.999 ops/s
# Warmup Iteration   5: 315823882.825 ops/s
# Warmup Iteration   6: 315907281.585 ops/s
# Warmup Iteration   7: 316148285.029 ops/s
# Warmup Iteration   8: 315721898.256 ops/s
# Warmup Iteration   9: 315216755.768 ops/s
# Warmup Iteration  10: 316199874.591 ops/s
# Warmup Iteration  11: 315445725.636 ops/s
# Warmup Iteration  12: 316606141.857 ops/s
# Warmup Iteration  13: 315914381.581 ops/s
# Warmup Iteration  14: 315774169.552 ops/s
# Warmup Iteration  15: 314610195.571 ops/s
# Warmup Iteration  16: 316082969.373 ops/s
# Warmup Iteration  17: 317199444.961 ops/s
# Warmup Iteration  18: 313986336.242 ops/s
# Warmup Iteration  19: 316431090.676 ops/s
# Warmup Iteration  20: 315251674.710 ops/s
# Warmup Iteration  21: 314714251.856 ops/s
# Warmup Iteration  22: 316517284.976 ops/s
# Warmup Iteration  23: 314195976.549 ops/s
# Warmup Iteration  24: 316167580.822 ops/s
# Warmup Iteration  25: 314690187.958 ops/s
# Warmup Iteration  26: 314831764.318 ops/s
# Warmup Iteration  27: 315921082.032 ops/s
# Warmup Iteration  28: 314869640.023 ops/s
# Warmup Iteration  29: 316514472.762 ops/s
# Warmup Iteration  30: 314231447.695 ops/s
Iteration   1: 313712073.216 ops/s
Iteration   2: 313192930.961 ops/s
Iteration   3: 314196139.507 ops/s
Iteration   4: 314569613.714 ops/s
Iteration   5: 315331639.059 ops/s
Iteration   6: 314036779.098 ops/s
Iteration   7: 314172848.958 ops/s
Iteration   8: 315709194.534 ops/s
Iteration   9: 315754110.562 ops/s
Iteration  10: 313482354.918 ops/s
Iteration  11: 315380582.931 ops/s
Iteration  12: 314176704.234 ops/s
Iteration  13: 315758632.759 ops/s
Iteration  14: 316148716.363 ops/s
Iteration  15: 315409276.835 ops/s
Iteration  16: 314773038.991 ops/s
Iteration  17: 313930776.772 ops/s
Iteration  18: 315950714.815 ops/s
Iteration  19: 314945136.073 ops/s
Iteration  20: 313715973.220 ops/s
Iteration  21: 314418550.161 ops/s
Iteration  22: 313019432.012 ops/s
Iteration  23: 314112534.002 ops/s
Iteration  24: 309843349.804 ops/s
Iteration  25: 314294130.152 ops/s
Iteration  26: 315168525.600 ops/s
Iteration  27: 314585815.892 ops/s
Iteration  28: 314582331.931 ops/s
Iteration  29: 314760961.713 ops/s
Iteration  30: 314163994.183 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_testEquals":
  314443228.766 ±(99.9%) 798815.246 ops/s [Average]
  (min, avg, max) = (309843349.804, 314443228.766, 316148716.363), stdev = 1195629.144
  CI (99.9%): [313644413.520, 315242044.011] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt          Score        Error  Units
UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_testEquals  thrpt   30  314443228.766 ± 798815.246  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_testHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_testHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 169576477.766 ops/s
# Warmup Iteration   2: 298414772.427 ops/s
# Warmup Iteration   3: 275960960.824 ops/s
# Warmup Iteration   4: 313415334.232 ops/s
# Warmup Iteration   5: 313262020.878 ops/s
# Warmup Iteration   6: 314035663.069 ops/s
# Warmup Iteration   7: 313869799.955 ops/s
# Warmup Iteration   8: 313103194.267 ops/s
# Warmup Iteration   9: 314735323.795 ops/s
# Warmup Iteration  10: 313490870.947 ops/s
# Warmup Iteration  11: 313827162.753 ops/s
# Warmup Iteration  12: 313151897.672 ops/s
# Warmup Iteration  13: 313694054.314 ops/s
# Warmup Iteration  14: 313418745.311 ops/s
# Warmup Iteration  15: 314107688.114 ops/s
# Warmup Iteration  16: 313372173.225 ops/s
# Warmup Iteration  17: 313198067.905 ops/s
# Warmup Iteration  18: 313986957.672 ops/s
# Warmup Iteration  19: 313295600.623 ops/s
# Warmup Iteration  20: 310641640.794 ops/s
# Warmup Iteration  21: 312442320.835 ops/s
# Warmup Iteration  22: 313727423.447 ops/s
# Warmup Iteration  23: 309888234.942 ops/s
# Warmup Iteration  24: 312011978.175 ops/s
# Warmup Iteration  25: 314241050.084 ops/s
# Warmup Iteration  26: 313073568.534 ops/s
# Warmup Iteration  27: 312608612.582 ops/s
# Warmup Iteration  28: 312988380.790 ops/s
# Warmup Iteration  29: 313941559.311 ops/s
# Warmup Iteration  30: 313468491.479 ops/s
Iteration   1: 314856290.859 ops/s
Iteration   2: 314342184.531 ops/s
Iteration   3: 313835755.308 ops/s
Iteration   4: 311485034.060 ops/s
Iteration   5: 313837671.684 ops/s
Iteration   6: 314992837.644 ops/s
Iteration   7: 316242013.712 ops/s
Iteration   8: 314519192.981 ops/s
Iteration   9: 312674423.960 ops/s
Iteration  10: 314297119.659 ops/s
Iteration  11: 314470210.969 ops/s
Iteration  12: 315023130.128 ops/s
Iteration  13: 313782241.845 ops/s
Iteration  14: 313934666.313 ops/s
Iteration  15: 313466073.841 ops/s
Iteration  16: 313506961.454 ops/s
Iteration  17: 315029884.125 ops/s
Iteration  18: 313423951.840 ops/s
Iteration  19: 313306976.676 ops/s
Iteration  20: 312724663.632 ops/s
Iteration  21: 313941954.796 ops/s
Iteration  22: 312508421.442 ops/s
Iteration  23: 313088336.918 ops/s
Iteration  24: 314197700.041 ops/s
Iteration  25: 313270731.303 ops/s
Iteration  26: 312610096.798 ops/s
Iteration  27: 314636339.824 ops/s
Iteration  28: 314660037.186 ops/s
Iteration  29: 314785019.391 ops/s
Iteration  30: 313940984.099 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_testHashCode":
  313913030.234 ±(99.9%) 650587.080 ops/s [Average]
  (min, avg, max) = (311485034.060, 313913030.234, 316242013.712), stdev = 973768.187
  CI (99.9%): [313262443.154, 314563617.314] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt          Score        Error  Units
UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_testHashCode  thrpt   30  313913030.234 ± 650587.080  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 170994217.339 ops/s
# Warmup Iteration   2: 298889844.436 ops/s
# Warmup Iteration   3: 279734390.643 ops/s
# Warmup Iteration   4: 313800089.995 ops/s
# Warmup Iteration   5: 314974095.917 ops/s
# Warmup Iteration   6: 313131426.182 ops/s
# Warmup Iteration   7: 312691531.286 ops/s
# Warmup Iteration   8: 315777731.407 ops/s
# Warmup Iteration   9: 313354534.899 ops/s
# Warmup Iteration  10: 314541785.971 ops/s
# Warmup Iteration  11: 314583989.454 ops/s
# Warmup Iteration  12: 313866787.974 ops/s
# Warmup Iteration  13: 314768843.473 ops/s
# Warmup Iteration  14: 316049795.286 ops/s
# Warmup Iteration  15: 314606868.662 ops/s
# Warmup Iteration  16: 314625211.668 ops/s
# Warmup Iteration  17: 314487062.978 ops/s
# Warmup Iteration  18: 313629284.438 ops/s
# Warmup Iteration  19: 314350350.232 ops/s
# Warmup Iteration  20: 312845888.638 ops/s
# Warmup Iteration  21: 314075473.855 ops/s
# Warmup Iteration  22: 312300996.731 ops/s
# Warmup Iteration  23: 313707852.256 ops/s
# Warmup Iteration  24: 315561603.177 ops/s
# Warmup Iteration  25: 315770163.223 ops/s
# Warmup Iteration  26: 315751205.877 ops/s
# Warmup Iteration  27: 313876455.437 ops/s
# Warmup Iteration  28: 313838688.147 ops/s
# Warmup Iteration  29: 312704158.841 ops/s
# Warmup Iteration  30: 315512457.855 ops/s
Iteration   1: 314882108.613 ops/s
Iteration   2: 314227451.696 ops/s
Iteration   3: 313387439.482 ops/s
Iteration   4: 312956126.461 ops/s
Iteration   5: 315059621.521 ops/s
Iteration   6: 314167642.185 ops/s
Iteration   7: 313514788.396 ops/s
Iteration   8: 314041109.150 ops/s
Iteration   9: 314217154.323 ops/s
Iteration  10: 315334754.825 ops/s
Iteration  11: 311505766.833 ops/s
Iteration  12: 312602058.976 ops/s
Iteration  13: 312761156.401 ops/s
Iteration  14: 315141101.125 ops/s
Iteration  15: 313921002.199 ops/s
Iteration  16: 313663941.774 ops/s
Iteration  17: 313823728.931 ops/s
Iteration  18: 312916712.237 ops/s
Iteration  19: 315152510.281 ops/s
Iteration  20: 313007441.376 ops/s
Iteration  21: 313815146.950 ops/s
Iteration  22: 313527230.031 ops/s
Iteration  23: 307437083.494 ops/s
Iteration  24: 313682830.710 ops/s
Iteration  25: 312816373.049 ops/s
Iteration  26: 314456165.612 ops/s
Iteration  27: 313757738.348 ops/s
Iteration  28: 312933737.988 ops/s
Iteration  29: 313500545.078 ops/s
Iteration  30: 315308920.658 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_testToString":
  313583979.623 ±(99.9%) 986038.232 ops/s [Average]
  (min, avg, max) = (307437083.494, 313583979.623, 315334754.825), stdev = 1475855.718
  CI (99.9%): [312597941.392, 314570017.855] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt          Score        Error  Units
UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_testToString  thrpt   30  313583979.623 ± 986038.232  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1934154.450 ops/s
# Warmup Iteration   2: 4017355.721 ops/s
# Warmup Iteration   3: 3799513.738 ops/s
# Warmup Iteration   4: 4309265.646 ops/s
# Warmup Iteration   5: 4322845.845 ops/s
# Warmup Iteration   6: 4305157.187 ops/s
# Warmup Iteration   7: 4318151.126 ops/s
# Warmup Iteration   8: 4311772.743 ops/s
# Warmup Iteration   9: 4299769.149 ops/s
# Warmup Iteration  10: 4328900.648 ops/s
# Warmup Iteration  11: 4332873.236 ops/s
# Warmup Iteration  12: 4326464.649 ops/s
# Warmup Iteration  13: 4335358.197 ops/s
# Warmup Iteration  14: 4305737.729 ops/s
# Warmup Iteration  15: 4310000.216 ops/s
# Warmup Iteration  16: 4333995.035 ops/s
# Warmup Iteration  17: 4334411.492 ops/s
# Warmup Iteration  18: 4331712.894 ops/s
# Warmup Iteration  19: 4299442.256 ops/s
# Warmup Iteration  20: 4331619.409 ops/s
# Warmup Iteration  21: 4332191.319 ops/s
# Warmup Iteration  22: 4318550.259 ops/s
# Warmup Iteration  23: 4325919.886 ops/s
# Warmup Iteration  24: 4320306.563 ops/s
# Warmup Iteration  25: 4306166.074 ops/s
# Warmup Iteration  26: 4301026.692 ops/s
# Warmup Iteration  27: 4318606.849 ops/s
# Warmup Iteration  28: 4306324.225 ops/s
# Warmup Iteration  29: 4302317.818 ops/s
# Warmup Iteration  30: 4312889.482 ops/s
Iteration   1: 4289569.966 ops/s
Iteration   2: 4309626.982 ops/s
Iteration   3: 4330291.283 ops/s
Iteration   4: 4327050.895 ops/s
Iteration   5: 4324539.288 ops/s
Iteration   6: 4317432.106 ops/s
Iteration   7: 4284390.943 ops/s
Iteration   8: 4316950.705 ops/s
Iteration   9: 4308454.583 ops/s
Iteration  10: 4307779.620 ops/s
Iteration  11: 4326237.881 ops/s
Iteration  12: 4329689.672 ops/s
Iteration  13: 4339195.325 ops/s
Iteration  14: 4300009.921 ops/s
Iteration  15: 4317084.236 ops/s
Iteration  16: 4323015.762 ops/s
Iteration  17: 4300462.264 ops/s
Iteration  18: 4295738.512 ops/s
Iteration  19: 4324989.179 ops/s
Iteration  20: 4330079.967 ops/s
Iteration  21: 4327533.813 ops/s
Iteration  22: 4317439.089 ops/s
Iteration  23: 4314688.107 ops/s
Iteration  24: 4316482.816 ops/s
Iteration  25: 4296579.452 ops/s
Iteration  26: 4318190.870 ops/s
Iteration  27: 4338025.075 ops/s
Iteration  28: 4316961.911 ops/s
Iteration  29: 4316754.745 ops/s
Iteration  30: 4301376.857 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_toArray":
  4315554.061 ±(99.9%) 9239.207 ops/s [Average]
  (min, avg, max) = (4284390.943, 4315554.061, 4339195.325), stdev = 13828.811
  CI (99.9%): [4306314.854, 4324793.268] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_toArray  thrpt   30  4315554.061 ± 9239.207  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_toBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_toBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 960677.803 ops/s
# Warmup Iteration   2: 2151735.882 ops/s
# Warmup Iteration   3: 2149308.429 ops/s
# Warmup Iteration   4: 1781955.554 ops/s
# Warmup Iteration   5: 2148287.092 ops/s
# Warmup Iteration   6: 2148577.266 ops/s
# Warmup Iteration   7: 2150080.375 ops/s
# Warmup Iteration   8: 2148623.179 ops/s
# Warmup Iteration   9: 2156742.899 ops/s
# Warmup Iteration  10: 2152078.634 ops/s
# Warmup Iteration  11: 2153480.825 ops/s
# Warmup Iteration  12: 2147155.861 ops/s
# Warmup Iteration  13: 2144843.377 ops/s
# Warmup Iteration  14: 2150781.955 ops/s
# Warmup Iteration  15: 2151968.076 ops/s
# Warmup Iteration  16: 2158078.269 ops/s
# Warmup Iteration  17: 2155847.856 ops/s
# Warmup Iteration  18: 2152386.923 ops/s
# Warmup Iteration  19: 2152373.812 ops/s
# Warmup Iteration  20: 2155752.261 ops/s
# Warmup Iteration  21: 2136654.015 ops/s
# Warmup Iteration  22: 2154522.647 ops/s
# Warmup Iteration  23: 2152229.290 ops/s
# Warmup Iteration  24: 2152150.271 ops/s
# Warmup Iteration  25: 2146556.583 ops/s
# Warmup Iteration  26: 2144087.951 ops/s
# Warmup Iteration  27: 2149263.848 ops/s
# Warmup Iteration  28: 2150428.264 ops/s
# Warmup Iteration  29: 2149372.227 ops/s
# Warmup Iteration  30: 2151038.275 ops/s
Iteration   1: 2150313.745 ops/s
Iteration   2: 2157678.359 ops/s
Iteration   3: 2148348.411 ops/s
Iteration   4: 2152586.151 ops/s
Iteration   5: 2154805.071 ops/s
Iteration   6: 2154521.437 ops/s
Iteration   7: 2118924.760 ops/s
Iteration   8: 2153733.112 ops/s
Iteration   9: 2152681.878 ops/s
Iteration  10: 2154369.120 ops/s
Iteration  11: 2113285.499 ops/s
Iteration  12: 2153327.784 ops/s
Iteration  13: 2155140.859 ops/s
Iteration  14: 2151266.548 ops/s
Iteration  15: 2143171.336 ops/s
Iteration  16: 2156596.367 ops/s
Iteration  17: 2123846.078 ops/s
Iteration  18: 2152051.499 ops/s
Iteration  19: 2156468.829 ops/s
Iteration  20: 2153085.643 ops/s
Iteration  21: 2148624.396 ops/s
Iteration  22: 2151766.993 ops/s
Iteration  23: 2155381.273 ops/s
Iteration  24: 2110944.891 ops/s
Iteration  25: 2151856.898 ops/s
Iteration  26: 2153130.530 ops/s
Iteration  27: 2136979.852 ops/s
Iteration  28: 2154745.814 ops/s
Iteration  29: 2151190.380 ops/s
Iteration  30: 2150761.386 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_toBag":
  2147386.163 ±(99.9%) 8681.303 ops/s [Average]
  (min, avg, max) = (2110944.891, 2147386.163, 2157678.359), stdev = 12993.767
  CI (99.9%): [2138704.860, 2156067.466] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_toBag  thrpt   30  2147386.163 ± 8681.303  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1304403.487 ops/s
# Warmup Iteration   2: 2954452.955 ops/s
# Warmup Iteration   3: 2437405.527 ops/s
# Warmup Iteration   4: 2956193.631 ops/s
# Warmup Iteration   5: 2943928.583 ops/s
# Warmup Iteration   6: 2959764.625 ops/s
# Warmup Iteration   7: 2955944.699 ops/s
# Warmup Iteration   8: 2930362.510 ops/s
# Warmup Iteration   9: 2948629.430 ops/s
# Warmup Iteration  10: 2938405.333 ops/s
# Warmup Iteration  11: 2950875.757 ops/s
# Warmup Iteration  12: 2958140.921 ops/s
# Warmup Iteration  13: 2958823.227 ops/s
# Warmup Iteration  14: 2949812.522 ops/s
# Warmup Iteration  15: 2931723.277 ops/s
# Warmup Iteration  16: 2956781.994 ops/s
# Warmup Iteration  17: 2959050.064 ops/s
# Warmup Iteration  18: 2956051.351 ops/s
# Warmup Iteration  19: 2956981.392 ops/s
# Warmup Iteration  20: 2954330.567 ops/s
# Warmup Iteration  21: 2958832.045 ops/s
# Warmup Iteration  22: 2953063.581 ops/s
# Warmup Iteration  23: 2962675.058 ops/s
# Warmup Iteration  24: 2958717.426 ops/s
# Warmup Iteration  25: 2948797.308 ops/s
# Warmup Iteration  26: 2954663.987 ops/s
# Warmup Iteration  27: 2959598.360 ops/s
# Warmup Iteration  28: 2947891.701 ops/s
# Warmup Iteration  29: 2956792.387 ops/s
# Warmup Iteration  30: 2957492.439 ops/s
Iteration   1: 2940825.967 ops/s
Iteration   2: 2958838.277 ops/s
Iteration   3: 2958352.554 ops/s
Iteration   4: 2957915.904 ops/s
Iteration   5: 2916320.276 ops/s
Iteration   6: 2952900.239 ops/s
Iteration   7: 2952612.940 ops/s
Iteration   8: 2945364.227 ops/s
Iteration   9: 2962616.882 ops/s
Iteration  10: 2953403.850 ops/s
Iteration  11: 2956452.725 ops/s
Iteration  12: 2955085.253 ops/s
Iteration  13: 2950281.004 ops/s
Iteration  14: 2955138.662 ops/s
Iteration  15: 2958249.385 ops/s
Iteration  16: 2955849.312 ops/s
Iteration  17: 2953657.536 ops/s
Iteration  18: 2956496.703 ops/s
Iteration  19: 2952069.541 ops/s
Iteration  20: 2957886.273 ops/s
Iteration  21: 2947856.608 ops/s
Iteration  22: 2956419.512 ops/s
Iteration  23: 2947657.403 ops/s
Iteration  24: 2959247.733 ops/s
Iteration  25: 2952559.983 ops/s
Iteration  26: 2966641.760 ops/s
Iteration  27: 2961448.723 ops/s
Iteration  28: 2959926.868 ops/s
Iteration  29: 2952910.130 ops/s
Iteration  30: 2960287.548 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_toList":
  2953842.459 ±(99.9%) 5919.024 ops/s [Average]
  (min, avg, max) = (2916320.276, 2953842.459, 2966641.760), stdev = 8859.318
  CI (99.9%): [2947923.435, 2959761.484] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_toList  thrpt   30  2953842.459 ± 5919.024  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_toSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_toSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1854477.990 ops/s
# Warmup Iteration   2: 4255429.489 ops/s
# Warmup Iteration   3: 3540822.601 ops/s
# Warmup Iteration   4: 4311172.963 ops/s
# Warmup Iteration   5: 4285202.538 ops/s
# Warmup Iteration   6: 4289717.439 ops/s
# Warmup Iteration   7: 4308327.209 ops/s
# Warmup Iteration   8: 4294076.289 ops/s
# Warmup Iteration   9: 4291018.602 ops/s
# Warmup Iteration  10: 4277129.161 ops/s
# Warmup Iteration  11: 4298553.059 ops/s
# Warmup Iteration  12: 4287972.720 ops/s
# Warmup Iteration  13: 4289021.294 ops/s
# Warmup Iteration  14: 4290791.936 ops/s
# Warmup Iteration  15: 4294050.979 ops/s
# Warmup Iteration  16: 4307975.133 ops/s
# Warmup Iteration  17: 4290295.162 ops/s
# Warmup Iteration  18: 4311650.088 ops/s
# Warmup Iteration  19: 4289358.665 ops/s
# Warmup Iteration  20: 4302204.896 ops/s
# Warmup Iteration  21: 4306417.074 ops/s
# Warmup Iteration  22: 4302487.207 ops/s
# Warmup Iteration  23: 4307847.133 ops/s
# Warmup Iteration  24: 4303517.919 ops/s
# Warmup Iteration  25: 4294543.827 ops/s
# Warmup Iteration  26: 4296422.283 ops/s
# Warmup Iteration  27: 4299204.303 ops/s
# Warmup Iteration  28: 4300251.720 ops/s
# Warmup Iteration  29: 4296133.080 ops/s
# Warmup Iteration  30: 4276932.213 ops/s
Iteration   1: 4304966.877 ops/s
Iteration   2: 4303306.349 ops/s
Iteration   3: 4279754.424 ops/s
Iteration   4: 4287410.985 ops/s
Iteration   5: 4314822.357 ops/s
Iteration   6: 4293922.410 ops/s
Iteration   7: 4312601.726 ops/s
Iteration   8: 4301815.555 ops/s
Iteration   9: 4321658.480 ops/s
Iteration  10: 4305517.736 ops/s
Iteration  11: 4309311.586 ops/s
Iteration  12: 4290953.155 ops/s
Iteration  13: 4302906.276 ops/s
Iteration  14: 4280043.421 ops/s
Iteration  15: 4295551.364 ops/s
Iteration  16: 4309831.330 ops/s
Iteration  17: 4286638.579 ops/s
Iteration  18: 4318584.274 ops/s
Iteration  19: 4301680.611 ops/s
Iteration  20: 4310435.844 ops/s
Iteration  21: 4303434.739 ops/s
Iteration  22: 4316715.610 ops/s
Iteration  23: 4304761.458 ops/s
Iteration  24: 4304219.009 ops/s
Iteration  25: 4275552.978 ops/s
Iteration  26: 4310621.764 ops/s
Iteration  27: 4298935.130 ops/s
Iteration  28: 4303780.393 ops/s
Iteration  29: 4302188.460 ops/s
Iteration  30: 4282119.463 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_toSet":
  4301134.745 ±(99.9%) 8033.698 ops/s [Average]
  (min, avg, max) = (4275552.978, 4301134.745, 4321658.480), stdev = 12024.462
  CI (99.9%): [4293101.047, 4309168.443] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_toSet  thrpt   30  4301134.745 ± 8033.698  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_with$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_with

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 695420.982 ops/s
# Warmup Iteration   2: 799038.236 ops/s
# Warmup Iteration   3: 1016770.938 ops/s
# Warmup Iteration   4: 1014759.703 ops/s
# Warmup Iteration   5: 1014967.228 ops/s
# Warmup Iteration   6: 1015814.633 ops/s
# Warmup Iteration   7: 1016180.235 ops/s
# Warmup Iteration   8: 1016040.055 ops/s
# Warmup Iteration   9: 938869.457 ops/s
# Warmup Iteration  10: 920553.591 ops/s
# Warmup Iteration  11: 1017907.421 ops/s
# Warmup Iteration  12: 1015010.280 ops/s
# Warmup Iteration  13: 1014014.550 ops/s
# Warmup Iteration  14: 1018825.780 ops/s
# Warmup Iteration  15: 1014446.866 ops/s
# Warmup Iteration  16: 1017061.242 ops/s
# Warmup Iteration  17: 1083559.827 ops/s
# Warmup Iteration  18: 1079707.563 ops/s
# Warmup Iteration  19: 1079240.857 ops/s
# Warmup Iteration  20: 1082524.039 ops/s
# Warmup Iteration  21: 1082621.322 ops/s
# Warmup Iteration  22: 1078843.998 ops/s
# Warmup Iteration  23: 1080854.370 ops/s
# Warmup Iteration  24: 1081743.021 ops/s
# Warmup Iteration  25: 1080188.509 ops/s
# Warmup Iteration  26: 1084469.721 ops/s
# Warmup Iteration  27: 1080673.036 ops/s
# Warmup Iteration  28: 1084010.333 ops/s
# Warmup Iteration  29: 1082097.038 ops/s
# Warmup Iteration  30: 1081455.949 ops/s
Iteration   1: 1082012.458 ops/s
Iteration   2: 1078367.597 ops/s
Iteration   3: 1079959.801 ops/s
Iteration   4: 1083830.557 ops/s
Iteration   5: 1082075.080 ops/s
Iteration   6: 1081516.920 ops/s
Iteration   7: 1068825.979 ops/s
Iteration   8: 1081335.187 ops/s
Iteration   9: 1083771.923 ops/s
Iteration  10: 1081617.083 ops/s
Iteration  11: 1078598.342 ops/s
Iteration  12: 1083807.687 ops/s
Iteration  13: 1077911.513 ops/s
Iteration  14: 1079444.493 ops/s
Iteration  15: 1086355.979 ops/s
Iteration  16: 1080718.783 ops/s
Iteration  17: 1085526.824 ops/s
Iteration  18: 1073731.644 ops/s
Iteration  19: 1084477.468 ops/s
Iteration  20: 1085263.025 ops/s
Iteration  21: 1084300.793 ops/s
Iteration  22: 1085538.756 ops/s
Iteration  23: 1082807.714 ops/s
Iteration  24: 1085496.943 ops/s
Iteration  25: 1080234.553 ops/s
Iteration  26: 1077280.197 ops/s
Iteration  27: 1079263.806 ops/s
Iteration  28: 1079545.055 ops/s
Iteration  29: 1084223.432 ops/s
Iteration  30: 1081589.137 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_with":
  1081314.291 ±(99.9%) 2527.806 ops/s [Average]
  (min, avg, max) = (1068825.979, 1081314.291, 1086355.979), stdev = 3783.502
  CI (99.9%): [1078786.485, 1083842.097] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_with  thrpt   30  1081314.291 ± 2527.806  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_withAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_withAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 691392.410 ops/s
# Warmup Iteration   2: 809122.829 ops/s
# Warmup Iteration   3: 1011491.492 ops/s
# Warmup Iteration   4: 1004760.698 ops/s
# Warmup Iteration   5: 1013209.946 ops/s
# Warmup Iteration   6: 1014845.513 ops/s
# Warmup Iteration   7: 1007076.445 ops/s
# Warmup Iteration   8: 1012671.121 ops/s
# Warmup Iteration   9: 921590.800 ops/s
# Warmup Iteration  10: 938221.030 ops/s
# Warmup Iteration  11: 1015489.246 ops/s
# Warmup Iteration  12: 1018538.475 ops/s
# Warmup Iteration  13: 1018239.597 ops/s
# Warmup Iteration  14: 1011877.464 ops/s
# Warmup Iteration  15: 1014824.686 ops/s
# Warmup Iteration  16: 1015394.110 ops/s
# Warmup Iteration  17: 1086930.468 ops/s
# Warmup Iteration  18: 1076903.896 ops/s
# Warmup Iteration  19: 1076899.460 ops/s
# Warmup Iteration  20: 1081486.058 ops/s
# Warmup Iteration  21: 1079941.252 ops/s
# Warmup Iteration  22: 1080223.547 ops/s
# Warmup Iteration  23: 1083735.881 ops/s
# Warmup Iteration  24: 1078346.003 ops/s
# Warmup Iteration  25: 1077752.997 ops/s
# Warmup Iteration  26: 1078735.552 ops/s
# Warmup Iteration  27: 1080406.975 ops/s
# Warmup Iteration  28: 1082760.862 ops/s
# Warmup Iteration  29: 1083546.352 ops/s
# Warmup Iteration  30: 1082584.656 ops/s
Iteration   1: 1075375.183 ops/s
Iteration   2: 1081797.054 ops/s
Iteration   3: 1086902.080 ops/s
Iteration   4: 1081592.618 ops/s
Iteration   5: 1082334.690 ops/s
Iteration   6: 1079999.712 ops/s
Iteration   7: 1077061.563 ops/s
Iteration   8: 1080677.310 ops/s
Iteration   9: 1083703.846 ops/s
Iteration  10: 1081729.408 ops/s
Iteration  11: 1079976.792 ops/s
Iteration  12: 1086028.582 ops/s
Iteration  13: 1082255.969 ops/s
Iteration  14: 1084356.687 ops/s
Iteration  15: 1082720.360 ops/s
Iteration  16: 1075414.268 ops/s
Iteration  17: 1074975.690 ops/s
Iteration  18: 1079912.823 ops/s
Iteration  19: 1059670.809 ops/s
Iteration  20: 1070629.960 ops/s
Iteration  21: 1062319.671 ops/s
Iteration  22: 1075971.586 ops/s
Iteration  23: 1078011.007 ops/s
Iteration  24: 1078883.475 ops/s
Iteration  25: 1060236.512 ops/s
Iteration  26: 1077554.693 ops/s
Iteration  27: 1057232.876 ops/s
Iteration  28: 1075604.329 ops/s
Iteration  29: 1080211.010 ops/s
Iteration  30: 1065554.538 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_withAll":
  1076623.170 ±(99.9%) 5345.055 ops/s [Average]
  (min, avg, max) = (1057232.876, 1076623.170, 1086902.080), stdev = 8000.228
  CI (99.9%): [1071278.115, 1081968.225] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_withAll  thrpt   30  1076623.170 ± 5345.055  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_without$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_without

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 693101.323 ops/s
# Warmup Iteration   2: 802493.302 ops/s
# Warmup Iteration   3: 1012911.997 ops/s
# Warmup Iteration   4: 1017170.912 ops/s
# Warmup Iteration   5: 1010996.147 ops/s
# Warmup Iteration   6: 1014946.719 ops/s
# Warmup Iteration   7: 1018556.541 ops/s
# Warmup Iteration   8: 1014025.752 ops/s
# Warmup Iteration   9: 917774.650 ops/s
# Warmup Iteration  10: 933105.269 ops/s
# Warmup Iteration  11: 1011697.177 ops/s
# Warmup Iteration  12: 1014410.007 ops/s
# Warmup Iteration  13: 1016036.070 ops/s
# Warmup Iteration  14: 1020123.935 ops/s
# Warmup Iteration  15: 1017585.385 ops/s
# Warmup Iteration  16: 1016651.152 ops/s
# Warmup Iteration  17: 1082341.747 ops/s
# Warmup Iteration  18: 1081031.052 ops/s
# Warmup Iteration  19: 1085013.684 ops/s
# Warmup Iteration  20: 1083293.268 ops/s
# Warmup Iteration  21: 1080093.201 ops/s
# Warmup Iteration  22: 1073840.517 ops/s
# Warmup Iteration  23: 1075491.240 ops/s
# Warmup Iteration  24: 1087120.085 ops/s
# Warmup Iteration  25: 1084672.599 ops/s
# Warmup Iteration  26: 1082377.135 ops/s
# Warmup Iteration  27: 1082839.137 ops/s
# Warmup Iteration  28: 1074258.160 ops/s
# Warmup Iteration  29: 1084112.114 ops/s
# Warmup Iteration  30: 1083736.787 ops/s
Iteration   1: 1089204.342 ops/s
Iteration   2: 1067498.668 ops/s
Iteration   3: 1086965.949 ops/s
Iteration   4: 1082163.109 ops/s
Iteration   5: 1080589.840 ops/s
Iteration   6: 1043276.470 ops/s
Iteration   7: 1084853.876 ops/s
Iteration   8: 1083329.311 ops/s
Iteration   9: 1088756.679 ops/s
Iteration  10: 1082895.023 ops/s
Iteration  11: 1079712.058 ops/s
Iteration  12: 1083557.071 ops/s
Iteration  13: 1076817.267 ops/s
Iteration  14: 1084302.840 ops/s
Iteration  15: 1085158.319 ops/s
Iteration  16: 1084034.390 ops/s
Iteration  17: 1083396.584 ops/s
Iteration  18: 1085787.334 ops/s
Iteration  19: 1089394.705 ops/s
Iteration  20: 1083314.206 ops/s
Iteration  21: 1084479.381 ops/s
Iteration  22: 1079018.063 ops/s
Iteration  23: 1082904.735 ops/s
Iteration  24: 1083305.695 ops/s
Iteration  25: 1078713.274 ops/s
Iteration  26: 1075905.150 ops/s
Iteration  27: 1083415.604 ops/s
Iteration  28: 1080020.330 ops/s
Iteration  29: 1088217.509 ops/s
Iteration  30: 1081170.683 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_without":
  1081405.282 ±(99.9%) 5646.755 ops/s [Average]
  (min, avg, max) = (1043276.470, 1081405.282, 1089394.705), stdev = 8451.798
  CI (99.9%): [1075758.527, 1087052.038] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_without  thrpt   30  1081405.282 ± 5646.755  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_withoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_withoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 686270.844 ops/s
# Warmup Iteration   2: 799867.175 ops/s
# Warmup Iteration   3: 1019498.502 ops/s
# Warmup Iteration   4: 1016948.040 ops/s
# Warmup Iteration   5: 1018056.102 ops/s
# Warmup Iteration   6: 1019096.278 ops/s
# Warmup Iteration   7: 1019766.530 ops/s
# Warmup Iteration   8: 1016212.799 ops/s
# Warmup Iteration   9: 896003.930 ops/s
# Warmup Iteration  10: 974408.246 ops/s
# Warmup Iteration  11: 1017430.484 ops/s
# Warmup Iteration  12: 1020406.729 ops/s
# Warmup Iteration  13: 1019782.160 ops/s
# Warmup Iteration  14: 1016806.755 ops/s
# Warmup Iteration  15: 1018468.754 ops/s
# Warmup Iteration  16: 1018145.992 ops/s
# Warmup Iteration  17: 1081538.323 ops/s
# Warmup Iteration  18: 1083205.464 ops/s
# Warmup Iteration  19: 1081922.868 ops/s
# Warmup Iteration  20: 1078797.621 ops/s
# Warmup Iteration  21: 1079559.494 ops/s
# Warmup Iteration  22: 1079155.745 ops/s
# Warmup Iteration  23: 1076306.771 ops/s
# Warmup Iteration  24: 1081699.492 ops/s
# Warmup Iteration  25: 1081182.153 ops/s
# Warmup Iteration  26: 1077157.431 ops/s
# Warmup Iteration  27: 1080837.914 ops/s
# Warmup Iteration  28: 1081204.469 ops/s
# Warmup Iteration  29: 1081496.019 ops/s
# Warmup Iteration  30: 1080089.854 ops/s
Iteration   1: 1078264.447 ops/s
Iteration   2: 1081349.365 ops/s
Iteration   3: 1079040.992 ops/s
Iteration   4: 1081133.194 ops/s
Iteration   5: 1073791.563 ops/s
Iteration   6: 1083205.626 ops/s
Iteration   7: 1082726.907 ops/s
Iteration   8: 1082682.454 ops/s
Iteration   9: 1077749.098 ops/s
Iteration  10: 1082624.939 ops/s
Iteration  11: 1083480.897 ops/s
Iteration  12: 1080871.258 ops/s
Iteration  13: 1082921.250 ops/s
Iteration  14: 1084005.899 ops/s
Iteration  15: 1075109.266 ops/s
Iteration  16: 1080305.405 ops/s
Iteration  17: 1085416.903 ops/s
Iteration  18: 1078423.269 ops/s
Iteration  19: 1081240.318 ops/s
Iteration  20: 1084684.993 ops/s
Iteration  21: 1078074.925 ops/s
Iteration  22: 1080478.569 ops/s
Iteration  23: 1079518.936 ops/s
Iteration  24: 1080729.584 ops/s
Iteration  25: 1081020.979 ops/s
Iteration  26: 1084038.707 ops/s
Iteration  27: 1079998.957 ops/s
Iteration  28: 1080907.429 ops/s
Iteration  29: 1081663.384 ops/s
Iteration  30: 1079253.262 ops/s


Result "org.eclipse.collections.impl.map.mutable.primitive.UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_withoutAll":
  1080823.759 ±(99.9%) 1776.669 ops/s [Average]
  (min, avg, max) = (1073791.563, 1080823.759, 1085416.903), stdev = 2659.235
  CI (99.9%): [1079047.090, 1082600.428] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
UnmodifiableLongBooleanMapValuesTest._Benchmark.benchmark_withoutAll  thrpt   30  1080823.759 ± 1776.669  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.immutable.ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_allowDuplicates$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.immutable.ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_allowDuplicates

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 302393.814 ops/s
# Warmup Iteration   2: 716748.222 ops/s
# Warmup Iteration   3: 751867.270 ops/s
# Warmup Iteration   4: 735446.567 ops/s
# Warmup Iteration   5: 666233.109 ops/s
# Warmup Iteration   6: 761397.970 ops/s
# Warmup Iteration   7: 759362.996 ops/s
# Warmup Iteration   8: 757927.139 ops/s
# Warmup Iteration   9: 758738.431 ops/s
# Warmup Iteration  10: 758478.035 ops/s
# Warmup Iteration  11: 757795.315 ops/s
# Warmup Iteration  12: 759468.347 ops/s
# Warmup Iteration  13: 759539.848 ops/s
# Warmup Iteration  14: 755379.924 ops/s
# Warmup Iteration  15: 755551.780 ops/s
# Warmup Iteration  16: 757828.019 ops/s
# Warmup Iteration  17: 757970.722 ops/s
# Warmup Iteration  18: 758016.462 ops/s
# Warmup Iteration  19: 757621.901 ops/s
# Warmup Iteration  20: 758266.754 ops/s
# Warmup Iteration  21: 759861.408 ops/s
# Warmup Iteration  22: 756680.152 ops/s
# Warmup Iteration  23: 757920.810 ops/s
# Warmup Iteration  24: 758955.159 ops/s
# Warmup Iteration  25: 760277.931 ops/s
# Warmup Iteration  26: 759151.912 ops/s
# Warmup Iteration  27: 758394.326 ops/s
# Warmup Iteration  28: 762556.911 ops/s
# Warmup Iteration  29: 758760.278 ops/s
# Warmup Iteration  30: 758774.579 ops/s
Iteration   1: 756234.674 ops/s
Iteration   2: 758677.203 ops/s
Iteration   3: 758815.457 ops/s
Iteration   4: 759429.778 ops/s
Iteration   5: 759558.662 ops/s
Iteration   6: 757737.068 ops/s
Iteration   7: 760530.653 ops/s
Iteration   8: 754766.172 ops/s
Iteration   9: 758025.441 ops/s
Iteration  10: 761752.838 ops/s
Iteration  11: 760018.607 ops/s
Iteration  12: 759132.367 ops/s
Iteration  13: 757619.405 ops/s
Iteration  14: 758806.580 ops/s
Iteration  15: 760542.427 ops/s
Iteration  16: 757856.638 ops/s
Iteration  17: 760173.902 ops/s
Iteration  18: 760502.238 ops/s
Iteration  19: 760654.642 ops/s
Iteration  20: 756880.833 ops/s
Iteration  21: 757551.498 ops/s
Iteration  22: 756211.141 ops/s
Iteration  23: 758776.346 ops/s
Iteration  24: 758614.997 ops/s
Iteration  25: 759562.804 ops/s
Iteration  26: 758354.085 ops/s
Iteration  27: 758774.530 ops/s
Iteration  28: 759858.206 ops/s
Iteration  29: 762540.804 ops/s
Iteration  30: 760740.593 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.immutable.ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_allowDuplicates":
  758956.686 ±(99.9%) 1132.519 ops/s [Average]
  (min, avg, max) = (754766.172, 758956.686, 762540.804), stdev = 1695.101
  CI (99.9%): [757824.167, 760089.205] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_allowDuplicates  thrpt   30  758956.686 ± 1132.519  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.immutable.ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_collectKeyMultiValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.immutable.ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_collectKeyMultiValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 58100.064 ops/s
# Warmup Iteration   2: 85545.982 ops/s
# Warmup Iteration   3: 113480.595 ops/s
# Warmup Iteration   4: 112898.885 ops/s
# Warmup Iteration   5: 113596.925 ops/s
# Warmup Iteration   6: 113505.992 ops/s
# Warmup Iteration   7: 113489.507 ops/s
# Warmup Iteration   8: 95924.418 ops/s
# Warmup Iteration   9: 111769.336 ops/s
# Warmup Iteration  10: 113258.775 ops/s
# Warmup Iteration  11: 113308.948 ops/s
# Warmup Iteration  12: 113502.708 ops/s
# Warmup Iteration  13: 113547.276 ops/s
# Warmup Iteration  14: 113261.249 ops/s
# Warmup Iteration  15: 113477.770 ops/s
# Warmup Iteration  16: 113358.464 ops/s
# Warmup Iteration  17: 113518.598 ops/s
# Warmup Iteration  18: 113328.670 ops/s
# Warmup Iteration  19: 113222.874 ops/s
# Warmup Iteration  20: 113278.885 ops/s
# Warmup Iteration  21: 113410.548 ops/s
# Warmup Iteration  22: 113163.573 ops/s
# Warmup Iteration  23: 113165.436 ops/s
# Warmup Iteration  24: 113320.508 ops/s
# Warmup Iteration  25: 113429.807 ops/s
# Warmup Iteration  26: 113413.554 ops/s
# Warmup Iteration  27: 113138.852 ops/s
# Warmup Iteration  28: 113205.021 ops/s
# Warmup Iteration  29: 113378.283 ops/s
# Warmup Iteration  30: 113296.101 ops/s
Iteration   1: 113211.025 ops/s
Iteration   2: 113536.755 ops/s
Iteration   3: 113503.447 ops/s
Iteration   4: 113201.455 ops/s
Iteration   5: 112988.976 ops/s
Iteration   6: 113002.886 ops/s
Iteration   7: 113386.445 ops/s
Iteration   8: 113279.426 ops/s
Iteration   9: 113131.165 ops/s
Iteration  10: 113450.149 ops/s
Iteration  11: 113633.900 ops/s
Iteration  12: 113187.575 ops/s
Iteration  13: 113476.064 ops/s
Iteration  14: 113485.034 ops/s
Iteration  15: 113358.685 ops/s
Iteration  16: 113341.328 ops/s
Iteration  17: 113241.114 ops/s
Iteration  18: 113479.993 ops/s
Iteration  19: 113372.996 ops/s
Iteration  20: 113105.286 ops/s
Iteration  21: 113330.890 ops/s
Iteration  22: 113368.707 ops/s
Iteration  23: 113511.148 ops/s
Iteration  24: 113398.682 ops/s
Iteration  25: 113178.234 ops/s
Iteration  26: 113417.828 ops/s
Iteration  27: 113533.580 ops/s
Iteration  28: 113104.388 ops/s
Iteration  29: 113364.643 ops/s
Iteration  30: 113315.804 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.immutable.ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_collectKeyMultiValues":
  113329.920 ±(99.9%) 110.394 ops/s [Average]
  (min, avg, max) = (112988.976, 113329.920, 113633.900), stdev = 165.233
  CI (99.9%): [113219.526, 113440.314] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score     Error  Units
ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_collectKeyMultiValues  thrpt   30  113329.920 ± 110.394  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.immutable.ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_collectKeysValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.immutable.ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_collectKeysValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 115748.808 ops/s
# Warmup Iteration   2: 245279.906 ops/s
# Warmup Iteration   3: 275629.138 ops/s
# Warmup Iteration   4: 276728.176 ops/s
# Warmup Iteration   5: 233578.706 ops/s
# Warmup Iteration   6: 276945.383 ops/s
# Warmup Iteration   7: 277262.256 ops/s
# Warmup Iteration   8: 277124.558 ops/s
# Warmup Iteration   9: 277530.063 ops/s
# Warmup Iteration  10: 276697.628 ops/s
# Warmup Iteration  11: 276036.209 ops/s
# Warmup Iteration  12: 277049.584 ops/s
# Warmup Iteration  13: 277459.150 ops/s
# Warmup Iteration  14: 277356.988 ops/s
# Warmup Iteration  15: 277269.808 ops/s
# Warmup Iteration  16: 276704.533 ops/s
# Warmup Iteration  17: 278349.723 ops/s
# Warmup Iteration  18: 277412.171 ops/s
# Warmup Iteration  19: 275448.781 ops/s
# Warmup Iteration  20: 276583.148 ops/s
# Warmup Iteration  21: 275230.983 ops/s
# Warmup Iteration  22: 277427.009 ops/s
# Warmup Iteration  23: 276475.187 ops/s
# Warmup Iteration  24: 276203.922 ops/s
# Warmup Iteration  25: 275847.719 ops/s
# Warmup Iteration  26: 277403.797 ops/s
# Warmup Iteration  27: 275820.024 ops/s
# Warmup Iteration  28: 276257.641 ops/s
# Warmup Iteration  29: 276059.337 ops/s
# Warmup Iteration  30: 276893.550 ops/s
Iteration   1: 276448.782 ops/s
Iteration   2: 276662.589 ops/s
Iteration   3: 276271.872 ops/s
Iteration   4: 276688.537 ops/s
Iteration   5: 276478.799 ops/s
Iteration   6: 276598.269 ops/s
Iteration   7: 276949.912 ops/s
Iteration   8: 275475.166 ops/s
Iteration   9: 277032.281 ops/s
Iteration  10: 276906.902 ops/s
Iteration  11: 275568.681 ops/s
Iteration  12: 276706.418 ops/s
Iteration  13: 275906.094 ops/s
Iteration  14: 277271.371 ops/s
Iteration  15: 275962.893 ops/s
Iteration  16: 275708.215 ops/s
Iteration  17: 276019.447 ops/s
Iteration  18: 275502.570 ops/s
Iteration  19: 276413.104 ops/s
Iteration  20: 276790.355 ops/s
Iteration  21: 277316.133 ops/s
Iteration  22: 276817.678 ops/s
Iteration  23: 274590.890 ops/s
Iteration  24: 277286.130 ops/s
Iteration  25: 276115.824 ops/s
Iteration  26: 274839.022 ops/s
Iteration  27: 276264.514 ops/s
Iteration  28: 276753.499 ops/s
Iteration  29: 277572.657 ops/s
Iteration  30: 276940.563 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.immutable.ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_collectKeysValues":
  276395.306 ±(99.9%) 480.357 ops/s [Average]
  (min, avg, max) = (274590.890, 276395.306, 277572.657), stdev = 718.975
  CI (99.9%): [275914.949, 276875.662] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score     Error  Units
ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_collectKeysValues  thrpt   30  276395.306 ± 480.357  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.immutable.ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_collectValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.immutable.ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_collectValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 101521.266 ops/s
# Warmup Iteration   2: 197654.350 ops/s
# Warmup Iteration   3: 235855.719 ops/s
# Warmup Iteration   4: 236712.091 ops/s
# Warmup Iteration   5: 236726.533 ops/s
# Warmup Iteration   6: 198144.096 ops/s
# Warmup Iteration   7: 237443.904 ops/s
# Warmup Iteration   8: 237187.709 ops/s
# Warmup Iteration   9: 237330.432 ops/s
# Warmup Iteration  10: 237587.893 ops/s
# Warmup Iteration  11: 237217.662 ops/s
# Warmup Iteration  12: 237259.006 ops/s
# Warmup Iteration  13: 237093.196 ops/s
# Warmup Iteration  14: 237756.250 ops/s
# Warmup Iteration  15: 237543.151 ops/s
# Warmup Iteration  16: 238033.294 ops/s
# Warmup Iteration  17: 230558.126 ops/s
# Warmup Iteration  18: 230176.542 ops/s
# Warmup Iteration  19: 231298.458 ops/s
# Warmup Iteration  20: 230850.614 ops/s
# Warmup Iteration  21: 230612.549 ops/s
# Warmup Iteration  22: 230475.492 ops/s
# Warmup Iteration  23: 230669.042 ops/s
# Warmup Iteration  24: 230695.129 ops/s
# Warmup Iteration  25: 231128.981 ops/s
# Warmup Iteration  26: 230859.878 ops/s
# Warmup Iteration  27: 230534.946 ops/s
# Warmup Iteration  28: 230585.709 ops/s
# Warmup Iteration  29: 230745.970 ops/s
# Warmup Iteration  30: 230413.951 ops/s
Iteration   1: 231425.116 ops/s
Iteration   2: 231006.505 ops/s
Iteration   3: 231132.909 ops/s
Iteration   4: 231424.323 ops/s
Iteration   5: 231148.638 ops/s
Iteration   6: 232454.080 ops/s
Iteration   7: 230466.628 ops/s
Iteration   8: 231353.549 ops/s
Iteration   9: 231080.124 ops/s
Iteration  10: 231591.695 ops/s
Iteration  11: 231979.953 ops/s
Iteration  12: 230910.927 ops/s
Iteration  13: 231241.761 ops/s
Iteration  14: 230541.435 ops/s
Iteration  15: 231009.877 ops/s
Iteration  16: 229978.548 ops/s
Iteration  17: 230905.232 ops/s
Iteration  18: 231503.954 ops/s
Iteration  19: 230637.165 ops/s
Iteration  20: 231743.348 ops/s
Iteration  21: 230362.465 ops/s
Iteration  22: 231309.556 ops/s
Iteration  23: 231173.892 ops/s
Iteration  24: 230899.680 ops/s
Iteration  25: 231324.144 ops/s
Iteration  26: 230596.772 ops/s
Iteration  27: 230418.409 ops/s
Iteration  28: 231926.538 ops/s
Iteration  29: 230776.073 ops/s
Iteration  30: 231289.477 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.immutable.ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_collectValues":
  231120.426 ±(99.9%) 355.580 ops/s [Average]
  (min, avg, max) = (229978.548, 231120.426, 232454.080), stdev = 532.216
  CI (99.9%): [230764.846, 231476.006] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score     Error  Units
ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_collectValues  thrpt   30  231120.426 ± 355.580  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.immutable.ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_constructors$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.immutable.ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_constructors

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3334696.543 ops/s
# Warmup Iteration   2: 5899859.616 ops/s
# Warmup Iteration   3: 7122077.556 ops/s
# Warmup Iteration   4: 7059459.347 ops/s
# Warmup Iteration   5: 7054497.972 ops/s
# Warmup Iteration   6: 7041851.289 ops/s
# Warmup Iteration   7: 7023517.452 ops/s
# Warmup Iteration   8: 7142388.275 ops/s
# Warmup Iteration   9: 7042417.648 ops/s
# Warmup Iteration  10: 7030719.084 ops/s
# Warmup Iteration  11: 7056179.947 ops/s
# Warmup Iteration  12: 7105197.202 ops/s
# Warmup Iteration  13: 7019919.026 ops/s
# Warmup Iteration  14: 7054937.283 ops/s
# Warmup Iteration  15: 7074470.417 ops/s
# Warmup Iteration  16: 7102452.885 ops/s
# Warmup Iteration  17: 7070194.689 ops/s
# Warmup Iteration  18: 7074645.560 ops/s
# Warmup Iteration  19: 7142056.967 ops/s
# Warmup Iteration  20: 7147921.531 ops/s
# Warmup Iteration  21: 7096484.798 ops/s
# Warmup Iteration  22: 7009513.127 ops/s
# Warmup Iteration  23: 7138904.774 ops/s
# Warmup Iteration  24: 7145252.047 ops/s
# Warmup Iteration  25: 7065579.195 ops/s
# Warmup Iteration  26: 7103864.565 ops/s
# Warmup Iteration  27: 7149295.089 ops/s
# Warmup Iteration  28: 7102983.416 ops/s
# Warmup Iteration  29: 7185251.260 ops/s
# Warmup Iteration  30: 7165699.185 ops/s
Iteration   1: 7149577.105 ops/s
Iteration   2: 7149140.878 ops/s
Iteration   3: 7174336.375 ops/s
Iteration   4: 7196243.622 ops/s
Iteration   5: 7148773.937 ops/s
Iteration   6: 7110986.677 ops/s
Iteration   7: 7198709.547 ops/s
Iteration   8: 7193684.790 ops/s
Iteration   9: 7137373.310 ops/s
Iteration  10: 7180189.609 ops/s
Iteration  11: 7167006.369 ops/s
Iteration  12: 7191230.872 ops/s
Iteration  13: 7167593.486 ops/s
Iteration  14: 7162279.550 ops/s
Iteration  15: 7220102.886 ops/s
Iteration  16: 7211632.996 ops/s
Iteration  17: 7166179.370 ops/s
Iteration  18: 7134601.856 ops/s
Iteration  19: 7121265.623 ops/s
Iteration  20: 7206823.247 ops/s
Iteration  21: 7202918.093 ops/s
Iteration  22: 7175788.476 ops/s
Iteration  23: 7150801.497 ops/s
Iteration  24: 7182609.683 ops/s
Iteration  25: 7198961.590 ops/s
Iteration  26: 7244571.299 ops/s
Iteration  27: 7203198.575 ops/s
Iteration  28: 7243742.164 ops/s
Iteration  29: 7268187.401 ops/s
Iteration  30: 7186741.412 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.immutable.ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_constructors":
  7181508.410 ±(99.9%) 24294.616 ops/s [Average]
  (min, avg, max) = (7110986.677, 7181508.410, 7268187.401), stdev = 36363.040
  CI (99.9%): [7157213.794, 7205803.025] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_constructors  thrpt   30  7181508.410 ± 24294.616  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.immutable.ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.immutable.ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4990570.936 ops/s
# Warmup Iteration   2: 10031096.512 ops/s
# Warmup Iteration   3: 11864296.466 ops/s
# Warmup Iteration   4: 11820206.078 ops/s
# Warmup Iteration   5: 11891475.998 ops/s
# Warmup Iteration   6: 11925431.508 ops/s
# Warmup Iteration   7: 11918449.761 ops/s
# Warmup Iteration   8: 11917178.015 ops/s
# Warmup Iteration   9: 11947929.977 ops/s
# Warmup Iteration  10: 11884587.301 ops/s
# Warmup Iteration  11: 11887666.177 ops/s
# Warmup Iteration  12: 11900663.448 ops/s
# Warmup Iteration  13: 11868986.965 ops/s
# Warmup Iteration  14: 11902360.455 ops/s
# Warmup Iteration  15: 11903402.030 ops/s
# Warmup Iteration  16: 11889729.549 ops/s
# Warmup Iteration  17: 11911751.150 ops/s
# Warmup Iteration  18: 11920088.408 ops/s
# Warmup Iteration  19: 11867902.895 ops/s
# Warmup Iteration  20: 11729948.177 ops/s
# Warmup Iteration  21: 11899185.008 ops/s
# Warmup Iteration  22: 11878969.134 ops/s
# Warmup Iteration  23: 11936246.246 ops/s
# Warmup Iteration  24: 11749235.096 ops/s
# Warmup Iteration  25: 11911106.840 ops/s
# Warmup Iteration  26: 11949077.762 ops/s
# Warmup Iteration  27: 11882496.267 ops/s
# Warmup Iteration  28: 11813020.367 ops/s
# Warmup Iteration  29: 11942098.794 ops/s
# Warmup Iteration  30: 11846954.754 ops/s
Iteration   1: 11931210.420 ops/s
Iteration   2: 11891314.690 ops/s
Iteration   3: 11947730.550 ops/s
Iteration   4: 11836459.137 ops/s
Iteration   5: 11703810.726 ops/s
Iteration   6: 11857201.954 ops/s
Iteration   7: 11937460.957 ops/s
Iteration   8: 11878882.435 ops/s
Iteration   9: 11857624.772 ops/s
Iteration  10: 11860062.048 ops/s
Iteration  11: 11980198.848 ops/s
Iteration  12: 11921759.412 ops/s
Iteration  13: 11988537.142 ops/s
Iteration  14: 11973707.951 ops/s
Iteration  15: 11882777.670 ops/s
Iteration  16: 11909314.644 ops/s
Iteration  17: 11788477.853 ops/s
Iteration  18: 11854199.107 ops/s
Iteration  19: 11948458.874 ops/s
Iteration  20: 11948467.844 ops/s
Iteration  21: 11678389.082 ops/s
Iteration  22: 11859245.273 ops/s
Iteration  23: 11758526.485 ops/s
Iteration  24: 11943054.442 ops/s
Iteration  25: 11877682.408 ops/s
Iteration  26: 11895215.294 ops/s
Iteration  27: 11646838.534 ops/s
Iteration  28: 11857882.631 ops/s
Iteration  29: 11901825.760 ops/s
Iteration  30: 11769175.246 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.immutable.ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_empty":
  11869516.406 ±(99.9%) 58322.251 ops/s [Average]
  (min, avg, max) = (11646838.534, 11869516.406, 11988537.142), stdev = 87294.006
  CI (99.9%): [11811194.155, 11927838.657] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score       Error  Units
ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_empty  thrpt   30  11869516.406 ± 58322.251  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.immutable.ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_flip$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.immutable.ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_flip

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 273802.989 ops/s
# Warmup Iteration   2: 532050.061 ops/s
# Warmup Iteration   3: 618054.577 ops/s
# Warmup Iteration   4: 617736.234 ops/s
# Warmup Iteration   5: 615616.866 ops/s
# Warmup Iteration   6: 517021.343 ops/s
# Warmup Iteration   7: 617978.391 ops/s
# Warmup Iteration   8: 613230.882 ops/s
# Warmup Iteration   9: 620489.172 ops/s
# Warmup Iteration  10: 620539.556 ops/s
# Warmup Iteration  11: 614422.851 ops/s
# Warmup Iteration  12: 618842.824 ops/s
# Warmup Iteration  13: 620067.699 ops/s
# Warmup Iteration  14: 620354.664 ops/s
# Warmup Iteration  15: 619941.291 ops/s
# Warmup Iteration  16: 620055.512 ops/s
# Warmup Iteration  17: 619364.683 ops/s
# Warmup Iteration  18: 618893.227 ops/s
# Warmup Iteration  19: 620211.035 ops/s
# Warmup Iteration  20: 619945.889 ops/s
# Warmup Iteration  21: 617530.815 ops/s
# Warmup Iteration  22: 619897.283 ops/s
# Warmup Iteration  23: 620293.332 ops/s
# Warmup Iteration  24: 621574.846 ops/s
# Warmup Iteration  25: 620870.113 ops/s
# Warmup Iteration  26: 618578.711 ops/s
# Warmup Iteration  27: 618987.374 ops/s
# Warmup Iteration  28: 620765.216 ops/s
# Warmup Iteration  29: 618366.196 ops/s
# Warmup Iteration  30: 619843.846 ops/s
Iteration   1: 620085.112 ops/s
Iteration   2: 616875.635 ops/s
Iteration   3: 620415.439 ops/s
Iteration   4: 619774.993 ops/s
Iteration   5: 619249.770 ops/s
Iteration   6: 620585.954 ops/s
Iteration   7: 621078.416 ops/s
Iteration   8: 619280.731 ops/s
Iteration   9: 618212.031 ops/s
Iteration  10: 622749.282 ops/s
Iteration  11: 619514.364 ops/s
Iteration  12: 618743.003 ops/s
Iteration  13: 618318.280 ops/s
Iteration  14: 616908.505 ops/s
Iteration  15: 618977.753 ops/s
Iteration  16: 619970.530 ops/s
Iteration  17: 619825.304 ops/s
Iteration  18: 620149.750 ops/s
Iteration  19: 618483.545 ops/s
Iteration  20: 620866.781 ops/s
Iteration  21: 619089.790 ops/s
Iteration  22: 618325.608 ops/s
Iteration  23: 621796.943 ops/s
Iteration  24: 617343.583 ops/s
Iteration  25: 620078.006 ops/s
Iteration  26: 620405.130 ops/s
Iteration  27: 619380.463 ops/s
Iteration  28: 619631.358 ops/s
Iteration  29: 620521.624 ops/s
Iteration  30: 618377.159 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.immutable.ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_flip":
  619500.495 ±(99.9%) 892.179 ops/s [Average]
  (min, avg, max) = (616875.635, 619500.495, 622749.282), stdev = 1335.371
  CI (99.9%): [618608.316, 620392.673] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score     Error  Units
ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_flip  thrpt   30  619500.495 ± 892.179  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.immutable.ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_get$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.immutable.ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_get

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 479332.189 ops/s
# Warmup Iteration   2: 1083407.889 ops/s
# Warmup Iteration   3: 1173882.613 ops/s
# Warmup Iteration   4: 1182232.006 ops/s
# Warmup Iteration   5: 984694.736 ops/s
# Warmup Iteration   6: 1180625.101 ops/s
# Warmup Iteration   7: 1183812.427 ops/s
# Warmup Iteration   8: 1185006.846 ops/s
# Warmup Iteration   9: 1181944.976 ops/s
# Warmup Iteration  10: 1181435.393 ops/s
# Warmup Iteration  11: 1182634.628 ops/s
# Warmup Iteration  12: 1181720.200 ops/s
# Warmup Iteration  13: 1175137.210 ops/s
# Warmup Iteration  14: 1179193.871 ops/s
# Warmup Iteration  15: 1182916.955 ops/s
# Warmup Iteration  16: 1182874.356 ops/s
# Warmup Iteration  17: 1179026.816 ops/s
# Warmup Iteration  18: 1183594.148 ops/s
# Warmup Iteration  19: 1183637.578 ops/s
# Warmup Iteration  20: 1182559.645 ops/s
# Warmup Iteration  21: 1181913.505 ops/s
# Warmup Iteration  22: 1182249.101 ops/s
# Warmup Iteration  23: 1181138.588 ops/s
# Warmup Iteration  24: 1183007.024 ops/s
# Warmup Iteration  25: 1180058.660 ops/s
# Warmup Iteration  26: 1183363.360 ops/s
# Warmup Iteration  27: 1181562.943 ops/s
# Warmup Iteration  28: 1183651.122 ops/s
# Warmup Iteration  29: 1183166.758 ops/s
# Warmup Iteration  30: 1183090.168 ops/s
Iteration   1: 1181446.369 ops/s
Iteration   2: 1183986.988 ops/s
Iteration   3: 1185975.831 ops/s
Iteration   4: 1180129.513 ops/s
Iteration   5: 1182146.523 ops/s
Iteration   6: 1181723.447 ops/s
Iteration   7: 1181955.277 ops/s
Iteration   8: 1184203.319 ops/s
Iteration   9: 1183881.401 ops/s
Iteration  10: 1182780.327 ops/s
Iteration  11: 1182797.291 ops/s
Iteration  12: 1177079.998 ops/s
Iteration  13: 1182513.998 ops/s
Iteration  14: 1185664.957 ops/s
Iteration  15: 1182470.805 ops/s
Iteration  16: 1181789.807 ops/s
Iteration  17: 1181540.986 ops/s
Iteration  18: 1183436.424 ops/s
Iteration  19: 1181539.482 ops/s
Iteration  20: 1184691.406 ops/s
Iteration  21: 1179195.152 ops/s
Iteration  22: 1182012.776 ops/s
Iteration  23: 1183533.613 ops/s
Iteration  24: 1181912.422 ops/s
Iteration  25: 1178711.819 ops/s
Iteration  26: 1182285.199 ops/s
Iteration  27: 1182863.058 ops/s
Iteration  28: 1180312.486 ops/s
Iteration  29: 1178292.380 ops/s
Iteration  30: 1183305.740 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.immutable.ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_get":
  1182139.293 ±(99.9%) 1363.478 ops/s [Average]
  (min, avg, max) = (1177079.998, 1182139.293, 1185975.831), stdev = 2040.790
  CI (99.9%): [1180775.815, 1183502.771] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_get  thrpt   30  1182139.293 ± 1363.478  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.immutable.ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.immutable.ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 241528.625 ops/s
# Warmup Iteration   2: 591368.118 ops/s
# Warmup Iteration   3: 652312.774 ops/s
# Warmup Iteration   4: 655673.022 ops/s
# Warmup Iteration   5: 551846.683 ops/s
# Warmup Iteration   6: 653721.554 ops/s
# Warmup Iteration   7: 659617.059 ops/s
# Warmup Iteration   8: 658346.358 ops/s
# Warmup Iteration   9: 660160.330 ops/s
# Warmup Iteration  10: 658250.718 ops/s
# Warmup Iteration  11: 658428.135 ops/s
# Warmup Iteration  12: 659432.652 ops/s
# Warmup Iteration  13: 658494.279 ops/s
# Warmup Iteration  14: 659034.039 ops/s
# Warmup Iteration  15: 659190.157 ops/s
# Warmup Iteration  16: 658431.790 ops/s
# Warmup Iteration  17: 659178.542 ops/s
# Warmup Iteration  18: 658865.359 ops/s
# Warmup Iteration  19: 657336.391 ops/s
# Warmup Iteration  20: 659366.918 ops/s
# Warmup Iteration  21: 659081.941 ops/s
# Warmup Iteration  22: 658938.020 ops/s
# Warmup Iteration  23: 660357.544 ops/s
# Warmup Iteration  24: 658280.357 ops/s
# Warmup Iteration  25: 659195.419 ops/s
# Warmup Iteration  26: 658908.784 ops/s
# Warmup Iteration  27: 659753.236 ops/s
# Warmup Iteration  28: 658098.824 ops/s
# Warmup Iteration  29: 659775.425 ops/s
# Warmup Iteration  30: 660548.566 ops/s
Iteration   1: 658956.922 ops/s
Iteration   2: 657730.170 ops/s
Iteration   3: 658801.029 ops/s
Iteration   4: 658937.852 ops/s
Iteration   5: 657613.432 ops/s
Iteration   6: 657488.651 ops/s
Iteration   7: 660573.367 ops/s
Iteration   8: 660043.552 ops/s
Iteration   9: 659436.816 ops/s
Iteration  10: 656035.941 ops/s
Iteration  11: 659691.657 ops/s
Iteration  12: 656850.821 ops/s
Iteration  13: 655744.885 ops/s
Iteration  14: 657622.269 ops/s
Iteration  15: 658467.652 ops/s
Iteration  16: 659705.363 ops/s
Iteration  17: 656929.645 ops/s
Iteration  18: 658676.444 ops/s
Iteration  19: 658997.957 ops/s
Iteration  20: 659344.019 ops/s
Iteration  21: 658025.080 ops/s
Iteration  22: 659852.559 ops/s
Iteration  23: 659465.498 ops/s
Iteration  24: 659938.288 ops/s
Iteration  25: 655359.147 ops/s
Iteration  26: 657170.142 ops/s
Iteration  27: 658773.534 ops/s
Iteration  28: 656200.015 ops/s
Iteration  29: 659474.756 ops/s
Iteration  30: 658932.583 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.immutable.ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_isEmpty":
  658361.335 ±(99.9%) 932.969 ops/s [Average]
  (min, avg, max) = (655359.147, 658361.335, 660573.367), stdev = 1396.424
  CI (99.9%): [657428.366, 659294.304] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score     Error  Units
ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_isEmpty  thrpt   30  658361.335 ± 932.969  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.immutable.ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_keySet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.immutable.ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_keySet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 124404.680 ops/s
# Warmup Iteration   2: 248423.382 ops/s
# Warmup Iteration   3: 277405.660 ops/s
# Warmup Iteration   4: 279078.479 ops/s
# Warmup Iteration   5: 245728.856 ops/s
# Warmup Iteration   6: 270114.623 ops/s
# Warmup Iteration   7: 278988.503 ops/s
# Warmup Iteration   8: 279114.103 ops/s
# Warmup Iteration   9: 279391.174 ops/s
# Warmup Iteration  10: 279920.421 ops/s
# Warmup Iteration  11: 279263.035 ops/s
# Warmup Iteration  12: 278714.896 ops/s
# Warmup Iteration  13: 279642.536 ops/s
# Warmup Iteration  14: 279677.612 ops/s
# Warmup Iteration  15: 279959.892 ops/s
# Warmup Iteration  16: 279186.614 ops/s
# Warmup Iteration  17: 276399.879 ops/s
# Warmup Iteration  18: 277425.505 ops/s
# Warmup Iteration  19: 277584.878 ops/s
# Warmup Iteration  20: 277102.168 ops/s
# Warmup Iteration  21: 279470.818 ops/s
# Warmup Iteration  22: 279873.129 ops/s
# Warmup Iteration  23: 279883.437 ops/s
# Warmup Iteration  24: 279212.911 ops/s
# Warmup Iteration  25: 279650.146 ops/s
# Warmup Iteration  26: 279900.147 ops/s
# Warmup Iteration  27: 279169.168 ops/s
# Warmup Iteration  28: 280033.550 ops/s
# Warmup Iteration  29: 279597.921 ops/s
# Warmup Iteration  30: 279530.801 ops/s
Iteration   1: 279429.988 ops/s
Iteration   2: 279484.846 ops/s
Iteration   3: 280325.377 ops/s
Iteration   4: 279040.936 ops/s
Iteration   5: 279403.808 ops/s
Iteration   6: 280425.212 ops/s
Iteration   7: 280274.996 ops/s
Iteration   8: 279977.746 ops/s
Iteration   9: 279911.726 ops/s
Iteration  10: 280306.478 ops/s
Iteration  11: 279228.333 ops/s
Iteration  12: 279080.122 ops/s
Iteration  13: 280005.650 ops/s
Iteration  14: 279514.743 ops/s
Iteration  15: 279013.154 ops/s
Iteration  16: 274159.603 ops/s
Iteration  17: 279250.429 ops/s
Iteration  18: 279067.432 ops/s
Iteration  19: 278728.182 ops/s
Iteration  20: 279385.248 ops/s
Iteration  21: 274981.433 ops/s
Iteration  22: 279671.098 ops/s
Iteration  23: 279326.992 ops/s
Iteration  24: 278684.643 ops/s
Iteration  25: 280557.396 ops/s
Iteration  26: 279776.954 ops/s
Iteration  27: 278321.594 ops/s
Iteration  28: 279578.303 ops/s
Iteration  29: 279360.478 ops/s
Iteration  30: 279012.544 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.immutable.ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_keySet":
  279176.181 ±(99.9%) 914.848 ops/s [Average]
  (min, avg, max) = (274159.603, 279176.181, 280557.396), stdev = 1369.302
  CI (99.9%): [278261.333, 280091.030] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score     Error  Units
ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_keySet  thrpt   30  279176.181 ± 914.848  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.immutable.ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_newWithAll_newWithoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.immutable.ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_newWithAll_newWithoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 98036.419 ops/s
# Warmup Iteration   2: 225871.743 ops/s
# Warmup Iteration   3: 252663.370 ops/s
# Warmup Iteration   4: 252803.108 ops/s
# Warmup Iteration   5: 215010.456 ops/s
# Warmup Iteration   6: 254481.820 ops/s
# Warmup Iteration   7: 251747.977 ops/s
# Warmup Iteration   8: 255059.446 ops/s
# Warmup Iteration   9: 251910.536 ops/s
# Warmup Iteration  10: 252892.552 ops/s
# Warmup Iteration  11: 254098.117 ops/s
# Warmup Iteration  12: 254618.114 ops/s
# Warmup Iteration  13: 254661.689 ops/s
# Warmup Iteration  14: 254352.673 ops/s
# Warmup Iteration  15: 254269.661 ops/s
# Warmup Iteration  16: 255198.927 ops/s
# Warmup Iteration  17: 254402.499 ops/s
# Warmup Iteration  18: 253788.409 ops/s
# Warmup Iteration  19: 254065.365 ops/s
# Warmup Iteration  20: 253544.576 ops/s
# Warmup Iteration  21: 254010.298 ops/s
# Warmup Iteration  22: 254832.067 ops/s
# Warmup Iteration  23: 252289.181 ops/s
# Warmup Iteration  24: 254515.517 ops/s
# Warmup Iteration  25: 253225.543 ops/s
# Warmup Iteration  26: 253776.706 ops/s
# Warmup Iteration  27: 254765.576 ops/s
# Warmup Iteration  28: 254323.035 ops/s
# Warmup Iteration  29: 253053.701 ops/s
# Warmup Iteration  30: 254731.021 ops/s
Iteration   1: 254801.181 ops/s
Iteration   2: 255040.614 ops/s
Iteration   3: 254461.589 ops/s
Iteration   4: 254877.740 ops/s
Iteration   5: 254444.895 ops/s
Iteration   6: 256143.965 ops/s
Iteration   7: 253514.605 ops/s
Iteration   8: 254391.960 ops/s
Iteration   9: 254468.748 ops/s
Iteration  10: 255064.238 ops/s
Iteration  11: 254857.323 ops/s
Iteration  12: 254602.078 ops/s
Iteration  13: 253652.975 ops/s
Iteration  14: 254621.168 ops/s
Iteration  15: 254620.511 ops/s
Iteration  16: 254953.235 ops/s
Iteration  17: 255550.660 ops/s
Iteration  18: 253346.094 ops/s
Iteration  19: 252887.362 ops/s
Iteration  20: 255034.359 ops/s
Iteration  21: 256342.195 ops/s
Iteration  22: 255064.124 ops/s
Iteration  23: 255767.041 ops/s
Iteration  24: 254644.563 ops/s
Iteration  25: 248679.864 ops/s
Iteration  26: 254407.660 ops/s
Iteration  27: 255763.736 ops/s
Iteration  28: 254784.399 ops/s
Iteration  29: 255409.207 ops/s
Iteration  30: 250359.686 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.immutable.ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_newWithAll_newWithoutAll":
  254418.593 ±(99.9%) 1035.149 ops/s [Average]
  (min, avg, max) = (248679.864, 254418.593, 256342.195), stdev = 1549.362
  CI (99.9%): [253383.444, 255453.741] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt       Score      Error  Units
ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_newWithAll_newWithoutAll  thrpt   30  254418.593 ± 1035.149  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.immutable.ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_newWithout$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.immutable.ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_newWithout

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 162061.467 ops/s
# Warmup Iteration   2: 402259.989 ops/s
# Warmup Iteration   3: 444591.751 ops/s
# Warmup Iteration   4: 446044.618 ops/s
# Warmup Iteration   5: 374737.875 ops/s
# Warmup Iteration   6: 445967.930 ops/s
# Warmup Iteration   7: 446987.079 ops/s
# Warmup Iteration   8: 446506.749 ops/s
# Warmup Iteration   9: 446224.953 ops/s
# Warmup Iteration  10: 447405.006 ops/s
# Warmup Iteration  11: 446526.989 ops/s
# Warmup Iteration  12: 440888.527 ops/s
# Warmup Iteration  13: 447583.246 ops/s
# Warmup Iteration  14: 445954.041 ops/s
# Warmup Iteration  15: 447434.352 ops/s
# Warmup Iteration  16: 446742.569 ops/s
# Warmup Iteration  17: 444699.775 ops/s
# Warmup Iteration  18: 445576.206 ops/s
# Warmup Iteration  19: 444211.478 ops/s
# Warmup Iteration  20: 445920.689 ops/s
# Warmup Iteration  21: 445159.619 ops/s
# Warmup Iteration  22: 444563.599 ops/s
# Warmup Iteration  23: 444918.351 ops/s
# Warmup Iteration  24: 445160.606 ops/s
# Warmup Iteration  25: 446328.457 ops/s
# Warmup Iteration  26: 441936.646 ops/s
# Warmup Iteration  27: 445862.922 ops/s
# Warmup Iteration  28: 445817.067 ops/s
# Warmup Iteration  29: 439685.611 ops/s
# Warmup Iteration  30: 446113.924 ops/s
Iteration   1: 445384.744 ops/s
Iteration   2: 445686.564 ops/s
Iteration   3: 446402.322 ops/s
Iteration   4: 444073.915 ops/s
Iteration   5: 444403.381 ops/s
Iteration   6: 445730.547 ops/s
Iteration   7: 446297.581 ops/s
Iteration   8: 445971.997 ops/s
Iteration   9: 444690.095 ops/s
Iteration  10: 445943.311 ops/s
Iteration  11: 445823.458 ops/s
Iteration  12: 445491.324 ops/s
Iteration  13: 446870.774 ops/s
Iteration  14: 445283.821 ops/s
Iteration  15: 444878.268 ops/s
Iteration  16: 445234.140 ops/s
Iteration  17: 445283.159 ops/s
Iteration  18: 440778.104 ops/s
Iteration  19: 445452.409 ops/s
Iteration  20: 446351.504 ops/s
Iteration  21: 445286.193 ops/s
Iteration  22: 445331.316 ops/s
Iteration  23: 445658.996 ops/s
Iteration  24: 446129.623 ops/s
Iteration  25: 447201.828 ops/s
Iteration  26: 446398.750 ops/s
Iteration  27: 446345.463 ops/s
Iteration  28: 445453.146 ops/s
Iteration  29: 447548.925 ops/s
Iteration  30: 447089.957 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.immutable.ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_newWithout":
  445615.854 ±(99.9%) 810.345 ops/s [Average]
  (min, avg, max) = (440778.104, 445615.854, 447548.925), stdev = 1212.886
  CI (99.9%): [444805.509, 446426.199] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score     Error  Units
ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_newWithout  thrpt   30  445615.854 ± 810.345  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.immutable.ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_noDuplicates$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.immutable.ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_noDuplicates

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 172519629.137 ops/s
# Warmup Iteration   2: 297595147.079 ops/s
# Warmup Iteration   3: 279835990.666 ops/s
# Warmup Iteration   4: 313785717.925 ops/s
# Warmup Iteration   5: 313386815.979 ops/s
# Warmup Iteration   6: 311630556.036 ops/s
# Warmup Iteration   7: 310795105.321 ops/s
# Warmup Iteration   8: 312692203.053 ops/s
# Warmup Iteration   9: 313618401.097 ops/s
# Warmup Iteration  10: 313597450.678 ops/s
# Warmup Iteration  11: 314273848.822 ops/s
# Warmup Iteration  12: 309996799.553 ops/s
# Warmup Iteration  13: 311250126.344 ops/s
# Warmup Iteration  14: 309837384.340 ops/s
# Warmup Iteration  15: 313091443.781 ops/s
# Warmup Iteration  16: 309573288.228 ops/s
# Warmup Iteration  17: 310721529.239 ops/s
# Warmup Iteration  18: 312882034.537 ops/s
# Warmup Iteration  19: 313237308.003 ops/s
# Warmup Iteration  20: 310666789.239 ops/s
# Warmup Iteration  21: 310359990.610 ops/s
# Warmup Iteration  22: 312977494.619 ops/s
# Warmup Iteration  23: 312651648.214 ops/s
# Warmup Iteration  24: 310950460.877 ops/s
# Warmup Iteration  25: 311475902.662 ops/s
# Warmup Iteration  26: 309806518.104 ops/s
# Warmup Iteration  27: 313761781.332 ops/s
# Warmup Iteration  28: 310044717.981 ops/s
# Warmup Iteration  29: 311419611.473 ops/s
# Warmup Iteration  30: 310816754.457 ops/s
Iteration   1: 314005533.135 ops/s
Iteration   2: 311503135.770 ops/s
Iteration   3: 313094162.746 ops/s
Iteration   4: 310904145.452 ops/s
Iteration   5: 314163966.699 ops/s
Iteration   6: 312043561.272 ops/s
Iteration   7: 312205183.043 ops/s
Iteration   8: 312188948.778 ops/s
Iteration   9: 313163847.194 ops/s
Iteration  10: 310761064.134 ops/s
Iteration  11: 311516094.487 ops/s
Iteration  12: 311662365.584 ops/s
Iteration  13: 313261150.784 ops/s
Iteration  14: 312633163.918 ops/s
Iteration  15: 312778253.997 ops/s
Iteration  16: 312439242.613 ops/s
Iteration  17: 310424298.989 ops/s
Iteration  18: 312101724.202 ops/s
Iteration  19: 308639281.780 ops/s
Iteration  20: 311485463.419 ops/s
Iteration  21: 310880138.018 ops/s
Iteration  22: 310597627.742 ops/s
Iteration  23: 310720241.350 ops/s
Iteration  24: 307076102.124 ops/s
Iteration  25: 311468579.929 ops/s
Iteration  26: 308332790.924 ops/s
Iteration  27: 312039543.227 ops/s
Iteration  28: 311933133.129 ops/s
Iteration  29: 312334371.302 ops/s
Iteration  30: 312345260.889 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.immutable.ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_noDuplicates":
  311623412.554 ±(99.9%) 1040421.995 ops/s [Average]
  (min, avg, max) = (307076102.124, 311623412.554, 314163966.699), stdev = 1557254.781
  CI (99.9%): [310582990.559, 312663834.550] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt          Score         Error  Units
ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_noDuplicates  thrpt   30  311623412.554 ± 1040421.995  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.immutable.ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_rejectKeysMultiValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.immutable.ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_rejectKeysMultiValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 94519.682 ops/s
# Warmup Iteration   2: 195198.100 ops/s
# Warmup Iteration   3: 229002.827 ops/s
# Warmup Iteration   4: 229582.335 ops/s
# Warmup Iteration   5: 229501.358 ops/s
# Warmup Iteration   6: 193658.080 ops/s
# Warmup Iteration   7: 229663.587 ops/s
# Warmup Iteration   8: 228132.036 ops/s
# Warmup Iteration   9: 228138.719 ops/s
# Warmup Iteration  10: 230363.073 ops/s
# Warmup Iteration  11: 229938.499 ops/s
# Warmup Iteration  12: 229960.163 ops/s
# Warmup Iteration  13: 229348.739 ops/s
# Warmup Iteration  14: 230691.160 ops/s
# Warmup Iteration  15: 229567.715 ops/s
# Warmup Iteration  16: 229567.525 ops/s
# Warmup Iteration  17: 228916.786 ops/s
# Warmup Iteration  18: 229502.101 ops/s
# Warmup Iteration  19: 229811.724 ops/s
# Warmup Iteration  20: 229488.271 ops/s
# Warmup Iteration  21: 229433.806 ops/s
# Warmup Iteration  22: 227615.189 ops/s
# Warmup Iteration  23: 229429.788 ops/s
# Warmup Iteration  24: 229797.892 ops/s
# Warmup Iteration  25: 229795.090 ops/s
# Warmup Iteration  26: 229225.071 ops/s
# Warmup Iteration  27: 229378.585 ops/s
# Warmup Iteration  28: 229651.511 ops/s
# Warmup Iteration  29: 229810.866 ops/s
# Warmup Iteration  30: 229695.116 ops/s
Iteration   1: 229687.870 ops/s
Iteration   2: 230036.887 ops/s
Iteration   3: 229355.119 ops/s
Iteration   4: 229358.830 ops/s
Iteration   5: 230466.609 ops/s
Iteration   6: 228405.035 ops/s
Iteration   7: 229894.555 ops/s
Iteration   8: 228956.235 ops/s
Iteration   9: 230401.453 ops/s
Iteration  10: 229505.755 ops/s
Iteration  11: 229894.050 ops/s
Iteration  12: 230669.690 ops/s
Iteration  13: 229498.489 ops/s
Iteration  14: 230773.408 ops/s
Iteration  15: 229577.596 ops/s
Iteration  16: 229277.490 ops/s
Iteration  17: 226701.309 ops/s
Iteration  18: 229643.863 ops/s
Iteration  19: 229469.993 ops/s
Iteration  20: 229646.372 ops/s
Iteration  21: 230091.092 ops/s
Iteration  22: 229161.536 ops/s
Iteration  23: 229440.894 ops/s
Iteration  24: 226454.490 ops/s
Iteration  25: 229707.648 ops/s
Iteration  26: 230226.381 ops/s
Iteration  27: 229921.955 ops/s
Iteration  28: 230392.743 ops/s
Iteration  29: 230517.067 ops/s
Iteration  30: 230003.184 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.immutable.ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_rejectKeysMultiValues":
  229571.253 ±(99.9%) 647.779 ops/s [Average]
  (min, avg, max) = (226454.490, 229571.253, 230773.408), stdev = 969.565
  CI (99.9%): [228923.474, 230219.032] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score     Error  Units
ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_rejectKeysMultiValues  thrpt   30  229571.253 ± 647.779  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.immutable.ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_rejectKeysValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.immutable.ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_rejectKeysValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 158479.903 ops/s
# Warmup Iteration   2: 344175.269 ops/s
# Warmup Iteration   3: 367250.423 ops/s
# Warmup Iteration   4: 369622.308 ops/s
# Warmup Iteration   5: 314630.762 ops/s
# Warmup Iteration   6: 368605.511 ops/s
# Warmup Iteration   7: 370446.404 ops/s
# Warmup Iteration   8: 369453.770 ops/s
# Warmup Iteration   9: 370897.599 ops/s
# Warmup Iteration  10: 369621.197 ops/s
# Warmup Iteration  11: 370200.519 ops/s
# Warmup Iteration  12: 369150.409 ops/s
# Warmup Iteration  13: 370333.396 ops/s
# Warmup Iteration  14: 370414.580 ops/s
# Warmup Iteration  15: 368843.165 ops/s
# Warmup Iteration  16: 368802.238 ops/s
# Warmup Iteration  17: 366179.523 ops/s
# Warmup Iteration  18: 367299.754 ops/s
# Warmup Iteration  19: 369064.283 ops/s
# Warmup Iteration  20: 371042.988 ops/s
# Warmup Iteration  21: 369366.513 ops/s
# Warmup Iteration  22: 370676.692 ops/s
# Warmup Iteration  23: 367155.566 ops/s
# Warmup Iteration  24: 368362.925 ops/s
# Warmup Iteration  25: 370996.353 ops/s
# Warmup Iteration  26: 366382.879 ops/s
# Warmup Iteration  27: 367657.936 ops/s
# Warmup Iteration  28: 370913.874 ops/s
# Warmup Iteration  29: 371430.211 ops/s
# Warmup Iteration  30: 370591.528 ops/s
Iteration   1: 371614.614 ops/s
Iteration   2: 369827.613 ops/s
Iteration   3: 369895.133 ops/s
Iteration   4: 368664.579 ops/s
Iteration   5: 370678.540 ops/s
Iteration   6: 371626.580 ops/s
Iteration   7: 370374.344 ops/s
Iteration   8: 369271.446 ops/s
Iteration   9: 370222.699 ops/s
Iteration  10: 369190.802 ops/s
Iteration  11: 370305.102 ops/s
Iteration  12: 370595.158 ops/s
Iteration  13: 364712.276 ops/s
Iteration  14: 370287.792 ops/s
Iteration  15: 369672.367 ops/s
Iteration  16: 370462.903 ops/s
Iteration  17: 369077.257 ops/s
Iteration  18: 369971.107 ops/s
Iteration  19: 371669.978 ops/s
Iteration  20: 371726.884 ops/s
Iteration  21: 370748.515 ops/s
Iteration  22: 370324.742 ops/s
Iteration  23: 371135.027 ops/s
Iteration  24: 370500.100 ops/s
Iteration  25: 370527.448 ops/s
Iteration  26: 370223.202 ops/s
Iteration  27: 371404.053 ops/s
Iteration  28: 369287.758 ops/s
Iteration  29: 369665.393 ops/s
Iteration  30: 364756.026 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.immutable.ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_rejectKeysValues":
  369947.315 ±(99.9%) 1087.866 ops/s [Average]
  (min, avg, max) = (364712.276, 369947.315, 371726.884), stdev = 1628.267
  CI (99.9%): [368859.449, 371035.181] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_rejectKeysValues  thrpt   30  369947.315 ± 1087.866  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.immutable.ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_selectKeysMultiValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.immutable.ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_selectKeysMultiValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 77107.851 ops/s
# Warmup Iteration   2: 164612.551 ops/s
# Warmup Iteration   3: 176811.967 ops/s
# Warmup Iteration   4: 177776.309 ops/s
# Warmup Iteration   5: 151378.769 ops/s
# Warmup Iteration   6: 178621.835 ops/s
# Warmup Iteration   7: 178137.240 ops/s
# Warmup Iteration   8: 177807.875 ops/s
# Warmup Iteration   9: 178347.815 ops/s
# Warmup Iteration  10: 177825.590 ops/s
# Warmup Iteration  11: 178160.325 ops/s
# Warmup Iteration  12: 178307.875 ops/s
# Warmup Iteration  13: 178178.393 ops/s
# Warmup Iteration  14: 177446.438 ops/s
# Warmup Iteration  15: 176677.213 ops/s
# Warmup Iteration  16: 177121.013 ops/s
# Warmup Iteration  17: 178442.879 ops/s
# Warmup Iteration  18: 177788.862 ops/s
# Warmup Iteration  19: 176437.237 ops/s
# Warmup Iteration  20: 178292.624 ops/s
# Warmup Iteration  21: 177527.309 ops/s
# Warmup Iteration  22: 177891.570 ops/s
# Warmup Iteration  23: 178335.875 ops/s
# Warmup Iteration  24: 178084.790 ops/s
# Warmup Iteration  25: 177616.177 ops/s
# Warmup Iteration  26: 177563.584 ops/s
# Warmup Iteration  27: 177988.745 ops/s
# Warmup Iteration  28: 178384.274 ops/s
# Warmup Iteration  29: 178071.967 ops/s
# Warmup Iteration  30: 177792.614 ops/s
Iteration   1: 178323.323 ops/s
Iteration   2: 177430.201 ops/s
Iteration   3: 178090.795 ops/s
Iteration   4: 177557.895 ops/s
Iteration   5: 177965.973 ops/s
Iteration   6: 177522.660 ops/s
Iteration   7: 175529.447 ops/s
Iteration   8: 179040.880 ops/s
Iteration   9: 178280.207 ops/s
Iteration  10: 177036.892 ops/s
Iteration  11: 177568.795 ops/s
Iteration  12: 177819.229 ops/s
Iteration  13: 178002.247 ops/s
Iteration  14: 178313.883 ops/s
Iteration  15: 177738.844 ops/s
Iteration  16: 177172.534 ops/s
Iteration  17: 177669.571 ops/s
Iteration  18: 174805.108 ops/s
Iteration  19: 178000.538 ops/s
Iteration  20: 177976.432 ops/s
Iteration  21: 177919.947 ops/s
Iteration  22: 177961.979 ops/s
Iteration  23: 177019.583 ops/s
Iteration  24: 177146.058 ops/s
Iteration  25: 178240.669 ops/s
Iteration  26: 177883.170 ops/s
Iteration  27: 177366.673 ops/s
Iteration  28: 178289.283 ops/s
Iteration  29: 178715.666 ops/s
Iteration  30: 178023.430 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.immutable.ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_selectKeysMultiValues":
  177680.397 ±(99.9%) 556.848 ops/s [Average]
  (min, avg, max) = (174805.108, 177680.397, 179040.880), stdev = 833.464
  CI (99.9%): [177123.549, 178237.245] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score     Error  Units
ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_selectKeysMultiValues  thrpt   30  177680.397 ± 556.848  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.immutable.ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_selectKeysValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.immutable.ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_selectKeysValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 159694.721 ops/s
# Warmup Iteration   2: 362597.537 ops/s
# Warmup Iteration   3: 385142.073 ops/s
# Warmup Iteration   4: 388033.296 ops/s
# Warmup Iteration   5: 328136.376 ops/s
# Warmup Iteration   6: 385107.643 ops/s
# Warmup Iteration   7: 387299.289 ops/s
# Warmup Iteration   8: 388597.901 ops/s
# Warmup Iteration   9: 387963.182 ops/s
# Warmup Iteration  10: 386343.663 ops/s
# Warmup Iteration  11: 386536.229 ops/s
# Warmup Iteration  12: 387500.333 ops/s
# Warmup Iteration  13: 389310.117 ops/s
# Warmup Iteration  14: 389160.840 ops/s
# Warmup Iteration  15: 387166.601 ops/s
# Warmup Iteration  16: 388289.037 ops/s
# Warmup Iteration  17: 387138.914 ops/s
# Warmup Iteration  18: 389098.662 ops/s
# Warmup Iteration  19: 388395.165 ops/s
# Warmup Iteration  20: 387820.582 ops/s
# Warmup Iteration  21: 387553.660 ops/s
# Warmup Iteration  22: 387549.239 ops/s
# Warmup Iteration  23: 387710.609 ops/s
# Warmup Iteration  24: 387530.666 ops/s
# Warmup Iteration  25: 388913.223 ops/s
# Warmup Iteration  26: 388486.731 ops/s
# Warmup Iteration  27: 388215.315 ops/s
# Warmup Iteration  28: 387360.189 ops/s
# Warmup Iteration  29: 389014.654 ops/s
# Warmup Iteration  30: 388127.885 ops/s
Iteration   1: 387412.345 ops/s
Iteration   2: 385472.435 ops/s
Iteration   3: 389443.209 ops/s
Iteration   4: 387836.273 ops/s
Iteration   5: 388566.348 ops/s
Iteration   6: 388463.803 ops/s
Iteration   7: 390108.495 ops/s
Iteration   8: 387723.944 ops/s
Iteration   9: 389108.564 ops/s
Iteration  10: 388710.514 ops/s
Iteration  11: 389040.362 ops/s
Iteration  12: 389814.811 ops/s
Iteration  13: 388477.861 ops/s
Iteration  14: 387693.525 ops/s
Iteration  15: 388621.037 ops/s
Iteration  16: 389439.706 ops/s
Iteration  17: 391065.623 ops/s
Iteration  18: 388085.334 ops/s
Iteration  19: 389758.877 ops/s
Iteration  20: 387257.196 ops/s
Iteration  21: 388708.331 ops/s
Iteration  22: 388089.112 ops/s
Iteration  23: 390725.978 ops/s
Iteration  24: 390169.171 ops/s
Iteration  25: 389318.731 ops/s
Iteration  26: 387597.727 ops/s
Iteration  27: 389874.787 ops/s
Iteration  28: 386029.363 ops/s
Iteration  29: 390684.528 ops/s
Iteration  30: 390600.733 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.immutable.ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_selectKeysValues":
  388796.624 ±(99.9%) 900.819 ops/s [Average]
  (min, avg, max) = (385472.435, 388796.624, 391065.623), stdev = 1348.303
  CI (99.9%): [387895.805, 389697.443] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score     Error  Units
ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_selectKeysValues  thrpt   30  388796.624 ± 900.819  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.immutable.ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.immutable.ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 265829.500 ops/s
# Warmup Iteration   2: 651961.964 ops/s
# Warmup Iteration   3: 693895.921 ops/s
# Warmup Iteration   4: 622571.003 ops/s
# Warmup Iteration   5: 661266.276 ops/s
# Warmup Iteration   6: 698462.719 ops/s
# Warmup Iteration   7: 694413.278 ops/s
# Warmup Iteration   8: 696286.337 ops/s
# Warmup Iteration   9: 694712.559 ops/s
# Warmup Iteration  10: 699858.230 ops/s
# Warmup Iteration  11: 695481.493 ops/s
# Warmup Iteration  12: 699750.468 ops/s
# Warmup Iteration  13: 695816.901 ops/s
# Warmup Iteration  14: 695707.891 ops/s
# Warmup Iteration  15: 697531.617 ops/s
# Warmup Iteration  16: 697986.933 ops/s
# Warmup Iteration  17: 698680.057 ops/s
# Warmup Iteration  18: 695162.689 ops/s
# Warmup Iteration  19: 693400.984 ops/s
# Warmup Iteration  20: 690972.216 ops/s
# Warmup Iteration  21: 696510.582 ops/s
# Warmup Iteration  22: 698386.710 ops/s
# Warmup Iteration  23: 699043.887 ops/s
# Warmup Iteration  24: 694890.876 ops/s
# Warmup Iteration  25: 696499.279 ops/s
# Warmup Iteration  26: 697695.428 ops/s
# Warmup Iteration  27: 693484.549 ops/s
# Warmup Iteration  28: 697955.393 ops/s
# Warmup Iteration  29: 698064.463 ops/s
# Warmup Iteration  30: 695383.548 ops/s
Iteration   1: 697213.250 ops/s
Iteration   2: 698841.696 ops/s
Iteration   3: 696091.971 ops/s
Iteration   4: 699632.599 ops/s
Iteration   5: 696878.080 ops/s
Iteration   6: 696888.825 ops/s
Iteration   7: 693535.713 ops/s
Iteration   8: 694348.381 ops/s
Iteration   9: 698894.098 ops/s
Iteration  10: 693545.641 ops/s
Iteration  11: 695023.328 ops/s
Iteration  12: 694927.805 ops/s
Iteration  13: 696644.073 ops/s
Iteration  14: 698353.657 ops/s
Iteration  15: 696486.583 ops/s
Iteration  16: 694730.553 ops/s
Iteration  17: 697065.270 ops/s
Iteration  18: 694203.327 ops/s
Iteration  19: 692104.788 ops/s
Iteration  20: 692061.081 ops/s
Iteration  21: 701817.183 ops/s
Iteration  22: 695188.928 ops/s
Iteration  23: 695387.865 ops/s
Iteration  24: 697259.616 ops/s
Iteration  25: 699608.970 ops/s
Iteration  26: 699901.226 ops/s
Iteration  27: 691720.356 ops/s
Iteration  28: 697068.378 ops/s
Iteration  29: 693791.493 ops/s
Iteration  30: 693426.621 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.immutable.ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_size":
  696088.045 ±(99.9%) 1700.632 ops/s [Average]
  (min, avg, max) = (691720.356, 696088.045, 701817.183), stdev = 2545.426
  CI (99.9%): [694387.413, 697788.677] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_size  thrpt   30  696088.045 ± 1700.632  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.immutable.ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_testSerialization$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.immutable.ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_testSerialization

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 44736.964 ops/s
# Warmup Iteration   2: 81862.846 ops/s
# Warmup Iteration   3: 102879.266 ops/s
# Warmup Iteration   4: 103131.970 ops/s
# Warmup Iteration   5: 103205.272 ops/s
# Warmup Iteration   6: 88130.511 ops/s
# Warmup Iteration   7: 103112.242 ops/s
# Warmup Iteration   8: 103303.937 ops/s
# Warmup Iteration   9: 103479.234 ops/s
# Warmup Iteration  10: 103114.761 ops/s
# Warmup Iteration  11: 103146.959 ops/s
# Warmup Iteration  12: 103276.177 ops/s
# Warmup Iteration  13: 103053.225 ops/s
# Warmup Iteration  14: 102756.478 ops/s
# Warmup Iteration  15: 103069.132 ops/s
# Warmup Iteration  16: 103126.429 ops/s
# Warmup Iteration  17: 103243.341 ops/s
# Warmup Iteration  18: 103175.257 ops/s
# Warmup Iteration  19: 103346.256 ops/s
# Warmup Iteration  20: 103308.140 ops/s
# Warmup Iteration  21: 102941.912 ops/s
# Warmup Iteration  22: 103408.680 ops/s
# Warmup Iteration  23: 103396.340 ops/s
# Warmup Iteration  24: 103745.181 ops/s
# Warmup Iteration  25: 103503.176 ops/s
# Warmup Iteration  26: 103281.915 ops/s
# Warmup Iteration  27: 103477.095 ops/s
# Warmup Iteration  28: 103519.637 ops/s
# Warmup Iteration  29: 103113.535 ops/s
# Warmup Iteration  30: 103184.456 ops/s
Iteration   1: 103367.733 ops/s
Iteration   2: 103590.833 ops/s
Iteration   3: 103181.730 ops/s
Iteration   4: 103110.785 ops/s
Iteration   5: 103113.945 ops/s
Iteration   6: 103483.911 ops/s
Iteration   7: 103003.092 ops/s
Iteration   8: 103554.818 ops/s
Iteration   9: 102933.612 ops/s
Iteration  10: 103259.136 ops/s
Iteration  11: 103110.649 ops/s
Iteration  12: 103072.141 ops/s
Iteration  13: 103696.676 ops/s
Iteration  14: 102834.102 ops/s
Iteration  15: 102558.636 ops/s
Iteration  16: 102725.928 ops/s
Iteration  17: 103555.634 ops/s
Iteration  18: 103182.565 ops/s
Iteration  19: 102987.019 ops/s
Iteration  20: 102689.586 ops/s
Iteration  21: 102828.681 ops/s
Iteration  22: 102810.757 ops/s
Iteration  23: 103000.242 ops/s
Iteration  24: 102627.156 ops/s
Iteration  25: 102980.599 ops/s
Iteration  26: 102988.356 ops/s
Iteration  27: 102926.290 ops/s
Iteration  28: 102574.224 ops/s
Iteration  29: 102189.013 ops/s
Iteration  30: 102704.191 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.immutable.ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_testSerialization":
  103021.401 ±(99.9%) 232.696 ops/s [Average]
  (min, avg, max) = (102189.013, 103021.401, 103696.676), stdev = 348.289
  CI (99.9%): [102788.705, 103254.098] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score     Error  Units
ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_testSerialization  thrpt   30  103021.401 ± 232.696  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.immutable.ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_toImmutable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.immutable.ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_toImmutable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 18900442.649 ops/s
# Warmup Iteration   2: 32384828.036 ops/s
# Warmup Iteration   3: 37241382.666 ops/s
# Warmup Iteration   4: 37256561.661 ops/s
# Warmup Iteration   5: 37167188.470 ops/s
# Warmup Iteration   6: 37093349.749 ops/s
# Warmup Iteration   7: 36789667.582 ops/s
# Warmup Iteration   8: 37279668.511 ops/s
# Warmup Iteration   9: 37323200.695 ops/s
# Warmup Iteration  10: 37326216.677 ops/s
# Warmup Iteration  11: 37044460.445 ops/s
# Warmup Iteration  12: 36531437.565 ops/s
# Warmup Iteration  13: 36949753.812 ops/s
# Warmup Iteration  14: 36954488.883 ops/s
# Warmup Iteration  15: 36806902.414 ops/s
# Warmup Iteration  16: 36903302.080 ops/s
# Warmup Iteration  17: 36947871.173 ops/s
# Warmup Iteration  18: 36426690.135 ops/s
# Warmup Iteration  19: 36523427.472 ops/s
# Warmup Iteration  20: 36700376.169 ops/s
# Warmup Iteration  21: 36796916.868 ops/s
# Warmup Iteration  22: 36423092.722 ops/s
# Warmup Iteration  23: 36325032.989 ops/s
# Warmup Iteration  24: 36713984.329 ops/s
# Warmup Iteration  25: 36789547.977 ops/s
# Warmup Iteration  26: 36460155.210 ops/s
# Warmup Iteration  27: 36468915.472 ops/s
# Warmup Iteration  28: 36691190.090 ops/s
# Warmup Iteration  29: 36544454.882 ops/s
# Warmup Iteration  30: 36566333.465 ops/s
Iteration   1: 36236852.212 ops/s
Iteration   2: 36575914.549 ops/s
Iteration   3: 36931852.754 ops/s
Iteration   4: 36757239.696 ops/s
Iteration   5: 36098115.589 ops/s
Iteration   6: 36623590.011 ops/s
Iteration   7: 36459354.544 ops/s
Iteration   8: 36180224.510 ops/s
Iteration   9: 36901010.331 ops/s
Iteration  10: 36898180.938 ops/s
Iteration  11: 36617554.663 ops/s
Iteration  12: 36221051.767 ops/s
Iteration  13: 36674388.322 ops/s
Iteration  14: 36641656.455 ops/s
Iteration  15: 36393724.954 ops/s
Iteration  16: 36723028.774 ops/s
Iteration  17: 36911793.033 ops/s
Iteration  18: 36529600.297 ops/s
Iteration  19: 36156328.453 ops/s
Iteration  20: 36511569.947 ops/s
Iteration  21: 36172360.909 ops/s
Iteration  22: 36273956.719 ops/s
Iteration  23: 36574978.839 ops/s
Iteration  24: 37150164.713 ops/s
Iteration  25: 36709422.893 ops/s
Iteration  26: 36636524.768 ops/s
Iteration  27: 36283300.328 ops/s
Iteration  28: 36542602.406 ops/s
Iteration  29: 36241412.503 ops/s
Iteration  30: 36161536.382 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.immutable.ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_toImmutable":
  36526309.742 ±(99.9%) 187263.953 ops/s [Average]
  (min, avg, max) = (36098115.589, 36526309.742, 37150164.713), stdev = 280287.891
  CI (99.9%): [36339045.789, 36713573.695] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt         Score        Error  Units
ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_toImmutable  thrpt   30  36526309.742 ± 187263.953  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.immutable.ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_toMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.immutable.ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_toMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 613577.913 ops/s
# Warmup Iteration   2: 1750710.465 ops/s
# Warmup Iteration   3: 1503888.645 ops/s
# Warmup Iteration   4: 1743736.456 ops/s
# Warmup Iteration   5: 1770212.520 ops/s
# Warmup Iteration   6: 1772962.931 ops/s
# Warmup Iteration   7: 1776460.789 ops/s
# Warmup Iteration   8: 1765744.309 ops/s
# Warmup Iteration   9: 1765420.011 ops/s
# Warmup Iteration  10: 1769812.362 ops/s
# Warmup Iteration  11: 1772550.867 ops/s
# Warmup Iteration  12: 1765169.464 ops/s
# Warmup Iteration  13: 1766766.232 ops/s
# Warmup Iteration  14: 1771621.961 ops/s
# Warmup Iteration  15: 1762697.211 ops/s
# Warmup Iteration  16: 1764855.935 ops/s
# Warmup Iteration  17: 1766993.191 ops/s
# Warmup Iteration  18: 1769042.106 ops/s
# Warmup Iteration  19: 1762165.552 ops/s
# Warmup Iteration  20: 1763322.877 ops/s
# Warmup Iteration  21: 1775297.705 ops/s
# Warmup Iteration  22: 1767247.134 ops/s
# Warmup Iteration  23: 1770208.808 ops/s
# Warmup Iteration  24: 1766653.828 ops/s
# Warmup Iteration  25: 1769203.026 ops/s
# Warmup Iteration  26: 1765798.441 ops/s
# Warmup Iteration  27: 1759141.353 ops/s
# Warmup Iteration  28: 1772344.578 ops/s
# Warmup Iteration  29: 1772850.859 ops/s
# Warmup Iteration  30: 1761371.418 ops/s
Iteration   1: 1760932.321 ops/s
Iteration   2: 1763507.166 ops/s
Iteration   3: 1771973.084 ops/s
Iteration   4: 1769868.652 ops/s
Iteration   5: 1768651.748 ops/s
Iteration   6: 1765095.970 ops/s
Iteration   7: 1772248.488 ops/s
Iteration   8: 1765448.340 ops/s
Iteration   9: 1760925.785 ops/s
Iteration  10: 1767225.920 ops/s
Iteration  11: 1770093.512 ops/s
Iteration  12: 1762432.744 ops/s
Iteration  13: 1769781.394 ops/s
Iteration  14: 1764117.260 ops/s
Iteration  15: 1765582.017 ops/s
Iteration  16: 1768182.715 ops/s
Iteration  17: 1765951.452 ops/s
Iteration  18: 1767676.922 ops/s
Iteration  19: 1767848.497 ops/s
Iteration  20: 1773549.659 ops/s
Iteration  21: 1772028.814 ops/s
Iteration  22: 1771522.670 ops/s
Iteration  23: 1767661.050 ops/s
Iteration  24: 1771137.256 ops/s
Iteration  25: 1772739.813 ops/s
Iteration  26: 1760414.961 ops/s
Iteration  27: 1758335.372 ops/s
Iteration  28: 1770948.041 ops/s
Iteration  29: 1773382.839 ops/s
Iteration  30: 1771131.156 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.immutable.ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_toMap":
  1767679.854 ±(99.9%) 2841.350 ops/s [Average]
  (min, avg, max) = (1758335.372, 1767679.854, 1773549.659), stdev = 4252.800
  CI (99.9%): [1764838.503, 1770521.204] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableSortedBagMultimapImplTest._Benchmark.benchmark_toMap  thrpt   30  1767679.854 ± 2841.350  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_addAndGrowMultimap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_addAndGrowMultimap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 359465.685 ops/s
# Warmup Iteration   2: 744846.780 ops/s
# Warmup Iteration   3: 891376.371 ops/s
# Warmup Iteration   4: 894517.217 ops/s
# Warmup Iteration   5: 753791.237 ops/s
# Warmup Iteration   6: 897375.389 ops/s
# Warmup Iteration   7: 896434.067 ops/s
# Warmup Iteration   8: 899598.677 ops/s
# Warmup Iteration   9: 898170.966 ops/s
# Warmup Iteration  10: 894246.105 ops/s
# Warmup Iteration  11: 896355.894 ops/s
# Warmup Iteration  12: 898261.969 ops/s
# Warmup Iteration  13: 898741.908 ops/s
# Warmup Iteration  14: 896574.848 ops/s
# Warmup Iteration  15: 896969.261 ops/s
# Warmup Iteration  16: 901614.851 ops/s
# Warmup Iteration  17: 901596.976 ops/s
# Warmup Iteration  18: 902685.475 ops/s
# Warmup Iteration  19: 904829.654 ops/s
# Warmup Iteration  20: 899477.847 ops/s
# Warmup Iteration  21: 902293.735 ops/s
# Warmup Iteration  22: 901065.705 ops/s
# Warmup Iteration  23: 903486.872 ops/s
# Warmup Iteration  24: 902536.749 ops/s
# Warmup Iteration  25: 901027.217 ops/s
# Warmup Iteration  26: 901545.001 ops/s
# Warmup Iteration  27: 902752.996 ops/s
# Warmup Iteration  28: 901725.530 ops/s
# Warmup Iteration  29: 902977.324 ops/s
# Warmup Iteration  30: 900337.198 ops/s
Iteration   1: 901878.255 ops/s
Iteration   2: 906707.549 ops/s
Iteration   3: 902229.156 ops/s
Iteration   4: 900360.605 ops/s
Iteration   5: 900003.042 ops/s
Iteration   6: 899439.052 ops/s
Iteration   7: 899231.251 ops/s
Iteration   8: 900427.614 ops/s
Iteration   9: 896783.003 ops/s
Iteration  10: 902107.269 ops/s
Iteration  11: 895934.652 ops/s
Iteration  12: 900553.729 ops/s
Iteration  13: 900135.119 ops/s
Iteration  14: 902472.664 ops/s
Iteration  15: 902792.740 ops/s
Iteration  16: 900987.593 ops/s
Iteration  17: 904182.233 ops/s
Iteration  18: 903227.534 ops/s
Iteration  19: 901656.196 ops/s
Iteration  20: 902412.777 ops/s
Iteration  21: 905178.826 ops/s
Iteration  22: 903574.733 ops/s
Iteration  23: 897202.029 ops/s
Iteration  24: 901495.428 ops/s
Iteration  25: 902480.346 ops/s
Iteration  26: 900069.394 ops/s
Iteration  27: 901574.695 ops/s
Iteration  28: 904772.636 ops/s
Iteration  29: 902343.313 ops/s
Iteration  30: 901617.153 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_addAndGrowMultimap":
  901461.020 ±(99.9%) 1583.267 ops/s [Average]
  (min, avg, max) = (895934.652, 901461.020, 906707.549), stdev = 2369.760
  CI (99.9%): [899877.752, 903044.287] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
SynchronizedSortedBagMultimapTest._Benchmark.benchmark_addAndGrowMultimap  thrpt   30  901461.020 ± 1583.267  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 581716.564 ops/s
# Warmup Iteration   2: 1277037.363 ops/s
# Warmup Iteration   3: 1961292.593 ops/s
# Warmup Iteration   4: 1663320.730 ops/s
# Warmup Iteration   5: 1974972.369 ops/s
# Warmup Iteration   6: 1976937.938 ops/s
# Warmup Iteration   7: 1969048.072 ops/s
# Warmup Iteration   8: 1969223.379 ops/s
# Warmup Iteration   9: 1980126.846 ops/s
# Warmup Iteration  10: 1981443.672 ops/s
# Warmup Iteration  11: 1972852.472 ops/s
# Warmup Iteration  12: 1972458.746 ops/s
# Warmup Iteration  13: 1977755.560 ops/s
# Warmup Iteration  14: 1971035.220 ops/s
# Warmup Iteration  15: 1977961.655 ops/s
# Warmup Iteration  16: 1970261.533 ops/s
# Warmup Iteration  17: 1965657.127 ops/s
# Warmup Iteration  18: 1969237.888 ops/s
# Warmup Iteration  19: 1971792.191 ops/s
# Warmup Iteration  20: 1967028.431 ops/s
# Warmup Iteration  21: 1967886.409 ops/s
# Warmup Iteration  22: 1971908.181 ops/s
# Warmup Iteration  23: 1967221.727 ops/s
# Warmup Iteration  24: 1966931.029 ops/s
# Warmup Iteration  25: 1975954.805 ops/s
# Warmup Iteration  26: 1969430.132 ops/s
# Warmup Iteration  27: 1973633.439 ops/s
# Warmup Iteration  28: 1966893.176 ops/s
# Warmup Iteration  29: 1966865.302 ops/s
# Warmup Iteration  30: 1976039.722 ops/s
Iteration   1: 1974118.140 ops/s
Iteration   2: 1969842.252 ops/s
Iteration   3: 1973700.915 ops/s
Iteration   4: 1975411.439 ops/s
Iteration   5: 1972617.651 ops/s
Iteration   6: 1974848.009 ops/s
Iteration   7: 1971729.470 ops/s
Iteration   8: 1980948.311 ops/s
Iteration   9: 1971673.245 ops/s
Iteration  10: 1968851.942 ops/s
Iteration  11: 1970195.715 ops/s
Iteration  12: 1965415.725 ops/s
Iteration  13: 1973155.699 ops/s
Iteration  14: 1976486.546 ops/s
Iteration  15: 1974073.256 ops/s
Iteration  16: 1960873.018 ops/s
Iteration  17: 1968448.082 ops/s
Iteration  18: 1969378.052 ops/s
Iteration  19: 1977635.750 ops/s
Iteration  20: 1970773.188 ops/s
Iteration  21: 1974197.102 ops/s
Iteration  22: 1976664.373 ops/s
Iteration  23: 1965172.800 ops/s
Iteration  24: 1977212.512 ops/s
Iteration  25: 1974666.529 ops/s
Iteration  26: 1960705.007 ops/s
Iteration  27: 1979867.494 ops/s
Iteration  28: 1969858.044 ops/s
Iteration  29: 1974049.841 ops/s
Iteration  30: 1968871.734 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_clear":
  1972048.061 ±(99.9%) 3251.184 ops/s [Average]
  (min, avg, max) = (1960705.007, 1972048.061, 1980948.311), stdev = 4866.220
  CI (99.9%): [1968796.877, 1975299.246] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
SynchronizedSortedBagMultimapTest._Benchmark.benchmark_clear  thrpt   30  1972048.061 ± 3251.184  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_collectKeyMultiValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_collectKeyMultiValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 32106.179 ops/s
# Warmup Iteration   2: 65317.708 ops/s
# Warmup Iteration   3: 80386.511 ops/s
# Warmup Iteration   4: 81450.175 ops/s
# Warmup Iteration   5: 81056.041 ops/s
# Warmup Iteration   6: 67484.226 ops/s
# Warmup Iteration   7: 81223.856 ops/s
# Warmup Iteration   8: 80850.686 ops/s
# Warmup Iteration   9: 81245.589 ops/s
# Warmup Iteration  10: 80969.558 ops/s
# Warmup Iteration  11: 81095.909 ops/s
# Warmup Iteration  12: 81073.510 ops/s
# Warmup Iteration  13: 80880.844 ops/s
# Warmup Iteration  14: 80703.330 ops/s
# Warmup Iteration  15: 81157.056 ops/s
# Warmup Iteration  16: 81240.186 ops/s
# Warmup Iteration  17: 81359.367 ops/s
# Warmup Iteration  18: 81147.361 ops/s
# Warmup Iteration  19: 81084.742 ops/s
# Warmup Iteration  20: 81128.792 ops/s
# Warmup Iteration  21: 80810.728 ops/s
# Warmup Iteration  22: 81083.179 ops/s
# Warmup Iteration  23: 81128.115 ops/s
# Warmup Iteration  24: 80797.733 ops/s
# Warmup Iteration  25: 80845.240 ops/s
# Warmup Iteration  26: 80989.373 ops/s
# Warmup Iteration  27: 81090.934 ops/s
# Warmup Iteration  28: 81051.804 ops/s
# Warmup Iteration  29: 80706.747 ops/s
# Warmup Iteration  30: 81250.551 ops/s
Iteration   1: 81140.211 ops/s
Iteration   2: 80873.092 ops/s
Iteration   3: 80849.142 ops/s
Iteration   4: 80913.273 ops/s
Iteration   5: 81156.710 ops/s
Iteration   6: 80351.301 ops/s
Iteration   7: 79730.466 ops/s
Iteration   8: 80454.571 ops/s
Iteration   9: 80878.644 ops/s
Iteration  10: 80828.250 ops/s
Iteration  11: 80873.222 ops/s
Iteration  12: 79450.662 ops/s
Iteration  13: 81093.741 ops/s
Iteration  14: 80955.612 ops/s
Iteration  15: 80569.592 ops/s
Iteration  16: 80809.858 ops/s
Iteration  17: 80806.249 ops/s
Iteration  18: 80917.748 ops/s
Iteration  19: 81031.726 ops/s
Iteration  20: 81059.917 ops/s
Iteration  21: 80686.937 ops/s
Iteration  22: 80923.506 ops/s
Iteration  23: 81089.215 ops/s
Iteration  24: 79871.868 ops/s
Iteration  25: 80813.465 ops/s
Iteration  26: 81089.384 ops/s
Iteration  27: 80527.143 ops/s
Iteration  28: 80914.820 ops/s
Iteration  29: 81020.714 ops/s
Iteration  30: 81094.547 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_collectKeyMultiValues":
  80759.186 ±(99.9%) 279.910 ops/s [Average]
  (min, avg, max) = (79450.662, 80759.186, 81156.710), stdev = 418.956
  CI (99.9%): [80479.276, 81039.096] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt      Score     Error  Units
SynchronizedSortedBagMultimapTest._Benchmark.benchmark_collectKeyMultiValues  thrpt   30  80759.186 ± 279.910  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_collectKeysValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_collectKeysValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 44502.339 ops/s
# Warmup Iteration   2: 89569.898 ops/s
# Warmup Iteration   3: 104790.318 ops/s
# Warmup Iteration   4: 105799.835 ops/s
# Warmup Iteration   5: 103589.928 ops/s
# Warmup Iteration   6: 88876.897 ops/s
# Warmup Iteration   7: 105368.513 ops/s
# Warmup Iteration   8: 104835.234 ops/s
# Warmup Iteration   9: 105001.885 ops/s
# Warmup Iteration  10: 104650.785 ops/s
# Warmup Iteration  11: 104390.368 ops/s
# Warmup Iteration  12: 104419.437 ops/s
# Warmup Iteration  13: 104718.577 ops/s
# Warmup Iteration  14: 105442.592 ops/s
# Warmup Iteration  15: 104493.359 ops/s
# Warmup Iteration  16: 105780.190 ops/s
# Warmup Iteration  17: 105146.225 ops/s
# Warmup Iteration  18: 105073.618 ops/s
# Warmup Iteration  19: 105725.848 ops/s
# Warmup Iteration  20: 105808.378 ops/s
# Warmup Iteration  21: 105638.491 ops/s
# Warmup Iteration  22: 105287.324 ops/s
# Warmup Iteration  23: 105575.135 ops/s
# Warmup Iteration  24: 105634.641 ops/s
# Warmup Iteration  25: 105623.648 ops/s
# Warmup Iteration  26: 105590.357 ops/s
# Warmup Iteration  27: 104996.738 ops/s
# Warmup Iteration  28: 104477.211 ops/s
# Warmup Iteration  29: 104961.814 ops/s
# Warmup Iteration  30: 104891.871 ops/s
Iteration   1: 105967.911 ops/s
Iteration   2: 105291.623 ops/s
Iteration   3: 105381.291 ops/s
Iteration   4: 104950.676 ops/s
Iteration   5: 104708.259 ops/s
Iteration   6: 105181.059 ops/s
Iteration   7: 105163.460 ops/s
Iteration   8: 104686.401 ops/s
Iteration   9: 105177.253 ops/s
Iteration  10: 104487.710 ops/s
Iteration  11: 105092.132 ops/s
Iteration  12: 105369.802 ops/s
Iteration  13: 105044.602 ops/s
Iteration  14: 105082.665 ops/s
Iteration  15: 105016.038 ops/s
Iteration  16: 105371.896 ops/s
Iteration  17: 105316.514 ops/s
Iteration  18: 105735.039 ops/s
Iteration  19: 104991.453 ops/s
Iteration  20: 105211.160 ops/s
Iteration  21: 105371.061 ops/s
Iteration  22: 104031.774 ops/s
Iteration  23: 104128.145 ops/s
Iteration  24: 105181.491 ops/s
Iteration  25: 105079.929 ops/s
Iteration  26: 105910.377 ops/s
Iteration  27: 105626.288 ops/s
Iteration  28: 105296.912 ops/s
Iteration  29: 105252.629 ops/s
Iteration  30: 104247.366 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_collectKeysValues":
  105111.764 ±(99.9%) 307.012 ops/s [Average]
  (min, avg, max) = (104031.774, 105111.764, 105967.911), stdev = 459.520
  CI (99.9%): [104804.752, 105418.775] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score     Error  Units
SynchronizedSortedBagMultimapTest._Benchmark.benchmark_collectKeysValues  thrpt   30  105111.764 ± 307.012  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_collectValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_collectValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 140505.973 ops/s
# Warmup Iteration   2: 325921.719 ops/s
# Warmup Iteration   3: 359165.335 ops/s
# Warmup Iteration   4: 362506.120 ops/s
# Warmup Iteration   5: 303497.273 ops/s
# Warmup Iteration   6: 363143.814 ops/s
# Warmup Iteration   7: 362664.841 ops/s
# Warmup Iteration   8: 362496.319 ops/s
# Warmup Iteration   9: 362360.851 ops/s
# Warmup Iteration  10: 362527.309 ops/s
# Warmup Iteration  11: 362594.688 ops/s
# Warmup Iteration  12: 363016.100 ops/s
# Warmup Iteration  13: 362036.652 ops/s
# Warmup Iteration  14: 363606.275 ops/s
# Warmup Iteration  15: 363251.007 ops/s
# Warmup Iteration  16: 362735.812 ops/s
# Warmup Iteration  17: 362316.076 ops/s
# Warmup Iteration  18: 364084.654 ops/s
# Warmup Iteration  19: 362813.723 ops/s
# Warmup Iteration  20: 361768.405 ops/s
# Warmup Iteration  21: 362602.748 ops/s
# Warmup Iteration  22: 361602.791 ops/s
# Warmup Iteration  23: 363715.931 ops/s
# Warmup Iteration  24: 362895.078 ops/s
# Warmup Iteration  25: 363717.616 ops/s
# Warmup Iteration  26: 362551.726 ops/s
# Warmup Iteration  27: 358573.402 ops/s
# Warmup Iteration  28: 363675.403 ops/s
# Warmup Iteration  29: 363158.083 ops/s
# Warmup Iteration  30: 361982.679 ops/s
Iteration   1: 362492.403 ops/s
Iteration   2: 361559.328 ops/s
Iteration   3: 361254.159 ops/s
Iteration   4: 364657.089 ops/s
Iteration   5: 362365.384 ops/s
Iteration   6: 364524.920 ops/s
Iteration   7: 362808.690 ops/s
Iteration   8: 363018.637 ops/s
Iteration   9: 365184.901 ops/s
Iteration  10: 362836.588 ops/s
Iteration  11: 363057.105 ops/s
Iteration  12: 362711.613 ops/s
Iteration  13: 361472.145 ops/s
Iteration  14: 363077.036 ops/s
Iteration  15: 362780.673 ops/s
Iteration  16: 363611.338 ops/s
Iteration  17: 363521.283 ops/s
Iteration  18: 362142.071 ops/s
Iteration  19: 364401.407 ops/s
Iteration  20: 361814.175 ops/s
Iteration  21: 354829.164 ops/s
Iteration  22: 363913.048 ops/s
Iteration  23: 363231.634 ops/s
Iteration  24: 362233.123 ops/s
Iteration  25: 359945.603 ops/s
Iteration  26: 359924.149 ops/s
Iteration  27: 361096.183 ops/s
Iteration  28: 360182.058 ops/s
Iteration  29: 362937.455 ops/s
Iteration  30: 363638.123 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_collectValues":
  362374.050 ±(99.9%) 1302.210 ops/s [Average]
  (min, avg, max) = (354829.164, 362374.050, 365184.901), stdev = 1949.087
  CI (99.9%): [361071.839, 363676.260] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
SynchronizedSortedBagMultimapTest._Benchmark.benchmark_collectValues  thrpt   30  362374.050 ± 1302.210  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_containsValue$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_containsValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2181801.325 ops/s
# Warmup Iteration   2: 4354472.707 ops/s
# Warmup Iteration   3: 5388357.538 ops/s
# Warmup Iteration   4: 4617622.638 ops/s
# Warmup Iteration   5: 5339700.406 ops/s
# Warmup Iteration   6: 5315775.328 ops/s
# Warmup Iteration   7: 5276737.185 ops/s
# Warmup Iteration   8: 5326572.791 ops/s
# Warmup Iteration   9: 5321704.434 ops/s
# Warmup Iteration  10: 5317705.017 ops/s
# Warmup Iteration  11: 5335107.503 ops/s
# Warmup Iteration  12: 5280653.074 ops/s
# Warmup Iteration  13: 5327180.938 ops/s
# Warmup Iteration  14: 5280712.145 ops/s
# Warmup Iteration  15: 5279302.036 ops/s
# Warmup Iteration  16: 5361947.136 ops/s
# Warmup Iteration  17: 5315414.394 ops/s
# Warmup Iteration  18: 5419569.544 ops/s
# Warmup Iteration  19: 5373190.203 ops/s
# Warmup Iteration  20: 5425929.926 ops/s
# Warmup Iteration  21: 5404129.935 ops/s
# Warmup Iteration  22: 5373510.742 ops/s
# Warmup Iteration  23: 5401332.337 ops/s
# Warmup Iteration  24: 5424061.713 ops/s
# Warmup Iteration  25: 5408259.527 ops/s
# Warmup Iteration  26: 5419722.313 ops/s
# Warmup Iteration  27: 5420866.867 ops/s
# Warmup Iteration  28: 5410660.787 ops/s
# Warmup Iteration  29: 5400857.336 ops/s
# Warmup Iteration  30: 5357530.479 ops/s
Iteration   1: 5427170.540 ops/s
Iteration   2: 5415508.154 ops/s
Iteration   3: 5399783.000 ops/s
Iteration   4: 5417196.692 ops/s
Iteration   5: 5423580.248 ops/s
Iteration   6: 5408051.635 ops/s
Iteration   7: 5394710.822 ops/s
Iteration   8: 5422005.523 ops/s
Iteration   9: 5428096.972 ops/s
Iteration  10: 5423929.195 ops/s
Iteration  11: 5420720.628 ops/s
Iteration  12: 5419009.452 ops/s
Iteration  13: 5421220.422 ops/s
Iteration  14: 5421034.442 ops/s
Iteration  15: 5408099.752 ops/s
Iteration  16: 5419579.570 ops/s
Iteration  17: 5332829.682 ops/s
Iteration  18: 5391650.652 ops/s
Iteration  19: 5415050.828 ops/s
Iteration  20: 5411983.947 ops/s
Iteration  21: 5402078.536 ops/s
Iteration  22: 5338932.514 ops/s
Iteration  23: 5405594.100 ops/s
Iteration  24: 5415577.270 ops/s
Iteration  25: 5417087.119 ops/s
Iteration  26: 5415432.074 ops/s
Iteration  27: 5415960.642 ops/s
Iteration  28: 5427683.626 ops/s
Iteration  29: 5410566.569 ops/s
Iteration  30: 5402950.213 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_containsValue":
  5409102.494 ±(99.9%) 14704.350 ops/s [Average]
  (min, avg, max) = (5332829.682, 5409102.494, 5428096.972), stdev = 22008.781
  CI (99.9%): [5394398.144, 5423806.844] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
SynchronizedSortedBagMultimapTest._Benchmark.benchmark_containsValue  thrpt   30  5409102.494 ± 14704.350  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_flip$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_flip

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 468750.950 ops/s
# Warmup Iteration   2: 971346.103 ops/s
# Warmup Iteration   3: 1094292.876 ops/s
# Warmup Iteration   4: 1101471.847 ops/s
# Warmup Iteration   5: 920271.732 ops/s
# Warmup Iteration   6: 1101750.580 ops/s
# Warmup Iteration   7: 1105539.429 ops/s
# Warmup Iteration   8: 1101586.462 ops/s
# Warmup Iteration   9: 1099479.413 ops/s
# Warmup Iteration  10: 1099319.246 ops/s
# Warmup Iteration  11: 1100960.004 ops/s
# Warmup Iteration  12: 1097780.311 ops/s
# Warmup Iteration  13: 1099002.404 ops/s
# Warmup Iteration  14: 1098404.909 ops/s
# Warmup Iteration  15: 1100548.189 ops/s
# Warmup Iteration  16: 1102431.851 ops/s
# Warmup Iteration  17: 1102021.530 ops/s
# Warmup Iteration  18: 1098691.267 ops/s
# Warmup Iteration  19: 1099963.631 ops/s
# Warmup Iteration  20: 1098998.807 ops/s
# Warmup Iteration  21: 1100242.862 ops/s
# Warmup Iteration  22: 1100283.787 ops/s
# Warmup Iteration  23: 1088169.027 ops/s
# Warmup Iteration  24: 1099502.639 ops/s
# Warmup Iteration  25: 1100150.870 ops/s
# Warmup Iteration  26: 1099355.834 ops/s
# Warmup Iteration  27: 1106249.909 ops/s
# Warmup Iteration  28: 1097302.672 ops/s
# Warmup Iteration  29: 1101197.716 ops/s
# Warmup Iteration  30: 1100532.662 ops/s
Iteration   1: 1099723.851 ops/s
Iteration   2: 1093851.480 ops/s
Iteration   3: 1097344.020 ops/s
Iteration   4: 1102039.458 ops/s
Iteration   5: 1101516.546 ops/s
Iteration   6: 1098526.897 ops/s
Iteration   7: 1100767.413 ops/s
Iteration   8: 1100219.762 ops/s
Iteration   9: 1098387.945 ops/s
Iteration  10: 1103760.504 ops/s
Iteration  11: 1102842.668 ops/s
Iteration  12: 1098711.316 ops/s
Iteration  13: 1100720.142 ops/s
Iteration  14: 1099535.432 ops/s
Iteration  15: 1100537.540 ops/s
Iteration  16: 1095587.135 ops/s
Iteration  17: 1095461.810 ops/s
Iteration  18: 1102396.126 ops/s
Iteration  19: 1083586.109 ops/s
Iteration  20: 1106114.516 ops/s
Iteration  21: 1099657.356 ops/s
Iteration  22: 1099795.912 ops/s
Iteration  23: 1101999.543 ops/s
Iteration  24: 1099695.674 ops/s
Iteration  25: 1100370.261 ops/s
Iteration  26: 1100304.757 ops/s
Iteration  27: 1102710.389 ops/s
Iteration  28: 1100589.246 ops/s
Iteration  29: 1104158.300 ops/s
Iteration  30: 1101509.191 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_flip":
  1099747.377 ±(99.9%) 2672.875 ops/s [Average]
  (min, avg, max) = (1083586.109, 1099747.377, 1106114.516), stdev = 4000.634
  CI (99.9%): [1097074.501, 1102420.252] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
SynchronizedSortedBagMultimapTest._Benchmark.benchmark_flip  thrpt   30  1099747.377 ± 2672.875  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_forEachKey$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_forEachKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 772748.729 ops/s
# Warmup Iteration   2: 1786064.818 ops/s
# Warmup Iteration   3: 1959137.970 ops/s
# Warmup Iteration   4: 1651985.570 ops/s
# Warmup Iteration   5: 1979198.844 ops/s
# Warmup Iteration   6: 1969116.936 ops/s
# Warmup Iteration   7: 1971038.921 ops/s
# Warmup Iteration   8: 1967643.238 ops/s
# Warmup Iteration   9: 1978806.004 ops/s
# Warmup Iteration  10: 1975218.766 ops/s
# Warmup Iteration  11: 1974402.897 ops/s
# Warmup Iteration  12: 1973134.934 ops/s
# Warmup Iteration  13: 1973193.487 ops/s
# Warmup Iteration  14: 1975430.104 ops/s
# Warmup Iteration  15: 1971441.809 ops/s
# Warmup Iteration  16: 1972249.109 ops/s
# Warmup Iteration  17: 1974420.775 ops/s
# Warmup Iteration  18: 1974905.319 ops/s
# Warmup Iteration  19: 1978612.146 ops/s
# Warmup Iteration  20: 1971832.917 ops/s
# Warmup Iteration  21: 1978380.813 ops/s
# Warmup Iteration  22: 1974462.597 ops/s
# Warmup Iteration  23: 1972420.317 ops/s
# Warmup Iteration  24: 1969466.488 ops/s
# Warmup Iteration  25: 1977998.993 ops/s
# Warmup Iteration  26: 1976148.060 ops/s
# Warmup Iteration  27: 1975574.797 ops/s
# Warmup Iteration  28: 1977223.909 ops/s
# Warmup Iteration  29: 1971423.937 ops/s
# Warmup Iteration  30: 1975813.564 ops/s
Iteration   1: 1973529.622 ops/s
Iteration   2: 1972541.760 ops/s
Iteration   3: 1968388.845 ops/s
Iteration   4: 1974805.558 ops/s
Iteration   5: 1975210.506 ops/s
Iteration   6: 1974665.197 ops/s
Iteration   7: 1973212.709 ops/s
Iteration   8: 1979794.992 ops/s
Iteration   9: 1975752.575 ops/s
Iteration  10: 1972390.595 ops/s
Iteration  11: 1978552.724 ops/s
Iteration  12: 1976525.778 ops/s
Iteration  13: 1972715.998 ops/s
Iteration  14: 1970666.076 ops/s
Iteration  15: 1970128.164 ops/s
Iteration  16: 1971166.746 ops/s
Iteration  17: 1972692.646 ops/s
Iteration  18: 1971911.269 ops/s
Iteration  19: 1976539.638 ops/s
Iteration  20: 1981196.030 ops/s
Iteration  21: 1975075.466 ops/s
Iteration  22: 1979509.605 ops/s
Iteration  23: 1977847.738 ops/s
Iteration  24: 1975981.090 ops/s
Iteration  25: 1969232.501 ops/s
Iteration  26: 1984857.349 ops/s
Iteration  27: 1975973.449 ops/s
Iteration  28: 1979370.370 ops/s
Iteration  29: 1974731.358 ops/s
Iteration  30: 1973170.786 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_forEachKey":
  1974937.905 ±(99.9%) 2487.095 ops/s [Average]
  (min, avg, max) = (1968388.845, 1974937.905, 1984857.349), stdev = 3722.567
  CI (99.9%): [1972450.810, 1977425.000] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
SynchronizedSortedBagMultimapTest._Benchmark.benchmark_forEachKey  thrpt   30  1974937.905 ± 2487.095  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_forEachKeyMultiValue$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_forEachKeyMultiValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 371003.757 ops/s
# Warmup Iteration   2: 667739.341 ops/s
# Warmup Iteration   3: 803134.096 ops/s
# Warmup Iteration   4: 810596.635 ops/s
# Warmup Iteration   5: 809853.024 ops/s
# Warmup Iteration   6: 685613.268 ops/s
# Warmup Iteration   7: 812687.055 ops/s
# Warmup Iteration   8: 813514.035 ops/s
# Warmup Iteration   9: 812244.135 ops/s
# Warmup Iteration  10: 811270.737 ops/s
# Warmup Iteration  11: 812181.076 ops/s
# Warmup Iteration  12: 808270.386 ops/s
# Warmup Iteration  13: 810045.244 ops/s
# Warmup Iteration  14: 812017.180 ops/s
# Warmup Iteration  15: 811928.357 ops/s
# Warmup Iteration  16: 811572.463 ops/s
# Warmup Iteration  17: 813002.421 ops/s
# Warmup Iteration  18: 810181.922 ops/s
# Warmup Iteration  19: 809574.815 ops/s
# Warmup Iteration  20: 808845.667 ops/s
# Warmup Iteration  21: 808282.302 ops/s
# Warmup Iteration  22: 809647.975 ops/s
# Warmup Iteration  23: 812268.879 ops/s
# Warmup Iteration  24: 808826.238 ops/s
# Warmup Iteration  25: 809157.225 ops/s
# Warmup Iteration  26: 808186.208 ops/s
# Warmup Iteration  27: 808260.153 ops/s
# Warmup Iteration  28: 808528.397 ops/s
# Warmup Iteration  29: 809304.351 ops/s
# Warmup Iteration  30: 814344.552 ops/s
Iteration   1: 811176.099 ops/s
Iteration   2: 812669.349 ops/s
Iteration   3: 811600.530 ops/s
Iteration   4: 811951.638 ops/s
Iteration   5: 813426.954 ops/s
Iteration   6: 816292.876 ops/s
Iteration   7: 813498.476 ops/s
Iteration   8: 815055.083 ops/s
Iteration   9: 811676.600 ops/s
Iteration  10: 809884.029 ops/s
Iteration  11: 809457.948 ops/s
Iteration  12: 811078.232 ops/s
Iteration  13: 814646.315 ops/s
Iteration  14: 811128.318 ops/s
Iteration  15: 808810.055 ops/s
Iteration  16: 813284.693 ops/s
Iteration  17: 814855.860 ops/s
Iteration  18: 815102.141 ops/s
Iteration  19: 812463.865 ops/s
Iteration  20: 815373.417 ops/s
Iteration  21: 809425.631 ops/s
Iteration  22: 814997.924 ops/s
Iteration  23: 812908.718 ops/s
Iteration  24: 816942.813 ops/s
Iteration  25: 812608.118 ops/s
Iteration  26: 815491.616 ops/s
Iteration  27: 813522.259 ops/s
Iteration  28: 811007.407 ops/s
Iteration  29: 814755.037 ops/s
Iteration  30: 812054.777 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_forEachKeyMultiValue":
  812904.893 ±(99.9%) 1435.913 ops/s [Average]
  (min, avg, max) = (808810.055, 812904.893, 816942.813), stdev = 2149.208
  CI (99.9%): [811468.979, 814340.806] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score      Error  Units
SynchronizedSortedBagMultimapTest._Benchmark.benchmark_forEachKeyMultiValue  thrpt   30  812904.893 ± 1435.913  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_forEachKeyValue$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_forEachKeyValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 492834.884 ops/s
# Warmup Iteration   2: 999592.752 ops/s
# Warmup Iteration   3: 1125122.345 ops/s
# Warmup Iteration   4: 1130999.403 ops/s
# Warmup Iteration   5: 945356.327 ops/s
# Warmup Iteration   6: 1124670.915 ops/s
# Warmup Iteration   7: 1132078.851 ops/s
# Warmup Iteration   8: 1136760.634 ops/s
# Warmup Iteration   9: 1129018.386 ops/s
# Warmup Iteration  10: 1132470.911 ops/s
# Warmup Iteration  11: 1135310.865 ops/s
# Warmup Iteration  12: 1137125.180 ops/s
# Warmup Iteration  13: 1132155.398 ops/s
# Warmup Iteration  14: 1133822.925 ops/s
# Warmup Iteration  15: 1131517.619 ops/s
# Warmup Iteration  16: 1134337.380 ops/s
# Warmup Iteration  17: 1130588.171 ops/s
# Warmup Iteration  18: 1123364.648 ops/s
# Warmup Iteration  19: 1127178.736 ops/s
# Warmup Iteration  20: 1124812.046 ops/s
# Warmup Iteration  21: 1128735.740 ops/s
# Warmup Iteration  22: 1127062.614 ops/s
# Warmup Iteration  23: 1125851.125 ops/s
# Warmup Iteration  24: 1128165.540 ops/s
# Warmup Iteration  25: 1125230.149 ops/s
# Warmup Iteration  26: 1127718.604 ops/s
# Warmup Iteration  27: 1128945.432 ops/s
# Warmup Iteration  28: 1128439.594 ops/s
# Warmup Iteration  29: 1131194.880 ops/s
# Warmup Iteration  30: 1133977.521 ops/s
Iteration   1: 1130169.322 ops/s
Iteration   2: 1129085.022 ops/s
Iteration   3: 1127643.417 ops/s
Iteration   4: 1128866.130 ops/s
Iteration   5: 1124963.169 ops/s
Iteration   6: 1132797.776 ops/s
Iteration   7: 1128642.810 ops/s
Iteration   8: 1128219.065 ops/s
Iteration   9: 1129242.533 ops/s
Iteration  10: 1133035.041 ops/s
Iteration  11: 1132164.476 ops/s
Iteration  12: 1130612.967 ops/s
Iteration  13: 1117073.992 ops/s
Iteration  14: 1116226.880 ops/s
Iteration  15: 1128989.456 ops/s
Iteration  16: 1133564.128 ops/s
Iteration  17: 1122357.869 ops/s
Iteration  18: 1128216.567 ops/s
Iteration  19: 1113333.954 ops/s
Iteration  20: 1117011.198 ops/s
Iteration  21: 1128590.602 ops/s
Iteration  22: 1123976.658 ops/s
Iteration  23: 1126948.467 ops/s
Iteration  24: 1125690.404 ops/s
Iteration  25: 1129310.282 ops/s
Iteration  26: 1130013.497 ops/s
Iteration  27: 1126348.985 ops/s
Iteration  28: 1136992.127 ops/s
Iteration  29: 1125702.676 ops/s
Iteration  30: 1128153.314 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_forEachKeyValue":
  1127131.426 ±(99.9%) 3602.555 ops/s [Average]
  (min, avg, max) = (1113333.954, 1127131.426, 1136992.127), stdev = 5392.135
  CI (99.9%): [1123528.871, 1130733.981] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
SynchronizedSortedBagMultimapTest._Benchmark.benchmark_forEachKeyValue  thrpt   30  1127131.426 ± 3602.555  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_forEachValue$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_forEachValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 618853.017 ops/s
# Warmup Iteration   2: 1226554.232 ops/s
# Warmup Iteration   3: 1436609.771 ops/s
# Warmup Iteration   4: 1441200.971 ops/s
# Warmup Iteration   5: 1204688.089 ops/s
# Warmup Iteration   6: 1440433.611 ops/s
# Warmup Iteration   7: 1441208.849 ops/s
# Warmup Iteration   8: 1441730.987 ops/s
# Warmup Iteration   9: 1436920.736 ops/s
# Warmup Iteration  10: 1441868.000 ops/s
# Warmup Iteration  11: 1442534.623 ops/s
# Warmup Iteration  12: 1441502.508 ops/s
# Warmup Iteration  13: 1438792.305 ops/s
# Warmup Iteration  14: 1442694.129 ops/s
# Warmup Iteration  15: 1442347.575 ops/s
# Warmup Iteration  16: 1441547.546 ops/s
# Warmup Iteration  17: 1440417.238 ops/s
# Warmup Iteration  18: 1439409.168 ops/s
# Warmup Iteration  19: 1436459.724 ops/s
# Warmup Iteration  20: 1438483.172 ops/s
# Warmup Iteration  21: 1441974.402 ops/s
# Warmup Iteration  22: 1440817.721 ops/s
# Warmup Iteration  23: 1439121.283 ops/s
# Warmup Iteration  24: 1441374.773 ops/s
# Warmup Iteration  25: 1440839.100 ops/s
# Warmup Iteration  26: 1441426.423 ops/s
# Warmup Iteration  27: 1437577.680 ops/s
# Warmup Iteration  28: 1440962.970 ops/s
# Warmup Iteration  29: 1442268.668 ops/s
# Warmup Iteration  30: 1441537.614 ops/s
Iteration   1: 1445009.109 ops/s
Iteration   2: 1442302.523 ops/s
Iteration   3: 1439745.204 ops/s
Iteration   4: 1441107.188 ops/s
Iteration   5: 1439423.246 ops/s
Iteration   6: 1441864.386 ops/s
Iteration   7: 1438528.294 ops/s
Iteration   8: 1439622.725 ops/s
Iteration   9: 1443240.424 ops/s
Iteration  10: 1438301.775 ops/s
Iteration  11: 1441963.016 ops/s
Iteration  12: 1442786.734 ops/s
Iteration  13: 1444203.917 ops/s
Iteration  14: 1440826.459 ops/s
Iteration  15: 1423833.604 ops/s
Iteration  16: 1430129.770 ops/s
Iteration  17: 1427715.746 ops/s
Iteration  18: 1425212.397 ops/s
Iteration  19: 1424451.488 ops/s
Iteration  20: 1427361.803 ops/s
Iteration  21: 1427625.184 ops/s
Iteration  22: 1418101.336 ops/s
Iteration  23: 1425332.409 ops/s
Iteration  24: 1421303.539 ops/s
Iteration  25: 1425803.635 ops/s
Iteration  26: 1427417.379 ops/s
Iteration  27: 1422097.042 ops/s
Iteration  28: 1424416.367 ops/s
Iteration  29: 1421647.804 ops/s
Iteration  30: 1430002.437 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_forEachValue":
  1432712.565 ±(99.9%) 5786.228 ops/s [Average]
  (min, avg, max) = (1418101.336, 1432712.565, 1445009.109), stdev = 8660.555
  CI (99.9%): [1426926.336, 1438498.793] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
SynchronizedSortedBagMultimapTest._Benchmark.benchmark_forEachValue  thrpt   30  1432712.565 ± 5786.228  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_getIfAbsentPutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_getIfAbsentPutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 97917.183 ops/s
# Warmup Iteration   2: 130777.667 ops/s
# Warmup Iteration   3: 177317.424 ops/s
# Warmup Iteration   4: 176336.215 ops/s
# Warmup Iteration   5: 177667.356 ops/s
# Warmup Iteration   6: 177673.422 ops/s
# Warmup Iteration   7: 177650.412 ops/s
# Warmup Iteration   8: 176967.298 ops/s
# Warmup Iteration   9: 148082.677 ops/s
# Warmup Iteration  10: 177550.054 ops/s
# Warmup Iteration  11: 177296.189 ops/s
# Warmup Iteration  12: 177627.250 ops/s
# Warmup Iteration  13: 177348.332 ops/s
# Warmup Iteration  14: 177614.339 ops/s
# Warmup Iteration  15: 177504.365 ops/s
# Warmup Iteration  16: 177451.255 ops/s
# Warmup Iteration  17: 181138.829 ops/s
# Warmup Iteration  18: 180751.577 ops/s
# Warmup Iteration  19: 180694.336 ops/s
# Warmup Iteration  20: 181032.261 ops/s
# Warmup Iteration  21: 180747.159 ops/s
# Warmup Iteration  22: 180343.840 ops/s
# Warmup Iteration  23: 180829.314 ops/s
# Warmup Iteration  24: 180881.322 ops/s
# Warmup Iteration  25: 180654.064 ops/s
# Warmup Iteration  26: 180527.403 ops/s
# Warmup Iteration  27: 181077.669 ops/s
# Warmup Iteration  28: 180909.396 ops/s
# Warmup Iteration  29: 181192.693 ops/s
# Warmup Iteration  30: 180592.962 ops/s
Iteration   1: 180314.484 ops/s
Iteration   2: 181246.795 ops/s
Iteration   3: 180809.114 ops/s
Iteration   4: 180765.286 ops/s
Iteration   5: 181011.636 ops/s
Iteration   6: 181129.204 ops/s
Iteration   7: 181681.608 ops/s
Iteration   8: 181651.037 ops/s
Iteration   9: 180396.451 ops/s
Iteration  10: 181240.595 ops/s
Iteration  11: 180878.339 ops/s
Iteration  12: 180626.367 ops/s
Iteration  13: 180674.637 ops/s
Iteration  14: 181059.534 ops/s
Iteration  15: 180738.760 ops/s
Iteration  16: 181023.010 ops/s
Iteration  17: 180429.663 ops/s
Iteration  18: 180677.287 ops/s
Iteration  19: 181593.026 ops/s
Iteration  20: 180713.639 ops/s
Iteration  21: 181092.756 ops/s
Iteration  22: 182208.850 ops/s
Iteration  23: 180329.291 ops/s
Iteration  24: 180548.376 ops/s
Iteration  25: 180823.261 ops/s
Iteration  26: 180774.172 ops/s
Iteration  27: 180614.649 ops/s
Iteration  28: 180730.006 ops/s
Iteration  29: 180742.510 ops/s
Iteration  30: 181363.329 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_getIfAbsentPutAll":
  180929.589 ±(99.9%) 294.180 ops/s [Average]
  (min, avg, max) = (180314.484, 180929.589, 182208.850), stdev = 440.314
  CI (99.9%): [180635.409, 181223.769] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score     Error  Units
SynchronizedSortedBagMultimapTest._Benchmark.benchmark_getIfAbsentPutAll  thrpt   30  180929.589 ± 294.180  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 177383.345 ops/s
# Warmup Iteration   2: 355563.127 ops/s
# Warmup Iteration   3: 460126.218 ops/s
# Warmup Iteration   4: 463477.724 ops/s
# Warmup Iteration   5: 437976.277 ops/s
# Warmup Iteration   6: 414547.843 ops/s
# Warmup Iteration   7: 463172.103 ops/s
# Warmup Iteration   8: 464368.699 ops/s
# Warmup Iteration   9: 463602.195 ops/s
# Warmup Iteration  10: 462383.728 ops/s
# Warmup Iteration  11: 464131.109 ops/s
# Warmup Iteration  12: 463822.268 ops/s
# Warmup Iteration  13: 463588.234 ops/s
# Warmup Iteration  14: 464406.595 ops/s
# Warmup Iteration  15: 463033.324 ops/s
# Warmup Iteration  16: 464375.845 ops/s
# Warmup Iteration  17: 462796.846 ops/s
# Warmup Iteration  18: 463465.376 ops/s
# Warmup Iteration  19: 463970.635 ops/s
# Warmup Iteration  20: 464298.894 ops/s
# Warmup Iteration  21: 464363.370 ops/s
# Warmup Iteration  22: 464813.239 ops/s
# Warmup Iteration  23: 463316.862 ops/s
# Warmup Iteration  24: 463676.631 ops/s
# Warmup Iteration  25: 464799.442 ops/s
# Warmup Iteration  26: 464971.279 ops/s
# Warmup Iteration  27: 464244.462 ops/s
# Warmup Iteration  28: 464603.884 ops/s
# Warmup Iteration  29: 463866.204 ops/s
# Warmup Iteration  30: 463714.013 ops/s
Iteration   1: 462999.756 ops/s
Iteration   2: 463420.906 ops/s
Iteration   3: 465148.583 ops/s
Iteration   4: 464897.217 ops/s
Iteration   5: 463522.273 ops/s
Iteration   6: 466083.123 ops/s
Iteration   7: 464146.361 ops/s
Iteration   8: 465472.113 ops/s
Iteration   9: 462605.222 ops/s
Iteration  10: 463882.517 ops/s
Iteration  11: 464409.338 ops/s
Iteration  12: 462928.344 ops/s
Iteration  13: 464605.961 ops/s
Iteration  14: 465378.420 ops/s
Iteration  15: 463473.708 ops/s
Iteration  16: 464109.764 ops/s
Iteration  17: 463933.729 ops/s
Iteration  18: 463921.789 ops/s
Iteration  19: 464352.869 ops/s
Iteration  20: 464827.950 ops/s
Iteration  21: 464873.844 ops/s
Iteration  22: 464063.077 ops/s
Iteration  23: 463075.522 ops/s
Iteration  24: 464666.754 ops/s
Iteration  25: 465727.212 ops/s
Iteration  26: 464068.744 ops/s
Iteration  27: 463982.973 ops/s
Iteration  28: 465963.238 ops/s
Iteration  29: 464983.851 ops/s
Iteration  30: 464134.407 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_isEmpty":
  464321.986 ±(99.9%) 603.390 ops/s [Average]
  (min, avg, max) = (462605.222, 464321.986, 466083.123), stdev = 903.125
  CI (99.9%): [463718.596, 464925.375] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score     Error  Units
SynchronizedSortedBagMultimapTest._Benchmark.benchmark_isEmpty  thrpt   30  464321.986 ± 603.390  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_keyBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_keyBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 697391.485 ops/s
# Warmup Iteration   2: 1541748.069 ops/s
# Warmup Iteration   3: 1760437.197 ops/s
# Warmup Iteration   4: 1585974.937 ops/s
# Warmup Iteration   5: 1660139.270 ops/s
# Warmup Iteration   6: 1773448.299 ops/s
# Warmup Iteration   7: 1773597.520 ops/s
# Warmup Iteration   8: 1762944.623 ops/s
# Warmup Iteration   9: 1774558.226 ops/s
# Warmup Iteration  10: 1754542.206 ops/s
# Warmup Iteration  11: 1771130.556 ops/s
# Warmup Iteration  12: 1770974.302 ops/s
# Warmup Iteration  13: 1773371.009 ops/s
# Warmup Iteration  14: 1770610.521 ops/s
# Warmup Iteration  15: 1769900.507 ops/s
# Warmup Iteration  16: 1774705.442 ops/s
# Warmup Iteration  17: 1777091.278 ops/s
# Warmup Iteration  18: 1770570.374 ops/s
# Warmup Iteration  19: 1770754.924 ops/s
# Warmup Iteration  20: 1774835.444 ops/s
# Warmup Iteration  21: 1773840.535 ops/s
# Warmup Iteration  22: 1773194.057 ops/s
# Warmup Iteration  23: 1775069.942 ops/s
# Warmup Iteration  24: 1771955.084 ops/s
# Warmup Iteration  25: 1772881.667 ops/s
# Warmup Iteration  26: 1775025.151 ops/s
# Warmup Iteration  27: 1775813.262 ops/s
# Warmup Iteration  28: 1774707.559 ops/s
# Warmup Iteration  29: 1772476.018 ops/s
# Warmup Iteration  30: 1774071.374 ops/s
Iteration   1: 1772390.016 ops/s
Iteration   2: 1772694.004 ops/s
Iteration   3: 1767136.759 ops/s
Iteration   4: 1775987.752 ops/s
Iteration   5: 1772100.441 ops/s
Iteration   6: 1773612.127 ops/s
Iteration   7: 1779374.994 ops/s
Iteration   8: 1772105.747 ops/s
Iteration   9: 1774157.974 ops/s
Iteration  10: 1773091.865 ops/s
Iteration  11: 1775012.777 ops/s
Iteration  12: 1778336.091 ops/s
Iteration  13: 1771951.026 ops/s
Iteration  14: 1776642.208 ops/s
Iteration  15: 1771757.480 ops/s
Iteration  16: 1770734.010 ops/s
Iteration  17: 1776817.454 ops/s
Iteration  18: 1770303.336 ops/s
Iteration  19: 1777348.490 ops/s
Iteration  20: 1772567.069 ops/s
Iteration  21: 1775199.405 ops/s
Iteration  22: 1773011.839 ops/s
Iteration  23: 1775069.554 ops/s
Iteration  24: 1772223.513 ops/s
Iteration  25: 1771030.588 ops/s
Iteration  26: 1774367.732 ops/s
Iteration  27: 1779885.189 ops/s
Iteration  28: 1772683.106 ops/s
Iteration  29: 1771851.387 ops/s
Iteration  30: 1769934.296 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_keyBag":
  1773645.941 ±(99.9%) 1935.718 ops/s [Average]
  (min, avg, max) = (1767136.759, 1773645.941, 1779885.189), stdev = 2897.291
  CI (99.9%): [1771710.223, 1775581.659] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
SynchronizedSortedBagMultimapTest._Benchmark.benchmark_keyBag  thrpt   30  1773645.941 ± 1935.718  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_keySet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_keySet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 232417.256 ops/s
# Warmup Iteration   2: 280534.207 ops/s
# Warmup Iteration   3: 372164.323 ops/s
# Warmup Iteration   4: 371392.911 ops/s
# Warmup Iteration   5: 368793.619 ops/s
# Warmup Iteration   6: 371443.409 ops/s
# Warmup Iteration   7: 371074.709 ops/s
# Warmup Iteration   8: 370901.151 ops/s
# Warmup Iteration   9: 371110.889 ops/s
# Warmup Iteration  10: 329404.764 ops/s
# Warmup Iteration  11: 358878.830 ops/s
# Warmup Iteration  12: 371573.450 ops/s
# Warmup Iteration  13: 371716.694 ops/s
# Warmup Iteration  14: 371859.321 ops/s
# Warmup Iteration  15: 372445.307 ops/s
# Warmup Iteration  16: 371989.327 ops/s
# Warmup Iteration  17: 387488.477 ops/s
# Warmup Iteration  18: 386077.674 ops/s
# Warmup Iteration  19: 387355.264 ops/s
# Warmup Iteration  20: 388173.127 ops/s
# Warmup Iteration  21: 387493.376 ops/s
# Warmup Iteration  22: 386970.909 ops/s
# Warmup Iteration  23: 387995.767 ops/s
# Warmup Iteration  24: 388536.851 ops/s
# Warmup Iteration  25: 386883.889 ops/s
# Warmup Iteration  26: 387247.256 ops/s
# Warmup Iteration  27: 388698.824 ops/s
# Warmup Iteration  28: 389144.896 ops/s
# Warmup Iteration  29: 386676.705 ops/s
# Warmup Iteration  30: 388117.062 ops/s
Iteration   1: 387631.332 ops/s
Iteration   2: 387412.684 ops/s
Iteration   3: 389124.351 ops/s
Iteration   4: 388521.549 ops/s
Iteration   5: 388765.375 ops/s
Iteration   6: 388159.469 ops/s
Iteration   7: 387895.304 ops/s
Iteration   8: 388101.295 ops/s
Iteration   9: 388096.215 ops/s
Iteration  10: 388498.822 ops/s
Iteration  11: 386526.783 ops/s
Iteration  12: 388165.017 ops/s
Iteration  13: 387797.192 ops/s
Iteration  14: 387051.184 ops/s
Iteration  15: 386097.133 ops/s
Iteration  16: 388616.620 ops/s
Iteration  17: 387809.844 ops/s
Iteration  18: 387747.126 ops/s
Iteration  19: 387422.860 ops/s
Iteration  20: 388045.677 ops/s
Iteration  21: 387118.394 ops/s
Iteration  22: 387785.743 ops/s
Iteration  23: 387567.664 ops/s
Iteration  24: 387802.183 ops/s
Iteration  25: 387797.676 ops/s
Iteration  26: 387621.842 ops/s
Iteration  27: 387785.718 ops/s
Iteration  28: 387093.672 ops/s
Iteration  29: 387853.014 ops/s
Iteration  30: 388676.547 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_keySet":
  387819.610 ±(99.9%) 431.322 ops/s [Average]
  (min, avg, max) = (386097.133, 387819.610, 389124.351), stdev = 645.582
  CI (99.9%): [387388.288, 388250.931] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score     Error  Units
SynchronizedSortedBagMultimapTest._Benchmark.benchmark_keySet  thrpt   30  387819.610 ± 431.322  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_keyValuePairsView$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_keyValuePairsView

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 374080.428 ops/s
# Warmup Iteration   2: 698279.518 ops/s
# Warmup Iteration   3: 816988.254 ops/s
# Warmup Iteration   4: 817310.741 ops/s
# Warmup Iteration   5: 819356.186 ops/s
# Warmup Iteration   6: 691708.484 ops/s
# Warmup Iteration   7: 821739.132 ops/s
# Warmup Iteration   8: 820131.736 ops/s
# Warmup Iteration   9: 821038.313 ops/s
# Warmup Iteration  10: 818978.969 ops/s
# Warmup Iteration  11: 819396.964 ops/s
# Warmup Iteration  12: 820550.045 ops/s
# Warmup Iteration  13: 821681.685 ops/s
# Warmup Iteration  14: 820054.887 ops/s
# Warmup Iteration  15: 820806.034 ops/s
# Warmup Iteration  16: 818815.693 ops/s
# Warmup Iteration  17: 819205.541 ops/s
# Warmup Iteration  18: 819260.580 ops/s
# Warmup Iteration  19: 817116.160 ops/s
# Warmup Iteration  20: 818991.629 ops/s
# Warmup Iteration  21: 818534.931 ops/s
# Warmup Iteration  22: 819788.228 ops/s
# Warmup Iteration  23: 819018.958 ops/s
# Warmup Iteration  24: 817224.593 ops/s
# Warmup Iteration  25: 816897.457 ops/s
# Warmup Iteration  26: 818947.970 ops/s
# Warmup Iteration  27: 818502.117 ops/s
# Warmup Iteration  28: 818817.346 ops/s
# Warmup Iteration  29: 817527.436 ops/s
# Warmup Iteration  30: 817468.331 ops/s
Iteration   1: 821150.792 ops/s
Iteration   2: 819321.949 ops/s
Iteration   3: 821555.911 ops/s
Iteration   4: 818018.879 ops/s
Iteration   5: 816123.510 ops/s
Iteration   6: 818563.530 ops/s
Iteration   7: 818666.901 ops/s
Iteration   8: 820272.099 ops/s
Iteration   9: 815281.571 ops/s
Iteration  10: 819772.632 ops/s
Iteration  11: 817855.559 ops/s
Iteration  12: 818769.499 ops/s
Iteration  13: 820230.204 ops/s
Iteration  14: 819322.792 ops/s
Iteration  15: 821537.544 ops/s
Iteration  16: 820704.549 ops/s
Iteration  17: 817737.594 ops/s
Iteration  18: 819480.169 ops/s
Iteration  19: 817576.184 ops/s
Iteration  20: 817690.872 ops/s
Iteration  21: 816842.422 ops/s
Iteration  22: 817175.289 ops/s
Iteration  23: 821598.296 ops/s
Iteration  24: 815331.745 ops/s
Iteration  25: 817513.249 ops/s
Iteration  26: 815841.774 ops/s
Iteration  27: 816874.000 ops/s
Iteration  28: 819443.342 ops/s
Iteration  29: 817376.725 ops/s
Iteration  30: 821605.868 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_keyValuePairsView":
  818641.182 ±(99.9%) 1273.645 ops/s [Average]
  (min, avg, max) = (815281.571, 818641.182, 821605.868), stdev = 1906.333
  CI (99.9%): [817367.536, 819914.827] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
SynchronizedSortedBagMultimapTest._Benchmark.benchmark_keyValuePairsView  thrpt   30  818641.182 ± 1273.645  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_keysView$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_keysView

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 579926.992 ops/s
# Warmup Iteration   2: 1110413.452 ops/s
# Warmup Iteration   3: 1301247.151 ops/s
# Warmup Iteration   4: 1312825.166 ops/s
# Warmup Iteration   5: 1106287.397 ops/s
# Warmup Iteration   6: 1297130.891 ops/s
# Warmup Iteration   7: 1302246.307 ops/s
# Warmup Iteration   8: 1300893.111 ops/s
# Warmup Iteration   9: 1305175.489 ops/s
# Warmup Iteration  10: 1303454.521 ops/s
# Warmup Iteration  11: 1305897.424 ops/s
# Warmup Iteration  12: 1295503.152 ops/s
# Warmup Iteration  13: 1307901.538 ops/s
# Warmup Iteration  14: 1305227.124 ops/s
# Warmup Iteration  15: 1311656.328 ops/s
# Warmup Iteration  16: 1308133.958 ops/s
# Warmup Iteration  17: 1304441.565 ops/s
# Warmup Iteration  18: 1303386.301 ops/s
# Warmup Iteration  19: 1302834.974 ops/s
# Warmup Iteration  20: 1303103.837 ops/s
# Warmup Iteration  21: 1305798.304 ops/s
# Warmup Iteration  22: 1299287.407 ops/s
# Warmup Iteration  23: 1305848.930 ops/s
# Warmup Iteration  24: 1310886.385 ops/s
# Warmup Iteration  25: 1301791.601 ops/s
# Warmup Iteration  26: 1311068.906 ops/s
# Warmup Iteration  27: 1308075.844 ops/s
# Warmup Iteration  28: 1307015.633 ops/s
# Warmup Iteration  29: 1301886.090 ops/s
# Warmup Iteration  30: 1309677.134 ops/s
Iteration   1: 1301764.576 ops/s
Iteration   2: 1298719.698 ops/s
Iteration   3: 1308899.979 ops/s
Iteration   4: 1311343.185 ops/s
Iteration   5: 1305076.706 ops/s
Iteration   6: 1311891.534 ops/s
Iteration   7: 1308055.981 ops/s
Iteration   8: 1306720.070 ops/s
Iteration   9: 1307263.031 ops/s
Iteration  10: 1299463.644 ops/s
Iteration  11: 1310141.362 ops/s
Iteration  12: 1302554.454 ops/s
Iteration  13: 1307002.522 ops/s
Iteration  14: 1311853.395 ops/s
Iteration  15: 1301803.825 ops/s
Iteration  16: 1301793.769 ops/s
Iteration  17: 1315085.363 ops/s
Iteration  18: 1296408.598 ops/s
Iteration  19: 1300845.665 ops/s
Iteration  20: 1305923.249 ops/s
Iteration  21: 1294830.857 ops/s
Iteration  22: 1301978.893 ops/s
Iteration  23: 1305428.091 ops/s
Iteration  24: 1306806.031 ops/s
Iteration  25: 1296096.820 ops/s
Iteration  26: 1312504.973 ops/s
Iteration  27: 1303811.130 ops/s
Iteration  28: 1299168.875 ops/s
Iteration  29: 1312175.063 ops/s
Iteration  30: 1308228.309 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_keysView":
  1305121.322 ±(99.9%) 3610.505 ops/s [Average]
  (min, avg, max) = (1294830.857, 1305121.322, 1315085.363), stdev = 5404.034
  CI (99.9%): [1301510.817, 1308731.827] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
SynchronizedSortedBagMultimapTest._Benchmark.benchmark_keysView  thrpt   30  1305121.322 ± 3610.505  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_keysWithMultiValuesView$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_keysWithMultiValuesView

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 269518.927 ops/s
# Warmup Iteration   2: 565349.075 ops/s
# Warmup Iteration   3: 643050.814 ops/s
# Warmup Iteration   4: 646865.732 ops/s
# Warmup Iteration   5: 544151.489 ops/s
# Warmup Iteration   6: 647307.210 ops/s
# Warmup Iteration   7: 644007.002 ops/s
# Warmup Iteration   8: 645134.364 ops/s
# Warmup Iteration   9: 646417.106 ops/s
# Warmup Iteration  10: 647072.117 ops/s
# Warmup Iteration  11: 643619.461 ops/s
# Warmup Iteration  12: 645589.109 ops/s
# Warmup Iteration  13: 645502.738 ops/s
# Warmup Iteration  14: 646904.078 ops/s
# Warmup Iteration  15: 644523.346 ops/s
# Warmup Iteration  16: 646254.238 ops/s
# Warmup Iteration  17: 642668.963 ops/s
# Warmup Iteration  18: 646456.922 ops/s
# Warmup Iteration  19: 646053.661 ops/s
# Warmup Iteration  20: 644484.039 ops/s
# Warmup Iteration  21: 645807.578 ops/s
# Warmup Iteration  22: 644659.117 ops/s
# Warmup Iteration  23: 644960.293 ops/s
# Warmup Iteration  24: 645777.399 ops/s
# Warmup Iteration  25: 641859.912 ops/s
# Warmup Iteration  26: 645831.753 ops/s
# Warmup Iteration  27: 644203.369 ops/s
# Warmup Iteration  28: 643578.204 ops/s
# Warmup Iteration  29: 644849.976 ops/s
# Warmup Iteration  30: 645485.557 ops/s
Iteration   1: 644968.061 ops/s
Iteration   2: 643257.473 ops/s
Iteration   3: 643466.618 ops/s
Iteration   4: 645279.062 ops/s
Iteration   5: 646014.325 ops/s
Iteration   6: 645244.995 ops/s
Iteration   7: 646678.572 ops/s
Iteration   8: 645508.343 ops/s
Iteration   9: 643840.656 ops/s
Iteration  10: 645717.585 ops/s
Iteration  11: 644549.827 ops/s
Iteration  12: 641796.640 ops/s
Iteration  13: 642458.897 ops/s
Iteration  14: 645601.625 ops/s
Iteration  15: 644611.313 ops/s
Iteration  16: 643004.944 ops/s
Iteration  17: 643844.237 ops/s
Iteration  18: 645497.348 ops/s
Iteration  19: 642060.990 ops/s
Iteration  20: 643043.075 ops/s
Iteration  21: 644891.940 ops/s
Iteration  22: 643734.409 ops/s
Iteration  23: 644515.185 ops/s
Iteration  24: 642496.117 ops/s
Iteration  25: 645085.964 ops/s
Iteration  26: 643605.190 ops/s
Iteration  27: 646200.657 ops/s
Iteration  28: 643656.584 ops/s
Iteration  29: 645020.973 ops/s
Iteration  30: 646167.789 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_keysWithMultiValuesView":
  644393.980 ±(99.9%) 882.689 ops/s [Average]
  (min, avg, max) = (641796.640, 644393.980, 646678.572), stdev = 1321.168
  CI (99.9%): [643511.291, 645276.669] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score     Error  Units
SynchronizedSortedBagMultimapTest._Benchmark.benchmark_keysWithMultiValuesView  thrpt   30  644393.980 ± 882.689  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_multiValuesView$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_multiValuesView

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 520412.322 ops/s
# Warmup Iteration   2: 1052293.979 ops/s
# Warmup Iteration   3: 1189412.817 ops/s
# Warmup Iteration   4: 1192600.825 ops/s
# Warmup Iteration   5: 1010628.690 ops/s
# Warmup Iteration   6: 1205398.886 ops/s
# Warmup Iteration   7: 1202179.876 ops/s
# Warmup Iteration   8: 1197244.968 ops/s
# Warmup Iteration   9: 1198367.618 ops/s
# Warmup Iteration  10: 1202557.126 ops/s
# Warmup Iteration  11: 1204623.159 ops/s
# Warmup Iteration  12: 1197730.558 ops/s
# Warmup Iteration  13: 1195338.710 ops/s
# Warmup Iteration  14: 1200387.584 ops/s
# Warmup Iteration  15: 1202410.449 ops/s
# Warmup Iteration  16: 1200900.215 ops/s
# Warmup Iteration  17: 1195383.605 ops/s
# Warmup Iteration  18: 1184195.902 ops/s
# Warmup Iteration  19: 1200437.181 ops/s
# Warmup Iteration  20: 1197253.843 ops/s
# Warmup Iteration  21: 1194538.587 ops/s
# Warmup Iteration  22: 1201265.734 ops/s
# Warmup Iteration  23: 1197542.966 ops/s
# Warmup Iteration  24: 1195603.717 ops/s
# Warmup Iteration  25: 1200478.485 ops/s
# Warmup Iteration  26: 1199170.546 ops/s
# Warmup Iteration  27: 1199365.685 ops/s
# Warmup Iteration  28: 1193918.415 ops/s
# Warmup Iteration  29: 1194137.210 ops/s
# Warmup Iteration  30: 1205451.055 ops/s
Iteration   1: 1195284.622 ops/s
Iteration   2: 1205035.451 ops/s
Iteration   3: 1203579.021 ops/s
Iteration   4: 1205353.132 ops/s
Iteration   5: 1200209.338 ops/s
Iteration   6: 1205345.710 ops/s
Iteration   7: 1207586.188 ops/s
Iteration   8: 1206454.618 ops/s
Iteration   9: 1199675.514 ops/s
Iteration  10: 1204188.859 ops/s
Iteration  11: 1198628.127 ops/s
Iteration  12: 1198953.576 ops/s
Iteration  13: 1198081.851 ops/s
Iteration  14: 1194995.193 ops/s
Iteration  15: 1201795.048 ops/s
Iteration  16: 1199921.351 ops/s
Iteration  17: 1197518.191 ops/s
Iteration  18: 1196374.236 ops/s
Iteration  19: 1199878.043 ops/s
Iteration  20: 1205322.024 ops/s
Iteration  21: 1200902.477 ops/s
Iteration  22: 1187336.732 ops/s
Iteration  23: 1197673.412 ops/s
Iteration  24: 1193472.593 ops/s
Iteration  25: 1193127.417 ops/s
Iteration  26: 1198121.998 ops/s
Iteration  27: 1193344.815 ops/s
Iteration  28: 1210204.323 ops/s
Iteration  29: 1197301.470 ops/s
Iteration  30: 1198839.933 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_multiValuesView":
  1199816.842 ±(99.9%) 3359.199 ops/s [Average]
  (min, avg, max) = (1187336.732, 1199816.842, 1210204.323), stdev = 5027.891
  CI (99.9%): [1196457.643, 1203176.041] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
SynchronizedSortedBagMultimapTest._Benchmark.benchmark_multiValuesView  thrpt   30  1199816.842 ± 3359.199  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_newEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_newEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 356155.927 ops/s
# Warmup Iteration   2: 802347.124 ops/s
# Warmup Iteration   3: 1153748.143 ops/s
# Warmup Iteration   4: 968078.383 ops/s
# Warmup Iteration   5: 1161440.267 ops/s
# Warmup Iteration   6: 1163865.865 ops/s
# Warmup Iteration   7: 1162739.846 ops/s
# Warmup Iteration   8: 1161379.110 ops/s
# Warmup Iteration   9: 1163257.058 ops/s
# Warmup Iteration  10: 1163736.210 ops/s
# Warmup Iteration  11: 1159778.850 ops/s
# Warmup Iteration  12: 1161962.488 ops/s
# Warmup Iteration  13: 1160342.548 ops/s
# Warmup Iteration  14: 1162378.979 ops/s
# Warmup Iteration  15: 1165021.419 ops/s
# Warmup Iteration  16: 1163895.185 ops/s
# Warmup Iteration  17: 1160670.774 ops/s
# Warmup Iteration  18: 1160535.040 ops/s
# Warmup Iteration  19: 1158274.565 ops/s
# Warmup Iteration  20: 1163618.950 ops/s
# Warmup Iteration  21: 1162129.086 ops/s
# Warmup Iteration  22: 1162570.722 ops/s
# Warmup Iteration  23: 1160698.505 ops/s
# Warmup Iteration  24: 1160615.736 ops/s
# Warmup Iteration  25: 1161369.381 ops/s
# Warmup Iteration  26: 1161533.291 ops/s
# Warmup Iteration  27: 1160148.775 ops/s
# Warmup Iteration  28: 1161936.227 ops/s
# Warmup Iteration  29: 1160751.776 ops/s
# Warmup Iteration  30: 1159347.418 ops/s
Iteration   1: 1164459.856 ops/s
Iteration   2: 1160313.097 ops/s
Iteration   3: 1140555.976 ops/s
Iteration   4: 1162616.479 ops/s
Iteration   5: 1163429.042 ops/s
Iteration   6: 1157528.272 ops/s
Iteration   7: 1160482.033 ops/s
Iteration   8: 1161945.845 ops/s
Iteration   9: 1162891.478 ops/s
Iteration  10: 1161989.706 ops/s
Iteration  11: 1164682.437 ops/s
Iteration  12: 1161917.407 ops/s
Iteration  13: 1160928.264 ops/s
Iteration  14: 1161620.623 ops/s
Iteration  15: 1161439.640 ops/s
Iteration  16: 1161992.600 ops/s
Iteration  17: 1161865.507 ops/s
Iteration  18: 1167190.020 ops/s
Iteration  19: 1160994.107 ops/s
Iteration  20: 1159066.377 ops/s
Iteration  21: 1163281.747 ops/s
Iteration  22: 1162558.954 ops/s
Iteration  23: 1163203.043 ops/s
Iteration  24: 1160926.444 ops/s
Iteration  25: 1164165.772 ops/s
Iteration  26: 1160268.141 ops/s
Iteration  27: 1160280.763 ops/s
Iteration  28: 1159458.129 ops/s
Iteration  29: 1159383.211 ops/s
Iteration  30: 1160010.428 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_newEmpty":
  1161048.180 ±(99.9%) 2896.161 ops/s [Average]
  (min, avg, max) = (1140555.976, 1161048.180, 1167190.020), stdev = 4334.837
  CI (99.9%): [1158152.019, 1163944.341] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
SynchronizedSortedBagMultimapTest._Benchmark.benchmark_newEmpty  thrpt   30  1161048.180 ± 2896.161  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_newMultimapFromPairs$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_newMultimapFromPairs

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 287286.462 ops/s
# Warmup Iteration   2: 592368.025 ops/s
# Warmup Iteration   3: 670515.510 ops/s
# Warmup Iteration   4: 669982.634 ops/s
# Warmup Iteration   5: 577246.869 ops/s
# Warmup Iteration   6: 672429.569 ops/s
# Warmup Iteration   7: 674867.023 ops/s
# Warmup Iteration   8: 673877.593 ops/s
# Warmup Iteration   9: 674233.439 ops/s
# Warmup Iteration  10: 674705.622 ops/s
# Warmup Iteration  11: 670952.144 ops/s
# Warmup Iteration  12: 672925.159 ops/s
# Warmup Iteration  13: 668377.959 ops/s
# Warmup Iteration  14: 673477.228 ops/s
# Warmup Iteration  15: 673455.723 ops/s
# Warmup Iteration  16: 676188.018 ops/s
# Warmup Iteration  17: 672276.767 ops/s
# Warmup Iteration  18: 674680.338 ops/s
# Warmup Iteration  19: 672812.110 ops/s
# Warmup Iteration  20: 674300.124 ops/s
# Warmup Iteration  21: 673344.728 ops/s
# Warmup Iteration  22: 674465.482 ops/s
# Warmup Iteration  23: 671572.547 ops/s
# Warmup Iteration  24: 673365.173 ops/s
# Warmup Iteration  25: 674620.088 ops/s
# Warmup Iteration  26: 672838.918 ops/s
# Warmup Iteration  27: 674843.382 ops/s
# Warmup Iteration  28: 673568.603 ops/s
# Warmup Iteration  29: 674291.973 ops/s
# Warmup Iteration  30: 672580.163 ops/s
Iteration   1: 672039.197 ops/s
Iteration   2: 674440.214 ops/s
Iteration   3: 672142.614 ops/s
Iteration   4: 673674.900 ops/s
Iteration   5: 674436.261 ops/s
Iteration   6: 673583.303 ops/s
Iteration   7: 671334.255 ops/s
Iteration   8: 674414.509 ops/s
Iteration   9: 673643.187 ops/s
Iteration  10: 673680.811 ops/s
Iteration  11: 675024.479 ops/s
Iteration  12: 675729.615 ops/s
Iteration  13: 674286.330 ops/s
Iteration  14: 675761.244 ops/s
Iteration  15: 671750.775 ops/s
Iteration  16: 673541.524 ops/s
Iteration  17: 674153.958 ops/s
Iteration  18: 671578.285 ops/s
Iteration  19: 674486.952 ops/s
Iteration  20: 673099.733 ops/s
Iteration  21: 673775.184 ops/s
Iteration  22: 673349.083 ops/s
Iteration  23: 670405.635 ops/s
Iteration  24: 673353.126 ops/s
Iteration  25: 674535.073 ops/s
Iteration  26: 672727.739 ops/s
Iteration  27: 673671.915 ops/s
Iteration  28: 675434.323 ops/s
Iteration  29: 674510.852 ops/s
Iteration  30: 669858.494 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_newMultimapFromPairs":
  673480.786 ±(99.9%) 977.705 ops/s [Average]
  (min, avg, max) = (669858.494, 673480.786, 675761.244), stdev = 1463.382
  CI (99.9%): [672503.081, 674458.490] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score     Error  Units
SynchronizedSortedBagMultimapTest._Benchmark.benchmark_newMultimapFromPairs  thrpt   30  673480.786 ± 977.705  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_notEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_notEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2087140.338 ops/s
# Warmup Iteration   2: 4455596.512 ops/s
# Warmup Iteration   3: 4487954.161 ops/s
# Warmup Iteration   4: 5221149.065 ops/s
# Warmup Iteration   5: 5267523.320 ops/s
# Warmup Iteration   6: 5259778.631 ops/s
# Warmup Iteration   7: 5245845.007 ops/s
# Warmup Iteration   8: 5258269.840 ops/s
# Warmup Iteration   9: 5194021.201 ops/s
# Warmup Iteration  10: 5287583.824 ops/s
# Warmup Iteration  11: 5266476.369 ops/s
# Warmup Iteration  12: 5172216.829 ops/s
# Warmup Iteration  13: 5216520.933 ops/s
# Warmup Iteration  14: 5189668.727 ops/s
# Warmup Iteration  15: 5222567.470 ops/s
# Warmup Iteration  16: 5212012.846 ops/s
# Warmup Iteration  17: 5270745.652 ops/s
# Warmup Iteration  18: 5195884.971 ops/s
# Warmup Iteration  19: 5266574.974 ops/s
# Warmup Iteration  20: 5237457.688 ops/s
# Warmup Iteration  21: 5325982.936 ops/s
# Warmup Iteration  22: 5203825.484 ops/s
# Warmup Iteration  23: 5251796.487 ops/s
# Warmup Iteration  24: 5313811.020 ops/s
# Warmup Iteration  25: 5247110.130 ops/s
# Warmup Iteration  26: 5321304.591 ops/s
# Warmup Iteration  27: 5342490.304 ops/s
# Warmup Iteration  28: 5313481.669 ops/s
# Warmup Iteration  29: 5245174.909 ops/s
# Warmup Iteration  30: 5245790.344 ops/s
Iteration   1: 5325941.983 ops/s
Iteration   2: 5168360.810 ops/s
Iteration   3: 5269922.607 ops/s
Iteration   4: 5326467.317 ops/s
Iteration   5: 5252210.854 ops/s
Iteration   6: 5289614.980 ops/s
Iteration   7: 5226018.459 ops/s
Iteration   8: 5264684.894 ops/s
Iteration   9: 5307250.919 ops/s
Iteration  10: 5274208.534 ops/s
Iteration  11: 5225964.882 ops/s
Iteration  12: 5249772.936 ops/s
Iteration  13: 5238915.419 ops/s
Iteration  14: 5301563.060 ops/s
Iteration  15: 5330376.504 ops/s
Iteration  16: 5271232.641 ops/s
Iteration  17: 5223367.666 ops/s
Iteration  18: 5199203.941 ops/s
Iteration  19: 5201105.545 ops/s
Iteration  20: 5199471.249 ops/s
Iteration  21: 5232029.866 ops/s
Iteration  22: 5285591.043 ops/s
Iteration  23: 5314368.898 ops/s
Iteration  24: 5397169.985 ops/s
Iteration  25: 5341524.714 ops/s
Iteration  26: 5268843.450 ops/s
Iteration  27: 5316089.242 ops/s
Iteration  28: 5267228.698 ops/s
Iteration  29: 5302563.017 ops/s
Iteration  30: 5355619.222 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_notEmpty":
  5274222.778 ±(99.9%) 35203.426 ops/s [Average]
  (min, avg, max) = (5168360.810, 5274222.778, 5397169.985), stdev = 52690.835
  CI (99.9%): [5239019.351, 5309426.204] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
SynchronizedSortedBagMultimapTest._Benchmark.benchmark_notEmpty  thrpt   30  5274222.778 ± 35203.426  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_putAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_putAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 148144.527 ops/s
# Warmup Iteration   2: 289706.647 ops/s
# Warmup Iteration   3: 336203.527 ops/s
# Warmup Iteration   4: 338729.936 ops/s
# Warmup Iteration   5: 289885.276 ops/s
# Warmup Iteration   6: 339367.560 ops/s
# Warmup Iteration   7: 338733.118 ops/s
# Warmup Iteration   8: 339111.697 ops/s
# Warmup Iteration   9: 339727.099 ops/s
# Warmup Iteration  10: 337877.810 ops/s
# Warmup Iteration  11: 338652.082 ops/s
# Warmup Iteration  12: 338574.113 ops/s
# Warmup Iteration  13: 338960.147 ops/s
# Warmup Iteration  14: 339037.692 ops/s
# Warmup Iteration  15: 337792.102 ops/s
# Warmup Iteration  16: 337903.401 ops/s
# Warmup Iteration  17: 339788.474 ops/s
# Warmup Iteration  18: 339448.448 ops/s
# Warmup Iteration  19: 339114.645 ops/s
# Warmup Iteration  20: 339321.544 ops/s
# Warmup Iteration  21: 339072.629 ops/s
# Warmup Iteration  22: 340078.327 ops/s
# Warmup Iteration  23: 338702.023 ops/s
# Warmup Iteration  24: 340374.913 ops/s
# Warmup Iteration  25: 340485.645 ops/s
# Warmup Iteration  26: 340482.467 ops/s
# Warmup Iteration  27: 339266.744 ops/s
# Warmup Iteration  28: 340321.805 ops/s
# Warmup Iteration  29: 340294.459 ops/s
# Warmup Iteration  30: 339837.108 ops/s
Iteration   1: 339007.078 ops/s
Iteration   2: 338886.479 ops/s
Iteration   3: 339915.438 ops/s
Iteration   4: 339109.013 ops/s
Iteration   5: 338892.189 ops/s
Iteration   6: 340012.702 ops/s
Iteration   7: 339727.075 ops/s
Iteration   8: 339902.459 ops/s
Iteration   9: 340868.813 ops/s
Iteration  10: 339315.201 ops/s
Iteration  11: 340100.291 ops/s
Iteration  12: 340536.539 ops/s
Iteration  13: 339320.281 ops/s
Iteration  14: 339867.938 ops/s
Iteration  15: 339949.954 ops/s
Iteration  16: 337560.961 ops/s
Iteration  17: 338736.214 ops/s
Iteration  18: 338699.465 ops/s
Iteration  19: 340822.227 ops/s
Iteration  20: 339128.153 ops/s
Iteration  21: 339380.458 ops/s
Iteration  22: 341188.248 ops/s
Iteration  23: 340059.118 ops/s
Iteration  24: 339672.644 ops/s
Iteration  25: 340226.241 ops/s
Iteration  26: 339828.194 ops/s
Iteration  27: 340292.575 ops/s
Iteration  28: 338873.959 ops/s
Iteration  29: 339017.417 ops/s
Iteration  30: 339526.370 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_putAll":
  339614.123 ±(99.9%) 512.722 ops/s [Average]
  (min, avg, max) = (337560.961, 339614.123, 341188.248), stdev = 767.419
  CI (99.9%): [339101.401, 340126.846] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score     Error  Units
SynchronizedSortedBagMultimapTest._Benchmark.benchmark_putAll  thrpt   30  339614.123 ± 512.722  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_putAllFromCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_putAllFromCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 203827.599 ops/s
# Warmup Iteration   2: 377590.470 ops/s
# Warmup Iteration   3: 452175.765 ops/s
# Warmup Iteration   4: 456568.739 ops/s
# Warmup Iteration   5: 391847.794 ops/s
# Warmup Iteration   6: 456795.841 ops/s
# Warmup Iteration   7: 455915.204 ops/s
# Warmup Iteration   8: 454904.227 ops/s
# Warmup Iteration   9: 453719.941 ops/s
# Warmup Iteration  10: 456388.776 ops/s
# Warmup Iteration  11: 454520.796 ops/s
# Warmup Iteration  12: 456031.966 ops/s
# Warmup Iteration  13: 456145.792 ops/s
# Warmup Iteration  14: 457092.651 ops/s
# Warmup Iteration  15: 456007.213 ops/s
# Warmup Iteration  16: 456109.489 ops/s
# Warmup Iteration  17: 455728.044 ops/s
# Warmup Iteration  18: 457619.756 ops/s
# Warmup Iteration  19: 456395.736 ops/s
# Warmup Iteration  20: 456371.497 ops/s
# Warmup Iteration  21: 455200.069 ops/s
# Warmup Iteration  22: 454851.228 ops/s
# Warmup Iteration  23: 455080.644 ops/s
# Warmup Iteration  24: 455168.315 ops/s
# Warmup Iteration  25: 455503.621 ops/s
# Warmup Iteration  26: 455032.855 ops/s
# Warmup Iteration  27: 455008.011 ops/s
# Warmup Iteration  28: 455131.716 ops/s
# Warmup Iteration  29: 454356.208 ops/s
# Warmup Iteration  30: 455083.594 ops/s
Iteration   1: 454516.803 ops/s
Iteration   2: 453539.422 ops/s
Iteration   3: 456093.813 ops/s
Iteration   4: 453652.310 ops/s
Iteration   5: 454895.405 ops/s
Iteration   6: 455401.548 ops/s
Iteration   7: 454556.340 ops/s
Iteration   8: 455165.877 ops/s
Iteration   9: 456021.018 ops/s
Iteration  10: 455298.459 ops/s
Iteration  11: 455898.677 ops/s
Iteration  12: 454971.445 ops/s
Iteration  13: 456868.914 ops/s
Iteration  14: 456010.131 ops/s
Iteration  15: 455095.678 ops/s
Iteration  16: 455262.321 ops/s
Iteration  17: 455372.598 ops/s
Iteration  18: 455628.570 ops/s
Iteration  19: 454847.179 ops/s
Iteration  20: 454181.848 ops/s
Iteration  21: 455620.626 ops/s
Iteration  22: 456251.217 ops/s
Iteration  23: 455616.424 ops/s
Iteration  24: 455927.347 ops/s
Iteration  25: 454898.433 ops/s
Iteration  26: 455782.894 ops/s
Iteration  27: 455148.702 ops/s
Iteration  28: 453781.659 ops/s
Iteration  29: 454776.075 ops/s
Iteration  30: 455886.186 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_putAllFromCollection":
  455232.264 ±(99.9%) 527.406 ops/s [Average]
  (min, avg, max) = (453539.422, 455232.264, 456868.914), stdev = 789.397
  CI (99.9%): [454704.858, 455759.670] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score     Error  Units
SynchronizedSortedBagMultimapTest._Benchmark.benchmark_putAllFromCollection  thrpt   30  455232.264 ± 527.406  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_putAllFromIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_putAllFromIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 333501.018 ops/s
# Warmup Iteration   2: 576417.878 ops/s
# Warmup Iteration   3: 710002.112 ops/s
# Warmup Iteration   4: 713586.264 ops/s
# Warmup Iteration   5: 709092.129 ops/s
# Warmup Iteration   6: 608333.879 ops/s
# Warmup Iteration   7: 713899.022 ops/s
# Warmup Iteration   8: 713405.587 ops/s
# Warmup Iteration   9: 714357.277 ops/s
# Warmup Iteration  10: 714214.593 ops/s
# Warmup Iteration  11: 714782.733 ops/s
# Warmup Iteration  12: 715049.913 ops/s
# Warmup Iteration  13: 713323.145 ops/s
# Warmup Iteration  14: 714662.398 ops/s
# Warmup Iteration  15: 715076.604 ops/s
# Warmup Iteration  16: 714830.210 ops/s
# Warmup Iteration  17: 713576.313 ops/s
# Warmup Iteration  18: 713901.860 ops/s
# Warmup Iteration  19: 714341.300 ops/s
# Warmup Iteration  20: 714057.604 ops/s
# Warmup Iteration  21: 715894.029 ops/s
# Warmup Iteration  22: 713699.669 ops/s
# Warmup Iteration  23: 713304.540 ops/s
# Warmup Iteration  24: 712706.592 ops/s
# Warmup Iteration  25: 714087.023 ops/s
# Warmup Iteration  26: 714648.945 ops/s
# Warmup Iteration  27: 714307.263 ops/s
# Warmup Iteration  28: 713855.038 ops/s
# Warmup Iteration  29: 713324.194 ops/s
# Warmup Iteration  30: 714851.857 ops/s
Iteration   1: 713554.275 ops/s
Iteration   2: 714813.738 ops/s
Iteration   3: 714353.807 ops/s
Iteration   4: 717817.126 ops/s
Iteration   5: 714010.625 ops/s
Iteration   6: 713434.005 ops/s
Iteration   7: 714201.611 ops/s
Iteration   8: 715097.285 ops/s
Iteration   9: 716566.278 ops/s
Iteration  10: 714546.196 ops/s
Iteration  11: 713577.543 ops/s
Iteration  12: 712953.714 ops/s
Iteration  13: 714915.907 ops/s
Iteration  14: 714331.686 ops/s
Iteration  15: 713357.272 ops/s
Iteration  16: 712894.948 ops/s
Iteration  17: 716734.251 ops/s
Iteration  18: 716997.997 ops/s
Iteration  19: 713439.511 ops/s
Iteration  20: 716024.014 ops/s
Iteration  21: 714894.398 ops/s
Iteration  22: 711447.917 ops/s
Iteration  23: 715845.213 ops/s
Iteration  24: 714661.597 ops/s
Iteration  25: 713790.072 ops/s
Iteration  26: 715334.323 ops/s
Iteration  27: 716036.599 ops/s
Iteration  28: 715199.718 ops/s
Iteration  29: 717208.260 ops/s
Iteration  30: 714686.229 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_putAllFromIterable":
  714757.537 ±(99.9%) 967.806 ops/s [Average]
  (min, avg, max) = (711447.917, 714757.537, 717817.126), stdev = 1448.567
  CI (99.9%): [713789.731, 715725.343] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score     Error  Units
SynchronizedSortedBagMultimapTest._Benchmark.benchmark_putAllFromIterable  thrpt   30  714757.537 ± 967.806  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_putAllPairs$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_putAllPairs

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 66578.779 ops/s
# Warmup Iteration   2: 130779.610 ops/s
# Warmup Iteration   3: 153375.892 ops/s
# Warmup Iteration   4: 154761.076 ops/s
# Warmup Iteration   5: 131581.756 ops/s
# Warmup Iteration   6: 154151.383 ops/s
# Warmup Iteration   7: 154538.990 ops/s
# Warmup Iteration   8: 154541.125 ops/s
# Warmup Iteration   9: 154584.530 ops/s
# Warmup Iteration  10: 154254.758 ops/s
# Warmup Iteration  11: 154400.990 ops/s
# Warmup Iteration  12: 154253.186 ops/s
# Warmup Iteration  13: 154544.378 ops/s
# Warmup Iteration  14: 154337.374 ops/s
# Warmup Iteration  15: 154593.364 ops/s
# Warmup Iteration  16: 154783.467 ops/s
# Warmup Iteration  17: 154662.766 ops/s
# Warmup Iteration  18: 154667.320 ops/s
# Warmup Iteration  19: 154703.445 ops/s
# Warmup Iteration  20: 154477.338 ops/s
# Warmup Iteration  21: 154329.527 ops/s
# Warmup Iteration  22: 154467.907 ops/s
# Warmup Iteration  23: 155119.792 ops/s
# Warmup Iteration  24: 154510.742 ops/s
# Warmup Iteration  25: 154427.765 ops/s
# Warmup Iteration  26: 154672.810 ops/s
# Warmup Iteration  27: 154650.937 ops/s
# Warmup Iteration  28: 154736.044 ops/s
# Warmup Iteration  29: 154482.975 ops/s
# Warmup Iteration  30: 154488.049 ops/s
Iteration   1: 154044.399 ops/s
Iteration   2: 154348.106 ops/s
Iteration   3: 154857.591 ops/s
Iteration   4: 154612.626 ops/s
Iteration   5: 154295.292 ops/s
Iteration   6: 155023.822 ops/s
Iteration   7: 154563.586 ops/s
Iteration   8: 154895.957 ops/s
Iteration   9: 154693.137 ops/s
Iteration  10: 154447.676 ops/s
Iteration  11: 155008.468 ops/s
Iteration  12: 154327.423 ops/s
Iteration  13: 154595.482 ops/s
Iteration  14: 154509.648 ops/s
Iteration  15: 154514.045 ops/s
Iteration  16: 154345.793 ops/s
Iteration  17: 154112.549 ops/s
Iteration  18: 154817.915 ops/s
Iteration  19: 154040.286 ops/s
Iteration  20: 154588.332 ops/s
Iteration  21: 154255.284 ops/s
Iteration  22: 154499.239 ops/s
Iteration  23: 153759.089 ops/s
Iteration  24: 154998.163 ops/s
Iteration  25: 154521.451 ops/s
Iteration  26: 154523.059 ops/s
Iteration  27: 154797.565 ops/s
Iteration  28: 154332.414 ops/s
Iteration  29: 154067.980 ops/s
Iteration  30: 154959.342 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_putAllPairs":
  154511.857 ±(99.9%) 216.608 ops/s [Average]
  (min, avg, max) = (153759.089, 154511.857, 155023.822), stdev = 324.209
  CI (99.9%): [154295.249, 154728.466] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score     Error  Units
SynchronizedSortedBagMultimapTest._Benchmark.benchmark_putAllPairs  thrpt   30  154511.857 ± 216.608  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_putAndGrowMultimap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_putAndGrowMultimap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2528660.837 ops/s
# Warmup Iteration   2: 4616923.794 ops/s
# Warmup Iteration   3: 5883922.973 ops/s
# Warmup Iteration   4: 5210242.181 ops/s
# Warmup Iteration   5: 5922727.837 ops/s
# Warmup Iteration   6: 5915440.643 ops/s
# Warmup Iteration   7: 5894302.889 ops/s
# Warmup Iteration   8: 5856446.010 ops/s
# Warmup Iteration   9: 5901319.028 ops/s
# Warmup Iteration  10: 5882362.740 ops/s
# Warmup Iteration  11: 5903857.865 ops/s
# Warmup Iteration  12: 5907955.796 ops/s
# Warmup Iteration  13: 5894793.493 ops/s
# Warmup Iteration  14: 5931629.520 ops/s
# Warmup Iteration  15: 5910902.158 ops/s
# Warmup Iteration  16: 5900826.633 ops/s
# Warmup Iteration  17: 5861109.470 ops/s
# Warmup Iteration  18: 5870627.068 ops/s
# Warmup Iteration  19: 5828754.354 ops/s
# Warmup Iteration  20: 5819886.318 ops/s
# Warmup Iteration  21: 5850507.570 ops/s
# Warmup Iteration  22: 5878437.112 ops/s
# Warmup Iteration  23: 5838396.647 ops/s
# Warmup Iteration  24: 5860795.599 ops/s
# Warmup Iteration  25: 5874302.199 ops/s
# Warmup Iteration  26: 5873666.626 ops/s
# Warmup Iteration  27: 5861097.544 ops/s
# Warmup Iteration  28: 5873025.564 ops/s
# Warmup Iteration  29: 5823723.198 ops/s
# Warmup Iteration  30: 5840422.667 ops/s
Iteration   1: 5857281.330 ops/s
Iteration   2: 5854149.382 ops/s
Iteration   3: 5850716.811 ops/s
Iteration   4: 5854629.897 ops/s
Iteration   5: 5873742.283 ops/s
Iteration   6: 5837654.770 ops/s
Iteration   7: 5842017.321 ops/s
Iteration   8: 5865644.737 ops/s
Iteration   9: 5847189.914 ops/s
Iteration  10: 5859472.741 ops/s
Iteration  11: 5858856.773 ops/s
Iteration  12: 5866516.230 ops/s
Iteration  13: 5854442.338 ops/s
Iteration  14: 5806065.925 ops/s
Iteration  15: 5839611.618 ops/s
Iteration  16: 5818000.229 ops/s
Iteration  17: 5835784.508 ops/s
Iteration  18: 5857837.475 ops/s
Iteration  19: 5847133.240 ops/s
Iteration  20: 5877369.457 ops/s
Iteration  21: 5854062.092 ops/s
Iteration  22: 5895111.982 ops/s
Iteration  23: 5873441.398 ops/s
Iteration  24: 5850173.271 ops/s
Iteration  25: 5865389.658 ops/s
Iteration  26: 5874103.647 ops/s
Iteration  27: 5852399.539 ops/s
Iteration  28: 5855255.840 ops/s
Iteration  29: 5858210.609 ops/s
Iteration  30: 5871642.037 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_putAndGrowMultimap":
  5855130.235 ±(99.9%) 11682.473 ops/s [Average]
  (min, avg, max) = (5806065.925, 5855130.235, 5895111.982), stdev = 17485.777
  CI (99.9%): [5843447.762, 5866812.708] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
SynchronizedSortedBagMultimapTest._Benchmark.benchmark_putAndGrowMultimap  thrpt   30  5855130.235 ± 11682.473  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_put_createCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_put_createCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1594273.124 ops/s
# Warmup Iteration   2: 3573650.636 ops/s
# Warmup Iteration   3: 3784045.147 ops/s
# Warmup Iteration   4: 4497126.315 ops/s
# Warmup Iteration   5: 4480433.659 ops/s
# Warmup Iteration   6: 4521098.630 ops/s
# Warmup Iteration   7: 4489240.586 ops/s
# Warmup Iteration   8: 4483874.637 ops/s
# Warmup Iteration   9: 4456167.359 ops/s
# Warmup Iteration  10: 4464224.865 ops/s
# Warmup Iteration  11: 4495867.715 ops/s
# Warmup Iteration  12: 4507936.471 ops/s
# Warmup Iteration  13: 4514505.687 ops/s
# Warmup Iteration  14: 4493606.931 ops/s
# Warmup Iteration  15: 4507770.138 ops/s
# Warmup Iteration  16: 4508908.757 ops/s
# Warmup Iteration  17: 4548575.365 ops/s
# Warmup Iteration  18: 4539209.189 ops/s
# Warmup Iteration  19: 4518511.681 ops/s
# Warmup Iteration  20: 4494918.248 ops/s
# Warmup Iteration  21: 4519846.404 ops/s
# Warmup Iteration  22: 4524763.757 ops/s
# Warmup Iteration  23: 4511580.824 ops/s
# Warmup Iteration  24: 4490588.288 ops/s
# Warmup Iteration  25: 4517329.052 ops/s
# Warmup Iteration  26: 4511318.491 ops/s
# Warmup Iteration  27: 4518448.269 ops/s
# Warmup Iteration  28: 4498328.304 ops/s
# Warmup Iteration  29: 4517960.442 ops/s
# Warmup Iteration  30: 4515376.792 ops/s
Iteration   1: 4499765.728 ops/s
Iteration   2: 4501562.041 ops/s
Iteration   3: 4472130.432 ops/s
Iteration   4: 4499622.190 ops/s
Iteration   5: 4537235.758 ops/s
Iteration   6: 4547070.566 ops/s
Iteration   7: 4497592.284 ops/s
Iteration   8: 4516883.383 ops/s
Iteration   9: 4512507.159 ops/s
Iteration  10: 4585662.603 ops/s
Iteration  11: 4544468.370 ops/s
Iteration  12: 4530739.180 ops/s
Iteration  13: 4540744.283 ops/s
Iteration  14: 4448206.831 ops/s
Iteration  15: 4496179.098 ops/s
Iteration  16: 4489440.894 ops/s
Iteration  17: 4488332.158 ops/s
Iteration  18: 4497671.087 ops/s
Iteration  19: 4532214.876 ops/s
Iteration  20: 4529201.274 ops/s
Iteration  21: 4504307.327 ops/s
Iteration  22: 4507160.294 ops/s
Iteration  23: 4497997.992 ops/s
Iteration  24: 4506968.600 ops/s
Iteration  25: 4482506.472 ops/s
Iteration  26: 4500401.274 ops/s
Iteration  27: 4530679.057 ops/s
Iteration  28: 4478769.526 ops/s
Iteration  29: 4475853.095 ops/s
Iteration  30: 4484324.769 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_put_createCollection":
  4507873.287 ±(99.9%) 18559.967 ops/s [Average]
  (min, avg, max) = (4448206.831, 4507873.287, 4585662.603), stdev = 27779.687
  CI (99.9%): [4489313.320, 4526433.253] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
SynchronizedSortedBagMultimapTest._Benchmark.benchmark_put_createCollection  thrpt   30  4507873.287 ± 18559.967  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_rejectKeysMultiValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_rejectKeysMultiValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 107706.497 ops/s
# Warmup Iteration   2: 222661.462 ops/s
# Warmup Iteration   3: 271900.040 ops/s
# Warmup Iteration   4: 273711.696 ops/s
# Warmup Iteration   5: 274141.088 ops/s
# Warmup Iteration   6: 230219.992 ops/s
# Warmup Iteration   7: 273961.689 ops/s
# Warmup Iteration   8: 273669.485 ops/s
# Warmup Iteration   9: 274086.951 ops/s
# Warmup Iteration  10: 273131.413 ops/s
# Warmup Iteration  11: 273406.138 ops/s
# Warmup Iteration  12: 273781.555 ops/s
# Warmup Iteration  13: 273720.729 ops/s
# Warmup Iteration  14: 273346.499 ops/s
# Warmup Iteration  15: 273576.559 ops/s
# Warmup Iteration  16: 273950.794 ops/s
# Warmup Iteration  17: 274048.488 ops/s
# Warmup Iteration  18: 273964.632 ops/s
# Warmup Iteration  19: 273412.362 ops/s
# Warmup Iteration  20: 273625.872 ops/s
# Warmup Iteration  21: 273510.907 ops/s
# Warmup Iteration  22: 274047.593 ops/s
# Warmup Iteration  23: 273417.919 ops/s
# Warmup Iteration  24: 273456.473 ops/s
# Warmup Iteration  25: 273667.620 ops/s
# Warmup Iteration  26: 273592.836 ops/s
# Warmup Iteration  27: 273662.175 ops/s
# Warmup Iteration  28: 273830.220 ops/s
# Warmup Iteration  29: 273175.364 ops/s
# Warmup Iteration  30: 273763.375 ops/s
Iteration   1: 273118.182 ops/s
Iteration   2: 273887.198 ops/s
Iteration   3: 274663.653 ops/s
Iteration   4: 273441.453 ops/s
Iteration   5: 274497.112 ops/s
Iteration   6: 273476.017 ops/s
Iteration   7: 274092.627 ops/s
Iteration   8: 273616.862 ops/s
Iteration   9: 274313.929 ops/s
Iteration  10: 274221.518 ops/s
Iteration  11: 275222.991 ops/s
Iteration  12: 273996.519 ops/s
Iteration  13: 275095.079 ops/s
Iteration  14: 274056.580 ops/s
Iteration  15: 273048.799 ops/s
Iteration  16: 274385.810 ops/s
Iteration  17: 274168.440 ops/s
Iteration  18: 274345.853 ops/s
Iteration  19: 273926.800 ops/s
Iteration  20: 275228.673 ops/s
Iteration  21: 273840.873 ops/s
Iteration  22: 273562.244 ops/s
Iteration  23: 273551.405 ops/s
Iteration  24: 273829.525 ops/s
Iteration  25: 272954.561 ops/s
Iteration  26: 273371.683 ops/s
Iteration  27: 272141.758 ops/s
Iteration  28: 273332.962 ops/s
Iteration  29: 273370.361 ops/s
Iteration  30: 273447.539 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_rejectKeysMultiValues":
  273873.567 ±(99.9%) 461.504 ops/s [Average]
  (min, avg, max) = (272141.758, 273873.567, 275228.673), stdev = 690.757
  CI (99.9%): [273412.063, 274335.071] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score     Error  Units
SynchronizedSortedBagMultimapTest._Benchmark.benchmark_rejectKeysMultiValues  thrpt   30  273873.567 ± 461.504  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_rejectKeysValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_rejectKeysValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 99118.364 ops/s
# Warmup Iteration   2: 245305.809 ops/s
# Warmup Iteration   3: 307737.085 ops/s
# Warmup Iteration   4: 309299.195 ops/s
# Warmup Iteration   5: 309995.945 ops/s
# Warmup Iteration   6: 260067.771 ops/s
# Warmup Iteration   7: 309528.603 ops/s
# Warmup Iteration   8: 310033.526 ops/s
# Warmup Iteration   9: 310001.830 ops/s
# Warmup Iteration  10: 309574.513 ops/s
# Warmup Iteration  11: 309424.321 ops/s
# Warmup Iteration  12: 310283.099 ops/s
# Warmup Iteration  13: 309681.666 ops/s
# Warmup Iteration  14: 308986.361 ops/s
# Warmup Iteration  15: 309318.446 ops/s
# Warmup Iteration  16: 309744.249 ops/s
# Warmup Iteration  17: 309926.978 ops/s
# Warmup Iteration  18: 310912.104 ops/s
# Warmup Iteration  19: 310992.540 ops/s
# Warmup Iteration  20: 310243.389 ops/s
# Warmup Iteration  21: 310191.957 ops/s
# Warmup Iteration  22: 311049.642 ops/s
# Warmup Iteration  23: 310907.131 ops/s
# Warmup Iteration  24: 311726.591 ops/s
# Warmup Iteration  25: 311607.767 ops/s
# Warmup Iteration  26: 310726.136 ops/s
# Warmup Iteration  27: 311584.173 ops/s
# Warmup Iteration  28: 311286.011 ops/s
# Warmup Iteration  29: 310054.006 ops/s
# Warmup Iteration  30: 311325.772 ops/s
Iteration   1: 311636.747 ops/s
Iteration   2: 311899.197 ops/s
Iteration   3: 310885.305 ops/s
Iteration   4: 310275.650 ops/s
Iteration   5: 311248.943 ops/s
Iteration   6: 310779.121 ops/s
Iteration   7: 309509.636 ops/s
Iteration   8: 311933.547 ops/s
Iteration   9: 311124.300 ops/s
Iteration  10: 311610.186 ops/s
Iteration  11: 311145.720 ops/s
Iteration  12: 310886.418 ops/s
Iteration  13: 310806.957 ops/s
Iteration  14: 311630.942 ops/s
Iteration  15: 311137.438 ops/s
Iteration  16: 310938.056 ops/s
Iteration  17: 310359.513 ops/s
Iteration  18: 310458.967 ops/s
Iteration  19: 310963.766 ops/s
Iteration  20: 311500.569 ops/s
Iteration  21: 309661.017 ops/s
Iteration  22: 310701.349 ops/s
Iteration  23: 310336.137 ops/s
Iteration  24: 310616.114 ops/s
Iteration  25: 310828.930 ops/s
Iteration  26: 310508.872 ops/s
Iteration  27: 311665.934 ops/s
Iteration  28: 310132.487 ops/s
Iteration  29: 311380.795 ops/s
Iteration  30: 312108.967 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_rejectKeysValues":
  310955.719 ±(99.9%) 430.540 ops/s [Average]
  (min, avg, max) = (309509.636, 310955.719, 312108.967), stdev = 644.413
  CI (99.9%): [310525.179, 311386.260] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score     Error  Units
SynchronizedSortedBagMultimapTest._Benchmark.benchmark_rejectKeysValues  thrpt   30  310955.719 ± 430.540  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 148821.424 ops/s
# Warmup Iteration   2: 271947.050 ops/s
# Warmup Iteration   3: 326201.127 ops/s
# Warmup Iteration   4: 327593.819 ops/s
# Warmup Iteration   5: 281415.850 ops/s
# Warmup Iteration   6: 327295.651 ops/s
# Warmup Iteration   7: 327243.105 ops/s
# Warmup Iteration   8: 328440.824 ops/s
# Warmup Iteration   9: 327944.927 ops/s
# Warmup Iteration  10: 326464.291 ops/s
# Warmup Iteration  11: 327530.792 ops/s
# Warmup Iteration  12: 328257.777 ops/s
# Warmup Iteration  13: 327067.962 ops/s
# Warmup Iteration  14: 326312.873 ops/s
# Warmup Iteration  15: 328094.055 ops/s
# Warmup Iteration  16: 327718.345 ops/s
# Warmup Iteration  17: 327270.679 ops/s
# Warmup Iteration  18: 327431.529 ops/s
# Warmup Iteration  19: 327643.169 ops/s
# Warmup Iteration  20: 327233.332 ops/s
# Warmup Iteration  21: 327279.173 ops/s
# Warmup Iteration  22: 328081.178 ops/s
# Warmup Iteration  23: 327558.693 ops/s
# Warmup Iteration  24: 328687.804 ops/s
# Warmup Iteration  25: 326922.836 ops/s
# Warmup Iteration  26: 327382.891 ops/s
# Warmup Iteration  27: 327756.165 ops/s
# Warmup Iteration  28: 328245.968 ops/s
# Warmup Iteration  29: 328067.365 ops/s
# Warmup Iteration  30: 328124.203 ops/s
Iteration   1: 327334.402 ops/s
Iteration   2: 328969.020 ops/s
Iteration   3: 327387.467 ops/s
Iteration   4: 328848.507 ops/s
Iteration   5: 327808.869 ops/s
Iteration   6: 327576.471 ops/s
Iteration   7: 327422.313 ops/s
Iteration   8: 326878.873 ops/s
Iteration   9: 328551.910 ops/s
Iteration  10: 327492.663 ops/s
Iteration  11: 327828.402 ops/s
Iteration  12: 327482.728 ops/s
Iteration  13: 328154.273 ops/s
Iteration  14: 327951.475 ops/s
Iteration  15: 328209.876 ops/s
Iteration  16: 327195.167 ops/s
Iteration  17: 327895.369 ops/s
Iteration  18: 328052.424 ops/s
Iteration  19: 327734.120 ops/s
Iteration  20: 327136.037 ops/s
Iteration  21: 327593.766 ops/s
Iteration  22: 327350.295 ops/s
Iteration  23: 327881.376 ops/s
Iteration  24: 328321.005 ops/s
Iteration  25: 327645.713 ops/s
Iteration  26: 326513.475 ops/s
Iteration  27: 329074.175 ops/s
Iteration  28: 328417.816 ops/s
Iteration  29: 327669.796 ops/s
Iteration  30: 328686.266 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_remove":
  327835.468 ±(99.9%) 408.237 ops/s [Average]
  (min, avg, max) = (326513.475, 327835.468, 329074.175), stdev = 611.030
  CI (99.9%): [327427.231, 328243.705] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score     Error  Units
SynchronizedSortedBagMultimapTest._Benchmark.benchmark_remove  thrpt   30  327835.468 ± 408.237  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_removeKey$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_removeKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 301243.431 ops/s
# Warmup Iteration   2: 562411.909 ops/s
# Warmup Iteration   3: 790313.054 ops/s
# Warmup Iteration   4: 795819.638 ops/s
# Warmup Iteration   5: 780312.300 ops/s
# Warmup Iteration   6: 687347.041 ops/s
# Warmup Iteration   7: 794380.300 ops/s
# Warmup Iteration   8: 795717.048 ops/s
# Warmup Iteration   9: 793830.588 ops/s
# Warmup Iteration  10: 796930.088 ops/s
# Warmup Iteration  11: 795513.250 ops/s
# Warmup Iteration  12: 796142.219 ops/s
# Warmup Iteration  13: 795197.272 ops/s
# Warmup Iteration  14: 796992.087 ops/s
# Warmup Iteration  15: 797213.037 ops/s
# Warmup Iteration  16: 795805.547 ops/s
# Warmup Iteration  17: 797134.172 ops/s
# Warmup Iteration  18: 795350.386 ops/s
# Warmup Iteration  19: 795822.427 ops/s
# Warmup Iteration  20: 797564.172 ops/s
# Warmup Iteration  21: 795528.799 ops/s
# Warmup Iteration  22: 795230.552 ops/s
# Warmup Iteration  23: 797820.520 ops/s
# Warmup Iteration  24: 796105.296 ops/s
# Warmup Iteration  25: 796056.934 ops/s
# Warmup Iteration  26: 796386.988 ops/s
# Warmup Iteration  27: 795035.273 ops/s
# Warmup Iteration  28: 794213.481 ops/s
# Warmup Iteration  29: 794620.315 ops/s
# Warmup Iteration  30: 795433.793 ops/s
Iteration   1: 796675.164 ops/s
Iteration   2: 795002.481 ops/s
Iteration   3: 796144.380 ops/s
Iteration   4: 792435.939 ops/s
Iteration   5: 795768.950 ops/s
Iteration   6: 793396.184 ops/s
Iteration   7: 795482.807 ops/s
Iteration   8: 796247.169 ops/s
Iteration   9: 796202.656 ops/s
Iteration  10: 794638.856 ops/s
Iteration  11: 793902.982 ops/s
Iteration  12: 796833.072 ops/s
Iteration  13: 795124.640 ops/s
Iteration  14: 796738.142 ops/s
Iteration  15: 795354.237 ops/s
Iteration  16: 795779.913 ops/s
Iteration  17: 797710.949 ops/s
Iteration  18: 794095.690 ops/s
Iteration  19: 797225.785 ops/s
Iteration  20: 791952.079 ops/s
Iteration  21: 794619.675 ops/s
Iteration  22: 794470.458 ops/s
Iteration  23: 793187.034 ops/s
Iteration  24: 795890.891 ops/s
Iteration  25: 797090.925 ops/s
Iteration  26: 795433.574 ops/s
Iteration  27: 794926.805 ops/s
Iteration  28: 795822.647 ops/s
Iteration  29: 796015.752 ops/s
Iteration  30: 798796.503 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_removeKey":
  795432.211 ±(99.9%) 1019.699 ops/s [Average]
  (min, avg, max) = (791952.079, 795432.211, 798796.503), stdev = 1526.238
  CI (99.9%): [794412.512, 796451.911] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
SynchronizedSortedBagMultimapTest._Benchmark.benchmark_removeKey  thrpt   30  795432.211 ± 1019.699  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_removeObject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_removeObject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1594218.906 ops/s
# Warmup Iteration   2: 3593212.914 ops/s
# Warmup Iteration   3: 3884839.126 ops/s
# Warmup Iteration   4: 4593882.936 ops/s
# Warmup Iteration   5: 4586610.471 ops/s
# Warmup Iteration   6: 4578829.168 ops/s
# Warmup Iteration   7: 4623851.342 ops/s
# Warmup Iteration   8: 4587431.272 ops/s
# Warmup Iteration   9: 4604418.251 ops/s
# Warmup Iteration  10: 4568554.903 ops/s
# Warmup Iteration  11: 4575588.767 ops/s
# Warmup Iteration  12: 4591102.454 ops/s
# Warmup Iteration  13: 4589875.169 ops/s
# Warmup Iteration  14: 4574744.907 ops/s
# Warmup Iteration  15: 4586673.635 ops/s
# Warmup Iteration  16: 4575208.171 ops/s
# Warmup Iteration  17: 4652736.960 ops/s
# Warmup Iteration  18: 4633967.990 ops/s
# Warmup Iteration  19: 4668426.017 ops/s
# Warmup Iteration  20: 4687422.508 ops/s
# Warmup Iteration  21: 4686660.510 ops/s
# Warmup Iteration  22: 4700660.754 ops/s
# Warmup Iteration  23: 4723540.133 ops/s
# Warmup Iteration  24: 4684322.612 ops/s
# Warmup Iteration  25: 4670493.528 ops/s
# Warmup Iteration  26: 4679762.380 ops/s
# Warmup Iteration  27: 4693556.444 ops/s
# Warmup Iteration  28: 4678403.140 ops/s
# Warmup Iteration  29: 4699003.217 ops/s
# Warmup Iteration  30: 4692203.675 ops/s
Iteration   1: 4666257.721 ops/s
Iteration   2: 4705448.625 ops/s
Iteration   3: 4686339.123 ops/s
Iteration   4: 4706621.635 ops/s
Iteration   5: 4714441.183 ops/s
Iteration   6: 4678449.966 ops/s
Iteration   7: 4682813.123 ops/s
Iteration   8: 4637354.124 ops/s
Iteration   9: 4656069.566 ops/s
Iteration  10: 4671953.097 ops/s
Iteration  11: 4678002.067 ops/s
Iteration  12: 4665225.517 ops/s
Iteration  13: 4649346.380 ops/s
Iteration  14: 4706916.926 ops/s
Iteration  15: 4692806.826 ops/s
Iteration  16: 4715598.196 ops/s
Iteration  17: 4671758.073 ops/s
Iteration  18: 4659514.365 ops/s
Iteration  19: 4697456.385 ops/s
Iteration  20: 4641976.870 ops/s
Iteration  21: 4691100.949 ops/s
Iteration  22: 4698042.340 ops/s
Iteration  23: 4696075.651 ops/s
Iteration  24: 4671666.655 ops/s
Iteration  25: 4660976.990 ops/s
Iteration  26: 4623446.989 ops/s
Iteration  27: 4641330.415 ops/s
Iteration  28: 4647434.637 ops/s
Iteration  29: 4701875.820 ops/s
Iteration  30: 4671702.117 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_removeObject":
  4676266.744 ±(99.9%) 16559.656 ops/s [Average]
  (min, avg, max) = (4623446.989, 4676266.744, 4715598.196), stdev = 24785.715
  CI (99.9%): [4659707.089, 4692826.400] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
SynchronizedSortedBagMultimapTest._Benchmark.benchmark_removeObject  thrpt   30  4676266.744 ± 16559.656  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_replaceValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_replaceValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 54338.222 ops/s
# Warmup Iteration   2: 104225.238 ops/s
# Warmup Iteration   3: 128056.056 ops/s
# Warmup Iteration   4: 128654.021 ops/s
# Warmup Iteration   5: 128540.486 ops/s
# Warmup Iteration   6: 108394.636 ops/s
# Warmup Iteration   7: 128646.880 ops/s
# Warmup Iteration   8: 128737.990 ops/s
# Warmup Iteration   9: 128666.873 ops/s
# Warmup Iteration  10: 128882.081 ops/s
# Warmup Iteration  11: 128872.604 ops/s
# Warmup Iteration  12: 128936.242 ops/s
# Warmup Iteration  13: 128382.558 ops/s
# Warmup Iteration  14: 128894.102 ops/s
# Warmup Iteration  15: 128831.816 ops/s
# Warmup Iteration  16: 128986.194 ops/s
# Warmup Iteration  17: 128819.371 ops/s
# Warmup Iteration  18: 128797.428 ops/s
# Warmup Iteration  19: 128652.646 ops/s
# Warmup Iteration  20: 128655.102 ops/s
# Warmup Iteration  21: 128913.445 ops/s
# Warmup Iteration  22: 128766.211 ops/s
# Warmup Iteration  23: 129000.022 ops/s
# Warmup Iteration  24: 128826.442 ops/s
# Warmup Iteration  25: 128710.038 ops/s
# Warmup Iteration  26: 128857.304 ops/s
# Warmup Iteration  27: 128740.620 ops/s
# Warmup Iteration  28: 128798.307 ops/s
# Warmup Iteration  29: 128448.949 ops/s
# Warmup Iteration  30: 128992.422 ops/s
Iteration   1: 128229.283 ops/s
Iteration   2: 128653.758 ops/s
Iteration   3: 128463.393 ops/s
Iteration   4: 128192.749 ops/s
Iteration   5: 129043.388 ops/s
Iteration   6: 128487.976 ops/s
Iteration   7: 128890.652 ops/s
Iteration   8: 129086.338 ops/s
Iteration   9: 128901.802 ops/s
Iteration  10: 128774.236 ops/s
Iteration  11: 128917.166 ops/s
Iteration  12: 128723.863 ops/s
Iteration  13: 128628.661 ops/s
Iteration  14: 128472.429 ops/s
Iteration  15: 129079.486 ops/s
Iteration  16: 128580.757 ops/s
Iteration  17: 128825.154 ops/s
Iteration  18: 128573.103 ops/s
Iteration  19: 128654.090 ops/s
Iteration  20: 128447.784 ops/s
Iteration  21: 128205.812 ops/s
Iteration  22: 129071.581 ops/s
Iteration  23: 128474.607 ops/s
Iteration  24: 128805.234 ops/s
Iteration  25: 128875.081 ops/s
Iteration  26: 128869.893 ops/s
Iteration  27: 128831.735 ops/s
Iteration  28: 128887.051 ops/s
Iteration  29: 128842.608 ops/s
Iteration  30: 128925.582 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_replaceValues":
  128713.842 ±(99.9%) 171.621 ops/s [Average]
  (min, avg, max) = (128192.749, 128713.842, 129086.338), stdev = 256.874
  CI (99.9%): [128542.221, 128885.462] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score     Error  Units
SynchronizedSortedBagMultimapTest._Benchmark.benchmark_replaceValues  thrpt   30  128713.842 ± 171.621  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_replaceValues_absent_key$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_replaceValues_absent_key

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 74243.954 ops/s
# Warmup Iteration   2: 140397.260 ops/s
# Warmup Iteration   3: 171055.217 ops/s
# Warmup Iteration   4: 171804.931 ops/s
# Warmup Iteration   5: 171900.029 ops/s
# Warmup Iteration   6: 145025.403 ops/s
# Warmup Iteration   7: 172339.307 ops/s
# Warmup Iteration   8: 172594.698 ops/s
# Warmup Iteration   9: 172028.437 ops/s
# Warmup Iteration  10: 172321.190 ops/s
# Warmup Iteration  11: 172132.607 ops/s
# Warmup Iteration  12: 172197.895 ops/s
# Warmup Iteration  13: 172086.276 ops/s
# Warmup Iteration  14: 172140.739 ops/s
# Warmup Iteration  15: 172432.769 ops/s
# Warmup Iteration  16: 172483.284 ops/s
# Warmup Iteration  17: 172020.536 ops/s
# Warmup Iteration  18: 172189.855 ops/s
# Warmup Iteration  19: 172352.823 ops/s
# Warmup Iteration  20: 171938.865 ops/s
# Warmup Iteration  21: 171649.210 ops/s
# Warmup Iteration  22: 172255.659 ops/s
# Warmup Iteration  23: 172304.845 ops/s
# Warmup Iteration  24: 172436.961 ops/s
# Warmup Iteration  25: 171963.789 ops/s
# Warmup Iteration  26: 172040.247 ops/s
# Warmup Iteration  27: 172115.141 ops/s
# Warmup Iteration  28: 172324.659 ops/s
# Warmup Iteration  29: 172127.719 ops/s
# Warmup Iteration  30: 172170.760 ops/s
Iteration   1: 172158.244 ops/s
Iteration   2: 172565.081 ops/s
Iteration   3: 171853.457 ops/s
Iteration   4: 172259.210 ops/s
Iteration   5: 172211.114 ops/s
Iteration   6: 171853.666 ops/s
Iteration   7: 172085.397 ops/s
Iteration   8: 172012.373 ops/s
Iteration   9: 172068.542 ops/s
Iteration  10: 172145.330 ops/s
Iteration  11: 171955.746 ops/s
Iteration  12: 172264.270 ops/s
Iteration  13: 172258.828 ops/s
Iteration  14: 172279.739 ops/s
Iteration  15: 171677.297 ops/s
Iteration  16: 172203.727 ops/s
Iteration  17: 172577.056 ops/s
Iteration  18: 171872.672 ops/s
Iteration  19: 172165.099 ops/s
Iteration  20: 171862.494 ops/s
Iteration  21: 172265.109 ops/s
Iteration  22: 171772.729 ops/s
Iteration  23: 171924.226 ops/s
Iteration  24: 172342.864 ops/s
Iteration  25: 172296.035 ops/s
Iteration  26: 172226.092 ops/s
Iteration  27: 172033.122 ops/s
Iteration  28: 171710.210 ops/s
Iteration  29: 172481.008 ops/s
Iteration  30: 171981.256 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_replaceValues_absent_key":
  172112.067 ±(99.9%) 157.634 ops/s [Average]
  (min, avg, max) = (171677.297, 172112.067, 172577.056), stdev = 235.938
  CI (99.9%): [171954.433, 172269.700] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score     Error  Units
SynchronizedSortedBagMultimapTest._Benchmark.benchmark_replaceValues_absent_key  thrpt   30  172112.067 ± 157.634  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_selectKeysMultiValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_selectKeysMultiValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 103534.252 ops/s
# Warmup Iteration   2: 216217.584 ops/s
# Warmup Iteration   3: 262513.049 ops/s
# Warmup Iteration   4: 263805.142 ops/s
# Warmup Iteration   5: 264052.269 ops/s
# Warmup Iteration   6: 224566.855 ops/s
# Warmup Iteration   7: 265000.376 ops/s
# Warmup Iteration   8: 265013.151 ops/s
# Warmup Iteration   9: 264810.408 ops/s
# Warmup Iteration  10: 263953.814 ops/s
# Warmup Iteration  11: 264911.514 ops/s
# Warmup Iteration  12: 264135.341 ops/s
# Warmup Iteration  13: 264109.271 ops/s
# Warmup Iteration  14: 265230.013 ops/s
# Warmup Iteration  15: 263821.062 ops/s
# Warmup Iteration  16: 264667.439 ops/s
# Warmup Iteration  17: 264538.330 ops/s
# Warmup Iteration  18: 263591.824 ops/s
# Warmup Iteration  19: 264905.412 ops/s
# Warmup Iteration  20: 264999.937 ops/s
# Warmup Iteration  21: 264737.717 ops/s
# Warmup Iteration  22: 264712.716 ops/s
# Warmup Iteration  23: 264331.017 ops/s
# Warmup Iteration  24: 264216.344 ops/s
# Warmup Iteration  25: 265022.630 ops/s
# Warmup Iteration  26: 265032.260 ops/s
# Warmup Iteration  27: 264601.609 ops/s
# Warmup Iteration  28: 265197.678 ops/s
# Warmup Iteration  29: 264582.967 ops/s
# Warmup Iteration  30: 264374.731 ops/s
Iteration   1: 264946.701 ops/s
Iteration   2: 265532.143 ops/s
Iteration   3: 264475.975 ops/s
Iteration   4: 264898.208 ops/s
Iteration   5: 263417.276 ops/s
Iteration   6: 264491.704 ops/s
Iteration   7: 265070.767 ops/s
Iteration   8: 263113.274 ops/s
Iteration   9: 263882.019 ops/s
Iteration  10: 264325.464 ops/s
Iteration  11: 265040.892 ops/s
Iteration  12: 263993.288 ops/s
Iteration  13: 264500.761 ops/s
Iteration  14: 265925.626 ops/s
Iteration  15: 264093.913 ops/s
Iteration  16: 265263.408 ops/s
Iteration  17: 264797.276 ops/s
Iteration  18: 265153.425 ops/s
Iteration  19: 264228.979 ops/s
Iteration  20: 264548.292 ops/s
Iteration  21: 264961.634 ops/s
Iteration  22: 265542.955 ops/s
Iteration  23: 265184.874 ops/s
Iteration  24: 265566.627 ops/s
Iteration  25: 266084.332 ops/s
Iteration  26: 265160.954 ops/s
Iteration  27: 265284.816 ops/s
Iteration  28: 265114.382 ops/s
Iteration  29: 264812.124 ops/s
Iteration  30: 264077.557 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_selectKeysMultiValues":
  264782.988 ±(99.9%) 462.540 ops/s [Average]
  (min, avg, max) = (263113.274, 264782.988, 266084.332), stdev = 692.309
  CI (99.9%): [264320.448, 265245.529] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score     Error  Units
SynchronizedSortedBagMultimapTest._Benchmark.benchmark_selectKeysMultiValues  thrpt   30  264782.988 ± 462.540  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_selectKeysValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_selectKeysValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 114588.072 ops/s
# Warmup Iteration   2: 254614.675 ops/s
# Warmup Iteration   3: 305388.016 ops/s
# Warmup Iteration   4: 306906.597 ops/s
# Warmup Iteration   5: 307889.907 ops/s
# Warmup Iteration   6: 260560.224 ops/s
# Warmup Iteration   7: 307729.555 ops/s
# Warmup Iteration   8: 308345.219 ops/s
# Warmup Iteration   9: 308109.202 ops/s
# Warmup Iteration  10: 307313.115 ops/s
# Warmup Iteration  11: 307522.648 ops/s
# Warmup Iteration  12: 307671.396 ops/s
# Warmup Iteration  13: 307559.580 ops/s
# Warmup Iteration  14: 308025.703 ops/s
# Warmup Iteration  15: 307884.538 ops/s
# Warmup Iteration  16: 307555.073 ops/s
# Warmup Iteration  17: 307376.345 ops/s
# Warmup Iteration  18: 307676.778 ops/s
# Warmup Iteration  19: 307881.790 ops/s
# Warmup Iteration  20: 307716.557 ops/s
# Warmup Iteration  21: 307351.682 ops/s
# Warmup Iteration  22: 306824.444 ops/s
# Warmup Iteration  23: 307587.729 ops/s
# Warmup Iteration  24: 306940.239 ops/s
# Warmup Iteration  25: 308110.366 ops/s
# Warmup Iteration  26: 307753.362 ops/s
# Warmup Iteration  27: 307757.120 ops/s
# Warmup Iteration  28: 307585.822 ops/s
# Warmup Iteration  29: 307085.470 ops/s
# Warmup Iteration  30: 308157.001 ops/s
Iteration   1: 307491.481 ops/s
Iteration   2: 307845.920 ops/s
Iteration   3: 308076.995 ops/s
Iteration   4: 306604.345 ops/s
Iteration   5: 308152.017 ops/s
Iteration   6: 307719.716 ops/s
Iteration   7: 307344.738 ops/s
Iteration   8: 308087.217 ops/s
Iteration   9: 306878.735 ops/s
Iteration  10: 308340.249 ops/s
Iteration  11: 307376.036 ops/s
Iteration  12: 308475.464 ops/s
Iteration  13: 306562.162 ops/s
Iteration  14: 307767.613 ops/s
Iteration  15: 307497.559 ops/s
Iteration  16: 307169.439 ops/s
Iteration  17: 307739.693 ops/s
Iteration  18: 307571.838 ops/s
Iteration  19: 307724.241 ops/s
Iteration  20: 306025.186 ops/s
Iteration  21: 306910.156 ops/s
Iteration  22: 307767.907 ops/s
Iteration  23: 307961.306 ops/s
Iteration  24: 307535.900 ops/s
Iteration  25: 305727.831 ops/s
Iteration  26: 308295.971 ops/s
Iteration  27: 306621.783 ops/s
Iteration  28: 308229.131 ops/s
Iteration  29: 307347.165 ops/s
Iteration  30: 307972.040 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_selectKeysValues":
  307493.994 ±(99.9%) 455.177 ops/s [Average]
  (min, avg, max) = (305727.831, 307493.994, 308475.464), stdev = 681.287
  CI (99.9%): [307038.818, 307949.171] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score     Error  Units
SynchronizedSortedBagMultimapTest._Benchmark.benchmark_selectKeysValues  thrpt   30  307493.994 ± 455.177  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_serialization$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_serialization

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9233.291 ops/s
# Warmup Iteration   2: 14186.358 ops/s
# Warmup Iteration   3: 19501.264 ops/s
# Warmup Iteration   4: 20598.156 ops/s
# Warmup Iteration   5: 20628.453 ops/s
# Warmup Iteration   6: 20786.791 ops/s
# Warmup Iteration   7: 20705.630 ops/s
# Warmup Iteration   8: 20723.632 ops/s
# Warmup Iteration   9: 20743.243 ops/s
# Warmup Iteration  10: 20438.281 ops/s
# Warmup Iteration  11: 17613.566 ops/s
# Warmup Iteration  12: 20562.517 ops/s
# Warmup Iteration  13: 20737.428 ops/s
# Warmup Iteration  14: 20707.783 ops/s
# Warmup Iteration  15: 20678.016 ops/s
# Warmup Iteration  16: 20472.378 ops/s
# Warmup Iteration  17: 20705.199 ops/s
# Warmup Iteration  18: 20704.926 ops/s
# Warmup Iteration  19: 20701.612 ops/s
# Warmup Iteration  20: 20622.063 ops/s
# Warmup Iteration  21: 20656.483 ops/s
# Warmup Iteration  22: 20729.402 ops/s
# Warmup Iteration  23: 20725.632 ops/s
# Warmup Iteration  24: 20778.500 ops/s
# Warmup Iteration  25: 20719.145 ops/s
# Warmup Iteration  26: 20786.094 ops/s
# Warmup Iteration  27: 20705.885 ops/s
# Warmup Iteration  28: 20591.793 ops/s
# Warmup Iteration  29: 20617.742 ops/s
# Warmup Iteration  30: 20730.257 ops/s
Iteration   1: 20809.975 ops/s
Iteration   2: 20734.546 ops/s
Iteration   3: 20666.298 ops/s
Iteration   4: 20745.963 ops/s
Iteration   5: 20751.451 ops/s
Iteration   6: 20761.583 ops/s
Iteration   7: 20708.153 ops/s
Iteration   8: 20806.230 ops/s
Iteration   9: 20831.312 ops/s
Iteration  10: 20641.727 ops/s
Iteration  11: 20796.565 ops/s
Iteration  12: 20781.603 ops/s
Iteration  13: 20749.588 ops/s
Iteration  14: 20770.289 ops/s
Iteration  15: 20363.357 ops/s
Iteration  16: 20814.584 ops/s
Iteration  17: 20780.565 ops/s
Iteration  18: 20808.422 ops/s
Iteration  19: 20885.963 ops/s
Iteration  20: 20847.348 ops/s
Iteration  21: 20767.783 ops/s
Iteration  22: 20859.342 ops/s
Iteration  23: 20848.537 ops/s
Iteration  24: 20770.389 ops/s
Iteration  25: 20820.324 ops/s
Iteration  26: 20836.705 ops/s
Iteration  27: 20811.355 ops/s
Iteration  28: 20781.799 ops/s
Iteration  29: 20817.370 ops/s
Iteration  30: 20811.020 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_serialization":
  20772.672 ±(99.9%) 62.806 ops/s [Average]
  (min, avg, max) = (20363.357, 20772.672, 20885.963), stdev = 94.005
  CI (99.9%): [20709.865, 20835.478] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt      Score    Error  Units
SynchronizedSortedBagMultimapTest._Benchmark.benchmark_serialization  thrpt   30  20772.672 ± 62.806  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_sizeDistinct$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_sizeDistinct

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2055086.388 ops/s
# Warmup Iteration   2: 4887950.169 ops/s
# Warmup Iteration   3: 6222490.183 ops/s
# Warmup Iteration   4: 6784362.723 ops/s
# Warmup Iteration   5: 6982319.839 ops/s
# Warmup Iteration   6: 7037941.779 ops/s
# Warmup Iteration   7: 7062763.426 ops/s
# Warmup Iteration   8: 7037143.981 ops/s
# Warmup Iteration   9: 7002421.307 ops/s
# Warmup Iteration  10: 7058379.148 ops/s
# Warmup Iteration  11: 7059607.434 ops/s
# Warmup Iteration  12: 7024280.762 ops/s
# Warmup Iteration  13: 7053134.145 ops/s
# Warmup Iteration  14: 7057807.291 ops/s
# Warmup Iteration  15: 7042626.078 ops/s
# Warmup Iteration  16: 7044684.437 ops/s
# Warmup Iteration  17: 7058588.204 ops/s
# Warmup Iteration  18: 7061439.295 ops/s
# Warmup Iteration  19: 7072917.725 ops/s
# Warmup Iteration  20: 7048402.759 ops/s
# Warmup Iteration  21: 7063627.794 ops/s
# Warmup Iteration  22: 6987380.373 ops/s
# Warmup Iteration  23: 7043416.774 ops/s
# Warmup Iteration  24: 7029200.286 ops/s
# Warmup Iteration  25: 7037338.081 ops/s
# Warmup Iteration  26: 7032127.582 ops/s
# Warmup Iteration  27: 7032042.323 ops/s
# Warmup Iteration  28: 7074751.352 ops/s
# Warmup Iteration  29: 7058172.501 ops/s
# Warmup Iteration  30: 7070799.673 ops/s
Iteration   1: 7035305.531 ops/s
Iteration   2: 7080852.684 ops/s
Iteration   3: 7083847.377 ops/s
Iteration   4: 7064405.138 ops/s
Iteration   5: 7080268.503 ops/s
Iteration   6: 7086827.276 ops/s
Iteration   7: 7067482.580 ops/s
Iteration   8: 7034136.853 ops/s
Iteration   9: 7080269.978 ops/s
Iteration  10: 7051730.657 ops/s
Iteration  11: 7080293.502 ops/s
Iteration  12: 7095512.431 ops/s
Iteration  13: 7063281.229 ops/s
Iteration  14: 7089339.039 ops/s
Iteration  15: 7042494.928 ops/s
Iteration  16: 7097545.489 ops/s
Iteration  17: 7065583.486 ops/s
Iteration  18: 7062020.604 ops/s
Iteration  19: 7055405.997 ops/s
Iteration  20: 7081861.756 ops/s
Iteration  21: 7112584.794 ops/s
Iteration  22: 7058055.131 ops/s
Iteration  23: 7077474.432 ops/s
Iteration  24: 7092145.538 ops/s
Iteration  25: 7081477.509 ops/s
Iteration  26: 7041162.837 ops/s
Iteration  27: 7060111.971 ops/s
Iteration  28: 7099059.955 ops/s
Iteration  29: 7108607.968 ops/s
Iteration  30: 7066078.937 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_sizeDistinct":
  7073174.137 ±(99.9%) 13817.967 ops/s [Average]
  (min, avg, max) = (7034136.853, 7073174.137, 7112584.794), stdev = 20682.085
  CI (99.9%): [7059356.169, 7086992.104] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
SynchronizedSortedBagMultimapTest._Benchmark.benchmark_sizeDistinct  thrpt   30  7073174.137 ± 13817.967  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_testEquals$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_testEquals

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 232465.890 ops/s
# Warmup Iteration   2: 466912.895 ops/s
# Warmup Iteration   3: 520766.330 ops/s
# Warmup Iteration   4: 521630.618 ops/s
# Warmup Iteration   5: 454618.151 ops/s
# Warmup Iteration   6: 523152.016 ops/s
# Warmup Iteration   7: 523763.667 ops/s
# Warmup Iteration   8: 525167.208 ops/s
# Warmup Iteration   9: 516975.645 ops/s
# Warmup Iteration  10: 520451.884 ops/s
# Warmup Iteration  11: 523037.324 ops/s
# Warmup Iteration  12: 523994.936 ops/s
# Warmup Iteration  13: 524882.511 ops/s
# Warmup Iteration  14: 524812.904 ops/s
# Warmup Iteration  15: 527077.915 ops/s
# Warmup Iteration  16: 523455.598 ops/s
# Warmup Iteration  17: 523402.891 ops/s
# Warmup Iteration  18: 523115.464 ops/s
# Warmup Iteration  19: 522268.364 ops/s
# Warmup Iteration  20: 523810.195 ops/s
# Warmup Iteration  21: 523384.332 ops/s
# Warmup Iteration  22: 523266.978 ops/s
# Warmup Iteration  23: 524011.653 ops/s
# Warmup Iteration  24: 523563.311 ops/s
# Warmup Iteration  25: 523850.504 ops/s
# Warmup Iteration  26: 525622.411 ops/s
# Warmup Iteration  27: 522815.047 ops/s
# Warmup Iteration  28: 523904.871 ops/s
# Warmup Iteration  29: 523131.013 ops/s
# Warmup Iteration  30: 524597.715 ops/s
Iteration   1: 524106.897 ops/s
Iteration   2: 524192.812 ops/s
Iteration   3: 524449.109 ops/s
Iteration   4: 520073.483 ops/s
Iteration   5: 525221.030 ops/s
Iteration   6: 522977.619 ops/s
Iteration   7: 522882.181 ops/s
Iteration   8: 525398.025 ops/s
Iteration   9: 525851.088 ops/s
Iteration  10: 524394.055 ops/s
Iteration  11: 525268.448 ops/s
Iteration  12: 523460.316 ops/s
Iteration  13: 524636.760 ops/s
Iteration  14: 524622.063 ops/s
Iteration  15: 523868.883 ops/s
Iteration  16: 522924.266 ops/s
Iteration  17: 520148.527 ops/s
Iteration  18: 522864.988 ops/s
Iteration  19: 522805.446 ops/s
Iteration  20: 523071.728 ops/s
Iteration  21: 521127.185 ops/s
Iteration  22: 521957.464 ops/s
Iteration  23: 523641.843 ops/s
Iteration  24: 515714.539 ops/s
Iteration  25: 523107.199 ops/s
Iteration  26: 521578.575 ops/s
Iteration  27: 523758.235 ops/s
Iteration  28: 521448.673 ops/s
Iteration  29: 521785.956 ops/s
Iteration  30: 523384.449 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_testEquals":
  523024.061 ±(99.9%) 1350.007 ops/s [Average]
  (min, avg, max) = (515714.539, 523024.061, 525851.088), stdev = 2020.627
  CI (99.9%): [521674.054, 524374.068] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
SynchronizedSortedBagMultimapTest._Benchmark.benchmark_testEquals  thrpt   30  523024.061 ± 1350.007  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_testHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_testHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 113788.103 ops/s
# Warmup Iteration   2: 203025.806 ops/s
# Warmup Iteration   3: 246765.986 ops/s
# Warmup Iteration   4: 248071.827 ops/s
# Warmup Iteration   5: 248316.822 ops/s
# Warmup Iteration   6: 210124.301 ops/s
# Warmup Iteration   7: 248669.591 ops/s
# Warmup Iteration   8: 248048.262 ops/s
# Warmup Iteration   9: 248460.557 ops/s
# Warmup Iteration  10: 248890.702 ops/s
# Warmup Iteration  11: 248676.524 ops/s
# Warmup Iteration  12: 248714.309 ops/s
# Warmup Iteration  13: 249007.695 ops/s
# Warmup Iteration  14: 248430.710 ops/s
# Warmup Iteration  15: 248976.485 ops/s
# Warmup Iteration  16: 248252.319 ops/s
# Warmup Iteration  17: 247917.958 ops/s
# Warmup Iteration  18: 248736.584 ops/s
# Warmup Iteration  19: 248179.610 ops/s
# Warmup Iteration  20: 248422.851 ops/s
# Warmup Iteration  21: 248628.698 ops/s
# Warmup Iteration  22: 248913.439 ops/s
# Warmup Iteration  23: 248079.944 ops/s
# Warmup Iteration  24: 247583.308 ops/s
# Warmup Iteration  25: 248521.940 ops/s
# Warmup Iteration  26: 248712.599 ops/s
# Warmup Iteration  27: 248363.273 ops/s
# Warmup Iteration  28: 248266.980 ops/s
# Warmup Iteration  29: 248436.113 ops/s
# Warmup Iteration  30: 248933.831 ops/s
Iteration   1: 247940.629 ops/s
Iteration   2: 249216.616 ops/s
Iteration   3: 248684.220 ops/s
Iteration   4: 249280.467 ops/s
Iteration   5: 249056.374 ops/s
Iteration   6: 248363.155 ops/s
Iteration   7: 249490.939 ops/s
Iteration   8: 248658.327 ops/s
Iteration   9: 249349.703 ops/s
Iteration  10: 248949.558 ops/s
Iteration  11: 248587.480 ops/s
Iteration  12: 249227.198 ops/s
Iteration  13: 248814.867 ops/s
Iteration  14: 249336.534 ops/s
Iteration  15: 248090.570 ops/s
Iteration  16: 247818.898 ops/s
Iteration  17: 248218.159 ops/s
Iteration  18: 248296.956 ops/s
Iteration  19: 248525.902 ops/s
Iteration  20: 247958.817 ops/s
Iteration  21: 244320.209 ops/s
Iteration  22: 249028.737 ops/s
Iteration  23: 246488.055 ops/s
Iteration  24: 248476.695 ops/s
Iteration  25: 248175.003 ops/s
Iteration  26: 248997.999 ops/s
Iteration  27: 249348.874 ops/s
Iteration  28: 247687.961 ops/s
Iteration  29: 248441.732 ops/s
Iteration  30: 247594.823 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_testHashCode":
  248414.182 ±(99.9%) 682.294 ops/s [Average]
  (min, avg, max) = (244320.209, 248414.182, 249490.939), stdev = 1021.226
  CI (99.9%): [247731.888, 249096.476] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score     Error  Units
SynchronizedSortedBagMultimapTest._Benchmark.benchmark_testHashCode  thrpt   30  248414.182 ± 682.294  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_testNewMultimap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_testNewMultimap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 797723.871 ops/s
# Warmup Iteration   2: 1650938.321 ops/s
# Warmup Iteration   3: 2728817.845 ops/s
# Warmup Iteration   4: 2288360.811 ops/s
# Warmup Iteration   5: 2744727.048 ops/s
# Warmup Iteration   6: 2748400.748 ops/s
# Warmup Iteration   7: 2750043.367 ops/s
# Warmup Iteration   8: 2740299.466 ops/s
# Warmup Iteration   9: 2739744.844 ops/s
# Warmup Iteration  10: 2746069.637 ops/s
# Warmup Iteration  11: 2745334.935 ops/s
# Warmup Iteration  12: 2744695.299 ops/s
# Warmup Iteration  13: 2742637.138 ops/s
# Warmup Iteration  14: 2750518.893 ops/s
# Warmup Iteration  15: 2743934.581 ops/s
# Warmup Iteration  16: 2737821.347 ops/s
# Warmup Iteration  17: 2732672.904 ops/s
# Warmup Iteration  18: 2728441.133 ops/s
# Warmup Iteration  19: 2727688.877 ops/s
# Warmup Iteration  20: 2721701.810 ops/s
# Warmup Iteration  21: 2725095.455 ops/s
# Warmup Iteration  22: 2730279.957 ops/s
# Warmup Iteration  23: 2728614.676 ops/s
# Warmup Iteration  24: 2730813.716 ops/s
# Warmup Iteration  25: 2733275.674 ops/s
# Warmup Iteration  26: 2729149.297 ops/s
# Warmup Iteration  27: 2723655.118 ops/s
# Warmup Iteration  28: 2731436.917 ops/s
# Warmup Iteration  29: 2732974.409 ops/s
# Warmup Iteration  30: 2727039.363 ops/s
Iteration   1: 2721493.605 ops/s
Iteration   2: 2724650.659 ops/s
Iteration   3: 2727265.139 ops/s
Iteration   4: 2725541.663 ops/s
Iteration   5: 2737805.465 ops/s
Iteration   6: 2726656.116 ops/s
Iteration   7: 2726617.783 ops/s
Iteration   8: 2734647.291 ops/s
Iteration   9: 2726774.028 ops/s
Iteration  10: 2729481.374 ops/s
Iteration  11: 2733014.877 ops/s
Iteration  12: 2732922.498 ops/s
Iteration  13: 2727380.202 ops/s
Iteration  14: 2726973.769 ops/s
Iteration  15: 2723629.926 ops/s
Iteration  16: 2727670.646 ops/s
Iteration  17: 2723848.562 ops/s
Iteration  18: 2718580.728 ops/s
Iteration  19: 2713659.720 ops/s
Iteration  20: 2730053.738 ops/s
Iteration  21: 2728701.251 ops/s
Iteration  22: 2732499.862 ops/s
Iteration  23: 2735391.229 ops/s
Iteration  24: 2733956.505 ops/s
Iteration  25: 2734659.612 ops/s
Iteration  26: 2731580.462 ops/s
Iteration  27: 2726736.677 ops/s
Iteration  28: 2739174.050 ops/s
Iteration  29: 2731731.084 ops/s
Iteration  30: 2725880.451 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_testNewMultimap":
  2728632.633 ±(99.9%) 3710.796 ops/s [Average]
  (min, avg, max) = (2713659.720, 2728632.633, 2739174.050), stdev = 5554.145
  CI (99.9%): [2724921.837, 2732343.428] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
SynchronizedSortedBagMultimapTest._Benchmark.benchmark_testNewMultimap  thrpt   30  2728632.633 ± 3710.796  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_testNewMultimapWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_testNewMultimapWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 286138.180 ops/s
# Warmup Iteration   2: 606825.880 ops/s
# Warmup Iteration   3: 659246.063 ops/s
# Warmup Iteration   4: 660545.552 ops/s
# Warmup Iteration   5: 566429.144 ops/s
# Warmup Iteration   6: 662255.701 ops/s
# Warmup Iteration   7: 659038.319 ops/s
# Warmup Iteration   8: 659605.135 ops/s
# Warmup Iteration   9: 661367.798 ops/s
# Warmup Iteration  10: 658474.101 ops/s
# Warmup Iteration  11: 661521.786 ops/s
# Warmup Iteration  12: 661166.884 ops/s
# Warmup Iteration  13: 661139.987 ops/s
# Warmup Iteration  14: 662884.016 ops/s
# Warmup Iteration  15: 661930.886 ops/s
# Warmup Iteration  16: 663651.149 ops/s
# Warmup Iteration  17: 661349.890 ops/s
# Warmup Iteration  18: 662025.208 ops/s
# Warmup Iteration  19: 660544.142 ops/s
# Warmup Iteration  20: 661512.699 ops/s
# Warmup Iteration  21: 661814.315 ops/s
# Warmup Iteration  22: 661867.145 ops/s
# Warmup Iteration  23: 662117.590 ops/s
# Warmup Iteration  24: 665412.568 ops/s
# Warmup Iteration  25: 664162.004 ops/s
# Warmup Iteration  26: 662720.755 ops/s
# Warmup Iteration  27: 661957.491 ops/s
# Warmup Iteration  28: 660188.514 ops/s
# Warmup Iteration  29: 660240.259 ops/s
# Warmup Iteration  30: 661857.681 ops/s
Iteration   1: 661104.193 ops/s
Iteration   2: 660015.133 ops/s
Iteration   3: 663895.237 ops/s
Iteration   4: 662003.101 ops/s
Iteration   5: 661606.802 ops/s
Iteration   6: 662182.580 ops/s
Iteration   7: 662450.579 ops/s
Iteration   8: 659213.859 ops/s
Iteration   9: 661655.111 ops/s
Iteration  10: 666771.628 ops/s
Iteration  11: 660405.194 ops/s
Iteration  12: 664352.413 ops/s
Iteration  13: 657555.158 ops/s
Iteration  14: 655725.538 ops/s
Iteration  15: 658938.136 ops/s
Iteration  16: 663160.321 ops/s
Iteration  17: 659831.447 ops/s
Iteration  18: 665695.906 ops/s
Iteration  19: 658567.045 ops/s
Iteration  20: 661433.460 ops/s
Iteration  21: 664355.814 ops/s
Iteration  22: 663733.249 ops/s
Iteration  23: 660702.699 ops/s
Iteration  24: 659050.619 ops/s
Iteration  25: 661570.980 ops/s
Iteration  26: 660911.166 ops/s
Iteration  27: 662284.888 ops/s
Iteration  28: 661843.221 ops/s
Iteration  29: 665450.419 ops/s
Iteration  30: 653080.984 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_testNewMultimapWith":
  661318.229 ±(99.9%) 1944.659 ops/s [Average]
  (min, avg, max) = (653080.984, 661318.229, 666771.628), stdev = 2910.674
  CI (99.9%): [659373.570, 663262.888] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
SynchronizedSortedBagMultimapTest._Benchmark.benchmark_testNewMultimapWith  thrpt   30  661318.229 ± 1944.659  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_testNewMultimapWithKeyValue$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_testNewMultimapWithKeyValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 242099.007 ops/s
# Warmup Iteration   2: 505499.107 ops/s
# Warmup Iteration   3: 653172.636 ops/s
# Warmup Iteration   4: 657634.609 ops/s
# Warmup Iteration   5: 656219.523 ops/s
# Warmup Iteration   6: 548249.362 ops/s
# Warmup Iteration   7: 657810.769 ops/s
# Warmup Iteration   8: 657589.402 ops/s
# Warmup Iteration   9: 657696.289 ops/s
# Warmup Iteration  10: 658928.693 ops/s
# Warmup Iteration  11: 658530.179 ops/s
# Warmup Iteration  12: 657594.585 ops/s
# Warmup Iteration  13: 658595.436 ops/s
# Warmup Iteration  14: 658110.656 ops/s
# Warmup Iteration  15: 653688.057 ops/s
# Warmup Iteration  16: 658226.880 ops/s
# Warmup Iteration  17: 659486.045 ops/s
# Warmup Iteration  18: 659808.872 ops/s
# Warmup Iteration  19: 658485.618 ops/s
# Warmup Iteration  20: 660497.980 ops/s
# Warmup Iteration  21: 660861.271 ops/s
# Warmup Iteration  22: 659566.079 ops/s
# Warmup Iteration  23: 660032.882 ops/s
# Warmup Iteration  24: 662161.847 ops/s
# Warmup Iteration  25: 658305.273 ops/s
# Warmup Iteration  26: 658261.885 ops/s
# Warmup Iteration  27: 658992.218 ops/s
# Warmup Iteration  28: 660673.972 ops/s
# Warmup Iteration  29: 659679.136 ops/s
# Warmup Iteration  30: 660364.954 ops/s
Iteration   1: 659347.754 ops/s
Iteration   2: 660660.804 ops/s
Iteration   3: 660095.513 ops/s
Iteration   4: 658771.049 ops/s
Iteration   5: 657913.422 ops/s
Iteration   6: 658956.784 ops/s
Iteration   7: 660688.534 ops/s
Iteration   8: 658008.128 ops/s
Iteration   9: 659540.589 ops/s
Iteration  10: 659853.916 ops/s
Iteration  11: 660687.402 ops/s
Iteration  12: 658474.901 ops/s
Iteration  13: 660723.434 ops/s
Iteration  14: 659593.995 ops/s
Iteration  15: 657375.551 ops/s
Iteration  16: 660009.345 ops/s
Iteration  17: 657804.861 ops/s
Iteration  18: 660070.661 ops/s
Iteration  19: 649085.922 ops/s
Iteration  20: 659729.675 ops/s
Iteration  21: 659458.997 ops/s
Iteration  22: 658224.092 ops/s
Iteration  23: 660066.341 ops/s
Iteration  24: 658297.424 ops/s
Iteration  25: 661045.758 ops/s
Iteration  26: 657648.872 ops/s
Iteration  27: 660115.547 ops/s
Iteration  28: 659041.608 ops/s
Iteration  29: 657960.959 ops/s
Iteration  30: 661162.326 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_testNewMultimapWithKeyValue":
  659013.805 ±(99.9%) 1452.786 ops/s [Average]
  (min, avg, max) = (649085.922, 659013.805, 661162.326), stdev = 2174.462
  CI (99.9%): [657561.020, 660466.591] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt       Score      Error  Units
SynchronizedSortedBagMultimapTest._Benchmark.benchmark_testNewMultimapWithKeyValue  thrpt   30  659013.805 ± 1452.786  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_testNewMultimapWithWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_testNewMultimapWithWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 207745.310 ops/s
# Warmup Iteration   2: 402952.944 ops/s
# Warmup Iteration   3: 510486.322 ops/s
# Warmup Iteration   4: 513813.479 ops/s
# Warmup Iteration   5: 514343.533 ops/s
# Warmup Iteration   6: 428619.058 ops/s
# Warmup Iteration   7: 510029.373 ops/s
# Warmup Iteration   8: 513850.761 ops/s
# Warmup Iteration   9: 514496.836 ops/s
# Warmup Iteration  10: 514402.971 ops/s
# Warmup Iteration  11: 514425.458 ops/s
# Warmup Iteration  12: 513693.741 ops/s
# Warmup Iteration  13: 507758.015 ops/s
# Warmup Iteration  14: 513794.643 ops/s
# Warmup Iteration  15: 514559.781 ops/s
# Warmup Iteration  16: 513124.822 ops/s
# Warmup Iteration  17: 515877.466 ops/s
# Warmup Iteration  18: 514293.717 ops/s
# Warmup Iteration  19: 515549.764 ops/s
# Warmup Iteration  20: 516266.558 ops/s
# Warmup Iteration  21: 511226.354 ops/s
# Warmup Iteration  22: 511532.563 ops/s
# Warmup Iteration  23: 515031.232 ops/s
# Warmup Iteration  24: 515589.190 ops/s
# Warmup Iteration  25: 515893.434 ops/s
# Warmup Iteration  26: 514964.486 ops/s
# Warmup Iteration  27: 516251.293 ops/s
# Warmup Iteration  28: 516146.014 ops/s
# Warmup Iteration  29: 513004.093 ops/s
# Warmup Iteration  30: 515187.976 ops/s
Iteration   1: 516809.597 ops/s
Iteration   2: 516246.766 ops/s
Iteration   3: 514070.756 ops/s
Iteration   4: 505239.266 ops/s
Iteration   5: 516438.562 ops/s
Iteration   6: 517004.928 ops/s
Iteration   7: 515582.516 ops/s
Iteration   8: 515740.154 ops/s
Iteration   9: 515756.131 ops/s
Iteration  10: 515582.078 ops/s
Iteration  11: 516196.893 ops/s
Iteration  12: 513571.480 ops/s
Iteration  13: 514916.195 ops/s
Iteration  14: 515333.297 ops/s
Iteration  15: 515367.691 ops/s
Iteration  16: 516915.039 ops/s
Iteration  17: 513662.379 ops/s
Iteration  18: 515867.779 ops/s
Iteration  19: 515112.913 ops/s
Iteration  20: 515040.203 ops/s
Iteration  21: 516397.703 ops/s
Iteration  22: 514842.555 ops/s
Iteration  23: 516558.653 ops/s
Iteration  24: 515171.816 ops/s
Iteration  25: 517054.866 ops/s
Iteration  26: 514154.963 ops/s
Iteration  27: 517091.234 ops/s
Iteration  28: 514587.950 ops/s
Iteration  29: 516193.131 ops/s
Iteration  30: 514100.591 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_testNewMultimapWithWith":
  515220.270 ±(99.9%) 1433.457 ops/s [Average]
  (min, avg, max) = (505239.266, 515220.270, 517091.234), stdev = 2145.531
  CI (99.9%): [513786.813, 516653.726] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score      Error  Units
SynchronizedSortedBagMultimapTest._Benchmark.benchmark_testNewMultimapWithWith  thrpt   30  515220.270 ± 1433.457  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_testNewMultimapWithWithWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_testNewMultimapWithWithWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 153735.900 ops/s
# Warmup Iteration   2: 309074.003 ops/s
# Warmup Iteration   3: 391376.945 ops/s
# Warmup Iteration   4: 394962.183 ops/s
# Warmup Iteration   5: 393221.579 ops/s
# Warmup Iteration   6: 372988.543 ops/s
# Warmup Iteration   7: 352159.648 ops/s
# Warmup Iteration   8: 394178.475 ops/s
# Warmup Iteration   9: 395050.891 ops/s
# Warmup Iteration  10: 394489.400 ops/s
# Warmup Iteration  11: 394465.931 ops/s
# Warmup Iteration  12: 393993.029 ops/s
# Warmup Iteration  13: 393861.047 ops/s
# Warmup Iteration  14: 394581.925 ops/s
# Warmup Iteration  15: 393565.912 ops/s
# Warmup Iteration  16: 393926.270 ops/s
# Warmup Iteration  17: 392982.079 ops/s
# Warmup Iteration  18: 394082.543 ops/s
# Warmup Iteration  19: 393877.252 ops/s
# Warmup Iteration  20: 393925.063 ops/s
# Warmup Iteration  21: 392654.399 ops/s
# Warmup Iteration  22: 394093.613 ops/s
# Warmup Iteration  23: 393883.432 ops/s
# Warmup Iteration  24: 393778.320 ops/s
# Warmup Iteration  25: 393851.667 ops/s
# Warmup Iteration  26: 393099.548 ops/s
# Warmup Iteration  27: 394203.383 ops/s
# Warmup Iteration  28: 394512.619 ops/s
# Warmup Iteration  29: 394384.217 ops/s
# Warmup Iteration  30: 393410.778 ops/s
Iteration   1: 395209.905 ops/s
Iteration   2: 393593.739 ops/s
Iteration   3: 394720.180 ops/s
Iteration   4: 394371.553 ops/s
Iteration   5: 394767.747 ops/s
Iteration   6: 394493.501 ops/s
Iteration   7: 394279.265 ops/s
Iteration   8: 394121.508 ops/s
Iteration   9: 394066.522 ops/s
Iteration  10: 394354.032 ops/s
Iteration  11: 394431.074 ops/s
Iteration  12: 392779.228 ops/s
Iteration  13: 394908.439 ops/s
Iteration  14: 392573.924 ops/s
Iteration  15: 394578.744 ops/s
Iteration  16: 395008.285 ops/s
Iteration  17: 395428.709 ops/s
Iteration  18: 395193.200 ops/s
Iteration  19: 394817.266 ops/s
Iteration  20: 393867.253 ops/s
Iteration  21: 394077.142 ops/s
Iteration  22: 392765.444 ops/s
Iteration  23: 394228.687 ops/s
Iteration  24: 394262.507 ops/s
Iteration  25: 395191.904 ops/s
Iteration  26: 393488.411 ops/s
Iteration  27: 393989.121 ops/s
Iteration  28: 394171.963 ops/s
Iteration  29: 393437.300 ops/s
Iteration  30: 394228.224 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_testNewMultimapWithWithWith":
  394246.826 ±(99.9%) 485.009 ops/s [Average]
  (min, avg, max) = (392573.924, 394246.826, 395428.709), stdev = 725.938
  CI (99.9%): [393761.817, 394731.835] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt       Score     Error  Units
SynchronizedSortedBagMultimapTest._Benchmark.benchmark_testNewMultimapWithWithWith  thrpt   30  394246.826 ± 485.009  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_testNewMultimapWithWithWithWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_testNewMultimapWithWithWithWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 114653.510 ops/s
# Warmup Iteration   2: 256767.285 ops/s
# Warmup Iteration   3: 341146.010 ops/s
# Warmup Iteration   4: 339972.821 ops/s
# Warmup Iteration   5: 342077.379 ops/s
# Warmup Iteration   6: 341852.707 ops/s
# Warmup Iteration   7: 286632.114 ops/s
# Warmup Iteration   8: 342024.078 ops/s
# Warmup Iteration   9: 341590.412 ops/s
# Warmup Iteration  10: 341715.827 ops/s
# Warmup Iteration  11: 342042.051 ops/s
# Warmup Iteration  12: 342097.124 ops/s
# Warmup Iteration  13: 341629.557 ops/s
# Warmup Iteration  14: 341791.578 ops/s
# Warmup Iteration  15: 342139.462 ops/s
# Warmup Iteration  16: 342224.425 ops/s
# Warmup Iteration  17: 341681.073 ops/s
# Warmup Iteration  18: 340779.122 ops/s
# Warmup Iteration  19: 341505.635 ops/s
# Warmup Iteration  20: 340822.297 ops/s
# Warmup Iteration  21: 341894.822 ops/s
# Warmup Iteration  22: 341170.322 ops/s
# Warmup Iteration  23: 339248.645 ops/s
# Warmup Iteration  24: 341467.378 ops/s
# Warmup Iteration  25: 341119.213 ops/s
# Warmup Iteration  26: 341157.344 ops/s
# Warmup Iteration  27: 341425.045 ops/s
# Warmup Iteration  28: 341395.162 ops/s
# Warmup Iteration  29: 342521.273 ops/s
# Warmup Iteration  30: 341110.752 ops/s
Iteration   1: 342178.531 ops/s
Iteration   2: 341035.184 ops/s
Iteration   3: 341938.232 ops/s
Iteration   4: 341143.274 ops/s
Iteration   5: 341781.091 ops/s
Iteration   6: 342079.533 ops/s
Iteration   7: 341285.260 ops/s
Iteration   8: 342013.353 ops/s
Iteration   9: 342081.446 ops/s
Iteration  10: 340980.912 ops/s
Iteration  11: 342228.570 ops/s
Iteration  12: 342381.391 ops/s
Iteration  13: 340994.724 ops/s
Iteration  14: 341425.541 ops/s
Iteration  15: 335984.501 ops/s
Iteration  16: 341617.580 ops/s
Iteration  17: 342007.284 ops/s
Iteration  18: 340947.158 ops/s
Iteration  19: 341947.794 ops/s
Iteration  20: 341819.426 ops/s
Iteration  21: 341690.523 ops/s
Iteration  22: 341521.529 ops/s
Iteration  23: 340985.192 ops/s
Iteration  24: 341583.811 ops/s
Iteration  25: 341074.791 ops/s
Iteration  26: 341909.265 ops/s
Iteration  27: 341291.187 ops/s
Iteration  28: 342001.426 ops/s
Iteration  29: 340170.402 ops/s
Iteration  30: 342632.966 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_testNewMultimapWithWithWithWith":
  341424.396 ±(99.9%) 775.072 ops/s [Average]
  (min, avg, max) = (335984.501, 341424.396, 342632.966), stdev = 1160.091
  CI (99.9%): [340649.324, 342199.468] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                Mode  Cnt       Score     Error  Units
SynchronizedSortedBagMultimapTest._Benchmark.benchmark_testNewMultimapWithWithWithWith  thrpt   30  341424.396 ± 775.072  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 933341.233 ops/s
# Warmup Iteration   2: 2216985.075 ops/s
# Warmup Iteration   3: 2339911.364 ops/s
# Warmup Iteration   4: 1965572.727 ops/s
# Warmup Iteration   5: 2347271.409 ops/s
# Warmup Iteration   6: 2329209.211 ops/s
# Warmup Iteration   7: 2348370.610 ops/s
# Warmup Iteration   8: 2341933.229 ops/s
# Warmup Iteration   9: 2334751.645 ops/s
# Warmup Iteration  10: 2336337.327 ops/s
# Warmup Iteration  11: 2355673.260 ops/s
# Warmup Iteration  12: 2343812.741 ops/s
# Warmup Iteration  13: 2346408.508 ops/s
# Warmup Iteration  14: 2345779.501 ops/s
# Warmup Iteration  15: 2342774.377 ops/s
# Warmup Iteration  16: 2350311.084 ops/s
# Warmup Iteration  17: 2348478.451 ops/s
# Warmup Iteration  18: 2342049.556 ops/s
# Warmup Iteration  19: 2346231.340 ops/s
# Warmup Iteration  20: 2345905.126 ops/s
# Warmup Iteration  21: 2341061.520 ops/s
# Warmup Iteration  22: 2342052.561 ops/s
# Warmup Iteration  23: 2344312.321 ops/s
# Warmup Iteration  24: 2336869.040 ops/s
# Warmup Iteration  25: 2340048.834 ops/s
# Warmup Iteration  26: 2348539.194 ops/s
# Warmup Iteration  27: 2347392.538 ops/s
# Warmup Iteration  28: 2354825.076 ops/s
# Warmup Iteration  29: 2326083.672 ops/s
# Warmup Iteration  30: 2325996.156 ops/s
Iteration   1: 2347744.214 ops/s
Iteration   2: 2341981.578 ops/s
Iteration   3: 2365926.423 ops/s
Iteration   4: 2326834.211 ops/s
Iteration   5: 2351740.983 ops/s
Iteration   6: 2353395.695 ops/s
Iteration   7: 2362289.647 ops/s
Iteration   8: 2336513.056 ops/s
Iteration   9: 2327532.810 ops/s
Iteration  10: 2356836.484 ops/s
Iteration  11: 2348593.157 ops/s
Iteration  12: 2342898.343 ops/s
Iteration  13: 2341304.624 ops/s
Iteration  14: 2349351.226 ops/s
Iteration  15: 2334981.039 ops/s
Iteration  16: 2348591.067 ops/s
Iteration  17: 2344556.988 ops/s
Iteration  18: 2332533.492 ops/s
Iteration  19: 2349267.688 ops/s
Iteration  20: 2341829.975 ops/s
Iteration  21: 2355086.049 ops/s
Iteration  22: 2347232.512 ops/s
Iteration  23: 2340785.753 ops/s
Iteration  24: 2341239.971 ops/s
Iteration  25: 2343729.842 ops/s
Iteration  26: 2344508.916 ops/s
Iteration  27: 2331104.238 ops/s
Iteration  28: 2337142.302 ops/s
Iteration  29: 2336153.699 ops/s
Iteration  30: 2354498.895 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_testToString":
  2344539.496 ±(99.9%) 6351.782 ops/s [Average]
  (min, avg, max) = (2326834.211, 2344539.496, 2365926.423), stdev = 9507.048
  CI (99.9%): [2338187.714, 2350891.278] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
SynchronizedSortedBagMultimapTest._Benchmark.benchmark_testToString  thrpt   30  2344539.496 ± 6351.782  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_toImmutable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_toImmutable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2231407.865 ops/s
# Warmup Iteration   2: 4622084.481 ops/s
# Warmup Iteration   3: 3906150.085 ops/s
# Warmup Iteration   4: 4656322.235 ops/s
# Warmup Iteration   5: 4656235.579 ops/s
# Warmup Iteration   6: 4652216.047 ops/s
# Warmup Iteration   7: 4649368.594 ops/s
# Warmup Iteration   8: 4631378.168 ops/s
# Warmup Iteration   9: 4642825.236 ops/s
# Warmup Iteration  10: 4649242.309 ops/s
# Warmup Iteration  11: 4638251.672 ops/s
# Warmup Iteration  12: 4653051.540 ops/s
# Warmup Iteration  13: 4638141.817 ops/s
# Warmup Iteration  14: 4648002.178 ops/s
# Warmup Iteration  15: 4630363.637 ops/s
# Warmup Iteration  16: 4628397.387 ops/s
# Warmup Iteration  17: 4612166.046 ops/s
# Warmup Iteration  18: 4619248.518 ops/s
# Warmup Iteration  19: 4620973.379 ops/s
# Warmup Iteration  20: 4627128.649 ops/s
# Warmup Iteration  21: 4646912.839 ops/s
# Warmup Iteration  22: 4651384.016 ops/s
# Warmup Iteration  23: 4668330.592 ops/s
# Warmup Iteration  24: 4637861.516 ops/s
# Warmup Iteration  25: 4642620.695 ops/s
# Warmup Iteration  26: 4636684.630 ops/s
# Warmup Iteration  27: 4652310.687 ops/s
# Warmup Iteration  28: 4625588.741 ops/s
# Warmup Iteration  29: 4652080.316 ops/s
# Warmup Iteration  30: 4652999.516 ops/s
Iteration   1: 4653436.731 ops/s
Iteration   2: 4659581.782 ops/s
Iteration   3: 4648271.853 ops/s
Iteration   4: 4602993.706 ops/s
Iteration   5: 4663786.323 ops/s
Iteration   6: 4629055.722 ops/s
Iteration   7: 4611502.638 ops/s
Iteration   8: 4650427.976 ops/s
Iteration   9: 4670099.977 ops/s
Iteration  10: 4655242.065 ops/s
Iteration  11: 4632026.678 ops/s
Iteration  12: 4666835.730 ops/s
Iteration  13: 4669095.927 ops/s
Iteration  14: 4667505.760 ops/s
Iteration  15: 4658300.386 ops/s
Iteration  16: 4624310.649 ops/s
Iteration  17: 4652160.842 ops/s
Iteration  18: 4648462.432 ops/s
Iteration  19: 4660032.516 ops/s
Iteration  20: 4645130.867 ops/s
Iteration  21: 4607305.348 ops/s
Iteration  22: 4641854.006 ops/s
Iteration  23: 4650898.966 ops/s
Iteration  24: 4646986.782 ops/s
Iteration  25: 4655902.509 ops/s
Iteration  26: 4639795.922 ops/s
Iteration  27: 4617844.686 ops/s
Iteration  28: 4651447.935 ops/s
Iteration  29: 4626186.255 ops/s
Iteration  30: 4617866.518 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_toImmutable":
  4644144.983 ±(99.9%) 12798.471 ops/s [Average]
  (min, avg, max) = (4602993.706, 4644144.983, 4670099.977), stdev = 19156.150
  CI (99.9%): [4631346.512, 4656943.454] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
SynchronizedSortedBagMultimapTest._Benchmark.benchmark_toImmutable  thrpt   30  4644144.983 ± 12798.471  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_toMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_toMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 289354.928 ops/s
# Warmup Iteration   2: 551223.259 ops/s
# Warmup Iteration   3: 664400.120 ops/s
# Warmup Iteration   4: 666977.905 ops/s
# Warmup Iteration   5: 581370.223 ops/s
# Warmup Iteration   6: 654364.602 ops/s
# Warmup Iteration   7: 668006.134 ops/s
# Warmup Iteration   8: 668664.805 ops/s
# Warmup Iteration   9: 665739.260 ops/s
# Warmup Iteration  10: 668273.524 ops/s
# Warmup Iteration  11: 669952.427 ops/s
# Warmup Iteration  12: 665987.756 ops/s
# Warmup Iteration  13: 670121.607 ops/s
# Warmup Iteration  14: 668785.864 ops/s
# Warmup Iteration  15: 667364.904 ops/s
# Warmup Iteration  16: 667684.925 ops/s
# Warmup Iteration  17: 669729.350 ops/s
# Warmup Iteration  18: 668279.372 ops/s
# Warmup Iteration  19: 670223.671 ops/s
# Warmup Iteration  20: 667675.510 ops/s
# Warmup Iteration  21: 666355.253 ops/s
# Warmup Iteration  22: 668372.443 ops/s
# Warmup Iteration  23: 669960.830 ops/s
# Warmup Iteration  24: 667214.752 ops/s
# Warmup Iteration  25: 667307.798 ops/s
# Warmup Iteration  26: 667640.640 ops/s
# Warmup Iteration  27: 668217.877 ops/s
# Warmup Iteration  28: 666724.147 ops/s
# Warmup Iteration  29: 668314.782 ops/s
# Warmup Iteration  30: 668822.555 ops/s
Iteration   1: 664467.051 ops/s
Iteration   2: 663688.091 ops/s
Iteration   3: 671415.544 ops/s
Iteration   4: 669757.609 ops/s
Iteration   5: 669455.639 ops/s
Iteration   6: 667285.013 ops/s
Iteration   7: 667273.936 ops/s
Iteration   8: 670216.236 ops/s
Iteration   9: 664749.010 ops/s
Iteration  10: 666840.633 ops/s
Iteration  11: 668680.486 ops/s
Iteration  12: 668250.041 ops/s
Iteration  13: 668292.709 ops/s
Iteration  14: 669455.425 ops/s
Iteration  15: 669210.275 ops/s
Iteration  16: 665585.573 ops/s
Iteration  17: 667966.951 ops/s
Iteration  18: 667756.162 ops/s
Iteration  19: 668794.047 ops/s
Iteration  20: 668288.737 ops/s
Iteration  21: 670038.989 ops/s
Iteration  22: 662977.449 ops/s
Iteration  23: 667254.550 ops/s
Iteration  24: 667462.343 ops/s
Iteration  25: 665923.887 ops/s
Iteration  26: 668497.480 ops/s
Iteration  27: 667309.611 ops/s
Iteration  28: 664455.527 ops/s
Iteration  29: 668452.340 ops/s
Iteration  30: 665089.483 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_toMap":
  667496.361 ±(99.9%) 1389.875 ops/s [Average]
  (min, avg, max) = (662977.449, 667496.361, 671415.544), stdev = 2080.299
  CI (99.9%): [666106.486, 668886.236] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
SynchronizedSortedBagMultimapTest._Benchmark.benchmark_toMap  thrpt   30  667496.361 ± 1389.875  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_toMapWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_toMapWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 617775.090 ops/s
# Warmup Iteration   2: 1257779.097 ops/s
# Warmup Iteration   3: 1453300.444 ops/s
# Warmup Iteration   4: 1459674.316 ops/s
# Warmup Iteration   5: 1225923.097 ops/s
# Warmup Iteration   6: 1457272.678 ops/s
# Warmup Iteration   7: 1464911.679 ops/s
# Warmup Iteration   8: 1463751.021 ops/s
# Warmup Iteration   9: 1470498.183 ops/s
# Warmup Iteration  10: 1465923.025 ops/s
# Warmup Iteration  11: 1469153.475 ops/s
# Warmup Iteration  12: 1465473.901 ops/s
# Warmup Iteration  13: 1461028.072 ops/s
# Warmup Iteration  14: 1465216.850 ops/s
# Warmup Iteration  15: 1466120.504 ops/s
# Warmup Iteration  16: 1468447.437 ops/s
# Warmup Iteration  17: 1466519.210 ops/s
# Warmup Iteration  18: 1462631.626 ops/s
# Warmup Iteration  19: 1468644.078 ops/s
# Warmup Iteration  20: 1468199.748 ops/s
# Warmup Iteration  21: 1467033.195 ops/s
# Warmup Iteration  22: 1466499.359 ops/s
# Warmup Iteration  23: 1465070.563 ops/s
# Warmup Iteration  24: 1465923.216 ops/s
# Warmup Iteration  25: 1462057.531 ops/s
# Warmup Iteration  26: 1467649.757 ops/s
# Warmup Iteration  27: 1461837.818 ops/s
# Warmup Iteration  28: 1466229.259 ops/s
# Warmup Iteration  29: 1466117.947 ops/s
# Warmup Iteration  30: 1463190.899 ops/s
Iteration   1: 1463764.636 ops/s
Iteration   2: 1460069.960 ops/s
Iteration   3: 1461840.004 ops/s
Iteration   4: 1467913.438 ops/s
Iteration   5: 1466348.475 ops/s
Iteration   6: 1461733.739 ops/s
Iteration   7: 1458750.125 ops/s
Iteration   8: 1470477.202 ops/s
Iteration   9: 1465428.305 ops/s
Iteration  10: 1463999.113 ops/s
Iteration  11: 1468028.658 ops/s
Iteration  12: 1470225.568 ops/s
Iteration  13: 1463808.741 ops/s
Iteration  14: 1467446.361 ops/s
Iteration  15: 1467242.302 ops/s
Iteration  16: 1462643.936 ops/s
Iteration  17: 1461677.762 ops/s
Iteration  18: 1465592.596 ops/s
Iteration  19: 1470137.069 ops/s
Iteration  20: 1445527.465 ops/s
Iteration  21: 1465108.822 ops/s
Iteration  22: 1466570.862 ops/s
Iteration  23: 1466197.883 ops/s
Iteration  24: 1466614.620 ops/s
Iteration  25: 1464719.601 ops/s
Iteration  26: 1462335.915 ops/s
Iteration  27: 1468384.107 ops/s
Iteration  28: 1469245.956 ops/s
Iteration  29: 1471594.214 ops/s
Iteration  30: 1470233.533 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_toMapWithTarget":
  1465122.032 ±(99.9%) 3310.623 ops/s [Average]
  (min, avg, max) = (1445527.465, 1465122.032, 1471594.214), stdev = 4955.185
  CI (99.9%): [1461811.409, 1468432.655] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
SynchronizedSortedBagMultimapTest._Benchmark.benchmark_toMapWithTarget  thrpt   30  1465122.032 ± 3310.623  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_toMutable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_toMutable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 409441.494 ops/s
# Warmup Iteration   2: 803240.005 ops/s
# Warmup Iteration   3: 873718.453 ops/s
# Warmup Iteration   4: 873969.801 ops/s
# Warmup Iteration   5: 759124.471 ops/s
# Warmup Iteration   6: 878774.861 ops/s
# Warmup Iteration   7: 874550.140 ops/s
# Warmup Iteration   8: 877853.827 ops/s
# Warmup Iteration   9: 877044.424 ops/s
# Warmup Iteration  10: 873205.648 ops/s
# Warmup Iteration  11: 879310.960 ops/s
# Warmup Iteration  12: 873429.377 ops/s
# Warmup Iteration  13: 879560.602 ops/s
# Warmup Iteration  14: 875304.572 ops/s
# Warmup Iteration  15: 880077.632 ops/s
# Warmup Iteration  16: 878726.015 ops/s
# Warmup Iteration  17: 871402.599 ops/s
# Warmup Iteration  18: 876540.571 ops/s
# Warmup Iteration  19: 874091.864 ops/s
# Warmup Iteration  20: 877941.195 ops/s
# Warmup Iteration  21: 876389.461 ops/s
# Warmup Iteration  22: 877900.299 ops/s
# Warmup Iteration  23: 877711.693 ops/s
# Warmup Iteration  24: 876691.350 ops/s
# Warmup Iteration  25: 877461.172 ops/s
# Warmup Iteration  26: 878793.894 ops/s
# Warmup Iteration  27: 874551.996 ops/s
# Warmup Iteration  28: 877181.987 ops/s
# Warmup Iteration  29: 877745.006 ops/s
# Warmup Iteration  30: 875695.218 ops/s
Iteration   1: 872655.039 ops/s
Iteration   2: 873188.641 ops/s
Iteration   3: 870416.478 ops/s
Iteration   4: 874258.023 ops/s
Iteration   5: 872804.789 ops/s
Iteration   6: 874265.730 ops/s
Iteration   7: 878525.813 ops/s
Iteration   8: 876944.462 ops/s
Iteration   9: 878755.762 ops/s
Iteration  10: 875177.233 ops/s
Iteration  11: 875029.968 ops/s
Iteration  12: 876040.522 ops/s
Iteration  13: 876557.942 ops/s
Iteration  14: 869036.324 ops/s
Iteration  15: 873476.578 ops/s
Iteration  16: 879234.003 ops/s
Iteration  17: 878558.378 ops/s
Iteration  18: 874462.383 ops/s
Iteration  19: 872515.217 ops/s
Iteration  20: 876185.462 ops/s
Iteration  21: 875875.011 ops/s
Iteration  22: 874609.126 ops/s
Iteration  23: 873315.682 ops/s
Iteration  24: 872131.871 ops/s
Iteration  25: 876488.284 ops/s
Iteration  26: 874158.510 ops/s
Iteration  27: 879049.957 ops/s
Iteration  28: 875169.804 ops/s
Iteration  29: 877849.820 ops/s
Iteration  30: 871522.260 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_toMutable":
  874941.969 ±(99.9%) 1742.895 ops/s [Average]
  (min, avg, max) = (869036.324, 874941.969, 879234.003), stdev = 2608.684
  CI (99.9%): [873199.074, 876684.864] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
SynchronizedSortedBagMultimapTest._Benchmark.benchmark_toMutable  thrpt   30  874941.969 ± 1742.895  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_valuesView$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_valuesView

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 550182.924 ops/s
# Warmup Iteration   2: 1097050.166 ops/s
# Warmup Iteration   3: 1283597.489 ops/s
# Warmup Iteration   4: 1290096.764 ops/s
# Warmup Iteration   5: 1080404.377 ops/s
# Warmup Iteration   6: 1295098.315 ops/s
# Warmup Iteration   7: 1292152.537 ops/s
# Warmup Iteration   8: 1293049.267 ops/s
# Warmup Iteration   9: 1295617.302 ops/s
# Warmup Iteration  10: 1293310.051 ops/s
# Warmup Iteration  11: 1293753.772 ops/s
# Warmup Iteration  12: 1294106.697 ops/s
# Warmup Iteration  13: 1291615.388 ops/s
# Warmup Iteration  14: 1288384.439 ops/s
# Warmup Iteration  15: 1290338.243 ops/s
# Warmup Iteration  16: 1291459.059 ops/s
# Warmup Iteration  17: 1288307.473 ops/s
# Warmup Iteration  18: 1292851.818 ops/s
# Warmup Iteration  19: 1284817.565 ops/s
# Warmup Iteration  20: 1292011.452 ops/s
# Warmup Iteration  21: 1288810.468 ops/s
# Warmup Iteration  22: 1286903.151 ops/s
# Warmup Iteration  23: 1289401.539 ops/s
# Warmup Iteration  24: 1288959.095 ops/s
# Warmup Iteration  25: 1290145.682 ops/s
# Warmup Iteration  26: 1289564.706 ops/s
# Warmup Iteration  27: 1289717.928 ops/s
# Warmup Iteration  28: 1292115.738 ops/s
# Warmup Iteration  29: 1291321.499 ops/s
# Warmup Iteration  30: 1290908.611 ops/s
Iteration   1: 1292108.813 ops/s
Iteration   2: 1290786.292 ops/s
Iteration   3: 1283629.728 ops/s
Iteration   4: 1300031.553 ops/s
Iteration   5: 1289350.730 ops/s
Iteration   6: 1293029.543 ops/s
Iteration   7: 1294195.547 ops/s
Iteration   8: 1297369.824 ops/s
Iteration   9: 1295006.999 ops/s
Iteration  10: 1294959.948 ops/s
Iteration  11: 1289166.364 ops/s
Iteration  12: 1299405.868 ops/s
Iteration  13: 1297101.674 ops/s
Iteration  14: 1302022.460 ops/s
Iteration  15: 1292037.384 ops/s
Iteration  16: 1298165.401 ops/s
Iteration  17: 1292646.492 ops/s
Iteration  18: 1296685.508 ops/s
Iteration  19: 1298923.570 ops/s
Iteration  20: 1295963.602 ops/s
Iteration  21: 1294823.857 ops/s
Iteration  22: 1293774.327 ops/s
Iteration  23: 1296279.145 ops/s
Iteration  24: 1294283.234 ops/s
Iteration  25: 1297264.414 ops/s
Iteration  26: 1291525.067 ops/s
Iteration  27: 1291569.731 ops/s
Iteration  28: 1296716.791 ops/s
Iteration  29: 1295000.834 ops/s
Iteration  30: 1292111.340 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_valuesView":
  1294531.201 ±(99.9%) 2514.589 ops/s [Average]
  (min, avg, max) = (1283629.728, 1294531.201, 1302022.460), stdev = 3763.718
  CI (99.9%): [1292016.613, 1297045.790] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
SynchronizedSortedBagMultimapTest._Benchmark.benchmark_valuesView  thrpt   30  1294531.201 ± 2514.589  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_withKeyMultiValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_withKeyMultiValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 153270.482 ops/s
# Warmup Iteration   2: 272504.530 ops/s
# Warmup Iteration   3: 319254.974 ops/s
# Warmup Iteration   4: 321103.897 ops/s
# Warmup Iteration   5: 320297.457 ops/s
# Warmup Iteration   6: 272457.891 ops/s
# Warmup Iteration   7: 320929.792 ops/s
# Warmup Iteration   8: 321474.601 ops/s
# Warmup Iteration   9: 321020.332 ops/s
# Warmup Iteration  10: 321079.479 ops/s
# Warmup Iteration  11: 320842.854 ops/s
# Warmup Iteration  12: 320642.105 ops/s
# Warmup Iteration  13: 321592.063 ops/s
# Warmup Iteration  14: 320538.979 ops/s
# Warmup Iteration  15: 320856.997 ops/s
# Warmup Iteration  16: 320998.101 ops/s
# Warmup Iteration  17: 321482.433 ops/s
# Warmup Iteration  18: 321112.525 ops/s
# Warmup Iteration  19: 321082.761 ops/s
# Warmup Iteration  20: 321102.596 ops/s
# Warmup Iteration  21: 321607.838 ops/s
# Warmup Iteration  22: 322000.060 ops/s
# Warmup Iteration  23: 321829.190 ops/s
# Warmup Iteration  24: 321040.265 ops/s
# Warmup Iteration  25: 321084.868 ops/s
# Warmup Iteration  26: 321261.607 ops/s
# Warmup Iteration  27: 320917.898 ops/s
# Warmup Iteration  28: 321195.511 ops/s
# Warmup Iteration  29: 321130.782 ops/s
# Warmup Iteration  30: 321339.395 ops/s
Iteration   1: 319935.619 ops/s
Iteration   2: 321127.649 ops/s
Iteration   3: 320802.702 ops/s
Iteration   4: 321225.603 ops/s
Iteration   5: 320677.330 ops/s
Iteration   6: 321061.876 ops/s
Iteration   7: 320321.332 ops/s
Iteration   8: 321259.032 ops/s
Iteration   9: 321148.926 ops/s
Iteration  10: 320230.826 ops/s
Iteration  11: 321246.547 ops/s
Iteration  12: 320710.004 ops/s
Iteration  13: 321480.300 ops/s
Iteration  14: 321395.871 ops/s
Iteration  15: 321306.706 ops/s
Iteration  16: 320482.734 ops/s
Iteration  17: 320537.426 ops/s
Iteration  18: 321250.885 ops/s
Iteration  19: 320564.137 ops/s
Iteration  20: 321328.885 ops/s
Iteration  21: 321454.365 ops/s
Iteration  22: 321269.829 ops/s
Iteration  23: 320486.574 ops/s
Iteration  24: 321267.669 ops/s
Iteration  25: 321448.147 ops/s
Iteration  26: 321846.193 ops/s
Iteration  27: 320841.208 ops/s
Iteration  28: 320825.568 ops/s
Iteration  29: 321193.967 ops/s
Iteration  30: 320821.765 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_withKeyMultiValues":
  320984.989 ±(99.9%) 293.779 ops/s [Average]
  (min, avg, max) = (319935.619, 320984.989, 321846.193), stdev = 439.714
  CI (99.9%): [320691.211, 321278.768] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score     Error  Units
SynchronizedSortedBagMultimapTest._Benchmark.benchmark_withKeyMultiValues  thrpt   30  320984.989 ± 293.779  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_withKeyMultiValuesNullValueHandling$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_withKeyMultiValuesNullValueHandling

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 623574.086 ops/s
# Warmup Iteration   2: 647941.189 ops/s
# Warmup Iteration   3: 800077.843 ops/s
# Warmup Iteration   4: 830006.997 ops/s
# Warmup Iteration   5: 831808.677 ops/s
# Warmup Iteration   6: 828345.076 ops/s
# Warmup Iteration   7: 829896.499 ops/s
# Warmup Iteration   8: 832971.555 ops/s
# Warmup Iteration   9: 833691.942 ops/s
# Warmup Iteration  10: 832275.683 ops/s
# Warmup Iteration  11: 829664.684 ops/s
# Warmup Iteration  12: 832247.703 ops/s
# Warmup Iteration  13: 699759.792 ops/s
# Warmup Iteration  14: 834454.667 ops/s
# Warmup Iteration  15: 833804.546 ops/s
# Warmup Iteration  16: 833797.479 ops/s
# Warmup Iteration  17: 882444.006 ops/s
# Warmup Iteration  18: 878682.344 ops/s
# Warmup Iteration  19: 882058.577 ops/s
# Warmup Iteration  20: 882701.659 ops/s
# Warmup Iteration  21: 881844.225 ops/s
# Warmup Iteration  22: 881982.730 ops/s
# Warmup Iteration  23: 879800.981 ops/s
# Warmup Iteration  24: 881419.889 ops/s
# Warmup Iteration  25: 881075.679 ops/s
# Warmup Iteration  26: 882466.801 ops/s
# Warmup Iteration  27: 881008.525 ops/s
# Warmup Iteration  28: 882563.856 ops/s
# Warmup Iteration  29: 880474.420 ops/s
# Warmup Iteration  30: 880453.635 ops/s
Iteration   1: 879966.875 ops/s
Iteration   2: 880149.873 ops/s
Iteration   3: 881800.902 ops/s
Iteration   4: 884277.510 ops/s
Iteration   5: 880493.086 ops/s
Iteration   6: 882320.446 ops/s
Iteration   7: 879066.779 ops/s
Iteration   8: 881895.719 ops/s
Iteration   9: 878899.146 ops/s
Iteration  10: 881370.447 ops/s
Iteration  11: 881597.127 ops/s
Iteration  12: 882897.622 ops/s
Iteration  13: 882245.701 ops/s
Iteration  14: 883273.287 ops/s
Iteration  15: 883067.061 ops/s
Iteration  16: 880108.807 ops/s
Iteration  17: 881772.822 ops/s
Iteration  18: 879042.971 ops/s
Iteration  19: 880680.334 ops/s
Iteration  20: 880469.114 ops/s
Iteration  21: 881614.759 ops/s
Iteration  22: 879520.452 ops/s
Iteration  23: 882297.819 ops/s
Iteration  24: 879735.321 ops/s
Iteration  25: 879302.858 ops/s
Iteration  26: 877379.696 ops/s
Iteration  27: 884218.769 ops/s
Iteration  28: 883712.955 ops/s
Iteration  29: 879669.948 ops/s
Iteration  30: 881191.193 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.SynchronizedSortedBagMultimapTest._Benchmark.benchmark_withKeyMultiValuesNullValueHandling":
  881134.647 ±(99.9%) 1148.124 ops/s [Average]
  (min, avg, max) = (877379.696, 881134.647, 884277.510), stdev = 1718.458
  CI (99.9%): [879986.522, 882282.771] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    Mode  Cnt       Score      Error  Units
SynchronizedSortedBagMultimapTest._Benchmark.benchmark_withKeyMultiValuesNullValueHandling  thrpt   30  881134.647 ± 1148.124  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_addAndGrowMultimap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_addAndGrowMultimap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 396159.469 ops/s
# Warmup Iteration   2: 918676.620 ops/s
# Warmup Iteration   3: 1010985.251 ops/s
# Warmup Iteration   4: 1012552.921 ops/s
# Warmup Iteration   5: 842294.051 ops/s
# Warmup Iteration   6: 1015461.356 ops/s
# Warmup Iteration   7: 1013892.665 ops/s
# Warmup Iteration   8: 1013438.662 ops/s
# Warmup Iteration   9: 1014010.103 ops/s
# Warmup Iteration  10: 1014180.400 ops/s
# Warmup Iteration  11: 1013521.941 ops/s
# Warmup Iteration  12: 1015537.213 ops/s
# Warmup Iteration  13: 1014006.463 ops/s
# Warmup Iteration  14: 1012388.718 ops/s
# Warmup Iteration  15: 1010513.159 ops/s
# Warmup Iteration  16: 1012822.122 ops/s
# Warmup Iteration  17: 1013667.363 ops/s
# Warmup Iteration  18: 1009443.516 ops/s
# Warmup Iteration  19: 1013981.823 ops/s
# Warmup Iteration  20: 1013216.886 ops/s
# Warmup Iteration  21: 1012816.876 ops/s
# Warmup Iteration  22: 1014584.930 ops/s
# Warmup Iteration  23: 1012943.695 ops/s
# Warmup Iteration  24: 1013776.792 ops/s
# Warmup Iteration  25: 1011167.015 ops/s
# Warmup Iteration  26: 1013943.129 ops/s
# Warmup Iteration  27: 1011397.658 ops/s
# Warmup Iteration  28: 1012560.357 ops/s
# Warmup Iteration  29: 1012020.116 ops/s
# Warmup Iteration  30: 1012900.344 ops/s
Iteration   1: 1014499.721 ops/s
Iteration   2: 1012128.987 ops/s
Iteration   3: 1011640.195 ops/s
Iteration   4: 1012307.776 ops/s
Iteration   5: 1014565.007 ops/s
Iteration   6: 1011014.860 ops/s
Iteration   7: 1015231.461 ops/s
Iteration   8: 1014925.243 ops/s
Iteration   9: 1011623.570 ops/s
Iteration  10: 1014199.716 ops/s
Iteration  11: 1013309.484 ops/s
Iteration  12: 1015576.585 ops/s
Iteration  13: 1013310.100 ops/s
Iteration  14: 1015270.340 ops/s
Iteration  15: 1013418.531 ops/s
Iteration  16: 1012943.259 ops/s
Iteration  17: 1013918.207 ops/s
Iteration  18: 1013905.539 ops/s
Iteration  19: 1016902.070 ops/s
Iteration  20: 1013339.920 ops/s
Iteration  21: 1015396.803 ops/s
Iteration  22: 1012937.099 ops/s
Iteration  23: 1016102.244 ops/s
Iteration  24: 1015288.148 ops/s
Iteration  25: 1012169.906 ops/s
Iteration  26: 1016270.550 ops/s
Iteration  27: 1015029.850 ops/s
Iteration  28: 1015003.093 ops/s
Iteration  29: 1011458.561 ops/s
Iteration  30: 1013497.968 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_addAndGrowMultimap":
  1013906.160 ±(99.9%) 1045.622 ops/s [Average]
  (min, avg, max) = (1011014.860, 1013906.160, 1016902.070), stdev = 1565.038
  CI (99.9%): [1012860.538, 1014951.782] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
TreeBagMultimapTest._Benchmark.benchmark_addAndGrowMultimap  thrpt   30  1013906.160 ± 1045.622  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 887482.101 ops/s
# Warmup Iteration   2: 2444342.947 ops/s
# Warmup Iteration   3: 2437962.897 ops/s
# Warmup Iteration   4: 2042692.213 ops/s
# Warmup Iteration   5: 2436202.289 ops/s
# Warmup Iteration   6: 2434484.845 ops/s
# Warmup Iteration   7: 2438986.362 ops/s
# Warmup Iteration   8: 2429003.046 ops/s
# Warmup Iteration   9: 2432133.856 ops/s
# Warmup Iteration  10: 2433064.178 ops/s
# Warmup Iteration  11: 2435188.569 ops/s
# Warmup Iteration  12: 2434653.954 ops/s
# Warmup Iteration  13: 2431188.791 ops/s
# Warmup Iteration  14: 2432481.421 ops/s
# Warmup Iteration  15: 2435314.696 ops/s
# Warmup Iteration  16: 2427609.188 ops/s
# Warmup Iteration  17: 2426757.078 ops/s
# Warmup Iteration  18: 2421432.161 ops/s
# Warmup Iteration  19: 2427350.168 ops/s
# Warmup Iteration  20: 2425681.430 ops/s
# Warmup Iteration  21: 2408831.883 ops/s
# Warmup Iteration  22: 2431394.200 ops/s
# Warmup Iteration  23: 2427827.208 ops/s
# Warmup Iteration  24: 2417938.938 ops/s
# Warmup Iteration  25: 2426404.033 ops/s
# Warmup Iteration  26: 2422243.269 ops/s
# Warmup Iteration  27: 2429384.267 ops/s
# Warmup Iteration  28: 2423336.858 ops/s
# Warmup Iteration  29: 2427835.300 ops/s
# Warmup Iteration  30: 2420841.738 ops/s
Iteration   1: 2429785.930 ops/s
Iteration   2: 2432157.977 ops/s
Iteration   3: 2429461.225 ops/s
Iteration   4: 2432626.337 ops/s
Iteration   5: 2433405.381 ops/s
Iteration   6: 2432805.359 ops/s
Iteration   7: 2427061.587 ops/s
Iteration   8: 2432955.955 ops/s
Iteration   9: 2428131.732 ops/s
Iteration  10: 2434088.659 ops/s
Iteration  11: 2429756.702 ops/s
Iteration  12: 2427144.232 ops/s
Iteration  13: 2425551.240 ops/s
Iteration  14: 2432342.430 ops/s
Iteration  15: 2422083.790 ops/s
Iteration  16: 2432843.408 ops/s
Iteration  17: 2427662.484 ops/s
Iteration  18: 2424947.476 ops/s
Iteration  19: 2428235.356 ops/s
Iteration  20: 2431970.946 ops/s
Iteration  21: 2429167.668 ops/s
Iteration  22: 2432409.677 ops/s
Iteration  23: 2424398.740 ops/s
Iteration  24: 2432031.681 ops/s
Iteration  25: 2419783.849 ops/s
Iteration  26: 2430192.681 ops/s
Iteration  27: 2429943.718 ops/s
Iteration  28: 2426038.873 ops/s
Iteration  29: 2426096.214 ops/s
Iteration  30: 2424965.333 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_clear":
  2429001.555 ±(99.9%) 2431.031 ops/s [Average]
  (min, avg, max) = (2419783.849, 2429001.555, 2434088.659), stdev = 3638.653
  CI (99.9%): [2426570.524, 2431432.586] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score      Error  Units
TreeBagMultimapTest._Benchmark.benchmark_clear  thrpt   30  2429001.555 ± 2431.031  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_collectKeyMultiValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_collectKeyMultiValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 32463.228 ops/s
# Warmup Iteration   2: 64749.051 ops/s
# Warmup Iteration   3: 79933.208 ops/s
# Warmup Iteration   4: 80661.768 ops/s
# Warmup Iteration   5: 80427.328 ops/s
# Warmup Iteration   6: 66762.614 ops/s
# Warmup Iteration   7: 80855.424 ops/s
# Warmup Iteration   8: 80784.686 ops/s
# Warmup Iteration   9: 80548.849 ops/s
# Warmup Iteration  10: 80785.829 ops/s
# Warmup Iteration  11: 80466.224 ops/s
# Warmup Iteration  12: 80802.052 ops/s
# Warmup Iteration  13: 81047.451 ops/s
# Warmup Iteration  14: 80704.444 ops/s
# Warmup Iteration  15: 80566.058 ops/s
# Warmup Iteration  16: 80372.539 ops/s
# Warmup Iteration  17: 80646.016 ops/s
# Warmup Iteration  18: 80668.970 ops/s
# Warmup Iteration  19: 80576.413 ops/s
# Warmup Iteration  20: 80756.059 ops/s
# Warmup Iteration  21: 80897.169 ops/s
# Warmup Iteration  22: 80922.114 ops/s
# Warmup Iteration  23: 80834.845 ops/s
# Warmup Iteration  24: 80524.347 ops/s
# Warmup Iteration  25: 80510.833 ops/s
# Warmup Iteration  26: 80821.264 ops/s
# Warmup Iteration  27: 80618.031 ops/s
# Warmup Iteration  28: 80735.167 ops/s
# Warmup Iteration  29: 80267.513 ops/s
# Warmup Iteration  30: 80702.754 ops/s
Iteration   1: 80500.397 ops/s
Iteration   2: 80450.178 ops/s
Iteration   3: 80348.347 ops/s
Iteration   4: 80690.492 ops/s
Iteration   5: 80987.456 ops/s
Iteration   6: 80615.146 ops/s
Iteration   7: 80181.264 ops/s
Iteration   8: 81005.729 ops/s
Iteration   9: 80855.711 ops/s
Iteration  10: 80779.325 ops/s
Iteration  11: 80570.000 ops/s
Iteration  12: 80448.693 ops/s
Iteration  13: 80775.169 ops/s
Iteration  14: 80672.186 ops/s
Iteration  15: 81046.087 ops/s
Iteration  16: 80575.094 ops/s
Iteration  17: 80428.365 ops/s
Iteration  18: 80609.732 ops/s
Iteration  19: 80765.261 ops/s
Iteration  20: 81027.679 ops/s
Iteration  21: 80790.914 ops/s
Iteration  22: 80828.735 ops/s
Iteration  23: 80681.239 ops/s
Iteration  24: 80677.788 ops/s
Iteration  25: 80476.003 ops/s
Iteration  26: 80331.483 ops/s
Iteration  27: 80226.973 ops/s
Iteration  28: 80436.301 ops/s
Iteration  29: 80817.859 ops/s
Iteration  30: 80797.956 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_collectKeyMultiValues":
  80646.585 ±(99.9%) 155.315 ops/s [Average]
  (min, avg, max) = (80181.264, 80646.585, 81046.087), stdev = 232.468
  CI (99.9%): [80491.271, 80801.900] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt      Score     Error  Units
TreeBagMultimapTest._Benchmark.benchmark_collectKeyMultiValues  thrpt   30  80646.585 ± 155.315  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_collectKeysValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_collectKeysValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 46911.254 ops/s
# Warmup Iteration   2: 96732.555 ops/s
# Warmup Iteration   3: 112079.589 ops/s
# Warmup Iteration   4: 111997.805 ops/s
# Warmup Iteration   5: 103328.753 ops/s
# Warmup Iteration   6: 102590.653 ops/s
# Warmup Iteration   7: 112455.554 ops/s
# Warmup Iteration   8: 112627.993 ops/s
# Warmup Iteration   9: 112138.637 ops/s
# Warmup Iteration  10: 112285.110 ops/s
# Warmup Iteration  11: 113202.000 ops/s
# Warmup Iteration  12: 112615.438 ops/s
# Warmup Iteration  13: 112924.698 ops/s
# Warmup Iteration  14: 111965.734 ops/s
# Warmup Iteration  15: 112114.517 ops/s
# Warmup Iteration  16: 111856.492 ops/s
# Warmup Iteration  17: 112580.765 ops/s
# Warmup Iteration  18: 112801.804 ops/s
# Warmup Iteration  19: 113103.075 ops/s
# Warmup Iteration  20: 113253.744 ops/s
# Warmup Iteration  21: 112563.427 ops/s
# Warmup Iteration  22: 112466.084 ops/s
# Warmup Iteration  23: 112992.338 ops/s
# Warmup Iteration  24: 112858.709 ops/s
# Warmup Iteration  25: 112510.731 ops/s
# Warmup Iteration  26: 112885.234 ops/s
# Warmup Iteration  27: 112702.390 ops/s
# Warmup Iteration  28: 112642.881 ops/s
# Warmup Iteration  29: 113354.446 ops/s
# Warmup Iteration  30: 112943.202 ops/s
Iteration   1: 112219.551 ops/s
Iteration   2: 112578.747 ops/s
Iteration   3: 112812.081 ops/s
Iteration   4: 113233.761 ops/s
Iteration   5: 112346.466 ops/s
Iteration   6: 111290.710 ops/s
Iteration   7: 113668.212 ops/s
Iteration   8: 112452.019 ops/s
Iteration   9: 112775.364 ops/s
Iteration  10: 113248.453 ops/s
Iteration  11: 112066.537 ops/s
Iteration  12: 113627.370 ops/s
Iteration  13: 112224.257 ops/s
Iteration  14: 113136.358 ops/s
Iteration  15: 112647.973 ops/s
Iteration  16: 112170.508 ops/s
Iteration  17: 111776.452 ops/s
Iteration  18: 112591.747 ops/s
Iteration  19: 113104.140 ops/s
Iteration  20: 113345.257 ops/s
Iteration  21: 112532.442 ops/s
Iteration  22: 113069.581 ops/s
Iteration  23: 113198.945 ops/s
Iteration  24: 112292.315 ops/s
Iteration  25: 113253.989 ops/s
Iteration  26: 112906.861 ops/s
Iteration  27: 113070.289 ops/s
Iteration  28: 112532.740 ops/s
Iteration  29: 112026.624 ops/s
Iteration  30: 112297.168 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_collectKeysValues":
  112683.231 ±(99.9%) 373.575 ops/s [Average]
  (min, avg, max) = (111290.710, 112683.231, 113668.212), stdev = 559.150
  CI (99.9%): [112309.655, 113056.806] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score     Error  Units
TreeBagMultimapTest._Benchmark.benchmark_collectKeysValues  thrpt   30  112683.231 ± 373.575  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_collectValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_collectValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 145339.514 ops/s
# Warmup Iteration   2: 330819.113 ops/s
# Warmup Iteration   3: 359024.804 ops/s
# Warmup Iteration   4: 360784.828 ops/s
# Warmup Iteration   5: 304615.031 ops/s
# Warmup Iteration   6: 361717.417 ops/s
# Warmup Iteration   7: 361707.860 ops/s
# Warmup Iteration   8: 361039.132 ops/s
# Warmup Iteration   9: 361987.462 ops/s
# Warmup Iteration  10: 362929.600 ops/s
# Warmup Iteration  11: 360766.174 ops/s
# Warmup Iteration  12: 361171.055 ops/s
# Warmup Iteration  13: 360819.421 ops/s
# Warmup Iteration  14: 361377.058 ops/s
# Warmup Iteration  15: 360551.866 ops/s
# Warmup Iteration  16: 361719.216 ops/s
# Warmup Iteration  17: 360576.654 ops/s
# Warmup Iteration  18: 360630.228 ops/s
# Warmup Iteration  19: 361740.038 ops/s
# Warmup Iteration  20: 360602.949 ops/s
# Warmup Iteration  21: 360099.805 ops/s
# Warmup Iteration  22: 360235.888 ops/s
# Warmup Iteration  23: 360057.248 ops/s
# Warmup Iteration  24: 360374.644 ops/s
# Warmup Iteration  25: 361509.799 ops/s
# Warmup Iteration  26: 359174.330 ops/s
# Warmup Iteration  27: 359827.679 ops/s
# Warmup Iteration  28: 360054.645 ops/s
# Warmup Iteration  29: 360649.013 ops/s
# Warmup Iteration  30: 361193.817 ops/s
Iteration   1: 362565.116 ops/s
Iteration   2: 361547.169 ops/s
Iteration   3: 362569.118 ops/s
Iteration   4: 359807.435 ops/s
Iteration   5: 360625.324 ops/s
Iteration   6: 358407.115 ops/s
Iteration   7: 354682.351 ops/s
Iteration   8: 356359.159 ops/s
Iteration   9: 358822.808 ops/s
Iteration  10: 360373.710 ops/s
Iteration  11: 354621.465 ops/s
Iteration  12: 360240.391 ops/s
Iteration  13: 360926.495 ops/s
Iteration  14: 355613.610 ops/s
Iteration  15: 362892.780 ops/s
Iteration  16: 360125.062 ops/s
Iteration  17: 362301.124 ops/s
Iteration  18: 361150.142 ops/s
Iteration  19: 362681.138 ops/s
Iteration  20: 361400.780 ops/s
Iteration  21: 360797.660 ops/s
Iteration  22: 358282.014 ops/s
Iteration  23: 361862.957 ops/s
Iteration  24: 362572.424 ops/s
Iteration  25: 360968.516 ops/s
Iteration  26: 362275.304 ops/s
Iteration  27: 360956.848 ops/s
Iteration  28: 354303.399 ops/s
Iteration  29: 362119.618 ops/s
Iteration  30: 360559.485 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_collectValues":
  360080.351 ±(99.9%) 1721.809 ops/s [Average]
  (min, avg, max) = (354303.399, 360080.351, 362892.780), stdev = 2577.123
  CI (99.9%): [358358.542, 361802.160] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
TreeBagMultimapTest._Benchmark.benchmark_collectValues  thrpt   30  360080.351 ± 1721.809  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_containsValue$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_containsValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3050957.278 ops/s
# Warmup Iteration   2: 7705489.784 ops/s
# Warmup Iteration   3: 6571051.023 ops/s
# Warmup Iteration   4: 7679076.007 ops/s
# Warmup Iteration   5: 7698497.492 ops/s
# Warmup Iteration   6: 7739033.431 ops/s
# Warmup Iteration   7: 7703498.090 ops/s
# Warmup Iteration   8: 7771800.272 ops/s
# Warmup Iteration   9: 7713751.844 ops/s
# Warmup Iteration  10: 7774431.621 ops/s
# Warmup Iteration  11: 7699209.822 ops/s
# Warmup Iteration  12: 7773234.808 ops/s
# Warmup Iteration  13: 7774684.461 ops/s
# Warmup Iteration  14: 7707406.850 ops/s
# Warmup Iteration  15: 7758723.933 ops/s
# Warmup Iteration  16: 7763804.060 ops/s
# Warmup Iteration  17: 7801980.784 ops/s
# Warmup Iteration  18: 7868164.275 ops/s
# Warmup Iteration  19: 7846757.049 ops/s
# Warmup Iteration  20: 7733327.820 ops/s
# Warmup Iteration  21: 7816495.963 ops/s
# Warmup Iteration  22: 7829328.550 ops/s
# Warmup Iteration  23: 7740498.939 ops/s
# Warmup Iteration  24: 7788827.077 ops/s
# Warmup Iteration  25: 7771493.502 ops/s
# Warmup Iteration  26: 7774518.403 ops/s
# Warmup Iteration  27: 7756247.144 ops/s
# Warmup Iteration  28: 7744765.028 ops/s
# Warmup Iteration  29: 7778890.715 ops/s
# Warmup Iteration  30: 7752324.979 ops/s
Iteration   1: 7828934.891 ops/s
Iteration   2: 7781667.666 ops/s
Iteration   3: 7887848.350 ops/s
Iteration   4: 7739859.566 ops/s
Iteration   5: 7885598.841 ops/s
Iteration   6: 7826073.558 ops/s
Iteration   7: 7830242.139 ops/s
Iteration   8: 7858134.820 ops/s
Iteration   9: 7767320.494 ops/s
Iteration  10: 7712361.208 ops/s
Iteration  11: 7771648.867 ops/s
Iteration  12: 7851951.070 ops/s
Iteration  13: 7803228.956 ops/s
Iteration  14: 7704901.406 ops/s
Iteration  15: 7659346.631 ops/s
Iteration  16: 7769868.711 ops/s
Iteration  17: 7803436.089 ops/s
Iteration  18: 7787888.581 ops/s
Iteration  19: 7667608.861 ops/s
Iteration  20: 7802028.528 ops/s
Iteration  21: 7822315.316 ops/s
Iteration  22: 7834851.442 ops/s
Iteration  23: 7766741.828 ops/s
Iteration  24: 7827291.238 ops/s
Iteration  25: 7820221.559 ops/s
Iteration  26: 7810573.269 ops/s
Iteration  27: 7824302.982 ops/s
Iteration  28: 7831013.927 ops/s
Iteration  29: 7726467.833 ops/s
Iteration  30: 7773768.317 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_containsValue":
  7792583.231 ±(99.9%) 38154.302 ops/s [Average]
  (min, avg, max) = (7659346.631, 7792583.231, 7887848.350), stdev = 57107.567
  CI (99.9%): [7754428.930, 7830737.533] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
TreeBagMultimapTest._Benchmark.benchmark_containsValue  thrpt   30  7792583.231 ± 38154.302  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_flip$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_flip

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 483362.501 ops/s
# Warmup Iteration   2: 1012524.810 ops/s
# Warmup Iteration   3: 1106480.606 ops/s
# Warmup Iteration   4: 1113127.831 ops/s
# Warmup Iteration   5: 923733.930 ops/s
# Warmup Iteration   6: 1104249.014 ops/s
# Warmup Iteration   7: 1113476.613 ops/s
# Warmup Iteration   8: 1105675.048 ops/s
# Warmup Iteration   9: 1114959.238 ops/s
# Warmup Iteration  10: 1107560.254 ops/s
# Warmup Iteration  11: 1113573.702 ops/s
# Warmup Iteration  12: 1110099.407 ops/s
# Warmup Iteration  13: 1112159.904 ops/s
# Warmup Iteration  14: 1111711.356 ops/s
# Warmup Iteration  15: 1114667.908 ops/s
# Warmup Iteration  16: 1112404.429 ops/s
# Warmup Iteration  17: 1110298.164 ops/s
# Warmup Iteration  18: 1113635.859 ops/s
# Warmup Iteration  19: 1110961.628 ops/s
# Warmup Iteration  20: 1112484.130 ops/s
# Warmup Iteration  21: 1111036.964 ops/s
# Warmup Iteration  22: 1110746.404 ops/s
# Warmup Iteration  23: 1111272.409 ops/s
# Warmup Iteration  24: 1110440.108 ops/s
# Warmup Iteration  25: 1112464.459 ops/s
# Warmup Iteration  26: 1102716.281 ops/s
# Warmup Iteration  27: 1102234.988 ops/s
# Warmup Iteration  28: 1114558.985 ops/s
# Warmup Iteration  29: 1107859.071 ops/s
# Warmup Iteration  30: 1090845.665 ops/s
Iteration   1: 1111976.734 ops/s
Iteration   2: 1113712.834 ops/s
Iteration   3: 1111536.321 ops/s
Iteration   4: 1109639.199 ops/s
Iteration   5: 1113064.846 ops/s
Iteration   6: 1114441.838 ops/s
Iteration   7: 1114104.309 ops/s
Iteration   8: 1090518.117 ops/s
Iteration   9: 1090464.573 ops/s
Iteration  10: 1115661.069 ops/s
Iteration  11: 1109602.654 ops/s
Iteration  12: 1109370.931 ops/s
Iteration  13: 1114049.988 ops/s
Iteration  14: 1108687.334 ops/s
Iteration  15: 1110841.493 ops/s
Iteration  16: 1111411.861 ops/s
Iteration  17: 1115242.160 ops/s
Iteration  18: 1111087.962 ops/s
Iteration  19: 1108642.688 ops/s
Iteration  20: 1111016.128 ops/s
Iteration  21: 1110525.631 ops/s
Iteration  22: 1109998.081 ops/s
Iteration  23: 1111788.265 ops/s
Iteration  24: 1109401.226 ops/s
Iteration  25: 1111711.539 ops/s
Iteration  26: 1103265.195 ops/s
Iteration  27: 1110860.349 ops/s
Iteration  28: 1106012.193 ops/s
Iteration  29: 1111169.207 ops/s
Iteration  30: 1114804.378 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_flip":
  1109820.303 ±(99.9%) 3932.186 ops/s [Average]
  (min, avg, max) = (1090464.573, 1109820.303, 1115661.069), stdev = 5885.512
  CI (99.9%): [1105888.117, 1113752.490] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score      Error  Units
TreeBagMultimapTest._Benchmark.benchmark_flip  thrpt   30  1109820.303 ± 3932.186  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_forEachKey$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_forEachKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 810244.271 ops/s
# Warmup Iteration   2: 2104752.925 ops/s
# Warmup Iteration   3: 2170624.074 ops/s
# Warmup Iteration   4: 1791907.752 ops/s
# Warmup Iteration   5: 2176544.705 ops/s
# Warmup Iteration   6: 2156874.352 ops/s
# Warmup Iteration   7: 2174415.108 ops/s
# Warmup Iteration   8: 2177171.574 ops/s
# Warmup Iteration   9: 2181199.431 ops/s
# Warmup Iteration  10: 2175688.523 ops/s
# Warmup Iteration  11: 2175248.098 ops/s
# Warmup Iteration  12: 2165465.891 ops/s
# Warmup Iteration  13: 2173766.355 ops/s
# Warmup Iteration  14: 2173337.891 ops/s
# Warmup Iteration  15: 2173541.106 ops/s
# Warmup Iteration  16: 2166580.859 ops/s
# Warmup Iteration  17: 2172245.502 ops/s
# Warmup Iteration  18: 2181319.273 ops/s
# Warmup Iteration  19: 2172136.492 ops/s
# Warmup Iteration  20: 2170803.472 ops/s
# Warmup Iteration  21: 2169845.464 ops/s
# Warmup Iteration  22: 2174826.570 ops/s
# Warmup Iteration  23: 2175284.322 ops/s
# Warmup Iteration  24: 2160420.125 ops/s
# Warmup Iteration  25: 2174470.099 ops/s
# Warmup Iteration  26: 2179342.301 ops/s
# Warmup Iteration  27: 2174184.572 ops/s
# Warmup Iteration  28: 2176791.880 ops/s
# Warmup Iteration  29: 2174538.992 ops/s
# Warmup Iteration  30: 2174400.342 ops/s
Iteration   1: 2176954.300 ops/s
Iteration   2: 2174004.887 ops/s
Iteration   3: 2172167.583 ops/s
Iteration   4: 2180579.683 ops/s
Iteration   5: 2173754.482 ops/s
Iteration   6: 2176880.887 ops/s
Iteration   7: 2165716.241 ops/s
Iteration   8: 2176428.546 ops/s
Iteration   9: 2174733.748 ops/s
Iteration  10: 2170987.478 ops/s
Iteration  11: 2181619.707 ops/s
Iteration  12: 2176381.608 ops/s
Iteration  13: 2178755.667 ops/s
Iteration  14: 2178969.506 ops/s
Iteration  15: 2181227.273 ops/s
Iteration  16: 2178712.478 ops/s
Iteration  17: 2176030.938 ops/s
Iteration  18: 2177502.284 ops/s
Iteration  19: 2143528.029 ops/s
Iteration  20: 2179744.716 ops/s
Iteration  21: 2167688.871 ops/s
Iteration  22: 2178443.372 ops/s
Iteration  23: 2170835.768 ops/s
Iteration  24: 2175315.578 ops/s
Iteration  25: 2178259.206 ops/s
Iteration  26: 2177692.826 ops/s
Iteration  27: 2178491.443 ops/s
Iteration  28: 2170014.503 ops/s
Iteration  29: 2174596.272 ops/s
Iteration  30: 2173923.451 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_forEachKey":
  2174664.711 ±(99.9%) 4703.941 ops/s [Average]
  (min, avg, max) = (2143528.029, 2174664.711, 2181619.707), stdev = 7040.638
  CI (99.9%): [2169960.770, 2179368.652] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
TreeBagMultimapTest._Benchmark.benchmark_forEachKey  thrpt   30  2174664.711 ± 4703.941  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_forEachKeyMultiValue$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_forEachKeyMultiValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 393013.324 ops/s
# Warmup Iteration   2: 735466.931 ops/s
# Warmup Iteration   3: 847116.004 ops/s
# Warmup Iteration   4: 854693.346 ops/s
# Warmup Iteration   5: 849451.838 ops/s
# Warmup Iteration   6: 718321.180 ops/s
# Warmup Iteration   7: 855382.866 ops/s
# Warmup Iteration   8: 857743.017 ops/s
# Warmup Iteration   9: 857250.293 ops/s
# Warmup Iteration  10: 856844.486 ops/s
# Warmup Iteration  11: 856740.209 ops/s
# Warmup Iteration  12: 857044.889 ops/s
# Warmup Iteration  13: 856914.110 ops/s
# Warmup Iteration  14: 858471.356 ops/s
# Warmup Iteration  15: 849196.479 ops/s
# Warmup Iteration  16: 856895.890 ops/s
# Warmup Iteration  17: 856019.128 ops/s
# Warmup Iteration  18: 855406.773 ops/s
# Warmup Iteration  19: 857184.660 ops/s
# Warmup Iteration  20: 854618.666 ops/s
# Warmup Iteration  21: 856770.743 ops/s
# Warmup Iteration  22: 856196.923 ops/s
# Warmup Iteration  23: 857456.399 ops/s
# Warmup Iteration  24: 855413.060 ops/s
# Warmup Iteration  25: 857181.378 ops/s
# Warmup Iteration  26: 856662.984 ops/s
# Warmup Iteration  27: 857656.489 ops/s
# Warmup Iteration  28: 850033.938 ops/s
# Warmup Iteration  29: 858034.191 ops/s
# Warmup Iteration  30: 857600.650 ops/s
Iteration   1: 854836.550 ops/s
Iteration   2: 857911.408 ops/s
Iteration   3: 854075.761 ops/s
Iteration   4: 856741.901 ops/s
Iteration   5: 855920.408 ops/s
Iteration   6: 858655.338 ops/s
Iteration   7: 853012.759 ops/s
Iteration   8: 842568.745 ops/s
Iteration   9: 858055.573 ops/s
Iteration  10: 857041.751 ops/s
Iteration  11: 858360.012 ops/s
Iteration  12: 853598.957 ops/s
Iteration  13: 857989.584 ops/s
Iteration  14: 855183.879 ops/s
Iteration  15: 854580.509 ops/s
Iteration  16: 858438.572 ops/s
Iteration  17: 856168.270 ops/s
Iteration  18: 856554.538 ops/s
Iteration  19: 853254.207 ops/s
Iteration  20: 853773.392 ops/s
Iteration  21: 855214.239 ops/s
Iteration  22: 855777.909 ops/s
Iteration  23: 857204.336 ops/s
Iteration  24: 857219.137 ops/s
Iteration  25: 855723.650 ops/s
Iteration  26: 856554.069 ops/s
Iteration  27: 856893.410 ops/s
Iteration  28: 855176.665 ops/s
Iteration  29: 856001.153 ops/s
Iteration  30: 856381.502 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_forEachKeyMultiValue":
  855628.939 ±(99.9%) 1958.434 ops/s [Average]
  (min, avg, max) = (842568.745, 855628.939, 858655.338), stdev = 2931.293
  CI (99.9%): [853670.505, 857587.374] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
TreeBagMultimapTest._Benchmark.benchmark_forEachKeyMultiValue  thrpt   30  855628.939 ± 1958.434  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_forEachKeyValue$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_forEachKeyValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 509327.695 ops/s
# Warmup Iteration   2: 1125136.756 ops/s
# Warmup Iteration   3: 1188908.623 ops/s
# Warmup Iteration   4: 1198089.668 ops/s
# Warmup Iteration   5: 990939.029 ops/s
# Warmup Iteration   6: 1188349.213 ops/s
# Warmup Iteration   7: 1204001.901 ops/s
# Warmup Iteration   8: 1199013.345 ops/s
# Warmup Iteration   9: 1202889.601 ops/s
# Warmup Iteration  10: 1196880.666 ops/s
# Warmup Iteration  11: 1198832.185 ops/s
# Warmup Iteration  12: 1198700.457 ops/s
# Warmup Iteration  13: 1193644.420 ops/s
# Warmup Iteration  14: 1200230.725 ops/s
# Warmup Iteration  15: 1195272.461 ops/s
# Warmup Iteration  16: 1203385.970 ops/s
# Warmup Iteration  17: 1199537.625 ops/s
# Warmup Iteration  18: 1198288.229 ops/s
# Warmup Iteration  19: 1197100.861 ops/s
# Warmup Iteration  20: 1193868.376 ops/s
# Warmup Iteration  21: 1200440.800 ops/s
# Warmup Iteration  22: 1195633.709 ops/s
# Warmup Iteration  23: 1194017.093 ops/s
# Warmup Iteration  24: 1201606.845 ops/s
# Warmup Iteration  25: 1202611.721 ops/s
# Warmup Iteration  26: 1201755.276 ops/s
# Warmup Iteration  27: 1198602.768 ops/s
# Warmup Iteration  28: 1196820.470 ops/s
# Warmup Iteration  29: 1193876.766 ops/s
# Warmup Iteration  30: 1199117.222 ops/s
Iteration   1: 1187450.575 ops/s
Iteration   2: 1198941.770 ops/s
Iteration   3: 1194830.559 ops/s
Iteration   4: 1194254.223 ops/s
Iteration   5: 1198484.866 ops/s
Iteration   6: 1201229.820 ops/s
Iteration   7: 1198804.651 ops/s
Iteration   8: 1195582.727 ops/s
Iteration   9: 1196086.272 ops/s
Iteration  10: 1188019.778 ops/s
Iteration  11: 1192440.008 ops/s
Iteration  12: 1200621.793 ops/s
Iteration  13: 1199492.640 ops/s
Iteration  14: 1198862.184 ops/s
Iteration  15: 1178046.930 ops/s
Iteration  16: 1197075.916 ops/s
Iteration  17: 1196991.749 ops/s
Iteration  18: 1196999.082 ops/s
Iteration  19: 1200353.411 ops/s
Iteration  20: 1191816.205 ops/s
Iteration  21: 1197272.179 ops/s
Iteration  22: 1201110.174 ops/s
Iteration  23: 1194547.620 ops/s
Iteration  24: 1198075.674 ops/s
Iteration  25: 1182876.113 ops/s
Iteration  26: 1199923.123 ops/s
Iteration  27: 1205375.260 ops/s
Iteration  28: 1196827.379 ops/s
Iteration  29: 1191664.738 ops/s
Iteration  30: 1201071.821 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_forEachKeyValue":
  1195837.641 ±(99.9%) 3847.704 ops/s [Average]
  (min, avg, max) = (1178046.930, 1195837.641, 1205375.260), stdev = 5759.063
  CI (99.9%): [1191989.937, 1199685.345] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
TreeBagMultimapTest._Benchmark.benchmark_forEachKeyValue  thrpt   30  1195837.641 ± 3847.704  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_forEachValue$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_forEachValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 633516.617 ops/s
# Warmup Iteration   2: 1435532.054 ops/s
# Warmup Iteration   3: 1513567.372 ops/s
# Warmup Iteration   4: 1501492.154 ops/s
# Warmup Iteration   5: 1280350.627 ops/s
# Warmup Iteration   6: 1521724.562 ops/s
# Warmup Iteration   7: 1520713.828 ops/s
# Warmup Iteration   8: 1524724.741 ops/s
# Warmup Iteration   9: 1519995.657 ops/s
# Warmup Iteration  10: 1522705.421 ops/s
# Warmup Iteration  11: 1522291.241 ops/s
# Warmup Iteration  12: 1516739.119 ops/s
# Warmup Iteration  13: 1522278.361 ops/s
# Warmup Iteration  14: 1519621.694 ops/s
# Warmup Iteration  15: 1523392.785 ops/s
# Warmup Iteration  16: 1510493.009 ops/s
# Warmup Iteration  17: 1521659.350 ops/s
# Warmup Iteration  18: 1519029.487 ops/s
# Warmup Iteration  19: 1523793.928 ops/s
# Warmup Iteration  20: 1525174.070 ops/s
# Warmup Iteration  21: 1523753.240 ops/s
# Warmup Iteration  22: 1528121.132 ops/s
# Warmup Iteration  23: 1521830.645 ops/s
# Warmup Iteration  24: 1524065.768 ops/s
# Warmup Iteration  25: 1523211.753 ops/s
# Warmup Iteration  26: 1521859.135 ops/s
# Warmup Iteration  27: 1521497.640 ops/s
# Warmup Iteration  28: 1527203.574 ops/s
# Warmup Iteration  29: 1525894.097 ops/s
# Warmup Iteration  30: 1527653.376 ops/s
Iteration   1: 1530640.148 ops/s
Iteration   2: 1528996.832 ops/s
Iteration   3: 1522663.050 ops/s
Iteration   4: 1524347.778 ops/s
Iteration   5: 1529776.683 ops/s
Iteration   6: 1530010.412 ops/s
Iteration   7: 1526176.255 ops/s
Iteration   8: 1523352.197 ops/s
Iteration   9: 1528837.002 ops/s
Iteration  10: 1529941.208 ops/s
Iteration  11: 1527214.241 ops/s
Iteration  12: 1523035.110 ops/s
Iteration  13: 1520997.222 ops/s
Iteration  14: 1523693.900 ops/s
Iteration  15: 1528280.022 ops/s
Iteration  16: 1523487.873 ops/s
Iteration  17: 1522327.405 ops/s
Iteration  18: 1520645.048 ops/s
Iteration  19: 1530741.565 ops/s
Iteration  20: 1519310.418 ops/s
Iteration  21: 1524956.118 ops/s
Iteration  22: 1525222.718 ops/s
Iteration  23: 1523503.476 ops/s
Iteration  24: 1530737.060 ops/s
Iteration  25: 1527000.152 ops/s
Iteration  26: 1527297.823 ops/s
Iteration  27: 1527549.648 ops/s
Iteration  28: 1528850.978 ops/s
Iteration  29: 1530410.758 ops/s
Iteration  30: 1500907.901 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_forEachValue":
  1525363.700 ±(99.9%) 3818.649 ops/s [Average]
  (min, avg, max) = (1500907.901, 1525363.700, 1530741.565), stdev = 5715.575
  CI (99.9%): [1521545.051, 1529182.349] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
TreeBagMultimapTest._Benchmark.benchmark_forEachValue  thrpt   30  1525363.700 ± 3818.649  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_getIfAbsentPutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_getIfAbsentPutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 101237.438 ops/s
# Warmup Iteration   2: 137095.152 ops/s
# Warmup Iteration   3: 180652.877 ops/s
# Warmup Iteration   4: 179822.867 ops/s
# Warmup Iteration   5: 180617.487 ops/s
# Warmup Iteration   6: 180601.759 ops/s
# Warmup Iteration   7: 180689.111 ops/s
# Warmup Iteration   8: 181074.662 ops/s
# Warmup Iteration   9: 150688.164 ops/s
# Warmup Iteration  10: 180534.413 ops/s
# Warmup Iteration  11: 180595.648 ops/s
# Warmup Iteration  12: 181167.428 ops/s
# Warmup Iteration  13: 180522.143 ops/s
# Warmup Iteration  14: 180850.522 ops/s
# Warmup Iteration  15: 180465.075 ops/s
# Warmup Iteration  16: 180746.351 ops/s
# Warmup Iteration  17: 183824.369 ops/s
# Warmup Iteration  18: 184042.704 ops/s
# Warmup Iteration  19: 184167.412 ops/s
# Warmup Iteration  20: 183784.814 ops/s
# Warmup Iteration  21: 183918.823 ops/s
# Warmup Iteration  22: 183690.454 ops/s
# Warmup Iteration  23: 182446.244 ops/s
# Warmup Iteration  24: 182389.188 ops/s
# Warmup Iteration  25: 183801.196 ops/s
# Warmup Iteration  26: 183981.681 ops/s
# Warmup Iteration  27: 184091.850 ops/s
# Warmup Iteration  28: 184032.787 ops/s
# Warmup Iteration  29: 184108.724 ops/s
# Warmup Iteration  30: 184146.507 ops/s
Iteration   1: 184158.342 ops/s
Iteration   2: 183884.429 ops/s
Iteration   3: 184213.871 ops/s
Iteration   4: 184372.045 ops/s
Iteration   5: 184236.440 ops/s
Iteration   6: 184329.722 ops/s
Iteration   7: 184521.117 ops/s
Iteration   8: 183021.814 ops/s
Iteration   9: 183809.818 ops/s
Iteration  10: 184319.085 ops/s
Iteration  11: 184304.025 ops/s
Iteration  12: 184153.791 ops/s
Iteration  13: 184258.577 ops/s
Iteration  14: 184048.508 ops/s
Iteration  15: 184202.431 ops/s
Iteration  16: 184301.873 ops/s
Iteration  17: 184221.570 ops/s
Iteration  18: 184442.215 ops/s
Iteration  19: 183877.007 ops/s
Iteration  20: 184154.570 ops/s
Iteration  21: 183606.717 ops/s
Iteration  22: 183859.347 ops/s
Iteration  23: 184509.852 ops/s
Iteration  24: 184078.437 ops/s
Iteration  25: 183294.000 ops/s
Iteration  26: 184001.511 ops/s
Iteration  27: 184484.465 ops/s
Iteration  28: 183500.672 ops/s
Iteration  29: 184349.863 ops/s
Iteration  30: 183414.987 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_getIfAbsentPutAll":
  184064.370 ±(99.9%) 251.765 ops/s [Average]
  (min, avg, max) = (183021.814, 184064.370, 184521.117), stdev = 376.831
  CI (99.9%): [183812.605, 184316.136] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score     Error  Units
TreeBagMultimapTest._Benchmark.benchmark_getIfAbsentPutAll  thrpt   30  184064.370 ± 251.765  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 245291.895 ops/s
# Warmup Iteration   2: 572754.859 ops/s
# Warmup Iteration   3: 617869.822 ops/s
# Warmup Iteration   4: 621078.590 ops/s
# Warmup Iteration   5: 524886.828 ops/s
# Warmup Iteration   6: 624119.736 ops/s
# Warmup Iteration   7: 622929.774 ops/s
# Warmup Iteration   8: 623668.871 ops/s
# Warmup Iteration   9: 623004.826 ops/s
# Warmup Iteration  10: 623029.548 ops/s
# Warmup Iteration  11: 624280.089 ops/s
# Warmup Iteration  12: 621929.426 ops/s
# Warmup Iteration  13: 622945.415 ops/s
# Warmup Iteration  14: 622853.320 ops/s
# Warmup Iteration  15: 620933.048 ops/s
# Warmup Iteration  16: 622278.492 ops/s
# Warmup Iteration  17: 623254.398 ops/s
# Warmup Iteration  18: 621411.175 ops/s
# Warmup Iteration  19: 623086.343 ops/s
# Warmup Iteration  20: 623575.176 ops/s
# Warmup Iteration  21: 623659.597 ops/s
# Warmup Iteration  22: 622491.211 ops/s
# Warmup Iteration  23: 624015.561 ops/s
# Warmup Iteration  24: 623630.008 ops/s
# Warmup Iteration  25: 624198.641 ops/s
# Warmup Iteration  26: 623420.663 ops/s
# Warmup Iteration  27: 623129.997 ops/s
# Warmup Iteration  28: 625210.616 ops/s
# Warmup Iteration  29: 621569.634 ops/s
# Warmup Iteration  30: 622712.677 ops/s
Iteration   1: 626706.817 ops/s
Iteration   2: 623471.900 ops/s
Iteration   3: 623162.957 ops/s
Iteration   4: 621206.770 ops/s
Iteration   5: 625547.143 ops/s
Iteration   6: 621899.501 ops/s
Iteration   7: 622787.008 ops/s
Iteration   8: 622560.844 ops/s
Iteration   9: 625297.436 ops/s
Iteration  10: 621921.791 ops/s
Iteration  11: 623383.933 ops/s
Iteration  12: 621851.260 ops/s
Iteration  13: 623371.982 ops/s
Iteration  14: 623799.129 ops/s
Iteration  15: 612601.032 ops/s
Iteration  16: 622866.108 ops/s
Iteration  17: 621959.414 ops/s
Iteration  18: 623322.554 ops/s
Iteration  19: 624720.503 ops/s
Iteration  20: 623470.358 ops/s
Iteration  21: 622449.230 ops/s
Iteration  22: 623090.106 ops/s
Iteration  23: 624026.634 ops/s
Iteration  24: 622959.410 ops/s
Iteration  25: 623977.204 ops/s
Iteration  26: 621105.356 ops/s
Iteration  27: 622015.731 ops/s
Iteration  28: 623985.078 ops/s
Iteration  29: 621303.350 ops/s
Iteration  30: 621388.453 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_isEmpty":
  622740.300 ±(99.9%) 1557.777 ops/s [Average]
  (min, avg, max) = (612601.032, 622740.300, 626706.817), stdev = 2331.607
  CI (99.9%): [621182.523, 624298.076] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score      Error  Units
TreeBagMultimapTest._Benchmark.benchmark_isEmpty  thrpt   30  622740.300 ± 1557.777  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_keyBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_keyBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1130963.325 ops/s
# Warmup Iteration   2: 2923115.710 ops/s
# Warmup Iteration   3: 2896448.387 ops/s
# Warmup Iteration   4: 2422658.448 ops/s
# Warmup Iteration   5: 2937273.274 ops/s
# Warmup Iteration   6: 2929852.713 ops/s
# Warmup Iteration   7: 2934087.570 ops/s
# Warmup Iteration   8: 2926389.460 ops/s
# Warmup Iteration   9: 2931874.339 ops/s
# Warmup Iteration  10: 2932339.864 ops/s
# Warmup Iteration  11: 2906455.794 ops/s
# Warmup Iteration  12: 2936658.958 ops/s
# Warmup Iteration  13: 2932791.015 ops/s
# Warmup Iteration  14: 2930344.281 ops/s
# Warmup Iteration  15: 2930997.658 ops/s
# Warmup Iteration  16: 2925449.361 ops/s
# Warmup Iteration  17: 2936596.542 ops/s
# Warmup Iteration  18: 2928217.916 ops/s
# Warmup Iteration  19: 2937692.438 ops/s
# Warmup Iteration  20: 2934548.412 ops/s
# Warmup Iteration  21: 2934286.155 ops/s
# Warmup Iteration  22: 2938659.029 ops/s
# Warmup Iteration  23: 2936049.813 ops/s
# Warmup Iteration  24: 2931500.217 ops/s
# Warmup Iteration  25: 2937020.282 ops/s
# Warmup Iteration  26: 2931566.779 ops/s
# Warmup Iteration  27: 2928910.555 ops/s
# Warmup Iteration  28: 2904585.437 ops/s
# Warmup Iteration  29: 2925241.429 ops/s
# Warmup Iteration  30: 2930831.597 ops/s
Iteration   1: 2930435.403 ops/s
Iteration   2: 2892550.375 ops/s
Iteration   3: 2942576.875 ops/s
Iteration   4: 2936222.934 ops/s
Iteration   5: 2933064.845 ops/s
Iteration   6: 2938070.381 ops/s
Iteration   7: 2932820.839 ops/s
Iteration   8: 2938781.155 ops/s
Iteration   9: 2938006.189 ops/s
Iteration  10: 2933501.378 ops/s
Iteration  11: 2929531.523 ops/s
Iteration  12: 2938402.976 ops/s
Iteration  13: 2935342.837 ops/s
Iteration  14: 2934115.795 ops/s
Iteration  15: 2934731.806 ops/s
Iteration  16: 2915282.182 ops/s
Iteration  17: 2932925.450 ops/s
Iteration  18: 2929251.041 ops/s
Iteration  19: 2937899.407 ops/s
Iteration  20: 2930969.330 ops/s
Iteration  21: 2932110.653 ops/s
Iteration  22: 2937790.150 ops/s
Iteration  23: 2936147.273 ops/s
Iteration  24: 2926513.578 ops/s
Iteration  25: 2936568.302 ops/s
Iteration  26: 2932623.705 ops/s
Iteration  27: 2930916.290 ops/s
Iteration  28: 2936383.673 ops/s
Iteration  29: 2934513.753 ops/s
Iteration  30: 2930662.083 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_keyBag":
  2932290.406 ±(99.9%) 5993.055 ops/s [Average]
  (min, avg, max) = (2892550.375, 2932290.406, 2942576.875), stdev = 8970.124
  CI (99.9%): [2926297.351, 2938283.461] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score      Error  Units
TreeBagMultimapTest._Benchmark.benchmark_keyBag  thrpt   30  2932290.406 ± 5993.055  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_keySet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_keySet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 255436.197 ops/s
# Warmup Iteration   2: 307834.668 ops/s
# Warmup Iteration   3: 387396.563 ops/s
# Warmup Iteration   4: 387514.068 ops/s
# Warmup Iteration   5: 384951.229 ops/s
# Warmup Iteration   6: 385466.705 ops/s
# Warmup Iteration   7: 382162.981 ops/s
# Warmup Iteration   8: 387905.027 ops/s
# Warmup Iteration   9: 389039.546 ops/s
# Warmup Iteration  10: 334998.548 ops/s
# Warmup Iteration  11: 387847.046 ops/s
# Warmup Iteration  12: 384838.602 ops/s
# Warmup Iteration  13: 389197.353 ops/s
# Warmup Iteration  14: 387227.504 ops/s
# Warmup Iteration  15: 388316.873 ops/s
# Warmup Iteration  16: 384620.793 ops/s
# Warmup Iteration  17: 403402.450 ops/s
# Warmup Iteration  18: 401337.118 ops/s
# Warmup Iteration  19: 402466.375 ops/s
# Warmup Iteration  20: 403739.275 ops/s
# Warmup Iteration  21: 403770.252 ops/s
# Warmup Iteration  22: 402294.788 ops/s
# Warmup Iteration  23: 404142.657 ops/s
# Warmup Iteration  24: 399230.914 ops/s
# Warmup Iteration  25: 402285.383 ops/s
# Warmup Iteration  26: 403530.728 ops/s
# Warmup Iteration  27: 403862.557 ops/s
# Warmup Iteration  28: 400620.650 ops/s
# Warmup Iteration  29: 403670.551 ops/s
# Warmup Iteration  30: 401674.247 ops/s
Iteration   1: 404237.129 ops/s
Iteration   2: 403251.434 ops/s
Iteration   3: 402770.275 ops/s
Iteration   4: 403548.080 ops/s
Iteration   5: 402985.988 ops/s
Iteration   6: 403649.120 ops/s
Iteration   7: 401457.573 ops/s
Iteration   8: 402664.949 ops/s
Iteration   9: 405371.149 ops/s
Iteration  10: 401634.716 ops/s
Iteration  11: 403719.485 ops/s
Iteration  12: 403261.754 ops/s
Iteration  13: 404620.165 ops/s
Iteration  14: 404523.577 ops/s
Iteration  15: 399984.693 ops/s
Iteration  16: 404074.265 ops/s
Iteration  17: 404049.834 ops/s
Iteration  18: 403969.899 ops/s
Iteration  19: 402590.877 ops/s
Iteration  20: 392172.683 ops/s
Iteration  21: 402491.554 ops/s
Iteration  22: 402776.085 ops/s
Iteration  23: 402009.628 ops/s
Iteration  24: 404331.231 ops/s
Iteration  25: 401221.865 ops/s
Iteration  26: 403001.763 ops/s
Iteration  27: 402228.101 ops/s
Iteration  28: 403180.348 ops/s
Iteration  29: 403602.617 ops/s
Iteration  30: 401086.342 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_keySet":
  402682.239 ±(99.9%) 1546.662 ops/s [Average]
  (min, avg, max) = (392172.683, 402682.239, 405371.149), stdev = 2314.970
  CI (99.9%): [401135.578, 404228.901] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score      Error  Units
TreeBagMultimapTest._Benchmark.benchmark_keySet  thrpt   30  402682.239 ± 1546.662  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_keyValuePairsView$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_keyValuePairsView

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 384778.256 ops/s
# Warmup Iteration   2: 765960.834 ops/s
# Warmup Iteration   3: 883980.560 ops/s
# Warmup Iteration   4: 887889.779 ops/s
# Warmup Iteration   5: 823783.505 ops/s
# Warmup Iteration   6: 797409.303 ops/s
# Warmup Iteration   7: 885971.468 ops/s
# Warmup Iteration   8: 884803.383 ops/s
# Warmup Iteration   9: 885590.453 ops/s
# Warmup Iteration  10: 883497.263 ops/s
# Warmup Iteration  11: 885733.793 ops/s
# Warmup Iteration  12: 885544.319 ops/s
# Warmup Iteration  13: 886382.358 ops/s
# Warmup Iteration  14: 884530.717 ops/s
# Warmup Iteration  15: 886400.085 ops/s
# Warmup Iteration  16: 884793.085 ops/s
# Warmup Iteration  17: 883803.971 ops/s
# Warmup Iteration  18: 883573.389 ops/s
# Warmup Iteration  19: 885058.068 ops/s
# Warmup Iteration  20: 884246.731 ops/s
# Warmup Iteration  21: 884515.879 ops/s
# Warmup Iteration  22: 883328.045 ops/s
# Warmup Iteration  23: 883591.822 ops/s
# Warmup Iteration  24: 884324.784 ops/s
# Warmup Iteration  25: 885180.568 ops/s
# Warmup Iteration  26: 882197.785 ops/s
# Warmup Iteration  27: 883251.371 ops/s
# Warmup Iteration  28: 883195.437 ops/s
# Warmup Iteration  29: 882393.213 ops/s
# Warmup Iteration  30: 882418.848 ops/s
Iteration   1: 880357.601 ops/s
Iteration   2: 881943.900 ops/s
Iteration   3: 883063.909 ops/s
Iteration   4: 879791.092 ops/s
Iteration   5: 882680.475 ops/s
Iteration   6: 879905.830 ops/s
Iteration   7: 880302.259 ops/s
Iteration   8: 883501.136 ops/s
Iteration   9: 881609.936 ops/s
Iteration  10: 883861.297 ops/s
Iteration  11: 884500.695 ops/s
Iteration  12: 879458.251 ops/s
Iteration  13: 882064.665 ops/s
Iteration  14: 886059.282 ops/s
Iteration  15: 883171.990 ops/s
Iteration  16: 884925.024 ops/s
Iteration  17: 880803.524 ops/s
Iteration  18: 883614.779 ops/s
Iteration  19: 886882.581 ops/s
Iteration  20: 884765.108 ops/s
Iteration  21: 882363.495 ops/s
Iteration  22: 885202.044 ops/s
Iteration  23: 882768.272 ops/s
Iteration  24: 885069.897 ops/s
Iteration  25: 883439.705 ops/s
Iteration  26: 883195.288 ops/s
Iteration  27: 886164.700 ops/s
Iteration  28: 882347.550 ops/s
Iteration  29: 882171.431 ops/s
Iteration  30: 884002.484 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_keyValuePairsView":
  882999.607 ±(99.9%) 1315.281 ops/s [Average]
  (min, avg, max) = (879458.251, 882999.607, 886882.581), stdev = 1968.651
  CI (99.9%): [881684.325, 884314.888] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
TreeBagMultimapTest._Benchmark.benchmark_keyValuePairsView  thrpt   30  882999.607 ± 1315.281  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_keysView$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_keysView

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 649251.190 ops/s
# Warmup Iteration   2: 1431739.767 ops/s
# Warmup Iteration   3: 1568660.526 ops/s
# Warmup Iteration   4: 1581182.619 ops/s
# Warmup Iteration   5: 1314711.381 ops/s
# Warmup Iteration   6: 1580593.034 ops/s
# Warmup Iteration   7: 1578931.379 ops/s
# Warmup Iteration   8: 1583622.207 ops/s
# Warmup Iteration   9: 1581006.812 ops/s
# Warmup Iteration  10: 1571889.690 ops/s
# Warmup Iteration  11: 1576478.393 ops/s
# Warmup Iteration  12: 1579385.111 ops/s
# Warmup Iteration  13: 1583634.346 ops/s
# Warmup Iteration  14: 1579960.560 ops/s
# Warmup Iteration  15: 1578700.481 ops/s
# Warmup Iteration  16: 1574193.124 ops/s
# Warmup Iteration  17: 1584327.837 ops/s
# Warmup Iteration  18: 1574936.521 ops/s
# Warmup Iteration  19: 1576610.236 ops/s
# Warmup Iteration  20: 1567402.521 ops/s
# Warmup Iteration  21: 1573783.337 ops/s
# Warmup Iteration  22: 1574446.894 ops/s
# Warmup Iteration  23: 1577351.740 ops/s
# Warmup Iteration  24: 1578729.846 ops/s
# Warmup Iteration  25: 1584153.854 ops/s
# Warmup Iteration  26: 1573997.956 ops/s
# Warmup Iteration  27: 1580364.360 ops/s
# Warmup Iteration  28: 1563524.041 ops/s
# Warmup Iteration  29: 1579835.947 ops/s
# Warmup Iteration  30: 1574974.976 ops/s
Iteration   1: 1585204.604 ops/s
Iteration   2: 1574065.809 ops/s
Iteration   3: 1576220.572 ops/s
Iteration   4: 1575260.198 ops/s
Iteration   5: 1589150.664 ops/s
Iteration   6: 1583571.463 ops/s
Iteration   7: 1577507.235 ops/s
Iteration   8: 1580613.909 ops/s
Iteration   9: 1577405.846 ops/s
Iteration  10: 1581372.906 ops/s
Iteration  11: 1577601.492 ops/s
Iteration  12: 1587018.456 ops/s
Iteration  13: 1581854.456 ops/s
Iteration  14: 1580983.032 ops/s
Iteration  15: 1586888.778 ops/s
Iteration  16: 1582727.380 ops/s
Iteration  17: 1587640.284 ops/s
Iteration  18: 1584246.115 ops/s
Iteration  19: 1572527.626 ops/s
Iteration  20: 1581225.875 ops/s
Iteration  21: 1572925.355 ops/s
Iteration  22: 1578945.310 ops/s
Iteration  23: 1587668.949 ops/s
Iteration  24: 1574502.477 ops/s
Iteration  25: 1575639.975 ops/s
Iteration  26: 1571500.821 ops/s
Iteration  27: 1577667.756 ops/s
Iteration  28: 1573023.333 ops/s
Iteration  29: 1587121.302 ops/s
Iteration  30: 1583661.659 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_keysView":
  1580191.455 ±(99.9%) 3525.249 ops/s [Average]
  (min, avg, max) = (1571500.821, 1580191.455, 1589150.664), stdev = 5276.426
  CI (99.9%): [1576666.206, 1583716.703] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
TreeBagMultimapTest._Benchmark.benchmark_keysView  thrpt   30  1580191.455 ± 3525.249  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_keysWithMultiValuesView$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_keysWithMultiValuesView

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 271892.685 ops/s
# Warmup Iteration   2: 603468.123 ops/s
# Warmup Iteration   3: 684925.099 ops/s
# Warmup Iteration   4: 689709.498 ops/s
# Warmup Iteration   5: 573003.890 ops/s
# Warmup Iteration   6: 689610.537 ops/s
# Warmup Iteration   7: 688534.705 ops/s
# Warmup Iteration   8: 689463.999 ops/s
# Warmup Iteration   9: 688366.354 ops/s
# Warmup Iteration  10: 690768.714 ops/s
# Warmup Iteration  11: 690880.355 ops/s
# Warmup Iteration  12: 689500.985 ops/s
# Warmup Iteration  13: 691128.742 ops/s
# Warmup Iteration  14: 690329.959 ops/s
# Warmup Iteration  15: 690641.729 ops/s
# Warmup Iteration  16: 688523.635 ops/s
# Warmup Iteration  17: 690433.901 ops/s
# Warmup Iteration  18: 689646.593 ops/s
# Warmup Iteration  19: 687938.600 ops/s
# Warmup Iteration  20: 690324.889 ops/s
# Warmup Iteration  21: 689701.741 ops/s
# Warmup Iteration  22: 690191.882 ops/s
# Warmup Iteration  23: 683272.046 ops/s
# Warmup Iteration  24: 686845.075 ops/s
# Warmup Iteration  25: 681222.261 ops/s
# Warmup Iteration  26: 689757.977 ops/s
# Warmup Iteration  27: 690698.004 ops/s
# Warmup Iteration  28: 689110.443 ops/s
# Warmup Iteration  29: 690298.325 ops/s
# Warmup Iteration  30: 690574.465 ops/s
Iteration   1: 690965.618 ops/s
Iteration   2: 689787.940 ops/s
Iteration   3: 689126.350 ops/s
Iteration   4: 691402.889 ops/s
Iteration   5: 690820.664 ops/s
Iteration   6: 691336.766 ops/s
Iteration   7: 691051.867 ops/s
Iteration   8: 691433.600 ops/s
Iteration   9: 689936.604 ops/s
Iteration  10: 691045.293 ops/s
Iteration  11: 692015.589 ops/s
Iteration  12: 688158.796 ops/s
Iteration  13: 689471.907 ops/s
Iteration  14: 691392.395 ops/s
Iteration  15: 691396.152 ops/s
Iteration  16: 690360.848 ops/s
Iteration  17: 689899.157 ops/s
Iteration  18: 690876.302 ops/s
Iteration  19: 689424.719 ops/s
Iteration  20: 690612.272 ops/s
Iteration  21: 691517.933 ops/s
Iteration  22: 691524.428 ops/s
Iteration  23: 689285.111 ops/s
Iteration  24: 689050.572 ops/s
Iteration  25: 690290.799 ops/s
Iteration  26: 689084.432 ops/s
Iteration  27: 688309.225 ops/s
Iteration  28: 690522.430 ops/s
Iteration  29: 690355.616 ops/s
Iteration  30: 689902.901 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_keysWithMultiValuesView":
  690345.306 ±(99.9%) 683.091 ops/s [Average]
  (min, avg, max) = (688158.796, 690345.306, 692015.589), stdev = 1022.419
  CI (99.9%): [689662.215, 691028.397] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score     Error  Units
TreeBagMultimapTest._Benchmark.benchmark_keysWithMultiValuesView  thrpt   30  690345.306 ± 683.091  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_multiValuesView$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_multiValuesView

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 536923.683 ops/s
# Warmup Iteration   2: 1205866.163 ops/s
# Warmup Iteration   3: 1321576.931 ops/s
# Warmup Iteration   4: 1332128.259 ops/s
# Warmup Iteration   5: 1103058.488 ops/s
# Warmup Iteration   6: 1332712.286 ops/s
# Warmup Iteration   7: 1332312.343 ops/s
# Warmup Iteration   8: 1331894.864 ops/s
# Warmup Iteration   9: 1330641.958 ops/s
# Warmup Iteration  10: 1331843.069 ops/s
# Warmup Iteration  11: 1333404.172 ops/s
# Warmup Iteration  12: 1329782.939 ops/s
# Warmup Iteration  13: 1330796.945 ops/s
# Warmup Iteration  14: 1331355.085 ops/s
# Warmup Iteration  15: 1333725.711 ops/s
# Warmup Iteration  16: 1332143.683 ops/s
# Warmup Iteration  17: 1333579.962 ops/s
# Warmup Iteration  18: 1331375.495 ops/s
# Warmup Iteration  19: 1328111.611 ops/s
# Warmup Iteration  20: 1327996.598 ops/s
# Warmup Iteration  21: 1330954.082 ops/s
# Warmup Iteration  22: 1330958.988 ops/s
# Warmup Iteration  23: 1319040.605 ops/s
# Warmup Iteration  24: 1330767.725 ops/s
# Warmup Iteration  25: 1332055.390 ops/s
# Warmup Iteration  26: 1331595.827 ops/s
# Warmup Iteration  27: 1331364.823 ops/s
# Warmup Iteration  28: 1331887.164 ops/s
# Warmup Iteration  29: 1332884.521 ops/s
# Warmup Iteration  30: 1331556.559 ops/s
Iteration   1: 1328704.783 ops/s
Iteration   2: 1332580.176 ops/s
Iteration   3: 1329461.355 ops/s
Iteration   4: 1330701.770 ops/s
Iteration   5: 1328552.060 ops/s
Iteration   6: 1335324.074 ops/s
Iteration   7: 1332082.684 ops/s
Iteration   8: 1330929.278 ops/s
Iteration   9: 1329539.923 ops/s
Iteration  10: 1331042.216 ops/s
Iteration  11: 1330291.974 ops/s
Iteration  12: 1329211.100 ops/s
Iteration  13: 1328433.055 ops/s
Iteration  14: 1333562.809 ops/s
Iteration  15: 1331251.504 ops/s
Iteration  16: 1334537.638 ops/s
Iteration  17: 1333227.658 ops/s
Iteration  18: 1328711.970 ops/s
Iteration  19: 1333108.331 ops/s
Iteration  20: 1331939.497 ops/s
Iteration  21: 1330046.059 ops/s
Iteration  22: 1331679.673 ops/s
Iteration  23: 1335337.005 ops/s
Iteration  24: 1333592.126 ops/s
Iteration  25: 1330505.541 ops/s
Iteration  26: 1331703.249 ops/s
Iteration  27: 1332831.394 ops/s
Iteration  28: 1332640.610 ops/s
Iteration  29: 1333039.566 ops/s
Iteration  30: 1331389.330 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_multiValuesView":
  1331531.947 ±(99.9%) 1317.035 ops/s [Average]
  (min, avg, max) = (1328433.055, 1331531.947, 1335337.005), stdev = 1971.276
  CI (99.9%): [1330214.912, 1332848.982] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
TreeBagMultimapTest._Benchmark.benchmark_multiValuesView  thrpt   30  1331531.947 ± 1317.035  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_newEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_newEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 660144.673 ops/s
# Warmup Iteration   2: 1799023.826 ops/s
# Warmup Iteration   3: 1726299.374 ops/s
# Warmup Iteration   4: 1597884.180 ops/s
# Warmup Iteration   5: 1813657.336 ops/s
# Warmup Iteration   6: 1806686.980 ops/s
# Warmup Iteration   7: 1807391.041 ops/s
# Warmup Iteration   8: 1806329.993 ops/s
# Warmup Iteration   9: 1813056.220 ops/s
# Warmup Iteration  10: 1808059.617 ops/s
# Warmup Iteration  11: 1797914.982 ops/s
# Warmup Iteration  12: 1792931.570 ops/s
# Warmup Iteration  13: 1804684.274 ops/s
# Warmup Iteration  14: 1808232.864 ops/s
# Warmup Iteration  15: 1808420.435 ops/s
# Warmup Iteration  16: 1802960.537 ops/s
# Warmup Iteration  17: 1799180.087 ops/s
# Warmup Iteration  18: 1805611.911 ops/s
# Warmup Iteration  19: 1805833.479 ops/s
# Warmup Iteration  20: 1803296.392 ops/s
# Warmup Iteration  21: 1814339.218 ops/s
# Warmup Iteration  22: 1807114.631 ops/s
# Warmup Iteration  23: 1816525.743 ops/s
# Warmup Iteration  24: 1810540.968 ops/s
# Warmup Iteration  25: 1811537.823 ops/s
# Warmup Iteration  26: 1807042.949 ops/s
# Warmup Iteration  27: 1809777.474 ops/s
# Warmup Iteration  28: 1803941.463 ops/s
# Warmup Iteration  29: 1807035.672 ops/s
# Warmup Iteration  30: 1807411.096 ops/s
Iteration   1: 1809230.650 ops/s
Iteration   2: 1807111.068 ops/s
Iteration   3: 1812432.279 ops/s
Iteration   4: 1807877.328 ops/s
Iteration   5: 1812455.363 ops/s
Iteration   6: 1799828.460 ops/s
Iteration   7: 1815986.520 ops/s
Iteration   8: 1812198.494 ops/s
Iteration   9: 1802018.606 ops/s
Iteration  10: 1799636.023 ops/s
Iteration  11: 1811165.486 ops/s
Iteration  12: 1810362.793 ops/s
Iteration  13: 1808012.982 ops/s
Iteration  14: 1787916.719 ops/s
Iteration  15: 1815086.769 ops/s
Iteration  16: 1811520.566 ops/s
Iteration  17: 1782121.487 ops/s
Iteration  18: 1806865.295 ops/s
Iteration  19: 1805295.140 ops/s
Iteration  20: 1796851.843 ops/s
Iteration  21: 1796795.924 ops/s
Iteration  22: 1815940.852 ops/s
Iteration  23: 1809322.648 ops/s
Iteration  24: 1806325.859 ops/s
Iteration  25: 1809102.989 ops/s
Iteration  26: 1810209.622 ops/s
Iteration  27: 1807672.385 ops/s
Iteration  28: 1814842.800 ops/s
Iteration  29: 1807025.436 ops/s
Iteration  30: 1803963.863 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_newEmpty":
  1806505.875 ±(99.9%) 5228.904 ops/s [Average]
  (min, avg, max) = (1782121.487, 1806505.875, 1815986.520), stdev = 7826.378
  CI (99.9%): [1801276.971, 1811734.779] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
TreeBagMultimapTest._Benchmark.benchmark_newEmpty  thrpt   30  1806505.875 ± 5228.904  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_newMultimapFromPairs$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_newMultimapFromPairs

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 302643.450 ops/s
# Warmup Iteration   2: 686739.164 ops/s
# Warmup Iteration   3: 722713.096 ops/s
# Warmup Iteration   4: 637178.896 ops/s
# Warmup Iteration   5: 695450.826 ops/s
# Warmup Iteration   6: 720599.989 ops/s
# Warmup Iteration   7: 720969.162 ops/s
# Warmup Iteration   8: 720101.871 ops/s
# Warmup Iteration   9: 713495.426 ops/s
# Warmup Iteration  10: 722879.705 ops/s
# Warmup Iteration  11: 721606.735 ops/s
# Warmup Iteration  12: 722339.088 ops/s
# Warmup Iteration  13: 723599.286 ops/s
# Warmup Iteration  14: 721621.049 ops/s
# Warmup Iteration  15: 721566.858 ops/s
# Warmup Iteration  16: 722547.297 ops/s
# Warmup Iteration  17: 721841.683 ops/s
# Warmup Iteration  18: 723464.277 ops/s
# Warmup Iteration  19: 720885.835 ops/s
# Warmup Iteration  20: 720955.755 ops/s
# Warmup Iteration  21: 720865.685 ops/s
# Warmup Iteration  22: 722407.129 ops/s
# Warmup Iteration  23: 723339.781 ops/s
# Warmup Iteration  24: 722939.791 ops/s
# Warmup Iteration  25: 721590.591 ops/s
# Warmup Iteration  26: 722730.092 ops/s
# Warmup Iteration  27: 722205.769 ops/s
# Warmup Iteration  28: 723755.232 ops/s
# Warmup Iteration  29: 721534.161 ops/s
# Warmup Iteration  30: 722824.887 ops/s
Iteration   1: 725040.587 ops/s
Iteration   2: 722231.524 ops/s
Iteration   3: 720332.177 ops/s
Iteration   4: 724650.102 ops/s
Iteration   5: 722915.641 ops/s
Iteration   6: 722923.869 ops/s
Iteration   7: 721073.806 ops/s
Iteration   8: 720222.667 ops/s
Iteration   9: 721582.575 ops/s
Iteration  10: 720761.065 ops/s
Iteration  11: 723795.535 ops/s
Iteration  12: 721386.576 ops/s
Iteration  13: 720949.557 ops/s
Iteration  14: 723139.885 ops/s
Iteration  15: 721066.271 ops/s
Iteration  16: 721207.158 ops/s
Iteration  17: 720984.454 ops/s
Iteration  18: 718971.204 ops/s
Iteration  19: 718015.181 ops/s
Iteration  20: 721071.023 ops/s
Iteration  21: 719121.555 ops/s
Iteration  22: 718376.031 ops/s
Iteration  23: 717725.674 ops/s
Iteration  24: 718054.149 ops/s
Iteration  25: 720822.183 ops/s
Iteration  26: 719720.314 ops/s
Iteration  27: 718382.395 ops/s
Iteration  28: 719889.822 ops/s
Iteration  29: 718112.153 ops/s
Iteration  30: 718805.346 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_newMultimapFromPairs":
  720711.016 ±(99.9%) 1335.250 ops/s [Average]
  (min, avg, max) = (717725.674, 720711.016, 725040.587), stdev = 1998.539
  CI (99.9%): [719375.766, 722046.266] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
TreeBagMultimapTest._Benchmark.benchmark_newMultimapFromPairs  thrpt   30  720711.016 ± 1335.250  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_notEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_notEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3085277.648 ops/s
# Warmup Iteration   2: 5511410.044 ops/s
# Warmup Iteration   3: 6575265.317 ops/s
# Warmup Iteration   4: 6543272.370 ops/s
# Warmup Iteration   5: 6583883.798 ops/s
# Warmup Iteration   6: 6598320.301 ops/s
# Warmup Iteration   7: 6631271.486 ops/s
# Warmup Iteration   8: 6641900.303 ops/s
# Warmup Iteration   9: 6645671.322 ops/s
# Warmup Iteration  10: 6642338.818 ops/s
# Warmup Iteration  11: 6557243.650 ops/s
# Warmup Iteration  12: 6560494.534 ops/s
# Warmup Iteration  13: 6556493.137 ops/s
# Warmup Iteration  14: 6615884.146 ops/s
# Warmup Iteration  15: 6624257.975 ops/s
# Warmup Iteration  16: 6591502.698 ops/s
# Warmup Iteration  17: 6628548.696 ops/s
# Warmup Iteration  18: 6605423.738 ops/s
# Warmup Iteration  19: 6587659.664 ops/s
# Warmup Iteration  20: 6632923.197 ops/s
# Warmup Iteration  21: 6548350.220 ops/s
# Warmup Iteration  22: 6579816.352 ops/s
# Warmup Iteration  23: 6595279.841 ops/s
# Warmup Iteration  24: 6524462.882 ops/s
# Warmup Iteration  25: 6533523.985 ops/s
# Warmup Iteration  26: 6570481.409 ops/s
# Warmup Iteration  27: 6594828.868 ops/s
# Warmup Iteration  28: 6577200.194 ops/s
# Warmup Iteration  29: 6511864.913 ops/s
# Warmup Iteration  30: 6648349.138 ops/s
Iteration   1: 6521410.140 ops/s
Iteration   2: 6573268.892 ops/s
Iteration   3: 6585297.461 ops/s
Iteration   4: 6589081.518 ops/s
Iteration   5: 6567256.081 ops/s
Iteration   6: 6648085.539 ops/s
Iteration   7: 6592152.569 ops/s
Iteration   8: 6641900.533 ops/s
Iteration   9: 6631452.849 ops/s
Iteration  10: 6567087.375 ops/s
Iteration  11: 6538589.037 ops/s
Iteration  12: 6584544.265 ops/s
Iteration  13: 6553348.142 ops/s
Iteration  14: 6564938.325 ops/s
Iteration  15: 6622225.787 ops/s
Iteration  16: 6652327.864 ops/s
Iteration  17: 6620156.849 ops/s
Iteration  18: 6693482.854 ops/s
Iteration  19: 6591192.012 ops/s
Iteration  20: 6558657.312 ops/s
Iteration  21: 6591506.314 ops/s
Iteration  22: 6577707.314 ops/s
Iteration  23: 6580448.946 ops/s
Iteration  24: 6591694.765 ops/s
Iteration  25: 6623850.535 ops/s
Iteration  26: 6598726.612 ops/s
Iteration  27: 6557461.066 ops/s
Iteration  28: 6610576.189 ops/s
Iteration  29: 6546047.238 ops/s
Iteration  30: 6577585.942 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_notEmpty":
  6591735.344 ±(99.9%) 25108.175 ops/s [Average]
  (min, avg, max) = (6521410.140, 6591735.344, 6693482.854), stdev = 37580.737
  CI (99.9%): [6566627.169, 6616843.519] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
TreeBagMultimapTest._Benchmark.benchmark_notEmpty  thrpt   30  6591735.344 ± 25108.175  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_putAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_putAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 176950.123 ops/s
# Warmup Iteration   2: 402839.670 ops/s
# Warmup Iteration   3: 421886.899 ops/s
# Warmup Iteration   4: 415042.435 ops/s
# Warmup Iteration   5: 369310.582 ops/s
# Warmup Iteration   6: 425781.860 ops/s
# Warmup Iteration   7: 426650.920 ops/s
# Warmup Iteration   8: 426615.663 ops/s
# Warmup Iteration   9: 426243.410 ops/s
# Warmup Iteration  10: 426514.727 ops/s
# Warmup Iteration  11: 425846.668 ops/s
# Warmup Iteration  12: 426614.239 ops/s
# Warmup Iteration  13: 426472.605 ops/s
# Warmup Iteration  14: 426399.211 ops/s
# Warmup Iteration  15: 427140.299 ops/s
# Warmup Iteration  16: 426246.896 ops/s
# Warmup Iteration  17: 424921.042 ops/s
# Warmup Iteration  18: 426457.920 ops/s
# Warmup Iteration  19: 426164.901 ops/s
# Warmup Iteration  20: 426304.405 ops/s
# Warmup Iteration  21: 426423.931 ops/s
# Warmup Iteration  22: 427027.862 ops/s
# Warmup Iteration  23: 425452.870 ops/s
# Warmup Iteration  24: 426106.803 ops/s
# Warmup Iteration  25: 425903.511 ops/s
# Warmup Iteration  26: 425841.664 ops/s
# Warmup Iteration  27: 426195.428 ops/s
# Warmup Iteration  28: 425038.257 ops/s
# Warmup Iteration  29: 426901.849 ops/s
# Warmup Iteration  30: 426353.291 ops/s
Iteration   1: 427514.881 ops/s
Iteration   2: 426620.314 ops/s
Iteration   3: 425742.304 ops/s
Iteration   4: 424467.868 ops/s
Iteration   5: 422307.593 ops/s
Iteration   6: 425810.979 ops/s
Iteration   7: 424175.953 ops/s
Iteration   8: 428022.741 ops/s
Iteration   9: 426809.845 ops/s
Iteration  10: 426260.909 ops/s
Iteration  11: 426366.894 ops/s
Iteration  12: 427861.778 ops/s
Iteration  13: 426394.052 ops/s
Iteration  14: 427076.464 ops/s
Iteration  15: 424411.448 ops/s
Iteration  16: 422352.196 ops/s
Iteration  17: 425299.938 ops/s
Iteration  18: 424565.094 ops/s
Iteration  19: 426014.341 ops/s
Iteration  20: 424452.693 ops/s
Iteration  21: 422238.085 ops/s
Iteration  22: 423327.933 ops/s
Iteration  23: 424524.369 ops/s
Iteration  24: 424350.710 ops/s
Iteration  25: 424429.343 ops/s
Iteration  26: 422509.961 ops/s
Iteration  27: 424387.381 ops/s
Iteration  28: 425001.312 ops/s
Iteration  29: 423681.260 ops/s
Iteration  30: 423642.658 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_putAll":
  425020.710 ±(99.9%) 1104.058 ops/s [Average]
  (min, avg, max) = (422238.085, 425020.710, 428022.741), stdev = 1652.502
  CI (99.9%): [423916.652, 426124.767] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score      Error  Units
TreeBagMultimapTest._Benchmark.benchmark_putAll  thrpt   30  425020.710 ± 1104.058  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_putAllFromCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_putAllFromCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 224784.227 ops/s
# Warmup Iteration   2: 457973.445 ops/s
# Warmup Iteration   3: 483753.501 ops/s
# Warmup Iteration   4: 487773.306 ops/s
# Warmup Iteration   5: 416134.810 ops/s
# Warmup Iteration   6: 488811.713 ops/s
# Warmup Iteration   7: 488602.059 ops/s
# Warmup Iteration   8: 484487.608 ops/s
# Warmup Iteration   9: 488446.422 ops/s
# Warmup Iteration  10: 487753.088 ops/s
# Warmup Iteration  11: 484915.332 ops/s
# Warmup Iteration  12: 487247.120 ops/s
# Warmup Iteration  13: 488786.276 ops/s
# Warmup Iteration  14: 488289.132 ops/s
# Warmup Iteration  15: 488064.709 ops/s
# Warmup Iteration  16: 488183.930 ops/s
# Warmup Iteration  17: 484225.983 ops/s
# Warmup Iteration  18: 488211.538 ops/s
# Warmup Iteration  19: 486584.070 ops/s
# Warmup Iteration  20: 487232.315 ops/s
# Warmup Iteration  21: 485613.928 ops/s
# Warmup Iteration  22: 488250.650 ops/s
# Warmup Iteration  23: 488645.492 ops/s
# Warmup Iteration  24: 484506.798 ops/s
# Warmup Iteration  25: 489549.024 ops/s
# Warmup Iteration  26: 485050.418 ops/s
# Warmup Iteration  27: 490871.652 ops/s
# Warmup Iteration  28: 487308.646 ops/s
# Warmup Iteration  29: 483729.243 ops/s
# Warmup Iteration  30: 487279.065 ops/s
Iteration   1: 480870.505 ops/s
Iteration   2: 484269.887 ops/s
Iteration   3: 488364.718 ops/s
Iteration   4: 492511.162 ops/s
Iteration   5: 488544.605 ops/s
Iteration   6: 487869.085 ops/s
Iteration   7: 488298.643 ops/s
Iteration   8: 484983.283 ops/s
Iteration   9: 482786.284 ops/s
Iteration  10: 477761.444 ops/s
Iteration  11: 478574.352 ops/s
Iteration  12: 484203.651 ops/s
Iteration  13: 482973.602 ops/s
Iteration  14: 485909.832 ops/s
Iteration  15: 484494.776 ops/s
Iteration  16: 489689.339 ops/s
Iteration  17: 486983.851 ops/s
Iteration  18: 488030.276 ops/s
Iteration  19: 487180.640 ops/s
Iteration  20: 484727.447 ops/s
Iteration  21: 486564.927 ops/s
Iteration  22: 486876.418 ops/s
Iteration  23: 486931.324 ops/s
Iteration  24: 482874.435 ops/s
Iteration  25: 490003.874 ops/s
Iteration  26: 481263.569 ops/s
Iteration  27: 486042.883 ops/s
Iteration  28: 487130.392 ops/s
Iteration  29: 483756.510 ops/s
Iteration  30: 489805.756 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_putAllFromCollection":
  485675.916 ±(99.9%) 2257.612 ops/s [Average]
  (min, avg, max) = (477761.444, 485675.916, 492511.162), stdev = 3379.087
  CI (99.9%): [483418.304, 487933.528] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
TreeBagMultimapTest._Benchmark.benchmark_putAllFromCollection  thrpt   30  485675.916 ± 2257.612  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_putAllFromIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_putAllFromIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 368809.362 ops/s
# Warmup Iteration   2: 743767.640 ops/s
# Warmup Iteration   3: 820686.594 ops/s
# Warmup Iteration   4: 825692.730 ops/s
# Warmup Iteration   5: 689555.984 ops/s
# Warmup Iteration   6: 826415.660 ops/s
# Warmup Iteration   7: 825801.978 ops/s
# Warmup Iteration   8: 823528.095 ops/s
# Warmup Iteration   9: 826949.368 ops/s
# Warmup Iteration  10: 824977.187 ops/s
# Warmup Iteration  11: 824420.885 ops/s
# Warmup Iteration  12: 826257.182 ops/s
# Warmup Iteration  13: 826856.697 ops/s
# Warmup Iteration  14: 825418.615 ops/s
# Warmup Iteration  15: 824385.914 ops/s
# Warmup Iteration  16: 827038.975 ops/s
# Warmup Iteration  17: 822983.198 ops/s
# Warmup Iteration  18: 826156.092 ops/s
# Warmup Iteration  19: 826871.333 ops/s
# Warmup Iteration  20: 826421.216 ops/s
# Warmup Iteration  21: 827174.437 ops/s
# Warmup Iteration  22: 825961.044 ops/s
# Warmup Iteration  23: 826617.599 ops/s
# Warmup Iteration  24: 826722.489 ops/s
# Warmup Iteration  25: 827100.830 ops/s
# Warmup Iteration  26: 825446.458 ops/s
# Warmup Iteration  27: 824429.989 ops/s
# Warmup Iteration  28: 824636.711 ops/s
# Warmup Iteration  29: 825245.263 ops/s
# Warmup Iteration  30: 824719.934 ops/s
Iteration   1: 824620.841 ops/s
Iteration   2: 825169.488 ops/s
Iteration   3: 826828.573 ops/s
Iteration   4: 823705.195 ops/s
Iteration   5: 827023.537 ops/s
Iteration   6: 826979.819 ops/s
Iteration   7: 822519.124 ops/s
Iteration   8: 824422.895 ops/s
Iteration   9: 826441.191 ops/s
Iteration  10: 825152.132 ops/s
Iteration  11: 825851.531 ops/s
Iteration  12: 826463.871 ops/s
Iteration  13: 825908.104 ops/s
Iteration  14: 824556.652 ops/s
Iteration  15: 827216.642 ops/s
Iteration  16: 823064.862 ops/s
Iteration  17: 824052.245 ops/s
Iteration  18: 824970.541 ops/s
Iteration  19: 826349.496 ops/s
Iteration  20: 824739.276 ops/s
Iteration  21: 826927.842 ops/s
Iteration  22: 823588.711 ops/s
Iteration  23: 824322.868 ops/s
Iteration  24: 822830.019 ops/s
Iteration  25: 824884.564 ops/s
Iteration  26: 825258.228 ops/s
Iteration  27: 823989.563 ops/s
Iteration  28: 826454.750 ops/s
Iteration  29: 825158.640 ops/s
Iteration  30: 826735.002 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_putAllFromIterable":
  825206.207 ±(99.9%) 903.069 ops/s [Average]
  (min, avg, max) = (822519.124, 825206.207, 827216.642), stdev = 1351.671
  CI (99.9%): [824303.138, 826109.276] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score     Error  Units
TreeBagMultimapTest._Benchmark.benchmark_putAllFromIterable  thrpt   30  825206.207 ± 903.069  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_putAllPairs$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_putAllPairs

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 74322.497 ops/s
# Warmup Iteration   2: 151051.207 ops/s
# Warmup Iteration   3: 161859.964 ops/s
# Warmup Iteration   4: 163265.221 ops/s
# Warmup Iteration   5: 139157.569 ops/s
# Warmup Iteration   6: 163774.714 ops/s
# Warmup Iteration   7: 163575.097 ops/s
# Warmup Iteration   8: 163452.323 ops/s
# Warmup Iteration   9: 163487.084 ops/s
# Warmup Iteration  10: 163526.419 ops/s
# Warmup Iteration  11: 163979.287 ops/s
# Warmup Iteration  12: 163773.044 ops/s
# Warmup Iteration  13: 163159.402 ops/s
# Warmup Iteration  14: 163540.520 ops/s
# Warmup Iteration  15: 163390.674 ops/s
# Warmup Iteration  16: 163431.999 ops/s
# Warmup Iteration  17: 163298.555 ops/s
# Warmup Iteration  18: 163769.521 ops/s
# Warmup Iteration  19: 163650.474 ops/s
# Warmup Iteration  20: 163452.562 ops/s
# Warmup Iteration  21: 163818.490 ops/s
# Warmup Iteration  22: 162888.802 ops/s
# Warmup Iteration  23: 163609.005 ops/s
# Warmup Iteration  24: 162748.472 ops/s
# Warmup Iteration  25: 163687.338 ops/s
# Warmup Iteration  26: 163220.685 ops/s
# Warmup Iteration  27: 163271.451 ops/s
# Warmup Iteration  28: 162840.495 ops/s
# Warmup Iteration  29: 163457.063 ops/s
# Warmup Iteration  30: 163438.836 ops/s
Iteration   1: 163476.361 ops/s
Iteration   2: 163718.714 ops/s
Iteration   3: 163278.799 ops/s
Iteration   4: 163754.421 ops/s
Iteration   5: 163246.567 ops/s
Iteration   6: 163676.505 ops/s
Iteration   7: 163308.974 ops/s
Iteration   8: 163519.229 ops/s
Iteration   9: 163025.638 ops/s
Iteration  10: 163514.906 ops/s
Iteration  11: 162992.664 ops/s
Iteration  12: 163820.037 ops/s
Iteration  13: 163294.901 ops/s
Iteration  14: 163319.373 ops/s
Iteration  15: 163264.871 ops/s
Iteration  16: 163786.055 ops/s
Iteration  17: 163417.262 ops/s
Iteration  18: 163300.458 ops/s
Iteration  19: 163346.901 ops/s
Iteration  20: 163272.875 ops/s
Iteration  21: 163205.487 ops/s
Iteration  22: 163833.500 ops/s
Iteration  23: 163677.262 ops/s
Iteration  24: 163699.745 ops/s
Iteration  25: 163511.697 ops/s
Iteration  26: 163750.401 ops/s
Iteration  27: 163773.215 ops/s
Iteration  28: 162933.892 ops/s
Iteration  29: 163555.457 ops/s
Iteration  30: 163267.636 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_putAllPairs":
  163451.460 ±(99.9%) 172.200 ops/s [Average]
  (min, avg, max) = (162933.892, 163451.460, 163833.500), stdev = 257.740
  CI (99.9%): [163279.260, 163623.660] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score     Error  Units
TreeBagMultimapTest._Benchmark.benchmark_putAllPairs  thrpt   30  163451.460 ± 172.200  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_putAndGrowMultimap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_putAndGrowMultimap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4521523.818 ops/s
# Warmup Iteration   2: 9567818.049 ops/s
# Warmup Iteration   3: 8230132.411 ops/s
# Warmup Iteration   4: 9694329.343 ops/s
# Warmup Iteration   5: 9731201.510 ops/s
# Warmup Iteration   6: 9750811.079 ops/s
# Warmup Iteration   7: 9692824.232 ops/s
# Warmup Iteration   8: 9707219.719 ops/s
# Warmup Iteration   9: 9692109.517 ops/s
# Warmup Iteration  10: 9717246.976 ops/s
# Warmup Iteration  11: 9659193.962 ops/s
# Warmup Iteration  12: 9697520.121 ops/s
# Warmup Iteration  13: 9711175.814 ops/s
# Warmup Iteration  14: 9698831.886 ops/s
# Warmup Iteration  15: 9684190.842 ops/s
# Warmup Iteration  16: 9663746.159 ops/s
# Warmup Iteration  17: 9747601.537 ops/s
# Warmup Iteration  18: 9648200.450 ops/s
# Warmup Iteration  19: 9721530.571 ops/s
# Warmup Iteration  20: 9699234.798 ops/s
# Warmup Iteration  21: 9683073.193 ops/s
# Warmup Iteration  22: 9682013.850 ops/s
# Warmup Iteration  23: 9679266.994 ops/s
# Warmup Iteration  24: 9702140.201 ops/s
# Warmup Iteration  25: 9751548.794 ops/s
# Warmup Iteration  26: 9672928.024 ops/s
# Warmup Iteration  27: 9673867.122 ops/s
# Warmup Iteration  28: 9649201.092 ops/s
# Warmup Iteration  29: 9728858.618 ops/s
# Warmup Iteration  30: 9737560.178 ops/s
Iteration   1: 9600541.813 ops/s
Iteration   2: 9655131.607 ops/s
Iteration   3: 9700576.578 ops/s
Iteration   4: 9666258.774 ops/s
Iteration   5: 9676308.016 ops/s
Iteration   6: 9701444.274 ops/s
Iteration   7: 9757584.769 ops/s
Iteration   8: 9714218.596 ops/s
Iteration   9: 9692379.651 ops/s
Iteration  10: 9678384.231 ops/s
Iteration  11: 9588500.615 ops/s
Iteration  12: 9669105.981 ops/s
Iteration  13: 9763389.693 ops/s
Iteration  14: 9759182.893 ops/s
Iteration  15: 9768479.174 ops/s
Iteration  16: 9733265.983 ops/s
Iteration  17: 9744287.115 ops/s
Iteration  18: 9732938.308 ops/s
Iteration  19: 9680858.124 ops/s
Iteration  20: 9754434.372 ops/s
Iteration  21: 9711609.091 ops/s
Iteration  22: 9538475.714 ops/s
Iteration  23: 9695108.637 ops/s
Iteration  24: 9723565.009 ops/s
Iteration  25: 9722965.297 ops/s
Iteration  26: 9707520.151 ops/s
Iteration  27: 9690788.443 ops/s
Iteration  28: 9704322.455 ops/s
Iteration  29: 9646012.897 ops/s
Iteration  30: 9671959.560 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_putAndGrowMultimap":
  9694986.594 ±(99.9%) 35346.346 ops/s [Average]
  (min, avg, max) = (9538475.714, 9694986.594, 9768479.174), stdev = 52904.750
  CI (99.9%): [9659640.248, 9730332.940] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
TreeBagMultimapTest._Benchmark.benchmark_putAndGrowMultimap  thrpt   30  9694986.594 ± 35346.346  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_put_createCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_put_createCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2270436.194 ops/s
# Warmup Iteration   2: 4675201.858 ops/s
# Warmup Iteration   3: 4121127.707 ops/s
# Warmup Iteration   4: 4795868.412 ops/s
# Warmup Iteration   5: 4808222.921 ops/s
# Warmup Iteration   6: 4764563.365 ops/s
# Warmup Iteration   7: 4782271.819 ops/s
# Warmup Iteration   8: 4793012.240 ops/s
# Warmup Iteration   9: 4770221.984 ops/s
# Warmup Iteration  10: 4748145.018 ops/s
# Warmup Iteration  11: 4779632.483 ops/s
# Warmup Iteration  12: 4780093.228 ops/s
# Warmup Iteration  13: 4763882.573 ops/s
# Warmup Iteration  14: 4765507.548 ops/s
# Warmup Iteration  15: 4749995.013 ops/s
# Warmup Iteration  16: 4754978.962 ops/s
# Warmup Iteration  17: 4714953.418 ops/s
# Warmup Iteration  18: 4678262.906 ops/s
# Warmup Iteration  19: 4708428.982 ops/s
# Warmup Iteration  20: 4729843.391 ops/s
# Warmup Iteration  21: 4732584.925 ops/s
# Warmup Iteration  22: 4694454.326 ops/s
# Warmup Iteration  23: 4726303.932 ops/s
# Warmup Iteration  24: 4671146.715 ops/s
# Warmup Iteration  25: 4702528.717 ops/s
# Warmup Iteration  26: 4682628.020 ops/s
# Warmup Iteration  27: 4712227.635 ops/s
# Warmup Iteration  28: 4680090.883 ops/s
# Warmup Iteration  29: 4687220.465 ops/s
# Warmup Iteration  30: 4711937.929 ops/s
Iteration   1: 4741582.149 ops/s
Iteration   2: 4680581.916 ops/s
Iteration   3: 4632014.890 ops/s
Iteration   4: 4679667.299 ops/s
Iteration   5: 4671114.665 ops/s
Iteration   6: 4655926.443 ops/s
Iteration   7: 4684506.353 ops/s
Iteration   8: 4706046.911 ops/s
Iteration   9: 4705790.654 ops/s
Iteration  10: 4673015.624 ops/s
Iteration  11: 4695897.693 ops/s
Iteration  12: 4723589.142 ops/s
Iteration  13: 4711993.167 ops/s
Iteration  14: 4728460.839 ops/s
Iteration  15: 4676064.058 ops/s
Iteration  16: 4673713.684 ops/s
Iteration  17: 4684781.548 ops/s
Iteration  18: 4708199.832 ops/s
Iteration  19: 4689272.074 ops/s
Iteration  20: 4696030.615 ops/s
Iteration  21: 4691414.539 ops/s
Iteration  22: 4717204.497 ops/s
Iteration  23: 4683693.620 ops/s
Iteration  24: 4680094.181 ops/s
Iteration  25: 4710024.243 ops/s
Iteration  26: 4674459.948 ops/s
Iteration  27: 4675397.371 ops/s
Iteration  28: 4717551.661 ops/s
Iteration  29: 4693730.197 ops/s
Iteration  30: 4685198.146 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_put_createCollection":
  4691567.265 ±(99.9%) 15195.076 ops/s [Average]
  (min, avg, max) = (4632014.890, 4691567.265, 4741582.149), stdev = 22743.277
  CI (99.9%): [4676372.189, 4706762.342] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
TreeBagMultimapTest._Benchmark.benchmark_put_createCollection  thrpt   30  4691567.265 ± 15195.076  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_rejectKeysMultiValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_rejectKeysMultiValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 125902.686 ops/s
# Warmup Iteration   2: 240877.482 ops/s
# Warmup Iteration   3: 282802.985 ops/s
# Warmup Iteration   4: 284631.230 ops/s
# Warmup Iteration   5: 283798.585 ops/s
# Warmup Iteration   6: 239651.772 ops/s
# Warmup Iteration   7: 284539.292 ops/s
# Warmup Iteration   8: 283747.129 ops/s
# Warmup Iteration   9: 284436.636 ops/s
# Warmup Iteration  10: 283059.652 ops/s
# Warmup Iteration  11: 283920.152 ops/s
# Warmup Iteration  12: 283825.785 ops/s
# Warmup Iteration  13: 284381.839 ops/s
# Warmup Iteration  14: 283460.372 ops/s
# Warmup Iteration  15: 284123.974 ops/s
# Warmup Iteration  16: 284415.378 ops/s
# Warmup Iteration  17: 283870.455 ops/s
# Warmup Iteration  18: 284370.754 ops/s
# Warmup Iteration  19: 284332.475 ops/s
# Warmup Iteration  20: 283055.967 ops/s
# Warmup Iteration  21: 285448.747 ops/s
# Warmup Iteration  22: 283753.212 ops/s
# Warmup Iteration  23: 284540.189 ops/s
# Warmup Iteration  24: 283122.519 ops/s
# Warmup Iteration  25: 283905.369 ops/s
# Warmup Iteration  26: 284625.597 ops/s
# Warmup Iteration  27: 284092.138 ops/s
# Warmup Iteration  28: 283549.887 ops/s
# Warmup Iteration  29: 284210.542 ops/s
# Warmup Iteration  30: 283909.419 ops/s
Iteration   1: 284066.567 ops/s
Iteration   2: 284483.658 ops/s
Iteration   3: 285395.058 ops/s
Iteration   4: 284813.431 ops/s
Iteration   5: 286622.601 ops/s
Iteration   6: 284564.058 ops/s
Iteration   7: 283433.992 ops/s
Iteration   8: 284405.507 ops/s
Iteration   9: 283614.440 ops/s
Iteration  10: 283661.524 ops/s
Iteration  11: 283537.302 ops/s
Iteration  12: 285035.593 ops/s
Iteration  13: 283853.776 ops/s
Iteration  14: 283479.306 ops/s
Iteration  15: 283141.378 ops/s
Iteration  16: 282971.218 ops/s
Iteration  17: 284244.569 ops/s
Iteration  18: 284684.835 ops/s
Iteration  19: 282763.198 ops/s
Iteration  20: 285272.870 ops/s
Iteration  21: 282610.831 ops/s
Iteration  22: 285047.116 ops/s
Iteration  23: 283974.396 ops/s
Iteration  24: 282857.999 ops/s
Iteration  25: 280383.228 ops/s
Iteration  26: 284884.361 ops/s
Iteration  27: 283087.999 ops/s
Iteration  28: 284118.245 ops/s
Iteration  29: 281070.095 ops/s
Iteration  30: 284747.095 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_rejectKeysMultiValues":
  283894.208 ±(99.9%) 838.617 ops/s [Average]
  (min, avg, max) = (280383.228, 283894.208, 286622.601), stdev = 1255.202
  CI (99.9%): [283055.591, 284732.825] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score     Error  Units
TreeBagMultimapTest._Benchmark.benchmark_rejectKeysMultiValues  thrpt   30  283894.208 ± 838.617  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_rejectKeysValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_rejectKeysValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 140834.959 ops/s
# Warmup Iteration   2: 288762.083 ops/s
# Warmup Iteration   3: 330781.425 ops/s
# Warmup Iteration   4: 332263.610 ops/s
# Warmup Iteration   5: 333138.015 ops/s
# Warmup Iteration   6: 281074.021 ops/s
# Warmup Iteration   7: 333031.335 ops/s
# Warmup Iteration   8: 332382.677 ops/s
# Warmup Iteration   9: 333063.466 ops/s
# Warmup Iteration  10: 332029.831 ops/s
# Warmup Iteration  11: 332836.578 ops/s
# Warmup Iteration  12: 332171.831 ops/s
# Warmup Iteration  13: 333391.544 ops/s
# Warmup Iteration  14: 332631.891 ops/s
# Warmup Iteration  15: 332907.057 ops/s
# Warmup Iteration  16: 329954.532 ops/s
# Warmup Iteration  17: 332491.401 ops/s
# Warmup Iteration  18: 332474.488 ops/s
# Warmup Iteration  19: 331440.066 ops/s
# Warmup Iteration  20: 332951.574 ops/s
# Warmup Iteration  21: 333577.744 ops/s
# Warmup Iteration  22: 333388.210 ops/s
# Warmup Iteration  23: 330443.393 ops/s
# Warmup Iteration  24: 332630.582 ops/s
# Warmup Iteration  25: 333129.054 ops/s
# Warmup Iteration  26: 332992.363 ops/s
# Warmup Iteration  27: 332793.621 ops/s
# Warmup Iteration  28: 333228.065 ops/s
# Warmup Iteration  29: 330308.330 ops/s
# Warmup Iteration  30: 332526.622 ops/s
Iteration   1: 333348.589 ops/s
Iteration   2: 332531.195 ops/s
Iteration   3: 333102.217 ops/s
Iteration   4: 332071.564 ops/s
Iteration   5: 332483.067 ops/s
Iteration   6: 333336.908 ops/s
Iteration   7: 332680.977 ops/s
Iteration   8: 331872.647 ops/s
Iteration   9: 327664.903 ops/s
Iteration  10: 333465.071 ops/s
Iteration  11: 333813.172 ops/s
Iteration  12: 328042.164 ops/s
Iteration  13: 332629.326 ops/s
Iteration  14: 332829.572 ops/s
Iteration  15: 328543.965 ops/s
Iteration  16: 328423.127 ops/s
Iteration  17: 333948.711 ops/s
Iteration  18: 333532.372 ops/s
Iteration  19: 331773.969 ops/s
Iteration  20: 333655.805 ops/s
Iteration  21: 332352.825 ops/s
Iteration  22: 333134.020 ops/s
Iteration  23: 332837.212 ops/s
Iteration  24: 332029.623 ops/s
Iteration  25: 333404.936 ops/s
Iteration  26: 332829.541 ops/s
Iteration  27: 332595.063 ops/s
Iteration  28: 332438.051 ops/s
Iteration  29: 331059.204 ops/s
Iteration  30: 333476.924 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_rejectKeysValues":
  332196.891 ±(99.9%) 1161.836 ops/s [Average]
  (min, avg, max) = (327664.903, 332196.891, 333948.711), stdev = 1738.981
  CI (99.9%): [331035.055, 333358.726] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
TreeBagMultimapTest._Benchmark.benchmark_rejectKeysValues  thrpt   30  332196.891 ± 1161.836  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 160257.237 ops/s
# Warmup Iteration   2: 334224.305 ops/s
# Warmup Iteration   3: 352920.088 ops/s
# Warmup Iteration   4: 356249.163 ops/s
# Warmup Iteration   5: 303603.574 ops/s
# Warmup Iteration   6: 352785.096 ops/s
# Warmup Iteration   7: 355482.526 ops/s
# Warmup Iteration   8: 355949.650 ops/s
# Warmup Iteration   9: 356421.561 ops/s
# Warmup Iteration  10: 356059.819 ops/s
# Warmup Iteration  11: 354480.933 ops/s
# Warmup Iteration  12: 356460.552 ops/s
# Warmup Iteration  13: 355455.467 ops/s
# Warmup Iteration  14: 356351.594 ops/s
# Warmup Iteration  15: 355914.312 ops/s
# Warmup Iteration  16: 355402.046 ops/s
# Warmup Iteration  17: 356403.407 ops/s
# Warmup Iteration  18: 355504.251 ops/s
# Warmup Iteration  19: 356358.758 ops/s
# Warmup Iteration  20: 356939.659 ops/s
# Warmup Iteration  21: 356087.380 ops/s
# Warmup Iteration  22: 356114.760 ops/s
# Warmup Iteration  23: 356187.155 ops/s
# Warmup Iteration  24: 357419.042 ops/s
# Warmup Iteration  25: 356290.390 ops/s
# Warmup Iteration  26: 356907.113 ops/s
# Warmup Iteration  27: 357357.485 ops/s
# Warmup Iteration  28: 355784.170 ops/s
# Warmup Iteration  29: 356445.995 ops/s
# Warmup Iteration  30: 355387.537 ops/s
Iteration   1: 356931.775 ops/s
Iteration   2: 355088.404 ops/s
Iteration   3: 356508.818 ops/s
Iteration   4: 355579.011 ops/s
Iteration   5: 357385.964 ops/s
Iteration   6: 355858.688 ops/s
Iteration   7: 355203.192 ops/s
Iteration   8: 356332.570 ops/s
Iteration   9: 356479.303 ops/s
Iteration  10: 356458.383 ops/s
Iteration  11: 356108.909 ops/s
Iteration  12: 356458.742 ops/s
Iteration  13: 356147.131 ops/s
Iteration  14: 355944.095 ops/s
Iteration  15: 354299.981 ops/s
Iteration  16: 356663.776 ops/s
Iteration  17: 354319.506 ops/s
Iteration  18: 353981.274 ops/s
Iteration  19: 356995.877 ops/s
Iteration  20: 355414.324 ops/s
Iteration  21: 355265.388 ops/s
Iteration  22: 356439.561 ops/s
Iteration  23: 357075.606 ops/s
Iteration  24: 355646.409 ops/s
Iteration  25: 356087.496 ops/s
Iteration  26: 356373.050 ops/s
Iteration  27: 355493.885 ops/s
Iteration  28: 356097.905 ops/s
Iteration  29: 356584.784 ops/s
Iteration  30: 357046.950 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_remove":
  356009.025 ±(99.9%) 567.678 ops/s [Average]
  (min, avg, max) = (353981.274, 356009.025, 357385.964), stdev = 849.674
  CI (99.9%): [355441.347, 356576.703] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score     Error  Units
TreeBagMultimapTest._Benchmark.benchmark_remove  thrpt   30  356009.025 ± 567.678  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_removeKey$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_removeKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 361956.038 ops/s
# Warmup Iteration   2: 747936.250 ops/s
# Warmup Iteration   3: 852345.570 ops/s
# Warmup Iteration   4: 864060.316 ops/s
# Warmup Iteration   5: 787260.405 ops/s
# Warmup Iteration   6: 792315.789 ops/s
# Warmup Iteration   7: 863771.436 ops/s
# Warmup Iteration   8: 856993.865 ops/s
# Warmup Iteration   9: 863261.953 ops/s
# Warmup Iteration  10: 862274.057 ops/s
# Warmup Iteration  11: 863571.911 ops/s
# Warmup Iteration  12: 859401.056 ops/s
# Warmup Iteration  13: 862921.484 ops/s
# Warmup Iteration  14: 862497.803 ops/s
# Warmup Iteration  15: 856655.902 ops/s
# Warmup Iteration  16: 865437.659 ops/s
# Warmup Iteration  17: 864359.118 ops/s
# Warmup Iteration  18: 861415.199 ops/s
# Warmup Iteration  19: 855691.033 ops/s
# Warmup Iteration  20: 857232.022 ops/s
# Warmup Iteration  21: 854971.816 ops/s
# Warmup Iteration  22: 864568.235 ops/s
# Warmup Iteration  23: 863258.119 ops/s
# Warmup Iteration  24: 865358.141 ops/s
# Warmup Iteration  25: 865556.190 ops/s
# Warmup Iteration  26: 865306.237 ops/s
# Warmup Iteration  27: 865821.629 ops/s
# Warmup Iteration  28: 864552.286 ops/s
# Warmup Iteration  29: 863875.941 ops/s
# Warmup Iteration  30: 863800.277 ops/s
Iteration   1: 860531.943 ops/s
Iteration   2: 865300.175 ops/s
Iteration   3: 863505.438 ops/s
Iteration   4: 866270.015 ops/s
Iteration   5: 863495.253 ops/s
Iteration   6: 863697.868 ops/s
Iteration   7: 866623.814 ops/s
Iteration   8: 864174.130 ops/s
Iteration   9: 863962.627 ops/s
Iteration  10: 865219.478 ops/s
Iteration  11: 862066.367 ops/s
Iteration  12: 864670.462 ops/s
Iteration  13: 866178.748 ops/s
Iteration  14: 863954.359 ops/s
Iteration  15: 865762.812 ops/s
Iteration  16: 863754.530 ops/s
Iteration  17: 864862.169 ops/s
Iteration  18: 864909.842 ops/s
Iteration  19: 863873.071 ops/s
Iteration  20: 865102.306 ops/s
Iteration  21: 866956.906 ops/s
Iteration  22: 864382.145 ops/s
Iteration  23: 866838.214 ops/s
Iteration  24: 864936.664 ops/s
Iteration  25: 865535.370 ops/s
Iteration  26: 867185.288 ops/s
Iteration  27: 862931.099 ops/s
Iteration  28: 862218.994 ops/s
Iteration  29: 864320.122 ops/s
Iteration  30: 863221.112 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_removeKey":
  864548.044 ±(99.9%) 1031.393 ops/s [Average]
  (min, avg, max) = (860531.943, 864548.044, 867185.288), stdev = 1543.741
  CI (99.9%): [863516.651, 865579.437] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score      Error  Units
TreeBagMultimapTest._Benchmark.benchmark_removeKey  thrpt   30  864548.044 ± 1031.393  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_removeObject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_removeObject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2508331.543 ops/s
# Warmup Iteration   2: 5649911.168 ops/s
# Warmup Iteration   3: 4834142.639 ops/s
# Warmup Iteration   4: 5630999.444 ops/s
# Warmup Iteration   5: 5677452.768 ops/s
# Warmup Iteration   6: 5696084.018 ops/s
# Warmup Iteration   7: 5661326.127 ops/s
# Warmup Iteration   8: 5637476.699 ops/s
# Warmup Iteration   9: 5657302.988 ops/s
# Warmup Iteration  10: 5677317.928 ops/s
# Warmup Iteration  11: 5691115.059 ops/s
# Warmup Iteration  12: 5658132.300 ops/s
# Warmup Iteration  13: 5653125.688 ops/s
# Warmup Iteration  14: 5679976.054 ops/s
# Warmup Iteration  15: 5649730.064 ops/s
# Warmup Iteration  16: 5673505.999 ops/s
# Warmup Iteration  17: 5681838.662 ops/s
# Warmup Iteration  18: 5633300.277 ops/s
# Warmup Iteration  19: 5712677.773 ops/s
# Warmup Iteration  20: 5665473.369 ops/s
# Warmup Iteration  21: 5646607.568 ops/s
# Warmup Iteration  22: 5681209.663 ops/s
# Warmup Iteration  23: 5687229.661 ops/s
# Warmup Iteration  24: 5669041.854 ops/s
# Warmup Iteration  25: 5661554.741 ops/s
# Warmup Iteration  26: 5711701.341 ops/s
# Warmup Iteration  27: 5704918.040 ops/s
# Warmup Iteration  28: 5678681.843 ops/s
# Warmup Iteration  29: 5676404.742 ops/s
# Warmup Iteration  30: 5648669.774 ops/s
Iteration   1: 5714208.852 ops/s
Iteration   2: 5661758.526 ops/s
Iteration   3: 5682551.721 ops/s
Iteration   4: 5652556.628 ops/s
Iteration   5: 5597797.632 ops/s
Iteration   6: 5637660.588 ops/s
Iteration   7: 5660874.754 ops/s
Iteration   8: 5721237.346 ops/s
Iteration   9: 5686159.892 ops/s
Iteration  10: 5640042.239 ops/s
Iteration  11: 5632323.428 ops/s
Iteration  12: 5693643.028 ops/s
Iteration  13: 5684957.054 ops/s
Iteration  14: 5655848.165 ops/s
Iteration  15: 5707917.252 ops/s
Iteration  16: 5681539.018 ops/s
Iteration  17: 5680406.494 ops/s
Iteration  18: 5691737.798 ops/s
Iteration  19: 5597214.881 ops/s
Iteration  20: 5683895.645 ops/s
Iteration  21: 5664310.073 ops/s
Iteration  22: 5647239.194 ops/s
Iteration  23: 5665147.361 ops/s
Iteration  24: 5716986.796 ops/s
Iteration  25: 5660726.996 ops/s
Iteration  26: 5674411.968 ops/s
Iteration  27: 5679951.570 ops/s
Iteration  28: 5693347.491 ops/s
Iteration  29: 5747606.268 ops/s
Iteration  30: 5694349.316 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_removeObject":
  5673613.599 ±(99.9%) 22335.398 ops/s [Average]
  (min, avg, max) = (5597214.881, 5673613.599, 5747606.268), stdev = 33430.575
  CI (99.9%): [5651278.201, 5695948.997] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
TreeBagMultimapTest._Benchmark.benchmark_removeObject  thrpt   30  5673613.599 ± 22335.398  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_replaceValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_replaceValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 88477.353 ops/s
# Warmup Iteration   2: 183459.501 ops/s
# Warmup Iteration   3: 206716.180 ops/s
# Warmup Iteration   4: 208399.148 ops/s
# Warmup Iteration   5: 184316.900 ops/s
# Warmup Iteration   6: 198515.039 ops/s
# Warmup Iteration   7: 208041.856 ops/s
# Warmup Iteration   8: 207611.663 ops/s
# Warmup Iteration   9: 207971.391 ops/s
# Warmup Iteration  10: 208122.844 ops/s
# Warmup Iteration  11: 208634.290 ops/s
# Warmup Iteration  12: 208140.561 ops/s
# Warmup Iteration  13: 208207.877 ops/s
# Warmup Iteration  14: 207981.164 ops/s
# Warmup Iteration  15: 208059.492 ops/s
# Warmup Iteration  16: 207690.911 ops/s
# Warmup Iteration  17: 207858.315 ops/s
# Warmup Iteration  18: 208160.186 ops/s
# Warmup Iteration  19: 208062.847 ops/s
# Warmup Iteration  20: 207892.021 ops/s
# Warmup Iteration  21: 208407.480 ops/s
# Warmup Iteration  22: 207888.221 ops/s
# Warmup Iteration  23: 207899.838 ops/s
# Warmup Iteration  24: 207518.626 ops/s
# Warmup Iteration  25: 207667.893 ops/s
# Warmup Iteration  26: 207923.283 ops/s
# Warmup Iteration  27: 208100.170 ops/s
# Warmup Iteration  28: 207801.592 ops/s
# Warmup Iteration  29: 207396.657 ops/s
# Warmup Iteration  30: 207534.191 ops/s
Iteration   1: 207196.473 ops/s
Iteration   2: 208004.456 ops/s
Iteration   3: 207756.495 ops/s
Iteration   4: 208336.436 ops/s
Iteration   5: 207419.810 ops/s
Iteration   6: 207872.340 ops/s
Iteration   7: 207739.114 ops/s
Iteration   8: 208140.488 ops/s
Iteration   9: 207657.926 ops/s
Iteration  10: 207823.329 ops/s
Iteration  11: 208358.475 ops/s
Iteration  12: 207573.424 ops/s
Iteration  13: 207325.526 ops/s
Iteration  14: 208651.765 ops/s
Iteration  15: 206949.517 ops/s
Iteration  16: 207030.705 ops/s
Iteration  17: 207794.875 ops/s
Iteration  18: 207799.028 ops/s
Iteration  19: 207762.900 ops/s
Iteration  20: 207434.309 ops/s
Iteration  21: 207381.414 ops/s
Iteration  22: 208323.935 ops/s
Iteration  23: 207835.277 ops/s
Iteration  24: 207510.366 ops/s
Iteration  25: 207114.149 ops/s
Iteration  26: 207017.480 ops/s
Iteration  27: 207477.277 ops/s
Iteration  28: 207620.707 ops/s
Iteration  29: 207055.655 ops/s
Iteration  30: 208773.459 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_replaceValues":
  207691.237 ±(99.9%) 319.951 ops/s [Average]
  (min, avg, max) = (206949.517, 207691.237, 208773.459), stdev = 478.887
  CI (99.9%): [207371.286, 208011.188] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score     Error  Units
TreeBagMultimapTest._Benchmark.benchmark_replaceValues  thrpt   30  207691.237 ± 319.951  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_replaceValues_absent_key$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_replaceValues_absent_key

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 109736.462 ops/s
# Warmup Iteration   2: 255365.530 ops/s
# Warmup Iteration   3: 299254.919 ops/s
# Warmup Iteration   4: 300646.539 ops/s
# Warmup Iteration   5: 296263.616 ops/s
# Warmup Iteration   6: 256035.008 ops/s
# Warmup Iteration   7: 300966.056 ops/s
# Warmup Iteration   8: 300909.375 ops/s
# Warmup Iteration   9: 300843.514 ops/s
# Warmup Iteration  10: 300993.042 ops/s
# Warmup Iteration  11: 300597.827 ops/s
# Warmup Iteration  12: 300451.415 ops/s
# Warmup Iteration  13: 300872.666 ops/s
# Warmup Iteration  14: 300686.992 ops/s
# Warmup Iteration  15: 301211.343 ops/s
# Warmup Iteration  16: 300571.194 ops/s
# Warmup Iteration  17: 298918.271 ops/s
# Warmup Iteration  18: 299092.328 ops/s
# Warmup Iteration  19: 299615.536 ops/s
# Warmup Iteration  20: 298783.632 ops/s
# Warmup Iteration  21: 298982.606 ops/s
# Warmup Iteration  22: 299330.490 ops/s
# Warmup Iteration  23: 299606.457 ops/s
# Warmup Iteration  24: 299032.050 ops/s
# Warmup Iteration  25: 298975.584 ops/s
# Warmup Iteration  26: 299237.740 ops/s
# Warmup Iteration  27: 299059.018 ops/s
# Warmup Iteration  28: 299494.180 ops/s
# Warmup Iteration  29: 298319.116 ops/s
# Warmup Iteration  30: 299495.779 ops/s
Iteration   1: 299731.901 ops/s
Iteration   2: 299130.812 ops/s
Iteration   3: 299334.244 ops/s
Iteration   4: 300103.332 ops/s
Iteration   5: 299316.846 ops/s
Iteration   6: 299605.205 ops/s
Iteration   7: 298799.365 ops/s
Iteration   8: 299056.476 ops/s
Iteration   9: 300056.586 ops/s
Iteration  10: 299019.769 ops/s
Iteration  11: 299934.198 ops/s
Iteration  12: 298529.930 ops/s
Iteration  13: 298646.939 ops/s
Iteration  14: 299762.318 ops/s
Iteration  15: 298441.609 ops/s
Iteration  16: 298789.560 ops/s
Iteration  17: 299462.128 ops/s
Iteration  18: 298105.790 ops/s
Iteration  19: 299497.434 ops/s
Iteration  20: 299321.547 ops/s
Iteration  21: 299184.331 ops/s
Iteration  22: 299452.030 ops/s
Iteration  23: 298440.951 ops/s
Iteration  24: 299484.909 ops/s
Iteration  25: 298575.120 ops/s
Iteration  26: 298251.954 ops/s
Iteration  27: 299661.869 ops/s
Iteration  28: 298245.145 ops/s
Iteration  29: 298974.487 ops/s
Iteration  30: 298549.311 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_replaceValues_absent_key":
  299115.537 ±(99.9%) 379.680 ops/s [Average]
  (min, avg, max) = (298105.790, 299115.537, 300103.332), stdev = 568.287
  CI (99.9%): [298735.857, 299495.216] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score     Error  Units
TreeBagMultimapTest._Benchmark.benchmark_replaceValues_absent_key  thrpt   30  299115.537 ± 379.680  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_selectKeysMultiValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_selectKeysMultiValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 122952.298 ops/s
# Warmup Iteration   2: 241329.609 ops/s
# Warmup Iteration   3: 279647.842 ops/s
# Warmup Iteration   4: 281419.849 ops/s
# Warmup Iteration   5: 281519.906 ops/s
# Warmup Iteration   6: 237802.430 ops/s
# Warmup Iteration   7: 281149.798 ops/s
# Warmup Iteration   8: 281210.555 ops/s
# Warmup Iteration   9: 280982.065 ops/s
# Warmup Iteration  10: 281565.269 ops/s
# Warmup Iteration  11: 281596.277 ops/s
# Warmup Iteration  12: 281129.493 ops/s
# Warmup Iteration  13: 280624.864 ops/s
# Warmup Iteration  14: 281426.906 ops/s
# Warmup Iteration  15: 281998.428 ops/s
# Warmup Iteration  16: 281170.638 ops/s
# Warmup Iteration  17: 281574.701 ops/s
# Warmup Iteration  18: 282313.030 ops/s
# Warmup Iteration  19: 281996.264 ops/s
# Warmup Iteration  20: 281684.401 ops/s
# Warmup Iteration  21: 281622.072 ops/s
# Warmup Iteration  22: 282645.402 ops/s
# Warmup Iteration  23: 281757.278 ops/s
# Warmup Iteration  24: 281847.758 ops/s
# Warmup Iteration  25: 281265.543 ops/s
# Warmup Iteration  26: 281005.374 ops/s
# Warmup Iteration  27: 281911.155 ops/s
# Warmup Iteration  28: 281360.232 ops/s
# Warmup Iteration  29: 282385.450 ops/s
# Warmup Iteration  30: 281685.094 ops/s
Iteration   1: 281263.085 ops/s
Iteration   2: 279673.084 ops/s
Iteration   3: 280516.882 ops/s
Iteration   4: 281971.464 ops/s
Iteration   5: 281869.532 ops/s
Iteration   6: 281076.765 ops/s
Iteration   7: 281585.886 ops/s
Iteration   8: 281095.708 ops/s
Iteration   9: 282055.214 ops/s
Iteration  10: 281380.147 ops/s
Iteration  11: 281726.953 ops/s
Iteration  12: 281831.632 ops/s
Iteration  13: 281443.330 ops/s
Iteration  14: 281207.580 ops/s
Iteration  15: 282383.700 ops/s
Iteration  16: 281930.093 ops/s
Iteration  17: 281806.624 ops/s
Iteration  18: 282246.249 ops/s
Iteration  19: 281463.773 ops/s
Iteration  20: 281447.601 ops/s
Iteration  21: 281356.312 ops/s
Iteration  22: 282382.604 ops/s
Iteration  23: 281276.160 ops/s
Iteration  24: 281883.719 ops/s
Iteration  25: 282389.590 ops/s
Iteration  26: 282247.667 ops/s
Iteration  27: 281964.866 ops/s
Iteration  28: 282235.304 ops/s
Iteration  29: 283299.478 ops/s
Iteration  30: 281869.148 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_selectKeysMultiValues":
  281696.005 ±(99.9%) 440.192 ops/s [Average]
  (min, avg, max) = (279673.084, 281696.005, 283299.478), stdev = 658.859
  CI (99.9%): [281255.813, 282136.197] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score     Error  Units
TreeBagMultimapTest._Benchmark.benchmark_selectKeysMultiValues  thrpt   30  281696.005 ± 440.192  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_selectKeysValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_selectKeysValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 140784.782 ops/s
# Warmup Iteration   2: 294095.224 ops/s
# Warmup Iteration   3: 343655.671 ops/s
# Warmup Iteration   4: 342381.306 ops/s
# Warmup Iteration   5: 336467.803 ops/s
# Warmup Iteration   6: 295614.730 ops/s
# Warmup Iteration   7: 343999.724 ops/s
# Warmup Iteration   8: 343951.344 ops/s
# Warmup Iteration   9: 344707.636 ops/s
# Warmup Iteration  10: 344277.281 ops/s
# Warmup Iteration  11: 344146.541 ops/s
# Warmup Iteration  12: 343938.663 ops/s
# Warmup Iteration  13: 344641.821 ops/s
# Warmup Iteration  14: 344727.108 ops/s
# Warmup Iteration  15: 344178.266 ops/s
# Warmup Iteration  16: 340573.205 ops/s
# Warmup Iteration  17: 343118.750 ops/s
# Warmup Iteration  18: 343934.140 ops/s
# Warmup Iteration  19: 344753.877 ops/s
# Warmup Iteration  20: 343100.921 ops/s
# Warmup Iteration  21: 343890.811 ops/s
# Warmup Iteration  22: 343716.770 ops/s
# Warmup Iteration  23: 342808.195 ops/s
# Warmup Iteration  24: 343845.948 ops/s
# Warmup Iteration  25: 343105.013 ops/s
# Warmup Iteration  26: 344096.619 ops/s
# Warmup Iteration  27: 344519.315 ops/s
# Warmup Iteration  28: 343899.306 ops/s
# Warmup Iteration  29: 339889.940 ops/s
# Warmup Iteration  30: 343895.154 ops/s
Iteration   1: 345422.611 ops/s
Iteration   2: 341839.520 ops/s
Iteration   3: 343598.403 ops/s
Iteration   4: 344385.889 ops/s
Iteration   5: 344306.001 ops/s
Iteration   6: 344480.172 ops/s
Iteration   7: 343899.929 ops/s
Iteration   8: 344533.760 ops/s
Iteration   9: 345085.284 ops/s
Iteration  10: 344218.356 ops/s
Iteration  11: 344340.086 ops/s
Iteration  12: 343885.427 ops/s
Iteration  13: 344022.019 ops/s
Iteration  14: 344491.666 ops/s
Iteration  15: 343903.743 ops/s
Iteration  16: 343363.804 ops/s
Iteration  17: 344879.620 ops/s
Iteration  18: 344228.089 ops/s
Iteration  19: 344353.301 ops/s
Iteration  20: 343277.540 ops/s
Iteration  21: 344165.640 ops/s
Iteration  22: 339168.180 ops/s
Iteration  23: 343377.343 ops/s
Iteration  24: 342854.849 ops/s
Iteration  25: 343777.577 ops/s
Iteration  26: 344980.098 ops/s
Iteration  27: 343999.443 ops/s
Iteration  28: 343646.521 ops/s
Iteration  29: 342406.789 ops/s
Iteration  30: 343858.117 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_selectKeysValues":
  343824.993 ±(99.9%) 774.307 ops/s [Average]
  (min, avg, max) = (339168.180, 343824.993, 345422.611), stdev = 1158.946
  CI (99.9%): [343050.686, 344599.299] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score     Error  Units
TreeBagMultimapTest._Benchmark.benchmark_selectKeysValues  thrpt   30  343824.993 ± 774.307  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_serialization$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_serialization

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11179.987 ops/s
# Warmup Iteration   2: 17144.311 ops/s
# Warmup Iteration   3: 24182.669 ops/s
# Warmup Iteration   4: 25219.767 ops/s
# Warmup Iteration   5: 25117.228 ops/s
# Warmup Iteration   6: 25261.796 ops/s
# Warmup Iteration   7: 25329.051 ops/s
# Warmup Iteration   8: 25288.663 ops/s
# Warmup Iteration   9: 25290.490 ops/s
# Warmup Iteration  10: 21698.693 ops/s
# Warmup Iteration  11: 24890.065 ops/s
# Warmup Iteration  12: 25240.833 ops/s
# Warmup Iteration  13: 25223.901 ops/s
# Warmup Iteration  14: 25248.740 ops/s
# Warmup Iteration  15: 25247.867 ops/s
# Warmup Iteration  16: 25058.723 ops/s
# Warmup Iteration  17: 25195.802 ops/s
# Warmup Iteration  18: 25078.228 ops/s
# Warmup Iteration  19: 25282.920 ops/s
# Warmup Iteration  20: 25230.662 ops/s
# Warmup Iteration  21: 25275.032 ops/s
# Warmup Iteration  22: 25242.332 ops/s
# Warmup Iteration  23: 25266.957 ops/s
# Warmup Iteration  24: 25194.258 ops/s
# Warmup Iteration  25: 25272.080 ops/s
# Warmup Iteration  26: 25291.387 ops/s
# Warmup Iteration  27: 25254.698 ops/s
# Warmup Iteration  28: 25193.295 ops/s
# Warmup Iteration  29: 25296.152 ops/s
# Warmup Iteration  30: 25196.863 ops/s
Iteration   1: 25108.896 ops/s
Iteration   2: 25325.156 ops/s
Iteration   3: 25296.667 ops/s
Iteration   4: 25258.250 ops/s
Iteration   5: 25268.185 ops/s
Iteration   6: 25263.370 ops/s
Iteration   7: 24966.281 ops/s
Iteration   8: 25271.544 ops/s
Iteration   9: 25310.954 ops/s
Iteration  10: 25290.041 ops/s
Iteration  11: 25258.433 ops/s
Iteration  12: 25173.543 ops/s
Iteration  13: 25272.899 ops/s
Iteration  14: 25220.432 ops/s
Iteration  15: 25083.618 ops/s
Iteration  16: 25297.306 ops/s
Iteration  17: 24850.649 ops/s
Iteration  18: 25308.589 ops/s
Iteration  19: 25382.189 ops/s
Iteration  20: 25247.434 ops/s
Iteration  21: 25278.371 ops/s
Iteration  22: 24882.723 ops/s
Iteration  23: 25156.226 ops/s
Iteration  24: 25292.504 ops/s
Iteration  25: 25275.810 ops/s
Iteration  26: 25198.278 ops/s
Iteration  27: 25254.609 ops/s
Iteration  28: 25390.103 ops/s
Iteration  29: 25296.558 ops/s
Iteration  30: 25292.905 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_serialization":
  25225.751 ±(99.9%) 86.658 ops/s [Average]
  (min, avg, max) = (24850.649, 25225.751, 25390.103), stdev = 129.705
  CI (99.9%): [25139.093, 25312.409] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt      Score    Error  Units
TreeBagMultimapTest._Benchmark.benchmark_serialization  thrpt   30  25225.751 ± 86.658  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_sizeDistinct$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_sizeDistinct

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3938189.574 ops/s
# Warmup Iteration   2: 8359516.224 ops/s
# Warmup Iteration   3: 7087421.734 ops/s
# Warmup Iteration   4: 8459449.845 ops/s
# Warmup Iteration   5: 8358011.738 ops/s
# Warmup Iteration   6: 8396819.221 ops/s
# Warmup Iteration   7: 8326573.370 ops/s
# Warmup Iteration   8: 8395782.809 ops/s
# Warmup Iteration   9: 8407777.750 ops/s
# Warmup Iteration  10: 8358252.645 ops/s
# Warmup Iteration  11: 8254750.913 ops/s
# Warmup Iteration  12: 8330853.322 ops/s
# Warmup Iteration  13: 8311530.034 ops/s
# Warmup Iteration  14: 8410231.856 ops/s
# Warmup Iteration  15: 8288582.553 ops/s
# Warmup Iteration  16: 8385441.221 ops/s
# Warmup Iteration  17: 8269876.216 ops/s
# Warmup Iteration  18: 8361973.700 ops/s
# Warmup Iteration  19: 8518005.806 ops/s
# Warmup Iteration  20: 8428863.011 ops/s
# Warmup Iteration  21: 8359874.297 ops/s
# Warmup Iteration  22: 8497513.846 ops/s
# Warmup Iteration  23: 8402294.294 ops/s
# Warmup Iteration  24: 8430221.121 ops/s
# Warmup Iteration  25: 8305441.772 ops/s
# Warmup Iteration  26: 8446958.063 ops/s
# Warmup Iteration  27: 8341715.903 ops/s
# Warmup Iteration  28: 8273801.527 ops/s
# Warmup Iteration  29: 8361210.260 ops/s
# Warmup Iteration  30: 8360537.832 ops/s
Iteration   1: 8410808.257 ops/s
Iteration   2: 8285728.348 ops/s
Iteration   3: 8434412.725 ops/s
Iteration   4: 8352260.449 ops/s
Iteration   5: 8424701.180 ops/s
Iteration   6: 8463603.603 ops/s
Iteration   7: 8471078.663 ops/s
Iteration   8: 8510504.571 ops/s
Iteration   9: 8472975.677 ops/s
Iteration  10: 8437934.493 ops/s
Iteration  11: 8456454.812 ops/s
Iteration  12: 8466499.773 ops/s
Iteration  13: 8481448.514 ops/s
Iteration  14: 8381266.293 ops/s
Iteration  15: 8363528.730 ops/s
Iteration  16: 8423385.648 ops/s
Iteration  17: 8455987.184 ops/s
Iteration  18: 8386646.114 ops/s
Iteration  19: 8420171.624 ops/s
Iteration  20: 8421617.889 ops/s
Iteration  21: 8427324.364 ops/s
Iteration  22: 8488031.306 ops/s
Iteration  23: 8434970.864 ops/s
Iteration  24: 8304238.872 ops/s
Iteration  25: 8454697.912 ops/s
Iteration  26: 8499142.056 ops/s
Iteration  27: 8522635.513 ops/s
Iteration  28: 8498946.474 ops/s
Iteration  29: 8354832.638 ops/s
Iteration  30: 8539993.554 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_sizeDistinct":
  8434860.937 ±(99.9%) 40715.372 ops/s [Average]
  (min, avg, max) = (8285728.348, 8434860.937, 8539993.554), stdev = 60940.857
  CI (99.9%): [8394145.564, 8475576.309] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
TreeBagMultimapTest._Benchmark.benchmark_sizeDistinct  thrpt   30  8434860.937 ± 40715.372  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_testCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_testCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 162414.831 ops/s
# Warmup Iteration   2: 248166.233 ops/s
# Warmup Iteration   3: 312334.216 ops/s
# Warmup Iteration   4: 310784.064 ops/s
# Warmup Iteration   5: 312660.285 ops/s
# Warmup Iteration   6: 311763.515 ops/s
# Warmup Iteration   7: 293820.000 ops/s
# Warmup Iteration   8: 280026.124 ops/s
# Warmup Iteration   9: 312560.955 ops/s
# Warmup Iteration  10: 312826.540 ops/s
# Warmup Iteration  11: 312760.966 ops/s
# Warmup Iteration  12: 312873.993 ops/s
# Warmup Iteration  13: 312526.917 ops/s
# Warmup Iteration  14: 311602.629 ops/s
# Warmup Iteration  15: 312576.252 ops/s
# Warmup Iteration  16: 312392.611 ops/s
# Warmup Iteration  17: 312571.652 ops/s
# Warmup Iteration  18: 312481.214 ops/s
# Warmup Iteration  19: 312534.407 ops/s
# Warmup Iteration  20: 312650.712 ops/s
# Warmup Iteration  21: 312813.762 ops/s
# Warmup Iteration  22: 312091.831 ops/s
# Warmup Iteration  23: 312368.569 ops/s
# Warmup Iteration  24: 312397.697 ops/s
# Warmup Iteration  25: 313054.517 ops/s
# Warmup Iteration  26: 312201.140 ops/s
# Warmup Iteration  27: 312705.942 ops/s
# Warmup Iteration  28: 312407.021 ops/s
# Warmup Iteration  29: 312661.203 ops/s
# Warmup Iteration  30: 312664.429 ops/s
Iteration   1: 313005.957 ops/s
Iteration   2: 312518.766 ops/s
Iteration   3: 312604.708 ops/s
Iteration   4: 312133.131 ops/s
Iteration   5: 312461.342 ops/s
Iteration   6: 312436.906 ops/s
Iteration   7: 311752.455 ops/s
Iteration   8: 312463.460 ops/s
Iteration   9: 312359.149 ops/s
Iteration  10: 312260.288 ops/s
Iteration  11: 312934.490 ops/s
Iteration  12: 311293.539 ops/s
Iteration  13: 312720.221 ops/s
Iteration  14: 312369.813 ops/s
Iteration  15: 313041.322 ops/s
Iteration  16: 312669.972 ops/s
Iteration  17: 312156.131 ops/s
Iteration  18: 312804.458 ops/s
Iteration  19: 311858.707 ops/s
Iteration  20: 312681.489 ops/s
Iteration  21: 312253.399 ops/s
Iteration  22: 312652.481 ops/s
Iteration  23: 314467.884 ops/s
Iteration  24: 312411.692 ops/s
Iteration  25: 312588.950 ops/s
Iteration  26: 312560.187 ops/s
Iteration  27: 312339.344 ops/s
Iteration  28: 312001.863 ops/s
Iteration  29: 313245.452 ops/s
Iteration  30: 312082.029 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_testCollection":
  312504.319 ±(99.9%) 366.181 ops/s [Average]
  (min, avg, max) = (311293.539, 312504.319, 314467.884), stdev = 548.082
  CI (99.9%): [312138.139, 312870.500] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score     Error  Units
TreeBagMultimapTest._Benchmark.benchmark_testCollection  thrpt   30  312504.319 ± 366.181  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_testComparatorConstructors$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_testComparatorConstructors

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 80445.384 ops/s
# Warmup Iteration   2: 141754.643 ops/s
# Warmup Iteration   3: 169566.339 ops/s
# Warmup Iteration   4: 170784.416 ops/s
# Warmup Iteration   5: 170891.011 ops/s
# Warmup Iteration   6: 168233.899 ops/s
# Warmup Iteration   7: 146820.837 ops/s
# Warmup Iteration   8: 170777.940 ops/s
# Warmup Iteration   9: 170979.870 ops/s
# Warmup Iteration  10: 170554.227 ops/s
# Warmup Iteration  11: 170456.462 ops/s
# Warmup Iteration  12: 170888.802 ops/s
# Warmup Iteration  13: 170825.519 ops/s
# Warmup Iteration  14: 170510.919 ops/s
# Warmup Iteration  15: 170643.099 ops/s
# Warmup Iteration  16: 170644.197 ops/s
# Warmup Iteration  17: 171039.932 ops/s
# Warmup Iteration  18: 171237.030 ops/s
# Warmup Iteration  19: 171222.472 ops/s
# Warmup Iteration  20: 171254.878 ops/s
# Warmup Iteration  21: 171128.857 ops/s
# Warmup Iteration  22: 171169.054 ops/s
# Warmup Iteration  23: 171361.437 ops/s
# Warmup Iteration  24: 171300.069 ops/s
# Warmup Iteration  25: 170964.408 ops/s
# Warmup Iteration  26: 170823.938 ops/s
# Warmup Iteration  27: 171255.467 ops/s
# Warmup Iteration  28: 171022.897 ops/s
# Warmup Iteration  29: 171192.483 ops/s
# Warmup Iteration  30: 170905.860 ops/s
Iteration   1: 171136.910 ops/s
Iteration   2: 171285.005 ops/s
Iteration   3: 171021.747 ops/s
Iteration   4: 171089.346 ops/s
Iteration   5: 171659.306 ops/s
Iteration   6: 170473.322 ops/s
Iteration   7: 170939.540 ops/s
Iteration   8: 170667.866 ops/s
Iteration   9: 171321.617 ops/s
Iteration  10: 170839.724 ops/s
Iteration  11: 171372.392 ops/s
Iteration  12: 170640.244 ops/s
Iteration  13: 171202.707 ops/s
Iteration  14: 171035.357 ops/s
Iteration  15: 171337.543 ops/s
Iteration  16: 171013.454 ops/s
Iteration  17: 170822.889 ops/s
Iteration  18: 171008.894 ops/s
Iteration  19: 171046.291 ops/s
Iteration  20: 171444.742 ops/s
Iteration  21: 171579.897 ops/s
Iteration  22: 170798.449 ops/s
Iteration  23: 171069.383 ops/s
Iteration  24: 171087.197 ops/s
Iteration  25: 171304.797 ops/s
Iteration  26: 171259.358 ops/s
Iteration  27: 171060.748 ops/s
Iteration  28: 170871.661 ops/s
Iteration  29: 171294.077 ops/s
Iteration  30: 170648.633 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_testComparatorConstructors":
  171077.770 ±(99.9%) 188.876 ops/s [Average]
  (min, avg, max) = (170473.322, 171077.770, 171659.306), stdev = 282.701
  CI (99.9%): [170888.893, 171266.646] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score     Error  Units
TreeBagMultimapTest._Benchmark.benchmark_testComparatorConstructors  thrpt   30  171077.770 ± 188.876  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_testEmptyConstructor$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_testEmptyConstructor

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 133634.815 ops/s
# Warmup Iteration   2: 270701.757 ops/s
# Warmup Iteration   3: 301066.096 ops/s
# Warmup Iteration   4: 302609.477 ops/s
# Warmup Iteration   5: 258482.997 ops/s
# Warmup Iteration   6: 297929.996 ops/s
# Warmup Iteration   7: 302695.534 ops/s
# Warmup Iteration   8: 302679.766 ops/s
# Warmup Iteration   9: 302788.080 ops/s
# Warmup Iteration  10: 302632.122 ops/s
# Warmup Iteration  11: 303395.178 ops/s
# Warmup Iteration  12: 302800.681 ops/s
# Warmup Iteration  13: 302892.498 ops/s
# Warmup Iteration  14: 302498.712 ops/s
# Warmup Iteration  15: 302771.440 ops/s
# Warmup Iteration  16: 302697.842 ops/s
# Warmup Iteration  17: 303497.445 ops/s
# Warmup Iteration  18: 302658.005 ops/s
# Warmup Iteration  19: 303282.088 ops/s
# Warmup Iteration  20: 303227.197 ops/s
# Warmup Iteration  21: 303364.063 ops/s
# Warmup Iteration  22: 303279.602 ops/s
# Warmup Iteration  23: 303403.307 ops/s
# Warmup Iteration  24: 303358.555 ops/s
# Warmup Iteration  25: 303130.740 ops/s
# Warmup Iteration  26: 302561.207 ops/s
# Warmup Iteration  27: 303125.971 ops/s
# Warmup Iteration  28: 302959.325 ops/s
# Warmup Iteration  29: 302461.817 ops/s
# Warmup Iteration  30: 303123.618 ops/s
Iteration   1: 303612.583 ops/s
Iteration   2: 303001.060 ops/s
Iteration   3: 303319.084 ops/s
Iteration   4: 303125.390 ops/s
Iteration   5: 302261.893 ops/s
Iteration   6: 302417.847 ops/s
Iteration   7: 303661.358 ops/s
Iteration   8: 303663.703 ops/s
Iteration   9: 302747.208 ops/s
Iteration  10: 303535.295 ops/s
Iteration  11: 303536.946 ops/s
Iteration  12: 302220.621 ops/s
Iteration  13: 302950.273 ops/s
Iteration  14: 303168.102 ops/s
Iteration  15: 303240.562 ops/s
Iteration  16: 302932.824 ops/s
Iteration  17: 303255.635 ops/s
Iteration  18: 303066.620 ops/s
Iteration  19: 302846.476 ops/s
Iteration  20: 303350.318 ops/s
Iteration  21: 302074.443 ops/s
Iteration  22: 302843.957 ops/s
Iteration  23: 303269.193 ops/s
Iteration  24: 303468.299 ops/s
Iteration  25: 302716.981 ops/s
Iteration  26: 302385.044 ops/s
Iteration  27: 302700.278 ops/s
Iteration  28: 303018.186 ops/s
Iteration  29: 302269.689 ops/s
Iteration  30: 303444.376 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_testEmptyConstructor":
  303003.475 ±(99.9%) 310.448 ops/s [Average]
  (min, avg, max) = (302074.443, 303003.475, 303663.703), stdev = 464.663
  CI (99.9%): [302693.027, 303313.922] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score     Error  Units
TreeBagMultimapTest._Benchmark.benchmark_testEmptyConstructor  thrpt   30  303003.475 ± 310.448  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_testEquals$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_testEquals

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 255231.054 ops/s
# Warmup Iteration   2: 625925.082 ops/s
# Warmup Iteration   3: 630235.685 ops/s
# Warmup Iteration   4: 535446.749 ops/s
# Warmup Iteration   5: 632848.595 ops/s
# Warmup Iteration   6: 635491.853 ops/s
# Warmup Iteration   7: 632076.603 ops/s
# Warmup Iteration   8: 631896.103 ops/s
# Warmup Iteration   9: 633662.036 ops/s
# Warmup Iteration  10: 630599.864 ops/s
# Warmup Iteration  11: 632845.855 ops/s
# Warmup Iteration  12: 631672.029 ops/s
# Warmup Iteration  13: 632984.542 ops/s
# Warmup Iteration  14: 634333.884 ops/s
# Warmup Iteration  15: 629244.619 ops/s
# Warmup Iteration  16: 632973.185 ops/s
# Warmup Iteration  17: 630686.818 ops/s
# Warmup Iteration  18: 627751.280 ops/s
# Warmup Iteration  19: 632197.595 ops/s
# Warmup Iteration  20: 630379.600 ops/s
# Warmup Iteration  21: 631409.619 ops/s
# Warmup Iteration  22: 629624.886 ops/s
# Warmup Iteration  23: 630307.072 ops/s
# Warmup Iteration  24: 633650.314 ops/s
# Warmup Iteration  25: 630382.550 ops/s
# Warmup Iteration  26: 630336.156 ops/s
# Warmup Iteration  27: 629484.831 ops/s
# Warmup Iteration  28: 630714.684 ops/s
# Warmup Iteration  29: 630925.267 ops/s
# Warmup Iteration  30: 627013.748 ops/s
Iteration   1: 632508.900 ops/s
Iteration   2: 629357.470 ops/s
Iteration   3: 632650.245 ops/s
Iteration   4: 631707.413 ops/s
Iteration   5: 632910.663 ops/s
Iteration   6: 632093.629 ops/s
Iteration   7: 630942.007 ops/s
Iteration   8: 635547.159 ops/s
Iteration   9: 628818.926 ops/s
Iteration  10: 630441.965 ops/s
Iteration  11: 626296.818 ops/s
Iteration  12: 631816.567 ops/s
Iteration  13: 631710.834 ops/s
Iteration  14: 628583.219 ops/s
Iteration  15: 626768.819 ops/s
Iteration  16: 630794.776 ops/s
Iteration  17: 629438.750 ops/s
Iteration  18: 625719.454 ops/s
Iteration  19: 625947.874 ops/s
Iteration  20: 623907.889 ops/s
Iteration  21: 628944.862 ops/s
Iteration  22: 630383.496 ops/s
Iteration  23: 631482.464 ops/s
Iteration  24: 630323.922 ops/s
Iteration  25: 631232.101 ops/s
Iteration  26: 629945.844 ops/s
Iteration  27: 630056.966 ops/s
Iteration  28: 631908.822 ops/s
Iteration  29: 632324.700 ops/s
Iteration  30: 631675.494 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_testEquals":
  630208.068 ±(99.9%) 1681.009 ops/s [Average]
  (min, avg, max) = (623907.889, 630208.068, 635547.159), stdev = 2516.055
  CI (99.9%): [628527.059, 631889.077] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
TreeBagMultimapTest._Benchmark.benchmark_testEquals  thrpt   30  630208.068 ± 1681.009  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_testHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_testHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 194917.421 ops/s
# Warmup Iteration   2: 386502.944 ops/s
# Warmup Iteration   3: 419409.148 ops/s
# Warmup Iteration   4: 422016.972 ops/s
# Warmup Iteration   5: 356280.011 ops/s
# Warmup Iteration   6: 422264.602 ops/s
# Warmup Iteration   7: 421959.684 ops/s
# Warmup Iteration   8: 422024.477 ops/s
# Warmup Iteration   9: 423632.826 ops/s
# Warmup Iteration  10: 422195.034 ops/s
# Warmup Iteration  11: 421869.697 ops/s
# Warmup Iteration  12: 421532.601 ops/s
# Warmup Iteration  13: 422247.914 ops/s
# Warmup Iteration  14: 422341.327 ops/s
# Warmup Iteration  15: 421378.897 ops/s
# Warmup Iteration  16: 422634.733 ops/s
# Warmup Iteration  17: 422437.089 ops/s
# Warmup Iteration  18: 421435.214 ops/s
# Warmup Iteration  19: 421777.959 ops/s
# Warmup Iteration  20: 420063.909 ops/s
# Warmup Iteration  21: 421321.951 ops/s
# Warmup Iteration  22: 421951.903 ops/s
# Warmup Iteration  23: 422059.267 ops/s
# Warmup Iteration  24: 422851.283 ops/s
# Warmup Iteration  25: 422424.722 ops/s
# Warmup Iteration  26: 421735.430 ops/s
# Warmup Iteration  27: 420968.203 ops/s
# Warmup Iteration  28: 421373.570 ops/s
# Warmup Iteration  29: 421228.028 ops/s
# Warmup Iteration  30: 421633.650 ops/s
Iteration   1: 421622.210 ops/s
Iteration   2: 420784.301 ops/s
Iteration   3: 423959.196 ops/s
Iteration   4: 422752.042 ops/s
Iteration   5: 422631.857 ops/s
Iteration   6: 423602.965 ops/s
Iteration   7: 421232.178 ops/s
Iteration   8: 421090.474 ops/s
Iteration   9: 423090.308 ops/s
Iteration  10: 421676.724 ops/s
Iteration  11: 420951.104 ops/s
Iteration  12: 423878.193 ops/s
Iteration  13: 421292.650 ops/s
Iteration  14: 421697.743 ops/s
Iteration  15: 421505.929 ops/s
Iteration  16: 420060.409 ops/s
Iteration  17: 423442.965 ops/s
Iteration  18: 420319.205 ops/s
Iteration  19: 423374.558 ops/s
Iteration  20: 424053.091 ops/s
Iteration  21: 421555.851 ops/s
Iteration  22: 421684.395 ops/s
Iteration  23: 421961.437 ops/s
Iteration  24: 421421.310 ops/s
Iteration  25: 421971.836 ops/s
Iteration  26: 422775.210 ops/s
Iteration  27: 420625.873 ops/s
Iteration  28: 421910.669 ops/s
Iteration  29: 421977.881 ops/s
Iteration  30: 418831.417 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_testHashCode":
  421924.466 ±(99.9%) 831.714 ops/s [Average]
  (min, avg, max) = (418831.417, 421924.466, 424053.091), stdev = 1244.870
  CI (99.9%): [421092.752, 422756.180] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score     Error  Units
TreeBagMultimapTest._Benchmark.benchmark_testHashCode  thrpt   30  421924.466 ± 831.714  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_testNewEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_testNewEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 127788.363 ops/s
# Warmup Iteration   2: 252256.200 ops/s
# Warmup Iteration   3: 291500.521 ops/s
# Warmup Iteration   4: 291937.981 ops/s
# Warmup Iteration   5: 291726.855 ops/s
# Warmup Iteration   6: 245057.296 ops/s
# Warmup Iteration   7: 291911.552 ops/s
# Warmup Iteration   8: 291687.200 ops/s
# Warmup Iteration   9: 291697.241 ops/s
# Warmup Iteration  10: 291865.057 ops/s
# Warmup Iteration  11: 292273.942 ops/s
# Warmup Iteration  12: 292341.663 ops/s
# Warmup Iteration  13: 292171.973 ops/s
# Warmup Iteration  14: 291632.274 ops/s
# Warmup Iteration  15: 292130.546 ops/s
# Warmup Iteration  16: 292011.884 ops/s
# Warmup Iteration  17: 292352.987 ops/s
# Warmup Iteration  18: 292668.637 ops/s
# Warmup Iteration  19: 292472.137 ops/s
# Warmup Iteration  20: 292944.442 ops/s
# Warmup Iteration  21: 292442.431 ops/s
# Warmup Iteration  22: 291034.995 ops/s
# Warmup Iteration  23: 292626.129 ops/s
# Warmup Iteration  24: 292463.042 ops/s
# Warmup Iteration  25: 292178.976 ops/s
# Warmup Iteration  26: 293321.355 ops/s
# Warmup Iteration  27: 292228.623 ops/s
# Warmup Iteration  28: 292782.332 ops/s
# Warmup Iteration  29: 292952.017 ops/s
# Warmup Iteration  30: 291958.260 ops/s
Iteration   1: 293063.295 ops/s
Iteration   2: 292770.555 ops/s
Iteration   3: 293005.361 ops/s
Iteration   4: 292638.257 ops/s
Iteration   5: 293014.016 ops/s
Iteration   6: 292236.670 ops/s
Iteration   7: 292462.357 ops/s
Iteration   8: 292989.949 ops/s
Iteration   9: 291619.297 ops/s
Iteration  10: 293207.573 ops/s
Iteration  11: 292257.254 ops/s
Iteration  12: 292191.662 ops/s
Iteration  13: 293286.568 ops/s
Iteration  14: 292267.767 ops/s
Iteration  15: 292364.217 ops/s
Iteration  16: 291929.291 ops/s
Iteration  17: 292907.550 ops/s
Iteration  18: 292238.214 ops/s
Iteration  19: 292210.112 ops/s
Iteration  20: 291994.684 ops/s
Iteration  21: 291830.401 ops/s
Iteration  22: 292430.988 ops/s
Iteration  23: 292552.626 ops/s
Iteration  24: 291810.892 ops/s
Iteration  25: 292666.464 ops/s
Iteration  26: 291633.958 ops/s
Iteration  27: 293411.420 ops/s
Iteration  28: 291868.170 ops/s
Iteration  29: 292261.726 ops/s
Iteration  30: 293510.208 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_testNewEmpty":
  292487.717 ±(99.9%) 356.831 ops/s [Average]
  (min, avg, max) = (291619.297, 292487.717, 293510.208), stdev = 534.089
  CI (99.9%): [292130.885, 292844.548] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score     Error  Units
TreeBagMultimapTest._Benchmark.benchmark_testNewEmpty  thrpt   30  292487.717 ± 356.831  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_testNewMultimap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_testNewMultimap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1262222.192 ops/s
# Warmup Iteration   2: 3472542.305 ops/s
# Warmup Iteration   3: 3490009.796 ops/s
# Warmup Iteration   4: 2913421.592 ops/s
# Warmup Iteration   5: 3487889.560 ops/s
# Warmup Iteration   6: 3484228.155 ops/s
# Warmup Iteration   7: 3495800.577 ops/s
# Warmup Iteration   8: 3493949.936 ops/s
# Warmup Iteration   9: 3492307.487 ops/s
# Warmup Iteration  10: 3509605.567 ops/s
# Warmup Iteration  11: 3502312.546 ops/s
# Warmup Iteration  12: 3497751.272 ops/s
# Warmup Iteration  13: 3502648.519 ops/s
# Warmup Iteration  14: 3505033.625 ops/s
# Warmup Iteration  15: 3510442.057 ops/s
# Warmup Iteration  16: 3486040.364 ops/s
# Warmup Iteration  17: 3440130.008 ops/s
# Warmup Iteration  18: 3436900.457 ops/s
# Warmup Iteration  19: 3438455.635 ops/s
# Warmup Iteration  20: 3439865.406 ops/s
# Warmup Iteration  21: 3432876.453 ops/s
# Warmup Iteration  22: 3447991.186 ops/s
# Warmup Iteration  23: 3441400.839 ops/s
# Warmup Iteration  24: 3446264.562 ops/s
# Warmup Iteration  25: 3438456.755 ops/s
# Warmup Iteration  26: 3444653.234 ops/s
# Warmup Iteration  27: 3453891.161 ops/s
# Warmup Iteration  28: 3453888.134 ops/s
# Warmup Iteration  29: 3447064.651 ops/s
# Warmup Iteration  30: 3453085.399 ops/s
Iteration   1: 3445904.698 ops/s
Iteration   2: 3451144.346 ops/s
Iteration   3: 3453556.728 ops/s
Iteration   4: 3448251.476 ops/s
Iteration   5: 3447758.253 ops/s
Iteration   6: 3449593.541 ops/s
Iteration   7: 3449856.479 ops/s
Iteration   8: 3448060.081 ops/s
Iteration   9: 3451945.906 ops/s
Iteration  10: 3446827.975 ops/s
Iteration  11: 3445751.307 ops/s
Iteration  12: 3446470.923 ops/s
Iteration  13: 3445518.036 ops/s
Iteration  14: 3436729.210 ops/s
Iteration  15: 3438370.886 ops/s
Iteration  16: 3434499.113 ops/s
Iteration  17: 3433805.389 ops/s
Iteration  18: 3449524.137 ops/s
Iteration  19: 3449568.216 ops/s
Iteration  20: 3453028.301 ops/s
Iteration  21: 3447131.057 ops/s
Iteration  22: 3447652.576 ops/s
Iteration  23: 3452444.560 ops/s
Iteration  24: 3434465.951 ops/s
Iteration  25: 3441594.386 ops/s
Iteration  26: 3439757.240 ops/s
Iteration  27: 3437719.157 ops/s
Iteration  28: 3439869.604 ops/s
Iteration  29: 3427239.927 ops/s
Iteration  30: 3448083.423 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_testNewMultimap":
  3444737.429 ±(99.9%) 4493.110 ops/s [Average]
  (min, avg, max) = (3427239.927, 3444737.429, 3453556.728), stdev = 6725.076
  CI (99.9%): [3440244.319, 3449230.539] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
TreeBagMultimapTest._Benchmark.benchmark_testNewMultimap  thrpt   30  3444737.429 ± 4493.110  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_testNewMultimapWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_testNewMultimapWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 303930.550 ops/s
# Warmup Iteration   2: 658560.022 ops/s
# Warmup Iteration   3: 677410.588 ops/s
# Warmup Iteration   4: 672454.569 ops/s
# Warmup Iteration   5: 592560.162 ops/s
# Warmup Iteration   6: 679761.673 ops/s
# Warmup Iteration   7: 679805.588 ops/s
# Warmup Iteration   8: 680304.480 ops/s
# Warmup Iteration   9: 680500.659 ops/s
# Warmup Iteration  10: 677570.262 ops/s
# Warmup Iteration  11: 677315.811 ops/s
# Warmup Iteration  12: 679392.459 ops/s
# Warmup Iteration  13: 679145.977 ops/s
# Warmup Iteration  14: 679925.862 ops/s
# Warmup Iteration  15: 681130.862 ops/s
# Warmup Iteration  16: 681896.083 ops/s
# Warmup Iteration  17: 675019.689 ops/s
# Warmup Iteration  18: 681737.385 ops/s
# Warmup Iteration  19: 681381.049 ops/s
# Warmup Iteration  20: 680068.763 ops/s
# Warmup Iteration  21: 682489.238 ops/s
# Warmup Iteration  22: 680299.207 ops/s
# Warmup Iteration  23: 679526.714 ops/s
# Warmup Iteration  24: 680126.559 ops/s
# Warmup Iteration  25: 680021.312 ops/s
# Warmup Iteration  26: 681387.828 ops/s
# Warmup Iteration  27: 678958.099 ops/s
# Warmup Iteration  28: 681721.263 ops/s
# Warmup Iteration  29: 681637.516 ops/s
# Warmup Iteration  30: 683176.704 ops/s
Iteration   1: 680743.828 ops/s
Iteration   2: 683655.547 ops/s
Iteration   3: 684027.662 ops/s
Iteration   4: 681553.742 ops/s
Iteration   5: 678294.768 ops/s
Iteration   6: 675425.923 ops/s
Iteration   7: 678996.091 ops/s
Iteration   8: 683207.041 ops/s
Iteration   9: 680728.863 ops/s
Iteration  10: 683281.683 ops/s
Iteration  11: 682097.408 ops/s
Iteration  12: 679696.363 ops/s
Iteration  13: 682896.277 ops/s
Iteration  14: 685278.348 ops/s
Iteration  15: 680766.250 ops/s
Iteration  16: 678828.892 ops/s
Iteration  17: 675811.124 ops/s
Iteration  18: 679764.780 ops/s
Iteration  19: 677441.893 ops/s
Iteration  20: 680217.580 ops/s
Iteration  21: 677280.651 ops/s
Iteration  22: 680985.757 ops/s
Iteration  23: 681954.399 ops/s
Iteration  24: 683588.274 ops/s
Iteration  25: 677792.453 ops/s
Iteration  26: 680258.174 ops/s
Iteration  27: 677521.304 ops/s
Iteration  28: 682563.104 ops/s
Iteration  29: 680822.369 ops/s
Iteration  30: 678263.644 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_testNewMultimapWith":
  680458.140 ±(99.9%) 1691.929 ops/s [Average]
  (min, avg, max) = (675425.923, 680458.140, 685278.348), stdev = 2532.400
  CI (99.9%): [678766.211, 682150.069] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
TreeBagMultimapTest._Benchmark.benchmark_testNewMultimapWith  thrpt   30  680458.140 ± 1691.929  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_testNewMultimapWithKeyValue$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_testNewMultimapWithKeyValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 350405.764 ops/s
# Warmup Iteration   2: 838492.490 ops/s
# Warmup Iteration   3: 912511.452 ops/s
# Warmup Iteration   4: 922055.534 ops/s
# Warmup Iteration   5: 769289.889 ops/s
# Warmup Iteration   6: 920235.860 ops/s
# Warmup Iteration   7: 917114.692 ops/s
# Warmup Iteration   8: 919324.957 ops/s
# Warmup Iteration   9: 921143.712 ops/s
# Warmup Iteration  10: 921391.313 ops/s
# Warmup Iteration  11: 917045.381 ops/s
# Warmup Iteration  12: 920286.183 ops/s
# Warmup Iteration  13: 918876.087 ops/s
# Warmup Iteration  14: 921533.038 ops/s
# Warmup Iteration  15: 917294.252 ops/s
# Warmup Iteration  16: 911732.795 ops/s
# Warmup Iteration  17: 918957.624 ops/s
# Warmup Iteration  18: 920772.074 ops/s
# Warmup Iteration  19: 918708.173 ops/s
# Warmup Iteration  20: 921943.736 ops/s
# Warmup Iteration  21: 912160.950 ops/s
# Warmup Iteration  22: 921421.277 ops/s
# Warmup Iteration  23: 922051.853 ops/s
# Warmup Iteration  24: 919479.703 ops/s
# Warmup Iteration  25: 922103.996 ops/s
# Warmup Iteration  26: 915115.122 ops/s
# Warmup Iteration  27: 919275.757 ops/s
# Warmup Iteration  28: 922451.495 ops/s
# Warmup Iteration  29: 922936.095 ops/s
# Warmup Iteration  30: 923007.947 ops/s
Iteration   1: 919894.708 ops/s
Iteration   2: 922039.162 ops/s
Iteration   3: 922056.430 ops/s
Iteration   4: 923902.989 ops/s
Iteration   5: 923338.823 ops/s
Iteration   6: 921393.737 ops/s
Iteration   7: 919954.997 ops/s
Iteration   8: 918178.711 ops/s
Iteration   9: 917815.541 ops/s
Iteration  10: 917658.430 ops/s
Iteration  11: 919634.193 ops/s
Iteration  12: 918495.407 ops/s
Iteration  13: 917846.633 ops/s
Iteration  14: 922189.940 ops/s
Iteration  15: 918839.244 ops/s
Iteration  16: 922827.026 ops/s
Iteration  17: 923478.191 ops/s
Iteration  18: 922941.330 ops/s
Iteration  19: 921696.819 ops/s
Iteration  20: 918255.273 ops/s
Iteration  21: 921746.274 ops/s
Iteration  22: 920910.381 ops/s
Iteration  23: 919810.433 ops/s
Iteration  24: 923251.904 ops/s
Iteration  25: 920668.207 ops/s
Iteration  26: 918555.731 ops/s
Iteration  27: 917337.999 ops/s
Iteration  28: 925872.805 ops/s
Iteration  29: 918143.182 ops/s
Iteration  30: 919543.157 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_testNewMultimapWithKeyValue":
  920609.255 ±(99.9%) 1515.714 ops/s [Average]
  (min, avg, max) = (917337.999, 920609.255, 925872.805), stdev = 2268.649
  CI (99.9%): [919093.541, 922124.969] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
TreeBagMultimapTest._Benchmark.benchmark_testNewMultimapWithKeyValue  thrpt   30  920609.255 ± 1515.714  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_testNewMultimapWithWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_testNewMultimapWithWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 284673.209 ops/s
# Warmup Iteration   2: 604641.993 ops/s
# Warmup Iteration   3: 677894.435 ops/s
# Warmup Iteration   4: 680267.014 ops/s
# Warmup Iteration   5: 569385.203 ops/s
# Warmup Iteration   6: 671184.802 ops/s
# Warmup Iteration   7: 678738.404 ops/s
# Warmup Iteration   8: 680830.559 ops/s
# Warmup Iteration   9: 680940.406 ops/s
# Warmup Iteration  10: 682409.845 ops/s
# Warmup Iteration  11: 679632.679 ops/s
# Warmup Iteration  12: 681580.358 ops/s
# Warmup Iteration  13: 681300.190 ops/s
# Warmup Iteration  14: 679525.687 ops/s
# Warmup Iteration  15: 680430.005 ops/s
# Warmup Iteration  16: 682365.287 ops/s
# Warmup Iteration  17: 682638.667 ops/s
# Warmup Iteration  18: 681527.030 ops/s
# Warmup Iteration  19: 682734.327 ops/s
# Warmup Iteration  20: 681237.152 ops/s
# Warmup Iteration  21: 682447.598 ops/s
# Warmup Iteration  22: 681477.559 ops/s
# Warmup Iteration  23: 682444.448 ops/s
# Warmup Iteration  24: 680502.246 ops/s
# Warmup Iteration  25: 680930.223 ops/s
# Warmup Iteration  26: 681184.148 ops/s
# Warmup Iteration  27: 680600.556 ops/s
# Warmup Iteration  28: 682741.001 ops/s
# Warmup Iteration  29: 681677.914 ops/s
# Warmup Iteration  30: 680724.177 ops/s
Iteration   1: 680875.029 ops/s
Iteration   2: 681371.100 ops/s
Iteration   3: 680631.524 ops/s
Iteration   4: 683737.423 ops/s
Iteration   5: 679906.617 ops/s
Iteration   6: 680000.286 ops/s
Iteration   7: 683114.269 ops/s
Iteration   8: 679934.131 ops/s
Iteration   9: 681903.850 ops/s
Iteration  10: 682695.371 ops/s
Iteration  11: 681848.210 ops/s
Iteration  12: 680990.573 ops/s
Iteration  13: 683722.231 ops/s
Iteration  14: 680927.202 ops/s
Iteration  15: 681590.696 ops/s
Iteration  16: 680705.277 ops/s
Iteration  17: 682735.059 ops/s
Iteration  18: 682772.351 ops/s
Iteration  19: 683550.674 ops/s
Iteration  20: 682915.430 ops/s
Iteration  21: 682168.613 ops/s
Iteration  22: 683563.706 ops/s
Iteration  23: 681900.729 ops/s
Iteration  24: 681978.565 ops/s
Iteration  25: 681925.497 ops/s
Iteration  26: 681587.777 ops/s
Iteration  27: 682299.235 ops/s
Iteration  28: 681890.846 ops/s
Iteration  29: 683206.422 ops/s
Iteration  30: 682102.190 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_testNewMultimapWithWith":
  681951.696 ±(99.9%) 749.285 ops/s [Average]
  (min, avg, max) = (679906.617, 681951.696, 683737.423), stdev = 1121.494
  CI (99.9%): [681202.411, 682700.981] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score     Error  Units
TreeBagMultimapTest._Benchmark.benchmark_testNewMultimapWithWith  thrpt   30  681951.696 ± 749.285  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_testNewMultimapWithWithWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_testNewMultimapWithWithWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 184020.600 ops/s
# Warmup Iteration   2: 433086.268 ops/s
# Warmup Iteration   3: 499953.118 ops/s
# Warmup Iteration   4: 500977.668 ops/s
# Warmup Iteration   5: 503483.155 ops/s
# Warmup Iteration   6: 420594.855 ops/s
# Warmup Iteration   7: 503595.577 ops/s
# Warmup Iteration   8: 502556.571 ops/s
# Warmup Iteration   9: 503002.056 ops/s
# Warmup Iteration  10: 502763.397 ops/s
# Warmup Iteration  11: 503080.963 ops/s
# Warmup Iteration  12: 501752.543 ops/s
# Warmup Iteration  13: 502604.289 ops/s
# Warmup Iteration  14: 501970.308 ops/s
# Warmup Iteration  15: 502101.142 ops/s
# Warmup Iteration  16: 502180.233 ops/s
# Warmup Iteration  17: 501875.751 ops/s
# Warmup Iteration  18: 501531.587 ops/s
# Warmup Iteration  19: 502879.348 ops/s
# Warmup Iteration  20: 503375.463 ops/s
# Warmup Iteration  21: 501793.424 ops/s
# Warmup Iteration  22: 503661.200 ops/s
# Warmup Iteration  23: 500705.479 ops/s
# Warmup Iteration  24: 501624.949 ops/s
# Warmup Iteration  25: 503574.893 ops/s
# Warmup Iteration  26: 503087.975 ops/s
# Warmup Iteration  27: 503029.780 ops/s
# Warmup Iteration  28: 499819.386 ops/s
# Warmup Iteration  29: 502265.839 ops/s
# Warmup Iteration  30: 503025.426 ops/s
Iteration   1: 503499.562 ops/s
Iteration   2: 501082.971 ops/s
Iteration   3: 502252.598 ops/s
Iteration   4: 502017.920 ops/s
Iteration   5: 494481.036 ops/s
Iteration   6: 503798.090 ops/s
Iteration   7: 499804.020 ops/s
Iteration   8: 503736.770 ops/s
Iteration   9: 502443.554 ops/s
Iteration  10: 501022.697 ops/s
Iteration  11: 500994.688 ops/s
Iteration  12: 502648.204 ops/s
Iteration  13: 502884.818 ops/s
Iteration  14: 502091.682 ops/s
Iteration  15: 503628.977 ops/s
Iteration  16: 502306.560 ops/s
Iteration  17: 495842.081 ops/s
Iteration  18: 502258.423 ops/s
Iteration  19: 500758.622 ops/s
Iteration  20: 503181.380 ops/s
Iteration  21: 502084.241 ops/s
Iteration  22: 502201.414 ops/s
Iteration  23: 502147.417 ops/s
Iteration  24: 502390.707 ops/s
Iteration  25: 503119.411 ops/s
Iteration  26: 501920.181 ops/s
Iteration  27: 503732.384 ops/s
Iteration  28: 501702.756 ops/s
Iteration  29: 502668.523 ops/s
Iteration  30: 501341.835 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_testNewMultimapWithWithWith":
  501801.451 ±(99.9%) 1370.762 ops/s [Average]
  (min, avg, max) = (494481.036, 501801.451, 503798.090), stdev = 2051.693
  CI (99.9%): [500430.688, 503172.213] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
TreeBagMultimapTest._Benchmark.benchmark_testNewMultimapWithWithWith  thrpt   30  501801.451 ± 1370.762  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_testNewMultimapWithWithWithWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_testNewMultimapWithWithWithWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 143572.769 ops/s
# Warmup Iteration   2: 356259.120 ops/s
# Warmup Iteration   3: 418005.484 ops/s
# Warmup Iteration   4: 419694.617 ops/s
# Warmup Iteration   5: 419374.981 ops/s
# Warmup Iteration   6: 350786.241 ops/s
# Warmup Iteration   7: 420066.083 ops/s
# Warmup Iteration   8: 420957.117 ops/s
# Warmup Iteration   9: 419941.060 ops/s
# Warmup Iteration  10: 420187.933 ops/s
# Warmup Iteration  11: 419742.850 ops/s
# Warmup Iteration  12: 420019.712 ops/s
# Warmup Iteration  13: 419864.017 ops/s
# Warmup Iteration  14: 420329.488 ops/s
# Warmup Iteration  15: 420203.598 ops/s
# Warmup Iteration  16: 420338.591 ops/s
# Warmup Iteration  17: 418764.490 ops/s
# Warmup Iteration  18: 417827.190 ops/s
# Warmup Iteration  19: 417405.063 ops/s
# Warmup Iteration  20: 417323.046 ops/s
# Warmup Iteration  21: 417114.451 ops/s
# Warmup Iteration  22: 419633.919 ops/s
# Warmup Iteration  23: 418495.529 ops/s
# Warmup Iteration  24: 418722.790 ops/s
# Warmup Iteration  25: 417975.633 ops/s
# Warmup Iteration  26: 418269.795 ops/s
# Warmup Iteration  27: 418035.104 ops/s
# Warmup Iteration  28: 417056.560 ops/s
# Warmup Iteration  29: 418648.952 ops/s
# Warmup Iteration  30: 417885.223 ops/s
Iteration   1: 417135.292 ops/s
Iteration   2: 418331.721 ops/s
Iteration   3: 417402.394 ops/s
Iteration   4: 419074.233 ops/s
Iteration   5: 418157.899 ops/s
Iteration   6: 418110.676 ops/s
Iteration   7: 418566.324 ops/s
Iteration   8: 417035.190 ops/s
Iteration   9: 419154.767 ops/s
Iteration  10: 418375.527 ops/s
Iteration  11: 418119.932 ops/s
Iteration  12: 418842.090 ops/s
Iteration  13: 418214.462 ops/s
Iteration  14: 418911.400 ops/s
Iteration  15: 418429.542 ops/s
Iteration  16: 417993.938 ops/s
Iteration  17: 418214.638 ops/s
Iteration  18: 418108.130 ops/s
Iteration  19: 418679.918 ops/s
Iteration  20: 417957.329 ops/s
Iteration  21: 419078.919 ops/s
Iteration  22: 419118.735 ops/s
Iteration  23: 417600.203 ops/s
Iteration  24: 418856.941 ops/s
Iteration  25: 417217.528 ops/s
Iteration  26: 418698.427 ops/s
Iteration  27: 418382.827 ops/s
Iteration  28: 418772.741 ops/s
Iteration  29: 418287.071 ops/s
Iteration  30: 418529.953 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_testNewMultimapWithWithWithWith":
  418311.958 ±(99.9%) 393.035 ops/s [Average]
  (min, avg, max) = (417035.190, 418311.958, 419154.767), stdev = 588.276
  CI (99.9%): [417918.924, 418704.993] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score     Error  Units
TreeBagMultimapTest._Benchmark.benchmark_testNewMultimapWithWithWithWith  thrpt   30  418311.958 ± 393.035  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1033377.193 ops/s
# Warmup Iteration   2: 2507555.992 ops/s
# Warmup Iteration   3: 2423196.048 ops/s
# Warmup Iteration   4: 2192766.865 ops/s
# Warmup Iteration   5: 2502382.952 ops/s
# Warmup Iteration   6: 2516627.643 ops/s
# Warmup Iteration   7: 2516733.600 ops/s
# Warmup Iteration   8: 2505085.113 ops/s
# Warmup Iteration   9: 2496687.165 ops/s
# Warmup Iteration  10: 2506678.251 ops/s
# Warmup Iteration  11: 2509498.427 ops/s
# Warmup Iteration  12: 2515694.513 ops/s
# Warmup Iteration  13: 2502423.448 ops/s
# Warmup Iteration  14: 2496462.913 ops/s
# Warmup Iteration  15: 2510373.848 ops/s
# Warmup Iteration  16: 2515246.733 ops/s
# Warmup Iteration  17: 2518545.182 ops/s
# Warmup Iteration  18: 2507290.927 ops/s
# Warmup Iteration  19: 2509306.845 ops/s
# Warmup Iteration  20: 2506504.989 ops/s
# Warmup Iteration  21: 2502234.955 ops/s
# Warmup Iteration  22: 2508664.278 ops/s
# Warmup Iteration  23: 2503757.777 ops/s
# Warmup Iteration  24: 2504471.812 ops/s
# Warmup Iteration  25: 2496103.180 ops/s
# Warmup Iteration  26: 2507314.139 ops/s
# Warmup Iteration  27: 2509946.444 ops/s
# Warmup Iteration  28: 2496097.168 ops/s
# Warmup Iteration  29: 2504551.554 ops/s
# Warmup Iteration  30: 2506808.761 ops/s
Iteration   1: 2521173.398 ops/s
Iteration   2: 2514373.460 ops/s
Iteration   3: 2503186.892 ops/s
Iteration   4: 2517272.028 ops/s
Iteration   5: 2503570.655 ops/s
Iteration   6: 2496286.013 ops/s
Iteration   7: 2502546.552 ops/s
Iteration   8: 2501651.829 ops/s
Iteration   9: 2512663.874 ops/s
Iteration  10: 2510277.869 ops/s
Iteration  11: 2493809.474 ops/s
Iteration  12: 2500153.049 ops/s
Iteration  13: 2503609.081 ops/s
Iteration  14: 2481957.456 ops/s
Iteration  15: 2496954.739 ops/s
Iteration  16: 2499303.438 ops/s
Iteration  17: 2502637.972 ops/s
Iteration  18: 2509903.857 ops/s
Iteration  19: 2512525.851 ops/s
Iteration  20: 2509212.995 ops/s
Iteration  21: 2508201.692 ops/s
Iteration  22: 2500233.234 ops/s
Iteration  23: 2520062.209 ops/s
Iteration  24: 2510723.465 ops/s
Iteration  25: 2505578.564 ops/s
Iteration  26: 2490602.370 ops/s
Iteration  27: 2500414.099 ops/s
Iteration  28: 2518961.175 ops/s
Iteration  29: 2512791.300 ops/s
Iteration  30: 2498221.875 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_testToString":
  2505295.349 ±(99.9%) 6062.900 ops/s [Average]
  (min, avg, max) = (2481957.456, 2505295.349, 2521173.398), stdev = 9074.665
  CI (99.9%): [2499232.448, 2511358.249] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
TreeBagMultimapTest._Benchmark.benchmark_testToString  thrpt   30  2505295.349 ± 6062.900  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_toImmutable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_toImmutable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2634165.776 ops/s
# Warmup Iteration   2: 5554793.972 ops/s
# Warmup Iteration   3: 4683593.217 ops/s
# Warmup Iteration   4: 5529562.734 ops/s
# Warmup Iteration   5: 5555516.606 ops/s
# Warmup Iteration   6: 5587661.873 ops/s
# Warmup Iteration   7: 5594045.432 ops/s
# Warmup Iteration   8: 5586242.864 ops/s
# Warmup Iteration   9: 5590793.645 ops/s
# Warmup Iteration  10: 5541886.270 ops/s
# Warmup Iteration  11: 5586034.770 ops/s
# Warmup Iteration  12: 5570617.582 ops/s
# Warmup Iteration  13: 5578794.327 ops/s
# Warmup Iteration  14: 5620935.223 ops/s
# Warmup Iteration  15: 5571874.086 ops/s
# Warmup Iteration  16: 5586010.103 ops/s
# Warmup Iteration  17: 5618250.632 ops/s
# Warmup Iteration  18: 5588412.837 ops/s
# Warmup Iteration  19: 5633189.640 ops/s
# Warmup Iteration  20: 5553030.286 ops/s
# Warmup Iteration  21: 5592312.262 ops/s
# Warmup Iteration  22: 5566619.227 ops/s
# Warmup Iteration  23: 5630708.674 ops/s
# Warmup Iteration  24: 5595305.689 ops/s
# Warmup Iteration  25: 5578729.394 ops/s
# Warmup Iteration  26: 5597838.785 ops/s
# Warmup Iteration  27: 5599224.955 ops/s
# Warmup Iteration  28: 5556840.900 ops/s
# Warmup Iteration  29: 5576248.056 ops/s
# Warmup Iteration  30: 5514174.584 ops/s
Iteration   1: 5610842.316 ops/s
Iteration   2: 5612617.978 ops/s
Iteration   3: 5517616.191 ops/s
Iteration   4: 5547872.861 ops/s
Iteration   5: 5579419.614 ops/s
Iteration   6: 5551694.831 ops/s
Iteration   7: 5599613.241 ops/s
Iteration   8: 5546954.172 ops/s
Iteration   9: 5530878.204 ops/s
Iteration  10: 5596787.363 ops/s
Iteration  11: 5591306.147 ops/s
Iteration  12: 5589923.105 ops/s
Iteration  13: 5557170.976 ops/s
Iteration  14: 5591612.949 ops/s
Iteration  15: 5528017.752 ops/s
Iteration  16: 5610308.250 ops/s
Iteration  17: 5628093.675 ops/s
Iteration  18: 5552532.600 ops/s
Iteration  19: 5590863.057 ops/s
Iteration  20: 5599344.093 ops/s
Iteration  21: 5599035.917 ops/s
Iteration  22: 5565552.768 ops/s
Iteration  23: 5591281.284 ops/s
Iteration  24: 5549581.356 ops/s
Iteration  25: 5634361.032 ops/s
Iteration  26: 5587522.070 ops/s
Iteration  27: 5602816.202 ops/s
Iteration  28: 5612882.990 ops/s
Iteration  29: 5608515.292 ops/s
Iteration  30: 5591629.350 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_toImmutable":
  5582554.921 ±(99.9%) 20372.646 ops/s [Average]
  (min, avg, max) = (5517616.191, 5582554.921, 5634361.032), stdev = 30492.820
  CI (99.9%): [5562182.275, 5602927.567] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
TreeBagMultimapTest._Benchmark.benchmark_toImmutable  thrpt   30  5582554.921 ± 20372.646  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_toMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_toMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 316088.206 ops/s
# Warmup Iteration   2: 645170.086 ops/s
# Warmup Iteration   3: 704997.534 ops/s
# Warmup Iteration   4: 711880.061 ops/s
# Warmup Iteration   5: 599644.616 ops/s
# Warmup Iteration   6: 713277.552 ops/s
# Warmup Iteration   7: 711810.244 ops/s
# Warmup Iteration   8: 709724.057 ops/s
# Warmup Iteration   9: 710462.585 ops/s
# Warmup Iteration  10: 711022.454 ops/s
# Warmup Iteration  11: 710299.490 ops/s
# Warmup Iteration  12: 709709.792 ops/s
# Warmup Iteration  13: 708709.742 ops/s
# Warmup Iteration  14: 711340.503 ops/s
# Warmup Iteration  15: 710383.552 ops/s
# Warmup Iteration  16: 710267.681 ops/s
# Warmup Iteration  17: 710729.197 ops/s
# Warmup Iteration  18: 708909.742 ops/s
# Warmup Iteration  19: 706949.703 ops/s
# Warmup Iteration  20: 710026.457 ops/s
# Warmup Iteration  21: 711347.223 ops/s
# Warmup Iteration  22: 709213.520 ops/s
# Warmup Iteration  23: 711208.466 ops/s
# Warmup Iteration  24: 708081.898 ops/s
# Warmup Iteration  25: 711608.604 ops/s
# Warmup Iteration  26: 709719.385 ops/s
# Warmup Iteration  27: 707464.958 ops/s
# Warmup Iteration  28: 709419.481 ops/s
# Warmup Iteration  29: 708441.001 ops/s
# Warmup Iteration  30: 708419.395 ops/s
Iteration   1: 711476.259 ops/s
Iteration   2: 704434.674 ops/s
Iteration   3: 704512.986 ops/s
Iteration   4: 708615.042 ops/s
Iteration   5: 710429.147 ops/s
Iteration   6: 712019.400 ops/s
Iteration   7: 709670.985 ops/s
Iteration   8: 707736.304 ops/s
Iteration   9: 709427.660 ops/s
Iteration  10: 708972.158 ops/s
Iteration  11: 708383.134 ops/s
Iteration  12: 708569.869 ops/s
Iteration  13: 710506.394 ops/s
Iteration  14: 709634.372 ops/s
Iteration  15: 706636.215 ops/s
Iteration  16: 710223.538 ops/s
Iteration  17: 712825.588 ops/s
Iteration  18: 709814.573 ops/s
Iteration  19: 708469.803 ops/s
Iteration  20: 710687.721 ops/s
Iteration  21: 710429.812 ops/s
Iteration  22: 711785.481 ops/s
Iteration  23: 709547.174 ops/s
Iteration  24: 708108.235 ops/s
Iteration  25: 706068.678 ops/s
Iteration  26: 709748.040 ops/s
Iteration  27: 711058.014 ops/s
Iteration  28: 706509.836 ops/s
Iteration  29: 711761.675 ops/s
Iteration  30: 712931.176 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_toMap":
  709366.465 ±(99.9%) 1462.363 ops/s [Average]
  (min, avg, max) = (704434.674, 709366.465, 712931.176), stdev = 2188.796
  CI (99.9%): [707904.102, 710828.828] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt       Score      Error  Units
TreeBagMultimapTest._Benchmark.benchmark_toMap  thrpt   30  709366.465 ± 1462.363  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_toMapWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_toMapWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 675946.565 ops/s
# Warmup Iteration   2: 1476509.119 ops/s
# Warmup Iteration   3: 1550136.912 ops/s
# Warmup Iteration   4: 1564510.671 ops/s
# Warmup Iteration   5: 1307315.792 ops/s
# Warmup Iteration   6: 1558827.565 ops/s
# Warmup Iteration   7: 1563345.842 ops/s
# Warmup Iteration   8: 1561725.778 ops/s
# Warmup Iteration   9: 1555530.268 ops/s
# Warmup Iteration  10: 1563297.894 ops/s
# Warmup Iteration  11: 1563358.732 ops/s
# Warmup Iteration  12: 1565030.154 ops/s
# Warmup Iteration  13: 1563108.129 ops/s
# Warmup Iteration  14: 1561397.853 ops/s
# Warmup Iteration  15: 1563694.817 ops/s
# Warmup Iteration  16: 1559392.179 ops/s
# Warmup Iteration  17: 1563934.053 ops/s
# Warmup Iteration  18: 1561953.293 ops/s
# Warmup Iteration  19: 1566948.978 ops/s
# Warmup Iteration  20: 1564052.905 ops/s
# Warmup Iteration  21: 1567259.014 ops/s
# Warmup Iteration  22: 1563318.319 ops/s
# Warmup Iteration  23: 1567729.502 ops/s
# Warmup Iteration  24: 1566783.478 ops/s
# Warmup Iteration  25: 1567431.678 ops/s
# Warmup Iteration  26: 1562645.042 ops/s
# Warmup Iteration  27: 1565649.895 ops/s
# Warmup Iteration  28: 1566513.837 ops/s
# Warmup Iteration  29: 1566980.800 ops/s
# Warmup Iteration  30: 1568123.773 ops/s
Iteration   1: 1563790.660 ops/s
Iteration   2: 1568977.744 ops/s
Iteration   3: 1567028.493 ops/s
Iteration   4: 1566501.675 ops/s
Iteration   5: 1568107.094 ops/s
Iteration   6: 1573296.221 ops/s
Iteration   7: 1562606.986 ops/s
Iteration   8: 1568535.148 ops/s
Iteration   9: 1564100.200 ops/s
Iteration  10: 1564432.031 ops/s
Iteration  11: 1570102.097 ops/s
Iteration  12: 1564266.847 ops/s
Iteration  13: 1564394.529 ops/s
Iteration  14: 1564449.981 ops/s
Iteration  15: 1565163.750 ops/s
Iteration  16: 1569426.352 ops/s
Iteration  17: 1562106.634 ops/s
Iteration  18: 1568212.349 ops/s
Iteration  19: 1570950.112 ops/s
Iteration  20: 1560225.193 ops/s
Iteration  21: 1565162.844 ops/s
Iteration  22: 1568801.381 ops/s
Iteration  23: 1565132.822 ops/s
Iteration  24: 1569386.848 ops/s
Iteration  25: 1569198.640 ops/s
Iteration  26: 1564270.672 ops/s
Iteration  27: 1559527.624 ops/s
Iteration  28: 1568105.408 ops/s
Iteration  29: 1566899.952 ops/s
Iteration  30: 1565942.480 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_toMapWithTarget":
  1566303.426 ±(99.9%) 2113.718 ops/s [Average]
  (min, avg, max) = (1559527.624, 1566303.426, 1573296.221), stdev = 3163.714
  CI (99.9%): [1564189.708, 1568417.144] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
TreeBagMultimapTest._Benchmark.benchmark_toMapWithTarget  thrpt   30  1566303.426 ± 2113.718  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_toMutable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_toMutable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 436042.356 ops/s
# Warmup Iteration   2: 934351.509 ops/s
# Warmup Iteration   3: 983915.495 ops/s
# Warmup Iteration   4: 985481.253 ops/s
# Warmup Iteration   5: 842019.413 ops/s
# Warmup Iteration   6: 983488.568 ops/s
# Warmup Iteration   7: 989443.072 ops/s
# Warmup Iteration   8: 989884.558 ops/s
# Warmup Iteration   9: 986980.325 ops/s
# Warmup Iteration  10: 985452.257 ops/s
# Warmup Iteration  11: 984882.003 ops/s
# Warmup Iteration  12: 983890.799 ops/s
# Warmup Iteration  13: 985284.008 ops/s
# Warmup Iteration  14: 989005.049 ops/s
# Warmup Iteration  15: 987536.980 ops/s
# Warmup Iteration  16: 986785.295 ops/s
# Warmup Iteration  17: 986770.789 ops/s
# Warmup Iteration  18: 986040.014 ops/s
# Warmup Iteration  19: 989891.265 ops/s
# Warmup Iteration  20: 987482.461 ops/s
# Warmup Iteration  21: 988274.966 ops/s
# Warmup Iteration  22: 989427.838 ops/s
# Warmup Iteration  23: 988761.038 ops/s
# Warmup Iteration  24: 989183.264 ops/s
# Warmup Iteration  25: 985593.416 ops/s
# Warmup Iteration  26: 982761.488 ops/s
# Warmup Iteration  27: 984935.710 ops/s
# Warmup Iteration  28: 988766.553 ops/s
# Warmup Iteration  29: 988306.881 ops/s
# Warmup Iteration  30: 981985.620 ops/s
Iteration   1: 983936.098 ops/s
Iteration   2: 983138.669 ops/s
Iteration   3: 988398.377 ops/s
Iteration   4: 989538.149 ops/s
Iteration   5: 987577.436 ops/s
Iteration   6: 986305.410 ops/s
Iteration   7: 986021.720 ops/s
Iteration   8: 984524.143 ops/s
Iteration   9: 988872.074 ops/s
Iteration  10: 984354.305 ops/s
Iteration  11: 979558.750 ops/s
Iteration  12: 989892.987 ops/s
Iteration  13: 987360.831 ops/s
Iteration  14: 987889.675 ops/s
Iteration  15: 991869.136 ops/s
Iteration  16: 977861.454 ops/s
Iteration  17: 986241.375 ops/s
Iteration  18: 987115.364 ops/s
Iteration  19: 987136.250 ops/s
Iteration  20: 983231.397 ops/s
Iteration  21: 981406.649 ops/s
Iteration  22: 987174.538 ops/s
Iteration  23: 993004.254 ops/s
Iteration  24: 984208.185 ops/s
Iteration  25: 989062.425 ops/s
Iteration  26: 986851.627 ops/s
Iteration  27: 984981.110 ops/s
Iteration  28: 988751.776 ops/s
Iteration  29: 988724.100 ops/s
Iteration  30: 988614.700 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_toMutable":
  986453.432 ±(99.9%) 2222.801 ops/s [Average]
  (min, avg, max) = (977861.454, 986453.432, 993004.254), stdev = 3326.985
  CI (99.9%): [984230.631, 988676.234] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score      Error  Units
TreeBagMultimapTest._Benchmark.benchmark_toMutable  thrpt   30  986453.432 ± 2222.801  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_valuesView$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_valuesView

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 567451.975 ops/s
# Warmup Iteration   2: 1254879.791 ops/s
# Warmup Iteration   3: 1387323.822 ops/s
# Warmup Iteration   4: 1398694.929 ops/s
# Warmup Iteration   5: 1160745.617 ops/s
# Warmup Iteration   6: 1399954.945 ops/s
# Warmup Iteration   7: 1401912.398 ops/s
# Warmup Iteration   8: 1398501.037 ops/s
# Warmup Iteration   9: 1401703.459 ops/s
# Warmup Iteration  10: 1395579.578 ops/s
# Warmup Iteration  11: 1398321.050 ops/s
# Warmup Iteration  12: 1398492.833 ops/s
# Warmup Iteration  13: 1400040.819 ops/s
# Warmup Iteration  14: 1395237.874 ops/s
# Warmup Iteration  15: 1399011.957 ops/s
# Warmup Iteration  16: 1401074.730 ops/s
# Warmup Iteration  17: 1402120.886 ops/s
# Warmup Iteration  18: 1400117.061 ops/s
# Warmup Iteration  19: 1400148.642 ops/s
# Warmup Iteration  20: 1399787.012 ops/s
# Warmup Iteration  21: 1399705.610 ops/s
# Warmup Iteration  22: 1399206.880 ops/s
# Warmup Iteration  23: 1400700.541 ops/s
# Warmup Iteration  24: 1394918.666 ops/s
# Warmup Iteration  25: 1398902.693 ops/s
# Warmup Iteration  26: 1398542.773 ops/s
# Warmup Iteration  27: 1398871.466 ops/s
# Warmup Iteration  28: 1397350.941 ops/s
# Warmup Iteration  29: 1391790.845 ops/s
# Warmup Iteration  30: 1400789.406 ops/s
Iteration   1: 1398398.453 ops/s
Iteration   2: 1400970.608 ops/s
Iteration   3: 1398758.473 ops/s
Iteration   4: 1397730.132 ops/s
Iteration   5: 1399330.036 ops/s
Iteration   6: 1395364.936 ops/s
Iteration   7: 1395520.085 ops/s
Iteration   8: 1403311.195 ops/s
Iteration   9: 1397082.953 ops/s
Iteration  10: 1399845.190 ops/s
Iteration  11: 1396067.705 ops/s
Iteration  12: 1404089.357 ops/s
Iteration  13: 1400726.234 ops/s
Iteration  14: 1393292.095 ops/s
Iteration  15: 1400684.750 ops/s
Iteration  16: 1397054.812 ops/s
Iteration  17: 1400715.764 ops/s
Iteration  18: 1402866.149 ops/s
Iteration  19: 1401790.799 ops/s
Iteration  20: 1400767.449 ops/s
Iteration  21: 1400985.159 ops/s
Iteration  22: 1399218.338 ops/s
Iteration  23: 1403699.755 ops/s
Iteration  24: 1403797.965 ops/s
Iteration  25: 1396588.793 ops/s
Iteration  26: 1397933.817 ops/s
Iteration  27: 1397919.305 ops/s
Iteration  28: 1395603.533 ops/s
Iteration  29: 1398714.135 ops/s
Iteration  30: 1399906.570 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_valuesView":
  1399291.151 ±(99.9%) 1868.911 ops/s [Average]
  (min, avg, max) = (1393292.095, 1399291.151, 1404089.357), stdev = 2797.299
  CI (99.9%): [1397422.240, 1401160.063] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
TreeBagMultimapTest._Benchmark.benchmark_valuesView  thrpt   30  1399291.151 ± 1868.911  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_withKeyMultiValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_withKeyMultiValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 157894.874 ops/s
# Warmup Iteration   2: 291597.573 ops/s
# Warmup Iteration   3: 331648.299 ops/s
# Warmup Iteration   4: 336070.403 ops/s
# Warmup Iteration   5: 335701.815 ops/s
# Warmup Iteration   6: 283801.509 ops/s
# Warmup Iteration   7: 336736.039 ops/s
# Warmup Iteration   8: 336152.693 ops/s
# Warmup Iteration   9: 336192.242 ops/s
# Warmup Iteration  10: 336199.765 ops/s
# Warmup Iteration  11: 336547.234 ops/s
# Warmup Iteration  12: 336211.077 ops/s
# Warmup Iteration  13: 336278.448 ops/s
# Warmup Iteration  14: 336122.637 ops/s
# Warmup Iteration  15: 336611.832 ops/s
# Warmup Iteration  16: 336270.554 ops/s
# Warmup Iteration  17: 335998.749 ops/s
# Warmup Iteration  18: 335972.063 ops/s
# Warmup Iteration  19: 336183.399 ops/s
# Warmup Iteration  20: 336169.418 ops/s
# Warmup Iteration  21: 336413.930 ops/s
# Warmup Iteration  22: 336187.565 ops/s
# Warmup Iteration  23: 336691.015 ops/s
# Warmup Iteration  24: 336026.017 ops/s
# Warmup Iteration  25: 336371.648 ops/s
# Warmup Iteration  26: 336208.373 ops/s
# Warmup Iteration  27: 335973.550 ops/s
# Warmup Iteration  28: 336081.965 ops/s
# Warmup Iteration  29: 335461.506 ops/s
# Warmup Iteration  30: 336075.587 ops/s
Iteration   1: 335567.043 ops/s
Iteration   2: 335825.515 ops/s
Iteration   3: 336774.153 ops/s
Iteration   4: 336703.886 ops/s
Iteration   5: 336461.090 ops/s
Iteration   6: 335669.976 ops/s
Iteration   7: 335690.434 ops/s
Iteration   8: 336207.770 ops/s
Iteration   9: 335595.519 ops/s
Iteration  10: 335845.326 ops/s
Iteration  11: 336494.916 ops/s
Iteration  12: 336909.128 ops/s
Iteration  13: 336358.037 ops/s
Iteration  14: 336068.324 ops/s
Iteration  15: 335227.866 ops/s
Iteration  16: 336617.685 ops/s
Iteration  17: 336012.255 ops/s
Iteration  18: 336145.318 ops/s
Iteration  19: 336650.338 ops/s
Iteration  20: 335543.146 ops/s
Iteration  21: 335560.891 ops/s
Iteration  22: 335876.572 ops/s
Iteration  23: 335907.488 ops/s
Iteration  24: 336290.249 ops/s
Iteration  25: 335801.438 ops/s
Iteration  26: 336461.618 ops/s
Iteration  27: 336049.920 ops/s
Iteration  28: 335918.346 ops/s
Iteration  29: 336044.098 ops/s
Iteration  30: 336012.280 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_withKeyMultiValues":
  336076.354 ±(99.9%) 282.515 ops/s [Average]
  (min, avg, max) = (335227.866, 336076.354, 336909.128), stdev = 422.856
  CI (99.9%): [335793.839, 336358.870] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score     Error  Units
TreeBagMultimapTest._Benchmark.benchmark_withKeyMultiValues  thrpt   30  336076.354 ± 282.515  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_withKeyMultiValuesNullValueHandling$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_withKeyMultiValuesNullValueHandling

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 715509.223 ops/s
# Warmup Iteration   2: 741809.066 ops/s
# Warmup Iteration   3: 979645.356 ops/s
# Warmup Iteration   4: 974783.637 ops/s
# Warmup Iteration   5: 973780.291 ops/s
# Warmup Iteration   6: 979406.537 ops/s
# Warmup Iteration   7: 975191.925 ops/s
# Warmup Iteration   8: 975874.335 ops/s
# Warmup Iteration   9: 978377.671 ops/s
# Warmup Iteration  10: 977353.389 ops/s
# Warmup Iteration  11: 941242.367 ops/s
# Warmup Iteration  12: 865456.031 ops/s
# Warmup Iteration  13: 978706.352 ops/s
# Warmup Iteration  14: 974935.947 ops/s
# Warmup Iteration  15: 977036.787 ops/s
# Warmup Iteration  16: 978133.465 ops/s
# Warmup Iteration  17: 1030989.707 ops/s
# Warmup Iteration  18: 1028719.926 ops/s
# Warmup Iteration  19: 1028993.480 ops/s
# Warmup Iteration  20: 1028912.941 ops/s
# Warmup Iteration  21: 1027312.589 ops/s
# Warmup Iteration  22: 1025880.351 ops/s
# Warmup Iteration  23: 1028310.440 ops/s
# Warmup Iteration  24: 1025845.053 ops/s
# Warmup Iteration  25: 1024369.711 ops/s
# Warmup Iteration  26: 1027345.489 ops/s
# Warmup Iteration  27: 1028056.518 ops/s
# Warmup Iteration  28: 1027418.626 ops/s
# Warmup Iteration  29: 1024967.928 ops/s
# Warmup Iteration  30: 1025549.370 ops/s
Iteration   1: 1020724.359 ops/s
Iteration   2: 1023688.888 ops/s
Iteration   3: 1008575.370 ops/s
Iteration   4: 1027635.967 ops/s
Iteration   5: 1027858.186 ops/s
Iteration   6: 1030661.169 ops/s
Iteration   7: 1033596.252 ops/s
Iteration   8: 1026964.310 ops/s
Iteration   9: 1025584.103 ops/s
Iteration  10: 1030831.734 ops/s
Iteration  11: 1012378.945 ops/s
Iteration  12: 1031119.168 ops/s
Iteration  13: 1032122.686 ops/s
Iteration  14: 1030451.597 ops/s
Iteration  15: 1025436.001 ops/s
Iteration  16: 1033295.613 ops/s
Iteration  17: 1024135.113 ops/s
Iteration  18: 1027100.238 ops/s
Iteration  19: 1029081.869 ops/s
Iteration  20: 1023327.868 ops/s
Iteration  21: 1025652.295 ops/s
Iteration  22: 1033183.721 ops/s
Iteration  23: 1024126.766 ops/s
Iteration  24: 1025255.199 ops/s
Iteration  25: 1029530.745 ops/s
Iteration  26: 1024758.186 ops/s
Iteration  27: 1028187.818 ops/s
Iteration  28: 1009012.473 ops/s
Iteration  29: 1030260.928 ops/s
Iteration  30: 1010571.788 ops/s


Result "org.eclipse.collections.impl.multimap.bag.sorted.mutable.TreeBagMultimapTest._Benchmark.benchmark_withKeyMultiValuesNullValueHandling":
  1025503.645 ±(99.9%) 4646.525 ops/s [Average]
  (min, avg, max) = (1008575.370, 1025503.645, 1033596.252), stdev = 6954.700
  CI (99.9%): [1020857.120, 1030150.170] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score      Error  Units
TreeBagMultimapTest._Benchmark.benchmark_withKeyMultiValuesNullValueHandling  thrpt   30  1025503.645 ± 4646.525  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_addAndGrowMultimap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_addAndGrowMultimap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 277121.868 ops/s
# Warmup Iteration   2: 698757.558 ops/s
# Warmup Iteration   3: 765565.174 ops/s
# Warmup Iteration   4: 726132.492 ops/s
# Warmup Iteration   5: 687116.675 ops/s
# Warmup Iteration   6: 773137.400 ops/s
# Warmup Iteration   7: 772811.550 ops/s
# Warmup Iteration   8: 772739.141 ops/s
# Warmup Iteration   9: 775684.947 ops/s
# Warmup Iteration  10: 773104.624 ops/s
# Warmup Iteration  11: 772332.348 ops/s
# Warmup Iteration  12: 774382.883 ops/s
# Warmup Iteration  13: 772532.271 ops/s
# Warmup Iteration  14: 773114.733 ops/s
# Warmup Iteration  15: 773767.604 ops/s
# Warmup Iteration  16: 773466.122 ops/s
# Warmup Iteration  17: 773303.868 ops/s
# Warmup Iteration  18: 775299.420 ops/s
# Warmup Iteration  19: 772366.710 ops/s
# Warmup Iteration  20: 774032.895 ops/s
# Warmup Iteration  21: 773420.094 ops/s
# Warmup Iteration  22: 773816.172 ops/s
# Warmup Iteration  23: 774248.773 ops/s
# Warmup Iteration  24: 755751.082 ops/s
# Warmup Iteration  25: 771134.227 ops/s
# Warmup Iteration  26: 774114.994 ops/s
# Warmup Iteration  27: 774827.159 ops/s
# Warmup Iteration  28: 773464.776 ops/s
# Warmup Iteration  29: 774338.632 ops/s
# Warmup Iteration  30: 772350.747 ops/s
Iteration   1: 776376.451 ops/s
Iteration   2: 773482.887 ops/s
Iteration   3: 772414.688 ops/s
Iteration   4: 773759.062 ops/s
Iteration   5: 776322.099 ops/s
Iteration   6: 775064.156 ops/s
Iteration   7: 772888.777 ops/s
Iteration   8: 773000.059 ops/s
Iteration   9: 773273.681 ops/s
Iteration  10: 773984.932 ops/s
Iteration  11: 774633.654 ops/s
Iteration  12: 760494.373 ops/s
Iteration  13: 773767.004 ops/s
Iteration  14: 770814.609 ops/s
Iteration  15: 776532.306 ops/s
Iteration  16: 771934.941 ops/s
Iteration  17: 773371.205 ops/s
Iteration  18: 771572.935 ops/s
Iteration  19: 774271.796 ops/s
Iteration  20: 773674.885 ops/s
Iteration  21: 776050.099 ops/s
Iteration  22: 771781.148 ops/s
Iteration  23: 771885.835 ops/s
Iteration  24: 771512.076 ops/s
Iteration  25: 772910.822 ops/s
Iteration  26: 775931.296 ops/s
Iteration  27: 772916.295 ops/s
Iteration  28: 773605.211 ops/s
Iteration  29: 768887.955 ops/s
Iteration  30: 773661.497 ops/s


Result "org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_addAndGrowMultimap":
  773025.891 ±(99.9%) 1968.436 ops/s [Average]
  (min, avg, max) = (760494.373, 773025.891, 776532.306), stdev = 2946.263
  CI (99.9%): [771057.455, 774994.327] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score      Error  Units
HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_addAndGrowMultimap  thrpt   30  773025.891 ± 1968.436  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 129432.443 ops/s
# Warmup Iteration   2: 433795.694 ops/s
# Warmup Iteration   3: 510564.165 ops/s
# Warmup Iteration   4: 512004.984 ops/s
# Warmup Iteration   5: 427624.978 ops/s
# Warmup Iteration   6: 508814.478 ops/s
# Warmup Iteration   7: 512762.228 ops/s
# Warmup Iteration   8: 511494.870 ops/s
# Warmup Iteration   9: 514070.284 ops/s
# Warmup Iteration  10: 513861.837 ops/s
# Warmup Iteration  11: 512937.935 ops/s
# Warmup Iteration  12: 514002.664 ops/s
# Warmup Iteration  13: 511908.329 ops/s
# Warmup Iteration  14: 513345.163 ops/s
# Warmup Iteration  15: 514392.752 ops/s
# Warmup Iteration  16: 514424.036 ops/s
# Warmup Iteration  17: 510556.922 ops/s
# Warmup Iteration  18: 515660.605 ops/s
# Warmup Iteration  19: 513526.947 ops/s
# Warmup Iteration  20: 514031.050 ops/s
# Warmup Iteration  21: 514393.435 ops/s
# Warmup Iteration  22: 515244.219 ops/s
# Warmup Iteration  23: 513251.363 ops/s
# Warmup Iteration  24: 514725.918 ops/s
# Warmup Iteration  25: 514223.978 ops/s
# Warmup Iteration  26: 512275.596 ops/s
# Warmup Iteration  27: 514284.006 ops/s
# Warmup Iteration  28: 514224.641 ops/s
# Warmup Iteration  29: 514666.963 ops/s
# Warmup Iteration  30: 514372.959 ops/s
Iteration   1: 514552.520 ops/s
Iteration   2: 514656.047 ops/s
Iteration   3: 514220.984 ops/s
Iteration   4: 514848.782 ops/s
Iteration   5: 515126.405 ops/s
Iteration   6: 515003.174 ops/s
Iteration   7: 513727.862 ops/s
Iteration   8: 513584.575 ops/s
Iteration   9: 514587.562 ops/s
Iteration  10: 515373.576 ops/s
Iteration  11: 512072.802 ops/s
Iteration  12: 514513.952 ops/s
Iteration  13: 504586.004 ops/s
Iteration  14: 515079.331 ops/s
Iteration  15: 513567.778 ops/s
Iteration  16: 514728.300 ops/s
Iteration  17: 514107.061 ops/s
Iteration  18: 514746.171 ops/s
Iteration  19: 514057.562 ops/s
Iteration  20: 507345.231 ops/s
Iteration  21: 514537.973 ops/s
Iteration  22: 516127.205 ops/s
Iteration  23: 514559.735 ops/s
Iteration  24: 513426.540 ops/s
Iteration  25: 514507.537 ops/s
Iteration  26: 514043.269 ops/s
Iteration  27: 513481.881 ops/s
Iteration  28: 514118.919 ops/s
Iteration  29: 515356.586 ops/s
Iteration  30: 511887.372 ops/s


Result "org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_clear":
  513751.090 ±(99.9%) 1549.792 ops/s [Average]
  (min, avg, max) = (504586.004, 513751.090, 516127.205), stdev = 2319.656
  CI (99.9%): [512201.298, 515300.882] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_clear  thrpt   30  513751.090 ± 1549.792  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_collectKeyMultiValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_collectKeyMultiValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 30549.115 ops/s
# Warmup Iteration   2: 54463.624 ops/s
# Warmup Iteration   3: 67382.907 ops/s
# Warmup Iteration   4: 67867.634 ops/s
# Warmup Iteration   5: 67723.955 ops/s
# Warmup Iteration   6: 67445.316 ops/s
# Warmup Iteration   7: 57114.377 ops/s
# Warmup Iteration   8: 68025.679 ops/s
# Warmup Iteration   9: 68113.120 ops/s
# Warmup Iteration  10: 67373.878 ops/s
# Warmup Iteration  11: 67992.652 ops/s
# Warmup Iteration  12: 67902.065 ops/s
# Warmup Iteration  13: 68014.956 ops/s
# Warmup Iteration  14: 67829.638 ops/s
# Warmup Iteration  15: 67913.953 ops/s
# Warmup Iteration  16: 68358.423 ops/s
# Warmup Iteration  17: 68073.450 ops/s
# Warmup Iteration  18: 68125.577 ops/s
# Warmup Iteration  19: 67443.419 ops/s
# Warmup Iteration  20: 67936.534 ops/s
# Warmup Iteration  21: 68229.203 ops/s
# Warmup Iteration  22: 68064.985 ops/s
# Warmup Iteration  23: 67619.207 ops/s
# Warmup Iteration  24: 67926.112 ops/s
# Warmup Iteration  25: 68106.750 ops/s
# Warmup Iteration  26: 67901.824 ops/s
# Warmup Iteration  27: 68348.246 ops/s
# Warmup Iteration  28: 67687.243 ops/s
# Warmup Iteration  29: 68214.539 ops/s
# Warmup Iteration  30: 67907.112 ops/s
Iteration   1: 68327.281 ops/s
Iteration   2: 68353.834 ops/s
Iteration   3: 68390.919 ops/s
Iteration   4: 68275.231 ops/s
Iteration   5: 68155.541 ops/s
Iteration   6: 68031.500 ops/s
Iteration   7: 68345.464 ops/s
Iteration   8: 67125.220 ops/s
Iteration   9: 68246.433 ops/s
Iteration  10: 67737.850 ops/s
Iteration  11: 68262.210 ops/s
Iteration  12: 68160.048 ops/s
Iteration  13: 68169.040 ops/s
Iteration  14: 68176.271 ops/s
Iteration  15: 68058.805 ops/s
Iteration  16: 68332.650 ops/s
Iteration  17: 68098.024 ops/s
Iteration  18: 68176.854 ops/s
Iteration  19: 68057.031 ops/s
Iteration  20: 68099.752 ops/s
Iteration  21: 68208.059 ops/s
Iteration  22: 67993.579 ops/s
Iteration  23: 67762.871 ops/s
Iteration  24: 67682.808 ops/s
Iteration  25: 67001.099 ops/s
Iteration  26: 67927.571 ops/s
Iteration  27: 68031.818 ops/s
Iteration  28: 68018.662 ops/s
Iteration  29: 67859.577 ops/s
Iteration  30: 67854.648 ops/s


Result "org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_collectKeyMultiValues":
  68030.688 ±(99.9%) 216.298 ops/s [Average]
  (min, avg, max) = (67001.099, 68030.688, 68390.919), stdev = 323.744
  CI (99.9%): [67814.391, 68246.986] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt      Score     Error  Units
HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_collectKeyMultiValues  thrpt   30  68030.688 ± 216.298  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_collectKeysValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_collectKeysValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 38783.097 ops/s
# Warmup Iteration   2: 82086.516 ops/s
# Warmup Iteration   3: 92948.822 ops/s
# Warmup Iteration   4: 94410.289 ops/s
# Warmup Iteration   5: 77082.436 ops/s
# Warmup Iteration   6: 94791.388 ops/s
# Warmup Iteration   7: 93978.293 ops/s
# Warmup Iteration   8: 94385.806 ops/s
# Warmup Iteration   9: 94379.295 ops/s
# Warmup Iteration  10: 94370.212 ops/s
# Warmup Iteration  11: 94080.850 ops/s
# Warmup Iteration  12: 93656.584 ops/s
# Warmup Iteration  13: 93456.718 ops/s
# Warmup Iteration  14: 93870.048 ops/s
# Warmup Iteration  15: 94330.806 ops/s
# Warmup Iteration  16: 94083.119 ops/s
# Warmup Iteration  17: 93526.977 ops/s
# Warmup Iteration  18: 94248.202 ops/s
# Warmup Iteration  19: 94056.798 ops/s
# Warmup Iteration  20: 93904.355 ops/s
# Warmup Iteration  21: 94717.727 ops/s
# Warmup Iteration  22: 93892.932 ops/s
# Warmup Iteration  23: 93957.675 ops/s
# Warmup Iteration  24: 94960.745 ops/s
# Warmup Iteration  25: 93607.944 ops/s
# Warmup Iteration  26: 94680.717 ops/s
# Warmup Iteration  27: 94194.466 ops/s
# Warmup Iteration  28: 94224.006 ops/s
# Warmup Iteration  29: 94481.818 ops/s
# Warmup Iteration  30: 94258.055 ops/s
Iteration   1: 94864.303 ops/s
Iteration   2: 94774.463 ops/s
Iteration   3: 93741.932 ops/s
Iteration   4: 94834.097 ops/s
Iteration   5: 94721.971 ops/s
Iteration   6: 95411.632 ops/s
Iteration   7: 93975.028 ops/s
Iteration   8: 94205.086 ops/s
Iteration   9: 94545.785 ops/s
Iteration  10: 94769.709 ops/s
Iteration  11: 93927.754 ops/s
Iteration  12: 95178.168 ops/s
Iteration  13: 95235.614 ops/s
Iteration  14: 93947.040 ops/s
Iteration  15: 93361.799 ops/s
Iteration  16: 94794.500 ops/s
Iteration  17: 94014.899 ops/s
Iteration  18: 94057.568 ops/s
Iteration  19: 94337.950 ops/s
Iteration  20: 94357.871 ops/s
Iteration  21: 94792.478 ops/s
Iteration  22: 95254.203 ops/s
Iteration  23: 94621.836 ops/s
Iteration  24: 94020.090 ops/s
Iteration  25: 94819.022 ops/s
Iteration  26: 94586.087 ops/s
Iteration  27: 95087.481 ops/s
Iteration  28: 95119.395 ops/s
Iteration  29: 94458.436 ops/s
Iteration  30: 94647.394 ops/s


Result "org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_collectKeysValues":
  94548.786 ±(99.9%) 337.396 ops/s [Average]
  (min, avg, max) = (93361.799, 94548.786, 95411.632), stdev = 504.998
  CI (99.9%): [94211.391, 94886.182] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt      Score     Error  Units
HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_collectKeysValues  thrpt   30  94548.786 ± 337.396  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_collectValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_collectValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 52956.993 ops/s
# Warmup Iteration   2: 105242.602 ops/s
# Warmup Iteration   3: 120632.400 ops/s
# Warmup Iteration   4: 121311.849 ops/s
# Warmup Iteration   5: 117404.607 ops/s
# Warmup Iteration   6: 104820.544 ops/s
# Warmup Iteration   7: 121116.697 ops/s
# Warmup Iteration   8: 122308.456 ops/s
# Warmup Iteration   9: 121197.822 ops/s
# Warmup Iteration  10: 121979.083 ops/s
# Warmup Iteration  11: 121428.814 ops/s
# Warmup Iteration  12: 121661.534 ops/s
# Warmup Iteration  13: 121336.182 ops/s
# Warmup Iteration  14: 121520.620 ops/s
# Warmup Iteration  15: 121248.737 ops/s
# Warmup Iteration  16: 122031.119 ops/s
# Warmup Iteration  17: 121442.193 ops/s
# Warmup Iteration  18: 121904.977 ops/s
# Warmup Iteration  19: 120987.805 ops/s
# Warmup Iteration  20: 121028.653 ops/s
# Warmup Iteration  21: 121798.029 ops/s
# Warmup Iteration  22: 121507.188 ops/s
# Warmup Iteration  23: 120750.737 ops/s
# Warmup Iteration  24: 122413.775 ops/s
# Warmup Iteration  25: 121624.690 ops/s
# Warmup Iteration  26: 120581.428 ops/s
# Warmup Iteration  27: 120774.944 ops/s
# Warmup Iteration  28: 122499.394 ops/s
# Warmup Iteration  29: 121559.956 ops/s
# Warmup Iteration  30: 121314.520 ops/s
Iteration   1: 119712.450 ops/s
Iteration   2: 121143.487 ops/s
Iteration   3: 120919.216 ops/s
Iteration   4: 121973.797 ops/s
Iteration   5: 121929.276 ops/s
Iteration   6: 121843.228 ops/s
Iteration   7: 121739.155 ops/s
Iteration   8: 121334.182 ops/s
Iteration   9: 122004.431 ops/s
Iteration  10: 121132.584 ops/s
Iteration  11: 121638.513 ops/s
Iteration  12: 121932.177 ops/s
Iteration  13: 121449.074 ops/s
Iteration  14: 121403.519 ops/s
Iteration  15: 121146.966 ops/s
Iteration  16: 121175.991 ops/s
Iteration  17: 122283.896 ops/s
Iteration  18: 120538.857 ops/s
Iteration  19: 122136.766 ops/s
Iteration  20: 120991.371 ops/s
Iteration  21: 121210.975 ops/s
Iteration  22: 121336.528 ops/s
Iteration  23: 119648.463 ops/s
Iteration  24: 120802.240 ops/s
Iteration  25: 121173.178 ops/s
Iteration  26: 120245.285 ops/s
Iteration  27: 118856.038 ops/s
Iteration  28: 121251.025 ops/s
Iteration  29: 120813.562 ops/s
Iteration  30: 121385.455 ops/s


Result "org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_collectValues":
  121171.723 ±(99.9%) 516.337 ops/s [Average]
  (min, avg, max) = (118856.038, 121171.723, 122283.896), stdev = 772.829
  CI (99.9%): [120655.386, 121688.060] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score     Error  Units
HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_collectValues  thrpt   30  121171.723 ± 516.337  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_containsValue$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_containsValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1213462.285 ops/s
# Warmup Iteration   2: 2780119.249 ops/s
# Warmup Iteration   3: 2968394.697 ops/s
# Warmup Iteration   4: 2838924.635 ops/s
# Warmup Iteration   5: 2572051.164 ops/s
# Warmup Iteration   6: 2973517.611 ops/s
# Warmup Iteration   7: 2963452.925 ops/s
# Warmup Iteration   8: 2968499.400 ops/s
# Warmup Iteration   9: 2971435.324 ops/s
# Warmup Iteration  10: 2958944.015 ops/s
# Warmup Iteration  11: 2970066.214 ops/s
# Warmup Iteration  12: 2975076.503 ops/s
# Warmup Iteration  13: 2975576.296 ops/s
# Warmup Iteration  14: 2973192.059 ops/s
# Warmup Iteration  15: 2943802.625 ops/s
# Warmup Iteration  16: 2975699.983 ops/s
# Warmup Iteration  17: 2966087.028 ops/s
# Warmup Iteration  18: 2982344.687 ops/s
# Warmup Iteration  19: 2971758.257 ops/s
# Warmup Iteration  20: 2969939.673 ops/s
# Warmup Iteration  21: 2931360.633 ops/s
# Warmup Iteration  22: 2953277.122 ops/s
# Warmup Iteration  23: 2964886.137 ops/s
# Warmup Iteration  24: 2982985.018 ops/s
# Warmup Iteration  25: 2978375.228 ops/s
# Warmup Iteration  26: 2971494.756 ops/s
# Warmup Iteration  27: 2969927.666 ops/s
# Warmup Iteration  28: 2973194.983 ops/s
# Warmup Iteration  29: 2970727.091 ops/s
# Warmup Iteration  30: 2980513.772 ops/s
Iteration   1: 2977821.209 ops/s
Iteration   2: 2970178.714 ops/s
Iteration   3: 2961812.042 ops/s
Iteration   4: 2973784.512 ops/s
Iteration   5: 2980113.608 ops/s
Iteration   6: 2973150.007 ops/s
Iteration   7: 2975742.248 ops/s
Iteration   8: 2984531.630 ops/s
Iteration   9: 2972064.570 ops/s
Iteration  10: 2980566.524 ops/s
Iteration  11: 2979367.378 ops/s
Iteration  12: 2972530.514 ops/s
Iteration  13: 2979872.519 ops/s
Iteration  14: 2976234.836 ops/s
Iteration  15: 2977985.538 ops/s
Iteration  16: 2968919.357 ops/s
Iteration  17: 2953740.279 ops/s
Iteration  18: 2977159.352 ops/s
Iteration  19: 2981716.536 ops/s
Iteration  20: 2980821.566 ops/s
Iteration  21: 2979990.090 ops/s
Iteration  22: 2971555.319 ops/s
Iteration  23: 2977662.747 ops/s
Iteration  24: 2974775.628 ops/s
Iteration  25: 2970994.211 ops/s
Iteration  26: 2975713.890 ops/s
Iteration  27: 2969527.942 ops/s
Iteration  28: 2973345.624 ops/s
Iteration  29: 2972460.780 ops/s
Iteration  30: 2978385.138 ops/s


Result "org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_containsValue":
  2974750.810 ±(99.9%) 4130.347 ops/s [Average]
  (min, avg, max) = (2953740.279, 2974750.810, 2984531.630), stdev = 6182.110
  CI (99.9%): [2970620.463, 2978881.157] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score      Error  Units
HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_containsValue  thrpt   30  2974750.810 ± 4130.347  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_flip$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_flip

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 457445.307 ops/s
# Warmup Iteration   2: 940434.896 ops/s
# Warmup Iteration   3: 1027903.030 ops/s
# Warmup Iteration   4: 1029924.352 ops/s
# Warmup Iteration   5: 849167.235 ops/s
# Warmup Iteration   6: 1024263.587 ops/s
# Warmup Iteration   7: 1027762.880 ops/s
# Warmup Iteration   8: 1029018.919 ops/s
# Warmup Iteration   9: 1028947.725 ops/s
# Warmup Iteration  10: 1030257.807 ops/s
# Warmup Iteration  11: 1028289.393 ops/s
# Warmup Iteration  12: 1029192.131 ops/s
# Warmup Iteration  13: 1030420.101 ops/s
# Warmup Iteration  14: 1023072.345 ops/s
# Warmup Iteration  15: 1027849.821 ops/s
# Warmup Iteration  16: 1034980.185 ops/s
# Warmup Iteration  17: 1029433.100 ops/s
# Warmup Iteration  18: 1025702.138 ops/s
# Warmup Iteration  19: 1031908.611 ops/s
# Warmup Iteration  20: 1025181.958 ops/s
# Warmup Iteration  21: 1028268.535 ops/s
# Warmup Iteration  22: 1023154.659 ops/s
# Warmup Iteration  23: 1029598.587 ops/s
# Warmup Iteration  24: 1031013.609 ops/s
# Warmup Iteration  25: 1028211.877 ops/s
# Warmup Iteration  26: 1028738.354 ops/s
# Warmup Iteration  27: 1030166.589 ops/s
# Warmup Iteration  28: 1034238.034 ops/s
# Warmup Iteration  29: 1021581.359 ops/s
# Warmup Iteration  30: 1030341.382 ops/s
Iteration   1: 1028150.938 ops/s
Iteration   2: 1033671.101 ops/s
Iteration   3: 1029624.719 ops/s
Iteration   4: 1026484.161 ops/s
Iteration   5: 1028524.058 ops/s
Iteration   6: 1033515.794 ops/s
Iteration   7: 1029074.361 ops/s
Iteration   8: 1027387.524 ops/s
Iteration   9: 1031745.276 ops/s
Iteration  10: 1010145.577 ops/s
Iteration  11: 1035251.640 ops/s
Iteration  12: 1037456.965 ops/s
Iteration  13: 1033025.706 ops/s
Iteration  14: 1029661.035 ops/s
Iteration  15: 1028932.573 ops/s
Iteration  16: 1032979.452 ops/s
Iteration  17: 1027099.676 ops/s
Iteration  18: 1030780.930 ops/s
Iteration  19: 1035890.153 ops/s
Iteration  20: 1034202.721 ops/s
Iteration  21: 1025467.123 ops/s
Iteration  22: 1029788.047 ops/s
Iteration  23: 1035271.634 ops/s
Iteration  24: 1032638.073 ops/s
Iteration  25: 1027202.096 ops/s
Iteration  26: 1036308.413 ops/s
Iteration  27: 1034050.022 ops/s
Iteration  28: 1021570.969 ops/s
Iteration  29: 1030583.884 ops/s
Iteration  30: 1032689.138 ops/s


Result "org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_flip":
  1030305.792 ±(99.9%) 3526.380 ops/s [Average]
  (min, avg, max) = (1010145.577, 1030305.792, 1037456.965), stdev = 5278.121
  CI (99.9%): [1026779.412, 1033832.172] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_flip  thrpt   30  1030305.792 ± 3526.380  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_forEachKey$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_forEachKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 575996.292 ops/s
# Warmup Iteration   2: 1159894.741 ops/s
# Warmup Iteration   3: 1292052.506 ops/s
# Warmup Iteration   4: 1296021.002 ops/s
# Warmup Iteration   5: 1055271.772 ops/s
# Warmup Iteration   6: 1300323.466 ops/s
# Warmup Iteration   7: 1291712.920 ops/s
# Warmup Iteration   8: 1298780.332 ops/s
# Warmup Iteration   9: 1300028.528 ops/s
# Warmup Iteration  10: 1295130.576 ops/s
# Warmup Iteration  11: 1300853.597 ops/s
# Warmup Iteration  12: 1301546.508 ops/s
# Warmup Iteration  13: 1300925.981 ops/s
# Warmup Iteration  14: 1300515.790 ops/s
# Warmup Iteration  15: 1310449.063 ops/s
# Warmup Iteration  16: 1297957.240 ops/s
# Warmup Iteration  17: 1299932.132 ops/s
# Warmup Iteration  18: 1298909.565 ops/s
# Warmup Iteration  19: 1300137.328 ops/s
# Warmup Iteration  20: 1296983.134 ops/s
# Warmup Iteration  21: 1297303.302 ops/s
# Warmup Iteration  22: 1298245.797 ops/s
# Warmup Iteration  23: 1296543.198 ops/s
# Warmup Iteration  24: 1298328.686 ops/s
# Warmup Iteration  25: 1296954.407 ops/s
# Warmup Iteration  26: 1298720.941 ops/s
# Warmup Iteration  27: 1298679.961 ops/s
# Warmup Iteration  28: 1297895.913 ops/s
# Warmup Iteration  29: 1298178.642 ops/s
# Warmup Iteration  30: 1290999.444 ops/s
Iteration   1: 1300084.472 ops/s
Iteration   2: 1304819.666 ops/s
Iteration   3: 1297527.914 ops/s
Iteration   4: 1301031.416 ops/s
Iteration   5: 1309848.564 ops/s
Iteration   6: 1294138.368 ops/s
Iteration   7: 1298018.619 ops/s
Iteration   8: 1298951.406 ops/s
Iteration   9: 1291386.400 ops/s
Iteration  10: 1301011.902 ops/s
Iteration  11: 1301991.236 ops/s
Iteration  12: 1301068.388 ops/s
Iteration  13: 1296234.791 ops/s
Iteration  14: 1296962.806 ops/s
Iteration  15: 1301855.278 ops/s
Iteration  16: 1301053.919 ops/s
Iteration  17: 1298746.867 ops/s
Iteration  18: 1301662.173 ops/s
Iteration  19: 1291179.169 ops/s
Iteration  20: 1294402.773 ops/s
Iteration  21: 1300557.513 ops/s
Iteration  22: 1306233.165 ops/s
Iteration  23: 1301799.861 ops/s
Iteration  24: 1305429.809 ops/s
Iteration  25: 1303237.414 ops/s
Iteration  26: 1302613.979 ops/s
Iteration  27: 1299021.541 ops/s
Iteration  28: 1302281.561 ops/s
Iteration  29: 1293864.529 ops/s
Iteration  30: 1296641.790 ops/s


Result "org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_forEachKey":
  1299788.576 ±(99.9%) 2860.187 ops/s [Average]
  (min, avg, max) = (1291179.169, 1299788.576, 1309848.564), stdev = 4280.993
  CI (99.9%): [1296928.389, 1302648.763] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_forEachKey  thrpt   30  1299788.576 ± 2860.187  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_forEachKeyMultiValue$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_forEachKeyMultiValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 513236.606 ops/s
# Warmup Iteration   2: 1099101.226 ops/s
# Warmup Iteration   3: 1224341.239 ops/s
# Warmup Iteration   4: 1231387.076 ops/s
# Warmup Iteration   5: 1012447.407 ops/s
# Warmup Iteration   6: 1229963.497 ops/s
# Warmup Iteration   7: 1232035.333 ops/s
# Warmup Iteration   8: 1233840.820 ops/s
# Warmup Iteration   9: 1232262.320 ops/s
# Warmup Iteration  10: 1235638.658 ops/s
# Warmup Iteration  11: 1233962.849 ops/s
# Warmup Iteration  12: 1232653.275 ops/s
# Warmup Iteration  13: 1237364.777 ops/s
# Warmup Iteration  14: 1235312.193 ops/s
# Warmup Iteration  15: 1232724.888 ops/s
# Warmup Iteration  16: 1232704.847 ops/s
# Warmup Iteration  17: 1234301.989 ops/s
# Warmup Iteration  18: 1229669.195 ops/s
# Warmup Iteration  19: 1233592.988 ops/s
# Warmup Iteration  20: 1231978.180 ops/s
# Warmup Iteration  21: 1234003.866 ops/s
# Warmup Iteration  22: 1231696.655 ops/s
# Warmup Iteration  23: 1235629.679 ops/s
# Warmup Iteration  24: 1229700.118 ops/s
# Warmup Iteration  25: 1231321.673 ops/s
# Warmup Iteration  26: 1232997.182 ops/s
# Warmup Iteration  27: 1233517.041 ops/s
# Warmup Iteration  28: 1233398.442 ops/s
# Warmup Iteration  29: 1230529.263 ops/s
# Warmup Iteration  30: 1233275.027 ops/s
Iteration   1: 1234160.046 ops/s
Iteration   2: 1233615.014 ops/s
Iteration   3: 1233888.262 ops/s
Iteration   4: 1234711.228 ops/s
Iteration   5: 1235550.275 ops/s
Iteration   6: 1229662.927 ops/s
Iteration   7: 1236216.327 ops/s
Iteration   8: 1234211.129 ops/s
Iteration   9: 1230430.182 ops/s
Iteration  10: 1235308.151 ops/s
Iteration  11: 1233563.082 ops/s
Iteration  12: 1235401.818 ops/s
Iteration  13: 1237580.270 ops/s
Iteration  14: 1232894.983 ops/s
Iteration  15: 1231372.744 ops/s
Iteration  16: 1235373.042 ops/s
Iteration  17: 1237588.709 ops/s
Iteration  18: 1235889.494 ops/s
Iteration  19: 1233734.707 ops/s
Iteration  20: 1236733.732 ops/s
Iteration  21: 1232863.539 ops/s
Iteration  22: 1233532.446 ops/s
Iteration  23: 1229083.746 ops/s
Iteration  24: 1233564.123 ops/s
Iteration  25: 1235845.047 ops/s
Iteration  26: 1229519.172 ops/s
Iteration  27: 1237697.606 ops/s
Iteration  28: 1230383.040 ops/s
Iteration  29: 1234135.820 ops/s
Iteration  30: 1234049.466 ops/s


Result "org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_forEachKeyMultiValue":
  1233952.004 ±(99.9%) 1600.162 ops/s [Average]
  (min, avg, max) = (1229083.746, 1233952.004, 1237697.606), stdev = 2395.047
  CI (99.9%): [1232351.843, 1235552.166] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt        Score      Error  Units
HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_forEachKeyMultiValue  thrpt   30  1233952.004 ± 1600.162  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_forEachKeyMutableBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_forEachKeyMutableBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 413963.117 ops/s
# Warmup Iteration   2: 829520.384 ops/s
# Warmup Iteration   3: 947152.776 ops/s
# Warmup Iteration   4: 949290.764 ops/s
# Warmup Iteration   5: 806645.374 ops/s
# Warmup Iteration   6: 921062.572 ops/s
# Warmup Iteration   7: 949235.899 ops/s
# Warmup Iteration   8: 951344.571 ops/s
# Warmup Iteration   9: 951726.081 ops/s
# Warmup Iteration  10: 949260.726 ops/s
# Warmup Iteration  11: 952278.002 ops/s
# Warmup Iteration  12: 949947.271 ops/s
# Warmup Iteration  13: 950068.000 ops/s
# Warmup Iteration  14: 950146.219 ops/s
# Warmup Iteration  15: 951121.078 ops/s
# Warmup Iteration  16: 950387.926 ops/s
# Warmup Iteration  17: 948605.252 ops/s
# Warmup Iteration  18: 947603.399 ops/s
# Warmup Iteration  19: 948150.244 ops/s
# Warmup Iteration  20: 949465.334 ops/s
# Warmup Iteration  21: 950150.963 ops/s
# Warmup Iteration  22: 946877.271 ops/s
# Warmup Iteration  23: 949850.682 ops/s
# Warmup Iteration  24: 948702.288 ops/s
# Warmup Iteration  25: 950179.534 ops/s
# Warmup Iteration  26: 949624.186 ops/s
# Warmup Iteration  27: 949660.683 ops/s
# Warmup Iteration  28: 950283.397 ops/s
# Warmup Iteration  29: 949479.891 ops/s
# Warmup Iteration  30: 952265.722 ops/s
Iteration   1: 952510.829 ops/s
Iteration   2: 950506.877 ops/s
Iteration   3: 949058.310 ops/s
Iteration   4: 950206.986 ops/s
Iteration   5: 949757.102 ops/s
Iteration   6: 947168.865 ops/s
Iteration   7: 947230.374 ops/s
Iteration   8: 953804.310 ops/s
Iteration   9: 949462.271 ops/s
Iteration  10: 950770.500 ops/s
Iteration  11: 951923.518 ops/s
Iteration  12: 948403.944 ops/s
Iteration  13: 949050.071 ops/s
Iteration  14: 951490.807 ops/s
Iteration  15: 947956.866 ops/s
Iteration  16: 951871.646 ops/s
Iteration  17: 949986.987 ops/s
Iteration  18: 949364.365 ops/s
Iteration  19: 951797.222 ops/s
Iteration  20: 950424.134 ops/s
Iteration  21: 949435.234 ops/s
Iteration  22: 955310.616 ops/s
Iteration  23: 947779.313 ops/s
Iteration  24: 950269.047 ops/s
Iteration  25: 952859.938 ops/s
Iteration  26: 951227.531 ops/s
Iteration  27: 948829.517 ops/s
Iteration  28: 949269.245 ops/s
Iteration  29: 952292.402 ops/s
Iteration  30: 954217.401 ops/s


Result "org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_forEachKeyMutableBag":
  950474.541 ±(99.9%) 1363.912 ops/s [Average]
  (min, avg, max) = (947168.865, 950474.541, 955310.616), stdev = 2041.439
  CI (99.9%): [949110.629, 951838.453] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt       Score      Error  Units
HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_forEachKeyMutableBag  thrpt   30  950474.541 ± 1363.912  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_forEachKeyValue$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_forEachKeyValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 421975.128 ops/s
# Warmup Iteration   2: 890097.649 ops/s
# Warmup Iteration   3: 948408.518 ops/s
# Warmup Iteration   4: 948893.617 ops/s
# Warmup Iteration   5: 790689.267 ops/s
# Warmup Iteration   6: 955818.977 ops/s
# Warmup Iteration   7: 952961.261 ops/s
# Warmup Iteration   8: 956229.174 ops/s
# Warmup Iteration   9: 954216.411 ops/s
# Warmup Iteration  10: 955872.592 ops/s
# Warmup Iteration  11: 951636.800 ops/s
# Warmup Iteration  12: 957889.852 ops/s
# Warmup Iteration  13: 955865.123 ops/s
# Warmup Iteration  14: 958707.955 ops/s
# Warmup Iteration  15: 957062.820 ops/s
# Warmup Iteration  16: 951717.580 ops/s
# Warmup Iteration  17: 946458.448 ops/s
# Warmup Iteration  18: 947922.325 ops/s
# Warmup Iteration  19: 951209.747 ops/s
# Warmup Iteration  20: 955093.682 ops/s
# Warmup Iteration  21: 951419.162 ops/s
# Warmup Iteration  22: 957472.022 ops/s
# Warmup Iteration  23: 956471.863 ops/s
# Warmup Iteration  24: 951333.548 ops/s
# Warmup Iteration  25: 955083.898 ops/s
# Warmup Iteration  26: 954019.320 ops/s
# Warmup Iteration  27: 952409.838 ops/s
# Warmup Iteration  28: 954189.758 ops/s
# Warmup Iteration  29: 954882.984 ops/s
# Warmup Iteration  30: 956459.743 ops/s
Iteration   1: 958196.390 ops/s
Iteration   2: 954998.788 ops/s
Iteration   3: 960497.793 ops/s
Iteration   4: 960746.778 ops/s
Iteration   5: 955996.157 ops/s
Iteration   6: 953180.136 ops/s
Iteration   7: 954115.951 ops/s
Iteration   8: 956214.951 ops/s
Iteration   9: 949630.268 ops/s
Iteration  10: 950730.697 ops/s
Iteration  11: 950996.969 ops/s
Iteration  12: 956213.531 ops/s
Iteration  13: 955217.348 ops/s
Iteration  14: 957745.986 ops/s
Iteration  15: 954520.042 ops/s
Iteration  16: 955096.342 ops/s
Iteration  17: 952689.927 ops/s
Iteration  18: 953303.794 ops/s
Iteration  19: 950891.051 ops/s
Iteration  20: 952324.487 ops/s
Iteration  21: 956557.470 ops/s
Iteration  22: 950825.329 ops/s
Iteration  23: 962263.512 ops/s
Iteration  24: 956329.465 ops/s
Iteration  25: 952793.029 ops/s
Iteration  26: 956423.903 ops/s
Iteration  27: 952379.697 ops/s
Iteration  28: 951722.232 ops/s
Iteration  29: 954733.823 ops/s
Iteration  30: 953711.745 ops/s


Result "org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_forEachKeyValue":
  954701.586 ±(99.9%) 2085.692 ops/s [Average]
  (min, avg, max) = (949630.268, 954701.586, 962263.512), stdev = 3121.765
  CI (99.9%): [952615.895, 956787.278] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score      Error  Units
HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_forEachKeyValue  thrpt   30  954701.586 ± 2085.692  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_forEachValue$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_forEachValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 625274.679 ops/s
# Warmup Iteration   2: 1425009.836 ops/s
# Warmup Iteration   3: 1506491.556 ops/s
# Warmup Iteration   4: 1480306.912 ops/s
# Warmup Iteration   5: 1279478.352 ops/s
# Warmup Iteration   6: 1518195.141 ops/s
# Warmup Iteration   7: 1517828.304 ops/s
# Warmup Iteration   8: 1518093.130 ops/s
# Warmup Iteration   9: 1515031.879 ops/s
# Warmup Iteration  10: 1516210.827 ops/s
# Warmup Iteration  11: 1517564.363 ops/s
# Warmup Iteration  12: 1518374.952 ops/s
# Warmup Iteration  13: 1518785.861 ops/s
# Warmup Iteration  14: 1519127.564 ops/s
# Warmup Iteration  15: 1516549.543 ops/s
# Warmup Iteration  16: 1514540.952 ops/s
# Warmup Iteration  17: 1504097.719 ops/s
# Warmup Iteration  18: 1502843.166 ops/s
# Warmup Iteration  19: 1517370.674 ops/s
# Warmup Iteration  20: 1519418.782 ops/s
# Warmup Iteration  21: 1516537.614 ops/s
# Warmup Iteration  22: 1515285.211 ops/s
# Warmup Iteration  23: 1516349.779 ops/s
# Warmup Iteration  24: 1520032.296 ops/s
# Warmup Iteration  25: 1514253.960 ops/s
# Warmup Iteration  26: 1512091.906 ops/s
# Warmup Iteration  27: 1518890.926 ops/s
# Warmup Iteration  28: 1517656.073 ops/s
# Warmup Iteration  29: 1520167.041 ops/s
# Warmup Iteration  30: 1515016.627 ops/s
Iteration   1: 1517133.171 ops/s
Iteration   2: 1519515.980 ops/s
Iteration   3: 1514855.522 ops/s
Iteration   4: 1518636.807 ops/s
Iteration   5: 1514608.929 ops/s
Iteration   6: 1520183.472 ops/s
Iteration   7: 1517422.979 ops/s
Iteration   8: 1519223.419 ops/s
Iteration   9: 1510399.762 ops/s
Iteration  10: 1518137.278 ops/s
Iteration  11: 1516486.605 ops/s
Iteration  12: 1519889.946 ops/s
Iteration  13: 1519329.317 ops/s
Iteration  14: 1516656.692 ops/s
Iteration  15: 1518548.709 ops/s
Iteration  16: 1521902.422 ops/s
Iteration  17: 1517977.791 ops/s
Iteration  18: 1516680.450 ops/s
Iteration  19: 1518773.152 ops/s
Iteration  20: 1519690.607 ops/s
Iteration  21: 1518727.664 ops/s
Iteration  22: 1516787.714 ops/s
Iteration  23: 1517180.589 ops/s
Iteration  24: 1518262.624 ops/s
Iteration  25: 1517602.056 ops/s
Iteration  26: 1522712.536 ops/s
Iteration  27: 1518687.450 ops/s
Iteration  28: 1515354.076 ops/s
Iteration  29: 1497315.255 ops/s
Iteration  30: 1497081.718 ops/s


Result "org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_forEachValue":
  1516525.490 ±(99.9%) 3828.320 ops/s [Average]
  (min, avg, max) = (1497081.718, 1516525.490, 1522712.536), stdev = 5730.049
  CI (99.9%): [1512697.170, 1520353.810] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score      Error  Units
HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_forEachValue  thrpt   30  1516525.490 ± 3828.320  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_getIfAbsentPutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_getIfAbsentPutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 126127.851 ops/s
# Warmup Iteration   2: 189439.554 ops/s
# Warmup Iteration   3: 233863.587 ops/s
# Warmup Iteration   4: 232385.789 ops/s
# Warmup Iteration   5: 234092.514 ops/s
# Warmup Iteration   6: 234151.810 ops/s
# Warmup Iteration   7: 199847.984 ops/s
# Warmup Iteration   8: 227610.446 ops/s
# Warmup Iteration   9: 233717.380 ops/s
# Warmup Iteration  10: 233926.418 ops/s
# Warmup Iteration  11: 232208.123 ops/s
# Warmup Iteration  12: 233504.191 ops/s
# Warmup Iteration  13: 234137.446 ops/s
# Warmup Iteration  14: 233698.600 ops/s
# Warmup Iteration  15: 234088.193 ops/s
# Warmup Iteration  16: 232855.923 ops/s
# Warmup Iteration  17: 239631.735 ops/s
# Warmup Iteration  18: 240271.858 ops/s
# Warmup Iteration  19: 240692.037 ops/s
# Warmup Iteration  20: 240233.482 ops/s
# Warmup Iteration  21: 240125.120 ops/s
# Warmup Iteration  22: 240567.854 ops/s
# Warmup Iteration  23: 240490.942 ops/s
# Warmup Iteration  24: 240372.435 ops/s
# Warmup Iteration  25: 239141.620 ops/s
# Warmup Iteration  26: 239720.031 ops/s
# Warmup Iteration  27: 237665.591 ops/s
# Warmup Iteration  28: 239925.203 ops/s
# Warmup Iteration  29: 240399.165 ops/s
# Warmup Iteration  30: 239691.215 ops/s
Iteration   1: 240467.060 ops/s
Iteration   2: 237582.480 ops/s
Iteration   3: 240669.705 ops/s
Iteration   4: 239626.805 ops/s
Iteration   5: 240553.965 ops/s
Iteration   6: 239895.938 ops/s
Iteration   7: 240089.505 ops/s
Iteration   8: 241334.734 ops/s
Iteration   9: 236577.899 ops/s
Iteration  10: 240541.143 ops/s
Iteration  11: 240345.330 ops/s
Iteration  12: 240793.527 ops/s
Iteration  13: 241062.497 ops/s
Iteration  14: 240533.479 ops/s
Iteration  15: 239839.983 ops/s
Iteration  16: 239899.946 ops/s
Iteration  17: 240531.708 ops/s
Iteration  18: 240100.394 ops/s
Iteration  19: 240248.499 ops/s
Iteration  20: 240137.022 ops/s
Iteration  21: 239760.984 ops/s
Iteration  22: 240460.308 ops/s
Iteration  23: 240619.649 ops/s
Iteration  24: 239898.253 ops/s
Iteration  25: 239799.086 ops/s
Iteration  26: 240598.007 ops/s
Iteration  27: 240230.090 ops/s
Iteration  28: 240583.132 ops/s
Iteration  29: 239509.698 ops/s
Iteration  30: 240044.514 ops/s


Result "org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_getIfAbsentPutAll":
  240077.845 ±(99.9%) 618.431 ops/s [Average]
  (min, avg, max) = (236577.899, 240077.845, 241334.734), stdev = 925.639
  CI (99.9%): [239459.413, 240696.276] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score     Error  Units
HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_getIfAbsentPutAll  thrpt   30  240077.845 ± 618.431  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 237989.800 ops/s
# Warmup Iteration   2: 614932.299 ops/s
# Warmup Iteration   3: 636075.422 ops/s
# Warmup Iteration   4: 536408.726 ops/s
# Warmup Iteration   5: 635404.739 ops/s
# Warmup Iteration   6: 635993.034 ops/s
# Warmup Iteration   7: 634782.637 ops/s
# Warmup Iteration   8: 635528.710 ops/s
# Warmup Iteration   9: 634553.531 ops/s
# Warmup Iteration  10: 631411.094 ops/s
# Warmup Iteration  11: 634882.671 ops/s
# Warmup Iteration  12: 628586.642 ops/s
# Warmup Iteration  13: 634475.401 ops/s
# Warmup Iteration  14: 634081.642 ops/s
# Warmup Iteration  15: 633371.506 ops/s
# Warmup Iteration  16: 634830.874 ops/s
# Warmup Iteration  17: 634496.223 ops/s
# Warmup Iteration  18: 635014.640 ops/s
# Warmup Iteration  19: 632359.436 ops/s
# Warmup Iteration  20: 634508.091 ops/s
# Warmup Iteration  21: 633632.308 ops/s
# Warmup Iteration  22: 634336.199 ops/s
# Warmup Iteration  23: 634521.241 ops/s
# Warmup Iteration  24: 633311.299 ops/s
# Warmup Iteration  25: 633209.803 ops/s
# Warmup Iteration  26: 634982.996 ops/s
# Warmup Iteration  27: 632773.923 ops/s
# Warmup Iteration  28: 634478.010 ops/s
# Warmup Iteration  29: 634201.236 ops/s
# Warmup Iteration  30: 635828.436 ops/s
Iteration   1: 635495.455 ops/s
Iteration   2: 637421.924 ops/s
Iteration   3: 635154.408 ops/s
Iteration   4: 634139.736 ops/s
Iteration   5: 633400.398 ops/s
Iteration   6: 634808.596 ops/s
Iteration   7: 632821.133 ops/s
Iteration   8: 618000.455 ops/s
Iteration   9: 633849.054 ops/s
Iteration  10: 633736.670 ops/s
Iteration  11: 634408.227 ops/s
Iteration  12: 633388.156 ops/s
Iteration  13: 632487.259 ops/s
Iteration  14: 634482.201 ops/s
Iteration  15: 621775.568 ops/s
Iteration  16: 635048.253 ops/s
Iteration  17: 633381.982 ops/s
Iteration  18: 631411.516 ops/s
Iteration  19: 628905.934 ops/s
Iteration  20: 629269.229 ops/s
Iteration  21: 632274.289 ops/s
Iteration  22: 622572.296 ops/s
Iteration  23: 630037.228 ops/s
Iteration  24: 628649.625 ops/s
Iteration  25: 631893.795 ops/s
Iteration  26: 633100.323 ops/s
Iteration  27: 636277.101 ops/s
Iteration  28: 634367.912 ops/s
Iteration  29: 635915.825 ops/s
Iteration  30: 630976.749 ops/s


Result "org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_isEmpty":
  631981.710 ±(99.9%) 2940.797 ops/s [Average]
  (min, avg, max) = (618000.455, 631981.710, 637421.924), stdev = 4401.647
  CI (99.9%): [629040.913, 634922.507] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_isEmpty  thrpt   30  631981.710 ± 2940.797  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_keyBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_keyBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 917711.484 ops/s
# Warmup Iteration   2: 2262307.145 ops/s
# Warmup Iteration   3: 2317616.845 ops/s
# Warmup Iteration   4: 1923379.649 ops/s
# Warmup Iteration   5: 2342531.101 ops/s
# Warmup Iteration   6: 2339120.848 ops/s
# Warmup Iteration   7: 2332498.128 ops/s
# Warmup Iteration   8: 2341294.459 ops/s
# Warmup Iteration   9: 2334715.033 ops/s
# Warmup Iteration  10: 2335166.251 ops/s
# Warmup Iteration  11: 2326251.696 ops/s
# Warmup Iteration  12: 2345666.225 ops/s
# Warmup Iteration  13: 2342460.374 ops/s
# Warmup Iteration  14: 2324722.866 ops/s
# Warmup Iteration  15: 2349170.117 ops/s
# Warmup Iteration  16: 2336129.084 ops/s
# Warmup Iteration  17: 2348362.594 ops/s
# Warmup Iteration  18: 2340606.452 ops/s
# Warmup Iteration  19: 2340586.478 ops/s
# Warmup Iteration  20: 2345381.938 ops/s
# Warmup Iteration  21: 2340055.921 ops/s
# Warmup Iteration  22: 2347442.345 ops/s
# Warmup Iteration  23: 2347815.883 ops/s
# Warmup Iteration  24: 2344149.191 ops/s
# Warmup Iteration  25: 2332306.875 ops/s
# Warmup Iteration  26: 2339758.640 ops/s
# Warmup Iteration  27: 2320093.928 ops/s
# Warmup Iteration  28: 2345529.332 ops/s
# Warmup Iteration  29: 2342991.885 ops/s
# Warmup Iteration  30: 2348344.271 ops/s
Iteration   1: 2340843.768 ops/s
Iteration   2: 2338532.397 ops/s
Iteration   3: 2347230.255 ops/s
Iteration   4: 2350637.929 ops/s
Iteration   5: 2339015.001 ops/s
Iteration   6: 2343435.106 ops/s
Iteration   7: 2341984.689 ops/s
Iteration   8: 2345228.417 ops/s
Iteration   9: 2348919.404 ops/s
Iteration  10: 2341740.461 ops/s
Iteration  11: 2333486.874 ops/s
Iteration  12: 2343574.298 ops/s
Iteration  13: 2348731.086 ops/s
Iteration  14: 2339174.689 ops/s
Iteration  15: 2308370.145 ops/s
Iteration  16: 2346671.704 ops/s
Iteration  17: 2342795.432 ops/s
Iteration  18: 2317172.466 ops/s
Iteration  19: 2349975.222 ops/s
Iteration  20: 2308809.023 ops/s
Iteration  21: 2345914.696 ops/s
Iteration  22: 2344075.635 ops/s
Iteration  23: 2346339.206 ops/s
Iteration  24: 2345566.642 ops/s
Iteration  25: 2345290.751 ops/s
Iteration  26: 2343767.686 ops/s
Iteration  27: 2330765.600 ops/s
Iteration  28: 2348078.829 ops/s
Iteration  29: 2335976.568 ops/s
Iteration  30: 2278237.776 ops/s


Result "org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_keyBag":
  2338011.392 ±(99.9%) 10454.618 ops/s [Average]
  (min, avg, max) = (2278237.776, 2338011.392, 2350637.929), stdev = 15647.981
  CI (99.9%): [2327556.774, 2348466.010] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_keyBag  thrpt   30  2338011.392 ± 10454.618  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_keySet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_keySet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 225812.138 ops/s
# Warmup Iteration   2: 270514.440 ops/s
# Warmup Iteration   3: 351031.914 ops/s
# Warmup Iteration   4: 351371.551 ops/s
# Warmup Iteration   5: 349739.830 ops/s
# Warmup Iteration   6: 351231.929 ops/s
# Warmup Iteration   7: 348532.248 ops/s
# Warmup Iteration   8: 351171.331 ops/s
# Warmup Iteration   9: 351095.075 ops/s
# Warmup Iteration  10: 296468.919 ops/s
# Warmup Iteration  11: 350187.593 ops/s
# Warmup Iteration  12: 351768.351 ops/s
# Warmup Iteration  13: 351242.201 ops/s
# Warmup Iteration  14: 352183.780 ops/s
# Warmup Iteration  15: 352540.338 ops/s
# Warmup Iteration  16: 351149.559 ops/s
# Warmup Iteration  17: 364192.060 ops/s
# Warmup Iteration  18: 365032.610 ops/s
# Warmup Iteration  19: 364640.335 ops/s
# Warmup Iteration  20: 365102.962 ops/s
# Warmup Iteration  21: 360629.464 ops/s
# Warmup Iteration  22: 364875.443 ops/s
# Warmup Iteration  23: 364743.835 ops/s
# Warmup Iteration  24: 365034.564 ops/s
# Warmup Iteration  25: 365230.121 ops/s
# Warmup Iteration  26: 364714.679 ops/s
# Warmup Iteration  27: 364666.233 ops/s
# Warmup Iteration  28: 365646.089 ops/s
# Warmup Iteration  29: 365243.667 ops/s
# Warmup Iteration  30: 364461.218 ops/s
Iteration   1: 366065.800 ops/s
Iteration   2: 365982.335 ops/s
Iteration   3: 363417.763 ops/s
Iteration   4: 363478.309 ops/s
Iteration   5: 366121.762 ops/s
Iteration   6: 364539.908 ops/s
Iteration   7: 367169.304 ops/s
Iteration   8: 360063.799 ops/s
Iteration   9: 365915.755 ops/s
Iteration  10: 364841.579 ops/s
Iteration  11: 365615.222 ops/s
Iteration  12: 364502.690 ops/s
Iteration  13: 364525.625 ops/s
Iteration  14: 365594.230 ops/s
Iteration  15: 364228.181 ops/s
Iteration  16: 357849.398 ops/s
Iteration  17: 365126.926 ops/s
Iteration  18: 365493.267 ops/s
Iteration  19: 364605.192 ops/s
Iteration  20: 365618.971 ops/s
Iteration  21: 364754.779 ops/s
Iteration  22: 365537.050 ops/s
Iteration  23: 363616.077 ops/s
Iteration  24: 365937.562 ops/s
Iteration  25: 365335.621 ops/s
Iteration  26: 363061.111 ops/s
Iteration  27: 363978.034 ops/s
Iteration  28: 365163.095 ops/s
Iteration  29: 365427.532 ops/s
Iteration  30: 365035.148 ops/s


Result "org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_keySet":
  364620.068 ±(99.9%) 1215.551 ops/s [Average]
  (min, avg, max) = (357849.398, 364620.068, 367169.304), stdev = 1819.380
  CI (99.9%): [363404.516, 365835.619] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_keySet  thrpt   30  364620.068 ± 1215.551  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_keyValuePairsView$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_keyValuePairsView

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 326945.225 ops/s
# Warmup Iteration   2: 701549.651 ops/s
# Warmup Iteration   3: 757646.927 ops/s
# Warmup Iteration   4: 761015.819 ops/s
# Warmup Iteration   5: 635654.822 ops/s
# Warmup Iteration   6: 761593.095 ops/s
# Warmup Iteration   7: 761141.983 ops/s
# Warmup Iteration   8: 759534.377 ops/s
# Warmup Iteration   9: 761473.576 ops/s
# Warmup Iteration  10: 762097.240 ops/s
# Warmup Iteration  11: 763142.398 ops/s
# Warmup Iteration  12: 755719.829 ops/s
# Warmup Iteration  13: 758309.616 ops/s
# Warmup Iteration  14: 760976.592 ops/s
# Warmup Iteration  15: 763591.891 ops/s
# Warmup Iteration  16: 762880.049 ops/s
# Warmup Iteration  17: 760500.419 ops/s
# Warmup Iteration  18: 759750.267 ops/s
# Warmup Iteration  19: 762931.907 ops/s
# Warmup Iteration  20: 760860.236 ops/s
# Warmup Iteration  21: 762238.400 ops/s
# Warmup Iteration  22: 760830.684 ops/s
# Warmup Iteration  23: 764088.287 ops/s
# Warmup Iteration  24: 762010.341 ops/s
# Warmup Iteration  25: 761654.840 ops/s
# Warmup Iteration  26: 756863.420 ops/s
# Warmup Iteration  27: 761902.970 ops/s
# Warmup Iteration  28: 761453.582 ops/s
# Warmup Iteration  29: 761843.053 ops/s
# Warmup Iteration  30: 763872.492 ops/s
Iteration   1: 757721.011 ops/s
Iteration   2: 761307.059 ops/s
Iteration   3: 764268.106 ops/s
Iteration   4: 758039.939 ops/s
Iteration   5: 751044.363 ops/s
Iteration   6: 762519.730 ops/s
Iteration   7: 768853.098 ops/s
Iteration   8: 750640.857 ops/s
Iteration   9: 763217.142 ops/s
Iteration  10: 761615.528 ops/s
Iteration  11: 762276.869 ops/s
Iteration  12: 762393.669 ops/s
Iteration  13: 758685.836 ops/s
Iteration  14: 761319.175 ops/s
Iteration  15: 758147.021 ops/s
Iteration  16: 760496.692 ops/s
Iteration  17: 762743.762 ops/s
Iteration  18: 763406.719 ops/s
Iteration  19: 760223.800 ops/s
Iteration  20: 759603.001 ops/s
Iteration  21: 761507.138 ops/s
Iteration  22: 761878.948 ops/s
Iteration  23: 750476.478 ops/s
Iteration  24: 749327.331 ops/s
Iteration  25: 763747.730 ops/s
Iteration  26: 761832.516 ops/s
Iteration  27: 759287.673 ops/s
Iteration  28: 758313.523 ops/s
Iteration  29: 762386.102 ops/s
Iteration  30: 758835.231 ops/s


Result "org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_keyValuePairsView":
  759870.535 ±(99.9%) 2960.865 ops/s [Average]
  (min, avg, max) = (749327.331, 759870.535, 768853.098), stdev = 4431.684
  CI (99.9%): [756909.670, 762831.400] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score      Error  Units
HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_keyValuePairsView  thrpt   30  759870.535 ± 2960.865  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_keysView$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_keysView

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 539723.445 ops/s
# Warmup Iteration   2: 1167897.871 ops/s
# Warmup Iteration   3: 1279362.969 ops/s
# Warmup Iteration   4: 1297387.976 ops/s
# Warmup Iteration   5: 1072069.214 ops/s
# Warmup Iteration   6: 1303466.275 ops/s
# Warmup Iteration   7: 1297798.264 ops/s
# Warmup Iteration   8: 1302618.239 ops/s
# Warmup Iteration   9: 1303563.215 ops/s
# Warmup Iteration  10: 1298311.743 ops/s
# Warmup Iteration  11: 1305375.019 ops/s
# Warmup Iteration  12: 1304331.712 ops/s
# Warmup Iteration  13: 1299435.238 ops/s
# Warmup Iteration  14: 1301409.634 ops/s
# Warmup Iteration  15: 1298239.710 ops/s
# Warmup Iteration  16: 1299703.823 ops/s
# Warmup Iteration  17: 1283463.670 ops/s
# Warmup Iteration  18: 1293794.437 ops/s
# Warmup Iteration  19: 1293401.089 ops/s
# Warmup Iteration  20: 1288059.628 ops/s
# Warmup Iteration  21: 1293374.717 ops/s
# Warmup Iteration  22: 1280180.047 ops/s
# Warmup Iteration  23: 1291344.160 ops/s
# Warmup Iteration  24: 1299001.554 ops/s
# Warmup Iteration  25: 1292991.261 ops/s
# Warmup Iteration  26: 1297830.049 ops/s
# Warmup Iteration  27: 1298307.204 ops/s
# Warmup Iteration  28: 1293629.453 ops/s
# Warmup Iteration  29: 1299590.565 ops/s
# Warmup Iteration  30: 1288302.187 ops/s
Iteration   1: 1293637.274 ops/s
Iteration   2: 1292404.698 ops/s
Iteration   3: 1290690.911 ops/s
Iteration   4: 1285686.533 ops/s
Iteration   5: 1299272.916 ops/s
Iteration   6: 1294596.719 ops/s
Iteration   7: 1282968.795 ops/s
Iteration   8: 1303441.261 ops/s
Iteration   9: 1277183.142 ops/s
Iteration  10: 1289219.752 ops/s
Iteration  11: 1291740.414 ops/s
Iteration  12: 1302259.985 ops/s
Iteration  13: 1287267.885 ops/s
Iteration  14: 1295812.358 ops/s
Iteration  15: 1294257.878 ops/s
Iteration  16: 1301303.974 ops/s
Iteration  17: 1286174.491 ops/s
Iteration  18: 1300205.042 ops/s
Iteration  19: 1293551.078 ops/s
Iteration  20: 1293998.845 ops/s
Iteration  21: 1291597.846 ops/s
Iteration  22: 1301651.994 ops/s
Iteration  23: 1292427.040 ops/s
Iteration  24: 1295321.524 ops/s
Iteration  25: 1291295.764 ops/s
Iteration  26: 1304696.746 ops/s
Iteration  27: 1294999.704 ops/s
Iteration  28: 1275986.378 ops/s
Iteration  29: 1298414.327 ops/s
Iteration  30: 1295618.175 ops/s


Result "org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_keysView":
  1293256.115 ±(99.9%) 4681.642 ops/s [Average]
  (min, avg, max) = (1275986.378, 1293256.115, 1304696.746), stdev = 7007.262
  CI (99.9%): [1288574.473, 1297937.757] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_keysView  thrpt   30  1293256.115 ± 4681.642  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_keysWithMultiValuesView$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_keysWithMultiValuesView

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 292665.484 ops/s
# Warmup Iteration   2: 655735.474 ops/s
# Warmup Iteration   3: 718942.469 ops/s
# Warmup Iteration   4: 722522.896 ops/s
# Warmup Iteration   5: 595706.321 ops/s
# Warmup Iteration   6: 716251.340 ops/s
# Warmup Iteration   7: 720280.919 ops/s
# Warmup Iteration   8: 724674.562 ops/s
# Warmup Iteration   9: 723313.926 ops/s
# Warmup Iteration  10: 723402.863 ops/s
# Warmup Iteration  11: 724299.641 ops/s
# Warmup Iteration  12: 717941.380 ops/s
# Warmup Iteration  13: 718789.601 ops/s
# Warmup Iteration  14: 721910.369 ops/s
# Warmup Iteration  15: 724095.780 ops/s
# Warmup Iteration  16: 724326.437 ops/s
# Warmup Iteration  17: 722767.567 ops/s
# Warmup Iteration  18: 722457.212 ops/s
# Warmup Iteration  19: 723719.503 ops/s
# Warmup Iteration  20: 714310.351 ops/s
# Warmup Iteration  21: 722011.172 ops/s
# Warmup Iteration  22: 718677.257 ops/s
# Warmup Iteration  23: 722769.169 ops/s
# Warmup Iteration  24: 722731.165 ops/s
# Warmup Iteration  25: 723401.535 ops/s
# Warmup Iteration  26: 723328.972 ops/s
# Warmup Iteration  27: 723583.500 ops/s
# Warmup Iteration  28: 724029.223 ops/s
# Warmup Iteration  29: 724321.419 ops/s
# Warmup Iteration  30: 725024.148 ops/s
Iteration   1: 725003.037 ops/s
Iteration   2: 724746.905 ops/s
Iteration   3: 720959.700 ops/s
Iteration   4: 725285.830 ops/s
Iteration   5: 726592.022 ops/s
Iteration   6: 725010.773 ops/s
Iteration   7: 723723.160 ops/s
Iteration   8: 722194.766 ops/s
Iteration   9: 723297.963 ops/s
Iteration  10: 721011.979 ops/s
Iteration  11: 720830.470 ops/s
Iteration  12: 724828.348 ops/s
Iteration  13: 724597.536 ops/s
Iteration  14: 720829.981 ops/s
Iteration  15: 725009.146 ops/s
Iteration  16: 725374.414 ops/s
Iteration  17: 725539.353 ops/s
Iteration  18: 723592.244 ops/s
Iteration  19: 723642.140 ops/s
Iteration  20: 722114.813 ops/s
Iteration  21: 725629.206 ops/s
Iteration  22: 722616.181 ops/s
Iteration  23: 723259.731 ops/s
Iteration  24: 721560.589 ops/s
Iteration  25: 723775.050 ops/s
Iteration  26: 720632.132 ops/s
Iteration  27: 720108.752 ops/s
Iteration  28: 720759.578 ops/s
Iteration  29: 722303.546 ops/s
Iteration  30: 721850.728 ops/s


Result "org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_keysWithMultiValuesView":
  723222.669 ±(99.9%) 1244.954 ops/s [Average]
  (min, avg, max) = (720108.752, 723222.669, 726592.022), stdev = 1863.389
  CI (99.9%): [721977.715, 724467.623] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt       Score      Error  Units
HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_keysWithMultiValuesView  thrpt   30  723222.669 ± 1244.954  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_multiValuesView$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_multiValuesView

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 544002.671 ops/s
# Warmup Iteration   2: 1193577.686 ops/s
# Warmup Iteration   3: 1322745.952 ops/s
# Warmup Iteration   4: 1321926.669 ops/s
# Warmup Iteration   5: 1092909.804 ops/s
# Warmup Iteration   6: 1323303.795 ops/s
# Warmup Iteration   7: 1324392.592 ops/s
# Warmup Iteration   8: 1323675.390 ops/s
# Warmup Iteration   9: 1324025.267 ops/s
# Warmup Iteration  10: 1322004.185 ops/s
# Warmup Iteration  11: 1324957.216 ops/s
# Warmup Iteration  12: 1322171.651 ops/s
# Warmup Iteration  13: 1325251.801 ops/s
# Warmup Iteration  14: 1323467.467 ops/s
# Warmup Iteration  15: 1326645.453 ops/s
# Warmup Iteration  16: 1319176.063 ops/s
# Warmup Iteration  17: 1324862.660 ops/s
# Warmup Iteration  18: 1323477.642 ops/s
# Warmup Iteration  19: 1324532.791 ops/s
# Warmup Iteration  20: 1323325.052 ops/s
# Warmup Iteration  21: 1322034.595 ops/s
# Warmup Iteration  22: 1322017.238 ops/s
# Warmup Iteration  23: 1324383.365 ops/s
# Warmup Iteration  24: 1323861.471 ops/s
# Warmup Iteration  25: 1325974.049 ops/s
# Warmup Iteration  26: 1324434.111 ops/s
# Warmup Iteration  27: 1323049.914 ops/s
# Warmup Iteration  28: 1326838.048 ops/s
# Warmup Iteration  29: 1324472.897 ops/s
# Warmup Iteration  30: 1325327.464 ops/s
Iteration   1: 1325163.163 ops/s
Iteration   2: 1323519.284 ops/s
Iteration   3: 1326259.722 ops/s
Iteration   4: 1327647.152 ops/s
Iteration   5: 1326670.046 ops/s
Iteration   6: 1323247.772 ops/s
Iteration   7: 1328497.627 ops/s
Iteration   8: 1322824.719 ops/s
Iteration   9: 1325848.328 ops/s
Iteration  10: 1328832.873 ops/s
Iteration  11: 1327890.908 ops/s
Iteration  12: 1323528.102 ops/s
Iteration  13: 1322544.632 ops/s
Iteration  14: 1323238.036 ops/s
Iteration  15: 1326940.980 ops/s
Iteration  16: 1322029.072 ops/s
Iteration  17: 1322102.341 ops/s
Iteration  18: 1326678.257 ops/s
Iteration  19: 1329959.718 ops/s
Iteration  20: 1324280.373 ops/s
Iteration  21: 1322432.441 ops/s
Iteration  22: 1322629.545 ops/s
Iteration  23: 1328731.873 ops/s
Iteration  24: 1327691.180 ops/s
Iteration  25: 1326160.980 ops/s
Iteration  26: 1322401.170 ops/s
Iteration  27: 1326250.718 ops/s
Iteration  28: 1323221.949 ops/s
Iteration  29: 1326605.178 ops/s
Iteration  30: 1322422.685 ops/s


Result "org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_multiValuesView":
  1325208.361 ±(99.9%) 1625.941 ops/s [Average]
  (min, avg, max) = (1322029.072, 1325208.361, 1329959.718), stdev = 2433.631
  CI (99.9%): [1323582.420, 1326834.301] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score      Error  Units
HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_multiValuesView  thrpt   30  1325208.361 ± 1625.941  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_newEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_newEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 602177.873 ops/s
# Warmup Iteration   2: 1609003.043 ops/s
# Warmup Iteration   3: 1383778.699 ops/s
# Warmup Iteration   4: 1585075.652 ops/s
# Warmup Iteration   5: 1598568.636 ops/s
# Warmup Iteration   6: 1620567.922 ops/s
# Warmup Iteration   7: 1623817.883 ops/s
# Warmup Iteration   8: 1606184.342 ops/s
# Warmup Iteration   9: 1621134.372 ops/s
# Warmup Iteration  10: 1623881.593 ops/s
# Warmup Iteration  11: 1627834.659 ops/s
# Warmup Iteration  12: 1625091.314 ops/s
# Warmup Iteration  13: 1616759.981 ops/s
# Warmup Iteration  14: 1622364.105 ops/s
# Warmup Iteration  15: 1620545.529 ops/s
# Warmup Iteration  16: 1629060.045 ops/s
# Warmup Iteration  17: 1637781.524 ops/s
# Warmup Iteration  18: 1622987.830 ops/s
# Warmup Iteration  19: 1634936.540 ops/s
# Warmup Iteration  20: 1624578.299 ops/s
# Warmup Iteration  21: 1622032.549 ops/s
# Warmup Iteration  22: 1627576.342 ops/s
# Warmup Iteration  23: 1634049.118 ops/s
# Warmup Iteration  24: 1631258.768 ops/s
# Warmup Iteration  25: 1623672.788 ops/s
# Warmup Iteration  26: 1619340.882 ops/s
# Warmup Iteration  27: 1630131.424 ops/s
# Warmup Iteration  28: 1636169.025 ops/s
# Warmup Iteration  29: 1635255.429 ops/s
# Warmup Iteration  30: 1631859.827 ops/s
Iteration   1: 1633129.764 ops/s
Iteration   2: 1637566.893 ops/s
Iteration   3: 1635440.592 ops/s
Iteration   4: 1625318.484 ops/s
Iteration   5: 1615830.129 ops/s
Iteration   6: 1622514.425 ops/s
Iteration   7: 1622067.426 ops/s
Iteration   8: 1629662.400 ops/s
Iteration   9: 1637526.854 ops/s
Iteration  10: 1620131.763 ops/s
Iteration  11: 1632971.367 ops/s
Iteration  12: 1640404.496 ops/s
Iteration  13: 1639972.421 ops/s
Iteration  14: 1636954.459 ops/s
Iteration  15: 1628896.594 ops/s
Iteration  16: 1628744.013 ops/s
Iteration  17: 1637610.132 ops/s
Iteration  18: 1644538.899 ops/s
Iteration  19: 1621307.261 ops/s
Iteration  20: 1617218.348 ops/s
Iteration  21: 1625931.938 ops/s
Iteration  22: 1620099.403 ops/s
Iteration  23: 1626640.831 ops/s
Iteration  24: 1625076.593 ops/s
Iteration  25: 1629515.754 ops/s
Iteration  26: 1622518.368 ops/s
Iteration  27: 1640372.646 ops/s
Iteration  28: 1631980.832 ops/s
Iteration  29: 1612087.938 ops/s
Iteration  30: 1612111.991 ops/s


Result "org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_newEmpty":
  1628471.434 ±(99.9%) 5893.998 ops/s [Average]
  (min, avg, max) = (1612087.938, 1628471.434, 1644538.899), stdev = 8821.859
  CI (99.9%): [1622577.436, 1634365.432] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_newEmpty  thrpt   30  1628471.434 ± 5893.998  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_newMultimapFromPairs$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_newMultimapFromPairs

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 289259.795 ops/s
# Warmup Iteration   2: 640031.238 ops/s
# Warmup Iteration   3: 668302.793 ops/s
# Warmup Iteration   4: 661028.200 ops/s
# Warmup Iteration   5: 571465.751 ops/s
# Warmup Iteration   6: 674093.470 ops/s
# Warmup Iteration   7: 674261.623 ops/s
# Warmup Iteration   8: 674060.253 ops/s
# Warmup Iteration   9: 675453.610 ops/s
# Warmup Iteration  10: 675342.666 ops/s
# Warmup Iteration  11: 674572.502 ops/s
# Warmup Iteration  12: 674843.442 ops/s
# Warmup Iteration  13: 675483.957 ops/s
# Warmup Iteration  14: 675763.680 ops/s
# Warmup Iteration  15: 675097.718 ops/s
# Warmup Iteration  16: 675844.358 ops/s
# Warmup Iteration  17: 673277.581 ops/s
# Warmup Iteration  18: 669257.831 ops/s
# Warmup Iteration  19: 674883.675 ops/s
# Warmup Iteration  20: 675348.994 ops/s
# Warmup Iteration  21: 675027.405 ops/s
# Warmup Iteration  22: 674925.431 ops/s
# Warmup Iteration  23: 676011.924 ops/s
# Warmup Iteration  24: 676851.496 ops/s
# Warmup Iteration  25: 675301.764 ops/s
# Warmup Iteration  26: 678011.519 ops/s
# Warmup Iteration  27: 675160.530 ops/s
# Warmup Iteration  28: 677237.132 ops/s
# Warmup Iteration  29: 676371.740 ops/s
# Warmup Iteration  30: 673985.490 ops/s
Iteration   1: 676320.795 ops/s
Iteration   2: 676014.640 ops/s
Iteration   3: 676065.379 ops/s
Iteration   4: 677217.449 ops/s
Iteration   5: 676108.178 ops/s
Iteration   6: 678211.315 ops/s
Iteration   7: 676500.795 ops/s
Iteration   8: 675824.100 ops/s
Iteration   9: 675252.060 ops/s
Iteration  10: 675060.834 ops/s
Iteration  11: 663611.127 ops/s
Iteration  12: 676297.435 ops/s
Iteration  13: 675924.643 ops/s
Iteration  14: 675615.781 ops/s
Iteration  15: 677354.684 ops/s
Iteration  16: 676700.103 ops/s
Iteration  17: 679354.754 ops/s
Iteration  18: 676922.663 ops/s
Iteration  19: 676958.805 ops/s
Iteration  20: 675470.945 ops/s
Iteration  21: 674351.721 ops/s
Iteration  22: 674671.787 ops/s
Iteration  23: 672680.010 ops/s
Iteration  24: 678259.782 ops/s
Iteration  25: 675345.009 ops/s
Iteration  26: 676904.006 ops/s
Iteration  27: 676440.289 ops/s
Iteration  28: 674401.387 ops/s
Iteration  29: 677012.124 ops/s
Iteration  30: 675719.138 ops/s


Result "org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_newMultimapFromPairs":
  675752.391 ±(99.9%) 1760.856 ops/s [Average]
  (min, avg, max) = (663611.127, 675752.391, 679354.754), stdev = 2635.566
  CI (99.9%): [673991.535, 677513.247] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt       Score      Error  Units
HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_newMultimapFromPairs  thrpt   30  675752.391 ± 1760.856  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_notEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_notEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1535215.142 ops/s
# Warmup Iteration   2: 3389536.473 ops/s
# Warmup Iteration   3: 2852243.416 ops/s
# Warmup Iteration   4: 3401421.383 ops/s
# Warmup Iteration   5: 3419197.729 ops/s
# Warmup Iteration   6: 3398144.648 ops/s
# Warmup Iteration   7: 3386003.989 ops/s
# Warmup Iteration   8: 3391065.034 ops/s
# Warmup Iteration   9: 3373471.983 ops/s
# Warmup Iteration  10: 3363690.744 ops/s
# Warmup Iteration  11: 3396683.209 ops/s
# Warmup Iteration  12: 3407404.568 ops/s
# Warmup Iteration  13: 3417708.042 ops/s
# Warmup Iteration  14: 3392730.832 ops/s
# Warmup Iteration  15: 3406895.340 ops/s
# Warmup Iteration  16: 3406479.661 ops/s
# Warmup Iteration  17: 3402929.996 ops/s
# Warmup Iteration  18: 3426402.760 ops/s
# Warmup Iteration  19: 3401747.625 ops/s
# Warmup Iteration  20: 3415748.366 ops/s
# Warmup Iteration  21: 3413361.738 ops/s
# Warmup Iteration  22: 3409773.234 ops/s
# Warmup Iteration  23: 3421063.364 ops/s
# Warmup Iteration  24: 3387925.359 ops/s
# Warmup Iteration  25: 3433185.286 ops/s
# Warmup Iteration  26: 3423363.991 ops/s
# Warmup Iteration  27: 3422653.516 ops/s
# Warmup Iteration  28: 3418880.345 ops/s
# Warmup Iteration  29: 3405516.494 ops/s
# Warmup Iteration  30: 3432818.874 ops/s
Iteration   1: 3419148.583 ops/s
Iteration   2: 3421878.738 ops/s
Iteration   3: 3414073.488 ops/s
Iteration   4: 3427472.364 ops/s
Iteration   5: 3411454.408 ops/s
Iteration   6: 3404299.237 ops/s
Iteration   7: 3373489.759 ops/s
Iteration   8: 3352292.297 ops/s
Iteration   9: 3428086.493 ops/s
Iteration  10: 3429479.847 ops/s
Iteration  11: 3417309.898 ops/s
Iteration  12: 3432736.823 ops/s
Iteration  13: 3412346.937 ops/s
Iteration  14: 3426665.167 ops/s
Iteration  15: 3417766.080 ops/s
Iteration  16: 3436681.534 ops/s
Iteration  17: 3423469.342 ops/s
Iteration  18: 3414743.413 ops/s
Iteration  19: 3422627.603 ops/s
Iteration  20: 3399535.478 ops/s
Iteration  21: 3431499.250 ops/s
Iteration  22: 3432573.089 ops/s
Iteration  23: 3365603.146 ops/s
Iteration  24: 3412304.717 ops/s
Iteration  25: 3405809.302 ops/s
Iteration  26: 3382318.134 ops/s
Iteration  27: 3439961.682 ops/s
Iteration  28: 3404975.492 ops/s
Iteration  29: 3431983.096 ops/s
Iteration  30: 3407290.979 ops/s


Result "org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_notEmpty":
  3413329.213 ±(99.9%) 14070.808 ops/s [Average]
  (min, avg, max) = (3352292.297, 3413329.213, 3439961.682), stdev = 21060.525
  CI (99.9%): [3399258.404, 3427400.021] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_notEmpty  thrpt   30  3413329.213 ± 14070.808  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_putAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_putAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 178527.071 ops/s
# Warmup Iteration   2: 396906.290 ops/s
# Warmup Iteration   3: 411828.663 ops/s
# Warmup Iteration   4: 392556.445 ops/s
# Warmup Iteration   5: 366125.290 ops/s
# Warmup Iteration   6: 413844.645 ops/s
# Warmup Iteration   7: 413585.915 ops/s
# Warmup Iteration   8: 413589.556 ops/s
# Warmup Iteration   9: 415003.765 ops/s
# Warmup Iteration  10: 412360.020 ops/s
# Warmup Iteration  11: 413224.937 ops/s
# Warmup Iteration  12: 412201.246 ops/s
# Warmup Iteration  13: 414971.865 ops/s
# Warmup Iteration  14: 412045.080 ops/s
# Warmup Iteration  15: 412430.490 ops/s
# Warmup Iteration  16: 412769.050 ops/s
# Warmup Iteration  17: 412439.129 ops/s
# Warmup Iteration  18: 413780.818 ops/s
# Warmup Iteration  19: 412451.831 ops/s
# Warmup Iteration  20: 413400.166 ops/s
# Warmup Iteration  21: 412206.169 ops/s
# Warmup Iteration  22: 413163.399 ops/s
# Warmup Iteration  23: 413394.000 ops/s
# Warmup Iteration  24: 411377.814 ops/s
# Warmup Iteration  25: 413853.410 ops/s
# Warmup Iteration  26: 412834.146 ops/s
# Warmup Iteration  27: 414240.323 ops/s
# Warmup Iteration  28: 412386.815 ops/s
# Warmup Iteration  29: 412724.556 ops/s
# Warmup Iteration  30: 412068.269 ops/s
Iteration   1: 413804.641 ops/s
Iteration   2: 412181.217 ops/s
Iteration   3: 412093.882 ops/s
Iteration   4: 415073.615 ops/s
Iteration   5: 415373.952 ops/s
Iteration   6: 414595.630 ops/s
Iteration   7: 413877.687 ops/s
Iteration   8: 414391.068 ops/s
Iteration   9: 414062.378 ops/s
Iteration  10: 413845.491 ops/s
Iteration  11: 412494.101 ops/s
Iteration  12: 411136.025 ops/s
Iteration  13: 414664.077 ops/s
Iteration  14: 415396.786 ops/s
Iteration  15: 414309.973 ops/s
Iteration  16: 413504.173 ops/s
Iteration  17: 411866.733 ops/s
Iteration  18: 413841.039 ops/s
Iteration  19: 412646.481 ops/s
Iteration  20: 413788.730 ops/s
Iteration  21: 413247.968 ops/s
Iteration  22: 412664.310 ops/s
Iteration  23: 414697.950 ops/s
Iteration  24: 412139.757 ops/s
Iteration  25: 413203.332 ops/s
Iteration  26: 413970.217 ops/s
Iteration  27: 413929.073 ops/s
Iteration  28: 412769.406 ops/s
Iteration  29: 412007.626 ops/s
Iteration  30: 412692.665 ops/s


Result "org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_putAll":
  413475.666 ±(99.9%) 745.531 ops/s [Average]
  (min, avg, max) = (411136.025, 413475.666, 415396.786), stdev = 1115.875
  CI (99.9%): [412730.136, 414221.197] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score     Error  Units
HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_putAll  thrpt   30  413475.666 ± 745.531  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_putAllFromCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_putAllFromCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 198960.528 ops/s
# Warmup Iteration   2: 385528.373 ops/s
# Warmup Iteration   3: 430629.648 ops/s
# Warmup Iteration   4: 435628.145 ops/s
# Warmup Iteration   5: 376605.468 ops/s
# Warmup Iteration   6: 419001.106 ops/s
# Warmup Iteration   7: 436144.414 ops/s
# Warmup Iteration   8: 436342.210 ops/s
# Warmup Iteration   9: 435457.847 ops/s
# Warmup Iteration  10: 436253.329 ops/s
# Warmup Iteration  11: 435699.074 ops/s
# Warmup Iteration  12: 436344.800 ops/s
# Warmup Iteration  13: 435403.049 ops/s
# Warmup Iteration  14: 435765.921 ops/s
# Warmup Iteration  15: 436182.546 ops/s
# Warmup Iteration  16: 435584.958 ops/s
# Warmup Iteration  17: 436524.116 ops/s
# Warmup Iteration  18: 435901.078 ops/s
# Warmup Iteration  19: 435998.577 ops/s
# Warmup Iteration  20: 435500.505 ops/s
# Warmup Iteration  21: 436373.262 ops/s
# Warmup Iteration  22: 436448.361 ops/s
# Warmup Iteration  23: 435837.491 ops/s
# Warmup Iteration  24: 435428.576 ops/s
# Warmup Iteration  25: 434945.054 ops/s
# Warmup Iteration  26: 434240.817 ops/s
# Warmup Iteration  27: 435071.398 ops/s
# Warmup Iteration  28: 435691.575 ops/s
# Warmup Iteration  29: 435633.641 ops/s
# Warmup Iteration  30: 435743.599 ops/s
Iteration   1: 435238.024 ops/s
Iteration   2: 435181.531 ops/s
Iteration   3: 435864.358 ops/s
Iteration   4: 436114.309 ops/s
Iteration   5: 434218.346 ops/s
Iteration   6: 434598.652 ops/s
Iteration   7: 435088.904 ops/s
Iteration   8: 434815.350 ops/s
Iteration   9: 436574.445 ops/s
Iteration  10: 434298.991 ops/s
Iteration  11: 434881.635 ops/s
Iteration  12: 436950.205 ops/s
Iteration  13: 435613.354 ops/s
Iteration  14: 435048.015 ops/s
Iteration  15: 434556.207 ops/s
Iteration  16: 433363.264 ops/s
Iteration  17: 435223.912 ops/s
Iteration  18: 434007.421 ops/s
Iteration  19: 435316.612 ops/s
Iteration  20: 434521.680 ops/s
Iteration  21: 433080.668 ops/s
Iteration  22: 434667.536 ops/s
Iteration  23: 431925.135 ops/s
Iteration  24: 431388.350 ops/s
Iteration  25: 434492.739 ops/s
Iteration  26: 435275.220 ops/s
Iteration  27: 434396.818 ops/s
Iteration  28: 435229.482 ops/s
Iteration  29: 434304.470 ops/s
Iteration  30: 433255.441 ops/s


Result "org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_putAllFromCollection":
  434649.702 ±(99.9%) 796.221 ops/s [Average]
  (min, avg, max) = (431388.350, 434649.702, 436950.205), stdev = 1191.747
  CI (99.9%): [433853.481, 435445.924] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt       Score     Error  Units
HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_putAllFromCollection  thrpt   30  434649.702 ± 796.221  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_putAllFromIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_putAllFromIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 313473.279 ops/s
# Warmup Iteration   2: 573403.638 ops/s
# Warmup Iteration   3: 663085.485 ops/s
# Warmup Iteration   4: 665162.432 ops/s
# Warmup Iteration   5: 665154.022 ops/s
# Warmup Iteration   6: 547322.912 ops/s
# Warmup Iteration   7: 663885.820 ops/s
# Warmup Iteration   8: 667483.965 ops/s
# Warmup Iteration   9: 667358.609 ops/s
# Warmup Iteration  10: 666459.516 ops/s
# Warmup Iteration  11: 665246.482 ops/s
# Warmup Iteration  12: 666259.332 ops/s
# Warmup Iteration  13: 667654.792 ops/s
# Warmup Iteration  14: 666871.993 ops/s
# Warmup Iteration  15: 662706.461 ops/s
# Warmup Iteration  16: 665801.529 ops/s
# Warmup Iteration  17: 665517.941 ops/s
# Warmup Iteration  18: 664756.904 ops/s
# Warmup Iteration  19: 665366.858 ops/s
# Warmup Iteration  20: 664554.700 ops/s
# Warmup Iteration  21: 664796.654 ops/s
# Warmup Iteration  22: 664608.969 ops/s
# Warmup Iteration  23: 666040.582 ops/s
# Warmup Iteration  24: 665116.199 ops/s
# Warmup Iteration  25: 661074.837 ops/s
# Warmup Iteration  26: 662899.340 ops/s
# Warmup Iteration  27: 669739.033 ops/s
# Warmup Iteration  28: 664916.685 ops/s
# Warmup Iteration  29: 668964.123 ops/s
# Warmup Iteration  30: 664070.350 ops/s
Iteration   1: 664189.282 ops/s
Iteration   2: 665684.217 ops/s
Iteration   3: 666378.352 ops/s
Iteration   4: 667172.034 ops/s
Iteration   5: 667063.234 ops/s
Iteration   6: 665110.911 ops/s
Iteration   7: 663617.922 ops/s
Iteration   8: 665530.155 ops/s
Iteration   9: 662420.808 ops/s
Iteration  10: 663079.837 ops/s
Iteration  11: 667273.150 ops/s
Iteration  12: 663793.909 ops/s
Iteration  13: 666429.418 ops/s
Iteration  14: 664673.636 ops/s
Iteration  15: 665326.420 ops/s
Iteration  16: 666111.637 ops/s
Iteration  17: 664096.972 ops/s
Iteration  18: 664883.097 ops/s
Iteration  19: 666249.532 ops/s
Iteration  20: 668197.482 ops/s
Iteration  21: 665420.324 ops/s
Iteration  22: 668169.334 ops/s
Iteration  23: 669123.373 ops/s
Iteration  24: 665361.100 ops/s
Iteration  25: 668344.878 ops/s
Iteration  26: 667970.190 ops/s
Iteration  27: 665814.231 ops/s
Iteration  28: 668672.109 ops/s
Iteration  29: 667740.611 ops/s
Iteration  30: 667627.602 ops/s


Result "org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_putAllFromIterable":
  666050.859 ±(99.9%) 1177.437 ops/s [Average]
  (min, avg, max) = (662420.808, 666050.859, 669123.373), stdev = 1762.332
  CI (99.9%): [664873.422, 667228.295] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score      Error  Units
HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_putAllFromIterable  thrpt   30  666050.859 ± 1177.437  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_putAllPairs$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_putAllPairs

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 72206.839 ops/s
# Warmup Iteration   2: 157565.394 ops/s
# Warmup Iteration   3: 171579.424 ops/s
# Warmup Iteration   4: 172623.000 ops/s
# Warmup Iteration   5: 144427.046 ops/s
# Warmup Iteration   6: 173354.947 ops/s
# Warmup Iteration   7: 174248.993 ops/s
# Warmup Iteration   8: 173749.891 ops/s
# Warmup Iteration   9: 173959.527 ops/s
# Warmup Iteration  10: 173970.590 ops/s
# Warmup Iteration  11: 173782.468 ops/s
# Warmup Iteration  12: 173236.803 ops/s
# Warmup Iteration  13: 172887.679 ops/s
# Warmup Iteration  14: 173783.564 ops/s
# Warmup Iteration  15: 173368.104 ops/s
# Warmup Iteration  16: 173957.711 ops/s
# Warmup Iteration  17: 173425.625 ops/s
# Warmup Iteration  18: 174083.299 ops/s
# Warmup Iteration  19: 173794.568 ops/s
# Warmup Iteration  20: 173417.497 ops/s
# Warmup Iteration  21: 174000.018 ops/s
# Warmup Iteration  22: 173097.673 ops/s
# Warmup Iteration  23: 173169.739 ops/s
# Warmup Iteration  24: 173545.774 ops/s
# Warmup Iteration  25: 173321.958 ops/s
# Warmup Iteration  26: 173684.293 ops/s
# Warmup Iteration  27: 173095.627 ops/s
# Warmup Iteration  28: 173546.777 ops/s
# Warmup Iteration  29: 173307.410 ops/s
# Warmup Iteration  30: 173154.044 ops/s
Iteration   1: 173063.143 ops/s
Iteration   2: 173624.737 ops/s
Iteration   3: 173980.508 ops/s
Iteration   4: 173454.830 ops/s
Iteration   5: 173068.915 ops/s
Iteration   6: 173366.649 ops/s
Iteration   7: 173682.963 ops/s
Iteration   8: 173256.943 ops/s
Iteration   9: 172912.473 ops/s
Iteration  10: 174456.942 ops/s
Iteration  11: 173484.687 ops/s
Iteration  12: 173381.428 ops/s
Iteration  13: 173239.971 ops/s
Iteration  14: 173773.288 ops/s
Iteration  15: 173430.577 ops/s
Iteration  16: 173413.501 ops/s
Iteration  17: 173824.475 ops/s
Iteration  18: 174008.469 ops/s
Iteration  19: 173732.284 ops/s
Iteration  20: 173296.637 ops/s
Iteration  21: 173520.470 ops/s
Iteration  22: 173279.095 ops/s
Iteration  23: 173209.140 ops/s
Iteration  24: 172957.511 ops/s
Iteration  25: 173824.314 ops/s
Iteration  26: 173972.306 ops/s
Iteration  27: 173565.897 ops/s
Iteration  28: 173877.283 ops/s
Iteration  29: 173479.953 ops/s
Iteration  30: 173703.363 ops/s


Result "org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_putAllPairs":
  173528.092 ±(99.9%) 233.612 ops/s [Average]
  (min, avg, max) = (172912.473, 173528.092, 174456.942), stdev = 349.660
  CI (99.9%): [173294.480, 173761.704] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score     Error  Units
HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_putAllPairs  thrpt   30  173528.092 ± 233.612  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_putAndGrowMultimap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_putAndGrowMultimap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2012513.262 ops/s
# Warmup Iteration   2: 4821966.062 ops/s
# Warmup Iteration   3: 3993443.039 ops/s
# Warmup Iteration   4: 4841635.930 ops/s
# Warmup Iteration   5: 4798145.733 ops/s
# Warmup Iteration   6: 4840521.816 ops/s
# Warmup Iteration   7: 4812297.922 ops/s
# Warmup Iteration   8: 4833946.298 ops/s
# Warmup Iteration   9: 4806347.185 ops/s
# Warmup Iteration  10: 4817905.964 ops/s
# Warmup Iteration  11: 4816320.414 ops/s
# Warmup Iteration  12: 4831307.560 ops/s
# Warmup Iteration  13: 4818251.730 ops/s
# Warmup Iteration  14: 4825797.949 ops/s
# Warmup Iteration  15: 4823941.653 ops/s
# Warmup Iteration  16: 4843120.958 ops/s
# Warmup Iteration  17: 4821922.871 ops/s
# Warmup Iteration  18: 4822525.876 ops/s
# Warmup Iteration  19: 4825941.045 ops/s
# Warmup Iteration  20: 4811651.720 ops/s
# Warmup Iteration  21: 4840480.391 ops/s
# Warmup Iteration  22: 4814135.241 ops/s
# Warmup Iteration  23: 4841122.535 ops/s
# Warmup Iteration  24: 4824037.271 ops/s
# Warmup Iteration  25: 4841682.581 ops/s
# Warmup Iteration  26: 4838446.343 ops/s
# Warmup Iteration  27: 4835694.315 ops/s
# Warmup Iteration  28: 4833459.381 ops/s
# Warmup Iteration  29: 4817466.010 ops/s
# Warmup Iteration  30: 4834793.109 ops/s
Iteration   1: 4818780.639 ops/s
Iteration   2: 4847647.351 ops/s
Iteration   3: 4797704.851 ops/s
Iteration   4: 4802211.630 ops/s
Iteration   5: 4823435.907 ops/s
Iteration   6: 4825153.358 ops/s
Iteration   7: 4837664.507 ops/s
Iteration   8: 4850274.548 ops/s
Iteration   9: 4824192.570 ops/s
Iteration  10: 4853268.716 ops/s
Iteration  11: 4834244.430 ops/s
Iteration  12: 4847491.063 ops/s
Iteration  13: 4796855.042 ops/s
Iteration  14: 4808441.986 ops/s
Iteration  15: 4814149.031 ops/s
Iteration  16: 4845095.171 ops/s
Iteration  17: 4856011.292 ops/s
Iteration  18: 4827504.693 ops/s
Iteration  19: 4823771.144 ops/s
Iteration  20: 4796366.708 ops/s
Iteration  21: 4837437.979 ops/s
Iteration  22: 4833329.409 ops/s
Iteration  23: 4807257.944 ops/s
Iteration  24: 4828567.587 ops/s
Iteration  25: 4852104.687 ops/s
Iteration  26: 4852948.293 ops/s
Iteration  27: 4821044.890 ops/s
Iteration  28: 4812725.499 ops/s
Iteration  29: 4843982.538 ops/s
Iteration  30: 4830853.304 ops/s


Result "org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_putAndGrowMultimap":
  4828350.559 ±(99.9%) 12204.758 ops/s [Average]
  (min, avg, max) = (4796366.708, 4828350.559, 4856011.292), stdev = 18267.508
  CI (99.9%): [4816145.801, 4840555.316] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score       Error  Units
HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_putAndGrowMultimap  thrpt   30  4828350.559 ± 12204.758  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_putOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_putOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 118397.038 ops/s
# Warmup Iteration   2: 183719.874 ops/s
# Warmup Iteration   3: 230164.230 ops/s
# Warmup Iteration   4: 228866.860 ops/s
# Warmup Iteration   5: 229577.055 ops/s
# Warmup Iteration   6: 229171.412 ops/s
# Warmup Iteration   7: 194260.173 ops/s
# Warmup Iteration   8: 225692.074 ops/s
# Warmup Iteration   9: 229946.029 ops/s
# Warmup Iteration  10: 229264.558 ops/s
# Warmup Iteration  11: 229836.906 ops/s
# Warmup Iteration  12: 229927.758 ops/s
# Warmup Iteration  13: 229171.030 ops/s
# Warmup Iteration  14: 229679.398 ops/s
# Warmup Iteration  15: 229914.343 ops/s
# Warmup Iteration  16: 230367.976 ops/s
# Warmup Iteration  17: 236159.076 ops/s
# Warmup Iteration  18: 236242.514 ops/s
# Warmup Iteration  19: 236686.296 ops/s
# Warmup Iteration  20: 236264.442 ops/s
# Warmup Iteration  21: 236424.077 ops/s
# Warmup Iteration  22: 236524.870 ops/s
# Warmup Iteration  23: 235668.123 ops/s
# Warmup Iteration  24: 236016.395 ops/s
# Warmup Iteration  25: 235955.217 ops/s
# Warmup Iteration  26: 236148.222 ops/s
# Warmup Iteration  27: 236161.853 ops/s
# Warmup Iteration  28: 235492.498 ops/s
# Warmup Iteration  29: 235952.903 ops/s
# Warmup Iteration  30: 234170.026 ops/s
Iteration   1: 236306.551 ops/s
Iteration   2: 236012.907 ops/s
Iteration   3: 236499.134 ops/s
Iteration   4: 236258.335 ops/s
Iteration   5: 235910.738 ops/s
Iteration   6: 237488.686 ops/s
Iteration   7: 236076.773 ops/s
Iteration   8: 234555.410 ops/s
Iteration   9: 236621.835 ops/s
Iteration  10: 236473.458 ops/s
Iteration  11: 232501.263 ops/s
Iteration  12: 235049.960 ops/s
Iteration  13: 237020.458 ops/s
Iteration  14: 235354.068 ops/s
Iteration  15: 235396.437 ops/s
Iteration  16: 235097.423 ops/s
Iteration  17: 234843.492 ops/s
Iteration  18: 236016.138 ops/s
Iteration  19: 236307.846 ops/s
Iteration  20: 236212.597 ops/s
Iteration  21: 236718.833 ops/s
Iteration  22: 235348.509 ops/s
Iteration  23: 235730.717 ops/s
Iteration  24: 235553.305 ops/s
Iteration  25: 236605.733 ops/s
Iteration  26: 235353.941 ops/s
Iteration  27: 235249.244 ops/s
Iteration  28: 235768.619 ops/s
Iteration  29: 236516.347 ops/s
Iteration  30: 235291.514 ops/s


Result "org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_putOccurrences":
  235804.676 ±(99.9%) 618.282 ops/s [Average]
  (min, avg, max) = (232501.263, 235804.676, 237488.686), stdev = 925.416
  CI (99.9%): [235186.394, 236422.958] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score     Error  Units
HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_putOccurrences  thrpt   30  235804.676 ± 618.282  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_put_createCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_put_createCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 977463.922 ops/s
# Warmup Iteration   2: 2387011.044 ops/s
# Warmup Iteration   3: 2402220.995 ops/s
# Warmup Iteration   4: 1993686.637 ops/s
# Warmup Iteration   5: 2394737.111 ops/s
# Warmup Iteration   6: 2399770.491 ops/s
# Warmup Iteration   7: 2403445.887 ops/s
# Warmup Iteration   8: 2395069.306 ops/s
# Warmup Iteration   9: 2403435.674 ops/s
# Warmup Iteration  10: 2396016.319 ops/s
# Warmup Iteration  11: 2383104.755 ops/s
# Warmup Iteration  12: 2406222.950 ops/s
# Warmup Iteration  13: 2400812.733 ops/s
# Warmup Iteration  14: 2404335.251 ops/s
# Warmup Iteration  15: 2408446.192 ops/s
# Warmup Iteration  16: 2399051.935 ops/s
# Warmup Iteration  17: 2406039.549 ops/s
# Warmup Iteration  18: 2408327.594 ops/s
# Warmup Iteration  19: 2413257.352 ops/s
# Warmup Iteration  20: 2408905.665 ops/s
# Warmup Iteration  21: 2403290.419 ops/s
# Warmup Iteration  22: 2409607.491 ops/s
# Warmup Iteration  23: 2393149.039 ops/s
# Warmup Iteration  24: 2406999.319 ops/s
# Warmup Iteration  25: 2403099.972 ops/s
# Warmup Iteration  26: 2383132.697 ops/s
# Warmup Iteration  27: 2406543.984 ops/s
# Warmup Iteration  28: 2397179.009 ops/s
# Warmup Iteration  29: 2404987.170 ops/s
# Warmup Iteration  30: 2408024.529 ops/s
Iteration   1: 2409272.371 ops/s
Iteration   2: 2398730.642 ops/s
Iteration   3: 2407602.532 ops/s
Iteration   4: 2415595.803 ops/s
Iteration   5: 2397024.628 ops/s
Iteration   6: 2399654.495 ops/s
Iteration   7: 2414395.260 ops/s
Iteration   8: 2412562.023 ops/s
Iteration   9: 2410688.248 ops/s
Iteration  10: 2379941.268 ops/s
Iteration  11: 2412176.607 ops/s
Iteration  12: 2404593.091 ops/s
Iteration  13: 2404524.059 ops/s
Iteration  14: 2412883.701 ops/s
Iteration  15: 2406177.609 ops/s
Iteration  16: 2409928.043 ops/s
Iteration  17: 2411779.353 ops/s
Iteration  18: 2409443.772 ops/s
Iteration  19: 2384032.141 ops/s
Iteration  20: 2359520.343 ops/s
Iteration  21: 2407627.111 ops/s
Iteration  22: 2400800.875 ops/s
Iteration  23: 2408545.461 ops/s
Iteration  24: 2405101.829 ops/s
Iteration  25: 2352962.125 ops/s
Iteration  26: 2401907.167 ops/s
Iteration  27: 2403206.949 ops/s
Iteration  28: 2389318.006 ops/s
Iteration  29: 2410586.683 ops/s
Iteration  30: 2411553.087 ops/s


Result "org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_put_createCollection":
  2401737.843 ±(99.9%) 10038.327 ops/s [Average]
  (min, avg, max) = (2352962.125, 2401737.843, 2415595.803), stdev = 15024.896
  CI (99.9%): [2391699.516, 2411776.169] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt        Score       Error  Units
HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_put_createCollection  thrpt   30  2401737.843 ± 10038.327  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_rejectKeysMultiValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_rejectKeysMultiValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 92918.892 ops/s
# Warmup Iteration   2: 176680.453 ops/s
# Warmup Iteration   3: 207630.970 ops/s
# Warmup Iteration   4: 207493.243 ops/s
# Warmup Iteration   5: 207807.593 ops/s
# Warmup Iteration   6: 172113.829 ops/s
# Warmup Iteration   7: 208621.281 ops/s
# Warmup Iteration   8: 208096.838 ops/s
# Warmup Iteration   9: 208365.088 ops/s
# Warmup Iteration  10: 207691.188 ops/s
# Warmup Iteration  11: 208108.874 ops/s
# Warmup Iteration  12: 208521.845 ops/s
# Warmup Iteration  13: 208401.416 ops/s
# Warmup Iteration  14: 208497.004 ops/s
# Warmup Iteration  15: 207711.927 ops/s
# Warmup Iteration  16: 208796.196 ops/s
# Warmup Iteration  17: 208477.965 ops/s
# Warmup Iteration  18: 208224.427 ops/s
# Warmup Iteration  19: 207975.271 ops/s
# Warmup Iteration  20: 208298.986 ops/s
# Warmup Iteration  21: 208908.051 ops/s
# Warmup Iteration  22: 208612.350 ops/s
# Warmup Iteration  23: 208600.357 ops/s
# Warmup Iteration  24: 208355.238 ops/s
# Warmup Iteration  25: 208302.490 ops/s
# Warmup Iteration  26: 208868.107 ops/s
# Warmup Iteration  27: 208616.855 ops/s
# Warmup Iteration  28: 208284.264 ops/s
# Warmup Iteration  29: 208479.248 ops/s
# Warmup Iteration  30: 208128.966 ops/s
Iteration   1: 207644.756 ops/s
Iteration   2: 209428.480 ops/s
Iteration   3: 208061.101 ops/s
Iteration   4: 208059.267 ops/s
Iteration   5: 208412.772 ops/s
Iteration   6: 207973.941 ops/s
Iteration   7: 208435.085 ops/s
Iteration   8: 208208.809 ops/s
Iteration   9: 207673.473 ops/s
Iteration  10: 207976.582 ops/s
Iteration  11: 208157.509 ops/s
Iteration  12: 207285.221 ops/s
Iteration  13: 208691.949 ops/s
Iteration  14: 207953.338 ops/s
Iteration  15: 209047.106 ops/s
Iteration  16: 207824.145 ops/s
Iteration  17: 208170.449 ops/s
Iteration  18: 208396.188 ops/s
Iteration  19: 207868.346 ops/s
Iteration  20: 208171.957 ops/s
Iteration  21: 207381.740 ops/s
Iteration  22: 207867.211 ops/s
Iteration  23: 208551.038 ops/s
Iteration  24: 208691.689 ops/s
Iteration  25: 208703.098 ops/s
Iteration  26: 208213.755 ops/s
Iteration  27: 208480.493 ops/s
Iteration  28: 207418.181 ops/s
Iteration  29: 207412.502 ops/s
Iteration  30: 208663.860 ops/s


Result "org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_rejectKeysMultiValues":
  208160.801 ±(99.9%) 336.664 ops/s [Average]
  (min, avg, max) = (207285.221, 208160.801, 209428.480), stdev = 503.903
  CI (99.9%): [207824.137, 208497.465] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt       Score     Error  Units
HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_rejectKeysMultiValues  thrpt   30  208160.801 ± 336.664  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_rejectKeysValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_rejectKeysValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 109713.613 ops/s
# Warmup Iteration   2: 232464.428 ops/s
# Warmup Iteration   3: 258773.077 ops/s
# Warmup Iteration   4: 258901.058 ops/s
# Warmup Iteration   5: 218133.377 ops/s
# Warmup Iteration   6: 261009.401 ops/s
# Warmup Iteration   7: 260516.041 ops/s
# Warmup Iteration   8: 260493.200 ops/s
# Warmup Iteration   9: 259643.117 ops/s
# Warmup Iteration  10: 260287.154 ops/s
# Warmup Iteration  11: 260691.570 ops/s
# Warmup Iteration  12: 260608.787 ops/s
# Warmup Iteration  13: 259640.485 ops/s
# Warmup Iteration  14: 260358.445 ops/s
# Warmup Iteration  15: 255115.953 ops/s
# Warmup Iteration  16: 260640.383 ops/s
# Warmup Iteration  17: 258771.850 ops/s
# Warmup Iteration  18: 259967.895 ops/s
# Warmup Iteration  19: 261135.161 ops/s
# Warmup Iteration  20: 258947.663 ops/s
# Warmup Iteration  21: 260765.110 ops/s
# Warmup Iteration  22: 259075.154 ops/s
# Warmup Iteration  23: 260258.495 ops/s
# Warmup Iteration  24: 261088.138 ops/s
# Warmup Iteration  25: 260071.144 ops/s
# Warmup Iteration  26: 259680.430 ops/s
# Warmup Iteration  27: 259920.484 ops/s
# Warmup Iteration  28: 260463.897 ops/s
# Warmup Iteration  29: 261085.036 ops/s
# Warmup Iteration  30: 259761.477 ops/s
Iteration   1: 259950.157 ops/s
Iteration   2: 259738.832 ops/s
Iteration   3: 260097.314 ops/s
Iteration   4: 260348.492 ops/s
Iteration   5: 259536.683 ops/s
Iteration   6: 260615.882 ops/s
Iteration   7: 256444.462 ops/s
Iteration   8: 259073.029 ops/s
Iteration   9: 260944.473 ops/s
Iteration  10: 260432.192 ops/s
Iteration  11: 260199.239 ops/s
Iteration  12: 261010.140 ops/s
Iteration  13: 260266.189 ops/s
Iteration  14: 260215.978 ops/s
Iteration  15: 259902.793 ops/s
Iteration  16: 259889.936 ops/s
Iteration  17: 259742.585 ops/s
Iteration  18: 260122.518 ops/s
Iteration  19: 259469.878 ops/s
Iteration  20: 259120.745 ops/s
Iteration  21: 256758.485 ops/s
Iteration  22: 260038.487 ops/s
Iteration  23: 261156.671 ops/s
Iteration  24: 260084.688 ops/s
Iteration  25: 256106.859 ops/s
Iteration  26: 251976.721 ops/s
Iteration  27: 261482.819 ops/s
Iteration  28: 260067.797 ops/s
Iteration  29: 259577.743 ops/s
Iteration  30: 260040.916 ops/s


Result "org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_rejectKeysValues":
  259480.423 ±(99.9%) 1261.436 ops/s [Average]
  (min, avg, max) = (251976.721, 259480.423, 261482.819), stdev = 1888.058
  CI (99.9%): [258218.988, 260741.859] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score      Error  Units
HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_rejectKeysValues  thrpt   30  259480.423 ± 1261.436  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 178165.969 ops/s
# Warmup Iteration   2: 371647.994 ops/s
# Warmup Iteration   3: 388081.712 ops/s
# Warmup Iteration   4: 389567.431 ops/s
# Warmup Iteration   5: 325193.163 ops/s
# Warmup Iteration   6: 388052.343 ops/s
# Warmup Iteration   7: 390400.520 ops/s
# Warmup Iteration   8: 389339.819 ops/s
# Warmup Iteration   9: 388508.265 ops/s
# Warmup Iteration  10: 383381.724 ops/s
# Warmup Iteration  11: 388841.321 ops/s
# Warmup Iteration  12: 388474.633 ops/s
# Warmup Iteration  13: 389956.897 ops/s
# Warmup Iteration  14: 389225.841 ops/s
# Warmup Iteration  15: 388250.328 ops/s
# Warmup Iteration  16: 385602.630 ops/s
# Warmup Iteration  17: 388467.676 ops/s
# Warmup Iteration  18: 388277.672 ops/s
# Warmup Iteration  19: 385191.664 ops/s
# Warmup Iteration  20: 389193.782 ops/s
# Warmup Iteration  21: 385819.683 ops/s
# Warmup Iteration  22: 389419.229 ops/s
# Warmup Iteration  23: 389432.688 ops/s
# Warmup Iteration  24: 386018.407 ops/s
# Warmup Iteration  25: 387617.871 ops/s
# Warmup Iteration  26: 389612.168 ops/s
# Warmup Iteration  27: 389487.885 ops/s
# Warmup Iteration  28: 389548.144 ops/s
# Warmup Iteration  29: 388228.194 ops/s
# Warmup Iteration  30: 389427.336 ops/s
Iteration   1: 390521.576 ops/s
Iteration   2: 387337.782 ops/s
Iteration   3: 387280.162 ops/s
Iteration   4: 389420.477 ops/s
Iteration   5: 389905.797 ops/s
Iteration   6: 390585.757 ops/s
Iteration   7: 389020.241 ops/s
Iteration   8: 386529.823 ops/s
Iteration   9: 389983.524 ops/s
Iteration  10: 389593.951 ops/s
Iteration  11: 388999.693 ops/s
Iteration  12: 386776.228 ops/s
Iteration  13: 387040.559 ops/s
Iteration  14: 388315.508 ops/s
Iteration  15: 388801.743 ops/s
Iteration  16: 389688.814 ops/s
Iteration  17: 389717.500 ops/s
Iteration  18: 390645.801 ops/s
Iteration  19: 387780.139 ops/s
Iteration  20: 389511.149 ops/s
Iteration  21: 388513.925 ops/s
Iteration  22: 387926.488 ops/s
Iteration  23: 389215.476 ops/s
Iteration  24: 388737.625 ops/s
Iteration  25: 388605.941 ops/s
Iteration  26: 389366.021 ops/s
Iteration  27: 388256.204 ops/s
Iteration  28: 389999.399 ops/s
Iteration  29: 387122.299 ops/s
Iteration  30: 388404.549 ops/s


Result "org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_remove":
  388786.805 ±(99.9%) 780.448 ops/s [Average]
  (min, avg, max) = (386529.823, 388786.805, 390645.801), stdev = 1168.138
  CI (99.9%): [388006.357, 389567.253] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score     Error  Units
HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_remove  thrpt   30  388786.805 ± 780.448  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_removeKey$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_removeKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 351710.616 ops/s
# Warmup Iteration   2: 740550.757 ops/s
# Warmup Iteration   3: 836589.564 ops/s
# Warmup Iteration   4: 841262.754 ops/s
# Warmup Iteration   5: 698474.204 ops/s
# Warmup Iteration   6: 837832.287 ops/s
# Warmup Iteration   7: 840016.492 ops/s
# Warmup Iteration   8: 837886.828 ops/s
# Warmup Iteration   9: 837776.144 ops/s
# Warmup Iteration  10: 837358.856 ops/s
# Warmup Iteration  11: 836137.678 ops/s
# Warmup Iteration  12: 838661.408 ops/s
# Warmup Iteration  13: 836066.219 ops/s
# Warmup Iteration  14: 838028.804 ops/s
# Warmup Iteration  15: 836756.558 ops/s
# Warmup Iteration  16: 838345.330 ops/s
# Warmup Iteration  17: 835421.721 ops/s
# Warmup Iteration  18: 835186.130 ops/s
# Warmup Iteration  19: 826555.113 ops/s
# Warmup Iteration  20: 828426.419 ops/s
# Warmup Iteration  21: 834690.813 ops/s
# Warmup Iteration  22: 833910.143 ops/s
# Warmup Iteration  23: 836542.073 ops/s
# Warmup Iteration  24: 828699.867 ops/s
# Warmup Iteration  25: 836977.645 ops/s
# Warmup Iteration  26: 829896.587 ops/s
# Warmup Iteration  27: 835171.802 ops/s
# Warmup Iteration  28: 835453.563 ops/s
# Warmup Iteration  29: 837809.010 ops/s
# Warmup Iteration  30: 835947.941 ops/s
Iteration   1: 835472.478 ops/s
Iteration   2: 837134.028 ops/s
Iteration   3: 837056.334 ops/s
Iteration   4: 837029.955 ops/s
Iteration   5: 835647.513 ops/s
Iteration   6: 837403.536 ops/s
Iteration   7: 838947.234 ops/s
Iteration   8: 836547.273 ops/s
Iteration   9: 835989.489 ops/s
Iteration  10: 838383.531 ops/s
Iteration  11: 837424.621 ops/s
Iteration  12: 836939.873 ops/s
Iteration  13: 841217.737 ops/s
Iteration  14: 832461.616 ops/s
Iteration  15: 837871.872 ops/s
Iteration  16: 838911.429 ops/s
Iteration  17: 834898.727 ops/s
Iteration  18: 837443.032 ops/s
Iteration  19: 837289.717 ops/s
Iteration  20: 836797.189 ops/s
Iteration  21: 839320.951 ops/s
Iteration  22: 836082.031 ops/s
Iteration  23: 836008.863 ops/s
Iteration  24: 836447.714 ops/s
Iteration  25: 834722.664 ops/s
Iteration  26: 836533.184 ops/s
Iteration  27: 836372.392 ops/s
Iteration  28: 836733.639 ops/s
Iteration  29: 835389.849 ops/s
Iteration  30: 838561.389 ops/s


Result "org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_removeKey":
  836901.329 ±(99.9%) 1089.548 ops/s [Average]
  (min, avg, max) = (832461.616, 836901.329, 841217.737), stdev = 1630.784
  CI (99.9%): [835811.781, 837990.877] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_removeKey  thrpt   30  836901.329 ± 1089.548  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_removeObject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_removeObject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 891349.609 ops/s
# Warmup Iteration   2: 2146867.390 ops/s
# Warmup Iteration   3: 2242324.718 ops/s
# Warmup Iteration   4: 1843790.640 ops/s
# Warmup Iteration   5: 2243781.165 ops/s
# Warmup Iteration   6: 2241069.892 ops/s
# Warmup Iteration   7: 2236177.904 ops/s
# Warmup Iteration   8: 2236403.055 ops/s
# Warmup Iteration   9: 2250793.588 ops/s
# Warmup Iteration  10: 2227118.968 ops/s
# Warmup Iteration  11: 2238785.940 ops/s
# Warmup Iteration  12: 2245714.827 ops/s
# Warmup Iteration  13: 2243587.544 ops/s
# Warmup Iteration  14: 2230698.451 ops/s
# Warmup Iteration  15: 2247596.246 ops/s
# Warmup Iteration  16: 2243487.692 ops/s
# Warmup Iteration  17: 2262643.207 ops/s
# Warmup Iteration  18: 2237248.724 ops/s
# Warmup Iteration  19: 2249561.485 ops/s
# Warmup Iteration  20: 2241157.254 ops/s
# Warmup Iteration  21: 2246091.416 ops/s
# Warmup Iteration  22: 2248994.418 ops/s
# Warmup Iteration  23: 2245713.045 ops/s
# Warmup Iteration  24: 2245636.092 ops/s
# Warmup Iteration  25: 2242717.533 ops/s
# Warmup Iteration  26: 2235099.144 ops/s
# Warmup Iteration  27: 2251373.320 ops/s
# Warmup Iteration  28: 2257250.529 ops/s
# Warmup Iteration  29: 2244484.946 ops/s
# Warmup Iteration  30: 2229468.808 ops/s
Iteration   1: 2241341.092 ops/s
Iteration   2: 2246570.876 ops/s
Iteration   3: 2196039.031 ops/s
Iteration   4: 2240133.908 ops/s
Iteration   5: 2236137.808 ops/s
Iteration   6: 2246019.316 ops/s
Iteration   7: 2239505.618 ops/s
Iteration   8: 2253134.214 ops/s
Iteration   9: 2245970.083 ops/s
Iteration  10: 2228241.132 ops/s
Iteration  11: 2231528.953 ops/s
Iteration  12: 2237650.401 ops/s
Iteration  13: 2250326.813 ops/s
Iteration  14: 2246093.874 ops/s
Iteration  15: 2234821.894 ops/s
Iteration  16: 2226295.724 ops/s
Iteration  17: 2246446.860 ops/s
Iteration  18: 2248542.341 ops/s
Iteration  19: 2237442.960 ops/s
Iteration  20: 2232064.180 ops/s
Iteration  21: 2227957.033 ops/s
Iteration  22: 2224685.609 ops/s
Iteration  23: 2243747.451 ops/s
Iteration  24: 2236272.174 ops/s
Iteration  25: 2242041.083 ops/s
Iteration  26: 2250295.393 ops/s
Iteration  27: 2242199.414 ops/s
Iteration  28: 2231952.676 ops/s
Iteration  29: 2186528.658 ops/s
Iteration  30: 2243062.707 ops/s


Result "org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_removeObject":
  2236434.976 ±(99.9%) 9665.681 ops/s [Average]
  (min, avg, max) = (2186528.658, 2236434.976, 2253134.214), stdev = 14467.138
  CI (99.9%): [2226769.294, 2246100.657] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score      Error  Units
HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_removeObject  thrpt   30  2236434.976 ± 9665.681  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_replaceValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_replaceValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 108594.732 ops/s
# Warmup Iteration   2: 224255.842 ops/s
# Warmup Iteration   3: 248366.212 ops/s
# Warmup Iteration   4: 250676.726 ops/s
# Warmup Iteration   5: 206927.070 ops/s
# Warmup Iteration   6: 250988.710 ops/s
# Warmup Iteration   7: 251238.662 ops/s
# Warmup Iteration   8: 250413.714 ops/s
# Warmup Iteration   9: 251555.358 ops/s
# Warmup Iteration  10: 251069.119 ops/s
# Warmup Iteration  11: 250122.331 ops/s
# Warmup Iteration  12: 250943.875 ops/s
# Warmup Iteration  13: 250844.205 ops/s
# Warmup Iteration  14: 250925.914 ops/s
# Warmup Iteration  15: 250823.445 ops/s
# Warmup Iteration  16: 251697.454 ops/s
# Warmup Iteration  17: 251506.027 ops/s
# Warmup Iteration  18: 251429.631 ops/s
# Warmup Iteration  19: 251572.358 ops/s
# Warmup Iteration  20: 250977.336 ops/s
# Warmup Iteration  21: 251870.757 ops/s
# Warmup Iteration  22: 251691.049 ops/s
# Warmup Iteration  23: 250661.262 ops/s
# Warmup Iteration  24: 251459.715 ops/s
# Warmup Iteration  25: 251511.415 ops/s
# Warmup Iteration  26: 251339.924 ops/s
# Warmup Iteration  27: 251020.081 ops/s
# Warmup Iteration  28: 251526.932 ops/s
# Warmup Iteration  29: 251277.250 ops/s
# Warmup Iteration  30: 251563.603 ops/s
Iteration   1: 252151.556 ops/s
Iteration   2: 252258.879 ops/s
Iteration   3: 251782.352 ops/s
Iteration   4: 251546.131 ops/s
Iteration   5: 251891.392 ops/s
Iteration   6: 250953.639 ops/s
Iteration   7: 251782.693 ops/s
Iteration   8: 252089.348 ops/s
Iteration   9: 252038.325 ops/s
Iteration  10: 251879.563 ops/s
Iteration  11: 251773.979 ops/s
Iteration  12: 252132.742 ops/s
Iteration  13: 252085.398 ops/s
Iteration  14: 252013.404 ops/s
Iteration  15: 246955.301 ops/s
Iteration  16: 252427.706 ops/s
Iteration  17: 251772.596 ops/s
Iteration  18: 251634.433 ops/s
Iteration  19: 250807.836 ops/s
Iteration  20: 248223.463 ops/s
Iteration  21: 252114.268 ops/s
Iteration  22: 243735.162 ops/s
Iteration  23: 251702.202 ops/s
Iteration  24: 250462.308 ops/s
Iteration  25: 250765.953 ops/s
Iteration  26: 252357.770 ops/s
Iteration  27: 251693.196 ops/s
Iteration  28: 251804.735 ops/s
Iteration  29: 251743.352 ops/s
Iteration  30: 251287.202 ops/s


Result "org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_replaceValues":
  251195.563 ±(99.9%) 1220.740 ops/s [Average]
  (min, avg, max) = (243735.162, 251195.563, 252427.706), stdev = 1827.146
  CI (99.9%): [249974.823, 252416.303] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_replaceValues  thrpt   30  251195.563 ± 1220.740  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_replaceValues_absent_key$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_replaceValues_absent_key

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 143657.925 ops/s
# Warmup Iteration   2: 331552.012 ops/s
# Warmup Iteration   3: 363891.429 ops/s
# Warmup Iteration   4: 366152.094 ops/s
# Warmup Iteration   5: 304122.839 ops/s
# Warmup Iteration   6: 366331.305 ops/s
# Warmup Iteration   7: 366190.400 ops/s
# Warmup Iteration   8: 365942.822 ops/s
# Warmup Iteration   9: 366518.987 ops/s
# Warmup Iteration  10: 366005.986 ops/s
# Warmup Iteration  11: 367183.680 ops/s
# Warmup Iteration  12: 367264.553 ops/s
# Warmup Iteration  13: 367333.997 ops/s
# Warmup Iteration  14: 366071.233 ops/s
# Warmup Iteration  15: 366108.303 ops/s
# Warmup Iteration  16: 366936.266 ops/s
# Warmup Iteration  17: 366942.317 ops/s
# Warmup Iteration  18: 367038.351 ops/s
# Warmup Iteration  19: 366879.111 ops/s
# Warmup Iteration  20: 367854.577 ops/s
# Warmup Iteration  21: 366784.871 ops/s
# Warmup Iteration  22: 366800.382 ops/s
# Warmup Iteration  23: 366783.571 ops/s
# Warmup Iteration  24: 366229.545 ops/s
# Warmup Iteration  25: 366426.114 ops/s
# Warmup Iteration  26: 367082.103 ops/s
# Warmup Iteration  27: 365829.322 ops/s
# Warmup Iteration  28: 366721.545 ops/s
# Warmup Iteration  29: 365626.091 ops/s
# Warmup Iteration  30: 367095.144 ops/s
Iteration   1: 365211.603 ops/s
Iteration   2: 365956.711 ops/s
Iteration   3: 366690.035 ops/s
Iteration   4: 366362.647 ops/s
Iteration   5: 366961.648 ops/s
Iteration   6: 366387.542 ops/s
Iteration   7: 365080.595 ops/s
Iteration   8: 365574.196 ops/s
Iteration   9: 364918.746 ops/s
Iteration  10: 366930.069 ops/s
Iteration  11: 366013.331 ops/s
Iteration  12: 365324.516 ops/s
Iteration  13: 366096.961 ops/s
Iteration  14: 366033.681 ops/s
Iteration  15: 366717.281 ops/s
Iteration  16: 365932.556 ops/s
Iteration  17: 367051.583 ops/s
Iteration  18: 366206.881 ops/s
Iteration  19: 366817.808 ops/s
Iteration  20: 364963.356 ops/s
Iteration  21: 366102.662 ops/s
Iteration  22: 366182.175 ops/s
Iteration  23: 364913.786 ops/s
Iteration  24: 365313.556 ops/s
Iteration  25: 367140.490 ops/s
Iteration  26: 365923.373 ops/s
Iteration  27: 365863.653 ops/s
Iteration  28: 367375.067 ops/s
Iteration  29: 366678.329 ops/s
Iteration  30: 366018.978 ops/s


Result "org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_replaceValues_absent_key":
  366091.460 ±(99.9%) 470.227 ops/s [Average]
  (min, avg, max) = (364913.786, 366091.460, 367375.067), stdev = 703.813
  CI (99.9%): [365621.234, 366561.687] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt       Score     Error  Units
HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_replaceValues_absent_key  thrpt   30  366091.460 ± 470.227  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_selectKeysMultiValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_selectKeysMultiValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 83352.243 ops/s
# Warmup Iteration   2: 170880.610 ops/s
# Warmup Iteration   3: 207238.221 ops/s
# Warmup Iteration   4: 208068.422 ops/s
# Warmup Iteration   5: 208916.858 ops/s
# Warmup Iteration   6: 173413.775 ops/s
# Warmup Iteration   7: 209057.628 ops/s
# Warmup Iteration   8: 209020.494 ops/s
# Warmup Iteration   9: 206923.906 ops/s
# Warmup Iteration  10: 207285.861 ops/s
# Warmup Iteration  11: 208479.985 ops/s
# Warmup Iteration  12: 208441.451 ops/s
# Warmup Iteration  13: 208838.901 ops/s
# Warmup Iteration  14: 208620.385 ops/s
# Warmup Iteration  15: 208933.651 ops/s
# Warmup Iteration  16: 208981.352 ops/s
# Warmup Iteration  17: 209217.959 ops/s
# Warmup Iteration  18: 209254.928 ops/s
# Warmup Iteration  19: 206352.287 ops/s
# Warmup Iteration  20: 208747.519 ops/s
# Warmup Iteration  21: 209285.419 ops/s
# Warmup Iteration  22: 207273.188 ops/s
# Warmup Iteration  23: 206078.476 ops/s
# Warmup Iteration  24: 208234.677 ops/s
# Warmup Iteration  25: 209896.135 ops/s
# Warmup Iteration  26: 207255.646 ops/s
# Warmup Iteration  27: 209026.940 ops/s
# Warmup Iteration  28: 208082.468 ops/s
# Warmup Iteration  29: 207545.805 ops/s
# Warmup Iteration  30: 209229.296 ops/s
Iteration   1: 208860.230 ops/s
Iteration   2: 207678.406 ops/s
Iteration   3: 208086.293 ops/s
Iteration   4: 209330.569 ops/s
Iteration   5: 209826.420 ops/s
Iteration   6: 209355.476 ops/s
Iteration   7: 208868.319 ops/s
Iteration   8: 209038.101 ops/s
Iteration   9: 209699.978 ops/s
Iteration  10: 209161.648 ops/s
Iteration  11: 209303.387 ops/s
Iteration  12: 209471.867 ops/s
Iteration  13: 208610.709 ops/s
Iteration  14: 209881.211 ops/s
Iteration  15: 209748.820 ops/s
Iteration  16: 205429.286 ops/s
Iteration  17: 209293.676 ops/s
Iteration  18: 209503.287 ops/s
Iteration  19: 209257.008 ops/s
Iteration  20: 210080.287 ops/s
Iteration  21: 209761.555 ops/s
Iteration  22: 208974.853 ops/s
Iteration  23: 209440.943 ops/s
Iteration  24: 209757.083 ops/s
Iteration  25: 206754.840 ops/s
Iteration  26: 208372.770 ops/s
Iteration  27: 204058.438 ops/s
Iteration  28: 208781.854 ops/s
Iteration  29: 209149.844 ops/s
Iteration  30: 208627.846 ops/s


Result "org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_selectKeysMultiValues":
  208805.500 ±(99.9%) 881.264 ops/s [Average]
  (min, avg, max) = (204058.438, 208805.500, 210080.287), stdev = 1319.034
  CI (99.9%): [207924.237, 209686.764] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt       Score     Error  Units
HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_selectKeysMultiValues  thrpt   30  208805.500 ± 881.264  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_selectKeysValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_selectKeysValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 106500.122 ops/s
# Warmup Iteration   2: 229865.674 ops/s
# Warmup Iteration   3: 258347.988 ops/s
# Warmup Iteration   4: 260542.650 ops/s
# Warmup Iteration   5: 217242.311 ops/s
# Warmup Iteration   6: 260439.435 ops/s
# Warmup Iteration   7: 260136.864 ops/s
# Warmup Iteration   8: 258795.670 ops/s
# Warmup Iteration   9: 255721.227 ops/s
# Warmup Iteration  10: 257516.590 ops/s
# Warmup Iteration  11: 257528.033 ops/s
# Warmup Iteration  12: 259677.076 ops/s
# Warmup Iteration  13: 260060.894 ops/s
# Warmup Iteration  14: 259045.081 ops/s
# Warmup Iteration  15: 260251.189 ops/s
# Warmup Iteration  16: 260073.568 ops/s
# Warmup Iteration  17: 259207.330 ops/s
# Warmup Iteration  18: 260192.109 ops/s
# Warmup Iteration  19: 260136.352 ops/s
# Warmup Iteration  20: 259554.707 ops/s
# Warmup Iteration  21: 259397.510 ops/s
# Warmup Iteration  22: 259889.696 ops/s
# Warmup Iteration  23: 260054.206 ops/s
# Warmup Iteration  24: 257880.393 ops/s
# Warmup Iteration  25: 259682.747 ops/s
# Warmup Iteration  26: 259801.538 ops/s
# Warmup Iteration  27: 260036.599 ops/s
# Warmup Iteration  28: 259421.201 ops/s
# Warmup Iteration  29: 259789.359 ops/s
# Warmup Iteration  30: 260342.750 ops/s
Iteration   1: 258989.888 ops/s
Iteration   2: 259772.773 ops/s
Iteration   3: 259847.942 ops/s
Iteration   4: 259938.244 ops/s
Iteration   5: 261004.766 ops/s
Iteration   6: 259521.814 ops/s
Iteration   7: 259160.076 ops/s
Iteration   8: 260639.076 ops/s
Iteration   9: 258554.579 ops/s
Iteration  10: 260532.631 ops/s
Iteration  11: 259327.162 ops/s
Iteration  12: 259145.050 ops/s
Iteration  13: 259729.230 ops/s
Iteration  14: 260871.511 ops/s
Iteration  15: 259188.455 ops/s
Iteration  16: 259921.246 ops/s
Iteration  17: 259473.638 ops/s
Iteration  18: 260349.976 ops/s
Iteration  19: 259412.364 ops/s
Iteration  20: 260559.973 ops/s
Iteration  21: 260639.957 ops/s
Iteration  22: 259952.159 ops/s
Iteration  23: 259653.786 ops/s
Iteration  24: 260846.162 ops/s
Iteration  25: 259695.235 ops/s
Iteration  26: 259689.015 ops/s
Iteration  27: 260505.076 ops/s
Iteration  28: 260332.878 ops/s
Iteration  29: 260324.638 ops/s
Iteration  30: 260405.288 ops/s


Result "org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_selectKeysValues":
  259932.820 ±(99.9%) 420.747 ops/s [Average]
  (min, avg, max) = (258554.579, 259932.820, 261004.766), stdev = 629.754
  CI (99.9%): [259512.073, 260353.566] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score     Error  Units
HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_selectKeysValues  thrpt   30  259932.820 ± 420.747  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_serialization$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_serialization

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 32216.662 ops/s
# Warmup Iteration   2: 45831.044 ops/s
# Warmup Iteration   3: 66149.201 ops/s
# Warmup Iteration   4: 65546.516 ops/s
# Warmup Iteration   5: 65889.457 ops/s
# Warmup Iteration   6: 65890.949 ops/s
# Warmup Iteration   7: 65994.246 ops/s
# Warmup Iteration   8: 65372.956 ops/s
# Warmup Iteration   9: 55429.076 ops/s
# Warmup Iteration  10: 66067.139 ops/s
# Warmup Iteration  11: 66079.946 ops/s
# Warmup Iteration  12: 66144.603 ops/s
# Warmup Iteration  13: 66103.679 ops/s
# Warmup Iteration  14: 65659.729 ops/s
# Warmup Iteration  15: 65963.230 ops/s
# Warmup Iteration  16: 66109.471 ops/s
# Warmup Iteration  17: 66037.106 ops/s
# Warmup Iteration  18: 66082.820 ops/s
# Warmup Iteration  19: 65947.602 ops/s
# Warmup Iteration  20: 66093.214 ops/s
# Warmup Iteration  21: 66130.950 ops/s
# Warmup Iteration  22: 65295.905 ops/s
# Warmup Iteration  23: 65916.566 ops/s
# Warmup Iteration  24: 66269.810 ops/s
# Warmup Iteration  25: 66084.053 ops/s
# Warmup Iteration  26: 66046.798 ops/s
# Warmup Iteration  27: 65974.499 ops/s
# Warmup Iteration  28: 66008.175 ops/s
# Warmup Iteration  29: 66340.936 ops/s
# Warmup Iteration  30: 65969.488 ops/s
Iteration   1: 65902.280 ops/s
Iteration   2: 66170.747 ops/s
Iteration   3: 66095.754 ops/s
Iteration   4: 66066.979 ops/s
Iteration   5: 66082.816 ops/s
Iteration   6: 66083.003 ops/s
Iteration   7: 66023.990 ops/s
Iteration   8: 65982.741 ops/s
Iteration   9: 65790.683 ops/s
Iteration  10: 65959.051 ops/s
Iteration  11: 65873.590 ops/s
Iteration  12: 66228.501 ops/s
Iteration  13: 66192.657 ops/s
Iteration  14: 65915.204 ops/s
Iteration  15: 66023.923 ops/s
Iteration  16: 66144.470 ops/s
Iteration  17: 66080.821 ops/s
Iteration  18: 66086.475 ops/s
Iteration  19: 66251.888 ops/s
Iteration  20: 66228.641 ops/s
Iteration  21: 66239.325 ops/s
Iteration  22: 66308.132 ops/s
Iteration  23: 66185.258 ops/s
Iteration  24: 66205.115 ops/s
Iteration  25: 66249.920 ops/s
Iteration  26: 66318.317 ops/s
Iteration  27: 66349.886 ops/s
Iteration  28: 66337.948 ops/s
Iteration  29: 66345.514 ops/s
Iteration  30: 66096.092 ops/s


Result "org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_serialization":
  66127.324 ±(99.9%) 99.828 ops/s [Average]
  (min, avg, max) = (65790.683, 66127.324, 66349.886), stdev = 149.418
  CI (99.9%): [66027.496, 66227.152] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt      Score    Error  Units
HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_serialization  thrpt   30  66127.324 ± 99.828  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_sizeDistinct$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_sizeDistinct

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1449924.307 ops/s
# Warmup Iteration   2: 3511669.719 ops/s
# Warmup Iteration   3: 3516227.457 ops/s
# Warmup Iteration   4: 2874996.653 ops/s
# Warmup Iteration   5: 3523968.206 ops/s
# Warmup Iteration   6: 3495797.147 ops/s
# Warmup Iteration   7: 3523275.774 ops/s
# Warmup Iteration   8: 3517493.585 ops/s
# Warmup Iteration   9: 3526657.562 ops/s
# Warmup Iteration  10: 3487694.218 ops/s
# Warmup Iteration  11: 3528385.366 ops/s
# Warmup Iteration  12: 3527843.781 ops/s
# Warmup Iteration  13: 3527273.094 ops/s
# Warmup Iteration  14: 3500887.218 ops/s
# Warmup Iteration  15: 3520988.078 ops/s
# Warmup Iteration  16: 3528212.927 ops/s
# Warmup Iteration  17: 3502261.224 ops/s
# Warmup Iteration  18: 3528713.393 ops/s
# Warmup Iteration  19: 3528506.498 ops/s
# Warmup Iteration  20: 3522299.313 ops/s
# Warmup Iteration  21: 3529950.605 ops/s
# Warmup Iteration  22: 3523901.682 ops/s
# Warmup Iteration  23: 3528137.367 ops/s
# Warmup Iteration  24: 3531302.588 ops/s
# Warmup Iteration  25: 3532862.204 ops/s
# Warmup Iteration  26: 3506971.337 ops/s
# Warmup Iteration  27: 3528706.024 ops/s
# Warmup Iteration  28: 3499039.413 ops/s
# Warmup Iteration  29: 3535186.766 ops/s
# Warmup Iteration  30: 3524834.362 ops/s
Iteration   1: 3532662.055 ops/s
Iteration   2: 3521942.628 ops/s
Iteration   3: 3522562.841 ops/s
Iteration   4: 3531996.012 ops/s
Iteration   5: 3529132.445 ops/s
Iteration   6: 3520326.382 ops/s
Iteration   7: 3534448.735 ops/s
Iteration   8: 3520987.480 ops/s
Iteration   9: 3526111.425 ops/s
Iteration  10: 3522230.035 ops/s
Iteration  11: 3523641.683 ops/s
Iteration  12: 3524291.559 ops/s
Iteration  13: 3517186.401 ops/s
Iteration  14: 3529151.334 ops/s
Iteration  15: 3530682.973 ops/s
Iteration  16: 3540738.218 ops/s
Iteration  17: 3515550.765 ops/s
Iteration  18: 3525363.297 ops/s
Iteration  19: 3523856.591 ops/s
Iteration  20: 3476112.669 ops/s
Iteration  21: 3533091.542 ops/s
Iteration  22: 3523739.571 ops/s
Iteration  23: 3526174.937 ops/s
Iteration  24: 3530989.895 ops/s
Iteration  25: 3485780.812 ops/s
Iteration  26: 3535893.883 ops/s
Iteration  27: 3524454.621 ops/s
Iteration  28: 3534149.542 ops/s
Iteration  29: 3521942.264 ops/s
Iteration  30: 3533685.838 ops/s


Result "org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_sizeDistinct":
  3523962.614 ±(99.9%) 8786.012 ops/s [Average]
  (min, avg, max) = (3476112.669, 3523962.614, 3540738.218), stdev = 13150.491
  CI (99.9%): [3515176.602, 3532748.627] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score      Error  Units
HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_sizeDistinct  thrpt   30  3523962.614 ± 8786.012  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_testEquals$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_testEquals

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 238575.497 ops/s
# Warmup Iteration   2: 564521.543 ops/s
# Warmup Iteration   3: 582728.303 ops/s
# Warmup Iteration   4: 483312.024 ops/s
# Warmup Iteration   5: 579151.857 ops/s
# Warmup Iteration   6: 584095.486 ops/s
# Warmup Iteration   7: 581475.058 ops/s
# Warmup Iteration   8: 581634.896 ops/s
# Warmup Iteration   9: 578751.814 ops/s
# Warmup Iteration  10: 576591.061 ops/s
# Warmup Iteration  11: 583656.025 ops/s
# Warmup Iteration  12: 583130.522 ops/s
# Warmup Iteration  13: 584283.969 ops/s
# Warmup Iteration  14: 581742.871 ops/s
# Warmup Iteration  15: 581148.444 ops/s
# Warmup Iteration  16: 584258.308 ops/s
# Warmup Iteration  17: 577357.616 ops/s
# Warmup Iteration  18: 582636.278 ops/s
# Warmup Iteration  19: 580690.852 ops/s
# Warmup Iteration  20: 581385.271 ops/s
# Warmup Iteration  21: 583766.933 ops/s
# Warmup Iteration  22: 581989.750 ops/s
# Warmup Iteration  23: 579160.966 ops/s
# Warmup Iteration  24: 577429.996 ops/s
# Warmup Iteration  25: 579970.974 ops/s
# Warmup Iteration  26: 583910.537 ops/s
# Warmup Iteration  27: 581481.266 ops/s
# Warmup Iteration  28: 583346.139 ops/s
# Warmup Iteration  29: 578305.386 ops/s
# Warmup Iteration  30: 580267.949 ops/s
Iteration   1: 571964.509 ops/s
Iteration   2: 583699.536 ops/s
Iteration   3: 582376.676 ops/s
Iteration   4: 579285.412 ops/s
Iteration   5: 584695.434 ops/s
Iteration   6: 582228.839 ops/s
Iteration   7: 584384.881 ops/s
Iteration   8: 580308.550 ops/s
Iteration   9: 583061.807 ops/s
Iteration  10: 582538.171 ops/s
Iteration  11: 582537.161 ops/s
Iteration  12: 582483.556 ops/s
Iteration  13: 582150.371 ops/s
Iteration  14: 583616.678 ops/s
Iteration  15: 583217.892 ops/s
Iteration  16: 582347.632 ops/s
Iteration  17: 582483.469 ops/s
Iteration  18: 581874.227 ops/s
Iteration  19: 581270.662 ops/s
Iteration  20: 583733.311 ops/s
Iteration  21: 584099.353 ops/s
Iteration  22: 584859.604 ops/s
Iteration  23: 582819.714 ops/s
Iteration  24: 580375.655 ops/s
Iteration  25: 584168.368 ops/s
Iteration  26: 582757.528 ops/s
Iteration  27: 582286.371 ops/s
Iteration  28: 580876.943 ops/s
Iteration  29: 582752.297 ops/s
Iteration  30: 581863.094 ops/s


Result "org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_testEquals":
  582237.257 ±(99.9%) 1561.217 ops/s [Average]
  (min, avg, max) = (571964.509, 582237.257, 584859.604), stdev = 2336.756
  CI (99.9%): [580676.040, 583798.473] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_testEquals  thrpt   30  582237.257 ± 1561.217  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_testHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_testHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 226144.213 ops/s
# Warmup Iteration   2: 482567.174 ops/s
# Warmup Iteration   3: 505359.028 ops/s
# Warmup Iteration   4: 507639.479 ops/s
# Warmup Iteration   5: 426027.169 ops/s
# Warmup Iteration   6: 509284.178 ops/s
# Warmup Iteration   7: 508273.626 ops/s
# Warmup Iteration   8: 506196.286 ops/s
# Warmup Iteration   9: 506983.105 ops/s
# Warmup Iteration  10: 507360.833 ops/s
# Warmup Iteration  11: 507844.662 ops/s
# Warmup Iteration  12: 506780.185 ops/s
# Warmup Iteration  13: 508795.942 ops/s
# Warmup Iteration  14: 506599.925 ops/s
# Warmup Iteration  15: 508981.356 ops/s
# Warmup Iteration  16: 505467.794 ops/s
# Warmup Iteration  17: 505730.031 ops/s
# Warmup Iteration  18: 507802.281 ops/s
# Warmup Iteration  19: 507435.857 ops/s
# Warmup Iteration  20: 507437.654 ops/s
# Warmup Iteration  21: 509028.330 ops/s
# Warmup Iteration  22: 508461.794 ops/s
# Warmup Iteration  23: 507835.983 ops/s
# Warmup Iteration  24: 507995.785 ops/s
# Warmup Iteration  25: 507526.020 ops/s
# Warmup Iteration  26: 506569.142 ops/s
# Warmup Iteration  27: 508323.187 ops/s
# Warmup Iteration  28: 508724.983 ops/s
# Warmup Iteration  29: 507703.822 ops/s
# Warmup Iteration  30: 507065.998 ops/s
Iteration   1: 507065.147 ops/s
Iteration   2: 505549.263 ops/s
Iteration   3: 507373.924 ops/s
Iteration   4: 507862.955 ops/s
Iteration   5: 508984.014 ops/s
Iteration   6: 507961.017 ops/s
Iteration   7: 506795.388 ops/s
Iteration   8: 507727.254 ops/s
Iteration   9: 508616.787 ops/s
Iteration  10: 507375.991 ops/s
Iteration  11: 507024.216 ops/s
Iteration  12: 506601.083 ops/s
Iteration  13: 506091.046 ops/s
Iteration  14: 508598.833 ops/s
Iteration  15: 507425.082 ops/s
Iteration  16: 508909.083 ops/s
Iteration  17: 505859.576 ops/s
Iteration  18: 506848.235 ops/s
Iteration  19: 505460.929 ops/s
Iteration  20: 508724.531 ops/s
Iteration  21: 508360.122 ops/s
Iteration  22: 505106.279 ops/s
Iteration  23: 506948.141 ops/s
Iteration  24: 508544.546 ops/s
Iteration  25: 505988.021 ops/s
Iteration  26: 506402.036 ops/s
Iteration  27: 507575.095 ops/s
Iteration  28: 507338.694 ops/s
Iteration  29: 508877.512 ops/s
Iteration  30: 505078.285 ops/s


Result "org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_testHashCode":
  507235.770 ±(99.9%) 788.720 ops/s [Average]
  (min, avg, max) = (505078.285, 507235.770, 508984.014), stdev = 1180.520
  CI (99.9%): [506447.049, 508024.490] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score     Error  Units
HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_testHashCode  thrpt   30  507235.770 ± 788.720  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_testHashingStrategyConstructor$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_testHashingStrategyConstructor

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 123436.424 ops/s
# Warmup Iteration   2: 224724.018 ops/s
# Warmup Iteration   3: 262902.111 ops/s
# Warmup Iteration   4: 264198.394 ops/s
# Warmup Iteration   5: 264086.303 ops/s
# Warmup Iteration   6: 228537.808 ops/s
# Warmup Iteration   7: 255485.291 ops/s
# Warmup Iteration   8: 263687.249 ops/s
# Warmup Iteration   9: 264571.914 ops/s
# Warmup Iteration  10: 264071.204 ops/s
# Warmup Iteration  11: 264264.805 ops/s
# Warmup Iteration  12: 263964.868 ops/s
# Warmup Iteration  13: 264345.910 ops/s
# Warmup Iteration  14: 264396.924 ops/s
# Warmup Iteration  15: 264427.593 ops/s
# Warmup Iteration  16: 263834.086 ops/s
# Warmup Iteration  17: 264893.371 ops/s
# Warmup Iteration  18: 264320.958 ops/s
# Warmup Iteration  19: 264943.268 ops/s
# Warmup Iteration  20: 264971.170 ops/s
# Warmup Iteration  21: 264583.990 ops/s
# Warmup Iteration  22: 264459.613 ops/s
# Warmup Iteration  23: 264857.680 ops/s
# Warmup Iteration  24: 264715.565 ops/s
# Warmup Iteration  25: 264989.646 ops/s
# Warmup Iteration  26: 264487.171 ops/s
# Warmup Iteration  27: 264814.574 ops/s
# Warmup Iteration  28: 265091.862 ops/s
# Warmup Iteration  29: 264346.388 ops/s
# Warmup Iteration  30: 264688.634 ops/s
Iteration   1: 264436.346 ops/s
Iteration   2: 264308.115 ops/s
Iteration   3: 264216.227 ops/s
Iteration   4: 264818.765 ops/s
Iteration   5: 264953.376 ops/s
Iteration   6: 265071.129 ops/s
Iteration   7: 264076.895 ops/s
Iteration   8: 264790.345 ops/s
Iteration   9: 264078.084 ops/s
Iteration  10: 264925.956 ops/s
Iteration  11: 265348.791 ops/s
Iteration  12: 264524.570 ops/s
Iteration  13: 264794.652 ops/s
Iteration  14: 264789.603 ops/s
Iteration  15: 264348.353 ops/s
Iteration  16: 264551.380 ops/s
Iteration  17: 264576.660 ops/s
Iteration  18: 264833.547 ops/s
Iteration  19: 265085.158 ops/s
Iteration  20: 264885.538 ops/s
Iteration  21: 265159.082 ops/s
Iteration  22: 264035.855 ops/s
Iteration  23: 265359.882 ops/s
Iteration  24: 264403.748 ops/s
Iteration  25: 265030.392 ops/s
Iteration  26: 263274.630 ops/s
Iteration  27: 264440.125 ops/s
Iteration  28: 264838.166 ops/s
Iteration  29: 264683.404 ops/s
Iteration  30: 264309.556 ops/s


Result "org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_testHashingStrategyConstructor":
  264631.611 ±(99.9%) 297.566 ops/s [Average]
  (min, avg, max) = (263274.630, 264631.611, 265359.882), stdev = 445.383
  CI (99.9%): [264334.045, 264929.177] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    Mode  Cnt       Score     Error  Units
HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_testHashingStrategyConstructor  thrpt   30  264631.611 ± 297.566  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_testKeyHashingStrategy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_testKeyHashingStrategy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7921847.361 ops/s
# Warmup Iteration   2: 12745300.772 ops/s
# Warmup Iteration   3: 12185091.875 ops/s
# Warmup Iteration   4: 12991726.822 ops/s
# Warmup Iteration   5: 12996912.592 ops/s
# Warmup Iteration   6: 13005548.302 ops/s
# Warmup Iteration   7: 12977159.563 ops/s
# Warmup Iteration   8: 13080678.635 ops/s
# Warmup Iteration   9: 13023910.022 ops/s
# Warmup Iteration  10: 13075778.692 ops/s
# Warmup Iteration  11: 13017217.747 ops/s
# Warmup Iteration  12: 13042065.366 ops/s
# Warmup Iteration  13: 13056127.940 ops/s
# Warmup Iteration  14: 13076075.801 ops/s
# Warmup Iteration  15: 12971320.241 ops/s
# Warmup Iteration  16: 13074683.932 ops/s
# Warmup Iteration  17: 12986783.044 ops/s
# Warmup Iteration  18: 12862769.176 ops/s
# Warmup Iteration  19: 13134660.363 ops/s
# Warmup Iteration  20: 12992953.482 ops/s
# Warmup Iteration  21: 13061081.754 ops/s
# Warmup Iteration  22: 13077952.690 ops/s
# Warmup Iteration  23: 12941523.755 ops/s
# Warmup Iteration  24: 13019242.850 ops/s
# Warmup Iteration  25: 12940080.621 ops/s
# Warmup Iteration  26: 13019625.602 ops/s
# Warmup Iteration  27: 13038958.843 ops/s
# Warmup Iteration  28: 12999613.515 ops/s
# Warmup Iteration  29: 13008723.928 ops/s
# Warmup Iteration  30: 13058612.393 ops/s
Iteration   1: 13054290.850 ops/s
Iteration   2: 13069916.911 ops/s
Iteration   3: 12922755.906 ops/s
Iteration   4: 12994788.871 ops/s
Iteration   5: 13018817.015 ops/s
Iteration   6: 13153232.204 ops/s
Iteration   7: 13096361.896 ops/s
Iteration   8: 13095985.806 ops/s
Iteration   9: 13098672.898 ops/s
Iteration  10: 12876302.431 ops/s
Iteration  11: 13130390.777 ops/s
Iteration  12: 13024532.309 ops/s
Iteration  13: 13065204.877 ops/s
Iteration  14: 12957538.305 ops/s
Iteration  15: 12939751.432 ops/s
Iteration  16: 13034690.713 ops/s
Iteration  17: 12982970.926 ops/s
Iteration  18: 13068656.778 ops/s
Iteration  19: 12988412.959 ops/s
Iteration  20: 12917950.555 ops/s
Iteration  21: 12955149.033 ops/s
Iteration  22: 13091810.872 ops/s
Iteration  23: 13084926.241 ops/s
Iteration  24: 13135606.151 ops/s
Iteration  25: 13017560.136 ops/s
Iteration  26: 13016301.884 ops/s
Iteration  27: 13088771.591 ops/s
Iteration  28: 13165912.835 ops/s
Iteration  29: 13062949.699 ops/s
Iteration  30: 13060715.703 ops/s


Result "org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_testKeyHashingStrategy":
  13039030.952 ±(99.9%) 48928.433 ops/s [Average]
  (min, avg, max) = (12876302.431, 13039030.952, 13165912.835), stdev = 73233.781
  CI (99.9%): [12990102.519, 13087959.385] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt         Score       Error  Units
HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_testKeyHashingStrategy  thrpt   30  13039030.952 ± 48928.433  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_testNewMultimap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_testNewMultimap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1209942.285 ops/s
# Warmup Iteration   2: 3154361.356 ops/s
# Warmup Iteration   3: 3067762.093 ops/s
# Warmup Iteration   4: 2820879.118 ops/s
# Warmup Iteration   5: 3220423.497 ops/s
# Warmup Iteration   6: 3194107.658 ops/s
# Warmup Iteration   7: 3224207.094 ops/s
# Warmup Iteration   8: 3211709.216 ops/s
# Warmup Iteration   9: 3200473.734 ops/s
# Warmup Iteration  10: 3223822.350 ops/s
# Warmup Iteration  11: 3219625.194 ops/s
# Warmup Iteration  12: 3217314.950 ops/s
# Warmup Iteration  13: 3220142.536 ops/s
# Warmup Iteration  14: 3215192.299 ops/s
# Warmup Iteration  15: 3213300.379 ops/s
# Warmup Iteration  16: 3214484.825 ops/s
# Warmup Iteration  17: 3230278.553 ops/s
# Warmup Iteration  18: 3227447.947 ops/s
# Warmup Iteration  19: 3230355.328 ops/s
# Warmup Iteration  20: 3228148.663 ops/s
# Warmup Iteration  21: 3215704.268 ops/s
# Warmup Iteration  22: 3231994.678 ops/s
# Warmup Iteration  23: 3204101.081 ops/s
# Warmup Iteration  24: 3233599.951 ops/s
# Warmup Iteration  25: 3222799.251 ops/s
# Warmup Iteration  26: 3226512.268 ops/s
# Warmup Iteration  27: 3219848.452 ops/s
# Warmup Iteration  28: 3234819.370 ops/s
# Warmup Iteration  29: 3207342.960 ops/s
# Warmup Iteration  30: 3231439.629 ops/s
Iteration   1: 3208866.844 ops/s
Iteration   2: 3236044.230 ops/s
Iteration   3: 3231347.815 ops/s
Iteration   4: 3238547.461 ops/s
Iteration   5: 3241659.491 ops/s
Iteration   6: 3238180.475 ops/s
Iteration   7: 3233978.085 ops/s
Iteration   8: 3221246.437 ops/s
Iteration   9: 3226718.123 ops/s
Iteration  10: 3163494.178 ops/s
Iteration  11: 3227807.041 ops/s
Iteration  12: 3234856.810 ops/s
Iteration  13: 3230110.875 ops/s
Iteration  14: 3225215.823 ops/s
Iteration  15: 3236677.972 ops/s
Iteration  16: 3226570.607 ops/s
Iteration  17: 3231972.440 ops/s
Iteration  18: 3237321.041 ops/s
Iteration  19: 3215647.347 ops/s
Iteration  20: 3245003.967 ops/s
Iteration  21: 3228524.475 ops/s
Iteration  22: 3234063.539 ops/s
Iteration  23: 3223343.649 ops/s
Iteration  24: 3175823.333 ops/s
Iteration  25: 3174244.887 ops/s
Iteration  26: 3239634.626 ops/s
Iteration  27: 3228538.542 ops/s
Iteration  28: 3237230.399 ops/s
Iteration  29: 3159929.011 ops/s
Iteration  30: 3227602.601 ops/s


Result "org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_testNewMultimap":
  3222673.404 ±(99.9%) 15417.442 ops/s [Average]
  (min, avg, max) = (3159929.011, 3222673.404, 3245003.967), stdev = 23076.103
  CI (99.9%): [3207255.962, 3238090.846] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_testNewMultimap  thrpt   30  3222673.404 ± 15417.442  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_testNewMultimapWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_testNewMultimapWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 276626.596 ops/s
# Warmup Iteration   2: 627802.734 ops/s
# Warmup Iteration   3: 664486.588 ops/s
# Warmup Iteration   4: 645050.477 ops/s
# Warmup Iteration   5: 575912.357 ops/s
# Warmup Iteration   6: 665834.527 ops/s
# Warmup Iteration   7: 667974.765 ops/s
# Warmup Iteration   8: 669837.996 ops/s
# Warmup Iteration   9: 668958.405 ops/s
# Warmup Iteration  10: 669919.199 ops/s
# Warmup Iteration  11: 669685.442 ops/s
# Warmup Iteration  12: 667131.164 ops/s
# Warmup Iteration  13: 670905.935 ops/s
# Warmup Iteration  14: 667636.044 ops/s
# Warmup Iteration  15: 670590.016 ops/s
# Warmup Iteration  16: 669710.272 ops/s
# Warmup Iteration  17: 668954.122 ops/s
# Warmup Iteration  18: 671657.000 ops/s
# Warmup Iteration  19: 668563.188 ops/s
# Warmup Iteration  20: 670950.269 ops/s
# Warmup Iteration  21: 669748.045 ops/s
# Warmup Iteration  22: 669978.634 ops/s
# Warmup Iteration  23: 671107.757 ops/s
# Warmup Iteration  24: 669608.735 ops/s
# Warmup Iteration  25: 665692.692 ops/s
# Warmup Iteration  26: 670571.465 ops/s
# Warmup Iteration  27: 669814.395 ops/s
# Warmup Iteration  28: 670633.390 ops/s
# Warmup Iteration  29: 664312.099 ops/s
# Warmup Iteration  30: 670992.656 ops/s
Iteration   1: 669920.196 ops/s
Iteration   2: 668048.159 ops/s
Iteration   3: 670268.843 ops/s
Iteration   4: 670549.071 ops/s
Iteration   5: 670354.704 ops/s
Iteration   6: 670407.986 ops/s
Iteration   7: 668013.584 ops/s
Iteration   8: 669475.895 ops/s
Iteration   9: 668334.905 ops/s
Iteration  10: 670270.392 ops/s
Iteration  11: 670872.298 ops/s
Iteration  12: 670857.309 ops/s
Iteration  13: 668149.322 ops/s
Iteration  14: 668197.697 ops/s
Iteration  15: 669623.406 ops/s
Iteration  16: 668130.832 ops/s
Iteration  17: 670401.534 ops/s
Iteration  18: 667169.504 ops/s
Iteration  19: 665732.342 ops/s
Iteration  20: 671331.362 ops/s
Iteration  21: 670609.282 ops/s
Iteration  22: 669171.827 ops/s
Iteration  23: 669328.500 ops/s
Iteration  24: 672522.739 ops/s
Iteration  25: 670184.124 ops/s
Iteration  26: 668627.783 ops/s
Iteration  27: 670006.850 ops/s
Iteration  28: 667536.999 ops/s
Iteration  29: 672311.609 ops/s
Iteration  30: 670609.909 ops/s


Result "org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_testNewMultimapWith":
  669567.299 ±(99.9%) 1019.042 ops/s [Average]
  (min, avg, max) = (665732.342, 669567.299, 672522.739), stdev = 1525.254
  CI (99.9%): [668548.257, 670586.340] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score      Error  Units
HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_testNewMultimapWith  thrpt   30  669567.299 ± 1019.042  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_testNewMultimapWithKeyValue$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_testNewMultimapWithKeyValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 391492.483 ops/s
# Warmup Iteration   2: 1045842.394 ops/s
# Warmup Iteration   3: 1085223.855 ops/s
# Warmup Iteration   4: 903782.614 ops/s
# Warmup Iteration   5: 1087742.301 ops/s
# Warmup Iteration   6: 1085666.512 ops/s
# Warmup Iteration   7: 1088162.523 ops/s
# Warmup Iteration   8: 1088280.677 ops/s
# Warmup Iteration   9: 1086073.503 ops/s
# Warmup Iteration  10: 1088515.251 ops/s
# Warmup Iteration  11: 1083938.332 ops/s
# Warmup Iteration  12: 1088803.214 ops/s
# Warmup Iteration  13: 1083513.341 ops/s
# Warmup Iteration  14: 1086768.688 ops/s
# Warmup Iteration  15: 1087886.845 ops/s
# Warmup Iteration  16: 1086216.708 ops/s
# Warmup Iteration  17: 1086977.278 ops/s
# Warmup Iteration  18: 1083777.691 ops/s
# Warmup Iteration  19: 1083682.434 ops/s
# Warmup Iteration  20: 1073096.762 ops/s
# Warmup Iteration  21: 1083179.230 ops/s
# Warmup Iteration  22: 1071210.622 ops/s
# Warmup Iteration  23: 1083283.007 ops/s
# Warmup Iteration  24: 1083194.542 ops/s
# Warmup Iteration  25: 1081583.700 ops/s
# Warmup Iteration  26: 1081464.758 ops/s
# Warmup Iteration  27: 1084513.732 ops/s
# Warmup Iteration  28: 1086513.985 ops/s
# Warmup Iteration  29: 1082686.232 ops/s
# Warmup Iteration  30: 1083563.566 ops/s
Iteration   1: 1085283.673 ops/s
Iteration   2: 1079276.377 ops/s
Iteration   3: 1077416.751 ops/s
Iteration   4: 1080851.104 ops/s
Iteration   5: 1081769.272 ops/s
Iteration   6: 1070548.860 ops/s
Iteration   7: 1080005.624 ops/s
Iteration   8: 1083025.657 ops/s
Iteration   9: 1084286.828 ops/s
Iteration  10: 1083023.408 ops/s
Iteration  11: 1077674.248 ops/s
Iteration  12: 1080284.941 ops/s
Iteration  13: 1082348.258 ops/s
Iteration  14: 1082743.128 ops/s
Iteration  15: 1081420.913 ops/s
Iteration  16: 1084419.204 ops/s
Iteration  17: 1082986.642 ops/s
Iteration  18: 1084949.964 ops/s
Iteration  19: 1083556.653 ops/s
Iteration  20: 1087437.052 ops/s
Iteration  21: 1084180.863 ops/s
Iteration  22: 1083538.820 ops/s
Iteration  23: 1081378.076 ops/s
Iteration  24: 1085556.660 ops/s
Iteration  25: 1079417.590 ops/s
Iteration  26: 1084125.275 ops/s
Iteration  27: 1080453.892 ops/s
Iteration  28: 1081929.023 ops/s
Iteration  29: 1087357.957 ops/s
Iteration  30: 1084302.864 ops/s


Result "org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_testNewMultimapWithKeyValue":
  1082184.986 ±(99.9%) 2219.061 ops/s [Average]
  (min, avg, max) = (1070548.860, 1082184.986, 1087437.052), stdev = 3321.387
  CI (99.9%): [1079965.925, 1084404.047] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 Mode  Cnt        Score      Error  Units
HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_testNewMultimapWithKeyValue  thrpt   30  1082184.986 ± 2219.061  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_testNewMultimapWithWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_testNewMultimapWithWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 272018.971 ops/s
# Warmup Iteration   2: 748115.831 ops/s
# Warmup Iteration   3: 786092.698 ops/s
# Warmup Iteration   4: 657582.489 ops/s
# Warmup Iteration   5: 789859.124 ops/s
# Warmup Iteration   6: 789527.736 ops/s
# Warmup Iteration   7: 788629.719 ops/s
# Warmup Iteration   8: 785501.887 ops/s
# Warmup Iteration   9: 789105.095 ops/s
# Warmup Iteration  10: 782937.104 ops/s
# Warmup Iteration  11: 779627.199 ops/s
# Warmup Iteration  12: 781128.269 ops/s
# Warmup Iteration  13: 787420.037 ops/s
# Warmup Iteration  14: 781970.039 ops/s
# Warmup Iteration  15: 784424.956 ops/s
# Warmup Iteration  16: 786820.867 ops/s
# Warmup Iteration  17: 789542.083 ops/s
# Warmup Iteration  18: 788623.349 ops/s
# Warmup Iteration  19: 786851.905 ops/s
# Warmup Iteration  20: 788086.508 ops/s
# Warmup Iteration  21: 789824.879 ops/s
# Warmup Iteration  22: 790220.179 ops/s
# Warmup Iteration  23: 790354.108 ops/s
# Warmup Iteration  24: 787193.455 ops/s
# Warmup Iteration  25: 787948.892 ops/s
# Warmup Iteration  26: 789131.375 ops/s
# Warmup Iteration  27: 788341.821 ops/s
# Warmup Iteration  28: 787867.993 ops/s
# Warmup Iteration  29: 790556.403 ops/s
# Warmup Iteration  30: 786829.560 ops/s
Iteration   1: 786007.518 ops/s
Iteration   2: 784374.680 ops/s
Iteration   3: 789803.293 ops/s
Iteration   4: 787728.611 ops/s
Iteration   5: 788671.764 ops/s
Iteration   6: 787325.407 ops/s
Iteration   7: 785872.695 ops/s
Iteration   8: 788842.404 ops/s
Iteration   9: 788097.154 ops/s
Iteration  10: 790532.062 ops/s
Iteration  11: 787041.910 ops/s
Iteration  12: 787996.147 ops/s
Iteration  13: 788492.327 ops/s
Iteration  14: 789200.704 ops/s
Iteration  15: 790433.142 ops/s
Iteration  16: 788115.089 ops/s
Iteration  17: 786132.962 ops/s
Iteration  18: 775494.880 ops/s
Iteration  19: 788956.747 ops/s
Iteration  20: 789328.692 ops/s
Iteration  21: 788751.055 ops/s
Iteration  22: 786582.770 ops/s
Iteration  23: 786961.370 ops/s
Iteration  24: 790311.379 ops/s
Iteration  25: 788990.507 ops/s
Iteration  26: 787542.262 ops/s
Iteration  27: 789514.395 ops/s
Iteration  28: 787756.043 ops/s
Iteration  29: 788755.785 ops/s
Iteration  30: 789204.986 ops/s


Result "org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_testNewMultimapWithWith":
  787760.625 ±(99.9%) 1827.271 ops/s [Average]
  (min, avg, max) = (775494.880, 787760.625, 790532.062), stdev = 2734.973
  CI (99.9%): [785933.354, 789587.896] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt       Score      Error  Units
HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_testNewMultimapWithWith  thrpt   30  787760.625 ± 1827.271  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_testNewMultimapWithWithWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_testNewMultimapWithWithWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 203726.490 ops/s
# Warmup Iteration   2: 560603.256 ops/s
# Warmup Iteration   3: 609891.301 ops/s
# Warmup Iteration   4: 596796.476 ops/s
# Warmup Iteration   5: 521674.668 ops/s
# Warmup Iteration   6: 611682.870 ops/s
# Warmup Iteration   7: 609966.239 ops/s
# Warmup Iteration   8: 612035.366 ops/s
# Warmup Iteration   9: 610530.596 ops/s
# Warmup Iteration  10: 609856.693 ops/s
# Warmup Iteration  11: 610057.150 ops/s
# Warmup Iteration  12: 610828.296 ops/s
# Warmup Iteration  13: 611105.865 ops/s
# Warmup Iteration  14: 611364.927 ops/s
# Warmup Iteration  15: 610102.860 ops/s
# Warmup Iteration  16: 610768.147 ops/s
# Warmup Iteration  17: 609477.835 ops/s
# Warmup Iteration  18: 611832.634 ops/s
# Warmup Iteration  19: 610473.412 ops/s
# Warmup Iteration  20: 609817.434 ops/s
# Warmup Iteration  21: 611525.046 ops/s
# Warmup Iteration  22: 610070.954 ops/s
# Warmup Iteration  23: 611117.880 ops/s
# Warmup Iteration  24: 610127.853 ops/s
# Warmup Iteration  25: 609235.170 ops/s
# Warmup Iteration  26: 609543.860 ops/s
# Warmup Iteration  27: 609823.542 ops/s
# Warmup Iteration  28: 611109.296 ops/s
# Warmup Iteration  29: 611293.400 ops/s
# Warmup Iteration  30: 609167.362 ops/s
Iteration   1: 610405.182 ops/s
Iteration   2: 609737.167 ops/s
Iteration   3: 610006.080 ops/s
Iteration   4: 610489.018 ops/s
Iteration   5: 611297.224 ops/s
Iteration   6: 609803.532 ops/s
Iteration   7: 609364.201 ops/s
Iteration   8: 611406.334 ops/s
Iteration   9: 611545.074 ops/s
Iteration  10: 610726.141 ops/s
Iteration  11: 608710.403 ops/s
Iteration  12: 610374.418 ops/s
Iteration  13: 609017.584 ops/s
Iteration  14: 608476.803 ops/s
Iteration  15: 610460.528 ops/s
Iteration  16: 611839.850 ops/s
Iteration  17: 611283.233 ops/s
Iteration  18: 609729.343 ops/s
Iteration  19: 610002.358 ops/s
Iteration  20: 611235.682 ops/s
Iteration  21: 610064.281 ops/s
Iteration  22: 610141.769 ops/s
Iteration  23: 609914.702 ops/s
Iteration  24: 610679.699 ops/s
Iteration  25: 608404.521 ops/s
Iteration  26: 609108.939 ops/s
Iteration  27: 609099.544 ops/s
Iteration  28: 609336.350 ops/s
Iteration  29: 611472.389 ops/s
Iteration  30: 610988.726 ops/s


Result "org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_testNewMultimapWithWithWith":
  610170.702 ±(99.9%) 642.013 ops/s [Average]
  (min, avg, max) = (608404.521, 610170.702, 611839.850), stdev = 960.935
  CI (99.9%): [609528.689, 610812.716] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 Mode  Cnt       Score     Error  Units
HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_testNewMultimapWithWithWith  thrpt   30  610170.702 ± 642.013  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_testNewMultimapWithWithWithWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_testNewMultimapWithWithWithWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 203075.405 ops/s
# Warmup Iteration   2: 493756.649 ops/s
# Warmup Iteration   3: 529936.605 ops/s
# Warmup Iteration   4: 520991.962 ops/s
# Warmup Iteration   5: 453780.298 ops/s
# Warmup Iteration   6: 532333.725 ops/s
# Warmup Iteration   7: 531659.692 ops/s
# Warmup Iteration   8: 533415.947 ops/s
# Warmup Iteration   9: 531810.372 ops/s
# Warmup Iteration  10: 526307.755 ops/s
# Warmup Iteration  11: 532911.807 ops/s
# Warmup Iteration  12: 530752.842 ops/s
# Warmup Iteration  13: 533618.948 ops/s
# Warmup Iteration  14: 532489.081 ops/s
# Warmup Iteration  15: 530253.946 ops/s
# Warmup Iteration  16: 530934.270 ops/s
# Warmup Iteration  17: 532394.311 ops/s
# Warmup Iteration  18: 528326.975 ops/s
# Warmup Iteration  19: 526463.327 ops/s
# Warmup Iteration  20: 527790.929 ops/s
# Warmup Iteration  21: 531421.717 ops/s
# Warmup Iteration  22: 532360.986 ops/s
# Warmup Iteration  23: 532334.752 ops/s
# Warmup Iteration  24: 532860.866 ops/s
# Warmup Iteration  25: 533126.119 ops/s
# Warmup Iteration  26: 531282.849 ops/s
# Warmup Iteration  27: 528892.337 ops/s
# Warmup Iteration  28: 531888.222 ops/s
# Warmup Iteration  29: 532094.023 ops/s
# Warmup Iteration  30: 533437.181 ops/s
Iteration   1: 532974.505 ops/s
Iteration   2: 529901.026 ops/s
Iteration   3: 532014.921 ops/s
Iteration   4: 530592.335 ops/s
Iteration   5: 532213.335 ops/s
Iteration   6: 530028.992 ops/s
Iteration   7: 532759.274 ops/s
Iteration   8: 533153.067 ops/s
Iteration   9: 528176.495 ops/s
Iteration  10: 532089.601 ops/s
Iteration  11: 532575.866 ops/s
Iteration  12: 531586.169 ops/s
Iteration  13: 532986.927 ops/s
Iteration  14: 530410.622 ops/s
Iteration  15: 531035.691 ops/s
Iteration  16: 531064.743 ops/s
Iteration  17: 532752.601 ops/s
Iteration  18: 533516.196 ops/s
Iteration  19: 531060.451 ops/s
Iteration  20: 530665.857 ops/s
Iteration  21: 531354.546 ops/s
Iteration  22: 533315.339 ops/s
Iteration  23: 533172.561 ops/s
Iteration  24: 531990.001 ops/s
Iteration  25: 533631.363 ops/s
Iteration  26: 533442.935 ops/s
Iteration  27: 532842.341 ops/s
Iteration  28: 532914.039 ops/s
Iteration  29: 532717.626 ops/s
Iteration  30: 532388.861 ops/s


Result "org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_testNewMultimapWithWithWithWith":
  531977.610 ±(99.9%) 873.738 ops/s [Average]
  (min, avg, max) = (528176.495, 531977.610, 533631.363), stdev = 1307.770
  CI (99.9%): [531103.871, 532851.348] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                     Mode  Cnt       Score     Error  Units
HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_testNewMultimapWithWithWithWith  thrpt   30  531977.610 ± 873.738  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 915418.430 ops/s
# Warmup Iteration   2: 2227032.313 ops/s
# Warmup Iteration   3: 2228358.907 ops/s
# Warmup Iteration   4: 1846360.067 ops/s
# Warmup Iteration   5: 2234243.013 ops/s
# Warmup Iteration   6: 2234463.206 ops/s
# Warmup Iteration   7: 2234205.585 ops/s
# Warmup Iteration   8: 2217287.270 ops/s
# Warmup Iteration   9: 2222826.130 ops/s
# Warmup Iteration  10: 2236627.961 ops/s
# Warmup Iteration  11: 2230294.341 ops/s
# Warmup Iteration  12: 2231729.532 ops/s
# Warmup Iteration  13: 2228638.581 ops/s
# Warmup Iteration  14: 2228618.465 ops/s
# Warmup Iteration  15: 2217792.731 ops/s
# Warmup Iteration  16: 2238510.012 ops/s
# Warmup Iteration  17: 2228201.460 ops/s
# Warmup Iteration  18: 2223556.899 ops/s
# Warmup Iteration  19: 2225014.689 ops/s
# Warmup Iteration  20: 2225193.731 ops/s
# Warmup Iteration  21: 2237406.264 ops/s
# Warmup Iteration  22: 2233409.001 ops/s
# Warmup Iteration  23: 2231611.254 ops/s
# Warmup Iteration  24: 2232776.812 ops/s
# Warmup Iteration  25: 2212351.297 ops/s
# Warmup Iteration  26: 2215174.699 ops/s
# Warmup Iteration  27: 2233316.335 ops/s
# Warmup Iteration  28: 2237837.492 ops/s
# Warmup Iteration  29: 2229183.227 ops/s
# Warmup Iteration  30: 2240418.787 ops/s
Iteration   1: 2238941.887 ops/s
Iteration   2: 2236452.907 ops/s
Iteration   3: 2228445.680 ops/s
Iteration   4: 2229794.159 ops/s
Iteration   5: 2239463.676 ops/s
Iteration   6: 2233301.449 ops/s
Iteration   7: 2232963.318 ops/s
Iteration   8: 2229172.178 ops/s
Iteration   9: 2231477.297 ops/s
Iteration  10: 2238053.737 ops/s
Iteration  11: 2235010.399 ops/s
Iteration  12: 2229614.785 ops/s
Iteration  13: 2239490.414 ops/s
Iteration  14: 2231590.058 ops/s
Iteration  15: 2228853.269 ops/s
Iteration  16: 2223369.753 ops/s
Iteration  17: 2225548.821 ops/s
Iteration  18: 2237569.272 ops/s
Iteration  19: 2240244.474 ops/s
Iteration  20: 2238916.153 ops/s
Iteration  21: 2239208.548 ops/s
Iteration  22: 2232296.578 ops/s
Iteration  23: 2237045.323 ops/s
Iteration  24: 2238542.276 ops/s
Iteration  25: 2233888.823 ops/s
Iteration  26: 2233513.103 ops/s
Iteration  27: 2227820.478 ops/s
Iteration  28: 2222939.535 ops/s
Iteration  29: 2230827.539 ops/s
Iteration  30: 2224786.587 ops/s


Result "org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_testToString":
  2232971.416 ±(99.9%) 3472.580 ops/s [Average]
  (min, avg, max) = (2222939.535, 2232971.416, 2240244.474), stdev = 5197.595
  CI (99.9%): [2229498.836, 2236443.996] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score      Error  Units
HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_testToString  thrpt   30  2232971.416 ± 3472.580  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_toImmutable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_toImmutable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 217421.228 ops/s
# Warmup Iteration   2: 420870.607 ops/s
# Warmup Iteration   3: 491740.991 ops/s
# Warmup Iteration   4: 495014.134 ops/s
# Warmup Iteration   5: 487518.092 ops/s
# Warmup Iteration   6: 414796.534 ops/s
# Warmup Iteration   7: 493469.673 ops/s
# Warmup Iteration   8: 494232.328 ops/s
# Warmup Iteration   9: 493916.716 ops/s
# Warmup Iteration  10: 494275.979 ops/s
# Warmup Iteration  11: 492677.332 ops/s
# Warmup Iteration  12: 494569.990 ops/s
# Warmup Iteration  13: 496495.056 ops/s
# Warmup Iteration  14: 494085.110 ops/s
# Warmup Iteration  15: 494456.191 ops/s
# Warmup Iteration  16: 493530.914 ops/s
# Warmup Iteration  17: 492929.971 ops/s
# Warmup Iteration  18: 494909.657 ops/s
# Warmup Iteration  19: 494957.953 ops/s
# Warmup Iteration  20: 493656.510 ops/s
# Warmup Iteration  21: 494085.833 ops/s
# Warmup Iteration  22: 493586.862 ops/s
# Warmup Iteration  23: 494788.054 ops/s
# Warmup Iteration  24: 493766.595 ops/s
# Warmup Iteration  25: 494849.094 ops/s
# Warmup Iteration  26: 493686.384 ops/s
# Warmup Iteration  27: 493946.487 ops/s
# Warmup Iteration  28: 494942.730 ops/s
# Warmup Iteration  29: 492606.536 ops/s
# Warmup Iteration  30: 492591.662 ops/s
Iteration   1: 494512.246 ops/s
Iteration   2: 494435.299 ops/s
Iteration   3: 494382.809 ops/s
Iteration   4: 494049.218 ops/s
Iteration   5: 491365.140 ops/s
Iteration   6: 494445.320 ops/s
Iteration   7: 491919.326 ops/s
Iteration   8: 494450.867 ops/s
Iteration   9: 494293.734 ops/s
Iteration  10: 492051.001 ops/s
Iteration  11: 493711.999 ops/s
Iteration  12: 492291.292 ops/s
Iteration  13: 494861.589 ops/s
Iteration  14: 494078.477 ops/s
Iteration  15: 494859.038 ops/s
Iteration  16: 494413.867 ops/s
Iteration  17: 494059.220 ops/s
Iteration  18: 495357.447 ops/s
Iteration  19: 495056.747 ops/s
Iteration  20: 495125.982 ops/s
Iteration  21: 494855.936 ops/s
Iteration  22: 494288.858 ops/s
Iteration  23: 487942.660 ops/s
Iteration  24: 494105.807 ops/s
Iteration  25: 491011.684 ops/s
Iteration  26: 493062.500 ops/s
Iteration  27: 494085.425 ops/s
Iteration  28: 488577.692 ops/s
Iteration  29: 498812.951 ops/s
Iteration  30: 492882.338 ops/s


Result "org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_toImmutable":
  493644.882 ±(99.9%) 1372.686 ops/s [Average]
  (min, avg, max) = (487942.660, 493644.882, 498812.951), stdev = 2054.572
  CI (99.9%): [492272.196, 495017.569] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_toImmutable  thrpt   30  493644.882 ± 1372.686  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_toMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_toMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 211032.761 ops/s
# Warmup Iteration   2: 485246.726 ops/s
# Warmup Iteration   3: 514558.285 ops/s
# Warmup Iteration   4: 497882.396 ops/s
# Warmup Iteration   5: 446767.888 ops/s
# Warmup Iteration   6: 517546.003 ops/s
# Warmup Iteration   7: 517126.720 ops/s
# Warmup Iteration   8: 517104.906 ops/s
# Warmup Iteration   9: 517908.887 ops/s
# Warmup Iteration  10: 517891.470 ops/s
# Warmup Iteration  11: 517446.676 ops/s
# Warmup Iteration  12: 518044.521 ops/s
# Warmup Iteration  13: 515040.200 ops/s
# Warmup Iteration  14: 516772.352 ops/s
# Warmup Iteration  15: 517141.060 ops/s
# Warmup Iteration  16: 517902.536 ops/s
# Warmup Iteration  17: 515258.366 ops/s
# Warmup Iteration  18: 518021.826 ops/s
# Warmup Iteration  19: 517580.721 ops/s
# Warmup Iteration  20: 518292.876 ops/s
# Warmup Iteration  21: 518506.824 ops/s
# Warmup Iteration  22: 517488.088 ops/s
# Warmup Iteration  23: 519019.110 ops/s
# Warmup Iteration  24: 516369.400 ops/s
# Warmup Iteration  25: 517437.764 ops/s
# Warmup Iteration  26: 517896.717 ops/s
# Warmup Iteration  27: 518475.319 ops/s
# Warmup Iteration  28: 517076.924 ops/s
# Warmup Iteration  29: 514553.758 ops/s
# Warmup Iteration  30: 518774.461 ops/s
Iteration   1: 518267.685 ops/s
Iteration   2: 516677.158 ops/s
Iteration   3: 518840.763 ops/s
Iteration   4: 518916.729 ops/s
Iteration   5: 518523.754 ops/s
Iteration   6: 516038.202 ops/s
Iteration   7: 516772.803 ops/s
Iteration   8: 518914.119 ops/s
Iteration   9: 518577.313 ops/s
Iteration  10: 516921.514 ops/s
Iteration  11: 515408.991 ops/s
Iteration  12: 508924.780 ops/s
Iteration  13: 518240.231 ops/s
Iteration  14: 519928.444 ops/s
Iteration  15: 518858.600 ops/s
Iteration  16: 516914.161 ops/s
Iteration  17: 516978.452 ops/s
Iteration  18: 519813.117 ops/s
Iteration  19: 519239.261 ops/s
Iteration  20: 516204.358 ops/s
Iteration  21: 519332.086 ops/s
Iteration  22: 517864.058 ops/s
Iteration  23: 519626.252 ops/s
Iteration  24: 516437.451 ops/s
Iteration  25: 519161.334 ops/s
Iteration  26: 516649.953 ops/s
Iteration  27: 515400.644 ops/s
Iteration  28: 517902.013 ops/s
Iteration  29: 518966.561 ops/s
Iteration  30: 517821.719 ops/s


Result "org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_toMap":
  517604.084 ±(99.9%) 1405.104 ops/s [Average]
  (min, avg, max) = (508924.780, 517604.084, 519928.444), stdev = 2103.093
  CI (99.9%): [516198.980, 519009.187] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_toMap  thrpt   30  517604.084 ± 1405.104  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_toMapWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_toMapWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 331793.018 ops/s
# Warmup Iteration   2: 751619.197 ops/s
# Warmup Iteration   3: 798200.744 ops/s
# Warmup Iteration   4: 798881.925 ops/s
# Warmup Iteration   5: 666024.280 ops/s
# Warmup Iteration   6: 803183.403 ops/s
# Warmup Iteration   7: 796076.979 ops/s
# Warmup Iteration   8: 803404.185 ops/s
# Warmup Iteration   9: 802124.481 ops/s
# Warmup Iteration  10: 802852.358 ops/s
# Warmup Iteration  11: 797671.375 ops/s
# Warmup Iteration  12: 801460.508 ops/s
# Warmup Iteration  13: 789726.086 ops/s
# Warmup Iteration  14: 803145.192 ops/s
# Warmup Iteration  15: 802351.399 ops/s
# Warmup Iteration  16: 801221.890 ops/s
# Warmup Iteration  17: 793755.431 ops/s
# Warmup Iteration  18: 797208.701 ops/s
# Warmup Iteration  19: 801039.938 ops/s
# Warmup Iteration  20: 797198.542 ops/s
# Warmup Iteration  21: 798843.651 ops/s
# Warmup Iteration  22: 801581.315 ops/s
# Warmup Iteration  23: 796304.359 ops/s
# Warmup Iteration  24: 800295.991 ops/s
# Warmup Iteration  25: 791534.425 ops/s
# Warmup Iteration  26: 800421.824 ops/s
# Warmup Iteration  27: 799232.713 ops/s
# Warmup Iteration  28: 793161.332 ops/s
# Warmup Iteration  29: 798573.249 ops/s
# Warmup Iteration  30: 794689.000 ops/s
Iteration   1: 800220.717 ops/s
Iteration   2: 801295.715 ops/s
Iteration   3: 799204.391 ops/s
Iteration   4: 802449.143 ops/s
Iteration   5: 802024.184 ops/s
Iteration   6: 800832.731 ops/s
Iteration   7: 799430.789 ops/s
Iteration   8: 800753.513 ops/s
Iteration   9: 800361.925 ops/s
Iteration  10: 790213.680 ops/s
Iteration  11: 800179.518 ops/s
Iteration  12: 801299.234 ops/s
Iteration  13: 802960.681 ops/s
Iteration  14: 798066.607 ops/s
Iteration  15: 797682.214 ops/s
Iteration  16: 799433.075 ops/s
Iteration  17: 800972.439 ops/s
Iteration  18: 799765.941 ops/s
Iteration  19: 799494.036 ops/s
Iteration  20: 799521.477 ops/s
Iteration  21: 801234.441 ops/s
Iteration  22: 802511.325 ops/s
Iteration  23: 800347.237 ops/s
Iteration  24: 799405.353 ops/s
Iteration  25: 800014.992 ops/s
Iteration  26: 801492.827 ops/s
Iteration  27: 799257.440 ops/s
Iteration  28: 800030.256 ops/s
Iteration  29: 798108.677 ops/s
Iteration  30: 802618.507 ops/s


Result "org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_toMapWithTarget":
  800039.436 ±(99.9%) 1533.703 ops/s [Average]
  (min, avg, max) = (790213.680, 800039.436, 802960.681), stdev = 2295.574
  CI (99.9%): [798505.733, 801573.138] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score      Error  Units
HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_toMapWithTarget  thrpt   30  800039.436 ± 1533.703  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_toMutable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_toMutable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 232370.020 ops/s
# Warmup Iteration   2: 553006.987 ops/s
# Warmup Iteration   3: 574297.316 ops/s
# Warmup Iteration   4: 474171.613 ops/s
# Warmup Iteration   5: 573883.992 ops/s
# Warmup Iteration   6: 572208.731 ops/s
# Warmup Iteration   7: 572523.537 ops/s
# Warmup Iteration   8: 574406.445 ops/s
# Warmup Iteration   9: 573162.796 ops/s
# Warmup Iteration  10: 572936.083 ops/s
# Warmup Iteration  11: 573389.363 ops/s
# Warmup Iteration  12: 573932.694 ops/s
# Warmup Iteration  13: 572955.285 ops/s
# Warmup Iteration  14: 574237.057 ops/s
# Warmup Iteration  15: 573291.205 ops/s
# Warmup Iteration  16: 576915.901 ops/s
# Warmup Iteration  17: 572068.993 ops/s
# Warmup Iteration  18: 573555.009 ops/s
# Warmup Iteration  19: 573960.034 ops/s
# Warmup Iteration  20: 574120.987 ops/s
# Warmup Iteration  21: 576264.417 ops/s
# Warmup Iteration  22: 573515.160 ops/s
# Warmup Iteration  23: 573960.386 ops/s
# Warmup Iteration  24: 571792.987 ops/s
# Warmup Iteration  25: 574517.423 ops/s
# Warmup Iteration  26: 573327.940 ops/s
# Warmup Iteration  27: 573547.035 ops/s
# Warmup Iteration  28: 573019.972 ops/s
# Warmup Iteration  29: 574016.330 ops/s
# Warmup Iteration  30: 571248.728 ops/s
Iteration   1: 576265.544 ops/s
Iteration   2: 570495.946 ops/s
Iteration   3: 571635.656 ops/s
Iteration   4: 573003.385 ops/s
Iteration   5: 571896.071 ops/s
Iteration   6: 570351.718 ops/s
Iteration   7: 574900.644 ops/s
Iteration   8: 573666.451 ops/s
Iteration   9: 570832.098 ops/s
Iteration  10: 573087.300 ops/s
Iteration  11: 572358.229 ops/s
Iteration  12: 573799.415 ops/s
Iteration  13: 572887.691 ops/s
Iteration  14: 573999.666 ops/s
Iteration  15: 573411.179 ops/s
Iteration  16: 573071.836 ops/s
Iteration  17: 572354.489 ops/s
Iteration  18: 574946.023 ops/s
Iteration  19: 572291.170 ops/s
Iteration  20: 573042.788 ops/s
Iteration  21: 573655.298 ops/s
Iteration  22: 574968.454 ops/s
Iteration  23: 574763.472 ops/s
Iteration  24: 574998.858 ops/s
Iteration  25: 571501.880 ops/s
Iteration  26: 571060.561 ops/s
Iteration  27: 572547.002 ops/s
Iteration  28: 572928.993 ops/s
Iteration  29: 571980.914 ops/s
Iteration  30: 574274.756 ops/s


Result "org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_toMutable":
  573032.583 ±(99.9%) 984.691 ops/s [Average]
  (min, avg, max) = (570351.718, 573032.583, 576265.544), stdev = 1473.839
  CI (99.9%): [572047.892, 574017.274] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score     Error  Units
HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_toMutable  thrpt   30  573032.583 ± 984.691  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_valuesView$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_valuesView

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 554406.133 ops/s
# Warmup Iteration   2: 1246396.280 ops/s
# Warmup Iteration   3: 1358301.129 ops/s
# Warmup Iteration   4: 1363437.735 ops/s
# Warmup Iteration   5: 1124362.870 ops/s
# Warmup Iteration   6: 1364758.159 ops/s
# Warmup Iteration   7: 1365876.722 ops/s
# Warmup Iteration   8: 1364639.487 ops/s
# Warmup Iteration   9: 1360556.519 ops/s
# Warmup Iteration  10: 1364085.478 ops/s
# Warmup Iteration  11: 1366060.523 ops/s
# Warmup Iteration  12: 1364015.334 ops/s
# Warmup Iteration  13: 1365041.067 ops/s
# Warmup Iteration  14: 1363897.138 ops/s
# Warmup Iteration  15: 1359892.786 ops/s
# Warmup Iteration  16: 1365276.648 ops/s
# Warmup Iteration  17: 1362303.055 ops/s
# Warmup Iteration  18: 1364105.449 ops/s
# Warmup Iteration  19: 1361555.695 ops/s
# Warmup Iteration  20: 1364049.583 ops/s
# Warmup Iteration  21: 1363325.586 ops/s
# Warmup Iteration  22: 1360256.168 ops/s
# Warmup Iteration  23: 1361242.308 ops/s
# Warmup Iteration  24: 1354078.895 ops/s
# Warmup Iteration  25: 1362486.033 ops/s
# Warmup Iteration  26: 1364533.758 ops/s
# Warmup Iteration  27: 1361622.562 ops/s
# Warmup Iteration  28: 1353648.543 ops/s
# Warmup Iteration  29: 1365203.484 ops/s
# Warmup Iteration  30: 1363687.680 ops/s
Iteration   1: 1365870.473 ops/s
Iteration   2: 1360299.766 ops/s
Iteration   3: 1360924.210 ops/s
Iteration   4: 1361766.056 ops/s
Iteration   5: 1368794.841 ops/s
Iteration   6: 1363773.831 ops/s
Iteration   7: 1361866.545 ops/s
Iteration   8: 1363225.812 ops/s
Iteration   9: 1343366.727 ops/s
Iteration  10: 1366163.643 ops/s
Iteration  11: 1363546.271 ops/s
Iteration  12: 1365605.123 ops/s
Iteration  13: 1365972.258 ops/s
Iteration  14: 1369456.954 ops/s
Iteration  15: 1361889.851 ops/s
Iteration  16: 1359706.163 ops/s
Iteration  17: 1363906.964 ops/s
Iteration  18: 1365439.765 ops/s
Iteration  19: 1366117.772 ops/s
Iteration  20: 1367256.603 ops/s
Iteration  21: 1362430.397 ops/s
Iteration  22: 1363045.260 ops/s
Iteration  23: 1365364.552 ops/s
Iteration  24: 1368797.245 ops/s
Iteration  25: 1364976.539 ops/s
Iteration  26: 1367127.271 ops/s
Iteration  27: 1363128.880 ops/s
Iteration  28: 1361534.023 ops/s
Iteration  29: 1360895.033 ops/s
Iteration  30: 1364585.942 ops/s


Result "org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_valuesView":
  1363561.159 ±(99.9%) 3081.198 ops/s [Average]
  (min, avg, max) = (1343366.727, 1363561.159, 1369456.954), stdev = 4611.793
  CI (99.9%): [1360479.961, 1366642.357] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_valuesView  thrpt   30  1363561.159 ± 3081.198  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_withKeyMultiValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_withKeyMultiValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 150735.752 ops/s
# Warmup Iteration   2: 272671.103 ops/s
# Warmup Iteration   3: 325273.314 ops/s
# Warmup Iteration   4: 325801.225 ops/s
# Warmup Iteration   5: 327111.690 ops/s
# Warmup Iteration   6: 271012.686 ops/s
# Warmup Iteration   7: 327277.445 ops/s
# Warmup Iteration   8: 326489.980 ops/s
# Warmup Iteration   9: 326424.803 ops/s
# Warmup Iteration  10: 327837.186 ops/s
# Warmup Iteration  11: 327526.945 ops/s
# Warmup Iteration  12: 326706.796 ops/s
# Warmup Iteration  13: 328435.866 ops/s
# Warmup Iteration  14: 327411.730 ops/s
# Warmup Iteration  15: 327275.425 ops/s
# Warmup Iteration  16: 325373.245 ops/s
# Warmup Iteration  17: 327855.820 ops/s
# Warmup Iteration  18: 326050.643 ops/s
# Warmup Iteration  19: 326755.590 ops/s
# Warmup Iteration  20: 328129.781 ops/s
# Warmup Iteration  21: 327729.827 ops/s
# Warmup Iteration  22: 328265.623 ops/s
# Warmup Iteration  23: 327458.594 ops/s
# Warmup Iteration  24: 328372.235 ops/s
# Warmup Iteration  25: 328037.835 ops/s
# Warmup Iteration  26: 326718.614 ops/s
# Warmup Iteration  27: 328540.969 ops/s
# Warmup Iteration  28: 326613.921 ops/s
# Warmup Iteration  29: 327725.454 ops/s
# Warmup Iteration  30: 328415.424 ops/s
Iteration   1: 329373.136 ops/s
Iteration   2: 328000.247 ops/s
Iteration   3: 324986.064 ops/s
Iteration   4: 326301.819 ops/s
Iteration   5: 326219.847 ops/s
Iteration   6: 327955.981 ops/s
Iteration   7: 327058.583 ops/s
Iteration   8: 329715.541 ops/s
Iteration   9: 328882.192 ops/s
Iteration  10: 326788.060 ops/s
Iteration  11: 328583.260 ops/s
Iteration  12: 329822.094 ops/s
Iteration  13: 328323.675 ops/s
Iteration  14: 329170.113 ops/s
Iteration  15: 328366.955 ops/s
Iteration  16: 327974.334 ops/s
Iteration  17: 327218.837 ops/s
Iteration  18: 327546.687 ops/s
Iteration  19: 326782.449 ops/s
Iteration  20: 325984.459 ops/s
Iteration  21: 326651.756 ops/s
Iteration  22: 327429.877 ops/s
Iteration  23: 328505.009 ops/s
Iteration  24: 328128.969 ops/s
Iteration  25: 327406.198 ops/s
Iteration  26: 327210.110 ops/s
Iteration  27: 327873.996 ops/s
Iteration  28: 328369.698 ops/s
Iteration  29: 328071.080 ops/s
Iteration  30: 329927.821 ops/s


Result "org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_withKeyMultiValues":
  327820.962 ±(99.9%) 794.735 ops/s [Average]
  (min, avg, max) = (324986.064, 327820.962, 329927.821), stdev = 1189.521
  CI (99.9%): [327026.227, 328615.696] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score     Error  Units
HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_withKeyMultiValues  thrpt   30  327820.962 ± 794.735  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_withKeyMultiValuesNullValueHandling$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_withKeyMultiValuesNullValueHandling

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 662592.640 ops/s
# Warmup Iteration   2: 739561.485 ops/s
# Warmup Iteration   3: 943020.708 ops/s
# Warmup Iteration   4: 950932.162 ops/s
# Warmup Iteration   5: 945514.695 ops/s
# Warmup Iteration   6: 946347.909 ops/s
# Warmup Iteration   7: 943758.496 ops/s
# Warmup Iteration   8: 945950.170 ops/s
# Warmup Iteration   9: 949221.608 ops/s
# Warmup Iteration  10: 798207.684 ops/s
# Warmup Iteration  11: 945308.972 ops/s
# Warmup Iteration  12: 946955.492 ops/s
# Warmup Iteration  13: 948235.547 ops/s
# Warmup Iteration  14: 949675.648 ops/s
# Warmup Iteration  15: 943021.450 ops/s
# Warmup Iteration  16: 947036.026 ops/s
# Warmup Iteration  17: 994264.899 ops/s
# Warmup Iteration  18: 989689.669 ops/s
# Warmup Iteration  19: 995164.043 ops/s
# Warmup Iteration  20: 991960.857 ops/s
# Warmup Iteration  21: 991441.944 ops/s
# Warmup Iteration  22: 989502.434 ops/s
# Warmup Iteration  23: 992363.702 ops/s
# Warmup Iteration  24: 989808.410 ops/s
# Warmup Iteration  25: 993213.370 ops/s
# Warmup Iteration  26: 987829.647 ops/s
# Warmup Iteration  27: 991287.381 ops/s
# Warmup Iteration  28: 994763.276 ops/s
# Warmup Iteration  29: 990566.131 ops/s
# Warmup Iteration  30: 994466.873 ops/s
Iteration   1: 989137.153 ops/s
Iteration   2: 990675.675 ops/s
Iteration   3: 996619.174 ops/s
Iteration   4: 991133.289 ops/s
Iteration   5: 988690.061 ops/s
Iteration   6: 988672.419 ops/s
Iteration   7: 990181.192 ops/s
Iteration   8: 992839.977 ops/s
Iteration   9: 991779.347 ops/s
Iteration  10: 977365.046 ops/s
Iteration  11: 992932.757 ops/s
Iteration  12: 998133.079 ops/s
Iteration  13: 996564.540 ops/s
Iteration  14: 992922.080 ops/s
Iteration  15: 993906.681 ops/s
Iteration  16: 994115.602 ops/s
Iteration  17: 993716.214 ops/s
Iteration  18: 995352.918 ops/s
Iteration  19: 994065.779 ops/s
Iteration  20: 991852.915 ops/s
Iteration  21: 990199.873 ops/s
Iteration  22: 993476.651 ops/s
Iteration  23: 993500.538 ops/s
Iteration  24: 993080.487 ops/s
Iteration  25: 993515.073 ops/s
Iteration  26: 990098.630 ops/s
Iteration  27: 991603.179 ops/s
Iteration  28: 975243.829 ops/s
Iteration  29: 996896.665 ops/s
Iteration  30: 990299.663 ops/s


Result "org.eclipse.collections.impl.multimap.bag.strategy.HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_withKeyMultiValuesNullValueHandling":
  991619.016 ±(99.9%) 3228.705 ops/s [Average]
  (min, avg, max) = (975243.829, 991619.016, 998133.079), stdev = 4832.574
  CI (99.9%): [988390.311, 994847.721] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                         Mode  Cnt       Score      Error  Units
HashBagMultimapWithHashingStrategyTest._Benchmark.benchmark_withKeyMultiValuesNullValueHandling  thrpt   30  991619.016 ± 3228.705  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_addAndGrowMultimap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_addAndGrowMultimap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 556026.134 ops/s
# Warmup Iteration   2: 1436397.983 ops/s
# Warmup Iteration   3: 1555150.761 ops/s
# Warmup Iteration   4: 1276030.371 ops/s
# Warmup Iteration   5: 1558237.442 ops/s
# Warmup Iteration   6: 1555441.648 ops/s
# Warmup Iteration   7: 1556638.387 ops/s
# Warmup Iteration   8: 1541472.790 ops/s
# Warmup Iteration   9: 1554974.902 ops/s
# Warmup Iteration  10: 1555112.350 ops/s
# Warmup Iteration  11: 1546318.545 ops/s
# Warmup Iteration  12: 1553111.619 ops/s
# Warmup Iteration  13: 1554597.276 ops/s
# Warmup Iteration  14: 1559114.158 ops/s
# Warmup Iteration  15: 1554576.535 ops/s
# Warmup Iteration  16: 1557542.135 ops/s
# Warmup Iteration  17: 1557622.523 ops/s
# Warmup Iteration  18: 1559033.368 ops/s
# Warmup Iteration  19: 1559481.492 ops/s
# Warmup Iteration  20: 1557712.798 ops/s
# Warmup Iteration  21: 1560648.848 ops/s
# Warmup Iteration  22: 1560393.760 ops/s
# Warmup Iteration  23: 1558325.275 ops/s
# Warmup Iteration  24: 1555743.920 ops/s
# Warmup Iteration  25: 1549684.722 ops/s
# Warmup Iteration  26: 1558143.545 ops/s
# Warmup Iteration  27: 1560574.380 ops/s
# Warmup Iteration  28: 1559011.985 ops/s
# Warmup Iteration  29: 1557277.494 ops/s
# Warmup Iteration  30: 1561359.962 ops/s
Iteration   1: 1554331.999 ops/s
Iteration   2: 1558334.544 ops/s
Iteration   3: 1560794.739 ops/s
Iteration   4: 1557226.327 ops/s
Iteration   5: 1555636.139 ops/s
Iteration   6: 1558176.884 ops/s
Iteration   7: 1560063.632 ops/s
Iteration   8: 1559833.796 ops/s
Iteration   9: 1557875.134 ops/s
Iteration  10: 1553031.029 ops/s
Iteration  11: 1556502.965 ops/s
Iteration  12: 1561577.747 ops/s
Iteration  13: 1560017.641 ops/s
Iteration  14: 1552232.235 ops/s
Iteration  15: 1562609.848 ops/s
Iteration  16: 1557231.068 ops/s
Iteration  17: 1561033.170 ops/s
Iteration  18: 1561068.331 ops/s
Iteration  19: 1560749.282 ops/s
Iteration  20: 1564681.850 ops/s
Iteration  21: 1556794.053 ops/s
Iteration  22: 1559160.965 ops/s
Iteration  23: 1546735.535 ops/s
Iteration  24: 1561122.039 ops/s
Iteration  25: 1559485.378 ops/s
Iteration  26: 1554749.611 ops/s
Iteration  27: 1557126.293 ops/s
Iteration  28: 1561589.342 ops/s
Iteration  29: 1563805.026 ops/s
Iteration  30: 1561411.053 ops/s


Result "org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_addAndGrowMultimap":
  1558499.589 ±(99.9%) 2508.042 ops/s [Average]
  (min, avg, max) = (1546735.535, 1558499.589, 1564681.850), stdev = 3753.919
  CI (99.9%): [1555991.547, 1561007.630] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
FastListMultimapTest._Benchmark.benchmark_addAndGrowMultimap  thrpt   30  1558499.589 ± 2508.042  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 185656.133 ops/s
# Warmup Iteration   2: 608720.308 ops/s
# Warmup Iteration   3: 695025.624 ops/s
# Warmup Iteration   4: 697789.168 ops/s
# Warmup Iteration   5: 584267.614 ops/s
# Warmup Iteration   6: 698305.973 ops/s
# Warmup Iteration   7: 693677.426 ops/s
# Warmup Iteration   8: 700221.510 ops/s
# Warmup Iteration   9: 698598.385 ops/s
# Warmup Iteration  10: 696567.941 ops/s
# Warmup Iteration  11: 698426.108 ops/s
# Warmup Iteration  12: 696330.645 ops/s
# Warmup Iteration  13: 699290.449 ops/s
# Warmup Iteration  14: 691217.133 ops/s
# Warmup Iteration  15: 698215.232 ops/s
# Warmup Iteration  16: 698046.764 ops/s
# Warmup Iteration  17: 696585.752 ops/s
# Warmup Iteration  18: 692731.851 ops/s
# Warmup Iteration  19: 699064.650 ops/s
# Warmup Iteration  20: 697724.169 ops/s
# Warmup Iteration  21: 696504.648 ops/s
# Warmup Iteration  22: 697550.968 ops/s
# Warmup Iteration  23: 699303.475 ops/s
# Warmup Iteration  24: 698022.007 ops/s
# Warmup Iteration  25: 698951.310 ops/s
# Warmup Iteration  26: 700179.995 ops/s
# Warmup Iteration  27: 700179.898 ops/s
# Warmup Iteration  28: 700538.859 ops/s
# Warmup Iteration  29: 699305.040 ops/s
# Warmup Iteration  30: 696880.927 ops/s
Iteration   1: 699853.041 ops/s
Iteration   2: 688831.536 ops/s
Iteration   3: 693925.070 ops/s
Iteration   4: 698391.955 ops/s
Iteration   5: 696400.801 ops/s
Iteration   6: 700230.386 ops/s
Iteration   7: 699587.355 ops/s
Iteration   8: 696835.874 ops/s
Iteration   9: 698602.814 ops/s
Iteration  10: 697278.213 ops/s
Iteration  11: 698018.625 ops/s
Iteration  12: 701429.868 ops/s
Iteration  13: 699074.865 ops/s
Iteration  14: 696862.924 ops/s
Iteration  15: 700197.093 ops/s
Iteration  16: 697511.945 ops/s
Iteration  17: 698382.167 ops/s
Iteration  18: 696669.822 ops/s
Iteration  19: 696691.858 ops/s
Iteration  20: 697094.720 ops/s
Iteration  21: 699439.970 ops/s
Iteration  22: 700827.180 ops/s
Iteration  23: 697189.467 ops/s
Iteration  24: 700772.188 ops/s
Iteration  25: 698744.264 ops/s
Iteration  26: 700376.947 ops/s
Iteration  27: 700443.865 ops/s
Iteration  28: 697018.412 ops/s
Iteration  29: 699138.532 ops/s
Iteration  30: 686864.939 ops/s


Result "org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_clear":
  697756.223 ±(99.9%) 2132.049 ops/s [Average]
  (min, avg, max) = (686864.939, 697756.223, 701429.868), stdev = 3191.152
  CI (99.9%): [695624.174, 699888.273] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score      Error  Units
FastListMultimapTest._Benchmark.benchmark_clear  thrpt   30  697756.223 ± 2132.049  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_collectKeyMultiValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_collectKeyMultiValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 38815.812 ops/s
# Warmup Iteration   2: 80903.808 ops/s
# Warmup Iteration   3: 95880.784 ops/s
# Warmup Iteration   4: 96096.403 ops/s
# Warmup Iteration   5: 92232.075 ops/s
# Warmup Iteration   6: 83833.720 ops/s
# Warmup Iteration   7: 96331.796 ops/s
# Warmup Iteration   8: 96333.543 ops/s
# Warmup Iteration   9: 96510.843 ops/s
# Warmup Iteration  10: 94517.138 ops/s
# Warmup Iteration  11: 95904.828 ops/s
# Warmup Iteration  12: 96107.152 ops/s
# Warmup Iteration  13: 96210.075 ops/s
# Warmup Iteration  14: 96093.465 ops/s
# Warmup Iteration  15: 95778.345 ops/s
# Warmup Iteration  16: 94896.821 ops/s
# Warmup Iteration  17: 95658.557 ops/s
# Warmup Iteration  18: 96608.383 ops/s
# Warmup Iteration  19: 95929.557 ops/s
# Warmup Iteration  20: 96415.671 ops/s
# Warmup Iteration  21: 96230.957 ops/s
# Warmup Iteration  22: 96036.980 ops/s
# Warmup Iteration  23: 95195.804 ops/s
# Warmup Iteration  24: 95812.052 ops/s
# Warmup Iteration  25: 96536.836 ops/s
# Warmup Iteration  26: 96067.018 ops/s
# Warmup Iteration  27: 96010.105 ops/s
# Warmup Iteration  28: 96299.337 ops/s
# Warmup Iteration  29: 95109.628 ops/s
# Warmup Iteration  30: 95448.479 ops/s
Iteration   1: 96666.371 ops/s
Iteration   2: 96305.959 ops/s
Iteration   3: 96094.050 ops/s
Iteration   4: 96249.885 ops/s
Iteration   5: 96724.858 ops/s
Iteration   6: 96225.522 ops/s
Iteration   7: 96599.777 ops/s
Iteration   8: 96583.815 ops/s
Iteration   9: 95678.974 ops/s
Iteration  10: 95826.709 ops/s
Iteration  11: 95952.992 ops/s
Iteration  12: 95436.935 ops/s
Iteration  13: 95629.858 ops/s
Iteration  14: 96218.753 ops/s
Iteration  15: 95523.501 ops/s
Iteration  16: 96503.843 ops/s
Iteration  17: 95300.089 ops/s
Iteration  18: 96716.652 ops/s
Iteration  19: 96453.396 ops/s
Iteration  20: 96231.481 ops/s
Iteration  21: 96165.682 ops/s
Iteration  22: 96054.222 ops/s
Iteration  23: 96505.651 ops/s
Iteration  24: 96631.151 ops/s
Iteration  25: 96162.829 ops/s
Iteration  26: 96365.340 ops/s
Iteration  27: 96113.494 ops/s
Iteration  28: 96438.099 ops/s
Iteration  29: 95979.952 ops/s
Iteration  30: 96529.939 ops/s


Result "org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_collectKeyMultiValues":
  96195.659 ±(99.9%) 261.672 ops/s [Average]
  (min, avg, max) = (95300.089, 96195.659, 96724.858), stdev = 391.659
  CI (99.9%): [95933.987, 96457.332] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt      Score     Error  Units
FastListMultimapTest._Benchmark.benchmark_collectKeyMultiValues  thrpt   30  96195.659 ± 261.672  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_collectKeysValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_collectKeysValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 51979.117 ops/s
# Warmup Iteration   2: 113234.062 ops/s
# Warmup Iteration   3: 124508.211 ops/s
# Warmup Iteration   4: 125397.920 ops/s
# Warmup Iteration   5: 103922.814 ops/s
# Warmup Iteration   6: 124156.176 ops/s
# Warmup Iteration   7: 125706.035 ops/s
# Warmup Iteration   8: 125335.052 ops/s
# Warmup Iteration   9: 125363.268 ops/s
# Warmup Iteration  10: 126361.136 ops/s
# Warmup Iteration  11: 125966.600 ops/s
# Warmup Iteration  12: 126135.722 ops/s
# Warmup Iteration  13: 124760.344 ops/s
# Warmup Iteration  14: 126030.687 ops/s
# Warmup Iteration  15: 125804.096 ops/s
# Warmup Iteration  16: 125110.581 ops/s
# Warmup Iteration  17: 126201.456 ops/s
# Warmup Iteration  18: 126297.080 ops/s
# Warmup Iteration  19: 125486.193 ops/s
# Warmup Iteration  20: 126189.183 ops/s
# Warmup Iteration  21: 126162.384 ops/s
# Warmup Iteration  22: 126080.067 ops/s
# Warmup Iteration  23: 125233.261 ops/s
# Warmup Iteration  24: 125709.942 ops/s
# Warmup Iteration  25: 125757.623 ops/s
# Warmup Iteration  26: 124493.049 ops/s
# Warmup Iteration  27: 126133.905 ops/s
# Warmup Iteration  28: 125952.181 ops/s
# Warmup Iteration  29: 126317.317 ops/s
# Warmup Iteration  30: 125882.652 ops/s
Iteration   1: 125145.259 ops/s
Iteration   2: 125773.163 ops/s
Iteration   3: 126920.303 ops/s
Iteration   4: 124066.636 ops/s
Iteration   5: 125499.253 ops/s
Iteration   6: 126121.441 ops/s
Iteration   7: 126379.836 ops/s
Iteration   8: 125299.499 ops/s
Iteration   9: 126276.809 ops/s
Iteration  10: 125575.310 ops/s
Iteration  11: 125688.059 ops/s
Iteration  12: 124513.151 ops/s
Iteration  13: 127255.142 ops/s
Iteration  14: 126671.809 ops/s
Iteration  15: 125936.687 ops/s
Iteration  16: 125603.434 ops/s
Iteration  17: 122033.322 ops/s
Iteration  18: 125804.879 ops/s
Iteration  19: 126164.430 ops/s
Iteration  20: 125869.094 ops/s
Iteration  21: 125607.499 ops/s
Iteration  22: 125914.043 ops/s
Iteration  23: 126371.088 ops/s
Iteration  24: 125869.841 ops/s
Iteration  25: 126652.537 ops/s
Iteration  26: 126240.603 ops/s
Iteration  27: 125826.192 ops/s
Iteration  28: 124213.783 ops/s
Iteration  29: 125623.658 ops/s
Iteration  30: 125884.665 ops/s


Result "org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_collectKeysValues":
  125693.381 ±(99.9%) 658.742 ops/s [Average]
  (min, avg, max) = (122033.322, 125693.381, 127255.142), stdev = 985.974
  CI (99.9%): [125034.639, 126352.123] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score     Error  Units
FastListMultimapTest._Benchmark.benchmark_collectKeysValues  thrpt   30  125693.381 ± 658.742  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_collectValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_collectValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 122728.172 ops/s
# Warmup Iteration   2: 285968.258 ops/s
# Warmup Iteration   3: 309023.543 ops/s
# Warmup Iteration   4: 307695.606 ops/s
# Warmup Iteration   5: 257401.626 ops/s
# Warmup Iteration   6: 311832.872 ops/s
# Warmup Iteration   7: 308803.999 ops/s
# Warmup Iteration   8: 312119.670 ops/s
# Warmup Iteration   9: 309778.106 ops/s
# Warmup Iteration  10: 311036.971 ops/s
# Warmup Iteration  11: 311081.189 ops/s
# Warmup Iteration  12: 312696.104 ops/s
# Warmup Iteration  13: 311415.479 ops/s
# Warmup Iteration  14: 311472.616 ops/s
# Warmup Iteration  15: 309547.835 ops/s
# Warmup Iteration  16: 310314.596 ops/s
# Warmup Iteration  17: 312234.520 ops/s
# Warmup Iteration  18: 311618.444 ops/s
# Warmup Iteration  19: 312478.840 ops/s
# Warmup Iteration  20: 310859.374 ops/s
# Warmup Iteration  21: 309072.886 ops/s
# Warmup Iteration  22: 310915.742 ops/s
# Warmup Iteration  23: 310441.444 ops/s
# Warmup Iteration  24: 309600.033 ops/s
# Warmup Iteration  25: 308971.453 ops/s
# Warmup Iteration  26: 310185.671 ops/s
# Warmup Iteration  27: 311601.166 ops/s
# Warmup Iteration  28: 311837.884 ops/s
# Warmup Iteration  29: 312401.988 ops/s
# Warmup Iteration  30: 309654.444 ops/s
Iteration   1: 311110.406 ops/s
Iteration   2: 309825.302 ops/s
Iteration   3: 313339.014 ops/s
Iteration   4: 312508.162 ops/s
Iteration   5: 308259.364 ops/s
Iteration   6: 310956.973 ops/s
Iteration   7: 309090.404 ops/s
Iteration   8: 309975.270 ops/s
Iteration   9: 307928.065 ops/s
Iteration  10: 308288.741 ops/s
Iteration  11: 308806.896 ops/s
Iteration  12: 312465.418 ops/s
Iteration  13: 312430.160 ops/s
Iteration  14: 311252.441 ops/s
Iteration  15: 307114.234 ops/s
Iteration  16: 311933.144 ops/s
Iteration  17: 311192.078 ops/s
Iteration  18: 312031.953 ops/s
Iteration  19: 309473.806 ops/s
Iteration  20: 307471.484 ops/s
Iteration  21: 306629.081 ops/s
Iteration  22: 307389.695 ops/s
Iteration  23: 309144.704 ops/s
Iteration  24: 310122.180 ops/s
Iteration  25: 304641.644 ops/s
Iteration  26: 312202.878 ops/s
Iteration  27: 312536.651 ops/s
Iteration  28: 310973.542 ops/s
Iteration  29: 310409.833 ops/s
Iteration  30: 310380.109 ops/s


Result "org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_collectValues":
  309996.121 ±(99.9%) 1415.333 ops/s [Average]
  (min, avg, max) = (304641.644, 309996.121, 313339.014), stdev = 2118.405
  CI (99.9%): [308580.788, 311411.454] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
FastListMultimapTest._Benchmark.benchmark_collectValues  thrpt   30  309996.121 ± 1415.333  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_containsValue$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_containsValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3229463.978 ops/s
# Warmup Iteration   2: 7793314.671 ops/s
# Warmup Iteration   3: 7823523.102 ops/s
# Warmup Iteration   4: 6553061.133 ops/s
# Warmup Iteration   5: 7820042.248 ops/s
# Warmup Iteration   6: 7925186.358 ops/s
# Warmup Iteration   7: 7953459.215 ops/s
# Warmup Iteration   8: 7624338.655 ops/s
# Warmup Iteration   9: 7839559.904 ops/s
# Warmup Iteration  10: 7815168.467 ops/s
# Warmup Iteration  11: 7848610.639 ops/s
# Warmup Iteration  12: 7853931.313 ops/s
# Warmup Iteration  13: 7879993.253 ops/s
# Warmup Iteration  14: 8002337.506 ops/s
# Warmup Iteration  15: 7862683.906 ops/s
# Warmup Iteration  16: 7786734.796 ops/s
# Warmup Iteration  17: 7820052.601 ops/s
# Warmup Iteration  18: 7849483.816 ops/s
# Warmup Iteration  19: 7962698.565 ops/s
# Warmup Iteration  20: 7824013.351 ops/s
# Warmup Iteration  21: 7909211.925 ops/s
# Warmup Iteration  22: 7876648.273 ops/s
# Warmup Iteration  23: 7901497.424 ops/s
# Warmup Iteration  24: 7729880.397 ops/s
# Warmup Iteration  25: 7833151.145 ops/s
# Warmup Iteration  26: 7982041.047 ops/s
# Warmup Iteration  27: 7855724.710 ops/s
# Warmup Iteration  28: 7813356.254 ops/s
# Warmup Iteration  29: 7725577.723 ops/s
# Warmup Iteration  30: 7815177.438 ops/s
Iteration   1: 8002957.854 ops/s
Iteration   2: 7927295.882 ops/s
Iteration   3: 7908085.304 ops/s
Iteration   4: 7774469.622 ops/s
Iteration   5: 8042427.151 ops/s
Iteration   6: 7861048.328 ops/s
Iteration   7: 7715138.118 ops/s
Iteration   8: 7643972.741 ops/s
Iteration   9: 7898324.909 ops/s
Iteration  10: 7894727.947 ops/s
Iteration  11: 7911774.805 ops/s
Iteration  12: 8064790.078 ops/s
Iteration  13: 7870275.160 ops/s
Iteration  14: 7956937.739 ops/s
Iteration  15: 7945577.658 ops/s
Iteration  16: 7844830.245 ops/s
Iteration  17: 7824186.318 ops/s
Iteration  18: 7956171.014 ops/s
Iteration  19: 7940668.703 ops/s
Iteration  20: 7828386.368 ops/s
Iteration  21: 7871930.960 ops/s
Iteration  22: 7967165.216 ops/s
Iteration  23: 7908026.147 ops/s
Iteration  24: 7808754.916 ops/s
Iteration  25: 7675125.547 ops/s
Iteration  26: 7948877.224 ops/s
Iteration  27: 7996262.046 ops/s
Iteration  28: 7897995.197 ops/s
Iteration  29: 7863250.026 ops/s
Iteration  30: 7864742.104 ops/s


Result "org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_containsValue":
  7887139.178 ±(99.9%) 65001.390 ops/s [Average]
  (min, avg, max) = (7643972.741, 7887139.178, 8064790.078), stdev = 97291.028
  CI (99.9%): [7822137.788, 7952140.568] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
FastListMultimapTest._Benchmark.benchmark_containsValue  thrpt   30  7887139.178 ± 65001.390  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_flip$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_flip

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 564687.083 ops/s
# Warmup Iteration   2: 1121431.491 ops/s
# Warmup Iteration   3: 1265954.132 ops/s
# Warmup Iteration   4: 1287599.748 ops/s
# Warmup Iteration   5: 1086776.492 ops/s
# Warmup Iteration   6: 1242407.923 ops/s
# Warmup Iteration   7: 1289341.721 ops/s
# Warmup Iteration   8: 1279158.129 ops/s
# Warmup Iteration   9: 1289192.862 ops/s
# Warmup Iteration  10: 1289279.241 ops/s
# Warmup Iteration  11: 1291716.837 ops/s
# Warmup Iteration  12: 1284204.134 ops/s
# Warmup Iteration  13: 1288346.394 ops/s
# Warmup Iteration  14: 1290800.288 ops/s
# Warmup Iteration  15: 1290479.559 ops/s
# Warmup Iteration  16: 1292480.123 ops/s
# Warmup Iteration  17: 1289647.190 ops/s
# Warmup Iteration  18: 1286884.852 ops/s
# Warmup Iteration  19: 1287332.293 ops/s
# Warmup Iteration  20: 1278390.686 ops/s
# Warmup Iteration  21: 1276573.531 ops/s
# Warmup Iteration  22: 1284605.408 ops/s
# Warmup Iteration  23: 1289078.915 ops/s
# Warmup Iteration  24: 1277849.468 ops/s
# Warmup Iteration  25: 1276689.650 ops/s
# Warmup Iteration  26: 1277663.283 ops/s
# Warmup Iteration  27: 1288516.486 ops/s
# Warmup Iteration  28: 1290223.581 ops/s
# Warmup Iteration  29: 1283526.474 ops/s
# Warmup Iteration  30: 1288425.908 ops/s
Iteration   1: 1289964.532 ops/s
Iteration   2: 1290664.414 ops/s
Iteration   3: 1285403.296 ops/s
Iteration   4: 1283702.388 ops/s
Iteration   5: 1291866.028 ops/s
Iteration   6: 1288556.463 ops/s
Iteration   7: 1287550.284 ops/s
Iteration   8: 1292224.590 ops/s
Iteration   9: 1285178.613 ops/s
Iteration  10: 1292001.272 ops/s
Iteration  11: 1288234.686 ops/s
Iteration  12: 1286540.389 ops/s
Iteration  13: 1287519.050 ops/s
Iteration  14: 1290099.994 ops/s
Iteration  15: 1284338.108 ops/s
Iteration  16: 1288795.870 ops/s
Iteration  17: 1286591.073 ops/s
Iteration  18: 1282232.172 ops/s
Iteration  19: 1287830.077 ops/s
Iteration  20: 1288047.350 ops/s
Iteration  21: 1289589.986 ops/s
Iteration  22: 1289712.561 ops/s
Iteration  23: 1284376.464 ops/s
Iteration  24: 1285461.274 ops/s
Iteration  25: 1291774.711 ops/s
Iteration  26: 1289439.214 ops/s
Iteration  27: 1286681.005 ops/s
Iteration  28: 1287267.644 ops/s
Iteration  29: 1291131.355 ops/s
Iteration  30: 1286758.134 ops/s


Result "org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_flip":
  1287984.433 ±(99.9%) 1774.494 ops/s [Average]
  (min, avg, max) = (1282232.172, 1287984.433, 1292224.590), stdev = 2655.979
  CI (99.9%): [1286209.940, 1289758.927] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score      Error  Units
FastListMultimapTest._Benchmark.benchmark_flip  thrpt   30  1287984.433 ± 1774.494  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_forEachKey$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_forEachKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 932439.301 ops/s
# Warmup Iteration   2: 2052408.086 ops/s
# Warmup Iteration   3: 2233250.604 ops/s
# Warmup Iteration   4: 2249179.990 ops/s
# Warmup Iteration   5: 1834395.869 ops/s
# Warmup Iteration   6: 2256594.381 ops/s
# Warmup Iteration   7: 2257134.417 ops/s
# Warmup Iteration   8: 2250468.740 ops/s
# Warmup Iteration   9: 2254667.997 ops/s
# Warmup Iteration  10: 2251712.040 ops/s
# Warmup Iteration  11: 2248254.816 ops/s
# Warmup Iteration  12: 2233033.018 ops/s
# Warmup Iteration  13: 2254081.538 ops/s
# Warmup Iteration  14: 2252409.046 ops/s
# Warmup Iteration  15: 2236712.393 ops/s
# Warmup Iteration  16: 2251457.256 ops/s
# Warmup Iteration  17: 2251008.756 ops/s
# Warmup Iteration  18: 2256015.827 ops/s
# Warmup Iteration  19: 2246960.176 ops/s
# Warmup Iteration  20: 2255597.450 ops/s
# Warmup Iteration  21: 2249112.945 ops/s
# Warmup Iteration  22: 2255038.829 ops/s
# Warmup Iteration  23: 2255495.488 ops/s
# Warmup Iteration  24: 2249850.408 ops/s
# Warmup Iteration  25: 2258480.722 ops/s
# Warmup Iteration  26: 2235815.701 ops/s
# Warmup Iteration  27: 2244437.649 ops/s
# Warmup Iteration  28: 2249478.688 ops/s
# Warmup Iteration  29: 2246931.504 ops/s
# Warmup Iteration  30: 2253257.647 ops/s
Iteration   1: 2245167.721 ops/s
Iteration   2: 2239709.253 ops/s
Iteration   3: 2247745.655 ops/s
Iteration   4: 2251311.513 ops/s
Iteration   5: 2258526.759 ops/s
Iteration   6: 2256495.014 ops/s
Iteration   7: 2219766.929 ops/s
Iteration   8: 2250913.553 ops/s
Iteration   9: 2260845.313 ops/s
Iteration  10: 2251443.313 ops/s
Iteration  11: 2248041.733 ops/s
Iteration  12: 2256300.182 ops/s
Iteration  13: 2254118.148 ops/s
Iteration  14: 2249138.044 ops/s
Iteration  15: 2253751.028 ops/s
Iteration  16: 2254616.882 ops/s
Iteration  17: 2254428.233 ops/s
Iteration  18: 2250875.274 ops/s
Iteration  19: 2253614.097 ops/s
Iteration  20: 2257445.080 ops/s
Iteration  21: 2248681.260 ops/s
Iteration  22: 2243838.326 ops/s
Iteration  23: 2258115.885 ops/s
Iteration  24: 2245032.669 ops/s
Iteration  25: 2252790.436 ops/s
Iteration  26: 2250417.983 ops/s
Iteration  27: 2250260.716 ops/s
Iteration  28: 2252957.581 ops/s
Iteration  29: 2252558.770 ops/s
Iteration  30: 2251326.348 ops/s


Result "org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_forEachKey":
  2250674.456 ±(99.9%) 4982.252 ops/s [Average]
  (min, avg, max) = (2219766.929, 2250674.456, 2260845.313), stdev = 7457.200
  CI (99.9%): [2245692.205, 2255656.708] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
FastListMultimapTest._Benchmark.benchmark_forEachKey  thrpt   30  2250674.456 ± 4982.252  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_forEachKeyMultiValue$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_forEachKeyMultiValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1222393.148 ops/s
# Warmup Iteration   2: 2764951.466 ops/s
# Warmup Iteration   3: 2965039.388 ops/s
# Warmup Iteration   4: 2830055.768 ops/s
# Warmup Iteration   5: 2576421.976 ops/s
# Warmup Iteration   6: 2970574.954 ops/s
# Warmup Iteration   7: 2976789.465 ops/s
# Warmup Iteration   8: 2991935.225 ops/s
# Warmup Iteration   9: 2979175.643 ops/s
# Warmup Iteration  10: 2983520.833 ops/s
# Warmup Iteration  11: 2982083.306 ops/s
# Warmup Iteration  12: 2976641.003 ops/s
# Warmup Iteration  13: 2981414.000 ops/s
# Warmup Iteration  14: 2985248.655 ops/s
# Warmup Iteration  15: 2986490.744 ops/s
# Warmup Iteration  16: 2985948.242 ops/s
# Warmup Iteration  17: 2983293.131 ops/s
# Warmup Iteration  18: 2934559.258 ops/s
# Warmup Iteration  19: 2967221.695 ops/s
# Warmup Iteration  20: 2985537.881 ops/s
# Warmup Iteration  21: 2984560.671 ops/s
# Warmup Iteration  22: 2975612.270 ops/s
# Warmup Iteration  23: 2977838.721 ops/s
# Warmup Iteration  24: 2983274.640 ops/s
# Warmup Iteration  25: 2957784.443 ops/s
# Warmup Iteration  26: 2986905.562 ops/s
# Warmup Iteration  27: 2974686.959 ops/s
# Warmup Iteration  28: 2981024.907 ops/s
# Warmup Iteration  29: 2980242.627 ops/s
# Warmup Iteration  30: 2972841.732 ops/s
Iteration   1: 2971837.827 ops/s
Iteration   2: 2988373.267 ops/s
Iteration   3: 2985491.246 ops/s
Iteration   4: 2988400.659 ops/s
Iteration   5: 2985542.256 ops/s
Iteration   6: 2990968.101 ops/s
Iteration   7: 2994050.291 ops/s
Iteration   8: 2973261.203 ops/s
Iteration   9: 2986664.129 ops/s
Iteration  10: 2963824.118 ops/s
Iteration  11: 2967909.033 ops/s
Iteration  12: 2979457.492 ops/s
Iteration  13: 2976895.280 ops/s
Iteration  14: 2986720.190 ops/s
Iteration  15: 2931712.367 ops/s
Iteration  16: 2987571.603 ops/s
Iteration  17: 3000255.522 ops/s
Iteration  18: 2990446.344 ops/s
Iteration  19: 2985487.507 ops/s
Iteration  20: 2967057.582 ops/s
Iteration  21: 2988992.556 ops/s
Iteration  22: 2987498.333 ops/s
Iteration  23: 2983174.532 ops/s
Iteration  24: 2991543.025 ops/s
Iteration  25: 2989822.577 ops/s
Iteration  26: 2970025.515 ops/s
Iteration  27: 2992466.030 ops/s
Iteration  28: 2981660.919 ops/s
Iteration  29: 2980397.314 ops/s
Iteration  30: 2980305.242 ops/s


Result "org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_forEachKeyMultiValue":
  2981593.735 ±(99.9%) 8598.463 ops/s [Average]
  (min, avg, max) = (2931712.367, 2981593.735, 3000255.522), stdev = 12869.775
  CI (99.9%): [2972995.272, 2990192.198] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
FastListMultimapTest._Benchmark.benchmark_forEachKeyMultiValue  thrpt   30  2981593.735 ± 8598.463  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_forEachKeyMutableList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_forEachKeyMutableList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1113521.260 ops/s
# Warmup Iteration   2: 2555932.825 ops/s
# Warmup Iteration   3: 2654437.988 ops/s
# Warmup Iteration   4: 2588846.444 ops/s
# Warmup Iteration   5: 2300962.040 ops/s
# Warmup Iteration   6: 2681244.506 ops/s
# Warmup Iteration   7: 2679402.816 ops/s
# Warmup Iteration   8: 2681060.849 ops/s
# Warmup Iteration   9: 2671955.664 ops/s
# Warmup Iteration  10: 2666210.005 ops/s
# Warmup Iteration  11: 2678461.126 ops/s
# Warmup Iteration  12: 2681229.405 ops/s
# Warmup Iteration  13: 2652153.671 ops/s
# Warmup Iteration  14: 2678480.680 ops/s
# Warmup Iteration  15: 2676989.514 ops/s
# Warmup Iteration  16: 2677343.142 ops/s
# Warmup Iteration  17: 2682456.181 ops/s
# Warmup Iteration  18: 2658284.088 ops/s
# Warmup Iteration  19: 2685370.609 ops/s
# Warmup Iteration  20: 2693332.592 ops/s
# Warmup Iteration  21: 2684525.783 ops/s
# Warmup Iteration  22: 2677473.245 ops/s
# Warmup Iteration  23: 2685807.318 ops/s
# Warmup Iteration  24: 2680392.472 ops/s
# Warmup Iteration  25: 2679858.832 ops/s
# Warmup Iteration  26: 2686914.363 ops/s
# Warmup Iteration  27: 2680206.292 ops/s
# Warmup Iteration  28: 2682364.708 ops/s
# Warmup Iteration  29: 2682407.431 ops/s
# Warmup Iteration  30: 2678994.930 ops/s
Iteration   1: 2682874.281 ops/s
Iteration   2: 2678963.451 ops/s
Iteration   3: 2689145.806 ops/s
Iteration   4: 2688049.421 ops/s
Iteration   5: 2683414.169 ops/s
Iteration   6: 2680339.570 ops/s
Iteration   7: 2685652.484 ops/s
Iteration   8: 2691516.169 ops/s
Iteration   9: 2639928.033 ops/s
Iteration  10: 2675472.853 ops/s
Iteration  11: 2682756.572 ops/s
Iteration  12: 2643253.976 ops/s
Iteration  13: 2683080.081 ops/s
Iteration  14: 2682223.343 ops/s
Iteration  15: 2676240.899 ops/s
Iteration  16: 2681523.675 ops/s
Iteration  17: 2691057.472 ops/s
Iteration  18: 2681746.259 ops/s
Iteration  19: 2679360.355 ops/s
Iteration  20: 2678576.815 ops/s
Iteration  21: 2682100.999 ops/s
Iteration  22: 2578946.077 ops/s
Iteration  23: 2669042.620 ops/s
Iteration  24: 2623029.544 ops/s
Iteration  25: 2664585.091 ops/s
Iteration  26: 2685206.129 ops/s
Iteration  27: 2689192.119 ops/s
Iteration  28: 2677107.135 ops/s
Iteration  29: 2682572.418 ops/s
Iteration  30: 2681377.613 ops/s


Result "org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_forEachKeyMutableList":
  2673611.181 ±(99.9%) 15791.187 ops/s [Average]
  (min, avg, max) = (2578946.077, 2673611.181, 2691516.169), stdev = 23635.507
  CI (99.9%): [2657819.994, 2689402.368] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
FastListMultimapTest._Benchmark.benchmark_forEachKeyMutableList  thrpt   30  2673611.181 ± 15791.187  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_forEachKeyValue$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_forEachKeyValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 574693.191 ops/s
# Warmup Iteration   2: 1186204.537 ops/s
# Warmup Iteration   3: 1307142.250 ops/s
# Warmup Iteration   4: 1315316.732 ops/s
# Warmup Iteration   5: 1087563.684 ops/s
# Warmup Iteration   6: 1306104.046 ops/s
# Warmup Iteration   7: 1310116.415 ops/s
# Warmup Iteration   8: 1312911.407 ops/s
# Warmup Iteration   9: 1325873.525 ops/s
# Warmup Iteration  10: 1315185.057 ops/s
# Warmup Iteration  11: 1316326.218 ops/s
# Warmup Iteration  12: 1302993.603 ops/s
# Warmup Iteration  13: 1321919.484 ops/s
# Warmup Iteration  14: 1320154.304 ops/s
# Warmup Iteration  15: 1318358.628 ops/s
# Warmup Iteration  16: 1325856.043 ops/s
# Warmup Iteration  17: 1312450.054 ops/s
# Warmup Iteration  18: 1328955.267 ops/s
# Warmup Iteration  19: 1315961.612 ops/s
# Warmup Iteration  20: 1308637.604 ops/s
# Warmup Iteration  21: 1311930.415 ops/s
# Warmup Iteration  22: 1310327.200 ops/s
# Warmup Iteration  23: 1305807.912 ops/s
# Warmup Iteration  24: 1315492.047 ops/s
# Warmup Iteration  25: 1315949.258 ops/s
# Warmup Iteration  26: 1314300.900 ops/s
# Warmup Iteration  27: 1314095.261 ops/s
# Warmup Iteration  28: 1322377.932 ops/s
# Warmup Iteration  29: 1321385.195 ops/s
# Warmup Iteration  30: 1314068.137 ops/s
Iteration   1: 1317700.918 ops/s
Iteration   2: 1320915.428 ops/s
Iteration   3: 1303408.182 ops/s
Iteration   4: 1322183.502 ops/s
Iteration   5: 1315253.051 ops/s
Iteration   6: 1315915.431 ops/s
Iteration   7: 1317053.724 ops/s
Iteration   8: 1315363.513 ops/s
Iteration   9: 1319133.270 ops/s
Iteration  10: 1321981.246 ops/s
Iteration  11: 1289763.064 ops/s
Iteration  12: 1316263.989 ops/s
Iteration  13: 1318431.576 ops/s
Iteration  14: 1320277.081 ops/s
Iteration  15: 1311181.345 ops/s
Iteration  16: 1316617.030 ops/s
Iteration  17: 1317055.375 ops/s
Iteration  18: 1316221.721 ops/s
Iteration  19: 1307619.130 ops/s
Iteration  20: 1318148.963 ops/s
Iteration  21: 1321266.894 ops/s
Iteration  22: 1318946.628 ops/s
Iteration  23: 1312534.989 ops/s
Iteration  24: 1321790.710 ops/s
Iteration  25: 1316669.398 ops/s
Iteration  26: 1325499.647 ops/s
Iteration  27: 1325392.768 ops/s
Iteration  28: 1321253.122 ops/s
Iteration  29: 1314929.058 ops/s
Iteration  30: 1312936.155 ops/s


Result "org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_forEachKeyValue":
  1316390.230 ±(99.9%) 4605.867 ops/s [Average]
  (min, avg, max) = (1289763.064, 1316390.230, 1325499.647), stdev = 6893.845
  CI (99.9%): [1311784.364, 1320996.097] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
FastListMultimapTest._Benchmark.benchmark_forEachKeyValue  thrpt   30  1316390.230 ± 4605.867  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_forEachValue$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_forEachValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 881180.548 ops/s
# Warmup Iteration   2: 1809367.906 ops/s
# Warmup Iteration   3: 2059061.073 ops/s
# Warmup Iteration   4: 2067873.961 ops/s
# Warmup Iteration   5: 1689970.638 ops/s
# Warmup Iteration   6: 2068252.403 ops/s
# Warmup Iteration   7: 2064209.760 ops/s
# Warmup Iteration   8: 2070099.179 ops/s
# Warmup Iteration   9: 2072880.116 ops/s
# Warmup Iteration  10: 2070121.880 ops/s
# Warmup Iteration  11: 2066589.996 ops/s
# Warmup Iteration  12: 2068901.135 ops/s
# Warmup Iteration  13: 2065690.165 ops/s
# Warmup Iteration  14: 2070385.958 ops/s
# Warmup Iteration  15: 2070382.659 ops/s
# Warmup Iteration  16: 2066712.322 ops/s
# Warmup Iteration  17: 2048042.406 ops/s
# Warmup Iteration  18: 2050838.225 ops/s
# Warmup Iteration  19: 2067374.807 ops/s
# Warmup Iteration  20: 2065869.184 ops/s
# Warmup Iteration  21: 2053217.429 ops/s
# Warmup Iteration  22: 2075802.408 ops/s
# Warmup Iteration  23: 2071546.691 ops/s
# Warmup Iteration  24: 2071284.989 ops/s
# Warmup Iteration  25: 2068831.236 ops/s
# Warmup Iteration  26: 2075161.280 ops/s
# Warmup Iteration  27: 2068930.756 ops/s
# Warmup Iteration  28: 2069503.139 ops/s
# Warmup Iteration  29: 2073563.958 ops/s
# Warmup Iteration  30: 2072249.414 ops/s
Iteration   1: 2072628.069 ops/s
Iteration   2: 2058934.994 ops/s
Iteration   3: 2066056.166 ops/s
Iteration   4: 2071589.960 ops/s
Iteration   5: 2074811.865 ops/s
Iteration   6: 2075186.196 ops/s
Iteration   7: 2073745.503 ops/s
Iteration   8: 2066028.836 ops/s
Iteration   9: 2071162.626 ops/s
Iteration  10: 2063733.917 ops/s
Iteration  11: 2073379.735 ops/s
Iteration  12: 2071630.799 ops/s
Iteration  13: 2066447.341 ops/s
Iteration  14: 2076619.761 ops/s
Iteration  15: 2067285.507 ops/s
Iteration  16: 2067953.640 ops/s
Iteration  17: 2073067.206 ops/s
Iteration  18: 2071022.317 ops/s
Iteration  19: 2071435.539 ops/s
Iteration  20: 2069662.298 ops/s
Iteration  21: 2067453.783 ops/s
Iteration  22: 2070861.644 ops/s
Iteration  23: 2073009.603 ops/s
Iteration  24: 2078182.589 ops/s
Iteration  25: 2067209.432 ops/s
Iteration  26: 2073492.652 ops/s
Iteration  27: 2073763.314 ops/s
Iteration  28: 2066249.293 ops/s
Iteration  29: 2066297.981 ops/s
Iteration  30: 2070107.887 ops/s


Result "org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_forEachValue":
  2070300.348 ±(99.9%) 2788.193 ops/s [Average]
  (min, avg, max) = (2058934.994, 2070300.348, 2078182.589), stdev = 4173.236
  CI (99.9%): [2067512.155, 2073088.541] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
FastListMultimapTest._Benchmark.benchmark_forEachValue  thrpt   30  2070300.348 ± 2788.193  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_getIfAbsentPutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_getIfAbsentPutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 219512.345 ops/s
# Warmup Iteration   2: 289266.569 ops/s
# Warmup Iteration   3: 370215.327 ops/s
# Warmup Iteration   4: 367778.797 ops/s
# Warmup Iteration   5: 368244.241 ops/s
# Warmup Iteration   6: 368659.478 ops/s
# Warmup Iteration   7: 369116.914 ops/s
# Warmup Iteration   8: 356005.918 ops/s
# Warmup Iteration   9: 319631.911 ops/s
# Warmup Iteration  10: 369221.273 ops/s
# Warmup Iteration  11: 369158.874 ops/s
# Warmup Iteration  12: 369256.556 ops/s
# Warmup Iteration  13: 368790.655 ops/s
# Warmup Iteration  14: 369306.481 ops/s
# Warmup Iteration  15: 370204.969 ops/s
# Warmup Iteration  16: 369448.121 ops/s
# Warmup Iteration  17: 384217.861 ops/s
# Warmup Iteration  18: 384827.358 ops/s
# Warmup Iteration  19: 384344.765 ops/s
# Warmup Iteration  20: 384005.001 ops/s
# Warmup Iteration  21: 384268.836 ops/s
# Warmup Iteration  22: 384208.965 ops/s
# Warmup Iteration  23: 384319.360 ops/s
# Warmup Iteration  24: 383861.891 ops/s
# Warmup Iteration  25: 383571.358 ops/s
# Warmup Iteration  26: 383452.282 ops/s
# Warmup Iteration  27: 384265.529 ops/s
# Warmup Iteration  28: 384242.285 ops/s
# Warmup Iteration  29: 383360.052 ops/s
# Warmup Iteration  30: 383540.316 ops/s
Iteration   1: 382835.583 ops/s
Iteration   2: 385121.365 ops/s
Iteration   3: 385062.730 ops/s
Iteration   4: 384099.450 ops/s
Iteration   5: 384269.507 ops/s
Iteration   6: 383794.383 ops/s
Iteration   7: 384153.609 ops/s
Iteration   8: 385080.604 ops/s
Iteration   9: 382751.993 ops/s
Iteration  10: 383027.723 ops/s
Iteration  11: 384253.086 ops/s
Iteration  12: 383765.575 ops/s
Iteration  13: 383303.862 ops/s
Iteration  14: 383764.582 ops/s
Iteration  15: 384755.190 ops/s
Iteration  16: 382587.088 ops/s
Iteration  17: 383895.304 ops/s
Iteration  18: 384429.503 ops/s
Iteration  19: 378685.077 ops/s
Iteration  20: 383080.801 ops/s
Iteration  21: 383858.069 ops/s
Iteration  22: 383629.898 ops/s
Iteration  23: 382685.079 ops/s
Iteration  24: 385355.677 ops/s
Iteration  25: 384093.062 ops/s
Iteration  26: 384210.060 ops/s
Iteration  27: 383793.016 ops/s
Iteration  28: 382481.394 ops/s
Iteration  29: 383945.486 ops/s
Iteration  30: 385267.068 ops/s


Result "org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_getIfAbsentPutAll":
  383734.527 ±(99.9%) 838.668 ops/s [Average]
  (min, avg, max) = (378685.077, 383734.527, 385355.677), stdev = 1255.279
  CI (99.9%): [382895.859, 384573.196] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score     Error  Units
FastListMultimapTest._Benchmark.benchmark_getIfAbsentPutAll  thrpt   30  383734.527 ± 838.668  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 302824.947 ops/s
# Warmup Iteration   2: 806962.534 ops/s
# Warmup Iteration   3: 836464.024 ops/s
# Warmup Iteration   4: 702745.341 ops/s
# Warmup Iteration   5: 838230.650 ops/s
# Warmup Iteration   6: 838824.527 ops/s
# Warmup Iteration   7: 835815.928 ops/s
# Warmup Iteration   8: 838180.813 ops/s
# Warmup Iteration   9: 836127.536 ops/s
# Warmup Iteration  10: 838505.321 ops/s
# Warmup Iteration  11: 835548.078 ops/s
# Warmup Iteration  12: 838230.098 ops/s
# Warmup Iteration  13: 836954.385 ops/s
# Warmup Iteration  14: 838148.639 ops/s
# Warmup Iteration  15: 838978.513 ops/s
# Warmup Iteration  16: 838152.727 ops/s
# Warmup Iteration  17: 840450.273 ops/s
# Warmup Iteration  18: 838730.900 ops/s
# Warmup Iteration  19: 836492.036 ops/s
# Warmup Iteration  20: 831507.829 ops/s
# Warmup Iteration  21: 836763.100 ops/s
# Warmup Iteration  22: 837791.041 ops/s
# Warmup Iteration  23: 835711.834 ops/s
# Warmup Iteration  24: 836437.964 ops/s
# Warmup Iteration  25: 829231.538 ops/s
# Warmup Iteration  26: 835183.577 ops/s
# Warmup Iteration  27: 839038.358 ops/s
# Warmup Iteration  28: 831668.641 ops/s
# Warmup Iteration  29: 837579.901 ops/s
# Warmup Iteration  30: 832891.894 ops/s
Iteration   1: 837731.908 ops/s
Iteration   2: 837146.085 ops/s
Iteration   3: 838443.845 ops/s
Iteration   4: 836159.296 ops/s
Iteration   5: 835914.988 ops/s
Iteration   6: 840477.177 ops/s
Iteration   7: 841307.678 ops/s
Iteration   8: 838920.067 ops/s
Iteration   9: 837079.189 ops/s
Iteration  10: 839987.610 ops/s
Iteration  11: 836401.493 ops/s
Iteration  12: 837190.742 ops/s
Iteration  13: 841261.521 ops/s
Iteration  14: 837706.710 ops/s
Iteration  15: 836884.173 ops/s
Iteration  16: 836709.237 ops/s
Iteration  17: 838456.351 ops/s
Iteration  18: 837496.507 ops/s
Iteration  19: 840040.702 ops/s
Iteration  20: 837796.201 ops/s
Iteration  21: 834986.227 ops/s
Iteration  22: 837430.036 ops/s
Iteration  23: 838171.120 ops/s
Iteration  24: 838565.478 ops/s
Iteration  25: 837772.561 ops/s
Iteration  26: 840414.105 ops/s
Iteration  27: 839824.529 ops/s
Iteration  28: 840085.824 ops/s
Iteration  29: 838175.988 ops/s
Iteration  30: 836599.827 ops/s


Result "org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_isEmpty":
  838171.239 ±(99.9%) 1091.465 ops/s [Average]
  (min, avg, max) = (834986.227, 838171.239, 841307.678), stdev = 1633.654
  CI (99.9%): [837079.774, 839262.704] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score      Error  Units
FastListMultimapTest._Benchmark.benchmark_isEmpty  thrpt   30  838171.239 ± 1091.465  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_keyBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_keyBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1218124.434 ops/s
# Warmup Iteration   2: 2751487.917 ops/s
# Warmup Iteration   3: 2901271.004 ops/s
# Warmup Iteration   4: 2844225.240 ops/s
# Warmup Iteration   5: 2455162.093 ops/s
# Warmup Iteration   6: 2931606.997 ops/s
# Warmup Iteration   7: 2908579.815 ops/s
# Warmup Iteration   8: 2929933.152 ops/s
# Warmup Iteration   9: 2935092.399 ops/s
# Warmup Iteration  10: 2928315.793 ops/s
# Warmup Iteration  11: 2929961.507 ops/s
# Warmup Iteration  12: 2922801.513 ops/s
# Warmup Iteration  13: 2921327.834 ops/s
# Warmup Iteration  14: 2924034.494 ops/s
# Warmup Iteration  15: 2938054.867 ops/s
# Warmup Iteration  16: 2920081.320 ops/s
# Warmup Iteration  17: 2918156.949 ops/s
# Warmup Iteration  18: 2942989.840 ops/s
# Warmup Iteration  19: 2935338.160 ops/s
# Warmup Iteration  20: 2899726.242 ops/s
# Warmup Iteration  21: 2907124.589 ops/s
# Warmup Iteration  22: 2904497.960 ops/s
# Warmup Iteration  23: 2932219.864 ops/s
# Warmup Iteration  24: 2931299.097 ops/s
# Warmup Iteration  25: 2920891.046 ops/s
# Warmup Iteration  26: 2925832.787 ops/s
# Warmup Iteration  27: 2927349.893 ops/s
# Warmup Iteration  28: 2913969.988 ops/s
# Warmup Iteration  29: 2940089.256 ops/s
# Warmup Iteration  30: 2919211.253 ops/s
Iteration   1: 2924491.117 ops/s
Iteration   2: 2923389.558 ops/s
Iteration   3: 2937385.793 ops/s
Iteration   4: 2916039.121 ops/s
Iteration   5: 2911370.334 ops/s
Iteration   6: 2925855.396 ops/s
Iteration   7: 2926985.276 ops/s
Iteration   8: 2924954.504 ops/s
Iteration   9: 2916492.655 ops/s
Iteration  10: 2919424.551 ops/s
Iteration  11: 2928842.615 ops/s
Iteration  12: 2928889.719 ops/s
Iteration  13: 2925435.190 ops/s
Iteration  14: 2928632.424 ops/s
Iteration  15: 2921610.663 ops/s
Iteration  16: 2934968.942 ops/s
Iteration  17: 2933892.606 ops/s
Iteration  18: 2924720.802 ops/s
Iteration  19: 2902992.872 ops/s
Iteration  20: 2929074.188 ops/s
Iteration  21: 2940874.696 ops/s
Iteration  22: 2925406.487 ops/s
Iteration  23: 2913421.388 ops/s
Iteration  24: 2920316.028 ops/s
Iteration  25: 2907301.792 ops/s
Iteration  26: 2919327.870 ops/s
Iteration  27: 2933599.819 ops/s
Iteration  28: 2922148.873 ops/s
Iteration  29: 2919120.775 ops/s
Iteration  30: 2927120.125 ops/s


Result "org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_keyBag":
  2923802.873 ±(99.9%) 5680.524 ops/s [Average]
  (min, avg, max) = (2902992.872, 2923802.873, 2940874.696), stdev = 8502.341
  CI (99.9%): [2918122.349, 2929483.396] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
FastListMultimapTest._Benchmark.benchmark_keyBag  thrpt   30  2923802.873 ± 5680.524  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_keySet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_keySet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 265795.157 ops/s
# Warmup Iteration   2: 299299.822 ops/s
# Warmup Iteration   3: 396936.415 ops/s
# Warmup Iteration   4: 396311.621 ops/s
# Warmup Iteration   5: 394311.249 ops/s
# Warmup Iteration   6: 397930.913 ops/s
# Warmup Iteration   7: 397848.168 ops/s
# Warmup Iteration   8: 396805.604 ops/s
# Warmup Iteration   9: 398288.127 ops/s
# Warmup Iteration  10: 396600.889 ops/s
# Warmup Iteration  11: 344909.572 ops/s
# Warmup Iteration  12: 386876.005 ops/s
# Warmup Iteration  13: 397972.125 ops/s
# Warmup Iteration  14: 397952.548 ops/s
# Warmup Iteration  15: 398086.630 ops/s
# Warmup Iteration  16: 397926.453 ops/s
# Warmup Iteration  17: 415688.632 ops/s
# Warmup Iteration  18: 417246.436 ops/s
# Warmup Iteration  19: 416350.505 ops/s
# Warmup Iteration  20: 416840.181 ops/s
# Warmup Iteration  21: 417689.341 ops/s
# Warmup Iteration  22: 416789.635 ops/s
# Warmup Iteration  23: 417079.113 ops/s
# Warmup Iteration  24: 417311.258 ops/s
# Warmup Iteration  25: 418163.072 ops/s
# Warmup Iteration  26: 417475.304 ops/s
# Warmup Iteration  27: 417119.735 ops/s
# Warmup Iteration  28: 417810.747 ops/s
# Warmup Iteration  29: 417927.734 ops/s
# Warmup Iteration  30: 416992.930 ops/s
Iteration   1: 416013.324 ops/s
Iteration   2: 416129.300 ops/s
Iteration   3: 415948.228 ops/s
Iteration   4: 417837.679 ops/s
Iteration   5: 417482.546 ops/s
Iteration   6: 417080.736 ops/s
Iteration   7: 416276.053 ops/s
Iteration   8: 416357.602 ops/s
Iteration   9: 414935.695 ops/s
Iteration  10: 415377.313 ops/s
Iteration  11: 418612.378 ops/s
Iteration  12: 418220.934 ops/s
Iteration  13: 416315.989 ops/s
Iteration  14: 417840.391 ops/s
Iteration  15: 418382.688 ops/s
Iteration  16: 418307.959 ops/s
Iteration  17: 417465.345 ops/s
Iteration  18: 411007.251 ops/s
Iteration  19: 418237.927 ops/s
Iteration  20: 420346.942 ops/s
Iteration  21: 417342.112 ops/s
Iteration  22: 416698.400 ops/s
Iteration  23: 411626.078 ops/s
Iteration  24: 417911.706 ops/s
Iteration  25: 415336.960 ops/s
Iteration  26: 416755.416 ops/s
Iteration  27: 417553.461 ops/s
Iteration  28: 415357.045 ops/s
Iteration  29: 416571.804 ops/s
Iteration  30: 416468.029 ops/s


Result "org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_keySet":
  416659.910 ±(99.9%) 1253.659 ops/s [Average]
  (min, avg, max) = (411007.251, 416659.910, 420346.942), stdev = 1876.417
  CI (99.9%): [415406.251, 417913.568] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score      Error  Units
FastListMultimapTest._Benchmark.benchmark_keySet  thrpt   30  416659.910 ± 1253.659  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_keyValuePairsView$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_keyValuePairsView

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 507366.864 ops/s
# Warmup Iteration   2: 1026224.904 ops/s
# Warmup Iteration   3: 1174351.908 ops/s
# Warmup Iteration   4: 1177686.243 ops/s
# Warmup Iteration   5: 972071.887 ops/s
# Warmup Iteration   6: 1185416.883 ops/s
# Warmup Iteration   7: 1173398.225 ops/s
# Warmup Iteration   8: 1183444.540 ops/s
# Warmup Iteration   9: 1180954.311 ops/s
# Warmup Iteration  10: 1183353.652 ops/s
# Warmup Iteration  11: 1180927.881 ops/s
# Warmup Iteration  12: 1181850.094 ops/s
# Warmup Iteration  13: 1185043.764 ops/s
# Warmup Iteration  14: 1182526.237 ops/s
# Warmup Iteration  15: 1183015.217 ops/s
# Warmup Iteration  16: 1181475.408 ops/s
# Warmup Iteration  17: 1180761.908 ops/s
# Warmup Iteration  18: 1182121.689 ops/s
# Warmup Iteration  19: 1180934.397 ops/s
# Warmup Iteration  20: 1182645.294 ops/s
# Warmup Iteration  21: 1170628.697 ops/s
# Warmup Iteration  22: 1184782.819 ops/s
# Warmup Iteration  23: 1184133.510 ops/s
# Warmup Iteration  24: 1182415.352 ops/s
# Warmup Iteration  25: 1181898.196 ops/s
# Warmup Iteration  26: 1182577.070 ops/s
# Warmup Iteration  27: 1184162.189 ops/s
# Warmup Iteration  28: 1180307.319 ops/s
# Warmup Iteration  29: 1164648.924 ops/s
# Warmup Iteration  30: 1183669.091 ops/s
Iteration   1: 1186101.334 ops/s
Iteration   2: 1184222.018 ops/s
Iteration   3: 1184749.941 ops/s
Iteration   4: 1184000.100 ops/s
Iteration   5: 1183415.726 ops/s
Iteration   6: 1182368.990 ops/s
Iteration   7: 1177219.990 ops/s
Iteration   8: 1181518.775 ops/s
Iteration   9: 1182992.942 ops/s
Iteration  10: 1184876.082 ops/s
Iteration  11: 1181043.738 ops/s
Iteration  12: 1180599.973 ops/s
Iteration  13: 1186416.402 ops/s
Iteration  14: 1182788.383 ops/s
Iteration  15: 1183589.268 ops/s
Iteration  16: 1184330.677 ops/s
Iteration  17: 1181555.517 ops/s
Iteration  18: 1180470.996 ops/s
Iteration  19: 1186190.950 ops/s
Iteration  20: 1182648.902 ops/s
Iteration  21: 1184869.756 ops/s
Iteration  22: 1179438.286 ops/s
Iteration  23: 1182636.508 ops/s
Iteration  24: 1181704.281 ops/s
Iteration  25: 1184361.013 ops/s
Iteration  26: 1180084.134 ops/s
Iteration  27: 1179118.136 ops/s
Iteration  28: 1183914.022 ops/s
Iteration  29: 1182506.408 ops/s
Iteration  30: 1181353.398 ops/s


Result "org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_keyValuePairsView":
  1182702.888 ±(99.9%) 1476.510 ops/s [Average]
  (min, avg, max) = (1177219.990, 1182702.888, 1186416.402), stdev = 2209.971
  CI (99.9%): [1181226.378, 1184179.398] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
FastListMultimapTest._Benchmark.benchmark_keyValuePairsView  thrpt   30  1182702.888 ± 1476.510  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_keysView$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_keysView

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 795754.326 ops/s
# Warmup Iteration   2: 1440725.951 ops/s
# Warmup Iteration   3: 1701193.964 ops/s
# Warmup Iteration   4: 1705083.945 ops/s
# Warmup Iteration   5: 1712284.174 ops/s
# Warmup Iteration   6: 1397350.802 ops/s
# Warmup Iteration   7: 1705895.868 ops/s
# Warmup Iteration   8: 1710835.459 ops/s
# Warmup Iteration   9: 1699742.265 ops/s
# Warmup Iteration  10: 1713044.106 ops/s
# Warmup Iteration  11: 1707962.704 ops/s
# Warmup Iteration  12: 1715331.445 ops/s
# Warmup Iteration  13: 1718005.549 ops/s
# Warmup Iteration  14: 1719055.813 ops/s
# Warmup Iteration  15: 1712474.952 ops/s
# Warmup Iteration  16: 1720713.235 ops/s
# Warmup Iteration  17: 1707108.236 ops/s
# Warmup Iteration  18: 1701456.488 ops/s
# Warmup Iteration  19: 1711583.473 ops/s
# Warmup Iteration  20: 1709553.449 ops/s
# Warmup Iteration  21: 1715122.844 ops/s
# Warmup Iteration  22: 1714158.671 ops/s
# Warmup Iteration  23: 1706046.582 ops/s
# Warmup Iteration  24: 1700163.263 ops/s
# Warmup Iteration  25: 1694958.246 ops/s
# Warmup Iteration  26: 1697977.736 ops/s
# Warmup Iteration  27: 1714529.535 ops/s
# Warmup Iteration  28: 1707438.354 ops/s
# Warmup Iteration  29: 1715201.748 ops/s
# Warmup Iteration  30: 1703442.728 ops/s
Iteration   1: 1716662.986 ops/s
Iteration   2: 1709409.565 ops/s
Iteration   3: 1706685.722 ops/s
Iteration   4: 1715039.488 ops/s
Iteration   5: 1720106.498 ops/s
Iteration   6: 1707617.695 ops/s
Iteration   7: 1688932.777 ops/s
Iteration   8: 1709522.239 ops/s
Iteration   9: 1722553.199 ops/s
Iteration  10: 1704700.377 ops/s
Iteration  11: 1700599.564 ops/s
Iteration  12: 1700621.683 ops/s
Iteration  13: 1713674.066 ops/s
Iteration  14: 1708387.695 ops/s
Iteration  15: 1710687.045 ops/s
Iteration  16: 1705130.306 ops/s
Iteration  17: 1700964.394 ops/s
Iteration  18: 1713346.521 ops/s
Iteration  19: 1712935.770 ops/s
Iteration  20: 1692963.327 ops/s
Iteration  21: 1711272.890 ops/s
Iteration  22: 1702019.387 ops/s
Iteration  23: 1712892.323 ops/s
Iteration  24: 1705980.349 ops/s
Iteration  25: 1713372.543 ops/s
Iteration  26: 1708288.821 ops/s
Iteration  27: 1712939.165 ops/s
Iteration  28: 1708345.843 ops/s
Iteration  29: 1712845.271 ops/s
Iteration  30: 1711355.405 ops/s


Result "org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_keysView":
  1708661.764 ±(99.9%) 4802.947 ops/s [Average]
  (min, avg, max) = (1688932.777, 1708661.764, 1722553.199), stdev = 7188.826
  CI (99.9%): [1703858.817, 1713464.711] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
FastListMultimapTest._Benchmark.benchmark_keysView  thrpt   30  1708661.764 ± 4802.947  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_keysWithMultiValuesView$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_keysWithMultiValuesView

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 336038.157 ops/s
# Warmup Iteration   2: 689482.426 ops/s
# Warmup Iteration   3: 779302.275 ops/s
# Warmup Iteration   4: 785316.778 ops/s
# Warmup Iteration   5: 650423.574 ops/s
# Warmup Iteration   6: 789115.766 ops/s
# Warmup Iteration   7: 787507.853 ops/s
# Warmup Iteration   8: 786894.452 ops/s
# Warmup Iteration   9: 788719.681 ops/s
# Warmup Iteration  10: 788362.899 ops/s
# Warmup Iteration  11: 782684.027 ops/s
# Warmup Iteration  12: 787102.976 ops/s
# Warmup Iteration  13: 787149.680 ops/s
# Warmup Iteration  14: 787540.667 ops/s
# Warmup Iteration  15: 787270.131 ops/s
# Warmup Iteration  16: 789301.787 ops/s
# Warmup Iteration  17: 786953.658 ops/s
# Warmup Iteration  18: 787051.915 ops/s
# Warmup Iteration  19: 790629.699 ops/s
# Warmup Iteration  20: 789798.410 ops/s
# Warmup Iteration  21: 789083.242 ops/s
# Warmup Iteration  22: 790000.794 ops/s
# Warmup Iteration  23: 788540.441 ops/s
# Warmup Iteration  24: 789614.672 ops/s
# Warmup Iteration  25: 787079.690 ops/s
# Warmup Iteration  26: 788996.648 ops/s
# Warmup Iteration  27: 786713.303 ops/s
# Warmup Iteration  28: 787481.141 ops/s
# Warmup Iteration  29: 789103.636 ops/s
# Warmup Iteration  30: 788617.450 ops/s
Iteration   1: 788670.403 ops/s
Iteration   2: 787429.646 ops/s
Iteration   3: 789568.910 ops/s
Iteration   4: 791519.854 ops/s
Iteration   5: 788075.812 ops/s
Iteration   6: 789809.948 ops/s
Iteration   7: 789292.406 ops/s
Iteration   8: 786613.223 ops/s
Iteration   9: 790197.876 ops/s
Iteration  10: 791488.187 ops/s
Iteration  11: 786476.218 ops/s
Iteration  12: 786982.281 ops/s
Iteration  13: 790173.058 ops/s
Iteration  14: 789121.163 ops/s
Iteration  15: 788883.709 ops/s
Iteration  16: 787445.161 ops/s
Iteration  17: 789459.745 ops/s
Iteration  18: 786405.730 ops/s
Iteration  19: 789808.410 ops/s
Iteration  20: 788763.809 ops/s
Iteration  21: 774769.960 ops/s
Iteration  22: 787335.550 ops/s
Iteration  23: 787495.642 ops/s
Iteration  24: 788205.494 ops/s
Iteration  25: 789801.615 ops/s
Iteration  26: 788260.974 ops/s
Iteration  27: 787913.871 ops/s
Iteration  28: 791836.331 ops/s
Iteration  29: 789213.298 ops/s
Iteration  30: 788156.208 ops/s


Result "org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_keysWithMultiValuesView":
  788305.816 ±(99.9%) 1965.380 ops/s [Average]
  (min, avg, max) = (774769.960, 788305.816, 791836.331), stdev = 2941.688
  CI (99.9%): [786340.436, 790271.196] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
FastListMultimapTest._Benchmark.benchmark_keysWithMultiValuesView  thrpt   30  788305.816 ± 1965.380  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_multiValuesView$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_multiValuesView

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 781402.405 ops/s
# Warmup Iteration   2: 1594425.859 ops/s
# Warmup Iteration   3: 1795781.227 ops/s
# Warmup Iteration   4: 1807937.777 ops/s
# Warmup Iteration   5: 1482125.186 ops/s
# Warmup Iteration   6: 1806374.283 ops/s
# Warmup Iteration   7: 1808513.391 ops/s
# Warmup Iteration   8: 1809329.956 ops/s
# Warmup Iteration   9: 1810003.150 ops/s
# Warmup Iteration  10: 1810850.031 ops/s
# Warmup Iteration  11: 1809259.408 ops/s
# Warmup Iteration  12: 1805357.487 ops/s
# Warmup Iteration  13: 1807647.721 ops/s
# Warmup Iteration  14: 1802971.361 ops/s
# Warmup Iteration  15: 1807265.264 ops/s
# Warmup Iteration  16: 1808525.548 ops/s
# Warmup Iteration  17: 1802776.006 ops/s
# Warmup Iteration  18: 1808930.714 ops/s
# Warmup Iteration  19: 1806114.185 ops/s
# Warmup Iteration  20: 1807416.459 ops/s
# Warmup Iteration  21: 1802219.592 ops/s
# Warmup Iteration  22: 1790367.631 ops/s
# Warmup Iteration  23: 1808525.712 ops/s
# Warmup Iteration  24: 1801199.417 ops/s
# Warmup Iteration  25: 1789406.670 ops/s
# Warmup Iteration  26: 1802949.716 ops/s
# Warmup Iteration  27: 1778008.911 ops/s
# Warmup Iteration  28: 1804950.956 ops/s
# Warmup Iteration  29: 1808727.280 ops/s
# Warmup Iteration  30: 1793225.605 ops/s
Iteration   1: 1794036.085 ops/s
Iteration   2: 1778145.066 ops/s
Iteration   3: 1812725.464 ops/s
Iteration   4: 1802737.751 ops/s
Iteration   5: 1808265.832 ops/s
Iteration   6: 1801042.123 ops/s
Iteration   7: 1808980.553 ops/s
Iteration   8: 1806614.173 ops/s
Iteration   9: 1807168.329 ops/s
Iteration  10: 1804437.261 ops/s
Iteration  11: 1802536.843 ops/s
Iteration  12: 1806664.844 ops/s
Iteration  13: 1809058.831 ops/s
Iteration  14: 1774067.860 ops/s
Iteration  15: 1806294.061 ops/s
Iteration  16: 1804703.306 ops/s
Iteration  17: 1803957.432 ops/s
Iteration  18: 1806580.321 ops/s
Iteration  19: 1804478.310 ops/s
Iteration  20: 1805332.127 ops/s
Iteration  21: 1808175.204 ops/s
Iteration  22: 1805519.262 ops/s
Iteration  23: 1809274.050 ops/s
Iteration  24: 1804740.908 ops/s
Iteration  25: 1805031.769 ops/s
Iteration  26: 1808472.691 ops/s
Iteration  27: 1809897.250 ops/s
Iteration  28: 1808174.243 ops/s
Iteration  29: 1799993.034 ops/s
Iteration  30: 1806008.266 ops/s


Result "org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_multiValuesView":
  1803770.442 ±(99.9%) 5547.504 ops/s [Average]
  (min, avg, max) = (1774067.860, 1803770.442, 1812725.464), stdev = 8303.244
  CI (99.9%): [1798222.937, 1809317.946] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
FastListMultimapTest._Benchmark.benchmark_multiValuesView  thrpt   30  1803770.442 ± 5547.504  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_newEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_newEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 668290.993 ops/s
# Warmup Iteration   2: 1844742.374 ops/s
# Warmup Iteration   3: 1706868.054 ops/s
# Warmup Iteration   4: 1720633.937 ops/s
# Warmup Iteration   5: 1874964.521 ops/s
# Warmup Iteration   6: 1870157.715 ops/s
# Warmup Iteration   7: 1867726.744 ops/s
# Warmup Iteration   8: 1869377.967 ops/s
# Warmup Iteration   9: 1867749.432 ops/s
# Warmup Iteration  10: 1869134.355 ops/s
# Warmup Iteration  11: 1874812.044 ops/s
# Warmup Iteration  12: 1866920.146 ops/s
# Warmup Iteration  13: 1867238.415 ops/s
# Warmup Iteration  14: 1872425.504 ops/s
# Warmup Iteration  15: 1873719.975 ops/s
# Warmup Iteration  16: 1860382.589 ops/s
# Warmup Iteration  17: 1843300.194 ops/s
# Warmup Iteration  18: 1856293.762 ops/s
# Warmup Iteration  19: 1853643.154 ops/s
# Warmup Iteration  20: 1857171.640 ops/s
# Warmup Iteration  21: 1851891.960 ops/s
# Warmup Iteration  22: 1850255.313 ops/s
# Warmup Iteration  23: 1849937.015 ops/s
# Warmup Iteration  24: 1847967.490 ops/s
# Warmup Iteration  25: 1828566.240 ops/s
# Warmup Iteration  26: 1855395.473 ops/s
# Warmup Iteration  27: 1842531.503 ops/s
# Warmup Iteration  28: 1847891.842 ops/s
# Warmup Iteration  29: 1841890.398 ops/s
# Warmup Iteration  30: 1852248.647 ops/s
Iteration   1: 1849942.143 ops/s
Iteration   2: 1851622.922 ops/s
Iteration   3: 1846710.988 ops/s
Iteration   4: 1854316.595 ops/s
Iteration   5: 1846573.201 ops/s
Iteration   6: 1860579.103 ops/s
Iteration   7: 1845910.004 ops/s
Iteration   8: 1846845.758 ops/s
Iteration   9: 1850904.731 ops/s
Iteration  10: 1844137.396 ops/s
Iteration  11: 1854147.179 ops/s
Iteration  12: 1859342.431 ops/s
Iteration  13: 1842536.786 ops/s
Iteration  14: 1843910.930 ops/s
Iteration  15: 1849099.989 ops/s
Iteration  16: 1849158.350 ops/s
Iteration  17: 1851378.094 ops/s
Iteration  18: 1853215.800 ops/s
Iteration  19: 1828218.181 ops/s
Iteration  20: 1849303.609 ops/s
Iteration  21: 1854285.403 ops/s
Iteration  22: 1841437.311 ops/s
Iteration  23: 1846753.852 ops/s
Iteration  24: 1852467.764 ops/s
Iteration  25: 1852629.017 ops/s
Iteration  26: 1856105.671 ops/s
Iteration  27: 1857392.931 ops/s
Iteration  28: 1851025.594 ops/s
Iteration  29: 1859347.312 ops/s
Iteration  30: 1857805.536 ops/s


Result "org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_newEmpty":
  1850236.819 ±(99.9%) 4401.069 ops/s [Average]
  (min, avg, max) = (1828218.181, 1850236.819, 1860579.103), stdev = 6587.313
  CI (99.9%): [1845835.751, 1854637.888] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
FastListMultimapTest._Benchmark.benchmark_newEmpty  thrpt   30  1850236.819 ± 4401.069  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_newMultimapFromPairs$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_newMultimapFromPairs

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 736025.272 ops/s
# Warmup Iteration   2: 1562325.335 ops/s
# Warmup Iteration   3: 1685636.531 ops/s
# Warmup Iteration   4: 1692007.349 ops/s
# Warmup Iteration   5: 1385440.015 ops/s
# Warmup Iteration   6: 1694177.161 ops/s
# Warmup Iteration   7: 1690063.641 ops/s
# Warmup Iteration   8: 1704426.397 ops/s
# Warmup Iteration   9: 1683782.443 ops/s
# Warmup Iteration  10: 1680958.401 ops/s
# Warmup Iteration  11: 1701216.360 ops/s
# Warmup Iteration  12: 1698329.283 ops/s
# Warmup Iteration  13: 1702118.508 ops/s
# Warmup Iteration  14: 1693760.781 ops/s
# Warmup Iteration  15: 1700727.564 ops/s
# Warmup Iteration  16: 1695679.516 ops/s
# Warmup Iteration  17: 1696653.420 ops/s
# Warmup Iteration  18: 1696295.324 ops/s
# Warmup Iteration  19: 1697107.583 ops/s
# Warmup Iteration  20: 1702838.300 ops/s
# Warmup Iteration  21: 1699910.919 ops/s
# Warmup Iteration  22: 1706963.545 ops/s
# Warmup Iteration  23: 1698892.924 ops/s
# Warmup Iteration  24: 1706184.837 ops/s
# Warmup Iteration  25: 1687240.425 ops/s
# Warmup Iteration  26: 1696303.228 ops/s
# Warmup Iteration  27: 1696730.297 ops/s
# Warmup Iteration  28: 1697088.015 ops/s
# Warmup Iteration  29: 1690999.359 ops/s
# Warmup Iteration  30: 1702351.900 ops/s
Iteration   1: 1699271.177 ops/s
Iteration   2: 1690912.913 ops/s
Iteration   3: 1695482.500 ops/s
Iteration   4: 1700426.425 ops/s
Iteration   5: 1695061.681 ops/s
Iteration   6: 1700495.374 ops/s
Iteration   7: 1691076.203 ops/s
Iteration   8: 1690282.026 ops/s
Iteration   9: 1696163.226 ops/s
Iteration  10: 1694129.569 ops/s
Iteration  11: 1703650.615 ops/s
Iteration  12: 1704164.607 ops/s
Iteration  13: 1692462.375 ops/s
Iteration  14: 1700397.844 ops/s
Iteration  15: 1695630.676 ops/s
Iteration  16: 1703169.141 ops/s
Iteration  17: 1692988.755 ops/s
Iteration  18: 1696611.626 ops/s
Iteration  19: 1703695.831 ops/s
Iteration  20: 1696824.338 ops/s
Iteration  21: 1695247.697 ops/s
Iteration  22: 1696371.773 ops/s
Iteration  23: 1699962.816 ops/s
Iteration  24: 1693621.625 ops/s
Iteration  25: 1697945.879 ops/s
Iteration  26: 1702465.129 ops/s
Iteration  27: 1691730.393 ops/s
Iteration  28: 1695609.391 ops/s
Iteration  29: 1695963.464 ops/s
Iteration  30: 1698222.544 ops/s


Result "org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_newMultimapFromPairs":
  1697001.254 ±(99.9%) 2709.115 ops/s [Average]
  (min, avg, max) = (1690282.026, 1697001.254, 1704164.607), stdev = 4054.876
  CI (99.9%): [1694292.139, 1699710.369] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
FastListMultimapTest._Benchmark.benchmark_newMultimapFromPairs  thrpt   30  1697001.254 ± 2709.115  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_notEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_notEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3669229.954 ops/s
# Warmup Iteration   2: 8106139.378 ops/s
# Warmup Iteration   3: 7688884.446 ops/s
# Warmup Iteration   4: 8609399.642 ops/s
# Warmup Iteration   5: 8680197.299 ops/s
# Warmup Iteration   6: 8687012.745 ops/s
# Warmup Iteration   7: 8709173.046 ops/s
# Warmup Iteration   8: 8590894.246 ops/s
# Warmup Iteration   9: 8707140.223 ops/s
# Warmup Iteration  10: 8677075.515 ops/s
# Warmup Iteration  11: 8658649.202 ops/s
# Warmup Iteration  12: 8692403.985 ops/s
# Warmup Iteration  13: 8706036.384 ops/s
# Warmup Iteration  14: 8709338.522 ops/s
# Warmup Iteration  15: 8720786.467 ops/s
# Warmup Iteration  16: 8675858.502 ops/s
# Warmup Iteration  17: 8710891.643 ops/s
# Warmup Iteration  18: 8668185.657 ops/s
# Warmup Iteration  19: 8719102.457 ops/s
# Warmup Iteration  20: 8696118.038 ops/s
# Warmup Iteration  21: 8706313.072 ops/s
# Warmup Iteration  22: 8757030.072 ops/s
# Warmup Iteration  23: 8677339.438 ops/s
# Warmup Iteration  24: 8668506.117 ops/s
# Warmup Iteration  25: 8724473.156 ops/s
# Warmup Iteration  26: 8696248.892 ops/s
# Warmup Iteration  27: 8735392.180 ops/s
# Warmup Iteration  28: 8650178.119 ops/s
# Warmup Iteration  29: 8714739.353 ops/s
# Warmup Iteration  30: 8763507.347 ops/s
Iteration   1: 8681124.857 ops/s
Iteration   2: 8771375.674 ops/s
Iteration   3: 8665496.845 ops/s
Iteration   4: 8742261.260 ops/s
Iteration   5: 8728924.593 ops/s
Iteration   6: 8667192.175 ops/s
Iteration   7: 8671987.475 ops/s
Iteration   8: 8638536.622 ops/s
Iteration   9: 8686911.474 ops/s
Iteration  10: 8628499.947 ops/s
Iteration  11: 8621584.626 ops/s
Iteration  12: 8677635.600 ops/s
Iteration  13: 8770558.680 ops/s
Iteration  14: 8703857.703 ops/s
Iteration  15: 8738042.040 ops/s
Iteration  16: 8613079.129 ops/s
Iteration  17: 8592506.510 ops/s
Iteration  18: 8613097.469 ops/s
Iteration  19: 8627943.473 ops/s
Iteration  20: 8608966.361 ops/s
Iteration  21: 8648583.537 ops/s
Iteration  22: 8708014.843 ops/s
Iteration  23: 8714180.225 ops/s
Iteration  24: 8742198.944 ops/s
Iteration  25: 8625210.311 ops/s
Iteration  26: 8600202.175 ops/s
Iteration  27: 8615282.726 ops/s
Iteration  28: 8657621.951 ops/s
Iteration  29: 8678089.167 ops/s
Iteration  30: 8631909.357 ops/s


Result "org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_notEmpty":
  8669029.192 ±(99.9%) 34865.221 ops/s [Average]
  (min, avg, max) = (8592506.510, 8669029.192, 8771375.674), stdev = 52184.625
  CI (99.9%): [8634163.971, 8703894.413] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
FastListMultimapTest._Benchmark.benchmark_notEmpty  thrpt   30  8669029.192 ± 34865.221  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_pairIterableConstructorTest$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_pairIterableConstructorTest

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 470788.990 ops/s
# Warmup Iteration   2: 1055504.383 ops/s
# Warmup Iteration   3: 1230905.714 ops/s
# Warmup Iteration   4: 1238715.602 ops/s
# Warmup Iteration   5: 1097094.615 ops/s
# Warmup Iteration   6: 1156692.085 ops/s
# Warmup Iteration   7: 1240015.393 ops/s
# Warmup Iteration   8: 1241124.277 ops/s
# Warmup Iteration   9: 1238672.732 ops/s
# Warmup Iteration  10: 1238963.753 ops/s
# Warmup Iteration  11: 1239324.248 ops/s
# Warmup Iteration  12: 1228489.741 ops/s
# Warmup Iteration  13: 1234223.483 ops/s
# Warmup Iteration  14: 1228516.994 ops/s
# Warmup Iteration  15: 1239222.893 ops/s
# Warmup Iteration  16: 1237136.853 ops/s
# Warmup Iteration  17: 1223265.423 ops/s
# Warmup Iteration  18: 1224516.452 ops/s
# Warmup Iteration  19: 1221873.377 ops/s
# Warmup Iteration  20: 1218307.688 ops/s
# Warmup Iteration  21: 1223314.807 ops/s
# Warmup Iteration  22: 1223073.547 ops/s
# Warmup Iteration  23: 1223532.392 ops/s
# Warmup Iteration  24: 1221358.249 ops/s
# Warmup Iteration  25: 1223599.244 ops/s
# Warmup Iteration  26: 1214019.766 ops/s
# Warmup Iteration  27: 1220895.937 ops/s
# Warmup Iteration  28: 1224839.122 ops/s
# Warmup Iteration  29: 1225263.683 ops/s
# Warmup Iteration  30: 1222287.907 ops/s
Iteration   1: 1216416.295 ops/s
Iteration   2: 1216218.180 ops/s
Iteration   3: 1202727.986 ops/s
Iteration   4: 1219926.670 ops/s
Iteration   5: 1218638.133 ops/s
Iteration   6: 1225441.775 ops/s
Iteration   7: 1224271.149 ops/s
Iteration   8: 1226114.335 ops/s
Iteration   9: 1222449.146 ops/s
Iteration  10: 1220079.641 ops/s
Iteration  11: 1223799.567 ops/s
Iteration  12: 1214050.964 ops/s
Iteration  13: 1221526.182 ops/s
Iteration  14: 1221097.318 ops/s
Iteration  15: 1221630.900 ops/s
Iteration  16: 1220410.680 ops/s
Iteration  17: 1206549.162 ops/s
Iteration  18: 1221383.648 ops/s
Iteration  19: 1222406.936 ops/s
Iteration  20: 1223557.077 ops/s
Iteration  21: 1221494.281 ops/s
Iteration  22: 1212803.438 ops/s
Iteration  23: 1224627.654 ops/s
Iteration  24: 1220401.794 ops/s
Iteration  25: 1219498.493 ops/s
Iteration  26: 1224123.181 ops/s
Iteration  27: 1226016.635 ops/s
Iteration  28: 1218663.227 ops/s
Iteration  29: 1220577.625 ops/s
Iteration  30: 1225221.057 ops/s


Result "org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_pairIterableConstructorTest":
  1220070.771 ±(99.9%) 3583.602 ops/s [Average]
  (min, avg, max) = (1202727.986, 1220070.771, 1226114.335), stdev = 5363.767
  CI (99.9%): [1216487.169, 1223654.373] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
FastListMultimapTest._Benchmark.benchmark_pairIterableConstructorTest  thrpt   30  1220070.771 ± 3583.602  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_putAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_putAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 441003.813 ops/s
# Warmup Iteration   2: 884736.950 ops/s
# Warmup Iteration   3: 974576.999 ops/s
# Warmup Iteration   4: 979824.263 ops/s
# Warmup Iteration   5: 802589.021 ops/s
# Warmup Iteration   6: 983786.398 ops/s
# Warmup Iteration   7: 981579.303 ops/s
# Warmup Iteration   8: 982896.939 ops/s
# Warmup Iteration   9: 984029.695 ops/s
# Warmup Iteration  10: 982629.869 ops/s
# Warmup Iteration  11: 981566.202 ops/s
# Warmup Iteration  12: 980893.552 ops/s
# Warmup Iteration  13: 983481.672 ops/s
# Warmup Iteration  14: 985425.308 ops/s
# Warmup Iteration  15: 982746.543 ops/s
# Warmup Iteration  16: 984036.681 ops/s
# Warmup Iteration  17: 977364.508 ops/s
# Warmup Iteration  18: 979249.161 ops/s
# Warmup Iteration  19: 979454.800 ops/s
# Warmup Iteration  20: 978005.952 ops/s
# Warmup Iteration  21: 982273.684 ops/s
# Warmup Iteration  22: 974207.651 ops/s
# Warmup Iteration  23: 980913.135 ops/s
# Warmup Iteration  24: 980093.453 ops/s
# Warmup Iteration  25: 982085.333 ops/s
# Warmup Iteration  26: 983872.553 ops/s
# Warmup Iteration  27: 979662.721 ops/s
# Warmup Iteration  28: 981957.002 ops/s
# Warmup Iteration  29: 980919.764 ops/s
# Warmup Iteration  30: 979458.376 ops/s
Iteration   1: 983675.481 ops/s
Iteration   2: 979931.417 ops/s
Iteration   3: 978612.478 ops/s
Iteration   4: 980922.601 ops/s
Iteration   5: 981719.805 ops/s
Iteration   6: 980369.976 ops/s
Iteration   7: 984081.106 ops/s
Iteration   8: 980691.397 ops/s
Iteration   9: 976893.412 ops/s
Iteration  10: 981320.310 ops/s
Iteration  11: 984355.923 ops/s
Iteration  12: 980389.313 ops/s
Iteration  13: 985690.688 ops/s
Iteration  14: 982001.420 ops/s
Iteration  15: 981524.598 ops/s
Iteration  16: 991104.858 ops/s
Iteration  17: 987255.548 ops/s
Iteration  18: 981938.699 ops/s
Iteration  19: 976463.166 ops/s
Iteration  20: 982104.358 ops/s
Iteration  21: 977078.893 ops/s
Iteration  22: 977531.685 ops/s
Iteration  23: 969067.370 ops/s
Iteration  24: 987691.523 ops/s
Iteration  25: 976149.012 ops/s
Iteration  26: 977910.807 ops/s
Iteration  27: 985847.602 ops/s
Iteration  28: 980397.913 ops/s
Iteration  29: 978293.871 ops/s
Iteration  30: 979213.917 ops/s


Result "org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_putAll":
  981007.638 ±(99.9%) 2835.466 ops/s [Average]
  (min, avg, max) = (969067.370, 981007.638, 991104.858), stdev = 4243.993
  CI (99.9%): [978172.172, 983843.104] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score      Error  Units
FastListMultimapTest._Benchmark.benchmark_putAll  thrpt   30  981007.638 ± 2835.466  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_putAllFromCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_putAllFromCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 535295.261 ops/s
# Warmup Iteration   2: 1215309.832 ops/s
# Warmup Iteration   3: 1280317.112 ops/s
# Warmup Iteration   4: 1211732.875 ops/s
# Warmup Iteration   5: 1128880.022 ops/s
# Warmup Iteration   6: 1288248.757 ops/s
# Warmup Iteration   7: 1286465.047 ops/s
# Warmup Iteration   8: 1286573.191 ops/s
# Warmup Iteration   9: 1286019.055 ops/s
# Warmup Iteration  10: 1288477.025 ops/s
# Warmup Iteration  11: 1285778.321 ops/s
# Warmup Iteration  12: 1283147.470 ops/s
# Warmup Iteration  13: 1285810.446 ops/s
# Warmup Iteration  14: 1289377.036 ops/s
# Warmup Iteration  15: 1287198.575 ops/s
# Warmup Iteration  16: 1287736.009 ops/s
# Warmup Iteration  17: 1269339.399 ops/s
# Warmup Iteration  18: 1271291.751 ops/s
# Warmup Iteration  19: 1272674.474 ops/s
# Warmup Iteration  20: 1268511.276 ops/s
# Warmup Iteration  21: 1274801.986 ops/s
# Warmup Iteration  22: 1257560.439 ops/s
# Warmup Iteration  23: 1264747.177 ops/s
# Warmup Iteration  24: 1269073.703 ops/s
# Warmup Iteration  25: 1271508.827 ops/s
# Warmup Iteration  26: 1275416.425 ops/s
# Warmup Iteration  27: 1271101.327 ops/s
# Warmup Iteration  28: 1273719.067 ops/s
# Warmup Iteration  29: 1272431.767 ops/s
# Warmup Iteration  30: 1271168.881 ops/s
Iteration   1: 1270175.534 ops/s
Iteration   2: 1274740.005 ops/s
Iteration   3: 1274378.497 ops/s
Iteration   4: 1271860.170 ops/s
Iteration   5: 1273790.562 ops/s
Iteration   6: 1276173.684 ops/s
Iteration   7: 1274200.961 ops/s
Iteration   8: 1274072.785 ops/s
Iteration   9: 1276201.720 ops/s
Iteration  10: 1274978.904 ops/s
Iteration  11: 1275995.349 ops/s
Iteration  12: 1273918.489 ops/s
Iteration  13: 1278574.491 ops/s
Iteration  14: 1275074.989 ops/s
Iteration  15: 1276407.791 ops/s
Iteration  16: 1273757.004 ops/s
Iteration  17: 1270773.878 ops/s
Iteration  18: 1269433.896 ops/s
Iteration  19: 1275295.744 ops/s
Iteration  20: 1275350.586 ops/s
Iteration  21: 1276335.728 ops/s
Iteration  22: 1251643.332 ops/s
Iteration  23: 1269908.557 ops/s
Iteration  24: 1274416.372 ops/s
Iteration  25: 1272493.153 ops/s
Iteration  26: 1273500.469 ops/s
Iteration  27: 1272201.696 ops/s
Iteration  28: 1271884.852 ops/s
Iteration  29: 1275835.428 ops/s
Iteration  30: 1272754.287 ops/s


Result "org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_putAllFromCollection":
  1273204.297 ±(99.9%) 3078.090 ops/s [Average]
  (min, avg, max) = (1251643.332, 1273204.297, 1278574.491), stdev = 4607.141
  CI (99.9%): [1270126.207, 1276282.387] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
FastListMultimapTest._Benchmark.benchmark_putAllFromCollection  thrpt   30  1273204.297 ± 3078.090  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_putAllFromIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_putAllFromIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 706207.326 ops/s
# Warmup Iteration   2: 1155606.612 ops/s
# Warmup Iteration   3: 1381629.833 ops/s
# Warmup Iteration   4: 1394909.082 ops/s
# Warmup Iteration   5: 1383528.307 ops/s
# Warmup Iteration   6: 1207423.982 ops/s
# Warmup Iteration   7: 1294994.318 ops/s
# Warmup Iteration   8: 1390341.222 ops/s
# Warmup Iteration   9: 1394073.153 ops/s
# Warmup Iteration  10: 1393325.609 ops/s
# Warmup Iteration  11: 1389034.590 ops/s
# Warmup Iteration  12: 1381890.842 ops/s
# Warmup Iteration  13: 1379448.827 ops/s
# Warmup Iteration  14: 1388059.198 ops/s
# Warmup Iteration  15: 1393359.420 ops/s
# Warmup Iteration  16: 1390524.891 ops/s
# Warmup Iteration  17: 1393519.964 ops/s
# Warmup Iteration  18: 1391512.444 ops/s
# Warmup Iteration  19: 1382767.861 ops/s
# Warmup Iteration  20: 1394887.652 ops/s
# Warmup Iteration  21: 1393003.843 ops/s
# Warmup Iteration  22: 1391699.066 ops/s
# Warmup Iteration  23: 1390789.485 ops/s
# Warmup Iteration  24: 1392044.371 ops/s
# Warmup Iteration  25: 1388258.338 ops/s
# Warmup Iteration  26: 1392016.819 ops/s
# Warmup Iteration  27: 1392533.637 ops/s
# Warmup Iteration  28: 1393265.045 ops/s
# Warmup Iteration  29: 1390696.642 ops/s
# Warmup Iteration  30: 1394410.267 ops/s
Iteration   1: 1389204.956 ops/s
Iteration   2: 1395723.073 ops/s
Iteration   3: 1389834.188 ops/s
Iteration   4: 1394905.931 ops/s
Iteration   5: 1395125.054 ops/s
Iteration   6: 1398376.328 ops/s
Iteration   7: 1390551.738 ops/s
Iteration   8: 1390297.952 ops/s
Iteration   9: 1387914.269 ops/s
Iteration  10: 1392188.549 ops/s
Iteration  11: 1388272.345 ops/s
Iteration  12: 1390208.475 ops/s
Iteration  13: 1394113.921 ops/s
Iteration  14: 1393588.908 ops/s
Iteration  15: 1386803.659 ops/s
Iteration  16: 1393010.093 ops/s
Iteration  17: 1393218.309 ops/s
Iteration  18: 1394570.011 ops/s
Iteration  19: 1393809.832 ops/s
Iteration  20: 1395921.631 ops/s
Iteration  21: 1390796.629 ops/s
Iteration  22: 1391718.608 ops/s
Iteration  23: 1395142.685 ops/s
Iteration  24: 1395185.336 ops/s
Iteration  25: 1392275.944 ops/s
Iteration  26: 1394994.615 ops/s
Iteration  27: 1385816.147 ops/s
Iteration  28: 1393803.024 ops/s
Iteration  29: 1389390.451 ops/s
Iteration  30: 1395846.172 ops/s


Result "org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_putAllFromIterable":
  1392420.294 ±(99.9%) 2054.428 ops/s [Average]
  (min, avg, max) = (1385816.147, 1392420.294, 1398376.328), stdev = 3074.972
  CI (99.9%): [1390365.866, 1394474.723] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
FastListMultimapTest._Benchmark.benchmark_putAllFromIterable  thrpt   30  1392420.294 ± 2054.428  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_putAllPairs$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_putAllPairs

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 149305.305 ops/s
# Warmup Iteration   2: 281702.987 ops/s
# Warmup Iteration   3: 318622.720 ops/s
# Warmup Iteration   4: 320341.228 ops/s
# Warmup Iteration   5: 303203.504 ops/s
# Warmup Iteration   6: 282035.921 ops/s
# Warmup Iteration   7: 319884.379 ops/s
# Warmup Iteration   8: 320249.986 ops/s
# Warmup Iteration   9: 320868.278 ops/s
# Warmup Iteration  10: 320530.101 ops/s
# Warmup Iteration  11: 320241.589 ops/s
# Warmup Iteration  12: 320849.289 ops/s
# Warmup Iteration  13: 320340.817 ops/s
# Warmup Iteration  14: 320541.413 ops/s
# Warmup Iteration  15: 320365.825 ops/s
# Warmup Iteration  16: 320578.186 ops/s
# Warmup Iteration  17: 320097.091 ops/s
# Warmup Iteration  18: 319741.262 ops/s
# Warmup Iteration  19: 320884.833 ops/s
# Warmup Iteration  20: 320084.880 ops/s
# Warmup Iteration  21: 320607.368 ops/s
# Warmup Iteration  22: 321076.141 ops/s
# Warmup Iteration  23: 320366.845 ops/s
# Warmup Iteration  24: 317863.559 ops/s
# Warmup Iteration  25: 320082.420 ops/s
# Warmup Iteration  26: 320039.695 ops/s
# Warmup Iteration  27: 318259.906 ops/s
# Warmup Iteration  28: 320613.081 ops/s
# Warmup Iteration  29: 320321.404 ops/s
# Warmup Iteration  30: 321381.635 ops/s
Iteration   1: 321081.698 ops/s
Iteration   2: 320897.263 ops/s
Iteration   3: 319812.768 ops/s
Iteration   4: 320017.799 ops/s
Iteration   5: 320222.023 ops/s
Iteration   6: 320197.041 ops/s
Iteration   7: 320610.024 ops/s
Iteration   8: 320927.151 ops/s
Iteration   9: 321178.632 ops/s
Iteration  10: 320038.990 ops/s
Iteration  11: 320422.922 ops/s
Iteration  12: 321335.929 ops/s
Iteration  13: 320682.192 ops/s
Iteration  14: 319984.544 ops/s
Iteration  15: 320894.678 ops/s
Iteration  16: 320775.882 ops/s
Iteration  17: 321242.551 ops/s
Iteration  18: 320115.170 ops/s
Iteration  19: 320442.083 ops/s
Iteration  20: 320749.142 ops/s
Iteration  21: 320284.979 ops/s
Iteration  22: 320463.634 ops/s
Iteration  23: 320778.908 ops/s
Iteration  24: 320816.573 ops/s
Iteration  25: 320562.452 ops/s
Iteration  26: 321042.436 ops/s
Iteration  27: 320603.221 ops/s
Iteration  28: 320785.086 ops/s
Iteration  29: 321325.099 ops/s
Iteration  30: 321259.546 ops/s


Result "org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_putAllPairs":
  320651.681 ±(99.9%) 288.867 ops/s [Average]
  (min, avg, max) = (319812.768, 320651.681, 321335.929), stdev = 432.363
  CI (99.9%): [320362.813, 320940.548] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score     Error  Units
FastListMultimapTest._Benchmark.benchmark_putAllPairs  thrpt   30  320651.681 ± 288.867  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_putAndGrowMultimap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_putAndGrowMultimap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8484854.438 ops/s
# Warmup Iteration   2: 17615777.381 ops/s
# Warmup Iteration   3: 16733663.749 ops/s
# Warmup Iteration   4: 18793341.528 ops/s
# Warmup Iteration   5: 18929877.097 ops/s
# Warmup Iteration   6: 18525309.968 ops/s
# Warmup Iteration   7: 18731266.635 ops/s
# Warmup Iteration   8: 18845563.504 ops/s
# Warmup Iteration   9: 18917637.710 ops/s
# Warmup Iteration  10: 18579951.447 ops/s
# Warmup Iteration  11: 18825179.839 ops/s
# Warmup Iteration  12: 18943777.081 ops/s
# Warmup Iteration  13: 18914025.796 ops/s
# Warmup Iteration  14: 18945236.702 ops/s
# Warmup Iteration  15: 18821187.591 ops/s
# Warmup Iteration  16: 18919143.723 ops/s
# Warmup Iteration  17: 18782405.171 ops/s
# Warmup Iteration  18: 18706494.490 ops/s
# Warmup Iteration  19: 18994567.844 ops/s
# Warmup Iteration  20: 18809657.472 ops/s
# Warmup Iteration  21: 18849022.223 ops/s
# Warmup Iteration  22: 18920261.548 ops/s
# Warmup Iteration  23: 18786845.565 ops/s
# Warmup Iteration  24: 18895512.472 ops/s
# Warmup Iteration  25: 18972856.874 ops/s
# Warmup Iteration  26: 18929791.343 ops/s
# Warmup Iteration  27: 18855122.307 ops/s
# Warmup Iteration  28: 18855322.389 ops/s
# Warmup Iteration  29: 18917245.777 ops/s
# Warmup Iteration  30: 18760651.689 ops/s
Iteration   1: 18839885.931 ops/s
Iteration   2: 19030843.350 ops/s
Iteration   3: 19023515.910 ops/s
Iteration   4: 18923274.686 ops/s
Iteration   5: 18917053.596 ops/s
Iteration   6: 18902166.109 ops/s
Iteration   7: 18951616.238 ops/s
Iteration   8: 18938820.219 ops/s
Iteration   9: 18684184.829 ops/s
Iteration  10: 18724117.098 ops/s
Iteration  11: 18820895.903 ops/s
Iteration  12: 18928537.610 ops/s
Iteration  13: 18876394.366 ops/s
Iteration  14: 18774608.968 ops/s
Iteration  15: 18501433.816 ops/s
Iteration  16: 18842156.960 ops/s
Iteration  17: 18977194.503 ops/s
Iteration  18: 18972047.869 ops/s
Iteration  19: 18619265.502 ops/s
Iteration  20: 18729999.850 ops/s
Iteration  21: 18775350.570 ops/s
Iteration  22: 18746207.008 ops/s
Iteration  23: 18846967.535 ops/s
Iteration  24: 18803049.772 ops/s
Iteration  25: 18932897.169 ops/s
Iteration  26: 18957431.695 ops/s
Iteration  27: 19019014.556 ops/s
Iteration  28: 18769674.267 ops/s
Iteration  29: 18729886.694 ops/s
Iteration  30: 18951454.331 ops/s


Result "org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_putAndGrowMultimap":
  18850331.564 ±(99.9%) 84822.382 ops/s [Average]
  (min, avg, max) = (18501433.816, 18850331.564, 19030843.350), stdev = 126958.158
  CI (99.9%): [18765509.182, 18935153.946] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score       Error  Units
FastListMultimapTest._Benchmark.benchmark_putAndGrowMultimap  thrpt   30  18850331.564 ± 84822.382  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_put_createCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_put_createCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2912641.673 ops/s
# Warmup Iteration   2: 7800982.442 ops/s
# Warmup Iteration   3: 6428043.061 ops/s
# Warmup Iteration   4: 7756920.781 ops/s
# Warmup Iteration   5: 7744200.937 ops/s
# Warmup Iteration   6: 7796694.269 ops/s
# Warmup Iteration   7: 7770867.806 ops/s
# Warmup Iteration   8: 7765967.545 ops/s
# Warmup Iteration   9: 7756247.279 ops/s
# Warmup Iteration  10: 7775294.140 ops/s
# Warmup Iteration  11: 7757737.920 ops/s
# Warmup Iteration  12: 7781363.202 ops/s
# Warmup Iteration  13: 7799819.871 ops/s
# Warmup Iteration  14: 7804184.890 ops/s
# Warmup Iteration  15: 7745768.087 ops/s
# Warmup Iteration  16: 7758620.312 ops/s
# Warmup Iteration  17: 7737489.969 ops/s
# Warmup Iteration  18: 7763684.586 ops/s
# Warmup Iteration  19: 7697865.186 ops/s
# Warmup Iteration  20: 7759859.367 ops/s
# Warmup Iteration  21: 7792022.939 ops/s
# Warmup Iteration  22: 7772008.952 ops/s
# Warmup Iteration  23: 7787046.996 ops/s
# Warmup Iteration  24: 7765635.735 ops/s
# Warmup Iteration  25: 7727570.955 ops/s
# Warmup Iteration  26: 7805300.466 ops/s
# Warmup Iteration  27: 7768178.369 ops/s
# Warmup Iteration  28: 7781508.812 ops/s
# Warmup Iteration  29: 7712065.572 ops/s
# Warmup Iteration  30: 7714754.857 ops/s
Iteration   1: 7790527.607 ops/s
Iteration   2: 7764977.159 ops/s
Iteration   3: 7642771.410 ops/s
Iteration   4: 7769762.464 ops/s
Iteration   5: 7753687.194 ops/s
Iteration   6: 7799301.076 ops/s
Iteration   7: 7777920.937 ops/s
Iteration   8: 7782748.366 ops/s
Iteration   9: 7786146.834 ops/s
Iteration  10: 7754615.549 ops/s
Iteration  11: 7802343.503 ops/s
Iteration  12: 7746405.018 ops/s
Iteration  13: 7753433.088 ops/s
Iteration  14: 7802422.874 ops/s
Iteration  15: 7751843.788 ops/s
Iteration  16: 7788811.042 ops/s
Iteration  17: 7826189.378 ops/s
Iteration  18: 7613762.619 ops/s
Iteration  19: 7802844.203 ops/s
Iteration  20: 7785830.798 ops/s
Iteration  21: 7775380.263 ops/s
Iteration  22: 7814244.248 ops/s
Iteration  23: 7639285.355 ops/s
Iteration  24: 7759318.126 ops/s
Iteration  25: 7796964.756 ops/s
Iteration  26: 7801773.563 ops/s
Iteration  27: 7814003.897 ops/s
Iteration  28: 7781546.713 ops/s
Iteration  29: 7786866.720 ops/s
Iteration  30: 7789572.089 ops/s


Result "org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_put_createCollection":
  7768510.021 ±(99.9%) 33882.377 ops/s [Average]
  (min, avg, max) = (7613762.619, 7768510.021, 7826189.378), stdev = 50713.551
  CI (99.9%): [7734627.644, 7802392.398] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
FastListMultimapTest._Benchmark.benchmark_put_createCollection  thrpt   30  7768510.021 ± 33882.377  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_rejectKeysMultiValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_rejectKeysMultiValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 215601.266 ops/s
# Warmup Iteration   2: 537991.178 ops/s
# Warmup Iteration   3: 580024.231 ops/s
# Warmup Iteration   4: 517292.077 ops/s
# Warmup Iteration   5: 547240.079 ops/s
# Warmup Iteration   6: 582002.817 ops/s
# Warmup Iteration   7: 582122.168 ops/s
# Warmup Iteration   8: 583614.352 ops/s
# Warmup Iteration   9: 582770.771 ops/s
# Warmup Iteration  10: 583833.795 ops/s
# Warmup Iteration  11: 583576.891 ops/s
# Warmup Iteration  12: 582796.241 ops/s
# Warmup Iteration  13: 584273.939 ops/s
# Warmup Iteration  14: 581864.529 ops/s
# Warmup Iteration  15: 582897.073 ops/s
# Warmup Iteration  16: 584457.177 ops/s
# Warmup Iteration  17: 579354.314 ops/s
# Warmup Iteration  18: 582622.371 ops/s
# Warmup Iteration  19: 581148.552 ops/s
# Warmup Iteration  20: 582070.343 ops/s
# Warmup Iteration  21: 582815.833 ops/s
# Warmup Iteration  22: 582706.247 ops/s
# Warmup Iteration  23: 582503.304 ops/s
# Warmup Iteration  24: 582130.868 ops/s
# Warmup Iteration  25: 583328.252 ops/s
# Warmup Iteration  26: 582595.524 ops/s
# Warmup Iteration  27: 577928.037 ops/s
# Warmup Iteration  28: 585091.095 ops/s
# Warmup Iteration  29: 582170.025 ops/s
# Warmup Iteration  30: 582102.539 ops/s
Iteration   1: 582244.606 ops/s
Iteration   2: 581618.076 ops/s
Iteration   3: 582739.726 ops/s
Iteration   4: 583539.014 ops/s
Iteration   5: 582567.548 ops/s
Iteration   6: 582823.229 ops/s
Iteration   7: 582845.827 ops/s
Iteration   8: 581909.390 ops/s
Iteration   9: 584326.916 ops/s
Iteration  10: 575770.025 ops/s
Iteration  11: 582781.528 ops/s
Iteration  12: 579835.259 ops/s
Iteration  13: 574531.960 ops/s
Iteration  14: 581887.448 ops/s
Iteration  15: 581790.457 ops/s
Iteration  16: 583600.651 ops/s
Iteration  17: 583251.779 ops/s
Iteration  18: 583089.352 ops/s
Iteration  19: 583050.128 ops/s
Iteration  20: 583439.556 ops/s
Iteration  21: 583611.898 ops/s
Iteration  22: 582399.481 ops/s
Iteration  23: 582775.231 ops/s
Iteration  24: 582192.918 ops/s
Iteration  25: 582538.489 ops/s
Iteration  26: 582410.302 ops/s
Iteration  27: 580152.783 ops/s
Iteration  28: 575738.950 ops/s
Iteration  29: 584176.661 ops/s
Iteration  30: 584388.869 ops/s


Result "org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_rejectKeysMultiValues":
  581934.269 ±(99.9%) 1643.435 ops/s [Average]
  (min, avg, max) = (574531.960, 581934.269, 584388.869), stdev = 2459.816
  CI (99.9%): [580290.834, 583577.703] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
FastListMultimapTest._Benchmark.benchmark_rejectKeysMultiValues  thrpt   30  581934.269 ± 1643.435  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_rejectKeysValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_rejectKeysValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 344826.990 ops/s
# Warmup Iteration   2: 791311.213 ops/s
# Warmup Iteration   3: 827883.127 ops/s
# Warmup Iteration   4: 774230.795 ops/s
# Warmup Iteration   5: 747583.844 ops/s
# Warmup Iteration   6: 831995.733 ops/s
# Warmup Iteration   7: 834746.772 ops/s
# Warmup Iteration   8: 825114.294 ops/s
# Warmup Iteration   9: 832010.266 ops/s
# Warmup Iteration  10: 824261.477 ops/s
# Warmup Iteration  11: 827133.675 ops/s
# Warmup Iteration  12: 828909.647 ops/s
# Warmup Iteration  13: 830269.356 ops/s
# Warmup Iteration  14: 837262.877 ops/s
# Warmup Iteration  15: 832424.132 ops/s
# Warmup Iteration  16: 834165.730 ops/s
# Warmup Iteration  17: 832817.409 ops/s
# Warmup Iteration  18: 824424.310 ops/s
# Warmup Iteration  19: 835889.966 ops/s
# Warmup Iteration  20: 831925.231 ops/s
# Warmup Iteration  21: 832353.968 ops/s
# Warmup Iteration  22: 836708.618 ops/s
# Warmup Iteration  23: 833692.235 ops/s
# Warmup Iteration  24: 837134.554 ops/s
# Warmup Iteration  25: 831480.214 ops/s
# Warmup Iteration  26: 833711.123 ops/s
# Warmup Iteration  27: 835361.416 ops/s
# Warmup Iteration  28: 827766.362 ops/s
# Warmup Iteration  29: 831613.004 ops/s
# Warmup Iteration  30: 834856.875 ops/s
Iteration   1: 833154.575 ops/s
Iteration   2: 833278.700 ops/s
Iteration   3: 831738.212 ops/s
Iteration   4: 835673.887 ops/s
Iteration   5: 833825.032 ops/s
Iteration   6: 829076.502 ops/s
Iteration   7: 835630.687 ops/s
Iteration   8: 834908.519 ops/s
Iteration   9: 830764.549 ops/s
Iteration  10: 830667.751 ops/s
Iteration  11: 834136.607 ops/s
Iteration  12: 832249.562 ops/s
Iteration  13: 836504.683 ops/s
Iteration  14: 834074.988 ops/s
Iteration  15: 832182.076 ops/s
Iteration  16: 833437.863 ops/s
Iteration  17: 836487.343 ops/s
Iteration  18: 822719.933 ops/s
Iteration  19: 828323.869 ops/s
Iteration  20: 831816.299 ops/s
Iteration  21: 835233.848 ops/s
Iteration  22: 831949.726 ops/s
Iteration  23: 837323.089 ops/s
Iteration  24: 833993.479 ops/s
Iteration  25: 830272.356 ops/s
Iteration  26: 832775.984 ops/s
Iteration  27: 828648.912 ops/s
Iteration  28: 816170.237 ops/s
Iteration  29: 828939.927 ops/s
Iteration  30: 835802.547 ops/s


Result "org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_rejectKeysValues":
  832058.725 ±(99.9%) 2873.317 ops/s [Average]
  (min, avg, max) = (816170.237, 832058.725, 837323.089), stdev = 4300.646
  CI (99.9%): [829185.408, 834932.042] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
FastListMultimapTest._Benchmark.benchmark_rejectKeysValues  thrpt   30  832058.725 ± 2873.317  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 407908.616 ops/s
# Warmup Iteration   2: 873558.473 ops/s
# Warmup Iteration   3: 932648.395 ops/s
# Warmup Iteration   4: 942112.289 ops/s
# Warmup Iteration   5: 770350.480 ops/s
# Warmup Iteration   6: 940052.863 ops/s
# Warmup Iteration   7: 935568.501 ops/s
# Warmup Iteration   8: 940017.365 ops/s
# Warmup Iteration   9: 944263.586 ops/s
# Warmup Iteration  10: 935529.678 ops/s
# Warmup Iteration  11: 940204.932 ops/s
# Warmup Iteration  12: 939087.175 ops/s
# Warmup Iteration  13: 941558.513 ops/s
# Warmup Iteration  14: 941616.707 ops/s
# Warmup Iteration  15: 944238.723 ops/s
# Warmup Iteration  16: 943828.234 ops/s
# Warmup Iteration  17: 942765.758 ops/s
# Warmup Iteration  18: 938620.901 ops/s
# Warmup Iteration  19: 943388.612 ops/s
# Warmup Iteration  20: 928808.166 ops/s
# Warmup Iteration  21: 941167.216 ops/s
# Warmup Iteration  22: 940969.624 ops/s
# Warmup Iteration  23: 937651.589 ops/s
# Warmup Iteration  24: 941990.518 ops/s
# Warmup Iteration  25: 941236.470 ops/s
# Warmup Iteration  26: 939956.240 ops/s
# Warmup Iteration  27: 941591.535 ops/s
# Warmup Iteration  28: 940748.424 ops/s
# Warmup Iteration  29: 936367.481 ops/s
# Warmup Iteration  30: 940142.100 ops/s
Iteration   1: 943295.548 ops/s
Iteration   2: 928723.803 ops/s
Iteration   3: 940880.515 ops/s
Iteration   4: 940328.953 ops/s
Iteration   5: 937996.804 ops/s
Iteration   6: 922501.355 ops/s
Iteration   7: 937260.415 ops/s
Iteration   8: 940312.502 ops/s
Iteration   9: 944438.636 ops/s
Iteration  10: 941987.598 ops/s
Iteration  11: 942226.464 ops/s
Iteration  12: 938145.245 ops/s
Iteration  13: 940948.371 ops/s
Iteration  14: 941823.852 ops/s
Iteration  15: 943331.646 ops/s
Iteration  16: 938861.682 ops/s
Iteration  17: 939516.967 ops/s
Iteration  18: 940180.066 ops/s
Iteration  19: 937486.871 ops/s
Iteration  20: 926946.295 ops/s
Iteration  21: 940112.003 ops/s
Iteration  22: 944039.800 ops/s
Iteration  23: 934480.860 ops/s
Iteration  24: 940115.532 ops/s
Iteration  25: 940997.991 ops/s
Iteration  26: 942023.839 ops/s
Iteration  27: 938135.695 ops/s
Iteration  28: 940722.759 ops/s
Iteration  29: 942350.790 ops/s
Iteration  30: 941415.667 ops/s


Result "org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_remove":
  939052.951 ±(99.9%) 3326.450 ops/s [Average]
  (min, avg, max) = (922501.355, 939052.951, 944438.636), stdev = 4978.875
  CI (99.9%): [935726.500, 942379.401] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score      Error  Units
FastListMultimapTest._Benchmark.benchmark_remove  thrpt   30  939052.951 ± 3326.450  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_removeKey$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_removeKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 372476.923 ops/s
# Warmup Iteration   2: 635136.943 ops/s
# Warmup Iteration   3: 773583.507 ops/s
# Warmup Iteration   4: 777027.883 ops/s
# Warmup Iteration   5: 783807.130 ops/s
# Warmup Iteration   6: 785468.613 ops/s
# Warmup Iteration   7: 647391.986 ops/s
# Warmup Iteration   8: 783141.975 ops/s
# Warmup Iteration   9: 785137.155 ops/s
# Warmup Iteration  10: 782925.967 ops/s
# Warmup Iteration  11: 783706.579 ops/s
# Warmup Iteration  12: 783834.675 ops/s
# Warmup Iteration  13: 783616.959 ops/s
# Warmup Iteration  14: 783394.191 ops/s
# Warmup Iteration  15: 782792.656 ops/s
# Warmup Iteration  16: 784380.749 ops/s
# Warmup Iteration  17: 782241.283 ops/s
# Warmup Iteration  18: 784097.473 ops/s
# Warmup Iteration  19: 784024.583 ops/s
# Warmup Iteration  20: 782548.745 ops/s
# Warmup Iteration  21: 784130.150 ops/s
# Warmup Iteration  22: 783070.892 ops/s
# Warmup Iteration  23: 781907.509 ops/s
# Warmup Iteration  24: 784194.049 ops/s
# Warmup Iteration  25: 783310.472 ops/s
# Warmup Iteration  26: 783282.441 ops/s
# Warmup Iteration  27: 782709.075 ops/s
# Warmup Iteration  28: 782533.086 ops/s
# Warmup Iteration  29: 780071.838 ops/s
# Warmup Iteration  30: 768866.597 ops/s
Iteration   1: 785698.213 ops/s
Iteration   2: 782553.243 ops/s
Iteration   3: 784248.509 ops/s
Iteration   4: 765627.393 ops/s
Iteration   5: 783464.183 ops/s
Iteration   6: 784395.782 ops/s
Iteration   7: 768631.022 ops/s
Iteration   8: 780614.180 ops/s
Iteration   9: 784035.572 ops/s
Iteration  10: 780618.722 ops/s
Iteration  11: 782436.000 ops/s
Iteration  12: 784986.749 ops/s
Iteration  13: 783644.281 ops/s
Iteration  14: 784230.355 ops/s
Iteration  15: 769740.657 ops/s
Iteration  16: 770890.036 ops/s
Iteration  17: 777900.600 ops/s
Iteration  18: 783502.941 ops/s
Iteration  19: 782958.186 ops/s
Iteration  20: 781027.616 ops/s
Iteration  21: 779360.159 ops/s
Iteration  22: 784475.708 ops/s
Iteration  23: 780739.234 ops/s
Iteration  24: 756972.173 ops/s
Iteration  25: 785764.486 ops/s
Iteration  26: 770880.966 ops/s
Iteration  27: 781960.594 ops/s
Iteration  28: 771215.683 ops/s
Iteration  29: 783970.005 ops/s
Iteration  30: 787118.887 ops/s


Result "org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_removeKey":
  779455.404 ±(99.9%) 4843.556 ops/s [Average]
  (min, avg, max) = (756972.173, 779455.404, 787118.887), stdev = 7249.607
  CI (99.9%): [774611.849, 784298.960] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
FastListMultimapTest._Benchmark.benchmark_removeKey  thrpt   30  779455.404 ± 4843.556  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_removeObject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_removeObject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2339021.441 ops/s
# Warmup Iteration   2: 5820856.287 ops/s
# Warmup Iteration   3: 5001416.031 ops/s
# Warmup Iteration   4: 5989294.483 ops/s
# Warmup Iteration   5: 6023520.397 ops/s
# Warmup Iteration   6: 5995674.768 ops/s
# Warmup Iteration   7: 6051417.688 ops/s
# Warmup Iteration   8: 6031580.172 ops/s
# Warmup Iteration   9: 5966268.806 ops/s
# Warmup Iteration  10: 6047865.094 ops/s
# Warmup Iteration  11: 6045629.307 ops/s
# Warmup Iteration  12: 6049364.753 ops/s
# Warmup Iteration  13: 6046419.566 ops/s
# Warmup Iteration  14: 6021235.747 ops/s
# Warmup Iteration  15: 6020214.825 ops/s
# Warmup Iteration  16: 6020077.458 ops/s
# Warmup Iteration  17: 5990032.328 ops/s
# Warmup Iteration  18: 5982356.769 ops/s
# Warmup Iteration  19: 6016750.649 ops/s
# Warmup Iteration  20: 6026236.122 ops/s
# Warmup Iteration  21: 6044204.505 ops/s
# Warmup Iteration  22: 6011533.094 ops/s
# Warmup Iteration  23: 6039572.076 ops/s
# Warmup Iteration  24: 5990554.184 ops/s
# Warmup Iteration  25: 6025071.244 ops/s
# Warmup Iteration  26: 5923979.148 ops/s
# Warmup Iteration  27: 6015589.585 ops/s
# Warmup Iteration  28: 6019054.884 ops/s
# Warmup Iteration  29: 6036652.211 ops/s
# Warmup Iteration  30: 6015087.079 ops/s
Iteration   1: 6033894.530 ops/s
Iteration   2: 6027108.935 ops/s
Iteration   3: 5969082.626 ops/s
Iteration   4: 6066716.544 ops/s
Iteration   5: 6026487.950 ops/s
Iteration   6: 6037570.976 ops/s
Iteration   7: 5996120.353 ops/s
Iteration   8: 5970754.524 ops/s
Iteration   9: 6009609.532 ops/s
Iteration  10: 6035622.882 ops/s
Iteration  11: 5938901.216 ops/s
Iteration  12: 5936463.373 ops/s
Iteration  13: 5957759.079 ops/s
Iteration  14: 6020396.404 ops/s
Iteration  15: 6035176.017 ops/s
Iteration  16: 5921495.211 ops/s
Iteration  17: 6058457.190 ops/s
Iteration  18: 6025187.764 ops/s
Iteration  19: 6037267.638 ops/s
Iteration  20: 6037817.471 ops/s
Iteration  21: 6042363.934 ops/s
Iteration  22: 6018616.458 ops/s
Iteration  23: 5998365.203 ops/s
Iteration  24: 6040254.719 ops/s
Iteration  25: 6008773.957 ops/s
Iteration  26: 6031540.582 ops/s
Iteration  27: 6026905.242 ops/s
Iteration  28: 6012886.488 ops/s
Iteration  29: 6017870.125 ops/s
Iteration  30: 6027499.315 ops/s


Result "org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_removeObject":
  6012232.208 ±(99.9%) 24245.131 ops/s [Average]
  (min, avg, max) = (5921495.211, 6012232.208, 6066716.544), stdev = 36288.974
  CI (99.9%): [5987987.077, 6036477.339] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
FastListMultimapTest._Benchmark.benchmark_removeObject  thrpt   30  6012232.208 ± 24245.131  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_replaceValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_replaceValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 195000.996 ops/s
# Warmup Iteration   2: 414467.009 ops/s
# Warmup Iteration   3: 461029.648 ops/s
# Warmup Iteration   4: 463040.592 ops/s
# Warmup Iteration   5: 385303.933 ops/s
# Warmup Iteration   6: 463210.865 ops/s
# Warmup Iteration   7: 462319.291 ops/s
# Warmup Iteration   8: 458876.024 ops/s
# Warmup Iteration   9: 463807.181 ops/s
# Warmup Iteration  10: 463102.977 ops/s
# Warmup Iteration  11: 463614.395 ops/s
# Warmup Iteration  12: 463782.391 ops/s
# Warmup Iteration  13: 462838.378 ops/s
# Warmup Iteration  14: 462687.473 ops/s
# Warmup Iteration  15: 462133.141 ops/s
# Warmup Iteration  16: 463227.140 ops/s
# Warmup Iteration  17: 459230.755 ops/s
# Warmup Iteration  18: 463430.631 ops/s
# Warmup Iteration  19: 462685.479 ops/s
# Warmup Iteration  20: 462973.813 ops/s
# Warmup Iteration  21: 463375.124 ops/s
# Warmup Iteration  22: 463377.039 ops/s
# Warmup Iteration  23: 462217.819 ops/s
# Warmup Iteration  24: 462314.065 ops/s
# Warmup Iteration  25: 463863.399 ops/s
# Warmup Iteration  26: 463254.285 ops/s
# Warmup Iteration  27: 463066.096 ops/s
# Warmup Iteration  28: 463547.753 ops/s
# Warmup Iteration  29: 462795.516 ops/s
# Warmup Iteration  30: 463694.229 ops/s
Iteration   1: 463367.053 ops/s
Iteration   2: 454410.276 ops/s
Iteration   3: 462172.057 ops/s
Iteration   4: 463651.259 ops/s
Iteration   5: 463598.036 ops/s
Iteration   6: 462611.742 ops/s
Iteration   7: 455095.812 ops/s
Iteration   8: 462621.423 ops/s
Iteration   9: 462082.141 ops/s
Iteration  10: 455023.943 ops/s
Iteration  11: 463003.448 ops/s
Iteration  12: 462743.304 ops/s
Iteration  13: 458630.942 ops/s
Iteration  14: 463250.809 ops/s
Iteration  15: 463615.605 ops/s
Iteration  16: 461530.767 ops/s
Iteration  17: 463504.095 ops/s
Iteration  18: 462609.869 ops/s
Iteration  19: 463559.618 ops/s
Iteration  20: 462678.221 ops/s
Iteration  21: 464560.128 ops/s
Iteration  22: 460872.930 ops/s
Iteration  23: 462458.035 ops/s
Iteration  24: 463175.550 ops/s
Iteration  25: 462164.390 ops/s
Iteration  26: 462350.220 ops/s
Iteration  27: 462057.514 ops/s
Iteration  28: 462694.168 ops/s
Iteration  29: 462725.998 ops/s
Iteration  30: 462044.625 ops/s


Result "org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_replaceValues":
  461828.799 ±(99.9%) 1729.881 ops/s [Average]
  (min, avg, max) = (454410.276, 461828.799, 464560.128), stdev = 2589.204
  CI (99.9%): [460098.918, 463558.680] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
FastListMultimapTest._Benchmark.benchmark_replaceValues  thrpt   30  461828.799 ± 1729.881  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_replaceValues_absent_key$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_replaceValues_absent_key

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 300242.317 ops/s
# Warmup Iteration   2: 659042.079 ops/s
# Warmup Iteration   3: 756203.300 ops/s
# Warmup Iteration   4: 762278.396 ops/s
# Warmup Iteration   5: 624274.037 ops/s
# Warmup Iteration   6: 757210.781 ops/s
# Warmup Iteration   7: 760552.302 ops/s
# Warmup Iteration   8: 760157.741 ops/s
# Warmup Iteration   9: 758480.379 ops/s
# Warmup Iteration  10: 760638.467 ops/s
# Warmup Iteration  11: 760027.498 ops/s
# Warmup Iteration  12: 761030.278 ops/s
# Warmup Iteration  13: 746490.210 ops/s
# Warmup Iteration  14: 757581.234 ops/s
# Warmup Iteration  15: 755450.083 ops/s
# Warmup Iteration  16: 759606.386 ops/s
# Warmup Iteration  17: 760676.382 ops/s
# Warmup Iteration  18: 748975.520 ops/s
# Warmup Iteration  19: 760394.832 ops/s
# Warmup Iteration  20: 757985.021 ops/s
# Warmup Iteration  21: 759918.000 ops/s
# Warmup Iteration  22: 758960.607 ops/s
# Warmup Iteration  23: 759717.812 ops/s
# Warmup Iteration  24: 761563.438 ops/s
# Warmup Iteration  25: 760606.041 ops/s
# Warmup Iteration  26: 760574.145 ops/s
# Warmup Iteration  27: 762313.697 ops/s
# Warmup Iteration  28: 761000.210 ops/s
# Warmup Iteration  29: 760427.400 ops/s
# Warmup Iteration  30: 759674.858 ops/s
Iteration   1: 760163.133 ops/s
Iteration   2: 761696.992 ops/s
Iteration   3: 762594.757 ops/s
Iteration   4: 760873.131 ops/s
Iteration   5: 757727.094 ops/s
Iteration   6: 761472.313 ops/s
Iteration   7: 755659.446 ops/s
Iteration   8: 756648.034 ops/s
Iteration   9: 761064.452 ops/s
Iteration  10: 761487.484 ops/s
Iteration  11: 757763.173 ops/s
Iteration  12: 762345.413 ops/s
Iteration  13: 760065.891 ops/s
Iteration  14: 760618.874 ops/s
Iteration  15: 760031.494 ops/s
Iteration  16: 758841.428 ops/s
Iteration  17: 759488.958 ops/s
Iteration  18: 760857.073 ops/s
Iteration  19: 759273.649 ops/s
Iteration  20: 760214.323 ops/s
Iteration  21: 761155.863 ops/s
Iteration  22: 760855.513 ops/s
Iteration  23: 748530.410 ops/s
Iteration  24: 761187.799 ops/s
Iteration  25: 762248.793 ops/s
Iteration  26: 749600.111 ops/s
Iteration  27: 761244.969 ops/s
Iteration  28: 760942.832 ops/s
Iteration  29: 761110.563 ops/s
Iteration  30: 762403.647 ops/s


Result "org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_replaceValues_absent_key":
  759605.587 ±(99.9%) 2212.367 ops/s [Average]
  (min, avg, max) = (748530.410, 759605.587, 762594.757), stdev = 3311.366
  CI (99.9%): [757393.220, 761817.954] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
FastListMultimapTest._Benchmark.benchmark_replaceValues_absent_key  thrpt   30  759605.587 ± 2212.367  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_selectKeysMultiValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_selectKeysMultiValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 217679.121 ops/s
# Warmup Iteration   2: 545185.427 ops/s
# Warmup Iteration   3: 587245.730 ops/s
# Warmup Iteration   4: 503476.702 ops/s
# Warmup Iteration   5: 573201.045 ops/s
# Warmup Iteration   6: 587515.694 ops/s
# Warmup Iteration   7: 585464.243 ops/s
# Warmup Iteration   8: 584962.183 ops/s
# Warmup Iteration   9: 587866.519 ops/s
# Warmup Iteration  10: 588268.934 ops/s
# Warmup Iteration  11: 586167.770 ops/s
# Warmup Iteration  12: 584973.840 ops/s
# Warmup Iteration  13: 585798.316 ops/s
# Warmup Iteration  14: 585463.026 ops/s
# Warmup Iteration  15: 582205.836 ops/s
# Warmup Iteration  16: 583216.000 ops/s
# Warmup Iteration  17: 583782.204 ops/s
# Warmup Iteration  18: 586223.779 ops/s
# Warmup Iteration  19: 582511.918 ops/s
# Warmup Iteration  20: 580534.929 ops/s
# Warmup Iteration  21: 584502.234 ops/s
# Warmup Iteration  22: 586484.022 ops/s
# Warmup Iteration  23: 581507.538 ops/s
# Warmup Iteration  24: 586440.077 ops/s
# Warmup Iteration  25: 585123.956 ops/s
# Warmup Iteration  26: 585531.823 ops/s
# Warmup Iteration  27: 583166.961 ops/s
# Warmup Iteration  28: 587582.799 ops/s
# Warmup Iteration  29: 586425.566 ops/s
# Warmup Iteration  30: 586324.462 ops/s
Iteration   1: 588783.009 ops/s
Iteration   2: 587102.258 ops/s
Iteration   3: 586735.975 ops/s
Iteration   4: 585177.427 ops/s
Iteration   5: 586593.360 ops/s
Iteration   6: 587185.074 ops/s
Iteration   7: 587123.368 ops/s
Iteration   8: 587081.182 ops/s
Iteration   9: 586623.998 ops/s
Iteration  10: 586259.156 ops/s
Iteration  11: 585765.133 ops/s
Iteration  12: 586871.671 ops/s
Iteration  13: 585863.891 ops/s
Iteration  14: 588765.923 ops/s
Iteration  15: 586603.086 ops/s
Iteration  16: 585020.858 ops/s
Iteration  17: 588161.641 ops/s
Iteration  18: 587873.375 ops/s
Iteration  19: 588320.112 ops/s
Iteration  20: 586073.884 ops/s
Iteration  21: 587917.390 ops/s
Iteration  22: 589249.131 ops/s
Iteration  23: 586795.421 ops/s
Iteration  24: 586785.322 ops/s
Iteration  25: 579518.501 ops/s
Iteration  26: 587587.767 ops/s
Iteration  27: 586161.326 ops/s
Iteration  28: 585258.630 ops/s
Iteration  29: 587579.847 ops/s
Iteration  30: 583932.070 ops/s


Result "org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_selectKeysMultiValues":
  586625.660 ±(99.9%) 1201.688 ops/s [Average]
  (min, avg, max) = (579518.501, 586625.660, 589249.131), stdev = 1798.631
  CI (99.9%): [585423.971, 587827.348] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
FastListMultimapTest._Benchmark.benchmark_selectKeysMultiValues  thrpt   30  586625.660 ± 1201.688  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_selectKeysValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_selectKeysValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 342468.571 ops/s
# Warmup Iteration   2: 785542.459 ops/s
# Warmup Iteration   3: 832307.468 ops/s
# Warmup Iteration   4: 769001.968 ops/s
# Warmup Iteration   5: 761543.287 ops/s
# Warmup Iteration   6: 837926.721 ops/s
# Warmup Iteration   7: 837238.802 ops/s
# Warmup Iteration   8: 838420.600 ops/s
# Warmup Iteration   9: 834911.636 ops/s
# Warmup Iteration  10: 832253.504 ops/s
# Warmup Iteration  11: 831114.306 ops/s
# Warmup Iteration  12: 836756.551 ops/s
# Warmup Iteration  13: 827244.787 ops/s
# Warmup Iteration  14: 835334.121 ops/s
# Warmup Iteration  15: 838139.135 ops/s
# Warmup Iteration  16: 836894.396 ops/s
# Warmup Iteration  17: 836602.804 ops/s
# Warmup Iteration  18: 837570.032 ops/s
# Warmup Iteration  19: 832088.873 ops/s
# Warmup Iteration  20: 835202.676 ops/s
# Warmup Iteration  21: 834238.894 ops/s
# Warmup Iteration  22: 836723.212 ops/s
# Warmup Iteration  23: 830378.749 ops/s
# Warmup Iteration  24: 835632.280 ops/s
# Warmup Iteration  25: 835932.741 ops/s
# Warmup Iteration  26: 834471.658 ops/s
# Warmup Iteration  27: 827996.079 ops/s
# Warmup Iteration  28: 838554.909 ops/s
# Warmup Iteration  29: 834706.011 ops/s
# Warmup Iteration  30: 836139.005 ops/s
Iteration   1: 839328.656 ops/s
Iteration   2: 837023.805 ops/s
Iteration   3: 834897.475 ops/s
Iteration   4: 833244.064 ops/s
Iteration   5: 838330.154 ops/s
Iteration   6: 834534.785 ops/s
Iteration   7: 834857.695 ops/s
Iteration   8: 836009.892 ops/s
Iteration   9: 833116.543 ops/s
Iteration  10: 835017.750 ops/s
Iteration  11: 841600.455 ops/s
Iteration  12: 838638.900 ops/s
Iteration  13: 837536.959 ops/s
Iteration  14: 834090.462 ops/s
Iteration  15: 830119.637 ops/s
Iteration  16: 833006.600 ops/s
Iteration  17: 810602.576 ops/s
Iteration  18: 836405.150 ops/s
Iteration  19: 834918.799 ops/s
Iteration  20: 837352.926 ops/s
Iteration  21: 838776.045 ops/s
Iteration  22: 833166.697 ops/s
Iteration  23: 835283.715 ops/s
Iteration  24: 836508.444 ops/s
Iteration  25: 838634.920 ops/s
Iteration  26: 832427.405 ops/s
Iteration  27: 837708.539 ops/s
Iteration  28: 839008.963 ops/s
Iteration  29: 834559.333 ops/s
Iteration  30: 837021.639 ops/s


Result "org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_selectKeysValues":
  835124.300 ±(99.9%) 3516.697 ops/s [Average]
  (min, avg, max) = (810602.576, 835124.300, 841600.455), stdev = 5263.627
  CI (99.9%): [831607.603, 838640.996] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
FastListMultimapTest._Benchmark.benchmark_selectKeysValues  thrpt   30  835124.300 ± 3516.697  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_serialization$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_serialization

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 48682.890 ops/s
# Warmup Iteration   2: 69663.818 ops/s
# Warmup Iteration   3: 98428.708 ops/s
# Warmup Iteration   4: 98169.283 ops/s
# Warmup Iteration   5: 98890.953 ops/s
# Warmup Iteration   6: 98893.947 ops/s
# Warmup Iteration   7: 98623.773 ops/s
# Warmup Iteration   8: 94589.666 ops/s
# Warmup Iteration   9: 87961.370 ops/s
# Warmup Iteration  10: 98978.506 ops/s
# Warmup Iteration  11: 98918.225 ops/s
# Warmup Iteration  12: 98435.127 ops/s
# Warmup Iteration  13: 98773.707 ops/s
# Warmup Iteration  14: 98939.450 ops/s
# Warmup Iteration  15: 99055.401 ops/s
# Warmup Iteration  16: 98830.420 ops/s
# Warmup Iteration  17: 98648.523 ops/s
# Warmup Iteration  18: 99040.814 ops/s
# Warmup Iteration  19: 98913.717 ops/s
# Warmup Iteration  20: 98507.064 ops/s
# Warmup Iteration  21: 98609.935 ops/s
# Warmup Iteration  22: 98833.061 ops/s
# Warmup Iteration  23: 98973.351 ops/s
# Warmup Iteration  24: 98675.730 ops/s
# Warmup Iteration  25: 99044.715 ops/s
# Warmup Iteration  26: 98854.750 ops/s
# Warmup Iteration  27: 98665.994 ops/s
# Warmup Iteration  28: 98999.707 ops/s
# Warmup Iteration  29: 98600.115 ops/s
# Warmup Iteration  30: 98889.720 ops/s
Iteration   1: 98604.596 ops/s
Iteration   2: 99155.431 ops/s
Iteration   3: 98719.638 ops/s
Iteration   4: 99109.604 ops/s
Iteration   5: 99191.794 ops/s
Iteration   6: 98842.427 ops/s
Iteration   7: 98791.059 ops/s
Iteration   8: 98888.107 ops/s
Iteration   9: 99128.257 ops/s
Iteration  10: 99003.356 ops/s
Iteration  11: 99017.212 ops/s
Iteration  12: 97050.819 ops/s
Iteration  13: 98351.321 ops/s
Iteration  14: 98638.710 ops/s
Iteration  15: 98738.997 ops/s
Iteration  16: 97510.190 ops/s
Iteration  17: 98015.415 ops/s
Iteration  18: 98710.314 ops/s
Iteration  19: 96148.339 ops/s
Iteration  20: 99018.085 ops/s
Iteration  21: 97495.155 ops/s
Iteration  22: 98687.490 ops/s
Iteration  23: 98253.664 ops/s
Iteration  24: 98939.014 ops/s
Iteration  25: 99353.403 ops/s
Iteration  26: 99179.914 ops/s
Iteration  27: 98367.923 ops/s
Iteration  28: 98676.330 ops/s
Iteration  29: 99161.557 ops/s
Iteration  30: 99036.711 ops/s


Result "org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_serialization":
  98592.828 ±(99.9%) 478.382 ops/s [Average]
  (min, avg, max) = (96148.339, 98592.828, 99353.403), stdev = 716.020
  CI (99.9%): [98114.446, 99071.210] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt      Score     Error  Units
FastListMultimapTest._Benchmark.benchmark_serialization  thrpt   30  98592.828 ± 478.382  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_sizeDistinct$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_sizeDistinct

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3240138.506 ops/s
# Warmup Iteration   2: 7733944.255 ops/s
# Warmup Iteration   3: 7772857.005 ops/s
# Warmup Iteration   4: 6475746.323 ops/s
# Warmup Iteration   5: 7960563.456 ops/s
# Warmup Iteration   6: 7748731.450 ops/s
# Warmup Iteration   7: 7769190.240 ops/s
# Warmup Iteration   8: 7871950.022 ops/s
# Warmup Iteration   9: 7755563.600 ops/s
# Warmup Iteration  10: 7779740.916 ops/s
# Warmup Iteration  11: 7748193.276 ops/s
# Warmup Iteration  12: 7775083.301 ops/s
# Warmup Iteration  13: 7836389.391 ops/s
# Warmup Iteration  14: 7798715.413 ops/s
# Warmup Iteration  15: 7958488.625 ops/s
# Warmup Iteration  16: 7725152.776 ops/s
# Warmup Iteration  17: 7804533.795 ops/s
# Warmup Iteration  18: 7805904.315 ops/s
# Warmup Iteration  19: 7852848.863 ops/s
# Warmup Iteration  20: 7925891.136 ops/s
# Warmup Iteration  21: 7629420.733 ops/s
# Warmup Iteration  22: 7841627.297 ops/s
# Warmup Iteration  23: 7913286.964 ops/s
# Warmup Iteration  24: 7778361.409 ops/s
# Warmup Iteration  25: 7958374.277 ops/s
# Warmup Iteration  26: 7888732.676 ops/s
# Warmup Iteration  27: 7811012.687 ops/s
# Warmup Iteration  28: 7726297.543 ops/s
# Warmup Iteration  29: 7909836.594 ops/s
# Warmup Iteration  30: 7879263.920 ops/s
Iteration   1: 7783188.924 ops/s
Iteration   2: 7953903.712 ops/s
Iteration   3: 7804218.211 ops/s
Iteration   4: 7830737.272 ops/s
Iteration   5: 7921832.020 ops/s
Iteration   6: 7837192.035 ops/s
Iteration   7: 7638149.695 ops/s
Iteration   8: 7901073.272 ops/s
Iteration   9: 7984676.964 ops/s
Iteration  10: 7775563.214 ops/s
Iteration  11: 7771649.235 ops/s
Iteration  12: 8019719.142 ops/s
Iteration  13: 8030318.115 ops/s
Iteration  14: 8010123.994 ops/s
Iteration  15: 7870787.469 ops/s
Iteration  16: 8050523.511 ops/s
Iteration  17: 7645951.173 ops/s
Iteration  18: 7634623.252 ops/s
Iteration  19: 8052393.161 ops/s
Iteration  20: 8047075.543 ops/s
Iteration  21: 7964821.940 ops/s
Iteration  22: 7922541.538 ops/s
Iteration  23: 7936905.285 ops/s
Iteration  24: 7893861.247 ops/s
Iteration  25: 7831573.770 ops/s
Iteration  26: 7714325.807 ops/s
Iteration  27: 7877639.892 ops/s
Iteration  28: 7721197.287 ops/s
Iteration  29: 7861350.082 ops/s
Iteration  30: 7666147.902 ops/s


Result "org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_sizeDistinct":
  7865135.489 ±(99.9%) 86567.503 ops/s [Average]
  (min, avg, max) = (7634623.252, 7865135.489, 8052393.161), stdev = 129570.173
  CI (99.9%): [7778567.986, 7951702.992] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
FastListMultimapTest._Benchmark.benchmark_sizeDistinct  thrpt   30  7865135.489 ± 86567.503  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_testEquals$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_testEquals

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 572135.658 ops/s
# Warmup Iteration   2: 1314438.517 ops/s
# Warmup Iteration   3: 1418732.980 ops/s
# Warmup Iteration   4: 1191360.787 ops/s
# Warmup Iteration   5: 1394630.041 ops/s
# Warmup Iteration   6: 1422900.463 ops/s
# Warmup Iteration   7: 1425020.640 ops/s
# Warmup Iteration   8: 1426633.021 ops/s
# Warmup Iteration   9: 1422881.497 ops/s
# Warmup Iteration  10: 1426155.471 ops/s
# Warmup Iteration  11: 1421501.466 ops/s
# Warmup Iteration  12: 1425493.432 ops/s
# Warmup Iteration  13: 1426217.565 ops/s
# Warmup Iteration  14: 1418853.531 ops/s
# Warmup Iteration  15: 1425522.942 ops/s
# Warmup Iteration  16: 1424749.678 ops/s
# Warmup Iteration  17: 1429816.892 ops/s
# Warmup Iteration  18: 1424962.456 ops/s
# Warmup Iteration  19: 1424243.995 ops/s
# Warmup Iteration  20: 1425815.502 ops/s
# Warmup Iteration  21: 1427319.216 ops/s
# Warmup Iteration  22: 1422198.057 ops/s
# Warmup Iteration  23: 1421628.679 ops/s
# Warmup Iteration  24: 1425018.343 ops/s
# Warmup Iteration  25: 1413197.466 ops/s
# Warmup Iteration  26: 1426066.130 ops/s
# Warmup Iteration  27: 1425540.362 ops/s
# Warmup Iteration  28: 1422735.827 ops/s
# Warmup Iteration  29: 1425004.892 ops/s
# Warmup Iteration  30: 1423640.775 ops/s
Iteration   1: 1421004.446 ops/s
Iteration   2: 1419947.624 ops/s
Iteration   3: 1425638.380 ops/s
Iteration   4: 1430533.912 ops/s
Iteration   5: 1424500.053 ops/s
Iteration   6: 1421320.362 ops/s
Iteration   7: 1424353.744 ops/s
Iteration   8: 1430083.825 ops/s
Iteration   9: 1407584.918 ops/s
Iteration  10: 1421555.796 ops/s
Iteration  11: 1425633.909 ops/s
Iteration  12: 1425176.728 ops/s
Iteration  13: 1409269.801 ops/s
Iteration  14: 1423904.975 ops/s
Iteration  15: 1426255.152 ops/s
Iteration  16: 1426927.388 ops/s
Iteration  17: 1422069.808 ops/s
Iteration  18: 1430451.388 ops/s
Iteration  19: 1427030.169 ops/s
Iteration  20: 1420482.374 ops/s
Iteration  21: 1422617.774 ops/s
Iteration  22: 1422313.822 ops/s
Iteration  23: 1425747.590 ops/s
Iteration  24: 1427438.919 ops/s
Iteration  25: 1427880.762 ops/s
Iteration  26: 1424516.900 ops/s
Iteration  27: 1421848.331 ops/s
Iteration  28: 1426721.642 ops/s
Iteration  29: 1425269.980 ops/s
Iteration  30: 1426289.576 ops/s


Result "org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_testEquals":
  1423812.335 ±(99.9%) 3386.703 ops/s [Average]
  (min, avg, max) = (1407584.918, 1423812.335, 1430533.912), stdev = 5069.058
  CI (99.9%): [1420425.632, 1427199.038] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
FastListMultimapTest._Benchmark.benchmark_testEquals  thrpt   30  1423812.335 ± 3386.703  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_testHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_testHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 498631.881 ops/s
# Warmup Iteration   2: 1072851.730 ops/s
# Warmup Iteration   3: 1141776.539 ops/s
# Warmup Iteration   4: 1146436.370 ops/s
# Warmup Iteration   5: 941898.710 ops/s
# Warmup Iteration   6: 1138924.727 ops/s
# Warmup Iteration   7: 1148291.566 ops/s
# Warmup Iteration   8: 1148378.362 ops/s
# Warmup Iteration   9: 1135381.977 ops/s
# Warmup Iteration  10: 1146227.686 ops/s
# Warmup Iteration  11: 1147741.057 ops/s
# Warmup Iteration  12: 1149236.423 ops/s
# Warmup Iteration  13: 1146588.048 ops/s
# Warmup Iteration  14: 1152072.333 ops/s
# Warmup Iteration  15: 1154373.697 ops/s
# Warmup Iteration  16: 1149905.294 ops/s
# Warmup Iteration  17: 1151312.545 ops/s
# Warmup Iteration  18: 1150767.458 ops/s
# Warmup Iteration  19: 1147012.842 ops/s
# Warmup Iteration  20: 1151254.599 ops/s
# Warmup Iteration  21: 1150655.276 ops/s
# Warmup Iteration  22: 1151826.427 ops/s
# Warmup Iteration  23: 1149565.379 ops/s
# Warmup Iteration  24: 1150595.529 ops/s
# Warmup Iteration  25: 1151874.690 ops/s
# Warmup Iteration  26: 1152595.421 ops/s
# Warmup Iteration  27: 1148068.704 ops/s
# Warmup Iteration  28: 1153121.543 ops/s
# Warmup Iteration  29: 1149861.979 ops/s
# Warmup Iteration  30: 1145574.582 ops/s
Iteration   1: 1147926.644 ops/s
Iteration   2: 1145852.783 ops/s
Iteration   3: 1151326.302 ops/s
Iteration   4: 1144980.625 ops/s
Iteration   5: 1146299.711 ops/s
Iteration   6: 1145344.740 ops/s
Iteration   7: 1150283.828 ops/s
Iteration   8: 1143644.271 ops/s
Iteration   9: 1154729.317 ops/s
Iteration  10: 1151317.428 ops/s
Iteration  11: 1152861.440 ops/s
Iteration  12: 1149863.316 ops/s
Iteration  13: 1150367.734 ops/s
Iteration  14: 1149437.610 ops/s
Iteration  15: 1153452.031 ops/s
Iteration  16: 1148750.901 ops/s
Iteration  17: 1148479.614 ops/s
Iteration  18: 1149820.300 ops/s
Iteration  19: 1154276.564 ops/s
Iteration  20: 1144843.229 ops/s
Iteration  21: 1149635.655 ops/s
Iteration  22: 1145235.911 ops/s
Iteration  23: 1153664.849 ops/s
Iteration  24: 1147762.802 ops/s
Iteration  25: 1147363.439 ops/s
Iteration  26: 1151531.398 ops/s
Iteration  27: 1150168.197 ops/s
Iteration  28: 1150308.434 ops/s
Iteration  29: 1151216.552 ops/s
Iteration  30: 1150218.816 ops/s


Result "org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_testHashCode":
  1149365.481 ±(99.9%) 1992.353 ops/s [Average]
  (min, avg, max) = (1143644.271, 1149365.481, 1154729.317), stdev = 2982.060
  CI (99.9%): [1147373.128, 1151357.834] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
FastListMultimapTest._Benchmark.benchmark_testHashCode  thrpt   30  1149365.481 ± 1992.353  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_testNewMultimap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_testNewMultimap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1304533.473 ops/s
# Warmup Iteration   2: 3470892.404 ops/s
# Warmup Iteration   3: 3452573.286 ops/s
# Warmup Iteration   4: 2900943.474 ops/s
# Warmup Iteration   5: 3457773.734 ops/s
# Warmup Iteration   6: 3467091.981 ops/s
# Warmup Iteration   7: 3460031.791 ops/s
# Warmup Iteration   8: 3463888.751 ops/s
# Warmup Iteration   9: 3462039.870 ops/s
# Warmup Iteration  10: 3463454.829 ops/s
# Warmup Iteration  11: 3468979.525 ops/s
# Warmup Iteration  12: 3466847.320 ops/s
# Warmup Iteration  13: 3469955.275 ops/s
# Warmup Iteration  14: 3457441.183 ops/s
# Warmup Iteration  15: 3463587.366 ops/s
# Warmup Iteration  16: 3473329.159 ops/s
# Warmup Iteration  17: 3470659.847 ops/s
# Warmup Iteration  18: 3475029.473 ops/s
# Warmup Iteration  19: 3467857.048 ops/s
# Warmup Iteration  20: 3454606.237 ops/s
# Warmup Iteration  21: 3467946.539 ops/s
# Warmup Iteration  22: 3468430.901 ops/s
# Warmup Iteration  23: 3475229.035 ops/s
# Warmup Iteration  24: 3471337.511 ops/s
# Warmup Iteration  25: 3465233.605 ops/s
# Warmup Iteration  26: 3461343.049 ops/s
# Warmup Iteration  27: 3471967.336 ops/s
# Warmup Iteration  28: 3466895.525 ops/s
# Warmup Iteration  29: 3470644.861 ops/s
# Warmup Iteration  30: 3462755.067 ops/s
Iteration   1: 3452979.591 ops/s
Iteration   2: 3469468.264 ops/s
Iteration   3: 3463637.294 ops/s
Iteration   4: 3464449.733 ops/s
Iteration   5: 3471307.608 ops/s
Iteration   6: 3462243.951 ops/s
Iteration   7: 3469800.225 ops/s
Iteration   8: 3456336.595 ops/s
Iteration   9: 3466433.937 ops/s
Iteration  10: 3454617.324 ops/s
Iteration  11: 3459460.506 ops/s
Iteration  12: 3462694.778 ops/s
Iteration  13: 3458814.711 ops/s
Iteration  14: 3459994.236 ops/s
Iteration  15: 3453956.738 ops/s
Iteration  16: 3470897.023 ops/s
Iteration  17: 3463179.058 ops/s
Iteration  18: 3463555.141 ops/s
Iteration  19: 3467079.324 ops/s
Iteration  20: 3474075.396 ops/s
Iteration  21: 3475260.934 ops/s
Iteration  22: 3457529.003 ops/s
Iteration  23: 3472726.307 ops/s
Iteration  24: 3467994.557 ops/s
Iteration  25: 3461825.813 ops/s
Iteration  26: 3465155.057 ops/s
Iteration  27: 3476275.966 ops/s
Iteration  28: 3462035.113 ops/s
Iteration  29: 3450986.833 ops/s
Iteration  30: 3461961.507 ops/s


Result "org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_testNewMultimap":
  3463891.084 ±(99.9%) 4498.288 ops/s [Average]
  (min, avg, max) = (3450986.833, 3463891.084, 3476275.966), stdev = 6732.826
  CI (99.9%): [3459392.796, 3468389.372] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
FastListMultimapTest._Benchmark.benchmark_testNewMultimap  thrpt   30  3463891.084 ± 4498.288  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_testNewMultimapWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_testNewMultimapWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 712274.453 ops/s
# Warmup Iteration   2: 1504044.437 ops/s
# Warmup Iteration   3: 1607800.691 ops/s
# Warmup Iteration   4: 1614467.521 ops/s
# Warmup Iteration   5: 1313386.120 ops/s
# Warmup Iteration   6: 1621290.207 ops/s
# Warmup Iteration   7: 1604764.523 ops/s
# Warmup Iteration   8: 1622591.624 ops/s
# Warmup Iteration   9: 1613148.112 ops/s
# Warmup Iteration  10: 1593448.703 ops/s
# Warmup Iteration  11: 1618810.819 ops/s
# Warmup Iteration  12: 1616578.150 ops/s
# Warmup Iteration  13: 1608676.060 ops/s
# Warmup Iteration  14: 1619003.745 ops/s
# Warmup Iteration  15: 1618184.791 ops/s
# Warmup Iteration  16: 1616793.455 ops/s
# Warmup Iteration  17: 1616939.688 ops/s
# Warmup Iteration  18: 1605937.968 ops/s
# Warmup Iteration  19: 1618965.187 ops/s
# Warmup Iteration  20: 1607625.253 ops/s
# Warmup Iteration  21: 1616662.938 ops/s
# Warmup Iteration  22: 1625134.696 ops/s
# Warmup Iteration  23: 1605224.235 ops/s
# Warmup Iteration  24: 1620858.394 ops/s
# Warmup Iteration  25: 1620778.404 ops/s
# Warmup Iteration  26: 1622043.148 ops/s
# Warmup Iteration  27: 1611810.226 ops/s
# Warmup Iteration  28: 1619802.688 ops/s
# Warmup Iteration  29: 1605236.209 ops/s
# Warmup Iteration  30: 1617700.553 ops/s
Iteration   1: 1617449.967 ops/s
Iteration   2: 1614440.711 ops/s
Iteration   3: 1623243.388 ops/s
Iteration   4: 1623097.205 ops/s
Iteration   5: 1615699.599 ops/s
Iteration   6: 1617402.652 ops/s
Iteration   7: 1620363.556 ops/s
Iteration   8: 1608596.768 ops/s
Iteration   9: 1619955.870 ops/s
Iteration  10: 1623698.566 ops/s
Iteration  11: 1622848.766 ops/s
Iteration  12: 1617265.585 ops/s
Iteration  13: 1617784.621 ops/s
Iteration  14: 1619595.100 ops/s
Iteration  15: 1619422.270 ops/s
Iteration  16: 1620329.432 ops/s
Iteration  17: 1621629.613 ops/s
Iteration  18: 1622784.758 ops/s
Iteration  19: 1620556.023 ops/s
Iteration  20: 1623938.635 ops/s
Iteration  21: 1621813.031 ops/s
Iteration  22: 1624485.677 ops/s
Iteration  23: 1618831.479 ops/s
Iteration  24: 1621081.156 ops/s
Iteration  25: 1616738.288 ops/s
Iteration  26: 1625716.127 ops/s
Iteration  27: 1614690.100 ops/s
Iteration  28: 1621230.371 ops/s
Iteration  29: 1624959.699 ops/s
Iteration  30: 1624468.622 ops/s


Result "org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_testNewMultimapWith":
  1620137.255 ±(99.9%) 2533.224 ops/s [Average]
  (min, avg, max) = (1608596.768, 1620137.255, 1625716.127), stdev = 3791.611
  CI (99.9%): [1617604.030, 1622670.479] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
FastListMultimapTest._Benchmark.benchmark_testNewMultimapWith  thrpt   30  1620137.255 ± 2533.224  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_testNewMultimapWithKeyValue$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_testNewMultimapWithKeyValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 465855.132 ops/s
# Warmup Iteration   2: 1341737.104 ops/s
# Warmup Iteration   3: 1362607.175 ops/s
# Warmup Iteration   4: 1144430.385 ops/s
# Warmup Iteration   5: 1371308.449 ops/s
# Warmup Iteration   6: 1363865.611 ops/s
# Warmup Iteration   7: 1363657.295 ops/s
# Warmup Iteration   8: 1362760.375 ops/s
# Warmup Iteration   9: 1367753.788 ops/s
# Warmup Iteration  10: 1364401.882 ops/s
# Warmup Iteration  11: 1367164.655 ops/s
# Warmup Iteration  12: 1363338.423 ops/s
# Warmup Iteration  13: 1367348.035 ops/s
# Warmup Iteration  14: 1370907.105 ops/s
# Warmup Iteration  15: 1371602.223 ops/s
# Warmup Iteration  16: 1366938.882 ops/s
# Warmup Iteration  17: 1361642.832 ops/s
# Warmup Iteration  18: 1370435.313 ops/s
# Warmup Iteration  19: 1369623.031 ops/s
# Warmup Iteration  20: 1369368.732 ops/s
# Warmup Iteration  21: 1369778.525 ops/s
# Warmup Iteration  22: 1370172.503 ops/s
# Warmup Iteration  23: 1373563.931 ops/s
# Warmup Iteration  24: 1360299.201 ops/s
# Warmup Iteration  25: 1375831.490 ops/s
# Warmup Iteration  26: 1372677.275 ops/s
# Warmup Iteration  27: 1372113.958 ops/s
# Warmup Iteration  28: 1361525.730 ops/s
# Warmup Iteration  29: 1372726.622 ops/s
# Warmup Iteration  30: 1372744.781 ops/s
Iteration   1: 1348354.751 ops/s
Iteration   2: 1370708.679 ops/s
Iteration   3: 1374176.860 ops/s
Iteration   4: 1374986.000 ops/s
Iteration   5: 1375687.933 ops/s
Iteration   6: 1372297.811 ops/s
Iteration   7: 1344725.222 ops/s
Iteration   8: 1365741.164 ops/s
Iteration   9: 1352857.320 ops/s
Iteration  10: 1355952.584 ops/s
Iteration  11: 1373276.326 ops/s
Iteration  12: 1350693.788 ops/s
Iteration  13: 1368484.642 ops/s
Iteration  14: 1374518.837 ops/s
Iteration  15: 1369679.553 ops/s
Iteration  16: 1374229.778 ops/s
Iteration  17: 1372721.202 ops/s
Iteration  18: 1373062.576 ops/s
Iteration  19: 1364101.548 ops/s
Iteration  20: 1348742.264 ops/s
Iteration  21: 1370510.366 ops/s
Iteration  22: 1377230.969 ops/s
Iteration  23: 1375140.756 ops/s
Iteration  24: 1371748.200 ops/s
Iteration  25: 1368802.708 ops/s
Iteration  26: 1365907.824 ops/s
Iteration  27: 1352872.715 ops/s
Iteration  28: 1372890.674 ops/s
Iteration  29: 1374703.800 ops/s
Iteration  30: 1369549.837 ops/s


Result "org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_testNewMultimapWithKeyValue":
  1366811.890 ±(99.9%) 6499.029 ops/s [Average]
  (min, avg, max) = (1344725.222, 1366811.890, 1377230.969), stdev = 9727.441
  CI (99.9%): [1360312.861, 1373310.918] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
FastListMultimapTest._Benchmark.benchmark_testNewMultimapWithKeyValue  thrpt   30  1366811.890 ± 6499.029  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_testNewMultimapWithWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_testNewMultimapWithWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 391115.246 ops/s
# Warmup Iteration   2: 1102717.762 ops/s
# Warmup Iteration   3: 1116429.226 ops/s
# Warmup Iteration   4: 943000.341 ops/s
# Warmup Iteration   5: 1123445.000 ops/s
# Warmup Iteration   6: 1119471.604 ops/s
# Warmup Iteration   7: 1123196.446 ops/s
# Warmup Iteration   8: 1121454.902 ops/s
# Warmup Iteration   9: 1120988.610 ops/s
# Warmup Iteration  10: 1122212.213 ops/s
# Warmup Iteration  11: 1121435.008 ops/s
# Warmup Iteration  12: 1122878.705 ops/s
# Warmup Iteration  13: 1118106.110 ops/s
# Warmup Iteration  14: 1118592.207 ops/s
# Warmup Iteration  15: 1121875.119 ops/s
# Warmup Iteration  16: 1118231.542 ops/s
# Warmup Iteration  17: 1122278.055 ops/s
# Warmup Iteration  18: 1119521.127 ops/s
# Warmup Iteration  19: 1120494.362 ops/s
# Warmup Iteration  20: 1117903.056 ops/s
# Warmup Iteration  21: 1117988.995 ops/s
# Warmup Iteration  22: 1122314.687 ops/s
# Warmup Iteration  23: 1119960.326 ops/s
# Warmup Iteration  24: 1124805.183 ops/s
# Warmup Iteration  25: 1109082.511 ops/s
# Warmup Iteration  26: 1119025.166 ops/s
# Warmup Iteration  27: 1119463.513 ops/s
# Warmup Iteration  28: 1119392.824 ops/s
# Warmup Iteration  29: 1124039.141 ops/s
# Warmup Iteration  30: 1118778.666 ops/s
Iteration   1: 1122121.463 ops/s
Iteration   2: 1105867.898 ops/s
Iteration   3: 1121332.422 ops/s
Iteration   4: 1122197.671 ops/s
Iteration   5: 1121353.426 ops/s
Iteration   6: 1103669.990 ops/s
Iteration   7: 1120509.345 ops/s
Iteration   8: 1119726.559 ops/s
Iteration   9: 1120803.739 ops/s
Iteration  10: 1119490.290 ops/s
Iteration  11: 1115043.253 ops/s
Iteration  12: 1118533.273 ops/s
Iteration  13: 1120999.874 ops/s
Iteration  14: 1122239.300 ops/s
Iteration  15: 1113580.726 ops/s
Iteration  16: 1126676.281 ops/s
Iteration  17: 1121518.047 ops/s
Iteration  18: 1121482.532 ops/s
Iteration  19: 1121853.322 ops/s
Iteration  20: 1122417.106 ops/s
Iteration  21: 1119388.979 ops/s
Iteration  22: 1122420.762 ops/s
Iteration  23: 1119927.254 ops/s
Iteration  24: 1097648.398 ops/s
Iteration  25: 1118286.362 ops/s
Iteration  26: 1123261.894 ops/s
Iteration  27: 1121754.942 ops/s
Iteration  28: 1125114.580 ops/s
Iteration  29: 1123186.567 ops/s
Iteration  30: 1121435.247 ops/s


Result "org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_testNewMultimapWithWith":
  1119128.050 ±(99.9%) 4208.929 ops/s [Average]
  (min, avg, max) = (1097648.398, 1119128.050, 1126676.281), stdev = 6299.728
  CI (99.9%): [1114919.121, 1123336.979] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
FastListMultimapTest._Benchmark.benchmark_testNewMultimapWithWith  thrpt   30  1119128.050 ± 4208.929  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_testNewMultimapWithWithWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_testNewMultimapWithWithWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 328843.136 ops/s
# Warmup Iteration   2: 856865.296 ops/s
# Warmup Iteration   3: 898496.887 ops/s
# Warmup Iteration   4: 755375.151 ops/s
# Warmup Iteration   5: 906632.663 ops/s
# Warmup Iteration   6: 901987.468 ops/s
# Warmup Iteration   7: 903874.879 ops/s
# Warmup Iteration   8: 889860.220 ops/s
# Warmup Iteration   9: 904122.488 ops/s
# Warmup Iteration  10: 907770.083 ops/s
# Warmup Iteration  11: 902484.036 ops/s
# Warmup Iteration  12: 904692.279 ops/s
# Warmup Iteration  13: 896168.761 ops/s
# Warmup Iteration  14: 903612.484 ops/s
# Warmup Iteration  15: 901752.126 ops/s
# Warmup Iteration  16: 901111.838 ops/s
# Warmup Iteration  17: 902770.504 ops/s
# Warmup Iteration  18: 904541.559 ops/s
# Warmup Iteration  19: 903274.855 ops/s
# Warmup Iteration  20: 905093.767 ops/s
# Warmup Iteration  21: 902325.924 ops/s
# Warmup Iteration  22: 907555.977 ops/s
# Warmup Iteration  23: 906558.520 ops/s
# Warmup Iteration  24: 907297.991 ops/s
# Warmup Iteration  25: 905938.630 ops/s
# Warmup Iteration  26: 898924.790 ops/s
# Warmup Iteration  27: 900236.375 ops/s
# Warmup Iteration  28: 904229.695 ops/s
# Warmup Iteration  29: 904322.061 ops/s
# Warmup Iteration  30: 896989.213 ops/s
Iteration   1: 899569.331 ops/s
Iteration   2: 904135.877 ops/s
Iteration   3: 905858.432 ops/s
Iteration   4: 898506.829 ops/s
Iteration   5: 904738.605 ops/s
Iteration   6: 905783.146 ops/s
Iteration   7: 906021.472 ops/s
Iteration   8: 907123.021 ops/s
Iteration   9: 898901.751 ops/s
Iteration  10: 902820.165 ops/s
Iteration  11: 903449.538 ops/s
Iteration  12: 907812.887 ops/s
Iteration  13: 899589.933 ops/s
Iteration  14: 900989.572 ops/s
Iteration  15: 900312.439 ops/s
Iteration  16: 907314.969 ops/s
Iteration  17: 901233.624 ops/s
Iteration  18: 901648.749 ops/s
Iteration  19: 904073.754 ops/s
Iteration  20: 903905.768 ops/s
Iteration  21: 905150.067 ops/s
Iteration  22: 890473.498 ops/s
Iteration  23: 908941.847 ops/s
Iteration  24: 902242.269 ops/s
Iteration  25: 906031.342 ops/s
Iteration  26: 908821.493 ops/s
Iteration  27: 903669.879 ops/s
Iteration  28: 906482.929 ops/s
Iteration  29: 905399.708 ops/s
Iteration  30: 906122.888 ops/s


Result "org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_testNewMultimapWithWithWith":
  903570.859 ±(99.9%) 2559.932 ops/s [Average]
  (min, avg, max) = (890473.498, 903570.859, 908941.847), stdev = 3831.586
  CI (99.9%): [901010.927, 906130.791] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
FastListMultimapTest._Benchmark.benchmark_testNewMultimapWithWithWith  thrpt   30  903570.859 ± 2559.932  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_testNewMultimapWithWithWithWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_testNewMultimapWithWithWithWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 306886.057 ops/s
# Warmup Iteration   2: 751423.634 ops/s
# Warmup Iteration   3: 791013.607 ops/s
# Warmup Iteration   4: 678114.138 ops/s
# Warmup Iteration   5: 774326.878 ops/s
# Warmup Iteration   6: 791871.465 ops/s
# Warmup Iteration   7: 792534.171 ops/s
# Warmup Iteration   8: 793396.665 ops/s
# Warmup Iteration   9: 787842.308 ops/s
# Warmup Iteration  10: 792252.440 ops/s
# Warmup Iteration  11: 795312.555 ops/s
# Warmup Iteration  12: 792870.716 ops/s
# Warmup Iteration  13: 792339.845 ops/s
# Warmup Iteration  14: 792373.185 ops/s
# Warmup Iteration  15: 787573.953 ops/s
# Warmup Iteration  16: 791524.666 ops/s
# Warmup Iteration  17: 789552.549 ops/s
# Warmup Iteration  18: 793675.226 ops/s
# Warmup Iteration  19: 790959.553 ops/s
# Warmup Iteration  20: 790585.695 ops/s
# Warmup Iteration  21: 785456.271 ops/s
# Warmup Iteration  22: 792142.454 ops/s
# Warmup Iteration  23: 793988.377 ops/s
# Warmup Iteration  24: 791955.260 ops/s
# Warmup Iteration  25: 793181.934 ops/s
# Warmup Iteration  26: 791146.544 ops/s
# Warmup Iteration  27: 785806.883 ops/s
# Warmup Iteration  28: 792971.993 ops/s
# Warmup Iteration  29: 795216.628 ops/s
# Warmup Iteration  30: 793535.366 ops/s
Iteration   1: 791491.015 ops/s
Iteration   2: 792541.285 ops/s
Iteration   3: 789161.134 ops/s
Iteration   4: 789747.519 ops/s
Iteration   5: 792453.550 ops/s
Iteration   6: 790776.408 ops/s
Iteration   7: 787501.429 ops/s
Iteration   8: 789613.589 ops/s
Iteration   9: 792380.466 ops/s
Iteration  10: 791618.870 ops/s
Iteration  11: 793687.843 ops/s
Iteration  12: 792820.460 ops/s
Iteration  13: 789971.039 ops/s
Iteration  14: 791199.785 ops/s
Iteration  15: 788694.421 ops/s
Iteration  16: 793204.606 ops/s
Iteration  17: 796643.707 ops/s
Iteration  18: 788670.669 ops/s
Iteration  19: 788408.506 ops/s
Iteration  20: 793029.673 ops/s
Iteration  21: 791247.940 ops/s
Iteration  22: 792533.033 ops/s
Iteration  23: 794030.275 ops/s
Iteration  24: 790549.990 ops/s
Iteration  25: 791196.950 ops/s
Iteration  26: 792137.358 ops/s
Iteration  27: 790877.219 ops/s
Iteration  28: 786029.128 ops/s
Iteration  29: 784015.697 ops/s
Iteration  30: 792534.437 ops/s


Result "org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_testNewMultimapWithWithWithWith":
  790958.933 ±(99.9%) 1687.675 ops/s [Average]
  (min, avg, max) = (784015.697, 790958.933, 796643.707), stdev = 2526.033
  CI (99.9%): [789271.258, 792646.608] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
FastListMultimapTest._Benchmark.benchmark_testNewMultimapWithWithWithWith  thrpt   30  790958.933 ± 1687.675  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1745857.979 ops/s
# Warmup Iteration   2: 4292788.296 ops/s
# Warmup Iteration   3: 4313296.427 ops/s
# Warmup Iteration   4: 3568260.519 ops/s
# Warmup Iteration   5: 4245077.514 ops/s
# Warmup Iteration   6: 4275775.610 ops/s
# Warmup Iteration   7: 4307708.029 ops/s
# Warmup Iteration   8: 4306494.592 ops/s
# Warmup Iteration   9: 4278943.488 ops/s
# Warmup Iteration  10: 4305418.373 ops/s
# Warmup Iteration  11: 4316659.612 ops/s
# Warmup Iteration  12: 4275336.404 ops/s
# Warmup Iteration  13: 4288215.504 ops/s
# Warmup Iteration  14: 4306815.415 ops/s
# Warmup Iteration  15: 4278437.032 ops/s
# Warmup Iteration  16: 4299340.270 ops/s
# Warmup Iteration  17: 4305607.052 ops/s
# Warmup Iteration  18: 4333532.923 ops/s
# Warmup Iteration  19: 4307898.434 ops/s
# Warmup Iteration  20: 4316303.133 ops/s
# Warmup Iteration  21: 4286244.759 ops/s
# Warmup Iteration  22: 4291625.636 ops/s
# Warmup Iteration  23: 4317741.104 ops/s
# Warmup Iteration  24: 4314180.872 ops/s
# Warmup Iteration  25: 4312920.316 ops/s
# Warmup Iteration  26: 4329188.702 ops/s
# Warmup Iteration  27: 4321548.257 ops/s
# Warmup Iteration  28: 4279774.297 ops/s
# Warmup Iteration  29: 4317018.715 ops/s
# Warmup Iteration  30: 4315637.799 ops/s
Iteration   1: 4332016.833 ops/s
Iteration   2: 4325651.998 ops/s
Iteration   3: 4318736.544 ops/s
Iteration   4: 4284918.221 ops/s
Iteration   5: 4267415.124 ops/s
Iteration   6: 4315728.557 ops/s
Iteration   7: 4305656.444 ops/s
Iteration   8: 4311230.231 ops/s
Iteration   9: 4334126.152 ops/s
Iteration  10: 4293620.606 ops/s
Iteration  11: 4329296.926 ops/s
Iteration  12: 4333203.530 ops/s
Iteration  13: 4334778.408 ops/s
Iteration  14: 4295783.186 ops/s
Iteration  15: 4309311.952 ops/s
Iteration  16: 4286922.087 ops/s
Iteration  17: 4308395.715 ops/s
Iteration  18: 4280880.372 ops/s
Iteration  19: 4306924.288 ops/s
Iteration  20: 4323667.675 ops/s
Iteration  21: 4280539.480 ops/s
Iteration  22: 4334346.753 ops/s
Iteration  23: 4314709.462 ops/s
Iteration  24: 4325617.419 ops/s
Iteration  25: 4339672.085 ops/s
Iteration  26: 4330297.998 ops/s
Iteration  27: 4328181.696 ops/s
Iteration  28: 4311833.532 ops/s
Iteration  29: 4308719.449 ops/s
Iteration  30: 4308624.162 ops/s


Result "org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_testToString":
  4312693.563 ±(99.9%) 12772.061 ops/s [Average]
  (min, avg, max) = (4267415.124, 4312693.563, 4339672.085), stdev = 19116.621
  CI (99.9%): [4299921.502, 4325465.624] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
FastListMultimapTest._Benchmark.benchmark_testToString  thrpt   30  4312693.563 ± 12772.061  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_toImmutable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_toImmutable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1002354.826 ops/s
# Warmup Iteration   2: 2208593.660 ops/s
# Warmup Iteration   3: 2367723.833 ops/s
# Warmup Iteration   4: 2366114.982 ops/s
# Warmup Iteration   5: 1959109.932 ops/s
# Warmup Iteration   6: 2369389.618 ops/s
# Warmup Iteration   7: 2366971.342 ops/s
# Warmup Iteration   8: 2373703.067 ops/s
# Warmup Iteration   9: 2360538.232 ops/s
# Warmup Iteration  10: 2379684.438 ops/s
# Warmup Iteration  11: 2383172.660 ops/s
# Warmup Iteration  12: 2370143.723 ops/s
# Warmup Iteration  13: 2361584.457 ops/s
# Warmup Iteration  14: 2366246.690 ops/s
# Warmup Iteration  15: 2368520.609 ops/s
# Warmup Iteration  16: 2363251.186 ops/s
# Warmup Iteration  17: 2379007.747 ops/s
# Warmup Iteration  18: 2362773.052 ops/s
# Warmup Iteration  19: 2374864.357 ops/s
# Warmup Iteration  20: 2376470.800 ops/s
# Warmup Iteration  21: 2373197.306 ops/s
# Warmup Iteration  22: 2369225.937 ops/s
# Warmup Iteration  23: 2374860.631 ops/s
# Warmup Iteration  24: 2374009.469 ops/s
# Warmup Iteration  25: 2357505.253 ops/s
# Warmup Iteration  26: 2361808.864 ops/s
# Warmup Iteration  27: 2374895.411 ops/s
# Warmup Iteration  28: 2356421.799 ops/s
# Warmup Iteration  29: 2370771.683 ops/s
# Warmup Iteration  30: 2368719.739 ops/s
Iteration   1: 2368805.410 ops/s
Iteration   2: 2357595.394 ops/s
Iteration   3: 2353824.803 ops/s
Iteration   4: 2344369.706 ops/s
Iteration   5: 2382222.838 ops/s
Iteration   6: 2370052.622 ops/s
Iteration   7: 2373175.179 ops/s
Iteration   8: 2373904.316 ops/s
Iteration   9: 2376017.853 ops/s
Iteration  10: 2376062.000 ops/s
Iteration  11: 2367142.593 ops/s
Iteration  12: 2364148.548 ops/s
Iteration  13: 2374312.046 ops/s
Iteration  14: 2362988.224 ops/s
Iteration  15: 2371947.869 ops/s
Iteration  16: 2361291.612 ops/s
Iteration  17: 2360665.562 ops/s
Iteration  18: 2383922.685 ops/s
Iteration  19: 2367952.175 ops/s
Iteration  20: 2367196.880 ops/s
Iteration  21: 2380341.866 ops/s
Iteration  22: 2374101.511 ops/s
Iteration  23: 2369774.339 ops/s
Iteration  24: 2378248.597 ops/s
Iteration  25: 2374370.061 ops/s
Iteration  26: 2373401.465 ops/s
Iteration  27: 2374876.382 ops/s
Iteration  28: 2362287.114 ops/s
Iteration  29: 2358936.206 ops/s
Iteration  30: 2343469.721 ops/s


Result "org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_toImmutable":
  2368246.853 ±(99.9%) 6616.557 ops/s [Average]
  (min, avg, max) = (2343469.721, 2368246.853, 2383922.685), stdev = 9903.352
  CI (99.9%): [2361630.295, 2374863.410] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
FastListMultimapTest._Benchmark.benchmark_toImmutable  thrpt   30  2368246.853 ± 6616.557  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_toMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_toMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 864007.580 ops/s
# Warmup Iteration   2: 2207176.207 ops/s
# Warmup Iteration   3: 2258864.653 ops/s
# Warmup Iteration   4: 1824637.246 ops/s
# Warmup Iteration   5: 2253648.954 ops/s
# Warmup Iteration   6: 2253431.200 ops/s
# Warmup Iteration   7: 2260406.177 ops/s
# Warmup Iteration   8: 2262257.308 ops/s
# Warmup Iteration   9: 2265646.195 ops/s
# Warmup Iteration  10: 2254451.271 ops/s
# Warmup Iteration  11: 2245859.221 ops/s
# Warmup Iteration  12: 2260677.129 ops/s
# Warmup Iteration  13: 2251773.986 ops/s
# Warmup Iteration  14: 2255324.174 ops/s
# Warmup Iteration  15: 2249693.008 ops/s
# Warmup Iteration  16: 2265342.232 ops/s
# Warmup Iteration  17: 2258091.545 ops/s
# Warmup Iteration  18: 2255594.997 ops/s
# Warmup Iteration  19: 2221372.924 ops/s
# Warmup Iteration  20: 2245631.177 ops/s
# Warmup Iteration  21: 2262111.511 ops/s
# Warmup Iteration  22: 2257034.409 ops/s
# Warmup Iteration  23: 2243997.019 ops/s
# Warmup Iteration  24: 2268298.391 ops/s
# Warmup Iteration  25: 2249175.068 ops/s
# Warmup Iteration  26: 2255905.133 ops/s
# Warmup Iteration  27: 2250934.509 ops/s
# Warmup Iteration  28: 2253324.600 ops/s
# Warmup Iteration  29: 2258251.540 ops/s
# Warmup Iteration  30: 2266414.248 ops/s
Iteration   1: 2268020.170 ops/s
Iteration   2: 2259965.493 ops/s
Iteration   3: 2263436.470 ops/s
Iteration   4: 2263519.664 ops/s
Iteration   5: 2261709.622 ops/s
Iteration   6: 2261954.700 ops/s
Iteration   7: 2268979.778 ops/s
Iteration   8: 2269667.433 ops/s
Iteration   9: 2258645.178 ops/s
Iteration  10: 2253072.128 ops/s
Iteration  11: 2255639.637 ops/s
Iteration  12: 2252326.879 ops/s
Iteration  13: 2283752.372 ops/s
Iteration  14: 2257944.267 ops/s
Iteration  15: 2256919.186 ops/s
Iteration  16: 2254412.688 ops/s
Iteration  17: 2262533.069 ops/s
Iteration  18: 2265426.622 ops/s
Iteration  19: 2257078.411 ops/s
Iteration  20: 2262770.481 ops/s
Iteration  21: 2262956.137 ops/s
Iteration  22: 2252960.572 ops/s
Iteration  23: 2260393.439 ops/s
Iteration  24: 2265690.066 ops/s
Iteration  25: 2264621.102 ops/s
Iteration  26: 2257244.371 ops/s
Iteration  27: 2263826.497 ops/s
Iteration  28: 2262566.777 ops/s
Iteration  29: 2261451.072 ops/s
Iteration  30: 2263322.301 ops/s


Result "org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_toMap":
  2261760.219 ±(99.9%) 4151.028 ops/s [Average]
  (min, avg, max) = (2252326.879, 2261760.219, 2283752.372), stdev = 6213.064
  CI (99.9%): [2257609.191, 2265911.247] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score      Error  Units
FastListMultimapTest._Benchmark.benchmark_toMap  thrpt   30  2261760.219 ± 4151.028  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_toMapWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_toMapWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 855858.540 ops/s
# Warmup Iteration   2: 1705406.467 ops/s
# Warmup Iteration   3: 1892165.808 ops/s
# Warmup Iteration   4: 1893766.569 ops/s
# Warmup Iteration   5: 1563735.329 ops/s
# Warmup Iteration   6: 1883893.490 ops/s
# Warmup Iteration   7: 1895663.191 ops/s
# Warmup Iteration   8: 1901275.471 ops/s
# Warmup Iteration   9: 1900561.554 ops/s
# Warmup Iteration  10: 1893353.598 ops/s
# Warmup Iteration  11: 1901862.243 ops/s
# Warmup Iteration  12: 1900519.349 ops/s
# Warmup Iteration  13: 1902275.693 ops/s
# Warmup Iteration  14: 1895187.406 ops/s
# Warmup Iteration  15: 1881802.786 ops/s
# Warmup Iteration  16: 1900768.647 ops/s
# Warmup Iteration  17: 1898040.312 ops/s
# Warmup Iteration  18: 1897908.030 ops/s
# Warmup Iteration  19: 1897048.484 ops/s
# Warmup Iteration  20: 1897774.924 ops/s
# Warmup Iteration  21: 1895259.868 ops/s
# Warmup Iteration  22: 1886737.581 ops/s
# Warmup Iteration  23: 1897985.635 ops/s
# Warmup Iteration  24: 1894620.168 ops/s
# Warmup Iteration  25: 1895573.763 ops/s
# Warmup Iteration  26: 1882974.632 ops/s
# Warmup Iteration  27: 1905259.880 ops/s
# Warmup Iteration  28: 1901381.414 ops/s
# Warmup Iteration  29: 1898373.461 ops/s
# Warmup Iteration  30: 1901166.249 ops/s
Iteration   1: 1897485.581 ops/s
Iteration   2: 1897580.755 ops/s
Iteration   3: 1897440.691 ops/s
Iteration   4: 1896842.355 ops/s
Iteration   5: 1901069.962 ops/s
Iteration   6: 1897818.318 ops/s
Iteration   7: 1893088.940 ops/s
Iteration   8: 1899042.203 ops/s
Iteration   9: 1903180.261 ops/s
Iteration  10: 1899598.460 ops/s
Iteration  11: 1899117.202 ops/s
Iteration  12: 1902699.092 ops/s
Iteration  13: 1904766.500 ops/s
Iteration  14: 1893857.471 ops/s
Iteration  15: 1905542.708 ops/s
Iteration  16: 1902644.483 ops/s
Iteration  17: 1899685.821 ops/s
Iteration  18: 1892809.007 ops/s
Iteration  19: 1904885.326 ops/s
Iteration  20: 1893018.504 ops/s
Iteration  21: 1898516.477 ops/s
Iteration  22: 1903868.526 ops/s
Iteration  23: 1894699.498 ops/s
Iteration  24: 1899143.068 ops/s
Iteration  25: 1894683.425 ops/s
Iteration  26: 1903803.882 ops/s
Iteration  27: 1905437.088 ops/s
Iteration  28: 1895608.075 ops/s
Iteration  29: 1904549.161 ops/s
Iteration  30: 1890145.901 ops/s


Result "org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_toMapWithTarget":
  1899087.625 ±(99.9%) 2921.760 ops/s [Average]
  (min, avg, max) = (1890145.901, 1899087.625, 1905542.708), stdev = 4373.154
  CI (99.9%): [1896165.864, 1902009.385] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
FastListMultimapTest._Benchmark.benchmark_toMapWithTarget  thrpt   30  1899087.625 ± 2921.760  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_toMutable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_toMutable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 842772.356 ops/s
# Warmup Iteration   2: 1844704.653 ops/s
# Warmup Iteration   3: 1986686.085 ops/s
# Warmup Iteration   4: 1994872.427 ops/s
# Warmup Iteration   5: 1623999.191 ops/s
# Warmup Iteration   6: 1996644.768 ops/s
# Warmup Iteration   7: 1998772.658 ops/s
# Warmup Iteration   8: 2001000.060 ops/s
# Warmup Iteration   9: 1995854.215 ops/s
# Warmup Iteration  10: 1990903.367 ops/s
# Warmup Iteration  11: 1985783.234 ops/s
# Warmup Iteration  12: 1998303.813 ops/s
# Warmup Iteration  13: 1995733.786 ops/s
# Warmup Iteration  14: 2002417.966 ops/s
# Warmup Iteration  15: 1977666.068 ops/s
# Warmup Iteration  16: 1997126.035 ops/s
# Warmup Iteration  17: 1996253.579 ops/s
# Warmup Iteration  18: 1998180.144 ops/s
# Warmup Iteration  19: 1997084.080 ops/s
# Warmup Iteration  20: 1989100.911 ops/s
# Warmup Iteration  21: 1993627.594 ops/s
# Warmup Iteration  22: 1993007.583 ops/s
# Warmup Iteration  23: 1991838.421 ops/s
# Warmup Iteration  24: 1999395.915 ops/s
# Warmup Iteration  25: 1997339.792 ops/s
# Warmup Iteration  26: 2001708.433 ops/s
# Warmup Iteration  27: 1997521.513 ops/s
# Warmup Iteration  28: 2004797.509 ops/s
# Warmup Iteration  29: 1978515.355 ops/s
# Warmup Iteration  30: 1974018.133 ops/s
Iteration   1: 2000023.433 ops/s
Iteration   2: 1960982.631 ops/s
Iteration   3: 1993255.612 ops/s
Iteration   4: 2001818.149 ops/s
Iteration   5: 1961435.681 ops/s
Iteration   6: 2000728.897 ops/s
Iteration   7: 1999201.369 ops/s
Iteration   8: 1998427.926 ops/s
Iteration   9: 1988256.038 ops/s
Iteration  10: 2000019.428 ops/s
Iteration  11: 2000532.324 ops/s
Iteration  12: 2003495.519 ops/s
Iteration  13: 2003504.955 ops/s
Iteration  14: 1993903.335 ops/s
Iteration  15: 2006041.201 ops/s
Iteration  16: 1980988.787 ops/s
Iteration  17: 2004320.548 ops/s
Iteration  18: 1993376.515 ops/s
Iteration  19: 1988275.501 ops/s
Iteration  20: 1980220.491 ops/s
Iteration  21: 2003219.237 ops/s
Iteration  22: 1993586.877 ops/s
Iteration  23: 1990472.477 ops/s
Iteration  24: 1978035.538 ops/s
Iteration  25: 2001234.558 ops/s
Iteration  26: 2001296.821 ops/s
Iteration  27: 1989860.908 ops/s
Iteration  28: 1951474.640 ops/s
Iteration  29: 1999614.249 ops/s
Iteration  30: 2000658.553 ops/s


Result "org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_toMutable":
  1992275.407 ±(99.9%) 9240.126 ops/s [Average]
  (min, avg, max) = (1951474.640, 1992275.407, 2006041.201), stdev = 13830.187
  CI (99.9%): [1983035.281, 2001515.533] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
FastListMultimapTest._Benchmark.benchmark_toMutable  thrpt   30  1992275.407 ± 9240.126  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_valuesView$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_valuesView

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 807435.329 ops/s
# Warmup Iteration   2: 1625891.759 ops/s
# Warmup Iteration   3: 1857158.055 ops/s
# Warmup Iteration   4: 1860919.052 ops/s
# Warmup Iteration   5: 1535022.830 ops/s
# Warmup Iteration   6: 1872030.322 ops/s
# Warmup Iteration   7: 1868174.743 ops/s
# Warmup Iteration   8: 1867464.928 ops/s
# Warmup Iteration   9: 1870387.811 ops/s
# Warmup Iteration  10: 1870152.762 ops/s
# Warmup Iteration  11: 1867728.292 ops/s
# Warmup Iteration  12: 1876932.542 ops/s
# Warmup Iteration  13: 1866112.582 ops/s
# Warmup Iteration  14: 1863896.410 ops/s
# Warmup Iteration  15: 1872825.375 ops/s
# Warmup Iteration  16: 1870330.825 ops/s
# Warmup Iteration  17: 1871540.312 ops/s
# Warmup Iteration  18: 1874887.638 ops/s
# Warmup Iteration  19: 1876461.884 ops/s
# Warmup Iteration  20: 1860594.281 ops/s
# Warmup Iteration  21: 1875490.326 ops/s
# Warmup Iteration  22: 1876446.326 ops/s
# Warmup Iteration  23: 1872492.341 ops/s
# Warmup Iteration  24: 1873635.962 ops/s
# Warmup Iteration  25: 1872240.279 ops/s
# Warmup Iteration  26: 1872256.896 ops/s
# Warmup Iteration  27: 1873871.454 ops/s
# Warmup Iteration  28: 1870889.501 ops/s
# Warmup Iteration  29: 1870603.236 ops/s
# Warmup Iteration  30: 1878715.354 ops/s
Iteration   1: 1877988.484 ops/s
Iteration   2: 1882131.386 ops/s
Iteration   3: 1867361.466 ops/s
Iteration   4: 1875777.724 ops/s
Iteration   5: 1878067.301 ops/s
Iteration   6: 1870284.252 ops/s
Iteration   7: 1871592.601 ops/s
Iteration   8: 1876457.417 ops/s
Iteration   9: 1875645.655 ops/s
Iteration  10: 1873717.158 ops/s
Iteration  11: 1874503.861 ops/s
Iteration  12: 1873630.747 ops/s
Iteration  13: 1877516.444 ops/s
Iteration  14: 1876169.520 ops/s
Iteration  15: 1871732.543 ops/s
Iteration  16: 1874157.536 ops/s
Iteration  17: 1872077.844 ops/s
Iteration  18: 1871088.148 ops/s
Iteration  19: 1867385.718 ops/s
Iteration  20: 1877968.287 ops/s
Iteration  21: 1875185.022 ops/s
Iteration  22: 1874108.833 ops/s
Iteration  23: 1879971.668 ops/s
Iteration  24: 1873083.694 ops/s
Iteration  25: 1877555.215 ops/s
Iteration  26: 1872188.128 ops/s
Iteration  27: 1845609.411 ops/s
Iteration  28: 1846316.280 ops/s
Iteration  29: 1873977.488 ops/s
Iteration  30: 1874478.258 ops/s


Result "org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_valuesView":
  1872590.936 ±(99.9%) 5315.226 ops/s [Average]
  (min, avg, max) = (1845609.411, 1872590.936, 1882131.386), stdev = 7955.581
  CI (99.9%): [1867275.710, 1877906.162] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
FastListMultimapTest._Benchmark.benchmark_valuesView  thrpt   30  1872590.936 ± 5315.226  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_withKeyMultiValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_withKeyMultiValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 343765.405 ops/s
# Warmup Iteration   2: 679262.443 ops/s
# Warmup Iteration   3: 770407.118 ops/s
# Warmup Iteration   4: 775813.320 ops/s
# Warmup Iteration   5: 667722.142 ops/s
# Warmup Iteration   6: 741625.188 ops/s
# Warmup Iteration   7: 775908.214 ops/s
# Warmup Iteration   8: 777363.164 ops/s
# Warmup Iteration   9: 774387.496 ops/s
# Warmup Iteration  10: 776738.281 ops/s
# Warmup Iteration  11: 774926.546 ops/s
# Warmup Iteration  12: 769317.683 ops/s
# Warmup Iteration  13: 767850.264 ops/s
# Warmup Iteration  14: 775172.390 ops/s
# Warmup Iteration  15: 776517.521 ops/s
# Warmup Iteration  16: 773709.165 ops/s
# Warmup Iteration  17: 776542.945 ops/s
# Warmup Iteration  18: 773650.596 ops/s
# Warmup Iteration  19: 776089.963 ops/s
# Warmup Iteration  20: 767315.172 ops/s
# Warmup Iteration  21: 774751.737 ops/s
# Warmup Iteration  22: 774313.967 ops/s
# Warmup Iteration  23: 774835.265 ops/s
# Warmup Iteration  24: 773798.607 ops/s
# Warmup Iteration  25: 775818.082 ops/s
# Warmup Iteration  26: 769569.680 ops/s
# Warmup Iteration  27: 772951.870 ops/s
# Warmup Iteration  28: 773911.881 ops/s
# Warmup Iteration  29: 774923.968 ops/s
# Warmup Iteration  30: 775327.453 ops/s
Iteration   1: 774572.840 ops/s
Iteration   2: 774874.706 ops/s
Iteration   3: 773422.889 ops/s
Iteration   4: 775139.738 ops/s
Iteration   5: 774446.280 ops/s
Iteration   6: 775914.878 ops/s
Iteration   7: 771123.338 ops/s
Iteration   8: 772784.328 ops/s
Iteration   9: 777449.273 ops/s
Iteration  10: 776515.831 ops/s
Iteration  11: 775138.449 ops/s
Iteration  12: 775216.495 ops/s
Iteration  13: 775781.589 ops/s
Iteration  14: 776629.675 ops/s
Iteration  15: 776975.737 ops/s
Iteration  16: 775293.697 ops/s
Iteration  17: 776992.423 ops/s
Iteration  18: 777574.384 ops/s
Iteration  19: 776226.971 ops/s
Iteration  20: 773045.239 ops/s
Iteration  21: 774719.366 ops/s
Iteration  22: 773063.993 ops/s
Iteration  23: 776760.555 ops/s
Iteration  24: 775890.676 ops/s
Iteration  25: 776994.178 ops/s
Iteration  26: 773916.508 ops/s
Iteration  27: 774210.920 ops/s
Iteration  28: 776921.866 ops/s
Iteration  29: 773794.615 ops/s
Iteration  30: 777726.320 ops/s


Result "org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_withKeyMultiValues":
  775303.925 ±(99.9%) 1100.137 ops/s [Average]
  (min, avg, max) = (771123.338, 775303.925, 777726.320), stdev = 1646.633
  CI (99.9%): [774203.789, 776404.062] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
FastListMultimapTest._Benchmark.benchmark_withKeyMultiValues  thrpt   30  775303.925 ± 1100.137  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_withKeyMultiValuesNullValueHandling$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_withKeyMultiValuesNullValueHandling

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 714727.630 ops/s
# Warmup Iteration   2: 741055.529 ops/s
# Warmup Iteration   3: 978321.814 ops/s
# Warmup Iteration   4: 976303.438 ops/s
# Warmup Iteration   5: 980609.412 ops/s
# Warmup Iteration   6: 979590.856 ops/s
# Warmup Iteration   7: 976793.178 ops/s
# Warmup Iteration   8: 973446.493 ops/s
# Warmup Iteration   9: 978643.118 ops/s
# Warmup Iteration  10: 979824.705 ops/s
# Warmup Iteration  11: 935196.930 ops/s
# Warmup Iteration  12: 867101.871 ops/s
# Warmup Iteration  13: 974304.572 ops/s
# Warmup Iteration  14: 978065.457 ops/s
# Warmup Iteration  15: 972966.597 ops/s
# Warmup Iteration  16: 980771.473 ops/s
# Warmup Iteration  17: 1033778.234 ops/s
# Warmup Iteration  18: 1026617.498 ops/s
# Warmup Iteration  19: 1025970.143 ops/s
# Warmup Iteration  20: 1029377.757 ops/s
# Warmup Iteration  21: 1027601.234 ops/s
# Warmup Iteration  22: 1026722.055 ops/s
# Warmup Iteration  23: 1023982.594 ops/s
# Warmup Iteration  24: 1029872.617 ops/s
# Warmup Iteration  25: 1026778.797 ops/s
# Warmup Iteration  26: 1031031.362 ops/s
# Warmup Iteration  27: 1028834.564 ops/s
# Warmup Iteration  28: 1028300.149 ops/s
# Warmup Iteration  29: 1026276.408 ops/s
# Warmup Iteration  30: 1026675.448 ops/s
Iteration   1: 1027793.569 ops/s
Iteration   2: 1032589.455 ops/s
Iteration   3: 1027839.558 ops/s
Iteration   4: 1032816.889 ops/s
Iteration   5: 1022250.721 ops/s
Iteration   6: 1031876.823 ops/s
Iteration   7: 1029777.821 ops/s
Iteration   8: 1027783.466 ops/s
Iteration   9: 1030707.154 ops/s
Iteration  10: 1031228.389 ops/s
Iteration  11: 1027649.329 ops/s
Iteration  12: 1031177.736 ops/s
Iteration  13: 1027306.713 ops/s
Iteration  14: 1029818.893 ops/s
Iteration  15: 1023885.659 ops/s
Iteration  16: 1027363.314 ops/s
Iteration  17: 1025651.597 ops/s
Iteration  18: 1034965.780 ops/s
Iteration  19: 1030026.362 ops/s
Iteration  20: 1030647.374 ops/s
Iteration  21: 1029863.069 ops/s
Iteration  22: 1032664.728 ops/s
Iteration  23: 1032006.366 ops/s
Iteration  24: 1025491.043 ops/s
Iteration  25: 1025961.664 ops/s
Iteration  26: 1023344.940 ops/s
Iteration  27: 1030037.017 ops/s
Iteration  28: 1032655.973 ops/s
Iteration  29: 1025201.898 ops/s
Iteration  30: 1029319.683 ops/s


Result "org.eclipse.collections.impl.multimap.list.FastListMultimapTest._Benchmark.benchmark_withKeyMultiValuesNullValueHandling":
  1028990.099 ±(99.9%) 2110.069 ops/s [Average]
  (min, avg, max) = (1022250.721, 1028990.099, 1034965.780), stdev = 3158.251
  CI (99.9%): [1026880.031, 1031100.168] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score      Error  Units
FastListMultimapTest._Benchmark.benchmark_withKeyMultiValuesNullValueHandling  thrpt   30  1028990.099 ± 2110.069  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.ImmutableListMultimapTest._Benchmark.benchmark_allowDuplicates$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.ImmutableListMultimapTest._Benchmark.benchmark_allowDuplicates

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 310140.858 ops/s
# Warmup Iteration   2: 712334.094 ops/s
# Warmup Iteration   3: 767514.470 ops/s
# Warmup Iteration   4: 770906.572 ops/s
# Warmup Iteration   5: 642042.552 ops/s
# Warmup Iteration   6: 771810.884 ops/s
# Warmup Iteration   7: 768758.821 ops/s
# Warmup Iteration   8: 772052.864 ops/s
# Warmup Iteration   9: 770313.820 ops/s
# Warmup Iteration  10: 770543.875 ops/s
# Warmup Iteration  11: 771779.321 ops/s
# Warmup Iteration  12: 771072.923 ops/s
# Warmup Iteration  13: 770958.662 ops/s
# Warmup Iteration  14: 770627.312 ops/s
# Warmup Iteration  15: 771640.214 ops/s
# Warmup Iteration  16: 769290.867 ops/s
# Warmup Iteration  17: 767305.384 ops/s
# Warmup Iteration  18: 767677.871 ops/s
# Warmup Iteration  19: 767320.055 ops/s
# Warmup Iteration  20: 765455.189 ops/s
# Warmup Iteration  21: 768855.030 ops/s
# Warmup Iteration  22: 766389.291 ops/s
# Warmup Iteration  23: 768409.216 ops/s
# Warmup Iteration  24: 768226.505 ops/s
# Warmup Iteration  25: 768444.357 ops/s
# Warmup Iteration  26: 768122.626 ops/s
# Warmup Iteration  27: 767255.158 ops/s
# Warmup Iteration  28: 767246.516 ops/s
# Warmup Iteration  29: 767945.103 ops/s
# Warmup Iteration  30: 768313.581 ops/s
Iteration   1: 768323.037 ops/s
Iteration   2: 766920.721 ops/s
Iteration   3: 765252.257 ops/s
Iteration   4: 765585.890 ops/s
Iteration   5: 767540.374 ops/s
Iteration   6: 769262.140 ops/s
Iteration   7: 768303.700 ops/s
Iteration   8: 766329.540 ops/s
Iteration   9: 766482.067 ops/s
Iteration  10: 769417.483 ops/s
Iteration  11: 767420.116 ops/s
Iteration  12: 767905.568 ops/s
Iteration  13: 765851.682 ops/s
Iteration  14: 770258.959 ops/s
Iteration  15: 767182.183 ops/s
Iteration  16: 768510.037 ops/s
Iteration  17: 768304.773 ops/s
Iteration  18: 765244.987 ops/s
Iteration  19: 768172.248 ops/s
Iteration  20: 768346.779 ops/s
Iteration  21: 766781.971 ops/s
Iteration  22: 767728.935 ops/s
Iteration  23: 768025.150 ops/s
Iteration  24: 765978.370 ops/s
Iteration  25: 767468.078 ops/s
Iteration  26: 766391.970 ops/s
Iteration  27: 768310.644 ops/s
Iteration  28: 768140.810 ops/s
Iteration  29: 766305.826 ops/s
Iteration  30: 771417.443 ops/s


Result "org.eclipse.collections.impl.multimap.list.ImmutableListMultimapTest._Benchmark.benchmark_allowDuplicates":
  767572.125 ±(99.9%) 962.282 ops/s [Average]
  (min, avg, max) = (765244.987, 767572.125, 771417.443), stdev = 1440.298
  CI (99.9%): [766609.843, 768534.406] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score     Error  Units
ImmutableListMultimapTest._Benchmark.benchmark_allowDuplicates  thrpt   30  767572.125 ± 962.282  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.ImmutableListMultimapTest._Benchmark.benchmark_collectKeyMultiValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.ImmutableListMultimapTest._Benchmark.benchmark_collectKeyMultiValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 26516.841 ops/s
# Warmup Iteration   2: 44107.049 ops/s
# Warmup Iteration   3: 55476.587 ops/s
# Warmup Iteration   4: 55306.767 ops/s
# Warmup Iteration   5: 55502.797 ops/s
# Warmup Iteration   6: 55553.301 ops/s
# Warmup Iteration   7: 46048.515 ops/s
# Warmup Iteration   8: 55489.292 ops/s
# Warmup Iteration   9: 55702.763 ops/s
# Warmup Iteration  10: 55630.360 ops/s
# Warmup Iteration  11: 55211.525 ops/s
# Warmup Iteration  12: 55568.179 ops/s
# Warmup Iteration  13: 55756.672 ops/s
# Warmup Iteration  14: 55449.875 ops/s
# Warmup Iteration  15: 55047.303 ops/s
# Warmup Iteration  16: 55613.842 ops/s
# Warmup Iteration  17: 55787.588 ops/s
# Warmup Iteration  18: 55931.091 ops/s
# Warmup Iteration  19: 55833.393 ops/s
# Warmup Iteration  20: 55998.319 ops/s
# Warmup Iteration  21: 55800.691 ops/s
# Warmup Iteration  22: 55872.895 ops/s
# Warmup Iteration  23: 55668.462 ops/s
# Warmup Iteration  24: 55878.720 ops/s
# Warmup Iteration  25: 55827.168 ops/s
# Warmup Iteration  26: 55607.507 ops/s
# Warmup Iteration  27: 55629.123 ops/s
# Warmup Iteration  28: 55677.524 ops/s
# Warmup Iteration  29: 55722.753 ops/s
# Warmup Iteration  30: 55874.760 ops/s
Iteration   1: 55897.733 ops/s
Iteration   2: 56049.101 ops/s
Iteration   3: 55813.500 ops/s
Iteration   4: 55247.430 ops/s
Iteration   5: 55980.975 ops/s
Iteration   6: 55838.092 ops/s
Iteration   7: 55940.494 ops/s
Iteration   8: 55901.987 ops/s
Iteration   9: 55694.069 ops/s
Iteration  10: 55974.515 ops/s
Iteration  11: 55719.962 ops/s
Iteration  12: 56001.646 ops/s
Iteration  13: 55839.559 ops/s
Iteration  14: 55834.355 ops/s
Iteration  15: 55984.795 ops/s
Iteration  16: 55821.376 ops/s
Iteration  17: 55992.470 ops/s
Iteration  18: 55792.929 ops/s
Iteration  19: 54967.855 ops/s
Iteration  20: 55531.669 ops/s
Iteration  21: 56202.427 ops/s
Iteration  22: 55770.234 ops/s
Iteration  23: 55846.690 ops/s
Iteration  24: 55763.820 ops/s
Iteration  25: 55892.697 ops/s
Iteration  26: 56079.802 ops/s
Iteration  27: 55671.252 ops/s
Iteration  28: 55658.428 ops/s
Iteration  29: 55903.489 ops/s
Iteration  30: 55834.699 ops/s


Result "org.eclipse.collections.impl.multimap.list.ImmutableListMultimapTest._Benchmark.benchmark_collectKeyMultiValues":
  55814.935 ±(99.9%) 160.048 ops/s [Average]
  (min, avg, max) = (54967.855, 55814.935, 56202.427), stdev = 239.552
  CI (99.9%): [55654.888, 55974.983] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt      Score     Error  Units
ImmutableListMultimapTest._Benchmark.benchmark_collectKeyMultiValues  thrpt   30  55814.935 ± 160.048  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.ImmutableListMultimapTest._Benchmark.benchmark_collectKeysValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.ImmutableListMultimapTest._Benchmark.benchmark_collectKeysValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 52543.891 ops/s
# Warmup Iteration   2: 118748.865 ops/s
# Warmup Iteration   3: 131521.576 ops/s
# Warmup Iteration   4: 131825.399 ops/s
# Warmup Iteration   5: 110951.808 ops/s
# Warmup Iteration   6: 132066.325 ops/s
# Warmup Iteration   7: 130402.364 ops/s
# Warmup Iteration   8: 132228.685 ops/s
# Warmup Iteration   9: 131860.253 ops/s
# Warmup Iteration  10: 132485.197 ops/s
# Warmup Iteration  11: 131169.102 ops/s
# Warmup Iteration  12: 131890.368 ops/s
# Warmup Iteration  13: 132120.909 ops/s
# Warmup Iteration  14: 132325.509 ops/s
# Warmup Iteration  15: 131478.582 ops/s
# Warmup Iteration  16: 131878.608 ops/s
# Warmup Iteration  17: 132120.496 ops/s
# Warmup Iteration  18: 132723.027 ops/s
# Warmup Iteration  19: 132156.757 ops/s
# Warmup Iteration  20: 132464.534 ops/s
# Warmup Iteration  21: 132123.124 ops/s
# Warmup Iteration  22: 131755.717 ops/s
# Warmup Iteration  23: 131682.133 ops/s
# Warmup Iteration  24: 131930.003 ops/s
# Warmup Iteration  25: 132078.180 ops/s
# Warmup Iteration  26: 131533.863 ops/s
# Warmup Iteration  27: 131259.112 ops/s
# Warmup Iteration  28: 132254.167 ops/s
# Warmup Iteration  29: 132321.374 ops/s
# Warmup Iteration  30: 131832.300 ops/s
Iteration   1: 132930.639 ops/s
Iteration   2: 131292.019 ops/s
Iteration   3: 131350.274 ops/s
Iteration   4: 133187.186 ops/s
Iteration   5: 131672.765 ops/s
Iteration   6: 131798.361 ops/s
Iteration   7: 132166.496 ops/s
Iteration   8: 132409.426 ops/s
Iteration   9: 132590.994 ops/s
Iteration  10: 132239.755 ops/s
Iteration  11: 131561.622 ops/s
Iteration  12: 131917.149 ops/s
Iteration  13: 132776.026 ops/s
Iteration  14: 132676.195 ops/s
Iteration  15: 132081.844 ops/s
Iteration  16: 132909.246 ops/s
Iteration  17: 131886.940 ops/s
Iteration  18: 131917.123 ops/s
Iteration  19: 132344.982 ops/s
Iteration  20: 132677.291 ops/s
Iteration  21: 131889.307 ops/s
Iteration  22: 132144.945 ops/s
Iteration  23: 132224.721 ops/s
Iteration  24: 131468.765 ops/s
Iteration  25: 132762.372 ops/s
Iteration  26: 132057.030 ops/s
Iteration  27: 132258.630 ops/s
Iteration  28: 131634.909 ops/s
Iteration  29: 132077.278 ops/s
Iteration  30: 132528.125 ops/s


Result "org.eclipse.collections.impl.multimap.list.ImmutableListMultimapTest._Benchmark.benchmark_collectKeysValues":
  132181.080 ±(99.9%) 330.346 ops/s [Average]
  (min, avg, max) = (131292.019, 132181.080, 133187.186), stdev = 494.446
  CI (99.9%): [131850.734, 132511.427] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score     Error  Units
ImmutableListMultimapTest._Benchmark.benchmark_collectKeysValues  thrpt   30  132181.080 ± 330.346  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.ImmutableListMultimapTest._Benchmark.benchmark_collectValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.ImmutableListMultimapTest._Benchmark.benchmark_collectValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 121618.365 ops/s
# Warmup Iteration   2: 264105.822 ops/s
# Warmup Iteration   3: 291394.588 ops/s
# Warmup Iteration   4: 293629.381 ops/s
# Warmup Iteration   5: 246159.572 ops/s
# Warmup Iteration   6: 292831.481 ops/s
# Warmup Iteration   7: 293516.019 ops/s
# Warmup Iteration   8: 294234.833 ops/s
# Warmup Iteration   9: 295176.330 ops/s
# Warmup Iteration  10: 294491.359 ops/s
# Warmup Iteration  11: 293658.346 ops/s
# Warmup Iteration  12: 294878.664 ops/s
# Warmup Iteration  13: 294229.169 ops/s
# Warmup Iteration  14: 293182.501 ops/s
# Warmup Iteration  15: 295809.457 ops/s
# Warmup Iteration  16: 296192.190 ops/s
# Warmup Iteration  17: 292942.039 ops/s
# Warmup Iteration  18: 292327.426 ops/s
# Warmup Iteration  19: 293129.400 ops/s
# Warmup Iteration  20: 293936.343 ops/s
# Warmup Iteration  21: 293329.255 ops/s
# Warmup Iteration  22: 293756.629 ops/s
# Warmup Iteration  23: 293950.563 ops/s
# Warmup Iteration  24: 292519.268 ops/s
# Warmup Iteration  25: 293267.429 ops/s
# Warmup Iteration  26: 292165.033 ops/s
# Warmup Iteration  27: 291644.359 ops/s
# Warmup Iteration  28: 292709.395 ops/s
# Warmup Iteration  29: 292412.099 ops/s
# Warmup Iteration  30: 292701.575 ops/s
Iteration   1: 292912.688 ops/s
Iteration   2: 293521.147 ops/s
Iteration   3: 294584.731 ops/s
Iteration   4: 293488.187 ops/s
Iteration   5: 292940.966 ops/s
Iteration   6: 290665.494 ops/s
Iteration   7: 293694.633 ops/s
Iteration   8: 293380.537 ops/s
Iteration   9: 294141.236 ops/s
Iteration  10: 293510.371 ops/s
Iteration  11: 292758.857 ops/s
Iteration  12: 293336.068 ops/s
Iteration  13: 293756.284 ops/s
Iteration  14: 291633.950 ops/s
Iteration  15: 294819.893 ops/s
Iteration  16: 291802.770 ops/s
Iteration  17: 290748.801 ops/s
Iteration  18: 294099.772 ops/s
Iteration  19: 292458.554 ops/s
Iteration  20: 293798.462 ops/s
Iteration  21: 292302.413 ops/s
Iteration  22: 291068.319 ops/s
Iteration  23: 293420.760 ops/s
Iteration  24: 292241.814 ops/s
Iteration  25: 291729.762 ops/s
Iteration  26: 292935.315 ops/s
Iteration  27: 293413.400 ops/s
Iteration  28: 291380.566 ops/s
Iteration  29: 294503.513 ops/s
Iteration  30: 293074.291 ops/s


Result "org.eclipse.collections.impl.multimap.list.ImmutableListMultimapTest._Benchmark.benchmark_collectValues":
  292937.452 ±(99.9%) 752.259 ops/s [Average]
  (min, avg, max) = (290665.494, 292937.452, 294819.893), stdev = 1125.947
  CI (99.9%): [292185.192, 293689.711] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score     Error  Units
ImmutableListMultimapTest._Benchmark.benchmark_collectValues  thrpt   30  292937.452 ± 752.259  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.ImmutableListMultimapTest._Benchmark.benchmark_flip$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.ImmutableListMultimapTest._Benchmark.benchmark_flip

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 111733.182 ops/s
# Warmup Iteration   2: 183768.348 ops/s
# Warmup Iteration   3: 226454.957 ops/s
# Warmup Iteration   4: 225775.843 ops/s
# Warmup Iteration   5: 226139.073 ops/s
# Warmup Iteration   6: 227045.978 ops/s
# Warmup Iteration   7: 187978.866 ops/s
# Warmup Iteration   8: 226819.105 ops/s
# Warmup Iteration   9: 226969.420 ops/s
# Warmup Iteration  10: 226599.034 ops/s
# Warmup Iteration  11: 226337.755 ops/s
# Warmup Iteration  12: 226870.223 ops/s
# Warmup Iteration  13: 226762.445 ops/s
# Warmup Iteration  14: 226849.035 ops/s
# Warmup Iteration  15: 226599.344 ops/s
# Warmup Iteration  16: 226721.720 ops/s
# Warmup Iteration  17: 226791.478 ops/s
# Warmup Iteration  18: 226900.340 ops/s
# Warmup Iteration  19: 226734.523 ops/s
# Warmup Iteration  20: 226703.402 ops/s
# Warmup Iteration  21: 226736.588 ops/s
# Warmup Iteration  22: 226446.266 ops/s
# Warmup Iteration  23: 226560.312 ops/s
# Warmup Iteration  24: 227017.264 ops/s
# Warmup Iteration  25: 227103.852 ops/s
# Warmup Iteration  26: 227029.605 ops/s
# Warmup Iteration  27: 226923.555 ops/s
# Warmup Iteration  28: 227015.522 ops/s
# Warmup Iteration  29: 226292.722 ops/s
# Warmup Iteration  30: 226104.483 ops/s
Iteration   1: 226397.623 ops/s
Iteration   2: 226815.416 ops/s
Iteration   3: 228191.374 ops/s
Iteration   4: 227029.830 ops/s
Iteration   5: 227373.188 ops/s
Iteration   6: 226173.155 ops/s
Iteration   7: 227117.945 ops/s
Iteration   8: 226909.942 ops/s
Iteration   9: 227147.831 ops/s
Iteration  10: 227187.773 ops/s
Iteration  11: 226670.727 ops/s
Iteration  12: 226884.592 ops/s
Iteration  13: 227093.245 ops/s
Iteration  14: 227032.962 ops/s
Iteration  15: 226277.637 ops/s
Iteration  16: 226940.078 ops/s
Iteration  17: 227012.168 ops/s
Iteration  18: 226552.441 ops/s
Iteration  19: 225859.044 ops/s
Iteration  20: 225929.820 ops/s
Iteration  21: 226282.022 ops/s
Iteration  22: 227113.648 ops/s
Iteration  23: 226411.579 ops/s
Iteration  24: 227191.458 ops/s
Iteration  25: 226021.439 ops/s
Iteration  26: 226965.125 ops/s
Iteration  27: 226826.058 ops/s
Iteration  28: 226614.596 ops/s
Iteration  29: 227020.946 ops/s
Iteration  30: 226255.045 ops/s


Result "org.eclipse.collections.impl.multimap.list.ImmutableListMultimapTest._Benchmark.benchmark_flip":
  226776.624 ±(99.9%) 331.306 ops/s [Average]
  (min, avg, max) = (225859.044, 226776.624, 228191.374), stdev = 495.883
  CI (99.9%): [226445.318, 227107.929] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score     Error  Units
ImmutableListMultimapTest._Benchmark.benchmark_flip  thrpt   30  226776.624 ± 331.306  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.ImmutableListMultimapTest._Benchmark.benchmark_forEachKeyImmutableList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.ImmutableListMultimapTest._Benchmark.benchmark_forEachKeyImmutableList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 764107.776 ops/s
# Warmup Iteration   2: 1626379.290 ops/s
# Warmup Iteration   3: 1798911.205 ops/s
# Warmup Iteration   4: 1811390.600 ops/s
# Warmup Iteration   5: 1503050.784 ops/s
# Warmup Iteration   6: 1815320.895 ops/s
# Warmup Iteration   7: 1812470.296 ops/s
# Warmup Iteration   8: 1815710.154 ops/s
# Warmup Iteration   9: 1815542.531 ops/s
# Warmup Iteration  10: 1814411.332 ops/s
# Warmup Iteration  11: 1810604.332 ops/s
# Warmup Iteration  12: 1813302.505 ops/s
# Warmup Iteration  13: 1817056.955 ops/s
# Warmup Iteration  14: 1812135.509 ops/s
# Warmup Iteration  15: 1808071.398 ops/s
# Warmup Iteration  16: 1810418.085 ops/s
# Warmup Iteration  17: 1817827.491 ops/s
# Warmup Iteration  18: 1815530.138 ops/s
# Warmup Iteration  19: 1816154.550 ops/s
# Warmup Iteration  20: 1811089.632 ops/s
# Warmup Iteration  21: 1816497.306 ops/s
# Warmup Iteration  22: 1817826.053 ops/s
# Warmup Iteration  23: 1814299.297 ops/s
# Warmup Iteration  24: 1816582.738 ops/s
# Warmup Iteration  25: 1812242.611 ops/s
# Warmup Iteration  26: 1813837.941 ops/s
# Warmup Iteration  27: 1815205.457 ops/s
# Warmup Iteration  28: 1813354.929 ops/s
# Warmup Iteration  29: 1814902.461 ops/s
# Warmup Iteration  30: 1814101.785 ops/s
Iteration   1: 1819598.666 ops/s
Iteration   2: 1815984.657 ops/s
Iteration   3: 1812351.577 ops/s
Iteration   4: 1817722.990 ops/s
Iteration   5: 1817979.113 ops/s
Iteration   6: 1816883.672 ops/s
Iteration   7: 1810504.790 ops/s
Iteration   8: 1813029.577 ops/s
Iteration   9: 1806849.347 ops/s
Iteration  10: 1816649.762 ops/s
Iteration  11: 1814332.852 ops/s
Iteration  12: 1820162.947 ops/s
Iteration  13: 1819945.720 ops/s
Iteration  14: 1821038.654 ops/s
Iteration  15: 1818300.237 ops/s
Iteration  16: 1818507.759 ops/s
Iteration  17: 1818075.090 ops/s
Iteration  18: 1817110.086 ops/s
Iteration  19: 1796585.335 ops/s
Iteration  20: 1817544.028 ops/s
Iteration  21: 1817461.821 ops/s
Iteration  22: 1810401.880 ops/s
Iteration  23: 1818042.834 ops/s
Iteration  24: 1826903.386 ops/s
Iteration  25: 1815609.027 ops/s
Iteration  26: 1814544.220 ops/s
Iteration  27: 1816504.552 ops/s
Iteration  28: 1820417.652 ops/s
Iteration  29: 1812571.376 ops/s
Iteration  30: 1816892.864 ops/s


Result "org.eclipse.collections.impl.multimap.list.ImmutableListMultimapTest._Benchmark.benchmark_forEachKeyImmutableList":
  1815950.216 ±(99.9%) 3521.485 ops/s [Average]
  (min, avg, max) = (1796585.335, 1815950.216, 1826903.386), stdev = 5270.794
  CI (99.9%): [1812428.730, 1819471.701] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
ImmutableListMultimapTest._Benchmark.benchmark_forEachKeyImmutableList  thrpt   30  1815950.216 ± 3521.485  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.ImmutableListMultimapTest._Benchmark.benchmark_forEachKeyMultiValue$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.ImmutableListMultimapTest._Benchmark.benchmark_forEachKeyMultiValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 626462.679 ops/s
# Warmup Iteration   2: 1056865.894 ops/s
# Warmup Iteration   3: 1247643.538 ops/s
# Warmup Iteration   4: 1251289.058 ops/s
# Warmup Iteration   5: 1256269.878 ops/s
# Warmup Iteration   6: 1108942.535 ops/s
# Warmup Iteration   7: 1187668.794 ops/s
# Warmup Iteration   8: 1257858.241 ops/s
# Warmup Iteration   9: 1257179.100 ops/s
# Warmup Iteration  10: 1257426.928 ops/s
# Warmup Iteration  11: 1257412.739 ops/s
# Warmup Iteration  12: 1257581.724 ops/s
# Warmup Iteration  13: 1258426.214 ops/s
# Warmup Iteration  14: 1257930.353 ops/s
# Warmup Iteration  15: 1256601.871 ops/s
# Warmup Iteration  16: 1257801.877 ops/s
# Warmup Iteration  17: 1256570.279 ops/s
# Warmup Iteration  18: 1257148.677 ops/s
# Warmup Iteration  19: 1257180.529 ops/s
# Warmup Iteration  20: 1255079.884 ops/s
# Warmup Iteration  21: 1255232.941 ops/s
# Warmup Iteration  22: 1256293.809 ops/s
# Warmup Iteration  23: 1256880.567 ops/s
# Warmup Iteration  24: 1256029.706 ops/s
# Warmup Iteration  25: 1249733.877 ops/s
# Warmup Iteration  26: 1259147.428 ops/s
# Warmup Iteration  27: 1259159.771 ops/s
# Warmup Iteration  28: 1257445.185 ops/s
# Warmup Iteration  29: 1255074.972 ops/s
# Warmup Iteration  30: 1255994.253 ops/s
Iteration   1: 1250666.182 ops/s
Iteration   2: 1257703.756 ops/s
Iteration   3: 1253933.262 ops/s
Iteration   4: 1260472.241 ops/s
Iteration   5: 1254710.417 ops/s
Iteration   6: 1257030.769 ops/s
Iteration   7: 1250854.057 ops/s
Iteration   8: 1255651.546 ops/s
Iteration   9: 1249490.244 ops/s
Iteration  10: 1259391.854 ops/s
Iteration  11: 1259836.219 ops/s
Iteration  12: 1257383.980 ops/s
Iteration  13: 1253321.311 ops/s
Iteration  14: 1259598.287 ops/s
Iteration  15: 1258125.190 ops/s
Iteration  16: 1258024.403 ops/s
Iteration  17: 1254770.794 ops/s
Iteration  18: 1251053.267 ops/s
Iteration  19: 1253236.021 ops/s
Iteration  20: 1261551.153 ops/s
Iteration  21: 1256179.227 ops/s
Iteration  22: 1255759.911 ops/s
Iteration  23: 1258738.812 ops/s
Iteration  24: 1252332.812 ops/s
Iteration  25: 1238544.492 ops/s
Iteration  26: 1258380.028 ops/s
Iteration  27: 1253763.077 ops/s
Iteration  28: 1256727.822 ops/s
Iteration  29: 1255982.128 ops/s
Iteration  30: 1256646.975 ops/s


Result "org.eclipse.collections.impl.multimap.list.ImmutableListMultimapTest._Benchmark.benchmark_forEachKeyMultiValue":
  1255328.675 ±(99.9%) 2968.433 ops/s [Average]
  (min, avg, max) = (1238544.492, 1255328.675, 1261551.153), stdev = 4443.011
  CI (99.9%): [1252360.241, 1258297.108] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
ImmutableListMultimapTest._Benchmark.benchmark_forEachKeyMultiValue  thrpt   30  1255328.675 ± 2968.433  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.ImmutableListMultimapTest._Benchmark.benchmark_get$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.ImmutableListMultimapTest._Benchmark.benchmark_get

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 552521.395 ops/s
# Warmup Iteration   2: 1259379.734 ops/s
# Warmup Iteration   3: 1323649.550 ops/s
# Warmup Iteration   4: 1227796.306 ops/s
# Warmup Iteration   5: 1197532.156 ops/s
# Warmup Iteration   6: 1324779.783 ops/s
# Warmup Iteration   7: 1317853.978 ops/s
# Warmup Iteration   8: 1325096.383 ops/s
# Warmup Iteration   9: 1326292.260 ops/s
# Warmup Iteration  10: 1324883.466 ops/s
# Warmup Iteration  11: 1327199.380 ops/s
# Warmup Iteration  12: 1328642.269 ops/s
# Warmup Iteration  13: 1327817.682 ops/s
# Warmup Iteration  14: 1318315.930 ops/s
# Warmup Iteration  15: 1327505.484 ops/s
# Warmup Iteration  16: 1326711.999 ops/s
# Warmup Iteration  17: 1325128.150 ops/s
# Warmup Iteration  18: 1326088.513 ops/s
# Warmup Iteration  19: 1326293.257 ops/s
# Warmup Iteration  20: 1320092.333 ops/s
# Warmup Iteration  21: 1323538.138 ops/s
# Warmup Iteration  22: 1325009.166 ops/s
# Warmup Iteration  23: 1325705.929 ops/s
# Warmup Iteration  24: 1325696.450 ops/s
# Warmup Iteration  25: 1324443.351 ops/s
# Warmup Iteration  26: 1323223.854 ops/s
# Warmup Iteration  27: 1329666.281 ops/s
# Warmup Iteration  28: 1326957.654 ops/s
# Warmup Iteration  29: 1328472.452 ops/s
# Warmup Iteration  30: 1328250.210 ops/s
Iteration   1: 1318707.602 ops/s
Iteration   2: 1301024.452 ops/s
Iteration   3: 1326082.315 ops/s
Iteration   4: 1309626.617 ops/s
Iteration   5: 1329226.826 ops/s
Iteration   6: 1322504.576 ops/s
Iteration   7: 1325252.100 ops/s
Iteration   8: 1324194.202 ops/s
Iteration   9: 1329578.295 ops/s
Iteration  10: 1327429.238 ops/s
Iteration  11: 1324019.575 ops/s
Iteration  12: 1324507.284 ops/s
Iteration  13: 1327881.826 ops/s
Iteration  14: 1326203.609 ops/s
Iteration  15: 1326330.278 ops/s
Iteration  16: 1325622.259 ops/s
Iteration  17: 1326361.319 ops/s
Iteration  18: 1324068.562 ops/s
Iteration  19: 1330136.051 ops/s
Iteration  20: 1326912.661 ops/s
Iteration  21: 1324957.190 ops/s
Iteration  22: 1322971.646 ops/s
Iteration  23: 1323035.806 ops/s
Iteration  24: 1329688.821 ops/s
Iteration  25: 1328037.554 ops/s
Iteration  26: 1324904.456 ops/s
Iteration  27: 1325220.528 ops/s
Iteration  28: 1325523.607 ops/s
Iteration  29: 1325748.995 ops/s
Iteration  30: 1303556.789 ops/s


Result "org.eclipse.collections.impl.multimap.list.ImmutableListMultimapTest._Benchmark.benchmark_get":
  1323643.835 ±(99.9%) 4632.459 ops/s [Average]
  (min, avg, max) = (1301024.452, 1323643.835, 1330136.051), stdev = 6933.648
  CI (99.9%): [1319011.375, 1328276.294] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
ImmutableListMultimapTest._Benchmark.benchmark_get  thrpt   30  1323643.835 ± 4632.459  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.ImmutableListMultimapTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.ImmutableListMultimapTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 278924.316 ops/s
# Warmup Iteration   2: 739255.804 ops/s
# Warmup Iteration   3: 776663.941 ops/s
# Warmup Iteration   4: 649974.185 ops/s
# Warmup Iteration   5: 778492.885 ops/s
# Warmup Iteration   6: 777564.685 ops/s
# Warmup Iteration   7: 779556.785 ops/s
# Warmup Iteration   8: 779646.951 ops/s
# Warmup Iteration   9: 779200.535 ops/s
# Warmup Iteration  10: 778728.678 ops/s
# Warmup Iteration  11: 778156.756 ops/s
# Warmup Iteration  12: 778399.682 ops/s
# Warmup Iteration  13: 777411.975 ops/s
# Warmup Iteration  14: 778100.365 ops/s
# Warmup Iteration  15: 779768.378 ops/s
# Warmup Iteration  16: 778655.126 ops/s
# Warmup Iteration  17: 779271.125 ops/s
# Warmup Iteration  18: 776655.627 ops/s
# Warmup Iteration  19: 778278.597 ops/s
# Warmup Iteration  20: 779232.162 ops/s
# Warmup Iteration  21: 779395.817 ops/s
# Warmup Iteration  22: 779711.039 ops/s
# Warmup Iteration  23: 780217.688 ops/s
# Warmup Iteration  24: 778838.681 ops/s
# Warmup Iteration  25: 778961.032 ops/s
# Warmup Iteration  26: 779185.585 ops/s
# Warmup Iteration  27: 777350.612 ops/s
# Warmup Iteration  28: 777429.576 ops/s
# Warmup Iteration  29: 777554.590 ops/s
# Warmup Iteration  30: 778605.234 ops/s
Iteration   1: 779818.939 ops/s
Iteration   2: 777595.051 ops/s
Iteration   3: 779227.523 ops/s
Iteration   4: 778001.213 ops/s
Iteration   5: 778168.422 ops/s
Iteration   6: 779755.615 ops/s
Iteration   7: 780942.203 ops/s
Iteration   8: 776705.284 ops/s
Iteration   9: 776755.196 ops/s
Iteration  10: 778327.204 ops/s
Iteration  11: 775803.267 ops/s
Iteration  12: 777344.053 ops/s
Iteration  13: 780681.447 ops/s
Iteration  14: 778122.286 ops/s
Iteration  15: 777869.185 ops/s
Iteration  16: 777242.096 ops/s
Iteration  17: 778591.314 ops/s
Iteration  18: 773370.510 ops/s
Iteration  19: 774625.123 ops/s
Iteration  20: 775233.814 ops/s
Iteration  21: 771423.220 ops/s
Iteration  22: 776924.887 ops/s
Iteration  23: 778097.315 ops/s
Iteration  24: 780316.170 ops/s
Iteration  25: 778514.130 ops/s
Iteration  26: 776200.502 ops/s
Iteration  27: 772456.856 ops/s
Iteration  28: 774465.079 ops/s
Iteration  29: 778125.114 ops/s
Iteration  30: 776928.901 ops/s


Result "org.eclipse.collections.impl.multimap.list.ImmutableListMultimapTest._Benchmark.benchmark_isEmpty":
  777254.397 ±(99.9%) 1544.349 ops/s [Average]
  (min, avg, max) = (771423.220, 777254.397, 780942.203), stdev = 2311.509
  CI (99.9%): [775710.048, 778798.746] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
ImmutableListMultimapTest._Benchmark.benchmark_isEmpty  thrpt   30  777254.397 ± 1544.349  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.ImmutableListMultimapTest._Benchmark.benchmark_keySet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.ImmutableListMultimapTest._Benchmark.benchmark_keySet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 164483.671 ops/s
# Warmup Iteration   2: 306994.952 ops/s
# Warmup Iteration   3: 354071.204 ops/s
# Warmup Iteration   4: 355620.296 ops/s
# Warmup Iteration   5: 355309.841 ops/s
# Warmup Iteration   6: 295568.579 ops/s
# Warmup Iteration   7: 356168.275 ops/s
# Warmup Iteration   8: 355018.795 ops/s
# Warmup Iteration   9: 355364.671 ops/s
# Warmup Iteration  10: 355798.058 ops/s
# Warmup Iteration  11: 355753.064 ops/s
# Warmup Iteration  12: 355816.408 ops/s
# Warmup Iteration  13: 354943.300 ops/s
# Warmup Iteration  14: 354126.425 ops/s
# Warmup Iteration  15: 353608.273 ops/s
# Warmup Iteration  16: 355894.170 ops/s
# Warmup Iteration  17: 354689.590 ops/s
# Warmup Iteration  18: 355216.815 ops/s
# Warmup Iteration  19: 356399.503 ops/s
# Warmup Iteration  20: 355038.060 ops/s
# Warmup Iteration  21: 354942.979 ops/s
# Warmup Iteration  22: 354416.863 ops/s
# Warmup Iteration  23: 356027.118 ops/s
# Warmup Iteration  24: 354982.527 ops/s
# Warmup Iteration  25: 354160.425 ops/s
# Warmup Iteration  26: 355169.770 ops/s
# Warmup Iteration  27: 355141.044 ops/s
# Warmup Iteration  28: 355387.299 ops/s
# Warmup Iteration  29: 353739.574 ops/s
# Warmup Iteration  30: 353905.623 ops/s
Iteration   1: 353832.577 ops/s
Iteration   2: 354894.488 ops/s
Iteration   3: 353466.696 ops/s
Iteration   4: 353249.270 ops/s
Iteration   5: 353699.753 ops/s
Iteration   6: 354384.123 ops/s
Iteration   7: 353795.604 ops/s
Iteration   8: 354125.998 ops/s
Iteration   9: 353946.355 ops/s
Iteration  10: 353965.448 ops/s
Iteration  11: 354723.827 ops/s
Iteration  12: 353108.298 ops/s
Iteration  13: 354739.692 ops/s
Iteration  14: 353809.457 ops/s
Iteration  15: 354398.045 ops/s
Iteration  16: 355491.864 ops/s
Iteration  17: 354552.043 ops/s
Iteration  18: 354086.860 ops/s
Iteration  19: 353885.813 ops/s
Iteration  20: 354417.156 ops/s
Iteration  21: 354508.221 ops/s
Iteration  22: 354041.404 ops/s
Iteration  23: 356578.598 ops/s
Iteration  24: 353177.939 ops/s
Iteration  25: 353792.683 ops/s
Iteration  26: 354421.115 ops/s
Iteration  27: 353484.814 ops/s
Iteration  28: 355265.726 ops/s
Iteration  29: 352337.630 ops/s
Iteration  30: 353191.478 ops/s


Result "org.eclipse.collections.impl.multimap.list.ImmutableListMultimapTest._Benchmark.benchmark_keySet":
  354112.433 ±(99.9%) 547.468 ops/s [Average]
  (min, avg, max) = (352337.630, 354112.433, 356578.598), stdev = 819.424
  CI (99.9%): [353564.965, 354659.901] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score     Error  Units
ImmutableListMultimapTest._Benchmark.benchmark_keySet  thrpt   30  354112.433 ± 547.468  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.ImmutableListMultimapTest._Benchmark.benchmark_newWithAll_newWithoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.ImmutableListMultimapTest._Benchmark.benchmark_newWithAll_newWithoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 113169.505 ops/s
# Warmup Iteration   2: 268401.122 ops/s
# Warmup Iteration   3: 296262.922 ops/s
# Warmup Iteration   4: 300377.830 ops/s
# Warmup Iteration   5: 251131.916 ops/s
# Warmup Iteration   6: 300357.405 ops/s
# Warmup Iteration   7: 301589.278 ops/s
# Warmup Iteration   8: 300788.373 ops/s
# Warmup Iteration   9: 301327.600 ops/s
# Warmup Iteration  10: 301030.042 ops/s
# Warmup Iteration  11: 301156.892 ops/s
# Warmup Iteration  12: 301461.247 ops/s
# Warmup Iteration  13: 301681.675 ops/s
# Warmup Iteration  14: 301761.434 ops/s
# Warmup Iteration  15: 301488.579 ops/s
# Warmup Iteration  16: 300711.460 ops/s
# Warmup Iteration  17: 301678.313 ops/s
# Warmup Iteration  18: 302181.576 ops/s
# Warmup Iteration  19: 301704.431 ops/s
# Warmup Iteration  20: 301413.962 ops/s
# Warmup Iteration  21: 301653.896 ops/s
# Warmup Iteration  22: 301269.197 ops/s
# Warmup Iteration  23: 302209.218 ops/s
# Warmup Iteration  24: 301022.473 ops/s
# Warmup Iteration  25: 301756.611 ops/s
# Warmup Iteration  26: 300917.525 ops/s
# Warmup Iteration  27: 301211.680 ops/s
# Warmup Iteration  28: 301305.423 ops/s
# Warmup Iteration  29: 301487.407 ops/s
# Warmup Iteration  30: 300745.010 ops/s
Iteration   1: 302438.120 ops/s
Iteration   2: 301348.993 ops/s
Iteration   3: 298993.966 ops/s
Iteration   4: 301116.810 ops/s
Iteration   5: 301817.405 ops/s
Iteration   6: 300847.498 ops/s
Iteration   7: 300792.246 ops/s
Iteration   8: 300329.785 ops/s
Iteration   9: 301320.219 ops/s
Iteration  10: 300482.993 ops/s
Iteration  11: 300853.853 ops/s
Iteration  12: 300943.997 ops/s
Iteration  13: 299383.353 ops/s
Iteration  14: 301212.351 ops/s
Iteration  15: 300413.623 ops/s
Iteration  16: 300032.862 ops/s
Iteration  17: 296508.433 ops/s
Iteration  18: 299678.853 ops/s
Iteration  19: 300698.953 ops/s
Iteration  20: 300778.433 ops/s
Iteration  21: 301437.232 ops/s
Iteration  22: 300902.665 ops/s
Iteration  23: 301247.253 ops/s
Iteration  24: 301168.433 ops/s
Iteration  25: 302479.404 ops/s
Iteration  26: 301151.715 ops/s
Iteration  27: 299980.087 ops/s
Iteration  28: 302315.040 ops/s
Iteration  29: 299387.500 ops/s
Iteration  30: 301396.375 ops/s


Result "org.eclipse.collections.impl.multimap.list.ImmutableListMultimapTest._Benchmark.benchmark_newWithAll_newWithoutAll":
  300715.282 ±(99.9%) 778.749 ops/s [Average]
  (min, avg, max) = (296508.433, 300715.282, 302479.404), stdev = 1165.595
  CI (99.9%): [299936.533, 301494.031] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score     Error  Units
ImmutableListMultimapTest._Benchmark.benchmark_newWithAll_newWithoutAll  thrpt   30  300715.282 ± 778.749  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.ImmutableListMultimapTest._Benchmark.benchmark_newWithout$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.ImmutableListMultimapTest._Benchmark.benchmark_newWithout

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 179058.644 ops/s
# Warmup Iteration   2: 455029.650 ops/s
# Warmup Iteration   3: 490083.498 ops/s
# Warmup Iteration   4: 419152.046 ops/s
# Warmup Iteration   5: 480782.481 ops/s
# Warmup Iteration   6: 486988.680 ops/s
# Warmup Iteration   7: 487147.177 ops/s
# Warmup Iteration   8: 485256.164 ops/s
# Warmup Iteration   9: 483309.703 ops/s
# Warmup Iteration  10: 483430.735 ops/s
# Warmup Iteration  11: 488367.919 ops/s
# Warmup Iteration  12: 488252.924 ops/s
# Warmup Iteration  13: 487462.211 ops/s
# Warmup Iteration  14: 487793.360 ops/s
# Warmup Iteration  15: 488990.345 ops/s
# Warmup Iteration  16: 484022.109 ops/s
# Warmup Iteration  17: 486785.182 ops/s
# Warmup Iteration  18: 488085.171 ops/s
# Warmup Iteration  19: 487901.141 ops/s
# Warmup Iteration  20: 488420.877 ops/s
# Warmup Iteration  21: 489068.088 ops/s
# Warmup Iteration  22: 486245.296 ops/s
# Warmup Iteration  23: 487065.607 ops/s
# Warmup Iteration  24: 489119.827 ops/s
# Warmup Iteration  25: 488887.617 ops/s
# Warmup Iteration  26: 488446.819 ops/s
# Warmup Iteration  27: 485812.731 ops/s
# Warmup Iteration  28: 487908.385 ops/s
# Warmup Iteration  29: 486937.589 ops/s
# Warmup Iteration  30: 487218.435 ops/s
Iteration   1: 489280.468 ops/s
Iteration   2: 489536.124 ops/s
Iteration   3: 489937.834 ops/s
Iteration   4: 486773.432 ops/s
Iteration   5: 482476.554 ops/s
Iteration   6: 486382.932 ops/s
Iteration   7: 486305.298 ops/s
Iteration   8: 484121.690 ops/s
Iteration   9: 486131.703 ops/s
Iteration  10: 488723.774 ops/s
Iteration  11: 488326.132 ops/s
Iteration  12: 485631.430 ops/s
Iteration  13: 484679.093 ops/s
Iteration  14: 487558.929 ops/s
Iteration  15: 487727.956 ops/s
Iteration  16: 486388.848 ops/s
Iteration  17: 485193.302 ops/s
Iteration  18: 487096.019 ops/s
Iteration  19: 487899.028 ops/s
Iteration  20: 488392.670 ops/s
Iteration  21: 487739.141 ops/s
Iteration  22: 481587.646 ops/s
Iteration  23: 484793.110 ops/s
Iteration  24: 486530.629 ops/s
Iteration  25: 484697.419 ops/s
Iteration  26: 487188.136 ops/s
Iteration  27: 485378.117 ops/s
Iteration  28: 489437.012 ops/s
Iteration  29: 486195.429 ops/s
Iteration  30: 487121.890 ops/s


Result "org.eclipse.collections.impl.multimap.list.ImmutableListMultimapTest._Benchmark.benchmark_newWithout":
  486641.058 ±(99.9%) 1333.569 ops/s [Average]
  (min, avg, max) = (481587.646, 486641.058, 489937.834), stdev = 1996.024
  CI (99.9%): [485307.489, 487974.627] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
ImmutableListMultimapTest._Benchmark.benchmark_newWithout  thrpt   30  486641.058 ± 1333.569  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.ImmutableListMultimapTest._Benchmark.benchmark_noDuplicates$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.ImmutableListMultimapTest._Benchmark.benchmark_noDuplicates

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 171039878.531 ops/s
# Warmup Iteration   2: 297132959.396 ops/s
# Warmup Iteration   3: 247095194.439 ops/s
# Warmup Iteration   4: 279524499.705 ops/s
# Warmup Iteration   5: 279738972.137 ops/s
# Warmup Iteration   6: 278385670.972 ops/s
# Warmup Iteration   7: 279381747.381 ops/s
# Warmup Iteration   8: 279516137.667 ops/s
# Warmup Iteration   9: 280841173.725 ops/s
# Warmup Iteration  10: 278591757.868 ops/s
# Warmup Iteration  11: 280159808.444 ops/s
# Warmup Iteration  12: 280437796.218 ops/s
# Warmup Iteration  13: 280478267.448 ops/s
# Warmup Iteration  14: 280055821.558 ops/s
# Warmup Iteration  15: 278689485.086 ops/s
# Warmup Iteration  16: 278053992.082 ops/s
# Warmup Iteration  17: 277494111.845 ops/s
# Warmup Iteration  18: 275788981.542 ops/s
# Warmup Iteration  19: 274757857.806 ops/s
# Warmup Iteration  20: 278455584.707 ops/s
# Warmup Iteration  21: 277087335.772 ops/s
# Warmup Iteration  22: 277814236.161 ops/s
# Warmup Iteration  23: 275796521.848 ops/s
# Warmup Iteration  24: 275180007.432 ops/s
# Warmup Iteration  25: 275791732.637 ops/s
# Warmup Iteration  26: 274839425.379 ops/s
# Warmup Iteration  27: 273341758.866 ops/s
# Warmup Iteration  28: 274781393.626 ops/s
# Warmup Iteration  29: 275603752.308 ops/s
# Warmup Iteration  30: 277252696.050 ops/s
Iteration   1: 276126859.528 ops/s
Iteration   2: 277863829.289 ops/s
Iteration   3: 277095172.332 ops/s
Iteration   4: 277305273.715 ops/s
Iteration   5: 275782745.964 ops/s
Iteration   6: 276072844.088 ops/s
Iteration   7: 276938854.495 ops/s
Iteration   8: 276043762.417 ops/s
Iteration   9: 275928060.384 ops/s
Iteration  10: 276186807.369 ops/s
Iteration  11: 275591859.967 ops/s
Iteration  12: 276060007.572 ops/s
Iteration  13: 274696268.680 ops/s
Iteration  14: 276164088.068 ops/s
Iteration  15: 272976176.176 ops/s
Iteration  16: 271924293.866 ops/s
Iteration  17: 272661031.867 ops/s
Iteration  18: 276080397.288 ops/s
Iteration  19: 275734843.604 ops/s
Iteration  20: 276679375.607 ops/s
Iteration  21: 274828728.881 ops/s
Iteration  22: 278175305.761 ops/s
Iteration  23: 277240259.074 ops/s
Iteration  24: 276785097.759 ops/s
Iteration  25: 276071571.414 ops/s
Iteration  26: 274742911.048 ops/s
Iteration  27: 275374820.451 ops/s
Iteration  28: 275153546.768 ops/s
Iteration  29: 275656114.083 ops/s
Iteration  30: 273699556.805 ops/s


Result "org.eclipse.collections.impl.multimap.list.ImmutableListMultimapTest._Benchmark.benchmark_noDuplicates":
  275721348.811 ±(99.9%) 966913.764 ops/s [Average]
  (min, avg, max) = (271924293.866, 275721348.811, 278175305.761), stdev = 1447231.113
  CI (99.9%): [274754435.047, 276688262.575] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt          Score        Error  Units
ImmutableListMultimapTest._Benchmark.benchmark_noDuplicates  thrpt   30  275721348.811 ± 966913.764  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.ImmutableListMultimapTest._Benchmark.benchmark_rejectKeysMultiValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.ImmutableListMultimapTest._Benchmark.benchmark_rejectKeysMultiValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 165273.323 ops/s
# Warmup Iteration   2: 364129.017 ops/s
# Warmup Iteration   3: 422563.413 ops/s
# Warmup Iteration   4: 424907.228 ops/s
# Warmup Iteration   5: 384530.663 ops/s
# Warmup Iteration   6: 395016.533 ops/s
# Warmup Iteration   7: 426643.291 ops/s
# Warmup Iteration   8: 425687.425 ops/s
# Warmup Iteration   9: 425769.569 ops/s
# Warmup Iteration  10: 423847.592 ops/s
# Warmup Iteration  11: 424536.014 ops/s
# Warmup Iteration  12: 424478.874 ops/s
# Warmup Iteration  13: 423755.918 ops/s
# Warmup Iteration  14: 426186.417 ops/s
# Warmup Iteration  15: 424539.806 ops/s
# Warmup Iteration  16: 424527.015 ops/s
# Warmup Iteration  17: 424680.902 ops/s
# Warmup Iteration  18: 423763.575 ops/s
# Warmup Iteration  19: 425046.170 ops/s
# Warmup Iteration  20: 423553.511 ops/s
# Warmup Iteration  21: 424323.589 ops/s
# Warmup Iteration  22: 426287.092 ops/s
# Warmup Iteration  23: 425774.137 ops/s
# Warmup Iteration  24: 425467.075 ops/s
# Warmup Iteration  25: 426083.977 ops/s
# Warmup Iteration  26: 426159.931 ops/s
# Warmup Iteration  27: 425856.184 ops/s
# Warmup Iteration  28: 425154.963 ops/s
# Warmup Iteration  29: 426283.504 ops/s
# Warmup Iteration  30: 425809.987 ops/s
Iteration   1: 425645.590 ops/s
Iteration   2: 426086.908 ops/s
Iteration   3: 426059.127 ops/s
Iteration   4: 425615.298 ops/s
Iteration   5: 424312.282 ops/s
Iteration   6: 426289.805 ops/s
Iteration   7: 425962.247 ops/s
Iteration   8: 426888.265 ops/s
Iteration   9: 424362.579 ops/s
Iteration  10: 424204.803 ops/s
Iteration  11: 425028.273 ops/s
Iteration  12: 425797.784 ops/s
Iteration  13: 424793.886 ops/s
Iteration  14: 425997.813 ops/s
Iteration  15: 424586.033 ops/s
Iteration  16: 419408.304 ops/s
Iteration  17: 425840.701 ops/s
Iteration  18: 418670.691 ops/s
Iteration  19: 427480.298 ops/s
Iteration  20: 424035.076 ops/s
Iteration  21: 423630.628 ops/s
Iteration  22: 425617.271 ops/s
Iteration  23: 426540.754 ops/s
Iteration  24: 425855.534 ops/s
Iteration  25: 424911.233 ops/s
Iteration  26: 424260.643 ops/s
Iteration  27: 424793.048 ops/s
Iteration  28: 427229.060 ops/s
Iteration  29: 418163.230 ops/s
Iteration  30: 426687.778 ops/s


Result "org.eclipse.collections.impl.multimap.list.ImmutableListMultimapTest._Benchmark.benchmark_rejectKeysMultiValues":
  424825.165 ±(99.9%) 1526.207 ops/s [Average]
  (min, avg, max) = (418163.230, 424825.165, 427480.298), stdev = 2284.354
  CI (99.9%): [423298.958, 426351.371] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
ImmutableListMultimapTest._Benchmark.benchmark_rejectKeysMultiValues  thrpt   30  424825.165 ± 1526.207  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.ImmutableListMultimapTest._Benchmark.benchmark_rejectKeysValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.ImmutableListMultimapTest._Benchmark.benchmark_rejectKeysValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 192546.000 ops/s
# Warmup Iteration   2: 455030.772 ops/s
# Warmup Iteration   3: 501136.578 ops/s
# Warmup Iteration   4: 501480.529 ops/s
# Warmup Iteration   5: 420845.672 ops/s
# Warmup Iteration   6: 503816.111 ops/s
# Warmup Iteration   7: 504454.059 ops/s
# Warmup Iteration   8: 504416.799 ops/s
# Warmup Iteration   9: 504382.301 ops/s
# Warmup Iteration  10: 500027.394 ops/s
# Warmup Iteration  11: 505443.248 ops/s
# Warmup Iteration  12: 504717.313 ops/s
# Warmup Iteration  13: 504536.633 ops/s
# Warmup Iteration  14: 503203.869 ops/s
# Warmup Iteration  15: 505006.474 ops/s
# Warmup Iteration  16: 504233.920 ops/s
# Warmup Iteration  17: 479305.633 ops/s
# Warmup Iteration  18: 478884.300 ops/s
# Warmup Iteration  19: 478532.936 ops/s
# Warmup Iteration  20: 477232.712 ops/s
# Warmup Iteration  21: 478918.843 ops/s
# Warmup Iteration  22: 479602.175 ops/s
# Warmup Iteration  23: 479170.689 ops/s
# Warmup Iteration  24: 479980.292 ops/s
# Warmup Iteration  25: 478125.598 ops/s
# Warmup Iteration  26: 480419.068 ops/s
# Warmup Iteration  27: 478015.856 ops/s
# Warmup Iteration  28: 478259.922 ops/s
# Warmup Iteration  29: 478226.264 ops/s
# Warmup Iteration  30: 479597.106 ops/s
Iteration   1: 480162.429 ops/s
Iteration   2: 480367.597 ops/s
Iteration   3: 477715.467 ops/s
Iteration   4: 479578.679 ops/s
Iteration   5: 480190.743 ops/s
Iteration   6: 476956.805 ops/s
Iteration   7: 477470.899 ops/s
Iteration   8: 476610.353 ops/s
Iteration   9: 477441.357 ops/s
Iteration  10: 480107.275 ops/s
Iteration  11: 478117.558 ops/s
Iteration  12: 478845.767 ops/s
Iteration  13: 476486.609 ops/s
Iteration  14: 476510.771 ops/s
Iteration  15: 476498.893 ops/s
Iteration  16: 478675.985 ops/s
Iteration  17: 476129.440 ops/s
Iteration  18: 479926.901 ops/s
Iteration  19: 480798.104 ops/s
Iteration  20: 479833.218 ops/s
Iteration  21: 478920.347 ops/s
Iteration  22: 479662.384 ops/s
Iteration  23: 480116.597 ops/s
Iteration  24: 478527.368 ops/s
Iteration  25: 478191.743 ops/s
Iteration  26: 478823.987 ops/s
Iteration  27: 477275.892 ops/s
Iteration  28: 480690.477 ops/s
Iteration  29: 477547.304 ops/s
Iteration  30: 480257.957 ops/s


Result "org.eclipse.collections.impl.multimap.list.ImmutableListMultimapTest._Benchmark.benchmark_rejectKeysValues":
  478614.630 ±(99.9%) 983.749 ops/s [Average]
  (min, avg, max) = (476129.440, 478614.630, 480798.104), stdev = 1472.429
  CI (99.9%): [477630.882, 479598.379] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score     Error  Units
ImmutableListMultimapTest._Benchmark.benchmark_rejectKeysValues  thrpt   30  478614.630 ± 983.749  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.ImmutableListMultimapTest._Benchmark.benchmark_selectKeysMultiValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.ImmutableListMultimapTest._Benchmark.benchmark_selectKeysMultiValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 174609.612 ops/s
# Warmup Iteration   2: 356908.381 ops/s
# Warmup Iteration   3: 410500.677 ops/s
# Warmup Iteration   4: 412179.290 ops/s
# Warmup Iteration   5: 397411.907 ops/s
# Warmup Iteration   6: 358132.122 ops/s
# Warmup Iteration   7: 412607.888 ops/s
# Warmup Iteration   8: 413743.973 ops/s
# Warmup Iteration   9: 412594.893 ops/s
# Warmup Iteration  10: 412600.500 ops/s
# Warmup Iteration  11: 412532.243 ops/s
# Warmup Iteration  12: 412609.924 ops/s
# Warmup Iteration  13: 413127.042 ops/s
# Warmup Iteration  14: 412671.527 ops/s
# Warmup Iteration  15: 412818.165 ops/s
# Warmup Iteration  16: 413346.493 ops/s
# Warmup Iteration  17: 408410.864 ops/s
# Warmup Iteration  18: 407643.803 ops/s
# Warmup Iteration  19: 408714.536 ops/s
# Warmup Iteration  20: 408339.381 ops/s
# Warmup Iteration  21: 408655.648 ops/s
# Warmup Iteration  22: 407849.822 ops/s
# Warmup Iteration  23: 408773.842 ops/s
# Warmup Iteration  24: 408104.974 ops/s
# Warmup Iteration  25: 407352.133 ops/s
# Warmup Iteration  26: 408887.203 ops/s
# Warmup Iteration  27: 408189.822 ops/s
# Warmup Iteration  28: 408076.387 ops/s
# Warmup Iteration  29: 408276.021 ops/s
# Warmup Iteration  30: 409170.134 ops/s
Iteration   1: 409479.893 ops/s
Iteration   2: 408291.313 ops/s
Iteration   3: 408391.126 ops/s
Iteration   4: 409488.018 ops/s
Iteration   5: 408436.130 ops/s
Iteration   6: 401572.430 ops/s
Iteration   7: 408102.417 ops/s
Iteration   8: 407233.906 ops/s
Iteration   9: 409975.905 ops/s
Iteration  10: 408899.753 ops/s
Iteration  11: 408652.492 ops/s
Iteration  12: 408359.964 ops/s
Iteration  13: 407838.352 ops/s
Iteration  14: 408320.073 ops/s
Iteration  15: 408581.032 ops/s
Iteration  16: 409693.332 ops/s
Iteration  17: 408347.107 ops/s
Iteration  18: 407536.207 ops/s
Iteration  19: 407783.358 ops/s
Iteration  20: 407940.384 ops/s
Iteration  21: 407320.071 ops/s
Iteration  22: 409314.336 ops/s
Iteration  23: 408098.723 ops/s
Iteration  24: 407664.337 ops/s
Iteration  25: 407769.731 ops/s
Iteration  26: 408573.863 ops/s
Iteration  27: 409226.267 ops/s
Iteration  28: 409048.468 ops/s
Iteration  29: 408087.070 ops/s
Iteration  30: 408135.373 ops/s


Result "org.eclipse.collections.impl.multimap.list.ImmutableListMultimapTest._Benchmark.benchmark_selectKeysMultiValues":
  408205.381 ±(99.9%) 959.324 ops/s [Average]
  (min, avg, max) = (401572.430, 408205.381, 409975.905), stdev = 1435.872
  CI (99.9%): [407246.057, 409164.705] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score     Error  Units
ImmutableListMultimapTest._Benchmark.benchmark_selectKeysMultiValues  thrpt   30  408205.381 ± 959.324  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.ImmutableListMultimapTest._Benchmark.benchmark_selectKeysValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.ImmutableListMultimapTest._Benchmark.benchmark_selectKeysValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 194204.672 ops/s
# Warmup Iteration   2: 463393.687 ops/s
# Warmup Iteration   3: 508940.844 ops/s
# Warmup Iteration   4: 511615.774 ops/s
# Warmup Iteration   5: 426513.751 ops/s
# Warmup Iteration   6: 513024.593 ops/s
# Warmup Iteration   7: 512913.367 ops/s
# Warmup Iteration   8: 512155.919 ops/s
# Warmup Iteration   9: 512296.853 ops/s
# Warmup Iteration  10: 513640.130 ops/s
# Warmup Iteration  11: 513779.365 ops/s
# Warmup Iteration  12: 513094.525 ops/s
# Warmup Iteration  13: 504086.751 ops/s
# Warmup Iteration  14: 512102.605 ops/s
# Warmup Iteration  15: 509987.988 ops/s
# Warmup Iteration  16: 512777.446 ops/s
# Warmup Iteration  17: 513967.268 ops/s
# Warmup Iteration  18: 515323.148 ops/s
# Warmup Iteration  19: 512347.878 ops/s
# Warmup Iteration  20: 513489.831 ops/s
# Warmup Iteration  21: 513181.985 ops/s
# Warmup Iteration  22: 513394.654 ops/s
# Warmup Iteration  23: 511424.243 ops/s
# Warmup Iteration  24: 512479.860 ops/s
# Warmup Iteration  25: 514862.578 ops/s
# Warmup Iteration  26: 513362.027 ops/s
# Warmup Iteration  27: 513835.328 ops/s
# Warmup Iteration  28: 514829.640 ops/s
# Warmup Iteration  29: 513903.376 ops/s
# Warmup Iteration  30: 513926.132 ops/s
Iteration   1: 513854.617 ops/s
Iteration   2: 511723.621 ops/s
Iteration   3: 512652.672 ops/s
Iteration   4: 513640.733 ops/s
Iteration   5: 515677.799 ops/s
Iteration   6: 514489.455 ops/s
Iteration   7: 512140.530 ops/s
Iteration   8: 514270.450 ops/s
Iteration   9: 514139.896 ops/s
Iteration  10: 514405.040 ops/s
Iteration  11: 514142.993 ops/s
Iteration  12: 513218.556 ops/s
Iteration  13: 512756.532 ops/s
Iteration  14: 515230.231 ops/s
Iteration  15: 515060.017 ops/s
Iteration  16: 513707.483 ops/s
Iteration  17: 513728.532 ops/s
Iteration  18: 514932.642 ops/s
Iteration  19: 512880.991 ops/s
Iteration  20: 513782.563 ops/s
Iteration  21: 513723.135 ops/s
Iteration  22: 512419.323 ops/s
Iteration  23: 510370.435 ops/s
Iteration  24: 509711.891 ops/s
Iteration  25: 513582.884 ops/s
Iteration  26: 514494.700 ops/s
Iteration  27: 512926.635 ops/s
Iteration  28: 513963.399 ops/s
Iteration  29: 511627.740 ops/s
Iteration  30: 513080.356 ops/s


Result "org.eclipse.collections.impl.multimap.list.ImmutableListMultimapTest._Benchmark.benchmark_selectKeysValues":
  513411.195 ±(99.9%) 901.854 ops/s [Average]
  (min, avg, max) = (509711.891, 513411.195, 515677.799), stdev = 1349.853
  CI (99.9%): [512509.341, 514313.049] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score     Error  Units
ImmutableListMultimapTest._Benchmark.benchmark_selectKeysValues  thrpt   30  513411.195 ± 901.854  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.ImmutableListMultimapTest._Benchmark.benchmark_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.ImmutableListMultimapTest._Benchmark.benchmark_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 283905.581 ops/s
# Warmup Iteration   2: 638593.856 ops/s
# Warmup Iteration   3: 695432.777 ops/s
# Warmup Iteration   4: 695932.826 ops/s
# Warmup Iteration   5: 582781.159 ops/s
# Warmup Iteration   6: 697419.374 ops/s
# Warmup Iteration   7: 700417.014 ops/s
# Warmup Iteration   8: 698848.209 ops/s
# Warmup Iteration   9: 699953.655 ops/s
# Warmup Iteration  10: 698590.652 ops/s
# Warmup Iteration  11: 700293.106 ops/s
# Warmup Iteration  12: 696848.164 ops/s
# Warmup Iteration  13: 697408.380 ops/s
# Warmup Iteration  14: 698862.817 ops/s
# Warmup Iteration  15: 700530.395 ops/s
# Warmup Iteration  16: 697981.892 ops/s
# Warmup Iteration  17: 693809.902 ops/s
# Warmup Iteration  18: 694315.509 ops/s
# Warmup Iteration  19: 694122.896 ops/s
# Warmup Iteration  20: 695240.214 ops/s
# Warmup Iteration  21: 693526.927 ops/s
# Warmup Iteration  22: 695385.638 ops/s
# Warmup Iteration  23: 694224.140 ops/s
# Warmup Iteration  24: 693301.512 ops/s
# Warmup Iteration  25: 694206.648 ops/s
# Warmup Iteration  26: 694227.775 ops/s
# Warmup Iteration  27: 693331.290 ops/s
# Warmup Iteration  28: 695277.398 ops/s
# Warmup Iteration  29: 694148.885 ops/s
# Warmup Iteration  30: 695299.819 ops/s
Iteration   1: 695319.110 ops/s
Iteration   2: 695935.982 ops/s
Iteration   3: 697672.923 ops/s
Iteration   4: 694814.193 ops/s
Iteration   5: 694537.324 ops/s
Iteration   6: 693950.887 ops/s
Iteration   7: 695350.714 ops/s
Iteration   8: 694433.673 ops/s
Iteration   9: 695532.160 ops/s
Iteration  10: 697001.054 ops/s
Iteration  11: 696039.545 ops/s
Iteration  12: 695344.342 ops/s
Iteration  13: 696308.719 ops/s
Iteration  14: 685372.196 ops/s
Iteration  15: 695296.336 ops/s
Iteration  16: 694022.860 ops/s
Iteration  17: 695826.354 ops/s
Iteration  18: 697542.750 ops/s
Iteration  19: 695605.060 ops/s
Iteration  20: 694347.890 ops/s
Iteration  21: 694326.248 ops/s
Iteration  22: 697631.074 ops/s
Iteration  23: 694897.269 ops/s
Iteration  24: 696173.398 ops/s
Iteration  25: 695619.658 ops/s
Iteration  26: 693896.364 ops/s
Iteration  27: 695174.090 ops/s
Iteration  28: 693670.749 ops/s
Iteration  29: 696333.992 ops/s
Iteration  30: 695023.675 ops/s


Result "org.eclipse.collections.impl.multimap.list.ImmutableListMultimapTest._Benchmark.benchmark_size":
  695100.020 ±(99.9%) 1427.749 ops/s [Average]
  (min, avg, max) = (685372.196, 695100.020, 697672.923), stdev = 2136.988
  CI (99.9%): [693672.270, 696527.769] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
ImmutableListMultimapTest._Benchmark.benchmark_size  thrpt   30  695100.020 ± 1427.749  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.ImmutableListMultimapTest._Benchmark.benchmark_testSerialization$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.ImmutableListMultimapTest._Benchmark.benchmark_testSerialization

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 50413.261 ops/s
# Warmup Iteration   2: 83778.120 ops/s
# Warmup Iteration   3: 104411.806 ops/s
# Warmup Iteration   4: 104218.662 ops/s
# Warmup Iteration   5: 104934.560 ops/s
# Warmup Iteration   6: 104833.858 ops/s
# Warmup Iteration   7: 88786.981 ops/s
# Warmup Iteration   8: 105065.552 ops/s
# Warmup Iteration   9: 104514.001 ops/s
# Warmup Iteration  10: 105267.969 ops/s
# Warmup Iteration  11: 105266.716 ops/s
# Warmup Iteration  12: 105047.739 ops/s
# Warmup Iteration  13: 105238.896 ops/s
# Warmup Iteration  14: 105102.184 ops/s
# Warmup Iteration  15: 105136.937 ops/s
# Warmup Iteration  16: 105112.790 ops/s
# Warmup Iteration  17: 104033.522 ops/s
# Warmup Iteration  18: 104128.143 ops/s
# Warmup Iteration  19: 105476.283 ops/s
# Warmup Iteration  20: 105391.024 ops/s
# Warmup Iteration  21: 105056.753 ops/s
# Warmup Iteration  22: 105037.453 ops/s
# Warmup Iteration  23: 104857.218 ops/s
# Warmup Iteration  24: 105548.369 ops/s
# Warmup Iteration  25: 105146.354 ops/s
# Warmup Iteration  26: 105044.014 ops/s
# Warmup Iteration  27: 105170.763 ops/s
# Warmup Iteration  28: 104711.056 ops/s
# Warmup Iteration  29: 104814.053 ops/s
# Warmup Iteration  30: 104510.601 ops/s
Iteration   1: 104589.683 ops/s
Iteration   2: 104980.054 ops/s
Iteration   3: 104187.475 ops/s
Iteration   4: 104551.800 ops/s
Iteration   5: 103986.992 ops/s
Iteration   6: 104149.310 ops/s
Iteration   7: 105165.568 ops/s
Iteration   8: 105417.131 ops/s
Iteration   9: 105369.064 ops/s
Iteration  10: 104917.670 ops/s
Iteration  11: 104904.705 ops/s
Iteration  12: 105144.554 ops/s
Iteration  13: 105343.089 ops/s
Iteration  14: 103629.252 ops/s
Iteration  15: 105216.794 ops/s
Iteration  16: 103365.558 ops/s
Iteration  17: 103686.358 ops/s
Iteration  18: 104815.488 ops/s
Iteration  19: 105118.507 ops/s
Iteration  20: 104605.570 ops/s
Iteration  21: 105078.310 ops/s
Iteration  22: 105045.944 ops/s
Iteration  23: 104652.663 ops/s
Iteration  24: 105166.131 ops/s
Iteration  25: 104420.021 ops/s
Iteration  26: 105255.818 ops/s
Iteration  27: 104710.899 ops/s
Iteration  28: 103513.084 ops/s
Iteration  29: 104888.506 ops/s
Iteration  30: 105343.448 ops/s


Result "org.eclipse.collections.impl.multimap.list.ImmutableListMultimapTest._Benchmark.benchmark_testSerialization":
  104707.315 ±(99.9%) 396.460 ops/s [Average]
  (min, avg, max) = (103365.558, 104707.315, 105417.131), stdev = 593.403
  CI (99.9%): [104310.854, 105103.775] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score     Error  Units
ImmutableListMultimapTest._Benchmark.benchmark_testSerialization  thrpt   30  104707.315 ± 396.460  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.ImmutableListMultimapTest._Benchmark.benchmark_toImmutable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.ImmutableListMultimapTest._Benchmark.benchmark_toImmutable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6444673.165 ops/s
# Warmup Iteration   2: 12166218.336 ops/s
# Warmup Iteration   3: 11751178.022 ops/s
# Warmup Iteration   4: 12714595.464 ops/s
# Warmup Iteration   5: 12835160.611 ops/s
# Warmup Iteration   6: 12834802.831 ops/s
# Warmup Iteration   7: 12781583.607 ops/s
# Warmup Iteration   8: 12836162.711 ops/s
# Warmup Iteration   9: 12756829.094 ops/s
# Warmup Iteration  10: 12782389.726 ops/s
# Warmup Iteration  11: 12768986.414 ops/s
# Warmup Iteration  12: 12632396.416 ops/s
# Warmup Iteration  13: 12831931.299 ops/s
# Warmup Iteration  14: 12738852.710 ops/s
# Warmup Iteration  15: 12708419.861 ops/s
# Warmup Iteration  16: 12865546.916 ops/s
# Warmup Iteration  17: 12584047.883 ops/s
# Warmup Iteration  18: 12768017.316 ops/s
# Warmup Iteration  19: 12847149.111 ops/s
# Warmup Iteration  20: 12716827.233 ops/s
# Warmup Iteration  21: 12840587.153 ops/s
# Warmup Iteration  22: 12659946.359 ops/s
# Warmup Iteration  23: 12777033.012 ops/s
# Warmup Iteration  24: 12843200.214 ops/s
# Warmup Iteration  25: 12740540.318 ops/s
# Warmup Iteration  26: 12719167.455 ops/s
# Warmup Iteration  27: 12729859.765 ops/s
# Warmup Iteration  28: 12756888.244 ops/s
# Warmup Iteration  29: 12821212.453 ops/s
# Warmup Iteration  30: 12797550.477 ops/s
Iteration   1: 12802829.491 ops/s
Iteration   2: 12643038.879 ops/s
Iteration   3: 12736288.767 ops/s
Iteration   4: 12799370.989 ops/s
Iteration   5: 12766844.645 ops/s
Iteration   6: 12801438.401 ops/s
Iteration   7: 12760145.198 ops/s
Iteration   8: 12733845.720 ops/s
Iteration   9: 12644171.596 ops/s
Iteration  10: 12784132.837 ops/s
Iteration  11: 12835156.522 ops/s
Iteration  12: 12761834.613 ops/s
Iteration  13: 12569857.797 ops/s
Iteration  14: 12725904.222 ops/s
Iteration  15: 12737955.644 ops/s
Iteration  16: 12651453.132 ops/s
Iteration  17: 12834810.407 ops/s
Iteration  18: 12699591.850 ops/s
Iteration  19: 12639026.130 ops/s
Iteration  20: 12788758.373 ops/s
Iteration  21: 12804872.051 ops/s
Iteration  22: 12869626.412 ops/s
Iteration  23: 12732028.598 ops/s
Iteration  24: 12695353.371 ops/s
Iteration  25: 12750623.674 ops/s
Iteration  26: 12764157.719 ops/s
Iteration  27: 12839817.687 ops/s
Iteration  28: 12789061.126 ops/s
Iteration  29: 12743514.081 ops/s
Iteration  30: 12759694.983 ops/s


Result "org.eclipse.collections.impl.multimap.list.ImmutableListMultimapTest._Benchmark.benchmark_toImmutable":
  12748840.164 ±(99.9%) 45898.649 ops/s [Average]
  (min, avg, max) = (12569857.797, 12748840.164, 12869626.412), stdev = 68698.942
  CI (99.9%): [12702941.515, 12794738.813] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
ImmutableListMultimapTest._Benchmark.benchmark_toImmutable  thrpt   30  12748840.164 ± 45898.649  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.ImmutableListMultimapTest._Benchmark.benchmark_toMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.ImmutableListMultimapTest._Benchmark.benchmark_toMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 830258.788 ops/s
# Warmup Iteration   2: 2230192.839 ops/s
# Warmup Iteration   3: 1850773.840 ops/s
# Warmup Iteration   4: 2223561.819 ops/s
# Warmup Iteration   5: 2208345.589 ops/s
# Warmup Iteration   6: 2230223.177 ops/s
# Warmup Iteration   7: 2216791.099 ops/s
# Warmup Iteration   8: 2236414.648 ops/s
# Warmup Iteration   9: 2230434.261 ops/s
# Warmup Iteration  10: 2230432.975 ops/s
# Warmup Iteration  11: 2224001.338 ops/s
# Warmup Iteration  12: 2231849.458 ops/s
# Warmup Iteration  13: 2230270.908 ops/s
# Warmup Iteration  14: 2228354.828 ops/s
# Warmup Iteration  15: 2228862.183 ops/s
# Warmup Iteration  16: 2229096.461 ops/s
# Warmup Iteration  17: 2217957.030 ops/s
# Warmup Iteration  18: 2222938.843 ops/s
# Warmup Iteration  19: 2202926.280 ops/s
# Warmup Iteration  20: 2228984.623 ops/s
# Warmup Iteration  21: 2233813.760 ops/s
# Warmup Iteration  22: 2227856.370 ops/s
# Warmup Iteration  23: 2233466.457 ops/s
# Warmup Iteration  24: 2229344.710 ops/s
# Warmup Iteration  25: 2226758.914 ops/s
# Warmup Iteration  26: 2235954.350 ops/s
# Warmup Iteration  27: 2226268.582 ops/s
# Warmup Iteration  28: 2215668.394 ops/s
# Warmup Iteration  29: 2229852.956 ops/s
# Warmup Iteration  30: 2230130.419 ops/s
Iteration   1: 2190428.237 ops/s
Iteration   2: 2233638.109 ops/s
Iteration   3: 2227870.920 ops/s
Iteration   4: 2224160.764 ops/s
Iteration   5: 2229372.550 ops/s
Iteration   6: 2238432.670 ops/s
Iteration   7: 2224006.698 ops/s
Iteration   8: 2184224.847 ops/s
Iteration   9: 2227578.595 ops/s
Iteration  10: 2247670.960 ops/s
Iteration  11: 2228095.712 ops/s
Iteration  12: 2229042.917 ops/s
Iteration  13: 2237393.880 ops/s
Iteration  14: 2236039.418 ops/s
Iteration  15: 2239642.603 ops/s
Iteration  16: 2227350.224 ops/s
Iteration  17: 2227284.894 ops/s
Iteration  18: 2228591.453 ops/s
Iteration  19: 2237772.156 ops/s
Iteration  20: 2235813.557 ops/s
Iteration  21: 2233259.033 ops/s
Iteration  22: 2219597.939 ops/s
Iteration  23: 2191801.049 ops/s
Iteration  24: 2230334.690 ops/s
Iteration  25: 2233597.606 ops/s
Iteration  26: 2229534.539 ops/s
Iteration  27: 2234323.483 ops/s
Iteration  28: 2224119.104 ops/s
Iteration  29: 2246134.692 ops/s
Iteration  30: 2235393.298 ops/s


Result "org.eclipse.collections.impl.multimap.list.ImmutableListMultimapTest._Benchmark.benchmark_toMap":
  2227750.220 ±(99.9%) 9784.710 ops/s [Average]
  (min, avg, max) = (2184224.847, 2227750.220, 2247670.960), stdev = 14645.294
  CI (99.9%): [2217965.510, 2237534.930] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ImmutableListMultimapTest._Benchmark.benchmark_toMap  thrpt   30  2227750.220 ± 9784.710  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.MultiReaderFastListMultimapTest._Benchmark.benchmark_addAndGrowMultimap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.MultiReaderFastListMultimapTest._Benchmark.benchmark_addAndGrowMultimap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 321108.540 ops/s
# Warmup Iteration   2: 678774.403 ops/s
# Warmup Iteration   3: 735191.009 ops/s
# Warmup Iteration   4: 736186.579 ops/s
# Warmup Iteration   5: 626079.453 ops/s
# Warmup Iteration   6: 734475.385 ops/s
# Warmup Iteration   7: 742539.490 ops/s
# Warmup Iteration   8: 744866.536 ops/s
# Warmup Iteration   9: 736789.300 ops/s
# Warmup Iteration  10: 734093.239 ops/s
# Warmup Iteration  11: 739957.192 ops/s
# Warmup Iteration  12: 742890.095 ops/s
# Warmup Iteration  13: 732327.157 ops/s
# Warmup Iteration  14: 741755.613 ops/s
# Warmup Iteration  15: 739614.745 ops/s
# Warmup Iteration  16: 735456.918 ops/s
# Warmup Iteration  17: 740343.737 ops/s
# Warmup Iteration  18: 736650.690 ops/s
# Warmup Iteration  19: 739180.204 ops/s
# Warmup Iteration  20: 739330.927 ops/s
# Warmup Iteration  21: 740194.328 ops/s
# Warmup Iteration  22: 741868.095 ops/s
# Warmup Iteration  23: 738315.656 ops/s
# Warmup Iteration  24: 738885.237 ops/s
# Warmup Iteration  25: 742809.061 ops/s
# Warmup Iteration  26: 742088.313 ops/s
# Warmup Iteration  27: 739862.209 ops/s
# Warmup Iteration  28: 738958.328 ops/s
# Warmup Iteration  29: 738100.172 ops/s
# Warmup Iteration  30: 737789.034 ops/s
Iteration   1: 745709.241 ops/s
Iteration   2: 740429.172 ops/s
Iteration   3: 740295.208 ops/s
Iteration   4: 747612.832 ops/s
Iteration   5: 741914.382 ops/s
Iteration   6: 743788.355 ops/s
Iteration   7: 738791.312 ops/s
Iteration   8: 731086.271 ops/s
Iteration   9: 738156.370 ops/s
Iteration  10: 742860.935 ops/s
Iteration  11: 747357.771 ops/s
Iteration  12: 742495.553 ops/s
Iteration  13: 742839.309 ops/s
Iteration  14: 730824.362 ops/s
Iteration  15: 739477.260 ops/s
Iteration  16: 736428.797 ops/s
Iteration  17: 727527.307 ops/s
Iteration  18: 747365.243 ops/s
Iteration  19: 739393.411 ops/s
Iteration  20: 740901.983 ops/s
Iteration  21: 740820.971 ops/s
Iteration  22: 741282.660 ops/s
Iteration  23: 739546.835 ops/s
Iteration  24: 741632.161 ops/s
Iteration  25: 740523.414 ops/s
Iteration  26: 741019.185 ops/s
Iteration  27: 739743.444 ops/s
Iteration  28: 744285.038 ops/s
Iteration  29: 742779.901 ops/s
Iteration  30: 741792.512 ops/s


Result "org.eclipse.collections.impl.multimap.list.MultiReaderFastListMultimapTest._Benchmark.benchmark_addAndGrowMultimap":
  740622.707 ±(99.9%) 3044.578 ops/s [Average]
  (min, avg, max) = (727527.307, 740622.707, 747612.832), stdev = 4556.981
  CI (99.9%): [737578.129, 743667.284] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
MultiReaderFastListMultimapTest._Benchmark.benchmark_addAndGrowMultimap  thrpt   30  740622.707 ± 3044.578  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.multimap.list.MultiReaderFastListMultimapTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.multimap.list.MultiReaderFastListMultimapTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 137089.563 ops/s
# Warmup Iteration   2: 285533.571 ops/s
# Warmup Iteration   3: 341020.684 ops/s
# Warmup Iteration   4: 344045.967 ops/s
# Warmup Iteration   5: 343298.156 ops/s
# Warmup Iteration   6: 329359.828 ops/s
# Warmup Iteration   7: 303183.717 ops/s
# Warmup Iteration   8: 343888.397 ops/s
# Warmup Iteration   9: 344700.143 ops/s
# Warmup Iteration  10: 344030.171 ops/s
# Warmup Iteration  11: 344640.873 ops/s
# Warmup Iteration  12: 343176.182 ops/s
# Warmup Iteration  13: 344675.904 ops/s
# Warmup Iteration  14: 344237.031 ops/s
# Warmup Iteration  15: 344241.147 ops/s
# Warmup Iteration  16: 343777.184 ops/s
# Warmup Iteration  17: 344911.180 ops/s
# Warmup Iteration  18: 344328.546 ops/s
# Warmup Iteration  19: 344500.590 ops/s
# Warmup Iteration  20: 342235.989 ops/s
# Warmup Iteration  21: 345221.492 ops/s
# Warmup Iteration  22: 344404.183 ops/s
# Warmup Iteration  23: 340642.520 ops/s
# Warmup Iteration  24: 344683.519 ops/s
# Warmup Iteration  25: 344413.534 ops/s
# Warmup Iteration  26: 344071.686 ops/s
# Warmup Iteration  27: 344552.112 ops/s
# Warmup Iteration  28: 344191.950 ops/s
# Warmup Iteration  29: 343941.366 ops/s
# Warmup Iteration  30: 344048.160 ops/s
Iteration   1: 343720.202 ops/s
Iteration   2: 343194.956 ops/s
Iteration   3: 340919.596 ops/s
Iteration   4: 344942.278 ops/s
Iteration   5: 343945.311 ops/s
Iteration   6: 343871.636 ops/s
Iteration   7: 343692.082 ops/s
Iteration   8: 344837.725 ops/s
Iteration   9: 344856.003 ops/s
Iteration  10: 343900.127 ops/s
Iteration  11: 343723.441 ops/s
Iteration  12: 344595.904 ops/s
Iteration  13: 343803.773 ops/s
Iteration  14: 343862.000 ops/s
Iteration  15: 344315.735 ops/s
Iteration  16: 343839.562 ops/s
Iteration  17: 344955.029 ops/s
Iteration  18: 344049.750 ops/s
Iteration  19: 344003.032 ops/s
Iteration  20: 344612.432 ops/s
Iteration  21: 343732.764 ops/s
Iteration  22: 344030.501 ops/s
Iteration  23: 344299.352 ops/s
Iteration  24: 342630.101 ops/s
Iteration  25: 344921.144 ops/s
Iteration  26: 345261.013 ops/s
Iteration  27: 345352.162 ops/s
Iteration  28: 344976.914 ops/s
Iteration  29: 343574.123 ops/s
Iteration  30: 343513.438 ops/s


Result "org.eclipse.collections.impl.multimap.list.MultiReaderFastListMultimapTest._Benchmark.benchmark_clear":
  344064.403 ±(99.9%) 583.500 ops/s [Average]
  (min, avg, max) = (340919.596, 344064.403, 345352.162), stdev = 873.356
  CI (99.9%): [343480.903, 344647.903] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score     Error  Units
MultiReaderFastListMultimapTest._Benchmark.benchmark_clear  thrpt   30  344064.403 ± 583.500  ops/s
----------------------------------------
